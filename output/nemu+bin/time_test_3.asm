
build/nemu/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	0002e517          	auipc	a0,0x2e
    80000012:	ff250513          	addi	a0,a0,-14 # 8002e000 <__bss_start>
    la a1, __bss_end
    80000016:	00045597          	auipc	a1,0x45
    8000001a:	04e58593          	addi	a1,a1,78 # 80045064 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	691200ef          	jal	80020ebc <_init>
    call main
    80000030:	7f7200ef          	jal	80021026 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	34b200ef          	jal	80020b80 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	00021597          	auipc	a1,0x21
    80000042:	06a58593          	addi	a1,a1,106 # 800210a8 <__func__.1>
    80000046:	00023517          	auipc	a0,0x23
    8000004a:	b0a50513          	addi	a0,a0,-1270 # 80022b50 <__func__.2+0x2e8>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	417200ef          	jal	80020c70 <printf>
    8000005e:	4529                	li	a0,10
    80000060:	2a0200ef          	jal	80020300 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	00023617          	auipc	a2,0x23
    80000074:	af060613          	addi	a2,a2,-1296 # 80022b60 <__func__.2+0x2f8>
    80000078:	08200593          	li	a1,130
    8000007c:	00023517          	auipc	a0,0x23
    80000080:	aec50513          	addi	a0,a0,-1300 # 80022b68 <__func__.2+0x300>
    80000084:	44400493          	li	s1,1092
    80000088:	3e9200ef          	jal	80020c70 <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	00023597          	auipc	a1,0x23
    80000094:	ab058593          	addi	a1,a1,-1360 # 80022b40 <__func__.2+0x2d8>
    80000098:	00023517          	auipc	a0,0x23
    8000009c:	ae850513          	addi	a0,a0,-1304 # 80022b80 <__func__.2+0x318>
    800000a0:	3d1200ef          	jal	80020c70 <printf>
    800000a4:	00023517          	auipc	a0,0x23
    800000a8:	ae450513          	addi	a0,a0,-1308 # 80022b88 <__func__.2+0x320>
    800000ac:	3c5200ef          	jal	80020c70 <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	00023517          	auipc	a0,0x23
    800000ba:	ada50513          	addi	a0,a0,-1318 # 80022b90 <__func__.2+0x328>
    800000be:	3b3200ef          	jal	80020c70 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	23a200ef          	jal	80020300 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	234200ef          	jal	80020300 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	00023617          	auipc	a2,0x23
    800000e8:	ac460613          	addi	a2,a2,-1340 # 80022ba8 <__func__.2+0x340>
    800000ec:	08200593          	li	a1,130
    800000f0:	00023517          	auipc	a0,0x23
    800000f4:	a7850513          	addi	a0,a0,-1416 # 80022b68 <__func__.2+0x300>
    800000f8:	379200ef          	jal	80020c70 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	00023597          	auipc	a1,0x23
    80000104:	a4058593          	addi	a1,a1,-1472 # 80022b40 <__func__.2+0x2d8>
    80000108:	00023517          	auipc	a0,0x23
    8000010c:	a7850513          	addi	a0,a0,-1416 # 80022b80 <__func__.2+0x318>
    80000110:	361200ef          	jal	80020c70 <printf>
    80000114:	00023517          	auipc	a0,0x23
    80000118:	a7450513          	addi	a0,a0,-1420 # 80022b88 <__func__.2+0x320>
    8000011c:	355200ef          	jal	80020c70 <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	00023517          	auipc	a0,0x23
    8000012a:	a6a50513          	addi	a0,a0,-1430 # 80022b90 <__func__.2+0x328>
    8000012e:	343200ef          	jal	80020c70 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	1ca200ef          	jal	80020300 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	1c4200ef          	jal	80020300 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	00023617          	auipc	a2,0x23
    80000158:	a5c60613          	addi	a2,a2,-1444 # 80022bb0 <__func__.2+0x348>
    8000015c:	08200593          	li	a1,130
    80000160:	00023517          	auipc	a0,0x23
    80000164:	a0850513          	addi	a0,a0,-1528 # 80022b68 <__func__.2+0x300>
    80000168:	309200ef          	jal	80020c70 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	00023597          	auipc	a1,0x23
    80000174:	9d058593          	addi	a1,a1,-1584 # 80022b40 <__func__.2+0x2d8>
    80000178:	00023517          	auipc	a0,0x23
    8000017c:	a0850513          	addi	a0,a0,-1528 # 80022b80 <__func__.2+0x318>
    80000180:	2f1200ef          	jal	80020c70 <printf>
    80000184:	00023517          	auipc	a0,0x23
    80000188:	a0450513          	addi	a0,a0,-1532 # 80022b88 <__func__.2+0x320>
    8000018c:	2e5200ef          	jal	80020c70 <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	00023517          	auipc	a0,0x23
    8000019a:	9fa50513          	addi	a0,a0,-1542 # 80022b90 <__func__.2+0x328>
    8000019e:	2d3200ef          	jal	80020c70 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	15a200ef          	jal	80020300 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	154200ef          	jal	80020300 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	00023617          	auipc	a2,0x23
    800001c8:	9f460613          	addi	a2,a2,-1548 # 80022bb8 <__func__.2+0x350>
    800001cc:	08200593          	li	a1,130
    800001d0:	00023517          	auipc	a0,0x23
    800001d4:	99850513          	addi	a0,a0,-1640 # 80022b68 <__func__.2+0x300>
    800001d8:	44400993          	li	s3,1092
    800001dc:	295200ef          	jal	80020c70 <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	00023597          	auipc	a1,0x23
    800001e8:	95c58593          	addi	a1,a1,-1700 # 80022b40 <__func__.2+0x2d8>
    800001ec:	00023517          	auipc	a0,0x23
    800001f0:	99450513          	addi	a0,a0,-1644 # 80022b80 <__func__.2+0x318>
    800001f4:	27d200ef          	jal	80020c70 <printf>
    800001f8:	00023517          	auipc	a0,0x23
    800001fc:	99050513          	addi	a0,a0,-1648 # 80022b88 <__func__.2+0x320>
    80000200:	271200ef          	jal	80020c70 <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	00023517          	auipc	a0,0x23
    8000020e:	98650513          	addi	a0,a0,-1658 # 80022b90 <__func__.2+0x328>
    80000212:	25f200ef          	jal	80020c70 <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	0e6200ef          	jal	80020300 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	0e0200ef          	jal	80020300 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	00023617          	auipc	a2,0x23
    8000023c:	98860613          	addi	a2,a2,-1656 # 80022bc0 <__func__.2+0x358>
    80000240:	08200593          	li	a1,130
    80000244:	00023517          	auipc	a0,0x23
    80000248:	92450513          	addi	a0,a0,-1756 # 80022b68 <__func__.2+0x300>
    8000024c:	225200ef          	jal	80020c70 <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	00023597          	auipc	a1,0x23
    80000258:	8ec58593          	addi	a1,a1,-1812 # 80022b40 <__func__.2+0x2d8>
    8000025c:	00023517          	auipc	a0,0x23
    80000260:	92450513          	addi	a0,a0,-1756 # 80022b80 <__func__.2+0x318>
    80000264:	20d200ef          	jal	80020c70 <printf>
    80000268:	00023517          	auipc	a0,0x23
    8000026c:	92050513          	addi	a0,a0,-1760 # 80022b88 <__func__.2+0x320>
    80000270:	201200ef          	jal	80020c70 <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	00023517          	auipc	a0,0x23
    8000027e:	91650513          	addi	a0,a0,-1770 # 80022b90 <__func__.2+0x328>
    80000282:	1ef200ef          	jal	80020c70 <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	076200ef          	jal	80020300 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	070200ef          	jal	80020300 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	00023617          	auipc	a2,0x23
    800002ac:	92060613          	addi	a2,a2,-1760 # 80022bc8 <__func__.2+0x360>
    800002b0:	08200593          	li	a1,130
    800002b4:	00023517          	auipc	a0,0x23
    800002b8:	8b450513          	addi	a0,a0,-1868 # 80022b68 <__func__.2+0x300>
    800002bc:	1b5200ef          	jal	80020c70 <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	00023597          	auipc	a1,0x23
    800002c8:	87c58593          	addi	a1,a1,-1924 # 80022b40 <__func__.2+0x2d8>
    800002cc:	00023517          	auipc	a0,0x23
    800002d0:	8b450513          	addi	a0,a0,-1868 # 80022b80 <__func__.2+0x318>
    800002d4:	19d200ef          	jal	80020c70 <printf>
    800002d8:	00023517          	auipc	a0,0x23
    800002dc:	8b050513          	addi	a0,a0,-1872 # 80022b88 <__func__.2+0x320>
    800002e0:	191200ef          	jal	80020c70 <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	00023517          	auipc	a0,0x23
    800002ee:	8a650513          	addi	a0,a0,-1882 # 80022b90 <__func__.2+0x328>
    800002f2:	17f200ef          	jal	80020c70 <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	006200ef          	jal	80020300 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	000200ef          	jal	80020300 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	00023617          	auipc	a2,0x23
    8000031c:	8b860613          	addi	a2,a2,-1864 # 80022bd0 <__func__.2+0x368>
    80000320:	08200593          	li	a1,130
    80000324:	00023517          	auipc	a0,0x23
    80000328:	84450513          	addi	a0,a0,-1980 # 80022b68 <__func__.2+0x300>
    8000032c:	145200ef          	jal	80020c70 <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	00023597          	auipc	a1,0x23
    80000338:	80c58593          	addi	a1,a1,-2036 # 80022b40 <__func__.2+0x2d8>
    8000033c:	00023517          	auipc	a0,0x23
    80000340:	84450513          	addi	a0,a0,-1980 # 80022b80 <__func__.2+0x318>
    80000344:	12d200ef          	jal	80020c70 <printf>
    80000348:	00023517          	auipc	a0,0x23
    8000034c:	84050513          	addi	a0,a0,-1984 # 80022b88 <__func__.2+0x320>
    80000350:	121200ef          	jal	80020c70 <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	00023517          	auipc	a0,0x23
    8000035e:	83650513          	addi	a0,a0,-1994 # 80022b90 <__func__.2+0x328>
    80000362:	10f200ef          	jal	80020c70 <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	7971f0ef          	jal	80020300 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	7911f0ef          	jal	80020300 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	00023617          	auipc	a2,0x23
    8000038c:	85860613          	addi	a2,a2,-1960 # 80022be0 <__func__.2+0x378>
    80000390:	08200593          	li	a1,130
    80000394:	00022517          	auipc	a0,0x22
    80000398:	7d450513          	addi	a0,a0,2004 # 80022b68 <__func__.2+0x300>
    8000039c:	0d5200ef          	jal	80020c70 <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	00022597          	auipc	a1,0x22
    800003a8:	79c58593          	addi	a1,a1,1948 # 80022b40 <__func__.2+0x2d8>
    800003ac:	00022517          	auipc	a0,0x22
    800003b0:	7d450513          	addi	a0,a0,2004 # 80022b80 <__func__.2+0x318>
    800003b4:	0bd200ef          	jal	80020c70 <printf>
    800003b8:	00022517          	auipc	a0,0x22
    800003bc:	7d050513          	addi	a0,a0,2000 # 80022b88 <__func__.2+0x320>
    800003c0:	0b1200ef          	jal	80020c70 <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	00022517          	auipc	a0,0x22
    800003ce:	7c650513          	addi	a0,a0,1990 # 80022b90 <__func__.2+0x328>
    800003d2:	09f200ef          	jal	80020c70 <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	7271f0ef          	jal	80020300 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	7211f0ef          	jal	80020300 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	00022597          	auipc	a1,0x22
    800003ee:	75658593          	addi	a1,a1,1878 # 80022b40 <__func__.2+0x2d8>
    800003f2:	00022517          	auipc	a0,0x22
    800003f6:	7f650513          	addi	a0,a0,2038 # 80022be8 <__func__.2+0x380>
    800003fa:	077200ef          	jal	80020c70 <printf>
    800003fe:	4511                	li	a0,4
    80000400:	6d8000ef          	jal	80000ad8 <goto_priv>
    80000404:	7a5000ef          	jal	800013a8 <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	00022597          	auipc	a1,0x22
    8000041e:	71658593          	addi	a1,a1,1814 # 80022b30 <__func__.2+0x2c8>
    80000422:	00022517          	auipc	a0,0x22
    80000426:	75e50513          	addi	a0,a0,1886 # 80022b80 <__func__.2+0x318>
    8000042a:	047200ef          	jal	80020c70 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	6d11f0ef          	jal	80020300 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	00022597          	auipc	a1,0x22
    8000043a:	6fa58593          	addi	a1,a1,1786 # 80022b30 <__func__.2+0x2c8>
    8000043e:	00022517          	auipc	a0,0x22
    80000442:	74250513          	addi	a0,a0,1858 # 80022b80 <__func__.2+0x318>
    80000446:	02b200ef          	jal	80020c70 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	6b51f0ef          	jal	80020300 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	00022597          	auipc	a1,0x22
    8000045c:	6d858593          	addi	a1,a1,1752 # 80022b30 <__func__.2+0x2c8>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	00022597          	auipc	a1,0x22
    80000466:	6ce58593          	addi	a1,a1,1742 # 80022b30 <__func__.2+0x2c8>
    8000046a:	00022517          	auipc	a0,0x22
    8000046e:	71650513          	addi	a0,a0,1814 # 80022b80 <__func__.2+0x318>
    80000472:	7fe200ef          	jal	80020c70 <printf>
    80000476:	4529                	li	a0,10
    80000478:	6891f0ef          	jal	80020300 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	00022597          	auipc	a1,0x22
    80000482:	6b258593          	addi	a1,a1,1714 # 80022b30 <__func__.2+0x2c8>
    80000486:	00022517          	auipc	a0,0x22
    8000048a:	6fa50513          	addi	a0,a0,1786 # 80022b80 <__func__.2+0x318>
    8000048e:	7e2200ef          	jal	80020c70 <printf>
    80000492:	4529                	li	a0,10
    80000494:	66d1f0ef          	jal	80020300 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	00022597          	auipc	a1,0x22
    8000049e:	69658593          	addi	a1,a1,1686 # 80022b30 <__func__.2+0x2c8>
    800004a2:	00022517          	auipc	a0,0x22
    800004a6:	6de50513          	addi	a0,a0,1758 # 80022b80 <__func__.2+0x318>
    800004aa:	7c6200ef          	jal	80020c70 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	6511f0ef          	jal	80020300 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	00022597          	auipc	a1,0x22
    800004ba:	67a58593          	addi	a1,a1,1658 # 80022b30 <__func__.2+0x2c8>
    800004be:	00022517          	auipc	a0,0x22
    800004c2:	6c250513          	addi	a0,a0,1730 # 80022b80 <__func__.2+0x318>
    800004c6:	7aa200ef          	jal	80020c70 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	6351f0ef          	jal	80020300 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	00022597          	auipc	a1,0x22
    800004d6:	65e58593          	addi	a1,a1,1630 # 80022b30 <__func__.2+0x2c8>
    800004da:	00022517          	auipc	a0,0x22
    800004de:	6a650513          	addi	a0,a0,1702 # 80022b80 <__func__.2+0x318>
    800004e2:	78e200ef          	jal	80020c70 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	6191f0ef          	jal	80020300 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	00022597          	auipc	a1,0x22
    800004f2:	64258593          	addi	a1,a1,1602 # 80022b30 <__func__.2+0x2c8>
    800004f6:	00022517          	auipc	a0,0x22
    800004fa:	68a50513          	addi	a0,a0,1674 # 80022b80 <__func__.2+0x318>
    800004fe:	772200ef          	jal	80020c70 <printf>
    80000502:	4529                	li	a0,10
    80000504:	5fd1f0ef          	jal	80020300 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	00021597          	auipc	a1,0x21
    80000512:	bb258593          	addi	a1,a1,-1102 # 800210c0 <__func__.0>
    80000516:	00022517          	auipc	a0,0x22
    8000051a:	63a50513          	addi	a0,a0,1594 # 80022b50 <__func__.2+0x2e8>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	74e200ef          	jal	80020c70 <printf>
    80000526:	4529                	li	a0,10
    80000528:	5d91f0ef          	jal	80020300 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	00022617          	auipc	a2,0x22
    80000540:	6b460613          	addi	a2,a2,1716 # 80022bf0 <__func__.2+0x388>
    80000544:	08200593          	li	a1,130
    80000548:	00022517          	auipc	a0,0x22
    8000054c:	62050513          	addi	a0,a0,1568 # 80022b68 <__func__.2+0x300>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	71c200ef          	jal	80020c70 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	00022597          	auipc	a1,0x22
    8000055e:	5d658593          	addi	a1,a1,1494 # 80022b30 <__func__.2+0x2c8>
    80000562:	00022517          	auipc	a0,0x22
    80000566:	61e50513          	addi	a0,a0,1566 # 80022b80 <__func__.2+0x318>
    8000056a:	706200ef          	jal	80020c70 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	5911f0ef          	jal	80020300 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	00022597          	auipc	a1,0x22
    80000578:	5bc58593          	addi	a1,a1,1468 # 80022b30 <__func__.2+0x2c8>
    8000057c:	00022517          	auipc	a0,0x22
    80000580:	66c50513          	addi	a0,a0,1644 # 80022be8 <__func__.2+0x380>
    80000584:	6ec200ef          	jal	80020c70 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	54e000ef          	jal	80000ad8 <goto_priv>
    8000058e:	61b000ef          	jal	800013a8 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	00022597          	auipc	a1,0x22
    800005a0:	5a458593          	addi	a1,a1,1444 # 80022b40 <__func__.2+0x2d8>
    800005a4:	00022517          	auipc	a0,0x22
    800005a8:	5dc50513          	addi	a0,a0,1500 # 80022b80 <__func__.2+0x318>
    800005ac:	6c4200ef          	jal	80020c70 <printf>
    800005b0:	00022517          	auipc	a0,0x22
    800005b4:	5d850513          	addi	a0,a0,1496 # 80022b88 <__func__.2+0x320>
    800005b8:	6b8200ef          	jal	80020c70 <printf>
    800005bc:	00022517          	auipc	a0,0x22
    800005c0:	65450513          	addi	a0,a0,1620 # 80022c10 <__func__.2+0x3a8>
    800005c4:	6ac200ef          	jal	80020c70 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	5351f0ef          	jal	80020300 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	52f1f0ef          	jal	80020300 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005e0:	00043e17          	auipc	t3,0x43
    800005e4:	a20e0e13          	addi	t3,t3,-1504 # 80043000 <hspt+0x1000>
    hspt[1][0] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e8:	00044697          	auipc	a3,0x44
    800005ec:	a1868693          	addi	a3,a3,-1512 # 80044000 <hspt+0x2000>
        hspt[0][i] = 
    800005f0:	0cf00e93          	li	t4,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005f4:	0026d313          	srli	t1,a3,0x2
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005f8:	002e5813          	srli	a6,t3,0x2
        hspt[0][i] = 
    800005fc:	100005b7          	lui	a1,0x10000
    80000600:	20000637          	lui	a2,0x20000
    80000604:	300007b7          	lui	a5,0x30000
    80000608:	00042897          	auipc	a7,0x42
    8000060c:	9f888893          	addi	a7,a7,-1544 # 80042000 <hspt>
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000610:	00186813          	ori	a6,a6,1
        hspt[0][i] = 
    80000614:	9676                	add	a2,a2,t4
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000616:	00136313          	ori	t1,t1,1
        hspt[0][i] = 
    8000061a:	95f6                	add	a1,a1,t4
    8000061c:	97f6                	add	a5,a5,t4


    addr = TEST_PPAGE_BASE;
    8000061e:	4745                	li	a4,17
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000620:	44100513          	li	a0,1089
    hspt[0][4] =
    80000624:	0308b023          	sd	a6,32(a7)
        hspt[0][i] = 
    80000628:	00c8b823          	sd	a2,16(a7)
    hspt[1][0] = 
    8000062c:	006e3023          	sd	t1,0(t3)
        hspt[0][i] = 
    80000630:	01d8b023          	sd	t4,0(a7)
    80000634:	00b8b423          	sd	a1,8(a7)
    80000638:	00f8bc23          	sd	a5,24(a7)
    addr = TEST_PPAGE_BASE;
    8000063c:	076e                	slli	a4,a4,0x1b
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000063e:	0556                	slli	a0,a0,0x15
    80000640:	0002a617          	auipc	a2,0x2a
    80000644:	e8860613          	addi	a2,a2,-376 # 8002a4c8 <test_page_perm_table>
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr += PAGE_SIZE;
    80000648:	6805                	lui	a6,0x1
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000064a:	620c                	ld	a1,0(a2)
    8000064c:	00275793          	srli	a5,a4,0x2
        addr += PAGE_SIZE;
    80000650:	9742                	add	a4,a4,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    80000652:	8fcd                	or	a5,a5,a1
    80000654:	0c07e793          	ori	a5,a5,192
    80000658:	e29c                	sd	a5,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000065a:	0641                	addi	a2,a2,16
    8000065c:	06a1                	addi	a3,a3,8
    8000065e:	fea716e3          	bne	a4,a0,8000064a <hspt_init+0x6a>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000662:	0002c797          	auipc	a5,0x2c
    80000666:	e6a7a783          	lw	a5,-406(a5) # 8002c4cc <curr_priv>
    8000066a:	4705                	li	a4,1
    8000066c:	37f5                	addiw	a5,a5,-3
    8000066e:	00f76a63          	bltu	a4,a5,80000682 <hspt_init+0xa2>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    80000672:	577d                	li	a4,-1
    80000674:	00c8d793          	srli	a5,a7,0xc
    80000678:	177e                	slli	a4,a4,0x3f
    8000067a:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    8000067c:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000680:	8082                	ret
void hspt_init(){
    80000682:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000684:	00022517          	auipc	a0,0x22
    80000688:	60c50513          	addi	a0,a0,1548 # 80022c90 <__func__.2+0x428>
void hspt_init(){
    8000068c:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000068e:	5e2200ef          	jal	80020c70 <printf>
    80000692:	0c000613          	li	a2,192
    80000696:	00021597          	auipc	a1,0x21
    8000069a:	a3a58593          	addi	a1,a1,-1478 # 800210d0 <__func__.2>
    8000069e:	00022517          	auipc	a0,0x22
    800006a2:	63a50513          	addi	a0,a0,1594 # 80022cd8 <__func__.2+0x470>
    800006a6:	5ca200ef          	jal	80020c70 <printf>
    800006aa:	4501                	li	a0,0
    800006ac:	4d4200ef          	jal	80020b80 <exit>

00000000800006b0 <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006b0:	0003d717          	auipc	a4,0x3d
    800006b4:	95070713          	addi	a4,a4,-1712 # 8003d000 <vspt+0x1000>
void vspt_init(){
    800006b8:	1141                	addi	sp,sp,-16
        vspt[0][i] = 
    800006ba:	0cf00893          	li	a7,207
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006be:	00275813          	srli	a6,a4,0x2
        vspt[0][i] = 
    800006c2:	100006b7          	lui	a3,0x10000
    800006c6:	300007b7          	lui	a5,0x30000
void vspt_init(){
    800006ca:	e022                	sd	s0,0(sp)
    800006cc:	e406                	sd	ra,8(sp)
        vspt[0][i] = 
    800006ce:	0003c417          	auipc	s0,0x3c
    800006d2:	93240413          	addi	s0,s0,-1742 # 8003c000 <vspt>
    800006d6:	96c6                	add	a3,a3,a7
    800006d8:	97c6                	add	a5,a5,a7
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006da:	00186813          	ori	a6,a6,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006de:	6605                	lui	a2,0x1
    800006e0:	853a                	mv	a0,a4
    800006e2:	4581                	li	a1,0
        vspt[0][i] = 
    800006e4:	e414                	sd	a3,8(s0)
    800006e6:	ec1c                	sd	a5,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    800006e8:	01043823          	sd	a6,16(s0)
        vspt[0][i] = 
    800006ec:	01143023          	sd	a7,0(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006f0:	6d8200ef          	jal	80020dc8 <memset>
    addr = MEM_BASE;
    800006f4:	4785                	li	a5,1
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006f6:	46c5                	li	a3,17
    addr = MEM_BASE;
    800006f8:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006fa:	06ee                	slli	a3,a3,0x1b
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    800006fc:	00200637          	lui	a2,0x200
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000700:	0027d713          	srli	a4,a5,0x2
    80000704:	0cf76713          	ori	a4,a4,207
        vspt[1][i] = 
    80000708:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000070a:	97b2                	add	a5,a5,a2
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    8000070c:	0521                	addi	a0,a0,8
    8000070e:	fed799e3          	bne	a5,a3,80000700 <vspt_init+0x50>
    }

    vspt[0][4] =
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000712:	0003e897          	auipc	a7,0x3e
    80000716:	8ee88893          	addi	a7,a7,-1810 # 8003e000 <vspt+0x2000>

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000071a:	0003f697          	auipc	a3,0x3f
    8000071e:	8e668693          	addi	a3,a3,-1818 # 8003f000 <vspt+0x3000>
    80000722:	0026d613          	srli	a2,a3,0x2
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000726:	0028d713          	srli	a4,a7,0x2
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000072a:	00166613          	ori	a2,a2,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000072e:	00176713          	ori	a4,a4,1

    addr = TEST_VPAGE_BASE;
    80000732:	4785                	li	a5,1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000734:	00801537          	lui	a0,0x801
    vspt[2][0] = 
    80000738:	00c8b023          	sd	a2,0(a7)
    vspt[0][4] =
    8000073c:	f018                	sd	a4,32(s0)
    addr = TEST_VPAGE_BASE;
    8000073e:	1782                	slli	a5,a5,0x20
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000740:	0526                	slli	a0,a0,0x9
    80000742:	0002a617          	auipc	a2,0x2a
    80000746:	d8660613          	addi	a2,a2,-634 # 8002a4c8 <test_page_perm_table>
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr +=  PAGE_SIZE;
    8000074a:	6805                	lui	a6,0x1
        vspt[3][i] = (addr >> 2) | PTE_AD |
    8000074c:	620c                	ld	a1,0(a2)
    8000074e:	0027d713          	srli	a4,a5,0x2
        addr +=  PAGE_SIZE;
    80000752:	97c2                	add	a5,a5,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000754:	8f4d                	or	a4,a4,a1
    80000756:	0c076713          	ori	a4,a4,192
    8000075a:	e298                	sd	a4,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000075c:	0641                	addi	a2,a2,16
    8000075e:	06a1                	addi	a3,a3,8
    80000760:	fea796e3          	bne	a5,a0,8000074c <vspt_init+0x9c>
    }

    vspt[2][1] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000764:	00040697          	auipc	a3,0x40
    80000768:	89c68693          	addi	a3,a3,-1892 # 80040000 <vspt+0x4000>
    8000076c:	0026d713          	srli	a4,a3,0x2
    80000770:	00176713          	ori	a4,a4,1

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
    80000774:	40100613          	li	a2,1025
    vspt[2][1] = 
    80000778:	00e8b423          	sd	a4,8(a7)
    for(int i = 0; i < 512; i++){
    8000077c:	065a                	slli	a2,a2,0x16
        vspt[4][i] = (addr >> 2) | 
            PTE_V | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    8000077e:	6585                	lui	a1,0x1
        vspt[4][i] = (addr >> 2) | 
    80000780:	0027d713          	srli	a4,a5,0x2
            PTE_V | PTE_AD | PTE_RWX; 
    80000784:	0cf76713          	ori	a4,a4,207
        vspt[4][i] = (addr >> 2) | 
    80000788:	e298                	sd	a4,0(a3)
        addr +=  PAGE_SIZE;
    8000078a:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    8000078c:	06a1                	addi	a3,a3,8
    8000078e:	fec799e3          	bne	a5,a2,80000780 <vspt_init+0xd0>
    }  

    vspt[0][5] = 
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000792:	00041697          	auipc	a3,0x41
    80000796:	86e68693          	addi	a3,a3,-1938 # 80041000 <vspt+0x5000>
    8000079a:	0026d713          	srli	a4,a3,0x2
    8000079e:	00176713          	ori	a4,a4,1
    
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a2:	4795                	li	a5,5
    for(int i = 0; i < 512; i++){
    800007a4:	460d                	li	a2,3
    vspt[0][5] = 
    800007a6:	f418                	sd	a4,40(s0)
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a8:	07fa                	slli	a5,a5,0x1e
    for(int i = 0; i < 512; i++){
    800007aa:	067e                	slli	a2,a2,0x1f
        vspt[5][i] = (addr >> 2) |
             PTE_V | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    800007ac:	002005b7          	lui	a1,0x200
        vspt[5][i] = (addr >> 2) |
    800007b0:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_AD | PTE_RWX;  
    800007b4:	0cf76713          	ori	a4,a4,207
        vspt[5][i] = (addr >> 2) |
    800007b8:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    800007ba:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    800007bc:	06a1                	addi	a3,a3,8
    800007be:	fec799e3          	bne	a5,a2,800007b0 <vspt_init+0x100>
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    if(curr_priv == PRIV_VS){
    800007c2:	0002c717          	auipc	a4,0x2c
    800007c6:	d0a72703          	lw	a4,-758(a4) # 8002c4cc <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007ca:	57fd                	li	a5,-1
    800007cc:	8031                	srli	s0,s0,0xc
    800007ce:	17fe                	slli	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    800007d0:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007d2:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    800007d4:	04d70163          	beq	a4,a3,80000816 <vspt_init+0x166>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800007d8:	3775                	addiw	a4,a4,-3
    800007da:	4785                	li	a5,1
    800007dc:	00e7e863          	bltu	a5,a4,800007ec <vspt_init+0x13c>
        CSRW(CSR_VSATP, satp);
    800007e0:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    800007e4:	60a2                	ld	ra,8(sp)
    800007e6:	6402                	ld	s0,0(sp)
    800007e8:	0141                	addi	sp,sp,16
    800007ea:	8082                	ret
        ERROR("");
    800007ec:	00022517          	auipc	a0,0x22
    800007f0:	4fc50513          	addi	a0,a0,1276 # 80022ce8 <__func__.2+0x480>
    800007f4:	47c200ef          	jal	80020c70 <printf>
    800007f8:	10600613          	li	a2,262
    800007fc:	00021597          	auipc	a1,0x21
    80000800:	8e458593          	addi	a1,a1,-1820 # 800210e0 <__func__.1>
    80000804:	00022517          	auipc	a0,0x22
    80000808:	4d450513          	addi	a0,a0,1236 # 80022cd8 <__func__.2+0x470>
    8000080c:	464200ef          	jal	80020c70 <printf>
    80000810:	4501                	li	a0,0
    80000812:	36e200ef          	jal	80020b80 <exit>
        CSRW(satp, satp);
    80000816:	18041073          	csrw	satp,s0
}
    8000081a:	60a2                	ld	ra,8(sp)
    8000081c:	6402                	ld	s0,0(sp)
    8000081e:	0141                	addi	sp,sp,16
    80000820:	8082                	ret

0000000080000822 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    80000822:	1141                	addi	sp,sp,-16
    80000824:	e022                	sd	s0,0(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    80000826:	00037417          	auipc	s0,0x37
    8000082a:	7da40413          	addi	s0,s0,2010 # 80038000 <hpt_root>
    8000082e:	6611                	lui	a2,0x4
    80000830:	4581                	li	a1,0
    80000832:	8522                	mv	a0,s0
void hpt_init(){
    80000834:	e406                	sd	ra,8(sp)
        hpt_root[i] = 0;
    80000836:	592200ef          	jal	80020dc8 <memset>
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    8000083a:	0002f717          	auipc	a4,0x2f
    8000083e:	7c670713          	addi	a4,a4,1990 # 80030000 <hpt>
        hpt_root[i] = 
    80000842:	0df00893          	li	a7,223
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000846:	00275793          	srli	a5,a4,0x2
        hpt_root[i] = 
    8000084a:	10000837          	lui	a6,0x10000
    8000084e:	300006b7          	lui	a3,0x30000
    80000852:	96c6                	add	a3,a3,a7
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000854:	0017e793          	ori	a5,a5,1
        hpt_root[i] = 
    80000858:	9846                	add	a6,a6,a7

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000085a:	6605                	lui	a2,0x1
    8000085c:	853a                	mv	a0,a4
    8000085e:	4581                	li	a1,0
        hpt_root[i] = 
    80000860:	ec14                	sd	a3,24(s0)
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    80000862:	e81c                	sd	a5,16(s0)
        hpt_root[i] = 
    80000864:	01143023          	sd	a7,0(s0)
    80000868:	01043423          	sd	a6,8(s0)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000086c:	55c200ef          	jal	80020dc8 <memset>
    addr = MEM_BASE;
    80000870:	4785                	li	a5,1
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000872:	46c5                	li	a3,17
    addr = MEM_BASE;
    80000874:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000876:	06ee                	slli	a3,a3,0x1b
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    80000878:	00200637          	lui	a2,0x200
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    8000087c:	0027d713          	srli	a4,a5,0x2
    80000880:	0df76713          	ori	a4,a4,223
        hpt[0][i] = 
    80000884:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    80000886:	97b2                	add	a5,a5,a2
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000888:	0521                	addi	a0,a0,8
    8000088a:	fed799e3          	bne	a5,a3,8000087c <hpt_init+0x5a>
    }    

    hpt_root[4] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000088e:	00030317          	auipc	t1,0x30
    80000892:	77230313          	addi	t1,t1,1906 # 80031000 <hpt+0x1000>

    hpt_root[2047] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000896:	00031617          	auipc	a2,0x31
    8000089a:	76a60613          	addi	a2,a2,1898 # 80032000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000089e:	00235693          	srli	a3,t1,0x2
    800008a2:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    800008a6:	00265713          	srli	a4,a2,0x2
    800008aa:	00176713          	ori	a4,a4,1
    hpt_root[2047] =
    800008ae:	0003b597          	auipc	a1,0x3b
    800008b2:	74d5b523          	sd	a3,1866(a1) # 8003bff8 <hpt_root+0x3ff8>

    hpt[1][511] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008b6:	44100813          	li	a6,1089
    hpt_root[4] =
    800008ba:	f014                	sd	a3,32(s0)
    hpt[1][0] = 
    800008bc:	00e33023          	sd	a4,0(t1)
    hpt[1][511] = 
    800008c0:	fee63c23          	sd	a4,-8(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c4:	0856                	slli	a6,a6,0x15
    800008c6:	0002a597          	auipc	a1,0x2a
    800008ca:	c0a58593          	addi	a1,a1,-1014 # 8002a4d0 <test_page_perm_table+0x8>
    addr = TEST_PPAGE_BASE;
    800008ce:	86be                	mv	a3,a5
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h;  
        addr +=  PAGE_SIZE;
    800008d0:	6885                	lui	a7,0x1
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008d2:	6188                	ld	a0,0(a1)
    800008d4:	0026d713          	srli	a4,a3,0x2
        addr +=  PAGE_SIZE;
    800008d8:	96c6                	add	a3,a3,a7
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008da:	8f49                	or	a4,a4,a0
    800008dc:	0c076713          	ori	a4,a4,192
    800008e0:	e218                	sd	a4,0(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e2:	05c1                	addi	a1,a1,16
    800008e4:	0621                	addi	a2,a2,8
    800008e6:	ff0696e3          	bne	a3,a6,800008d2 <hpt_init+0xb0>
    }

    hpt[1][1] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800008ea:	00032617          	auipc	a2,0x32
    800008ee:	71660613          	addi	a2,a2,1814 # 80033000 <hpt+0x3000>
    800008f2:	00265713          	srli	a4,a2,0x2
    800008f6:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    800008fa:	44100593          	li	a1,1089
    hpt[1][1] = 
    800008fe:	00e33423          	sd	a4,8(t1)
    for(int i = 0; i < 512; i++){
    80000902:	05d6                	slli	a1,a1,0x15
    addr = TEST_PPAGE_BASE;
    80000904:	873e                	mv	a4,a5
        hpt[3][i] = (addr >> 2) | 
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    80000906:	6505                	lui	a0,0x1
        hpt[3][i] = (addr >> 2) | 
    80000908:	00275693          	srli	a3,a4,0x2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    8000090c:	0df6e693          	ori	a3,a3,223
        hpt[3][i] = (addr >> 2) | 
    80000910:	e214                	sd	a3,0(a2)
        addr +=  PAGE_SIZE;
    80000912:	972a                	add	a4,a4,a0
    for(int i = 0; i < 512; i++){
    80000914:	0621                	addi	a2,a2,8
    80000916:	feb719e3          	bne	a4,a1,80000908 <hpt_init+0xe6>
    }  

    hpt_root[5] =
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    8000091a:	00033697          	auipc	a3,0x33
    8000091e:	6e668693          	addi	a3,a3,1766 # 80034000 <hpt+0x4000>
    80000922:	0026d713          	srli	a4,a3,0x2
    80000926:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    8000092a:	4665                	li	a2,25
    hpt_root[5] =
    8000092c:	f418                	sd	a4,40(s0)
    for(int i = 0; i < 512; i++){
    8000092e:	066e                	slli	a2,a2,0x1b
        hpt[4][i] = (addr >> 2) |
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    80000930:	002005b7          	lui	a1,0x200
        hpt[4][i] = (addr >> 2) |
    80000934:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000938:	0df76713          	ori	a4,a4,223
        hpt[4][i] = (addr >> 2) |
    8000093c:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    8000093e:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000940:	06a1                	addi	a3,a3,8
    80000942:	fec799e3          	bne	a5,a2,80000934 <hpt_init+0x112>
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000946:	0002c797          	auipc	a5,0x2c
    8000094a:	b867a783          	lw	a5,-1146(a5) # 8002c4cc <curr_priv>
    8000094e:	4705                	li	a4,1
    80000950:	37f5                	addiw	a5,a5,-3
    80000952:	00f76d63          	bltu	a4,a5,8000096c <hpt_init+0x14a>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    80000956:	577d                	li	a4,-1
    80000958:	00c45793          	srli	a5,s0,0xc
    8000095c:	177e                	slli	a4,a4,0x3f
    8000095e:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000960:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    80000964:	60a2                	ld	ra,8(sp)
    80000966:	6402                	ld	s0,0(sp)
    80000968:	0141                	addi	sp,sp,16
    8000096a:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    8000096c:	00022517          	auipc	a0,0x22
    80000970:	39450513          	addi	a0,a0,916 # 80022d00 <__func__.2+0x498>
    80000974:	2fc200ef          	jal	80020c70 <printf>
    80000978:	14e00613          	li	a2,334
    8000097c:	00020597          	auipc	a1,0x20
    80000980:	77458593          	addi	a1,a1,1908 # 800210f0 <__func__.0>
    80000984:	00022517          	auipc	a0,0x22
    80000988:	35450513          	addi	a0,a0,852 # 80022cd8 <__func__.2+0x470>
    8000098c:	2e4200ef          	jal	80020c70 <printf>
    80000990:	4501                	li	a0,0
    80000992:	1ee200ef          	jal	80020b80 <exit>

0000000080000996 <hspt_switch>:

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000996:	00043797          	auipc	a5,0x43
    8000099a:	66a78793          	addi	a5,a5,1642 # 80044000 <hspt+0x2000>
    8000099e:	3607b683          	ld	a3,864(a5)
    800009a2:	3687b703          	ld	a4,872(a5)
    800009a6:	36d7b423          	sd	a3,872(a5)
    800009aa:	36e7b023          	sd	a4,864(a5)
    hspt[2][SWITCH2] = temp;
}
    800009ae:	8082                	ret

00000000800009b0 <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    800009b0:	0003e797          	auipc	a5,0x3e
    800009b4:	65078793          	addi	a5,a5,1616 # 8003f000 <vspt+0x3000>
    800009b8:	3607b683          	ld	a3,864(a5)
    800009bc:	3687b703          	ld	a4,872(a5)
    800009c0:	36d7b423          	sd	a3,872(a5)
    800009c4:	36e7b023          	sd	a4,864(a5)
    vspt[3][SWITCH2] = temp;
}
    800009c8:	8082                	ret

00000000800009ca <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    800009ca:	00031797          	auipc	a5,0x31
    800009ce:	63678793          	addi	a5,a5,1590 # 80032000 <hpt+0x2000>
    800009d2:	3607b683          	ld	a3,864(a5)
    800009d6:	3687b703          	ld	a4,872(a5)
    800009da:	36d7b423          	sd	a3,872(a5)
    800009de:	36e7b023          	sd	a4,864(a5)
    hpt[2][SWITCH2] = temp;
}
    800009e2:	8082                	ret

00000000800009e4 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    800009e4:	00044797          	auipc	a5,0x44
    800009e8:	61c78793          	addi	a5,a5,1564 # 80045000 <ecall_args>
    800009ec:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    800009ee:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    800009f0:	00000073          	ecall
    return ecall_args[0];

}
    800009f4:	6388                	ld	a0,0(a5)
    800009f6:	8082                	ret

00000000800009f8 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    800009f8:	0002c797          	auipc	a5,0x2c
    800009fc:	ad47a783          	lw	a5,-1324(a5) # 8002c4cc <curr_priv>
    80000a00:	470d                	li	a4,3
    80000a02:	06e78963          	beq	a5,a4,80000a74 <set_prev_priv+0x7c>
    80000a06:	4711                	li	a4,4
    80000a08:	04e78163          	beq	a5,a4,80000a4a <set_prev_priv+0x52>
    80000a0c:	4709                	li	a4,2
    80000a0e:	08e78863          	beq	a5,a4,80000a9e <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000a12:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a14:	85aa                	mv	a1,a0
    80000a16:	00020617          	auipc	a2,0x20
    80000a1a:	6ea60613          	addi	a2,a2,1770 # 80021100 <__func__.6>
    80000a1e:	00022517          	auipc	a0,0x22
    80000a22:	32250513          	addi	a0,a0,802 # 80022d40 <__func__.2+0x4d8>
void set_prev_priv(int priv){
    80000a26:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a28:	248200ef          	jal	80020c70 <printf>
    80000a2c:	03c00613          	li	a2,60
    80000a30:	00020597          	auipc	a1,0x20
    80000a34:	6d058593          	addi	a1,a1,1744 # 80021100 <__func__.6>
    80000a38:	00022517          	auipc	a0,0x22
    80000a3c:	2a050513          	addi	a0,a0,672 # 80022cd8 <__func__.2+0x470>
    80000a40:	230200ef          	jal	80020c70 <printf>
    80000a44:	4501                	li	a0,0
    80000a46:	13a200ef          	jal	80020b80 <exit>
            uint64_t temp = CSRR(mstatus);
    80000a4a:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a4e:	fc0007b7          	lui	a5,0xfc000
    80000a52:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000a54:	07b6                	slli	a5,a5,0xd
    80000a56:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000a5a:	ffe5069b          	addiw	a3,a0,-2
    80000a5e:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a60:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000a62:	06d67363          	bgeu	a2,a3,80000ac8 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000a66:	e501                	bnez	a0,80000a6e <set_prev_priv+0x76>
    80000a68:	4705                	li	a4,1
    80000a6a:	171e                	slli	a4,a4,0x27
    80000a6c:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000a6e:	30079073          	csrw	mstatus,a5
        break;
    80000a72:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000a74:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000a78:	4705                	li	a4,1
    80000a7a:	ffe5069b          	addiw	a3,a0,-2
    80000a7e:	02d77763          	bgeu	a4,a3,80000aac <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000a82:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000a86:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000a8a:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000a8e:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000a92:	e119                	bnez	a0,80000a98 <set_prev_priv+0xa0>
    80000a94:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000a98:	60079073          	csrw	hstatus,a5
        break;
    80000a9c:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000a9e:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000aa2:	10000793          	li	a5,256
    80000aa6:	1007b073          	csrc	sstatus,a5
        break;
    80000aaa:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000aac:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000ab0:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ab4:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ab8:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000aba:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000abe:	fce51de3          	bne	a0,a4,80000a98 <set_prev_priv+0xa0>
    80000ac2:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ac6:	b7f9                	j	80000a94 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ac8:	6705                	lui	a4,0x1
    80000aca:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000ace:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ad0:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000ad2:	f8d50be3          	beq	a0,a3,80000a68 <set_prev_priv+0x70>
    80000ad6:	bf61                	j	80000a6e <set_prev_priv+0x76>

0000000080000ad8 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000ad8:	1101                	addi	sp,sp,-32
    80000ada:	e822                	sd	s0,16(sp)
    80000adc:	ec06                	sd	ra,24(sp)
    80000ade:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000ae0:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000ae2:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000ae4:	02a7f963          	bgeu	a5,a0,80000b16 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000ae8:	0002c797          	auipc	a5,0x2c
    80000aec:	9e07a783          	lw	a5,-1568(a5) # 8002c4c8 <real_priv>
    80000af0:	0002c497          	auipc	s1,0x2c
    80000af4:	9dc48493          	addi	s1,s1,-1572 # 8002c4cc <curr_priv>
    80000af8:	00a78963          	beq	a5,a0,80000b0a <goto_priv+0x32>
    80000afc:	4791                	li	a5,4
    80000afe:	0002c497          	auipc	s1,0x2c
    80000b02:	9ce48493          	addi	s1,s1,-1586 # 8002c4cc <curr_priv>
    80000b06:	06a7d363          	bge	a5,a0,80000b6c <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000b0a:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000b0c:	60e2                	ld	ra,24(sp)
    80000b0e:	6442                	ld	s0,16(sp)
    80000b10:	64a2                	ld	s1,8(sp)
    80000b12:	6105                	addi	sp,sp,32
    80000b14:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000b16:	0002c717          	auipc	a4,0x2c
    80000b1a:	9b672703          	lw	a4,-1610(a4) # 8002c4cc <curr_priv>
    80000b1e:	0002c497          	auipc	s1,0x2c
    80000b22:	9ae48493          	addi	s1,s1,-1618 # 8002c4cc <curr_priv>
    80000b26:	0ae7f863          	bgeu	a5,a4,80000bd6 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b2a:	0002c797          	auipc	a5,0x2c
    80000b2e:	99e7a783          	lw	a5,-1634(a5) # 8002c4c8 <real_priv>
    80000b32:	fca78ce3          	beq	a5,a0,80000b0a <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000b36:	4789                	li	a5,2
    80000b38:	06f71063          	bne	a4,a5,80000b98 <goto_priv+0xc0>
    80000b3c:	4785                	li	a5,1
    80000b3e:	04f41d63          	bne	s0,a5,80000b98 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000b42:	00022517          	auipc	a0,0x22
    80000b46:	22e50513          	addi	a0,a0,558 # 80022d70 <__func__.2+0x508>
    80000b4a:	126200ef          	jal	80020c70 <printf>
    80000b4e:	04b00613          	li	a2,75
        ERROR("cant lower priv from u");
    80000b52:	00020597          	auipc	a1,0x20
    80000b56:	5be58593          	addi	a1,a1,1470 # 80021110 <__func__.4>
    80000b5a:	00022517          	auipc	a0,0x22
    80000b5e:	17e50513          	addi	a0,a0,382 # 80022cd8 <__func__.2+0x470>
    80000b62:	10e200ef          	jal	80020c70 <printf>
    80000b66:	4501                	li	a0,0
    80000b68:	018200ef          	jal	80020b80 <exit>
    if(target_priv > curr_priv){
    80000b6c:	0002c797          	auipc	a5,0x2c
    80000b70:	9607a783          	lw	a5,-1696(a5) # 8002c4cc <curr_priv>
    80000b74:	02a7f063          	bgeu	a5,a0,80000b94 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000b78:	00044797          	auipc	a5,0x44
    80000b7c:	48878793          	addi	a5,a5,1160 # 80045000 <ecall_args>
    80000b80:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000b82:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000b84:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000b86:	00000073          	ecall
}
    80000b8a:	60e2                	ld	ra,24(sp)
    80000b8c:	6442                	ld	s0,16(sp)
    80000b8e:	64a2                	ld	s1,8(sp)
    80000b90:	6105                	addi	sp,sp,32
    80000b92:	8082                	ret
    if(priv == curr_priv) 
    80000b94:	f6f50ce3          	beq	a0,a5,80000b0c <goto_priv+0x34>
    set_prev_priv(priv);
    80000b98:	8522                	mv	a0,s0
    80000b9a:	e5fff0ef          	jal	800009f8 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000b9e:	0002c797          	auipc	a5,0x2c
    80000ba2:	92e7a783          	lw	a5,-1746(a5) # 8002c4cc <curr_priv>
    real_priv = priv;
    80000ba6:	0002c717          	auipc	a4,0x2c
    80000baa:	92872123          	sw	s0,-1758(a4) # 8002c4c8 <real_priv>
    if(curr_priv == PRIV_M) {
    80000bae:	4711                	li	a4,4
    80000bb0:	04e78e63          	beq	a5,a4,80000c0c <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000bb4:	37f9                	addiw	a5,a5,-2
    80000bb6:	4705                	li	a4,1
    80000bb8:	04f76163          	bltu	a4,a5,80000bfa <goto_priv+0x122>
        asm volatile(
    80000bbc:	00000297          	auipc	t0,0x0
    80000bc0:	01028293          	addi	t0,t0,16 # 80000bcc <goto_priv+0xf4>
    80000bc4:	14129073          	csrw	sepc,t0
    80000bc8:	10200073          	sret
    curr_priv = priv;
    80000bcc:	0002c797          	auipc	a5,0x2c
    80000bd0:	9087a023          	sw	s0,-1792(a5) # 8002c4cc <curr_priv>
    80000bd4:	bf25                	j	80000b0c <goto_priv+0x34>
        goto_priv(PRIV_M);
    80000bd6:	4511                	li	a0,4
    80000bd8:	f01ff0ef          	jal	80000ad8 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000bdc:	0002c797          	auipc	a5,0x2c
    80000be0:	8ec7a783          	lw	a5,-1812(a5) # 8002c4c8 <real_priv>
    80000be4:	f28783e3          	beq	a5,s0,80000b0a <goto_priv+0x32>
    if(target_priv > curr_priv){
    80000be8:	0002c717          	auipc	a4,0x2c
    80000bec:	8e472703          	lw	a4,-1820(a4) # 8002c4cc <curr_priv>
    80000bf0:	f88764e3          	bltu	a4,s0,80000b78 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80000bf4:	f0870ce3          	beq	a4,s0,80000b0c <goto_priv+0x34>
    80000bf8:	bf3d                	j	80000b36 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    80000bfa:	00022517          	auipc	a0,0x22
    80000bfe:	1a650513          	addi	a0,a0,422 # 80022da0 <__func__.2+0x538>
    80000c02:	06e200ef          	jal	80020c70 <printf>
    80000c06:	06300613          	li	a2,99
    80000c0a:	b7a1                	j	80000b52 <goto_priv+0x7a>
        asm volatile(
    80000c0c:	00000297          	auipc	t0,0x0
    80000c10:	01028293          	addi	t0,t0,16 # 80000c1c <goto_priv+0x144>
    80000c14:	34129073          	csrw	mepc,t0
    80000c18:	30200073          	mret
    80000c1c:	bf45                	j	80000bcc <goto_priv+0xf4>

0000000080000c1e <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000c1e:	715d                	addi	sp,sp,-80
    80000c20:	f44e                	sd	s3,40(sp)
    80000c22:	e486                	sd	ra,72(sp)
    80000c24:	e0a2                	sd	s0,64(sp)
    80000c26:	fc26                	sd	s1,56(sp)
    80000c28:	f84a                	sd	s2,48(sp)
    80000c2a:	f052                	sd	s4,32(sp)
    80000c2c:	ec56                	sd	s5,24(sp)
    80000c2e:	e85a                	sd	s6,16(sp)
    80000c30:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    80000c32:	0002c997          	auipc	s3,0x2c
    80000c36:	89698993          	addi	s3,s3,-1898 # 8002c4c8 <real_priv>
    80000c3a:	4791                	li	a5,4
    80000c3c:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    80000c40:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    80000c44:	34102973          	csrr	s2,mepc
    80000c48:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    80000c4a:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80000c4e:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    80000c52:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000c56:	478d                	li	a5,3
    80000c58:	ff848713          	addi	a4,s1,-8
    80000c5c:	12e7ef63          	bltu	a5,a4,80000d9a <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000c60:	00044417          	auipc	s0,0x44
    80000c64:	3a040413          	addi	s0,s0,928 # 80045000 <ecall_args>
    80000c68:	6018                	ld	a4,0(s0)
    80000c6a:	4785                	li	a5,1
    80000c6c:	1cf70763          	beq	a4,a5,80000e3a <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80000c70:	00044797          	auipc	a5,0x44
    80000c74:	3a07c783          	lbu	a5,928(a5) # 80045010 <excpt>
    80000c78:	c3cd                	beqz	a5,80000d1a <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80000c7a:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    80000c7c:	4791                	li	a5,4
    excpt.cause = cause;
    80000c7e:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000c80:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80000c84:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80000c88:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80000c8c:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80000c90:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80000c94:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80000c96:	300027f3          	csrr	a5,mstatus
    80000c9a:	9399                	srli	a5,a5,0x26
    80000c9c:	8ff9                	and	a5,a5,a4
    80000c9e:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80000ca2:	300027f3          	csrr	a5,mstatus
    80000ca6:	939d                	srli	a5,a5,0x27
    80000ca8:	8ff9                	and	a5,a5,a4
    80000caa:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000cae:	00044797          	auipc	a5,0x44
    80000cb2:	36078123          	sb	zero,866(a5) # 80045010 <excpt>
    if(is_inst_fault(cause)){
    80000cb6:	47d1                	li	a5,20
    80000cb8:	0097ed63          	bltu	a5,s1,80000cd2 <mhandler+0xb4>
    80000cbc:	001017b7          	lui	a5,0x101
    80000cc0:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000cc2:	0097d7b3          	srl	a5,a5,s1
    80000cc6:	8ff9                	and	a5,a5,a4
    80000cc8:	c789                	beqz	a5,80000cd2 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    80000cca:	04843a03          	ld	s4,72(s0)
    80000cce:	0e0a0763          	beqz	s4,80000dbc <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000cd2:	0002b797          	auipc	a5,0x2b
    80000cd6:	7fa7a783          	lw	a5,2042(a5) # 8002c4cc <curr_priv>
    unsigned temp_priv = real_priv;
    80000cda:	0002b517          	auipc	a0,0x2b
    80000cde:	7ee52503          	lw	a0,2030(a0) # 8002c4c8 <real_priv>
    excpt.fault_inst = 0;
    80000ce2:	00044717          	auipc	a4,0x44
    80000ce6:	36073323          	sd	zero,870(a4) # 80045048 <excpt+0x38>
    real_priv = curr_priv;
    80000cea:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000cee:	478d                	li	a5,3
    80000cf0:	04f50a63          	beq	a0,a5,80000d44 <mhandler+0x126>
    80000cf4:	4791                	li	a5,4
    80000cf6:	0ef50363          	beq	a0,a5,80000ddc <mhandler+0x1be>
    80000cfa:	4789                	li	a5,2
    80000cfc:	06f50263          	beq	a0,a5,80000d60 <mhandler+0x142>
}
    80000d00:	60a6                	ld	ra,72(sp)
    80000d02:	6406                	ld	s0,64(sp)
    80000d04:	1502                	slli	a0,a0,0x20
    80000d06:	74e2                	ld	s1,56(sp)
    80000d08:	7942                	ld	s2,48(sp)
    80000d0a:	79a2                	ld	s3,40(sp)
    80000d0c:	7a02                	ld	s4,32(sp)
    80000d0e:	6ae2                	ld	s5,24(sp)
    80000d10:	6b42                	ld	s6,16(sp)
    80000d12:	6ba2                	ld	s7,8(sp)
    80000d14:	9101                	srli	a0,a0,0x20
    80000d16:	6161                	addi	sp,sp,80
    80000d18:	8082                	ret
        ERROR("untested exception!");
    80000d1a:	00022517          	auipc	a0,0x22
    80000d1e:	0ae50513          	addi	a0,a0,174 # 80022dc8 <__func__.2+0x560>
    80000d22:	74f1f0ef          	jal	80020c70 <printf>
    80000d26:	0d600613          	li	a2,214
            ERROR("instruction fault without return address");
    80000d2a:	00020597          	auipc	a1,0x20
    80000d2e:	3f658593          	addi	a1,a1,1014 # 80021120 <__func__.3>
    80000d32:	00022517          	auipc	a0,0x22
    80000d36:	fa650513          	addi	a0,a0,-90 # 80022cd8 <__func__.2+0x470>
    80000d3a:	7371f0ef          	jal	80020c70 <printf>
    80000d3e:	4501                	li	a0,0
    80000d40:	6411f0ef          	jal	80020b80 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d44:	600026f3          	csrr	a3,hstatus
    80000d48:	0002b797          	auipc	a5,0x2b
    80000d4c:	7847a783          	lw	a5,1924(a5) # 8002c4cc <curr_priv>
    80000d50:	0806e713          	ori	a4,a3,128
    80000d54:	9bf5                	andi	a5,a5,-3
    80000d56:	c399                	beqz	a5,80000d5c <mhandler+0x13e>
    80000d58:	f7f6f713          	andi	a4,a3,-129
    80000d5c:	60071073          	csrw	hstatus,a4
    80000d60:	100027f3          	csrr	a5,sstatus
    80000d64:	0002b717          	auipc	a4,0x2b
    80000d68:	76872703          	lw	a4,1896(a4) # 8002c4cc <curr_priv>
    80000d6c:	4685                	li	a3,1
    80000d6e:	edf7f793          	andi	a5,a5,-289
    80000d72:	3779                	addiw	a4,a4,-2
    80000d74:	04e6fd63          	bgeu	a3,a4,80000dce <mhandler+0x1b0>
    80000d78:	10079073          	csrw	sstatus,a5
    80000d7c:	f804c2e3          	bltz	s1,80000d00 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d80:	000a5783          	lhu	a5,0(s4)
    80000d84:	468d                	li	a3,3
    else return epc + 2;
    80000d86:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d8a:	8ff5                	and	a5,a5,a3
    80000d8c:	00d79463          	bne	a5,a3,80000d94 <mhandler+0x176>
    80000d90:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d94:	14171073          	csrw	sepc,a4
    80000d98:	b7a5                	j	80000d00 <mhandler+0xe2>
    } else if(!excpt.testing){
    80000d9a:	00044797          	auipc	a5,0x44
    80000d9e:	2767c783          	lbu	a5,630(a5) # 80045010 <excpt>
    80000da2:	dfa5                	beqz	a5,80000d1a <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80000da4:	0004d763          	bgez	s1,80000db2 <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80000da8:	4785                	li	a5,1
    80000daa:	009797b3          	sll	a5,a5,s1
    80000dae:	3447b073          	csrc	mip,a5
    80000db2:	00044417          	auipc	s0,0x44
    80000db6:	24e40413          	addi	s0,s0,590 # 80045000 <ecall_args>
    80000dba:	b5c1                	j	80000c7a <mhandler+0x5c>
            ERROR("instruction fault without return address");
    80000dbc:	00022517          	auipc	a0,0x22
    80000dc0:	03450513          	addi	a0,a0,52 # 80022df0 <__func__.2+0x588>
    80000dc4:	6ad1f0ef          	jal	80020c70 <printf>
    80000dc8:	0ec00613          	li	a2,236
    80000dcc:	bfb9                	j	80000d2a <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000dce:	1007e793          	ori	a5,a5,256
    80000dd2:	10079073          	csrw	sstatus,a5
    80000dd6:	fa04d5e3          	bgez	s1,80000d80 <mhandler+0x162>
    80000dda:	b71d                	j	80000d00 <mhandler+0xe2>
    80000ddc:	30002773          	csrr	a4,mstatus
    80000de0:	fc0007b7          	lui	a5,0xfc000
    80000de4:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000de6:	0002b697          	auipc	a3,0x2b
    80000dea:	6e66a683          	lw	a3,1766(a3) # 8002c4cc <curr_priv>
    80000dee:	07b6                	slli	a5,a5,0xd
    80000df0:	77f78793          	addi	a5,a5,1919
    80000df4:	8ff9                	and	a5,a5,a4
    80000df6:	04a68663          	beq	a3,a0,80000e42 <mhandler+0x224>
    80000dfa:	ffe6871b          	addiw	a4,a3,-2
    80000dfe:	4605                	li	a2,1
    80000e00:	04e66663          	bltu	a2,a4,80000e4c <mhandler+0x22e>
    80000e04:	6705                	lui	a4,0x1
    80000e06:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80000e0a:	4609                	li	a2,2
    80000e0c:	8fd9                	or	a5,a5,a4
    80000e0e:	00c69563          	bne	a3,a2,80000e18 <mhandler+0x1fa>
    80000e12:	4705                	li	a4,1
    80000e14:	171e                	slli	a4,a4,0x27
    80000e16:	8fd9                	or	a5,a5,a4
    80000e18:	30079073          	csrw	mstatus,a5
    80000e1c:	ee04c2e3          	bltz	s1,80000d00 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000e20:	000a5783          	lhu	a5,0(s4)
    80000e24:	468d                	li	a3,3
    else return epc + 2;
    80000e26:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000e2a:	8ff5                	and	a5,a5,a3
    80000e2c:	00d79463          	bne	a5,a3,80000e34 <mhandler+0x216>
    80000e30:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e34:	34171073          	csrw	mepc,a4
    80000e38:	b5e1                	j	80000d00 <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    80000e3a:	4408                	lw	a0,8(s0)
    80000e3c:	c9dff0ef          	jal	80000ad8 <goto_priv>
    if(cause & (1ULL << 63)){
    80000e40:	bd2d                	j	80000c7a <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e42:	6709                	lui	a4,0x2
    80000e44:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80000e48:	8fd9                	or	a5,a5,a4
    80000e4a:	b7f9                	j	80000e18 <mhandler+0x1fa>
    80000e4c:	d2f9                	beqz	a3,80000e12 <mhandler+0x1f4>
    80000e4e:	b7e9                	j	80000e18 <mhandler+0x1fa>

0000000080000e50 <hshandler>:
uint64_t hshandler(){
    80000e50:	715d                	addi	sp,sp,-80
    80000e52:	f44e                	sd	s3,40(sp)
    80000e54:	e486                	sd	ra,72(sp)
    80000e56:	e0a2                	sd	s0,64(sp)
    80000e58:	fc26                	sd	s1,56(sp)
    80000e5a:	f84a                	sd	s2,48(sp)
    80000e5c:	f052                	sd	s4,32(sp)
    80000e5e:	ec56                	sd	s5,24(sp)
    80000e60:	e85a                	sd	s6,16(sp)
    80000e62:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80000e64:	0002b997          	auipc	s3,0x2b
    80000e68:	66498993          	addi	s3,s3,1636 # 8002c4c8 <real_priv>
    80000e6c:	478d                	li	a5,3
    80000e6e:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    80000e72:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80000e76:	14102973          	csrr	s2,sepc
    80000e7a:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    80000e7c:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80000e80:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80000e84:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000e88:	ff848713          	addi	a4,s1,-8
    80000e8c:	04e7ec63          	bltu	a5,a4,80000ee4 <hshandler+0x94>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80000e90:	00044417          	auipc	s0,0x44
    80000e94:	17040413          	addi	s0,s0,368 # 80045000 <ecall_args>
    80000e98:	601c                	ld	a5,0(s0)
    80000e9a:	4585                	li	a1,1
    80000e9c:	14b78d63          	beq	a5,a1,80000ff6 <hshandler+0x1a6>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        printf("%d\n",ECALL_GOTO_PRIV);
    80000ea0:	00022517          	auipc	a0,0x22
    80000ea4:	f9050513          	addi	a0,a0,-112 # 80022e30 <__func__.2+0x5c8>
    80000ea8:	5c91f0ef          	jal	80020c70 <printf>
        printf("%d\n",ecall_args[0]);
    80000eac:	600c                	ld	a1,0(s0)
    80000eae:	00022517          	auipc	a0,0x22
    80000eb2:	f8250513          	addi	a0,a0,-126 # 80022e30 <__func__.2+0x5c8>
    80000eb6:	5bb1f0ef          	jal	80020c70 <printf>
        ERROR("unknown ecall"); 
    80000eba:	00022517          	auipc	a0,0x22
    80000ebe:	f7e50513          	addi	a0,a0,-130 # 80022e38 <__func__.2+0x5d0>
    80000ec2:	5af1f0ef          	jal	80020c70 <printf>
    80000ec6:	10e00613          	li	a2,270
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80000eca:	00020597          	auipc	a1,0x20
    80000ece:	26658593          	addi	a1,a1,614 # 80021130 <__func__.2>
    80000ed2:	00022517          	auipc	a0,0x22
    80000ed6:	e0650513          	addi	a0,a0,-506 # 80022cd8 <__func__.2+0x470>
    80000eda:	5971f0ef          	jal	80020c70 <printf>
    80000ede:	4501                	li	a0,0
    80000ee0:	4a11f0ef          	jal	80020b80 <exit>
    } else if(!excpt.testing){
    80000ee4:	00044797          	auipc	a5,0x44
    80000ee8:	12c7c783          	lbu	a5,300(a5) # 80045010 <excpt>
    80000eec:	cfe5                	beqz	a5,80000fe4 <hshandler+0x194>
    }
    
    if(cause & (1ULL << 63)){
    80000eee:	0004d963          	bgez	s1,80000f00 <hshandler+0xb0>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80000ef2:	4785                	li	a5,1
    80000ef4:	009797b3          	sll	a5,a5,s1
    80000ef8:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80000efc:	6447b073          	csrc	hip,a5
    80000f00:	00044417          	auipc	s0,0x44
    80000f04:	10040413          	addi	s0,s0,256 # 80045000 <ecall_args>
    }

    excpt.triggered = true;
    80000f08:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    80000f0a:	478d                	li	a5,3
    excpt.cause = cause;
    80000f0c:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000f0e:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80000f12:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    80000f16:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80000f1a:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80000f1e:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    80000f22:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    80000f24:	600027f3          	csrr	a5,hstatus
    80000f28:	8399                	srli	a5,a5,0x6
    80000f2a:	8ff9                	and	a5,a5,a4
    80000f2c:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80000f30:	600027f3          	csrr	a5,hstatus
    80000f34:	839d                	srli	a5,a5,0x7
    80000f36:	8ff9                	and	a5,a5,a4
    80000f38:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000f3c:	00044797          	auipc	a5,0x44
    80000f40:	0c078a23          	sb	zero,212(a5) # 80045010 <excpt>
    if(is_inst_fault(cause)){
    80000f44:	47d1                	li	a5,20
    80000f46:	0097ed63          	bltu	a5,s1,80000f60 <hshandler+0x110>
    80000f4a:	001017b7          	lui	a5,0x101
    80000f4e:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000f50:	0097d7b3          	srl	a5,a5,s1
    80000f54:	8ff9                	and	a5,a5,a4
    80000f56:	c789                	beqz	a5,80000f60 <hshandler+0x110>
        if(excpt.fault_inst != 0){ 
    80000f58:	04843a03          	ld	s4,72(s0)
    80000f5c:	0a0a0163          	beqz	s4,80000ffe <hshandler+0x1ae>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000f60:	0002b797          	auipc	a5,0x2b
    80000f64:	56c7a783          	lw	a5,1388(a5) # 8002c4cc <curr_priv>
    unsigned temp_priv = real_priv;
    80000f68:	0002b517          	auipc	a0,0x2b
    80000f6c:	56052503          	lw	a0,1376(a0) # 8002c4c8 <real_priv>
    excpt.fault_inst = 0;
    80000f70:	00044717          	auipc	a4,0x44
    80000f74:	0c073c23          	sd	zero,216(a4) # 80045048 <excpt+0x38>
    real_priv = curr_priv;
    80000f78:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f7c:	478d                	li	a5,3
    80000f7e:	0ef50863          	beq	a0,a5,8000106e <hshandler+0x21e>
    80000f82:	4791                	li	a5,4
    80000f84:	08f50663          	beq	a0,a5,80001010 <hshandler+0x1c0>
    80000f88:	4789                	li	a5,2
    80000f8a:	04f51063          	bne	a0,a5,80000fca <hshandler+0x17a>
    80000f8e:	100027f3          	csrr	a5,sstatus
    80000f92:	0002b717          	auipc	a4,0x2b
    80000f96:	53a72703          	lw	a4,1338(a4) # 8002c4cc <curr_priv>
    80000f9a:	4685                	li	a3,1
    80000f9c:	edf7f793          	andi	a5,a5,-289
    80000fa0:	3779                	addiw	a4,a4,-2
    80000fa2:	00e6e463          	bltu	a3,a4,80000faa <hshandler+0x15a>
    80000fa6:	1007e793          	ori	a5,a5,256
    80000faa:	10079073          	csrw	sstatus,a5
    80000fae:	0004ce63          	bltz	s1,80000fca <hshandler+0x17a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fb2:	000a5783          	lhu	a5,0(s4)
    80000fb6:	468d                	li	a3,3
    else return epc + 2;
    80000fb8:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fbc:	8ff5                	and	a5,a5,a3
    80000fbe:	00d79463          	bne	a5,a3,80000fc6 <hshandler+0x176>
    80000fc2:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000fc6:	14171073          	csrw	sepc,a4
}
    80000fca:	60a6                	ld	ra,72(sp)
    80000fcc:	6406                	ld	s0,64(sp)
    80000fce:	1502                	slli	a0,a0,0x20
    80000fd0:	74e2                	ld	s1,56(sp)
    80000fd2:	7942                	ld	s2,48(sp)
    80000fd4:	79a2                	ld	s3,40(sp)
    80000fd6:	7a02                	ld	s4,32(sp)
    80000fd8:	6ae2                	ld	s5,24(sp)
    80000fda:	6b42                	ld	s6,16(sp)
    80000fdc:	6ba2                	ld	s7,8(sp)
    80000fde:	9101                	srli	a0,a0,0x20
    80000fe0:	6161                	addi	sp,sp,80
    80000fe2:	8082                	ret
        ERROR("untested exception!");
    80000fe4:	00022517          	auipc	a0,0x22
    80000fe8:	de450513          	addi	a0,a0,-540 # 80022dc8 <__func__.2+0x560>
    80000fec:	4851f0ef          	jal	80020c70 <printf>
    80000ff0:	11000613          	li	a2,272
    80000ff4:	bdd9                	j	80000eca <hshandler+0x7a>
        goto_priv(ecall_args[1]); 
    80000ff6:	4408                	lw	a0,8(s0)
    80000ff8:	ae1ff0ef          	jal	80000ad8 <goto_priv>
    if(cause & (1ULL << 63)){
    80000ffc:	b731                	j	80000f08 <hshandler+0xb8>
            ERROR("instruction fault without return address");
    80000ffe:	00022517          	auipc	a0,0x22
    80001002:	df250513          	addi	a0,a0,-526 # 80022df0 <__func__.2+0x588>
    80001006:	46b1f0ef          	jal	80020c70 <printf>
    8000100a:	12800613          	li	a2,296
    8000100e:	bd75                	j	80000eca <hshandler+0x7a>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001010:	30002773          	csrr	a4,mstatus
    80001014:	fc0007b7          	lui	a5,0xfc000
    80001018:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    8000101a:	0002b697          	auipc	a3,0x2b
    8000101e:	4b26a683          	lw	a3,1202(a3) # 8002c4cc <curr_priv>
    80001022:	07b6                	slli	a5,a5,0xd
    80001024:	77f78793          	addi	a5,a5,1919
    80001028:	8ff9                	and	a5,a5,a4
    8000102a:	06a68263          	beq	a3,a0,8000108e <hshandler+0x23e>
    8000102e:	ffe6871b          	addiw	a4,a3,-2
    80001032:	4605                	li	a2,1
    80001034:	06e66263          	bltu	a2,a4,80001098 <hshandler+0x248>
    80001038:	6705                	lui	a4,0x1
    8000103a:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    8000103e:	4609                	li	a2,2
    80001040:	8fd9                	or	a5,a5,a4
    80001042:	00c69563          	bne	a3,a2,8000104c <hshandler+0x1fc>
    80001046:	4705                	li	a4,1
    80001048:	171e                	slli	a4,a4,0x27
    8000104a:	8fd9                	or	a5,a5,a4
    8000104c:	30079073          	csrw	mstatus,a5
    80001050:	f604cde3          	bltz	s1,80000fca <hshandler+0x17a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001054:	000a5783          	lhu	a5,0(s4)
    80001058:	468d                	li	a3,3
    else return epc + 2;
    8000105a:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000105e:	8ff5                	and	a5,a5,a3
    80001060:	00d79463          	bne	a5,a3,80001068 <hshandler+0x218>
    80001064:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001068:	34171073          	csrw	mepc,a4
    8000106c:	bfb9                	j	80000fca <hshandler+0x17a>
    8000106e:	600026f3          	csrr	a3,hstatus
    80001072:	0002b797          	auipc	a5,0x2b
    80001076:	45a7a783          	lw	a5,1114(a5) # 8002c4cc <curr_priv>
    8000107a:	0806e713          	ori	a4,a3,128
    8000107e:	9bf5                	andi	a5,a5,-3
    80001080:	e781                	bnez	a5,80001088 <hshandler+0x238>
    80001082:	60071073          	csrw	hstatus,a4
    80001086:	b721                	j	80000f8e <hshandler+0x13e>
    80001088:	f7f6f713          	andi	a4,a3,-129
    8000108c:	bfdd                	j	80001082 <hshandler+0x232>
    8000108e:	6709                	lui	a4,0x2
    80001090:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001094:	8fd9                	or	a5,a5,a4
    80001096:	bf5d                	j	8000104c <hshandler+0x1fc>
    80001098:	d6dd                	beqz	a3,80001046 <hshandler+0x1f6>
    8000109a:	bf4d                	j	8000104c <hshandler+0x1fc>

000000008000109c <vshandler>:

uint64_t vshandler(){
    8000109c:	7139                	addi	sp,sp,-64
    8000109e:	f04a                	sd	s2,32(sp)
    800010a0:	fc06                	sd	ra,56(sp)
    800010a2:	f822                	sd	s0,48(sp)
    800010a4:	f426                	sd	s1,40(sp)
    800010a6:	ec4e                	sd	s3,24(sp)
    800010a8:	e852                	sd	s4,16(sp)
    800010aa:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    800010ac:	0002b917          	auipc	s2,0x2b
    800010b0:	41c90913          	addi	s2,s2,1052 # 8002c4c8 <real_priv>
    800010b4:	4709                	li	a4,2
    800010b6:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    800010ba:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    800010be:	141029f3          	csrr	s3,sepc
    800010c2:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    800010c4:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800010c8:	478d                	li	a5,3
    800010ca:	ff840693          	addi	a3,s0,-8
    800010ce:	04d7e663          	bltu	a5,a3,8000111a <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    800010d2:	00044a97          	auipc	s5,0x44
    800010d6:	f2ea8a93          	addi	s5,s5,-210 # 80045000 <ecall_args>
    800010da:	000ab703          	ld	a4,0(s5)
    800010de:	4785                	li	a5,1
    800010e0:	1af70963          	beq	a4,a5,80001292 <vshandler+0x1f6>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800010e4:	00044797          	auipc	a5,0x44
    800010e8:	f2c7c783          	lbu	a5,-212(a5) # 80045010 <excpt>
    800010ec:	1a079763          	bnez	a5,8000129a <vshandler+0x1fe>
        ERROR("untested exception!");
    800010f0:	00022517          	auipc	a0,0x22
    800010f4:	cd850513          	addi	a0,a0,-808 # 80022dc8 <__func__.2+0x560>
    800010f8:	3791f0ef          	jal	80020c70 <printf>
    800010fc:	14100613          	li	a2,321
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    80001100:	00020597          	auipc	a1,0x20
    80001104:	04058593          	addi	a1,a1,64 # 80021140 <__func__.1>
    80001108:	00022517          	auipc	a0,0x22
    8000110c:	bd050513          	addi	a0,a0,-1072 # 80022cd8 <__func__.2+0x470>
    80001110:	3611f0ef          	jal	80020c70 <printf>
    80001114:	4501                	li	a0,0
    80001116:	26b1f0ef          	jal	80020b80 <exit>
    } else if(!excpt.testing){
    8000111a:	00044697          	auipc	a3,0x44
    8000111e:	ef66c683          	lbu	a3,-266(a3) # 80045010 <excpt>
    80001122:	00044797          	auipc	a5,0x44
    80001126:	ede78793          	addi	a5,a5,-290 # 80045000 <ecall_args>
    8000112a:	d2f9                	beqz	a3,800010f0 <vshandler+0x54>
    if(cause & (1ULL << 63)){
    8000112c:	0a045e63          	bgez	s0,800011e8 <vshandler+0x14c>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001130:	4685                	li	a3,1
    80001132:	008696b3          	sll	a3,a3,s0
    80001136:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    8000113a:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    8000113e:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001140:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001142:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001146:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    8000114a:	00d79823          	sh	a3,16(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    8000114e:	0002b797          	auipc	a5,0x2b
    80001152:	37e7a783          	lw	a5,894(a5) # 8002c4cc <curr_priv>
    unsigned temp_priv = real_priv;
    80001156:	0002b517          	auipc	a0,0x2b
    8000115a:	37252503          	lw	a0,882(a0) # 8002c4c8 <real_priv>
    excpt.fault_inst = 0;
    8000115e:	00044717          	auipc	a4,0x44
    80001162:	ee073523          	sd	zero,-278(a4) # 80045048 <excpt+0x38>
    real_priv = curr_priv;
    80001166:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000116a:	478d                	li	a5,3
    8000116c:	02f50363          	beq	a0,a5,80001192 <vshandler+0xf6>
    80001170:	4791                	li	a5,4
    80001172:	0cf50163          	beq	a0,a5,80001234 <vshandler+0x198>
    80001176:	4789                	li	a5,2
    80001178:	02f50b63          	beq	a0,a5,800011ae <vshandler+0x112>
}
    8000117c:	70e2                	ld	ra,56(sp)
    8000117e:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001180:	1502                	slli	a0,a0,0x20
}
    80001182:	74a2                	ld	s1,40(sp)
    80001184:	7902                	ld	s2,32(sp)
    80001186:	69e2                	ld	s3,24(sp)
    80001188:	6a42                	ld	s4,16(sp)
    8000118a:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000118c:	9101                	srli	a0,a0,0x20
}
    8000118e:	6121                	addi	sp,sp,64
    80001190:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001192:	600026f3          	csrr	a3,hstatus
    80001196:	0002b797          	auipc	a5,0x2b
    8000119a:	3367a783          	lw	a5,822(a5) # 8002c4cc <curr_priv>
    8000119e:	0806e713          	ori	a4,a3,128
    800011a2:	9bf5                	andi	a5,a5,-3
    800011a4:	c399                	beqz	a5,800011aa <vshandler+0x10e>
    800011a6:	f7f6f713          	andi	a4,a3,-129
    800011aa:	60071073          	csrw	hstatus,a4
    800011ae:	100027f3          	csrr	a5,sstatus
    800011b2:	0002b717          	auipc	a4,0x2b
    800011b6:	31a72703          	lw	a4,794(a4) # 8002c4cc <curr_priv>
    800011ba:	4685                	li	a3,1
    800011bc:	edf7f793          	andi	a5,a5,-289
    800011c0:	3779                	addiw	a4,a4,-2
    800011c2:	06e6f263          	bgeu	a3,a4,80001226 <vshandler+0x18a>
    800011c6:	10079073          	csrw	sstatus,a5
    800011ca:	fa0449e3          	bltz	s0,8000117c <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011ce:	0004d783          	lhu	a5,0(s1)
    800011d2:	468d                	li	a3,3
    else return epc + 2;
    800011d4:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011d8:	8ff5                	and	a5,a5,a3
    800011da:	00d79463          	bne	a5,a3,800011e2 <vshandler+0x146>
    800011de:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011e2:	14171073          	csrw	sepc,a4
    800011e6:	bf59                	j	8000117c <vshandler+0xe0>
    excpt.testing = false;
    800011e8:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    800011ec:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800011ee:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800011f0:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800011f4:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    800011f8:	00d79823          	sh	a3,16(a5)
    if(is_inst_fault(cause)){
    800011fc:	4751                	li	a4,20
    800011fe:	f48768e3          	bltu	a4,s0,8000114e <vshandler+0xb2>
    80001202:	00101737          	lui	a4,0x101
    80001206:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001208:	00875733          	srl	a4,a4,s0
    8000120c:	8b05                	andi	a4,a4,1
    8000120e:	d321                	beqz	a4,8000114e <vshandler+0xb2>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001210:	67a4                	ld	s1,72(a5)
    80001212:	fc95                	bnez	s1,8000114e <vshandler+0xb2>
        else ERROR("instruction fault without return address");
    80001214:	00022517          	auipc	a0,0x22
    80001218:	bdc50513          	addi	a0,a0,-1060 # 80022df0 <__func__.2+0x588>
    8000121c:	2551f0ef          	jal	80020c70 <printf>
    80001220:	15000613          	li	a2,336
    80001224:	bdf1                	j	80001100 <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001226:	1007e793          	ori	a5,a5,256
    8000122a:	10079073          	csrw	sstatus,a5
    8000122e:	fa0450e3          	bgez	s0,800011ce <vshandler+0x132>
    80001232:	b7a9                	j	8000117c <vshandler+0xe0>
    80001234:	30002773          	csrr	a4,mstatus
    80001238:	fc0007b7          	lui	a5,0xfc000
    8000123c:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    8000123e:	0002b697          	auipc	a3,0x2b
    80001242:	28e6a683          	lw	a3,654(a3) # 8002c4cc <curr_priv>
    80001246:	07b6                	slli	a5,a5,0xd
    80001248:	77f78793          	addi	a5,a5,1919
    8000124c:	8ff9                	and	a5,a5,a4
    8000124e:	06a68463          	beq	a3,a0,800012b6 <vshandler+0x21a>
    80001252:	ffe6871b          	addiw	a4,a3,-2
    80001256:	4605                	li	a2,1
    80001258:	06e66463          	bltu	a2,a4,800012c0 <vshandler+0x224>
    8000125c:	6705                	lui	a4,0x1
    8000125e:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001262:	4609                	li	a2,2
    80001264:	8fd9                	or	a5,a5,a4
    80001266:	00c69563          	bne	a3,a2,80001270 <vshandler+0x1d4>
    8000126a:	4705                	li	a4,1
    8000126c:	171e                	slli	a4,a4,0x27
    8000126e:	8fd9                	or	a5,a5,a4
    80001270:	30079073          	csrw	mstatus,a5
    80001274:	f00444e3          	bltz	s0,8000117c <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001278:	0004d783          	lhu	a5,0(s1)
    8000127c:	468d                	li	a3,3
    else return epc + 2;
    8000127e:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001282:	8ff5                	and	a5,a5,a3
    80001284:	00d79463          	bne	a5,a3,8000128c <vshandler+0x1f0>
    80001288:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000128c:	34171073          	csrw	mepc,a4
    80001290:	b5f5                	j	8000117c <vshandler+0xe0>
        goto_priv(ecall_args[1]); 
    80001292:	008aa503          	lw	a0,8(s5)
    80001296:	843ff0ef          	jal	80000ad8 <goto_priv>
    excpt.priv = PRIV_VS;
    8000129a:	4709                	li	a4,2
    excpt.testing = false;
    8000129c:	10000793          	li	a5,256
    excpt.cause = cause;
    800012a0:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    800012a4:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    800012a8:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    800012ac:	00eaaa23          	sw	a4,20(s5)
    excpt.testing = false;
    800012b0:	00fa9823          	sh	a5,16(s5)
    if(is_inst_fault(cause)){
    800012b4:	bd69                	j	8000114e <vshandler+0xb2>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012b6:	6709                	lui	a4,0x2
    800012b8:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800012bc:	8fd9                	or	a5,a5,a4
    800012be:	bf4d                	j	80001270 <vshandler+0x1d4>
    800012c0:	d6cd                	beqz	a3,8000126a <vshandler+0x1ce>
    800012c2:	b77d                	j	80001270 <vshandler+0x1d4>

00000000800012c4 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    800012c4:	1141                	addi	sp,sp,-16
    800012c6:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    800012c8:	00357713          	andi	a4,a0,3
    800012cc:	478d                	li	a5,3
    800012ce:	04f70763          	beq	a4,a5,8000131c <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800012d2:	77f9                	lui	a5,0xffffe
    800012d4:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    800012d6:	8fe9                	and	a5,a5,a0
    800012d8:	6711                	lui	a4,0x4
    800012da:	85aa                	mv	a1,a0
    800012dc:	08e78963          	beq	a5,a4,8000136e <expand_compressed_instruction+0xaa>
    800012e0:	6719                	lui	a4,0x6
    800012e2:	04e78663          	beq	a5,a4,8000132e <expand_compressed_instruction+0x6a>
    800012e6:	6731                	lui	a4,0xc
    800012e8:	0ae78b63          	beq	a5,a4,8000139e <expand_compressed_instruction+0xda>
    800012ec:	6739                	lui	a4,0xe
    800012ee:	0ae78363          	beq	a5,a4,80001394 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    800012f2:	00022517          	auipc	a0,0x22
    800012f6:	ba650513          	addi	a0,a0,-1114 # 80022e98 <__func__.2+0x630>
    800012fa:	1771f0ef          	jal	80020c70 <printf>
    800012fe:	16f00613          	li	a2,367
    80001302:	00020597          	auipc	a1,0x20
    80001306:	e4e58593          	addi	a1,a1,-434 # 80021150 <__func__.0>
    8000130a:	00022517          	auipc	a0,0x22
    8000130e:	9ce50513          	addi	a0,a0,-1586 # 80022cd8 <__func__.2+0x470>
    80001312:	15f1f0ef          	jal	80020c70 <printf>
    80001316:	4501                	li	a0,0
    80001318:	0691f0ef          	jal	80020b80 <exit>
        ERROR("trying to expand non-compressed instruction");
    8000131c:	00022517          	auipc	a0,0x22
    80001320:	b3c50513          	addi	a0,a0,-1220 # 80022e58 <__func__.2+0x5f0>
    80001324:	14d1f0ef          	jal	80020c70 <printf>
    80001328:	15c00613          	li	a2,348
    8000132c:	bfd9                	j	80001302 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    8000132e:	668d                	lui	a3,0x3
    80001330:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    80001332:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001334:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001338:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000133c:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000133e:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001340:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001342:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    80001344:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001348:	0606                	slli	a2,a2,0x1
    8000134a:	0196161b          	slliw	a2,a2,0x19
    8000134e:	0e0005b7          	lui	a1,0xe000
    80001352:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001354:	45d1                	li	a1,20
    80001356:	c111                	beqz	a0,8000135a <expand_compressed_instruction+0x96>
    80001358:	459d                	li	a1,7
    }

}
    8000135a:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000135c:	8ed1                	or	a3,a3,a2
    8000135e:	00f7171b          	slliw	a4,a4,0xf
    80001362:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001364:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001368:	8d59                	or	a0,a0,a4
}
    8000136a:	0141                	addi	sp,sp,16
    8000136c:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    8000136e:	6689                	lui	a3,0x2
    80001370:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    80001372:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001374:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001378:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000137c:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001380:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001382:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001384:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001388:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000138a:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000138c:	4601                	li	a2,0
    8000138e:	fc0803e3          	beqz	a6,80001354 <expand_compressed_instruction+0x90>
    80001392:	bf4d                	j	80001344 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001394:	668d                	lui	a3,0x3
    80001396:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    8000139a:	4501                	li	a0,0
    8000139c:	bf61                	j	80001334 <expand_compressed_instruction+0x70>
    8000139e:	6689                	lui	a3,0x2
    800013a0:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    800013a4:	4501                	li	a0,0
    800013a6:	b7f9                	j	80001374 <expand_compressed_instruction+0xb0>

00000000800013a8 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    800013a8:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    800013aa:	4511                	li	a0,4
void reset_state(){
    800013ac:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    800013ae:	f2aff0ef          	jal	80000ad8 <goto_priv>
    CSRW(mstatus, 0ULL);
    800013b2:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    800013b6:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    800013ba:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    800013be:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    800013c2:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    800013c6:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    800013ca:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    800013ce:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800013d2:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    800013d6:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    800013da:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    800013de:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    800013e2:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    800013e6:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    800013ea:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    800013ee:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    800013f2:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    800013f6:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    800013fa:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    800013fe:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    80001402:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001406:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    8000140a:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    8000140e:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    80001412:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001416:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    8000141a:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    8000141e:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    80001422:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    80001426:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    8000142a:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    8000142e:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    80001432:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    80001436:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    8000143a:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    8000143e:	00020797          	auipc	a5,0x20
    80001442:	a8278793          	addi	a5,a5,-1406 # 80020ec0 <mhandler_entry>
    80001446:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    8000144a:	50000793          	li	a5,1280
    8000144e:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    80001452:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    80001456:	57fd                	li	a5,-1
    80001458:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    8000145c:	00020797          	auipc	a5,0x20
    80001460:	aac78793          	addi	a5,a5,-1364 # 80020f08 <hshandler_entry>
    80001464:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    80001468:	10000793          	li	a5,256
    8000146c:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    80001470:	00020797          	auipc	a5,0x20
    80001474:	ae078793          	addi	a5,a5,-1312 # 80020f50 <vshandler_entry>
    80001478:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    8000147c:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001480:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001484:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    80001488:	60a2                	ld	ra,8(sp)
    8000148a:	0141                	addi	sp,sp,16
    8000148c:	8082                	ret

000000008000148e <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    8000148e:	7179                	addi	sp,sp,-48

    TEST_START();
    80001490:	00020597          	auipc	a1,0x20
    80001494:	ce058593          	addi	a1,a1,-800 # 80021170 <__func__.3>
    80001498:	00021517          	auipc	a0,0x21
    8000149c:	6b850513          	addi	a0,a0,1720 # 80022b50 <__func__.2+0x2e8>
bool check_xip_regs_1(){
    800014a0:	f406                	sd	ra,40(sp)
    800014a2:	f022                	sd	s0,32(sp)
    800014a4:	ec26                	sd	s1,24(sp)
    800014a6:	e84a                	sd	s2,16(sp)
    800014a8:	e44e                	sd	s3,8(sp)
    800014aa:	e052                	sd	s4,0(sp)
    TEST_START();
    800014ac:	7c41f0ef          	jal	80020c70 <printf>
    800014b0:	4529                	li	a0,10
    800014b2:	64f1e0ef          	jal	80020300 <putchar>

    CSRW(mideleg, 0);
    800014b6:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    800014ba:	547d                	li	s0,-1
    800014bc:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    800014c0:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    800014c4:	244029f3          	csrr	s3,vsip
    800014c8:	24441073          	csrw	vsip,s0
    800014cc:	244024f3          	csrr	s1,vsip
    800014d0:	00022617          	auipc	a2,0x22
    800014d4:	a2060613          	addi	a2,a2,-1504 # 80022ef0 <__func__.2+0x688>
    800014d8:	08200593          	li	a1,130
    800014dc:	00021517          	auipc	a0,0x21
    800014e0:	68c50513          	addi	a0,a0,1676 # 80022b68 <__func__.2+0x300>
    800014e4:	4909                	li	s2,2
    800014e6:	78a1f0ef          	jal	80020c70 <printf>
    800014ea:	11248f63          	beq	s1,s2,80001608 <check_xip_regs_1+0x17a>
    800014ee:	00021597          	auipc	a1,0x21
    800014f2:	65258593          	addi	a1,a1,1618 # 80022b40 <__func__.2+0x2d8>
    800014f6:	00021517          	auipc	a0,0x21
    800014fa:	68a50513          	addi	a0,a0,1674 # 80022b80 <__func__.2+0x318>
    800014fe:	7721f0ef          	jal	80020c70 <printf>
    80001502:	00021517          	auipc	a0,0x21
    80001506:	68650513          	addi	a0,a0,1670 # 80022b88 <__func__.2+0x320>
    8000150a:	7661f0ef          	jal	80020c70 <printf>
    8000150e:	86ca                	mv	a3,s2
    80001510:	8626                	mv	a2,s1
    80001512:	85a2                	mv	a1,s0
    80001514:	00021517          	auipc	a0,0x21
    80001518:	67c50513          	addi	a0,a0,1660 # 80022b90 <__func__.2+0x328>
    8000151c:	7541f0ef          	jal	80020c70 <printf>
    80001520:	02900513          	li	a0,41
    80001524:	5dd1e0ef          	jal	80020300 <putchar>
    80001528:	4529                	li	a0,10
    8000152a:	5d71e0ef          	jal	80020300 <putchar>
    8000152e:	4a01                	li	s4,0
    80001530:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001534:	204029f3          	csrr	s3,vsie
    80001538:	54fd                	li	s1,-1
    8000153a:	20449073          	csrw	vsie,s1
    8000153e:	20402973          	csrr	s2,vsie
    80001542:	6409                	lui	s0,0x2
    80001544:	00022617          	auipc	a2,0x22
    80001548:	9b460613          	addi	a2,a2,-1612 # 80022ef8 <__func__.2+0x690>
    8000154c:	08200593          	li	a1,130
    80001550:	00021517          	auipc	a0,0x21
    80001554:	61850513          	addi	a0,a0,1560 # 80022b68 <__func__.2+0x300>
    80001558:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    8000155c:	7141f0ef          	jal	80020c70 <printf>
    80001560:	06890d63          	beq	s2,s0,800015da <check_xip_regs_1+0x14c>
    80001564:	00021597          	auipc	a1,0x21
    80001568:	5dc58593          	addi	a1,a1,1500 # 80022b40 <__func__.2+0x2d8>
    8000156c:	00021517          	auipc	a0,0x21
    80001570:	61450513          	addi	a0,a0,1556 # 80022b80 <__func__.2+0x318>
    80001574:	6fc1f0ef          	jal	80020c70 <printf>
    80001578:	00021517          	auipc	a0,0x21
    8000157c:	61050513          	addi	a0,a0,1552 # 80022b88 <__func__.2+0x320>
    80001580:	6f01f0ef          	jal	80020c70 <printf>
    80001584:	86a2                	mv	a3,s0
    80001586:	864a                	mv	a2,s2
    80001588:	85a6                	mv	a1,s1
    8000158a:	00021517          	auipc	a0,0x21
    8000158e:	60650513          	addi	a0,a0,1542 # 80022b90 <__func__.2+0x328>
    80001592:	6de1f0ef          	jal	80020c70 <printf>
    80001596:	02900513          	li	a0,41
    8000159a:	5671e0ef          	jal	80020300 <putchar>
    8000159e:	4529                	li	a0,10
    800015a0:	5611e0ef          	jal	80020300 <putchar>
    800015a4:	20499073          	csrw	vsie,s3
    800015a8:	4401                	li	s0,0
    
    TEST_END();
    800015aa:	00021597          	auipc	a1,0x21
    800015ae:	59658593          	addi	a1,a1,1430 # 80022b40 <__func__.2+0x2d8>
    800015b2:	00021517          	auipc	a0,0x21
    800015b6:	63650513          	addi	a0,a0,1590 # 80022be8 <__func__.2+0x380>
    800015ba:	6b61f0ef          	jal	80020c70 <printf>
    800015be:	4511                	li	a0,4
    800015c0:	d18ff0ef          	jal	80000ad8 <goto_priv>
    800015c4:	de5ff0ef          	jal	800013a8 <reset_state>
}
    800015c8:	70a2                	ld	ra,40(sp)
    800015ca:	8522                	mv	a0,s0
    800015cc:	7402                	ld	s0,32(sp)
    800015ce:	64e2                	ld	s1,24(sp)
    800015d0:	6942                	ld	s2,16(sp)
    800015d2:	69a2                	ld	s3,8(sp)
    800015d4:	6a02                	ld	s4,0(sp)
    800015d6:	6145                	addi	sp,sp,48
    800015d8:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800015da:	00021597          	auipc	a1,0x21
    800015de:	55658593          	addi	a1,a1,1366 # 80022b30 <__func__.2+0x2c8>
    800015e2:	00021517          	auipc	a0,0x21
    800015e6:	59e50513          	addi	a0,a0,1438 # 80022b80 <__func__.2+0x318>
    800015ea:	6861f0ef          	jal	80020c70 <printf>
    800015ee:	4529                	li	a0,10
    800015f0:	5111e0ef          	jal	80020300 <putchar>
    800015f4:	fa0a08e3          	beqz	s4,800015a4 <check_xip_regs_1+0x116>
    800015f8:	20499073          	csrw	vsie,s3
    800015fc:	4405                	li	s0,1
    TEST_END();
    800015fe:	00021597          	auipc	a1,0x21
    80001602:	53258593          	addi	a1,a1,1330 # 80022b30 <__func__.2+0x2c8>
    80001606:	b775                	j	800015b2 <check_xip_regs_1+0x124>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001608:	00021597          	auipc	a1,0x21
    8000160c:	52858593          	addi	a1,a1,1320 # 80022b30 <__func__.2+0x2c8>
    80001610:	00021517          	auipc	a0,0x21
    80001614:	57050513          	addi	a0,a0,1392 # 80022b80 <__func__.2+0x318>
    80001618:	6581f0ef          	jal	80020c70 <printf>
    8000161c:	4529                	li	a0,10
    8000161e:	4e31e0ef          	jal	80020300 <putchar>
    80001622:	4a05                	li	s4,1
    80001624:	b731                	j	80001530 <check_xip_regs_1+0xa2>

0000000080001626 <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001626:	1101                	addi	sp,sp,-32

    TEST_START();
    80001628:	00020597          	auipc	a1,0x20
    8000162c:	b6058593          	addi	a1,a1,-1184 # 80021188 <__func__.2>
    80001630:	00021517          	auipc	a0,0x21
    80001634:	52050513          	addi	a0,a0,1312 # 80022b50 <__func__.2+0x2e8>
bool check_xip_regs_2(){
    80001638:	ec06                	sd	ra,24(sp)
    8000163a:	e822                	sd	s0,16(sp)
    8000163c:	e426                	sd	s1,8(sp)
    8000163e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001640:	6301f0ef          	jal	80020c70 <printf>
    80001644:	4529                	li	a0,10
    80001646:	4bb1e0ef          	jal	80020300 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    8000164a:	57fd                	li	a5,-1
    8000164c:	03f79713          	slli	a4,a5,0x3f
    80001650:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001654:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001658:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    8000165c:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001660:	64402473          	csrr	s0,hip
    80001664:	00022617          	auipc	a2,0x22
    80001668:	89c60613          	addi	a2,a2,-1892 # 80022f00 <__func__.2+0x698>
    8000166c:	08200593          	li	a1,130
    80001670:	00021517          	auipc	a0,0x21
    80001674:	4f850513          	addi	a0,a0,1272 # 80022b68 <__func__.2+0x300>
    80001678:	4491                	li	s1,4
    8000167a:	5f61f0ef          	jal	80020c70 <printf>
    8000167e:	46940463          	beq	s0,s1,80001ae6 <check_xip_regs_2+0x4c0>
    80001682:	00021597          	auipc	a1,0x21
    80001686:	4be58593          	addi	a1,a1,1214 # 80022b40 <__func__.2+0x2d8>
    8000168a:	00021517          	auipc	a0,0x21
    8000168e:	4f650513          	addi	a0,a0,1270 # 80022b80 <__func__.2+0x318>
    80001692:	5de1f0ef          	jal	80020c70 <printf>
    80001696:	00021517          	auipc	a0,0x21
    8000169a:	4f250513          	addi	a0,a0,1266 # 80022b88 <__func__.2+0x320>
    8000169e:	5d21f0ef          	jal	80020c70 <printf>
    800016a2:	8622                	mv	a2,s0
    800016a4:	86a6                	mv	a3,s1
    800016a6:	02d00593          	li	a1,45
    800016aa:	00022517          	auipc	a0,0x22
    800016ae:	85e50513          	addi	a0,a0,-1954 # 80022f08 <__func__.2+0x6a0>
    800016b2:	5be1f0ef          	jal	80020c70 <printf>
    800016b6:	02900513          	li	a0,41
    800016ba:	4471e0ef          	jal	80020300 <putchar>
    800016be:	4529                	li	a0,10
    800016c0:	4411e0ef          	jal	80020300 <putchar>
    800016c4:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    800016c6:	144024f3          	csrr	s1,sip
    800016ca:	00022617          	auipc	a2,0x22
    800016ce:	85660613          	addi	a2,a2,-1962 # 80022f20 <__func__.2+0x6b8>
    800016d2:	08200593          	li	a1,130
    800016d6:	00021517          	auipc	a0,0x21
    800016da:	49250513          	addi	a0,a0,1170 # 80022b68 <__func__.2+0x300>
    800016de:	22200913          	li	s2,546
    800016e2:	58e1f0ef          	jal	80020c70 <printf>
    800016e6:	3b248663          	beq	s1,s2,80001a92 <check_xip_regs_2+0x46c>
    800016ea:	00021597          	auipc	a1,0x21
    800016ee:	45658593          	addi	a1,a1,1110 # 80022b40 <__func__.2+0x2d8>
    800016f2:	00021517          	auipc	a0,0x21
    800016f6:	48e50513          	addi	a0,a0,1166 # 80022b80 <__func__.2+0x318>
    800016fa:	5761f0ef          	jal	80020c70 <printf>
    800016fe:	00021517          	auipc	a0,0x21
    80001702:	48a50513          	addi	a0,a0,1162 # 80022b88 <__func__.2+0x320>
    80001706:	56a1f0ef          	jal	80020c70 <printf>
    8000170a:	86ca                	mv	a3,s2
    8000170c:	8626                	mv	a2,s1
    8000170e:	02d00593          	li	a1,45
    80001712:	00021517          	auipc	a0,0x21
    80001716:	7f650513          	addi	a0,a0,2038 # 80022f08 <__func__.2+0x6a0>
    8000171a:	5561f0ef          	jal	80020c70 <printf>
    8000171e:	02900513          	li	a0,41
    80001722:	3df1e0ef          	jal	80020300 <putchar>
    80001726:	4529                	li	a0,10
    80001728:	3d91e0ef          	jal	80020300 <putchar>
    8000172c:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    8000172e:	244024f3          	csrr	s1,vsip
    80001732:	00021617          	auipc	a2,0x21
    80001736:	7be60613          	addi	a2,a2,1982 # 80022ef0 <__func__.2+0x688>
    8000173a:	08200593          	li	a1,130
    8000173e:	00021517          	auipc	a0,0x21
    80001742:	42a50513          	addi	a0,a0,1066 # 80022b68 <__func__.2+0x300>
    80001746:	4909                	li	s2,2
    80001748:	5281f0ef          	jal	80020c70 <printf>
    8000174c:	37248f63          	beq	s1,s2,80001aca <check_xip_regs_2+0x4a4>
    80001750:	00021597          	auipc	a1,0x21
    80001754:	3f058593          	addi	a1,a1,1008 # 80022b40 <__func__.2+0x2d8>
    80001758:	00021517          	auipc	a0,0x21
    8000175c:	42850513          	addi	a0,a0,1064 # 80022b80 <__func__.2+0x318>
    80001760:	5101f0ef          	jal	80020c70 <printf>
    80001764:	00021517          	auipc	a0,0x21
    80001768:	42450513          	addi	a0,a0,1060 # 80022b88 <__func__.2+0x320>
    8000176c:	5041f0ef          	jal	80020c70 <printf>
    80001770:	86ca                	mv	a3,s2
    80001772:	8626                	mv	a2,s1
    80001774:	02d00593          	li	a1,45
    80001778:	00021517          	auipc	a0,0x21
    8000177c:	79050513          	addi	a0,a0,1936 # 80022f08 <__func__.2+0x6a0>
    80001780:	4f01f0ef          	jal	80020c70 <printf>
    80001784:	02900513          	li	a0,41
    80001788:	3791e0ef          	jal	80020300 <putchar>
    8000178c:	4529                	li	a0,10
    8000178e:	3731e0ef          	jal	80020300 <putchar>
    80001792:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001794:	4509                	li	a0,2
    80001796:	b42ff0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8000179a:	144024f3          	csrr	s1,sip
    8000179e:	00021617          	auipc	a2,0x21
    800017a2:	78a60613          	addi	a2,a2,1930 # 80022f28 <__func__.2+0x6c0>
    800017a6:	08200593          	li	a1,130
    800017aa:	00021517          	auipc	a0,0x21
    800017ae:	3be50513          	addi	a0,a0,958 # 80022b68 <__func__.2+0x300>
    800017b2:	4909                	li	s2,2
    800017b4:	4bc1f0ef          	jal	80020c70 <printf>
    800017b8:	2f248b63          	beq	s1,s2,80001aae <check_xip_regs_2+0x488>
    800017bc:	00021597          	auipc	a1,0x21
    800017c0:	38458593          	addi	a1,a1,900 # 80022b40 <__func__.2+0x2d8>
    800017c4:	00021517          	auipc	a0,0x21
    800017c8:	3bc50513          	addi	a0,a0,956 # 80022b80 <__func__.2+0x318>
    800017cc:	4a41f0ef          	jal	80020c70 <printf>
    800017d0:	00021517          	auipc	a0,0x21
    800017d4:	3b850513          	addi	a0,a0,952 # 80022b88 <__func__.2+0x320>
    800017d8:	4981f0ef          	jal	80020c70 <printf>
    800017dc:	86ca                	mv	a3,s2
    800017de:	8626                	mv	a2,s1
    800017e0:	02d00593          	li	a1,45
    800017e4:	00021517          	auipc	a0,0x21
    800017e8:	72450513          	addi	a0,a0,1828 # 80022f08 <__func__.2+0x6a0>
    800017ec:	4841f0ef          	jal	80020c70 <printf>
    800017f0:	02900513          	li	a0,41
    800017f4:	30d1e0ef          	jal	80020300 <putchar>
    800017f8:	4529                	li	a0,10
    800017fa:	3071e0ef          	jal	80020300 <putchar>
    800017fe:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001800:	4511                	li	a0,4
    80001802:	ad6ff0ef          	jal	80000ad8 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001806:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    8000180a:	644024f3          	csrr	s1,hip
    8000180e:	00021617          	auipc	a2,0x21
    80001812:	6f260613          	addi	a2,a2,1778 # 80022f00 <__func__.2+0x698>
    80001816:	08200593          	li	a1,130
    8000181a:	00021517          	auipc	a0,0x21
    8000181e:	34e50513          	addi	a0,a0,846 # 80022b68 <__func__.2+0x300>
    80001822:	44e1f0ef          	jal	80020c70 <printf>
    80001826:	1a048663          	beqz	s1,800019d2 <check_xip_regs_2+0x3ac>
    8000182a:	00021597          	auipc	a1,0x21
    8000182e:	31658593          	addi	a1,a1,790 # 80022b40 <__func__.2+0x2d8>
    80001832:	00021517          	auipc	a0,0x21
    80001836:	34e50513          	addi	a0,a0,846 # 80022b80 <__func__.2+0x318>
    8000183a:	4361f0ef          	jal	80020c70 <printf>
    8000183e:	00021517          	auipc	a0,0x21
    80001842:	34a50513          	addi	a0,a0,842 # 80022b88 <__func__.2+0x320>
    80001846:	42a1f0ef          	jal	80020c70 <printf>
    8000184a:	8626                	mv	a2,s1
    8000184c:	4681                	li	a3,0
    8000184e:	02d00593          	li	a1,45
    80001852:	00021517          	auipc	a0,0x21
    80001856:	6b650513          	addi	a0,a0,1718 # 80022f08 <__func__.2+0x6a0>
    8000185a:	4161f0ef          	jal	80020c70 <printf>
    8000185e:	02900513          	li	a0,41
    80001862:	29f1e0ef          	jal	80020300 <putchar>
    80001866:	4529                	li	a0,10
    80001868:	2991e0ef          	jal	80020300 <putchar>
    8000186c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8000186e:	144024f3          	csrr	s1,sip
    80001872:	00021617          	auipc	a2,0x21
    80001876:	6ae60613          	addi	a2,a2,1710 # 80022f20 <__func__.2+0x6b8>
    8000187a:	08200593          	li	a1,130
    8000187e:	00021517          	auipc	a0,0x21
    80001882:	2ea50513          	addi	a0,a0,746 # 80022b68 <__func__.2+0x300>
    80001886:	3ea1f0ef          	jal	80020c70 <printf>
    8000188a:	18048163          	beqz	s1,80001a0c <check_xip_regs_2+0x3e6>
    8000188e:	00021597          	auipc	a1,0x21
    80001892:	2b258593          	addi	a1,a1,690 # 80022b40 <__func__.2+0x2d8>
    80001896:	00021517          	auipc	a0,0x21
    8000189a:	2ea50513          	addi	a0,a0,746 # 80022b80 <__func__.2+0x318>
    8000189e:	3d21f0ef          	jal	80020c70 <printf>
    800018a2:	00021517          	auipc	a0,0x21
    800018a6:	2e650513          	addi	a0,a0,742 # 80022b88 <__func__.2+0x320>
    800018aa:	3c61f0ef          	jal	80020c70 <printf>
    800018ae:	8626                	mv	a2,s1
    800018b0:	4681                	li	a3,0
    800018b2:	02d00593          	li	a1,45
    800018b6:	00021517          	auipc	a0,0x21
    800018ba:	65250513          	addi	a0,a0,1618 # 80022f08 <__func__.2+0x6a0>
    800018be:	3b21f0ef          	jal	80020c70 <printf>
    800018c2:	02900513          	li	a0,41
    800018c6:	23b1e0ef          	jal	80020300 <putchar>
    800018ca:	4529                	li	a0,10
    800018cc:	2351e0ef          	jal	80020300 <putchar>
    800018d0:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800018d2:	244024f3          	csrr	s1,vsip
    800018d6:	00021617          	auipc	a2,0x21
    800018da:	61a60613          	addi	a2,a2,1562 # 80022ef0 <__func__.2+0x688>
    800018de:	08200593          	li	a1,130
    800018e2:	00021517          	auipc	a0,0x21
    800018e6:	28650513          	addi	a0,a0,646 # 80022b68 <__func__.2+0x300>
    800018ea:	3861f0ef          	jal	80020c70 <printf>
    800018ee:	14048c63          	beqz	s1,80001a46 <check_xip_regs_2+0x420>
    800018f2:	00021597          	auipc	a1,0x21
    800018f6:	24e58593          	addi	a1,a1,590 # 80022b40 <__func__.2+0x2d8>
    800018fa:	00021517          	auipc	a0,0x21
    800018fe:	28650513          	addi	a0,a0,646 # 80022b80 <__func__.2+0x318>
    80001902:	36e1f0ef          	jal	80020c70 <printf>
    80001906:	00021517          	auipc	a0,0x21
    8000190a:	28250513          	addi	a0,a0,642 # 80022b88 <__func__.2+0x320>
    8000190e:	3621f0ef          	jal	80020c70 <printf>
    80001912:	8626                	mv	a2,s1
    80001914:	4681                	li	a3,0
    80001916:	02d00593          	li	a1,45
    8000191a:	00021517          	auipc	a0,0x21
    8000191e:	5ee50513          	addi	a0,a0,1518 # 80022f08 <__func__.2+0x6a0>
    80001922:	34e1f0ef          	jal	80020c70 <printf>
    80001926:	02900513          	li	a0,41
    8000192a:	1d71e0ef          	jal	80020300 <putchar>
    8000192e:	4529                	li	a0,10
    80001930:	1d11e0ef          	jal	80020300 <putchar>
    80001934:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001936:	4509                	li	a0,2
    80001938:	9a0ff0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000193c:	144024f3          	csrr	s1,sip
    80001940:	00021617          	auipc	a2,0x21
    80001944:	5e860613          	addi	a2,a2,1512 # 80022f28 <__func__.2+0x6c0>
    80001948:	08200593          	li	a1,130
    8000194c:	00021517          	auipc	a0,0x21
    80001950:	21c50513          	addi	a0,a0,540 # 80022b68 <__func__.2+0x300>
    80001954:	31c1f0ef          	jal	80020c70 <printf>
    80001958:	10048563          	beqz	s1,80001a62 <check_xip_regs_2+0x43c>
    8000195c:	00021597          	auipc	a1,0x21
    80001960:	1e458593          	addi	a1,a1,484 # 80022b40 <__func__.2+0x2d8>
    80001964:	00021517          	auipc	a0,0x21
    80001968:	21c50513          	addi	a0,a0,540 # 80022b80 <__func__.2+0x318>
    8000196c:	3041f0ef          	jal	80020c70 <printf>
    80001970:	00021517          	auipc	a0,0x21
    80001974:	21850513          	addi	a0,a0,536 # 80022b88 <__func__.2+0x320>
    80001978:	2f81f0ef          	jal	80020c70 <printf>
    8000197c:	8626                	mv	a2,s1
    8000197e:	4681                	li	a3,0
    80001980:	02d00593          	li	a1,45
    80001984:	00021517          	auipc	a0,0x21
    80001988:	58450513          	addi	a0,a0,1412 # 80022f08 <__func__.2+0x6a0>
    8000198c:	2e41f0ef          	jal	80020c70 <printf>
    80001990:	02900513          	li	a0,41
    80001994:	16d1e0ef          	jal	80020300 <putchar>
    80001998:	4529                	li	a0,10
    8000199a:	1671e0ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);   
    8000199e:	4511                	li	a0,4
    800019a0:	938ff0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800019a4:	4401                	li	s0,0

    TEST_END();
    800019a6:	00021597          	auipc	a1,0x21
    800019aa:	19a58593          	addi	a1,a1,410 # 80022b40 <__func__.2+0x2d8>
    800019ae:	00021517          	auipc	a0,0x21
    800019b2:	23a50513          	addi	a0,a0,570 # 80022be8 <__func__.2+0x380>
    800019b6:	2ba1f0ef          	jal	80020c70 <printf>
    800019ba:	4511                	li	a0,4
    800019bc:	91cff0ef          	jal	80000ad8 <goto_priv>
    800019c0:	9e9ff0ef          	jal	800013a8 <reset_state>
}
    800019c4:	60e2                	ld	ra,24(sp)
    800019c6:	8522                	mv	a0,s0
    800019c8:	6442                	ld	s0,16(sp)
    800019ca:	64a2                	ld	s1,8(sp)
    800019cc:	6902                	ld	s2,0(sp)
    800019ce:	6105                	addi	sp,sp,32
    800019d0:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    800019d2:	00021597          	auipc	a1,0x21
    800019d6:	15e58593          	addi	a1,a1,350 # 80022b30 <__func__.2+0x2c8>
    800019da:	00021517          	auipc	a0,0x21
    800019de:	1a650513          	addi	a0,a0,422 # 80022b80 <__func__.2+0x318>
    800019e2:	28e1f0ef          	jal	80020c70 <printf>
    800019e6:	4529                	li	a0,10
    800019e8:	1191e0ef          	jal	80020300 <putchar>
    check_csr_rd("sip", sip, 0x0);
    800019ec:	144024f3          	csrr	s1,sip
    800019f0:	00021617          	auipc	a2,0x21
    800019f4:	53060613          	addi	a2,a2,1328 # 80022f20 <__func__.2+0x6b8>
    800019f8:	08200593          	li	a1,130
    800019fc:	00021517          	auipc	a0,0x21
    80001a00:	16c50513          	addi	a0,a0,364 # 80022b68 <__func__.2+0x300>
    80001a04:	26c1f0ef          	jal	80020c70 <printf>
    80001a08:	e80493e3          	bnez	s1,8000188e <check_xip_regs_2+0x268>
    80001a0c:	00021597          	auipc	a1,0x21
    80001a10:	12458593          	addi	a1,a1,292 # 80022b30 <__func__.2+0x2c8>
    80001a14:	00021517          	auipc	a0,0x21
    80001a18:	16c50513          	addi	a0,a0,364 # 80022b80 <__func__.2+0x318>
    80001a1c:	2541f0ef          	jal	80020c70 <printf>
    80001a20:	4529                	li	a0,10
    80001a22:	0df1e0ef          	jal	80020300 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001a26:	244024f3          	csrr	s1,vsip
    80001a2a:	00021617          	auipc	a2,0x21
    80001a2e:	4c660613          	addi	a2,a2,1222 # 80022ef0 <__func__.2+0x688>
    80001a32:	08200593          	li	a1,130
    80001a36:	00021517          	auipc	a0,0x21
    80001a3a:	13250513          	addi	a0,a0,306 # 80022b68 <__func__.2+0x300>
    80001a3e:	2321f0ef          	jal	80020c70 <printf>
    80001a42:	ea0498e3          	bnez	s1,800018f2 <check_xip_regs_2+0x2cc>
    80001a46:	00021597          	auipc	a1,0x21
    80001a4a:	0ea58593          	addi	a1,a1,234 # 80022b30 <__func__.2+0x2c8>
    80001a4e:	00021517          	auipc	a0,0x21
    80001a52:	13250513          	addi	a0,a0,306 # 80022b80 <__func__.2+0x318>
    80001a56:	21a1f0ef          	jal	80020c70 <printf>
    80001a5a:	4529                	li	a0,10
    80001a5c:	0a51e0ef          	jal	80020300 <putchar>
    80001a60:	bdd9                	j	80001936 <check_xip_regs_2+0x310>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001a62:	00021597          	auipc	a1,0x21
    80001a66:	0ce58593          	addi	a1,a1,206 # 80022b30 <__func__.2+0x2c8>
    80001a6a:	00021517          	auipc	a0,0x21
    80001a6e:	11650513          	addi	a0,a0,278 # 80022b80 <__func__.2+0x318>
    80001a72:	1fe1f0ef          	jal	80020c70 <printf>
    80001a76:	4529                	li	a0,10
    80001a78:	0891e0ef          	jal	80020300 <putchar>
    80001a7c:	f20401e3          	beqz	s0,8000199e <check_xip_regs_2+0x378>
    goto_priv(PRIV_M);   
    80001a80:	4511                	li	a0,4
    80001a82:	856ff0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001a86:	4405                	li	s0,1
    TEST_END();
    80001a88:	00021597          	auipc	a1,0x21
    80001a8c:	0a858593          	addi	a1,a1,168 # 80022b30 <__func__.2+0x2c8>
    80001a90:	bf39                	j	800019ae <check_xip_regs_2+0x388>
    check_csr_rd("sip", sip, 0x222);    
    80001a92:	00021597          	auipc	a1,0x21
    80001a96:	09e58593          	addi	a1,a1,158 # 80022b30 <__func__.2+0x2c8>
    80001a9a:	00021517          	auipc	a0,0x21
    80001a9e:	0e650513          	addi	a0,a0,230 # 80022b80 <__func__.2+0x318>
    80001aa2:	1ce1f0ef          	jal	80020c70 <printf>
    80001aa6:	4529                	li	a0,10
    80001aa8:	0591e0ef          	jal	80020300 <putchar>
    80001aac:	b149                	j	8000172e <check_xip_regs_2+0x108>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001aae:	00021597          	auipc	a1,0x21
    80001ab2:	08258593          	addi	a1,a1,130 # 80022b30 <__func__.2+0x2c8>
    80001ab6:	00021517          	auipc	a0,0x21
    80001aba:	0ca50513          	addi	a0,a0,202 # 80022b80 <__func__.2+0x318>
    80001abe:	1b21f0ef          	jal	80020c70 <printf>
    80001ac2:	4529                	li	a0,10
    80001ac4:	03d1e0ef          	jal	80020300 <putchar>
    80001ac8:	bb25                	j	80001800 <check_xip_regs_2+0x1da>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001aca:	00021597          	auipc	a1,0x21
    80001ace:	06658593          	addi	a1,a1,102 # 80022b30 <__func__.2+0x2c8>
    80001ad2:	00021517          	auipc	a0,0x21
    80001ad6:	0ae50513          	addi	a0,a0,174 # 80022b80 <__func__.2+0x318>
    80001ada:	1961f0ef          	jal	80020c70 <printf>
    80001ade:	4529                	li	a0,10
    80001ae0:	0211e0ef          	jal	80020300 <putchar>
    80001ae4:	b945                	j	80001794 <check_xip_regs_2+0x16e>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001ae6:	00021597          	auipc	a1,0x21
    80001aea:	04a58593          	addi	a1,a1,74 # 80022b30 <__func__.2+0x2c8>
    80001aee:	00021517          	auipc	a0,0x21
    80001af2:	09250513          	addi	a0,a0,146 # 80022b80 <__func__.2+0x318>
    80001af6:	17a1f0ef          	jal	80020c70 <printf>
    80001afa:	4529                	li	a0,10
    80001afc:	0051e0ef          	jal	80020300 <putchar>
    80001b00:	4405                	li	s0,1
    80001b02:	b6d1                	j	800016c6 <check_xip_regs_2+0xa0>

0000000080001b04 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001b04:	1101                	addi	sp,sp,-32

    TEST_START();
    80001b06:	0001f597          	auipc	a1,0x1f
    80001b0a:	69a58593          	addi	a1,a1,1690 # 800211a0 <__func__.1>
    80001b0e:	00021517          	auipc	a0,0x21
    80001b12:	04250513          	addi	a0,a0,66 # 80022b50 <__func__.2+0x2e8>
bool check_xip_regs_3(){
    80001b16:	ec06                	sd	ra,24(sp)
    80001b18:	e822                	sd	s0,16(sp)
    80001b1a:	e426                	sd	s1,8(sp)
    80001b1c:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001b1e:	1521f0ef          	jal	80020c70 <printf>
    80001b22:	4529                	li	a0,10
    80001b24:	7dc1e0ef          	jal	80020300 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001b28:	57fd                	li	a5,-1
    80001b2a:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001b2e:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001b32:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    80001b36:	645025f3          	csrr	a1,hvip
    80001b3a:	00021517          	auipc	a0,0x21
    80001b3e:	40650513          	addi	a0,a0,1030 # 80022f40 <__func__.2+0x6d8>
    80001b42:	12e1f0ef          	jal	80020c70 <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001b46:	645024f3          	csrr	s1,hvip
    80001b4a:	7479                	lui	s0,0xffffe
    80001b4c:	00021617          	auipc	a2,0x21
    80001b50:	40460613          	addi	a2,a2,1028 # 80022f50 <__func__.2+0x6e8>
    80001b54:	08200593          	li	a1,130
    80001b58:	00021517          	auipc	a0,0x21
    80001b5c:	01050513          	addi	a0,a0,16 # 80022b68 <__func__.2+0x300>
    80001b60:	44440413          	addi	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    80001b64:	10c1f0ef          	jal	80020c70 <printf>
    80001b68:	4a848663          	beq	s1,s0,80002014 <check_xip_regs_3+0x510>
    80001b6c:	00021597          	auipc	a1,0x21
    80001b70:	fd458593          	addi	a1,a1,-44 # 80022b40 <__func__.2+0x2d8>
    80001b74:	00021517          	auipc	a0,0x21
    80001b78:	00c50513          	addi	a0,a0,12 # 80022b80 <__func__.2+0x318>
    80001b7c:	0f41f0ef          	jal	80020c70 <printf>
    80001b80:	00021517          	auipc	a0,0x21
    80001b84:	00850513          	addi	a0,a0,8 # 80022b88 <__func__.2+0x320>
    80001b88:	0e81f0ef          	jal	80020c70 <printf>
    80001b8c:	86a2                	mv	a3,s0
    80001b8e:	8626                	mv	a2,s1
    80001b90:	02d00593          	li	a1,45
    80001b94:	00021517          	auipc	a0,0x21
    80001b98:	37450513          	addi	a0,a0,884 # 80022f08 <__func__.2+0x6a0>
    80001b9c:	0d41f0ef          	jal	80020c70 <printf>
    80001ba0:	02900513          	li	a0,41
    80001ba4:	75c1e0ef          	jal	80020300 <putchar>
    80001ba8:	4529                	li	a0,10
    80001baa:	7561e0ef          	jal	80020300 <putchar>
    80001bae:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001bb0:	644024f3          	csrr	s1,hip
    80001bb4:	00021617          	auipc	a2,0x21
    80001bb8:	34c60613          	addi	a2,a2,844 # 80022f00 <__func__.2+0x698>
    80001bbc:	08200593          	li	a1,130
    80001bc0:	00021517          	auipc	a0,0x21
    80001bc4:	fa850513          	addi	a0,a0,-88 # 80022b68 <__func__.2+0x300>
    80001bc8:	44400913          	li	s2,1092
    80001bcc:	0a41f0ef          	jal	80020c70 <printf>
    80001bd0:	3f248863          	beq	s1,s2,80001fc0 <check_xip_regs_3+0x4bc>
    80001bd4:	00021597          	auipc	a1,0x21
    80001bd8:	f6c58593          	addi	a1,a1,-148 # 80022b40 <__func__.2+0x2d8>
    80001bdc:	00021517          	auipc	a0,0x21
    80001be0:	fa450513          	addi	a0,a0,-92 # 80022b80 <__func__.2+0x318>
    80001be4:	08c1f0ef          	jal	80020c70 <printf>
    80001be8:	00021517          	auipc	a0,0x21
    80001bec:	fa050513          	addi	a0,a0,-96 # 80022b88 <__func__.2+0x320>
    80001bf0:	0801f0ef          	jal	80020c70 <printf>
    80001bf4:	86ca                	mv	a3,s2
    80001bf6:	8626                	mv	a2,s1
    80001bf8:	02d00593          	li	a1,45
    80001bfc:	00021517          	auipc	a0,0x21
    80001c00:	30c50513          	addi	a0,a0,780 # 80022f08 <__func__.2+0x6a0>
    80001c04:	06c1f0ef          	jal	80020c70 <printf>
    80001c08:	02900513          	li	a0,41
    80001c0c:	6f41e0ef          	jal	80020300 <putchar>
    80001c10:	4529                	li	a0,10
    80001c12:	6ee1e0ef          	jal	80020300 <putchar>
    80001c16:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001c18:	144024f3          	csrr	s1,sip
    80001c1c:	00021617          	auipc	a2,0x21
    80001c20:	30460613          	addi	a2,a2,772 # 80022f20 <__func__.2+0x6b8>
    80001c24:	08200593          	li	a1,130
    80001c28:	00021517          	auipc	a0,0x21
    80001c2c:	f4050513          	addi	a0,a0,-192 # 80022b68 <__func__.2+0x300>
    80001c30:	0401f0ef          	jal	80020c70 <printf>
    80001c34:	2e048763          	beqz	s1,80001f22 <check_xip_regs_3+0x41e>
    80001c38:	00021597          	auipc	a1,0x21
    80001c3c:	f0858593          	addi	a1,a1,-248 # 80022b40 <__func__.2+0x2d8>
    80001c40:	00021517          	auipc	a0,0x21
    80001c44:	f4050513          	addi	a0,a0,-192 # 80022b80 <__func__.2+0x318>
    80001c48:	0281f0ef          	jal	80020c70 <printf>
    80001c4c:	00021517          	auipc	a0,0x21
    80001c50:	f3c50513          	addi	a0,a0,-196 # 80022b88 <__func__.2+0x320>
    80001c54:	01c1f0ef          	jal	80020c70 <printf>
    80001c58:	8626                	mv	a2,s1
    80001c5a:	4681                	li	a3,0
    80001c5c:	02d00593          	li	a1,45
    80001c60:	00021517          	auipc	a0,0x21
    80001c64:	2a850513          	addi	a0,a0,680 # 80022f08 <__func__.2+0x6a0>
    80001c68:	0081f0ef          	jal	80020c70 <printf>
    80001c6c:	02900513          	li	a0,41
    80001c70:	6901e0ef          	jal	80020300 <putchar>
    80001c74:	4529                	li	a0,10
    80001c76:	68a1e0ef          	jal	80020300 <putchar>
    80001c7a:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001c7c:	244024f3          	csrr	s1,vsip
    80001c80:	00021617          	auipc	a2,0x21
    80001c84:	27060613          	addi	a2,a2,624 # 80022ef0 <__func__.2+0x688>
    80001c88:	08200593          	li	a1,130
    80001c8c:	00021517          	auipc	a0,0x21
    80001c90:	edc50513          	addi	a0,a0,-292 # 80022b68 <__func__.2+0x300>
    80001c94:	22200913          	li	s2,546
    80001c98:	7d91e0ef          	jal	80020c70 <printf>
    80001c9c:	35248e63          	beq	s1,s2,80001ff8 <check_xip_regs_3+0x4f4>
    80001ca0:	00021597          	auipc	a1,0x21
    80001ca4:	ea058593          	addi	a1,a1,-352 # 80022b40 <__func__.2+0x2d8>
    80001ca8:	00021517          	auipc	a0,0x21
    80001cac:	ed850513          	addi	a0,a0,-296 # 80022b80 <__func__.2+0x318>
    80001cb0:	7c11e0ef          	jal	80020c70 <printf>
    80001cb4:	00021517          	auipc	a0,0x21
    80001cb8:	ed450513          	addi	a0,a0,-300 # 80022b88 <__func__.2+0x320>
    80001cbc:	7b51e0ef          	jal	80020c70 <printf>
    80001cc0:	86ca                	mv	a3,s2
    80001cc2:	8626                	mv	a2,s1
    80001cc4:	02d00593          	li	a1,45
    80001cc8:	00021517          	auipc	a0,0x21
    80001ccc:	24050513          	addi	a0,a0,576 # 80022f08 <__func__.2+0x6a0>
    80001cd0:	7a11e0ef          	jal	80020c70 <printf>
    80001cd4:	02900513          	li	a0,41
    80001cd8:	6281e0ef          	jal	80020300 <putchar>
    80001cdc:	4529                	li	a0,10
    80001cde:	6221e0ef          	jal	80020300 <putchar>
    80001ce2:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001ce4:	4509                	li	a0,2
    80001ce6:	df3fe0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001cea:	144024f3          	csrr	s1,sip
    80001cee:	00021617          	auipc	a2,0x21
    80001cf2:	23a60613          	addi	a2,a2,570 # 80022f28 <__func__.2+0x6c0>
    80001cf6:	08200593          	li	a1,130
    80001cfa:	00021517          	auipc	a0,0x21
    80001cfe:	e6e50513          	addi	a0,a0,-402 # 80022b68 <__func__.2+0x300>
    80001d02:	22200913          	li	s2,546
    80001d06:	76b1e0ef          	jal	80020c70 <printf>
    80001d0a:	2d248963          	beq	s1,s2,80001fdc <check_xip_regs_3+0x4d8>
    80001d0e:	00021597          	auipc	a1,0x21
    80001d12:	e3258593          	addi	a1,a1,-462 # 80022b40 <__func__.2+0x2d8>
    80001d16:	00021517          	auipc	a0,0x21
    80001d1a:	e6a50513          	addi	a0,a0,-406 # 80022b80 <__func__.2+0x318>
    80001d1e:	7531e0ef          	jal	80020c70 <printf>
    80001d22:	00021517          	auipc	a0,0x21
    80001d26:	e6650513          	addi	a0,a0,-410 # 80022b88 <__func__.2+0x320>
    80001d2a:	7471e0ef          	jal	80020c70 <printf>
    80001d2e:	86ca                	mv	a3,s2
    80001d30:	8626                	mv	a2,s1
    80001d32:	02d00593          	li	a1,45
    80001d36:	00021517          	auipc	a0,0x21
    80001d3a:	1d250513          	addi	a0,a0,466 # 80022f08 <__func__.2+0x6a0>
    80001d3e:	7331e0ef          	jal	80020c70 <printf>
    80001d42:	02900513          	li	a0,41
    80001d46:	5ba1e0ef          	jal	80020300 <putchar>
    80001d4a:	4529                	li	a0,10
    80001d4c:	5b41e0ef          	jal	80020300 <putchar>
    80001d50:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001d52:	4511                	li	a0,4
    80001d54:	d85fe0ef          	jal	80000ad8 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80001d58:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001d5c:	644024f3          	csrr	s1,hip
    80001d60:	00021617          	auipc	a2,0x21
    80001d64:	1a060613          	addi	a2,a2,416 # 80022f00 <__func__.2+0x698>
    80001d68:	08200593          	li	a1,130
    80001d6c:	00021517          	auipc	a0,0x21
    80001d70:	dfc50513          	addi	a0,a0,-516 # 80022b68 <__func__.2+0x300>
    80001d74:	6fd1e0ef          	jal	80020c70 <printf>
    80001d78:	22048663          	beqz	s1,80001fa4 <check_xip_regs_3+0x4a0>
    80001d7c:	00021597          	auipc	a1,0x21
    80001d80:	dc458593          	addi	a1,a1,-572 # 80022b40 <__func__.2+0x2d8>
    80001d84:	00021517          	auipc	a0,0x21
    80001d88:	dfc50513          	addi	a0,a0,-516 # 80022b80 <__func__.2+0x318>
    80001d8c:	6e51e0ef          	jal	80020c70 <printf>
    80001d90:	00021517          	auipc	a0,0x21
    80001d94:	df850513          	addi	a0,a0,-520 # 80022b88 <__func__.2+0x320>
    80001d98:	6d91e0ef          	jal	80020c70 <printf>
    80001d9c:	8626                	mv	a2,s1
    80001d9e:	4681                	li	a3,0
    80001da0:	02d00593          	li	a1,45
    80001da4:	00021517          	auipc	a0,0x21
    80001da8:	16450513          	addi	a0,a0,356 # 80022f08 <__func__.2+0x6a0>
    80001dac:	6c51e0ef          	jal	80020c70 <printf>
    80001db0:	02900513          	li	a0,41
    80001db4:	54c1e0ef          	jal	80020300 <putchar>
    80001db8:	4529                	li	a0,10
    80001dba:	5461e0ef          	jal	80020300 <putchar>
    80001dbe:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001dc0:	144024f3          	csrr	s1,sip
    80001dc4:	00021617          	auipc	a2,0x21
    80001dc8:	15c60613          	addi	a2,a2,348 # 80022f20 <__func__.2+0x6b8>
    80001dcc:	08200593          	li	a1,130
    80001dd0:	00021517          	auipc	a0,0x21
    80001dd4:	d9850513          	addi	a0,a0,-616 # 80022b68 <__func__.2+0x300>
    80001dd8:	6991e0ef          	jal	80020c70 <printf>
    80001ddc:	1a048663          	beqz	s1,80001f88 <check_xip_regs_3+0x484>
    80001de0:	00021597          	auipc	a1,0x21
    80001de4:	d6058593          	addi	a1,a1,-672 # 80022b40 <__func__.2+0x2d8>
    80001de8:	00021517          	auipc	a0,0x21
    80001dec:	d9850513          	addi	a0,a0,-616 # 80022b80 <__func__.2+0x318>
    80001df0:	6811e0ef          	jal	80020c70 <printf>
    80001df4:	00021517          	auipc	a0,0x21
    80001df8:	d9450513          	addi	a0,a0,-620 # 80022b88 <__func__.2+0x320>
    80001dfc:	6751e0ef          	jal	80020c70 <printf>
    80001e00:	8626                	mv	a2,s1
    80001e02:	4681                	li	a3,0
    80001e04:	02d00593          	li	a1,45
    80001e08:	00021517          	auipc	a0,0x21
    80001e0c:	10050513          	addi	a0,a0,256 # 80022f08 <__func__.2+0x6a0>
    80001e10:	6611e0ef          	jal	80020c70 <printf>
    80001e14:	02900513          	li	a0,41
    80001e18:	4e81e0ef          	jal	80020300 <putchar>
    80001e1c:	4529                	li	a0,10
    80001e1e:	4e21e0ef          	jal	80020300 <putchar>
    80001e22:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001e24:	244024f3          	csrr	s1,vsip
    80001e28:	00021617          	auipc	a2,0x21
    80001e2c:	0c860613          	addi	a2,a2,200 # 80022ef0 <__func__.2+0x688>
    80001e30:	08200593          	li	a1,130
    80001e34:	00021517          	auipc	a0,0x21
    80001e38:	d3450513          	addi	a0,a0,-716 # 80022b68 <__func__.2+0x300>
    80001e3c:	6351e0ef          	jal	80020c70 <printf>
    80001e40:	12048663          	beqz	s1,80001f6c <check_xip_regs_3+0x468>
    80001e44:	00021597          	auipc	a1,0x21
    80001e48:	cfc58593          	addi	a1,a1,-772 # 80022b40 <__func__.2+0x2d8>
    80001e4c:	00021517          	auipc	a0,0x21
    80001e50:	d3450513          	addi	a0,a0,-716 # 80022b80 <__func__.2+0x318>
    80001e54:	61d1e0ef          	jal	80020c70 <printf>
    80001e58:	00021517          	auipc	a0,0x21
    80001e5c:	d3050513          	addi	a0,a0,-720 # 80022b88 <__func__.2+0x320>
    80001e60:	6111e0ef          	jal	80020c70 <printf>
    80001e64:	8626                	mv	a2,s1
    80001e66:	4681                	li	a3,0
    80001e68:	02d00593          	li	a1,45
    80001e6c:	00021517          	auipc	a0,0x21
    80001e70:	09c50513          	addi	a0,a0,156 # 80022f08 <__func__.2+0x6a0>
    80001e74:	5fd1e0ef          	jal	80020c70 <printf>
    80001e78:	02900513          	li	a0,41
    80001e7c:	4841e0ef          	jal	80020300 <putchar>
    80001e80:	4529                	li	a0,10
    80001e82:	47e1e0ef          	jal	80020300 <putchar>
    80001e86:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001e88:	4509                	li	a0,2
    80001e8a:	c4ffe0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e8e:	144024f3          	csrr	s1,sip
    80001e92:	00021617          	auipc	a2,0x21
    80001e96:	09660613          	addi	a2,a2,150 # 80022f28 <__func__.2+0x6c0>
    80001e9a:	08200593          	li	a1,130
    80001e9e:	00021517          	auipc	a0,0x21
    80001ea2:	cca50513          	addi	a0,a0,-822 # 80022b68 <__func__.2+0x300>
    80001ea6:	5cb1e0ef          	jal	80020c70 <printf>
    80001eaa:	c8d1                	beqz	s1,80001f3e <check_xip_regs_3+0x43a>
    80001eac:	00021597          	auipc	a1,0x21
    80001eb0:	c9458593          	addi	a1,a1,-876 # 80022b40 <__func__.2+0x2d8>
    80001eb4:	00021517          	auipc	a0,0x21
    80001eb8:	ccc50513          	addi	a0,a0,-820 # 80022b80 <__func__.2+0x318>
    80001ebc:	5b51e0ef          	jal	80020c70 <printf>
    80001ec0:	00021517          	auipc	a0,0x21
    80001ec4:	cc850513          	addi	a0,a0,-824 # 80022b88 <__func__.2+0x320>
    80001ec8:	5a91e0ef          	jal	80020c70 <printf>
    80001ecc:	8626                	mv	a2,s1
    80001ece:	4681                	li	a3,0
    80001ed0:	02d00593          	li	a1,45
    80001ed4:	00021517          	auipc	a0,0x21
    80001ed8:	03450513          	addi	a0,a0,52 # 80022f08 <__func__.2+0x6a0>
    80001edc:	5951e0ef          	jal	80020c70 <printf>
    80001ee0:	02900513          	li	a0,41
    80001ee4:	41c1e0ef          	jal	80020300 <putchar>
    80001ee8:	4529                	li	a0,10
    80001eea:	4161e0ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    80001eee:	4511                	li	a0,4
    80001ef0:	be9fe0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001ef4:	4401                	li	s0,0

    TEST_END();
    80001ef6:	00021597          	auipc	a1,0x21
    80001efa:	c4a58593          	addi	a1,a1,-950 # 80022b40 <__func__.2+0x2d8>
    80001efe:	00021517          	auipc	a0,0x21
    80001f02:	cea50513          	addi	a0,a0,-790 # 80022be8 <__func__.2+0x380>
    80001f06:	56b1e0ef          	jal	80020c70 <printf>
    80001f0a:	4511                	li	a0,4
    80001f0c:	bcdfe0ef          	jal	80000ad8 <goto_priv>
    80001f10:	c98ff0ef          	jal	800013a8 <reset_state>
}
    80001f14:	60e2                	ld	ra,24(sp)
    80001f16:	8522                	mv	a0,s0
    80001f18:	6442                	ld	s0,16(sp)
    80001f1a:	64a2                	ld	s1,8(sp)
    80001f1c:	6902                	ld	s2,0(sp)
    80001f1e:	6105                	addi	sp,sp,32
    80001f20:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    80001f22:	00021597          	auipc	a1,0x21
    80001f26:	c0e58593          	addi	a1,a1,-1010 # 80022b30 <__func__.2+0x2c8>
    80001f2a:	00021517          	auipc	a0,0x21
    80001f2e:	c5650513          	addi	a0,a0,-938 # 80022b80 <__func__.2+0x318>
    80001f32:	53f1e0ef          	jal	80020c70 <printf>
    80001f36:	4529                	li	a0,10
    80001f38:	3c81e0ef          	jal	80020300 <putchar>
    80001f3c:	b381                	j	80001c7c <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f3e:	00021597          	auipc	a1,0x21
    80001f42:	bf258593          	addi	a1,a1,-1038 # 80022b30 <__func__.2+0x2c8>
    80001f46:	00021517          	auipc	a0,0x21
    80001f4a:	c3a50513          	addi	a0,a0,-966 # 80022b80 <__func__.2+0x318>
    80001f4e:	5231e0ef          	jal	80020c70 <printf>
    80001f52:	4529                	li	a0,10
    80001f54:	3ac1e0ef          	jal	80020300 <putchar>
    80001f58:	d859                	beqz	s0,80001eee <check_xip_regs_3+0x3ea>
    goto_priv(PRIV_M);
    80001f5a:	4511                	li	a0,4
    80001f5c:	b7dfe0ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f60:	4405                	li	s0,1
    TEST_END();
    80001f62:	00021597          	auipc	a1,0x21
    80001f66:	bce58593          	addi	a1,a1,-1074 # 80022b30 <__func__.2+0x2c8>
    80001f6a:	bf51                	j	80001efe <check_xip_regs_3+0x3fa>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001f6c:	00021597          	auipc	a1,0x21
    80001f70:	bc458593          	addi	a1,a1,-1084 # 80022b30 <__func__.2+0x2c8>
    80001f74:	00021517          	auipc	a0,0x21
    80001f78:	c0c50513          	addi	a0,a0,-1012 # 80022b80 <__func__.2+0x318>
    80001f7c:	4f51e0ef          	jal	80020c70 <printf>
    80001f80:	4529                	li	a0,10
    80001f82:	37e1e0ef          	jal	80020300 <putchar>
    80001f86:	b709                	j	80001e88 <check_xip_regs_3+0x384>
    check_csr_rd("sip", sip, 0x0);
    80001f88:	00021597          	auipc	a1,0x21
    80001f8c:	ba858593          	addi	a1,a1,-1112 # 80022b30 <__func__.2+0x2c8>
    80001f90:	00021517          	auipc	a0,0x21
    80001f94:	bf050513          	addi	a0,a0,-1040 # 80022b80 <__func__.2+0x318>
    80001f98:	4d91e0ef          	jal	80020c70 <printf>
    80001f9c:	4529                	li	a0,10
    80001f9e:	3621e0ef          	jal	80020300 <putchar>
    80001fa2:	b549                	j	80001e24 <check_xip_regs_3+0x320>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001fa4:	00021597          	auipc	a1,0x21
    80001fa8:	b8c58593          	addi	a1,a1,-1140 # 80022b30 <__func__.2+0x2c8>
    80001fac:	00021517          	auipc	a0,0x21
    80001fb0:	bd450513          	addi	a0,a0,-1068 # 80022b80 <__func__.2+0x318>
    80001fb4:	4bd1e0ef          	jal	80020c70 <printf>
    80001fb8:	4529                	li	a0,10
    80001fba:	3461e0ef          	jal	80020300 <putchar>
    80001fbe:	b509                	j	80001dc0 <check_xip_regs_3+0x2bc>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001fc0:	00021597          	auipc	a1,0x21
    80001fc4:	b7058593          	addi	a1,a1,-1168 # 80022b30 <__func__.2+0x2c8>
    80001fc8:	00021517          	auipc	a0,0x21
    80001fcc:	bb850513          	addi	a0,a0,-1096 # 80022b80 <__func__.2+0x318>
    80001fd0:	4a11e0ef          	jal	80020c70 <printf>
    80001fd4:	4529                	li	a0,10
    80001fd6:	32a1e0ef          	jal	80020300 <putchar>
    80001fda:	b93d                	j	80001c18 <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001fdc:	00021597          	auipc	a1,0x21
    80001fe0:	b5458593          	addi	a1,a1,-1196 # 80022b30 <__func__.2+0x2c8>
    80001fe4:	00021517          	auipc	a0,0x21
    80001fe8:	b9c50513          	addi	a0,a0,-1124 # 80022b80 <__func__.2+0x318>
    80001fec:	4851e0ef          	jal	80020c70 <printf>
    80001ff0:	4529                	li	a0,10
    80001ff2:	30e1e0ef          	jal	80020300 <putchar>
    80001ff6:	bbb1                	j	80001d52 <check_xip_regs_3+0x24e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001ff8:	00021597          	auipc	a1,0x21
    80001ffc:	b3858593          	addi	a1,a1,-1224 # 80022b30 <__func__.2+0x2c8>
    80002000:	00021517          	auipc	a0,0x21
    80002004:	b8050513          	addi	a0,a0,-1152 # 80022b80 <__func__.2+0x318>
    80002008:	4691e0ef          	jal	80020c70 <printf>
    8000200c:	4529                	li	a0,10
    8000200e:	2f21e0ef          	jal	80020300 <putchar>
    80002012:	b9c9                	j	80001ce4 <check_xip_regs_3+0x1e0>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80002014:	00021597          	auipc	a1,0x21
    80002018:	b1c58593          	addi	a1,a1,-1252 # 80022b30 <__func__.2+0x2c8>
    8000201c:	00021517          	auipc	a0,0x21
    80002020:	b6450513          	addi	a0,a0,-1180 # 80022b80 <__func__.2+0x318>
    80002024:	44d1e0ef          	jal	80020c70 <printf>
    80002028:	4529                	li	a0,10
    8000202a:	2d61e0ef          	jal	80020300 <putchar>
    8000202e:	4405                	li	s0,1
    80002030:	b641                	j	80001bb0 <check_xip_regs_3+0xac>

0000000080002032 <interrupt_tests>:

bool interrupt_tests(){
    80002032:	1101                	addi	sp,sp,-32

    TEST_START();
    80002034:	0001f597          	auipc	a1,0x1f
    80002038:	18458593          	addi	a1,a1,388 # 800211b8 <__func__.0>
    8000203c:	00021517          	auipc	a0,0x21
    80002040:	b1450513          	addi	a0,a0,-1260 # 80022b50 <__func__.2+0x2e8>
bool interrupt_tests(){
    80002044:	ec06                	sd	ra,24(sp)
    80002046:	e822                	sd	s0,16(sp)
    80002048:	e426                	sd	s1,8(sp)
    TEST_START();
    8000204a:	4271e0ef          	jal	80020c70 <printf>
    8000204e:	4529                	li	a0,10
    80002050:	2b01e0ef          	jal	80020300 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    80002054:	450d                	li	a0,3
    80002056:	a83fe0ef          	jal	80000ad8 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    8000205a:	02200793          	li	a5,34
    8000205e:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80002062:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    80002066:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    8000206a:	0330000f          	fence	rw,rw
    8000206e:	00043417          	auipc	s0,0x43
    80002072:	fa240413          	addi	s0,s0,-94 # 80045010 <excpt>
    80002076:	4785                	li	a5,1
    80002078:	00043717          	auipc	a4,0x43
    8000207c:	fc073823          	sd	zero,-48(a4) # 80045048 <excpt+0x38>
    80002080:	00f41023          	sh	a5,0(s0)
    80002084:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    80002088:	4509                	li	a0,2
    8000208a:	a4ffe0ef          	jal	80000ad8 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    8000208e:	08200593          	li	a1,130
    80002092:	00021617          	auipc	a2,0x21
    80002096:	ec660613          	addi	a2,a2,-314 # 80022f58 <__func__.2+0x6f0>
    8000209a:	00021517          	auipc	a0,0x21
    8000209e:	ace50513          	addi	a0,a0,-1330 # 80022b68 <__func__.2+0x300>
    800020a2:	3cf1e0ef          	jal	80020c70 <printf>
    800020a6:	00043797          	auipc	a5,0x43
    800020aa:	f6b7c783          	lbu	a5,-149(a5) # 80045011 <excpt+0x1>
    800020ae:	00021597          	auipc	a1,0x21
    800020b2:	a9258593          	addi	a1,a1,-1390 # 80022b40 <__func__.2+0x2d8>
    800020b6:	c799                	beqz	a5,800020c4 <interrupt_tests+0x92>
    800020b8:	57fd                	li	a5,-1
    800020ba:	6418                	ld	a4,8(s0)
    800020bc:	17fe                	slli	a5,a5,0x3f
    800020be:	0789                	addi	a5,a5,2
    800020c0:	18f70163          	beq	a4,a5,80002242 <interrupt_tests+0x210>
    800020c4:	00021517          	auipc	a0,0x21
    800020c8:	abc50513          	addi	a0,a0,-1348 # 80022b80 <__func__.2+0x318>
    800020cc:	3a51e0ef          	jal	80020c70 <printf>
    800020d0:	00043797          	auipc	a5,0x43
    800020d4:	f417c783          	lbu	a5,-191(a5) # 80045011 <excpt+0x1>
    800020d8:	c799                	beqz	a5,800020e6 <interrupt_tests+0xb4>
    800020da:	57fd                	li	a5,-1
    800020dc:	6418                	ld	a4,8(s0)
    800020de:	17fe                	slli	a5,a5,0x3f
    800020e0:	0789                	addi	a5,a5,2
    800020e2:	14f70863          	beq	a4,a5,80002232 <interrupt_tests+0x200>
    800020e6:	00021517          	auipc	a0,0x21
    800020ea:	aa250513          	addi	a0,a0,-1374 # 80022b88 <__func__.2+0x320>
    800020ee:	3831e0ef          	jal	80020c70 <printf>
    800020f2:	02900513          	li	a0,41
    800020f6:	20a1e0ef          	jal	80020300 <putchar>
    800020fa:	4529                	li	a0,10
    800020fc:	2041e0ef          	jal	80020300 <putchar>
    80002100:	00043797          	auipc	a5,0x43
    80002104:	f117c783          	lbu	a5,-239(a5) # 80045011 <excpt+0x1>
    80002108:	4481                	li	s1,0
    8000210a:	c799                	beqz	a5,80002118 <interrupt_tests+0xe6>
    8000210c:	57fd                	li	a5,-1
    8000210e:	6418                	ld	a4,8(s0)
    80002110:	17fe                	slli	a5,a5,0x3f
    80002112:	0789                	addi	a5,a5,2
    80002114:	14f70763          	beq	a4,a5,80002262 <interrupt_tests+0x230>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    80002118:	450d                	li	a0,3
    8000211a:	9bffe0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    8000211e:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    80002122:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002126:	0330000f          	fence	rw,rw
    8000212a:	4785                	li	a5,1
    8000212c:	00043717          	auipc	a4,0x43
    80002130:	f0073e23          	sd	zero,-228(a4) # 80045048 <excpt+0x38>
    80002134:	00f41023          	sh	a5,0(s0)
    80002138:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    8000213c:	4509                	li	a0,2
    8000213e:	99bfe0ef          	jal	80000ad8 <goto_priv>
    CSRS(sie, 0x2);
    80002142:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    80002146:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    8000214a:	08200593          	li	a1,130
    8000214e:	00021617          	auipc	a2,0x21
    80002152:	e2a60613          	addi	a2,a2,-470 # 80022f78 <__func__.2+0x710>
    80002156:	00021517          	auipc	a0,0x21
    8000215a:	a1250513          	addi	a0,a0,-1518 # 80022b68 <__func__.2+0x300>
    8000215e:	3131e0ef          	jal	80020c70 <printf>
    80002162:	00043797          	auipc	a5,0x43
    80002166:	eaf7c783          	lbu	a5,-337(a5) # 80045011 <excpt+0x1>
    8000216a:	00021597          	auipc	a1,0x21
    8000216e:	9d658593          	addi	a1,a1,-1578 # 80022b40 <__func__.2+0x2d8>
    80002172:	c799                	beqz	a5,80002180 <interrupt_tests+0x14e>
    80002174:	57fd                	li	a5,-1
    80002176:	6418                	ld	a4,8(s0)
    80002178:	17fe                	slli	a5,a5,0x3f
    8000217a:	0785                	addi	a5,a5,1
    8000217c:	0ef70b63          	beq	a4,a5,80002272 <interrupt_tests+0x240>
    80002180:	00021517          	auipc	a0,0x21
    80002184:	a0050513          	addi	a0,a0,-1536 # 80022b80 <__func__.2+0x318>
    80002188:	2e91e0ef          	jal	80020c70 <printf>
    8000218c:	00043797          	auipc	a5,0x43
    80002190:	e857c783          	lbu	a5,-379(a5) # 80045011 <excpt+0x1>
    80002194:	c799                	beqz	a5,800021a2 <interrupt_tests+0x170>
    80002196:	57fd                	li	a5,-1
    80002198:	6418                	ld	a4,8(s0)
    8000219a:	17fe                	slli	a5,a5,0x3f
    8000219c:	0785                	addi	a5,a5,1
    8000219e:	08f70263          	beq	a4,a5,80002222 <interrupt_tests+0x1f0>
    800021a2:	00021517          	auipc	a0,0x21
    800021a6:	9e650513          	addi	a0,a0,-1562 # 80022b88 <__func__.2+0x320>
    800021aa:	2c71e0ef          	jal	80020c70 <printf>
    800021ae:	02900513          	li	a0,41
    800021b2:	14e1e0ef          	jal	80020300 <putchar>
    800021b6:	4529                	li	a0,10
    800021b8:	1481e0ef          	jal	80020300 <putchar>
    800021bc:	cca9                	beqz	s1,80002216 <interrupt_tests+0x1e4>
    800021be:	00043497          	auipc	s1,0x43
    800021c2:	e534c483          	lbu	s1,-429(s1) # 80045011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    800021c6:	00021597          	auipc	a1,0x21
    800021ca:	97a58593          	addi	a1,a1,-1670 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs sw irq with delegation", 
    800021ce:	c881                	beqz	s1,800021de <interrupt_tests+0x1ac>
    800021d0:	57fd                	li	a5,-1
    800021d2:	6418                	ld	a4,8(s0)
    800021d4:	17fe                	slli	a5,a5,0x3f
    800021d6:	0785                	addi	a5,a5,1
    800021d8:	02f70463          	beq	a4,a5,80002200 <interrupt_tests+0x1ce>
    800021dc:	4481                	li	s1,0
    TEST_END();
    800021de:	00021517          	auipc	a0,0x21
    800021e2:	a0a50513          	addi	a0,a0,-1526 # 80022be8 <__func__.2+0x380>
    800021e6:	28b1e0ef          	jal	80020c70 <printf>
    800021ea:	4511                	li	a0,4
    800021ec:	8edfe0ef          	jal	80000ad8 <goto_priv>
    800021f0:	9b8ff0ef          	jal	800013a8 <reset_state>
}
    800021f4:	60e2                	ld	ra,24(sp)
    800021f6:	6442                	ld	s0,16(sp)
    800021f8:	8526                	mv	a0,s1
    800021fa:	64a2                	ld	s1,8(sp)
    800021fc:	6105                	addi	sp,sp,32
    800021fe:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    80002200:	00043717          	auipc	a4,0x43
    80002204:	e1472703          	lw	a4,-492(a4) # 80045014 <excpt+0x4>
    80002208:	4789                	li	a5,2
    TEST_END();
    8000220a:	00021597          	auipc	a1,0x21
    8000220e:	92658593          	addi	a1,a1,-1754 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs sw irq with delegation", 
    80002212:	fcf706e3          	beq	a4,a5,800021de <interrupt_tests+0x1ac>
    80002216:	4481                	li	s1,0
    TEST_END();
    80002218:	00021597          	auipc	a1,0x21
    8000221c:	92858593          	addi	a1,a1,-1752 # 80022b40 <__func__.2+0x2d8>
    80002220:	bf7d                	j	800021de <interrupt_tests+0x1ac>
    TEST_ASSERT("vs sw irq with delegation", 
    80002222:	00043717          	auipc	a4,0x43
    80002226:	df272703          	lw	a4,-526(a4) # 80045014 <excpt+0x4>
    8000222a:	4789                	li	a5,2
    8000222c:	f6f71be3          	bne	a4,a5,800021a2 <interrupt_tests+0x170>
    80002230:	b759                	j	800021b6 <interrupt_tests+0x184>
    TEST_ASSERT("vs sw irq with no delegation", 
    80002232:	00043717          	auipc	a4,0x43
    80002236:	de272703          	lw	a4,-542(a4) # 80045014 <excpt+0x4>
    8000223a:	478d                	li	a5,3
    8000223c:	eaf715e3          	bne	a4,a5,800020e6 <interrupt_tests+0xb4>
    80002240:	bd6d                	j	800020fa <interrupt_tests+0xc8>
    80002242:	00043717          	auipc	a4,0x43
    80002246:	dd272703          	lw	a4,-558(a4) # 80045014 <excpt+0x4>
    8000224a:	478d                	li	a5,3
    8000224c:	00021597          	auipc	a1,0x21
    80002250:	8e458593          	addi	a1,a1,-1820 # 80022b30 <__func__.2+0x2c8>
    80002254:	e6f708e3          	beq	a4,a5,800020c4 <interrupt_tests+0x92>
    80002258:	00021597          	auipc	a1,0x21
    8000225c:	8e858593          	addi	a1,a1,-1816 # 80022b40 <__func__.2+0x2d8>
    80002260:	b595                	j	800020c4 <interrupt_tests+0x92>
    80002262:	00043497          	auipc	s1,0x43
    80002266:	db24a483          	lw	s1,-590(s1) # 80045014 <excpt+0x4>
    8000226a:	14f5                	addi	s1,s1,-3
    8000226c:	0014b493          	seqz	s1,s1
    80002270:	b565                	j	80002118 <interrupt_tests+0xe6>
    TEST_ASSERT("vs sw irq with delegation", 
    80002272:	00043717          	auipc	a4,0x43
    80002276:	da272703          	lw	a4,-606(a4) # 80045014 <excpt+0x4>
    8000227a:	4789                	li	a5,2
    8000227c:	00021597          	auipc	a1,0x21
    80002280:	8b458593          	addi	a1,a1,-1868 # 80022b30 <__func__.2+0x2c8>
    80002284:	eef70ee3          	beq	a4,a5,80002180 <interrupt_tests+0x14e>
    80002288:	00021597          	auipc	a1,0x21
    8000228c:	8b858593          	addi	a1,a1,-1864 # 80022b40 <__func__.2+0x2d8>
    80002290:	bdc5                	j	80002180 <interrupt_tests+0x14e>

0000000080002292 <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    80002292:	7139                	addi	sp,sp,-64
    
    TEST_START();
    80002294:	0001f597          	auipc	a1,0x1f
    80002298:	f3458593          	addi	a1,a1,-204 # 800211c8 <__func__.20>
    8000229c:	00021517          	auipc	a0,0x21
    800022a0:	8b450513          	addi	a0,a0,-1868 # 80022b50 <__func__.2+0x2e8>
bool two_stage_translation_1(){
    800022a4:	fc06                	sd	ra,56(sp)
    800022a6:	f822                	sd	s0,48(sp)
    800022a8:	f426                	sd	s1,40(sp)
    800022aa:	f04a                	sd	s2,32(sp)
    800022ac:	ec4e                	sd	s3,24(sp)
    TEST_START();
    800022ae:	1c31e0ef          	jal	80020c70 <printf>
    800022b2:	4529                	li	a0,10
    800022b4:	04c1e0ef          	jal	80020300 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    800022b8:	2201b737          	lui	a4,0x2201b
    800022bc:	000887b7          	lui	a5,0x88
    800022c0:	070a                	slli	a4,a4,0x2
    800022c2:	44c5                	li	s1,17
    800022c4:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800022c8:	e304                	sd	s1,0(a4)
    800022ca:	07b2                	slli	a5,a5,0xc
    800022cc:	02200913          	li	s2,34
    800022d0:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    800022d4:	450d                	li	a0,3
    800022d6:	803fe0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800022da:	b06fe0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800022de:	d44fe0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    800022e2:	4509                	li	a0,2
    800022e4:	ff4fe0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800022e8:	bc8fe0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    800022ec:	4001b737          	lui	a4,0x4001b
    800022f0:	070a                	slli	a4,a4,0x2
    800022f2:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800022f6:	001007b7          	lui	a5,0x100
    800022fa:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800022fe:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002300:	00021617          	auipc	a2,0x21
    80002304:	c9860613          	addi	a2,a2,-872 # 80022f98 <__func__.2+0x730>
    80002308:	08200593          	li	a1,130
    8000230c:	00021517          	auipc	a0,0x21
    80002310:	85c50513          	addi	a0,a0,-1956 # 80022b68 <__func__.2+0x300>
    80002314:	6380                	ld	s0,0(a5)
    80002316:	15b1e0ef          	jal	80020c70 <printf>
    8000231a:	3e998463          	beq	s3,s1,80002702 <two_stage_translation_1+0x470>
    8000231e:	00021597          	auipc	a1,0x21
    80002322:	82258593          	addi	a1,a1,-2014 # 80022b40 <__func__.2+0x2d8>
    80002326:	00021517          	auipc	a0,0x21
    8000232a:	85a50513          	addi	a0,a0,-1958 # 80022b80 <__func__.2+0x318>
    8000232e:	1431e0ef          	jal	80020c70 <printf>
    80002332:	00021517          	auipc	a0,0x21
    80002336:	85650513          	addi	a0,a0,-1962 # 80022b88 <__func__.2+0x320>
    8000233a:	1371e0ef          	jal	80020c70 <printf>
    8000233e:	02900513          	li	a0,41
    80002342:	7bf1d0ef          	jal	80020300 <putchar>
    80002346:	4529                	li	a0,10
    80002348:	7b91d0ef          	jal	80020300 <putchar>
    8000234c:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    8000234e:	450d                	li	a0,3
    80002350:	f88fe0ef          	jal	80000ad8 <goto_priv>
    hpt_switch();
    80002354:	e76fe0ef          	jal	800009ca <hpt_switch>
    asm volatile(
    80002358:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000235c:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002360:	4509                	li	a0,2
    80002362:	f76fe0ef          	jal	80000ad8 <goto_priv>
    80002366:	001007b7          	lui	a5,0x100
    8000236a:	4001b737          	lui	a4,0x4001b
    8000236e:	070a                	slli	a4,a4,0x2
    80002370:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002374:	07b2                	slli	a5,a5,0xc
    80002376:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000237a:	00021617          	auipc	a2,0x21
    8000237e:	c3660613          	addi	a2,a2,-970 # 80022fb0 <__func__.2+0x748>
    80002382:	08200593          	li	a1,130
    80002386:	00020517          	auipc	a0,0x20
    8000238a:	7e250513          	addi	a0,a0,2018 # 80022b68 <__func__.2+0x300>
    8000238e:	6384                	ld	s1,0(a5)
    80002390:	0e11e0ef          	jal	80020c70 <printf>
    80002394:	02200793          	li	a5,34
    80002398:	32f90563          	beq	s2,a5,800026c2 <two_stage_translation_1+0x430>
    8000239c:	00020597          	auipc	a1,0x20
    800023a0:	7a458593          	addi	a1,a1,1956 # 80022b40 <__func__.2+0x2d8>
    800023a4:	00020517          	auipc	a0,0x20
    800023a8:	7dc50513          	addi	a0,a0,2012 # 80022b80 <__func__.2+0x318>
    800023ac:	0c51e0ef          	jal	80020c70 <printf>
    800023b0:	00020517          	auipc	a0,0x20
    800023b4:	7d850513          	addi	a0,a0,2008 # 80022b88 <__func__.2+0x320>
    800023b8:	0b91e0ef          	jal	80020c70 <printf>
    800023bc:	02900513          	li	a0,41
    800023c0:	7411d0ef          	jal	80020300 <putchar>
    800023c4:	4529                	li	a0,10
    800023c6:	73b1d0ef          	jal	80020300 <putchar>
    800023ca:	4401                	li	s0,0

    vspt_switch();
    800023cc:	de4fe0ef          	jal	800009b0 <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    800023d0:	12000073          	sfence.vma
    800023d4:	001007b7          	lui	a5,0x100
    800023d8:	4001b737          	lui	a4,0x4001b
    800023dc:	070a                	slli	a4,a4,0x2
    800023de:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800023e2:	07b2                	slli	a5,a5,0xc
    800023e4:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    800023e8:	00021617          	auipc	a2,0x21
    800023ec:	c0060613          	addi	a2,a2,-1024 # 80022fe8 <__func__.2+0x780>
    800023f0:	08200593          	li	a1,130
    800023f4:	00020517          	auipc	a0,0x20
    800023f8:	77450513          	addi	a0,a0,1908 # 80022b68 <__func__.2+0x300>
    800023fc:	6384                	ld	s1,0(a5)
    800023fe:	0731e0ef          	jal	80020c70 <printf>
    80002402:	47c5                	li	a5,17
    80002404:	34f90b63          	beq	s2,a5,8000275a <two_stage_translation_1+0x4c8>
    80002408:	00020597          	auipc	a1,0x20
    8000240c:	73858593          	addi	a1,a1,1848 # 80022b40 <__func__.2+0x2d8>
    80002410:	00020517          	auipc	a0,0x20
    80002414:	77050513          	addi	a0,a0,1904 # 80022b80 <__func__.2+0x318>
    80002418:	0591e0ef          	jal	80020c70 <printf>
    8000241c:	00020517          	auipc	a0,0x20
    80002420:	76c50513          	addi	a0,a0,1900 # 80022b88 <__func__.2+0x320>
    80002424:	04d1e0ef          	jal	80020c70 <printf>
    80002428:	02900513          	li	a0,41
    8000242c:	6d51d0ef          	jal	80020300 <putchar>
    80002430:	4529                	li	a0,10
    80002432:	6cf1d0ef          	jal	80020300 <putchar>
    80002436:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    80002438:	4511                	li	a0,4
    8000243a:	e9efe0ef          	jal	80000ad8 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    8000243e:	002007b7          	lui	a5,0x200
    80002442:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002446:	4509                	li	a0,2
    80002448:	e90fe0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000244c:	0330000f          	fence	rw,rw
    80002450:	00043417          	auipc	s0,0x43
    80002454:	bc040413          	addi	s0,s0,-1088 # 80045010 <excpt>
    80002458:	4785                	li	a5,1
    8000245a:	00043717          	auipc	a4,0x43
    8000245e:	be073723          	sd	zero,-1042(a4) # 80045048 <excpt+0x38>
    80002462:	00f41023          	sh	a5,0(s0)
    80002466:	0330000f          	fence	rw,rw
    8000246a:	001007b7          	lui	a5,0x100
    8000246e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002472:	07b2                	slli	a5,a5,0xc
    80002474:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002476:	08200593          	li	a1,130
    8000247a:	00021617          	auipc	a2,0x21
    8000247e:	ba660613          	addi	a2,a2,-1114 # 80023020 <__func__.2+0x7b8>
    80002482:	00020517          	auipc	a0,0x20
    80002486:	6e650513          	addi	a0,a0,1766 # 80022b68 <__func__.2+0x300>
    8000248a:	7e61e0ef          	jal	80020c70 <printf>
    8000248e:	00043797          	auipc	a5,0x43
    80002492:	b837c783          	lbu	a5,-1149(a5) # 80045011 <excpt+0x1>
    80002496:	00020597          	auipc	a1,0x20
    8000249a:	6aa58593          	addi	a1,a1,1706 # 80022b40 <__func__.2+0x2d8>
    8000249e:	c789                	beqz	a5,800024a8 <two_stage_translation_1+0x216>
    800024a0:	6418                	ld	a4,8(s0)
    800024a2:	47d5                	li	a5,21
    800024a4:	40f70b63          	beq	a4,a5,800028ba <two_stage_translation_1+0x628>
    800024a8:	00020517          	auipc	a0,0x20
    800024ac:	6d850513          	addi	a0,a0,1752 # 80022b80 <__func__.2+0x318>
    800024b0:	7c01e0ef          	jal	80020c70 <printf>
    800024b4:	00043797          	auipc	a5,0x43
    800024b8:	b5d7c783          	lbu	a5,-1187(a5) # 80045011 <excpt+0x1>
    800024bc:	c789                	beqz	a5,800024c6 <two_stage_translation_1+0x234>
    800024be:	6418                	ld	a4,8(s0)
    800024c0:	47d5                	li	a5,21
    800024c2:	2cf70e63          	beq	a4,a5,8000279e <two_stage_translation_1+0x50c>
    800024c6:	00020517          	auipc	a0,0x20
    800024ca:	6c250513          	addi	a0,a0,1730 # 80022b88 <__func__.2+0x320>
    800024ce:	7a21e0ef          	jal	80020c70 <printf>
    800024d2:	02900513          	li	a0,41
    800024d6:	62b1d0ef          	jal	80020300 <putchar>
    800024da:	4529                	li	a0,10
    800024dc:	6251d0ef          	jal	80020300 <putchar>
    800024e0:	c899                	beqz	s1,800024f6 <two_stage_translation_1+0x264>
    800024e2:	00043797          	auipc	a5,0x43
    800024e6:	b2f7c783          	lbu	a5,-1233(a5) # 80045011 <excpt+0x1>
    800024ea:	4481                	li	s1,0
    800024ec:	c789                	beqz	a5,800024f6 <two_stage_translation_1+0x264>
    800024ee:	6418                	ld	a4,8(s0)
    800024f0:	47d5                	li	a5,21
    800024f2:	34f70f63          	beq	a4,a5,80002850 <two_stage_translation_1+0x5be>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    800024f6:	0330000f          	fence	rw,rw
    800024fa:	4785                	li	a5,1
    800024fc:	00043717          	auipc	a4,0x43
    80002500:	b4073623          	sd	zero,-1204(a4) # 80045048 <excpt+0x38>
    80002504:	00f41023          	sh	a5,0(s0)
    80002508:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    8000250c:	001007b7          	lui	a5,0x100
    80002510:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002514:	07b2                	slli	a5,a5,0xc
    80002516:	00000297          	auipc	t0,0x0
    8000251a:	00c28293          	addi	t0,t0,12 # 80002522 <two_stage_translation_1+0x290>
    8000251e:	02543c23          	sd	t0,56(s0)
    80002522:	8782                	jr	a5
    TEST_ASSERT(
    80002524:	08200593          	li	a1,130
    80002528:	00021617          	auipc	a2,0x21
    8000252c:	b2860613          	addi	a2,a2,-1240 # 80023050 <__func__.2+0x7e8>
    80002530:	00020517          	auipc	a0,0x20
    80002534:	63850513          	addi	a0,a0,1592 # 80022b68 <__func__.2+0x300>
    80002538:	7381e0ef          	jal	80020c70 <printf>
    8000253c:	00043797          	auipc	a5,0x43
    80002540:	ad57c783          	lbu	a5,-1323(a5) # 80045011 <excpt+0x1>
    80002544:	00020597          	auipc	a1,0x20
    80002548:	5fc58593          	addi	a1,a1,1532 # 80022b40 <__func__.2+0x2d8>
    8000254c:	c789                	beqz	a5,80002556 <two_stage_translation_1+0x2c4>
    8000254e:	6418                	ld	a4,8(s0)
    80002550:	47d1                	li	a5,20
    80002552:	3cf70763          	beq	a4,a5,80002920 <two_stage_translation_1+0x68e>
    80002556:	00020517          	auipc	a0,0x20
    8000255a:	62a50513          	addi	a0,a0,1578 # 80022b80 <__func__.2+0x318>
    8000255e:	7121e0ef          	jal	80020c70 <printf>
    80002562:	00043797          	auipc	a5,0x43
    80002566:	aaf7c783          	lbu	a5,-1361(a5) # 80045011 <excpt+0x1>
    8000256a:	c789                	beqz	a5,80002574 <two_stage_translation_1+0x2e2>
    8000256c:	6418                	ld	a4,8(s0)
    8000256e:	47d1                	li	a5,20
    80002570:	26f70263          	beq	a4,a5,800027d4 <two_stage_translation_1+0x542>
    80002574:	00020517          	auipc	a0,0x20
    80002578:	61450513          	addi	a0,a0,1556 # 80022b88 <__func__.2+0x320>
    8000257c:	6f41e0ef          	jal	80020c70 <printf>
    80002580:	02900513          	li	a0,41
    80002584:	57d1d0ef          	jal	80020300 <putchar>
    80002588:	4529                	li	a0,10
    8000258a:	5771d0ef          	jal	80020300 <putchar>
    8000258e:	c899                	beqz	s1,800025a4 <two_stage_translation_1+0x312>
    80002590:	00043797          	auipc	a5,0x43
    80002594:	a817c783          	lbu	a5,-1407(a5) # 80045011 <excpt+0x1>
    80002598:	4481                	li	s1,0
    8000259a:	c789                	beqz	a5,800025a4 <two_stage_translation_1+0x312>
    8000259c:	6418                	ld	a4,8(s0)
    8000259e:	47d1                	li	a5,20
    800025a0:	28f70363          	beq	a4,a5,80002826 <two_stage_translation_1+0x594>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    800025a4:	4511                	li	a0,4
    800025a6:	d32fe0ef          	jal	80000ad8 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    800025aa:	002027b7          	lui	a5,0x202
    800025ae:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    800025b2:	450d                	li	a0,3
    800025b4:	d24fe0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    800025b8:	6789                	lui	a5,0x2
    800025ba:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    800025be:	4509                	li	a0,2
    800025c0:	d18fe0ef          	jal	80000ad8 <goto_priv>
    800025c4:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    800025c8:	0330000f          	fence	rw,rw
    800025cc:	4785                	li	a5,1
    800025ce:	00043717          	auipc	a4,0x43
    800025d2:	a6073d23          	sd	zero,-1414(a4) # 80045048 <excpt+0x38>
    800025d6:	00f41023          	sh	a5,0(s0)
    800025da:	0330000f          	fence	rw,rw
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800025de:	400197b7          	lui	a5,0x40019
    800025e2:	078a                	slli	a5,a5,0x2
    800025e4:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    800025e6:	08200593          	li	a1,130
    800025ea:	00021617          	auipc	a2,0x21
    800025ee:	aa660613          	addi	a2,a2,-1370 # 80023090 <__func__.2+0x828>
    800025f2:	00020517          	auipc	a0,0x20
    800025f6:	57650513          	addi	a0,a0,1398 # 80022b68 <__func__.2+0x300>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800025fa:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    800025fc:	6741e0ef          	jal	80020c70 <printf>
    80002600:	00043797          	auipc	a5,0x43
    80002604:	a117c783          	lbu	a5,-1519(a5) # 80045011 <excpt+0x1>
    80002608:	00020597          	auipc	a1,0x20
    8000260c:	53858593          	addi	a1,a1,1336 # 80022b40 <__func__.2+0x2d8>
    80002610:	c789                	beqz	a5,8000261a <two_stage_translation_1+0x388>
    80002612:	6418                	ld	a4,8(s0)
    80002614:	47b5                	li	a5,13
    80002616:	2cf70f63          	beq	a4,a5,800028f4 <two_stage_translation_1+0x662>
    8000261a:	00020517          	auipc	a0,0x20
    8000261e:	56650513          	addi	a0,a0,1382 # 80022b80 <__func__.2+0x318>
    80002622:	64e1e0ef          	jal	80020c70 <printf>
    80002626:	00043797          	auipc	a5,0x43
    8000262a:	9eb7c783          	lbu	a5,-1557(a5) # 80045011 <excpt+0x1>
    8000262e:	c789                	beqz	a5,80002638 <two_stage_translation_1+0x3a6>
    80002630:	6418                	ld	a4,8(s0)
    80002632:	47b5                	li	a5,13
    80002634:	1cf70b63          	beq	a4,a5,8000280a <two_stage_translation_1+0x578>
    80002638:	00020517          	auipc	a0,0x20
    8000263c:	55050513          	addi	a0,a0,1360 # 80022b88 <__func__.2+0x320>
    80002640:	6301e0ef          	jal	80020c70 <printf>
    80002644:	02900513          	li	a0,41
    80002648:	4b91d0ef          	jal	80020300 <putchar>
    8000264c:	4529                	li	a0,10
    8000264e:	4b31d0ef          	jal	80020300 <putchar>
    80002652:	c0b5                	beqz	s1,800026b6 <two_stage_translation_1+0x424>
    80002654:	00043497          	auipc	s1,0x43
    80002658:	9bd4c483          	lbu	s1,-1603(s1) # 80045011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    8000265c:	00020597          	auipc	a1,0x20
    80002660:	4e458593          	addi	a1,a1,1252 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT(
    80002664:	c491                	beqz	s1,80002670 <two_stage_translation_1+0x3de>
    80002666:	6418                	ld	a4,8(s0)
    80002668:	47b5                	li	a5,13
    8000266a:	02f70663          	beq	a4,a5,80002696 <two_stage_translation_1+0x404>
    8000266e:	4481                	li	s1,0
    TEST_END();
    80002670:	00020517          	auipc	a0,0x20
    80002674:	57850513          	addi	a0,a0,1400 # 80022be8 <__func__.2+0x380>
    80002678:	5f81e0ef          	jal	80020c70 <printf>
    8000267c:	4511                	li	a0,4
    8000267e:	c5afe0ef          	jal	80000ad8 <goto_priv>
    80002682:	d27fe0ef          	jal	800013a8 <reset_state>
}
    80002686:	70e2                	ld	ra,56(sp)
    80002688:	7442                	ld	s0,48(sp)
    8000268a:	7902                	ld	s2,32(sp)
    8000268c:	69e2                	ld	s3,24(sp)
    8000268e:	8526                	mv	a0,s1
    80002690:	74a2                	ld	s1,40(sp)
    80002692:	6121                	addi	sp,sp,64
    80002694:	8082                	ret
    TEST_ASSERT(
    80002696:	00043717          	auipc	a4,0x43
    8000269a:	97e72703          	lw	a4,-1666(a4) # 80045014 <excpt+0x4>
    8000269e:	4789                	li	a5,2
    800026a0:	fcf717e3          	bne	a4,a5,8000266e <two_stage_translation_1+0x3dc>
    800026a4:	00043797          	auipc	a5,0x43
    800026a8:	99c7c783          	lbu	a5,-1636(a5) # 80045040 <excpt+0x30>
    TEST_END();
    800026ac:	00020597          	auipc	a1,0x20
    800026b0:	48458593          	addi	a1,a1,1156 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT(
    800026b4:	dfd5                	beqz	a5,80002670 <two_stage_translation_1+0x3de>
    800026b6:	4481                	li	s1,0
    TEST_END();
    800026b8:	00020597          	auipc	a1,0x20
    800026bc:	48858593          	addi	a1,a1,1160 # 80022b40 <__func__.2+0x2d8>
    800026c0:	bf45                	j	80002670 <two_stage_translation_1+0x3de>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800026c2:	47c5                	li	a5,17
    800026c4:	1cf48b63          	beq	s1,a5,8000289a <two_stage_translation_1+0x608>
    800026c8:	00020597          	auipc	a1,0x20
    800026cc:	47858593          	addi	a1,a1,1144 # 80022b40 <__func__.2+0x2d8>
    800026d0:	00020517          	auipc	a0,0x20
    800026d4:	4b050513          	addi	a0,a0,1200 # 80022b80 <__func__.2+0x318>
    800026d8:	5981e0ef          	jal	80020c70 <printf>
    800026dc:	00020517          	auipc	a0,0x20
    800026e0:	4ac50513          	addi	a0,a0,1196 # 80022b88 <__func__.2+0x320>
    800026e4:	58c1e0ef          	jal	80020c70 <printf>
    800026e8:	02900513          	li	a0,41
    800026ec:	4151d0ef          	jal	80020300 <putchar>
    800026f0:	4529                	li	a0,10
    800026f2:	40f1d0ef          	jal	80020300 <putchar>
    800026f6:	cc040ae3          	beqz	s0,800023ca <two_stage_translation_1+0x138>
    800026fa:	14bd                	addi	s1,s1,-17
    800026fc:	0014b413          	seqz	s0,s1
    80002700:	b1f1                	j	800023cc <two_stage_translation_1+0x13a>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002702:	03240e63          	beq	s0,s2,8000273e <two_stage_translation_1+0x4ac>
    80002706:	00020597          	auipc	a1,0x20
    8000270a:	43a58593          	addi	a1,a1,1082 # 80022b40 <__func__.2+0x2d8>
    8000270e:	00020517          	auipc	a0,0x20
    80002712:	47250513          	addi	a0,a0,1138 # 80022b80 <__func__.2+0x318>
    80002716:	55a1e0ef          	jal	80020c70 <printf>
    8000271a:	00020517          	auipc	a0,0x20
    8000271e:	46e50513          	addi	a0,a0,1134 # 80022b88 <__func__.2+0x320>
    80002722:	54e1e0ef          	jal	80020c70 <printf>
    80002726:	02900513          	li	a0,41
    8000272a:	3d71d0ef          	jal	80020300 <putchar>
    8000272e:	4529                	li	a0,10
    80002730:	3d11d0ef          	jal	80020300 <putchar>
    80002734:	fde40413          	addi	s0,s0,-34
    80002738:	00143413          	seqz	s0,s0
    8000273c:	b909                	j	8000234e <two_stage_translation_1+0xbc>
    8000273e:	00020597          	auipc	a1,0x20
    80002742:	3f258593          	addi	a1,a1,1010 # 80022b30 <__func__.2+0x2c8>
    80002746:	00020517          	auipc	a0,0x20
    8000274a:	43a50513          	addi	a0,a0,1082 # 80022b80 <__func__.2+0x318>
    8000274e:	5221e0ef          	jal	80020c70 <printf>
    80002752:	4529                	li	a0,10
    80002754:	3ad1d0ef          	jal	80020300 <putchar>
    80002758:	bff1                	j	80002734 <two_stage_translation_1+0x4a2>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000275a:	02200793          	li	a5,34
    8000275e:	10f48e63          	beq	s1,a5,8000287a <two_stage_translation_1+0x5e8>
    80002762:	00020597          	auipc	a1,0x20
    80002766:	3de58593          	addi	a1,a1,990 # 80022b40 <__func__.2+0x2d8>
    8000276a:	00020517          	auipc	a0,0x20
    8000276e:	41650513          	addi	a0,a0,1046 # 80022b80 <__func__.2+0x318>
    80002772:	4fe1e0ef          	jal	80020c70 <printf>
    80002776:	00020517          	auipc	a0,0x20
    8000277a:	41250513          	addi	a0,a0,1042 # 80022b88 <__func__.2+0x320>
    8000277e:	4f21e0ef          	jal	80020c70 <printf>
    80002782:	02900513          	li	a0,41
    80002786:	37b1d0ef          	jal	80020300 <putchar>
    8000278a:	4529                	li	a0,10
    8000278c:	3751d0ef          	jal	80020300 <putchar>
    80002790:	ca0403e3          	beqz	s0,80002436 <two_stage_translation_1+0x1a4>
    80002794:	fde48493          	addi	s1,s1,-34
    80002798:	0014b493          	seqz	s1,s1
    8000279c:	b971                	j	80002438 <two_stage_translation_1+0x1a6>
    TEST_ASSERT(
    8000279e:	7418                	ld	a4,40(s0)
    800027a0:	400197b7          	lui	a5,0x40019
    800027a4:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800027a8:	d0f71fe3          	bne	a4,a5,800024c6 <two_stage_translation_1+0x234>
    800027ac:	00043717          	auipc	a4,0x43
    800027b0:	86872703          	lw	a4,-1944(a4) # 80045014 <excpt+0x4>
    800027b4:	478d                	li	a5,3
    800027b6:	d0f718e3          	bne	a4,a5,800024c6 <two_stage_translation_1+0x234>
    800027ba:	00043797          	auipc	a5,0x43
    800027be:	8867c783          	lbu	a5,-1914(a5) # 80045040 <excpt+0x30>
    800027c2:	d00782e3          	beqz	a5,800024c6 <two_stage_translation_1+0x234>
    800027c6:	00043797          	auipc	a5,0x43
    800027ca:	87b7c783          	lbu	a5,-1925(a5) # 80045041 <excpt+0x31>
    800027ce:	d00796e3          	bnez	a5,800024da <two_stage_translation_1+0x248>
    800027d2:	b9d5                	j	800024c6 <two_stage_translation_1+0x234>
    TEST_ASSERT(
    800027d4:	7418                	ld	a4,40(s0)
    800027d6:	400197b7          	lui	a5,0x40019
    800027da:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800027de:	d8f71be3          	bne	a4,a5,80002574 <two_stage_translation_1+0x2e2>
    800027e2:	00043717          	auipc	a4,0x43
    800027e6:	83272703          	lw	a4,-1998(a4) # 80045014 <excpt+0x4>
    800027ea:	4791                	li	a5,4
    800027ec:	d8f714e3          	bne	a4,a5,80002574 <two_stage_translation_1+0x2e2>
    800027f0:	00043797          	auipc	a5,0x43
    800027f4:	8507c783          	lbu	a5,-1968(a5) # 80045040 <excpt+0x30>
    800027f8:	d6078ee3          	beqz	a5,80002574 <two_stage_translation_1+0x2e2>
    800027fc:	00043797          	auipc	a5,0x43
    80002800:	8457c783          	lbu	a5,-1979(a5) # 80045041 <excpt+0x31>
    80002804:	d80792e3          	bnez	a5,80002588 <two_stage_translation_1+0x2f6>
    80002808:	b3b5                	j	80002574 <two_stage_translation_1+0x2e2>
    TEST_ASSERT(
    8000280a:	00043717          	auipc	a4,0x43
    8000280e:	80a72703          	lw	a4,-2038(a4) # 80045014 <excpt+0x4>
    80002812:	4789                	li	a5,2
    80002814:	e2f712e3          	bne	a4,a5,80002638 <two_stage_translation_1+0x3a6>
    80002818:	00043797          	auipc	a5,0x43
    8000281c:	8287c783          	lbu	a5,-2008(a5) # 80045040 <excpt+0x30>
    80002820:	e20786e3          	beqz	a5,8000264c <two_stage_translation_1+0x3ba>
    80002824:	bd11                	j	80002638 <two_stage_translation_1+0x3a6>
    TEST_ASSERT(
    80002826:	7418                	ld	a4,40(s0)
    80002828:	400197b7          	lui	a5,0x40019
    8000282c:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002830:	d6f71ae3          	bne	a4,a5,800025a4 <two_stage_translation_1+0x312>
    80002834:	00042717          	auipc	a4,0x42
    80002838:	7e072703          	lw	a4,2016(a4) # 80045014 <excpt+0x4>
    8000283c:	4791                	li	a5,4
    8000283e:	d6f713e3          	bne	a4,a5,800025a4 <two_stage_translation_1+0x312>
    80002842:	03045483          	lhu	s1,48(s0)
    80002846:	eff48493          	addi	s1,s1,-257
    8000284a:	0014b493          	seqz	s1,s1
    8000284e:	bb99                	j	800025a4 <two_stage_translation_1+0x312>
    TEST_ASSERT(
    80002850:	7418                	ld	a4,40(s0)
    80002852:	400197b7          	lui	a5,0x40019
    80002856:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000285a:	c8f71ee3          	bne	a4,a5,800024f6 <two_stage_translation_1+0x264>
    8000285e:	00042717          	auipc	a4,0x42
    80002862:	7b672703          	lw	a4,1974(a4) # 80045014 <excpt+0x4>
    80002866:	478d                	li	a5,3
    80002868:	c8f717e3          	bne	a4,a5,800024f6 <two_stage_translation_1+0x264>
    8000286c:	03045483          	lhu	s1,48(s0)
    80002870:	eff48493          	addi	s1,s1,-257
    80002874:	0014b493          	seqz	s1,s1
    80002878:	b9bd                	j	800024f6 <two_stage_translation_1+0x264>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000287a:	00020597          	auipc	a1,0x20
    8000287e:	2b658593          	addi	a1,a1,694 # 80022b30 <__func__.2+0x2c8>
    80002882:	00020517          	auipc	a0,0x20
    80002886:	2fe50513          	addi	a0,a0,766 # 80022b80 <__func__.2+0x318>
    8000288a:	3e61e0ef          	jal	80020c70 <printf>
    8000288e:	4529                	li	a0,10
    80002890:	2711d0ef          	jal	80020300 <putchar>
    80002894:	ba0401e3          	beqz	s0,80002436 <two_stage_translation_1+0x1a4>
    80002898:	bdf5                	j	80002794 <two_stage_translation_1+0x502>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000289a:	00020597          	auipc	a1,0x20
    8000289e:	29658593          	addi	a1,a1,662 # 80022b30 <__func__.2+0x2c8>
    800028a2:	00020517          	auipc	a0,0x20
    800028a6:	2de50513          	addi	a0,a0,734 # 80022b80 <__func__.2+0x318>
    800028aa:	3c61e0ef          	jal	80020c70 <printf>
    800028ae:	4529                	li	a0,10
    800028b0:	2511d0ef          	jal	80020300 <putchar>
    800028b4:	b0040be3          	beqz	s0,800023ca <two_stage_translation_1+0x138>
    800028b8:	b589                	j	800026fa <two_stage_translation_1+0x468>
    TEST_ASSERT(
    800028ba:	7418                	ld	a4,40(s0)
    800028bc:	400197b7          	lui	a5,0x40019
    800028c0:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800028c4:	bef712e3          	bne	a4,a5,800024a8 <two_stage_translation_1+0x216>
    800028c8:	00042717          	auipc	a4,0x42
    800028cc:	74c72703          	lw	a4,1868(a4) # 80045014 <excpt+0x4>
    800028d0:	478d                	li	a5,3
    800028d2:	bcf71be3          	bne	a4,a5,800024a8 <two_stage_translation_1+0x216>
    800028d6:	03045703          	lhu	a4,48(s0)
    800028da:	10100793          	li	a5,257
    800028de:	00020597          	auipc	a1,0x20
    800028e2:	25258593          	addi	a1,a1,594 # 80022b30 <__func__.2+0x2c8>
    800028e6:	bcf701e3          	beq	a4,a5,800024a8 <two_stage_translation_1+0x216>
    800028ea:	00020597          	auipc	a1,0x20
    800028ee:	25658593          	addi	a1,a1,598 # 80022b40 <__func__.2+0x2d8>
    800028f2:	be5d                	j	800024a8 <two_stage_translation_1+0x216>
    TEST_ASSERT(
    800028f4:	00042717          	auipc	a4,0x42
    800028f8:	72072703          	lw	a4,1824(a4) # 80045014 <excpt+0x4>
    800028fc:	4789                	li	a5,2
    800028fe:	d0f71ee3          	bne	a4,a5,8000261a <two_stage_translation_1+0x388>
    80002902:	00042797          	auipc	a5,0x42
    80002906:	73e7c783          	lbu	a5,1854(a5) # 80045040 <excpt+0x30>
    8000290a:	00020597          	auipc	a1,0x20
    8000290e:	22658593          	addi	a1,a1,550 # 80022b30 <__func__.2+0x2c8>
    80002912:	d00784e3          	beqz	a5,8000261a <two_stage_translation_1+0x388>
    80002916:	00020597          	auipc	a1,0x20
    8000291a:	22a58593          	addi	a1,a1,554 # 80022b40 <__func__.2+0x2d8>
    8000291e:	b9f5                	j	8000261a <two_stage_translation_1+0x388>
    TEST_ASSERT(
    80002920:	7418                	ld	a4,40(s0)
    80002922:	400197b7          	lui	a5,0x40019
    80002926:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000292a:	c2f716e3          	bne	a4,a5,80002556 <two_stage_translation_1+0x2c4>
    8000292e:	00042717          	auipc	a4,0x42
    80002932:	6e672703          	lw	a4,1766(a4) # 80045014 <excpt+0x4>
    80002936:	4791                	li	a5,4
    80002938:	c0f71fe3          	bne	a4,a5,80002556 <two_stage_translation_1+0x2c4>
    8000293c:	03045703          	lhu	a4,48(s0)
    80002940:	10100793          	li	a5,257
    80002944:	00020597          	auipc	a1,0x20
    80002948:	1ec58593          	addi	a1,a1,492 # 80022b30 <__func__.2+0x2c8>
    8000294c:	c0f705e3          	beq	a4,a5,80002556 <two_stage_translation_1+0x2c4>
    80002950:	00020597          	auipc	a1,0x20
    80002954:	1f058593          	addi	a1,a1,496 # 80022b40 <__func__.2+0x2d8>
    80002958:	befd                	j	80002556 <two_stage_translation_1+0x2c4>

000000008000295a <two_stage_translation_2>:

bool two_stage_translation_2(){
    8000295a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000295c:	0001f597          	auipc	a1,0x1f
    80002960:	88458593          	addi	a1,a1,-1916 # 800211e0 <__func__.17>
    80002964:	00020517          	auipc	a0,0x20
    80002968:	1ec50513          	addi	a0,a0,492 # 80022b50 <__func__.2+0x2e8>
bool two_stage_translation_2(){
    8000296c:	f406                	sd	ra,40(sp)
    8000296e:	f022                	sd	s0,32(sp)
    80002970:	ec26                	sd	s1,24(sp)
    80002972:	e84a                	sd	s2,16(sp)
    80002974:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002976:	2fa1e0ef          	jal	80020c70 <printf>
    8000297a:	4529                	li	a0,10
    8000297c:	1851d0ef          	jal	80020300 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002980:	2201b737          	lui	a4,0x2201b
    80002984:	000887b7          	lui	a5,0x88
    80002988:	070a                	slli	a4,a4,0x2
    8000298a:	44c5                	li	s1,17
    8000298c:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002990:	e304                	sd	s1,0(a4)
    80002992:	07b2                	slli	a5,a5,0xc
    80002994:	02200913          	li	s2,34
    80002998:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000299c:	450d                	li	a0,3
    8000299e:	93afe0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800029a2:	c3ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800029a6:	e7dfd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    800029aa:	4509                	li	a0,2
    800029ac:	92cfe0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800029b0:	d01fd0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    800029b4:	4001b737          	lui	a4,0x4001b
    800029b8:	070a                	slli	a4,a4,0x2
    800029ba:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800029be:	001007b7          	lui	a5,0x100
    800029c2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800029c6:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800029c8:	00020617          	auipc	a2,0x20
    800029cc:	5d060613          	addi	a2,a2,1488 # 80022f98 <__func__.2+0x730>
    800029d0:	08200593          	li	a1,130
    800029d4:	00020517          	auipc	a0,0x20
    800029d8:	19450513          	addi	a0,a0,404 # 80022b68 <__func__.2+0x300>
    800029dc:	6380                	ld	s0,0(a5)
    800029de:	2921e0ef          	jal	80020c70 <printf>
    800029e2:	0c998b63          	beq	s3,s1,80002ab8 <two_stage_translation_2+0x15e>
    800029e6:	00020597          	auipc	a1,0x20
    800029ea:	15a58593          	addi	a1,a1,346 # 80022b40 <__func__.2+0x2d8>
    800029ee:	00020517          	auipc	a0,0x20
    800029f2:	19250513          	addi	a0,a0,402 # 80022b80 <__func__.2+0x318>
    800029f6:	27a1e0ef          	jal	80020c70 <printf>
    800029fa:	00020517          	auipc	a0,0x20
    800029fe:	18e50513          	addi	a0,a0,398 # 80022b88 <__func__.2+0x320>
    80002a02:	26e1e0ef          	jal	80020c70 <printf>
    80002a06:	02900513          	li	a0,41
    80002a0a:	0f71d0ef          	jal	80020300 <putchar>
    80002a0e:	4529                	li	a0,10
    80002a10:	0f11d0ef          	jal	80020300 <putchar>
    80002a14:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002a16:	450d                	li	a0,3
    80002a18:	8c0fe0ef          	jal	80000ad8 <goto_priv>
    hpt_switch();
    80002a1c:	faffd0ef          	jal	800009ca <hpt_switch>
    goto_priv(PRIV_VS);
    80002a20:	4509                	li	a0,2
    80002a22:	8b6fe0ef          	jal	80000ad8 <goto_priv>
    80002a26:	001007b7          	lui	a5,0x100
    80002a2a:	4001b737          	lui	a4,0x4001b
    80002a2e:	070a                	slli	a4,a4,0x2
    80002a30:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002a34:	07b2                	slli	a5,a5,0xc
    80002a36:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002a38:	00020617          	auipc	a2,0x20
    80002a3c:	69060613          	addi	a2,a2,1680 # 800230c8 <__func__.2+0x860>
    80002a40:	08200593          	li	a1,130
    80002a44:	00020517          	auipc	a0,0x20
    80002a48:	12450513          	addi	a0,a0,292 # 80022b68 <__func__.2+0x300>
    80002a4c:	0007b903          	ld	s2,0(a5)
    80002a50:	2201e0ef          	jal	80020c70 <printf>
    80002a54:	47c5                	li	a5,17
    80002a56:	0af48d63          	beq	s1,a5,80002b10 <two_stage_translation_2+0x1b6>
    80002a5a:	00020597          	auipc	a1,0x20
    80002a5e:	0e658593          	addi	a1,a1,230 # 80022b40 <__func__.2+0x2d8>
    80002a62:	00020517          	auipc	a0,0x20
    80002a66:	11e50513          	addi	a0,a0,286 # 80022b80 <__func__.2+0x318>
    80002a6a:	2061e0ef          	jal	80020c70 <printf>
    80002a6e:	00020517          	auipc	a0,0x20
    80002a72:	11a50513          	addi	a0,a0,282 # 80022b88 <__func__.2+0x320>
    80002a76:	1fa1e0ef          	jal	80020c70 <printf>
    80002a7a:	02900513          	li	a0,41
    80002a7e:	0831d0ef          	jal	80020300 <putchar>
    80002a82:	4529                	li	a0,10
    80002a84:	07d1d0ef          	jal	80020300 <putchar>
    80002a88:	4401                	li	s0,0


    TEST_END();
    80002a8a:	00020597          	auipc	a1,0x20
    80002a8e:	0b658593          	addi	a1,a1,182 # 80022b40 <__func__.2+0x2d8>
    80002a92:	00020517          	auipc	a0,0x20
    80002a96:	15650513          	addi	a0,a0,342 # 80022be8 <__func__.2+0x380>
    80002a9a:	1d61e0ef          	jal	80020c70 <printf>
    80002a9e:	4511                	li	a0,4
    80002aa0:	838fe0ef          	jal	80000ad8 <goto_priv>
    80002aa4:	905fe0ef          	jal	800013a8 <reset_state>
}
    80002aa8:	70a2                	ld	ra,40(sp)
    80002aaa:	8522                	mv	a0,s0
    80002aac:	7402                	ld	s0,32(sp)
    80002aae:	64e2                	ld	s1,24(sp)
    80002ab0:	6942                	ld	s2,16(sp)
    80002ab2:	69a2                	ld	s3,8(sp)
    80002ab4:	6145                	addi	sp,sp,48
    80002ab6:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002ab8:	03240e63          	beq	s0,s2,80002af4 <two_stage_translation_2+0x19a>
    80002abc:	00020597          	auipc	a1,0x20
    80002ac0:	08458593          	addi	a1,a1,132 # 80022b40 <__func__.2+0x2d8>
    80002ac4:	00020517          	auipc	a0,0x20
    80002ac8:	0bc50513          	addi	a0,a0,188 # 80022b80 <__func__.2+0x318>
    80002acc:	1a41e0ef          	jal	80020c70 <printf>
    80002ad0:	00020517          	auipc	a0,0x20
    80002ad4:	0b850513          	addi	a0,a0,184 # 80022b88 <__func__.2+0x320>
    80002ad8:	1981e0ef          	jal	80020c70 <printf>
    80002adc:	02900513          	li	a0,41
    80002ae0:	0211d0ef          	jal	80020300 <putchar>
    80002ae4:	4529                	li	a0,10
    80002ae6:	01b1d0ef          	jal	80020300 <putchar>
    80002aea:	fde40413          	addi	s0,s0,-34
    80002aee:	00143413          	seqz	s0,s0
    80002af2:	b715                	j	80002a16 <two_stage_translation_2+0xbc>
    80002af4:	00020597          	auipc	a1,0x20
    80002af8:	03c58593          	addi	a1,a1,60 # 80022b30 <__func__.2+0x2c8>
    80002afc:	00020517          	auipc	a0,0x20
    80002b00:	08450513          	addi	a0,a0,132 # 80022b80 <__func__.2+0x318>
    80002b04:	16c1e0ef          	jal	80020c70 <printf>
    80002b08:	4529                	li	a0,10
    80002b0a:	7f61d0ef          	jal	80020300 <putchar>
    80002b0e:	bff1                	j	80002aea <two_stage_translation_2+0x190>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002b10:	02200793          	li	a5,34
    80002b14:	f4f913e3          	bne	s2,a5,80002a5a <two_stage_translation_2+0x100>
    80002b18:	00020597          	auipc	a1,0x20
    80002b1c:	01858593          	addi	a1,a1,24 # 80022b30 <__func__.2+0x2c8>
    80002b20:	00020517          	auipc	a0,0x20
    80002b24:	06050513          	addi	a0,a0,96 # 80022b80 <__func__.2+0x318>
    80002b28:	1481e0ef          	jal	80020c70 <printf>
    80002b2c:	4529                	li	a0,10
    80002b2e:	7d21d0ef          	jal	80020300 <putchar>
    80002b32:	d839                	beqz	s0,80002a88 <two_stage_translation_2+0x12e>
    80002b34:	4405                	li	s0,1
    TEST_END();
    80002b36:	00020597          	auipc	a1,0x20
    80002b3a:	ffa58593          	addi	a1,a1,-6 # 80022b30 <__func__.2+0x2c8>
    80002b3e:	bf91                	j	80002a92 <two_stage_translation_2+0x138>

0000000080002b40 <two_stage_translation_3>:

bool two_stage_translation_3(){
    80002b40:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002b42:	0001e597          	auipc	a1,0x1e
    80002b46:	6b658593          	addi	a1,a1,1718 # 800211f8 <__func__.16>
    80002b4a:	00020517          	auipc	a0,0x20
    80002b4e:	00650513          	addi	a0,a0,6 # 80022b50 <__func__.2+0x2e8>
bool two_stage_translation_3(){
    80002b52:	f406                	sd	ra,40(sp)
    80002b54:	f022                	sd	s0,32(sp)
    80002b56:	ec26                	sd	s1,24(sp)
    80002b58:	e84a                	sd	s2,16(sp)
    80002b5a:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002b5c:	1141e0ef          	jal	80020c70 <printf>
    80002b60:	4529                	li	a0,10
    80002b62:	79e1d0ef          	jal	80020300 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002b66:	2201b737          	lui	a4,0x2201b
    80002b6a:	000887b7          	lui	a5,0x88
    80002b6e:	070a                	slli	a4,a4,0x2
    80002b70:	44c5                	li	s1,17
    80002b72:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002b76:	e304                	sd	s1,0(a4)
    80002b78:	07b2                	slli	a5,a5,0xc
    80002b7a:	02200913          	li	s2,34
    80002b7e:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002b82:	450d                	li	a0,3
    80002b84:	f55fd0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80002b88:	a59fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002b8c:	c97fd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    80002b90:	4509                	li	a0,2
    80002b92:	f47fd0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80002b96:	b1bfd0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002b9a:	4001b737          	lui	a4,0x4001b
    80002b9e:	070a                	slli	a4,a4,0x2
    80002ba0:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002ba4:	001007b7          	lui	a5,0x100
    80002ba8:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002bac:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002bae:	00020617          	auipc	a2,0x20
    80002bb2:	3ea60613          	addi	a2,a2,1002 # 80022f98 <__func__.2+0x730>
    80002bb6:	08200593          	li	a1,130
    80002bba:	00020517          	auipc	a0,0x20
    80002bbe:	fae50513          	addi	a0,a0,-82 # 80022b68 <__func__.2+0x300>
    80002bc2:	6380                	ld	s0,0(a5)
    80002bc4:	0ac1e0ef          	jal	80020c70 <printf>
    80002bc8:	0c998863          	beq	s3,s1,80002c98 <two_stage_translation_3+0x158>
    80002bcc:	00020597          	auipc	a1,0x20
    80002bd0:	f7458593          	addi	a1,a1,-140 # 80022b40 <__func__.2+0x2d8>
    80002bd4:	00020517          	auipc	a0,0x20
    80002bd8:	fac50513          	addi	a0,a0,-84 # 80022b80 <__func__.2+0x318>
    80002bdc:	0941e0ef          	jal	80020c70 <printf>
    80002be0:	00020517          	auipc	a0,0x20
    80002be4:	fa850513          	addi	a0,a0,-88 # 80022b88 <__func__.2+0x320>
    80002be8:	0881e0ef          	jal	80020c70 <printf>
    80002bec:	02900513          	li	a0,41
    80002bf0:	7101d0ef          	jal	80020300 <putchar>
    80002bf4:	4529                	li	a0,10
    80002bf6:	70a1d0ef          	jal	80020300 <putchar>
    80002bfa:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80002bfc:	4509                	li	a0,2
    80002bfe:	edbfd0ef          	jal	80000ad8 <goto_priv>

    vspt_switch();
    80002c02:	daffd0ef          	jal	800009b0 <vspt_switch>
    80002c06:	001007b7          	lui	a5,0x100
    80002c0a:	4001b737          	lui	a4,0x4001b
    80002c0e:	070a                	slli	a4,a4,0x2
    80002c10:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002c14:	07b2                	slli	a5,a5,0xc
    80002c16:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002c18:	00020617          	auipc	a2,0x20
    80002c1c:	50060613          	addi	a2,a2,1280 # 80023118 <__func__.2+0x8b0>
    80002c20:	08200593          	li	a1,130
    80002c24:	00020517          	auipc	a0,0x20
    80002c28:	f4450513          	addi	a0,a0,-188 # 80022b68 <__func__.2+0x300>
    80002c2c:	0007b903          	ld	s2,0(a5)
    80002c30:	0401e0ef          	jal	80020c70 <printf>
    80002c34:	47c5                	li	a5,17
    80002c36:	0af48d63          	beq	s1,a5,80002cf0 <two_stage_translation_3+0x1b0>
    80002c3a:	00020597          	auipc	a1,0x20
    80002c3e:	f0658593          	addi	a1,a1,-250 # 80022b40 <__func__.2+0x2d8>
    80002c42:	00020517          	auipc	a0,0x20
    80002c46:	f3e50513          	addi	a0,a0,-194 # 80022b80 <__func__.2+0x318>
    80002c4a:	0261e0ef          	jal	80020c70 <printf>
    80002c4e:	00020517          	auipc	a0,0x20
    80002c52:	f3a50513          	addi	a0,a0,-198 # 80022b88 <__func__.2+0x320>
    80002c56:	01a1e0ef          	jal	80020c70 <printf>
    80002c5a:	02900513          	li	a0,41
    80002c5e:	6a21d0ef          	jal	80020300 <putchar>
    80002c62:	4529                	li	a0,10
    80002c64:	69c1d0ef          	jal	80020300 <putchar>
    80002c68:	4401                	li	s0,0

    TEST_END();
    80002c6a:	00020597          	auipc	a1,0x20
    80002c6e:	ed658593          	addi	a1,a1,-298 # 80022b40 <__func__.2+0x2d8>
    80002c72:	00020517          	auipc	a0,0x20
    80002c76:	f7650513          	addi	a0,a0,-138 # 80022be8 <__func__.2+0x380>
    80002c7a:	7f71d0ef          	jal	80020c70 <printf>
    80002c7e:	4511                	li	a0,4
    80002c80:	e59fd0ef          	jal	80000ad8 <goto_priv>
    80002c84:	f24fe0ef          	jal	800013a8 <reset_state>
}
    80002c88:	70a2                	ld	ra,40(sp)
    80002c8a:	8522                	mv	a0,s0
    80002c8c:	7402                	ld	s0,32(sp)
    80002c8e:	64e2                	ld	s1,24(sp)
    80002c90:	6942                	ld	s2,16(sp)
    80002c92:	69a2                	ld	s3,8(sp)
    80002c94:	6145                	addi	sp,sp,48
    80002c96:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002c98:	03240e63          	beq	s0,s2,80002cd4 <two_stage_translation_3+0x194>
    80002c9c:	00020597          	auipc	a1,0x20
    80002ca0:	ea458593          	addi	a1,a1,-348 # 80022b40 <__func__.2+0x2d8>
    80002ca4:	00020517          	auipc	a0,0x20
    80002ca8:	edc50513          	addi	a0,a0,-292 # 80022b80 <__func__.2+0x318>
    80002cac:	7c51d0ef          	jal	80020c70 <printf>
    80002cb0:	00020517          	auipc	a0,0x20
    80002cb4:	ed850513          	addi	a0,a0,-296 # 80022b88 <__func__.2+0x320>
    80002cb8:	7b91d0ef          	jal	80020c70 <printf>
    80002cbc:	02900513          	li	a0,41
    80002cc0:	6401d0ef          	jal	80020300 <putchar>
    80002cc4:	4529                	li	a0,10
    80002cc6:	63a1d0ef          	jal	80020300 <putchar>
    80002cca:	fde40413          	addi	s0,s0,-34
    80002cce:	00143413          	seqz	s0,s0
    80002cd2:	b72d                	j	80002bfc <two_stage_translation_3+0xbc>
    80002cd4:	00020597          	auipc	a1,0x20
    80002cd8:	e5c58593          	addi	a1,a1,-420 # 80022b30 <__func__.2+0x2c8>
    80002cdc:	00020517          	auipc	a0,0x20
    80002ce0:	ea450513          	addi	a0,a0,-348 # 80022b80 <__func__.2+0x318>
    80002ce4:	78d1d0ef          	jal	80020c70 <printf>
    80002ce8:	4529                	li	a0,10
    80002cea:	6161d0ef          	jal	80020300 <putchar>
    80002cee:	bff1                	j	80002cca <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002cf0:	02200793          	li	a5,34
    80002cf4:	f4f913e3          	bne	s2,a5,80002c3a <two_stage_translation_3+0xfa>
    80002cf8:	00020597          	auipc	a1,0x20
    80002cfc:	e3858593          	addi	a1,a1,-456 # 80022b30 <__func__.2+0x2c8>
    80002d00:	00020517          	auipc	a0,0x20
    80002d04:	e8050513          	addi	a0,a0,-384 # 80022b80 <__func__.2+0x318>
    80002d08:	7691d0ef          	jal	80020c70 <printf>
    80002d0c:	4529                	li	a0,10
    80002d0e:	5f21d0ef          	jal	80020300 <putchar>
    80002d12:	d839                	beqz	s0,80002c68 <two_stage_translation_3+0x128>
    80002d14:	4405                	li	s0,1
    TEST_END();
    80002d16:	00020597          	auipc	a1,0x20
    80002d1a:	e1a58593          	addi	a1,a1,-486 # 80022b30 <__func__.2+0x2c8>
    80002d1e:	bf91                	j	80002c72 <two_stage_translation_3+0x132>

0000000080002d20 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80002d20:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80002d22:	0001e597          	auipc	a1,0x1e
    80002d26:	4ee58593          	addi	a1,a1,1262 # 80021210 <__func__.15>
    80002d2a:	00020517          	auipc	a0,0x20
    80002d2e:	e2650513          	addi	a0,a0,-474 # 80022b50 <__func__.2+0x2e8>
bool second_stage_only_translation(){
    80002d32:	f406                	sd	ra,40(sp)
    80002d34:	ec26                	sd	s1,24(sp)
    80002d36:	e84a                	sd	s2,16(sp)
    80002d38:	f022                	sd	s0,32(sp)
    80002d3a:	e44e                	sd	s3,8(sp)
    80002d3c:	e052                	sd	s4,0(sp)
    TEST_START();
    80002d3e:	7331d0ef          	jal	80020c70 <printf>
    80002d42:	4529                	li	a0,10
    80002d44:	5bc1d0ef          	jal	80020300 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002d48:	2201b737          	lui	a4,0x2201b
    80002d4c:	000887b7          	lui	a5,0x88
    80002d50:	070a                	slli	a4,a4,0x2
    80002d52:	44c5                	li	s1,17
    80002d54:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002d58:	e304                	sd	s1,0(a4)
    80002d5a:	07b2                	slli	a5,a5,0xc
    80002d5c:	02200913          	li	s2,34
    80002d60:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80002d64:	00a007b7          	lui	a5,0xa00
    80002d68:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002d6c:	450d                	li	a0,3
    80002d6e:	d6bfd0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80002d72:	86ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002d76:	aadfd0ef          	jal	80000822 <hpt_init>
    
    goto_priv(PRIV_VS);
    80002d7a:	4509                	li	a0,2
    80002d7c:	d5dfd0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002d80:	0330000f          	fence	rw,rw
    80002d84:	00042417          	auipc	s0,0x42
    80002d88:	28c40413          	addi	s0,s0,652 # 80045010 <excpt>
    80002d8c:	4785                	li	a5,1
    80002d8e:	00042717          	auipc	a4,0x42
    80002d92:	2a073d23          	sd	zero,698(a4) # 80045048 <excpt+0x38>
    80002d96:	00f41023          	sh	a5,0(s0)
    80002d9a:	0330000f          	fence	rw,rw
    return *((volatile uint64_t*) addr);
    80002d9e:	001007b7          	lui	a5,0x100
    80002da2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002da6:	4001b737          	lui	a4,0x4001b
    80002daa:	07b2                	slli	a5,a5,0xc
    80002dac:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002dae:	00020617          	auipc	a2,0x20
    80002db2:	1ea60613          	addi	a2,a2,490 # 80022f98 <__func__.2+0x730>
    80002db6:	08200593          	li	a1,130
    80002dba:	00020517          	auipc	a0,0x20
    80002dbe:	dae50513          	addi	a0,a0,-594 # 80022b68 <__func__.2+0x300>
    80002dc2:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002dc6:	0007ba03          	ld	s4,0(a5)
    80002dca:	6a71d0ef          	jal	80020c70 <printf>
    80002dce:	00042797          	auipc	a5,0x42
    80002dd2:	2437c783          	lbu	a5,579(a5) # 80045011 <excpt+0x1>
    80002dd6:	ef91                	bnez	a5,80002df2 <second_stage_only_translation+0xd2>
    80002dd8:	2e998163          	beq	s3,s1,800030ba <second_stage_only_translation+0x39a>
    80002ddc:	00020597          	auipc	a1,0x20
    80002de0:	d6458593          	addi	a1,a1,-668 # 80022b40 <__func__.2+0x2d8>
    80002de4:	00020517          	auipc	a0,0x20
    80002de8:	d9c50513          	addi	a0,a0,-612 # 80022b80 <__func__.2+0x318>
    80002dec:	6851d0ef          	jal	80020c70 <printf>
    80002df0:	a01d                	j	80002e16 <second_stage_only_translation+0xf6>
    80002df2:	00020597          	auipc	a1,0x20
    80002df6:	d4e58593          	addi	a1,a1,-690 # 80022b40 <__func__.2+0x2d8>
    80002dfa:	00020517          	auipc	a0,0x20
    80002dfe:	d8650513          	addi	a0,a0,-634 # 80022b80 <__func__.2+0x318>
    80002e02:	66f1d0ef          	jal	80020c70 <printf>
    80002e06:	00042797          	auipc	a5,0x42
    80002e0a:	20b7c783          	lbu	a5,523(a5) # 80045011 <excpt+0x1>
    80002e0e:	2e079a63          	bnez	a5,80003102 <second_stage_only_translation+0x3e2>
    80002e12:	36998a63          	beq	s3,s1,80003186 <second_stage_only_translation+0x466>
    80002e16:	00020517          	auipc	a0,0x20
    80002e1a:	d7250513          	addi	a0,a0,-654 # 80022b88 <__func__.2+0x320>
    80002e1e:	6531d0ef          	jal	80020c70 <printf>
    80002e22:	02900513          	li	a0,41
    80002e26:	4da1d0ef          	jal	80020300 <putchar>
    80002e2a:	4529                	li	a0,10
    80002e2c:	4d41d0ef          	jal	80020300 <putchar>
    80002e30:	4481                	li	s1,0

    goto_priv(PRIV_HS);
    80002e32:	450d                	li	a0,3
    80002e34:	ca5fd0ef          	jal	80000ad8 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80002e38:	b93fd0ef          	jal	800009ca <hpt_switch>
    asm volatile(
    80002e3c:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80002e40:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80002e44:	4509                	li	a0,2
    80002e46:	c93fd0ef          	jal	80000ad8 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80002e4a:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80002e4e:	0330000f          	fence	rw,rw
    80002e52:	4785                	li	a5,1
    80002e54:	00042717          	auipc	a4,0x42
    80002e58:	1e073a23          	sd	zero,500(a4) # 80045048 <excpt+0x38>
    80002e5c:	00f41023          	sh	a5,0(s0)
    80002e60:	0330000f          	fence	rw,rw
    80002e64:	001007b7          	lui	a5,0x100
    80002e68:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002e6c:	4001b737          	lui	a4,0x4001b
    80002e70:	07b2                	slli	a5,a5,0xc
    80002e72:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002e74:	00020617          	auipc	a2,0x20
    80002e78:	2f460613          	addi	a2,a2,756 # 80023168 <__func__.2+0x900>
    80002e7c:	08200593          	li	a1,130
    80002e80:	00020517          	auipc	a0,0x20
    80002e84:	ce850513          	addi	a0,a0,-792 # 80022b68 <__func__.2+0x300>
    80002e88:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002e8c:	0007b983          	ld	s3,0(a5)
    80002e90:	5e11d0ef          	jal	80020c70 <printf>
    80002e94:	00042797          	auipc	a5,0x42
    80002e98:	17d7c783          	lbu	a5,381(a5) # 80045011 <excpt+0x1>
    80002e9c:	1a079563          	bnez	a5,80003046 <second_stage_only_translation+0x326>
    80002ea0:	02200793          	li	a5,34
    80002ea4:	2af90d63          	beq	s2,a5,8000315e <second_stage_only_translation+0x43e>
    80002ea8:	00020597          	auipc	a1,0x20
    80002eac:	c9858593          	addi	a1,a1,-872 # 80022b40 <__func__.2+0x2d8>
    80002eb0:	00020517          	auipc	a0,0x20
    80002eb4:	cd050513          	addi	a0,a0,-816 # 80022b80 <__func__.2+0x318>
    80002eb8:	5b91d0ef          	jal	80020c70 <printf>
    80002ebc:	00020517          	auipc	a0,0x20
    80002ec0:	ccc50513          	addi	a0,a0,-820 # 80022b88 <__func__.2+0x320>
    80002ec4:	5ad1d0ef          	jal	80020c70 <printf>
    80002ec8:	02900513          	li	a0,41
    80002ecc:	4341d0ef          	jal	80020300 <putchar>
    80002ed0:	4529                	li	a0,10
    80002ed2:	42e1d0ef          	jal	80020300 <putchar>
    80002ed6:	c891                	beqz	s1,80002eea <second_stage_only_translation+0x1ca>
    80002ed8:	00042797          	auipc	a5,0x42
    80002edc:	1397c783          	lbu	a5,313(a5) # 80045011 <excpt+0x1>
    80002ee0:	e789                	bnez	a5,80002eea <second_stage_only_translation+0x1ca>
    80002ee2:	02200793          	li	a5,34
    80002ee6:	1af90263          	beq	s2,a5,8000308a <second_stage_only_translation+0x36a>
    80002eea:	4481                	li	s1,0

    TEST_SETUP_EXCEPT();
    80002eec:	0330000f          	fence	rw,rw
    80002ef0:	4785                	li	a5,1
    80002ef2:	00042717          	auipc	a4,0x42
    80002ef6:	14073b23          	sd	zero,342(a4) # 80045048 <excpt+0x38>
    80002efa:	00f41023          	sh	a5,0(s0)
    80002efe:	0330000f          	fence	rw,rw
    80002f02:	001007b7          	lui	a5,0x100
    80002f06:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002f0a:	07b2                	slli	a5,a5,0xc
    80002f0c:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    80002f0e:	08200593          	li	a1,130
    80002f12:	00020617          	auipc	a2,0x20
    80002f16:	27e60613          	addi	a2,a2,638 # 80023190 <__func__.2+0x928>
    80002f1a:	00020517          	auipc	a0,0x20
    80002f1e:	c4e50513          	addi	a0,a0,-946 # 80022b68 <__func__.2+0x300>
    80002f22:	54f1d0ef          	jal	80020c70 <printf>
    80002f26:	00042797          	auipc	a5,0x42
    80002f2a:	0eb7c783          	lbu	a5,235(a5) # 80045011 <excpt+0x1>
    80002f2e:	00020597          	auipc	a1,0x20
    80002f32:	c1258593          	addi	a1,a1,-1006 # 80022b40 <__func__.2+0x2d8>
    80002f36:	c789                	beqz	a5,80002f40 <second_stage_only_translation+0x220>
    80002f38:	6418                	ld	a4,8(s0)
    80002f3a:	47d5                	li	a5,21
    80002f3c:	20f70163          	beq	a4,a5,8000313e <second_stage_only_translation+0x41e>
    80002f40:	00020517          	auipc	a0,0x20
    80002f44:	c4050513          	addi	a0,a0,-960 # 80022b80 <__func__.2+0x318>
    80002f48:	5291d0ef          	jal	80020c70 <printf>
    80002f4c:	00042797          	auipc	a5,0x42
    80002f50:	0c57c783          	lbu	a5,197(a5) # 80045011 <excpt+0x1>
    80002f54:	c789                	beqz	a5,80002f5e <second_stage_only_translation+0x23e>
    80002f56:	6418                	ld	a4,8(s0)
    80002f58:	47d5                	li	a5,21
    80002f5a:	14f70863          	beq	a4,a5,800030aa <second_stage_only_translation+0x38a>
    80002f5e:	00020517          	auipc	a0,0x20
    80002f62:	c2a50513          	addi	a0,a0,-982 # 80022b88 <__func__.2+0x320>
    80002f66:	50b1d0ef          	jal	80020c70 <printf>
    80002f6a:	02900513          	li	a0,41
    80002f6e:	3921d0ef          	jal	80020300 <putchar>
    80002f72:	4529                	li	a0,10
    80002f74:	38c1d0ef          	jal	80020300 <putchar>
    80002f78:	c899                	beqz	s1,80002f8e <second_stage_only_translation+0x26e>
    80002f7a:	00042797          	auipc	a5,0x42
    80002f7e:	0977c783          	lbu	a5,151(a5) # 80045011 <excpt+0x1>
    80002f82:	4481                	li	s1,0
    80002f84:	c789                	beqz	a5,80002f8e <second_stage_only_translation+0x26e>
    80002f86:	6418                	ld	a4,8(s0)
    80002f88:	47d5                	li	a5,21
    80002f8a:	1af70263          	beq	a4,a5,8000312e <second_stage_only_translation+0x40e>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    80002f8e:	0330000f          	fence	rw,rw
    80002f92:	4785                	li	a5,1
    80002f94:	00042717          	auipc	a4,0x42
    80002f98:	0a073a23          	sd	zero,180(a4) # 80045048 <excpt+0x38>
    80002f9c:	00f41023          	sh	a5,0(s0)
    80002fa0:	0330000f          	fence	rw,rw
    80002fa4:	200007b7          	lui	a5,0x20000
    80002fa8:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    80002faa:	07b2                	slli	a5,a5,0xc
    80002fac:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80002fae:	08200593          	li	a1,130
    80002fb2:	00020617          	auipc	a2,0x20
    80002fb6:	20660613          	addi	a2,a2,518 # 800231b8 <__func__.2+0x950>
    80002fba:	00020517          	auipc	a0,0x20
    80002fbe:	bae50513          	addi	a0,a0,-1106 # 80022b68 <__func__.2+0x300>
    80002fc2:	4af1d0ef          	jal	80020c70 <printf>
    80002fc6:	00042797          	auipc	a5,0x42
    80002fca:	04b7c783          	lbu	a5,75(a5) # 80045011 <excpt+0x1>
    80002fce:	00020597          	auipc	a1,0x20
    80002fd2:	b7258593          	addi	a1,a1,-1166 # 80022b40 <__func__.2+0x2d8>
    80002fd6:	e789                	bnez	a5,80002fe0 <second_stage_only_translation+0x2c0>
    80002fd8:	00020597          	auipc	a1,0x20
    80002fdc:	b5858593          	addi	a1,a1,-1192 # 80022b30 <__func__.2+0x2c8>
    80002fe0:	00020517          	auipc	a0,0x20
    80002fe4:	ba050513          	addi	a0,a0,-1120 # 80022b80 <__func__.2+0x318>
    80002fe8:	4891d0ef          	jal	80020c70 <printf>
    80002fec:	00042797          	auipc	a5,0x42
    80002ff0:	0257c783          	lbu	a5,37(a5) # 80045011 <excpt+0x1>
    80002ff4:	e3c5                	bnez	a5,80003094 <second_stage_only_translation+0x374>
    80002ff6:	4529                	li	a0,10
    80002ff8:	3081d0ef          	jal	80020300 <putchar>
    80002ffc:	cc9d                	beqz	s1,8000303a <second_stage_only_translation+0x31a>
    80002ffe:	00042797          	auipc	a5,0x42
    80003002:	0137c783          	lbu	a5,19(a5) # 80045011 <excpt+0x1>
    80003006:	eb95                	bnez	a5,8000303a <second_stage_only_translation+0x31a>
    80003008:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    8000300a:	00020597          	auipc	a1,0x20
    8000300e:	b2658593          	addi	a1,a1,-1242 # 80022b30 <__func__.2+0x2c8>
    80003012:	00020517          	auipc	a0,0x20
    80003016:	bd650513          	addi	a0,a0,-1066 # 80022be8 <__func__.2+0x380>
    8000301a:	4571d0ef          	jal	80020c70 <printf>
    8000301e:	4511                	li	a0,4
    80003020:	ab9fd0ef          	jal	80000ad8 <goto_priv>
    80003024:	b84fe0ef          	jal	800013a8 <reset_state>
}
    80003028:	70a2                	ld	ra,40(sp)
    8000302a:	8522                	mv	a0,s0
    8000302c:	7402                	ld	s0,32(sp)
    8000302e:	64e2                	ld	s1,24(sp)
    80003030:	6942                	ld	s2,16(sp)
    80003032:	69a2                	ld	s3,8(sp)
    80003034:	6a02                	ld	s4,0(sp)
    80003036:	6145                	addi	sp,sp,48
    80003038:	8082                	ret
    TEST_ASSERT(
    8000303a:	4401                	li	s0,0
    TEST_END();
    8000303c:	00020597          	auipc	a1,0x20
    80003040:	b0458593          	addi	a1,a1,-1276 # 80022b40 <__func__.2+0x2d8>
    80003044:	b7f9                	j	80003012 <second_stage_only_translation+0x2f2>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003046:	00020597          	auipc	a1,0x20
    8000304a:	afa58593          	addi	a1,a1,-1286 # 80022b40 <__func__.2+0x2d8>
    8000304e:	00020517          	auipc	a0,0x20
    80003052:	b3250513          	addi	a0,a0,-1230 # 80022b80 <__func__.2+0x318>
    80003056:	41b1d0ef          	jal	80020c70 <printf>
    8000305a:	00042797          	auipc	a5,0x42
    8000305e:	fb77c783          	lbu	a5,-73(a5) # 80045011 <excpt+0x1>
    80003062:	e4079de3          	bnez	a5,80002ebc <second_stage_only_translation+0x19c>
    80003066:	02200793          	li	a5,34
    8000306a:	e4f919e3          	bne	s2,a5,80002ebc <second_stage_only_translation+0x19c>
    8000306e:	47c5                	li	a5,17
    80003070:	e4f996e3          	bne	s3,a5,80002ebc <second_stage_only_translation+0x19c>
    80003074:	4529                	li	a0,10
    80003076:	28a1d0ef          	jal	80020300 <putchar>
    8000307a:	e60488e3          	beqz	s1,80002eea <second_stage_only_translation+0x1ca>
    8000307e:	00042797          	auipc	a5,0x42
    80003082:	f937c783          	lbu	a5,-109(a5) # 80045011 <excpt+0x1>
    80003086:	e60792e3          	bnez	a5,80002eea <second_stage_only_translation+0x1ca>
    8000308a:	fef98493          	addi	s1,s3,-17
    8000308e:	0014b493          	seqz	s1,s1
    80003092:	bda9                	j	80002eec <second_stage_only_translation+0x1cc>
    TEST_ASSERT(
    80003094:	00020517          	auipc	a0,0x20
    80003098:	af450513          	addi	a0,a0,-1292 # 80022b88 <__func__.2+0x320>
    8000309c:	3d51d0ef          	jal	80020c70 <printf>
    800030a0:	02900513          	li	a0,41
    800030a4:	25c1d0ef          	jal	80020300 <putchar>
    800030a8:	b7b9                	j	80002ff6 <second_stage_only_translation+0x2d6>
    TEST_ASSERT(
    800030aa:	00042717          	auipc	a4,0x42
    800030ae:	f6a72703          	lw	a4,-150(a4) # 80045014 <excpt+0x4>
    800030b2:	478d                	li	a5,3
    800030b4:	eaf715e3          	bne	a4,a5,80002f5e <second_stage_only_translation+0x23e>
    800030b8:	bd6d                	j	80002f72 <second_stage_only_translation+0x252>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800030ba:	0f2a0263          	beq	s4,s2,8000319e <second_stage_only_translation+0x47e>
    800030be:	00020597          	auipc	a1,0x20
    800030c2:	a8258593          	addi	a1,a1,-1406 # 80022b40 <__func__.2+0x2d8>
    800030c6:	00020517          	auipc	a0,0x20
    800030ca:	aba50513          	addi	a0,a0,-1350 # 80022b80 <__func__.2+0x318>
    800030ce:	3a31d0ef          	jal	80020c70 <printf>
    800030d2:	00020517          	auipc	a0,0x20
    800030d6:	ab650513          	addi	a0,a0,-1354 # 80022b88 <__func__.2+0x320>
    800030da:	3971d0ef          	jal	80020c70 <printf>
    800030de:	02900513          	li	a0,41
    800030e2:	21e1d0ef          	jal	80020300 <putchar>
    800030e6:	4529                	li	a0,10
    800030e8:	2181d0ef          	jal	80020300 <putchar>
    800030ec:	00042797          	auipc	a5,0x42
    800030f0:	f257c783          	lbu	a5,-219(a5) # 80045011 <excpt+0x1>
    800030f4:	d2079ee3          	bnez	a5,80002e30 <second_stage_only_translation+0x110>
    800030f8:	fdea0493          	addi	s1,s4,-34
    800030fc:	0014b493          	seqz	s1,s1
    80003100:	bb0d                	j	80002e32 <second_stage_only_translation+0x112>
    80003102:	00020517          	auipc	a0,0x20
    80003106:	a8650513          	addi	a0,a0,-1402 # 80022b88 <__func__.2+0x320>
    8000310a:	3671d0ef          	jal	80020c70 <printf>
    8000310e:	02900513          	li	a0,41
    80003112:	1ee1d0ef          	jal	80020300 <putchar>
    80003116:	4529                	li	a0,10
    80003118:	1e81d0ef          	jal	80020300 <putchar>
    8000311c:	00042797          	auipc	a5,0x42
    80003120:	ef57c783          	lbu	a5,-267(a5) # 80045011 <excpt+0x1>
    80003124:	d00796e3          	bnez	a5,80002e30 <second_stage_only_translation+0x110>
    80003128:	fc9988e3          	beq	s3,s1,800030f8 <second_stage_only_translation+0x3d8>
    8000312c:	b311                	j	80002e30 <second_stage_only_translation+0x110>
    TEST_ASSERT(
    8000312e:	00042497          	auipc	s1,0x42
    80003132:	ee64a483          	lw	s1,-282(s1) # 80045014 <excpt+0x4>
    80003136:	14f5                	addi	s1,s1,-3
    80003138:	0014b493          	seqz	s1,s1
    8000313c:	bd89                	j	80002f8e <second_stage_only_translation+0x26e>
    8000313e:	00042717          	auipc	a4,0x42
    80003142:	ed672703          	lw	a4,-298(a4) # 80045014 <excpt+0x4>
    80003146:	478d                	li	a5,3
    80003148:	00020597          	auipc	a1,0x20
    8000314c:	9e858593          	addi	a1,a1,-1560 # 80022b30 <__func__.2+0x2c8>
    80003150:	def708e3          	beq	a4,a5,80002f40 <second_stage_only_translation+0x220>
    80003154:	00020597          	auipc	a1,0x20
    80003158:	9ec58593          	addi	a1,a1,-1556 # 80022b40 <__func__.2+0x2d8>
    8000315c:	b3d5                	j	80002f40 <second_stage_only_translation+0x220>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000315e:	47c5                	li	a5,17
    80003160:	d4f994e3          	bne	s3,a5,80002ea8 <second_stage_only_translation+0x188>
    80003164:	00020597          	auipc	a1,0x20
    80003168:	9cc58593          	addi	a1,a1,-1588 # 80022b30 <__func__.2+0x2c8>
    8000316c:	00020517          	auipc	a0,0x20
    80003170:	a1450513          	addi	a0,a0,-1516 # 80022b80 <__func__.2+0x318>
    80003174:	2fd1d0ef          	jal	80020c70 <printf>
    80003178:	00042797          	auipc	a5,0x42
    8000317c:	e997c783          	lbu	a5,-359(a5) # 80045011 <excpt+0x1>
    80003180:	ee078ae3          	beqz	a5,80003074 <second_stage_only_translation+0x354>
    80003184:	bb25                	j	80002ebc <second_stage_only_translation+0x19c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003186:	f52a16e3          	bne	s4,s2,800030d2 <second_stage_only_translation+0x3b2>
    8000318a:	4529                	li	a0,10
    8000318c:	1741d0ef          	jal	80020300 <putchar>
    80003190:	00042497          	auipc	s1,0x42
    80003194:	e814c483          	lbu	s1,-383(s1) # 80045011 <excpt+0x1>
    80003198:	0014c493          	xori	s1,s1,1
    8000319c:	b959                	j	80002e32 <second_stage_only_translation+0x112>
    8000319e:	00020597          	auipc	a1,0x20
    800031a2:	99258593          	addi	a1,a1,-1646 # 80022b30 <__func__.2+0x2c8>
    800031a6:	00020517          	auipc	a0,0x20
    800031aa:	9da50513          	addi	a0,a0,-1574 # 80022b80 <__func__.2+0x318>
    800031ae:	2c31d0ef          	jal	80020c70 <printf>
    800031b2:	00042797          	auipc	a5,0x42
    800031b6:	e5f7c783          	lbu	a5,-417(a5) # 80045011 <excpt+0x1>
    800031ba:	dbe1                	beqz	a5,8000318a <second_stage_only_translation+0x46a>
    800031bc:	bf19                	j	800030d2 <second_stage_only_translation+0x3b2>

00000000800031be <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    800031be:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    800031c0:	0001e597          	auipc	a1,0x1e
    800031c4:	07058593          	addi	a1,a1,112 # 80021230 <__func__.13>
    800031c8:	00020517          	auipc	a0,0x20
    800031cc:	98850513          	addi	a0,a0,-1656 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_1(){
    800031d0:	f406                	sd	ra,40(sp)
    800031d2:	f022                	sd	s0,32(sp)
    800031d4:	ec26                	sd	s1,24(sp)
    800031d6:	e84a                	sd	s2,16(sp)
    800031d8:	e44e                	sd	s3,8(sp)
    800031da:	e052                	sd	s4,0(sp)
    TEST_START();
    800031dc:	2951d0ef          	jal	80020c70 <printf>
    800031e0:	4529                	li	a0,10
    800031e2:	11e1d0ef          	jal	80020300 <putchar>
    
    hspt_init();
    800031e6:	bfafd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800031ea:	e38fd0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800031ee:	cc2fd0ef          	jal	800006b0 <vspt_init>

    TEST_SETUP_EXCEPT();
    800031f2:	0330000f          	fence	rw,rw
    800031f6:	00042497          	auipc	s1,0x42
    800031fa:	e1a48493          	addi	s1,s1,-486 # 80045010 <excpt>
    800031fe:	4785                	li	a5,1
    80003200:	00042717          	auipc	a4,0x42
    80003204:	e4073423          	sd	zero,-440(a4) # 80045048 <excpt+0x38>
    80003208:	00f49023          	sh	a5,0(s1)
    8000320c:	0330000f          	fence	rw,rw
    if(curr_priv != PRIV_M){
    80003210:	00029917          	auipc	s2,0x29
    80003214:	2bc92903          	lw	s2,700(s2) # 8002c4cc <curr_priv>
    80003218:	4791                	li	a5,4
    8000321a:	02f90763          	beq	s2,a5,80003248 <m_and_hs_using_vs_access_1+0x8a>
        ERROR("trying to write as mprv from low privilege");
    8000321e:	00020517          	auipc	a0,0x20
    80003222:	fd250513          	addi	a0,a0,-46 # 800231f0 <__func__.2+0x988>
    80003226:	24b1d0ef          	jal	80020c70 <printf>
    8000322a:	11100613          	li	a2,273
    8000322e:	0001e597          	auipc	a1,0x1e
    80003232:	02258593          	addi	a1,a1,34 # 80021250 <__func__.12>
    80003236:	00020517          	auipc	a0,0x20
    8000323a:	aa250513          	addi	a0,a0,-1374 # 80022cd8 <__func__.2+0x470>
    8000323e:	2331d0ef          	jal	80020c70 <printf>
    80003242:	4501                	li	a0,0
    80003244:	13d1d0ef          	jal	80020b80 <exit>
    asm volatile(
    80003248:	01108437          	lui	s0,0x1108
    8000324c:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003250:	001009b7          	lui	s3,0x100
    set_prev_priv(priv);
    80003254:	4509                	li	a0,2
    asm volatile(
    80003256:	0442                	slli	s0,s0,0x10
    80003258:	06b98993          	addi	s3,s3,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    8000325c:	f9cfd0ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    80003260:	1439                	addi	s0,s0,-18
    80003262:	09b2                	slli	s3,s3,0xc
    80003264:	00020a37          	lui	s4,0x20
    80003268:	300a2073          	csrs	mstatus,s4
    8000326c:	0089b023          	sd	s0,0(s3)
    80003270:	300a3073          	csrc	mstatus,s4
    if(curr_priv != PRIV_M){
    80003274:	00029797          	auipc	a5,0x29
    80003278:	2587a783          	lw	a5,600(a5) # 8002c4cc <curr_priv>
    8000327c:	03278763          	beq	a5,s2,800032aa <m_and_hs_using_vs_access_1+0xec>
        ERROR("trying to read as mprv from low privilege");
    80003280:	00020517          	auipc	a0,0x20
    80003284:	fb050513          	addi	a0,a0,-80 # 80023230 <__func__.2+0x9c8>
    80003288:	1e91d0ef          	jal	80020c70 <printf>
    8000328c:	0fe00613          	li	a2,254
    80003290:	0001e597          	auipc	a1,0x1e
    80003294:	fd058593          	addi	a1,a1,-48 # 80021260 <__func__.11>
    80003298:	00020517          	auipc	a0,0x20
    8000329c:	a4050513          	addi	a0,a0,-1472 # 80022cd8 <__func__.2+0x470>
    800032a0:	1d11d0ef          	jal	80020c70 <printf>
    800032a4:	4501                	li	a0,0
    800032a6:	0db1d0ef          	jal	80020b80 <exit>
    set_prev_priv(priv);
    800032aa:	4509                	li	a0,2
    800032ac:	f4cfd0ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    800032b0:	300a2073          	csrs	mstatus,s4
    800032b4:	0009b903          	ld	s2,0(s3)
    800032b8:	300a3073          	csrc	mstatus,s4
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    800032bc:	00020617          	auipc	a2,0x20
    800032c0:	fb460613          	addi	a2,a2,-76 # 80023270 <__func__.2+0xa08>
    800032c4:	08200593          	li	a1,130
    800032c8:	00020517          	auipc	a0,0x20
    800032cc:	8a050513          	addi	a0,a0,-1888 # 80022b68 <__func__.2+0x300>
    800032d0:	1a11d0ef          	jal	80020c70 <printf>
    800032d4:	00042797          	auipc	a5,0x42
    800032d8:	d3d7c783          	lbu	a5,-707(a5) # 80045011 <excpt+0x1>
    800032dc:	2e079b63          	bnez	a5,800035d2 <m_and_hs_using_vs_access_1+0x414>
    800032e0:	48890c63          	beq	s2,s0,80003778 <m_and_hs_using_vs_access_1+0x5ba>
    800032e4:	00020597          	auipc	a1,0x20
    800032e8:	85c58593          	addi	a1,a1,-1956 # 80022b40 <__func__.2+0x2d8>
    800032ec:	00020517          	auipc	a0,0x20
    800032f0:	89450513          	addi	a0,a0,-1900 # 80022b80 <__func__.2+0x318>
    800032f4:	17d1d0ef          	jal	80020c70 <printf>
    800032f8:	00020517          	auipc	a0,0x20
    800032fc:	89050513          	addi	a0,a0,-1904 # 80022b88 <__func__.2+0x320>
    80003300:	1711d0ef          	jal	80020c70 <printf>
    80003304:	02900513          	li	a0,41
    80003308:	7f91c0ef          	jal	80020300 <putchar>
    8000330c:	4529                	li	a0,10
    8000330e:	7f31c0ef          	jal	80020300 <putchar>
    80003312:	00042797          	auipc	a5,0x42
    80003316:	cff7c783          	lbu	a5,-769(a5) # 80045011 <excpt+0x1>
    8000331a:	4981                	li	s3,0
    8000331c:	eb99                	bnez	a5,80003332 <m_and_hs_using_vs_access_1+0x174>
    8000331e:	011087b7          	lui	a5,0x1108
    80003322:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003326:	07c2                	slli	a5,a5,0x10
    80003328:	17b9                	addi	a5,a5,-18
    8000332a:	40f90933          	sub	s2,s2,a5
    8000332e:	00193993          	seqz	s3,s2
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80003332:	450d                	li	a0,3
    80003334:	fa4fd0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003338:	4509                	li	a0,2
    8000333a:	ebefd0ef          	jal	800009f8 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000333e:	0330000f          	fence	rw,rw
    80003342:	4785                	li	a5,1
    80003344:	00042717          	auipc	a4,0x42
    80003348:	d0073223          	sd	zero,-764(a4) # 80045048 <excpt+0x38>
    8000334c:	00f49023          	sh	a5,0(s1)
    80003350:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003354:	37ab7937          	lui	s2,0x37ab7
    80003358:	001007b7          	lui	a5,0x100
    8000335c:	090a                	slli	s2,s2,0x2
    8000335e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003362:	eef90913          	addi	s2,s2,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80003366:	07b2                	slli	a5,a5,0xc
    80003368:	6f27c073          	.insn	4, 0x6f27c073
    asm volatile(
    8000336c:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80003370:	00020617          	auipc	a2,0x20
    80003374:	f2860613          	addi	a2,a2,-216 # 80023298 <__func__.2+0xa30>
    80003378:	08200593          	li	a1,130
    8000337c:	0001f517          	auipc	a0,0x1f
    80003380:	7ec50513          	addi	a0,a0,2028 # 80022b68 <__func__.2+0x300>
    80003384:	0ed1d0ef          	jal	80020c70 <printf>
    80003388:	00042797          	auipc	a5,0x42
    8000338c:	c897c783          	lbu	a5,-887(a5) # 80045011 <excpt+0x1>
    80003390:	26079d63          	bnez	a5,8000360a <m_and_hs_using_vs_access_1+0x44c>
    80003394:	41240363          	beq	s0,s2,8000379a <m_and_hs_using_vs_access_1+0x5dc>
    80003398:	0001f597          	auipc	a1,0x1f
    8000339c:	7a858593          	addi	a1,a1,1960 # 80022b40 <__func__.2+0x2d8>
    800033a0:	0001f517          	auipc	a0,0x1f
    800033a4:	7e050513          	addi	a0,a0,2016 # 80022b80 <__func__.2+0x318>
    800033a8:	0c91d0ef          	jal	80020c70 <printf>
    800033ac:	0001f517          	auipc	a0,0x1f
    800033b0:	7dc50513          	addi	a0,a0,2012 # 80022b88 <__func__.2+0x320>
    800033b4:	0bd1d0ef          	jal	80020c70 <printf>
    800033b8:	02900513          	li	a0,41
    800033bc:	7451c0ef          	jal	80020300 <putchar>
    800033c0:	4529                	li	a0,10
    800033c2:	73f1c0ef          	jal	80020300 <putchar>
    800033c6:	36099063          	bnez	s3,80003726 <m_and_hs_using_vs_access_1+0x568>
    800033ca:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    800033cc:	0330000f          	fence	rw,rw
    800033d0:	4785                	li	a5,1
    800033d2:	00042717          	auipc	a4,0x42
    800033d6:	c6073b23          	sd	zero,-906(a4) # 80045048 <excpt+0x38>
    800033da:	00f49023          	sh	a5,0(s1)
    800033de:	0330000f          	fence	rw,rw
    asm volatile(
    800033e2:	001007b7          	lui	a5,0x100
    800033e6:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800033ea:	07b2                	slli	a5,a5,0xc
    800033ec:	0ff00993          	li	s3,255
    800033f0:	6337c073          	.insn	4, 0x6337c073
    asm volatile(
    800033f4:	6007ca73          	.insn	4, 0x6007ca73
    asm volatile(
    800033f8:	6017c973          	.insn	4, 0x6017c973
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    800033fc:	00020617          	auipc	a2,0x20
    80003400:	ea460613          	addi	a2,a2,-348 # 800232a0 <__func__.2+0xa38>
    80003404:	08200593          	li	a1,130
    80003408:	0001f517          	auipc	a0,0x1f
    8000340c:	76050513          	addi	a0,a0,1888 # 80022b68 <__func__.2+0x300>
    80003410:	0611d0ef          	jal	80020c70 <printf>
    80003414:	00042797          	auipc	a5,0x42
    80003418:	bfd7c783          	lbu	a5,-1027(a5) # 80045011 <excpt+0x1>
    8000341c:	2c079063          	bnez	a5,800036dc <m_and_hs_using_vs_access_1+0x51e>
    80003420:	57fd                	li	a5,-1
    80003422:	32fa0963          	beq	s4,a5,80003754 <m_and_hs_using_vs_access_1+0x596>
    80003426:	0001f597          	auipc	a1,0x1f
    8000342a:	71a58593          	addi	a1,a1,1818 # 80022b40 <__func__.2+0x2d8>
    8000342e:	0001f517          	auipc	a0,0x1f
    80003432:	75250513          	addi	a0,a0,1874 # 80022b80 <__func__.2+0x318>
    80003436:	03b1d0ef          	jal	80020c70 <printf>
    8000343a:	0001f517          	auipc	a0,0x1f
    8000343e:	74e50513          	addi	a0,a0,1870 # 80022b88 <__func__.2+0x320>
    80003442:	02f1d0ef          	jal	80020c70 <printf>
    80003446:	02900513          	li	a0,41
    8000344a:	6b71c0ef          	jal	80020300 <putchar>
    8000344e:	4529                	li	a0,10
    80003450:	6b11c0ef          	jal	80020300 <putchar>
    80003454:	c419                	beqz	s0,80003462 <m_and_hs_using_vs_access_1+0x2a4>
    80003456:	00042797          	auipc	a5,0x42
    8000345a:	bbb7c783          	lbu	a5,-1093(a5) # 80045011 <excpt+0x1>
    8000345e:	2e078763          	beqz	a5,8000374c <m_and_hs_using_vs_access_1+0x58e>
    80003462:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003464:	0330000f          	fence	rw,rw
    80003468:	4785                	li	a5,1
    8000346a:	00042717          	auipc	a4,0x42
    8000346e:	bc073f23          	sd	zero,-1058(a4) # 80045048 <excpt+0x38>
    80003472:	00f49023          	sh	a5,0(s1)
    80003476:	0330000f          	fence	rw,rw
    asm volatile(
    8000347a:	001007b7          	lui	a5,0x100
    8000347e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003482:	6941                	lui	s2,0x10
    80003484:	07b2                	slli	a5,a5,0xc
    80003486:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80003488:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    8000348c:	6407ca73          	.insn	4, 0x6407ca73
    asm volatile(
    80003490:	6417c9f3          	.insn	4, 0x6417c9f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003494:	00020617          	auipc	a2,0x20
    80003498:	e2460613          	addi	a2,a2,-476 # 800232b8 <__func__.2+0xa50>
    8000349c:	08200593          	li	a1,130
    800034a0:	0001f517          	auipc	a0,0x1f
    800034a4:	6c850513          	addi	a0,a0,1736 # 80022b68 <__func__.2+0x300>
    800034a8:	7c81d0ef          	jal	80020c70 <printf>
    800034ac:	00042797          	auipc	a5,0x42
    800034b0:	b657c783          	lbu	a5,-1179(a5) # 80045011 <excpt+0x1>
    800034b4:	1c079e63          	bnez	a5,80003690 <m_and_hs_using_vs_access_1+0x4d2>
    800034b8:	57fd                	li	a5,-1
    800034ba:	32fa0463          	beq	s4,a5,800037e2 <m_and_hs_using_vs_access_1+0x624>
    800034be:	0001f597          	auipc	a1,0x1f
    800034c2:	68258593          	addi	a1,a1,1666 # 80022b40 <__func__.2+0x2d8>
    800034c6:	0001f517          	auipc	a0,0x1f
    800034ca:	6ba50513          	addi	a0,a0,1722 # 80022b80 <__func__.2+0x318>
    800034ce:	7a21d0ef          	jal	80020c70 <printf>
    800034d2:	0001f517          	auipc	a0,0x1f
    800034d6:	6b650513          	addi	a0,a0,1718 # 80022b88 <__func__.2+0x320>
    800034da:	7961d0ef          	jal	80020c70 <printf>
    800034de:	02900513          	li	a0,41
    800034e2:	61f1c0ef          	jal	80020300 <putchar>
    800034e6:	4529                	li	a0,10
    800034e8:	6191c0ef          	jal	80020300 <putchar>
    800034ec:	c419                	beqz	s0,800034fa <m_and_hs_using_vs_access_1+0x33c>
    800034ee:	00042797          	auipc	a5,0x42
    800034f2:	b237c783          	lbu	a5,-1245(a5) # 80045011 <excpt+0x1>
    800034f6:	24078763          	beqz	a5,80003744 <m_and_hs_using_vs_access_1+0x586>
    800034fa:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800034fc:	0330000f          	fence	rw,rw
    80003500:	4785                	li	a5,1
    80003502:	00042717          	auipc	a4,0x42
    80003506:	b4073323          	sd	zero,-1210(a4) # 80045048 <excpt+0x38>
    8000350a:	00f49023          	sh	a5,0(s1)
    8000350e:	0330000f          	fence	rw,rw
    asm volatile(
    80003512:	001007b7          	lui	a5,0x100
    80003516:	54fd                	li	s1,-1
    80003518:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000351c:	07b2                	slli	a5,a5,0xc
    8000351e:	0204d993          	srli	s3,s1,0x20
    80003522:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    80003526:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    8000352a:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    8000352e:	00020617          	auipc	a2,0x20
    80003532:	da260613          	addi	a2,a2,-606 # 800232d0 <__func__.2+0xa68>
    80003536:	08200593          	li	a1,130
    8000353a:	0001f517          	auipc	a0,0x1f
    8000353e:	62e50513          	addi	a0,a0,1582 # 80022b68 <__func__.2+0x300>
    80003542:	72e1d0ef          	jal	80020c70 <printf>
    80003546:	00042797          	auipc	a5,0x42
    8000354a:	acb7c783          	lbu	a5,-1333(a5) # 80045011 <excpt+0x1>
    8000354e:	0e079c63          	bnez	a5,80003646 <m_and_hs_using_vs_access_1+0x488>
    80003552:	269a0563          	beq	s4,s1,800037bc <m_and_hs_using_vs_access_1+0x5fe>
    80003556:	0001f597          	auipc	a1,0x1f
    8000355a:	5ea58593          	addi	a1,a1,1514 # 80022b40 <__func__.2+0x2d8>
    8000355e:	0001f517          	auipc	a0,0x1f
    80003562:	62250513          	addi	a0,a0,1570 # 80022b80 <__func__.2+0x318>
    80003566:	70a1d0ef          	jal	80020c70 <printf>
    8000356a:	0001f517          	auipc	a0,0x1f
    8000356e:	61e50513          	addi	a0,a0,1566 # 80022b88 <__func__.2+0x320>
    80003572:	6fe1d0ef          	jal	80020c70 <printf>
    80003576:	02900513          	li	a0,41
    8000357a:	5871c0ef          	jal	80020300 <putchar>
    8000357e:	4529                	li	a0,10
    80003580:	5811c0ef          	jal	80020300 <putchar>
    80003584:	00090e63          	beqz	s2,800035a0 <m_and_hs_using_vs_access_1+0x3e2>
    80003588:	00042797          	auipc	a5,0x42
    8000358c:	a897c783          	lbu	a5,-1399(a5) # 80045011 <excpt+0x1>
    80003590:	eb81                	bnez	a5,800035a0 <m_and_hs_using_vs_access_1+0x3e2>
    80003592:	57fd                	li	a5,-1
    80003594:	00fa1663          	bne	s4,a5,800035a0 <m_and_hs_using_vs_access_1+0x3e2>
    80003598:	020a5a13          	srli	s4,s4,0x20
    8000359c:	0f440463          	beq	s0,s4,80003684 <m_and_hs_using_vs_access_1+0x4c6>
    800035a0:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    800035a2:	0001f597          	auipc	a1,0x1f
    800035a6:	59e58593          	addi	a1,a1,1438 # 80022b40 <__func__.2+0x2d8>
    800035aa:	0001f517          	auipc	a0,0x1f
    800035ae:	63e50513          	addi	a0,a0,1598 # 80022be8 <__func__.2+0x380>
    800035b2:	6be1d0ef          	jal	80020c70 <printf>
    800035b6:	4511                	li	a0,4
    800035b8:	d20fd0ef          	jal	80000ad8 <goto_priv>
    800035bc:	dedfd0ef          	jal	800013a8 <reset_state>
}
    800035c0:	70a2                	ld	ra,40(sp)
    800035c2:	8522                	mv	a0,s0
    800035c4:	7402                	ld	s0,32(sp)
    800035c6:	64e2                	ld	s1,24(sp)
    800035c8:	6942                	ld	s2,16(sp)
    800035ca:	69a2                	ld	s3,8(sp)
    800035cc:	6a02                	ld	s4,0(sp)
    800035ce:	6145                	addi	sp,sp,48
    800035d0:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    800035d2:	0001f597          	auipc	a1,0x1f
    800035d6:	56e58593          	addi	a1,a1,1390 # 80022b40 <__func__.2+0x2d8>
    800035da:	0001f517          	auipc	a0,0x1f
    800035de:	5a650513          	addi	a0,a0,1446 # 80022b80 <__func__.2+0x318>
    800035e2:	68e1d0ef          	jal	80020c70 <printf>
    800035e6:	00042797          	auipc	a5,0x42
    800035ea:	a2b7c783          	lbu	a5,-1493(a5) # 80045011 <excpt+0x1>
    800035ee:	d00795e3          	bnez	a5,800032f8 <m_and_hs_using_vs_access_1+0x13a>
    800035f2:	d08913e3          	bne	s2,s0,800032f8 <m_and_hs_using_vs_access_1+0x13a>
    800035f6:	4529                	li	a0,10
    800035f8:	5091c0ef          	jal	80020300 <putchar>
    800035fc:	00042997          	auipc	s3,0x42
    80003600:	a159c983          	lbu	s3,-1515(s3) # 80045011 <excpt+0x1>
    80003604:	0019c993          	xori	s3,s3,1
    80003608:	b32d                	j	80003332 <m_and_hs_using_vs_access_1+0x174>
    TEST_ASSERT("hs hlvd",
    8000360a:	0001f597          	auipc	a1,0x1f
    8000360e:	53658593          	addi	a1,a1,1334 # 80022b40 <__func__.2+0x2d8>
    80003612:	0001f517          	auipc	a0,0x1f
    80003616:	56e50513          	addi	a0,a0,1390 # 80022b80 <__func__.2+0x318>
    8000361a:	6561d0ef          	jal	80020c70 <printf>
    8000361e:	00042797          	auipc	a5,0x42
    80003622:	9f37c783          	lbu	a5,-1549(a5) # 80045011 <excpt+0x1>
    80003626:	d80793e3          	bnez	a5,800033ac <m_and_hs_using_vs_access_1+0x1ee>
    8000362a:	d92411e3          	bne	s0,s2,800033ac <m_and_hs_using_vs_access_1+0x1ee>
    8000362e:	4529                	li	a0,10
    80003630:	4d11c0ef          	jal	80020300 <putchar>
    80003634:	d8098be3          	beqz	s3,800033ca <m_and_hs_using_vs_access_1+0x20c>
    80003638:	00042417          	auipc	s0,0x42
    8000363c:	9d944403          	lbu	s0,-1575(s0) # 80045011 <excpt+0x1>
    80003640:	00144413          	xori	s0,s0,1
    80003644:	b361                	j	800033cc <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003646:	0001f597          	auipc	a1,0x1f
    8000364a:	4fa58593          	addi	a1,a1,1274 # 80022b40 <__func__.2+0x2d8>
    8000364e:	0001f517          	auipc	a0,0x1f
    80003652:	53250513          	addi	a0,a0,1330 # 80022b80 <__func__.2+0x318>
    80003656:	61a1d0ef          	jal	80020c70 <printf>
    8000365a:	00042797          	auipc	a5,0x42
    8000365e:	9b77c783          	lbu	a5,-1609(a5) # 80045011 <excpt+0x1>
    80003662:	f00794e3          	bnez	a5,8000356a <m_and_hs_using_vs_access_1+0x3ac>
    80003666:	f09a12e3          	bne	s4,s1,8000356a <m_and_hs_using_vs_access_1+0x3ac>
    8000366a:	f13410e3          	bne	s0,s3,8000356a <m_and_hs_using_vs_access_1+0x3ac>
    8000366e:	4529                	li	a0,10
    80003670:	4911c0ef          	jal	80020300 <putchar>
    80003674:	f20906e3          	beqz	s2,800035a0 <m_and_hs_using_vs_access_1+0x3e2>
    80003678:	00042797          	auipc	a5,0x42
    8000367c:	9997c783          	lbu	a5,-1639(a5) # 80045011 <excpt+0x1>
    80003680:	f20790e3          	bnez	a5,800035a0 <m_and_hs_using_vs_access_1+0x3e2>
    80003684:	4405                	li	s0,1
    TEST_END();
    80003686:	0001f597          	auipc	a1,0x1f
    8000368a:	4aa58593          	addi	a1,a1,1194 # 80022b30 <__func__.2+0x2c8>
    8000368e:	bf31                	j	800035aa <m_and_hs_using_vs_access_1+0x3ec>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003690:	0001f597          	auipc	a1,0x1f
    80003694:	4b058593          	addi	a1,a1,1200 # 80022b40 <__func__.2+0x2d8>
    80003698:	0001f517          	auipc	a0,0x1f
    8000369c:	4e850513          	addi	a0,a0,1256 # 80022b80 <__func__.2+0x318>
    800036a0:	5d01d0ef          	jal	80020c70 <printf>
    800036a4:	00042797          	auipc	a5,0x42
    800036a8:	96d7c783          	lbu	a5,-1683(a5) # 80045011 <excpt+0x1>
    800036ac:	e20793e3          	bnez	a5,800034d2 <m_and_hs_using_vs_access_1+0x314>
    800036b0:	57fd                	li	a5,-1
    800036b2:	e2fa10e3          	bne	s4,a5,800034d2 <m_and_hs_using_vs_access_1+0x314>
    800036b6:	e1299ee3          	bne	s3,s2,800034d2 <m_and_hs_using_vs_access_1+0x314>
    800036ba:	4529                	li	a0,10
    800036bc:	4451c0ef          	jal	80020300 <putchar>
    800036c0:	e2040de3          	beqz	s0,800034fa <m_and_hs_using_vs_access_1+0x33c>
    800036c4:	00042797          	auipc	a5,0x42
    800036c8:	94d7c783          	lbu	a5,-1715(a5) # 80045011 <excpt+0x1>
    800036cc:	e20797e3          	bnez	a5,800034fa <m_and_hs_using_vs_access_1+0x33c>
    800036d0:	7941                	lui	s2,0xffff0
    800036d2:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    800036d4:	994e                	add	s2,s2,s3
    800036d6:	00193913          	seqz	s2,s2
    800036da:	b50d                	j	800034fc <m_and_hs_using_vs_access_1+0x33e>
    TEST_ASSERT("hs hlvb vs hlvbu",
    800036dc:	0001f597          	auipc	a1,0x1f
    800036e0:	46458593          	addi	a1,a1,1124 # 80022b40 <__func__.2+0x2d8>
    800036e4:	0001f517          	auipc	a0,0x1f
    800036e8:	49c50513          	addi	a0,a0,1180 # 80022b80 <__func__.2+0x318>
    800036ec:	5841d0ef          	jal	80020c70 <printf>
    800036f0:	00042797          	auipc	a5,0x42
    800036f4:	9217c783          	lbu	a5,-1759(a5) # 80045011 <excpt+0x1>
    800036f8:	d40791e3          	bnez	a5,8000343a <m_and_hs_using_vs_access_1+0x27c>
    800036fc:	57fd                	li	a5,-1
    800036fe:	d2fa1ee3          	bne	s4,a5,8000343a <m_and_hs_using_vs_access_1+0x27c>
    80003702:	d3391ce3          	bne	s2,s3,8000343a <m_and_hs_using_vs_access_1+0x27c>
    80003706:	4529                	li	a0,10
    80003708:	3f91c0ef          	jal	80020300 <putchar>
    8000370c:	d4040be3          	beqz	s0,80003462 <m_and_hs_using_vs_access_1+0x2a4>
    80003710:	00042797          	auipc	a5,0x42
    80003714:	9017c783          	lbu	a5,-1791(a5) # 80045011 <excpt+0x1>
    80003718:	d40795e3          	bnez	a5,80003462 <m_and_hs_using_vs_access_1+0x2a4>
    8000371c:	f0190793          	addi	a5,s2,-255
    80003720:	0017b413          	seqz	s0,a5
    80003724:	b381                	j	80003464 <m_and_hs_using_vs_access_1+0x2a6>
    TEST_ASSERT("hs hlvd",
    80003726:	00042797          	auipc	a5,0x42
    8000372a:	8eb7c783          	lbu	a5,-1813(a5) # 80045011 <excpt+0x1>
    8000372e:	c8079ee3          	bnez	a5,800033ca <m_and_hs_using_vs_access_1+0x20c>
    80003732:	c85497b7          	lui	a5,0xc8549
    80003736:	078a                	slli	a5,a5,0x2
    80003738:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    8000373c:	943e                	add	s0,s0,a5
    8000373e:	00143413          	seqz	s0,s0
    80003742:	b169                	j	800033cc <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003744:	57fd                	li	a5,-1
    80003746:	dafa1ae3          	bne	s4,a5,800034fa <m_and_hs_using_vs_access_1+0x33c>
    8000374a:	b759                	j	800036d0 <m_and_hs_using_vs_access_1+0x512>
    TEST_ASSERT("hs hlvb vs hlvbu",
    8000374c:	57fd                	li	a5,-1
    8000374e:	d0fa1ae3          	bne	s4,a5,80003462 <m_and_hs_using_vs_access_1+0x2a4>
    80003752:	b7e9                	j	8000371c <m_and_hs_using_vs_access_1+0x55e>
    80003754:	cd3919e3          	bne	s2,s3,80003426 <m_and_hs_using_vs_access_1+0x268>
    80003758:	0001f597          	auipc	a1,0x1f
    8000375c:	3d858593          	addi	a1,a1,984 # 80022b30 <__func__.2+0x2c8>
    80003760:	0001f517          	auipc	a0,0x1f
    80003764:	42050513          	addi	a0,a0,1056 # 80022b80 <__func__.2+0x318>
    80003768:	5081d0ef          	jal	80020c70 <printf>
    8000376c:	00042797          	auipc	a5,0x42
    80003770:	8a57c783          	lbu	a5,-1883(a5) # 80045011 <excpt+0x1>
    80003774:	dbc9                	beqz	a5,80003706 <m_and_hs_using_vs_access_1+0x548>
    80003776:	b1d1                	j	8000343a <m_and_hs_using_vs_access_1+0x27c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003778:	0001f597          	auipc	a1,0x1f
    8000377c:	3b858593          	addi	a1,a1,952 # 80022b30 <__func__.2+0x2c8>
    80003780:	0001f517          	auipc	a0,0x1f
    80003784:	40050513          	addi	a0,a0,1024 # 80022b80 <__func__.2+0x318>
    80003788:	4e81d0ef          	jal	80020c70 <printf>
    8000378c:	00042797          	auipc	a5,0x42
    80003790:	8857c783          	lbu	a5,-1915(a5) # 80045011 <excpt+0x1>
    80003794:	b6078ce3          	beqz	a5,8000330c <m_and_hs_using_vs_access_1+0x14e>
    80003798:	b685                	j	800032f8 <m_and_hs_using_vs_access_1+0x13a>
    TEST_ASSERT("hs hlvd",
    8000379a:	0001f597          	auipc	a1,0x1f
    8000379e:	39658593          	addi	a1,a1,918 # 80022b30 <__func__.2+0x2c8>
    800037a2:	0001f517          	auipc	a0,0x1f
    800037a6:	3de50513          	addi	a0,a0,990 # 80022b80 <__func__.2+0x318>
    800037aa:	4c61d0ef          	jal	80020c70 <printf>
    800037ae:	00042797          	auipc	a5,0x42
    800037b2:	8637c783          	lbu	a5,-1949(a5) # 80045011 <excpt+0x1>
    800037b6:	e6078ce3          	beqz	a5,8000362e <m_and_hs_using_vs_access_1+0x470>
    800037ba:	becd                	j	800033ac <m_and_hs_using_vs_access_1+0x1ee>
    TEST_ASSERT("hs hlvw vs hlvwu",
    800037bc:	d9341de3          	bne	s0,s3,80003556 <m_and_hs_using_vs_access_1+0x398>
    800037c0:	0001f597          	auipc	a1,0x1f
    800037c4:	37058593          	addi	a1,a1,880 # 80022b30 <__func__.2+0x2c8>
    800037c8:	0001f517          	auipc	a0,0x1f
    800037cc:	3b850513          	addi	a0,a0,952 # 80022b80 <__func__.2+0x318>
    800037d0:	4a01d0ef          	jal	80020c70 <printf>
    800037d4:	00042797          	auipc	a5,0x42
    800037d8:	83d7c783          	lbu	a5,-1987(a5) # 80045011 <excpt+0x1>
    800037dc:	e80789e3          	beqz	a5,8000366e <m_and_hs_using_vs_access_1+0x4b0>
    800037e0:	b369                	j	8000356a <m_and_hs_using_vs_access_1+0x3ac>
    TEST_ASSERT("hs hlvh vs hlvhu",
    800037e2:	cd299ee3          	bne	s3,s2,800034be <m_and_hs_using_vs_access_1+0x300>
    800037e6:	0001f597          	auipc	a1,0x1f
    800037ea:	34a58593          	addi	a1,a1,842 # 80022b30 <__func__.2+0x2c8>
    800037ee:	0001f517          	auipc	a0,0x1f
    800037f2:	39250513          	addi	a0,a0,914 # 80022b80 <__func__.2+0x318>
    800037f6:	47a1d0ef          	jal	80020c70 <printf>
    800037fa:	00042797          	auipc	a5,0x42
    800037fe:	8177c783          	lbu	a5,-2025(a5) # 80045011 <excpt+0x1>
    80003802:	ea078ce3          	beqz	a5,800036ba <m_and_hs_using_vs_access_1+0x4fc>
    80003806:	b1f1                	j	800034d2 <m_and_hs_using_vs_access_1+0x314>

0000000080003808 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003808:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000380a:	0001e597          	auipc	a1,0x1e
    8000380e:	a6658593          	addi	a1,a1,-1434 # 80021270 <__func__.10>
    80003812:	0001f517          	auipc	a0,0x1f
    80003816:	33e50513          	addi	a0,a0,830 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_2(){
    8000381a:	ec06                	sd	ra,24(sp)
    8000381c:	e822                	sd	s0,16(sp)
    8000381e:	e426                	sd	s1,8(sp)
    80003820:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003822:	44e1d0ef          	jal	80020c70 <printf>
    80003826:	4529                	li	a0,10
    80003828:	2d91c0ef          	jal	80020300 <putchar>
    
    hspt_init();
    8000382c:	db5fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003830:	ff3fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003834:	e7dfc0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80003838:	450d                	li	a0,3
    8000383a:	a9efd0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000383e:	4509                	li	a0,2
    80003840:	9b8fd0ef          	jal	800009f8 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003844:	0330000f          	fence	rw,rw
    80003848:	00041417          	auipc	s0,0x41
    8000384c:	7c840413          	addi	s0,s0,1992 # 80045010 <excpt>
    80003850:	4785                	li	a5,1
    80003852:	00041717          	auipc	a4,0x41
    80003856:	7e073b23          	sd	zero,2038(a4) # 80045048 <excpt+0x38>
    8000385a:	00f41023          	sh	a5,0(s0)
    8000385e:	0330000f          	fence	rw,rw
    asm volatile(
    80003862:	200037b7          	lui	a5,0x20003
    80003866:	078e                	slli	a5,a5,0x3
    80003868:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    8000386c:	08200593          	li	a1,130
    80003870:	00020617          	auipc	a2,0x20
    80003874:	a7860613          	addi	a2,a2,-1416 # 800232e8 <__func__.2+0xa80>
    80003878:	0001f517          	auipc	a0,0x1f
    8000387c:	2f050513          	addi	a0,a0,752 # 80022b68 <__func__.2+0x300>
    80003880:	3f01d0ef          	jal	80020c70 <printf>
    80003884:	00041797          	auipc	a5,0x41
    80003888:	78d7c783          	lbu	a5,1933(a5) # 80045011 <excpt+0x1>
    8000388c:	0001f597          	auipc	a1,0x1f
    80003890:	2a458593          	addi	a1,a1,676 # 80022b30 <__func__.2+0x2c8>
    80003894:	c789                	beqz	a5,8000389e <m_and_hs_using_vs_access_2+0x96>
    80003896:	0001f597          	auipc	a1,0x1f
    8000389a:	2aa58593          	addi	a1,a1,682 # 80022b40 <__func__.2+0x2d8>
    8000389e:	0001f517          	auipc	a0,0x1f
    800038a2:	2e250513          	addi	a0,a0,738 # 80022b80 <__func__.2+0x318>
    800038a6:	3ca1d0ef          	jal	80020c70 <printf>
    800038aa:	00041797          	auipc	a5,0x41
    800038ae:	7677c783          	lbu	a5,1895(a5) # 80045011 <excpt+0x1>
    800038b2:	28079563          	bnez	a5,80003b3c <m_and_hs_using_vs_access_2+0x334>
    800038b6:	4529                	li	a0,10
    800038b8:	2491c0ef          	jal	80020300 <putchar>
    800038bc:	00041917          	auipc	s2,0x41
    800038c0:	75594903          	lbu	s2,1877(s2) # 80045011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    800038c4:	0330000f          	fence	rw,rw
    800038c8:	4785                	li	a5,1
    800038ca:	00041717          	auipc	a4,0x41
    800038ce:	76073f23          	sd	zero,1918(a4) # 80045048 <excpt+0x38>
    800038d2:	00f41023          	sh	a5,0(s0)
    800038d6:	0330000f          	fence	rw,rw
    800038da:	1782                	slli	a5,a5,0x20
    800038dc:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    800038e0:	08200593          	li	a1,130
    800038e4:	00020617          	auipc	a2,0x20
    800038e8:	a2c60613          	addi	a2,a2,-1492 # 80023310 <__func__.2+0xaa8>
    800038ec:	0001f517          	auipc	a0,0x1f
    800038f0:	27c50513          	addi	a0,a0,636 # 80022b68 <__func__.2+0x300>
    800038f4:	37c1d0ef          	jal	80020c70 <printf>
    800038f8:	00041797          	auipc	a5,0x41
    800038fc:	7197c783          	lbu	a5,1817(a5) # 80045011 <excpt+0x1>
    80003900:	0001f597          	auipc	a1,0x1f
    80003904:	24058593          	addi	a1,a1,576 # 80022b40 <__func__.2+0x2d8>
    80003908:	e789                	bnez	a5,80003912 <m_and_hs_using_vs_access_2+0x10a>
    8000390a:	0001f597          	auipc	a1,0x1f
    8000390e:	22658593          	addi	a1,a1,550 # 80022b30 <__func__.2+0x2c8>
    80003912:	0001f517          	auipc	a0,0x1f
    80003916:	26e50513          	addi	a0,a0,622 # 80022b80 <__func__.2+0x318>
    8000391a:	3561d0ef          	jal	80020c70 <printf>
    8000391e:	00041797          	auipc	a5,0x41
    80003922:	6f37c783          	lbu	a5,1779(a5) # 80045011 <excpt+0x1>
    80003926:	20079063          	bnez	a5,80003b26 <m_and_hs_using_vs_access_2+0x31e>
    8000392a:	4529                	li	a0,10
    8000392c:	1d51c0ef          	jal	80020300 <putchar>
    80003930:	4481                	li	s1,0
    80003932:	00091863          	bnez	s2,80003942 <m_and_hs_using_vs_access_2+0x13a>
    80003936:	00041497          	auipc	s1,0x41
    8000393a:	6db4c483          	lbu	s1,1755(s1) # 80045011 <excpt+0x1>
    8000393e:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003942:	0330000f          	fence	rw,rw
    80003946:	4785                	li	a5,1
    80003948:	00041717          	auipc	a4,0x41
    8000394c:	70073023          	sd	zero,1792(a4) # 80045048 <excpt+0x38>
    80003950:	00f41023          	sh	a5,0(s0)
    80003954:	0330000f          	fence	rw,rw
    80003958:	001007b7          	lui	a5,0x100
    8000395c:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    8000395e:	07b2                	slli	a5,a5,0xc
    80003960:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003964:	08200593          	li	a1,130
    80003968:	00020617          	auipc	a2,0x20
    8000396c:	9d860613          	addi	a2,a2,-1576 # 80023340 <__func__.2+0xad8>
    80003970:	0001f517          	auipc	a0,0x1f
    80003974:	1f850513          	addi	a0,a0,504 # 80022b68 <__func__.2+0x300>
    80003978:	2f81d0ef          	jal	80020c70 <printf>
    8000397c:	00041797          	auipc	a5,0x41
    80003980:	6957c783          	lbu	a5,1685(a5) # 80045011 <excpt+0x1>
    80003984:	0001f597          	auipc	a1,0x1f
    80003988:	1bc58593          	addi	a1,a1,444 # 80022b40 <__func__.2+0x2d8>
    8000398c:	c789                	beqz	a5,80003996 <m_and_hs_using_vs_access_2+0x18e>
    8000398e:	6418                	ld	a4,8(s0)
    80003990:	47d5                	li	a5,21
    80003992:	1ef70563          	beq	a4,a5,80003b7c <m_and_hs_using_vs_access_2+0x374>
    80003996:	0001f517          	auipc	a0,0x1f
    8000399a:	1ea50513          	addi	a0,a0,490 # 80022b80 <__func__.2+0x318>
    8000399e:	2d21d0ef          	jal	80020c70 <printf>
    800039a2:	00041797          	auipc	a5,0x41
    800039a6:	66f7c783          	lbu	a5,1647(a5) # 80045011 <excpt+0x1>
    800039aa:	c789                	beqz	a5,800039b4 <m_and_hs_using_vs_access_2+0x1ac>
    800039ac:	6418                	ld	a4,8(s0)
    800039ae:	47d5                	li	a5,21
    800039b0:	14f70e63          	beq	a4,a5,80003b0c <m_and_hs_using_vs_access_2+0x304>
    800039b4:	0001f517          	auipc	a0,0x1f
    800039b8:	1d450513          	addi	a0,a0,468 # 80022b88 <__func__.2+0x320>
    800039bc:	2b41d0ef          	jal	80020c70 <printf>
    800039c0:	02900513          	li	a0,41
    800039c4:	13d1c0ef          	jal	80020300 <putchar>
    800039c8:	4529                	li	a0,10
    800039ca:	1371c0ef          	jal	80020300 <putchar>
    800039ce:	c881                	beqz	s1,800039de <m_and_hs_using_vs_access_2+0x1d6>
    800039d0:	00041797          	auipc	a5,0x41
    800039d4:	6417c783          	lbu	a5,1601(a5) # 80045011 <excpt+0x1>
    800039d8:	4481                	li	s1,0
    800039da:	0e079d63          	bnez	a5,80003ad4 <m_and_hs_using_vs_access_2+0x2cc>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    800039de:	0330000f          	fence	rw,rw
    800039e2:	4785                	li	a5,1
    800039e4:	00041717          	auipc	a4,0x41
    800039e8:	66073223          	sd	zero,1636(a4) # 80045048 <excpt+0x38>
    800039ec:	00f41023          	sh	a5,0(s0)
    800039f0:	0330000f          	fence	rw,rw
    800039f4:	001007b7          	lui	a5,0x100
    800039f8:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    800039fa:	07b2                	slli	a5,a5,0xc
    800039fc:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003a00:	08200593          	li	a1,130
    80003a04:	00020617          	auipc	a2,0x20
    80003a08:	97460613          	addi	a2,a2,-1676 # 80023378 <__func__.2+0xb10>
    80003a0c:	0001f517          	auipc	a0,0x1f
    80003a10:	15c50513          	addi	a0,a0,348 # 80022b68 <__func__.2+0x300>
    80003a14:	25c1d0ef          	jal	80020c70 <printf>
    80003a18:	00041797          	auipc	a5,0x41
    80003a1c:	5f97c783          	lbu	a5,1529(a5) # 80045011 <excpt+0x1>
    80003a20:	0001f597          	auipc	a1,0x1f
    80003a24:	12058593          	addi	a1,a1,288 # 80022b40 <__func__.2+0x2d8>
    80003a28:	c789                	beqz	a5,80003a32 <m_and_hs_using_vs_access_2+0x22a>
    80003a2a:	6418                	ld	a4,8(s0)
    80003a2c:	47b5                	li	a5,13
    80003a2e:	12f70263          	beq	a4,a5,80003b52 <m_and_hs_using_vs_access_2+0x34a>
    80003a32:	0001f517          	auipc	a0,0x1f
    80003a36:	14e50513          	addi	a0,a0,334 # 80022b80 <__func__.2+0x318>
    80003a3a:	2361d0ef          	jal	80020c70 <printf>
    80003a3e:	00041797          	auipc	a5,0x41
    80003a42:	5d37c783          	lbu	a5,1491(a5) # 80045011 <excpt+0x1>
    80003a46:	c789                	beqz	a5,80003a50 <m_and_hs_using_vs_access_2+0x248>
    80003a48:	6418                	ld	a4,8(s0)
    80003a4a:	47b5                	li	a5,13
    80003a4c:	0af70563          	beq	a4,a5,80003af6 <m_and_hs_using_vs_access_2+0x2ee>
    80003a50:	0001f517          	auipc	a0,0x1f
    80003a54:	13850513          	addi	a0,a0,312 # 80022b88 <__func__.2+0x320>
    80003a58:	2181d0ef          	jal	80020c70 <printf>
    80003a5c:	02900513          	li	a0,41
    80003a60:	0a11c0ef          	jal	80020300 <putchar>
    80003a64:	4529                	li	a0,10
    80003a66:	09b1c0ef          	jal	80020300 <putchar>
    80003a6a:	c491                	beqz	s1,80003a76 <m_and_hs_using_vs_access_2+0x26e>
    80003a6c:	00041797          	auipc	a5,0x41
    80003a70:	5a57c783          	lbu	a5,1445(a5) # 80045011 <excpt+0x1>
    80003a74:	eb85                	bnez	a5,80003aa4 <m_and_hs_using_vs_access_2+0x29c>
    80003a76:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003a78:	0001f597          	auipc	a1,0x1f
    80003a7c:	0c858593          	addi	a1,a1,200 # 80022b40 <__func__.2+0x2d8>
    80003a80:	0001f517          	auipc	a0,0x1f
    80003a84:	16850513          	addi	a0,a0,360 # 80022be8 <__func__.2+0x380>
    80003a88:	1e81d0ef          	jal	80020c70 <printf>
    80003a8c:	4511                	li	a0,4
    80003a8e:	84afd0ef          	jal	80000ad8 <goto_priv>
    80003a92:	917fd0ef          	jal	800013a8 <reset_state>
}
    80003a96:	60e2                	ld	ra,24(sp)
    80003a98:	8522                	mv	a0,s0
    80003a9a:	6442                	ld	s0,16(sp)
    80003a9c:	64a2                	ld	s1,8(sp)
    80003a9e:	6902                	ld	s2,0(sp)
    80003aa0:	6105                	addi	sp,sp,32
    80003aa2:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003aa4:	6418                	ld	a4,8(s0)
    80003aa6:	47b5                	li	a5,13
    80003aa8:	4401                	li	s0,0
    TEST_END();
    80003aaa:	0001f597          	auipc	a1,0x1f
    80003aae:	09658593          	addi	a1,a1,150 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ab2:	fcf717e3          	bne	a4,a5,80003a80 <m_and_hs_using_vs_access_2+0x278>
    80003ab6:	00041417          	auipc	s0,0x41
    80003aba:	58a44403          	lbu	s0,1418(s0) # 80045040 <excpt+0x30>
    80003abe:	d069                	beqz	s0,80003a80 <m_and_hs_using_vs_access_2+0x278>
    80003ac0:	00041797          	auipc	a5,0x41
    80003ac4:	5817c783          	lbu	a5,1409(a5) # 80045041 <excpt+0x31>
    TEST_END();
    80003ac8:	0001f597          	auipc	a1,0x1f
    80003acc:	06858593          	addi	a1,a1,104 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ad0:	dbc5                	beqz	a5,80003a80 <m_and_hs_using_vs_access_2+0x278>
    80003ad2:	b755                	j	80003a76 <m_and_hs_using_vs_access_2+0x26e>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003ad4:	6418                	ld	a4,8(s0)
    80003ad6:	47d5                	li	a5,21
    80003ad8:	f0f713e3          	bne	a4,a5,800039de <m_and_hs_using_vs_access_2+0x1d6>
    80003adc:	00041797          	auipc	a5,0x41
    80003ae0:	5647c783          	lbu	a5,1380(a5) # 80045040 <excpt+0x30>
    80003ae4:	ee078de3          	beqz	a5,800039de <m_and_hs_using_vs_access_2+0x1d6>
    80003ae8:	00041497          	auipc	s1,0x41
    80003aec:	5594c483          	lbu	s1,1369(s1) # 80045041 <excpt+0x31>
    80003af0:	0014c493          	xori	s1,s1,1
    80003af4:	b5ed                	j	800039de <m_and_hs_using_vs_access_2+0x1d6>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003af6:	00041797          	auipc	a5,0x41
    80003afa:	54a7c783          	lbu	a5,1354(a5) # 80045040 <excpt+0x30>
    80003afe:	dba9                	beqz	a5,80003a50 <m_and_hs_using_vs_access_2+0x248>
    80003b00:	00041797          	auipc	a5,0x41
    80003b04:	5417c783          	lbu	a5,1345(a5) # 80045041 <excpt+0x31>
    80003b08:	dfb1                	beqz	a5,80003a64 <m_and_hs_using_vs_access_2+0x25c>
    80003b0a:	b799                	j	80003a50 <m_and_hs_using_vs_access_2+0x248>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003b0c:	00041797          	auipc	a5,0x41
    80003b10:	5347c783          	lbu	a5,1332(a5) # 80045040 <excpt+0x30>
    80003b14:	ea0780e3          	beqz	a5,800039b4 <m_and_hs_using_vs_access_2+0x1ac>
    80003b18:	00041797          	auipc	a5,0x41
    80003b1c:	5297c783          	lbu	a5,1321(a5) # 80045041 <excpt+0x31>
    80003b20:	ea0784e3          	beqz	a5,800039c8 <m_and_hs_using_vs_access_2+0x1c0>
    80003b24:	bd41                	j	800039b4 <m_and_hs_using_vs_access_2+0x1ac>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003b26:	0001f517          	auipc	a0,0x1f
    80003b2a:	06250513          	addi	a0,a0,98 # 80022b88 <__func__.2+0x320>
    80003b2e:	1421d0ef          	jal	80020c70 <printf>
    80003b32:	02900513          	li	a0,41
    80003b36:	7ca1c0ef          	jal	80020300 <putchar>
    80003b3a:	bbc5                	j	8000392a <m_and_hs_using_vs_access_2+0x122>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003b3c:	0001f517          	auipc	a0,0x1f
    80003b40:	04c50513          	addi	a0,a0,76 # 80022b88 <__func__.2+0x320>
    80003b44:	12c1d0ef          	jal	80020c70 <printf>
    80003b48:	02900513          	li	a0,41
    80003b4c:	7b41c0ef          	jal	80020300 <putchar>
    80003b50:	b39d                	j	800038b6 <m_and_hs_using_vs_access_2+0xae>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003b52:	00041797          	auipc	a5,0x41
    80003b56:	4ee7c783          	lbu	a5,1262(a5) # 80045040 <excpt+0x30>
    80003b5a:	ec078ce3          	beqz	a5,80003a32 <m_and_hs_using_vs_access_2+0x22a>
    80003b5e:	00041797          	auipc	a5,0x41
    80003b62:	4e37c783          	lbu	a5,1251(a5) # 80045041 <excpt+0x31>
    80003b66:	0001f597          	auipc	a1,0x1f
    80003b6a:	fca58593          	addi	a1,a1,-54 # 80022b30 <__func__.2+0x2c8>
    80003b6e:	ec0782e3          	beqz	a5,80003a32 <m_and_hs_using_vs_access_2+0x22a>
    80003b72:	0001f597          	auipc	a1,0x1f
    80003b76:	fce58593          	addi	a1,a1,-50 # 80022b40 <__func__.2+0x2d8>
    80003b7a:	bd65                	j	80003a32 <m_and_hs_using_vs_access_2+0x22a>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003b7c:	00041797          	auipc	a5,0x41
    80003b80:	4c47c783          	lbu	a5,1220(a5) # 80045040 <excpt+0x30>
    80003b84:	e00789e3          	beqz	a5,80003996 <m_and_hs_using_vs_access_2+0x18e>
    80003b88:	00041797          	auipc	a5,0x41
    80003b8c:	4b97c783          	lbu	a5,1209(a5) # 80045041 <excpt+0x31>
    80003b90:	0001f597          	auipc	a1,0x1f
    80003b94:	fa058593          	addi	a1,a1,-96 # 80022b30 <__func__.2+0x2c8>
    80003b98:	de078fe3          	beqz	a5,80003996 <m_and_hs_using_vs_access_2+0x18e>
    80003b9c:	0001f597          	auipc	a1,0x1f
    80003ba0:	fa458593          	addi	a1,a1,-92 # 80022b40 <__func__.2+0x2d8>
    80003ba4:	bbcd                	j	80003996 <m_and_hs_using_vs_access_2+0x18e>

0000000080003ba6 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003ba6:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003ba8:	0001d597          	auipc	a1,0x1d
    80003bac:	6e858593          	addi	a1,a1,1768 # 80021290 <__func__.9>
    80003bb0:	0001f517          	auipc	a0,0x1f
    80003bb4:	fa050513          	addi	a0,a0,-96 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_3(){
    80003bb8:	ec06                	sd	ra,24(sp)
    80003bba:	e822                	sd	s0,16(sp)
    80003bbc:	e426                	sd	s1,8(sp)
    80003bbe:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003bc0:	0b01d0ef          	jal	80020c70 <printf>
    80003bc4:	4529                	li	a0,10
    80003bc6:	73a1c0ef          	jal	80020300 <putchar>
    
    hspt_init();
    80003bca:	a17fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003bce:	c55fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003bd2:	adffc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003bd6:	4511                	li	a0,4
    80003bd8:	f01fc0ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    80003bdc:	0330000f          	fence	rw,rw
    80003be0:	00041417          	auipc	s0,0x41
    80003be4:	43040413          	addi	s0,s0,1072 # 80045010 <excpt>
    80003be8:	4785                	li	a5,1
    80003bea:	00041717          	auipc	a4,0x41
    80003bee:	44073f23          	sd	zero,1118(a4) # 80045048 <excpt+0x38>
    80003bf2:	00f41023          	sh	a5,0(s0)
    80003bf6:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    80003bfa:	00027497          	auipc	s1,0x27
    80003bfe:	8a648493          	addi	s1,s1,-1882 # 8002a4a0 <__func__.2+0x7c38>
    80003c02:	6098                	ld	a4,0(s1)
    80003c04:	440197b7          	lui	a5,0x44019
    80003c08:	0786                	slli	a5,a5,0x1
    80003c0a:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003c0c:	00029717          	auipc	a4,0x29
    80003c10:	8c072703          	lw	a4,-1856(a4) # 8002c4cc <curr_priv>
    80003c14:	4791                	li	a5,4
    80003c16:	02f70763          	beq	a4,a5,80003c44 <m_and_hs_using_vs_access_3+0x9e>
        ERROR("trying to read as mprv from low privilege");
    80003c1a:	0001f517          	auipc	a0,0x1f
    80003c1e:	61650513          	addi	a0,a0,1558 # 80023230 <__func__.2+0x9c8>
    80003c22:	04e1d0ef          	jal	80020c70 <printf>
    80003c26:	0fe00613          	li	a2,254
    80003c2a:	0001d597          	auipc	a1,0x1d
    80003c2e:	63658593          	addi	a1,a1,1590 # 80021260 <__func__.11>
    80003c32:	0001f517          	auipc	a0,0x1f
    80003c36:	0a650513          	addi	a0,a0,166 # 80022cd8 <__func__.2+0x470>
    80003c3a:	0361d0ef          	jal	80020c70 <printf>
    80003c3e:	4501                	li	a0,0
    80003c40:	7411c0ef          	jal	80020b80 <exit>
    set_prev_priv(priv);
    80003c44:	4509                	li	a0,2
    80003c46:	db3fc0ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    80003c4a:	000807b7          	lui	a5,0x80
    80003c4e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003c50:	07b6                	slli	a5,a5,0xd
    80003c52:	00020737          	lui	a4,0x20
    80003c56:	30072073          	csrs	mstatus,a4
    80003c5a:	6394                	ld	a3,0(a5)
    80003c5c:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003c60:	08200593          	li	a1,130
    80003c64:	0001f617          	auipc	a2,0x1f
    80003c68:	74c60613          	addi	a2,a2,1868 # 800233b0 <__func__.2+0xb48>
    80003c6c:	0001f517          	auipc	a0,0x1f
    80003c70:	efc50513          	addi	a0,a0,-260 # 80022b68 <__func__.2+0x300>
    80003c74:	7fd1c0ef          	jal	80020c70 <printf>
    80003c78:	00041797          	auipc	a5,0x41
    80003c7c:	3997c783          	lbu	a5,921(a5) # 80045011 <excpt+0x1>
    80003c80:	0001f597          	auipc	a1,0x1f
    80003c84:	ec058593          	addi	a1,a1,-320 # 80022b40 <__func__.2+0x2d8>
    80003c88:	cf89                	beqz	a5,80003ca2 <m_and_hs_using_vs_access_3+0xfc>
    80003c8a:	6418                	ld	a4,8(s0)
    80003c8c:	47b5                	li	a5,13
    80003c8e:	0001f597          	auipc	a1,0x1f
    80003c92:	ea258593          	addi	a1,a1,-350 # 80022b30 <__func__.2+0x2c8>
    80003c96:	00f70663          	beq	a4,a5,80003ca2 <m_and_hs_using_vs_access_3+0xfc>
    80003c9a:	0001f597          	auipc	a1,0x1f
    80003c9e:	ea658593          	addi	a1,a1,-346 # 80022b40 <__func__.2+0x2d8>
    80003ca2:	0001f517          	auipc	a0,0x1f
    80003ca6:	ede50513          	addi	a0,a0,-290 # 80022b80 <__func__.2+0x318>
    80003caa:	7c71c0ef          	jal	80020c70 <printf>
    80003cae:	00041797          	auipc	a5,0x41
    80003cb2:	3637c783          	lbu	a5,867(a5) # 80045011 <excpt+0x1>
    80003cb6:	c789                	beqz	a5,80003cc0 <m_and_hs_using_vs_access_3+0x11a>
    80003cb8:	6418                	ld	a4,8(s0)
    80003cba:	47b5                	li	a5,13
    80003cbc:	00f70c63          	beq	a4,a5,80003cd4 <m_and_hs_using_vs_access_3+0x12e>
    80003cc0:	0001f517          	auipc	a0,0x1f
    80003cc4:	ec850513          	addi	a0,a0,-312 # 80022b88 <__func__.2+0x320>
    80003cc8:	7a91c0ef          	jal	80020c70 <printf>
    80003ccc:	02900513          	li	a0,41
    80003cd0:	6301c0ef          	jal	80020300 <putchar>
    80003cd4:	4529                	li	a0,10
    80003cd6:	62a1c0ef          	jal	80020300 <putchar>
    80003cda:	00041797          	auipc	a5,0x41
    80003cde:	3377c783          	lbu	a5,823(a5) # 80045011 <excpt+0x1>
    80003ce2:	4901                	li	s2,0
    80003ce4:	c791                	beqz	a5,80003cf0 <m_and_hs_using_vs_access_3+0x14a>
    80003ce6:	00843903          	ld	s2,8(s0)
    80003cea:	194d                	addi	s2,s2,-13
    80003cec:	00193913          	seqz	s2,s2
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80003cf0:	0330000f          	fence	rw,rw
    80003cf4:	4785                	li	a5,1
    80003cf6:	00041717          	auipc	a4,0x41
    80003cfa:	34073923          	sd	zero,850(a4) # 80045048 <excpt+0x38>
    80003cfe:	00f41023          	sh	a5,0(s0)
    80003d02:	0330000f          	fence	rw,rw
    80003d06:	6098                	ld	a4,0(s1)
    80003d08:	440197b7          	lui	a5,0x44019
    80003d0c:	0786                	slli	a5,a5,0x1
    80003d0e:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003d10:	00028717          	auipc	a4,0x28
    80003d14:	7bc72703          	lw	a4,1980(a4) # 8002c4cc <curr_priv>
    80003d18:	4791                	li	a5,4
    80003d1a:	f0f710e3          	bne	a4,a5,80003c1a <m_and_hs_using_vs_access_3+0x74>
    set_prev_priv(priv);
    80003d1e:	4501                	li	a0,0
    80003d20:	cd9fc0ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    80003d24:	000807b7          	lui	a5,0x80
    80003d28:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003d2a:	07b6                	slli	a5,a5,0xd
    80003d2c:	00020737          	lui	a4,0x20
    80003d30:	30072073          	csrs	mstatus,a4
    80003d34:	6394                	ld	a3,0(a5)
    80003d36:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003d3a:	08200593          	li	a1,130
    80003d3e:	0001f617          	auipc	a2,0x1f
    80003d42:	6a260613          	addi	a2,a2,1698 # 800233e0 <__func__.2+0xb78>
    80003d46:	0001f517          	auipc	a0,0x1f
    80003d4a:	e2250513          	addi	a0,a0,-478 # 80022b68 <__func__.2+0x300>
    80003d4e:	7231c0ef          	jal	80020c70 <printf>
    80003d52:	00041797          	auipc	a5,0x41
    80003d56:	2bf7c783          	lbu	a5,703(a5) # 80045011 <excpt+0x1>
    80003d5a:	0001f597          	auipc	a1,0x1f
    80003d5e:	de658593          	addi	a1,a1,-538 # 80022b40 <__func__.2+0x2d8>
    80003d62:	e789                	bnez	a5,80003d6c <m_and_hs_using_vs_access_3+0x1c6>
    80003d64:	0001f597          	auipc	a1,0x1f
    80003d68:	dcc58593          	addi	a1,a1,-564 # 80022b30 <__func__.2+0x2c8>
    80003d6c:	0001f517          	auipc	a0,0x1f
    80003d70:	e1450513          	addi	a0,a0,-492 # 80022b80 <__func__.2+0x318>
    80003d74:	6fd1c0ef          	jal	80020c70 <printf>
    80003d78:	00041797          	auipc	a5,0x41
    80003d7c:	2997c783          	lbu	a5,665(a5) # 80045011 <excpt+0x1>
    80003d80:	eba1                	bnez	a5,80003dd0 <m_and_hs_using_vs_access_3+0x22a>
    80003d82:	4529                	li	a0,10
    80003d84:	57c1c0ef          	jal	80020300 <putchar>
    80003d88:	00090763          	beqz	s2,80003d96 <m_and_hs_using_vs_access_3+0x1f0>
    80003d8c:	00041797          	auipc	a5,0x41
    80003d90:	2857c783          	lbu	a5,645(a5) # 80045011 <excpt+0x1>
    80003d94:	cb85                	beqz	a5,80003dc4 <m_and_hs_using_vs_access_3+0x21e>
    80003d96:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80003d98:	0001f597          	auipc	a1,0x1f
    80003d9c:	da858593          	addi	a1,a1,-600 # 80022b40 <__func__.2+0x2d8>
    80003da0:	0001f517          	auipc	a0,0x1f
    80003da4:	e4850513          	addi	a0,a0,-440 # 80022be8 <__func__.2+0x380>
    80003da8:	6c91c0ef          	jal	80020c70 <printf>
    80003dac:	4511                	li	a0,4
    80003dae:	d2bfc0ef          	jal	80000ad8 <goto_priv>
    80003db2:	df6fd0ef          	jal	800013a8 <reset_state>
}
    80003db6:	60e2                	ld	ra,24(sp)
    80003db8:	8522                	mv	a0,s0
    80003dba:	6442                	ld	s0,16(sp)
    80003dbc:	64a2                	ld	s1,8(sp)
    80003dbe:	6902                	ld	s2,0(sp)
    80003dc0:	6105                	addi	sp,sp,32
    80003dc2:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003dc4:	4405                	li	s0,1
    TEST_END();
    80003dc6:	0001f597          	auipc	a1,0x1f
    80003dca:	d6a58593          	addi	a1,a1,-662 # 80022b30 <__func__.2+0x2c8>
    80003dce:	bfc9                	j	80003da0 <m_and_hs_using_vs_access_3+0x1fa>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003dd0:	0001f517          	auipc	a0,0x1f
    80003dd4:	db850513          	addi	a0,a0,-584 # 80022b88 <__func__.2+0x320>
    80003dd8:	6991c0ef          	jal	80020c70 <printf>
    80003ddc:	02900513          	li	a0,41
    80003de0:	5201c0ef          	jal	80020300 <putchar>
    80003de4:	bf79                	j	80003d82 <m_and_hs_using_vs_access_3+0x1dc>

0000000080003de6 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80003de6:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003de8:	0001d597          	auipc	a1,0x1d
    80003dec:	4c858593          	addi	a1,a1,1224 # 800212b0 <__func__.8>
    80003df0:	0001f517          	auipc	a0,0x1f
    80003df4:	d6050513          	addi	a0,a0,-672 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_4(){
    80003df8:	ec06                	sd	ra,24(sp)
    80003dfa:	e822                	sd	s0,16(sp)
    80003dfc:	e426                	sd	s1,8(sp)
    80003dfe:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003e00:	6711c0ef          	jal	80020c70 <printf>
    80003e04:	4529                	li	a0,10
    80003e06:	4fa1c0ef          	jal	80020300 <putchar>
    
    hspt_init();
    80003e0a:	fd6fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003e0e:	a15fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003e12:	89ffc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80003e16:	450d                	li	a0,3
    80003e18:	cc1fc0ef          	jal	80000ad8 <goto_priv>

    set_prev_priv(PRIV_VU);
    80003e1c:	4501                	li	a0,0
    80003e1e:	bdbfc0ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003e22:	0330000f          	fence	rw,rw
    80003e26:	00041417          	auipc	s0,0x41
    80003e2a:	1ea40413          	addi	s0,s0,490 # 80045010 <excpt>
    80003e2e:	4785                	li	a5,1
    80003e30:	00041717          	auipc	a4,0x41
    80003e34:	20073c23          	sd	zero,536(a4) # 80045048 <excpt+0x38>
    80003e38:	00f41023          	sh	a5,0(s0)
    80003e3c:	0330000f          	fence	rw,rw
    80003e40:	00026497          	auipc	s1,0x26
    80003e44:	66048493          	addi	s1,s1,1632 # 8002a4a0 <__func__.2+0x7c38>
    80003e48:	6094                	ld	a3,0(s1)
    80003e4a:	44019737          	lui	a4,0x44019
    asm volatile(
    80003e4e:	000807b7          	lui	a5,0x80
    80003e52:	0706                	slli	a4,a4,0x1
    80003e54:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003e56:	e314                	sd	a3,0(a4)
    80003e58:	07b6                	slli	a5,a5,0xd
    80003e5a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003e5e:	08200593          	li	a1,130
    80003e62:	0001f617          	auipc	a2,0x1f
    80003e66:	5a660613          	addi	a2,a2,1446 # 80023408 <__func__.2+0xba0>
    80003e6a:	0001f517          	auipc	a0,0x1f
    80003e6e:	cfe50513          	addi	a0,a0,-770 # 80022b68 <__func__.2+0x300>
    80003e72:	5ff1c0ef          	jal	80020c70 <printf>
    80003e76:	00041797          	auipc	a5,0x41
    80003e7a:	19b7c783          	lbu	a5,411(a5) # 80045011 <excpt+0x1>
    80003e7e:	0001f597          	auipc	a1,0x1f
    80003e82:	cb258593          	addi	a1,a1,-846 # 80022b30 <__func__.2+0x2c8>
    80003e86:	c789                	beqz	a5,80003e90 <m_and_hs_using_vs_access_4+0xaa>
    80003e88:	0001f597          	auipc	a1,0x1f
    80003e8c:	cb858593          	addi	a1,a1,-840 # 80022b40 <__func__.2+0x2d8>
    80003e90:	0001f517          	auipc	a0,0x1f
    80003e94:	cf050513          	addi	a0,a0,-784 # 80022b80 <__func__.2+0x318>
    80003e98:	5d91c0ef          	jal	80020c70 <printf>
    80003e9c:	00041797          	auipc	a5,0x41
    80003ea0:	1757c783          	lbu	a5,373(a5) # 80045011 <excpt+0x1>
    80003ea4:	10079963          	bnez	a5,80003fb6 <m_and_hs_using_vs_access_4+0x1d0>
    80003ea8:	4529                	li	a0,10
    80003eaa:	4561c0ef          	jal	80020300 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80003eae:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003eb0:	00041917          	auipc	s2,0x41
    80003eb4:	16194903          	lbu	s2,353(s2) # 80045011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    80003eb8:	b41fc0ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003ebc:	0330000f          	fence	rw,rw
    80003ec0:	4785                	li	a5,1
    80003ec2:	00041717          	auipc	a4,0x41
    80003ec6:	18073323          	sd	zero,390(a4) # 80045048 <excpt+0x38>
    80003eca:	00f41023          	sh	a5,0(s0)
    80003ece:	0330000f          	fence	rw,rw
    80003ed2:	6094                	ld	a3,0(s1)
    80003ed4:	44019737          	lui	a4,0x44019
    80003ed8:	000807b7          	lui	a5,0x80
    80003edc:	0706                	slli	a4,a4,0x1
    80003ede:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003ee0:	e314                	sd	a3,0(a4)
    80003ee2:	07b6                	slli	a5,a5,0xd
    80003ee4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003ee8:	08200593          	li	a1,130
    80003eec:	0001f617          	auipc	a2,0x1f
    80003ef0:	54c60613          	addi	a2,a2,1356 # 80023438 <__func__.2+0xbd0>
    80003ef4:	0001f517          	auipc	a0,0x1f
    80003ef8:	c7450513          	addi	a0,a0,-908 # 80022b68 <__func__.2+0x300>
    80003efc:	5751c0ef          	jal	80020c70 <printf>
    80003f00:	00041797          	auipc	a5,0x41
    80003f04:	1117c783          	lbu	a5,273(a5) # 80045011 <excpt+0x1>
    80003f08:	0001f597          	auipc	a1,0x1f
    80003f0c:	c3858593          	addi	a1,a1,-968 # 80022b40 <__func__.2+0x2d8>
    80003f10:	cf89                	beqz	a5,80003f2a <m_and_hs_using_vs_access_4+0x144>
    80003f12:	6418                	ld	a4,8(s0)
    80003f14:	47b5                	li	a5,13
    80003f16:	0001f597          	auipc	a1,0x1f
    80003f1a:	c1a58593          	addi	a1,a1,-998 # 80022b30 <__func__.2+0x2c8>
    80003f1e:	00f70663          	beq	a4,a5,80003f2a <m_and_hs_using_vs_access_4+0x144>
    80003f22:	0001f597          	auipc	a1,0x1f
    80003f26:	c1e58593          	addi	a1,a1,-994 # 80022b40 <__func__.2+0x2d8>
    80003f2a:	0001f517          	auipc	a0,0x1f
    80003f2e:	c5650513          	addi	a0,a0,-938 # 80022b80 <__func__.2+0x318>
    80003f32:	53f1c0ef          	jal	80020c70 <printf>
    80003f36:	00041797          	auipc	a5,0x41
    80003f3a:	0db7c783          	lbu	a5,219(a5) # 80045011 <excpt+0x1>
    80003f3e:	c789                	beqz	a5,80003f48 <m_and_hs_using_vs_access_4+0x162>
    80003f40:	6418                	ld	a4,8(s0)
    80003f42:	47b5                	li	a5,13
    80003f44:	00f70c63          	beq	a4,a5,80003f5c <m_and_hs_using_vs_access_4+0x176>
    80003f48:	0001f517          	auipc	a0,0x1f
    80003f4c:	c4050513          	addi	a0,a0,-960 # 80022b88 <__func__.2+0x320>
    80003f50:	5211c0ef          	jal	80020c70 <printf>
    80003f54:	02900513          	li	a0,41
    80003f58:	3a81c0ef          	jal	80020300 <putchar>
    80003f5c:	4529                	li	a0,10
    80003f5e:	3a21c0ef          	jal	80020300 <putchar>
    80003f62:	02091363          	bnez	s2,80003f88 <m_and_hs_using_vs_access_4+0x1a2>
    80003f66:	00041497          	auipc	s1,0x41
    80003f6a:	0ab4c483          	lbu	s1,171(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80003f6e:	0001f597          	auipc	a1,0x1f
    80003f72:	bd258593          	addi	a1,a1,-1070 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003f76:	cc91                	beqz	s1,80003f92 <m_and_hs_using_vs_access_4+0x1ac>
    80003f78:	6418                	ld	a4,8(s0)
    80003f7a:	47b5                	li	a5,13
    TEST_END();
    80003f7c:	0001f597          	auipc	a1,0x1f
    80003f80:	bb458593          	addi	a1,a1,-1100 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003f84:	00f70763          	beq	a4,a5,80003f92 <m_and_hs_using_vs_access_4+0x1ac>
    80003f88:	4481                	li	s1,0
    TEST_END();
    80003f8a:	0001f597          	auipc	a1,0x1f
    80003f8e:	bb658593          	addi	a1,a1,-1098 # 80022b40 <__func__.2+0x2d8>
    80003f92:	0001f517          	auipc	a0,0x1f
    80003f96:	c5650513          	addi	a0,a0,-938 # 80022be8 <__func__.2+0x380>
    80003f9a:	4d71c0ef          	jal	80020c70 <printf>
    80003f9e:	4511                	li	a0,4
    80003fa0:	b39fc0ef          	jal	80000ad8 <goto_priv>
    80003fa4:	c04fd0ef          	jal	800013a8 <reset_state>
}
    80003fa8:	60e2                	ld	ra,24(sp)
    80003faa:	6442                	ld	s0,16(sp)
    80003fac:	6902                	ld	s2,0(sp)
    80003fae:	8526                	mv	a0,s1
    80003fb0:	64a2                	ld	s1,8(sp)
    80003fb2:	6105                	addi	sp,sp,32
    80003fb4:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003fb6:	0001f517          	auipc	a0,0x1f
    80003fba:	bd250513          	addi	a0,a0,-1070 # 80022b88 <__func__.2+0x320>
    80003fbe:	4b31c0ef          	jal	80020c70 <printf>
    80003fc2:	02900513          	li	a0,41
    80003fc6:	33a1c0ef          	jal	80020300 <putchar>
    80003fca:	bdf9                	j	80003ea8 <m_and_hs_using_vs_access_4+0xc2>

0000000080003fcc <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80003fcc:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003fce:	0001d597          	auipc	a1,0x1d
    80003fd2:	30258593          	addi	a1,a1,770 # 800212d0 <__func__.7>
    80003fd6:	0001f517          	auipc	a0,0x1f
    80003fda:	b7a50513          	addi	a0,a0,-1158 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_5(){
    80003fde:	ec06                	sd	ra,24(sp)
    80003fe0:	e822                	sd	s0,16(sp)
    80003fe2:	e426                	sd	s1,8(sp)
    TEST_START();
    80003fe4:	48d1c0ef          	jal	80020c70 <printf>
    80003fe8:	4529                	li	a0,10
    80003fea:	3161c0ef          	jal	80020300 <putchar>
    
    hspt_init();
    80003fee:	df2fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003ff2:	831fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003ff6:	ebafc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    80003ffa:	4511                	li	a0,4
    80003ffc:	addfc0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80004000:	000407b7          	lui	a5,0x40
    80004004:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80004008:	0330000f          	fence	rw,rw
    8000400c:	4785                	li	a5,1
    8000400e:	00041717          	auipc	a4,0x41
    80004012:	02073d23          	sd	zero,58(a4) # 80045048 <excpt+0x38>
    80004016:	00041717          	auipc	a4,0x41
    8000401a:	fef71d23          	sh	a5,-6(a4) # 80045010 <excpt>
    8000401e:	0330000f          	fence	rw,rw
    80004022:	00026417          	auipc	s0,0x26
    80004026:	47e43403          	ld	s0,1150(s0) # 8002a4a0 <__func__.2+0x7c38>
    8000402a:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    8000402e:	00028717          	auipc	a4,0x28
    80004032:	49e72703          	lw	a4,1182(a4) # 8002c4cc <curr_priv>
    80004036:	0786                	slli	a5,a5,0x1
    80004038:	e380                	sd	s0,0(a5)
    8000403a:	4791                	li	a5,4
    8000403c:	02f70763          	beq	a4,a5,8000406a <m_and_hs_using_vs_access_5+0x9e>
        ERROR("trying to read as mprv from low privilege");
    80004040:	0001f517          	auipc	a0,0x1f
    80004044:	1f050513          	addi	a0,a0,496 # 80023230 <__func__.2+0x9c8>
    80004048:	4291c0ef          	jal	80020c70 <printf>
    8000404c:	0fe00613          	li	a2,254
    80004050:	0001d597          	auipc	a1,0x1d
    80004054:	21058593          	addi	a1,a1,528 # 80021260 <__func__.11>
    80004058:	0001f517          	auipc	a0,0x1f
    8000405c:	c8050513          	addi	a0,a0,-896 # 80022cd8 <__func__.2+0x470>
    80004060:	4111c0ef          	jal	80020c70 <printf>
    80004064:	4501                	li	a0,0
    80004066:	31b1c0ef          	jal	80020b80 <exit>
    set_prev_priv(priv);
    8000406a:	4509                	li	a0,2
    8000406c:	98dfc0ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    80004070:	000807b7          	lui	a5,0x80
    80004074:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004076:	07b6                	slli	a5,a5,0xd
    80004078:	00020737          	lui	a4,0x20
    8000407c:	30072073          	csrs	mstatus,a4
    80004080:	6384                	ld	s1,0(a5)
    80004082:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004086:	0001f617          	auipc	a2,0x1f
    8000408a:	3ea60613          	addi	a2,a2,1002 # 80023470 <__func__.2+0xc08>
    8000408e:	08200593          	li	a1,130
    80004092:	0001f517          	auipc	a0,0x1f
    80004096:	ad650513          	addi	a0,a0,-1322 # 80022b68 <__func__.2+0x300>
    8000409a:	3d71c0ef          	jal	80020c70 <printf>
    8000409e:	00041797          	auipc	a5,0x41
    800040a2:	f737c783          	lbu	a5,-141(a5) # 80045011 <excpt+0x1>
    800040a6:	c3d1                	beqz	a5,8000412a <m_and_hs_using_vs_access_5+0x15e>
    800040a8:	0001f597          	auipc	a1,0x1f
    800040ac:	a9858593          	addi	a1,a1,-1384 # 80022b40 <__func__.2+0x2d8>
    800040b0:	0001f517          	auipc	a0,0x1f
    800040b4:	ad050513          	addi	a0,a0,-1328 # 80022b80 <__func__.2+0x318>
    800040b8:	3b91c0ef          	jal	80020c70 <printf>
    800040bc:	00041797          	auipc	a5,0x41
    800040c0:	f557c783          	lbu	a5,-171(a5) # 80045011 <excpt+0x1>
    800040c4:	e399                	bnez	a5,800040ca <m_and_hs_using_vs_access_5+0xfe>
    800040c6:	08848e63          	beq	s1,s0,80004162 <m_and_hs_using_vs_access_5+0x196>
    800040ca:	0001f517          	auipc	a0,0x1f
    800040ce:	abe50513          	addi	a0,a0,-1346 # 80022b88 <__func__.2+0x320>
    800040d2:	39f1c0ef          	jal	80020c70 <printf>
    800040d6:	02900513          	li	a0,41
    800040da:	2261c0ef          	jal	80020300 <putchar>
    800040de:	4529                	li	a0,10
    800040e0:	2201c0ef          	jal	80020300 <putchar>
    800040e4:	00041797          	auipc	a5,0x41
    800040e8:	f2d7c783          	lbu	a5,-211(a5) # 80045011 <excpt+0x1>
    800040ec:	eb89                	bnez	a5,800040fe <m_and_hs_using_vs_access_5+0x132>
    800040ee:	011087b7          	lui	a5,0x1108
    800040f2:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800040f6:	07c2                	slli	a5,a5,0x10
    800040f8:	17b9                	addi	a5,a5,-18
    800040fa:	06f48c63          	beq	s1,a5,80004172 <m_and_hs_using_vs_access_5+0x1a6>
    800040fe:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    80004100:	0001f597          	auipc	a1,0x1f
    80004104:	a4058593          	addi	a1,a1,-1472 # 80022b40 <__func__.2+0x2d8>
    80004108:	0001f517          	auipc	a0,0x1f
    8000410c:	ae050513          	addi	a0,a0,-1312 # 80022be8 <__func__.2+0x380>
    80004110:	3611c0ef          	jal	80020c70 <printf>
    80004114:	4511                	li	a0,4
    80004116:	9c3fc0ef          	jal	80000ad8 <goto_priv>
    8000411a:	a8efd0ef          	jal	800013a8 <reset_state>
}
    8000411e:	60e2                	ld	ra,24(sp)
    80004120:	8522                	mv	a0,s0
    80004122:	6442                	ld	s0,16(sp)
    80004124:	64a2                	ld	s1,8(sp)
    80004126:	6105                	addi	sp,sp,32
    80004128:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    8000412a:	00848d63          	beq	s1,s0,80004144 <m_and_hs_using_vs_access_5+0x178>
    8000412e:	0001f597          	auipc	a1,0x1f
    80004132:	a1258593          	addi	a1,a1,-1518 # 80022b40 <__func__.2+0x2d8>
    80004136:	0001f517          	auipc	a0,0x1f
    8000413a:	a4a50513          	addi	a0,a0,-1462 # 80022b80 <__func__.2+0x318>
    8000413e:	3331c0ef          	jal	80020c70 <printf>
    80004142:	b761                	j	800040ca <m_and_hs_using_vs_access_5+0xfe>
    80004144:	0001f597          	auipc	a1,0x1f
    80004148:	9ec58593          	addi	a1,a1,-1556 # 80022b30 <__func__.2+0x2c8>
    8000414c:	0001f517          	auipc	a0,0x1f
    80004150:	a3450513          	addi	a0,a0,-1484 # 80022b80 <__func__.2+0x318>
    80004154:	31d1c0ef          	jal	80020c70 <printf>
    80004158:	00041797          	auipc	a5,0x41
    8000415c:	eb97c783          	lbu	a5,-327(a5) # 80045011 <excpt+0x1>
    80004160:	f7ad                	bnez	a5,800040ca <m_and_hs_using_vs_access_5+0xfe>
    80004162:	4529                	li	a0,10
    80004164:	19c1c0ef          	jal	80020300 <putchar>
    80004168:	00041797          	auipc	a5,0x41
    8000416c:	ea97c783          	lbu	a5,-343(a5) # 80045011 <excpt+0x1>
    80004170:	f7d9                	bnez	a5,800040fe <m_and_hs_using_vs_access_5+0x132>
    80004172:	4405                	li	s0,1
    TEST_END();
    80004174:	0001f597          	auipc	a1,0x1f
    80004178:	9bc58593          	addi	a1,a1,-1604 # 80022b30 <__func__.2+0x2c8>
    8000417c:	b771                	j	80004108 <m_and_hs_using_vs_access_5+0x13c>

000000008000417e <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    8000417e:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004180:	0001d597          	auipc	a1,0x1d
    80004184:	17058593          	addi	a1,a1,368 # 800212f0 <__func__.6>
    80004188:	0001f517          	auipc	a0,0x1f
    8000418c:	9c850513          	addi	a0,a0,-1592 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_6(){
    80004190:	ec06                	sd	ra,24(sp)
    80004192:	e822                	sd	s0,16(sp)
    80004194:	e426                	sd	s1,8(sp)
    TEST_START();
    80004196:	2db1c0ef          	jal	80020c70 <printf>
    8000419a:	4529                	li	a0,10
    8000419c:	1641c0ef          	jal	80020300 <putchar>
    
    hspt_init();
    800041a0:	c40fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041a4:	e7efc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800041a8:	d08fc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800041ac:	000407b7          	lui	a5,0x40
    800041b0:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800041b4:	450d                	li	a0,3
    800041b6:	923fc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800041ba:	4509                	li	a0,2
    800041bc:	83dfc0ef          	jal	800009f8 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800041c0:	0330000f          	fence	rw,rw
    800041c4:	4785                	li	a5,1
    800041c6:	00041717          	auipc	a4,0x41
    800041ca:	e8073123          	sd	zero,-382(a4) # 80045048 <excpt+0x38>
    800041ce:	00041717          	auipc	a4,0x41
    800041d2:	e4f71123          	sh	a5,-446(a4) # 80045010 <excpt>
    800041d6:	0330000f          	fence	rw,rw
    800041da:	00026497          	auipc	s1,0x26
    800041de:	2c64b483          	ld	s1,710(s1) # 8002a4a0 <__func__.2+0x7c38>
    800041e2:	440197b7          	lui	a5,0x44019
    800041e6:	00080437          	lui	s0,0x80
    800041ea:	0786                	slli	a5,a5,0x1
    800041ec:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    800041ee:	e384                	sd	s1,0(a5)
    800041f0:	0436                	slli	s0,s0,0xd
    800041f2:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800041f6:	0001f617          	auipc	a2,0x1f
    800041fa:	2c260613          	addi	a2,a2,706 # 800234b8 <__func__.2+0xc50>
    800041fe:	08200593          	li	a1,130
    80004202:	0001f517          	auipc	a0,0x1f
    80004206:	96650513          	addi	a0,a0,-1690 # 80022b68 <__func__.2+0x300>
    8000420a:	2671c0ef          	jal	80020c70 <printf>
    8000420e:	00041797          	auipc	a5,0x41
    80004212:	e037c783          	lbu	a5,-509(a5) # 80045011 <excpt+0x1>
    80004216:	e7a5                	bnez	a5,8000427e <m_and_hs_using_vs_access_6+0x100>
    80004218:	0c940863          	beq	s0,s1,800042e8 <m_and_hs_using_vs_access_6+0x16a>
    8000421c:	0001f597          	auipc	a1,0x1f
    80004220:	92458593          	addi	a1,a1,-1756 # 80022b40 <__func__.2+0x2d8>
    80004224:	0001f517          	auipc	a0,0x1f
    80004228:	95c50513          	addi	a0,a0,-1700 # 80022b80 <__func__.2+0x318>
    8000422c:	2451c0ef          	jal	80020c70 <printf>
    80004230:	0001f517          	auipc	a0,0x1f
    80004234:	95850513          	addi	a0,a0,-1704 # 80022b88 <__func__.2+0x320>
    80004238:	2391c0ef          	jal	80020c70 <printf>
    8000423c:	02900513          	li	a0,41
    80004240:	0c01c0ef          	jal	80020300 <putchar>
    80004244:	4529                	li	a0,10
    80004246:	0ba1c0ef          	jal	80020300 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000424a:	000407b7          	lui	a5,0x40
    8000424e:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004252:	4401                	li	s0,0

    TEST_END();
    80004254:	0001f597          	auipc	a1,0x1f
    80004258:	8ec58593          	addi	a1,a1,-1812 # 80022b40 <__func__.2+0x2d8>
    8000425c:	0001f517          	auipc	a0,0x1f
    80004260:	98c50513          	addi	a0,a0,-1652 # 80022be8 <__func__.2+0x380>
    80004264:	20d1c0ef          	jal	80020c70 <printf>
    80004268:	4511                	li	a0,4
    8000426a:	86ffc0ef          	jal	80000ad8 <goto_priv>
    8000426e:	93afd0ef          	jal	800013a8 <reset_state>
}
    80004272:	60e2                	ld	ra,24(sp)
    80004274:	8522                	mv	a0,s0
    80004276:	6442                	ld	s0,16(sp)
    80004278:	64a2                	ld	s1,8(sp)
    8000427a:	6105                	addi	sp,sp,32
    8000427c:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000427e:	0001f597          	auipc	a1,0x1f
    80004282:	8c258593          	addi	a1,a1,-1854 # 80022b40 <__func__.2+0x2d8>
    80004286:	0001f517          	auipc	a0,0x1f
    8000428a:	8fa50513          	addi	a0,a0,-1798 # 80022b80 <__func__.2+0x318>
    8000428e:	1e31c0ef          	jal	80020c70 <printf>
    80004292:	00041797          	auipc	a5,0x41
    80004296:	d7f7c783          	lbu	a5,-641(a5) # 80045011 <excpt+0x1>
    8000429a:	e399                	bnez	a5,800042a0 <m_and_hs_using_vs_access_6+0x122>
    8000429c:	06940563          	beq	s0,s1,80004306 <m_and_hs_using_vs_access_6+0x188>
    800042a0:	0001f517          	auipc	a0,0x1f
    800042a4:	8e850513          	addi	a0,a0,-1816 # 80022b88 <__func__.2+0x320>
    800042a8:	1c91c0ef          	jal	80020c70 <printf>
    800042ac:	02900513          	li	a0,41
    800042b0:	0501c0ef          	jal	80020300 <putchar>
    800042b4:	4529                	li	a0,10
    800042b6:	04a1c0ef          	jal	80020300 <putchar>
    800042ba:	00041797          	auipc	a5,0x41
    800042be:	d577c783          	lbu	a5,-681(a5) # 80045011 <excpt+0x1>
    800042c2:	f7c1                	bnez	a5,8000424a <m_and_hs_using_vs_access_6+0xcc>
    800042c4:	011087b7          	lui	a5,0x1108
    800042c8:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800042cc:	07c2                	slli	a5,a5,0x10
    800042ce:	17b9                	addi	a5,a5,-18
    800042d0:	f6f41de3          	bne	s0,a5,8000424a <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800042d4:	000407b7          	lui	a5,0x40
    800042d8:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800042dc:	4405                	li	s0,1
    TEST_END();
    800042de:	0001f597          	auipc	a1,0x1f
    800042e2:	85258593          	addi	a1,a1,-1966 # 80022b30 <__func__.2+0x2c8>
    800042e6:	bf9d                	j	8000425c <m_and_hs_using_vs_access_6+0xde>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800042e8:	0001f597          	auipc	a1,0x1f
    800042ec:	84858593          	addi	a1,a1,-1976 # 80022b30 <__func__.2+0x2c8>
    800042f0:	0001f517          	auipc	a0,0x1f
    800042f4:	89050513          	addi	a0,a0,-1904 # 80022b80 <__func__.2+0x318>
    800042f8:	1791c0ef          	jal	80020c70 <printf>
    800042fc:	00041797          	auipc	a5,0x41
    80004300:	d157c783          	lbu	a5,-747(a5) # 80045011 <excpt+0x1>
    80004304:	ffd1                	bnez	a5,800042a0 <m_and_hs_using_vs_access_6+0x122>
    80004306:	4529                	li	a0,10
    80004308:	7f91b0ef          	jal	80020300 <putchar>
    8000430c:	00041797          	auipc	a5,0x41
    80004310:	d057c783          	lbu	a5,-763(a5) # 80045011 <excpt+0x1>
    80004314:	fb9d                	bnez	a5,8000424a <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004316:	000407b7          	lui	a5,0x40
    8000431a:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000431e:	4405                	li	s0,1
    TEST_END();
    80004320:	0001f597          	auipc	a1,0x1f
    80004324:	81058593          	addi	a1,a1,-2032 # 80022b30 <__func__.2+0x2c8>
    80004328:	bf15                	j	8000425c <m_and_hs_using_vs_access_6+0xde>

000000008000432a <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    8000432a:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000432c:	0001d597          	auipc	a1,0x1d
    80004330:	fe458593          	addi	a1,a1,-28 # 80021310 <__func__.5>
    80004334:	0001f517          	auipc	a0,0x1f
    80004338:	81c50513          	addi	a0,a0,-2020 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_7(){
    8000433c:	ec06                	sd	ra,24(sp)
    8000433e:	e822                	sd	s0,16(sp)
    80004340:	e426                	sd	s1,8(sp)
    TEST_START();
    80004342:	12f1c0ef          	jal	80020c70 <printf>
    80004346:	4529                	li	a0,10
    80004348:	7b91b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    8000434c:	a94fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004350:	cd2fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004354:	b5cfc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80004358:	450d                	li	a0,3
    8000435a:	f7efc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000435e:	4509                	li	a0,2
    80004360:	e98fc0ef          	jal	800009f8 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004364:	0330000f          	fence	rw,rw
    80004368:	00041497          	auipc	s1,0x41
    8000436c:	ca848493          	addi	s1,s1,-856 # 80045010 <excpt>
    80004370:	4785                	li	a5,1
    80004372:	00041717          	auipc	a4,0x41
    80004376:	cc073b23          	sd	zero,-810(a4) # 80045048 <excpt+0x38>
    8000437a:	00f49023          	sh	a5,0(s1)
    8000437e:	0330000f          	fence	rw,rw
    80004382:	200037b7          	lui	a5,0x20003
    80004386:	078e                	slli	a5,a5,0x3
    80004388:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    8000438c:	08200593          	li	a1,130
    80004390:	0001f617          	auipc	a2,0x1f
    80004394:	16060613          	addi	a2,a2,352 # 800234f0 <__func__.2+0xc88>
    80004398:	0001e517          	auipc	a0,0x1e
    8000439c:	7d050513          	addi	a0,a0,2000 # 80022b68 <__func__.2+0x300>
    800043a0:	0d11c0ef          	jal	80020c70 <printf>
    800043a4:	00041797          	auipc	a5,0x41
    800043a8:	c6d7c783          	lbu	a5,-915(a5) # 80045011 <excpt+0x1>
    800043ac:	0001e597          	auipc	a1,0x1e
    800043b0:	78458593          	addi	a1,a1,1924 # 80022b30 <__func__.2+0x2c8>
    800043b4:	e789                	bnez	a5,800043be <m_and_hs_using_vs_access_7+0x94>
    800043b6:	0001e597          	auipc	a1,0x1e
    800043ba:	78a58593          	addi	a1,a1,1930 # 80022b40 <__func__.2+0x2d8>
    800043be:	0001e517          	auipc	a0,0x1e
    800043c2:	7c250513          	addi	a0,a0,1986 # 80022b80 <__func__.2+0x318>
    800043c6:	0ab1c0ef          	jal	80020c70 <printf>
    800043ca:	00041797          	auipc	a5,0x41
    800043ce:	c477c783          	lbu	a5,-953(a5) # 80045011 <excpt+0x1>
    800043d2:	0e078863          	beqz	a5,800044c2 <m_and_hs_using_vs_access_7+0x198>
    800043d6:	4529                	li	a0,10
    800043d8:	7291b0ef          	jal	80020300 <putchar>
    800043dc:	00041417          	auipc	s0,0x41
    800043e0:	c3544403          	lbu	s0,-971(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    800043e4:	0330000f          	fence	rw,rw
    800043e8:	4785                	li	a5,1
    800043ea:	00041717          	auipc	a4,0x41
    800043ee:	c4073f23          	sd	zero,-930(a4) # 80045048 <excpt+0x38>
    800043f2:	00f49023          	sh	a5,0(s1)
    800043f6:	0330000f          	fence	rw,rw
    CSRS(sstatus, SSTATUS_MXR);
    800043fa:	000807b7          	lui	a5,0x80
    800043fe:	1007a073          	csrs	sstatus,a5
    80004402:	200037b7          	lui	a5,0x20003
    80004406:	078e                	slli	a5,a5,0x3
    80004408:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000440c:	08200593          	li	a1,130
    80004410:	0001f617          	auipc	a2,0x1f
    80004414:	11060613          	addi	a2,a2,272 # 80023520 <__func__.2+0xcb8>
    80004418:	0001e517          	auipc	a0,0x1e
    8000441c:	75050513          	addi	a0,a0,1872 # 80022b68 <__func__.2+0x300>
    80004420:	0511c0ef          	jal	80020c70 <printf>
    80004424:	00041797          	auipc	a5,0x41
    80004428:	bed7c783          	lbu	a5,-1043(a5) # 80045011 <excpt+0x1>
    8000442c:	0001e597          	auipc	a1,0x1e
    80004430:	71458593          	addi	a1,a1,1812 # 80022b40 <__func__.2+0x2d8>
    80004434:	e789                	bnez	a5,8000443e <m_and_hs_using_vs_access_7+0x114>
    80004436:	0001e597          	auipc	a1,0x1e
    8000443a:	6fa58593          	addi	a1,a1,1786 # 80022b30 <__func__.2+0x2c8>
    8000443e:	0001e517          	auipc	a0,0x1e
    80004442:	74250513          	addi	a0,a0,1858 # 80022b80 <__func__.2+0x318>
    80004446:	02b1c0ef          	jal	80020c70 <printf>
    8000444a:	00041797          	auipc	a5,0x41
    8000444e:	bc77c783          	lbu	a5,-1081(a5) # 80045011 <excpt+0x1>
    80004452:	efa9                	bnez	a5,800044ac <m_and_hs_using_vs_access_7+0x182>
    80004454:	4529                	li	a0,10
    80004456:	6ab1b0ef          	jal	80020300 <putchar>
    8000445a:	c411                	beqz	s0,80004466 <m_and_hs_using_vs_access_7+0x13c>
    8000445c:	00041797          	auipc	a5,0x41
    80004460:	bb57c783          	lbu	a5,-1099(a5) # 80045011 <excpt+0x1>
    80004464:	cb9d                	beqz	a5,8000449a <m_and_hs_using_vs_access_7+0x170>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004466:	000807b7          	lui	a5,0x80
    8000446a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000446e:	4401                	li	s0,0

        TEST_END();
    80004470:	0001e597          	auipc	a1,0x1e
    80004474:	6d058593          	addi	a1,a1,1744 # 80022b40 <__func__.2+0x2d8>
    80004478:	0001e517          	auipc	a0,0x1e
    8000447c:	77050513          	addi	a0,a0,1904 # 80022be8 <__func__.2+0x380>
    80004480:	7f01c0ef          	jal	80020c70 <printf>
    80004484:	4511                	li	a0,4
    80004486:	e52fc0ef          	jal	80000ad8 <goto_priv>
    8000448a:	f1ffc0ef          	jal	800013a8 <reset_state>
}
    8000448e:	60e2                	ld	ra,24(sp)
    80004490:	8522                	mv	a0,s0
    80004492:	6442                	ld	s0,16(sp)
    80004494:	64a2                	ld	s1,8(sp)
    80004496:	6105                	addi	sp,sp,32
    80004498:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    8000449a:	000807b7          	lui	a5,0x80
    8000449e:	1007b073          	csrc	sstatus,a5
        TEST_END();
    800044a2:	0001e597          	auipc	a1,0x1e
    800044a6:	68e58593          	addi	a1,a1,1678 # 80022b30 <__func__.2+0x2c8>
    800044aa:	b7f9                	j	80004478 <m_and_hs_using_vs_access_7+0x14e>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800044ac:	0001e517          	auipc	a0,0x1e
    800044b0:	6dc50513          	addi	a0,a0,1756 # 80022b88 <__func__.2+0x320>
    800044b4:	7bc1c0ef          	jal	80020c70 <printf>
    800044b8:	02900513          	li	a0,41
    800044bc:	6451b0ef          	jal	80020300 <putchar>
    800044c0:	bf51                	j	80004454 <m_and_hs_using_vs_access_7+0x12a>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800044c2:	0001e517          	auipc	a0,0x1e
    800044c6:	6c650513          	addi	a0,a0,1734 # 80022b88 <__func__.2+0x320>
    800044ca:	7a61c0ef          	jal	80020c70 <printf>
    800044ce:	02900513          	li	a0,41
    800044d2:	62f1b0ef          	jal	80020300 <putchar>
    800044d6:	b701                	j	800043d6 <m_and_hs_using_vs_access_7+0xac>

00000000800044d8 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    800044d8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800044da:	0001d597          	auipc	a1,0x1d
    800044de:	e5658593          	addi	a1,a1,-426 # 80021330 <__func__.4>
    800044e2:	0001e517          	auipc	a0,0x1e
    800044e6:	66e50513          	addi	a0,a0,1646 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_8(){
    800044ea:	ec06                	sd	ra,24(sp)
    800044ec:	e822                	sd	s0,16(sp)
    800044ee:	e426                	sd	s1,8(sp)
    TEST_START();
    800044f0:	7801c0ef          	jal	80020c70 <printf>
    800044f4:	4529                	li	a0,10
    800044f6:	60b1b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    800044fa:	8e6fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800044fe:	b24fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004502:	9aefc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    80004506:	450d                	li	a0,3
    80004508:	dd0fc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000450c:	4509                	li	a0,2
    8000450e:	ceafc0ef          	jal	800009f8 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    80004512:	011117b7          	lui	a5,0x1111
    80004516:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    8000451a:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    8000451e:	0330000f          	fence	rw,rw
    80004522:	00041417          	auipc	s0,0x41
    80004526:	aee40413          	addi	s0,s0,-1298 # 80045010 <excpt>
    8000452a:	4785                	li	a5,1
    8000452c:	00041717          	auipc	a4,0x41
    80004530:	b0073e23          	sd	zero,-1252(a4) # 80045048 <excpt+0x38>
    80004534:	00f41023          	sh	a5,0(s0)
    80004538:	0330000f          	fence	rw,rw
    8000453c:	001007b7          	lui	a5,0x100
    80004540:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004542:	07b2                	slli	a5,a5,0xc
    80004544:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004548:	08200593          	li	a1,130
    8000454c:	0001f617          	auipc	a2,0x1f
    80004550:	ffc60613          	addi	a2,a2,-4 # 80023548 <__func__.2+0xce0>
    80004554:	0001e517          	auipc	a0,0x1e
    80004558:	61450513          	addi	a0,a0,1556 # 80022b68 <__func__.2+0x300>
    8000455c:	7141c0ef          	jal	80020c70 <printf>
    80004560:	00041797          	auipc	a5,0x41
    80004564:	ab17c783          	lbu	a5,-1359(a5) # 80045011 <excpt+0x1>
    80004568:	0001e597          	auipc	a1,0x1e
    8000456c:	5d858593          	addi	a1,a1,1496 # 80022b40 <__func__.2+0x2d8>
    80004570:	cf89                	beqz	a5,8000458a <m_and_hs_using_vs_access_8+0xb2>
    80004572:	6418                	ld	a4,8(s0)
    80004574:	47b5                	li	a5,13
    80004576:	0001e597          	auipc	a1,0x1e
    8000457a:	5ba58593          	addi	a1,a1,1466 # 80022b30 <__func__.2+0x2c8>
    8000457e:	00f70663          	beq	a4,a5,8000458a <m_and_hs_using_vs_access_8+0xb2>
    80004582:	0001e597          	auipc	a1,0x1e
    80004586:	5be58593          	addi	a1,a1,1470 # 80022b40 <__func__.2+0x2d8>
    8000458a:	0001e517          	auipc	a0,0x1e
    8000458e:	5f650513          	addi	a0,a0,1526 # 80022b80 <__func__.2+0x318>
    80004592:	6de1c0ef          	jal	80020c70 <printf>
    80004596:	00041797          	auipc	a5,0x41
    8000459a:	a7b7c783          	lbu	a5,-1413(a5) # 80045011 <excpt+0x1>
    8000459e:	c789                	beqz	a5,800045a8 <m_and_hs_using_vs_access_8+0xd0>
    800045a0:	6418                	ld	a4,8(s0)
    800045a2:	47b5                	li	a5,13
    800045a4:	00f70c63          	beq	a4,a5,800045bc <m_and_hs_using_vs_access_8+0xe4>
    800045a8:	0001e517          	auipc	a0,0x1e
    800045ac:	5e050513          	addi	a0,a0,1504 # 80022b88 <__func__.2+0x320>
    800045b0:	6c01c0ef          	jal	80020c70 <printf>
    800045b4:	02900513          	li	a0,41
    800045b8:	5491b0ef          	jal	80020300 <putchar>
    800045bc:	4529                	li	a0,10
    800045be:	5431b0ef          	jal	80020300 <putchar>
    800045c2:	00041797          	auipc	a5,0x41
    800045c6:	a4f7c783          	lbu	a5,-1457(a5) # 80045011 <excpt+0x1>
    800045ca:	4481                	li	s1,0
    800045cc:	c789                	beqz	a5,800045d6 <m_and_hs_using_vs_access_8+0xfe>
    800045ce:	6404                	ld	s1,8(s0)
    800045d0:	14cd                	addi	s1,s1,-13
    800045d2:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    800045d6:	0330000f          	fence	rw,rw
    800045da:	4785                	li	a5,1
    800045dc:	00041717          	auipc	a4,0x41
    800045e0:	a6073623          	sd	zero,-1428(a4) # 80045048 <excpt+0x38>
    800045e4:	00f41023          	sh	a5,0(s0)
    800045e8:	0330000f          	fence	rw,rw
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    800045ec:	000807b7          	lui	a5,0x80
    800045f0:	2007a073          	csrs	vsstatus,a5
    800045f4:	001007b7          	lui	a5,0x100
    800045f8:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800045fa:	07b2                	slli	a5,a5,0xc
    800045fc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004600:	08200593          	li	a1,130
    80004604:	0001f617          	auipc	a2,0x1f
    80004608:	f7460613          	addi	a2,a2,-140 # 80023578 <__func__.2+0xd10>
    8000460c:	0001e517          	auipc	a0,0x1e
    80004610:	55c50513          	addi	a0,a0,1372 # 80022b68 <__func__.2+0x300>
    80004614:	65c1c0ef          	jal	80020c70 <printf>
    80004618:	00041797          	auipc	a5,0x41
    8000461c:	9f97c783          	lbu	a5,-1543(a5) # 80045011 <excpt+0x1>
    80004620:	0001e597          	auipc	a1,0x1e
    80004624:	52058593          	addi	a1,a1,1312 # 80022b40 <__func__.2+0x2d8>
    80004628:	e789                	bnez	a5,80004632 <m_and_hs_using_vs_access_8+0x15a>
    8000462a:	0001e597          	auipc	a1,0x1e
    8000462e:	50658593          	addi	a1,a1,1286 # 80022b30 <__func__.2+0x2c8>
    80004632:	0001e517          	auipc	a0,0x1e
    80004636:	54e50513          	addi	a0,a0,1358 # 80022b80 <__func__.2+0x318>
    8000463a:	6361c0ef          	jal	80020c70 <printf>
    8000463e:	00041797          	auipc	a5,0x41
    80004642:	9d37c783          	lbu	a5,-1581(a5) # 80045011 <excpt+0x1>
    80004646:	e7b1                	bnez	a5,80004692 <m_and_hs_using_vs_access_8+0x1ba>
    80004648:	4529                	li	a0,10
    8000464a:	4b71b0ef          	jal	80020300 <putchar>
    8000464e:	c491                	beqz	s1,8000465a <m_and_hs_using_vs_access_8+0x182>
    80004650:	00041797          	auipc	a5,0x41
    80004654:	9c17c783          	lbu	a5,-1599(a5) # 80045011 <excpt+0x1>
    80004658:	c79d                	beqz	a5,80004686 <m_and_hs_using_vs_access_8+0x1ae>
    8000465a:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    8000465c:	0001e597          	auipc	a1,0x1e
    80004660:	4e458593          	addi	a1,a1,1252 # 80022b40 <__func__.2+0x2d8>
    80004664:	0001e517          	auipc	a0,0x1e
    80004668:	58450513          	addi	a0,a0,1412 # 80022be8 <__func__.2+0x380>
    8000466c:	6041c0ef          	jal	80020c70 <printf>
    80004670:	4511                	li	a0,4
    80004672:	c66fc0ef          	jal	80000ad8 <goto_priv>
    80004676:	d33fc0ef          	jal	800013a8 <reset_state>
}
    8000467a:	60e2                	ld	ra,24(sp)
    8000467c:	8522                	mv	a0,s0
    8000467e:	6442                	ld	s0,16(sp)
    80004680:	64a2                	ld	s1,8(sp)
    80004682:	6105                	addi	sp,sp,32
    80004684:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004686:	4405                	li	s0,1
    TEST_END();
    80004688:	0001e597          	auipc	a1,0x1e
    8000468c:	4a858593          	addi	a1,a1,1192 # 80022b30 <__func__.2+0x2c8>
    80004690:	bfd1                	j	80004664 <m_and_hs_using_vs_access_8+0x18c>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004692:	0001e517          	auipc	a0,0x1e
    80004696:	4f650513          	addi	a0,a0,1270 # 80022b88 <__func__.2+0x320>
    8000469a:	5d61c0ef          	jal	80020c70 <printf>
    8000469e:	02900513          	li	a0,41
    800046a2:	45f1b0ef          	jal	80020300 <putchar>
    800046a6:	b74d                	j	80004648 <m_and_hs_using_vs_access_8+0x170>

00000000800046a8 <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    800046a8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800046aa:	0001d597          	auipc	a1,0x1d
    800046ae:	ca658593          	addi	a1,a1,-858 # 80021350 <__func__.3>
    800046b2:	0001e517          	auipc	a0,0x1e
    800046b6:	49e50513          	addi	a0,a0,1182 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_9(){
    800046ba:	ec06                	sd	ra,24(sp)
    800046bc:	e822                	sd	s0,16(sp)
    800046be:	e426                	sd	s1,8(sp)
    TEST_START();
    800046c0:	5b01c0ef          	jal	80020c70 <printf>
    800046c4:	4529                	li	a0,10
    800046c6:	43b1b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    800046ca:	f17fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800046ce:	954fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800046d2:	fdffb0ef          	jal	800006b0 <vspt_init>
    
    reset_state();
    800046d6:	cd3fc0ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HS);
    800046da:	450d                	li	a0,3
    800046dc:	bfcfc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800046e0:	4509                	li	a0,2
    800046e2:	b16fc0ef          	jal	800009f8 <set_prev_priv>
    hpt_init();
    800046e6:	93cfc0ef          	jal	80000822 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    800046ea:	0330000f          	fence	rw,rw
    800046ee:	00041417          	auipc	s0,0x41
    800046f2:	92240413          	addi	s0,s0,-1758 # 80045010 <excpt>
    800046f6:	4785                	li	a5,1
    800046f8:	00041717          	auipc	a4,0x41
    800046fc:	94073823          	sd	zero,-1712(a4) # 80045048 <excpt+0x38>
    80004700:	00f41023          	sh	a5,0(s0)
    80004704:	0330000f          	fence	rw,rw
    asm volatile(
    80004708:	37ab77b7          	lui	a5,0x37ab7
    8000470c:	00100737          	lui	a4,0x100
    80004710:	078a                	slli	a5,a5,0x2
    80004712:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004716:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000471a:	0732                	slli	a4,a4,0xc
    8000471c:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004720:	640c                	ld	a1,8(s0)
    80004722:	0001e517          	auipc	a0,0x1e
    80004726:	70e50513          	addi	a0,a0,1806 # 80022e30 <__func__.2+0x5c8>
    8000472a:	5461c0ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    8000472e:	08200593          	li	a1,130
    80004732:	0001f617          	auipc	a2,0x1f
    80004736:	e7e60613          	addi	a2,a2,-386 # 800235b0 <__func__.2+0xd48>
    8000473a:	0001e517          	auipc	a0,0x1e
    8000473e:	42e50513          	addi	a0,a0,1070 # 80022b68 <__func__.2+0x300>
    80004742:	52e1c0ef          	jal	80020c70 <printf>
    80004746:	00041797          	auipc	a5,0x41
    8000474a:	8cb7c783          	lbu	a5,-1845(a5) # 80045011 <excpt+0x1>
    8000474e:	0001e597          	auipc	a1,0x1e
    80004752:	3f258593          	addi	a1,a1,1010 # 80022b40 <__func__.2+0x2d8>
    80004756:	c789                	beqz	a5,80004760 <m_and_hs_using_vs_access_9+0xb8>
    80004758:	6418                	ld	a4,8(s0)
    8000475a:	47dd                	li	a5,23
    8000475c:	12f70d63          	beq	a4,a5,80004896 <m_and_hs_using_vs_access_9+0x1ee>
    80004760:	0001e517          	auipc	a0,0x1e
    80004764:	42050513          	addi	a0,a0,1056 # 80022b80 <__func__.2+0x318>
    80004768:	5081c0ef          	jal	80020c70 <printf>
    8000476c:	00041797          	auipc	a5,0x41
    80004770:	8a57c783          	lbu	a5,-1883(a5) # 80045011 <excpt+0x1>
    80004774:	c789                	beqz	a5,8000477e <m_and_hs_using_vs_access_9+0xd6>
    80004776:	6418                	ld	a4,8(s0)
    80004778:	47dd                	li	a5,23
    8000477a:	0ef70b63          	beq	a4,a5,80004870 <m_and_hs_using_vs_access_9+0x1c8>
    8000477e:	0001e517          	auipc	a0,0x1e
    80004782:	40a50513          	addi	a0,a0,1034 # 80022b88 <__func__.2+0x320>
    80004786:	4ea1c0ef          	jal	80020c70 <printf>
    8000478a:	02900513          	li	a0,41
    8000478e:	3731b0ef          	jal	80020300 <putchar>
    80004792:	4529                	li	a0,10
    80004794:	36d1b0ef          	jal	80020300 <putchar>
    80004798:	00041797          	auipc	a5,0x41
    8000479c:	8797c783          	lbu	a5,-1927(a5) # 80045011 <excpt+0x1>
    800047a0:	4481                	li	s1,0
    800047a2:	c789                	beqz	a5,800047ac <m_and_hs_using_vs_access_9+0x104>
    800047a4:	6418                	ld	a4,8(s0)
    800047a6:	47dd                	li	a5,23
    800047a8:	10f70763          	beq	a4,a5,800048b6 <m_and_hs_using_vs_access_9+0x20e>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    800047ac:	0330000f          	fence	rw,rw
    800047b0:	4785                	li	a5,1
    800047b2:	00041717          	auipc	a4,0x41
    800047b6:	88073b23          	sd	zero,-1898(a4) # 80045048 <excpt+0x38>
    800047ba:	00f41023          	sh	a5,0(s0)
    800047be:	0330000f          	fence	rw,rw
    asm volatile(
    800047c2:	001007b7          	lui	a5,0x100
    800047c6:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    800047ca:	07b2                	slli	a5,a5,0xc
    800047cc:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800047d0:	640c                	ld	a1,8(s0)
    800047d2:	0001e517          	auipc	a0,0x1e
    800047d6:	65e50513          	addi	a0,a0,1630 # 80022e30 <__func__.2+0x5c8>
    800047da:	4961c0ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    800047de:	08200593          	li	a1,130
    800047e2:	0001f617          	auipc	a2,0x1f
    800047e6:	e0e60613          	addi	a2,a2,-498 # 800235f0 <__func__.2+0xd88>
    800047ea:	0001e517          	auipc	a0,0x1e
    800047ee:	37e50513          	addi	a0,a0,894 # 80022b68 <__func__.2+0x300>
    800047f2:	47e1c0ef          	jal	80020c70 <printf>
    800047f6:	00041797          	auipc	a5,0x41
    800047fa:	81b7c783          	lbu	a5,-2021(a5) # 80045011 <excpt+0x1>
    800047fe:	0001e597          	auipc	a1,0x1e
    80004802:	34258593          	addi	a1,a1,834 # 80022b40 <__func__.2+0x2d8>
    80004806:	e789                	bnez	a5,80004810 <m_and_hs_using_vs_access_9+0x168>
    80004808:	0001e597          	auipc	a1,0x1e
    8000480c:	32858593          	addi	a1,a1,808 # 80022b30 <__func__.2+0x2c8>
    80004810:	0001e517          	auipc	a0,0x1e
    80004814:	37050513          	addi	a0,a0,880 # 80022b80 <__func__.2+0x318>
    80004818:	4581c0ef          	jal	80020c70 <printf>
    8000481c:	00040797          	auipc	a5,0x40
    80004820:	7f57c783          	lbu	a5,2037(a5) # 80045011 <excpt+0x1>
    80004824:	efb1                	bnez	a5,80004880 <m_and_hs_using_vs_access_9+0x1d8>
    80004826:	4529                	li	a0,10
    80004828:	2d91b0ef          	jal	80020300 <putchar>
    8000482c:	c491                	beqz	s1,80004838 <m_and_hs_using_vs_access_9+0x190>
    8000482e:	00040797          	auipc	a5,0x40
    80004832:	7e37c783          	lbu	a5,2019(a5) # 80045011 <excpt+0x1>
    80004836:	c79d                	beqz	a5,80004864 <m_and_hs_using_vs_access_9+0x1bc>
    80004838:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    8000483a:	0001e597          	auipc	a1,0x1e
    8000483e:	30658593          	addi	a1,a1,774 # 80022b40 <__func__.2+0x2d8>
    80004842:	0001e517          	auipc	a0,0x1e
    80004846:	3a650513          	addi	a0,a0,934 # 80022be8 <__func__.2+0x380>
    8000484a:	4261c0ef          	jal	80020c70 <printf>
    8000484e:	4511                	li	a0,4
    80004850:	a88fc0ef          	jal	80000ad8 <goto_priv>
    80004854:	b55fc0ef          	jal	800013a8 <reset_state>
}
    80004858:	60e2                	ld	ra,24(sp)
    8000485a:	8522                	mv	a0,s0
    8000485c:	6442                	ld	s0,16(sp)
    8000485e:	64a2                	ld	s1,8(sp)
    80004860:	6105                	addi	sp,sp,32
    80004862:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004864:	4405                	li	s0,1
    TEST_END();
    80004866:	0001e597          	auipc	a1,0x1e
    8000486a:	2ca58593          	addi	a1,a1,714 # 80022b30 <__func__.2+0x2c8>
    8000486e:	bfd1                	j	80004842 <m_and_hs_using_vs_access_9+0x19a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004870:	7418                	ld	a4,40(s0)
    80004872:	4001a7b7          	lui	a5,0x4001a
    80004876:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    8000487a:	f0f712e3          	bne	a4,a5,8000477e <m_and_hs_using_vs_access_9+0xd6>
    8000487e:	bf11                	j	80004792 <m_and_hs_using_vs_access_9+0xea>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004880:	0001e517          	auipc	a0,0x1e
    80004884:	30850513          	addi	a0,a0,776 # 80022b88 <__func__.2+0x320>
    80004888:	3e81c0ef          	jal	80020c70 <printf>
    8000488c:	02900513          	li	a0,41
    80004890:	2711b0ef          	jal	80020300 <putchar>
    80004894:	bf49                	j	80004826 <m_and_hs_using_vs_access_9+0x17e>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004896:	7418                	ld	a4,40(s0)
    80004898:	4001a7b7          	lui	a5,0x4001a
    8000489c:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    800048a0:	0001e597          	auipc	a1,0x1e
    800048a4:	29058593          	addi	a1,a1,656 # 80022b30 <__func__.2+0x2c8>
    800048a8:	eaf70ce3          	beq	a4,a5,80004760 <m_and_hs_using_vs_access_9+0xb8>
    800048ac:	0001e597          	auipc	a1,0x1e
    800048b0:	29458593          	addi	a1,a1,660 # 80022b40 <__func__.2+0x2d8>
    800048b4:	b575                	j	80004760 <m_and_hs_using_vs_access_9+0xb8>
    800048b6:	7404                	ld	s1,40(s0)
    800048b8:	bffe67b7          	lui	a5,0xbffe6
    800048bc:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    800048c0:	94be                	add	s1,s1,a5
    800048c2:	0014b493          	seqz	s1,s1
    800048c6:	b5dd                	j	800047ac <m_and_hs_using_vs_access_9+0x104>

00000000800048c8 <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    800048c8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800048ca:	0001d597          	auipc	a1,0x1d
    800048ce:	aa658593          	addi	a1,a1,-1370 # 80021370 <__func__.2>
    800048d2:	0001e517          	auipc	a0,0x1e
    800048d6:	27e50513          	addi	a0,a0,638 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_10(){
    800048da:	ec06                	sd	ra,24(sp)
    800048dc:	e822                	sd	s0,16(sp)
    800048de:	e426                	sd	s1,8(sp)
    TEST_START();
    800048e0:	3901c0ef          	jal	80020c70 <printf>
    800048e4:	4529                	li	a0,10
    800048e6:	21b1b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    800048ea:	cf7fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800048ee:	f35fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800048f2:	dbffb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    800048f6:	450d                	li	a0,3
    800048f8:	9e0fc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800048fc:	4509                	li	a0,2
    800048fe:	8fafc0ef          	jal	800009f8 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004902:	0330000f          	fence	rw,rw
    80004906:	00040417          	auipc	s0,0x40
    8000490a:	70a40413          	addi	s0,s0,1802 # 80045010 <excpt>
    8000490e:	4785                	li	a5,1
    80004910:	00040717          	auipc	a4,0x40
    80004914:	72073c23          	sd	zero,1848(a4) # 80045048 <excpt+0x38>
    80004918:	00f41023          	sh	a5,0(s0)
    8000491c:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);
    80004920:	6785                	lui	a5,0x1
    80004922:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004926:	14079073          	csrw	sscratch,a5
    8000492a:	000807b7          	lui	a5,0x80
    8000492e:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004930:	07b6                	slli	a5,a5,0xd
    80004932:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004936:	08200593          	li	a1,130
    8000493a:	0001f617          	auipc	a2,0x1f
    8000493e:	cde60613          	addi	a2,a2,-802 # 80023618 <__func__.2+0xdb0>
    80004942:	0001e517          	auipc	a0,0x1e
    80004946:	22650513          	addi	a0,a0,550 # 80022b68 <__func__.2+0x300>
    8000494a:	3261c0ef          	jal	80020c70 <printf>
    8000494e:	00040797          	auipc	a5,0x40
    80004952:	6c37c783          	lbu	a5,1731(a5) # 80045011 <excpt+0x1>
    80004956:	0001e597          	auipc	a1,0x1e
    8000495a:	1da58593          	addi	a1,a1,474 # 80022b30 <__func__.2+0x2c8>
    8000495e:	c789                	beqz	a5,80004968 <m_and_hs_using_vs_access_10+0xa0>
    80004960:	0001e597          	auipc	a1,0x1e
    80004964:	1e058593          	addi	a1,a1,480 # 80022b40 <__func__.2+0x2d8>
    80004968:	0001e517          	auipc	a0,0x1e
    8000496c:	21850513          	addi	a0,a0,536 # 80022b80 <__func__.2+0x318>
    80004970:	3001c0ef          	jal	80020c70 <printf>
    80004974:	00040797          	auipc	a5,0x40
    80004978:	69d7c783          	lbu	a5,1693(a5) # 80045011 <excpt+0x1>
    8000497c:	10079b63          	bnez	a5,80004a92 <m_and_hs_using_vs_access_10+0x1ca>
    80004980:	4529                	li	a0,10
    80004982:	17f1b0ef          	jal	80020300 <putchar>
    80004986:	00040497          	auipc	s1,0x40
    8000498a:	68b4c483          	lbu	s1,1675(s1) # 80045011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    8000498e:	d23fb0ef          	jal	800006b0 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004992:	0330000f          	fence	rw,rw
    80004996:	4785                	li	a5,1
    80004998:	00040717          	auipc	a4,0x40
    8000499c:	6a073823          	sd	zero,1712(a4) # 80045048 <excpt+0x38>
    800049a0:	00f41023          	sh	a5,0(s0)
    800049a4:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);      
    800049a8:	6785                	lui	a5,0x1
    800049aa:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    800049ae:	14079073          	csrw	sscratch,a5
    asm volatile(
    800049b2:	37ab77b7          	lui	a5,0x37ab7
    800049b6:	00080737          	lui	a4,0x80
    800049ba:	078a                	slli	a5,a5,0x2
    800049bc:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    800049be:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800049c2:	0736                	slli	a4,a4,0xd
    800049c4:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    800049c8:	08200593          	li	a1,130
    800049cc:	0001f617          	auipc	a2,0x1f
    800049d0:	c7c60613          	addi	a2,a2,-900 # 80023648 <__func__.2+0xde0>
    800049d4:	0001e517          	auipc	a0,0x1e
    800049d8:	19450513          	addi	a0,a0,404 # 80022b68 <__func__.2+0x300>
    800049dc:	2941c0ef          	jal	80020c70 <printf>
    800049e0:	00040797          	auipc	a5,0x40
    800049e4:	6317c783          	lbu	a5,1585(a5) # 80045011 <excpt+0x1>
    800049e8:	0001e597          	auipc	a1,0x1e
    800049ec:	15858593          	addi	a1,a1,344 # 80022b40 <__func__.2+0x2d8>
    800049f0:	cf89                	beqz	a5,80004a0a <m_and_hs_using_vs_access_10+0x142>
    800049f2:	6418                	ld	a4,8(s0)
    800049f4:	47bd                	li	a5,15
    800049f6:	0001e597          	auipc	a1,0x1e
    800049fa:	13a58593          	addi	a1,a1,314 # 80022b30 <__func__.2+0x2c8>
    800049fe:	00f70663          	beq	a4,a5,80004a0a <m_and_hs_using_vs_access_10+0x142>
    80004a02:	0001e597          	auipc	a1,0x1e
    80004a06:	13e58593          	addi	a1,a1,318 # 80022b40 <__func__.2+0x2d8>
    80004a0a:	0001e517          	auipc	a0,0x1e
    80004a0e:	17650513          	addi	a0,a0,374 # 80022b80 <__func__.2+0x318>
    80004a12:	25e1c0ef          	jal	80020c70 <printf>
    80004a16:	00040797          	auipc	a5,0x40
    80004a1a:	5fb7c783          	lbu	a5,1531(a5) # 80045011 <excpt+0x1>
    80004a1e:	c789                	beqz	a5,80004a28 <m_and_hs_using_vs_access_10+0x160>
    80004a20:	6418                	ld	a4,8(s0)
    80004a22:	47bd                	li	a5,15
    80004a24:	00f70c63          	beq	a4,a5,80004a3c <m_and_hs_using_vs_access_10+0x174>
    80004a28:	0001e517          	auipc	a0,0x1e
    80004a2c:	16050513          	addi	a0,a0,352 # 80022b88 <__func__.2+0x320>
    80004a30:	2401c0ef          	jal	80020c70 <printf>
    80004a34:	02900513          	li	a0,41
    80004a38:	0c91b0ef          	jal	80020300 <putchar>
    80004a3c:	4529                	li	a0,10
    80004a3e:	0c31b0ef          	jal	80020300 <putchar>
    80004a42:	e095                	bnez	s1,80004a66 <m_and_hs_using_vs_access_10+0x19e>
    80004a44:	00040497          	auipc	s1,0x40
    80004a48:	5cd4c483          	lbu	s1,1485(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004a4c:	0001e597          	auipc	a1,0x1e
    80004a50:	0f458593          	addi	a1,a1,244 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004a54:	cc91                	beqz	s1,80004a70 <m_and_hs_using_vs_access_10+0x1a8>
    80004a56:	6418                	ld	a4,8(s0)
    80004a58:	47bd                	li	a5,15
    TEST_END();
    80004a5a:	0001e597          	auipc	a1,0x1e
    80004a5e:	0d658593          	addi	a1,a1,214 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004a62:	00f70763          	beq	a4,a5,80004a70 <m_and_hs_using_vs_access_10+0x1a8>
    80004a66:	4481                	li	s1,0
    TEST_END();
    80004a68:	0001e597          	auipc	a1,0x1e
    80004a6c:	0d858593          	addi	a1,a1,216 # 80022b40 <__func__.2+0x2d8>
    80004a70:	0001e517          	auipc	a0,0x1e
    80004a74:	17850513          	addi	a0,a0,376 # 80022be8 <__func__.2+0x380>
    80004a78:	1f81c0ef          	jal	80020c70 <printf>
    80004a7c:	4511                	li	a0,4
    80004a7e:	85afc0ef          	jal	80000ad8 <goto_priv>
    80004a82:	927fc0ef          	jal	800013a8 <reset_state>
}
    80004a86:	60e2                	ld	ra,24(sp)
    80004a88:	6442                	ld	s0,16(sp)
    80004a8a:	8526                	mv	a0,s1
    80004a8c:	64a2                	ld	s1,8(sp)
    80004a8e:	6105                	addi	sp,sp,32
    80004a90:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004a92:	0001e517          	auipc	a0,0x1e
    80004a96:	0f650513          	addi	a0,a0,246 # 80022b88 <__func__.2+0x320>
    80004a9a:	1d61c0ef          	jal	80020c70 <printf>
    80004a9e:	02900513          	li	a0,41
    80004aa2:	05f1b0ef          	jal	80020300 <putchar>
    80004aa6:	bde9                	j	80004980 <m_and_hs_using_vs_access_10+0xb8>

0000000080004aa8 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004aa8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004aaa:	0001d597          	auipc	a1,0x1d
    80004aae:	8e658593          	addi	a1,a1,-1818 # 80021390 <__func__.1>
    80004ab2:	0001e517          	auipc	a0,0x1e
    80004ab6:	09e50513          	addi	a0,a0,158 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_11(){
    80004aba:	ec06                	sd	ra,24(sp)
    80004abc:	e822                	sd	s0,16(sp)
    80004abe:	e426                	sd	s1,8(sp)
    TEST_START();
    80004ac0:	1b01c0ef          	jal	80020c70 <printf>
    80004ac4:	4529                	li	a0,10
    80004ac6:	03b1b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    80004aca:	b17fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004ace:	d55fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004ad2:	bdffb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004ad6:	450d                	li	a0,3
    80004ad8:	800fc0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004adc:	4509                	li	a0,2
    80004ade:	f1bfb0ef          	jal	800009f8 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004ae2:	0330000f          	fence	rw,rw
    80004ae6:	00040417          	auipc	s0,0x40
    80004aea:	52a40413          	addi	s0,s0,1322 # 80045010 <excpt>
    80004aee:	4785                	li	a5,1
    80004af0:	00040717          	auipc	a4,0x40
    80004af4:	54073c23          	sd	zero,1368(a4) # 80045048 <excpt+0x38>
    80004af8:	00f41023          	sh	a5,0(s0)
    80004afc:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004b00:	11200793          	li	a5,274
    80004b04:	14079073          	csrw	sscratch,a5
    80004b08:	37ab77b7          	lui	a5,0x37ab7
    80004b0c:	00080737          	lui	a4,0x80
    80004b10:	078a                	slli	a5,a5,0x2
    80004b12:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004b16:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004b1a:	0736                	slli	a4,a4,0xd
    80004b1c:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004b20:	08200593          	li	a1,130
    80004b24:	0001f617          	auipc	a2,0x1f
    80004b28:	b5c60613          	addi	a2,a2,-1188 # 80023680 <__func__.2+0xe18>
    80004b2c:	0001e517          	auipc	a0,0x1e
    80004b30:	03c50513          	addi	a0,a0,60 # 80022b68 <__func__.2+0x300>
    80004b34:	13c1c0ef          	jal	80020c70 <printf>
    80004b38:	00040797          	auipc	a5,0x40
    80004b3c:	4d97c783          	lbu	a5,1241(a5) # 80045011 <excpt+0x1>
    80004b40:	0001e597          	auipc	a1,0x1e
    80004b44:	00058593          	mv	a1,a1
    80004b48:	cf89                	beqz	a5,80004b62 <m_and_hs_using_vs_access_11+0xba>
    80004b4a:	6418                	ld	a4,8(s0)
    80004b4c:	47dd                	li	a5,23
    80004b4e:	0001e597          	auipc	a1,0x1e
    80004b52:	fe258593          	addi	a1,a1,-30 # 80022b30 <__func__.2+0x2c8>
    80004b56:	00f70663          	beq	a4,a5,80004b62 <m_and_hs_using_vs_access_11+0xba>
    80004b5a:	0001e597          	auipc	a1,0x1e
    80004b5e:	fe658593          	addi	a1,a1,-26 # 80022b40 <__func__.2+0x2d8>
    80004b62:	0001e517          	auipc	a0,0x1e
    80004b66:	01e50513          	addi	a0,a0,30 # 80022b80 <__func__.2+0x318>
    80004b6a:	1061c0ef          	jal	80020c70 <printf>
    80004b6e:	00040797          	auipc	a5,0x40
    80004b72:	4a37c783          	lbu	a5,1187(a5) # 80045011 <excpt+0x1>
    80004b76:	c789                	beqz	a5,80004b80 <m_and_hs_using_vs_access_11+0xd8>
    80004b78:	6418                	ld	a4,8(s0)
    80004b7a:	47dd                	li	a5,23
    80004b7c:	00f70c63          	beq	a4,a5,80004b94 <m_and_hs_using_vs_access_11+0xec>
    80004b80:	0001e517          	auipc	a0,0x1e
    80004b84:	00850513          	addi	a0,a0,8 # 80022b88 <__func__.2+0x320>
    80004b88:	0e81c0ef          	jal	80020c70 <printf>
    80004b8c:	02900513          	li	a0,41
    80004b90:	7701b0ef          	jal	80020300 <putchar>
    80004b94:	4529                	li	a0,10
    80004b96:	76a1b0ef          	jal	80020300 <putchar>
    80004b9a:	00040497          	auipc	s1,0x40
    80004b9e:	4774c483          	lbu	s1,1143(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004ba2:	0001e597          	auipc	a1,0x1e
    80004ba6:	f9e58593          	addi	a1,a1,-98 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004baa:	cc91                	beqz	s1,80004bc6 <m_and_hs_using_vs_access_11+0x11e>
    80004bac:	6418                	ld	a4,8(s0)
    80004bae:	47dd                	li	a5,23
    TEST_END();
    80004bb0:	0001e597          	auipc	a1,0x1e
    80004bb4:	f8058593          	addi	a1,a1,-128 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004bb8:	00f70763          	beq	a4,a5,80004bc6 <m_and_hs_using_vs_access_11+0x11e>
    80004bbc:	4481                	li	s1,0
    TEST_END();
    80004bbe:	0001e597          	auipc	a1,0x1e
    80004bc2:	f8258593          	addi	a1,a1,-126 # 80022b40 <__func__.2+0x2d8>
    80004bc6:	0001e517          	auipc	a0,0x1e
    80004bca:	02250513          	addi	a0,a0,34 # 80022be8 <__func__.2+0x380>
    80004bce:	0a21c0ef          	jal	80020c70 <printf>
    80004bd2:	4511                	li	a0,4
    80004bd4:	f05fb0ef          	jal	80000ad8 <goto_priv>
    80004bd8:	fd0fc0ef          	jal	800013a8 <reset_state>
}
    80004bdc:	60e2                	ld	ra,24(sp)
    80004bde:	6442                	ld	s0,16(sp)
    80004be0:	8526                	mv	a0,s1
    80004be2:	64a2                	ld	s1,8(sp)
    80004be4:	6105                	addi	sp,sp,32
    80004be6:	8082                	ret

0000000080004be8 <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004be8:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004bea:	0001c597          	auipc	a1,0x1c
    80004bee:	7c658593          	addi	a1,a1,1990 # 800213b0 <__func__.0>
    80004bf2:	0001e517          	auipc	a0,0x1e
    80004bf6:	f5e50513          	addi	a0,a0,-162 # 80022b50 <__func__.2+0x2e8>
bool m_and_hs_using_vs_access_12(){
    80004bfa:	e406                	sd	ra,8(sp)
    80004bfc:	e022                	sd	s0,0(sp)
    TEST_START();
    80004bfe:	0721c0ef          	jal	80020c70 <printf>
    80004c02:	4529                	li	a0,10
    80004c04:	6fc1b0ef          	jal	80020300 <putchar>
    
    hspt_init();
    80004c08:	9d9fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004c0c:	c17fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004c10:	aa1fb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004c14:	450d                	li	a0,3
    80004c16:	ec3fb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004c1a:	4509                	li	a0,2
    80004c1c:	dddfb0ef          	jal	800009f8 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004c20:	0330000f          	fence	rw,rw
    80004c24:	4785                	li	a5,1
    80004c26:	00040717          	auipc	a4,0x40
    80004c2a:	42073123          	sd	zero,1058(a4) # 80045048 <excpt+0x38>
    80004c2e:	00040717          	auipc	a4,0x40
    80004c32:	3ef71123          	sh	a5,994(a4) # 80045010 <excpt>
    80004c36:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004c3a:	11200793          	li	a5,274
    80004c3e:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004c42:	08200593          	li	a1,130
    80004c46:	0001f617          	auipc	a2,0x1f
    80004c4a:	a7a60613          	addi	a2,a2,-1414 # 800236c0 <__func__.2+0xe58>
    80004c4e:	0001e517          	auipc	a0,0x1e
    80004c52:	f1a50513          	addi	a0,a0,-230 # 80022b68 <__func__.2+0x300>
    80004c56:	01a1c0ef          	jal	80020c70 <printf>
    80004c5a:	00040797          	auipc	a5,0x40
    80004c5e:	3b77c783          	lbu	a5,951(a5) # 80045011 <excpt+0x1>
    80004c62:	0001e597          	auipc	a1,0x1e
    80004c66:	ece58593          	addi	a1,a1,-306 # 80022b30 <__func__.2+0x2c8>
    80004c6a:	c789                	beqz	a5,80004c74 <m_and_hs_using_vs_access_12+0x8c>
    80004c6c:	0001e597          	auipc	a1,0x1e
    80004c70:	ed458593          	addi	a1,a1,-300 # 80022b40 <__func__.2+0x2d8>
    80004c74:	0001e517          	auipc	a0,0x1e
    80004c78:	f0c50513          	addi	a0,a0,-244 # 80022b80 <__func__.2+0x318>
    80004c7c:	7f51b0ef          	jal	80020c70 <printf>
    80004c80:	00040797          	auipc	a5,0x40
    80004c84:	3917c783          	lbu	a5,913(a5) # 80045011 <excpt+0x1>
    80004c88:	e7a1                	bnez	a5,80004cd0 <m_and_hs_using_vs_access_12+0xe8>
    80004c8a:	4529                	li	a0,10
    80004c8c:	6741b0ef          	jal	80020300 <putchar>
    80004c90:	00040797          	auipc	a5,0x40
    80004c94:	3817c783          	lbu	a5,897(a5) # 80045011 <excpt+0x1>
    80004c98:	e795                	bnez	a5,80004cc4 <m_and_hs_using_vs_access_12+0xdc>
    80004c9a:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004c9c:	0001e597          	auipc	a1,0x1e
    80004ca0:	e9458593          	addi	a1,a1,-364 # 80022b30 <__func__.2+0x2c8>
    80004ca4:	0001e517          	auipc	a0,0x1e
    80004ca8:	f4450513          	addi	a0,a0,-188 # 80022be8 <__func__.2+0x380>
    80004cac:	7c51b0ef          	jal	80020c70 <printf>
    80004cb0:	4511                	li	a0,4
    80004cb2:	e27fb0ef          	jal	80000ad8 <goto_priv>
    80004cb6:	ef2fc0ef          	jal	800013a8 <reset_state>

}
    80004cba:	60a2                	ld	ra,8(sp)
    80004cbc:	8522                	mv	a0,s0
    80004cbe:	6402                	ld	s0,0(sp)
    80004cc0:	0141                	addi	sp,sp,16
    80004cc2:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004cc4:	4401                	li	s0,0
    TEST_END();
    80004cc6:	0001e597          	auipc	a1,0x1e
    80004cca:	e7a58593          	addi	a1,a1,-390 # 80022b40 <__func__.2+0x2d8>
    80004cce:	bfd9                	j	80004ca4 <m_and_hs_using_vs_access_12+0xbc>
    TEST_ASSERT("CSRW successfull int any condition",
    80004cd0:	0001e517          	auipc	a0,0x1e
    80004cd4:	eb850513          	addi	a0,a0,-328 # 80022b88 <__func__.2+0x320>
    80004cd8:	7991b0ef          	jal	80020c70 <printf>
    80004cdc:	02900513          	li	a0,41
    80004ce0:	6201b0ef          	jal	80020300 <putchar>
    80004ce4:	b75d                	j	80004c8a <m_and_hs_using_vs_access_12+0xa2>

0000000080004ce6 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004ce6:	1101                	addi	sp,sp,-32

    TEST_START();
    80004ce8:	0001c597          	auipc	a1,0x1c
    80004cec:	6e858593          	addi	a1,a1,1768 # 800213d0 <__func__.11>
    80004cf0:	0001e517          	auipc	a0,0x1e
    80004cf4:	e6050513          	addi	a0,a0,-416 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_1() {
    80004cf8:	ec06                	sd	ra,24(sp)
    80004cfa:	e822                	sd	s0,16(sp)
    80004cfc:	e426                	sd	s1,8(sp)
    TEST_START();
    80004cfe:	7731b0ef          	jal	80020c70 <printf>
    80004d02:	4529                	li	a0,10
    80004d04:	5fc1b0ef          	jal	80020300 <putchar>


    goto_priv(PRIV_VS);
    80004d08:	4509                	li	a0,2
    80004d0a:	dcffb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004d0e:	0330000f          	fence	rw,rw
    80004d12:	00040417          	auipc	s0,0x40
    80004d16:	2fe40413          	addi	s0,s0,766 # 80045010 <excpt>
    80004d1a:	4785                	li	a5,1
    80004d1c:	00040717          	auipc	a4,0x40
    80004d20:	32073623          	sd	zero,812(a4) # 80045048 <excpt+0x38>
    80004d24:	00f41023          	sh	a5,0(s0)
    80004d28:	0330000f          	fence	rw,rw
    asm volatile(
    80004d2c:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004d30:	08200593          	li	a1,130
    80004d34:	0001f617          	auipc	a2,0x1f
    80004d38:	9b460613          	addi	a2,a2,-1612 # 800236e8 <__func__.2+0xe80>
    80004d3c:	0001e517          	auipc	a0,0x1e
    80004d40:	e2c50513          	addi	a0,a0,-468 # 80022b68 <__func__.2+0x300>
    80004d44:	72d1b0ef          	jal	80020c70 <printf>
    80004d48:	00040797          	auipc	a5,0x40
    80004d4c:	2c97c783          	lbu	a5,713(a5) # 80045011 <excpt+0x1>
    80004d50:	0001e597          	auipc	a1,0x1e
    80004d54:	df058593          	addi	a1,a1,-528 # 80022b40 <__func__.2+0x2d8>
    80004d58:	cf89                	beqz	a5,80004d72 <virtual_instruction_1+0x8c>
    80004d5a:	6418                	ld	a4,8(s0)
    80004d5c:	47d9                	li	a5,22
    80004d5e:	0001e597          	auipc	a1,0x1e
    80004d62:	dd258593          	addi	a1,a1,-558 # 80022b30 <__func__.2+0x2c8>
    80004d66:	00f70663          	beq	a4,a5,80004d72 <virtual_instruction_1+0x8c>
    80004d6a:	0001e597          	auipc	a1,0x1e
    80004d6e:	dd658593          	addi	a1,a1,-554 # 80022b40 <__func__.2+0x2d8>
    80004d72:	0001e517          	auipc	a0,0x1e
    80004d76:	e0e50513          	addi	a0,a0,-498 # 80022b80 <__func__.2+0x318>
    80004d7a:	6f71b0ef          	jal	80020c70 <printf>
    80004d7e:	00040797          	auipc	a5,0x40
    80004d82:	2937c783          	lbu	a5,659(a5) # 80045011 <excpt+0x1>
    80004d86:	c789                	beqz	a5,80004d90 <virtual_instruction_1+0xaa>
    80004d88:	6418                	ld	a4,8(s0)
    80004d8a:	47d9                	li	a5,22
    80004d8c:	00f70c63          	beq	a4,a5,80004da4 <virtual_instruction_1+0xbe>
    80004d90:	0001e517          	auipc	a0,0x1e
    80004d94:	df850513          	addi	a0,a0,-520 # 80022b88 <__func__.2+0x320>
    80004d98:	6d91b0ef          	jal	80020c70 <printf>
    80004d9c:	02900513          	li	a0,41
    80004da0:	5601b0ef          	jal	80020300 <putchar>
    80004da4:	4529                	li	a0,10
    80004da6:	55a1b0ef          	jal	80020300 <putchar>
    80004daa:	00040797          	auipc	a5,0x40
    80004dae:	2677c783          	lbu	a5,615(a5) # 80045011 <excpt+0x1>
    80004db2:	4481                	li	s1,0
    80004db4:	c789                	beqz	a5,80004dbe <virtual_instruction_1+0xd8>
    80004db6:	6404                	ld	s1,8(s0)
    80004db8:	14a9                	addi	s1,s1,-22
    80004dba:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004dbe:	4509                	li	a0,2
    80004dc0:	d19fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004dc4:	0330000f          	fence	rw,rw
    80004dc8:	4785                	li	a5,1
    80004dca:	00040717          	auipc	a4,0x40
    80004dce:	26073f23          	sd	zero,638(a4) # 80045048 <excpt+0x38>
    80004dd2:	00f41023          	sh	a5,0(s0)
    80004dd6:	0330000f          	fence	rw,rw
    asm volatile(
    80004dda:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004dde:	08200593          	li	a1,130
    80004de2:	0001f617          	auipc	a2,0x1f
    80004de6:	94660613          	addi	a2,a2,-1722 # 80023728 <__func__.2+0xec0>
    80004dea:	0001e517          	auipc	a0,0x1e
    80004dee:	d7e50513          	addi	a0,a0,-642 # 80022b68 <__func__.2+0x300>
    80004df2:	67f1b0ef          	jal	80020c70 <printf>
    80004df6:	00040797          	auipc	a5,0x40
    80004dfa:	21b7c783          	lbu	a5,539(a5) # 80045011 <excpt+0x1>
    80004dfe:	0001e597          	auipc	a1,0x1e
    80004e02:	d4258593          	addi	a1,a1,-702 # 80022b40 <__func__.2+0x2d8>
    80004e06:	cf89                	beqz	a5,80004e20 <virtual_instruction_1+0x13a>
    80004e08:	6418                	ld	a4,8(s0)
    80004e0a:	47d9                	li	a5,22
    80004e0c:	0001e597          	auipc	a1,0x1e
    80004e10:	d2458593          	addi	a1,a1,-732 # 80022b30 <__func__.2+0x2c8>
    80004e14:	00f70663          	beq	a4,a5,80004e20 <virtual_instruction_1+0x13a>
    80004e18:	0001e597          	auipc	a1,0x1e
    80004e1c:	d2858593          	addi	a1,a1,-728 # 80022b40 <__func__.2+0x2d8>
    80004e20:	0001e517          	auipc	a0,0x1e
    80004e24:	d6050513          	addi	a0,a0,-672 # 80022b80 <__func__.2+0x318>
    80004e28:	6491b0ef          	jal	80020c70 <printf>
    80004e2c:	00040797          	auipc	a5,0x40
    80004e30:	1e57c783          	lbu	a5,485(a5) # 80045011 <excpt+0x1>
    80004e34:	c789                	beqz	a5,80004e3e <virtual_instruction_1+0x158>
    80004e36:	6418                	ld	a4,8(s0)
    80004e38:	47d9                	li	a5,22
    80004e3a:	00f70c63          	beq	a4,a5,80004e52 <virtual_instruction_1+0x16c>
    80004e3e:	0001e517          	auipc	a0,0x1e
    80004e42:	d4a50513          	addi	a0,a0,-694 # 80022b88 <__func__.2+0x320>
    80004e46:	62b1b0ef          	jal	80020c70 <printf>
    80004e4a:	02900513          	li	a0,41
    80004e4e:	4b21b0ef          	jal	80020300 <putchar>
    80004e52:	4529                	li	a0,10
    80004e54:	4ac1b0ef          	jal	80020300 <putchar>
    80004e58:	c881                	beqz	s1,80004e68 <virtual_instruction_1+0x182>
    80004e5a:	00040797          	auipc	a5,0x40
    80004e5e:	1b77c783          	lbu	a5,439(a5) # 80045011 <excpt+0x1>
    80004e62:	4481                	li	s1,0
    80004e64:	1a079863          	bnez	a5,80005014 <virtual_instruction_1+0x32e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    80004e68:	4511                	li	a0,4
    80004e6a:	c6ffb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80004e6e:	001007b7          	lui	a5,0x100
    80004e72:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004e76:	4509                	li	a0,2
    80004e78:	c61fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004e7c:	0330000f          	fence	rw,rw
    80004e80:	4785                	li	a5,1
    80004e82:	00040717          	auipc	a4,0x40
    80004e86:	1c073323          	sd	zero,454(a4) # 80045048 <excpt+0x38>
    80004e8a:	00f41023          	sh	a5,0(s0)
    80004e8e:	0330000f          	fence	rw,rw
    asm volatile(
    80004e92:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004e96:	08200593          	li	a1,130
    80004e9a:	0001f617          	auipc	a2,0x1f
    80004e9e:	8ce60613          	addi	a2,a2,-1842 # 80023768 <__func__.2+0xf00>
    80004ea2:	0001e517          	auipc	a0,0x1e
    80004ea6:	cc650513          	addi	a0,a0,-826 # 80022b68 <__func__.2+0x300>
    80004eaa:	5c71b0ef          	jal	80020c70 <printf>
    80004eae:	00040797          	auipc	a5,0x40
    80004eb2:	1637c783          	lbu	a5,355(a5) # 80045011 <excpt+0x1>
    80004eb6:	0001e597          	auipc	a1,0x1e
    80004eba:	c8a58593          	addi	a1,a1,-886 # 80022b40 <__func__.2+0x2d8>
    80004ebe:	cf89                	beqz	a5,80004ed8 <virtual_instruction_1+0x1f2>
    80004ec0:	6418                	ld	a4,8(s0)
    80004ec2:	47d9                	li	a5,22
    80004ec4:	0001e597          	auipc	a1,0x1e
    80004ec8:	c6c58593          	addi	a1,a1,-916 # 80022b30 <__func__.2+0x2c8>
    80004ecc:	00f70663          	beq	a4,a5,80004ed8 <virtual_instruction_1+0x1f2>
    80004ed0:	0001e597          	auipc	a1,0x1e
    80004ed4:	c7058593          	addi	a1,a1,-912 # 80022b40 <__func__.2+0x2d8>
    80004ed8:	0001e517          	auipc	a0,0x1e
    80004edc:	ca850513          	addi	a0,a0,-856 # 80022b80 <__func__.2+0x318>
    80004ee0:	5911b0ef          	jal	80020c70 <printf>
    80004ee4:	00040797          	auipc	a5,0x40
    80004ee8:	12d7c783          	lbu	a5,301(a5) # 80045011 <excpt+0x1>
    80004eec:	c789                	beqz	a5,80004ef6 <virtual_instruction_1+0x210>
    80004eee:	6418                	ld	a4,8(s0)
    80004ef0:	47d9                	li	a5,22
    80004ef2:	00f70c63          	beq	a4,a5,80004f0a <virtual_instruction_1+0x224>
    80004ef6:	0001e517          	auipc	a0,0x1e
    80004efa:	c9250513          	addi	a0,a0,-878 # 80022b88 <__func__.2+0x320>
    80004efe:	5731b0ef          	jal	80020c70 <printf>
    80004f02:	02900513          	li	a0,41
    80004f06:	3fa1b0ef          	jal	80020300 <putchar>
    80004f0a:	4529                	li	a0,10
    80004f0c:	3f41b0ef          	jal	80020300 <putchar>
    80004f10:	c881                	beqz	s1,80004f20 <virtual_instruction_1+0x23a>
    80004f12:	00040797          	auipc	a5,0x40
    80004f16:	0ff7c783          	lbu	a5,255(a5) # 80045011 <excpt+0x1>
    80004f1a:	4481                	li	s1,0
    80004f1c:	0e079763          	bnez	a5,8000500a <virtual_instruction_1+0x324>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80004f20:	4509                	li	a0,2
    80004f22:	bb7fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f26:	0330000f          	fence	rw,rw
    80004f2a:	4785                	li	a5,1
    80004f2c:	00040717          	auipc	a4,0x40
    80004f30:	10073e23          	sd	zero,284(a4) # 80045048 <excpt+0x38>
    80004f34:	00f41023          	sh	a5,0(s0)
    80004f38:	0330000f          	fence	rw,rw
    asm volatile(
    80004f3c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004f40:	08200593          	li	a1,130
    80004f44:	0001f617          	auipc	a2,0x1f
    80004f48:	87460613          	addi	a2,a2,-1932 # 800237b8 <__func__.2+0xf50>
    80004f4c:	0001e517          	auipc	a0,0x1e
    80004f50:	c1c50513          	addi	a0,a0,-996 # 80022b68 <__func__.2+0x300>
    80004f54:	51d1b0ef          	jal	80020c70 <printf>
    80004f58:	00040797          	auipc	a5,0x40
    80004f5c:	0b97c783          	lbu	a5,185(a5) # 80045011 <excpt+0x1>
    80004f60:	0001e597          	auipc	a1,0x1e
    80004f64:	be058593          	addi	a1,a1,-1056 # 80022b40 <__func__.2+0x2d8>
    80004f68:	cf89                	beqz	a5,80004f82 <virtual_instruction_1+0x29c>
    80004f6a:	6418                	ld	a4,8(s0)
    80004f6c:	47d9                	li	a5,22
    80004f6e:	0001e597          	auipc	a1,0x1e
    80004f72:	bc258593          	addi	a1,a1,-1086 # 80022b30 <__func__.2+0x2c8>
    80004f76:	00f70663          	beq	a4,a5,80004f82 <virtual_instruction_1+0x29c>
    80004f7a:	0001e597          	auipc	a1,0x1e
    80004f7e:	bc658593          	addi	a1,a1,-1082 # 80022b40 <__func__.2+0x2d8>
    80004f82:	0001e517          	auipc	a0,0x1e
    80004f86:	bfe50513          	addi	a0,a0,-1026 # 80022b80 <__func__.2+0x318>
    80004f8a:	4e71b0ef          	jal	80020c70 <printf>
    80004f8e:	00040797          	auipc	a5,0x40
    80004f92:	0837c783          	lbu	a5,131(a5) # 80045011 <excpt+0x1>
    80004f96:	c789                	beqz	a5,80004fa0 <virtual_instruction_1+0x2ba>
    80004f98:	6418                	ld	a4,8(s0)
    80004f9a:	47d9                	li	a5,22
    80004f9c:	00f70c63          	beq	a4,a5,80004fb4 <virtual_instruction_1+0x2ce>
    80004fa0:	0001e517          	auipc	a0,0x1e
    80004fa4:	be850513          	addi	a0,a0,-1048 # 80022b88 <__func__.2+0x320>
    80004fa8:	4c91b0ef          	jal	80020c70 <printf>
    80004fac:	02900513          	li	a0,41
    80004fb0:	3501b0ef          	jal	80020300 <putchar>
    80004fb4:	4529                	li	a0,10
    80004fb6:	34a1b0ef          	jal	80020300 <putchar>
    80004fba:	c095                	beqz	s1,80004fde <virtual_instruction_1+0x2f8>
    80004fbc:	00040497          	auipc	s1,0x40
    80004fc0:	0554c483          	lbu	s1,85(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80004fc4:	0001e597          	auipc	a1,0x1e
    80004fc8:	b7c58593          	addi	a1,a1,-1156 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004fcc:	cc91                	beqz	s1,80004fe8 <virtual_instruction_1+0x302>
    80004fce:	6418                	ld	a4,8(s0)
    80004fd0:	47d9                	li	a5,22
    TEST_END();
    80004fd2:	0001e597          	auipc	a1,0x1e
    80004fd6:	b5e58593          	addi	a1,a1,-1186 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004fda:	00f70763          	beq	a4,a5,80004fe8 <virtual_instruction_1+0x302>
    80004fde:	4481                	li	s1,0
    TEST_END();
    80004fe0:	0001e597          	auipc	a1,0x1e
    80004fe4:	b6058593          	addi	a1,a1,-1184 # 80022b40 <__func__.2+0x2d8>
    80004fe8:	0001e517          	auipc	a0,0x1e
    80004fec:	c0050513          	addi	a0,a0,-1024 # 80022be8 <__func__.2+0x380>
    80004ff0:	4811b0ef          	jal	80020c70 <printf>
    80004ff4:	4511                	li	a0,4
    80004ff6:	ae3fb0ef          	jal	80000ad8 <goto_priv>
    80004ffa:	baefc0ef          	jal	800013a8 <reset_state>
}
    80004ffe:	60e2                	ld	ra,24(sp)
    80005000:	6442                	ld	s0,16(sp)
    80005002:	8526                	mv	a0,s1
    80005004:	64a2                	ld	s1,8(sp)
    80005006:	6105                	addi	sp,sp,32
    80005008:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    8000500a:	6404                	ld	s1,8(s0)
    8000500c:	14a9                	addi	s1,s1,-22
    8000500e:	0014b493          	seqz	s1,s1
    80005012:	b739                	j	80004f20 <virtual_instruction_1+0x23a>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80005014:	6404                	ld	s1,8(s0)
    80005016:	14a9                	addi	s1,s1,-22
    80005018:	0014b493          	seqz	s1,s1
    8000501c:	b5b1                	j	80004e68 <virtual_instruction_1+0x182>

000000008000501e <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    8000501e:	7179                	addi	sp,sp,-48

    TEST_START();
    80005020:	0001c597          	auipc	a1,0x1c
    80005024:	3c858593          	addi	a1,a1,968 # 800213e8 <__func__.10>
    80005028:	0001e517          	auipc	a0,0x1e
    8000502c:	b2850513          	addi	a0,a0,-1240 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_2() {
    80005030:	f406                	sd	ra,40(sp)
    80005032:	f022                	sd	s0,32(sp)
    80005034:	ec26                	sd	s1,24(sp)
    TEST_START();
    80005036:	43b1b0ef          	jal	80020c70 <printf>
    8000503a:	4529                	li	a0,10
    8000503c:	2c41b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_VS);
    80005040:	4509                	li	a0,2
    80005042:	a97fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005046:	0330000f          	fence	rw,rw
    8000504a:	00040417          	auipc	s0,0x40
    8000504e:	fc640413          	addi	s0,s0,-58 # 80045010 <excpt>
    80005052:	4785                	li	a5,1
    80005054:	00040717          	auipc	a4,0x40
    80005058:	fe073a23          	sd	zero,-12(a4) # 80045048 <excpt+0x38>
    8000505c:	00f41023          	sh	a5,0(s0)
    80005060:	0330000f          	fence	rw,rw
    asm volatile(
    80005064:	4781                	li	a5,0
    80005066:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000506a:	08200593          	li	a1,130
    8000506e:	0001e617          	auipc	a2,0x1e
    80005072:	79a60613          	addi	a2,a2,1946 # 80023808 <__func__.2+0xfa0>
    80005076:	0001e517          	auipc	a0,0x1e
    8000507a:	af250513          	addi	a0,a0,-1294 # 80022b68 <__func__.2+0x300>
    volatile uint64_t tmp = hlvd(0);
    8000507e:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005080:	3f11b0ef          	jal	80020c70 <printf>
    80005084:	00040797          	auipc	a5,0x40
    80005088:	f8d7c783          	lbu	a5,-115(a5) # 80045011 <excpt+0x1>
    8000508c:	0001e597          	auipc	a1,0x1e
    80005090:	ab458593          	addi	a1,a1,-1356 # 80022b40 <__func__.2+0x2d8>
    80005094:	cf89                	beqz	a5,800050ae <virtual_instruction_2+0x90>
    80005096:	6418                	ld	a4,8(s0)
    80005098:	47d9                	li	a5,22
    8000509a:	0001e597          	auipc	a1,0x1e
    8000509e:	a9658593          	addi	a1,a1,-1386 # 80022b30 <__func__.2+0x2c8>
    800050a2:	00f70663          	beq	a4,a5,800050ae <virtual_instruction_2+0x90>
    800050a6:	0001e597          	auipc	a1,0x1e
    800050aa:	a9a58593          	addi	a1,a1,-1382 # 80022b40 <__func__.2+0x2d8>
    800050ae:	0001e517          	auipc	a0,0x1e
    800050b2:	ad250513          	addi	a0,a0,-1326 # 80022b80 <__func__.2+0x318>
    800050b6:	3bb1b0ef          	jal	80020c70 <printf>
    800050ba:	00040797          	auipc	a5,0x40
    800050be:	f577c783          	lbu	a5,-169(a5) # 80045011 <excpt+0x1>
    800050c2:	c789                	beqz	a5,800050cc <virtual_instruction_2+0xae>
    800050c4:	6418                	ld	a4,8(s0)
    800050c6:	47d9                	li	a5,22
    800050c8:	00f70c63          	beq	a4,a5,800050e0 <virtual_instruction_2+0xc2>
    800050cc:	0001e517          	auipc	a0,0x1e
    800050d0:	abc50513          	addi	a0,a0,-1348 # 80022b88 <__func__.2+0x320>
    800050d4:	39d1b0ef          	jal	80020c70 <printf>
    800050d8:	02900513          	li	a0,41
    800050dc:	2241b0ef          	jal	80020300 <putchar>
    800050e0:	4529                	li	a0,10
    800050e2:	21e1b0ef          	jal	80020300 <putchar>
    800050e6:	00040797          	auipc	a5,0x40
    800050ea:	f2b7c783          	lbu	a5,-213(a5) # 80045011 <excpt+0x1>
    800050ee:	4481                	li	s1,0
    800050f0:	c789                	beqz	a5,800050fa <virtual_instruction_2+0xdc>
    800050f2:	6404                	ld	s1,8(s0)
    800050f4:	14a9                	addi	s1,s1,-22
    800050f6:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800050fa:	4509                	li	a0,2
    800050fc:	9ddfb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005100:	0330000f          	fence	rw,rw
    80005104:	4785                	li	a5,1
    80005106:	00040717          	auipc	a4,0x40
    8000510a:	f4073123          	sd	zero,-190(a4) # 80045048 <excpt+0x38>
    8000510e:	00f41023          	sh	a5,0(s0)
    80005112:	0330000f          	fence	rw,rw
    asm volatile(
    80005116:	37ab77b7          	lui	a5,0x37ab7
    8000511a:	078a                	slli	a5,a5,0x2
    8000511c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005120:	4701                	li	a4,0
    80005122:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005126:	08200593          	li	a1,130
    8000512a:	0001e617          	auipc	a2,0x1e
    8000512e:	70e60613          	addi	a2,a2,1806 # 80023838 <__func__.2+0xfd0>
    80005132:	0001e517          	auipc	a0,0x1e
    80005136:	a3650513          	addi	a0,a0,-1482 # 80022b68 <__func__.2+0x300>
    8000513a:	3371b0ef          	jal	80020c70 <printf>
    8000513e:	00040797          	auipc	a5,0x40
    80005142:	ed37c783          	lbu	a5,-301(a5) # 80045011 <excpt+0x1>
    80005146:	0001e597          	auipc	a1,0x1e
    8000514a:	9fa58593          	addi	a1,a1,-1542 # 80022b40 <__func__.2+0x2d8>
    8000514e:	cf89                	beqz	a5,80005168 <virtual_instruction_2+0x14a>
    80005150:	6418                	ld	a4,8(s0)
    80005152:	47d9                	li	a5,22
    80005154:	0001e597          	auipc	a1,0x1e
    80005158:	9dc58593          	addi	a1,a1,-1572 # 80022b30 <__func__.2+0x2c8>
    8000515c:	00f70663          	beq	a4,a5,80005168 <virtual_instruction_2+0x14a>
    80005160:	0001e597          	auipc	a1,0x1e
    80005164:	9e058593          	addi	a1,a1,-1568 # 80022b40 <__func__.2+0x2d8>
    80005168:	0001e517          	auipc	a0,0x1e
    8000516c:	a1850513          	addi	a0,a0,-1512 # 80022b80 <__func__.2+0x318>
    80005170:	3011b0ef          	jal	80020c70 <printf>
    80005174:	00040797          	auipc	a5,0x40
    80005178:	e9d7c783          	lbu	a5,-355(a5) # 80045011 <excpt+0x1>
    8000517c:	c789                	beqz	a5,80005186 <virtual_instruction_2+0x168>
    8000517e:	6418                	ld	a4,8(s0)
    80005180:	47d9                	li	a5,22
    80005182:	00f70c63          	beq	a4,a5,8000519a <virtual_instruction_2+0x17c>
    80005186:	0001e517          	auipc	a0,0x1e
    8000518a:	a0250513          	addi	a0,a0,-1534 # 80022b88 <__func__.2+0x320>
    8000518e:	2e31b0ef          	jal	80020c70 <printf>
    80005192:	02900513          	li	a0,41
    80005196:	16a1b0ef          	jal	80020300 <putchar>
    8000519a:	4529                	li	a0,10
    8000519c:	1641b0ef          	jal	80020300 <putchar>
    800051a0:	c095                	beqz	s1,800051c4 <virtual_instruction_2+0x1a6>
    800051a2:	00040497          	auipc	s1,0x40
    800051a6:	e6f4c483          	lbu	s1,-401(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    800051aa:	0001e597          	auipc	a1,0x1e
    800051ae:	99658593          	addi	a1,a1,-1642 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800051b2:	cc91                	beqz	s1,800051ce <virtual_instruction_2+0x1b0>
    800051b4:	6418                	ld	a4,8(s0)
    800051b6:	47d9                	li	a5,22
    TEST_END();
    800051b8:	0001e597          	auipc	a1,0x1e
    800051bc:	97858593          	addi	a1,a1,-1672 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800051c0:	00f70763          	beq	a4,a5,800051ce <virtual_instruction_2+0x1b0>
    800051c4:	4481                	li	s1,0
    TEST_END();
    800051c6:	0001e597          	auipc	a1,0x1e
    800051ca:	97a58593          	addi	a1,a1,-1670 # 80022b40 <__func__.2+0x2d8>
    800051ce:	0001e517          	auipc	a0,0x1e
    800051d2:	a1a50513          	addi	a0,a0,-1510 # 80022be8 <__func__.2+0x380>
    800051d6:	29b1b0ef          	jal	80020c70 <printf>
    800051da:	4511                	li	a0,4
    800051dc:	8fdfb0ef          	jal	80000ad8 <goto_priv>
    800051e0:	9c8fc0ef          	jal	800013a8 <reset_state>

}
    800051e4:	70a2                	ld	ra,40(sp)
    800051e6:	7402                	ld	s0,32(sp)
    800051e8:	8526                	mv	a0,s1
    800051ea:	64e2                	ld	s1,24(sp)
    800051ec:	6145                	addi	sp,sp,48
    800051ee:	8082                	ret

00000000800051f0 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    800051f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800051f2:	0001c597          	auipc	a1,0x1c
    800051f6:	20e58593          	addi	a1,a1,526 # 80021400 <__func__.9>
    800051fa:	0001e517          	auipc	a0,0x1e
    800051fe:	95650513          	addi	a0,a0,-1706 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_3() {
    80005202:	ec06                	sd	ra,24(sp)
    80005204:	e822                	sd	s0,16(sp)
    80005206:	e426                	sd	s1,8(sp)
    TEST_START();
    80005208:	2691b0ef          	jal	80020c70 <printf>
    8000520c:	4529                	li	a0,10
    8000520e:	0f21b0ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    80005212:	4511                	li	a0,4
    80005214:	8c5fb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80005218:	004007b7          	lui	a5,0x400
    8000521c:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005220:	4509                	li	a0,2
    80005222:	8b7fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005226:	0330000f          	fence	rw,rw
    8000522a:	00040497          	auipc	s1,0x40
    8000522e:	de648493          	addi	s1,s1,-538 # 80045010 <excpt>
    80005232:	4785                	li	a5,1
    80005234:	00040717          	auipc	a4,0x40
    80005238:	e0073a23          	sd	zero,-492(a4) # 80045048 <excpt+0x38>
    8000523c:	00f49023          	sh	a5,0(s1)
    80005240:	0330000f          	fence	rw,rw
    TEST_EXEC_SRET();
    80005244:	00000297          	auipc	t0,0x0
    80005248:	01028293          	addi	t0,t0,16 # 80005254 <virtual_instruction_3+0x64>
    8000524c:	14129073          	csrw	sepc,t0
    80005250:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005254:	08200593          	li	a1,130
    80005258:	0001e617          	auipc	a2,0x1e
    8000525c:	61060613          	addi	a2,a2,1552 # 80023868 <__func__.2+0x1000>
    80005260:	0001e517          	auipc	a0,0x1e
    80005264:	90850513          	addi	a0,a0,-1784 # 80022b68 <__func__.2+0x300>
    80005268:	2091b0ef          	jal	80020c70 <printf>
    8000526c:	00040797          	auipc	a5,0x40
    80005270:	da57c783          	lbu	a5,-603(a5) # 80045011 <excpt+0x1>
    80005274:	0001e597          	auipc	a1,0x1e
    80005278:	8cc58593          	addi	a1,a1,-1844 # 80022b40 <__func__.2+0x2d8>
    8000527c:	cf89                	beqz	a5,80005296 <virtual_instruction_3+0xa6>
    8000527e:	6498                	ld	a4,8(s1)
    80005280:	47d9                	li	a5,22
    80005282:	0001e597          	auipc	a1,0x1e
    80005286:	8ae58593          	addi	a1,a1,-1874 # 80022b30 <__func__.2+0x2c8>
    8000528a:	00f70663          	beq	a4,a5,80005296 <virtual_instruction_3+0xa6>
    8000528e:	0001e597          	auipc	a1,0x1e
    80005292:	8b258593          	addi	a1,a1,-1870 # 80022b40 <__func__.2+0x2d8>
    80005296:	0001e517          	auipc	a0,0x1e
    8000529a:	8ea50513          	addi	a0,a0,-1814 # 80022b80 <__func__.2+0x318>
    8000529e:	1d31b0ef          	jal	80020c70 <printf>
    800052a2:	00040797          	auipc	a5,0x40
    800052a6:	d6f7c783          	lbu	a5,-657(a5) # 80045011 <excpt+0x1>
    800052aa:	c789                	beqz	a5,800052b4 <virtual_instruction_3+0xc4>
    800052ac:	6498                	ld	a4,8(s1)
    800052ae:	47d9                	li	a5,22
    800052b0:	00f70c63          	beq	a4,a5,800052c8 <virtual_instruction_3+0xd8>
    800052b4:	0001e517          	auipc	a0,0x1e
    800052b8:	8d450513          	addi	a0,a0,-1836 # 80022b88 <__func__.2+0x320>
    800052bc:	1b51b0ef          	jal	80020c70 <printf>
    800052c0:	02900513          	li	a0,41
    800052c4:	03c1b0ef          	jal	80020300 <putchar>
    800052c8:	4529                	li	a0,10
    800052ca:	0361b0ef          	jal	80020300 <putchar>
    800052ce:	00040417          	auipc	s0,0x40
    800052d2:	d4344403          	lbu	s0,-701(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    800052d6:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800052d8:	c409                	beqz	s0,800052e2 <virtual_instruction_3+0xf2>
    800052da:	6498                	ld	a4,8(s1)
    800052dc:	47d9                	li	a5,22
    800052de:	02f70e63          	beq	a4,a5,8000531a <virtual_instruction_3+0x12a>
    goto_priv(PRIV_M);
    800052e2:	ff6fb0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800052e6:	004007b7          	lui	a5,0x400
    800052ea:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800052ee:	4401                	li	s0,0

    TEST_END();
    800052f0:	0001e597          	auipc	a1,0x1e
    800052f4:	85058593          	addi	a1,a1,-1968 # 80022b40 <__func__.2+0x2d8>
    800052f8:	0001e517          	auipc	a0,0x1e
    800052fc:	8f050513          	addi	a0,a0,-1808 # 80022be8 <__func__.2+0x380>
    80005300:	1711b0ef          	jal	80020c70 <printf>
    80005304:	4511                	li	a0,4
    80005306:	fd2fb0ef          	jal	80000ad8 <goto_priv>
    8000530a:	89efc0ef          	jal	800013a8 <reset_state>
}
    8000530e:	60e2                	ld	ra,24(sp)
    80005310:	8522                	mv	a0,s0
    80005312:	6442                	ld	s0,16(sp)
    80005314:	64a2                	ld	s1,8(sp)
    80005316:	6105                	addi	sp,sp,32
    80005318:	8082                	ret
    goto_priv(PRIV_M);
    8000531a:	fbefb0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    8000531e:	004007b7          	lui	a5,0x400
    80005322:	6007b073          	csrc	hstatus,a5
    TEST_END();
    80005326:	0001e597          	auipc	a1,0x1e
    8000532a:	80a58593          	addi	a1,a1,-2038 # 80022b30 <__func__.2+0x2c8>
    8000532e:	b7e9                	j	800052f8 <virtual_instruction_3+0x108>

0000000080005330 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80005330:	1101                	addi	sp,sp,-32

    TEST_START();
    80005332:	0001c597          	auipc	a1,0x1c
    80005336:	0e658593          	addi	a1,a1,230 # 80021418 <__func__.8>
    8000533a:	0001e517          	auipc	a0,0x1e
    8000533e:	81650513          	addi	a0,a0,-2026 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_4() {
    80005342:	ec06                	sd	ra,24(sp)
    80005344:	e822                	sd	s0,16(sp)
    80005346:	e426                	sd	s1,8(sp)
    TEST_START();
    80005348:	1291b0ef          	jal	80020c70 <printf>
    8000534c:	4529                	li	a0,10
    8000534e:	7b31a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80005352:	4511                	li	a0,4
    80005354:	f84fb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005358:	001007b7          	lui	a5,0x100
    8000535c:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005360:	4509                	li	a0,2
    80005362:	f76fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005366:	0330000f          	fence	rw,rw
    8000536a:	00040417          	auipc	s0,0x40
    8000536e:	ca640413          	addi	s0,s0,-858 # 80045010 <excpt>
    80005372:	4785                	li	a5,1
    80005374:	00040717          	auipc	a4,0x40
    80005378:	cc073a23          	sd	zero,-812(a4) # 80045048 <excpt+0x38>
    8000537c:	00f41023          	sh	a5,0(s0)
    80005380:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80005384:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80005388:	08200593          	li	a1,130
    8000538c:	0001e617          	auipc	a2,0x1e
    80005390:	51c60613          	addi	a2,a2,1308 # 800238a8 <__func__.2+0x1040>
    80005394:	0001d517          	auipc	a0,0x1d
    80005398:	7d450513          	addi	a0,a0,2004 # 80022b68 <__func__.2+0x300>
    8000539c:	0d51b0ef          	jal	80020c70 <printf>
    800053a0:	00040797          	auipc	a5,0x40
    800053a4:	c717c783          	lbu	a5,-911(a5) # 80045011 <excpt+0x1>
    800053a8:	0001d597          	auipc	a1,0x1d
    800053ac:	79858593          	addi	a1,a1,1944 # 80022b40 <__func__.2+0x2d8>
    800053b0:	cf89                	beqz	a5,800053ca <virtual_instruction_4+0x9a>
    800053b2:	6418                	ld	a4,8(s0)
    800053b4:	47d9                	li	a5,22
    800053b6:	0001d597          	auipc	a1,0x1d
    800053ba:	77a58593          	addi	a1,a1,1914 # 80022b30 <__func__.2+0x2c8>
    800053be:	00f70663          	beq	a4,a5,800053ca <virtual_instruction_4+0x9a>
    800053c2:	0001d597          	auipc	a1,0x1d
    800053c6:	77e58593          	addi	a1,a1,1918 # 80022b40 <__func__.2+0x2d8>
    800053ca:	0001d517          	auipc	a0,0x1d
    800053ce:	7b650513          	addi	a0,a0,1974 # 80022b80 <__func__.2+0x318>
    800053d2:	09f1b0ef          	jal	80020c70 <printf>
    800053d6:	00040797          	auipc	a5,0x40
    800053da:	c3b7c783          	lbu	a5,-965(a5) # 80045011 <excpt+0x1>
    800053de:	c789                	beqz	a5,800053e8 <virtual_instruction_4+0xb8>
    800053e0:	6418                	ld	a4,8(s0)
    800053e2:	47d9                	li	a5,22
    800053e4:	00f70c63          	beq	a4,a5,800053fc <virtual_instruction_4+0xcc>
    800053e8:	0001d517          	auipc	a0,0x1d
    800053ec:	7a050513          	addi	a0,a0,1952 # 80022b88 <__func__.2+0x320>
    800053f0:	0811b0ef          	jal	80020c70 <printf>
    800053f4:	02900513          	li	a0,41
    800053f8:	7091a0ef          	jal	80020300 <putchar>
    800053fc:	4529                	li	a0,10
    800053fe:	7031a0ef          	jal	80020300 <putchar>
    80005402:	00040797          	auipc	a5,0x40
    80005406:	c0f7c783          	lbu	a5,-1009(a5) # 80045011 <excpt+0x1>
    8000540a:	4481                	li	s1,0
    8000540c:	c789                	beqz	a5,80005416 <virtual_instruction_4+0xe6>
    8000540e:	6404                	ld	s1,8(s0)
    80005410:	14a9                	addi	s1,s1,-22
    80005412:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    80005416:	0330000f          	fence	rw,rw
    8000541a:	4785                	li	a5,1
    8000541c:	00040717          	auipc	a4,0x40
    80005420:	c2073623          	sd	zero,-980(a4) # 80045048 <excpt+0x38>
    80005424:	00f41023          	sh	a5,0(s0)
    80005428:	0330000f          	fence	rw,rw
    CSRW(satp, 0x0);
    8000542c:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005430:	08200593          	li	a1,130
    80005434:	0001e617          	auipc	a2,0x1e
    80005438:	4b460613          	addi	a2,a2,1204 # 800238e8 <__func__.2+0x1080>
    8000543c:	0001d517          	auipc	a0,0x1d
    80005440:	72c50513          	addi	a0,a0,1836 # 80022b68 <__func__.2+0x300>
    80005444:	02d1b0ef          	jal	80020c70 <printf>
    80005448:	00040797          	auipc	a5,0x40
    8000544c:	bc97c783          	lbu	a5,-1079(a5) # 80045011 <excpt+0x1>
    80005450:	0001d597          	auipc	a1,0x1d
    80005454:	6f058593          	addi	a1,a1,1776 # 80022b40 <__func__.2+0x2d8>
    80005458:	cf89                	beqz	a5,80005472 <virtual_instruction_4+0x142>
    8000545a:	6418                	ld	a4,8(s0)
    8000545c:	47d9                	li	a5,22
    8000545e:	0001d597          	auipc	a1,0x1d
    80005462:	6d258593          	addi	a1,a1,1746 # 80022b30 <__func__.2+0x2c8>
    80005466:	00f70663          	beq	a4,a5,80005472 <virtual_instruction_4+0x142>
    8000546a:	0001d597          	auipc	a1,0x1d
    8000546e:	6d658593          	addi	a1,a1,1750 # 80022b40 <__func__.2+0x2d8>
    80005472:	0001d517          	auipc	a0,0x1d
    80005476:	70e50513          	addi	a0,a0,1806 # 80022b80 <__func__.2+0x318>
    8000547a:	7f61b0ef          	jal	80020c70 <printf>
    8000547e:	00040797          	auipc	a5,0x40
    80005482:	b937c783          	lbu	a5,-1133(a5) # 80045011 <excpt+0x1>
    80005486:	c789                	beqz	a5,80005490 <virtual_instruction_4+0x160>
    80005488:	6418                	ld	a4,8(s0)
    8000548a:	47d9                	li	a5,22
    8000548c:	00f70c63          	beq	a4,a5,800054a4 <virtual_instruction_4+0x174>
    80005490:	0001d517          	auipc	a0,0x1d
    80005494:	6f850513          	addi	a0,a0,1784 # 80022b88 <__func__.2+0x320>
    80005498:	7d81b0ef          	jal	80020c70 <printf>
    8000549c:	02900513          	li	a0,41
    800054a0:	6611a0ef          	jal	80020300 <putchar>
    800054a4:	4529                	li	a0,10
    800054a6:	65b1a0ef          	jal	80020300 <putchar>
    800054aa:	c095                	beqz	s1,800054ce <virtual_instruction_4+0x19e>
    800054ac:	00040497          	auipc	s1,0x40
    800054b0:	b654c483          	lbu	s1,-1179(s1) # 80045011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    800054b4:	0001d597          	auipc	a1,0x1d
    800054b8:	68c58593          	addi	a1,a1,1676 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800054bc:	cc91                	beqz	s1,800054d8 <virtual_instruction_4+0x1a8>
    800054be:	6418                	ld	a4,8(s0)
    800054c0:	47d9                	li	a5,22
    TEST_END();
    800054c2:	0001d597          	auipc	a1,0x1d
    800054c6:	66e58593          	addi	a1,a1,1646 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800054ca:	00f70763          	beq	a4,a5,800054d8 <virtual_instruction_4+0x1a8>
    800054ce:	4481                	li	s1,0
    TEST_END();
    800054d0:	0001d597          	auipc	a1,0x1d
    800054d4:	67058593          	addi	a1,a1,1648 # 80022b40 <__func__.2+0x2d8>
    800054d8:	0001d517          	auipc	a0,0x1d
    800054dc:	71050513          	addi	a0,a0,1808 # 80022be8 <__func__.2+0x380>
    800054e0:	7901b0ef          	jal	80020c70 <printf>
    800054e4:	4511                	li	a0,4
    800054e6:	df2fb0ef          	jal	80000ad8 <goto_priv>
    800054ea:	ebffb0ef          	jal	800013a8 <reset_state>
}
    800054ee:	60e2                	ld	ra,24(sp)
    800054f0:	6442                	ld	s0,16(sp)
    800054f2:	8526                	mv	a0,s1
    800054f4:	64a2                	ld	s1,8(sp)
    800054f6:	6105                	addi	sp,sp,32
    800054f8:	8082                	ret

00000000800054fa <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    800054fa:	1101                	addi	sp,sp,-32

    TEST_START();
    800054fc:	0001c597          	auipc	a1,0x1c
    80005500:	f3458593          	addi	a1,a1,-204 # 80021430 <__func__.7>
    80005504:	0001d517          	auipc	a0,0x1d
    80005508:	64c50513          	addi	a0,a0,1612 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_5() {
    8000550c:	ec06                	sd	ra,24(sp)
    8000550e:	e822                	sd	s0,16(sp)
    80005510:	e426                	sd	s1,8(sp)
    TEST_START();
    80005512:	75e1b0ef          	jal	80020c70 <printf>
    80005516:	4529                	li	a0,10
    80005518:	5e91a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8000551c:	4511                	li	a0,4
    8000551e:	dbafb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80005522:	002007b7          	lui	a5,0x200
    80005526:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8000552a:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    8000552e:	4509                	li	a0,2
    80005530:	da8fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005534:	0330000f          	fence	rw,rw
    80005538:	00040497          	auipc	s1,0x40
    8000553c:	ad848493          	addi	s1,s1,-1320 # 80045010 <excpt>
    80005540:	4785                	li	a5,1
    80005542:	00040717          	auipc	a4,0x40
    80005546:	b0073323          	sd	zero,-1274(a4) # 80045048 <excpt+0x38>
    8000554a:	00f49023          	sh	a5,0(s1)
    8000554e:	0330000f          	fence	rw,rw
    asm("wfi");
    80005552:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005556:	08200593          	li	a1,130
    8000555a:	0001e617          	auipc	a2,0x1e
    8000555e:	3d660613          	addi	a2,a2,982 # 80023930 <__func__.2+0x10c8>
    80005562:	0001d517          	auipc	a0,0x1d
    80005566:	60650513          	addi	a0,a0,1542 # 80022b68 <__func__.2+0x300>
    8000556a:	7061b0ef          	jal	80020c70 <printf>
    8000556e:	00040797          	auipc	a5,0x40
    80005572:	aa37c783          	lbu	a5,-1373(a5) # 80045011 <excpt+0x1>
    80005576:	0001d597          	auipc	a1,0x1d
    8000557a:	5ca58593          	addi	a1,a1,1482 # 80022b40 <__func__.2+0x2d8>
    8000557e:	cf89                	beqz	a5,80005598 <virtual_instruction_5+0x9e>
    80005580:	6498                	ld	a4,8(s1)
    80005582:	47d9                	li	a5,22
    80005584:	0001d597          	auipc	a1,0x1d
    80005588:	5ac58593          	addi	a1,a1,1452 # 80022b30 <__func__.2+0x2c8>
    8000558c:	00f70663          	beq	a4,a5,80005598 <virtual_instruction_5+0x9e>
    80005590:	0001d597          	auipc	a1,0x1d
    80005594:	5b058593          	addi	a1,a1,1456 # 80022b40 <__func__.2+0x2d8>
    80005598:	0001d517          	auipc	a0,0x1d
    8000559c:	5e850513          	addi	a0,a0,1512 # 80022b80 <__func__.2+0x318>
    800055a0:	6d01b0ef          	jal	80020c70 <printf>
    800055a4:	00040797          	auipc	a5,0x40
    800055a8:	a6d7c783          	lbu	a5,-1427(a5) # 80045011 <excpt+0x1>
    800055ac:	c789                	beqz	a5,800055b6 <virtual_instruction_5+0xbc>
    800055ae:	6498                	ld	a4,8(s1)
    800055b0:	47d9                	li	a5,22
    800055b2:	00f70c63          	beq	a4,a5,800055ca <virtual_instruction_5+0xd0>
    800055b6:	0001d517          	auipc	a0,0x1d
    800055ba:	5d250513          	addi	a0,a0,1490 # 80022b88 <__func__.2+0x320>
    800055be:	6b21b0ef          	jal	80020c70 <printf>
    800055c2:	02900513          	li	a0,41
    800055c6:	53b1a0ef          	jal	80020300 <putchar>
    800055ca:	4529                	li	a0,10
    800055cc:	5351a0ef          	jal	80020300 <putchar>
    800055d0:	00040417          	auipc	s0,0x40
    800055d4:	a4144403          	lbu	s0,-1471(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    800055d8:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800055da:	c409                	beqz	s0,800055e4 <virtual_instruction_5+0xea>
    800055dc:	6498                	ld	a4,8(s1)
    800055de:	47d9                	li	a5,22
    800055e0:	04f70263          	beq	a4,a5,80005624 <virtual_instruction_5+0x12a>
    goto_priv(PRIV_M);
    800055e4:	cf4fb0ef          	jal	80000ad8 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800055e8:	343025f3          	csrr	a1,mtval
    800055ec:	0001e517          	auipc	a0,0x1e
    800055f0:	38c50513          	addi	a0,a0,908 # 80023978 <__func__.2+0x1110>
    800055f4:	67c1b0ef          	jal	80020c70 <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800055f8:	4401                	li	s0,0

    TEST_END();
    800055fa:	0001d597          	auipc	a1,0x1d
    800055fe:	54658593          	addi	a1,a1,1350 # 80022b40 <__func__.2+0x2d8>
    80005602:	0001d517          	auipc	a0,0x1d
    80005606:	5e650513          	addi	a0,a0,1510 # 80022be8 <__func__.2+0x380>
    8000560a:	6661b0ef          	jal	80020c70 <printf>
    8000560e:	4511                	li	a0,4
    80005610:	cc8fb0ef          	jal	80000ad8 <goto_priv>
    80005614:	d95fb0ef          	jal	800013a8 <reset_state>
}
    80005618:	60e2                	ld	ra,24(sp)
    8000561a:	8522                	mv	a0,s0
    8000561c:	6442                	ld	s0,16(sp)
    8000561e:	64a2                	ld	s1,8(sp)
    80005620:	6105                	addi	sp,sp,32
    80005622:	8082                	ret
    goto_priv(PRIV_M);
    80005624:	cb4fb0ef          	jal	80000ad8 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    80005628:	343025f3          	csrr	a1,mtval
    8000562c:	0001e517          	auipc	a0,0x1e
    80005630:	34c50513          	addi	a0,a0,844 # 80023978 <__func__.2+0x1110>
    80005634:	63c1b0ef          	jal	80020c70 <printf>
    TEST_END();
    80005638:	0001d597          	auipc	a1,0x1d
    8000563c:	4f858593          	addi	a1,a1,1272 # 80022b30 <__func__.2+0x2c8>
    80005640:	b7c9                	j	80005602 <virtual_instruction_5+0x108>

0000000080005642 <virtual_instruction_6>:


bool virtual_instruction_6() {
    80005642:	1101                	addi	sp,sp,-32

    TEST_START();
    80005644:	0001c597          	auipc	a1,0x1c
    80005648:	e0458593          	addi	a1,a1,-508 # 80021448 <__func__.6>
    8000564c:	0001d517          	auipc	a0,0x1d
    80005650:	50450513          	addi	a0,a0,1284 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_6() {
    80005654:	ec06                	sd	ra,24(sp)
    80005656:	e822                	sd	s0,16(sp)
    80005658:	e426                	sd	s1,8(sp)
    TEST_START();
    8000565a:	6161b0ef          	jal	80020c70 <printf>
    8000565e:	4529                	li	a0,10
    80005660:	4a11a0ef          	jal	80020300 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005664:	4501                	li	a0,0
    80005666:	c72fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000566a:	0330000f          	fence	rw,rw
    8000566e:	00040417          	auipc	s0,0x40
    80005672:	9a240413          	addi	s0,s0,-1630 # 80045010 <excpt>
    80005676:	4785                	li	a5,1
    80005678:	00040717          	auipc	a4,0x40
    8000567c:	9c073823          	sd	zero,-1584(a4) # 80045048 <excpt+0x38>
    80005680:	00f41023          	sh	a5,0(s0)
    80005684:	0330000f          	fence	rw,rw
    asm volatile(
    80005688:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    8000568c:	08200593          	li	a1,130
    80005690:	0001e617          	auipc	a2,0x1e
    80005694:	2f060613          	addi	a2,a2,752 # 80023980 <__func__.2+0x1118>
    80005698:	0001d517          	auipc	a0,0x1d
    8000569c:	4d050513          	addi	a0,a0,1232 # 80022b68 <__func__.2+0x300>
    800056a0:	5d01b0ef          	jal	80020c70 <printf>
    800056a4:	00040797          	auipc	a5,0x40
    800056a8:	96d7c783          	lbu	a5,-1683(a5) # 80045011 <excpt+0x1>
    800056ac:	0001d597          	auipc	a1,0x1d
    800056b0:	49458593          	addi	a1,a1,1172 # 80022b40 <__func__.2+0x2d8>
    800056b4:	cf89                	beqz	a5,800056ce <virtual_instruction_6+0x8c>
    800056b6:	6418                	ld	a4,8(s0)
    800056b8:	47d9                	li	a5,22
    800056ba:	0001d597          	auipc	a1,0x1d
    800056be:	47658593          	addi	a1,a1,1142 # 80022b30 <__func__.2+0x2c8>
    800056c2:	00f70663          	beq	a4,a5,800056ce <virtual_instruction_6+0x8c>
    800056c6:	0001d597          	auipc	a1,0x1d
    800056ca:	47a58593          	addi	a1,a1,1146 # 80022b40 <__func__.2+0x2d8>
    800056ce:	0001d517          	auipc	a0,0x1d
    800056d2:	4b250513          	addi	a0,a0,1202 # 80022b80 <__func__.2+0x318>
    800056d6:	59a1b0ef          	jal	80020c70 <printf>
    800056da:	00040797          	auipc	a5,0x40
    800056de:	9377c783          	lbu	a5,-1737(a5) # 80045011 <excpt+0x1>
    800056e2:	c789                	beqz	a5,800056ec <virtual_instruction_6+0xaa>
    800056e4:	6418                	ld	a4,8(s0)
    800056e6:	47d9                	li	a5,22
    800056e8:	00f70c63          	beq	a4,a5,80005700 <virtual_instruction_6+0xbe>
    800056ec:	0001d517          	auipc	a0,0x1d
    800056f0:	49c50513          	addi	a0,a0,1180 # 80022b88 <__func__.2+0x320>
    800056f4:	57c1b0ef          	jal	80020c70 <printf>
    800056f8:	02900513          	li	a0,41
    800056fc:	4051a0ef          	jal	80020300 <putchar>
    80005700:	4529                	li	a0,10
    80005702:	3ff1a0ef          	jal	80020300 <putchar>
    80005706:	00040797          	auipc	a5,0x40
    8000570a:	90b7c783          	lbu	a5,-1781(a5) # 80045011 <excpt+0x1>
    8000570e:	4481                	li	s1,0
    80005710:	c789                	beqz	a5,8000571a <virtual_instruction_6+0xd8>
    80005712:	6404                	ld	s1,8(s0)
    80005714:	14a9                	addi	s1,s1,-22
    80005716:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    8000571a:	4501                	li	a0,0
    8000571c:	bbcfb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005720:	0330000f          	fence	rw,rw
    80005724:	4785                	li	a5,1
    80005726:	00040717          	auipc	a4,0x40
    8000572a:	92073123          	sd	zero,-1758(a4) # 80045048 <excpt+0x38>
    8000572e:	00f41023          	sh	a5,0(s0)
    80005732:	0330000f          	fence	rw,rw
    asm volatile(
    80005736:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    8000573a:	08200593          	li	a1,130
    8000573e:	0001e617          	auipc	a2,0x1e
    80005742:	28260613          	addi	a2,a2,642 # 800239c0 <__func__.2+0x1158>
    80005746:	0001d517          	auipc	a0,0x1d
    8000574a:	42250513          	addi	a0,a0,1058 # 80022b68 <__func__.2+0x300>
    8000574e:	5221b0ef          	jal	80020c70 <printf>
    80005752:	00040797          	auipc	a5,0x40
    80005756:	8bf7c783          	lbu	a5,-1857(a5) # 80045011 <excpt+0x1>
    8000575a:	0001d597          	auipc	a1,0x1d
    8000575e:	3e658593          	addi	a1,a1,998 # 80022b40 <__func__.2+0x2d8>
    80005762:	cf89                	beqz	a5,8000577c <virtual_instruction_6+0x13a>
    80005764:	6418                	ld	a4,8(s0)
    80005766:	47d9                	li	a5,22
    80005768:	0001d597          	auipc	a1,0x1d
    8000576c:	3c858593          	addi	a1,a1,968 # 80022b30 <__func__.2+0x2c8>
    80005770:	00f70663          	beq	a4,a5,8000577c <virtual_instruction_6+0x13a>
    80005774:	0001d597          	auipc	a1,0x1d
    80005778:	3cc58593          	addi	a1,a1,972 # 80022b40 <__func__.2+0x2d8>
    8000577c:	0001d517          	auipc	a0,0x1d
    80005780:	40450513          	addi	a0,a0,1028 # 80022b80 <__func__.2+0x318>
    80005784:	4ec1b0ef          	jal	80020c70 <printf>
    80005788:	00040797          	auipc	a5,0x40
    8000578c:	8897c783          	lbu	a5,-1911(a5) # 80045011 <excpt+0x1>
    80005790:	c789                	beqz	a5,8000579a <virtual_instruction_6+0x158>
    80005792:	6418                	ld	a4,8(s0)
    80005794:	47d9                	li	a5,22
    80005796:	00f70c63          	beq	a4,a5,800057ae <virtual_instruction_6+0x16c>
    8000579a:	0001d517          	auipc	a0,0x1d
    8000579e:	3ee50513          	addi	a0,a0,1006 # 80022b88 <__func__.2+0x320>
    800057a2:	4ce1b0ef          	jal	80020c70 <printf>
    800057a6:	02900513          	li	a0,41
    800057aa:	3571a0ef          	jal	80020300 <putchar>
    800057ae:	4529                	li	a0,10
    800057b0:	3511a0ef          	jal	80020300 <putchar>
    800057b4:	c881                	beqz	s1,800057c4 <virtual_instruction_6+0x182>
    800057b6:	00040797          	auipc	a5,0x40
    800057ba:	85b7c783          	lbu	a5,-1957(a5) # 80045011 <excpt+0x1>
    800057be:	4481                	li	s1,0
    800057c0:	0e079763          	bnez	a5,800058ae <virtual_instruction_6+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    800057c4:	4501                	li	a0,0
    800057c6:	b12fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    800057ca:	0330000f          	fence	rw,rw
    800057ce:	4785                	li	a5,1
    800057d0:	00040717          	auipc	a4,0x40
    800057d4:	86073c23          	sd	zero,-1928(a4) # 80045048 <excpt+0x38>
    800057d8:	00f41023          	sh	a5,0(s0)
    800057dc:	0330000f          	fence	rw,rw
    asm volatile(
    800057e0:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800057e4:	08200593          	li	a1,130
    800057e8:	0001e617          	auipc	a2,0x1e
    800057ec:	21860613          	addi	a2,a2,536 # 80023a00 <__func__.2+0x1198>
    800057f0:	0001d517          	auipc	a0,0x1d
    800057f4:	37850513          	addi	a0,a0,888 # 80022b68 <__func__.2+0x300>
    800057f8:	4781b0ef          	jal	80020c70 <printf>
    800057fc:	00040797          	auipc	a5,0x40
    80005800:	8157c783          	lbu	a5,-2027(a5) # 80045011 <excpt+0x1>
    80005804:	0001d597          	auipc	a1,0x1d
    80005808:	33c58593          	addi	a1,a1,828 # 80022b40 <__func__.2+0x2d8>
    8000580c:	cf89                	beqz	a5,80005826 <virtual_instruction_6+0x1e4>
    8000580e:	6418                	ld	a4,8(s0)
    80005810:	47d9                	li	a5,22
    80005812:	0001d597          	auipc	a1,0x1d
    80005816:	31e58593          	addi	a1,a1,798 # 80022b30 <__func__.2+0x2c8>
    8000581a:	00f70663          	beq	a4,a5,80005826 <virtual_instruction_6+0x1e4>
    8000581e:	0001d597          	auipc	a1,0x1d
    80005822:	32258593          	addi	a1,a1,802 # 80022b40 <__func__.2+0x2d8>
    80005826:	0001d517          	auipc	a0,0x1d
    8000582a:	35a50513          	addi	a0,a0,858 # 80022b80 <__func__.2+0x318>
    8000582e:	4421b0ef          	jal	80020c70 <printf>
    80005832:	0003f797          	auipc	a5,0x3f
    80005836:	7df7c783          	lbu	a5,2015(a5) # 80045011 <excpt+0x1>
    8000583a:	c789                	beqz	a5,80005844 <virtual_instruction_6+0x202>
    8000583c:	6418                	ld	a4,8(s0)
    8000583e:	47d9                	li	a5,22
    80005840:	00f70c63          	beq	a4,a5,80005858 <virtual_instruction_6+0x216>
    80005844:	0001d517          	auipc	a0,0x1d
    80005848:	34450513          	addi	a0,a0,836 # 80022b88 <__func__.2+0x320>
    8000584c:	4241b0ef          	jal	80020c70 <printf>
    80005850:	02900513          	li	a0,41
    80005854:	2ad1a0ef          	jal	80020300 <putchar>
    80005858:	4529                	li	a0,10
    8000585a:	2a71a0ef          	jal	80020300 <putchar>
    8000585e:	c095                	beqz	s1,80005882 <virtual_instruction_6+0x240>
    80005860:	0003f497          	auipc	s1,0x3f
    80005864:	7b14c483          	lbu	s1,1969(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005868:	0001d597          	auipc	a1,0x1d
    8000586c:	2d858593          	addi	a1,a1,728 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005870:	cc91                	beqz	s1,8000588c <virtual_instruction_6+0x24a>
    80005872:	6418                	ld	a4,8(s0)
    80005874:	47d9                	li	a5,22
    TEST_END();
    80005876:	0001d597          	auipc	a1,0x1d
    8000587a:	2ba58593          	addi	a1,a1,698 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000587e:	00f70763          	beq	a4,a5,8000588c <virtual_instruction_6+0x24a>
    80005882:	4481                	li	s1,0
    TEST_END();
    80005884:	0001d597          	auipc	a1,0x1d
    80005888:	2bc58593          	addi	a1,a1,700 # 80022b40 <__func__.2+0x2d8>
    8000588c:	0001d517          	auipc	a0,0x1d
    80005890:	35c50513          	addi	a0,a0,860 # 80022be8 <__func__.2+0x380>
    80005894:	3dc1b0ef          	jal	80020c70 <printf>
    80005898:	4511                	li	a0,4
    8000589a:	a3efb0ef          	jal	80000ad8 <goto_priv>
    8000589e:	b0bfb0ef          	jal	800013a8 <reset_state>
}
    800058a2:	60e2                	ld	ra,24(sp)
    800058a4:	6442                	ld	s0,16(sp)
    800058a6:	8526                	mv	a0,s1
    800058a8:	64a2                	ld	s1,8(sp)
    800058aa:	6105                	addi	sp,sp,32
    800058ac:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800058ae:	6404                	ld	s1,8(s0)
    800058b0:	14a9                	addi	s1,s1,-22
    800058b2:	0014b493          	seqz	s1,s1
    800058b6:	b739                	j	800057c4 <virtual_instruction_6+0x182>

00000000800058b8 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    800058b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800058ba:	0001c597          	auipc	a1,0x1c
    800058be:	ba658593          	addi	a1,a1,-1114 # 80021460 <__func__.5>
    800058c2:	0001d517          	auipc	a0,0x1d
    800058c6:	28e50513          	addi	a0,a0,654 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_7() {
    800058ca:	ec06                	sd	ra,24(sp)
    800058cc:	e822                	sd	s0,16(sp)
    800058ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800058d0:	3a01b0ef          	jal	80020c70 <printf>
    800058d4:	4529                	li	a0,10
    800058d6:	22b1a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_VU);
    800058da:	4501                	li	a0,0
    800058dc:	9fcfb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    800058e0:	0330000f          	fence	rw,rw
    800058e4:	0003f417          	auipc	s0,0x3f
    800058e8:	72c40413          	addi	s0,s0,1836 # 80045010 <excpt>
    800058ec:	4785                	li	a5,1
    800058ee:	0003f717          	auipc	a4,0x3f
    800058f2:	74073d23          	sd	zero,1882(a4) # 80045048 <excpt+0x38>
    800058f6:	00f41023          	sh	a5,0(s0)
    800058fa:	0330000f          	fence	rw,rw
    asm volatile(
    800058fe:	4781                	li	a5,0
    80005900:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005904:	08200593          	li	a1,130
    80005908:	0001e617          	auipc	a2,0x1e
    8000590c:	14860613          	addi	a2,a2,328 # 80023a50 <__func__.2+0x11e8>
    80005910:	0001d517          	auipc	a0,0x1d
    80005914:	25850513          	addi	a0,a0,600 # 80022b68 <__func__.2+0x300>
    80005918:	3581b0ef          	jal	80020c70 <printf>
    8000591c:	0003f797          	auipc	a5,0x3f
    80005920:	6f57c783          	lbu	a5,1781(a5) # 80045011 <excpt+0x1>
    80005924:	0001d597          	auipc	a1,0x1d
    80005928:	21c58593          	addi	a1,a1,540 # 80022b40 <__func__.2+0x2d8>
    8000592c:	cf89                	beqz	a5,80005946 <virtual_instruction_7+0x8e>
    8000592e:	6418                	ld	a4,8(s0)
    80005930:	47d9                	li	a5,22
    80005932:	0001d597          	auipc	a1,0x1d
    80005936:	1fe58593          	addi	a1,a1,510 # 80022b30 <__func__.2+0x2c8>
    8000593a:	00f70663          	beq	a4,a5,80005946 <virtual_instruction_7+0x8e>
    8000593e:	0001d597          	auipc	a1,0x1d
    80005942:	20258593          	addi	a1,a1,514 # 80022b40 <__func__.2+0x2d8>
    80005946:	0001d517          	auipc	a0,0x1d
    8000594a:	23a50513          	addi	a0,a0,570 # 80022b80 <__func__.2+0x318>
    8000594e:	3221b0ef          	jal	80020c70 <printf>
    80005952:	0003f797          	auipc	a5,0x3f
    80005956:	6bf7c783          	lbu	a5,1727(a5) # 80045011 <excpt+0x1>
    8000595a:	c789                	beqz	a5,80005964 <virtual_instruction_7+0xac>
    8000595c:	6418                	ld	a4,8(s0)
    8000595e:	47d9                	li	a5,22
    80005960:	00f70c63          	beq	a4,a5,80005978 <virtual_instruction_7+0xc0>
    80005964:	0001d517          	auipc	a0,0x1d
    80005968:	22450513          	addi	a0,a0,548 # 80022b88 <__func__.2+0x320>
    8000596c:	3041b0ef          	jal	80020c70 <printf>
    80005970:	02900513          	li	a0,41
    80005974:	18d1a0ef          	jal	80020300 <putchar>
    80005978:	4529                	li	a0,10
    8000597a:	1871a0ef          	jal	80020300 <putchar>
    8000597e:	0003f797          	auipc	a5,0x3f
    80005982:	6937c783          	lbu	a5,1683(a5) # 80045011 <excpt+0x1>
    80005986:	4481                	li	s1,0
    80005988:	c789                	beqz	a5,80005992 <virtual_instruction_7+0xda>
    8000598a:	6404                	ld	s1,8(s0)
    8000598c:	14a9                	addi	s1,s1,-22
    8000598e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005992:	4501                	li	a0,0
    80005994:	944fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005998:	0330000f          	fence	rw,rw
    8000599c:	4785                	li	a5,1
    8000599e:	0003f717          	auipc	a4,0x3f
    800059a2:	6a073523          	sd	zero,1706(a4) # 80045048 <excpt+0x38>
    800059a6:	00f41023          	sh	a5,0(s0)
    800059aa:	0330000f          	fence	rw,rw
    asm volatile(
    800059ae:	4781                	li	a5,0
    800059b0:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    800059b4:	08200593          	li	a1,130
    800059b8:	0001e617          	auipc	a2,0x1e
    800059bc:	0c860613          	addi	a2,a2,200 # 80023a80 <__func__.2+0x1218>
    800059c0:	0001d517          	auipc	a0,0x1d
    800059c4:	1a850513          	addi	a0,a0,424 # 80022b68 <__func__.2+0x300>
    800059c8:	2a81b0ef          	jal	80020c70 <printf>
    800059cc:	0003f797          	auipc	a5,0x3f
    800059d0:	6457c783          	lbu	a5,1605(a5) # 80045011 <excpt+0x1>
    800059d4:	0001d597          	auipc	a1,0x1d
    800059d8:	16c58593          	addi	a1,a1,364 # 80022b40 <__func__.2+0x2d8>
    800059dc:	cf89                	beqz	a5,800059f6 <virtual_instruction_7+0x13e>
    800059de:	6418                	ld	a4,8(s0)
    800059e0:	47d9                	li	a5,22
    800059e2:	0001d597          	auipc	a1,0x1d
    800059e6:	14e58593          	addi	a1,a1,334 # 80022b30 <__func__.2+0x2c8>
    800059ea:	00f70663          	beq	a4,a5,800059f6 <virtual_instruction_7+0x13e>
    800059ee:	0001d597          	auipc	a1,0x1d
    800059f2:	15258593          	addi	a1,a1,338 # 80022b40 <__func__.2+0x2d8>
    800059f6:	0001d517          	auipc	a0,0x1d
    800059fa:	18a50513          	addi	a0,a0,394 # 80022b80 <__func__.2+0x318>
    800059fe:	2721b0ef          	jal	80020c70 <printf>
    80005a02:	0003f797          	auipc	a5,0x3f
    80005a06:	60f7c783          	lbu	a5,1551(a5) # 80045011 <excpt+0x1>
    80005a0a:	c789                	beqz	a5,80005a14 <virtual_instruction_7+0x15c>
    80005a0c:	6418                	ld	a4,8(s0)
    80005a0e:	47d9                	li	a5,22
    80005a10:	00f70c63          	beq	a4,a5,80005a28 <virtual_instruction_7+0x170>
    80005a14:	0001d517          	auipc	a0,0x1d
    80005a18:	17450513          	addi	a0,a0,372 # 80022b88 <__func__.2+0x320>
    80005a1c:	2541b0ef          	jal	80020c70 <printf>
    80005a20:	02900513          	li	a0,41
    80005a24:	0dd1a0ef          	jal	80020300 <putchar>
    80005a28:	4529                	li	a0,10
    80005a2a:	0d71a0ef          	jal	80020300 <putchar>
    80005a2e:	c881                	beqz	s1,80005a3e <virtual_instruction_7+0x186>
    80005a30:	0003f797          	auipc	a5,0x3f
    80005a34:	5e17c783          	lbu	a5,1505(a5) # 80045011 <excpt+0x1>
    80005a38:	4481                	li	s1,0
    80005a3a:	54079c63          	bnez	a5,80005f92 <virtual_instruction_7+0x6da>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005a3e:	4501                	li	a0,0
    80005a40:	898fb0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a44:	0330000f          	fence	rw,rw
    80005a48:	4785                	li	a5,1
    80005a4a:	0003f717          	auipc	a4,0x3f
    80005a4e:	5e073f23          	sd	zero,1534(a4) # 80045048 <excpt+0x38>
    80005a52:	00f41023          	sh	a5,0(s0)
    80005a56:	0330000f          	fence	rw,rw
    asm volatile(
    80005a5a:	4781                	li	a5,0
    80005a5c:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005a60:	08200593          	li	a1,130
    80005a64:	0001e617          	auipc	a2,0x1e
    80005a68:	04c60613          	addi	a2,a2,76 # 80023ab0 <__func__.2+0x1248>
    80005a6c:	0001d517          	auipc	a0,0x1d
    80005a70:	0fc50513          	addi	a0,a0,252 # 80022b68 <__func__.2+0x300>
    80005a74:	1fc1b0ef          	jal	80020c70 <printf>
    80005a78:	0003f797          	auipc	a5,0x3f
    80005a7c:	5997c783          	lbu	a5,1433(a5) # 80045011 <excpt+0x1>
    80005a80:	0001d597          	auipc	a1,0x1d
    80005a84:	0c058593          	addi	a1,a1,192 # 80022b40 <__func__.2+0x2d8>
    80005a88:	cf89                	beqz	a5,80005aa2 <virtual_instruction_7+0x1ea>
    80005a8a:	6418                	ld	a4,8(s0)
    80005a8c:	47d9                	li	a5,22
    80005a8e:	0001d597          	auipc	a1,0x1d
    80005a92:	0a258593          	addi	a1,a1,162 # 80022b30 <__func__.2+0x2c8>
    80005a96:	00f70663          	beq	a4,a5,80005aa2 <virtual_instruction_7+0x1ea>
    80005a9a:	0001d597          	auipc	a1,0x1d
    80005a9e:	0a658593          	addi	a1,a1,166 # 80022b40 <__func__.2+0x2d8>
    80005aa2:	0001d517          	auipc	a0,0x1d
    80005aa6:	0de50513          	addi	a0,a0,222 # 80022b80 <__func__.2+0x318>
    80005aaa:	1c61b0ef          	jal	80020c70 <printf>
    80005aae:	0003f797          	auipc	a5,0x3f
    80005ab2:	5637c783          	lbu	a5,1379(a5) # 80045011 <excpt+0x1>
    80005ab6:	c789                	beqz	a5,80005ac0 <virtual_instruction_7+0x208>
    80005ab8:	6418                	ld	a4,8(s0)
    80005aba:	47d9                	li	a5,22
    80005abc:	00f70c63          	beq	a4,a5,80005ad4 <virtual_instruction_7+0x21c>
    80005ac0:	0001d517          	auipc	a0,0x1d
    80005ac4:	0c850513          	addi	a0,a0,200 # 80022b88 <__func__.2+0x320>
    80005ac8:	1a81b0ef          	jal	80020c70 <printf>
    80005acc:	02900513          	li	a0,41
    80005ad0:	0311a0ef          	jal	80020300 <putchar>
    80005ad4:	4529                	li	a0,10
    80005ad6:	02b1a0ef          	jal	80020300 <putchar>
    80005ada:	c881                	beqz	s1,80005aea <virtual_instruction_7+0x232>
    80005adc:	0003f797          	auipc	a5,0x3f
    80005ae0:	5357c783          	lbu	a5,1333(a5) # 80045011 <excpt+0x1>
    80005ae4:	4481                	li	s1,0
    80005ae6:	4c079063          	bnez	a5,80005fa6 <virtual_instruction_7+0x6ee>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005aea:	4501                	li	a0,0
    80005aec:	fedfa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005af0:	0330000f          	fence	rw,rw
    80005af4:	4785                	li	a5,1
    80005af6:	0003f717          	auipc	a4,0x3f
    80005afa:	54073923          	sd	zero,1362(a4) # 80045048 <excpt+0x38>
    80005afe:	00f41023          	sh	a5,0(s0)
    80005b02:	0330000f          	fence	rw,rw
    asm volatile(
    80005b06:	4781                	li	a5,0
    80005b08:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005b0c:	08200593          	li	a1,130
    80005b10:	0001e617          	auipc	a2,0x1e
    80005b14:	fd060613          	addi	a2,a2,-48 # 80023ae0 <__func__.2+0x1278>
    80005b18:	0001d517          	auipc	a0,0x1d
    80005b1c:	05050513          	addi	a0,a0,80 # 80022b68 <__func__.2+0x300>
    80005b20:	1501b0ef          	jal	80020c70 <printf>
    80005b24:	0003f797          	auipc	a5,0x3f
    80005b28:	4ed7c783          	lbu	a5,1261(a5) # 80045011 <excpt+0x1>
    80005b2c:	0001d597          	auipc	a1,0x1d
    80005b30:	01458593          	addi	a1,a1,20 # 80022b40 <__func__.2+0x2d8>
    80005b34:	cf89                	beqz	a5,80005b4e <virtual_instruction_7+0x296>
    80005b36:	6418                	ld	a4,8(s0)
    80005b38:	47d9                	li	a5,22
    80005b3a:	0001d597          	auipc	a1,0x1d
    80005b3e:	ff658593          	addi	a1,a1,-10 # 80022b30 <__func__.2+0x2c8>
    80005b42:	00f70663          	beq	a4,a5,80005b4e <virtual_instruction_7+0x296>
    80005b46:	0001d597          	auipc	a1,0x1d
    80005b4a:	ffa58593          	addi	a1,a1,-6 # 80022b40 <__func__.2+0x2d8>
    80005b4e:	0001d517          	auipc	a0,0x1d
    80005b52:	03250513          	addi	a0,a0,50 # 80022b80 <__func__.2+0x318>
    80005b56:	11a1b0ef          	jal	80020c70 <printf>
    80005b5a:	0003f797          	auipc	a5,0x3f
    80005b5e:	4b77c783          	lbu	a5,1207(a5) # 80045011 <excpt+0x1>
    80005b62:	c789                	beqz	a5,80005b6c <virtual_instruction_7+0x2b4>
    80005b64:	6418                	ld	a4,8(s0)
    80005b66:	47d9                	li	a5,22
    80005b68:	00f70c63          	beq	a4,a5,80005b80 <virtual_instruction_7+0x2c8>
    80005b6c:	0001d517          	auipc	a0,0x1d
    80005b70:	01c50513          	addi	a0,a0,28 # 80022b88 <__func__.2+0x320>
    80005b74:	0fc1b0ef          	jal	80020c70 <printf>
    80005b78:	02900513          	li	a0,41
    80005b7c:	7841a0ef          	jal	80020300 <putchar>
    80005b80:	4529                	li	a0,10
    80005b82:	77e1a0ef          	jal	80020300 <putchar>
    80005b86:	c881                	beqz	s1,80005b96 <virtual_instruction_7+0x2de>
    80005b88:	0003f797          	auipc	a5,0x3f
    80005b8c:	4897c783          	lbu	a5,1161(a5) # 80045011 <excpt+0x1>
    80005b90:	4481                	li	s1,0
    80005b92:	40079563          	bnez	a5,80005f9c <virtual_instruction_7+0x6e4>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b96:	4501                	li	a0,0
    80005b98:	f41fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b9c:	0330000f          	fence	rw,rw
    80005ba0:	4785                	li	a5,1
    80005ba2:	0003f717          	auipc	a4,0x3f
    80005ba6:	4a073323          	sd	zero,1190(a4) # 80045048 <excpt+0x38>
    80005baa:	00f41023          	sh	a5,0(s0)
    80005bae:	0330000f          	fence	rw,rw
    asm volatile(
    80005bb2:	4781                	li	a5,0
    80005bb4:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005bb8:	08200593          	li	a1,130
    80005bbc:	0001e617          	auipc	a2,0x1e
    80005bc0:	f5460613          	addi	a2,a2,-172 # 80023b10 <__func__.2+0x12a8>
    80005bc4:	0001d517          	auipc	a0,0x1d
    80005bc8:	fa450513          	addi	a0,a0,-92 # 80022b68 <__func__.2+0x300>
    80005bcc:	0a41b0ef          	jal	80020c70 <printf>
    80005bd0:	0003f797          	auipc	a5,0x3f
    80005bd4:	4417c783          	lbu	a5,1089(a5) # 80045011 <excpt+0x1>
    80005bd8:	0001d597          	auipc	a1,0x1d
    80005bdc:	f6858593          	addi	a1,a1,-152 # 80022b40 <__func__.2+0x2d8>
    80005be0:	cf89                	beqz	a5,80005bfa <virtual_instruction_7+0x342>
    80005be2:	6418                	ld	a4,8(s0)
    80005be4:	47d9                	li	a5,22
    80005be6:	0001d597          	auipc	a1,0x1d
    80005bea:	f4a58593          	addi	a1,a1,-182 # 80022b30 <__func__.2+0x2c8>
    80005bee:	00f70663          	beq	a4,a5,80005bfa <virtual_instruction_7+0x342>
    80005bf2:	0001d597          	auipc	a1,0x1d
    80005bf6:	f4e58593          	addi	a1,a1,-178 # 80022b40 <__func__.2+0x2d8>
    80005bfa:	0001d517          	auipc	a0,0x1d
    80005bfe:	f8650513          	addi	a0,a0,-122 # 80022b80 <__func__.2+0x318>
    80005c02:	06e1b0ef          	jal	80020c70 <printf>
    80005c06:	0003f797          	auipc	a5,0x3f
    80005c0a:	40b7c783          	lbu	a5,1035(a5) # 80045011 <excpt+0x1>
    80005c0e:	c789                	beqz	a5,80005c18 <virtual_instruction_7+0x360>
    80005c10:	6418                	ld	a4,8(s0)
    80005c12:	47d9                	li	a5,22
    80005c14:	00f70c63          	beq	a4,a5,80005c2c <virtual_instruction_7+0x374>
    80005c18:	0001d517          	auipc	a0,0x1d
    80005c1c:	f7050513          	addi	a0,a0,-144 # 80022b88 <__func__.2+0x320>
    80005c20:	0501b0ef          	jal	80020c70 <printf>
    80005c24:	02900513          	li	a0,41
    80005c28:	6d81a0ef          	jal	80020300 <putchar>
    80005c2c:	4529                	li	a0,10
    80005c2e:	6d21a0ef          	jal	80020300 <putchar>
    80005c32:	c881                	beqz	s1,80005c42 <virtual_instruction_7+0x38a>
    80005c34:	0003f797          	auipc	a5,0x3f
    80005c38:	3dd7c783          	lbu	a5,989(a5) # 80045011 <excpt+0x1>
    80005c3c:	4481                	li	s1,0
    80005c3e:	36079e63          	bnez	a5,80005fba <virtual_instruction_7+0x702>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c42:	4501                	li	a0,0
    80005c44:	e95fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c48:	0330000f          	fence	rw,rw
    80005c4c:	4785                	li	a5,1
    80005c4e:	0003f717          	auipc	a4,0x3f
    80005c52:	3e073d23          	sd	zero,1018(a4) # 80045048 <excpt+0x38>
    80005c56:	00f41023          	sh	a5,0(s0)
    80005c5a:	0330000f          	fence	rw,rw
    asm volatile(
    80005c5e:	37ab77b7          	lui	a5,0x37ab7
    80005c62:	078a                	slli	a5,a5,0x2
    80005c64:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005c68:	4701                	li	a4,0
    80005c6a:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005c6e:	640c                	ld	a1,8(s0)
    80005c70:	0001d517          	auipc	a0,0x1d
    80005c74:	1c050513          	addi	a0,a0,448 # 80022e30 <__func__.2+0x5c8>
    80005c78:	7f91a0ef          	jal	80020c70 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005c7c:	08200593          	li	a1,130
    80005c80:	0001e617          	auipc	a2,0x1e
    80005c84:	ec060613          	addi	a2,a2,-320 # 80023b40 <__func__.2+0x12d8>
    80005c88:	0001d517          	auipc	a0,0x1d
    80005c8c:	ee050513          	addi	a0,a0,-288 # 80022b68 <__func__.2+0x300>
    80005c90:	7e11a0ef          	jal	80020c70 <printf>
    80005c94:	0003f797          	auipc	a5,0x3f
    80005c98:	37d7c783          	lbu	a5,893(a5) # 80045011 <excpt+0x1>
    80005c9c:	0001d597          	auipc	a1,0x1d
    80005ca0:	ea458593          	addi	a1,a1,-348 # 80022b40 <__func__.2+0x2d8>
    80005ca4:	cf89                	beqz	a5,80005cbe <virtual_instruction_7+0x406>
    80005ca6:	6418                	ld	a4,8(s0)
    80005ca8:	47d9                	li	a5,22
    80005caa:	0001d597          	auipc	a1,0x1d
    80005cae:	e8658593          	addi	a1,a1,-378 # 80022b30 <__func__.2+0x2c8>
    80005cb2:	00f70663          	beq	a4,a5,80005cbe <virtual_instruction_7+0x406>
    80005cb6:	0001d597          	auipc	a1,0x1d
    80005cba:	e8a58593          	addi	a1,a1,-374 # 80022b40 <__func__.2+0x2d8>
    80005cbe:	0001d517          	auipc	a0,0x1d
    80005cc2:	ec250513          	addi	a0,a0,-318 # 80022b80 <__func__.2+0x318>
    80005cc6:	7ab1a0ef          	jal	80020c70 <printf>
    80005cca:	0003f797          	auipc	a5,0x3f
    80005cce:	3477c783          	lbu	a5,839(a5) # 80045011 <excpt+0x1>
    80005cd2:	c789                	beqz	a5,80005cdc <virtual_instruction_7+0x424>
    80005cd4:	6418                	ld	a4,8(s0)
    80005cd6:	47d9                	li	a5,22
    80005cd8:	00f70c63          	beq	a4,a5,80005cf0 <virtual_instruction_7+0x438>
    80005cdc:	0001d517          	auipc	a0,0x1d
    80005ce0:	eac50513          	addi	a0,a0,-340 # 80022b88 <__func__.2+0x320>
    80005ce4:	78d1a0ef          	jal	80020c70 <printf>
    80005ce8:	02900513          	li	a0,41
    80005cec:	6141a0ef          	jal	80020300 <putchar>
    80005cf0:	4529                	li	a0,10
    80005cf2:	60e1a0ef          	jal	80020300 <putchar>
    80005cf6:	c881                	beqz	s1,80005d06 <virtual_instruction_7+0x44e>
    80005cf8:	0003f797          	auipc	a5,0x3f
    80005cfc:	3197c783          	lbu	a5,793(a5) # 80045011 <excpt+0x1>
    80005d00:	4481                	li	s1,0
    80005d02:	2a079763          	bnez	a5,80005fb0 <virtual_instruction_7+0x6f8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d06:	4501                	li	a0,0
    80005d08:	dd1fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d0c:	0330000f          	fence	rw,rw
    80005d10:	4785                	li	a5,1
    80005d12:	0003f717          	auipc	a4,0x3f
    80005d16:	32073b23          	sd	zero,822(a4) # 80045048 <excpt+0x38>
    80005d1a:	00f41023          	sh	a5,0(s0)
    80005d1e:	0330000f          	fence	rw,rw
    asm volatile(
    80005d22:	37ab77b7          	lui	a5,0x37ab7
    80005d26:	078a                	slli	a5,a5,0x2
    80005d28:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005d2c:	4701                	li	a4,0
    80005d2e:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005d32:	640c                	ld	a1,8(s0)
    80005d34:	0001d517          	auipc	a0,0x1d
    80005d38:	0fc50513          	addi	a0,a0,252 # 80022e30 <__func__.2+0x5c8>
    80005d3c:	7351a0ef          	jal	80020c70 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005d40:	08200593          	li	a1,130
    80005d44:	0001e617          	auipc	a2,0x1e
    80005d48:	dfc60613          	addi	a2,a2,-516 # 80023b40 <__func__.2+0x12d8>
    80005d4c:	0001d517          	auipc	a0,0x1d
    80005d50:	e1c50513          	addi	a0,a0,-484 # 80022b68 <__func__.2+0x300>
    80005d54:	71d1a0ef          	jal	80020c70 <printf>
    80005d58:	0003f797          	auipc	a5,0x3f
    80005d5c:	2b97c783          	lbu	a5,697(a5) # 80045011 <excpt+0x1>
    80005d60:	0001d597          	auipc	a1,0x1d
    80005d64:	de058593          	addi	a1,a1,-544 # 80022b40 <__func__.2+0x2d8>
    80005d68:	cf89                	beqz	a5,80005d82 <virtual_instruction_7+0x4ca>
    80005d6a:	6418                	ld	a4,8(s0)
    80005d6c:	47d9                	li	a5,22
    80005d6e:	0001d597          	auipc	a1,0x1d
    80005d72:	dc258593          	addi	a1,a1,-574 # 80022b30 <__func__.2+0x2c8>
    80005d76:	00f70663          	beq	a4,a5,80005d82 <virtual_instruction_7+0x4ca>
    80005d7a:	0001d597          	auipc	a1,0x1d
    80005d7e:	dc658593          	addi	a1,a1,-570 # 80022b40 <__func__.2+0x2d8>
    80005d82:	0001d517          	auipc	a0,0x1d
    80005d86:	dfe50513          	addi	a0,a0,-514 # 80022b80 <__func__.2+0x318>
    80005d8a:	6e71a0ef          	jal	80020c70 <printf>
    80005d8e:	0003f797          	auipc	a5,0x3f
    80005d92:	2837c783          	lbu	a5,643(a5) # 80045011 <excpt+0x1>
    80005d96:	c789                	beqz	a5,80005da0 <virtual_instruction_7+0x4e8>
    80005d98:	6418                	ld	a4,8(s0)
    80005d9a:	47d9                	li	a5,22
    80005d9c:	00f70c63          	beq	a4,a5,80005db4 <virtual_instruction_7+0x4fc>
    80005da0:	0001d517          	auipc	a0,0x1d
    80005da4:	de850513          	addi	a0,a0,-536 # 80022b88 <__func__.2+0x320>
    80005da8:	6c91a0ef          	jal	80020c70 <printf>
    80005dac:	02900513          	li	a0,41
    80005db0:	5501a0ef          	jal	80020300 <putchar>
    80005db4:	4529                	li	a0,10
    80005db6:	54a1a0ef          	jal	80020300 <putchar>
    80005dba:	c881                	beqz	s1,80005dca <virtual_instruction_7+0x512>
    80005dbc:	0003f797          	auipc	a5,0x3f
    80005dc0:	2557c783          	lbu	a5,597(a5) # 80045011 <excpt+0x1>
    80005dc4:	4481                	li	s1,0
    80005dc6:	20079463          	bnez	a5,80005fce <virtual_instruction_7+0x716>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dca:	4501                	li	a0,0
    80005dcc:	d0dfa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dd0:	0330000f          	fence	rw,rw
    80005dd4:	4785                	li	a5,1
    80005dd6:	0003f717          	auipc	a4,0x3f
    80005dda:	26073923          	sd	zero,626(a4) # 80045048 <excpt+0x38>
    80005dde:	00f41023          	sh	a5,0(s0)
    80005de2:	0330000f          	fence	rw,rw
    asm volatile(
    80005de6:	37ab77b7          	lui	a5,0x37ab7
    80005dea:	078a                	slli	a5,a5,0x2
    80005dec:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005df0:	4701                	li	a4,0
    80005df2:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005df6:	640c                	ld	a1,8(s0)
    80005df8:	0001d517          	auipc	a0,0x1d
    80005dfc:	03850513          	addi	a0,a0,56 # 80022e30 <__func__.2+0x5c8>
    80005e00:	6711a0ef          	jal	80020c70 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005e04:	08200593          	li	a1,130
    80005e08:	0001e617          	auipc	a2,0x1e
    80005e0c:	d3860613          	addi	a2,a2,-712 # 80023b40 <__func__.2+0x12d8>
    80005e10:	0001d517          	auipc	a0,0x1d
    80005e14:	d5850513          	addi	a0,a0,-680 # 80022b68 <__func__.2+0x300>
    80005e18:	6591a0ef          	jal	80020c70 <printf>
    80005e1c:	0003f797          	auipc	a5,0x3f
    80005e20:	1f57c783          	lbu	a5,501(a5) # 80045011 <excpt+0x1>
    80005e24:	0001d597          	auipc	a1,0x1d
    80005e28:	d1c58593          	addi	a1,a1,-740 # 80022b40 <__func__.2+0x2d8>
    80005e2c:	cf89                	beqz	a5,80005e46 <virtual_instruction_7+0x58e>
    80005e2e:	6418                	ld	a4,8(s0)
    80005e30:	47d9                	li	a5,22
    80005e32:	0001d597          	auipc	a1,0x1d
    80005e36:	cfe58593          	addi	a1,a1,-770 # 80022b30 <__func__.2+0x2c8>
    80005e3a:	00f70663          	beq	a4,a5,80005e46 <virtual_instruction_7+0x58e>
    80005e3e:	0001d597          	auipc	a1,0x1d
    80005e42:	d0258593          	addi	a1,a1,-766 # 80022b40 <__func__.2+0x2d8>
    80005e46:	0001d517          	auipc	a0,0x1d
    80005e4a:	d3a50513          	addi	a0,a0,-710 # 80022b80 <__func__.2+0x318>
    80005e4e:	6231a0ef          	jal	80020c70 <printf>
    80005e52:	0003f797          	auipc	a5,0x3f
    80005e56:	1bf7c783          	lbu	a5,447(a5) # 80045011 <excpt+0x1>
    80005e5a:	c789                	beqz	a5,80005e64 <virtual_instruction_7+0x5ac>
    80005e5c:	6418                	ld	a4,8(s0)
    80005e5e:	47d9                	li	a5,22
    80005e60:	00f70c63          	beq	a4,a5,80005e78 <virtual_instruction_7+0x5c0>
    80005e64:	0001d517          	auipc	a0,0x1d
    80005e68:	d2450513          	addi	a0,a0,-732 # 80022b88 <__func__.2+0x320>
    80005e6c:	6051a0ef          	jal	80020c70 <printf>
    80005e70:	02900513          	li	a0,41
    80005e74:	48c1a0ef          	jal	80020300 <putchar>
    80005e78:	4529                	li	a0,10
    80005e7a:	4861a0ef          	jal	80020300 <putchar>
    80005e7e:	c881                	beqz	s1,80005e8e <virtual_instruction_7+0x5d6>
    80005e80:	0003f797          	auipc	a5,0x3f
    80005e84:	1917c783          	lbu	a5,401(a5) # 80045011 <excpt+0x1>
    80005e88:	4481                	li	s1,0
    80005e8a:	12079d63          	bnez	a5,80005fc4 <virtual_instruction_7+0x70c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e8e:	4501                	li	a0,0
    80005e90:	c49fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e94:	0330000f          	fence	rw,rw
    80005e98:	4785                	li	a5,1
    80005e9a:	0003f717          	auipc	a4,0x3f
    80005e9e:	1a073723          	sd	zero,430(a4) # 80045048 <excpt+0x38>
    80005ea2:	00f41023          	sh	a5,0(s0)
    80005ea6:	0330000f          	fence	rw,rw
    asm volatile(
    80005eaa:	37ab77b7          	lui	a5,0x37ab7
    80005eae:	078a                	slli	a5,a5,0x2
    80005eb0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005eb4:	4701                	li	a4,0
    80005eb6:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005eba:	640c                	ld	a1,8(s0)
    80005ebc:	0001d517          	auipc	a0,0x1d
    80005ec0:	f7450513          	addi	a0,a0,-140 # 80022e30 <__func__.2+0x5c8>
    80005ec4:	5ad1a0ef          	jal	80020c70 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ec8:	08200593          	li	a1,130
    80005ecc:	0001e617          	auipc	a2,0x1e
    80005ed0:	c7460613          	addi	a2,a2,-908 # 80023b40 <__func__.2+0x12d8>
    80005ed4:	0001d517          	auipc	a0,0x1d
    80005ed8:	c9450513          	addi	a0,a0,-876 # 80022b68 <__func__.2+0x300>
    80005edc:	5951a0ef          	jal	80020c70 <printf>
    80005ee0:	0003f797          	auipc	a5,0x3f
    80005ee4:	1317c783          	lbu	a5,305(a5) # 80045011 <excpt+0x1>
    80005ee8:	0001d597          	auipc	a1,0x1d
    80005eec:	c5858593          	addi	a1,a1,-936 # 80022b40 <__func__.2+0x2d8>
    80005ef0:	cf89                	beqz	a5,80005f0a <virtual_instruction_7+0x652>
    80005ef2:	6418                	ld	a4,8(s0)
    80005ef4:	47d9                	li	a5,22
    80005ef6:	0001d597          	auipc	a1,0x1d
    80005efa:	c3a58593          	addi	a1,a1,-966 # 80022b30 <__func__.2+0x2c8>
    80005efe:	00f70663          	beq	a4,a5,80005f0a <virtual_instruction_7+0x652>
    80005f02:	0001d597          	auipc	a1,0x1d
    80005f06:	c3e58593          	addi	a1,a1,-962 # 80022b40 <__func__.2+0x2d8>
    80005f0a:	0001d517          	auipc	a0,0x1d
    80005f0e:	c7650513          	addi	a0,a0,-906 # 80022b80 <__func__.2+0x318>
    80005f12:	55f1a0ef          	jal	80020c70 <printf>
    80005f16:	0003f797          	auipc	a5,0x3f
    80005f1a:	0fb7c783          	lbu	a5,251(a5) # 80045011 <excpt+0x1>
    80005f1e:	c789                	beqz	a5,80005f28 <virtual_instruction_7+0x670>
    80005f20:	6418                	ld	a4,8(s0)
    80005f22:	47d9                	li	a5,22
    80005f24:	00f70c63          	beq	a4,a5,80005f3c <virtual_instruction_7+0x684>
    80005f28:	0001d517          	auipc	a0,0x1d
    80005f2c:	c6050513          	addi	a0,a0,-928 # 80022b88 <__func__.2+0x320>
    80005f30:	5411a0ef          	jal	80020c70 <printf>
    80005f34:	02900513          	li	a0,41
    80005f38:	3c81a0ef          	jal	80020300 <putchar>
    80005f3c:	4529                	li	a0,10
    80005f3e:	3c21a0ef          	jal	80020300 <putchar>
    80005f42:	c095                	beqz	s1,80005f66 <virtual_instruction_7+0x6ae>
    80005f44:	0003f497          	auipc	s1,0x3f
    80005f48:	0cd4c483          	lbu	s1,205(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80005f4c:	0001d597          	auipc	a1,0x1d
    80005f50:	bf458593          	addi	a1,a1,-1036 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f54:	cc91                	beqz	s1,80005f70 <virtual_instruction_7+0x6b8>
    80005f56:	6418                	ld	a4,8(s0)
    80005f58:	47d9                	li	a5,22
    TEST_END();
    80005f5a:	0001d597          	auipc	a1,0x1d
    80005f5e:	bd658593          	addi	a1,a1,-1066 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f62:	00f70763          	beq	a4,a5,80005f70 <virtual_instruction_7+0x6b8>
    80005f66:	4481                	li	s1,0
    TEST_END();
    80005f68:	0001d597          	auipc	a1,0x1d
    80005f6c:	bd858593          	addi	a1,a1,-1064 # 80022b40 <__func__.2+0x2d8>
    80005f70:	0001d517          	auipc	a0,0x1d
    80005f74:	c7850513          	addi	a0,a0,-904 # 80022be8 <__func__.2+0x380>
    80005f78:	4f91a0ef          	jal	80020c70 <printf>
    80005f7c:	4511                	li	a0,4
    80005f7e:	b5bfa0ef          	jal	80000ad8 <goto_priv>
    80005f82:	c26fb0ef          	jal	800013a8 <reset_state>
}
    80005f86:	60e2                	ld	ra,24(sp)
    80005f88:	6442                	ld	s0,16(sp)
    80005f8a:	8526                	mv	a0,s1
    80005f8c:	64a2                	ld	s1,8(sp)
    80005f8e:	6105                	addi	sp,sp,32
    80005f90:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005f92:	6404                	ld	s1,8(s0)
    80005f94:	14a9                	addi	s1,s1,-22
    80005f96:	0014b493          	seqz	s1,s1
    80005f9a:	b455                	j	80005a3e <virtual_instruction_7+0x186>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005f9c:	6404                	ld	s1,8(s0)
    80005f9e:	14a9                	addi	s1,s1,-22
    80005fa0:	0014b493          	seqz	s1,s1
    80005fa4:	becd                	j	80005b96 <virtual_instruction_7+0x2de>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005fa6:	6404                	ld	s1,8(s0)
    80005fa8:	14a9                	addi	s1,s1,-22
    80005faa:	0014b493          	seqz	s1,s1
    80005fae:	be35                	j	80005aea <virtual_instruction_7+0x232>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fb0:	6404                	ld	s1,8(s0)
    80005fb2:	14a9                	addi	s1,s1,-22
    80005fb4:	0014b493          	seqz	s1,s1
    80005fb8:	b3b9                	j	80005d06 <virtual_instruction_7+0x44e>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005fba:	6404                	ld	s1,8(s0)
    80005fbc:	14a9                	addi	s1,s1,-22
    80005fbe:	0014b493          	seqz	s1,s1
    80005fc2:	b141                	j	80005c42 <virtual_instruction_7+0x38a>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fc4:	6404                	ld	s1,8(s0)
    80005fc6:	14a9                	addi	s1,s1,-22
    80005fc8:	0014b493          	seqz	s1,s1
    80005fcc:	b5c9                	j	80005e8e <virtual_instruction_7+0x5d6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fce:	6404                	ld	s1,8(s0)
    80005fd0:	14a9                	addi	s1,s1,-22
    80005fd2:	0014b493          	seqz	s1,s1
    80005fd6:	bbd5                	j	80005dca <virtual_instruction_7+0x512>

0000000080005fd8 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80005fd8:	1101                	addi	sp,sp,-32

    TEST_START();
    80005fda:	0001b597          	auipc	a1,0x1b
    80005fde:	49e58593          	addi	a1,a1,1182 # 80021478 <__func__.4>
    80005fe2:	0001d517          	auipc	a0,0x1d
    80005fe6:	b6e50513          	addi	a0,a0,-1170 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_8() {
    80005fea:	ec06                	sd	ra,24(sp)
    80005fec:	e822                	sd	s0,16(sp)
    80005fee:	e426                	sd	s1,8(sp)
    TEST_START();
    80005ff0:	4811a0ef          	jal	80020c70 <printf>
    80005ff4:	4529                	li	a0,10
    80005ff6:	30a1a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80005ffa:	4511                	li	a0,4
    80005ffc:	addfa0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80006000:	004007b7          	lui	a5,0x400
    80006004:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006008:	002007b7          	lui	a5,0x200
    8000600c:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80006010:	4501                	li	a0,0
    80006012:	ac7fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006016:	0330000f          	fence	rw,rw
    8000601a:	0003f417          	auipc	s0,0x3f
    8000601e:	ff640413          	addi	s0,s0,-10 # 80045010 <excpt>
    80006022:	4785                	li	a5,1
    80006024:	0003f717          	auipc	a4,0x3f
    80006028:	02073223          	sd	zero,36(a4) # 80045048 <excpt+0x38>
    8000602c:	00f41023          	sh	a5,0(s0)
    80006030:	0330000f          	fence	rw,rw
    asm volatile(
    80006034:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006038:	08200593          	li	a1,130
    8000603c:	0001e617          	auipc	a2,0x1e
    80006040:	b3460613          	addi	a2,a2,-1228 # 80023b70 <__func__.2+0x1308>
    80006044:	0001d517          	auipc	a0,0x1d
    80006048:	b2450513          	addi	a0,a0,-1244 # 80022b68 <__func__.2+0x300>
    8000604c:	4251a0ef          	jal	80020c70 <printf>
    80006050:	0003f797          	auipc	a5,0x3f
    80006054:	fc17c783          	lbu	a5,-63(a5) # 80045011 <excpt+0x1>
    80006058:	0001d597          	auipc	a1,0x1d
    8000605c:	ae858593          	addi	a1,a1,-1304 # 80022b40 <__func__.2+0x2d8>
    80006060:	cf89                	beqz	a5,8000607a <virtual_instruction_8+0xa2>
    80006062:	6418                	ld	a4,8(s0)
    80006064:	47d9                	li	a5,22
    80006066:	0001d597          	auipc	a1,0x1d
    8000606a:	aca58593          	addi	a1,a1,-1334 # 80022b30 <__func__.2+0x2c8>
    8000606e:	00f70663          	beq	a4,a5,8000607a <virtual_instruction_8+0xa2>
    80006072:	0001d597          	auipc	a1,0x1d
    80006076:	ace58593          	addi	a1,a1,-1330 # 80022b40 <__func__.2+0x2d8>
    8000607a:	0001d517          	auipc	a0,0x1d
    8000607e:	b0650513          	addi	a0,a0,-1274 # 80022b80 <__func__.2+0x318>
    80006082:	3ef1a0ef          	jal	80020c70 <printf>
    80006086:	0003f797          	auipc	a5,0x3f
    8000608a:	f8b7c783          	lbu	a5,-117(a5) # 80045011 <excpt+0x1>
    8000608e:	c789                	beqz	a5,80006098 <virtual_instruction_8+0xc0>
    80006090:	6418                	ld	a4,8(s0)
    80006092:	47d9                	li	a5,22
    80006094:	00f70c63          	beq	a4,a5,800060ac <virtual_instruction_8+0xd4>
    80006098:	0001d517          	auipc	a0,0x1d
    8000609c:	af050513          	addi	a0,a0,-1296 # 80022b88 <__func__.2+0x320>
    800060a0:	3d11a0ef          	jal	80020c70 <printf>
    800060a4:	02900513          	li	a0,41
    800060a8:	2581a0ef          	jal	80020300 <putchar>
    800060ac:	4529                	li	a0,10
    800060ae:	2521a0ef          	jal	80020300 <putchar>
    800060b2:	0003f497          	auipc	s1,0x3f
    800060b6:	f5f4c483          	lbu	s1,-161(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    800060ba:	0001d597          	auipc	a1,0x1d
    800060be:	a8658593          	addi	a1,a1,-1402 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800060c2:	cc91                	beqz	s1,800060de <virtual_instruction_8+0x106>
    800060c4:	6418                	ld	a4,8(s0)
    800060c6:	47d9                	li	a5,22
    TEST_END();
    800060c8:	0001d597          	auipc	a1,0x1d
    800060cc:	a6858593          	addi	a1,a1,-1432 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800060d0:	00f70763          	beq	a4,a5,800060de <virtual_instruction_8+0x106>
    800060d4:	4481                	li	s1,0
    TEST_END();
    800060d6:	0001d597          	auipc	a1,0x1d
    800060da:	a6a58593          	addi	a1,a1,-1430 # 80022b40 <__func__.2+0x2d8>
    800060de:	0001d517          	auipc	a0,0x1d
    800060e2:	b0a50513          	addi	a0,a0,-1270 # 80022be8 <__func__.2+0x380>
    800060e6:	38b1a0ef          	jal	80020c70 <printf>
    800060ea:	4511                	li	a0,4
    800060ec:	9edfa0ef          	jal	80000ad8 <goto_priv>
    800060f0:	ab8fb0ef          	jal	800013a8 <reset_state>
}
    800060f4:	60e2                	ld	ra,24(sp)
    800060f6:	6442                	ld	s0,16(sp)
    800060f8:	8526                	mv	a0,s1
    800060fa:	64a2                	ld	s1,8(sp)
    800060fc:	6105                	addi	sp,sp,32
    800060fe:	8082                	ret

0000000080006100 <virtual_instruction_9>:
bool virtual_instruction_9() {
    80006100:	1101                	addi	sp,sp,-32

    TEST_START();
    80006102:	0001b597          	auipc	a1,0x1b
    80006106:	38e58593          	addi	a1,a1,910 # 80021490 <__func__.3>
    8000610a:	0001d517          	auipc	a0,0x1d
    8000610e:	a4650513          	addi	a0,a0,-1466 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_9() {
    80006112:	ec06                	sd	ra,24(sp)
    80006114:	e822                	sd	s0,16(sp)
    80006116:	e426                	sd	s1,8(sp)
    TEST_START();
    80006118:	3591a0ef          	jal	80020c70 <printf>
    8000611c:	4529                	li	a0,10
    8000611e:	1e21a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80006122:	4511                	li	a0,4
    80006124:	9b5fa0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006128:	002007b7          	lui	a5,0x200
    8000612c:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006130:	4501                	li	a0,0
    80006132:	9a7fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006136:	0330000f          	fence	rw,rw
    8000613a:	0003f417          	auipc	s0,0x3f
    8000613e:	ed640413          	addi	s0,s0,-298 # 80045010 <excpt>
    80006142:	4785                	li	a5,1
    80006144:	0003f717          	auipc	a4,0x3f
    80006148:	f0073223          	sd	zero,-252(a4) # 80045048 <excpt+0x38>
    8000614c:	00f41023          	sh	a5,0(s0)
    80006150:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80006154:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006158:	08200593          	li	a1,130
    8000615c:	0001e617          	auipc	a2,0x1e
    80006160:	a5c60613          	addi	a2,a2,-1444 # 80023bb8 <__func__.2+0x1350>
    80006164:	0001d517          	auipc	a0,0x1d
    80006168:	a0450513          	addi	a0,a0,-1532 # 80022b68 <__func__.2+0x300>
    8000616c:	3051a0ef          	jal	80020c70 <printf>
    80006170:	0003f797          	auipc	a5,0x3f
    80006174:	ea17c783          	lbu	a5,-351(a5) # 80045011 <excpt+0x1>
    80006178:	0001d597          	auipc	a1,0x1d
    8000617c:	9c858593          	addi	a1,a1,-1592 # 80022b40 <__func__.2+0x2d8>
    80006180:	cf89                	beqz	a5,8000619a <virtual_instruction_9+0x9a>
    80006182:	6418                	ld	a4,8(s0)
    80006184:	47d9                	li	a5,22
    80006186:	0001d597          	auipc	a1,0x1d
    8000618a:	9aa58593          	addi	a1,a1,-1622 # 80022b30 <__func__.2+0x2c8>
    8000618e:	00f70663          	beq	a4,a5,8000619a <virtual_instruction_9+0x9a>
    80006192:	0001d597          	auipc	a1,0x1d
    80006196:	9ae58593          	addi	a1,a1,-1618 # 80022b40 <__func__.2+0x2d8>
    8000619a:	0001d517          	auipc	a0,0x1d
    8000619e:	9e650513          	addi	a0,a0,-1562 # 80022b80 <__func__.2+0x318>
    800061a2:	2cf1a0ef          	jal	80020c70 <printf>
    800061a6:	0003f797          	auipc	a5,0x3f
    800061aa:	e6b7c783          	lbu	a5,-405(a5) # 80045011 <excpt+0x1>
    800061ae:	c789                	beqz	a5,800061b8 <virtual_instruction_9+0xb8>
    800061b0:	6418                	ld	a4,8(s0)
    800061b2:	47d9                	li	a5,22
    800061b4:	00f70c63          	beq	a4,a5,800061cc <virtual_instruction_9+0xcc>
    800061b8:	0001d517          	auipc	a0,0x1d
    800061bc:	9d050513          	addi	a0,a0,-1584 # 80022b88 <__func__.2+0x320>
    800061c0:	2b11a0ef          	jal	80020c70 <printf>
    800061c4:	02900513          	li	a0,41
    800061c8:	1381a0ef          	jal	80020300 <putchar>
    800061cc:	4529                	li	a0,10
    800061ce:	1321a0ef          	jal	80020300 <putchar>
    800061d2:	0003f497          	auipc	s1,0x3f
    800061d6:	e3f4c483          	lbu	s1,-449(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800061da:	0001d597          	auipc	a1,0x1d
    800061de:	96658593          	addi	a1,a1,-1690 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800061e2:	cc91                	beqz	s1,800061fe <virtual_instruction_9+0xfe>
    800061e4:	6418                	ld	a4,8(s0)
    800061e6:	47d9                	li	a5,22
    TEST_END();
    800061e8:	0001d597          	auipc	a1,0x1d
    800061ec:	94858593          	addi	a1,a1,-1720 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800061f0:	00f70763          	beq	a4,a5,800061fe <virtual_instruction_9+0xfe>
    800061f4:	4481                	li	s1,0
    TEST_END();
    800061f6:	0001d597          	auipc	a1,0x1d
    800061fa:	94a58593          	addi	a1,a1,-1718 # 80022b40 <__func__.2+0x2d8>
    800061fe:	0001d517          	auipc	a0,0x1d
    80006202:	9ea50513          	addi	a0,a0,-1558 # 80022be8 <__func__.2+0x380>
    80006206:	26b1a0ef          	jal	80020c70 <printf>
    8000620a:	4511                	li	a0,4
    8000620c:	8cdfa0ef          	jal	80000ad8 <goto_priv>
    80006210:	998fb0ef          	jal	800013a8 <reset_state>
}
    80006214:	60e2                	ld	ra,24(sp)
    80006216:	6442                	ld	s0,16(sp)
    80006218:	8526                	mv	a0,s1
    8000621a:	64a2                	ld	s1,8(sp)
    8000621c:	6105                	addi	sp,sp,32
    8000621e:	8082                	ret

0000000080006220 <virtual_instruction_10>:
bool virtual_instruction_10() {
    80006220:	1101                	addi	sp,sp,-32

    TEST_START();
    80006222:	0001b597          	auipc	a1,0x1b
    80006226:	28658593          	addi	a1,a1,646 # 800214a8 <__func__.2>
    8000622a:	0001d517          	auipc	a0,0x1d
    8000622e:	92650513          	addi	a0,a0,-1754 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_10() {
    80006232:	ec06                	sd	ra,24(sp)
    80006234:	e822                	sd	s0,16(sp)
    80006236:	e426                	sd	s1,8(sp)
    TEST_START();
    80006238:	2391a0ef          	jal	80020c70 <printf>
    8000623c:	4529                	li	a0,10
    8000623e:	0c21a0ef          	jal	80020300 <putchar>


    goto_priv(PRIV_M);
    80006242:	4511                	li	a0,4
    80006244:	895fa0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80006248:	002007b7          	lui	a5,0x200
    8000624c:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006250:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006254:	4501                	li	a0,0
    80006256:	883fa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000625a:	0330000f          	fence	rw,rw
    8000625e:	0003f417          	auipc	s0,0x3f
    80006262:	db240413          	addi	s0,s0,-590 # 80045010 <excpt>
    80006266:	4785                	li	a5,1
    80006268:	0003f717          	auipc	a4,0x3f
    8000626c:	de073023          	sd	zero,-544(a4) # 80045048 <excpt+0x38>
    80006270:	00f41023          	sh	a5,0(s0)
    80006274:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    80006278:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000627c:	08200593          	li	a1,130
    80006280:	0001e617          	auipc	a2,0x1e
    80006284:	98060613          	addi	a2,a2,-1664 # 80023c00 <__func__.2+0x1398>
    80006288:	0001d517          	auipc	a0,0x1d
    8000628c:	8e050513          	addi	a0,a0,-1824 # 80022b68 <__func__.2+0x300>
    80006290:	1e11a0ef          	jal	80020c70 <printf>
    80006294:	0003f797          	auipc	a5,0x3f
    80006298:	d7d7c783          	lbu	a5,-643(a5) # 80045011 <excpt+0x1>
    8000629c:	0001d597          	auipc	a1,0x1d
    800062a0:	8a458593          	addi	a1,a1,-1884 # 80022b40 <__func__.2+0x2d8>
    800062a4:	cf89                	beqz	a5,800062be <virtual_instruction_10+0x9e>
    800062a6:	6418                	ld	a4,8(s0)
    800062a8:	47d9                	li	a5,22
    800062aa:	0001d597          	auipc	a1,0x1d
    800062ae:	88658593          	addi	a1,a1,-1914 # 80022b30 <__func__.2+0x2c8>
    800062b2:	00f70663          	beq	a4,a5,800062be <virtual_instruction_10+0x9e>
    800062b6:	0001d597          	auipc	a1,0x1d
    800062ba:	88a58593          	addi	a1,a1,-1910 # 80022b40 <__func__.2+0x2d8>
    800062be:	0001d517          	auipc	a0,0x1d
    800062c2:	8c250513          	addi	a0,a0,-1854 # 80022b80 <__func__.2+0x318>
    800062c6:	1ab1a0ef          	jal	80020c70 <printf>
    800062ca:	0003f797          	auipc	a5,0x3f
    800062ce:	d477c783          	lbu	a5,-697(a5) # 80045011 <excpt+0x1>
    800062d2:	c789                	beqz	a5,800062dc <virtual_instruction_10+0xbc>
    800062d4:	6418                	ld	a4,8(s0)
    800062d6:	47d9                	li	a5,22
    800062d8:	00f70c63          	beq	a4,a5,800062f0 <virtual_instruction_10+0xd0>
    800062dc:	0001d517          	auipc	a0,0x1d
    800062e0:	8ac50513          	addi	a0,a0,-1876 # 80022b88 <__func__.2+0x320>
    800062e4:	18d1a0ef          	jal	80020c70 <printf>
    800062e8:	02900513          	li	a0,41
    800062ec:	0141a0ef          	jal	80020300 <putchar>
    800062f0:	4529                	li	a0,10
    800062f2:	00e1a0ef          	jal	80020300 <putchar>
    800062f6:	0003f497          	auipc	s1,0x3f
    800062fa:	d1b4c483          	lbu	s1,-741(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800062fe:	0001d597          	auipc	a1,0x1d
    80006302:	84258593          	addi	a1,a1,-1982 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006306:	cc91                	beqz	s1,80006322 <virtual_instruction_10+0x102>
    80006308:	6418                	ld	a4,8(s0)
    8000630a:	47d9                	li	a5,22
    TEST_END();
    8000630c:	0001d597          	auipc	a1,0x1d
    80006310:	82458593          	addi	a1,a1,-2012 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006314:	00f70763          	beq	a4,a5,80006322 <virtual_instruction_10+0x102>
    80006318:	4481                	li	s1,0
    TEST_END();
    8000631a:	0001d597          	auipc	a1,0x1d
    8000631e:	82658593          	addi	a1,a1,-2010 # 80022b40 <__func__.2+0x2d8>
    80006322:	0001d517          	auipc	a0,0x1d
    80006326:	8c650513          	addi	a0,a0,-1850 # 80022be8 <__func__.2+0x380>
    8000632a:	1471a0ef          	jal	80020c70 <printf>
    8000632e:	4511                	li	a0,4
    80006330:	fa8fa0ef          	jal	80000ad8 <goto_priv>
    80006334:	874fb0ef          	jal	800013a8 <reset_state>
}
    80006338:	60e2                	ld	ra,24(sp)
    8000633a:	6442                	ld	s0,16(sp)
    8000633c:	8526                	mv	a0,s1
    8000633e:	64a2                	ld	s1,8(sp)
    80006340:	6105                	addi	sp,sp,32
    80006342:	8082                	ret

0000000080006344 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80006344:	1101                	addi	sp,sp,-32

    TEST_START();    
    80006346:	0001b597          	auipc	a1,0x1b
    8000634a:	17a58593          	addi	a1,a1,378 # 800214c0 <__func__.1>
    8000634e:	0001d517          	auipc	a0,0x1d
    80006352:	80250513          	addi	a0,a0,-2046 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_11() {
    80006356:	ec06                	sd	ra,24(sp)
    80006358:	e822                	sd	s0,16(sp)
    8000635a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8000635c:	1151a0ef          	jal	80020c70 <printf>
    80006360:	4529                	li	a0,10
    80006362:	79f190ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    80006366:	4511                	li	a0,4
    80006368:	f70fa0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    8000636c:	001007b7          	lui	a5,0x100
    80006370:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006374:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    80006378:	4501                	li	a0,0
    8000637a:	f5efa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000637e:	0330000f          	fence	rw,rw
    80006382:	0003f417          	auipc	s0,0x3f
    80006386:	c8e40413          	addi	s0,s0,-882 # 80045010 <excpt>
    8000638a:	4785                	li	a5,1
    8000638c:	0003f717          	auipc	a4,0x3f
    80006390:	ca073e23          	sd	zero,-836(a4) # 80045048 <excpt+0x38>
    80006394:	00f41023          	sh	a5,0(s0)
    80006398:	0330000f          	fence	rw,rw
    CSRS(CSR_VSIE,1ULL << 1);
    8000639c:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800063a0:	08200593          	li	a1,130
    800063a4:	0001e617          	auipc	a2,0x1e
    800063a8:	8a460613          	addi	a2,a2,-1884 # 80023c48 <__func__.2+0x13e0>
    800063ac:	0001c517          	auipc	a0,0x1c
    800063b0:	7bc50513          	addi	a0,a0,1980 # 80022b68 <__func__.2+0x300>
    800063b4:	0bd1a0ef          	jal	80020c70 <printf>
    800063b8:	0003f797          	auipc	a5,0x3f
    800063bc:	c597c783          	lbu	a5,-935(a5) # 80045011 <excpt+0x1>
    800063c0:	0001c597          	auipc	a1,0x1c
    800063c4:	78058593          	addi	a1,a1,1920 # 80022b40 <__func__.2+0x2d8>
    800063c8:	cf89                	beqz	a5,800063e2 <virtual_instruction_11+0x9e>
    800063ca:	6418                	ld	a4,8(s0)
    800063cc:	47d9                	li	a5,22
    800063ce:	0001c597          	auipc	a1,0x1c
    800063d2:	76258593          	addi	a1,a1,1890 # 80022b30 <__func__.2+0x2c8>
    800063d6:	00f70663          	beq	a4,a5,800063e2 <virtual_instruction_11+0x9e>
    800063da:	0001c597          	auipc	a1,0x1c
    800063de:	76658593          	addi	a1,a1,1894 # 80022b40 <__func__.2+0x2d8>
    800063e2:	0001c517          	auipc	a0,0x1c
    800063e6:	79e50513          	addi	a0,a0,1950 # 80022b80 <__func__.2+0x318>
    800063ea:	0871a0ef          	jal	80020c70 <printf>
    800063ee:	0003f797          	auipc	a5,0x3f
    800063f2:	c237c783          	lbu	a5,-989(a5) # 80045011 <excpt+0x1>
    800063f6:	c789                	beqz	a5,80006400 <virtual_instruction_11+0xbc>
    800063f8:	6418                	ld	a4,8(s0)
    800063fa:	47d9                	li	a5,22
    800063fc:	00f70c63          	beq	a4,a5,80006414 <virtual_instruction_11+0xd0>
    80006400:	0001c517          	auipc	a0,0x1c
    80006404:	78850513          	addi	a0,a0,1928 # 80022b88 <__func__.2+0x320>
    80006408:	0691a0ef          	jal	80020c70 <printf>
    8000640c:	02900513          	li	a0,41
    80006410:	6f1190ef          	jal	80020300 <putchar>
    80006414:	4529                	li	a0,10
    80006416:	6eb190ef          	jal	80020300 <putchar>
    8000641a:	0003f497          	auipc	s1,0x3f
    8000641e:	bf74c483          	lbu	s1,-1033(s1) # 80045011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    80006422:	0001c597          	auipc	a1,0x1c
    80006426:	71e58593          	addi	a1,a1,1822 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000642a:	cc91                	beqz	s1,80006446 <virtual_instruction_11+0x102>
    8000642c:	6418                	ld	a4,8(s0)
    8000642e:	47d9                	li	a5,22
    TEST_END(); 
    80006430:	0001c597          	auipc	a1,0x1c
    80006434:	70058593          	addi	a1,a1,1792 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006438:	00f70763          	beq	a4,a5,80006446 <virtual_instruction_11+0x102>
    8000643c:	4481                	li	s1,0
    TEST_END(); 
    8000643e:	0001c597          	auipc	a1,0x1c
    80006442:	70258593          	addi	a1,a1,1794 # 80022b40 <__func__.2+0x2d8>
    80006446:	0001c517          	auipc	a0,0x1c
    8000644a:	7a250513          	addi	a0,a0,1954 # 80022be8 <__func__.2+0x380>
    8000644e:	0231a0ef          	jal	80020c70 <printf>
    80006452:	4511                	li	a0,4
    80006454:	e84fa0ef          	jal	80000ad8 <goto_priv>
    80006458:	f51fa0ef          	jal	800013a8 <reset_state>
}
    8000645c:	60e2                	ld	ra,24(sp)
    8000645e:	6442                	ld	s0,16(sp)
    80006460:	8526                	mv	a0,s1
    80006462:	64a2                	ld	s1,8(sp)
    80006464:	6105                	addi	sp,sp,32
    80006466:	8082                	ret

0000000080006468 <virtual_instruction_12>:

bool virtual_instruction_12() {
    80006468:	1101                	addi	sp,sp,-32

    TEST_START();
    8000646a:	0001b597          	auipc	a1,0x1b
    8000646e:	06e58593          	addi	a1,a1,110 # 800214d8 <__func__.0>
    80006472:	0001c517          	auipc	a0,0x1c
    80006476:	6de50513          	addi	a0,a0,1758 # 80022b50 <__func__.2+0x2e8>
bool virtual_instruction_12() {
    8000647a:	ec06                	sd	ra,24(sp)
    8000647c:	e822                	sd	s0,16(sp)
    8000647e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006480:	7f01a0ef          	jal	80020c70 <printf>
    80006484:	4529                	li	a0,10
    80006486:	67b190ef          	jal	80020300 <putchar>


    goto_priv(PRIV_VU);
    8000648a:	4501                	li	a0,0
    8000648c:	e4cfa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006490:	0330000f          	fence	rw,rw
    80006494:	0003f417          	auipc	s0,0x3f
    80006498:	b7c40413          	addi	s0,s0,-1156 # 80045010 <excpt>
    8000649c:	4785                	li	a5,1
    8000649e:	0003f717          	auipc	a4,0x3f
    800064a2:	ba073523          	sd	zero,-1110(a4) # 80045048 <excpt+0x38>
    800064a6:	00f41023          	sh	a5,0(s0)
    800064aa:	0330000f          	fence	rw,rw

    CSRR(CSR_SATP);
    800064ae:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800064b2:	08200593          	li	a1,130
    800064b6:	0001d617          	auipc	a2,0x1d
    800064ba:	7f260613          	addi	a2,a2,2034 # 80023ca8 <__func__.2+0x1440>
    800064be:	0001c517          	auipc	a0,0x1c
    800064c2:	6aa50513          	addi	a0,a0,1706 # 80022b68 <__func__.2+0x300>
    800064c6:	7aa1a0ef          	jal	80020c70 <printf>
    800064ca:	0003f797          	auipc	a5,0x3f
    800064ce:	b477c783          	lbu	a5,-1209(a5) # 80045011 <excpt+0x1>
    800064d2:	0001c597          	auipc	a1,0x1c
    800064d6:	66e58593          	addi	a1,a1,1646 # 80022b40 <__func__.2+0x2d8>
    800064da:	cf89                	beqz	a5,800064f4 <virtual_instruction_12+0x8c>
    800064dc:	6418                	ld	a4,8(s0)
    800064de:	47d9                	li	a5,22
    800064e0:	0001c597          	auipc	a1,0x1c
    800064e4:	65058593          	addi	a1,a1,1616 # 80022b30 <__func__.2+0x2c8>
    800064e8:	00f70663          	beq	a4,a5,800064f4 <virtual_instruction_12+0x8c>
    800064ec:	0001c597          	auipc	a1,0x1c
    800064f0:	65458593          	addi	a1,a1,1620 # 80022b40 <__func__.2+0x2d8>
    800064f4:	0001c517          	auipc	a0,0x1c
    800064f8:	68c50513          	addi	a0,a0,1676 # 80022b80 <__func__.2+0x318>
    800064fc:	7741a0ef          	jal	80020c70 <printf>
    80006500:	0003f797          	auipc	a5,0x3f
    80006504:	b117c783          	lbu	a5,-1263(a5) # 80045011 <excpt+0x1>
    80006508:	c789                	beqz	a5,80006512 <virtual_instruction_12+0xaa>
    8000650a:	6418                	ld	a4,8(s0)
    8000650c:	47d9                	li	a5,22
    8000650e:	00f70c63          	beq	a4,a5,80006526 <virtual_instruction_12+0xbe>
    80006512:	0001c517          	auipc	a0,0x1c
    80006516:	67650513          	addi	a0,a0,1654 # 80022b88 <__func__.2+0x320>
    8000651a:	7561a0ef          	jal	80020c70 <printf>
    8000651e:	02900513          	li	a0,41
    80006522:	5df190ef          	jal	80020300 <putchar>
    80006526:	4529                	li	a0,10
    80006528:	5d9190ef          	jal	80020300 <putchar>
    8000652c:	0003f497          	auipc	s1,0x3f
    80006530:	ae54c483          	lbu	s1,-1307(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80006534:	0001c597          	auipc	a1,0x1c
    80006538:	60c58593          	addi	a1,a1,1548 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000653c:	cc91                	beqz	s1,80006558 <virtual_instruction_12+0xf0>
    8000653e:	6418                	ld	a4,8(s0)
    80006540:	47d9                	li	a5,22
    TEST_END();
    80006542:	0001c597          	auipc	a1,0x1c
    80006546:	5ee58593          	addi	a1,a1,1518 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000654a:	00f70763          	beq	a4,a5,80006558 <virtual_instruction_12+0xf0>
    8000654e:	4481                	li	s1,0
    TEST_END();
    80006550:	0001c597          	auipc	a1,0x1c
    80006554:	5f058593          	addi	a1,a1,1520 # 80022b40 <__func__.2+0x2d8>
    80006558:	0001c517          	auipc	a0,0x1c
    8000655c:	69050513          	addi	a0,a0,1680 # 80022be8 <__func__.2+0x380>
    80006560:	7101a0ef          	jal	80020c70 <printf>
    80006564:	4511                	li	a0,4
    80006566:	d72fa0ef          	jal	80000ad8 <goto_priv>
    8000656a:	e3ffa0ef          	jal	800013a8 <reset_state>
}
    8000656e:	60e2                	ld	ra,24(sp)
    80006570:	6442                	ld	s0,16(sp)
    80006572:	8526                	mv	a0,s1
    80006574:	64a2                	ld	s1,8(sp)
    80006576:	6105                	addi	sp,sp,32
    80006578:	8082                	ret

000000008000657a <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    8000657a:	7179                	addi	sp,sp,-48

    TEST_START();
    8000657c:	0001b597          	auipc	a1,0x1b
    80006580:	f7458593          	addi	a1,a1,-140 # 800214f0 <__func__.2>
    80006584:	0001c517          	auipc	a0,0x1c
    80006588:	5cc50513          	addi	a0,a0,1484 # 80022b50 <__func__.2+0x2e8>
bool hfence_test() {
    8000658c:	f406                	sd	ra,40(sp)
    8000658e:	ec26                	sd	s1,24(sp)
    80006590:	f022                	sd	s0,32(sp)
    80006592:	e84a                	sd	s2,16(sp)
    80006594:	e44e                	sd	s3,8(sp)
    TEST_START();
    80006596:	6da1a0ef          	jal	80020c70 <printf>
    8000659a:	4529                	li	a0,10
    8000659c:	565190ef          	jal	80020300 <putchar>
    800065a0:	00024617          	auipc	a2,0x24
    800065a4:	f0863603          	ld	a2,-248(a2) # 8002a4a8 <__func__.2+0x7c40>
    800065a8:	00024697          	auipc	a3,0x24
    800065ac:	f086b683          	ld	a3,-248(a3) # 8002a4b0 <__func__.2+0x7c48>
    800065b0:	2201b737          	lui	a4,0x2201b
    800065b4:	000887b7          	lui	a5,0x88
    800065b8:	070a                	slli	a4,a4,0x2
    800065ba:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800065be:	e310                	sd	a2,0(a4)
    800065c0:	07b2                	slli	a5,a5,0xc
    800065c2:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800065c4:	450d                	li	a0,3
    800065c6:	d12fa0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800065ca:	4509                	li	a0,2
    asm volatile(
    800065cc:	4001b4b7          	lui	s1,0x4001b
    800065d0:	c28fa0ef          	jal	800009f8 <set_prev_priv>
    800065d4:	048a                	slli	s1,s1,0x2
    hpt_init();
    800065d6:	a4cfa0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800065da:	8d6fa0ef          	jal	800006b0 <vspt_init>
    800065de:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    800065e2:	bcefa0ef          	jal	800009b0 <vspt_switch>
    800065e6:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    800065ea:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800065ee:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    800065f2:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    800065f6:	413787b3          	sub	a5,a5,s3
    800065fa:	00f037b3          	snez	a5,a5
    800065fe:	00143413          	seqz	s0,s0
    80006602:	8c7d                	and	s0,s0,a5
    hpt_switch();
    80006604:	bc6fa0ef          	jal	800009ca <hpt_switch>
    80006608:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    8000660c:	62000073          	.insn	4, 0x62000073
    asm volatile(
    80006610:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    80006614:	41390933          	sub	s2,s2,s3
    80006618:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    8000661c:	0001d617          	auipc	a2,0x1d
    80006620:	6cc60613          	addi	a2,a2,1740 # 80023ce8 <__func__.2+0x1480>
    80006624:	08200593          	li	a1,130
    80006628:	0001c517          	auipc	a0,0x1c
    8000662c:	54050513          	addi	a0,a0,1344 # 80022b68 <__func__.2+0x300>
    80006630:	01247433          	and	s0,s0,s2
    80006634:	63c1a0ef          	jal	80020c70 <printf>
    80006638:	12040863          	beqz	s0,80006768 <hfence_test+0x1ee>
    8000663c:	13349663          	bne	s1,s3,80006768 <hfence_test+0x1ee>
    80006640:	0001c597          	auipc	a1,0x1c
    80006644:	4f058593          	addi	a1,a1,1264 # 80022b30 <__func__.2+0x2c8>
    80006648:	0001c517          	auipc	a0,0x1c
    8000664c:	53850513          	addi	a0,a0,1336 # 80022b80 <__func__.2+0x318>
    80006650:	6201a0ef          	jal	80020c70 <printf>
    80006654:	4529                	li	a0,10
    80006656:	4ab190ef          	jal	80020300 <putchar>
    8000665a:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    8000665c:	450d                	li	a0,3
    8000665e:	4001b437          	lui	s0,0x4001b
    80006662:	c76fa0ef          	jal	80000ad8 <goto_priv>
    80006666:	040a                	slli	s0,s0,0x2
    80006668:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    8000666c:	b5efa0ef          	jal	800009ca <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80006670:	12000073          	sfence.vma
    asm volatile(
    80006674:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006678:	0001d617          	auipc	a2,0x1d
    8000667c:	6a060613          	addi	a2,a2,1696 # 80023d18 <__func__.2+0x14b0>
    80006680:	08200593          	li	a1,130
    80006684:	0001c517          	auipc	a0,0x1c
    80006688:	4e450513          	addi	a0,a0,1252 # 80022b68 <__func__.2+0x300>
    8000668c:	5e41a0ef          	jal	80020c70 <printf>
    80006690:	13240963          	beq	s0,s2,800067c2 <hfence_test+0x248>
    80006694:	0001c597          	auipc	a1,0x1c
    80006698:	4ac58593          	addi	a1,a1,1196 # 80022b40 <__func__.2+0x2d8>
    8000669c:	0001c517          	auipc	a0,0x1c
    800066a0:	4e450513          	addi	a0,a0,1252 # 80022b80 <__func__.2+0x318>
    800066a4:	5cc1a0ef          	jal	80020c70 <printf>
    800066a8:	0001c517          	auipc	a0,0x1c
    800066ac:	4e050513          	addi	a0,a0,1248 # 80022b88 <__func__.2+0x320>
    800066b0:	5c01a0ef          	jal	80020c70 <printf>
    800066b4:	02900513          	li	a0,41
    800066b8:	449190ef          	jal	80020300 <putchar>
    800066bc:	4529                	li	a0,10
    800066be:	443190ef          	jal	80020300 <putchar>
    800066c2:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    800066c4:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    800066c8:	450d                	li	a0,3
    800066ca:	040a                	slli	s0,s0,0x2
    800066cc:	c0cfa0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800066d0:	f11f90ef          	jal	800005e0 <hspt_init>
    800066d4:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    800066d8:	abefa0ef          	jal	80000996 <hspt_switch>
    goto_priv(PRIV_VS);
    800066dc:	4509                	li	a0,2
    800066de:	bfafa0ef          	jal	80000ad8 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    800066e2:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    800066e6:	450d                	li	a0,3
    800066e8:	bf0fa0ef          	jal	80000ad8 <goto_priv>
    800066ec:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800066ee:	0001d617          	auipc	a2,0x1d
    800066f2:	66260613          	addi	a2,a2,1634 # 80023d50 <__func__.2+0x14e8>
    800066f6:	08200593          	li	a1,130
    800066fa:	0001c517          	auipc	a0,0x1c
    800066fe:	46e50513          	addi	a0,a0,1134 # 80022b68 <__func__.2+0x300>
    80006702:	56e1a0ef          	jal	80020c70 <printf>
    80006706:	09240a63          	beq	s0,s2,8000679a <hfence_test+0x220>
    8000670a:	0001c597          	auipc	a1,0x1c
    8000670e:	43658593          	addi	a1,a1,1078 # 80022b40 <__func__.2+0x2d8>
    80006712:	0001c517          	auipc	a0,0x1c
    80006716:	46e50513          	addi	a0,a0,1134 # 80022b80 <__func__.2+0x318>
    8000671a:	5561a0ef          	jal	80020c70 <printf>
    8000671e:	0001c517          	auipc	a0,0x1c
    80006722:	46a50513          	addi	a0,a0,1130 # 80022b88 <__func__.2+0x320>
    80006726:	54a1a0ef          	jal	80020c70 <printf>
    8000672a:	02900513          	li	a0,41
    8000672e:	3d3190ef          	jal	80020300 <putchar>
    80006732:	4529                	li	a0,10
    80006734:	3cd190ef          	jal	80020300 <putchar>
    80006738:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    8000673a:	0001c597          	auipc	a1,0x1c
    8000673e:	40658593          	addi	a1,a1,1030 # 80022b40 <__func__.2+0x2d8>
    80006742:	0001c517          	auipc	a0,0x1c
    80006746:	4a650513          	addi	a0,a0,1190 # 80022be8 <__func__.2+0x380>
    8000674a:	5261a0ef          	jal	80020c70 <printf>
    8000674e:	4511                	li	a0,4
    80006750:	b88fa0ef          	jal	80000ad8 <goto_priv>
    80006754:	c55fa0ef          	jal	800013a8 <reset_state>
    80006758:	70a2                	ld	ra,40(sp)
    8000675a:	8522                	mv	a0,s0
    8000675c:	7402                	ld	s0,32(sp)
    8000675e:	64e2                	ld	s1,24(sp)
    80006760:	6942                	ld	s2,16(sp)
    80006762:	69a2                	ld	s3,8(sp)
    80006764:	6145                	addi	sp,sp,48
    80006766:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006768:	0001c597          	auipc	a1,0x1c
    8000676c:	3d858593          	addi	a1,a1,984 # 80022b40 <__func__.2+0x2d8>
    80006770:	0001c517          	auipc	a0,0x1c
    80006774:	41050513          	addi	a0,a0,1040 # 80022b80 <__func__.2+0x318>
    80006778:	4f81a0ef          	jal	80020c70 <printf>
    8000677c:	0001c517          	auipc	a0,0x1c
    80006780:	40c50513          	addi	a0,a0,1036 # 80022b88 <__func__.2+0x320>
    80006784:	4ec1a0ef          	jal	80020c70 <printf>
    80006788:	02900513          	li	a0,41
    8000678c:	375190ef          	jal	80020300 <putchar>
    80006790:	4529                	li	a0,10
    80006792:	36f190ef          	jal	80020300 <putchar>
    80006796:	4481                	li	s1,0
    80006798:	b5d1                	j	8000665c <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000679a:	0001c597          	auipc	a1,0x1c
    8000679e:	39658593          	addi	a1,a1,918 # 80022b30 <__func__.2+0x2c8>
    800067a2:	0001c517          	auipc	a0,0x1c
    800067a6:	3de50513          	addi	a0,a0,990 # 80022b80 <__func__.2+0x318>
    800067aa:	4c61a0ef          	jal	80020c70 <printf>
    800067ae:	4529                	li	a0,10
    800067b0:	351190ef          	jal	80020300 <putchar>
    800067b4:	d0d1                	beqz	s1,80006738 <hfence_test+0x1be>
    800067b6:	4405                	li	s0,1
    TEST_END();
    800067b8:	0001c597          	auipc	a1,0x1c
    800067bc:	37858593          	addi	a1,a1,888 # 80022b30 <__func__.2+0x2c8>
    800067c0:	b749                	j	80006742 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    800067c2:	0001c597          	auipc	a1,0x1c
    800067c6:	36e58593          	addi	a1,a1,878 # 80022b30 <__func__.2+0x2c8>
    800067ca:	0001c517          	auipc	a0,0x1c
    800067ce:	3b650513          	addi	a0,a0,950 # 80022b80 <__func__.2+0x318>
    800067d2:	49e1a0ef          	jal	80020c70 <printf>
    800067d6:	4529                	li	a0,10
    800067d8:	329190ef          	jal	80020300 <putchar>
    800067dc:	b5e5                	j	800066c4 <hfence_test+0x14a>

00000000800067de <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    800067de:	1101                	addi	sp,sp,-32

    TEST_START();
    800067e0:	0001b597          	auipc	a1,0x1b
    800067e4:	d2058593          	addi	a1,a1,-736 # 80021500 <__func__.21>
    800067e8:	0001c517          	auipc	a0,0x1c
    800067ec:	36850513          	addi	a0,a0,872 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_1() {
    800067f0:	ec06                	sd	ra,24(sp)
    800067f2:	e822                	sd	s0,16(sp)
    800067f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800067f6:	47a1a0ef          	jal	80020c70 <printf>
    800067fa:	4529                	li	a0,10
    800067fc:	305190ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    80006800:	0330000f          	fence	rw,rw
    80006804:	0003f417          	auipc	s0,0x3f
    80006808:	80c40413          	addi	s0,s0,-2036 # 80045010 <excpt>
    8000680c:	4485                	li	s1,1
    8000680e:	0003f797          	auipc	a5,0x3f
    80006812:	8207bd23          	sd	zero,-1990(a5) # 80045048 <excpt+0x38>
    80006816:	00941023          	sh	s1,0(s0)
    8000681a:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    8000681e:	4511                	li	a0,4
    80006820:	ab8fa0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006824:	002007b7          	lui	a5,0x200
    80006828:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    8000682c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006830:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006834:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006838:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    8000683c:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    80006840:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    80006844:	8526                	mv	a0,s1
    80006846:	a92fa0ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000684a:	08200593          	li	a1,130
    8000684e:	0001d617          	auipc	a2,0x1d
    80006852:	53a60613          	addi	a2,a2,1338 # 80023d88 <__func__.2+0x1520>
    80006856:	0001c517          	auipc	a0,0x1c
    8000685a:	31250513          	addi	a0,a0,786 # 80022b68 <__func__.2+0x300>
    8000685e:	4121a0ef          	jal	80020c70 <printf>
    80006862:	0003e797          	auipc	a5,0x3e
    80006866:	7af7c783          	lbu	a5,1967(a5) # 80045011 <excpt+0x1>
    8000686a:	0001c597          	auipc	a1,0x1c
    8000686e:	2d658593          	addi	a1,a1,726 # 80022b40 <__func__.2+0x2d8>
    80006872:	cf89                	beqz	a5,8000688c <wfi_exception_tests_1+0xae>
    80006874:	6418                	ld	a4,8(s0)
    80006876:	4789                	li	a5,2
    80006878:	0001c597          	auipc	a1,0x1c
    8000687c:	2b858593          	addi	a1,a1,696 # 80022b30 <__func__.2+0x2c8>
    80006880:	00f70663          	beq	a4,a5,8000688c <wfi_exception_tests_1+0xae>
    80006884:	0001c597          	auipc	a1,0x1c
    80006888:	2bc58593          	addi	a1,a1,700 # 80022b40 <__func__.2+0x2d8>
    8000688c:	0001c517          	auipc	a0,0x1c
    80006890:	2f450513          	addi	a0,a0,756 # 80022b80 <__func__.2+0x318>
    80006894:	3dc1a0ef          	jal	80020c70 <printf>
    80006898:	0003e797          	auipc	a5,0x3e
    8000689c:	7797c783          	lbu	a5,1913(a5) # 80045011 <excpt+0x1>
    800068a0:	c789                	beqz	a5,800068aa <wfi_exception_tests_1+0xcc>
    800068a2:	6418                	ld	a4,8(s0)
    800068a4:	4789                	li	a5,2
    800068a6:	00f70c63          	beq	a4,a5,800068be <wfi_exception_tests_1+0xe0>
    800068aa:	0001c517          	auipc	a0,0x1c
    800068ae:	2de50513          	addi	a0,a0,734 # 80022b88 <__func__.2+0x320>
    800068b2:	3be1a0ef          	jal	80020c70 <printf>
    800068b6:	02900513          	li	a0,41
    800068ba:	247190ef          	jal	80020300 <putchar>
    800068be:	4529                	li	a0,10
    800068c0:	241190ef          	jal	80020300 <putchar>
    800068c4:	0003e497          	auipc	s1,0x3e
    800068c8:	74d4c483          	lbu	s1,1869(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800068cc:	0001c597          	auipc	a1,0x1c
    800068d0:	27458593          	addi	a1,a1,628 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800068d4:	cc91                	beqz	s1,800068f0 <wfi_exception_tests_1+0x112>
    800068d6:	6418                	ld	a4,8(s0)
    800068d8:	4789                	li	a5,2
    TEST_END();
    800068da:	0001c597          	auipc	a1,0x1c
    800068de:	25658593          	addi	a1,a1,598 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800068e2:	00f70763          	beq	a4,a5,800068f0 <wfi_exception_tests_1+0x112>
    800068e6:	4481                	li	s1,0
    TEST_END();
    800068e8:	0001c597          	auipc	a1,0x1c
    800068ec:	25858593          	addi	a1,a1,600 # 80022b40 <__func__.2+0x2d8>
    800068f0:	0001c517          	auipc	a0,0x1c
    800068f4:	2f850513          	addi	a0,a0,760 # 80022be8 <__func__.2+0x380>
    800068f8:	3781a0ef          	jal	80020c70 <printf>
    800068fc:	4511                	li	a0,4
    800068fe:	9dafa0ef          	jal	80000ad8 <goto_priv>
    80006902:	aa7fa0ef          	jal	800013a8 <reset_state>
}
    80006906:	60e2                	ld	ra,24(sp)
    80006908:	6442                	ld	s0,16(sp)
    8000690a:	8526                	mv	a0,s1
    8000690c:	64a2                	ld	s1,8(sp)
    8000690e:	6105                	addi	sp,sp,32
    80006910:	8082                	ret

0000000080006912 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006912:	1101                	addi	sp,sp,-32

    TEST_START();
    80006914:	0001b597          	auipc	a1,0x1b
    80006918:	c0458593          	addi	a1,a1,-1020 # 80021518 <__func__.20>
    8000691c:	0001c517          	auipc	a0,0x1c
    80006920:	23450513          	addi	a0,a0,564 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_2() {
    80006924:	ec06                	sd	ra,24(sp)
    80006926:	e822                	sd	s0,16(sp)
    80006928:	e426                	sd	s1,8(sp)
    TEST_START();
    8000692a:	3461a0ef          	jal	80020c70 <printf>
    8000692e:	4529                	li	a0,10
    80006930:	1d1190ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    80006934:	0330000f          	fence	rw,rw
    80006938:	0003e417          	auipc	s0,0x3e
    8000693c:	6d840413          	addi	s0,s0,1752 # 80045010 <excpt>
    80006940:	4485                	li	s1,1
    80006942:	0003e797          	auipc	a5,0x3e
    80006946:	7007b323          	sd	zero,1798(a5) # 80045048 <excpt+0x38>
    8000694a:	00941023          	sh	s1,0(s0)
    8000694e:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006952:	4511                	li	a0,4
    80006954:	984fa0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006958:	002007b7          	lui	a5,0x200
    8000695c:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006960:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006964:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006968:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000696c:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006970:	0330000f          	fence	rw,rw
    80006974:	0003e797          	auipc	a5,0x3e
    80006978:	6c07ba23          	sd	zero,1748(a5) # 80045048 <excpt+0x38>
    8000697c:	00941023          	sh	s1,0(s0)
    80006980:	0330000f          	fence	rw,rw
    CSRS(CSR_UIE, 0b0100);
    80006984:	00426073          	csrsi	uie,4
    80006988:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    8000698c:	4501                	li	a0,0
    8000698e:	94afa0ef          	jal	80000ad8 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006992:	08200593          	li	a1,130
    80006996:	0001d617          	auipc	a2,0x1d
    8000699a:	46260613          	addi	a2,a2,1122 # 80023df8 <__func__.2+0x1590>
    8000699e:	0001c517          	auipc	a0,0x1c
    800069a2:	1ca50513          	addi	a0,a0,458 # 80022b68 <__func__.2+0x300>
    800069a6:	2ca1a0ef          	jal	80020c70 <printf>
    800069aa:	0003e797          	auipc	a5,0x3e
    800069ae:	6677c783          	lbu	a5,1639(a5) # 80045011 <excpt+0x1>
    800069b2:	0001c597          	auipc	a1,0x1c
    800069b6:	18e58593          	addi	a1,a1,398 # 80022b40 <__func__.2+0x2d8>
    800069ba:	cf89                	beqz	a5,800069d4 <wfi_exception_tests_2+0xc2>
    800069bc:	6418                	ld	a4,8(s0)
    800069be:	4789                	li	a5,2
    800069c0:	0001c597          	auipc	a1,0x1c
    800069c4:	17058593          	addi	a1,a1,368 # 80022b30 <__func__.2+0x2c8>
    800069c8:	00f70663          	beq	a4,a5,800069d4 <wfi_exception_tests_2+0xc2>
    800069cc:	0001c597          	auipc	a1,0x1c
    800069d0:	17458593          	addi	a1,a1,372 # 80022b40 <__func__.2+0x2d8>
    800069d4:	0001c517          	auipc	a0,0x1c
    800069d8:	1ac50513          	addi	a0,a0,428 # 80022b80 <__func__.2+0x318>
    800069dc:	2941a0ef          	jal	80020c70 <printf>
    800069e0:	0003e797          	auipc	a5,0x3e
    800069e4:	6317c783          	lbu	a5,1585(a5) # 80045011 <excpt+0x1>
    800069e8:	c789                	beqz	a5,800069f2 <wfi_exception_tests_2+0xe0>
    800069ea:	6418                	ld	a4,8(s0)
    800069ec:	4789                	li	a5,2
    800069ee:	00f70c63          	beq	a4,a5,80006a06 <wfi_exception_tests_2+0xf4>
    800069f2:	0001c517          	auipc	a0,0x1c
    800069f6:	19650513          	addi	a0,a0,406 # 80022b88 <__func__.2+0x320>
    800069fa:	2761a0ef          	jal	80020c70 <printf>
    800069fe:	02900513          	li	a0,41
    80006a02:	0ff190ef          	jal	80020300 <putchar>
    80006a06:	4529                	li	a0,10
    80006a08:	0f9190ef          	jal	80020300 <putchar>
    80006a0c:	0003e497          	auipc	s1,0x3e
    80006a10:	6054c483          	lbu	s1,1541(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006a14:	0001c597          	auipc	a1,0x1c
    80006a18:	12c58593          	addi	a1,a1,300 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a1c:	cc91                	beqz	s1,80006a38 <wfi_exception_tests_2+0x126>
    80006a1e:	6418                	ld	a4,8(s0)
    80006a20:	4789                	li	a5,2
    TEST_END();
    80006a22:	0001c597          	auipc	a1,0x1c
    80006a26:	10e58593          	addi	a1,a1,270 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a2a:	00f70763          	beq	a4,a5,80006a38 <wfi_exception_tests_2+0x126>
    80006a2e:	4481                	li	s1,0
    TEST_END();
    80006a30:	0001c597          	auipc	a1,0x1c
    80006a34:	11058593          	addi	a1,a1,272 # 80022b40 <__func__.2+0x2d8>
    80006a38:	0001c517          	auipc	a0,0x1c
    80006a3c:	1b050513          	addi	a0,a0,432 # 80022be8 <__func__.2+0x380>
    80006a40:	2301a0ef          	jal	80020c70 <printf>
    80006a44:	4511                	li	a0,4
    80006a46:	892fa0ef          	jal	80000ad8 <goto_priv>
    80006a4a:	95ffa0ef          	jal	800013a8 <reset_state>
}
    80006a4e:	60e2                	ld	ra,24(sp)
    80006a50:	6442                	ld	s0,16(sp)
    80006a52:	8526                	mv	a0,s1
    80006a54:	64a2                	ld	s1,8(sp)
    80006a56:	6105                	addi	sp,sp,32
    80006a58:	8082                	ret

0000000080006a5a <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006a5a:	1101                	addi	sp,sp,-32

    TEST_START();
    80006a5c:	0001b597          	auipc	a1,0x1b
    80006a60:	ad458593          	addi	a1,a1,-1324 # 80021530 <__func__.19>
    80006a64:	0001c517          	auipc	a0,0x1c
    80006a68:	0ec50513          	addi	a0,a0,236 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_3() {
    80006a6c:	ec06                	sd	ra,24(sp)
    80006a6e:	e822                	sd	s0,16(sp)
    80006a70:	e426                	sd	s1,8(sp)
    TEST_START();
    80006a72:	1fe1a0ef          	jal	80020c70 <printf>
    80006a76:	4529                	li	a0,10
    80006a78:	089190ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    80006a7c:	0330000f          	fence	rw,rw
    80006a80:	0003e417          	auipc	s0,0x3e
    80006a84:	59040413          	addi	s0,s0,1424 # 80045010 <excpt>
    80006a88:	4485                	li	s1,1
    80006a8a:	0003e797          	auipc	a5,0x3e
    80006a8e:	5a07bf23          	sd	zero,1470(a5) # 80045048 <excpt+0x38>
    80006a92:	00941023          	sh	s1,0(s0)
    80006a96:	0330000f          	fence	rw,rw
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006a9a:	4511                	li	a0,4
    80006a9c:	83cfa0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006aa0:	002007b7          	lui	a5,0x200
    80006aa4:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006aa8:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006aac:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006ab0:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006ab4:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006ab8:	4511                	li	a0,4
    80006aba:	81efa0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006abe:	0330000f          	fence	rw,rw
    80006ac2:	0003e797          	auipc	a5,0x3e
    80006ac6:	5807b323          	sd	zero,1414(a5) # 80045048 <excpt+0x38>
    80006aca:	00941023          	sh	s1,0(s0)
    80006ace:	0330000f          	fence	rw,rw
    80006ad2:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ad6:	08200593          	li	a1,130
    80006ada:	0001d617          	auipc	a2,0x1d
    80006ade:	38e60613          	addi	a2,a2,910 # 80023e68 <__func__.2+0x1600>
    80006ae2:	0001c517          	auipc	a0,0x1c
    80006ae6:	08650513          	addi	a0,a0,134 # 80022b68 <__func__.2+0x300>
    80006aea:	1861a0ef          	jal	80020c70 <printf>
    80006aee:	0003e797          	auipc	a5,0x3e
    80006af2:	5237c783          	lbu	a5,1315(a5) # 80045011 <excpt+0x1>
    80006af6:	0001c597          	auipc	a1,0x1c
    80006afa:	03a58593          	addi	a1,a1,58 # 80022b30 <__func__.2+0x2c8>
    80006afe:	c789                	beqz	a5,80006b08 <wfi_exception_tests_3+0xae>
    80006b00:	0001c597          	auipc	a1,0x1c
    80006b04:	04058593          	addi	a1,a1,64 # 80022b40 <__func__.2+0x2d8>
    80006b08:	0001c517          	auipc	a0,0x1c
    80006b0c:	07850513          	addi	a0,a0,120 # 80022b80 <__func__.2+0x318>
    80006b10:	1601a0ef          	jal	80020c70 <printf>
    80006b14:	0003e797          	auipc	a5,0x3e
    80006b18:	4fd7c783          	lbu	a5,1277(a5) # 80045011 <excpt+0x1>
    80006b1c:	e7a9                	bnez	a5,80006b66 <wfi_exception_tests_3+0x10c>
    80006b1e:	4529                	li	a0,10
    80006b20:	7e0190ef          	jal	80020300 <putchar>
    80006b24:	0003e797          	auipc	a5,0x3e
    80006b28:	4ed7c783          	lbu	a5,1261(a5) # 80045011 <excpt+0x1>
    80006b2c:	e79d                	bnez	a5,80006b5a <wfi_exception_tests_3+0x100>
    80006b2e:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006b30:	0001c597          	auipc	a1,0x1c
    80006b34:	00058593          	mv	a1,a1
    80006b38:	0001c517          	auipc	a0,0x1c
    80006b3c:	0b050513          	addi	a0,a0,176 # 80022be8 <__func__.2+0x380>
    80006b40:	1301a0ef          	jal	80020c70 <printf>
    80006b44:	4511                	li	a0,4
    80006b46:	f93f90ef          	jal	80000ad8 <goto_priv>
    80006b4a:	85ffa0ef          	jal	800013a8 <reset_state>
}
    80006b4e:	60e2                	ld	ra,24(sp)
    80006b50:	8522                	mv	a0,s0
    80006b52:	6442                	ld	s0,16(sp)
    80006b54:	64a2                	ld	s1,8(sp)
    80006b56:	6105                	addi	sp,sp,32
    80006b58:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b5a:	4401                	li	s0,0
    TEST_END();
    80006b5c:	0001c597          	auipc	a1,0x1c
    80006b60:	fe458593          	addi	a1,a1,-28 # 80022b40 <__func__.2+0x2d8>
    80006b64:	bfd1                	j	80006b38 <wfi_exception_tests_3+0xde>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b66:	0001c517          	auipc	a0,0x1c
    80006b6a:	02250513          	addi	a0,a0,34 # 80022b88 <__func__.2+0x320>
    80006b6e:	1021a0ef          	jal	80020c70 <printf>
    80006b72:	02900513          	li	a0,41
    80006b76:	78a190ef          	jal	80020300 <putchar>
    80006b7a:	b755                	j	80006b1e <wfi_exception_tests_3+0xc4>

0000000080006b7c <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006b7c:	1101                	addi	sp,sp,-32

    TEST_START();
    80006b7e:	0001b597          	auipc	a1,0x1b
    80006b82:	9ca58593          	addi	a1,a1,-1590 # 80021548 <__func__.18>
    80006b86:	0001c517          	auipc	a0,0x1c
    80006b8a:	fca50513          	addi	a0,a0,-54 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_4() {
    80006b8e:	ec06                	sd	ra,24(sp)
    80006b90:	e822                	sd	s0,16(sp)
    80006b92:	e426                	sd	s1,8(sp)
    TEST_START();
    80006b94:	0dc1a0ef          	jal	80020c70 <printf>
    80006b98:	4529                	li	a0,10
    80006b9a:	766190ef          	jal	80020300 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006b9e:	0330000f          	fence	rw,rw
    80006ba2:	0003e417          	auipc	s0,0x3e
    80006ba6:	46e40413          	addi	s0,s0,1134 # 80045010 <excpt>
    80006baa:	4485                	li	s1,1
    80006bac:	0003e797          	auipc	a5,0x3e
    80006bb0:	4807be23          	sd	zero,1180(a5) # 80045048 <excpt+0x38>
    80006bb4:	00941023          	sh	s1,0(s0)
    80006bb8:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006bbc:	002007b7          	lui	a5,0x200
    80006bc0:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006bc4:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006bc8:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006bcc:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006bd0:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006bd4:	450d                	li	a0,3
    80006bd6:	f03f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006bda:	0330000f          	fence	rw,rw
    80006bde:	0003e797          	auipc	a5,0x3e
    80006be2:	4607b523          	sd	zero,1130(a5) # 80045048 <excpt+0x38>
    80006be6:	00941023          	sh	s1,0(s0)
    80006bea:	0330000f          	fence	rw,rw
    80006bee:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bf2:	08200593          	li	a1,130
    80006bf6:	0001d617          	auipc	a2,0x1d
    80006bfa:	2e260613          	addi	a2,a2,738 # 80023ed8 <__func__.2+0x1670>
    80006bfe:	0001c517          	auipc	a0,0x1c
    80006c02:	f6a50513          	addi	a0,a0,-150 # 80022b68 <__func__.2+0x300>
    80006c06:	06a1a0ef          	jal	80020c70 <printf>
    80006c0a:	0003e797          	auipc	a5,0x3e
    80006c0e:	4077c783          	lbu	a5,1031(a5) # 80045011 <excpt+0x1>
    80006c12:	0001c597          	auipc	a1,0x1c
    80006c16:	f1e58593          	addi	a1,a1,-226 # 80022b30 <__func__.2+0x2c8>
    80006c1a:	c789                	beqz	a5,80006c24 <wfi_exception_tests_4+0xa8>
    80006c1c:	0001c597          	auipc	a1,0x1c
    80006c20:	f2458593          	addi	a1,a1,-220 # 80022b40 <__func__.2+0x2d8>
    80006c24:	0001c517          	auipc	a0,0x1c
    80006c28:	f5c50513          	addi	a0,a0,-164 # 80022b80 <__func__.2+0x318>
    80006c2c:	0441a0ef          	jal	80020c70 <printf>
    80006c30:	0003e797          	auipc	a5,0x3e
    80006c34:	3e17c783          	lbu	a5,993(a5) # 80045011 <excpt+0x1>
    80006c38:	e7a9                	bnez	a5,80006c82 <wfi_exception_tests_4+0x106>
    80006c3a:	4529                	li	a0,10
    80006c3c:	6c4190ef          	jal	80020300 <putchar>
    80006c40:	0003e797          	auipc	a5,0x3e
    80006c44:	3d17c783          	lbu	a5,977(a5) # 80045011 <excpt+0x1>
    80006c48:	e79d                	bnez	a5,80006c76 <wfi_exception_tests_4+0xfa>
    80006c4a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006c4c:	0001c597          	auipc	a1,0x1c
    80006c50:	ee458593          	addi	a1,a1,-284 # 80022b30 <__func__.2+0x2c8>
    80006c54:	0001c517          	auipc	a0,0x1c
    80006c58:	f9450513          	addi	a0,a0,-108 # 80022be8 <__func__.2+0x380>
    80006c5c:	0141a0ef          	jal	80020c70 <printf>
    80006c60:	4511                	li	a0,4
    80006c62:	e77f90ef          	jal	80000ad8 <goto_priv>
    80006c66:	f42fa0ef          	jal	800013a8 <reset_state>
}
    80006c6a:	60e2                	ld	ra,24(sp)
    80006c6c:	8522                	mv	a0,s0
    80006c6e:	6442                	ld	s0,16(sp)
    80006c70:	64a2                	ld	s1,8(sp)
    80006c72:	6105                	addi	sp,sp,32
    80006c74:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c76:	4401                	li	s0,0
    TEST_END();
    80006c78:	0001c597          	auipc	a1,0x1c
    80006c7c:	ec858593          	addi	a1,a1,-312 # 80022b40 <__func__.2+0x2d8>
    80006c80:	bfd1                	j	80006c54 <wfi_exception_tests_4+0xd8>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c82:	0001c517          	auipc	a0,0x1c
    80006c86:	f0650513          	addi	a0,a0,-250 # 80022b88 <__func__.2+0x320>
    80006c8a:	7e7190ef          	jal	80020c70 <printf>
    80006c8e:	02900513          	li	a0,41
    80006c92:	66e190ef          	jal	80020300 <putchar>
    80006c96:	b755                	j	80006c3a <wfi_exception_tests_4+0xbe>

0000000080006c98 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006c98:	1101                	addi	sp,sp,-32

    TEST_START();
    80006c9a:	0001b597          	auipc	a1,0x1b
    80006c9e:	8c658593          	addi	a1,a1,-1850 # 80021560 <__func__.17>
    80006ca2:	0001c517          	auipc	a0,0x1c
    80006ca6:	eae50513          	addi	a0,a0,-338 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_5() {
    80006caa:	ec06                	sd	ra,24(sp)
    80006cac:	e822                	sd	s0,16(sp)
    80006cae:	e426                	sd	s1,8(sp)
    TEST_START();
    80006cb0:	7c1190ef          	jal	80020c70 <printf>
    80006cb4:	4529                	li	a0,10
    80006cb6:	64a190ef          	jal	80020300 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006cba:	0330000f          	fence	rw,rw
    80006cbe:	0003e417          	auipc	s0,0x3e
    80006cc2:	35240413          	addi	s0,s0,850 # 80045010 <excpt>
    80006cc6:	4485                	li	s1,1
    80006cc8:	0003e797          	auipc	a5,0x3e
    80006ccc:	3807b023          	sd	zero,896(a5) # 80045048 <excpt+0x38>
    80006cd0:	00941023          	sh	s1,0(s0)
    80006cd4:	0330000f          	fence	rw,rw

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006cd8:	002007b7          	lui	a5,0x200
    80006cdc:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006ce0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006ce4:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006ce8:	4509                	li	a0,2
    80006cea:	deff90ef          	jal	80000ad8 <goto_priv>
    goto_priv(PRIV_M); 
    80006cee:	4511                	li	a0,4
    80006cf0:	de9f90ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006cf4:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006cf8:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006cfc:	4509                	li	a0,2
    80006cfe:	ddbf90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d02:	0330000f          	fence	rw,rw
    80006d06:	0003e797          	auipc	a5,0x3e
    80006d0a:	3407b123          	sd	zero,834(a5) # 80045048 <excpt+0x38>
    80006d0e:	00941023          	sh	s1,0(s0)
    80006d12:	0330000f          	fence	rw,rw
    80006d16:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d1a:	08200593          	li	a1,130
    80006d1e:	0001d617          	auipc	a2,0x1d
    80006d22:	22260613          	addi	a2,a2,546 # 80023f40 <__func__.2+0x16d8>
    80006d26:	0001c517          	auipc	a0,0x1c
    80006d2a:	e4250513          	addi	a0,a0,-446 # 80022b68 <__func__.2+0x300>
    80006d2e:	743190ef          	jal	80020c70 <printf>
    80006d32:	0003e797          	auipc	a5,0x3e
    80006d36:	2df7c783          	lbu	a5,735(a5) # 80045011 <excpt+0x1>
    80006d3a:	0001c597          	auipc	a1,0x1c
    80006d3e:	df658593          	addi	a1,a1,-522 # 80022b30 <__func__.2+0x2c8>
    80006d42:	c789                	beqz	a5,80006d4c <wfi_exception_tests_5+0xb4>
    80006d44:	0001c597          	auipc	a1,0x1c
    80006d48:	dfc58593          	addi	a1,a1,-516 # 80022b40 <__func__.2+0x2d8>
    80006d4c:	0001c517          	auipc	a0,0x1c
    80006d50:	e3450513          	addi	a0,a0,-460 # 80022b80 <__func__.2+0x318>
    80006d54:	71d190ef          	jal	80020c70 <printf>
    80006d58:	0003e797          	auipc	a5,0x3e
    80006d5c:	2b97c783          	lbu	a5,697(a5) # 80045011 <excpt+0x1>
    80006d60:	e7a9                	bnez	a5,80006daa <wfi_exception_tests_5+0x112>
    80006d62:	4529                	li	a0,10
    80006d64:	59c190ef          	jal	80020300 <putchar>
    80006d68:	0003e797          	auipc	a5,0x3e
    80006d6c:	2a97c783          	lbu	a5,681(a5) # 80045011 <excpt+0x1>
    80006d70:	e79d                	bnez	a5,80006d9e <wfi_exception_tests_5+0x106>
    80006d72:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006d74:	0001c597          	auipc	a1,0x1c
    80006d78:	dbc58593          	addi	a1,a1,-580 # 80022b30 <__func__.2+0x2c8>
    80006d7c:	0001c517          	auipc	a0,0x1c
    80006d80:	e6c50513          	addi	a0,a0,-404 # 80022be8 <__func__.2+0x380>
    80006d84:	6ed190ef          	jal	80020c70 <printf>
    80006d88:	4511                	li	a0,4
    80006d8a:	d4ff90ef          	jal	80000ad8 <goto_priv>
    80006d8e:	e1afa0ef          	jal	800013a8 <reset_state>
}
    80006d92:	60e2                	ld	ra,24(sp)
    80006d94:	8522                	mv	a0,s0
    80006d96:	6442                	ld	s0,16(sp)
    80006d98:	64a2                	ld	s1,8(sp)
    80006d9a:	6105                	addi	sp,sp,32
    80006d9c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d9e:	4401                	li	s0,0
    TEST_END();
    80006da0:	0001c597          	auipc	a1,0x1c
    80006da4:	da058593          	addi	a1,a1,-608 # 80022b40 <__func__.2+0x2d8>
    80006da8:	bfd1                	j	80006d7c <wfi_exception_tests_5+0xe4>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006daa:	0001c517          	auipc	a0,0x1c
    80006dae:	dde50513          	addi	a0,a0,-546 # 80022b88 <__func__.2+0x320>
    80006db2:	6bf190ef          	jal	80020c70 <printf>
    80006db6:	02900513          	li	a0,41
    80006dba:	546190ef          	jal	80020300 <putchar>
    80006dbe:	b755                	j	80006d62 <wfi_exception_tests_5+0xca>

0000000080006dc0 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006dc0:	1101                	addi	sp,sp,-32

    TEST_START();
    80006dc2:	0001a597          	auipc	a1,0x1a
    80006dc6:	7b658593          	addi	a1,a1,1974 # 80021578 <__func__.16>
    80006dca:	0001c517          	auipc	a0,0x1c
    80006dce:	d8650513          	addi	a0,a0,-634 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_6() {
    80006dd2:	ec06                	sd	ra,24(sp)
    80006dd4:	e822                	sd	s0,16(sp)
    80006dd6:	e426                	sd	s1,8(sp)
    TEST_START();
    80006dd8:	699190ef          	jal	80020c70 <printf>
    80006ddc:	4529                	li	a0,10
    80006dde:	522190ef          	jal	80020300 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006de2:	0330000f          	fence	rw,rw
    80006de6:	0003e417          	auipc	s0,0x3e
    80006dea:	22a40413          	addi	s0,s0,554 # 80045010 <excpt>
    80006dee:	4485                	li	s1,1
    80006df0:	0003e797          	auipc	a5,0x3e
    80006df4:	2407bc23          	sd	zero,600(a5) # 80045048 <excpt+0x38>
    80006df8:	00941023          	sh	s1,0(s0)
    80006dfc:	0330000f          	fence	rw,rw
    
    goto_priv(PRIV_M);
    80006e00:	4511                	li	a0,4
    80006e02:	cd7f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e06:	002007b7          	lui	a5,0x200
    80006e0a:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006e0e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006e12:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006e16:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006e1a:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006e1e:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006e22:	4511                	li	a0,4
    80006e24:	cb5f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e28:	0330000f          	fence	rw,rw
    80006e2c:	0003e797          	auipc	a5,0x3e
    80006e30:	2007be23          	sd	zero,540(a5) # 80045048 <excpt+0x38>
    80006e34:	00941023          	sh	s1,0(s0)
    80006e38:	0330000f          	fence	rw,rw
    80006e3c:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e40:	08200593          	li	a1,130
    80006e44:	0001d617          	auipc	a2,0x1d
    80006e48:	16460613          	addi	a2,a2,356 # 80023fa8 <__func__.2+0x1740>
    80006e4c:	0001c517          	auipc	a0,0x1c
    80006e50:	d1c50513          	addi	a0,a0,-740 # 80022b68 <__func__.2+0x300>
    80006e54:	61d190ef          	jal	80020c70 <printf>
    80006e58:	0003e797          	auipc	a5,0x3e
    80006e5c:	1b97c783          	lbu	a5,441(a5) # 80045011 <excpt+0x1>
    80006e60:	0001c597          	auipc	a1,0x1c
    80006e64:	cd058593          	addi	a1,a1,-816 # 80022b30 <__func__.2+0x2c8>
    80006e68:	c789                	beqz	a5,80006e72 <wfi_exception_tests_6+0xb2>
    80006e6a:	0001c597          	auipc	a1,0x1c
    80006e6e:	cd658593          	addi	a1,a1,-810 # 80022b40 <__func__.2+0x2d8>
    80006e72:	0001c517          	auipc	a0,0x1c
    80006e76:	d0e50513          	addi	a0,a0,-754 # 80022b80 <__func__.2+0x318>
    80006e7a:	5f7190ef          	jal	80020c70 <printf>
    80006e7e:	0003e797          	auipc	a5,0x3e
    80006e82:	1937c783          	lbu	a5,403(a5) # 80045011 <excpt+0x1>
    80006e86:	e7a9                	bnez	a5,80006ed0 <wfi_exception_tests_6+0x110>
    80006e88:	4529                	li	a0,10
    80006e8a:	476190ef          	jal	80020300 <putchar>
    80006e8e:	0003e797          	auipc	a5,0x3e
    80006e92:	1837c783          	lbu	a5,387(a5) # 80045011 <excpt+0x1>
    80006e96:	e79d                	bnez	a5,80006ec4 <wfi_exception_tests_6+0x104>
    80006e98:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006e9a:	0001c597          	auipc	a1,0x1c
    80006e9e:	c9658593          	addi	a1,a1,-874 # 80022b30 <__func__.2+0x2c8>
    80006ea2:	0001c517          	auipc	a0,0x1c
    80006ea6:	d4650513          	addi	a0,a0,-698 # 80022be8 <__func__.2+0x380>
    80006eaa:	5c7190ef          	jal	80020c70 <printf>
    80006eae:	4511                	li	a0,4
    80006eb0:	c29f90ef          	jal	80000ad8 <goto_priv>
    80006eb4:	cf4fa0ef          	jal	800013a8 <reset_state>
}
    80006eb8:	60e2                	ld	ra,24(sp)
    80006eba:	8522                	mv	a0,s0
    80006ebc:	6442                	ld	s0,16(sp)
    80006ebe:	64a2                	ld	s1,8(sp)
    80006ec0:	6105                	addi	sp,sp,32
    80006ec2:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ec4:	4401                	li	s0,0
    TEST_END();
    80006ec6:	0001c597          	auipc	a1,0x1c
    80006eca:	c7a58593          	addi	a1,a1,-902 # 80022b40 <__func__.2+0x2d8>
    80006ece:	bfd1                	j	80006ea2 <wfi_exception_tests_6+0xe2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ed0:	0001c517          	auipc	a0,0x1c
    80006ed4:	cb850513          	addi	a0,a0,-840 # 80022b88 <__func__.2+0x320>
    80006ed8:	599190ef          	jal	80020c70 <printf>
    80006edc:	02900513          	li	a0,41
    80006ee0:	420190ef          	jal	80020300 <putchar>
    80006ee4:	b755                	j	80006e88 <wfi_exception_tests_6+0xc8>

0000000080006ee6 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006ee6:	1101                	addi	sp,sp,-32

    TEST_START();
    80006ee8:	0001a597          	auipc	a1,0x1a
    80006eec:	6a858593          	addi	a1,a1,1704 # 80021590 <__func__.15>
    80006ef0:	0001c517          	auipc	a0,0x1c
    80006ef4:	c6050513          	addi	a0,a0,-928 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_7() {
    80006ef8:	ec06                	sd	ra,24(sp)
    80006efa:	e822                	sd	s0,16(sp)
    80006efc:	e426                	sd	s1,8(sp)
    TEST_START();
    80006efe:	573190ef          	jal	80020c70 <printf>
    80006f02:	4529                	li	a0,10
    80006f04:	3fc190ef          	jal	80020300 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006f08:	0330000f          	fence	rw,rw
    80006f0c:	0003e417          	auipc	s0,0x3e
    80006f10:	10440413          	addi	s0,s0,260 # 80045010 <excpt>
    80006f14:	4485                	li	s1,1
    80006f16:	0003e797          	auipc	a5,0x3e
    80006f1a:	1207b923          	sd	zero,306(a5) # 80045048 <excpt+0x38>
    80006f1e:	00941023          	sh	s1,0(s0)
    80006f22:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006f26:	4511                	li	a0,4
    80006f28:	bb1f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f2c:	002007b7          	lui	a5,0x200
    80006f30:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006f34:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006f38:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006f3c:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006f40:	4509                	li	a0,2
    80006f42:	b97f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f46:	0330000f          	fence	rw,rw
    80006f4a:	0003e797          	auipc	a5,0x3e
    80006f4e:	0e07bf23          	sd	zero,254(a5) # 80045048 <excpt+0x38>
    80006f52:	00941023          	sh	s1,0(s0)
    80006f56:	0330000f          	fence	rw,rw
    80006f5a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f5e:	08200593          	li	a1,130
    80006f62:	0001d617          	auipc	a2,0x1d
    80006f66:	0b660613          	addi	a2,a2,182 # 80024018 <__func__.2+0x17b0>
    80006f6a:	0001c517          	auipc	a0,0x1c
    80006f6e:	bfe50513          	addi	a0,a0,-1026 # 80022b68 <__func__.2+0x300>
    80006f72:	4ff190ef          	jal	80020c70 <printf>
    80006f76:	0003e797          	auipc	a5,0x3e
    80006f7a:	09b7c783          	lbu	a5,155(a5) # 80045011 <excpt+0x1>
    80006f7e:	0001c597          	auipc	a1,0x1c
    80006f82:	bb258593          	addi	a1,a1,-1102 # 80022b30 <__func__.2+0x2c8>
    80006f86:	c789                	beqz	a5,80006f90 <wfi_exception_tests_7+0xaa>
    80006f88:	0001c597          	auipc	a1,0x1c
    80006f8c:	bb858593          	addi	a1,a1,-1096 # 80022b40 <__func__.2+0x2d8>
    80006f90:	0001c517          	auipc	a0,0x1c
    80006f94:	bf050513          	addi	a0,a0,-1040 # 80022b80 <__func__.2+0x318>
    80006f98:	4d9190ef          	jal	80020c70 <printf>
    80006f9c:	0003e797          	auipc	a5,0x3e
    80006fa0:	0757c783          	lbu	a5,117(a5) # 80045011 <excpt+0x1>
    80006fa4:	e7a9                	bnez	a5,80006fee <wfi_exception_tests_7+0x108>
    80006fa6:	4529                	li	a0,10
    80006fa8:	358190ef          	jal	80020300 <putchar>
    80006fac:	0003e797          	auipc	a5,0x3e
    80006fb0:	0657c783          	lbu	a5,101(a5) # 80045011 <excpt+0x1>
    80006fb4:	e79d                	bnez	a5,80006fe2 <wfi_exception_tests_7+0xfc>
    80006fb6:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006fb8:	0001c597          	auipc	a1,0x1c
    80006fbc:	b7858593          	addi	a1,a1,-1160 # 80022b30 <__func__.2+0x2c8>
    80006fc0:	0001c517          	auipc	a0,0x1c
    80006fc4:	c2850513          	addi	a0,a0,-984 # 80022be8 <__func__.2+0x380>
    80006fc8:	4a9190ef          	jal	80020c70 <printf>
    80006fcc:	4511                	li	a0,4
    80006fce:	b0bf90ef          	jal	80000ad8 <goto_priv>
    80006fd2:	bd6fa0ef          	jal	800013a8 <reset_state>
}
    80006fd6:	60e2                	ld	ra,24(sp)
    80006fd8:	8522                	mv	a0,s0
    80006fda:	6442                	ld	s0,16(sp)
    80006fdc:	64a2                	ld	s1,8(sp)
    80006fde:	6105                	addi	sp,sp,32
    80006fe0:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fe2:	4401                	li	s0,0
    TEST_END();
    80006fe4:	0001c597          	auipc	a1,0x1c
    80006fe8:	b5c58593          	addi	a1,a1,-1188 # 80022b40 <__func__.2+0x2d8>
    80006fec:	bfd1                	j	80006fc0 <wfi_exception_tests_7+0xda>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fee:	0001c517          	auipc	a0,0x1c
    80006ff2:	b9a50513          	addi	a0,a0,-1126 # 80022b88 <__func__.2+0x320>
    80006ff6:	47b190ef          	jal	80020c70 <printf>
    80006ffa:	02900513          	li	a0,41
    80006ffe:	302190ef          	jal	80020300 <putchar>
    80007002:	b755                	j	80006fa6 <wfi_exception_tests_7+0xc0>

0000000080007004 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80007004:	1141                	addi	sp,sp,-16

    TEST_START();
    80007006:	0001a597          	auipc	a1,0x1a
    8000700a:	5a258593          	addi	a1,a1,1442 # 800215a8 <__func__.14>
    8000700e:	0001c517          	auipc	a0,0x1c
    80007012:	b4250513          	addi	a0,a0,-1214 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_8() {
    80007016:	e406                	sd	ra,8(sp)
    80007018:	e022                	sd	s0,0(sp)
    TEST_START();
    8000701a:	457190ef          	jal	80020c70 <printf>
    8000701e:	4529                	li	a0,10
    80007020:	2e0190ef          	jal	80020300 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80007024:	4511                	li	a0,4
    80007026:	ab3f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000702a:	002007b7          	lui	a5,0x200
    8000702e:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80007032:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80007036:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    8000703a:	4509                	li	a0,2
    8000703c:	a9df90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007040:	0330000f          	fence	rw,rw
    80007044:	4785                	li	a5,1
    80007046:	0003e717          	auipc	a4,0x3e
    8000704a:	00073123          	sd	zero,2(a4) # 80045048 <excpt+0x38>
    8000704e:	0003e717          	auipc	a4,0x3e
    80007052:	fcf71123          	sh	a5,-62(a4) # 80045010 <excpt>
    80007056:	0330000f          	fence	rw,rw
    8000705a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000705e:	08200593          	li	a1,130
    80007062:	0001d617          	auipc	a2,0x1d
    80007066:	01e60613          	addi	a2,a2,30 # 80024080 <__func__.2+0x1818>
    8000706a:	0001c517          	auipc	a0,0x1c
    8000706e:	afe50513          	addi	a0,a0,-1282 # 80022b68 <__func__.2+0x300>
    80007072:	3ff190ef          	jal	80020c70 <printf>
    80007076:	0003e797          	auipc	a5,0x3e
    8000707a:	f9b7c783          	lbu	a5,-101(a5) # 80045011 <excpt+0x1>
    8000707e:	0001c597          	auipc	a1,0x1c
    80007082:	ab258593          	addi	a1,a1,-1358 # 80022b30 <__func__.2+0x2c8>
    80007086:	c789                	beqz	a5,80007090 <wfi_exception_tests_8+0x8c>
    80007088:	0001c597          	auipc	a1,0x1c
    8000708c:	ab858593          	addi	a1,a1,-1352 # 80022b40 <__func__.2+0x2d8>
    80007090:	0001c517          	auipc	a0,0x1c
    80007094:	af050513          	addi	a0,a0,-1296 # 80022b80 <__func__.2+0x318>
    80007098:	3d9190ef          	jal	80020c70 <printf>
    8000709c:	0003e797          	auipc	a5,0x3e
    800070a0:	f757c783          	lbu	a5,-139(a5) # 80045011 <excpt+0x1>
    800070a4:	e7a1                	bnez	a5,800070ec <wfi_exception_tests_8+0xe8>
    800070a6:	4529                	li	a0,10
    800070a8:	258190ef          	jal	80020300 <putchar>
    800070ac:	0003e797          	auipc	a5,0x3e
    800070b0:	f657c783          	lbu	a5,-155(a5) # 80045011 <excpt+0x1>
    800070b4:	e795                	bnez	a5,800070e0 <wfi_exception_tests_8+0xdc>
    800070b6:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    800070b8:	0001c597          	auipc	a1,0x1c
    800070bc:	a7858593          	addi	a1,a1,-1416 # 80022b30 <__func__.2+0x2c8>
    800070c0:	0001c517          	auipc	a0,0x1c
    800070c4:	b2850513          	addi	a0,a0,-1240 # 80022be8 <__func__.2+0x380>
    800070c8:	3a9190ef          	jal	80020c70 <printf>
    800070cc:	4511                	li	a0,4
    800070ce:	a0bf90ef          	jal	80000ad8 <goto_priv>
    800070d2:	ad6fa0ef          	jal	800013a8 <reset_state>
}
    800070d6:	60a2                	ld	ra,8(sp)
    800070d8:	8522                	mv	a0,s0
    800070da:	6402                	ld	s0,0(sp)
    800070dc:	0141                	addi	sp,sp,16
    800070de:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070e0:	4401                	li	s0,0
    TEST_END();
    800070e2:	0001c597          	auipc	a1,0x1c
    800070e6:	a5e58593          	addi	a1,a1,-1442 # 80022b40 <__func__.2+0x2d8>
    800070ea:	bfd9                	j	800070c0 <wfi_exception_tests_8+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070ec:	0001c517          	auipc	a0,0x1c
    800070f0:	a9c50513          	addi	a0,a0,-1380 # 80022b88 <__func__.2+0x320>
    800070f4:	37d190ef          	jal	80020c70 <printf>
    800070f8:	02900513          	li	a0,41
    800070fc:	204190ef          	jal	80020300 <putchar>
    80007100:	b75d                	j	800070a6 <wfi_exception_tests_8+0xa2>

0000000080007102 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    80007102:	1141                	addi	sp,sp,-16

    TEST_START();
    80007104:	0001a597          	auipc	a1,0x1a
    80007108:	4bc58593          	addi	a1,a1,1212 # 800215c0 <__func__.13>
    8000710c:	0001c517          	auipc	a0,0x1c
    80007110:	a4450513          	addi	a0,a0,-1468 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_9() {
    80007114:	e406                	sd	ra,8(sp)
    80007116:	e022                	sd	s0,0(sp)
    TEST_START();
    80007118:	359190ef          	jal	80020c70 <printf>
    8000711c:	4529                	li	a0,10
    8000711e:	1e2190ef          	jal	80020300 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007122:	4511                	li	a0,4
    80007124:	9b5f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007128:	002007b7          	lui	a5,0x200
    8000712c:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80007130:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80007134:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    80007138:	450d                	li	a0,3
    8000713a:	99ff90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000713e:	0330000f          	fence	rw,rw
    80007142:	4785                	li	a5,1
    80007144:	0003e717          	auipc	a4,0x3e
    80007148:	f0073223          	sd	zero,-252(a4) # 80045048 <excpt+0x38>
    8000714c:	0003e717          	auipc	a4,0x3e
    80007150:	ecf71223          	sh	a5,-316(a4) # 80045010 <excpt>
    80007154:	0330000f          	fence	rw,rw
    80007158:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000715c:	08200593          	li	a1,130
    80007160:	0001d617          	auipc	a2,0x1d
    80007164:	f2060613          	addi	a2,a2,-224 # 80024080 <__func__.2+0x1818>
    80007168:	0001c517          	auipc	a0,0x1c
    8000716c:	a0050513          	addi	a0,a0,-1536 # 80022b68 <__func__.2+0x300>
    80007170:	301190ef          	jal	80020c70 <printf>
    80007174:	0003e797          	auipc	a5,0x3e
    80007178:	e9d7c783          	lbu	a5,-355(a5) # 80045011 <excpt+0x1>
    8000717c:	0001c597          	auipc	a1,0x1c
    80007180:	9b458593          	addi	a1,a1,-1612 # 80022b30 <__func__.2+0x2c8>
    80007184:	c789                	beqz	a5,8000718e <wfi_exception_tests_9+0x8c>
    80007186:	0001c597          	auipc	a1,0x1c
    8000718a:	9ba58593          	addi	a1,a1,-1606 # 80022b40 <__func__.2+0x2d8>
    8000718e:	0001c517          	auipc	a0,0x1c
    80007192:	9f250513          	addi	a0,a0,-1550 # 80022b80 <__func__.2+0x318>
    80007196:	2db190ef          	jal	80020c70 <printf>
    8000719a:	0003e797          	auipc	a5,0x3e
    8000719e:	e777c783          	lbu	a5,-393(a5) # 80045011 <excpt+0x1>
    800071a2:	e7a1                	bnez	a5,800071ea <wfi_exception_tests_9+0xe8>
    800071a4:	4529                	li	a0,10
    800071a6:	15a190ef          	jal	80020300 <putchar>
    800071aa:	0003e797          	auipc	a5,0x3e
    800071ae:	e677c783          	lbu	a5,-409(a5) # 80045011 <excpt+0x1>
    800071b2:	e795                	bnez	a5,800071de <wfi_exception_tests_9+0xdc>
    800071b4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800071b6:	0001c597          	auipc	a1,0x1c
    800071ba:	97a58593          	addi	a1,a1,-1670 # 80022b30 <__func__.2+0x2c8>
    800071be:	0001c517          	auipc	a0,0x1c
    800071c2:	a2a50513          	addi	a0,a0,-1494 # 80022be8 <__func__.2+0x380>
    800071c6:	2ab190ef          	jal	80020c70 <printf>
    800071ca:	4511                	li	a0,4
    800071cc:	90df90ef          	jal	80000ad8 <goto_priv>
    800071d0:	9d8fa0ef          	jal	800013a8 <reset_state>
}
    800071d4:	60a2                	ld	ra,8(sp)
    800071d6:	8522                	mv	a0,s0
    800071d8:	6402                	ld	s0,0(sp)
    800071da:	0141                	addi	sp,sp,16
    800071dc:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071de:	4401                	li	s0,0
    TEST_END();
    800071e0:	0001c597          	auipc	a1,0x1c
    800071e4:	96058593          	addi	a1,a1,-1696 # 80022b40 <__func__.2+0x2d8>
    800071e8:	bfd9                	j	800071be <wfi_exception_tests_9+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071ea:	0001c517          	auipc	a0,0x1c
    800071ee:	99e50513          	addi	a0,a0,-1634 # 80022b88 <__func__.2+0x320>
    800071f2:	27f190ef          	jal	80020c70 <printf>
    800071f6:	02900513          	li	a0,41
    800071fa:	106190ef          	jal	80020300 <putchar>
    800071fe:	b75d                	j	800071a4 <wfi_exception_tests_9+0xa2>

0000000080007200 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    80007200:	1141                	addi	sp,sp,-16

    TEST_START();
    80007202:	0001a597          	auipc	a1,0x1a
    80007206:	3d658593          	addi	a1,a1,982 # 800215d8 <__func__.12>
    8000720a:	0001c517          	auipc	a0,0x1c
    8000720e:	94650513          	addi	a0,a0,-1722 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_10() {
    80007212:	e406                	sd	ra,8(sp)
    80007214:	e022                	sd	s0,0(sp)
    TEST_START();
    80007216:	25b190ef          	jal	80020c70 <printf>
    8000721a:	4529                	li	a0,10
    8000721c:	0e4190ef          	jal	80020300 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007220:	4511                	li	a0,4
    80007222:	8b7f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007226:	002007b7          	lui	a5,0x200
    8000722a:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    8000722e:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    80007232:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    80007236:	4511                	li	a0,4
    80007238:	8a1f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000723c:	0330000f          	fence	rw,rw
    80007240:	4785                	li	a5,1
    80007242:	0003e717          	auipc	a4,0x3e
    80007246:	e0073323          	sd	zero,-506(a4) # 80045048 <excpt+0x38>
    8000724a:	0003e717          	auipc	a4,0x3e
    8000724e:	dcf71323          	sh	a5,-570(a4) # 80045010 <excpt>
    80007252:	0330000f          	fence	rw,rw
    80007256:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000725a:	08200593          	li	a1,130
    8000725e:	0001d617          	auipc	a2,0x1d
    80007262:	e6a60613          	addi	a2,a2,-406 # 800240c8 <__func__.2+0x1860>
    80007266:	0001c517          	auipc	a0,0x1c
    8000726a:	90250513          	addi	a0,a0,-1790 # 80022b68 <__func__.2+0x300>
    8000726e:	203190ef          	jal	80020c70 <printf>
    80007272:	0003e797          	auipc	a5,0x3e
    80007276:	d9f7c783          	lbu	a5,-609(a5) # 80045011 <excpt+0x1>
    8000727a:	0001c597          	auipc	a1,0x1c
    8000727e:	8b658593          	addi	a1,a1,-1866 # 80022b30 <__func__.2+0x2c8>
    80007282:	c789                	beqz	a5,8000728c <wfi_exception_tests_10+0x8c>
    80007284:	0001c597          	auipc	a1,0x1c
    80007288:	8bc58593          	addi	a1,a1,-1860 # 80022b40 <__func__.2+0x2d8>
    8000728c:	0001c517          	auipc	a0,0x1c
    80007290:	8f450513          	addi	a0,a0,-1804 # 80022b80 <__func__.2+0x318>
    80007294:	1dd190ef          	jal	80020c70 <printf>
    80007298:	0003e797          	auipc	a5,0x3e
    8000729c:	d797c783          	lbu	a5,-647(a5) # 80045011 <excpt+0x1>
    800072a0:	e7a1                	bnez	a5,800072e8 <wfi_exception_tests_10+0xe8>
    800072a2:	4529                	li	a0,10
    800072a4:	05c190ef          	jal	80020300 <putchar>
    800072a8:	0003e797          	auipc	a5,0x3e
    800072ac:	d697c783          	lbu	a5,-663(a5) # 80045011 <excpt+0x1>
    800072b0:	e795                	bnez	a5,800072dc <wfi_exception_tests_10+0xdc>
    800072b2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800072b4:	0001c597          	auipc	a1,0x1c
    800072b8:	87c58593          	addi	a1,a1,-1924 # 80022b30 <__func__.2+0x2c8>
    800072bc:	0001c517          	auipc	a0,0x1c
    800072c0:	92c50513          	addi	a0,a0,-1748 # 80022be8 <__func__.2+0x380>
    800072c4:	1ad190ef          	jal	80020c70 <printf>
    800072c8:	4511                	li	a0,4
    800072ca:	80ff90ef          	jal	80000ad8 <goto_priv>
    800072ce:	8dafa0ef          	jal	800013a8 <reset_state>
}
    800072d2:	60a2                	ld	ra,8(sp)
    800072d4:	8522                	mv	a0,s0
    800072d6:	6402                	ld	s0,0(sp)
    800072d8:	0141                	addi	sp,sp,16
    800072da:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800072dc:	4401                	li	s0,0
    TEST_END();
    800072de:	0001c597          	auipc	a1,0x1c
    800072e2:	86258593          	addi	a1,a1,-1950 # 80022b40 <__func__.2+0x2d8>
    800072e6:	bfd9                	j	800072bc <wfi_exception_tests_10+0xbc>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800072e8:	0001c517          	auipc	a0,0x1c
    800072ec:	8a050513          	addi	a0,a0,-1888 # 80022b88 <__func__.2+0x320>
    800072f0:	181190ef          	jal	80020c70 <printf>
    800072f4:	02900513          	li	a0,41
    800072f8:	008190ef          	jal	80020300 <putchar>
    800072fc:	b75d                	j	800072a2 <wfi_exception_tests_10+0xa2>

00000000800072fe <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    800072fe:	1141                	addi	sp,sp,-16

    TEST_START();
    80007300:	0001a597          	auipc	a1,0x1a
    80007304:	2f058593          	addi	a1,a1,752 # 800215f0 <__func__.11>
    80007308:	0001c517          	auipc	a0,0x1c
    8000730c:	84850513          	addi	a0,a0,-1976 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_11() {
    80007310:	e406                	sd	ra,8(sp)
    80007312:	e022                	sd	s0,0(sp)
    TEST_START();
    80007314:	15d190ef          	jal	80020c70 <printf>
    80007318:	4529                	li	a0,10
    8000731a:	7e7180ef          	jal	80020300 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    8000731e:	4511                	li	a0,4
    80007320:	fb8f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007324:	002007b7          	lui	a5,0x200
    80007328:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    8000732c:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    80007330:	57fd                	li	a5,-1
    80007332:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80007336:	4509                	li	a0,2
    80007338:	fa0f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000733c:	0330000f          	fence	rw,rw
    80007340:	4785                	li	a5,1
    80007342:	0003e717          	auipc	a4,0x3e
    80007346:	d0073323          	sd	zero,-762(a4) # 80045048 <excpt+0x38>
    8000734a:	0003e717          	auipc	a4,0x3e
    8000734e:	ccf71323          	sh	a5,-826(a4) # 80045010 <excpt>
    80007352:	0330000f          	fence	rw,rw
    80007356:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000735a:	08200593          	li	a1,130
    8000735e:	0001d617          	auipc	a2,0x1d
    80007362:	db260613          	addi	a2,a2,-590 # 80024110 <__func__.2+0x18a8>
    80007366:	0001c517          	auipc	a0,0x1c
    8000736a:	80250513          	addi	a0,a0,-2046 # 80022b68 <__func__.2+0x300>
    8000736e:	103190ef          	jal	80020c70 <printf>
    80007372:	0003e797          	auipc	a5,0x3e
    80007376:	c9f7c783          	lbu	a5,-865(a5) # 80045011 <excpt+0x1>
    8000737a:	0001b597          	auipc	a1,0x1b
    8000737e:	7b658593          	addi	a1,a1,1974 # 80022b30 <__func__.2+0x2c8>
    80007382:	c789                	beqz	a5,8000738c <wfi_exception_tests_11+0x8e>
    80007384:	0001b597          	auipc	a1,0x1b
    80007388:	7bc58593          	addi	a1,a1,1980 # 80022b40 <__func__.2+0x2d8>
    8000738c:	0001b517          	auipc	a0,0x1b
    80007390:	7f450513          	addi	a0,a0,2036 # 80022b80 <__func__.2+0x318>
    80007394:	0dd190ef          	jal	80020c70 <printf>
    80007398:	0003e797          	auipc	a5,0x3e
    8000739c:	c797c783          	lbu	a5,-903(a5) # 80045011 <excpt+0x1>
    800073a0:	e7a1                	bnez	a5,800073e8 <wfi_exception_tests_11+0xea>
    800073a2:	4529                	li	a0,10
    800073a4:	75d180ef          	jal	80020300 <putchar>
    800073a8:	0003e797          	auipc	a5,0x3e
    800073ac:	c697c783          	lbu	a5,-919(a5) # 80045011 <excpt+0x1>
    800073b0:	e795                	bnez	a5,800073dc <wfi_exception_tests_11+0xde>
    800073b2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800073b4:	0001b597          	auipc	a1,0x1b
    800073b8:	77c58593          	addi	a1,a1,1916 # 80022b30 <__func__.2+0x2c8>
    800073bc:	0001c517          	auipc	a0,0x1c
    800073c0:	82c50513          	addi	a0,a0,-2004 # 80022be8 <__func__.2+0x380>
    800073c4:	0ad190ef          	jal	80020c70 <printf>
    800073c8:	4511                	li	a0,4
    800073ca:	f0ef90ef          	jal	80000ad8 <goto_priv>
    800073ce:	fdbf90ef          	jal	800013a8 <reset_state>
}
    800073d2:	60a2                	ld	ra,8(sp)
    800073d4:	8522                	mv	a0,s0
    800073d6:	6402                	ld	s0,0(sp)
    800073d8:	0141                	addi	sp,sp,16
    800073da:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073dc:	4401                	li	s0,0
    TEST_END();
    800073de:	0001b597          	auipc	a1,0x1b
    800073e2:	76258593          	addi	a1,a1,1890 # 80022b40 <__func__.2+0x2d8>
    800073e6:	bfd9                	j	800073bc <wfi_exception_tests_11+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073e8:	0001b517          	auipc	a0,0x1b
    800073ec:	7a050513          	addi	a0,a0,1952 # 80022b88 <__func__.2+0x320>
    800073f0:	081190ef          	jal	80020c70 <printf>
    800073f4:	02900513          	li	a0,41
    800073f8:	709180ef          	jal	80020300 <putchar>
    800073fc:	b75d                	j	800073a2 <wfi_exception_tests_11+0xa4>

00000000800073fe <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    800073fe:	1141                	addi	sp,sp,-16

    TEST_START();
    80007400:	0001a597          	auipc	a1,0x1a
    80007404:	20858593          	addi	a1,a1,520 # 80021608 <__func__.10>
    80007408:	0001b517          	auipc	a0,0x1b
    8000740c:	74850513          	addi	a0,a0,1864 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_12() {
    80007410:	e406                	sd	ra,8(sp)
    80007412:	e022                	sd	s0,0(sp)
    TEST_START();
    80007414:	05d190ef          	jal	80020c70 <printf>
    80007418:	4529                	li	a0,10
    8000741a:	6e7180ef          	jal	80020300 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000741e:	4511                	li	a0,4
    80007420:	eb8f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007424:	002007b7          	lui	a5,0x200
    80007428:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    8000742c:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    80007430:	57fd                	li	a5,-1
    80007432:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    80007436:	450d                	li	a0,3
    80007438:	ea0f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000743c:	0330000f          	fence	rw,rw
    80007440:	4785                	li	a5,1
    80007442:	0003e717          	auipc	a4,0x3e
    80007446:	c0073323          	sd	zero,-1018(a4) # 80045048 <excpt+0x38>
    8000744a:	0003e717          	auipc	a4,0x3e
    8000744e:	bcf71323          	sh	a5,-1082(a4) # 80045010 <excpt>
    80007452:	0330000f          	fence	rw,rw
    80007456:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000745a:	08200593          	li	a1,130
    8000745e:	0001d617          	auipc	a2,0x1d
    80007462:	cb260613          	addi	a2,a2,-846 # 80024110 <__func__.2+0x18a8>
    80007466:	0001b517          	auipc	a0,0x1b
    8000746a:	70250513          	addi	a0,a0,1794 # 80022b68 <__func__.2+0x300>
    8000746e:	003190ef          	jal	80020c70 <printf>
    80007472:	0003e797          	auipc	a5,0x3e
    80007476:	b9f7c783          	lbu	a5,-1121(a5) # 80045011 <excpt+0x1>
    8000747a:	0001b597          	auipc	a1,0x1b
    8000747e:	6b658593          	addi	a1,a1,1718 # 80022b30 <__func__.2+0x2c8>
    80007482:	c789                	beqz	a5,8000748c <wfi_exception_tests_12+0x8e>
    80007484:	0001b597          	auipc	a1,0x1b
    80007488:	6bc58593          	addi	a1,a1,1724 # 80022b40 <__func__.2+0x2d8>
    8000748c:	0001b517          	auipc	a0,0x1b
    80007490:	6f450513          	addi	a0,a0,1780 # 80022b80 <__func__.2+0x318>
    80007494:	7dc190ef          	jal	80020c70 <printf>
    80007498:	0003e797          	auipc	a5,0x3e
    8000749c:	b797c783          	lbu	a5,-1159(a5) # 80045011 <excpt+0x1>
    800074a0:	e7a1                	bnez	a5,800074e8 <wfi_exception_tests_12+0xea>
    800074a2:	4529                	li	a0,10
    800074a4:	65d180ef          	jal	80020300 <putchar>
    800074a8:	0003e797          	auipc	a5,0x3e
    800074ac:	b697c783          	lbu	a5,-1175(a5) # 80045011 <excpt+0x1>
    800074b0:	e795                	bnez	a5,800074dc <wfi_exception_tests_12+0xde>
    800074b2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800074b4:	0001b597          	auipc	a1,0x1b
    800074b8:	67c58593          	addi	a1,a1,1660 # 80022b30 <__func__.2+0x2c8>
    800074bc:	0001b517          	auipc	a0,0x1b
    800074c0:	72c50513          	addi	a0,a0,1836 # 80022be8 <__func__.2+0x380>
    800074c4:	7ac190ef          	jal	80020c70 <printf>
    800074c8:	4511                	li	a0,4
    800074ca:	e0ef90ef          	jal	80000ad8 <goto_priv>
    800074ce:	edbf90ef          	jal	800013a8 <reset_state>
}
    800074d2:	60a2                	ld	ra,8(sp)
    800074d4:	8522                	mv	a0,s0
    800074d6:	6402                	ld	s0,0(sp)
    800074d8:	0141                	addi	sp,sp,16
    800074da:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800074dc:	4401                	li	s0,0
    TEST_END();
    800074de:	0001b597          	auipc	a1,0x1b
    800074e2:	66258593          	addi	a1,a1,1634 # 80022b40 <__func__.2+0x2d8>
    800074e6:	bfd9                	j	800074bc <wfi_exception_tests_12+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800074e8:	0001b517          	auipc	a0,0x1b
    800074ec:	6a050513          	addi	a0,a0,1696 # 80022b88 <__func__.2+0x320>
    800074f0:	780190ef          	jal	80020c70 <printf>
    800074f4:	02900513          	li	a0,41
    800074f8:	609180ef          	jal	80020300 <putchar>
    800074fc:	b75d                	j	800074a2 <wfi_exception_tests_12+0xa4>

00000000800074fe <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    800074fe:	1141                	addi	sp,sp,-16

    TEST_START();
    80007500:	0001a597          	auipc	a1,0x1a
    80007504:	12058593          	addi	a1,a1,288 # 80021620 <__func__.9>
    80007508:	0001b517          	auipc	a0,0x1b
    8000750c:	64850513          	addi	a0,a0,1608 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_13() {
    80007510:	e406                	sd	ra,8(sp)
    80007512:	e022                	sd	s0,0(sp)
    TEST_START();
    80007514:	75c190ef          	jal	80020c70 <printf>
    80007518:	4529                	li	a0,10
    8000751a:	5e7180ef          	jal	80020300 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000751e:	4511                	li	a0,4
    80007520:	db8f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007524:	002007b7          	lui	a5,0x200
    80007528:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    8000752c:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80007530:	57fd                	li	a5,-1
    80007532:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    80007536:	4511                	li	a0,4
    80007538:	da0f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000753c:	0330000f          	fence	rw,rw
    80007540:	4785                	li	a5,1
    80007542:	0003e717          	auipc	a4,0x3e
    80007546:	b0073323          	sd	zero,-1274(a4) # 80045048 <excpt+0x38>
    8000754a:	0003e717          	auipc	a4,0x3e
    8000754e:	acf71323          	sh	a5,-1338(a4) # 80045010 <excpt>
    80007552:	0330000f          	fence	rw,rw
    80007556:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000755a:	08200593          	li	a1,130
    8000755e:	0001d617          	auipc	a2,0x1d
    80007562:	bfa60613          	addi	a2,a2,-1030 # 80024158 <__func__.2+0x18f0>
    80007566:	0001b517          	auipc	a0,0x1b
    8000756a:	60250513          	addi	a0,a0,1538 # 80022b68 <__func__.2+0x300>
    8000756e:	702190ef          	jal	80020c70 <printf>
    80007572:	0003e797          	auipc	a5,0x3e
    80007576:	a9f7c783          	lbu	a5,-1377(a5) # 80045011 <excpt+0x1>
    8000757a:	0001b597          	auipc	a1,0x1b
    8000757e:	5b658593          	addi	a1,a1,1462 # 80022b30 <__func__.2+0x2c8>
    80007582:	c789                	beqz	a5,8000758c <wfi_exception_tests_13+0x8e>
    80007584:	0001b597          	auipc	a1,0x1b
    80007588:	5bc58593          	addi	a1,a1,1468 # 80022b40 <__func__.2+0x2d8>
    8000758c:	0001b517          	auipc	a0,0x1b
    80007590:	5f450513          	addi	a0,a0,1524 # 80022b80 <__func__.2+0x318>
    80007594:	6dc190ef          	jal	80020c70 <printf>
    80007598:	0003e797          	auipc	a5,0x3e
    8000759c:	a797c783          	lbu	a5,-1415(a5) # 80045011 <excpt+0x1>
    800075a0:	e7a1                	bnez	a5,800075e8 <wfi_exception_tests_13+0xea>
    800075a2:	4529                	li	a0,10
    800075a4:	55d180ef          	jal	80020300 <putchar>
    800075a8:	0003e797          	auipc	a5,0x3e
    800075ac:	a697c783          	lbu	a5,-1431(a5) # 80045011 <excpt+0x1>
    800075b0:	e795                	bnez	a5,800075dc <wfi_exception_tests_13+0xde>
    800075b2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800075b4:	0001b597          	auipc	a1,0x1b
    800075b8:	57c58593          	addi	a1,a1,1404 # 80022b30 <__func__.2+0x2c8>
    800075bc:	0001b517          	auipc	a0,0x1b
    800075c0:	62c50513          	addi	a0,a0,1580 # 80022be8 <__func__.2+0x380>
    800075c4:	6ac190ef          	jal	80020c70 <printf>
    800075c8:	4511                	li	a0,4
    800075ca:	d0ef90ef          	jal	80000ad8 <goto_priv>
    800075ce:	ddbf90ef          	jal	800013a8 <reset_state>
}
    800075d2:	60a2                	ld	ra,8(sp)
    800075d4:	8522                	mv	a0,s0
    800075d6:	6402                	ld	s0,0(sp)
    800075d8:	0141                	addi	sp,sp,16
    800075da:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800075dc:	4401                	li	s0,0
    TEST_END();
    800075de:	0001b597          	auipc	a1,0x1b
    800075e2:	56258593          	addi	a1,a1,1378 # 80022b40 <__func__.2+0x2d8>
    800075e6:	bfd9                	j	800075bc <wfi_exception_tests_13+0xbe>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800075e8:	0001b517          	auipc	a0,0x1b
    800075ec:	5a050513          	addi	a0,a0,1440 # 80022b88 <__func__.2+0x320>
    800075f0:	680190ef          	jal	80020c70 <printf>
    800075f4:	02900513          	li	a0,41
    800075f8:	509180ef          	jal	80020300 <putchar>
    800075fc:	b75d                	j	800075a2 <wfi_exception_tests_13+0xa4>

00000000800075fe <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    800075fe:	1141                	addi	sp,sp,-16

    TEST_START();
    80007600:	0001a597          	auipc	a1,0x1a
    80007604:	03858593          	addi	a1,a1,56 # 80021638 <__func__.8>
    80007608:	0001b517          	auipc	a0,0x1b
    8000760c:	54850513          	addi	a0,a0,1352 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_14() {
    80007610:	e406                	sd	ra,8(sp)
    80007612:	e022                	sd	s0,0(sp)
    TEST_START();
    80007614:	65c190ef          	jal	80020c70 <printf>
    80007618:	4529                	li	a0,10
    8000761a:	4e7180ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8000761e:	4511                	li	a0,4
    80007620:	cb8f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007624:	002007b7          	lui	a5,0x200
    80007628:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    8000762c:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    80007630:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    80007634:	4509                	li	a0,2
    80007636:	ca2f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000763a:	0330000f          	fence	rw,rw
    8000763e:	4785                	li	a5,1
    80007640:	0003e717          	auipc	a4,0x3e
    80007644:	a0073423          	sd	zero,-1528(a4) # 80045048 <excpt+0x38>
    80007648:	0003e717          	auipc	a4,0x3e
    8000764c:	9cf71423          	sh	a5,-1592(a4) # 80045010 <excpt>
    80007650:	0330000f          	fence	rw,rw
    80007654:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007658:	08200593          	li	a1,130
    8000765c:	0001d617          	auipc	a2,0x1d
    80007660:	9bc60613          	addi	a2,a2,-1604 # 80024018 <__func__.2+0x17b0>
    80007664:	0001b517          	auipc	a0,0x1b
    80007668:	50450513          	addi	a0,a0,1284 # 80022b68 <__func__.2+0x300>
    8000766c:	604190ef          	jal	80020c70 <printf>
    80007670:	0003e797          	auipc	a5,0x3e
    80007674:	9a17c783          	lbu	a5,-1631(a5) # 80045011 <excpt+0x1>
    80007678:	0001b597          	auipc	a1,0x1b
    8000767c:	4b858593          	addi	a1,a1,1208 # 80022b30 <__func__.2+0x2c8>
    80007680:	c789                	beqz	a5,8000768a <wfi_exception_tests_14+0x8c>
    80007682:	0001b597          	auipc	a1,0x1b
    80007686:	4be58593          	addi	a1,a1,1214 # 80022b40 <__func__.2+0x2d8>
    8000768a:	0001b517          	auipc	a0,0x1b
    8000768e:	4f650513          	addi	a0,a0,1270 # 80022b80 <__func__.2+0x318>
    80007692:	5de190ef          	jal	80020c70 <printf>
    80007696:	0003e797          	auipc	a5,0x3e
    8000769a:	97b7c783          	lbu	a5,-1669(a5) # 80045011 <excpt+0x1>
    8000769e:	e7a1                	bnez	a5,800076e6 <wfi_exception_tests_14+0xe8>
    800076a0:	4529                	li	a0,10
    800076a2:	45f180ef          	jal	80020300 <putchar>
    800076a6:	0003e797          	auipc	a5,0x3e
    800076aa:	96b7c783          	lbu	a5,-1685(a5) # 80045011 <excpt+0x1>
    800076ae:	e795                	bnez	a5,800076da <wfi_exception_tests_14+0xdc>
    800076b0:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    800076b2:	0001b597          	auipc	a1,0x1b
    800076b6:	47e58593          	addi	a1,a1,1150 # 80022b30 <__func__.2+0x2c8>
    800076ba:	0001b517          	auipc	a0,0x1b
    800076be:	52e50513          	addi	a0,a0,1326 # 80022be8 <__func__.2+0x380>
    800076c2:	5ae190ef          	jal	80020c70 <printf>
    800076c6:	4511                	li	a0,4
    800076c8:	c10f90ef          	jal	80000ad8 <goto_priv>
    800076cc:	cddf90ef          	jal	800013a8 <reset_state>
}
    800076d0:	60a2                	ld	ra,8(sp)
    800076d2:	8522                	mv	a0,s0
    800076d4:	6402                	ld	s0,0(sp)
    800076d6:	0141                	addi	sp,sp,16
    800076d8:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800076da:	4401                	li	s0,0
    TEST_END();
    800076dc:	0001b597          	auipc	a1,0x1b
    800076e0:	46458593          	addi	a1,a1,1124 # 80022b40 <__func__.2+0x2d8>
    800076e4:	bfd9                	j	800076ba <wfi_exception_tests_14+0xbc>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800076e6:	0001b517          	auipc	a0,0x1b
    800076ea:	4a250513          	addi	a0,a0,1186 # 80022b88 <__func__.2+0x320>
    800076ee:	582190ef          	jal	80020c70 <printf>
    800076f2:	02900513          	li	a0,41
    800076f6:	40b180ef          	jal	80020300 <putchar>
    800076fa:	b75d                	j	800076a0 <wfi_exception_tests_14+0xa2>

00000000800076fc <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    800076fc:	1101                	addi	sp,sp,-32

    TEST_START();
    800076fe:	0001a597          	auipc	a1,0x1a
    80007702:	f5258593          	addi	a1,a1,-174 # 80021650 <__func__.7>
    80007706:	0001b517          	auipc	a0,0x1b
    8000770a:	44a50513          	addi	a0,a0,1098 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_15() {
    8000770e:	ec06                	sd	ra,24(sp)
    80007710:	e822                	sd	s0,16(sp)
    80007712:	e426                	sd	s1,8(sp)
    TEST_START();
    80007714:	55c190ef          	jal	80020c70 <printf>
    80007718:	4529                	li	a0,10
    8000771a:	3e7180ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8000771e:	4511                	li	a0,4
    80007720:	bb8f90ef          	jal	80000ad8 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    80007724:	002007b7          	lui	a5,0x200
    80007728:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8000772c:	450d                	li	a0,3
    8000772e:	baaf90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007732:	0330000f          	fence	rw,rw
    80007736:	0003e417          	auipc	s0,0x3e
    8000773a:	8da40413          	addi	s0,s0,-1830 # 80045010 <excpt>
    8000773e:	4785                	li	a5,1
    80007740:	0003e717          	auipc	a4,0x3e
    80007744:	90073423          	sd	zero,-1784(a4) # 80045048 <excpt+0x38>
    80007748:	00f41023          	sh	a5,0(s0)
    8000774c:	0330000f          	fence	rw,rw
    80007750:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007754:	08200593          	li	a1,130
    80007758:	0001d617          	auipc	a2,0x1d
    8000775c:	a4860613          	addi	a2,a2,-1464 # 800241a0 <__func__.2+0x1938>
    80007760:	0001b517          	auipc	a0,0x1b
    80007764:	40850513          	addi	a0,a0,1032 # 80022b68 <__func__.2+0x300>
    80007768:	508190ef          	jal	80020c70 <printf>
    8000776c:	0003e797          	auipc	a5,0x3e
    80007770:	8a57c783          	lbu	a5,-1883(a5) # 80045011 <excpt+0x1>
    80007774:	0001b597          	auipc	a1,0x1b
    80007778:	3cc58593          	addi	a1,a1,972 # 80022b40 <__func__.2+0x2d8>
    8000777c:	cf89                	beqz	a5,80007796 <wfi_exception_tests_15+0x9a>
    8000777e:	6418                	ld	a4,8(s0)
    80007780:	4789                	li	a5,2
    80007782:	0001b597          	auipc	a1,0x1b
    80007786:	3ae58593          	addi	a1,a1,942 # 80022b30 <__func__.2+0x2c8>
    8000778a:	00f70663          	beq	a4,a5,80007796 <wfi_exception_tests_15+0x9a>
    8000778e:	0001b597          	auipc	a1,0x1b
    80007792:	3b258593          	addi	a1,a1,946 # 80022b40 <__func__.2+0x2d8>
    80007796:	0001b517          	auipc	a0,0x1b
    8000779a:	3ea50513          	addi	a0,a0,1002 # 80022b80 <__func__.2+0x318>
    8000779e:	4d2190ef          	jal	80020c70 <printf>
    800077a2:	0003e797          	auipc	a5,0x3e
    800077a6:	86f7c783          	lbu	a5,-1937(a5) # 80045011 <excpt+0x1>
    800077aa:	c789                	beqz	a5,800077b4 <wfi_exception_tests_15+0xb8>
    800077ac:	6418                	ld	a4,8(s0)
    800077ae:	4789                	li	a5,2
    800077b0:	00f70c63          	beq	a4,a5,800077c8 <wfi_exception_tests_15+0xcc>
    800077b4:	0001b517          	auipc	a0,0x1b
    800077b8:	3d450513          	addi	a0,a0,980 # 80022b88 <__func__.2+0x320>
    800077bc:	4b4190ef          	jal	80020c70 <printf>
    800077c0:	02900513          	li	a0,41
    800077c4:	33d180ef          	jal	80020300 <putchar>
    800077c8:	4529                	li	a0,10
    800077ca:	337180ef          	jal	80020300 <putchar>
    800077ce:	0003e497          	auipc	s1,0x3e
    800077d2:	8434c483          	lbu	s1,-1981(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800077d6:	0001b597          	auipc	a1,0x1b
    800077da:	36a58593          	addi	a1,a1,874 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800077de:	cc91                	beqz	s1,800077fa <wfi_exception_tests_15+0xfe>
    800077e0:	6418                	ld	a4,8(s0)
    800077e2:	4789                	li	a5,2
    TEST_END();
    800077e4:	0001b597          	auipc	a1,0x1b
    800077e8:	34c58593          	addi	a1,a1,844 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800077ec:	00f70763          	beq	a4,a5,800077fa <wfi_exception_tests_15+0xfe>
    800077f0:	4481                	li	s1,0
    TEST_END();
    800077f2:	0001b597          	auipc	a1,0x1b
    800077f6:	34e58593          	addi	a1,a1,846 # 80022b40 <__func__.2+0x2d8>
    800077fa:	0001b517          	auipc	a0,0x1b
    800077fe:	3ee50513          	addi	a0,a0,1006 # 80022be8 <__func__.2+0x380>
    80007802:	46e190ef          	jal	80020c70 <printf>
    80007806:	4511                	li	a0,4
    80007808:	ad0f90ef          	jal	80000ad8 <goto_priv>
    8000780c:	b9df90ef          	jal	800013a8 <reset_state>
}
    80007810:	60e2                	ld	ra,24(sp)
    80007812:	6442                	ld	s0,16(sp)
    80007814:	8526                	mv	a0,s1
    80007816:	64a2                	ld	s1,8(sp)
    80007818:	6105                	addi	sp,sp,32
    8000781a:	8082                	ret

000000008000781c <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    8000781c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000781e:	0001a597          	auipc	a1,0x1a
    80007822:	e4a58593          	addi	a1,a1,-438 # 80021668 <__func__.6>
    80007826:	0001b517          	auipc	a0,0x1b
    8000782a:	32a50513          	addi	a0,a0,810 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_16() {
    8000782e:	ec06                	sd	ra,24(sp)
    80007830:	e822                	sd	s0,16(sp)
    80007832:	e426                	sd	s1,8(sp)
    TEST_START();
    80007834:	43c190ef          	jal	80020c70 <printf>
    80007838:	4529                	li	a0,10
    8000783a:	2c7180ef          	jal	80020300 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    8000783e:	002007b7          	lui	a5,0x200
    80007842:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80007846:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    8000784a:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    8000784e:	4509                	li	a0,2
    80007850:	a88f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007854:	0330000f          	fence	rw,rw
    80007858:	0003d497          	auipc	s1,0x3d
    8000785c:	7b848493          	addi	s1,s1,1976 # 80045010 <excpt>
    80007860:	4785                	li	a5,1
    80007862:	0003d717          	auipc	a4,0x3d
    80007866:	7e073323          	sd	zero,2022(a4) # 80045048 <excpt+0x38>
    8000786a:	00f49023          	sh	a5,0(s1)
    8000786e:	0330000f          	fence	rw,rw
    80007872:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007876:	08200593          	li	a1,130
    8000787a:	0001d617          	auipc	a2,0x1d
    8000787e:	96e60613          	addi	a2,a2,-1682 # 800241e8 <__func__.2+0x1980>
    80007882:	0001b517          	auipc	a0,0x1b
    80007886:	2e650513          	addi	a0,a0,742 # 80022b68 <__func__.2+0x300>
    8000788a:	3e6190ef          	jal	80020c70 <printf>
    8000788e:	0003d797          	auipc	a5,0x3d
    80007892:	7837c783          	lbu	a5,1923(a5) # 80045011 <excpt+0x1>
    80007896:	0001b597          	auipc	a1,0x1b
    8000789a:	2aa58593          	addi	a1,a1,682 # 80022b40 <__func__.2+0x2d8>
    8000789e:	cf89                	beqz	a5,800078b8 <wfi_exception_tests_16+0x9c>
    800078a0:	6498                	ld	a4,8(s1)
    800078a2:	4789                	li	a5,2
    800078a4:	0001b597          	auipc	a1,0x1b
    800078a8:	28c58593          	addi	a1,a1,652 # 80022b30 <__func__.2+0x2c8>
    800078ac:	00f70663          	beq	a4,a5,800078b8 <wfi_exception_tests_16+0x9c>
    800078b0:	0001b597          	auipc	a1,0x1b
    800078b4:	29058593          	addi	a1,a1,656 # 80022b40 <__func__.2+0x2d8>
    800078b8:	0001b517          	auipc	a0,0x1b
    800078bc:	2c850513          	addi	a0,a0,712 # 80022b80 <__func__.2+0x318>
    800078c0:	3b0190ef          	jal	80020c70 <printf>
    800078c4:	0003d797          	auipc	a5,0x3d
    800078c8:	74d7c783          	lbu	a5,1869(a5) # 80045011 <excpt+0x1>
    800078cc:	c789                	beqz	a5,800078d6 <wfi_exception_tests_16+0xba>
    800078ce:	6498                	ld	a4,8(s1)
    800078d0:	4789                	li	a5,2
    800078d2:	00f70c63          	beq	a4,a5,800078ea <wfi_exception_tests_16+0xce>
    800078d6:	0001b517          	auipc	a0,0x1b
    800078da:	2b250513          	addi	a0,a0,690 # 80022b88 <__func__.2+0x320>
    800078de:	392190ef          	jal	80020c70 <printf>
    800078e2:	02900513          	li	a0,41
    800078e6:	21b180ef          	jal	80020300 <putchar>
    800078ea:	4529                	li	a0,10
    800078ec:	215180ef          	jal	80020300 <putchar>
    800078f0:	0003d417          	auipc	s0,0x3d
    800078f4:	72144403          	lbu	s0,1825(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    800078f8:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800078fa:	c409                	beqz	s0,80007904 <wfi_exception_tests_16+0xe8>
    800078fc:	6498                	ld	a4,8(s1)
    800078fe:	4789                	li	a5,2
    80007900:	02f70e63          	beq	a4,a5,8000793c <wfi_exception_tests_16+0x120>
    goto_priv(PRIV_M);
    80007904:	9d4f90ef          	jal	80000ad8 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007908:	002007b7          	lui	a5,0x200
    8000790c:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007910:	4401                	li	s0,0
    TEST_END();
    80007912:	0001b597          	auipc	a1,0x1b
    80007916:	22e58593          	addi	a1,a1,558 # 80022b40 <__func__.2+0x2d8>
    8000791a:	0001b517          	auipc	a0,0x1b
    8000791e:	2ce50513          	addi	a0,a0,718 # 80022be8 <__func__.2+0x380>
    80007922:	34e190ef          	jal	80020c70 <printf>
    80007926:	4511                	li	a0,4
    80007928:	9b0f90ef          	jal	80000ad8 <goto_priv>
    8000792c:	a7df90ef          	jal	800013a8 <reset_state>
}
    80007930:	60e2                	ld	ra,24(sp)
    80007932:	8522                	mv	a0,s0
    80007934:	6442                	ld	s0,16(sp)
    80007936:	64a2                	ld	s1,8(sp)
    80007938:	6105                	addi	sp,sp,32
    8000793a:	8082                	ret
    goto_priv(PRIV_M);
    8000793c:	99cf90ef          	jal	80000ad8 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007940:	002007b7          	lui	a5,0x200
    80007944:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80007948:	0001b597          	auipc	a1,0x1b
    8000794c:	1e858593          	addi	a1,a1,488 # 80022b30 <__func__.2+0x2c8>
    80007950:	b7e9                	j	8000791a <wfi_exception_tests_16+0xfe>

0000000080007952 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007952:	1141                	addi	sp,sp,-16

    TEST_START();
    80007954:	0001a597          	auipc	a1,0x1a
    80007958:	d2c58593          	addi	a1,a1,-724 # 80021680 <__func__.5>
    8000795c:	0001b517          	auipc	a0,0x1b
    80007960:	1f450513          	addi	a0,a0,500 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_17() {
    80007964:	e406                	sd	ra,8(sp)
    80007966:	e022                	sd	s0,0(sp)
    TEST_START();
    80007968:	308190ef          	jal	80020c70 <printf>
    8000796c:	4529                	li	a0,10
    8000796e:	193180ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80007972:	4511                	li	a0,4
    80007974:	964f90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007978:	002007b7          	lui	a5,0x200
    8000797c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007980:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80007984:	4509                	li	a0,2
    80007986:	952f90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000798a:	0330000f          	fence	rw,rw
    8000798e:	4785                	li	a5,1
    80007990:	0003d717          	auipc	a4,0x3d
    80007994:	6a073c23          	sd	zero,1720(a4) # 80045048 <excpt+0x38>
    80007998:	0003d717          	auipc	a4,0x3d
    8000799c:	66f71c23          	sh	a5,1656(a4) # 80045010 <excpt>
    800079a0:	0330000f          	fence	rw,rw
    800079a4:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800079a8:	08200593          	li	a1,130
    800079ac:	0001d617          	auipc	a2,0x1d
    800079b0:	88460613          	addi	a2,a2,-1916 # 80024230 <__func__.2+0x19c8>
    800079b4:	0001b517          	auipc	a0,0x1b
    800079b8:	1b450513          	addi	a0,a0,436 # 80022b68 <__func__.2+0x300>
    800079bc:	2b4190ef          	jal	80020c70 <printf>
    800079c0:	0003d797          	auipc	a5,0x3d
    800079c4:	6517c783          	lbu	a5,1617(a5) # 80045011 <excpt+0x1>
    800079c8:	0001b597          	auipc	a1,0x1b
    800079cc:	16858593          	addi	a1,a1,360 # 80022b30 <__func__.2+0x2c8>
    800079d0:	c789                	beqz	a5,800079da <wfi_exception_tests_17+0x88>
    800079d2:	0001b597          	auipc	a1,0x1b
    800079d6:	16e58593          	addi	a1,a1,366 # 80022b40 <__func__.2+0x2d8>
    800079da:	0001b517          	auipc	a0,0x1b
    800079de:	1a650513          	addi	a0,a0,422 # 80022b80 <__func__.2+0x318>
    800079e2:	28e190ef          	jal	80020c70 <printf>
    800079e6:	0003d797          	auipc	a5,0x3d
    800079ea:	62b7c783          	lbu	a5,1579(a5) # 80045011 <excpt+0x1>
    800079ee:	e7a1                	bnez	a5,80007a36 <wfi_exception_tests_17+0xe4>
    800079f0:	4529                	li	a0,10
    800079f2:	10f180ef          	jal	80020300 <putchar>
    800079f6:	0003d797          	auipc	a5,0x3d
    800079fa:	61b7c783          	lbu	a5,1563(a5) # 80045011 <excpt+0x1>
    800079fe:	e795                	bnez	a5,80007a2a <wfi_exception_tests_17+0xd8>
    80007a00:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007a02:	0001b597          	auipc	a1,0x1b
    80007a06:	12e58593          	addi	a1,a1,302 # 80022b30 <__func__.2+0x2c8>
    80007a0a:	0001b517          	auipc	a0,0x1b
    80007a0e:	1de50513          	addi	a0,a0,478 # 80022be8 <__func__.2+0x380>
    80007a12:	25e190ef          	jal	80020c70 <printf>
    80007a16:	4511                	li	a0,4
    80007a18:	8c0f90ef          	jal	80000ad8 <goto_priv>
    80007a1c:	98df90ef          	jal	800013a8 <reset_state>
}
    80007a20:	60a2                	ld	ra,8(sp)
    80007a22:	8522                	mv	a0,s0
    80007a24:	6402                	ld	s0,0(sp)
    80007a26:	0141                	addi	sp,sp,16
    80007a28:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007a2a:	4401                	li	s0,0
    TEST_END();
    80007a2c:	0001b597          	auipc	a1,0x1b
    80007a30:	11458593          	addi	a1,a1,276 # 80022b40 <__func__.2+0x2d8>
    80007a34:	bfd9                	j	80007a0a <wfi_exception_tests_17+0xb8>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007a36:	0001b517          	auipc	a0,0x1b
    80007a3a:	15250513          	addi	a0,a0,338 # 80022b88 <__func__.2+0x320>
    80007a3e:	232190ef          	jal	80020c70 <printf>
    80007a42:	02900513          	li	a0,41
    80007a46:	0bb180ef          	jal	80020300 <putchar>
    80007a4a:	b75d                	j	800079f0 <wfi_exception_tests_17+0x9e>

0000000080007a4c <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007a4c:	1101                	addi	sp,sp,-32

    TEST_START();
    80007a4e:	0001a597          	auipc	a1,0x1a
    80007a52:	c4a58593          	addi	a1,a1,-950 # 80021698 <__func__.4>
    80007a56:	0001b517          	auipc	a0,0x1b
    80007a5a:	0fa50513          	addi	a0,a0,250 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_18() {
    80007a5e:	ec06                	sd	ra,24(sp)
    80007a60:	e822                	sd	s0,16(sp)
    80007a62:	e426                	sd	s1,8(sp)
    TEST_START();
    80007a64:	20c190ef          	jal	80020c70 <printf>
    80007a68:	4529                	li	a0,10
    80007a6a:	097180ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80007a6e:	4511                	li	a0,4
    80007a70:	868f90ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80007a74:	002007b7          	lui	a5,0x200
    80007a78:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007a7c:	4509                	li	a0,2
    80007a7e:	85af90ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a82:	0330000f          	fence	rw,rw
    80007a86:	0003d417          	auipc	s0,0x3d
    80007a8a:	58a40413          	addi	s0,s0,1418 # 80045010 <excpt>
    80007a8e:	4785                	li	a5,1
    80007a90:	0003d717          	auipc	a4,0x3d
    80007a94:	5a073c23          	sd	zero,1464(a4) # 80045048 <excpt+0x38>
    80007a98:	00f41023          	sh	a5,0(s0)
    80007a9c:	0330000f          	fence	rw,rw
    80007aa0:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007aa4:	08200593          	li	a1,130
    80007aa8:	0001c617          	auipc	a2,0x1c
    80007aac:	7d060613          	addi	a2,a2,2000 # 80024278 <__func__.2+0x1a10>
    80007ab0:	0001b517          	auipc	a0,0x1b
    80007ab4:	0b850513          	addi	a0,a0,184 # 80022b68 <__func__.2+0x300>
    80007ab8:	1b8190ef          	jal	80020c70 <printf>
    80007abc:	0003d797          	auipc	a5,0x3d
    80007ac0:	5557c783          	lbu	a5,1365(a5) # 80045011 <excpt+0x1>
    80007ac4:	0001b597          	auipc	a1,0x1b
    80007ac8:	07c58593          	addi	a1,a1,124 # 80022b40 <__func__.2+0x2d8>
    80007acc:	cf89                	beqz	a5,80007ae6 <wfi_exception_tests_18+0x9a>
    80007ace:	6418                	ld	a4,8(s0)
    80007ad0:	47d9                	li	a5,22
    80007ad2:	0001b597          	auipc	a1,0x1b
    80007ad6:	05e58593          	addi	a1,a1,94 # 80022b30 <__func__.2+0x2c8>
    80007ada:	00f70663          	beq	a4,a5,80007ae6 <wfi_exception_tests_18+0x9a>
    80007ade:	0001b597          	auipc	a1,0x1b
    80007ae2:	06258593          	addi	a1,a1,98 # 80022b40 <__func__.2+0x2d8>
    80007ae6:	0001b517          	auipc	a0,0x1b
    80007aea:	09a50513          	addi	a0,a0,154 # 80022b80 <__func__.2+0x318>
    80007aee:	182190ef          	jal	80020c70 <printf>
    80007af2:	0003d797          	auipc	a5,0x3d
    80007af6:	51f7c783          	lbu	a5,1311(a5) # 80045011 <excpt+0x1>
    80007afa:	c789                	beqz	a5,80007b04 <wfi_exception_tests_18+0xb8>
    80007afc:	6418                	ld	a4,8(s0)
    80007afe:	47d9                	li	a5,22
    80007b00:	00f70c63          	beq	a4,a5,80007b18 <wfi_exception_tests_18+0xcc>
    80007b04:	0001b517          	auipc	a0,0x1b
    80007b08:	08450513          	addi	a0,a0,132 # 80022b88 <__func__.2+0x320>
    80007b0c:	164190ef          	jal	80020c70 <printf>
    80007b10:	02900513          	li	a0,41
    80007b14:	7ec180ef          	jal	80020300 <putchar>
    80007b18:	4529                	li	a0,10
    80007b1a:	7e6180ef          	jal	80020300 <putchar>
    80007b1e:	0003d497          	auipc	s1,0x3d
    80007b22:	4f34c483          	lbu	s1,1267(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007b26:	0001b597          	auipc	a1,0x1b
    80007b2a:	01a58593          	addi	a1,a1,26 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007b2e:	cc91                	beqz	s1,80007b4a <wfi_exception_tests_18+0xfe>
    80007b30:	6418                	ld	a4,8(s0)
    80007b32:	47d9                	li	a5,22
    TEST_END();
    80007b34:	0001b597          	auipc	a1,0x1b
    80007b38:	ffc58593          	addi	a1,a1,-4 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007b3c:	00f70763          	beq	a4,a5,80007b4a <wfi_exception_tests_18+0xfe>
    80007b40:	4481                	li	s1,0
    TEST_END();
    80007b42:	0001b597          	auipc	a1,0x1b
    80007b46:	ffe58593          	addi	a1,a1,-2 # 80022b40 <__func__.2+0x2d8>
    80007b4a:	0001b517          	auipc	a0,0x1b
    80007b4e:	09e50513          	addi	a0,a0,158 # 80022be8 <__func__.2+0x380>
    80007b52:	11e190ef          	jal	80020c70 <printf>
    80007b56:	4511                	li	a0,4
    80007b58:	f81f80ef          	jal	80000ad8 <goto_priv>
    80007b5c:	84df90ef          	jal	800013a8 <reset_state>
}
    80007b60:	60e2                	ld	ra,24(sp)
    80007b62:	6442                	ld	s0,16(sp)
    80007b64:	8526                	mv	a0,s1
    80007b66:	64a2                	ld	s1,8(sp)
    80007b68:	6105                	addi	sp,sp,32
    80007b6a:	8082                	ret

0000000080007b6c <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007b6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80007b6e:	0001a597          	auipc	a1,0x1a
    80007b72:	b4258593          	addi	a1,a1,-1214 # 800216b0 <__func__.3>
    80007b76:	0001b517          	auipc	a0,0x1b
    80007b7a:	fda50513          	addi	a0,a0,-38 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_19() {
    80007b7e:	ec06                	sd	ra,24(sp)
    80007b80:	e822                	sd	s0,16(sp)
    80007b82:	e426                	sd	s1,8(sp)
    TEST_START();
    80007b84:	0ec190ef          	jal	80020c70 <printf>
    80007b88:	4529                	li	a0,10
    80007b8a:	776180ef          	jal	80020300 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007b8e:	4511                	li	a0,4
    80007b90:	f49f80ef          	jal	80000ad8 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007b94:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007b98:	002007b7          	lui	a5,0x200
    80007b9c:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007ba0:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007ba4:	4509                	li	a0,2
    80007ba6:	f33f80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007baa:	0330000f          	fence	rw,rw
    80007bae:	0003d417          	auipc	s0,0x3d
    80007bb2:	46240413          	addi	s0,s0,1122 # 80045010 <excpt>
    80007bb6:	4785                	li	a5,1
    80007bb8:	0003d717          	auipc	a4,0x3d
    80007bbc:	48073823          	sd	zero,1168(a4) # 80045048 <excpt+0x38>
    80007bc0:	00f41023          	sh	a5,0(s0)
    80007bc4:	0330000f          	fence	rw,rw
    80007bc8:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007bcc:	640c                	ld	a1,8(s0)
    80007bce:	0001b517          	auipc	a0,0x1b
    80007bd2:	26250513          	addi	a0,a0,610 # 80022e30 <__func__.2+0x5c8>
    80007bd6:	09a190ef          	jal	80020c70 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007bda:	08200593          	li	a1,130
    80007bde:	0001c617          	auipc	a2,0x1c
    80007be2:	6e260613          	addi	a2,a2,1762 # 800242c0 <__func__.2+0x1a58>
    80007be6:	0001b517          	auipc	a0,0x1b
    80007bea:	f8250513          	addi	a0,a0,-126 # 80022b68 <__func__.2+0x300>
    80007bee:	082190ef          	jal	80020c70 <printf>
    80007bf2:	0003d797          	auipc	a5,0x3d
    80007bf6:	41f7c783          	lbu	a5,1055(a5) # 80045011 <excpt+0x1>
    80007bfa:	0001b597          	auipc	a1,0x1b
    80007bfe:	f4658593          	addi	a1,a1,-186 # 80022b40 <__func__.2+0x2d8>
    80007c02:	cf89                	beqz	a5,80007c1c <wfi_exception_tests_19+0xb0>
    80007c04:	6418                	ld	a4,8(s0)
    80007c06:	47d9                	li	a5,22
    80007c08:	0001b597          	auipc	a1,0x1b
    80007c0c:	f2858593          	addi	a1,a1,-216 # 80022b30 <__func__.2+0x2c8>
    80007c10:	00f70663          	beq	a4,a5,80007c1c <wfi_exception_tests_19+0xb0>
    80007c14:	0001b597          	auipc	a1,0x1b
    80007c18:	f2c58593          	addi	a1,a1,-212 # 80022b40 <__func__.2+0x2d8>
    80007c1c:	0001b517          	auipc	a0,0x1b
    80007c20:	f6450513          	addi	a0,a0,-156 # 80022b80 <__func__.2+0x318>
    80007c24:	04c190ef          	jal	80020c70 <printf>
    80007c28:	0003d797          	auipc	a5,0x3d
    80007c2c:	3e97c783          	lbu	a5,1001(a5) # 80045011 <excpt+0x1>
    80007c30:	c789                	beqz	a5,80007c3a <wfi_exception_tests_19+0xce>
    80007c32:	6418                	ld	a4,8(s0)
    80007c34:	47d9                	li	a5,22
    80007c36:	00f70c63          	beq	a4,a5,80007c4e <wfi_exception_tests_19+0xe2>
    80007c3a:	0001b517          	auipc	a0,0x1b
    80007c3e:	f4e50513          	addi	a0,a0,-178 # 80022b88 <__func__.2+0x320>
    80007c42:	02e190ef          	jal	80020c70 <printf>
    80007c46:	02900513          	li	a0,41
    80007c4a:	6b6180ef          	jal	80020300 <putchar>
    80007c4e:	4529                	li	a0,10
    80007c50:	6b0180ef          	jal	80020300 <putchar>
    80007c54:	0003d497          	auipc	s1,0x3d
    80007c58:	3bd4c483          	lbu	s1,957(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007c5c:	0001b597          	auipc	a1,0x1b
    80007c60:	ee458593          	addi	a1,a1,-284 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007c64:	cc91                	beqz	s1,80007c80 <wfi_exception_tests_19+0x114>
    80007c66:	6418                	ld	a4,8(s0)
    80007c68:	47d9                	li	a5,22
    TEST_END();
    80007c6a:	0001b597          	auipc	a1,0x1b
    80007c6e:	ec658593          	addi	a1,a1,-314 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007c72:	00f70763          	beq	a4,a5,80007c80 <wfi_exception_tests_19+0x114>
    80007c76:	4481                	li	s1,0
    TEST_END();
    80007c78:	0001b597          	auipc	a1,0x1b
    80007c7c:	ec858593          	addi	a1,a1,-312 # 80022b40 <__func__.2+0x2d8>
    80007c80:	0001b517          	auipc	a0,0x1b
    80007c84:	f6850513          	addi	a0,a0,-152 # 80022be8 <__func__.2+0x380>
    80007c88:	7e9180ef          	jal	80020c70 <printf>
    80007c8c:	4511                	li	a0,4
    80007c8e:	e4bf80ef          	jal	80000ad8 <goto_priv>
    80007c92:	f16f90ef          	jal	800013a8 <reset_state>
}
    80007c96:	60e2                	ld	ra,24(sp)
    80007c98:	6442                	ld	s0,16(sp)
    80007c9a:	8526                	mv	a0,s1
    80007c9c:	64a2                	ld	s1,8(sp)
    80007c9e:	6105                	addi	sp,sp,32
    80007ca0:	8082                	ret

0000000080007ca2 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007ca2:	1101                	addi	sp,sp,-32

    TEST_START();
    80007ca4:	0001a597          	auipc	a1,0x1a
    80007ca8:	a2458593          	addi	a1,a1,-1500 # 800216c8 <__func__.2>
    80007cac:	0001b517          	auipc	a0,0x1b
    80007cb0:	ea450513          	addi	a0,a0,-348 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_20() {
    80007cb4:	ec06                	sd	ra,24(sp)
    80007cb6:	e822                	sd	s0,16(sp)
    80007cb8:	e426                	sd	s1,8(sp)
    TEST_START();
    80007cba:	7b7180ef          	jal	80020c70 <printf>
    80007cbe:	4529                	li	a0,10
    80007cc0:	640180ef          	jal	80020300 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007cc4:	0330000f          	fence	rw,rw
    80007cc8:	0003d417          	auipc	s0,0x3d
    80007ccc:	34840413          	addi	s0,s0,840 # 80045010 <excpt>
    80007cd0:	4485                	li	s1,1
    80007cd2:	0003d797          	auipc	a5,0x3d
    80007cd6:	3607bb23          	sd	zero,886(a5) # 80045048 <excpt+0x38>
    80007cda:	00941023          	sh	s1,0(s0)
    80007cde:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007ce2:	4511                	li	a0,4
    80007ce4:	df5f80ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007ce8:	002007b7          	lui	a5,0x200
    80007cec:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007cf0:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007cf4:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007cf8:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007cfc:	450d                	li	a0,3
    80007cfe:	ddbf80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007d02:	0330000f          	fence	rw,rw
    80007d06:	0003d797          	auipc	a5,0x3d
    80007d0a:	3407b123          	sd	zero,834(a5) # 80045048 <excpt+0x38>
    80007d0e:	00941023          	sh	s1,0(s0)
    80007d12:	0330000f          	fence	rw,rw
    80007d16:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007d1a:	08200593          	li	a1,130
    80007d1e:	0001c617          	auipc	a2,0x1c
    80007d22:	5ea60613          	addi	a2,a2,1514 # 80024308 <__func__.2+0x1aa0>
    80007d26:	0001b517          	auipc	a0,0x1b
    80007d2a:	e4250513          	addi	a0,a0,-446 # 80022b68 <__func__.2+0x300>
    80007d2e:	743180ef          	jal	80020c70 <printf>
    80007d32:	0003d797          	auipc	a5,0x3d
    80007d36:	2df7c783          	lbu	a5,735(a5) # 80045011 <excpt+0x1>
    80007d3a:	0001b597          	auipc	a1,0x1b
    80007d3e:	df658593          	addi	a1,a1,-522 # 80022b30 <__func__.2+0x2c8>
    80007d42:	c789                	beqz	a5,80007d4c <wfi_exception_tests_20+0xaa>
    80007d44:	0001b597          	auipc	a1,0x1b
    80007d48:	dfc58593          	addi	a1,a1,-516 # 80022b40 <__func__.2+0x2d8>
    80007d4c:	0001b517          	auipc	a0,0x1b
    80007d50:	e3450513          	addi	a0,a0,-460 # 80022b80 <__func__.2+0x318>
    80007d54:	71d180ef          	jal	80020c70 <printf>
    80007d58:	0003d797          	auipc	a5,0x3d
    80007d5c:	2b97c783          	lbu	a5,697(a5) # 80045011 <excpt+0x1>
    80007d60:	e7a9                	bnez	a5,80007daa <wfi_exception_tests_20+0x108>
    80007d62:	4529                	li	a0,10
    80007d64:	59c180ef          	jal	80020300 <putchar>
    80007d68:	0003d797          	auipc	a5,0x3d
    80007d6c:	2a97c783          	lbu	a5,681(a5) # 80045011 <excpt+0x1>
    80007d70:	e79d                	bnez	a5,80007d9e <wfi_exception_tests_20+0xfc>
    80007d72:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007d74:	0001b597          	auipc	a1,0x1b
    80007d78:	dbc58593          	addi	a1,a1,-580 # 80022b30 <__func__.2+0x2c8>
    80007d7c:	0001b517          	auipc	a0,0x1b
    80007d80:	e6c50513          	addi	a0,a0,-404 # 80022be8 <__func__.2+0x380>
    80007d84:	6ed180ef          	jal	80020c70 <printf>
    80007d88:	4511                	li	a0,4
    80007d8a:	d4ff80ef          	jal	80000ad8 <goto_priv>
    80007d8e:	e1af90ef          	jal	800013a8 <reset_state>
}
    80007d92:	60e2                	ld	ra,24(sp)
    80007d94:	8522                	mv	a0,s0
    80007d96:	6442                	ld	s0,16(sp)
    80007d98:	64a2                	ld	s1,8(sp)
    80007d9a:	6105                	addi	sp,sp,32
    80007d9c:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007d9e:	4401                	li	s0,0
    TEST_END();
    80007da0:	0001b597          	auipc	a1,0x1b
    80007da4:	da058593          	addi	a1,a1,-608 # 80022b40 <__func__.2+0x2d8>
    80007da8:	bfd1                	j	80007d7c <wfi_exception_tests_20+0xda>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007daa:	0001b517          	auipc	a0,0x1b
    80007dae:	dde50513          	addi	a0,a0,-546 # 80022b88 <__func__.2+0x320>
    80007db2:	6bf180ef          	jal	80020c70 <printf>
    80007db6:	02900513          	li	a0,41
    80007dba:	546180ef          	jal	80020300 <putchar>
    80007dbe:	b755                	j	80007d62 <wfi_exception_tests_20+0xc0>

0000000080007dc0 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007dc0:	1101                	addi	sp,sp,-32

    TEST_START();
    80007dc2:	0001a597          	auipc	a1,0x1a
    80007dc6:	91e58593          	addi	a1,a1,-1762 # 800216e0 <__func__.1>
    80007dca:	0001b517          	auipc	a0,0x1b
    80007dce:	d8650513          	addi	a0,a0,-634 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_21() {
    80007dd2:	ec06                	sd	ra,24(sp)
    80007dd4:	e822                	sd	s0,16(sp)
    80007dd6:	e426                	sd	s1,8(sp)
    TEST_START();
    80007dd8:	699180ef          	jal	80020c70 <printf>
    80007ddc:	4529                	li	a0,10
    80007dde:	522180ef          	jal	80020300 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007de2:	0330000f          	fence	rw,rw
    80007de6:	0003d417          	auipc	s0,0x3d
    80007dea:	22a40413          	addi	s0,s0,554 # 80045010 <excpt>
    80007dee:	4485                	li	s1,1
    80007df0:	0003d797          	auipc	a5,0x3d
    80007df4:	2407bc23          	sd	zero,600(a5) # 80045048 <excpt+0x38>
    80007df8:	00941023          	sh	s1,0(s0)
    80007dfc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80007e00:	4511                	li	a0,4
    80007e02:	cd7f80ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007e06:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007e0a:	002007b7          	lui	a5,0x200
    80007e0e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007e12:	8526                	mv	a0,s1
    80007e14:	cc5f80ef          	jal	80000ad8 <goto_priv>
    80007e18:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e1c:	08200593          	li	a1,130
    80007e20:	0001c617          	auipc	a2,0x1c
    80007e24:	55060613          	addi	a2,a2,1360 # 80024370 <__func__.2+0x1b08>
    80007e28:	0001b517          	auipc	a0,0x1b
    80007e2c:	d4050513          	addi	a0,a0,-704 # 80022b68 <__func__.2+0x300>
    80007e30:	641180ef          	jal	80020c70 <printf>
    80007e34:	0003d797          	auipc	a5,0x3d
    80007e38:	1dd7c783          	lbu	a5,477(a5) # 80045011 <excpt+0x1>
    80007e3c:	0001b597          	auipc	a1,0x1b
    80007e40:	d0458593          	addi	a1,a1,-764 # 80022b40 <__func__.2+0x2d8>
    80007e44:	cf89                	beqz	a5,80007e5e <wfi_exception_tests_21+0x9e>
    80007e46:	6418                	ld	a4,8(s0)
    80007e48:	4789                	li	a5,2
    80007e4a:	0001b597          	auipc	a1,0x1b
    80007e4e:	ce658593          	addi	a1,a1,-794 # 80022b30 <__func__.2+0x2c8>
    80007e52:	00f70663          	beq	a4,a5,80007e5e <wfi_exception_tests_21+0x9e>
    80007e56:	0001b597          	auipc	a1,0x1b
    80007e5a:	cea58593          	addi	a1,a1,-790 # 80022b40 <__func__.2+0x2d8>
    80007e5e:	0001b517          	auipc	a0,0x1b
    80007e62:	d2250513          	addi	a0,a0,-734 # 80022b80 <__func__.2+0x318>
    80007e66:	60b180ef          	jal	80020c70 <printf>
    80007e6a:	0003d797          	auipc	a5,0x3d
    80007e6e:	1a77c783          	lbu	a5,423(a5) # 80045011 <excpt+0x1>
    80007e72:	c789                	beqz	a5,80007e7c <wfi_exception_tests_21+0xbc>
    80007e74:	6418                	ld	a4,8(s0)
    80007e76:	4789                	li	a5,2
    80007e78:	00f70c63          	beq	a4,a5,80007e90 <wfi_exception_tests_21+0xd0>
    80007e7c:	0001b517          	auipc	a0,0x1b
    80007e80:	d0c50513          	addi	a0,a0,-756 # 80022b88 <__func__.2+0x320>
    80007e84:	5ed180ef          	jal	80020c70 <printf>
    80007e88:	02900513          	li	a0,41
    80007e8c:	474180ef          	jal	80020300 <putchar>
    80007e90:	4529                	li	a0,10
    80007e92:	46e180ef          	jal	80020300 <putchar>
    80007e96:	0003d497          	auipc	s1,0x3d
    80007e9a:	17b4c483          	lbu	s1,379(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007e9e:	0001b597          	auipc	a1,0x1b
    80007ea2:	ca258593          	addi	a1,a1,-862 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007ea6:	cc91                	beqz	s1,80007ec2 <wfi_exception_tests_21+0x102>
    80007ea8:	6418                	ld	a4,8(s0)
    80007eaa:	4789                	li	a5,2
    TEST_END();
    80007eac:	0001b597          	auipc	a1,0x1b
    80007eb0:	c8458593          	addi	a1,a1,-892 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007eb4:	00f70763          	beq	a4,a5,80007ec2 <wfi_exception_tests_21+0x102>
    80007eb8:	4481                	li	s1,0
    TEST_END();
    80007eba:	0001b597          	auipc	a1,0x1b
    80007ebe:	c8658593          	addi	a1,a1,-890 # 80022b40 <__func__.2+0x2d8>
    80007ec2:	0001b517          	auipc	a0,0x1b
    80007ec6:	d2650513          	addi	a0,a0,-730 # 80022be8 <__func__.2+0x380>
    80007eca:	5a7180ef          	jal	80020c70 <printf>
    80007ece:	4511                	li	a0,4
    80007ed0:	c09f80ef          	jal	80000ad8 <goto_priv>
    80007ed4:	cd4f90ef          	jal	800013a8 <reset_state>
}
    80007ed8:	60e2                	ld	ra,24(sp)
    80007eda:	6442                	ld	s0,16(sp)
    80007edc:	8526                	mv	a0,s1
    80007ede:	64a2                	ld	s1,8(sp)
    80007ee0:	6105                	addi	sp,sp,32
    80007ee2:	8082                	ret

0000000080007ee4 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007ee4:	1101                	addi	sp,sp,-32

    TEST_START();
    80007ee6:	0001a597          	auipc	a1,0x1a
    80007eea:	81258593          	addi	a1,a1,-2030 # 800216f8 <__func__.0>
    80007eee:	0001b517          	auipc	a0,0x1b
    80007ef2:	c6250513          	addi	a0,a0,-926 # 80022b50 <__func__.2+0x2e8>
bool wfi_exception_tests_22() {
    80007ef6:	ec06                	sd	ra,24(sp)
    80007ef8:	e822                	sd	s0,16(sp)
    80007efa:	e426                	sd	s1,8(sp)
    TEST_START();
    80007efc:	575180ef          	jal	80020c70 <printf>
    80007f00:	4529                	li	a0,10
    80007f02:	3fe180ef          	jal	80020300 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007f06:	0330000f          	fence	rw,rw
    80007f0a:	0003d417          	auipc	s0,0x3d
    80007f0e:	10640413          	addi	s0,s0,262 # 80045010 <excpt>
    80007f12:	4485                	li	s1,1
    80007f14:	0003d797          	auipc	a5,0x3d
    80007f18:	1207ba23          	sd	zero,308(a5) # 80045048 <excpt+0x38>
    80007f1c:	00941023          	sh	s1,0(s0)
    80007f20:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80007f24:	4511                	li	a0,4
    80007f26:	bb3f80ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_HIE, 0);
    80007f2a:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007f2e:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007f32:	002007b7          	lui	a5,0x200
    80007f36:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007f3a:	8526                	mv	a0,s1
    80007f3c:	b9df80ef          	jal	80000ad8 <goto_priv>
    80007f40:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007f44:	08200593          	li	a1,130
    80007f48:	0001c617          	auipc	a2,0x1c
    80007f4c:	42860613          	addi	a2,a2,1064 # 80024370 <__func__.2+0x1b08>
    80007f50:	0001b517          	auipc	a0,0x1b
    80007f54:	c1850513          	addi	a0,a0,-1000 # 80022b68 <__func__.2+0x300>
    80007f58:	519180ef          	jal	80020c70 <printf>
    80007f5c:	0003d797          	auipc	a5,0x3d
    80007f60:	0b57c783          	lbu	a5,181(a5) # 80045011 <excpt+0x1>
    80007f64:	0001b597          	auipc	a1,0x1b
    80007f68:	bdc58593          	addi	a1,a1,-1060 # 80022b40 <__func__.2+0x2d8>
    80007f6c:	cf89                	beqz	a5,80007f86 <wfi_exception_tests_22+0xa2>
    80007f6e:	6418                	ld	a4,8(s0)
    80007f70:	4789                	li	a5,2
    80007f72:	0001b597          	auipc	a1,0x1b
    80007f76:	bbe58593          	addi	a1,a1,-1090 # 80022b30 <__func__.2+0x2c8>
    80007f7a:	00f70663          	beq	a4,a5,80007f86 <wfi_exception_tests_22+0xa2>
    80007f7e:	0001b597          	auipc	a1,0x1b
    80007f82:	bc258593          	addi	a1,a1,-1086 # 80022b40 <__func__.2+0x2d8>
    80007f86:	0001b517          	auipc	a0,0x1b
    80007f8a:	bfa50513          	addi	a0,a0,-1030 # 80022b80 <__func__.2+0x318>
    80007f8e:	4e3180ef          	jal	80020c70 <printf>
    80007f92:	0003d797          	auipc	a5,0x3d
    80007f96:	07f7c783          	lbu	a5,127(a5) # 80045011 <excpt+0x1>
    80007f9a:	c789                	beqz	a5,80007fa4 <wfi_exception_tests_22+0xc0>
    80007f9c:	6418                	ld	a4,8(s0)
    80007f9e:	4789                	li	a5,2
    80007fa0:	00f70c63          	beq	a4,a5,80007fb8 <wfi_exception_tests_22+0xd4>
    80007fa4:	0001b517          	auipc	a0,0x1b
    80007fa8:	be450513          	addi	a0,a0,-1052 # 80022b88 <__func__.2+0x320>
    80007fac:	4c5180ef          	jal	80020c70 <printf>
    80007fb0:	02900513          	li	a0,41
    80007fb4:	34c180ef          	jal	80020300 <putchar>
    80007fb8:	4529                	li	a0,10
    80007fba:	346180ef          	jal	80020300 <putchar>
    80007fbe:	0003d497          	auipc	s1,0x3d
    80007fc2:	0534c483          	lbu	s1,83(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007fc6:	0001b597          	auipc	a1,0x1b
    80007fca:	b7a58593          	addi	a1,a1,-1158 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007fce:	cc91                	beqz	s1,80007fea <wfi_exception_tests_22+0x106>
    80007fd0:	6418                	ld	a4,8(s0)
    80007fd2:	4789                	li	a5,2
    TEST_END();
    80007fd4:	0001b597          	auipc	a1,0x1b
    80007fd8:	b5c58593          	addi	a1,a1,-1188 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007fdc:	00f70763          	beq	a4,a5,80007fea <wfi_exception_tests_22+0x106>
    80007fe0:	4481                	li	s1,0
    TEST_END();
    80007fe2:	0001b597          	auipc	a1,0x1b
    80007fe6:	b5e58593          	addi	a1,a1,-1186 # 80022b40 <__func__.2+0x2d8>
    80007fea:	0001b517          	auipc	a0,0x1b
    80007fee:	bfe50513          	addi	a0,a0,-1026 # 80022be8 <__func__.2+0x380>
    80007ff2:	47f180ef          	jal	80020c70 <printf>
    80007ff6:	4511                	li	a0,4
    80007ff8:	ae1f80ef          	jal	80000ad8 <goto_priv>
    80007ffc:	bacf90ef          	jal	800013a8 <reset_state>
}
    80008000:	60e2                	ld	ra,24(sp)
    80008002:	6442                	ld	s0,16(sp)
    80008004:	8526                	mv	a0,s1
    80008006:	64a2                	ld	s1,8(sp)
    80008008:	6105                	addi	sp,sp,32
    8000800a:	8082                	ret

000000008000800c <tinst_tests>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests(){
    8000800c:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000800e:	00019597          	auipc	a1,0x19
    80008012:	70258593          	addi	a1,a1,1794 # 80021710 <__func__.2>
    80008016:	0001b517          	auipc	a0,0x1b
    8000801a:	b3a50513          	addi	a0,a0,-1222 # 80022b50 <__func__.2+0x2e8>
bool tinst_tests(){
    8000801e:	f406                	sd	ra,40(sp)
    80008020:	f022                	sd	s0,32(sp)
    80008022:	ec26                	sd	s1,24(sp)
    80008024:	e84a                	sd	s2,16(sp)
    80008026:	e44e                	sd	s3,8(sp)
    TEST_START();
    80008028:	449180ef          	jal	80020c70 <printf>
    8000802c:	4529                	li	a0,10
    8000802e:	2d2180ef          	jal	80020300 <putchar>

    hspt_init();        
    80008032:	daef80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80008036:	450d                	li	a0,3
    80008038:	aa1f80ef          	jal	80000ad8 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000803c:	0330000f          	fence	rw,rw
    80008040:	0003d417          	auipc	s0,0x3d
    80008044:	fd040413          	addi	s0,s0,-48 # 80045010 <excpt>
    80008048:	4785                	li	a5,1
    8000804a:	0003d717          	auipc	a4,0x3d
    8000804e:	fe073f23          	sd	zero,-2(a4) # 80045048 <excpt+0x38>
    80008052:	00f41023          	sh	a5,0(s0)
    80008056:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000805a:	400197b7          	lui	a5,0x40019
    8000805e:	078a                	slli	a5,a5,0x2
    80008060:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008064:	0001c617          	auipc	a2,0x1c
    80008068:	35460613          	addi	a2,a2,852 # 800243b8 <__func__.2+0x1b50>
    8000806c:	08200593          	li	a1,130
    80008070:	0001b517          	auipc	a0,0x1b
    80008074:	af850513          	addi	a0,a0,-1288 # 80022b68 <__func__.2+0x300>
    80008078:	3f9180ef          	jal	80020c70 <printf>
    8000807c:	0003d797          	auipc	a5,0x3d
    80008080:	f957c783          	lbu	a5,-107(a5) # 80045011 <excpt+0x1>
    80008084:	e399                	bnez	a5,8000808a <tinst_tests+0x7e>
    80008086:	05f0106f          	j	800098e4 <tinst_tests+0x18d8>
    8000808a:	6418                	ld	a4,8(s0)
    8000808c:	47b5                	li	a5,13
    8000808e:	0001b597          	auipc	a1,0x1b
    80008092:	ab258593          	addi	a1,a1,-1358 # 80022b40 <__func__.2+0x2d8>
    80008096:	00f71463          	bne	a4,a5,8000809e <tinst_tests+0x92>
    8000809a:	0030106f          	j	8000989c <tinst_tests+0x1890>
    8000809e:	0001b517          	auipc	a0,0x1b
    800080a2:	ae250513          	addi	a0,a0,-1310 # 80022b80 <__func__.2+0x318>
    800080a6:	3cb180ef          	jal	80020c70 <printf>
    800080aa:	0003d797          	auipc	a5,0x3d
    800080ae:	f677c783          	lbu	a5,-153(a5) # 80045011 <excpt+0x1>
    800080b2:	c799                	beqz	a5,800080c0 <tinst_tests+0xb4>
    800080b4:	6418                	ld	a4,8(s0)
    800080b6:	47b5                	li	a5,13
    800080b8:	00f71463          	bne	a4,a5,800080c0 <tinst_tests+0xb4>
    800080bc:	0850106f          	j	80009940 <tinst_tests+0x1934>
    800080c0:	0001b517          	auipc	a0,0x1b
    800080c4:	ac850513          	addi	a0,a0,-1336 # 80022b88 <__func__.2+0x320>
    800080c8:	3a9180ef          	jal	80020c70 <printf>
    800080cc:	02900513          	li	a0,41
    800080d0:	230180ef          	jal	80020300 <putchar>
    800080d4:	4529                	li	a0,10
    800080d6:	22a180ef          	jal	80020300 <putchar>
    800080da:	0003d797          	auipc	a5,0x3d
    800080de:	f377c783          	lbu	a5,-201(a5) # 80045011 <excpt+0x1>
    800080e2:	c399                	beqz	a5,800080e8 <tinst_tests+0xdc>
    800080e4:	00d0106f          	j	800098f0 <tinst_tests+0x18e4>
    800080e8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080ea:	0330000f          	fence	rw,rw
    800080ee:	4785                	li	a5,1
    800080f0:	0003d717          	auipc	a4,0x3d
    800080f4:	f4073c23          	sd	zero,-168(a4) # 80045048 <excpt+0x38>
    800080f8:	00f41023          	sh	a5,0(s0)
    800080fc:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80008100:	400197b7          	lui	a5,0x40019
    80008104:	078a                	slli	a5,a5,0x2
    80008106:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000810a:	0001c617          	auipc	a2,0x1c
    8000810e:	32e60613          	addi	a2,a2,814 # 80024438 <__func__.2+0x1bd0>
    80008112:	08200593          	li	a1,130
    80008116:	0001b517          	auipc	a0,0x1b
    8000811a:	a5250513          	addi	a0,a0,-1454 # 80022b68 <__func__.2+0x300>
    8000811e:	353180ef          	jal	80020c70 <printf>
    80008122:	0003d797          	auipc	a5,0x3d
    80008126:	eef7c783          	lbu	a5,-273(a5) # 80045011 <excpt+0x1>
    8000812a:	e399                	bnez	a5,80008130 <tinst_tests+0x124>
    8000812c:	0990106f          	j	800099c4 <tinst_tests+0x19b8>
    80008130:	6418                	ld	a4,8(s0)
    80008132:	47b5                	li	a5,13
    80008134:	0001b597          	auipc	a1,0x1b
    80008138:	a0c58593          	addi	a1,a1,-1524 # 80022b40 <__func__.2+0x2d8>
    8000813c:	00f71463          	bne	a4,a5,80008144 <tinst_tests+0x138>
    80008140:	03d0106f          	j	8000997c <tinst_tests+0x1970>
    80008144:	0001b517          	auipc	a0,0x1b
    80008148:	a3c50513          	addi	a0,a0,-1476 # 80022b80 <__func__.2+0x318>
    8000814c:	325180ef          	jal	80020c70 <printf>
    80008150:	0003d797          	auipc	a5,0x3d
    80008154:	ec17c783          	lbu	a5,-319(a5) # 80045011 <excpt+0x1>
    80008158:	c799                	beqz	a5,80008166 <tinst_tests+0x15a>
    8000815a:	6418                	ld	a4,8(s0)
    8000815c:	47b5                	li	a5,13
    8000815e:	00f71463          	bne	a4,a5,80008166 <tinst_tests+0x15a>
    80008162:	4890106f          	j	80009dea <tinst_tests+0x1dde>
    80008166:	0001b517          	auipc	a0,0x1b
    8000816a:	a2250513          	addi	a0,a0,-1502 # 80022b88 <__func__.2+0x320>
    8000816e:	303180ef          	jal	80020c70 <printf>
    80008172:	02900513          	li	a0,41
    80008176:	18a180ef          	jal	80020300 <putchar>
    8000817a:	4529                	li	a0,10
    8000817c:	184180ef          	jal	80020300 <putchar>
    80008180:	00090e63          	beqz	s2,8000819c <tinst_tests+0x190>
    80008184:	0003d797          	auipc	a5,0x3d
    80008188:	e8d7c783          	lbu	a5,-371(a5) # 80045011 <excpt+0x1>
    8000818c:	c799                	beqz	a5,8000819a <tinst_tests+0x18e>
    8000818e:	6418                	ld	a4,8(s0)
    80008190:	47b5                	li	a5,13
    80008192:	00f71463          	bne	a4,a5,8000819a <tinst_tests+0x18e>
    80008196:	0980206f          	j	8000a22e <tinst_tests+0x2222>
    8000819a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000819c:	0330000f          	fence	rw,rw
    800081a0:	4785                	li	a5,1
    800081a2:	0003d717          	auipc	a4,0x3d
    800081a6:	ea073323          	sd	zero,-346(a4) # 80045048 <excpt+0x38>
    800081aa:	00f41023          	sh	a5,0(s0)
    800081ae:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800081b2:	400197b7          	lui	a5,0x40019
    800081b6:	078a                	slli	a5,a5,0x2
    800081b8:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800081bc:	0001c617          	auipc	a2,0x1c
    800081c0:	2bc60613          	addi	a2,a2,700 # 80024478 <__func__.2+0x1c10>
    800081c4:	08200593          	li	a1,130
    800081c8:	0001b517          	auipc	a0,0x1b
    800081cc:	9a050513          	addi	a0,a0,-1632 # 80022b68 <__func__.2+0x300>
    800081d0:	2a1180ef          	jal	80020c70 <printf>
    800081d4:	0003d797          	auipc	a5,0x3d
    800081d8:	e3d7c783          	lbu	a5,-451(a5) # 80045011 <excpt+0x1>
    800081dc:	e399                	bnez	a5,800081e2 <tinst_tests+0x1d6>
    800081de:	03b0106f          	j	80009a18 <tinst_tests+0x1a0c>
    800081e2:	6418                	ld	a4,8(s0)
    800081e4:	47b5                	li	a5,13
    800081e6:	0001b597          	auipc	a1,0x1b
    800081ea:	95a58593          	addi	a1,a1,-1702 # 80022b40 <__func__.2+0x2d8>
    800081ee:	00f71463          	bne	a4,a5,800081f6 <tinst_tests+0x1ea>
    800081f2:	7de0106f          	j	800099d0 <tinst_tests+0x19c4>
    800081f6:	0001b517          	auipc	a0,0x1b
    800081fa:	98a50513          	addi	a0,a0,-1654 # 80022b80 <__func__.2+0x318>
    800081fe:	273180ef          	jal	80020c70 <printf>
    80008202:	0003d797          	auipc	a5,0x3d
    80008206:	e0f7c783          	lbu	a5,-497(a5) # 80045011 <excpt+0x1>
    8000820a:	c799                	beqz	a5,80008218 <tinst_tests+0x20c>
    8000820c:	6418                	ld	a4,8(s0)
    8000820e:	47b5                	li	a5,13
    80008210:	00f71463          	bne	a4,a5,80008218 <tinst_tests+0x20c>
    80008214:	0d20206f          	j	8000a2e6 <tinst_tests+0x22da>
    80008218:	0001b517          	auipc	a0,0x1b
    8000821c:	97050513          	addi	a0,a0,-1680 # 80022b88 <__func__.2+0x320>
    80008220:	251180ef          	jal	80020c70 <printf>
    80008224:	02900513          	li	a0,41
    80008228:	0d8180ef          	jal	80020300 <putchar>
    8000822c:	4529                	li	a0,10
    8000822e:	0d2180ef          	jal	80020300 <putchar>
    80008232:	00090e63          	beqz	s2,8000824e <tinst_tests+0x242>
    80008236:	0003d797          	auipc	a5,0x3d
    8000823a:	ddb7c783          	lbu	a5,-549(a5) # 80045011 <excpt+0x1>
    8000823e:	c799                	beqz	a5,8000824c <tinst_tests+0x240>
    80008240:	6418                	ld	a4,8(s0)
    80008242:	47b5                	li	a5,13
    80008244:	00f71463          	bne	a4,a5,8000824c <tinst_tests+0x240>
    80008248:	0240206f          	j	8000a26c <tinst_tests+0x2260>
    8000824c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000824e:	0330000f          	fence	rw,rw
    80008252:	4785                	li	a5,1
    80008254:	0003d717          	auipc	a4,0x3d
    80008258:	de073a23          	sd	zero,-524(a4) # 80045048 <excpt+0x38>
    8000825c:	00f41023          	sh	a5,0(s0)
    80008260:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    80008264:	400197b7          	lui	a5,0x40019
    80008268:	078a                	slli	a5,a5,0x2
    8000826a:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000826e:	0001c617          	auipc	a2,0x1c
    80008272:	24a60613          	addi	a2,a2,586 # 800244b8 <__func__.2+0x1c50>
    80008276:	08200593          	li	a1,130
    8000827a:	0001b517          	auipc	a0,0x1b
    8000827e:	8ee50513          	addi	a0,a0,-1810 # 80022b68 <__func__.2+0x300>
    80008282:	1ef180ef          	jal	80020c70 <printf>
    80008286:	0003d797          	auipc	a5,0x3d
    8000828a:	d8b7c783          	lbu	a5,-629(a5) # 80045011 <excpt+0x1>
    8000828e:	e399                	bnez	a5,80008294 <tinst_tests+0x288>
    80008290:	7dc0106f          	j	80009a6c <tinst_tests+0x1a60>
    80008294:	6418                	ld	a4,8(s0)
    80008296:	47b5                	li	a5,13
    80008298:	0001b597          	auipc	a1,0x1b
    8000829c:	8a858593          	addi	a1,a1,-1880 # 80022b40 <__func__.2+0x2d8>
    800082a0:	00f71463          	bne	a4,a5,800082a8 <tinst_tests+0x29c>
    800082a4:	7800106f          	j	80009a24 <tinst_tests+0x1a18>
    800082a8:	0001b517          	auipc	a0,0x1b
    800082ac:	8d850513          	addi	a0,a0,-1832 # 80022b80 <__func__.2+0x318>
    800082b0:	1c1180ef          	jal	80020c70 <printf>
    800082b4:	0003d797          	auipc	a5,0x3d
    800082b8:	d5d7c783          	lbu	a5,-675(a5) # 80045011 <excpt+0x1>
    800082bc:	c799                	beqz	a5,800082ca <tinst_tests+0x2be>
    800082be:	6418                	ld	a4,8(s0)
    800082c0:	47b5                	li	a5,13
    800082c2:	00f71463          	bne	a4,a5,800082ca <tinst_tests+0x2be>
    800082c6:	0c00206f          	j	8000a386 <tinst_tests+0x237a>
    800082ca:	0001b517          	auipc	a0,0x1b
    800082ce:	8be50513          	addi	a0,a0,-1858 # 80022b88 <__func__.2+0x320>
    800082d2:	19f180ef          	jal	80020c70 <printf>
    800082d6:	02900513          	li	a0,41
    800082da:	026180ef          	jal	80020300 <putchar>
    800082de:	4529                	li	a0,10
    800082e0:	020180ef          	jal	80020300 <putchar>
    800082e4:	00090e63          	beqz	s2,80008300 <tinst_tests+0x2f4>
    800082e8:	0003d797          	auipc	a5,0x3d
    800082ec:	d297c783          	lbu	a5,-727(a5) # 80045011 <excpt+0x1>
    800082f0:	c799                	beqz	a5,800082fe <tinst_tests+0x2f2>
    800082f2:	6418                	ld	a4,8(s0)
    800082f4:	47b5                	li	a5,13
    800082f6:	00f71463          	bne	a4,a5,800082fe <tinst_tests+0x2f2>
    800082fa:	7b10106f          	j	8000a2aa <tinst_tests+0x229e>
    800082fe:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008300:	0330000f          	fence	rw,rw
    80008304:	4785                	li	a5,1
    80008306:	0003d717          	auipc	a4,0x3d
    8000830a:	d4073123          	sd	zero,-702(a4) # 80045048 <excpt+0x38>
    8000830e:	00f41023          	sh	a5,0(s0)
    80008312:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80008316:	400197b7          	lui	a5,0x40019
    8000831a:	078a                	slli	a5,a5,0x2
    8000831c:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008320:	0001c617          	auipc	a2,0x1c
    80008324:	1d860613          	addi	a2,a2,472 # 800244f8 <__func__.2+0x1c90>
    80008328:	08200593          	li	a1,130
    8000832c:	0001b517          	auipc	a0,0x1b
    80008330:	83c50513          	addi	a0,a0,-1988 # 80022b68 <__func__.2+0x300>
    80008334:	13d180ef          	jal	80020c70 <printf>
    80008338:	0003d797          	auipc	a5,0x3d
    8000833c:	cd97c783          	lbu	a5,-807(a5) # 80045011 <excpt+0x1>
    80008340:	e399                	bnez	a5,80008346 <tinst_tests+0x33a>
    80008342:	77e0106f          	j	80009ac0 <tinst_tests+0x1ab4>
    80008346:	6418                	ld	a4,8(s0)
    80008348:	47b5                	li	a5,13
    8000834a:	0001a597          	auipc	a1,0x1a
    8000834e:	7f658593          	addi	a1,a1,2038 # 80022b40 <__func__.2+0x2d8>
    80008352:	00f71463          	bne	a4,a5,8000835a <tinst_tests+0x34e>
    80008356:	7220106f          	j	80009a78 <tinst_tests+0x1a6c>
    8000835a:	0001b517          	auipc	a0,0x1b
    8000835e:	82650513          	addi	a0,a0,-2010 # 80022b80 <__func__.2+0x318>
    80008362:	10f180ef          	jal	80020c70 <printf>
    80008366:	0003d797          	auipc	a5,0x3d
    8000836a:	cab7c783          	lbu	a5,-853(a5) # 80045011 <excpt+0x1>
    8000836e:	c799                	beqz	a5,8000837c <tinst_tests+0x370>
    80008370:	6418                	ld	a4,8(s0)
    80008372:	47b5                	li	a5,13
    80008374:	00f71463          	bne	a4,a5,8000837c <tinst_tests+0x370>
    80008378:	0a00206f          	j	8000a418 <tinst_tests+0x240c>
    8000837c:	0001b517          	auipc	a0,0x1b
    80008380:	80c50513          	addi	a0,a0,-2036 # 80022b88 <__func__.2+0x320>
    80008384:	0ed180ef          	jal	80020c70 <printf>
    80008388:	02900513          	li	a0,41
    8000838c:	775170ef          	jal	80020300 <putchar>
    80008390:	4529                	li	a0,10
    80008392:	76f170ef          	jal	80020300 <putchar>
    80008396:	00090a63          	beqz	s2,800083aa <tinst_tests+0x39e>
    8000839a:	0003d797          	auipc	a5,0x3d
    8000839e:	c777c783          	lbu	a5,-905(a5) # 80045011 <excpt+0x1>
    800083a2:	c399                	beqz	a5,800083a8 <tinst_tests+0x39c>
    800083a4:	2830106f          	j	80009e26 <tinst_tests+0x1e1a>
    800083a8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800083aa:	0330000f          	fence	rw,rw
    800083ae:	4785                	li	a5,1
    800083b0:	0003d717          	auipc	a4,0x3d
    800083b4:	c8073c23          	sd	zero,-872(a4) # 80045048 <excpt+0x38>
    800083b8:	00f41023          	sh	a5,0(s0)
    800083bc:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    800083c0:	400197b7          	lui	a5,0x40019
    800083c4:	078a                	slli	a5,a5,0x2
    800083c6:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    800083ca:	0001c617          	auipc	a2,0x1c
    800083ce:	16e60613          	addi	a2,a2,366 # 80024538 <__func__.2+0x1cd0>
    800083d2:	08200593          	li	a1,130
    800083d6:	0001a517          	auipc	a0,0x1a
    800083da:	79250513          	addi	a0,a0,1938 # 80022b68 <__func__.2+0x300>
    800083de:	093180ef          	jal	80020c70 <printf>
    800083e2:	0003d797          	auipc	a5,0x3d
    800083e6:	c2f7c783          	lbu	a5,-977(a5) # 80045011 <excpt+0x1>
    800083ea:	e399                	bnez	a5,800083f0 <tinst_tests+0x3e4>
    800083ec:	7280106f          	j	80009b14 <tinst_tests+0x1b08>
    800083f0:	6418                	ld	a4,8(s0)
    800083f2:	47b5                	li	a5,13
    800083f4:	0001a597          	auipc	a1,0x1a
    800083f8:	74c58593          	addi	a1,a1,1868 # 80022b40 <__func__.2+0x2d8>
    800083fc:	00f71463          	bne	a4,a5,80008404 <tinst_tests+0x3f8>
    80008400:	6cc0106f          	j	80009acc <tinst_tests+0x1ac0>
    80008404:	0001a517          	auipc	a0,0x1a
    80008408:	77c50513          	addi	a0,a0,1916 # 80022b80 <__func__.2+0x318>
    8000840c:	065180ef          	jal	80020c70 <printf>
    80008410:	0003d797          	auipc	a5,0x3d
    80008414:	c017c783          	lbu	a5,-1023(a5) # 80045011 <excpt+0x1>
    80008418:	c799                	beqz	a5,80008426 <tinst_tests+0x41a>
    8000841a:	6418                	ld	a4,8(s0)
    8000841c:	47b5                	li	a5,13
    8000841e:	00f71463          	bne	a4,a5,80008426 <tinst_tests+0x41a>
    80008422:	08c0206f          	j	8000a4ae <tinst_tests+0x24a2>
    80008426:	0001a517          	auipc	a0,0x1a
    8000842a:	76250513          	addi	a0,a0,1890 # 80022b88 <__func__.2+0x320>
    8000842e:	043180ef          	jal	80020c70 <printf>
    80008432:	02900513          	li	a0,41
    80008436:	6cb170ef          	jal	80020300 <putchar>
    8000843a:	4529                	li	a0,10
    8000843c:	6c5170ef          	jal	80020300 <putchar>
    80008440:	00090a63          	beqz	s2,80008454 <tinst_tests+0x448>
    80008444:	0003d797          	auipc	a5,0x3d
    80008448:	bcd7c783          	lbu	a5,-1075(a5) # 80045011 <excpt+0x1>
    8000844c:	c399                	beqz	a5,80008452 <tinst_tests+0x446>
    8000844e:	2890106f          	j	80009ed6 <tinst_tests+0x1eca>
    80008452:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008454:	0330000f          	fence	rw,rw
    80008458:	4785                	li	a5,1
    8000845a:	0003d717          	auipc	a4,0x3d
    8000845e:	be073723          	sd	zero,-1042(a4) # 80045048 <excpt+0x38>
    80008462:	00f41023          	sh	a5,0(s0)
    80008466:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000846a:	400197b7          	lui	a5,0x40019
    8000846e:	078a                	slli	a5,a5,0x2
    80008470:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008474:	0001c617          	auipc	a2,0x1c
    80008478:	10460613          	addi	a2,a2,260 # 80024578 <__func__.2+0x1d10>
    8000847c:	08200593          	li	a1,130
    80008480:	0001a517          	auipc	a0,0x1a
    80008484:	6e850513          	addi	a0,a0,1768 # 80022b68 <__func__.2+0x300>
    80008488:	7e8180ef          	jal	80020c70 <printf>
    8000848c:	0003d797          	auipc	a5,0x3d
    80008490:	b857c783          	lbu	a5,-1147(a5) # 80045011 <excpt+0x1>
    80008494:	e399                	bnez	a5,8000849a <tinst_tests+0x48e>
    80008496:	6d20106f          	j	80009b68 <tinst_tests+0x1b5c>
    8000849a:	6418                	ld	a4,8(s0)
    8000849c:	47b5                	li	a5,13
    8000849e:	0001a597          	auipc	a1,0x1a
    800084a2:	6a258593          	addi	a1,a1,1698 # 80022b40 <__func__.2+0x2d8>
    800084a6:	00f71463          	bne	a4,a5,800084ae <tinst_tests+0x4a2>
    800084aa:	6760106f          	j	80009b20 <tinst_tests+0x1b14>
    800084ae:	0001a517          	auipc	a0,0x1a
    800084b2:	6d250513          	addi	a0,a0,1746 # 80022b80 <__func__.2+0x318>
    800084b6:	7ba180ef          	jal	80020c70 <printf>
    800084ba:	0003d797          	auipc	a5,0x3d
    800084be:	b577c783          	lbu	a5,-1193(a5) # 80045011 <excpt+0x1>
    800084c2:	c799                	beqz	a5,800084d0 <tinst_tests+0x4c4>
    800084c4:	6418                	ld	a4,8(s0)
    800084c6:	47b5                	li	a5,13
    800084c8:	00f71463          	bne	a4,a5,800084d0 <tinst_tests+0x4c4>
    800084cc:	0780206f          	j	8000a544 <tinst_tests+0x2538>
    800084d0:	0001a517          	auipc	a0,0x1a
    800084d4:	6b850513          	addi	a0,a0,1720 # 80022b88 <__func__.2+0x320>
    800084d8:	798180ef          	jal	80020c70 <printf>
    800084dc:	02900513          	li	a0,41
    800084e0:	621170ef          	jal	80020300 <putchar>
    800084e4:	4529                	li	a0,10
    800084e6:	61b170ef          	jal	80020300 <putchar>
    800084ea:	00090a63          	beqz	s2,800084fe <tinst_tests+0x4f2>
    800084ee:	0003d797          	auipc	a5,0x3d
    800084f2:	b237c783          	lbu	a5,-1245(a5) # 80045011 <excpt+0x1>
    800084f6:	c399                	beqz	a5,800084fc <tinst_tests+0x4f0>
    800084f8:	2290106f          	j	80009f20 <tinst_tests+0x1f14>
    800084fc:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    800084fe:	0330000f          	fence	rw,rw
    80008502:	4785                	li	a5,1
    80008504:	0003d717          	auipc	a4,0x3d
    80008508:	b4073223          	sd	zero,-1212(a4) # 80045048 <excpt+0x38>
    8000850c:	00f41023          	sh	a5,0(s0)
    80008510:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    80008514:	400197b7          	lui	a5,0x40019
    80008518:	078a                	slli	a5,a5,0x2
    8000851a:	573d                	li	a4,-17
    8000851c:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008520:	0001c617          	auipc	a2,0x1c
    80008524:	09860613          	addi	a2,a2,152 # 800245b8 <__func__.2+0x1d50>
    80008528:	08200593          	li	a1,130
    8000852c:	0001a517          	auipc	a0,0x1a
    80008530:	63c50513          	addi	a0,a0,1596 # 80022b68 <__func__.2+0x300>
    80008534:	73c180ef          	jal	80020c70 <printf>
    80008538:	0003d797          	auipc	a5,0x3d
    8000853c:	ad97c783          	lbu	a5,-1319(a5) # 80045011 <excpt+0x1>
    80008540:	e399                	bnez	a5,80008546 <tinst_tests+0x53a>
    80008542:	6800106f          	j	80009bc2 <tinst_tests+0x1bb6>
    80008546:	6418                	ld	a4,8(s0)
    80008548:	47bd                	li	a5,15
    8000854a:	0001a597          	auipc	a1,0x1a
    8000854e:	5f658593          	addi	a1,a1,1526 # 80022b40 <__func__.2+0x2d8>
    80008552:	00f71463          	bne	a4,a5,8000855a <tinst_tests+0x54e>
    80008556:	61e0106f          	j	80009b74 <tinst_tests+0x1b68>
    8000855a:	0001a517          	auipc	a0,0x1a
    8000855e:	62650513          	addi	a0,a0,1574 # 80022b80 <__func__.2+0x318>
    80008562:	70e180ef          	jal	80020c70 <printf>
    80008566:	0003d797          	auipc	a5,0x3d
    8000856a:	aab7c783          	lbu	a5,-1365(a5) # 80045011 <excpt+0x1>
    8000856e:	c799                	beqz	a5,8000857c <tinst_tests+0x570>
    80008570:	6418                	ld	a4,8(s0)
    80008572:	47bd                	li	a5,15
    80008574:	00f71463          	bne	a4,a5,8000857c <tinst_tests+0x570>
    80008578:	0620206f          	j	8000a5da <tinst_tests+0x25ce>
    8000857c:	0001a517          	auipc	a0,0x1a
    80008580:	60c50513          	addi	a0,a0,1548 # 80022b88 <__func__.2+0x320>
    80008584:	6ec180ef          	jal	80020c70 <printf>
    80008588:	02900513          	li	a0,41
    8000858c:	575170ef          	jal	80020300 <putchar>
    80008590:	4529                	li	a0,10
    80008592:	56f170ef          	jal	80020300 <putchar>
    80008596:	00090a63          	beqz	s2,800085aa <tinst_tests+0x59e>
    8000859a:	0003d797          	auipc	a5,0x3d
    8000859e:	a777c783          	lbu	a5,-1417(a5) # 80045011 <excpt+0x1>
    800085a2:	c399                	beqz	a5,800085a8 <tinst_tests+0x59c>
    800085a4:	1c70106f          	j	80009f6a <tinst_tests+0x1f5e>
    800085a8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800085aa:	0330000f          	fence	rw,rw
    800085ae:	4785                	li	a5,1
    800085b0:	0003d717          	auipc	a4,0x3d
    800085b4:	a8073c23          	sd	zero,-1384(a4) # 80045048 <excpt+0x38>
    800085b8:	00f41023          	sh	a5,0(s0)
    800085bc:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800085c0:	77f1                	lui	a5,0xffffc
    800085c2:	40019737          	lui	a4,0x40019
    800085c6:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800085ca:	070a                	slli	a4,a4,0x2
    800085cc:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800085d0:	0001c617          	auipc	a2,0x1c
    800085d4:	02860613          	addi	a2,a2,40 # 800245f8 <__func__.2+0x1d90>
    800085d8:	08200593          	li	a1,130
    800085dc:	0001a517          	auipc	a0,0x1a
    800085e0:	58c50513          	addi	a0,a0,1420 # 80022b68 <__func__.2+0x300>
    800085e4:	68c180ef          	jal	80020c70 <printf>
    800085e8:	0003d797          	auipc	a5,0x3d
    800085ec:	a297c783          	lbu	a5,-1495(a5) # 80045011 <excpt+0x1>
    800085f0:	e399                	bnez	a5,800085f6 <tinst_tests+0x5ea>
    800085f2:	62a0106f          	j	80009c1c <tinst_tests+0x1c10>
    800085f6:	6418                	ld	a4,8(s0)
    800085f8:	47bd                	li	a5,15
    800085fa:	0001a597          	auipc	a1,0x1a
    800085fe:	54658593          	addi	a1,a1,1350 # 80022b40 <__func__.2+0x2d8>
    80008602:	00f71463          	bne	a4,a5,8000860a <tinst_tests+0x5fe>
    80008606:	5c80106f          	j	80009bce <tinst_tests+0x1bc2>
    8000860a:	0001a517          	auipc	a0,0x1a
    8000860e:	57650513          	addi	a0,a0,1398 # 80022b80 <__func__.2+0x318>
    80008612:	65e180ef          	jal	80020c70 <printf>
    80008616:	0003d797          	auipc	a5,0x3d
    8000861a:	9fb7c783          	lbu	a5,-1541(a5) # 80045011 <excpt+0x1>
    8000861e:	c799                	beqz	a5,8000862c <tinst_tests+0x620>
    80008620:	6418                	ld	a4,8(s0)
    80008622:	47bd                	li	a5,15
    80008624:	00f71463          	bne	a4,a5,8000862c <tinst_tests+0x620>
    80008628:	04e0206f          	j	8000a676 <tinst_tests+0x266a>
    8000862c:	0001a517          	auipc	a0,0x1a
    80008630:	55c50513          	addi	a0,a0,1372 # 80022b88 <__func__.2+0x320>
    80008634:	63c180ef          	jal	80020c70 <printf>
    80008638:	02900513          	li	a0,41
    8000863c:	4c5170ef          	jal	80020300 <putchar>
    80008640:	4529                	li	a0,10
    80008642:	4bf170ef          	jal	80020300 <putchar>
    80008646:	00090a63          	beqz	s2,8000865a <tinst_tests+0x64e>
    8000864a:	0003d797          	auipc	a5,0x3d
    8000864e:	9c77c783          	lbu	a5,-1593(a5) # 80045011 <excpt+0x1>
    80008652:	c399                	beqz	a5,80008658 <tinst_tests+0x64c>
    80008654:	1650106f          	j	80009fb8 <tinst_tests+0x1fac>
    80008658:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000865a:	0330000f          	fence	rw,rw
    8000865e:	4785                	li	a5,1
    80008660:	0003d717          	auipc	a4,0x3d
    80008664:	9e073423          	sd	zero,-1560(a4) # 80045048 <excpt+0x38>
    80008668:	00f41023          	sh	a5,0(s0)
    8000866c:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80008670:	deadc7b7          	lui	a5,0xdeadc
    80008674:	40019737          	lui	a4,0x40019
    80008678:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000867c:	070a                	slli	a4,a4,0x2
    8000867e:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008682:	0001c617          	auipc	a2,0x1c
    80008686:	fb660613          	addi	a2,a2,-74 # 80024638 <__func__.2+0x1dd0>
    8000868a:	08200593          	li	a1,130
    8000868e:	0001a517          	auipc	a0,0x1a
    80008692:	4da50513          	addi	a0,a0,1242 # 80022b68 <__func__.2+0x300>
    80008696:	5da180ef          	jal	80020c70 <printf>
    8000869a:	0003d797          	auipc	a5,0x3d
    8000869e:	9777c783          	lbu	a5,-1673(a5) # 80045011 <excpt+0x1>
    800086a2:	e399                	bnez	a5,800086a8 <tinst_tests+0x69c>
    800086a4:	5d20106f          	j	80009c76 <tinst_tests+0x1c6a>
    800086a8:	6418                	ld	a4,8(s0)
    800086aa:	47bd                	li	a5,15
    800086ac:	0001a597          	auipc	a1,0x1a
    800086b0:	49458593          	addi	a1,a1,1172 # 80022b40 <__func__.2+0x2d8>
    800086b4:	00f71463          	bne	a4,a5,800086bc <tinst_tests+0x6b0>
    800086b8:	5700106f          	j	80009c28 <tinst_tests+0x1c1c>
    800086bc:	0001a517          	auipc	a0,0x1a
    800086c0:	4c450513          	addi	a0,a0,1220 # 80022b80 <__func__.2+0x318>
    800086c4:	5ac180ef          	jal	80020c70 <printf>
    800086c8:	0003d797          	auipc	a5,0x3d
    800086cc:	9497c783          	lbu	a5,-1719(a5) # 80045011 <excpt+0x1>
    800086d0:	c799                	beqz	a5,800086de <tinst_tests+0x6d2>
    800086d2:	6418                	ld	a4,8(s0)
    800086d4:	47bd                	li	a5,15
    800086d6:	00f71463          	bne	a4,a5,800086de <tinst_tests+0x6d2>
    800086da:	0380206f          	j	8000a712 <tinst_tests+0x2706>
    800086de:	0001a517          	auipc	a0,0x1a
    800086e2:	4aa50513          	addi	a0,a0,1194 # 80022b88 <__func__.2+0x320>
    800086e6:	58a180ef          	jal	80020c70 <printf>
    800086ea:	02900513          	li	a0,41
    800086ee:	413170ef          	jal	80020300 <putchar>
    800086f2:	4529                	li	a0,10
    800086f4:	40d170ef          	jal	80020300 <putchar>
    800086f8:	00090a63          	beqz	s2,8000870c <tinst_tests+0x700>
    800086fc:	0003d797          	auipc	a5,0x3d
    80008700:	9157c783          	lbu	a5,-1771(a5) # 80045011 <excpt+0x1>
    80008704:	c399                	beqz	a5,8000870a <tinst_tests+0x6fe>
    80008706:	1010106f          	j	8000a006 <tinst_tests+0x1ffa>
    8000870a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000870c:	0330000f          	fence	rw,rw
    80008710:	4785                	li	a5,1
    80008712:	0003d717          	auipc	a4,0x3d
    80008716:	92073b23          	sd	zero,-1738(a4) # 80045048 <excpt+0x38>
    8000871a:	00f41023          	sh	a5,0(s0)
    8000871e:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80008722:	37ab77b7          	lui	a5,0x37ab7
    80008726:	078a                	slli	a5,a5,0x2
    80008728:	40019737          	lui	a4,0x40019
    8000872c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80008730:	070a                	slli	a4,a4,0x2
    80008732:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008736:	0001c617          	auipc	a2,0x1c
    8000873a:	f4260613          	addi	a2,a2,-190 # 80024678 <__func__.2+0x1e10>
    8000873e:	08200593          	li	a1,130
    80008742:	0001a517          	auipc	a0,0x1a
    80008746:	42650513          	addi	a0,a0,1062 # 80022b68 <__func__.2+0x300>
    8000874a:	526180ef          	jal	80020c70 <printf>
    8000874e:	0003d797          	auipc	a5,0x3d
    80008752:	8c37c783          	lbu	a5,-1853(a5) # 80045011 <excpt+0x1>
    80008756:	e399                	bnez	a5,8000875c <tinst_tests+0x750>
    80008758:	5780106f          	j	80009cd0 <tinst_tests+0x1cc4>
    8000875c:	6418                	ld	a4,8(s0)
    8000875e:	47bd                	li	a5,15
    80008760:	0001a597          	auipc	a1,0x1a
    80008764:	3e058593          	addi	a1,a1,992 # 80022b40 <__func__.2+0x2d8>
    80008768:	00f71463          	bne	a4,a5,80008770 <tinst_tests+0x764>
    8000876c:	5160106f          	j	80009c82 <tinst_tests+0x1c76>
    80008770:	0001a517          	auipc	a0,0x1a
    80008774:	41050513          	addi	a0,a0,1040 # 80022b80 <__func__.2+0x318>
    80008778:	4f8180ef          	jal	80020c70 <printf>
    8000877c:	0003d797          	auipc	a5,0x3d
    80008780:	8957c783          	lbu	a5,-1899(a5) # 80045011 <excpt+0x1>
    80008784:	c799                	beqz	a5,80008792 <tinst_tests+0x786>
    80008786:	6418                	ld	a4,8(s0)
    80008788:	47bd                	li	a5,15
    8000878a:	00f71463          	bne	a4,a5,80008792 <tinst_tests+0x786>
    8000878e:	0200206f          	j	8000a7ae <tinst_tests+0x27a2>
    80008792:	0001a517          	auipc	a0,0x1a
    80008796:	3f650513          	addi	a0,a0,1014 # 80022b88 <__func__.2+0x320>
    8000879a:	4d6180ef          	jal	80020c70 <printf>
    8000879e:	02900513          	li	a0,41
    800087a2:	35f170ef          	jal	80020300 <putchar>
    800087a6:	4529                	li	a0,10
    800087a8:	359170ef          	jal	80020300 <putchar>
    800087ac:	00090a63          	beqz	s2,800087c0 <tinst_tests+0x7b4>
    800087b0:	0003d797          	auipc	a5,0x3d
    800087b4:	8617c783          	lbu	a5,-1951(a5) # 80045011 <excpt+0x1>
    800087b8:	c399                	beqz	a5,800087be <tinst_tests+0x7b2>
    800087ba:	09b0106f          	j	8000a054 <tinst_tests+0x2048>
    800087be:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800087c0:	0330000f          	fence	rw,rw
    800087c4:	4785                	li	a5,1
    800087c6:	0003d717          	auipc	a4,0x3d
    800087ca:	88073123          	sd	zero,-1918(a4) # 80045048 <excpt+0x38>
    800087ce:	00f41023          	sh	a5,0(s0)
    800087d2:	0330000f          	fence	rw,rw
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800087d6:	40019537          	lui	a0,0x40019
    800087da:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800087dc:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800087de:	0001c617          	auipc	a2,0x1c
    800087e2:	eda60613          	addi	a2,a2,-294 # 800246b8 <__func__.2+0x1e50>
    800087e6:	08200593          	li	a1,130
    800087ea:	0001a517          	auipc	a0,0x1a
    800087ee:	37e50513          	addi	a0,a0,894 # 80022b68 <__func__.2+0x300>
    800087f2:	47e180ef          	jal	80020c70 <printf>
    800087f6:	0003d797          	auipc	a5,0x3d
    800087fa:	81b7c783          	lbu	a5,-2021(a5) # 80045011 <excpt+0x1>
    800087fe:	c799                	beqz	a5,8000880c <tinst_tests+0x800>
    80008800:	6418                	ld	a4,8(s0)
    80008802:	47b5                	li	a5,13
    80008804:	00f71463          	bne	a4,a5,8000880c <tinst_tests+0x800>
    80008808:	1970106f          	j	8000a19e <tinst_tests+0x2192>
    8000880c:	0001a597          	auipc	a1,0x1a
    80008810:	33458593          	addi	a1,a1,820 # 80022b40 <__func__.2+0x2d8>
    80008814:	0001a517          	auipc	a0,0x1a
    80008818:	36c50513          	addi	a0,a0,876 # 80022b80 <__func__.2+0x318>
    8000881c:	454180ef          	jal	80020c70 <printf>
    80008820:	0003c797          	auipc	a5,0x3c
    80008824:	7f17c783          	lbu	a5,2033(a5) # 80045011 <excpt+0x1>
    80008828:	c799                	beqz	a5,80008836 <tinst_tests+0x82a>
    8000882a:	6418                	ld	a4,8(s0)
    8000882c:	47b5                	li	a5,13
    8000882e:	00f71463          	bne	a4,a5,80008836 <tinst_tests+0x82a>
    80008832:	0180206f          	j	8000a84a <tinst_tests+0x283e>
    80008836:	0001a517          	auipc	a0,0x1a
    8000883a:	35250513          	addi	a0,a0,850 # 80022b88 <__func__.2+0x320>
    8000883e:	432180ef          	jal	80020c70 <printf>
    80008842:	02900513          	li	a0,41
    80008846:	2bb170ef          	jal	80020300 <putchar>
    8000884a:	4529                	li	a0,10
    8000884c:	2b5170ef          	jal	80020300 <putchar>
    80008850:	00090a63          	beqz	s2,80008864 <tinst_tests+0x858>
    80008854:	0003c797          	auipc	a5,0x3c
    80008858:	7bd7c783          	lbu	a5,1981(a5) # 80045011 <excpt+0x1>
    8000885c:	c399                	beqz	a5,80008862 <tinst_tests+0x856>
    8000885e:	0450106f          	j	8000a0a2 <tinst_tests+0x2096>
    80008862:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008864:	0330000f          	fence	rw,rw
    80008868:	4785                	li	a5,1
    8000886a:	0003c717          	auipc	a4,0x3c
    8000886e:	7c073f23          	sd	zero,2014(a4) # 80045048 <excpt+0x38>
    80008872:	00f41023          	sh	a5,0(s0)
    80008876:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    8000887a:	40019537          	lui	a0,0x40019
    8000887e:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008880:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008882:	0001c617          	auipc	a2,0x1c
    80008886:	e7660613          	addi	a2,a2,-394 # 800246f8 <__func__.2+0x1e90>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    8000888a:	84ae                	mv	s1,a1
    8000888c:	0001a517          	auipc	a0,0x1a
    80008890:	2dc50513          	addi	a0,a0,732 # 80022b68 <__func__.2+0x300>
    80008894:	08200593          	li	a1,130
    80008898:	3d8180ef          	jal	80020c70 <printf>
    8000889c:	0003c797          	auipc	a5,0x3c
    800088a0:	7757c783          	lbu	a5,1909(a5) # 80045011 <excpt+0x1>
    800088a4:	c799                	beqz	a5,800088b2 <tinst_tests+0x8a6>
    800088a6:	6418                	ld	a4,8(s0)
    800088a8:	47b5                	li	a5,13
    800088aa:	00f71463          	bne	a4,a5,800088b2 <tinst_tests+0x8a6>
    800088ae:	1450106f          	j	8000a1f2 <tinst_tests+0x21e6>
    800088b2:	0001a597          	auipc	a1,0x1a
    800088b6:	28e58593          	addi	a1,a1,654 # 80022b40 <__func__.2+0x2d8>
    800088ba:	0001a517          	auipc	a0,0x1a
    800088be:	2c650513          	addi	a0,a0,710 # 80022b80 <__func__.2+0x318>
    800088c2:	3ae180ef          	jal	80020c70 <printf>
    800088c6:	0003c797          	auipc	a5,0x3c
    800088ca:	74b7c783          	lbu	a5,1867(a5) # 80045011 <excpt+0x1>
    800088ce:	c799                	beqz	a5,800088dc <tinst_tests+0x8d0>
    800088d0:	6418                	ld	a4,8(s0)
    800088d2:	47b5                	li	a5,13
    800088d4:	00f71463          	bne	a4,a5,800088dc <tinst_tests+0x8d0>
    800088d8:	7f90106f          	j	8000a8d0 <tinst_tests+0x28c4>
    800088dc:	0001a517          	auipc	a0,0x1a
    800088e0:	2ac50513          	addi	a0,a0,684 # 80022b88 <__func__.2+0x320>
    800088e4:	38c180ef          	jal	80020c70 <printf>
    800088e8:	02900513          	li	a0,41
    800088ec:	215170ef          	jal	80020300 <putchar>
    800088f0:	4529                	li	a0,10
    800088f2:	20f170ef          	jal	80020300 <putchar>
    800088f6:	00090a63          	beqz	s2,8000890a <tinst_tests+0x8fe>
    800088fa:	0003c797          	auipc	a5,0x3c
    800088fe:	7177c783          	lbu	a5,1815(a5) # 80045011 <excpt+0x1>
    80008902:	c399                	beqz	a5,80008908 <tinst_tests+0x8fc>
    80008904:	7d80106f          	j	8000a0dc <tinst_tests+0x20d0>
    80008908:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000890a:	0330000f          	fence	rw,rw
    8000890e:	4785                	li	a5,1
    80008910:	0003c717          	auipc	a4,0x3c
    80008914:	72073c23          	sd	zero,1848(a4) # 80045048 <excpt+0x38>
    80008918:	00f41023          	sh	a5,0(s0)
    8000891c:	0330000f          	fence	rw,rw
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008920:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008924:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008926:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008928:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000892a:	0001c617          	auipc	a2,0x1c
    8000892e:	d8e60613          	addi	a2,a2,-626 # 800246b8 <__func__.2+0x1e50>
    80008932:	08200593          	li	a1,130
    80008936:	0001a517          	auipc	a0,0x1a
    8000893a:	23250513          	addi	a0,a0,562 # 80022b68 <__func__.2+0x300>
    8000893e:	332180ef          	jal	80020c70 <printf>
    80008942:	0003c797          	auipc	a5,0x3c
    80008946:	6cf7c783          	lbu	a5,1743(a5) # 80045011 <excpt+0x1>
    8000894a:	c799                	beqz	a5,80008958 <tinst_tests+0x94c>
    8000894c:	6418                	ld	a4,8(s0)
    8000894e:	47bd                	li	a5,15
    80008950:	00f71463          	bne	a4,a5,80008958 <tinst_tests+0x94c>
    80008954:	0b30106f          	j	8000a206 <tinst_tests+0x21fa>
    80008958:	0001a597          	auipc	a1,0x1a
    8000895c:	1e858593          	addi	a1,a1,488 # 80022b40 <__func__.2+0x2d8>
    80008960:	0001a517          	auipc	a0,0x1a
    80008964:	22050513          	addi	a0,a0,544 # 80022b80 <__func__.2+0x318>
    80008968:	308180ef          	jal	80020c70 <printf>
    8000896c:	0003c797          	auipc	a5,0x3c
    80008970:	6a57c783          	lbu	a5,1701(a5) # 80045011 <excpt+0x1>
    80008974:	c799                	beqz	a5,80008982 <tinst_tests+0x976>
    80008976:	6418                	ld	a4,8(s0)
    80008978:	47bd                	li	a5,15
    8000897a:	00f71463          	bne	a4,a5,80008982 <tinst_tests+0x976>
    8000897e:	7dd0106f          	j	8000a95a <tinst_tests+0x294e>
    80008982:	0001a517          	auipc	a0,0x1a
    80008986:	20650513          	addi	a0,a0,518 # 80022b88 <__func__.2+0x320>
    8000898a:	2e6180ef          	jal	80020c70 <printf>
    8000898e:	02900513          	li	a0,41
    80008992:	16f170ef          	jal	80020300 <putchar>
    80008996:	4529                	li	a0,10
    80008998:	169170ef          	jal	80020300 <putchar>
    8000899c:	00090e63          	beqz	s2,800089b8 <tinst_tests+0x9ac>
    800089a0:	0003c797          	auipc	a5,0x3c
    800089a4:	6717c783          	lbu	a5,1649(a5) # 80045011 <excpt+0x1>
    800089a8:	c799                	beqz	a5,800089b6 <tinst_tests+0x9aa>
    800089aa:	6418                	ld	a4,8(s0)
    800089ac:	47bd                	li	a5,15
    800089ae:	00f71463          	bne	a4,a5,800089b6 <tinst_tests+0x9aa>
    800089b2:	6060206f          	j	8000afb8 <tinst_tests+0x2fac>
    800089b6:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800089b8:	0330000f          	fence	rw,rw
    800089bc:	4785                	li	a5,1
    800089be:	0003c717          	auipc	a4,0x3c
    800089c2:	68073523          	sd	zero,1674(a4) # 80045048 <excpt+0x38>
    800089c6:	00f41023          	sh	a5,0(s0)
    800089ca:	0330000f          	fence	rw,rw
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800089ce:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    800089d2:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    800089d4:	050a                	slli	a0,a0,0x2
    asm volatile(
    800089d6:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    800089d8:	0001c617          	auipc	a2,0x1c
    800089dc:	d6060613          	addi	a2,a2,-672 # 80024738 <__func__.2+0x1ed0>
    800089e0:	08200593          	li	a1,130
    800089e4:	0001a517          	auipc	a0,0x1a
    800089e8:	18450513          	addi	a0,a0,388 # 80022b68 <__func__.2+0x300>
    800089ec:	284180ef          	jal	80020c70 <printf>
    800089f0:	0003c797          	auipc	a5,0x3c
    800089f4:	6217c783          	lbu	a5,1569(a5) # 80045011 <excpt+0x1>
    800089f8:	c799                	beqz	a5,80008a06 <tinst_tests+0x9fa>
    800089fa:	6418                	ld	a4,8(s0)
    800089fc:	47bd                	li	a5,15
    800089fe:	00f71463          	bne	a4,a5,80008a06 <tinst_tests+0x9fa>
    80008a02:	0190106f          	j	8000a21a <tinst_tests+0x220e>
    80008a06:	0001a597          	auipc	a1,0x1a
    80008a0a:	13a58593          	addi	a1,a1,314 # 80022b40 <__func__.2+0x2d8>
    80008a0e:	0001a517          	auipc	a0,0x1a
    80008a12:	17250513          	addi	a0,a0,370 # 80022b80 <__func__.2+0x318>
    80008a16:	25a180ef          	jal	80020c70 <printf>
    80008a1a:	0003c797          	auipc	a5,0x3c
    80008a1e:	5f77c783          	lbu	a5,1527(a5) # 80045011 <excpt+0x1>
    80008a22:	c799                	beqz	a5,80008a30 <tinst_tests+0xa24>
    80008a24:	6418                	ld	a4,8(s0)
    80008a26:	47bd                	li	a5,15
    80008a28:	00f71463          	bne	a4,a5,80008a30 <tinst_tests+0xa24>
    80008a2c:	7bd0106f          	j	8000a9e8 <tinst_tests+0x29dc>
    80008a30:	0001a517          	auipc	a0,0x1a
    80008a34:	15850513          	addi	a0,a0,344 # 80022b88 <__func__.2+0x320>
    80008a38:	238180ef          	jal	80020c70 <printf>
    80008a3c:	02900513          	li	a0,41
    80008a40:	0c1170ef          	jal	80020300 <putchar>
    80008a44:	4529                	li	a0,10
    80008a46:	0bb170ef          	jal	80020300 <putchar>
    80008a4a:	00090e63          	beqz	s2,80008a66 <tinst_tests+0xa5a>
    80008a4e:	0003c797          	auipc	a5,0x3c
    80008a52:	5c37c783          	lbu	a5,1475(a5) # 80045011 <excpt+0x1>
    80008a56:	c799                	beqz	a5,80008a64 <tinst_tests+0xa58>
    80008a58:	6418                	ld	a4,8(s0)
    80008a5a:	47bd                	li	a5,15
    80008a5c:	00f71463          	bne	a4,a5,80008a64 <tinst_tests+0xa58>
    80008a60:	58e0206f          	j	8000afee <tinst_tests+0x2fe2>
    80008a64:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008a66:	0330000f          	fence	rw,rw
    80008a6a:	4785                	li	a5,1
    80008a6c:	0003c717          	auipc	a4,0x3c
    80008a70:	5c073e23          	sd	zero,1500(a4) # 80045048 <excpt+0x38>
    80008a74:	00f41023          	sh	a5,0(s0)
    80008a78:	0330000f          	fence	rw,rw
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008a7c:	400194b7          	lui	s1,0x40019
    80008a80:	048a                	slli	s1,s1,0x2
    80008a82:	1004a4af          	lr.w	s1,(s1)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008a86:	0001c617          	auipc	a2,0x1c
    80008a8a:	cf260613          	addi	a2,a2,-782 # 80024778 <__func__.2+0x1f10>
    80008a8e:	08200593          	li	a1,130
    80008a92:	0001a517          	auipc	a0,0x1a
    80008a96:	0d650513          	addi	a0,a0,214 # 80022b68 <__func__.2+0x300>
    80008a9a:	1d6180ef          	jal	80020c70 <printf>
    80008a9e:	0003c797          	auipc	a5,0x3c
    80008aa2:	5737c783          	lbu	a5,1395(a5) # 80045011 <excpt+0x1>
    value = lr_w(vaddr_f);
    80008aa6:	1482                	slli	s1,s1,0x20
    80008aa8:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008aaa:	e399                	bnez	a5,80008ab0 <tinst_tests+0xaa4>
    80008aac:	27e0106f          	j	80009d2a <tinst_tests+0x1d1e>
    80008ab0:	6418                	ld	a4,8(s0)
    80008ab2:	47b5                	li	a5,13
    80008ab4:	0001a597          	auipc	a1,0x1a
    80008ab8:	08c58593          	addi	a1,a1,140 # 80022b40 <__func__.2+0x2d8>
    80008abc:	00f71463          	bne	a4,a5,80008ac4 <tinst_tests+0xab8>
    80008ac0:	21c0106f          	j	80009cdc <tinst_tests+0x1cd0>
    80008ac4:	0001a517          	auipc	a0,0x1a
    80008ac8:	0bc50513          	addi	a0,a0,188 # 80022b80 <__func__.2+0x318>
    80008acc:	1a4180ef          	jal	80020c70 <printf>
    80008ad0:	0003c797          	auipc	a5,0x3c
    80008ad4:	5417c783          	lbu	a5,1345(a5) # 80045011 <excpt+0x1>
    80008ad8:	c799                	beqz	a5,80008ae6 <tinst_tests+0xada>
    80008ada:	6418                	ld	a4,8(s0)
    80008adc:	47b5                	li	a5,13
    80008ade:	00f71463          	bne	a4,a5,80008ae6 <tinst_tests+0xada>
    80008ae2:	6380106f          	j	8000a11a <tinst_tests+0x210e>
    80008ae6:	0001a517          	auipc	a0,0x1a
    80008aea:	0a250513          	addi	a0,a0,162 # 80022b88 <__func__.2+0x320>
    80008aee:	182180ef          	jal	80020c70 <printf>
    80008af2:	02900513          	li	a0,41
    80008af6:	00b170ef          	jal	80020300 <putchar>
    80008afa:	4529                	li	a0,10
    80008afc:	005170ef          	jal	80020300 <putchar>
    80008b00:	00090e63          	beqz	s2,80008b1c <tinst_tests+0xb10>
    80008b04:	0003c797          	auipc	a5,0x3c
    80008b08:	50d7c783          	lbu	a5,1293(a5) # 80045011 <excpt+0x1>
    80008b0c:	c799                	beqz	a5,80008b1a <tinst_tests+0xb0e>
    80008b0e:	6418                	ld	a4,8(s0)
    80008b10:	47b5                	li	a5,13
    80008b12:	00f71463          	bne	a4,a5,80008b1a <tinst_tests+0xb0e>
    80008b16:	50a0206f          	j	8000b020 <tinst_tests+0x3014>
    80008b1a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b1c:	0330000f          	fence	rw,rw
    80008b20:	4785                	li	a5,1
    80008b22:	0003c717          	auipc	a4,0x3c
    80008b26:	52073323          	sd	zero,1318(a4) # 80045048 <excpt+0x38>
    80008b2a:	00f41023          	sh	a5,0(s0)
    80008b2e:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008b32:	400197b7          	lui	a5,0x40019
    80008b36:	078a                	slli	a5,a5,0x2
    80008b38:	1897a4af          	sc.w	s1,s1,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008b3c:	0001c617          	auipc	a2,0x1c
    80008b40:	c7c60613          	addi	a2,a2,-900 # 800247b8 <__func__.2+0x1f50>
    80008b44:	08200593          	li	a1,130
    80008b48:	0001a517          	auipc	a0,0x1a
    80008b4c:	02050513          	addi	a0,a0,32 # 80022b68 <__func__.2+0x300>
    80008b50:	120180ef          	jal	80020c70 <printf>
    80008b54:	0003c797          	auipc	a5,0x3c
    80008b58:	4bd7c783          	lbu	a5,1213(a5) # 80045011 <excpt+0x1>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008b5c:	2481                	sext.w	s1,s1
    80008b5e:	e399                	bnez	a5,80008b64 <tinst_tests+0xb58>
    80008b60:	2240106f          	j	80009d84 <tinst_tests+0x1d78>
    80008b64:	6418                	ld	a4,8(s0)
    80008b66:	47bd                	li	a5,15
    80008b68:	0001a597          	auipc	a1,0x1a
    80008b6c:	fd858593          	addi	a1,a1,-40 # 80022b40 <__func__.2+0x2d8>
    80008b70:	00f71463          	bne	a4,a5,80008b78 <tinst_tests+0xb6c>
    80008b74:	1c20106f          	j	80009d36 <tinst_tests+0x1d2a>
    80008b78:	0001a517          	auipc	a0,0x1a
    80008b7c:	00850513          	addi	a0,a0,8 # 80022b80 <__func__.2+0x318>
    80008b80:	0f0180ef          	jal	80020c70 <printf>
    80008b84:	0003c797          	auipc	a5,0x3c
    80008b88:	48d7c783          	lbu	a5,1165(a5) # 80045011 <excpt+0x1>
    80008b8c:	c799                	beqz	a5,80008b9a <tinst_tests+0xb8e>
    80008b8e:	6418                	ld	a4,8(s0)
    80008b90:	47bd                	li	a5,15
    80008b92:	00f71463          	bne	a4,a5,80008b9a <tinst_tests+0xb8e>
    80008b96:	5c60106f          	j	8000a15c <tinst_tests+0x2150>
    80008b9a:	0001a517          	auipc	a0,0x1a
    80008b9e:	fee50513          	addi	a0,a0,-18 # 80022b88 <__func__.2+0x320>
    80008ba2:	0ce180ef          	jal	80020c70 <printf>
    80008ba6:	02900513          	li	a0,41
    80008baa:	756170ef          	jal	80020300 <putchar>
    80008bae:	4529                	li	a0,10
    80008bb0:	750170ef          	jal	80020300 <putchar>
    80008bb4:	00090e63          	beqz	s2,80008bd0 <tinst_tests+0xbc4>
    80008bb8:	0003c797          	auipc	a5,0x3c
    80008bbc:	4597c783          	lbu	a5,1113(a5) # 80045011 <excpt+0x1>
    80008bc0:	c799                	beqz	a5,80008bce <tinst_tests+0xbc2>
    80008bc2:	6418                	ld	a4,8(s0)
    80008bc4:	47bd                	li	a5,15
    80008bc6:	00f71463          	bne	a4,a5,80008bce <tinst_tests+0xbc2>
    80008bca:	4980206f          	j	8000b062 <tinst_tests+0x3056>
    80008bce:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008bd0:	0330000f          	fence	rw,rw
    80008bd4:	4785                	li	a5,1
    80008bd6:	0003c717          	auipc	a4,0x3c
    80008bda:	46073923          	sd	zero,1138(a4) # 80045048 <excpt+0x38>
    80008bde:	00f41023          	sh	a5,0(s0)
    80008be2:	0330000f          	fence	rw,rw
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008be6:	400197b7          	lui	a5,0x40019
    80008bea:	078a                	slli	a5,a5,0x2
    80008bec:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008bf0:	0001c617          	auipc	a2,0x1c
    80008bf4:	c0860613          	addi	a2,a2,-1016 # 800247f8 <__func__.2+0x1f90>
    80008bf8:	08200593          	li	a1,130
    80008bfc:	0001a517          	auipc	a0,0x1a
    80008c00:	f6c50513          	addi	a0,a0,-148 # 80022b68 <__func__.2+0x300>
    80008c04:	06c180ef          	jal	80020c70 <printf>
    80008c08:	0003c797          	auipc	a5,0x3c
    80008c0c:	4097c783          	lbu	a5,1033(a5) # 80045011 <excpt+0x1>
    80008c10:	e399                	bnez	a5,80008c16 <tinst_tests+0xc0a>
    80008c12:	1cc0106f          	j	80009dde <tinst_tests+0x1dd2>
    80008c16:	6418                	ld	a4,8(s0)
    80008c18:	47bd                	li	a5,15
    80008c1a:	0001a597          	auipc	a1,0x1a
    80008c1e:	f2658593          	addi	a1,a1,-218 # 80022b40 <__func__.2+0x2d8>
    80008c22:	00f71463          	bne	a4,a5,80008c2a <tinst_tests+0xc1e>
    80008c26:	16a0106f          	j	80009d90 <tinst_tests+0x1d84>
    80008c2a:	0001a517          	auipc	a0,0x1a
    80008c2e:	f5650513          	addi	a0,a0,-170 # 80022b80 <__func__.2+0x318>
    80008c32:	03e180ef          	jal	80020c70 <printf>
    80008c36:	0003c797          	auipc	a5,0x3c
    80008c3a:	3db7c783          	lbu	a5,987(a5) # 80045011 <excpt+0x1>
    80008c3e:	c799                	beqz	a5,80008c4c <tinst_tests+0xc40>
    80008c40:	6418                	ld	a4,8(s0)
    80008c42:	47bd                	li	a5,15
    80008c44:	00f71463          	bne	a4,a5,80008c4c <tinst_tests+0xc40>
    80008c48:	5680106f          	j	8000a1b0 <tinst_tests+0x21a4>
    80008c4c:	0001a517          	auipc	a0,0x1a
    80008c50:	f3c50513          	addi	a0,a0,-196 # 80022b88 <__func__.2+0x320>
    80008c54:	01c180ef          	jal	80020c70 <printf>
    80008c58:	02900513          	li	a0,41
    80008c5c:	6a4170ef          	jal	80020300 <putchar>
    80008c60:	4529                	li	a0,10
    80008c62:	69e170ef          	jal	80020300 <putchar>
    80008c66:	00090e63          	beqz	s2,80008c82 <tinst_tests+0xc76>
    80008c6a:	0003c797          	auipc	a5,0x3c
    80008c6e:	3a77c783          	lbu	a5,935(a5) # 80045011 <excpt+0x1>
    80008c72:	c799                	beqz	a5,80008c80 <tinst_tests+0xc74>
    80008c74:	6418                	ld	a4,8(s0)
    80008c76:	47bd                	li	a5,15
    80008c78:	00f71463          	bne	a4,a5,80008c80 <tinst_tests+0xc74>
    80008c7c:	4280206f          	j	8000b0a4 <tinst_tests+0x3098>
    80008c80:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c82:	0330000f          	fence	rw,rw
    80008c86:	4785                	li	a5,1
    80008c88:	0003c717          	auipc	a4,0x3c
    80008c8c:	3c073023          	sd	zero,960(a4) # 80045048 <excpt+0x38>
    80008c90:	00f41023          	sh	a5,0(s0)
    80008c94:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008c98:	400197b7          	lui	a5,0x40019
    80008c9c:	078a                	slli	a5,a5,0x2
    80008c9e:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008ca2:	0001c617          	auipc	a2,0x1c
    80008ca6:	b9660613          	addi	a2,a2,-1130 # 80024838 <__func__.2+0x1fd0>
    80008caa:	08200593          	li	a1,130
    80008cae:	0001a517          	auipc	a0,0x1a
    80008cb2:	eba50513          	addi	a0,a0,-326 # 80022b68 <__func__.2+0x300>
    80008cb6:	7bb170ef          	jal	80020c70 <printf>
    80008cba:	0003c797          	auipc	a5,0x3c
    80008cbe:	3577c783          	lbu	a5,855(a5) # 80045011 <excpt+0x1>
    80008cc2:	c399                	beqz	a5,80008cc8 <tinst_tests+0xcbc>
    80008cc4:	1ac0106f          	j	80009e70 <tinst_tests+0x1e64>
    80008cc8:	0001a597          	auipc	a1,0x1a
    80008ccc:	e7858593          	addi	a1,a1,-392 # 80022b40 <__func__.2+0x2d8>
    80008cd0:	0001a517          	auipc	a0,0x1a
    80008cd4:	eb050513          	addi	a0,a0,-336 # 80022b80 <__func__.2+0x318>
    80008cd8:	799170ef          	jal	80020c70 <printf>
    80008cdc:	0003c797          	auipc	a5,0x3c
    80008ce0:	3357c783          	lbu	a5,821(a5) # 80045011 <excpt+0x1>
    80008ce4:	c799                	beqz	a5,80008cf2 <tinst_tests+0xce6>
    80008ce6:	6418                	ld	a4,8(s0)
    80008ce8:	47bd                	li	a5,15
    80008cea:	00f71463          	bne	a4,a5,80008cf2 <tinst_tests+0xce6>
    80008cee:	6930106f          	j	8000ab80 <tinst_tests+0x2b74>
    80008cf2:	0001a517          	auipc	a0,0x1a
    80008cf6:	e9650513          	addi	a0,a0,-362 # 80022b88 <__func__.2+0x320>
    80008cfa:	777170ef          	jal	80020c70 <printf>
    80008cfe:	02900513          	li	a0,41
    80008d02:	5fe170ef          	jal	80020300 <putchar>
    80008d06:	4529                	li	a0,10
    80008d08:	5f8170ef          	jal	80020300 <putchar>
    80008d0c:	00090e63          	beqz	s2,80008d28 <tinst_tests+0xd1c>
    80008d10:	0003c797          	auipc	a5,0x3c
    80008d14:	3017c783          	lbu	a5,769(a5) # 80045011 <excpt+0x1>
    80008d18:	c799                	beqz	a5,80008d26 <tinst_tests+0xd1a>
    80008d1a:	6418                	ld	a4,8(s0)
    80008d1c:	47bd                	li	a5,15
    80008d1e:	00f71463          	bne	a4,a5,80008d26 <tinst_tests+0xd1a>
    80008d22:	3c40206f          	j	8000b0e6 <tinst_tests+0x30da>
    80008d26:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d28:	0330000f          	fence	rw,rw
    80008d2c:	4785                	li	a5,1
    80008d2e:	0003c717          	auipc	a4,0x3c
    80008d32:	30073d23          	sd	zero,794(a4) # 80045048 <excpt+0x38>
    80008d36:	00f41023          	sh	a5,0(s0)
    80008d3a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008d3e:	400197b7          	lui	a5,0x40019
    80008d42:	078a                	slli	a5,a5,0x2
    80008d44:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008d48:	0001c617          	auipc	a2,0x1c
    80008d4c:	b3060613          	addi	a2,a2,-1232 # 80024878 <__func__.2+0x2010>
    80008d50:	08200593          	li	a1,130
    80008d54:	0001a517          	auipc	a0,0x1a
    80008d58:	e1450513          	addi	a0,a0,-492 # 80022b68 <__func__.2+0x300>
    80008d5c:	715170ef          	jal	80020c70 <printf>
    80008d60:	0003c797          	auipc	a5,0x3c
    80008d64:	2b17c783          	lbu	a5,689(a5) # 80045011 <excpt+0x1>
    80008d68:	e399                	bnez	a5,80008d6e <tinst_tests+0xd62>
    80008d6a:	6100106f          	j	8000a37a <tinst_tests+0x236e>
    80008d6e:	6418                	ld	a4,8(s0)
    80008d70:	47bd                	li	a5,15
    80008d72:	0001a597          	auipc	a1,0x1a
    80008d76:	dce58593          	addi	a1,a1,-562 # 80022b40 <__func__.2+0x2d8>
    80008d7a:	00f71463          	bne	a4,a5,80008d82 <tinst_tests+0xd76>
    80008d7e:	5b00106f          	j	8000a32e <tinst_tests+0x2322>
    80008d82:	0001a517          	auipc	a0,0x1a
    80008d86:	dfe50513          	addi	a0,a0,-514 # 80022b80 <__func__.2+0x318>
    80008d8a:	6e7170ef          	jal	80020c70 <printf>
    80008d8e:	0003c797          	auipc	a5,0x3c
    80008d92:	2837c783          	lbu	a5,643(a5) # 80045011 <excpt+0x1>
    80008d96:	c799                	beqz	a5,80008da4 <tinst_tests+0xd98>
    80008d98:	6418                	ld	a4,8(s0)
    80008d9a:	47bd                	li	a5,15
    80008d9c:	00f71463          	bne	a4,a5,80008da4 <tinst_tests+0xd98>
    80008da0:	6230106f          	j	8000abc2 <tinst_tests+0x2bb6>
    80008da4:	0001a517          	auipc	a0,0x1a
    80008da8:	de450513          	addi	a0,a0,-540 # 80022b88 <__func__.2+0x320>
    80008dac:	6c5170ef          	jal	80020c70 <printf>
    80008db0:	02900513          	li	a0,41
    80008db4:	54c170ef          	jal	80020300 <putchar>
    80008db8:	4529                	li	a0,10
    80008dba:	546170ef          	jal	80020300 <putchar>
    80008dbe:	00090e63          	beqz	s2,80008dda <tinst_tests+0xdce>
    80008dc2:	0003c797          	auipc	a5,0x3c
    80008dc6:	24f7c783          	lbu	a5,591(a5) # 80045011 <excpt+0x1>
    80008dca:	c799                	beqz	a5,80008dd8 <tinst_tests+0xdcc>
    80008dcc:	6418                	ld	a4,8(s0)
    80008dce:	47bd                	li	a5,15
    80008dd0:	00f71463          	bne	a4,a5,80008dd8 <tinst_tests+0xdcc>
    80008dd4:	3ac0206f          	j	8000b180 <tinst_tests+0x3174>
    80008dd8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008dda:	0330000f          	fence	rw,rw
    80008dde:	4785                	li	a5,1
    80008de0:	0003c717          	auipc	a4,0x3c
    80008de4:	26073423          	sd	zero,616(a4) # 80045048 <excpt+0x38>
    80008de8:	00f41023          	sh	a5,0(s0)
    80008dec:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008df0:	400197b7          	lui	a5,0x40019
    80008df4:	078a                	slli	a5,a5,0x2
    80008df6:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008dfa:	0001c617          	auipc	a2,0x1c
    80008dfe:	abe60613          	addi	a2,a2,-1346 # 800248b8 <__func__.2+0x2050>
    80008e02:	08200593          	li	a1,130
    80008e06:	0001a517          	auipc	a0,0x1a
    80008e0a:	d6250513          	addi	a0,a0,-670 # 80022b68 <__func__.2+0x300>
    80008e0e:	663170ef          	jal	80020c70 <printf>
    80008e12:	0003c797          	auipc	a5,0x3c
    80008e16:	1ff7c783          	lbu	a5,511(a5) # 80045011 <excpt+0x1>
    80008e1a:	e399                	bnez	a5,80008e20 <tinst_tests+0xe14>
    80008e1c:	5f00106f          	j	8000a40c <tinst_tests+0x2400>
    80008e20:	6418                	ld	a4,8(s0)
    80008e22:	47bd                	li	a5,15
    80008e24:	0001a597          	auipc	a1,0x1a
    80008e28:	d1c58593          	addi	a1,a1,-740 # 80022b40 <__func__.2+0x2d8>
    80008e2c:	00f71463          	bne	a4,a5,80008e34 <tinst_tests+0xe28>
    80008e30:	5900106f          	j	8000a3c0 <tinst_tests+0x23b4>
    80008e34:	0001a517          	auipc	a0,0x1a
    80008e38:	d4c50513          	addi	a0,a0,-692 # 80022b80 <__func__.2+0x318>
    80008e3c:	635170ef          	jal	80020c70 <printf>
    80008e40:	0003c797          	auipc	a5,0x3c
    80008e44:	1d17c783          	lbu	a5,465(a5) # 80045011 <excpt+0x1>
    80008e48:	c799                	beqz	a5,80008e56 <tinst_tests+0xe4a>
    80008e4a:	6418                	ld	a4,8(s0)
    80008e4c:	47bd                	li	a5,15
    80008e4e:	00f71463          	bne	a4,a5,80008e56 <tinst_tests+0xe4a>
    80008e52:	5b30106f          	j	8000ac04 <tinst_tests+0x2bf8>
    80008e56:	0001a517          	auipc	a0,0x1a
    80008e5a:	d3250513          	addi	a0,a0,-718 # 80022b88 <__func__.2+0x320>
    80008e5e:	613170ef          	jal	80020c70 <printf>
    80008e62:	02900513          	li	a0,41
    80008e66:	49a170ef          	jal	80020300 <putchar>
    80008e6a:	4529                	li	a0,10
    80008e6c:	494170ef          	jal	80020300 <putchar>
    80008e70:	00090e63          	beqz	s2,80008e8c <tinst_tests+0xe80>
    80008e74:	0003c797          	auipc	a5,0x3c
    80008e78:	19d7c783          	lbu	a5,413(a5) # 80045011 <excpt+0x1>
    80008e7c:	c799                	beqz	a5,80008e8a <tinst_tests+0xe7e>
    80008e7e:	6418                	ld	a4,8(s0)
    80008e80:	47bd                	li	a5,15
    80008e82:	00f71463          	bne	a4,a5,80008e8a <tinst_tests+0xe7e>
    80008e86:	36c0206f          	j	8000b1f2 <tinst_tests+0x31e6>
    80008e8a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e8c:	0330000f          	fence	rw,rw
    80008e90:	4785                	li	a5,1
    80008e92:	0003c717          	auipc	a4,0x3c
    80008e96:	1a073b23          	sd	zero,438(a4) # 80045048 <excpt+0x38>
    80008e9a:	00f41023          	sh	a5,0(s0)
    80008e9e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008ea2:	400197b7          	lui	a5,0x40019
    80008ea6:	078a                	slli	a5,a5,0x2
    80008ea8:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008eac:	0001c617          	auipc	a2,0x1c
    80008eb0:	a4c60613          	addi	a2,a2,-1460 # 800248f8 <__func__.2+0x2090>
    80008eb4:	08200593          	li	a1,130
    80008eb8:	0001a517          	auipc	a0,0x1a
    80008ebc:	cb050513          	addi	a0,a0,-848 # 80022b68 <__func__.2+0x300>
    80008ec0:	5b1170ef          	jal	80020c70 <printf>
    80008ec4:	0003c797          	auipc	a5,0x3c
    80008ec8:	14d7c783          	lbu	a5,333(a5) # 80045011 <excpt+0x1>
    80008ecc:	e399                	bnez	a5,80008ed2 <tinst_tests+0xec6>
    80008ece:	5d40106f          	j	8000a4a2 <tinst_tests+0x2496>
    80008ed2:	6418                	ld	a4,8(s0)
    80008ed4:	47bd                	li	a5,15
    80008ed6:	0001a597          	auipc	a1,0x1a
    80008eda:	c6a58593          	addi	a1,a1,-918 # 80022b40 <__func__.2+0x2d8>
    80008ede:	00f71463          	bne	a4,a5,80008ee6 <tinst_tests+0xeda>
    80008ee2:	5720106f          	j	8000a454 <tinst_tests+0x2448>
    80008ee6:	0001a517          	auipc	a0,0x1a
    80008eea:	c9a50513          	addi	a0,a0,-870 # 80022b80 <__func__.2+0x318>
    80008eee:	583170ef          	jal	80020c70 <printf>
    80008ef2:	0003c797          	auipc	a5,0x3c
    80008ef6:	11f7c783          	lbu	a5,287(a5) # 80045011 <excpt+0x1>
    80008efa:	c799                	beqz	a5,80008f08 <tinst_tests+0xefc>
    80008efc:	6418                	ld	a4,8(s0)
    80008efe:	47bd                	li	a5,15
    80008f00:	00f71463          	bne	a4,a5,80008f08 <tinst_tests+0xefc>
    80008f04:	5430106f          	j	8000ac46 <tinst_tests+0x2c3a>
    80008f08:	0001a517          	auipc	a0,0x1a
    80008f0c:	c8050513          	addi	a0,a0,-896 # 80022b88 <__func__.2+0x320>
    80008f10:	561170ef          	jal	80020c70 <printf>
    80008f14:	02900513          	li	a0,41
    80008f18:	3e8170ef          	jal	80020300 <putchar>
    80008f1c:	4529                	li	a0,10
    80008f1e:	3e2170ef          	jal	80020300 <putchar>
    80008f22:	00090e63          	beqz	s2,80008f3e <tinst_tests+0xf32>
    80008f26:	0003c797          	auipc	a5,0x3c
    80008f2a:	0eb7c783          	lbu	a5,235(a5) # 80045011 <excpt+0x1>
    80008f2e:	c799                	beqz	a5,80008f3c <tinst_tests+0xf30>
    80008f30:	6418                	ld	a4,8(s0)
    80008f32:	47bd                	li	a5,15
    80008f34:	00f71463          	bne	a4,a5,80008f3c <tinst_tests+0xf30>
    80008f38:	32c0206f          	j	8000b264 <tinst_tests+0x3258>
    80008f3c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f3e:	0330000f          	fence	rw,rw
    80008f42:	4785                	li	a5,1
    80008f44:	0003c717          	auipc	a4,0x3c
    80008f48:	10073223          	sd	zero,260(a4) # 80045048 <excpt+0x38>
    80008f4c:	00f41023          	sh	a5,0(s0)
    80008f50:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008f54:	400197b7          	lui	a5,0x40019
    80008f58:	078a                	slli	a5,a5,0x2
    80008f5a:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008f5e:	0001c617          	auipc	a2,0x1c
    80008f62:	9da60613          	addi	a2,a2,-1574 # 80024938 <__func__.2+0x20d0>
    80008f66:	08200593          	li	a1,130
    80008f6a:	0001a517          	auipc	a0,0x1a
    80008f6e:	bfe50513          	addi	a0,a0,-1026 # 80022b68 <__func__.2+0x300>
    80008f72:	4ff170ef          	jal	80020c70 <printf>
    80008f76:	0003c797          	auipc	a5,0x3c
    80008f7a:	09b7c783          	lbu	a5,155(a5) # 80045011 <excpt+0x1>
    80008f7e:	e399                	bnez	a5,80008f84 <tinst_tests+0xf78>
    80008f80:	5b80106f          	j	8000a538 <tinst_tests+0x252c>
    80008f84:	6418                	ld	a4,8(s0)
    80008f86:	47bd                	li	a5,15
    80008f88:	0001a597          	auipc	a1,0x1a
    80008f8c:	bb858593          	addi	a1,a1,-1096 # 80022b40 <__func__.2+0x2d8>
    80008f90:	00f71463          	bne	a4,a5,80008f98 <tinst_tests+0xf8c>
    80008f94:	5560106f          	j	8000a4ea <tinst_tests+0x24de>
    80008f98:	0001a517          	auipc	a0,0x1a
    80008f9c:	be850513          	addi	a0,a0,-1048 # 80022b80 <__func__.2+0x318>
    80008fa0:	4d1170ef          	jal	80020c70 <printf>
    80008fa4:	0003c797          	auipc	a5,0x3c
    80008fa8:	06d7c783          	lbu	a5,109(a5) # 80045011 <excpt+0x1>
    80008fac:	c799                	beqz	a5,80008fba <tinst_tests+0xfae>
    80008fae:	6418                	ld	a4,8(s0)
    80008fb0:	47bd                	li	a5,15
    80008fb2:	00f71463          	bne	a4,a5,80008fba <tinst_tests+0xfae>
    80008fb6:	4d30106f          	j	8000ac88 <tinst_tests+0x2c7c>
    80008fba:	0001a517          	auipc	a0,0x1a
    80008fbe:	bce50513          	addi	a0,a0,-1074 # 80022b88 <__func__.2+0x320>
    80008fc2:	4af170ef          	jal	80020c70 <printf>
    80008fc6:	02900513          	li	a0,41
    80008fca:	336170ef          	jal	80020300 <putchar>
    80008fce:	4529                	li	a0,10
    80008fd0:	330170ef          	jal	80020300 <putchar>
    80008fd4:	00090e63          	beqz	s2,80008ff0 <tinst_tests+0xfe4>
    80008fd8:	0003c797          	auipc	a5,0x3c
    80008fdc:	0397c783          	lbu	a5,57(a5) # 80045011 <excpt+0x1>
    80008fe0:	c799                	beqz	a5,80008fee <tinst_tests+0xfe2>
    80008fe2:	6418                	ld	a4,8(s0)
    80008fe4:	47bd                	li	a5,15
    80008fe6:	00f71463          	bne	a4,a5,80008fee <tinst_tests+0xfe2>
    80008fea:	2bc0206f          	j	8000b2a6 <tinst_tests+0x329a>
    80008fee:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008ff0:	0330000f          	fence	rw,rw
    80008ff4:	4785                	li	a5,1
    80008ff6:	0003c717          	auipc	a4,0x3c
    80008ffa:	04073923          	sd	zero,82(a4) # 80045048 <excpt+0x38>
    80008ffe:	00f41023          	sh	a5,0(s0)
    80009002:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80009006:	400197b7          	lui	a5,0x40019
    8000900a:	078a                	slli	a5,a5,0x2
    8000900c:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80009010:	0001c617          	auipc	a2,0x1c
    80009014:	96860613          	addi	a2,a2,-1688 # 80024978 <__func__.2+0x2110>
    80009018:	08200593          	li	a1,130
    8000901c:	0001a517          	auipc	a0,0x1a
    80009020:	b4c50513          	addi	a0,a0,-1204 # 80022b68 <__func__.2+0x300>
    80009024:	44d170ef          	jal	80020c70 <printf>
    80009028:	0003c797          	auipc	a5,0x3c
    8000902c:	fe97c783          	lbu	a5,-23(a5) # 80045011 <excpt+0x1>
    80009030:	e399                	bnez	a5,80009036 <tinst_tests+0x102a>
    80009032:	59c0106f          	j	8000a5ce <tinst_tests+0x25c2>
    80009036:	6418                	ld	a4,8(s0)
    80009038:	47bd                	li	a5,15
    8000903a:	0001a597          	auipc	a1,0x1a
    8000903e:	b0658593          	addi	a1,a1,-1274 # 80022b40 <__func__.2+0x2d8>
    80009042:	00f71463          	bne	a4,a5,8000904a <tinst_tests+0x103e>
    80009046:	53a0106f          	j	8000a580 <tinst_tests+0x2574>
    8000904a:	0001a517          	auipc	a0,0x1a
    8000904e:	b3650513          	addi	a0,a0,-1226 # 80022b80 <__func__.2+0x318>
    80009052:	41f170ef          	jal	80020c70 <printf>
    80009056:	0003c797          	auipc	a5,0x3c
    8000905a:	fbb7c783          	lbu	a5,-69(a5) # 80045011 <excpt+0x1>
    8000905e:	c799                	beqz	a5,8000906c <tinst_tests+0x1060>
    80009060:	6418                	ld	a4,8(s0)
    80009062:	47bd                	li	a5,15
    80009064:	00f71463          	bne	a4,a5,8000906c <tinst_tests+0x1060>
    80009068:	4630106f          	j	8000acca <tinst_tests+0x2cbe>
    8000906c:	0001a517          	auipc	a0,0x1a
    80009070:	b1c50513          	addi	a0,a0,-1252 # 80022b88 <__func__.2+0x320>
    80009074:	3fd170ef          	jal	80020c70 <printf>
    80009078:	02900513          	li	a0,41
    8000907c:	284170ef          	jal	80020300 <putchar>
    80009080:	4529                	li	a0,10
    80009082:	27e170ef          	jal	80020300 <putchar>
    80009086:	00090e63          	beqz	s2,800090a2 <tinst_tests+0x1096>
    8000908a:	0003c797          	auipc	a5,0x3c
    8000908e:	f877c783          	lbu	a5,-121(a5) # 80045011 <excpt+0x1>
    80009092:	c799                	beqz	a5,800090a0 <tinst_tests+0x1094>
    80009094:	6418                	ld	a4,8(s0)
    80009096:	47bd                	li	a5,15
    80009098:	00f71463          	bne	a4,a5,800090a0 <tinst_tests+0x1094>
    8000909c:	24c0206f          	j	8000b2e8 <tinst_tests+0x32dc>
    800090a0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090a2:	0330000f          	fence	rw,rw
    800090a6:	4785                	li	a5,1
    800090a8:	0003c717          	auipc	a4,0x3c
    800090ac:	fa073023          	sd	zero,-96(a4) # 80045048 <excpt+0x38>
    800090b0:	00f41023          	sh	a5,0(s0)
    800090b4:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    800090b8:	400197b7          	lui	a5,0x40019
    800090bc:	078a                	slli	a5,a5,0x2
    800090be:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    800090c2:	0001c617          	auipc	a2,0x1c
    800090c6:	8f660613          	addi	a2,a2,-1802 # 800249b8 <__func__.2+0x2150>
    800090ca:	08200593          	li	a1,130
    800090ce:	0001a517          	auipc	a0,0x1a
    800090d2:	a9a50513          	addi	a0,a0,-1382 # 80022b68 <__func__.2+0x300>
    800090d6:	39b170ef          	jal	80020c70 <printf>
    800090da:	0003c797          	auipc	a5,0x3c
    800090de:	f377c783          	lbu	a5,-201(a5) # 80045011 <excpt+0x1>
    800090e2:	e399                	bnez	a5,800090e8 <tinst_tests+0x10dc>
    800090e4:	5860106f          	j	8000a66a <tinst_tests+0x265e>
    800090e8:	6418                	ld	a4,8(s0)
    800090ea:	47bd                	li	a5,15
    800090ec:	0001a597          	auipc	a1,0x1a
    800090f0:	a5458593          	addi	a1,a1,-1452 # 80022b40 <__func__.2+0x2d8>
    800090f4:	00f71463          	bne	a4,a5,800090fc <tinst_tests+0x10f0>
    800090f8:	5240106f          	j	8000a61c <tinst_tests+0x2610>
    800090fc:	0001a517          	auipc	a0,0x1a
    80009100:	a8450513          	addi	a0,a0,-1404 # 80022b80 <__func__.2+0x318>
    80009104:	36d170ef          	jal	80020c70 <printf>
    80009108:	0003c797          	auipc	a5,0x3c
    8000910c:	f097c783          	lbu	a5,-247(a5) # 80045011 <excpt+0x1>
    80009110:	c799                	beqz	a5,8000911e <tinst_tests+0x1112>
    80009112:	6418                	ld	a4,8(s0)
    80009114:	47bd                	li	a5,15
    80009116:	00f71463          	bne	a4,a5,8000911e <tinst_tests+0x1112>
    8000911a:	3f30106f          	j	8000ad0c <tinst_tests+0x2d00>
    8000911e:	0001a517          	auipc	a0,0x1a
    80009122:	a6a50513          	addi	a0,a0,-1430 # 80022b88 <__func__.2+0x320>
    80009126:	34b170ef          	jal	80020c70 <printf>
    8000912a:	02900513          	li	a0,41
    8000912e:	1d2170ef          	jal	80020300 <putchar>
    80009132:	4529                	li	a0,10
    80009134:	1cc170ef          	jal	80020300 <putchar>
    80009138:	00090e63          	beqz	s2,80009154 <tinst_tests+0x1148>
    8000913c:	0003c797          	auipc	a5,0x3c
    80009140:	ed57c783          	lbu	a5,-299(a5) # 80045011 <excpt+0x1>
    80009144:	c799                	beqz	a5,80009152 <tinst_tests+0x1146>
    80009146:	6418                	ld	a4,8(s0)
    80009148:	47bd                	li	a5,15
    8000914a:	00f71463          	bne	a4,a5,80009152 <tinst_tests+0x1146>
    8000914e:	1de0206f          	j	8000b32c <tinst_tests+0x3320>
    80009152:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009154:	0330000f          	fence	rw,rw
    80009158:	4785                	li	a5,1
    8000915a:	0003c717          	auipc	a4,0x3c
    8000915e:	ee073723          	sd	zero,-274(a4) # 80045048 <excpt+0x38>
    80009162:	00f41023          	sh	a5,0(s0)
    80009166:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000916a:	400197b7          	lui	a5,0x40019
    8000916e:	078a                	slli	a5,a5,0x2
    80009170:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009174:	0001c617          	auipc	a2,0x1c
    80009178:	88460613          	addi	a2,a2,-1916 # 800249f8 <__func__.2+0x2190>
    8000917c:	08200593          	li	a1,130
    80009180:	0001a517          	auipc	a0,0x1a
    80009184:	9e850513          	addi	a0,a0,-1560 # 80022b68 <__func__.2+0x300>
    80009188:	2e9170ef          	jal	80020c70 <printf>
    8000918c:	0003c797          	auipc	a5,0x3c
    80009190:	e857c783          	lbu	a5,-379(a5) # 80045011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80009194:	1482                	slli	s1,s1,0x20
    80009196:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009198:	e399                	bnez	a5,8000919e <tinst_tests+0x1192>
    8000919a:	56c0106f          	j	8000a706 <tinst_tests+0x26fa>
    8000919e:	6418                	ld	a4,8(s0)
    800091a0:	47bd                	li	a5,15
    800091a2:	0001a597          	auipc	a1,0x1a
    800091a6:	99e58593          	addi	a1,a1,-1634 # 80022b40 <__func__.2+0x2d8>
    800091aa:	00f71463          	bne	a4,a5,800091b2 <tinst_tests+0x11a6>
    800091ae:	50a0106f          	j	8000a6b8 <tinst_tests+0x26ac>
    800091b2:	0001a517          	auipc	a0,0x1a
    800091b6:	9ce50513          	addi	a0,a0,-1586 # 80022b80 <__func__.2+0x318>
    800091ba:	2b7170ef          	jal	80020c70 <printf>
    800091be:	0003c797          	auipc	a5,0x3c
    800091c2:	e537c783          	lbu	a5,-429(a5) # 80045011 <excpt+0x1>
    800091c6:	c799                	beqz	a5,800091d4 <tinst_tests+0x11c8>
    800091c8:	6418                	ld	a4,8(s0)
    800091ca:	47bd                	li	a5,15
    800091cc:	00f71463          	bne	a4,a5,800091d4 <tinst_tests+0x11c8>
    800091d0:	37f0106f          	j	8000ad4e <tinst_tests+0x2d42>
    800091d4:	0001a517          	auipc	a0,0x1a
    800091d8:	9b450513          	addi	a0,a0,-1612 # 80022b88 <__func__.2+0x320>
    800091dc:	295170ef          	jal	80020c70 <printf>
    800091e0:	02900513          	li	a0,41
    800091e4:	11c170ef          	jal	80020300 <putchar>
    800091e8:	4529                	li	a0,10
    800091ea:	116170ef          	jal	80020300 <putchar>
    800091ee:	00090e63          	beqz	s2,8000920a <tinst_tests+0x11fe>
    800091f2:	0003c797          	auipc	a5,0x3c
    800091f6:	e1f7c783          	lbu	a5,-481(a5) # 80045011 <excpt+0x1>
    800091fa:	c799                	beqz	a5,80009208 <tinst_tests+0x11fc>
    800091fc:	6418                	ld	a4,8(s0)
    800091fe:	47bd                	li	a5,15
    80009200:	00f71463          	bne	a4,a5,80009208 <tinst_tests+0x11fc>
    80009204:	16c0206f          	j	8000b370 <tinst_tests+0x3364>
    80009208:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000920a:	0330000f          	fence	rw,rw
    8000920e:	4785                	li	a5,1
    80009210:	0003c717          	auipc	a4,0x3c
    80009214:	e2073c23          	sd	zero,-456(a4) # 80045048 <excpt+0x38>
    80009218:	00f41023          	sh	a5,0(s0)
    8000921c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80009220:	400197b7          	lui	a5,0x40019
    80009224:	078a                	slli	a5,a5,0x2
    80009226:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000922a:	0001c617          	auipc	a2,0x1c
    8000922e:	80e60613          	addi	a2,a2,-2034 # 80024a38 <__func__.2+0x21d0>
    80009232:	08200593          	li	a1,130
    80009236:	0001a517          	auipc	a0,0x1a
    8000923a:	93250513          	addi	a0,a0,-1742 # 80022b68 <__func__.2+0x300>
    8000923e:	233170ef          	jal	80020c70 <printf>
    80009242:	0003c797          	auipc	a5,0x3c
    80009246:	dcf7c783          	lbu	a5,-561(a5) # 80045011 <excpt+0x1>
    8000924a:	e399                	bnez	a5,80009250 <tinst_tests+0x1244>
    8000924c:	5560106f          	j	8000a7a2 <tinst_tests+0x2796>
    80009250:	6418                	ld	a4,8(s0)
    80009252:	47bd                	li	a5,15
    80009254:	0001a597          	auipc	a1,0x1a
    80009258:	8ec58593          	addi	a1,a1,-1812 # 80022b40 <__func__.2+0x2d8>
    8000925c:	00f71463          	bne	a4,a5,80009264 <tinst_tests+0x1258>
    80009260:	4f40106f          	j	8000a754 <tinst_tests+0x2748>
    80009264:	0001a517          	auipc	a0,0x1a
    80009268:	91c50513          	addi	a0,a0,-1764 # 80022b80 <__func__.2+0x318>
    8000926c:	205170ef          	jal	80020c70 <printf>
    80009270:	0003c797          	auipc	a5,0x3c
    80009274:	da17c783          	lbu	a5,-607(a5) # 80045011 <excpt+0x1>
    80009278:	c799                	beqz	a5,80009286 <tinst_tests+0x127a>
    8000927a:	6418                	ld	a4,8(s0)
    8000927c:	47bd                	li	a5,15
    8000927e:	00f71463          	bne	a4,a5,80009286 <tinst_tests+0x127a>
    80009282:	30f0106f          	j	8000ad90 <tinst_tests+0x2d84>
    80009286:	0001a517          	auipc	a0,0x1a
    8000928a:	90250513          	addi	a0,a0,-1790 # 80022b88 <__func__.2+0x320>
    8000928e:	1e3170ef          	jal	80020c70 <printf>
    80009292:	02900513          	li	a0,41
    80009296:	06a170ef          	jal	80020300 <putchar>
    8000929a:	4529                	li	a0,10
    8000929c:	064170ef          	jal	80020300 <putchar>
    800092a0:	00090e63          	beqz	s2,800092bc <tinst_tests+0x12b0>
    800092a4:	0003c797          	auipc	a5,0x3c
    800092a8:	d6d7c783          	lbu	a5,-659(a5) # 80045011 <excpt+0x1>
    800092ac:	c799                	beqz	a5,800092ba <tinst_tests+0x12ae>
    800092ae:	6418                	ld	a4,8(s0)
    800092b0:	47bd                	li	a5,15
    800092b2:	00f71463          	bne	a4,a5,800092ba <tinst_tests+0x12ae>
    800092b6:	0fe0206f          	j	8000b3b4 <tinst_tests+0x33a8>
    800092ba:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800092bc:	0330000f          	fence	rw,rw
    800092c0:	4785                	li	a5,1
    800092c2:	0003c717          	auipc	a4,0x3c
    800092c6:	d8073323          	sd	zero,-634(a4) # 80045048 <excpt+0x38>
    800092ca:	00f41023          	sh	a5,0(s0)
    800092ce:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    800092d2:	400197b7          	lui	a5,0x40019
    800092d6:	078a                	slli	a5,a5,0x2
    800092d8:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    800092dc:	0001b617          	auipc	a2,0x1b
    800092e0:	79c60613          	addi	a2,a2,1948 # 80024a78 <__func__.2+0x2210>
    800092e4:	08200593          	li	a1,130
    800092e8:	0001a517          	auipc	a0,0x1a
    800092ec:	88050513          	addi	a0,a0,-1920 # 80022b68 <__func__.2+0x300>
    800092f0:	181170ef          	jal	80020c70 <printf>
    800092f4:	0003c797          	auipc	a5,0x3c
    800092f8:	d1d7c783          	lbu	a5,-739(a5) # 80045011 <excpt+0x1>
    800092fc:	e399                	bnez	a5,80009302 <tinst_tests+0x12f6>
    800092fe:	5400106f          	j	8000a83e <tinst_tests+0x2832>
    80009302:	6418                	ld	a4,8(s0)
    80009304:	47bd                	li	a5,15
    80009306:	0001a597          	auipc	a1,0x1a
    8000930a:	83a58593          	addi	a1,a1,-1990 # 80022b40 <__func__.2+0x2d8>
    8000930e:	00f71463          	bne	a4,a5,80009316 <tinst_tests+0x130a>
    80009312:	4de0106f          	j	8000a7f0 <tinst_tests+0x27e4>
    80009316:	0001a517          	auipc	a0,0x1a
    8000931a:	86a50513          	addi	a0,a0,-1942 # 80022b80 <__func__.2+0x318>
    8000931e:	153170ef          	jal	80020c70 <printf>
    80009322:	0003c797          	auipc	a5,0x3c
    80009326:	cef7c783          	lbu	a5,-785(a5) # 80045011 <excpt+0x1>
    8000932a:	c799                	beqz	a5,80009338 <tinst_tests+0x132c>
    8000932c:	6418                	ld	a4,8(s0)
    8000932e:	47bd                	li	a5,15
    80009330:	00f71463          	bne	a4,a5,80009338 <tinst_tests+0x132c>
    80009334:	29f0106f          	j	8000add2 <tinst_tests+0x2dc6>
    80009338:	0001a517          	auipc	a0,0x1a
    8000933c:	85050513          	addi	a0,a0,-1968 # 80022b88 <__func__.2+0x320>
    80009340:	131170ef          	jal	80020c70 <printf>
    80009344:	02900513          	li	a0,41
    80009348:	7b9160ef          	jal	80020300 <putchar>
    8000934c:	4529                	li	a0,10
    8000934e:	7b3160ef          	jal	80020300 <putchar>
    80009352:	00090e63          	beqz	s2,8000936e <tinst_tests+0x1362>
    80009356:	0003c797          	auipc	a5,0x3c
    8000935a:	cbb7c783          	lbu	a5,-837(a5) # 80045011 <excpt+0x1>
    8000935e:	c799                	beqz	a5,8000936c <tinst_tests+0x1360>
    80009360:	6418                	ld	a4,8(s0)
    80009362:	47bd                	li	a5,15
    80009364:	00f71463          	bne	a4,a5,8000936c <tinst_tests+0x1360>
    80009368:	0900206f          	j	8000b3f8 <tinst_tests+0x33ec>
    8000936c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000936e:	0330000f          	fence	rw,rw
    80009372:	4785                	li	a5,1
    80009374:	0003c717          	auipc	a4,0x3c
    80009378:	cc073a23          	sd	zero,-812(a4) # 80045048 <excpt+0x38>
    8000937c:	00f41023          	sh	a5,0(s0)
    80009380:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80009384:	400197b7          	lui	a5,0x40019
    80009388:	078a                	slli	a5,a5,0x2
    8000938a:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000938e:	0001b617          	auipc	a2,0x1b
    80009392:	72a60613          	addi	a2,a2,1834 # 80024ab8 <__func__.2+0x2250>
    80009396:	08200593          	li	a1,130
    8000939a:	00019517          	auipc	a0,0x19
    8000939e:	7ce50513          	addi	a0,a0,1998 # 80022b68 <__func__.2+0x300>
    800093a2:	0cf170ef          	jal	80020c70 <printf>
    800093a6:	0003c797          	auipc	a5,0x3c
    800093aa:	c6b7c783          	lbu	a5,-917(a5) # 80045011 <excpt+0x1>
    800093ae:	e399                	bnez	a5,800093b4 <tinst_tests+0x13a8>
    800093b0:	5140106f          	j	8000a8c4 <tinst_tests+0x28b8>
    800093b4:	6418                	ld	a4,8(s0)
    800093b6:	47bd                	li	a5,15
    800093b8:	00019597          	auipc	a1,0x19
    800093bc:	78858593          	addi	a1,a1,1928 # 80022b40 <__func__.2+0x2d8>
    800093c0:	00f71463          	bne	a4,a5,800093c8 <tinst_tests+0x13bc>
    800093c4:	4b20106f          	j	8000a876 <tinst_tests+0x286a>
    800093c8:	00019517          	auipc	a0,0x19
    800093cc:	7b850513          	addi	a0,a0,1976 # 80022b80 <__func__.2+0x318>
    800093d0:	0a1170ef          	jal	80020c70 <printf>
    800093d4:	0003c797          	auipc	a5,0x3c
    800093d8:	c3d7c783          	lbu	a5,-963(a5) # 80045011 <excpt+0x1>
    800093dc:	c799                	beqz	a5,800093ea <tinst_tests+0x13de>
    800093de:	6418                	ld	a4,8(s0)
    800093e0:	47bd                	li	a5,15
    800093e2:	00f71463          	bne	a4,a5,800093ea <tinst_tests+0x13de>
    800093e6:	22f0106f          	j	8000ae14 <tinst_tests+0x2e08>
    800093ea:	00019517          	auipc	a0,0x19
    800093ee:	79e50513          	addi	a0,a0,1950 # 80022b88 <__func__.2+0x320>
    800093f2:	07f170ef          	jal	80020c70 <printf>
    800093f6:	02900513          	li	a0,41
    800093fa:	707160ef          	jal	80020300 <putchar>
    800093fe:	4529                	li	a0,10
    80009400:	701160ef          	jal	80020300 <putchar>
    80009404:	00090e63          	beqz	s2,80009420 <tinst_tests+0x1414>
    80009408:	0003c797          	auipc	a5,0x3c
    8000940c:	c097c783          	lbu	a5,-1015(a5) # 80045011 <excpt+0x1>
    80009410:	c799                	beqz	a5,8000941e <tinst_tests+0x1412>
    80009412:	6418                	ld	a4,8(s0)
    80009414:	47bd                	li	a5,15
    80009416:	00f71463          	bne	a4,a5,8000941e <tinst_tests+0x1412>
    8000941a:	0220206f          	j	8000b43c <tinst_tests+0x3430>
    8000941e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009420:	0330000f          	fence	rw,rw
    80009424:	4785                	li	a5,1
    80009426:	0003c717          	auipc	a4,0x3c
    8000942a:	c2073123          	sd	zero,-990(a4) # 80045048 <excpt+0x38>
    8000942e:	00f41023          	sh	a5,0(s0)
    80009432:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80009436:	400197b7          	lui	a5,0x40019
    8000943a:	078a                	slli	a5,a5,0x2
    8000943c:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80009440:	0001b617          	auipc	a2,0x1b
    80009444:	6b860613          	addi	a2,a2,1720 # 80024af8 <__func__.2+0x2290>
    80009448:	08200593          	li	a1,130
    8000944c:	00019517          	auipc	a0,0x19
    80009450:	71c50513          	addi	a0,a0,1820 # 80022b68 <__func__.2+0x300>
    80009454:	01d170ef          	jal	80020c70 <printf>
    80009458:	0003c797          	auipc	a5,0x3c
    8000945c:	bb97c783          	lbu	a5,-1095(a5) # 80045011 <excpt+0x1>
    80009460:	e399                	bnez	a5,80009466 <tinst_tests+0x145a>
    80009462:	4ec0106f          	j	8000a94e <tinst_tests+0x2942>
    80009466:	6418                	ld	a4,8(s0)
    80009468:	47bd                	li	a5,15
    8000946a:	00019597          	auipc	a1,0x19
    8000946e:	6d658593          	addi	a1,a1,1750 # 80022b40 <__func__.2+0x2d8>
    80009472:	00f71463          	bne	a4,a5,8000947a <tinst_tests+0x146e>
    80009476:	48a0106f          	j	8000a900 <tinst_tests+0x28f4>
    8000947a:	00019517          	auipc	a0,0x19
    8000947e:	70650513          	addi	a0,a0,1798 # 80022b80 <__func__.2+0x318>
    80009482:	7ee170ef          	jal	80020c70 <printf>
    80009486:	0003c797          	auipc	a5,0x3c
    8000948a:	b8b7c783          	lbu	a5,-1141(a5) # 80045011 <excpt+0x1>
    8000948e:	c799                	beqz	a5,8000949c <tinst_tests+0x1490>
    80009490:	6418                	ld	a4,8(s0)
    80009492:	47bd                	li	a5,15
    80009494:	00f71463          	bne	a4,a5,8000949c <tinst_tests+0x1490>
    80009498:	02c0206f          	j	8000b4c4 <tinst_tests+0x34b8>
    8000949c:	00019517          	auipc	a0,0x19
    800094a0:	6ec50513          	addi	a0,a0,1772 # 80022b88 <__func__.2+0x320>
    800094a4:	7cc170ef          	jal	80020c70 <printf>
    800094a8:	02900513          	li	a0,41
    800094ac:	655160ef          	jal	80020300 <putchar>
    800094b0:	4529                	li	a0,10
    800094b2:	64f160ef          	jal	80020300 <putchar>
    800094b6:	00090e63          	beqz	s2,800094d2 <tinst_tests+0x14c6>
    800094ba:	0003c797          	auipc	a5,0x3c
    800094be:	b577c783          	lbu	a5,-1193(a5) # 80045011 <excpt+0x1>
    800094c2:	c799                	beqz	a5,800094d0 <tinst_tests+0x14c4>
    800094c4:	6418                	ld	a4,8(s0)
    800094c6:	47bd                	li	a5,15
    800094c8:	00f71463          	bne	a4,a5,800094d0 <tinst_tests+0x14c4>
    800094cc:	7b50106f          	j	8000b480 <tinst_tests+0x3474>
    800094d0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800094d2:	0330000f          	fence	rw,rw
    800094d6:	4785                	li	a5,1
    800094d8:	0003c717          	auipc	a4,0x3c
    800094dc:	b6073823          	sd	zero,-1168(a4) # 80045048 <excpt+0x38>
    800094e0:	00f41023          	sh	a5,0(s0)
    800094e4:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800094e8:	400197b7          	lui	a5,0x40019
    800094ec:	078a                	slli	a5,a5,0x2
    800094ee:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    800094f2:	0001b617          	auipc	a2,0x1b
    800094f6:	64660613          	addi	a2,a2,1606 # 80024b38 <__func__.2+0x22d0>
    800094fa:	08200593          	li	a1,130
    800094fe:	00019517          	auipc	a0,0x19
    80009502:	66a50513          	addi	a0,a0,1642 # 80022b68 <__func__.2+0x300>
    80009506:	76a170ef          	jal	80020c70 <printf>
    8000950a:	0003c797          	auipc	a5,0x3c
    8000950e:	b077c783          	lbu	a5,-1273(a5) # 80045011 <excpt+0x1>
    80009512:	e399                	bnez	a5,80009518 <tinst_tests+0x150c>
    80009514:	4c80106f          	j	8000a9dc <tinst_tests+0x29d0>
    80009518:	6418                	ld	a4,8(s0)
    8000951a:	47bd                	li	a5,15
    8000951c:	00019597          	auipc	a1,0x19
    80009520:	62458593          	addi	a1,a1,1572 # 80022b40 <__func__.2+0x2d8>
    80009524:	00f71463          	bne	a4,a5,8000952c <tinst_tests+0x1520>
    80009528:	4660106f          	j	8000a98e <tinst_tests+0x2982>
    8000952c:	00019517          	auipc	a0,0x19
    80009530:	65450513          	addi	a0,a0,1620 # 80022b80 <__func__.2+0x318>
    80009534:	73c170ef          	jal	80020c70 <printf>
    80009538:	0003c797          	auipc	a5,0x3c
    8000953c:	ad97c783          	lbu	a5,-1319(a5) # 80045011 <excpt+0x1>
    80009540:	c799                	beqz	a5,8000954e <tinst_tests+0x1542>
    80009542:	6418                	ld	a4,8(s0)
    80009544:	47bd                	li	a5,15
    80009546:	00f71463          	bne	a4,a5,8000954e <tinst_tests+0x1542>
    8000954a:	7bf0106f          	j	8000b508 <tinst_tests+0x34fc>
    8000954e:	00019517          	auipc	a0,0x19
    80009552:	63a50513          	addi	a0,a0,1594 # 80022b88 <__func__.2+0x320>
    80009556:	71a170ef          	jal	80020c70 <printf>
    8000955a:	02900513          	li	a0,41
    8000955e:	5a3160ef          	jal	80020300 <putchar>
    80009562:	4529                	li	a0,10
    80009564:	59d160ef          	jal	80020300 <putchar>
    80009568:	00090a63          	beqz	s2,8000957c <tinst_tests+0x1570>
    8000956c:	0003c797          	auipc	a5,0x3c
    80009570:	aa57c783          	lbu	a5,-1371(a5) # 80045011 <excpt+0x1>
    80009574:	c399                	beqz	a5,8000957a <tinst_tests+0x156e>
    80009576:	0e10106f          	j	8000ae56 <tinst_tests+0x2e4a>
    8000957a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000957c:	0330000f          	fence	rw,rw
    80009580:	4785                	li	a5,1
    80009582:	0003c717          	auipc	a4,0x3c
    80009586:	ac073323          	sd	zero,-1338(a4) # 80045048 <excpt+0x38>
    8000958a:	00f41023          	sh	a5,0(s0)
    8000958e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80009592:	400197b7          	lui	a5,0x40019
    80009596:	078a                	slli	a5,a5,0x2
    80009598:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000959c:	0001b617          	auipc	a2,0x1b
    800095a0:	5dc60613          	addi	a2,a2,1500 # 80024b78 <__func__.2+0x2310>
    800095a4:	08200593          	li	a1,130
    800095a8:	00019517          	auipc	a0,0x19
    800095ac:	5c050513          	addi	a0,a0,1472 # 80022b68 <__func__.2+0x300>
    800095b0:	6c0170ef          	jal	80020c70 <printf>
    800095b4:	0003c797          	auipc	a5,0x3c
    800095b8:	a5d7c783          	lbu	a5,-1443(a5) # 80045011 <excpt+0x1>
    800095bc:	e399                	bnez	a5,800095c2 <tinst_tests+0x15b6>
    800095be:	4a80106f          	j	8000aa66 <tinst_tests+0x2a5a>
    800095c2:	6418                	ld	a4,8(s0)
    800095c4:	47bd                	li	a5,15
    800095c6:	00019597          	auipc	a1,0x19
    800095ca:	57a58593          	addi	a1,a1,1402 # 80022b40 <__func__.2+0x2d8>
    800095ce:	00f71463          	bne	a4,a5,800095d6 <tinst_tests+0x15ca>
    800095d2:	4460106f          	j	8000aa18 <tinst_tests+0x2a0c>
    800095d6:	00019517          	auipc	a0,0x19
    800095da:	5aa50513          	addi	a0,a0,1450 # 80022b80 <__func__.2+0x318>
    800095de:	692170ef          	jal	80020c70 <printf>
    800095e2:	0003c797          	auipc	a5,0x3c
    800095e6:	a2f7c783          	lbu	a5,-1489(a5) # 80045011 <excpt+0x1>
    800095ea:	c799                	beqz	a5,800095f8 <tinst_tests+0x15ec>
    800095ec:	6418                	ld	a4,8(s0)
    800095ee:	47bd                	li	a5,15
    800095f0:	00f71463          	bne	a4,a5,800095f8 <tinst_tests+0x15ec>
    800095f4:	7590106f          	j	8000b54c <tinst_tests+0x3540>
    800095f8:	00019517          	auipc	a0,0x19
    800095fc:	59050513          	addi	a0,a0,1424 # 80022b88 <__func__.2+0x320>
    80009600:	670170ef          	jal	80020c70 <printf>
    80009604:	02900513          	li	a0,41
    80009608:	4f9160ef          	jal	80020300 <putchar>
    8000960c:	4529                	li	a0,10
    8000960e:	4f3160ef          	jal	80020300 <putchar>
    80009612:	00090a63          	beqz	s2,80009626 <tinst_tests+0x161a>
    80009616:	0003c797          	auipc	a5,0x3c
    8000961a:	9fb7c783          	lbu	a5,-1541(a5) # 80045011 <excpt+0x1>
    8000961e:	c399                	beqz	a5,80009624 <tinst_tests+0x1618>
    80009620:	0850106f          	j	8000aea4 <tinst_tests+0x2e98>
    80009624:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009626:	0330000f          	fence	rw,rw
    8000962a:	4785                	li	a5,1
    8000962c:	0003c717          	auipc	a4,0x3c
    80009630:	a0073e23          	sd	zero,-1508(a4) # 80045048 <excpt+0x38>
    80009634:	00f41023          	sh	a5,0(s0)
    80009638:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000963c:	400197b7          	lui	a5,0x40019
    80009640:	078a                	slli	a5,a5,0x2
    80009642:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009646:	0001b617          	auipc	a2,0x1b
    8000964a:	57260613          	addi	a2,a2,1394 # 80024bb8 <__func__.2+0x2350>
    8000964e:	08200593          	li	a1,130
    80009652:	00019517          	auipc	a0,0x19
    80009656:	51650513          	addi	a0,a0,1302 # 80022b68 <__func__.2+0x300>
    8000965a:	616170ef          	jal	80020c70 <printf>
    8000965e:	0003c797          	auipc	a5,0x3c
    80009662:	9b37c783          	lbu	a5,-1613(a5) # 80045011 <excpt+0x1>
    80009666:	e399                	bnez	a5,8000966c <tinst_tests+0x1660>
    80009668:	4580106f          	j	8000aac0 <tinst_tests+0x2ab4>
    8000966c:	6418                	ld	a4,8(s0)
    8000966e:	47bd                	li	a5,15
    80009670:	00019597          	auipc	a1,0x19
    80009674:	4d058593          	addi	a1,a1,1232 # 80022b40 <__func__.2+0x2d8>
    80009678:	00f71463          	bne	a4,a5,80009680 <tinst_tests+0x1674>
    8000967c:	3f60106f          	j	8000aa72 <tinst_tests+0x2a66>
    80009680:	00019517          	auipc	a0,0x19
    80009684:	50050513          	addi	a0,a0,1280 # 80022b80 <__func__.2+0x318>
    80009688:	5e8170ef          	jal	80020c70 <printf>
    8000968c:	0003c797          	auipc	a5,0x3c
    80009690:	9857c783          	lbu	a5,-1659(a5) # 80045011 <excpt+0x1>
    80009694:	c799                	beqz	a5,800096a2 <tinst_tests+0x1696>
    80009696:	6418                	ld	a4,8(s0)
    80009698:	47bd                	li	a5,15
    8000969a:	00f71463          	bne	a4,a5,800096a2 <tinst_tests+0x1696>
    8000969e:	6f30106f          	j	8000b590 <tinst_tests+0x3584>
    800096a2:	00019517          	auipc	a0,0x19
    800096a6:	4e650513          	addi	a0,a0,1254 # 80022b88 <__func__.2+0x320>
    800096aa:	5c6170ef          	jal	80020c70 <printf>
    800096ae:	02900513          	li	a0,41
    800096b2:	44f160ef          	jal	80020300 <putchar>
    800096b6:	4529                	li	a0,10
    800096b8:	449160ef          	jal	80020300 <putchar>
    800096bc:	00090a63          	beqz	s2,800096d0 <tinst_tests+0x16c4>
    800096c0:	0003c797          	auipc	a5,0x3c
    800096c4:	9517c783          	lbu	a5,-1711(a5) # 80045011 <excpt+0x1>
    800096c8:	c399                	beqz	a5,800096ce <tinst_tests+0x16c2>
    800096ca:	0530106f          	j	8000af1c <tinst_tests+0x2f10>
    800096ce:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800096d0:	0330000f          	fence	rw,rw
    800096d4:	4785                	li	a5,1
    800096d6:	0003c717          	auipc	a4,0x3c
    800096da:	96073923          	sd	zero,-1678(a4) # 80045048 <excpt+0x38>
    800096de:	00f41023          	sh	a5,0(s0)
    800096e2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800096e6:	400197b7          	lui	a5,0x40019
    800096ea:	078a                	slli	a5,a5,0x2
    800096ec:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800096f0:	0001b617          	auipc	a2,0x1b
    800096f4:	50860613          	addi	a2,a2,1288 # 80024bf8 <__func__.2+0x2390>
    800096f8:	08200593          	li	a1,130
    800096fc:	00019517          	auipc	a0,0x19
    80009700:	46c50513          	addi	a0,a0,1132 # 80022b68 <__func__.2+0x300>
    80009704:	56c170ef          	jal	80020c70 <printf>
    80009708:	0003c797          	auipc	a5,0x3c
    8000970c:	9097c783          	lbu	a5,-1783(a5) # 80045011 <excpt+0x1>
    80009710:	e399                	bnez	a5,80009716 <tinst_tests+0x170a>
    80009712:	4080106f          	j	8000ab1a <tinst_tests+0x2b0e>
    80009716:	6418                	ld	a4,8(s0)
    80009718:	47bd                	li	a5,15
    8000971a:	00019597          	auipc	a1,0x19
    8000971e:	42658593          	addi	a1,a1,1062 # 80022b40 <__func__.2+0x2d8>
    80009722:	00f71463          	bne	a4,a5,8000972a <tinst_tests+0x171e>
    80009726:	3a60106f          	j	8000aacc <tinst_tests+0x2ac0>
    8000972a:	00019517          	auipc	a0,0x19
    8000972e:	45650513          	addi	a0,a0,1110 # 80022b80 <__func__.2+0x318>
    80009732:	53e170ef          	jal	80020c70 <printf>
    80009736:	0003c797          	auipc	a5,0x3c
    8000973a:	8db7c783          	lbu	a5,-1829(a5) # 80045011 <excpt+0x1>
    8000973e:	c799                	beqz	a5,8000974c <tinst_tests+0x1740>
    80009740:	6418                	ld	a4,8(s0)
    80009742:	47bd                	li	a5,15
    80009744:	00f71463          	bne	a4,a5,8000974c <tinst_tests+0x1740>
    80009748:	68d0106f          	j	8000b5d4 <tinst_tests+0x35c8>
    8000974c:	00019517          	auipc	a0,0x19
    80009750:	43c50513          	addi	a0,a0,1084 # 80022b88 <__func__.2+0x320>
    80009754:	51c170ef          	jal	80020c70 <printf>
    80009758:	02900513          	li	a0,41
    8000975c:	3a5160ef          	jal	80020300 <putchar>
    80009760:	4529                	li	a0,10
    80009762:	39f160ef          	jal	80020300 <putchar>
    80009766:	00090a63          	beqz	s2,8000977a <tinst_tests+0x176e>
    8000976a:	0003c797          	auipc	a5,0x3c
    8000976e:	8a77c783          	lbu	a5,-1881(a5) # 80045011 <excpt+0x1>
    80009772:	c399                	beqz	a5,80009778 <tinst_tests+0x176c>
    80009774:	7f60106f          	j	8000af6a <tinst_tests+0x2f5e>
    80009778:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000977a:	0330000f          	fence	rw,rw
    8000977e:	4785                	li	a5,1
    80009780:	0003c717          	auipc	a4,0x3c
    80009784:	8c073423          	sd	zero,-1848(a4) # 80045048 <excpt+0x38>
    80009788:	00f41023          	sh	a5,0(s0)
    8000978c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80009790:	400197b7          	lui	a5,0x40019
    80009794:	078a                	slli	a5,a5,0x2
    80009796:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000979a:	0001b617          	auipc	a2,0x1b
    8000979e:	49e60613          	addi	a2,a2,1182 # 80024c38 <__func__.2+0x23d0>
    800097a2:	08200593          	li	a1,130
    800097a6:	00019517          	auipc	a0,0x19
    800097aa:	3c250513          	addi	a0,a0,962 # 80022b68 <__func__.2+0x300>
    800097ae:	4c2170ef          	jal	80020c70 <printf>
    800097b2:	0003c797          	auipc	a5,0x3c
    800097b6:	85f7c783          	lbu	a5,-1953(a5) # 80045011 <excpt+0x1>
    800097ba:	e399                	bnez	a5,800097c0 <tinst_tests+0x17b4>
    800097bc:	3b80106f          	j	8000ab74 <tinst_tests+0x2b68>
    800097c0:	6418                	ld	a4,8(s0)
    800097c2:	47bd                	li	a5,15
    800097c4:	00019597          	auipc	a1,0x19
    800097c8:	37c58593          	addi	a1,a1,892 # 80022b40 <__func__.2+0x2d8>
    800097cc:	00f71463          	bne	a4,a5,800097d4 <tinst_tests+0x17c8>
    800097d0:	3560106f          	j	8000ab26 <tinst_tests+0x2b1a>
    800097d4:	00019517          	auipc	a0,0x19
    800097d8:	3ac50513          	addi	a0,a0,940 # 80022b80 <__func__.2+0x318>
    800097dc:	494170ef          	jal	80020c70 <printf>
    800097e0:	0003c797          	auipc	a5,0x3c
    800097e4:	8317c783          	lbu	a5,-1999(a5) # 80045011 <excpt+0x1>
    800097e8:	c799                	beqz	a5,800097f6 <tinst_tests+0x17ea>
    800097ea:	6418                	ld	a4,8(s0)
    800097ec:	47bd                	li	a5,15
    800097ee:	00f71463          	bne	a4,a5,800097f6 <tinst_tests+0x17ea>
    800097f2:	6270106f          	j	8000b618 <tinst_tests+0x360c>
    800097f6:	00019517          	auipc	a0,0x19
    800097fa:	39250513          	addi	a0,a0,914 # 80022b88 <__func__.2+0x320>
    800097fe:	472170ef          	jal	80020c70 <printf>
    80009802:	02900513          	li	a0,41
    80009806:	2fb160ef          	jal	80020300 <putchar>
    8000980a:	4529                	li	a0,10
    8000980c:	2f5160ef          	jal	80020300 <putchar>
    80009810:	04090e63          	beqz	s2,8000986c <tinst_tests+0x1860>
    80009814:	0003b497          	auipc	s1,0x3b
    80009818:	7fd4c483          	lbu	s1,2045(s1) # 80045011 <excpt+0x1>
    8000981c:	c8a9                	beqz	s1,8000986e <tinst_tests+0x1862>
    8000981e:	6418                	ld	a4,8(s0)
    80009820:	47bd                	li	a5,15
    80009822:	04f71563          	bne	a4,a5,8000986c <tinst_tests+0x1860>
    80009826:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80009828:	00019597          	auipc	a1,0x19
    8000982c:	30858593          	addi	a1,a1,776 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009830:	c3b9                	beqz	a5,80009876 <tinst_tests+0x186a>
    80009832:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80009834:	0016f713          	andi	a4,a3,1
    80009838:	2c0710e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    8000983c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009840:	460d                	li	a2,3
    80009842:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009846:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009848:	00c59763          	bne	a1,a2,80009856 <tinst_tests+0x184a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000984c:	0026d683          	lhu	a3,2(a3)
    80009850:	0106969b          	slliw	a3,a3,0x10
    80009854:	8f55                	or	a4,a4,a3
    80009856:	1ffe16b7          	lui	a3,0x1ffe1
    8000985a:	068e                	slli	a3,a3,0x3
    8000985c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000985e:	8f75                	and	a4,a4,a3
    TEST_END();
    80009860:	00019597          	auipc	a1,0x19
    80009864:	2d058593          	addi	a1,a1,720 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009868:	00e78763          	beq	a5,a4,80009876 <tinst_tests+0x186a>
    8000986c:	4481                	li	s1,0
    TEST_END();
    8000986e:	00019597          	auipc	a1,0x19
    80009872:	2d258593          	addi	a1,a1,722 # 80022b40 <__func__.2+0x2d8>
    80009876:	00019517          	auipc	a0,0x19
    8000987a:	37250513          	addi	a0,a0,882 # 80022be8 <__func__.2+0x380>
    8000987e:	3f2170ef          	jal	80020c70 <printf>
    80009882:	4511                	li	a0,4
    80009884:	a54f70ef          	jal	80000ad8 <goto_priv>
    80009888:	b21f70ef          	jal	800013a8 <reset_state>
}
    8000988c:	70a2                	ld	ra,40(sp)
    8000988e:	7402                	ld	s0,32(sp)
    80009890:	6942                	ld	s2,16(sp)
    80009892:	69a2                	ld	s3,8(sp)
    80009894:	8526                	mv	a0,s1
    80009896:	64e2                	ld	s1,24(sp)
    80009898:	6145                	addi	sp,sp,48
    8000989a:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    8000989c:	701c                	ld	a5,32(s0)
    8000989e:	00019597          	auipc	a1,0x19
    800098a2:	29258593          	addi	a1,a1,658 # 80022b30 <__func__.2+0x2c8>
    800098a6:	e399                	bnez	a5,800098ac <tinst_tests+0x18a0>
    800098a8:	ff6fe06f          	j	8000809e <tinst_tests+0x92>
    800098ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098ae:	0016f713          	andi	a4,a3,1
    800098b2:	240713e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    800098b6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098ba:	460d                	li	a2,3
    800098bc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098c0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098c2:	00c59763          	bne	a1,a2,800098d0 <tinst_tests+0x18c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098c6:	0026d683          	lhu	a3,2(a3)
    800098ca:	0106969b          	slliw	a3,a3,0x10
    800098ce:	8f55                	or	a4,a4,a3
    800098d0:	1746                	slli	a4,a4,0x31
    800098d2:	9345                	srli	a4,a4,0x31
    800098d4:	00019597          	auipc	a1,0x19
    800098d8:	25c58593          	addi	a1,a1,604 # 80022b30 <__func__.2+0x2c8>
    800098dc:	00e79463          	bne	a5,a4,800098e4 <tinst_tests+0x18d8>
    800098e0:	fbefe06f          	j	8000809e <tinst_tests+0x92>
    800098e4:	00019597          	auipc	a1,0x19
    800098e8:	25c58593          	addi	a1,a1,604 # 80022b40 <__func__.2+0x2d8>
    800098ec:	fb2fe06f          	j	8000809e <tinst_tests+0x92>
    800098f0:	6418                	ld	a4,8(s0)
    800098f2:	47b5                	li	a5,13
    800098f4:	4901                	li	s2,0
    800098f6:	00f70463          	beq	a4,a5,800098fe <tinst_tests+0x18f2>
    800098fa:	ff0fe06f          	j	800080ea <tinst_tests+0xde>
    800098fe:	7018                	ld	a4,32(s0)
    80009900:	4905                	li	s2,1
    80009902:	e319                	bnez	a4,80009908 <tinst_tests+0x18fc>
    80009904:	fe6fe06f          	j	800080ea <tinst_tests+0xde>
    80009908:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000990a:	0126f7b3          	and	a5,a3,s2
    8000990e:	1e0795e3          	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009912:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009916:	460d                	li	a2,3
    80009918:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000991c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000991e:	00c59763          	bne	a1,a2,8000992c <tinst_tests+0x1920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009922:	0026d683          	lhu	a3,2(a3)
    80009926:	0106969b          	slliw	a3,a3,0x10
    8000992a:	8fd5                	or	a5,a5,a3
    8000992c:	03179913          	slli	s2,a5,0x31
    80009930:	03195913          	srli	s2,s2,0x31
    80009934:	40e90933          	sub	s2,s2,a4
    80009938:	00193913          	seqz	s2,s2
    8000993c:	faefe06f          	j	800080ea <tinst_tests+0xde>
    80009940:	701c                	ld	a5,32(s0)
    80009942:	e399                	bnez	a5,80009948 <tinst_tests+0x193c>
    80009944:	f90fe06f          	j	800080d4 <tinst_tests+0xc8>
    80009948:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000994a:	0016f713          	andi	a4,a3,1
    8000994e:	1a0715e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009952:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009956:	460d                	li	a2,3
    80009958:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000995c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000995e:	00c59763          	bne	a1,a2,8000996c <tinst_tests+0x1960>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009962:	0026d683          	lhu	a3,2(a3)
    80009966:	0106969b          	slliw	a3,a3,0x10
    8000996a:	8f55                	or	a4,a4,a3
    8000996c:	1746                	slli	a4,a4,0x31
    8000996e:	9345                	srli	a4,a4,0x31
    80009970:	00e78463          	beq	a5,a4,80009978 <tinst_tests+0x196c>
    80009974:	f4cfe06f          	j	800080c0 <tinst_tests+0xb4>
    80009978:	f5cfe06f          	j	800080d4 <tinst_tests+0xc8>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000997c:	701c                	ld	a5,32(s0)
    8000997e:	00019597          	auipc	a1,0x19
    80009982:	1b258593          	addi	a1,a1,434 # 80022b30 <__func__.2+0x2c8>
    80009986:	e399                	bnez	a5,8000998c <tinst_tests+0x1980>
    80009988:	fbcfe06f          	j	80008144 <tinst_tests+0x138>
    8000998c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000998e:	0016f713          	andi	a4,a3,1
    80009992:	160713e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009996:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000999a:	460d                	li	a2,3
    8000999c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099a2:	00c59763          	bne	a1,a2,800099b0 <tinst_tests+0x19a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099a6:	0026d683          	lhu	a3,2(a3)
    800099aa:	0106969b          	slliw	a3,a3,0x10
    800099ae:	8f55                	or	a4,a4,a3
    800099b0:	1746                	slli	a4,a4,0x31
    800099b2:	9345                	srli	a4,a4,0x31
    800099b4:	00019597          	auipc	a1,0x19
    800099b8:	17c58593          	addi	a1,a1,380 # 80022b30 <__func__.2+0x2c8>
    800099bc:	00e79463          	bne	a5,a4,800099c4 <tinst_tests+0x19b8>
    800099c0:	f84fe06f          	j	80008144 <tinst_tests+0x138>
    800099c4:	00019597          	auipc	a1,0x19
    800099c8:	17c58593          	addi	a1,a1,380 # 80022b40 <__func__.2+0x2d8>
    800099cc:	f78fe06f          	j	80008144 <tinst_tests+0x138>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800099d0:	701c                	ld	a5,32(s0)
    800099d2:	00019597          	auipc	a1,0x19
    800099d6:	15e58593          	addi	a1,a1,350 # 80022b30 <__func__.2+0x2c8>
    800099da:	e399                	bnez	a5,800099e0 <tinst_tests+0x19d4>
    800099dc:	81bfe06f          	j	800081f6 <tinst_tests+0x1ea>
    800099e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099e2:	0016f713          	andi	a4,a3,1
    800099e6:	100719e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    800099ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099ee:	460d                	li	a2,3
    800099f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099f6:	00c59763          	bne	a1,a2,80009a04 <tinst_tests+0x19f8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099fa:	0026d683          	lhu	a3,2(a3)
    800099fe:	0106969b          	slliw	a3,a3,0x10
    80009a02:	8f55                	or	a4,a4,a3
    80009a04:	1746                	slli	a4,a4,0x31
    80009a06:	9345                	srli	a4,a4,0x31
    80009a08:	00019597          	auipc	a1,0x19
    80009a0c:	12858593          	addi	a1,a1,296 # 80022b30 <__func__.2+0x2c8>
    80009a10:	00e79463          	bne	a5,a4,80009a18 <tinst_tests+0x1a0c>
    80009a14:	fe2fe06f          	j	800081f6 <tinst_tests+0x1ea>
    80009a18:	00019597          	auipc	a1,0x19
    80009a1c:	12858593          	addi	a1,a1,296 # 80022b40 <__func__.2+0x2d8>
    80009a20:	fd6fe06f          	j	800081f6 <tinst_tests+0x1ea>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009a24:	701c                	ld	a5,32(s0)
    80009a26:	00019597          	auipc	a1,0x19
    80009a2a:	10a58593          	addi	a1,a1,266 # 80022b30 <__func__.2+0x2c8>
    80009a2e:	e399                	bnez	a5,80009a34 <tinst_tests+0x1a28>
    80009a30:	879fe06f          	j	800082a8 <tinst_tests+0x29c>
    80009a34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a36:	0016f713          	andi	a4,a3,1
    80009a3a:	0a071fe3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009a3e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a42:	460d                	li	a2,3
    80009a44:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a48:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a4a:	00c59763          	bne	a1,a2,80009a58 <tinst_tests+0x1a4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a4e:	0026d683          	lhu	a3,2(a3)
    80009a52:	0106969b          	slliw	a3,a3,0x10
    80009a56:	8f55                	or	a4,a4,a3
    80009a58:	1746                	slli	a4,a4,0x31
    80009a5a:	9345                	srli	a4,a4,0x31
    80009a5c:	00019597          	auipc	a1,0x19
    80009a60:	0d458593          	addi	a1,a1,212 # 80022b30 <__func__.2+0x2c8>
    80009a64:	00e79463          	bne	a5,a4,80009a6c <tinst_tests+0x1a60>
    80009a68:	841fe06f          	j	800082a8 <tinst_tests+0x29c>
    80009a6c:	00019597          	auipc	a1,0x19
    80009a70:	0d458593          	addi	a1,a1,212 # 80022b40 <__func__.2+0x2d8>
    80009a74:	835fe06f          	j	800082a8 <tinst_tests+0x29c>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009a78:	701c                	ld	a5,32(s0)
    80009a7a:	00019597          	auipc	a1,0x19
    80009a7e:	0b658593          	addi	a1,a1,182 # 80022b30 <__func__.2+0x2c8>
    80009a82:	e399                	bnez	a5,80009a88 <tinst_tests+0x1a7c>
    80009a84:	8d7fe06f          	j	8000835a <tinst_tests+0x34e>
    80009a88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a8a:	0016f713          	andi	a4,a3,1
    80009a8e:	060715e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009a92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a96:	460d                	li	a2,3
    80009a98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a9e:	00c59763          	bne	a1,a2,80009aac <tinst_tests+0x1aa0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aa2:	0026d683          	lhu	a3,2(a3)
    80009aa6:	0106969b          	slliw	a3,a3,0x10
    80009aaa:	8f55                	or	a4,a4,a3
    80009aac:	1746                	slli	a4,a4,0x31
    80009aae:	9345                	srli	a4,a4,0x31
    80009ab0:	00019597          	auipc	a1,0x19
    80009ab4:	08058593          	addi	a1,a1,128 # 80022b30 <__func__.2+0x2c8>
    80009ab8:	00e79463          	bne	a5,a4,80009ac0 <tinst_tests+0x1ab4>
    80009abc:	89ffe06f          	j	8000835a <tinst_tests+0x34e>
    80009ac0:	00019597          	auipc	a1,0x19
    80009ac4:	08058593          	addi	a1,a1,128 # 80022b40 <__func__.2+0x2d8>
    80009ac8:	893fe06f          	j	8000835a <tinst_tests+0x34e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009acc:	701c                	ld	a5,32(s0)
    80009ace:	00019597          	auipc	a1,0x19
    80009ad2:	06258593          	addi	a1,a1,98 # 80022b30 <__func__.2+0x2c8>
    80009ad6:	e399                	bnez	a5,80009adc <tinst_tests+0x1ad0>
    80009ad8:	92dfe06f          	j	80008404 <tinst_tests+0x3f8>
    80009adc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ade:	0016f713          	andi	a4,a3,1
    80009ae2:	00071be3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009ae6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009aea:	460d                	li	a2,3
    80009aec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009af0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009af2:	00c59763          	bne	a1,a2,80009b00 <tinst_tests+0x1af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009af6:	0026d683          	lhu	a3,2(a3)
    80009afa:	0106969b          	slliw	a3,a3,0x10
    80009afe:	8f55                	or	a4,a4,a3
    80009b00:	1746                	slli	a4,a4,0x31
    80009b02:	9345                	srli	a4,a4,0x31
    80009b04:	00019597          	auipc	a1,0x19
    80009b08:	02c58593          	addi	a1,a1,44 # 80022b30 <__func__.2+0x2c8>
    80009b0c:	00e79463          	bne	a5,a4,80009b14 <tinst_tests+0x1b08>
    80009b10:	8f5fe06f          	j	80008404 <tinst_tests+0x3f8>
    80009b14:	00019597          	auipc	a1,0x19
    80009b18:	02c58593          	addi	a1,a1,44 # 80022b40 <__func__.2+0x2d8>
    80009b1c:	8e9fe06f          	j	80008404 <tinst_tests+0x3f8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009b20:	701c                	ld	a5,32(s0)
    80009b22:	00019597          	auipc	a1,0x19
    80009b26:	00e58593          	addi	a1,a1,14 # 80022b30 <__func__.2+0x2c8>
    80009b2a:	e399                	bnez	a5,80009b30 <tinst_tests+0x1b24>
    80009b2c:	983fe06f          	j	800084ae <tinst_tests+0x4a2>
    80009b30:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b32:	0016f713          	andi	a4,a3,1
    80009b36:	7c071163          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b3a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b3e:	460d                	li	a2,3
    80009b40:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b44:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b46:	00c59763          	bne	a1,a2,80009b54 <tinst_tests+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b4a:	0026d683          	lhu	a3,2(a3)
    80009b4e:	0106969b          	slliw	a3,a3,0x10
    80009b52:	8f55                	or	a4,a4,a3
    80009b54:	1746                	slli	a4,a4,0x31
    80009b56:	9345                	srli	a4,a4,0x31
    80009b58:	00019597          	auipc	a1,0x19
    80009b5c:	fd858593          	addi	a1,a1,-40 # 80022b30 <__func__.2+0x2c8>
    80009b60:	00e79463          	bne	a5,a4,80009b68 <tinst_tests+0x1b5c>
    80009b64:	94bfe06f          	j	800084ae <tinst_tests+0x4a2>
    80009b68:	00019597          	auipc	a1,0x19
    80009b6c:	fd858593          	addi	a1,a1,-40 # 80022b40 <__func__.2+0x2d8>
    80009b70:	93ffe06f          	j	800084ae <tinst_tests+0x4a2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009b74:	701c                	ld	a5,32(s0)
    80009b76:	00019597          	auipc	a1,0x19
    80009b7a:	fba58593          	addi	a1,a1,-70 # 80022b30 <__func__.2+0x2c8>
    80009b7e:	e399                	bnez	a5,80009b84 <tinst_tests+0x1b78>
    80009b80:	9dbfe06f          	j	8000855a <tinst_tests+0x54e>
    80009b84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b86:	0016f713          	andi	a4,a3,1
    80009b8a:	76071763          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b92:	460d                	li	a2,3
    80009b94:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b9a:	00c59763          	bne	a1,a2,80009ba8 <tinst_tests+0x1b9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b9e:	0026d683          	lhu	a3,2(a3)
    80009ba2:	0106969b          	slliw	a3,a3,0x10
    80009ba6:	8f55                	or	a4,a4,a3
    80009ba8:	01f076b7          	lui	a3,0x1f07
    80009bac:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009bb0:	8f75                	and	a4,a4,a3
    80009bb2:	00019597          	auipc	a1,0x19
    80009bb6:	f7e58593          	addi	a1,a1,-130 # 80022b30 <__func__.2+0x2c8>
    80009bba:	00e79463          	bne	a5,a4,80009bc2 <tinst_tests+0x1bb6>
    80009bbe:	99dfe06f          	j	8000855a <tinst_tests+0x54e>
    80009bc2:	00019597          	auipc	a1,0x19
    80009bc6:	f7e58593          	addi	a1,a1,-130 # 80022b40 <__func__.2+0x2d8>
    80009bca:	991fe06f          	j	8000855a <tinst_tests+0x54e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009bce:	701c                	ld	a5,32(s0)
    80009bd0:	00019597          	auipc	a1,0x19
    80009bd4:	f6058593          	addi	a1,a1,-160 # 80022b30 <__func__.2+0x2c8>
    80009bd8:	e399                	bnez	a5,80009bde <tinst_tests+0x1bd2>
    80009bda:	a31fe06f          	j	8000860a <tinst_tests+0x5fe>
    80009bde:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009be0:	0016f713          	andi	a4,a3,1
    80009be4:	70071a63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009be8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bec:	460d                	li	a2,3
    80009bee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bf2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bf4:	00c59763          	bne	a1,a2,80009c02 <tinst_tests+0x1bf6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bf8:	0026d683          	lhu	a3,2(a3)
    80009bfc:	0106969b          	slliw	a3,a3,0x10
    80009c00:	8f55                	or	a4,a4,a3
    80009c02:	01f076b7          	lui	a3,0x1f07
    80009c06:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c0a:	8f75                	and	a4,a4,a3
    80009c0c:	00019597          	auipc	a1,0x19
    80009c10:	f2458593          	addi	a1,a1,-220 # 80022b30 <__func__.2+0x2c8>
    80009c14:	00e79463          	bne	a5,a4,80009c1c <tinst_tests+0x1c10>
    80009c18:	9f3fe06f          	j	8000860a <tinst_tests+0x5fe>
    80009c1c:	00019597          	auipc	a1,0x19
    80009c20:	f2458593          	addi	a1,a1,-220 # 80022b40 <__func__.2+0x2d8>
    80009c24:	9e7fe06f          	j	8000860a <tinst_tests+0x5fe>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009c28:	701c                	ld	a5,32(s0)
    80009c2a:	00019597          	auipc	a1,0x19
    80009c2e:	f0658593          	addi	a1,a1,-250 # 80022b30 <__func__.2+0x2c8>
    80009c32:	e399                	bnez	a5,80009c38 <tinst_tests+0x1c2c>
    80009c34:	a89fe06f          	j	800086bc <tinst_tests+0x6b0>
    80009c38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c3a:	0016f713          	andi	a4,a3,1
    80009c3e:	6a071d63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c46:	460d                	li	a2,3
    80009c48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c4e:	00c59763          	bne	a1,a2,80009c5c <tinst_tests+0x1c50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c52:	0026d683          	lhu	a3,2(a3)
    80009c56:	0106969b          	slliw	a3,a3,0x10
    80009c5a:	8f55                	or	a4,a4,a3
    80009c5c:	01f076b7          	lui	a3,0x1f07
    80009c60:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c64:	8f75                	and	a4,a4,a3
    80009c66:	00019597          	auipc	a1,0x19
    80009c6a:	eca58593          	addi	a1,a1,-310 # 80022b30 <__func__.2+0x2c8>
    80009c6e:	00e79463          	bne	a5,a4,80009c76 <tinst_tests+0x1c6a>
    80009c72:	a4bfe06f          	j	800086bc <tinst_tests+0x6b0>
    80009c76:	00019597          	auipc	a1,0x19
    80009c7a:	eca58593          	addi	a1,a1,-310 # 80022b40 <__func__.2+0x2d8>
    80009c7e:	a3ffe06f          	j	800086bc <tinst_tests+0x6b0>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009c82:	701c                	ld	a5,32(s0)
    80009c84:	00019597          	auipc	a1,0x19
    80009c88:	eac58593          	addi	a1,a1,-340 # 80022b30 <__func__.2+0x2c8>
    80009c8c:	e399                	bnez	a5,80009c92 <tinst_tests+0x1c86>
    80009c8e:	ae3fe06f          	j	80008770 <tinst_tests+0x764>
    80009c92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c94:	0016f713          	andi	a4,a3,1
    80009c98:	66071063          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c9c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ca0:	460d                	li	a2,3
    80009ca2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ca6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ca8:	00c59763          	bne	a1,a2,80009cb6 <tinst_tests+0x1caa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cac:	0026d683          	lhu	a3,2(a3)
    80009cb0:	0106969b          	slliw	a3,a3,0x10
    80009cb4:	8f55                	or	a4,a4,a3
    80009cb6:	01f076b7          	lui	a3,0x1f07
    80009cba:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009cbe:	8f75                	and	a4,a4,a3
    80009cc0:	00019597          	auipc	a1,0x19
    80009cc4:	e7058593          	addi	a1,a1,-400 # 80022b30 <__func__.2+0x2c8>
    80009cc8:	00e79463          	bne	a5,a4,80009cd0 <tinst_tests+0x1cc4>
    80009ccc:	aa5fe06f          	j	80008770 <tinst_tests+0x764>
    80009cd0:	00019597          	auipc	a1,0x19
    80009cd4:	e7058593          	addi	a1,a1,-400 # 80022b40 <__func__.2+0x2d8>
    80009cd8:	a99fe06f          	j	80008770 <tinst_tests+0x764>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009cdc:	701c                	ld	a5,32(s0)
    80009cde:	00019597          	auipc	a1,0x19
    80009ce2:	e5258593          	addi	a1,a1,-430 # 80022b30 <__func__.2+0x2c8>
    80009ce6:	e399                	bnez	a5,80009cec <tinst_tests+0x1ce0>
    80009ce8:	dddfe06f          	j	80008ac4 <tinst_tests+0xab8>
    80009cec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cee:	0016f713          	andi	a4,a3,1
    80009cf2:	60071363          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009cf6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cfa:	460d                	li	a2,3
    80009cfc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d02:	00c59763          	bne	a1,a2,80009d10 <tinst_tests+0x1d04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d06:	0026d683          	lhu	a3,2(a3)
    80009d0a:	0106969b          	slliw	a3,a3,0x10
    80009d0e:	8f55                	or	a4,a4,a3
    80009d10:	1ffe16b7          	lui	a3,0x1ffe1
    80009d14:	068e                	slli	a3,a3,0x3
    80009d16:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d18:	8f75                	and	a4,a4,a3
    80009d1a:	00019597          	auipc	a1,0x19
    80009d1e:	e1658593          	addi	a1,a1,-490 # 80022b30 <__func__.2+0x2c8>
    80009d22:	00e79463          	bne	a5,a4,80009d2a <tinst_tests+0x1d1e>
    80009d26:	d9ffe06f          	j	80008ac4 <tinst_tests+0xab8>
    80009d2a:	00019597          	auipc	a1,0x19
    80009d2e:	e1658593          	addi	a1,a1,-490 # 80022b40 <__func__.2+0x2d8>
    80009d32:	d93fe06f          	j	80008ac4 <tinst_tests+0xab8>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009d36:	701c                	ld	a5,32(s0)
    80009d38:	00019597          	auipc	a1,0x19
    80009d3c:	df858593          	addi	a1,a1,-520 # 80022b30 <__func__.2+0x2c8>
    80009d40:	e399                	bnez	a5,80009d46 <tinst_tests+0x1d3a>
    80009d42:	e37fe06f          	j	80008b78 <tinst_tests+0xb6c>
    80009d46:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d48:	0016f713          	andi	a4,a3,1
    80009d4c:	5a071663          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009d50:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d54:	460d                	li	a2,3
    80009d56:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d5a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d5c:	00c59763          	bne	a1,a2,80009d6a <tinst_tests+0x1d5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d60:	0026d683          	lhu	a3,2(a3)
    80009d64:	0106969b          	slliw	a3,a3,0x10
    80009d68:	8f55                	or	a4,a4,a3
    80009d6a:	1ffe16b7          	lui	a3,0x1ffe1
    80009d6e:	068e                	slli	a3,a3,0x3
    80009d70:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d72:	8f75                	and	a4,a4,a3
    80009d74:	00019597          	auipc	a1,0x19
    80009d78:	dbc58593          	addi	a1,a1,-580 # 80022b30 <__func__.2+0x2c8>
    80009d7c:	00e79463          	bne	a5,a4,80009d84 <tinst_tests+0x1d78>
    80009d80:	df9fe06f          	j	80008b78 <tinst_tests+0xb6c>
    80009d84:	00019597          	auipc	a1,0x19
    80009d88:	dbc58593          	addi	a1,a1,-580 # 80022b40 <__func__.2+0x2d8>
    80009d8c:	dedfe06f          	j	80008b78 <tinst_tests+0xb6c>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009d90:	701c                	ld	a5,32(s0)
    80009d92:	00019597          	auipc	a1,0x19
    80009d96:	d9e58593          	addi	a1,a1,-610 # 80022b30 <__func__.2+0x2c8>
    80009d9a:	e399                	bnez	a5,80009da0 <tinst_tests+0x1d94>
    80009d9c:	e8ffe06f          	j	80008c2a <tinst_tests+0xc1e>
    80009da0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009da2:	0016f713          	andi	a4,a3,1
    80009da6:	54071963          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009daa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009dae:	460d                	li	a2,3
    80009db0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009db4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009db6:	00c59763          	bne	a1,a2,80009dc4 <tinst_tests+0x1db8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dba:	0026d683          	lhu	a3,2(a3)
    80009dbe:	0106969b          	slliw	a3,a3,0x10
    80009dc2:	8f55                	or	a4,a4,a3
    80009dc4:	1ffe16b7          	lui	a3,0x1ffe1
    80009dc8:	068e                	slli	a3,a3,0x3
    80009dca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009dcc:	8f75                	and	a4,a4,a3
    80009dce:	00019597          	auipc	a1,0x19
    80009dd2:	d6258593          	addi	a1,a1,-670 # 80022b30 <__func__.2+0x2c8>
    80009dd6:	00e79463          	bne	a5,a4,80009dde <tinst_tests+0x1dd2>
    80009dda:	e51fe06f          	j	80008c2a <tinst_tests+0xc1e>
    80009dde:	00019597          	auipc	a1,0x19
    80009de2:	d6258593          	addi	a1,a1,-670 # 80022b40 <__func__.2+0x2d8>
    80009de6:	e45fe06f          	j	80008c2a <tinst_tests+0xc1e>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009dea:	701c                	ld	a5,32(s0)
    80009dec:	e399                	bnez	a5,80009df2 <tinst_tests+0x1de6>
    80009dee:	b8cfe06f          	j	8000817a <tinst_tests+0x16e>
    80009df2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009df4:	0016f713          	andi	a4,a3,1
    80009df8:	50071063          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009dfc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e00:	460d                	li	a2,3
    80009e02:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e06:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e08:	00c59763          	bne	a1,a2,80009e16 <tinst_tests+0x1e0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e0c:	0026d683          	lhu	a3,2(a3)
    80009e10:	0106969b          	slliw	a3,a3,0x10
    80009e14:	8f55                	or	a4,a4,a3
    80009e16:	1746                	slli	a4,a4,0x31
    80009e18:	9345                	srli	a4,a4,0x31
    80009e1a:	00e78463          	beq	a5,a4,80009e22 <tinst_tests+0x1e16>
    80009e1e:	b48fe06f          	j	80008166 <tinst_tests+0x15a>
    80009e22:	b58fe06f          	j	8000817a <tinst_tests+0x16e>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009e26:	6418                	ld	a4,8(s0)
    80009e28:	47b5                	li	a5,13
    80009e2a:	00f70463          	beq	a4,a5,80009e32 <tinst_tests+0x1e26>
    80009e2e:	d7afe06f          	j	800083a8 <tinst_tests+0x39c>
    80009e32:	7018                	ld	a4,32(s0)
    80009e34:	e319                	bnez	a4,80009e3a <tinst_tests+0x1e2e>
    80009e36:	d74fe06f          	j	800083aa <tinst_tests+0x39e>
    80009e3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e3c:	0016f793          	andi	a5,a3,1
    80009e40:	4a079c63          	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009e44:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e48:	460d                	li	a2,3
    80009e4a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e4e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e50:	00c59763          	bne	a1,a2,80009e5e <tinst_tests+0x1e52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e54:	0026d683          	lhu	a3,2(a3)
    80009e58:	0106969b          	slliw	a3,a3,0x10
    80009e5c:	8fd5                	or	a5,a5,a3
    80009e5e:	17c6                	slli	a5,a5,0x31
    80009e60:	0317d913          	srli	s2,a5,0x31
    80009e64:	40e90933          	sub	s2,s2,a4
    80009e68:	00193913          	seqz	s2,s2
    80009e6c:	d3efe06f          	j	800083aa <tinst_tests+0x39e>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009e70:	6418                	ld	a4,8(s0)
    80009e72:	47bd                	li	a5,15
    80009e74:	00019597          	auipc	a1,0x19
    80009e78:	ccc58593          	addi	a1,a1,-820 # 80022b40 <__func__.2+0x2d8>
    80009e7c:	00f70463          	beq	a4,a5,80009e84 <tinst_tests+0x1e78>
    80009e80:	e51fe06f          	j	80008cd0 <tinst_tests+0xcc4>
    80009e84:	701c                	ld	a5,32(s0)
    80009e86:	00019597          	auipc	a1,0x19
    80009e8a:	caa58593          	addi	a1,a1,-854 # 80022b30 <__func__.2+0x2c8>
    80009e8e:	e399                	bnez	a5,80009e94 <tinst_tests+0x1e88>
    80009e90:	e41fe06f          	j	80008cd0 <tinst_tests+0xcc4>
    80009e94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e96:	0016f713          	andi	a4,a3,1
    80009e9a:	44071f63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009e9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ea2:	460d                	li	a2,3
    80009ea4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ea8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009eaa:	00c59763          	bne	a1,a2,80009eb8 <tinst_tests+0x1eac>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009eae:	0026d683          	lhu	a3,2(a3)
    80009eb2:	0106969b          	slliw	a3,a3,0x10
    80009eb6:	8f55                	or	a4,a4,a3
    80009eb8:	1ffe16b7          	lui	a3,0x1ffe1
    80009ebc:	068e                	slli	a3,a3,0x3
    80009ebe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009ec0:	8f75                	and	a4,a4,a3
    80009ec2:	00019597          	auipc	a1,0x19
    80009ec6:	c6e58593          	addi	a1,a1,-914 # 80022b30 <__func__.2+0x2c8>
    80009eca:	00e78463          	beq	a5,a4,80009ed2 <tinst_tests+0x1ec6>
    80009ece:	dfbfe06f          	j	80008cc8 <tinst_tests+0xcbc>
    80009ed2:	dfffe06f          	j	80008cd0 <tinst_tests+0xcc4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009ed6:	6418                	ld	a4,8(s0)
    80009ed8:	47b5                	li	a5,13
    80009eda:	00f70463          	beq	a4,a5,80009ee2 <tinst_tests+0x1ed6>
    80009ede:	d74fe06f          	j	80008452 <tinst_tests+0x446>
    80009ee2:	7018                	ld	a4,32(s0)
    80009ee4:	e319                	bnez	a4,80009eea <tinst_tests+0x1ede>
    80009ee6:	d6efe06f          	j	80008454 <tinst_tests+0x448>
    80009eea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009eec:	0016f793          	andi	a5,a3,1
    80009ef0:	40079463          	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009ef4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ef8:	460d                	li	a2,3
    80009efa:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009efe:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f00:	00c59763          	bne	a1,a2,80009f0e <tinst_tests+0x1f02>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f04:	0026d683          	lhu	a3,2(a3)
    80009f08:	0106969b          	slliw	a3,a3,0x10
    80009f0c:	8fd5                	or	a5,a5,a3
    80009f0e:	17c6                	slli	a5,a5,0x31
    80009f10:	0317d913          	srli	s2,a5,0x31
    80009f14:	40e90933          	sub	s2,s2,a4
    80009f18:	00193913          	seqz	s2,s2
    80009f1c:	d38fe06f          	j	80008454 <tinst_tests+0x448>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009f20:	6418                	ld	a4,8(s0)
    80009f22:	47b5                	li	a5,13
    80009f24:	00f70463          	beq	a4,a5,80009f2c <tinst_tests+0x1f20>
    80009f28:	dd4fe06f          	j	800084fc <tinst_tests+0x4f0>
    80009f2c:	7018                	ld	a4,32(s0)
    80009f2e:	e319                	bnez	a4,80009f34 <tinst_tests+0x1f28>
    80009f30:	dcefe06f          	j	800084fe <tinst_tests+0x4f2>
    80009f34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f36:	0016f793          	andi	a5,a3,1
    80009f3a:	3a079f63          	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009f3e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f42:	460d                	li	a2,3
    80009f44:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009f48:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f4a:	00c59763          	bne	a1,a2,80009f58 <tinst_tests+0x1f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f4e:	0026d683          	lhu	a3,2(a3)
    80009f52:	0106969b          	slliw	a3,a3,0x10
    80009f56:	8fd5                	or	a5,a5,a3
    80009f58:	17c6                	slli	a5,a5,0x31
    80009f5a:	0317d913          	srli	s2,a5,0x31
    80009f5e:	40e90933          	sub	s2,s2,a4
    80009f62:	00193913          	seqz	s2,s2
    80009f66:	d98fe06f          	j	800084fe <tinst_tests+0x4f2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009f6a:	6418                	ld	a4,8(s0)
    80009f6c:	47bd                	li	a5,15
    80009f6e:	00f70463          	beq	a4,a5,80009f76 <tinst_tests+0x1f6a>
    80009f72:	e36fe06f          	j	800085a8 <tinst_tests+0x59c>
    80009f76:	701c                	ld	a5,32(s0)
    80009f78:	e399                	bnez	a5,80009f7e <tinst_tests+0x1f72>
    80009f7a:	e30fe06f          	j	800085aa <tinst_tests+0x59e>
    80009f7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f80:	0016f713          	andi	a4,a3,1
    80009f84:	36071a63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009f88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f8c:	460d                	li	a2,3
    80009f8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f94:	00c59763          	bne	a1,a2,80009fa2 <tinst_tests+0x1f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f98:	0026d683          	lhu	a3,2(a3)
    80009f9c:	0106969b          	slliw	a3,a3,0x10
    80009fa0:	8f55                	or	a4,a4,a3
    80009fa2:	01f076b7          	lui	a3,0x1f07
    80009fa6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009faa:	8f75                	and	a4,a4,a3
    80009fac:	40f70933          	sub	s2,a4,a5
    80009fb0:	00193913          	seqz	s2,s2
    80009fb4:	df6fe06f          	j	800085aa <tinst_tests+0x59e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009fb8:	6418                	ld	a4,8(s0)
    80009fba:	47bd                	li	a5,15
    80009fbc:	00f70463          	beq	a4,a5,80009fc4 <tinst_tests+0x1fb8>
    80009fc0:	e98fe06f          	j	80008658 <tinst_tests+0x64c>
    80009fc4:	701c                	ld	a5,32(s0)
    80009fc6:	e399                	bnez	a5,80009fcc <tinst_tests+0x1fc0>
    80009fc8:	e92fe06f          	j	8000865a <tinst_tests+0x64e>
    80009fcc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fce:	0016f713          	andi	a4,a3,1
    80009fd2:	32071363          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    80009fd6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fda:	460d                	li	a2,3
    80009fdc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fe0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fe2:	00c59763          	bne	a1,a2,80009ff0 <tinst_tests+0x1fe4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fe6:	0026d683          	lhu	a3,2(a3)
    80009fea:	0106969b          	slliw	a3,a3,0x10
    80009fee:	8f55                	or	a4,a4,a3
    80009ff0:	01f076b7          	lui	a3,0x1f07
    80009ff4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009ff8:	8f75                	and	a4,a4,a3
    80009ffa:	40f70933          	sub	s2,a4,a5
    80009ffe:	00193913          	seqz	s2,s2
    8000a002:	e58fe06f          	j	8000865a <tinst_tests+0x64e>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a006:	6418                	ld	a4,8(s0)
    8000a008:	47bd                	li	a5,15
    8000a00a:	00f70463          	beq	a4,a5,8000a012 <tinst_tests+0x2006>
    8000a00e:	efcfe06f          	j	8000870a <tinst_tests+0x6fe>
    8000a012:	701c                	ld	a5,32(s0)
    8000a014:	e399                	bnez	a5,8000a01a <tinst_tests+0x200e>
    8000a016:	ef6fe06f          	j	8000870c <tinst_tests+0x700>
    8000a01a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a01c:	0016f713          	andi	a4,a3,1
    8000a020:	2c071c63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a024:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a028:	460d                	li	a2,3
    8000a02a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a02e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a030:	00c59763          	bne	a1,a2,8000a03e <tinst_tests+0x2032>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a034:	0026d683          	lhu	a3,2(a3)
    8000a038:	0106969b          	slliw	a3,a3,0x10
    8000a03c:	8f55                	or	a4,a4,a3
    8000a03e:	01f076b7          	lui	a3,0x1f07
    8000a042:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a046:	8f75                	and	a4,a4,a3
    8000a048:	40f70933          	sub	s2,a4,a5
    8000a04c:	00193913          	seqz	s2,s2
    8000a050:	ebcfe06f          	j	8000870c <tinst_tests+0x700>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a054:	6418                	ld	a4,8(s0)
    8000a056:	47bd                	li	a5,15
    8000a058:	00f70463          	beq	a4,a5,8000a060 <tinst_tests+0x2054>
    8000a05c:	f62fe06f          	j	800087be <tinst_tests+0x7b2>
    8000a060:	701c                	ld	a5,32(s0)
    8000a062:	e399                	bnez	a5,8000a068 <tinst_tests+0x205c>
    8000a064:	f5cfe06f          	j	800087c0 <tinst_tests+0x7b4>
    8000a068:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a06a:	0016f713          	andi	a4,a3,1
    8000a06e:	28071563          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a072:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a076:	460d                	li	a2,3
    8000a078:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a07c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a07e:	00c59763          	bne	a1,a2,8000a08c <tinst_tests+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a082:	0026d683          	lhu	a3,2(a3)
    8000a086:	0106969b          	slliw	a3,a3,0x10
    8000a08a:	8f55                	or	a4,a4,a3
    8000a08c:	01f076b7          	lui	a3,0x1f07
    8000a090:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a094:	8f75                	and	a4,a4,a3
    8000a096:	40f70933          	sub	s2,a4,a5
    8000a09a:	00193913          	seqz	s2,s2
    8000a09e:	f22fe06f          	j	800087c0 <tinst_tests+0x7b4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a0a2:	6418                	ld	a4,8(s0)
    8000a0a4:	47b5                	li	a5,13
    8000a0a6:	00f70463          	beq	a4,a5,8000a0ae <tinst_tests+0x20a2>
    8000a0aa:	fb8fe06f          	j	80008862 <tinst_tests+0x856>
    8000a0ae:	7004                	ld	s1,32(s0)
    8000a0b0:	e099                	bnez	s1,8000a0b6 <tinst_tests+0x20aa>
    8000a0b2:	fb2fe06f          	j	80008864 <tinst_tests+0x858>
    8000a0b6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a0b8:	0017f713          	andi	a4,a5,1
    8000a0bc:	22071e63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0c0:	0007d503          	lhu	a0,0(a5)
    8000a0c4:	a00f70ef          	jal	800012c4 <expand_compressed_instruction>
    8000a0c8:	67a1                	lui	a5,0x8
    8000a0ca:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a0cc:	00f57933          	and	s2,a0,a5
    8000a0d0:	40990933          	sub	s2,s2,s1
    8000a0d4:	00193913          	seqz	s2,s2
    8000a0d8:	f8cfe06f          	j	80008864 <tinst_tests+0x858>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a0dc:	6418                	ld	a4,8(s0)
    8000a0de:	47b5                	li	a5,13
    8000a0e0:	00f70463          	beq	a4,a5,8000a0e8 <tinst_tests+0x20dc>
    8000a0e4:	825fe06f          	j	80008908 <tinst_tests+0x8fc>
    8000a0e8:	02043983          	ld	s3,32(s0)
    8000a0ec:	00099463          	bnez	s3,8000a0f4 <tinst_tests+0x20e8>
    8000a0f0:	81bfe06f          	j	8000890a <tinst_tests+0x8fe>
    8000a0f4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a0f6:	0017f713          	andi	a4,a5,1
    8000a0fa:	1e071f63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0fe:	0007d503          	lhu	a0,0(a5)
    8000a102:	9c2f70ef          	jal	800012c4 <expand_compressed_instruction>
    8000a106:	67a1                	lui	a5,0x8
    8000a108:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a10a:	00f57933          	and	s2,a0,a5
    8000a10e:	41390933          	sub	s2,s2,s3
    8000a112:	00193913          	seqz	s2,s2
    8000a116:	ff4fe06f          	j	8000890a <tinst_tests+0x8fe>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000a11a:	701c                	ld	a5,32(s0)
    8000a11c:	e399                	bnez	a5,8000a122 <tinst_tests+0x2116>
    8000a11e:	9ddfe06f          	j	80008afa <tinst_tests+0xaee>
    8000a122:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a124:	0016f713          	andi	a4,a3,1
    8000a128:	1c071863          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a12c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a130:	460d                	li	a2,3
    8000a132:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a136:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a138:	00c59763          	bne	a1,a2,8000a146 <tinst_tests+0x213a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a13c:	0026d683          	lhu	a3,2(a3)
    8000a140:	0106969b          	slliw	a3,a3,0x10
    8000a144:	8f55                	or	a4,a4,a3
    8000a146:	1ffe16b7          	lui	a3,0x1ffe1
    8000a14a:	068e                	slli	a3,a3,0x3
    8000a14c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a14e:	8f75                	and	a4,a4,a3
    8000a150:	00e78463          	beq	a5,a4,8000a158 <tinst_tests+0x214c>
    8000a154:	993fe06f          	j	80008ae6 <tinst_tests+0xada>
    8000a158:	9a3fe06f          	j	80008afa <tinst_tests+0xaee>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000a15c:	701c                	ld	a5,32(s0)
    8000a15e:	e399                	bnez	a5,8000a164 <tinst_tests+0x2158>
    8000a160:	a4ffe06f          	j	80008bae <tinst_tests+0xba2>
    8000a164:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a166:	0016f713          	andi	a4,a3,1
    8000a16a:	18071763          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a16e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a172:	460d                	li	a2,3
    8000a174:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a178:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a17a:	00c59763          	bne	a1,a2,8000a188 <tinst_tests+0x217c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a17e:	0026d683          	lhu	a3,2(a3)
    8000a182:	0106969b          	slliw	a3,a3,0x10
    8000a186:	8f55                	or	a4,a4,a3
    8000a188:	1ffe16b7          	lui	a3,0x1ffe1
    8000a18c:	068e                	slli	a3,a3,0x3
    8000a18e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a190:	8f75                	and	a4,a4,a3
    8000a192:	00e78463          	beq	a5,a4,8000a19a <tinst_tests+0x218e>
    8000a196:	a05fe06f          	j	80008b9a <tinst_tests+0xb8e>
    8000a19a:	a15fe06f          	j	80008bae <tinst_tests+0xba2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a19e:	7004                	ld	s1,32(s0)
    8000a1a0:	780494e3          	bnez	s1,8000b128 <tinst_tests+0x311c>
    8000a1a4:	00019597          	auipc	a1,0x19
    8000a1a8:	98c58593          	addi	a1,a1,-1652 # 80022b30 <__func__.2+0x2c8>
    8000a1ac:	e68fe06f          	j	80008814 <tinst_tests+0x808>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000a1b0:	701c                	ld	a5,32(s0)
    8000a1b2:	e399                	bnez	a5,8000a1b8 <tinst_tests+0x21ac>
    8000a1b4:	aadfe06f          	j	80008c60 <tinst_tests+0xc54>
    8000a1b8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1ba:	0016f713          	andi	a4,a3,1
    8000a1be:	12071d63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a1c2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1c6:	460d                	li	a2,3
    8000a1c8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1cc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1ce:	00c59763          	bne	a1,a2,8000a1dc <tinst_tests+0x21d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1d2:	0026d683          	lhu	a3,2(a3)
    8000a1d6:	0106969b          	slliw	a3,a3,0x10
    8000a1da:	8f55                	or	a4,a4,a3
    8000a1dc:	1ffe16b7          	lui	a3,0x1ffe1
    8000a1e0:	068e                	slli	a3,a3,0x3
    8000a1e2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a1e4:	8f75                	and	a4,a4,a3
    8000a1e6:	00e78463          	beq	a5,a4,8000a1ee <tinst_tests+0x21e2>
    8000a1ea:	a63fe06f          	j	80008c4c <tinst_tests+0xc40>
    8000a1ee:	a73fe06f          	j	80008c60 <tinst_tests+0xc54>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a1f2:	02043983          	ld	s3,32(s0)
    8000a1f6:	74099fe3          	bnez	s3,8000b154 <tinst_tests+0x3148>
    8000a1fa:	00019597          	auipc	a1,0x19
    8000a1fe:	93658593          	addi	a1,a1,-1738 # 80022b30 <__func__.2+0x2c8>
    8000a202:	eb8fe06f          	j	800088ba <tinst_tests+0x8ae>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a206:	02043983          	ld	s3,32(s0)
    8000a20a:	7a099ce3          	bnez	s3,8000b1c2 <tinst_tests+0x31b6>
    8000a20e:	00019597          	auipc	a1,0x19
    8000a212:	92258593          	addi	a1,a1,-1758 # 80022b30 <__func__.2+0x2c8>
    8000a216:	f4afe06f          	j	80008960 <tinst_tests+0x954>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a21a:	7004                	ld	s1,32(s0)
    8000a21c:	c099                	beqz	s1,8000a222 <tinst_tests+0x2216>
    8000a21e:	0160106f          	j	8000b234 <tinst_tests+0x3228>
    8000a222:	00019597          	auipc	a1,0x19
    8000a226:	90e58593          	addi	a1,a1,-1778 # 80022b30 <__func__.2+0x2c8>
    8000a22a:	fe4fe06f          	j	80008a0e <tinst_tests+0xa02>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000a22e:	7018                	ld	a4,32(s0)
    8000a230:	e319                	bnez	a4,8000a236 <tinst_tests+0x222a>
    8000a232:	f6bfd06f          	j	8000819c <tinst_tests+0x190>
    8000a236:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a238:	0016f793          	andi	a5,a3,1
    8000a23c:	efd5                	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a23e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a242:	460d                	li	a2,3
    8000a244:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a248:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a24a:	00c59763          	bne	a1,a2,8000a258 <tinst_tests+0x224c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a24e:	0026d683          	lhu	a3,2(a3)
    8000a252:	0106969b          	slliw	a3,a3,0x10
    8000a256:	8fd5                	or	a5,a5,a3
    8000a258:	03179913          	slli	s2,a5,0x31
    8000a25c:	03195913          	srli	s2,s2,0x31
    8000a260:	40e90933          	sub	s2,s2,a4
    8000a264:	00193913          	seqz	s2,s2
    8000a268:	f35fd06f          	j	8000819c <tinst_tests+0x190>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a26c:	7018                	ld	a4,32(s0)
    8000a26e:	e319                	bnez	a4,8000a274 <tinst_tests+0x2268>
    8000a270:	fdffd06f          	j	8000824e <tinst_tests+0x242>
    8000a274:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a276:	0016f793          	andi	a5,a3,1
    8000a27a:	efbd                	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a27c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a280:	460d                	li	a2,3
    8000a282:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a286:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a288:	00c59763          	bne	a1,a2,8000a296 <tinst_tests+0x228a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a28c:	0026d683          	lhu	a3,2(a3)
    8000a290:	0106969b          	slliw	a3,a3,0x10
    8000a294:	8fd5                	or	a5,a5,a3
    8000a296:	03179913          	slli	s2,a5,0x31
    8000a29a:	03195913          	srli	s2,s2,0x31
    8000a29e:	40e90933          	sub	s2,s2,a4
    8000a2a2:	00193913          	seqz	s2,s2
    8000a2a6:	fa9fd06f          	j	8000824e <tinst_tests+0x242>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a2aa:	7018                	ld	a4,32(s0)
    8000a2ac:	e319                	bnez	a4,8000a2b2 <tinst_tests+0x22a6>
    8000a2ae:	852fe06f          	j	80008300 <tinst_tests+0x2f4>
    8000a2b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2b4:	0016f793          	andi	a5,a3,1
    8000a2b8:	e3a1                	bnez	a5,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a2ba:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2be:	460d                	li	a2,3
    8000a2c0:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a2c4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a2c6:	00c59763          	bne	a1,a2,8000a2d4 <tinst_tests+0x22c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2ca:	0026d683          	lhu	a3,2(a3)
    8000a2ce:	0106969b          	slliw	a3,a3,0x10
    8000a2d2:	8fd5                	or	a5,a5,a3
    8000a2d4:	17c6                	slli	a5,a5,0x31
    8000a2d6:	0317d913          	srli	s2,a5,0x31
    8000a2da:	40e90933          	sub	s2,s2,a4
    8000a2de:	00193913          	seqz	s2,s2
    8000a2e2:	81efe06f          	j	80008300 <tinst_tests+0x2f4>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a2e6:	701c                	ld	a5,32(s0)
    8000a2e8:	e399                	bnez	a5,8000a2ee <tinst_tests+0x22e2>
    8000a2ea:	f43fd06f          	j	8000822c <tinst_tests+0x220>
    8000a2ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2f0:	0016f713          	andi	a4,a3,1
    8000a2f4:	3e070fe3          	beqz	a4,8000aef2 <tinst_tests+0x2ee6>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000a2f8:	11400613          	li	a2,276
    8000a2fc:	00017597          	auipc	a1,0x17
    8000a300:	42458593          	addi	a1,a1,1060 # 80021720 <__func__.0>
    8000a304:	0001a517          	auipc	a0,0x1a
    8000a308:	0f450513          	addi	a0,a0,244 # 800243f8 <__func__.2+0x1b90>
    8000a30c:	165160ef          	jal	80020c70 <printf>
    8000a310:	11400613          	li	a2,276
    8000a314:	00017597          	auipc	a1,0x17
    8000a318:	40c58593          	addi	a1,a1,1036 # 80021720 <__func__.0>
    8000a31c:	00019517          	auipc	a0,0x19
    8000a320:	9bc50513          	addi	a0,a0,-1604 # 80022cd8 <__func__.2+0x470>
    8000a324:	14d160ef          	jal	80020c70 <printf>
    8000a328:	4501                	li	a0,0
    8000a32a:	057160ef          	jal	80020b80 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a32e:	701c                	ld	a5,32(s0)
    8000a330:	00019597          	auipc	a1,0x19
    8000a334:	80058593          	addi	a1,a1,-2048 # 80022b30 <__func__.2+0x2c8>
    8000a338:	e399                	bnez	a5,8000a33e <tinst_tests+0x2332>
    8000a33a:	a49fe06f          	j	80008d82 <tinst_tests+0xd76>
    8000a33e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a340:	0016f713          	andi	a4,a3,1
    8000a344:	fb55                	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a346:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a34a:	460d                	li	a2,3
    8000a34c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a350:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a352:	00c59763          	bne	a1,a2,8000a360 <tinst_tests+0x2354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a356:	0026d683          	lhu	a3,2(a3)
    8000a35a:	0106969b          	slliw	a3,a3,0x10
    8000a35e:	8f55                	or	a4,a4,a3
    8000a360:	1ffe16b7          	lui	a3,0x1ffe1
    8000a364:	068e                	slli	a3,a3,0x3
    8000a366:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a368:	8f75                	and	a4,a4,a3
    8000a36a:	00018597          	auipc	a1,0x18
    8000a36e:	7c658593          	addi	a1,a1,1990 # 80022b30 <__func__.2+0x2c8>
    8000a372:	00e79463          	bne	a5,a4,8000a37a <tinst_tests+0x236e>
    8000a376:	a0dfe06f          	j	80008d82 <tinst_tests+0xd76>
    8000a37a:	00018597          	auipc	a1,0x18
    8000a37e:	7c658593          	addi	a1,a1,1990 # 80022b40 <__func__.2+0x2d8>
    8000a382:	a01fe06f          	j	80008d82 <tinst_tests+0xd76>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a386:	701c                	ld	a5,32(s0)
    8000a388:	e399                	bnez	a5,8000a38e <tinst_tests+0x2382>
    8000a38a:	f55fd06f          	j	800082de <tinst_tests+0x2d2>
    8000a38e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a390:	0016f713          	andi	a4,a3,1
    8000a394:	f335                	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a396:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a39a:	460d                	li	a2,3
    8000a39c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3a2:	00c59763          	bne	a1,a2,8000a3b0 <tinst_tests+0x23a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3a6:	0026d683          	lhu	a3,2(a3)
    8000a3aa:	0106969b          	slliw	a3,a3,0x10
    8000a3ae:	8f55                	or	a4,a4,a3
    8000a3b0:	1746                	slli	a4,a4,0x31
    8000a3b2:	9345                	srli	a4,a4,0x31
    8000a3b4:	00e78463          	beq	a5,a4,8000a3bc <tinst_tests+0x23b0>
    8000a3b8:	f13fd06f          	j	800082ca <tinst_tests+0x2be>
    8000a3bc:	f23fd06f          	j	800082de <tinst_tests+0x2d2>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a3c0:	701c                	ld	a5,32(s0)
    8000a3c2:	00018597          	auipc	a1,0x18
    8000a3c6:	76e58593          	addi	a1,a1,1902 # 80022b30 <__func__.2+0x2c8>
    8000a3ca:	e399                	bnez	a5,8000a3d0 <tinst_tests+0x23c4>
    8000a3cc:	a69fe06f          	j	80008e34 <tinst_tests+0xe28>
    8000a3d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3d2:	0016f713          	andi	a4,a3,1
    8000a3d6:	f30d                	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a3d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3dc:	460d                	li	a2,3
    8000a3de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3e4:	00c59763          	bne	a1,a2,8000a3f2 <tinst_tests+0x23e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3e8:	0026d683          	lhu	a3,2(a3)
    8000a3ec:	0106969b          	slliw	a3,a3,0x10
    8000a3f0:	8f55                	or	a4,a4,a3
    8000a3f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3f6:	068e                	slli	a3,a3,0x3
    8000a3f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3fa:	8f75                	and	a4,a4,a3
    8000a3fc:	00018597          	auipc	a1,0x18
    8000a400:	73458593          	addi	a1,a1,1844 # 80022b30 <__func__.2+0x2c8>
    8000a404:	00e79463          	bne	a5,a4,8000a40c <tinst_tests+0x2400>
    8000a408:	a2dfe06f          	j	80008e34 <tinst_tests+0xe28>
    8000a40c:	00018597          	auipc	a1,0x18
    8000a410:	73458593          	addi	a1,a1,1844 # 80022b40 <__func__.2+0x2d8>
    8000a414:	a21fe06f          	j	80008e34 <tinst_tests+0xe28>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a418:	701c                	ld	a5,32(s0)
    8000a41a:	e399                	bnez	a5,8000a420 <tinst_tests+0x2414>
    8000a41c:	f75fd06f          	j	80008390 <tinst_tests+0x384>
    8000a420:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a422:	0016f713          	andi	a4,a3,1
    8000a426:	ec0719e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a42a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a42e:	460d                	li	a2,3
    8000a430:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a434:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a436:	00c59763          	bne	a1,a2,8000a444 <tinst_tests+0x2438>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a43a:	0026d683          	lhu	a3,2(a3)
    8000a43e:	0106969b          	slliw	a3,a3,0x10
    8000a442:	8f55                	or	a4,a4,a3
    8000a444:	1746                	slli	a4,a4,0x31
    8000a446:	9345                	srli	a4,a4,0x31
    8000a448:	00e78463          	beq	a5,a4,8000a450 <tinst_tests+0x2444>
    8000a44c:	f31fd06f          	j	8000837c <tinst_tests+0x370>
    8000a450:	f41fd06f          	j	80008390 <tinst_tests+0x384>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a454:	701c                	ld	a5,32(s0)
    8000a456:	00018597          	auipc	a1,0x18
    8000a45a:	6da58593          	addi	a1,a1,1754 # 80022b30 <__func__.2+0x2c8>
    8000a45e:	e399                	bnez	a5,8000a464 <tinst_tests+0x2458>
    8000a460:	a87fe06f          	j	80008ee6 <tinst_tests+0xeda>
    8000a464:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a466:	0016f713          	andi	a4,a3,1
    8000a46a:	e80717e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a46e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a472:	460d                	li	a2,3
    8000a474:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a478:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a47a:	00c59763          	bne	a1,a2,8000a488 <tinst_tests+0x247c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a47e:	0026d683          	lhu	a3,2(a3)
    8000a482:	0106969b          	slliw	a3,a3,0x10
    8000a486:	8f55                	or	a4,a4,a3
    8000a488:	1ffe16b7          	lui	a3,0x1ffe1
    8000a48c:	068e                	slli	a3,a3,0x3
    8000a48e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a490:	8f75                	and	a4,a4,a3
    8000a492:	00018597          	auipc	a1,0x18
    8000a496:	69e58593          	addi	a1,a1,1694 # 80022b30 <__func__.2+0x2c8>
    8000a49a:	00e79463          	bne	a5,a4,8000a4a2 <tinst_tests+0x2496>
    8000a49e:	a49fe06f          	j	80008ee6 <tinst_tests+0xeda>
    8000a4a2:	00018597          	auipc	a1,0x18
    8000a4a6:	69e58593          	addi	a1,a1,1694 # 80022b40 <__func__.2+0x2d8>
    8000a4aa:	a3dfe06f          	j	80008ee6 <tinst_tests+0xeda>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a4ae:	701c                	ld	a5,32(s0)
    8000a4b0:	e399                	bnez	a5,8000a4b6 <tinst_tests+0x24aa>
    8000a4b2:	f89fd06f          	j	8000843a <tinst_tests+0x42e>
    8000a4b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4b8:	0016f713          	andi	a4,a3,1
    8000a4bc:	e2071ee3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a4c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4c4:	460d                	li	a2,3
    8000a4c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4cc:	00c59763          	bne	a1,a2,8000a4da <tinst_tests+0x24ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4d0:	0026d683          	lhu	a3,2(a3)
    8000a4d4:	0106969b          	slliw	a3,a3,0x10
    8000a4d8:	8f55                	or	a4,a4,a3
    8000a4da:	1746                	slli	a4,a4,0x31
    8000a4dc:	9345                	srli	a4,a4,0x31
    8000a4de:	00e78463          	beq	a5,a4,8000a4e6 <tinst_tests+0x24da>
    8000a4e2:	f45fd06f          	j	80008426 <tinst_tests+0x41a>
    8000a4e6:	f55fd06f          	j	8000843a <tinst_tests+0x42e>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a4ea:	701c                	ld	a5,32(s0)
    8000a4ec:	00018597          	auipc	a1,0x18
    8000a4f0:	64458593          	addi	a1,a1,1604 # 80022b30 <__func__.2+0x2c8>
    8000a4f4:	e399                	bnez	a5,8000a4fa <tinst_tests+0x24ee>
    8000a4f6:	aa3fe06f          	j	80008f98 <tinst_tests+0xf8c>
    8000a4fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4fc:	0016f713          	andi	a4,a3,1
    8000a500:	de071ce3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a504:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a508:	460d                	li	a2,3
    8000a50a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a50e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a510:	00c59763          	bne	a1,a2,8000a51e <tinst_tests+0x2512>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a514:	0026d683          	lhu	a3,2(a3)
    8000a518:	0106969b          	slliw	a3,a3,0x10
    8000a51c:	8f55                	or	a4,a4,a3
    8000a51e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a522:	068e                	slli	a3,a3,0x3
    8000a524:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a526:	8f75                	and	a4,a4,a3
    8000a528:	00018597          	auipc	a1,0x18
    8000a52c:	60858593          	addi	a1,a1,1544 # 80022b30 <__func__.2+0x2c8>
    8000a530:	00e79463          	bne	a5,a4,8000a538 <tinst_tests+0x252c>
    8000a534:	a65fe06f          	j	80008f98 <tinst_tests+0xf8c>
    8000a538:	00018597          	auipc	a1,0x18
    8000a53c:	60858593          	addi	a1,a1,1544 # 80022b40 <__func__.2+0x2d8>
    8000a540:	a59fe06f          	j	80008f98 <tinst_tests+0xf8c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a544:	701c                	ld	a5,32(s0)
    8000a546:	e399                	bnez	a5,8000a54c <tinst_tests+0x2540>
    8000a548:	f9dfd06f          	j	800084e4 <tinst_tests+0x4d8>
    8000a54c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a54e:	0016f713          	andi	a4,a3,1
    8000a552:	da0713e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a556:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a55a:	460d                	li	a2,3
    8000a55c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a560:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a562:	00c59763          	bne	a1,a2,8000a570 <tinst_tests+0x2564>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a566:	0026d683          	lhu	a3,2(a3)
    8000a56a:	0106969b          	slliw	a3,a3,0x10
    8000a56e:	8f55                	or	a4,a4,a3
    8000a570:	1746                	slli	a4,a4,0x31
    8000a572:	9345                	srli	a4,a4,0x31
    8000a574:	00e78463          	beq	a5,a4,8000a57c <tinst_tests+0x2570>
    8000a578:	f59fd06f          	j	800084d0 <tinst_tests+0x4c4>
    8000a57c:	f69fd06f          	j	800084e4 <tinst_tests+0x4d8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a580:	701c                	ld	a5,32(s0)
    8000a582:	00018597          	auipc	a1,0x18
    8000a586:	5ae58593          	addi	a1,a1,1454 # 80022b30 <__func__.2+0x2c8>
    8000a58a:	e399                	bnez	a5,8000a590 <tinst_tests+0x2584>
    8000a58c:	abffe06f          	j	8000904a <tinst_tests+0x103e>
    8000a590:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a592:	0016f713          	andi	a4,a3,1
    8000a596:	d60711e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a59a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a59e:	460d                	li	a2,3
    8000a5a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5a6:	00c59763          	bne	a1,a2,8000a5b4 <tinst_tests+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5aa:	0026d683          	lhu	a3,2(a3)
    8000a5ae:	0106969b          	slliw	a3,a3,0x10
    8000a5b2:	8f55                	or	a4,a4,a3
    8000a5b4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5b8:	068e                	slli	a3,a3,0x3
    8000a5ba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5bc:	8f75                	and	a4,a4,a3
    8000a5be:	00018597          	auipc	a1,0x18
    8000a5c2:	57258593          	addi	a1,a1,1394 # 80022b30 <__func__.2+0x2c8>
    8000a5c6:	00e79463          	bne	a5,a4,8000a5ce <tinst_tests+0x25c2>
    8000a5ca:	a81fe06f          	j	8000904a <tinst_tests+0x103e>
    8000a5ce:	00018597          	auipc	a1,0x18
    8000a5d2:	57258593          	addi	a1,a1,1394 # 80022b40 <__func__.2+0x2d8>
    8000a5d6:	a75fe06f          	j	8000904a <tinst_tests+0x103e>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a5da:	701c                	ld	a5,32(s0)
    8000a5dc:	e399                	bnez	a5,8000a5e2 <tinst_tests+0x25d6>
    8000a5de:	fb3fd06f          	j	80008590 <tinst_tests+0x584>
    8000a5e2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5e4:	0016f713          	andi	a4,a3,1
    8000a5e8:	d00718e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a5ec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5f0:	460d                	li	a2,3
    8000a5f2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5f6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5f8:	00c59763          	bne	a1,a2,8000a606 <tinst_tests+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5fc:	0026d683          	lhu	a3,2(a3)
    8000a600:	0106969b          	slliw	a3,a3,0x10
    8000a604:	8f55                	or	a4,a4,a3
    8000a606:	01f076b7          	lui	a3,0x1f07
    8000a60a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a60e:	8f75                	and	a4,a4,a3
    8000a610:	00e78463          	beq	a5,a4,8000a618 <tinst_tests+0x260c>
    8000a614:	f69fd06f          	j	8000857c <tinst_tests+0x570>
    8000a618:	f79fd06f          	j	80008590 <tinst_tests+0x584>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a61c:	701c                	ld	a5,32(s0)
    8000a61e:	00018597          	auipc	a1,0x18
    8000a622:	51258593          	addi	a1,a1,1298 # 80022b30 <__func__.2+0x2c8>
    8000a626:	e399                	bnez	a5,8000a62c <tinst_tests+0x2620>
    8000a628:	ad5fe06f          	j	800090fc <tinst_tests+0x10f0>
    8000a62c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a62e:	0016f713          	andi	a4,a3,1
    8000a632:	cc0713e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a636:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a63a:	460d                	li	a2,3
    8000a63c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a640:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a642:	00c59763          	bne	a1,a2,8000a650 <tinst_tests+0x2644>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a646:	0026d683          	lhu	a3,2(a3)
    8000a64a:	0106969b          	slliw	a3,a3,0x10
    8000a64e:	8f55                	or	a4,a4,a3
    8000a650:	1ffe16b7          	lui	a3,0x1ffe1
    8000a654:	068e                	slli	a3,a3,0x3
    8000a656:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a658:	8f75                	and	a4,a4,a3
    8000a65a:	00018597          	auipc	a1,0x18
    8000a65e:	4d658593          	addi	a1,a1,1238 # 80022b30 <__func__.2+0x2c8>
    8000a662:	00e79463          	bne	a5,a4,8000a66a <tinst_tests+0x265e>
    8000a666:	a97fe06f          	j	800090fc <tinst_tests+0x10f0>
    8000a66a:	00018597          	auipc	a1,0x18
    8000a66e:	4d658593          	addi	a1,a1,1238 # 80022b40 <__func__.2+0x2d8>
    8000a672:	a8bfe06f          	j	800090fc <tinst_tests+0x10f0>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a676:	701c                	ld	a5,32(s0)
    8000a678:	e399                	bnez	a5,8000a67e <tinst_tests+0x2672>
    8000a67a:	fc7fd06f          	j	80008640 <tinst_tests+0x634>
    8000a67e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a680:	0016f713          	andi	a4,a3,1
    8000a684:	c6071ae3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a688:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a68c:	460d                	li	a2,3
    8000a68e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a692:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a694:	00c59763          	bne	a1,a2,8000a6a2 <tinst_tests+0x2696>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a698:	0026d683          	lhu	a3,2(a3)
    8000a69c:	0106969b          	slliw	a3,a3,0x10
    8000a6a0:	8f55                	or	a4,a4,a3
    8000a6a2:	01f076b7          	lui	a3,0x1f07
    8000a6a6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a6aa:	8f75                	and	a4,a4,a3
    8000a6ac:	00e78463          	beq	a5,a4,8000a6b4 <tinst_tests+0x26a8>
    8000a6b0:	f7dfd06f          	j	8000862c <tinst_tests+0x620>
    8000a6b4:	f8dfd06f          	j	80008640 <tinst_tests+0x634>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a6b8:	701c                	ld	a5,32(s0)
    8000a6ba:	00018597          	auipc	a1,0x18
    8000a6be:	47658593          	addi	a1,a1,1142 # 80022b30 <__func__.2+0x2c8>
    8000a6c2:	e399                	bnez	a5,8000a6c8 <tinst_tests+0x26bc>
    8000a6c4:	aeffe06f          	j	800091b2 <tinst_tests+0x11a6>
    8000a6c8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6ca:	0016f713          	andi	a4,a3,1
    8000a6ce:	c20715e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a6d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6d6:	460d                	li	a2,3
    8000a6d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6de:	00c59763          	bne	a1,a2,8000a6ec <tinst_tests+0x26e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6e2:	0026d683          	lhu	a3,2(a3)
    8000a6e6:	0106969b          	slliw	a3,a3,0x10
    8000a6ea:	8f55                	or	a4,a4,a3
    8000a6ec:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6f0:	068e                	slli	a3,a3,0x3
    8000a6f2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6f4:	8f75                	and	a4,a4,a3
    8000a6f6:	00018597          	auipc	a1,0x18
    8000a6fa:	43a58593          	addi	a1,a1,1082 # 80022b30 <__func__.2+0x2c8>
    8000a6fe:	00e79463          	bne	a5,a4,8000a706 <tinst_tests+0x26fa>
    8000a702:	ab1fe06f          	j	800091b2 <tinst_tests+0x11a6>
    8000a706:	00018597          	auipc	a1,0x18
    8000a70a:	43a58593          	addi	a1,a1,1082 # 80022b40 <__func__.2+0x2d8>
    8000a70e:	aa5fe06f          	j	800091b2 <tinst_tests+0x11a6>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a712:	701c                	ld	a5,32(s0)
    8000a714:	e399                	bnez	a5,8000a71a <tinst_tests+0x270e>
    8000a716:	fddfd06f          	j	800086f2 <tinst_tests+0x6e6>
    8000a71a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a71c:	0016f713          	andi	a4,a3,1
    8000a720:	bc071ce3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a724:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a728:	460d                	li	a2,3
    8000a72a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a72e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a730:	00c59763          	bne	a1,a2,8000a73e <tinst_tests+0x2732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a734:	0026d683          	lhu	a3,2(a3)
    8000a738:	0106969b          	slliw	a3,a3,0x10
    8000a73c:	8f55                	or	a4,a4,a3
    8000a73e:	01f076b7          	lui	a3,0x1f07
    8000a742:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a746:	8f75                	and	a4,a4,a3
    8000a748:	00e78463          	beq	a5,a4,8000a750 <tinst_tests+0x2744>
    8000a74c:	f93fd06f          	j	800086de <tinst_tests+0x6d2>
    8000a750:	fa3fd06f          	j	800086f2 <tinst_tests+0x6e6>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a754:	701c                	ld	a5,32(s0)
    8000a756:	00018597          	auipc	a1,0x18
    8000a75a:	3da58593          	addi	a1,a1,986 # 80022b30 <__func__.2+0x2c8>
    8000a75e:	e399                	bnez	a5,8000a764 <tinst_tests+0x2758>
    8000a760:	b05fe06f          	j	80009264 <tinst_tests+0x1258>
    8000a764:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a766:	0016f713          	andi	a4,a3,1
    8000a76a:	b80717e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a76e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a772:	460d                	li	a2,3
    8000a774:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a778:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a77a:	00c59763          	bne	a1,a2,8000a788 <tinst_tests+0x277c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a77e:	0026d683          	lhu	a3,2(a3)
    8000a782:	0106969b          	slliw	a3,a3,0x10
    8000a786:	8f55                	or	a4,a4,a3
    8000a788:	1ffe16b7          	lui	a3,0x1ffe1
    8000a78c:	068e                	slli	a3,a3,0x3
    8000a78e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a790:	8f75                	and	a4,a4,a3
    8000a792:	00018597          	auipc	a1,0x18
    8000a796:	39e58593          	addi	a1,a1,926 # 80022b30 <__func__.2+0x2c8>
    8000a79a:	00e79463          	bne	a5,a4,8000a7a2 <tinst_tests+0x2796>
    8000a79e:	ac7fe06f          	j	80009264 <tinst_tests+0x1258>
    8000a7a2:	00018597          	auipc	a1,0x18
    8000a7a6:	39e58593          	addi	a1,a1,926 # 80022b40 <__func__.2+0x2d8>
    8000a7aa:	abbfe06f          	j	80009264 <tinst_tests+0x1258>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a7ae:	701c                	ld	a5,32(s0)
    8000a7b0:	e399                	bnez	a5,8000a7b6 <tinst_tests+0x27aa>
    8000a7b2:	ff5fd06f          	j	800087a6 <tinst_tests+0x79a>
    8000a7b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7b8:	0016f713          	andi	a4,a3,1
    8000a7bc:	b2071ee3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a7c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7c4:	460d                	li	a2,3
    8000a7c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7cc:	00c59763          	bne	a1,a2,8000a7da <tinst_tests+0x27ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7d0:	0026d683          	lhu	a3,2(a3)
    8000a7d4:	0106969b          	slliw	a3,a3,0x10
    8000a7d8:	8f55                	or	a4,a4,a3
    8000a7da:	01f076b7          	lui	a3,0x1f07
    8000a7de:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a7e2:	8f75                	and	a4,a4,a3
    8000a7e4:	00e78463          	beq	a5,a4,8000a7ec <tinst_tests+0x27e0>
    8000a7e8:	fabfd06f          	j	80008792 <tinst_tests+0x786>
    8000a7ec:	fbbfd06f          	j	800087a6 <tinst_tests+0x79a>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a7f0:	701c                	ld	a5,32(s0)
    8000a7f2:	00018597          	auipc	a1,0x18
    8000a7f6:	33e58593          	addi	a1,a1,830 # 80022b30 <__func__.2+0x2c8>
    8000a7fa:	e399                	bnez	a5,8000a800 <tinst_tests+0x27f4>
    8000a7fc:	b1bfe06f          	j	80009316 <tinst_tests+0x130a>
    8000a800:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a802:	0016f713          	andi	a4,a3,1
    8000a806:	ae0719e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a80a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a80e:	460d                	li	a2,3
    8000a810:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a814:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a816:	00c59763          	bne	a1,a2,8000a824 <tinst_tests+0x2818>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a81a:	0026d683          	lhu	a3,2(a3)
    8000a81e:	0106969b          	slliw	a3,a3,0x10
    8000a822:	8f55                	or	a4,a4,a3
    8000a824:	1ffe16b7          	lui	a3,0x1ffe1
    8000a828:	068e                	slli	a3,a3,0x3
    8000a82a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a82c:	8f75                	and	a4,a4,a3
    8000a82e:	00018597          	auipc	a1,0x18
    8000a832:	30258593          	addi	a1,a1,770 # 80022b30 <__func__.2+0x2c8>
    8000a836:	00e79463          	bne	a5,a4,8000a83e <tinst_tests+0x2832>
    8000a83a:	addfe06f          	j	80009316 <tinst_tests+0x130a>
    8000a83e:	00018597          	auipc	a1,0x18
    8000a842:	30258593          	addi	a1,a1,770 # 80022b40 <__func__.2+0x2d8>
    8000a846:	ad1fe06f          	j	80009316 <tinst_tests+0x130a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a84a:	7004                	ld	s1,32(s0)
    8000a84c:	e099                	bnez	s1,8000a852 <tinst_tests+0x2846>
    8000a84e:	ffdfd06f          	j	8000884a <tinst_tests+0x83e>
    8000a852:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a854:	0017f713          	andi	a4,a5,1
    8000a858:	aa0710e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a85c:	0007d503          	lhu	a0,0(a5)
    8000a860:	a65f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000a864:	67a1                	lui	a5,0x8
    8000a866:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a868:	8d7d                	and	a0,a0,a5
    8000a86a:	00a48463          	beq	s1,a0,8000a872 <tinst_tests+0x2866>
    8000a86e:	fc9fd06f          	j	80008836 <tinst_tests+0x82a>
    8000a872:	fd9fd06f          	j	8000884a <tinst_tests+0x83e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a876:	701c                	ld	a5,32(s0)
    8000a878:	00018597          	auipc	a1,0x18
    8000a87c:	2b858593          	addi	a1,a1,696 # 80022b30 <__func__.2+0x2c8>
    8000a880:	e399                	bnez	a5,8000a886 <tinst_tests+0x287a>
    8000a882:	b47fe06f          	j	800093c8 <tinst_tests+0x13bc>
    8000a886:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a888:	0016f713          	andi	a4,a3,1
    8000a88c:	a60716e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a890:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a894:	460d                	li	a2,3
    8000a896:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a89a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a89c:	00c59763          	bne	a1,a2,8000a8aa <tinst_tests+0x289e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8a0:	0026d683          	lhu	a3,2(a3)
    8000a8a4:	0106969b          	slliw	a3,a3,0x10
    8000a8a8:	8f55                	or	a4,a4,a3
    8000a8aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8ae:	068e                	slli	a3,a3,0x3
    8000a8b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8b2:	8f75                	and	a4,a4,a3
    8000a8b4:	00018597          	auipc	a1,0x18
    8000a8b8:	27c58593          	addi	a1,a1,636 # 80022b30 <__func__.2+0x2c8>
    8000a8bc:	00e79463          	bne	a5,a4,8000a8c4 <tinst_tests+0x28b8>
    8000a8c0:	b09fe06f          	j	800093c8 <tinst_tests+0x13bc>
    8000a8c4:	00018597          	auipc	a1,0x18
    8000a8c8:	27c58593          	addi	a1,a1,636 # 80022b40 <__func__.2+0x2d8>
    8000a8cc:	afdfe06f          	j	800093c8 <tinst_tests+0x13bc>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a8d0:	02043983          	ld	s3,32(s0)
    8000a8d4:	00099463          	bnez	s3,8000a8dc <tinst_tests+0x28d0>
    8000a8d8:	818fe06f          	j	800088f0 <tinst_tests+0x8e4>
    8000a8dc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a8de:	0017f713          	andi	a4,a5,1
    8000a8e2:	a0071be3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a8e6:	0007d503          	lhu	a0,0(a5)
    8000a8ea:	9dbf60ef          	jal	800012c4 <expand_compressed_instruction>
    8000a8ee:	67a1                	lui	a5,0x8
    8000a8f0:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a8f2:	8d7d                	and	a0,a0,a5
    8000a8f4:	00a98463          	beq	s3,a0,8000a8fc <tinst_tests+0x28f0>
    8000a8f8:	fe5fd06f          	j	800088dc <tinst_tests+0x8d0>
    8000a8fc:	ff5fd06f          	j	800088f0 <tinst_tests+0x8e4>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a900:	701c                	ld	a5,32(s0)
    8000a902:	00018597          	auipc	a1,0x18
    8000a906:	22e58593          	addi	a1,a1,558 # 80022b30 <__func__.2+0x2c8>
    8000a90a:	e399                	bnez	a5,8000a910 <tinst_tests+0x2904>
    8000a90c:	b6ffe06f          	j	8000947a <tinst_tests+0x146e>
    8000a910:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a912:	0016f713          	andi	a4,a3,1
    8000a916:	9e0711e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a91a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a91e:	460d                	li	a2,3
    8000a920:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a924:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a926:	00c59763          	bne	a1,a2,8000a934 <tinst_tests+0x2928>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a92a:	0026d683          	lhu	a3,2(a3)
    8000a92e:	0106969b          	slliw	a3,a3,0x10
    8000a932:	8f55                	or	a4,a4,a3
    8000a934:	1ffe16b7          	lui	a3,0x1ffe1
    8000a938:	068e                	slli	a3,a3,0x3
    8000a93a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a93c:	8f75                	and	a4,a4,a3
    8000a93e:	00018597          	auipc	a1,0x18
    8000a942:	1f258593          	addi	a1,a1,498 # 80022b30 <__func__.2+0x2c8>
    8000a946:	00e79463          	bne	a5,a4,8000a94e <tinst_tests+0x2942>
    8000a94a:	b31fe06f          	j	8000947a <tinst_tests+0x146e>
    8000a94e:	00018597          	auipc	a1,0x18
    8000a952:	1f258593          	addi	a1,a1,498 # 80022b40 <__func__.2+0x2d8>
    8000a956:	b25fe06f          	j	8000947a <tinst_tests+0x146e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a95a:	02043983          	ld	s3,32(s0)
    8000a95e:	00099463          	bnez	s3,8000a966 <tinst_tests+0x295a>
    8000a962:	834fe06f          	j	80008996 <tinst_tests+0x98a>
    8000a966:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a968:	0017f713          	andi	a4,a5,1
    8000a96c:	980716e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a970:	0007d503          	lhu	a0,0(a5)
    8000a974:	951f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000a978:	01f077b7          	lui	a5,0x1f07
    8000a97c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a980:	8d7d                	and	a0,a0,a5
    8000a982:	00a98463          	beq	s3,a0,8000a98a <tinst_tests+0x297e>
    8000a986:	ffdfd06f          	j	80008982 <tinst_tests+0x976>
    8000a98a:	80cfe06f          	j	80008996 <tinst_tests+0x98a>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a98e:	701c                	ld	a5,32(s0)
    8000a990:	00018597          	auipc	a1,0x18
    8000a994:	1a058593          	addi	a1,a1,416 # 80022b30 <__func__.2+0x2c8>
    8000a998:	e399                	bnez	a5,8000a99e <tinst_tests+0x2992>
    8000a99a:	b93fe06f          	j	8000952c <tinst_tests+0x1520>
    8000a99e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9a0:	0016f713          	andi	a4,a3,1
    8000a9a4:	94071ae3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a9a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9ac:	460d                	li	a2,3
    8000a9ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9b4:	00c59763          	bne	a1,a2,8000a9c2 <tinst_tests+0x29b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9b8:	0026d683          	lhu	a3,2(a3)
    8000a9bc:	0106969b          	slliw	a3,a3,0x10
    8000a9c0:	8f55                	or	a4,a4,a3
    8000a9c2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9c6:	068e                	slli	a3,a3,0x3
    8000a9c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9ca:	8f75                	and	a4,a4,a3
    8000a9cc:	00018597          	auipc	a1,0x18
    8000a9d0:	16458593          	addi	a1,a1,356 # 80022b30 <__func__.2+0x2c8>
    8000a9d4:	00e79463          	bne	a5,a4,8000a9dc <tinst_tests+0x29d0>
    8000a9d8:	b55fe06f          	j	8000952c <tinst_tests+0x1520>
    8000a9dc:	00018597          	auipc	a1,0x18
    8000a9e0:	16458593          	addi	a1,a1,356 # 80022b40 <__func__.2+0x2d8>
    8000a9e4:	b49fe06f          	j	8000952c <tinst_tests+0x1520>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a9e8:	7004                	ld	s1,32(s0)
    8000a9ea:	e099                	bnez	s1,8000a9f0 <tinst_tests+0x29e4>
    8000a9ec:	858fe06f          	j	80008a44 <tinst_tests+0xa38>
    8000a9f0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a9f2:	0017f713          	andi	a4,a5,1
    8000a9f6:	900711e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a9fa:	0007d503          	lhu	a0,0(a5)
    8000a9fe:	8c7f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000aa02:	01f077b7          	lui	a5,0x1f07
    8000aa06:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000aa0a:	8d7d                	and	a0,a0,a5
    8000aa0c:	00a48463          	beq	s1,a0,8000aa14 <tinst_tests+0x2a08>
    8000aa10:	820fe06f          	j	80008a30 <tinst_tests+0xa24>
    8000aa14:	830fe06f          	j	80008a44 <tinst_tests+0xa38>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aa18:	701c                	ld	a5,32(s0)
    8000aa1a:	00018597          	auipc	a1,0x18
    8000aa1e:	11658593          	addi	a1,a1,278 # 80022b30 <__func__.2+0x2c8>
    8000aa22:	e399                	bnez	a5,8000aa28 <tinst_tests+0x2a1c>
    8000aa24:	bb3fe06f          	j	800095d6 <tinst_tests+0x15ca>
    8000aa28:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa2a:	0016f713          	andi	a4,a3,1
    8000aa2e:	8c0715e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa32:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa36:	460d                	li	a2,3
    8000aa38:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa3c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa3e:	00c59763          	bne	a1,a2,8000aa4c <tinst_tests+0x2a40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa42:	0026d683          	lhu	a3,2(a3)
    8000aa46:	0106969b          	slliw	a3,a3,0x10
    8000aa4a:	8f55                	or	a4,a4,a3
    8000aa4c:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa50:	068e                	slli	a3,a3,0x3
    8000aa52:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa54:	8f75                	and	a4,a4,a3
    8000aa56:	00018597          	auipc	a1,0x18
    8000aa5a:	0da58593          	addi	a1,a1,218 # 80022b30 <__func__.2+0x2c8>
    8000aa5e:	00e79463          	bne	a5,a4,8000aa66 <tinst_tests+0x2a5a>
    8000aa62:	b75fe06f          	j	800095d6 <tinst_tests+0x15ca>
    8000aa66:	00018597          	auipc	a1,0x18
    8000aa6a:	0da58593          	addi	a1,a1,218 # 80022b40 <__func__.2+0x2d8>
    8000aa6e:	b69fe06f          	j	800095d6 <tinst_tests+0x15ca>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000aa72:	701c                	ld	a5,32(s0)
    8000aa74:	00018597          	auipc	a1,0x18
    8000aa78:	0bc58593          	addi	a1,a1,188 # 80022b30 <__func__.2+0x2c8>
    8000aa7c:	e399                	bnez	a5,8000aa82 <tinst_tests+0x2a76>
    8000aa7e:	c03fe06f          	j	80009680 <tinst_tests+0x1674>
    8000aa82:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa84:	0016f713          	andi	a4,a3,1
    8000aa88:	860718e3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa8c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa90:	460d                	li	a2,3
    8000aa92:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa96:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa98:	00c59763          	bne	a1,a2,8000aaa6 <tinst_tests+0x2a9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa9c:	0026d683          	lhu	a3,2(a3)
    8000aaa0:	0106969b          	slliw	a3,a3,0x10
    8000aaa4:	8f55                	or	a4,a4,a3
    8000aaa6:	1ffe16b7          	lui	a3,0x1ffe1
    8000aaaa:	068e                	slli	a3,a3,0x3
    8000aaac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aaae:	8f75                	and	a4,a4,a3
    8000aab0:	00018597          	auipc	a1,0x18
    8000aab4:	08058593          	addi	a1,a1,128 # 80022b30 <__func__.2+0x2c8>
    8000aab8:	00e79463          	bne	a5,a4,8000aac0 <tinst_tests+0x2ab4>
    8000aabc:	bc5fe06f          	j	80009680 <tinst_tests+0x1674>
    8000aac0:	00018597          	auipc	a1,0x18
    8000aac4:	08058593          	addi	a1,a1,128 # 80022b40 <__func__.2+0x2d8>
    8000aac8:	bb9fe06f          	j	80009680 <tinst_tests+0x1674>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000aacc:	701c                	ld	a5,32(s0)
    8000aace:	00018597          	auipc	a1,0x18
    8000aad2:	06258593          	addi	a1,a1,98 # 80022b30 <__func__.2+0x2c8>
    8000aad6:	e399                	bnez	a5,8000aadc <tinst_tests+0x2ad0>
    8000aad8:	c53fe06f          	j	8000972a <tinst_tests+0x171e>
    8000aadc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aade:	0016f713          	andi	a4,a3,1
    8000aae2:	80071be3          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aae6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aaea:	460d                	li	a2,3
    8000aaec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aaf0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaf2:	00c59763          	bne	a1,a2,8000ab00 <tinst_tests+0x2af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaf6:	0026d683          	lhu	a3,2(a3)
    8000aafa:	0106969b          	slliw	a3,a3,0x10
    8000aafe:	8f55                	or	a4,a4,a3
    8000ab00:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab04:	068e                	slli	a3,a3,0x3
    8000ab06:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab08:	8f75                	and	a4,a4,a3
    8000ab0a:	00018597          	auipc	a1,0x18
    8000ab0e:	02658593          	addi	a1,a1,38 # 80022b30 <__func__.2+0x2c8>
    8000ab12:	00e79463          	bne	a5,a4,8000ab1a <tinst_tests+0x2b0e>
    8000ab16:	c15fe06f          	j	8000972a <tinst_tests+0x171e>
    8000ab1a:	00018597          	auipc	a1,0x18
    8000ab1e:	02658593          	addi	a1,a1,38 # 80022b40 <__func__.2+0x2d8>
    8000ab22:	c09fe06f          	j	8000972a <tinst_tests+0x171e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000ab26:	701c                	ld	a5,32(s0)
    8000ab28:	00018597          	auipc	a1,0x18
    8000ab2c:	00858593          	addi	a1,a1,8 # 80022b30 <__func__.2+0x2c8>
    8000ab30:	e399                	bnez	a5,8000ab36 <tinst_tests+0x2b2a>
    8000ab32:	ca3fe06f          	j	800097d4 <tinst_tests+0x17c8>
    8000ab36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab38:	0016f713          	andi	a4,a3,1
    8000ab3c:	fa071e63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab44:	460d                	li	a2,3
    8000ab46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab4c:	00c59763          	bne	a1,a2,8000ab5a <tinst_tests+0x2b4e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab50:	0026d683          	lhu	a3,2(a3)
    8000ab54:	0106969b          	slliw	a3,a3,0x10
    8000ab58:	8f55                	or	a4,a4,a3
    8000ab5a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab5e:	068e                	slli	a3,a3,0x3
    8000ab60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab62:	8f75                	and	a4,a4,a3
    8000ab64:	00018597          	auipc	a1,0x18
    8000ab68:	fcc58593          	addi	a1,a1,-52 # 80022b30 <__func__.2+0x2c8>
    8000ab6c:	00e79463          	bne	a5,a4,8000ab74 <tinst_tests+0x2b68>
    8000ab70:	c65fe06f          	j	800097d4 <tinst_tests+0x17c8>
    8000ab74:	00018597          	auipc	a1,0x18
    8000ab78:	fcc58593          	addi	a1,a1,-52 # 80022b40 <__func__.2+0x2d8>
    8000ab7c:	c59fe06f          	j	800097d4 <tinst_tests+0x17c8>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ab80:	701c                	ld	a5,32(s0)
    8000ab82:	e399                	bnez	a5,8000ab88 <tinst_tests+0x2b7c>
    8000ab84:	982fe06f          	j	80008d06 <tinst_tests+0xcfa>
    8000ab88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab8a:	0016f713          	andi	a4,a3,1
    8000ab8e:	f6071563          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab96:	460d                	li	a2,3
    8000ab98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab9e:	00c59763          	bne	a1,a2,8000abac <tinst_tests+0x2ba0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aba2:	0026d683          	lhu	a3,2(a3)
    8000aba6:	0106969b          	slliw	a3,a3,0x10
    8000abaa:	8f55                	or	a4,a4,a3
    8000abac:	1ffe16b7          	lui	a3,0x1ffe1
    8000abb0:	068e                	slli	a3,a3,0x3
    8000abb2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abb4:	8f75                	and	a4,a4,a3
    8000abb6:	00e78463          	beq	a5,a4,8000abbe <tinst_tests+0x2bb2>
    8000abba:	938fe06f          	j	80008cf2 <tinst_tests+0xce6>
    8000abbe:	948fe06f          	j	80008d06 <tinst_tests+0xcfa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000abc2:	701c                	ld	a5,32(s0)
    8000abc4:	e399                	bnez	a5,8000abca <tinst_tests+0x2bbe>
    8000abc6:	9f2fe06f          	j	80008db8 <tinst_tests+0xdac>
    8000abca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abcc:	0016f713          	andi	a4,a3,1
    8000abd0:	f2071463          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000abd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abd8:	460d                	li	a2,3
    8000abda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abe0:	00c59763          	bne	a1,a2,8000abee <tinst_tests+0x2be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abe4:	0026d683          	lhu	a3,2(a3)
    8000abe8:	0106969b          	slliw	a3,a3,0x10
    8000abec:	8f55                	or	a4,a4,a3
    8000abee:	1ffe16b7          	lui	a3,0x1ffe1
    8000abf2:	068e                	slli	a3,a3,0x3
    8000abf4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abf6:	8f75                	and	a4,a4,a3
    8000abf8:	00e78463          	beq	a5,a4,8000ac00 <tinst_tests+0x2bf4>
    8000abfc:	9a8fe06f          	j	80008da4 <tinst_tests+0xd98>
    8000ac00:	9b8fe06f          	j	80008db8 <tinst_tests+0xdac>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ac04:	701c                	ld	a5,32(s0)
    8000ac06:	e399                	bnez	a5,8000ac0c <tinst_tests+0x2c00>
    8000ac08:	a62fe06f          	j	80008e6a <tinst_tests+0xe5e>
    8000ac0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac0e:	0016f713          	andi	a4,a3,1
    8000ac12:	ee071363          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac1a:	460d                	li	a2,3
    8000ac1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac22:	00c59763          	bne	a1,a2,8000ac30 <tinst_tests+0x2c24>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac26:	0026d683          	lhu	a3,2(a3)
    8000ac2a:	0106969b          	slliw	a3,a3,0x10
    8000ac2e:	8f55                	or	a4,a4,a3
    8000ac30:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac34:	068e                	slli	a3,a3,0x3
    8000ac36:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac38:	8f75                	and	a4,a4,a3
    8000ac3a:	00e78463          	beq	a5,a4,8000ac42 <tinst_tests+0x2c36>
    8000ac3e:	a18fe06f          	j	80008e56 <tinst_tests+0xe4a>
    8000ac42:	a28fe06f          	j	80008e6a <tinst_tests+0xe5e>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000ac46:	701c                	ld	a5,32(s0)
    8000ac48:	e399                	bnez	a5,8000ac4e <tinst_tests+0x2c42>
    8000ac4a:	ad2fe06f          	j	80008f1c <tinst_tests+0xf10>
    8000ac4e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac50:	0016f713          	andi	a4,a3,1
    8000ac54:	ea071263          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac58:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac5c:	460d                	li	a2,3
    8000ac5e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac62:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac64:	00c59763          	bne	a1,a2,8000ac72 <tinst_tests+0x2c66>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac68:	0026d683          	lhu	a3,2(a3)
    8000ac6c:	0106969b          	slliw	a3,a3,0x10
    8000ac70:	8f55                	or	a4,a4,a3
    8000ac72:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac76:	068e                	slli	a3,a3,0x3
    8000ac78:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac7a:	8f75                	and	a4,a4,a3
    8000ac7c:	00e78463          	beq	a5,a4,8000ac84 <tinst_tests+0x2c78>
    8000ac80:	a88fe06f          	j	80008f08 <tinst_tests+0xefc>
    8000ac84:	a98fe06f          	j	80008f1c <tinst_tests+0xf10>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000ac88:	701c                	ld	a5,32(s0)
    8000ac8a:	e399                	bnez	a5,8000ac90 <tinst_tests+0x2c84>
    8000ac8c:	b42fe06f          	j	80008fce <tinst_tests+0xfc2>
    8000ac90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac92:	0016f713          	andi	a4,a3,1
    8000ac96:	e6071163          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac9e:	460d                	li	a2,3
    8000aca0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aca4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aca6:	00c59763          	bne	a1,a2,8000acb4 <tinst_tests+0x2ca8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acaa:	0026d683          	lhu	a3,2(a3)
    8000acae:	0106969b          	slliw	a3,a3,0x10
    8000acb2:	8f55                	or	a4,a4,a3
    8000acb4:	1ffe16b7          	lui	a3,0x1ffe1
    8000acb8:	068e                	slli	a3,a3,0x3
    8000acba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acbc:	8f75                	and	a4,a4,a3
    8000acbe:	00e78463          	beq	a5,a4,8000acc6 <tinst_tests+0x2cba>
    8000acc2:	af8fe06f          	j	80008fba <tinst_tests+0xfae>
    8000acc6:	b08fe06f          	j	80008fce <tinst_tests+0xfc2>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000acca:	701c                	ld	a5,32(s0)
    8000accc:	e399                	bnez	a5,8000acd2 <tinst_tests+0x2cc6>
    8000acce:	bb2fe06f          	j	80009080 <tinst_tests+0x1074>
    8000acd2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acd4:	0016f713          	andi	a4,a3,1
    8000acd8:	e2071063          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000acdc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ace0:	460d                	li	a2,3
    8000ace2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ace6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ace8:	00c59763          	bne	a1,a2,8000acf6 <tinst_tests+0x2cea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acec:	0026d683          	lhu	a3,2(a3)
    8000acf0:	0106969b          	slliw	a3,a3,0x10
    8000acf4:	8f55                	or	a4,a4,a3
    8000acf6:	1ffe16b7          	lui	a3,0x1ffe1
    8000acfa:	068e                	slli	a3,a3,0x3
    8000acfc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acfe:	8f75                	and	a4,a4,a3
    8000ad00:	00e78463          	beq	a5,a4,8000ad08 <tinst_tests+0x2cfc>
    8000ad04:	b68fe06f          	j	8000906c <tinst_tests+0x1060>
    8000ad08:	b78fe06f          	j	80009080 <tinst_tests+0x1074>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000ad0c:	701c                	ld	a5,32(s0)
    8000ad0e:	e399                	bnez	a5,8000ad14 <tinst_tests+0x2d08>
    8000ad10:	c22fe06f          	j	80009132 <tinst_tests+0x1126>
    8000ad14:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad16:	0016f713          	andi	a4,a3,1
    8000ad1a:	dc071f63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad1e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad22:	460d                	li	a2,3
    8000ad24:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad28:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad2a:	00c59763          	bne	a1,a2,8000ad38 <tinst_tests+0x2d2c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad2e:	0026d683          	lhu	a3,2(a3)
    8000ad32:	0106969b          	slliw	a3,a3,0x10
    8000ad36:	8f55                	or	a4,a4,a3
    8000ad38:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad3c:	068e                	slli	a3,a3,0x3
    8000ad3e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad40:	8f75                	and	a4,a4,a3
    8000ad42:	00e78463          	beq	a5,a4,8000ad4a <tinst_tests+0x2d3e>
    8000ad46:	bd8fe06f          	j	8000911e <tinst_tests+0x1112>
    8000ad4a:	be8fe06f          	j	80009132 <tinst_tests+0x1126>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000ad4e:	701c                	ld	a5,32(s0)
    8000ad50:	e399                	bnez	a5,8000ad56 <tinst_tests+0x2d4a>
    8000ad52:	c96fe06f          	j	800091e8 <tinst_tests+0x11dc>
    8000ad56:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad58:	0016f713          	andi	a4,a3,1
    8000ad5c:	d8071e63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad60:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad64:	460d                	li	a2,3
    8000ad66:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad6a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad6c:	00c59763          	bne	a1,a2,8000ad7a <tinst_tests+0x2d6e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad70:	0026d683          	lhu	a3,2(a3)
    8000ad74:	0106969b          	slliw	a3,a3,0x10
    8000ad78:	8f55                	or	a4,a4,a3
    8000ad7a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad7e:	068e                	slli	a3,a3,0x3
    8000ad80:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad82:	8f75                	and	a4,a4,a3
    8000ad84:	00e78463          	beq	a5,a4,8000ad8c <tinst_tests+0x2d80>
    8000ad88:	c4cfe06f          	j	800091d4 <tinst_tests+0x11c8>
    8000ad8c:	c5cfe06f          	j	800091e8 <tinst_tests+0x11dc>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000ad90:	701c                	ld	a5,32(s0)
    8000ad92:	e399                	bnez	a5,8000ad98 <tinst_tests+0x2d8c>
    8000ad94:	d06fe06f          	j	8000929a <tinst_tests+0x128e>
    8000ad98:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad9a:	0016f713          	andi	a4,a3,1
    8000ad9e:	d4071d63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ada2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ada6:	460d                	li	a2,3
    8000ada8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adae:	00c59763          	bne	a1,a2,8000adbc <tinst_tests+0x2db0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adb2:	0026d683          	lhu	a3,2(a3)
    8000adb6:	0106969b          	slliw	a3,a3,0x10
    8000adba:	8f55                	or	a4,a4,a3
    8000adbc:	1ffe16b7          	lui	a3,0x1ffe1
    8000adc0:	068e                	slli	a3,a3,0x3
    8000adc2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adc4:	8f75                	and	a4,a4,a3
    8000adc6:	00e78463          	beq	a5,a4,8000adce <tinst_tests+0x2dc2>
    8000adca:	cbcfe06f          	j	80009286 <tinst_tests+0x127a>
    8000adce:	cccfe06f          	j	8000929a <tinst_tests+0x128e>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000add2:	701c                	ld	a5,32(s0)
    8000add4:	e399                	bnez	a5,8000adda <tinst_tests+0x2dce>
    8000add6:	d76fe06f          	j	8000934c <tinst_tests+0x1340>
    8000adda:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000addc:	0016f713          	andi	a4,a3,1
    8000ade0:	d0071c63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ade4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ade8:	460d                	li	a2,3
    8000adea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adf0:	00c59763          	bne	a1,a2,8000adfe <tinst_tests+0x2df2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adf4:	0026d683          	lhu	a3,2(a3)
    8000adf8:	0106969b          	slliw	a3,a3,0x10
    8000adfc:	8f55                	or	a4,a4,a3
    8000adfe:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae02:	068e                	slli	a3,a3,0x3
    8000ae04:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae06:	8f75                	and	a4,a4,a3
    8000ae08:	00e78463          	beq	a5,a4,8000ae10 <tinst_tests+0x2e04>
    8000ae0c:	d2cfe06f          	j	80009338 <tinst_tests+0x132c>
    8000ae10:	d3cfe06f          	j	8000934c <tinst_tests+0x1340>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000ae14:	701c                	ld	a5,32(s0)
    8000ae16:	e399                	bnez	a5,8000ae1c <tinst_tests+0x2e10>
    8000ae18:	de6fe06f          	j	800093fe <tinst_tests+0x13f2>
    8000ae1c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae1e:	0016f713          	andi	a4,a3,1
    8000ae22:	cc071b63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae26:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae2a:	460d                	li	a2,3
    8000ae2c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae30:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae32:	00c59763          	bne	a1,a2,8000ae40 <tinst_tests+0x2e34>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae36:	0026d683          	lhu	a3,2(a3)
    8000ae3a:	0106969b          	slliw	a3,a3,0x10
    8000ae3e:	8f55                	or	a4,a4,a3
    8000ae40:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae44:	068e                	slli	a3,a3,0x3
    8000ae46:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae48:	8f75                	and	a4,a4,a3
    8000ae4a:	00e78463          	beq	a5,a4,8000ae52 <tinst_tests+0x2e46>
    8000ae4e:	d9cfe06f          	j	800093ea <tinst_tests+0x13de>
    8000ae52:	dacfe06f          	j	800093fe <tinst_tests+0x13f2>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000ae56:	6418                	ld	a4,8(s0)
    8000ae58:	47bd                	li	a5,15
    8000ae5a:	00f70463          	beq	a4,a5,8000ae62 <tinst_tests+0x2e56>
    8000ae5e:	f1cfe06f          	j	8000957a <tinst_tests+0x156e>
    8000ae62:	701c                	ld	a5,32(s0)
    8000ae64:	e399                	bnez	a5,8000ae6a <tinst_tests+0x2e5e>
    8000ae66:	f16fe06f          	j	8000957c <tinst_tests+0x1570>
    8000ae6a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae6c:	0016f713          	andi	a4,a3,1
    8000ae70:	c8071463          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae74:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae78:	460d                	li	a2,3
    8000ae7a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae7e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae80:	00c59763          	bne	a1,a2,8000ae8e <tinst_tests+0x2e82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae84:	0026d683          	lhu	a3,2(a3)
    8000ae88:	0106969b          	slliw	a3,a3,0x10
    8000ae8c:	8f55                	or	a4,a4,a3
    8000ae8e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae92:	068e                	slli	a3,a3,0x3
    8000ae94:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae96:	8f75                	and	a4,a4,a3
    8000ae98:	40f70933          	sub	s2,a4,a5
    8000ae9c:	00193913          	seqz	s2,s2
    8000aea0:	edcfe06f          	j	8000957c <tinst_tests+0x1570>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aea4:	6418                	ld	a4,8(s0)
    8000aea6:	47bd                	li	a5,15
    8000aea8:	00f70463          	beq	a4,a5,8000aeb0 <tinst_tests+0x2ea4>
    8000aeac:	f78fe06f          	j	80009624 <tinst_tests+0x1618>
    8000aeb0:	701c                	ld	a5,32(s0)
    8000aeb2:	e399                	bnez	a5,8000aeb8 <tinst_tests+0x2eac>
    8000aeb4:	f72fe06f          	j	80009626 <tinst_tests+0x161a>
    8000aeb8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aeba:	0016f713          	andi	a4,a3,1
    8000aebe:	c2071d63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aec2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aec6:	460d                	li	a2,3
    8000aec8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aecc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aece:	00c59763          	bne	a1,a2,8000aedc <tinst_tests+0x2ed0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aed2:	0026d683          	lhu	a3,2(a3)
    8000aed6:	0106969b          	slliw	a3,a3,0x10
    8000aeda:	8f55                	or	a4,a4,a3
    8000aedc:	1ffe16b7          	lui	a3,0x1ffe1
    8000aee0:	068e                	slli	a3,a3,0x3
    8000aee2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aee4:	8f75                	and	a4,a4,a3
    8000aee6:	40f70933          	sub	s2,a4,a5
    8000aeea:	00193913          	seqz	s2,s2
    8000aeee:	f38fe06f          	j	80009626 <tinst_tests+0x161a>
    instruction = *((uint16_t*)addr);
    8000aef2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aef6:	460d                	li	a2,3
    8000aef8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aefc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aefe:	00c59763          	bne	a1,a2,8000af0c <tinst_tests+0x2f00>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af02:	0026d683          	lhu	a3,2(a3)
    8000af06:	0106969b          	slliw	a3,a3,0x10
    8000af0a:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000af0c:	1746                	slli	a4,a4,0x31
    8000af0e:	9345                	srli	a4,a4,0x31
    8000af10:	00e78463          	beq	a5,a4,8000af18 <tinst_tests+0x2f0c>
    8000af14:	b04fd06f          	j	80008218 <tinst_tests+0x20c>
    8000af18:	b14fd06f          	j	8000822c <tinst_tests+0x220>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000af1c:	6418                	ld	a4,8(s0)
    8000af1e:	47bd                	li	a5,15
    8000af20:	00f70463          	beq	a4,a5,8000af28 <tinst_tests+0x2f1c>
    8000af24:	faafe06f          	j	800096ce <tinst_tests+0x16c2>
    8000af28:	701c                	ld	a5,32(s0)
    8000af2a:	e399                	bnez	a5,8000af30 <tinst_tests+0x2f24>
    8000af2c:	fa4fe06f          	j	800096d0 <tinst_tests+0x16c4>
    8000af30:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af32:	0016f713          	andi	a4,a3,1
    8000af36:	bc071163          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af3a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af3e:	460d                	li	a2,3
    8000af40:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af44:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af46:	00c59763          	bne	a1,a2,8000af54 <tinst_tests+0x2f48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af4a:	0026d683          	lhu	a3,2(a3)
    8000af4e:	0106969b          	slliw	a3,a3,0x10
    8000af52:	8f55                	or	a4,a4,a3
    8000af54:	1ffe16b7          	lui	a3,0x1ffe1
    8000af58:	068e                	slli	a3,a3,0x3
    8000af5a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af5c:	8f75                	and	a4,a4,a3
    8000af5e:	40f70933          	sub	s2,a4,a5
    8000af62:	00193913          	seqz	s2,s2
    8000af66:	f6afe06f          	j	800096d0 <tinst_tests+0x16c4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000af6a:	6418                	ld	a4,8(s0)
    8000af6c:	47bd                	li	a5,15
    8000af6e:	00f70463          	beq	a4,a5,8000af76 <tinst_tests+0x2f6a>
    8000af72:	807fe06f          	j	80009778 <tinst_tests+0x176c>
    8000af76:	701c                	ld	a5,32(s0)
    8000af78:	e399                	bnez	a5,8000af7e <tinst_tests+0x2f72>
    8000af7a:	801fe06f          	j	8000977a <tinst_tests+0x176e>
    8000af7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af80:	0016f713          	andi	a4,a3,1
    8000af84:	b6071a63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af8c:	460d                	li	a2,3
    8000af8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af94:	00c59763          	bne	a1,a2,8000afa2 <tinst_tests+0x2f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af98:	0026d683          	lhu	a3,2(a3)
    8000af9c:	0106969b          	slliw	a3,a3,0x10
    8000afa0:	8f55                	or	a4,a4,a3
    8000afa2:	1ffe16b7          	lui	a3,0x1ffe1
    8000afa6:	068e                	slli	a3,a3,0x3
    8000afa8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afaa:	8f75                	and	a4,a4,a3
    8000afac:	40f70933          	sub	s2,a4,a5
    8000afb0:	00193913          	seqz	s2,s2
    8000afb4:	fc6fe06f          	j	8000977a <tinst_tests+0x176e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000afb8:	02043983          	ld	s3,32(s0)
    8000afbc:	00099463          	bnez	s3,8000afc4 <tinst_tests+0x2fb8>
    8000afc0:	9f9fd06f          	j	800089b8 <tinst_tests+0x9ac>
    8000afc4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000afc6:	0017f713          	andi	a4,a5,1
    8000afca:	b2071763          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000afce:	0007d503          	lhu	a0,0(a5)
    8000afd2:	af2f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000afd6:	01f077b7          	lui	a5,0x1f07
    8000afda:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000afde:	00f57933          	and	s2,a0,a5
    8000afe2:	41390933          	sub	s2,s2,s3
    8000afe6:	00193913          	seqz	s2,s2
    8000afea:	9cffd06f          	j	800089b8 <tinst_tests+0x9ac>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000afee:	7004                	ld	s1,32(s0)
    8000aff0:	e099                	bnez	s1,8000aff6 <tinst_tests+0x2fea>
    8000aff2:	a75fd06f          	j	80008a66 <tinst_tests+0xa5a>
    8000aff6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aff8:	0017f713          	andi	a4,a5,1
    8000affc:	ae071e63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b000:	0007d503          	lhu	a0,0(a5)
    8000b004:	ac0f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000b008:	01f077b7          	lui	a5,0x1f07
    8000b00c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b010:	00f57933          	and	s2,a0,a5
    8000b014:	40990933          	sub	s2,s2,s1
    8000b018:	00193913          	seqz	s2,s2
    8000b01c:	a4bfd06f          	j	80008a66 <tinst_tests+0xa5a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000b020:	701c                	ld	a5,32(s0)
    8000b022:	e399                	bnez	a5,8000b028 <tinst_tests+0x301c>
    8000b024:	af9fd06f          	j	80008b1c <tinst_tests+0xb10>
    8000b028:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b02a:	0016f713          	andi	a4,a3,1
    8000b02e:	ac071563          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b032:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b036:	460d                	li	a2,3
    8000b038:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b03c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b03e:	00c59763          	bne	a1,a2,8000b04c <tinst_tests+0x3040>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b042:	0026d683          	lhu	a3,2(a3)
    8000b046:	0106969b          	slliw	a3,a3,0x10
    8000b04a:	8f55                	or	a4,a4,a3
    8000b04c:	1ffe16b7          	lui	a3,0x1ffe1
    8000b050:	068e                	slli	a3,a3,0x3
    8000b052:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b054:	8f75                	and	a4,a4,a3
    8000b056:	40f70933          	sub	s2,a4,a5
    8000b05a:	00193913          	seqz	s2,s2
    8000b05e:	abffd06f          	j	80008b1c <tinst_tests+0xb10>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000b062:	701c                	ld	a5,32(s0)
    8000b064:	e399                	bnez	a5,8000b06a <tinst_tests+0x305e>
    8000b066:	b6bfd06f          	j	80008bd0 <tinst_tests+0xbc4>
    8000b06a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b06c:	0016f713          	andi	a4,a3,1
    8000b070:	a8071463          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b074:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b078:	460d                	li	a2,3
    8000b07a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b07e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b080:	00c59763          	bne	a1,a2,8000b08e <tinst_tests+0x3082>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b084:	0026d683          	lhu	a3,2(a3)
    8000b088:	0106969b          	slliw	a3,a3,0x10
    8000b08c:	8f55                	or	a4,a4,a3
    8000b08e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b092:	068e                	slli	a3,a3,0x3
    8000b094:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b096:	8f75                	and	a4,a4,a3
    8000b098:	40f70933          	sub	s2,a4,a5
    8000b09c:	00193913          	seqz	s2,s2
    8000b0a0:	b31fd06f          	j	80008bd0 <tinst_tests+0xbc4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000b0a4:	701c                	ld	a5,32(s0)
    8000b0a6:	e399                	bnez	a5,8000b0ac <tinst_tests+0x30a0>
    8000b0a8:	bdbfd06f          	j	80008c82 <tinst_tests+0xc76>
    8000b0ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0ae:	0016f713          	andi	a4,a3,1
    8000b0b2:	a4071363          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b0b6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0ba:	460d                	li	a2,3
    8000b0bc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0c0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0c2:	00c59763          	bne	a1,a2,8000b0d0 <tinst_tests+0x30c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0c6:	0026d683          	lhu	a3,2(a3)
    8000b0ca:	0106969b          	slliw	a3,a3,0x10
    8000b0ce:	8f55                	or	a4,a4,a3
    8000b0d0:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0d4:	068e                	slli	a3,a3,0x3
    8000b0d6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0d8:	8f75                	and	a4,a4,a3
    8000b0da:	40f70933          	sub	s2,a4,a5
    8000b0de:	00193913          	seqz	s2,s2
    8000b0e2:	ba1fd06f          	j	80008c82 <tinst_tests+0xc76>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000b0e6:	701c                	ld	a5,32(s0)
    8000b0e8:	e399                	bnez	a5,8000b0ee <tinst_tests+0x30e2>
    8000b0ea:	c3ffd06f          	j	80008d28 <tinst_tests+0xd1c>
    8000b0ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0f0:	0016f713          	andi	a4,a3,1
    8000b0f4:	a0071263          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b0f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0fc:	460d                	li	a2,3
    8000b0fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b102:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b104:	00c59763          	bne	a1,a2,8000b112 <tinst_tests+0x3106>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b108:	0026d683          	lhu	a3,2(a3)
    8000b10c:	0106969b          	slliw	a3,a3,0x10
    8000b110:	8f55                	or	a4,a4,a3
    8000b112:	1ffe16b7          	lui	a3,0x1ffe1
    8000b116:	068e                	slli	a3,a3,0x3
    8000b118:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b11a:	8f75                	and	a4,a4,a3
    8000b11c:	40f70933          	sub	s2,a4,a5
    8000b120:	00193913          	seqz	s2,s2
    8000b124:	c05fd06f          	j	80008d28 <tinst_tests+0xd1c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b128:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b12a:	0017f713          	andi	a4,a5,1
    8000b12e:	9c071563          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b132:	0007d503          	lhu	a0,0(a5)
    8000b136:	98ef60ef          	jal	800012c4 <expand_compressed_instruction>
    8000b13a:	67a1                	lui	a5,0x8
    8000b13c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b13e:	8d7d                	and	a0,a0,a5
    8000b140:	00a48463          	beq	s1,a0,8000b148 <tinst_tests+0x313c>
    8000b144:	ec8fd06f          	j	8000880c <tinst_tests+0x800>
    8000b148:	00018597          	auipc	a1,0x18
    8000b14c:	9e858593          	addi	a1,a1,-1560 # 80022b30 <__func__.2+0x2c8>
    8000b150:	ec4fd06f          	j	80008814 <tinst_tests+0x808>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000b154:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b156:	0017f713          	andi	a4,a5,1
    8000b15a:	98071f63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b15e:	0007d503          	lhu	a0,0(a5)
    8000b162:	962f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000b166:	67a1                	lui	a5,0x8
    8000b168:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b16a:	8d7d                	and	a0,a0,a5
    8000b16c:	00a98463          	beq	s3,a0,8000b174 <tinst_tests+0x3168>
    8000b170:	f42fd06f          	j	800088b2 <tinst_tests+0x8a6>
    8000b174:	00018597          	auipc	a1,0x18
    8000b178:	9bc58593          	addi	a1,a1,-1604 # 80022b30 <__func__.2+0x2c8>
    8000b17c:	f3efd06f          	j	800088ba <tinst_tests+0x8ae>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000b180:	701c                	ld	a5,32(s0)
    8000b182:	e399                	bnez	a5,8000b188 <tinst_tests+0x317c>
    8000b184:	c57fd06f          	j	80008dda <tinst_tests+0xdce>
    8000b188:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b18a:	0016f713          	andi	a4,a3,1
    8000b18e:	96071563          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b192:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b196:	460d                	li	a2,3
    8000b198:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b19c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b19e:	00c59763          	bne	a1,a2,8000b1ac <tinst_tests+0x31a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1a2:	0026d683          	lhu	a3,2(a3)
    8000b1a6:	0106969b          	slliw	a3,a3,0x10
    8000b1aa:	8f55                	or	a4,a4,a3
    8000b1ac:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1b0:	068e                	slli	a3,a3,0x3
    8000b1b2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1b4:	8f75                	and	a4,a4,a3
    8000b1b6:	40f70933          	sub	s2,a4,a5
    8000b1ba:	00193913          	seqz	s2,s2
    8000b1be:	c1dfd06f          	j	80008dda <tinst_tests+0xdce>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b1c2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b1c4:	0017f713          	andi	a4,a5,1
    8000b1c8:	92071863          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b1cc:	0007d503          	lhu	a0,0(a5)
    8000b1d0:	8f4f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000b1d4:	01f077b7          	lui	a5,0x1f07
    8000b1d8:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b1dc:	8d7d                	and	a0,a0,a5
    8000b1de:	00a98463          	beq	s3,a0,8000b1e6 <tinst_tests+0x31da>
    8000b1e2:	f76fd06f          	j	80008958 <tinst_tests+0x94c>
    8000b1e6:	00018597          	auipc	a1,0x18
    8000b1ea:	94a58593          	addi	a1,a1,-1718 # 80022b30 <__func__.2+0x2c8>
    8000b1ee:	f72fd06f          	j	80008960 <tinst_tests+0x954>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000b1f2:	701c                	ld	a5,32(s0)
    8000b1f4:	e399                	bnez	a5,8000b1fa <tinst_tests+0x31ee>
    8000b1f6:	c97fd06f          	j	80008e8c <tinst_tests+0xe80>
    8000b1fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1fc:	0016f713          	andi	a4,a3,1
    8000b200:	8e071c63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b204:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b208:	460d                	li	a2,3
    8000b20a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b20e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b210:	00c59763          	bne	a1,a2,8000b21e <tinst_tests+0x3212>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b214:	0026d683          	lhu	a3,2(a3)
    8000b218:	0106969b          	slliw	a3,a3,0x10
    8000b21c:	8f55                	or	a4,a4,a3
    8000b21e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b222:	068e                	slli	a3,a3,0x3
    8000b224:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b226:	8f75                	and	a4,a4,a3
    8000b228:	40f70933          	sub	s2,a4,a5
    8000b22c:	00193913          	seqz	s2,s2
    8000b230:	c5dfd06f          	j	80008e8c <tinst_tests+0xe80>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000b234:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b236:	0017f713          	andi	a4,a5,1
    8000b23a:	8a071f63          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b23e:	0007d503          	lhu	a0,0(a5)
    8000b242:	882f60ef          	jal	800012c4 <expand_compressed_instruction>
    8000b246:	01f077b7          	lui	a5,0x1f07
    8000b24a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b24e:	8d7d                	and	a0,a0,a5
    8000b250:	00a48463          	beq	s1,a0,8000b258 <tinst_tests+0x324c>
    8000b254:	fb2fd06f          	j	80008a06 <tinst_tests+0x9fa>
    8000b258:	00018597          	auipc	a1,0x18
    8000b25c:	8d858593          	addi	a1,a1,-1832 # 80022b30 <__func__.2+0x2c8>
    8000b260:	faefd06f          	j	80008a0e <tinst_tests+0xa02>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000b264:	701c                	ld	a5,32(s0)
    8000b266:	e399                	bnez	a5,8000b26c <tinst_tests+0x3260>
    8000b268:	cd7fd06f          	j	80008f3e <tinst_tests+0xf32>
    8000b26c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b26e:	0016f713          	andi	a4,a3,1
    8000b272:	88071363          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b276:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b27a:	460d                	li	a2,3
    8000b27c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b280:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b282:	00c59763          	bne	a1,a2,8000b290 <tinst_tests+0x3284>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b286:	0026d683          	lhu	a3,2(a3)
    8000b28a:	0106969b          	slliw	a3,a3,0x10
    8000b28e:	8f55                	or	a4,a4,a3
    8000b290:	1ffe16b7          	lui	a3,0x1ffe1
    8000b294:	068e                	slli	a3,a3,0x3
    8000b296:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b298:	8f75                	and	a4,a4,a3
    8000b29a:	40f70933          	sub	s2,a4,a5
    8000b29e:	00193913          	seqz	s2,s2
    8000b2a2:	c9dfd06f          	j	80008f3e <tinst_tests+0xf32>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000b2a6:	701c                	ld	a5,32(s0)
    8000b2a8:	e399                	bnez	a5,8000b2ae <tinst_tests+0x32a2>
    8000b2aa:	d47fd06f          	j	80008ff0 <tinst_tests+0xfe4>
    8000b2ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2b0:	0016f713          	andi	a4,a3,1
    8000b2b4:	84071263          	bnez	a4,8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b2bc:	460d                	li	a2,3
    8000b2be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b2c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b2c4:	00c59763          	bne	a1,a2,8000b2d2 <tinst_tests+0x32c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b2c8:	0026d683          	lhu	a3,2(a3)
    8000b2cc:	0106969b          	slliw	a3,a3,0x10
    8000b2d0:	8f55                	or	a4,a4,a3
    8000b2d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b2d6:	068e                	slli	a3,a3,0x3
    8000b2d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b2da:	8f75                	and	a4,a4,a3
    8000b2dc:	40f70933          	sub	s2,a4,a5
    8000b2e0:	00193913          	seqz	s2,s2
    8000b2e4:	d0dfd06f          	j	80008ff0 <tinst_tests+0xfe4>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000b2e8:	701c                	ld	a5,32(s0)
    8000b2ea:	e399                	bnez	a5,8000b2f0 <tinst_tests+0x32e4>
    8000b2ec:	db7fd06f          	j	800090a2 <tinst_tests+0x1096>
    8000b2f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2f2:	0016f713          	andi	a4,a3,1
    8000b2f6:	c319                	beqz	a4,8000b2fc <tinst_tests+0x32f0>
    8000b2f8:	800ff06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b300:	460d                	li	a2,3
    8000b302:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b306:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b308:	00c59763          	bne	a1,a2,8000b316 <tinst_tests+0x330a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b30c:	0026d683          	lhu	a3,2(a3)
    8000b310:	0106969b          	slliw	a3,a3,0x10
    8000b314:	8f55                	or	a4,a4,a3
    8000b316:	1ffe16b7          	lui	a3,0x1ffe1
    8000b31a:	068e                	slli	a3,a3,0x3
    8000b31c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b31e:	8f75                	and	a4,a4,a3
    8000b320:	40f70933          	sub	s2,a4,a5
    8000b324:	00193913          	seqz	s2,s2
    8000b328:	d7bfd06f          	j	800090a2 <tinst_tests+0x1096>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000b32c:	701c                	ld	a5,32(s0)
    8000b32e:	e399                	bnez	a5,8000b334 <tinst_tests+0x3328>
    8000b330:	e25fd06f          	j	80009154 <tinst_tests+0x1148>
    8000b334:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b336:	0016f713          	andi	a4,a3,1
    8000b33a:	c319                	beqz	a4,8000b340 <tinst_tests+0x3334>
    8000b33c:	fbdfe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b340:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b344:	460d                	li	a2,3
    8000b346:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b34a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b34c:	00c59763          	bne	a1,a2,8000b35a <tinst_tests+0x334e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b350:	0026d683          	lhu	a3,2(a3)
    8000b354:	0106969b          	slliw	a3,a3,0x10
    8000b358:	8f55                	or	a4,a4,a3
    8000b35a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b35e:	068e                	slli	a3,a3,0x3
    8000b360:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b362:	8f75                	and	a4,a4,a3
    8000b364:	40f70933          	sub	s2,a4,a5
    8000b368:	00193913          	seqz	s2,s2
    8000b36c:	de9fd06f          	j	80009154 <tinst_tests+0x1148>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000b370:	701c                	ld	a5,32(s0)
    8000b372:	e399                	bnez	a5,8000b378 <tinst_tests+0x336c>
    8000b374:	e97fd06f          	j	8000920a <tinst_tests+0x11fe>
    8000b378:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b37a:	0016f713          	andi	a4,a3,1
    8000b37e:	c319                	beqz	a4,8000b384 <tinst_tests+0x3378>
    8000b380:	f79fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b384:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b388:	460d                	li	a2,3
    8000b38a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b38e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b390:	00c59763          	bne	a1,a2,8000b39e <tinst_tests+0x3392>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b394:	0026d683          	lhu	a3,2(a3)
    8000b398:	0106969b          	slliw	a3,a3,0x10
    8000b39c:	8f55                	or	a4,a4,a3
    8000b39e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b3a2:	068e                	slli	a3,a3,0x3
    8000b3a4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b3a6:	8f75                	and	a4,a4,a3
    8000b3a8:	40f70933          	sub	s2,a4,a5
    8000b3ac:	00193913          	seqz	s2,s2
    8000b3b0:	e5bfd06f          	j	8000920a <tinst_tests+0x11fe>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b3b4:	701c                	ld	a5,32(s0)
    8000b3b6:	e399                	bnez	a5,8000b3bc <tinst_tests+0x33b0>
    8000b3b8:	f05fd06f          	j	800092bc <tinst_tests+0x12b0>
    8000b3bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b3be:	0016f713          	andi	a4,a3,1
    8000b3c2:	c319                	beqz	a4,8000b3c8 <tinst_tests+0x33bc>
    8000b3c4:	f35fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b3c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b3cc:	460d                	li	a2,3
    8000b3ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b3d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b3d4:	00c59763          	bne	a1,a2,8000b3e2 <tinst_tests+0x33d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b3d8:	0026d683          	lhu	a3,2(a3)
    8000b3dc:	0106969b          	slliw	a3,a3,0x10
    8000b3e0:	8f55                	or	a4,a4,a3
    8000b3e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b3e6:	068e                	slli	a3,a3,0x3
    8000b3e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b3ea:	8f75                	and	a4,a4,a3
    8000b3ec:	40f70933          	sub	s2,a4,a5
    8000b3f0:	00193913          	seqz	s2,s2
    8000b3f4:	ec9fd06f          	j	800092bc <tinst_tests+0x12b0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b3f8:	701c                	ld	a5,32(s0)
    8000b3fa:	e399                	bnez	a5,8000b400 <tinst_tests+0x33f4>
    8000b3fc:	f73fd06f          	j	8000936e <tinst_tests+0x1362>
    8000b400:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b402:	0016f713          	andi	a4,a3,1
    8000b406:	c319                	beqz	a4,8000b40c <tinst_tests+0x3400>
    8000b408:	ef1fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b40c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b410:	460d                	li	a2,3
    8000b412:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b416:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b418:	00c59763          	bne	a1,a2,8000b426 <tinst_tests+0x341a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b41c:	0026d683          	lhu	a3,2(a3)
    8000b420:	0106969b          	slliw	a3,a3,0x10
    8000b424:	8f55                	or	a4,a4,a3
    8000b426:	1ffe16b7          	lui	a3,0x1ffe1
    8000b42a:	068e                	slli	a3,a3,0x3
    8000b42c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b42e:	8f75                	and	a4,a4,a3
    8000b430:	40f70933          	sub	s2,a4,a5
    8000b434:	00193913          	seqz	s2,s2
    8000b438:	f37fd06f          	j	8000936e <tinst_tests+0x1362>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b43c:	701c                	ld	a5,32(s0)
    8000b43e:	e399                	bnez	a5,8000b444 <tinst_tests+0x3438>
    8000b440:	fe1fd06f          	j	80009420 <tinst_tests+0x1414>
    8000b444:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b446:	0016f713          	andi	a4,a3,1
    8000b44a:	c319                	beqz	a4,8000b450 <tinst_tests+0x3444>
    8000b44c:	eadfe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b450:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b454:	460d                	li	a2,3
    8000b456:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b45a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b45c:	00c59763          	bne	a1,a2,8000b46a <tinst_tests+0x345e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b460:	0026d683          	lhu	a3,2(a3)
    8000b464:	0106969b          	slliw	a3,a3,0x10
    8000b468:	8f55                	or	a4,a4,a3
    8000b46a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b46e:	068e                	slli	a3,a3,0x3
    8000b470:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b472:	8f75                	and	a4,a4,a3
    8000b474:	40f70933          	sub	s2,a4,a5
    8000b478:	00193913          	seqz	s2,s2
    8000b47c:	fa5fd06f          	j	80009420 <tinst_tests+0x1414>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b480:	701c                	ld	a5,32(s0)
    8000b482:	e399                	bnez	a5,8000b488 <tinst_tests+0x347c>
    8000b484:	84efe06f          	j	800094d2 <tinst_tests+0x14c6>
    8000b488:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b48a:	0016f713          	andi	a4,a3,1
    8000b48e:	c319                	beqz	a4,8000b494 <tinst_tests+0x3488>
    8000b490:	e69fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b494:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b498:	460d                	li	a2,3
    8000b49a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b49e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b4a0:	00c59763          	bne	a1,a2,8000b4ae <tinst_tests+0x34a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b4a4:	0026d683          	lhu	a3,2(a3)
    8000b4a8:	0106969b          	slliw	a3,a3,0x10
    8000b4ac:	8f55                	or	a4,a4,a3
    8000b4ae:	1ffe16b7          	lui	a3,0x1ffe1
    8000b4b2:	068e                	slli	a3,a3,0x3
    8000b4b4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b4b6:	8f75                	and	a4,a4,a3
    8000b4b8:	40f70933          	sub	s2,a4,a5
    8000b4bc:	00193913          	seqz	s2,s2
    8000b4c0:	812fe06f          	j	800094d2 <tinst_tests+0x14c6>
    8000b4c4:	701c                	ld	a5,32(s0)
    8000b4c6:	e399                	bnez	a5,8000b4cc <tinst_tests+0x34c0>
    8000b4c8:	fe9fd06f          	j	800094b0 <tinst_tests+0x14a4>
    8000b4cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b4ce:	0016f713          	andi	a4,a3,1
    8000b4d2:	c319                	beqz	a4,8000b4d8 <tinst_tests+0x34cc>
    8000b4d4:	e25fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b4d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b4dc:	460d                	li	a2,3
    8000b4de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b4e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b4e4:	00c59763          	bne	a1,a2,8000b4f2 <tinst_tests+0x34e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b4e8:	0026d683          	lhu	a3,2(a3)
    8000b4ec:	0106969b          	slliw	a3,a3,0x10
    8000b4f0:	8f55                	or	a4,a4,a3
    8000b4f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b4f6:	068e                	slli	a3,a3,0x3
    8000b4f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b4fa:	8f75                	and	a4,a4,a3
    8000b4fc:	00e78463          	beq	a5,a4,8000b504 <tinst_tests+0x34f8>
    8000b500:	f9dfd06f          	j	8000949c <tinst_tests+0x1490>
    8000b504:	fadfd06f          	j	800094b0 <tinst_tests+0x14a4>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b508:	701c                	ld	a5,32(s0)
    8000b50a:	e399                	bnez	a5,8000b510 <tinst_tests+0x3504>
    8000b50c:	856fe06f          	j	80009562 <tinst_tests+0x1556>
    8000b510:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b512:	0016f713          	andi	a4,a3,1
    8000b516:	c319                	beqz	a4,8000b51c <tinst_tests+0x3510>
    8000b518:	de1fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b51c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b520:	460d                	li	a2,3
    8000b522:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b526:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b528:	00c59763          	bne	a1,a2,8000b536 <tinst_tests+0x352a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b52c:	0026d683          	lhu	a3,2(a3)
    8000b530:	0106969b          	slliw	a3,a3,0x10
    8000b534:	8f55                	or	a4,a4,a3
    8000b536:	1ffe16b7          	lui	a3,0x1ffe1
    8000b53a:	068e                	slli	a3,a3,0x3
    8000b53c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b53e:	8f75                	and	a4,a4,a3
    8000b540:	00e78463          	beq	a5,a4,8000b548 <tinst_tests+0x353c>
    8000b544:	80afe06f          	j	8000954e <tinst_tests+0x1542>
    8000b548:	81afe06f          	j	80009562 <tinst_tests+0x1556>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b54c:	701c                	ld	a5,32(s0)
    8000b54e:	e399                	bnez	a5,8000b554 <tinst_tests+0x3548>
    8000b550:	8bcfe06f          	j	8000960c <tinst_tests+0x1600>
    8000b554:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b556:	0016f713          	andi	a4,a3,1
    8000b55a:	c319                	beqz	a4,8000b560 <tinst_tests+0x3554>
    8000b55c:	d9dfe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b560:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b564:	460d                	li	a2,3
    8000b566:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b56a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b56c:	00c59763          	bne	a1,a2,8000b57a <tinst_tests+0x356e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b570:	0026d683          	lhu	a3,2(a3)
    8000b574:	0106969b          	slliw	a3,a3,0x10
    8000b578:	8f55                	or	a4,a4,a3
    8000b57a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b57e:	068e                	slli	a3,a3,0x3
    8000b580:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b582:	8f75                	and	a4,a4,a3
    8000b584:	00e78463          	beq	a5,a4,8000b58c <tinst_tests+0x3580>
    8000b588:	870fe06f          	j	800095f8 <tinst_tests+0x15ec>
    8000b58c:	880fe06f          	j	8000960c <tinst_tests+0x1600>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b590:	701c                	ld	a5,32(s0)
    8000b592:	e399                	bnez	a5,8000b598 <tinst_tests+0x358c>
    8000b594:	922fe06f          	j	800096b6 <tinst_tests+0x16aa>
    8000b598:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b59a:	0016f713          	andi	a4,a3,1
    8000b59e:	c319                	beqz	a4,8000b5a4 <tinst_tests+0x3598>
    8000b5a0:	d59fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b5a4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b5a8:	460d                	li	a2,3
    8000b5aa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b5ae:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b5b0:	00c59763          	bne	a1,a2,8000b5be <tinst_tests+0x35b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b5b4:	0026d683          	lhu	a3,2(a3)
    8000b5b8:	0106969b          	slliw	a3,a3,0x10
    8000b5bc:	8f55                	or	a4,a4,a3
    8000b5be:	1ffe16b7          	lui	a3,0x1ffe1
    8000b5c2:	068e                	slli	a3,a3,0x3
    8000b5c4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b5c6:	8f75                	and	a4,a4,a3
    8000b5c8:	00e78463          	beq	a5,a4,8000b5d0 <tinst_tests+0x35c4>
    8000b5cc:	8d6fe06f          	j	800096a2 <tinst_tests+0x1696>
    8000b5d0:	8e6fe06f          	j	800096b6 <tinst_tests+0x16aa>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b5d4:	701c                	ld	a5,32(s0)
    8000b5d6:	e399                	bnez	a5,8000b5dc <tinst_tests+0x35d0>
    8000b5d8:	988fe06f          	j	80009760 <tinst_tests+0x1754>
    8000b5dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b5de:	0016f713          	andi	a4,a3,1
    8000b5e2:	c319                	beqz	a4,8000b5e8 <tinst_tests+0x35dc>
    8000b5e4:	d15fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b5e8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b5ec:	460d                	li	a2,3
    8000b5ee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b5f2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b5f4:	00c59763          	bne	a1,a2,8000b602 <tinst_tests+0x35f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b5f8:	0026d683          	lhu	a3,2(a3)
    8000b5fc:	0106969b          	slliw	a3,a3,0x10
    8000b600:	8f55                	or	a4,a4,a3
    8000b602:	1ffe16b7          	lui	a3,0x1ffe1
    8000b606:	068e                	slli	a3,a3,0x3
    8000b608:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b60a:	8f75                	and	a4,a4,a3
    8000b60c:	00e78463          	beq	a5,a4,8000b614 <tinst_tests+0x3608>
    8000b610:	93cfe06f          	j	8000974c <tinst_tests+0x1740>
    8000b614:	94cfe06f          	j	80009760 <tinst_tests+0x1754>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b618:	701c                	ld	a5,32(s0)
    8000b61a:	e399                	bnez	a5,8000b620 <tinst_tests+0x3614>
    8000b61c:	9eefe06f          	j	8000980a <tinst_tests+0x17fe>
    8000b620:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b622:	0016f713          	andi	a4,a3,1
    8000b626:	c319                	beqz	a4,8000b62c <tinst_tests+0x3620>
    8000b628:	cd1fe06f          	j	8000a2f8 <tinst_tests+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b62c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b630:	460d                	li	a2,3
    8000b632:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b636:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b638:	00c59763          	bne	a1,a2,8000b646 <tinst_tests+0x363a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b63c:	0026d683          	lhu	a3,2(a3)
    8000b640:	0106969b          	slliw	a3,a3,0x10
    8000b644:	8f55                	or	a4,a4,a3
    8000b646:	1ffe16b7          	lui	a3,0x1ffe1
    8000b64a:	068e                	slli	a3,a3,0x3
    8000b64c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b64e:	8f75                	and	a4,a4,a3
    8000b650:	00e78463          	beq	a5,a4,8000b658 <tinst_tests+0x364c>
    8000b654:	9a2fe06f          	j	800097f6 <tinst_tests+0x17ea>
    8000b658:	9b2fe06f          	j	8000980a <tinst_tests+0x17fe>

000000008000b65c <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000b65c:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000b65e:	00016597          	auipc	a1,0x16
    8000b662:	0da58593          	addi	a1,a1,218 # 80021738 <__func__.15>
    8000b666:	00017517          	auipc	a0,0x17
    8000b66a:	4ea50513          	addi	a0,a0,1258 # 80022b50 <__func__.2+0x2e8>
bool priv_change_1(){
    8000b66e:	ec06                	sd	ra,24(sp)
    8000b670:	e822                	sd	s0,16(sp)
    8000b672:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b674:	5fc150ef          	jal	80020c70 <printf>
    8000b678:	4529                	li	a0,10
    8000b67a:	487140ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    8000b67e:	450d                	li	a0,3
    8000b680:	c58f50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8000b684:	f5df40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b688:	99af50ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8000b68c:	4509                	li	a0,2
    8000b68e:	c4af50ef          	jal	80000ad8 <goto_priv>
    vspt_init(); 
    8000b692:	81ef50ef          	jal	800006b0 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000b696:	4511                	li	a0,4
    8000b698:	c40f50ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,0);
    8000b69c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000b6a0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000b6a4:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b6a8:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000b6ac:	4509                	li	a0,2
    8000b6ae:	c2af50ef          	jal	80000ad8 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b6b2:	0330000f          	fence	rw,rw
    8000b6b6:	0003a417          	auipc	s0,0x3a
    8000b6ba:	95a40413          	addi	s0,s0,-1702 # 80045010 <excpt>
    8000b6be:	4785                	li	a5,1
    8000b6c0:	0003a717          	auipc	a4,0x3a
    8000b6c4:	98073423          	sd	zero,-1656(a4) # 80045048 <excpt+0x38>
    8000b6c8:	00f41023          	sh	a5,0(s0)
    8000b6cc:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b6d0:	400197b7          	lui	a5,0x40019
    8000b6d4:	078a                	slli	a5,a5,0x2
    8000b6d6:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b6da:	08200593          	li	a1,130
    8000b6de:	00019617          	auipc	a2,0x19
    8000b6e2:	59a60613          	addi	a2,a2,1434 # 80024c78 <__func__.2+0x2410>
    8000b6e6:	00017517          	auipc	a0,0x17
    8000b6ea:	48250513          	addi	a0,a0,1154 # 80022b68 <__func__.2+0x300>
    8000b6ee:	582150ef          	jal	80020c70 <printf>
    8000b6f2:	0003a797          	auipc	a5,0x3a
    8000b6f6:	91f7c783          	lbu	a5,-1761(a5) # 80045011 <excpt+0x1>
    8000b6fa:	00017597          	auipc	a1,0x17
    8000b6fe:	44658593          	addi	a1,a1,1094 # 80022b40 <__func__.2+0x2d8>
    8000b702:	c789                	beqz	a5,8000b70c <priv_change_1+0xb0>
    8000b704:	6418                	ld	a4,8(s0)
    8000b706:	47b5                	li	a5,13
    8000b708:	0cf70463          	beq	a4,a5,8000b7d0 <priv_change_1+0x174>
    8000b70c:	00017517          	auipc	a0,0x17
    8000b710:	47450513          	addi	a0,a0,1140 # 80022b80 <__func__.2+0x318>
    8000b714:	55c150ef          	jal	80020c70 <printf>
    8000b718:	0003a797          	auipc	a5,0x3a
    8000b71c:	8f97c783          	lbu	a5,-1799(a5) # 80045011 <excpt+0x1>
    8000b720:	c789                	beqz	a5,8000b72a <priv_change_1+0xce>
    8000b722:	6418                	ld	a4,8(s0)
    8000b724:	47b5                	li	a5,13
    8000b726:	04f70e63          	beq	a4,a5,8000b782 <priv_change_1+0x126>
    8000b72a:	00017517          	auipc	a0,0x17
    8000b72e:	45e50513          	addi	a0,a0,1118 # 80022b88 <__func__.2+0x320>
    8000b732:	53e150ef          	jal	80020c70 <printf>
    8000b736:	02900513          	li	a0,41
    8000b73a:	3c7140ef          	jal	80020300 <putchar>
    8000b73e:	4529                	li	a0,10
    8000b740:	3c1140ef          	jal	80020300 <putchar>
    8000b744:	0003a497          	auipc	s1,0x3a
    8000b748:	8cd4c483          	lbu	s1,-1843(s1) # 80045011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000b74c:	00017597          	auipc	a1,0x17
    8000b750:	3f458593          	addi	a1,a1,1012 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b754:	c491                	beqz	s1,8000b760 <priv_change_1+0x104>
    8000b756:	6418                	ld	a4,8(s0)
    8000b758:	47b5                	li	a5,13
    8000b75a:	04f70363          	beq	a4,a5,8000b7a0 <priv_change_1+0x144>
    8000b75e:	4481                	li	s1,0
    TEST_END();
    8000b760:	00017517          	auipc	a0,0x17
    8000b764:	48850513          	addi	a0,a0,1160 # 80022be8 <__func__.2+0x380>
    8000b768:	508150ef          	jal	80020c70 <printf>
    8000b76c:	4511                	li	a0,4
    8000b76e:	b6af50ef          	jal	80000ad8 <goto_priv>
    8000b772:	c37f50ef          	jal	800013a8 <reset_state>
}
    8000b776:	60e2                	ld	ra,24(sp)
    8000b778:	6442                	ld	s0,16(sp)
    8000b77a:	8526                	mv	a0,s1
    8000b77c:	64a2                	ld	s1,8(sp)
    8000b77e:	6105                	addi	sp,sp,32
    8000b780:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b782:	0003a717          	auipc	a4,0x3a
    8000b786:	89272703          	lw	a4,-1902(a4) # 80045014 <excpt+0x4>
    8000b78a:	4791                	li	a5,4
    8000b78c:	f8f71fe3          	bne	a4,a5,8000b72a <priv_change_1+0xce>
    8000b790:	00021717          	auipc	a4,0x21
    8000b794:	d3c72703          	lw	a4,-708(a4) # 8002c4cc <curr_priv>
    8000b798:	4789                	li	a5,2
    8000b79a:	f8f718e3          	bne	a4,a5,8000b72a <priv_change_1+0xce>
    8000b79e:	b745                	j	8000b73e <priv_change_1+0xe2>
    8000b7a0:	0003a717          	auipc	a4,0x3a
    8000b7a4:	87472703          	lw	a4,-1932(a4) # 80045014 <excpt+0x4>
    8000b7a8:	4791                	li	a5,4
    8000b7aa:	faf71ae3          	bne	a4,a5,8000b75e <priv_change_1+0x102>
    8000b7ae:	00021717          	auipc	a4,0x21
    8000b7b2:	d1e72703          	lw	a4,-738(a4) # 8002c4cc <curr_priv>
    8000b7b6:	4789                	li	a5,2
    TEST_END();
    8000b7b8:	00017597          	auipc	a1,0x17
    8000b7bc:	37858593          	addi	a1,a1,888 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b7c0:	faf700e3          	beq	a4,a5,8000b760 <priv_change_1+0x104>
    8000b7c4:	4481                	li	s1,0
    TEST_END();
    8000b7c6:	00017597          	auipc	a1,0x17
    8000b7ca:	37a58593          	addi	a1,a1,890 # 80022b40 <__func__.2+0x2d8>
    8000b7ce:	bf49                	j	8000b760 <priv_change_1+0x104>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b7d0:	0003a717          	auipc	a4,0x3a
    8000b7d4:	84472703          	lw	a4,-1980(a4) # 80045014 <excpt+0x4>
    8000b7d8:	4791                	li	a5,4
    8000b7da:	f2f719e3          	bne	a4,a5,8000b70c <priv_change_1+0xb0>
    8000b7de:	00021717          	auipc	a4,0x21
    8000b7e2:	cee72703          	lw	a4,-786(a4) # 8002c4cc <curr_priv>
    8000b7e6:	4789                	li	a5,2
    8000b7e8:	00017597          	auipc	a1,0x17
    8000b7ec:	34858593          	addi	a1,a1,840 # 80022b30 <__func__.2+0x2c8>
    8000b7f0:	f0f70ee3          	beq	a4,a5,8000b70c <priv_change_1+0xb0>
    8000b7f4:	00017597          	auipc	a1,0x17
    8000b7f8:	34c58593          	addi	a1,a1,844 # 80022b40 <__func__.2+0x2d8>
    8000b7fc:	bf01                	j	8000b70c <priv_change_1+0xb0>

000000008000b7fe <priv_change_2>:

bool priv_change_2(){
    8000b7fe:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000b800:	00016597          	auipc	a1,0x16
    8000b804:	f4858593          	addi	a1,a1,-184 # 80021748 <__func__.13>
    8000b808:	00017517          	auipc	a0,0x17
    8000b80c:	34850513          	addi	a0,a0,840 # 80022b50 <__func__.2+0x2e8>
bool priv_change_2(){
    8000b810:	ec06                	sd	ra,24(sp)
    8000b812:	e822                	sd	s0,16(sp)
    8000b814:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b816:	45a150ef          	jal	80020c70 <printf>
    8000b81a:	4529                	li	a0,10
    8000b81c:	2e5140ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    8000b820:	450d                	li	a0,3
    8000b822:	ab6f50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8000b826:	dbbf40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b82a:	ff9f40ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8000b82e:	4509                	li	a0,2
    8000b830:	aa8f50ef          	jal	80000ad8 <goto_priv>
    vspt_init(); 
    8000b834:	e7df40ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b838:	4511                	li	a0,4
    8000b83a:	a9ef50ef          	jal	80000ad8 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000b83e:	6789                	lui	a5,0x2
    8000b840:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000b844:	4509                	li	a0,2
    8000b846:	a92f50ef          	jal	80000ad8 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000b84a:	0330000f          	fence	rw,rw
    8000b84e:	00039417          	auipc	s0,0x39
    8000b852:	7c240413          	addi	s0,s0,1986 # 80045010 <excpt>
    8000b856:	4785                	li	a5,1
    8000b858:	00039717          	auipc	a4,0x39
    8000b85c:	7e073823          	sd	zero,2032(a4) # 80045048 <excpt+0x38>
    8000b860:	00f41023          	sh	a5,0(s0)
    8000b864:	0330000f          	fence	rw,rw
    8000b868:	400197b7          	lui	a5,0x40019
    8000b86c:	078a                	slli	a5,a5,0x2
    8000b86e:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b872:	08200593          	li	a1,130
    8000b876:	00019617          	auipc	a2,0x19
    8000b87a:	47260613          	addi	a2,a2,1138 # 80024ce8 <__func__.2+0x2480>
    8000b87e:	00017517          	auipc	a0,0x17
    8000b882:	2ea50513          	addi	a0,a0,746 # 80022b68 <__func__.2+0x300>
    8000b886:	3ea150ef          	jal	80020c70 <printf>
    8000b88a:	00039797          	auipc	a5,0x39
    8000b88e:	7877c783          	lbu	a5,1927(a5) # 80045011 <excpt+0x1>
    8000b892:	00017597          	auipc	a1,0x17
    8000b896:	2ae58593          	addi	a1,a1,686 # 80022b40 <__func__.2+0x2d8>
    8000b89a:	c789                	beqz	a5,8000b8a4 <priv_change_2+0xa6>
    8000b89c:	6418                	ld	a4,8(s0)
    8000b89e:	47b5                	li	a5,13
    8000b8a0:	0cf70463          	beq	a4,a5,8000b968 <priv_change_2+0x16a>
    8000b8a4:	00017517          	auipc	a0,0x17
    8000b8a8:	2dc50513          	addi	a0,a0,732 # 80022b80 <__func__.2+0x318>
    8000b8ac:	3c4150ef          	jal	80020c70 <printf>
    8000b8b0:	00039797          	auipc	a5,0x39
    8000b8b4:	7617c783          	lbu	a5,1889(a5) # 80045011 <excpt+0x1>
    8000b8b8:	c789                	beqz	a5,8000b8c2 <priv_change_2+0xc4>
    8000b8ba:	6418                	ld	a4,8(s0)
    8000b8bc:	47b5                	li	a5,13
    8000b8be:	04f70e63          	beq	a4,a5,8000b91a <priv_change_2+0x11c>
    8000b8c2:	00017517          	auipc	a0,0x17
    8000b8c6:	2c650513          	addi	a0,a0,710 # 80022b88 <__func__.2+0x320>
    8000b8ca:	3a6150ef          	jal	80020c70 <printf>
    8000b8ce:	02900513          	li	a0,41
    8000b8d2:	22f140ef          	jal	80020300 <putchar>
    8000b8d6:	4529                	li	a0,10
    8000b8d8:	229140ef          	jal	80020300 <putchar>
    8000b8dc:	00039497          	auipc	s1,0x39
    8000b8e0:	7354c483          	lbu	s1,1845(s1) # 80045011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000b8e4:	00017597          	auipc	a1,0x17
    8000b8e8:	25c58593          	addi	a1,a1,604 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b8ec:	c491                	beqz	s1,8000b8f8 <priv_change_2+0xfa>
    8000b8ee:	6418                	ld	a4,8(s0)
    8000b8f0:	47b5                	li	a5,13
    8000b8f2:	04f70363          	beq	a4,a5,8000b938 <priv_change_2+0x13a>
    8000b8f6:	4481                	li	s1,0
    TEST_END();
    8000b8f8:	00017517          	auipc	a0,0x17
    8000b8fc:	2f050513          	addi	a0,a0,752 # 80022be8 <__func__.2+0x380>
    8000b900:	370150ef          	jal	80020c70 <printf>
    8000b904:	4511                	li	a0,4
    8000b906:	9d2f50ef          	jal	80000ad8 <goto_priv>
    8000b90a:	a9ff50ef          	jal	800013a8 <reset_state>
}
    8000b90e:	60e2                	ld	ra,24(sp)
    8000b910:	6442                	ld	s0,16(sp)
    8000b912:	8526                	mv	a0,s1
    8000b914:	64a2                	ld	s1,8(sp)
    8000b916:	6105                	addi	sp,sp,32
    8000b918:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b91a:	00039717          	auipc	a4,0x39
    8000b91e:	6fa72703          	lw	a4,1786(a4) # 80045014 <excpt+0x4>
    8000b922:	4791                	li	a5,4
    8000b924:	f8f71fe3          	bne	a4,a5,8000b8c2 <priv_change_2+0xc4>
    8000b928:	00021717          	auipc	a4,0x21
    8000b92c:	ba472703          	lw	a4,-1116(a4) # 8002c4cc <curr_priv>
    8000b930:	4789                	li	a5,2
    8000b932:	f8f718e3          	bne	a4,a5,8000b8c2 <priv_change_2+0xc4>
    8000b936:	b745                	j	8000b8d6 <priv_change_2+0xd8>
    8000b938:	00039717          	auipc	a4,0x39
    8000b93c:	6dc72703          	lw	a4,1756(a4) # 80045014 <excpt+0x4>
    8000b940:	4791                	li	a5,4
    8000b942:	faf71ae3          	bne	a4,a5,8000b8f6 <priv_change_2+0xf8>
    8000b946:	00021717          	auipc	a4,0x21
    8000b94a:	b8672703          	lw	a4,-1146(a4) # 8002c4cc <curr_priv>
    8000b94e:	4789                	li	a5,2
    TEST_END();
    8000b950:	00017597          	auipc	a1,0x17
    8000b954:	1e058593          	addi	a1,a1,480 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b958:	faf700e3          	beq	a4,a5,8000b8f8 <priv_change_2+0xfa>
    8000b95c:	4481                	li	s1,0
    TEST_END();
    8000b95e:	00017597          	auipc	a1,0x17
    8000b962:	1e258593          	addi	a1,a1,482 # 80022b40 <__func__.2+0x2d8>
    8000b966:	bf49                	j	8000b8f8 <priv_change_2+0xfa>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b968:	00039717          	auipc	a4,0x39
    8000b96c:	6ac72703          	lw	a4,1708(a4) # 80045014 <excpt+0x4>
    8000b970:	4791                	li	a5,4
    8000b972:	f2f719e3          	bne	a4,a5,8000b8a4 <priv_change_2+0xa6>
    8000b976:	00021717          	auipc	a4,0x21
    8000b97a:	b5672703          	lw	a4,-1194(a4) # 8002c4cc <curr_priv>
    8000b97e:	4789                	li	a5,2
    8000b980:	00017597          	auipc	a1,0x17
    8000b984:	1b058593          	addi	a1,a1,432 # 80022b30 <__func__.2+0x2c8>
    8000b988:	f0f70ee3          	beq	a4,a5,8000b8a4 <priv_change_2+0xa6>
    8000b98c:	00017597          	auipc	a1,0x17
    8000b990:	1b458593          	addi	a1,a1,436 # 80022b40 <__func__.2+0x2d8>
    8000b994:	bf01                	j	8000b8a4 <priv_change_2+0xa6>

000000008000b996 <priv_change_3>:


bool priv_change_3(){
    8000b996:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000b998:	00016597          	auipc	a1,0x16
    8000b99c:	dc058593          	addi	a1,a1,-576 # 80021758 <__func__.12>
    8000b9a0:	00017517          	auipc	a0,0x17
    8000b9a4:	1b050513          	addi	a0,a0,432 # 80022b50 <__func__.2+0x2e8>
bool priv_change_3(){
    8000b9a8:	ec06                	sd	ra,24(sp)
    8000b9aa:	e822                	sd	s0,16(sp)
    8000b9ac:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b9ae:	2c2150ef          	jal	80020c70 <printf>
    8000b9b2:	4529                	li	a0,10
    8000b9b4:	14d140ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    8000b9b8:	450d                	li	a0,3
    8000b9ba:	91ef50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8000b9be:	c23f40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b9c2:	e61f40ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8000b9c6:	4509                	li	a0,2
    8000b9c8:	910f50ef          	jal	80000ad8 <goto_priv>
    vspt_init(); 
    8000b9cc:	ce5f40ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000b9d0:	0330000f          	fence	rw,rw
    8000b9d4:	00039417          	auipc	s0,0x39
    8000b9d8:	63c40413          	addi	s0,s0,1596 # 80045010 <excpt>
    8000b9dc:	4485                	li	s1,1
    8000b9de:	00039797          	auipc	a5,0x39
    8000b9e2:	6607b523          	sd	zero,1642(a5) # 80045048 <excpt+0x38>
    8000b9e6:	00941023          	sh	s1,0(s0)
    8000b9ea:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000b9ee:	4511                	li	a0,4
    8000b9f0:	8e8f50ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,0);
    8000b9f4:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000b9f8:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000b9fc:	450d                	li	a0,3
    8000b9fe:	8daf50ef          	jal	80000ad8 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ba02:	0330000f          	fence	rw,rw
    8000ba06:	00039797          	auipc	a5,0x39
    8000ba0a:	6407b123          	sd	zero,1602(a5) # 80045048 <excpt+0x38>
    8000ba0e:	00941023          	sh	s1,0(s0)
    8000ba12:	0330000f          	fence	rw,rw
    8000ba16:	400197b7          	lui	a5,0x40019
    8000ba1a:	078a                	slli	a5,a5,0x2
    8000ba1c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ba20:	08200593          	li	a1,130
    8000ba24:	00019617          	auipc	a2,0x19
    8000ba28:	30460613          	addi	a2,a2,772 # 80024d28 <__func__.2+0x24c0>
    8000ba2c:	00017517          	auipc	a0,0x17
    8000ba30:	13c50513          	addi	a0,a0,316 # 80022b68 <__func__.2+0x300>
    8000ba34:	23c150ef          	jal	80020c70 <printf>
    8000ba38:	00039797          	auipc	a5,0x39
    8000ba3c:	5d97c783          	lbu	a5,1497(a5) # 80045011 <excpt+0x1>
    8000ba40:	00017597          	auipc	a1,0x17
    8000ba44:	10058593          	addi	a1,a1,256 # 80022b40 <__func__.2+0x2d8>
    8000ba48:	cb81                	beqz	a5,8000ba58 <priv_change_3+0xc2>
    8000ba4a:	00021717          	auipc	a4,0x21
    8000ba4e:	a8272703          	lw	a4,-1406(a4) # 8002c4cc <curr_priv>
    8000ba52:	478d                	li	a5,3
    8000ba54:	0af70c63          	beq	a4,a5,8000bb0c <priv_change_3+0x176>
    8000ba58:	00017517          	auipc	a0,0x17
    8000ba5c:	12850513          	addi	a0,a0,296 # 80022b80 <__func__.2+0x318>
    8000ba60:	210150ef          	jal	80020c70 <printf>
    8000ba64:	00039797          	auipc	a5,0x39
    8000ba68:	5ad7c783          	lbu	a5,1453(a5) # 80045011 <excpt+0x1>
    8000ba6c:	cb81                	beqz	a5,8000ba7c <priv_change_3+0xe6>
    8000ba6e:	00021717          	auipc	a4,0x21
    8000ba72:	a5e72703          	lw	a4,-1442(a4) # 8002c4cc <curr_priv>
    8000ba76:	478d                	li	a5,3
    8000ba78:	06f70163          	beq	a4,a5,8000bada <priv_change_3+0x144>
    8000ba7c:	00017517          	auipc	a0,0x17
    8000ba80:	10c50513          	addi	a0,a0,268 # 80022b88 <__func__.2+0x320>
    8000ba84:	1ec150ef          	jal	80020c70 <printf>
    8000ba88:	02900513          	li	a0,41
    8000ba8c:	075140ef          	jal	80020300 <putchar>
    8000ba90:	4529                	li	a0,10
    8000ba92:	06f140ef          	jal	80020300 <putchar>
    8000ba96:	00039417          	auipc	s0,0x39
    8000ba9a:	57b44403          	lbu	s0,1403(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000ba9e:	00017597          	auipc	a1,0x17
    8000baa2:	0a258593          	addi	a1,a1,162 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000baa6:	c809                	beqz	s0,8000bab8 <priv_change_3+0x122>
    8000baa8:	00021717          	auipc	a4,0x21
    8000baac:	a2472703          	lw	a4,-1500(a4) # 8002c4cc <curr_priv>
    8000bab0:	478d                	li	a5,3
    8000bab2:	02f70c63          	beq	a4,a5,8000baea <priv_change_3+0x154>
    8000bab6:	4401                	li	s0,0
    TEST_END();
    8000bab8:	00017517          	auipc	a0,0x17
    8000babc:	13050513          	addi	a0,a0,304 # 80022be8 <__func__.2+0x380>
    8000bac0:	1b0150ef          	jal	80020c70 <printf>
    8000bac4:	4511                	li	a0,4
    8000bac6:	812f50ef          	jal	80000ad8 <goto_priv>
    8000baca:	8dff50ef          	jal	800013a8 <reset_state>
}
    8000bace:	60e2                	ld	ra,24(sp)
    8000bad0:	8522                	mv	a0,s0
    8000bad2:	6442                	ld	s0,16(sp)
    8000bad4:	64a2                	ld	s1,8(sp)
    8000bad6:	6105                	addi	sp,sp,32
    8000bad8:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000bada:	00039717          	auipc	a4,0x39
    8000bade:	53a72703          	lw	a4,1338(a4) # 80045014 <excpt+0x4>
    8000bae2:	4791                	li	a5,4
    8000bae4:	f8f71ce3          	bne	a4,a5,8000ba7c <priv_change_3+0xe6>
    8000bae8:	b765                	j	8000ba90 <priv_change_3+0xfa>
    8000baea:	00039717          	auipc	a4,0x39
    8000baee:	52a72703          	lw	a4,1322(a4) # 80045014 <excpt+0x4>
    8000baf2:	4791                	li	a5,4
    TEST_END();
    8000baf4:	00017597          	auipc	a1,0x17
    8000baf8:	03c58593          	addi	a1,a1,60 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000bafc:	faf70ee3          	beq	a4,a5,8000bab8 <priv_change_3+0x122>
    8000bb00:	4401                	li	s0,0
    TEST_END();
    8000bb02:	00017597          	auipc	a1,0x17
    8000bb06:	03e58593          	addi	a1,a1,62 # 80022b40 <__func__.2+0x2d8>
    8000bb0a:	b77d                	j	8000bab8 <priv_change_3+0x122>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000bb0c:	00039717          	auipc	a4,0x39
    8000bb10:	50872703          	lw	a4,1288(a4) # 80045014 <excpt+0x4>
    8000bb14:	4791                	li	a5,4
    8000bb16:	00017597          	auipc	a1,0x17
    8000bb1a:	01a58593          	addi	a1,a1,26 # 80022b30 <__func__.2+0x2c8>
    8000bb1e:	f2f70de3          	beq	a4,a5,8000ba58 <priv_change_3+0xc2>
    8000bb22:	00017597          	auipc	a1,0x17
    8000bb26:	01e58593          	addi	a1,a1,30 # 80022b40 <__func__.2+0x2d8>
    8000bb2a:	b73d                	j	8000ba58 <priv_change_3+0xc2>

000000008000bb2c <priv_change_4>:

bool priv_change_4(){
    8000bb2c:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000bb2e:	00016597          	auipc	a1,0x16
    8000bb32:	c3a58593          	addi	a1,a1,-966 # 80021768 <__func__.11>
    8000bb36:	00017517          	auipc	a0,0x17
    8000bb3a:	01a50513          	addi	a0,a0,26 # 80022b50 <__func__.2+0x2e8>
bool priv_change_4(){
    8000bb3e:	ec06                	sd	ra,24(sp)
    8000bb40:	e822                	sd	s0,16(sp)
    8000bb42:	e426                	sd	s1,8(sp)
    TEST_START();
    8000bb44:	12c150ef          	jal	80020c70 <printf>
    8000bb48:	4529                	li	a0,10
    8000bb4a:	7b6140ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    8000bb4e:	450d                	li	a0,3
    8000bb50:	f89f40ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8000bb54:	a8df40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000bb58:	ccbf40ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8000bb5c:	4509                	li	a0,2
    8000bb5e:	f7bf40ef          	jal	80000ad8 <goto_priv>
    vspt_init(); 
    8000bb62:	b4ff40ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000bb66:	4511                	li	a0,4
    8000bb68:	f71f40ef          	jal	80000ad8 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000bb6c:	6789                	lui	a5,0x2
    8000bb6e:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000bb72:	450d                	li	a0,3
    8000bb74:	f65f40ef          	jal	80000ad8 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000bb78:	0330000f          	fence	rw,rw
    8000bb7c:	00039417          	auipc	s0,0x39
    8000bb80:	49440413          	addi	s0,s0,1172 # 80045010 <excpt>
    8000bb84:	4785                	li	a5,1
    8000bb86:	00039717          	auipc	a4,0x39
    8000bb8a:	4c073123          	sd	zero,1218(a4) # 80045048 <excpt+0x38>
    8000bb8e:	00f41023          	sh	a5,0(s0)
    8000bb92:	0330000f          	fence	rw,rw
    8000bb96:	400197b7          	lui	a5,0x40019
    8000bb9a:	078a                	slli	a5,a5,0x2
    8000bb9c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000bba0:	08200593          	li	a1,130
    8000bba4:	00019617          	auipc	a2,0x19
    8000bba8:	1f460613          	addi	a2,a2,500 # 80024d98 <__func__.2+0x2530>
    8000bbac:	00017517          	auipc	a0,0x17
    8000bbb0:	fbc50513          	addi	a0,a0,-68 # 80022b68 <__func__.2+0x300>
    8000bbb4:	0bc150ef          	jal	80020c70 <printf>
    8000bbb8:	00039797          	auipc	a5,0x39
    8000bbbc:	4597c783          	lbu	a5,1113(a5) # 80045011 <excpt+0x1>
    8000bbc0:	00017597          	auipc	a1,0x17
    8000bbc4:	f8058593          	addi	a1,a1,-128 # 80022b40 <__func__.2+0x2d8>
    8000bbc8:	c789                	beqz	a5,8000bbd2 <priv_change_4+0xa6>
    8000bbca:	6418                	ld	a4,8(s0)
    8000bbcc:	47b5                	li	a5,13
    8000bbce:	0af70663          	beq	a4,a5,8000bc7a <priv_change_4+0x14e>
    8000bbd2:	00017517          	auipc	a0,0x17
    8000bbd6:	fae50513          	addi	a0,a0,-82 # 80022b80 <__func__.2+0x318>
    8000bbda:	096150ef          	jal	80020c70 <printf>
    8000bbde:	00039797          	auipc	a5,0x39
    8000bbe2:	4337c783          	lbu	a5,1075(a5) # 80045011 <excpt+0x1>
    8000bbe6:	c789                	beqz	a5,8000bbf0 <priv_change_4+0xc4>
    8000bbe8:	6418                	ld	a4,8(s0)
    8000bbea:	47b5                	li	a5,13
    8000bbec:	04f70e63          	beq	a4,a5,8000bc48 <priv_change_4+0x11c>
    8000bbf0:	00017517          	auipc	a0,0x17
    8000bbf4:	f9850513          	addi	a0,a0,-104 # 80022b88 <__func__.2+0x320>
    8000bbf8:	078150ef          	jal	80020c70 <printf>
    8000bbfc:	02900513          	li	a0,41
    8000bc00:	700140ef          	jal	80020300 <putchar>
    8000bc04:	4529                	li	a0,10
    8000bc06:	6fa140ef          	jal	80020300 <putchar>
    8000bc0a:	00039497          	auipc	s1,0x39
    8000bc0e:	4074c483          	lbu	s1,1031(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000bc12:	00017597          	auipc	a1,0x17
    8000bc16:	f2e58593          	addi	a1,a1,-210 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000bc1a:	c491                	beqz	s1,8000bc26 <priv_change_4+0xfa>
    8000bc1c:	6418                	ld	a4,8(s0)
    8000bc1e:	47b5                	li	a5,13
    8000bc20:	02f70c63          	beq	a4,a5,8000bc58 <priv_change_4+0x12c>
    8000bc24:	4481                	li	s1,0
    TEST_END();
    8000bc26:	00017517          	auipc	a0,0x17
    8000bc2a:	fc250513          	addi	a0,a0,-62 # 80022be8 <__func__.2+0x380>
    8000bc2e:	042150ef          	jal	80020c70 <printf>
    8000bc32:	4511                	li	a0,4
    8000bc34:	ea5f40ef          	jal	80000ad8 <goto_priv>
    8000bc38:	f70f50ef          	jal	800013a8 <reset_state>
}
    8000bc3c:	60e2                	ld	ra,24(sp)
    8000bc3e:	6442                	ld	s0,16(sp)
    8000bc40:	8526                	mv	a0,s1
    8000bc42:	64a2                	ld	s1,8(sp)
    8000bc44:	6105                	addi	sp,sp,32
    8000bc46:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000bc48:	00039717          	auipc	a4,0x39
    8000bc4c:	3cc72703          	lw	a4,972(a4) # 80045014 <excpt+0x4>
    8000bc50:	4791                	li	a5,4
    8000bc52:	f8f71fe3          	bne	a4,a5,8000bbf0 <priv_change_4+0xc4>
    8000bc56:	b77d                	j	8000bc04 <priv_change_4+0xd8>
    8000bc58:	00039717          	auipc	a4,0x39
    8000bc5c:	3bc72703          	lw	a4,956(a4) # 80045014 <excpt+0x4>
    8000bc60:	4791                	li	a5,4
    TEST_END();
    8000bc62:	00017597          	auipc	a1,0x17
    8000bc66:	ece58593          	addi	a1,a1,-306 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000bc6a:	faf70ee3          	beq	a4,a5,8000bc26 <priv_change_4+0xfa>
    8000bc6e:	4481                	li	s1,0
    TEST_END();
    8000bc70:	00017597          	auipc	a1,0x17
    8000bc74:	ed058593          	addi	a1,a1,-304 # 80022b40 <__func__.2+0x2d8>
    8000bc78:	b77d                	j	8000bc26 <priv_change_4+0xfa>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000bc7a:	00039717          	auipc	a4,0x39
    8000bc7e:	39a72703          	lw	a4,922(a4) # 80045014 <excpt+0x4>
    8000bc82:	4791                	li	a5,4
    8000bc84:	00017597          	auipc	a1,0x17
    8000bc88:	eac58593          	addi	a1,a1,-340 # 80022b30 <__func__.2+0x2c8>
    8000bc8c:	f4f703e3          	beq	a4,a5,8000bbd2 <priv_change_4+0xa6>
    8000bc90:	00017597          	auipc	a1,0x17
    8000bc94:	eb058593          	addi	a1,a1,-336 # 80022b40 <__func__.2+0x2d8>
    8000bc98:	bf2d                	j	8000bbd2 <priv_change_4+0xa6>

000000008000bc9a <priv_change_5>:

bool priv_change_5(){
    8000bc9a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000bc9c:	00016597          	auipc	a1,0x16
    8000bca0:	adc58593          	addi	a1,a1,-1316 # 80021778 <__func__.10>
    8000bca4:	00017517          	auipc	a0,0x17
    8000bca8:	eac50513          	addi	a0,a0,-340 # 80022b50 <__func__.2+0x2e8>
bool priv_change_5(){
    8000bcac:	e406                	sd	ra,8(sp)
    8000bcae:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bcb0:	7c1140ef          	jal	80020c70 <printf>
    8000bcb4:	4529                	li	a0,10
    8000bcb6:	64a140ef          	jal	80020300 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000bcba:	4511                	li	a0,4
    8000bcbc:	e1df40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000bcc0:	ee8f50ef          	jal	800013a8 <reset_state>
    CSRW(medeleg, 0); 
    8000bcc4:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000bcc8:	0330000f          	fence	rw,rw
    8000bccc:	00039417          	auipc	s0,0x39
    8000bcd0:	34440413          	addi	s0,s0,836 # 80045010 <excpt>
    8000bcd4:	4785                	li	a5,1
    8000bcd6:	00039717          	auipc	a4,0x39
    8000bcda:	36073923          	sd	zero,882(a4) # 80045048 <excpt+0x38>
    8000bcde:	00f41023          	sh	a5,0(s0)
    8000bce2:	0330000f          	fence	rw,rw
    asm volatile(
    8000bce6:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000bcea:	08200593          	li	a1,130
    8000bcee:	00019617          	auipc	a2,0x19
    8000bcf2:	0ea60613          	addi	a2,a2,234 # 80024dd8 <__func__.2+0x2570>
    8000bcf6:	00017517          	auipc	a0,0x17
    8000bcfa:	e7250513          	addi	a0,a0,-398 # 80022b68 <__func__.2+0x300>
    8000bcfe:	773140ef          	jal	80020c70 <printf>
    8000bd02:	6014                	ld	a3,0(s0)
    8000bd04:	f0001737          	lui	a4,0xf0001
    8000bd08:	0712                	slli	a4,a4,0x4
    8000bd0a:	4785                	li	a5,1
    8000bd0c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd10:	178a                	slli	a5,a5,0x22
    8000bd12:	8f75                	and	a4,a4,a3
    8000bd14:	10078793          	addi	a5,a5,256
    8000bd18:	00017597          	auipc	a1,0x17
    8000bd1c:	e1858593          	addi	a1,a1,-488 # 80022b30 <__func__.2+0x2c8>
    8000bd20:	00f70663          	beq	a4,a5,8000bd2c <priv_change_5+0x92>
    8000bd24:	00017597          	auipc	a1,0x17
    8000bd28:	e1c58593          	addi	a1,a1,-484 # 80022b40 <__func__.2+0x2d8>
    8000bd2c:	00017517          	auipc	a0,0x17
    8000bd30:	e5450513          	addi	a0,a0,-428 # 80022b80 <__func__.2+0x318>
    8000bd34:	73d140ef          	jal	80020c70 <printf>
    8000bd38:	00039797          	auipc	a5,0x39
    8000bd3c:	2d97c783          	lbu	a5,729(a5) # 80045011 <excpt+0x1>
    8000bd40:	cb81                	beqz	a5,8000bd50 <priv_change_5+0xb6>
    8000bd42:	00039717          	auipc	a4,0x39
    8000bd46:	2d272703          	lw	a4,722(a4) # 80045014 <excpt+0x4>
    8000bd4a:	4791                	li	a5,4
    8000bd4c:	00f70c63          	beq	a4,a5,8000bd64 <priv_change_5+0xca>
    8000bd50:	00017517          	auipc	a0,0x17
    8000bd54:	e3850513          	addi	a0,a0,-456 # 80022b88 <__func__.2+0x320>
    8000bd58:	719140ef          	jal	80020c70 <printf>
    8000bd5c:	02900513          	li	a0,41
    8000bd60:	5a0140ef          	jal	80020300 <putchar>
    8000bd64:	4529                	li	a0,10
    8000bd66:	59a140ef          	jal	80020300 <putchar>
    8000bd6a:	6014                	ld	a3,0(s0)
    8000bd6c:	f0001737          	lui	a4,0xf0001
    8000bd70:	0712                	slli	a4,a4,0x4
    8000bd72:	4785                	li	a5,1
    8000bd74:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd78:	178a                	slli	a5,a5,0x22
    8000bd7a:	8f75                	and	a4,a4,a3
    8000bd7c:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000bd80:	00019517          	auipc	a0,0x19
    8000bd84:	09050513          	addi	a0,a0,144 # 80024e10 <__func__.2+0x25a8>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000bd88:	02f70963          	beq	a4,a5,8000bdba <priv_change_5+0x120>
    printf("niuh");
    8000bd8c:	6e5140ef          	jal	80020c70 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000bd90:	4401                	li	s0,0

    TEST_END();
    8000bd92:	00017597          	auipc	a1,0x17
    8000bd96:	dae58593          	addi	a1,a1,-594 # 80022b40 <__func__.2+0x2d8>
    8000bd9a:	00017517          	auipc	a0,0x17
    8000bd9e:	e4e50513          	addi	a0,a0,-434 # 80022be8 <__func__.2+0x380>
    8000bda2:	6cf140ef          	jal	80020c70 <printf>
    8000bda6:	4511                	li	a0,4
    8000bda8:	d31f40ef          	jal	80000ad8 <goto_priv>
    8000bdac:	dfcf50ef          	jal	800013a8 <reset_state>
}
    8000bdb0:	60a2                	ld	ra,8(sp)
    8000bdb2:	8522                	mv	a0,s0
    8000bdb4:	6402                	ld	s0,0(sp)
    8000bdb6:	0141                	addi	sp,sp,16
    8000bdb8:	8082                	ret
    printf("niuh");
    8000bdba:	6b7140ef          	jal	80020c70 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000bdbe:	4405                	li	s0,1
    TEST_END();
    8000bdc0:	00017597          	auipc	a1,0x17
    8000bdc4:	d7058593          	addi	a1,a1,-656 # 80022b30 <__func__.2+0x2c8>
    8000bdc8:	bfc9                	j	8000bd9a <priv_change_5+0x100>

000000008000bdca <priv_change_6>:

bool priv_change_6(){
    8000bdca:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000bdcc:	00016597          	auipc	a1,0x16
    8000bdd0:	9bc58593          	addi	a1,a1,-1604 # 80021788 <__func__.9>
    8000bdd4:	00017517          	auipc	a0,0x17
    8000bdd8:	d7c50513          	addi	a0,a0,-644 # 80022b50 <__func__.2+0x2e8>
bool priv_change_6(){
    8000bddc:	e406                	sd	ra,8(sp)
    8000bdde:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bde0:	691140ef          	jal	80020c70 <printf>
    8000bde4:	4529                	li	a0,10
    8000bde6:	51a140ef          	jal	80020300 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000bdea:	4511                	li	a0,4
    8000bdec:	cedf40ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,0);         
    8000bdf0:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000bdf4:	4505                	li	a0,1
    8000bdf6:	ce3f40ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000bdfa:	0330000f          	fence	rw,rw
    8000bdfe:	00039417          	auipc	s0,0x39
    8000be02:	21240413          	addi	s0,s0,530 # 80045010 <excpt>
    8000be06:	4785                	li	a5,1
    8000be08:	00039717          	auipc	a4,0x39
    8000be0c:	24073023          	sd	zero,576(a4) # 80045048 <excpt+0x38>
    8000be10:	00f41023          	sh	a5,0(s0)
    8000be14:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000be18:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000be1c:	08200593          	li	a1,130
    8000be20:	00019617          	auipc	a2,0x19
    8000be24:	ff860613          	addi	a2,a2,-8 # 80024e18 <__func__.2+0x25b0>
    8000be28:	00017517          	auipc	a0,0x17
    8000be2c:	d4050513          	addi	a0,a0,-704 # 80022b68 <__func__.2+0x300>
    8000be30:	641140ef          	jal	80020c70 <printf>
    8000be34:	6014                	ld	a3,0(s0)
    8000be36:	f0001737          	lui	a4,0xf0001
    8000be3a:	0712                	slli	a4,a4,0x4
    8000be3c:	4785                	li	a5,1
    8000be3e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000be42:	178a                	slli	a5,a5,0x22
    8000be44:	8f75                	and	a4,a4,a3
    8000be46:	10078793          	addi	a5,a5,256
    8000be4a:	00017597          	auipc	a1,0x17
    8000be4e:	ce658593          	addi	a1,a1,-794 # 80022b30 <__func__.2+0x2c8>
    8000be52:	00f70663          	beq	a4,a5,8000be5e <priv_change_6+0x94>
    8000be56:	00017597          	auipc	a1,0x17
    8000be5a:	cea58593          	addi	a1,a1,-790 # 80022b40 <__func__.2+0x2d8>
    8000be5e:	00017517          	auipc	a0,0x17
    8000be62:	d2250513          	addi	a0,a0,-734 # 80022b80 <__func__.2+0x318>
    8000be66:	60b140ef          	jal	80020c70 <printf>
    8000be6a:	00039797          	auipc	a5,0x39
    8000be6e:	1a77c783          	lbu	a5,423(a5) # 80045011 <excpt+0x1>
    8000be72:	cb81                	beqz	a5,8000be82 <priv_change_6+0xb8>
    8000be74:	00039717          	auipc	a4,0x39
    8000be78:	1a072703          	lw	a4,416(a4) # 80045014 <excpt+0x4>
    8000be7c:	4791                	li	a5,4
    8000be7e:	00f70c63          	beq	a4,a5,8000be96 <priv_change_6+0xcc>
    8000be82:	00017517          	auipc	a0,0x17
    8000be86:	d0650513          	addi	a0,a0,-762 # 80022b88 <__func__.2+0x320>
    8000be8a:	5e7140ef          	jal	80020c70 <printf>
    8000be8e:	02900513          	li	a0,41
    8000be92:	46e140ef          	jal	80020300 <putchar>
    8000be96:	4529                	li	a0,10
    8000be98:	468140ef          	jal	80020300 <putchar>
    8000be9c:	6014                	ld	a3,0(s0)
    8000be9e:	f0001737          	lui	a4,0xf0001
    8000bea2:	0712                	slli	a4,a4,0x4
    8000bea4:	4785                	li	a5,1
    8000bea6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000beaa:	178a                	slli	a5,a5,0x22
    8000beac:	8f75                	and	a4,a4,a3
    8000beae:	10078793          	addi	a5,a5,256
    8000beb2:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000beb4:	00017597          	auipc	a1,0x17
    8000beb8:	c8c58593          	addi	a1,a1,-884 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000bebc:	00f71763          	bne	a4,a5,8000beca <priv_change_6+0x100>
    8000bec0:	4405                	li	s0,1
    TEST_END();
    8000bec2:	00017597          	auipc	a1,0x17
    8000bec6:	c6e58593          	addi	a1,a1,-914 # 80022b30 <__func__.2+0x2c8>
    8000beca:	00017517          	auipc	a0,0x17
    8000bece:	d1e50513          	addi	a0,a0,-738 # 80022be8 <__func__.2+0x380>
    8000bed2:	59f140ef          	jal	80020c70 <printf>
    8000bed6:	4511                	li	a0,4
    8000bed8:	c01f40ef          	jal	80000ad8 <goto_priv>
    8000bedc:	cccf50ef          	jal	800013a8 <reset_state>
}
    8000bee0:	60a2                	ld	ra,8(sp)
    8000bee2:	8522                	mv	a0,s0
    8000bee4:	6402                	ld	s0,0(sp)
    8000bee6:	0141                	addi	sp,sp,16
    8000bee8:	8082                	ret

000000008000beea <priv_change_7>:

bool priv_change_7(){
    8000beea:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000beec:	00016597          	auipc	a1,0x16
    8000bef0:	8ac58593          	addi	a1,a1,-1876 # 80021798 <__func__.8>
    8000bef4:	00017517          	auipc	a0,0x17
    8000bef8:	c5c50513          	addi	a0,a0,-932 # 80022b50 <__func__.2+0x2e8>
bool priv_change_7(){
    8000befc:	e406                	sd	ra,8(sp)
    8000befe:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bf00:	571140ef          	jal	80020c70 <printf>
    8000bf04:	4529                	li	a0,10
    8000bf06:	3fa140ef          	jal	80020300 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000bf0a:	4511                	li	a0,4
    8000bf0c:	bcdf40ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,0);      
    8000bf10:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000bf14:	4501                	li	a0,0
    8000bf16:	bc3f40ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000bf1a:	0330000f          	fence	rw,rw
    8000bf1e:	00039417          	auipc	s0,0x39
    8000bf22:	0f240413          	addi	s0,s0,242 # 80045010 <excpt>
    8000bf26:	4785                	li	a5,1
    8000bf28:	00039717          	auipc	a4,0x39
    8000bf2c:	12073023          	sd	zero,288(a4) # 80045048 <excpt+0x38>
    8000bf30:	00f41023          	sh	a5,0(s0)
    8000bf34:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000bf38:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000bf3c:	08200593          	li	a1,130
    8000bf40:	00019617          	auipc	a2,0x19
    8000bf44:	f1860613          	addi	a2,a2,-232 # 80024e58 <__func__.2+0x25f0>
    8000bf48:	00017517          	auipc	a0,0x17
    8000bf4c:	c2050513          	addi	a0,a0,-992 # 80022b68 <__func__.2+0x300>
    8000bf50:	521140ef          	jal	80020c70 <printf>
    8000bf54:	6014                	ld	a3,0(s0)
    8000bf56:	f0001737          	lui	a4,0xf0001
    8000bf5a:	0712                	slli	a4,a4,0x4
    8000bf5c:	4785                	li	a5,1
    8000bf5e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bf62:	178a                	slli	a5,a5,0x22
    8000bf64:	8f75                	and	a4,a4,a3
    8000bf66:	10078793          	addi	a5,a5,256
    8000bf6a:	00017597          	auipc	a1,0x17
    8000bf6e:	bc658593          	addi	a1,a1,-1082 # 80022b30 <__func__.2+0x2c8>
    8000bf72:	00f70663          	beq	a4,a5,8000bf7e <priv_change_7+0x94>
    8000bf76:	00017597          	auipc	a1,0x17
    8000bf7a:	bca58593          	addi	a1,a1,-1078 # 80022b40 <__func__.2+0x2d8>
    8000bf7e:	00017517          	auipc	a0,0x17
    8000bf82:	c0250513          	addi	a0,a0,-1022 # 80022b80 <__func__.2+0x318>
    8000bf86:	4eb140ef          	jal	80020c70 <printf>
    8000bf8a:	00039797          	auipc	a5,0x39
    8000bf8e:	0877c783          	lbu	a5,135(a5) # 80045011 <excpt+0x1>
    8000bf92:	cb81                	beqz	a5,8000bfa2 <priv_change_7+0xb8>
    8000bf94:	00039717          	auipc	a4,0x39
    8000bf98:	08072703          	lw	a4,128(a4) # 80045014 <excpt+0x4>
    8000bf9c:	4791                	li	a5,4
    8000bf9e:	00f70c63          	beq	a4,a5,8000bfb6 <priv_change_7+0xcc>
    8000bfa2:	00017517          	auipc	a0,0x17
    8000bfa6:	be650513          	addi	a0,a0,-1050 # 80022b88 <__func__.2+0x320>
    8000bfaa:	4c7140ef          	jal	80020c70 <printf>
    8000bfae:	02900513          	li	a0,41
    8000bfb2:	34e140ef          	jal	80020300 <putchar>
    8000bfb6:	4529                	li	a0,10
    8000bfb8:	348140ef          	jal	80020300 <putchar>
    8000bfbc:	6014                	ld	a3,0(s0)
    8000bfbe:	f0001737          	lui	a4,0xf0001
    8000bfc2:	0712                	slli	a4,a4,0x4
    8000bfc4:	4785                	li	a5,1
    8000bfc6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bfca:	178a                	slli	a5,a5,0x22
    8000bfcc:	8f75                	and	a4,a4,a3
    8000bfce:	10078793          	addi	a5,a5,256
    8000bfd2:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000bfd4:	00017597          	auipc	a1,0x17
    8000bfd8:	b6c58593          	addi	a1,a1,-1172 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000bfdc:	00f71763          	bne	a4,a5,8000bfea <priv_change_7+0x100>
    8000bfe0:	4405                	li	s0,1
    TEST_END();
    8000bfe2:	00017597          	auipc	a1,0x17
    8000bfe6:	b4e58593          	addi	a1,a1,-1202 # 80022b30 <__func__.2+0x2c8>
    8000bfea:	00017517          	auipc	a0,0x17
    8000bfee:	bfe50513          	addi	a0,a0,-1026 # 80022be8 <__func__.2+0x380>
    8000bff2:	47f140ef          	jal	80020c70 <printf>
    8000bff6:	4511                	li	a0,4
    8000bff8:	ae1f40ef          	jal	80000ad8 <goto_priv>
    8000bffc:	bacf50ef          	jal	800013a8 <reset_state>
}
    8000c000:	60a2                	ld	ra,8(sp)
    8000c002:	8522                	mv	a0,s0
    8000c004:	6402                	ld	s0,0(sp)
    8000c006:	0141                	addi	sp,sp,16
    8000c008:	8082                	ret

000000008000c00a <priv_change_8>:

bool priv_change_8(){
    8000c00a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000c00c:	00015597          	auipc	a1,0x15
    8000c010:	79c58593          	addi	a1,a1,1948 # 800217a8 <__func__.7>
    8000c014:	00017517          	auipc	a0,0x17
    8000c018:	b3c50513          	addi	a0,a0,-1220 # 80022b50 <__func__.2+0x2e8>
bool priv_change_8(){
    8000c01c:	e406                	sd	ra,8(sp)
    8000c01e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c020:	451140ef          	jal	80020c70 <printf>
    8000c024:	4529                	li	a0,10
    8000c026:	2da140ef          	jal	80020300 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000c02a:	4511                	li	a0,4
    8000c02c:	aadf40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c030:	b78f50ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,0);
    8000c034:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000c038:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000c03c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c040:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000c044:	4501                	li	a0,0
    8000c046:	a93f40ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000c04a:	0330000f          	fence	rw,rw
    8000c04e:	00039417          	auipc	s0,0x39
    8000c052:	fc240413          	addi	s0,s0,-62 # 80045010 <excpt>
    8000c056:	4785                	li	a5,1
    8000c058:	00039717          	auipc	a4,0x39
    8000c05c:	fe073823          	sd	zero,-16(a4) # 80045048 <excpt+0x38>
    8000c060:	00f41023          	sh	a5,0(s0)
    8000c064:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000c068:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000c06c:	08200593          	li	a1,130
    8000c070:	00019617          	auipc	a2,0x19
    8000c074:	e2860613          	addi	a2,a2,-472 # 80024e98 <__func__.2+0x2630>
    8000c078:	00017517          	auipc	a0,0x17
    8000c07c:	af050513          	addi	a0,a0,-1296 # 80022b68 <__func__.2+0x300>
    8000c080:	3f1140ef          	jal	80020c70 <printf>
    8000c084:	6014                	ld	a3,0(s0)
    8000c086:	f0001737          	lui	a4,0xf0001
    8000c08a:	0712                	slli	a4,a4,0x4
    8000c08c:	4785                	li	a5,1
    8000c08e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c092:	178a                	slli	a5,a5,0x22
    8000c094:	8f75                	and	a4,a4,a3
    8000c096:	10078793          	addi	a5,a5,256
    8000c09a:	00017597          	auipc	a1,0x17
    8000c09e:	aa658593          	addi	a1,a1,-1370 # 80022b40 <__func__.2+0x2d8>
    8000c0a2:	08f70963          	beq	a4,a5,8000c134 <priv_change_8+0x12a>
    8000c0a6:	00017517          	auipc	a0,0x17
    8000c0aa:	ada50513          	addi	a0,a0,-1318 # 80022b80 <__func__.2+0x318>
    8000c0ae:	3c3140ef          	jal	80020c70 <printf>
    8000c0b2:	00039797          	auipc	a5,0x39
    8000c0b6:	f5f7c783          	lbu	a5,-161(a5) # 80045011 <excpt+0x1>
    8000c0ba:	cb81                	beqz	a5,8000c0ca <priv_change_8+0xc0>
    8000c0bc:	00039717          	auipc	a4,0x39
    8000c0c0:	f5872703          	lw	a4,-168(a4) # 80045014 <excpt+0x4>
    8000c0c4:	4791                	li	a5,4
    8000c0c6:	06f70163          	beq	a4,a5,8000c128 <priv_change_8+0x11e>
    8000c0ca:	00017517          	auipc	a0,0x17
    8000c0ce:	abe50513          	addi	a0,a0,-1346 # 80022b88 <__func__.2+0x320>
    8000c0d2:	39f140ef          	jal	80020c70 <printf>
    8000c0d6:	02900513          	li	a0,41
    8000c0da:	226140ef          	jal	80020300 <putchar>
    8000c0de:	4529                	li	a0,10
    8000c0e0:	220140ef          	jal	80020300 <putchar>
    8000c0e4:	6014                	ld	a3,0(s0)
    8000c0e6:	f0001737          	lui	a4,0xf0001
    8000c0ea:	0712                	slli	a4,a4,0x4
    8000c0ec:	4785                	li	a5,1
    8000c0ee:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c0f2:	178a                	slli	a5,a5,0x22
    8000c0f4:	8f75                	and	a4,a4,a3
    8000c0f6:	10078793          	addi	a5,a5,256
    8000c0fa:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000c0fc:	00017597          	auipc	a1,0x17
    8000c100:	a4458593          	addi	a1,a1,-1468 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000c104:	04f70663          	beq	a4,a5,8000c150 <priv_change_8+0x146>
    TEST_END();
    8000c108:	00017517          	auipc	a0,0x17
    8000c10c:	ae050513          	addi	a0,a0,-1312 # 80022be8 <__func__.2+0x380>
    8000c110:	361140ef          	jal	80020c70 <printf>
    8000c114:	4511                	li	a0,4
    8000c116:	9c3f40ef          	jal	80000ad8 <goto_priv>
    8000c11a:	a8ef50ef          	jal	800013a8 <reset_state>
}
    8000c11e:	60a2                	ld	ra,8(sp)
    8000c120:	8522                	mv	a0,s0
    8000c122:	6402                	ld	s0,0(sp)
    8000c124:	0141                	addi	sp,sp,16
    8000c126:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000c128:	00020797          	auipc	a5,0x20
    8000c12c:	3a47a783          	lw	a5,932(a5) # 8002c4cc <curr_priv>
    8000c130:	d7dd                	beqz	a5,8000c0de <priv_change_8+0xd4>
    8000c132:	bf61                	j	8000c0ca <priv_change_8+0xc0>
    8000c134:	00020797          	auipc	a5,0x20
    8000c138:	3987a783          	lw	a5,920(a5) # 8002c4cc <curr_priv>
    8000c13c:	00017597          	auipc	a1,0x17
    8000c140:	9f458593          	addi	a1,a1,-1548 # 80022b30 <__func__.2+0x2c8>
    8000c144:	d3ad                	beqz	a5,8000c0a6 <priv_change_8+0x9c>
    8000c146:	00017597          	auipc	a1,0x17
    8000c14a:	9fa58593          	addi	a1,a1,-1542 # 80022b40 <__func__.2+0x2d8>
    8000c14e:	bfa1                	j	8000c0a6 <priv_change_8+0x9c>
    8000c150:	00020797          	auipc	a5,0x20
    8000c154:	37c7a783          	lw	a5,892(a5) # 8002c4cc <curr_priv>
    8000c158:	fbc5                	bnez	a5,8000c108 <priv_change_8+0xfe>
    8000c15a:	4405                	li	s0,1
    TEST_END();
    8000c15c:	00017597          	auipc	a1,0x17
    8000c160:	9d458593          	addi	a1,a1,-1580 # 80022b30 <__func__.2+0x2c8>
    8000c164:	b755                	j	8000c108 <priv_change_8+0xfe>

000000008000c166 <priv_change_9>:



bool priv_change_9(){
    8000c166:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c168:	00015597          	auipc	a1,0x15
    8000c16c:	65058593          	addi	a1,a1,1616 # 800217b8 <__func__.6>
    8000c170:	00017517          	auipc	a0,0x17
    8000c174:	9e050513          	addi	a0,a0,-1568 # 80022b50 <__func__.2+0x2e8>
bool priv_change_9(){
    8000c178:	e406                	sd	ra,8(sp)
    8000c17a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c17c:	2f5140ef          	jal	80020c70 <printf>
    8000c180:	4529                	li	a0,10
    8000c182:	17e140ef          	jal	80020300 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000c186:	4511                	li	a0,4
    8000c188:	951f40ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000c18c:	57fd                	li	a5,-1
    8000c18e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c192:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000c196:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000c19a:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000c19e:	4501                	li	a0,0
    8000c1a0:	939f40ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000c1a4:	0330000f          	fence	rw,rw
    8000c1a8:	00039417          	auipc	s0,0x39
    8000c1ac:	e6840413          	addi	s0,s0,-408 # 80045010 <excpt>
    8000c1b0:	4785                	li	a5,1
    8000c1b2:	00039717          	auipc	a4,0x39
    8000c1b6:	e8073b23          	sd	zero,-362(a4) # 80045048 <excpt+0x38>
    8000c1ba:	00f41023          	sh	a5,0(s0)
    8000c1be:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000c1c2:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000c1c6:	08200593          	li	a1,130
    8000c1ca:	00019617          	auipc	a2,0x19
    8000c1ce:	d3e60613          	addi	a2,a2,-706 # 80024f08 <__func__.2+0x26a0>
    8000c1d2:	00017517          	auipc	a0,0x17
    8000c1d6:	99650513          	addi	a0,a0,-1642 # 80022b68 <__func__.2+0x300>
    8000c1da:	297140ef          	jal	80020c70 <printf>
    8000c1de:	6014                	ld	a3,0(s0)
    8000c1e0:	f0001737          	lui	a4,0xf0001
    8000c1e4:	0712                	slli	a4,a4,0x4
    8000c1e6:	4785                	li	a5,1
    8000c1e8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c1ec:	1786                	slli	a5,a5,0x21
    8000c1ee:	8f75                	and	a4,a4,a3
    8000c1f0:	10078793          	addi	a5,a5,256
    8000c1f4:	00017597          	auipc	a1,0x17
    8000c1f8:	94c58593          	addi	a1,a1,-1716 # 80022b40 <__func__.2+0x2d8>
    8000c1fc:	08f70963          	beq	a4,a5,8000c28e <priv_change_9+0x128>
    8000c200:	00017517          	auipc	a0,0x17
    8000c204:	98050513          	addi	a0,a0,-1664 # 80022b80 <__func__.2+0x318>
    8000c208:	269140ef          	jal	80020c70 <printf>
    8000c20c:	00039797          	auipc	a5,0x39
    8000c210:	e057c783          	lbu	a5,-507(a5) # 80045011 <excpt+0x1>
    8000c214:	cb81                	beqz	a5,8000c224 <priv_change_9+0xbe>
    8000c216:	00039717          	auipc	a4,0x39
    8000c21a:	dfe72703          	lw	a4,-514(a4) # 80045014 <excpt+0x4>
    8000c21e:	4789                	li	a5,2
    8000c220:	06f70163          	beq	a4,a5,8000c282 <priv_change_9+0x11c>
    8000c224:	00017517          	auipc	a0,0x17
    8000c228:	96450513          	addi	a0,a0,-1692 # 80022b88 <__func__.2+0x320>
    8000c22c:	245140ef          	jal	80020c70 <printf>
    8000c230:	02900513          	li	a0,41
    8000c234:	0cc140ef          	jal	80020300 <putchar>
    8000c238:	4529                	li	a0,10
    8000c23a:	0c6140ef          	jal	80020300 <putchar>
    8000c23e:	6014                	ld	a3,0(s0)
    8000c240:	f0001737          	lui	a4,0xf0001
    8000c244:	0712                	slli	a4,a4,0x4
    8000c246:	4785                	li	a5,1
    8000c248:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c24c:	1786                	slli	a5,a5,0x21
    8000c24e:	8f75                	and	a4,a4,a3
    8000c250:	10078793          	addi	a5,a5,256
    8000c254:	4401                	li	s0,0
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VU
    );


    TEST_END();
    8000c256:	00017597          	auipc	a1,0x17
    8000c25a:	8ea58593          	addi	a1,a1,-1814 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000c25e:	04f70663          	beq	a4,a5,8000c2aa <priv_change_9+0x144>
    TEST_END();
    8000c262:	00017517          	auipc	a0,0x17
    8000c266:	98650513          	addi	a0,a0,-1658 # 80022be8 <__func__.2+0x380>
    8000c26a:	207140ef          	jal	80020c70 <printf>
    8000c26e:	4511                	li	a0,4
    8000c270:	869f40ef          	jal	80000ad8 <goto_priv>
    8000c274:	934f50ef          	jal	800013a8 <reset_state>
}
    8000c278:	60a2                	ld	ra,8(sp)
    8000c27a:	8522                	mv	a0,s0
    8000c27c:	6402                	ld	s0,0(sp)
    8000c27e:	0141                	addi	sp,sp,16
    8000c280:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000c282:	00020797          	auipc	a5,0x20
    8000c286:	24a7a783          	lw	a5,586(a5) # 8002c4cc <curr_priv>
    8000c28a:	d7dd                	beqz	a5,8000c238 <priv_change_9+0xd2>
    8000c28c:	bf61                	j	8000c224 <priv_change_9+0xbe>
    8000c28e:	00020797          	auipc	a5,0x20
    8000c292:	23e7a783          	lw	a5,574(a5) # 8002c4cc <curr_priv>
    8000c296:	00017597          	auipc	a1,0x17
    8000c29a:	89a58593          	addi	a1,a1,-1894 # 80022b30 <__func__.2+0x2c8>
    8000c29e:	d3ad                	beqz	a5,8000c200 <priv_change_9+0x9a>
    8000c2a0:	00017597          	auipc	a1,0x17
    8000c2a4:	8a058593          	addi	a1,a1,-1888 # 80022b40 <__func__.2+0x2d8>
    8000c2a8:	bfa1                	j	8000c200 <priv_change_9+0x9a>
    8000c2aa:	00020797          	auipc	a5,0x20
    8000c2ae:	2227a783          	lw	a5,546(a5) # 8002c4cc <curr_priv>
    8000c2b2:	fbc5                	bnez	a5,8000c262 <priv_change_9+0xfc>
    8000c2b4:	4405                	li	s0,1
    TEST_END();
    8000c2b6:	00017597          	auipc	a1,0x17
    8000c2ba:	87a58593          	addi	a1,a1,-1926 # 80022b30 <__func__.2+0x2c8>
    8000c2be:	b755                	j	8000c262 <priv_change_9+0xfc>

000000008000c2c0 <priv_change_10>:


bool priv_change_10(){
    8000c2c0:	1101                	addi	sp,sp,-32
    TEST_START();
    8000c2c2:	00015597          	auipc	a1,0x15
    8000c2c6:	50658593          	addi	a1,a1,1286 # 800217c8 <__func__.5>
    8000c2ca:	00017517          	auipc	a0,0x17
    8000c2ce:	88650513          	addi	a0,a0,-1914 # 80022b50 <__func__.2+0x2e8>
bool priv_change_10(){
    8000c2d2:	ec06                	sd	ra,24(sp)
    8000c2d4:	e822                	sd	s0,16(sp)
    8000c2d6:	e426                	sd	s1,8(sp)
    TEST_START();
    8000c2d8:	199140ef          	jal	80020c70 <printf>
    8000c2dc:	4529                	li	a0,10
    8000c2de:	022140ef          	jal	80020300 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000c2e2:	4511                	li	a0,4
    8000c2e4:	ff4f40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c2e8:	8c0f50ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c2ec:	57fd                	li	a5,-1
    8000c2ee:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c2f2:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c2f6:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c2fa:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000c2fe:	4505                	li	a0,1
    8000c300:	fd8f40ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000c304:	0330000f          	fence	rw,rw
    8000c308:	00039417          	auipc	s0,0x39
    8000c30c:	d0840413          	addi	s0,s0,-760 # 80045010 <excpt>
    8000c310:	4485                	li	s1,1
    8000c312:	00039797          	auipc	a5,0x39
    8000c316:	d207bb23          	sd	zero,-714(a5) # 80045048 <excpt+0x38>
    8000c31a:	00941023          	sh	s1,0(s0)
    8000c31e:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000c322:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c326:	08200593          	li	a1,130
    8000c32a:	00019617          	auipc	a2,0x19
    8000c32e:	c4e60613          	addi	a2,a2,-946 # 80024f78 <__func__.2+0x2710>
    8000c332:	00017517          	auipc	a0,0x17
    8000c336:	83650513          	addi	a0,a0,-1994 # 80022b68 <__func__.2+0x300>
    8000c33a:	137140ef          	jal	80020c70 <printf>
    8000c33e:	6014                	ld	a3,0(s0)
    8000c340:	f0001737          	lui	a4,0xf0001
    8000c344:	0712                	slli	a4,a4,0x4
    8000c346:	478d                	li	a5,3
    8000c348:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c34c:	1782                	slli	a5,a5,0x20
    8000c34e:	8f75                	and	a4,a4,a3
    8000c350:	10078793          	addi	a5,a5,256
    8000c354:	00016597          	auipc	a1,0x16
    8000c358:	7ec58593          	addi	a1,a1,2028 # 80022b40 <__func__.2+0x2d8>
    8000c35c:	08f70c63          	beq	a4,a5,8000c3f4 <priv_change_10+0x134>
    8000c360:	00017517          	auipc	a0,0x17
    8000c364:	82050513          	addi	a0,a0,-2016 # 80022b80 <__func__.2+0x318>
    8000c368:	109140ef          	jal	80020c70 <printf>
    8000c36c:	00039797          	auipc	a5,0x39
    8000c370:	ca57c783          	lbu	a5,-859(a5) # 80045011 <excpt+0x1>
    8000c374:	cb81                	beqz	a5,8000c384 <priv_change_10+0xc4>
    8000c376:	00039717          	auipc	a4,0x39
    8000c37a:	c9e72703          	lw	a4,-866(a4) # 80045014 <excpt+0x4>
    8000c37e:	478d                	li	a5,3
    8000c380:	06f70263          	beq	a4,a5,8000c3e4 <priv_change_10+0x124>
    8000c384:	00017517          	auipc	a0,0x17
    8000c388:	80450513          	addi	a0,a0,-2044 # 80022b88 <__func__.2+0x320>
    8000c38c:	0e5140ef          	jal	80020c70 <printf>
    8000c390:	02900513          	li	a0,41
    8000c394:	76d130ef          	jal	80020300 <putchar>
    8000c398:	4529                	li	a0,10
    8000c39a:	767130ef          	jal	80020300 <putchar>
    8000c39e:	6014                	ld	a3,0(s0)
    8000c3a0:	f0001737          	lui	a4,0xf0001
    8000c3a4:	0712                	slli	a4,a4,0x4
    8000c3a6:	478d                	li	a5,3
    8000c3a8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c3ac:	1782                	slli	a5,a5,0x20
    8000c3ae:	8f75                	and	a4,a4,a3
    8000c3b0:	10078793          	addi	a5,a5,256
    8000c3b4:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    TEST_END();
    8000c3b6:	00016597          	auipc	a1,0x16
    8000c3ba:	78a58593          	addi	a1,a1,1930 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c3be:	04f70a63          	beq	a4,a5,8000c412 <priv_change_10+0x152>
    TEST_END();
    8000c3c2:	00017517          	auipc	a0,0x17
    8000c3c6:	82650513          	addi	a0,a0,-2010 # 80022be8 <__func__.2+0x380>
    8000c3ca:	0a7140ef          	jal	80020c70 <printf>
    8000c3ce:	4511                	li	a0,4
    8000c3d0:	f08f40ef          	jal	80000ad8 <goto_priv>
    8000c3d4:	fd5f40ef          	jal	800013a8 <reset_state>
}
    8000c3d8:	60e2                	ld	ra,24(sp)
    8000c3da:	8522                	mv	a0,s0
    8000c3dc:	6442                	ld	s0,16(sp)
    8000c3de:	64a2                	ld	s1,8(sp)
    8000c3e0:	6105                	addi	sp,sp,32
    8000c3e2:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c3e4:	00020717          	auipc	a4,0x20
    8000c3e8:	0e872703          	lw	a4,232(a4) # 8002c4cc <curr_priv>
    8000c3ec:	4785                	li	a5,1
    8000c3ee:	f8f71be3          	bne	a4,a5,8000c384 <priv_change_10+0xc4>
    8000c3f2:	b75d                	j	8000c398 <priv_change_10+0xd8>
    8000c3f4:	00020797          	auipc	a5,0x20
    8000c3f8:	0d87a783          	lw	a5,216(a5) # 8002c4cc <curr_priv>
    8000c3fc:	00016597          	auipc	a1,0x16
    8000c400:	73458593          	addi	a1,a1,1844 # 80022b30 <__func__.2+0x2c8>
    8000c404:	f4978ee3          	beq	a5,s1,8000c360 <priv_change_10+0xa0>
    8000c408:	00016597          	auipc	a1,0x16
    8000c40c:	73858593          	addi	a1,a1,1848 # 80022b40 <__func__.2+0x2d8>
    8000c410:	bf81                	j	8000c360 <priv_change_10+0xa0>
    8000c412:	00020797          	auipc	a5,0x20
    8000c416:	0ba7a783          	lw	a5,186(a5) # 8002c4cc <curr_priv>
    8000c41a:	4705                	li	a4,1
    8000c41c:	fae793e3          	bne	a5,a4,8000c3c2 <priv_change_10+0x102>
    8000c420:	843e                	mv	s0,a5
    TEST_END();
    8000c422:	00016597          	auipc	a1,0x16
    8000c426:	70e58593          	addi	a1,a1,1806 # 80022b30 <__func__.2+0x2c8>
    8000c42a:	bf61                	j	8000c3c2 <priv_change_10+0x102>

000000008000c42c <priv_change_11>:


bool priv_change_11(){
    8000c42c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c42e:	00015597          	auipc	a1,0x15
    8000c432:	3aa58593          	addi	a1,a1,938 # 800217d8 <__func__.4>
    8000c436:	00016517          	auipc	a0,0x16
    8000c43a:	71a50513          	addi	a0,a0,1818 # 80022b50 <__func__.2+0x2e8>
bool priv_change_11(){
    8000c43e:	e406                	sd	ra,8(sp)
    8000c440:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c442:	02f140ef          	jal	80020c70 <printf>
    8000c446:	4529                	li	a0,10
    8000c448:	6b9130ef          	jal	80020300 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000c44c:	4511                	li	a0,4
    8000c44e:	e8af40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c452:	f57f40ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c456:	57fd                	li	a5,-1
    8000c458:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c45c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000c460:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000c464:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000c468:	4509                	li	a0,2
    8000c46a:	e6ef40ef          	jal	80000ad8 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000c46e:	0330000f          	fence	rw,rw
    8000c472:	00039417          	auipc	s0,0x39
    8000c476:	b9e40413          	addi	s0,s0,-1122 # 80045010 <excpt>
    8000c47a:	4785                	li	a5,1
    8000c47c:	00039717          	auipc	a4,0x39
    8000c480:	bc073623          	sd	zero,-1076(a4) # 80045048 <excpt+0x38>
    8000c484:	00f41023          	sh	a5,0(s0)
    8000c488:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000c48c:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000c490:	08200593          	li	a1,130
    8000c494:	00019617          	auipc	a2,0x19
    8000c498:	b5460613          	addi	a2,a2,-1196 # 80024fe8 <__func__.2+0x2780>
    8000c49c:	00016517          	auipc	a0,0x16
    8000c4a0:	6cc50513          	addi	a0,a0,1740 # 80022b68 <__func__.2+0x300>
    8000c4a4:	7cc140ef          	jal	80020c70 <printf>
    8000c4a8:	6014                	ld	a3,0(s0)
    8000c4aa:	f0001737          	lui	a4,0xf0001
    8000c4ae:	0712                	slli	a4,a4,0x4
    8000c4b0:	4785                	li	a5,1
    8000c4b2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c4b6:	1786                	slli	a5,a5,0x21
    8000c4b8:	8f75                	and	a4,a4,a3
    8000c4ba:	10078793          	addi	a5,a5,256
    8000c4be:	00016597          	auipc	a1,0x16
    8000c4c2:	67258593          	addi	a1,a1,1650 # 80022b30 <__func__.2+0x2c8>
    8000c4c6:	00f70663          	beq	a4,a5,8000c4d2 <priv_change_11+0xa6>
    8000c4ca:	00016597          	auipc	a1,0x16
    8000c4ce:	67658593          	addi	a1,a1,1654 # 80022b40 <__func__.2+0x2d8>
    8000c4d2:	00016517          	auipc	a0,0x16
    8000c4d6:	6ae50513          	addi	a0,a0,1710 # 80022b80 <__func__.2+0x318>
    8000c4da:	796140ef          	jal	80020c70 <printf>
    8000c4de:	00039797          	auipc	a5,0x39
    8000c4e2:	b337c783          	lbu	a5,-1229(a5) # 80045011 <excpt+0x1>
    8000c4e6:	cb81                	beqz	a5,8000c4f6 <priv_change_11+0xca>
    8000c4e8:	00039717          	auipc	a4,0x39
    8000c4ec:	b2c72703          	lw	a4,-1236(a4) # 80045014 <excpt+0x4>
    8000c4f0:	4789                	li	a5,2
    8000c4f2:	00f70c63          	beq	a4,a5,8000c50a <priv_change_11+0xde>
    8000c4f6:	00016517          	auipc	a0,0x16
    8000c4fa:	69250513          	addi	a0,a0,1682 # 80022b88 <__func__.2+0x320>
    8000c4fe:	772140ef          	jal	80020c70 <printf>
    8000c502:	02900513          	li	a0,41
    8000c506:	5fb130ef          	jal	80020300 <putchar>
    8000c50a:	4529                	li	a0,10
    8000c50c:	5f5130ef          	jal	80020300 <putchar>
    8000c510:	6014                	ld	a3,0(s0)
    8000c512:	f0001737          	lui	a4,0xf0001
    8000c516:	0712                	slli	a4,a4,0x4
    8000c518:	4785                	li	a5,1
    8000c51a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c51e:	1786                	slli	a5,a5,0x21
    8000c520:	8f75                	and	a4,a4,a3
    8000c522:	10078793          	addi	a5,a5,256
    8000c526:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_VS
    ); 


    TEST_END();
    8000c528:	00016597          	auipc	a1,0x16
    8000c52c:	61858593          	addi	a1,a1,1560 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000c530:	00f71763          	bne	a4,a5,8000c53e <priv_change_11+0x112>
    8000c534:	4405                	li	s0,1
    TEST_END();
    8000c536:	00016597          	auipc	a1,0x16
    8000c53a:	5fa58593          	addi	a1,a1,1530 # 80022b30 <__func__.2+0x2c8>
    8000c53e:	00016517          	auipc	a0,0x16
    8000c542:	6aa50513          	addi	a0,a0,1706 # 80022be8 <__func__.2+0x380>
    8000c546:	72a140ef          	jal	80020c70 <printf>
    8000c54a:	4511                	li	a0,4
    8000c54c:	d8cf40ef          	jal	80000ad8 <goto_priv>
    8000c550:	e59f40ef          	jal	800013a8 <reset_state>
}
    8000c554:	60a2                	ld	ra,8(sp)
    8000c556:	8522                	mv	a0,s0
    8000c558:	6402                	ld	s0,0(sp)
    8000c55a:	0141                	addi	sp,sp,16
    8000c55c:	8082                	ret

000000008000c55e <priv_change_12>:



bool priv_change_12(){
    8000c55e:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c560:	00015597          	auipc	a1,0x15
    8000c564:	28858593          	addi	a1,a1,648 # 800217e8 <__func__.3>
    8000c568:	00016517          	auipc	a0,0x16
    8000c56c:	5e850513          	addi	a0,a0,1512 # 80022b50 <__func__.2+0x2e8>
bool priv_change_12(){
    8000c570:	e406                	sd	ra,8(sp)
    8000c572:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c574:	6fc140ef          	jal	80020c70 <printf>
    8000c578:	4529                	li	a0,10
    8000c57a:	587130ef          	jal	80020300 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000c57e:	4511                	li	a0,4
    8000c580:	d58f40ef          	jal	80000ad8 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000c584:	57fd                	li	a5,-1
    8000c586:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c58a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c58e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c592:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000c596:	450d                	li	a0,3
    8000c598:	d40f40ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000c59c:	0330000f          	fence	rw,rw
    8000c5a0:	00039417          	auipc	s0,0x39
    8000c5a4:	a7040413          	addi	s0,s0,-1424 # 80045010 <excpt>
    8000c5a8:	4785                	li	a5,1
    8000c5aa:	00039717          	auipc	a4,0x39
    8000c5ae:	a8073f23          	sd	zero,-1378(a4) # 80045048 <excpt+0x38>
    8000c5b2:	00f41023          	sh	a5,0(s0)
    8000c5b6:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000c5ba:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c5be:	08200593          	li	a1,130
    8000c5c2:	00019617          	auipc	a2,0x19
    8000c5c6:	a7e60613          	addi	a2,a2,-1410 # 80025040 <__func__.2+0x27d8>
    8000c5ca:	00016517          	auipc	a0,0x16
    8000c5ce:	59e50513          	addi	a0,a0,1438 # 80022b68 <__func__.2+0x300>
    8000c5d2:	69e140ef          	jal	80020c70 <printf>
    8000c5d6:	6014                	ld	a3,0(s0)
    8000c5d8:	f0001737          	lui	a4,0xf0001
    8000c5dc:	0712                	slli	a4,a4,0x4
    8000c5de:	478d                	li	a5,3
    8000c5e0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c5e4:	1782                	slli	a5,a5,0x20
    8000c5e6:	8f75                	and	a4,a4,a3
    8000c5e8:	10078793          	addi	a5,a5,256
    8000c5ec:	00016597          	auipc	a1,0x16
    8000c5f0:	54458593          	addi	a1,a1,1348 # 80022b30 <__func__.2+0x2c8>
    8000c5f4:	00f70663          	beq	a4,a5,8000c600 <priv_change_12+0xa2>
    8000c5f8:	00016597          	auipc	a1,0x16
    8000c5fc:	54858593          	addi	a1,a1,1352 # 80022b40 <__func__.2+0x2d8>
    8000c600:	00016517          	auipc	a0,0x16
    8000c604:	58050513          	addi	a0,a0,1408 # 80022b80 <__func__.2+0x318>
    8000c608:	668140ef          	jal	80020c70 <printf>
    8000c60c:	00039797          	auipc	a5,0x39
    8000c610:	a057c783          	lbu	a5,-1531(a5) # 80045011 <excpt+0x1>
    8000c614:	cb81                	beqz	a5,8000c624 <priv_change_12+0xc6>
    8000c616:	00039717          	auipc	a4,0x39
    8000c61a:	9fe72703          	lw	a4,-1538(a4) # 80045014 <excpt+0x4>
    8000c61e:	478d                	li	a5,3
    8000c620:	00f70c63          	beq	a4,a5,8000c638 <priv_change_12+0xda>
    8000c624:	00016517          	auipc	a0,0x16
    8000c628:	56450513          	addi	a0,a0,1380 # 80022b88 <__func__.2+0x320>
    8000c62c:	644140ef          	jal	80020c70 <printf>
    8000c630:	02900513          	li	a0,41
    8000c634:	4cd130ef          	jal	80020300 <putchar>
    8000c638:	4529                	li	a0,10
    8000c63a:	4c7130ef          	jal	80020300 <putchar>
    8000c63e:	6014                	ld	a3,0(s0)
    8000c640:	f0001737          	lui	a4,0xf0001
    8000c644:	0712                	slli	a4,a4,0x4
    8000c646:	478d                	li	a5,3
    8000c648:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c64c:	1782                	slli	a5,a5,0x20
    8000c64e:	8f75                	and	a4,a4,a3
    8000c650:	10078793          	addi	a5,a5,256
    8000c654:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 


    TEST_END();
    8000c656:	00016597          	auipc	a1,0x16
    8000c65a:	4ea58593          	addi	a1,a1,1258 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c65e:	00f71763          	bne	a4,a5,8000c66c <priv_change_12+0x10e>
    8000c662:	4405                	li	s0,1
    TEST_END();
    8000c664:	00016597          	auipc	a1,0x16
    8000c668:	4cc58593          	addi	a1,a1,1228 # 80022b30 <__func__.2+0x2c8>
    8000c66c:	00016517          	auipc	a0,0x16
    8000c670:	57c50513          	addi	a0,a0,1404 # 80022be8 <__func__.2+0x380>
    8000c674:	5fc140ef          	jal	80020c70 <printf>
    8000c678:	4511                	li	a0,4
    8000c67a:	c5ef40ef          	jal	80000ad8 <goto_priv>
    8000c67e:	d2bf40ef          	jal	800013a8 <reset_state>

}
    8000c682:	60a2                	ld	ra,8(sp)
    8000c684:	8522                	mv	a0,s0
    8000c686:	6402                	ld	s0,0(sp)
    8000c688:	0141                	addi	sp,sp,16
    8000c68a:	8082                	ret

000000008000c68c <priv_change_13>:

bool priv_change_13(){
    8000c68c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c68e:	00015597          	auipc	a1,0x15
    8000c692:	16a58593          	addi	a1,a1,362 # 800217f8 <__func__.2>
    8000c696:	00016517          	auipc	a0,0x16
    8000c69a:	4ba50513          	addi	a0,a0,1210 # 80022b50 <__func__.2+0x2e8>
bool priv_change_13(){
    8000c69e:	e406                	sd	ra,8(sp)
    8000c6a0:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c6a2:	5ce140ef          	jal	80020c70 <printf>
    8000c6a6:	4529                	li	a0,10
    8000c6a8:	459130ef          	jal	80020300 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000c6ac:	4511                	li	a0,4
    8000c6ae:	c2af40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c6b2:	cf7f40ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c6b6:	57fd                	li	a5,-1
    8000c6b8:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c6bc:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c6c0:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c6c4:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000c6c8:	0330000f          	fence	rw,rw
    8000c6cc:	00039417          	auipc	s0,0x39
    8000c6d0:	94440413          	addi	s0,s0,-1724 # 80045010 <excpt>
    8000c6d4:	4785                	li	a5,1
    8000c6d6:	00039717          	auipc	a4,0x39
    8000c6da:	96073923          	sd	zero,-1678(a4) # 80045048 <excpt+0x38>
    8000c6de:	00f41023          	sh	a5,0(s0)
    8000c6e2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VU);      
    8000c6e6:	4501                	li	a0,0
    8000c6e8:	bf0f40ef          	jal	80000ad8 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000c6ec:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c6f0:	08200593          	li	a1,130
    8000c6f4:	00019617          	auipc	a2,0x19
    8000c6f8:	9a460613          	addi	a2,a2,-1628 # 80025098 <__func__.2+0x2830>
    8000c6fc:	00016517          	auipc	a0,0x16
    8000c700:	46c50513          	addi	a0,a0,1132 # 80022b68 <__func__.2+0x300>
    8000c704:	56c140ef          	jal	80020c70 <printf>
    8000c708:	6014                	ld	a3,0(s0)
    8000c70a:	f0001737          	lui	a4,0xf0001
    8000c70e:	0712                	slli	a4,a4,0x4
    8000c710:	478d                	li	a5,3
    8000c712:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c716:	1782                	slli	a5,a5,0x20
    8000c718:	8f75                	and	a4,a4,a3
    8000c71a:	10078793          	addi	a5,a5,256
    8000c71e:	00016597          	auipc	a1,0x16
    8000c722:	42258593          	addi	a1,a1,1058 # 80022b40 <__func__.2+0x2d8>
    8000c726:	08f70963          	beq	a4,a5,8000c7b8 <priv_change_13+0x12c>
    8000c72a:	00016517          	auipc	a0,0x16
    8000c72e:	45650513          	addi	a0,a0,1110 # 80022b80 <__func__.2+0x318>
    8000c732:	53e140ef          	jal	80020c70 <printf>
    8000c736:	00039797          	auipc	a5,0x39
    8000c73a:	8db7c783          	lbu	a5,-1829(a5) # 80045011 <excpt+0x1>
    8000c73e:	cb81                	beqz	a5,8000c74e <priv_change_13+0xc2>
    8000c740:	00039717          	auipc	a4,0x39
    8000c744:	8d472703          	lw	a4,-1836(a4) # 80045014 <excpt+0x4>
    8000c748:	478d                	li	a5,3
    8000c74a:	06f70163          	beq	a4,a5,8000c7ac <priv_change_13+0x120>
    8000c74e:	00016517          	auipc	a0,0x16
    8000c752:	43a50513          	addi	a0,a0,1082 # 80022b88 <__func__.2+0x320>
    8000c756:	51a140ef          	jal	80020c70 <printf>
    8000c75a:	02900513          	li	a0,41
    8000c75e:	3a3130ef          	jal	80020300 <putchar>
    8000c762:	4529                	li	a0,10
    8000c764:	39d130ef          	jal	80020300 <putchar>
    8000c768:	6014                	ld	a3,0(s0)
    8000c76a:	f0001737          	lui	a4,0xf0001
    8000c76e:	0712                	slli	a4,a4,0x4
    8000c770:	478d                	li	a5,3
    8000c772:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c776:	1782                	slli	a5,a5,0x20
    8000c778:	8f75                	and	a4,a4,a3
    8000c77a:	10078793          	addi	a5,a5,256
    8000c77e:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000c780:	00016597          	auipc	a1,0x16
    8000c784:	3c058593          	addi	a1,a1,960 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c788:	04f70663          	beq	a4,a5,8000c7d4 <priv_change_13+0x148>
    TEST_END();
    8000c78c:	00016517          	auipc	a0,0x16
    8000c790:	45c50513          	addi	a0,a0,1116 # 80022be8 <__func__.2+0x380>
    8000c794:	4dc140ef          	jal	80020c70 <printf>
    8000c798:	4511                	li	a0,4
    8000c79a:	b3ef40ef          	jal	80000ad8 <goto_priv>
    8000c79e:	c0bf40ef          	jal	800013a8 <reset_state>
}
    8000c7a2:	60a2                	ld	ra,8(sp)
    8000c7a4:	8522                	mv	a0,s0
    8000c7a6:	6402                	ld	s0,0(sp)
    8000c7a8:	0141                	addi	sp,sp,16
    8000c7aa:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c7ac:	00020797          	auipc	a5,0x20
    8000c7b0:	d207a783          	lw	a5,-736(a5) # 8002c4cc <curr_priv>
    8000c7b4:	d7dd                	beqz	a5,8000c762 <priv_change_13+0xd6>
    8000c7b6:	bf61                	j	8000c74e <priv_change_13+0xc2>
    8000c7b8:	00020797          	auipc	a5,0x20
    8000c7bc:	d147a783          	lw	a5,-748(a5) # 8002c4cc <curr_priv>
    8000c7c0:	00016597          	auipc	a1,0x16
    8000c7c4:	37058593          	addi	a1,a1,880 # 80022b30 <__func__.2+0x2c8>
    8000c7c8:	d3ad                	beqz	a5,8000c72a <priv_change_13+0x9e>
    8000c7ca:	00016597          	auipc	a1,0x16
    8000c7ce:	37658593          	addi	a1,a1,886 # 80022b40 <__func__.2+0x2d8>
    8000c7d2:	bfa1                	j	8000c72a <priv_change_13+0x9e>
    8000c7d4:	00020797          	auipc	a5,0x20
    8000c7d8:	cf87a783          	lw	a5,-776(a5) # 8002c4cc <curr_priv>
    8000c7dc:	fbc5                	bnez	a5,8000c78c <priv_change_13+0x100>
    8000c7de:	4405                	li	s0,1
    TEST_END();
    8000c7e0:	00016597          	auipc	a1,0x16
    8000c7e4:	35058593          	addi	a1,a1,848 # 80022b30 <__func__.2+0x2c8>
    8000c7e8:	b755                	j	8000c78c <priv_change_13+0x100>

000000008000c7ea <priv_change_14>:

bool priv_change_14(){
    8000c7ea:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c7ec:	00015597          	auipc	a1,0x15
    8000c7f0:	01c58593          	addi	a1,a1,28 # 80021808 <__func__.1>
    8000c7f4:	00016517          	auipc	a0,0x16
    8000c7f8:	35c50513          	addi	a0,a0,860 # 80022b50 <__func__.2+0x2e8>
bool priv_change_14(){
    8000c7fc:	e406                	sd	ra,8(sp)
    8000c7fe:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c800:	470140ef          	jal	80020c70 <printf>
    8000c804:	4529                	li	a0,10
    8000c806:	2fb130ef          	jal	80020300 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000c80a:	4511                	li	a0,4
    8000c80c:	accf40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c810:	b99f40ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c814:	57fd                	li	a5,-1
    8000c816:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c81a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c81e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c822:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000c826:	4501                	li	a0,0
    8000c828:	ab0f40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000c82c:	0330000f          	fence	rw,rw
    8000c830:	00038417          	auipc	s0,0x38
    8000c834:	7e040413          	addi	s0,s0,2016 # 80045010 <excpt>
    8000c838:	4785                	li	a5,1
    8000c83a:	00039717          	auipc	a4,0x39
    8000c83e:	80073723          	sd	zero,-2034(a4) # 80045048 <excpt+0x38>
    8000c842:	00f41023          	sh	a5,0(s0)
    8000c846:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000c84a:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c84e:	08200593          	li	a1,130
    8000c852:	00019617          	auipc	a2,0x19
    8000c856:	8b660613          	addi	a2,a2,-1866 # 80025108 <__func__.2+0x28a0>
    8000c85a:	00016517          	auipc	a0,0x16
    8000c85e:	30e50513          	addi	a0,a0,782 # 80022b68 <__func__.2+0x300>
    8000c862:	40e140ef          	jal	80020c70 <printf>
    8000c866:	6014                	ld	a3,0(s0)
    8000c868:	f0001737          	lui	a4,0xf0001
    8000c86c:	0712                	slli	a4,a4,0x4
    8000c86e:	478d                	li	a5,3
    8000c870:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c874:	1782                	slli	a5,a5,0x20
    8000c876:	8f75                	and	a4,a4,a3
    8000c878:	10078793          	addi	a5,a5,256
    8000c87c:	00016597          	auipc	a1,0x16
    8000c880:	2c458593          	addi	a1,a1,708 # 80022b40 <__func__.2+0x2d8>
    8000c884:	08f70963          	beq	a4,a5,8000c916 <priv_change_14+0x12c>
    8000c888:	00016517          	auipc	a0,0x16
    8000c88c:	2f850513          	addi	a0,a0,760 # 80022b80 <__func__.2+0x318>
    8000c890:	3e0140ef          	jal	80020c70 <printf>
    8000c894:	00038797          	auipc	a5,0x38
    8000c898:	77d7c783          	lbu	a5,1917(a5) # 80045011 <excpt+0x1>
    8000c89c:	cb81                	beqz	a5,8000c8ac <priv_change_14+0xc2>
    8000c89e:	00038717          	auipc	a4,0x38
    8000c8a2:	77672703          	lw	a4,1910(a4) # 80045014 <excpt+0x4>
    8000c8a6:	478d                	li	a5,3
    8000c8a8:	06f70163          	beq	a4,a5,8000c90a <priv_change_14+0x120>
    8000c8ac:	00016517          	auipc	a0,0x16
    8000c8b0:	2dc50513          	addi	a0,a0,732 # 80022b88 <__func__.2+0x320>
    8000c8b4:	3bc140ef          	jal	80020c70 <printf>
    8000c8b8:	02900513          	li	a0,41
    8000c8bc:	245130ef          	jal	80020300 <putchar>
    8000c8c0:	4529                	li	a0,10
    8000c8c2:	23f130ef          	jal	80020300 <putchar>
    8000c8c6:	6014                	ld	a3,0(s0)
    8000c8c8:	f0001737          	lui	a4,0xf0001
    8000c8cc:	0712                	slli	a4,a4,0x4
    8000c8ce:	478d                	li	a5,3
    8000c8d0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c8d4:	1782                	slli	a5,a5,0x20
    8000c8d6:	8f75                	and	a4,a4,a3
    8000c8d8:	10078793          	addi	a5,a5,256
    8000c8dc:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000c8de:	00016597          	auipc	a1,0x16
    8000c8e2:	26258593          	addi	a1,a1,610 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c8e6:	04f70663          	beq	a4,a5,8000c932 <priv_change_14+0x148>
    TEST_END();
    8000c8ea:	00016517          	auipc	a0,0x16
    8000c8ee:	2fe50513          	addi	a0,a0,766 # 80022be8 <__func__.2+0x380>
    8000c8f2:	37e140ef          	jal	80020c70 <printf>
    8000c8f6:	4511                	li	a0,4
    8000c8f8:	9e0f40ef          	jal	80000ad8 <goto_priv>
    8000c8fc:	aadf40ef          	jal	800013a8 <reset_state>

}
    8000c900:	60a2                	ld	ra,8(sp)
    8000c902:	8522                	mv	a0,s0
    8000c904:	6402                	ld	s0,0(sp)
    8000c906:	0141                	addi	sp,sp,16
    8000c908:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c90a:	00020797          	auipc	a5,0x20
    8000c90e:	bc27a783          	lw	a5,-1086(a5) # 8002c4cc <curr_priv>
    8000c912:	d7dd                	beqz	a5,8000c8c0 <priv_change_14+0xd6>
    8000c914:	bf61                	j	8000c8ac <priv_change_14+0xc2>
    8000c916:	00020797          	auipc	a5,0x20
    8000c91a:	bb67a783          	lw	a5,-1098(a5) # 8002c4cc <curr_priv>
    8000c91e:	00016597          	auipc	a1,0x16
    8000c922:	21258593          	addi	a1,a1,530 # 80022b30 <__func__.2+0x2c8>
    8000c926:	d3ad                	beqz	a5,8000c888 <priv_change_14+0x9e>
    8000c928:	00016597          	auipc	a1,0x16
    8000c92c:	21858593          	addi	a1,a1,536 # 80022b40 <__func__.2+0x2d8>
    8000c930:	bfa1                	j	8000c888 <priv_change_14+0x9e>
    8000c932:	00020797          	auipc	a5,0x20
    8000c936:	b9a7a783          	lw	a5,-1126(a5) # 8002c4cc <curr_priv>
    8000c93a:	fbc5                	bnez	a5,8000c8ea <priv_change_14+0x100>
    8000c93c:	4405                	li	s0,1
    TEST_END();
    8000c93e:	00016597          	auipc	a1,0x16
    8000c942:	1f258593          	addi	a1,a1,498 # 80022b30 <__func__.2+0x2c8>
    8000c946:	b755                	j	8000c8ea <priv_change_14+0x100>

000000008000c948 <priv_change_15>:

bool priv_change_15(){
    8000c948:	1141                	addi	sp,sp,-16
    TEST_START();
    8000c94a:	00015597          	auipc	a1,0x15
    8000c94e:	ece58593          	addi	a1,a1,-306 # 80021818 <__func__.0>
    8000c952:	00016517          	auipc	a0,0x16
    8000c956:	1fe50513          	addi	a0,a0,510 # 80022b50 <__func__.2+0x2e8>
bool priv_change_15(){
    8000c95a:	e406                	sd	ra,8(sp)
    8000c95c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c95e:	312140ef          	jal	80020c70 <printf>
    8000c962:	4529                	li	a0,10
    8000c964:	19d130ef          	jal	80020300 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000c968:	4511                	li	a0,4
    8000c96a:	96ef40ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000c96e:	a3bf40ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c972:	57fd                	li	a5,-1
    8000c974:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c978:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c97c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c980:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000c984:	0330000f          	fence	rw,rw
    8000c988:	00038417          	auipc	s0,0x38
    8000c98c:	68840413          	addi	s0,s0,1672 # 80045010 <excpt>
    8000c990:	4785                	li	a5,1
    8000c992:	00038717          	auipc	a4,0x38
    8000c996:	6a073b23          	sd	zero,1718(a4) # 80045048 <excpt+0x38>
    8000c99a:	00f41023          	sh	a5,0(s0)
    8000c99e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);     
    8000c9a2:	4509                	li	a0,2
    8000c9a4:	934f40ef          	jal	80000ad8 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000c9a8:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c9ac:	08200593          	li	a1,130
    8000c9b0:	00018617          	auipc	a2,0x18
    8000c9b4:	7c860613          	addi	a2,a2,1992 # 80025178 <__func__.2+0x2910>
    8000c9b8:	00016517          	auipc	a0,0x16
    8000c9bc:	1b050513          	addi	a0,a0,432 # 80022b68 <__func__.2+0x300>
    8000c9c0:	2b0140ef          	jal	80020c70 <printf>
    8000c9c4:	6014                	ld	a3,0(s0)
    8000c9c6:	f0001737          	lui	a4,0xf0001
    8000c9ca:	0712                	slli	a4,a4,0x4
    8000c9cc:	478d                	li	a5,3
    8000c9ce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c9d2:	1782                	slli	a5,a5,0x20
    8000c9d4:	8f75                	and	a4,a4,a3
    8000c9d6:	10078793          	addi	a5,a5,256
    8000c9da:	00016597          	auipc	a1,0x16
    8000c9de:	16658593          	addi	a1,a1,358 # 80022b40 <__func__.2+0x2d8>
    8000c9e2:	08f70b63          	beq	a4,a5,8000ca78 <priv_change_15+0x130>
    8000c9e6:	00016517          	auipc	a0,0x16
    8000c9ea:	19a50513          	addi	a0,a0,410 # 80022b80 <__func__.2+0x318>
    8000c9ee:	282140ef          	jal	80020c70 <printf>
    8000c9f2:	00038797          	auipc	a5,0x38
    8000c9f6:	61f7c783          	lbu	a5,1567(a5) # 80045011 <excpt+0x1>
    8000c9fa:	cb81                	beqz	a5,8000ca0a <priv_change_15+0xc2>
    8000c9fc:	00038717          	auipc	a4,0x38
    8000ca00:	61872703          	lw	a4,1560(a4) # 80045014 <excpt+0x4>
    8000ca04:	478d                	li	a5,3
    8000ca06:	06f70163          	beq	a4,a5,8000ca68 <priv_change_15+0x120>
    8000ca0a:	00016517          	auipc	a0,0x16
    8000ca0e:	17e50513          	addi	a0,a0,382 # 80022b88 <__func__.2+0x320>
    8000ca12:	25e140ef          	jal	80020c70 <printf>
    8000ca16:	02900513          	li	a0,41
    8000ca1a:	0e7130ef          	jal	80020300 <putchar>
    8000ca1e:	4529                	li	a0,10
    8000ca20:	0e1130ef          	jal	80020300 <putchar>
    8000ca24:	6014                	ld	a3,0(s0)
    8000ca26:	f0001737          	lui	a4,0xf0001
    8000ca2a:	0712                	slli	a4,a4,0x4
    8000ca2c:	478d                	li	a5,3
    8000ca2e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ca32:	1782                	slli	a5,a5,0x20
    8000ca34:	8f75                	and	a4,a4,a3
    8000ca36:	10078793          	addi	a5,a5,256
    8000ca3a:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000ca3c:	00016597          	auipc	a1,0x16
    8000ca40:	10458593          	addi	a1,a1,260 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ca44:	04f70a63          	beq	a4,a5,8000ca98 <priv_change_15+0x150>
    TEST_END();
    8000ca48:	00016517          	auipc	a0,0x16
    8000ca4c:	1a050513          	addi	a0,a0,416 # 80022be8 <__func__.2+0x380>
    8000ca50:	220140ef          	jal	80020c70 <printf>
    8000ca54:	4511                	li	a0,4
    8000ca56:	882f40ef          	jal	80000ad8 <goto_priv>
    8000ca5a:	94ff40ef          	jal	800013a8 <reset_state>

}
    8000ca5e:	60a2                	ld	ra,8(sp)
    8000ca60:	8522                	mv	a0,s0
    8000ca62:	6402                	ld	s0,0(sp)
    8000ca64:	0141                	addi	sp,sp,16
    8000ca66:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ca68:	00020717          	auipc	a4,0x20
    8000ca6c:	a6472703          	lw	a4,-1436(a4) # 8002c4cc <curr_priv>
    8000ca70:	4789                	li	a5,2
    8000ca72:	f8f71ce3          	bne	a4,a5,8000ca0a <priv_change_15+0xc2>
    8000ca76:	b765                	j	8000ca1e <priv_change_15+0xd6>
    8000ca78:	00020717          	auipc	a4,0x20
    8000ca7c:	a5472703          	lw	a4,-1452(a4) # 8002c4cc <curr_priv>
    8000ca80:	4789                	li	a5,2
    8000ca82:	00016597          	auipc	a1,0x16
    8000ca86:	0ae58593          	addi	a1,a1,174 # 80022b30 <__func__.2+0x2c8>
    8000ca8a:	f4f70ee3          	beq	a4,a5,8000c9e6 <priv_change_15+0x9e>
    8000ca8e:	00016597          	auipc	a1,0x16
    8000ca92:	0b258593          	addi	a1,a1,178 # 80022b40 <__func__.2+0x2d8>
    8000ca96:	bf81                	j	8000c9e6 <priv_change_15+0x9e>
    8000ca98:	00020717          	auipc	a4,0x20
    8000ca9c:	a3472703          	lw	a4,-1484(a4) # 8002c4cc <curr_priv>
    8000caa0:	4789                	li	a5,2
    8000caa2:	faf713e3          	bne	a4,a5,8000ca48 <priv_change_15+0x100>
    8000caa6:	4405                	li	s0,1
    TEST_END();
    8000caa8:	00016597          	auipc	a1,0x16
    8000caac:	08858593          	addi	a1,a1,136 # 80022b30 <__func__.2+0x2c8>
    8000cab0:	bf61                	j	8000ca48 <priv_change_15+0x100>

000000008000cab2 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000cab2:	1101                	addi	sp,sp,-32

    TEST_START();
    8000cab4:	00015597          	auipc	a1,0x15
    8000cab8:	d7458593          	addi	a1,a1,-652 # 80021828 <__func__.1>
    8000cabc:	00016517          	auipc	a0,0x16
    8000cac0:	09450513          	addi	a0,a0,148 # 80022b50 <__func__.2+0x2e8>
bool addr_unaligned() {
    8000cac4:	ec06                	sd	ra,24(sp)
    8000cac6:	e822                	sd	s0,16(sp)
    8000cac8:	e426                	sd	s1,8(sp)
    8000caca:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000cacc:	1a4140ef          	jal	80020c70 <printf>
    8000cad0:	4529                	li	a0,10
    8000cad2:	02f130ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000cad6:	0330000f          	fence	rw,rw
    8000cada:	00038417          	auipc	s0,0x38
    8000cade:	53640413          	addi	s0,s0,1334 # 80045010 <excpt>
    8000cae2:	4485                	li	s1,1
    8000cae4:	00038797          	auipc	a5,0x38
    8000cae8:	5607b223          	sd	zero,1380(a5) # 80045048 <excpt+0x38>
    8000caec:	00941023          	sh	s1,0(s0)
    8000caf0:	0330000f          	fence	rw,rw
    
    
    hspt_init();        
    8000caf4:	aedf30ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000caf8:	450d                	li	a0,3
    8000cafa:	fdff30ef          	jal	80000ad8 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000cafe:	0330000f          	fence	rw,rw
    8000cb02:	00038797          	auipc	a5,0x38
    8000cb06:	5407b323          	sd	zero,1350(a5) # 80045048 <excpt+0x38>
    8000cb0a:	00941023          	sh	s1,0(s0)
    8000cb0e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000cb12:	001007b7          	lui	a5,0x100
    8000cb16:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cb1a:	07b2                	slli	a5,a5,0xc
    8000cb1c:	97a6                	add	a5,a5,s1
    8000cb1e:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000cb22:	08200593          	li	a1,130
    8000cb26:	00018617          	auipc	a2,0x18
    8000cb2a:	6c260613          	addi	a2,a2,1730 # 800251e8 <__func__.2+0x2980>
    8000cb2e:	00016517          	auipc	a0,0x16
    8000cb32:	03a50513          	addi	a0,a0,58 # 80022b68 <__func__.2+0x300>
    8000cb36:	13a140ef          	jal	80020c70 <printf>
    8000cb3a:	00038797          	auipc	a5,0x38
    8000cb3e:	4d77c783          	lbu	a5,1239(a5) # 80045011 <excpt+0x1>
    8000cb42:	00016597          	auipc	a1,0x16
    8000cb46:	fee58593          	addi	a1,a1,-18 # 80022b30 <__func__.2+0x2c8>
    8000cb4a:	c789                	beqz	a5,8000cb54 <addr_unaligned+0xa2>
    8000cb4c:	00016597          	auipc	a1,0x16
    8000cb50:	ff458593          	addi	a1,a1,-12 # 80022b40 <__func__.2+0x2d8>
    8000cb54:	00016517          	auipc	a0,0x16
    8000cb58:	02c50513          	addi	a0,a0,44 # 80022b80 <__func__.2+0x318>
    8000cb5c:	114140ef          	jal	80020c70 <printf>
    8000cb60:	00038797          	auipc	a5,0x38
    8000cb64:	4b17c783          	lbu	a5,1201(a5) # 80045011 <excpt+0x1>
    8000cb68:	52079663          	bnez	a5,8000d094 <addr_unaligned+0x5e2>
    8000cb6c:	4529                	li	a0,10
    8000cb6e:	792130ef          	jal	80020300 <putchar>
    8000cb72:	00038917          	auipc	s2,0x38
    8000cb76:	49f94903          	lbu	s2,1183(s2) # 80045011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000cb7a:	0330000f          	fence	rw,rw
    8000cb7e:	4785                	li	a5,1
    8000cb80:	00038717          	auipc	a4,0x38
    8000cb84:	4c073423          	sd	zero,1224(a4) # 80045048 <excpt+0x38>
    8000cb88:	00f41023          	sh	a5,0(s0)
    8000cb8c:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000cb90:	001007b7          	lui	a5,0x100
    8000cb94:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cb98:	07b2                	slli	a5,a5,0xc
    8000cb9a:	0785                	addi	a5,a5,1
    8000cb9c:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000cba0:	08200593          	li	a1,130
    8000cba4:	00018617          	auipc	a2,0x18
    8000cba8:	67460613          	addi	a2,a2,1652 # 80025218 <__func__.2+0x29b0>
    8000cbac:	00016517          	auipc	a0,0x16
    8000cbb0:	fbc50513          	addi	a0,a0,-68 # 80022b68 <__func__.2+0x300>
    8000cbb4:	0bc140ef          	jal	80020c70 <printf>
    8000cbb8:	00038797          	auipc	a5,0x38
    8000cbbc:	4597c783          	lbu	a5,1113(a5) # 80045011 <excpt+0x1>
    8000cbc0:	00016597          	auipc	a1,0x16
    8000cbc4:	f8058593          	addi	a1,a1,-128 # 80022b40 <__func__.2+0x2d8>
    8000cbc8:	cf89                	beqz	a5,8000cbe2 <addr_unaligned+0x130>
    8000cbca:	6418                	ld	a4,8(s0)
    8000cbcc:	4791                	li	a5,4
    8000cbce:	00016597          	auipc	a1,0x16
    8000cbd2:	f6258593          	addi	a1,a1,-158 # 80022b30 <__func__.2+0x2c8>
    8000cbd6:	00f70663          	beq	a4,a5,8000cbe2 <addr_unaligned+0x130>
    8000cbda:	00016597          	auipc	a1,0x16
    8000cbde:	f6658593          	addi	a1,a1,-154 # 80022b40 <__func__.2+0x2d8>
    8000cbe2:	00016517          	auipc	a0,0x16
    8000cbe6:	f9e50513          	addi	a0,a0,-98 # 80022b80 <__func__.2+0x318>
    8000cbea:	086140ef          	jal	80020c70 <printf>
    8000cbee:	00038797          	auipc	a5,0x38
    8000cbf2:	4237c783          	lbu	a5,1059(a5) # 80045011 <excpt+0x1>
    8000cbf6:	c789                	beqz	a5,8000cc00 <addr_unaligned+0x14e>
    8000cbf8:	6418                	ld	a4,8(s0)
    8000cbfa:	4791                	li	a5,4
    8000cbfc:	00f70c63          	beq	a4,a5,8000cc14 <addr_unaligned+0x162>
    8000cc00:	00016517          	auipc	a0,0x16
    8000cc04:	f8850513          	addi	a0,a0,-120 # 80022b88 <__func__.2+0x320>
    8000cc08:	068140ef          	jal	80020c70 <printf>
    8000cc0c:	02900513          	li	a0,41
    8000cc10:	6f0130ef          	jal	80020300 <putchar>
    8000cc14:	4529                	li	a0,10
    8000cc16:	6ea130ef          	jal	80020300 <putchar>
    8000cc1a:	4481                	li	s1,0
    8000cc1c:	00091863          	bnez	s2,8000cc2c <addr_unaligned+0x17a>
    8000cc20:	00038797          	auipc	a5,0x38
    8000cc24:	3f17c783          	lbu	a5,1009(a5) # 80045011 <excpt+0x1>
    8000cc28:	44079263          	bnez	a5,8000d06c <addr_unaligned+0x5ba>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000cc2c:	0330000f          	fence	rw,rw
    8000cc30:	4785                	li	a5,1
    8000cc32:	00038717          	auipc	a4,0x38
    8000cc36:	40073b23          	sd	zero,1046(a4) # 80045048 <excpt+0x38>
    8000cc3a:	00f41023          	sh	a5,0(s0)
    8000cc3e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000cc42:	001007b7          	lui	a5,0x100
    8000cc46:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cc4a:	07b2                	slli	a5,a5,0xc
    8000cc4c:	0785                	addi	a5,a5,1
    8000cc4e:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000cc52:	08200593          	li	a1,130
    8000cc56:	00018617          	auipc	a2,0x18
    8000cc5a:	5fa60613          	addi	a2,a2,1530 # 80025250 <__func__.2+0x29e8>
    8000cc5e:	00016517          	auipc	a0,0x16
    8000cc62:	f0a50513          	addi	a0,a0,-246 # 80022b68 <__func__.2+0x300>
    8000cc66:	00a140ef          	jal	80020c70 <printf>
    8000cc6a:	00038797          	auipc	a5,0x38
    8000cc6e:	3a77c783          	lbu	a5,935(a5) # 80045011 <excpt+0x1>
    8000cc72:	00016597          	auipc	a1,0x16
    8000cc76:	ece58593          	addi	a1,a1,-306 # 80022b40 <__func__.2+0x2d8>
    8000cc7a:	cf89                	beqz	a5,8000cc94 <addr_unaligned+0x1e2>
    8000cc7c:	6418                	ld	a4,8(s0)
    8000cc7e:	4791                	li	a5,4
    8000cc80:	00016597          	auipc	a1,0x16
    8000cc84:	eb058593          	addi	a1,a1,-336 # 80022b30 <__func__.2+0x2c8>
    8000cc88:	00f70663          	beq	a4,a5,8000cc94 <addr_unaligned+0x1e2>
    8000cc8c:	00016597          	auipc	a1,0x16
    8000cc90:	eb458593          	addi	a1,a1,-332 # 80022b40 <__func__.2+0x2d8>
    8000cc94:	00016517          	auipc	a0,0x16
    8000cc98:	eec50513          	addi	a0,a0,-276 # 80022b80 <__func__.2+0x318>
    8000cc9c:	7d5130ef          	jal	80020c70 <printf>
    8000cca0:	00038797          	auipc	a5,0x38
    8000cca4:	3717c783          	lbu	a5,881(a5) # 80045011 <excpt+0x1>
    8000cca8:	c789                	beqz	a5,8000ccb2 <addr_unaligned+0x200>
    8000ccaa:	6418                	ld	a4,8(s0)
    8000ccac:	4791                	li	a5,4
    8000ccae:	00f70c63          	beq	a4,a5,8000ccc6 <addr_unaligned+0x214>
    8000ccb2:	00016517          	auipc	a0,0x16
    8000ccb6:	ed650513          	addi	a0,a0,-298 # 80022b88 <__func__.2+0x320>
    8000ccba:	7b7130ef          	jal	80020c70 <printf>
    8000ccbe:	02900513          	li	a0,41
    8000ccc2:	63e130ef          	jal	80020300 <putchar>
    8000ccc6:	4529                	li	a0,10
    8000ccc8:	638130ef          	jal	80020300 <putchar>
    8000cccc:	c881                	beqz	s1,8000ccdc <addr_unaligned+0x22a>
    8000ccce:	00038797          	auipc	a5,0x38
    8000ccd2:	3437c783          	lbu	a5,835(a5) # 80045011 <excpt+0x1>
    8000ccd6:	4481                	li	s1,0
    8000ccd8:	38079563          	bnez	a5,8000d062 <addr_unaligned+0x5b0>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000ccdc:	0330000f          	fence	rw,rw
    8000cce0:	4785                	li	a5,1
    8000cce2:	00038717          	auipc	a4,0x38
    8000cce6:	36073323          	sd	zero,870(a4) # 80045048 <excpt+0x38>
    8000ccea:	00f41023          	sh	a5,0(s0)
    8000ccee:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000ccf2:	00100937          	lui	s2,0x100
    8000ccf6:	04b90913          	addi	s2,s2,75 # 10004b <STACK_SIZE+0x4b>
    8000ccfa:	0932                	slli	s2,s2,0xc
    8000ccfc:	993e                	add	s2,s2,a5
    8000ccfe:	00093903          	ld	s2,0(s2)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000cd02:	08200593          	li	a1,130
    8000cd06:	00018617          	auipc	a2,0x18
    8000cd0a:	58260613          	addi	a2,a2,1410 # 80025288 <__func__.2+0x2a20>
    8000cd0e:	00016517          	auipc	a0,0x16
    8000cd12:	e5a50513          	addi	a0,a0,-422 # 80022b68 <__func__.2+0x300>
    8000cd16:	75b130ef          	jal	80020c70 <printf>
    8000cd1a:	00038797          	auipc	a5,0x38
    8000cd1e:	2f77c783          	lbu	a5,759(a5) # 80045011 <excpt+0x1>
    8000cd22:	00016597          	auipc	a1,0x16
    8000cd26:	e1e58593          	addi	a1,a1,-482 # 80022b40 <__func__.2+0x2d8>
    8000cd2a:	cf89                	beqz	a5,8000cd44 <addr_unaligned+0x292>
    8000cd2c:	6418                	ld	a4,8(s0)
    8000cd2e:	4791                	li	a5,4
    8000cd30:	00016597          	auipc	a1,0x16
    8000cd34:	e0058593          	addi	a1,a1,-512 # 80022b30 <__func__.2+0x2c8>
    8000cd38:	00f70663          	beq	a4,a5,8000cd44 <addr_unaligned+0x292>
    8000cd3c:	00016597          	auipc	a1,0x16
    8000cd40:	e0458593          	addi	a1,a1,-508 # 80022b40 <__func__.2+0x2d8>
    8000cd44:	00016517          	auipc	a0,0x16
    8000cd48:	e3c50513          	addi	a0,a0,-452 # 80022b80 <__func__.2+0x318>
    8000cd4c:	725130ef          	jal	80020c70 <printf>
    8000cd50:	00038797          	auipc	a5,0x38
    8000cd54:	2c17c783          	lbu	a5,705(a5) # 80045011 <excpt+0x1>
    8000cd58:	c789                	beqz	a5,8000cd62 <addr_unaligned+0x2b0>
    8000cd5a:	6418                	ld	a4,8(s0)
    8000cd5c:	4791                	li	a5,4
    8000cd5e:	00f70c63          	beq	a4,a5,8000cd76 <addr_unaligned+0x2c4>
    8000cd62:	00016517          	auipc	a0,0x16
    8000cd66:	e2650513          	addi	a0,a0,-474 # 80022b88 <__func__.2+0x320>
    8000cd6a:	707130ef          	jal	80020c70 <printf>
    8000cd6e:	02900513          	li	a0,41
    8000cd72:	58e130ef          	jal	80020300 <putchar>
    8000cd76:	4529                	li	a0,10
    8000cd78:	588130ef          	jal	80020300 <putchar>
    8000cd7c:	c881                	beqz	s1,8000cd8c <addr_unaligned+0x2da>
    8000cd7e:	00038797          	auipc	a5,0x38
    8000cd82:	2937c783          	lbu	a5,659(a5) # 80045011 <excpt+0x1>
    8000cd86:	4481                	li	s1,0
    8000cd88:	30079163          	bnez	a5,8000d08a <addr_unaligned+0x5d8>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000cd8c:	0330000f          	fence	rw,rw
    8000cd90:	4785                	li	a5,1
    8000cd92:	00038717          	auipc	a4,0x38
    8000cd96:	2a073b23          	sd	zero,694(a4) # 80045048 <excpt+0x38>
    8000cd9a:	00f41023          	sh	a5,0(s0)
    8000cd9e:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000cda2:	001007b7          	lui	a5,0x100
    8000cda6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cdaa:	07b2                	slli	a5,a5,0xc
    8000cdac:	0785                	addi	a5,a5,1
    8000cdae:	01278023          	sb	s2,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000cdb2:	08200593          	li	a1,130
    8000cdb6:	00018617          	auipc	a2,0x18
    8000cdba:	50a60613          	addi	a2,a2,1290 # 800252c0 <__func__.2+0x2a58>
    8000cdbe:	00016517          	auipc	a0,0x16
    8000cdc2:	daa50513          	addi	a0,a0,-598 # 80022b68 <__func__.2+0x300>
    8000cdc6:	6ab130ef          	jal	80020c70 <printf>
    8000cdca:	00038797          	auipc	a5,0x38
    8000cdce:	2477c783          	lbu	a5,583(a5) # 80045011 <excpt+0x1>
    8000cdd2:	00016597          	auipc	a1,0x16
    8000cdd6:	d6e58593          	addi	a1,a1,-658 # 80022b40 <__func__.2+0x2d8>
    8000cdda:	e789                	bnez	a5,8000cde4 <addr_unaligned+0x332>
    8000cddc:	00016597          	auipc	a1,0x16
    8000cde0:	d5458593          	addi	a1,a1,-684 # 80022b30 <__func__.2+0x2c8>
    8000cde4:	00016517          	auipc	a0,0x16
    8000cde8:	d9c50513          	addi	a0,a0,-612 # 80022b80 <__func__.2+0x318>
    8000cdec:	685130ef          	jal	80020c70 <printf>
    8000cdf0:	00038797          	auipc	a5,0x38
    8000cdf4:	2217c783          	lbu	a5,545(a5) # 80045011 <excpt+0x1>
    8000cdf8:	2a079963          	bnez	a5,8000d0aa <addr_unaligned+0x5f8>
    8000cdfc:	4529                	li	a0,10
    8000cdfe:	502130ef          	jal	80020300 <putchar>
    8000ce02:	c499                	beqz	s1,8000ce10 <addr_unaligned+0x35e>
    8000ce04:	00038497          	auipc	s1,0x38
    8000ce08:	20d4c483          	lbu	s1,525(s1) # 80045011 <excpt+0x1>
    8000ce0c:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000ce10:	0330000f          	fence	rw,rw
    8000ce14:	4785                	li	a5,1
    8000ce16:	00038717          	auipc	a4,0x38
    8000ce1a:	22073923          	sd	zero,562(a4) # 80045048 <excpt+0x38>
    8000ce1e:	00f41023          	sh	a5,0(s0)
    8000ce22:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000ce26:	001007b7          	lui	a5,0x100
    8000ce2a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000ce2e:	07b2                	slli	a5,a5,0xc
    8000ce30:	0785                	addi	a5,a5,1
    8000ce32:	01279023          	sh	s2,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000ce36:	08200593          	li	a1,130
    8000ce3a:	00018617          	auipc	a2,0x18
    8000ce3e:	4b660613          	addi	a2,a2,1206 # 800252f0 <__func__.2+0x2a88>
    8000ce42:	00016517          	auipc	a0,0x16
    8000ce46:	d2650513          	addi	a0,a0,-730 # 80022b68 <__func__.2+0x300>
    8000ce4a:	627130ef          	jal	80020c70 <printf>
    8000ce4e:	00038797          	auipc	a5,0x38
    8000ce52:	1c37c783          	lbu	a5,451(a5) # 80045011 <excpt+0x1>
    8000ce56:	00016597          	auipc	a1,0x16
    8000ce5a:	cea58593          	addi	a1,a1,-790 # 80022b40 <__func__.2+0x2d8>
    8000ce5e:	cf89                	beqz	a5,8000ce78 <addr_unaligned+0x3c6>
    8000ce60:	6418                	ld	a4,8(s0)
    8000ce62:	4799                	li	a5,6
    8000ce64:	00016597          	auipc	a1,0x16
    8000ce68:	ccc58593          	addi	a1,a1,-820 # 80022b30 <__func__.2+0x2c8>
    8000ce6c:	00f70663          	beq	a4,a5,8000ce78 <addr_unaligned+0x3c6>
    8000ce70:	00016597          	auipc	a1,0x16
    8000ce74:	cd058593          	addi	a1,a1,-816 # 80022b40 <__func__.2+0x2d8>
    8000ce78:	00016517          	auipc	a0,0x16
    8000ce7c:	d0850513          	addi	a0,a0,-760 # 80022b80 <__func__.2+0x318>
    8000ce80:	5f1130ef          	jal	80020c70 <printf>
    8000ce84:	00038797          	auipc	a5,0x38
    8000ce88:	18d7c783          	lbu	a5,397(a5) # 80045011 <excpt+0x1>
    8000ce8c:	c789                	beqz	a5,8000ce96 <addr_unaligned+0x3e4>
    8000ce8e:	6418                	ld	a4,8(s0)
    8000ce90:	4799                	li	a5,6
    8000ce92:	00f70c63          	beq	a4,a5,8000ceaa <addr_unaligned+0x3f8>
    8000ce96:	00016517          	auipc	a0,0x16
    8000ce9a:	cf250513          	addi	a0,a0,-782 # 80022b88 <__func__.2+0x320>
    8000ce9e:	5d3130ef          	jal	80020c70 <printf>
    8000cea2:	02900513          	li	a0,41
    8000cea6:	45a130ef          	jal	80020300 <putchar>
    8000ceaa:	4529                	li	a0,10
    8000ceac:	454130ef          	jal	80020300 <putchar>
    8000ceb0:	c881                	beqz	s1,8000cec0 <addr_unaligned+0x40e>
    8000ceb2:	00038797          	auipc	a5,0x38
    8000ceb6:	15f7c783          	lbu	a5,351(a5) # 80045011 <excpt+0x1>
    8000ceba:	4481                	li	s1,0
    8000cebc:	1c079263          	bnez	a5,8000d080 <addr_unaligned+0x5ce>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000cec0:	0330000f          	fence	rw,rw
    8000cec4:	4785                	li	a5,1
    8000cec6:	00038717          	auipc	a4,0x38
    8000ceca:	18073123          	sd	zero,386(a4) # 80045048 <excpt+0x38>
    8000cece:	00f41023          	sh	a5,0(s0)
    8000ced2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000ced6:	001007b7          	lui	a5,0x100
    8000ceda:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cede:	07b2                	slli	a5,a5,0xc
    8000cee0:	0785                	addi	a5,a5,1
    8000cee2:	0127a023          	sw	s2,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000cee6:	08200593          	li	a1,130
    8000ceea:	00018617          	auipc	a2,0x18
    8000ceee:	43e60613          	addi	a2,a2,1086 # 80025328 <__func__.2+0x2ac0>
    8000cef2:	00016517          	auipc	a0,0x16
    8000cef6:	c7650513          	addi	a0,a0,-906 # 80022b68 <__func__.2+0x300>
    8000cefa:	577130ef          	jal	80020c70 <printf>
    8000cefe:	00038797          	auipc	a5,0x38
    8000cf02:	1137c783          	lbu	a5,275(a5) # 80045011 <excpt+0x1>
    8000cf06:	00016597          	auipc	a1,0x16
    8000cf0a:	c3a58593          	addi	a1,a1,-966 # 80022b40 <__func__.2+0x2d8>
    8000cf0e:	cf89                	beqz	a5,8000cf28 <addr_unaligned+0x476>
    8000cf10:	6418                	ld	a4,8(s0)
    8000cf12:	4799                	li	a5,6
    8000cf14:	00016597          	auipc	a1,0x16
    8000cf18:	c1c58593          	addi	a1,a1,-996 # 80022b30 <__func__.2+0x2c8>
    8000cf1c:	00f70663          	beq	a4,a5,8000cf28 <addr_unaligned+0x476>
    8000cf20:	00016597          	auipc	a1,0x16
    8000cf24:	c2058593          	addi	a1,a1,-992 # 80022b40 <__func__.2+0x2d8>
    8000cf28:	00016517          	auipc	a0,0x16
    8000cf2c:	c5850513          	addi	a0,a0,-936 # 80022b80 <__func__.2+0x318>
    8000cf30:	541130ef          	jal	80020c70 <printf>
    8000cf34:	00038797          	auipc	a5,0x38
    8000cf38:	0dd7c783          	lbu	a5,221(a5) # 80045011 <excpt+0x1>
    8000cf3c:	c789                	beqz	a5,8000cf46 <addr_unaligned+0x494>
    8000cf3e:	6418                	ld	a4,8(s0)
    8000cf40:	4799                	li	a5,6
    8000cf42:	00f70c63          	beq	a4,a5,8000cf5a <addr_unaligned+0x4a8>
    8000cf46:	00016517          	auipc	a0,0x16
    8000cf4a:	c4250513          	addi	a0,a0,-958 # 80022b88 <__func__.2+0x320>
    8000cf4e:	523130ef          	jal	80020c70 <printf>
    8000cf52:	02900513          	li	a0,41
    8000cf56:	3aa130ef          	jal	80020300 <putchar>
    8000cf5a:	4529                	li	a0,10
    8000cf5c:	3a4130ef          	jal	80020300 <putchar>
    8000cf60:	c881                	beqz	s1,8000cf70 <addr_unaligned+0x4be>
    8000cf62:	00038797          	auipc	a5,0x38
    8000cf66:	0af7c783          	lbu	a5,175(a5) # 80045011 <excpt+0x1>
    8000cf6a:	4481                	li	s1,0
    8000cf6c:	10079563          	bnez	a5,8000d076 <addr_unaligned+0x5c4>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000cf70:	0330000f          	fence	rw,rw
    8000cf74:	4785                	li	a5,1
    8000cf76:	00038717          	auipc	a4,0x38
    8000cf7a:	0c073923          	sd	zero,210(a4) # 80045048 <excpt+0x38>
    8000cf7e:	00f41023          	sh	a5,0(s0)
    8000cf82:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000cf86:	001007b7          	lui	a5,0x100
    8000cf8a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000cf8e:	07b2                	slli	a5,a5,0xc
    8000cf90:	0785                	addi	a5,a5,1
    8000cf92:	0127b023          	sd	s2,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000cf96:	08200593          	li	a1,130
    8000cf9a:	00018617          	auipc	a2,0x18
    8000cf9e:	3c660613          	addi	a2,a2,966 # 80025360 <__func__.2+0x2af8>
    8000cfa2:	00016517          	auipc	a0,0x16
    8000cfa6:	bc650513          	addi	a0,a0,-1082 # 80022b68 <__func__.2+0x300>
    8000cfaa:	4c7130ef          	jal	80020c70 <printf>
    8000cfae:	00038797          	auipc	a5,0x38
    8000cfb2:	0637c783          	lbu	a5,99(a5) # 80045011 <excpt+0x1>
    8000cfb6:	00016597          	auipc	a1,0x16
    8000cfba:	b8a58593          	addi	a1,a1,-1142 # 80022b40 <__func__.2+0x2d8>
    8000cfbe:	cf89                	beqz	a5,8000cfd8 <addr_unaligned+0x526>
    8000cfc0:	6418                	ld	a4,8(s0)
    8000cfc2:	4799                	li	a5,6
    8000cfc4:	00016597          	auipc	a1,0x16
    8000cfc8:	b6c58593          	addi	a1,a1,-1172 # 80022b30 <__func__.2+0x2c8>
    8000cfcc:	00f70663          	beq	a4,a5,8000cfd8 <addr_unaligned+0x526>
    8000cfd0:	00016597          	auipc	a1,0x16
    8000cfd4:	b7058593          	addi	a1,a1,-1168 # 80022b40 <__func__.2+0x2d8>
    8000cfd8:	00016517          	auipc	a0,0x16
    8000cfdc:	ba850513          	addi	a0,a0,-1112 # 80022b80 <__func__.2+0x318>
    8000cfe0:	491130ef          	jal	80020c70 <printf>
    8000cfe4:	00038797          	auipc	a5,0x38
    8000cfe8:	02d7c783          	lbu	a5,45(a5) # 80045011 <excpt+0x1>
    8000cfec:	c789                	beqz	a5,8000cff6 <addr_unaligned+0x544>
    8000cfee:	6418                	ld	a4,8(s0)
    8000cff0:	4799                	li	a5,6
    8000cff2:	00f70c63          	beq	a4,a5,8000d00a <addr_unaligned+0x558>
    8000cff6:	00016517          	auipc	a0,0x16
    8000cffa:	b9250513          	addi	a0,a0,-1134 # 80022b88 <__func__.2+0x320>
    8000cffe:	473130ef          	jal	80020c70 <printf>
    8000d002:	02900513          	li	a0,41
    8000d006:	2fa130ef          	jal	80020300 <putchar>
    8000d00a:	4529                	li	a0,10
    8000d00c:	2f4130ef          	jal	80020300 <putchar>
    8000d010:	c095                	beqz	s1,8000d034 <addr_unaligned+0x582>
    8000d012:	00038497          	auipc	s1,0x38
    8000d016:	fff4c483          	lbu	s1,-1(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000d01a:	00016597          	auipc	a1,0x16
    8000d01e:	b2658593          	addi	a1,a1,-1242 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000d022:	cc91                	beqz	s1,8000d03e <addr_unaligned+0x58c>
    8000d024:	6418                	ld	a4,8(s0)
    8000d026:	4799                	li	a5,6
    TEST_END();
    8000d028:	00016597          	auipc	a1,0x16
    8000d02c:	b0858593          	addi	a1,a1,-1272 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000d030:	00f70763          	beq	a4,a5,8000d03e <addr_unaligned+0x58c>
    8000d034:	4481                	li	s1,0
    TEST_END();
    8000d036:	00016597          	auipc	a1,0x16
    8000d03a:	b0a58593          	addi	a1,a1,-1270 # 80022b40 <__func__.2+0x2d8>
    8000d03e:	00016517          	auipc	a0,0x16
    8000d042:	baa50513          	addi	a0,a0,-1110 # 80022be8 <__func__.2+0x380>
    8000d046:	42b130ef          	jal	80020c70 <printf>
    8000d04a:	4511                	li	a0,4
    8000d04c:	a8df30ef          	jal	80000ad8 <goto_priv>
    8000d050:	b58f40ef          	jal	800013a8 <reset_state>

    8000d054:	60e2                	ld	ra,24(sp)
    8000d056:	6442                	ld	s0,16(sp)
    8000d058:	6902                	ld	s2,0(sp)
    8000d05a:	8526                	mv	a0,s1
    8000d05c:	64a2                	ld	s1,8(sp)
    8000d05e:	6105                	addi	sp,sp,32
    8000d060:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000d062:	6404                	ld	s1,8(s0)
    8000d064:	14f1                	addi	s1,s1,-4
    8000d066:	0014b493          	seqz	s1,s1
    8000d06a:	b98d                	j	8000ccdc <addr_unaligned+0x22a>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000d06c:	6404                	ld	s1,8(s0)
    8000d06e:	14f1                	addi	s1,s1,-4
    8000d070:	0014b493          	seqz	s1,s1
    8000d074:	be65                	j	8000cc2c <addr_unaligned+0x17a>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000d076:	6404                	ld	s1,8(s0)
    8000d078:	14e9                	addi	s1,s1,-6
    8000d07a:	0014b493          	seqz	s1,s1
    8000d07e:	bdcd                	j	8000cf70 <addr_unaligned+0x4be>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000d080:	6404                	ld	s1,8(s0)
    8000d082:	14e9                	addi	s1,s1,-6
    8000d084:	0014b493          	seqz	s1,s1
    8000d088:	bd25                	j	8000cec0 <addr_unaligned+0x40e>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000d08a:	6404                	ld	s1,8(s0)
    8000d08c:	14f1                	addi	s1,s1,-4
    8000d08e:	0014b493          	seqz	s1,s1
    8000d092:	b9ed                	j	8000cd8c <addr_unaligned+0x2da>
    TEST_ASSERT("load byte address is not aligned successful",         
    8000d094:	00016517          	auipc	a0,0x16
    8000d098:	af450513          	addi	a0,a0,-1292 # 80022b88 <__func__.2+0x320>
    8000d09c:	3d5130ef          	jal	80020c70 <printf>
    8000d0a0:	02900513          	li	a0,41
    8000d0a4:	25c130ef          	jal	80020300 <putchar>
    8000d0a8:	b4d1                	j	8000cb6c <addr_unaligned+0xba>
    TEST_ASSERT("store byte address is not aligned successful",         
    8000d0aa:	00016517          	auipc	a0,0x16
    8000d0ae:	ade50513          	addi	a0,a0,-1314 # 80022b88 <__func__.2+0x320>
    8000d0b2:	3bf130ef          	jal	80020c70 <printf>
    8000d0b6:	02900513          	li	a0,41
    8000d0ba:	246130ef          	jal	80020300 <putchar>
    8000d0be:	bb3d                	j	8000cdfc <addr_unaligned+0x34a>

000000008000d0c0 <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8000d0c0:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d0c2:	00014597          	auipc	a1,0x14
    8000d0c6:	77658593          	addi	a1,a1,1910 # 80021838 <__func__.13>
    8000d0ca:	00016517          	auipc	a0,0x16
    8000d0ce:	a8650513          	addi	a0,a0,-1402 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_1() {
    8000d0d2:	ec06                	sd	ra,24(sp)
    8000d0d4:	e822                	sd	s0,16(sp)
    8000d0d6:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d0d8:	399130ef          	jal	80020c70 <printf>
    8000d0dc:	4529                	li	a0,10
    8000d0de:	222130ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000d0e2:	0330000f          	fence	rw,rw
    8000d0e6:	00038417          	auipc	s0,0x38
    8000d0ea:	f2a40413          	addi	s0,s0,-214 # 80045010 <excpt>
    8000d0ee:	4785                	li	a5,1
    8000d0f0:	00038717          	auipc	a4,0x38
    8000d0f4:	f4073c23          	sd	zero,-168(a4) # 80045048 <excpt+0x38>
    8000d0f8:	00f41023          	sh	a5,0(s0)
    8000d0fc:	0330000f          	fence	rw,rw
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_ILI
    // ); 

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    8000d100:	4511                	li	a0,4
    8000d102:	9d7f30ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8000d106:	6785                	lui	a5,0x1
    8000d108:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8000d10a:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000d10e:	08200593          	li	a1,130
    8000d112:	00018617          	auipc	a2,0x18
    8000d116:	28e60613          	addi	a2,a2,654 # 800253a0 <__func__.2+0x2b38>
    8000d11a:	00016517          	auipc	a0,0x16
    8000d11e:	a4e50513          	addi	a0,a0,-1458 # 80022b68 <__func__.2+0x300>
    8000d122:	34f130ef          	jal	80020c70 <printf>
    8000d126:	00038797          	auipc	a5,0x38
    8000d12a:	eeb7c783          	lbu	a5,-277(a5) # 80045011 <excpt+0x1>
    8000d12e:	00016597          	auipc	a1,0x16
    8000d132:	a1258593          	addi	a1,a1,-1518 # 80022b40 <__func__.2+0x2d8>
    8000d136:	cf89                	beqz	a5,8000d150 <illegal_except_1+0x90>
    8000d138:	6418                	ld	a4,8(s0)
    8000d13a:	4789                	li	a5,2
    8000d13c:	00016597          	auipc	a1,0x16
    8000d140:	9f458593          	addi	a1,a1,-1548 # 80022b30 <__func__.2+0x2c8>
    8000d144:	00f70663          	beq	a4,a5,8000d150 <illegal_except_1+0x90>
    8000d148:	00016597          	auipc	a1,0x16
    8000d14c:	9f858593          	addi	a1,a1,-1544 # 80022b40 <__func__.2+0x2d8>
    8000d150:	00016517          	auipc	a0,0x16
    8000d154:	a3050513          	addi	a0,a0,-1488 # 80022b80 <__func__.2+0x318>
    8000d158:	319130ef          	jal	80020c70 <printf>
    8000d15c:	00038797          	auipc	a5,0x38
    8000d160:	eb57c783          	lbu	a5,-331(a5) # 80045011 <excpt+0x1>
    8000d164:	c789                	beqz	a5,8000d16e <illegal_except_1+0xae>
    8000d166:	6418                	ld	a4,8(s0)
    8000d168:	4789                	li	a5,2
    8000d16a:	00f70c63          	beq	a4,a5,8000d182 <illegal_except_1+0xc2>
    8000d16e:	00016517          	auipc	a0,0x16
    8000d172:	a1a50513          	addi	a0,a0,-1510 # 80022b88 <__func__.2+0x320>
    8000d176:	2fb130ef          	jal	80020c70 <printf>
    8000d17a:	02900513          	li	a0,41
    8000d17e:	182130ef          	jal	80020300 <putchar>
    8000d182:	4529                	li	a0,10
    8000d184:	17c130ef          	jal	80020300 <putchar>
    8000d188:	00038797          	auipc	a5,0x38
    8000d18c:	e897c783          	lbu	a5,-375(a5) # 80045011 <excpt+0x1>
    8000d190:	4481                	li	s1,0
    8000d192:	c789                	beqz	a5,8000d19c <illegal_except_1+0xdc>
    8000d194:	6404                	ld	s1,8(s0)
    8000d196:	14f9                	addi	s1,s1,-2
    8000d198:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    8000d19c:	450d                	li	a0,3
    8000d19e:	93bf30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d1a2:	0330000f          	fence	rw,rw
    8000d1a6:	4785                	li	a5,1
    8000d1a8:	00038717          	auipc	a4,0x38
    8000d1ac:	ea073023          	sd	zero,-352(a4) # 80045048 <excpt+0x38>
    8000d1b0:	00f41023          	sh	a5,0(s0)
    8000d1b4:	0330000f          	fence	rw,rw
    CSRR(CSR_MIE);
    8000d1b8:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000d1bc:	08200593          	li	a1,130
    8000d1c0:	00018617          	auipc	a2,0x18
    8000d1c4:	22860613          	addi	a2,a2,552 # 800253e8 <__func__.2+0x2b80>
    8000d1c8:	00016517          	auipc	a0,0x16
    8000d1cc:	9a050513          	addi	a0,a0,-1632 # 80022b68 <__func__.2+0x300>
    8000d1d0:	2a1130ef          	jal	80020c70 <printf>
    8000d1d4:	00038797          	auipc	a5,0x38
    8000d1d8:	e3d7c783          	lbu	a5,-451(a5) # 80045011 <excpt+0x1>
    8000d1dc:	00016597          	auipc	a1,0x16
    8000d1e0:	96458593          	addi	a1,a1,-1692 # 80022b40 <__func__.2+0x2d8>
    8000d1e4:	cf89                	beqz	a5,8000d1fe <illegal_except_1+0x13e>
    8000d1e6:	6418                	ld	a4,8(s0)
    8000d1e8:	4789                	li	a5,2
    8000d1ea:	00016597          	auipc	a1,0x16
    8000d1ee:	94658593          	addi	a1,a1,-1722 # 80022b30 <__func__.2+0x2c8>
    8000d1f2:	00f70663          	beq	a4,a5,8000d1fe <illegal_except_1+0x13e>
    8000d1f6:	00016597          	auipc	a1,0x16
    8000d1fa:	94a58593          	addi	a1,a1,-1718 # 80022b40 <__func__.2+0x2d8>
    8000d1fe:	00016517          	auipc	a0,0x16
    8000d202:	98250513          	addi	a0,a0,-1662 # 80022b80 <__func__.2+0x318>
    8000d206:	26b130ef          	jal	80020c70 <printf>
    8000d20a:	00038797          	auipc	a5,0x38
    8000d20e:	e077c783          	lbu	a5,-505(a5) # 80045011 <excpt+0x1>
    8000d212:	c789                	beqz	a5,8000d21c <illegal_except_1+0x15c>
    8000d214:	6418                	ld	a4,8(s0)
    8000d216:	4789                	li	a5,2
    8000d218:	00f70c63          	beq	a4,a5,8000d230 <illegal_except_1+0x170>
    8000d21c:	00016517          	auipc	a0,0x16
    8000d220:	96c50513          	addi	a0,a0,-1684 # 80022b88 <__func__.2+0x320>
    8000d224:	24d130ef          	jal	80020c70 <printf>
    8000d228:	02900513          	li	a0,41
    8000d22c:	0d4130ef          	jal	80020300 <putchar>
    8000d230:	4529                	li	a0,10
    8000d232:	0ce130ef          	jal	80020300 <putchar>
    8000d236:	c095                	beqz	s1,8000d25a <illegal_except_1+0x19a>
    8000d238:	00038497          	auipc	s1,0x38
    8000d23c:	dd94c483          	lbu	s1,-551(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d240:	00016597          	auipc	a1,0x16
    8000d244:	90058593          	addi	a1,a1,-1792 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000d248:	cc91                	beqz	s1,8000d264 <illegal_except_1+0x1a4>
    8000d24a:	6418                	ld	a4,8(s0)
    8000d24c:	4789                	li	a5,2
    TEST_END();
    8000d24e:	00016597          	auipc	a1,0x16
    8000d252:	8e258593          	addi	a1,a1,-1822 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000d256:	00f70763          	beq	a4,a5,8000d264 <illegal_except_1+0x1a4>
    8000d25a:	4481                	li	s1,0
    TEST_END();
    8000d25c:	00016597          	auipc	a1,0x16
    8000d260:	8e458593          	addi	a1,a1,-1820 # 80022b40 <__func__.2+0x2d8>
    8000d264:	00016517          	auipc	a0,0x16
    8000d268:	98450513          	addi	a0,a0,-1660 # 80022be8 <__func__.2+0x380>
    8000d26c:	205130ef          	jal	80020c70 <printf>
    8000d270:	4511                	li	a0,4
    8000d272:	867f30ef          	jal	80000ad8 <goto_priv>
    8000d276:	932f40ef          	jal	800013a8 <reset_state>

}
    8000d27a:	60e2                	ld	ra,24(sp)
    8000d27c:	6442                	ld	s0,16(sp)
    8000d27e:	8526                	mv	a0,s1
    8000d280:	64a2                	ld	s1,8(sp)
    8000d282:	6105                	addi	sp,sp,32
    8000d284:	8082                	ret

000000008000d286 <illegal_except_2>:

bool illegal_except_2() {
    8000d286:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d288:	00014597          	auipc	a1,0x14
    8000d28c:	5c858593          	addi	a1,a1,1480 # 80021850 <__func__.12>
    8000d290:	00016517          	auipc	a0,0x16
    8000d294:	8c050513          	addi	a0,a0,-1856 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_2() {
    8000d298:	ec06                	sd	ra,24(sp)
    8000d29a:	e822                	sd	s0,16(sp)
    8000d29c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d29e:	1d3130ef          	jal	80020c70 <printf>
    8000d2a2:	4529                	li	a0,10
    8000d2a4:	05c130ef          	jal	80020300 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    8000d2a8:	4511                	li	a0,4
    8000d2aa:	82ff30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000d2ae:	001007b7          	lui	a5,0x100
    8000d2b2:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    8000d2b6:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    8000d2ba:	450d                	li	a0,3
    8000d2bc:	81df30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d2c0:	0330000f          	fence	rw,rw
    8000d2c4:	00038417          	auipc	s0,0x38
    8000d2c8:	d4c40413          	addi	s0,s0,-692 # 80045010 <excpt>
    8000d2cc:	4785                	li	a5,1
    8000d2ce:	00038717          	auipc	a4,0x38
    8000d2d2:	d6073d23          	sd	zero,-646(a4) # 80045048 <excpt+0x38>
    8000d2d6:	00f41023          	sh	a5,0(s0)
    8000d2da:	0330000f          	fence	rw,rw
    CSRR(satp);
    8000d2de:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d2e2:	08200593          	li	a1,130
    8000d2e6:	00018617          	auipc	a2,0x18
    8000d2ea:	15a60613          	addi	a2,a2,346 # 80025440 <__func__.2+0x2bd8>
    8000d2ee:	00016517          	auipc	a0,0x16
    8000d2f2:	87a50513          	addi	a0,a0,-1926 # 80022b68 <__func__.2+0x300>
    8000d2f6:	17b130ef          	jal	80020c70 <printf>
    8000d2fa:	00038797          	auipc	a5,0x38
    8000d2fe:	d177c783          	lbu	a5,-745(a5) # 80045011 <excpt+0x1>
    8000d302:	00016597          	auipc	a1,0x16
    8000d306:	83e58593          	addi	a1,a1,-1986 # 80022b40 <__func__.2+0x2d8>
    8000d30a:	cf89                	beqz	a5,8000d324 <illegal_except_2+0x9e>
    8000d30c:	6418                	ld	a4,8(s0)
    8000d30e:	4789                	li	a5,2
    8000d310:	00016597          	auipc	a1,0x16
    8000d314:	82058593          	addi	a1,a1,-2016 # 80022b30 <__func__.2+0x2c8>
    8000d318:	00f70663          	beq	a4,a5,8000d324 <illegal_except_2+0x9e>
    8000d31c:	00016597          	auipc	a1,0x16
    8000d320:	82458593          	addi	a1,a1,-2012 # 80022b40 <__func__.2+0x2d8>
    8000d324:	00016517          	auipc	a0,0x16
    8000d328:	85c50513          	addi	a0,a0,-1956 # 80022b80 <__func__.2+0x318>
    8000d32c:	145130ef          	jal	80020c70 <printf>
    8000d330:	00038797          	auipc	a5,0x38
    8000d334:	ce17c783          	lbu	a5,-799(a5) # 80045011 <excpt+0x1>
    8000d338:	c789                	beqz	a5,8000d342 <illegal_except_2+0xbc>
    8000d33a:	6418                	ld	a4,8(s0)
    8000d33c:	4789                	li	a5,2
    8000d33e:	00f70c63          	beq	a4,a5,8000d356 <illegal_except_2+0xd0>
    8000d342:	00016517          	auipc	a0,0x16
    8000d346:	84650513          	addi	a0,a0,-1978 # 80022b88 <__func__.2+0x320>
    8000d34a:	127130ef          	jal	80020c70 <printf>
    8000d34e:	02900513          	li	a0,41
    8000d352:	7af120ef          	jal	80020300 <putchar>
    8000d356:	4529                	li	a0,10
    8000d358:	7a9120ef          	jal	80020300 <putchar>
    8000d35c:	00038497          	auipc	s1,0x38
    8000d360:	cb54c483          	lbu	s1,-843(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d364:	00015597          	auipc	a1,0x15
    8000d368:	7dc58593          	addi	a1,a1,2012 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d36c:	cc91                	beqz	s1,8000d388 <illegal_except_2+0x102>
    8000d36e:	6418                	ld	a4,8(s0)
    8000d370:	4789                	li	a5,2
    TEST_END();
    8000d372:	00015597          	auipc	a1,0x15
    8000d376:	7be58593          	addi	a1,a1,1982 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d37a:	00f70763          	beq	a4,a5,8000d388 <illegal_except_2+0x102>
    8000d37e:	4481                	li	s1,0
    TEST_END();
    8000d380:	00015597          	auipc	a1,0x15
    8000d384:	7c058593          	addi	a1,a1,1984 # 80022b40 <__func__.2+0x2d8>
    8000d388:	00016517          	auipc	a0,0x16
    8000d38c:	86050513          	addi	a0,a0,-1952 # 80022be8 <__func__.2+0x380>
    8000d390:	0e1130ef          	jal	80020c70 <printf>
    8000d394:	4511                	li	a0,4
    8000d396:	f42f30ef          	jal	80000ad8 <goto_priv>
    8000d39a:	80ef40ef          	jal	800013a8 <reset_state>

}
    8000d39e:	60e2                	ld	ra,24(sp)
    8000d3a0:	6442                	ld	s0,16(sp)
    8000d3a2:	8526                	mv	a0,s1
    8000d3a4:	64a2                	ld	s1,8(sp)
    8000d3a6:	6105                	addi	sp,sp,32
    8000d3a8:	8082                	ret

000000008000d3aa <illegal_except_3>:

bool illegal_except_3() {
    8000d3aa:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d3ac:	00014597          	auipc	a1,0x14
    8000d3b0:	4bc58593          	addi	a1,a1,1212 # 80021868 <__func__.11>
    8000d3b4:	00015517          	auipc	a0,0x15
    8000d3b8:	79c50513          	addi	a0,a0,1948 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_3() {
    8000d3bc:	ec06                	sd	ra,24(sp)
    8000d3be:	e822                	sd	s0,16(sp)
    8000d3c0:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d3c2:	0af130ef          	jal	80020c70 <printf>
    8000d3c6:	4529                	li	a0,10
    8000d3c8:	739120ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000d3cc:	0330000f          	fence	rw,rw
    8000d3d0:	00038417          	auipc	s0,0x38
    8000d3d4:	c4040413          	addi	s0,s0,-960 # 80045010 <excpt>
    8000d3d8:	4785                	li	a5,1
    8000d3da:	00038717          	auipc	a4,0x38
    8000d3de:	c6073723          	sd	zero,-914(a4) # 80045048 <excpt+0x38>
    8000d3e2:	00f41023          	sh	a5,0(s0)
    8000d3e6:	0330000f          	fence	rw,rw

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8000d3ea:	342025f3          	csrr	a1,mcause
    8000d3ee:	0001b517          	auipc	a0,0x1b
    8000d3f2:	30a50513          	addi	a0,a0,778 # 800286f8 <__func__.2+0x5e90>
    8000d3f6:	07b130ef          	jal	80020c70 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    8000d3fa:	57fd                	li	a5,-1
    8000d3fc:	83f1                	srli	a5,a5,0x1c
    8000d3fe:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8000d402:	342025f3          	csrr	a1,mcause
    8000d406:	0001b517          	auipc	a0,0x1b
    8000d40a:	2f250513          	addi	a0,a0,754 # 800286f8 <__func__.2+0x5e90>
    8000d40e:	063130ef          	jal	80020c70 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000d412:	08200593          	li	a1,130
    8000d416:	00018617          	auipc	a2,0x18
    8000d41a:	08a60613          	addi	a2,a2,138 # 800254a0 <__func__.2+0x2c38>
    8000d41e:	00015517          	auipc	a0,0x15
    8000d422:	74a50513          	addi	a0,a0,1866 # 80022b68 <__func__.2+0x300>
    8000d426:	04b130ef          	jal	80020c70 <printf>
    8000d42a:	00038797          	auipc	a5,0x38
    8000d42e:	be77c783          	lbu	a5,-1049(a5) # 80045011 <excpt+0x1>
    8000d432:	00015597          	auipc	a1,0x15
    8000d436:	70e58593          	addi	a1,a1,1806 # 80022b40 <__func__.2+0x2d8>
    8000d43a:	cf89                	beqz	a5,8000d454 <illegal_except_3+0xaa>
    8000d43c:	6418                	ld	a4,8(s0)
    8000d43e:	4789                	li	a5,2
    8000d440:	00015597          	auipc	a1,0x15
    8000d444:	6f058593          	addi	a1,a1,1776 # 80022b30 <__func__.2+0x2c8>
    8000d448:	00f70663          	beq	a4,a5,8000d454 <illegal_except_3+0xaa>
    8000d44c:	00015597          	auipc	a1,0x15
    8000d450:	6f458593          	addi	a1,a1,1780 # 80022b40 <__func__.2+0x2d8>
    8000d454:	00015517          	auipc	a0,0x15
    8000d458:	72c50513          	addi	a0,a0,1836 # 80022b80 <__func__.2+0x318>
    8000d45c:	015130ef          	jal	80020c70 <printf>
    8000d460:	00038797          	auipc	a5,0x38
    8000d464:	bb17c783          	lbu	a5,-1103(a5) # 80045011 <excpt+0x1>
    8000d468:	c789                	beqz	a5,8000d472 <illegal_except_3+0xc8>
    8000d46a:	6418                	ld	a4,8(s0)
    8000d46c:	4789                	li	a5,2
    8000d46e:	00f70c63          	beq	a4,a5,8000d486 <illegal_except_3+0xdc>
    8000d472:	00015517          	auipc	a0,0x15
    8000d476:	71650513          	addi	a0,a0,1814 # 80022b88 <__func__.2+0x320>
    8000d47a:	7f6130ef          	jal	80020c70 <printf>
    8000d47e:	02900513          	li	a0,41
    8000d482:	67f120ef          	jal	80020300 <putchar>
    8000d486:	4529                	li	a0,10
    8000d488:	679120ef          	jal	80020300 <putchar>
    8000d48c:	00038497          	auipc	s1,0x38
    8000d490:	b854c483          	lbu	s1,-1147(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    8000d494:	00015597          	auipc	a1,0x15
    8000d498:	6ac58593          	addi	a1,a1,1708 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000d49c:	cc91                	beqz	s1,8000d4b8 <illegal_except_3+0x10e>
    8000d49e:	6418                	ld	a4,8(s0)
    8000d4a0:	4789                	li	a5,2
    TEST_END();
    8000d4a2:	00015597          	auipc	a1,0x15
    8000d4a6:	68e58593          	addi	a1,a1,1678 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000d4aa:	00f70763          	beq	a4,a5,8000d4b8 <illegal_except_3+0x10e>
    8000d4ae:	4481                	li	s1,0
    TEST_END();
    8000d4b0:	00015597          	auipc	a1,0x15
    8000d4b4:	69058593          	addi	a1,a1,1680 # 80022b40 <__func__.2+0x2d8>
    8000d4b8:	00015517          	auipc	a0,0x15
    8000d4bc:	73050513          	addi	a0,a0,1840 # 80022be8 <__func__.2+0x380>
    8000d4c0:	7b0130ef          	jal	80020c70 <printf>
    8000d4c4:	4511                	li	a0,4
    8000d4c6:	e12f30ef          	jal	80000ad8 <goto_priv>
    8000d4ca:	edff30ef          	jal	800013a8 <reset_state>
}
    8000d4ce:	60e2                	ld	ra,24(sp)
    8000d4d0:	6442                	ld	s0,16(sp)
    8000d4d2:	8526                	mv	a0,s1
    8000d4d4:	64a2                	ld	s1,8(sp)
    8000d4d6:	6105                	addi	sp,sp,32
    8000d4d8:	8082                	ret

000000008000d4da <illegal_except_4>:



bool illegal_except_4() {
    8000d4da:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d4dc:	00014597          	auipc	a1,0x14
    8000d4e0:	3a458593          	addi	a1,a1,932 # 80021880 <__func__.10>
    8000d4e4:	00015517          	auipc	a0,0x15
    8000d4e8:	66c50513          	addi	a0,a0,1644 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_4() {
    8000d4ec:	ec06                	sd	ra,24(sp)
    8000d4ee:	e822                	sd	s0,16(sp)
    8000d4f0:	e426                	sd	s1,8(sp)
    8000d4f2:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d4f4:	77c130ef          	jal	80020c70 <printf>
    8000d4f8:	4529                	li	a0,10
    8000d4fa:	607120ef          	jal	80020300 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    8000d4fe:	4511                	li	a0,4
    8000d500:	dd8f30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d504:	0330000f          	fence	rw,rw
    8000d508:	00038417          	auipc	s0,0x38
    8000d50c:	b0840413          	addi	s0,s0,-1272 # 80045010 <excpt>
    8000d510:	4785                	li	a5,1
    8000d512:	00038717          	auipc	a4,0x38
    8000d516:	b2073b23          	sd	zero,-1226(a4) # 80045048 <excpt+0x38>
    8000d51a:	00f41023          	sh	a5,0(s0)
    8000d51e:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    8000d522:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    8000d526:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    8000d52a:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    8000d52e:	08200593          	li	a1,130
    8000d532:	00018617          	auipc	a2,0x18
    8000d536:	fae60613          	addi	a2,a2,-82 # 800254e0 <__func__.2+0x2c78>
    8000d53a:	00015517          	auipc	a0,0x15
    8000d53e:	62e50513          	addi	a0,a0,1582 # 80022b68 <__func__.2+0x300>
    8000d542:	72e130ef          	jal	80020c70 <printf>
    8000d546:	00038797          	auipc	a5,0x38
    8000d54a:	acb7c783          	lbu	a5,-1333(a5) # 80045011 <excpt+0x1>
    8000d54e:	00015597          	auipc	a1,0x15
    8000d552:	5e258593          	addi	a1,a1,1506 # 80022b30 <__func__.2+0x2c8>
    8000d556:	c789                	beqz	a5,8000d560 <illegal_except_4+0x86>
    8000d558:	00015597          	auipc	a1,0x15
    8000d55c:	5e858593          	addi	a1,a1,1512 # 80022b40 <__func__.2+0x2d8>
    8000d560:	00015517          	auipc	a0,0x15
    8000d564:	62050513          	addi	a0,a0,1568 # 80022b80 <__func__.2+0x318>
    8000d568:	708130ef          	jal	80020c70 <printf>
    8000d56c:	00038797          	auipc	a5,0x38
    8000d570:	aa57c783          	lbu	a5,-1371(a5) # 80045011 <excpt+0x1>
    8000d574:	1a079c63          	bnez	a5,8000d72c <illegal_except_4+0x252>
    8000d578:	4529                	li	a0,10
    8000d57a:	587120ef          	jal	80020300 <putchar>
    8000d57e:	00038917          	auipc	s2,0x38
    8000d582:	a9394903          	lbu	s2,-1389(s2) # 80045011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    8000d586:	e23f30ef          	jal	800013a8 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    8000d58a:	450d                	li	a0,3
    8000d58c:	d4cf30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d590:	0330000f          	fence	rw,rw
    8000d594:	4785                	li	a5,1
    8000d596:	00038717          	auipc	a4,0x38
    8000d59a:	aa073923          	sd	zero,-1358(a4) # 80045048 <excpt+0x38>
    8000d59e:	00f41023          	sh	a5,0(s0)
    8000d5a2:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    8000d5a6:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000d5aa:	08200593          	li	a1,130
    8000d5ae:	00018617          	auipc	a2,0x18
    8000d5b2:	f5a60613          	addi	a2,a2,-166 # 80025508 <__func__.2+0x2ca0>
    8000d5b6:	00015517          	auipc	a0,0x15
    8000d5ba:	5b250513          	addi	a0,a0,1458 # 80022b68 <__func__.2+0x300>
    8000d5be:	6b2130ef          	jal	80020c70 <printf>
    8000d5c2:	00038797          	auipc	a5,0x38
    8000d5c6:	a4f7c783          	lbu	a5,-1457(a5) # 80045011 <excpt+0x1>
    8000d5ca:	00015597          	auipc	a1,0x15
    8000d5ce:	57658593          	addi	a1,a1,1398 # 80022b40 <__func__.2+0x2d8>
    8000d5d2:	cf89                	beqz	a5,8000d5ec <illegal_except_4+0x112>
    8000d5d4:	6418                	ld	a4,8(s0)
    8000d5d6:	4789                	li	a5,2
    8000d5d8:	00015597          	auipc	a1,0x15
    8000d5dc:	55858593          	addi	a1,a1,1368 # 80022b30 <__func__.2+0x2c8>
    8000d5e0:	00f70663          	beq	a4,a5,8000d5ec <illegal_except_4+0x112>
    8000d5e4:	00015597          	auipc	a1,0x15
    8000d5e8:	55c58593          	addi	a1,a1,1372 # 80022b40 <__func__.2+0x2d8>
    8000d5ec:	00015517          	auipc	a0,0x15
    8000d5f0:	59450513          	addi	a0,a0,1428 # 80022b80 <__func__.2+0x318>
    8000d5f4:	67c130ef          	jal	80020c70 <printf>
    8000d5f8:	00038797          	auipc	a5,0x38
    8000d5fc:	a197c783          	lbu	a5,-1511(a5) # 80045011 <excpt+0x1>
    8000d600:	c789                	beqz	a5,8000d60a <illegal_except_4+0x130>
    8000d602:	6418                	ld	a4,8(s0)
    8000d604:	4789                	li	a5,2
    8000d606:	00f70c63          	beq	a4,a5,8000d61e <illegal_except_4+0x144>
    8000d60a:	00015517          	auipc	a0,0x15
    8000d60e:	57e50513          	addi	a0,a0,1406 # 80022b88 <__func__.2+0x320>
    8000d612:	65e130ef          	jal	80020c70 <printf>
    8000d616:	02900513          	li	a0,41
    8000d61a:	4e7120ef          	jal	80020300 <putchar>
    8000d61e:	4529                	li	a0,10
    8000d620:	4e1120ef          	jal	80020300 <putchar>
    8000d624:	4481                	li	s1,0
    8000d626:	00091863          	bnez	s2,8000d636 <illegal_except_4+0x15c>
    8000d62a:	00038797          	auipc	a5,0x38
    8000d62e:	9e77c783          	lbu	a5,-1561(a5) # 80045011 <excpt+0x1>
    8000d632:	0e079863          	bnez	a5,8000d722 <illegal_except_4+0x248>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    8000d636:	4509                	li	a0,2
    8000d638:	ca0f30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d63c:	0330000f          	fence	rw,rw
    8000d640:	4785                	li	a5,1
    8000d642:	00038717          	auipc	a4,0x38
    8000d646:	a0073323          	sd	zero,-1530(a4) # 80045048 <excpt+0x38>
    8000d64a:	00f41023          	sh	a5,0(s0)
    8000d64e:	0330000f          	fence	rw,rw
    CSRR(CSR_MIDELEG);
    8000d652:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000d656:	08200593          	li	a1,130
    8000d65a:	00018617          	auipc	a2,0x18
    8000d65e:	ee660613          	addi	a2,a2,-282 # 80025540 <__func__.2+0x2cd8>
    8000d662:	00015517          	auipc	a0,0x15
    8000d666:	50650513          	addi	a0,a0,1286 # 80022b68 <__func__.2+0x300>
    8000d66a:	606130ef          	jal	80020c70 <printf>
    8000d66e:	00038797          	auipc	a5,0x38
    8000d672:	9a37c783          	lbu	a5,-1629(a5) # 80045011 <excpt+0x1>
    8000d676:	00015597          	auipc	a1,0x15
    8000d67a:	4ca58593          	addi	a1,a1,1226 # 80022b40 <__func__.2+0x2d8>
    8000d67e:	cf89                	beqz	a5,8000d698 <illegal_except_4+0x1be>
    8000d680:	6418                	ld	a4,8(s0)
    8000d682:	4789                	li	a5,2
    8000d684:	00015597          	auipc	a1,0x15
    8000d688:	4ac58593          	addi	a1,a1,1196 # 80022b30 <__func__.2+0x2c8>
    8000d68c:	00f70663          	beq	a4,a5,8000d698 <illegal_except_4+0x1be>
    8000d690:	00015597          	auipc	a1,0x15
    8000d694:	4b058593          	addi	a1,a1,1200 # 80022b40 <__func__.2+0x2d8>
    8000d698:	00015517          	auipc	a0,0x15
    8000d69c:	4e850513          	addi	a0,a0,1256 # 80022b80 <__func__.2+0x318>
    8000d6a0:	5d0130ef          	jal	80020c70 <printf>
    8000d6a4:	00038797          	auipc	a5,0x38
    8000d6a8:	96d7c783          	lbu	a5,-1683(a5) # 80045011 <excpt+0x1>
    8000d6ac:	c789                	beqz	a5,8000d6b6 <illegal_except_4+0x1dc>
    8000d6ae:	6418                	ld	a4,8(s0)
    8000d6b0:	4789                	li	a5,2
    8000d6b2:	00f70c63          	beq	a4,a5,8000d6ca <illegal_except_4+0x1f0>
    8000d6b6:	00015517          	auipc	a0,0x15
    8000d6ba:	4d250513          	addi	a0,a0,1234 # 80022b88 <__func__.2+0x320>
    8000d6be:	5b2130ef          	jal	80020c70 <printf>
    8000d6c2:	02900513          	li	a0,41
    8000d6c6:	43b120ef          	jal	80020300 <putchar>
    8000d6ca:	4529                	li	a0,10
    8000d6cc:	435120ef          	jal	80020300 <putchar>
    8000d6d0:	c095                	beqz	s1,8000d6f4 <illegal_except_4+0x21a>
    8000d6d2:	00038497          	auipc	s1,0x38
    8000d6d6:	93f4c483          	lbu	s1,-1729(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    8000d6da:	00015597          	auipc	a1,0x15
    8000d6de:	46658593          	addi	a1,a1,1126 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000d6e2:	cc91                	beqz	s1,8000d6fe <illegal_except_4+0x224>
    8000d6e4:	6418                	ld	a4,8(s0)
    8000d6e6:	4789                	li	a5,2
    TEST_END();
    8000d6e8:	00015597          	auipc	a1,0x15
    8000d6ec:	44858593          	addi	a1,a1,1096 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000d6f0:	00f70763          	beq	a4,a5,8000d6fe <illegal_except_4+0x224>
    8000d6f4:	4481                	li	s1,0
    TEST_END();
    8000d6f6:	00015597          	auipc	a1,0x15
    8000d6fa:	44a58593          	addi	a1,a1,1098 # 80022b40 <__func__.2+0x2d8>
    8000d6fe:	00015517          	auipc	a0,0x15
    8000d702:	4ea50513          	addi	a0,a0,1258 # 80022be8 <__func__.2+0x380>
    8000d706:	56a130ef          	jal	80020c70 <printf>
    8000d70a:	4511                	li	a0,4
    8000d70c:	bccf30ef          	jal	80000ad8 <goto_priv>
    8000d710:	c99f30ef          	jal	800013a8 <reset_state>
}
    8000d714:	60e2                	ld	ra,24(sp)
    8000d716:	6442                	ld	s0,16(sp)
    8000d718:	6902                	ld	s2,0(sp)
    8000d71a:	8526                	mv	a0,s1
    8000d71c:	64a2                	ld	s1,8(sp)
    8000d71e:	6105                	addi	sp,sp,32
    8000d720:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000d722:	6404                	ld	s1,8(s0)
    8000d724:	14f9                	addi	s1,s1,-2
    8000d726:	0014b493          	seqz	s1,s1
    8000d72a:	b731                	j	8000d636 <illegal_except_4+0x15c>
    TEST_ASSERT("m mode access any csr successful",
    8000d72c:	00015517          	auipc	a0,0x15
    8000d730:	45c50513          	addi	a0,a0,1116 # 80022b88 <__func__.2+0x320>
    8000d734:	53c130ef          	jal	80020c70 <printf>
    8000d738:	02900513          	li	a0,41
    8000d73c:	3c5120ef          	jal	80020300 <putchar>
    8000d740:	bd25                	j	8000d578 <illegal_except_4+0x9e>

000000008000d742 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    8000d742:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d744:	00014597          	auipc	a1,0x14
    8000d748:	15458593          	addi	a1,a1,340 # 80021898 <__func__.9>
    8000d74c:	00015517          	auipc	a0,0x15
    8000d750:	40450513          	addi	a0,a0,1028 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_5() {
    8000d754:	ec06                	sd	ra,24(sp)
    8000d756:	e822                	sd	s0,16(sp)
    8000d758:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d75a:	516130ef          	jal	80020c70 <printf>
    8000d75e:	4529                	li	a0,10
    8000d760:	3a1120ef          	jal	80020300 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    8000d764:	4511                	li	a0,4
    8000d766:	b72f30ef          	jal	80000ad8 <goto_priv>
    CSRW(satp, 0x0);
    8000d76a:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000d76e:	001007b7          	lui	a5,0x100
    8000d772:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d776:	450d                	li	a0,3
    8000d778:	b60f30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d77c:	0330000f          	fence	rw,rw
    8000d780:	00038417          	auipc	s0,0x38
    8000d784:	89040413          	addi	s0,s0,-1904 # 80045010 <excpt>
    8000d788:	4785                	li	a5,1
    8000d78a:	00038717          	auipc	a4,0x38
    8000d78e:	8a073f23          	sd	zero,-1858(a4) # 80045048 <excpt+0x38>
    8000d792:	00f41023          	sh	a5,0(s0)
    8000d796:	0330000f          	fence	rw,rw
    CSRR(satp);
    8000d79a:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d79e:	08200593          	li	a1,130
    8000d7a2:	00018617          	auipc	a2,0x18
    8000d7a6:	c9e60613          	addi	a2,a2,-866 # 80025440 <__func__.2+0x2bd8>
    8000d7aa:	00015517          	auipc	a0,0x15
    8000d7ae:	3be50513          	addi	a0,a0,958 # 80022b68 <__func__.2+0x300>
    8000d7b2:	4be130ef          	jal	80020c70 <printf>
    8000d7b6:	00038797          	auipc	a5,0x38
    8000d7ba:	85b7c783          	lbu	a5,-1957(a5) # 80045011 <excpt+0x1>
    8000d7be:	00015597          	auipc	a1,0x15
    8000d7c2:	38258593          	addi	a1,a1,898 # 80022b40 <__func__.2+0x2d8>
    8000d7c6:	cf89                	beqz	a5,8000d7e0 <illegal_except_5+0x9e>
    8000d7c8:	6418                	ld	a4,8(s0)
    8000d7ca:	4789                	li	a5,2
    8000d7cc:	00015597          	auipc	a1,0x15
    8000d7d0:	36458593          	addi	a1,a1,868 # 80022b30 <__func__.2+0x2c8>
    8000d7d4:	00f70663          	beq	a4,a5,8000d7e0 <illegal_except_5+0x9e>
    8000d7d8:	00015597          	auipc	a1,0x15
    8000d7dc:	36858593          	addi	a1,a1,872 # 80022b40 <__func__.2+0x2d8>
    8000d7e0:	00015517          	auipc	a0,0x15
    8000d7e4:	3a050513          	addi	a0,a0,928 # 80022b80 <__func__.2+0x318>
    8000d7e8:	488130ef          	jal	80020c70 <printf>
    8000d7ec:	00038797          	auipc	a5,0x38
    8000d7f0:	8257c783          	lbu	a5,-2011(a5) # 80045011 <excpt+0x1>
    8000d7f4:	c789                	beqz	a5,8000d7fe <illegal_except_5+0xbc>
    8000d7f6:	6418                	ld	a4,8(s0)
    8000d7f8:	4789                	li	a5,2
    8000d7fa:	00f70c63          	beq	a4,a5,8000d812 <illegal_except_5+0xd0>
    8000d7fe:	00015517          	auipc	a0,0x15
    8000d802:	38a50513          	addi	a0,a0,906 # 80022b88 <__func__.2+0x320>
    8000d806:	46a130ef          	jal	80020c70 <printf>
    8000d80a:	02900513          	li	a0,41
    8000d80e:	2f3120ef          	jal	80020300 <putchar>
    8000d812:	4529                	li	a0,10
    8000d814:	2ed120ef          	jal	80020300 <putchar>
    8000d818:	00037497          	auipc	s1,0x37
    8000d81c:	7f94c483          	lbu	s1,2041(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d820:	00015597          	auipc	a1,0x15
    8000d824:	32058593          	addi	a1,a1,800 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d828:	cc91                	beqz	s1,8000d844 <illegal_except_5+0x102>
    8000d82a:	6418                	ld	a4,8(s0)
    8000d82c:	4789                	li	a5,2
    TEST_END();
    8000d82e:	00015597          	auipc	a1,0x15
    8000d832:	30258593          	addi	a1,a1,770 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000d836:	00f70763          	beq	a4,a5,8000d844 <illegal_except_5+0x102>
    8000d83a:	4481                	li	s1,0
    TEST_END();
    8000d83c:	00015597          	auipc	a1,0x15
    8000d840:	30458593          	addi	a1,a1,772 # 80022b40 <__func__.2+0x2d8>
    8000d844:	00015517          	auipc	a0,0x15
    8000d848:	3a450513          	addi	a0,a0,932 # 80022be8 <__func__.2+0x380>
    8000d84c:	424130ef          	jal	80020c70 <printf>
    8000d850:	4511                	li	a0,4
    8000d852:	a86f30ef          	jal	80000ad8 <goto_priv>
    8000d856:	b53f30ef          	jal	800013a8 <reset_state>
}
    8000d85a:	60e2                	ld	ra,24(sp)
    8000d85c:	6442                	ld	s0,16(sp)
    8000d85e:	8526                	mv	a0,s1
    8000d860:	64a2                	ld	s1,8(sp)
    8000d862:	6105                	addi	sp,sp,32
    8000d864:	8082                	ret

000000008000d866 <illegal_except_6>:

bool illegal_except_6() {
    8000d866:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d868:	00014597          	auipc	a1,0x14
    8000d86c:	04858593          	addi	a1,a1,72 # 800218b0 <__func__.8>
    8000d870:	00015517          	auipc	a0,0x15
    8000d874:	2e050513          	addi	a0,a0,736 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_6() {
    8000d878:	ec06                	sd	ra,24(sp)
    8000d87a:	e822                	sd	s0,16(sp)
    8000d87c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d87e:	3f2130ef          	jal	80020c70 <printf>
    8000d882:	4529                	li	a0,10
    8000d884:	27d120ef          	jal	80020300 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    8000d888:	4511                	li	a0,4
    8000d88a:	a4ef30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000d88e:	001007b7          	lui	a5,0x100
    8000d892:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d896:	450d                	li	a0,3
    8000d898:	a40f30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d89c:	0330000f          	fence	rw,rw
    8000d8a0:	00037417          	auipc	s0,0x37
    8000d8a4:	77040413          	addi	s0,s0,1904 # 80045010 <excpt>
    8000d8a8:	4785                	li	a5,1
    8000d8aa:	00037717          	auipc	a4,0x37
    8000d8ae:	78073f23          	sd	zero,1950(a4) # 80045048 <excpt+0x38>
    8000d8b2:	00f41023          	sh	a5,0(s0)
    8000d8b6:	0330000f          	fence	rw,rw
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    8000d8ba:	57fd                	li	a5,-1
    8000d8bc:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000d8c0:	08200593          	li	a1,130
    8000d8c4:	00018617          	auipc	a2,0x18
    8000d8c8:	cb460613          	addi	a2,a2,-844 # 80025578 <__func__.2+0x2d10>
    8000d8cc:	00015517          	auipc	a0,0x15
    8000d8d0:	29c50513          	addi	a0,a0,668 # 80022b68 <__func__.2+0x300>
    8000d8d4:	39c130ef          	jal	80020c70 <printf>
    8000d8d8:	00037797          	auipc	a5,0x37
    8000d8dc:	7397c783          	lbu	a5,1849(a5) # 80045011 <excpt+0x1>
    8000d8e0:	00015597          	auipc	a1,0x15
    8000d8e4:	26058593          	addi	a1,a1,608 # 80022b40 <__func__.2+0x2d8>
    8000d8e8:	cf89                	beqz	a5,8000d902 <illegal_except_6+0x9c>
    8000d8ea:	6418                	ld	a4,8(s0)
    8000d8ec:	4789                	li	a5,2
    8000d8ee:	00015597          	auipc	a1,0x15
    8000d8f2:	24258593          	addi	a1,a1,578 # 80022b30 <__func__.2+0x2c8>
    8000d8f6:	00f70663          	beq	a4,a5,8000d902 <illegal_except_6+0x9c>
    8000d8fa:	00015597          	auipc	a1,0x15
    8000d8fe:	24658593          	addi	a1,a1,582 # 80022b40 <__func__.2+0x2d8>
    8000d902:	00015517          	auipc	a0,0x15
    8000d906:	27e50513          	addi	a0,a0,638 # 80022b80 <__func__.2+0x318>
    8000d90a:	366130ef          	jal	80020c70 <printf>
    8000d90e:	00037797          	auipc	a5,0x37
    8000d912:	7037c783          	lbu	a5,1795(a5) # 80045011 <excpt+0x1>
    8000d916:	c789                	beqz	a5,8000d920 <illegal_except_6+0xba>
    8000d918:	6418                	ld	a4,8(s0)
    8000d91a:	4789                	li	a5,2
    8000d91c:	00f70c63          	beq	a4,a5,8000d934 <illegal_except_6+0xce>
    8000d920:	00015517          	auipc	a0,0x15
    8000d924:	26850513          	addi	a0,a0,616 # 80022b88 <__func__.2+0x320>
    8000d928:	348130ef          	jal	80020c70 <printf>
    8000d92c:	02900513          	li	a0,41
    8000d930:	1d1120ef          	jal	80020300 <putchar>
    8000d934:	4529                	li	a0,10
    8000d936:	1cb120ef          	jal	80020300 <putchar>
    8000d93a:	00037497          	auipc	s1,0x37
    8000d93e:	6d74c483          	lbu	s1,1751(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d942:	00015597          	auipc	a1,0x15
    8000d946:	1fe58593          	addi	a1,a1,510 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000d94a:	cc91                	beqz	s1,8000d966 <illegal_except_6+0x100>
    8000d94c:	6418                	ld	a4,8(s0)
    8000d94e:	4789                	li	a5,2
    TEST_END();
    8000d950:	00015597          	auipc	a1,0x15
    8000d954:	1e058593          	addi	a1,a1,480 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000d958:	00f70763          	beq	a4,a5,8000d966 <illegal_except_6+0x100>
    8000d95c:	4481                	li	s1,0
    TEST_END();
    8000d95e:	00015597          	auipc	a1,0x15
    8000d962:	1e258593          	addi	a1,a1,482 # 80022b40 <__func__.2+0x2d8>
    8000d966:	00015517          	auipc	a0,0x15
    8000d96a:	28250513          	addi	a0,a0,642 # 80022be8 <__func__.2+0x380>
    8000d96e:	302130ef          	jal	80020c70 <printf>
    8000d972:	4511                	li	a0,4
    8000d974:	964f30ef          	jal	80000ad8 <goto_priv>
    8000d978:	a31f30ef          	jal	800013a8 <reset_state>
}
    8000d97c:	60e2                	ld	ra,24(sp)
    8000d97e:	6442                	ld	s0,16(sp)
    8000d980:	8526                	mv	a0,s1
    8000d982:	64a2                	ld	s1,8(sp)
    8000d984:	6105                	addi	sp,sp,32
    8000d986:	8082                	ret

000000008000d988 <illegal_except_7>:

bool illegal_except_7() {
    8000d988:	1101                	addi	sp,sp,-32

    TEST_START();
    8000d98a:	00014597          	auipc	a1,0x14
    8000d98e:	f3e58593          	addi	a1,a1,-194 # 800218c8 <__func__.7>
    8000d992:	00015517          	auipc	a0,0x15
    8000d996:	1be50513          	addi	a0,a0,446 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_7() {
    8000d99a:	ec06                	sd	ra,24(sp)
    8000d99c:	e822                	sd	s0,16(sp)
    8000d99e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d9a0:	2d0130ef          	jal	80020c70 <printf>
    8000d9a4:	4529                	li	a0,10
    8000d9a6:	15b120ef          	jal	80020300 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    8000d9aa:	4511                	li	a0,4
    8000d9ac:	92cf30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d9b0:	001007b7          	lui	a5,0x100
    8000d9b4:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    8000d9b8:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    8000d9bc:	450d                	li	a0,3
    8000d9be:	91af30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d9c2:	0330000f          	fence	rw,rw
    8000d9c6:	00037417          	auipc	s0,0x37
    8000d9ca:	64a40413          	addi	s0,s0,1610 # 80045010 <excpt>
    8000d9ce:	4785                	li	a5,1
    8000d9d0:	00037717          	auipc	a4,0x37
    8000d9d4:	66073c23          	sd	zero,1656(a4) # 80045048 <excpt+0x38>
    8000d9d8:	00f41023          	sh	a5,0(s0)
    8000d9dc:	0330000f          	fence	rw,rw
    asm volatile(
    8000d9e0:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8000d9e4:	08200593          	li	a1,130
    8000d9e8:	00018617          	auipc	a2,0x18
    8000d9ec:	bf860613          	addi	a2,a2,-1032 # 800255e0 <__func__.2+0x2d78>
    8000d9f0:	00015517          	auipc	a0,0x15
    8000d9f4:	17850513          	addi	a0,a0,376 # 80022b68 <__func__.2+0x300>
    8000d9f8:	278130ef          	jal	80020c70 <printf>
    8000d9fc:	00037797          	auipc	a5,0x37
    8000da00:	6157c783          	lbu	a5,1557(a5) # 80045011 <excpt+0x1>
    8000da04:	00015597          	auipc	a1,0x15
    8000da08:	13c58593          	addi	a1,a1,316 # 80022b40 <__func__.2+0x2d8>
    8000da0c:	cf89                	beqz	a5,8000da26 <illegal_except_7+0x9e>
    8000da0e:	6418                	ld	a4,8(s0)
    8000da10:	4789                	li	a5,2
    8000da12:	00015597          	auipc	a1,0x15
    8000da16:	11e58593          	addi	a1,a1,286 # 80022b30 <__func__.2+0x2c8>
    8000da1a:	00f70663          	beq	a4,a5,8000da26 <illegal_except_7+0x9e>
    8000da1e:	00015597          	auipc	a1,0x15
    8000da22:	12258593          	addi	a1,a1,290 # 80022b40 <__func__.2+0x2d8>
    8000da26:	00015517          	auipc	a0,0x15
    8000da2a:	15a50513          	addi	a0,a0,346 # 80022b80 <__func__.2+0x318>
    8000da2e:	242130ef          	jal	80020c70 <printf>
    8000da32:	00037797          	auipc	a5,0x37
    8000da36:	5df7c783          	lbu	a5,1503(a5) # 80045011 <excpt+0x1>
    8000da3a:	c789                	beqz	a5,8000da44 <illegal_except_7+0xbc>
    8000da3c:	6418                	ld	a4,8(s0)
    8000da3e:	4789                	li	a5,2
    8000da40:	00f70c63          	beq	a4,a5,8000da58 <illegal_except_7+0xd0>
    8000da44:	00015517          	auipc	a0,0x15
    8000da48:	14450513          	addi	a0,a0,324 # 80022b88 <__func__.2+0x320>
    8000da4c:	224130ef          	jal	80020c70 <printf>
    8000da50:	02900513          	li	a0,41
    8000da54:	0ad120ef          	jal	80020300 <putchar>
    8000da58:	4529                	li	a0,10
    8000da5a:	0a7120ef          	jal	80020300 <putchar>
    8000da5e:	00037797          	auipc	a5,0x37
    8000da62:	5b37c783          	lbu	a5,1459(a5) # 80045011 <excpt+0x1>
    8000da66:	4481                	li	s1,0
    8000da68:	c789                	beqz	a5,8000da72 <illegal_except_7+0xea>
    8000da6a:	6404                	ld	s1,8(s0)
    8000da6c:	14f9                	addi	s1,s1,-2
    8000da6e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8000da72:	450d                	li	a0,3
    8000da74:	864f30ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000da78:	0330000f          	fence	rw,rw
    8000da7c:	4785                	li	a5,1
    8000da7e:	00037717          	auipc	a4,0x37
    8000da82:	5c073523          	sd	zero,1482(a4) # 80045048 <excpt+0x38>
    8000da86:	00f41023          	sh	a5,0(s0)
    8000da8a:	0330000f          	fence	rw,rw
    asm volatile(
    8000da8e:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000da92:	08200593          	li	a1,130
    8000da96:	00018617          	auipc	a2,0x18
    8000da9a:	b7a60613          	addi	a2,a2,-1158 # 80025610 <__func__.2+0x2da8>
    8000da9e:	00015517          	auipc	a0,0x15
    8000daa2:	0ca50513          	addi	a0,a0,202 # 80022b68 <__func__.2+0x300>
    8000daa6:	1ca130ef          	jal	80020c70 <printf>
    8000daaa:	00037797          	auipc	a5,0x37
    8000daae:	5677c783          	lbu	a5,1383(a5) # 80045011 <excpt+0x1>
    8000dab2:	00015597          	auipc	a1,0x15
    8000dab6:	08e58593          	addi	a1,a1,142 # 80022b40 <__func__.2+0x2d8>
    8000daba:	cf89                	beqz	a5,8000dad4 <illegal_except_7+0x14c>
    8000dabc:	6418                	ld	a4,8(s0)
    8000dabe:	4789                	li	a5,2
    8000dac0:	00015597          	auipc	a1,0x15
    8000dac4:	07058593          	addi	a1,a1,112 # 80022b30 <__func__.2+0x2c8>
    8000dac8:	00f70663          	beq	a4,a5,8000dad4 <illegal_except_7+0x14c>
    8000dacc:	00015597          	auipc	a1,0x15
    8000dad0:	07458593          	addi	a1,a1,116 # 80022b40 <__func__.2+0x2d8>
    8000dad4:	00015517          	auipc	a0,0x15
    8000dad8:	0ac50513          	addi	a0,a0,172 # 80022b80 <__func__.2+0x318>
    8000dadc:	194130ef          	jal	80020c70 <printf>
    8000dae0:	00037797          	auipc	a5,0x37
    8000dae4:	5317c783          	lbu	a5,1329(a5) # 80045011 <excpt+0x1>
    8000dae8:	c789                	beqz	a5,8000daf2 <illegal_except_7+0x16a>
    8000daea:	6418                	ld	a4,8(s0)
    8000daec:	4789                	li	a5,2
    8000daee:	00f70c63          	beq	a4,a5,8000db06 <illegal_except_7+0x17e>
    8000daf2:	00015517          	auipc	a0,0x15
    8000daf6:	09650513          	addi	a0,a0,150 # 80022b88 <__func__.2+0x320>
    8000dafa:	176130ef          	jal	80020c70 <printf>
    8000dafe:	02900513          	li	a0,41
    8000db02:	7fe120ef          	jal	80020300 <putchar>
    8000db06:	4529                	li	a0,10
    8000db08:	7f8120ef          	jal	80020300 <putchar>
    8000db0c:	c095                	beqz	s1,8000db30 <illegal_except_7+0x1a8>
    8000db0e:	00037497          	auipc	s1,0x37
    8000db12:	5034c483          	lbu	s1,1283(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000db16:	00015597          	auipc	a1,0x15
    8000db1a:	02a58593          	addi	a1,a1,42 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000db1e:	cc91                	beqz	s1,8000db3a <illegal_except_7+0x1b2>
    8000db20:	6418                	ld	a4,8(s0)
    8000db22:	4789                	li	a5,2
    TEST_END();
    8000db24:	00015597          	auipc	a1,0x15
    8000db28:	00c58593          	addi	a1,a1,12 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000db2c:	00f70763          	beq	a4,a5,8000db3a <illegal_except_7+0x1b2>
    8000db30:	4481                	li	s1,0
    TEST_END();
    8000db32:	00015597          	auipc	a1,0x15
    8000db36:	00e58593          	addi	a1,a1,14 # 80022b40 <__func__.2+0x2d8>
    8000db3a:	00015517          	auipc	a0,0x15
    8000db3e:	0ae50513          	addi	a0,a0,174 # 80022be8 <__func__.2+0x380>
    8000db42:	12e130ef          	jal	80020c70 <printf>
    8000db46:	4511                	li	a0,4
    8000db48:	f91f20ef          	jal	80000ad8 <goto_priv>
    8000db4c:	85df30ef          	jal	800013a8 <reset_state>
}
    8000db50:	60e2                	ld	ra,24(sp)
    8000db52:	6442                	ld	s0,16(sp)
    8000db54:	8526                	mv	a0,s1
    8000db56:	64a2                	ld	s1,8(sp)
    8000db58:	6105                	addi	sp,sp,32
    8000db5a:	8082                	ret

000000008000db5c <illegal_except_8>:


bool illegal_except_8() {
    8000db5c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000db5e:	00014597          	auipc	a1,0x14
    8000db62:	d8258593          	addi	a1,a1,-638 # 800218e0 <__func__.6>
    8000db66:	00015517          	auipc	a0,0x15
    8000db6a:	fea50513          	addi	a0,a0,-22 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_8() {
    8000db6e:	e406                	sd	ra,8(sp)
    8000db70:	e022                	sd	s0,0(sp)
    TEST_START();
    8000db72:	0fe130ef          	jal	80020c70 <printf>
    8000db76:	4529                	li	a0,10
    8000db78:	788120ef          	jal	80020300 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000db7c:	4511                	li	a0,4
    8000db7e:	f5bf20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000db82:	0330000f          	fence	rw,rw
    8000db86:	4785                	li	a5,1
    8000db88:	00037717          	auipc	a4,0x37
    8000db8c:	4c073023          	sd	zero,1216(a4) # 80045048 <excpt+0x38>
    8000db90:	00037717          	auipc	a4,0x37
    8000db94:	48f71023          	sh	a5,1152(a4) # 80045010 <excpt>
    8000db98:	0330000f          	fence	rw,rw
    asm volatile(
    8000db9c:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    8000dba0:	08200593          	li	a1,130
    8000dba4:	00018617          	auipc	a2,0x18
    8000dba8:	a9c60613          	addi	a2,a2,-1380 # 80025640 <__func__.2+0x2dd8>
    8000dbac:	00015517          	auipc	a0,0x15
    8000dbb0:	fbc50513          	addi	a0,a0,-68 # 80022b68 <__func__.2+0x300>
    8000dbb4:	0bc130ef          	jal	80020c70 <printf>
    8000dbb8:	00037797          	auipc	a5,0x37
    8000dbbc:	4597c783          	lbu	a5,1113(a5) # 80045011 <excpt+0x1>
    8000dbc0:	00015597          	auipc	a1,0x15
    8000dbc4:	f7058593          	addi	a1,a1,-144 # 80022b30 <__func__.2+0x2c8>
    8000dbc8:	c789                	beqz	a5,8000dbd2 <illegal_except_8+0x76>
    8000dbca:	00015597          	auipc	a1,0x15
    8000dbce:	f7658593          	addi	a1,a1,-138 # 80022b40 <__func__.2+0x2d8>
    8000dbd2:	00015517          	auipc	a0,0x15
    8000dbd6:	fae50513          	addi	a0,a0,-82 # 80022b80 <__func__.2+0x318>
    8000dbda:	096130ef          	jal	80020c70 <printf>
    8000dbde:	00037797          	auipc	a5,0x37
    8000dbe2:	4337c783          	lbu	a5,1075(a5) # 80045011 <excpt+0x1>
    8000dbe6:	e7a1                	bnez	a5,8000dc2e <illegal_except_8+0xd2>
    8000dbe8:	4529                	li	a0,10
    8000dbea:	716120ef          	jal	80020300 <putchar>
    8000dbee:	00037797          	auipc	a5,0x37
    8000dbf2:	4237c783          	lbu	a5,1059(a5) # 80045011 <excpt+0x1>
    8000dbf6:	e795                	bnez	a5,8000dc22 <illegal_except_8+0xc6>
    8000dbf8:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000dbfa:	00015597          	auipc	a1,0x15
    8000dbfe:	f3658593          	addi	a1,a1,-202 # 80022b30 <__func__.2+0x2c8>
    8000dc02:	00015517          	auipc	a0,0x15
    8000dc06:	fe650513          	addi	a0,a0,-26 # 80022be8 <__func__.2+0x380>
    8000dc0a:	066130ef          	jal	80020c70 <printf>
    8000dc0e:	4511                	li	a0,4
    8000dc10:	ec9f20ef          	jal	80000ad8 <goto_priv>
    8000dc14:	f94f30ef          	jal	800013a8 <reset_state>
}
    8000dc18:	60a2                	ld	ra,8(sp)
    8000dc1a:	8522                	mv	a0,s0
    8000dc1c:	6402                	ld	s0,0(sp)
    8000dc1e:	0141                	addi	sp,sp,16
    8000dc20:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    8000dc22:	4401                	li	s0,0
    TEST_END();
    8000dc24:	00015597          	auipc	a1,0x15
    8000dc28:	f1c58593          	addi	a1,a1,-228 # 80022b40 <__func__.2+0x2d8>
    8000dc2c:	bfd9                	j	8000dc02 <illegal_except_8+0xa6>
    TEST_ASSERT("m mode hfence.gvma successful",
    8000dc2e:	00015517          	auipc	a0,0x15
    8000dc32:	f5a50513          	addi	a0,a0,-166 # 80022b88 <__func__.2+0x320>
    8000dc36:	03a130ef          	jal	80020c70 <printf>
    8000dc3a:	02900513          	li	a0,41
    8000dc3e:	6c2120ef          	jal	80020300 <putchar>
    8000dc42:	b75d                	j	8000dbe8 <illegal_except_8+0x8c>

000000008000dc44 <illegal_except_9>:

bool illegal_except_9() {
    8000dc44:	1101                	addi	sp,sp,-32

    TEST_START();
    8000dc46:	00014597          	auipc	a1,0x14
    8000dc4a:	cb258593          	addi	a1,a1,-846 # 800218f8 <__func__.5>
    8000dc4e:	00015517          	auipc	a0,0x15
    8000dc52:	f0250513          	addi	a0,a0,-254 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_9() {
    8000dc56:	ec06                	sd	ra,24(sp)
    8000dc58:	e822                	sd	s0,16(sp)
    8000dc5a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000dc5c:	014130ef          	jal	80020c70 <printf>
    8000dc60:	4529                	li	a0,10
    8000dc62:	69e120ef          	jal	80020300 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000dc66:	4511                	li	a0,4
    8000dc68:	e71f20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    8000dc6c:	001007b7          	lui	a5,0x100
    8000dc70:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8000dc74:	450d                	li	a0,3
    8000dc76:	e63f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000dc7a:	0330000f          	fence	rw,rw
    8000dc7e:	00037417          	auipc	s0,0x37
    8000dc82:	39240413          	addi	s0,s0,914 # 80045010 <excpt>
    8000dc86:	4785                	li	a5,1
    8000dc88:	00037717          	auipc	a4,0x37
    8000dc8c:	3c073023          	sd	zero,960(a4) # 80045048 <excpt+0x38>
    8000dc90:	00f41023          	sh	a5,0(s0)
    8000dc94:	0330000f          	fence	rw,rw
    8000dc98:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000dc9c:	08200593          	li	a1,130
    8000dca0:	00018617          	auipc	a2,0x18
    8000dca4:	9c060613          	addi	a2,a2,-1600 # 80025660 <__func__.2+0x2df8>
    8000dca8:	00015517          	auipc	a0,0x15
    8000dcac:	ec050513          	addi	a0,a0,-320 # 80022b68 <__func__.2+0x300>
    8000dcb0:	7c1120ef          	jal	80020c70 <printf>
    8000dcb4:	00037797          	auipc	a5,0x37
    8000dcb8:	35d7c783          	lbu	a5,861(a5) # 80045011 <excpt+0x1>
    8000dcbc:	00015597          	auipc	a1,0x15
    8000dcc0:	e7458593          	addi	a1,a1,-396 # 80022b30 <__func__.2+0x2c8>
    8000dcc4:	c789                	beqz	a5,8000dcce <illegal_except_9+0x8a>
    8000dcc6:	00015597          	auipc	a1,0x15
    8000dcca:	e7a58593          	addi	a1,a1,-390 # 80022b40 <__func__.2+0x2d8>
    8000dcce:	00015517          	auipc	a0,0x15
    8000dcd2:	eb250513          	addi	a0,a0,-334 # 80022b80 <__func__.2+0x318>
    8000dcd6:	79b120ef          	jal	80020c70 <printf>
    8000dcda:	00037797          	auipc	a5,0x37
    8000dcde:	3377c783          	lbu	a5,823(a5) # 80045011 <excpt+0x1>
    8000dce2:	10079563          	bnez	a5,8000ddec <illegal_except_9+0x1a8>
    8000dce6:	4529                	li	a0,10
    8000dce8:	618120ef          	jal	80020300 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000dcec:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000dcee:	00037497          	auipc	s1,0x37
    8000dcf2:	3234c483          	lbu	s1,803(s1) # 80045011 <excpt+0x1>
    goto_priv(PRIV_M);
    8000dcf6:	de3f20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000dcfa:	001007b7          	lui	a5,0x100
    8000dcfe:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000dd02:	450d                	li	a0,3
    8000dd04:	dd5f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000dd08:	0330000f          	fence	rw,rw
    8000dd0c:	4785                	li	a5,1
    8000dd0e:	00037717          	auipc	a4,0x37
    8000dd12:	32073d23          	sd	zero,826(a4) # 80045048 <excpt+0x38>
    8000dd16:	00f41023          	sh	a5,0(s0)
    8000dd1a:	0330000f          	fence	rw,rw
    8000dd1e:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000dd22:	08200593          	li	a1,130
    8000dd26:	00018617          	auipc	a2,0x18
    8000dd2a:	97260613          	addi	a2,a2,-1678 # 80025698 <__func__.2+0x2e30>
    8000dd2e:	00015517          	auipc	a0,0x15
    8000dd32:	e3a50513          	addi	a0,a0,-454 # 80022b68 <__func__.2+0x300>
    8000dd36:	73b120ef          	jal	80020c70 <printf>
    8000dd3a:	00037797          	auipc	a5,0x37
    8000dd3e:	2d77c783          	lbu	a5,727(a5) # 80045011 <excpt+0x1>
    8000dd42:	00015597          	auipc	a1,0x15
    8000dd46:	dfe58593          	addi	a1,a1,-514 # 80022b40 <__func__.2+0x2d8>
    8000dd4a:	cf89                	beqz	a5,8000dd64 <illegal_except_9+0x120>
    8000dd4c:	6418                	ld	a4,8(s0)
    8000dd4e:	4789                	li	a5,2
    8000dd50:	00015597          	auipc	a1,0x15
    8000dd54:	de058593          	addi	a1,a1,-544 # 80022b30 <__func__.2+0x2c8>
    8000dd58:	00f70663          	beq	a4,a5,8000dd64 <illegal_except_9+0x120>
    8000dd5c:	00015597          	auipc	a1,0x15
    8000dd60:	de458593          	addi	a1,a1,-540 # 80022b40 <__func__.2+0x2d8>
    8000dd64:	00015517          	auipc	a0,0x15
    8000dd68:	e1c50513          	addi	a0,a0,-484 # 80022b80 <__func__.2+0x318>
    8000dd6c:	705120ef          	jal	80020c70 <printf>
    8000dd70:	00037797          	auipc	a5,0x37
    8000dd74:	2a17c783          	lbu	a5,673(a5) # 80045011 <excpt+0x1>
    8000dd78:	c789                	beqz	a5,8000dd82 <illegal_except_9+0x13e>
    8000dd7a:	6418                	ld	a4,8(s0)
    8000dd7c:	4789                	li	a5,2
    8000dd7e:	00f70c63          	beq	a4,a5,8000dd96 <illegal_except_9+0x152>
    8000dd82:	00015517          	auipc	a0,0x15
    8000dd86:	e0650513          	addi	a0,a0,-506 # 80022b88 <__func__.2+0x320>
    8000dd8a:	6e7120ef          	jal	80020c70 <printf>
    8000dd8e:	02900513          	li	a0,41
    8000dd92:	56e120ef          	jal	80020300 <putchar>
    8000dd96:	4529                	li	a0,10
    8000dd98:	568120ef          	jal	80020300 <putchar>
    8000dd9c:	e095                	bnez	s1,8000ddc0 <illegal_except_9+0x17c>
    8000dd9e:	00037497          	auipc	s1,0x37
    8000dda2:	2734c483          	lbu	s1,627(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000dda6:	00015597          	auipc	a1,0x15
    8000ddaa:	d9a58593          	addi	a1,a1,-614 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000ddae:	cc91                	beqz	s1,8000ddca <illegal_except_9+0x186>
    8000ddb0:	6418                	ld	a4,8(s0)
    8000ddb2:	4789                	li	a5,2
    TEST_END();
    8000ddb4:	00015597          	auipc	a1,0x15
    8000ddb8:	d7c58593          	addi	a1,a1,-644 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000ddbc:	00f70763          	beq	a4,a5,8000ddca <illegal_except_9+0x186>
    8000ddc0:	4481                	li	s1,0
    TEST_END();
    8000ddc2:	00015597          	auipc	a1,0x15
    8000ddc6:	d7e58593          	addi	a1,a1,-642 # 80022b40 <__func__.2+0x2d8>
    8000ddca:	00015517          	auipc	a0,0x15
    8000ddce:	e1e50513          	addi	a0,a0,-482 # 80022be8 <__func__.2+0x380>
    8000ddd2:	69f120ef          	jal	80020c70 <printf>
    8000ddd6:	4511                	li	a0,4
    8000ddd8:	d01f20ef          	jal	80000ad8 <goto_priv>
    8000dddc:	dccf30ef          	jal	800013a8 <reset_state>
}
    8000dde0:	60e2                	ld	ra,24(sp)
    8000dde2:	6442                	ld	s0,16(sp)
    8000dde4:	8526                	mv	a0,s1
    8000dde6:	64a2                	ld	s1,8(sp)
    8000dde8:	6105                	addi	sp,sp,32
    8000ddea:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000ddec:	00015517          	auipc	a0,0x15
    8000ddf0:	d9c50513          	addi	a0,a0,-612 # 80022b88 <__func__.2+0x320>
    8000ddf4:	67d120ef          	jal	80020c70 <printf>
    8000ddf8:	02900513          	li	a0,41
    8000ddfc:	504120ef          	jal	80020300 <putchar>
    8000de00:	b5dd                	j	8000dce6 <illegal_except_9+0xa2>

000000008000de02 <illegal_except_10>:

bool illegal_except_10() {
    8000de02:	1101                	addi	sp,sp,-32

    TEST_START();
    8000de04:	00014597          	auipc	a1,0x14
    8000de08:	b0c58593          	addi	a1,a1,-1268 # 80021910 <__func__.4>
    8000de0c:	00015517          	auipc	a0,0x15
    8000de10:	d4450513          	addi	a0,a0,-700 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_10() {
    8000de14:	ec06                	sd	ra,24(sp)
    8000de16:	e822                	sd	s0,16(sp)
    8000de18:	e426                	sd	s1,8(sp)
    TEST_START();
    8000de1a:	657120ef          	jal	80020c70 <printf>
    8000de1e:	4529                	li	a0,10
    8000de20:	4e0120ef          	jal	80020300 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    8000de24:	4511                	li	a0,4
    8000de26:	cb3f20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000de2a:	d7ef30ef          	jal	800013a8 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000de2e:	001007b7          	lui	a5,0x100
    8000de32:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000de36:	450d                	li	a0,3
    8000de38:	ca1f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000de3c:	0330000f          	fence	rw,rw
    8000de40:	00037417          	auipc	s0,0x37
    8000de44:	1d040413          	addi	s0,s0,464 # 80045010 <excpt>
    8000de48:	4785                	li	a5,1
    8000de4a:	00037717          	auipc	a4,0x37
    8000de4e:	1e073f23          	sd	zero,510(a4) # 80045048 <excpt+0x38>
    8000de52:	00f41023          	sh	a5,0(s0)
    8000de56:	0330000f          	fence	rw,rw
    asm volatile(
    8000de5a:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8000de5e:	08200593          	li	a1,130
    8000de62:	00018617          	auipc	a2,0x18
    8000de66:	86e60613          	addi	a2,a2,-1938 # 800256d0 <__func__.2+0x2e68>
    8000de6a:	00015517          	auipc	a0,0x15
    8000de6e:	cfe50513          	addi	a0,a0,-770 # 80022b68 <__func__.2+0x300>
    8000de72:	5ff120ef          	jal	80020c70 <printf>
    8000de76:	00037797          	auipc	a5,0x37
    8000de7a:	19b7c783          	lbu	a5,411(a5) # 80045011 <excpt+0x1>
    8000de7e:	00015597          	auipc	a1,0x15
    8000de82:	cc258593          	addi	a1,a1,-830 # 80022b40 <__func__.2+0x2d8>
    8000de86:	cf89                	beqz	a5,8000dea0 <illegal_except_10+0x9e>
    8000de88:	6418                	ld	a4,8(s0)
    8000de8a:	4789                	li	a5,2
    8000de8c:	00015597          	auipc	a1,0x15
    8000de90:	ca458593          	addi	a1,a1,-860 # 80022b30 <__func__.2+0x2c8>
    8000de94:	00f70663          	beq	a4,a5,8000dea0 <illegal_except_10+0x9e>
    8000de98:	00015597          	auipc	a1,0x15
    8000de9c:	ca858593          	addi	a1,a1,-856 # 80022b40 <__func__.2+0x2d8>
    8000dea0:	00015517          	auipc	a0,0x15
    8000dea4:	ce050513          	addi	a0,a0,-800 # 80022b80 <__func__.2+0x318>
    8000dea8:	5c9120ef          	jal	80020c70 <printf>
    8000deac:	00037797          	auipc	a5,0x37
    8000deb0:	1657c783          	lbu	a5,357(a5) # 80045011 <excpt+0x1>
    8000deb4:	c789                	beqz	a5,8000debe <illegal_except_10+0xbc>
    8000deb6:	6418                	ld	a4,8(s0)
    8000deb8:	4789                	li	a5,2
    8000deba:	00f70c63          	beq	a4,a5,8000ded2 <illegal_except_10+0xd0>
    8000debe:	00015517          	auipc	a0,0x15
    8000dec2:	cca50513          	addi	a0,a0,-822 # 80022b88 <__func__.2+0x320>
    8000dec6:	5ab120ef          	jal	80020c70 <printf>
    8000deca:	02900513          	li	a0,41
    8000dece:	432120ef          	jal	80020300 <putchar>
    8000ded2:	4529                	li	a0,10
    8000ded4:	42c120ef          	jal	80020300 <putchar>
    8000ded8:	00037797          	auipc	a5,0x37
    8000dedc:	1397c783          	lbu	a5,313(a5) # 80045011 <excpt+0x1>
    8000dee0:	4481                	li	s1,0
    8000dee2:	c789                	beqz	a5,8000deec <illegal_except_10+0xea>
    8000dee4:	6404                	ld	s1,8(s0)
    8000dee6:	14f9                	addi	s1,s1,-2
    8000dee8:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    8000deec:	4511                	li	a0,4
    8000deee:	bebf20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000def2:	001007b7          	lui	a5,0x100
    8000def6:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000defa:	450d                	li	a0,3
    8000defc:	bddf20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000df00:	0330000f          	fence	rw,rw
    8000df04:	4785                	li	a5,1
    8000df06:	00037717          	auipc	a4,0x37
    8000df0a:	14073123          	sd	zero,322(a4) # 80045048 <excpt+0x38>
    8000df0e:	00f41023          	sh	a5,0(s0)
    8000df12:	0330000f          	fence	rw,rw
    asm volatile(
    8000df16:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000df1a:	08200593          	li	a1,130
    8000df1e:	00017617          	auipc	a2,0x17
    8000df22:	7ea60613          	addi	a2,a2,2026 # 80025708 <__func__.2+0x2ea0>
    8000df26:	00015517          	auipc	a0,0x15
    8000df2a:	c4250513          	addi	a0,a0,-958 # 80022b68 <__func__.2+0x300>
    8000df2e:	543120ef          	jal	80020c70 <printf>
    8000df32:	00037797          	auipc	a5,0x37
    8000df36:	0df7c783          	lbu	a5,223(a5) # 80045011 <excpt+0x1>
    8000df3a:	00015597          	auipc	a1,0x15
    8000df3e:	c0658593          	addi	a1,a1,-1018 # 80022b40 <__func__.2+0x2d8>
    8000df42:	cf89                	beqz	a5,8000df5c <illegal_except_10+0x15a>
    8000df44:	6418                	ld	a4,8(s0)
    8000df46:	4789                	li	a5,2
    8000df48:	00015597          	auipc	a1,0x15
    8000df4c:	be858593          	addi	a1,a1,-1048 # 80022b30 <__func__.2+0x2c8>
    8000df50:	00f70663          	beq	a4,a5,8000df5c <illegal_except_10+0x15a>
    8000df54:	00015597          	auipc	a1,0x15
    8000df58:	bec58593          	addi	a1,a1,-1044 # 80022b40 <__func__.2+0x2d8>
    8000df5c:	00015517          	auipc	a0,0x15
    8000df60:	c2450513          	addi	a0,a0,-988 # 80022b80 <__func__.2+0x318>
    8000df64:	50d120ef          	jal	80020c70 <printf>
    8000df68:	00037797          	auipc	a5,0x37
    8000df6c:	0a97c783          	lbu	a5,169(a5) # 80045011 <excpt+0x1>
    8000df70:	c789                	beqz	a5,8000df7a <illegal_except_10+0x178>
    8000df72:	6418                	ld	a4,8(s0)
    8000df74:	4789                	li	a5,2
    8000df76:	00f70c63          	beq	a4,a5,8000df8e <illegal_except_10+0x18c>
    8000df7a:	00015517          	auipc	a0,0x15
    8000df7e:	c0e50513          	addi	a0,a0,-1010 # 80022b88 <__func__.2+0x320>
    8000df82:	4ef120ef          	jal	80020c70 <printf>
    8000df86:	02900513          	li	a0,41
    8000df8a:	376120ef          	jal	80020300 <putchar>
    8000df8e:	4529                	li	a0,10
    8000df90:	370120ef          	jal	80020300 <putchar>
    8000df94:	c095                	beqz	s1,8000dfb8 <illegal_except_10+0x1b6>
    8000df96:	00037497          	auipc	s1,0x37
    8000df9a:	07b4c483          	lbu	s1,123(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000df9e:	00015597          	auipc	a1,0x15
    8000dfa2:	ba258593          	addi	a1,a1,-1118 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000dfa6:	cc91                	beqz	s1,8000dfc2 <illegal_except_10+0x1c0>
    8000dfa8:	6418                	ld	a4,8(s0)
    8000dfaa:	4789                	li	a5,2
    TEST_END();
    8000dfac:	00015597          	auipc	a1,0x15
    8000dfb0:	b8458593          	addi	a1,a1,-1148 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000dfb4:	00f70763          	beq	a4,a5,8000dfc2 <illegal_except_10+0x1c0>
    8000dfb8:	4481                	li	s1,0
    TEST_END();
    8000dfba:	00015597          	auipc	a1,0x15
    8000dfbe:	b8658593          	addi	a1,a1,-1146 # 80022b40 <__func__.2+0x2d8>
    8000dfc2:	00015517          	auipc	a0,0x15
    8000dfc6:	c2650513          	addi	a0,a0,-986 # 80022be8 <__func__.2+0x380>
    8000dfca:	4a7120ef          	jal	80020c70 <printf>
    8000dfce:	4511                	li	a0,4
    8000dfd0:	b09f20ef          	jal	80000ad8 <goto_priv>
    8000dfd4:	bd4f30ef          	jal	800013a8 <reset_state>
}
    8000dfd8:	60e2                	ld	ra,24(sp)
    8000dfda:	6442                	ld	s0,16(sp)
    8000dfdc:	8526                	mv	a0,s1
    8000dfde:	64a2                	ld	s1,8(sp)
    8000dfe0:	6105                	addi	sp,sp,32
    8000dfe2:	8082                	ret

000000008000dfe4 <illegal_except_11>:

bool illegal_except_11() {
    8000dfe4:	1101                	addi	sp,sp,-32

    TEST_START();
    8000dfe6:	00014597          	auipc	a1,0x14
    8000dfea:	94258593          	addi	a1,a1,-1726 # 80021928 <__func__.3>
    8000dfee:	00015517          	auipc	a0,0x15
    8000dff2:	b6250513          	addi	a0,a0,-1182 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_11() {
    8000dff6:	ec06                	sd	ra,24(sp)
    8000dff8:	e822                	sd	s0,16(sp)
    8000dffa:	e426                	sd	s1,8(sp)
    8000dffc:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000dffe:	473120ef          	jal	80020c70 <printf>
    8000e002:	4529                	li	a0,10
    8000e004:	2fc120ef          	jal	80020300 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    8000e008:	0330000f          	fence	rw,rw
    8000e00c:	00037417          	auipc	s0,0x37
    8000e010:	00440413          	addi	s0,s0,4 # 80045010 <excpt>
    8000e014:	4485                	li	s1,1
    8000e016:	00037797          	auipc	a5,0x37
    8000e01a:	0207b923          	sd	zero,50(a5) # 80045048 <excpt+0x38>
    8000e01e:	00941023          	sh	s1,0(s0)
    8000e022:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e026:	4511                	li	a0,4
    8000e028:	ab1f20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000e02c:	b7cf30ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HU);
    8000e030:	8526                	mv	a0,s1
    8000e032:	aa7f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000e036:	0330000f          	fence	rw,rw
    8000e03a:	00037797          	auipc	a5,0x37
    8000e03e:	0007b723          	sd	zero,14(a5) # 80045048 <excpt+0x38>
    8000e042:	00941023          	sh	s1,0(s0)
    8000e046:	0330000f          	fence	rw,rw
    asm volatile(
    8000e04a:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8000e04e:	08200593          	li	a1,130
    8000e052:	00017617          	auipc	a2,0x17
    8000e056:	6ee60613          	addi	a2,a2,1774 # 80025740 <__func__.2+0x2ed8>
    8000e05a:	00015517          	auipc	a0,0x15
    8000e05e:	b0e50513          	addi	a0,a0,-1266 # 80022b68 <__func__.2+0x300>
    8000e062:	40f120ef          	jal	80020c70 <printf>
    8000e066:	00037797          	auipc	a5,0x37
    8000e06a:	fab7c783          	lbu	a5,-85(a5) # 80045011 <excpt+0x1>
    8000e06e:	00015597          	auipc	a1,0x15
    8000e072:	ad258593          	addi	a1,a1,-1326 # 80022b40 <__func__.2+0x2d8>
    8000e076:	cf89                	beqz	a5,8000e090 <illegal_except_11+0xac>
    8000e078:	6418                	ld	a4,8(s0)
    8000e07a:	4789                	li	a5,2
    8000e07c:	00015597          	auipc	a1,0x15
    8000e080:	ab458593          	addi	a1,a1,-1356 # 80022b30 <__func__.2+0x2c8>
    8000e084:	00f70663          	beq	a4,a5,8000e090 <illegal_except_11+0xac>
    8000e088:	00015597          	auipc	a1,0x15
    8000e08c:	ab858593          	addi	a1,a1,-1352 # 80022b40 <__func__.2+0x2d8>
    8000e090:	00015517          	auipc	a0,0x15
    8000e094:	af050513          	addi	a0,a0,-1296 # 80022b80 <__func__.2+0x318>
    8000e098:	3d9120ef          	jal	80020c70 <printf>
    8000e09c:	00037797          	auipc	a5,0x37
    8000e0a0:	f757c783          	lbu	a5,-139(a5) # 80045011 <excpt+0x1>
    8000e0a4:	c789                	beqz	a5,8000e0ae <illegal_except_11+0xca>
    8000e0a6:	6418                	ld	a4,8(s0)
    8000e0a8:	4789                	li	a5,2
    8000e0aa:	00f70c63          	beq	a4,a5,8000e0c2 <illegal_except_11+0xde>
    8000e0ae:	00015517          	auipc	a0,0x15
    8000e0b2:	ada50513          	addi	a0,a0,-1318 # 80022b88 <__func__.2+0x320>
    8000e0b6:	3bb120ef          	jal	80020c70 <printf>
    8000e0ba:	02900513          	li	a0,41
    8000e0be:	242120ef          	jal	80020300 <putchar>
    8000e0c2:	4529                	li	a0,10
    8000e0c4:	23c120ef          	jal	80020300 <putchar>
    8000e0c8:	00037797          	auipc	a5,0x37
    8000e0cc:	f497c783          	lbu	a5,-183(a5) # 80045011 <excpt+0x1>
    8000e0d0:	4481                	li	s1,0
    8000e0d2:	c789                	beqz	a5,8000e0dc <illegal_except_11+0xf8>
    8000e0d4:	6404                	ld	s1,8(s0)
    8000e0d6:	14f9                	addi	s1,s1,-2
    8000e0d8:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000e0dc:	0330000f          	fence	rw,rw
    8000e0e0:	4905                	li	s2,1
    8000e0e2:	00037797          	auipc	a5,0x37
    8000e0e6:	f607b323          	sd	zero,-154(a5) # 80045048 <excpt+0x38>
    8000e0ea:	01241023          	sh	s2,0(s0)
    8000e0ee:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e0f2:	4511                	li	a0,4
    8000e0f4:	9e5f20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000e0f8:	ab0f30ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HU);
    8000e0fc:	854a                	mv	a0,s2
    8000e0fe:	9dbf20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000e102:	0330000f          	fence	rw,rw
    8000e106:	00037797          	auipc	a5,0x37
    8000e10a:	f407b123          	sd	zero,-190(a5) # 80045048 <excpt+0x38>
    8000e10e:	01241023          	sh	s2,0(s0)
    8000e112:	0330000f          	fence	rw,rw
    asm volatile(
    8000e116:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000e11a:	08200593          	li	a1,130
    8000e11e:	00017617          	auipc	a2,0x17
    8000e122:	66260613          	addi	a2,a2,1634 # 80025780 <__func__.2+0x2f18>
    8000e126:	00015517          	auipc	a0,0x15
    8000e12a:	a4250513          	addi	a0,a0,-1470 # 80022b68 <__func__.2+0x300>
    8000e12e:	343120ef          	jal	80020c70 <printf>
    8000e132:	00037797          	auipc	a5,0x37
    8000e136:	edf7c783          	lbu	a5,-289(a5) # 80045011 <excpt+0x1>
    8000e13a:	00015597          	auipc	a1,0x15
    8000e13e:	a0658593          	addi	a1,a1,-1530 # 80022b40 <__func__.2+0x2d8>
    8000e142:	cf89                	beqz	a5,8000e15c <illegal_except_11+0x178>
    8000e144:	6418                	ld	a4,8(s0)
    8000e146:	4789                	li	a5,2
    8000e148:	00015597          	auipc	a1,0x15
    8000e14c:	9e858593          	addi	a1,a1,-1560 # 80022b30 <__func__.2+0x2c8>
    8000e150:	00f70663          	beq	a4,a5,8000e15c <illegal_except_11+0x178>
    8000e154:	00015597          	auipc	a1,0x15
    8000e158:	9ec58593          	addi	a1,a1,-1556 # 80022b40 <__func__.2+0x2d8>
    8000e15c:	00015517          	auipc	a0,0x15
    8000e160:	a2450513          	addi	a0,a0,-1500 # 80022b80 <__func__.2+0x318>
    8000e164:	30d120ef          	jal	80020c70 <printf>
    8000e168:	00037797          	auipc	a5,0x37
    8000e16c:	ea97c783          	lbu	a5,-343(a5) # 80045011 <excpt+0x1>
    8000e170:	c789                	beqz	a5,8000e17a <illegal_except_11+0x196>
    8000e172:	6418                	ld	a4,8(s0)
    8000e174:	4789                	li	a5,2
    8000e176:	00f70c63          	beq	a4,a5,8000e18e <illegal_except_11+0x1aa>
    8000e17a:	00015517          	auipc	a0,0x15
    8000e17e:	a0e50513          	addi	a0,a0,-1522 # 80022b88 <__func__.2+0x320>
    8000e182:	2ef120ef          	jal	80020c70 <printf>
    8000e186:	02900513          	li	a0,41
    8000e18a:	176120ef          	jal	80020300 <putchar>
    8000e18e:	4529                	li	a0,10
    8000e190:	170120ef          	jal	80020300 <putchar>
    8000e194:	c095                	beqz	s1,8000e1b8 <illegal_except_11+0x1d4>
    8000e196:	00037497          	auipc	s1,0x37
    8000e19a:	e7b4c483          	lbu	s1,-389(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000e19e:	00015597          	auipc	a1,0x15
    8000e1a2:	9a258593          	addi	a1,a1,-1630 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000e1a6:	cc91                	beqz	s1,8000e1c2 <illegal_except_11+0x1de>
    8000e1a8:	6418                	ld	a4,8(s0)
    8000e1aa:	4789                	li	a5,2
    TEST_END();
    8000e1ac:	00015597          	auipc	a1,0x15
    8000e1b0:	98458593          	addi	a1,a1,-1660 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000e1b4:	00f70763          	beq	a4,a5,8000e1c2 <illegal_except_11+0x1de>
    8000e1b8:	4481                	li	s1,0
    TEST_END();
    8000e1ba:	00015597          	auipc	a1,0x15
    8000e1be:	98658593          	addi	a1,a1,-1658 # 80022b40 <__func__.2+0x2d8>
    8000e1c2:	00015517          	auipc	a0,0x15
    8000e1c6:	a2650513          	addi	a0,a0,-1498 # 80022be8 <__func__.2+0x380>
    8000e1ca:	2a7120ef          	jal	80020c70 <printf>
    8000e1ce:	4511                	li	a0,4
    8000e1d0:	909f20ef          	jal	80000ad8 <goto_priv>
    8000e1d4:	9d4f30ef          	jal	800013a8 <reset_state>
}
    8000e1d8:	60e2                	ld	ra,24(sp)
    8000e1da:	6442                	ld	s0,16(sp)
    8000e1dc:	6902                	ld	s2,0(sp)
    8000e1de:	8526                	mv	a0,s1
    8000e1e0:	64a2                	ld	s1,8(sp)
    8000e1e2:	6105                	addi	sp,sp,32
    8000e1e4:	8082                	ret

000000008000e1e6 <illegal_except_12>:

bool illegal_except_12() {
    8000e1e6:	1101                	addi	sp,sp,-32

    TEST_START();
    8000e1e8:	00013597          	auipc	a1,0x13
    8000e1ec:	75858593          	addi	a1,a1,1880 # 80021940 <__func__.2>
    8000e1f0:	00015517          	auipc	a0,0x15
    8000e1f4:	96050513          	addi	a0,a0,-1696 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_12() {
    8000e1f8:	ec06                	sd	ra,24(sp)
    8000e1fa:	e822                	sd	s0,16(sp)
    8000e1fc:	e426                	sd	s1,8(sp)
    8000e1fe:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000e200:	271120ef          	jal	80020c70 <printf>
    8000e204:	4529                	li	a0,10
    8000e206:	0fa120ef          	jal	80020300 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    8000e20a:	0330000f          	fence	rw,rw
    8000e20e:	00037417          	auipc	s0,0x37
    8000e212:	e0240413          	addi	s0,s0,-510 # 80045010 <excpt>
    8000e216:	4485                	li	s1,1
    8000e218:	00037797          	auipc	a5,0x37
    8000e21c:	e207b823          	sd	zero,-464(a5) # 80045048 <excpt+0x38>
    8000e220:	00941023          	sh	s1,0(s0)
    8000e224:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e228:	4511                	li	a0,4
    8000e22a:	8aff20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000e22e:	97af30ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HU);
    8000e232:	8526                	mv	a0,s1
    8000e234:	8a5f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000e238:	0330000f          	fence	rw,rw
    8000e23c:	00037797          	auipc	a5,0x37
    8000e240:	e007b623          	sd	zero,-500(a5) # 80045048 <excpt+0x38>
    8000e244:	00941023          	sh	s1,0(s0)
    8000e248:	0330000f          	fence	rw,rw
    asm volatile(
    8000e24c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8000e250:	08200593          	li	a1,130
    8000e254:	00017617          	auipc	a2,0x17
    8000e258:	56c60613          	addi	a2,a2,1388 # 800257c0 <__func__.2+0x2f58>
    8000e25c:	00015517          	auipc	a0,0x15
    8000e260:	90c50513          	addi	a0,a0,-1780 # 80022b68 <__func__.2+0x300>
    8000e264:	20d120ef          	jal	80020c70 <printf>
    8000e268:	00037797          	auipc	a5,0x37
    8000e26c:	da97c783          	lbu	a5,-599(a5) # 80045011 <excpt+0x1>
    8000e270:	00015597          	auipc	a1,0x15
    8000e274:	8d058593          	addi	a1,a1,-1840 # 80022b40 <__func__.2+0x2d8>
    8000e278:	cf89                	beqz	a5,8000e292 <illegal_except_12+0xac>
    8000e27a:	6418                	ld	a4,8(s0)
    8000e27c:	4789                	li	a5,2
    8000e27e:	00015597          	auipc	a1,0x15
    8000e282:	8b258593          	addi	a1,a1,-1870 # 80022b30 <__func__.2+0x2c8>
    8000e286:	00f70663          	beq	a4,a5,8000e292 <illegal_except_12+0xac>
    8000e28a:	00015597          	auipc	a1,0x15
    8000e28e:	8b658593          	addi	a1,a1,-1866 # 80022b40 <__func__.2+0x2d8>
    8000e292:	00015517          	auipc	a0,0x15
    8000e296:	8ee50513          	addi	a0,a0,-1810 # 80022b80 <__func__.2+0x318>
    8000e29a:	1d7120ef          	jal	80020c70 <printf>
    8000e29e:	00037797          	auipc	a5,0x37
    8000e2a2:	d737c783          	lbu	a5,-653(a5) # 80045011 <excpt+0x1>
    8000e2a6:	c789                	beqz	a5,8000e2b0 <illegal_except_12+0xca>
    8000e2a8:	6418                	ld	a4,8(s0)
    8000e2aa:	4789                	li	a5,2
    8000e2ac:	00f70c63          	beq	a4,a5,8000e2c4 <illegal_except_12+0xde>
    8000e2b0:	00015517          	auipc	a0,0x15
    8000e2b4:	8d850513          	addi	a0,a0,-1832 # 80022b88 <__func__.2+0x320>
    8000e2b8:	1b9120ef          	jal	80020c70 <printf>
    8000e2bc:	02900513          	li	a0,41
    8000e2c0:	040120ef          	jal	80020300 <putchar>
    8000e2c4:	4529                	li	a0,10
    8000e2c6:	03a120ef          	jal	80020300 <putchar>
    8000e2ca:	00037797          	auipc	a5,0x37
    8000e2ce:	d477c783          	lbu	a5,-697(a5) # 80045011 <excpt+0x1>
    8000e2d2:	4481                	li	s1,0
    8000e2d4:	c789                	beqz	a5,8000e2de <illegal_except_12+0xf8>
    8000e2d6:	6404                	ld	s1,8(s0)
    8000e2d8:	14f9                	addi	s1,s1,-2
    8000e2da:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000e2de:	0330000f          	fence	rw,rw
    8000e2e2:	4905                	li	s2,1
    8000e2e4:	00037797          	auipc	a5,0x37
    8000e2e8:	d607b223          	sd	zero,-668(a5) # 80045048 <excpt+0x38>
    8000e2ec:	01241023          	sh	s2,0(s0)
    8000e2f0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e2f4:	4511                	li	a0,4
    8000e2f6:	fe2f20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000e2fa:	8aef30ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HU);
    8000e2fe:	854a                	mv	a0,s2
    8000e300:	fd8f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000e304:	0330000f          	fence	rw,rw
    8000e308:	00037797          	auipc	a5,0x37
    8000e30c:	d407b023          	sd	zero,-704(a5) # 80045048 <excpt+0x38>
    8000e310:	01241023          	sh	s2,0(s0)
    8000e314:	0330000f          	fence	rw,rw
    asm volatile(
    8000e318:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000e31c:	08200593          	li	a1,130
    8000e320:	00017617          	auipc	a2,0x17
    8000e324:	4e060613          	addi	a2,a2,1248 # 80025800 <__func__.2+0x2f98>
    8000e328:	00015517          	auipc	a0,0x15
    8000e32c:	84050513          	addi	a0,a0,-1984 # 80022b68 <__func__.2+0x300>
    8000e330:	141120ef          	jal	80020c70 <printf>
    8000e334:	00037797          	auipc	a5,0x37
    8000e338:	cdd7c783          	lbu	a5,-803(a5) # 80045011 <excpt+0x1>
    8000e33c:	00015597          	auipc	a1,0x15
    8000e340:	80458593          	addi	a1,a1,-2044 # 80022b40 <__func__.2+0x2d8>
    8000e344:	cf89                	beqz	a5,8000e35e <illegal_except_12+0x178>
    8000e346:	6418                	ld	a4,8(s0)
    8000e348:	4789                	li	a5,2
    8000e34a:	00014597          	auipc	a1,0x14
    8000e34e:	7e658593          	addi	a1,a1,2022 # 80022b30 <__func__.2+0x2c8>
    8000e352:	00f70663          	beq	a4,a5,8000e35e <illegal_except_12+0x178>
    8000e356:	00014597          	auipc	a1,0x14
    8000e35a:	7ea58593          	addi	a1,a1,2026 # 80022b40 <__func__.2+0x2d8>
    8000e35e:	00015517          	auipc	a0,0x15
    8000e362:	82250513          	addi	a0,a0,-2014 # 80022b80 <__func__.2+0x318>
    8000e366:	10b120ef          	jal	80020c70 <printf>
    8000e36a:	00037797          	auipc	a5,0x37
    8000e36e:	ca77c783          	lbu	a5,-857(a5) # 80045011 <excpt+0x1>
    8000e372:	c789                	beqz	a5,8000e37c <illegal_except_12+0x196>
    8000e374:	6418                	ld	a4,8(s0)
    8000e376:	4789                	li	a5,2
    8000e378:	00f70c63          	beq	a4,a5,8000e390 <illegal_except_12+0x1aa>
    8000e37c:	00015517          	auipc	a0,0x15
    8000e380:	80c50513          	addi	a0,a0,-2036 # 80022b88 <__func__.2+0x320>
    8000e384:	0ed120ef          	jal	80020c70 <printf>
    8000e388:	02900513          	li	a0,41
    8000e38c:	775110ef          	jal	80020300 <putchar>
    8000e390:	4529                	li	a0,10
    8000e392:	76f110ef          	jal	80020300 <putchar>
    8000e396:	c881                	beqz	s1,8000e3a6 <illegal_except_12+0x1c0>
    8000e398:	00037797          	auipc	a5,0x37
    8000e39c:	c797c783          	lbu	a5,-903(a5) # 80045011 <excpt+0x1>
    8000e3a0:	4481                	li	s1,0
    8000e3a2:	10079763          	bnez	a5,8000e4b0 <illegal_except_12+0x2ca>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000e3a6:	0330000f          	fence	rw,rw
    8000e3aa:	4905                	li	s2,1
    8000e3ac:	00037797          	auipc	a5,0x37
    8000e3b0:	c807be23          	sd	zero,-868(a5) # 80045048 <excpt+0x38>
    8000e3b4:	01241023          	sh	s2,0(s0)
    8000e3b8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e3bc:	4511                	li	a0,4
    8000e3be:	f1af20ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8000e3c2:	fe7f20ef          	jal	800013a8 <reset_state>
    goto_priv(PRIV_HU);
    8000e3c6:	854a                	mv	a0,s2
    8000e3c8:	f10f20ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000e3cc:	0330000f          	fence	rw,rw
    8000e3d0:	00037797          	auipc	a5,0x37
    8000e3d4:	c607bc23          	sd	zero,-904(a5) # 80045048 <excpt+0x38>
    8000e3d8:	01241023          	sh	s2,0(s0)
    8000e3dc:	0330000f          	fence	rw,rw
    asm volatile(
    8000e3e0:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000e3e4:	08200593          	li	a1,130
    8000e3e8:	00017617          	auipc	a2,0x17
    8000e3ec:	45860613          	addi	a2,a2,1112 # 80025840 <__func__.2+0x2fd8>
    8000e3f0:	00014517          	auipc	a0,0x14
    8000e3f4:	77850513          	addi	a0,a0,1912 # 80022b68 <__func__.2+0x300>
    8000e3f8:	079120ef          	jal	80020c70 <printf>
    8000e3fc:	00037797          	auipc	a5,0x37
    8000e400:	c157c783          	lbu	a5,-1003(a5) # 80045011 <excpt+0x1>
    8000e404:	00014597          	auipc	a1,0x14
    8000e408:	73c58593          	addi	a1,a1,1852 # 80022b40 <__func__.2+0x2d8>
    8000e40c:	cf89                	beqz	a5,8000e426 <illegal_except_12+0x240>
    8000e40e:	6418                	ld	a4,8(s0)
    8000e410:	4789                	li	a5,2
    8000e412:	00014597          	auipc	a1,0x14
    8000e416:	71e58593          	addi	a1,a1,1822 # 80022b30 <__func__.2+0x2c8>
    8000e41a:	00f70663          	beq	a4,a5,8000e426 <illegal_except_12+0x240>
    8000e41e:	00014597          	auipc	a1,0x14
    8000e422:	72258593          	addi	a1,a1,1826 # 80022b40 <__func__.2+0x2d8>
    8000e426:	00014517          	auipc	a0,0x14
    8000e42a:	75a50513          	addi	a0,a0,1882 # 80022b80 <__func__.2+0x318>
    8000e42e:	043120ef          	jal	80020c70 <printf>
    8000e432:	00037797          	auipc	a5,0x37
    8000e436:	bdf7c783          	lbu	a5,-1057(a5) # 80045011 <excpt+0x1>
    8000e43a:	c789                	beqz	a5,8000e444 <illegal_except_12+0x25e>
    8000e43c:	6418                	ld	a4,8(s0)
    8000e43e:	4789                	li	a5,2
    8000e440:	00f70c63          	beq	a4,a5,8000e458 <illegal_except_12+0x272>
    8000e444:	00014517          	auipc	a0,0x14
    8000e448:	74450513          	addi	a0,a0,1860 # 80022b88 <__func__.2+0x320>
    8000e44c:	025120ef          	jal	80020c70 <printf>
    8000e450:	02900513          	li	a0,41
    8000e454:	6ad110ef          	jal	80020300 <putchar>
    8000e458:	4529                	li	a0,10
    8000e45a:	6a7110ef          	jal	80020300 <putchar>
    8000e45e:	c095                	beqz	s1,8000e482 <illegal_except_12+0x29c>
    8000e460:	00037497          	auipc	s1,0x37
    8000e464:	bb14c483          	lbu	s1,-1103(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000e468:	00014597          	auipc	a1,0x14
    8000e46c:	6d858593          	addi	a1,a1,1752 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000e470:	cc91                	beqz	s1,8000e48c <illegal_except_12+0x2a6>
    8000e472:	6418                	ld	a4,8(s0)
    8000e474:	4789                	li	a5,2
    TEST_END();
    8000e476:	00014597          	auipc	a1,0x14
    8000e47a:	6ba58593          	addi	a1,a1,1722 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000e47e:	00f70763          	beq	a4,a5,8000e48c <illegal_except_12+0x2a6>
    8000e482:	4481                	li	s1,0
    TEST_END();
    8000e484:	00014597          	auipc	a1,0x14
    8000e488:	6bc58593          	addi	a1,a1,1724 # 80022b40 <__func__.2+0x2d8>
    8000e48c:	00014517          	auipc	a0,0x14
    8000e490:	75c50513          	addi	a0,a0,1884 # 80022be8 <__func__.2+0x380>
    8000e494:	7dc120ef          	jal	80020c70 <printf>
    8000e498:	4511                	li	a0,4
    8000e49a:	e3ef20ef          	jal	80000ad8 <goto_priv>
    8000e49e:	f0bf20ef          	jal	800013a8 <reset_state>
}
    8000e4a2:	60e2                	ld	ra,24(sp)
    8000e4a4:	6442                	ld	s0,16(sp)
    8000e4a6:	6902                	ld	s2,0(sp)
    8000e4a8:	8526                	mv	a0,s1
    8000e4aa:	64a2                	ld	s1,8(sp)
    8000e4ac:	6105                	addi	sp,sp,32
    8000e4ae:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000e4b0:	6404                	ld	s1,8(s0)
    8000e4b2:	14f9                	addi	s1,s1,-2
    8000e4b4:	0014b493          	seqz	s1,s1
    8000e4b8:	b5fd                	j	8000e3a6 <illegal_except_12+0x1c0>

000000008000e4ba <illegal_except_13>:


bool illegal_except_13() {
    8000e4ba:	1101                	addi	sp,sp,-32

    TEST_START();
    8000e4bc:	00013597          	auipc	a1,0x13
    8000e4c0:	49c58593          	addi	a1,a1,1180 # 80021958 <__func__.1>
    8000e4c4:	00014517          	auipc	a0,0x14
    8000e4c8:	68c50513          	addi	a0,a0,1676 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_13() {
    8000e4cc:	ec06                	sd	ra,24(sp)
    8000e4ce:	e822                	sd	s0,16(sp)
    8000e4d0:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e4d2:	79e120ef          	jal	80020c70 <printf>
    8000e4d6:	4529                	li	a0,10
    8000e4d8:	629110ef          	jal	80020300 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    8000e4dc:	0330000f          	fence	rw,rw
    8000e4e0:	00037417          	auipc	s0,0x37
    8000e4e4:	b3040413          	addi	s0,s0,-1232 # 80045010 <excpt>
    8000e4e8:	4785                	li	a5,1
    8000e4ea:	00037717          	auipc	a4,0x37
    8000e4ee:	b4073f23          	sd	zero,-1186(a4) # 80045048 <excpt+0x38>
    8000e4f2:	00f41023          	sh	a5,0(s0)
    8000e4f6:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8000e4fa:	450d                	li	a0,3
    8000e4fc:	ddcf20ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8000e500:	18005073          	csrwi	satp,0
    asm volatile(
    8000e504:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    8000e508:	00037597          	auipc	a1,0x37
    8000e50c:	b095c583          	lbu	a1,-1271(a1) # 80045011 <excpt+0x1>
    8000e510:	00017517          	auipc	a0,0x17
    8000e514:	37050513          	addi	a0,a0,880 # 80025880 <__func__.2+0x3018>
    8000e518:	758120ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000e51c:	08200593          	li	a1,130
    8000e520:	00017617          	auipc	a2,0x17
    8000e524:	36860613          	addi	a2,a2,872 # 80025888 <__func__.2+0x3020>
    8000e528:	00014517          	auipc	a0,0x14
    8000e52c:	64050513          	addi	a0,a0,1600 # 80022b68 <__func__.2+0x300>
    8000e530:	740120ef          	jal	80020c70 <printf>
    8000e534:	00037797          	auipc	a5,0x37
    8000e538:	add7c783          	lbu	a5,-1315(a5) # 80045011 <excpt+0x1>
    8000e53c:	00014597          	auipc	a1,0x14
    8000e540:	60458593          	addi	a1,a1,1540 # 80022b40 <__func__.2+0x2d8>
    8000e544:	cf89                	beqz	a5,8000e55e <illegal_except_13+0xa4>
    8000e546:	6418                	ld	a4,8(s0)
    8000e548:	4789                	li	a5,2
    8000e54a:	00014597          	auipc	a1,0x14
    8000e54e:	5e658593          	addi	a1,a1,1510 # 80022b30 <__func__.2+0x2c8>
    8000e552:	00f70663          	beq	a4,a5,8000e55e <illegal_except_13+0xa4>
    8000e556:	00014597          	auipc	a1,0x14
    8000e55a:	5ea58593          	addi	a1,a1,1514 # 80022b40 <__func__.2+0x2d8>
    8000e55e:	00014517          	auipc	a0,0x14
    8000e562:	62250513          	addi	a0,a0,1570 # 80022b80 <__func__.2+0x318>
    8000e566:	70a120ef          	jal	80020c70 <printf>
    8000e56a:	00037797          	auipc	a5,0x37
    8000e56e:	aa77c783          	lbu	a5,-1369(a5) # 80045011 <excpt+0x1>
    8000e572:	c789                	beqz	a5,8000e57c <illegal_except_13+0xc2>
    8000e574:	6418                	ld	a4,8(s0)
    8000e576:	4789                	li	a5,2
    8000e578:	00f70c63          	beq	a4,a5,8000e590 <illegal_except_13+0xd6>
    8000e57c:	00014517          	auipc	a0,0x14
    8000e580:	60c50513          	addi	a0,a0,1548 # 80022b88 <__func__.2+0x320>
    8000e584:	6ec120ef          	jal	80020c70 <printf>
    8000e588:	02900513          	li	a0,41
    8000e58c:	575110ef          	jal	80020300 <putchar>
    8000e590:	4529                	li	a0,10
    8000e592:	56f110ef          	jal	80020300 <putchar>
    8000e596:	00037497          	auipc	s1,0x37
    8000e59a:	a7b4c483          	lbu	s1,-1413(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000e59e:	00014597          	auipc	a1,0x14
    8000e5a2:	5a258593          	addi	a1,a1,1442 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000e5a6:	cc91                	beqz	s1,8000e5c2 <illegal_except_13+0x108>
    8000e5a8:	6418                	ld	a4,8(s0)
    8000e5aa:	4789                	li	a5,2
    TEST_END();
    8000e5ac:	00014597          	auipc	a1,0x14
    8000e5b0:	58458593          	addi	a1,a1,1412 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000e5b4:	00f70763          	beq	a4,a5,8000e5c2 <illegal_except_13+0x108>
    8000e5b8:	4481                	li	s1,0
    TEST_END();
    8000e5ba:	00014597          	auipc	a1,0x14
    8000e5be:	58658593          	addi	a1,a1,1414 # 80022b40 <__func__.2+0x2d8>
    8000e5c2:	00014517          	auipc	a0,0x14
    8000e5c6:	62650513          	addi	a0,a0,1574 # 80022be8 <__func__.2+0x380>
    8000e5ca:	6a6120ef          	jal	80020c70 <printf>
    8000e5ce:	4511                	li	a0,4
    8000e5d0:	d08f20ef          	jal	80000ad8 <goto_priv>
    8000e5d4:	dd5f20ef          	jal	800013a8 <reset_state>
}
    8000e5d8:	60e2                	ld	ra,24(sp)
    8000e5da:	6442                	ld	s0,16(sp)
    8000e5dc:	8526                	mv	a0,s1
    8000e5de:	64a2                	ld	s1,8(sp)
    8000e5e0:	6105                	addi	sp,sp,32
    8000e5e2:	8082                	ret

000000008000e5e4 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    8000e5e4:	1101                	addi	sp,sp,-32

    TEST_START();
    8000e5e6:	00013597          	auipc	a1,0x13
    8000e5ea:	38a58593          	addi	a1,a1,906 # 80021970 <__func__.0>
    8000e5ee:	00014517          	auipc	a0,0x14
    8000e5f2:	56250513          	addi	a0,a0,1378 # 80022b50 <__func__.2+0x2e8>
bool illegal_except_14() {
    8000e5f6:	ec06                	sd	ra,24(sp)
    8000e5f8:	e822                	sd	s0,16(sp)
    8000e5fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e5fc:	674120ef          	jal	80020c70 <printf>
    8000e600:	4529                	li	a0,10
    8000e602:	4ff110ef          	jal	80020300 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8000e606:	0330000f          	fence	rw,rw
    8000e60a:	00037417          	auipc	s0,0x37
    8000e60e:	a0640413          	addi	s0,s0,-1530 # 80045010 <excpt>
    8000e612:	4785                	li	a5,1
    8000e614:	00037717          	auipc	a4,0x37
    8000e618:	a2073a23          	sd	zero,-1484(a4) # 80045048 <excpt+0x38>
    8000e61c:	00f41023          	sh	a5,0(s0)
    8000e620:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e624:	4511                	li	a0,4
    8000e626:	cb2f20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8000e62a:	004007b7          	lui	a5,0x400
    8000e62e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8000e632:	450d                	li	a0,3
    8000e634:	ca4f20ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VU);
    8000e638:	4501                	li	a0,0
    8000e63a:	bbef20ef          	jal	800009f8 <set_prev_priv>
    asm volatile(
    8000e63e:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000e642:	08200593          	li	a1,130
    8000e646:	00017617          	auipc	a2,0x17
    8000e64a:	29260613          	addi	a2,a2,658 # 800258d8 <__func__.2+0x3070>
    8000e64e:	00014517          	auipc	a0,0x14
    8000e652:	51a50513          	addi	a0,a0,1306 # 80022b68 <__func__.2+0x300>
    8000e656:	61a120ef          	jal	80020c70 <printf>
    8000e65a:	00037797          	auipc	a5,0x37
    8000e65e:	9b77c783          	lbu	a5,-1609(a5) # 80045011 <excpt+0x1>
    8000e662:	00014597          	auipc	a1,0x14
    8000e666:	4de58593          	addi	a1,a1,1246 # 80022b40 <__func__.2+0x2d8>
    8000e66a:	cf89                	beqz	a5,8000e684 <illegal_except_14+0xa0>
    8000e66c:	6418                	ld	a4,8(s0)
    8000e66e:	4789                	li	a5,2
    8000e670:	00014597          	auipc	a1,0x14
    8000e674:	4c058593          	addi	a1,a1,1216 # 80022b30 <__func__.2+0x2c8>
    8000e678:	00f70663          	beq	a4,a5,8000e684 <illegal_except_14+0xa0>
    8000e67c:	00014597          	auipc	a1,0x14
    8000e680:	4c458593          	addi	a1,a1,1220 # 80022b40 <__func__.2+0x2d8>
    8000e684:	00014517          	auipc	a0,0x14
    8000e688:	4fc50513          	addi	a0,a0,1276 # 80022b80 <__func__.2+0x318>
    8000e68c:	5e4120ef          	jal	80020c70 <printf>
    8000e690:	00037797          	auipc	a5,0x37
    8000e694:	9817c783          	lbu	a5,-1663(a5) # 80045011 <excpt+0x1>
    8000e698:	c789                	beqz	a5,8000e6a2 <illegal_except_14+0xbe>
    8000e69a:	6418                	ld	a4,8(s0)
    8000e69c:	4789                	li	a5,2
    8000e69e:	00f70c63          	beq	a4,a5,8000e6b6 <illegal_except_14+0xd2>
    8000e6a2:	00014517          	auipc	a0,0x14
    8000e6a6:	4e650513          	addi	a0,a0,1254 # 80022b88 <__func__.2+0x320>
    8000e6aa:	5c6120ef          	jal	80020c70 <printf>
    8000e6ae:	02900513          	li	a0,41
    8000e6b2:	44f110ef          	jal	80020300 <putchar>
    8000e6b6:	4529                	li	a0,10
    8000e6b8:	449110ef          	jal	80020300 <putchar>
    8000e6bc:	00037497          	auipc	s1,0x37
    8000e6c0:	9554c483          	lbu	s1,-1707(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000e6c4:	00014597          	auipc	a1,0x14
    8000e6c8:	47c58593          	addi	a1,a1,1148 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000e6cc:	cc91                	beqz	s1,8000e6e8 <illegal_except_14+0x104>
    8000e6ce:	6418                	ld	a4,8(s0)
    8000e6d0:	4789                	li	a5,2
    TEST_END();
    8000e6d2:	00014597          	auipc	a1,0x14
    8000e6d6:	45e58593          	addi	a1,a1,1118 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000e6da:	00f70763          	beq	a4,a5,8000e6e8 <illegal_except_14+0x104>
    8000e6de:	4481                	li	s1,0
    TEST_END();
    8000e6e0:	00014597          	auipc	a1,0x14
    8000e6e4:	46058593          	addi	a1,a1,1120 # 80022b40 <__func__.2+0x2d8>
    8000e6e8:	00014517          	auipc	a0,0x14
    8000e6ec:	50050513          	addi	a0,a0,1280 # 80022be8 <__func__.2+0x380>
    8000e6f0:	580120ef          	jal	80020c70 <printf>
    8000e6f4:	4511                	li	a0,4
    8000e6f6:	be2f20ef          	jal	80000ad8 <goto_priv>
    8000e6fa:	caff20ef          	jal	800013a8 <reset_state>

}
    8000e6fe:	60e2                	ld	ra,24(sp)
    8000e700:	6442                	ld	s0,16(sp)
    8000e702:	8526                	mv	a0,s1
    8000e704:	64a2                	ld	s1,8(sp)
    8000e706:	6105                	addi	sp,sp,32
    8000e708:	8082                	ret

000000008000e70a <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    8000e70a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000e70c:	00013597          	auipc	a1,0x13
    8000e710:	27c58593          	addi	a1,a1,636 # 80021988 <__func__.2>
    8000e714:	00014517          	auipc	a0,0x14
    8000e718:	43c50513          	addi	a0,a0,1084 # 80022b50 <__func__.2+0x2e8>
bool external_interrupt_MEI() {
    8000e71c:	ec06                	sd	ra,24(sp)
    8000e71e:	e822                	sd	s0,16(sp)
    8000e720:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e722:	54e120ef          	jal	80020c70 <printf>
    8000e726:	4529                	li	a0,10
    8000e728:	3d9110ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000e72c:	0330000f          	fence	rw,rw
    8000e730:	00037497          	auipc	s1,0x37
    8000e734:	8e048493          	addi	s1,s1,-1824 # 80045010 <excpt>
    8000e738:	4785                	li	a5,1
    8000e73a:	00037717          	auipc	a4,0x37
    8000e73e:	90073723          	sd	zero,-1778(a4) # 80045048 <excpt+0x38>
    8000e742:	00f49023          	sh	a5,0(s1)
    8000e746:	0330000f          	fence	rw,rw

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    8000e74a:	4511                	li	a0,4
    8000e74c:	b8cf20ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000e750:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000e754:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    8000e758:	6785                	lui	a5,0x1
    8000e75a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e75e:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    8000e762:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000e766:	4511                	li	a0,4
    8000e768:	b70f20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e76c:	08200593          	li	a1,130
    8000e770:	00017617          	auipc	a2,0x17
    8000e774:	19860613          	addi	a2,a2,408 # 80025908 <__func__.2+0x30a0>
    8000e778:	00014517          	auipc	a0,0x14
    8000e77c:	3f050513          	addi	a0,a0,1008 # 80022b68 <__func__.2+0x300>
    8000e780:	4f0120ef          	jal	80020c70 <printf>
    8000e784:	00037797          	auipc	a5,0x37
    8000e788:	88d7c783          	lbu	a5,-1907(a5) # 80045011 <excpt+0x1>
    8000e78c:	00014597          	auipc	a1,0x14
    8000e790:	3b458593          	addi	a1,a1,948 # 80022b40 <__func__.2+0x2d8>
    8000e794:	cf99                	beqz	a5,8000e7b2 <external_interrupt_MEI+0xa8>
    8000e796:	57fd                	li	a5,-1
    8000e798:	6498                	ld	a4,8(s1)
    8000e79a:	17fe                	slli	a5,a5,0x3f
    8000e79c:	07ad                	addi	a5,a5,11
    8000e79e:	00014597          	auipc	a1,0x14
    8000e7a2:	39258593          	addi	a1,a1,914 # 80022b30 <__func__.2+0x2c8>
    8000e7a6:	00f70663          	beq	a4,a5,8000e7b2 <external_interrupt_MEI+0xa8>
    8000e7aa:	00014597          	auipc	a1,0x14
    8000e7ae:	39658593          	addi	a1,a1,918 # 80022b40 <__func__.2+0x2d8>
    8000e7b2:	00014517          	auipc	a0,0x14
    8000e7b6:	3ce50513          	addi	a0,a0,974 # 80022b80 <__func__.2+0x318>
    8000e7ba:	4b6120ef          	jal	80020c70 <printf>
    8000e7be:	00037797          	auipc	a5,0x37
    8000e7c2:	8537c783          	lbu	a5,-1965(a5) # 80045011 <excpt+0x1>
    8000e7c6:	c799                	beqz	a5,8000e7d4 <external_interrupt_MEI+0xca>
    8000e7c8:	57fd                	li	a5,-1
    8000e7ca:	6498                	ld	a4,8(s1)
    8000e7cc:	17fe                	slli	a5,a5,0x3f
    8000e7ce:	07ad                	addi	a5,a5,11
    8000e7d0:	00f70c63          	beq	a4,a5,8000e7e8 <external_interrupt_MEI+0xde>
    8000e7d4:	00014517          	auipc	a0,0x14
    8000e7d8:	3b450513          	addi	a0,a0,948 # 80022b88 <__func__.2+0x320>
    8000e7dc:	494120ef          	jal	80020c70 <printf>
    8000e7e0:	02900513          	li	a0,41
    8000e7e4:	31d110ef          	jal	80020300 <putchar>
    8000e7e8:	4529                	li	a0,10
    8000e7ea:	317110ef          	jal	80020300 <putchar>
    8000e7ee:	00037797          	auipc	a5,0x37
    8000e7f2:	8237c783          	lbu	a5,-2013(a5) # 80045011 <excpt+0x1>
    8000e7f6:	4401                	li	s0,0
    8000e7f8:	c799                	beqz	a5,8000e806 <external_interrupt_MEI+0xfc>
    8000e7fa:	6480                	ld	s0,8(s1)
    8000e7fc:	57ad                	li	a5,-21
    8000e7fe:	8385                	srli	a5,a5,0x1
    8000e800:	943e                	add	s0,s0,a5
    8000e802:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    8000e806:	0330000f          	fence	rw,rw
    8000e80a:	4785                	li	a5,1
    8000e80c:	00037717          	auipc	a4,0x37
    8000e810:	82073e23          	sd	zero,-1988(a4) # 80045048 <excpt+0x38>
    8000e814:	00f49023          	sh	a5,0(s1)
    8000e818:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e81c:	4511                	li	a0,4
    8000e81e:	abaf20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e822:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000e826:	6785                	lui	a5,0x1
    8000e828:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e82c:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000e830:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000e834:	4511                	li	a0,4
    8000e836:	aa2f20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000e83a:	08200593          	li	a1,130
    8000e83e:	00017617          	auipc	a2,0x17
    8000e842:	12a60613          	addi	a2,a2,298 # 80025968 <__func__.2+0x3100>
    8000e846:	00014517          	auipc	a0,0x14
    8000e84a:	32250513          	addi	a0,a0,802 # 80022b68 <__func__.2+0x300>
    8000e84e:	422120ef          	jal	80020c70 <printf>
    8000e852:	00036797          	auipc	a5,0x36
    8000e856:	7bf7c783          	lbu	a5,1983(a5) # 80045011 <excpt+0x1>
    8000e85a:	00014597          	auipc	a1,0x14
    8000e85e:	2e658593          	addi	a1,a1,742 # 80022b40 <__func__.2+0x2d8>
    8000e862:	e789                	bnez	a5,8000e86c <external_interrupt_MEI+0x162>
    8000e864:	00014597          	auipc	a1,0x14
    8000e868:	2cc58593          	addi	a1,a1,716 # 80022b30 <__func__.2+0x2c8>
    8000e86c:	00014517          	auipc	a0,0x14
    8000e870:	31450513          	addi	a0,a0,788 # 80022b80 <__func__.2+0x318>
    8000e874:	3fc120ef          	jal	80020c70 <printf>
    8000e878:	00036797          	auipc	a5,0x36
    8000e87c:	7997c783          	lbu	a5,1945(a5) # 80045011 <excpt+0x1>
    8000e880:	280795e3          	bnez	a5,8000f30a <external_interrupt_MEI+0xc00>
    8000e884:	4529                	li	a0,10
    8000e886:	27b110ef          	jal	80020300 <putchar>
    8000e88a:	c419                	beqz	s0,8000e898 <external_interrupt_MEI+0x18e>
    8000e88c:	00036417          	auipc	s0,0x36
    8000e890:	78544403          	lbu	s0,1925(s0) # 80045011 <excpt+0x1>
    8000e894:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    8000e898:	0330000f          	fence	rw,rw
    8000e89c:	4785                	li	a5,1
    8000e89e:	00036717          	auipc	a4,0x36
    8000e8a2:	7a073523          	sd	zero,1962(a4) # 80045048 <excpt+0x38>
    8000e8a6:	00f49023          	sh	a5,0(s1)
    8000e8aa:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e8ae:	4511                	li	a0,4
    8000e8b0:	a28f20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e8b4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e8b8:	6785                	lui	a5,0x1
    8000e8ba:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e8be:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e8c2:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000e8c6:	4511                	li	a0,4
    8000e8c8:	a10f20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000e8cc:	08200593          	li	a1,130
    8000e8d0:	00017617          	auipc	a2,0x17
    8000e8d4:	0f060613          	addi	a2,a2,240 # 800259c0 <__func__.2+0x3158>
    8000e8d8:	00014517          	auipc	a0,0x14
    8000e8dc:	29050513          	addi	a0,a0,656 # 80022b68 <__func__.2+0x300>
    8000e8e0:	390120ef          	jal	80020c70 <printf>
    8000e8e4:	00036797          	auipc	a5,0x36
    8000e8e8:	72d7c783          	lbu	a5,1837(a5) # 80045011 <excpt+0x1>
    8000e8ec:	00014597          	auipc	a1,0x14
    8000e8f0:	25458593          	addi	a1,a1,596 # 80022b40 <__func__.2+0x2d8>
    8000e8f4:	cf99                	beqz	a5,8000e912 <external_interrupt_MEI+0x208>
    8000e8f6:	57fd                	li	a5,-1
    8000e8f8:	6498                	ld	a4,8(s1)
    8000e8fa:	17fe                	slli	a5,a5,0x3f
    8000e8fc:	07ad                	addi	a5,a5,11
    8000e8fe:	00014597          	auipc	a1,0x14
    8000e902:	23258593          	addi	a1,a1,562 # 80022b30 <__func__.2+0x2c8>
    8000e906:	00f70663          	beq	a4,a5,8000e912 <external_interrupt_MEI+0x208>
    8000e90a:	00014597          	auipc	a1,0x14
    8000e90e:	23658593          	addi	a1,a1,566 # 80022b40 <__func__.2+0x2d8>
    8000e912:	00014517          	auipc	a0,0x14
    8000e916:	26e50513          	addi	a0,a0,622 # 80022b80 <__func__.2+0x318>
    8000e91a:	356120ef          	jal	80020c70 <printf>
    8000e91e:	00036797          	auipc	a5,0x36
    8000e922:	6f37c783          	lbu	a5,1779(a5) # 80045011 <excpt+0x1>
    8000e926:	c799                	beqz	a5,8000e934 <external_interrupt_MEI+0x22a>
    8000e928:	57fd                	li	a5,-1
    8000e92a:	6498                	ld	a4,8(s1)
    8000e92c:	17fe                	slli	a5,a5,0x3f
    8000e92e:	07ad                	addi	a5,a5,11
    8000e930:	00f70c63          	beq	a4,a5,8000e948 <external_interrupt_MEI+0x23e>
    8000e934:	00014517          	auipc	a0,0x14
    8000e938:	25450513          	addi	a0,a0,596 # 80022b88 <__func__.2+0x320>
    8000e93c:	334120ef          	jal	80020c70 <printf>
    8000e940:	02900513          	li	a0,41
    8000e944:	1bd110ef          	jal	80020300 <putchar>
    8000e948:	4529                	li	a0,10
    8000e94a:	1b7110ef          	jal	80020300 <putchar>
    8000e94e:	c801                	beqz	s0,8000e95e <external_interrupt_MEI+0x254>
    8000e950:	00036797          	auipc	a5,0x36
    8000e954:	6c17c783          	lbu	a5,1729(a5) # 80045011 <excpt+0x1>
    8000e958:	4401                	li	s0,0
    8000e95a:	100798e3          	bnez	a5,8000f26a <external_interrupt_MEI+0xb60>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8000e95e:	0330000f          	fence	rw,rw
    8000e962:	4785                	li	a5,1
    8000e964:	00036717          	auipc	a4,0x36
    8000e968:	6e073223          	sd	zero,1764(a4) # 80045048 <excpt+0x38>
    8000e96c:	00f49023          	sh	a5,0(s1)
    8000e970:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000e974:	4511                	li	a0,4
    8000e976:	962f20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000e97a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e97e:	6785                	lui	a5,0x1
    8000e980:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e984:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000e988:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000e98c:	4511                	li	a0,4
    8000e98e:	94af20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000e992:	08200593          	li	a1,130
    8000e996:	00017617          	auipc	a2,0x17
    8000e99a:	08a60613          	addi	a2,a2,138 # 80025a20 <__func__.2+0x31b8>
    8000e99e:	00014517          	auipc	a0,0x14
    8000e9a2:	1ca50513          	addi	a0,a0,458 # 80022b68 <__func__.2+0x300>
    8000e9a6:	2ca120ef          	jal	80020c70 <printf>
    8000e9aa:	00036797          	auipc	a5,0x36
    8000e9ae:	6677c783          	lbu	a5,1639(a5) # 80045011 <excpt+0x1>
    8000e9b2:	00014597          	auipc	a1,0x14
    8000e9b6:	18e58593          	addi	a1,a1,398 # 80022b40 <__func__.2+0x2d8>
    8000e9ba:	e789                	bnez	a5,8000e9c4 <external_interrupt_MEI+0x2ba>
    8000e9bc:	00014597          	auipc	a1,0x14
    8000e9c0:	17458593          	addi	a1,a1,372 # 80022b30 <__func__.2+0x2c8>
    8000e9c4:	00014517          	auipc	a0,0x14
    8000e9c8:	1bc50513          	addi	a0,a0,444 # 80022b80 <__func__.2+0x318>
    8000e9cc:	2a4120ef          	jal	80020c70 <printf>
    8000e9d0:	00036797          	auipc	a5,0x36
    8000e9d4:	6417c783          	lbu	a5,1601(a5) # 80045011 <excpt+0x1>
    8000e9d8:	1a0793e3          	bnez	a5,8000f37e <external_interrupt_MEI+0xc74>
    8000e9dc:	4529                	li	a0,10
    8000e9de:	123110ef          	jal	80020300 <putchar>
    8000e9e2:	c419                	beqz	s0,8000e9f0 <external_interrupt_MEI+0x2e6>
    8000e9e4:	00036417          	auipc	s0,0x36
    8000e9e8:	62d44403          	lbu	s0,1581(s0) # 80045011 <excpt+0x1>
    8000e9ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000e9f0:	0330000f          	fence	rw,rw
    8000e9f4:	4785                	li	a5,1
    8000e9f6:	00036717          	auipc	a4,0x36
    8000e9fa:	64073923          	sd	zero,1618(a4) # 80045048 <excpt+0x38>
    8000e9fe:	00f49023          	sh	a5,0(s1)
    8000ea02:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ea06:	4511                	li	a0,4
    8000ea08:	8d0f20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000ea0c:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ea10:	6785                	lui	a5,0x1
    8000ea12:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000ea16:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000ea1a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000ea1e:	4511                	li	a0,4
    8000ea20:	8b8f20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000ea24:	08200593          	li	a1,130
    8000ea28:	00017617          	auipc	a2,0x17
    8000ea2c:	05060613          	addi	a2,a2,80 # 80025a78 <__func__.2+0x3210>
    8000ea30:	00014517          	auipc	a0,0x14
    8000ea34:	13850513          	addi	a0,a0,312 # 80022b68 <__func__.2+0x300>
    8000ea38:	238120ef          	jal	80020c70 <printf>
    8000ea3c:	00036797          	auipc	a5,0x36
    8000ea40:	5d57c783          	lbu	a5,1493(a5) # 80045011 <excpt+0x1>
    8000ea44:	00014597          	auipc	a1,0x14
    8000ea48:	0fc58593          	addi	a1,a1,252 # 80022b40 <__func__.2+0x2d8>
    8000ea4c:	e789                	bnez	a5,8000ea56 <external_interrupt_MEI+0x34c>
    8000ea4e:	00014597          	auipc	a1,0x14
    8000ea52:	0e258593          	addi	a1,a1,226 # 80022b30 <__func__.2+0x2c8>
    8000ea56:	00014517          	auipc	a0,0x14
    8000ea5a:	12a50513          	addi	a0,a0,298 # 80022b80 <__func__.2+0x318>
    8000ea5e:	212120ef          	jal	80020c70 <printf>
    8000ea62:	00036797          	auipc	a5,0x36
    8000ea66:	5af7c783          	lbu	a5,1455(a5) # 80045011 <excpt+0x1>
    8000ea6a:	0e079ee3          	bnez	a5,8000f366 <external_interrupt_MEI+0xc5c>
    8000ea6e:	4529                	li	a0,10
    8000ea70:	091110ef          	jal	80020300 <putchar>
    8000ea74:	c419                	beqz	s0,8000ea82 <external_interrupt_MEI+0x378>
    8000ea76:	00036417          	auipc	s0,0x36
    8000ea7a:	59b44403          	lbu	s0,1435(s0) # 80045011 <excpt+0x1>
    8000ea7e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000ea82:	0330000f          	fence	rw,rw
    8000ea86:	4785                	li	a5,1
    8000ea88:	00036717          	auipc	a4,0x36
    8000ea8c:	5c073023          	sd	zero,1472(a4) # 80045048 <excpt+0x38>
    8000ea90:	00f49023          	sh	a5,0(s1)
    8000ea94:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ea98:	4511                	li	a0,4
    8000ea9a:	83ef20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000ea9e:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000eaa2:	6785                	lui	a5,0x1
    8000eaa4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000eaa8:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000eaac:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000eab0:	4511                	li	a0,4
    8000eab2:	826f20ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000eab6:	08200593          	li	a1,130
    8000eaba:	00017617          	auipc	a2,0x17
    8000eabe:	01660613          	addi	a2,a2,22 # 80025ad0 <__func__.2+0x3268>
    8000eac2:	00014517          	auipc	a0,0x14
    8000eac6:	0a650513          	addi	a0,a0,166 # 80022b68 <__func__.2+0x300>
    8000eaca:	1a6120ef          	jal	80020c70 <printf>
    8000eace:	00036797          	auipc	a5,0x36
    8000ead2:	5437c783          	lbu	a5,1347(a5) # 80045011 <excpt+0x1>
    8000ead6:	00014597          	auipc	a1,0x14
    8000eada:	06a58593          	addi	a1,a1,106 # 80022b40 <__func__.2+0x2d8>
    8000eade:	e789                	bnez	a5,8000eae8 <external_interrupt_MEI+0x3de>
    8000eae0:	00014597          	auipc	a1,0x14
    8000eae4:	05058593          	addi	a1,a1,80 # 80022b30 <__func__.2+0x2c8>
    8000eae8:	00014517          	auipc	a0,0x14
    8000eaec:	09850513          	addi	a0,a0,152 # 80022b80 <__func__.2+0x318>
    8000eaf0:	180120ef          	jal	80020c70 <printf>
    8000eaf4:	00036797          	auipc	a5,0x36
    8000eaf8:	51d7c783          	lbu	a5,1309(a5) # 80045011 <excpt+0x1>
    8000eafc:	040799e3          	bnez	a5,8000f34e <external_interrupt_MEI+0xc44>
    8000eb00:	4529                	li	a0,10
    8000eb02:	7fe110ef          	jal	80020300 <putchar>
    8000eb06:	c419                	beqz	s0,8000eb14 <external_interrupt_MEI+0x40a>
    8000eb08:	00036417          	auipc	s0,0x36
    8000eb0c:	50944403          	lbu	s0,1289(s0) # 80045011 <excpt+0x1>
    8000eb10:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000eb14:	0330000f          	fence	rw,rw
    8000eb18:	4785                	li	a5,1
    8000eb1a:	00036717          	auipc	a4,0x36
    8000eb1e:	52073723          	sd	zero,1326(a4) # 80045048 <excpt+0x38>
    8000eb22:	00f49023          	sh	a5,0(s1)
    8000eb26:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000eb2a:	4511                	li	a0,4
    8000eb2c:	fadf10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000eb30:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000eb34:	6785                	lui	a5,0x1
    8000eb36:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000eb3a:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000eb3e:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    8000eb42:	450d                	li	a0,3
    8000eb44:	f95f10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000eb48:	08200593          	li	a1,130
    8000eb4c:	00017617          	auipc	a2,0x17
    8000eb50:	fdc60613          	addi	a2,a2,-36 # 80025b28 <__func__.2+0x32c0>
    8000eb54:	00014517          	auipc	a0,0x14
    8000eb58:	01450513          	addi	a0,a0,20 # 80022b68 <__func__.2+0x300>
    8000eb5c:	114120ef          	jal	80020c70 <printf>
    8000eb60:	6094                	ld	a3,0(s1)
    8000eb62:	f0001737          	lui	a4,0xf0001
    8000eb66:	0712                	slli	a4,a4,0x4
    8000eb68:	4785                	li	a5,1
    8000eb6a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eb6e:	178a                	slli	a5,a5,0x22
    8000eb70:	8f75                	and	a4,a4,a3
    8000eb72:	10078793          	addi	a5,a5,256
    8000eb76:	00014597          	auipc	a1,0x14
    8000eb7a:	fca58593          	addi	a1,a1,-54 # 80022b40 <__func__.2+0x2d8>
    8000eb7e:	00f71663          	bne	a4,a5,8000eb8a <external_interrupt_MEI+0x480>
    8000eb82:	00014597          	auipc	a1,0x14
    8000eb86:	fae58593          	addi	a1,a1,-82 # 80022b30 <__func__.2+0x2c8>
    8000eb8a:	00014517          	auipc	a0,0x14
    8000eb8e:	ff650513          	addi	a0,a0,-10 # 80022b80 <__func__.2+0x318>
    8000eb92:	0de120ef          	jal	80020c70 <printf>
    8000eb96:	00036797          	auipc	a5,0x36
    8000eb9a:	47b7c783          	lbu	a5,1147(a5) # 80045011 <excpt+0x1>
    8000eb9e:	cb81                	beqz	a5,8000ebae <external_interrupt_MEI+0x4a4>
    8000eba0:	00036717          	auipc	a4,0x36
    8000eba4:	47472703          	lw	a4,1140(a4) # 80045014 <excpt+0x4>
    8000eba8:	4791                	li	a5,4
    8000ebaa:	00f70c63          	beq	a4,a5,8000ebc2 <external_interrupt_MEI+0x4b8>
    8000ebae:	00014517          	auipc	a0,0x14
    8000ebb2:	fda50513          	addi	a0,a0,-38 # 80022b88 <__func__.2+0x320>
    8000ebb6:	0ba120ef          	jal	80020c70 <printf>
    8000ebba:	02900513          	li	a0,41
    8000ebbe:	742110ef          	jal	80020300 <putchar>
    8000ebc2:	4529                	li	a0,10
    8000ebc4:	73c110ef          	jal	80020300 <putchar>
    8000ebc8:	cc19                	beqz	s0,8000ebe6 <external_interrupt_MEI+0x4dc>
    8000ebca:	6080                	ld	s0,0(s1)
    8000ebcc:	f0001737          	lui	a4,0xf0001
    8000ebd0:	0712                	slli	a4,a4,0x4
    8000ebd2:	57fd                	li	a5,-1
    8000ebd4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ebd8:	178a                	slli	a5,a5,0x22
    8000ebda:	8c79                	and	s0,s0,a4
    8000ebdc:	f0078793          	addi	a5,a5,-256
    8000ebe0:	943e                	add	s0,s0,a5
    8000ebe2:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000ebe6:	0330000f          	fence	rw,rw
    8000ebea:	4785                	li	a5,1
    8000ebec:	00036717          	auipc	a4,0x36
    8000ebf0:	44073e23          	sd	zero,1116(a4) # 80045048 <excpt+0x38>
    8000ebf4:	00f49023          	sh	a5,0(s1)
    8000ebf8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ebfc:	4511                	li	a0,4
    8000ebfe:	edbf10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000ec02:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ec06:	6785                	lui	a5,0x1
    8000ec08:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000ec0c:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000ec10:	577d                	li	a4,-1
    8000ec12:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000ec16:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000ec1a:	450d                	li	a0,3
    8000ec1c:	ebdf10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000ec20:	08200593          	li	a1,130
    8000ec24:	00017617          	auipc	a2,0x17
    8000ec28:	f5c60613          	addi	a2,a2,-164 # 80025b80 <__func__.2+0x3318>
    8000ec2c:	00014517          	auipc	a0,0x14
    8000ec30:	f3c50513          	addi	a0,a0,-196 # 80022b68 <__func__.2+0x300>
    8000ec34:	03c120ef          	jal	80020c70 <printf>
    8000ec38:	6094                	ld	a3,0(s1)
    8000ec3a:	f0001737          	lui	a4,0xf0001
    8000ec3e:	0712                	slli	a4,a4,0x4
    8000ec40:	478d                	li	a5,3
    8000ec42:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ec46:	1782                	slli	a5,a5,0x20
    8000ec48:	8f75                	and	a4,a4,a3
    8000ec4a:	10078793          	addi	a5,a5,256
    8000ec4e:	00014597          	auipc	a1,0x14
    8000ec52:	ef258593          	addi	a1,a1,-270 # 80022b40 <__func__.2+0x2d8>
    8000ec56:	00f71663          	bne	a4,a5,8000ec62 <external_interrupt_MEI+0x558>
    8000ec5a:	00014597          	auipc	a1,0x14
    8000ec5e:	ed658593          	addi	a1,a1,-298 # 80022b30 <__func__.2+0x2c8>
    8000ec62:	00014517          	auipc	a0,0x14
    8000ec66:	f1e50513          	addi	a0,a0,-226 # 80022b80 <__func__.2+0x318>
    8000ec6a:	006120ef          	jal	80020c70 <printf>
    8000ec6e:	00036797          	auipc	a5,0x36
    8000ec72:	3a37c783          	lbu	a5,931(a5) # 80045011 <excpt+0x1>
    8000ec76:	cb81                	beqz	a5,8000ec86 <external_interrupt_MEI+0x57c>
    8000ec78:	00036717          	auipc	a4,0x36
    8000ec7c:	39c72703          	lw	a4,924(a4) # 80045014 <excpt+0x4>
    8000ec80:	478d                	li	a5,3
    8000ec82:	00f70c63          	beq	a4,a5,8000ec9a <external_interrupt_MEI+0x590>
    8000ec86:	00014517          	auipc	a0,0x14
    8000ec8a:	f0250513          	addi	a0,a0,-254 # 80022b88 <__func__.2+0x320>
    8000ec8e:	7e3110ef          	jal	80020c70 <printf>
    8000ec92:	02900513          	li	a0,41
    8000ec96:	66a110ef          	jal	80020300 <putchar>
    8000ec9a:	4529                	li	a0,10
    8000ec9c:	664110ef          	jal	80020300 <putchar>
    8000eca0:	cc19                	beqz	s0,8000ecbe <external_interrupt_MEI+0x5b4>
    8000eca2:	6080                	ld	s0,0(s1)
    8000eca4:	f0001737          	lui	a4,0xf0001
    8000eca8:	0712                	slli	a4,a4,0x4
    8000ecaa:	57f5                	li	a5,-3
    8000ecac:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ecb0:	1782                	slli	a5,a5,0x20
    8000ecb2:	8c79                	and	s0,s0,a4
    8000ecb4:	f0078793          	addi	a5,a5,-256
    8000ecb8:	943e                	add	s0,s0,a5
    8000ecba:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000ecbe:	0330000f          	fence	rw,rw
    8000ecc2:	4785                	li	a5,1
    8000ecc4:	00036717          	auipc	a4,0x36
    8000ecc8:	38073223          	sd	zero,900(a4) # 80045048 <excpt+0x38>
    8000eccc:	00f49023          	sh	a5,0(s1)
    8000ecd0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ecd4:	4511                	li	a0,4
    8000ecd6:	e03f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000ecda:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000ecde:	6785                	lui	a5,0x1
    8000ece0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000ece4:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000ece8:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000ecec:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000ecf0:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000ecf4:	450d                	li	a0,3
    8000ecf6:	de3f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000ecfa:	08200593          	li	a1,130
    8000ecfe:	00017617          	auipc	a2,0x17
    8000ed02:	eda60613          	addi	a2,a2,-294 # 80025bd8 <__func__.2+0x3370>
    8000ed06:	00014517          	auipc	a0,0x14
    8000ed0a:	e6250513          	addi	a0,a0,-414 # 80022b68 <__func__.2+0x300>
    8000ed0e:	763110ef          	jal	80020c70 <printf>
    8000ed12:	00036797          	auipc	a5,0x36
    8000ed16:	2ff7c783          	lbu	a5,767(a5) # 80045011 <excpt+0x1>
    8000ed1a:	00014597          	auipc	a1,0x14
    8000ed1e:	e2658593          	addi	a1,a1,-474 # 80022b40 <__func__.2+0x2d8>
    8000ed22:	e789                	bnez	a5,8000ed2c <external_interrupt_MEI+0x622>
    8000ed24:	00014597          	auipc	a1,0x14
    8000ed28:	e0c58593          	addi	a1,a1,-500 # 80022b30 <__func__.2+0x2c8>
    8000ed2c:	00014517          	auipc	a0,0x14
    8000ed30:	e5450513          	addi	a0,a0,-428 # 80022b80 <__func__.2+0x318>
    8000ed34:	73d110ef          	jal	80020c70 <printf>
    8000ed38:	00036797          	auipc	a5,0x36
    8000ed3c:	2d97c783          	lbu	a5,729(a5) # 80045011 <excpt+0x1>
    8000ed40:	5e079c63          	bnez	a5,8000f338 <external_interrupt_MEI+0xc2e>
    8000ed44:	4529                	li	a0,10
    8000ed46:	5ba110ef          	jal	80020300 <putchar>
    8000ed4a:	c419                	beqz	s0,8000ed58 <external_interrupt_MEI+0x64e>
    8000ed4c:	00036417          	auipc	s0,0x36
    8000ed50:	2c544403          	lbu	s0,709(s0) # 80045011 <excpt+0x1>
    8000ed54:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000ed58:	0330000f          	fence	rw,rw
    8000ed5c:	4785                	li	a5,1
    8000ed5e:	00036717          	auipc	a4,0x36
    8000ed62:	2e073523          	sd	zero,746(a4) # 80045048 <excpt+0x38>
    8000ed66:	00f49023          	sh	a5,0(s1)
    8000ed6a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ed6e:	4511                	li	a0,4
    8000ed70:	d69f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000ed74:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ed78:	6785                	lui	a5,0x1
    8000ed7a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000ed7e:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000ed82:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000ed86:	450d                	li	a0,3
    8000ed88:	d51f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000ed8c:	08200593          	li	a1,130
    8000ed90:	00017617          	auipc	a2,0x17
    8000ed94:	ea060613          	addi	a2,a2,-352 # 80025c30 <__func__.2+0x33c8>
    8000ed98:	00014517          	auipc	a0,0x14
    8000ed9c:	dd050513          	addi	a0,a0,-560 # 80022b68 <__func__.2+0x300>
    8000eda0:	6d1110ef          	jal	80020c70 <printf>
    8000eda4:	00036797          	auipc	a5,0x36
    8000eda8:	26d7c783          	lbu	a5,621(a5) # 80045011 <excpt+0x1>
    8000edac:	00014597          	auipc	a1,0x14
    8000edb0:	d9458593          	addi	a1,a1,-620 # 80022b40 <__func__.2+0x2d8>
    8000edb4:	c799                	beqz	a5,8000edc2 <external_interrupt_MEI+0x6b8>
    8000edb6:	57fd                	li	a5,-1
    8000edb8:	6498                	ld	a4,8(s1)
    8000edba:	17fe                	slli	a5,a5,0x3f
    8000edbc:	07ad                	addi	a5,a5,11
    8000edbe:	5cf70c63          	beq	a4,a5,8000f396 <external_interrupt_MEI+0xc8c>
    8000edc2:	00014517          	auipc	a0,0x14
    8000edc6:	dbe50513          	addi	a0,a0,-578 # 80022b80 <__func__.2+0x318>
    8000edca:	6a7110ef          	jal	80020c70 <printf>
    8000edce:	00036797          	auipc	a5,0x36
    8000edd2:	2437c783          	lbu	a5,579(a5) # 80045011 <excpt+0x1>
    8000edd6:	c799                	beqz	a5,8000ede4 <external_interrupt_MEI+0x6da>
    8000edd8:	57fd                	li	a5,-1
    8000edda:	6498                	ld	a4,8(s1)
    8000eddc:	17fe                	slli	a5,a5,0x3f
    8000edde:	07ad                	addi	a5,a5,11
    8000ede0:	4ef70763          	beq	a4,a5,8000f2ce <external_interrupt_MEI+0xbc4>
    8000ede4:	00014517          	auipc	a0,0x14
    8000ede8:	da450513          	addi	a0,a0,-604 # 80022b88 <__func__.2+0x320>
    8000edec:	685110ef          	jal	80020c70 <printf>
    8000edf0:	02900513          	li	a0,41
    8000edf4:	50c110ef          	jal	80020300 <putchar>
    8000edf8:	4529                	li	a0,10
    8000edfa:	506110ef          	jal	80020300 <putchar>
    8000edfe:	c801                	beqz	s0,8000ee0e <external_interrupt_MEI+0x704>
    8000ee00:	00036797          	auipc	a5,0x36
    8000ee04:	2117c783          	lbu	a5,529(a5) # 80045011 <excpt+0x1>
    8000ee08:	4401                	li	s0,0
    8000ee0a:	48079c63          	bnez	a5,8000f2a2 <external_interrupt_MEI+0xb98>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000ee0e:	0330000f          	fence	rw,rw
    8000ee12:	4785                	li	a5,1
    8000ee14:	00036717          	auipc	a4,0x36
    8000ee18:	22073a23          	sd	zero,564(a4) # 80045048 <excpt+0x38>
    8000ee1c:	00f49023          	sh	a5,0(s1)
    8000ee20:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ee24:	4511                	li	a0,4
    8000ee26:	cb3f10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000ee2a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ee2e:	6785                	lui	a5,0x1
    8000ee30:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000ee34:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000ee38:	577d                	li	a4,-1
    8000ee3a:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    8000ee3e:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    8000ee42:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000ee46:	450d                	li	a0,3
    8000ee48:	c91f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000ee4c:	08200593          	li	a1,130
    8000ee50:	00017617          	auipc	a2,0x17
    8000ee54:	e3860613          	addi	a2,a2,-456 # 80025c88 <__func__.2+0x3420>
    8000ee58:	00014517          	auipc	a0,0x14
    8000ee5c:	d1050513          	addi	a0,a0,-752 # 80022b68 <__func__.2+0x300>
    8000ee60:	611110ef          	jal	80020c70 <printf>
    8000ee64:	00036797          	auipc	a5,0x36
    8000ee68:	1ad7c783          	lbu	a5,429(a5) # 80045011 <excpt+0x1>
    8000ee6c:	00014597          	auipc	a1,0x14
    8000ee70:	cd458593          	addi	a1,a1,-812 # 80022b40 <__func__.2+0x2d8>
    8000ee74:	e789                	bnez	a5,8000ee7e <external_interrupt_MEI+0x774>
    8000ee76:	00014597          	auipc	a1,0x14
    8000ee7a:	cba58593          	addi	a1,a1,-838 # 80022b30 <__func__.2+0x2c8>
    8000ee7e:	00014517          	auipc	a0,0x14
    8000ee82:	d0250513          	addi	a0,a0,-766 # 80022b80 <__func__.2+0x318>
    8000ee86:	5eb110ef          	jal	80020c70 <printf>
    8000ee8a:	00036797          	auipc	a5,0x36
    8000ee8e:	1877c783          	lbu	a5,391(a5) # 80045011 <excpt+0x1>
    8000ee92:	44079663          	bnez	a5,8000f2de <external_interrupt_MEI+0xbd4>
    8000ee96:	4529                	li	a0,10
    8000ee98:	468110ef          	jal	80020300 <putchar>
    8000ee9c:	c419                	beqz	s0,8000eeaa <external_interrupt_MEI+0x7a0>
    8000ee9e:	00036417          	auipc	s0,0x36
    8000eea2:	17344403          	lbu	s0,371(s0) # 80045011 <excpt+0x1>
    8000eea6:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000eeaa:	0330000f          	fence	rw,rw
    8000eeae:	4785                	li	a5,1
    8000eeb0:	00036717          	auipc	a4,0x36
    8000eeb4:	18073c23          	sd	zero,408(a4) # 80045048 <excpt+0x38>
    8000eeb8:	00f49023          	sh	a5,0(s1)
    8000eebc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000eec0:	4511                	li	a0,4
    8000eec2:	c17f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000eec6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000eeca:	6785                	lui	a5,0x1
    8000eecc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000eed0:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000eed4:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    8000eed8:	4509                	li	a0,2
    8000eeda:	bfff10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000eede:	08200593          	li	a1,130
    8000eee2:	00017617          	auipc	a2,0x17
    8000eee6:	df660613          	addi	a2,a2,-522 # 80025cd8 <__func__.2+0x3470>
    8000eeea:	00014517          	auipc	a0,0x14
    8000eeee:	c7e50513          	addi	a0,a0,-898 # 80022b68 <__func__.2+0x300>
    8000eef2:	57f110ef          	jal	80020c70 <printf>
    8000eef6:	6094                	ld	a3,0(s1)
    8000eef8:	f0001737          	lui	a4,0xf0001
    8000eefc:	0712                	slli	a4,a4,0x4
    8000eefe:	4785                	li	a5,1
    8000ef00:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef04:	178a                	slli	a5,a5,0x22
    8000ef06:	8f75                	and	a4,a4,a3
    8000ef08:	10078793          	addi	a5,a5,256
    8000ef0c:	00014597          	auipc	a1,0x14
    8000ef10:	c3458593          	addi	a1,a1,-972 # 80022b40 <__func__.2+0x2d8>
    8000ef14:	00f71663          	bne	a4,a5,8000ef20 <external_interrupt_MEI+0x816>
    8000ef18:	00014597          	auipc	a1,0x14
    8000ef1c:	c1858593          	addi	a1,a1,-1000 # 80022b30 <__func__.2+0x2c8>
    8000ef20:	00014517          	auipc	a0,0x14
    8000ef24:	c6050513          	addi	a0,a0,-928 # 80022b80 <__func__.2+0x318>
    8000ef28:	549110ef          	jal	80020c70 <printf>
    8000ef2c:	00036797          	auipc	a5,0x36
    8000ef30:	0e57c783          	lbu	a5,229(a5) # 80045011 <excpt+0x1>
    8000ef34:	cb81                	beqz	a5,8000ef44 <external_interrupt_MEI+0x83a>
    8000ef36:	00036717          	auipc	a4,0x36
    8000ef3a:	0de72703          	lw	a4,222(a4) # 80045014 <excpt+0x4>
    8000ef3e:	4791                	li	a5,4
    8000ef40:	00f70c63          	beq	a4,a5,8000ef58 <external_interrupt_MEI+0x84e>
    8000ef44:	00014517          	auipc	a0,0x14
    8000ef48:	c4450513          	addi	a0,a0,-956 # 80022b88 <__func__.2+0x320>
    8000ef4c:	525110ef          	jal	80020c70 <printf>
    8000ef50:	02900513          	li	a0,41
    8000ef54:	3ac110ef          	jal	80020300 <putchar>
    8000ef58:	4529                	li	a0,10
    8000ef5a:	3a6110ef          	jal	80020300 <putchar>
    8000ef5e:	cc19                	beqz	s0,8000ef7c <external_interrupt_MEI+0x872>
    8000ef60:	6080                	ld	s0,0(s1)
    8000ef62:	f0001737          	lui	a4,0xf0001
    8000ef66:	0712                	slli	a4,a4,0x4
    8000ef68:	57fd                	li	a5,-1
    8000ef6a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef6e:	178a                	slli	a5,a5,0x22
    8000ef70:	8c79                	and	s0,s0,a4
    8000ef72:	f0078793          	addi	a5,a5,-256
    8000ef76:	943e                	add	s0,s0,a5
    8000ef78:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000ef7c:	0330000f          	fence	rw,rw
    8000ef80:	4785                	li	a5,1
    8000ef82:	00036717          	auipc	a4,0x36
    8000ef86:	0c073323          	sd	zero,198(a4) # 80045048 <excpt+0x38>
    8000ef8a:	00f49023          	sh	a5,0(s1)
    8000ef8e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ef92:	4511                	li	a0,4
    8000ef94:	b45f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000ef98:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ef9c:	6785                	lui	a5,0x1
    8000ef9e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000efa2:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000efa6:	577d                	li	a4,-1
    8000efa8:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000efac:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000efb0:	4509                	li	a0,2
    8000efb2:	b27f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000efb6:	08200593          	li	a1,130
    8000efba:	00017617          	auipc	a2,0x17
    8000efbe:	d7e60613          	addi	a2,a2,-642 # 80025d38 <__func__.2+0x34d0>
    8000efc2:	00014517          	auipc	a0,0x14
    8000efc6:	ba650513          	addi	a0,a0,-1114 # 80022b68 <__func__.2+0x300>
    8000efca:	4a7110ef          	jal	80020c70 <printf>
    8000efce:	6094                	ld	a3,0(s1)
    8000efd0:	f0001737          	lui	a4,0xf0001
    8000efd4:	0712                	slli	a4,a4,0x4
    8000efd6:	4785                	li	a5,1
    8000efd8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000efdc:	1786                	slli	a5,a5,0x21
    8000efde:	8f75                	and	a4,a4,a3
    8000efe0:	10078793          	addi	a5,a5,256
    8000efe4:	00014597          	auipc	a1,0x14
    8000efe8:	b5c58593          	addi	a1,a1,-1188 # 80022b40 <__func__.2+0x2d8>
    8000efec:	00f71663          	bne	a4,a5,8000eff8 <external_interrupt_MEI+0x8ee>
    8000eff0:	00014597          	auipc	a1,0x14
    8000eff4:	b4058593          	addi	a1,a1,-1216 # 80022b30 <__func__.2+0x2c8>
    8000eff8:	00014517          	auipc	a0,0x14
    8000effc:	b8850513          	addi	a0,a0,-1144 # 80022b80 <__func__.2+0x318>
    8000f000:	471110ef          	jal	80020c70 <printf>
    8000f004:	00036797          	auipc	a5,0x36
    8000f008:	00d7c783          	lbu	a5,13(a5) # 80045011 <excpt+0x1>
    8000f00c:	cb81                	beqz	a5,8000f01c <external_interrupt_MEI+0x912>
    8000f00e:	00036717          	auipc	a4,0x36
    8000f012:	00672703          	lw	a4,6(a4) # 80045014 <excpt+0x4>
    8000f016:	4789                	li	a5,2
    8000f018:	00f70c63          	beq	a4,a5,8000f030 <external_interrupt_MEI+0x926>
    8000f01c:	00014517          	auipc	a0,0x14
    8000f020:	b6c50513          	addi	a0,a0,-1172 # 80022b88 <__func__.2+0x320>
    8000f024:	44d110ef          	jal	80020c70 <printf>
    8000f028:	02900513          	li	a0,41
    8000f02c:	2d4110ef          	jal	80020300 <putchar>
    8000f030:	4529                	li	a0,10
    8000f032:	2ce110ef          	jal	80020300 <putchar>
    8000f036:	cc19                	beqz	s0,8000f054 <external_interrupt_MEI+0x94a>
    8000f038:	6080                	ld	s0,0(s1)
    8000f03a:	f0001737          	lui	a4,0xf0001
    8000f03e:	0712                	slli	a4,a4,0x4
    8000f040:	57fd                	li	a5,-1
    8000f042:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f046:	1786                	slli	a5,a5,0x21
    8000f048:	8c79                	and	s0,s0,a4
    8000f04a:	f0078793          	addi	a5,a5,-256
    8000f04e:	943e                	add	s0,s0,a5
    8000f050:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000f054:	0330000f          	fence	rw,rw
    8000f058:	4785                	li	a5,1
    8000f05a:	00036717          	auipc	a4,0x36
    8000f05e:	fe073723          	sd	zero,-18(a4) # 80045048 <excpt+0x38>
    8000f062:	00f49023          	sh	a5,0(s1)
    8000f066:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f06a:	4511                	li	a0,4
    8000f06c:	a6df10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000f070:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000f074:	6785                	lui	a5,0x1
    8000f076:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000f07a:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000f07e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f082:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000f086:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000f08a:	4509                	li	a0,2
    8000f08c:	a4df10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000f090:	08200593          	li	a1,130
    8000f094:	00017617          	auipc	a2,0x17
    8000f098:	d0460613          	addi	a2,a2,-764 # 80025d98 <__func__.2+0x3530>
    8000f09c:	00014517          	auipc	a0,0x14
    8000f0a0:	acc50513          	addi	a0,a0,-1332 # 80022b68 <__func__.2+0x300>
    8000f0a4:	3cd110ef          	jal	80020c70 <printf>
    8000f0a8:	00036797          	auipc	a5,0x36
    8000f0ac:	f697c783          	lbu	a5,-151(a5) # 80045011 <excpt+0x1>
    8000f0b0:	00014597          	auipc	a1,0x14
    8000f0b4:	a9058593          	addi	a1,a1,-1392 # 80022b40 <__func__.2+0x2d8>
    8000f0b8:	e789                	bnez	a5,8000f0c2 <external_interrupt_MEI+0x9b8>
    8000f0ba:	00014597          	auipc	a1,0x14
    8000f0be:	a7658593          	addi	a1,a1,-1418 # 80022b30 <__func__.2+0x2c8>
    8000f0c2:	00014517          	auipc	a0,0x14
    8000f0c6:	abe50513          	addi	a0,a0,-1346 # 80022b80 <__func__.2+0x318>
    8000f0ca:	3a7110ef          	jal	80020c70 <printf>
    8000f0ce:	00036797          	auipc	a5,0x36
    8000f0d2:	f437c783          	lbu	a5,-189(a5) # 80045011 <excpt+0x1>
    8000f0d6:	20079f63          	bnez	a5,8000f2f4 <external_interrupt_MEI+0xbea>
    8000f0da:	4529                	li	a0,10
    8000f0dc:	224110ef          	jal	80020300 <putchar>
    8000f0e0:	c419                	beqz	s0,8000f0ee <external_interrupt_MEI+0x9e4>
    8000f0e2:	00036417          	auipc	s0,0x36
    8000f0e6:	f2f44403          	lbu	s0,-209(s0) # 80045011 <excpt+0x1>
    8000f0ea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000f0ee:	0330000f          	fence	rw,rw
    8000f0f2:	4785                	li	a5,1
    8000f0f4:	00036717          	auipc	a4,0x36
    8000f0f8:	f4073a23          	sd	zero,-172(a4) # 80045048 <excpt+0x38>
    8000f0fc:	00f49023          	sh	a5,0(s1)
    8000f100:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f104:	4511                	li	a0,4
    8000f106:	9d3f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000f10a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000f10e:	6785                	lui	a5,0x1
    8000f110:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000f114:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000f118:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000f11c:	4509                	li	a0,2
    8000f11e:	9bbf10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f122:	08200593          	li	a1,130
    8000f126:	00017617          	auipc	a2,0x17
    8000f12a:	cd260613          	addi	a2,a2,-814 # 80025df8 <__func__.2+0x3590>
    8000f12e:	00014517          	auipc	a0,0x14
    8000f132:	a3a50513          	addi	a0,a0,-1478 # 80022b68 <__func__.2+0x300>
    8000f136:	33b110ef          	jal	80020c70 <printf>
    8000f13a:	00036797          	auipc	a5,0x36
    8000f13e:	ed77c783          	lbu	a5,-297(a5) # 80045011 <excpt+0x1>
    8000f142:	00014597          	auipc	a1,0x14
    8000f146:	9fe58593          	addi	a1,a1,-1538 # 80022b40 <__func__.2+0x2d8>
    8000f14a:	c799                	beqz	a5,8000f158 <external_interrupt_MEI+0xa4e>
    8000f14c:	57fd                	li	a5,-1
    8000f14e:	6498                	ld	a4,8(s1)
    8000f150:	17fe                	slli	a5,a5,0x3f
    8000f152:	07ad                	addi	a5,a5,11
    8000f154:	26f70163          	beq	a4,a5,8000f3b6 <external_interrupt_MEI+0xcac>
    8000f158:	00014517          	auipc	a0,0x14
    8000f15c:	a2850513          	addi	a0,a0,-1496 # 80022b80 <__func__.2+0x318>
    8000f160:	311110ef          	jal	80020c70 <printf>
    8000f164:	00036797          	auipc	a5,0x36
    8000f168:	ead7c783          	lbu	a5,-339(a5) # 80045011 <excpt+0x1>
    8000f16c:	c799                	beqz	a5,8000f17a <external_interrupt_MEI+0xa70>
    8000f16e:	57fd                	li	a5,-1
    8000f170:	6498                	ld	a4,8(s1)
    8000f172:	17fe                	slli	a5,a5,0x3f
    8000f174:	07ad                	addi	a5,a5,11
    8000f176:	14f70463          	beq	a4,a5,8000f2be <external_interrupt_MEI+0xbb4>
    8000f17a:	00014517          	auipc	a0,0x14
    8000f17e:	a0e50513          	addi	a0,a0,-1522 # 80022b88 <__func__.2+0x320>
    8000f182:	2ef110ef          	jal	80020c70 <printf>
    8000f186:	02900513          	li	a0,41
    8000f18a:	176110ef          	jal	80020300 <putchar>
    8000f18e:	4529                	li	a0,10
    8000f190:	170110ef          	jal	80020300 <putchar>
    8000f194:	c801                	beqz	s0,8000f1a4 <external_interrupt_MEI+0xa9a>
    8000f196:	00036797          	auipc	a5,0x36
    8000f19a:	e7b7c783          	lbu	a5,-389(a5) # 80045011 <excpt+0x1>
    8000f19e:	4401                	li	s0,0
    8000f1a0:	0e079363          	bnez	a5,8000f286 <external_interrupt_MEI+0xb7c>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000f1a4:	0330000f          	fence	rw,rw
    8000f1a8:	4785                	li	a5,1
    8000f1aa:	00036717          	auipc	a4,0x36
    8000f1ae:	e8073f23          	sd	zero,-354(a4) # 80045048 <excpt+0x38>
    8000f1b2:	00f49023          	sh	a5,0(s1)
    8000f1b6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f1ba:	4511                	li	a0,4
    8000f1bc:	91df10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000f1c0:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000f1c4:	6785                	lui	a5,0x1
    8000f1c6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000f1ca:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000f1ce:	577d                	li	a4,-1
    8000f1d0:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    8000f1d4:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    8000f1d8:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000f1dc:	4509                	li	a0,2
    8000f1de:	8fbf10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000f1e2:	08200593          	li	a1,130
    8000f1e6:	00017617          	auipc	a2,0x17
    8000f1ea:	c7260613          	addi	a2,a2,-910 # 80025e58 <__func__.2+0x35f0>
    8000f1ee:	00014517          	auipc	a0,0x14
    8000f1f2:	97a50513          	addi	a0,a0,-1670 # 80022b68 <__func__.2+0x300>
    8000f1f6:	27b110ef          	jal	80020c70 <printf>
    8000f1fa:	00036797          	auipc	a5,0x36
    8000f1fe:	e177c783          	lbu	a5,-489(a5) # 80045011 <excpt+0x1>
    8000f202:	00014597          	auipc	a1,0x14
    8000f206:	93e58593          	addi	a1,a1,-1730 # 80022b40 <__func__.2+0x2d8>
    8000f20a:	e789                	bnez	a5,8000f214 <external_interrupt_MEI+0xb0a>
    8000f20c:	00014597          	auipc	a1,0x14
    8000f210:	92458593          	addi	a1,a1,-1756 # 80022b30 <__func__.2+0x2c8>
    8000f214:	00014517          	auipc	a0,0x14
    8000f218:	96c50513          	addi	a0,a0,-1684 # 80022b80 <__func__.2+0x318>
    8000f21c:	255110ef          	jal	80020c70 <printf>
    8000f220:	00036797          	auipc	a5,0x36
    8000f224:	df17c783          	lbu	a5,-527(a5) # 80045011 <excpt+0x1>
    8000f228:	0e079d63          	bnez	a5,8000f322 <external_interrupt_MEI+0xc18>
    8000f22c:	4529                	li	a0,10
    8000f22e:	0d2110ef          	jal	80020300 <putchar>
    8000f232:	c411                	beqz	s0,8000f23e <external_interrupt_MEI+0xb34>
    8000f234:	00036797          	auipc	a5,0x36
    8000f238:	ddd7c783          	lbu	a5,-547(a5) # 80045011 <excpt+0x1>
    8000f23c:	cf9d                	beqz	a5,8000f27a <external_interrupt_MEI+0xb70>
    8000f23e:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    8000f240:	00014597          	auipc	a1,0x14
    8000f244:	90058593          	addi	a1,a1,-1792 # 80022b40 <__func__.2+0x2d8>
    8000f248:	00014517          	auipc	a0,0x14
    8000f24c:	9a050513          	addi	a0,a0,-1632 # 80022be8 <__func__.2+0x380>
    8000f250:	221110ef          	jal	80020c70 <printf>
    8000f254:	4511                	li	a0,4
    8000f256:	883f10ef          	jal	80000ad8 <goto_priv>
    8000f25a:	94ef20ef          	jal	800013a8 <reset_state>
}
    8000f25e:	60e2                	ld	ra,24(sp)
    8000f260:	8522                	mv	a0,s0
    8000f262:	6442                	ld	s0,16(sp)
    8000f264:	64a2                	ld	s1,8(sp)
    8000f266:	6105                	addi	sp,sp,32
    8000f268:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000f26a:	6480                	ld	s0,8(s1)
    8000f26c:	57ad                	li	a5,-21
    8000f26e:	8385                	srli	a5,a5,0x1
    8000f270:	943e                	add	s0,s0,a5
    8000f272:	00143413          	seqz	s0,s0
    8000f276:	ee8ff06f          	j	8000e95e <external_interrupt_MEI+0x254>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000f27a:	4405                	li	s0,1
    TEST_END();
    8000f27c:	00014597          	auipc	a1,0x14
    8000f280:	8b458593          	addi	a1,a1,-1868 # 80022b30 <__func__.2+0x2c8>
    8000f284:	b7d1                	j	8000f248 <external_interrupt_MEI+0xb3e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f286:	57fd                	li	a5,-1
    8000f288:	6498                	ld	a4,8(s1)
    8000f28a:	17fe                	slli	a5,a5,0x3f
    8000f28c:	07ad                	addi	a5,a5,11
    8000f28e:	f0f71be3          	bne	a4,a5,8000f1a4 <external_interrupt_MEI+0xa9a>
    8000f292:	00036417          	auipc	s0,0x36
    8000f296:	d8242403          	lw	s0,-638(s0) # 80045014 <excpt+0x4>
    8000f29a:	1479                	addi	s0,s0,-2
    8000f29c:	00143413          	seqz	s0,s0
    8000f2a0:	b711                	j	8000f1a4 <external_interrupt_MEI+0xa9a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f2a2:	57fd                	li	a5,-1
    8000f2a4:	6498                	ld	a4,8(s1)
    8000f2a6:	17fe                	slli	a5,a5,0x3f
    8000f2a8:	07ad                	addi	a5,a5,11
    8000f2aa:	b6f712e3          	bne	a4,a5,8000ee0e <external_interrupt_MEI+0x704>
    8000f2ae:	00036417          	auipc	s0,0x36
    8000f2b2:	d6642403          	lw	s0,-666(s0) # 80045014 <excpt+0x4>
    8000f2b6:	1475                	addi	s0,s0,-3
    8000f2b8:	00143413          	seqz	s0,s0
    8000f2bc:	be89                	j	8000ee0e <external_interrupt_MEI+0x704>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f2be:	00036717          	auipc	a4,0x36
    8000f2c2:	d5672703          	lw	a4,-682(a4) # 80045014 <excpt+0x4>
    8000f2c6:	4789                	li	a5,2
    8000f2c8:	eaf719e3          	bne	a4,a5,8000f17a <external_interrupt_MEI+0xa70>
    8000f2cc:	b5c9                	j	8000f18e <external_interrupt_MEI+0xa84>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f2ce:	00036717          	auipc	a4,0x36
    8000f2d2:	d4672703          	lw	a4,-698(a4) # 80045014 <excpt+0x4>
    8000f2d6:	478d                	li	a5,3
    8000f2d8:	b0f716e3          	bne	a4,a5,8000ede4 <external_interrupt_MEI+0x6da>
    8000f2dc:	be31                	j	8000edf8 <external_interrupt_MEI+0x6ee>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000f2de:	00014517          	auipc	a0,0x14
    8000f2e2:	8aa50513          	addi	a0,a0,-1878 # 80022b88 <__func__.2+0x320>
    8000f2e6:	18b110ef          	jal	80020c70 <printf>
    8000f2ea:	02900513          	li	a0,41
    8000f2ee:	012110ef          	jal	80020300 <putchar>
    8000f2f2:	b655                	j	8000ee96 <external_interrupt_MEI+0x78c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000f2f4:	00014517          	auipc	a0,0x14
    8000f2f8:	89450513          	addi	a0,a0,-1900 # 80022b88 <__func__.2+0x320>
    8000f2fc:	175110ef          	jal	80020c70 <printf>
    8000f300:	02900513          	li	a0,41
    8000f304:	7fd100ef          	jal	80020300 <putchar>
    8000f308:	bbc9                	j	8000f0da <external_interrupt_MEI+0x9d0>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000f30a:	00014517          	auipc	a0,0x14
    8000f30e:	87e50513          	addi	a0,a0,-1922 # 80022b88 <__func__.2+0x320>
    8000f312:	15f110ef          	jal	80020c70 <printf>
    8000f316:	02900513          	li	a0,41
    8000f31a:	7e7100ef          	jal	80020300 <putchar>
    8000f31e:	d66ff06f          	j	8000e884 <external_interrupt_MEI+0x17a>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000f322:	00014517          	auipc	a0,0x14
    8000f326:	86650513          	addi	a0,a0,-1946 # 80022b88 <__func__.2+0x320>
    8000f32a:	147110ef          	jal	80020c70 <printf>
    8000f32e:	02900513          	li	a0,41
    8000f332:	7cf100ef          	jal	80020300 <putchar>
    8000f336:	bddd                	j	8000f22c <external_interrupt_MEI+0xb22>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000f338:	00014517          	auipc	a0,0x14
    8000f33c:	85050513          	addi	a0,a0,-1968 # 80022b88 <__func__.2+0x320>
    8000f340:	131110ef          	jal	80020c70 <printf>
    8000f344:	02900513          	li	a0,41
    8000f348:	7b9100ef          	jal	80020300 <putchar>
    8000f34c:	bae5                	j	8000ed44 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000f34e:	00014517          	auipc	a0,0x14
    8000f352:	83a50513          	addi	a0,a0,-1990 # 80022b88 <__func__.2+0x320>
    8000f356:	11b110ef          	jal	80020c70 <printf>
    8000f35a:	02900513          	li	a0,41
    8000f35e:	7a3100ef          	jal	80020300 <putchar>
    8000f362:	f9eff06f          	j	8000eb00 <external_interrupt_MEI+0x3f6>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000f366:	00014517          	auipc	a0,0x14
    8000f36a:	82250513          	addi	a0,a0,-2014 # 80022b88 <__func__.2+0x320>
    8000f36e:	103110ef          	jal	80020c70 <printf>
    8000f372:	02900513          	li	a0,41
    8000f376:	78b100ef          	jal	80020300 <putchar>
    8000f37a:	ef4ff06f          	j	8000ea6e <external_interrupt_MEI+0x364>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000f37e:	00014517          	auipc	a0,0x14
    8000f382:	80a50513          	addi	a0,a0,-2038 # 80022b88 <__func__.2+0x320>
    8000f386:	0eb110ef          	jal	80020c70 <printf>
    8000f38a:	02900513          	li	a0,41
    8000f38e:	773100ef          	jal	80020300 <putchar>
    8000f392:	e4aff06f          	j	8000e9dc <external_interrupt_MEI+0x2d2>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f396:	00036717          	auipc	a4,0x36
    8000f39a:	c7e72703          	lw	a4,-898(a4) # 80045014 <excpt+0x4>
    8000f39e:	478d                	li	a5,3
    8000f3a0:	00013597          	auipc	a1,0x13
    8000f3a4:	79058593          	addi	a1,a1,1936 # 80022b30 <__func__.2+0x2c8>
    8000f3a8:	a0f70de3          	beq	a4,a5,8000edc2 <external_interrupt_MEI+0x6b8>
    8000f3ac:	00013597          	auipc	a1,0x13
    8000f3b0:	79458593          	addi	a1,a1,1940 # 80022b40 <__func__.2+0x2d8>
    8000f3b4:	b439                	j	8000edc2 <external_interrupt_MEI+0x6b8>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000f3b6:	00036717          	auipc	a4,0x36
    8000f3ba:	c5e72703          	lw	a4,-930(a4) # 80045014 <excpt+0x4>
    8000f3be:	4789                	li	a5,2
    8000f3c0:	00013597          	auipc	a1,0x13
    8000f3c4:	77058593          	addi	a1,a1,1904 # 80022b30 <__func__.2+0x2c8>
    8000f3c8:	d8f708e3          	beq	a4,a5,8000f158 <external_interrupt_MEI+0xa4e>
    8000f3cc:	00013597          	auipc	a1,0x13
    8000f3d0:	77458593          	addi	a1,a1,1908 # 80022b40 <__func__.2+0x2d8>
    8000f3d4:	b351                	j	8000f158 <external_interrupt_MEI+0xa4e>

000000008000f3d6 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    8000f3d6:	1101                	addi	sp,sp,-32

    TEST_START();
    8000f3d8:	00012597          	auipc	a1,0x12
    8000f3dc:	5c858593          	addi	a1,a1,1480 # 800219a0 <__func__.1>
    8000f3e0:	00013517          	auipc	a0,0x13
    8000f3e4:	77050513          	addi	a0,a0,1904 # 80022b50 <__func__.2+0x2e8>
bool external_interrupt_SEI() {
    8000f3e8:	ec06                	sd	ra,24(sp)
    8000f3ea:	e822                	sd	s0,16(sp)
    8000f3ec:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f3ee:	083110ef          	jal	80020c70 <printf>
    8000f3f2:	4529                	li	a0,10
    8000f3f4:	70d100ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000f3f8:	0330000f          	fence	rw,rw
    8000f3fc:	00036497          	auipc	s1,0x36
    8000f400:	c1448493          	addi	s1,s1,-1004 # 80045010 <excpt>
    8000f404:	4785                	li	a5,1
    8000f406:	00036717          	auipc	a4,0x36
    8000f40a:	c4073123          	sd	zero,-958(a4) # 80045048 <excpt+0x38>
    8000f40e:	00f49023          	sh	a5,0(s1)
    8000f412:	0330000f          	fence	rw,rw

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    8000f416:	450d                	li	a0,3
    8000f418:	ec0f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    8000f41c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000f420:	20000793          	li	a5,512
    8000f424:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000f428:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000f42c:	450d                	li	a0,3
    8000f42e:	eaaf10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000f432:	08200593          	li	a1,130
    8000f436:	00017617          	auipc	a2,0x17
    8000f43a:	a8260613          	addi	a2,a2,-1406 # 80025eb8 <__func__.2+0x3650>
    8000f43e:	00013517          	auipc	a0,0x13
    8000f442:	72a50513          	addi	a0,a0,1834 # 80022b68 <__func__.2+0x300>
    8000f446:	02b110ef          	jal	80020c70 <printf>
    8000f44a:	00036797          	auipc	a5,0x36
    8000f44e:	bc77c783          	lbu	a5,-1081(a5) # 80045011 <excpt+0x1>
    8000f452:	00013597          	auipc	a1,0x13
    8000f456:	6ee58593          	addi	a1,a1,1774 # 80022b40 <__func__.2+0x2d8>
    8000f45a:	c799                	beqz	a5,8000f468 <external_interrupt_SEI+0x92>
    8000f45c:	57fd                	li	a5,-1
    8000f45e:	6498                	ld	a4,8(s1)
    8000f460:	17fe                	slli	a5,a5,0x3f
    8000f462:	07a5                	addi	a5,a5,9
    8000f464:	7ef70963          	beq	a4,a5,8000fc56 <external_interrupt_SEI+0x880>
    8000f468:	00013517          	auipc	a0,0x13
    8000f46c:	71850513          	addi	a0,a0,1816 # 80022b80 <__func__.2+0x318>
    8000f470:	001110ef          	jal	80020c70 <printf>
    8000f474:	00036797          	auipc	a5,0x36
    8000f478:	b9d7c783          	lbu	a5,-1123(a5) # 80045011 <excpt+0x1>
    8000f47c:	c799                	beqz	a5,8000f48a <external_interrupt_SEI+0xb4>
    8000f47e:	57fd                	li	a5,-1
    8000f480:	6498                	ld	a4,8(s1)
    8000f482:	17fe                	slli	a5,a5,0x3f
    8000f484:	07a5                	addi	a5,a5,9
    8000f486:	6af70063          	beq	a4,a5,8000fb26 <external_interrupt_SEI+0x750>
    8000f48a:	00013517          	auipc	a0,0x13
    8000f48e:	6fe50513          	addi	a0,a0,1790 # 80022b88 <__func__.2+0x320>
    8000f492:	7de110ef          	jal	80020c70 <printf>
    8000f496:	02900513          	li	a0,41
    8000f49a:	667100ef          	jal	80020300 <putchar>
    8000f49e:	4529                	li	a0,10
    8000f4a0:	661100ef          	jal	80020300 <putchar>
    8000f4a4:	00036797          	auipc	a5,0x36
    8000f4a8:	b6d7c783          	lbu	a5,-1171(a5) # 80045011 <excpt+0x1>
    8000f4ac:	4401                	li	s0,0
    8000f4ae:	c799                	beqz	a5,8000f4bc <external_interrupt_SEI+0xe6>
    8000f4b0:	57fd                	li	a5,-1
    8000f4b2:	6498                	ld	a4,8(s1)
    8000f4b4:	17fe                	slli	a5,a5,0x3f
    8000f4b6:	07a5                	addi	a5,a5,9
    8000f4b8:	74f70663          	beq	a4,a5,8000fc04 <external_interrupt_SEI+0x82e>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    8000f4bc:	0330000f          	fence	rw,rw
    8000f4c0:	4785                	li	a5,1
    8000f4c2:	00036717          	auipc	a4,0x36
    8000f4c6:	b8073323          	sd	zero,-1146(a4) # 80045048 <excpt+0x38>
    8000f4ca:	00f49023          	sh	a5,0(s1)
    8000f4ce:	0330000f          	fence	rw,rw
    goto_priv(PRIV_HS);
    8000f4d2:	450d                	li	a0,3
    8000f4d4:	e04f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f4d8:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f4dc:	20000793          	li	a5,512
    8000f4e0:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000f4e4:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000f4e8:	450d                	li	a0,3
    8000f4ea:	deef10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000f4ee:	08200593          	li	a1,130
    8000f4f2:	00017617          	auipc	a2,0x17
    8000f4f6:	a2660613          	addi	a2,a2,-1498 # 80025f18 <__func__.2+0x36b0>
    8000f4fa:	00013517          	auipc	a0,0x13
    8000f4fe:	66e50513          	addi	a0,a0,1646 # 80022b68 <__func__.2+0x300>
    8000f502:	76e110ef          	jal	80020c70 <printf>
    8000f506:	00036797          	auipc	a5,0x36
    8000f50a:	b0b7c783          	lbu	a5,-1269(a5) # 80045011 <excpt+0x1>
    8000f50e:	00013597          	auipc	a1,0x13
    8000f512:	63258593          	addi	a1,a1,1586 # 80022b40 <__func__.2+0x2d8>
    8000f516:	e789                	bnez	a5,8000f520 <external_interrupt_SEI+0x14a>
    8000f518:	00013597          	auipc	a1,0x13
    8000f51c:	61858593          	addi	a1,a1,1560 # 80022b30 <__func__.2+0x2c8>
    8000f520:	00013517          	auipc	a0,0x13
    8000f524:	66050513          	addi	a0,a0,1632 # 80022b80 <__func__.2+0x318>
    8000f528:	748110ef          	jal	80020c70 <printf>
    8000f52c:	00036797          	auipc	a5,0x36
    8000f530:	ae57c783          	lbu	a5,-1307(a5) # 80045011 <excpt+0x1>
    8000f534:	64079763          	bnez	a5,8000fb82 <external_interrupt_SEI+0x7ac>
    8000f538:	4529                	li	a0,10
    8000f53a:	5c7100ef          	jal	80020300 <putchar>
    8000f53e:	c419                	beqz	s0,8000f54c <external_interrupt_SEI+0x176>
    8000f540:	00036417          	auipc	s0,0x36
    8000f544:	ad144403          	lbu	s0,-1327(s0) # 80045011 <excpt+0x1>
    8000f548:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    8000f54c:	0330000f          	fence	rw,rw
    8000f550:	4785                	li	a5,1
    8000f552:	00036717          	auipc	a4,0x36
    8000f556:	ae073b23          	sd	zero,-1290(a4) # 80045048 <excpt+0x38>
    8000f55a:	00f49023          	sh	a5,0(s1)
    8000f55e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f562:	4511                	li	a0,4
    8000f564:	d74f10ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000f568:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f56c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000f570:	20000793          	li	a5,512
    8000f574:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f578:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000f57c:	450d                	li	a0,3
    8000f57e:	d5af10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000f582:	08200593          	li	a1,130
    8000f586:	00017617          	auipc	a2,0x17
    8000f58a:	9e260613          	addi	a2,a2,-1566 # 80025f68 <__func__.2+0x3700>
    8000f58e:	00013517          	auipc	a0,0x13
    8000f592:	5da50513          	addi	a0,a0,1498 # 80022b68 <__func__.2+0x300>
    8000f596:	6da110ef          	jal	80020c70 <printf>
    8000f59a:	00036797          	auipc	a5,0x36
    8000f59e:	a777c783          	lbu	a5,-1417(a5) # 80045011 <excpt+0x1>
    8000f5a2:	00013597          	auipc	a1,0x13
    8000f5a6:	59e58593          	addi	a1,a1,1438 # 80022b40 <__func__.2+0x2d8>
    8000f5aa:	c799                	beqz	a5,8000f5b8 <external_interrupt_SEI+0x1e2>
    8000f5ac:	57fd                	li	a5,-1
    8000f5ae:	6498                	ld	a4,8(s1)
    8000f5b0:	17fe                	slli	a5,a5,0x3f
    8000f5b2:	07a5                	addi	a5,a5,9
    8000f5b4:	66f70163          	beq	a4,a5,8000fc16 <external_interrupt_SEI+0x840>
    8000f5b8:	00013517          	auipc	a0,0x13
    8000f5bc:	5c850513          	addi	a0,a0,1480 # 80022b80 <__func__.2+0x318>
    8000f5c0:	6b0110ef          	jal	80020c70 <printf>
    8000f5c4:	00036797          	auipc	a5,0x36
    8000f5c8:	a4d7c783          	lbu	a5,-1459(a5) # 80045011 <excpt+0x1>
    8000f5cc:	c799                	beqz	a5,8000f5da <external_interrupt_SEI+0x204>
    8000f5ce:	57fd                	li	a5,-1
    8000f5d0:	6498                	ld	a4,8(s1)
    8000f5d2:	17fe                	slli	a5,a5,0x3f
    8000f5d4:	07a5                	addi	a5,a5,9
    8000f5d6:	54f70063          	beq	a4,a5,8000fb16 <external_interrupt_SEI+0x740>
    8000f5da:	00013517          	auipc	a0,0x13
    8000f5de:	5ae50513          	addi	a0,a0,1454 # 80022b88 <__func__.2+0x320>
    8000f5e2:	68e110ef          	jal	80020c70 <printf>
    8000f5e6:	02900513          	li	a0,41
    8000f5ea:	517100ef          	jal	80020300 <putchar>
    8000f5ee:	4529                	li	a0,10
    8000f5f0:	511100ef          	jal	80020300 <putchar>
    8000f5f4:	c801                	beqz	s0,8000f604 <external_interrupt_SEI+0x22e>
    8000f5f6:	00036797          	auipc	a5,0x36
    8000f5fa:	a1b7c783          	lbu	a5,-1509(a5) # 80045011 <excpt+0x1>
    8000f5fe:	4401                	li	s0,0
    8000f600:	4e079563          	bnez	a5,8000faea <external_interrupt_SEI+0x714>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000f604:	0330000f          	fence	rw,rw
    8000f608:	4785                	li	a5,1
    8000f60a:	00036717          	auipc	a4,0x36
    8000f60e:	a2073f23          	sd	zero,-1474(a4) # 80045048 <excpt+0x38>
    8000f612:	00f49023          	sh	a5,0(s1)
    8000f616:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f61a:	4511                	li	a0,4
    8000f61c:	cbcf10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    8000f620:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f624:	20000793          	li	a5,512
    8000f628:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f62c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000f630:	450d                	li	a0,3
    8000f632:	ca6f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000f636:	08200593          	li	a1,130
    8000f63a:	00017617          	auipc	a2,0x17
    8000f63e:	98e60613          	addi	a2,a2,-1650 # 80025fc8 <__func__.2+0x3760>
    8000f642:	00013517          	auipc	a0,0x13
    8000f646:	52650513          	addi	a0,a0,1318 # 80022b68 <__func__.2+0x300>
    8000f64a:	626110ef          	jal	80020c70 <printf>
    8000f64e:	00036797          	auipc	a5,0x36
    8000f652:	9c37c783          	lbu	a5,-1597(a5) # 80045011 <excpt+0x1>
    8000f656:	00013597          	auipc	a1,0x13
    8000f65a:	4ea58593          	addi	a1,a1,1258 # 80022b40 <__func__.2+0x2d8>
    8000f65e:	e789                	bnez	a5,8000f668 <external_interrupt_SEI+0x292>
    8000f660:	00013597          	auipc	a1,0x13
    8000f664:	4d058593          	addi	a1,a1,1232 # 80022b30 <__func__.2+0x2c8>
    8000f668:	00013517          	auipc	a0,0x13
    8000f66c:	51850513          	addi	a0,a0,1304 # 80022b80 <__func__.2+0x318>
    8000f670:	600110ef          	jal	80020c70 <printf>
    8000f674:	00036797          	auipc	a5,0x36
    8000f678:	99d7c783          	lbu	a5,-1635(a5) # 80045011 <excpt+0x1>
    8000f67c:	4e079863          	bnez	a5,8000fb6c <external_interrupt_SEI+0x796>
    8000f680:	4529                	li	a0,10
    8000f682:	47f100ef          	jal	80020300 <putchar>
    8000f686:	c419                	beqz	s0,8000f694 <external_interrupt_SEI+0x2be>
    8000f688:	00036417          	auipc	s0,0x36
    8000f68c:	98944403          	lbu	s0,-1655(s0) # 80045011 <excpt+0x1>
    8000f690:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000f694:	0330000f          	fence	rw,rw
    8000f698:	4785                	li	a5,1
    8000f69a:	00036717          	auipc	a4,0x36
    8000f69e:	9a073723          	sd	zero,-1618(a4) # 80045048 <excpt+0x38>
    8000f6a2:	00f49023          	sh	a5,0(s1)
    8000f6a6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f6aa:	4511                	li	a0,4
    8000f6ac:	c2cf10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    8000f6b0:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f6b4:	20000793          	li	a5,512
    8000f6b8:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f6bc:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000f6c0:	450d                	li	a0,3
    8000f6c2:	c16f10ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000f6c6:	08200593          	li	a1,130
    8000f6ca:	00017617          	auipc	a2,0x17
    8000f6ce:	94e60613          	addi	a2,a2,-1714 # 80026018 <__func__.2+0x37b0>
    8000f6d2:	00013517          	auipc	a0,0x13
    8000f6d6:	49650513          	addi	a0,a0,1174 # 80022b68 <__func__.2+0x300>
    8000f6da:	596110ef          	jal	80020c70 <printf>
    8000f6de:	00036797          	auipc	a5,0x36
    8000f6e2:	9337c783          	lbu	a5,-1741(a5) # 80045011 <excpt+0x1>
    8000f6e6:	00013597          	auipc	a1,0x13
    8000f6ea:	45a58593          	addi	a1,a1,1114 # 80022b40 <__func__.2+0x2d8>
    8000f6ee:	e789                	bnez	a5,8000f6f8 <external_interrupt_SEI+0x322>
    8000f6f0:	00013597          	auipc	a1,0x13
    8000f6f4:	44058593          	addi	a1,a1,1088 # 80022b30 <__func__.2+0x2c8>
    8000f6f8:	00013517          	auipc	a0,0x13
    8000f6fc:	48850513          	addi	a0,a0,1160 # 80022b80 <__func__.2+0x318>
    8000f700:	570110ef          	jal	80020c70 <printf>
    8000f704:	00036797          	auipc	a5,0x36
    8000f708:	90d7c783          	lbu	a5,-1779(a5) # 80045011 <excpt+0x1>
    8000f70c:	44079563          	bnez	a5,8000fb56 <external_interrupt_SEI+0x780>
    8000f710:	4529                	li	a0,10
    8000f712:	3ef100ef          	jal	80020300 <putchar>
    8000f716:	c419                	beqz	s0,8000f724 <external_interrupt_SEI+0x34e>
    8000f718:	00036417          	auipc	s0,0x36
    8000f71c:	8f944403          	lbu	s0,-1799(s0) # 80045011 <excpt+0x1>
    8000f720:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    8000f724:	0330000f          	fence	rw,rw
    8000f728:	4785                	li	a5,1
    8000f72a:	00036717          	auipc	a4,0x36
    8000f72e:	90073f23          	sd	zero,-1762(a4) # 80045048 <excpt+0x38>
    8000f732:	00f49023          	sh	a5,0(s1)
    8000f736:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f73a:	4511                	li	a0,4
    8000f73c:	b9cf10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f740:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000f744:	20000793          	li	a5,512
    8000f748:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000f74c:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000f750:	4509                	li	a0,2
    8000f752:	b86f10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000f756:	08200593          	li	a1,130
    8000f75a:	00017617          	auipc	a2,0x17
    8000f75e:	90e60613          	addi	a2,a2,-1778 # 80026068 <__func__.2+0x3800>
    8000f762:	00013517          	auipc	a0,0x13
    8000f766:	40650513          	addi	a0,a0,1030 # 80022b68 <__func__.2+0x300>
    8000f76a:	506110ef          	jal	80020c70 <printf>
    8000f76e:	00036797          	auipc	a5,0x36
    8000f772:	8a37c783          	lbu	a5,-1885(a5) # 80045011 <excpt+0x1>
    8000f776:	00013597          	auipc	a1,0x13
    8000f77a:	3ca58593          	addi	a1,a1,970 # 80022b40 <__func__.2+0x2d8>
    8000f77e:	c799                	beqz	a5,8000f78c <external_interrupt_SEI+0x3b6>
    8000f780:	57fd                	li	a5,-1
    8000f782:	6498                	ld	a4,8(s1)
    8000f784:	17fe                	slli	a5,a5,0x3f
    8000f786:	07a5                	addi	a5,a5,9
    8000f788:	44f70e63          	beq	a4,a5,8000fbe4 <external_interrupt_SEI+0x80e>
    8000f78c:	00013517          	auipc	a0,0x13
    8000f790:	3f450513          	addi	a0,a0,1012 # 80022b80 <__func__.2+0x318>
    8000f794:	4dc110ef          	jal	80020c70 <printf>
    8000f798:	00036797          	auipc	a5,0x36
    8000f79c:	8797c783          	lbu	a5,-1927(a5) # 80045011 <excpt+0x1>
    8000f7a0:	c799                	beqz	a5,8000f7ae <external_interrupt_SEI+0x3d8>
    8000f7a2:	57fd                	li	a5,-1
    8000f7a4:	6498                	ld	a4,8(s1)
    8000f7a6:	17fe                	slli	a5,a5,0x3f
    8000f7a8:	07a5                	addi	a5,a5,9
    8000f7aa:	34f70e63          	beq	a4,a5,8000fb06 <external_interrupt_SEI+0x730>
    8000f7ae:	00013517          	auipc	a0,0x13
    8000f7b2:	3da50513          	addi	a0,a0,986 # 80022b88 <__func__.2+0x320>
    8000f7b6:	4ba110ef          	jal	80020c70 <printf>
    8000f7ba:	02900513          	li	a0,41
    8000f7be:	343100ef          	jal	80020300 <putchar>
    8000f7c2:	4529                	li	a0,10
    8000f7c4:	33d100ef          	jal	80020300 <putchar>
    8000f7c8:	c801                	beqz	s0,8000f7d8 <external_interrupt_SEI+0x402>
    8000f7ca:	00036797          	auipc	a5,0x36
    8000f7ce:	8477c783          	lbu	a5,-1977(a5) # 80045011 <excpt+0x1>
    8000f7d2:	4401                	li	s0,0
    8000f7d4:	2e079d63          	bnez	a5,8000face <external_interrupt_SEI+0x6f8>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    8000f7d8:	0330000f          	fence	rw,rw
    8000f7dc:	4785                	li	a5,1
    8000f7de:	00036717          	auipc	a4,0x36
    8000f7e2:	86073523          	sd	zero,-1942(a4) # 80045048 <excpt+0x38>
    8000f7e6:	00f49023          	sh	a5,0(s1)
    8000f7ea:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f7ee:	4511                	li	a0,4
    8000f7f0:	ae8f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f7f4:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f7f8:	20000793          	li	a5,512
    8000f7fc:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000f800:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000f804:	4509                	li	a0,2
    8000f806:	ad2f10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000f80a:	08200593          	li	a1,130
    8000f80e:	00017617          	auipc	a2,0x17
    8000f812:	8b260613          	addi	a2,a2,-1870 # 800260c0 <__func__.2+0x3858>
    8000f816:	00013517          	auipc	a0,0x13
    8000f81a:	35250513          	addi	a0,a0,850 # 80022b68 <__func__.2+0x300>
    8000f81e:	452110ef          	jal	80020c70 <printf>
    8000f822:	00035797          	auipc	a5,0x35
    8000f826:	7ef7c783          	lbu	a5,2031(a5) # 80045011 <excpt+0x1>
    8000f82a:	00013597          	auipc	a1,0x13
    8000f82e:	31658593          	addi	a1,a1,790 # 80022b40 <__func__.2+0x2d8>
    8000f832:	c799                	beqz	a5,8000f840 <external_interrupt_SEI+0x46a>
    8000f834:	57fd                	li	a5,-1
    8000f836:	6498                	ld	a4,8(s1)
    8000f838:	17fe                	slli	a5,a5,0x3f
    8000f83a:	07a5                	addi	a5,a5,9
    8000f83c:	38f70463          	beq	a4,a5,8000fbc4 <external_interrupt_SEI+0x7ee>
    8000f840:	00013517          	auipc	a0,0x13
    8000f844:	34050513          	addi	a0,a0,832 # 80022b80 <__func__.2+0x318>
    8000f848:	428110ef          	jal	80020c70 <printf>
    8000f84c:	00035797          	auipc	a5,0x35
    8000f850:	7c57c783          	lbu	a5,1989(a5) # 80045011 <excpt+0x1>
    8000f854:	c799                	beqz	a5,8000f862 <external_interrupt_SEI+0x48c>
    8000f856:	57fd                	li	a5,-1
    8000f858:	6498                	ld	a4,8(s1)
    8000f85a:	17fe                	slli	a5,a5,0x3f
    8000f85c:	07a5                	addi	a5,a5,9
    8000f85e:	2ef70463          	beq	a4,a5,8000fb46 <external_interrupt_SEI+0x770>
    8000f862:	00013517          	auipc	a0,0x13
    8000f866:	32650513          	addi	a0,a0,806 # 80022b88 <__func__.2+0x320>
    8000f86a:	406110ef          	jal	80020c70 <printf>
    8000f86e:	02900513          	li	a0,41
    8000f872:	28f100ef          	jal	80020300 <putchar>
    8000f876:	4529                	li	a0,10
    8000f878:	289100ef          	jal	80020300 <putchar>
    8000f87c:	c801                	beqz	s0,8000f88c <external_interrupt_SEI+0x4b6>
    8000f87e:	00035797          	auipc	a5,0x35
    8000f882:	7937c783          	lbu	a5,1939(a5) # 80045011 <excpt+0x1>
    8000f886:	4401                	li	s0,0
    8000f888:	22079563          	bnez	a5,8000fab2 <external_interrupt_SEI+0x6dc>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    8000f88c:	0330000f          	fence	rw,rw
    8000f890:	4785                	li	a5,1
    8000f892:	00035717          	auipc	a4,0x35
    8000f896:	7a073b23          	sd	zero,1974(a4) # 80045048 <excpt+0x38>
    8000f89a:	00f49023          	sh	a5,0(s1)
    8000f89e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f8a2:	4511                	li	a0,4
    8000f8a4:	a34f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f8a8:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000f8ac:	20000793          	li	a5,512
    8000f8b0:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f8b4:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000f8b8:	4509                	li	a0,2
    8000f8ba:	a1ef10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000f8be:	08200593          	li	a1,130
    8000f8c2:	00017617          	auipc	a2,0x17
    8000f8c6:	85660613          	addi	a2,a2,-1962 # 80026118 <__func__.2+0x38b0>
    8000f8ca:	00013517          	auipc	a0,0x13
    8000f8ce:	29e50513          	addi	a0,a0,670 # 80022b68 <__func__.2+0x300>
    8000f8d2:	39e110ef          	jal	80020c70 <printf>
    8000f8d6:	00035797          	auipc	a5,0x35
    8000f8da:	73b7c783          	lbu	a5,1851(a5) # 80045011 <excpt+0x1>
    8000f8de:	00013597          	auipc	a1,0x13
    8000f8e2:	26258593          	addi	a1,a1,610 # 80022b40 <__func__.2+0x2d8>
    8000f8e6:	c799                	beqz	a5,8000f8f4 <external_interrupt_SEI+0x51e>
    8000f8e8:	57fd                	li	a5,-1
    8000f8ea:	6498                	ld	a4,8(s1)
    8000f8ec:	17fe                	slli	a5,a5,0x3f
    8000f8ee:	07a5                	addi	a5,a5,9
    8000f8f0:	34f70363          	beq	a4,a5,8000fc36 <external_interrupt_SEI+0x860>
    8000f8f4:	00013517          	auipc	a0,0x13
    8000f8f8:	28c50513          	addi	a0,a0,652 # 80022b80 <__func__.2+0x318>
    8000f8fc:	374110ef          	jal	80020c70 <printf>
    8000f900:	00035797          	auipc	a5,0x35
    8000f904:	7117c783          	lbu	a5,1809(a5) # 80045011 <excpt+0x1>
    8000f908:	c799                	beqz	a5,8000f916 <external_interrupt_SEI+0x540>
    8000f90a:	57fd                	li	a5,-1
    8000f90c:	6498                	ld	a4,8(s1)
    8000f90e:	17fe                	slli	a5,a5,0x3f
    8000f910:	07a5                	addi	a5,a5,9
    8000f912:	22f70263          	beq	a4,a5,8000fb36 <external_interrupt_SEI+0x760>
    8000f916:	00013517          	auipc	a0,0x13
    8000f91a:	27250513          	addi	a0,a0,626 # 80022b88 <__func__.2+0x320>
    8000f91e:	352110ef          	jal	80020c70 <printf>
    8000f922:	02900513          	li	a0,41
    8000f926:	1db100ef          	jal	80020300 <putchar>
    8000f92a:	4529                	li	a0,10
    8000f92c:	1d5100ef          	jal	80020300 <putchar>
    8000f930:	c801                	beqz	s0,8000f940 <external_interrupt_SEI+0x56a>
    8000f932:	00035797          	auipc	a5,0x35
    8000f936:	6df7c783          	lbu	a5,1759(a5) # 80045011 <excpt+0x1>
    8000f93a:	4401                	li	s0,0
    8000f93c:	14079d63          	bnez	a5,8000fa96 <external_interrupt_SEI+0x6c0>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000f940:	0330000f          	fence	rw,rw
    8000f944:	4785                	li	a5,1
    8000f946:	00035717          	auipc	a4,0x35
    8000f94a:	70073123          	sd	zero,1794(a4) # 80045048 <excpt+0x38>
    8000f94e:	00f49023          	sh	a5,0(s1)
    8000f952:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f956:	4511                	li	a0,4
    8000f958:	980f10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000f95c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f960:	20000793          	li	a5,512
    8000f964:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f968:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000f96c:	4509                	li	a0,2
    8000f96e:	96af10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000f972:	08200593          	li	a1,130
    8000f976:	00016617          	auipc	a2,0x16
    8000f97a:	7fa60613          	addi	a2,a2,2042 # 80026170 <__func__.2+0x3908>
    8000f97e:	00013517          	auipc	a0,0x13
    8000f982:	1ea50513          	addi	a0,a0,490 # 80022b68 <__func__.2+0x300>
    8000f986:	2ea110ef          	jal	80020c70 <printf>
    8000f98a:	00035797          	auipc	a5,0x35
    8000f98e:	6877c783          	lbu	a5,1671(a5) # 80045011 <excpt+0x1>
    8000f992:	00013597          	auipc	a1,0x13
    8000f996:	1ae58593          	addi	a1,a1,430 # 80022b40 <__func__.2+0x2d8>
    8000f99a:	e789                	bnez	a5,8000f9a4 <external_interrupt_SEI+0x5ce>
    8000f99c:	00013597          	auipc	a1,0x13
    8000f9a0:	19458593          	addi	a1,a1,404 # 80022b30 <__func__.2+0x2c8>
    8000f9a4:	00013517          	auipc	a0,0x13
    8000f9a8:	1dc50513          	addi	a0,a0,476 # 80022b80 <__func__.2+0x318>
    8000f9ac:	2c4110ef          	jal	80020c70 <printf>
    8000f9b0:	00035797          	auipc	a5,0x35
    8000f9b4:	6617c783          	lbu	a5,1633(a5) # 80045011 <excpt+0x1>
    8000f9b8:	1e079b63          	bnez	a5,8000fbae <external_interrupt_SEI+0x7d8>
    8000f9bc:	4529                	li	a0,10
    8000f9be:	143100ef          	jal	80020300 <putchar>
    8000f9c2:	c419                	beqz	s0,8000f9d0 <external_interrupt_SEI+0x5fa>
    8000f9c4:	00035417          	auipc	s0,0x35
    8000f9c8:	64d44403          	lbu	s0,1613(s0) # 80045011 <excpt+0x1>
    8000f9cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000f9d0:	0330000f          	fence	rw,rw
    8000f9d4:	4785                	li	a5,1
    8000f9d6:	00035717          	auipc	a4,0x35
    8000f9da:	66073923          	sd	zero,1650(a4) # 80045048 <excpt+0x38>
    8000f9de:	00f49023          	sh	a5,0(s1)
    8000f9e2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f9e6:	4511                	li	a0,4
    8000f9e8:	8f0f10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8000f9ec:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000f9f0:	20000793          	li	a5,512
    8000f9f4:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000f9f8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000f9fc:	4509                	li	a0,2
    8000f9fe:	8daf10ef          	jal	80000ad8 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000fa02:	08200593          	li	a1,130
    8000fa06:	00016617          	auipc	a2,0x16
    8000fa0a:	76a60613          	addi	a2,a2,1898 # 80026170 <__func__.2+0x3908>
    8000fa0e:	00013517          	auipc	a0,0x13
    8000fa12:	15a50513          	addi	a0,a0,346 # 80022b68 <__func__.2+0x300>
    8000fa16:	25a110ef          	jal	80020c70 <printf>
    8000fa1a:	00035797          	auipc	a5,0x35
    8000fa1e:	5f77c783          	lbu	a5,1527(a5) # 80045011 <excpt+0x1>
    8000fa22:	00013597          	auipc	a1,0x13
    8000fa26:	11e58593          	addi	a1,a1,286 # 80022b40 <__func__.2+0x2d8>
    8000fa2a:	e789                	bnez	a5,8000fa34 <external_interrupt_SEI+0x65e>
    8000fa2c:	00013597          	auipc	a1,0x13
    8000fa30:	10458593          	addi	a1,a1,260 # 80022b30 <__func__.2+0x2c8>
    8000fa34:	00013517          	auipc	a0,0x13
    8000fa38:	14c50513          	addi	a0,a0,332 # 80022b80 <__func__.2+0x318>
    8000fa3c:	234110ef          	jal	80020c70 <printf>
    8000fa40:	00035797          	auipc	a5,0x35
    8000fa44:	5d17c783          	lbu	a5,1489(a5) # 80045011 <excpt+0x1>
    8000fa48:	14079863          	bnez	a5,8000fb98 <external_interrupt_SEI+0x7c2>
    8000fa4c:	4529                	li	a0,10
    8000fa4e:	0b3100ef          	jal	80020300 <putchar>
    8000fa52:	c411                	beqz	s0,8000fa5e <external_interrupt_SEI+0x688>
    8000fa54:	00035797          	auipc	a5,0x35
    8000fa58:	5bd7c783          	lbu	a5,1469(a5) # 80045011 <excpt+0x1>
    8000fa5c:	c79d                	beqz	a5,8000fa8a <external_interrupt_SEI+0x6b4>
    8000fa5e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8000fa60:	00013597          	auipc	a1,0x13
    8000fa64:	0e058593          	addi	a1,a1,224 # 80022b40 <__func__.2+0x2d8>
    8000fa68:	00013517          	auipc	a0,0x13
    8000fa6c:	18050513          	addi	a0,a0,384 # 80022be8 <__func__.2+0x380>
    8000fa70:	200110ef          	jal	80020c70 <printf>
    8000fa74:	4511                	li	a0,4
    8000fa76:	862f10ef          	jal	80000ad8 <goto_priv>
    8000fa7a:	92ff10ef          	jal	800013a8 <reset_state>
}
    8000fa7e:	60e2                	ld	ra,24(sp)
    8000fa80:	8522                	mv	a0,s0
    8000fa82:	6442                	ld	s0,16(sp)
    8000fa84:	64a2                	ld	s1,8(sp)
    8000fa86:	6105                	addi	sp,sp,32
    8000fa88:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000fa8a:	4405                	li	s0,1
    TEST_END();
    8000fa8c:	00013597          	auipc	a1,0x13
    8000fa90:	0a458593          	addi	a1,a1,164 # 80022b30 <__func__.2+0x2c8>
    8000fa94:	bfd1                	j	8000fa68 <external_interrupt_SEI+0x692>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000fa96:	57fd                	li	a5,-1
    8000fa98:	6498                	ld	a4,8(s1)
    8000fa9a:	17fe                	slli	a5,a5,0x3f
    8000fa9c:	07a5                	addi	a5,a5,9
    8000fa9e:	eaf711e3          	bne	a4,a5,8000f940 <external_interrupt_SEI+0x56a>
    8000faa2:	00035417          	auipc	s0,0x35
    8000faa6:	57242403          	lw	s0,1394(s0) # 80045014 <excpt+0x4>
    8000faaa:	1471                	addi	s0,s0,-4
    8000faac:	00143413          	seqz	s0,s0
    8000fab0:	bd41                	j	8000f940 <external_interrupt_SEI+0x56a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000fab2:	57fd                	li	a5,-1
    8000fab4:	6498                	ld	a4,8(s1)
    8000fab6:	17fe                	slli	a5,a5,0x3f
    8000fab8:	07a5                	addi	a5,a5,9
    8000faba:	dcf719e3          	bne	a4,a5,8000f88c <external_interrupt_SEI+0x4b6>
    8000fabe:	00035417          	auipc	s0,0x35
    8000fac2:	55642403          	lw	s0,1366(s0) # 80045014 <excpt+0x4>
    8000fac6:	1471                	addi	s0,s0,-4
    8000fac8:	00143413          	seqz	s0,s0
    8000facc:	b3c1                	j	8000f88c <external_interrupt_SEI+0x4b6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000face:	57fd                	li	a5,-1
    8000fad0:	6498                	ld	a4,8(s1)
    8000fad2:	17fe                	slli	a5,a5,0x3f
    8000fad4:	07a5                	addi	a5,a5,9
    8000fad6:	d0f711e3          	bne	a4,a5,8000f7d8 <external_interrupt_SEI+0x402>
    8000fada:	00035417          	auipc	s0,0x35
    8000fade:	53a42403          	lw	s0,1338(s0) # 80045014 <excpt+0x4>
    8000fae2:	1471                	addi	s0,s0,-4
    8000fae4:	00143413          	seqz	s0,s0
    8000fae8:	b9c5                	j	8000f7d8 <external_interrupt_SEI+0x402>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000faea:	57fd                	li	a5,-1
    8000faec:	6498                	ld	a4,8(s1)
    8000faee:	17fe                	slli	a5,a5,0x3f
    8000faf0:	07a5                	addi	a5,a5,9
    8000faf2:	b0f719e3          	bne	a4,a5,8000f604 <external_interrupt_SEI+0x22e>
    8000faf6:	00035417          	auipc	s0,0x35
    8000fafa:	51e42403          	lw	s0,1310(s0) # 80045014 <excpt+0x4>
    8000fafe:	1471                	addi	s0,s0,-4
    8000fb00:	00143413          	seqz	s0,s0
    8000fb04:	b601                	j	8000f604 <external_interrupt_SEI+0x22e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000fb06:	00035717          	auipc	a4,0x35
    8000fb0a:	50e72703          	lw	a4,1294(a4) # 80045014 <excpt+0x4>
    8000fb0e:	4791                	li	a5,4
    8000fb10:	c8f71fe3          	bne	a4,a5,8000f7ae <external_interrupt_SEI+0x3d8>
    8000fb14:	b17d                	j	8000f7c2 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000fb16:	00035717          	auipc	a4,0x35
    8000fb1a:	4fe72703          	lw	a4,1278(a4) # 80045014 <excpt+0x4>
    8000fb1e:	4791                	li	a5,4
    8000fb20:	aaf71de3          	bne	a4,a5,8000f5da <external_interrupt_SEI+0x204>
    8000fb24:	b4e9                	j	8000f5ee <external_interrupt_SEI+0x218>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000fb26:	00035717          	auipc	a4,0x35
    8000fb2a:	4ee72703          	lw	a4,1262(a4) # 80045014 <excpt+0x4>
    8000fb2e:	4791                	li	a5,4
    8000fb30:	94f71de3          	bne	a4,a5,8000f48a <external_interrupt_SEI+0xb4>
    8000fb34:	b2ad                	j	8000f49e <external_interrupt_SEI+0xc8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000fb36:	00035717          	auipc	a4,0x35
    8000fb3a:	4de72703          	lw	a4,1246(a4) # 80045014 <excpt+0x4>
    8000fb3e:	4791                	li	a5,4
    8000fb40:	dcf71be3          	bne	a4,a5,8000f916 <external_interrupt_SEI+0x540>
    8000fb44:	b3dd                	j	8000f92a <external_interrupt_SEI+0x554>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000fb46:	00035717          	auipc	a4,0x35
    8000fb4a:	4ce72703          	lw	a4,1230(a4) # 80045014 <excpt+0x4>
    8000fb4e:	4791                	li	a5,4
    8000fb50:	d0f719e3          	bne	a4,a5,8000f862 <external_interrupt_SEI+0x48c>
    8000fb54:	b30d                	j	8000f876 <external_interrupt_SEI+0x4a0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000fb56:	00013517          	auipc	a0,0x13
    8000fb5a:	03250513          	addi	a0,a0,50 # 80022b88 <__func__.2+0x320>
    8000fb5e:	112110ef          	jal	80020c70 <printf>
    8000fb62:	02900513          	li	a0,41
    8000fb66:	79a100ef          	jal	80020300 <putchar>
    8000fb6a:	b65d                	j	8000f710 <external_interrupt_SEI+0x33a>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000fb6c:	00013517          	auipc	a0,0x13
    8000fb70:	01c50513          	addi	a0,a0,28 # 80022b88 <__func__.2+0x320>
    8000fb74:	0fc110ef          	jal	80020c70 <printf>
    8000fb78:	02900513          	li	a0,41
    8000fb7c:	784100ef          	jal	80020300 <putchar>
    8000fb80:	b601                	j	8000f680 <external_interrupt_SEI+0x2aa>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000fb82:	00013517          	auipc	a0,0x13
    8000fb86:	00650513          	addi	a0,a0,6 # 80022b88 <__func__.2+0x320>
    8000fb8a:	0e6110ef          	jal	80020c70 <printf>
    8000fb8e:	02900513          	li	a0,41
    8000fb92:	76e100ef          	jal	80020300 <putchar>
    8000fb96:	b24d                	j	8000f538 <external_interrupt_SEI+0x162>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000fb98:	00013517          	auipc	a0,0x13
    8000fb9c:	ff050513          	addi	a0,a0,-16 # 80022b88 <__func__.2+0x320>
    8000fba0:	0d0110ef          	jal	80020c70 <printf>
    8000fba4:	02900513          	li	a0,41
    8000fba8:	758100ef          	jal	80020300 <putchar>
    8000fbac:	b545                	j	8000fa4c <external_interrupt_SEI+0x676>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000fbae:	00013517          	auipc	a0,0x13
    8000fbb2:	fda50513          	addi	a0,a0,-38 # 80022b88 <__func__.2+0x320>
    8000fbb6:	0ba110ef          	jal	80020c70 <printf>
    8000fbba:	02900513          	li	a0,41
    8000fbbe:	742100ef          	jal	80020300 <putchar>
    8000fbc2:	bbed                	j	8000f9bc <external_interrupt_SEI+0x5e6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000fbc4:	00035717          	auipc	a4,0x35
    8000fbc8:	45072703          	lw	a4,1104(a4) # 80045014 <excpt+0x4>
    8000fbcc:	4791                	li	a5,4
    8000fbce:	00013597          	auipc	a1,0x13
    8000fbd2:	f6258593          	addi	a1,a1,-158 # 80022b30 <__func__.2+0x2c8>
    8000fbd6:	c6f705e3          	beq	a4,a5,8000f840 <external_interrupt_SEI+0x46a>
    8000fbda:	00013597          	auipc	a1,0x13
    8000fbde:	f6658593          	addi	a1,a1,-154 # 80022b40 <__func__.2+0x2d8>
    8000fbe2:	b9b9                	j	8000f840 <external_interrupt_SEI+0x46a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000fbe4:	00035717          	auipc	a4,0x35
    8000fbe8:	43072703          	lw	a4,1072(a4) # 80045014 <excpt+0x4>
    8000fbec:	4791                	li	a5,4
    8000fbee:	00013597          	auipc	a1,0x13
    8000fbf2:	f4258593          	addi	a1,a1,-190 # 80022b30 <__func__.2+0x2c8>
    8000fbf6:	b8f70be3          	beq	a4,a5,8000f78c <external_interrupt_SEI+0x3b6>
    8000fbfa:	00013597          	auipc	a1,0x13
    8000fbfe:	f4658593          	addi	a1,a1,-186 # 80022b40 <__func__.2+0x2d8>
    8000fc02:	b669                	j	8000f78c <external_interrupt_SEI+0x3b6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000fc04:	00035417          	auipc	s0,0x35
    8000fc08:	41042403          	lw	s0,1040(s0) # 80045014 <excpt+0x4>
    8000fc0c:	1471                	addi	s0,s0,-4
    8000fc0e:	00143413          	seqz	s0,s0
    8000fc12:	8abff06f          	j	8000f4bc <external_interrupt_SEI+0xe6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000fc16:	00035717          	auipc	a4,0x35
    8000fc1a:	3fe72703          	lw	a4,1022(a4) # 80045014 <excpt+0x4>
    8000fc1e:	4791                	li	a5,4
    8000fc20:	00013597          	auipc	a1,0x13
    8000fc24:	f1058593          	addi	a1,a1,-240 # 80022b30 <__func__.2+0x2c8>
    8000fc28:	98f708e3          	beq	a4,a5,8000f5b8 <external_interrupt_SEI+0x1e2>
    8000fc2c:	00013597          	auipc	a1,0x13
    8000fc30:	f1458593          	addi	a1,a1,-236 # 80022b40 <__func__.2+0x2d8>
    8000fc34:	b251                	j	8000f5b8 <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000fc36:	00035717          	auipc	a4,0x35
    8000fc3a:	3de72703          	lw	a4,990(a4) # 80045014 <excpt+0x4>
    8000fc3e:	4791                	li	a5,4
    8000fc40:	00013597          	auipc	a1,0x13
    8000fc44:	ef058593          	addi	a1,a1,-272 # 80022b30 <__func__.2+0x2c8>
    8000fc48:	caf706e3          	beq	a4,a5,8000f8f4 <external_interrupt_SEI+0x51e>
    8000fc4c:	00013597          	auipc	a1,0x13
    8000fc50:	ef458593          	addi	a1,a1,-268 # 80022b40 <__func__.2+0x2d8>
    8000fc54:	b145                	j	8000f8f4 <external_interrupt_SEI+0x51e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000fc56:	00035717          	auipc	a4,0x35
    8000fc5a:	3be72703          	lw	a4,958(a4) # 80045014 <excpt+0x4>
    8000fc5e:	4791                	li	a5,4
    8000fc60:	00013597          	auipc	a1,0x13
    8000fc64:	ed058593          	addi	a1,a1,-304 # 80022b30 <__func__.2+0x2c8>
    8000fc68:	80f700e3          	beq	a4,a5,8000f468 <external_interrupt_SEI+0x92>
    8000fc6c:	00013597          	auipc	a1,0x13
    8000fc70:	ed458593          	addi	a1,a1,-300 # 80022b40 <__func__.2+0x2d8>
    8000fc74:	ff4ff06f          	j	8000f468 <external_interrupt_SEI+0x92>

000000008000fc78 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8000fc78:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fc7a:	00012597          	auipc	a1,0x12
    8000fc7e:	d3e58593          	addi	a1,a1,-706 # 800219b8 <__func__.0>
    8000fc82:	00013517          	auipc	a0,0x13
    8000fc86:	ece50513          	addi	a0,a0,-306 # 80022b50 <__func__.2+0x2e8>
bool external_interrupt_VSEI() {
    8000fc8a:	ec06                	sd	ra,24(sp)
    8000fc8c:	e822                	sd	s0,16(sp)
    8000fc8e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000fc90:	7e1100ef          	jal	80020c70 <printf>
    8000fc94:	4529                	li	a0,10
    8000fc96:	66a100ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8000fc9a:	0330000f          	fence	rw,rw
    8000fc9e:	00035417          	auipc	s0,0x35
    8000fca2:	37240413          	addi	s0,s0,882 # 80045010 <excpt>
    8000fca6:	4785                	li	a5,1
    8000fca8:	00035717          	auipc	a4,0x35
    8000fcac:	3a073023          	sd	zero,928(a4) # 80045048 <excpt+0x38>
    8000fcb0:	00f41023          	sh	a5,0(s0)
    8000fcb4:	0330000f          	fence	rw,rw

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    8000fcb8:	4511                	li	a0,4
    8000fcba:	e1ff00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000fcbe:	40000793          	li	a5,1024
    8000fcc2:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    8000fcc6:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000fcca:	4509                	li	a0,2
    8000fccc:	e0df00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000fcd0:	08200593          	li	a1,130
    8000fcd4:	00016617          	auipc	a2,0x16
    8000fcd8:	4ec60613          	addi	a2,a2,1260 # 800261c0 <__func__.2+0x3958>
    8000fcdc:	00013517          	auipc	a0,0x13
    8000fce0:	e8c50513          	addi	a0,a0,-372 # 80022b68 <__func__.2+0x300>
    8000fce4:	78d100ef          	jal	80020c70 <printf>
    8000fce8:	00035797          	auipc	a5,0x35
    8000fcec:	3297c783          	lbu	a5,809(a5) # 80045011 <excpt+0x1>
    8000fcf0:	00013597          	auipc	a1,0x13
    8000fcf4:	e5058593          	addi	a1,a1,-432 # 80022b40 <__func__.2+0x2d8>
    8000fcf8:	c799                	beqz	a5,8000fd06 <external_interrupt_VSEI+0x8e>
    8000fcfa:	57fd                	li	a5,-1
    8000fcfc:	6418                	ld	a4,8(s0)
    8000fcfe:	17fe                	slli	a5,a5,0x3f
    8000fd00:	07a9                	addi	a5,a5,10
    8000fd02:	6af70363          	beq	a4,a5,800103a8 <external_interrupt_VSEI+0x730>
    8000fd06:	00013517          	auipc	a0,0x13
    8000fd0a:	e7a50513          	addi	a0,a0,-390 # 80022b80 <__func__.2+0x318>
    8000fd0e:	763100ef          	jal	80020c70 <printf>
    8000fd12:	00035797          	auipc	a5,0x35
    8000fd16:	2ff7c783          	lbu	a5,767(a5) # 80045011 <excpt+0x1>
    8000fd1a:	c799                	beqz	a5,8000fd28 <external_interrupt_VSEI+0xb0>
    8000fd1c:	57fd                	li	a5,-1
    8000fd1e:	6418                	ld	a4,8(s0)
    8000fd20:	17fe                	slli	a5,a5,0x3f
    8000fd22:	07a9                	addi	a5,a5,10
    8000fd24:	5cf70463          	beq	a4,a5,800102ec <external_interrupt_VSEI+0x674>
    8000fd28:	00013517          	auipc	a0,0x13
    8000fd2c:	e6050513          	addi	a0,a0,-416 # 80022b88 <__func__.2+0x320>
    8000fd30:	741100ef          	jal	80020c70 <printf>
    8000fd34:	02900513          	li	a0,41
    8000fd38:	5c8100ef          	jal	80020300 <putchar>
    8000fd3c:	4529                	li	a0,10
    8000fd3e:	5c2100ef          	jal	80020300 <putchar>
    8000fd42:	00035797          	auipc	a5,0x35
    8000fd46:	2cf7c783          	lbu	a5,719(a5) # 80045011 <excpt+0x1>
    8000fd4a:	4481                	li	s1,0
    8000fd4c:	c799                	beqz	a5,8000fd5a <external_interrupt_VSEI+0xe2>
    8000fd4e:	57fd                	li	a5,-1
    8000fd50:	6418                	ld	a4,8(s0)
    8000fd52:	17fe                	slli	a5,a5,0x3f
    8000fd54:	07a9                	addi	a5,a5,10
    8000fd56:	62f70163          	beq	a4,a5,80010378 <external_interrupt_VSEI+0x700>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8000fd5a:	0330000f          	fence	rw,rw
    8000fd5e:	4785                	li	a5,1
    8000fd60:	00035717          	auipc	a4,0x35
    8000fd64:	2e073423          	sd	zero,744(a4) # 80045048 <excpt+0x38>
    8000fd68:	00f41023          	sh	a5,0(s0)
    8000fd6c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000fd70:	4511                	li	a0,4
    8000fd72:	d67f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000fd76:	40000793          	li	a5,1024
    8000fd7a:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000fd7e:	577d                	li	a4,-1
    8000fd80:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8000fd84:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000fd88:	4509                	li	a0,2
    8000fd8a:	d4ff00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000fd8e:	08200593          	li	a1,130
    8000fd92:	00016617          	auipc	a2,0x16
    8000fd96:	47e60613          	addi	a2,a2,1150 # 80026210 <__func__.2+0x39a8>
    8000fd9a:	00013517          	auipc	a0,0x13
    8000fd9e:	dce50513          	addi	a0,a0,-562 # 80022b68 <__func__.2+0x300>
    8000fda2:	6cf100ef          	jal	80020c70 <printf>
    8000fda6:	00035797          	auipc	a5,0x35
    8000fdaa:	26b7c783          	lbu	a5,619(a5) # 80045011 <excpt+0x1>
    8000fdae:	00013597          	auipc	a1,0x13
    8000fdb2:	d9258593          	addi	a1,a1,-622 # 80022b40 <__func__.2+0x2d8>
    8000fdb6:	c799                	beqz	a5,8000fdc4 <external_interrupt_VSEI+0x14c>
    8000fdb8:	57fd                	li	a5,-1
    8000fdba:	6418                	ld	a4,8(s0)
    8000fdbc:	17fe                	slli	a5,a5,0x3f
    8000fdbe:	07a9                	addi	a5,a5,10
    8000fdc0:	5cf70463          	beq	a4,a5,80010388 <external_interrupt_VSEI+0x710>
    8000fdc4:	00013517          	auipc	a0,0x13
    8000fdc8:	dbc50513          	addi	a0,a0,-580 # 80022b80 <__func__.2+0x318>
    8000fdcc:	6a5100ef          	jal	80020c70 <printf>
    8000fdd0:	00035797          	auipc	a5,0x35
    8000fdd4:	2417c783          	lbu	a5,577(a5) # 80045011 <excpt+0x1>
    8000fdd8:	c799                	beqz	a5,8000fde6 <external_interrupt_VSEI+0x16e>
    8000fdda:	57fd                	li	a5,-1
    8000fddc:	6418                	ld	a4,8(s0)
    8000fdde:	17fe                	slli	a5,a5,0x3f
    8000fde0:	07a9                	addi	a5,a5,10
    8000fde2:	4ef70563          	beq	a4,a5,800102cc <external_interrupt_VSEI+0x654>
    8000fde6:	00013517          	auipc	a0,0x13
    8000fdea:	da250513          	addi	a0,a0,-606 # 80022b88 <__func__.2+0x320>
    8000fdee:	683100ef          	jal	80020c70 <printf>
    8000fdf2:	02900513          	li	a0,41
    8000fdf6:	50a100ef          	jal	80020300 <putchar>
    8000fdfa:	4529                	li	a0,10
    8000fdfc:	504100ef          	jal	80020300 <putchar>
    8000fe00:	c881                	beqz	s1,8000fe10 <external_interrupt_VSEI+0x198>
    8000fe02:	00035797          	auipc	a5,0x35
    8000fe06:	20f7c783          	lbu	a5,527(a5) # 80045011 <excpt+0x1>
    8000fe0a:	4481                	li	s1,0
    8000fe0c:	4a079263          	bnez	a5,800102b0 <external_interrupt_VSEI+0x638>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    8000fe10:	0330000f          	fence	rw,rw
    8000fe14:	4785                	li	a5,1
    8000fe16:	00035717          	auipc	a4,0x35
    8000fe1a:	22073923          	sd	zero,562(a4) # 80045048 <excpt+0x38>
    8000fe1e:	00f41023          	sh	a5,0(s0)
    8000fe22:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000fe26:	4511                	li	a0,4
    8000fe28:	cb1f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000fe2c:	40000793          	li	a5,1024
    8000fe30:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000fe34:	577d                	li	a4,-1
    8000fe36:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    8000fe3a:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8000fe3e:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000fe42:	4509                	li	a0,2
    8000fe44:	c95f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000fe48:	08200593          	li	a1,130
    8000fe4c:	00016617          	auipc	a2,0x16
    8000fe50:	42460613          	addi	a2,a2,1060 # 80026270 <__func__.2+0x3a08>
    8000fe54:	00013517          	auipc	a0,0x13
    8000fe58:	d1450513          	addi	a0,a0,-748 # 80022b68 <__func__.2+0x300>
    8000fe5c:	615100ef          	jal	80020c70 <printf>
    8000fe60:	00035797          	auipc	a5,0x35
    8000fe64:	1b17c783          	lbu	a5,433(a5) # 80045011 <excpt+0x1>
    8000fe68:	00013597          	auipc	a1,0x13
    8000fe6c:	cd858593          	addi	a1,a1,-808 # 80022b40 <__func__.2+0x2d8>
    8000fe70:	c799                	beqz	a5,8000fe7e <external_interrupt_VSEI+0x206>
    8000fe72:	57fd                	li	a5,-1
    8000fe74:	6418                	ld	a4,8(s0)
    8000fe76:	17fe                	slli	a5,a5,0x3f
    8000fe78:	07a9                	addi	a5,a5,10
    8000fe7a:	54f70763          	beq	a4,a5,800103c8 <external_interrupt_VSEI+0x750>
    8000fe7e:	00013517          	auipc	a0,0x13
    8000fe82:	d0250513          	addi	a0,a0,-766 # 80022b80 <__func__.2+0x318>
    8000fe86:	5eb100ef          	jal	80020c70 <printf>
    8000fe8a:	00035797          	auipc	a5,0x35
    8000fe8e:	1877c783          	lbu	a5,391(a5) # 80045011 <excpt+0x1>
    8000fe92:	c799                	beqz	a5,8000fea0 <external_interrupt_VSEI+0x228>
    8000fe94:	57fd                	li	a5,-1
    8000fe96:	6418                	ld	a4,8(s0)
    8000fe98:	17fe                	slli	a5,a5,0x3f
    8000fe9a:	07a9                	addi	a5,a5,10
    8000fe9c:	44f70063          	beq	a4,a5,800102dc <external_interrupt_VSEI+0x664>
    8000fea0:	00013517          	auipc	a0,0x13
    8000fea4:	ce850513          	addi	a0,a0,-792 # 80022b88 <__func__.2+0x320>
    8000fea8:	5c9100ef          	jal	80020c70 <printf>
    8000feac:	02900513          	li	a0,41
    8000feb0:	450100ef          	jal	80020300 <putchar>
    8000feb4:	4529                	li	a0,10
    8000feb6:	44a100ef          	jal	80020300 <putchar>
    8000feba:	c881                	beqz	s1,8000feca <external_interrupt_VSEI+0x252>
    8000febc:	00035797          	auipc	a5,0x35
    8000fec0:	1557c783          	lbu	a5,341(a5) # 80045011 <excpt+0x1>
    8000fec4:	4481                	li	s1,0
    8000fec6:	3c079763          	bnez	a5,80010294 <external_interrupt_VSEI+0x61c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8000feca:	0330000f          	fence	rw,rw
    8000fece:	4785                	li	a5,1
    8000fed0:	00035717          	auipc	a4,0x35
    8000fed4:	16073c23          	sd	zero,376(a4) # 80045048 <excpt+0x38>
    8000fed8:	00f41023          	sh	a5,0(s0)
    8000fedc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000fee0:	4511                	li	a0,4
    8000fee2:	bf7f00ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8000fee6:	40000793          	li	a5,1024
    8000feea:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000feee:	577d                	li	a4,-1
    8000fef0:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    8000fef4:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8000fef8:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000fefc:	4509                	li	a0,2
    8000fefe:	bdbf00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8000ff02:	08200593          	li	a1,130
    8000ff06:	00016617          	auipc	a2,0x16
    8000ff0a:	3da60613          	addi	a2,a2,986 # 800262e0 <__func__.2+0x3a78>
    8000ff0e:	00013517          	auipc	a0,0x13
    8000ff12:	c5a50513          	addi	a0,a0,-934 # 80022b68 <__func__.2+0x300>
    8000ff16:	55b100ef          	jal	80020c70 <printf>
    8000ff1a:	00035797          	auipc	a5,0x35
    8000ff1e:	0f77c783          	lbu	a5,247(a5) # 80045011 <excpt+0x1>
    8000ff22:	00013597          	auipc	a1,0x13
    8000ff26:	c1e58593          	addi	a1,a1,-994 # 80022b40 <__func__.2+0x2d8>
    8000ff2a:	e789                	bnez	a5,8000ff34 <external_interrupt_VSEI+0x2bc>
    8000ff2c:	00013597          	auipc	a1,0x13
    8000ff30:	c0458593          	addi	a1,a1,-1020 # 80022b30 <__func__.2+0x2c8>
    8000ff34:	00013517          	auipc	a0,0x13
    8000ff38:	c4c50513          	addi	a0,a0,-948 # 80022b80 <__func__.2+0x318>
    8000ff3c:	535100ef          	jal	80020c70 <printf>
    8000ff40:	00035797          	auipc	a5,0x35
    8000ff44:	0d17c783          	lbu	a5,209(a5) # 80045011 <excpt+0x1>
    8000ff48:	3e079d63          	bnez	a5,80010342 <external_interrupt_VSEI+0x6ca>
    8000ff4c:	4529                	li	a0,10
    8000ff4e:	3b2100ef          	jal	80020300 <putchar>
    8000ff52:	c499                	beqz	s1,8000ff60 <external_interrupt_VSEI+0x2e8>
    8000ff54:	00035497          	auipc	s1,0x35
    8000ff58:	0bd4c483          	lbu	s1,189(s1) # 80045011 <excpt+0x1>
    8000ff5c:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    8000ff60:	0330000f          	fence	rw,rw
    8000ff64:	4785                	li	a5,1
    8000ff66:	00035717          	auipc	a4,0x35
    8000ff6a:	0e073123          	sd	zero,226(a4) # 80045048 <excpt+0x38>
    8000ff6e:	00f41023          	sh	a5,0(s0)
    8000ff72:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000ff76:	4511                	li	a0,4
    8000ff78:	b61f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000ff7c:	40000793          	li	a5,1024
    8000ff80:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000ff84:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    8000ff88:	4509                	li	a0,2
    8000ff8a:	b4ff00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000ff8e:	08200593          	li	a1,130
    8000ff92:	00016617          	auipc	a2,0x16
    8000ff96:	38e60613          	addi	a2,a2,910 # 80026320 <__func__.2+0x3ab8>
    8000ff9a:	00013517          	auipc	a0,0x13
    8000ff9e:	bce50513          	addi	a0,a0,-1074 # 80022b68 <__func__.2+0x300>
    8000ffa2:	4cf100ef          	jal	80020c70 <printf>
    8000ffa6:	00035797          	auipc	a5,0x35
    8000ffaa:	06b7c783          	lbu	a5,107(a5) # 80045011 <excpt+0x1>
    8000ffae:	00013597          	auipc	a1,0x13
    8000ffb2:	b9258593          	addi	a1,a1,-1134 # 80022b40 <__func__.2+0x2d8>
    8000ffb6:	e799                	bnez	a5,8000ffc4 <external_interrupt_VSEI+0x34c>
    8000ffb8:	57fd                	li	a5,-1
    8000ffba:	6418                	ld	a4,8(s0)
    8000ffbc:	17fe                	slli	a5,a5,0x3f
    8000ffbe:	07a9                	addi	a5,a5,10
    8000ffc0:	44f70463          	beq	a4,a5,80010408 <external_interrupt_VSEI+0x790>
    8000ffc4:	00013517          	auipc	a0,0x13
    8000ffc8:	bbc50513          	addi	a0,a0,-1092 # 80022b80 <__func__.2+0x318>
    8000ffcc:	4a5100ef          	jal	80020c70 <printf>
    8000ffd0:	00035797          	auipc	a5,0x35
    8000ffd4:	0417c783          	lbu	a5,65(a5) # 80045011 <excpt+0x1>
    8000ffd8:	e799                	bnez	a5,8000ffe6 <external_interrupt_VSEI+0x36e>
    8000ffda:	57fd                	li	a5,-1
    8000ffdc:	6418                	ld	a4,8(s0)
    8000ffde:	17fe                	slli	a5,a5,0x3f
    8000ffe0:	07a9                	addi	a5,a5,10
    8000ffe2:	30f70d63          	beq	a4,a5,800102fc <external_interrupt_VSEI+0x684>
    8000ffe6:	00013517          	auipc	a0,0x13
    8000ffea:	ba250513          	addi	a0,a0,-1118 # 80022b88 <__func__.2+0x320>
    8000ffee:	483100ef          	jal	80020c70 <printf>
    8000fff2:	02900513          	li	a0,41
    8000fff6:	30a100ef          	jal	80020300 <putchar>
    8000fffa:	4529                	li	a0,10
    8000fffc:	304100ef          	jal	80020300 <putchar>
    80010000:	c881                	beqz	s1,80010010 <external_interrupt_VSEI+0x398>
    80010002:	00035797          	auipc	a5,0x35
    80010006:	00f7c783          	lbu	a5,15(a5) # 80045011 <excpt+0x1>
    8001000a:	4481                	li	s1,0
    8001000c:	26078663          	beqz	a5,80010278 <external_interrupt_VSEI+0x600>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80010010:	0330000f          	fence	rw,rw
    80010014:	4785                	li	a5,1
    80010016:	00035717          	auipc	a4,0x35
    8001001a:	02073923          	sd	zero,50(a4) # 80045048 <excpt+0x38>
    8001001e:	00f41023          	sh	a5,0(s0)
    80010022:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010026:	4511                	li	a0,4
    80010028:	ab1f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001002c:	40000793          	li	a5,1024
    80010030:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80010034:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80010038:	57fd                	li	a5,-1
    8001003a:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    8001003e:	4509                	li	a0,2
    80010040:	a99f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80010044:	08200593          	li	a1,130
    80010048:	00016617          	auipc	a2,0x16
    8001004c:	32860613          	addi	a2,a2,808 # 80026370 <__func__.2+0x3b08>
    80010050:	00013517          	auipc	a0,0x13
    80010054:	b1850513          	addi	a0,a0,-1256 # 80022b68 <__func__.2+0x300>
    80010058:	419100ef          	jal	80020c70 <printf>
    8001005c:	00035797          	auipc	a5,0x35
    80010060:	fb57c783          	lbu	a5,-75(a5) # 80045011 <excpt+0x1>
    80010064:	00013597          	auipc	a1,0x13
    80010068:	adc58593          	addi	a1,a1,-1316 # 80022b40 <__func__.2+0x2d8>
    8001006c:	e799                	bnez	a5,8001007a <external_interrupt_VSEI+0x402>
    8001006e:	57fd                	li	a5,-1
    80010070:	6418                	ld	a4,8(s0)
    80010072:	17fe                	slli	a5,a5,0x3f
    80010074:	07a9                	addi	a5,a5,10
    80010076:	2ef70163          	beq	a4,a5,80010358 <external_interrupt_VSEI+0x6e0>
    8001007a:	00013517          	auipc	a0,0x13
    8001007e:	b0650513          	addi	a0,a0,-1274 # 80022b80 <__func__.2+0x318>
    80010082:	3ef100ef          	jal	80020c70 <printf>
    80010086:	00035797          	auipc	a5,0x35
    8001008a:	f8b7c783          	lbu	a5,-117(a5) # 80045011 <excpt+0x1>
    8001008e:	e799                	bnez	a5,8001009c <external_interrupt_VSEI+0x424>
    80010090:	57fd                	li	a5,-1
    80010092:	6418                	ld	a4,8(s0)
    80010094:	17fe                	slli	a5,a5,0x3f
    80010096:	07a9                	addi	a5,a5,10
    80010098:	28f70263          	beq	a4,a5,8001031c <external_interrupt_VSEI+0x6a4>
    8001009c:	00013517          	auipc	a0,0x13
    800100a0:	aec50513          	addi	a0,a0,-1300 # 80022b88 <__func__.2+0x320>
    800100a4:	3cd100ef          	jal	80020c70 <printf>
    800100a8:	02900513          	li	a0,41
    800100ac:	254100ef          	jal	80020300 <putchar>
    800100b0:	4529                	li	a0,10
    800100b2:	24e100ef          	jal	80020300 <putchar>
    800100b6:	c881                	beqz	s1,800100c6 <external_interrupt_VSEI+0x44e>
    800100b8:	00035797          	auipc	a5,0x35
    800100bc:	f597c783          	lbu	a5,-167(a5) # 80045011 <excpt+0x1>
    800100c0:	4481                	li	s1,0
    800100c2:	18078d63          	beqz	a5,8001025c <external_interrupt_VSEI+0x5e4>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    800100c6:	0330000f          	fence	rw,rw
    800100ca:	4785                	li	a5,1
    800100cc:	00035717          	auipc	a4,0x35
    800100d0:	f6073e23          	sd	zero,-132(a4) # 80045048 <excpt+0x38>
    800100d4:	00f41023          	sh	a5,0(s0)
    800100d8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800100dc:	4511                	li	a0,4
    800100de:	9fbf00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800100e2:	40000793          	li	a5,1024
    800100e6:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    800100ea:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800100ee:	57fd                	li	a5,-1
    800100f0:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    800100f4:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    800100f8:	4509                	li	a0,2
    800100fa:	9dff00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    800100fe:	08200593          	li	a1,130
    80010102:	00016617          	auipc	a2,0x16
    80010106:	2ce60613          	addi	a2,a2,718 # 800263d0 <__func__.2+0x3b68>
    8001010a:	00013517          	auipc	a0,0x13
    8001010e:	a5e50513          	addi	a0,a0,-1442 # 80022b68 <__func__.2+0x300>
    80010112:	35f100ef          	jal	80020c70 <printf>
    80010116:	00035797          	auipc	a5,0x35
    8001011a:	efb7c783          	lbu	a5,-261(a5) # 80045011 <excpt+0x1>
    8001011e:	00013597          	auipc	a1,0x13
    80010122:	a2258593          	addi	a1,a1,-1502 # 80022b40 <__func__.2+0x2d8>
    80010126:	e799                	bnez	a5,80010134 <external_interrupt_VSEI+0x4bc>
    80010128:	57fd                	li	a5,-1
    8001012a:	6418                	ld	a4,8(s0)
    8001012c:	17fe                	slli	a5,a5,0x3f
    8001012e:	07a9                	addi	a5,a5,10
    80010130:	2af70c63          	beq	a4,a5,800103e8 <external_interrupt_VSEI+0x770>
    80010134:	00013517          	auipc	a0,0x13
    80010138:	a4c50513          	addi	a0,a0,-1460 # 80022b80 <__func__.2+0x318>
    8001013c:	335100ef          	jal	80020c70 <printf>
    80010140:	00035797          	auipc	a5,0x35
    80010144:	ed17c783          	lbu	a5,-303(a5) # 80045011 <excpt+0x1>
    80010148:	e799                	bnez	a5,80010156 <external_interrupt_VSEI+0x4de>
    8001014a:	57fd                	li	a5,-1
    8001014c:	6418                	ld	a4,8(s0)
    8001014e:	17fe                	slli	a5,a5,0x3f
    80010150:	07a9                	addi	a5,a5,10
    80010152:	1af70d63          	beq	a4,a5,8001030c <external_interrupt_VSEI+0x694>
    80010156:	00013517          	auipc	a0,0x13
    8001015a:	a3250513          	addi	a0,a0,-1486 # 80022b88 <__func__.2+0x320>
    8001015e:	313100ef          	jal	80020c70 <printf>
    80010162:	02900513          	li	a0,41
    80010166:	19a100ef          	jal	80020300 <putchar>
    8001016a:	4529                	li	a0,10
    8001016c:	194100ef          	jal	80020300 <putchar>
    80010170:	c499                	beqz	s1,8001017e <external_interrupt_VSEI+0x506>
    80010172:	00035797          	auipc	a5,0x35
    80010176:	e9f7c783          	lbu	a5,-353(a5) # 80045011 <excpt+0x1>
    8001017a:	4481                	li	s1,0
    8001017c:	c3f1                	beqz	a5,80010240 <external_interrupt_VSEI+0x5c8>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8001017e:	0330000f          	fence	rw,rw
    80010182:	4785                	li	a5,1
    80010184:	00035717          	auipc	a4,0x35
    80010188:	ec073223          	sd	zero,-316(a4) # 80045048 <excpt+0x38>
    8001018c:	00f41023          	sh	a5,0(s0)
    80010190:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010194:	4511                	li	a0,4
    80010196:	943f00ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8001019a:	40000793          	li	a5,1024
    8001019e:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    800101a2:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    800101a6:	4509                	li	a0,2
    800101a8:	931f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    800101ac:	08200593          	li	a1,130
    800101b0:	00016617          	auipc	a2,0x16
    800101b4:	29060613          	addi	a2,a2,656 # 80026440 <__func__.2+0x3bd8>
    800101b8:	00013517          	auipc	a0,0x13
    800101bc:	9b050513          	addi	a0,a0,-1616 # 80022b68 <__func__.2+0x300>
    800101c0:	2b1100ef          	jal	80020c70 <printf>
    800101c4:	00035797          	auipc	a5,0x35
    800101c8:	e4d7c783          	lbu	a5,-435(a5) # 80045011 <excpt+0x1>
    800101cc:	00013597          	auipc	a1,0x13
    800101d0:	97458593          	addi	a1,a1,-1676 # 80022b40 <__func__.2+0x2d8>
    800101d4:	e789                	bnez	a5,800101de <external_interrupt_VSEI+0x566>
    800101d6:	00013597          	auipc	a1,0x13
    800101da:	95a58593          	addi	a1,a1,-1702 # 80022b30 <__func__.2+0x2c8>
    800101de:	00013517          	auipc	a0,0x13
    800101e2:	9a250513          	addi	a0,a0,-1630 # 80022b80 <__func__.2+0x318>
    800101e6:	28b100ef          	jal	80020c70 <printf>
    800101ea:	00035797          	auipc	a5,0x35
    800101ee:	e277c783          	lbu	a5,-473(a5) # 80045011 <excpt+0x1>
    800101f2:	12079d63          	bnez	a5,8001032c <external_interrupt_VSEI+0x6b4>
    800101f6:	4529                	li	a0,10
    800101f8:	108100ef          	jal	80020300 <putchar>
    800101fc:	c491                	beqz	s1,80010208 <external_interrupt_VSEI+0x590>
    800101fe:	00035797          	auipc	a5,0x35
    80010202:	e137c783          	lbu	a5,-493(a5) # 80045011 <excpt+0x1>
    80010206:	c79d                	beqz	a5,80010234 <external_interrupt_VSEI+0x5bc>
    80010208:	4401                	li	s0,0





    TEST_END();
    8001020a:	00013597          	auipc	a1,0x13
    8001020e:	93658593          	addi	a1,a1,-1738 # 80022b40 <__func__.2+0x2d8>
    80010212:	00013517          	auipc	a0,0x13
    80010216:	9d650513          	addi	a0,a0,-1578 # 80022be8 <__func__.2+0x380>
    8001021a:	257100ef          	jal	80020c70 <printf>
    8001021e:	4511                	li	a0,4
    80010220:	8b9f00ef          	jal	80000ad8 <goto_priv>
    80010224:	984f10ef          	jal	800013a8 <reset_state>
}
    80010228:	60e2                	ld	ra,24(sp)
    8001022a:	8522                	mv	a0,s0
    8001022c:	6442                	ld	s0,16(sp)
    8001022e:	64a2                	ld	s1,8(sp)
    80010230:	6105                	addi	sp,sp,32
    80010232:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80010234:	4405                	li	s0,1
    TEST_END();
    80010236:	00013597          	auipc	a1,0x13
    8001023a:	8fa58593          	addi	a1,a1,-1798 # 80022b30 <__func__.2+0x2c8>
    8001023e:	bfd1                	j	80010212 <external_interrupt_VSEI+0x59a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80010240:	57fd                	li	a5,-1
    80010242:	6418                	ld	a4,8(s0)
    80010244:	17fe                	slli	a5,a5,0x3f
    80010246:	07a9                	addi	a5,a5,10
    80010248:	f2f71be3          	bne	a4,a5,8001017e <external_interrupt_VSEI+0x506>
    8001024c:	00035497          	auipc	s1,0x35
    80010250:	dc84a483          	lw	s1,-568(s1) # 80045014 <excpt+0x4>
    80010254:	14f9                	addi	s1,s1,-2
    80010256:	0014b493          	seqz	s1,s1
    8001025a:	b715                	j	8001017e <external_interrupt_VSEI+0x506>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8001025c:	57fd                	li	a5,-1
    8001025e:	6418                	ld	a4,8(s0)
    80010260:	17fe                	slli	a5,a5,0x3f
    80010262:	07a9                	addi	a5,a5,10
    80010264:	e6f711e3          	bne	a4,a5,800100c6 <external_interrupt_VSEI+0x44e>
    80010268:	00035497          	auipc	s1,0x35
    8001026c:	dac4a483          	lw	s1,-596(s1) # 80045014 <excpt+0x4>
    80010270:	14f5                	addi	s1,s1,-3
    80010272:	0014b493          	seqz	s1,s1
    80010276:	bd81                	j	800100c6 <external_interrupt_VSEI+0x44e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80010278:	57fd                	li	a5,-1
    8001027a:	6418                	ld	a4,8(s0)
    8001027c:	17fe                	slli	a5,a5,0x3f
    8001027e:	07a9                	addi	a5,a5,10
    80010280:	d8f718e3          	bne	a4,a5,80010010 <external_interrupt_VSEI+0x398>
    80010284:	00035497          	auipc	s1,0x35
    80010288:	d904a483          	lw	s1,-624(s1) # 80045014 <excpt+0x4>
    8001028c:	14f1                	addi	s1,s1,-4
    8001028e:	0014b493          	seqz	s1,s1
    80010292:	bbbd                	j	80010010 <external_interrupt_VSEI+0x398>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80010294:	57fd                	li	a5,-1
    80010296:	6418                	ld	a4,8(s0)
    80010298:	17fe                	slli	a5,a5,0x3f
    8001029a:	07a9                	addi	a5,a5,10
    8001029c:	c2f717e3          	bne	a4,a5,8000feca <external_interrupt_VSEI+0x252>
    800102a0:	00035497          	auipc	s1,0x35
    800102a4:	d744a483          	lw	s1,-652(s1) # 80045014 <excpt+0x4>
    800102a8:	14f9                	addi	s1,s1,-2
    800102aa:	0014b493          	seqz	s1,s1
    800102ae:	b931                	j	8000feca <external_interrupt_VSEI+0x252>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    800102b0:	57fd                	li	a5,-1
    800102b2:	6418                	ld	a4,8(s0)
    800102b4:	17fe                	slli	a5,a5,0x3f
    800102b6:	07a9                	addi	a5,a5,10
    800102b8:	b4f71ce3          	bne	a4,a5,8000fe10 <external_interrupt_VSEI+0x198>
    800102bc:	00035497          	auipc	s1,0x35
    800102c0:	d584a483          	lw	s1,-680(s1) # 80045014 <excpt+0x4>
    800102c4:	14f5                	addi	s1,s1,-3
    800102c6:	0014b493          	seqz	s1,s1
    800102ca:	b699                	j	8000fe10 <external_interrupt_VSEI+0x198>
    800102cc:	00035717          	auipc	a4,0x35
    800102d0:	d4872703          	lw	a4,-696(a4) # 80045014 <excpt+0x4>
    800102d4:	478d                	li	a5,3
    800102d6:	b0f718e3          	bne	a4,a5,8000fde6 <external_interrupt_VSEI+0x16e>
    800102da:	b605                	j	8000fdfa <external_interrupt_VSEI+0x182>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    800102dc:	00035717          	auipc	a4,0x35
    800102e0:	d3872703          	lw	a4,-712(a4) # 80045014 <excpt+0x4>
    800102e4:	4789                	li	a5,2
    800102e6:	baf71de3          	bne	a4,a5,8000fea0 <external_interrupt_VSEI+0x228>
    800102ea:	b6e9                	j	8000feb4 <external_interrupt_VSEI+0x23c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    800102ec:	00035717          	auipc	a4,0x35
    800102f0:	d2872703          	lw	a4,-728(a4) # 80045014 <excpt+0x4>
    800102f4:	4791                	li	a5,4
    800102f6:	a2f719e3          	bne	a4,a5,8000fd28 <external_interrupt_VSEI+0xb0>
    800102fa:	b489                	j	8000fd3c <external_interrupt_VSEI+0xc4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    800102fc:	00035717          	auipc	a4,0x35
    80010300:	d1872703          	lw	a4,-744(a4) # 80045014 <excpt+0x4>
    80010304:	4791                	li	a5,4
    80010306:	cef710e3          	bne	a4,a5,8000ffe6 <external_interrupt_VSEI+0x36e>
    8001030a:	b9c5                	j	8000fffa <external_interrupt_VSEI+0x382>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8001030c:	00035717          	auipc	a4,0x35
    80010310:	d0872703          	lw	a4,-760(a4) # 80045014 <excpt+0x4>
    80010314:	4789                	li	a5,2
    80010316:	e4f710e3          	bne	a4,a5,80010156 <external_interrupt_VSEI+0x4de>
    8001031a:	bd81                	j	8001016a <external_interrupt_VSEI+0x4f2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8001031c:	00035717          	auipc	a4,0x35
    80010320:	cf872703          	lw	a4,-776(a4) # 80045014 <excpt+0x4>
    80010324:	478d                	li	a5,3
    80010326:	d6f71be3          	bne	a4,a5,8001009c <external_interrupt_VSEI+0x424>
    8001032a:	b359                	j	800100b0 <external_interrupt_VSEI+0x438>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8001032c:	00013517          	auipc	a0,0x13
    80010330:	85c50513          	addi	a0,a0,-1956 # 80022b88 <__func__.2+0x320>
    80010334:	13d100ef          	jal	80020c70 <printf>
    80010338:	02900513          	li	a0,41
    8001033c:	7c50f0ef          	jal	80020300 <putchar>
    80010340:	bd5d                	j	800101f6 <external_interrupt_VSEI+0x57e>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80010342:	00013517          	auipc	a0,0x13
    80010346:	84650513          	addi	a0,a0,-1978 # 80022b88 <__func__.2+0x320>
    8001034a:	127100ef          	jal	80020c70 <printf>
    8001034e:	02900513          	li	a0,41
    80010352:	7af0f0ef          	jal	80020300 <putchar>
    80010356:	bedd                	j	8000ff4c <external_interrupt_VSEI+0x2d4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80010358:	00035717          	auipc	a4,0x35
    8001035c:	cbc72703          	lw	a4,-836(a4) # 80045014 <excpt+0x4>
    80010360:	478d                	li	a5,3
    80010362:	00012597          	auipc	a1,0x12
    80010366:	7ce58593          	addi	a1,a1,1998 # 80022b30 <__func__.2+0x2c8>
    8001036a:	d0f708e3          	beq	a4,a5,8001007a <external_interrupt_VSEI+0x402>
    8001036e:	00012597          	auipc	a1,0x12
    80010372:	7d258593          	addi	a1,a1,2002 # 80022b40 <__func__.2+0x2d8>
    80010376:	b311                	j	8001007a <external_interrupt_VSEI+0x402>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80010378:	00035497          	auipc	s1,0x35
    8001037c:	c9c4a483          	lw	s1,-868(s1) # 80045014 <excpt+0x4>
    80010380:	14f1                	addi	s1,s1,-4
    80010382:	0014b493          	seqz	s1,s1
    80010386:	bad1                	j	8000fd5a <external_interrupt_VSEI+0xe2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80010388:	00035717          	auipc	a4,0x35
    8001038c:	c8c72703          	lw	a4,-884(a4) # 80045014 <excpt+0x4>
    80010390:	478d                	li	a5,3
    80010392:	00012597          	auipc	a1,0x12
    80010396:	79e58593          	addi	a1,a1,1950 # 80022b30 <__func__.2+0x2c8>
    8001039a:	a2f705e3          	beq	a4,a5,8000fdc4 <external_interrupt_VSEI+0x14c>
    8001039e:	00012597          	auipc	a1,0x12
    800103a2:	7a258593          	addi	a1,a1,1954 # 80022b40 <__func__.2+0x2d8>
    800103a6:	bc39                	j	8000fdc4 <external_interrupt_VSEI+0x14c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    800103a8:	00035717          	auipc	a4,0x35
    800103ac:	c6c72703          	lw	a4,-916(a4) # 80045014 <excpt+0x4>
    800103b0:	4791                	li	a5,4
    800103b2:	00012597          	auipc	a1,0x12
    800103b6:	77e58593          	addi	a1,a1,1918 # 80022b30 <__func__.2+0x2c8>
    800103ba:	94f706e3          	beq	a4,a5,8000fd06 <external_interrupt_VSEI+0x8e>
    800103be:	00012597          	auipc	a1,0x12
    800103c2:	78258593          	addi	a1,a1,1922 # 80022b40 <__func__.2+0x2d8>
    800103c6:	b281                	j	8000fd06 <external_interrupt_VSEI+0x8e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    800103c8:	00035717          	auipc	a4,0x35
    800103cc:	c4c72703          	lw	a4,-948(a4) # 80045014 <excpt+0x4>
    800103d0:	4789                	li	a5,2
    800103d2:	00012597          	auipc	a1,0x12
    800103d6:	75e58593          	addi	a1,a1,1886 # 80022b30 <__func__.2+0x2c8>
    800103da:	aaf702e3          	beq	a4,a5,8000fe7e <external_interrupt_VSEI+0x206>
    800103de:	00012597          	auipc	a1,0x12
    800103e2:	76258593          	addi	a1,a1,1890 # 80022b40 <__func__.2+0x2d8>
    800103e6:	bc61                	j	8000fe7e <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    800103e8:	00035717          	auipc	a4,0x35
    800103ec:	c2c72703          	lw	a4,-980(a4) # 80045014 <excpt+0x4>
    800103f0:	4789                	li	a5,2
    800103f2:	00012597          	auipc	a1,0x12
    800103f6:	73e58593          	addi	a1,a1,1854 # 80022b30 <__func__.2+0x2c8>
    800103fa:	d2f70de3          	beq	a4,a5,80010134 <external_interrupt_VSEI+0x4bc>
    800103fe:	00012597          	auipc	a1,0x12
    80010402:	74258593          	addi	a1,a1,1858 # 80022b40 <__func__.2+0x2d8>
    80010406:	b33d                	j	80010134 <external_interrupt_VSEI+0x4bc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80010408:	00035717          	auipc	a4,0x35
    8001040c:	c0c72703          	lw	a4,-1012(a4) # 80045014 <excpt+0x4>
    80010410:	4791                	li	a5,4
    80010412:	00012597          	auipc	a1,0x12
    80010416:	71e58593          	addi	a1,a1,1822 # 80022b30 <__func__.2+0x2c8>
    8001041a:	baf705e3          	beq	a4,a5,8000ffc4 <external_interrupt_VSEI+0x34c>
    8001041e:	00012597          	auipc	a1,0x12
    80010422:	72258593          	addi	a1,a1,1826 # 80022b40 <__func__.2+0x2d8>
    80010426:	be79                	j	8000ffc4 <external_interrupt_VSEI+0x34c>

0000000080010428 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80010428:	1101                	addi	sp,sp,-32

    TEST_START();
    8001042a:	00011597          	auipc	a1,0x11
    8001042e:	5a658593          	addi	a1,a1,1446 # 800219d0 <__func__.2>
    80010432:	00012517          	auipc	a0,0x12
    80010436:	71e50513          	addi	a0,a0,1822 # 80022b50 <__func__.2+0x2e8>
bool software_interrupt_msi() {
    8001043a:	ec06                	sd	ra,24(sp)
    8001043c:	e822                	sd	s0,16(sp)
    8001043e:	e426                	sd	s1,8(sp)
    TEST_START();
    80010440:	031100ef          	jal	80020c70 <printf>
    80010444:	4529                	li	a0,10
    80010446:	6bb0f0ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    8001044a:	0330000f          	fence	rw,rw
    8001044e:	00035497          	auipc	s1,0x35
    80010452:	bc248493          	addi	s1,s1,-1086 # 80045010 <excpt>
    80010456:	4785                	li	a5,1
    80010458:	00035717          	auipc	a4,0x35
    8001045c:	be073823          	sd	zero,-1040(a4) # 80045048 <excpt+0x38>
    80010460:	00f49023          	sh	a5,0(s1)
    80010464:	0330000f          	fence	rw,rw

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    80010468:	4511                	li	a0,4
    8001046a:	e6ef00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001046e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010472:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    80010476:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8001047a:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    8001047e:	4511                	li	a0,4
    80010480:	e58f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80010484:	08200593          	li	a1,130
    80010488:	00016617          	auipc	a2,0x16
    8001048c:	00860613          	addi	a2,a2,8 # 80026490 <__func__.2+0x3c28>
    80010490:	00012517          	auipc	a0,0x12
    80010494:	6d850513          	addi	a0,a0,1752 # 80022b68 <__func__.2+0x300>
    80010498:	7d8100ef          	jal	80020c70 <printf>
    8001049c:	00035797          	auipc	a5,0x35
    800104a0:	b757c783          	lbu	a5,-1163(a5) # 80045011 <excpt+0x1>
    800104a4:	00012597          	auipc	a1,0x12
    800104a8:	69c58593          	addi	a1,a1,1692 # 80022b40 <__func__.2+0x2d8>
    800104ac:	cb89                	beqz	a5,800104be <software_interrupt_msi+0x96>
    800104ae:	57fd                	li	a5,-1
    800104b0:	6498                	ld	a4,8(s1)
    800104b2:	17fe                	slli	a5,a5,0x3f
    800104b4:	0789                	addi	a5,a5,2
    800104b6:	00f71463          	bne	a4,a5,800104be <software_interrupt_msi+0x96>
    800104ba:	61b0006f          	j	800112d4 <software_interrupt_msi+0xeac>
    800104be:	00012517          	auipc	a0,0x12
    800104c2:	6c250513          	addi	a0,a0,1730 # 80022b80 <__func__.2+0x318>
    800104c6:	7aa100ef          	jal	80020c70 <printf>
    800104ca:	00035797          	auipc	a5,0x35
    800104ce:	b477c783          	lbu	a5,-1209(a5) # 80045011 <excpt+0x1>
    800104d2:	c799                	beqz	a5,800104e0 <software_interrupt_msi+0xb8>
    800104d4:	57fd                	li	a5,-1
    800104d6:	6498                	ld	a4,8(s1)
    800104d8:	17fe                	slli	a5,a5,0x3f
    800104da:	0789                	addi	a5,a5,2
    800104dc:	46f70be3          	beq	a4,a5,80011152 <software_interrupt_msi+0xd2a>
    800104e0:	00012517          	auipc	a0,0x12
    800104e4:	6a850513          	addi	a0,a0,1704 # 80022b88 <__func__.2+0x320>
    800104e8:	788100ef          	jal	80020c70 <printf>
    800104ec:	02900513          	li	a0,41
    800104f0:	6110f0ef          	jal	80020300 <putchar>
    800104f4:	4529                	li	a0,10
    800104f6:	60b0f0ef          	jal	80020300 <putchar>
    800104fa:	00035797          	auipc	a5,0x35
    800104fe:	b177c783          	lbu	a5,-1257(a5) # 80045011 <excpt+0x1>
    80010502:	4401                	li	s0,0
    80010504:	cb89                	beqz	a5,80010516 <software_interrupt_msi+0xee>
    80010506:	57fd                	li	a5,-1
    80010508:	6498                	ld	a4,8(s1)
    8001050a:	17fe                	slli	a5,a5,0x3f
    8001050c:	0789                	addi	a5,a5,2
    8001050e:	00f71463          	bne	a4,a5,80010516 <software_interrupt_msi+0xee>
    80010512:	6af0006f          	j	800113c0 <software_interrupt_msi+0xf98>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80010516:	0330000f          	fence	rw,rw
    8001051a:	4785                	li	a5,1
    8001051c:	00035717          	auipc	a4,0x35
    80010520:	b2073623          	sd	zero,-1236(a4) # 80045048 <excpt+0x38>
    80010524:	00f49023          	sh	a5,0(s1)
    80010528:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001052c:	4511                	li	a0,4
    8001052e:	daaf00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80010532:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80010536:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001053a:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    8001053e:	4511                	li	a0,4
    80010540:	d98f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80010544:	08200593          	li	a1,130
    80010548:	00016617          	auipc	a2,0x16
    8001054c:	fa860613          	addi	a2,a2,-88 # 800264f0 <__func__.2+0x3c88>
    80010550:	00012517          	auipc	a0,0x12
    80010554:	61850513          	addi	a0,a0,1560 # 80022b68 <__func__.2+0x300>
    80010558:	718100ef          	jal	80020c70 <printf>
    8001055c:	00035797          	auipc	a5,0x35
    80010560:	ab57c783          	lbu	a5,-1355(a5) # 80045011 <excpt+0x1>
    80010564:	00012597          	auipc	a1,0x12
    80010568:	5dc58593          	addi	a1,a1,1500 # 80022b40 <__func__.2+0x2d8>
    8001056c:	e789                	bnez	a5,80010576 <software_interrupt_msi+0x14e>
    8001056e:	00012597          	auipc	a1,0x12
    80010572:	5c258593          	addi	a1,a1,1474 # 80022b30 <__func__.2+0x2c8>
    80010576:	00012517          	auipc	a0,0x12
    8001057a:	60a50513          	addi	a0,a0,1546 # 80022b80 <__func__.2+0x318>
    8001057e:	6f2100ef          	jal	80020c70 <printf>
    80010582:	00035797          	auipc	a5,0x35
    80010586:	a8f7c783          	lbu	a5,-1393(a5) # 80045011 <excpt+0x1>
    8001058a:	440797e3          	bnez	a5,800111d8 <software_interrupt_msi+0xdb0>
    8001058e:	4529                	li	a0,10
    80010590:	5710f0ef          	jal	80020300 <putchar>
    80010594:	c419                	beqz	s0,800105a2 <software_interrupt_msi+0x17a>
    80010596:	00035417          	auipc	s0,0x35
    8001059a:	a7b44403          	lbu	s0,-1413(s0) # 80045011 <excpt+0x1>
    8001059e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    800105a2:	0330000f          	fence	rw,rw
    800105a6:	4785                	li	a5,1
    800105a8:	00035717          	auipc	a4,0x35
    800105ac:	aa073023          	sd	zero,-1376(a4) # 80045048 <excpt+0x38>
    800105b0:	00f49023          	sh	a5,0(s1)
    800105b4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800105b8:	4511                	li	a0,4
    800105ba:	d1ef00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800105be:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800105c2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800105c6:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800105ca:	4511                	li	a0,4
    800105cc:	d0cf00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    800105d0:	08200593          	li	a1,130
    800105d4:	00016617          	auipc	a2,0x16
    800105d8:	f7460613          	addi	a2,a2,-140 # 80026548 <__func__.2+0x3ce0>
    800105dc:	00012517          	auipc	a0,0x12
    800105e0:	58c50513          	addi	a0,a0,1420 # 80022b68 <__func__.2+0x300>
    800105e4:	68c100ef          	jal	80020c70 <printf>
    800105e8:	00035797          	auipc	a5,0x35
    800105ec:	a297c783          	lbu	a5,-1495(a5) # 80045011 <excpt+0x1>
    800105f0:	00012597          	auipc	a1,0x12
    800105f4:	55058593          	addi	a1,a1,1360 # 80022b40 <__func__.2+0x2d8>
    800105f8:	cf99                	beqz	a5,80010616 <software_interrupt_msi+0x1ee>
    800105fa:	57fd                	li	a5,-1
    800105fc:	6498                	ld	a4,8(s1)
    800105fe:	17fe                	slli	a5,a5,0x3f
    80010600:	0789                	addi	a5,a5,2
    80010602:	00012597          	auipc	a1,0x12
    80010606:	52e58593          	addi	a1,a1,1326 # 80022b30 <__func__.2+0x2c8>
    8001060a:	00f70663          	beq	a4,a5,80010616 <software_interrupt_msi+0x1ee>
    8001060e:	00012597          	auipc	a1,0x12
    80010612:	53258593          	addi	a1,a1,1330 # 80022b40 <__func__.2+0x2d8>
    80010616:	00012517          	auipc	a0,0x12
    8001061a:	56a50513          	addi	a0,a0,1386 # 80022b80 <__func__.2+0x318>
    8001061e:	652100ef          	jal	80020c70 <printf>
    80010622:	00035797          	auipc	a5,0x35
    80010626:	9ef7c783          	lbu	a5,-1553(a5) # 80045011 <excpt+0x1>
    8001062a:	c799                	beqz	a5,80010638 <software_interrupt_msi+0x210>
    8001062c:	57fd                	li	a5,-1
    8001062e:	6498                	ld	a4,8(s1)
    80010630:	17fe                	slli	a5,a5,0x3f
    80010632:	0789                	addi	a5,a5,2
    80010634:	00f70c63          	beq	a4,a5,8001064c <software_interrupt_msi+0x224>
    80010638:	00012517          	auipc	a0,0x12
    8001063c:	55050513          	addi	a0,a0,1360 # 80022b88 <__func__.2+0x320>
    80010640:	630100ef          	jal	80020c70 <printf>
    80010644:	02900513          	li	a0,41
    80010648:	4b90f0ef          	jal	80020300 <putchar>
    8001064c:	4529                	li	a0,10
    8001064e:	4b30f0ef          	jal	80020300 <putchar>
    80010652:	c801                	beqz	s0,80010662 <software_interrupt_msi+0x23a>
    80010654:	00035797          	auipc	a5,0x35
    80010658:	9bd7c783          	lbu	a5,-1603(a5) # 80045011 <excpt+0x1>
    8001065c:	4401                	li	s0,0
    8001065e:	2c079ae3          	bnez	a5,80011132 <software_interrupt_msi+0xd0a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80010662:	0330000f          	fence	rw,rw
    80010666:	4785                	li	a5,1
    80010668:	00035717          	auipc	a4,0x35
    8001066c:	9e073023          	sd	zero,-1568(a4) # 80045048 <excpt+0x38>
    80010670:	00f49023          	sh	a5,0(s1)
    80010674:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010678:	4511                	li	a0,4
    8001067a:	c5ef00ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001067e:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010682:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010686:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    8001068a:	4511                	li	a0,4
    8001068c:	c4cf00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80010690:	08200593          	li	a1,130
    80010694:	00016617          	auipc	a2,0x16
    80010698:	f1460613          	addi	a2,a2,-236 # 800265a8 <__func__.2+0x3d40>
    8001069c:	00012517          	auipc	a0,0x12
    800106a0:	4cc50513          	addi	a0,a0,1228 # 80022b68 <__func__.2+0x300>
    800106a4:	5cc100ef          	jal	80020c70 <printf>
    800106a8:	00035797          	auipc	a5,0x35
    800106ac:	9697c783          	lbu	a5,-1687(a5) # 80045011 <excpt+0x1>
    800106b0:	00012597          	auipc	a1,0x12
    800106b4:	49058593          	addi	a1,a1,1168 # 80022b40 <__func__.2+0x2d8>
    800106b8:	e789                	bnez	a5,800106c2 <software_interrupt_msi+0x29a>
    800106ba:	00012597          	auipc	a1,0x12
    800106be:	47658593          	addi	a1,a1,1142 # 80022b30 <__func__.2+0x2c8>
    800106c2:	00012517          	auipc	a0,0x12
    800106c6:	4be50513          	addi	a0,a0,1214 # 80022b80 <__func__.2+0x318>
    800106ca:	5a6100ef          	jal	80020c70 <printf>
    800106ce:	00035797          	auipc	a5,0x35
    800106d2:	9437c783          	lbu	a5,-1725(a5) # 80045011 <excpt+0x1>
    800106d6:	320798e3          	bnez	a5,80011206 <software_interrupt_msi+0xdde>
    800106da:	4529                	li	a0,10
    800106dc:	4250f0ef          	jal	80020300 <putchar>
    800106e0:	c419                	beqz	s0,800106ee <software_interrupt_msi+0x2c6>
    800106e2:	00035417          	auipc	s0,0x35
    800106e6:	92f44403          	lbu	s0,-1745(s0) # 80045011 <excpt+0x1>
    800106ea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800106ee:	0330000f          	fence	rw,rw
    800106f2:	4785                	li	a5,1
    800106f4:	00035717          	auipc	a4,0x35
    800106f8:	94073a23          	sd	zero,-1708(a4) # 80045048 <excpt+0x38>
    800106fc:	00f49023          	sh	a5,0(s1)
    80010700:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010704:	4511                	li	a0,4
    80010706:	bd2f00ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001070a:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001070e:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010712:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80010716:	4511                	li	a0,4
    80010718:	bc0f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    8001071c:	08200593          	li	a1,130
    80010720:	00016617          	auipc	a2,0x16
    80010724:	ed860613          	addi	a2,a2,-296 # 800265f8 <__func__.2+0x3d90>
    80010728:	00012517          	auipc	a0,0x12
    8001072c:	44050513          	addi	a0,a0,1088 # 80022b68 <__func__.2+0x300>
    80010730:	540100ef          	jal	80020c70 <printf>
    80010734:	00035797          	auipc	a5,0x35
    80010738:	8dd7c783          	lbu	a5,-1827(a5) # 80045011 <excpt+0x1>
    8001073c:	00012597          	auipc	a1,0x12
    80010740:	40458593          	addi	a1,a1,1028 # 80022b40 <__func__.2+0x2d8>
    80010744:	e789                	bnez	a5,8001074e <software_interrupt_msi+0x326>
    80010746:	00012597          	auipc	a1,0x12
    8001074a:	3ea58593          	addi	a1,a1,1002 # 80022b30 <__func__.2+0x2c8>
    8001074e:	00012517          	auipc	a0,0x12
    80010752:	43250513          	addi	a0,a0,1074 # 80022b80 <__func__.2+0x318>
    80010756:	51a100ef          	jal	80020c70 <printf>
    8001075a:	00035797          	auipc	a5,0x35
    8001075e:	8b77c783          	lbu	a5,-1865(a5) # 80045011 <excpt+0x1>
    80010762:	30079ce3          	bnez	a5,8001127a <software_interrupt_msi+0xe52>
    80010766:	4529                	li	a0,10
    80010768:	3990f0ef          	jal	80020300 <putchar>
    8001076c:	c419                	beqz	s0,8001077a <software_interrupt_msi+0x352>
    8001076e:	00035417          	auipc	s0,0x35
    80010772:	8a344403          	lbu	s0,-1885(s0) # 80045011 <excpt+0x1>
    80010776:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001077a:	0330000f          	fence	rw,rw
    8001077e:	4785                	li	a5,1
    80010780:	00035717          	auipc	a4,0x35
    80010784:	8c073423          	sd	zero,-1848(a4) # 80045048 <excpt+0x38>
    80010788:	00f49023          	sh	a5,0(s1)
    8001078c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010790:	4511                	li	a0,4
    80010792:	b46f00ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80010796:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001079a:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001079e:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800107a2:	4511                	li	a0,4
    800107a4:	b34f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    800107a8:	08200593          	li	a1,130
    800107ac:	00016617          	auipc	a2,0x16
    800107b0:	e9c60613          	addi	a2,a2,-356 # 80026648 <__func__.2+0x3de0>
    800107b4:	00012517          	auipc	a0,0x12
    800107b8:	3b450513          	addi	a0,a0,948 # 80022b68 <__func__.2+0x300>
    800107bc:	4b4100ef          	jal	80020c70 <printf>
    800107c0:	00035797          	auipc	a5,0x35
    800107c4:	8517c783          	lbu	a5,-1967(a5) # 80045011 <excpt+0x1>
    800107c8:	00012597          	auipc	a1,0x12
    800107cc:	37858593          	addi	a1,a1,888 # 80022b40 <__func__.2+0x2d8>
    800107d0:	e789                	bnez	a5,800107da <software_interrupt_msi+0x3b2>
    800107d2:	00012597          	auipc	a1,0x12
    800107d6:	35e58593          	addi	a1,a1,862 # 80022b30 <__func__.2+0x2c8>
    800107da:	00012517          	auipc	a0,0x12
    800107de:	3a650513          	addi	a0,a0,934 # 80022b80 <__func__.2+0x318>
    800107e2:	48e100ef          	jal	80020c70 <printf>
    800107e6:	00035797          	auipc	a5,0x35
    800107ea:	82b7c783          	lbu	a5,-2005(a5) # 80045011 <excpt+0x1>
    800107ee:	26079ae3          	bnez	a5,80011262 <software_interrupt_msi+0xe3a>
    800107f2:	4529                	li	a0,10
    800107f4:	30d0f0ef          	jal	80020300 <putchar>
    800107f8:	c419                	beqz	s0,80010806 <software_interrupt_msi+0x3de>
    800107fa:	00035417          	auipc	s0,0x35
    800107fe:	81744403          	lbu	s0,-2025(s0) # 80045011 <excpt+0x1>
    80010802:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    80010806:	0330000f          	fence	rw,rw
    8001080a:	4785                	li	a5,1
    8001080c:	00035717          	auipc	a4,0x35
    80010810:	82073e23          	sd	zero,-1988(a4) # 80045048 <excpt+0x38>
    80010814:	00f49023          	sh	a5,0(s1)
    80010818:	0330000f          	fence	rw,rw
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8001081c:	4511                	li	a0,4
    8001081e:	abaf00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80010822:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010826:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001082a:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001082e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010832:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80010836:	450d                	li	a0,3
    80010838:	aa0f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001083c:	08200593          	li	a1,130
    80010840:	00016617          	auipc	a2,0x16
    80010844:	e5860613          	addi	a2,a2,-424 # 80026698 <__func__.2+0x3e30>
    80010848:	00012517          	auipc	a0,0x12
    8001084c:	32050513          	addi	a0,a0,800 # 80022b68 <__func__.2+0x300>
    80010850:	420100ef          	jal	80020c70 <printf>
    80010854:	00034797          	auipc	a5,0x34
    80010858:	7bd7c783          	lbu	a5,1981(a5) # 80045011 <excpt+0x1>
    8001085c:	00012597          	auipc	a1,0x12
    80010860:	2e458593          	addi	a1,a1,740 # 80022b40 <__func__.2+0x2d8>
    80010864:	c799                	beqz	a5,80010872 <software_interrupt_msi+0x44a>
    80010866:	57fd                	li	a5,-1
    80010868:	6498                	ld	a4,8(s1)
    8001086a:	17fe                	slli	a5,a5,0x3f
    8001086c:	0789                	addi	a5,a5,2
    8001086e:	2cf707e3          	beq	a4,a5,8001133c <software_interrupt_msi+0xf14>
    80010872:	00012517          	auipc	a0,0x12
    80010876:	30e50513          	addi	a0,a0,782 # 80022b80 <__func__.2+0x318>
    8001087a:	3f6100ef          	jal	80020c70 <printf>
    8001087e:	00034797          	auipc	a5,0x34
    80010882:	7937c783          	lbu	a5,1939(a5) # 80045011 <excpt+0x1>
    80010886:	c799                	beqz	a5,80010894 <software_interrupt_msi+0x46c>
    80010888:	57fd                	li	a5,-1
    8001088a:	6498                	ld	a4,8(s1)
    8001088c:	17fe                	slli	a5,a5,0x3f
    8001088e:	0789                	addi	a5,a5,2
    80010890:	10f703e3          	beq	a4,a5,80011196 <software_interrupt_msi+0xd6e>
    80010894:	00012517          	auipc	a0,0x12
    80010898:	2f450513          	addi	a0,a0,756 # 80022b88 <__func__.2+0x320>
    8001089c:	3d4100ef          	jal	80020c70 <printf>
    800108a0:	02900513          	li	a0,41
    800108a4:	25d0f0ef          	jal	80020300 <putchar>
    800108a8:	4529                	li	a0,10
    800108aa:	2570f0ef          	jal	80020300 <putchar>
    800108ae:	c801                	beqz	s0,800108be <software_interrupt_msi+0x496>
    800108b0:	00034797          	auipc	a5,0x34
    800108b4:	7617c783          	lbu	a5,1889(a5) # 80045011 <excpt+0x1>
    800108b8:	4401                	li	s0,0
    800108ba:	04079de3          	bnez	a5,80011114 <software_interrupt_msi+0xcec>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800108be:	0330000f          	fence	rw,rw
    800108c2:	4785                	li	a5,1
    800108c4:	00034717          	auipc	a4,0x34
    800108c8:	78073223          	sd	zero,1924(a4) # 80045048 <excpt+0x38>
    800108cc:	00f49023          	sh	a5,0(s1)
    800108d0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800108d4:	4511                	li	a0,4
    800108d6:	a02f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800108da:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800108de:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800108e2:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800108e6:	57fd                	li	a5,-1
    800108e8:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800108ec:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800108f0:	450d                	li	a0,3
    800108f2:	9e6f00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800108f6:	08200593          	li	a1,130
    800108fa:	00016617          	auipc	a2,0x16
    800108fe:	dfe60613          	addi	a2,a2,-514 # 800266f8 <__func__.2+0x3e90>
    80010902:	00012517          	auipc	a0,0x12
    80010906:	26650513          	addi	a0,a0,614 # 80022b68 <__func__.2+0x300>
    8001090a:	366100ef          	jal	80020c70 <printf>
    8001090e:	00034797          	auipc	a5,0x34
    80010912:	7037c783          	lbu	a5,1795(a5) # 80045011 <excpt+0x1>
    80010916:	00012597          	auipc	a1,0x12
    8001091a:	22a58593          	addi	a1,a1,554 # 80022b40 <__func__.2+0x2d8>
    8001091e:	c799                	beqz	a5,8001092c <software_interrupt_msi+0x504>
    80010920:	57fd                	li	a5,-1
    80010922:	6498                	ld	a4,8(s1)
    80010924:	17fe                	slli	a5,a5,0x3f
    80010926:	0789                	addi	a5,a5,2
    80010928:	22f70be3          	beq	a4,a5,8001135e <software_interrupt_msi+0xf36>
    8001092c:	00012517          	auipc	a0,0x12
    80010930:	25450513          	addi	a0,a0,596 # 80022b80 <__func__.2+0x318>
    80010934:	33c100ef          	jal	80020c70 <printf>
    80010938:	00034797          	auipc	a5,0x34
    8001093c:	6d97c783          	lbu	a5,1753(a5) # 80045011 <excpt+0x1>
    80010940:	c799                	beqz	a5,8001094e <software_interrupt_msi+0x526>
    80010942:	57fd                	li	a5,-1
    80010944:	6498                	ld	a4,8(s1)
    80010946:	17fe                	slli	a5,a5,0x3f
    80010948:	0789                	addi	a5,a5,2
    8001094a:	02f70de3          	beq	a4,a5,80011184 <software_interrupt_msi+0xd5c>
    8001094e:	00012517          	auipc	a0,0x12
    80010952:	23a50513          	addi	a0,a0,570 # 80022b88 <__func__.2+0x320>
    80010956:	31a100ef          	jal	80020c70 <printf>
    8001095a:	02900513          	li	a0,41
    8001095e:	1a30f0ef          	jal	80020300 <putchar>
    80010962:	4529                	li	a0,10
    80010964:	19d0f0ef          	jal	80020300 <putchar>
    80010968:	c801                	beqz	s0,80010978 <software_interrupt_msi+0x550>
    8001096a:	00034797          	auipc	a5,0x34
    8001096e:	6a77c783          	lbu	a5,1703(a5) # 80045011 <excpt+0x1>
    80010972:	4401                	li	s0,0
    80010974:	78079163          	bnez	a5,800110f6 <software_interrupt_msi+0xcce>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80010978:	0330000f          	fence	rw,rw
    8001097c:	4785                	li	a5,1
    8001097e:	00034717          	auipc	a4,0x34
    80010982:	6c073523          	sd	zero,1738(a4) # 80045048 <excpt+0x38>
    80010986:	00f49023          	sh	a5,0(s1)
    8001098a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001098e:	4511                	li	a0,4
    80010990:	948f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010994:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80010998:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001099c:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800109a0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800109a4:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800109a8:	450d                	li	a0,3
    800109aa:	92ef00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800109ae:	08200593          	li	a1,130
    800109b2:	00016617          	auipc	a2,0x16
    800109b6:	db660613          	addi	a2,a2,-586 # 80026768 <__func__.2+0x3f00>
    800109ba:	00012517          	auipc	a0,0x12
    800109be:	1ae50513          	addi	a0,a0,430 # 80022b68 <__func__.2+0x300>
    800109c2:	2ae100ef          	jal	80020c70 <printf>
    800109c6:	00034797          	auipc	a5,0x34
    800109ca:	64b7c783          	lbu	a5,1611(a5) # 80045011 <excpt+0x1>
    800109ce:	00012597          	auipc	a1,0x12
    800109d2:	17258593          	addi	a1,a1,370 # 80022b40 <__func__.2+0x2d8>
    800109d6:	e789                	bnez	a5,800109e0 <software_interrupt_msi+0x5b8>
    800109d8:	00012597          	auipc	a1,0x12
    800109dc:	15858593          	addi	a1,a1,344 # 80022b30 <__func__.2+0x2c8>
    800109e0:	00012517          	auipc	a0,0x12
    800109e4:	1a050513          	addi	a0,a0,416 # 80022b80 <__func__.2+0x318>
    800109e8:	288100ef          	jal	80020c70 <printf>
    800109ec:	00034797          	auipc	a5,0x34
    800109f0:	6257c783          	lbu	a5,1573(a5) # 80045011 <excpt+0x1>
    800109f4:	04079be3          	bnez	a5,8001124a <software_interrupt_msi+0xe22>
    800109f8:	4529                	li	a0,10
    800109fa:	1070f0ef          	jal	80020300 <putchar>
    800109fe:	c419                	beqz	s0,80010a0c <software_interrupt_msi+0x5e4>
    80010a00:	00034417          	auipc	s0,0x34
    80010a04:	61144403          	lbu	s0,1553(s0) # 80045011 <excpt+0x1>
    80010a08:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010a0c:	0330000f          	fence	rw,rw
    80010a10:	4785                	li	a5,1
    80010a12:	00034717          	auipc	a4,0x34
    80010a16:	62073b23          	sd	zero,1590(a4) # 80045048 <excpt+0x38>
    80010a1a:	00f49023          	sh	a5,0(s1)
    80010a1e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010a22:	4511                	li	a0,4
    80010a24:	8b4f00ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010a28:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010a2c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010a30:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80010a34:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010a38:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80010a3c:	450d                	li	a0,3
    80010a3e:	89af00ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80010a42:	08200593          	li	a1,130
    80010a46:	00016617          	auipc	a2,0x16
    80010a4a:	d8a60613          	addi	a2,a2,-630 # 800267d0 <__func__.2+0x3f68>
    80010a4e:	00012517          	auipc	a0,0x12
    80010a52:	11a50513          	addi	a0,a0,282 # 80022b68 <__func__.2+0x300>
    80010a56:	21a100ef          	jal	80020c70 <printf>
    80010a5a:	00034797          	auipc	a5,0x34
    80010a5e:	5b77c783          	lbu	a5,1463(a5) # 80045011 <excpt+0x1>
    80010a62:	00012597          	auipc	a1,0x12
    80010a66:	0de58593          	addi	a1,a1,222 # 80022b40 <__func__.2+0x2d8>
    80010a6a:	c799                	beqz	a5,80010a78 <software_interrupt_msi+0x650>
    80010a6c:	57fd                	li	a5,-1
    80010a6e:	6498                	ld	a4,8(s1)
    80010a70:	17fe                	slli	a5,a5,0x3f
    80010a72:	0789                	addi	a5,a5,2
    80010a74:	08f703e3          	beq	a4,a5,800112fa <software_interrupt_msi+0xed2>
    80010a78:	00012517          	auipc	a0,0x12
    80010a7c:	10850513          	addi	a0,a0,264 # 80022b80 <__func__.2+0x318>
    80010a80:	1f0100ef          	jal	80020c70 <printf>
    80010a84:	00034797          	auipc	a5,0x34
    80010a88:	58d7c783          	lbu	a5,1421(a5) # 80045011 <excpt+0x1>
    80010a8c:	c799                	beqz	a5,80010a9a <software_interrupt_msi+0x672>
    80010a8e:	57fd                	li	a5,-1
    80010a90:	6498                	ld	a4,8(s1)
    80010a92:	17fe                	slli	a5,a5,0x3f
    80010a94:	0789                	addi	a5,a5,2
    80010a96:	72f70163          	beq	a4,a5,800111b8 <software_interrupt_msi+0xd90>
    80010a9a:	00012517          	auipc	a0,0x12
    80010a9e:	0ee50513          	addi	a0,a0,238 # 80022b88 <__func__.2+0x320>
    80010aa2:	1ce100ef          	jal	80020c70 <printf>
    80010aa6:	02900513          	li	a0,41
    80010aaa:	0570f0ef          	jal	80020300 <putchar>
    80010aae:	4529                	li	a0,10
    80010ab0:	0510f0ef          	jal	80020300 <putchar>
    80010ab4:	c801                	beqz	s0,80010ac4 <software_interrupt_msi+0x69c>
    80010ab6:	00034797          	auipc	a5,0x34
    80010aba:	55b7c783          	lbu	a5,1371(a5) # 80045011 <excpt+0x1>
    80010abe:	4401                	li	s0,0
    80010ac0:	60079d63          	bnez	a5,800110da <software_interrupt_msi+0xcb2>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010ac4:	0330000f          	fence	rw,rw
    80010ac8:	4785                	li	a5,1
    80010aca:	00034717          	auipc	a4,0x34
    80010ace:	56073f23          	sd	zero,1406(a4) # 80045048 <excpt+0x38>
    80010ad2:	00f49023          	sh	a5,0(s1)
    80010ad6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010ada:	4511                	li	a0,4
    80010adc:	ffdef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010ae0:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010ae4:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010ae8:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80010aec:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80010af0:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80010af4:	450d                	li	a0,3
    80010af6:	fe3ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80010afa:	08200593          	li	a1,130
    80010afe:	00016617          	auipc	a2,0x16
    80010b02:	d4260613          	addi	a2,a2,-702 # 80026840 <__func__.2+0x3fd8>
    80010b06:	00012517          	auipc	a0,0x12
    80010b0a:	06250513          	addi	a0,a0,98 # 80022b68 <__func__.2+0x300>
    80010b0e:	162100ef          	jal	80020c70 <printf>
    80010b12:	00034797          	auipc	a5,0x34
    80010b16:	4ff7c783          	lbu	a5,1279(a5) # 80045011 <excpt+0x1>
    80010b1a:	00012597          	auipc	a1,0x12
    80010b1e:	02658593          	addi	a1,a1,38 # 80022b40 <__func__.2+0x2d8>
    80010b22:	c799                	beqz	a5,80010b30 <software_interrupt_msi+0x708>
    80010b24:	57fd                	li	a5,-1
    80010b26:	6498                	ld	a4,8(s1)
    80010b28:	17fe                	slli	a5,a5,0x3f
    80010b2a:	0789                	addi	a5,a5,2
    80010b2c:	76f70363          	beq	a4,a5,80011292 <software_interrupt_msi+0xe6a>
    80010b30:	00012517          	auipc	a0,0x12
    80010b34:	05050513          	addi	a0,a0,80 # 80022b80 <__func__.2+0x318>
    80010b38:	138100ef          	jal	80020c70 <printf>
    80010b3c:	00034797          	auipc	a5,0x34
    80010b40:	4d57c783          	lbu	a5,1237(a5) # 80045011 <excpt+0x1>
    80010b44:	c799                	beqz	a5,80010b52 <software_interrupt_msi+0x72a>
    80010b46:	57fd                	li	a5,-1
    80010b48:	6498                	ld	a4,8(s1)
    80010b4a:	17fe                	slli	a5,a5,0x3f
    80010b4c:	0789                	addi	a5,a5,2
    80010b4e:	66f70d63          	beq	a4,a5,800111c8 <software_interrupt_msi+0xda0>
    80010b52:	00012517          	auipc	a0,0x12
    80010b56:	03650513          	addi	a0,a0,54 # 80022b88 <__func__.2+0x320>
    80010b5a:	116100ef          	jal	80020c70 <printf>
    80010b5e:	02900513          	li	a0,41
    80010b62:	79e0f0ef          	jal	80020300 <putchar>
    80010b66:	4529                	li	a0,10
    80010b68:	7980f0ef          	jal	80020300 <putchar>
    80010b6c:	c801                	beqz	s0,80010b7c <software_interrupt_msi+0x754>
    80010b6e:	00034797          	auipc	a5,0x34
    80010b72:	4a37c783          	lbu	a5,1187(a5) # 80045011 <excpt+0x1>
    80010b76:	4401                	li	s0,0
    80010b78:	54079363          	bnez	a5,800110be <software_interrupt_msi+0xc96>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80010b7c:	0330000f          	fence	rw,rw
    80010b80:	4785                	li	a5,1
    80010b82:	00034717          	auipc	a4,0x34
    80010b86:	4c073323          	sd	zero,1222(a4) # 80045048 <excpt+0x38>
    80010b8a:	00f49023          	sh	a5,0(s1)
    80010b8e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010b92:	4511                	li	a0,4
    80010b94:	f45ef0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80010b98:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80010b9c:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010ba0:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80010ba4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010ba8:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80010bac:	450d                	li	a0,3
    80010bae:	f2bef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80010bb2:	08200593          	li	a1,130
    80010bb6:	00016617          	auipc	a2,0x16
    80010bba:	cfa60613          	addi	a2,a2,-774 # 800268b0 <__func__.2+0x4048>
    80010bbe:	00012517          	auipc	a0,0x12
    80010bc2:	faa50513          	addi	a0,a0,-86 # 80022b68 <__func__.2+0x300>
    80010bc6:	0aa100ef          	jal	80020c70 <printf>
    80010bca:	00034797          	auipc	a5,0x34
    80010bce:	4477c783          	lbu	a5,1095(a5) # 80045011 <excpt+0x1>
    80010bd2:	00012597          	auipc	a1,0x12
    80010bd6:	f6e58593          	addi	a1,a1,-146 # 80022b40 <__func__.2+0x2d8>
    80010bda:	e789                	bnez	a5,80010be4 <software_interrupt_msi+0x7bc>
    80010bdc:	00012597          	auipc	a1,0x12
    80010be0:	f5458593          	addi	a1,a1,-172 # 80022b30 <__func__.2+0x2c8>
    80010be4:	00012517          	auipc	a0,0x12
    80010be8:	f9c50513          	addi	a0,a0,-100 # 80022b80 <__func__.2+0x318>
    80010bec:	084100ef          	jal	80020c70 <printf>
    80010bf0:	00034797          	auipc	a5,0x34
    80010bf4:	4217c783          	lbu	a5,1057(a5) # 80045011 <excpt+0x1>
    80010bf8:	62079e63          	bnez	a5,80011234 <software_interrupt_msi+0xe0c>
    80010bfc:	4529                	li	a0,10
    80010bfe:	7020f0ef          	jal	80020300 <putchar>
    80010c02:	c419                	beqz	s0,80010c10 <software_interrupt_msi+0x7e8>
    80010c04:	00034417          	auipc	s0,0x34
    80010c08:	40d44403          	lbu	s0,1037(s0) # 80045011 <excpt+0x1>
    80010c0c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    80010c10:	0330000f          	fence	rw,rw
    80010c14:	4785                	li	a5,1
    80010c16:	00034717          	auipc	a4,0x34
    80010c1a:	42073923          	sd	zero,1074(a4) # 80045048 <excpt+0x38>
    80010c1e:	00f49023          	sh	a5,0(s1)
    80010c22:	0330000f          	fence	rw,rw
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80010c26:	4511                	li	a0,4
    80010c28:	eb1ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80010c2c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010c30:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010c34:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80010c38:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010c3c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010c40:	4509                	li	a0,2
    80010c42:	e97ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80010c46:	08200593          	li	a1,130
    80010c4a:	00016617          	auipc	a2,0x16
    80010c4e:	cc660613          	addi	a2,a2,-826 # 80026910 <__func__.2+0x40a8>
    80010c52:	00012517          	auipc	a0,0x12
    80010c56:	f1650513          	addi	a0,a0,-234 # 80022b68 <__func__.2+0x300>
    80010c5a:	016100ef          	jal	80020c70 <printf>
    80010c5e:	00034797          	auipc	a5,0x34
    80010c62:	3b37c783          	lbu	a5,947(a5) # 80045011 <excpt+0x1>
    80010c66:	00012597          	auipc	a1,0x12
    80010c6a:	eda58593          	addi	a1,a1,-294 # 80022b40 <__func__.2+0x2d8>
    80010c6e:	c799                	beqz	a5,80010c7c <software_interrupt_msi+0x854>
    80010c70:	57fd                	li	a5,-1
    80010c72:	6498                	ld	a4,8(s1)
    80010c74:	17fe                	slli	a5,a5,0x3f
    80010c76:	0789                	addi	a5,a5,2
    80010c78:	6af70263          	beq	a4,a5,8001131c <software_interrupt_msi+0xef4>
    80010c7c:	00012517          	auipc	a0,0x12
    80010c80:	f0450513          	addi	a0,a0,-252 # 80022b80 <__func__.2+0x318>
    80010c84:	7ed0f0ef          	jal	80020c70 <printf>
    80010c88:	00034797          	auipc	a5,0x34
    80010c8c:	3897c783          	lbu	a5,905(a5) # 80045011 <excpt+0x1>
    80010c90:	c799                	beqz	a5,80010c9e <software_interrupt_msi+0x876>
    80010c92:	57fd                	li	a5,-1
    80010c94:	6498                	ld	a4,8(s1)
    80010c96:	17fe                	slli	a5,a5,0x3f
    80010c98:	0789                	addi	a5,a5,2
    80010c9a:	50f70763          	beq	a4,a5,800111a8 <software_interrupt_msi+0xd80>
    80010c9e:	00012517          	auipc	a0,0x12
    80010ca2:	eea50513          	addi	a0,a0,-278 # 80022b88 <__func__.2+0x320>
    80010ca6:	7cb0f0ef          	jal	80020c70 <printf>
    80010caa:	02900513          	li	a0,41
    80010cae:	6520f0ef          	jal	80020300 <putchar>
    80010cb2:	4529                	li	a0,10
    80010cb4:	64c0f0ef          	jal	80020300 <putchar>
    80010cb8:	c801                	beqz	s0,80010cc8 <software_interrupt_msi+0x8a0>
    80010cba:	00034797          	auipc	a5,0x34
    80010cbe:	3577c783          	lbu	a5,855(a5) # 80045011 <excpt+0x1>
    80010cc2:	4401                	li	s0,0
    80010cc4:	3c079f63          	bnez	a5,800110a2 <software_interrupt_msi+0xc7a>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80010cc8:	0330000f          	fence	rw,rw
    80010ccc:	4785                	li	a5,1
    80010cce:	00034717          	auipc	a4,0x34
    80010cd2:	36073d23          	sd	zero,890(a4) # 80045048 <excpt+0x38>
    80010cd6:	00f49023          	sh	a5,0(s1)
    80010cda:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010cde:	4511                	li	a0,4
    80010ce0:	df9ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010ce4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010ce8:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010cec:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80010cf0:	57fd                	li	a5,-1
    80010cf2:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80010cf6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010cfa:	4509                	li	a0,2
    80010cfc:	dddef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80010d00:	08200593          	li	a1,130
    80010d04:	00016617          	auipc	a2,0x16
    80010d08:	c6c60613          	addi	a2,a2,-916 # 80026970 <__func__.2+0x4108>
    80010d0c:	00012517          	auipc	a0,0x12
    80010d10:	e5c50513          	addi	a0,a0,-420 # 80022b68 <__func__.2+0x300>
    80010d14:	75d0f0ef          	jal	80020c70 <printf>
    80010d18:	00034797          	auipc	a5,0x34
    80010d1c:	2f97c783          	lbu	a5,761(a5) # 80045011 <excpt+0x1>
    80010d20:	00012597          	auipc	a1,0x12
    80010d24:	e2058593          	addi	a1,a1,-480 # 80022b40 <__func__.2+0x2d8>
    80010d28:	c799                	beqz	a5,80010d36 <software_interrupt_msi+0x90e>
    80010d2a:	57fd                	li	a5,-1
    80010d2c:	6498                	ld	a4,8(s1)
    80010d2e:	17fe                	slli	a5,a5,0x3f
    80010d30:	0789                	addi	a5,a5,2
    80010d32:	66f70763          	beq	a4,a5,800113a0 <software_interrupt_msi+0xf78>
    80010d36:	00012517          	auipc	a0,0x12
    80010d3a:	e4a50513          	addi	a0,a0,-438 # 80022b80 <__func__.2+0x318>
    80010d3e:	7330f0ef          	jal	80020c70 <printf>
    80010d42:	00034797          	auipc	a5,0x34
    80010d46:	2cf7c783          	lbu	a5,719(a5) # 80045011 <excpt+0x1>
    80010d4a:	c799                	beqz	a5,80010d58 <software_interrupt_msi+0x930>
    80010d4c:	57fd                	li	a5,-1
    80010d4e:	6498                	ld	a4,8(s1)
    80010d50:	17fe                	slli	a5,a5,0x3f
    80010d52:	0789                	addi	a5,a5,2
    80010d54:	40f70863          	beq	a4,a5,80011164 <software_interrupt_msi+0xd3c>
    80010d58:	00012517          	auipc	a0,0x12
    80010d5c:	e3050513          	addi	a0,a0,-464 # 80022b88 <__func__.2+0x320>
    80010d60:	7110f0ef          	jal	80020c70 <printf>
    80010d64:	02900513          	li	a0,41
    80010d68:	5980f0ef          	jal	80020300 <putchar>
    80010d6c:	4529                	li	a0,10
    80010d6e:	5920f0ef          	jal	80020300 <putchar>
    80010d72:	c801                	beqz	s0,80010d82 <software_interrupt_msi+0x95a>
    80010d74:	00034797          	auipc	a5,0x34
    80010d78:	29d7c783          	lbu	a5,669(a5) # 80045011 <excpt+0x1>
    80010d7c:	4401                	li	s0,0
    80010d7e:	30079463          	bnez	a5,80011086 <software_interrupt_msi+0xc5e>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80010d82:	0330000f          	fence	rw,rw
    80010d86:	4785                	li	a5,1
    80010d88:	00034717          	auipc	a4,0x34
    80010d8c:	2c073023          	sd	zero,704(a4) # 80045048 <excpt+0x38>
    80010d90:	00f49023          	sh	a5,0(s1)
    80010d94:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010d98:	4511                	li	a0,4
    80010d9a:	d3fef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010d9e:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80010da2:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010da6:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80010daa:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010dae:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010db2:	4509                	li	a0,2
    80010db4:	d25ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80010db8:	08200593          	li	a1,130
    80010dbc:	00016617          	auipc	a2,0x16
    80010dc0:	c2460613          	addi	a2,a2,-988 # 800269e0 <__func__.2+0x4178>
    80010dc4:	00012517          	auipc	a0,0x12
    80010dc8:	da450513          	addi	a0,a0,-604 # 80022b68 <__func__.2+0x300>
    80010dcc:	6a50f0ef          	jal	80020c70 <printf>
    80010dd0:	00034797          	auipc	a5,0x34
    80010dd4:	2417c783          	lbu	a5,577(a5) # 80045011 <excpt+0x1>
    80010dd8:	00012597          	auipc	a1,0x12
    80010ddc:	d6858593          	addi	a1,a1,-664 # 80022b40 <__func__.2+0x2d8>
    80010de0:	e789                	bnez	a5,80010dea <software_interrupt_msi+0x9c2>
    80010de2:	00012597          	auipc	a1,0x12
    80010de6:	d4e58593          	addi	a1,a1,-690 # 80022b30 <__func__.2+0x2c8>
    80010dea:	00012517          	auipc	a0,0x12
    80010dee:	d9650513          	addi	a0,a0,-618 # 80022b80 <__func__.2+0x318>
    80010df2:	67f0f0ef          	jal	80020c70 <printf>
    80010df6:	00034797          	auipc	a5,0x34
    80010dfa:	21b7c783          	lbu	a5,539(a5) # 80045011 <excpt+0x1>
    80010dfe:	3e079963          	bnez	a5,800111f0 <software_interrupt_msi+0xdc8>
    80010e02:	4529                	li	a0,10
    80010e04:	4fc0f0ef          	jal	80020300 <putchar>
    80010e08:	c419                	beqz	s0,80010e16 <software_interrupt_msi+0x9ee>
    80010e0a:	00034417          	auipc	s0,0x34
    80010e0e:	20744403          	lbu	s0,519(s0) # 80045011 <excpt+0x1>
    80010e12:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010e16:	0330000f          	fence	rw,rw
    80010e1a:	4785                	li	a5,1
    80010e1c:	00034717          	auipc	a4,0x34
    80010e20:	22073623          	sd	zero,556(a4) # 80045048 <excpt+0x38>
    80010e24:	00f49023          	sh	a5,0(s1)
    80010e28:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010e2c:	4511                	li	a0,4
    80010e2e:	cabef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010e32:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010e36:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010e3a:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80010e3e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010e42:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010e46:	4509                	li	a0,2
    80010e48:	c91ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80010e4c:	08200593          	li	a1,130
    80010e50:	00016617          	auipc	a2,0x16
    80010e54:	bf860613          	addi	a2,a2,-1032 # 80026a48 <__func__.2+0x41e0>
    80010e58:	00012517          	auipc	a0,0x12
    80010e5c:	d1050513          	addi	a0,a0,-752 # 80022b68 <__func__.2+0x300>
    80010e60:	6110f0ef          	jal	80020c70 <printf>
    80010e64:	00034797          	auipc	a5,0x34
    80010e68:	1ad7c783          	lbu	a5,429(a5) # 80045011 <excpt+0x1>
    80010e6c:	00012597          	auipc	a1,0x12
    80010e70:	cd458593          	addi	a1,a1,-812 # 80022b40 <__func__.2+0x2d8>
    80010e74:	c799                	beqz	a5,80010e82 <software_interrupt_msi+0xa5a>
    80010e76:	57fd                	li	a5,-1
    80010e78:	6498                	ld	a4,8(s1)
    80010e7a:	17fe                	slli	a5,a5,0x3f
    80010e7c:	0789                	addi	a5,a5,2
    80010e7e:	42f70b63          	beq	a4,a5,800112b4 <software_interrupt_msi+0xe8c>
    80010e82:	00012517          	auipc	a0,0x12
    80010e86:	cfe50513          	addi	a0,a0,-770 # 80022b80 <__func__.2+0x318>
    80010e8a:	5e70f0ef          	jal	80020c70 <printf>
    80010e8e:	00034797          	auipc	a5,0x34
    80010e92:	1837c783          	lbu	a5,387(a5) # 80045011 <excpt+0x1>
    80010e96:	c799                	beqz	a5,80010ea4 <software_interrupt_msi+0xa7c>
    80010e98:	57fd                	li	a5,-1
    80010e9a:	6498                	ld	a4,8(s1)
    80010e9c:	17fe                	slli	a5,a5,0x3f
    80010e9e:	0789                	addi	a5,a5,2
    80010ea0:	2af70163          	beq	a4,a5,80011142 <software_interrupt_msi+0xd1a>
    80010ea4:	00012517          	auipc	a0,0x12
    80010ea8:	ce450513          	addi	a0,a0,-796 # 80022b88 <__func__.2+0x320>
    80010eac:	5c50f0ef          	jal	80020c70 <printf>
    80010eb0:	02900513          	li	a0,41
    80010eb4:	44c0f0ef          	jal	80020300 <putchar>
    80010eb8:	4529                	li	a0,10
    80010eba:	4460f0ef          	jal	80020300 <putchar>
    80010ebe:	c801                	beqz	s0,80010ece <software_interrupt_msi+0xaa6>
    80010ec0:	00034797          	auipc	a5,0x34
    80010ec4:	1517c783          	lbu	a5,337(a5) # 80045011 <excpt+0x1>
    80010ec8:	4401                	li	s0,0
    80010eca:	1a079063          	bnez	a5,8001106a <software_interrupt_msi+0xc42>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010ece:	0330000f          	fence	rw,rw
    80010ed2:	4785                	li	a5,1
    80010ed4:	00034717          	auipc	a4,0x34
    80010ed8:	16073a23          	sd	zero,372(a4) # 80045048 <excpt+0x38>
    80010edc:	00f49023          	sh	a5,0(s1)
    80010ee0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010ee4:	4511                	li	a0,4
    80010ee6:	bf3ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010eea:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010eee:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010ef2:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80010ef6:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80010efa:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010efe:	4509                	li	a0,2
    80010f00:	bd9ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80010f04:	08200593          	li	a1,130
    80010f08:	00016617          	auipc	a2,0x16
    80010f0c:	bb060613          	addi	a2,a2,-1104 # 80026ab8 <__func__.2+0x4250>
    80010f10:	00012517          	auipc	a0,0x12
    80010f14:	c5850513          	addi	a0,a0,-936 # 80022b68 <__func__.2+0x300>
    80010f18:	5590f0ef          	jal	80020c70 <printf>
    80010f1c:	00034797          	auipc	a5,0x34
    80010f20:	0f57c783          	lbu	a5,245(a5) # 80045011 <excpt+0x1>
    80010f24:	00012597          	auipc	a1,0x12
    80010f28:	c1c58593          	addi	a1,a1,-996 # 80022b40 <__func__.2+0x2d8>
    80010f2c:	c799                	beqz	a5,80010f3a <software_interrupt_msi+0xb12>
    80010f2e:	57fd                	li	a5,-1
    80010f30:	6498                	ld	a4,8(s1)
    80010f32:	17fe                	slli	a5,a5,0x3f
    80010f34:	0789                	addi	a5,a5,2
    80010f36:	44f70563          	beq	a4,a5,80011380 <software_interrupt_msi+0xf58>
    80010f3a:	00012517          	auipc	a0,0x12
    80010f3e:	c4650513          	addi	a0,a0,-954 # 80022b80 <__func__.2+0x318>
    80010f42:	52f0f0ef          	jal	80020c70 <printf>
    80010f46:	00034797          	auipc	a5,0x34
    80010f4a:	0cb7c783          	lbu	a5,203(a5) # 80045011 <excpt+0x1>
    80010f4e:	c799                	beqz	a5,80010f5c <software_interrupt_msi+0xb34>
    80010f50:	57fd                	li	a5,-1
    80010f52:	6498                	ld	a4,8(s1)
    80010f54:	17fe                	slli	a5,a5,0x3f
    80010f56:	0789                	addi	a5,a5,2
    80010f58:	20f70e63          	beq	a4,a5,80011174 <software_interrupt_msi+0xd4c>
    80010f5c:	00012517          	auipc	a0,0x12
    80010f60:	c2c50513          	addi	a0,a0,-980 # 80022b88 <__func__.2+0x320>
    80010f64:	50d0f0ef          	jal	80020c70 <printf>
    80010f68:	02900513          	li	a0,41
    80010f6c:	3940f0ef          	jal	80020300 <putchar>
    80010f70:	4529                	li	a0,10
    80010f72:	38e0f0ef          	jal	80020300 <putchar>
    80010f76:	c419                	beqz	s0,80010f84 <software_interrupt_msi+0xb5c>
    80010f78:	00034797          	auipc	a5,0x34
    80010f7c:	0997c783          	lbu	a5,153(a5) # 80045011 <excpt+0x1>
    80010f80:	4401                	li	s0,0
    80010f82:	e7f1                	bnez	a5,8001104e <software_interrupt_msi+0xc26>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80010f84:	0330000f          	fence	rw,rw
    80010f88:	4785                	li	a5,1
    80010f8a:	00034717          	auipc	a4,0x34
    80010f8e:	0a073f23          	sd	zero,190(a4) # 80045048 <excpt+0x38>
    80010f92:	00f49023          	sh	a5,0(s1)
    80010f96:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80010f9a:	4511                	li	a0,4
    80010f9c:	b3def0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80010fa0:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80010fa4:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010fa8:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80010fac:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010fb0:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80010fb4:	4509                	li	a0,2
    80010fb6:	b23ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80010fba:	08200593          	li	a1,130
    80010fbe:	00016617          	auipc	a2,0x16
    80010fc2:	b6a60613          	addi	a2,a2,-1174 # 80026b28 <__func__.2+0x42c0>
    80010fc6:	00012517          	auipc	a0,0x12
    80010fca:	ba250513          	addi	a0,a0,-1118 # 80022b68 <__func__.2+0x300>
    80010fce:	4a30f0ef          	jal	80020c70 <printf>
    80010fd2:	00034797          	auipc	a5,0x34
    80010fd6:	03f7c783          	lbu	a5,63(a5) # 80045011 <excpt+0x1>
    80010fda:	00012597          	auipc	a1,0x12
    80010fde:	b6658593          	addi	a1,a1,-1178 # 80022b40 <__func__.2+0x2d8>
    80010fe2:	e789                	bnez	a5,80010fec <software_interrupt_msi+0xbc4>
    80010fe4:	00012597          	auipc	a1,0x12
    80010fe8:	b4c58593          	addi	a1,a1,-1204 # 80022b30 <__func__.2+0x2c8>
    80010fec:	00012517          	auipc	a0,0x12
    80010ff0:	b9450513          	addi	a0,a0,-1132 # 80022b80 <__func__.2+0x318>
    80010ff4:	47d0f0ef          	jal	80020c70 <printf>
    80010ff8:	00034797          	auipc	a5,0x34
    80010ffc:	0197c783          	lbu	a5,25(a5) # 80045011 <excpt+0x1>
    80011000:	20079f63          	bnez	a5,8001121e <software_interrupt_msi+0xdf6>
    80011004:	4529                	li	a0,10
    80011006:	2fa0f0ef          	jal	80020300 <putchar>
    8001100a:	c411                	beqz	s0,80011016 <software_interrupt_msi+0xbee>
    8001100c:	00034797          	auipc	a5,0x34
    80011010:	0057c783          	lbu	a5,5(a5) # 80045011 <excpt+0x1>
    80011014:	c79d                	beqz	a5,80011042 <software_interrupt_msi+0xc1a>
    80011016:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80011018:	00012597          	auipc	a1,0x12
    8001101c:	b2858593          	addi	a1,a1,-1240 # 80022b40 <__func__.2+0x2d8>
    80011020:	00012517          	auipc	a0,0x12
    80011024:	bc850513          	addi	a0,a0,-1080 # 80022be8 <__func__.2+0x380>
    80011028:	4490f0ef          	jal	80020c70 <printf>
    8001102c:	4511                	li	a0,4
    8001102e:	aabef0ef          	jal	80000ad8 <goto_priv>
    80011032:	b76f00ef          	jal	800013a8 <reset_state>
}
    80011036:	60e2                	ld	ra,24(sp)
    80011038:	8522                	mv	a0,s0
    8001103a:	6442                	ld	s0,16(sp)
    8001103c:	64a2                	ld	s1,8(sp)
    8001103e:	6105                	addi	sp,sp,32
    80011040:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80011042:	4405                	li	s0,1
    TEST_END();
    80011044:	00012597          	auipc	a1,0x12
    80011048:	aec58593          	addi	a1,a1,-1300 # 80022b30 <__func__.2+0x2c8>
    8001104c:	bfd1                	j	80011020 <software_interrupt_msi+0xbf8>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8001104e:	57fd                	li	a5,-1
    80011050:	6498                	ld	a4,8(s1)
    80011052:	17fe                	slli	a5,a5,0x3f
    80011054:	0789                	addi	a5,a5,2
    80011056:	f2f717e3          	bne	a4,a5,80010f84 <software_interrupt_msi+0xb5c>
    8001105a:	00034417          	auipc	s0,0x34
    8001105e:	fba42403          	lw	s0,-70(s0) # 80045014 <excpt+0x4>
    80011062:	1475                	addi	s0,s0,-3
    80011064:	00143413          	seqz	s0,s0
    80011068:	bf31                	j	80010f84 <software_interrupt_msi+0xb5c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8001106a:	57fd                	li	a5,-1
    8001106c:	6498                	ld	a4,8(s1)
    8001106e:	17fe                	slli	a5,a5,0x3f
    80011070:	0789                	addi	a5,a5,2
    80011072:	e4f71ee3          	bne	a4,a5,80010ece <software_interrupt_msi+0xaa6>
    80011076:	00034417          	auipc	s0,0x34
    8001107a:	f9e42403          	lw	s0,-98(s0) # 80045014 <excpt+0x4>
    8001107e:	1471                	addi	s0,s0,-4
    80011080:	00143413          	seqz	s0,s0
    80011084:	b5a9                	j	80010ece <software_interrupt_msi+0xaa6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80011086:	57fd                	li	a5,-1
    80011088:	6498                	ld	a4,8(s1)
    8001108a:	17fe                	slli	a5,a5,0x3f
    8001108c:	0789                	addi	a5,a5,2
    8001108e:	cef71ae3          	bne	a4,a5,80010d82 <software_interrupt_msi+0x95a>
    80011092:	00034417          	auipc	s0,0x34
    80011096:	f8242403          	lw	s0,-126(s0) # 80045014 <excpt+0x4>
    8001109a:	1475                	addi	s0,s0,-3
    8001109c:	00143413          	seqz	s0,s0
    800110a0:	b1cd                	j	80010d82 <software_interrupt_msi+0x95a>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800110a2:	57fd                	li	a5,-1
    800110a4:	6498                	ld	a4,8(s1)
    800110a6:	17fe                	slli	a5,a5,0x3f
    800110a8:	0789                	addi	a5,a5,2
    800110aa:	c0f71fe3          	bne	a4,a5,80010cc8 <software_interrupt_msi+0x8a0>
    800110ae:	00034417          	auipc	s0,0x34
    800110b2:	f6642403          	lw	s0,-154(s0) # 80045014 <excpt+0x4>
    800110b6:	1471                	addi	s0,s0,-4
    800110b8:	00143413          	seqz	s0,s0
    800110bc:	b131                	j	80010cc8 <software_interrupt_msi+0x8a0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800110be:	57fd                	li	a5,-1
    800110c0:	6498                	ld	a4,8(s1)
    800110c2:	17fe                	slli	a5,a5,0x3f
    800110c4:	0789                	addi	a5,a5,2
    800110c6:	aaf71be3          	bne	a4,a5,80010b7c <software_interrupt_msi+0x754>
    800110ca:	00034417          	auipc	s0,0x34
    800110ce:	f4a42403          	lw	s0,-182(s0) # 80045014 <excpt+0x4>
    800110d2:	1475                	addi	s0,s0,-3
    800110d4:	00143413          	seqz	s0,s0
    800110d8:	b455                	j	80010b7c <software_interrupt_msi+0x754>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800110da:	57fd                	li	a5,-1
    800110dc:	6498                	ld	a4,8(s1)
    800110de:	17fe                	slli	a5,a5,0x3f
    800110e0:	0789                	addi	a5,a5,2
    800110e2:	9ef711e3          	bne	a4,a5,80010ac4 <software_interrupt_msi+0x69c>
    800110e6:	00034417          	auipc	s0,0x34
    800110ea:	f2e42403          	lw	s0,-210(s0) # 80045014 <excpt+0x4>
    800110ee:	1471                	addi	s0,s0,-4
    800110f0:	00143413          	seqz	s0,s0
    800110f4:	bac1                	j	80010ac4 <software_interrupt_msi+0x69c>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800110f6:	57fd                	li	a5,-1
    800110f8:	6498                	ld	a4,8(s1)
    800110fa:	17fe                	slli	a5,a5,0x3f
    800110fc:	0789                	addi	a5,a5,2
    800110fe:	86f71de3          	bne	a4,a5,80010978 <software_interrupt_msi+0x550>
    80011102:	00034417          	auipc	s0,0x34
    80011106:	f1242403          	lw	s0,-238(s0) # 80045014 <excpt+0x4>
    8001110a:	1475                	addi	s0,s0,-3
    8001110c:	00143413          	seqz	s0,s0
    80011110:	869ff06f          	j	80010978 <software_interrupt_msi+0x550>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80011114:	57fd                	li	a5,-1
    80011116:	6498                	ld	a4,8(s1)
    80011118:	17fe                	slli	a5,a5,0x3f
    8001111a:	0789                	addi	a5,a5,2
    8001111c:	faf71163          	bne	a4,a5,800108be <software_interrupt_msi+0x496>
    80011120:	00034417          	auipc	s0,0x34
    80011124:	ef442403          	lw	s0,-268(s0) # 80045014 <excpt+0x4>
    80011128:	1471                	addi	s0,s0,-4
    8001112a:	00143413          	seqz	s0,s0
    8001112e:	f90ff06f          	j	800108be <software_interrupt_msi+0x496>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80011132:	6480                	ld	s0,8(s1)
    80011134:	57f5                	li	a5,-3
    80011136:	8385                	srli	a5,a5,0x1
    80011138:	943e                	add	s0,s0,a5
    8001113a:	00143413          	seqz	s0,s0
    8001113e:	d24ff06f          	j	80010662 <software_interrupt_msi+0x23a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80011142:	00034717          	auipc	a4,0x34
    80011146:	ed272703          	lw	a4,-302(a4) # 80045014 <excpt+0x4>
    8001114a:	4791                	li	a5,4
    8001114c:	d4f71ce3          	bne	a4,a5,80010ea4 <software_interrupt_msi+0xa7c>
    80011150:	b3a5                	j	80010eb8 <software_interrupt_msi+0xa90>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80011152:	00034717          	auipc	a4,0x34
    80011156:	ec272703          	lw	a4,-318(a4) # 80045014 <excpt+0x4>
    8001115a:	4791                	li	a5,4
    8001115c:	b8f71263          	bne	a4,a5,800104e0 <software_interrupt_msi+0xb8>
    80011160:	b94ff06f          	j	800104f4 <software_interrupt_msi+0xcc>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80011164:	00034717          	auipc	a4,0x34
    80011168:	eb072703          	lw	a4,-336(a4) # 80045014 <excpt+0x4>
    8001116c:	478d                	li	a5,3
    8001116e:	bef715e3          	bne	a4,a5,80010d58 <software_interrupt_msi+0x930>
    80011172:	beed                	j	80010d6c <software_interrupt_msi+0x944>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80011174:	00034717          	auipc	a4,0x34
    80011178:	ea072703          	lw	a4,-352(a4) # 80045014 <excpt+0x4>
    8001117c:	478d                	li	a5,3
    8001117e:	dcf71fe3          	bne	a4,a5,80010f5c <software_interrupt_msi+0xb34>
    80011182:	b3fd                	j	80010f70 <software_interrupt_msi+0xb48>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80011184:	00034717          	auipc	a4,0x34
    80011188:	e9072703          	lw	a4,-368(a4) # 80045014 <excpt+0x4>
    8001118c:	478d                	li	a5,3
    8001118e:	fcf71063          	bne	a4,a5,8001094e <software_interrupt_msi+0x526>
    80011192:	fd0ff06f          	j	80010962 <software_interrupt_msi+0x53a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80011196:	00034717          	auipc	a4,0x34
    8001119a:	e7e72703          	lw	a4,-386(a4) # 80045014 <excpt+0x4>
    8001119e:	4791                	li	a5,4
    800111a0:	eef71a63          	bne	a4,a5,80010894 <software_interrupt_msi+0x46c>
    800111a4:	f04ff06f          	j	800108a8 <software_interrupt_msi+0x480>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800111a8:	00034717          	auipc	a4,0x34
    800111ac:	e6c72703          	lw	a4,-404(a4) # 80045014 <excpt+0x4>
    800111b0:	4791                	li	a5,4
    800111b2:	aef716e3          	bne	a4,a5,80010c9e <software_interrupt_msi+0x876>
    800111b6:	bcf5                	j	80010cb2 <software_interrupt_msi+0x88a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800111b8:	00034717          	auipc	a4,0x34
    800111bc:	e5c72703          	lw	a4,-420(a4) # 80045014 <excpt+0x4>
    800111c0:	4791                	li	a5,4
    800111c2:	8cf71ce3          	bne	a4,a5,80010a9a <software_interrupt_msi+0x672>
    800111c6:	b0e5                	j	80010aae <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800111c8:	00034717          	auipc	a4,0x34
    800111cc:	e4c72703          	lw	a4,-436(a4) # 80045014 <excpt+0x4>
    800111d0:	478d                	li	a5,3
    800111d2:	98f710e3          	bne	a4,a5,80010b52 <software_interrupt_msi+0x72a>
    800111d6:	ba41                	j	80010b66 <software_interrupt_msi+0x73e>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    800111d8:	00012517          	auipc	a0,0x12
    800111dc:	9b050513          	addi	a0,a0,-1616 # 80022b88 <__func__.2+0x320>
    800111e0:	2910f0ef          	jal	80020c70 <printf>
    800111e4:	02900513          	li	a0,41
    800111e8:	1180f0ef          	jal	80020300 <putchar>
    800111ec:	ba2ff06f          	j	8001058e <software_interrupt_msi+0x166>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800111f0:	00012517          	auipc	a0,0x12
    800111f4:	99850513          	addi	a0,a0,-1640 # 80022b88 <__func__.2+0x320>
    800111f8:	2790f0ef          	jal	80020c70 <printf>
    800111fc:	02900513          	li	a0,41
    80011200:	1000f0ef          	jal	80020300 <putchar>
    80011204:	befd                	j	80010e02 <software_interrupt_msi+0x9da>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80011206:	00012517          	auipc	a0,0x12
    8001120a:	98250513          	addi	a0,a0,-1662 # 80022b88 <__func__.2+0x320>
    8001120e:	2630f0ef          	jal	80020c70 <printf>
    80011212:	02900513          	li	a0,41
    80011216:	0ea0f0ef          	jal	80020300 <putchar>
    8001121a:	cc0ff06f          	j	800106da <software_interrupt_msi+0x2b2>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8001121e:	00012517          	auipc	a0,0x12
    80011222:	96a50513          	addi	a0,a0,-1686 # 80022b88 <__func__.2+0x320>
    80011226:	24b0f0ef          	jal	80020c70 <printf>
    8001122a:	02900513          	li	a0,41
    8001122e:	0d20f0ef          	jal	80020300 <putchar>
    80011232:	bbc9                	j	80011004 <software_interrupt_msi+0xbdc>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80011234:	00012517          	auipc	a0,0x12
    80011238:	95450513          	addi	a0,a0,-1708 # 80022b88 <__func__.2+0x320>
    8001123c:	2350f0ef          	jal	80020c70 <printf>
    80011240:	02900513          	li	a0,41
    80011244:	0bc0f0ef          	jal	80020300 <putchar>
    80011248:	ba55                	j	80010bfc <software_interrupt_msi+0x7d4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8001124a:	00012517          	auipc	a0,0x12
    8001124e:	93e50513          	addi	a0,a0,-1730 # 80022b88 <__func__.2+0x320>
    80011252:	21f0f0ef          	jal	80020c70 <printf>
    80011256:	02900513          	li	a0,41
    8001125a:	0a60f0ef          	jal	80020300 <putchar>
    8001125e:	f9aff06f          	j	800109f8 <software_interrupt_msi+0x5d0>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80011262:	00012517          	auipc	a0,0x12
    80011266:	92650513          	addi	a0,a0,-1754 # 80022b88 <__func__.2+0x320>
    8001126a:	2070f0ef          	jal	80020c70 <printf>
    8001126e:	02900513          	li	a0,41
    80011272:	08e0f0ef          	jal	80020300 <putchar>
    80011276:	d7cff06f          	j	800107f2 <software_interrupt_msi+0x3ca>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    8001127a:	00012517          	auipc	a0,0x12
    8001127e:	90e50513          	addi	a0,a0,-1778 # 80022b88 <__func__.2+0x320>
    80011282:	1ef0f0ef          	jal	80020c70 <printf>
    80011286:	02900513          	li	a0,41
    8001128a:	0760f0ef          	jal	80020300 <putchar>
    8001128e:	cd8ff06f          	j	80010766 <software_interrupt_msi+0x33e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80011292:	00034717          	auipc	a4,0x34
    80011296:	d8272703          	lw	a4,-638(a4) # 80045014 <excpt+0x4>
    8001129a:	478d                	li	a5,3
    8001129c:	00012597          	auipc	a1,0x12
    800112a0:	89458593          	addi	a1,a1,-1900 # 80022b30 <__func__.2+0x2c8>
    800112a4:	88f706e3          	beq	a4,a5,80010b30 <software_interrupt_msi+0x708>
    800112a8:	00012597          	auipc	a1,0x12
    800112ac:	89858593          	addi	a1,a1,-1896 # 80022b40 <__func__.2+0x2d8>
    800112b0:	881ff06f          	j	80010b30 <software_interrupt_msi+0x708>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800112b4:	00034717          	auipc	a4,0x34
    800112b8:	d6072703          	lw	a4,-672(a4) # 80045014 <excpt+0x4>
    800112bc:	4791                	li	a5,4
    800112be:	00012597          	auipc	a1,0x12
    800112c2:	87258593          	addi	a1,a1,-1934 # 80022b30 <__func__.2+0x2c8>
    800112c6:	baf70ee3          	beq	a4,a5,80010e82 <software_interrupt_msi+0xa5a>
    800112ca:	00012597          	auipc	a1,0x12
    800112ce:	87658593          	addi	a1,a1,-1930 # 80022b40 <__func__.2+0x2d8>
    800112d2:	be45                	j	80010e82 <software_interrupt_msi+0xa5a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800112d4:	00034717          	auipc	a4,0x34
    800112d8:	d4072703          	lw	a4,-704(a4) # 80045014 <excpt+0x4>
    800112dc:	4791                	li	a5,4
    800112de:	00012597          	auipc	a1,0x12
    800112e2:	85258593          	addi	a1,a1,-1966 # 80022b30 <__func__.2+0x2c8>
    800112e6:	00f71463          	bne	a4,a5,800112ee <software_interrupt_msi+0xec6>
    800112ea:	9d4ff06f          	j	800104be <software_interrupt_msi+0x96>
    800112ee:	00012597          	auipc	a1,0x12
    800112f2:	85258593          	addi	a1,a1,-1966 # 80022b40 <__func__.2+0x2d8>
    800112f6:	9c8ff06f          	j	800104be <software_interrupt_msi+0x96>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800112fa:	00034717          	auipc	a4,0x34
    800112fe:	d1a72703          	lw	a4,-742(a4) # 80045014 <excpt+0x4>
    80011302:	4791                	li	a5,4
    80011304:	00012597          	auipc	a1,0x12
    80011308:	82c58593          	addi	a1,a1,-2004 # 80022b30 <__func__.2+0x2c8>
    8001130c:	f6f70663          	beq	a4,a5,80010a78 <software_interrupt_msi+0x650>
    80011310:	00012597          	auipc	a1,0x12
    80011314:	83058593          	addi	a1,a1,-2000 # 80022b40 <__func__.2+0x2d8>
    80011318:	f60ff06f          	j	80010a78 <software_interrupt_msi+0x650>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001131c:	00034717          	auipc	a4,0x34
    80011320:	cf872703          	lw	a4,-776(a4) # 80045014 <excpt+0x4>
    80011324:	4791                	li	a5,4
    80011326:	00012597          	auipc	a1,0x12
    8001132a:	80a58593          	addi	a1,a1,-2038 # 80022b30 <__func__.2+0x2c8>
    8001132e:	94f707e3          	beq	a4,a5,80010c7c <software_interrupt_msi+0x854>
    80011332:	00012597          	auipc	a1,0x12
    80011336:	80e58593          	addi	a1,a1,-2034 # 80022b40 <__func__.2+0x2d8>
    8001133a:	b289                	j	80010c7c <software_interrupt_msi+0x854>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001133c:	00034717          	auipc	a4,0x34
    80011340:	cd872703          	lw	a4,-808(a4) # 80045014 <excpt+0x4>
    80011344:	4791                	li	a5,4
    80011346:	00011597          	auipc	a1,0x11
    8001134a:	7ea58593          	addi	a1,a1,2026 # 80022b30 <__func__.2+0x2c8>
    8001134e:	d2f70263          	beq	a4,a5,80010872 <software_interrupt_msi+0x44a>
    80011352:	00011597          	auipc	a1,0x11
    80011356:	7ee58593          	addi	a1,a1,2030 # 80022b40 <__func__.2+0x2d8>
    8001135a:	d18ff06f          	j	80010872 <software_interrupt_msi+0x44a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001135e:	00034717          	auipc	a4,0x34
    80011362:	cb672703          	lw	a4,-842(a4) # 80045014 <excpt+0x4>
    80011366:	478d                	li	a5,3
    80011368:	00011597          	auipc	a1,0x11
    8001136c:	7c858593          	addi	a1,a1,1992 # 80022b30 <__func__.2+0x2c8>
    80011370:	daf70e63          	beq	a4,a5,8001092c <software_interrupt_msi+0x504>
    80011374:	00011597          	auipc	a1,0x11
    80011378:	7cc58593          	addi	a1,a1,1996 # 80022b40 <__func__.2+0x2d8>
    8001137c:	db0ff06f          	j	8001092c <software_interrupt_msi+0x504>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80011380:	00034717          	auipc	a4,0x34
    80011384:	c9472703          	lw	a4,-876(a4) # 80045014 <excpt+0x4>
    80011388:	478d                	li	a5,3
    8001138a:	00011597          	auipc	a1,0x11
    8001138e:	7a658593          	addi	a1,a1,1958 # 80022b30 <__func__.2+0x2c8>
    80011392:	baf704e3          	beq	a4,a5,80010f3a <software_interrupt_msi+0xb12>
    80011396:	00011597          	auipc	a1,0x11
    8001139a:	7aa58593          	addi	a1,a1,1962 # 80022b40 <__func__.2+0x2d8>
    8001139e:	be71                	j	80010f3a <software_interrupt_msi+0xb12>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800113a0:	00034717          	auipc	a4,0x34
    800113a4:	c7472703          	lw	a4,-908(a4) # 80045014 <excpt+0x4>
    800113a8:	478d                	li	a5,3
    800113aa:	00011597          	auipc	a1,0x11
    800113ae:	78658593          	addi	a1,a1,1926 # 80022b30 <__func__.2+0x2c8>
    800113b2:	98f702e3          	beq	a4,a5,80010d36 <software_interrupt_msi+0x90e>
    800113b6:	00011597          	auipc	a1,0x11
    800113ba:	78a58593          	addi	a1,a1,1930 # 80022b40 <__func__.2+0x2d8>
    800113be:	baa5                	j	80010d36 <software_interrupt_msi+0x90e>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800113c0:	00034417          	auipc	s0,0x34
    800113c4:	c5442403          	lw	s0,-940(s0) # 80045014 <excpt+0x4>
    800113c8:	1471                	addi	s0,s0,-4
    800113ca:	00143413          	seqz	s0,s0
    800113ce:	948ff06f          	j	80010516 <software_interrupt_msi+0xee>

00000000800113d2 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    800113d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800113d4:	00010597          	auipc	a1,0x10
    800113d8:	61458593          	addi	a1,a1,1556 # 800219e8 <__func__.1>
    800113dc:	00011517          	auipc	a0,0x11
    800113e0:	77450513          	addi	a0,a0,1908 # 80022b50 <__func__.2+0x2e8>
bool software_interrupt_ssi() {
    800113e4:	ec06                	sd	ra,24(sp)
    800113e6:	e822                	sd	s0,16(sp)
    800113e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800113ea:	0870f0ef          	jal	80020c70 <printf>
    800113ee:	4529                	li	a0,10
    800113f0:	7110e0ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    800113f4:	0330000f          	fence	rw,rw
    800113f8:	00034497          	auipc	s1,0x34
    800113fc:	c1848493          	addi	s1,s1,-1000 # 80045010 <excpt>
    80011400:	4785                	li	a5,1
    80011402:	00034717          	auipc	a4,0x34
    80011406:	c4073323          	sd	zero,-954(a4) # 80045048 <excpt+0x38>
    8001140a:	00f49023          	sh	a5,0(s1)
    8001140e:	0330000f          	fence	rw,rw

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80011412:	4511                	li	a0,4
    80011414:	ec4ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80011418:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    8001141c:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80011420:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80011424:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80011428:	450d                	li	a0,3
    8001142a:	eaeef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001142e:	08200593          	li	a1,130
    80011432:	00015617          	auipc	a2,0x15
    80011436:	75660613          	addi	a2,a2,1878 # 80026b88 <__func__.2+0x4320>
    8001143a:	00011517          	auipc	a0,0x11
    8001143e:	72e50513          	addi	a0,a0,1838 # 80022b68 <__func__.2+0x300>
    80011442:	02f0f0ef          	jal	80020c70 <printf>
    80011446:	00034797          	auipc	a5,0x34
    8001144a:	bcb7c783          	lbu	a5,-1077(a5) # 80045011 <excpt+0x1>
    8001144e:	00011597          	auipc	a1,0x11
    80011452:	6f258593          	addi	a1,a1,1778 # 80022b40 <__func__.2+0x2d8>
    80011456:	c799                	beqz	a5,80011464 <software_interrupt_ssi+0x92>
    80011458:	57fd                	li	a5,-1
    8001145a:	6498                	ld	a4,8(s1)
    8001145c:	17fe                	slli	a5,a5,0x3f
    8001145e:	0785                	addi	a5,a5,1
    80011460:	36f705e3          	beq	a4,a5,80011fca <software_interrupt_ssi+0xbf8>
    80011464:	00011517          	auipc	a0,0x11
    80011468:	71c50513          	addi	a0,a0,1820 # 80022b80 <__func__.2+0x318>
    8001146c:	0050f0ef          	jal	80020c70 <printf>
    80011470:	00034797          	auipc	a5,0x34
    80011474:	ba17c783          	lbu	a5,-1119(a5) # 80045011 <excpt+0x1>
    80011478:	c799                	beqz	a5,80011486 <software_interrupt_ssi+0xb4>
    8001147a:	57fd                	li	a5,-1
    8001147c:	6498                	ld	a4,8(s1)
    8001147e:	17fe                	slli	a5,a5,0x3f
    80011480:	0785                	addi	a5,a5,1
    80011482:	18f70be3          	beq	a4,a5,80011e18 <software_interrupt_ssi+0xa46>
    80011486:	00011517          	auipc	a0,0x11
    8001148a:	70250513          	addi	a0,a0,1794 # 80022b88 <__func__.2+0x320>
    8001148e:	7e20f0ef          	jal	80020c70 <printf>
    80011492:	02900513          	li	a0,41
    80011496:	66b0e0ef          	jal	80020300 <putchar>
    8001149a:	4529                	li	a0,10
    8001149c:	6650e0ef          	jal	80020300 <putchar>
    800114a0:	00034797          	auipc	a5,0x34
    800114a4:	b717c783          	lbu	a5,-1167(a5) # 80045011 <excpt+0x1>
    800114a8:	4401                	li	s0,0
    800114aa:	c799                	beqz	a5,800114b8 <software_interrupt_ssi+0xe6>
    800114ac:	57fd                	li	a5,-1
    800114ae:	6498                	ld	a4,8(s1)
    800114b0:	17fe                	slli	a5,a5,0x3f
    800114b2:	0785                	addi	a5,a5,1
    800114b4:	28f700e3          	beq	a4,a5,80011f34 <software_interrupt_ssi+0xb62>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    800114b8:	0330000f          	fence	rw,rw
    800114bc:	4785                	li	a5,1
    800114be:	00034717          	auipc	a4,0x34
    800114c2:	b8073523          	sd	zero,-1142(a4) # 80045048 <excpt+0x38>
    800114c6:	00f49023          	sh	a5,0(s1)
    800114ca:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800114ce:	4511                	li	a0,4
    800114d0:	e08ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800114d4:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800114d8:	57fd                	li	a5,-1
    800114da:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800114de:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800114e2:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    800114e6:	450d                	li	a0,3
    800114e8:	df0ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800114ec:	08200593          	li	a1,130
    800114f0:	00015617          	auipc	a2,0x15
    800114f4:	70860613          	addi	a2,a2,1800 # 80026bf8 <__func__.2+0x4390>
    800114f8:	00011517          	auipc	a0,0x11
    800114fc:	67050513          	addi	a0,a0,1648 # 80022b68 <__func__.2+0x300>
    80011500:	7700f0ef          	jal	80020c70 <printf>
    80011504:	00034797          	auipc	a5,0x34
    80011508:	b0d7c783          	lbu	a5,-1267(a5) # 80045011 <excpt+0x1>
    8001150c:	00011597          	auipc	a1,0x11
    80011510:	63458593          	addi	a1,a1,1588 # 80022b40 <__func__.2+0x2d8>
    80011514:	c799                	beqz	a5,80011522 <software_interrupt_ssi+0x150>
    80011516:	57fd                	li	a5,-1
    80011518:	6498                	ld	a4,8(s1)
    8001151a:	17fe                	slli	a5,a5,0x3f
    8001151c:	0785                	addi	a5,a5,1
    8001151e:	22f704e3          	beq	a4,a5,80011f46 <software_interrupt_ssi+0xb74>
    80011522:	00011517          	auipc	a0,0x11
    80011526:	65e50513          	addi	a0,a0,1630 # 80022b80 <__func__.2+0x318>
    8001152a:	7460f0ef          	jal	80020c70 <printf>
    8001152e:	00034797          	auipc	a5,0x34
    80011532:	ae37c783          	lbu	a5,-1309(a5) # 80045011 <excpt+0x1>
    80011536:	c799                	beqz	a5,80011544 <software_interrupt_ssi+0x172>
    80011538:	57fd                	li	a5,-1
    8001153a:	6498                	ld	a4,8(s1)
    8001153c:	17fe                	slli	a5,a5,0x3f
    8001153e:	0785                	addi	a5,a5,1
    80011540:	0cf703e3          	beq	a4,a5,80011e06 <software_interrupt_ssi+0xa34>
    80011544:	00011517          	auipc	a0,0x11
    80011548:	64450513          	addi	a0,a0,1604 # 80022b88 <__func__.2+0x320>
    8001154c:	7240f0ef          	jal	80020c70 <printf>
    80011550:	02900513          	li	a0,41
    80011554:	5ad0e0ef          	jal	80020300 <putchar>
    80011558:	4529                	li	a0,10
    8001155a:	5a70e0ef          	jal	80020300 <putchar>
    8001155e:	c801                	beqz	s0,8001156e <software_interrupt_ssi+0x19c>
    80011560:	00034797          	auipc	a5,0x34
    80011564:	ab17c783          	lbu	a5,-1359(a5) # 80045011 <excpt+0x1>
    80011568:	4401                	li	s0,0
    8001156a:	06079fe3          	bnez	a5,80011de8 <software_interrupt_ssi+0xa16>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001156e:	0330000f          	fence	rw,rw
    80011572:	4785                	li	a5,1
    80011574:	00034717          	auipc	a4,0x34
    80011578:	ac073a23          	sd	zero,-1324(a4) # 80045048 <excpt+0x38>
    8001157c:	00f49023          	sh	a5,0(s1)
    80011580:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011584:	4511                	li	a0,4
    80011586:	d52ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001158a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001158e:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80011592:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80011596:	450d                	li	a0,3
    80011598:	d40ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001159c:	08200593          	li	a1,130
    800115a0:	00015617          	auipc	a2,0x15
    800115a4:	6c860613          	addi	a2,a2,1736 # 80026c68 <__func__.2+0x4400>
    800115a8:	00011517          	auipc	a0,0x11
    800115ac:	5c050513          	addi	a0,a0,1472 # 80022b68 <__func__.2+0x300>
    800115b0:	6c00f0ef          	jal	80020c70 <printf>
    800115b4:	00034797          	auipc	a5,0x34
    800115b8:	a5d7c783          	lbu	a5,-1443(a5) # 80045011 <excpt+0x1>
    800115bc:	00011597          	auipc	a1,0x11
    800115c0:	58458593          	addi	a1,a1,1412 # 80022b40 <__func__.2+0x2d8>
    800115c4:	e789                	bnez	a5,800115ce <software_interrupt_ssi+0x1fc>
    800115c6:	00011597          	auipc	a1,0x11
    800115ca:	56a58593          	addi	a1,a1,1386 # 80022b30 <__func__.2+0x2c8>
    800115ce:	00011517          	auipc	a0,0x11
    800115d2:	5b250513          	addi	a0,a0,1458 # 80022b80 <__func__.2+0x318>
    800115d6:	69a0f0ef          	jal	80020c70 <printf>
    800115da:	00034797          	auipc	a5,0x34
    800115de:	a377c783          	lbu	a5,-1481(a5) # 80045011 <excpt+0x1>
    800115e2:	0c0791e3          	bnez	a5,80011ea4 <software_interrupt_ssi+0xad2>
    800115e6:	4529                	li	a0,10
    800115e8:	5190e0ef          	jal	80020300 <putchar>
    800115ec:	c419                	beqz	s0,800115fa <software_interrupt_ssi+0x228>
    800115ee:	00034417          	auipc	s0,0x34
    800115f2:	a2344403          	lbu	s0,-1501(s0) # 80045011 <excpt+0x1>
    800115f6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800115fa:	0330000f          	fence	rw,rw
    800115fe:	4785                	li	a5,1
    80011600:	00034717          	auipc	a4,0x34
    80011604:	a4073423          	sd	zero,-1464(a4) # 80045048 <excpt+0x38>
    80011608:	00f49023          	sh	a5,0(s1)
    8001160c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011610:	4511                	li	a0,4
    80011612:	cc6ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011616:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001161a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    8001161e:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011622:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80011626:	450d                	li	a0,3
    80011628:	cb0ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001162c:	08200593          	li	a1,130
    80011630:	00015617          	auipc	a2,0x15
    80011634:	69060613          	addi	a2,a2,1680 # 80026cc0 <__func__.2+0x4458>
    80011638:	00011517          	auipc	a0,0x11
    8001163c:	53050513          	addi	a0,a0,1328 # 80022b68 <__func__.2+0x300>
    80011640:	6300f0ef          	jal	80020c70 <printf>
    80011644:	00034797          	auipc	a5,0x34
    80011648:	9cd7c783          	lbu	a5,-1587(a5) # 80045011 <excpt+0x1>
    8001164c:	00011597          	auipc	a1,0x11
    80011650:	4f458593          	addi	a1,a1,1268 # 80022b40 <__func__.2+0x2d8>
    80011654:	c799                	beqz	a5,80011662 <software_interrupt_ssi+0x290>
    80011656:	57fd                	li	a5,-1
    80011658:	6498                	ld	a4,8(s1)
    8001165a:	17fe                	slli	a5,a5,0x3f
    8001165c:	0785                	addi	a5,a5,1
    8001165e:	10f705e3          	beq	a4,a5,80011f68 <software_interrupt_ssi+0xb96>
    80011662:	00011517          	auipc	a0,0x11
    80011666:	51e50513          	addi	a0,a0,1310 # 80022b80 <__func__.2+0x318>
    8001166a:	6060f0ef          	jal	80020c70 <printf>
    8001166e:	00034797          	auipc	a5,0x34
    80011672:	9a37c783          	lbu	a5,-1629(a5) # 80045011 <excpt+0x1>
    80011676:	c799                	beqz	a5,80011684 <software_interrupt_ssi+0x2b2>
    80011678:	57fd                	li	a5,-1
    8001167a:	6498                	ld	a4,8(s1)
    8001167c:	17fe                	slli	a5,a5,0x3f
    8001167e:	0785                	addi	a5,a5,1
    80011680:	7cf70d63          	beq	a4,a5,80011e5a <software_interrupt_ssi+0xa88>
    80011684:	00011517          	auipc	a0,0x11
    80011688:	50450513          	addi	a0,a0,1284 # 80022b88 <__func__.2+0x320>
    8001168c:	5e40f0ef          	jal	80020c70 <printf>
    80011690:	02900513          	li	a0,41
    80011694:	46d0e0ef          	jal	80020300 <putchar>
    80011698:	4529                	li	a0,10
    8001169a:	4670e0ef          	jal	80020300 <putchar>
    8001169e:	c801                	beqz	s0,800116ae <software_interrupt_ssi+0x2dc>
    800116a0:	00034797          	auipc	a5,0x34
    800116a4:	9717c783          	lbu	a5,-1679(a5) # 80045011 <excpt+0x1>
    800116a8:	4401                	li	s0,0
    800116aa:	72079063          	bnez	a5,80011dca <software_interrupt_ssi+0x9f8>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800116ae:	0330000f          	fence	rw,rw
    800116b2:	4785                	li	a5,1
    800116b4:	00034717          	auipc	a4,0x34
    800116b8:	98073a23          	sd	zero,-1644(a4) # 80045048 <excpt+0x38>
    800116bc:	00f49023          	sh	a5,0(s1)
    800116c0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800116c4:	4511                	li	a0,4
    800116c6:	c12ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800116ca:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800116ce:	57fd                	li	a5,-1
    800116d0:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800116d4:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800116d8:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800116dc:	450d                	li	a0,3
    800116de:	bfaef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800116e2:	08200593          	li	a1,130
    800116e6:	00015617          	auipc	a2,0x15
    800116ea:	64a60613          	addi	a2,a2,1610 # 80026d30 <__func__.2+0x44c8>
    800116ee:	00011517          	auipc	a0,0x11
    800116f2:	47a50513          	addi	a0,a0,1146 # 80022b68 <__func__.2+0x300>
    800116f6:	57a0f0ef          	jal	80020c70 <printf>
    800116fa:	00034797          	auipc	a5,0x34
    800116fe:	9177c783          	lbu	a5,-1769(a5) # 80045011 <excpt+0x1>
    80011702:	00011597          	auipc	a1,0x11
    80011706:	43e58593          	addi	a1,a1,1086 # 80022b40 <__func__.2+0x2d8>
    8001170a:	c799                	beqz	a5,80011718 <software_interrupt_ssi+0x346>
    8001170c:	57fd                	li	a5,-1
    8001170e:	6498                	ld	a4,8(s1)
    80011710:	17fe                	slli	a5,a5,0x3f
    80011712:	0785                	addi	a5,a5,1
    80011714:	0cf70ce3          	beq	a4,a5,80011fec <software_interrupt_ssi+0xc1a>
    80011718:	00011517          	auipc	a0,0x11
    8001171c:	46850513          	addi	a0,a0,1128 # 80022b80 <__func__.2+0x318>
    80011720:	5500f0ef          	jal	80020c70 <printf>
    80011724:	00034797          	auipc	a5,0x34
    80011728:	8ed7c783          	lbu	a5,-1811(a5) # 80045011 <excpt+0x1>
    8001172c:	c799                	beqz	a5,8001173a <software_interrupt_ssi+0x368>
    8001172e:	57fd                	li	a5,-1
    80011730:	6498                	ld	a4,8(s1)
    80011732:	17fe                	slli	a5,a5,0x3f
    80011734:	0785                	addi	a5,a5,1
    80011736:	72f70b63          	beq	a4,a5,80011e6c <software_interrupt_ssi+0xa9a>
    8001173a:	00011517          	auipc	a0,0x11
    8001173e:	44e50513          	addi	a0,a0,1102 # 80022b88 <__func__.2+0x320>
    80011742:	52e0f0ef          	jal	80020c70 <printf>
    80011746:	02900513          	li	a0,41
    8001174a:	3b70e0ef          	jal	80020300 <putchar>
    8001174e:	4529                	li	a0,10
    80011750:	3b10e0ef          	jal	80020300 <putchar>
    80011754:	c801                	beqz	s0,80011764 <software_interrupt_ssi+0x392>
    80011756:	00034797          	auipc	a5,0x34
    8001175a:	8bb7c783          	lbu	a5,-1861(a5) # 80045011 <excpt+0x1>
    8001175e:	4401                	li	s0,0
    80011760:	64079763          	bnez	a5,80011dae <software_interrupt_ssi+0x9dc>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80011764:	0330000f          	fence	rw,rw
    80011768:	4785                	li	a5,1
    8001176a:	00034717          	auipc	a4,0x34
    8001176e:	8c073f23          	sd	zero,-1826(a4) # 80045048 <excpt+0x38>
    80011772:	00f49023          	sh	a5,0(s1)
    80011776:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001177a:	4511                	li	a0,4
    8001177c:	b5cef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011780:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80011784:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011788:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001178c:	450d                	li	a0,3
    8001178e:	b4aef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80011792:	08200593          	li	a1,130
    80011796:	00015617          	auipc	a2,0x15
    8001179a:	5fa60613          	addi	a2,a2,1530 # 80026d90 <__func__.2+0x4528>
    8001179e:	00011517          	auipc	a0,0x11
    800117a2:	3ca50513          	addi	a0,a0,970 # 80022b68 <__func__.2+0x300>
    800117a6:	4ca0f0ef          	jal	80020c70 <printf>
    800117aa:	00034797          	auipc	a5,0x34
    800117ae:	8677c783          	lbu	a5,-1945(a5) # 80045011 <excpt+0x1>
    800117b2:	00011597          	auipc	a1,0x11
    800117b6:	38e58593          	addi	a1,a1,910 # 80022b40 <__func__.2+0x2d8>
    800117ba:	e789                	bnez	a5,800117c4 <software_interrupt_ssi+0x3f2>
    800117bc:	00011597          	auipc	a1,0x11
    800117c0:	37458593          	addi	a1,a1,884 # 80022b30 <__func__.2+0x2c8>
    800117c4:	00011517          	auipc	a0,0x11
    800117c8:	3bc50513          	addi	a0,a0,956 # 80022b80 <__func__.2+0x318>
    800117cc:	4a40f0ef          	jal	80020c70 <printf>
    800117d0:	00034797          	auipc	a5,0x34
    800117d4:	8417c783          	lbu	a5,-1983(a5) # 80045011 <excpt+0x1>
    800117d8:	6e079d63          	bnez	a5,80011ed2 <software_interrupt_ssi+0xb00>
    800117dc:	4529                	li	a0,10
    800117de:	3230e0ef          	jal	80020300 <putchar>
    800117e2:	c419                	beqz	s0,800117f0 <software_interrupt_ssi+0x41e>
    800117e4:	00034417          	auipc	s0,0x34
    800117e8:	82d44403          	lbu	s0,-2003(s0) # 80045011 <excpt+0x1>
    800117ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800117f0:	0330000f          	fence	rw,rw
    800117f4:	4785                	li	a5,1
    800117f6:	00034717          	auipc	a4,0x34
    800117fa:	84073923          	sd	zero,-1966(a4) # 80045048 <excpt+0x38>
    800117fe:	00f49023          	sh	a5,0(s1)
    80011802:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011806:	4511                	li	a0,4
    80011808:	ad0ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001180c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80011810:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011814:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80011818:	450d                	li	a0,3
    8001181a:	abeef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001181e:	08200593          	li	a1,130
    80011822:	00015617          	auipc	a2,0x15
    80011826:	5be60613          	addi	a2,a2,1470 # 80026de0 <__func__.2+0x4578>
    8001182a:	00011517          	auipc	a0,0x11
    8001182e:	33e50513          	addi	a0,a0,830 # 80022b68 <__func__.2+0x300>
    80011832:	43e0f0ef          	jal	80020c70 <printf>
    80011836:	00033797          	auipc	a5,0x33
    8001183a:	7db7c783          	lbu	a5,2011(a5) # 80045011 <excpt+0x1>
    8001183e:	00011597          	auipc	a1,0x11
    80011842:	30258593          	addi	a1,a1,770 # 80022b40 <__func__.2+0x2d8>
    80011846:	e789                	bnez	a5,80011850 <software_interrupt_ssi+0x47e>
    80011848:	00011597          	auipc	a1,0x11
    8001184c:	2e858593          	addi	a1,a1,744 # 80022b30 <__func__.2+0x2c8>
    80011850:	00011517          	auipc	a0,0x11
    80011854:	33050513          	addi	a0,a0,816 # 80022b80 <__func__.2+0x318>
    80011858:	4180f0ef          	jal	80020c70 <printf>
    8001185c:	00033797          	auipc	a5,0x33
    80011860:	7b57c783          	lbu	a5,1973(a5) # 80045011 <excpt+0x1>
    80011864:	64079c63          	bnez	a5,80011ebc <software_interrupt_ssi+0xaea>
    80011868:	4529                	li	a0,10
    8001186a:	2970e0ef          	jal	80020300 <putchar>
    8001186e:	c419                	beqz	s0,8001187c <software_interrupt_ssi+0x4aa>
    80011870:	00033417          	auipc	s0,0x33
    80011874:	7a144403          	lbu	s0,1953(s0) # 80045011 <excpt+0x1>
    80011878:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    8001187c:	0330000f          	fence	rw,rw
    80011880:	4785                	li	a5,1
    80011882:	00033717          	auipc	a4,0x33
    80011886:	7c073323          	sd	zero,1990(a4) # 80045048 <excpt+0x38>
    8001188a:	00f49023          	sh	a5,0(s1)
    8001188e:	0330000f          	fence	rw,rw
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    80011892:	0330000f          	fence	rw,rw
    80011896:	00033717          	auipc	a4,0x33
    8001189a:	7a073923          	sd	zero,1970(a4) # 80045048 <excpt+0x38>
    8001189e:	00f49023          	sh	a5,0(s1)
    800118a2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800118a6:	4511                	li	a0,4
    800118a8:	a30ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800118ac:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800118b0:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    800118b4:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800118b8:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800118bc:	4509                	li	a0,2
    800118be:	a1aef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800118c2:	08200593          	li	a1,130
    800118c6:	00015617          	auipc	a2,0x15
    800118ca:	56a60613          	addi	a2,a2,1386 # 80026e30 <__func__.2+0x45c8>
    800118ce:	00011517          	auipc	a0,0x11
    800118d2:	29a50513          	addi	a0,a0,666 # 80022b68 <__func__.2+0x300>
    800118d6:	39a0f0ef          	jal	80020c70 <printf>
    800118da:	00033797          	auipc	a5,0x33
    800118de:	7377c783          	lbu	a5,1847(a5) # 80045011 <excpt+0x1>
    800118e2:	00011597          	auipc	a1,0x11
    800118e6:	25e58593          	addi	a1,a1,606 # 80022b40 <__func__.2+0x2d8>
    800118ea:	c799                	beqz	a5,800118f8 <software_interrupt_ssi+0x526>
    800118ec:	57fd                	li	a5,-1
    800118ee:	6498                	ld	a4,8(s1)
    800118f0:	17fe                	slli	a5,a5,0x3f
    800118f2:	0785                	addi	a5,a5,1
    800118f4:	70f70d63          	beq	a4,a5,8001200e <software_interrupt_ssi+0xc3c>
    800118f8:	00011517          	auipc	a0,0x11
    800118fc:	28850513          	addi	a0,a0,648 # 80022b80 <__func__.2+0x318>
    80011900:	3700f0ef          	jal	80020c70 <printf>
    80011904:	00033797          	auipc	a5,0x33
    80011908:	70d7c783          	lbu	a5,1805(a5) # 80045011 <excpt+0x1>
    8001190c:	c799                	beqz	a5,8001191a <software_interrupt_ssi+0x548>
    8001190e:	57fd                	li	a5,-1
    80011910:	6498                	ld	a4,8(s1)
    80011912:	17fe                	slli	a5,a5,0x3f
    80011914:	0785                	addi	a5,a5,1
    80011916:	50f70a63          	beq	a4,a5,80011e2a <software_interrupt_ssi+0xa58>
    8001191a:	00011517          	auipc	a0,0x11
    8001191e:	26e50513          	addi	a0,a0,622 # 80022b88 <__func__.2+0x320>
    80011922:	34e0f0ef          	jal	80020c70 <printf>
    80011926:	02900513          	li	a0,41
    8001192a:	1d70e0ef          	jal	80020300 <putchar>
    8001192e:	4529                	li	a0,10
    80011930:	1d10e0ef          	jal	80020300 <putchar>
    80011934:	c801                	beqz	s0,80011944 <software_interrupt_ssi+0x572>
    80011936:	00033797          	auipc	a5,0x33
    8001193a:	6db7c783          	lbu	a5,1755(a5) # 80045011 <excpt+0x1>
    8001193e:	4401                	li	s0,0
    80011940:	44079963          	bnez	a5,80011d92 <software_interrupt_ssi+0x9c0>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80011944:	0330000f          	fence	rw,rw
    80011948:	4785                	li	a5,1
    8001194a:	00033717          	auipc	a4,0x33
    8001194e:	6e073f23          	sd	zero,1790(a4) # 80045048 <excpt+0x38>
    80011952:	00f49023          	sh	a5,0(s1)
    80011956:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001195a:	4511                	li	a0,4
    8001195c:	97cef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011960:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80011964:	57fd                	li	a5,-1
    80011966:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    8001196a:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001196e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80011972:	4509                	li	a0,2
    80011974:	964ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011978:	08200593          	li	a1,130
    8001197c:	00015617          	auipc	a2,0x15
    80011980:	52460613          	addi	a2,a2,1316 # 80026ea0 <__func__.2+0x4638>
    80011984:	00011517          	auipc	a0,0x11
    80011988:	1e450513          	addi	a0,a0,484 # 80022b68 <__func__.2+0x300>
    8001198c:	2e40f0ef          	jal	80020c70 <printf>
    80011990:	00033797          	auipc	a5,0x33
    80011994:	6817c783          	lbu	a5,1665(a5) # 80045011 <excpt+0x1>
    80011998:	00011597          	auipc	a1,0x11
    8001199c:	1a858593          	addi	a1,a1,424 # 80022b40 <__func__.2+0x2d8>
    800119a0:	c799                	beqz	a5,800119ae <software_interrupt_ssi+0x5dc>
    800119a2:	57fd                	li	a5,-1
    800119a4:	6498                	ld	a4,8(s1)
    800119a6:	17fe                	slli	a5,a5,0x3f
    800119a8:	0785                	addi	a5,a5,1
    800119aa:	60f70063          	beq	a4,a5,80011faa <software_interrupt_ssi+0xbd8>
    800119ae:	00011517          	auipc	a0,0x11
    800119b2:	1d250513          	addi	a0,a0,466 # 80022b80 <__func__.2+0x318>
    800119b6:	2ba0f0ef          	jal	80020c70 <printf>
    800119ba:	00033797          	auipc	a5,0x33
    800119be:	6577c783          	lbu	a5,1623(a5) # 80045011 <excpt+0x1>
    800119c2:	c799                	beqz	a5,800119d0 <software_interrupt_ssi+0x5fe>
    800119c4:	57fd                	li	a5,-1
    800119c6:	6498                	ld	a4,8(s1)
    800119c8:	17fe                	slli	a5,a5,0x3f
    800119ca:	0785                	addi	a5,a5,1
    800119cc:	46f70763          	beq	a4,a5,80011e3a <software_interrupt_ssi+0xa68>
    800119d0:	00011517          	auipc	a0,0x11
    800119d4:	1b850513          	addi	a0,a0,440 # 80022b88 <__func__.2+0x320>
    800119d8:	2980f0ef          	jal	80020c70 <printf>
    800119dc:	02900513          	li	a0,41
    800119e0:	1210e0ef          	jal	80020300 <putchar>
    800119e4:	4529                	li	a0,10
    800119e6:	11b0e0ef          	jal	80020300 <putchar>
    800119ea:	c801                	beqz	s0,800119fa <software_interrupt_ssi+0x628>
    800119ec:	00033797          	auipc	a5,0x33
    800119f0:	6257c783          	lbu	a5,1573(a5) # 80045011 <excpt+0x1>
    800119f4:	4401                	li	s0,0
    800119f6:	38079063          	bnez	a5,80011d76 <software_interrupt_ssi+0x9a4>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800119fa:	0330000f          	fence	rw,rw
    800119fe:	4785                	li	a5,1
    80011a00:	00033717          	auipc	a4,0x33
    80011a04:	64073423          	sd	zero,1608(a4) # 80045048 <excpt+0x38>
    80011a08:	00f49023          	sh	a5,0(s1)
    80011a0c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011a10:	4511                	li	a0,4
    80011a12:	8c6ef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011a16:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80011a1a:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80011a1e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80011a22:	4509                	li	a0,2
    80011a24:	8b4ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80011a28:	08200593          	li	a1,130
    80011a2c:	00015617          	auipc	a2,0x15
    80011a30:	4e460613          	addi	a2,a2,1252 # 80026f10 <__func__.2+0x46a8>
    80011a34:	00011517          	auipc	a0,0x11
    80011a38:	13450513          	addi	a0,a0,308 # 80022b68 <__func__.2+0x300>
    80011a3c:	2340f0ef          	jal	80020c70 <printf>
    80011a40:	00033797          	auipc	a5,0x33
    80011a44:	5d17c783          	lbu	a5,1489(a5) # 80045011 <excpt+0x1>
    80011a48:	00011597          	auipc	a1,0x11
    80011a4c:	0f858593          	addi	a1,a1,248 # 80022b40 <__func__.2+0x2d8>
    80011a50:	e789                	bnez	a5,80011a5a <software_interrupt_ssi+0x688>
    80011a52:	00011597          	auipc	a1,0x11
    80011a56:	0de58593          	addi	a1,a1,222 # 80022b30 <__func__.2+0x2c8>
    80011a5a:	00011517          	auipc	a0,0x11
    80011a5e:	12650513          	addi	a0,a0,294 # 80022b80 <__func__.2+0x318>
    80011a62:	20e0f0ef          	jal	80020c70 <printf>
    80011a66:	00033797          	auipc	a5,0x33
    80011a6a:	5ab7c783          	lbu	a5,1451(a5) # 80045011 <excpt+0x1>
    80011a6e:	42079063          	bnez	a5,80011e8e <software_interrupt_ssi+0xabc>
    80011a72:	4529                	li	a0,10
    80011a74:	08d0e0ef          	jal	80020300 <putchar>
    80011a78:	c419                	beqz	s0,80011a86 <software_interrupt_ssi+0x6b4>
    80011a7a:	00033417          	auipc	s0,0x33
    80011a7e:	59744403          	lbu	s0,1431(s0) # 80045011 <excpt+0x1>
    80011a82:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80011a86:	0330000f          	fence	rw,rw
    80011a8a:	4785                	li	a5,1
    80011a8c:	00033717          	auipc	a4,0x33
    80011a90:	5a073e23          	sd	zero,1468(a4) # 80045048 <excpt+0x38>
    80011a94:	00f49023          	sh	a5,0(s1)
    80011a98:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011a9c:	4511                	li	a0,4
    80011a9e:	83aef0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011aa2:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    80011aa6:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80011aaa:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011aae:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80011ab2:	4509                	li	a0,2
    80011ab4:	824ef0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011ab8:	08200593          	li	a1,130
    80011abc:	00015617          	auipc	a2,0x15
    80011ac0:	4ac60613          	addi	a2,a2,1196 # 80026f68 <__func__.2+0x4700>
    80011ac4:	00011517          	auipc	a0,0x11
    80011ac8:	0a450513          	addi	a0,a0,164 # 80022b68 <__func__.2+0x300>
    80011acc:	1a40f0ef          	jal	80020c70 <printf>
    80011ad0:	00033797          	auipc	a5,0x33
    80011ad4:	5417c783          	lbu	a5,1345(a5) # 80045011 <excpt+0x1>
    80011ad8:	00011597          	auipc	a1,0x11
    80011adc:	06858593          	addi	a1,a1,104 # 80022b40 <__func__.2+0x2d8>
    80011ae0:	c799                	beqz	a5,80011aee <software_interrupt_ssi+0x71c>
    80011ae2:	57fd                	li	a5,-1
    80011ae4:	6498                	ld	a4,8(s1)
    80011ae6:	17fe                	slli	a5,a5,0x3f
    80011ae8:	0785                	addi	a5,a5,1
    80011aea:	42f70563          	beq	a4,a5,80011f14 <software_interrupt_ssi+0xb42>
    80011aee:	00011517          	auipc	a0,0x11
    80011af2:	09250513          	addi	a0,a0,146 # 80022b80 <__func__.2+0x318>
    80011af6:	17a0f0ef          	jal	80020c70 <printf>
    80011afa:	00033797          	auipc	a5,0x33
    80011afe:	5177c783          	lbu	a5,1303(a5) # 80045011 <excpt+0x1>
    80011b02:	c799                	beqz	a5,80011b10 <software_interrupt_ssi+0x73e>
    80011b04:	57fd                	li	a5,-1
    80011b06:	6498                	ld	a4,8(s1)
    80011b08:	17fe                	slli	a5,a5,0x3f
    80011b0a:	0785                	addi	a5,a5,1
    80011b0c:	36f70963          	beq	a4,a5,80011e7e <software_interrupt_ssi+0xaac>
    80011b10:	00011517          	auipc	a0,0x11
    80011b14:	07850513          	addi	a0,a0,120 # 80022b88 <__func__.2+0x320>
    80011b18:	1580f0ef          	jal	80020c70 <printf>
    80011b1c:	02900513          	li	a0,41
    80011b20:	7e00e0ef          	jal	80020300 <putchar>
    80011b24:	4529                	li	a0,10
    80011b26:	7da0e0ef          	jal	80020300 <putchar>
    80011b2a:	c801                	beqz	s0,80011b3a <software_interrupt_ssi+0x768>
    80011b2c:	00033797          	auipc	a5,0x33
    80011b30:	4e57c783          	lbu	a5,1253(a5) # 80045011 <excpt+0x1>
    80011b34:	4401                	li	s0,0
    80011b36:	22079263          	bnez	a5,80011d5a <software_interrupt_ssi+0x988>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80011b3a:	0330000f          	fence	rw,rw
    80011b3e:	4785                	li	a5,1
    80011b40:	00033717          	auipc	a4,0x33
    80011b44:	50073423          	sd	zero,1288(a4) # 80045048 <excpt+0x38>
    80011b48:	00f49023          	sh	a5,0(s1)
    80011b4c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011b50:	4511                	li	a0,4
    80011b52:	f87ee0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011b56:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80011b5a:	57fd                	li	a5,-1
    80011b5c:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80011b60:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011b64:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80011b68:	4509                	li	a0,2
    80011b6a:	f6fee0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011b6e:	08200593          	li	a1,130
    80011b72:	00015617          	auipc	a2,0x15
    80011b76:	46660613          	addi	a2,a2,1126 # 80026fd8 <__func__.2+0x4770>
    80011b7a:	00011517          	auipc	a0,0x11
    80011b7e:	fee50513          	addi	a0,a0,-18 # 80022b68 <__func__.2+0x300>
    80011b82:	0ee0f0ef          	jal	80020c70 <printf>
    80011b86:	00033797          	auipc	a5,0x33
    80011b8a:	48b7c783          	lbu	a5,1163(a5) # 80045011 <excpt+0x1>
    80011b8e:	00011597          	auipc	a1,0x11
    80011b92:	fb258593          	addi	a1,a1,-78 # 80022b40 <__func__.2+0x2d8>
    80011b96:	c799                	beqz	a5,80011ba4 <software_interrupt_ssi+0x7d2>
    80011b98:	57fd                	li	a5,-1
    80011b9a:	6498                	ld	a4,8(s1)
    80011b9c:	17fe                	slli	a5,a5,0x3f
    80011b9e:	0785                	addi	a5,a5,1
    80011ba0:	3ef70563          	beq	a4,a5,80011f8a <software_interrupt_ssi+0xbb8>
    80011ba4:	00011517          	auipc	a0,0x11
    80011ba8:	fdc50513          	addi	a0,a0,-36 # 80022b80 <__func__.2+0x318>
    80011bac:	0c40f0ef          	jal	80020c70 <printf>
    80011bb0:	00033797          	auipc	a5,0x33
    80011bb4:	4617c783          	lbu	a5,1121(a5) # 80045011 <excpt+0x1>
    80011bb8:	c799                	beqz	a5,80011bc6 <software_interrupt_ssi+0x7f4>
    80011bba:	57fd                	li	a5,-1
    80011bbc:	6498                	ld	a4,8(s1)
    80011bbe:	17fe                	slli	a5,a5,0x3f
    80011bc0:	0785                	addi	a5,a5,1
    80011bc2:	28f70463          	beq	a4,a5,80011e4a <software_interrupt_ssi+0xa78>
    80011bc6:	00011517          	auipc	a0,0x11
    80011bca:	fc250513          	addi	a0,a0,-62 # 80022b88 <__func__.2+0x320>
    80011bce:	0a20f0ef          	jal	80020c70 <printf>
    80011bd2:	02900513          	li	a0,41
    80011bd6:	72a0e0ef          	jal	80020300 <putchar>
    80011bda:	4529                	li	a0,10
    80011bdc:	7240e0ef          	jal	80020300 <putchar>
    80011be0:	c801                	beqz	s0,80011bf0 <software_interrupt_ssi+0x81e>
    80011be2:	00033797          	auipc	a5,0x33
    80011be6:	42f7c783          	lbu	a5,1071(a5) # 80045011 <excpt+0x1>
    80011bea:	4401                	li	s0,0
    80011bec:	14079963          	bnez	a5,80011d3e <software_interrupt_ssi+0x96c>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80011bf0:	0330000f          	fence	rw,rw
    80011bf4:	4785                	li	a5,1
    80011bf6:	00033717          	auipc	a4,0x33
    80011bfa:	44073923          	sd	zero,1106(a4) # 80045048 <excpt+0x38>
    80011bfe:	00f49023          	sh	a5,0(s1)
    80011c02:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011c06:	4511                	li	a0,4
    80011c08:	ed1ee0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011c0c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80011c10:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011c14:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80011c18:	4509                	li	a0,2
    80011c1a:	ebfee0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80011c1e:	08200593          	li	a1,130
    80011c22:	00015617          	auipc	a2,0x15
    80011c26:	41660613          	addi	a2,a2,1046 # 80027038 <__func__.2+0x47d0>
    80011c2a:	00011517          	auipc	a0,0x11
    80011c2e:	f3e50513          	addi	a0,a0,-194 # 80022b68 <__func__.2+0x300>
    80011c32:	03e0f0ef          	jal	80020c70 <printf>
    80011c36:	00033797          	auipc	a5,0x33
    80011c3a:	3db7c783          	lbu	a5,987(a5) # 80045011 <excpt+0x1>
    80011c3e:	00011597          	auipc	a1,0x11
    80011c42:	f0258593          	addi	a1,a1,-254 # 80022b40 <__func__.2+0x2d8>
    80011c46:	e789                	bnez	a5,80011c50 <software_interrupt_ssi+0x87e>
    80011c48:	00011597          	auipc	a1,0x11
    80011c4c:	ee858593          	addi	a1,a1,-280 # 80022b30 <__func__.2+0x2c8>
    80011c50:	00011517          	auipc	a0,0x11
    80011c54:	f3050513          	addi	a0,a0,-208 # 80022b80 <__func__.2+0x318>
    80011c58:	0180f0ef          	jal	80020c70 <printf>
    80011c5c:	00033797          	auipc	a5,0x33
    80011c60:	3b57c783          	lbu	a5,949(a5) # 80045011 <excpt+0x1>
    80011c64:	28079d63          	bnez	a5,80011efe <software_interrupt_ssi+0xb2c>
    80011c68:	4529                	li	a0,10
    80011c6a:	6960e0ef          	jal	80020300 <putchar>
    80011c6e:	c419                	beqz	s0,80011c7c <software_interrupt_ssi+0x8aa>
    80011c70:	00033417          	auipc	s0,0x33
    80011c74:	3a144403          	lbu	s0,929(s0) # 80045011 <excpt+0x1>
    80011c78:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80011c7c:	0330000f          	fence	rw,rw
    80011c80:	4785                	li	a5,1
    80011c82:	00033717          	auipc	a4,0x33
    80011c86:	3c073323          	sd	zero,966(a4) # 80045048 <excpt+0x38>
    80011c8a:	00f49023          	sh	a5,0(s1)
    80011c8e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011c92:	4511                	li	a0,4
    80011c94:	e45ee0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80011c98:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80011c9c:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80011ca0:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80011ca4:	4509                	li	a0,2
    80011ca6:	e33ee0ef          	jal	80000ad8 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80011caa:	08200593          	li	a1,130
    80011cae:	00015617          	auipc	a2,0x15
    80011cb2:	3da60613          	addi	a2,a2,986 # 80027088 <__func__.2+0x4820>
    80011cb6:	00011517          	auipc	a0,0x11
    80011cba:	eb250513          	addi	a0,a0,-334 # 80022b68 <__func__.2+0x300>
    80011cbe:	7b30e0ef          	jal	80020c70 <printf>
    80011cc2:	00033797          	auipc	a5,0x33
    80011cc6:	34f7c783          	lbu	a5,847(a5) # 80045011 <excpt+0x1>
    80011cca:	00011597          	auipc	a1,0x11
    80011cce:	e7658593          	addi	a1,a1,-394 # 80022b40 <__func__.2+0x2d8>
    80011cd2:	e789                	bnez	a5,80011cdc <software_interrupt_ssi+0x90a>
    80011cd4:	00011597          	auipc	a1,0x11
    80011cd8:	e5c58593          	addi	a1,a1,-420 # 80022b30 <__func__.2+0x2c8>
    80011cdc:	00011517          	auipc	a0,0x11
    80011ce0:	ea450513          	addi	a0,a0,-348 # 80022b80 <__func__.2+0x318>
    80011ce4:	78d0e0ef          	jal	80020c70 <printf>
    80011ce8:	00033797          	auipc	a5,0x33
    80011cec:	3297c783          	lbu	a5,809(a5) # 80045011 <excpt+0x1>
    80011cf0:	1e079c63          	bnez	a5,80011ee8 <software_interrupt_ssi+0xb16>
    80011cf4:	4529                	li	a0,10
    80011cf6:	60a0e0ef          	jal	80020300 <putchar>
    80011cfa:	c411                	beqz	s0,80011d06 <software_interrupt_ssi+0x934>
    80011cfc:	00033797          	auipc	a5,0x33
    80011d00:	3157c783          	lbu	a5,789(a5) # 80045011 <excpt+0x1>
    80011d04:	c79d                	beqz	a5,80011d32 <software_interrupt_ssi+0x960>
    80011d06:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80011d08:	00011597          	auipc	a1,0x11
    80011d0c:	e3858593          	addi	a1,a1,-456 # 80022b40 <__func__.2+0x2d8>
    80011d10:	00011517          	auipc	a0,0x11
    80011d14:	ed850513          	addi	a0,a0,-296 # 80022be8 <__func__.2+0x380>
    80011d18:	7590e0ef          	jal	80020c70 <printf>
    80011d1c:	4511                	li	a0,4
    80011d1e:	dbbee0ef          	jal	80000ad8 <goto_priv>
    80011d22:	e86ef0ef          	jal	800013a8 <reset_state>
}
    80011d26:	60e2                	ld	ra,24(sp)
    80011d28:	8522                	mv	a0,s0
    80011d2a:	6442                	ld	s0,16(sp)
    80011d2c:	64a2                	ld	s1,8(sp)
    80011d2e:	6105                	addi	sp,sp,32
    80011d30:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80011d32:	4405                	li	s0,1
    TEST_END();
    80011d34:	00011597          	auipc	a1,0x11
    80011d38:	dfc58593          	addi	a1,a1,-516 # 80022b30 <__func__.2+0x2c8>
    80011d3c:	bfd1                	j	80011d10 <software_interrupt_ssi+0x93e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011d3e:	57fd                	li	a5,-1
    80011d40:	6498                	ld	a4,8(s1)
    80011d42:	17fe                	slli	a5,a5,0x3f
    80011d44:	0785                	addi	a5,a5,1
    80011d46:	eaf715e3          	bne	a4,a5,80011bf0 <software_interrupt_ssi+0x81e>
    80011d4a:	00033417          	auipc	s0,0x33
    80011d4e:	2ca42403          	lw	s0,714(s0) # 80045014 <excpt+0x4>
    80011d52:	1475                	addi	s0,s0,-3
    80011d54:	00143413          	seqz	s0,s0
    80011d58:	bd61                	j	80011bf0 <software_interrupt_ssi+0x81e>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011d5a:	57fd                	li	a5,-1
    80011d5c:	6498                	ld	a4,8(s1)
    80011d5e:	17fe                	slli	a5,a5,0x3f
    80011d60:	0785                	addi	a5,a5,1
    80011d62:	dcf71ce3          	bne	a4,a5,80011b3a <software_interrupt_ssi+0x768>
    80011d66:	00033417          	auipc	s0,0x33
    80011d6a:	2ae42403          	lw	s0,686(s0) # 80045014 <excpt+0x4>
    80011d6e:	1471                	addi	s0,s0,-4
    80011d70:	00143413          	seqz	s0,s0
    80011d74:	b3d9                	j	80011b3a <software_interrupt_ssi+0x768>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011d76:	57fd                	li	a5,-1
    80011d78:	6498                	ld	a4,8(s1)
    80011d7a:	17fe                	slli	a5,a5,0x3f
    80011d7c:	0785                	addi	a5,a5,1
    80011d7e:	c6f71ee3          	bne	a4,a5,800119fa <software_interrupt_ssi+0x628>
    80011d82:	00033417          	auipc	s0,0x33
    80011d86:	29242403          	lw	s0,658(s0) # 80045014 <excpt+0x4>
    80011d8a:	1475                	addi	s0,s0,-3
    80011d8c:	00143413          	seqz	s0,s0
    80011d90:	b1ad                	j	800119fa <software_interrupt_ssi+0x628>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011d92:	57fd                	li	a5,-1
    80011d94:	6498                	ld	a4,8(s1)
    80011d96:	17fe                	slli	a5,a5,0x3f
    80011d98:	0785                	addi	a5,a5,1
    80011d9a:	baf715e3          	bne	a4,a5,80011944 <software_interrupt_ssi+0x572>
    80011d9e:	00033417          	auipc	s0,0x33
    80011da2:	27642403          	lw	s0,630(s0) # 80045014 <excpt+0x4>
    80011da6:	1471                	addi	s0,s0,-4
    80011da8:	00143413          	seqz	s0,s0
    80011dac:	be61                	j	80011944 <software_interrupt_ssi+0x572>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011dae:	57fd                	li	a5,-1
    80011db0:	6498                	ld	a4,8(s1)
    80011db2:	17fe                	slli	a5,a5,0x3f
    80011db4:	0785                	addi	a5,a5,1
    80011db6:	9af717e3          	bne	a4,a5,80011764 <software_interrupt_ssi+0x392>
    80011dba:	00033417          	auipc	s0,0x33
    80011dbe:	25a42403          	lw	s0,602(s0) # 80045014 <excpt+0x4>
    80011dc2:	1475                	addi	s0,s0,-3
    80011dc4:	00143413          	seqz	s0,s0
    80011dc8:	ba71                	j	80011764 <software_interrupt_ssi+0x392>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011dca:	57fd                	li	a5,-1
    80011dcc:	6498                	ld	a4,8(s1)
    80011dce:	17fe                	slli	a5,a5,0x3f
    80011dd0:	0785                	addi	a5,a5,1
    80011dd2:	8cf71ee3          	bne	a4,a5,800116ae <software_interrupt_ssi+0x2dc>
    80011dd6:	00033417          	auipc	s0,0x33
    80011dda:	23e42403          	lw	s0,574(s0) # 80045014 <excpt+0x4>
    80011dde:	1471                	addi	s0,s0,-4
    80011de0:	00143413          	seqz	s0,s0
    80011de4:	8cbff06f          	j	800116ae <software_interrupt_ssi+0x2dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011de8:	57fd                	li	a5,-1
    80011dea:	6498                	ld	a4,8(s1)
    80011dec:	17fe                	slli	a5,a5,0x3f
    80011dee:	0785                	addi	a5,a5,1
    80011df0:	f6f71f63          	bne	a4,a5,8001156e <software_interrupt_ssi+0x19c>
    80011df4:	00033417          	auipc	s0,0x33
    80011df8:	22042403          	lw	s0,544(s0) # 80045014 <excpt+0x4>
    80011dfc:	1475                	addi	s0,s0,-3
    80011dfe:	00143413          	seqz	s0,s0
    80011e02:	f6cff06f          	j	8001156e <software_interrupt_ssi+0x19c>
    80011e06:	00033717          	auipc	a4,0x33
    80011e0a:	20e72703          	lw	a4,526(a4) # 80045014 <excpt+0x4>
    80011e0e:	478d                	li	a5,3
    80011e10:	f2f71a63          	bne	a4,a5,80011544 <software_interrupt_ssi+0x172>
    80011e14:	f44ff06f          	j	80011558 <software_interrupt_ssi+0x186>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011e18:	00033717          	auipc	a4,0x33
    80011e1c:	1fc72703          	lw	a4,508(a4) # 80045014 <excpt+0x4>
    80011e20:	4791                	li	a5,4
    80011e22:	e6f71263          	bne	a4,a5,80011486 <software_interrupt_ssi+0xb4>
    80011e26:	e74ff06f          	j	8001149a <software_interrupt_ssi+0xc8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011e2a:	00033717          	auipc	a4,0x33
    80011e2e:	1ea72703          	lw	a4,490(a4) # 80045014 <excpt+0x4>
    80011e32:	4791                	li	a5,4
    80011e34:	aef713e3          	bne	a4,a5,8001191a <software_interrupt_ssi+0x548>
    80011e38:	bcdd                	j	8001192e <software_interrupt_ssi+0x55c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011e3a:	00033717          	auipc	a4,0x33
    80011e3e:	1da72703          	lw	a4,474(a4) # 80045014 <excpt+0x4>
    80011e42:	478d                	li	a5,3
    80011e44:	b8f716e3          	bne	a4,a5,800119d0 <software_interrupt_ssi+0x5fe>
    80011e48:	be71                	j	800119e4 <software_interrupt_ssi+0x612>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011e4a:	00033717          	auipc	a4,0x33
    80011e4e:	1ca72703          	lw	a4,458(a4) # 80045014 <excpt+0x4>
    80011e52:	478d                	li	a5,3
    80011e54:	d6f719e3          	bne	a4,a5,80011bc6 <software_interrupt_ssi+0x7f4>
    80011e58:	b349                	j	80011bda <software_interrupt_ssi+0x808>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011e5a:	00033717          	auipc	a4,0x33
    80011e5e:	1ba72703          	lw	a4,442(a4) # 80045014 <excpt+0x4>
    80011e62:	4791                	li	a5,4
    80011e64:	82f710e3          	bne	a4,a5,80011684 <software_interrupt_ssi+0x2b2>
    80011e68:	831ff06f          	j	80011698 <software_interrupt_ssi+0x2c6>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011e6c:	00033717          	auipc	a4,0x33
    80011e70:	1a872703          	lw	a4,424(a4) # 80045014 <excpt+0x4>
    80011e74:	478d                	li	a5,3
    80011e76:	8cf712e3          	bne	a4,a5,8001173a <software_interrupt_ssi+0x368>
    80011e7a:	8d5ff06f          	j	8001174e <software_interrupt_ssi+0x37c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011e7e:	00033717          	auipc	a4,0x33
    80011e82:	19672703          	lw	a4,406(a4) # 80045014 <excpt+0x4>
    80011e86:	4791                	li	a5,4
    80011e88:	c8f714e3          	bne	a4,a5,80011b10 <software_interrupt_ssi+0x73e>
    80011e8c:	b961                	j	80011b24 <software_interrupt_ssi+0x752>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80011e8e:	00011517          	auipc	a0,0x11
    80011e92:	cfa50513          	addi	a0,a0,-774 # 80022b88 <__func__.2+0x320>
    80011e96:	5db0e0ef          	jal	80020c70 <printf>
    80011e9a:	02900513          	li	a0,41
    80011e9e:	4620e0ef          	jal	80020300 <putchar>
    80011ea2:	bec1                	j	80011a72 <software_interrupt_ssi+0x6a0>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80011ea4:	00011517          	auipc	a0,0x11
    80011ea8:	ce450513          	addi	a0,a0,-796 # 80022b88 <__func__.2+0x320>
    80011eac:	5c50e0ef          	jal	80020c70 <printf>
    80011eb0:	02900513          	li	a0,41
    80011eb4:	44c0e0ef          	jal	80020300 <putchar>
    80011eb8:	f2eff06f          	j	800115e6 <software_interrupt_ssi+0x214>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80011ebc:	00011517          	auipc	a0,0x11
    80011ec0:	ccc50513          	addi	a0,a0,-820 # 80022b88 <__func__.2+0x320>
    80011ec4:	5ad0e0ef          	jal	80020c70 <printf>
    80011ec8:	02900513          	li	a0,41
    80011ecc:	4340e0ef          	jal	80020300 <putchar>
    80011ed0:	ba61                	j	80011868 <software_interrupt_ssi+0x496>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80011ed2:	00011517          	auipc	a0,0x11
    80011ed6:	cb650513          	addi	a0,a0,-842 # 80022b88 <__func__.2+0x320>
    80011eda:	5970e0ef          	jal	80020c70 <printf>
    80011ede:	02900513          	li	a0,41
    80011ee2:	41e0e0ef          	jal	80020300 <putchar>
    80011ee6:	b8dd                	j	800117dc <software_interrupt_ssi+0x40a>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80011ee8:	00011517          	auipc	a0,0x11
    80011eec:	ca050513          	addi	a0,a0,-864 # 80022b88 <__func__.2+0x320>
    80011ef0:	5810e0ef          	jal	80020c70 <printf>
    80011ef4:	02900513          	li	a0,41
    80011ef8:	4080e0ef          	jal	80020300 <putchar>
    80011efc:	bbe5                	j	80011cf4 <software_interrupt_ssi+0x922>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80011efe:	00011517          	auipc	a0,0x11
    80011f02:	c8a50513          	addi	a0,a0,-886 # 80022b88 <__func__.2+0x320>
    80011f06:	56b0e0ef          	jal	80020c70 <printf>
    80011f0a:	02900513          	li	a0,41
    80011f0e:	3f20e0ef          	jal	80020300 <putchar>
    80011f12:	bb99                	j	80011c68 <software_interrupt_ssi+0x896>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011f14:	00033717          	auipc	a4,0x33
    80011f18:	10072703          	lw	a4,256(a4) # 80045014 <excpt+0x4>
    80011f1c:	4791                	li	a5,4
    80011f1e:	00011597          	auipc	a1,0x11
    80011f22:	c1258593          	addi	a1,a1,-1006 # 80022b30 <__func__.2+0x2c8>
    80011f26:	bcf704e3          	beq	a4,a5,80011aee <software_interrupt_ssi+0x71c>
    80011f2a:	00011597          	auipc	a1,0x11
    80011f2e:	c1658593          	addi	a1,a1,-1002 # 80022b40 <__func__.2+0x2d8>
    80011f32:	be75                	j	80011aee <software_interrupt_ssi+0x71c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011f34:	00033417          	auipc	s0,0x33
    80011f38:	0e042403          	lw	s0,224(s0) # 80045014 <excpt+0x4>
    80011f3c:	1471                	addi	s0,s0,-4
    80011f3e:	00143413          	seqz	s0,s0
    80011f42:	d76ff06f          	j	800114b8 <software_interrupt_ssi+0xe6>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011f46:	00033717          	auipc	a4,0x33
    80011f4a:	0ce72703          	lw	a4,206(a4) # 80045014 <excpt+0x4>
    80011f4e:	478d                	li	a5,3
    80011f50:	00011597          	auipc	a1,0x11
    80011f54:	be058593          	addi	a1,a1,-1056 # 80022b30 <__func__.2+0x2c8>
    80011f58:	dcf70563          	beq	a4,a5,80011522 <software_interrupt_ssi+0x150>
    80011f5c:	00011597          	auipc	a1,0x11
    80011f60:	be458593          	addi	a1,a1,-1052 # 80022b40 <__func__.2+0x2d8>
    80011f64:	dbeff06f          	j	80011522 <software_interrupt_ssi+0x150>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80011f68:	00033717          	auipc	a4,0x33
    80011f6c:	0ac72703          	lw	a4,172(a4) # 80045014 <excpt+0x4>
    80011f70:	4791                	li	a5,4
    80011f72:	00011597          	auipc	a1,0x11
    80011f76:	bbe58593          	addi	a1,a1,-1090 # 80022b30 <__func__.2+0x2c8>
    80011f7a:	eef70463          	beq	a4,a5,80011662 <software_interrupt_ssi+0x290>
    80011f7e:	00011597          	auipc	a1,0x11
    80011f82:	bc258593          	addi	a1,a1,-1086 # 80022b40 <__func__.2+0x2d8>
    80011f86:	edcff06f          	j	80011662 <software_interrupt_ssi+0x290>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011f8a:	00033717          	auipc	a4,0x33
    80011f8e:	08a72703          	lw	a4,138(a4) # 80045014 <excpt+0x4>
    80011f92:	478d                	li	a5,3
    80011f94:	00011597          	auipc	a1,0x11
    80011f98:	b9c58593          	addi	a1,a1,-1124 # 80022b30 <__func__.2+0x2c8>
    80011f9c:	c0f704e3          	beq	a4,a5,80011ba4 <software_interrupt_ssi+0x7d2>
    80011fa0:	00011597          	auipc	a1,0x11
    80011fa4:	ba058593          	addi	a1,a1,-1120 # 80022b40 <__func__.2+0x2d8>
    80011fa8:	bef5                	j	80011ba4 <software_interrupt_ssi+0x7d2>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80011faa:	00033717          	auipc	a4,0x33
    80011fae:	06a72703          	lw	a4,106(a4) # 80045014 <excpt+0x4>
    80011fb2:	478d                	li	a5,3
    80011fb4:	00011597          	auipc	a1,0x11
    80011fb8:	b7c58593          	addi	a1,a1,-1156 # 80022b30 <__func__.2+0x2c8>
    80011fbc:	9ef709e3          	beq	a4,a5,800119ae <software_interrupt_ssi+0x5dc>
    80011fc0:	00011597          	auipc	a1,0x11
    80011fc4:	b8058593          	addi	a1,a1,-1152 # 80022b40 <__func__.2+0x2d8>
    80011fc8:	b2dd                	j	800119ae <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011fca:	00033717          	auipc	a4,0x33
    80011fce:	04a72703          	lw	a4,74(a4) # 80045014 <excpt+0x4>
    80011fd2:	4791                	li	a5,4
    80011fd4:	00011597          	auipc	a1,0x11
    80011fd8:	b5c58593          	addi	a1,a1,-1188 # 80022b30 <__func__.2+0x2c8>
    80011fdc:	c8f70463          	beq	a4,a5,80011464 <software_interrupt_ssi+0x92>
    80011fe0:	00011597          	auipc	a1,0x11
    80011fe4:	b6058593          	addi	a1,a1,-1184 # 80022b40 <__func__.2+0x2d8>
    80011fe8:	c7cff06f          	j	80011464 <software_interrupt_ssi+0x92>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80011fec:	00033717          	auipc	a4,0x33
    80011ff0:	02872703          	lw	a4,40(a4) # 80045014 <excpt+0x4>
    80011ff4:	478d                	li	a5,3
    80011ff6:	00011597          	auipc	a1,0x11
    80011ffa:	b3a58593          	addi	a1,a1,-1222 # 80022b30 <__func__.2+0x2c8>
    80011ffe:	f0f70d63          	beq	a4,a5,80011718 <software_interrupt_ssi+0x346>
    80012002:	00011597          	auipc	a1,0x11
    80012006:	b3e58593          	addi	a1,a1,-1218 # 80022b40 <__func__.2+0x2d8>
    8001200a:	f0eff06f          	j	80011718 <software_interrupt_ssi+0x346>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001200e:	00033717          	auipc	a4,0x33
    80012012:	00672703          	lw	a4,6(a4) # 80045014 <excpt+0x4>
    80012016:	4791                	li	a5,4
    80012018:	00011597          	auipc	a1,0x11
    8001201c:	b1858593          	addi	a1,a1,-1256 # 80022b30 <__func__.2+0x2c8>
    80012020:	8cf70ce3          	beq	a4,a5,800118f8 <software_interrupt_ssi+0x526>
    80012024:	00011597          	auipc	a1,0x11
    80012028:	b1c58593          	addi	a1,a1,-1252 # 80022b40 <__func__.2+0x2d8>
    8001202c:	8cdff06f          	j	800118f8 <software_interrupt_ssi+0x526>

0000000080012030 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80012030:	1141                	addi	sp,sp,-16

    TEST_START();
    80012032:	00010597          	auipc	a1,0x10
    80012036:	9ce58593          	addi	a1,a1,-1586 # 80021a00 <__func__.0>
    8001203a:	00011517          	auipc	a0,0x11
    8001203e:	b1650513          	addi	a0,a0,-1258 # 80022b50 <__func__.2+0x2e8>
bool software_interrupt_vssi() {
    80012042:	e406                	sd	ra,8(sp)
    80012044:	e022                	sd	s0,0(sp)
    TEST_START();
    80012046:	42b0e0ef          	jal	80020c70 <printf>
    8001204a:	4529                	li	a0,10
    8001204c:	2b40e0ef          	jal	80020300 <putchar>

    TEST_SETUP_EXCEPT();
    80012050:	0330000f          	fence	rw,rw
    80012054:	00033797          	auipc	a5,0x33
    80012058:	fbc78793          	addi	a5,a5,-68 # 80045010 <excpt>
    8001205c:	4405                	li	s0,1
    8001205e:	0207bc23          	sd	zero,56(a5)
    80012062:	00879023          	sh	s0,0(a5)
    80012066:	0330000f          	fence	rw,rw

    TEST_END();
    8001206a:	00011597          	auipc	a1,0x11
    8001206e:	ac658593          	addi	a1,a1,-1338 # 80022b30 <__func__.2+0x2c8>
    80012072:	00011517          	auipc	a0,0x11
    80012076:	b7650513          	addi	a0,a0,-1162 # 80022be8 <__func__.2+0x380>
    8001207a:	3f70e0ef          	jal	80020c70 <printf>
    8001207e:	4511                	li	a0,4
    80012080:	a59ee0ef          	jal	80000ad8 <goto_priv>
    80012084:	b24ef0ef          	jal	800013a8 <reset_state>


    80012088:	60a2                	ld	ra,8(sp)
    8001208a:	8522                	mv	a0,s0
    8001208c:	6402                	ld	s0,0(sp)
    8001208e:	0141                	addi	sp,sp,16
    80012090:	8082                	ret

0000000080012092 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80012092:	1101                	addi	sp,sp,-32

    TEST_START();
    80012094:	00010597          	auipc	a1,0x10
    80012098:	98458593          	addi	a1,a1,-1660 # 80021a18 <__func__.26>
    8001209c:	00011517          	auipc	a0,0x11
    800120a0:	ab450513          	addi	a0,a0,-1356 # 80022b50 <__func__.2+0x2e8>
bool instruction_page_fault_1(){
    800120a4:	ec06                	sd	ra,24(sp)
    800120a6:	e822                	sd	s0,16(sp)
    800120a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800120aa:	3c70e0ef          	jal	80020c70 <printf>
    800120ae:	4529                	li	a0,10
    800120b0:	2500e0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800120b4:	450d                	li	a0,3
    800120b6:	a23ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800120ba:	d26ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800120be:	f64ee0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800120c2:	4509                	li	a0,2
    800120c4:	a15ee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800120c8:	de8ee0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    800120cc:	450d                	li	a0,3
    800120ce:	a0bee0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800120d2:	4509                	li	a0,2
    800120d4:	925ee0ef          	jal	800009f8 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800120d8:	0330000f          	fence	rw,rw
    800120dc:	00033417          	auipc	s0,0x33
    800120e0:	f3440413          	addi	s0,s0,-204 # 80045010 <excpt>
    800120e4:	4785                	li	a5,1
    800120e6:	00033717          	auipc	a4,0x33
    800120ea:	f6073123          	sd	zero,-158(a4) # 80045048 <excpt+0x38>
    800120ee:	00f41023          	sh	a5,0(s0)
    800120f2:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800120f6:	400197b7          	lui	a5,0x40019
    800120fa:	078a                	slli	a5,a5,0x2
    800120fc:	00000297          	auipc	t0,0x0
    80012100:	00c28293          	addi	t0,t0,12 # 80012108 <instruction_page_fault_1+0x76>
    80012104:	02543c23          	sd	t0,56(s0)
    80012108:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    8001210a:	08200593          	li	a1,130
    8001210e:	00015617          	auipc	a2,0x15
    80012112:	fca60613          	addi	a2,a2,-54 # 800270d8 <__func__.2+0x4870>
    80012116:	00011517          	auipc	a0,0x11
    8001211a:	a5250513          	addi	a0,a0,-1454 # 80022b68 <__func__.2+0x300>
    8001211e:	3530e0ef          	jal	80020c70 <printf>
    80012122:	00033797          	auipc	a5,0x33
    80012126:	eef7c783          	lbu	a5,-273(a5) # 80045011 <excpt+0x1>
    8001212a:	00011597          	auipc	a1,0x11
    8001212e:	a1658593          	addi	a1,a1,-1514 # 80022b40 <__func__.2+0x2d8>
    80012132:	cf89                	beqz	a5,8001214c <instruction_page_fault_1+0xba>
    80012134:	6418                	ld	a4,8(s0)
    80012136:	47b1                	li	a5,12
    80012138:	00011597          	auipc	a1,0x11
    8001213c:	9f858593          	addi	a1,a1,-1544 # 80022b30 <__func__.2+0x2c8>
    80012140:	00f70663          	beq	a4,a5,8001214c <instruction_page_fault_1+0xba>
    80012144:	00011597          	auipc	a1,0x11
    80012148:	9fc58593          	addi	a1,a1,-1540 # 80022b40 <__func__.2+0x2d8>
    8001214c:	00011517          	auipc	a0,0x11
    80012150:	a3450513          	addi	a0,a0,-1484 # 80022b80 <__func__.2+0x318>
    80012154:	31d0e0ef          	jal	80020c70 <printf>
    80012158:	00033797          	auipc	a5,0x33
    8001215c:	eb97c783          	lbu	a5,-327(a5) # 80045011 <excpt+0x1>
    80012160:	c789                	beqz	a5,8001216a <instruction_page_fault_1+0xd8>
    80012162:	6418                	ld	a4,8(s0)
    80012164:	47b1                	li	a5,12
    80012166:	00f70c63          	beq	a4,a5,8001217e <instruction_page_fault_1+0xec>
    8001216a:	00011517          	auipc	a0,0x11
    8001216e:	a1e50513          	addi	a0,a0,-1506 # 80022b88 <__func__.2+0x320>
    80012172:	2ff0e0ef          	jal	80020c70 <printf>
    80012176:	02900513          	li	a0,41
    8001217a:	1860e0ef          	jal	80020300 <putchar>
    8001217e:	4529                	li	a0,10
    80012180:	1800e0ef          	jal	80020300 <putchar>
    80012184:	00033797          	auipc	a5,0x33
    80012188:	e8d7c783          	lbu	a5,-371(a5) # 80045011 <excpt+0x1>
    8001218c:	4481                	li	s1,0
    8001218e:	c789                	beqz	a5,80012198 <instruction_page_fault_1+0x106>
    80012190:	6404                	ld	s1,8(s0)
    80012192:	14d1                	addi	s1,s1,-12
    80012194:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80012198:	0330000f          	fence	rw,rw
    8001219c:	4785                	li	a5,1
    8001219e:	00033717          	auipc	a4,0x33
    800121a2:	ea073523          	sd	zero,-342(a4) # 80045048 <excpt+0x38>
    800121a6:	00f41023          	sh	a5,0(s0)
    800121aa:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800121ae:	001007b7          	lui	a5,0x100
    800121b2:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    800121b6:	07b2                	slli	a5,a5,0xc
    800121b8:	00000297          	auipc	t0,0x0
    800121bc:	00c28293          	addi	t0,t0,12 # 800121c4 <instruction_page_fault_1+0x132>
    800121c0:	02543c23          	sd	t0,56(s0)
    800121c4:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    800121c6:	08200593          	li	a1,130
    800121ca:	00015617          	auipc	a2,0x15
    800121ce:	f4660613          	addi	a2,a2,-186 # 80027110 <__func__.2+0x48a8>
    800121d2:	00011517          	auipc	a0,0x11
    800121d6:	99650513          	addi	a0,a0,-1642 # 80022b68 <__func__.2+0x300>
    800121da:	2970e0ef          	jal	80020c70 <printf>
    800121de:	00033797          	auipc	a5,0x33
    800121e2:	e337c783          	lbu	a5,-461(a5) # 80045011 <excpt+0x1>
    800121e6:	00011597          	auipc	a1,0x11
    800121ea:	95a58593          	addi	a1,a1,-1702 # 80022b40 <__func__.2+0x2d8>
    800121ee:	cf89                	beqz	a5,80012208 <instruction_page_fault_1+0x176>
    800121f0:	6418                	ld	a4,8(s0)
    800121f2:	47b1                	li	a5,12
    800121f4:	00011597          	auipc	a1,0x11
    800121f8:	93c58593          	addi	a1,a1,-1732 # 80022b30 <__func__.2+0x2c8>
    800121fc:	00f70663          	beq	a4,a5,80012208 <instruction_page_fault_1+0x176>
    80012200:	00011597          	auipc	a1,0x11
    80012204:	94058593          	addi	a1,a1,-1728 # 80022b40 <__func__.2+0x2d8>
    80012208:	00011517          	auipc	a0,0x11
    8001220c:	97850513          	addi	a0,a0,-1672 # 80022b80 <__func__.2+0x318>
    80012210:	2610e0ef          	jal	80020c70 <printf>
    80012214:	00033797          	auipc	a5,0x33
    80012218:	dfd7c783          	lbu	a5,-515(a5) # 80045011 <excpt+0x1>
    8001221c:	c789                	beqz	a5,80012226 <instruction_page_fault_1+0x194>
    8001221e:	6418                	ld	a4,8(s0)
    80012220:	47b1                	li	a5,12
    80012222:	00f70c63          	beq	a4,a5,8001223a <instruction_page_fault_1+0x1a8>
    80012226:	00011517          	auipc	a0,0x11
    8001222a:	96250513          	addi	a0,a0,-1694 # 80022b88 <__func__.2+0x320>
    8001222e:	2430e0ef          	jal	80020c70 <printf>
    80012232:	02900513          	li	a0,41
    80012236:	0ca0e0ef          	jal	80020300 <putchar>
    8001223a:	4529                	li	a0,10
    8001223c:	0c40e0ef          	jal	80020300 <putchar>
    80012240:	c095                	beqz	s1,80012264 <instruction_page_fault_1+0x1d2>
    80012242:	00033497          	auipc	s1,0x33
    80012246:	dcf4c483          	lbu	s1,-561(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001224a:	00011597          	auipc	a1,0x11
    8001224e:	8f658593          	addi	a1,a1,-1802 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80012252:	cc91                	beqz	s1,8001226e <instruction_page_fault_1+0x1dc>
    80012254:	6418                	ld	a4,8(s0)
    80012256:	47b1                	li	a5,12
    TEST_END();
    80012258:	00011597          	auipc	a1,0x11
    8001225c:	8d858593          	addi	a1,a1,-1832 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80012260:	00f70763          	beq	a4,a5,8001226e <instruction_page_fault_1+0x1dc>
    80012264:	4481                	li	s1,0
    TEST_END();
    80012266:	00011597          	auipc	a1,0x11
    8001226a:	8da58593          	addi	a1,a1,-1830 # 80022b40 <__func__.2+0x2d8>
    8001226e:	00011517          	auipc	a0,0x11
    80012272:	97a50513          	addi	a0,a0,-1670 # 80022be8 <__func__.2+0x380>
    80012276:	1fb0e0ef          	jal	80020c70 <printf>
    8001227a:	4511                	li	a0,4
    8001227c:	85dee0ef          	jal	80000ad8 <goto_priv>
    80012280:	928ef0ef          	jal	800013a8 <reset_state>
}
    80012284:	60e2                	ld	ra,24(sp)
    80012286:	6442                	ld	s0,16(sp)
    80012288:	8526                	mv	a0,s1
    8001228a:	64a2                	ld	s1,8(sp)
    8001228c:	6105                	addi	sp,sp,32
    8001228e:	8082                	ret

0000000080012290 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80012290:	1101                	addi	sp,sp,-32

    TEST_START();
    80012292:	0000f597          	auipc	a1,0xf
    80012296:	7a658593          	addi	a1,a1,1958 # 80021a38 <__func__.24>
    8001229a:	00011517          	auipc	a0,0x11
    8001229e:	8b650513          	addi	a0,a0,-1866 # 80022b50 <__func__.2+0x2e8>
bool instruction_page_fault_2(){
    800122a2:	ec06                	sd	ra,24(sp)
    800122a4:	e822                	sd	s0,16(sp)
    800122a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800122a8:	1c90e0ef          	jal	80020c70 <printf>
    800122ac:	4529                	li	a0,10
    800122ae:	0520e0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800122b2:	450d                	li	a0,3
    800122b4:	825ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800122b8:	b28ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800122bc:	d66ee0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800122c0:	4509                	li	a0,2
    800122c2:	817ee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800122c6:	beaee0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_HS);
    800122ca:	450d                	li	a0,3
    800122cc:	80dee0ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800122d0:	0330000f          	fence	rw,rw
    800122d4:	00033417          	auipc	s0,0x33
    800122d8:	d3c40413          	addi	s0,s0,-708 # 80045010 <excpt>
    800122dc:	4785                	li	a5,1
    800122de:	00033717          	auipc	a4,0x33
    800122e2:	d6073523          	sd	zero,-662(a4) # 80045048 <excpt+0x38>
    800122e6:	00f41023          	sh	a5,0(s0)
    800122ea:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    800122ee:	000807b7          	lui	a5,0x80
    800122f2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800122f4:	07b6                	slli	a5,a5,0xd
    800122f6:	00000297          	auipc	t0,0x0
    800122fa:	00c28293          	addi	t0,t0,12 # 80012302 <instruction_page_fault_2+0x72>
    800122fe:	02543c23          	sd	t0,56(s0)
    80012302:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80012304:	08200593          	li	a1,130
    80012308:	00015617          	auipc	a2,0x15
    8001230c:	e4060613          	addi	a2,a2,-448 # 80027148 <__func__.2+0x48e0>
    80012310:	00011517          	auipc	a0,0x11
    80012314:	85850513          	addi	a0,a0,-1960 # 80022b68 <__func__.2+0x300>
    80012318:	1590e0ef          	jal	80020c70 <printf>
    8001231c:	00033797          	auipc	a5,0x33
    80012320:	cf57c783          	lbu	a5,-779(a5) # 80045011 <excpt+0x1>
    80012324:	00011597          	auipc	a1,0x11
    80012328:	81c58593          	addi	a1,a1,-2020 # 80022b40 <__func__.2+0x2d8>
    8001232c:	cf89                	beqz	a5,80012346 <instruction_page_fault_2+0xb6>
    8001232e:	6418                	ld	a4,8(s0)
    80012330:	47b1                	li	a5,12
    80012332:	00010597          	auipc	a1,0x10
    80012336:	7fe58593          	addi	a1,a1,2046 # 80022b30 <__func__.2+0x2c8>
    8001233a:	00f70663          	beq	a4,a5,80012346 <instruction_page_fault_2+0xb6>
    8001233e:	00011597          	auipc	a1,0x11
    80012342:	80258593          	addi	a1,a1,-2046 # 80022b40 <__func__.2+0x2d8>
    80012346:	00011517          	auipc	a0,0x11
    8001234a:	83a50513          	addi	a0,a0,-1990 # 80022b80 <__func__.2+0x318>
    8001234e:	1230e0ef          	jal	80020c70 <printf>
    80012352:	00033797          	auipc	a5,0x33
    80012356:	cbf7c783          	lbu	a5,-833(a5) # 80045011 <excpt+0x1>
    8001235a:	c789                	beqz	a5,80012364 <instruction_page_fault_2+0xd4>
    8001235c:	6418                	ld	a4,8(s0)
    8001235e:	47b1                	li	a5,12
    80012360:	00f70c63          	beq	a4,a5,80012378 <instruction_page_fault_2+0xe8>
    80012364:	00011517          	auipc	a0,0x11
    80012368:	82450513          	addi	a0,a0,-2012 # 80022b88 <__func__.2+0x320>
    8001236c:	1050e0ef          	jal	80020c70 <printf>
    80012370:	02900513          	li	a0,41
    80012374:	78d0d0ef          	jal	80020300 <putchar>
    80012378:	4529                	li	a0,10
    8001237a:	7870d0ef          	jal	80020300 <putchar>
    8001237e:	00033497          	auipc	s1,0x33
    80012382:	c934c483          	lbu	s1,-877(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80012386:	00010597          	auipc	a1,0x10
    8001238a:	7ba58593          	addi	a1,a1,1978 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    8001238e:	cc91                	beqz	s1,800123aa <instruction_page_fault_2+0x11a>
    80012390:	6418                	ld	a4,8(s0)
    80012392:	47b1                	li	a5,12
    TEST_END();
    80012394:	00010597          	auipc	a1,0x10
    80012398:	79c58593          	addi	a1,a1,1948 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    8001239c:	00f70763          	beq	a4,a5,800123aa <instruction_page_fault_2+0x11a>
    800123a0:	4481                	li	s1,0
    TEST_END();
    800123a2:	00010597          	auipc	a1,0x10
    800123a6:	79e58593          	addi	a1,a1,1950 # 80022b40 <__func__.2+0x2d8>
    800123aa:	00011517          	auipc	a0,0x11
    800123ae:	83e50513          	addi	a0,a0,-1986 # 80022be8 <__func__.2+0x380>
    800123b2:	0bf0e0ef          	jal	80020c70 <printf>
    800123b6:	4511                	li	a0,4
    800123b8:	f20ee0ef          	jal	80000ad8 <goto_priv>
    800123bc:	fedee0ef          	jal	800013a8 <reset_state>
}
    800123c0:	60e2                	ld	ra,24(sp)
    800123c2:	6442                	ld	s0,16(sp)
    800123c4:	8526                	mv	a0,s1
    800123c6:	64a2                	ld	s1,8(sp)
    800123c8:	6105                	addi	sp,sp,32
    800123ca:	8082                	ret

00000000800123cc <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    800123cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800123ce:	0000f597          	auipc	a1,0xf
    800123d2:	68a58593          	addi	a1,a1,1674 # 80021a58 <__func__.23>
    800123d6:	00010517          	auipc	a0,0x10
    800123da:	77a50513          	addi	a0,a0,1914 # 80022b50 <__func__.2+0x2e8>
bool instruction_page_fault_3(){
    800123de:	ec06                	sd	ra,24(sp)
    800123e0:	e822                	sd	s0,16(sp)
    800123e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800123e4:	08d0e0ef          	jal	80020c70 <printf>
    800123e8:	4529                	li	a0,10
    800123ea:	7170d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800123ee:	450d                	li	a0,3
    800123f0:	ee8ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800123f4:	9ecee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800123f8:	c2aee0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800123fc:	4509                	li	a0,2
    800123fe:	edaee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80012402:	aaeee0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80012406:	4509                	li	a0,2
    80012408:	ed0ee0ef          	jal	80000ad8 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    8001240c:	0330000f          	fence	rw,rw
    80012410:	00033417          	auipc	s0,0x33
    80012414:	c0040413          	addi	s0,s0,-1024 # 80045010 <excpt>
    80012418:	4785                	li	a5,1
    8001241a:	00033717          	auipc	a4,0x33
    8001241e:	c2073723          	sd	zero,-978(a4) # 80045048 <excpt+0x38>
    80012422:	00f41023          	sh	a5,0(s0)
    80012426:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001242a:	400197b7          	lui	a5,0x40019
    8001242e:	078a                	slli	a5,a5,0x2
    80012430:	00000297          	auipc	t0,0x0
    80012434:	00c28293          	addi	t0,t0,12 # 8001243c <instruction_page_fault_3+0x70>
    80012438:	02543c23          	sd	t0,56(s0)
    8001243c:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    8001243e:	08200593          	li	a1,130
    80012442:	00015617          	auipc	a2,0x15
    80012446:	d3e60613          	addi	a2,a2,-706 # 80027180 <__func__.2+0x4918>
    8001244a:	00010517          	auipc	a0,0x10
    8001244e:	71e50513          	addi	a0,a0,1822 # 80022b68 <__func__.2+0x300>
    80012452:	01f0e0ef          	jal	80020c70 <printf>
    80012456:	00033797          	auipc	a5,0x33
    8001245a:	bbb7c783          	lbu	a5,-1093(a5) # 80045011 <excpt+0x1>
    8001245e:	00010597          	auipc	a1,0x10
    80012462:	6e258593          	addi	a1,a1,1762 # 80022b40 <__func__.2+0x2d8>
    80012466:	cf89                	beqz	a5,80012480 <instruction_page_fault_3+0xb4>
    80012468:	6418                	ld	a4,8(s0)
    8001246a:	47b1                	li	a5,12
    8001246c:	00010597          	auipc	a1,0x10
    80012470:	6c458593          	addi	a1,a1,1732 # 80022b30 <__func__.2+0x2c8>
    80012474:	00f70663          	beq	a4,a5,80012480 <instruction_page_fault_3+0xb4>
    80012478:	00010597          	auipc	a1,0x10
    8001247c:	6c858593          	addi	a1,a1,1736 # 80022b40 <__func__.2+0x2d8>
    80012480:	00010517          	auipc	a0,0x10
    80012484:	70050513          	addi	a0,a0,1792 # 80022b80 <__func__.2+0x318>
    80012488:	7e80e0ef          	jal	80020c70 <printf>
    8001248c:	00033797          	auipc	a5,0x33
    80012490:	b857c783          	lbu	a5,-1147(a5) # 80045011 <excpt+0x1>
    80012494:	c789                	beqz	a5,8001249e <instruction_page_fault_3+0xd2>
    80012496:	6418                	ld	a4,8(s0)
    80012498:	47b1                	li	a5,12
    8001249a:	00f70c63          	beq	a4,a5,800124b2 <instruction_page_fault_3+0xe6>
    8001249e:	00010517          	auipc	a0,0x10
    800124a2:	6ea50513          	addi	a0,a0,1770 # 80022b88 <__func__.2+0x320>
    800124a6:	7ca0e0ef          	jal	80020c70 <printf>
    800124aa:	02900513          	li	a0,41
    800124ae:	6530d0ef          	jal	80020300 <putchar>
    800124b2:	4529                	li	a0,10
    800124b4:	64d0d0ef          	jal	80020300 <putchar>
    800124b8:	00033797          	auipc	a5,0x33
    800124bc:	b597c783          	lbu	a5,-1191(a5) # 80045011 <excpt+0x1>
    800124c0:	4481                	li	s1,0
    800124c2:	c789                	beqz	a5,800124cc <instruction_page_fault_3+0x100>
    800124c4:	6404                	ld	s1,8(s0)
    800124c6:	14d1                	addi	s1,s1,-12
    800124c8:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    800124cc:	0330000f          	fence	rw,rw
    800124d0:	4785                	li	a5,1
    800124d2:	00033717          	auipc	a4,0x33
    800124d6:	b6073b23          	sd	zero,-1162(a4) # 80045048 <excpt+0x38>
    800124da:	00f41023          	sh	a5,0(s0)
    800124de:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800124e2:	001007b7          	lui	a5,0x100
    800124e6:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    800124ea:	07b2                	slli	a5,a5,0xc
    800124ec:	00000297          	auipc	t0,0x0
    800124f0:	00c28293          	addi	t0,t0,12 # 800124f8 <instruction_page_fault_3+0x12c>
    800124f4:	02543c23          	sd	t0,56(s0)
    800124f8:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    800124fa:	08200593          	li	a1,130
    800124fe:	00015617          	auipc	a2,0x15
    80012502:	cba60613          	addi	a2,a2,-838 # 800271b8 <__func__.2+0x4950>
    80012506:	00010517          	auipc	a0,0x10
    8001250a:	66250513          	addi	a0,a0,1634 # 80022b68 <__func__.2+0x300>
    8001250e:	7620e0ef          	jal	80020c70 <printf>
    80012512:	00033797          	auipc	a5,0x33
    80012516:	aff7c783          	lbu	a5,-1281(a5) # 80045011 <excpt+0x1>
    8001251a:	00010597          	auipc	a1,0x10
    8001251e:	62658593          	addi	a1,a1,1574 # 80022b40 <__func__.2+0x2d8>
    80012522:	cf89                	beqz	a5,8001253c <instruction_page_fault_3+0x170>
    80012524:	6418                	ld	a4,8(s0)
    80012526:	47b1                	li	a5,12
    80012528:	00010597          	auipc	a1,0x10
    8001252c:	60858593          	addi	a1,a1,1544 # 80022b30 <__func__.2+0x2c8>
    80012530:	00f70663          	beq	a4,a5,8001253c <instruction_page_fault_3+0x170>
    80012534:	00010597          	auipc	a1,0x10
    80012538:	60c58593          	addi	a1,a1,1548 # 80022b40 <__func__.2+0x2d8>
    8001253c:	00010517          	auipc	a0,0x10
    80012540:	64450513          	addi	a0,a0,1604 # 80022b80 <__func__.2+0x318>
    80012544:	72c0e0ef          	jal	80020c70 <printf>
    80012548:	00033797          	auipc	a5,0x33
    8001254c:	ac97c783          	lbu	a5,-1335(a5) # 80045011 <excpt+0x1>
    80012550:	c789                	beqz	a5,8001255a <instruction_page_fault_3+0x18e>
    80012552:	6418                	ld	a4,8(s0)
    80012554:	47b1                	li	a5,12
    80012556:	00f70c63          	beq	a4,a5,8001256e <instruction_page_fault_3+0x1a2>
    8001255a:	00010517          	auipc	a0,0x10
    8001255e:	62e50513          	addi	a0,a0,1582 # 80022b88 <__func__.2+0x320>
    80012562:	70e0e0ef          	jal	80020c70 <printf>
    80012566:	02900513          	li	a0,41
    8001256a:	5970d0ef          	jal	80020300 <putchar>
    8001256e:	4529                	li	a0,10
    80012570:	5910d0ef          	jal	80020300 <putchar>
    80012574:	c095                	beqz	s1,80012598 <instruction_page_fault_3+0x1cc>
    80012576:	00033497          	auipc	s1,0x33
    8001257a:	a9b4c483          	lbu	s1,-1381(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001257e:	00010597          	auipc	a1,0x10
    80012582:	5c258593          	addi	a1,a1,1474 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80012586:	cc91                	beqz	s1,800125a2 <instruction_page_fault_3+0x1d6>
    80012588:	6418                	ld	a4,8(s0)
    8001258a:	47b1                	li	a5,12
    TEST_END();
    8001258c:	00010597          	auipc	a1,0x10
    80012590:	5a458593          	addi	a1,a1,1444 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80012594:	00f70763          	beq	a4,a5,800125a2 <instruction_page_fault_3+0x1d6>
    80012598:	4481                	li	s1,0
    TEST_END();
    8001259a:	00010597          	auipc	a1,0x10
    8001259e:	5a658593          	addi	a1,a1,1446 # 80022b40 <__func__.2+0x2d8>
    800125a2:	00010517          	auipc	a0,0x10
    800125a6:	64650513          	addi	a0,a0,1606 # 80022be8 <__func__.2+0x380>
    800125aa:	6c60e0ef          	jal	80020c70 <printf>
    800125ae:	4511                	li	a0,4
    800125b0:	d28ee0ef          	jal	80000ad8 <goto_priv>
    800125b4:	df5ee0ef          	jal	800013a8 <reset_state>
}
    800125b8:	60e2                	ld	ra,24(sp)
    800125ba:	6442                	ld	s0,16(sp)
    800125bc:	8526                	mv	a0,s1
    800125be:	64a2                	ld	s1,8(sp)
    800125c0:	6105                	addi	sp,sp,32
    800125c2:	8082                	ret

00000000800125c4 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    800125c4:	1101                	addi	sp,sp,-32

    TEST_START();
    800125c6:	0000f597          	auipc	a1,0xf
    800125ca:	4b258593          	addi	a1,a1,1202 # 80021a78 <__func__.22>
    800125ce:	00010517          	auipc	a0,0x10
    800125d2:	58250513          	addi	a0,a0,1410 # 80022b50 <__func__.2+0x2e8>
bool instruction_page_fault_4(){
    800125d6:	ec06                	sd	ra,24(sp)
    800125d8:	e822                	sd	s0,16(sp)
    800125da:	e426                	sd	s1,8(sp)
    TEST_START();
    800125dc:	6940e0ef          	jal	80020c70 <printf>
    800125e0:	4529                	li	a0,10
    800125e2:	51f0d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800125e6:	450d                	li	a0,3
    800125e8:	cf0ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800125ec:	ff5ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800125f0:	a32ee0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800125f4:	4509                	li	a0,2
    800125f6:	ce2ee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800125fa:	8b6ee0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_VS);
    800125fe:	4509                	li	a0,2
    80012600:	cd8ee0ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012604:	0330000f          	fence	rw,rw
    80012608:	00033417          	auipc	s0,0x33
    8001260c:	a0840413          	addi	s0,s0,-1528 # 80045010 <excpt>
    80012610:	4785                	li	a5,1
    80012612:	00033717          	auipc	a4,0x33
    80012616:	a2073b23          	sd	zero,-1482(a4) # 80045048 <excpt+0x38>
    8001261a:	00f41023          	sh	a5,0(s0)
    8001261e:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80012622:	000807b7          	lui	a5,0x80
    80012626:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012628:	07b6                	slli	a5,a5,0xd
    8001262a:	00000297          	auipc	t0,0x0
    8001262e:	00c28293          	addi	t0,t0,12 # 80012636 <instruction_page_fault_4+0x72>
    80012632:	02543c23          	sd	t0,56(s0)
    80012636:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80012638:	08200593          	li	a1,130
    8001263c:	00015617          	auipc	a2,0x15
    80012640:	bb460613          	addi	a2,a2,-1100 # 800271f0 <__func__.2+0x4988>
    80012644:	00010517          	auipc	a0,0x10
    80012648:	52450513          	addi	a0,a0,1316 # 80022b68 <__func__.2+0x300>
    8001264c:	6240e0ef          	jal	80020c70 <printf>
    80012650:	00033797          	auipc	a5,0x33
    80012654:	9c17c783          	lbu	a5,-1599(a5) # 80045011 <excpt+0x1>
    80012658:	00010597          	auipc	a1,0x10
    8001265c:	4e858593          	addi	a1,a1,1256 # 80022b40 <__func__.2+0x2d8>
    80012660:	cf89                	beqz	a5,8001267a <instruction_page_fault_4+0xb6>
    80012662:	6418                	ld	a4,8(s0)
    80012664:	47b1                	li	a5,12
    80012666:	00010597          	auipc	a1,0x10
    8001266a:	4ca58593          	addi	a1,a1,1226 # 80022b30 <__func__.2+0x2c8>
    8001266e:	00f70663          	beq	a4,a5,8001267a <instruction_page_fault_4+0xb6>
    80012672:	00010597          	auipc	a1,0x10
    80012676:	4ce58593          	addi	a1,a1,1230 # 80022b40 <__func__.2+0x2d8>
    8001267a:	00010517          	auipc	a0,0x10
    8001267e:	50650513          	addi	a0,a0,1286 # 80022b80 <__func__.2+0x318>
    80012682:	5ee0e0ef          	jal	80020c70 <printf>
    80012686:	00033797          	auipc	a5,0x33
    8001268a:	98b7c783          	lbu	a5,-1653(a5) # 80045011 <excpt+0x1>
    8001268e:	c789                	beqz	a5,80012698 <instruction_page_fault_4+0xd4>
    80012690:	6418                	ld	a4,8(s0)
    80012692:	47b1                	li	a5,12
    80012694:	00f70c63          	beq	a4,a5,800126ac <instruction_page_fault_4+0xe8>
    80012698:	00010517          	auipc	a0,0x10
    8001269c:	4f050513          	addi	a0,a0,1264 # 80022b88 <__func__.2+0x320>
    800126a0:	5d00e0ef          	jal	80020c70 <printf>
    800126a4:	02900513          	li	a0,41
    800126a8:	4590d0ef          	jal	80020300 <putchar>
    800126ac:	4529                	li	a0,10
    800126ae:	4530d0ef          	jal	80020300 <putchar>
    800126b2:	00033497          	auipc	s1,0x33
    800126b6:	95f4c483          	lbu	s1,-1697(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    800126ba:	00010597          	auipc	a1,0x10
    800126be:	48658593          	addi	a1,a1,1158 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800126c2:	cc91                	beqz	s1,800126de <instruction_page_fault_4+0x11a>
    800126c4:	6418                	ld	a4,8(s0)
    800126c6:	47b1                	li	a5,12
    TEST_END();
    800126c8:	00010597          	auipc	a1,0x10
    800126cc:	46858593          	addi	a1,a1,1128 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800126d0:	00f70763          	beq	a4,a5,800126de <instruction_page_fault_4+0x11a>
    800126d4:	4481                	li	s1,0
    TEST_END();
    800126d6:	00010597          	auipc	a1,0x10
    800126da:	46a58593          	addi	a1,a1,1130 # 80022b40 <__func__.2+0x2d8>
    800126de:	00010517          	auipc	a0,0x10
    800126e2:	50a50513          	addi	a0,a0,1290 # 80022be8 <__func__.2+0x380>
    800126e6:	58a0e0ef          	jal	80020c70 <printf>
    800126ea:	4511                	li	a0,4
    800126ec:	becee0ef          	jal	80000ad8 <goto_priv>
    800126f0:	cb9ee0ef          	jal	800013a8 <reset_state>
}
    800126f4:	60e2                	ld	ra,24(sp)
    800126f6:	6442                	ld	s0,16(sp)
    800126f8:	8526                	mv	a0,s1
    800126fa:	64a2                	ld	s1,8(sp)
    800126fc:	6105                	addi	sp,sp,32
    800126fe:	8082                	ret

0000000080012700 <load_page_fault_1>:

bool load_page_fault_1(){
    80012700:	1101                	addi	sp,sp,-32

    TEST_START();
    80012702:	0000f597          	auipc	a1,0xf
    80012706:	39658593          	addi	a1,a1,918 # 80021a98 <__func__.21>
    8001270a:	00010517          	auipc	a0,0x10
    8001270e:	44650513          	addi	a0,a0,1094 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_1(){
    80012712:	ec06                	sd	ra,24(sp)
    80012714:	e822                	sd	s0,16(sp)
    80012716:	e426                	sd	s1,8(sp)
    TEST_START();
    80012718:	5580e0ef          	jal	80020c70 <printf>
    8001271c:	4529                	li	a0,10
    8001271e:	3e30d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS); 
    80012722:	450d                	li	a0,3
    80012724:	bb4ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80012728:	eb9ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001272c:	8f6ee0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80012730:	4509                	li	a0,2
    80012732:	ba6ee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80012736:	f7bed0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001273a:	450d                	li	a0,3
    8001273c:	b9cee0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80012740:	4509                	li	a0,2
    80012742:	ab6ee0ef          	jal	800009f8 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012746:	0330000f          	fence	rw,rw
    8001274a:	00033417          	auipc	s0,0x33
    8001274e:	8c640413          	addi	s0,s0,-1850 # 80045010 <excpt>
    80012752:	4785                	li	a5,1
    80012754:	00033717          	auipc	a4,0x33
    80012758:	8e073a23          	sd	zero,-1804(a4) # 80045048 <excpt+0x38>
    8001275c:	00f41023          	sh	a5,0(s0)
    80012760:	0330000f          	fence	rw,rw
    asm volatile(
    80012764:	400197b7          	lui	a5,0x40019
    80012768:	078a                	slli	a5,a5,0x2
    8001276a:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    8001276e:	08200593          	li	a1,130
    80012772:	00015617          	auipc	a2,0x15
    80012776:	ab660613          	addi	a2,a2,-1354 # 80027228 <__func__.2+0x49c0>
    8001277a:	00010517          	auipc	a0,0x10
    8001277e:	3ee50513          	addi	a0,a0,1006 # 80022b68 <__func__.2+0x300>
    80012782:	4ee0e0ef          	jal	80020c70 <printf>
    80012786:	00033797          	auipc	a5,0x33
    8001278a:	88b7c783          	lbu	a5,-1909(a5) # 80045011 <excpt+0x1>
    8001278e:	00010597          	auipc	a1,0x10
    80012792:	3b258593          	addi	a1,a1,946 # 80022b40 <__func__.2+0x2d8>
    80012796:	cf89                	beqz	a5,800127b0 <load_page_fault_1+0xb0>
    80012798:	6418                	ld	a4,8(s0)
    8001279a:	47b5                	li	a5,13
    8001279c:	00010597          	auipc	a1,0x10
    800127a0:	39458593          	addi	a1,a1,916 # 80022b30 <__func__.2+0x2c8>
    800127a4:	00f70663          	beq	a4,a5,800127b0 <load_page_fault_1+0xb0>
    800127a8:	00010597          	auipc	a1,0x10
    800127ac:	39858593          	addi	a1,a1,920 # 80022b40 <__func__.2+0x2d8>
    800127b0:	00010517          	auipc	a0,0x10
    800127b4:	3d050513          	addi	a0,a0,976 # 80022b80 <__func__.2+0x318>
    800127b8:	4b80e0ef          	jal	80020c70 <printf>
    800127bc:	00033797          	auipc	a5,0x33
    800127c0:	8557c783          	lbu	a5,-1963(a5) # 80045011 <excpt+0x1>
    800127c4:	c789                	beqz	a5,800127ce <load_page_fault_1+0xce>
    800127c6:	6418                	ld	a4,8(s0)
    800127c8:	47b5                	li	a5,13
    800127ca:	00f70c63          	beq	a4,a5,800127e2 <load_page_fault_1+0xe2>
    800127ce:	00010517          	auipc	a0,0x10
    800127d2:	3ba50513          	addi	a0,a0,954 # 80022b88 <__func__.2+0x320>
    800127d6:	49a0e0ef          	jal	80020c70 <printf>
    800127da:	02900513          	li	a0,41
    800127de:	3230d0ef          	jal	80020300 <putchar>
    800127e2:	4529                	li	a0,10
    800127e4:	31d0d0ef          	jal	80020300 <putchar>
    800127e8:	00033797          	auipc	a5,0x33
    800127ec:	8297c783          	lbu	a5,-2007(a5) # 80045011 <excpt+0x1>
    800127f0:	4481                	li	s1,0
    800127f2:	c789                	beqz	a5,800127fc <load_page_fault_1+0xfc>
    800127f4:	6404                	ld	s1,8(s0)
    800127f6:	14cd                	addi	s1,s1,-13
    800127f8:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800127fc:	0330000f          	fence	rw,rw
    80012800:	4785                	li	a5,1
    80012802:	00033717          	auipc	a4,0x33
    80012806:	84073323          	sd	zero,-1978(a4) # 80045048 <excpt+0x38>
    8001280a:	00f41023          	sh	a5,0(s0)
    8001280e:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012812:	000807b7          	lui	a5,0x80
    80012816:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001281a:	001007b7          	lui	a5,0x100
    8001281e:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80012822:	07b2                	slli	a5,a5,0xc
    80012824:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012828:	08200593          	li	a1,130
    8001282c:	00015617          	auipc	a2,0x15
    80012830:	a2460613          	addi	a2,a2,-1500 # 80027250 <__func__.2+0x49e8>
    80012834:	00010517          	auipc	a0,0x10
    80012838:	33450513          	addi	a0,a0,820 # 80022b68 <__func__.2+0x300>
    8001283c:	4340e0ef          	jal	80020c70 <printf>
    80012840:	00032797          	auipc	a5,0x32
    80012844:	7d17c783          	lbu	a5,2001(a5) # 80045011 <excpt+0x1>
    80012848:	00010597          	auipc	a1,0x10
    8001284c:	2f858593          	addi	a1,a1,760 # 80022b40 <__func__.2+0x2d8>
    80012850:	cf89                	beqz	a5,8001286a <load_page_fault_1+0x16a>
    80012852:	6418                	ld	a4,8(s0)
    80012854:	47b5                	li	a5,13
    80012856:	00010597          	auipc	a1,0x10
    8001285a:	2da58593          	addi	a1,a1,730 # 80022b30 <__func__.2+0x2c8>
    8001285e:	00f70663          	beq	a4,a5,8001286a <load_page_fault_1+0x16a>
    80012862:	00010597          	auipc	a1,0x10
    80012866:	2de58593          	addi	a1,a1,734 # 80022b40 <__func__.2+0x2d8>
    8001286a:	00010517          	auipc	a0,0x10
    8001286e:	31650513          	addi	a0,a0,790 # 80022b80 <__func__.2+0x318>
    80012872:	3fe0e0ef          	jal	80020c70 <printf>
    80012876:	00032797          	auipc	a5,0x32
    8001287a:	79b7c783          	lbu	a5,1947(a5) # 80045011 <excpt+0x1>
    8001287e:	c789                	beqz	a5,80012888 <load_page_fault_1+0x188>
    80012880:	6418                	ld	a4,8(s0)
    80012882:	47b5                	li	a5,13
    80012884:	00f70c63          	beq	a4,a5,8001289c <load_page_fault_1+0x19c>
    80012888:	00010517          	auipc	a0,0x10
    8001288c:	30050513          	addi	a0,a0,768 # 80022b88 <__func__.2+0x320>
    80012890:	3e00e0ef          	jal	80020c70 <printf>
    80012894:	02900513          	li	a0,41
    80012898:	2690d0ef          	jal	80020300 <putchar>
    8001289c:	4529                	li	a0,10
    8001289e:	2630d0ef          	jal	80020300 <putchar>
    800128a2:	c881                	beqz	s1,800128b2 <load_page_fault_1+0x1b2>
    800128a4:	00032797          	auipc	a5,0x32
    800128a8:	76d7c783          	lbu	a5,1901(a5) # 80045011 <excpt+0x1>
    800128ac:	4481                	li	s1,0
    800128ae:	0e079763          	bnez	a5,8001299c <load_page_fault_1+0x29c>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    800128b2:	450d                	li	a0,3
    800128b4:	a24ee0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    800128b8:	0330000f          	fence	rw,rw
    800128bc:	4785                	li	a5,1
    800128be:	00032717          	auipc	a4,0x32
    800128c2:	78073523          	sd	zero,1930(a4) # 80045048 <excpt+0x38>
    800128c6:	00f41023          	sh	a5,0(s0)
    800128ca:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800128ce:	000807b7          	lui	a5,0x80
    800128d2:	1007a073          	csrs	sstatus,a5
    800128d6:	001007b7          	lui	a5,0x100
    800128da:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800128dc:	07b2                	slli	a5,a5,0xc
    800128de:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800128e2:	08200593          	li	a1,130
    800128e6:	00015617          	auipc	a2,0x15
    800128ea:	9aa60613          	addi	a2,a2,-1622 # 80027290 <__func__.2+0x4a28>
    800128ee:	00010517          	auipc	a0,0x10
    800128f2:	27a50513          	addi	a0,a0,634 # 80022b68 <__func__.2+0x300>
    800128f6:	37a0e0ef          	jal	80020c70 <printf>
    800128fa:	00032797          	auipc	a5,0x32
    800128fe:	7177c783          	lbu	a5,1815(a5) # 80045011 <excpt+0x1>
    80012902:	00010597          	auipc	a1,0x10
    80012906:	23e58593          	addi	a1,a1,574 # 80022b40 <__func__.2+0x2d8>
    8001290a:	cf89                	beqz	a5,80012924 <load_page_fault_1+0x224>
    8001290c:	6418                	ld	a4,8(s0)
    8001290e:	47b5                	li	a5,13
    80012910:	00010597          	auipc	a1,0x10
    80012914:	22058593          	addi	a1,a1,544 # 80022b30 <__func__.2+0x2c8>
    80012918:	00f70663          	beq	a4,a5,80012924 <load_page_fault_1+0x224>
    8001291c:	00010597          	auipc	a1,0x10
    80012920:	22458593          	addi	a1,a1,548 # 80022b40 <__func__.2+0x2d8>
    80012924:	00010517          	auipc	a0,0x10
    80012928:	25c50513          	addi	a0,a0,604 # 80022b80 <__func__.2+0x318>
    8001292c:	3440e0ef          	jal	80020c70 <printf>
    80012930:	00032797          	auipc	a5,0x32
    80012934:	6e17c783          	lbu	a5,1761(a5) # 80045011 <excpt+0x1>
    80012938:	c789                	beqz	a5,80012942 <load_page_fault_1+0x242>
    8001293a:	6418                	ld	a4,8(s0)
    8001293c:	47b5                	li	a5,13
    8001293e:	00f70c63          	beq	a4,a5,80012956 <load_page_fault_1+0x256>
    80012942:	00010517          	auipc	a0,0x10
    80012946:	24650513          	addi	a0,a0,582 # 80022b88 <__func__.2+0x320>
    8001294a:	3260e0ef          	jal	80020c70 <printf>
    8001294e:	02900513          	li	a0,41
    80012952:	1af0d0ef          	jal	80020300 <putchar>
    80012956:	4529                	li	a0,10
    80012958:	1a90d0ef          	jal	80020300 <putchar>
    8001295c:	c491                	beqz	s1,80012968 <load_page_fault_1+0x268>
    8001295e:	00032497          	auipc	s1,0x32
    80012962:	6b34c483          	lbu	s1,1715(s1) # 80045011 <excpt+0x1>
    80012966:	e0a1                	bnez	s1,800129a6 <load_page_fault_1+0x2a6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012968:	000807b7          	lui	a5,0x80
    8001296c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012970:	4481                	li	s1,0

    TEST_END();
    80012972:	00010597          	auipc	a1,0x10
    80012976:	1ce58593          	addi	a1,a1,462 # 80022b40 <__func__.2+0x2d8>
    8001297a:	00010517          	auipc	a0,0x10
    8001297e:	26e50513          	addi	a0,a0,622 # 80022be8 <__func__.2+0x380>
    80012982:	2ee0e0ef          	jal	80020c70 <printf>
    80012986:	4511                	li	a0,4
    80012988:	950ee0ef          	jal	80000ad8 <goto_priv>
    8001298c:	a1dee0ef          	jal	800013a8 <reset_state>

}
    80012990:	60e2                	ld	ra,24(sp)
    80012992:	6442                	ld	s0,16(sp)
    80012994:	8526                	mv	a0,s1
    80012996:	64a2                	ld	s1,8(sp)
    80012998:	6105                	addi	sp,sp,32
    8001299a:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001299c:	6404                	ld	s1,8(s0)
    8001299e:	14cd                	addi	s1,s1,-13
    800129a0:	0014b493          	seqz	s1,s1
    800129a4:	b739                	j	800128b2 <load_page_fault_1+0x1b2>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800129a6:	6418                	ld	a4,8(s0)
    800129a8:	47b5                	li	a5,13
    800129aa:	faf71fe3          	bne	a4,a5,80012968 <load_page_fault_1+0x268>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800129ae:	000807b7          	lui	a5,0x80
    800129b2:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800129b6:	00010597          	auipc	a1,0x10
    800129ba:	17a58593          	addi	a1,a1,378 # 80022b30 <__func__.2+0x2c8>
    800129be:	bf75                	j	8001297a <load_page_fault_1+0x27a>

00000000800129c0 <load_page_fault_2>:

bool load_page_fault_2(){
    800129c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800129c2:	0000f597          	auipc	a1,0xf
    800129c6:	0ee58593          	addi	a1,a1,238 # 80021ab0 <__func__.20>
    800129ca:	00010517          	auipc	a0,0x10
    800129ce:	18650513          	addi	a0,a0,390 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_2(){
    800129d2:	ec06                	sd	ra,24(sp)
    800129d4:	e822                	sd	s0,16(sp)
    800129d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800129d8:	2980e0ef          	jal	80020c70 <printf>
    800129dc:	4529                	li	a0,10
    800129de:	1230d0ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    800129e2:	450d                	li	a0,3
    800129e4:	8f4ee0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800129e8:	bf9ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800129ec:	e37ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800129f0:	4509                	li	a0,2
    800129f2:	8e6ee0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800129f6:	cbbed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800129fa:	4511                	li	a0,4
    800129fc:	8dcee0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80012a00:	000407b7          	lui	a5,0x40
    80012a04:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80012a08:	450d                	li	a0,3
    80012a0a:	8ceee0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80012a0e:	4509                	li	a0,2
    80012a10:	fe9ed0ef          	jal	800009f8 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012a14:	0330000f          	fence	rw,rw
    80012a18:	00032417          	auipc	s0,0x32
    80012a1c:	5f840413          	addi	s0,s0,1528 # 80045010 <excpt>
    80012a20:	4785                	li	a5,1
    80012a22:	00032717          	auipc	a4,0x32
    80012a26:	62073323          	sd	zero,1574(a4) # 80045048 <excpt+0x38>
    80012a2a:	00f41023          	sh	a5,0(s0)
    80012a2e:	0330000f          	fence	rw,rw
    80012a32:	000807b7          	lui	a5,0x80
    80012a36:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012a38:	07b6                	slli	a5,a5,0xd
    80012a3a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80012a3e:	08200593          	li	a1,130
    80012a42:	00015617          	auipc	a2,0x15
    80012a46:	89660613          	addi	a2,a2,-1898 # 800272d8 <__func__.2+0x4a70>
    80012a4a:	00010517          	auipc	a0,0x10
    80012a4e:	11e50513          	addi	a0,a0,286 # 80022b68 <__func__.2+0x300>
    80012a52:	21e0e0ef          	jal	80020c70 <printf>
    80012a56:	00032797          	auipc	a5,0x32
    80012a5a:	5bb7c783          	lbu	a5,1467(a5) # 80045011 <excpt+0x1>
    80012a5e:	00010597          	auipc	a1,0x10
    80012a62:	0e258593          	addi	a1,a1,226 # 80022b40 <__func__.2+0x2d8>
    80012a66:	cf89                	beqz	a5,80012a80 <load_page_fault_2+0xc0>
    80012a68:	6418                	ld	a4,8(s0)
    80012a6a:	47b5                	li	a5,13
    80012a6c:	00010597          	auipc	a1,0x10
    80012a70:	0c458593          	addi	a1,a1,196 # 80022b30 <__func__.2+0x2c8>
    80012a74:	00f70663          	beq	a4,a5,80012a80 <load_page_fault_2+0xc0>
    80012a78:	00010597          	auipc	a1,0x10
    80012a7c:	0c858593          	addi	a1,a1,200 # 80022b40 <__func__.2+0x2d8>
    80012a80:	00010517          	auipc	a0,0x10
    80012a84:	10050513          	addi	a0,a0,256 # 80022b80 <__func__.2+0x318>
    80012a88:	1e80e0ef          	jal	80020c70 <printf>
    80012a8c:	00032797          	auipc	a5,0x32
    80012a90:	5857c783          	lbu	a5,1413(a5) # 80045011 <excpt+0x1>
    80012a94:	c789                	beqz	a5,80012a9e <load_page_fault_2+0xde>
    80012a96:	6418                	ld	a4,8(s0)
    80012a98:	47b5                	li	a5,13
    80012a9a:	00f70c63          	beq	a4,a5,80012ab2 <load_page_fault_2+0xf2>
    80012a9e:	00010517          	auipc	a0,0x10
    80012aa2:	0ea50513          	addi	a0,a0,234 # 80022b88 <__func__.2+0x320>
    80012aa6:	1ca0e0ef          	jal	80020c70 <printf>
    80012aaa:	02900513          	li	a0,41
    80012aae:	0530d0ef          	jal	80020300 <putchar>
    80012ab2:	4529                	li	a0,10
    80012ab4:	04d0d0ef          	jal	80020300 <putchar>
    80012ab8:	00032497          	auipc	s1,0x32
    80012abc:	5594c483          	lbu	s1,1369(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80012ac0:	00010597          	auipc	a1,0x10
    80012ac4:	08058593          	addi	a1,a1,128 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80012ac8:	cc91                	beqz	s1,80012ae4 <load_page_fault_2+0x124>
    80012aca:	6418                	ld	a4,8(s0)
    80012acc:	47b5                	li	a5,13
    TEST_END();
    80012ace:	00010597          	auipc	a1,0x10
    80012ad2:	06258593          	addi	a1,a1,98 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80012ad6:	00f70763          	beq	a4,a5,80012ae4 <load_page_fault_2+0x124>
    80012ada:	4481                	li	s1,0
    TEST_END();
    80012adc:	00010597          	auipc	a1,0x10
    80012ae0:	06458593          	addi	a1,a1,100 # 80022b40 <__func__.2+0x2d8>
    80012ae4:	00010517          	auipc	a0,0x10
    80012ae8:	10450513          	addi	a0,a0,260 # 80022be8 <__func__.2+0x380>
    80012aec:	1840e0ef          	jal	80020c70 <printf>
    80012af0:	4511                	li	a0,4
    80012af2:	fe7ed0ef          	jal	80000ad8 <goto_priv>
    80012af6:	8b3ee0ef          	jal	800013a8 <reset_state>
}
    80012afa:	60e2                	ld	ra,24(sp)
    80012afc:	6442                	ld	s0,16(sp)
    80012afe:	8526                	mv	a0,s1
    80012b00:	64a2                	ld	s1,8(sp)
    80012b02:	6105                	addi	sp,sp,32
    80012b04:	8082                	ret

0000000080012b06 <load_page_fault_3>:

bool load_page_fault_3(){
    80012b06:	1141                	addi	sp,sp,-16

    TEST_START();
    80012b08:	0000f597          	auipc	a1,0xf
    80012b0c:	fc058593          	addi	a1,a1,-64 # 80021ac8 <__func__.19>
    80012b10:	00010517          	auipc	a0,0x10
    80012b14:	04050513          	addi	a0,a0,64 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_3(){
    80012b18:	e406                	sd	ra,8(sp)
    80012b1a:	e022                	sd	s0,0(sp)
    TEST_START();
    80012b1c:	1540e0ef          	jal	80020c70 <printf>
    80012b20:	4529                	li	a0,10
    80012b22:	7de0d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80012b26:	450d                	li	a0,3
    80012b28:	fb1ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80012b2c:	ab5ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012b30:	cf3ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80012b34:	4509                	li	a0,2
    80012b36:	fa3ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80012b3a:	b77ed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80012b3e:	4511                	li	a0,4
    80012b40:	f99ed0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80012b44:	000407b7          	lui	a5,0x40
    80012b48:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80012b4c:	450d                	li	a0,3
    80012b4e:	f8bed0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80012b52:	4509                	li	a0,2
    80012b54:	ea5ed0ef          	jal	800009f8 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80012b58:	0330000f          	fence	rw,rw
    80012b5c:	4785                	li	a5,1
    80012b5e:	00032717          	auipc	a4,0x32
    80012b62:	4e073523          	sd	zero,1258(a4) # 80045048 <excpt+0x38>
    80012b66:	00032717          	auipc	a4,0x32
    80012b6a:	4af71523          	sh	a5,1194(a4) # 80045010 <excpt>
    80012b6e:	0330000f          	fence	rw,rw
    asm volatile(
    80012b72:	000807b7          	lui	a5,0x80
    80012b76:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012b78:	07b6                	slli	a5,a5,0xd
    80012b7a:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80012b7e:	08200593          	li	a1,130
    80012b82:	00014617          	auipc	a2,0x14
    80012b86:	79660613          	addi	a2,a2,1942 # 80027318 <__func__.2+0x4ab0>
    80012b8a:	00010517          	auipc	a0,0x10
    80012b8e:	fde50513          	addi	a0,a0,-34 # 80022b68 <__func__.2+0x300>
    80012b92:	0de0e0ef          	jal	80020c70 <printf>
    80012b96:	00032797          	auipc	a5,0x32
    80012b9a:	47b7c783          	lbu	a5,1147(a5) # 80045011 <excpt+0x1>
    80012b9e:	00010597          	auipc	a1,0x10
    80012ba2:	f9258593          	addi	a1,a1,-110 # 80022b30 <__func__.2+0x2c8>
    80012ba6:	c789                	beqz	a5,80012bb0 <load_page_fault_3+0xaa>
    80012ba8:	00010597          	auipc	a1,0x10
    80012bac:	f9858593          	addi	a1,a1,-104 # 80022b40 <__func__.2+0x2d8>
    80012bb0:	00010517          	auipc	a0,0x10
    80012bb4:	fd050513          	addi	a0,a0,-48 # 80022b80 <__func__.2+0x318>
    80012bb8:	0b80e0ef          	jal	80020c70 <printf>
    80012bbc:	00032797          	auipc	a5,0x32
    80012bc0:	4557c783          	lbu	a5,1109(a5) # 80045011 <excpt+0x1>
    80012bc4:	e7a1                	bnez	a5,80012c0c <load_page_fault_3+0x106>
    80012bc6:	4529                	li	a0,10
    80012bc8:	7380d0ef          	jal	80020300 <putchar>
    80012bcc:	00032797          	auipc	a5,0x32
    80012bd0:	4457c783          	lbu	a5,1093(a5) # 80045011 <excpt+0x1>
    80012bd4:	e795                	bnez	a5,80012c00 <load_page_fault_3+0xfa>
    80012bd6:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012bd8:	00010597          	auipc	a1,0x10
    80012bdc:	f5858593          	addi	a1,a1,-168 # 80022b30 <__func__.2+0x2c8>
    80012be0:	00010517          	auipc	a0,0x10
    80012be4:	00850513          	addi	a0,a0,8 # 80022be8 <__func__.2+0x380>
    80012be8:	0880e0ef          	jal	80020c70 <printf>
    80012bec:	4511                	li	a0,4
    80012bee:	eebed0ef          	jal	80000ad8 <goto_priv>
    80012bf2:	fb6ee0ef          	jal	800013a8 <reset_state>
}
    80012bf6:	60a2                	ld	ra,8(sp)
    80012bf8:	8522                	mv	a0,s0
    80012bfa:	6402                	ld	s0,0(sp)
    80012bfc:	0141                	addi	sp,sp,16
    80012bfe:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80012c00:	4401                	li	s0,0
    TEST_END();
    80012c02:	00010597          	auipc	a1,0x10
    80012c06:	f3e58593          	addi	a1,a1,-194 # 80022b40 <__func__.2+0x2d8>
    80012c0a:	bfd9                	j	80012be0 <load_page_fault_3+0xda>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80012c0c:	00010517          	auipc	a0,0x10
    80012c10:	f7c50513          	addi	a0,a0,-132 # 80022b88 <__func__.2+0x320>
    80012c14:	05c0e0ef          	jal	80020c70 <printf>
    80012c18:	02900513          	li	a0,41
    80012c1c:	6e40d0ef          	jal	80020300 <putchar>
    80012c20:	b75d                	j	80012bc6 <load_page_fault_3+0xc0>

0000000080012c22 <load_page_fault_4>:


bool load_page_fault_4(){
    80012c22:	1101                	addi	sp,sp,-32

    TEST_START();
    80012c24:	0000f597          	auipc	a1,0xf
    80012c28:	ebc58593          	addi	a1,a1,-324 # 80021ae0 <__func__.18>
    80012c2c:	00010517          	auipc	a0,0x10
    80012c30:	f2450513          	addi	a0,a0,-220 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_4(){
    80012c34:	ec06                	sd	ra,24(sp)
    80012c36:	e822                	sd	s0,16(sp)
    80012c38:	e426                	sd	s1,8(sp)
    TEST_START();
    80012c3a:	0360e0ef          	jal	80020c70 <printf>
    80012c3e:	4529                	li	a0,10
    80012c40:	6c00d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS); 
    80012c44:	450d                	li	a0,3
    80012c46:	e93ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80012c4a:	997ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012c4e:	bd5ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80012c52:	4509                	li	a0,2
    80012c54:	e85ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80012c58:	a59ed0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80012c5c:	4509                	li	a0,2
    80012c5e:	e7bed0ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012c62:	0330000f          	fence	rw,rw
    80012c66:	00032417          	auipc	s0,0x32
    80012c6a:	3aa40413          	addi	s0,s0,938 # 80045010 <excpt>
    80012c6e:	4785                	li	a5,1
    80012c70:	00032717          	auipc	a4,0x32
    80012c74:	3c073c23          	sd	zero,984(a4) # 80045048 <excpt+0x38>
    80012c78:	00f41023          	sh	a5,0(s0)
    80012c7c:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80012c80:	400197b7          	lui	a5,0x40019
    80012c84:	078a                	slli	a5,a5,0x2
    80012c86:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    80012c8a:	08200593          	li	a1,130
    80012c8e:	00014617          	auipc	a2,0x14
    80012c92:	6c260613          	addi	a2,a2,1730 # 80027350 <__func__.2+0x4ae8>
    80012c96:	00010517          	auipc	a0,0x10
    80012c9a:	ed250513          	addi	a0,a0,-302 # 80022b68 <__func__.2+0x300>
    80012c9e:	7d30d0ef          	jal	80020c70 <printf>
    80012ca2:	00032797          	auipc	a5,0x32
    80012ca6:	36f7c783          	lbu	a5,879(a5) # 80045011 <excpt+0x1>
    80012caa:	00010597          	auipc	a1,0x10
    80012cae:	e9658593          	addi	a1,a1,-362 # 80022b40 <__func__.2+0x2d8>
    80012cb2:	cf89                	beqz	a5,80012ccc <load_page_fault_4+0xaa>
    80012cb4:	6418                	ld	a4,8(s0)
    80012cb6:	47b5                	li	a5,13
    80012cb8:	00010597          	auipc	a1,0x10
    80012cbc:	e7858593          	addi	a1,a1,-392 # 80022b30 <__func__.2+0x2c8>
    80012cc0:	00f70663          	beq	a4,a5,80012ccc <load_page_fault_4+0xaa>
    80012cc4:	00010597          	auipc	a1,0x10
    80012cc8:	e7c58593          	addi	a1,a1,-388 # 80022b40 <__func__.2+0x2d8>
    80012ccc:	00010517          	auipc	a0,0x10
    80012cd0:	eb450513          	addi	a0,a0,-332 # 80022b80 <__func__.2+0x318>
    80012cd4:	79d0d0ef          	jal	80020c70 <printf>
    80012cd8:	00032797          	auipc	a5,0x32
    80012cdc:	3397c783          	lbu	a5,825(a5) # 80045011 <excpt+0x1>
    80012ce0:	c789                	beqz	a5,80012cea <load_page_fault_4+0xc8>
    80012ce2:	6418                	ld	a4,8(s0)
    80012ce4:	47b5                	li	a5,13
    80012ce6:	00f70c63          	beq	a4,a5,80012cfe <load_page_fault_4+0xdc>
    80012cea:	00010517          	auipc	a0,0x10
    80012cee:	e9e50513          	addi	a0,a0,-354 # 80022b88 <__func__.2+0x320>
    80012cf2:	77f0d0ef          	jal	80020c70 <printf>
    80012cf6:	02900513          	li	a0,41
    80012cfa:	6060d0ef          	jal	80020300 <putchar>
    80012cfe:	4529                	li	a0,10
    80012d00:	6000d0ef          	jal	80020300 <putchar>
    80012d04:	00032797          	auipc	a5,0x32
    80012d08:	30d7c783          	lbu	a5,781(a5) # 80045011 <excpt+0x1>
    80012d0c:	4481                	li	s1,0
    80012d0e:	c789                	beqz	a5,80012d18 <load_page_fault_4+0xf6>
    80012d10:	6404                	ld	s1,8(s0)
    80012d12:	14cd                	addi	s1,s1,-13
    80012d14:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80012d18:	0330000f          	fence	rw,rw
    80012d1c:	4785                	li	a5,1
    80012d1e:	00032717          	auipc	a4,0x32
    80012d22:	32073523          	sd	zero,810(a4) # 80045048 <excpt+0x38>
    80012d26:	00f41023          	sh	a5,0(s0)
    80012d2a:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012d2e:	000807b7          	lui	a5,0x80
    80012d32:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80012d36:	001007b7          	lui	a5,0x100
    80012d3a:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80012d3e:	07b2                	slli	a5,a5,0xc
    80012d40:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012d44:	08200593          	li	a1,130
    80012d48:	00014617          	auipc	a2,0x14
    80012d4c:	63060613          	addi	a2,a2,1584 # 80027378 <__func__.2+0x4b10>
    80012d50:	00010517          	auipc	a0,0x10
    80012d54:	e1850513          	addi	a0,a0,-488 # 80022b68 <__func__.2+0x300>
    80012d58:	7190d0ef          	jal	80020c70 <printf>
    80012d5c:	00032797          	auipc	a5,0x32
    80012d60:	2b57c783          	lbu	a5,693(a5) # 80045011 <excpt+0x1>
    80012d64:	00010597          	auipc	a1,0x10
    80012d68:	ddc58593          	addi	a1,a1,-548 # 80022b40 <__func__.2+0x2d8>
    80012d6c:	cf89                	beqz	a5,80012d86 <load_page_fault_4+0x164>
    80012d6e:	6418                	ld	a4,8(s0)
    80012d70:	47b5                	li	a5,13
    80012d72:	00010597          	auipc	a1,0x10
    80012d76:	dbe58593          	addi	a1,a1,-578 # 80022b30 <__func__.2+0x2c8>
    80012d7a:	00f70663          	beq	a4,a5,80012d86 <load_page_fault_4+0x164>
    80012d7e:	00010597          	auipc	a1,0x10
    80012d82:	dc258593          	addi	a1,a1,-574 # 80022b40 <__func__.2+0x2d8>
    80012d86:	00010517          	auipc	a0,0x10
    80012d8a:	dfa50513          	addi	a0,a0,-518 # 80022b80 <__func__.2+0x318>
    80012d8e:	6e30d0ef          	jal	80020c70 <printf>
    80012d92:	00032797          	auipc	a5,0x32
    80012d96:	27f7c783          	lbu	a5,639(a5) # 80045011 <excpt+0x1>
    80012d9a:	c789                	beqz	a5,80012da4 <load_page_fault_4+0x182>
    80012d9c:	6418                	ld	a4,8(s0)
    80012d9e:	47b5                	li	a5,13
    80012da0:	00f70c63          	beq	a4,a5,80012db8 <load_page_fault_4+0x196>
    80012da4:	00010517          	auipc	a0,0x10
    80012da8:	de450513          	addi	a0,a0,-540 # 80022b88 <__func__.2+0x320>
    80012dac:	6c50d0ef          	jal	80020c70 <printf>
    80012db0:	02900513          	li	a0,41
    80012db4:	54c0d0ef          	jal	80020300 <putchar>
    80012db8:	4529                	li	a0,10
    80012dba:	5460d0ef          	jal	80020300 <putchar>
    80012dbe:	c881                	beqz	s1,80012dce <load_page_fault_4+0x1ac>
    80012dc0:	00032797          	auipc	a5,0x32
    80012dc4:	2517c783          	lbu	a5,593(a5) # 80045011 <excpt+0x1>
    80012dc8:	4481                	li	s1,0
    80012dca:	0e079763          	bnez	a5,80012eb8 <load_page_fault_4+0x296>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80012dce:	4509                	li	a0,2
    80012dd0:	d09ed0ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    80012dd4:	0330000f          	fence	rw,rw
    80012dd8:	4785                	li	a5,1
    80012dda:	00032717          	auipc	a4,0x32
    80012dde:	26073723          	sd	zero,622(a4) # 80045048 <excpt+0x38>
    80012de2:	00f41023          	sh	a5,0(s0)
    80012de6:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80012dea:	000807b7          	lui	a5,0x80
    80012dee:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80012df2:	001007b7          	lui	a5,0x100
    80012df6:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80012df8:	07b2                	slli	a5,a5,0xc
    80012dfa:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012dfe:	08200593          	li	a1,130
    80012e02:	00014617          	auipc	a2,0x14
    80012e06:	5ae60613          	addi	a2,a2,1454 # 800273b0 <__func__.2+0x4b48>
    80012e0a:	00010517          	auipc	a0,0x10
    80012e0e:	d5e50513          	addi	a0,a0,-674 # 80022b68 <__func__.2+0x300>
    80012e12:	65f0d0ef          	jal	80020c70 <printf>
    80012e16:	00032797          	auipc	a5,0x32
    80012e1a:	1fb7c783          	lbu	a5,507(a5) # 80045011 <excpt+0x1>
    80012e1e:	00010597          	auipc	a1,0x10
    80012e22:	d2258593          	addi	a1,a1,-734 # 80022b40 <__func__.2+0x2d8>
    80012e26:	cf89                	beqz	a5,80012e40 <load_page_fault_4+0x21e>
    80012e28:	6418                	ld	a4,8(s0)
    80012e2a:	47b5                	li	a5,13
    80012e2c:	00010597          	auipc	a1,0x10
    80012e30:	d0458593          	addi	a1,a1,-764 # 80022b30 <__func__.2+0x2c8>
    80012e34:	00f70663          	beq	a4,a5,80012e40 <load_page_fault_4+0x21e>
    80012e38:	00010597          	auipc	a1,0x10
    80012e3c:	d0858593          	addi	a1,a1,-760 # 80022b40 <__func__.2+0x2d8>
    80012e40:	00010517          	auipc	a0,0x10
    80012e44:	d4050513          	addi	a0,a0,-704 # 80022b80 <__func__.2+0x318>
    80012e48:	6290d0ef          	jal	80020c70 <printf>
    80012e4c:	00032797          	auipc	a5,0x32
    80012e50:	1c57c783          	lbu	a5,453(a5) # 80045011 <excpt+0x1>
    80012e54:	c789                	beqz	a5,80012e5e <load_page_fault_4+0x23c>
    80012e56:	6418                	ld	a4,8(s0)
    80012e58:	47b5                	li	a5,13
    80012e5a:	00f70c63          	beq	a4,a5,80012e72 <load_page_fault_4+0x250>
    80012e5e:	00010517          	auipc	a0,0x10
    80012e62:	d2a50513          	addi	a0,a0,-726 # 80022b88 <__func__.2+0x320>
    80012e66:	60b0d0ef          	jal	80020c70 <printf>
    80012e6a:	02900513          	li	a0,41
    80012e6e:	4920d0ef          	jal	80020300 <putchar>
    80012e72:	4529                	li	a0,10
    80012e74:	48c0d0ef          	jal	80020300 <putchar>
    80012e78:	c491                	beqz	s1,80012e84 <load_page_fault_4+0x262>
    80012e7a:	00032497          	auipc	s1,0x32
    80012e7e:	1974c483          	lbu	s1,407(s1) # 80045011 <excpt+0x1>
    80012e82:	e0a1                	bnez	s1,80012ec2 <load_page_fault_4+0x2a0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012e84:	000807b7          	lui	a5,0x80
    80012e88:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012e8c:	4481                	li	s1,0

    TEST_END();
    80012e8e:	00010597          	auipc	a1,0x10
    80012e92:	cb258593          	addi	a1,a1,-846 # 80022b40 <__func__.2+0x2d8>
    80012e96:	00010517          	auipc	a0,0x10
    80012e9a:	d5250513          	addi	a0,a0,-686 # 80022be8 <__func__.2+0x380>
    80012e9e:	5d30d0ef          	jal	80020c70 <printf>
    80012ea2:	4511                	li	a0,4
    80012ea4:	c35ed0ef          	jal	80000ad8 <goto_priv>
    80012ea8:	d00ee0ef          	jal	800013a8 <reset_state>

}
    80012eac:	60e2                	ld	ra,24(sp)
    80012eae:	6442                	ld	s0,16(sp)
    80012eb0:	8526                	mv	a0,s1
    80012eb2:	64a2                	ld	s1,8(sp)
    80012eb4:	6105                	addi	sp,sp,32
    80012eb6:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012eb8:	6404                	ld	s1,8(s0)
    80012eba:	14cd                	addi	s1,s1,-13
    80012ebc:	0014b493          	seqz	s1,s1
    80012ec0:	b739                	j	80012dce <load_page_fault_4+0x1ac>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012ec2:	6418                	ld	a4,8(s0)
    80012ec4:	47b5                	li	a5,13
    80012ec6:	faf71fe3          	bne	a4,a5,80012e84 <load_page_fault_4+0x262>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012eca:	000807b7          	lui	a5,0x80
    80012ece:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80012ed2:	00010597          	auipc	a1,0x10
    80012ed6:	c5e58593          	addi	a1,a1,-930 # 80022b30 <__func__.2+0x2c8>
    80012eda:	bf75                	j	80012e96 <load_page_fault_4+0x274>

0000000080012edc <load_page_fault_5>:

bool load_page_fault_5(){
    80012edc:	1101                	addi	sp,sp,-32

    TEST_START();
    80012ede:	0000f597          	auipc	a1,0xf
    80012ee2:	c1a58593          	addi	a1,a1,-998 # 80021af8 <__func__.17>
    80012ee6:	00010517          	auipc	a0,0x10
    80012eea:	c6a50513          	addi	a0,a0,-918 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_5(){
    80012eee:	ec06                	sd	ra,24(sp)
    80012ef0:	e822                	sd	s0,16(sp)
    80012ef2:	e426                	sd	s1,8(sp)
    TEST_START();
    80012ef4:	57d0d0ef          	jal	80020c70 <printf>
    80012ef8:	4529                	li	a0,10
    80012efa:	4060d0ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    80012efe:	450d                	li	a0,3
    80012f00:	bd9ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80012f04:	edced0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012f08:	91bed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80012f0c:	4509                	li	a0,2
    80012f0e:	bcbed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80012f12:	f9eed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80012f16:	4511                	li	a0,4
    80012f18:	bc1ed0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80012f1c:	000407b7          	lui	a5,0x40
    80012f20:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80012f24:	4509                	li	a0,2
    80012f26:	bb3ed0ef          	jal	80000ad8 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012f2a:	0330000f          	fence	rw,rw
    80012f2e:	00032417          	auipc	s0,0x32
    80012f32:	0e240413          	addi	s0,s0,226 # 80045010 <excpt>
    80012f36:	4785                	li	a5,1
    80012f38:	00032717          	auipc	a4,0x32
    80012f3c:	10073823          	sd	zero,272(a4) # 80045048 <excpt+0x38>
    80012f40:	00f41023          	sh	a5,0(s0)
    80012f44:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80012f48:	000807b7          	lui	a5,0x80
    80012f4c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012f4e:	07b6                	slli	a5,a5,0xd
    80012f50:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80012f54:	08200593          	li	a1,130
    80012f58:	00014617          	auipc	a2,0x14
    80012f5c:	4a060613          	addi	a2,a2,1184 # 800273f8 <__func__.2+0x4b90>
    80012f60:	00010517          	auipc	a0,0x10
    80012f64:	c0850513          	addi	a0,a0,-1016 # 80022b68 <__func__.2+0x300>
    80012f68:	5090d0ef          	jal	80020c70 <printf>
    80012f6c:	00032797          	auipc	a5,0x32
    80012f70:	0a57c783          	lbu	a5,165(a5) # 80045011 <excpt+0x1>
    80012f74:	00010597          	auipc	a1,0x10
    80012f78:	bcc58593          	addi	a1,a1,-1076 # 80022b40 <__func__.2+0x2d8>
    80012f7c:	cf89                	beqz	a5,80012f96 <load_page_fault_5+0xba>
    80012f7e:	6418                	ld	a4,8(s0)
    80012f80:	47b5                	li	a5,13
    80012f82:	00010597          	auipc	a1,0x10
    80012f86:	bae58593          	addi	a1,a1,-1106 # 80022b30 <__func__.2+0x2c8>
    80012f8a:	00f70663          	beq	a4,a5,80012f96 <load_page_fault_5+0xba>
    80012f8e:	00010597          	auipc	a1,0x10
    80012f92:	bb258593          	addi	a1,a1,-1102 # 80022b40 <__func__.2+0x2d8>
    80012f96:	00010517          	auipc	a0,0x10
    80012f9a:	bea50513          	addi	a0,a0,-1046 # 80022b80 <__func__.2+0x318>
    80012f9e:	4d30d0ef          	jal	80020c70 <printf>
    80012fa2:	00032797          	auipc	a5,0x32
    80012fa6:	06f7c783          	lbu	a5,111(a5) # 80045011 <excpt+0x1>
    80012faa:	c789                	beqz	a5,80012fb4 <load_page_fault_5+0xd8>
    80012fac:	6418                	ld	a4,8(s0)
    80012fae:	47b5                	li	a5,13
    80012fb0:	00f70c63          	beq	a4,a5,80012fc8 <load_page_fault_5+0xec>
    80012fb4:	00010517          	auipc	a0,0x10
    80012fb8:	bd450513          	addi	a0,a0,-1068 # 80022b88 <__func__.2+0x320>
    80012fbc:	4b50d0ef          	jal	80020c70 <printf>
    80012fc0:	02900513          	li	a0,41
    80012fc4:	33c0d0ef          	jal	80020300 <putchar>
    80012fc8:	4529                	li	a0,10
    80012fca:	3360d0ef          	jal	80020300 <putchar>
    80012fce:	00032497          	auipc	s1,0x32
    80012fd2:	0434c483          	lbu	s1,67(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80012fd6:	00010597          	auipc	a1,0x10
    80012fda:	b6a58593          	addi	a1,a1,-1174 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80012fde:	cc91                	beqz	s1,80012ffa <load_page_fault_5+0x11e>
    80012fe0:	6418                	ld	a4,8(s0)
    80012fe2:	47b5                	li	a5,13
    TEST_END();
    80012fe4:	00010597          	auipc	a1,0x10
    80012fe8:	b4c58593          	addi	a1,a1,-1204 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80012fec:	00f70763          	beq	a4,a5,80012ffa <load_page_fault_5+0x11e>
    80012ff0:	4481                	li	s1,0
    TEST_END();
    80012ff2:	00010597          	auipc	a1,0x10
    80012ff6:	b4e58593          	addi	a1,a1,-1202 # 80022b40 <__func__.2+0x2d8>
    80012ffa:	00010517          	auipc	a0,0x10
    80012ffe:	bee50513          	addi	a0,a0,-1042 # 80022be8 <__func__.2+0x380>
    80013002:	46f0d0ef          	jal	80020c70 <printf>
    80013006:	4511                	li	a0,4
    80013008:	ad1ed0ef          	jal	80000ad8 <goto_priv>
    8001300c:	b9cee0ef          	jal	800013a8 <reset_state>
}
    80013010:	60e2                	ld	ra,24(sp)
    80013012:	6442                	ld	s0,16(sp)
    80013014:	8526                	mv	a0,s1
    80013016:	64a2                	ld	s1,8(sp)
    80013018:	6105                	addi	sp,sp,32
    8001301a:	8082                	ret

000000008001301c <load_page_fault_6>:

bool load_page_fault_6(){
    8001301c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001301e:	0000f597          	auipc	a1,0xf
    80013022:	af258593          	addi	a1,a1,-1294 # 80021b10 <__func__.16>
    80013026:	00010517          	auipc	a0,0x10
    8001302a:	b2a50513          	addi	a0,a0,-1238 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_6(){
    8001302e:	e406                	sd	ra,8(sp)
    80013030:	e022                	sd	s0,0(sp)
    TEST_START();
    80013032:	43f0d0ef          	jal	80020c70 <printf>
    80013036:	4529                	li	a0,10
    80013038:	2c80d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001303c:	450d                	li	a0,3
    8001303e:	a9bed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013042:	d9eed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013046:	fdced0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001304a:	4509                	li	a0,2
    8001304c:	a8ded0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013050:	e60ed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80013054:	4511                	li	a0,4
    80013056:	a83ed0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001305a:	000407b7          	lui	a5,0x40
    8001305e:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80013062:	4509                	li	a0,2
    80013064:	a75ed0ef          	jal	80000ad8 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80013068:	0330000f          	fence	rw,rw
    8001306c:	4785                	li	a5,1
    8001306e:	00032717          	auipc	a4,0x32
    80013072:	fc073d23          	sd	zero,-38(a4) # 80045048 <excpt+0x38>
    80013076:	00032717          	auipc	a4,0x32
    8001307a:	f8f71d23          	sh	a5,-102(a4) # 80045010 <excpt>
    8001307e:	0330000f          	fence	rw,rw
    80013082:	000807b7          	lui	a5,0x80
    80013086:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80013088:	07b6                	slli	a5,a5,0xd
    8001308a:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001308e:	08200593          	li	a1,130
    80013092:	00014617          	auipc	a2,0x14
    80013096:	3a660613          	addi	a2,a2,934 # 80027438 <__func__.2+0x4bd0>
    8001309a:	00010517          	auipc	a0,0x10
    8001309e:	ace50513          	addi	a0,a0,-1330 # 80022b68 <__func__.2+0x300>
    800130a2:	3cf0d0ef          	jal	80020c70 <printf>
    800130a6:	00032797          	auipc	a5,0x32
    800130aa:	f6b7c783          	lbu	a5,-149(a5) # 80045011 <excpt+0x1>
    800130ae:	00010597          	auipc	a1,0x10
    800130b2:	a8258593          	addi	a1,a1,-1406 # 80022b30 <__func__.2+0x2c8>
    800130b6:	c789                	beqz	a5,800130c0 <load_page_fault_6+0xa4>
    800130b8:	00010597          	auipc	a1,0x10
    800130bc:	a8858593          	addi	a1,a1,-1400 # 80022b40 <__func__.2+0x2d8>
    800130c0:	00010517          	auipc	a0,0x10
    800130c4:	ac050513          	addi	a0,a0,-1344 # 80022b80 <__func__.2+0x318>
    800130c8:	3a90d0ef          	jal	80020c70 <printf>
    800130cc:	00032797          	auipc	a5,0x32
    800130d0:	f457c783          	lbu	a5,-187(a5) # 80045011 <excpt+0x1>
    800130d4:	e7a1                	bnez	a5,8001311c <load_page_fault_6+0x100>
    800130d6:	4529                	li	a0,10
    800130d8:	2280d0ef          	jal	80020300 <putchar>
    800130dc:	00032797          	auipc	a5,0x32
    800130e0:	f357c783          	lbu	a5,-203(a5) # 80045011 <excpt+0x1>
    800130e4:	e795                	bnez	a5,80013110 <load_page_fault_6+0xf4>
    800130e6:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800130e8:	00010597          	auipc	a1,0x10
    800130ec:	a4858593          	addi	a1,a1,-1464 # 80022b30 <__func__.2+0x2c8>
    800130f0:	00010517          	auipc	a0,0x10
    800130f4:	af850513          	addi	a0,a0,-1288 # 80022be8 <__func__.2+0x380>
    800130f8:	3790d0ef          	jal	80020c70 <printf>
    800130fc:	4511                	li	a0,4
    800130fe:	9dbed0ef          	jal	80000ad8 <goto_priv>
    80013102:	aa6ee0ef          	jal	800013a8 <reset_state>
}
    80013106:	60a2                	ld	ra,8(sp)
    80013108:	8522                	mv	a0,s0
    8001310a:	6402                	ld	s0,0(sp)
    8001310c:	0141                	addi	sp,sp,16
    8001310e:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80013110:	4401                	li	s0,0
    TEST_END();
    80013112:	00010597          	auipc	a1,0x10
    80013116:	a2e58593          	addi	a1,a1,-1490 # 80022b40 <__func__.2+0x2d8>
    8001311a:	bfd9                	j	800130f0 <load_page_fault_6+0xd4>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001311c:	00010517          	auipc	a0,0x10
    80013120:	a6c50513          	addi	a0,a0,-1428 # 80022b88 <__func__.2+0x320>
    80013124:	34d0d0ef          	jal	80020c70 <printf>
    80013128:	02900513          	li	a0,41
    8001312c:	1d40d0ef          	jal	80020300 <putchar>
    80013130:	b75d                	j	800130d6 <load_page_fault_6+0xba>

0000000080013132 <load_page_fault_7>:


bool load_page_fault_7(){
    80013132:	1101                	addi	sp,sp,-32

    TEST_START();
    80013134:	0000f597          	auipc	a1,0xf
    80013138:	9f458593          	addi	a1,a1,-1548 # 80021b28 <__func__.15>
    8001313c:	00010517          	auipc	a0,0x10
    80013140:	a1450513          	addi	a0,a0,-1516 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_7(){
    80013144:	ec06                	sd	ra,24(sp)
    80013146:	e822                	sd	s0,16(sp)
    80013148:	e426                	sd	s1,8(sp)
    TEST_START();
    8001314a:	3270d0ef          	jal	80020c70 <printf>
    8001314e:	4529                	li	a0,10
    80013150:	1b00d0ef          	jal	80020300 <putchar>


    goto_priv(PRIV_HS);
    80013154:	450d                	li	a0,3
    80013156:	983ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001315a:	c86ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001315e:	ec4ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013162:	4509                	li	a0,2
    80013164:	975ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013168:	d48ed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001316c:	4511                	li	a0,4
    8001316e:	96bed0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80013172:	000407b7          	lui	a5,0x40
    80013176:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001317a:	450d                	li	a0,3
    8001317c:	95ded0ef          	jal	80000ad8 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013180:	0330000f          	fence	rw,rw
    80013184:	00032417          	auipc	s0,0x32
    80013188:	e8c40413          	addi	s0,s0,-372 # 80045010 <excpt>
    8001318c:	4785                	li	a5,1
    8001318e:	00032717          	auipc	a4,0x32
    80013192:	ea073d23          	sd	zero,-326(a4) # 80045048 <excpt+0x38>
    80013196:	00f41023          	sh	a5,0(s0)
    8001319a:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001319e:	000807b7          	lui	a5,0x80
    800131a2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800131a4:	07b6                	slli	a5,a5,0xd
    800131a6:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800131aa:	08200593          	li	a1,130
    800131ae:	00014617          	auipc	a2,0x14
    800131b2:	2c260613          	addi	a2,a2,706 # 80027470 <__func__.2+0x4c08>
    800131b6:	00010517          	auipc	a0,0x10
    800131ba:	9b250513          	addi	a0,a0,-1614 # 80022b68 <__func__.2+0x300>
    800131be:	2b30d0ef          	jal	80020c70 <printf>
    800131c2:	00032797          	auipc	a5,0x32
    800131c6:	e4f7c783          	lbu	a5,-433(a5) # 80045011 <excpt+0x1>
    800131ca:	00010597          	auipc	a1,0x10
    800131ce:	97658593          	addi	a1,a1,-1674 # 80022b40 <__func__.2+0x2d8>
    800131d2:	cf89                	beqz	a5,800131ec <load_page_fault_7+0xba>
    800131d4:	6418                	ld	a4,8(s0)
    800131d6:	47b5                	li	a5,13
    800131d8:	00010597          	auipc	a1,0x10
    800131dc:	95858593          	addi	a1,a1,-1704 # 80022b30 <__func__.2+0x2c8>
    800131e0:	00f70663          	beq	a4,a5,800131ec <load_page_fault_7+0xba>
    800131e4:	00010597          	auipc	a1,0x10
    800131e8:	95c58593          	addi	a1,a1,-1700 # 80022b40 <__func__.2+0x2d8>
    800131ec:	00010517          	auipc	a0,0x10
    800131f0:	99450513          	addi	a0,a0,-1644 # 80022b80 <__func__.2+0x318>
    800131f4:	27d0d0ef          	jal	80020c70 <printf>
    800131f8:	00032797          	auipc	a5,0x32
    800131fc:	e197c783          	lbu	a5,-487(a5) # 80045011 <excpt+0x1>
    80013200:	c789                	beqz	a5,8001320a <load_page_fault_7+0xd8>
    80013202:	6418                	ld	a4,8(s0)
    80013204:	47b5                	li	a5,13
    80013206:	00f70c63          	beq	a4,a5,8001321e <load_page_fault_7+0xec>
    8001320a:	00010517          	auipc	a0,0x10
    8001320e:	97e50513          	addi	a0,a0,-1666 # 80022b88 <__func__.2+0x320>
    80013212:	25f0d0ef          	jal	80020c70 <printf>
    80013216:	02900513          	li	a0,41
    8001321a:	0e60d0ef          	jal	80020300 <putchar>
    8001321e:	4529                	li	a0,10
    80013220:	0e00d0ef          	jal	80020300 <putchar>
    80013224:	00032497          	auipc	s1,0x32
    80013228:	ded4c483          	lbu	s1,-531(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001322c:	00010597          	auipc	a1,0x10
    80013230:	91458593          	addi	a1,a1,-1772 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80013234:	cc91                	beqz	s1,80013250 <load_page_fault_7+0x11e>
    80013236:	6418                	ld	a4,8(s0)
    80013238:	47b5                	li	a5,13
    TEST_END();
    8001323a:	00010597          	auipc	a1,0x10
    8001323e:	8f658593          	addi	a1,a1,-1802 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80013242:	00f70763          	beq	a4,a5,80013250 <load_page_fault_7+0x11e>
    80013246:	4481                	li	s1,0
    TEST_END();
    80013248:	00010597          	auipc	a1,0x10
    8001324c:	8f858593          	addi	a1,a1,-1800 # 80022b40 <__func__.2+0x2d8>
    80013250:	00010517          	auipc	a0,0x10
    80013254:	99850513          	addi	a0,a0,-1640 # 80022be8 <__func__.2+0x380>
    80013258:	2190d0ef          	jal	80020c70 <printf>
    8001325c:	4511                	li	a0,4
    8001325e:	87bed0ef          	jal	80000ad8 <goto_priv>
    80013262:	946ee0ef          	jal	800013a8 <reset_state>
}
    80013266:	60e2                	ld	ra,24(sp)
    80013268:	6442                	ld	s0,16(sp)
    8001326a:	8526                	mv	a0,s1
    8001326c:	64a2                	ld	s1,8(sp)
    8001326e:	6105                	addi	sp,sp,32
    80013270:	8082                	ret

0000000080013272 <load_page_fault_8>:

bool load_page_fault_8(){
    80013272:	1141                	addi	sp,sp,-16

    TEST_START();
    80013274:	0000f597          	auipc	a1,0xf
    80013278:	8cc58593          	addi	a1,a1,-1844 # 80021b40 <__func__.14>
    8001327c:	00010517          	auipc	a0,0x10
    80013280:	8d450513          	addi	a0,a0,-1836 # 80022b50 <__func__.2+0x2e8>
bool load_page_fault_8(){
    80013284:	e406                	sd	ra,8(sp)
    80013286:	e022                	sd	s0,0(sp)
    TEST_START();
    80013288:	1e90d0ef          	jal	80020c70 <printf>
    8001328c:	4529                	li	a0,10
    8001328e:	0720d0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013292:	450d                	li	a0,3
    80013294:	845ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013298:	b48ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001329c:	d86ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800132a0:	4509                	li	a0,2
    800132a2:	837ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800132a6:	c0aed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800132aa:	4511                	li	a0,4
    800132ac:	82ded0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800132b0:	000407b7          	lui	a5,0x40
    800132b4:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    800132b8:	450d                	li	a0,3
    800132ba:	81fed0ef          	jal	80000ad8 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800132be:	0330000f          	fence	rw,rw
    800132c2:	4785                	li	a5,1
    800132c4:	00032717          	auipc	a4,0x32
    800132c8:	d8073223          	sd	zero,-636(a4) # 80045048 <excpt+0x38>
    800132cc:	00032717          	auipc	a4,0x32
    800132d0:	d4f71223          	sh	a5,-700(a4) # 80045010 <excpt>
    800132d4:	0330000f          	fence	rw,rw
    800132d8:	000807b7          	lui	a5,0x80
    800132dc:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800132de:	07b6                	slli	a5,a5,0xd
    800132e0:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    800132e4:	08200593          	li	a1,130
    800132e8:	00014617          	auipc	a2,0x14
    800132ec:	1c060613          	addi	a2,a2,448 # 800274a8 <__func__.2+0x4c40>
    800132f0:	00010517          	auipc	a0,0x10
    800132f4:	87850513          	addi	a0,a0,-1928 # 80022b68 <__func__.2+0x300>
    800132f8:	1790d0ef          	jal	80020c70 <printf>
    800132fc:	00032797          	auipc	a5,0x32
    80013300:	d157c783          	lbu	a5,-747(a5) # 80045011 <excpt+0x1>
    80013304:	00010597          	auipc	a1,0x10
    80013308:	82c58593          	addi	a1,a1,-2004 # 80022b30 <__func__.2+0x2c8>
    8001330c:	c789                	beqz	a5,80013316 <load_page_fault_8+0xa4>
    8001330e:	00010597          	auipc	a1,0x10
    80013312:	83258593          	addi	a1,a1,-1998 # 80022b40 <__func__.2+0x2d8>
    80013316:	00010517          	auipc	a0,0x10
    8001331a:	86a50513          	addi	a0,a0,-1942 # 80022b80 <__func__.2+0x318>
    8001331e:	1530d0ef          	jal	80020c70 <printf>
    80013322:	00032797          	auipc	a5,0x32
    80013326:	cef7c783          	lbu	a5,-785(a5) # 80045011 <excpt+0x1>
    8001332a:	e7a1                	bnez	a5,80013372 <load_page_fault_8+0x100>
    8001332c:	4529                	li	a0,10
    8001332e:	7d30c0ef          	jal	80020300 <putchar>
    80013332:	00032797          	auipc	a5,0x32
    80013336:	cdf7c783          	lbu	a5,-801(a5) # 80045011 <excpt+0x1>
    8001333a:	e795                	bnez	a5,80013366 <load_page_fault_8+0xf4>
    8001333c:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001333e:	0000f597          	auipc	a1,0xf
    80013342:	7f258593          	addi	a1,a1,2034 # 80022b30 <__func__.2+0x2c8>
    80013346:	00010517          	auipc	a0,0x10
    8001334a:	8a250513          	addi	a0,a0,-1886 # 80022be8 <__func__.2+0x380>
    8001334e:	1230d0ef          	jal	80020c70 <printf>
    80013352:	4511                	li	a0,4
    80013354:	f84ed0ef          	jal	80000ad8 <goto_priv>
    80013358:	850ee0ef          	jal	800013a8 <reset_state>
}
    8001335c:	60a2                	ld	ra,8(sp)
    8001335e:	8522                	mv	a0,s0
    80013360:	6402                	ld	s0,0(sp)
    80013362:	0141                	addi	sp,sp,16
    80013364:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80013366:	4401                	li	s0,0
    TEST_END();
    80013368:	0000f597          	auipc	a1,0xf
    8001336c:	7d858593          	addi	a1,a1,2008 # 80022b40 <__func__.2+0x2d8>
    80013370:	bfd9                	j	80013346 <load_page_fault_8+0xd4>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80013372:	00010517          	auipc	a0,0x10
    80013376:	81650513          	addi	a0,a0,-2026 # 80022b88 <__func__.2+0x320>
    8001337a:	0f70d0ef          	jal	80020c70 <printf>
    8001337e:	02900513          	li	a0,41
    80013382:	77f0c0ef          	jal	80020300 <putchar>
    80013386:	b75d                	j	8001332c <load_page_fault_8+0xba>

0000000080013388 <store_page_fault_1>:





bool store_page_fault_1(){
    80013388:	1101                	addi	sp,sp,-32

    TEST_START();
    8001338a:	0000e597          	auipc	a1,0xe
    8001338e:	7ce58593          	addi	a1,a1,1998 # 80021b58 <__func__.13>
    80013392:	0000f517          	auipc	a0,0xf
    80013396:	7be50513          	addi	a0,a0,1982 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_1(){
    8001339a:	ec06                	sd	ra,24(sp)
    8001339c:	e822                	sd	s0,16(sp)
    8001339e:	e426                	sd	s1,8(sp)
    TEST_START();
    800133a0:	0d10d0ef          	jal	80020c70 <printf>
    800133a4:	4529                	li	a0,10
    800133a6:	75b0c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800133aa:	450d                	li	a0,3
    800133ac:	f2ced0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800133b0:	a30ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800133b4:	c6eed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800133b8:	4509                	li	a0,2
    800133ba:	f1eed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800133be:	af2ed0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800133c2:	450d                	li	a0,3
    800133c4:	f14ed0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800133c8:	4509                	li	a0,2
    800133ca:	e2eed0ef          	jal	800009f8 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800133ce:	0330000f          	fence	rw,rw
    800133d2:	00032497          	auipc	s1,0x32
    800133d6:	c3e48493          	addi	s1,s1,-962 # 80045010 <excpt>
    800133da:	4785                	li	a5,1
    800133dc:	00032717          	auipc	a4,0x32
    800133e0:	c6073623          	sd	zero,-916(a4) # 80045048 <excpt+0x38>
    800133e4:	00f49023          	sh	a5,0(s1)
    800133e8:	0330000f          	fence	rw,rw
    asm volatile(
    800133ec:	37ab77b7          	lui	a5,0x37ab7
    800133f0:	078a                	slli	a5,a5,0x2
    800133f2:	40019737          	lui	a4,0x40019
    800133f6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800133fa:	070a                	slli	a4,a4,0x2
    800133fc:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80013400:	08200593          	li	a1,130
    80013404:	00014617          	auipc	a2,0x14
    80013408:	0dc60613          	addi	a2,a2,220 # 800274e0 <__func__.2+0x4c78>
    8001340c:	0000f517          	auipc	a0,0xf
    80013410:	75c50513          	addi	a0,a0,1884 # 80022b68 <__func__.2+0x300>
    80013414:	05d0d0ef          	jal	80020c70 <printf>
    80013418:	00032797          	auipc	a5,0x32
    8001341c:	bf97c783          	lbu	a5,-1031(a5) # 80045011 <excpt+0x1>
    80013420:	0000f597          	auipc	a1,0xf
    80013424:	72058593          	addi	a1,a1,1824 # 80022b40 <__func__.2+0x2d8>
    80013428:	cf89                	beqz	a5,80013442 <store_page_fault_1+0xba>
    8001342a:	6498                	ld	a4,8(s1)
    8001342c:	47bd                	li	a5,15
    8001342e:	0000f597          	auipc	a1,0xf
    80013432:	70258593          	addi	a1,a1,1794 # 80022b30 <__func__.2+0x2c8>
    80013436:	00f70663          	beq	a4,a5,80013442 <store_page_fault_1+0xba>
    8001343a:	0000f597          	auipc	a1,0xf
    8001343e:	70658593          	addi	a1,a1,1798 # 80022b40 <__func__.2+0x2d8>
    80013442:	0000f517          	auipc	a0,0xf
    80013446:	73e50513          	addi	a0,a0,1854 # 80022b80 <__func__.2+0x318>
    8001344a:	0270d0ef          	jal	80020c70 <printf>
    8001344e:	00032797          	auipc	a5,0x32
    80013452:	bc37c783          	lbu	a5,-1085(a5) # 80045011 <excpt+0x1>
    80013456:	c789                	beqz	a5,80013460 <store_page_fault_1+0xd8>
    80013458:	6498                	ld	a4,8(s1)
    8001345a:	47bd                	li	a5,15
    8001345c:	00f70c63          	beq	a4,a5,80013474 <store_page_fault_1+0xec>
    80013460:	0000f517          	auipc	a0,0xf
    80013464:	72850513          	addi	a0,a0,1832 # 80022b88 <__func__.2+0x320>
    80013468:	0090d0ef          	jal	80020c70 <printf>
    8001346c:	02900513          	li	a0,41
    80013470:	6910c0ef          	jal	80020300 <putchar>
    80013474:	4529                	li	a0,10
    80013476:	68b0c0ef          	jal	80020300 <putchar>
    8001347a:	00032797          	auipc	a5,0x32
    8001347e:	b977c783          	lbu	a5,-1129(a5) # 80045011 <excpt+0x1>
    80013482:	4401                	li	s0,0
    80013484:	c789                	beqz	a5,8001348e <store_page_fault_1+0x106>
    80013486:	6480                	ld	s0,8(s1)
    80013488:	1445                	addi	s0,s0,-15
    8001348a:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001348e:	0330000f          	fence	rw,rw
    80013492:	4785                	li	a5,1
    80013494:	00032717          	auipc	a4,0x32
    80013498:	ba073a23          	sd	zero,-1100(a4) # 80045048 <excpt+0x38>
    8001349c:	00f49023          	sh	a5,0(s1)
    800134a0:	0330000f          	fence	rw,rw
    asm volatile(
    800134a4:	37ab77b7          	lui	a5,0x37ab7
    800134a8:	00100737          	lui	a4,0x100
    800134ac:	078a                	slli	a5,a5,0x2
    800134ae:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    800134b2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800134b6:	0732                	slli	a4,a4,0xc
    800134b8:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    800134bc:	08200593          	li	a1,130
    800134c0:	00014617          	auipc	a2,0x14
    800134c4:	04860613          	addi	a2,a2,72 # 80027508 <__func__.2+0x4ca0>
    800134c8:	0000f517          	auipc	a0,0xf
    800134cc:	6a050513          	addi	a0,a0,1696 # 80022b68 <__func__.2+0x300>
    800134d0:	7a00d0ef          	jal	80020c70 <printf>
    800134d4:	00032797          	auipc	a5,0x32
    800134d8:	b3d7c783          	lbu	a5,-1219(a5) # 80045011 <excpt+0x1>
    800134dc:	0000f597          	auipc	a1,0xf
    800134e0:	66458593          	addi	a1,a1,1636 # 80022b40 <__func__.2+0x2d8>
    800134e4:	cf89                	beqz	a5,800134fe <store_page_fault_1+0x176>
    800134e6:	6498                	ld	a4,8(s1)
    800134e8:	47bd                	li	a5,15
    800134ea:	0000f597          	auipc	a1,0xf
    800134ee:	64658593          	addi	a1,a1,1606 # 80022b30 <__func__.2+0x2c8>
    800134f2:	00f70663          	beq	a4,a5,800134fe <store_page_fault_1+0x176>
    800134f6:	0000f597          	auipc	a1,0xf
    800134fa:	64a58593          	addi	a1,a1,1610 # 80022b40 <__func__.2+0x2d8>
    800134fe:	0000f517          	auipc	a0,0xf
    80013502:	68250513          	addi	a0,a0,1666 # 80022b80 <__func__.2+0x318>
    80013506:	76a0d0ef          	jal	80020c70 <printf>
    8001350a:	00032797          	auipc	a5,0x32
    8001350e:	b077c783          	lbu	a5,-1273(a5) # 80045011 <excpt+0x1>
    80013512:	c789                	beqz	a5,8001351c <store_page_fault_1+0x194>
    80013514:	6498                	ld	a4,8(s1)
    80013516:	47bd                	li	a5,15
    80013518:	00f70c63          	beq	a4,a5,80013530 <store_page_fault_1+0x1a8>
    8001351c:	0000f517          	auipc	a0,0xf
    80013520:	66c50513          	addi	a0,a0,1644 # 80022b88 <__func__.2+0x320>
    80013524:	74c0d0ef          	jal	80020c70 <printf>
    80013528:	02900513          	li	a0,41
    8001352c:	5d50c0ef          	jal	80020300 <putchar>
    80013530:	4529                	li	a0,10
    80013532:	5cf0c0ef          	jal	80020300 <putchar>
    80013536:	c419                	beqz	s0,80013544 <store_page_fault_1+0x1bc>
    80013538:	00032797          	auipc	a5,0x32
    8001353c:	ad97c783          	lbu	a5,-1319(a5) # 80045011 <excpt+0x1>
    80013540:	4401                	li	s0,0
    80013542:	e3e1                	bnez	a5,80013602 <store_page_fault_1+0x27a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80013544:	0330000f          	fence	rw,rw
    80013548:	4785                	li	a5,1
    8001354a:	00032717          	auipc	a4,0x32
    8001354e:	ae073f23          	sd	zero,-1282(a4) # 80045048 <excpt+0x38>
    80013552:	00f49023          	sh	a5,0(s1)
    80013556:	0330000f          	fence	rw,rw
    asm volatile(
    8001355a:	37ab77b7          	lui	a5,0x37ab7
    8001355e:	00080737          	lui	a4,0x80
    80013562:	078a                	slli	a5,a5,0x2
    80013564:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80013566:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001356a:	0736                	slli	a4,a4,0xd
    8001356c:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80013570:	08200593          	li	a1,130
    80013574:	00014617          	auipc	a2,0x14
    80013578:	fc460613          	addi	a2,a2,-60 # 80027538 <__func__.2+0x4cd0>
    8001357c:	0000f517          	auipc	a0,0xf
    80013580:	5ec50513          	addi	a0,a0,1516 # 80022b68 <__func__.2+0x300>
    80013584:	6ec0d0ef          	jal	80020c70 <printf>
    80013588:	00032797          	auipc	a5,0x32
    8001358c:	a897c783          	lbu	a5,-1399(a5) # 80045011 <excpt+0x1>
    80013590:	0000f597          	auipc	a1,0xf
    80013594:	5b058593          	addi	a1,a1,1456 # 80022b40 <__func__.2+0x2d8>
    80013598:	e789                	bnez	a5,800135a2 <store_page_fault_1+0x21a>
    8001359a:	0000f597          	auipc	a1,0xf
    8001359e:	59658593          	addi	a1,a1,1430 # 80022b30 <__func__.2+0x2c8>
    800135a2:	0000f517          	auipc	a0,0xf
    800135a6:	5de50513          	addi	a0,a0,1502 # 80022b80 <__func__.2+0x318>
    800135aa:	6c60d0ef          	jal	80020c70 <printf>
    800135ae:	00032797          	auipc	a5,0x32
    800135b2:	a637c783          	lbu	a5,-1437(a5) # 80045011 <excpt+0x1>
    800135b6:	ebb9                	bnez	a5,8001360c <store_page_fault_1+0x284>
    800135b8:	4529                	li	a0,10
    800135ba:	5470c0ef          	jal	80020300 <putchar>
    800135be:	c411                	beqz	s0,800135ca <store_page_fault_1+0x242>
    800135c0:	00032797          	auipc	a5,0x32
    800135c4:	a517c783          	lbu	a5,-1455(a5) # 80045011 <excpt+0x1>
    800135c8:	c79d                	beqz	a5,800135f6 <store_page_fault_1+0x26e>
    800135ca:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800135cc:	0000f597          	auipc	a1,0xf
    800135d0:	57458593          	addi	a1,a1,1396 # 80022b40 <__func__.2+0x2d8>
    800135d4:	0000f517          	auipc	a0,0xf
    800135d8:	61450513          	addi	a0,a0,1556 # 80022be8 <__func__.2+0x380>
    800135dc:	6940d0ef          	jal	80020c70 <printf>
    800135e0:	4511                	li	a0,4
    800135e2:	cf6ed0ef          	jal	80000ad8 <goto_priv>
    800135e6:	dc3ed0ef          	jal	800013a8 <reset_state>
}
    800135ea:	60e2                	ld	ra,24(sp)
    800135ec:	8522                	mv	a0,s0
    800135ee:	6442                	ld	s0,16(sp)
    800135f0:	64a2                	ld	s1,8(sp)
    800135f2:	6105                	addi	sp,sp,32
    800135f4:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    800135f6:	4405                	li	s0,1
    TEST_END();
    800135f8:	0000f597          	auipc	a1,0xf
    800135fc:	53858593          	addi	a1,a1,1336 # 80022b30 <__func__.2+0x2c8>
    80013600:	bfd1                	j	800135d4 <store_page_fault_1+0x24c>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80013602:	6480                	ld	s0,8(s1)
    80013604:	1445                	addi	s0,s0,-15
    80013606:	00143413          	seqz	s0,s0
    8001360a:	bf2d                	j	80013544 <store_page_fault_1+0x1bc>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    8001360c:	0000f517          	auipc	a0,0xf
    80013610:	57c50513          	addi	a0,a0,1404 # 80022b88 <__func__.2+0x320>
    80013614:	65c0d0ef          	jal	80020c70 <printf>
    80013618:	02900513          	li	a0,41
    8001361c:	4e50c0ef          	jal	80020300 <putchar>
    80013620:	bf61                	j	800135b8 <store_page_fault_1+0x230>

0000000080013622 <store_page_fault_2>:

bool store_page_fault_2(){
    80013622:	1101                	addi	sp,sp,-32

    TEST_START();
    80013624:	0000e597          	auipc	a1,0xe
    80013628:	54c58593          	addi	a1,a1,1356 # 80021b70 <__func__.12>
    8001362c:	0000f517          	auipc	a0,0xf
    80013630:	52450513          	addi	a0,a0,1316 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_2(){
    80013634:	ec06                	sd	ra,24(sp)
    80013636:	e822                	sd	s0,16(sp)
    80013638:	e426                	sd	s1,8(sp)
    TEST_START();
    8001363a:	6360d0ef          	jal	80020c70 <printf>
    8001363e:	4529                	li	a0,10
    80013640:	4c10c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013644:	450d                	li	a0,3
    80013646:	c92ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001364a:	f97ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001364e:	9d4ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013652:	4509                	li	a0,2
    80013654:	c84ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013658:	858ed0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001365c:	4511                	li	a0,4
    8001365e:	c7aed0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80013662:	000407b7          	lui	a5,0x40
    80013666:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001366a:	450d                	li	a0,3
    8001366c:	c6ced0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80013670:	4509                	li	a0,2
    80013672:	b86ed0ef          	jal	800009f8 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013676:	0330000f          	fence	rw,rw
    8001367a:	00032417          	auipc	s0,0x32
    8001367e:	99640413          	addi	s0,s0,-1642 # 80045010 <excpt>
    80013682:	4785                	li	a5,1
    80013684:	00032717          	auipc	a4,0x32
    80013688:	9c073223          	sd	zero,-1596(a4) # 80045048 <excpt+0x38>
    8001368c:	00f41023          	sh	a5,0(s0)
    80013690:	0330000f          	fence	rw,rw
    asm volatile(
    80013694:	37ab77b7          	lui	a5,0x37ab7
    80013698:	00080737          	lui	a4,0x80
    8001369c:	078a                	slli	a5,a5,0x2
    8001369e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800136a0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800136a4:	0736                	slli	a4,a4,0xd
    800136a6:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    800136aa:	08200593          	li	a1,130
    800136ae:	00014617          	auipc	a2,0x14
    800136b2:	eb260613          	addi	a2,a2,-334 # 80027560 <__func__.2+0x4cf8>
    800136b6:	0000f517          	auipc	a0,0xf
    800136ba:	4b250513          	addi	a0,a0,1202 # 80022b68 <__func__.2+0x300>
    800136be:	5b20d0ef          	jal	80020c70 <printf>
    800136c2:	00032797          	auipc	a5,0x32
    800136c6:	94f7c783          	lbu	a5,-1713(a5) # 80045011 <excpt+0x1>
    800136ca:	0000f597          	auipc	a1,0xf
    800136ce:	47658593          	addi	a1,a1,1142 # 80022b40 <__func__.2+0x2d8>
    800136d2:	cf89                	beqz	a5,800136ec <store_page_fault_2+0xca>
    800136d4:	6418                	ld	a4,8(s0)
    800136d6:	47bd                	li	a5,15
    800136d8:	0000f597          	auipc	a1,0xf
    800136dc:	45858593          	addi	a1,a1,1112 # 80022b30 <__func__.2+0x2c8>
    800136e0:	00f70663          	beq	a4,a5,800136ec <store_page_fault_2+0xca>
    800136e4:	0000f597          	auipc	a1,0xf
    800136e8:	45c58593          	addi	a1,a1,1116 # 80022b40 <__func__.2+0x2d8>
    800136ec:	0000f517          	auipc	a0,0xf
    800136f0:	49450513          	addi	a0,a0,1172 # 80022b80 <__func__.2+0x318>
    800136f4:	57c0d0ef          	jal	80020c70 <printf>
    800136f8:	00032797          	auipc	a5,0x32
    800136fc:	9197c783          	lbu	a5,-1767(a5) # 80045011 <excpt+0x1>
    80013700:	c789                	beqz	a5,8001370a <store_page_fault_2+0xe8>
    80013702:	6418                	ld	a4,8(s0)
    80013704:	47bd                	li	a5,15
    80013706:	00f70c63          	beq	a4,a5,8001371e <store_page_fault_2+0xfc>
    8001370a:	0000f517          	auipc	a0,0xf
    8001370e:	47e50513          	addi	a0,a0,1150 # 80022b88 <__func__.2+0x320>
    80013712:	55e0d0ef          	jal	80020c70 <printf>
    80013716:	02900513          	li	a0,41
    8001371a:	3e70c0ef          	jal	80020300 <putchar>
    8001371e:	4529                	li	a0,10
    80013720:	3e10c0ef          	jal	80020300 <putchar>
    80013724:	00032497          	auipc	s1,0x32
    80013728:	8ed4c483          	lbu	s1,-1811(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    8001372c:	0000f597          	auipc	a1,0xf
    80013730:	41458593          	addi	a1,a1,1044 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80013734:	cc91                	beqz	s1,80013750 <store_page_fault_2+0x12e>
    80013736:	6418                	ld	a4,8(s0)
    80013738:	47bd                	li	a5,15
    TEST_END();
    8001373a:	0000f597          	auipc	a1,0xf
    8001373e:	3f658593          	addi	a1,a1,1014 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80013742:	00f70763          	beq	a4,a5,80013750 <store_page_fault_2+0x12e>
    80013746:	4481                	li	s1,0
    TEST_END();
    80013748:	0000f597          	auipc	a1,0xf
    8001374c:	3f858593          	addi	a1,a1,1016 # 80022b40 <__func__.2+0x2d8>
    80013750:	0000f517          	auipc	a0,0xf
    80013754:	49850513          	addi	a0,a0,1176 # 80022be8 <__func__.2+0x380>
    80013758:	5180d0ef          	jal	80020c70 <printf>
    8001375c:	4511                	li	a0,4
    8001375e:	b7aed0ef          	jal	80000ad8 <goto_priv>
    80013762:	c47ed0ef          	jal	800013a8 <reset_state>
}
    80013766:	60e2                	ld	ra,24(sp)
    80013768:	6442                	ld	s0,16(sp)
    8001376a:	8526                	mv	a0,s1
    8001376c:	64a2                	ld	s1,8(sp)
    8001376e:	6105                	addi	sp,sp,32
    80013770:	8082                	ret

0000000080013772 <store_page_fault_3>:

bool store_page_fault_3(){
    80013772:	1141                	addi	sp,sp,-16

    TEST_START();
    80013774:	0000e597          	auipc	a1,0xe
    80013778:	41458593          	addi	a1,a1,1044 # 80021b88 <__func__.11>
    8001377c:	0000f517          	auipc	a0,0xf
    80013780:	3d450513          	addi	a0,a0,980 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_3(){
    80013784:	e406                	sd	ra,8(sp)
    80013786:	e022                	sd	s0,0(sp)
    TEST_START();
    80013788:	4e80d0ef          	jal	80020c70 <printf>
    8001378c:	4529                	li	a0,10
    8001378e:	3730c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013792:	450d                	li	a0,3
    80013794:	b44ed0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013798:	e49ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001379c:	886ed0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800137a0:	4509                	li	a0,2
    800137a2:	b36ed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800137a6:	f0bec0ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800137aa:	4511                	li	a0,4
    800137ac:	b2ced0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800137b0:	000407b7          	lui	a5,0x40
    800137b4:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800137b8:	450d                	li	a0,3
    800137ba:	b1eed0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800137be:	4509                	li	a0,2
    800137c0:	a38ed0ef          	jal	800009f8 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800137c4:	0330000f          	fence	rw,rw
    800137c8:	4785                	li	a5,1
    800137ca:	00032717          	auipc	a4,0x32
    800137ce:	86073f23          	sd	zero,-1922(a4) # 80045048 <excpt+0x38>
    800137d2:	00032717          	auipc	a4,0x32
    800137d6:	82f71f23          	sh	a5,-1986(a4) # 80045010 <excpt>
    800137da:	0330000f          	fence	rw,rw
    asm volatile(
    800137de:	37ab77b7          	lui	a5,0x37ab7
    800137e2:	00080737          	lui	a4,0x80
    800137e6:	078a                	slli	a5,a5,0x2
    800137e8:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800137ea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800137ee:	0736                	slli	a4,a4,0xd
    800137f0:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    800137f4:	08200593          	li	a1,130
    800137f8:	00014617          	auipc	a2,0x14
    800137fc:	da860613          	addi	a2,a2,-600 # 800275a0 <__func__.2+0x4d38>
    80013800:	0000f517          	auipc	a0,0xf
    80013804:	36850513          	addi	a0,a0,872 # 80022b68 <__func__.2+0x300>
    80013808:	4680d0ef          	jal	80020c70 <printf>
    8001380c:	00032797          	auipc	a5,0x32
    80013810:	8057c783          	lbu	a5,-2043(a5) # 80045011 <excpt+0x1>
    80013814:	0000f597          	auipc	a1,0xf
    80013818:	31c58593          	addi	a1,a1,796 # 80022b30 <__func__.2+0x2c8>
    8001381c:	c789                	beqz	a5,80013826 <store_page_fault_3+0xb4>
    8001381e:	0000f597          	auipc	a1,0xf
    80013822:	32258593          	addi	a1,a1,802 # 80022b40 <__func__.2+0x2d8>
    80013826:	0000f517          	auipc	a0,0xf
    8001382a:	35a50513          	addi	a0,a0,858 # 80022b80 <__func__.2+0x318>
    8001382e:	4420d0ef          	jal	80020c70 <printf>
    80013832:	00031797          	auipc	a5,0x31
    80013836:	7df7c783          	lbu	a5,2015(a5) # 80045011 <excpt+0x1>
    8001383a:	e7a1                	bnez	a5,80013882 <store_page_fault_3+0x110>
    8001383c:	4529                	li	a0,10
    8001383e:	2c30c0ef          	jal	80020300 <putchar>
    80013842:	00031797          	auipc	a5,0x31
    80013846:	7cf7c783          	lbu	a5,1999(a5) # 80045011 <excpt+0x1>
    8001384a:	e795                	bnez	a5,80013876 <store_page_fault_3+0x104>
    8001384c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001384e:	0000f597          	auipc	a1,0xf
    80013852:	2e258593          	addi	a1,a1,738 # 80022b30 <__func__.2+0x2c8>
    80013856:	0000f517          	auipc	a0,0xf
    8001385a:	39250513          	addi	a0,a0,914 # 80022be8 <__func__.2+0x380>
    8001385e:	4120d0ef          	jal	80020c70 <printf>
    80013862:	4511                	li	a0,4
    80013864:	a74ed0ef          	jal	80000ad8 <goto_priv>
    80013868:	b41ed0ef          	jal	800013a8 <reset_state>
}
    8001386c:	60a2                	ld	ra,8(sp)
    8001386e:	8522                	mv	a0,s0
    80013870:	6402                	ld	s0,0(sp)
    80013872:	0141                	addi	sp,sp,16
    80013874:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80013876:	4401                	li	s0,0
    TEST_END();
    80013878:	0000f597          	auipc	a1,0xf
    8001387c:	2c858593          	addi	a1,a1,712 # 80022b40 <__func__.2+0x2d8>
    80013880:	bfd9                	j	80013856 <store_page_fault_3+0xe4>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80013882:	0000f517          	auipc	a0,0xf
    80013886:	30650513          	addi	a0,a0,774 # 80022b88 <__func__.2+0x320>
    8001388a:	3e60d0ef          	jal	80020c70 <printf>
    8001388e:	02900513          	li	a0,41
    80013892:	26f0c0ef          	jal	80020300 <putchar>
    80013896:	b75d                	j	8001383c <store_page_fault_3+0xca>

0000000080013898 <store_page_fault_4>:


bool store_page_fault_4(){
    80013898:	1101                	addi	sp,sp,-32

    TEST_START();
    8001389a:	0000e597          	auipc	a1,0xe
    8001389e:	30658593          	addi	a1,a1,774 # 80021ba0 <__func__.10>
    800138a2:	0000f517          	auipc	a0,0xf
    800138a6:	2ae50513          	addi	a0,a0,686 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_4(){
    800138aa:	ec06                	sd	ra,24(sp)
    800138ac:	e822                	sd	s0,16(sp)
    800138ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800138b0:	3c00d0ef          	jal	80020c70 <printf>
    800138b4:	4529                	li	a0,10
    800138b6:	24b0c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800138ba:	450d                	li	a0,3
    800138bc:	a1ced0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800138c0:	d21ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800138c4:	f5fec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800138c8:	4509                	li	a0,2
    800138ca:	a0eed0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800138ce:	de3ec0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800138d2:	4509                	li	a0,2
    800138d4:	a04ed0ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800138d8:	0330000f          	fence	rw,rw
    800138dc:	00031497          	auipc	s1,0x31
    800138e0:	73448493          	addi	s1,s1,1844 # 80045010 <excpt>
    800138e4:	4785                	li	a5,1
    800138e6:	00031717          	auipc	a4,0x31
    800138ea:	76073123          	sd	zero,1890(a4) # 80045048 <excpt+0x38>
    800138ee:	00f49023          	sh	a5,0(s1)
    800138f2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800138f6:	37ab77b7          	lui	a5,0x37ab7
    800138fa:	078a                	slli	a5,a5,0x2
    800138fc:	40019737          	lui	a4,0x40019
    80013900:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013904:	070a                	slli	a4,a4,0x2
    80013906:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    8001390a:	08200593          	li	a1,130
    8001390e:	00014617          	auipc	a2,0x14
    80013912:	cca60613          	addi	a2,a2,-822 # 800275d8 <__func__.2+0x4d70>
    80013916:	0000f517          	auipc	a0,0xf
    8001391a:	25250513          	addi	a0,a0,594 # 80022b68 <__func__.2+0x300>
    8001391e:	3520d0ef          	jal	80020c70 <printf>
    80013922:	00031797          	auipc	a5,0x31
    80013926:	6ef7c783          	lbu	a5,1775(a5) # 80045011 <excpt+0x1>
    8001392a:	0000f597          	auipc	a1,0xf
    8001392e:	21658593          	addi	a1,a1,534 # 80022b40 <__func__.2+0x2d8>
    80013932:	cf89                	beqz	a5,8001394c <store_page_fault_4+0xb4>
    80013934:	6498                	ld	a4,8(s1)
    80013936:	47bd                	li	a5,15
    80013938:	0000f597          	auipc	a1,0xf
    8001393c:	1f858593          	addi	a1,a1,504 # 80022b30 <__func__.2+0x2c8>
    80013940:	00f70663          	beq	a4,a5,8001394c <store_page_fault_4+0xb4>
    80013944:	0000f597          	auipc	a1,0xf
    80013948:	1fc58593          	addi	a1,a1,508 # 80022b40 <__func__.2+0x2d8>
    8001394c:	0000f517          	auipc	a0,0xf
    80013950:	23450513          	addi	a0,a0,564 # 80022b80 <__func__.2+0x318>
    80013954:	31c0d0ef          	jal	80020c70 <printf>
    80013958:	00031797          	auipc	a5,0x31
    8001395c:	6b97c783          	lbu	a5,1721(a5) # 80045011 <excpt+0x1>
    80013960:	c789                	beqz	a5,8001396a <store_page_fault_4+0xd2>
    80013962:	6498                	ld	a4,8(s1)
    80013964:	47bd                	li	a5,15
    80013966:	00f70c63          	beq	a4,a5,8001397e <store_page_fault_4+0xe6>
    8001396a:	0000f517          	auipc	a0,0xf
    8001396e:	21e50513          	addi	a0,a0,542 # 80022b88 <__func__.2+0x320>
    80013972:	2fe0d0ef          	jal	80020c70 <printf>
    80013976:	02900513          	li	a0,41
    8001397a:	1870c0ef          	jal	80020300 <putchar>
    8001397e:	4529                	li	a0,10
    80013980:	1810c0ef          	jal	80020300 <putchar>
    80013984:	00031797          	auipc	a5,0x31
    80013988:	68d7c783          	lbu	a5,1677(a5) # 80045011 <excpt+0x1>
    8001398c:	4401                	li	s0,0
    8001398e:	c789                	beqz	a5,80013998 <store_page_fault_4+0x100>
    80013990:	6480                	ld	s0,8(s1)
    80013992:	1445                	addi	s0,s0,-15
    80013994:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80013998:	0330000f          	fence	rw,rw
    8001399c:	4785                	li	a5,1
    8001399e:	00031717          	auipc	a4,0x31
    800139a2:	6a073523          	sd	zero,1706(a4) # 80045048 <excpt+0x38>
    800139a6:	00f49023          	sh	a5,0(s1)
    800139aa:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800139ae:	000807b7          	lui	a5,0x80
    800139b2:	1007b073          	csrc	sstatus,a5
    800139b6:	37ab77b7          	lui	a5,0x37ab7
    800139ba:	00100737          	lui	a4,0x100
    800139be:	078a                	slli	a5,a5,0x2
    800139c0:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    800139c4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800139c8:	0732                	slli	a4,a4,0xc
    800139ca:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800139ce:	08200593          	li	a1,130
    800139d2:	00014617          	auipc	a2,0x14
    800139d6:	c2e60613          	addi	a2,a2,-978 # 80027600 <__func__.2+0x4d98>
    800139da:	0000f517          	auipc	a0,0xf
    800139de:	18e50513          	addi	a0,a0,398 # 80022b68 <__func__.2+0x300>
    800139e2:	28e0d0ef          	jal	80020c70 <printf>
    800139e6:	00031797          	auipc	a5,0x31
    800139ea:	62b7c783          	lbu	a5,1579(a5) # 80045011 <excpt+0x1>
    800139ee:	0000f597          	auipc	a1,0xf
    800139f2:	15258593          	addi	a1,a1,338 # 80022b40 <__func__.2+0x2d8>
    800139f6:	cf89                	beqz	a5,80013a10 <store_page_fault_4+0x178>
    800139f8:	6498                	ld	a4,8(s1)
    800139fa:	47bd                	li	a5,15
    800139fc:	0000f597          	auipc	a1,0xf
    80013a00:	13458593          	addi	a1,a1,308 # 80022b30 <__func__.2+0x2c8>
    80013a04:	00f70663          	beq	a4,a5,80013a10 <store_page_fault_4+0x178>
    80013a08:	0000f597          	auipc	a1,0xf
    80013a0c:	13858593          	addi	a1,a1,312 # 80022b40 <__func__.2+0x2d8>
    80013a10:	0000f517          	auipc	a0,0xf
    80013a14:	17050513          	addi	a0,a0,368 # 80022b80 <__func__.2+0x318>
    80013a18:	2580d0ef          	jal	80020c70 <printf>
    80013a1c:	00031797          	auipc	a5,0x31
    80013a20:	5f57c783          	lbu	a5,1525(a5) # 80045011 <excpt+0x1>
    80013a24:	c789                	beqz	a5,80013a2e <store_page_fault_4+0x196>
    80013a26:	6498                	ld	a4,8(s1)
    80013a28:	47bd                	li	a5,15
    80013a2a:	00f70c63          	beq	a4,a5,80013a42 <store_page_fault_4+0x1aa>
    80013a2e:	0000f517          	auipc	a0,0xf
    80013a32:	15a50513          	addi	a0,a0,346 # 80022b88 <__func__.2+0x320>
    80013a36:	23a0d0ef          	jal	80020c70 <printf>
    80013a3a:	02900513          	li	a0,41
    80013a3e:	0c30c0ef          	jal	80020300 <putchar>
    80013a42:	4529                	li	a0,10
    80013a44:	0bd0c0ef          	jal	80020300 <putchar>
    80013a48:	c419                	beqz	s0,80013a56 <store_page_fault_4+0x1be>
    80013a4a:	00031797          	auipc	a5,0x31
    80013a4e:	5c77c783          	lbu	a5,1479(a5) # 80045011 <excpt+0x1>
    80013a52:	4401                	li	s0,0
    80013a54:	e3e1                	bnez	a5,80013b14 <store_page_fault_4+0x27c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80013a56:	0330000f          	fence	rw,rw
    80013a5a:	4785                	li	a5,1
    80013a5c:	00031717          	auipc	a4,0x31
    80013a60:	5e073623          	sd	zero,1516(a4) # 80045048 <excpt+0x38>
    80013a64:	00f49023          	sh	a5,0(s1)
    80013a68:	0330000f          	fence	rw,rw
    80013a6c:	37ab77b7          	lui	a5,0x37ab7
    80013a70:	00080737          	lui	a4,0x80
    80013a74:	078a                	slli	a5,a5,0x2
    80013a76:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80013a78:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013a7c:	0736                	slli	a4,a4,0xd
    80013a7e:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80013a82:	08200593          	li	a1,130
    80013a86:	00014617          	auipc	a2,0x14
    80013a8a:	ba260613          	addi	a2,a2,-1118 # 80027628 <__func__.2+0x4dc0>
    80013a8e:	0000f517          	auipc	a0,0xf
    80013a92:	0da50513          	addi	a0,a0,218 # 80022b68 <__func__.2+0x300>
    80013a96:	1da0d0ef          	jal	80020c70 <printf>
    80013a9a:	00031797          	auipc	a5,0x31
    80013a9e:	5777c783          	lbu	a5,1399(a5) # 80045011 <excpt+0x1>
    80013aa2:	0000f597          	auipc	a1,0xf
    80013aa6:	09e58593          	addi	a1,a1,158 # 80022b40 <__func__.2+0x2d8>
    80013aaa:	e789                	bnez	a5,80013ab4 <store_page_fault_4+0x21c>
    80013aac:	0000f597          	auipc	a1,0xf
    80013ab0:	08458593          	addi	a1,a1,132 # 80022b30 <__func__.2+0x2c8>
    80013ab4:	0000f517          	auipc	a0,0xf
    80013ab8:	0cc50513          	addi	a0,a0,204 # 80022b80 <__func__.2+0x318>
    80013abc:	1b40d0ef          	jal	80020c70 <printf>
    80013ac0:	00031797          	auipc	a5,0x31
    80013ac4:	5517c783          	lbu	a5,1361(a5) # 80045011 <excpt+0x1>
    80013ac8:	ebb9                	bnez	a5,80013b1e <store_page_fault_4+0x286>
    80013aca:	4529                	li	a0,10
    80013acc:	0350c0ef          	jal	80020300 <putchar>
    80013ad0:	c411                	beqz	s0,80013adc <store_page_fault_4+0x244>
    80013ad2:	00031797          	auipc	a5,0x31
    80013ad6:	53f7c783          	lbu	a5,1343(a5) # 80045011 <excpt+0x1>
    80013ada:	c79d                	beqz	a5,80013b08 <store_page_fault_4+0x270>
    80013adc:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013ade:	0000f597          	auipc	a1,0xf
    80013ae2:	06258593          	addi	a1,a1,98 # 80022b40 <__func__.2+0x2d8>
    80013ae6:	0000f517          	auipc	a0,0xf
    80013aea:	10250513          	addi	a0,a0,258 # 80022be8 <__func__.2+0x380>
    80013aee:	1820d0ef          	jal	80020c70 <printf>
    80013af2:	4511                	li	a0,4
    80013af4:	fe5ec0ef          	jal	80000ad8 <goto_priv>
    80013af8:	8b1ed0ef          	jal	800013a8 <reset_state>
}
    80013afc:	60e2                	ld	ra,24(sp)
    80013afe:	8522                	mv	a0,s0
    80013b00:	6442                	ld	s0,16(sp)
    80013b02:	64a2                	ld	s1,8(sp)
    80013b04:	6105                	addi	sp,sp,32
    80013b06:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80013b08:	4405                	li	s0,1
    TEST_END();
    80013b0a:	0000f597          	auipc	a1,0xf
    80013b0e:	02658593          	addi	a1,a1,38 # 80022b30 <__func__.2+0x2c8>
    80013b12:	bfd1                	j	80013ae6 <store_page_fault_4+0x24e>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80013b14:	6480                	ld	s0,8(s1)
    80013b16:	1445                	addi	s0,s0,-15
    80013b18:	00143413          	seqz	s0,s0
    80013b1c:	bf2d                	j	80013a56 <store_page_fault_4+0x1be>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80013b1e:	0000f517          	auipc	a0,0xf
    80013b22:	06a50513          	addi	a0,a0,106 # 80022b88 <__func__.2+0x320>
    80013b26:	14a0d0ef          	jal	80020c70 <printf>
    80013b2a:	02900513          	li	a0,41
    80013b2e:	7d20c0ef          	jal	80020300 <putchar>
    80013b32:	bf61                	j	80013aca <store_page_fault_4+0x232>

0000000080013b34 <store_page_fault_5>:

bool store_page_fault_5(){
    80013b34:	1101                	addi	sp,sp,-32

    TEST_START();
    80013b36:	0000e597          	auipc	a1,0xe
    80013b3a:	08258593          	addi	a1,a1,130 # 80021bb8 <__func__.9>
    80013b3e:	0000f517          	auipc	a0,0xf
    80013b42:	01250513          	addi	a0,a0,18 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_5(){
    80013b46:	ec06                	sd	ra,24(sp)
    80013b48:	e822                	sd	s0,16(sp)
    80013b4a:	e426                	sd	s1,8(sp)
    TEST_START();
    80013b4c:	1240d0ef          	jal	80020c70 <printf>
    80013b50:	4529                	li	a0,10
    80013b52:	7ae0c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013b56:	450d                	li	a0,3
    80013b58:	f81ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013b5c:	a85ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013b60:	cc3ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013b64:	4509                	li	a0,2
    80013b66:	f73ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013b6a:	b47ec0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80013b6e:	4511                	li	a0,4
    80013b70:	f69ec0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80013b74:	000407b7          	lui	a5,0x40
    80013b78:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80013b7c:	4509                	li	a0,2
    80013b7e:	f5bec0ef          	jal	80000ad8 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013b82:	0330000f          	fence	rw,rw
    80013b86:	00031417          	auipc	s0,0x31
    80013b8a:	48a40413          	addi	s0,s0,1162 # 80045010 <excpt>
    80013b8e:	4785                	li	a5,1
    80013b90:	00031717          	auipc	a4,0x31
    80013b94:	4a073c23          	sd	zero,1208(a4) # 80045048 <excpt+0x38>
    80013b98:	00f41023          	sh	a5,0(s0)
    80013b9c:	0330000f          	fence	rw,rw
    80013ba0:	37ab77b7          	lui	a5,0x37ab7
    80013ba4:	00080737          	lui	a4,0x80
    80013ba8:	078a                	slli	a5,a5,0x2
    80013baa:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80013bac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013bb0:	0736                	slli	a4,a4,0xd
    80013bb2:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80013bb6:	08200593          	li	a1,130
    80013bba:	00014617          	auipc	a2,0x14
    80013bbe:	a9660613          	addi	a2,a2,-1386 # 80027650 <__func__.2+0x4de8>
    80013bc2:	0000f517          	auipc	a0,0xf
    80013bc6:	fa650513          	addi	a0,a0,-90 # 80022b68 <__func__.2+0x300>
    80013bca:	0a60d0ef          	jal	80020c70 <printf>
    80013bce:	00031797          	auipc	a5,0x31
    80013bd2:	4437c783          	lbu	a5,1091(a5) # 80045011 <excpt+0x1>
    80013bd6:	0000f597          	auipc	a1,0xf
    80013bda:	f6a58593          	addi	a1,a1,-150 # 80022b40 <__func__.2+0x2d8>
    80013bde:	cf89                	beqz	a5,80013bf8 <store_page_fault_5+0xc4>
    80013be0:	6418                	ld	a4,8(s0)
    80013be2:	47bd                	li	a5,15
    80013be4:	0000f597          	auipc	a1,0xf
    80013be8:	f4c58593          	addi	a1,a1,-180 # 80022b30 <__func__.2+0x2c8>
    80013bec:	00f70663          	beq	a4,a5,80013bf8 <store_page_fault_5+0xc4>
    80013bf0:	0000f597          	auipc	a1,0xf
    80013bf4:	f5058593          	addi	a1,a1,-176 # 80022b40 <__func__.2+0x2d8>
    80013bf8:	0000f517          	auipc	a0,0xf
    80013bfc:	f8850513          	addi	a0,a0,-120 # 80022b80 <__func__.2+0x318>
    80013c00:	0700d0ef          	jal	80020c70 <printf>
    80013c04:	00031797          	auipc	a5,0x31
    80013c08:	40d7c783          	lbu	a5,1037(a5) # 80045011 <excpt+0x1>
    80013c0c:	c789                	beqz	a5,80013c16 <store_page_fault_5+0xe2>
    80013c0e:	6418                	ld	a4,8(s0)
    80013c10:	47bd                	li	a5,15
    80013c12:	00f70c63          	beq	a4,a5,80013c2a <store_page_fault_5+0xf6>
    80013c16:	0000f517          	auipc	a0,0xf
    80013c1a:	f7250513          	addi	a0,a0,-142 # 80022b88 <__func__.2+0x320>
    80013c1e:	0520d0ef          	jal	80020c70 <printf>
    80013c22:	02900513          	li	a0,41
    80013c26:	6da0c0ef          	jal	80020300 <putchar>
    80013c2a:	4529                	li	a0,10
    80013c2c:	6d40c0ef          	jal	80020300 <putchar>
    80013c30:	00031497          	auipc	s1,0x31
    80013c34:	3e14c483          	lbu	s1,993(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80013c38:	0000f597          	auipc	a1,0xf
    80013c3c:	f0858593          	addi	a1,a1,-248 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80013c40:	cc91                	beqz	s1,80013c5c <store_page_fault_5+0x128>
    80013c42:	6418                	ld	a4,8(s0)
    80013c44:	47bd                	li	a5,15
    TEST_END();
    80013c46:	0000f597          	auipc	a1,0xf
    80013c4a:	eea58593          	addi	a1,a1,-278 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80013c4e:	00f70763          	beq	a4,a5,80013c5c <store_page_fault_5+0x128>
    80013c52:	4481                	li	s1,0
    TEST_END();
    80013c54:	0000f597          	auipc	a1,0xf
    80013c58:	eec58593          	addi	a1,a1,-276 # 80022b40 <__func__.2+0x2d8>
    80013c5c:	0000f517          	auipc	a0,0xf
    80013c60:	f8c50513          	addi	a0,a0,-116 # 80022be8 <__func__.2+0x380>
    80013c64:	00c0d0ef          	jal	80020c70 <printf>
    80013c68:	4511                	li	a0,4
    80013c6a:	e6fec0ef          	jal	80000ad8 <goto_priv>
    80013c6e:	f3aed0ef          	jal	800013a8 <reset_state>
}
    80013c72:	60e2                	ld	ra,24(sp)
    80013c74:	6442                	ld	s0,16(sp)
    80013c76:	8526                	mv	a0,s1
    80013c78:	64a2                	ld	s1,8(sp)
    80013c7a:	6105                	addi	sp,sp,32
    80013c7c:	8082                	ret

0000000080013c7e <store_page_fault_6>:

bool store_page_fault_6(){
    80013c7e:	1141                	addi	sp,sp,-16

    TEST_START();
    80013c80:	0000e597          	auipc	a1,0xe
    80013c84:	f5058593          	addi	a1,a1,-176 # 80021bd0 <__func__.8>
    80013c88:	0000f517          	auipc	a0,0xf
    80013c8c:	ec850513          	addi	a0,a0,-312 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_6(){
    80013c90:	e406                	sd	ra,8(sp)
    80013c92:	e022                	sd	s0,0(sp)
    TEST_START();
    80013c94:	7dd0c0ef          	jal	80020c70 <printf>
    80013c98:	4529                	li	a0,10
    80013c9a:	6660c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013c9e:	450d                	li	a0,3
    80013ca0:	e39ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013ca4:	93dec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013ca8:	b7bec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013cac:	4509                	li	a0,2
    80013cae:	e2bec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013cb2:	9ffec0ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80013cb6:	4511                	li	a0,4
    80013cb8:	e21ec0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80013cbc:	000407b7          	lui	a5,0x40
    80013cc0:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80013cc4:	4509                	li	a0,2
    80013cc6:	e13ec0ef          	jal	80000ad8 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80013cca:	0330000f          	fence	rw,rw
    80013cce:	4785                	li	a5,1
    80013cd0:	00031717          	auipc	a4,0x31
    80013cd4:	36073c23          	sd	zero,888(a4) # 80045048 <excpt+0x38>
    80013cd8:	00031717          	auipc	a4,0x31
    80013cdc:	32f71c23          	sh	a5,824(a4) # 80045010 <excpt>
    80013ce0:	0330000f          	fence	rw,rw
    80013ce4:	37ab77b7          	lui	a5,0x37ab7
    80013ce8:	00080737          	lui	a4,0x80
    80013cec:	078a                	slli	a5,a5,0x2
    80013cee:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80013cf0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013cf4:	0736                	slli	a4,a4,0xd
    80013cf6:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80013cfa:	08200593          	li	a1,130
    80013cfe:	00014617          	auipc	a2,0x14
    80013d02:	98a60613          	addi	a2,a2,-1654 # 80027688 <__func__.2+0x4e20>
    80013d06:	0000f517          	auipc	a0,0xf
    80013d0a:	e6250513          	addi	a0,a0,-414 # 80022b68 <__func__.2+0x300>
    80013d0e:	7630c0ef          	jal	80020c70 <printf>
    80013d12:	00031797          	auipc	a5,0x31
    80013d16:	2ff7c783          	lbu	a5,767(a5) # 80045011 <excpt+0x1>
    80013d1a:	0000f597          	auipc	a1,0xf
    80013d1e:	e1658593          	addi	a1,a1,-490 # 80022b30 <__func__.2+0x2c8>
    80013d22:	c789                	beqz	a5,80013d2c <store_page_fault_6+0xae>
    80013d24:	0000f597          	auipc	a1,0xf
    80013d28:	e1c58593          	addi	a1,a1,-484 # 80022b40 <__func__.2+0x2d8>
    80013d2c:	0000f517          	auipc	a0,0xf
    80013d30:	e5450513          	addi	a0,a0,-428 # 80022b80 <__func__.2+0x318>
    80013d34:	73d0c0ef          	jal	80020c70 <printf>
    80013d38:	00031797          	auipc	a5,0x31
    80013d3c:	2d97c783          	lbu	a5,729(a5) # 80045011 <excpt+0x1>
    80013d40:	e7a1                	bnez	a5,80013d88 <store_page_fault_6+0x10a>
    80013d42:	4529                	li	a0,10
    80013d44:	5bc0c0ef          	jal	80020300 <putchar>
    80013d48:	00031797          	auipc	a5,0x31
    80013d4c:	2c97c783          	lbu	a5,713(a5) # 80045011 <excpt+0x1>
    80013d50:	e795                	bnez	a5,80013d7c <store_page_fault_6+0xfe>
    80013d52:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80013d54:	0000f597          	auipc	a1,0xf
    80013d58:	ddc58593          	addi	a1,a1,-548 # 80022b30 <__func__.2+0x2c8>
    80013d5c:	0000f517          	auipc	a0,0xf
    80013d60:	e8c50513          	addi	a0,a0,-372 # 80022be8 <__func__.2+0x380>
    80013d64:	70d0c0ef          	jal	80020c70 <printf>
    80013d68:	4511                	li	a0,4
    80013d6a:	d6fec0ef          	jal	80000ad8 <goto_priv>
    80013d6e:	e3aed0ef          	jal	800013a8 <reset_state>
}
    80013d72:	60a2                	ld	ra,8(sp)
    80013d74:	8522                	mv	a0,s0
    80013d76:	6402                	ld	s0,0(sp)
    80013d78:	0141                	addi	sp,sp,16
    80013d7a:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80013d7c:	4401                	li	s0,0
    TEST_END();
    80013d7e:	0000f597          	auipc	a1,0xf
    80013d82:	dc258593          	addi	a1,a1,-574 # 80022b40 <__func__.2+0x2d8>
    80013d86:	bfd9                	j	80013d5c <store_page_fault_6+0xde>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80013d88:	0000f517          	auipc	a0,0xf
    80013d8c:	e0050513          	addi	a0,a0,-512 # 80022b88 <__func__.2+0x320>
    80013d90:	6e10c0ef          	jal	80020c70 <printf>
    80013d94:	02900513          	li	a0,41
    80013d98:	5680c0ef          	jal	80020300 <putchar>
    80013d9c:	b75d                	j	80013d42 <store_page_fault_6+0xc4>

0000000080013d9e <store_page_fault_7>:

bool store_page_fault_7(){
    80013d9e:	1101                	addi	sp,sp,-32

    TEST_START();
    80013da0:	0000e597          	auipc	a1,0xe
    80013da4:	e4858593          	addi	a1,a1,-440 # 80021be8 <__func__.7>
    80013da8:	0000f517          	auipc	a0,0xf
    80013dac:	da850513          	addi	a0,a0,-600 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_7(){
    80013db0:	ec06                	sd	ra,24(sp)
    80013db2:	e822                	sd	s0,16(sp)
    80013db4:	e426                	sd	s1,8(sp)
    TEST_START();
    80013db6:	6bb0c0ef          	jal	80020c70 <printf>
    80013dba:	4529                	li	a0,10
    80013dbc:	5440c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013dc0:	450d                	li	a0,3
    80013dc2:	d17ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013dc6:	81bec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013dca:	a59ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013dce:	4509                	li	a0,2
    80013dd0:	d09ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013dd4:	8ddec0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80013dd8:	4511                	li	a0,4
    80013dda:	cffec0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80013dde:	000407b7          	lui	a5,0x40
    80013de2:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80013de6:	450d                	li	a0,3
    80013de8:	cf1ec0ef          	jal	80000ad8 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013dec:	0330000f          	fence	rw,rw
    80013df0:	00031417          	auipc	s0,0x31
    80013df4:	22040413          	addi	s0,s0,544 # 80045010 <excpt>
    80013df8:	4785                	li	a5,1
    80013dfa:	00031717          	auipc	a4,0x31
    80013dfe:	24073723          	sd	zero,590(a4) # 80045048 <excpt+0x38>
    80013e02:	00f41023          	sh	a5,0(s0)
    80013e06:	0330000f          	fence	rw,rw
    80013e0a:	37ab77b7          	lui	a5,0x37ab7
    80013e0e:	00080737          	lui	a4,0x80
    80013e12:	078a                	slli	a5,a5,0x2
    80013e14:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80013e16:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013e1a:	0736                	slli	a4,a4,0xd
    80013e1c:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80013e20:	08200593          	li	a1,130
    80013e24:	00014617          	auipc	a2,0x14
    80013e28:	89c60613          	addi	a2,a2,-1892 # 800276c0 <__func__.2+0x4e58>
    80013e2c:	0000f517          	auipc	a0,0xf
    80013e30:	d3c50513          	addi	a0,a0,-708 # 80022b68 <__func__.2+0x300>
    80013e34:	63d0c0ef          	jal	80020c70 <printf>
    80013e38:	00031797          	auipc	a5,0x31
    80013e3c:	1d97c783          	lbu	a5,473(a5) # 80045011 <excpt+0x1>
    80013e40:	0000f597          	auipc	a1,0xf
    80013e44:	d0058593          	addi	a1,a1,-768 # 80022b40 <__func__.2+0x2d8>
    80013e48:	cf89                	beqz	a5,80013e62 <store_page_fault_7+0xc4>
    80013e4a:	6418                	ld	a4,8(s0)
    80013e4c:	47bd                	li	a5,15
    80013e4e:	0000f597          	auipc	a1,0xf
    80013e52:	ce258593          	addi	a1,a1,-798 # 80022b30 <__func__.2+0x2c8>
    80013e56:	00f70663          	beq	a4,a5,80013e62 <store_page_fault_7+0xc4>
    80013e5a:	0000f597          	auipc	a1,0xf
    80013e5e:	ce658593          	addi	a1,a1,-794 # 80022b40 <__func__.2+0x2d8>
    80013e62:	0000f517          	auipc	a0,0xf
    80013e66:	d1e50513          	addi	a0,a0,-738 # 80022b80 <__func__.2+0x318>
    80013e6a:	6070c0ef          	jal	80020c70 <printf>
    80013e6e:	00031797          	auipc	a5,0x31
    80013e72:	1a37c783          	lbu	a5,419(a5) # 80045011 <excpt+0x1>
    80013e76:	c789                	beqz	a5,80013e80 <store_page_fault_7+0xe2>
    80013e78:	6418                	ld	a4,8(s0)
    80013e7a:	47bd                	li	a5,15
    80013e7c:	00f70c63          	beq	a4,a5,80013e94 <store_page_fault_7+0xf6>
    80013e80:	0000f517          	auipc	a0,0xf
    80013e84:	d0850513          	addi	a0,a0,-760 # 80022b88 <__func__.2+0x320>
    80013e88:	5e90c0ef          	jal	80020c70 <printf>
    80013e8c:	02900513          	li	a0,41
    80013e90:	4700c0ef          	jal	80020300 <putchar>
    80013e94:	4529                	li	a0,10
    80013e96:	46a0c0ef          	jal	80020300 <putchar>
    80013e9a:	00031497          	auipc	s1,0x31
    80013e9e:	1774c483          	lbu	s1,375(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80013ea2:	0000f597          	auipc	a1,0xf
    80013ea6:	c9e58593          	addi	a1,a1,-866 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80013eaa:	cc91                	beqz	s1,80013ec6 <store_page_fault_7+0x128>
    80013eac:	6418                	ld	a4,8(s0)
    80013eae:	47bd                	li	a5,15
    TEST_END();
    80013eb0:	0000f597          	auipc	a1,0xf
    80013eb4:	c8058593          	addi	a1,a1,-896 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80013eb8:	00f70763          	beq	a4,a5,80013ec6 <store_page_fault_7+0x128>
    80013ebc:	4481                	li	s1,0
    TEST_END();
    80013ebe:	0000f597          	auipc	a1,0xf
    80013ec2:	c8258593          	addi	a1,a1,-894 # 80022b40 <__func__.2+0x2d8>
    80013ec6:	0000f517          	auipc	a0,0xf
    80013eca:	d2250513          	addi	a0,a0,-734 # 80022be8 <__func__.2+0x380>
    80013ece:	5a30c0ef          	jal	80020c70 <printf>
    80013ed2:	4511                	li	a0,4
    80013ed4:	c05ec0ef          	jal	80000ad8 <goto_priv>
    80013ed8:	cd0ed0ef          	jal	800013a8 <reset_state>
}
    80013edc:	60e2                	ld	ra,24(sp)
    80013ede:	6442                	ld	s0,16(sp)
    80013ee0:	8526                	mv	a0,s1
    80013ee2:	64a2                	ld	s1,8(sp)
    80013ee4:	6105                	addi	sp,sp,32
    80013ee6:	8082                	ret

0000000080013ee8 <store_page_fault_8>:

bool store_page_fault_8(){
    80013ee8:	1141                	addi	sp,sp,-16

    TEST_START();
    80013eea:	0000e597          	auipc	a1,0xe
    80013eee:	d1658593          	addi	a1,a1,-746 # 80021c00 <__func__.6>
    80013ef2:	0000f517          	auipc	a0,0xf
    80013ef6:	c5e50513          	addi	a0,a0,-930 # 80022b50 <__func__.2+0x2e8>
bool store_page_fault_8(){
    80013efa:	e406                	sd	ra,8(sp)
    80013efc:	e022                	sd	s0,0(sp)
    TEST_START();
    80013efe:	5730c0ef          	jal	80020c70 <printf>
    80013f02:	4529                	li	a0,10
    80013f04:	3fc0c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80013f08:	450d                	li	a0,3
    80013f0a:	bcfec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80013f0e:	ed2ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013f12:	911ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80013f16:	4509                	li	a0,2
    80013f18:	bc1ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80013f1c:	f94ec0ef          	jal	800006b0 <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80013f20:	4511                	li	a0,4
    80013f22:	bb7ec0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80013f26:	000407b7          	lui	a5,0x40
    80013f2a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80013f2e:	450d                	li	a0,3
    80013f30:	ba9ec0ef          	jal	80000ad8 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80013f34:	0330000f          	fence	rw,rw
    80013f38:	4785                	li	a5,1
    80013f3a:	00031717          	auipc	a4,0x31
    80013f3e:	10073723          	sd	zero,270(a4) # 80045048 <excpt+0x38>
    80013f42:	00031717          	auipc	a4,0x31
    80013f46:	0cf71723          	sh	a5,206(a4) # 80045010 <excpt>
    80013f4a:	0330000f          	fence	rw,rw
    80013f4e:	37ab77b7          	lui	a5,0x37ab7
    80013f52:	00080737          	lui	a4,0x80
    80013f56:	078a                	slli	a5,a5,0x2
    80013f58:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80013f5a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80013f5e:	0736                	slli	a4,a4,0xd
    80013f60:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80013f64:	08200593          	li	a1,130
    80013f68:	00013617          	auipc	a2,0x13
    80013f6c:	79060613          	addi	a2,a2,1936 # 800276f8 <__func__.2+0x4e90>
    80013f70:	0000f517          	auipc	a0,0xf
    80013f74:	bf850513          	addi	a0,a0,-1032 # 80022b68 <__func__.2+0x300>
    80013f78:	4f90c0ef          	jal	80020c70 <printf>
    80013f7c:	00031797          	auipc	a5,0x31
    80013f80:	0957c783          	lbu	a5,149(a5) # 80045011 <excpt+0x1>
    80013f84:	0000f597          	auipc	a1,0xf
    80013f88:	bac58593          	addi	a1,a1,-1108 # 80022b30 <__func__.2+0x2c8>
    80013f8c:	c789                	beqz	a5,80013f96 <store_page_fault_8+0xae>
    80013f8e:	0000f597          	auipc	a1,0xf
    80013f92:	bb258593          	addi	a1,a1,-1102 # 80022b40 <__func__.2+0x2d8>
    80013f96:	0000f517          	auipc	a0,0xf
    80013f9a:	bea50513          	addi	a0,a0,-1046 # 80022b80 <__func__.2+0x318>
    80013f9e:	4d30c0ef          	jal	80020c70 <printf>
    80013fa2:	00031797          	auipc	a5,0x31
    80013fa6:	06f7c783          	lbu	a5,111(a5) # 80045011 <excpt+0x1>
    80013faa:	e7a1                	bnez	a5,80013ff2 <store_page_fault_8+0x10a>
    80013fac:	4529                	li	a0,10
    80013fae:	3520c0ef          	jal	80020300 <putchar>
    80013fb2:	00031797          	auipc	a5,0x31
    80013fb6:	05f7c783          	lbu	a5,95(a5) # 80045011 <excpt+0x1>
    80013fba:	e795                	bnez	a5,80013fe6 <store_page_fault_8+0xfe>
    80013fbc:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80013fbe:	0000f597          	auipc	a1,0xf
    80013fc2:	b7258593          	addi	a1,a1,-1166 # 80022b30 <__func__.2+0x2c8>
    80013fc6:	0000f517          	auipc	a0,0xf
    80013fca:	c2250513          	addi	a0,a0,-990 # 80022be8 <__func__.2+0x380>
    80013fce:	4a30c0ef          	jal	80020c70 <printf>
    80013fd2:	4511                	li	a0,4
    80013fd4:	b05ec0ef          	jal	80000ad8 <goto_priv>
    80013fd8:	bd0ed0ef          	jal	800013a8 <reset_state>
}
    80013fdc:	60a2                	ld	ra,8(sp)
    80013fde:	8522                	mv	a0,s0
    80013fe0:	6402                	ld	s0,0(sp)
    80013fe2:	0141                	addi	sp,sp,16
    80013fe4:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80013fe6:	4401                	li	s0,0
    TEST_END();
    80013fe8:	0000f597          	auipc	a1,0xf
    80013fec:	b5858593          	addi	a1,a1,-1192 # 80022b40 <__func__.2+0x2d8>
    80013ff0:	bfd9                	j	80013fc6 <store_page_fault_8+0xde>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80013ff2:	0000f517          	auipc	a0,0xf
    80013ff6:	b9650513          	addi	a0,a0,-1130 # 80022b88 <__func__.2+0x320>
    80013ffa:	4770c0ef          	jal	80020c70 <printf>
    80013ffe:	02900513          	li	a0,41
    80014002:	2fe0c0ef          	jal	80020300 <putchar>
    80014006:	b75d                	j	80013fac <store_page_fault_8+0xc4>

0000000080014008 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80014008:	1101                	addi	sp,sp,-32

    TEST_START();
    8001400a:	0000e597          	auipc	a1,0xe
    8001400e:	c0e58593          	addi	a1,a1,-1010 # 80021c18 <__func__.5>
    80014012:	0000f517          	auipc	a0,0xf
    80014016:	b3e50513          	addi	a0,a0,-1218 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_1(){
    8001401a:	ec06                	sd	ra,24(sp)
    8001401c:	e822                	sd	s0,16(sp)
    8001401e:	e426                	sd	s1,8(sp)
    80014020:	e04a                	sd	s2,0(sp)
    TEST_START();
    80014022:	44f0c0ef          	jal	80020c70 <printf>
    80014026:	4529                	li	a0,10
    80014028:	2d80c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001402c:	450d                	li	a0,3
    8001402e:	aabec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014032:	daeec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014036:	fecec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001403a:	4509                	li	a0,2
    8001403c:	a9dec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014040:	e70ec0ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80014044:	450d                	li	a0,3
    80014046:	a93ec0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001404a:	4509                	li	a0,2
    8001404c:	9adec0ef          	jal	800009f8 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80014050:	0330000f          	fence	rw,rw
    80014054:	00031917          	auipc	s2,0x31
    80014058:	fbc90913          	addi	s2,s2,-68 # 80045010 <excpt>
    8001405c:	4785                	li	a5,1
    8001405e:	00031717          	auipc	a4,0x31
    80014062:	fe073523          	sd	zero,-22(a4) # 80045048 <excpt+0x38>
    80014066:	00f91023          	sh	a5,0(s2)
    8001406a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001406e:	deadc7b7          	lui	a5,0xdeadc
    80014072:	40019737          	lui	a4,0x40019
    80014076:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8001407a:	070a                	slli	a4,a4,0x2
    8001407c:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80014080:	08200593          	li	a1,130
    80014084:	00013617          	auipc	a2,0x13
    80014088:	6ac60613          	addi	a2,a2,1708 # 80027730 <__func__.2+0x4ec8>
    8001408c:	0000f517          	auipc	a0,0xf
    80014090:	adc50513          	addi	a0,a0,-1316 # 80022b68 <__func__.2+0x300>
    value = amoadd_w(addr,value);
    80014094:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80014098:	3d90c0ef          	jal	80020c70 <printf>
    8001409c:	00031797          	auipc	a5,0x31
    800140a0:	f757c783          	lbu	a5,-139(a5) # 80045011 <excpt+0x1>
    value = amoadd_w(addr,value);
    800140a4:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800140a6:	0000f597          	auipc	a1,0xf
    800140aa:	a9a58593          	addi	a1,a1,-1382 # 80022b40 <__func__.2+0x2d8>
    800140ae:	cf91                	beqz	a5,800140ca <amo_page_fault_1+0xc2>
    800140b0:	00893703          	ld	a4,8(s2)
    800140b4:	47bd                	li	a5,15
    800140b6:	0000f597          	auipc	a1,0xf
    800140ba:	a7a58593          	addi	a1,a1,-1414 # 80022b30 <__func__.2+0x2c8>
    800140be:	00f70663          	beq	a4,a5,800140ca <amo_page_fault_1+0xc2>
    800140c2:	0000f597          	auipc	a1,0xf
    800140c6:	a7e58593          	addi	a1,a1,-1410 # 80022b40 <__func__.2+0x2d8>
    800140ca:	0000f517          	auipc	a0,0xf
    800140ce:	ab650513          	addi	a0,a0,-1354 # 80022b80 <__func__.2+0x318>
    800140d2:	39f0c0ef          	jal	80020c70 <printf>
    800140d6:	00031797          	auipc	a5,0x31
    800140da:	f3b7c783          	lbu	a5,-197(a5) # 80045011 <excpt+0x1>
    800140de:	c791                	beqz	a5,800140ea <amo_page_fault_1+0xe2>
    800140e0:	00893703          	ld	a4,8(s2)
    800140e4:	47bd                	li	a5,15
    800140e6:	00f70c63          	beq	a4,a5,800140fe <amo_page_fault_1+0xf6>
    800140ea:	0000f517          	auipc	a0,0xf
    800140ee:	a9e50513          	addi	a0,a0,-1378 # 80022b88 <__func__.2+0x320>
    800140f2:	37f0c0ef          	jal	80020c70 <printf>
    800140f6:	02900513          	li	a0,41
    800140fa:	2060c0ef          	jal	80020300 <putchar>
    800140fe:	4529                	li	a0,10
    80014100:	2000c0ef          	jal	80020300 <putchar>
    80014104:	00031797          	auipc	a5,0x31
    80014108:	f0d7c783          	lbu	a5,-243(a5) # 80045011 <excpt+0x1>
    8001410c:	4481                	li	s1,0
    8001410e:	c791                	beqz	a5,8001411a <amo_page_fault_1+0x112>
    80014110:	00893483          	ld	s1,8(s2)
    80014114:	14c5                	addi	s1,s1,-15
    80014116:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001411a:	0330000f          	fence	rw,rw
    8001411e:	4785                	li	a5,1
    80014120:	00031717          	auipc	a4,0x31
    80014124:	f2073423          	sd	zero,-216(a4) # 80045048 <excpt+0x38>
    80014128:	00f91023          	sh	a5,0(s2)
    8001412c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80014130:	001007b7          	lui	a5,0x100
    80014134:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    80014138:	07b2                	slli	a5,a5,0xc
    8001413a:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    8001413e:	08200593          	li	a1,130
    80014142:	00013617          	auipc	a2,0x13
    80014146:	62660613          	addi	a2,a2,1574 # 80027768 <__func__.2+0x4f00>
    8001414a:	0000f517          	auipc	a0,0xf
    8001414e:	a1e50513          	addi	a0,a0,-1506 # 80022b68 <__func__.2+0x300>
    80014152:	31f0c0ef          	jal	80020c70 <printf>
    80014156:	00031797          	auipc	a5,0x31
    8001415a:	ebb7c783          	lbu	a5,-325(a5) # 80045011 <excpt+0x1>
    8001415e:	0000f597          	auipc	a1,0xf
    80014162:	9e258593          	addi	a1,a1,-1566 # 80022b40 <__func__.2+0x2d8>
    80014166:	cf91                	beqz	a5,80014182 <amo_page_fault_1+0x17a>
    80014168:	00893703          	ld	a4,8(s2)
    8001416c:	47bd                	li	a5,15
    8001416e:	0000f597          	auipc	a1,0xf
    80014172:	9c258593          	addi	a1,a1,-1598 # 80022b30 <__func__.2+0x2c8>
    80014176:	00f70663          	beq	a4,a5,80014182 <amo_page_fault_1+0x17a>
    8001417a:	0000f597          	auipc	a1,0xf
    8001417e:	9c658593          	addi	a1,a1,-1594 # 80022b40 <__func__.2+0x2d8>
    80014182:	0000f517          	auipc	a0,0xf
    80014186:	9fe50513          	addi	a0,a0,-1538 # 80022b80 <__func__.2+0x318>
    8001418a:	2e70c0ef          	jal	80020c70 <printf>
    8001418e:	00031797          	auipc	a5,0x31
    80014192:	e837c783          	lbu	a5,-381(a5) # 80045011 <excpt+0x1>
    80014196:	c791                	beqz	a5,800141a2 <amo_page_fault_1+0x19a>
    80014198:	00893703          	ld	a4,8(s2)
    8001419c:	47bd                	li	a5,15
    8001419e:	00f70c63          	beq	a4,a5,800141b6 <amo_page_fault_1+0x1ae>
    800141a2:	0000f517          	auipc	a0,0xf
    800141a6:	9e650513          	addi	a0,a0,-1562 # 80022b88 <__func__.2+0x320>
    800141aa:	2c70c0ef          	jal	80020c70 <printf>
    800141ae:	02900513          	li	a0,41
    800141b2:	14e0c0ef          	jal	80020300 <putchar>
    800141b6:	4529                	li	a0,10
    800141b8:	1480c0ef          	jal	80020300 <putchar>
    800141bc:	c499                	beqz	s1,800141ca <amo_page_fault_1+0x1c2>
    800141be:	00031797          	auipc	a5,0x31
    800141c2:	e537c783          	lbu	a5,-429(a5) # 80045011 <excpt+0x1>
    800141c6:	4481                	li	s1,0
    800141c8:	ebcd                	bnez	a5,8001427a <amo_page_fault_1+0x272>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800141ca:	0330000f          	fence	rw,rw
    800141ce:	4785                	li	a5,1
    800141d0:	00031717          	auipc	a4,0x31
    800141d4:	e6073c23          	sd	zero,-392(a4) # 80045048 <excpt+0x38>
    800141d8:	00f91023          	sh	a5,0(s2)
    800141dc:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800141e0:	1782                	slli	a5,a5,0x20
    800141e2:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800141e6:	08200593          	li	a1,130
    800141ea:	00013617          	auipc	a2,0x13
    800141ee:	5b660613          	addi	a2,a2,1462 # 800277a0 <__func__.2+0x4f38>
    800141f2:	0000f517          	auipc	a0,0xf
    800141f6:	97650513          	addi	a0,a0,-1674 # 80022b68 <__func__.2+0x300>
    800141fa:	2770c0ef          	jal	80020c70 <printf>
    800141fe:	00031797          	auipc	a5,0x31
    80014202:	e137c783          	lbu	a5,-493(a5) # 80045011 <excpt+0x1>
    80014206:	0000f597          	auipc	a1,0xf
    8001420a:	93a58593          	addi	a1,a1,-1734 # 80022b40 <__func__.2+0x2d8>
    8001420e:	e789                	bnez	a5,80014218 <amo_page_fault_1+0x210>
    80014210:	0000f597          	auipc	a1,0xf
    80014214:	92058593          	addi	a1,a1,-1760 # 80022b30 <__func__.2+0x2c8>
    80014218:	0000f517          	auipc	a0,0xf
    8001421c:	96850513          	addi	a0,a0,-1688 # 80022b80 <__func__.2+0x318>
    80014220:	2510c0ef          	jal	80020c70 <printf>
    80014224:	00031797          	auipc	a5,0x31
    80014228:	ded7c783          	lbu	a5,-531(a5) # 80045011 <excpt+0x1>
    8001422c:	efa9                	bnez	a5,80014286 <amo_page_fault_1+0x27e>
    8001422e:	4529                	li	a0,10
    80014230:	0d00c0ef          	jal	80020300 <putchar>
    80014234:	c491                	beqz	s1,80014240 <amo_page_fault_1+0x238>
    80014236:	00031797          	auipc	a5,0x31
    8001423a:	ddb7c783          	lbu	a5,-549(a5) # 80045011 <excpt+0x1>
    8001423e:	cb85                	beqz	a5,8001426e <amo_page_fault_1+0x266>
    80014240:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014242:	0000f597          	auipc	a1,0xf
    80014246:	8fe58593          	addi	a1,a1,-1794 # 80022b40 <__func__.2+0x2d8>
    8001424a:	0000f517          	auipc	a0,0xf
    8001424e:	99e50513          	addi	a0,a0,-1634 # 80022be8 <__func__.2+0x380>
    80014252:	21f0c0ef          	jal	80020c70 <printf>
    80014256:	4511                	li	a0,4
    80014258:	881ec0ef          	jal	80000ad8 <goto_priv>
    8001425c:	94ced0ef          	jal	800013a8 <reset_state>
}
    80014260:	60e2                	ld	ra,24(sp)
    80014262:	8522                	mv	a0,s0
    80014264:	6442                	ld	s0,16(sp)
    80014266:	64a2                	ld	s1,8(sp)
    80014268:	6902                	ld	s2,0(sp)
    8001426a:	6105                	addi	sp,sp,32
    8001426c:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    8001426e:	4405                	li	s0,1
    TEST_END();
    80014270:	0000f597          	auipc	a1,0xf
    80014274:	8c058593          	addi	a1,a1,-1856 # 80022b30 <__func__.2+0x2c8>
    80014278:	bfc9                	j	8001424a <amo_page_fault_1+0x242>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    8001427a:	00893483          	ld	s1,8(s2)
    8001427e:	14c5                	addi	s1,s1,-15
    80014280:	0014b493          	seqz	s1,s1
    80014284:	b799                	j	800141ca <amo_page_fault_1+0x1c2>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80014286:	0000f517          	auipc	a0,0xf
    8001428a:	90250513          	addi	a0,a0,-1790 # 80022b88 <__func__.2+0x320>
    8001428e:	1e30c0ef          	jal	80020c70 <printf>
    80014292:	02900513          	li	a0,41
    80014296:	06a0c0ef          	jal	80020300 <putchar>
    8001429a:	bf51                	j	8001422e <amo_page_fault_1+0x226>

000000008001429c <amo_page_fault_2>:

bool amo_page_fault_2(){
    8001429c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001429e:	0000e597          	auipc	a1,0xe
    800142a2:	99258593          	addi	a1,a1,-1646 # 80021c30 <__func__.4>
    800142a6:	0000f517          	auipc	a0,0xf
    800142aa:	8aa50513          	addi	a0,a0,-1878 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_2(){
    800142ae:	ec06                	sd	ra,24(sp)
    800142b0:	e822                	sd	s0,16(sp)
    800142b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800142b4:	1bd0c0ef          	jal	80020c70 <printf>
    800142b8:	4529                	li	a0,10
    800142ba:	0460c0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800142be:	450d                	li	a0,3
    800142c0:	819ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800142c4:	b1cec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800142c8:	d5aec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800142cc:	4509                	li	a0,2
    800142ce:	80bec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800142d2:	bdeec0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800142d6:	4511                	li	a0,4
    800142d8:	801ec0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800142dc:	000407b7          	lui	a5,0x40
    800142e0:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800142e4:	450d                	li	a0,3
    800142e6:	ff2ec0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);    
    800142ea:	4509                	li	a0,2
    800142ec:	f0cec0ef          	jal	800009f8 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    800142f0:	0330000f          	fence	rw,rw
    800142f4:	00031417          	auipc	s0,0x31
    800142f8:	d1c40413          	addi	s0,s0,-740 # 80045010 <excpt>
    800142fc:	4785                	li	a5,1
    800142fe:	00031717          	auipc	a4,0x31
    80014302:	d4073523          	sd	zero,-694(a4) # 80045048 <excpt+0x38>
    80014306:	00f41023          	sh	a5,0(s0)
    8001430a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001430e:	000807b7          	lui	a5,0x80
    80014312:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014314:	4701                	li	a4,0
    80014316:	07b6                	slli	a5,a5,0xd
    80014318:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    8001431c:	08200593          	li	a1,130
    80014320:	00013617          	auipc	a2,0x13
    80014324:	4b860613          	addi	a2,a2,1208 # 800277d8 <__func__.2+0x4f70>
    80014328:	0000f517          	auipc	a0,0xf
    8001432c:	84050513          	addi	a0,a0,-1984 # 80022b68 <__func__.2+0x300>
    80014330:	1410c0ef          	jal	80020c70 <printf>
    80014334:	00031797          	auipc	a5,0x31
    80014338:	cdd7c783          	lbu	a5,-803(a5) # 80045011 <excpt+0x1>
    8001433c:	0000f597          	auipc	a1,0xf
    80014340:	80458593          	addi	a1,a1,-2044 # 80022b40 <__func__.2+0x2d8>
    80014344:	cf89                	beqz	a5,8001435e <amo_page_fault_2+0xc2>
    80014346:	6418                	ld	a4,8(s0)
    80014348:	47bd                	li	a5,15
    8001434a:	0000e597          	auipc	a1,0xe
    8001434e:	7e658593          	addi	a1,a1,2022 # 80022b30 <__func__.2+0x2c8>
    80014352:	00f70663          	beq	a4,a5,8001435e <amo_page_fault_2+0xc2>
    80014356:	0000e597          	auipc	a1,0xe
    8001435a:	7ea58593          	addi	a1,a1,2026 # 80022b40 <__func__.2+0x2d8>
    8001435e:	0000f517          	auipc	a0,0xf
    80014362:	82250513          	addi	a0,a0,-2014 # 80022b80 <__func__.2+0x318>
    80014366:	10b0c0ef          	jal	80020c70 <printf>
    8001436a:	00031797          	auipc	a5,0x31
    8001436e:	ca77c783          	lbu	a5,-857(a5) # 80045011 <excpt+0x1>
    80014372:	c789                	beqz	a5,8001437c <amo_page_fault_2+0xe0>
    80014374:	6418                	ld	a4,8(s0)
    80014376:	47bd                	li	a5,15
    80014378:	00f70c63          	beq	a4,a5,80014390 <amo_page_fault_2+0xf4>
    8001437c:	0000f517          	auipc	a0,0xf
    80014380:	80c50513          	addi	a0,a0,-2036 # 80022b88 <__func__.2+0x320>
    80014384:	0ed0c0ef          	jal	80020c70 <printf>
    80014388:	02900513          	li	a0,41
    8001438c:	7750b0ef          	jal	80020300 <putchar>
    80014390:	4529                	li	a0,10
    80014392:	76f0b0ef          	jal	80020300 <putchar>
    80014396:	00031497          	auipc	s1,0x31
    8001439a:	c7b4c483          	lbu	s1,-901(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001439e:	0000e597          	auipc	a1,0xe
    800143a2:	7a258593          	addi	a1,a1,1954 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800143a6:	cc91                	beqz	s1,800143c2 <amo_page_fault_2+0x126>
    800143a8:	6418                	ld	a4,8(s0)
    800143aa:	47bd                	li	a5,15
    TEST_END();
    800143ac:	0000e597          	auipc	a1,0xe
    800143b0:	78458593          	addi	a1,a1,1924 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800143b4:	00f70763          	beq	a4,a5,800143c2 <amo_page_fault_2+0x126>
    800143b8:	4481                	li	s1,0
    TEST_END();
    800143ba:	0000e597          	auipc	a1,0xe
    800143be:	78658593          	addi	a1,a1,1926 # 80022b40 <__func__.2+0x2d8>
    800143c2:	0000f517          	auipc	a0,0xf
    800143c6:	82650513          	addi	a0,a0,-2010 # 80022be8 <__func__.2+0x380>
    800143ca:	0a70c0ef          	jal	80020c70 <printf>
    800143ce:	4511                	li	a0,4
    800143d0:	f08ec0ef          	jal	80000ad8 <goto_priv>
    800143d4:	fd5ec0ef          	jal	800013a8 <reset_state>
}
    800143d8:	60e2                	ld	ra,24(sp)
    800143da:	6442                	ld	s0,16(sp)
    800143dc:	8526                	mv	a0,s1
    800143de:	64a2                	ld	s1,8(sp)
    800143e0:	6105                	addi	sp,sp,32
    800143e2:	8082                	ret

00000000800143e4 <amo_page_fault_3>:

bool amo_page_fault_3(){
    800143e4:	1141                	addi	sp,sp,-16

    TEST_START();
    800143e6:	0000e597          	auipc	a1,0xe
    800143ea:	86258593          	addi	a1,a1,-1950 # 80021c48 <__func__.3>
    800143ee:	0000e517          	auipc	a0,0xe
    800143f2:	76250513          	addi	a0,a0,1890 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_3(){
    800143f6:	e406                	sd	ra,8(sp)
    800143f8:	e022                	sd	s0,0(sp)
    TEST_START();
    800143fa:	0770c0ef          	jal	80020c70 <printf>
    800143fe:	4529                	li	a0,10
    80014400:	7010b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014404:	450d                	li	a0,3
    80014406:	ed2ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001440a:	9d6ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001440e:	c14ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014412:	4509                	li	a0,2
    80014414:	ec4ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014418:	a98ec0ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001441c:	4511                	li	a0,4
    8001441e:	ebaec0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80014422:	000407b7          	lui	a5,0x40
    80014426:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    8001442a:	450d                	li	a0,3
    8001442c:	eacec0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80014430:	4509                	li	a0,2
    80014432:	dc6ec0ef          	jal	800009f8 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80014436:	0330000f          	fence	rw,rw
    8001443a:	4785                	li	a5,1
    8001443c:	00031717          	auipc	a4,0x31
    80014440:	c0073623          	sd	zero,-1012(a4) # 80045048 <excpt+0x38>
    80014444:	00031717          	auipc	a4,0x31
    80014448:	bcf71623          	sh	a5,-1076(a4) # 80045010 <excpt>
    8001444c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80014450:	000807b7          	lui	a5,0x80
    80014454:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014456:	4701                	li	a4,0
    80014458:	07b6                	slli	a5,a5,0xd
    8001445a:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    8001445e:	08200593          	li	a1,130
    80014462:	00013617          	auipc	a2,0x13
    80014466:	3be60613          	addi	a2,a2,958 # 80027820 <__func__.2+0x4fb8>
    8001446a:	0000e517          	auipc	a0,0xe
    8001446e:	6fe50513          	addi	a0,a0,1790 # 80022b68 <__func__.2+0x300>
    80014472:	7fe0c0ef          	jal	80020c70 <printf>
    80014476:	00031797          	auipc	a5,0x31
    8001447a:	b9b7c783          	lbu	a5,-1125(a5) # 80045011 <excpt+0x1>
    8001447e:	0000e597          	auipc	a1,0xe
    80014482:	6b258593          	addi	a1,a1,1714 # 80022b30 <__func__.2+0x2c8>
    80014486:	c789                	beqz	a5,80014490 <amo_page_fault_3+0xac>
    80014488:	0000e597          	auipc	a1,0xe
    8001448c:	6b858593          	addi	a1,a1,1720 # 80022b40 <__func__.2+0x2d8>
    80014490:	0000e517          	auipc	a0,0xe
    80014494:	6f050513          	addi	a0,a0,1776 # 80022b80 <__func__.2+0x318>
    80014498:	7d80c0ef          	jal	80020c70 <printf>
    8001449c:	00031797          	auipc	a5,0x31
    800144a0:	b757c783          	lbu	a5,-1163(a5) # 80045011 <excpt+0x1>
    800144a4:	e7a1                	bnez	a5,800144ec <amo_page_fault_3+0x108>
    800144a6:	4529                	li	a0,10
    800144a8:	6590b0ef          	jal	80020300 <putchar>
    800144ac:	00031797          	auipc	a5,0x31
    800144b0:	b657c783          	lbu	a5,-1179(a5) # 80045011 <excpt+0x1>
    800144b4:	e795                	bnez	a5,800144e0 <amo_page_fault_3+0xfc>
    800144b6:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800144b8:	0000e597          	auipc	a1,0xe
    800144bc:	67858593          	addi	a1,a1,1656 # 80022b30 <__func__.2+0x2c8>
    800144c0:	0000e517          	auipc	a0,0xe
    800144c4:	72850513          	addi	a0,a0,1832 # 80022be8 <__func__.2+0x380>
    800144c8:	7a80c0ef          	jal	80020c70 <printf>
    800144cc:	4511                	li	a0,4
    800144ce:	e0aec0ef          	jal	80000ad8 <goto_priv>
    800144d2:	ed7ec0ef          	jal	800013a8 <reset_state>
}
    800144d6:	60a2                	ld	ra,8(sp)
    800144d8:	8522                	mv	a0,s0
    800144da:	6402                	ld	s0,0(sp)
    800144dc:	0141                	addi	sp,sp,16
    800144de:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    800144e0:	4401                	li	s0,0
    TEST_END();
    800144e2:	0000e597          	auipc	a1,0xe
    800144e6:	65e58593          	addi	a1,a1,1630 # 80022b40 <__func__.2+0x2d8>
    800144ea:	bfd9                	j	800144c0 <amo_page_fault_3+0xdc>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    800144ec:	0000e517          	auipc	a0,0xe
    800144f0:	69c50513          	addi	a0,a0,1692 # 80022b88 <__func__.2+0x320>
    800144f4:	77c0c0ef          	jal	80020c70 <printf>
    800144f8:	02900513          	li	a0,41
    800144fc:	6050b0ef          	jal	80020300 <putchar>
    80014500:	b75d                	j	800144a6 <amo_page_fault_3+0xc2>

0000000080014502 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80014502:	1101                	addi	sp,sp,-32

    TEST_START();
    80014504:	0000d597          	auipc	a1,0xd
    80014508:	75c58593          	addi	a1,a1,1884 # 80021c60 <__func__.2>
    8001450c:	0000e517          	auipc	a0,0xe
    80014510:	64450513          	addi	a0,a0,1604 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_4(){
    80014514:	ec06                	sd	ra,24(sp)
    80014516:	e822                	sd	s0,16(sp)
    80014518:	e426                	sd	s1,8(sp)
    8001451a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001451c:	7540c0ef          	jal	80020c70 <printf>
    80014520:	4529                	li	a0,10
    80014522:	5df0b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014526:	450d                	li	a0,3
    80014528:	db0ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001452c:	8b4ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014530:	af2ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014534:	4509                	li	a0,2
    80014536:	da2ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001453a:	976ec0ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001453e:	4509                	li	a0,2
    80014540:	d98ec0ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80014544:	0330000f          	fence	rw,rw
    80014548:	00031917          	auipc	s2,0x31
    8001454c:	ac890913          	addi	s2,s2,-1336 # 80045010 <excpt>
    80014550:	4785                	li	a5,1
    80014552:	00031717          	auipc	a4,0x31
    80014556:	ae073b23          	sd	zero,-1290(a4) # 80045048 <excpt+0x38>
    8001455a:	00f91023          	sh	a5,0(s2)
    8001455e:	0330000f          	fence	rw,rw
    80014562:	deadc7b7          	lui	a5,0xdeadc
    80014566:	40019737          	lui	a4,0x40019
    8001456a:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8001456e:	070a                	slli	a4,a4,0x2
    80014570:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80014574:	08200593          	li	a1,130
    80014578:	00013617          	auipc	a2,0x13
    8001457c:	2f060613          	addi	a2,a2,752 # 80027868 <__func__.2+0x5000>
    80014580:	0000e517          	auipc	a0,0xe
    80014584:	5e850513          	addi	a0,a0,1512 # 80022b68 <__func__.2+0x300>
    value = amoadd_w(addr,value);
    80014588:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001458c:	6e40c0ef          	jal	80020c70 <printf>
    80014590:	00031797          	auipc	a5,0x31
    80014594:	a817c783          	lbu	a5,-1407(a5) # 80045011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80014598:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001459a:	0000e597          	auipc	a1,0xe
    8001459e:	5a658593          	addi	a1,a1,1446 # 80022b40 <__func__.2+0x2d8>
    800145a2:	cf91                	beqz	a5,800145be <amo_page_fault_4+0xbc>
    800145a4:	00893703          	ld	a4,8(s2)
    800145a8:	47bd                	li	a5,15
    800145aa:	0000e597          	auipc	a1,0xe
    800145ae:	58658593          	addi	a1,a1,1414 # 80022b30 <__func__.2+0x2c8>
    800145b2:	00f70663          	beq	a4,a5,800145be <amo_page_fault_4+0xbc>
    800145b6:	0000e597          	auipc	a1,0xe
    800145ba:	58a58593          	addi	a1,a1,1418 # 80022b40 <__func__.2+0x2d8>
    800145be:	0000e517          	auipc	a0,0xe
    800145c2:	5c250513          	addi	a0,a0,1474 # 80022b80 <__func__.2+0x318>
    800145c6:	6aa0c0ef          	jal	80020c70 <printf>
    800145ca:	00031797          	auipc	a5,0x31
    800145ce:	a477c783          	lbu	a5,-1465(a5) # 80045011 <excpt+0x1>
    800145d2:	c791                	beqz	a5,800145de <amo_page_fault_4+0xdc>
    800145d4:	00893703          	ld	a4,8(s2)
    800145d8:	47bd                	li	a5,15
    800145da:	00f70c63          	beq	a4,a5,800145f2 <amo_page_fault_4+0xf0>
    800145de:	0000e517          	auipc	a0,0xe
    800145e2:	5aa50513          	addi	a0,a0,1450 # 80022b88 <__func__.2+0x320>
    800145e6:	68a0c0ef          	jal	80020c70 <printf>
    800145ea:	02900513          	li	a0,41
    800145ee:	5130b0ef          	jal	80020300 <putchar>
    800145f2:	4529                	li	a0,10
    800145f4:	50d0b0ef          	jal	80020300 <putchar>
    800145f8:	00031797          	auipc	a5,0x31
    800145fc:	a197c783          	lbu	a5,-1511(a5) # 80045011 <excpt+0x1>
    80014600:	4481                	li	s1,0
    80014602:	c791                	beqz	a5,8001460e <amo_page_fault_4+0x10c>
    80014604:	00893483          	ld	s1,8(s2)
    80014608:	14c5                	addi	s1,s1,-15
    8001460a:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001460e:	0330000f          	fence	rw,rw
    80014612:	4785                	li	a5,1
    80014614:	00031717          	auipc	a4,0x31
    80014618:	a2073a23          	sd	zero,-1484(a4) # 80045048 <excpt+0x38>
    8001461c:	00f91023          	sh	a5,0(s2)
    80014620:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80014624:	000807b7          	lui	a5,0x80
    80014628:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    8001462a:	07b6                	slli	a5,a5,0xd
    8001462c:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80014630:	08200593          	li	a1,130
    80014634:	00013617          	auipc	a2,0x13
    80014638:	26c60613          	addi	a2,a2,620 # 800278a0 <__func__.2+0x5038>
    8001463c:	0000e517          	auipc	a0,0xe
    80014640:	52c50513          	addi	a0,a0,1324 # 80022b68 <__func__.2+0x300>
    80014644:	62c0c0ef          	jal	80020c70 <printf>
    80014648:	00031797          	auipc	a5,0x31
    8001464c:	9c97c783          	lbu	a5,-1591(a5) # 80045011 <excpt+0x1>
    80014650:	0000e597          	auipc	a1,0xe
    80014654:	4f058593          	addi	a1,a1,1264 # 80022b40 <__func__.2+0x2d8>
    80014658:	cf91                	beqz	a5,80014674 <amo_page_fault_4+0x172>
    8001465a:	00893703          	ld	a4,8(s2)
    8001465e:	47bd                	li	a5,15
    80014660:	0000e597          	auipc	a1,0xe
    80014664:	4d058593          	addi	a1,a1,1232 # 80022b30 <__func__.2+0x2c8>
    80014668:	00f70663          	beq	a4,a5,80014674 <amo_page_fault_4+0x172>
    8001466c:	0000e597          	auipc	a1,0xe
    80014670:	4d458593          	addi	a1,a1,1236 # 80022b40 <__func__.2+0x2d8>
    80014674:	0000e517          	auipc	a0,0xe
    80014678:	50c50513          	addi	a0,a0,1292 # 80022b80 <__func__.2+0x318>
    8001467c:	5f40c0ef          	jal	80020c70 <printf>
    80014680:	00031797          	auipc	a5,0x31
    80014684:	9917c783          	lbu	a5,-1647(a5) # 80045011 <excpt+0x1>
    80014688:	c791                	beqz	a5,80014694 <amo_page_fault_4+0x192>
    8001468a:	00893703          	ld	a4,8(s2)
    8001468e:	47bd                	li	a5,15
    80014690:	00f70c63          	beq	a4,a5,800146a8 <amo_page_fault_4+0x1a6>
    80014694:	0000e517          	auipc	a0,0xe
    80014698:	4f450513          	addi	a0,a0,1268 # 80022b88 <__func__.2+0x320>
    8001469c:	5d40c0ef          	jal	80020c70 <printf>
    800146a0:	02900513          	li	a0,41
    800146a4:	45d0b0ef          	jal	80020300 <putchar>
    800146a8:	4529                	li	a0,10
    800146aa:	4570b0ef          	jal	80020300 <putchar>
    800146ae:	c499                	beqz	s1,800146bc <amo_page_fault_4+0x1ba>
    800146b0:	00031797          	auipc	a5,0x31
    800146b4:	9617c783          	lbu	a5,-1695(a5) # 80045011 <excpt+0x1>
    800146b8:	4481                	li	s1,0
    800146ba:	ebcd                	bnez	a5,8001476c <amo_page_fault_4+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800146bc:	0330000f          	fence	rw,rw
    800146c0:	4785                	li	a5,1
    800146c2:	00031717          	auipc	a4,0x31
    800146c6:	98073323          	sd	zero,-1658(a4) # 80045048 <excpt+0x38>
    800146ca:	00f91023          	sh	a5,0(s2)
    800146ce:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800146d2:	1782                	slli	a5,a5,0x20
    800146d4:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    800146d8:	08200593          	li	a1,130
    800146dc:	00013617          	auipc	a2,0x13
    800146e0:	1f460613          	addi	a2,a2,500 # 800278d0 <__func__.2+0x5068>
    800146e4:	0000e517          	auipc	a0,0xe
    800146e8:	48450513          	addi	a0,a0,1156 # 80022b68 <__func__.2+0x300>
    800146ec:	5840c0ef          	jal	80020c70 <printf>
    800146f0:	00031797          	auipc	a5,0x31
    800146f4:	9217c783          	lbu	a5,-1759(a5) # 80045011 <excpt+0x1>
    800146f8:	0000e597          	auipc	a1,0xe
    800146fc:	44858593          	addi	a1,a1,1096 # 80022b40 <__func__.2+0x2d8>
    80014700:	e789                	bnez	a5,8001470a <amo_page_fault_4+0x208>
    80014702:	0000e597          	auipc	a1,0xe
    80014706:	42e58593          	addi	a1,a1,1070 # 80022b30 <__func__.2+0x2c8>
    8001470a:	0000e517          	auipc	a0,0xe
    8001470e:	47650513          	addi	a0,a0,1142 # 80022b80 <__func__.2+0x318>
    80014712:	55e0c0ef          	jal	80020c70 <printf>
    80014716:	00031797          	auipc	a5,0x31
    8001471a:	8fb7c783          	lbu	a5,-1797(a5) # 80045011 <excpt+0x1>
    8001471e:	efa9                	bnez	a5,80014778 <amo_page_fault_4+0x276>
    80014720:	4529                	li	a0,10
    80014722:	3df0b0ef          	jal	80020300 <putchar>
    80014726:	c491                	beqz	s1,80014732 <amo_page_fault_4+0x230>
    80014728:	00031797          	auipc	a5,0x31
    8001472c:	8e97c783          	lbu	a5,-1815(a5) # 80045011 <excpt+0x1>
    80014730:	cb85                	beqz	a5,80014760 <amo_page_fault_4+0x25e>
    80014732:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014734:	0000e597          	auipc	a1,0xe
    80014738:	40c58593          	addi	a1,a1,1036 # 80022b40 <__func__.2+0x2d8>
    8001473c:	0000e517          	auipc	a0,0xe
    80014740:	4ac50513          	addi	a0,a0,1196 # 80022be8 <__func__.2+0x380>
    80014744:	52c0c0ef          	jal	80020c70 <printf>
    80014748:	4511                	li	a0,4
    8001474a:	b8eec0ef          	jal	80000ad8 <goto_priv>
    8001474e:	c5bec0ef          	jal	800013a8 <reset_state>
}
    80014752:	60e2                	ld	ra,24(sp)
    80014754:	8522                	mv	a0,s0
    80014756:	6442                	ld	s0,16(sp)
    80014758:	64a2                	ld	s1,8(sp)
    8001475a:	6902                	ld	s2,0(sp)
    8001475c:	6105                	addi	sp,sp,32
    8001475e:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80014760:	4405                	li	s0,1
    TEST_END();
    80014762:	0000e597          	auipc	a1,0xe
    80014766:	3ce58593          	addi	a1,a1,974 # 80022b30 <__func__.2+0x2c8>
    8001476a:	bfc9                	j	8001473c <amo_page_fault_4+0x23a>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    8001476c:	00893483          	ld	s1,8(s2)
    80014770:	14c5                	addi	s1,s1,-15
    80014772:	0014b493          	seqz	s1,s1
    80014776:	b799                	j	800146bc <amo_page_fault_4+0x1ba>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80014778:	0000e517          	auipc	a0,0xe
    8001477c:	41050513          	addi	a0,a0,1040 # 80022b88 <__func__.2+0x320>
    80014780:	4f00c0ef          	jal	80020c70 <printf>
    80014784:	02900513          	li	a0,41
    80014788:	3790b0ef          	jal	80020300 <putchar>
    8001478c:	bf51                	j	80014720 <amo_page_fault_4+0x21e>

000000008001478e <amo_page_fault_5>:

bool amo_page_fault_5(){
    8001478e:	1101                	addi	sp,sp,-32

    TEST_START();
    80014790:	0000d597          	auipc	a1,0xd
    80014794:	4e858593          	addi	a1,a1,1256 # 80021c78 <__func__.1>
    80014798:	0000e517          	auipc	a0,0xe
    8001479c:	3b850513          	addi	a0,a0,952 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_5(){
    800147a0:	ec06                	sd	ra,24(sp)
    800147a2:	e822                	sd	s0,16(sp)
    800147a4:	e426                	sd	s1,8(sp)
    TEST_START();
    800147a6:	4ca0c0ef          	jal	80020c70 <printf>
    800147aa:	4529                	li	a0,10
    800147ac:	3550b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800147b0:	450d                	li	a0,3
    800147b2:	b26ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800147b6:	e2beb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800147ba:	868ec0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800147be:	4509                	li	a0,2
    800147c0:	b18ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800147c4:	eedeb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800147c8:	4511                	li	a0,4
    800147ca:	b0eec0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800147ce:	000407b7          	lui	a5,0x40
    800147d2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800147d6:	4509                	li	a0,2
    800147d8:	b00ec0ef          	jal	80000ad8 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    800147dc:	0330000f          	fence	rw,rw
    800147e0:	00031417          	auipc	s0,0x31
    800147e4:	83040413          	addi	s0,s0,-2000 # 80045010 <excpt>
    800147e8:	4785                	li	a5,1
    800147ea:	00031717          	auipc	a4,0x31
    800147ee:	84073f23          	sd	zero,-1954(a4) # 80045048 <excpt+0x38>
    800147f2:	00f41023          	sh	a5,0(s0)
    800147f6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800147fa:	000807b7          	lui	a5,0x80
    800147fe:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014800:	4701                	li	a4,0
    80014802:	07b6                	slli	a5,a5,0xd
    80014804:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80014808:	08200593          	li	a1,130
    8001480c:	00013617          	auipc	a2,0x13
    80014810:	0fc60613          	addi	a2,a2,252 # 80027908 <__func__.2+0x50a0>
    80014814:	0000e517          	auipc	a0,0xe
    80014818:	35450513          	addi	a0,a0,852 # 80022b68 <__func__.2+0x300>
    8001481c:	4540c0ef          	jal	80020c70 <printf>
    80014820:	00030797          	auipc	a5,0x30
    80014824:	7f17c783          	lbu	a5,2033(a5) # 80045011 <excpt+0x1>
    80014828:	0000e597          	auipc	a1,0xe
    8001482c:	31858593          	addi	a1,a1,792 # 80022b40 <__func__.2+0x2d8>
    80014830:	cf89                	beqz	a5,8001484a <amo_page_fault_5+0xbc>
    80014832:	6418                	ld	a4,8(s0)
    80014834:	47bd                	li	a5,15
    80014836:	0000e597          	auipc	a1,0xe
    8001483a:	2fa58593          	addi	a1,a1,762 # 80022b30 <__func__.2+0x2c8>
    8001483e:	00f70663          	beq	a4,a5,8001484a <amo_page_fault_5+0xbc>
    80014842:	0000e597          	auipc	a1,0xe
    80014846:	2fe58593          	addi	a1,a1,766 # 80022b40 <__func__.2+0x2d8>
    8001484a:	0000e517          	auipc	a0,0xe
    8001484e:	33650513          	addi	a0,a0,822 # 80022b80 <__func__.2+0x318>
    80014852:	41e0c0ef          	jal	80020c70 <printf>
    80014856:	00030797          	auipc	a5,0x30
    8001485a:	7bb7c783          	lbu	a5,1979(a5) # 80045011 <excpt+0x1>
    8001485e:	c789                	beqz	a5,80014868 <amo_page_fault_5+0xda>
    80014860:	6418                	ld	a4,8(s0)
    80014862:	47bd                	li	a5,15
    80014864:	00f70c63          	beq	a4,a5,8001487c <amo_page_fault_5+0xee>
    80014868:	0000e517          	auipc	a0,0xe
    8001486c:	32050513          	addi	a0,a0,800 # 80022b88 <__func__.2+0x320>
    80014870:	4000c0ef          	jal	80020c70 <printf>
    80014874:	02900513          	li	a0,41
    80014878:	2890b0ef          	jal	80020300 <putchar>
    8001487c:	4529                	li	a0,10
    8001487e:	2830b0ef          	jal	80020300 <putchar>
    80014882:	00030497          	auipc	s1,0x30
    80014886:	78f4c483          	lbu	s1,1935(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001488a:	0000e597          	auipc	a1,0xe
    8001488e:	2b658593          	addi	a1,a1,694 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80014892:	cc91                	beqz	s1,800148ae <amo_page_fault_5+0x120>
    80014894:	6418                	ld	a4,8(s0)
    80014896:	47bd                	li	a5,15
    TEST_END();
    80014898:	0000e597          	auipc	a1,0xe
    8001489c:	29858593          	addi	a1,a1,664 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    800148a0:	00f70763          	beq	a4,a5,800148ae <amo_page_fault_5+0x120>
    800148a4:	4481                	li	s1,0
    TEST_END();
    800148a6:	0000e597          	auipc	a1,0xe
    800148aa:	29a58593          	addi	a1,a1,666 # 80022b40 <__func__.2+0x2d8>
    800148ae:	0000e517          	auipc	a0,0xe
    800148b2:	33a50513          	addi	a0,a0,826 # 80022be8 <__func__.2+0x380>
    800148b6:	3ba0c0ef          	jal	80020c70 <printf>
    800148ba:	4511                	li	a0,4
    800148bc:	a1cec0ef          	jal	80000ad8 <goto_priv>
    800148c0:	ae9ec0ef          	jal	800013a8 <reset_state>
}
    800148c4:	60e2                	ld	ra,24(sp)
    800148c6:	6442                	ld	s0,16(sp)
    800148c8:	8526                	mv	a0,s1
    800148ca:	64a2                	ld	s1,8(sp)
    800148cc:	6105                	addi	sp,sp,32
    800148ce:	8082                	ret

00000000800148d0 <amo_page_fault_6>:

bool amo_page_fault_6(){
    800148d0:	1141                	addi	sp,sp,-16

    TEST_START();
    800148d2:	0000d597          	auipc	a1,0xd
    800148d6:	3be58593          	addi	a1,a1,958 # 80021c90 <__func__.0>
    800148da:	0000e517          	auipc	a0,0xe
    800148de:	27650513          	addi	a0,a0,630 # 80022b50 <__func__.2+0x2e8>
bool amo_page_fault_6(){
    800148e2:	e406                	sd	ra,8(sp)
    800148e4:	e022                	sd	s0,0(sp)
    TEST_START();
    800148e6:	38a0c0ef          	jal	80020c70 <printf>
    800148ea:	4529                	li	a0,10
    800148ec:	2150b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800148f0:	450d                	li	a0,3
    800148f2:	9e6ec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800148f6:	cebeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800148fa:	f29eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800148fe:	4509                	li	a0,2
    80014900:	9d8ec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014904:	dadeb0ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80014908:	4511                	li	a0,4
    8001490a:	9ceec0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001490e:	000407b7          	lui	a5,0x40
    80014912:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80014916:	4509                	li	a0,2
    80014918:	9c0ec0ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    8001491c:	0330000f          	fence	rw,rw
    80014920:	4785                	li	a5,1
    80014922:	00030717          	auipc	a4,0x30
    80014926:	72073323          	sd	zero,1830(a4) # 80045048 <excpt+0x38>
    8001492a:	00030717          	auipc	a4,0x30
    8001492e:	6ef71323          	sh	a5,1766(a4) # 80045010 <excpt>
    80014932:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80014936:	000807b7          	lui	a5,0x80
    8001493a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001493c:	4701                	li	a4,0
    8001493e:	07b6                	slli	a5,a5,0xd
    80014940:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80014944:	08200593          	li	a1,130
    80014948:	00013617          	auipc	a2,0x13
    8001494c:	01060613          	addi	a2,a2,16 # 80027958 <__func__.2+0x50f0>
    80014950:	0000e517          	auipc	a0,0xe
    80014954:	21850513          	addi	a0,a0,536 # 80022b68 <__func__.2+0x300>
    80014958:	3180c0ef          	jal	80020c70 <printf>
    8001495c:	00030797          	auipc	a5,0x30
    80014960:	6b57c783          	lbu	a5,1717(a5) # 80045011 <excpt+0x1>
    80014964:	0000e597          	auipc	a1,0xe
    80014968:	1cc58593          	addi	a1,a1,460 # 80022b30 <__func__.2+0x2c8>
    8001496c:	c789                	beqz	a5,80014976 <amo_page_fault_6+0xa6>
    8001496e:	0000e597          	auipc	a1,0xe
    80014972:	1d258593          	addi	a1,a1,466 # 80022b40 <__func__.2+0x2d8>
    80014976:	0000e517          	auipc	a0,0xe
    8001497a:	20a50513          	addi	a0,a0,522 # 80022b80 <__func__.2+0x318>
    8001497e:	2f20c0ef          	jal	80020c70 <printf>
    80014982:	00030797          	auipc	a5,0x30
    80014986:	68f7c783          	lbu	a5,1679(a5) # 80045011 <excpt+0x1>
    8001498a:	e7a1                	bnez	a5,800149d2 <amo_page_fault_6+0x102>
    8001498c:	4529                	li	a0,10
    8001498e:	1730b0ef          	jal	80020300 <putchar>
    80014992:	00030797          	auipc	a5,0x30
    80014996:	67f7c783          	lbu	a5,1663(a5) # 80045011 <excpt+0x1>
    8001499a:	e795                	bnez	a5,800149c6 <amo_page_fault_6+0xf6>
    8001499c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001499e:	0000e597          	auipc	a1,0xe
    800149a2:	19258593          	addi	a1,a1,402 # 80022b30 <__func__.2+0x2c8>
    800149a6:	0000e517          	auipc	a0,0xe
    800149aa:	24250513          	addi	a0,a0,578 # 80022be8 <__func__.2+0x380>
    800149ae:	2c20c0ef          	jal	80020c70 <printf>
    800149b2:	4511                	li	a0,4
    800149b4:	924ec0ef          	jal	80000ad8 <goto_priv>
    800149b8:	9f1ec0ef          	jal	800013a8 <reset_state>
}
    800149bc:	60a2                	ld	ra,8(sp)
    800149be:	8522                	mv	a0,s0
    800149c0:	6402                	ld	s0,0(sp)
    800149c2:	0141                	addi	sp,sp,16
    800149c4:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800149c6:	4401                	li	s0,0
    TEST_END();
    800149c8:	0000e597          	auipc	a1,0xe
    800149cc:	17858593          	addi	a1,a1,376 # 80022b40 <__func__.2+0x2d8>
    800149d0:	bfd9                	j	800149a6 <amo_page_fault_6+0xd6>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800149d2:	0000e517          	auipc	a0,0xe
    800149d6:	1b650513          	addi	a0,a0,438 # 80022b88 <__func__.2+0x320>
    800149da:	2960c0ef          	jal	80020c70 <printf>
    800149de:	02900513          	li	a0,41
    800149e2:	11f0b0ef          	jal	80020300 <putchar>
    800149e6:	b75d                	j	8001498c <amo_page_fault_6+0xbc>

00000000800149e8 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    800149e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800149ea:	0000d597          	auipc	a1,0xd
    800149ee:	2be58593          	addi	a1,a1,702 # 80021ca8 <__func__.37>
    800149f2:	0000e517          	auipc	a0,0xe
    800149f6:	15e50513          	addi	a0,a0,350 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_1(){
    800149fa:	ec06                	sd	ra,24(sp)
    800149fc:	e822                	sd	s0,16(sp)
    800149fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80014a00:	2700c0ef          	jal	80020c70 <printf>
    80014a04:	4529                	li	a0,10
    80014a06:	0fb0b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014a0a:	450d                	li	a0,3
    80014a0c:	8ccec0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014a10:	bd1eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014a14:	e0feb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014a18:	4509                	li	a0,2
    80014a1a:	8beec0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014a1e:	c93eb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014a22:	450d                	li	a0,3
    80014a24:	8b4ec0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a28:	4509                	li	a0,2
    80014a2a:	fcfeb0ef          	jal	800009f8 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80014a2e:	0330000f          	fence	rw,rw
    80014a32:	00030417          	auipc	s0,0x30
    80014a36:	5de40413          	addi	s0,s0,1502 # 80045010 <excpt>
    80014a3a:	4785                	li	a5,1
    80014a3c:	00030717          	auipc	a4,0x30
    80014a40:	60073623          	sd	zero,1548(a4) # 80045048 <excpt+0x38>
    80014a44:	00f41023          	sh	a5,0(s0)
    80014a48:	0330000f          	fence	rw,rw
    asm volatile(
    80014a4c:	001007b7          	lui	a5,0x100
    80014a50:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014a54:	07b2                	slli	a5,a5,0xc
    80014a56:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80014a5a:	08200593          	li	a1,130
    80014a5e:	00013617          	auipc	a2,0x13
    80014a62:	f4260613          	addi	a2,a2,-190 # 800279a0 <__func__.2+0x5138>
    80014a66:	0000e517          	auipc	a0,0xe
    80014a6a:	10250513          	addi	a0,a0,258 # 80022b68 <__func__.2+0x300>
    80014a6e:	2020c0ef          	jal	80020c70 <printf>
    80014a72:	00030797          	auipc	a5,0x30
    80014a76:	59f7c783          	lbu	a5,1439(a5) # 80045011 <excpt+0x1>
    80014a7a:	0000e597          	auipc	a1,0xe
    80014a7e:	0c658593          	addi	a1,a1,198 # 80022b40 <__func__.2+0x2d8>
    80014a82:	cf89                	beqz	a5,80014a9c <load_guest_page_fault_1+0xb4>
    80014a84:	6418                	ld	a4,8(s0)
    80014a86:	47d5                	li	a5,21
    80014a88:	0000e597          	auipc	a1,0xe
    80014a8c:	0a858593          	addi	a1,a1,168 # 80022b30 <__func__.2+0x2c8>
    80014a90:	00f70663          	beq	a4,a5,80014a9c <load_guest_page_fault_1+0xb4>
    80014a94:	0000e597          	auipc	a1,0xe
    80014a98:	0ac58593          	addi	a1,a1,172 # 80022b40 <__func__.2+0x2d8>
    80014a9c:	0000e517          	auipc	a0,0xe
    80014aa0:	0e450513          	addi	a0,a0,228 # 80022b80 <__func__.2+0x318>
    80014aa4:	1cc0c0ef          	jal	80020c70 <printf>
    80014aa8:	00030797          	auipc	a5,0x30
    80014aac:	5697c783          	lbu	a5,1385(a5) # 80045011 <excpt+0x1>
    80014ab0:	c789                	beqz	a5,80014aba <load_guest_page_fault_1+0xd2>
    80014ab2:	6418                	ld	a4,8(s0)
    80014ab4:	47d5                	li	a5,21
    80014ab6:	00f70c63          	beq	a4,a5,80014ace <load_guest_page_fault_1+0xe6>
    80014aba:	0000e517          	auipc	a0,0xe
    80014abe:	0ce50513          	addi	a0,a0,206 # 80022b88 <__func__.2+0x320>
    80014ac2:	1ae0c0ef          	jal	80020c70 <printf>
    80014ac6:	02900513          	li	a0,41
    80014aca:	0370b0ef          	jal	80020300 <putchar>
    80014ace:	4529                	li	a0,10
    80014ad0:	0310b0ef          	jal	80020300 <putchar>
    80014ad4:	00030797          	auipc	a5,0x30
    80014ad8:	53d7c783          	lbu	a5,1341(a5) # 80045011 <excpt+0x1>
    80014adc:	4481                	li	s1,0
    80014ade:	c789                	beqz	a5,80014ae8 <load_guest_page_fault_1+0x100>
    80014ae0:	6404                	ld	s1,8(s0)
    80014ae2:	14ad                	addi	s1,s1,-21
    80014ae4:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80014ae8:	0330000f          	fence	rw,rw
    80014aec:	4785                	li	a5,1
    80014aee:	00030717          	auipc	a4,0x30
    80014af2:	54073d23          	sd	zero,1370(a4) # 80045048 <excpt+0x38>
    80014af6:	00f41023          	sh	a5,0(s0)
    80014afa:	0330000f          	fence	rw,rw
    asm volatile(
    80014afe:	001007b7          	lui	a5,0x100
    80014b02:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014b06:	07b2                	slli	a5,a5,0xc
    80014b08:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80014b0c:	08200593          	li	a1,130
    80014b10:	00013617          	auipc	a2,0x13
    80014b14:	ee060613          	addi	a2,a2,-288 # 800279f0 <__func__.2+0x5188>
    80014b18:	0000e517          	auipc	a0,0xe
    80014b1c:	05050513          	addi	a0,a0,80 # 80022b68 <__func__.2+0x300>
    80014b20:	1500c0ef          	jal	80020c70 <printf>
    80014b24:	00030797          	auipc	a5,0x30
    80014b28:	4ed7c783          	lbu	a5,1261(a5) # 80045011 <excpt+0x1>
    80014b2c:	0000e597          	auipc	a1,0xe
    80014b30:	01458593          	addi	a1,a1,20 # 80022b40 <__func__.2+0x2d8>
    80014b34:	cf89                	beqz	a5,80014b4e <load_guest_page_fault_1+0x166>
    80014b36:	6418                	ld	a4,8(s0)
    80014b38:	47d5                	li	a5,21
    80014b3a:	0000e597          	auipc	a1,0xe
    80014b3e:	ff658593          	addi	a1,a1,-10 # 80022b30 <__func__.2+0x2c8>
    80014b42:	00f70663          	beq	a4,a5,80014b4e <load_guest_page_fault_1+0x166>
    80014b46:	0000e597          	auipc	a1,0xe
    80014b4a:	ffa58593          	addi	a1,a1,-6 # 80022b40 <__func__.2+0x2d8>
    80014b4e:	0000e517          	auipc	a0,0xe
    80014b52:	03250513          	addi	a0,a0,50 # 80022b80 <__func__.2+0x318>
    80014b56:	11a0c0ef          	jal	80020c70 <printf>
    80014b5a:	00030797          	auipc	a5,0x30
    80014b5e:	4b77c783          	lbu	a5,1207(a5) # 80045011 <excpt+0x1>
    80014b62:	c789                	beqz	a5,80014b6c <load_guest_page_fault_1+0x184>
    80014b64:	6418                	ld	a4,8(s0)
    80014b66:	47d5                	li	a5,21
    80014b68:	00f70c63          	beq	a4,a5,80014b80 <load_guest_page_fault_1+0x198>
    80014b6c:	0000e517          	auipc	a0,0xe
    80014b70:	01c50513          	addi	a0,a0,28 # 80022b88 <__func__.2+0x320>
    80014b74:	0fc0c0ef          	jal	80020c70 <printf>
    80014b78:	02900513          	li	a0,41
    80014b7c:	7840b0ef          	jal	80020300 <putchar>
    80014b80:	4529                	li	a0,10
    80014b82:	77e0b0ef          	jal	80020300 <putchar>
    80014b86:	c095                	beqz	s1,80014baa <load_guest_page_fault_1+0x1c2>
    80014b88:	00030497          	auipc	s1,0x30
    80014b8c:	4894c483          	lbu	s1,1161(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014b90:	0000e597          	auipc	a1,0xe
    80014b94:	fb058593          	addi	a1,a1,-80 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80014b98:	cc91                	beqz	s1,80014bb4 <load_guest_page_fault_1+0x1cc>
    80014b9a:	6418                	ld	a4,8(s0)
    80014b9c:	47d5                	li	a5,21
    TEST_END();
    80014b9e:	0000e597          	auipc	a1,0xe
    80014ba2:	f9258593          	addi	a1,a1,-110 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80014ba6:	00f70763          	beq	a4,a5,80014bb4 <load_guest_page_fault_1+0x1cc>
    80014baa:	4481                	li	s1,0
    TEST_END();
    80014bac:	0000e597          	auipc	a1,0xe
    80014bb0:	f9458593          	addi	a1,a1,-108 # 80022b40 <__func__.2+0x2d8>
    80014bb4:	0000e517          	auipc	a0,0xe
    80014bb8:	03450513          	addi	a0,a0,52 # 80022be8 <__func__.2+0x380>
    80014bbc:	0b40c0ef          	jal	80020c70 <printf>
    80014bc0:	4511                	li	a0,4
    80014bc2:	f17eb0ef          	jal	80000ad8 <goto_priv>
    80014bc6:	fe2ec0ef          	jal	800013a8 <reset_state>
}
    80014bca:	60e2                	ld	ra,24(sp)
    80014bcc:	6442                	ld	s0,16(sp)
    80014bce:	8526                	mv	a0,s1
    80014bd0:	64a2                	ld	s1,8(sp)
    80014bd2:	6105                	addi	sp,sp,32
    80014bd4:	8082                	ret

0000000080014bd6 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80014bd6:	1101                	addi	sp,sp,-32

    TEST_START();
    80014bd8:	0000d597          	auipc	a1,0xd
    80014bdc:	0e858593          	addi	a1,a1,232 # 80021cc0 <__func__.35>
    80014be0:	0000e517          	auipc	a0,0xe
    80014be4:	f7050513          	addi	a0,a0,-144 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_2(){
    80014be8:	ec06                	sd	ra,24(sp)
    80014bea:	e822                	sd	s0,16(sp)
    80014bec:	e426                	sd	s1,8(sp)
    TEST_START();
    80014bee:	0820c0ef          	jal	80020c70 <printf>
    80014bf2:	4529                	li	a0,10
    80014bf4:	70c0b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014bf8:	450d                	li	a0,3
    80014bfa:	edfeb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014bfe:	9e3eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014c02:	c21eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014c06:	4509                	li	a0,2
    80014c08:	ed1eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014c0c:	aa5eb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014c10:	450d                	li	a0,3
    80014c12:	ec7eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014c16:	4509                	li	a0,2
    80014c18:	de1eb0ef          	jal	800009f8 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80014c1c:	0330000f          	fence	rw,rw
    80014c20:	00030417          	auipc	s0,0x30
    80014c24:	3f040413          	addi	s0,s0,1008 # 80045010 <excpt>
    80014c28:	4785                	li	a5,1
    80014c2a:	00030717          	auipc	a4,0x30
    80014c2e:	40073f23          	sd	zero,1054(a4) # 80045048 <excpt+0x38>
    80014c32:	00f41023          	sh	a5,0(s0)
    80014c36:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014c3a:	000807b7          	lui	a5,0x80
    80014c3e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80014c42:	001007b7          	lui	a5,0x100
    80014c46:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014c4a:	07b2                	slli	a5,a5,0xc
    80014c4c:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014c50:	08200593          	li	a1,130
    80014c54:	00013617          	auipc	a2,0x13
    80014c58:	dfc60613          	addi	a2,a2,-516 # 80027a50 <__func__.2+0x51e8>
    80014c5c:	0000e517          	auipc	a0,0xe
    80014c60:	f0c50513          	addi	a0,a0,-244 # 80022b68 <__func__.2+0x300>
    80014c64:	00c0c0ef          	jal	80020c70 <printf>
    80014c68:	00030797          	auipc	a5,0x30
    80014c6c:	3a97c783          	lbu	a5,937(a5) # 80045011 <excpt+0x1>
    80014c70:	0000e597          	auipc	a1,0xe
    80014c74:	ed058593          	addi	a1,a1,-304 # 80022b40 <__func__.2+0x2d8>
    80014c78:	cf89                	beqz	a5,80014c92 <load_guest_page_fault_2+0xbc>
    80014c7a:	6418                	ld	a4,8(s0)
    80014c7c:	47d5                	li	a5,21
    80014c7e:	0000e597          	auipc	a1,0xe
    80014c82:	eb258593          	addi	a1,a1,-334 # 80022b30 <__func__.2+0x2c8>
    80014c86:	00f70663          	beq	a4,a5,80014c92 <load_guest_page_fault_2+0xbc>
    80014c8a:	0000e597          	auipc	a1,0xe
    80014c8e:	eb658593          	addi	a1,a1,-330 # 80022b40 <__func__.2+0x2d8>
    80014c92:	0000e517          	auipc	a0,0xe
    80014c96:	eee50513          	addi	a0,a0,-274 # 80022b80 <__func__.2+0x318>
    80014c9a:	7d70b0ef          	jal	80020c70 <printf>
    80014c9e:	00030797          	auipc	a5,0x30
    80014ca2:	3737c783          	lbu	a5,883(a5) # 80045011 <excpt+0x1>
    80014ca6:	c789                	beqz	a5,80014cb0 <load_guest_page_fault_2+0xda>
    80014ca8:	6418                	ld	a4,8(s0)
    80014caa:	47d5                	li	a5,21
    80014cac:	00f70c63          	beq	a4,a5,80014cc4 <load_guest_page_fault_2+0xee>
    80014cb0:	0000e517          	auipc	a0,0xe
    80014cb4:	ed850513          	addi	a0,a0,-296 # 80022b88 <__func__.2+0x320>
    80014cb8:	7b90b0ef          	jal	80020c70 <printf>
    80014cbc:	02900513          	li	a0,41
    80014cc0:	6400b0ef          	jal	80020300 <putchar>
    80014cc4:	4529                	li	a0,10
    80014cc6:	63a0b0ef          	jal	80020300 <putchar>
    80014cca:	00030497          	auipc	s1,0x30
    80014cce:	3474c483          	lbu	s1,839(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014cd2:	0000e597          	auipc	a1,0xe
    80014cd6:	e6e58593          	addi	a1,a1,-402 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014cda:	cc91                	beqz	s1,80014cf6 <load_guest_page_fault_2+0x120>
    80014cdc:	6418                	ld	a4,8(s0)
    80014cde:	47d5                	li	a5,21
    TEST_END();
    80014ce0:	0000e597          	auipc	a1,0xe
    80014ce4:	e5058593          	addi	a1,a1,-432 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014ce8:	00f70763          	beq	a4,a5,80014cf6 <load_guest_page_fault_2+0x120>
    80014cec:	4481                	li	s1,0
    TEST_END();
    80014cee:	0000e597          	auipc	a1,0xe
    80014cf2:	e5258593          	addi	a1,a1,-430 # 80022b40 <__func__.2+0x2d8>
    80014cf6:	0000e517          	auipc	a0,0xe
    80014cfa:	ef250513          	addi	a0,a0,-270 # 80022be8 <__func__.2+0x380>
    80014cfe:	7730b0ef          	jal	80020c70 <printf>
    80014d02:	4511                	li	a0,4
    80014d04:	dd5eb0ef          	jal	80000ad8 <goto_priv>
    80014d08:	ea0ec0ef          	jal	800013a8 <reset_state>
}
    80014d0c:	60e2                	ld	ra,24(sp)
    80014d0e:	6442                	ld	s0,16(sp)
    80014d10:	8526                	mv	a0,s1
    80014d12:	64a2                	ld	s1,8(sp)
    80014d14:	6105                	addi	sp,sp,32
    80014d16:	8082                	ret

0000000080014d18 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80014d18:	1101                	addi	sp,sp,-32

    TEST_START();
    80014d1a:	0000d597          	auipc	a1,0xd
    80014d1e:	fbe58593          	addi	a1,a1,-66 # 80021cd8 <__func__.34>
    80014d22:	0000e517          	auipc	a0,0xe
    80014d26:	e2e50513          	addi	a0,a0,-466 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_3(){
    80014d2a:	ec06                	sd	ra,24(sp)
    80014d2c:	e822                	sd	s0,16(sp)
    80014d2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80014d30:	7410b0ef          	jal	80020c70 <printf>
    80014d34:	4529                	li	a0,10
    80014d36:	5ca0b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014d3a:	450d                	li	a0,3
    80014d3c:	d9deb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014d40:	8a1eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014d44:	adfeb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014d48:	4509                	li	a0,2
    80014d4a:	d8feb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014d4e:	963eb0ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014d52:	450d                	li	a0,3
    80014d54:	d85eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014d58:	4509                	li	a0,2
    80014d5a:	c9feb0ef          	jal	800009f8 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80014d5e:	0330000f          	fence	rw,rw
    80014d62:	00030417          	auipc	s0,0x30
    80014d66:	2ae40413          	addi	s0,s0,686 # 80045010 <excpt>
    80014d6a:	4785                	li	a5,1
    80014d6c:	00030717          	auipc	a4,0x30
    80014d70:	2c073e23          	sd	zero,732(a4) # 80045048 <excpt+0x38>
    80014d74:	00f41023          	sh	a5,0(s0)
    80014d78:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80014d7c:	000807b7          	lui	a5,0x80
    80014d80:	1007a073          	csrs	sstatus,a5
    80014d84:	001007b7          	lui	a5,0x100
    80014d88:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014d8c:	07b2                	slli	a5,a5,0xc
    80014d8e:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014d92:	08200593          	li	a1,130
    80014d96:	00013617          	auipc	a2,0x13
    80014d9a:	d1a60613          	addi	a2,a2,-742 # 80027ab0 <__func__.2+0x5248>
    80014d9e:	0000e517          	auipc	a0,0xe
    80014da2:	dca50513          	addi	a0,a0,-566 # 80022b68 <__func__.2+0x300>
    80014da6:	6cb0b0ef          	jal	80020c70 <printf>
    80014daa:	00030797          	auipc	a5,0x30
    80014dae:	2677c783          	lbu	a5,615(a5) # 80045011 <excpt+0x1>
    80014db2:	0000e597          	auipc	a1,0xe
    80014db6:	d8e58593          	addi	a1,a1,-626 # 80022b40 <__func__.2+0x2d8>
    80014dba:	cf89                	beqz	a5,80014dd4 <load_guest_page_fault_3+0xbc>
    80014dbc:	6418                	ld	a4,8(s0)
    80014dbe:	47d5                	li	a5,21
    80014dc0:	0000e597          	auipc	a1,0xe
    80014dc4:	d7058593          	addi	a1,a1,-656 # 80022b30 <__func__.2+0x2c8>
    80014dc8:	00f70663          	beq	a4,a5,80014dd4 <load_guest_page_fault_3+0xbc>
    80014dcc:	0000e597          	auipc	a1,0xe
    80014dd0:	d7458593          	addi	a1,a1,-652 # 80022b40 <__func__.2+0x2d8>
    80014dd4:	0000e517          	auipc	a0,0xe
    80014dd8:	dac50513          	addi	a0,a0,-596 # 80022b80 <__func__.2+0x318>
    80014ddc:	6950b0ef          	jal	80020c70 <printf>
    80014de0:	00030797          	auipc	a5,0x30
    80014de4:	2317c783          	lbu	a5,561(a5) # 80045011 <excpt+0x1>
    80014de8:	c789                	beqz	a5,80014df2 <load_guest_page_fault_3+0xda>
    80014dea:	6418                	ld	a4,8(s0)
    80014dec:	47d5                	li	a5,21
    80014dee:	00f70c63          	beq	a4,a5,80014e06 <load_guest_page_fault_3+0xee>
    80014df2:	0000e517          	auipc	a0,0xe
    80014df6:	d9650513          	addi	a0,a0,-618 # 80022b88 <__func__.2+0x320>
    80014dfa:	6770b0ef          	jal	80020c70 <printf>
    80014dfe:	02900513          	li	a0,41
    80014e02:	4fe0b0ef          	jal	80020300 <putchar>
    80014e06:	4529                	li	a0,10
    80014e08:	4f80b0ef          	jal	80020300 <putchar>
    80014e0c:	00030497          	auipc	s1,0x30
    80014e10:	2054c483          	lbu	s1,517(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80014e14:	0000e597          	auipc	a1,0xe
    80014e18:	d2c58593          	addi	a1,a1,-724 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014e1c:	cc91                	beqz	s1,80014e38 <load_guest_page_fault_3+0x120>
    80014e1e:	6418                	ld	a4,8(s0)
    80014e20:	47d5                	li	a5,21
    TEST_END();
    80014e22:	0000e597          	auipc	a1,0xe
    80014e26:	d0e58593          	addi	a1,a1,-754 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014e2a:	00f70763          	beq	a4,a5,80014e38 <load_guest_page_fault_3+0x120>
    80014e2e:	4481                	li	s1,0
    TEST_END();
    80014e30:	0000e597          	auipc	a1,0xe
    80014e34:	d1058593          	addi	a1,a1,-752 # 80022b40 <__func__.2+0x2d8>
    80014e38:	0000e517          	auipc	a0,0xe
    80014e3c:	db050513          	addi	a0,a0,-592 # 80022be8 <__func__.2+0x380>
    80014e40:	6310b0ef          	jal	80020c70 <printf>
    80014e44:	4511                	li	a0,4
    80014e46:	c93eb0ef          	jal	80000ad8 <goto_priv>
    80014e4a:	d5eec0ef          	jal	800013a8 <reset_state>
}
    80014e4e:	60e2                	ld	ra,24(sp)
    80014e50:	6442                	ld	s0,16(sp)
    80014e52:	8526                	mv	a0,s1
    80014e54:	64a2                	ld	s1,8(sp)
    80014e56:	6105                	addi	sp,sp,32
    80014e58:	8082                	ret

0000000080014e5a <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    80014e5a:	1101                	addi	sp,sp,-32

    TEST_START();
    80014e5c:	0000d597          	auipc	a1,0xd
    80014e60:	e9458593          	addi	a1,a1,-364 # 80021cf0 <__func__.33>
    80014e64:	0000e517          	auipc	a0,0xe
    80014e68:	cec50513          	addi	a0,a0,-788 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_4(){
    80014e6c:	ec06                	sd	ra,24(sp)
    80014e6e:	e822                	sd	s0,16(sp)
    80014e70:	e426                	sd	s1,8(sp)
    TEST_START();
    80014e72:	5ff0b0ef          	jal	80020c70 <printf>
    80014e76:	4529                	li	a0,10
    80014e78:	4880b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014e7c:	450d                	li	a0,3
    80014e7e:	c5beb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014e82:	f5eeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014e86:	99deb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014e8a:	4509                	li	a0,2
    80014e8c:	c4deb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014e90:	821eb0ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80014e94:	4511                	li	a0,4
    80014e96:	c43eb0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80014e9a:	000407b7          	lui	a5,0x40
    80014e9e:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    80014ea2:	450d                	li	a0,3
    80014ea4:	c35eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014ea8:	4509                	li	a0,2
    80014eaa:	b4feb0ef          	jal	800009f8 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014eae:	0330000f          	fence	rw,rw
    80014eb2:	00030417          	auipc	s0,0x30
    80014eb6:	15e40413          	addi	s0,s0,350 # 80045010 <excpt>
    80014eba:	4785                	li	a5,1
    80014ebc:	00030717          	auipc	a4,0x30
    80014ec0:	18073623          	sd	zero,396(a4) # 80045048 <excpt+0x38>
    80014ec4:	00f41023          	sh	a5,0(s0)
    80014ec8:	0330000f          	fence	rw,rw
    asm volatile(
    80014ecc:	000807b7          	lui	a5,0x80
    80014ed0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014ed2:	07b6                	slli	a5,a5,0xd
    80014ed4:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80014ed8:	08200593          	li	a1,130
    80014edc:	00013617          	auipc	a2,0x13
    80014ee0:	c4460613          	addi	a2,a2,-956 # 80027b20 <__func__.2+0x52b8>
    80014ee4:	0000e517          	auipc	a0,0xe
    80014ee8:	c8450513          	addi	a0,a0,-892 # 80022b68 <__func__.2+0x300>
    80014eec:	5850b0ef          	jal	80020c70 <printf>
    80014ef0:	00030797          	auipc	a5,0x30
    80014ef4:	1217c783          	lbu	a5,289(a5) # 80045011 <excpt+0x1>
    80014ef8:	0000e597          	auipc	a1,0xe
    80014efc:	c4858593          	addi	a1,a1,-952 # 80022b40 <__func__.2+0x2d8>
    80014f00:	cf89                	beqz	a5,80014f1a <load_guest_page_fault_4+0xc0>
    80014f02:	6418                	ld	a4,8(s0)
    80014f04:	47b5                	li	a5,13
    80014f06:	0000e597          	auipc	a1,0xe
    80014f0a:	c2a58593          	addi	a1,a1,-982 # 80022b30 <__func__.2+0x2c8>
    80014f0e:	00f70663          	beq	a4,a5,80014f1a <load_guest_page_fault_4+0xc0>
    80014f12:	0000e597          	auipc	a1,0xe
    80014f16:	c2e58593          	addi	a1,a1,-978 # 80022b40 <__func__.2+0x2d8>
    80014f1a:	0000e517          	auipc	a0,0xe
    80014f1e:	c6650513          	addi	a0,a0,-922 # 80022b80 <__func__.2+0x318>
    80014f22:	54f0b0ef          	jal	80020c70 <printf>
    80014f26:	00030797          	auipc	a5,0x30
    80014f2a:	0eb7c783          	lbu	a5,235(a5) # 80045011 <excpt+0x1>
    80014f2e:	c789                	beqz	a5,80014f38 <load_guest_page_fault_4+0xde>
    80014f30:	6418                	ld	a4,8(s0)
    80014f32:	47b5                	li	a5,13
    80014f34:	00f70c63          	beq	a4,a5,80014f4c <load_guest_page_fault_4+0xf2>
    80014f38:	0000e517          	auipc	a0,0xe
    80014f3c:	c5050513          	addi	a0,a0,-944 # 80022b88 <__func__.2+0x320>
    80014f40:	5310b0ef          	jal	80020c70 <printf>
    80014f44:	02900513          	li	a0,41
    80014f48:	3b80b0ef          	jal	80020300 <putchar>
    80014f4c:	4529                	li	a0,10
    80014f4e:	3b20b0ef          	jal	80020300 <putchar>
    80014f52:	00030497          	auipc	s1,0x30
    80014f56:	0bf4c483          	lbu	s1,191(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80014f5a:	0000e597          	auipc	a1,0xe
    80014f5e:	be658593          	addi	a1,a1,-1050 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80014f62:	cc91                	beqz	s1,80014f7e <load_guest_page_fault_4+0x124>
    80014f64:	6418                	ld	a4,8(s0)
    80014f66:	47b5                	li	a5,13
    TEST_END();
    80014f68:	0000e597          	auipc	a1,0xe
    80014f6c:	bc858593          	addi	a1,a1,-1080 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80014f70:	00f70763          	beq	a4,a5,80014f7e <load_guest_page_fault_4+0x124>
    80014f74:	4481                	li	s1,0
    TEST_END();
    80014f76:	0000e597          	auipc	a1,0xe
    80014f7a:	bca58593          	addi	a1,a1,-1078 # 80022b40 <__func__.2+0x2d8>
    80014f7e:	0000e517          	auipc	a0,0xe
    80014f82:	c6a50513          	addi	a0,a0,-918 # 80022be8 <__func__.2+0x380>
    80014f86:	4eb0b0ef          	jal	80020c70 <printf>
    80014f8a:	4511                	li	a0,4
    80014f8c:	b4deb0ef          	jal	80000ad8 <goto_priv>
    80014f90:	c18ec0ef          	jal	800013a8 <reset_state>
}
    80014f94:	60e2                	ld	ra,24(sp)
    80014f96:	6442                	ld	s0,16(sp)
    80014f98:	8526                	mv	a0,s1
    80014f9a:	64a2                	ld	s1,8(sp)
    80014f9c:	6105                	addi	sp,sp,32
    80014f9e:	8082                	ret

0000000080014fa0 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80014fa0:	1141                	addi	sp,sp,-16

    TEST_START();
    80014fa2:	0000d597          	auipc	a1,0xd
    80014fa6:	d6658593          	addi	a1,a1,-666 # 80021d08 <__func__.32>
    80014faa:	0000e517          	auipc	a0,0xe
    80014fae:	ba650513          	addi	a0,a0,-1114 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_5(){
    80014fb2:	e406                	sd	ra,8(sp)
    80014fb4:	e022                	sd	s0,0(sp)
    TEST_START();
    80014fb6:	4bb0b0ef          	jal	80020c70 <printf>
    80014fba:	4529                	li	a0,10
    80014fbc:	3440b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80014fc0:	450d                	li	a0,3
    80014fc2:	b17eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80014fc6:	e1aeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014fca:	859eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80014fce:	4509                	li	a0,2
    80014fd0:	b09eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80014fd4:	edceb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014fd8:	4511                	li	a0,4
    80014fda:	affeb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80014fde:	000407b7          	lui	a5,0x40
    80014fe2:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80014fe6:	450d                	li	a0,3
    80014fe8:	af1eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014fec:	4509                	li	a0,2
    80014fee:	a0beb0ef          	jal	800009f8 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014ff2:	0330000f          	fence	rw,rw
    80014ff6:	4785                	li	a5,1
    80014ff8:	00030717          	auipc	a4,0x30
    80014ffc:	04073823          	sd	zero,80(a4) # 80045048 <excpt+0x38>
    80015000:	00030717          	auipc	a4,0x30
    80015004:	00f71823          	sh	a5,16(a4) # 80045010 <excpt>
    80015008:	0330000f          	fence	rw,rw
    8001500c:	000807b7          	lui	a5,0x80
    80015010:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015012:	07b6                	slli	a5,a5,0xd
    80015014:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015018:	08200593          	li	a1,130
    8001501c:	00012617          	auipc	a2,0x12
    80015020:	2fc60613          	addi	a2,a2,764 # 80027318 <__func__.2+0x4ab0>
    80015024:	0000e517          	auipc	a0,0xe
    80015028:	b4450513          	addi	a0,a0,-1212 # 80022b68 <__func__.2+0x300>
    8001502c:	4450b0ef          	jal	80020c70 <printf>
    80015030:	00030797          	auipc	a5,0x30
    80015034:	fe17c783          	lbu	a5,-31(a5) # 80045011 <excpt+0x1>
    80015038:	0000e597          	auipc	a1,0xe
    8001503c:	af858593          	addi	a1,a1,-1288 # 80022b30 <__func__.2+0x2c8>
    80015040:	c789                	beqz	a5,8001504a <load_guest_page_fault_5+0xaa>
    80015042:	0000e597          	auipc	a1,0xe
    80015046:	afe58593          	addi	a1,a1,-1282 # 80022b40 <__func__.2+0x2d8>
    8001504a:	0000e517          	auipc	a0,0xe
    8001504e:	b3650513          	addi	a0,a0,-1226 # 80022b80 <__func__.2+0x318>
    80015052:	41f0b0ef          	jal	80020c70 <printf>
    80015056:	00030797          	auipc	a5,0x30
    8001505a:	fbb7c783          	lbu	a5,-69(a5) # 80045011 <excpt+0x1>
    8001505e:	e7a1                	bnez	a5,800150a6 <load_guest_page_fault_5+0x106>
    80015060:	4529                	li	a0,10
    80015062:	29e0b0ef          	jal	80020300 <putchar>
    80015066:	00030797          	auipc	a5,0x30
    8001506a:	fab7c783          	lbu	a5,-85(a5) # 80045011 <excpt+0x1>
    8001506e:	e795                	bnez	a5,8001509a <load_guest_page_fault_5+0xfa>
    80015070:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015072:	0000e597          	auipc	a1,0xe
    80015076:	abe58593          	addi	a1,a1,-1346 # 80022b30 <__func__.2+0x2c8>
    8001507a:	0000e517          	auipc	a0,0xe
    8001507e:	b6e50513          	addi	a0,a0,-1170 # 80022be8 <__func__.2+0x380>
    80015082:	3ef0b0ef          	jal	80020c70 <printf>
    80015086:	4511                	li	a0,4
    80015088:	a51eb0ef          	jal	80000ad8 <goto_priv>
    8001508c:	b1cec0ef          	jal	800013a8 <reset_state>
}
    80015090:	60a2                	ld	ra,8(sp)
    80015092:	8522                	mv	a0,s0
    80015094:	6402                	ld	s0,0(sp)
    80015096:	0141                	addi	sp,sp,16
    80015098:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001509a:	4401                	li	s0,0
    TEST_END();
    8001509c:	0000e597          	auipc	a1,0xe
    800150a0:	aa458593          	addi	a1,a1,-1372 # 80022b40 <__func__.2+0x2d8>
    800150a4:	bfd9                	j	8001507a <load_guest_page_fault_5+0xda>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800150a6:	0000e517          	auipc	a0,0xe
    800150aa:	ae250513          	addi	a0,a0,-1310 # 80022b88 <__func__.2+0x320>
    800150ae:	3c30b0ef          	jal	80020c70 <printf>
    800150b2:	02900513          	li	a0,41
    800150b6:	24a0b0ef          	jal	80020300 <putchar>
    800150ba:	b75d                	j	80015060 <load_guest_page_fault_5+0xc0>

00000000800150bc <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    800150bc:	1101                	addi	sp,sp,-32

    TEST_START();
    800150be:	0000d597          	auipc	a1,0xd
    800150c2:	c6258593          	addi	a1,a1,-926 # 80021d20 <__func__.31>
    800150c6:	0000e517          	auipc	a0,0xe
    800150ca:	a8a50513          	addi	a0,a0,-1398 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_6(){
    800150ce:	ec06                	sd	ra,24(sp)
    800150d0:	e822                	sd	s0,16(sp)
    800150d2:	e426                	sd	s1,8(sp)
    TEST_START();
    800150d4:	39d0b0ef          	jal	80020c70 <printf>
    800150d8:	4529                	li	a0,10
    800150da:	2260b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800150de:	450d                	li	a0,3
    800150e0:	9f9eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800150e4:	cfceb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800150e8:	f3aeb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800150ec:	4509                	li	a0,2
    800150ee:	9ebeb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800150f2:	dbeeb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800150f6:	4509                	li	a0,2
    800150f8:	9e1eb0ef          	jal	80000ad8 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800150fc:	0330000f          	fence	rw,rw
    80015100:	00030417          	auipc	s0,0x30
    80015104:	f1040413          	addi	s0,s0,-240 # 80045010 <excpt>
    80015108:	4785                	li	a5,1
    8001510a:	00030717          	auipc	a4,0x30
    8001510e:	f2073f23          	sd	zero,-194(a4) # 80045048 <excpt+0x38>
    80015112:	00f41023          	sh	a5,0(s0)
    80015116:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001511a:	001007b7          	lui	a5,0x100
    8001511e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015122:	07b2                	slli	a5,a5,0xc
    80015124:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80015128:	08200593          	li	a1,130
    8001512c:	00013617          	auipc	a2,0x13
    80015130:	a3460613          	addi	a2,a2,-1484 # 80027b60 <__func__.2+0x52f8>
    80015134:	0000e517          	auipc	a0,0xe
    80015138:	a3450513          	addi	a0,a0,-1484 # 80022b68 <__func__.2+0x300>
    8001513c:	3350b0ef          	jal	80020c70 <printf>
    80015140:	00030797          	auipc	a5,0x30
    80015144:	ed17c783          	lbu	a5,-303(a5) # 80045011 <excpt+0x1>
    80015148:	0000e597          	auipc	a1,0xe
    8001514c:	9f858593          	addi	a1,a1,-1544 # 80022b40 <__func__.2+0x2d8>
    80015150:	cf89                	beqz	a5,8001516a <load_guest_page_fault_6+0xae>
    80015152:	6418                	ld	a4,8(s0)
    80015154:	47d5                	li	a5,21
    80015156:	0000e597          	auipc	a1,0xe
    8001515a:	9da58593          	addi	a1,a1,-1574 # 80022b30 <__func__.2+0x2c8>
    8001515e:	00f70663          	beq	a4,a5,8001516a <load_guest_page_fault_6+0xae>
    80015162:	0000e597          	auipc	a1,0xe
    80015166:	9de58593          	addi	a1,a1,-1570 # 80022b40 <__func__.2+0x2d8>
    8001516a:	0000e517          	auipc	a0,0xe
    8001516e:	a1650513          	addi	a0,a0,-1514 # 80022b80 <__func__.2+0x318>
    80015172:	2ff0b0ef          	jal	80020c70 <printf>
    80015176:	00030797          	auipc	a5,0x30
    8001517a:	e9b7c783          	lbu	a5,-357(a5) # 80045011 <excpt+0x1>
    8001517e:	c789                	beqz	a5,80015188 <load_guest_page_fault_6+0xcc>
    80015180:	6418                	ld	a4,8(s0)
    80015182:	47d5                	li	a5,21
    80015184:	00f70c63          	beq	a4,a5,8001519c <load_guest_page_fault_6+0xe0>
    80015188:	0000e517          	auipc	a0,0xe
    8001518c:	a0050513          	addi	a0,a0,-1536 # 80022b88 <__func__.2+0x320>
    80015190:	2e10b0ef          	jal	80020c70 <printf>
    80015194:	02900513          	li	a0,41
    80015198:	1680b0ef          	jal	80020300 <putchar>
    8001519c:	4529                	li	a0,10
    8001519e:	1620b0ef          	jal	80020300 <putchar>
    800151a2:	00030797          	auipc	a5,0x30
    800151a6:	e6f7c783          	lbu	a5,-401(a5) # 80045011 <excpt+0x1>
    800151aa:	4481                	li	s1,0
    800151ac:	c789                	beqz	a5,800151b6 <load_guest_page_fault_6+0xfa>
    800151ae:	6404                	ld	s1,8(s0)
    800151b0:	14ad                	addi	s1,s1,-21
    800151b2:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800151b6:	0330000f          	fence	rw,rw
    800151ba:	4785                	li	a5,1
    800151bc:	00030717          	auipc	a4,0x30
    800151c0:	e8073623          	sd	zero,-372(a4) # 80045048 <excpt+0x38>
    800151c4:	00f41023          	sh	a5,0(s0)
    800151c8:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800151cc:	001007b7          	lui	a5,0x100
    800151d0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800151d4:	07b2                	slli	a5,a5,0xc
    800151d6:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800151da:	08200593          	li	a1,130
    800151de:	00013617          	auipc	a2,0x13
    800151e2:	9d260613          	addi	a2,a2,-1582 # 80027bb0 <__func__.2+0x5348>
    800151e6:	0000e517          	auipc	a0,0xe
    800151ea:	98250513          	addi	a0,a0,-1662 # 80022b68 <__func__.2+0x300>
    800151ee:	2830b0ef          	jal	80020c70 <printf>
    800151f2:	00030797          	auipc	a5,0x30
    800151f6:	e1f7c783          	lbu	a5,-481(a5) # 80045011 <excpt+0x1>
    800151fa:	0000e597          	auipc	a1,0xe
    800151fe:	94658593          	addi	a1,a1,-1722 # 80022b40 <__func__.2+0x2d8>
    80015202:	cf89                	beqz	a5,8001521c <load_guest_page_fault_6+0x160>
    80015204:	6418                	ld	a4,8(s0)
    80015206:	47d5                	li	a5,21
    80015208:	0000e597          	auipc	a1,0xe
    8001520c:	92858593          	addi	a1,a1,-1752 # 80022b30 <__func__.2+0x2c8>
    80015210:	00f70663          	beq	a4,a5,8001521c <load_guest_page_fault_6+0x160>
    80015214:	0000e597          	auipc	a1,0xe
    80015218:	92c58593          	addi	a1,a1,-1748 # 80022b40 <__func__.2+0x2d8>
    8001521c:	0000e517          	auipc	a0,0xe
    80015220:	96450513          	addi	a0,a0,-1692 # 80022b80 <__func__.2+0x318>
    80015224:	24d0b0ef          	jal	80020c70 <printf>
    80015228:	00030797          	auipc	a5,0x30
    8001522c:	de97c783          	lbu	a5,-535(a5) # 80045011 <excpt+0x1>
    80015230:	c789                	beqz	a5,8001523a <load_guest_page_fault_6+0x17e>
    80015232:	6418                	ld	a4,8(s0)
    80015234:	47d5                	li	a5,21
    80015236:	00f70c63          	beq	a4,a5,8001524e <load_guest_page_fault_6+0x192>
    8001523a:	0000e517          	auipc	a0,0xe
    8001523e:	94e50513          	addi	a0,a0,-1714 # 80022b88 <__func__.2+0x320>
    80015242:	22f0b0ef          	jal	80020c70 <printf>
    80015246:	02900513          	li	a0,41
    8001524a:	0b60b0ef          	jal	80020300 <putchar>
    8001524e:	4529                	li	a0,10
    80015250:	0b00b0ef          	jal	80020300 <putchar>
    80015254:	c095                	beqz	s1,80015278 <load_guest_page_fault_6+0x1bc>
    80015256:	00030497          	auipc	s1,0x30
    8001525a:	dbb4c483          	lbu	s1,-581(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001525e:	0000e597          	auipc	a1,0xe
    80015262:	8e258593          	addi	a1,a1,-1822 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80015266:	cc91                	beqz	s1,80015282 <load_guest_page_fault_6+0x1c6>
    80015268:	6418                	ld	a4,8(s0)
    8001526a:	47d5                	li	a5,21
    TEST_END();
    8001526c:	0000e597          	auipc	a1,0xe
    80015270:	8c458593          	addi	a1,a1,-1852 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80015274:	00f70763          	beq	a4,a5,80015282 <load_guest_page_fault_6+0x1c6>
    80015278:	4481                	li	s1,0
    TEST_END();
    8001527a:	0000e597          	auipc	a1,0xe
    8001527e:	8c658593          	addi	a1,a1,-1850 # 80022b40 <__func__.2+0x2d8>
    80015282:	0000e517          	auipc	a0,0xe
    80015286:	96650513          	addi	a0,a0,-1690 # 80022be8 <__func__.2+0x380>
    8001528a:	1e70b0ef          	jal	80020c70 <printf>
    8001528e:	4511                	li	a0,4
    80015290:	849eb0ef          	jal	80000ad8 <goto_priv>
    80015294:	914ec0ef          	jal	800013a8 <reset_state>
}
    80015298:	60e2                	ld	ra,24(sp)
    8001529a:	6442                	ld	s0,16(sp)
    8001529c:	8526                	mv	a0,s1
    8001529e:	64a2                	ld	s1,8(sp)
    800152a0:	6105                	addi	sp,sp,32
    800152a2:	8082                	ret

00000000800152a4 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    800152a4:	1101                	addi	sp,sp,-32

    TEST_START();
    800152a6:	0000d597          	auipc	a1,0xd
    800152aa:	a9258593          	addi	a1,a1,-1390 # 80021d38 <__func__.30>
    800152ae:	0000e517          	auipc	a0,0xe
    800152b2:	8a250513          	addi	a0,a0,-1886 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_7(){
    800152b6:	ec06                	sd	ra,24(sp)
    800152b8:	e822                	sd	s0,16(sp)
    800152ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800152bc:	1b50b0ef          	jal	80020c70 <printf>
    800152c0:	4529                	li	a0,10
    800152c2:	03e0b0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800152c6:	450d                	li	a0,3
    800152c8:	811eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800152cc:	b14eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800152d0:	d52eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800152d4:	4509                	li	a0,2
    800152d6:	803eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800152da:	bd6eb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800152de:	4509                	li	a0,2
    800152e0:	ff8eb0ef          	jal	80000ad8 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800152e4:	0330000f          	fence	rw,rw
    800152e8:	00030417          	auipc	s0,0x30
    800152ec:	d2840413          	addi	s0,s0,-728 # 80045010 <excpt>
    800152f0:	4785                	li	a5,1
    800152f2:	00030717          	auipc	a4,0x30
    800152f6:	d4073b23          	sd	zero,-682(a4) # 80045048 <excpt+0x38>
    800152fa:	00f41023          	sh	a5,0(s0)
    800152fe:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015302:	000807b7          	lui	a5,0x80
    80015306:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8001530a:	001007b7          	lui	a5,0x100
    8001530e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015312:	07b2                	slli	a5,a5,0xc
    80015314:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80015318:	08200593          	li	a1,130
    8001531c:	00013617          	auipc	a2,0x13
    80015320:	8ec60613          	addi	a2,a2,-1812 # 80027c08 <__func__.2+0x53a0>
    80015324:	0000e517          	auipc	a0,0xe
    80015328:	84450513          	addi	a0,a0,-1980 # 80022b68 <__func__.2+0x300>
    8001532c:	1450b0ef          	jal	80020c70 <printf>
    80015330:	00030797          	auipc	a5,0x30
    80015334:	ce17c783          	lbu	a5,-799(a5) # 80045011 <excpt+0x1>
    80015338:	0000e597          	auipc	a1,0xe
    8001533c:	80858593          	addi	a1,a1,-2040 # 80022b40 <__func__.2+0x2d8>
    80015340:	cf89                	beqz	a5,8001535a <load_guest_page_fault_7+0xb6>
    80015342:	6418                	ld	a4,8(s0)
    80015344:	47d5                	li	a5,21
    80015346:	0000d597          	auipc	a1,0xd
    8001534a:	7ea58593          	addi	a1,a1,2026 # 80022b30 <__func__.2+0x2c8>
    8001534e:	00f70663          	beq	a4,a5,8001535a <load_guest_page_fault_7+0xb6>
    80015352:	0000d597          	auipc	a1,0xd
    80015356:	7ee58593          	addi	a1,a1,2030 # 80022b40 <__func__.2+0x2d8>
    8001535a:	0000e517          	auipc	a0,0xe
    8001535e:	82650513          	addi	a0,a0,-2010 # 80022b80 <__func__.2+0x318>
    80015362:	10f0b0ef          	jal	80020c70 <printf>
    80015366:	00030797          	auipc	a5,0x30
    8001536a:	cab7c783          	lbu	a5,-853(a5) # 80045011 <excpt+0x1>
    8001536e:	c789                	beqz	a5,80015378 <load_guest_page_fault_7+0xd4>
    80015370:	6418                	ld	a4,8(s0)
    80015372:	47d5                	li	a5,21
    80015374:	00f70c63          	beq	a4,a5,8001538c <load_guest_page_fault_7+0xe8>
    80015378:	0000e517          	auipc	a0,0xe
    8001537c:	81050513          	addi	a0,a0,-2032 # 80022b88 <__func__.2+0x320>
    80015380:	0f10b0ef          	jal	80020c70 <printf>
    80015384:	02900513          	li	a0,41
    80015388:	7790a0ef          	jal	80020300 <putchar>
    8001538c:	4529                	li	a0,10
    8001538e:	7730a0ef          	jal	80020300 <putchar>
    80015392:	00030497          	auipc	s1,0x30
    80015396:	c7f4c483          	lbu	s1,-897(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001539a:	0000d597          	auipc	a1,0xd
    8001539e:	7a658593          	addi	a1,a1,1958 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800153a2:	cc91                	beqz	s1,800153be <load_guest_page_fault_7+0x11a>
    800153a4:	6418                	ld	a4,8(s0)
    800153a6:	47d5                	li	a5,21
    TEST_END();
    800153a8:	0000d597          	auipc	a1,0xd
    800153ac:	78858593          	addi	a1,a1,1928 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800153b0:	00f70763          	beq	a4,a5,800153be <load_guest_page_fault_7+0x11a>
    800153b4:	4481                	li	s1,0
    TEST_END();
    800153b6:	0000d597          	auipc	a1,0xd
    800153ba:	78a58593          	addi	a1,a1,1930 # 80022b40 <__func__.2+0x2d8>
    800153be:	0000e517          	auipc	a0,0xe
    800153c2:	82a50513          	addi	a0,a0,-2006 # 80022be8 <__func__.2+0x380>
    800153c6:	0ab0b0ef          	jal	80020c70 <printf>
    800153ca:	4511                	li	a0,4
    800153cc:	f0ceb0ef          	jal	80000ad8 <goto_priv>
    800153d0:	fd9eb0ef          	jal	800013a8 <reset_state>
}
    800153d4:	60e2                	ld	ra,24(sp)
    800153d6:	6442                	ld	s0,16(sp)
    800153d8:	8526                	mv	a0,s1
    800153da:	64a2                	ld	s1,8(sp)
    800153dc:	6105                	addi	sp,sp,32
    800153de:	8082                	ret

00000000800153e0 <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    800153e0:	1101                	addi	sp,sp,-32

    TEST_START();
    800153e2:	0000d597          	auipc	a1,0xd
    800153e6:	96e58593          	addi	a1,a1,-1682 # 80021d50 <__func__.29>
    800153ea:	0000d517          	auipc	a0,0xd
    800153ee:	76650513          	addi	a0,a0,1894 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_8(){
    800153f2:	ec06                	sd	ra,24(sp)
    800153f4:	e822                	sd	s0,16(sp)
    800153f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800153f8:	0790b0ef          	jal	80020c70 <printf>
    800153fc:	4529                	li	a0,10
    800153fe:	7030a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015402:	450d                	li	a0,3
    80015404:	ed4eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015408:	9d8eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001540c:	c16eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80015410:	4509                	li	a0,2
    80015412:	ec6eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015416:	a9aeb0ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001541a:	4509                	li	a0,2
    8001541c:	ebceb0ef          	jal	80000ad8 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80015420:	0330000f          	fence	rw,rw
    80015424:	00030417          	auipc	s0,0x30
    80015428:	bec40413          	addi	s0,s0,-1044 # 80045010 <excpt>
    8001542c:	4785                	li	a5,1
    8001542e:	00030717          	auipc	a4,0x30
    80015432:	c0073d23          	sd	zero,-998(a4) # 80045048 <excpt+0x38>
    80015436:	00f41023          	sh	a5,0(s0)
    8001543a:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001543e:	000807b7          	lui	a5,0x80
    80015442:	1007a073          	csrs	sstatus,a5
    80015446:	001007b7          	lui	a5,0x100
    8001544a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001544e:	07b2                	slli	a5,a5,0xc
    80015450:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80015454:	08200593          	li	a1,130
    80015458:	00013617          	auipc	a2,0x13
    8001545c:	81060613          	addi	a2,a2,-2032 # 80027c68 <__func__.2+0x5400>
    80015460:	0000d517          	auipc	a0,0xd
    80015464:	70850513          	addi	a0,a0,1800 # 80022b68 <__func__.2+0x300>
    80015468:	0090b0ef          	jal	80020c70 <printf>
    8001546c:	00030797          	auipc	a5,0x30
    80015470:	ba57c783          	lbu	a5,-1115(a5) # 80045011 <excpt+0x1>
    80015474:	0000d597          	auipc	a1,0xd
    80015478:	6cc58593          	addi	a1,a1,1740 # 80022b40 <__func__.2+0x2d8>
    8001547c:	cf89                	beqz	a5,80015496 <load_guest_page_fault_8+0xb6>
    8001547e:	6418                	ld	a4,8(s0)
    80015480:	47d5                	li	a5,21
    80015482:	0000d597          	auipc	a1,0xd
    80015486:	6ae58593          	addi	a1,a1,1710 # 80022b30 <__func__.2+0x2c8>
    8001548a:	00f70663          	beq	a4,a5,80015496 <load_guest_page_fault_8+0xb6>
    8001548e:	0000d597          	auipc	a1,0xd
    80015492:	6b258593          	addi	a1,a1,1714 # 80022b40 <__func__.2+0x2d8>
    80015496:	0000d517          	auipc	a0,0xd
    8001549a:	6ea50513          	addi	a0,a0,1770 # 80022b80 <__func__.2+0x318>
    8001549e:	7d20b0ef          	jal	80020c70 <printf>
    800154a2:	00030797          	auipc	a5,0x30
    800154a6:	b6f7c783          	lbu	a5,-1169(a5) # 80045011 <excpt+0x1>
    800154aa:	c789                	beqz	a5,800154b4 <load_guest_page_fault_8+0xd4>
    800154ac:	6418                	ld	a4,8(s0)
    800154ae:	47d5                	li	a5,21
    800154b0:	00f70c63          	beq	a4,a5,800154c8 <load_guest_page_fault_8+0xe8>
    800154b4:	0000d517          	auipc	a0,0xd
    800154b8:	6d450513          	addi	a0,a0,1748 # 80022b88 <__func__.2+0x320>
    800154bc:	7b40b0ef          	jal	80020c70 <printf>
    800154c0:	02900513          	li	a0,41
    800154c4:	63d0a0ef          	jal	80020300 <putchar>
    800154c8:	4529                	li	a0,10
    800154ca:	6370a0ef          	jal	80020300 <putchar>
    800154ce:	00030497          	auipc	s1,0x30
    800154d2:	b434c483          	lbu	s1,-1213(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800154d6:	0000d597          	auipc	a1,0xd
    800154da:	66a58593          	addi	a1,a1,1642 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800154de:	cc91                	beqz	s1,800154fa <load_guest_page_fault_8+0x11a>
    800154e0:	6418                	ld	a4,8(s0)
    800154e2:	47d5                	li	a5,21
    TEST_END();
    800154e4:	0000d597          	auipc	a1,0xd
    800154e8:	64c58593          	addi	a1,a1,1612 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800154ec:	00f70763          	beq	a4,a5,800154fa <load_guest_page_fault_8+0x11a>
    800154f0:	4481                	li	s1,0
    TEST_END();
    800154f2:	0000d597          	auipc	a1,0xd
    800154f6:	64e58593          	addi	a1,a1,1614 # 80022b40 <__func__.2+0x2d8>
    800154fa:	0000d517          	auipc	a0,0xd
    800154fe:	6ee50513          	addi	a0,a0,1774 # 80022be8 <__func__.2+0x380>
    80015502:	76e0b0ef          	jal	80020c70 <printf>
    80015506:	4511                	li	a0,4
    80015508:	dd0eb0ef          	jal	80000ad8 <goto_priv>
    8001550c:	e9deb0ef          	jal	800013a8 <reset_state>
}
    80015510:	60e2                	ld	ra,24(sp)
    80015512:	6442                	ld	s0,16(sp)
    80015514:	8526                	mv	a0,s1
    80015516:	64a2                	ld	s1,8(sp)
    80015518:	6105                	addi	sp,sp,32
    8001551a:	8082                	ret

000000008001551c <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    8001551c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001551e:	0000d597          	auipc	a1,0xd
    80015522:	84a58593          	addi	a1,a1,-1974 # 80021d68 <__func__.28>
    80015526:	0000d517          	auipc	a0,0xd
    8001552a:	62a50513          	addi	a0,a0,1578 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_9(){
    8001552e:	ec06                	sd	ra,24(sp)
    80015530:	e822                	sd	s0,16(sp)
    80015532:	e426                	sd	s1,8(sp)
    TEST_START();
    80015534:	73c0b0ef          	jal	80020c70 <printf>
    80015538:	4529                	li	a0,10
    8001553a:	5c70a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001553e:	450d                	li	a0,3
    80015540:	d98eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015544:	89ceb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015548:	adaeb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001554c:	4509                	li	a0,2
    8001554e:	d8aeb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015552:	95eeb0ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80015556:	4511                	li	a0,4
    80015558:	d80eb0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001555c:	000407b7          	lui	a5,0x40
    80015560:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80015564:	4509                	li	a0,2
    80015566:	d72eb0ef          	jal	80000ad8 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001556a:	0330000f          	fence	rw,rw
    8001556e:	00030417          	auipc	s0,0x30
    80015572:	aa240413          	addi	s0,s0,-1374 # 80045010 <excpt>
    80015576:	4785                	li	a5,1
    80015578:	00030717          	auipc	a4,0x30
    8001557c:	ac073823          	sd	zero,-1328(a4) # 80045048 <excpt+0x38>
    80015580:	00f41023          	sh	a5,0(s0)
    80015584:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80015588:	000807b7          	lui	a5,0x80
    8001558c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001558e:	07b6                	slli	a5,a5,0xd
    80015590:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80015594:	08200593          	li	a1,130
    80015598:	00012617          	auipc	a2,0x12
    8001559c:	74060613          	addi	a2,a2,1856 # 80027cd8 <__func__.2+0x5470>
    800155a0:	0000d517          	auipc	a0,0xd
    800155a4:	5c850513          	addi	a0,a0,1480 # 80022b68 <__func__.2+0x300>
    800155a8:	6c80b0ef          	jal	80020c70 <printf>
    800155ac:	00030797          	auipc	a5,0x30
    800155b0:	a657c783          	lbu	a5,-1435(a5) # 80045011 <excpt+0x1>
    800155b4:	0000d597          	auipc	a1,0xd
    800155b8:	58c58593          	addi	a1,a1,1420 # 80022b40 <__func__.2+0x2d8>
    800155bc:	cf89                	beqz	a5,800155d6 <load_guest_page_fault_9+0xba>
    800155be:	6418                	ld	a4,8(s0)
    800155c0:	47b5                	li	a5,13
    800155c2:	0000d597          	auipc	a1,0xd
    800155c6:	56e58593          	addi	a1,a1,1390 # 80022b30 <__func__.2+0x2c8>
    800155ca:	00f70663          	beq	a4,a5,800155d6 <load_guest_page_fault_9+0xba>
    800155ce:	0000d597          	auipc	a1,0xd
    800155d2:	57258593          	addi	a1,a1,1394 # 80022b40 <__func__.2+0x2d8>
    800155d6:	0000d517          	auipc	a0,0xd
    800155da:	5aa50513          	addi	a0,a0,1450 # 80022b80 <__func__.2+0x318>
    800155de:	6920b0ef          	jal	80020c70 <printf>
    800155e2:	00030797          	auipc	a5,0x30
    800155e6:	a2f7c783          	lbu	a5,-1489(a5) # 80045011 <excpt+0x1>
    800155ea:	c789                	beqz	a5,800155f4 <load_guest_page_fault_9+0xd8>
    800155ec:	6418                	ld	a4,8(s0)
    800155ee:	47b5                	li	a5,13
    800155f0:	00f70c63          	beq	a4,a5,80015608 <load_guest_page_fault_9+0xec>
    800155f4:	0000d517          	auipc	a0,0xd
    800155f8:	59450513          	addi	a0,a0,1428 # 80022b88 <__func__.2+0x320>
    800155fc:	6740b0ef          	jal	80020c70 <printf>
    80015600:	02900513          	li	a0,41
    80015604:	4fd0a0ef          	jal	80020300 <putchar>
    80015608:	4529                	li	a0,10
    8001560a:	4f70a0ef          	jal	80020300 <putchar>
    8001560e:	00030497          	auipc	s1,0x30
    80015612:	a034c483          	lbu	s1,-1533(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015616:	0000d597          	auipc	a1,0xd
    8001561a:	52a58593          	addi	a1,a1,1322 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    8001561e:	cc91                	beqz	s1,8001563a <load_guest_page_fault_9+0x11e>
    80015620:	6418                	ld	a4,8(s0)
    80015622:	47b5                	li	a5,13
    TEST_END();
    80015624:	0000d597          	auipc	a1,0xd
    80015628:	50c58593          	addi	a1,a1,1292 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    8001562c:	00f70763          	beq	a4,a5,8001563a <load_guest_page_fault_9+0x11e>
    80015630:	4481                	li	s1,0
    TEST_END();
    80015632:	0000d597          	auipc	a1,0xd
    80015636:	50e58593          	addi	a1,a1,1294 # 80022b40 <__func__.2+0x2d8>
    8001563a:	0000d517          	auipc	a0,0xd
    8001563e:	5ae50513          	addi	a0,a0,1454 # 80022be8 <__func__.2+0x380>
    80015642:	62e0b0ef          	jal	80020c70 <printf>
    80015646:	4511                	li	a0,4
    80015648:	c90eb0ef          	jal	80000ad8 <goto_priv>
    8001564c:	d5deb0ef          	jal	800013a8 <reset_state>
}
    80015650:	60e2                	ld	ra,24(sp)
    80015652:	6442                	ld	s0,16(sp)
    80015654:	8526                	mv	a0,s1
    80015656:	64a2                	ld	s1,8(sp)
    80015658:	6105                	addi	sp,sp,32
    8001565a:	8082                	ret

000000008001565c <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    8001565c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001565e:	0000c597          	auipc	a1,0xc
    80015662:	72258593          	addi	a1,a1,1826 # 80021d80 <__func__.27>
    80015666:	0000d517          	auipc	a0,0xd
    8001566a:	4ea50513          	addi	a0,a0,1258 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_10(){
    8001566e:	e406                	sd	ra,8(sp)
    80015670:	e022                	sd	s0,0(sp)
    TEST_START();
    80015672:	5fe0b0ef          	jal	80020c70 <printf>
    80015676:	4529                	li	a0,10
    80015678:	4890a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001567c:	450d                	li	a0,3
    8001567e:	c5aeb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015682:	f5fea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015686:	99ceb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001568a:	4509                	li	a0,2
    8001568c:	c4ceb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015690:	820eb0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80015694:	4511                	li	a0,4
    80015696:	c42eb0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001569a:	000407b7          	lui	a5,0x40
    8001569e:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800156a2:	4509                	li	a0,2
    800156a4:	c34eb0ef          	jal	80000ad8 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800156a8:	0330000f          	fence	rw,rw
    800156ac:	4785                	li	a5,1
    800156ae:	00030717          	auipc	a4,0x30
    800156b2:	98073d23          	sd	zero,-1638(a4) # 80045048 <excpt+0x38>
    800156b6:	00030717          	auipc	a4,0x30
    800156ba:	94f71d23          	sh	a5,-1702(a4) # 80045010 <excpt>
    800156be:	0330000f          	fence	rw,rw
    800156c2:	000807b7          	lui	a5,0x80
    800156c6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800156c8:	07b6                	slli	a5,a5,0xd
    800156ca:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800156ce:	08200593          	li	a1,130
    800156d2:	00012617          	auipc	a2,0x12
    800156d6:	63e60613          	addi	a2,a2,1598 # 80027d10 <__func__.2+0x54a8>
    800156da:	0000d517          	auipc	a0,0xd
    800156de:	48e50513          	addi	a0,a0,1166 # 80022b68 <__func__.2+0x300>
    800156e2:	58e0b0ef          	jal	80020c70 <printf>
    800156e6:	00030797          	auipc	a5,0x30
    800156ea:	92b7c783          	lbu	a5,-1749(a5) # 80045011 <excpt+0x1>
    800156ee:	0000d597          	auipc	a1,0xd
    800156f2:	44258593          	addi	a1,a1,1090 # 80022b30 <__func__.2+0x2c8>
    800156f6:	c789                	beqz	a5,80015700 <load_guest_page_fault_10+0xa4>
    800156f8:	0000d597          	auipc	a1,0xd
    800156fc:	44858593          	addi	a1,a1,1096 # 80022b40 <__func__.2+0x2d8>
    80015700:	0000d517          	auipc	a0,0xd
    80015704:	48050513          	addi	a0,a0,1152 # 80022b80 <__func__.2+0x318>
    80015708:	5680b0ef          	jal	80020c70 <printf>
    8001570c:	00030797          	auipc	a5,0x30
    80015710:	9057c783          	lbu	a5,-1787(a5) # 80045011 <excpt+0x1>
    80015714:	e7a1                	bnez	a5,8001575c <load_guest_page_fault_10+0x100>
    80015716:	4529                	li	a0,10
    80015718:	3e90a0ef          	jal	80020300 <putchar>
    8001571c:	00030797          	auipc	a5,0x30
    80015720:	8f57c783          	lbu	a5,-1803(a5) # 80045011 <excpt+0x1>
    80015724:	e795                	bnez	a5,80015750 <load_guest_page_fault_10+0xf4>
    80015726:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015728:	0000d597          	auipc	a1,0xd
    8001572c:	40858593          	addi	a1,a1,1032 # 80022b30 <__func__.2+0x2c8>
    80015730:	0000d517          	auipc	a0,0xd
    80015734:	4b850513          	addi	a0,a0,1208 # 80022be8 <__func__.2+0x380>
    80015738:	5380b0ef          	jal	80020c70 <printf>
    8001573c:	4511                	li	a0,4
    8001573e:	b9aeb0ef          	jal	80000ad8 <goto_priv>
    80015742:	c67eb0ef          	jal	800013a8 <reset_state>
}
    80015746:	60a2                	ld	ra,8(sp)
    80015748:	8522                	mv	a0,s0
    8001574a:	6402                	ld	s0,0(sp)
    8001574c:	0141                	addi	sp,sp,16
    8001574e:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80015750:	4401                	li	s0,0
    TEST_END();
    80015752:	0000d597          	auipc	a1,0xd
    80015756:	3ee58593          	addi	a1,a1,1006 # 80022b40 <__func__.2+0x2d8>
    8001575a:	bfd9                	j	80015730 <load_guest_page_fault_10+0xd4>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    8001575c:	0000d517          	auipc	a0,0xd
    80015760:	42c50513          	addi	a0,a0,1068 # 80022b88 <__func__.2+0x320>
    80015764:	50c0b0ef          	jal	80020c70 <printf>
    80015768:	02900513          	li	a0,41
    8001576c:	3950a0ef          	jal	80020300 <putchar>
    80015770:	b75d                	j	80015716 <load_guest_page_fault_10+0xba>

0000000080015772 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80015772:	1101                	addi	sp,sp,-32

    TEST_START();
    80015774:	0000c597          	auipc	a1,0xc
    80015778:	62c58593          	addi	a1,a1,1580 # 80021da0 <__func__.26>
    8001577c:	0000d517          	auipc	a0,0xd
    80015780:	3d450513          	addi	a0,a0,980 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_11(){
    80015784:	ec06                	sd	ra,24(sp)
    80015786:	e822                	sd	s0,16(sp)
    80015788:	e426                	sd	s1,8(sp)
    TEST_START();
    8001578a:	4e60b0ef          	jal	80020c70 <printf>
    8001578e:	4529                	li	a0,10
    80015790:	3710a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015794:	450d                	li	a0,3
    80015796:	b42eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001579a:	e47ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001579e:	884eb0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800157a2:	4509                	li	a0,2
    800157a4:	b34eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800157a8:	f09ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800157ac:	4511                	li	a0,4
    800157ae:	b2aeb0ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800157b2:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800157b6:	450d                	li	a0,3
    800157b8:	b20eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800157bc:	4509                	li	a0,2
    800157be:	a3aeb0ef          	jal	800009f8 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800157c2:	0330000f          	fence	rw,rw
    800157c6:	00030417          	auipc	s0,0x30
    800157ca:	84a40413          	addi	s0,s0,-1974 # 80045010 <excpt>
    800157ce:	4785                	li	a5,1
    800157d0:	00030717          	auipc	a4,0x30
    800157d4:	86073c23          	sd	zero,-1928(a4) # 80045048 <excpt+0x38>
    800157d8:	00f41023          	sh	a5,0(s0)
    800157dc:	0330000f          	fence	rw,rw
    asm volatile(
    800157e0:	400197b7          	lui	a5,0x40019
    800157e4:	078a                	slli	a5,a5,0x2
    800157e6:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800157ea:	08200593          	li	a1,130
    800157ee:	00012617          	auipc	a2,0x12
    800157f2:	1b260613          	addi	a2,a2,434 # 800279a0 <__func__.2+0x5138>
    800157f6:	0000d517          	auipc	a0,0xd
    800157fa:	37250513          	addi	a0,a0,882 # 80022b68 <__func__.2+0x300>
    800157fe:	4720b0ef          	jal	80020c70 <printf>
    80015802:	00030797          	auipc	a5,0x30
    80015806:	80f7c783          	lbu	a5,-2033(a5) # 80045011 <excpt+0x1>
    8001580a:	0000d597          	auipc	a1,0xd
    8001580e:	33658593          	addi	a1,a1,822 # 80022b40 <__func__.2+0x2d8>
    80015812:	cf89                	beqz	a5,8001582c <load_guest_page_fault_11+0xba>
    80015814:	6418                	ld	a4,8(s0)
    80015816:	47d5                	li	a5,21
    80015818:	0000d597          	auipc	a1,0xd
    8001581c:	31858593          	addi	a1,a1,792 # 80022b30 <__func__.2+0x2c8>
    80015820:	00f70663          	beq	a4,a5,8001582c <load_guest_page_fault_11+0xba>
    80015824:	0000d597          	auipc	a1,0xd
    80015828:	31c58593          	addi	a1,a1,796 # 80022b40 <__func__.2+0x2d8>
    8001582c:	0000d517          	auipc	a0,0xd
    80015830:	35450513          	addi	a0,a0,852 # 80022b80 <__func__.2+0x318>
    80015834:	43c0b0ef          	jal	80020c70 <printf>
    80015838:	0002f797          	auipc	a5,0x2f
    8001583c:	7d97c783          	lbu	a5,2009(a5) # 80045011 <excpt+0x1>
    80015840:	c789                	beqz	a5,8001584a <load_guest_page_fault_11+0xd8>
    80015842:	6418                	ld	a4,8(s0)
    80015844:	47d5                	li	a5,21
    80015846:	00f70c63          	beq	a4,a5,8001585e <load_guest_page_fault_11+0xec>
    8001584a:	0000d517          	auipc	a0,0xd
    8001584e:	33e50513          	addi	a0,a0,830 # 80022b88 <__func__.2+0x320>
    80015852:	41e0b0ef          	jal	80020c70 <printf>
    80015856:	02900513          	li	a0,41
    8001585a:	2a70a0ef          	jal	80020300 <putchar>
    8001585e:	4529                	li	a0,10
    80015860:	2a10a0ef          	jal	80020300 <putchar>
    80015864:	0002f497          	auipc	s1,0x2f
    80015868:	7ad4c483          	lbu	s1,1965(s1) # 80045011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    8001586c:	0000d597          	auipc	a1,0xd
    80015870:	2d458593          	addi	a1,a1,724 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80015874:	cc91                	beqz	s1,80015890 <load_guest_page_fault_11+0x11e>
    80015876:	6418                	ld	a4,8(s0)
    80015878:	47d5                	li	a5,21
    TEST_END();
    8001587a:	0000d597          	auipc	a1,0xd
    8001587e:	2b658593          	addi	a1,a1,694 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80015882:	00f70763          	beq	a4,a5,80015890 <load_guest_page_fault_11+0x11e>
    80015886:	4481                	li	s1,0
    TEST_END();
    80015888:	0000d597          	auipc	a1,0xd
    8001588c:	2b858593          	addi	a1,a1,696 # 80022b40 <__func__.2+0x2d8>
    80015890:	0000d517          	auipc	a0,0xd
    80015894:	35850513          	addi	a0,a0,856 # 80022be8 <__func__.2+0x380>
    80015898:	3d80b0ef          	jal	80020c70 <printf>
    8001589c:	4511                	li	a0,4
    8001589e:	a3aeb0ef          	jal	80000ad8 <goto_priv>
    800158a2:	b07eb0ef          	jal	800013a8 <reset_state>
}
    800158a6:	60e2                	ld	ra,24(sp)
    800158a8:	6442                	ld	s0,16(sp)
    800158aa:	8526                	mv	a0,s1
    800158ac:	64a2                	ld	s1,8(sp)
    800158ae:	6105                	addi	sp,sp,32
    800158b0:	8082                	ret

00000000800158b2 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    800158b2:	1101                	addi	sp,sp,-32

    TEST_START();
    800158b4:	0000c597          	auipc	a1,0xc
    800158b8:	50c58593          	addi	a1,a1,1292 # 80021dc0 <__func__.25>
    800158bc:	0000d517          	auipc	a0,0xd
    800158c0:	29450513          	addi	a0,a0,660 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_12(){
    800158c4:	ec06                	sd	ra,24(sp)
    800158c6:	e822                	sd	s0,16(sp)
    800158c8:	e426                	sd	s1,8(sp)
    TEST_START();
    800158ca:	3a60b0ef          	jal	80020c70 <printf>
    800158ce:	4529                	li	a0,10
    800158d0:	2310a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800158d4:	450d                	li	a0,3
    800158d6:	a02eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800158da:	d07ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800158de:	f45ea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800158e2:	4509                	li	a0,2
    800158e4:	9f4eb0ef          	jal	80000ad8 <goto_priv>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800158e8:	4511                	li	a0,4
    800158ea:	9eeeb0ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800158ee:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800158f2:	450d                	li	a0,3
    800158f4:	9e4eb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800158f8:	4509                	li	a0,2
    800158fa:	8feeb0ef          	jal	800009f8 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800158fe:	0330000f          	fence	rw,rw
    80015902:	0002f417          	auipc	s0,0x2f
    80015906:	70e40413          	addi	s0,s0,1806 # 80045010 <excpt>
    8001590a:	4785                	li	a5,1
    8001590c:	0002f717          	auipc	a4,0x2f
    80015910:	72073e23          	sd	zero,1852(a4) # 80045048 <excpt+0x38>
    80015914:	00f41023          	sh	a5,0(s0)
    80015918:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001591c:	000807b7          	lui	a5,0x80
    80015920:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80015924:	2000d5b7          	lui	a1,0x2000d
    80015928:	058e                	slli	a1,a1,0x3
    8001592a:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    8001592e:	00013517          	auipc	a0,0x13
    80015932:	dca50513          	addi	a0,a0,-566 # 800286f8 <__func__.2+0x5e90>
    80015936:	33a0b0ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001593a:	640c                	ld	a1,8(s0)
    8001593c:	0000d517          	auipc	a0,0xd
    80015940:	4f450513          	addi	a0,a0,1268 # 80022e30 <__func__.2+0x5c8>
    80015944:	32c0b0ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.triggered);
    80015948:	0002f597          	auipc	a1,0x2f
    8001594c:	6c95c583          	lbu	a1,1737(a1) # 80045011 <excpt+0x1>
    80015950:	0000d517          	auipc	a0,0xd
    80015954:	4e050513          	addi	a0,a0,1248 # 80022e30 <__func__.2+0x5c8>
    80015958:	3180b0ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001595c:	08200593          	li	a1,130
    80015960:	00012617          	auipc	a2,0x12
    80015964:	0f060613          	addi	a2,a2,240 # 80027a50 <__func__.2+0x51e8>
    80015968:	0000d517          	auipc	a0,0xd
    8001596c:	20050513          	addi	a0,a0,512 # 80022b68 <__func__.2+0x300>
    80015970:	3000b0ef          	jal	80020c70 <printf>
    80015974:	0002f797          	auipc	a5,0x2f
    80015978:	69d7c783          	lbu	a5,1693(a5) # 80045011 <excpt+0x1>
    8001597c:	0000d597          	auipc	a1,0xd
    80015980:	1c458593          	addi	a1,a1,452 # 80022b40 <__func__.2+0x2d8>
    80015984:	cf89                	beqz	a5,8001599e <load_guest_page_fault_12+0xec>
    80015986:	6418                	ld	a4,8(s0)
    80015988:	47d5                	li	a5,21
    8001598a:	0000d597          	auipc	a1,0xd
    8001598e:	1a658593          	addi	a1,a1,422 # 80022b30 <__func__.2+0x2c8>
    80015992:	00f70663          	beq	a4,a5,8001599e <load_guest_page_fault_12+0xec>
    80015996:	0000d597          	auipc	a1,0xd
    8001599a:	1aa58593          	addi	a1,a1,426 # 80022b40 <__func__.2+0x2d8>
    8001599e:	0000d517          	auipc	a0,0xd
    800159a2:	1e250513          	addi	a0,a0,482 # 80022b80 <__func__.2+0x318>
    800159a6:	2ca0b0ef          	jal	80020c70 <printf>
    800159aa:	0002f797          	auipc	a5,0x2f
    800159ae:	6677c783          	lbu	a5,1639(a5) # 80045011 <excpt+0x1>
    800159b2:	c789                	beqz	a5,800159bc <load_guest_page_fault_12+0x10a>
    800159b4:	6418                	ld	a4,8(s0)
    800159b6:	47d5                	li	a5,21
    800159b8:	00f70c63          	beq	a4,a5,800159d0 <load_guest_page_fault_12+0x11e>
    800159bc:	0000d517          	auipc	a0,0xd
    800159c0:	1cc50513          	addi	a0,a0,460 # 80022b88 <__func__.2+0x320>
    800159c4:	2ac0b0ef          	jal	80020c70 <printf>
    800159c8:	02900513          	li	a0,41
    800159cc:	1350a0ef          	jal	80020300 <putchar>
    800159d0:	4529                	li	a0,10
    800159d2:	12f0a0ef          	jal	80020300 <putchar>
    800159d6:	0002f497          	auipc	s1,0x2f
    800159da:	63b4c483          	lbu	s1,1595(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800159de:	0000d597          	auipc	a1,0xd
    800159e2:	16258593          	addi	a1,a1,354 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800159e6:	cc91                	beqz	s1,80015a02 <load_guest_page_fault_12+0x150>
    800159e8:	6418                	ld	a4,8(s0)
    800159ea:	47d5                	li	a5,21
    TEST_END();
    800159ec:	0000d597          	auipc	a1,0xd
    800159f0:	14458593          	addi	a1,a1,324 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800159f4:	00f70763          	beq	a4,a5,80015a02 <load_guest_page_fault_12+0x150>
    800159f8:	4481                	li	s1,0
    TEST_END();
    800159fa:	0000d597          	auipc	a1,0xd
    800159fe:	14658593          	addi	a1,a1,326 # 80022b40 <__func__.2+0x2d8>
    80015a02:	0000d517          	auipc	a0,0xd
    80015a06:	1e650513          	addi	a0,a0,486 # 80022be8 <__func__.2+0x380>
    80015a0a:	2660b0ef          	jal	80020c70 <printf>
    80015a0e:	4511                	li	a0,4
    80015a10:	8c8eb0ef          	jal	80000ad8 <goto_priv>
    80015a14:	995eb0ef          	jal	800013a8 <reset_state>
}
    80015a18:	60e2                	ld	ra,24(sp)
    80015a1a:	6442                	ld	s0,16(sp)
    80015a1c:	8526                	mv	a0,s1
    80015a1e:	64a2                	ld	s1,8(sp)
    80015a20:	6105                	addi	sp,sp,32
    80015a22:	8082                	ret

0000000080015a24 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80015a24:	1101                	addi	sp,sp,-32

    TEST_START();
    80015a26:	0000c597          	auipc	a1,0xc
    80015a2a:	3ba58593          	addi	a1,a1,954 # 80021de0 <__func__.24>
    80015a2e:	0000d517          	auipc	a0,0xd
    80015a32:	12250513          	addi	a0,a0,290 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_13(){
    80015a36:	ec06                	sd	ra,24(sp)
    80015a38:	e822                	sd	s0,16(sp)
    80015a3a:	e426                	sd	s1,8(sp)
    TEST_START();
    80015a3c:	2340b0ef          	jal	80020c70 <printf>
    80015a40:	4529                	li	a0,10
    80015a42:	0bf0a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015a46:	450d                	li	a0,3
    80015a48:	890eb0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015a4c:	b95ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015a50:	dd3ea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80015a54:	4509                	li	a0,2
    80015a56:	882eb0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015a5a:	c57ea0ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80015a5e:	4511                	li	a0,4
    80015a60:	878eb0ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80015a64:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80015a68:	450d                	li	a0,3
    80015a6a:	86eeb0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015a6e:	4509                	li	a0,2
    80015a70:	f89ea0ef          	jal	800009f8 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80015a74:	0330000f          	fence	rw,rw
    80015a78:	0002f417          	auipc	s0,0x2f
    80015a7c:	59840413          	addi	s0,s0,1432 # 80045010 <excpt>
    80015a80:	4785                	li	a5,1
    80015a82:	0002f717          	auipc	a4,0x2f
    80015a86:	5c073323          	sd	zero,1478(a4) # 80045048 <excpt+0x38>
    80015a8a:	00f41023          	sh	a5,0(s0)
    80015a8e:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015a92:	000807b7          	lui	a5,0x80
    80015a96:	1007a073          	csrs	sstatus,a5
    80015a9a:	400197b7          	lui	a5,0x40019
    80015a9e:	078a                	slli	a5,a5,0x2
    80015aa0:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80015aa4:	08200593          	li	a1,130
    80015aa8:	00012617          	auipc	a2,0x12
    80015aac:	00860613          	addi	a2,a2,8 # 80027ab0 <__func__.2+0x5248>
    80015ab0:	0000d517          	auipc	a0,0xd
    80015ab4:	0b850513          	addi	a0,a0,184 # 80022b68 <__func__.2+0x300>
    80015ab8:	1b80b0ef          	jal	80020c70 <printf>
    80015abc:	0002f797          	auipc	a5,0x2f
    80015ac0:	5557c783          	lbu	a5,1365(a5) # 80045011 <excpt+0x1>
    80015ac4:	0000d597          	auipc	a1,0xd
    80015ac8:	07c58593          	addi	a1,a1,124 # 80022b40 <__func__.2+0x2d8>
    80015acc:	cf89                	beqz	a5,80015ae6 <load_guest_page_fault_13+0xc2>
    80015ace:	6418                	ld	a4,8(s0)
    80015ad0:	47d5                	li	a5,21
    80015ad2:	0000d597          	auipc	a1,0xd
    80015ad6:	05e58593          	addi	a1,a1,94 # 80022b30 <__func__.2+0x2c8>
    80015ada:	00f70663          	beq	a4,a5,80015ae6 <load_guest_page_fault_13+0xc2>
    80015ade:	0000d597          	auipc	a1,0xd
    80015ae2:	06258593          	addi	a1,a1,98 # 80022b40 <__func__.2+0x2d8>
    80015ae6:	0000d517          	auipc	a0,0xd
    80015aea:	09a50513          	addi	a0,a0,154 # 80022b80 <__func__.2+0x318>
    80015aee:	1820b0ef          	jal	80020c70 <printf>
    80015af2:	0002f797          	auipc	a5,0x2f
    80015af6:	51f7c783          	lbu	a5,1311(a5) # 80045011 <excpt+0x1>
    80015afa:	c789                	beqz	a5,80015b04 <load_guest_page_fault_13+0xe0>
    80015afc:	6418                	ld	a4,8(s0)
    80015afe:	47d5                	li	a5,21
    80015b00:	00f70c63          	beq	a4,a5,80015b18 <load_guest_page_fault_13+0xf4>
    80015b04:	0000d517          	auipc	a0,0xd
    80015b08:	08450513          	addi	a0,a0,132 # 80022b88 <__func__.2+0x320>
    80015b0c:	1640b0ef          	jal	80020c70 <printf>
    80015b10:	02900513          	li	a0,41
    80015b14:	7ec0a0ef          	jal	80020300 <putchar>
    80015b18:	4529                	li	a0,10
    80015b1a:	7e60a0ef          	jal	80020300 <putchar>
    80015b1e:	0002f497          	auipc	s1,0x2f
    80015b22:	4f34c483          	lbu	s1,1267(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80015b26:	0000d597          	auipc	a1,0xd
    80015b2a:	01a58593          	addi	a1,a1,26 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80015b2e:	cc91                	beqz	s1,80015b4a <load_guest_page_fault_13+0x126>
    80015b30:	6418                	ld	a4,8(s0)
    80015b32:	47d5                	li	a5,21
    TEST_END();
    80015b34:	0000d597          	auipc	a1,0xd
    80015b38:	ffc58593          	addi	a1,a1,-4 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80015b3c:	00f70763          	beq	a4,a5,80015b4a <load_guest_page_fault_13+0x126>
    80015b40:	4481                	li	s1,0
    TEST_END();
    80015b42:	0000d597          	auipc	a1,0xd
    80015b46:	ffe58593          	addi	a1,a1,-2 # 80022b40 <__func__.2+0x2d8>
    80015b4a:	0000d517          	auipc	a0,0xd
    80015b4e:	09e50513          	addi	a0,a0,158 # 80022be8 <__func__.2+0x380>
    80015b52:	11e0b0ef          	jal	80020c70 <printf>
    80015b56:	4511                	li	a0,4
    80015b58:	f81ea0ef          	jal	80000ad8 <goto_priv>
    80015b5c:	84deb0ef          	jal	800013a8 <reset_state>
}
    80015b60:	60e2                	ld	ra,24(sp)
    80015b62:	6442                	ld	s0,16(sp)
    80015b64:	8526                	mv	a0,s1
    80015b66:	64a2                	ld	s1,8(sp)
    80015b68:	6105                	addi	sp,sp,32
    80015b6a:	8082                	ret

0000000080015b6c <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80015b6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80015b6e:	0000c597          	auipc	a1,0xc
    80015b72:	29258593          	addi	a1,a1,658 # 80021e00 <__func__.23>
    80015b76:	0000d517          	auipc	a0,0xd
    80015b7a:	fda50513          	addi	a0,a0,-38 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_14(){
    80015b7e:	ec06                	sd	ra,24(sp)
    80015b80:	e822                	sd	s0,16(sp)
    80015b82:	e426                	sd	s1,8(sp)
    TEST_START();
    80015b84:	0ec0b0ef          	jal	80020c70 <printf>
    80015b88:	4529                	li	a0,10
    80015b8a:	7760a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015b8e:	450d                	li	a0,3
    80015b90:	f49ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015b94:	a4dea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015b98:	c8bea0ef          	jal	80000822 <hpt_init>
    hspt_init();
    80015b9c:	a45ea0ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_VS);
    80015ba0:	4509                	li	a0,2
    80015ba2:	f37ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015ba6:	b0bea0ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80015baa:	4511                	li	a0,4
    80015bac:	f2dea0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015bb0:	000407b7          	lui	a5,0x40
    80015bb4:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80015bb8:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80015bbc:	450d                	li	a0,3
    80015bbe:	f1bea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015bc2:	4509                	li	a0,2
    80015bc4:	e35ea0ef          	jal	800009f8 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015bc8:	0330000f          	fence	rw,rw
    80015bcc:	0002f417          	auipc	s0,0x2f
    80015bd0:	44440413          	addi	s0,s0,1092 # 80045010 <excpt>
    80015bd4:	4785                	li	a5,1
    80015bd6:	0002f717          	auipc	a4,0x2f
    80015bda:	46073923          	sd	zero,1138(a4) # 80045048 <excpt+0x38>
    80015bde:	00f41023          	sh	a5,0(s0)
    80015be2:	0330000f          	fence	rw,rw
    asm volatile(
    80015be6:	001007b7          	lui	a5,0x100
    80015bea:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    80015bee:	07b2                	slli	a5,a5,0xc
    80015bf0:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80015bf4:	640c                	ld	a1,8(s0)
    80015bf6:	0000d517          	auipc	a0,0xd
    80015bfa:	23a50513          	addi	a0,a0,570 # 80022e30 <__func__.2+0x5c8>
    80015bfe:	0720b0ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.triggered);
    80015c02:	0002f597          	auipc	a1,0x2f
    80015c06:	40f5c583          	lbu	a1,1039(a1) # 80045011 <excpt+0x1>
    80015c0a:	0000d517          	auipc	a0,0xd
    80015c0e:	22650513          	addi	a0,a0,550 # 80022e30 <__func__.2+0x5c8>
    80015c12:	05e0b0ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80015c16:	08200593          	li	a1,130
    80015c1a:	00012617          	auipc	a2,0x12
    80015c1e:	12e60613          	addi	a2,a2,302 # 80027d48 <__func__.2+0x54e0>
    80015c22:	0000d517          	auipc	a0,0xd
    80015c26:	f4650513          	addi	a0,a0,-186 # 80022b68 <__func__.2+0x300>
    80015c2a:	0460b0ef          	jal	80020c70 <printf>
    80015c2e:	0002f797          	auipc	a5,0x2f
    80015c32:	3e37c783          	lbu	a5,995(a5) # 80045011 <excpt+0x1>
    80015c36:	0000d597          	auipc	a1,0xd
    80015c3a:	f0a58593          	addi	a1,a1,-246 # 80022b40 <__func__.2+0x2d8>
    80015c3e:	cf89                	beqz	a5,80015c58 <load_guest_page_fault_14+0xec>
    80015c40:	6418                	ld	a4,8(s0)
    80015c42:	47d5                	li	a5,21
    80015c44:	0000d597          	auipc	a1,0xd
    80015c48:	eec58593          	addi	a1,a1,-276 # 80022b30 <__func__.2+0x2c8>
    80015c4c:	00f70663          	beq	a4,a5,80015c58 <load_guest_page_fault_14+0xec>
    80015c50:	0000d597          	auipc	a1,0xd
    80015c54:	ef058593          	addi	a1,a1,-272 # 80022b40 <__func__.2+0x2d8>
    80015c58:	0000d517          	auipc	a0,0xd
    80015c5c:	f2850513          	addi	a0,a0,-216 # 80022b80 <__func__.2+0x318>
    80015c60:	0100b0ef          	jal	80020c70 <printf>
    80015c64:	0002f797          	auipc	a5,0x2f
    80015c68:	3ad7c783          	lbu	a5,941(a5) # 80045011 <excpt+0x1>
    80015c6c:	c789                	beqz	a5,80015c76 <load_guest_page_fault_14+0x10a>
    80015c6e:	6418                	ld	a4,8(s0)
    80015c70:	47d5                	li	a5,21
    80015c72:	00f70c63          	beq	a4,a5,80015c8a <load_guest_page_fault_14+0x11e>
    80015c76:	0000d517          	auipc	a0,0xd
    80015c7a:	f1250513          	addi	a0,a0,-238 # 80022b88 <__func__.2+0x320>
    80015c7e:	7f30a0ef          	jal	80020c70 <printf>
    80015c82:	02900513          	li	a0,41
    80015c86:	67a0a0ef          	jal	80020300 <putchar>
    80015c8a:	4529                	li	a0,10
    80015c8c:	6740a0ef          	jal	80020300 <putchar>
    80015c90:	0002f497          	auipc	s1,0x2f
    80015c94:	3814c483          	lbu	s1,897(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80015c98:	0000d597          	auipc	a1,0xd
    80015c9c:	ea858593          	addi	a1,a1,-344 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80015ca0:	cc91                	beqz	s1,80015cbc <load_guest_page_fault_14+0x150>
    80015ca2:	6418                	ld	a4,8(s0)
    80015ca4:	47d5                	li	a5,21
    TEST_END();
    80015ca6:	0000d597          	auipc	a1,0xd
    80015caa:	e8a58593          	addi	a1,a1,-374 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80015cae:	00f70763          	beq	a4,a5,80015cbc <load_guest_page_fault_14+0x150>
    80015cb2:	4481                	li	s1,0
    TEST_END();
    80015cb4:	0000d597          	auipc	a1,0xd
    80015cb8:	e8c58593          	addi	a1,a1,-372 # 80022b40 <__func__.2+0x2d8>
    80015cbc:	0000d517          	auipc	a0,0xd
    80015cc0:	f2c50513          	addi	a0,a0,-212 # 80022be8 <__func__.2+0x380>
    80015cc4:	7ad0a0ef          	jal	80020c70 <printf>
    80015cc8:	4511                	li	a0,4
    80015cca:	e0fea0ef          	jal	80000ad8 <goto_priv>
    80015cce:	edaeb0ef          	jal	800013a8 <reset_state>
}
    80015cd2:	60e2                	ld	ra,24(sp)
    80015cd4:	6442                	ld	s0,16(sp)
    80015cd6:	8526                	mv	a0,s1
    80015cd8:	64a2                	ld	s1,8(sp)
    80015cda:	6105                	addi	sp,sp,32
    80015cdc:	8082                	ret

0000000080015cde <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    80015cde:	1141                	addi	sp,sp,-16

    TEST_START();
    80015ce0:	0000c597          	auipc	a1,0xc
    80015ce4:	14058593          	addi	a1,a1,320 # 80021e20 <__func__.22>
    80015ce8:	0000d517          	auipc	a0,0xd
    80015cec:	e6850513          	addi	a0,a0,-408 # 80022b50 <__func__.2+0x2e8>
bool load_guest_page_fault_15(){
    80015cf0:	e406                	sd	ra,8(sp)
    80015cf2:	e022                	sd	s0,0(sp)
    TEST_START();
    80015cf4:	77d0a0ef          	jal	80020c70 <printf>
    80015cf8:	4529                	li	a0,10
    80015cfa:	6060a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015cfe:	450d                	li	a0,3
    80015d00:	dd9ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015d04:	8ddea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015d08:	b1bea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80015d0c:	4509                	li	a0,2
    80015d0e:	dcbea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015d12:	99fea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80015d16:	4511                	li	a0,4
    80015d18:	dc1ea0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015d1c:	000407b7          	lui	a5,0x40
    80015d20:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80015d24:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80015d28:	450d                	li	a0,3
    80015d2a:	dafea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015d2e:	4509                	li	a0,2
    80015d30:	cc9ea0ef          	jal	800009f8 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015d34:	0330000f          	fence	rw,rw
    80015d38:	4785                	li	a5,1
    80015d3a:	0002f717          	auipc	a4,0x2f
    80015d3e:	30073723          	sd	zero,782(a4) # 80045048 <excpt+0x38>
    80015d42:	0002f717          	auipc	a4,0x2f
    80015d46:	2cf71723          	sh	a5,718(a4) # 80045010 <excpt>
    80015d4a:	0330000f          	fence	rw,rw
    80015d4e:	000807b7          	lui	a5,0x80
    80015d52:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015d54:	07b6                	slli	a5,a5,0xd
    80015d56:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015d5a:	08200593          	li	a1,130
    80015d5e:	00011617          	auipc	a2,0x11
    80015d62:	5ba60613          	addi	a2,a2,1466 # 80027318 <__func__.2+0x4ab0>
    80015d66:	0000d517          	auipc	a0,0xd
    80015d6a:	e0250513          	addi	a0,a0,-510 # 80022b68 <__func__.2+0x300>
    80015d6e:	7030a0ef          	jal	80020c70 <printf>
    80015d72:	0002f797          	auipc	a5,0x2f
    80015d76:	29f7c783          	lbu	a5,671(a5) # 80045011 <excpt+0x1>
    80015d7a:	0000d597          	auipc	a1,0xd
    80015d7e:	db658593          	addi	a1,a1,-586 # 80022b30 <__func__.2+0x2c8>
    80015d82:	c789                	beqz	a5,80015d8c <load_guest_page_fault_15+0xae>
    80015d84:	0000d597          	auipc	a1,0xd
    80015d88:	dbc58593          	addi	a1,a1,-580 # 80022b40 <__func__.2+0x2d8>
    80015d8c:	0000d517          	auipc	a0,0xd
    80015d90:	df450513          	addi	a0,a0,-524 # 80022b80 <__func__.2+0x318>
    80015d94:	6dd0a0ef          	jal	80020c70 <printf>
    80015d98:	0002f797          	auipc	a5,0x2f
    80015d9c:	2797c783          	lbu	a5,633(a5) # 80045011 <excpt+0x1>
    80015da0:	e7a1                	bnez	a5,80015de8 <load_guest_page_fault_15+0x10a>
    80015da2:	4529                	li	a0,10
    80015da4:	55c0a0ef          	jal	80020300 <putchar>
    80015da8:	0002f797          	auipc	a5,0x2f
    80015dac:	2697c783          	lbu	a5,617(a5) # 80045011 <excpt+0x1>
    80015db0:	e795                	bnez	a5,80015ddc <load_guest_page_fault_15+0xfe>
    80015db2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80015db4:	0000d597          	auipc	a1,0xd
    80015db8:	d7c58593          	addi	a1,a1,-644 # 80022b30 <__func__.2+0x2c8>
    80015dbc:	0000d517          	auipc	a0,0xd
    80015dc0:	e2c50513          	addi	a0,a0,-468 # 80022be8 <__func__.2+0x380>
    80015dc4:	6ad0a0ef          	jal	80020c70 <printf>
    80015dc8:	4511                	li	a0,4
    80015dca:	d0fea0ef          	jal	80000ad8 <goto_priv>
    80015dce:	ddaeb0ef          	jal	800013a8 <reset_state>
}
    80015dd2:	60a2                	ld	ra,8(sp)
    80015dd4:	8522                	mv	a0,s0
    80015dd6:	6402                	ld	s0,0(sp)
    80015dd8:	0141                	addi	sp,sp,16
    80015dda:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015ddc:	4401                	li	s0,0
    TEST_END();
    80015dde:	0000d597          	auipc	a1,0xd
    80015de2:	d6258593          	addi	a1,a1,-670 # 80022b40 <__func__.2+0x2d8>
    80015de6:	bfd9                	j	80015dbc <load_guest_page_fault_15+0xde>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015de8:	0000d517          	auipc	a0,0xd
    80015dec:	da050513          	addi	a0,a0,-608 # 80022b88 <__func__.2+0x320>
    80015df0:	6810a0ef          	jal	80020c70 <printf>
    80015df4:	02900513          	li	a0,41
    80015df8:	5080a0ef          	jal	80020300 <putchar>
    80015dfc:	b75d                	j	80015da2 <load_guest_page_fault_15+0xc4>

0000000080015dfe <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    80015dfe:	1101                	addi	sp,sp,-32

    TEST_START();
    80015e00:	0000c597          	auipc	a1,0xc
    80015e04:	04058593          	addi	a1,a1,64 # 80021e40 <__func__.21>
    80015e08:	0000d517          	auipc	a0,0xd
    80015e0c:	d4850513          	addi	a0,a0,-696 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_1(){
    80015e10:	ec06                	sd	ra,24(sp)
    80015e12:	e822                	sd	s0,16(sp)
    80015e14:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e16:	65b0a0ef          	jal	80020c70 <printf>
    80015e1a:	4529                	li	a0,10
    80015e1c:	4e40a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80015e20:	450d                	li	a0,3
    80015e22:	cb7ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80015e26:	fbaea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e2a:	9f9ea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80015e2e:	4509                	li	a0,2
    80015e30:	ca9ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80015e34:	87dea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015e38:	450d                	li	a0,3
    80015e3a:	c9fea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015e3e:	4509                	li	a0,2
    80015e40:	bb9ea0ef          	jal	800009f8 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80015e44:	0330000f          	fence	rw,rw
    80015e48:	0002f417          	auipc	s0,0x2f
    80015e4c:	1c840413          	addi	s0,s0,456 # 80045010 <excpt>
    80015e50:	4785                	li	a5,1
    80015e52:	0002f717          	auipc	a4,0x2f
    80015e56:	1e073b23          	sd	zero,502(a4) # 80045048 <excpt+0x38>
    80015e5a:	00f41023          	sh	a5,0(s0)
    80015e5e:	0330000f          	fence	rw,rw
    asm volatile(
    80015e62:	37ab77b7          	lui	a5,0x37ab7
    80015e66:	00100737          	lui	a4,0x100
    80015e6a:	078a                	slli	a5,a5,0x2
    80015e6c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80015e70:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015e74:	0732                	slli	a4,a4,0xc
    80015e76:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    80015e7a:	08200593          	li	a1,130
    80015e7e:	00012617          	auipc	a2,0x12
    80015e82:	f0a60613          	addi	a2,a2,-246 # 80027d88 <__func__.2+0x5520>
    80015e86:	0000d517          	auipc	a0,0xd
    80015e8a:	ce250513          	addi	a0,a0,-798 # 80022b68 <__func__.2+0x300>
    80015e8e:	5e30a0ef          	jal	80020c70 <printf>
    80015e92:	0002f797          	auipc	a5,0x2f
    80015e96:	17f7c783          	lbu	a5,383(a5) # 80045011 <excpt+0x1>
    80015e9a:	0000d597          	auipc	a1,0xd
    80015e9e:	ca658593          	addi	a1,a1,-858 # 80022b40 <__func__.2+0x2d8>
    80015ea2:	cf89                	beqz	a5,80015ebc <store_guest_page_fault_1+0xbe>
    80015ea4:	6418                	ld	a4,8(s0)
    80015ea6:	47dd                	li	a5,23
    80015ea8:	0000d597          	auipc	a1,0xd
    80015eac:	c8858593          	addi	a1,a1,-888 # 80022b30 <__func__.2+0x2c8>
    80015eb0:	00f70663          	beq	a4,a5,80015ebc <store_guest_page_fault_1+0xbe>
    80015eb4:	0000d597          	auipc	a1,0xd
    80015eb8:	c8c58593          	addi	a1,a1,-884 # 80022b40 <__func__.2+0x2d8>
    80015ebc:	0000d517          	auipc	a0,0xd
    80015ec0:	cc450513          	addi	a0,a0,-828 # 80022b80 <__func__.2+0x318>
    80015ec4:	5ad0a0ef          	jal	80020c70 <printf>
    80015ec8:	0002f797          	auipc	a5,0x2f
    80015ecc:	1497c783          	lbu	a5,329(a5) # 80045011 <excpt+0x1>
    80015ed0:	c789                	beqz	a5,80015eda <store_guest_page_fault_1+0xdc>
    80015ed2:	6418                	ld	a4,8(s0)
    80015ed4:	47dd                	li	a5,23
    80015ed6:	00f70c63          	beq	a4,a5,80015eee <store_guest_page_fault_1+0xf0>
    80015eda:	0000d517          	auipc	a0,0xd
    80015ede:	cae50513          	addi	a0,a0,-850 # 80022b88 <__func__.2+0x320>
    80015ee2:	58f0a0ef          	jal	80020c70 <printf>
    80015ee6:	02900513          	li	a0,41
    80015eea:	4160a0ef          	jal	80020300 <putchar>
    80015eee:	4529                	li	a0,10
    80015ef0:	4100a0ef          	jal	80020300 <putchar>
    80015ef4:	0002f797          	auipc	a5,0x2f
    80015ef8:	11d7c783          	lbu	a5,285(a5) # 80045011 <excpt+0x1>
    80015efc:	4481                	li	s1,0
    80015efe:	c789                	beqz	a5,80015f08 <store_guest_page_fault_1+0x10a>
    80015f00:	6404                	ld	s1,8(s0)
    80015f02:	14a5                	addi	s1,s1,-23
    80015f04:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80015f08:	0330000f          	fence	rw,rw
    80015f0c:	4785                	li	a5,1
    80015f0e:	0002f717          	auipc	a4,0x2f
    80015f12:	12073d23          	sd	zero,314(a4) # 80045048 <excpt+0x38>
    80015f16:	00f41023          	sh	a5,0(s0)
    80015f1a:	0330000f          	fence	rw,rw
    asm volatile(
    80015f1e:	001007b7          	lui	a5,0x100
    80015f22:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015f26:	6731                	lui	a4,0xc
    80015f28:	07b2                	slli	a5,a5,0xc
    80015f2a:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80015f2e:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015f32:	08200593          	li	a1,130
    80015f36:	00012617          	auipc	a2,0x12
    80015f3a:	ea260613          	addi	a2,a2,-350 # 80027dd8 <__func__.2+0x5570>
    80015f3e:	0000d517          	auipc	a0,0xd
    80015f42:	c2a50513          	addi	a0,a0,-982 # 80022b68 <__func__.2+0x300>
    80015f46:	52b0a0ef          	jal	80020c70 <printf>
    80015f4a:	0002f797          	auipc	a5,0x2f
    80015f4e:	0c77c783          	lbu	a5,199(a5) # 80045011 <excpt+0x1>
    80015f52:	0000d597          	auipc	a1,0xd
    80015f56:	bee58593          	addi	a1,a1,-1042 # 80022b40 <__func__.2+0x2d8>
    80015f5a:	cf89                	beqz	a5,80015f74 <store_guest_page_fault_1+0x176>
    80015f5c:	6418                	ld	a4,8(s0)
    80015f5e:	47dd                	li	a5,23
    80015f60:	0000d597          	auipc	a1,0xd
    80015f64:	bd058593          	addi	a1,a1,-1072 # 80022b30 <__func__.2+0x2c8>
    80015f68:	00f70663          	beq	a4,a5,80015f74 <store_guest_page_fault_1+0x176>
    80015f6c:	0000d597          	auipc	a1,0xd
    80015f70:	bd458593          	addi	a1,a1,-1068 # 80022b40 <__func__.2+0x2d8>
    80015f74:	0000d517          	auipc	a0,0xd
    80015f78:	c0c50513          	addi	a0,a0,-1012 # 80022b80 <__func__.2+0x318>
    80015f7c:	4f50a0ef          	jal	80020c70 <printf>
    80015f80:	0002f797          	auipc	a5,0x2f
    80015f84:	0917c783          	lbu	a5,145(a5) # 80045011 <excpt+0x1>
    80015f88:	c789                	beqz	a5,80015f92 <store_guest_page_fault_1+0x194>
    80015f8a:	6418                	ld	a4,8(s0)
    80015f8c:	47dd                	li	a5,23
    80015f8e:	00f70c63          	beq	a4,a5,80015fa6 <store_guest_page_fault_1+0x1a8>
    80015f92:	0000d517          	auipc	a0,0xd
    80015f96:	bf650513          	addi	a0,a0,-1034 # 80022b88 <__func__.2+0x320>
    80015f9a:	4d70a0ef          	jal	80020c70 <printf>
    80015f9e:	02900513          	li	a0,41
    80015fa2:	35e0a0ef          	jal	80020300 <putchar>
    80015fa6:	4529                	li	a0,10
    80015fa8:	3580a0ef          	jal	80020300 <putchar>
    80015fac:	c095                	beqz	s1,80015fd0 <store_guest_page_fault_1+0x1d2>
    80015fae:	0002f497          	auipc	s1,0x2f
    80015fb2:	0634c483          	lbu	s1,99(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80015fb6:	0000d597          	auipc	a1,0xd
    80015fba:	b8a58593          	addi	a1,a1,-1142 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015fbe:	cc91                	beqz	s1,80015fda <store_guest_page_fault_1+0x1dc>
    80015fc0:	6418                	ld	a4,8(s0)
    80015fc2:	47dd                	li	a5,23
    TEST_END();
    80015fc4:	0000d597          	auipc	a1,0xd
    80015fc8:	b6c58593          	addi	a1,a1,-1172 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015fcc:	00f70763          	beq	a4,a5,80015fda <store_guest_page_fault_1+0x1dc>
    80015fd0:	4481                	li	s1,0
    TEST_END();
    80015fd2:	0000d597          	auipc	a1,0xd
    80015fd6:	b6e58593          	addi	a1,a1,-1170 # 80022b40 <__func__.2+0x2d8>
    80015fda:	0000d517          	auipc	a0,0xd
    80015fde:	c0e50513          	addi	a0,a0,-1010 # 80022be8 <__func__.2+0x380>
    80015fe2:	48f0a0ef          	jal	80020c70 <printf>
    80015fe6:	4511                	li	a0,4
    80015fe8:	af1ea0ef          	jal	80000ad8 <goto_priv>
    80015fec:	bbceb0ef          	jal	800013a8 <reset_state>

}
    80015ff0:	60e2                	ld	ra,24(sp)
    80015ff2:	6442                	ld	s0,16(sp)
    80015ff4:	8526                	mv	a0,s1
    80015ff6:	64a2                	ld	s1,8(sp)
    80015ff8:	6105                	addi	sp,sp,32
    80015ffa:	8082                	ret

0000000080015ffc <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    80015ffc:	1101                	addi	sp,sp,-32

    TEST_START();
    80015ffe:	0000c597          	auipc	a1,0xc
    80016002:	e6258593          	addi	a1,a1,-414 # 80021e60 <__func__.20>
    80016006:	0000d517          	auipc	a0,0xd
    8001600a:	b4a50513          	addi	a0,a0,-1206 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_2(){
    8001600e:	ec06                	sd	ra,24(sp)
    80016010:	e822                	sd	s0,16(sp)
    80016012:	e426                	sd	s1,8(sp)
    TEST_START();
    80016014:	45d0a0ef          	jal	80020c70 <printf>
    80016018:	4529                	li	a0,10
    8001601a:	2e60a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001601e:	450d                	li	a0,3
    80016020:	ab9ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016024:	dbcea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016028:	ffaea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001602c:	4509                	li	a0,2
    8001602e:	aabea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016032:	e7eea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016036:	450d                	li	a0,3
    80016038:	aa1ea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001603c:	4509                	li	a0,2
    8001603e:	9bbea0ef          	jal	800009f8 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80016042:	0330000f          	fence	rw,rw
    80016046:	0002f417          	auipc	s0,0x2f
    8001604a:	fca40413          	addi	s0,s0,-54 # 80045010 <excpt>
    8001604e:	4785                	li	a5,1
    80016050:	0002f717          	auipc	a4,0x2f
    80016054:	fe073c23          	sd	zero,-8(a4) # 80045048 <excpt+0x38>
    80016058:	00f41023          	sh	a5,0(s0)
    8001605c:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016060:	000807b7          	lui	a5,0x80
    80016064:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80016068:	37ab77b7          	lui	a5,0x37ab7
    8001606c:	00100737          	lui	a4,0x100
    80016070:	078a                	slli	a5,a5,0x2
    80016072:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016076:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001607a:	0732                	slli	a4,a4,0xc
    8001607c:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016080:	08200593          	li	a1,130
    80016084:	00012617          	auipc	a2,0x12
    80016088:	db460613          	addi	a2,a2,-588 # 80027e38 <__func__.2+0x55d0>
    8001608c:	0000d517          	auipc	a0,0xd
    80016090:	adc50513          	addi	a0,a0,-1316 # 80022b68 <__func__.2+0x300>
    80016094:	3dd0a0ef          	jal	80020c70 <printf>
    80016098:	0002f797          	auipc	a5,0x2f
    8001609c:	f797c783          	lbu	a5,-135(a5) # 80045011 <excpt+0x1>
    800160a0:	0000d597          	auipc	a1,0xd
    800160a4:	aa058593          	addi	a1,a1,-1376 # 80022b40 <__func__.2+0x2d8>
    800160a8:	cf89                	beqz	a5,800160c2 <store_guest_page_fault_2+0xc6>
    800160aa:	6418                	ld	a4,8(s0)
    800160ac:	47dd                	li	a5,23
    800160ae:	0000d597          	auipc	a1,0xd
    800160b2:	a8258593          	addi	a1,a1,-1406 # 80022b30 <__func__.2+0x2c8>
    800160b6:	00f70663          	beq	a4,a5,800160c2 <store_guest_page_fault_2+0xc6>
    800160ba:	0000d597          	auipc	a1,0xd
    800160be:	a8658593          	addi	a1,a1,-1402 # 80022b40 <__func__.2+0x2d8>
    800160c2:	0000d517          	auipc	a0,0xd
    800160c6:	abe50513          	addi	a0,a0,-1346 # 80022b80 <__func__.2+0x318>
    800160ca:	3a70a0ef          	jal	80020c70 <printf>
    800160ce:	0002f797          	auipc	a5,0x2f
    800160d2:	f437c783          	lbu	a5,-189(a5) # 80045011 <excpt+0x1>
    800160d6:	c789                	beqz	a5,800160e0 <store_guest_page_fault_2+0xe4>
    800160d8:	6418                	ld	a4,8(s0)
    800160da:	47dd                	li	a5,23
    800160dc:	00f70c63          	beq	a4,a5,800160f4 <store_guest_page_fault_2+0xf8>
    800160e0:	0000d517          	auipc	a0,0xd
    800160e4:	aa850513          	addi	a0,a0,-1368 # 80022b88 <__func__.2+0x320>
    800160e8:	3890a0ef          	jal	80020c70 <printf>
    800160ec:	02900513          	li	a0,41
    800160f0:	2100a0ef          	jal	80020300 <putchar>
    800160f4:	4529                	li	a0,10
    800160f6:	20a0a0ef          	jal	80020300 <putchar>
    800160fa:	0002f497          	auipc	s1,0x2f
    800160fe:	f174c483          	lbu	s1,-233(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80016102:	0000d597          	auipc	a1,0xd
    80016106:	a3e58593          	addi	a1,a1,-1474 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001610a:	cc91                	beqz	s1,80016126 <store_guest_page_fault_2+0x12a>
    8001610c:	6418                	ld	a4,8(s0)
    8001610e:	47dd                	li	a5,23
    TEST_END();
    80016110:	0000d597          	auipc	a1,0xd
    80016114:	a2058593          	addi	a1,a1,-1504 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016118:	00f70763          	beq	a4,a5,80016126 <store_guest_page_fault_2+0x12a>
    8001611c:	4481                	li	s1,0
    TEST_END();
    8001611e:	0000d597          	auipc	a1,0xd
    80016122:	a2258593          	addi	a1,a1,-1502 # 80022b40 <__func__.2+0x2d8>
    80016126:	0000d517          	auipc	a0,0xd
    8001612a:	ac250513          	addi	a0,a0,-1342 # 80022be8 <__func__.2+0x380>
    8001612e:	3430a0ef          	jal	80020c70 <printf>
    80016132:	4511                	li	a0,4
    80016134:	9a5ea0ef          	jal	80000ad8 <goto_priv>
    80016138:	a70eb0ef          	jal	800013a8 <reset_state>
}
    8001613c:	60e2                	ld	ra,24(sp)
    8001613e:	6442                	ld	s0,16(sp)
    80016140:	8526                	mv	a0,s1
    80016142:	64a2                	ld	s1,8(sp)
    80016144:	6105                	addi	sp,sp,32
    80016146:	8082                	ret

0000000080016148 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80016148:	1101                	addi	sp,sp,-32

    TEST_START();
    8001614a:	0000c597          	auipc	a1,0xc
    8001614e:	d3658593          	addi	a1,a1,-714 # 80021e80 <__func__.19>
    80016152:	0000d517          	auipc	a0,0xd
    80016156:	9fe50513          	addi	a0,a0,-1538 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_3(){
    8001615a:	ec06                	sd	ra,24(sp)
    8001615c:	e822                	sd	s0,16(sp)
    8001615e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016160:	3110a0ef          	jal	80020c70 <printf>
    80016164:	4529                	li	a0,10
    80016166:	19a0a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001616a:	450d                	li	a0,3
    8001616c:	96dea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016170:	c70ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016174:	eaeea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016178:	4509                	li	a0,2
    8001617a:	95fea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001617e:	d32ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016182:	450d                	li	a0,3
    80016184:	955ea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016188:	4509                	li	a0,2
    8001618a:	86fea0ef          	jal	800009f8 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001618e:	0330000f          	fence	rw,rw
    80016192:	0002f497          	auipc	s1,0x2f
    80016196:	e7e48493          	addi	s1,s1,-386 # 80045010 <excpt>
    8001619a:	4785                	li	a5,1
    8001619c:	0002f717          	auipc	a4,0x2f
    800161a0:	ea073623          	sd	zero,-340(a4) # 80045048 <excpt+0x38>
    800161a4:	00f49023          	sh	a5,0(s1)
    800161a8:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800161ac:	000807b7          	lui	a5,0x80
    800161b0:	1007a073          	csrs	sstatus,a5
    800161b4:	37ab77b7          	lui	a5,0x37ab7
    800161b8:	00100737          	lui	a4,0x100
    800161bc:	078a                	slli	a5,a5,0x2
    800161be:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800161c2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800161c6:	0732                	slli	a4,a4,0xc
    800161c8:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800161cc:	08200593          	li	a1,130
    800161d0:	00012617          	auipc	a2,0x12
    800161d4:	cc860613          	addi	a2,a2,-824 # 80027e98 <__func__.2+0x5630>
    800161d8:	0000d517          	auipc	a0,0xd
    800161dc:	99050513          	addi	a0,a0,-1648 # 80022b68 <__func__.2+0x300>
    800161e0:	2910a0ef          	jal	80020c70 <printf>
    800161e4:	0002f797          	auipc	a5,0x2f
    800161e8:	e2d7c783          	lbu	a5,-467(a5) # 80045011 <excpt+0x1>
    800161ec:	0000d597          	auipc	a1,0xd
    800161f0:	95458593          	addi	a1,a1,-1708 # 80022b40 <__func__.2+0x2d8>
    800161f4:	cf89                	beqz	a5,8001620e <store_guest_page_fault_3+0xc6>
    800161f6:	6498                	ld	a4,8(s1)
    800161f8:	47dd                	li	a5,23
    800161fa:	0000d597          	auipc	a1,0xd
    800161fe:	93658593          	addi	a1,a1,-1738 # 80022b30 <__func__.2+0x2c8>
    80016202:	00f70663          	beq	a4,a5,8001620e <store_guest_page_fault_3+0xc6>
    80016206:	0000d597          	auipc	a1,0xd
    8001620a:	93a58593          	addi	a1,a1,-1734 # 80022b40 <__func__.2+0x2d8>
    8001620e:	0000d517          	auipc	a0,0xd
    80016212:	97250513          	addi	a0,a0,-1678 # 80022b80 <__func__.2+0x318>
    80016216:	25b0a0ef          	jal	80020c70 <printf>
    8001621a:	0002f797          	auipc	a5,0x2f
    8001621e:	df77c783          	lbu	a5,-521(a5) # 80045011 <excpt+0x1>
    80016222:	c789                	beqz	a5,8001622c <store_guest_page_fault_3+0xe4>
    80016224:	6498                	ld	a4,8(s1)
    80016226:	47dd                	li	a5,23
    80016228:	00f70c63          	beq	a4,a5,80016240 <store_guest_page_fault_3+0xf8>
    8001622c:	0000d517          	auipc	a0,0xd
    80016230:	95c50513          	addi	a0,a0,-1700 # 80022b88 <__func__.2+0x320>
    80016234:	23d0a0ef          	jal	80020c70 <printf>
    80016238:	02900513          	li	a0,41
    8001623c:	0c40a0ef          	jal	80020300 <putchar>
    80016240:	4529                	li	a0,10
    80016242:	0be0a0ef          	jal	80020300 <putchar>
    80016246:	0002f417          	auipc	s0,0x2f
    8001624a:	dcb44403          	lbu	s0,-565(s0) # 80045011 <excpt+0x1>
    8001624e:	c409                	beqz	s0,80016258 <store_guest_page_fault_3+0x110>
    80016250:	6498                	ld	a4,8(s1)
    80016252:	47dd                	li	a5,23
    80016254:	02f70c63          	beq	a4,a5,8001628c <store_guest_page_fault_3+0x144>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016258:	000807b7          	lui	a5,0x80
    8001625c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80016260:	4401                	li	s0,0

    TEST_END();
    80016262:	0000d597          	auipc	a1,0xd
    80016266:	8de58593          	addi	a1,a1,-1826 # 80022b40 <__func__.2+0x2d8>
    8001626a:	0000d517          	auipc	a0,0xd
    8001626e:	97e50513          	addi	a0,a0,-1666 # 80022be8 <__func__.2+0x380>
    80016272:	1ff0a0ef          	jal	80020c70 <printf>
    80016276:	4511                	li	a0,4
    80016278:	861ea0ef          	jal	80000ad8 <goto_priv>
    8001627c:	92ceb0ef          	jal	800013a8 <reset_state>
}
    80016280:	60e2                	ld	ra,24(sp)
    80016282:	8522                	mv	a0,s0
    80016284:	6442                	ld	s0,16(sp)
    80016286:	64a2                	ld	s1,8(sp)
    80016288:	6105                	addi	sp,sp,32
    8001628a:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001628c:	000807b7          	lui	a5,0x80
    80016290:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80016294:	0000d597          	auipc	a1,0xd
    80016298:	89c58593          	addi	a1,a1,-1892 # 80022b30 <__func__.2+0x2c8>
    8001629c:	b7f9                	j	8001626a <store_guest_page_fault_3+0x122>

000000008001629e <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    8001629e:	1101                	addi	sp,sp,-32

    TEST_START();
    800162a0:	0000c597          	auipc	a1,0xc
    800162a4:	c0058593          	addi	a1,a1,-1024 # 80021ea0 <__func__.18>
    800162a8:	0000d517          	auipc	a0,0xd
    800162ac:	8a850513          	addi	a0,a0,-1880 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_4(){
    800162b0:	ec06                	sd	ra,24(sp)
    800162b2:	e822                	sd	s0,16(sp)
    800162b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800162b6:	1bb0a0ef          	jal	80020c70 <printf>
    800162ba:	4529                	li	a0,10
    800162bc:	0440a0ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800162c0:	450d                	li	a0,3
    800162c2:	817ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800162c6:	b1aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800162ca:	d58ea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800162ce:	4509                	li	a0,2
    800162d0:	809ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800162d4:	bdcea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800162d8:	4511                	li	a0,4
    800162da:	ffeea0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800162de:	000407b7          	lui	a5,0x40
    800162e2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800162e6:	450d                	li	a0,3
    800162e8:	ff0ea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    800162ec:	4509                	li	a0,2
    800162ee:	f0aea0ef          	jal	800009f8 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800162f2:	0330000f          	fence	rw,rw
    800162f6:	0002f417          	auipc	s0,0x2f
    800162fa:	d1a40413          	addi	s0,s0,-742 # 80045010 <excpt>
    800162fe:	4785                	li	a5,1
    80016300:	0002f717          	auipc	a4,0x2f
    80016304:	d4073423          	sd	zero,-696(a4) # 80045048 <excpt+0x38>
    80016308:	00f41023          	sh	a5,0(s0)
    8001630c:	0330000f          	fence	rw,rw
    80016310:	37ab77b7          	lui	a5,0x37ab7
    80016314:	00080737          	lui	a4,0x80
    80016318:	078a                	slli	a5,a5,0x2
    8001631a:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001631c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016320:	0736                	slli	a4,a4,0xd
    80016322:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80016326:	08200593          	li	a1,130
    8001632a:	00012617          	auipc	a2,0x12
    8001632e:	bde60613          	addi	a2,a2,-1058 # 80027f08 <__func__.2+0x56a0>
    80016332:	0000d517          	auipc	a0,0xd
    80016336:	83650513          	addi	a0,a0,-1994 # 80022b68 <__func__.2+0x300>
    8001633a:	1370a0ef          	jal	80020c70 <printf>
    8001633e:	0002f797          	auipc	a5,0x2f
    80016342:	cd37c783          	lbu	a5,-813(a5) # 80045011 <excpt+0x1>
    80016346:	0000c597          	auipc	a1,0xc
    8001634a:	7fa58593          	addi	a1,a1,2042 # 80022b40 <__func__.2+0x2d8>
    8001634e:	cf89                	beqz	a5,80016368 <store_guest_page_fault_4+0xca>
    80016350:	6418                	ld	a4,8(s0)
    80016352:	47bd                	li	a5,15
    80016354:	0000c597          	auipc	a1,0xc
    80016358:	7dc58593          	addi	a1,a1,2012 # 80022b30 <__func__.2+0x2c8>
    8001635c:	00f70663          	beq	a4,a5,80016368 <store_guest_page_fault_4+0xca>
    80016360:	0000c597          	auipc	a1,0xc
    80016364:	7e058593          	addi	a1,a1,2016 # 80022b40 <__func__.2+0x2d8>
    80016368:	0000d517          	auipc	a0,0xd
    8001636c:	81850513          	addi	a0,a0,-2024 # 80022b80 <__func__.2+0x318>
    80016370:	1010a0ef          	jal	80020c70 <printf>
    80016374:	0002f797          	auipc	a5,0x2f
    80016378:	c9d7c783          	lbu	a5,-867(a5) # 80045011 <excpt+0x1>
    8001637c:	c789                	beqz	a5,80016386 <store_guest_page_fault_4+0xe8>
    8001637e:	6418                	ld	a4,8(s0)
    80016380:	47bd                	li	a5,15
    80016382:	00f70c63          	beq	a4,a5,8001639a <store_guest_page_fault_4+0xfc>
    80016386:	0000d517          	auipc	a0,0xd
    8001638a:	80250513          	addi	a0,a0,-2046 # 80022b88 <__func__.2+0x320>
    8001638e:	0e30a0ef          	jal	80020c70 <printf>
    80016392:	02900513          	li	a0,41
    80016396:	76b090ef          	jal	80020300 <putchar>
    8001639a:	4529                	li	a0,10
    8001639c:	765090ef          	jal	80020300 <putchar>
    800163a0:	0002f497          	auipc	s1,0x2f
    800163a4:	c714c483          	lbu	s1,-911(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800163a8:	0000c597          	auipc	a1,0xc
    800163ac:	79858593          	addi	a1,a1,1944 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800163b0:	cc91                	beqz	s1,800163cc <store_guest_page_fault_4+0x12e>
    800163b2:	6418                	ld	a4,8(s0)
    800163b4:	47bd                	li	a5,15
    TEST_END();
    800163b6:	0000c597          	auipc	a1,0xc
    800163ba:	77a58593          	addi	a1,a1,1914 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800163be:	00f70763          	beq	a4,a5,800163cc <store_guest_page_fault_4+0x12e>
    800163c2:	4481                	li	s1,0
    TEST_END();
    800163c4:	0000c597          	auipc	a1,0xc
    800163c8:	77c58593          	addi	a1,a1,1916 # 80022b40 <__func__.2+0x2d8>
    800163cc:	0000d517          	auipc	a0,0xd
    800163d0:	81c50513          	addi	a0,a0,-2020 # 80022be8 <__func__.2+0x380>
    800163d4:	09d0a0ef          	jal	80020c70 <printf>
    800163d8:	4511                	li	a0,4
    800163da:	efeea0ef          	jal	80000ad8 <goto_priv>
    800163de:	fcbea0ef          	jal	800013a8 <reset_state>
}
    800163e2:	60e2                	ld	ra,24(sp)
    800163e4:	6442                	ld	s0,16(sp)
    800163e6:	8526                	mv	a0,s1
    800163e8:	64a2                	ld	s1,8(sp)
    800163ea:	6105                	addi	sp,sp,32
    800163ec:	8082                	ret

00000000800163ee <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    800163ee:	1141                	addi	sp,sp,-16

    TEST_START();
    800163f0:	0000c597          	auipc	a1,0xc
    800163f4:	ad058593          	addi	a1,a1,-1328 # 80021ec0 <__func__.17>
    800163f8:	0000c517          	auipc	a0,0xc
    800163fc:	75850513          	addi	a0,a0,1880 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_5(){
    80016400:	e406                	sd	ra,8(sp)
    80016402:	e022                	sd	s0,0(sp)
    TEST_START();
    80016404:	06d0a0ef          	jal	80020c70 <printf>
    80016408:	4529                	li	a0,10
    8001640a:	6f7090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001640e:	450d                	li	a0,3
    80016410:	ec8ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016414:	9ccea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016418:	c0aea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001641c:	4509                	li	a0,2
    8001641e:	ebaea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016422:	a8eea0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016426:	4511                	li	a0,4
    80016428:	eb0ea0ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001642c:	000407b7          	lui	a5,0x40
    80016430:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016434:	450d                	li	a0,3
    80016436:	ea2ea0ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001643a:	4509                	li	a0,2
    8001643c:	dbcea0ef          	jal	800009f8 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016440:	0330000f          	fence	rw,rw
    80016444:	4785                	li	a5,1
    80016446:	0002f717          	auipc	a4,0x2f
    8001644a:	c0073123          	sd	zero,-1022(a4) # 80045048 <excpt+0x38>
    8001644e:	0002f717          	auipc	a4,0x2f
    80016452:	bcf71123          	sh	a5,-1086(a4) # 80045010 <excpt>
    80016456:	0330000f          	fence	rw,rw
    asm volatile(
    8001645a:	37ab77b7          	lui	a5,0x37ab7
    8001645e:	00080737          	lui	a4,0x80
    80016462:	078a                	slli	a5,a5,0x2
    80016464:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016466:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001646a:	0736                	slli	a4,a4,0xd
    8001646c:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80016470:	08200593          	li	a1,130
    80016474:	00012617          	auipc	a2,0x12
    80016478:	ad460613          	addi	a2,a2,-1324 # 80027f48 <__func__.2+0x56e0>
    8001647c:	0000c517          	auipc	a0,0xc
    80016480:	6ec50513          	addi	a0,a0,1772 # 80022b68 <__func__.2+0x300>
    80016484:	7ec0a0ef          	jal	80020c70 <printf>
    80016488:	0002f797          	auipc	a5,0x2f
    8001648c:	b897c783          	lbu	a5,-1143(a5) # 80045011 <excpt+0x1>
    80016490:	0000c597          	auipc	a1,0xc
    80016494:	6a058593          	addi	a1,a1,1696 # 80022b30 <__func__.2+0x2c8>
    80016498:	c789                	beqz	a5,800164a2 <store_guest_page_fault_5+0xb4>
    8001649a:	0000c597          	auipc	a1,0xc
    8001649e:	6a658593          	addi	a1,a1,1702 # 80022b40 <__func__.2+0x2d8>
    800164a2:	0000c517          	auipc	a0,0xc
    800164a6:	6de50513          	addi	a0,a0,1758 # 80022b80 <__func__.2+0x318>
    800164aa:	7c60a0ef          	jal	80020c70 <printf>
    800164ae:	0002f797          	auipc	a5,0x2f
    800164b2:	b637c783          	lbu	a5,-1181(a5) # 80045011 <excpt+0x1>
    800164b6:	e7a1                	bnez	a5,800164fe <store_guest_page_fault_5+0x110>
    800164b8:	4529                	li	a0,10
    800164ba:	647090ef          	jal	80020300 <putchar>
    800164be:	0002f797          	auipc	a5,0x2f
    800164c2:	b537c783          	lbu	a5,-1197(a5) # 80045011 <excpt+0x1>
    800164c6:	e795                	bnez	a5,800164f2 <store_guest_page_fault_5+0x104>
    800164c8:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800164ca:	0000c597          	auipc	a1,0xc
    800164ce:	66658593          	addi	a1,a1,1638 # 80022b30 <__func__.2+0x2c8>
    800164d2:	0000c517          	auipc	a0,0xc
    800164d6:	71650513          	addi	a0,a0,1814 # 80022be8 <__func__.2+0x380>
    800164da:	7960a0ef          	jal	80020c70 <printf>
    800164de:	4511                	li	a0,4
    800164e0:	df8ea0ef          	jal	80000ad8 <goto_priv>
    800164e4:	ec5ea0ef          	jal	800013a8 <reset_state>
}
    800164e8:	60a2                	ld	ra,8(sp)
    800164ea:	8522                	mv	a0,s0
    800164ec:	6402                	ld	s0,0(sp)
    800164ee:	0141                	addi	sp,sp,16
    800164f0:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800164f2:	4401                	li	s0,0
    TEST_END();
    800164f4:	0000c597          	auipc	a1,0xc
    800164f8:	64c58593          	addi	a1,a1,1612 # 80022b40 <__func__.2+0x2d8>
    800164fc:	bfd9                	j	800164d2 <store_guest_page_fault_5+0xe4>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800164fe:	0000c517          	auipc	a0,0xc
    80016502:	68a50513          	addi	a0,a0,1674 # 80022b88 <__func__.2+0x320>
    80016506:	76a0a0ef          	jal	80020c70 <printf>
    8001650a:	02900513          	li	a0,41
    8001650e:	5f3090ef          	jal	80020300 <putchar>
    80016512:	b75d                	j	800164b8 <store_guest_page_fault_5+0xca>

0000000080016514 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80016514:	1101                	addi	sp,sp,-32

    TEST_START();
    80016516:	0000c597          	auipc	a1,0xc
    8001651a:	9ca58593          	addi	a1,a1,-1590 # 80021ee0 <__func__.16>
    8001651e:	0000c517          	auipc	a0,0xc
    80016522:	63250513          	addi	a0,a0,1586 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_6(){
    80016526:	ec06                	sd	ra,24(sp)
    80016528:	e822                	sd	s0,16(sp)
    8001652a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001652c:	7440a0ef          	jal	80020c70 <printf>
    80016530:	4529                	li	a0,10
    80016532:	5cf090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016536:	450d                	li	a0,3
    80016538:	da0ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001653c:	8a4ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016540:	ae2ea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016544:	4509                	li	a0,2
    80016546:	d92ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001654a:	966ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001654e:	4509                	li	a0,2
    80016550:	d88ea0ef          	jal	80000ad8 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80016554:	0330000f          	fence	rw,rw
    80016558:	0002f417          	auipc	s0,0x2f
    8001655c:	ab840413          	addi	s0,s0,-1352 # 80045010 <excpt>
    80016560:	4785                	li	a5,1
    80016562:	0002f717          	auipc	a4,0x2f
    80016566:	ae073323          	sd	zero,-1306(a4) # 80045048 <excpt+0x38>
    8001656a:	00f41023          	sh	a5,0(s0)
    8001656e:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016572:	37ab77b7          	lui	a5,0x37ab7
    80016576:	00100737          	lui	a4,0x100
    8001657a:	078a                	slli	a5,a5,0x2
    8001657c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016580:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016584:	0732                	slli	a4,a4,0xc
    80016586:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    8001658a:	08200593          	li	a1,130
    8001658e:	00012617          	auipc	a2,0x12
    80016592:	9f260613          	addi	a2,a2,-1550 # 80027f80 <__func__.2+0x5718>
    80016596:	0000c517          	auipc	a0,0xc
    8001659a:	5d250513          	addi	a0,a0,1490 # 80022b68 <__func__.2+0x300>
    8001659e:	6d20a0ef          	jal	80020c70 <printf>
    800165a2:	0002f797          	auipc	a5,0x2f
    800165a6:	a6f7c783          	lbu	a5,-1425(a5) # 80045011 <excpt+0x1>
    800165aa:	0000c597          	auipc	a1,0xc
    800165ae:	59658593          	addi	a1,a1,1430 # 80022b40 <__func__.2+0x2d8>
    800165b2:	cf89                	beqz	a5,800165cc <store_guest_page_fault_6+0xb8>
    800165b4:	6418                	ld	a4,8(s0)
    800165b6:	47dd                	li	a5,23
    800165b8:	0000c597          	auipc	a1,0xc
    800165bc:	57858593          	addi	a1,a1,1400 # 80022b30 <__func__.2+0x2c8>
    800165c0:	00f70663          	beq	a4,a5,800165cc <store_guest_page_fault_6+0xb8>
    800165c4:	0000c597          	auipc	a1,0xc
    800165c8:	57c58593          	addi	a1,a1,1404 # 80022b40 <__func__.2+0x2d8>
    800165cc:	0000c517          	auipc	a0,0xc
    800165d0:	5b450513          	addi	a0,a0,1460 # 80022b80 <__func__.2+0x318>
    800165d4:	69c0a0ef          	jal	80020c70 <printf>
    800165d8:	0002f797          	auipc	a5,0x2f
    800165dc:	a397c783          	lbu	a5,-1479(a5) # 80045011 <excpt+0x1>
    800165e0:	c789                	beqz	a5,800165ea <store_guest_page_fault_6+0xd6>
    800165e2:	6418                	ld	a4,8(s0)
    800165e4:	47dd                	li	a5,23
    800165e6:	00f70c63          	beq	a4,a5,800165fe <store_guest_page_fault_6+0xea>
    800165ea:	0000c517          	auipc	a0,0xc
    800165ee:	59e50513          	addi	a0,a0,1438 # 80022b88 <__func__.2+0x320>
    800165f2:	67e0a0ef          	jal	80020c70 <printf>
    800165f6:	02900513          	li	a0,41
    800165fa:	507090ef          	jal	80020300 <putchar>
    800165fe:	4529                	li	a0,10
    80016600:	501090ef          	jal	80020300 <putchar>
    80016604:	0002f797          	auipc	a5,0x2f
    80016608:	a0d7c783          	lbu	a5,-1523(a5) # 80045011 <excpt+0x1>
    8001660c:	4481                	li	s1,0
    8001660e:	c789                	beqz	a5,80016618 <store_guest_page_fault_6+0x104>
    80016610:	6404                	ld	s1,8(s0)
    80016612:	14a5                	addi	s1,s1,-23
    80016614:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80016618:	0330000f          	fence	rw,rw
    8001661c:	4785                	li	a5,1
    8001661e:	0002f717          	auipc	a4,0x2f
    80016622:	a2073523          	sd	zero,-1494(a4) # 80045048 <excpt+0x38>
    80016626:	00f41023          	sh	a5,0(s0)
    8001662a:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8001662e:	001007b7          	lui	a5,0x100
    80016632:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80016636:	7771                	lui	a4,0xffffc
    80016638:	07b2                	slli	a5,a5,0xc
    8001663a:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8001663e:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80016642:	08200593          	li	a1,130
    80016646:	00012617          	auipc	a2,0x12
    8001664a:	98a60613          	addi	a2,a2,-1654 # 80027fd0 <__func__.2+0x5768>
    8001664e:	0000c517          	auipc	a0,0xc
    80016652:	51a50513          	addi	a0,a0,1306 # 80022b68 <__func__.2+0x300>
    80016656:	61a0a0ef          	jal	80020c70 <printf>
    8001665a:	0002f797          	auipc	a5,0x2f
    8001665e:	9b77c783          	lbu	a5,-1609(a5) # 80045011 <excpt+0x1>
    80016662:	0000c597          	auipc	a1,0xc
    80016666:	4de58593          	addi	a1,a1,1246 # 80022b40 <__func__.2+0x2d8>
    8001666a:	cf89                	beqz	a5,80016684 <store_guest_page_fault_6+0x170>
    8001666c:	6418                	ld	a4,8(s0)
    8001666e:	47dd                	li	a5,23
    80016670:	0000c597          	auipc	a1,0xc
    80016674:	4c058593          	addi	a1,a1,1216 # 80022b30 <__func__.2+0x2c8>
    80016678:	00f70663          	beq	a4,a5,80016684 <store_guest_page_fault_6+0x170>
    8001667c:	0000c597          	auipc	a1,0xc
    80016680:	4c458593          	addi	a1,a1,1220 # 80022b40 <__func__.2+0x2d8>
    80016684:	0000c517          	auipc	a0,0xc
    80016688:	4fc50513          	addi	a0,a0,1276 # 80022b80 <__func__.2+0x318>
    8001668c:	5e40a0ef          	jal	80020c70 <printf>
    80016690:	0002f797          	auipc	a5,0x2f
    80016694:	9817c783          	lbu	a5,-1663(a5) # 80045011 <excpt+0x1>
    80016698:	c789                	beqz	a5,800166a2 <store_guest_page_fault_6+0x18e>
    8001669a:	6418                	ld	a4,8(s0)
    8001669c:	47dd                	li	a5,23
    8001669e:	00f70c63          	beq	a4,a5,800166b6 <store_guest_page_fault_6+0x1a2>
    800166a2:	0000c517          	auipc	a0,0xc
    800166a6:	4e650513          	addi	a0,a0,1254 # 80022b88 <__func__.2+0x320>
    800166aa:	5c60a0ef          	jal	80020c70 <printf>
    800166ae:	02900513          	li	a0,41
    800166b2:	44f090ef          	jal	80020300 <putchar>
    800166b6:	4529                	li	a0,10
    800166b8:	449090ef          	jal	80020300 <putchar>
    800166bc:	c095                	beqz	s1,800166e0 <store_guest_page_fault_6+0x1cc>
    800166be:	0002f497          	auipc	s1,0x2f
    800166c2:	9534c483          	lbu	s1,-1709(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800166c6:	0000c597          	auipc	a1,0xc
    800166ca:	47a58593          	addi	a1,a1,1146 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800166ce:	cc91                	beqz	s1,800166ea <store_guest_page_fault_6+0x1d6>
    800166d0:	6418                	ld	a4,8(s0)
    800166d2:	47dd                	li	a5,23
    TEST_END();
    800166d4:	0000c597          	auipc	a1,0xc
    800166d8:	45c58593          	addi	a1,a1,1116 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800166dc:	00f70763          	beq	a4,a5,800166ea <store_guest_page_fault_6+0x1d6>
    800166e0:	4481                	li	s1,0
    TEST_END();
    800166e2:	0000c597          	auipc	a1,0xc
    800166e6:	45e58593          	addi	a1,a1,1118 # 80022b40 <__func__.2+0x2d8>
    800166ea:	0000c517          	auipc	a0,0xc
    800166ee:	4fe50513          	addi	a0,a0,1278 # 80022be8 <__func__.2+0x380>
    800166f2:	57e0a0ef          	jal	80020c70 <printf>
    800166f6:	4511                	li	a0,4
    800166f8:	be0ea0ef          	jal	80000ad8 <goto_priv>
    800166fc:	cadea0ef          	jal	800013a8 <reset_state>

}
    80016700:	60e2                	ld	ra,24(sp)
    80016702:	6442                	ld	s0,16(sp)
    80016704:	8526                	mv	a0,s1
    80016706:	64a2                	ld	s1,8(sp)
    80016708:	6105                	addi	sp,sp,32
    8001670a:	8082                	ret

000000008001670c <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    8001670c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001670e:	0000b597          	auipc	a1,0xb
    80016712:	7f258593          	addi	a1,a1,2034 # 80021f00 <__func__.15>
    80016716:	0000c517          	auipc	a0,0xc
    8001671a:	43a50513          	addi	a0,a0,1082 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_7(){
    8001671e:	ec06                	sd	ra,24(sp)
    80016720:	e822                	sd	s0,16(sp)
    80016722:	e426                	sd	s1,8(sp)
    TEST_START();
    80016724:	54c0a0ef          	jal	80020c70 <printf>
    80016728:	4529                	li	a0,10
    8001672a:	3d7090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001672e:	450d                	li	a0,3
    80016730:	ba8ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016734:	eade90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016738:	8eaea0ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001673c:	4509                	li	a0,2
    8001673e:	b9aea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016742:	f6fe90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016746:	4509                	li	a0,2
    80016748:	b90ea0ef          	jal	80000ad8 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001674c:	0330000f          	fence	rw,rw
    80016750:	0002f417          	auipc	s0,0x2f
    80016754:	8c040413          	addi	s0,s0,-1856 # 80045010 <excpt>
    80016758:	4785                	li	a5,1
    8001675a:	0002f717          	auipc	a4,0x2f
    8001675e:	8e073723          	sd	zero,-1810(a4) # 80045048 <excpt+0x38>
    80016762:	00f41023          	sh	a5,0(s0)
    80016766:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001676a:	000807b7          	lui	a5,0x80
    8001676e:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016772:	37ab77b7          	lui	a5,0x37ab7
    80016776:	00100737          	lui	a4,0x100
    8001677a:	078a                	slli	a5,a5,0x2
    8001677c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016780:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016784:	0732                	slli	a4,a4,0xc
    80016786:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001678a:	08200593          	li	a1,130
    8001678e:	00012617          	auipc	a2,0x12
    80016792:	89a60613          	addi	a2,a2,-1894 # 80028028 <__func__.2+0x57c0>
    80016796:	0000c517          	auipc	a0,0xc
    8001679a:	3d250513          	addi	a0,a0,978 # 80022b68 <__func__.2+0x300>
    8001679e:	4d20a0ef          	jal	80020c70 <printf>
    800167a2:	0002f797          	auipc	a5,0x2f
    800167a6:	86f7c783          	lbu	a5,-1937(a5) # 80045011 <excpt+0x1>
    800167aa:	0000c597          	auipc	a1,0xc
    800167ae:	39658593          	addi	a1,a1,918 # 80022b40 <__func__.2+0x2d8>
    800167b2:	cf89                	beqz	a5,800167cc <store_guest_page_fault_7+0xc0>
    800167b4:	6418                	ld	a4,8(s0)
    800167b6:	47dd                	li	a5,23
    800167b8:	0000c597          	auipc	a1,0xc
    800167bc:	37858593          	addi	a1,a1,888 # 80022b30 <__func__.2+0x2c8>
    800167c0:	00f70663          	beq	a4,a5,800167cc <store_guest_page_fault_7+0xc0>
    800167c4:	0000c597          	auipc	a1,0xc
    800167c8:	37c58593          	addi	a1,a1,892 # 80022b40 <__func__.2+0x2d8>
    800167cc:	0000c517          	auipc	a0,0xc
    800167d0:	3b450513          	addi	a0,a0,948 # 80022b80 <__func__.2+0x318>
    800167d4:	49c0a0ef          	jal	80020c70 <printf>
    800167d8:	0002f797          	auipc	a5,0x2f
    800167dc:	8397c783          	lbu	a5,-1991(a5) # 80045011 <excpt+0x1>
    800167e0:	c789                	beqz	a5,800167ea <store_guest_page_fault_7+0xde>
    800167e2:	6418                	ld	a4,8(s0)
    800167e4:	47dd                	li	a5,23
    800167e6:	00f70c63          	beq	a4,a5,800167fe <store_guest_page_fault_7+0xf2>
    800167ea:	0000c517          	auipc	a0,0xc
    800167ee:	39e50513          	addi	a0,a0,926 # 80022b88 <__func__.2+0x320>
    800167f2:	47e0a0ef          	jal	80020c70 <printf>
    800167f6:	02900513          	li	a0,41
    800167fa:	307090ef          	jal	80020300 <putchar>
    800167fe:	4529                	li	a0,10
    80016800:	301090ef          	jal	80020300 <putchar>
    80016804:	0002f497          	auipc	s1,0x2f
    80016808:	80d4c483          	lbu	s1,-2035(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001680c:	0000c597          	auipc	a1,0xc
    80016810:	33458593          	addi	a1,a1,820 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016814:	cc91                	beqz	s1,80016830 <store_guest_page_fault_7+0x124>
    80016816:	6418                	ld	a4,8(s0)
    80016818:	47dd                	li	a5,23
    TEST_END();
    8001681a:	0000c597          	auipc	a1,0xc
    8001681e:	31658593          	addi	a1,a1,790 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016822:	00f70763          	beq	a4,a5,80016830 <store_guest_page_fault_7+0x124>
    80016826:	4481                	li	s1,0
    TEST_END();
    80016828:	0000c597          	auipc	a1,0xc
    8001682c:	31858593          	addi	a1,a1,792 # 80022b40 <__func__.2+0x2d8>
    80016830:	0000c517          	auipc	a0,0xc
    80016834:	3b850513          	addi	a0,a0,952 # 80022be8 <__func__.2+0x380>
    80016838:	4380a0ef          	jal	80020c70 <printf>
    8001683c:	4511                	li	a0,4
    8001683e:	a9aea0ef          	jal	80000ad8 <goto_priv>
    80016842:	b67ea0ef          	jal	800013a8 <reset_state>
}
    80016846:	60e2                	ld	ra,24(sp)
    80016848:	6442                	ld	s0,16(sp)
    8001684a:	8526                	mv	a0,s1
    8001684c:	64a2                	ld	s1,8(sp)
    8001684e:	6105                	addi	sp,sp,32
    80016850:	8082                	ret

0000000080016852 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80016852:	1101                	addi	sp,sp,-32

    TEST_START();
    80016854:	0000b597          	auipc	a1,0xb
    80016858:	6cc58593          	addi	a1,a1,1740 # 80021f20 <__func__.14>
    8001685c:	0000c517          	auipc	a0,0xc
    80016860:	2f450513          	addi	a0,a0,756 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_8(){
    80016864:	ec06                	sd	ra,24(sp)
    80016866:	e822                	sd	s0,16(sp)
    80016868:	e426                	sd	s1,8(sp)
    TEST_START();
    8001686a:	4060a0ef          	jal	80020c70 <printf>
    8001686e:	4529                	li	a0,10
    80016870:	291090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016874:	450d                	li	a0,3
    80016876:	a62ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001687a:	d67e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001687e:	fa5e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016882:	4509                	li	a0,2
    80016884:	a54ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016888:	e29e90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001688c:	4509                	li	a0,2
    8001688e:	a4aea0ef          	jal	80000ad8 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80016892:	0330000f          	fence	rw,rw
    80016896:	0002e497          	auipc	s1,0x2e
    8001689a:	77a48493          	addi	s1,s1,1914 # 80045010 <excpt>
    8001689e:	4785                	li	a5,1
    800168a0:	0002e717          	auipc	a4,0x2e
    800168a4:	7a073423          	sd	zero,1960(a4) # 80045048 <excpt+0x38>
    800168a8:	00f49023          	sh	a5,0(s1)
    800168ac:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800168b0:	000807b7          	lui	a5,0x80
    800168b4:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800168b8:	001007b7          	lui	a5,0x100
    800168bc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800168c0:	7771                	lui	a4,0xffffc
    800168c2:	07b2                	slli	a5,a5,0xc
    800168c4:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800168c8:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800168cc:	08200593          	li	a1,130
    800168d0:	00011617          	auipc	a2,0x11
    800168d4:	7b860613          	addi	a2,a2,1976 # 80028088 <__func__.2+0x5820>
    800168d8:	0000c517          	auipc	a0,0xc
    800168dc:	29050513          	addi	a0,a0,656 # 80022b68 <__func__.2+0x300>
    800168e0:	3900a0ef          	jal	80020c70 <printf>
    800168e4:	0002e797          	auipc	a5,0x2e
    800168e8:	72d7c783          	lbu	a5,1837(a5) # 80045011 <excpt+0x1>
    800168ec:	0000c597          	auipc	a1,0xc
    800168f0:	25458593          	addi	a1,a1,596 # 80022b40 <__func__.2+0x2d8>
    800168f4:	cf89                	beqz	a5,8001690e <store_guest_page_fault_8+0xbc>
    800168f6:	6498                	ld	a4,8(s1)
    800168f8:	47dd                	li	a5,23
    800168fa:	0000c597          	auipc	a1,0xc
    800168fe:	23658593          	addi	a1,a1,566 # 80022b30 <__func__.2+0x2c8>
    80016902:	00f70663          	beq	a4,a5,8001690e <store_guest_page_fault_8+0xbc>
    80016906:	0000c597          	auipc	a1,0xc
    8001690a:	23a58593          	addi	a1,a1,570 # 80022b40 <__func__.2+0x2d8>
    8001690e:	0000c517          	auipc	a0,0xc
    80016912:	27250513          	addi	a0,a0,626 # 80022b80 <__func__.2+0x318>
    80016916:	35a0a0ef          	jal	80020c70 <printf>
    8001691a:	0002e797          	auipc	a5,0x2e
    8001691e:	6f77c783          	lbu	a5,1783(a5) # 80045011 <excpt+0x1>
    80016922:	c789                	beqz	a5,8001692c <store_guest_page_fault_8+0xda>
    80016924:	6498                	ld	a4,8(s1)
    80016926:	47dd                	li	a5,23
    80016928:	00f70c63          	beq	a4,a5,80016940 <store_guest_page_fault_8+0xee>
    8001692c:	0000c517          	auipc	a0,0xc
    80016930:	25c50513          	addi	a0,a0,604 # 80022b88 <__func__.2+0x320>
    80016934:	33c0a0ef          	jal	80020c70 <printf>
    80016938:	02900513          	li	a0,41
    8001693c:	1c5090ef          	jal	80020300 <putchar>
    80016940:	4529                	li	a0,10
    80016942:	1bf090ef          	jal	80020300 <putchar>
    80016946:	0002e417          	auipc	s0,0x2e
    8001694a:	6cb44403          	lbu	s0,1739(s0) # 80045011 <excpt+0x1>
    8001694e:	c409                	beqz	s0,80016958 <store_guest_page_fault_8+0x106>
    80016950:	6498                	ld	a4,8(s1)
    80016952:	47dd                	li	a5,23
    80016954:	02f70c63          	beq	a4,a5,8001698c <store_guest_page_fault_8+0x13a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016958:	000807b7          	lui	a5,0x80
    8001695c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80016960:	4401                	li	s0,0

    TEST_END();
    80016962:	0000c597          	auipc	a1,0xc
    80016966:	1de58593          	addi	a1,a1,478 # 80022b40 <__func__.2+0x2d8>
    8001696a:	0000c517          	auipc	a0,0xc
    8001696e:	27e50513          	addi	a0,a0,638 # 80022be8 <__func__.2+0x380>
    80016972:	2fe0a0ef          	jal	80020c70 <printf>
    80016976:	4511                	li	a0,4
    80016978:	960ea0ef          	jal	80000ad8 <goto_priv>
    8001697c:	a2dea0ef          	jal	800013a8 <reset_state>
}
    80016980:	60e2                	ld	ra,24(sp)
    80016982:	8522                	mv	a0,s0
    80016984:	6442                	ld	s0,16(sp)
    80016986:	64a2                	ld	s1,8(sp)
    80016988:	6105                	addi	sp,sp,32
    8001698a:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001698c:	000807b7          	lui	a5,0x80
    80016990:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80016994:	0000c597          	auipc	a1,0xc
    80016998:	19c58593          	addi	a1,a1,412 # 80022b30 <__func__.2+0x2c8>
    8001699c:	b7f9                	j	8001696a <store_guest_page_fault_8+0x118>

000000008001699e <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    8001699e:	1101                	addi	sp,sp,-32

    TEST_START();
    800169a0:	0000b597          	auipc	a1,0xb
    800169a4:	5a058593          	addi	a1,a1,1440 # 80021f40 <__func__.13>
    800169a8:	0000c517          	auipc	a0,0xc
    800169ac:	1a850513          	addi	a0,a0,424 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_9(){
    800169b0:	ec06                	sd	ra,24(sp)
    800169b2:	e822                	sd	s0,16(sp)
    800169b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800169b6:	2ba0a0ef          	jal	80020c70 <printf>
    800169ba:	4529                	li	a0,10
    800169bc:	145090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800169c0:	450d                	li	a0,3
    800169c2:	916ea0ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800169c6:	c1be90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800169ca:	e59e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800169ce:	4509                	li	a0,2
    800169d0:	908ea0ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800169d4:	cdde90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800169d8:	4511                	li	a0,4
    800169da:	8feea0ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800169de:	000407b7          	lui	a5,0x40
    800169e2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800169e6:	4509                	li	a0,2
    800169e8:	8f0ea0ef          	jal	80000ad8 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800169ec:	0330000f          	fence	rw,rw
    800169f0:	0002e417          	auipc	s0,0x2e
    800169f4:	62040413          	addi	s0,s0,1568 # 80045010 <excpt>
    800169f8:	4785                	li	a5,1
    800169fa:	0002e717          	auipc	a4,0x2e
    800169fe:	64073723          	sd	zero,1614(a4) # 80045048 <excpt+0x38>
    80016a02:	00f41023          	sh	a5,0(s0)
    80016a06:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016a0a:	37ab77b7          	lui	a5,0x37ab7
    80016a0e:	00080737          	lui	a4,0x80
    80016a12:	078a                	slli	a5,a5,0x2
    80016a14:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80016a16:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016a1a:	0736                	slli	a4,a4,0xd
    80016a1c:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80016a20:	08200593          	li	a1,130
    80016a24:	00011617          	auipc	a2,0x11
    80016a28:	6d460613          	addi	a2,a2,1748 # 800280f8 <__func__.2+0x5890>
    80016a2c:	0000c517          	auipc	a0,0xc
    80016a30:	13c50513          	addi	a0,a0,316 # 80022b68 <__func__.2+0x300>
    80016a34:	23c0a0ef          	jal	80020c70 <printf>
    80016a38:	0002e797          	auipc	a5,0x2e
    80016a3c:	5d97c783          	lbu	a5,1497(a5) # 80045011 <excpt+0x1>
    80016a40:	0000c597          	auipc	a1,0xc
    80016a44:	10058593          	addi	a1,a1,256 # 80022b40 <__func__.2+0x2d8>
    80016a48:	cf89                	beqz	a5,80016a62 <store_guest_page_fault_9+0xc4>
    80016a4a:	6418                	ld	a4,8(s0)
    80016a4c:	47bd                	li	a5,15
    80016a4e:	0000c597          	auipc	a1,0xc
    80016a52:	0e258593          	addi	a1,a1,226 # 80022b30 <__func__.2+0x2c8>
    80016a56:	00f70663          	beq	a4,a5,80016a62 <store_guest_page_fault_9+0xc4>
    80016a5a:	0000c597          	auipc	a1,0xc
    80016a5e:	0e658593          	addi	a1,a1,230 # 80022b40 <__func__.2+0x2d8>
    80016a62:	0000c517          	auipc	a0,0xc
    80016a66:	11e50513          	addi	a0,a0,286 # 80022b80 <__func__.2+0x318>
    80016a6a:	2060a0ef          	jal	80020c70 <printf>
    80016a6e:	0002e797          	auipc	a5,0x2e
    80016a72:	5a37c783          	lbu	a5,1443(a5) # 80045011 <excpt+0x1>
    80016a76:	c789                	beqz	a5,80016a80 <store_guest_page_fault_9+0xe2>
    80016a78:	6418                	ld	a4,8(s0)
    80016a7a:	47bd                	li	a5,15
    80016a7c:	00f70c63          	beq	a4,a5,80016a94 <store_guest_page_fault_9+0xf6>
    80016a80:	0000c517          	auipc	a0,0xc
    80016a84:	10850513          	addi	a0,a0,264 # 80022b88 <__func__.2+0x320>
    80016a88:	1e80a0ef          	jal	80020c70 <printf>
    80016a8c:	02900513          	li	a0,41
    80016a90:	071090ef          	jal	80020300 <putchar>
    80016a94:	4529                	li	a0,10
    80016a96:	06b090ef          	jal	80020300 <putchar>
    80016a9a:	0002e497          	auipc	s1,0x2e
    80016a9e:	5774c483          	lbu	s1,1399(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016aa2:	0000c597          	auipc	a1,0xc
    80016aa6:	09e58593          	addi	a1,a1,158 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80016aaa:	cc91                	beqz	s1,80016ac6 <store_guest_page_fault_9+0x128>
    80016aac:	6418                	ld	a4,8(s0)
    80016aae:	47bd                	li	a5,15
    TEST_END();
    80016ab0:	0000c597          	auipc	a1,0xc
    80016ab4:	08058593          	addi	a1,a1,128 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80016ab8:	00f70763          	beq	a4,a5,80016ac6 <store_guest_page_fault_9+0x128>
    80016abc:	4481                	li	s1,0
    TEST_END();
    80016abe:	0000c597          	auipc	a1,0xc
    80016ac2:	08258593          	addi	a1,a1,130 # 80022b40 <__func__.2+0x2d8>
    80016ac6:	0000c517          	auipc	a0,0xc
    80016aca:	12250513          	addi	a0,a0,290 # 80022be8 <__func__.2+0x380>
    80016ace:	1a20a0ef          	jal	80020c70 <printf>
    80016ad2:	4511                	li	a0,4
    80016ad4:	804ea0ef          	jal	80000ad8 <goto_priv>
    80016ad8:	8d1ea0ef          	jal	800013a8 <reset_state>
}
    80016adc:	60e2                	ld	ra,24(sp)
    80016ade:	6442                	ld	s0,16(sp)
    80016ae0:	8526                	mv	a0,s1
    80016ae2:	64a2                	ld	s1,8(sp)
    80016ae4:	6105                	addi	sp,sp,32
    80016ae6:	8082                	ret

0000000080016ae8 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80016ae8:	1141                	addi	sp,sp,-16

    TEST_START();
    80016aea:	0000b597          	auipc	a1,0xb
    80016aee:	47658593          	addi	a1,a1,1142 # 80021f60 <__func__.12>
    80016af2:	0000c517          	auipc	a0,0xc
    80016af6:	05e50513          	addi	a0,a0,94 # 80022b50 <__func__.2+0x2e8>
bool store_guest_page_fault_10(){
    80016afa:	e406                	sd	ra,8(sp)
    80016afc:	e022                	sd	s0,0(sp)
    TEST_START();
    80016afe:	1720a0ef          	jal	80020c70 <printf>
    80016b02:	4529                	li	a0,10
    80016b04:	7fc090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016b08:	450d                	li	a0,3
    80016b0a:	fcfe90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016b0e:	ad3e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016b12:	d11e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016b16:	4509                	li	a0,2
    80016b18:	fc1e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016b1c:	b95e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016b20:	4511                	li	a0,4
    80016b22:	fb7e90ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016b26:	000407b7          	lui	a5,0x40
    80016b2a:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016b2e:	4509                	li	a0,2
    80016b30:	fa9e90ef          	jal	80000ad8 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016b34:	0330000f          	fence	rw,rw
    80016b38:	4785                	li	a5,1
    80016b3a:	0002e717          	auipc	a4,0x2e
    80016b3e:	50073723          	sd	zero,1294(a4) # 80045048 <excpt+0x38>
    80016b42:	0002e717          	auipc	a4,0x2e
    80016b46:	4cf71723          	sh	a5,1230(a4) # 80045010 <excpt>
    80016b4a:	0330000f          	fence	rw,rw
    80016b4e:	37ab77b7          	lui	a5,0x37ab7
    80016b52:	00080737          	lui	a4,0x80
    80016b56:	078a                	slli	a5,a5,0x2
    80016b58:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016b5a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016b5e:	0736                	slli	a4,a4,0xd
    80016b60:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016b64:	08200593          	li	a1,130
    80016b68:	00011617          	auipc	a2,0x11
    80016b6c:	b2060613          	addi	a2,a2,-1248 # 80027688 <__func__.2+0x4e20>
    80016b70:	0000c517          	auipc	a0,0xc
    80016b74:	ff850513          	addi	a0,a0,-8 # 80022b68 <__func__.2+0x300>
    80016b78:	0f80a0ef          	jal	80020c70 <printf>
    80016b7c:	0002e797          	auipc	a5,0x2e
    80016b80:	4957c783          	lbu	a5,1173(a5) # 80045011 <excpt+0x1>
    80016b84:	0000c597          	auipc	a1,0xc
    80016b88:	fac58593          	addi	a1,a1,-84 # 80022b30 <__func__.2+0x2c8>
    80016b8c:	c789                	beqz	a5,80016b96 <store_guest_page_fault_10+0xae>
    80016b8e:	0000c597          	auipc	a1,0xc
    80016b92:	fb258593          	addi	a1,a1,-78 # 80022b40 <__func__.2+0x2d8>
    80016b96:	0000c517          	auipc	a0,0xc
    80016b9a:	fea50513          	addi	a0,a0,-22 # 80022b80 <__func__.2+0x318>
    80016b9e:	0d20a0ef          	jal	80020c70 <printf>
    80016ba2:	0002e797          	auipc	a5,0x2e
    80016ba6:	46f7c783          	lbu	a5,1135(a5) # 80045011 <excpt+0x1>
    80016baa:	e7a1                	bnez	a5,80016bf2 <store_guest_page_fault_10+0x10a>
    80016bac:	4529                	li	a0,10
    80016bae:	752090ef          	jal	80020300 <putchar>
    80016bb2:	0002e797          	auipc	a5,0x2e
    80016bb6:	45f7c783          	lbu	a5,1119(a5) # 80045011 <excpt+0x1>
    80016bba:	e795                	bnez	a5,80016be6 <store_guest_page_fault_10+0xfe>
    80016bbc:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016bbe:	0000c597          	auipc	a1,0xc
    80016bc2:	f7258593          	addi	a1,a1,-142 # 80022b30 <__func__.2+0x2c8>
    80016bc6:	0000c517          	auipc	a0,0xc
    80016bca:	02250513          	addi	a0,a0,34 # 80022be8 <__func__.2+0x380>
    80016bce:	0a20a0ef          	jal	80020c70 <printf>
    80016bd2:	4511                	li	a0,4
    80016bd4:	f05e90ef          	jal	80000ad8 <goto_priv>
    80016bd8:	fd0ea0ef          	jal	800013a8 <reset_state>
}
    80016bdc:	60a2                	ld	ra,8(sp)
    80016bde:	8522                	mv	a0,s0
    80016be0:	6402                	ld	s0,0(sp)
    80016be2:	0141                	addi	sp,sp,16
    80016be4:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016be6:	4401                	li	s0,0
    TEST_END();
    80016be8:	0000c597          	auipc	a1,0xc
    80016bec:	f5858593          	addi	a1,a1,-168 # 80022b40 <__func__.2+0x2d8>
    80016bf0:	bfd9                	j	80016bc6 <store_guest_page_fault_10+0xde>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016bf2:	0000c517          	auipc	a0,0xc
    80016bf6:	f9650513          	addi	a0,a0,-106 # 80022b88 <__func__.2+0x320>
    80016bfa:	0760a0ef          	jal	80020c70 <printf>
    80016bfe:	02900513          	li	a0,41
    80016c02:	6fe090ef          	jal	80020300 <putchar>
    80016c06:	b75d                	j	80016bac <store_guest_page_fault_10+0xc4>

0000000080016c08 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80016c08:	1101                	addi	sp,sp,-32

    TEST_START();
    80016c0a:	0000b597          	auipc	a1,0xb
    80016c0e:	37658593          	addi	a1,a1,886 # 80021f80 <__func__.11>
    80016c12:	0000c517          	auipc	a0,0xc
    80016c16:	f3e50513          	addi	a0,a0,-194 # 80022b50 <__func__.2+0x2e8>
bool amo_guest_page_fault_1(){
    80016c1a:	ec06                	sd	ra,24(sp)
    80016c1c:	e822                	sd	s0,16(sp)
    80016c1e:	e426                	sd	s1,8(sp)
    80016c20:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016c22:	04e0a0ef          	jal	80020c70 <printf>
    80016c26:	4529                	li	a0,10
    80016c28:	6d8090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016c2c:	450d                	li	a0,3
    80016c2e:	eabe90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016c32:	9afe90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016c36:	bede90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016c3a:	4509                	li	a0,2
    80016c3c:	e9de90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016c40:	a71e90ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80016c44:	4509                	li	a0,2
    80016c46:	e93e90ef          	jal	80000ad8 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80016c4a:	0330000f          	fence	rw,rw
    80016c4e:	0002e497          	auipc	s1,0x2e
    80016c52:	3c248493          	addi	s1,s1,962 # 80045010 <excpt>
    80016c56:	4785                	li	a5,1
    80016c58:	0002e717          	auipc	a4,0x2e
    80016c5c:	3e073823          	sd	zero,1008(a4) # 80045048 <excpt+0x38>
    80016c60:	00f49023          	sh	a5,0(s1)
    80016c64:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016c68:	00100737          	lui	a4,0x100
    80016c6c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016c70:	0732                	slli	a4,a4,0xc
    80016c72:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80016c76:	08200593          	li	a1,130
    80016c7a:	00011617          	auipc	a2,0x11
    80016c7e:	4b660613          	addi	a2,a2,1206 # 80028130 <__func__.2+0x58c8>
    80016c82:	0000c517          	auipc	a0,0xc
    80016c86:	ee650513          	addi	a0,a0,-282 # 80022b68 <__func__.2+0x300>
    value = amoadd_w(addr,value);
    80016c8a:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80016c8e:	7e3090ef          	jal	80020c70 <printf>
    80016c92:	0002e797          	auipc	a5,0x2e
    80016c96:	37f7c783          	lbu	a5,895(a5) # 80045011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016c9a:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80016c9c:	0000c597          	auipc	a1,0xc
    80016ca0:	ea458593          	addi	a1,a1,-348 # 80022b40 <__func__.2+0x2d8>
    80016ca4:	cf89                	beqz	a5,80016cbe <amo_guest_page_fault_1+0xb6>
    80016ca6:	6498                	ld	a4,8(s1)
    80016ca8:	47dd                	li	a5,23
    80016caa:	0000c597          	auipc	a1,0xc
    80016cae:	e8658593          	addi	a1,a1,-378 # 80022b30 <__func__.2+0x2c8>
    80016cb2:	00f70663          	beq	a4,a5,80016cbe <amo_guest_page_fault_1+0xb6>
    80016cb6:	0000c597          	auipc	a1,0xc
    80016cba:	e8a58593          	addi	a1,a1,-374 # 80022b40 <__func__.2+0x2d8>
    80016cbe:	0000c517          	auipc	a0,0xc
    80016cc2:	ec250513          	addi	a0,a0,-318 # 80022b80 <__func__.2+0x318>
    80016cc6:	7ab090ef          	jal	80020c70 <printf>
    80016cca:	0002e797          	auipc	a5,0x2e
    80016cce:	3477c783          	lbu	a5,839(a5) # 80045011 <excpt+0x1>
    80016cd2:	c789                	beqz	a5,80016cdc <amo_guest_page_fault_1+0xd4>
    80016cd4:	6498                	ld	a4,8(s1)
    80016cd6:	47dd                	li	a5,23
    80016cd8:	00f70c63          	beq	a4,a5,80016cf0 <amo_guest_page_fault_1+0xe8>
    80016cdc:	0000c517          	auipc	a0,0xc
    80016ce0:	eac50513          	addi	a0,a0,-340 # 80022b88 <__func__.2+0x320>
    80016ce4:	78d090ef          	jal	80020c70 <printf>
    80016ce8:	02900513          	li	a0,41
    80016cec:	614090ef          	jal	80020300 <putchar>
    80016cf0:	4529                	li	a0,10
    80016cf2:	60e090ef          	jal	80020300 <putchar>
    80016cf6:	0002e797          	auipc	a5,0x2e
    80016cfa:	31b7c783          	lbu	a5,795(a5) # 80045011 <excpt+0x1>
    80016cfe:	4901                	li	s2,0
    80016d00:	c791                	beqz	a5,80016d0c <amo_guest_page_fault_1+0x104>
    80016d02:	0084b903          	ld	s2,8(s1)
    80016d06:	1925                	addi	s2,s2,-23
    80016d08:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80016d0c:	0330000f          	fence	rw,rw
    80016d10:	4785                	li	a5,1
    80016d12:	0002e717          	auipc	a4,0x2e
    80016d16:	32073b23          	sd	zero,822(a4) # 80045048 <excpt+0x38>
    80016d1a:	00f49023          	sh	a5,0(s1)
    80016d1e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016d22:	00100737          	lui	a4,0x100
    80016d26:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016d2a:	87a2                	mv	a5,s0
    80016d2c:	0732                	slli	a4,a4,0xc
    80016d2e:	a0f737af          	amomax.d	a5,a5,(a4)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80016d32:	08200593          	li	a1,130
    80016d36:	00011617          	auipc	a2,0x11
    80016d3a:	44a60613          	addi	a2,a2,1098 # 80028180 <__func__.2+0x5918>
    80016d3e:	0000c517          	auipc	a0,0xc
    80016d42:	e2a50513          	addi	a0,a0,-470 # 80022b68 <__func__.2+0x300>
    80016d46:	72b090ef          	jal	80020c70 <printf>
    80016d4a:	0002e797          	auipc	a5,0x2e
    80016d4e:	2c77c783          	lbu	a5,711(a5) # 80045011 <excpt+0x1>
    80016d52:	0000c597          	auipc	a1,0xc
    80016d56:	dee58593          	addi	a1,a1,-530 # 80022b40 <__func__.2+0x2d8>
    80016d5a:	cf89                	beqz	a5,80016d74 <amo_guest_page_fault_1+0x16c>
    80016d5c:	6498                	ld	a4,8(s1)
    80016d5e:	47dd                	li	a5,23
    80016d60:	0000c597          	auipc	a1,0xc
    80016d64:	dd058593          	addi	a1,a1,-560 # 80022b30 <__func__.2+0x2c8>
    80016d68:	00f70663          	beq	a4,a5,80016d74 <amo_guest_page_fault_1+0x16c>
    80016d6c:	0000c597          	auipc	a1,0xc
    80016d70:	dd458593          	addi	a1,a1,-556 # 80022b40 <__func__.2+0x2d8>
    80016d74:	0000c517          	auipc	a0,0xc
    80016d78:	e0c50513          	addi	a0,a0,-500 # 80022b80 <__func__.2+0x318>
    80016d7c:	6f5090ef          	jal	80020c70 <printf>
    80016d80:	0002e797          	auipc	a5,0x2e
    80016d84:	2917c783          	lbu	a5,657(a5) # 80045011 <excpt+0x1>
    80016d88:	c789                	beqz	a5,80016d92 <amo_guest_page_fault_1+0x18a>
    80016d8a:	6498                	ld	a4,8(s1)
    80016d8c:	47dd                	li	a5,23
    80016d8e:	00f70c63          	beq	a4,a5,80016da6 <amo_guest_page_fault_1+0x19e>
    80016d92:	0000c517          	auipc	a0,0xc
    80016d96:	df650513          	addi	a0,a0,-522 # 80022b88 <__func__.2+0x320>
    80016d9a:	6d7090ef          	jal	80020c70 <printf>
    80016d9e:	02900513          	li	a0,41
    80016da2:	55e090ef          	jal	80020300 <putchar>
    80016da6:	4529                	li	a0,10
    80016da8:	558090ef          	jal	80020300 <putchar>
    80016dac:	02090363          	beqz	s2,80016dd2 <amo_guest_page_fault_1+0x1ca>
    80016db0:	0002e417          	auipc	s0,0x2e
    80016db4:	26144403          	lbu	s0,609(s0) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80016db8:	0000c597          	auipc	a1,0xc
    80016dbc:	d8858593          	addi	a1,a1,-632 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80016dc0:	cc11                	beqz	s0,80016ddc <amo_guest_page_fault_1+0x1d4>
    80016dc2:	6498                	ld	a4,8(s1)
    80016dc4:	47dd                	li	a5,23
    TEST_END();
    80016dc6:	0000c597          	auipc	a1,0xc
    80016dca:	d6a58593          	addi	a1,a1,-662 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80016dce:	00f70763          	beq	a4,a5,80016ddc <amo_guest_page_fault_1+0x1d4>
    80016dd2:	4401                	li	s0,0
    TEST_END();
    80016dd4:	0000c597          	auipc	a1,0xc
    80016dd8:	d6c58593          	addi	a1,a1,-660 # 80022b40 <__func__.2+0x2d8>
    80016ddc:	0000c517          	auipc	a0,0xc
    80016de0:	e0c50513          	addi	a0,a0,-500 # 80022be8 <__func__.2+0x380>
    80016de4:	68d090ef          	jal	80020c70 <printf>
    80016de8:	4511                	li	a0,4
    80016dea:	cefe90ef          	jal	80000ad8 <goto_priv>
    80016dee:	dbaea0ef          	jal	800013a8 <reset_state>
}
    80016df2:	60e2                	ld	ra,24(sp)
    80016df4:	8522                	mv	a0,s0
    80016df6:	6442                	ld	s0,16(sp)
    80016df8:	64a2                	ld	s1,8(sp)
    80016dfa:	6902                	ld	s2,0(sp)
    80016dfc:	6105                	addi	sp,sp,32
    80016dfe:	8082                	ret

0000000080016e00 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    80016e00:	1101                	addi	sp,sp,-32

    TEST_START();
    80016e02:	0000b597          	auipc	a1,0xb
    80016e06:	19658593          	addi	a1,a1,406 # 80021f98 <__func__.10>
    80016e0a:	0000c517          	auipc	a0,0xc
    80016e0e:	d4650513          	addi	a0,a0,-698 # 80022b50 <__func__.2+0x2e8>
bool amo_guest_page_fault_2(){
    80016e12:	ec06                	sd	ra,24(sp)
    80016e14:	e822                	sd	s0,16(sp)
    80016e16:	e426                	sd	s1,8(sp)
    TEST_START();
    80016e18:	659090ef          	jal	80020c70 <printf>
    80016e1c:	4529                	li	a0,10
    80016e1e:	4e2090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016e22:	450d                	li	a0,3
    80016e24:	cb5e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016e28:	fb8e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016e2c:	9f7e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016e30:	4509                	li	a0,2
    80016e32:	ca7e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016e36:	87be90ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016e3a:	4509                	li	a0,2
    80016e3c:	c9de90ef          	jal	80000ad8 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80016e40:	0330000f          	fence	rw,rw
    80016e44:	0002e417          	auipc	s0,0x2e
    80016e48:	1cc40413          	addi	s0,s0,460 # 80045010 <excpt>
    80016e4c:	4785                	li	a5,1
    80016e4e:	0002e717          	auipc	a4,0x2e
    80016e52:	1e073d23          	sd	zero,506(a4) # 80045048 <excpt+0x38>
    80016e56:	00f41023          	sh	a5,0(s0)
    80016e5a:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016e5e:	000807b7          	lui	a5,0x80
    80016e62:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80016e66:	37ab77b7          	lui	a5,0x37ab7
    80016e6a:	00100737          	lui	a4,0x100
    80016e6e:	078a                	slli	a5,a5,0x2
    80016e70:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016e74:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016e78:	0732                	slli	a4,a4,0xc
    80016e7a:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016e7e:	08200593          	li	a1,130
    80016e82:	00011617          	auipc	a2,0x11
    80016e86:	35e60613          	addi	a2,a2,862 # 800281e0 <__func__.2+0x5978>
    80016e8a:	0000c517          	auipc	a0,0xc
    80016e8e:	cde50513          	addi	a0,a0,-802 # 80022b68 <__func__.2+0x300>
    80016e92:	5df090ef          	jal	80020c70 <printf>
    80016e96:	0002e797          	auipc	a5,0x2e
    80016e9a:	17b7c783          	lbu	a5,379(a5) # 80045011 <excpt+0x1>
    80016e9e:	0000c597          	auipc	a1,0xc
    80016ea2:	ca258593          	addi	a1,a1,-862 # 80022b40 <__func__.2+0x2d8>
    80016ea6:	cf89                	beqz	a5,80016ec0 <amo_guest_page_fault_2+0xc0>
    80016ea8:	6418                	ld	a4,8(s0)
    80016eaa:	47dd                	li	a5,23
    80016eac:	0000c597          	auipc	a1,0xc
    80016eb0:	c8458593          	addi	a1,a1,-892 # 80022b30 <__func__.2+0x2c8>
    80016eb4:	00f70663          	beq	a4,a5,80016ec0 <amo_guest_page_fault_2+0xc0>
    80016eb8:	0000c597          	auipc	a1,0xc
    80016ebc:	c8858593          	addi	a1,a1,-888 # 80022b40 <__func__.2+0x2d8>
    80016ec0:	0000c517          	auipc	a0,0xc
    80016ec4:	cc050513          	addi	a0,a0,-832 # 80022b80 <__func__.2+0x318>
    80016ec8:	5a9090ef          	jal	80020c70 <printf>
    80016ecc:	0002e797          	auipc	a5,0x2e
    80016ed0:	1457c783          	lbu	a5,325(a5) # 80045011 <excpt+0x1>
    80016ed4:	c789                	beqz	a5,80016ede <amo_guest_page_fault_2+0xde>
    80016ed6:	6418                	ld	a4,8(s0)
    80016ed8:	47dd                	li	a5,23
    80016eda:	00f70c63          	beq	a4,a5,80016ef2 <amo_guest_page_fault_2+0xf2>
    80016ede:	0000c517          	auipc	a0,0xc
    80016ee2:	caa50513          	addi	a0,a0,-854 # 80022b88 <__func__.2+0x320>
    80016ee6:	58b090ef          	jal	80020c70 <printf>
    80016eea:	02900513          	li	a0,41
    80016eee:	412090ef          	jal	80020300 <putchar>
    80016ef2:	4529                	li	a0,10
    80016ef4:	40c090ef          	jal	80020300 <putchar>
    80016ef8:	0002e497          	auipc	s1,0x2e
    80016efc:	1194c483          	lbu	s1,281(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80016f00:	0000c597          	auipc	a1,0xc
    80016f04:	c4058593          	addi	a1,a1,-960 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016f08:	cc91                	beqz	s1,80016f24 <amo_guest_page_fault_2+0x124>
    80016f0a:	6418                	ld	a4,8(s0)
    80016f0c:	47dd                	li	a5,23
    TEST_END();
    80016f0e:	0000c597          	auipc	a1,0xc
    80016f12:	c2258593          	addi	a1,a1,-990 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80016f16:	00f70763          	beq	a4,a5,80016f24 <amo_guest_page_fault_2+0x124>
    80016f1a:	4481                	li	s1,0
    TEST_END();
    80016f1c:	0000c597          	auipc	a1,0xc
    80016f20:	c2458593          	addi	a1,a1,-988 # 80022b40 <__func__.2+0x2d8>
    80016f24:	0000c517          	auipc	a0,0xc
    80016f28:	cc450513          	addi	a0,a0,-828 # 80022be8 <__func__.2+0x380>
    80016f2c:	545090ef          	jal	80020c70 <printf>
    80016f30:	4511                	li	a0,4
    80016f32:	ba7e90ef          	jal	80000ad8 <goto_priv>
    80016f36:	c72ea0ef          	jal	800013a8 <reset_state>
}
    80016f3a:	60e2                	ld	ra,24(sp)
    80016f3c:	6442                	ld	s0,16(sp)
    80016f3e:	8526                	mv	a0,s1
    80016f40:	64a2                	ld	s1,8(sp)
    80016f42:	6105                	addi	sp,sp,32
    80016f44:	8082                	ret

0000000080016f46 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80016f46:	1101                	addi	sp,sp,-32

    TEST_START();
    80016f48:	0000b597          	auipc	a1,0xb
    80016f4c:	06858593          	addi	a1,a1,104 # 80021fb0 <__func__.9>
    80016f50:	0000c517          	auipc	a0,0xc
    80016f54:	c0050513          	addi	a0,a0,-1024 # 80022b50 <__func__.2+0x2e8>
bool amo_guest_page_fault_3(){
    80016f58:	ec06                	sd	ra,24(sp)
    80016f5a:	e822                	sd	s0,16(sp)
    80016f5c:	e426                	sd	s1,8(sp)
    TEST_START();
    80016f5e:	513090ef          	jal	80020c70 <printf>
    80016f62:	4529                	li	a0,10
    80016f64:	39c090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80016f68:	450d                	li	a0,3
    80016f6a:	b6fe90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80016f6e:	e72e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016f72:	8b1e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80016f76:	4509                	li	a0,2
    80016f78:	b61e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80016f7c:	f34e90ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016f80:	4509                	li	a0,2
    80016f82:	b57e90ef          	jal	80000ad8 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80016f86:	0330000f          	fence	rw,rw
    80016f8a:	0002e497          	auipc	s1,0x2e
    80016f8e:	08648493          	addi	s1,s1,134 # 80045010 <excpt>
    80016f92:	4785                	li	a5,1
    80016f94:	0002e717          	auipc	a4,0x2e
    80016f98:	0a073a23          	sd	zero,180(a4) # 80045048 <excpt+0x38>
    80016f9c:	00f49023          	sh	a5,0(s1)
    80016fa0:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80016fa4:	000807b7          	lui	a5,0x80
    80016fa8:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80016fac:	37ab77b7          	lui	a5,0x37ab7
    80016fb0:	00100737          	lui	a4,0x100
    80016fb4:	078a                	slli	a5,a5,0x2
    80016fb6:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80016fba:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016fbe:	0732                	slli	a4,a4,0xc
    80016fc0:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80016fc4:	08200593          	li	a1,130
    80016fc8:	00011617          	auipc	a2,0x11
    80016fcc:	28060613          	addi	a2,a2,640 # 80028248 <__func__.2+0x59e0>
    80016fd0:	0000c517          	auipc	a0,0xc
    80016fd4:	b9850513          	addi	a0,a0,-1128 # 80022b68 <__func__.2+0x300>
    80016fd8:	499090ef          	jal	80020c70 <printf>
    80016fdc:	0002e797          	auipc	a5,0x2e
    80016fe0:	0357c783          	lbu	a5,53(a5) # 80045011 <excpt+0x1>
    80016fe4:	0000c597          	auipc	a1,0xc
    80016fe8:	b5c58593          	addi	a1,a1,-1188 # 80022b40 <__func__.2+0x2d8>
    80016fec:	cf89                	beqz	a5,80017006 <amo_guest_page_fault_3+0xc0>
    80016fee:	6498                	ld	a4,8(s1)
    80016ff0:	47dd                	li	a5,23
    80016ff2:	0000c597          	auipc	a1,0xc
    80016ff6:	b3e58593          	addi	a1,a1,-1218 # 80022b30 <__func__.2+0x2c8>
    80016ffa:	00f70663          	beq	a4,a5,80017006 <amo_guest_page_fault_3+0xc0>
    80016ffe:	0000c597          	auipc	a1,0xc
    80017002:	b4258593          	addi	a1,a1,-1214 # 80022b40 <__func__.2+0x2d8>
    80017006:	0000c517          	auipc	a0,0xc
    8001700a:	b7a50513          	addi	a0,a0,-1158 # 80022b80 <__func__.2+0x318>
    8001700e:	463090ef          	jal	80020c70 <printf>
    80017012:	0002e797          	auipc	a5,0x2e
    80017016:	fff7c783          	lbu	a5,-1(a5) # 80045011 <excpt+0x1>
    8001701a:	c789                	beqz	a5,80017024 <amo_guest_page_fault_3+0xde>
    8001701c:	6498                	ld	a4,8(s1)
    8001701e:	47dd                	li	a5,23
    80017020:	00f70c63          	beq	a4,a5,80017038 <amo_guest_page_fault_3+0xf2>
    80017024:	0000c517          	auipc	a0,0xc
    80017028:	b6450513          	addi	a0,a0,-1180 # 80022b88 <__func__.2+0x320>
    8001702c:	445090ef          	jal	80020c70 <printf>
    80017030:	02900513          	li	a0,41
    80017034:	2cc090ef          	jal	80020300 <putchar>
    80017038:	4529                	li	a0,10
    8001703a:	2c6090ef          	jal	80020300 <putchar>
    8001703e:	0002e417          	auipc	s0,0x2e
    80017042:	fd344403          	lbu	s0,-45(s0) # 80045011 <excpt+0x1>
    80017046:	c409                	beqz	s0,80017050 <amo_guest_page_fault_3+0x10a>
    80017048:	6498                	ld	a4,8(s1)
    8001704a:	47dd                	li	a5,23
    8001704c:	02f70c63          	beq	a4,a5,80017084 <amo_guest_page_fault_3+0x13e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017050:	000807b7          	lui	a5,0x80
    80017054:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80017058:	4401                	li	s0,0

    TEST_END();
    8001705a:	0000c597          	auipc	a1,0xc
    8001705e:	ae658593          	addi	a1,a1,-1306 # 80022b40 <__func__.2+0x2d8>
    80017062:	0000c517          	auipc	a0,0xc
    80017066:	b8650513          	addi	a0,a0,-1146 # 80022be8 <__func__.2+0x380>
    8001706a:	407090ef          	jal	80020c70 <printf>
    8001706e:	4511                	li	a0,4
    80017070:	a69e90ef          	jal	80000ad8 <goto_priv>
    80017074:	b34ea0ef          	jal	800013a8 <reset_state>
}
    80017078:	60e2                	ld	ra,24(sp)
    8001707a:	8522                	mv	a0,s0
    8001707c:	6442                	ld	s0,16(sp)
    8001707e:	64a2                	ld	s1,8(sp)
    80017080:	6105                	addi	sp,sp,32
    80017082:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017084:	000807b7          	lui	a5,0x80
    80017088:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001708c:	0000c597          	auipc	a1,0xc
    80017090:	aa458593          	addi	a1,a1,-1372 # 80022b30 <__func__.2+0x2c8>
    80017094:	b7f9                	j	80017062 <amo_guest_page_fault_3+0x11c>

0000000080017096 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    80017096:	1101                	addi	sp,sp,-32

    TEST_START();
    80017098:	0000b597          	auipc	a1,0xb
    8001709c:	f3058593          	addi	a1,a1,-208 # 80021fc8 <__func__.8>
    800170a0:	0000c517          	auipc	a0,0xc
    800170a4:	ab050513          	addi	a0,a0,-1360 # 80022b50 <__func__.2+0x2e8>
bool amo_guest_page_fault_4(){
    800170a8:	ec06                	sd	ra,24(sp)
    800170aa:	e822                	sd	s0,16(sp)
    800170ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800170ae:	3c3090ef          	jal	80020c70 <printf>
    800170b2:	4529                	li	a0,10
    800170b4:	24c090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800170b8:	450d                	li	a0,3
    800170ba:	a1fe90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800170be:	d22e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800170c2:	f60e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800170c6:	4509                	li	a0,2
    800170c8:	a11e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800170cc:	de4e90ef          	jal	800006b0 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    800170d0:	4511                	li	a0,4
    800170d2:	a07e90ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800170d6:	000407b7          	lui	a5,0x40
    800170da:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800170de:	450d                	li	a0,3
    800170e0:	9f9e90ef          	jal	80000ad8 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800170e4:	0330000f          	fence	rw,rw
    800170e8:	0002e417          	auipc	s0,0x2e
    800170ec:	f2840413          	addi	s0,s0,-216 # 80045010 <excpt>
    800170f0:	4785                	li	a5,1
    800170f2:	0002e717          	auipc	a4,0x2e
    800170f6:	f4073b23          	sd	zero,-170(a4) # 80045048 <excpt+0x38>
    800170fa:	00f41023          	sh	a5,0(s0)
    800170fe:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80017102:	37ab77b7          	lui	a5,0x37ab7
    80017106:	00080737          	lui	a4,0x80
    8001710a:	078a                	slli	a5,a5,0x2
    8001710c:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001710e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017112:	0736                	slli	a4,a4,0xd
    80017114:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80017118:	08200593          	li	a1,130
    8001711c:	00011617          	auipc	a2,0x11
    80017120:	19c60613          	addi	a2,a2,412 # 800282b8 <__func__.2+0x5a50>
    80017124:	0000c517          	auipc	a0,0xc
    80017128:	a4450513          	addi	a0,a0,-1468 # 80022b68 <__func__.2+0x300>
    8001712c:	345090ef          	jal	80020c70 <printf>
    80017130:	0002e797          	auipc	a5,0x2e
    80017134:	ee17c783          	lbu	a5,-287(a5) # 80045011 <excpt+0x1>
    80017138:	0000c597          	auipc	a1,0xc
    8001713c:	a0858593          	addi	a1,a1,-1528 # 80022b40 <__func__.2+0x2d8>
    80017140:	cf89                	beqz	a5,8001715a <amo_guest_page_fault_4+0xc4>
    80017142:	6418                	ld	a4,8(s0)
    80017144:	47bd                	li	a5,15
    80017146:	0000c597          	auipc	a1,0xc
    8001714a:	9ea58593          	addi	a1,a1,-1558 # 80022b30 <__func__.2+0x2c8>
    8001714e:	00f70663          	beq	a4,a5,8001715a <amo_guest_page_fault_4+0xc4>
    80017152:	0000c597          	auipc	a1,0xc
    80017156:	9ee58593          	addi	a1,a1,-1554 # 80022b40 <__func__.2+0x2d8>
    8001715a:	0000c517          	auipc	a0,0xc
    8001715e:	a2650513          	addi	a0,a0,-1498 # 80022b80 <__func__.2+0x318>
    80017162:	30f090ef          	jal	80020c70 <printf>
    80017166:	0002e797          	auipc	a5,0x2e
    8001716a:	eab7c783          	lbu	a5,-341(a5) # 80045011 <excpt+0x1>
    8001716e:	c789                	beqz	a5,80017178 <amo_guest_page_fault_4+0xe2>
    80017170:	6418                	ld	a4,8(s0)
    80017172:	47bd                	li	a5,15
    80017174:	00f70c63          	beq	a4,a5,8001718c <amo_guest_page_fault_4+0xf6>
    80017178:	0000c517          	auipc	a0,0xc
    8001717c:	a1050513          	addi	a0,a0,-1520 # 80022b88 <__func__.2+0x320>
    80017180:	2f1090ef          	jal	80020c70 <printf>
    80017184:	02900513          	li	a0,41
    80017188:	178090ef          	jal	80020300 <putchar>
    8001718c:	4529                	li	a0,10
    8001718e:	172090ef          	jal	80020300 <putchar>
    80017192:	0002e497          	auipc	s1,0x2e
    80017196:	e7f4c483          	lbu	s1,-385(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001719a:	0000c597          	auipc	a1,0xc
    8001719e:	9a658593          	addi	a1,a1,-1626 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800171a2:	cc91                	beqz	s1,800171be <amo_guest_page_fault_4+0x128>
    800171a4:	6418                	ld	a4,8(s0)
    800171a6:	47bd                	li	a5,15
    TEST_END();
    800171a8:	0000c597          	auipc	a1,0xc
    800171ac:	98858593          	addi	a1,a1,-1656 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800171b0:	00f70763          	beq	a4,a5,800171be <amo_guest_page_fault_4+0x128>
    800171b4:	4481                	li	s1,0
    TEST_END();
    800171b6:	0000c597          	auipc	a1,0xc
    800171ba:	98a58593          	addi	a1,a1,-1654 # 80022b40 <__func__.2+0x2d8>
    800171be:	0000c517          	auipc	a0,0xc
    800171c2:	a2a50513          	addi	a0,a0,-1494 # 80022be8 <__func__.2+0x380>
    800171c6:	2ab090ef          	jal	80020c70 <printf>
    800171ca:	4511                	li	a0,4
    800171cc:	90de90ef          	jal	80000ad8 <goto_priv>
    800171d0:	9d8ea0ef          	jal	800013a8 <reset_state>
}
    800171d4:	60e2                	ld	ra,24(sp)
    800171d6:	6442                	ld	s0,16(sp)
    800171d8:	8526                	mv	a0,s1
    800171da:	64a2                	ld	s1,8(sp)
    800171dc:	6105                	addi	sp,sp,32
    800171de:	8082                	ret

00000000800171e0 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    800171e0:	1141                	addi	sp,sp,-16

    TEST_START();
    800171e2:	0000b597          	auipc	a1,0xb
    800171e6:	dfe58593          	addi	a1,a1,-514 # 80021fe0 <__func__.7>
    800171ea:	0000c517          	auipc	a0,0xc
    800171ee:	96650513          	addi	a0,a0,-1690 # 80022b50 <__func__.2+0x2e8>
bool amo_guest_page_fault_5(){
    800171f2:	e406                	sd	ra,8(sp)
    800171f4:	e022                	sd	s0,0(sp)
    TEST_START();
    800171f6:	27b090ef          	jal	80020c70 <printf>
    800171fa:	4529                	li	a0,10
    800171fc:	104090ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80017200:	450d                	li	a0,3
    80017202:	8d7e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80017206:	bdae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001720a:	e18e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001720e:	4509                	li	a0,2
    80017210:	8c9e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80017214:	c9ce90ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    80017218:	4511                	li	a0,4
    8001721a:	8bfe90ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    8001721e:	000407b7          	lui	a5,0x40
    80017222:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80017226:	450d                	li	a0,3
    80017228:	8b1e90ef          	jal	80000ad8 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001722c:	0330000f          	fence	rw,rw
    80017230:	4785                	li	a5,1
    80017232:	0002e717          	auipc	a4,0x2e
    80017236:	e0073b23          	sd	zero,-490(a4) # 80045048 <excpt+0x38>
    8001723a:	0002e717          	auipc	a4,0x2e
    8001723e:	dcf71b23          	sh	a5,-554(a4) # 80045010 <excpt>
    80017242:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80017246:	37ab77b7          	lui	a5,0x37ab7
    8001724a:	00080737          	lui	a4,0x80
    8001724e:	078a                	slli	a5,a5,0x2
    80017250:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017252:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017256:	0736                	slli	a4,a4,0xd
    80017258:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001725c:	08200593          	li	a1,130
    80017260:	00011617          	auipc	a2,0x11
    80017264:	09860613          	addi	a2,a2,152 # 800282f8 <__func__.2+0x5a90>
    80017268:	0000c517          	auipc	a0,0xc
    8001726c:	90050513          	addi	a0,a0,-1792 # 80022b68 <__func__.2+0x300>
    80017270:	201090ef          	jal	80020c70 <printf>
    80017274:	0002e797          	auipc	a5,0x2e
    80017278:	d9d7c783          	lbu	a5,-611(a5) # 80045011 <excpt+0x1>
    8001727c:	0000c597          	auipc	a1,0xc
    80017280:	8b458593          	addi	a1,a1,-1868 # 80022b30 <__func__.2+0x2c8>
    80017284:	c789                	beqz	a5,8001728e <amo_guest_page_fault_5+0xae>
    80017286:	0000c597          	auipc	a1,0xc
    8001728a:	8ba58593          	addi	a1,a1,-1862 # 80022b40 <__func__.2+0x2d8>
    8001728e:	0000c517          	auipc	a0,0xc
    80017292:	8f250513          	addi	a0,a0,-1806 # 80022b80 <__func__.2+0x318>
    80017296:	1db090ef          	jal	80020c70 <printf>
    8001729a:	0002e797          	auipc	a5,0x2e
    8001729e:	d777c783          	lbu	a5,-649(a5) # 80045011 <excpt+0x1>
    800172a2:	e7a1                	bnez	a5,800172ea <amo_guest_page_fault_5+0x10a>
    800172a4:	4529                	li	a0,10
    800172a6:	05a090ef          	jal	80020300 <putchar>
    800172aa:	0002e797          	auipc	a5,0x2e
    800172ae:	d677c783          	lbu	a5,-665(a5) # 80045011 <excpt+0x1>
    800172b2:	e795                	bnez	a5,800172de <amo_guest_page_fault_5+0xfe>
    800172b4:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800172b6:	0000c597          	auipc	a1,0xc
    800172ba:	87a58593          	addi	a1,a1,-1926 # 80022b30 <__func__.2+0x2c8>
    800172be:	0000c517          	auipc	a0,0xc
    800172c2:	92a50513          	addi	a0,a0,-1750 # 80022be8 <__func__.2+0x380>
    800172c6:	1ab090ef          	jal	80020c70 <printf>
    800172ca:	4511                	li	a0,4
    800172cc:	80de90ef          	jal	80000ad8 <goto_priv>
    800172d0:	8d8ea0ef          	jal	800013a8 <reset_state>
}
    800172d4:	60a2                	ld	ra,8(sp)
    800172d6:	8522                	mv	a0,s0
    800172d8:	6402                	ld	s0,0(sp)
    800172da:	0141                	addi	sp,sp,16
    800172dc:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800172de:	4401                	li	s0,0
    TEST_END();
    800172e0:	0000c597          	auipc	a1,0xc
    800172e4:	86058593          	addi	a1,a1,-1952 # 80022b40 <__func__.2+0x2d8>
    800172e8:	bfd9                	j	800172be <amo_guest_page_fault_5+0xde>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800172ea:	0000c517          	auipc	a0,0xc
    800172ee:	89e50513          	addi	a0,a0,-1890 # 80022b88 <__func__.2+0x320>
    800172f2:	17f090ef          	jal	80020c70 <printf>
    800172f6:	02900513          	li	a0,41
    800172fa:	006090ef          	jal	80020300 <putchar>
    800172fe:	b75d                	j	800172a4 <amo_guest_page_fault_5+0xc4>

0000000080017300 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80017300:	1101                	addi	sp,sp,-32

    TEST_START();
    80017302:	0000b597          	auipc	a1,0xb
    80017306:	cf658593          	addi	a1,a1,-778 # 80021ff8 <__func__.6>
    8001730a:	0000c517          	auipc	a0,0xc
    8001730e:	84650513          	addi	a0,a0,-1978 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_1(){
    80017312:	ec06                	sd	ra,24(sp)
    80017314:	e822                	sd	s0,16(sp)
    80017316:	e426                	sd	s1,8(sp)
    TEST_START();
    80017318:	159090ef          	jal	80020c70 <printf>
    8001731c:	4529                	li	a0,10
    8001731e:	7e3080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80017322:	450d                	li	a0,3
    80017324:	fb4e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80017328:	ab8e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001732c:	cf6e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80017330:	4509                	li	a0,2
    80017332:	fa6e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80017336:	b7ae90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001733a:	4509                	li	a0,2
    8001733c:	f9ce90ef          	jal	80000ad8 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    80017340:	0330000f          	fence	rw,rw
    80017344:	0002e417          	auipc	s0,0x2e
    80017348:	ccc40413          	addi	s0,s0,-820 # 80045010 <excpt>
    8001734c:	4785                	li	a5,1
    8001734e:	0002e717          	auipc	a4,0x2e
    80017352:	ce073d23          	sd	zero,-774(a4) # 80045048 <excpt+0x38>
    80017356:	00f41023          	sh	a5,0(s0)
    8001735a:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001735e:	001007b7          	lui	a5,0x100
    80017362:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017366:	07b2                	slli	a5,a5,0xc
    80017368:	00000297          	auipc	t0,0x0
    8001736c:	00c28293          	addi	t0,t0,12 # 80017374 <instruction_guest_page_fault_1+0x74>
    80017370:	02543c23          	sd	t0,56(s0)
    80017374:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80017376:	08200593          	li	a1,130
    8001737a:	00011617          	auipc	a2,0x11
    8001737e:	fbe60613          	addi	a2,a2,-66 # 80028338 <__func__.2+0x5ad0>
    80017382:	0000b517          	auipc	a0,0xb
    80017386:	7e650513          	addi	a0,a0,2022 # 80022b68 <__func__.2+0x300>
    8001738a:	0e7090ef          	jal	80020c70 <printf>
    8001738e:	0002e797          	auipc	a5,0x2e
    80017392:	c837c783          	lbu	a5,-893(a5) # 80045011 <excpt+0x1>
    80017396:	0000b597          	auipc	a1,0xb
    8001739a:	7aa58593          	addi	a1,a1,1962 # 80022b40 <__func__.2+0x2d8>
    8001739e:	cf89                	beqz	a5,800173b8 <instruction_guest_page_fault_1+0xb8>
    800173a0:	6418                	ld	a4,8(s0)
    800173a2:	47d1                	li	a5,20
    800173a4:	0000b597          	auipc	a1,0xb
    800173a8:	78c58593          	addi	a1,a1,1932 # 80022b30 <__func__.2+0x2c8>
    800173ac:	00f70663          	beq	a4,a5,800173b8 <instruction_guest_page_fault_1+0xb8>
    800173b0:	0000b597          	auipc	a1,0xb
    800173b4:	79058593          	addi	a1,a1,1936 # 80022b40 <__func__.2+0x2d8>
    800173b8:	0000b517          	auipc	a0,0xb
    800173bc:	7c850513          	addi	a0,a0,1992 # 80022b80 <__func__.2+0x318>
    800173c0:	0b1090ef          	jal	80020c70 <printf>
    800173c4:	0002e797          	auipc	a5,0x2e
    800173c8:	c4d7c783          	lbu	a5,-947(a5) # 80045011 <excpt+0x1>
    800173cc:	c789                	beqz	a5,800173d6 <instruction_guest_page_fault_1+0xd6>
    800173ce:	6418                	ld	a4,8(s0)
    800173d0:	47d1                	li	a5,20
    800173d2:	00f70c63          	beq	a4,a5,800173ea <instruction_guest_page_fault_1+0xea>
    800173d6:	0000b517          	auipc	a0,0xb
    800173da:	7b250513          	addi	a0,a0,1970 # 80022b88 <__func__.2+0x320>
    800173de:	093090ef          	jal	80020c70 <printf>
    800173e2:	02900513          	li	a0,41
    800173e6:	71b080ef          	jal	80020300 <putchar>
    800173ea:	4529                	li	a0,10
    800173ec:	715080ef          	jal	80020300 <putchar>
    800173f0:	0002e497          	auipc	s1,0x2e
    800173f4:	c214c483          	lbu	s1,-991(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800173f8:	0000b597          	auipc	a1,0xb
    800173fc:	74858593          	addi	a1,a1,1864 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80017400:	cc91                	beqz	s1,8001741c <instruction_guest_page_fault_1+0x11c>
    80017402:	6418                	ld	a4,8(s0)
    80017404:	47d1                	li	a5,20
    TEST_END();
    80017406:	0000b597          	auipc	a1,0xb
    8001740a:	72a58593          	addi	a1,a1,1834 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001740e:	00f70763          	beq	a4,a5,8001741c <instruction_guest_page_fault_1+0x11c>
    80017412:	4481                	li	s1,0
    TEST_END();
    80017414:	0000b597          	auipc	a1,0xb
    80017418:	72c58593          	addi	a1,a1,1836 # 80022b40 <__func__.2+0x2d8>
    8001741c:	0000b517          	auipc	a0,0xb
    80017420:	7cc50513          	addi	a0,a0,1996 # 80022be8 <__func__.2+0x380>
    80017424:	04d090ef          	jal	80020c70 <printf>
    80017428:	4511                	li	a0,4
    8001742a:	eaee90ef          	jal	80000ad8 <goto_priv>
    8001742e:	f7be90ef          	jal	800013a8 <reset_state>

}
    80017432:	60e2                	ld	ra,24(sp)
    80017434:	6442                	ld	s0,16(sp)
    80017436:	8526                	mv	a0,s1
    80017438:	64a2                	ld	s1,8(sp)
    8001743a:	6105                	addi	sp,sp,32
    8001743c:	8082                	ret

000000008001743e <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    8001743e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017440:	0000b597          	auipc	a1,0xb
    80017444:	bd858593          	addi	a1,a1,-1064 # 80022018 <__func__.5>
    80017448:	0000b517          	auipc	a0,0xb
    8001744c:	70850513          	addi	a0,a0,1800 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_2(){
    80017450:	ec06                	sd	ra,24(sp)
    80017452:	e822                	sd	s0,16(sp)
    80017454:	e426                	sd	s1,8(sp)
    TEST_START();
    80017456:	01b090ef          	jal	80020c70 <printf>
    8001745a:	4529                	li	a0,10
    8001745c:	6a5080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80017460:	450d                	li	a0,3
    80017462:	e76e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80017466:	97ae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001746a:	bb8e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001746e:	4509                	li	a0,2
    80017470:	e68e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80017474:	a3ce90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80017478:	4509                	li	a0,2
    8001747a:	e5ee90ef          	jal	80000ad8 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001747e:	0330000f          	fence	rw,rw
    80017482:	0002e417          	auipc	s0,0x2e
    80017486:	b8e40413          	addi	s0,s0,-1138 # 80045010 <excpt>
    8001748a:	4785                	li	a5,1
    8001748c:	0002e717          	auipc	a4,0x2e
    80017490:	ba073e23          	sd	zero,-1092(a4) # 80045048 <excpt+0x38>
    80017494:	00f41023          	sh	a5,0(s0)
    80017498:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001749c:	400137b7          	lui	a5,0x40013
    800174a0:	078a                	slli	a5,a5,0x2
    800174a2:	00000297          	auipc	t0,0x0
    800174a6:	00c28293          	addi	t0,t0,12 # 800174ae <instruction_guest_page_fault_2+0x70>
    800174aa:	02543c23          	sd	t0,56(s0)
    800174ae:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800174b0:	08200593          	li	a1,130
    800174b4:	00011617          	auipc	a2,0x11
    800174b8:	ee460613          	addi	a2,a2,-284 # 80028398 <__func__.2+0x5b30>
    800174bc:	0000b517          	auipc	a0,0xb
    800174c0:	6ac50513          	addi	a0,a0,1708 # 80022b68 <__func__.2+0x300>
    800174c4:	7ac090ef          	jal	80020c70 <printf>
    800174c8:	0002e797          	auipc	a5,0x2e
    800174cc:	b497c783          	lbu	a5,-1207(a5) # 80045011 <excpt+0x1>
    800174d0:	0000b597          	auipc	a1,0xb
    800174d4:	67058593          	addi	a1,a1,1648 # 80022b40 <__func__.2+0x2d8>
    800174d8:	cf89                	beqz	a5,800174f2 <instruction_guest_page_fault_2+0xb4>
    800174da:	6418                	ld	a4,8(s0)
    800174dc:	47d1                	li	a5,20
    800174de:	0000b597          	auipc	a1,0xb
    800174e2:	65258593          	addi	a1,a1,1618 # 80022b30 <__func__.2+0x2c8>
    800174e6:	00f70663          	beq	a4,a5,800174f2 <instruction_guest_page_fault_2+0xb4>
    800174ea:	0000b597          	auipc	a1,0xb
    800174ee:	65658593          	addi	a1,a1,1622 # 80022b40 <__func__.2+0x2d8>
    800174f2:	0000b517          	auipc	a0,0xb
    800174f6:	68e50513          	addi	a0,a0,1678 # 80022b80 <__func__.2+0x318>
    800174fa:	776090ef          	jal	80020c70 <printf>
    800174fe:	0002e797          	auipc	a5,0x2e
    80017502:	b137c783          	lbu	a5,-1261(a5) # 80045011 <excpt+0x1>
    80017506:	c789                	beqz	a5,80017510 <instruction_guest_page_fault_2+0xd2>
    80017508:	6418                	ld	a4,8(s0)
    8001750a:	47d1                	li	a5,20
    8001750c:	00f70c63          	beq	a4,a5,80017524 <instruction_guest_page_fault_2+0xe6>
    80017510:	0000b517          	auipc	a0,0xb
    80017514:	67850513          	addi	a0,a0,1656 # 80022b88 <__func__.2+0x320>
    80017518:	758090ef          	jal	80020c70 <printf>
    8001751c:	02900513          	li	a0,41
    80017520:	5e1080ef          	jal	80020300 <putchar>
    80017524:	4529                	li	a0,10
    80017526:	5db080ef          	jal	80020300 <putchar>
    8001752a:	0002e497          	auipc	s1,0x2e
    8001752e:	ae74c483          	lbu	s1,-1305(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80017532:	0000b597          	auipc	a1,0xb
    80017536:	60e58593          	addi	a1,a1,1550 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001753a:	cc91                	beqz	s1,80017556 <instruction_guest_page_fault_2+0x118>
    8001753c:	6418                	ld	a4,8(s0)
    8001753e:	47d1                	li	a5,20
    TEST_END();
    80017540:	0000b597          	auipc	a1,0xb
    80017544:	5f058593          	addi	a1,a1,1520 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80017548:	00f70763          	beq	a4,a5,80017556 <instruction_guest_page_fault_2+0x118>
    8001754c:	4481                	li	s1,0
    TEST_END();
    8001754e:	0000b597          	auipc	a1,0xb
    80017552:	5f258593          	addi	a1,a1,1522 # 80022b40 <__func__.2+0x2d8>
    80017556:	0000b517          	auipc	a0,0xb
    8001755a:	69250513          	addi	a0,a0,1682 # 80022be8 <__func__.2+0x380>
    8001755e:	712090ef          	jal	80020c70 <printf>
    80017562:	4511                	li	a0,4
    80017564:	d74e90ef          	jal	80000ad8 <goto_priv>
    80017568:	e41e90ef          	jal	800013a8 <reset_state>
}
    8001756c:	60e2                	ld	ra,24(sp)
    8001756e:	6442                	ld	s0,16(sp)
    80017570:	8526                	mv	a0,s1
    80017572:	64a2                	ld	s1,8(sp)
    80017574:	6105                	addi	sp,sp,32
    80017576:	8082                	ret

0000000080017578 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    80017578:	1101                	addi	sp,sp,-32

    TEST_START();
    8001757a:	0000b597          	auipc	a1,0xb
    8001757e:	abe58593          	addi	a1,a1,-1346 # 80022038 <__func__.4>
    80017582:	0000b517          	auipc	a0,0xb
    80017586:	5ce50513          	addi	a0,a0,1486 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_3(){
    8001758a:	ec06                	sd	ra,24(sp)
    8001758c:	e822                	sd	s0,16(sp)
    8001758e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017590:	6e0090ef          	jal	80020c70 <printf>
    80017594:	4529                	li	a0,10
    80017596:	56b080ef          	jal	80020300 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    8001759a:	000407b7          	lui	a5,0x40
    8001759e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800175a2:	450d                	li	a0,3
    800175a4:	d34e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800175a8:	838e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800175ac:	a76e90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800175b0:	4509                	li	a0,2
    800175b2:	d26e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800175b6:	8fae90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800175ba:	4509                	li	a0,2
    800175bc:	d1ce90ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800175c0:	0330000f          	fence	rw,rw
    800175c4:	0002e417          	auipc	s0,0x2e
    800175c8:	a4c40413          	addi	s0,s0,-1460 # 80045010 <excpt>
    800175cc:	4785                	li	a5,1
    800175ce:	0002e717          	auipc	a4,0x2e
    800175d2:	a6073d23          	sd	zero,-1414(a4) # 80045048 <excpt+0x38>
    800175d6:	00f41023          	sh	a5,0(s0)
    800175da:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    800175de:	000807b7          	lui	a5,0x80
    800175e2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800175e4:	07b6                	slli	a5,a5,0xd
    800175e6:	00000297          	auipc	t0,0x0
    800175ea:	00c28293          	addi	t0,t0,12 # 800175f2 <instruction_guest_page_fault_3+0x7a>
    800175ee:	02543c23          	sd	t0,56(s0)
    800175f2:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800175f4:	08200593          	li	a1,130
    800175f8:	00011617          	auipc	a2,0x11
    800175fc:	e0060613          	addi	a2,a2,-512 # 800283f8 <__func__.2+0x5b90>
    80017600:	0000b517          	auipc	a0,0xb
    80017604:	56850513          	addi	a0,a0,1384 # 80022b68 <__func__.2+0x300>
    80017608:	668090ef          	jal	80020c70 <printf>
    8001760c:	0002e797          	auipc	a5,0x2e
    80017610:	a057c783          	lbu	a5,-1531(a5) # 80045011 <excpt+0x1>
    80017614:	0000b597          	auipc	a1,0xb
    80017618:	52c58593          	addi	a1,a1,1324 # 80022b40 <__func__.2+0x2d8>
    8001761c:	cf89                	beqz	a5,80017636 <instruction_guest_page_fault_3+0xbe>
    8001761e:	6418                	ld	a4,8(s0)
    80017620:	47b1                	li	a5,12
    80017622:	0000b597          	auipc	a1,0xb
    80017626:	50e58593          	addi	a1,a1,1294 # 80022b30 <__func__.2+0x2c8>
    8001762a:	00f70663          	beq	a4,a5,80017636 <instruction_guest_page_fault_3+0xbe>
    8001762e:	0000b597          	auipc	a1,0xb
    80017632:	51258593          	addi	a1,a1,1298 # 80022b40 <__func__.2+0x2d8>
    80017636:	0000b517          	auipc	a0,0xb
    8001763a:	54a50513          	addi	a0,a0,1354 # 80022b80 <__func__.2+0x318>
    8001763e:	632090ef          	jal	80020c70 <printf>
    80017642:	0002e797          	auipc	a5,0x2e
    80017646:	9cf7c783          	lbu	a5,-1585(a5) # 80045011 <excpt+0x1>
    8001764a:	c789                	beqz	a5,80017654 <instruction_guest_page_fault_3+0xdc>
    8001764c:	6418                	ld	a4,8(s0)
    8001764e:	47b1                	li	a5,12
    80017650:	00f70c63          	beq	a4,a5,80017668 <instruction_guest_page_fault_3+0xf0>
    80017654:	0000b517          	auipc	a0,0xb
    80017658:	53450513          	addi	a0,a0,1332 # 80022b88 <__func__.2+0x320>
    8001765c:	614090ef          	jal	80020c70 <printf>
    80017660:	02900513          	li	a0,41
    80017664:	49d080ef          	jal	80020300 <putchar>
    80017668:	4529                	li	a0,10
    8001766a:	497080ef          	jal	80020300 <putchar>
    8001766e:	0002e497          	auipc	s1,0x2e
    80017672:	9a34c483          	lbu	s1,-1629(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80017676:	0000b597          	auipc	a1,0xb
    8001767a:	4ca58593          	addi	a1,a1,1226 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001767e:	cc91                	beqz	s1,8001769a <instruction_guest_page_fault_3+0x122>
    80017680:	6418                	ld	a4,8(s0)
    80017682:	47b1                	li	a5,12
    TEST_END();
    80017684:	0000b597          	auipc	a1,0xb
    80017688:	4ac58593          	addi	a1,a1,1196 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001768c:	00f70763          	beq	a4,a5,8001769a <instruction_guest_page_fault_3+0x122>
    80017690:	4481                	li	s1,0
    TEST_END();
    80017692:	0000b597          	auipc	a1,0xb
    80017696:	4ae58593          	addi	a1,a1,1198 # 80022b40 <__func__.2+0x2d8>
    8001769a:	0000b517          	auipc	a0,0xb
    8001769e:	54e50513          	addi	a0,a0,1358 # 80022be8 <__func__.2+0x380>
    800176a2:	5ce090ef          	jal	80020c70 <printf>
    800176a6:	4511                	li	a0,4
    800176a8:	c30e90ef          	jal	80000ad8 <goto_priv>
    800176ac:	cfde90ef          	jal	800013a8 <reset_state>
}
    800176b0:	60e2                	ld	ra,24(sp)
    800176b2:	6442                	ld	s0,16(sp)
    800176b4:	8526                	mv	a0,s1
    800176b6:	64a2                	ld	s1,8(sp)
    800176b8:	6105                	addi	sp,sp,32
    800176ba:	8082                	ret

00000000800176bc <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    800176bc:	1101                	addi	sp,sp,-32

    TEST_START();
    800176be:	0000b597          	auipc	a1,0xb
    800176c2:	99a58593          	addi	a1,a1,-1638 # 80022058 <__func__.3>
    800176c6:	0000b517          	auipc	a0,0xb
    800176ca:	48a50513          	addi	a0,a0,1162 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_4(){
    800176ce:	ec06                	sd	ra,24(sp)
    800176d0:	e822                	sd	s0,16(sp)
    800176d2:	e426                	sd	s1,8(sp)
    TEST_START();
    800176d4:	59c090ef          	jal	80020c70 <printf>
    800176d8:	4529                	li	a0,10
    800176da:	427080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    800176de:	450d                	li	a0,3
    800176e0:	bf8e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    800176e4:	efde80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800176e8:	93ae90ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    800176ec:	4509                	li	a0,2
    800176ee:	beae90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    800176f2:	fbfe80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    800176f6:	4511                	li	a0,4
    800176f8:	be0e90ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800176fc:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    80017700:	4509                	li	a0,2
    80017702:	bd6e90ef          	jal	80000ad8 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    80017706:	0330000f          	fence	rw,rw
    8001770a:	0002e417          	auipc	s0,0x2e
    8001770e:	90640413          	addi	s0,s0,-1786 # 80045010 <excpt>
    80017712:	4785                	li	a5,1
    80017714:	0002e717          	auipc	a4,0x2e
    80017718:	92073a23          	sd	zero,-1740(a4) # 80045048 <excpt+0x38>
    8001771c:	00f41023          	sh	a5,0(s0)
    80017720:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(addr); 
    80017724:	000807b7          	lui	a5,0x80
    80017728:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    8001772a:	07b6                	slli	a5,a5,0xd
    8001772c:	00000297          	auipc	t0,0x0
    80017730:	00c28293          	addi	t0,t0,12 # 80017738 <instruction_guest_page_fault_4+0x7c>
    80017734:	02543c23          	sd	t0,56(s0)
    80017738:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    8001773a:	640c                	ld	a1,8(s0)
    8001773c:	0000b517          	auipc	a0,0xb
    80017740:	6f450513          	addi	a0,a0,1780 # 80022e30 <__func__.2+0x5c8>
    80017744:	52c090ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.triggered);
    80017748:	0002e597          	auipc	a1,0x2e
    8001774c:	8c95c583          	lbu	a1,-1847(a1) # 80045011 <excpt+0x1>
    80017750:	0000b517          	auipc	a0,0xb
    80017754:	6e050513          	addi	a0,a0,1760 # 80022e30 <__func__.2+0x5c8>
    80017758:	518090ef          	jal	80020c70 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001775c:	08200593          	li	a1,130
    80017760:	00011617          	auipc	a2,0x11
    80017764:	ce060613          	addi	a2,a2,-800 # 80028440 <__func__.2+0x5bd8>
    80017768:	0000b517          	auipc	a0,0xb
    8001776c:	40050513          	addi	a0,a0,1024 # 80022b68 <__func__.2+0x300>
    80017770:	500090ef          	jal	80020c70 <printf>
    80017774:	0002e797          	auipc	a5,0x2e
    80017778:	89d7c783          	lbu	a5,-1891(a5) # 80045011 <excpt+0x1>
    8001777c:	0000b597          	auipc	a1,0xb
    80017780:	3c458593          	addi	a1,a1,964 # 80022b40 <__func__.2+0x2d8>
    80017784:	cf89                	beqz	a5,8001779e <instruction_guest_page_fault_4+0xe2>
    80017786:	6418                	ld	a4,8(s0)
    80017788:	47d1                	li	a5,20
    8001778a:	0000b597          	auipc	a1,0xb
    8001778e:	3a658593          	addi	a1,a1,934 # 80022b30 <__func__.2+0x2c8>
    80017792:	00f70663          	beq	a4,a5,8001779e <instruction_guest_page_fault_4+0xe2>
    80017796:	0000b597          	auipc	a1,0xb
    8001779a:	3aa58593          	addi	a1,a1,938 # 80022b40 <__func__.2+0x2d8>
    8001779e:	0000b517          	auipc	a0,0xb
    800177a2:	3e250513          	addi	a0,a0,994 # 80022b80 <__func__.2+0x318>
    800177a6:	4ca090ef          	jal	80020c70 <printf>
    800177aa:	0002e797          	auipc	a5,0x2e
    800177ae:	8677c783          	lbu	a5,-1945(a5) # 80045011 <excpt+0x1>
    800177b2:	c789                	beqz	a5,800177bc <instruction_guest_page_fault_4+0x100>
    800177b4:	6418                	ld	a4,8(s0)
    800177b6:	47d1                	li	a5,20
    800177b8:	00f70c63          	beq	a4,a5,800177d0 <instruction_guest_page_fault_4+0x114>
    800177bc:	0000b517          	auipc	a0,0xb
    800177c0:	3cc50513          	addi	a0,a0,972 # 80022b88 <__func__.2+0x320>
    800177c4:	4ac090ef          	jal	80020c70 <printf>
    800177c8:	02900513          	li	a0,41
    800177cc:	335080ef          	jal	80020300 <putchar>
    800177d0:	4529                	li	a0,10
    800177d2:	32f080ef          	jal	80020300 <putchar>
    800177d6:	0002e497          	auipc	s1,0x2e
    800177da:	83b4c483          	lbu	s1,-1989(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800177de:	0000b597          	auipc	a1,0xb
    800177e2:	36258593          	addi	a1,a1,866 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800177e6:	cc91                	beqz	s1,80017802 <instruction_guest_page_fault_4+0x146>
    800177e8:	6418                	ld	a4,8(s0)
    800177ea:	47d1                	li	a5,20
    TEST_END();
    800177ec:	0000b597          	auipc	a1,0xb
    800177f0:	34458593          	addi	a1,a1,836 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800177f4:	00f70763          	beq	a4,a5,80017802 <instruction_guest_page_fault_4+0x146>
    800177f8:	4481                	li	s1,0
    TEST_END();
    800177fa:	0000b597          	auipc	a1,0xb
    800177fe:	34658593          	addi	a1,a1,838 # 80022b40 <__func__.2+0x2d8>
    80017802:	0000b517          	auipc	a0,0xb
    80017806:	3e650513          	addi	a0,a0,998 # 80022be8 <__func__.2+0x380>
    8001780a:	466090ef          	jal	80020c70 <printf>
    8001780e:	4511                	li	a0,4
    80017810:	ac8e90ef          	jal	80000ad8 <goto_priv>
    80017814:	b95e90ef          	jal	800013a8 <reset_state>
}
    80017818:	60e2                	ld	ra,24(sp)
    8001781a:	6442                	ld	s0,16(sp)
    8001781c:	8526                	mv	a0,s1
    8001781e:	64a2                	ld	s1,8(sp)
    80017820:	6105                	addi	sp,sp,32
    80017822:	8082                	ret

0000000080017824 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80017824:	1101                	addi	sp,sp,-32

    TEST_START();
    80017826:	0000b597          	auipc	a1,0xb
    8001782a:	85258593          	addi	a1,a1,-1966 # 80022078 <__func__.2>
    8001782e:	0000b517          	auipc	a0,0xb
    80017832:	32250513          	addi	a0,a0,802 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_5(){
    80017836:	ec06                	sd	ra,24(sp)
    80017838:	e822                	sd	s0,16(sp)
    8001783a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001783c:	434090ef          	jal	80020c70 <printf>
    80017840:	4529                	li	a0,10
    80017842:	2bf080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80017846:	450d                	li	a0,3
    80017848:	a90e90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001784c:	d95e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017850:	fd3e80ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80017854:	4509                	li	a0,2
    80017856:	a82e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001785a:	e57e80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    8001785e:	4511                	li	a0,4
    80017860:	a78e90ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017864:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80017868:	4509                	li	a0,2
    8001786a:	a6ee90ef          	jal	80000ad8 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    8001786e:	0330000f          	fence	rw,rw
    80017872:	0002d417          	auipc	s0,0x2d
    80017876:	79e40413          	addi	s0,s0,1950 # 80045010 <excpt>
    8001787a:	4785                	li	a5,1
    8001787c:	0002d717          	auipc	a4,0x2d
    80017880:	7c073623          	sd	zero,1996(a4) # 80045048 <excpt+0x38>
    80017884:	00f41023          	sh	a5,0(s0)
    80017888:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001788c:	400197b7          	lui	a5,0x40019
    80017890:	078a                	slli	a5,a5,0x2
    80017892:	00000297          	auipc	t0,0x0
    80017896:	00c28293          	addi	t0,t0,12 # 8001789e <instruction_guest_page_fault_5+0x7a>
    8001789a:	02543c23          	sd	t0,56(s0)
    8001789e:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    800178a0:	08200593          	li	a1,130
    800178a4:	00011617          	auipc	a2,0x11
    800178a8:	bfc60613          	addi	a2,a2,-1028 # 800284a0 <__func__.2+0x5c38>
    800178ac:	0000b517          	auipc	a0,0xb
    800178b0:	2bc50513          	addi	a0,a0,700 # 80022b68 <__func__.2+0x300>
    800178b4:	3bc090ef          	jal	80020c70 <printf>
    800178b8:	0002d797          	auipc	a5,0x2d
    800178bc:	7597c783          	lbu	a5,1881(a5) # 80045011 <excpt+0x1>
    800178c0:	0000b597          	auipc	a1,0xb
    800178c4:	28058593          	addi	a1,a1,640 # 80022b40 <__func__.2+0x2d8>
    800178c8:	cf89                	beqz	a5,800178e2 <instruction_guest_page_fault_5+0xbe>
    800178ca:	6418                	ld	a4,8(s0)
    800178cc:	47d1                	li	a5,20
    800178ce:	0000b597          	auipc	a1,0xb
    800178d2:	26258593          	addi	a1,a1,610 # 80022b30 <__func__.2+0x2c8>
    800178d6:	00f70663          	beq	a4,a5,800178e2 <instruction_guest_page_fault_5+0xbe>
    800178da:	0000b597          	auipc	a1,0xb
    800178de:	26658593          	addi	a1,a1,614 # 80022b40 <__func__.2+0x2d8>
    800178e2:	0000b517          	auipc	a0,0xb
    800178e6:	29e50513          	addi	a0,a0,670 # 80022b80 <__func__.2+0x318>
    800178ea:	386090ef          	jal	80020c70 <printf>
    800178ee:	0002d797          	auipc	a5,0x2d
    800178f2:	7237c783          	lbu	a5,1827(a5) # 80045011 <excpt+0x1>
    800178f6:	c789                	beqz	a5,80017900 <instruction_guest_page_fault_5+0xdc>
    800178f8:	6418                	ld	a4,8(s0)
    800178fa:	47d1                	li	a5,20
    800178fc:	00f70c63          	beq	a4,a5,80017914 <instruction_guest_page_fault_5+0xf0>
    80017900:	0000b517          	auipc	a0,0xb
    80017904:	28850513          	addi	a0,a0,648 # 80022b88 <__func__.2+0x320>
    80017908:	368090ef          	jal	80020c70 <printf>
    8001790c:	02900513          	li	a0,41
    80017910:	1f1080ef          	jal	80020300 <putchar>
    80017914:	4529                	li	a0,10
    80017916:	1eb080ef          	jal	80020300 <putchar>
    8001791a:	0002d497          	auipc	s1,0x2d
    8001791e:	6f74c483          	lbu	s1,1783(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80017922:	0000b597          	auipc	a1,0xb
    80017926:	21e58593          	addi	a1,a1,542 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001792a:	cc91                	beqz	s1,80017946 <instruction_guest_page_fault_5+0x122>
    8001792c:	6418                	ld	a4,8(s0)
    8001792e:	47d1                	li	a5,20
    TEST_END();
    80017930:	0000b597          	auipc	a1,0xb
    80017934:	20058593          	addi	a1,a1,512 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80017938:	00f70763          	beq	a4,a5,80017946 <instruction_guest_page_fault_5+0x122>
    8001793c:	4481                	li	s1,0
    TEST_END();
    8001793e:	0000b597          	auipc	a1,0xb
    80017942:	20258593          	addi	a1,a1,514 # 80022b40 <__func__.2+0x2d8>
    80017946:	0000b517          	auipc	a0,0xb
    8001794a:	2a250513          	addi	a0,a0,674 # 80022be8 <__func__.2+0x380>
    8001794e:	322090ef          	jal	80020c70 <printf>
    80017952:	4511                	li	a0,4
    80017954:	984e90ef          	jal	80000ad8 <goto_priv>
    80017958:	a51e90ef          	jal	800013a8 <reset_state>

}
    8001795c:	60e2                	ld	ra,24(sp)
    8001795e:	6442                	ld	s0,16(sp)
    80017960:	8526                	mv	a0,s1
    80017962:	64a2                	ld	s1,8(sp)
    80017964:	6105                	addi	sp,sp,32
    80017966:	8082                	ret

0000000080017968 <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80017968:	1141                	addi	sp,sp,-16

    TEST_START();
    8001796a:	0000a597          	auipc	a1,0xa
    8001796e:	72e58593          	addi	a1,a1,1838 # 80022098 <__func__.1>
    80017972:	0000b517          	auipc	a0,0xb
    80017976:	1de50513          	addi	a0,a0,478 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_6(){
    8001797a:	e406                	sd	ra,8(sp)
    8001797c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001797e:	2f2090ef          	jal	80020c70 <printf>
    80017982:	4529                	li	a0,10
    80017984:	17d080ef          	jal	80020300 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80017988:	450d                	li	a0,3
    8001798a:	94ee90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001798e:	c53e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017992:	e91e80ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80017996:	4509                	li	a0,2
    80017998:	940e90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001799c:	d15e80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    800179a0:	4509                	li	a0,2
    800179a2:	936e90ef          	jal	80000ad8 <goto_priv>

    //执行取指指令时，在VS模式下
    TEST_SETUP_EXCEPT();
    800179a6:	0330000f          	fence	rw,rw
    800179aa:	0002d717          	auipc	a4,0x2d
    800179ae:	66670713          	addi	a4,a4,1638 # 80045010 <excpt>
    800179b2:	4785                	li	a5,1
    800179b4:	0002d697          	auipc	a3,0x2d
    800179b8:	6806ba23          	sd	zero,1684(a3) # 80045048 <excpt+0x38>
    800179bc:	00f71023          	sh	a5,0(a4)
    800179c0:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSRWX_GURWX);

    TEST_EXEC_EXCEPT(vaddr); 
    800179c4:	1782                	slli	a5,a5,0x20
    800179c6:	00000297          	auipc	t0,0x0
    800179ca:	00c28293          	addi	t0,t0,12 # 800179d2 <instruction_guest_page_fault_6+0x6a>
    800179ce:	02573c23          	sd	t0,56(a4)
    800179d2:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    800179d4:	08200593          	li	a1,130
    800179d8:	00011617          	auipc	a2,0x11
    800179dc:	b3060613          	addi	a2,a2,-1232 # 80028508 <__func__.2+0x5ca0>
    800179e0:	0000b517          	auipc	a0,0xb
    800179e4:	18850513          	addi	a0,a0,392 # 80022b68 <__func__.2+0x300>
    800179e8:	288090ef          	jal	80020c70 <printf>
    800179ec:	0002d797          	auipc	a5,0x2d
    800179f0:	6257c783          	lbu	a5,1573(a5) # 80045011 <excpt+0x1>
    800179f4:	0000b597          	auipc	a1,0xb
    800179f8:	13c58593          	addi	a1,a1,316 # 80022b30 <__func__.2+0x2c8>
    800179fc:	c789                	beqz	a5,80017a06 <instruction_guest_page_fault_6+0x9e>
    800179fe:	0000b597          	auipc	a1,0xb
    80017a02:	14258593          	addi	a1,a1,322 # 80022b40 <__func__.2+0x2d8>
    80017a06:	0000b517          	auipc	a0,0xb
    80017a0a:	17a50513          	addi	a0,a0,378 # 80022b80 <__func__.2+0x318>
    80017a0e:	262090ef          	jal	80020c70 <printf>
    80017a12:	0002d797          	auipc	a5,0x2d
    80017a16:	5ff7c783          	lbu	a5,1535(a5) # 80045011 <excpt+0x1>
    80017a1a:	e7a1                	bnez	a5,80017a62 <instruction_guest_page_fault_6+0xfa>
    80017a1c:	4529                	li	a0,10
    80017a1e:	0e3080ef          	jal	80020300 <putchar>
    80017a22:	0002d797          	auipc	a5,0x2d
    80017a26:	5ef7c783          	lbu	a5,1519(a5) # 80045011 <excpt+0x1>
    80017a2a:	e795                	bnez	a5,80017a56 <instruction_guest_page_fault_6+0xee>
    80017a2c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80017a2e:	0000b597          	auipc	a1,0xb
    80017a32:	10258593          	addi	a1,a1,258 # 80022b30 <__func__.2+0x2c8>
    80017a36:	0000b517          	auipc	a0,0xb
    80017a3a:	1b250513          	addi	a0,a0,434 # 80022be8 <__func__.2+0x380>
    80017a3e:	232090ef          	jal	80020c70 <printf>
    80017a42:	4511                	li	a0,4
    80017a44:	894e90ef          	jal	80000ad8 <goto_priv>
    80017a48:	961e90ef          	jal	800013a8 <reset_state>
}
    80017a4c:	60a2                	ld	ra,8(sp)
    80017a4e:	8522                	mv	a0,s0
    80017a50:	6402                	ld	s0,0(sp)
    80017a52:	0141                	addi	sp,sp,16
    80017a54:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80017a56:	4401                	li	s0,0
    TEST_END();
    80017a58:	0000b597          	auipc	a1,0xb
    80017a5c:	0e858593          	addi	a1,a1,232 # 80022b40 <__func__.2+0x2d8>
    80017a60:	bfd9                	j	80017a36 <instruction_guest_page_fault_6+0xce>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80017a62:	0000b517          	auipc	a0,0xb
    80017a66:	12650513          	addi	a0,a0,294 # 80022b88 <__func__.2+0x320>
    80017a6a:	206090ef          	jal	80020c70 <printf>
    80017a6e:	02900513          	li	a0,41
    80017a72:	08f080ef          	jal	80020300 <putchar>
    80017a76:	b75d                	j	80017a1c <instruction_guest_page_fault_6+0xb4>

0000000080017a78 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80017a78:	1101                	addi	sp,sp,-32

    TEST_START();
    80017a7a:	0000a597          	auipc	a1,0xa
    80017a7e:	63e58593          	addi	a1,a1,1598 # 800220b8 <__func__.0>
    80017a82:	0000b517          	auipc	a0,0xb
    80017a86:	0ce50513          	addi	a0,a0,206 # 80022b50 <__func__.2+0x2e8>
bool instruction_guest_page_fault_7(){
    80017a8a:	ec06                	sd	ra,24(sp)
    80017a8c:	e822                	sd	s0,16(sp)
    80017a8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a90:	1e0090ef          	jal	80020c70 <printf>
    80017a94:	4529                	li	a0,10
    80017a96:	06b080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    80017a9a:	450d                	li	a0,3
    80017a9c:	83ce90ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    80017aa0:	b41e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017aa4:	d7fe80ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    80017aa8:	4509                	li	a0,2
    80017aaa:	82ee90ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    80017aae:	c03e80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80017ab2:	4509                	li	a0,2
    80017ab4:	824e90ef          	jal	80000ad8 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80017ab8:	0330000f          	fence	rw,rw
    80017abc:	0002d417          	auipc	s0,0x2d
    80017ac0:	55440413          	addi	s0,s0,1364 # 80045010 <excpt>
    80017ac4:	4785                	li	a5,1
    80017ac6:	0002d717          	auipc	a4,0x2d
    80017aca:	58073123          	sd	zero,1410(a4) # 80045048 <excpt+0x38>
    80017ace:	00f41023          	sh	a5,0(s0)
    80017ad2:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80017ad6:	400137b7          	lui	a5,0x40013
    80017ada:	078a                	slli	a5,a5,0x2
    80017adc:	00000297          	auipc	t0,0x0
    80017ae0:	00c28293          	addi	t0,t0,12 # 80017ae8 <instruction_guest_page_fault_7+0x70>
    80017ae4:	02543c23          	sd	t0,56(s0)
    80017ae8:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80017aea:	08200593          	li	a1,130
    80017aee:	00011617          	auipc	a2,0x11
    80017af2:	a5260613          	addi	a2,a2,-1454 # 80028540 <__func__.2+0x5cd8>
    80017af6:	0000b517          	auipc	a0,0xb
    80017afa:	07250513          	addi	a0,a0,114 # 80022b68 <__func__.2+0x300>
    80017afe:	172090ef          	jal	80020c70 <printf>
    80017b02:	0002d797          	auipc	a5,0x2d
    80017b06:	50f7c783          	lbu	a5,1295(a5) # 80045011 <excpt+0x1>
    80017b0a:	0000b597          	auipc	a1,0xb
    80017b0e:	03658593          	addi	a1,a1,54 # 80022b40 <__func__.2+0x2d8>
    80017b12:	cf89                	beqz	a5,80017b2c <instruction_guest_page_fault_7+0xb4>
    80017b14:	6418                	ld	a4,8(s0)
    80017b16:	47d1                	li	a5,20
    80017b18:	0000b597          	auipc	a1,0xb
    80017b1c:	01858593          	addi	a1,a1,24 # 80022b30 <__func__.2+0x2c8>
    80017b20:	00f70663          	beq	a4,a5,80017b2c <instruction_guest_page_fault_7+0xb4>
    80017b24:	0000b597          	auipc	a1,0xb
    80017b28:	01c58593          	addi	a1,a1,28 # 80022b40 <__func__.2+0x2d8>
    80017b2c:	0000b517          	auipc	a0,0xb
    80017b30:	05450513          	addi	a0,a0,84 # 80022b80 <__func__.2+0x318>
    80017b34:	13c090ef          	jal	80020c70 <printf>
    80017b38:	0002d797          	auipc	a5,0x2d
    80017b3c:	4d97c783          	lbu	a5,1241(a5) # 80045011 <excpt+0x1>
    80017b40:	c789                	beqz	a5,80017b4a <instruction_guest_page_fault_7+0xd2>
    80017b42:	6418                	ld	a4,8(s0)
    80017b44:	47d1                	li	a5,20
    80017b46:	00f70c63          	beq	a4,a5,80017b5e <instruction_guest_page_fault_7+0xe6>
    80017b4a:	0000b517          	auipc	a0,0xb
    80017b4e:	03e50513          	addi	a0,a0,62 # 80022b88 <__func__.2+0x320>
    80017b52:	11e090ef          	jal	80020c70 <printf>
    80017b56:	02900513          	li	a0,41
    80017b5a:	7a6080ef          	jal	80020300 <putchar>
    80017b5e:	4529                	li	a0,10
    80017b60:	7a0080ef          	jal	80020300 <putchar>
    80017b64:	0002d797          	auipc	a5,0x2d
    80017b68:	4ad7c783          	lbu	a5,1197(a5) # 80045011 <excpt+0x1>
    80017b6c:	4481                	li	s1,0
    80017b6e:	c789                	beqz	a5,80017b78 <instruction_guest_page_fault_7+0x100>
    80017b70:	6404                	ld	s1,8(s0)
    80017b72:	14b1                	addi	s1,s1,-20
    80017b74:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80017b78:	0330000f          	fence	rw,rw
    80017b7c:	4785                	li	a5,1
    80017b7e:	0002d717          	auipc	a4,0x2d
    80017b82:	4c073523          	sd	zero,1226(a4) # 80045048 <excpt+0x38>
    80017b86:	00f41023          	sh	a5,0(s0)
    80017b8a:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80017b8e:	400137b7          	lui	a5,0x40013
    80017b92:	078a                	slli	a5,a5,0x2
    80017b94:	00000297          	auipc	t0,0x0
    80017b98:	00c28293          	addi	t0,t0,12 # 80017ba0 <instruction_guest_page_fault_7+0x128>
    80017b9c:	02543c23          	sd	t0,56(s0)
    80017ba0:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80017ba2:	08200593          	li	a1,130
    80017ba6:	00011617          	auipc	a2,0x11
    80017baa:	a0260613          	addi	a2,a2,-1534 # 800285a8 <__func__.2+0x5d40>
    80017bae:	0000b517          	auipc	a0,0xb
    80017bb2:	fba50513          	addi	a0,a0,-70 # 80022b68 <__func__.2+0x300>
    80017bb6:	0ba090ef          	jal	80020c70 <printf>
    80017bba:	0002d797          	auipc	a5,0x2d
    80017bbe:	4577c783          	lbu	a5,1111(a5) # 80045011 <excpt+0x1>
    80017bc2:	0000b597          	auipc	a1,0xb
    80017bc6:	f7e58593          	addi	a1,a1,-130 # 80022b40 <__func__.2+0x2d8>
    80017bca:	cf89                	beqz	a5,80017be4 <instruction_guest_page_fault_7+0x16c>
    80017bcc:	6418                	ld	a4,8(s0)
    80017bce:	47d1                	li	a5,20
    80017bd0:	0000b597          	auipc	a1,0xb
    80017bd4:	f6058593          	addi	a1,a1,-160 # 80022b30 <__func__.2+0x2c8>
    80017bd8:	00f70663          	beq	a4,a5,80017be4 <instruction_guest_page_fault_7+0x16c>
    80017bdc:	0000b597          	auipc	a1,0xb
    80017be0:	f6458593          	addi	a1,a1,-156 # 80022b40 <__func__.2+0x2d8>
    80017be4:	0000b517          	auipc	a0,0xb
    80017be8:	f9c50513          	addi	a0,a0,-100 # 80022b80 <__func__.2+0x318>
    80017bec:	084090ef          	jal	80020c70 <printf>
    80017bf0:	0002d797          	auipc	a5,0x2d
    80017bf4:	4217c783          	lbu	a5,1057(a5) # 80045011 <excpt+0x1>
    80017bf8:	c789                	beqz	a5,80017c02 <instruction_guest_page_fault_7+0x18a>
    80017bfa:	6418                	ld	a4,8(s0)
    80017bfc:	47d1                	li	a5,20
    80017bfe:	00f70c63          	beq	a4,a5,80017c16 <instruction_guest_page_fault_7+0x19e>
    80017c02:	0000b517          	auipc	a0,0xb
    80017c06:	f8650513          	addi	a0,a0,-122 # 80022b88 <__func__.2+0x320>
    80017c0a:	066090ef          	jal	80020c70 <printf>
    80017c0e:	02900513          	li	a0,41
    80017c12:	6ee080ef          	jal	80020300 <putchar>
    80017c16:	4529                	li	a0,10
    80017c18:	6e8080ef          	jal	80020300 <putchar>
    80017c1c:	c095                	beqz	s1,80017c40 <instruction_guest_page_fault_7+0x1c8>
    80017c1e:	0002d497          	auipc	s1,0x2d
    80017c22:	3f34c483          	lbu	s1,1011(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80017c26:	0000b597          	auipc	a1,0xb
    80017c2a:	f1a58593          	addi	a1,a1,-230 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80017c2e:	cc91                	beqz	s1,80017c4a <instruction_guest_page_fault_7+0x1d2>
    80017c30:	6418                	ld	a4,8(s0)
    80017c32:	47d1                	li	a5,20
    TEST_END();
    80017c34:	0000b597          	auipc	a1,0xb
    80017c38:	efc58593          	addi	a1,a1,-260 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80017c3c:	00f70763          	beq	a4,a5,80017c4a <instruction_guest_page_fault_7+0x1d2>
    80017c40:	4481                	li	s1,0
    TEST_END();
    80017c42:	0000b597          	auipc	a1,0xb
    80017c46:	efe58593          	addi	a1,a1,-258 # 80022b40 <__func__.2+0x2d8>
    80017c4a:	0000b517          	auipc	a0,0xb
    80017c4e:	f9e50513          	addi	a0,a0,-98 # 80022be8 <__func__.2+0x380>
    80017c52:	01e090ef          	jal	80020c70 <printf>
    80017c56:	4511                	li	a0,4
    80017c58:	e81e80ef          	jal	80000ad8 <goto_priv>
    80017c5c:	f4ce90ef          	jal	800013a8 <reset_state>
    80017c60:	60e2                	ld	ra,24(sp)
    80017c62:	6442                	ld	s0,16(sp)
    80017c64:	8526                	mv	a0,s1
    80017c66:	64a2                	ld	s1,8(sp)
    80017c68:	6105                	addi	sp,sp,32
    80017c6a:	8082                	ret

0000000080017c6c <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80017c6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80017c6e:	0000a597          	auipc	a1,0xa
    80017c72:	46a58593          	addi	a1,a1,1130 # 800220d8 <__func__.39>
    80017c76:	0000b517          	auipc	a0,0xb
    80017c7a:	eda50513          	addi	a0,a0,-294 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_1(){
    80017c7e:	ec06                	sd	ra,24(sp)
    80017c80:	e822                	sd	s0,16(sp)
    80017c82:	e426                	sd	s1,8(sp)
    TEST_START();
    80017c84:	7ed080ef          	jal	80020c70 <printf>
    80017c88:	4529                	li	a0,10
    80017c8a:	676080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80017c8e:	4511                	li	a0,4
    80017c90:	e49e80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017c94:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80017c98:	10000793          	li	a5,256
    80017c9c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017ca0:	20000793          	li	a5,512
    80017ca4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017ca8:	40000793          	li	a5,1024
    80017cac:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017cb0:	6785                	lui	a5,0x1
    80017cb2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017cb6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017cba:	4785                	li	a5,1
    80017cbc:	07fe                	slli	a5,a5,0x1f
    80017cbe:	4705                	li	a4,1
    80017cc0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017cc4:	08100793          	li	a5,129
    80017cc8:	07e2                	slli	a5,a5,0x18
    80017cca:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017cce:	67a1                	lui	a5,0x8
    80017cd0:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80017cd4:	0330000f          	fence	rw,rw
    80017cd8:	0002d417          	auipc	s0,0x2d
    80017cdc:	33840413          	addi	s0,s0,824 # 80045010 <excpt>
    80017ce0:	0002d797          	auipc	a5,0x2d
    80017ce4:	3607b423          	sd	zero,872(a5) # 80045048 <excpt+0x38>
    80017ce8:	00e41023          	sh	a4,0(s0)
    80017cec:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017cf0:	02171793          	slli	a5,a4,0x21
    80017cf4:	40078793          	addi	a5,a5,1024
    80017cf8:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80017cfc:	08200593          	li	a1,130
    80017d00:	00011617          	auipc	a2,0x11
    80017d04:	91060613          	addi	a2,a2,-1776 # 80028610 <__func__.2+0x5da8>
    80017d08:	0000b517          	auipc	a0,0xb
    80017d0c:	e6050513          	addi	a0,a0,-416 # 80022b68 <__func__.2+0x300>
    80017d10:	761080ef          	jal	80020c70 <printf>
    80017d14:	0002d797          	auipc	a5,0x2d
    80017d18:	2fd7c783          	lbu	a5,765(a5) # 80045011 <excpt+0x1>
    80017d1c:	0000b597          	auipc	a1,0xb
    80017d20:	e2458593          	addi	a1,a1,-476 # 80022b40 <__func__.2+0x2d8>
    80017d24:	cf89                	beqz	a5,80017d3e <load_access_fault_1+0xd2>
    80017d26:	6418                	ld	a4,8(s0)
    80017d28:	4795                	li	a5,5
    80017d2a:	0000b597          	auipc	a1,0xb
    80017d2e:	e0658593          	addi	a1,a1,-506 # 80022b30 <__func__.2+0x2c8>
    80017d32:	00f70663          	beq	a4,a5,80017d3e <load_access_fault_1+0xd2>
    80017d36:	0000b597          	auipc	a1,0xb
    80017d3a:	e0a58593          	addi	a1,a1,-502 # 80022b40 <__func__.2+0x2d8>
    80017d3e:	0000b517          	auipc	a0,0xb
    80017d42:	e4250513          	addi	a0,a0,-446 # 80022b80 <__func__.2+0x318>
    80017d46:	72b080ef          	jal	80020c70 <printf>
    80017d4a:	0002d797          	auipc	a5,0x2d
    80017d4e:	2c77c783          	lbu	a5,711(a5) # 80045011 <excpt+0x1>
    80017d52:	c789                	beqz	a5,80017d5c <load_access_fault_1+0xf0>
    80017d54:	6418                	ld	a4,8(s0)
    80017d56:	4795                	li	a5,5
    80017d58:	00f70c63          	beq	a4,a5,80017d70 <load_access_fault_1+0x104>
    80017d5c:	0000b517          	auipc	a0,0xb
    80017d60:	e2c50513          	addi	a0,a0,-468 # 80022b88 <__func__.2+0x320>
    80017d64:	70d080ef          	jal	80020c70 <printf>
    80017d68:	02900513          	li	a0,41
    80017d6c:	594080ef          	jal	80020300 <putchar>
    80017d70:	4529                	li	a0,10
    80017d72:	58e080ef          	jal	80020300 <putchar>
    80017d76:	0002d497          	auipc	s1,0x2d
    80017d7a:	29b4c483          	lbu	s1,667(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80017d7e:	0000b597          	auipc	a1,0xb
    80017d82:	dc258593          	addi	a1,a1,-574 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80017d86:	cc91                	beqz	s1,80017da2 <load_access_fault_1+0x136>
    80017d88:	6418                	ld	a4,8(s0)
    80017d8a:	4795                	li	a5,5
    TEST_END();
    80017d8c:	0000b597          	auipc	a1,0xb
    80017d90:	da458593          	addi	a1,a1,-604 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80017d94:	00f70763          	beq	a4,a5,80017da2 <load_access_fault_1+0x136>
    80017d98:	4481                	li	s1,0
    TEST_END();
    80017d9a:	0000b597          	auipc	a1,0xb
    80017d9e:	da658593          	addi	a1,a1,-602 # 80022b40 <__func__.2+0x2d8>
    80017da2:	0000b517          	auipc	a0,0xb
    80017da6:	e4650513          	addi	a0,a0,-442 # 80022be8 <__func__.2+0x380>
    80017daa:	6c7080ef          	jal	80020c70 <printf>
    80017dae:	4511                	li	a0,4
    80017db0:	d29e80ef          	jal	80000ad8 <goto_priv>
    80017db4:	df4e90ef          	jal	800013a8 <reset_state>
}
    80017db8:	60e2                	ld	ra,24(sp)
    80017dba:	6442                	ld	s0,16(sp)
    80017dbc:	8526                	mv	a0,s1
    80017dbe:	64a2                	ld	s1,8(sp)
    80017dc0:	6105                	addi	sp,sp,32
    80017dc2:	8082                	ret

0000000080017dc4 <load_access_fault_2>:

bool load_access_fault_2(){
    80017dc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80017dc6:	0000a597          	auipc	a1,0xa
    80017dca:	32a58593          	addi	a1,a1,810 # 800220f0 <__func__.38>
    80017dce:	0000b517          	auipc	a0,0xb
    80017dd2:	d8250513          	addi	a0,a0,-638 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_2(){
    80017dd6:	ec06                	sd	ra,24(sp)
    80017dd8:	e822                	sd	s0,16(sp)
    80017dda:	e426                	sd	s1,8(sp)
    TEST_START();
    80017ddc:	695080ef          	jal	80020c70 <printf>
    80017de0:	4529                	li	a0,10
    80017de2:	51e080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80017de6:	4511                	li	a0,4
    80017de8:	cf1e80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017dec:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017df0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017df4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017df8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017dfc:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017e00:	10000793          	li	a5,256
    80017e04:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017e08:	20000793          	li	a5,512
    80017e0c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017e10:	40000793          	li	a5,1024
    80017e14:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017e18:	6785                	lui	a5,0x1
    80017e1a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017e1e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    80017e22:	47c5                	li	a5,17
    80017e24:	07ee                	slli	a5,a5,0x1b
    80017e26:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    80017e2a:	08900793          	li	a5,137
    80017e2e:	07e2                	slli	a5,a5,0x18
    80017e30:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    80017e34:	08000793          	li	a5,128
    80017e38:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    80017e3c:	67a1                	lui	a5,0x8
    80017e3e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    80017e42:	450d                	li	a0,3
    80017e44:	c95e80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017e48:	0330000f          	fence	rw,rw
    80017e4c:	0002d417          	auipc	s0,0x2d
    80017e50:	1c440413          	addi	s0,s0,452 # 80045010 <excpt>
    80017e54:	4785                	li	a5,1
    80017e56:	0002d717          	auipc	a4,0x2d
    80017e5a:	1e073923          	sd	zero,498(a4) # 80045048 <excpt+0x38>
    80017e5e:	00f41023          	sh	a5,0(s0)
    80017e62:	0330000f          	fence	rw,rw
    80017e66:	008817b7          	lui	a5,0x881
    80017e6a:	07aa                	slli	a5,a5,0xa
    80017e6c:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80017e70:	08200593          	li	a1,130
    80017e74:	00010617          	auipc	a2,0x10
    80017e78:	7d460613          	addi	a2,a2,2004 # 80028648 <__func__.2+0x5de0>
    80017e7c:	0000b517          	auipc	a0,0xb
    80017e80:	cec50513          	addi	a0,a0,-788 # 80022b68 <__func__.2+0x300>
    80017e84:	5ed080ef          	jal	80020c70 <printf>
    80017e88:	0002d797          	auipc	a5,0x2d
    80017e8c:	1897c783          	lbu	a5,393(a5) # 80045011 <excpt+0x1>
    80017e90:	0000b597          	auipc	a1,0xb
    80017e94:	cb058593          	addi	a1,a1,-848 # 80022b40 <__func__.2+0x2d8>
    80017e98:	cf89                	beqz	a5,80017eb2 <load_access_fault_2+0xee>
    80017e9a:	6418                	ld	a4,8(s0)
    80017e9c:	4795                	li	a5,5
    80017e9e:	0000b597          	auipc	a1,0xb
    80017ea2:	c9258593          	addi	a1,a1,-878 # 80022b30 <__func__.2+0x2c8>
    80017ea6:	00f70663          	beq	a4,a5,80017eb2 <load_access_fault_2+0xee>
    80017eaa:	0000b597          	auipc	a1,0xb
    80017eae:	c9658593          	addi	a1,a1,-874 # 80022b40 <__func__.2+0x2d8>
    80017eb2:	0000b517          	auipc	a0,0xb
    80017eb6:	cce50513          	addi	a0,a0,-818 # 80022b80 <__func__.2+0x318>
    80017eba:	5b7080ef          	jal	80020c70 <printf>
    80017ebe:	0002d797          	auipc	a5,0x2d
    80017ec2:	1537c783          	lbu	a5,339(a5) # 80045011 <excpt+0x1>
    80017ec6:	c789                	beqz	a5,80017ed0 <load_access_fault_2+0x10c>
    80017ec8:	6418                	ld	a4,8(s0)
    80017eca:	4795                	li	a5,5
    80017ecc:	00f70c63          	beq	a4,a5,80017ee4 <load_access_fault_2+0x120>
    80017ed0:	0000b517          	auipc	a0,0xb
    80017ed4:	cb850513          	addi	a0,a0,-840 # 80022b88 <__func__.2+0x320>
    80017ed8:	599080ef          	jal	80020c70 <printf>
    80017edc:	02900513          	li	a0,41
    80017ee0:	420080ef          	jal	80020300 <putchar>
    80017ee4:	4529                	li	a0,10
    80017ee6:	41a080ef          	jal	80020300 <putchar>
    80017eea:	0002d497          	auipc	s1,0x2d
    80017eee:	1274c483          	lbu	s1,295(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80017ef2:	0000b597          	auipc	a1,0xb
    80017ef6:	c4e58593          	addi	a1,a1,-946 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80017efa:	cc91                	beqz	s1,80017f16 <load_access_fault_2+0x152>
    80017efc:	6418                	ld	a4,8(s0)
    80017efe:	4795                	li	a5,5
    TEST_END();
    80017f00:	0000b597          	auipc	a1,0xb
    80017f04:	c3058593          	addi	a1,a1,-976 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80017f08:	00f70763          	beq	a4,a5,80017f16 <load_access_fault_2+0x152>
    80017f0c:	4481                	li	s1,0
    TEST_END();
    80017f0e:	0000b597          	auipc	a1,0xb
    80017f12:	c3258593          	addi	a1,a1,-974 # 80022b40 <__func__.2+0x2d8>
    80017f16:	0000b517          	auipc	a0,0xb
    80017f1a:	cd250513          	addi	a0,a0,-814 # 80022be8 <__func__.2+0x380>
    80017f1e:	553080ef          	jal	80020c70 <printf>
    80017f22:	4511                	li	a0,4
    80017f24:	bb5e80ef          	jal	80000ad8 <goto_priv>
    80017f28:	c80e90ef          	jal	800013a8 <reset_state>
}
    80017f2c:	60e2                	ld	ra,24(sp)
    80017f2e:	6442                	ld	s0,16(sp)
    80017f30:	8526                	mv	a0,s1
    80017f32:	64a2                	ld	s1,8(sp)
    80017f34:	6105                	addi	sp,sp,32
    80017f36:	8082                	ret

0000000080017f38 <load_access_fault_3>:


bool load_access_fault_3(){
    80017f38:	1101                	addi	sp,sp,-32

    TEST_START();
    80017f3a:	0000a597          	auipc	a1,0xa
    80017f3e:	1ce58593          	addi	a1,a1,462 # 80022108 <__func__.37>
    80017f42:	0000b517          	auipc	a0,0xb
    80017f46:	c0e50513          	addi	a0,a0,-1010 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_3(){
    80017f4a:	ec06                	sd	ra,24(sp)
    80017f4c:	e822                	sd	s0,16(sp)
    80017f4e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017f50:	521080ef          	jal	80020c70 <printf>
    80017f54:	4529                	li	a0,10
    80017f56:	3aa080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80017f5a:	4511                	li	a0,4
    80017f5c:	b7de80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017f60:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017f64:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017f68:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017f6c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017f70:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017f74:	10000793          	li	a5,256
    80017f78:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017f7c:	20000793          	li	a5,512
    80017f80:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017f84:	40000793          	li	a5,1024
    80017f88:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017f8c:	6785                	lui	a5,0x1
    80017f8e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017f92:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017f96:	4785                	li	a5,1
    80017f98:	07fe                	slli	a5,a5,0x1f
    80017f9a:	4485                	li	s1,1
    80017f9c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017fa0:	08100793          	li	a5,129
    80017fa4:	07e2                	slli	a5,a5,0x18
    80017fa6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017faa:	08000793          	li	a5,128
    80017fae:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017fb2:	67a1                	lui	a5,0x8
    80017fb4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    80017fb8:	8526                	mv	a0,s1
    80017fba:	b1fe80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017fbe:	0330000f          	fence	rw,rw
    80017fc2:	0002d417          	auipc	s0,0x2d
    80017fc6:	04e40413          	addi	s0,s0,78 # 80045010 <excpt>
    80017fca:	0002d797          	auipc	a5,0x2d
    80017fce:	0607bf23          	sd	zero,126(a5) # 80045048 <excpt+0x38>
    80017fd2:	00941023          	sh	s1,0(s0)
    80017fd6:	0330000f          	fence	rw,rw
    80017fda:	02149793          	slli	a5,s1,0x21
    80017fde:	40078793          	addi	a5,a5,1024
    80017fe2:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80017fe6:	08200593          	li	a1,130
    80017fea:	00010617          	auipc	a2,0x10
    80017fee:	69660613          	addi	a2,a2,1686 # 80028680 <__func__.2+0x5e18>
    80017ff2:	0000b517          	auipc	a0,0xb
    80017ff6:	b7650513          	addi	a0,a0,-1162 # 80022b68 <__func__.2+0x300>
    80017ffa:	477080ef          	jal	80020c70 <printf>
    80017ffe:	0002d797          	auipc	a5,0x2d
    80018002:	0137c783          	lbu	a5,19(a5) # 80045011 <excpt+0x1>
    80018006:	0000b597          	auipc	a1,0xb
    8001800a:	b3a58593          	addi	a1,a1,-1222 # 80022b40 <__func__.2+0x2d8>
    8001800e:	cf89                	beqz	a5,80018028 <load_access_fault_3+0xf0>
    80018010:	6418                	ld	a4,8(s0)
    80018012:	4795                	li	a5,5
    80018014:	0000b597          	auipc	a1,0xb
    80018018:	b1c58593          	addi	a1,a1,-1252 # 80022b30 <__func__.2+0x2c8>
    8001801c:	00f70663          	beq	a4,a5,80018028 <load_access_fault_3+0xf0>
    80018020:	0000b597          	auipc	a1,0xb
    80018024:	b2058593          	addi	a1,a1,-1248 # 80022b40 <__func__.2+0x2d8>
    80018028:	0000b517          	auipc	a0,0xb
    8001802c:	b5850513          	addi	a0,a0,-1192 # 80022b80 <__func__.2+0x318>
    80018030:	441080ef          	jal	80020c70 <printf>
    80018034:	0002d797          	auipc	a5,0x2d
    80018038:	fdd7c783          	lbu	a5,-35(a5) # 80045011 <excpt+0x1>
    8001803c:	c789                	beqz	a5,80018046 <load_access_fault_3+0x10e>
    8001803e:	6418                	ld	a4,8(s0)
    80018040:	4795                	li	a5,5
    80018042:	00f70c63          	beq	a4,a5,8001805a <load_access_fault_3+0x122>
    80018046:	0000b517          	auipc	a0,0xb
    8001804a:	b4250513          	addi	a0,a0,-1214 # 80022b88 <__func__.2+0x320>
    8001804e:	423080ef          	jal	80020c70 <printf>
    80018052:	02900513          	li	a0,41
    80018056:	2aa080ef          	jal	80020300 <putchar>
    8001805a:	4529                	li	a0,10
    8001805c:	2a4080ef          	jal	80020300 <putchar>
    80018060:	0002d497          	auipc	s1,0x2d
    80018064:	fb14c483          	lbu	s1,-79(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80018068:	0000b597          	auipc	a1,0xb
    8001806c:	ad858593          	addi	a1,a1,-1320 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80018070:	cc91                	beqz	s1,8001808c <load_access_fault_3+0x154>
    80018072:	6418                	ld	a4,8(s0)
    80018074:	4795                	li	a5,5
    TEST_END();
    80018076:	0000b597          	auipc	a1,0xb
    8001807a:	aba58593          	addi	a1,a1,-1350 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001807e:	00f70763          	beq	a4,a5,8001808c <load_access_fault_3+0x154>
    80018082:	4481                	li	s1,0
    TEST_END();
    80018084:	0000b597          	auipc	a1,0xb
    80018088:	abc58593          	addi	a1,a1,-1348 # 80022b40 <__func__.2+0x2d8>
    8001808c:	0000b517          	auipc	a0,0xb
    80018090:	b5c50513          	addi	a0,a0,-1188 # 80022be8 <__func__.2+0x380>
    80018094:	3dd080ef          	jal	80020c70 <printf>
    80018098:	4511                	li	a0,4
    8001809a:	a3fe80ef          	jal	80000ad8 <goto_priv>
    8001809e:	b0ae90ef          	jal	800013a8 <reset_state>
}
    800180a2:	60e2                	ld	ra,24(sp)
    800180a4:	6442                	ld	s0,16(sp)
    800180a6:	8526                	mv	a0,s1
    800180a8:	64a2                	ld	s1,8(sp)
    800180aa:	6105                	addi	sp,sp,32
    800180ac:	8082                	ret

00000000800180ae <load_access_fault_4>:

bool load_access_fault_4(){
    800180ae:	1101                	addi	sp,sp,-32

    TEST_START();
    800180b0:	0000a597          	auipc	a1,0xa
    800180b4:	07058593          	addi	a1,a1,112 # 80022120 <__func__.36>
    800180b8:	0000b517          	auipc	a0,0xb
    800180bc:	a9850513          	addi	a0,a0,-1384 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_4(){
    800180c0:	ec06                	sd	ra,24(sp)
    800180c2:	e822                	sd	s0,16(sp)
    800180c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800180c6:	3ab080ef          	jal	80020c70 <printf>
    800180ca:	4529                	li	a0,10
    800180cc:	234080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800180d0:	4511                	li	a0,4
    800180d2:	a07e80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800180d6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800180da:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800180de:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800180e2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800180e6:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800180ea:	10000793          	li	a5,256
    800180ee:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800180f2:	20000793          	li	a5,512
    800180f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800180fa:	40000793          	li	a5,1024
    800180fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018102:	6785                	lui	a5,0x1
    80018104:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018108:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001810c:	4785                	li	a5,1
    8001810e:	07fe                	slli	a5,a5,0x1f
    80018110:	4485                	li	s1,1
    80018112:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018116:	08100793          	li	a5,129
    8001811a:	07e2                	slli	a5,a5,0x18
    8001811c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018120:	08000793          	li	a5,128
    80018124:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018128:	67a1                	lui	a5,0x8
    8001812a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001812e:	4501                	li	a0,0
    80018130:	9a9e80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018134:	0330000f          	fence	rw,rw
    80018138:	0002d417          	auipc	s0,0x2d
    8001813c:	ed840413          	addi	s0,s0,-296 # 80045010 <excpt>
    80018140:	0002d797          	auipc	a5,0x2d
    80018144:	f007b423          	sd	zero,-248(a5) # 80045048 <excpt+0x38>
    80018148:	00941023          	sh	s1,0(s0)
    8001814c:	0330000f          	fence	rw,rw
    80018150:	02149793          	slli	a5,s1,0x21
    80018154:	40078793          	addi	a5,a5,1024
    80018158:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001815c:	08200593          	li	a1,130
    80018160:	00010617          	auipc	a2,0x10
    80018164:	55860613          	addi	a2,a2,1368 # 800286b8 <__func__.2+0x5e50>
    80018168:	0000b517          	auipc	a0,0xb
    8001816c:	a0050513          	addi	a0,a0,-1536 # 80022b68 <__func__.2+0x300>
    80018170:	301080ef          	jal	80020c70 <printf>
    80018174:	0002d797          	auipc	a5,0x2d
    80018178:	e9d7c783          	lbu	a5,-355(a5) # 80045011 <excpt+0x1>
    8001817c:	0000b597          	auipc	a1,0xb
    80018180:	9c458593          	addi	a1,a1,-1596 # 80022b40 <__func__.2+0x2d8>
    80018184:	cf89                	beqz	a5,8001819e <load_access_fault_4+0xf0>
    80018186:	6418                	ld	a4,8(s0)
    80018188:	4795                	li	a5,5
    8001818a:	0000b597          	auipc	a1,0xb
    8001818e:	9a658593          	addi	a1,a1,-1626 # 80022b30 <__func__.2+0x2c8>
    80018192:	00f70663          	beq	a4,a5,8001819e <load_access_fault_4+0xf0>
    80018196:	0000b597          	auipc	a1,0xb
    8001819a:	9aa58593          	addi	a1,a1,-1622 # 80022b40 <__func__.2+0x2d8>
    8001819e:	0000b517          	auipc	a0,0xb
    800181a2:	9e250513          	addi	a0,a0,-1566 # 80022b80 <__func__.2+0x318>
    800181a6:	2cb080ef          	jal	80020c70 <printf>
    800181aa:	0002d797          	auipc	a5,0x2d
    800181ae:	e677c783          	lbu	a5,-409(a5) # 80045011 <excpt+0x1>
    800181b2:	c789                	beqz	a5,800181bc <load_access_fault_4+0x10e>
    800181b4:	6418                	ld	a4,8(s0)
    800181b6:	4795                	li	a5,5
    800181b8:	00f70c63          	beq	a4,a5,800181d0 <load_access_fault_4+0x122>
    800181bc:	0000b517          	auipc	a0,0xb
    800181c0:	9cc50513          	addi	a0,a0,-1588 # 80022b88 <__func__.2+0x320>
    800181c4:	2ad080ef          	jal	80020c70 <printf>
    800181c8:	02900513          	li	a0,41
    800181cc:	134080ef          	jal	80020300 <putchar>
    800181d0:	4529                	li	a0,10
    800181d2:	12e080ef          	jal	80020300 <putchar>
    800181d6:	0002d497          	auipc	s1,0x2d
    800181da:	e3b4c483          	lbu	s1,-453(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800181de:	0000b597          	auipc	a1,0xb
    800181e2:	96258593          	addi	a1,a1,-1694 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800181e6:	cc91                	beqz	s1,80018202 <load_access_fault_4+0x154>
    800181e8:	6418                	ld	a4,8(s0)
    800181ea:	4795                	li	a5,5
    TEST_END();
    800181ec:	0000b597          	auipc	a1,0xb
    800181f0:	94458593          	addi	a1,a1,-1724 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800181f4:	00f70763          	beq	a4,a5,80018202 <load_access_fault_4+0x154>
    800181f8:	4481                	li	s1,0
    TEST_END();
    800181fa:	0000b597          	auipc	a1,0xb
    800181fe:	94658593          	addi	a1,a1,-1722 # 80022b40 <__func__.2+0x2d8>
    80018202:	0000b517          	auipc	a0,0xb
    80018206:	9e650513          	addi	a0,a0,-1562 # 80022be8 <__func__.2+0x380>
    8001820a:	267080ef          	jal	80020c70 <printf>
    8001820e:	4511                	li	a0,4
    80018210:	8c9e80ef          	jal	80000ad8 <goto_priv>
    80018214:	994e90ef          	jal	800013a8 <reset_state>
}
    80018218:	60e2                	ld	ra,24(sp)
    8001821a:	6442                	ld	s0,16(sp)
    8001821c:	8526                	mv	a0,s1
    8001821e:	64a2                	ld	s1,8(sp)
    80018220:	6105                	addi	sp,sp,32
    80018222:	8082                	ret

0000000080018224 <load_access_fault_5>:

bool load_access_fault_5(){
    80018224:	1141                	addi	sp,sp,-16

    TEST_START();
    80018226:	0000a597          	auipc	a1,0xa
    8001822a:	f1258593          	addi	a1,a1,-238 # 80022138 <__func__.35>
    8001822e:	0000b517          	auipc	a0,0xb
    80018232:	92250513          	addi	a0,a0,-1758 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_5(){
    80018236:	e406                	sd	ra,8(sp)
    80018238:	e022                	sd	s0,0(sp)
    TEST_START();
    8001823a:	237080ef          	jal	80020c70 <printf>
    8001823e:	4529                	li	a0,10
    80018240:	0c0080ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018244:	4511                	li	a0,4
    80018246:	893e80ef          	jal	80000ad8 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001824a:	3a0025f3          	csrr	a1,pmpcfg0
    8001824e:	00010517          	auipc	a0,0x10
    80018252:	4a250513          	addi	a0,a0,1186 # 800286f0 <__func__.2+0x5e88>
    80018256:	21b080ef          	jal	80020c70 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001825a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001825e:	10000793          	li	a5,256
    80018262:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018266:	20000793          	li	a5,512
    8001826a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001826e:	40000793          	li	a5,1024
    80018272:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018276:	6785                	lui	a5,0x1
    80018278:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001827c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018280:	4785                	li	a5,1
    80018282:	07fe                	slli	a5,a5,0x1f
    80018284:	4705                	li	a4,1
    80018286:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001828a:	08100793          	li	a5,129
    8001828e:	07e2                	slli	a5,a5,0x18
    80018290:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018294:	67a1                	lui	a5,0x8
    80018296:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001829a:	0330000f          	fence	rw,rw
    8001829e:	0002d417          	auipc	s0,0x2d
    800182a2:	d7240413          	addi	s0,s0,-654 # 80045010 <excpt>
    800182a6:	0002d797          	auipc	a5,0x2d
    800182aa:	da07b123          	sd	zero,-606(a5) # 80045048 <excpt+0x38>
    800182ae:	00e41023          	sh	a4,0(s0)
    800182b2:	0330000f          	fence	rw,rw
    800182b6:	02171793          	slli	a5,a4,0x21
    800182ba:	40078793          	addi	a5,a5,1024
    800182be:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    800182c2:	0002d597          	auipc	a1,0x2d
    800182c6:	d4f5c583          	lbu	a1,-689(a1) # 80045011 <excpt+0x1>
    800182ca:	0000b517          	auipc	a0,0xb
    800182ce:	b6650513          	addi	a0,a0,-1178 # 80022e30 <__func__.2+0x5c8>
    800182d2:	19f080ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    800182d6:	640c                	ld	a1,8(s0)
    800182d8:	0000b517          	auipc	a0,0xb
    800182dc:	b5850513          	addi	a0,a0,-1192 # 80022e30 <__func__.2+0x5c8>
    800182e0:	191080ef          	jal	80020c70 <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    800182e4:	08200593          	li	a1,130
    800182e8:	00010617          	auipc	a2,0x10
    800182ec:	41860613          	addi	a2,a2,1048 # 80028700 <__func__.2+0x5e98>
    800182f0:	0000b517          	auipc	a0,0xb
    800182f4:	87850513          	addi	a0,a0,-1928 # 80022b68 <__func__.2+0x300>
    800182f8:	179080ef          	jal	80020c70 <printf>
    800182fc:	0002d797          	auipc	a5,0x2d
    80018300:	d157c783          	lbu	a5,-747(a5) # 80045011 <excpt+0x1>
    80018304:	0000b597          	auipc	a1,0xb
    80018308:	82c58593          	addi	a1,a1,-2004 # 80022b30 <__func__.2+0x2c8>
    8001830c:	c789                	beqz	a5,80018316 <load_access_fault_5+0xf2>
    8001830e:	0000b597          	auipc	a1,0xb
    80018312:	83258593          	addi	a1,a1,-1998 # 80022b40 <__func__.2+0x2d8>
    80018316:	0000b517          	auipc	a0,0xb
    8001831a:	86a50513          	addi	a0,a0,-1942 # 80022b80 <__func__.2+0x318>
    8001831e:	153080ef          	jal	80020c70 <printf>
    80018322:	0002d797          	auipc	a5,0x2d
    80018326:	cef7c783          	lbu	a5,-785(a5) # 80045011 <excpt+0x1>
    8001832a:	e7a1                	bnez	a5,80018372 <load_access_fault_5+0x14e>
    8001832c:	4529                	li	a0,10
    8001832e:	7d3070ef          	jal	80020300 <putchar>
    80018332:	0002d797          	auipc	a5,0x2d
    80018336:	cdf7c783          	lbu	a5,-801(a5) # 80045011 <excpt+0x1>
    8001833a:	e795                	bnez	a5,80018366 <load_access_fault_5+0x142>
    8001833c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001833e:	0000a597          	auipc	a1,0xa
    80018342:	7f258593          	addi	a1,a1,2034 # 80022b30 <__func__.2+0x2c8>
    80018346:	0000b517          	auipc	a0,0xb
    8001834a:	8a250513          	addi	a0,a0,-1886 # 80022be8 <__func__.2+0x380>
    8001834e:	123080ef          	jal	80020c70 <printf>
    80018352:	4511                	li	a0,4
    80018354:	f84e80ef          	jal	80000ad8 <goto_priv>
    80018358:	850e90ef          	jal	800013a8 <reset_state>
}
    8001835c:	60a2                	ld	ra,8(sp)
    8001835e:	8522                	mv	a0,s0
    80018360:	6402                	ld	s0,0(sp)
    80018362:	0141                	addi	sp,sp,16
    80018364:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80018366:	4401                	li	s0,0
    TEST_END();
    80018368:	0000a597          	auipc	a1,0xa
    8001836c:	7d858593          	addi	a1,a1,2008 # 80022b40 <__func__.2+0x2d8>
    80018370:	bfd9                	j	80018346 <load_access_fault_5+0x122>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80018372:	0000b517          	auipc	a0,0xb
    80018376:	81650513          	addi	a0,a0,-2026 # 80022b88 <__func__.2+0x320>
    8001837a:	0f7080ef          	jal	80020c70 <printf>
    8001837e:	02900513          	li	a0,41
    80018382:	77f070ef          	jal	80020300 <putchar>
    80018386:	b75d                	j	8001832c <load_access_fault_5+0x108>

0000000080018388 <load_access_fault_6>:


bool load_access_fault_6(){
    80018388:	1101                	addi	sp,sp,-32

    TEST_START();
    8001838a:	0000a597          	auipc	a1,0xa
    8001838e:	dc658593          	addi	a1,a1,-570 # 80022150 <__func__.34>
    80018392:	0000a517          	auipc	a0,0xa
    80018396:	7be50513          	addi	a0,a0,1982 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_6(){
    8001839a:	ec06                	sd	ra,24(sp)
    8001839c:	e822                	sd	s0,16(sp)
    8001839e:	e426                	sd	s1,8(sp)
    TEST_START();
    800183a0:	0d1080ef          	jal	80020c70 <printf>
    800183a4:	4529                	li	a0,10
    800183a6:	75b070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800183aa:	4511                	li	a0,4
    800183ac:	f2ce80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800183b0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800183b4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800183b8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800183bc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800183c0:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800183c4:	10000793          	li	a5,256
    800183c8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800183cc:	20000793          	li	a5,512
    800183d0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800183d4:	40000793          	li	a5,1024
    800183d8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800183dc:	6785                	lui	a5,0x1
    800183de:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800183e2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800183e6:	4785                	li	a5,1
    800183e8:	07fe                	slli	a5,a5,0x1f
    800183ea:	4485                	li	s1,1
    800183ec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800183f0:	08100793          	li	a5,129
    800183f4:	07e2                	slli	a5,a5,0x18
    800183f6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    800183fa:	08000793          	li	a5,128
    800183fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    80018402:	67a1                	lui	a5,0x8
    80018404:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    80018408:	3b0025f3          	csrr	a1,pmpaddr0
    8001840c:	00010517          	auipc	a0,0x10
    80018410:	2ec50513          	addi	a0,a0,748 # 800286f8 <__func__.2+0x5e90>
    80018414:	05d080ef          	jal	80020c70 <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    80018418:	3b1025f3          	csrr	a1,pmpaddr1
    8001841c:	00010517          	auipc	a0,0x10
    80018420:	2dc50513          	addi	a0,a0,732 # 800286f8 <__func__.2+0x5e90>
    80018424:	04d080ef          	jal	80020c70 <printf>
    goto_priv(PRIV_HS);
    80018428:	450d                	li	a0,3
    8001842a:	eaee80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001842e:	0330000f          	fence	rw,rw
    80018432:	0002d417          	auipc	s0,0x2d
    80018436:	bde40413          	addi	s0,s0,-1058 # 80045010 <excpt>
    8001843a:	0002d797          	auipc	a5,0x2d
    8001843e:	c007b723          	sd	zero,-1010(a5) # 80045048 <excpt+0x38>
    80018442:	00941023          	sh	s1,0(s0)
    80018446:	0330000f          	fence	rw,rw
    8001844a:	02149793          	slli	a5,s1,0x21
    8001844e:	40078793          	addi	a5,a5,1024
    80018452:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80018456:	08200593          	li	a1,130
    8001845a:	00010617          	auipc	a2,0x10
    8001845e:	2de60613          	addi	a2,a2,734 # 80028738 <__func__.2+0x5ed0>
    80018462:	0000a517          	auipc	a0,0xa
    80018466:	70650513          	addi	a0,a0,1798 # 80022b68 <__func__.2+0x300>
    8001846a:	007080ef          	jal	80020c70 <printf>
    8001846e:	0002d797          	auipc	a5,0x2d
    80018472:	ba37c783          	lbu	a5,-1117(a5) # 80045011 <excpt+0x1>
    80018476:	0000a597          	auipc	a1,0xa
    8001847a:	6ca58593          	addi	a1,a1,1738 # 80022b40 <__func__.2+0x2d8>
    8001847e:	cf89                	beqz	a5,80018498 <load_access_fault_6+0x110>
    80018480:	6418                	ld	a4,8(s0)
    80018482:	4795                	li	a5,5
    80018484:	0000a597          	auipc	a1,0xa
    80018488:	6ac58593          	addi	a1,a1,1708 # 80022b30 <__func__.2+0x2c8>
    8001848c:	00f70663          	beq	a4,a5,80018498 <load_access_fault_6+0x110>
    80018490:	0000a597          	auipc	a1,0xa
    80018494:	6b058593          	addi	a1,a1,1712 # 80022b40 <__func__.2+0x2d8>
    80018498:	0000a517          	auipc	a0,0xa
    8001849c:	6e850513          	addi	a0,a0,1768 # 80022b80 <__func__.2+0x318>
    800184a0:	7d0080ef          	jal	80020c70 <printf>
    800184a4:	0002d797          	auipc	a5,0x2d
    800184a8:	b6d7c783          	lbu	a5,-1171(a5) # 80045011 <excpt+0x1>
    800184ac:	c789                	beqz	a5,800184b6 <load_access_fault_6+0x12e>
    800184ae:	6418                	ld	a4,8(s0)
    800184b0:	4795                	li	a5,5
    800184b2:	00f70c63          	beq	a4,a5,800184ca <load_access_fault_6+0x142>
    800184b6:	0000a517          	auipc	a0,0xa
    800184ba:	6d250513          	addi	a0,a0,1746 # 80022b88 <__func__.2+0x320>
    800184be:	7b2080ef          	jal	80020c70 <printf>
    800184c2:	02900513          	li	a0,41
    800184c6:	63b070ef          	jal	80020300 <putchar>
    800184ca:	4529                	li	a0,10
    800184cc:	635070ef          	jal	80020300 <putchar>
    800184d0:	0002d497          	auipc	s1,0x2d
    800184d4:	b414c483          	lbu	s1,-1215(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800184d8:	0000a597          	auipc	a1,0xa
    800184dc:	66858593          	addi	a1,a1,1640 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800184e0:	cc91                	beqz	s1,800184fc <load_access_fault_6+0x174>
    800184e2:	6418                	ld	a4,8(s0)
    800184e4:	4795                	li	a5,5
    TEST_END();
    800184e6:	0000a597          	auipc	a1,0xa
    800184ea:	64a58593          	addi	a1,a1,1610 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800184ee:	00f70763          	beq	a4,a5,800184fc <load_access_fault_6+0x174>
    800184f2:	4481                	li	s1,0
    TEST_END();
    800184f4:	0000a597          	auipc	a1,0xa
    800184f8:	64c58593          	addi	a1,a1,1612 # 80022b40 <__func__.2+0x2d8>
    800184fc:	0000a517          	auipc	a0,0xa
    80018500:	6ec50513          	addi	a0,a0,1772 # 80022be8 <__func__.2+0x380>
    80018504:	76c080ef          	jal	80020c70 <printf>
    80018508:	4511                	li	a0,4
    8001850a:	dcee80ef          	jal	80000ad8 <goto_priv>
    8001850e:	e9be80ef          	jal	800013a8 <reset_state>
}
    80018512:	60e2                	ld	ra,24(sp)
    80018514:	6442                	ld	s0,16(sp)
    80018516:	8526                	mv	a0,s1
    80018518:	64a2                	ld	s1,8(sp)
    8001851a:	6105                	addi	sp,sp,32
    8001851c:	8082                	ret

000000008001851e <load_access_fault_7>:


bool load_access_fault_7(){
    8001851e:	1101                	addi	sp,sp,-32

    TEST_START();
    80018520:	0000a597          	auipc	a1,0xa
    80018524:	c4858593          	addi	a1,a1,-952 # 80022168 <__func__.33>
    80018528:	0000a517          	auipc	a0,0xa
    8001852c:	62850513          	addi	a0,a0,1576 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_7(){
    80018530:	ec06                	sd	ra,24(sp)
    80018532:	e822                	sd	s0,16(sp)
    80018534:	e426                	sd	s1,8(sp)
    TEST_START();
    80018536:	73a080ef          	jal	80020c70 <printf>
    8001853a:	4529                	li	a0,10
    8001853c:	5c5070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018540:	4511                	li	a0,4
    80018542:	d96e80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018546:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001854a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001854e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018552:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018556:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001855a:	10000793          	li	a5,256
    8001855e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018562:	20000793          	li	a5,512
    80018566:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001856a:	40000793          	li	a5,1024
    8001856e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018572:	6785                	lui	a5,0x1
    80018574:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018578:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001857c:	4785                	li	a5,1
    8001857e:	07fe                	slli	a5,a5,0x1f
    80018580:	4485                	li	s1,1
    80018582:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018586:	08100793          	li	a5,129
    8001858a:	07e2                	slli	a5,a5,0x18
    8001858c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018590:	08000793          	li	a5,128
    80018594:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018598:	67a1                	lui	a5,0x8
    8001859a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001859e:	8526                	mv	a0,s1
    800185a0:	d38e80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    800185a4:	0330000f          	fence	rw,rw
    800185a8:	0002d417          	auipc	s0,0x2d
    800185ac:	a6840413          	addi	s0,s0,-1432 # 80045010 <excpt>
    800185b0:	0002d797          	auipc	a5,0x2d
    800185b4:	a807bc23          	sd	zero,-1384(a5) # 80045048 <excpt+0x38>
    800185b8:	00941023          	sh	s1,0(s0)
    800185bc:	0330000f          	fence	rw,rw
    800185c0:	02149793          	slli	a5,s1,0x21
    800185c4:	40078793          	addi	a5,a5,1024
    800185c8:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800185cc:	08200593          	li	a1,130
    800185d0:	00010617          	auipc	a2,0x10
    800185d4:	1a060613          	addi	a2,a2,416 # 80028770 <__func__.2+0x5f08>
    800185d8:	0000a517          	auipc	a0,0xa
    800185dc:	59050513          	addi	a0,a0,1424 # 80022b68 <__func__.2+0x300>
    800185e0:	690080ef          	jal	80020c70 <printf>
    800185e4:	0002d797          	auipc	a5,0x2d
    800185e8:	a2d7c783          	lbu	a5,-1491(a5) # 80045011 <excpt+0x1>
    800185ec:	0000a597          	auipc	a1,0xa
    800185f0:	55458593          	addi	a1,a1,1364 # 80022b40 <__func__.2+0x2d8>
    800185f4:	cf89                	beqz	a5,8001860e <load_access_fault_7+0xf0>
    800185f6:	6418                	ld	a4,8(s0)
    800185f8:	4795                	li	a5,5
    800185fa:	0000a597          	auipc	a1,0xa
    800185fe:	53658593          	addi	a1,a1,1334 # 80022b30 <__func__.2+0x2c8>
    80018602:	00f70663          	beq	a4,a5,8001860e <load_access_fault_7+0xf0>
    80018606:	0000a597          	auipc	a1,0xa
    8001860a:	53a58593          	addi	a1,a1,1338 # 80022b40 <__func__.2+0x2d8>
    8001860e:	0000a517          	auipc	a0,0xa
    80018612:	57250513          	addi	a0,a0,1394 # 80022b80 <__func__.2+0x318>
    80018616:	65a080ef          	jal	80020c70 <printf>
    8001861a:	0002d797          	auipc	a5,0x2d
    8001861e:	9f77c783          	lbu	a5,-1545(a5) # 80045011 <excpt+0x1>
    80018622:	c789                	beqz	a5,8001862c <load_access_fault_7+0x10e>
    80018624:	6418                	ld	a4,8(s0)
    80018626:	4795                	li	a5,5
    80018628:	00f70c63          	beq	a4,a5,80018640 <load_access_fault_7+0x122>
    8001862c:	0000a517          	auipc	a0,0xa
    80018630:	55c50513          	addi	a0,a0,1372 # 80022b88 <__func__.2+0x320>
    80018634:	63c080ef          	jal	80020c70 <printf>
    80018638:	02900513          	li	a0,41
    8001863c:	4c5070ef          	jal	80020300 <putchar>
    80018640:	4529                	li	a0,10
    80018642:	4bf070ef          	jal	80020300 <putchar>
    80018646:	0002d497          	auipc	s1,0x2d
    8001864a:	9cb4c483          	lbu	s1,-1589(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001864e:	0000a597          	auipc	a1,0xa
    80018652:	4f258593          	addi	a1,a1,1266 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80018656:	cc91                	beqz	s1,80018672 <load_access_fault_7+0x154>
    80018658:	6418                	ld	a4,8(s0)
    8001865a:	4795                	li	a5,5
    TEST_END();
    8001865c:	0000a597          	auipc	a1,0xa
    80018660:	4d458593          	addi	a1,a1,1236 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80018664:	00f70763          	beq	a4,a5,80018672 <load_access_fault_7+0x154>
    80018668:	4481                	li	s1,0
    TEST_END();
    8001866a:	0000a597          	auipc	a1,0xa
    8001866e:	4d658593          	addi	a1,a1,1238 # 80022b40 <__func__.2+0x2d8>
    80018672:	0000a517          	auipc	a0,0xa
    80018676:	57650513          	addi	a0,a0,1398 # 80022be8 <__func__.2+0x380>
    8001867a:	5f6080ef          	jal	80020c70 <printf>
    8001867e:	4511                	li	a0,4
    80018680:	c58e80ef          	jal	80000ad8 <goto_priv>
    80018684:	d25e80ef          	jal	800013a8 <reset_state>
}
    80018688:	60e2                	ld	ra,24(sp)
    8001868a:	6442                	ld	s0,16(sp)
    8001868c:	8526                	mv	a0,s1
    8001868e:	64a2                	ld	s1,8(sp)
    80018690:	6105                	addi	sp,sp,32
    80018692:	8082                	ret

0000000080018694 <load_access_fault_8>:

bool load_access_fault_8(){
    80018694:	1101                	addi	sp,sp,-32

    TEST_START();
    80018696:	0000a597          	auipc	a1,0xa
    8001869a:	aea58593          	addi	a1,a1,-1302 # 80022180 <__func__.32>
    8001869e:	0000a517          	auipc	a0,0xa
    800186a2:	4b250513          	addi	a0,a0,1202 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_8(){
    800186a6:	ec06                	sd	ra,24(sp)
    800186a8:	e822                	sd	s0,16(sp)
    800186aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800186ac:	5c4080ef          	jal	80020c70 <printf>
    800186b0:	4529                	li	a0,10
    800186b2:	44f070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800186b6:	4511                	li	a0,4
    800186b8:	c20e80ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800186bc:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800186c0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800186c4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800186c8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800186cc:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800186d0:	10000793          	li	a5,256
    800186d4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800186d8:	20000793          	li	a5,512
    800186dc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800186e0:	40000793          	li	a5,1024
    800186e4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800186e8:	6785                	lui	a5,0x1
    800186ea:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800186ee:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800186f2:	4785                	li	a5,1
    800186f4:	07fe                	slli	a5,a5,0x1f
    800186f6:	4485                	li	s1,1
    800186f8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800186fc:	08100793          	li	a5,129
    80018700:	07e2                	slli	a5,a5,0x18
    80018702:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018706:	08000793          	li	a5,128
    8001870a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001870e:	67a1                	lui	a5,0x8
    80018710:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    80018714:	4501                	li	a0,0
    80018716:	bc2e80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001871a:	0330000f          	fence	rw,rw
    8001871e:	0002d417          	auipc	s0,0x2d
    80018722:	8f240413          	addi	s0,s0,-1806 # 80045010 <excpt>
    80018726:	0002d797          	auipc	a5,0x2d
    8001872a:	9207b123          	sd	zero,-1758(a5) # 80045048 <excpt+0x38>
    8001872e:	00941023          	sh	s1,0(s0)
    80018732:	0330000f          	fence	rw,rw
    80018736:	02149793          	slli	a5,s1,0x21
    8001873a:	40078793          	addi	a5,a5,1024
    8001873e:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80018742:	08200593          	li	a1,130
    80018746:	00010617          	auipc	a2,0x10
    8001874a:	06260613          	addi	a2,a2,98 # 800287a8 <__func__.2+0x5f40>
    8001874e:	0000a517          	auipc	a0,0xa
    80018752:	41a50513          	addi	a0,a0,1050 # 80022b68 <__func__.2+0x300>
    80018756:	51a080ef          	jal	80020c70 <printf>
    8001875a:	0002d797          	auipc	a5,0x2d
    8001875e:	8b77c783          	lbu	a5,-1865(a5) # 80045011 <excpt+0x1>
    80018762:	0000a597          	auipc	a1,0xa
    80018766:	3de58593          	addi	a1,a1,990 # 80022b40 <__func__.2+0x2d8>
    8001876a:	cf89                	beqz	a5,80018784 <load_access_fault_8+0xf0>
    8001876c:	6418                	ld	a4,8(s0)
    8001876e:	4795                	li	a5,5
    80018770:	0000a597          	auipc	a1,0xa
    80018774:	3c058593          	addi	a1,a1,960 # 80022b30 <__func__.2+0x2c8>
    80018778:	00f70663          	beq	a4,a5,80018784 <load_access_fault_8+0xf0>
    8001877c:	0000a597          	auipc	a1,0xa
    80018780:	3c458593          	addi	a1,a1,964 # 80022b40 <__func__.2+0x2d8>
    80018784:	0000a517          	auipc	a0,0xa
    80018788:	3fc50513          	addi	a0,a0,1020 # 80022b80 <__func__.2+0x318>
    8001878c:	4e4080ef          	jal	80020c70 <printf>
    80018790:	0002d797          	auipc	a5,0x2d
    80018794:	8817c783          	lbu	a5,-1919(a5) # 80045011 <excpt+0x1>
    80018798:	c789                	beqz	a5,800187a2 <load_access_fault_8+0x10e>
    8001879a:	6418                	ld	a4,8(s0)
    8001879c:	4795                	li	a5,5
    8001879e:	00f70c63          	beq	a4,a5,800187b6 <load_access_fault_8+0x122>
    800187a2:	0000a517          	auipc	a0,0xa
    800187a6:	3e650513          	addi	a0,a0,998 # 80022b88 <__func__.2+0x320>
    800187aa:	4c6080ef          	jal	80020c70 <printf>
    800187ae:	02900513          	li	a0,41
    800187b2:	34f070ef          	jal	80020300 <putchar>
    800187b6:	4529                	li	a0,10
    800187b8:	349070ef          	jal	80020300 <putchar>
    800187bc:	0002d497          	auipc	s1,0x2d
    800187c0:	8554c483          	lbu	s1,-1963(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800187c4:	0000a597          	auipc	a1,0xa
    800187c8:	37c58593          	addi	a1,a1,892 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800187cc:	cc91                	beqz	s1,800187e8 <load_access_fault_8+0x154>
    800187ce:	6418                	ld	a4,8(s0)
    800187d0:	4795                	li	a5,5
    TEST_END();
    800187d2:	0000a597          	auipc	a1,0xa
    800187d6:	35e58593          	addi	a1,a1,862 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800187da:	00f70763          	beq	a4,a5,800187e8 <load_access_fault_8+0x154>
    800187de:	4481                	li	s1,0
    TEST_END();
    800187e0:	0000a597          	auipc	a1,0xa
    800187e4:	36058593          	addi	a1,a1,864 # 80022b40 <__func__.2+0x2d8>
    800187e8:	0000a517          	auipc	a0,0xa
    800187ec:	40050513          	addi	a0,a0,1024 # 80022be8 <__func__.2+0x380>
    800187f0:	480080ef          	jal	80020c70 <printf>
    800187f4:	4511                	li	a0,4
    800187f6:	ae2e80ef          	jal	80000ad8 <goto_priv>
    800187fa:	bafe80ef          	jal	800013a8 <reset_state>
}
    800187fe:	60e2                	ld	ra,24(sp)
    80018800:	6442                	ld	s0,16(sp)
    80018802:	8526                	mv	a0,s1
    80018804:	64a2                	ld	s1,8(sp)
    80018806:	6105                	addi	sp,sp,32
    80018808:	8082                	ret

000000008001880a <load_access_fault_9>:

bool load_access_fault_9(){
    8001880a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001880c:	0000a597          	auipc	a1,0xa
    80018810:	98c58593          	addi	a1,a1,-1652 # 80022198 <__func__.31>
    80018814:	0000a517          	auipc	a0,0xa
    80018818:	33c50513          	addi	a0,a0,828 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_9(){
    8001881c:	ec06                	sd	ra,24(sp)
    8001881e:	e822                	sd	s0,16(sp)
    80018820:	e426                	sd	s1,8(sp)
    TEST_START();
    80018822:	44e080ef          	jal	80020c70 <printf>
    80018826:	4529                	li	a0,10
    80018828:	2d9070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001882c:	4511                	li	a0,4
    8001882e:	aaae80ef          	jal	80000ad8 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018832:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018836:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001883a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001883e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018842:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018846:	10000793          	li	a5,256
    8001884a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001884e:	20000793          	li	a5,512
    80018852:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018856:	40000793          	li	a5,1024
    8001885a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001885e:	6785                	lui	a5,0x1
    80018860:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018864:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018868:	4785                	li	a5,1
    8001886a:	07fe                	slli	a5,a5,0x1f
    8001886c:	4485                	li	s1,1
    8001886e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018872:	08100793          	li	a5,129
    80018876:	07e2                	slli	a5,a5,0x18
    80018878:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001887c:	08000793          	li	a5,128
    80018880:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018884:	67a1                	lui	a5,0x8
    80018886:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001888a:	4501                	li	a0,0
    8001888c:	a4ce80ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018890:	0330000f          	fence	rw,rw
    80018894:	0002c417          	auipc	s0,0x2c
    80018898:	77c40413          	addi	s0,s0,1916 # 80045010 <excpt>
    8001889c:	0002c797          	auipc	a5,0x2c
    800188a0:	7a07b623          	sd	zero,1964(a5) # 80045048 <excpt+0x38>
    800188a4:	00941023          	sh	s1,0(s0)
    800188a8:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800188ac:	02349793          	slli	a5,s1,0x23
    800188b0:	17e1                	addi	a5,a5,-8
    800188b2:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    800188b6:	08200593          	li	a1,130
    800188ba:	00010617          	auipc	a2,0x10
    800188be:	f2660613          	addi	a2,a2,-218 # 800287e0 <__func__.2+0x5f78>
    800188c2:	0000a517          	auipc	a0,0xa
    800188c6:	2a650513          	addi	a0,a0,678 # 80022b68 <__func__.2+0x300>
    800188ca:	3a6080ef          	jal	80020c70 <printf>
    800188ce:	0002c797          	auipc	a5,0x2c
    800188d2:	7437c783          	lbu	a5,1859(a5) # 80045011 <excpt+0x1>
    800188d6:	0000a597          	auipc	a1,0xa
    800188da:	26a58593          	addi	a1,a1,618 # 80022b40 <__func__.2+0x2d8>
    800188de:	cf89                	beqz	a5,800188f8 <load_access_fault_9+0xee>
    800188e0:	6418                	ld	a4,8(s0)
    800188e2:	4795                	li	a5,5
    800188e4:	0000a597          	auipc	a1,0xa
    800188e8:	24c58593          	addi	a1,a1,588 # 80022b30 <__func__.2+0x2c8>
    800188ec:	00f70663          	beq	a4,a5,800188f8 <load_access_fault_9+0xee>
    800188f0:	0000a597          	auipc	a1,0xa
    800188f4:	25058593          	addi	a1,a1,592 # 80022b40 <__func__.2+0x2d8>
    800188f8:	0000a517          	auipc	a0,0xa
    800188fc:	28850513          	addi	a0,a0,648 # 80022b80 <__func__.2+0x318>
    80018900:	370080ef          	jal	80020c70 <printf>
    80018904:	0002c797          	auipc	a5,0x2c
    80018908:	70d7c783          	lbu	a5,1805(a5) # 80045011 <excpt+0x1>
    8001890c:	c789                	beqz	a5,80018916 <load_access_fault_9+0x10c>
    8001890e:	6418                	ld	a4,8(s0)
    80018910:	4795                	li	a5,5
    80018912:	00f70c63          	beq	a4,a5,8001892a <load_access_fault_9+0x120>
    80018916:	0000a517          	auipc	a0,0xa
    8001891a:	27250513          	addi	a0,a0,626 # 80022b88 <__func__.2+0x320>
    8001891e:	352080ef          	jal	80020c70 <printf>
    80018922:	02900513          	li	a0,41
    80018926:	1db070ef          	jal	80020300 <putchar>
    8001892a:	4529                	li	a0,10
    8001892c:	1d5070ef          	jal	80020300 <putchar>
    80018930:	0002c497          	auipc	s1,0x2c
    80018934:	6e14c483          	lbu	s1,1761(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80018938:	0000a597          	auipc	a1,0xa
    8001893c:	20858593          	addi	a1,a1,520 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    80018940:	cc91                	beqz	s1,8001895c <load_access_fault_9+0x152>
    80018942:	6418                	ld	a4,8(s0)
    80018944:	4795                	li	a5,5
    TEST_END();
    80018946:	0000a597          	auipc	a1,0xa
    8001894a:	1ea58593          	addi	a1,a1,490 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001894e:	00f70763          	beq	a4,a5,8001895c <load_access_fault_9+0x152>
    80018952:	4481                	li	s1,0
    TEST_END();
    80018954:	0000a597          	auipc	a1,0xa
    80018958:	1ec58593          	addi	a1,a1,492 # 80022b40 <__func__.2+0x2d8>
    8001895c:	0000a517          	auipc	a0,0xa
    80018960:	28c50513          	addi	a0,a0,652 # 80022be8 <__func__.2+0x380>
    80018964:	30c080ef          	jal	80020c70 <printf>
    80018968:	4511                	li	a0,4
    8001896a:	96ee80ef          	jal	80000ad8 <goto_priv>
    8001896e:	a3be80ef          	jal	800013a8 <reset_state>
}
    80018972:	60e2                	ld	ra,24(sp)
    80018974:	6442                	ld	s0,16(sp)
    80018976:	8526                	mv	a0,s1
    80018978:	64a2                	ld	s1,8(sp)
    8001897a:	6105                	addi	sp,sp,32
    8001897c:	8082                	ret

000000008001897e <load_access_fault_10>:

bool load_access_fault_10(){
    8001897e:	1101                	addi	sp,sp,-32

    TEST_START();
    80018980:	0000a597          	auipc	a1,0xa
    80018984:	83058593          	addi	a1,a1,-2000 # 800221b0 <__func__.30>
    80018988:	0000a517          	auipc	a0,0xa
    8001898c:	1c850513          	addi	a0,a0,456 # 80022b50 <__func__.2+0x2e8>
bool load_access_fault_10(){
    80018990:	ec06                	sd	ra,24(sp)
    80018992:	e822                	sd	s0,16(sp)
    80018994:	e426                	sd	s1,8(sp)
    TEST_START();
    80018996:	2da080ef          	jal	80020c70 <printf>
    8001899a:	4529                	li	a0,10
    8001899c:	165070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800189a0:	4511                	li	a0,4
    800189a2:	936e80ef          	jal	80000ad8 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800189a6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800189aa:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800189ae:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800189b2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800189b6:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800189ba:	4785                	li	a5,1
    800189bc:	07fe                	slli	a5,a5,0x1f
    800189be:	4485                	li	s1,1
    800189c0:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800189c4:	08000793          	li	a5,128
    800189c8:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    800189cc:	3a0025f3          	csrr	a1,pmpcfg0
    800189d0:	00010517          	auipc	a0,0x10
    800189d4:	e8050513          	addi	a0,a0,-384 # 80028850 <__func__.2+0x5fe8>
    800189d8:	298080ef          	jal	80020c70 <printf>

    TEST_SETUP_EXCEPT();    
    800189dc:	0330000f          	fence	rw,rw
    800189e0:	0002c417          	auipc	s0,0x2c
    800189e4:	63040413          	addi	s0,s0,1584 # 80045010 <excpt>
    800189e8:	0002c797          	auipc	a5,0x2c
    800189ec:	6607b023          	sd	zero,1632(a5) # 80045048 <excpt+0x38>
    800189f0:	00941023          	sh	s1,0(s0)
    800189f4:	0330000f          	fence	rw,rw
    800189f8:	07f00793          	li	a5,127
    800189fc:	07ea                	slli	a5,a5,0x1a
    800189fe:	0007b783          	ld	a5,0(a5)

    ld(0x7f000000UL << 2);

    printf("%d\n",excpt.triggered);
    80018a02:	0002c597          	auipc	a1,0x2c
    80018a06:	60f5c583          	lbu	a1,1551(a1) # 80045011 <excpt+0x1>
    80018a0a:	0000a517          	auipc	a0,0xa
    80018a0e:	42650513          	addi	a0,a0,1062 # 80022e30 <__func__.2+0x5c8>
    80018a12:	25e080ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    80018a16:	640c                	ld	a1,8(s0)
    80018a18:	0000a517          	auipc	a0,0xa
    80018a1c:	41850513          	addi	a0,a0,1048 # 80022e30 <__func__.2+0x5c8>
    80018a20:	250080ef          	jal	80020c70 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80018a24:	08200593          	li	a1,130
    80018a28:	00010617          	auipc	a2,0x10
    80018a2c:	e3860613          	addi	a2,a2,-456 # 80028860 <__func__.2+0x5ff8>
    80018a30:	0000a517          	auipc	a0,0xa
    80018a34:	13850513          	addi	a0,a0,312 # 80022b68 <__func__.2+0x300>
    80018a38:	238080ef          	jal	80020c70 <printf>
    80018a3c:	0002c797          	auipc	a5,0x2c
    80018a40:	5d57c783          	lbu	a5,1493(a5) # 80045011 <excpt+0x1>
    80018a44:	0000a597          	auipc	a1,0xa
    80018a48:	0fc58593          	addi	a1,a1,252 # 80022b40 <__func__.2+0x2d8>
    80018a4c:	cf89                	beqz	a5,80018a66 <load_access_fault_10+0xe8>
    80018a4e:	6418                	ld	a4,8(s0)
    80018a50:	4795                	li	a5,5
    80018a52:	0000a597          	auipc	a1,0xa
    80018a56:	0de58593          	addi	a1,a1,222 # 80022b30 <__func__.2+0x2c8>
    80018a5a:	00f70663          	beq	a4,a5,80018a66 <load_access_fault_10+0xe8>
    80018a5e:	0000a597          	auipc	a1,0xa
    80018a62:	0e258593          	addi	a1,a1,226 # 80022b40 <__func__.2+0x2d8>
    80018a66:	0000a517          	auipc	a0,0xa
    80018a6a:	11a50513          	addi	a0,a0,282 # 80022b80 <__func__.2+0x318>
    80018a6e:	202080ef          	jal	80020c70 <printf>
    80018a72:	0002c797          	auipc	a5,0x2c
    80018a76:	59f7c783          	lbu	a5,1439(a5) # 80045011 <excpt+0x1>
    80018a7a:	c789                	beqz	a5,80018a84 <load_access_fault_10+0x106>
    80018a7c:	6418                	ld	a4,8(s0)
    80018a7e:	4795                	li	a5,5
    80018a80:	00f70c63          	beq	a4,a5,80018a98 <load_access_fault_10+0x11a>
    80018a84:	0000a517          	auipc	a0,0xa
    80018a88:	10450513          	addi	a0,a0,260 # 80022b88 <__func__.2+0x320>
    80018a8c:	1e4080ef          	jal	80020c70 <printf>
    80018a90:	02900513          	li	a0,41
    80018a94:	06d070ef          	jal	80020300 <putchar>
    80018a98:	4529                	li	a0,10
    80018a9a:	067070ef          	jal	80020300 <putchar>
    80018a9e:	0002c497          	auipc	s1,0x2c
    80018aa2:	5734c483          	lbu	s1,1395(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80018aa6:	0000a597          	auipc	a1,0xa
    80018aaa:	09a58593          	addi	a1,a1,154 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80018aae:	cc91                	beqz	s1,80018aca <load_access_fault_10+0x14c>
    80018ab0:	6418                	ld	a4,8(s0)
    80018ab2:	4795                	li	a5,5
    TEST_END();
    80018ab4:	0000a597          	auipc	a1,0xa
    80018ab8:	07c58593          	addi	a1,a1,124 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80018abc:	00f70763          	beq	a4,a5,80018aca <load_access_fault_10+0x14c>
    80018ac0:	4481                	li	s1,0
    TEST_END();
    80018ac2:	0000a597          	auipc	a1,0xa
    80018ac6:	07e58593          	addi	a1,a1,126 # 80022b40 <__func__.2+0x2d8>
    80018aca:	0000a517          	auipc	a0,0xa
    80018ace:	11e50513          	addi	a0,a0,286 # 80022be8 <__func__.2+0x380>
    80018ad2:	19e080ef          	jal	80020c70 <printf>
    80018ad6:	4511                	li	a0,4
    80018ad8:	800e80ef          	jal	80000ad8 <goto_priv>
    80018adc:	8cde80ef          	jal	800013a8 <reset_state>
}
    80018ae0:	60e2                	ld	ra,24(sp)
    80018ae2:	6442                	ld	s0,16(sp)
    80018ae4:	8526                	mv	a0,s1
    80018ae6:	64a2                	ld	s1,8(sp)
    80018ae8:	6105                	addi	sp,sp,32
    80018aea:	8082                	ret

0000000080018aec <store_access_fault_1>:


bool store_access_fault_1(){
    80018aec:	1101                	addi	sp,sp,-32

    TEST_START();
    80018aee:	00009597          	auipc	a1,0x9
    80018af2:	6da58593          	addi	a1,a1,1754 # 800221c8 <__func__.29>
    80018af6:	0000a517          	auipc	a0,0xa
    80018afa:	05a50513          	addi	a0,a0,90 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_1(){
    80018afe:	ec06                	sd	ra,24(sp)
    80018b00:	e822                	sd	s0,16(sp)
    80018b02:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b04:	16c080ef          	jal	80020c70 <printf>
    80018b08:	4529                	li	a0,10
    80018b0a:	7f6070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018b0e:	4511                	li	a0,4
    80018b10:	fc9e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018b14:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018b18:	10000793          	li	a5,256
    80018b1c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018b20:	20000793          	li	a5,512
    80018b24:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018b28:	40000793          	li	a5,1024
    80018b2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018b30:	6785                	lui	a5,0x1
    80018b32:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018b36:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018b3a:	4785                	li	a5,1
    80018b3c:	07fe                	slli	a5,a5,0x1f
    80018b3e:	4705                	li	a4,1
    80018b40:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018b44:	08100793          	li	a5,129
    80018b48:	07e2                	slli	a5,a5,0x18
    80018b4a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018b4e:	67a1                	lui	a5,0x8
    80018b50:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    80018b54:	12000073          	sfence.vma
    asm volatile(
    80018b58:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80018b5c:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    80018b60:	0330000f          	fence	rw,rw
    80018b64:	0002c417          	auipc	s0,0x2c
    80018b68:	4ac40413          	addi	s0,s0,1196 # 80045010 <excpt>
    80018b6c:	0002c797          	auipc	a5,0x2c
    80018b70:	4c07be23          	sd	zero,1244(a5) # 80045048 <excpt+0x38>
    80018b74:	00e41023          	sh	a4,0(s0)
    80018b78:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    80018b7c:	02171793          	slli	a5,a4,0x21
    80018b80:	40078793          	addi	a5,a5,1024
    80018b84:	4701                	li	a4,0
    80018b86:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    80018b8a:	0002c597          	auipc	a1,0x2c
    80018b8e:	4875c583          	lbu	a1,1159(a1) # 80045011 <excpt+0x1>
    80018b92:	0000a517          	auipc	a0,0xa
    80018b96:	29e50513          	addi	a0,a0,670 # 80022e30 <__func__.2+0x5c8>
    80018b9a:	0d6080ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    80018b9e:	640c                	ld	a1,8(s0)
    80018ba0:	0000a517          	auipc	a0,0xa
    80018ba4:	29050513          	addi	a0,a0,656 # 80022e30 <__func__.2+0x5c8>
    80018ba8:	0c8080ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018bac:	08200593          	li	a1,130
    80018bb0:	00010617          	auipc	a2,0x10
    80018bb4:	d1060613          	addi	a2,a2,-752 # 800288c0 <__func__.2+0x6058>
    80018bb8:	0000a517          	auipc	a0,0xa
    80018bbc:	fb050513          	addi	a0,a0,-80 # 80022b68 <__func__.2+0x300>
    80018bc0:	0b0080ef          	jal	80020c70 <printf>
    80018bc4:	0002c797          	auipc	a5,0x2c
    80018bc8:	44d7c783          	lbu	a5,1101(a5) # 80045011 <excpt+0x1>
    80018bcc:	0000a597          	auipc	a1,0xa
    80018bd0:	f7458593          	addi	a1,a1,-140 # 80022b40 <__func__.2+0x2d8>
    80018bd4:	cf89                	beqz	a5,80018bee <store_access_fault_1+0x102>
    80018bd6:	6418                	ld	a4,8(s0)
    80018bd8:	479d                	li	a5,7
    80018bda:	0000a597          	auipc	a1,0xa
    80018bde:	f5658593          	addi	a1,a1,-170 # 80022b30 <__func__.2+0x2c8>
    80018be2:	00f70663          	beq	a4,a5,80018bee <store_access_fault_1+0x102>
    80018be6:	0000a597          	auipc	a1,0xa
    80018bea:	f5a58593          	addi	a1,a1,-166 # 80022b40 <__func__.2+0x2d8>
    80018bee:	0000a517          	auipc	a0,0xa
    80018bf2:	f9250513          	addi	a0,a0,-110 # 80022b80 <__func__.2+0x318>
    80018bf6:	07a080ef          	jal	80020c70 <printf>
    80018bfa:	0002c797          	auipc	a5,0x2c
    80018bfe:	4177c783          	lbu	a5,1047(a5) # 80045011 <excpt+0x1>
    80018c02:	c789                	beqz	a5,80018c0c <store_access_fault_1+0x120>
    80018c04:	6418                	ld	a4,8(s0)
    80018c06:	479d                	li	a5,7
    80018c08:	00f70c63          	beq	a4,a5,80018c20 <store_access_fault_1+0x134>
    80018c0c:	0000a517          	auipc	a0,0xa
    80018c10:	f7c50513          	addi	a0,a0,-132 # 80022b88 <__func__.2+0x320>
    80018c14:	05c080ef          	jal	80020c70 <printf>
    80018c18:	02900513          	li	a0,41
    80018c1c:	6e4070ef          	jal	80020300 <putchar>
    80018c20:	4529                	li	a0,10
    80018c22:	6de070ef          	jal	80020300 <putchar>
    80018c26:	0002c497          	auipc	s1,0x2c
    80018c2a:	3eb4c483          	lbu	s1,1003(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018c2e:	0000a597          	auipc	a1,0xa
    80018c32:	f1258593          	addi	a1,a1,-238 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018c36:	cc91                	beqz	s1,80018c52 <store_access_fault_1+0x166>
    80018c38:	6418                	ld	a4,8(s0)
    80018c3a:	479d                	li	a5,7
    TEST_END();
    80018c3c:	0000a597          	auipc	a1,0xa
    80018c40:	ef458593          	addi	a1,a1,-268 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018c44:	00f70763          	beq	a4,a5,80018c52 <store_access_fault_1+0x166>
    80018c48:	4481                	li	s1,0
    TEST_END();
    80018c4a:	0000a597          	auipc	a1,0xa
    80018c4e:	ef658593          	addi	a1,a1,-266 # 80022b40 <__func__.2+0x2d8>
    80018c52:	0000a517          	auipc	a0,0xa
    80018c56:	f9650513          	addi	a0,a0,-106 # 80022be8 <__func__.2+0x380>
    80018c5a:	016080ef          	jal	80020c70 <printf>
    80018c5e:	4511                	li	a0,4
    80018c60:	e79e70ef          	jal	80000ad8 <goto_priv>
    80018c64:	f44e80ef          	jal	800013a8 <reset_state>
}
    80018c68:	60e2                	ld	ra,24(sp)
    80018c6a:	6442                	ld	s0,16(sp)
    80018c6c:	8526                	mv	a0,s1
    80018c6e:	64a2                	ld	s1,8(sp)
    80018c70:	6105                	addi	sp,sp,32
    80018c72:	8082                	ret

0000000080018c74 <store_access_fault_2>:

bool store_access_fault_2(){
    80018c74:	1101                	addi	sp,sp,-32

    TEST_START();
    80018c76:	00009597          	auipc	a1,0x9
    80018c7a:	56a58593          	addi	a1,a1,1386 # 800221e0 <__func__.28>
    80018c7e:	0000a517          	auipc	a0,0xa
    80018c82:	ed250513          	addi	a0,a0,-302 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_2(){
    80018c86:	ec06                	sd	ra,24(sp)
    80018c88:	e822                	sd	s0,16(sp)
    80018c8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018c8c:	7e5070ef          	jal	80020c70 <printf>
    80018c90:	4529                	li	a0,10
    80018c92:	66e070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018c96:	4511                	li	a0,4
    80018c98:	e41e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018c9c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018ca0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018ca4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018ca8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018cac:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018cb0:	10000793          	li	a5,256
    80018cb4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018cb8:	20000793          	li	a5,512
    80018cbc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018cc0:	40000793          	li	a5,1024
    80018cc4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018cc8:	6785                	lui	a5,0x1
    80018cca:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018cce:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018cd2:	4785                	li	a5,1
    80018cd4:	07fe                	slli	a5,a5,0x1f
    80018cd6:	4485                	li	s1,1
    80018cd8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018cdc:	08100793          	li	a5,129
    80018ce0:	07e2                	slli	a5,a5,0x18
    80018ce2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018ce6:	08000793          	li	a5,128
    80018cea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018cee:	67a1                	lui	a5,0x8
    80018cf0:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    80018cf4:	450d                	li	a0,3
    80018cf6:	de3e70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018cfa:	0330000f          	fence	rw,rw
    80018cfe:	0002c417          	auipc	s0,0x2c
    80018d02:	31240413          	addi	s0,s0,786 # 80045010 <excpt>
    80018d06:	0002c797          	auipc	a5,0x2c
    80018d0a:	3407b123          	sd	zero,834(a5) # 80045048 <excpt+0x38>
    80018d0e:	00941023          	sh	s1,0(s0)
    80018d12:	0330000f          	fence	rw,rw
    80018d16:	02149793          	slli	a5,s1,0x21
    80018d1a:	40078793          	addi	a5,a5,1024
    80018d1e:	4701                	li	a4,0
    80018d20:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018d24:	08200593          	li	a1,130
    80018d28:	00010617          	auipc	a2,0x10
    80018d2c:	bd060613          	addi	a2,a2,-1072 # 800288f8 <__func__.2+0x6090>
    80018d30:	0000a517          	auipc	a0,0xa
    80018d34:	e3850513          	addi	a0,a0,-456 # 80022b68 <__func__.2+0x300>
    80018d38:	739070ef          	jal	80020c70 <printf>
    80018d3c:	0002c797          	auipc	a5,0x2c
    80018d40:	2d57c783          	lbu	a5,725(a5) # 80045011 <excpt+0x1>
    80018d44:	0000a597          	auipc	a1,0xa
    80018d48:	dfc58593          	addi	a1,a1,-516 # 80022b40 <__func__.2+0x2d8>
    80018d4c:	cf89                	beqz	a5,80018d66 <store_access_fault_2+0xf2>
    80018d4e:	6418                	ld	a4,8(s0)
    80018d50:	479d                	li	a5,7
    80018d52:	0000a597          	auipc	a1,0xa
    80018d56:	dde58593          	addi	a1,a1,-546 # 80022b30 <__func__.2+0x2c8>
    80018d5a:	00f70663          	beq	a4,a5,80018d66 <store_access_fault_2+0xf2>
    80018d5e:	0000a597          	auipc	a1,0xa
    80018d62:	de258593          	addi	a1,a1,-542 # 80022b40 <__func__.2+0x2d8>
    80018d66:	0000a517          	auipc	a0,0xa
    80018d6a:	e1a50513          	addi	a0,a0,-486 # 80022b80 <__func__.2+0x318>
    80018d6e:	703070ef          	jal	80020c70 <printf>
    80018d72:	0002c797          	auipc	a5,0x2c
    80018d76:	29f7c783          	lbu	a5,671(a5) # 80045011 <excpt+0x1>
    80018d7a:	c789                	beqz	a5,80018d84 <store_access_fault_2+0x110>
    80018d7c:	6418                	ld	a4,8(s0)
    80018d7e:	479d                	li	a5,7
    80018d80:	00f70c63          	beq	a4,a5,80018d98 <store_access_fault_2+0x124>
    80018d84:	0000a517          	auipc	a0,0xa
    80018d88:	e0450513          	addi	a0,a0,-508 # 80022b88 <__func__.2+0x320>
    80018d8c:	6e5070ef          	jal	80020c70 <printf>
    80018d90:	02900513          	li	a0,41
    80018d94:	56c070ef          	jal	80020300 <putchar>
    80018d98:	4529                	li	a0,10
    80018d9a:	566070ef          	jal	80020300 <putchar>
    80018d9e:	0002c497          	auipc	s1,0x2c
    80018da2:	2734c483          	lbu	s1,627(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018da6:	0000a597          	auipc	a1,0xa
    80018daa:	d9a58593          	addi	a1,a1,-614 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018dae:	cc91                	beqz	s1,80018dca <store_access_fault_2+0x156>
    80018db0:	6418                	ld	a4,8(s0)
    80018db2:	479d                	li	a5,7
    TEST_END();
    80018db4:	0000a597          	auipc	a1,0xa
    80018db8:	d7c58593          	addi	a1,a1,-644 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018dbc:	00f70763          	beq	a4,a5,80018dca <store_access_fault_2+0x156>
    80018dc0:	4481                	li	s1,0
    TEST_END();
    80018dc2:	0000a597          	auipc	a1,0xa
    80018dc6:	d7e58593          	addi	a1,a1,-642 # 80022b40 <__func__.2+0x2d8>
    80018dca:	0000a517          	auipc	a0,0xa
    80018dce:	e1e50513          	addi	a0,a0,-482 # 80022be8 <__func__.2+0x380>
    80018dd2:	69f070ef          	jal	80020c70 <printf>
    80018dd6:	4511                	li	a0,4
    80018dd8:	d01e70ef          	jal	80000ad8 <goto_priv>
    80018ddc:	dcce80ef          	jal	800013a8 <reset_state>
}
    80018de0:	60e2                	ld	ra,24(sp)
    80018de2:	6442                	ld	s0,16(sp)
    80018de4:	8526                	mv	a0,s1
    80018de6:	64a2                	ld	s1,8(sp)
    80018de8:	6105                	addi	sp,sp,32
    80018dea:	8082                	ret

0000000080018dec <store_access_fault_3>:


bool store_access_fault_3(){
    80018dec:	1101                	addi	sp,sp,-32

    TEST_START();
    80018dee:	00009597          	auipc	a1,0x9
    80018df2:	40a58593          	addi	a1,a1,1034 # 800221f8 <__func__.27>
    80018df6:	0000a517          	auipc	a0,0xa
    80018dfa:	d5a50513          	addi	a0,a0,-678 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_3(){
    80018dfe:	ec06                	sd	ra,24(sp)
    80018e00:	e822                	sd	s0,16(sp)
    80018e02:	e426                	sd	s1,8(sp)
    TEST_START();
    80018e04:	66d070ef          	jal	80020c70 <printf>
    80018e08:	4529                	li	a0,10
    80018e0a:	4f6070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018e0e:	4511                	li	a0,4
    80018e10:	cc9e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018e14:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018e18:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018e1c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018e20:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018e24:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018e28:	10000793          	li	a5,256
    80018e2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018e30:	20000793          	li	a5,512
    80018e34:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018e38:	40000793          	li	a5,1024
    80018e3c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018e40:	6785                	lui	a5,0x1
    80018e42:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018e46:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018e4a:	4785                	li	a5,1
    80018e4c:	07fe                	slli	a5,a5,0x1f
    80018e4e:	4485                	li	s1,1
    80018e50:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018e54:	08100793          	li	a5,129
    80018e58:	07e2                	slli	a5,a5,0x18
    80018e5a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018e5e:	08000793          	li	a5,128
    80018e62:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018e66:	67a1                	lui	a5,0x8
    80018e68:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    80018e6c:	8526                	mv	a0,s1
    80018e6e:	c6be70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018e72:	0330000f          	fence	rw,rw
    80018e76:	0002c417          	auipc	s0,0x2c
    80018e7a:	19a40413          	addi	s0,s0,410 # 80045010 <excpt>
    80018e7e:	0002c797          	auipc	a5,0x2c
    80018e82:	1c07b523          	sd	zero,458(a5) # 80045048 <excpt+0x38>
    80018e86:	00941023          	sh	s1,0(s0)
    80018e8a:	0330000f          	fence	rw,rw
    80018e8e:	02149793          	slli	a5,s1,0x21
    80018e92:	40078793          	addi	a5,a5,1024
    80018e96:	4701                	li	a4,0
    80018e98:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018e9c:	08200593          	li	a1,130
    80018ea0:	00010617          	auipc	a2,0x10
    80018ea4:	a9060613          	addi	a2,a2,-1392 # 80028930 <__func__.2+0x60c8>
    80018ea8:	0000a517          	auipc	a0,0xa
    80018eac:	cc050513          	addi	a0,a0,-832 # 80022b68 <__func__.2+0x300>
    80018eb0:	5c1070ef          	jal	80020c70 <printf>
    80018eb4:	0002c797          	auipc	a5,0x2c
    80018eb8:	15d7c783          	lbu	a5,349(a5) # 80045011 <excpt+0x1>
    80018ebc:	0000a597          	auipc	a1,0xa
    80018ec0:	c8458593          	addi	a1,a1,-892 # 80022b40 <__func__.2+0x2d8>
    80018ec4:	cf89                	beqz	a5,80018ede <store_access_fault_3+0xf2>
    80018ec6:	6418                	ld	a4,8(s0)
    80018ec8:	479d                	li	a5,7
    80018eca:	0000a597          	auipc	a1,0xa
    80018ece:	c6658593          	addi	a1,a1,-922 # 80022b30 <__func__.2+0x2c8>
    80018ed2:	00f70663          	beq	a4,a5,80018ede <store_access_fault_3+0xf2>
    80018ed6:	0000a597          	auipc	a1,0xa
    80018eda:	c6a58593          	addi	a1,a1,-918 # 80022b40 <__func__.2+0x2d8>
    80018ede:	0000a517          	auipc	a0,0xa
    80018ee2:	ca250513          	addi	a0,a0,-862 # 80022b80 <__func__.2+0x318>
    80018ee6:	58b070ef          	jal	80020c70 <printf>
    80018eea:	0002c797          	auipc	a5,0x2c
    80018eee:	1277c783          	lbu	a5,295(a5) # 80045011 <excpt+0x1>
    80018ef2:	c789                	beqz	a5,80018efc <store_access_fault_3+0x110>
    80018ef4:	6418                	ld	a4,8(s0)
    80018ef6:	479d                	li	a5,7
    80018ef8:	00f70c63          	beq	a4,a5,80018f10 <store_access_fault_3+0x124>
    80018efc:	0000a517          	auipc	a0,0xa
    80018f00:	c8c50513          	addi	a0,a0,-884 # 80022b88 <__func__.2+0x320>
    80018f04:	56d070ef          	jal	80020c70 <printf>
    80018f08:	02900513          	li	a0,41
    80018f0c:	3f4070ef          	jal	80020300 <putchar>
    80018f10:	4529                	li	a0,10
    80018f12:	3ee070ef          	jal	80020300 <putchar>
    80018f16:	0002c497          	auipc	s1,0x2c
    80018f1a:	0fb4c483          	lbu	s1,251(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018f1e:	0000a597          	auipc	a1,0xa
    80018f22:	c2258593          	addi	a1,a1,-990 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018f26:	cc91                	beqz	s1,80018f42 <store_access_fault_3+0x156>
    80018f28:	6418                	ld	a4,8(s0)
    80018f2a:	479d                	li	a5,7
    TEST_END();
    80018f2c:	0000a597          	auipc	a1,0xa
    80018f30:	c0458593          	addi	a1,a1,-1020 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018f34:	00f70763          	beq	a4,a5,80018f42 <store_access_fault_3+0x156>
    80018f38:	4481                	li	s1,0
    TEST_END();
    80018f3a:	0000a597          	auipc	a1,0xa
    80018f3e:	c0658593          	addi	a1,a1,-1018 # 80022b40 <__func__.2+0x2d8>
    80018f42:	0000a517          	auipc	a0,0xa
    80018f46:	ca650513          	addi	a0,a0,-858 # 80022be8 <__func__.2+0x380>
    80018f4a:	527070ef          	jal	80020c70 <printf>
    80018f4e:	4511                	li	a0,4
    80018f50:	b89e70ef          	jal	80000ad8 <goto_priv>
    80018f54:	c54e80ef          	jal	800013a8 <reset_state>
}
    80018f58:	60e2                	ld	ra,24(sp)
    80018f5a:	6442                	ld	s0,16(sp)
    80018f5c:	8526                	mv	a0,s1
    80018f5e:	64a2                	ld	s1,8(sp)
    80018f60:	6105                	addi	sp,sp,32
    80018f62:	8082                	ret

0000000080018f64 <store_access_fault_4>:

bool store_access_fault_4(){
    80018f64:	1101                	addi	sp,sp,-32

    TEST_START();
    80018f66:	00009597          	auipc	a1,0x9
    80018f6a:	2aa58593          	addi	a1,a1,682 # 80022210 <__func__.26>
    80018f6e:	0000a517          	auipc	a0,0xa
    80018f72:	be250513          	addi	a0,a0,-1054 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_4(){
    80018f76:	ec06                	sd	ra,24(sp)
    80018f78:	e822                	sd	s0,16(sp)
    80018f7a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018f7c:	4f5070ef          	jal	80020c70 <printf>
    80018f80:	4529                	li	a0,10
    80018f82:	37e070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80018f86:	4511                	li	a0,4
    80018f88:	b51e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018f8c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018f90:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018f94:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018f98:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018f9c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018fa0:	10000793          	li	a5,256
    80018fa4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018fa8:	20000793          	li	a5,512
    80018fac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018fb0:	40000793          	li	a5,1024
    80018fb4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018fb8:	6785                	lui	a5,0x1
    80018fba:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018fbe:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018fc2:	4785                	li	a5,1
    80018fc4:	07fe                	slli	a5,a5,0x1f
    80018fc6:	4485                	li	s1,1
    80018fc8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018fcc:	08100793          	li	a5,129
    80018fd0:	07e2                	slli	a5,a5,0x18
    80018fd2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018fd6:	08000793          	li	a5,128
    80018fda:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018fde:	67a1                	lui	a5,0x8
    80018fe0:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    80018fe4:	4501                	li	a0,0
    80018fe6:	af3e70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018fea:	0330000f          	fence	rw,rw
    80018fee:	0002c417          	auipc	s0,0x2c
    80018ff2:	02240413          	addi	s0,s0,34 # 80045010 <excpt>
    80018ff6:	0002c797          	auipc	a5,0x2c
    80018ffa:	0407b923          	sd	zero,82(a5) # 80045048 <excpt+0x38>
    80018ffe:	00941023          	sh	s1,0(s0)
    80019002:	0330000f          	fence	rw,rw
    80019006:	02149793          	slli	a5,s1,0x21
    8001900a:	40078793          	addi	a5,a5,1024
    8001900e:	4701                	li	a4,0
    80019010:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019014:	08200593          	li	a1,130
    80019018:	00010617          	auipc	a2,0x10
    8001901c:	95060613          	addi	a2,a2,-1712 # 80028968 <__func__.2+0x6100>
    80019020:	0000a517          	auipc	a0,0xa
    80019024:	b4850513          	addi	a0,a0,-1208 # 80022b68 <__func__.2+0x300>
    80019028:	449070ef          	jal	80020c70 <printf>
    8001902c:	0002c797          	auipc	a5,0x2c
    80019030:	fe57c783          	lbu	a5,-27(a5) # 80045011 <excpt+0x1>
    80019034:	0000a597          	auipc	a1,0xa
    80019038:	b0c58593          	addi	a1,a1,-1268 # 80022b40 <__func__.2+0x2d8>
    8001903c:	cf89                	beqz	a5,80019056 <store_access_fault_4+0xf2>
    8001903e:	6418                	ld	a4,8(s0)
    80019040:	479d                	li	a5,7
    80019042:	0000a597          	auipc	a1,0xa
    80019046:	aee58593          	addi	a1,a1,-1298 # 80022b30 <__func__.2+0x2c8>
    8001904a:	00f70663          	beq	a4,a5,80019056 <store_access_fault_4+0xf2>
    8001904e:	0000a597          	auipc	a1,0xa
    80019052:	af258593          	addi	a1,a1,-1294 # 80022b40 <__func__.2+0x2d8>
    80019056:	0000a517          	auipc	a0,0xa
    8001905a:	b2a50513          	addi	a0,a0,-1238 # 80022b80 <__func__.2+0x318>
    8001905e:	413070ef          	jal	80020c70 <printf>
    80019062:	0002c797          	auipc	a5,0x2c
    80019066:	faf7c783          	lbu	a5,-81(a5) # 80045011 <excpt+0x1>
    8001906a:	c789                	beqz	a5,80019074 <store_access_fault_4+0x110>
    8001906c:	6418                	ld	a4,8(s0)
    8001906e:	479d                	li	a5,7
    80019070:	00f70c63          	beq	a4,a5,80019088 <store_access_fault_4+0x124>
    80019074:	0000a517          	auipc	a0,0xa
    80019078:	b1450513          	addi	a0,a0,-1260 # 80022b88 <__func__.2+0x320>
    8001907c:	3f5070ef          	jal	80020c70 <printf>
    80019080:	02900513          	li	a0,41
    80019084:	27c070ef          	jal	80020300 <putchar>
    80019088:	4529                	li	a0,10
    8001908a:	276070ef          	jal	80020300 <putchar>
    8001908e:	0002c497          	auipc	s1,0x2c
    80019092:	f834c483          	lbu	s1,-125(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019096:	0000a597          	auipc	a1,0xa
    8001909a:	aaa58593          	addi	a1,a1,-1366 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001909e:	cc91                	beqz	s1,800190ba <store_access_fault_4+0x156>
    800190a0:	6418                	ld	a4,8(s0)
    800190a2:	479d                	li	a5,7
    TEST_END();
    800190a4:	0000a597          	auipc	a1,0xa
    800190a8:	a8c58593          	addi	a1,a1,-1396 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800190ac:	00f70763          	beq	a4,a5,800190ba <store_access_fault_4+0x156>
    800190b0:	4481                	li	s1,0
    TEST_END();
    800190b2:	0000a597          	auipc	a1,0xa
    800190b6:	a8e58593          	addi	a1,a1,-1394 # 80022b40 <__func__.2+0x2d8>
    800190ba:	0000a517          	auipc	a0,0xa
    800190be:	b2e50513          	addi	a0,a0,-1234 # 80022be8 <__func__.2+0x380>
    800190c2:	3af070ef          	jal	80020c70 <printf>
    800190c6:	4511                	li	a0,4
    800190c8:	a11e70ef          	jal	80000ad8 <goto_priv>
    800190cc:	adce80ef          	jal	800013a8 <reset_state>
}
    800190d0:	60e2                	ld	ra,24(sp)
    800190d2:	6442                	ld	s0,16(sp)
    800190d4:	8526                	mv	a0,s1
    800190d6:	64a2                	ld	s1,8(sp)
    800190d8:	6105                	addi	sp,sp,32
    800190da:	8082                	ret

00000000800190dc <store_access_fault_5>:

bool store_access_fault_5(){
    800190dc:	1141                	addi	sp,sp,-16

    TEST_START();
    800190de:	00009597          	auipc	a1,0x9
    800190e2:	14a58593          	addi	a1,a1,330 # 80022228 <__func__.25>
    800190e6:	0000a517          	auipc	a0,0xa
    800190ea:	a6a50513          	addi	a0,a0,-1430 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_5(){
    800190ee:	e406                	sd	ra,8(sp)
    800190f0:	e022                	sd	s0,0(sp)
    TEST_START();
    800190f2:	37f070ef          	jal	80020c70 <printf>
    800190f6:	4529                	li	a0,10
    800190f8:	208070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800190fc:	4511                	li	a0,4
    800190fe:	9dbe70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019102:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019106:	10000793          	li	a5,256
    8001910a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001910e:	20000793          	li	a5,512
    80019112:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019116:	40000793          	li	a5,1024
    8001911a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001911e:	6785                	lui	a5,0x1
    80019120:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019124:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019128:	4785                	li	a5,1
    8001912a:	07fe                	slli	a5,a5,0x1f
    8001912c:	4705                	li	a4,1
    8001912e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019132:	08100793          	li	a5,129
    80019136:	07e2                	slli	a5,a5,0x18
    80019138:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001913c:	67a1                	lui	a5,0x8
    8001913e:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80019142:	0330000f          	fence	rw,rw
    80019146:	0002c417          	auipc	s0,0x2c
    8001914a:	eca40413          	addi	s0,s0,-310 # 80045010 <excpt>
    8001914e:	0002c797          	auipc	a5,0x2c
    80019152:	ee07bd23          	sd	zero,-262(a5) # 80045048 <excpt+0x38>
    80019156:	00e41023          	sh	a4,0(s0)
    8001915a:	0330000f          	fence	rw,rw
    8001915e:	02171793          	slli	a5,a4,0x21
    80019162:	40078793          	addi	a5,a5,1024
    80019166:	4701                	li	a4,0
    80019168:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001916c:	0002c597          	auipc	a1,0x2c
    80019170:	ea55c583          	lbu	a1,-347(a1) # 80045011 <excpt+0x1>
    80019174:	0000a517          	auipc	a0,0xa
    80019178:	cbc50513          	addi	a0,a0,-836 # 80022e30 <__func__.2+0x5c8>
    8001917c:	2f5070ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    80019180:	640c                	ld	a1,8(s0)
    80019182:	0000a517          	auipc	a0,0xa
    80019186:	cae50513          	addi	a0,a0,-850 # 80022e30 <__func__.2+0x5c8>
    8001918a:	2e7070ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001918e:	08200593          	li	a1,130
    80019192:	00010617          	auipc	a2,0x10
    80019196:	80e60613          	addi	a2,a2,-2034 # 800289a0 <__func__.2+0x6138>
    8001919a:	0000a517          	auipc	a0,0xa
    8001919e:	9ce50513          	addi	a0,a0,-1586 # 80022b68 <__func__.2+0x300>
    800191a2:	2cf070ef          	jal	80020c70 <printf>
    800191a6:	0002c797          	auipc	a5,0x2c
    800191aa:	e6b7c783          	lbu	a5,-405(a5) # 80045011 <excpt+0x1>
    800191ae:	0000a597          	auipc	a1,0xa
    800191b2:	98258593          	addi	a1,a1,-1662 # 80022b30 <__func__.2+0x2c8>
    800191b6:	c789                	beqz	a5,800191c0 <store_access_fault_5+0xe4>
    800191b8:	0000a597          	auipc	a1,0xa
    800191bc:	98858593          	addi	a1,a1,-1656 # 80022b40 <__func__.2+0x2d8>
    800191c0:	0000a517          	auipc	a0,0xa
    800191c4:	9c050513          	addi	a0,a0,-1600 # 80022b80 <__func__.2+0x318>
    800191c8:	2a9070ef          	jal	80020c70 <printf>
    800191cc:	0002c797          	auipc	a5,0x2c
    800191d0:	e457c783          	lbu	a5,-443(a5) # 80045011 <excpt+0x1>
    800191d4:	e7a1                	bnez	a5,8001921c <store_access_fault_5+0x140>
    800191d6:	4529                	li	a0,10
    800191d8:	128070ef          	jal	80020300 <putchar>
    800191dc:	0002c797          	auipc	a5,0x2c
    800191e0:	e357c783          	lbu	a5,-459(a5) # 80045011 <excpt+0x1>
    800191e4:	e795                	bnez	a5,80019210 <store_access_fault_5+0x134>
    800191e6:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800191e8:	0000a597          	auipc	a1,0xa
    800191ec:	94858593          	addi	a1,a1,-1720 # 80022b30 <__func__.2+0x2c8>
    800191f0:	0000a517          	auipc	a0,0xa
    800191f4:	9f850513          	addi	a0,a0,-1544 # 80022be8 <__func__.2+0x380>
    800191f8:	279070ef          	jal	80020c70 <printf>
    800191fc:	4511                	li	a0,4
    800191fe:	8dbe70ef          	jal	80000ad8 <goto_priv>
    80019202:	9a6e80ef          	jal	800013a8 <reset_state>
}
    80019206:	60a2                	ld	ra,8(sp)
    80019208:	8522                	mv	a0,s0
    8001920a:	6402                	ld	s0,0(sp)
    8001920c:	0141                	addi	sp,sp,16
    8001920e:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    80019210:	4401                	li	s0,0
    TEST_END();
    80019212:	0000a597          	auipc	a1,0xa
    80019216:	92e58593          	addi	a1,a1,-1746 # 80022b40 <__func__.2+0x2d8>
    8001921a:	bfd9                	j	800191f0 <store_access_fault_5+0x114>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001921c:	0000a517          	auipc	a0,0xa
    80019220:	96c50513          	addi	a0,a0,-1684 # 80022b88 <__func__.2+0x320>
    80019224:	24d070ef          	jal	80020c70 <printf>
    80019228:	02900513          	li	a0,41
    8001922c:	0d4070ef          	jal	80020300 <putchar>
    80019230:	b75d                	j	800191d6 <store_access_fault_5+0xfa>

0000000080019232 <store_access_fault_6>:


bool store_access_fault_6(){
    80019232:	1101                	addi	sp,sp,-32

    TEST_START();
    80019234:	00009597          	auipc	a1,0x9
    80019238:	00c58593          	addi	a1,a1,12 # 80022240 <__func__.24>
    8001923c:	0000a517          	auipc	a0,0xa
    80019240:	91450513          	addi	a0,a0,-1772 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_6(){
    80019244:	ec06                	sd	ra,24(sp)
    80019246:	e822                	sd	s0,16(sp)
    80019248:	e426                	sd	s1,8(sp)
    TEST_START();
    8001924a:	227070ef          	jal	80020c70 <printf>
    8001924e:	4529                	li	a0,10
    80019250:	0b0070ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019254:	4511                	li	a0,4
    80019256:	883e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001925a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001925e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019262:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019266:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001926a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001926e:	10000793          	li	a5,256
    80019272:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019276:	20000793          	li	a5,512
    8001927a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001927e:	40000793          	li	a5,1024
    80019282:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019286:	6785                	lui	a5,0x1
    80019288:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001928c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019290:	4785                	li	a5,1
    80019292:	07fe                	slli	a5,a5,0x1f
    80019294:	4485                	li	s1,1
    80019296:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001929a:	08100793          	li	a5,129
    8001929e:	07e2                	slli	a5,a5,0x18
    800192a0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800192a4:	08000793          	li	a5,128
    800192a8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800192ac:	67a1                	lui	a5,0x8
    800192ae:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    800192b2:	450d                	li	a0,3
    800192b4:	825e70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    800192b8:	0330000f          	fence	rw,rw
    800192bc:	0002c417          	auipc	s0,0x2c
    800192c0:	d5440413          	addi	s0,s0,-684 # 80045010 <excpt>
    800192c4:	0002c797          	auipc	a5,0x2c
    800192c8:	d807b223          	sd	zero,-636(a5) # 80045048 <excpt+0x38>
    800192cc:	00941023          	sh	s1,0(s0)
    800192d0:	0330000f          	fence	rw,rw
    800192d4:	02149793          	slli	a5,s1,0x21
    800192d8:	40078793          	addi	a5,a5,1024
    800192dc:	4701                	li	a4,0
    800192de:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800192e2:	08200593          	li	a1,130
    800192e6:	0000f617          	auipc	a2,0xf
    800192ea:	6f260613          	addi	a2,a2,1778 # 800289d8 <__func__.2+0x6170>
    800192ee:	0000a517          	auipc	a0,0xa
    800192f2:	87a50513          	addi	a0,a0,-1926 # 80022b68 <__func__.2+0x300>
    800192f6:	17b070ef          	jal	80020c70 <printf>
    800192fa:	0002c797          	auipc	a5,0x2c
    800192fe:	d177c783          	lbu	a5,-745(a5) # 80045011 <excpt+0x1>
    80019302:	0000a597          	auipc	a1,0xa
    80019306:	83e58593          	addi	a1,a1,-1986 # 80022b40 <__func__.2+0x2d8>
    8001930a:	cf89                	beqz	a5,80019324 <store_access_fault_6+0xf2>
    8001930c:	6418                	ld	a4,8(s0)
    8001930e:	479d                	li	a5,7
    80019310:	0000a597          	auipc	a1,0xa
    80019314:	82058593          	addi	a1,a1,-2016 # 80022b30 <__func__.2+0x2c8>
    80019318:	00f70663          	beq	a4,a5,80019324 <store_access_fault_6+0xf2>
    8001931c:	0000a597          	auipc	a1,0xa
    80019320:	82458593          	addi	a1,a1,-2012 # 80022b40 <__func__.2+0x2d8>
    80019324:	0000a517          	auipc	a0,0xa
    80019328:	85c50513          	addi	a0,a0,-1956 # 80022b80 <__func__.2+0x318>
    8001932c:	145070ef          	jal	80020c70 <printf>
    80019330:	0002c797          	auipc	a5,0x2c
    80019334:	ce17c783          	lbu	a5,-799(a5) # 80045011 <excpt+0x1>
    80019338:	c789                	beqz	a5,80019342 <store_access_fault_6+0x110>
    8001933a:	6418                	ld	a4,8(s0)
    8001933c:	479d                	li	a5,7
    8001933e:	00f70c63          	beq	a4,a5,80019356 <store_access_fault_6+0x124>
    80019342:	0000a517          	auipc	a0,0xa
    80019346:	84650513          	addi	a0,a0,-1978 # 80022b88 <__func__.2+0x320>
    8001934a:	127070ef          	jal	80020c70 <printf>
    8001934e:	02900513          	li	a0,41
    80019352:	7af060ef          	jal	80020300 <putchar>
    80019356:	4529                	li	a0,10
    80019358:	7a9060ef          	jal	80020300 <putchar>
    8001935c:	0002c497          	auipc	s1,0x2c
    80019360:	cb54c483          	lbu	s1,-843(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019364:	00009597          	auipc	a1,0x9
    80019368:	7dc58593          	addi	a1,a1,2012 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001936c:	cc91                	beqz	s1,80019388 <store_access_fault_6+0x156>
    8001936e:	6418                	ld	a4,8(s0)
    80019370:	479d                	li	a5,7
    TEST_END();
    80019372:	00009597          	auipc	a1,0x9
    80019376:	7be58593          	addi	a1,a1,1982 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001937a:	00f70763          	beq	a4,a5,80019388 <store_access_fault_6+0x156>
    8001937e:	4481                	li	s1,0
    TEST_END();
    80019380:	00009597          	auipc	a1,0x9
    80019384:	7c058593          	addi	a1,a1,1984 # 80022b40 <__func__.2+0x2d8>
    80019388:	0000a517          	auipc	a0,0xa
    8001938c:	86050513          	addi	a0,a0,-1952 # 80022be8 <__func__.2+0x380>
    80019390:	0e1070ef          	jal	80020c70 <printf>
    80019394:	4511                	li	a0,4
    80019396:	f42e70ef          	jal	80000ad8 <goto_priv>
    8001939a:	80ee80ef          	jal	800013a8 <reset_state>
}
    8001939e:	60e2                	ld	ra,24(sp)
    800193a0:	6442                	ld	s0,16(sp)
    800193a2:	8526                	mv	a0,s1
    800193a4:	64a2                	ld	s1,8(sp)
    800193a6:	6105                	addi	sp,sp,32
    800193a8:	8082                	ret

00000000800193aa <store_access_fault_7>:


bool store_access_fault_7(){
    800193aa:	1101                	addi	sp,sp,-32

    TEST_START();
    800193ac:	00009597          	auipc	a1,0x9
    800193b0:	eac58593          	addi	a1,a1,-340 # 80022258 <__func__.23>
    800193b4:	00009517          	auipc	a0,0x9
    800193b8:	79c50513          	addi	a0,a0,1948 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_7(){
    800193bc:	ec06                	sd	ra,24(sp)
    800193be:	e822                	sd	s0,16(sp)
    800193c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800193c2:	0af070ef          	jal	80020c70 <printf>
    800193c6:	4529                	li	a0,10
    800193c8:	739060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800193cc:	4511                	li	a0,4
    800193ce:	f0ae70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800193d2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800193d6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800193da:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800193de:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800193e2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800193e6:	10000793          	li	a5,256
    800193ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800193ee:	20000793          	li	a5,512
    800193f2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800193f6:	40000793          	li	a5,1024
    800193fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800193fe:	6785                	lui	a5,0x1
    80019400:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019404:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019408:	4785                	li	a5,1
    8001940a:	07fe                	slli	a5,a5,0x1f
    8001940c:	4485                	li	s1,1
    8001940e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019412:	08100793          	li	a5,129
    80019416:	07e2                	slli	a5,a5,0x18
    80019418:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001941c:	08000793          	li	a5,128
    80019420:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019424:	67a1                	lui	a5,0x8
    80019426:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001942a:	8526                	mv	a0,s1
    8001942c:	eace70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019430:	0330000f          	fence	rw,rw
    80019434:	0002c417          	auipc	s0,0x2c
    80019438:	bdc40413          	addi	s0,s0,-1060 # 80045010 <excpt>
    8001943c:	0002c797          	auipc	a5,0x2c
    80019440:	c007b623          	sd	zero,-1012(a5) # 80045048 <excpt+0x38>
    80019444:	00941023          	sh	s1,0(s0)
    80019448:	0330000f          	fence	rw,rw
    8001944c:	02149793          	slli	a5,s1,0x21
    80019450:	40078793          	addi	a5,a5,1024
    80019454:	4701                	li	a4,0
    80019456:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001945a:	08200593          	li	a1,130
    8001945e:	0000f617          	auipc	a2,0xf
    80019462:	5b260613          	addi	a2,a2,1458 # 80028a10 <__func__.2+0x61a8>
    80019466:	00009517          	auipc	a0,0x9
    8001946a:	70250513          	addi	a0,a0,1794 # 80022b68 <__func__.2+0x300>
    8001946e:	003070ef          	jal	80020c70 <printf>
    80019472:	0002c797          	auipc	a5,0x2c
    80019476:	b9f7c783          	lbu	a5,-1121(a5) # 80045011 <excpt+0x1>
    8001947a:	00009597          	auipc	a1,0x9
    8001947e:	6c658593          	addi	a1,a1,1734 # 80022b40 <__func__.2+0x2d8>
    80019482:	cf89                	beqz	a5,8001949c <store_access_fault_7+0xf2>
    80019484:	6418                	ld	a4,8(s0)
    80019486:	479d                	li	a5,7
    80019488:	00009597          	auipc	a1,0x9
    8001948c:	6a858593          	addi	a1,a1,1704 # 80022b30 <__func__.2+0x2c8>
    80019490:	00f70663          	beq	a4,a5,8001949c <store_access_fault_7+0xf2>
    80019494:	00009597          	auipc	a1,0x9
    80019498:	6ac58593          	addi	a1,a1,1708 # 80022b40 <__func__.2+0x2d8>
    8001949c:	00009517          	auipc	a0,0x9
    800194a0:	6e450513          	addi	a0,a0,1764 # 80022b80 <__func__.2+0x318>
    800194a4:	7cc070ef          	jal	80020c70 <printf>
    800194a8:	0002c797          	auipc	a5,0x2c
    800194ac:	b697c783          	lbu	a5,-1175(a5) # 80045011 <excpt+0x1>
    800194b0:	c789                	beqz	a5,800194ba <store_access_fault_7+0x110>
    800194b2:	6418                	ld	a4,8(s0)
    800194b4:	479d                	li	a5,7
    800194b6:	00f70c63          	beq	a4,a5,800194ce <store_access_fault_7+0x124>
    800194ba:	00009517          	auipc	a0,0x9
    800194be:	6ce50513          	addi	a0,a0,1742 # 80022b88 <__func__.2+0x320>
    800194c2:	7ae070ef          	jal	80020c70 <printf>
    800194c6:	02900513          	li	a0,41
    800194ca:	637060ef          	jal	80020300 <putchar>
    800194ce:	4529                	li	a0,10
    800194d0:	631060ef          	jal	80020300 <putchar>
    800194d4:	0002c497          	auipc	s1,0x2c
    800194d8:	b3d4c483          	lbu	s1,-1219(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800194dc:	00009597          	auipc	a1,0x9
    800194e0:	66458593          	addi	a1,a1,1636 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800194e4:	cc91                	beqz	s1,80019500 <store_access_fault_7+0x156>
    800194e6:	6418                	ld	a4,8(s0)
    800194e8:	479d                	li	a5,7
    TEST_END();
    800194ea:	00009597          	auipc	a1,0x9
    800194ee:	64658593          	addi	a1,a1,1606 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800194f2:	00f70763          	beq	a4,a5,80019500 <store_access_fault_7+0x156>
    800194f6:	4481                	li	s1,0
    TEST_END();
    800194f8:	00009597          	auipc	a1,0x9
    800194fc:	64858593          	addi	a1,a1,1608 # 80022b40 <__func__.2+0x2d8>
    80019500:	00009517          	auipc	a0,0x9
    80019504:	6e850513          	addi	a0,a0,1768 # 80022be8 <__func__.2+0x380>
    80019508:	768070ef          	jal	80020c70 <printf>
    8001950c:	4511                	li	a0,4
    8001950e:	dcae70ef          	jal	80000ad8 <goto_priv>
    80019512:	e97e70ef          	jal	800013a8 <reset_state>
}
    80019516:	60e2                	ld	ra,24(sp)
    80019518:	6442                	ld	s0,16(sp)
    8001951a:	8526                	mv	a0,s1
    8001951c:	64a2                	ld	s1,8(sp)
    8001951e:	6105                	addi	sp,sp,32
    80019520:	8082                	ret

0000000080019522 <store_access_fault_8>:

bool store_access_fault_8(){
    80019522:	1101                	addi	sp,sp,-32

    TEST_START();
    80019524:	00009597          	auipc	a1,0x9
    80019528:	d4c58593          	addi	a1,a1,-692 # 80022270 <__func__.22>
    8001952c:	00009517          	auipc	a0,0x9
    80019530:	62450513          	addi	a0,a0,1572 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_8(){
    80019534:	ec06                	sd	ra,24(sp)
    80019536:	e822                	sd	s0,16(sp)
    80019538:	e426                	sd	s1,8(sp)
    TEST_START();
    8001953a:	736070ef          	jal	80020c70 <printf>
    8001953e:	4529                	li	a0,10
    80019540:	5c1060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019544:	4511                	li	a0,4
    80019546:	d92e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001954a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001954e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019552:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019556:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001955a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001955e:	10000793          	li	a5,256
    80019562:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019566:	20000793          	li	a5,512
    8001956a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001956e:	40000793          	li	a5,1024
    80019572:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019576:	6785                	lui	a5,0x1
    80019578:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001957c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019580:	4785                	li	a5,1
    80019582:	07fe                	slli	a5,a5,0x1f
    80019584:	4485                	li	s1,1
    80019586:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001958a:	08100793          	li	a5,129
    8001958e:	07e2                	slli	a5,a5,0x18
    80019590:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019594:	08000793          	li	a5,128
    80019598:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001959c:	67a1                	lui	a5,0x8
    8001959e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    800195a2:	4501                	li	a0,0
    800195a4:	d34e70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    800195a8:	0330000f          	fence	rw,rw
    800195ac:	0002c417          	auipc	s0,0x2c
    800195b0:	a6440413          	addi	s0,s0,-1436 # 80045010 <excpt>
    800195b4:	0002c797          	auipc	a5,0x2c
    800195b8:	a807ba23          	sd	zero,-1388(a5) # 80045048 <excpt+0x38>
    800195bc:	00941023          	sh	s1,0(s0)
    800195c0:	0330000f          	fence	rw,rw
    800195c4:	02149793          	slli	a5,s1,0x21
    800195c8:	40078793          	addi	a5,a5,1024
    800195cc:	4701                	li	a4,0
    800195ce:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800195d2:	08200593          	li	a1,130
    800195d6:	0000f617          	auipc	a2,0xf
    800195da:	47260613          	addi	a2,a2,1138 # 80028a48 <__func__.2+0x61e0>
    800195de:	00009517          	auipc	a0,0x9
    800195e2:	58a50513          	addi	a0,a0,1418 # 80022b68 <__func__.2+0x300>
    800195e6:	68a070ef          	jal	80020c70 <printf>
    800195ea:	0002c797          	auipc	a5,0x2c
    800195ee:	a277c783          	lbu	a5,-1497(a5) # 80045011 <excpt+0x1>
    800195f2:	00009597          	auipc	a1,0x9
    800195f6:	54e58593          	addi	a1,a1,1358 # 80022b40 <__func__.2+0x2d8>
    800195fa:	cf89                	beqz	a5,80019614 <store_access_fault_8+0xf2>
    800195fc:	6418                	ld	a4,8(s0)
    800195fe:	479d                	li	a5,7
    80019600:	00009597          	auipc	a1,0x9
    80019604:	53058593          	addi	a1,a1,1328 # 80022b30 <__func__.2+0x2c8>
    80019608:	00f70663          	beq	a4,a5,80019614 <store_access_fault_8+0xf2>
    8001960c:	00009597          	auipc	a1,0x9
    80019610:	53458593          	addi	a1,a1,1332 # 80022b40 <__func__.2+0x2d8>
    80019614:	00009517          	auipc	a0,0x9
    80019618:	56c50513          	addi	a0,a0,1388 # 80022b80 <__func__.2+0x318>
    8001961c:	654070ef          	jal	80020c70 <printf>
    80019620:	0002c797          	auipc	a5,0x2c
    80019624:	9f17c783          	lbu	a5,-1551(a5) # 80045011 <excpt+0x1>
    80019628:	c789                	beqz	a5,80019632 <store_access_fault_8+0x110>
    8001962a:	6418                	ld	a4,8(s0)
    8001962c:	479d                	li	a5,7
    8001962e:	00f70c63          	beq	a4,a5,80019646 <store_access_fault_8+0x124>
    80019632:	00009517          	auipc	a0,0x9
    80019636:	55650513          	addi	a0,a0,1366 # 80022b88 <__func__.2+0x320>
    8001963a:	636070ef          	jal	80020c70 <printf>
    8001963e:	02900513          	li	a0,41
    80019642:	4bf060ef          	jal	80020300 <putchar>
    80019646:	4529                	li	a0,10
    80019648:	4b9060ef          	jal	80020300 <putchar>
    8001964c:	0002c497          	auipc	s1,0x2c
    80019650:	9c54c483          	lbu	s1,-1595(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019654:	00009597          	auipc	a1,0x9
    80019658:	4ec58593          	addi	a1,a1,1260 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001965c:	cc91                	beqz	s1,80019678 <store_access_fault_8+0x156>
    8001965e:	6418                	ld	a4,8(s0)
    80019660:	479d                	li	a5,7
    TEST_END();
    80019662:	00009597          	auipc	a1,0x9
    80019666:	4ce58593          	addi	a1,a1,1230 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001966a:	00f70763          	beq	a4,a5,80019678 <store_access_fault_8+0x156>
    8001966e:	4481                	li	s1,0
    TEST_END();
    80019670:	00009597          	auipc	a1,0x9
    80019674:	4d058593          	addi	a1,a1,1232 # 80022b40 <__func__.2+0x2d8>
    80019678:	00009517          	auipc	a0,0x9
    8001967c:	57050513          	addi	a0,a0,1392 # 80022be8 <__func__.2+0x380>
    80019680:	5f0070ef          	jal	80020c70 <printf>
    80019684:	4511                	li	a0,4
    80019686:	c52e70ef          	jal	80000ad8 <goto_priv>
    8001968a:	d1fe70ef          	jal	800013a8 <reset_state>
}
    8001968e:	60e2                	ld	ra,24(sp)
    80019690:	6442                	ld	s0,16(sp)
    80019692:	8526                	mv	a0,s1
    80019694:	64a2                	ld	s1,8(sp)
    80019696:	6105                	addi	sp,sp,32
    80019698:	8082                	ret

000000008001969a <store_access_fault_9>:

bool store_access_fault_9(){
    8001969a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001969c:	00009597          	auipc	a1,0x9
    800196a0:	bec58593          	addi	a1,a1,-1044 # 80022288 <__func__.21>
    800196a4:	00009517          	auipc	a0,0x9
    800196a8:	4ac50513          	addi	a0,a0,1196 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_9(){
    800196ac:	ec06                	sd	ra,24(sp)
    800196ae:	e822                	sd	s0,16(sp)
    800196b0:	e426                	sd	s1,8(sp)
    TEST_START();
    800196b2:	5be070ef          	jal	80020c70 <printf>
    800196b6:	4529                	li	a0,10
    800196b8:	449060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    800196bc:	4511                	li	a0,4
    800196be:	c1ae70ef          	jal	80000ad8 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800196c2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800196c6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800196ca:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800196ce:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800196d2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800196d6:	10000793          	li	a5,256
    800196da:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800196de:	20000793          	li	a5,512
    800196e2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800196e6:	40000793          	li	a5,1024
    800196ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800196ee:	6785                	lui	a5,0x1
    800196f0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800196f4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800196f8:	4785                	li	a5,1
    800196fa:	07fe                	slli	a5,a5,0x1f
    800196fc:	4485                	li	s1,1
    800196fe:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019702:	08100793          	li	a5,129
    80019706:	07e2                	slli	a5,a5,0x18
    80019708:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001970c:	08000793          	li	a5,128
    80019710:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019714:	67a1                	lui	a5,0x8
    80019716:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001971a:	4501                	li	a0,0
    8001971c:	bbce70ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019720:	0330000f          	fence	rw,rw
    80019724:	0002c417          	auipc	s0,0x2c
    80019728:	8ec40413          	addi	s0,s0,-1812 # 80045010 <excpt>
    8001972c:	0002c797          	auipc	a5,0x2c
    80019730:	9007be23          	sd	zero,-1764(a5) # 80045048 <excpt+0x38>
    80019734:	00941023          	sh	s1,0(s0)
    80019738:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001973c:	37ab77b7          	lui	a5,0x37ab7
    80019740:	02349713          	slli	a4,s1,0x23
    80019744:	078a                	slli	a5,a5,0x2
    80019746:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001974a:	1761                	addi	a4,a4,-8
    8001974c:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80019750:	08200593          	li	a1,130
    80019754:	0000f617          	auipc	a2,0xf
    80019758:	32c60613          	addi	a2,a2,812 # 80028a80 <__func__.2+0x6218>
    8001975c:	00009517          	auipc	a0,0x9
    80019760:	40c50513          	addi	a0,a0,1036 # 80022b68 <__func__.2+0x300>
    80019764:	50c070ef          	jal	80020c70 <printf>
    80019768:	0002c797          	auipc	a5,0x2c
    8001976c:	8a97c783          	lbu	a5,-1879(a5) # 80045011 <excpt+0x1>
    80019770:	00009597          	auipc	a1,0x9
    80019774:	3d058593          	addi	a1,a1,976 # 80022b40 <__func__.2+0x2d8>
    80019778:	cf89                	beqz	a5,80019792 <store_access_fault_9+0xf8>
    8001977a:	6418                	ld	a4,8(s0)
    8001977c:	479d                	li	a5,7
    8001977e:	00009597          	auipc	a1,0x9
    80019782:	3b258593          	addi	a1,a1,946 # 80022b30 <__func__.2+0x2c8>
    80019786:	00f70663          	beq	a4,a5,80019792 <store_access_fault_9+0xf8>
    8001978a:	00009597          	auipc	a1,0x9
    8001978e:	3b658593          	addi	a1,a1,950 # 80022b40 <__func__.2+0x2d8>
    80019792:	00009517          	auipc	a0,0x9
    80019796:	3ee50513          	addi	a0,a0,1006 # 80022b80 <__func__.2+0x318>
    8001979a:	4d6070ef          	jal	80020c70 <printf>
    8001979e:	0002c797          	auipc	a5,0x2c
    800197a2:	8737c783          	lbu	a5,-1933(a5) # 80045011 <excpt+0x1>
    800197a6:	c789                	beqz	a5,800197b0 <store_access_fault_9+0x116>
    800197a8:	6418                	ld	a4,8(s0)
    800197aa:	479d                	li	a5,7
    800197ac:	00f70c63          	beq	a4,a5,800197c4 <store_access_fault_9+0x12a>
    800197b0:	00009517          	auipc	a0,0x9
    800197b4:	3d850513          	addi	a0,a0,984 # 80022b88 <__func__.2+0x320>
    800197b8:	4b8070ef          	jal	80020c70 <printf>
    800197bc:	02900513          	li	a0,41
    800197c0:	341060ef          	jal	80020300 <putchar>
    800197c4:	4529                	li	a0,10
    800197c6:	33b060ef          	jal	80020300 <putchar>
    800197ca:	0002c497          	auipc	s1,0x2c
    800197ce:	8474c483          	lbu	s1,-1977(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800197d2:	00009597          	auipc	a1,0x9
    800197d6:	36e58593          	addi	a1,a1,878 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    800197da:	cc91                	beqz	s1,800197f6 <store_access_fault_9+0x15c>
    800197dc:	6418                	ld	a4,8(s0)
    800197de:	479d                	li	a5,7
    TEST_END();
    800197e0:	00009597          	auipc	a1,0x9
    800197e4:	35058593          	addi	a1,a1,848 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    800197e8:	00f70763          	beq	a4,a5,800197f6 <store_access_fault_9+0x15c>
    800197ec:	4481                	li	s1,0
    TEST_END();
    800197ee:	00009597          	auipc	a1,0x9
    800197f2:	35258593          	addi	a1,a1,850 # 80022b40 <__func__.2+0x2d8>
    800197f6:	00009517          	auipc	a0,0x9
    800197fa:	3f250513          	addi	a0,a0,1010 # 80022be8 <__func__.2+0x380>
    800197fe:	472070ef          	jal	80020c70 <printf>
    80019802:	4511                	li	a0,4
    80019804:	ad4e70ef          	jal	80000ad8 <goto_priv>
    80019808:	ba1e70ef          	jal	800013a8 <reset_state>
}
    8001980c:	60e2                	ld	ra,24(sp)
    8001980e:	6442                	ld	s0,16(sp)
    80019810:	8526                	mv	a0,s1
    80019812:	64a2                	ld	s1,8(sp)
    80019814:	6105                	addi	sp,sp,32
    80019816:	8082                	ret

0000000080019818 <store_access_fault_10>:


bool store_access_fault_10(){
    80019818:	1101                	addi	sp,sp,-32

    TEST_START();
    8001981a:	00009597          	auipc	a1,0x9
    8001981e:	a8658593          	addi	a1,a1,-1402 # 800222a0 <__func__.20>
    80019822:	00009517          	auipc	a0,0x9
    80019826:	32e50513          	addi	a0,a0,814 # 80022b50 <__func__.2+0x2e8>
bool store_access_fault_10(){
    8001982a:	ec06                	sd	ra,24(sp)
    8001982c:	e822                	sd	s0,16(sp)
    8001982e:	e426                	sd	s1,8(sp)
    TEST_START();
    80019830:	440070ef          	jal	80020c70 <printf>
    80019834:	4529                	li	a0,10
    80019836:	2cb060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001983a:	4511                	li	a0,4
    8001983c:	a9ce70ef          	jal	80000ad8 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019840:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019844:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019848:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001984c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019850:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019854:	4785                	li	a5,1
    80019856:	07fe                	slli	a5,a5,0x1f
    80019858:	4705                	li	a4,1
    8001985a:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001985e:	08000793          	li	a5,128
    80019862:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();    
    80019866:	0330000f          	fence	rw,rw
    8001986a:	0002b417          	auipc	s0,0x2b
    8001986e:	7a640413          	addi	s0,s0,1958 # 80045010 <excpt>
    80019872:	0002b797          	auipc	a5,0x2b
    80019876:	7c07bb23          	sd	zero,2006(a5) # 80045048 <excpt+0x38>
    8001987a:	00e41023          	sh	a4,0(s0)
    8001987e:	0330000f          	fence	rw,rw
    80019882:	37ab77b7          	lui	a5,0x37ab7
    80019886:	078a                	slli	a5,a5,0x2
    80019888:	00803737          	lui	a4,0x803
    8001988c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019890:	072a                	slli	a4,a4,0xa
    80019892:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80019896:	08200593          	li	a1,130
    8001989a:	0000f617          	auipc	a2,0xf
    8001989e:	25660613          	addi	a2,a2,598 # 80028af0 <__func__.2+0x6288>
    800198a2:	00009517          	auipc	a0,0x9
    800198a6:	2c650513          	addi	a0,a0,710 # 80022b68 <__func__.2+0x300>
    800198aa:	3c6070ef          	jal	80020c70 <printf>
    800198ae:	0002b797          	auipc	a5,0x2b
    800198b2:	7637c783          	lbu	a5,1891(a5) # 80045011 <excpt+0x1>
    800198b6:	00009597          	auipc	a1,0x9
    800198ba:	28a58593          	addi	a1,a1,650 # 80022b40 <__func__.2+0x2d8>
    800198be:	cf89                	beqz	a5,800198d8 <store_access_fault_10+0xc0>
    800198c0:	6418                	ld	a4,8(s0)
    800198c2:	479d                	li	a5,7
    800198c4:	00009597          	auipc	a1,0x9
    800198c8:	26c58593          	addi	a1,a1,620 # 80022b30 <__func__.2+0x2c8>
    800198cc:	00f70663          	beq	a4,a5,800198d8 <store_access_fault_10+0xc0>
    800198d0:	00009597          	auipc	a1,0x9
    800198d4:	27058593          	addi	a1,a1,624 # 80022b40 <__func__.2+0x2d8>
    800198d8:	00009517          	auipc	a0,0x9
    800198dc:	2a850513          	addi	a0,a0,680 # 80022b80 <__func__.2+0x318>
    800198e0:	390070ef          	jal	80020c70 <printf>
    800198e4:	0002b797          	auipc	a5,0x2b
    800198e8:	72d7c783          	lbu	a5,1837(a5) # 80045011 <excpt+0x1>
    800198ec:	c789                	beqz	a5,800198f6 <store_access_fault_10+0xde>
    800198ee:	6418                	ld	a4,8(s0)
    800198f0:	479d                	li	a5,7
    800198f2:	00f70c63          	beq	a4,a5,8001990a <store_access_fault_10+0xf2>
    800198f6:	00009517          	auipc	a0,0x9
    800198fa:	29250513          	addi	a0,a0,658 # 80022b88 <__func__.2+0x320>
    800198fe:	372070ef          	jal	80020c70 <printf>
    80019902:	02900513          	li	a0,41
    80019906:	1fb060ef          	jal	80020300 <putchar>
    8001990a:	4529                	li	a0,10
    8001990c:	1f5060ef          	jal	80020300 <putchar>
    80019910:	0002b497          	auipc	s1,0x2b
    80019914:	7014c483          	lbu	s1,1793(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019918:	00009597          	auipc	a1,0x9
    8001991c:	22858593          	addi	a1,a1,552 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80019920:	cc91                	beqz	s1,8001993c <store_access_fault_10+0x124>
    80019922:	6418                	ld	a4,8(s0)
    80019924:	479d                	li	a5,7
    TEST_END();
    80019926:	00009597          	auipc	a1,0x9
    8001992a:	20a58593          	addi	a1,a1,522 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001992e:	00f70763          	beq	a4,a5,8001993c <store_access_fault_10+0x124>
    80019932:	4481                	li	s1,0
    TEST_END();
    80019934:	00009597          	auipc	a1,0x9
    80019938:	20c58593          	addi	a1,a1,524 # 80022b40 <__func__.2+0x2d8>
    8001993c:	00009517          	auipc	a0,0x9
    80019940:	2ac50513          	addi	a0,a0,684 # 80022be8 <__func__.2+0x380>
    80019944:	32c070ef          	jal	80020c70 <printf>
    80019948:	4511                	li	a0,4
    8001994a:	98ee70ef          	jal	80000ad8 <goto_priv>
    8001994e:	a5be70ef          	jal	800013a8 <reset_state>
}
    80019952:	60e2                	ld	ra,24(sp)
    80019954:	6442                	ld	s0,16(sp)
    80019956:	8526                	mv	a0,s1
    80019958:	64a2                	ld	s1,8(sp)
    8001995a:	6105                	addi	sp,sp,32
    8001995c:	8082                	ret

000000008001995e <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001995e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019960:	00009597          	auipc	a1,0x9
    80019964:	95858593          	addi	a1,a1,-1704 # 800222b8 <__func__.19>
    80019968:	00009517          	auipc	a0,0x9
    8001996c:	1e850513          	addi	a0,a0,488 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_1(){
    80019970:	ec06                	sd	ra,24(sp)
    80019972:	e822                	sd	s0,16(sp)
    80019974:	e426                	sd	s1,8(sp)
    TEST_START();
    80019976:	2fa070ef          	jal	80020c70 <printf>
    8001997a:	4529                	li	a0,10
    8001997c:	185060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019980:	4511                	li	a0,4
    80019982:	956e70ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019986:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001998a:	10000793          	li	a5,256
    8001998e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019992:	20000793          	li	a5,512
    80019996:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001999a:	40000793          	li	a5,1024
    8001999e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800199a2:	6785                	lui	a5,0x1
    800199a4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800199a8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800199ac:	4785                	li	a5,1
    800199ae:	07fe                	slli	a5,a5,0x1f
    800199b0:	4705                	li	a4,1
    800199b2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800199b6:	08100793          	li	a5,129
    800199ba:	07e2                	slli	a5,a5,0x18
    800199bc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800199c0:	67a1                	lui	a5,0x8
    800199c2:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    800199c6:	0330000f          	fence	rw,rw
    800199ca:	0002b417          	auipc	s0,0x2b
    800199ce:	64640413          	addi	s0,s0,1606 # 80045010 <excpt>
    800199d2:	0002b797          	auipc	a5,0x2b
    800199d6:	6607bb23          	sd	zero,1654(a5) # 80045048 <excpt+0x38>
    800199da:	00e41023          	sh	a4,0(s0)
    800199de:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    800199e2:	37ab77b7          	lui	a5,0x37ab7
    800199e6:	078a                	slli	a5,a5,0x2
    800199e8:	1706                	slli	a4,a4,0x21
    800199ea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800199ee:	40070713          	addi	a4,a4,1024
    800199f2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    800199f6:	0002b597          	auipc	a1,0x2b
    800199fa:	61b5c583          	lbu	a1,1563(a1) # 80045011 <excpt+0x1>
    800199fe:	00009517          	auipc	a0,0x9
    80019a02:	43250513          	addi	a0,a0,1074 # 80022e30 <__func__.2+0x5c8>
    80019a06:	26a070ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    80019a0a:	640c                	ld	a1,8(s0)
    80019a0c:	00009517          	auipc	a0,0x9
    80019a10:	42450513          	addi	a0,a0,1060 # 80022e30 <__func__.2+0x5c8>
    80019a14:	25c070ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019a18:	08200593          	li	a1,130
    80019a1c:	0000f617          	auipc	a2,0xf
    80019a20:	13460613          	addi	a2,a2,308 # 80028b50 <__func__.2+0x62e8>
    80019a24:	00009517          	auipc	a0,0x9
    80019a28:	14450513          	addi	a0,a0,324 # 80022b68 <__func__.2+0x300>
    80019a2c:	244070ef          	jal	80020c70 <printf>
    80019a30:	0002b797          	auipc	a5,0x2b
    80019a34:	5e17c783          	lbu	a5,1505(a5) # 80045011 <excpt+0x1>
    80019a38:	00009597          	auipc	a1,0x9
    80019a3c:	10858593          	addi	a1,a1,264 # 80022b40 <__func__.2+0x2d8>
    80019a40:	cf89                	beqz	a5,80019a5a <amo_access_fault_1+0xfc>
    80019a42:	6418                	ld	a4,8(s0)
    80019a44:	479d                	li	a5,7
    80019a46:	00009597          	auipc	a1,0x9
    80019a4a:	0ea58593          	addi	a1,a1,234 # 80022b30 <__func__.2+0x2c8>
    80019a4e:	00f70663          	beq	a4,a5,80019a5a <amo_access_fault_1+0xfc>
    80019a52:	00009597          	auipc	a1,0x9
    80019a56:	0ee58593          	addi	a1,a1,238 # 80022b40 <__func__.2+0x2d8>
    80019a5a:	00009517          	auipc	a0,0x9
    80019a5e:	12650513          	addi	a0,a0,294 # 80022b80 <__func__.2+0x318>
    80019a62:	20e070ef          	jal	80020c70 <printf>
    80019a66:	0002b797          	auipc	a5,0x2b
    80019a6a:	5ab7c783          	lbu	a5,1451(a5) # 80045011 <excpt+0x1>
    80019a6e:	c789                	beqz	a5,80019a78 <amo_access_fault_1+0x11a>
    80019a70:	6418                	ld	a4,8(s0)
    80019a72:	479d                	li	a5,7
    80019a74:	00f70c63          	beq	a4,a5,80019a8c <amo_access_fault_1+0x12e>
    80019a78:	00009517          	auipc	a0,0x9
    80019a7c:	11050513          	addi	a0,a0,272 # 80022b88 <__func__.2+0x320>
    80019a80:	1f0070ef          	jal	80020c70 <printf>
    80019a84:	02900513          	li	a0,41
    80019a88:	079060ef          	jal	80020300 <putchar>
    80019a8c:	4529                	li	a0,10
    80019a8e:	073060ef          	jal	80020300 <putchar>
    80019a92:	0002b497          	auipc	s1,0x2b
    80019a96:	57f4c483          	lbu	s1,1407(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019a9a:	00009597          	auipc	a1,0x9
    80019a9e:	0a658593          	addi	a1,a1,166 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019aa2:	cc91                	beqz	s1,80019abe <amo_access_fault_1+0x160>
    80019aa4:	6418                	ld	a4,8(s0)
    80019aa6:	479d                	li	a5,7
    TEST_END();
    80019aa8:	00009597          	auipc	a1,0x9
    80019aac:	08858593          	addi	a1,a1,136 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019ab0:	00f70763          	beq	a4,a5,80019abe <amo_access_fault_1+0x160>
    80019ab4:	4481                	li	s1,0
    TEST_END();
    80019ab6:	00009597          	auipc	a1,0x9
    80019aba:	08a58593          	addi	a1,a1,138 # 80022b40 <__func__.2+0x2d8>
    80019abe:	00009517          	auipc	a0,0x9
    80019ac2:	12a50513          	addi	a0,a0,298 # 80022be8 <__func__.2+0x380>
    80019ac6:	1aa070ef          	jal	80020c70 <printf>
    80019aca:	4511                	li	a0,4
    80019acc:	80ce70ef          	jal	80000ad8 <goto_priv>
    80019ad0:	8d9e70ef          	jal	800013a8 <reset_state>
}
    80019ad4:	60e2                	ld	ra,24(sp)
    80019ad6:	6442                	ld	s0,16(sp)
    80019ad8:	8526                	mv	a0,s1
    80019ada:	64a2                	ld	s1,8(sp)
    80019adc:	6105                	addi	sp,sp,32
    80019ade:	8082                	ret

0000000080019ae0 <amo_access_fault_2>:

bool amo_access_fault_2(){
    80019ae0:	1101                	addi	sp,sp,-32

    TEST_START();
    80019ae2:	00008597          	auipc	a1,0x8
    80019ae6:	7ee58593          	addi	a1,a1,2030 # 800222d0 <__func__.18>
    80019aea:	00009517          	auipc	a0,0x9
    80019aee:	06650513          	addi	a0,a0,102 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_2(){
    80019af2:	ec06                	sd	ra,24(sp)
    80019af4:	e822                	sd	s0,16(sp)
    80019af6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019af8:	178070ef          	jal	80020c70 <printf>
    80019afc:	4529                	li	a0,10
    80019afe:	003060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019b02:	4511                	li	a0,4
    80019b04:	fd5e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019b08:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019b0c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019b10:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019b14:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019b18:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019b1c:	10000793          	li	a5,256
    80019b20:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019b24:	20000793          	li	a5,512
    80019b28:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019b2c:	40000793          	li	a5,1024
    80019b30:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019b34:	6785                	lui	a5,0x1
    80019b36:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019b3a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019b3e:	4785                	li	a5,1
    80019b40:	07fe                	slli	a5,a5,0x1f
    80019b42:	4485                	li	s1,1
    80019b44:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019b48:	08100793          	li	a5,129
    80019b4c:	07e2                	slli	a5,a5,0x18
    80019b4e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019b52:	08000793          	li	a5,128
    80019b56:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019b5a:	67a1                	lui	a5,0x8
    80019b5c:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    80019b60:	450d                	li	a0,3
    80019b62:	f77e60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019b66:	0330000f          	fence	rw,rw
    80019b6a:	0002b417          	auipc	s0,0x2b
    80019b6e:	4a640413          	addi	s0,s0,1190 # 80045010 <excpt>
    80019b72:	0002b797          	auipc	a5,0x2b
    80019b76:	4c07bb23          	sd	zero,1238(a5) # 80045048 <excpt+0x38>
    80019b7a:	00941023          	sh	s1,0(s0)
    80019b7e:	0330000f          	fence	rw,rw
    80019b82:	37ab77b7          	lui	a5,0x37ab7
    80019b86:	02149713          	slli	a4,s1,0x21
    80019b8a:	078a                	slli	a5,a5,0x2
    80019b8c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019b90:	40070713          	addi	a4,a4,1024
    80019b94:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019b98:	08200593          	li	a1,130
    80019b9c:	0000f617          	auipc	a2,0xf
    80019ba0:	ff460613          	addi	a2,a2,-12 # 80028b90 <__func__.2+0x6328>
    80019ba4:	00009517          	auipc	a0,0x9
    80019ba8:	fc450513          	addi	a0,a0,-60 # 80022b68 <__func__.2+0x300>
    80019bac:	0c4070ef          	jal	80020c70 <printf>
    80019bb0:	0002b797          	auipc	a5,0x2b
    80019bb4:	4617c783          	lbu	a5,1121(a5) # 80045011 <excpt+0x1>
    80019bb8:	00009597          	auipc	a1,0x9
    80019bbc:	f8858593          	addi	a1,a1,-120 # 80022b40 <__func__.2+0x2d8>
    80019bc0:	cf89                	beqz	a5,80019bda <amo_access_fault_2+0xfa>
    80019bc2:	6418                	ld	a4,8(s0)
    80019bc4:	479d                	li	a5,7
    80019bc6:	00009597          	auipc	a1,0x9
    80019bca:	f6a58593          	addi	a1,a1,-150 # 80022b30 <__func__.2+0x2c8>
    80019bce:	00f70663          	beq	a4,a5,80019bda <amo_access_fault_2+0xfa>
    80019bd2:	00009597          	auipc	a1,0x9
    80019bd6:	f6e58593          	addi	a1,a1,-146 # 80022b40 <__func__.2+0x2d8>
    80019bda:	00009517          	auipc	a0,0x9
    80019bde:	fa650513          	addi	a0,a0,-90 # 80022b80 <__func__.2+0x318>
    80019be2:	08e070ef          	jal	80020c70 <printf>
    80019be6:	0002b797          	auipc	a5,0x2b
    80019bea:	42b7c783          	lbu	a5,1067(a5) # 80045011 <excpt+0x1>
    80019bee:	c789                	beqz	a5,80019bf8 <amo_access_fault_2+0x118>
    80019bf0:	6418                	ld	a4,8(s0)
    80019bf2:	479d                	li	a5,7
    80019bf4:	00f70c63          	beq	a4,a5,80019c0c <amo_access_fault_2+0x12c>
    80019bf8:	00009517          	auipc	a0,0x9
    80019bfc:	f9050513          	addi	a0,a0,-112 # 80022b88 <__func__.2+0x320>
    80019c00:	070070ef          	jal	80020c70 <printf>
    80019c04:	02900513          	li	a0,41
    80019c08:	6f8060ef          	jal	80020300 <putchar>
    80019c0c:	4529                	li	a0,10
    80019c0e:	6f2060ef          	jal	80020300 <putchar>
    80019c12:	0002b497          	auipc	s1,0x2b
    80019c16:	3ff4c483          	lbu	s1,1023(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019c1a:	00009597          	auipc	a1,0x9
    80019c1e:	f2658593          	addi	a1,a1,-218 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019c22:	cc91                	beqz	s1,80019c3e <amo_access_fault_2+0x15e>
    80019c24:	6418                	ld	a4,8(s0)
    80019c26:	479d                	li	a5,7
    TEST_END();
    80019c28:	00009597          	auipc	a1,0x9
    80019c2c:	f0858593          	addi	a1,a1,-248 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019c30:	00f70763          	beq	a4,a5,80019c3e <amo_access_fault_2+0x15e>
    80019c34:	4481                	li	s1,0
    TEST_END();
    80019c36:	00009597          	auipc	a1,0x9
    80019c3a:	f0a58593          	addi	a1,a1,-246 # 80022b40 <__func__.2+0x2d8>
    80019c3e:	00009517          	auipc	a0,0x9
    80019c42:	faa50513          	addi	a0,a0,-86 # 80022be8 <__func__.2+0x380>
    80019c46:	02a070ef          	jal	80020c70 <printf>
    80019c4a:	4511                	li	a0,4
    80019c4c:	e8de60ef          	jal	80000ad8 <goto_priv>
    80019c50:	f58e70ef          	jal	800013a8 <reset_state>
}
    80019c54:	60e2                	ld	ra,24(sp)
    80019c56:	6442                	ld	s0,16(sp)
    80019c58:	8526                	mv	a0,s1
    80019c5a:	64a2                	ld	s1,8(sp)
    80019c5c:	6105                	addi	sp,sp,32
    80019c5e:	8082                	ret

0000000080019c60 <amo_access_fault_3>:


bool amo_access_fault_3(){
    80019c60:	1101                	addi	sp,sp,-32

    TEST_START();
    80019c62:	00008597          	auipc	a1,0x8
    80019c66:	68658593          	addi	a1,a1,1670 # 800222e8 <__func__.17>
    80019c6a:	00009517          	auipc	a0,0x9
    80019c6e:	ee650513          	addi	a0,a0,-282 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_3(){
    80019c72:	ec06                	sd	ra,24(sp)
    80019c74:	e822                	sd	s0,16(sp)
    80019c76:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c78:	7f9060ef          	jal	80020c70 <printf>
    80019c7c:	4529                	li	a0,10
    80019c7e:	682060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019c82:	4511                	li	a0,4
    80019c84:	e55e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019c88:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019c8c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019c90:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019c94:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019c98:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019c9c:	10000793          	li	a5,256
    80019ca0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019ca4:	20000793          	li	a5,512
    80019ca8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019cac:	40000793          	li	a5,1024
    80019cb0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019cb4:	6785                	lui	a5,0x1
    80019cb6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019cba:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019cbe:	4785                	li	a5,1
    80019cc0:	07fe                	slli	a5,a5,0x1f
    80019cc2:	4485                	li	s1,1
    80019cc4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019cc8:	08100793          	li	a5,129
    80019ccc:	07e2                	slli	a5,a5,0x18
    80019cce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019cd2:	08000793          	li	a5,128
    80019cd6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019cda:	67a1                	lui	a5,0x8
    80019cdc:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    80019ce0:	8526                	mv	a0,s1
    80019ce2:	df7e60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019ce6:	0330000f          	fence	rw,rw
    80019cea:	0002b417          	auipc	s0,0x2b
    80019cee:	32640413          	addi	s0,s0,806 # 80045010 <excpt>
    80019cf2:	0002b797          	auipc	a5,0x2b
    80019cf6:	3407bb23          	sd	zero,854(a5) # 80045048 <excpt+0x38>
    80019cfa:	00941023          	sh	s1,0(s0)
    80019cfe:	0330000f          	fence	rw,rw
    80019d02:	37ab77b7          	lui	a5,0x37ab7
    80019d06:	02149713          	slli	a4,s1,0x21
    80019d0a:	078a                	slli	a5,a5,0x2
    80019d0c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019d10:	40070713          	addi	a4,a4,1024
    80019d14:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019d18:	08200593          	li	a1,130
    80019d1c:	0000f617          	auipc	a2,0xf
    80019d20:	eb460613          	addi	a2,a2,-332 # 80028bd0 <__func__.2+0x6368>
    80019d24:	00009517          	auipc	a0,0x9
    80019d28:	e4450513          	addi	a0,a0,-444 # 80022b68 <__func__.2+0x300>
    80019d2c:	745060ef          	jal	80020c70 <printf>
    80019d30:	0002b797          	auipc	a5,0x2b
    80019d34:	2e17c783          	lbu	a5,737(a5) # 80045011 <excpt+0x1>
    80019d38:	00009597          	auipc	a1,0x9
    80019d3c:	e0858593          	addi	a1,a1,-504 # 80022b40 <__func__.2+0x2d8>
    80019d40:	cf89                	beqz	a5,80019d5a <amo_access_fault_3+0xfa>
    80019d42:	6418                	ld	a4,8(s0)
    80019d44:	479d                	li	a5,7
    80019d46:	00009597          	auipc	a1,0x9
    80019d4a:	dea58593          	addi	a1,a1,-534 # 80022b30 <__func__.2+0x2c8>
    80019d4e:	00f70663          	beq	a4,a5,80019d5a <amo_access_fault_3+0xfa>
    80019d52:	00009597          	auipc	a1,0x9
    80019d56:	dee58593          	addi	a1,a1,-530 # 80022b40 <__func__.2+0x2d8>
    80019d5a:	00009517          	auipc	a0,0x9
    80019d5e:	e2650513          	addi	a0,a0,-474 # 80022b80 <__func__.2+0x318>
    80019d62:	70f060ef          	jal	80020c70 <printf>
    80019d66:	0002b797          	auipc	a5,0x2b
    80019d6a:	2ab7c783          	lbu	a5,683(a5) # 80045011 <excpt+0x1>
    80019d6e:	c789                	beqz	a5,80019d78 <amo_access_fault_3+0x118>
    80019d70:	6418                	ld	a4,8(s0)
    80019d72:	479d                	li	a5,7
    80019d74:	00f70c63          	beq	a4,a5,80019d8c <amo_access_fault_3+0x12c>
    80019d78:	00009517          	auipc	a0,0x9
    80019d7c:	e1050513          	addi	a0,a0,-496 # 80022b88 <__func__.2+0x320>
    80019d80:	6f1060ef          	jal	80020c70 <printf>
    80019d84:	02900513          	li	a0,41
    80019d88:	578060ef          	jal	80020300 <putchar>
    80019d8c:	4529                	li	a0,10
    80019d8e:	572060ef          	jal	80020300 <putchar>
    80019d92:	0002b497          	auipc	s1,0x2b
    80019d96:	27f4c483          	lbu	s1,639(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019d9a:	00009597          	auipc	a1,0x9
    80019d9e:	da658593          	addi	a1,a1,-602 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019da2:	cc91                	beqz	s1,80019dbe <amo_access_fault_3+0x15e>
    80019da4:	6418                	ld	a4,8(s0)
    80019da6:	479d                	li	a5,7
    TEST_END();
    80019da8:	00009597          	auipc	a1,0x9
    80019dac:	d8858593          	addi	a1,a1,-632 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019db0:	00f70763          	beq	a4,a5,80019dbe <amo_access_fault_3+0x15e>
    80019db4:	4481                	li	s1,0
    TEST_END();
    80019db6:	00009597          	auipc	a1,0x9
    80019dba:	d8a58593          	addi	a1,a1,-630 # 80022b40 <__func__.2+0x2d8>
    80019dbe:	00009517          	auipc	a0,0x9
    80019dc2:	e2a50513          	addi	a0,a0,-470 # 80022be8 <__func__.2+0x380>
    80019dc6:	6ab060ef          	jal	80020c70 <printf>
    80019dca:	4511                	li	a0,4
    80019dcc:	d0de60ef          	jal	80000ad8 <goto_priv>
    80019dd0:	dd8e70ef          	jal	800013a8 <reset_state>
}
    80019dd4:	60e2                	ld	ra,24(sp)
    80019dd6:	6442                	ld	s0,16(sp)
    80019dd8:	8526                	mv	a0,s1
    80019dda:	64a2                	ld	s1,8(sp)
    80019ddc:	6105                	addi	sp,sp,32
    80019dde:	8082                	ret

0000000080019de0 <amo_access_fault_4>:

bool amo_access_fault_4(){
    80019de0:	1101                	addi	sp,sp,-32

    TEST_START();
    80019de2:	00008597          	auipc	a1,0x8
    80019de6:	51e58593          	addi	a1,a1,1310 # 80022300 <__func__.16>
    80019dea:	00009517          	auipc	a0,0x9
    80019dee:	d6650513          	addi	a0,a0,-666 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_4(){
    80019df2:	ec06                	sd	ra,24(sp)
    80019df4:	e822                	sd	s0,16(sp)
    80019df6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019df8:	679060ef          	jal	80020c70 <printf>
    80019dfc:	4529                	li	a0,10
    80019dfe:	502060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019e02:	4511                	li	a0,4
    80019e04:	cd5e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019e08:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019e0c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019e10:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019e14:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019e18:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019e1c:	10000793          	li	a5,256
    80019e20:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019e24:	20000793          	li	a5,512
    80019e28:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019e2c:	40000793          	li	a5,1024
    80019e30:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019e34:	6785                	lui	a5,0x1
    80019e36:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019e3a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019e3e:	4785                	li	a5,1
    80019e40:	07fe                	slli	a5,a5,0x1f
    80019e42:	4485                	li	s1,1
    80019e44:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019e48:	08100793          	li	a5,129
    80019e4c:	07e2                	slli	a5,a5,0x18
    80019e4e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019e52:	08000793          	li	a5,128
    80019e56:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019e5a:	67a1                	lui	a5,0x8
    80019e5c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    80019e60:	4501                	li	a0,0
    80019e62:	c77e60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019e66:	0330000f          	fence	rw,rw
    80019e6a:	0002b417          	auipc	s0,0x2b
    80019e6e:	1a640413          	addi	s0,s0,422 # 80045010 <excpt>
    80019e72:	0002b797          	auipc	a5,0x2b
    80019e76:	1c07bb23          	sd	zero,470(a5) # 80045048 <excpt+0x38>
    80019e7a:	00941023          	sh	s1,0(s0)
    80019e7e:	0330000f          	fence	rw,rw
    80019e82:	37ab77b7          	lui	a5,0x37ab7
    80019e86:	02149713          	slli	a4,s1,0x21
    80019e8a:	078a                	slli	a5,a5,0x2
    80019e8c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019e90:	40070713          	addi	a4,a4,1024
    80019e94:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019e98:	08200593          	li	a1,130
    80019e9c:	0000f617          	auipc	a2,0xf
    80019ea0:	d7460613          	addi	a2,a2,-652 # 80028c10 <__func__.2+0x63a8>
    80019ea4:	00009517          	auipc	a0,0x9
    80019ea8:	cc450513          	addi	a0,a0,-828 # 80022b68 <__func__.2+0x300>
    80019eac:	5c5060ef          	jal	80020c70 <printf>
    80019eb0:	0002b797          	auipc	a5,0x2b
    80019eb4:	1617c783          	lbu	a5,353(a5) # 80045011 <excpt+0x1>
    80019eb8:	00009597          	auipc	a1,0x9
    80019ebc:	c8858593          	addi	a1,a1,-888 # 80022b40 <__func__.2+0x2d8>
    80019ec0:	cf89                	beqz	a5,80019eda <amo_access_fault_4+0xfa>
    80019ec2:	6418                	ld	a4,8(s0)
    80019ec4:	479d                	li	a5,7
    80019ec6:	00009597          	auipc	a1,0x9
    80019eca:	c6a58593          	addi	a1,a1,-918 # 80022b30 <__func__.2+0x2c8>
    80019ece:	00f70663          	beq	a4,a5,80019eda <amo_access_fault_4+0xfa>
    80019ed2:	00009597          	auipc	a1,0x9
    80019ed6:	c6e58593          	addi	a1,a1,-914 # 80022b40 <__func__.2+0x2d8>
    80019eda:	00009517          	auipc	a0,0x9
    80019ede:	ca650513          	addi	a0,a0,-858 # 80022b80 <__func__.2+0x318>
    80019ee2:	58f060ef          	jal	80020c70 <printf>
    80019ee6:	0002b797          	auipc	a5,0x2b
    80019eea:	12b7c783          	lbu	a5,299(a5) # 80045011 <excpt+0x1>
    80019eee:	c789                	beqz	a5,80019ef8 <amo_access_fault_4+0x118>
    80019ef0:	6418                	ld	a4,8(s0)
    80019ef2:	479d                	li	a5,7
    80019ef4:	00f70c63          	beq	a4,a5,80019f0c <amo_access_fault_4+0x12c>
    80019ef8:	00009517          	auipc	a0,0x9
    80019efc:	c9050513          	addi	a0,a0,-880 # 80022b88 <__func__.2+0x320>
    80019f00:	571060ef          	jal	80020c70 <printf>
    80019f04:	02900513          	li	a0,41
    80019f08:	3f8060ef          	jal	80020300 <putchar>
    80019f0c:	4529                	li	a0,10
    80019f0e:	3f2060ef          	jal	80020300 <putchar>
    80019f12:	0002b497          	auipc	s1,0x2b
    80019f16:	0ff4c483          	lbu	s1,255(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80019f1a:	00009597          	auipc	a1,0x9
    80019f1e:	c2658593          	addi	a1,a1,-986 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019f22:	cc91                	beqz	s1,80019f3e <amo_access_fault_4+0x15e>
    80019f24:	6418                	ld	a4,8(s0)
    80019f26:	479d                	li	a5,7
    TEST_END();
    80019f28:	00009597          	auipc	a1,0x9
    80019f2c:	c0858593          	addi	a1,a1,-1016 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80019f30:	00f70763          	beq	a4,a5,80019f3e <amo_access_fault_4+0x15e>
    80019f34:	4481                	li	s1,0
    TEST_END();
    80019f36:	00009597          	auipc	a1,0x9
    80019f3a:	c0a58593          	addi	a1,a1,-1014 # 80022b40 <__func__.2+0x2d8>
    80019f3e:	00009517          	auipc	a0,0x9
    80019f42:	caa50513          	addi	a0,a0,-854 # 80022be8 <__func__.2+0x380>
    80019f46:	52b060ef          	jal	80020c70 <printf>
    80019f4a:	4511                	li	a0,4
    80019f4c:	b8de60ef          	jal	80000ad8 <goto_priv>
    80019f50:	c58e70ef          	jal	800013a8 <reset_state>
}
    80019f54:	60e2                	ld	ra,24(sp)
    80019f56:	6442                	ld	s0,16(sp)
    80019f58:	8526                	mv	a0,s1
    80019f5a:	64a2                	ld	s1,8(sp)
    80019f5c:	6105                	addi	sp,sp,32
    80019f5e:	8082                	ret

0000000080019f60 <amo_access_fault_5>:

bool amo_access_fault_5(){
    80019f60:	1141                	addi	sp,sp,-16

    TEST_START();
    80019f62:	00008597          	auipc	a1,0x8
    80019f66:	3b658593          	addi	a1,a1,950 # 80022318 <__func__.15>
    80019f6a:	00009517          	auipc	a0,0x9
    80019f6e:	be650513          	addi	a0,a0,-1050 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_5(){
    80019f72:	e406                	sd	ra,8(sp)
    80019f74:	e022                	sd	s0,0(sp)
    TEST_START();
    80019f76:	4fb060ef          	jal	80020c70 <printf>
    80019f7a:	4529                	li	a0,10
    80019f7c:	384060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    80019f80:	4511                	li	a0,4
    80019f82:	b57e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019f86:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019f8a:	10000793          	li	a5,256
    80019f8e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019f92:	20000793          	li	a5,512
    80019f96:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019f9a:	40000793          	li	a5,1024
    80019f9e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019fa2:	6785                	lui	a5,0x1
    80019fa4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019fa8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019fac:	4785                	li	a5,1
    80019fae:	07fe                	slli	a5,a5,0x1f
    80019fb0:	4705                	li	a4,1
    80019fb2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019fb6:	08100793          	li	a5,129
    80019fba:	07e2                	slli	a5,a5,0x18
    80019fbc:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019fc0:	67a1                	lui	a5,0x8
    80019fc2:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80019fc6:	0330000f          	fence	rw,rw
    80019fca:	0002b417          	auipc	s0,0x2b
    80019fce:	04640413          	addi	s0,s0,70 # 80045010 <excpt>
    80019fd2:	0002b797          	auipc	a5,0x2b
    80019fd6:	0607bb23          	sd	zero,118(a5) # 80045048 <excpt+0x38>
    80019fda:	00e41023          	sh	a4,0(s0)
    80019fde:	0330000f          	fence	rw,rw
    80019fe2:	37ab77b7          	lui	a5,0x37ab7
    80019fe6:	078a                	slli	a5,a5,0x2
    80019fe8:	1706                	slli	a4,a4,0x21
    80019fea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019fee:	40070713          	addi	a4,a4,1024
    80019ff2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80019ff6:	0002b597          	auipc	a1,0x2b
    80019ffa:	01b5c583          	lbu	a1,27(a1) # 80045011 <excpt+0x1>
    80019ffe:	00009517          	auipc	a0,0x9
    8001a002:	e3250513          	addi	a0,a0,-462 # 80022e30 <__func__.2+0x5c8>
    8001a006:	46b060ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001a00a:	640c                	ld	a1,8(s0)
    8001a00c:	00009517          	auipc	a0,0x9
    8001a010:	e2450513          	addi	a0,a0,-476 # 80022e30 <__func__.2+0x5c8>
    8001a014:	45d060ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001a018:	08200593          	li	a1,130
    8001a01c:	0000f617          	auipc	a2,0xf
    8001a020:	c3460613          	addi	a2,a2,-972 # 80028c50 <__func__.2+0x63e8>
    8001a024:	00009517          	auipc	a0,0x9
    8001a028:	b4450513          	addi	a0,a0,-1212 # 80022b68 <__func__.2+0x300>
    8001a02c:	445060ef          	jal	80020c70 <printf>
    8001a030:	0002b797          	auipc	a5,0x2b
    8001a034:	fe17c783          	lbu	a5,-31(a5) # 80045011 <excpt+0x1>
    8001a038:	00009597          	auipc	a1,0x9
    8001a03c:	af858593          	addi	a1,a1,-1288 # 80022b30 <__func__.2+0x2c8>
    8001a040:	c789                	beqz	a5,8001a04a <amo_access_fault_5+0xea>
    8001a042:	00009597          	auipc	a1,0x9
    8001a046:	afe58593          	addi	a1,a1,-1282 # 80022b40 <__func__.2+0x2d8>
    8001a04a:	00009517          	auipc	a0,0x9
    8001a04e:	b3650513          	addi	a0,a0,-1226 # 80022b80 <__func__.2+0x318>
    8001a052:	41f060ef          	jal	80020c70 <printf>
    8001a056:	0002b797          	auipc	a5,0x2b
    8001a05a:	fbb7c783          	lbu	a5,-69(a5) # 80045011 <excpt+0x1>
    8001a05e:	e7a1                	bnez	a5,8001a0a6 <amo_access_fault_5+0x146>
    8001a060:	4529                	li	a0,10
    8001a062:	29e060ef          	jal	80020300 <putchar>
    8001a066:	0002b797          	auipc	a5,0x2b
    8001a06a:	fab7c783          	lbu	a5,-85(a5) # 80045011 <excpt+0x1>
    8001a06e:	e795                	bnez	a5,8001a09a <amo_access_fault_5+0x13a>
    8001a070:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001a072:	00009597          	auipc	a1,0x9
    8001a076:	abe58593          	addi	a1,a1,-1346 # 80022b30 <__func__.2+0x2c8>
    8001a07a:	00009517          	auipc	a0,0x9
    8001a07e:	b6e50513          	addi	a0,a0,-1170 # 80022be8 <__func__.2+0x380>
    8001a082:	3ef060ef          	jal	80020c70 <printf>
    8001a086:	4511                	li	a0,4
    8001a088:	a51e60ef          	jal	80000ad8 <goto_priv>
    8001a08c:	b1ce70ef          	jal	800013a8 <reset_state>
}
    8001a090:	60a2                	ld	ra,8(sp)
    8001a092:	8522                	mv	a0,s0
    8001a094:	6402                	ld	s0,0(sp)
    8001a096:	0141                	addi	sp,sp,16
    8001a098:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001a09a:	4401                	li	s0,0
    TEST_END();
    8001a09c:	00009597          	auipc	a1,0x9
    8001a0a0:	aa458593          	addi	a1,a1,-1372 # 80022b40 <__func__.2+0x2d8>
    8001a0a4:	bfd9                	j	8001a07a <amo_access_fault_5+0x11a>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001a0a6:	00009517          	auipc	a0,0x9
    8001a0aa:	ae250513          	addi	a0,a0,-1310 # 80022b88 <__func__.2+0x320>
    8001a0ae:	3c3060ef          	jal	80020c70 <printf>
    8001a0b2:	02900513          	li	a0,41
    8001a0b6:	24a060ef          	jal	80020300 <putchar>
    8001a0ba:	b75d                	j	8001a060 <amo_access_fault_5+0x100>

000000008001a0bc <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001a0bc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a0be:	00008597          	auipc	a1,0x8
    8001a0c2:	27258593          	addi	a1,a1,626 # 80022330 <__func__.14>
    8001a0c6:	00009517          	auipc	a0,0x9
    8001a0ca:	a8a50513          	addi	a0,a0,-1398 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_6(){
    8001a0ce:	ec06                	sd	ra,24(sp)
    8001a0d0:	e822                	sd	s0,16(sp)
    8001a0d2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a0d4:	39d060ef          	jal	80020c70 <printf>
    8001a0d8:	4529                	li	a0,10
    8001a0da:	226060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a0de:	4511                	li	a0,4
    8001a0e0:	9f9e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a0e4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a0e8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a0ec:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a0f0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a0f4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a0f8:	10000793          	li	a5,256
    8001a0fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a100:	20000793          	li	a5,512
    8001a104:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a108:	40000793          	li	a5,1024
    8001a10c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a110:	6785                	lui	a5,0x1
    8001a112:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a116:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a11a:	4785                	li	a5,1
    8001a11c:	07fe                	slli	a5,a5,0x1f
    8001a11e:	4485                	li	s1,1
    8001a120:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a124:	08100793          	li	a5,129
    8001a128:	07e2                	slli	a5,a5,0x18
    8001a12a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a12e:	08000793          	li	a5,128
    8001a132:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a136:	67a1                	lui	a5,0x8
    8001a138:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001a13c:	450d                	li	a0,3
    8001a13e:	99be60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a142:	0330000f          	fence	rw,rw
    8001a146:	0002b417          	auipc	s0,0x2b
    8001a14a:	eca40413          	addi	s0,s0,-310 # 80045010 <excpt>
    8001a14e:	0002b797          	auipc	a5,0x2b
    8001a152:	ee07bd23          	sd	zero,-262(a5) # 80045048 <excpt+0x38>
    8001a156:	00941023          	sh	s1,0(s0)
    8001a15a:	0330000f          	fence	rw,rw
    8001a15e:	37ab77b7          	lui	a5,0x37ab7
    8001a162:	02149713          	slli	a4,s1,0x21
    8001a166:	078a                	slli	a5,a5,0x2
    8001a168:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a16c:	40070713          	addi	a4,a4,1024
    8001a170:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a174:	08200593          	li	a1,130
    8001a178:	0000f617          	auipc	a2,0xf
    8001a17c:	b1860613          	addi	a2,a2,-1256 # 80028c90 <__func__.2+0x6428>
    8001a180:	00009517          	auipc	a0,0x9
    8001a184:	9e850513          	addi	a0,a0,-1560 # 80022b68 <__func__.2+0x300>
    8001a188:	2e9060ef          	jal	80020c70 <printf>
    8001a18c:	0002b797          	auipc	a5,0x2b
    8001a190:	e857c783          	lbu	a5,-379(a5) # 80045011 <excpt+0x1>
    8001a194:	00009597          	auipc	a1,0x9
    8001a198:	9ac58593          	addi	a1,a1,-1620 # 80022b40 <__func__.2+0x2d8>
    8001a19c:	cf89                	beqz	a5,8001a1b6 <amo_access_fault_6+0xfa>
    8001a19e:	6418                	ld	a4,8(s0)
    8001a1a0:	479d                	li	a5,7
    8001a1a2:	00009597          	auipc	a1,0x9
    8001a1a6:	98e58593          	addi	a1,a1,-1650 # 80022b30 <__func__.2+0x2c8>
    8001a1aa:	00f70663          	beq	a4,a5,8001a1b6 <amo_access_fault_6+0xfa>
    8001a1ae:	00009597          	auipc	a1,0x9
    8001a1b2:	99258593          	addi	a1,a1,-1646 # 80022b40 <__func__.2+0x2d8>
    8001a1b6:	00009517          	auipc	a0,0x9
    8001a1ba:	9ca50513          	addi	a0,a0,-1590 # 80022b80 <__func__.2+0x318>
    8001a1be:	2b3060ef          	jal	80020c70 <printf>
    8001a1c2:	0002b797          	auipc	a5,0x2b
    8001a1c6:	e4f7c783          	lbu	a5,-433(a5) # 80045011 <excpt+0x1>
    8001a1ca:	c789                	beqz	a5,8001a1d4 <amo_access_fault_6+0x118>
    8001a1cc:	6418                	ld	a4,8(s0)
    8001a1ce:	479d                	li	a5,7
    8001a1d0:	00f70c63          	beq	a4,a5,8001a1e8 <amo_access_fault_6+0x12c>
    8001a1d4:	00009517          	auipc	a0,0x9
    8001a1d8:	9b450513          	addi	a0,a0,-1612 # 80022b88 <__func__.2+0x320>
    8001a1dc:	295060ef          	jal	80020c70 <printf>
    8001a1e0:	02900513          	li	a0,41
    8001a1e4:	11c060ef          	jal	80020300 <putchar>
    8001a1e8:	4529                	li	a0,10
    8001a1ea:	116060ef          	jal	80020300 <putchar>
    8001a1ee:	0002b497          	auipc	s1,0x2b
    8001a1f2:	e234c483          	lbu	s1,-477(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001a1f6:	00009597          	auipc	a1,0x9
    8001a1fa:	94a58593          	addi	a1,a1,-1718 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a1fe:	cc91                	beqz	s1,8001a21a <amo_access_fault_6+0x15e>
    8001a200:	6418                	ld	a4,8(s0)
    8001a202:	479d                	li	a5,7
    TEST_END();
    8001a204:	00009597          	auipc	a1,0x9
    8001a208:	92c58593          	addi	a1,a1,-1748 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a20c:	00f70763          	beq	a4,a5,8001a21a <amo_access_fault_6+0x15e>
    8001a210:	4481                	li	s1,0
    TEST_END();
    8001a212:	00009597          	auipc	a1,0x9
    8001a216:	92e58593          	addi	a1,a1,-1746 # 80022b40 <__func__.2+0x2d8>
    8001a21a:	00009517          	auipc	a0,0x9
    8001a21e:	9ce50513          	addi	a0,a0,-1586 # 80022be8 <__func__.2+0x380>
    8001a222:	24f060ef          	jal	80020c70 <printf>
    8001a226:	4511                	li	a0,4
    8001a228:	8b1e60ef          	jal	80000ad8 <goto_priv>
    8001a22c:	97ce70ef          	jal	800013a8 <reset_state>
}
    8001a230:	60e2                	ld	ra,24(sp)
    8001a232:	6442                	ld	s0,16(sp)
    8001a234:	8526                	mv	a0,s1
    8001a236:	64a2                	ld	s1,8(sp)
    8001a238:	6105                	addi	sp,sp,32
    8001a23a:	8082                	ret

000000008001a23c <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001a23c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a23e:	00008597          	auipc	a1,0x8
    8001a242:	10a58593          	addi	a1,a1,266 # 80022348 <__func__.13>
    8001a246:	00009517          	auipc	a0,0x9
    8001a24a:	90a50513          	addi	a0,a0,-1782 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_7(){
    8001a24e:	ec06                	sd	ra,24(sp)
    8001a250:	e822                	sd	s0,16(sp)
    8001a252:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a254:	21d060ef          	jal	80020c70 <printf>
    8001a258:	4529                	li	a0,10
    8001a25a:	0a6060ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a25e:	4511                	li	a0,4
    8001a260:	879e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a264:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a268:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a26c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a270:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a274:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a278:	10000793          	li	a5,256
    8001a27c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a280:	20000793          	li	a5,512
    8001a284:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a288:	40000793          	li	a5,1024
    8001a28c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a290:	6785                	lui	a5,0x1
    8001a292:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a296:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a29a:	4785                	li	a5,1
    8001a29c:	07fe                	slli	a5,a5,0x1f
    8001a29e:	4485                	li	s1,1
    8001a2a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a2a4:	08100793          	li	a5,129
    8001a2a8:	07e2                	slli	a5,a5,0x18
    8001a2aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a2ae:	08000793          	li	a5,128
    8001a2b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a2b6:	67a1                	lui	a5,0x8
    8001a2b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a2bc:	8526                	mv	a0,s1
    8001a2be:	81be60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a2c2:	0330000f          	fence	rw,rw
    8001a2c6:	0002b417          	auipc	s0,0x2b
    8001a2ca:	d4a40413          	addi	s0,s0,-694 # 80045010 <excpt>
    8001a2ce:	0002b797          	auipc	a5,0x2b
    8001a2d2:	d607bd23          	sd	zero,-646(a5) # 80045048 <excpt+0x38>
    8001a2d6:	00941023          	sh	s1,0(s0)
    8001a2da:	0330000f          	fence	rw,rw
    8001a2de:	37ab77b7          	lui	a5,0x37ab7
    8001a2e2:	02149713          	slli	a4,s1,0x21
    8001a2e6:	078a                	slli	a5,a5,0x2
    8001a2e8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a2ec:	40070713          	addi	a4,a4,1024
    8001a2f0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a2f4:	08200593          	li	a1,130
    8001a2f8:	0000f617          	auipc	a2,0xf
    8001a2fc:	9d860613          	addi	a2,a2,-1576 # 80028cd0 <__func__.2+0x6468>
    8001a300:	00009517          	auipc	a0,0x9
    8001a304:	86850513          	addi	a0,a0,-1944 # 80022b68 <__func__.2+0x300>
    8001a308:	169060ef          	jal	80020c70 <printf>
    8001a30c:	0002b797          	auipc	a5,0x2b
    8001a310:	d057c783          	lbu	a5,-763(a5) # 80045011 <excpt+0x1>
    8001a314:	00009597          	auipc	a1,0x9
    8001a318:	82c58593          	addi	a1,a1,-2004 # 80022b40 <__func__.2+0x2d8>
    8001a31c:	cf89                	beqz	a5,8001a336 <amo_access_fault_7+0xfa>
    8001a31e:	6418                	ld	a4,8(s0)
    8001a320:	479d                	li	a5,7
    8001a322:	00009597          	auipc	a1,0x9
    8001a326:	80e58593          	addi	a1,a1,-2034 # 80022b30 <__func__.2+0x2c8>
    8001a32a:	00f70663          	beq	a4,a5,8001a336 <amo_access_fault_7+0xfa>
    8001a32e:	00009597          	auipc	a1,0x9
    8001a332:	81258593          	addi	a1,a1,-2030 # 80022b40 <__func__.2+0x2d8>
    8001a336:	00009517          	auipc	a0,0x9
    8001a33a:	84a50513          	addi	a0,a0,-1974 # 80022b80 <__func__.2+0x318>
    8001a33e:	133060ef          	jal	80020c70 <printf>
    8001a342:	0002b797          	auipc	a5,0x2b
    8001a346:	ccf7c783          	lbu	a5,-817(a5) # 80045011 <excpt+0x1>
    8001a34a:	c789                	beqz	a5,8001a354 <amo_access_fault_7+0x118>
    8001a34c:	6418                	ld	a4,8(s0)
    8001a34e:	479d                	li	a5,7
    8001a350:	00f70c63          	beq	a4,a5,8001a368 <amo_access_fault_7+0x12c>
    8001a354:	00009517          	auipc	a0,0x9
    8001a358:	83450513          	addi	a0,a0,-1996 # 80022b88 <__func__.2+0x320>
    8001a35c:	115060ef          	jal	80020c70 <printf>
    8001a360:	02900513          	li	a0,41
    8001a364:	79d050ef          	jal	80020300 <putchar>
    8001a368:	4529                	li	a0,10
    8001a36a:	797050ef          	jal	80020300 <putchar>
    8001a36e:	0002b497          	auipc	s1,0x2b
    8001a372:	ca34c483          	lbu	s1,-861(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001a376:	00008597          	auipc	a1,0x8
    8001a37a:	7ca58593          	addi	a1,a1,1994 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a37e:	cc91                	beqz	s1,8001a39a <amo_access_fault_7+0x15e>
    8001a380:	6418                	ld	a4,8(s0)
    8001a382:	479d                	li	a5,7
    TEST_END();
    8001a384:	00008597          	auipc	a1,0x8
    8001a388:	7ac58593          	addi	a1,a1,1964 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a38c:	00f70763          	beq	a4,a5,8001a39a <amo_access_fault_7+0x15e>
    8001a390:	4481                	li	s1,0
    TEST_END();
    8001a392:	00008597          	auipc	a1,0x8
    8001a396:	7ae58593          	addi	a1,a1,1966 # 80022b40 <__func__.2+0x2d8>
    8001a39a:	00009517          	auipc	a0,0x9
    8001a39e:	84e50513          	addi	a0,a0,-1970 # 80022be8 <__func__.2+0x380>
    8001a3a2:	0cf060ef          	jal	80020c70 <printf>
    8001a3a6:	4511                	li	a0,4
    8001a3a8:	f30e60ef          	jal	80000ad8 <goto_priv>
    8001a3ac:	ffde60ef          	jal	800013a8 <reset_state>
}
    8001a3b0:	60e2                	ld	ra,24(sp)
    8001a3b2:	6442                	ld	s0,16(sp)
    8001a3b4:	8526                	mv	a0,s1
    8001a3b6:	64a2                	ld	s1,8(sp)
    8001a3b8:	6105                	addi	sp,sp,32
    8001a3ba:	8082                	ret

000000008001a3bc <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001a3bc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a3be:	00008597          	auipc	a1,0x8
    8001a3c2:	fa258593          	addi	a1,a1,-94 # 80022360 <__func__.12>
    8001a3c6:	00008517          	auipc	a0,0x8
    8001a3ca:	78a50513          	addi	a0,a0,1930 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_8(){
    8001a3ce:	ec06                	sd	ra,24(sp)
    8001a3d0:	e822                	sd	s0,16(sp)
    8001a3d2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a3d4:	09d060ef          	jal	80020c70 <printf>
    8001a3d8:	4529                	li	a0,10
    8001a3da:	727050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a3de:	4511                	li	a0,4
    8001a3e0:	ef8e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a3e4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a3e8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a3ec:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a3f0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a3f4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a3f8:	10000793          	li	a5,256
    8001a3fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a400:	20000793          	li	a5,512
    8001a404:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a408:	40000793          	li	a5,1024
    8001a40c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a410:	6785                	lui	a5,0x1
    8001a412:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a416:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a41a:	4785                	li	a5,1
    8001a41c:	07fe                	slli	a5,a5,0x1f
    8001a41e:	4485                	li	s1,1
    8001a420:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a424:	08100793          	li	a5,129
    8001a428:	07e2                	slli	a5,a5,0x18
    8001a42a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a42e:	08000793          	li	a5,128
    8001a432:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a436:	67a1                	lui	a5,0x8
    8001a438:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a43c:	4501                	li	a0,0
    8001a43e:	e9ae60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a442:	0330000f          	fence	rw,rw
    8001a446:	0002b417          	auipc	s0,0x2b
    8001a44a:	bca40413          	addi	s0,s0,-1078 # 80045010 <excpt>
    8001a44e:	0002b797          	auipc	a5,0x2b
    8001a452:	be07bd23          	sd	zero,-1030(a5) # 80045048 <excpt+0x38>
    8001a456:	00941023          	sh	s1,0(s0)
    8001a45a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001a45e:	37ab77b7          	lui	a5,0x37ab7
    8001a462:	02149713          	slli	a4,s1,0x21
    8001a466:	078a                	slli	a5,a5,0x2
    8001a468:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a46c:	40070713          	addi	a4,a4,1024
    8001a470:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a474:	08200593          	li	a1,130
    8001a478:	0000f617          	auipc	a2,0xf
    8001a47c:	89860613          	addi	a2,a2,-1896 # 80028d10 <__func__.2+0x64a8>
    8001a480:	00008517          	auipc	a0,0x8
    8001a484:	6e850513          	addi	a0,a0,1768 # 80022b68 <__func__.2+0x300>
    8001a488:	7e8060ef          	jal	80020c70 <printf>
    8001a48c:	0002b797          	auipc	a5,0x2b
    8001a490:	b857c783          	lbu	a5,-1147(a5) # 80045011 <excpt+0x1>
    8001a494:	00008597          	auipc	a1,0x8
    8001a498:	6ac58593          	addi	a1,a1,1708 # 80022b40 <__func__.2+0x2d8>
    8001a49c:	cf89                	beqz	a5,8001a4b6 <amo_access_fault_8+0xfa>
    8001a49e:	6418                	ld	a4,8(s0)
    8001a4a0:	479d                	li	a5,7
    8001a4a2:	00008597          	auipc	a1,0x8
    8001a4a6:	68e58593          	addi	a1,a1,1678 # 80022b30 <__func__.2+0x2c8>
    8001a4aa:	00f70663          	beq	a4,a5,8001a4b6 <amo_access_fault_8+0xfa>
    8001a4ae:	00008597          	auipc	a1,0x8
    8001a4b2:	69258593          	addi	a1,a1,1682 # 80022b40 <__func__.2+0x2d8>
    8001a4b6:	00008517          	auipc	a0,0x8
    8001a4ba:	6ca50513          	addi	a0,a0,1738 # 80022b80 <__func__.2+0x318>
    8001a4be:	7b2060ef          	jal	80020c70 <printf>
    8001a4c2:	0002b797          	auipc	a5,0x2b
    8001a4c6:	b4f7c783          	lbu	a5,-1201(a5) # 80045011 <excpt+0x1>
    8001a4ca:	c789                	beqz	a5,8001a4d4 <amo_access_fault_8+0x118>
    8001a4cc:	6418                	ld	a4,8(s0)
    8001a4ce:	479d                	li	a5,7
    8001a4d0:	00f70c63          	beq	a4,a5,8001a4e8 <amo_access_fault_8+0x12c>
    8001a4d4:	00008517          	auipc	a0,0x8
    8001a4d8:	6b450513          	addi	a0,a0,1716 # 80022b88 <__func__.2+0x320>
    8001a4dc:	794060ef          	jal	80020c70 <printf>
    8001a4e0:	02900513          	li	a0,41
    8001a4e4:	61d050ef          	jal	80020300 <putchar>
    8001a4e8:	4529                	li	a0,10
    8001a4ea:	617050ef          	jal	80020300 <putchar>
    8001a4ee:	0002b497          	auipc	s1,0x2b
    8001a4f2:	b234c483          	lbu	s1,-1245(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001a4f6:	00008597          	auipc	a1,0x8
    8001a4fa:	64a58593          	addi	a1,a1,1610 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a4fe:	cc91                	beqz	s1,8001a51a <amo_access_fault_8+0x15e>
    8001a500:	6418                	ld	a4,8(s0)
    8001a502:	479d                	li	a5,7
    TEST_END();
    8001a504:	00008597          	auipc	a1,0x8
    8001a508:	62c58593          	addi	a1,a1,1580 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001a50c:	00f70763          	beq	a4,a5,8001a51a <amo_access_fault_8+0x15e>
    8001a510:	4481                	li	s1,0
    TEST_END();
    8001a512:	00008597          	auipc	a1,0x8
    8001a516:	62e58593          	addi	a1,a1,1582 # 80022b40 <__func__.2+0x2d8>
    8001a51a:	00008517          	auipc	a0,0x8
    8001a51e:	6ce50513          	addi	a0,a0,1742 # 80022be8 <__func__.2+0x380>
    8001a522:	74e060ef          	jal	80020c70 <printf>
    8001a526:	4511                	li	a0,4
    8001a528:	db0e60ef          	jal	80000ad8 <goto_priv>
    8001a52c:	e7de60ef          	jal	800013a8 <reset_state>
}
    8001a530:	60e2                	ld	ra,24(sp)
    8001a532:	6442                	ld	s0,16(sp)
    8001a534:	8526                	mv	a0,s1
    8001a536:	64a2                	ld	s1,8(sp)
    8001a538:	6105                	addi	sp,sp,32
    8001a53a:	8082                	ret

000000008001a53c <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001a53c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a53e:	00008597          	auipc	a1,0x8
    8001a542:	e3a58593          	addi	a1,a1,-454 # 80022378 <__func__.11>
    8001a546:	00008517          	auipc	a0,0x8
    8001a54a:	60a50513          	addi	a0,a0,1546 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_9(){
    8001a54e:	ec06                	sd	ra,24(sp)
    8001a550:	e822                	sd	s0,16(sp)
    8001a552:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a554:	71c060ef          	jal	80020c70 <printf>
    8001a558:	4529                	li	a0,10
    8001a55a:	5a7050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a55e:	4511                	li	a0,4
    8001a560:	d78e60ef          	jal	80000ad8 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a564:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a568:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a56c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a570:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a574:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a578:	10000793          	li	a5,256
    8001a57c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a580:	20000793          	li	a5,512
    8001a584:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a588:	40000793          	li	a5,1024
    8001a58c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a590:	6785                	lui	a5,0x1
    8001a592:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a596:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a59a:	4785                	li	a5,1
    8001a59c:	07fe                	slli	a5,a5,0x1f
    8001a59e:	4485                	li	s1,1
    8001a5a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a5a4:	08100793          	li	a5,129
    8001a5a8:	07e2                	slli	a5,a5,0x18
    8001a5aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a5ae:	08000793          	li	a5,128
    8001a5b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a5b6:	67a1                	lui	a5,0x8
    8001a5b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a5bc:	4501                	li	a0,0
    8001a5be:	d1ae60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a5c2:	0330000f          	fence	rw,rw
    8001a5c6:	0002b417          	auipc	s0,0x2b
    8001a5ca:	a4a40413          	addi	s0,s0,-1462 # 80045010 <excpt>
    8001a5ce:	0002b797          	auipc	a5,0x2b
    8001a5d2:	a607bd23          	sd	zero,-1414(a5) # 80045048 <excpt+0x38>
    8001a5d6:	00941023          	sh	s1,0(s0)
    8001a5da:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001a5de:	37ab77b7          	lui	a5,0x37ab7
    8001a5e2:	02349713          	slli	a4,s1,0x23
    8001a5e6:	078a                	slli	a5,a5,0x2
    8001a5e8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a5ec:	1761                	addi	a4,a4,-8
    8001a5ee:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001a5f2:	08200593          	li	a1,130
    8001a5f6:	0000e617          	auipc	a2,0xe
    8001a5fa:	75a60613          	addi	a2,a2,1882 # 80028d50 <__func__.2+0x64e8>
    8001a5fe:	00008517          	auipc	a0,0x8
    8001a602:	56a50513          	addi	a0,a0,1386 # 80022b68 <__func__.2+0x300>
    8001a606:	66a060ef          	jal	80020c70 <printf>
    8001a60a:	0002b797          	auipc	a5,0x2b
    8001a60e:	a077c783          	lbu	a5,-1529(a5) # 80045011 <excpt+0x1>
    8001a612:	00008597          	auipc	a1,0x8
    8001a616:	52e58593          	addi	a1,a1,1326 # 80022b40 <__func__.2+0x2d8>
    8001a61a:	cf89                	beqz	a5,8001a634 <amo_access_fault_9+0xf8>
    8001a61c:	6418                	ld	a4,8(s0)
    8001a61e:	479d                	li	a5,7
    8001a620:	00008597          	auipc	a1,0x8
    8001a624:	51058593          	addi	a1,a1,1296 # 80022b30 <__func__.2+0x2c8>
    8001a628:	00f70663          	beq	a4,a5,8001a634 <amo_access_fault_9+0xf8>
    8001a62c:	00008597          	auipc	a1,0x8
    8001a630:	51458593          	addi	a1,a1,1300 # 80022b40 <__func__.2+0x2d8>
    8001a634:	00008517          	auipc	a0,0x8
    8001a638:	54c50513          	addi	a0,a0,1356 # 80022b80 <__func__.2+0x318>
    8001a63c:	634060ef          	jal	80020c70 <printf>
    8001a640:	0002b797          	auipc	a5,0x2b
    8001a644:	9d17c783          	lbu	a5,-1583(a5) # 80045011 <excpt+0x1>
    8001a648:	c789                	beqz	a5,8001a652 <amo_access_fault_9+0x116>
    8001a64a:	6418                	ld	a4,8(s0)
    8001a64c:	479d                	li	a5,7
    8001a64e:	00f70c63          	beq	a4,a5,8001a666 <amo_access_fault_9+0x12a>
    8001a652:	00008517          	auipc	a0,0x8
    8001a656:	53650513          	addi	a0,a0,1334 # 80022b88 <__func__.2+0x320>
    8001a65a:	616060ef          	jal	80020c70 <printf>
    8001a65e:	02900513          	li	a0,41
    8001a662:	49f050ef          	jal	80020300 <putchar>
    8001a666:	4529                	li	a0,10
    8001a668:	499050ef          	jal	80020300 <putchar>
    8001a66c:	0002b497          	auipc	s1,0x2b
    8001a670:	9a54c483          	lbu	s1,-1627(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001a674:	00008597          	auipc	a1,0x8
    8001a678:	4cc58593          	addi	a1,a1,1228 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001a67c:	cc91                	beqz	s1,8001a698 <amo_access_fault_9+0x15c>
    8001a67e:	6418                	ld	a4,8(s0)
    8001a680:	479d                	li	a5,7
    TEST_END();
    8001a682:	00008597          	auipc	a1,0x8
    8001a686:	4ae58593          	addi	a1,a1,1198 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001a68a:	00f70763          	beq	a4,a5,8001a698 <amo_access_fault_9+0x15c>
    8001a68e:	4481                	li	s1,0
    TEST_END();
    8001a690:	00008597          	auipc	a1,0x8
    8001a694:	4b058593          	addi	a1,a1,1200 # 80022b40 <__func__.2+0x2d8>
    8001a698:	00008517          	auipc	a0,0x8
    8001a69c:	55050513          	addi	a0,a0,1360 # 80022be8 <__func__.2+0x380>
    8001a6a0:	5d0060ef          	jal	80020c70 <printf>
    8001a6a4:	4511                	li	a0,4
    8001a6a6:	c32e60ef          	jal	80000ad8 <goto_priv>
    8001a6aa:	cffe60ef          	jal	800013a8 <reset_state>
}
    8001a6ae:	60e2                	ld	ra,24(sp)
    8001a6b0:	6442                	ld	s0,16(sp)
    8001a6b2:	8526                	mv	a0,s1
    8001a6b4:	64a2                	ld	s1,8(sp)
    8001a6b6:	6105                	addi	sp,sp,32
    8001a6b8:	8082                	ret

000000008001a6ba <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001a6ba:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a6bc:	00008597          	auipc	a1,0x8
    8001a6c0:	cd458593          	addi	a1,a1,-812 # 80022390 <__func__.10>
    8001a6c4:	00008517          	auipc	a0,0x8
    8001a6c8:	48c50513          	addi	a0,a0,1164 # 80022b50 <__func__.2+0x2e8>
bool amo_access_fault_10(){
    8001a6cc:	ec06                	sd	ra,24(sp)
    8001a6ce:	e822                	sd	s0,16(sp)
    8001a6d0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a6d2:	59e060ef          	jal	80020c70 <printf>
    8001a6d6:	4529                	li	a0,10
    8001a6d8:	429050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a6dc:	4511                	li	a0,4
    8001a6de:	bfae60ef          	jal	80000ad8 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a6e2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a6e6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a6ea:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a6ee:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a6f2:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a6f6:	4785                	li	a5,1
    8001a6f8:	07fe                	slli	a5,a5,0x1f
    8001a6fa:	4485                	li	s1,1
    8001a6fc:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a700:	08000793          	li	a5,128
    8001a704:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_M);
    8001a708:	4511                	li	a0,4
    8001a70a:	bcee60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a70e:	0330000f          	fence	rw,rw
    8001a712:	0002b417          	auipc	s0,0x2b
    8001a716:	8fe40413          	addi	s0,s0,-1794 # 80045010 <excpt>
    8001a71a:	0002b797          	auipc	a5,0x2b
    8001a71e:	9207b723          	sd	zero,-1746(a5) # 80045048 <excpt+0x38>
    8001a722:	00941023          	sh	s1,0(s0)
    8001a726:	0330000f          	fence	rw,rw
    8001a72a:	37ab77b7          	lui	a5,0x37ab7
    8001a72e:	078a                	slli	a5,a5,0x2
    8001a730:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a734:	02149713          	slli	a4,s1,0x21
    8001a738:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001a73c:	08200593          	li	a1,130
    8001a740:	0000e617          	auipc	a2,0xe
    8001a744:	68860613          	addi	a2,a2,1672 # 80028dc8 <__func__.2+0x6560>
    8001a748:	00008517          	auipc	a0,0x8
    8001a74c:	42050513          	addi	a0,a0,1056 # 80022b68 <__func__.2+0x300>
    8001a750:	520060ef          	jal	80020c70 <printf>
    8001a754:	0002b797          	auipc	a5,0x2b
    8001a758:	8bd7c783          	lbu	a5,-1859(a5) # 80045011 <excpt+0x1>
    8001a75c:	00008597          	auipc	a1,0x8
    8001a760:	3e458593          	addi	a1,a1,996 # 80022b40 <__func__.2+0x2d8>
    8001a764:	cf89                	beqz	a5,8001a77e <amo_access_fault_10+0xc4>
    8001a766:	6418                	ld	a4,8(s0)
    8001a768:	479d                	li	a5,7
    8001a76a:	00008597          	auipc	a1,0x8
    8001a76e:	3c658593          	addi	a1,a1,966 # 80022b30 <__func__.2+0x2c8>
    8001a772:	00f70663          	beq	a4,a5,8001a77e <amo_access_fault_10+0xc4>
    8001a776:	00008597          	auipc	a1,0x8
    8001a77a:	3ca58593          	addi	a1,a1,970 # 80022b40 <__func__.2+0x2d8>
    8001a77e:	00008517          	auipc	a0,0x8
    8001a782:	40250513          	addi	a0,a0,1026 # 80022b80 <__func__.2+0x318>
    8001a786:	4ea060ef          	jal	80020c70 <printf>
    8001a78a:	0002b797          	auipc	a5,0x2b
    8001a78e:	8877c783          	lbu	a5,-1913(a5) # 80045011 <excpt+0x1>
    8001a792:	c789                	beqz	a5,8001a79c <amo_access_fault_10+0xe2>
    8001a794:	6418                	ld	a4,8(s0)
    8001a796:	479d                	li	a5,7
    8001a798:	00f70c63          	beq	a4,a5,8001a7b0 <amo_access_fault_10+0xf6>
    8001a79c:	00008517          	auipc	a0,0x8
    8001a7a0:	3ec50513          	addi	a0,a0,1004 # 80022b88 <__func__.2+0x320>
    8001a7a4:	4cc060ef          	jal	80020c70 <printf>
    8001a7a8:	02900513          	li	a0,41
    8001a7ac:	355050ef          	jal	80020300 <putchar>
    8001a7b0:	4529                	li	a0,10
    8001a7b2:	34f050ef          	jal	80020300 <putchar>
    8001a7b6:	0002b497          	auipc	s1,0x2b
    8001a7ba:	85b4c483          	lbu	s1,-1957(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001a7be:	00008597          	auipc	a1,0x8
    8001a7c2:	38258593          	addi	a1,a1,898 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001a7c6:	cc91                	beqz	s1,8001a7e2 <amo_access_fault_10+0x128>
    8001a7c8:	6418                	ld	a4,8(s0)
    8001a7ca:	479d                	li	a5,7
    TEST_END();
    8001a7cc:	00008597          	auipc	a1,0x8
    8001a7d0:	36458593          	addi	a1,a1,868 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001a7d4:	00f70763          	beq	a4,a5,8001a7e2 <amo_access_fault_10+0x128>
    8001a7d8:	4481                	li	s1,0
    TEST_END();
    8001a7da:	00008597          	auipc	a1,0x8
    8001a7de:	36658593          	addi	a1,a1,870 # 80022b40 <__func__.2+0x2d8>
    8001a7e2:	00008517          	auipc	a0,0x8
    8001a7e6:	40650513          	addi	a0,a0,1030 # 80022be8 <__func__.2+0x380>
    8001a7ea:	486060ef          	jal	80020c70 <printf>
    8001a7ee:	4511                	li	a0,4
    8001a7f0:	ae8e60ef          	jal	80000ad8 <goto_priv>
    8001a7f4:	bb5e60ef          	jal	800013a8 <reset_state>
}
    8001a7f8:	60e2                	ld	ra,24(sp)
    8001a7fa:	6442                	ld	s0,16(sp)
    8001a7fc:	8526                	mv	a0,s1
    8001a7fe:	64a2                	ld	s1,8(sp)
    8001a800:	6105                	addi	sp,sp,32
    8001a802:	8082                	ret

000000008001a804 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001a804:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a806:	00008597          	auipc	a1,0x8
    8001a80a:	ba258593          	addi	a1,a1,-1118 # 800223a8 <__func__.9>
    8001a80e:	00008517          	auipc	a0,0x8
    8001a812:	34250513          	addi	a0,a0,834 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_1(){
    8001a816:	ec06                	sd	ra,24(sp)
    8001a818:	e822                	sd	s0,16(sp)
    8001a81a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a81c:	454060ef          	jal	80020c70 <printf>
    8001a820:	4529                	li	a0,10
    8001a822:	2df050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a826:	4511                	li	a0,4
    8001a828:	ab0e60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a82c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a830:	10000793          	li	a5,256
    8001a834:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a838:	20000793          	li	a5,512
    8001a83c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a840:	40000793          	li	a5,1024
    8001a844:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a848:	6785                	lui	a5,0x1
    8001a84a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a84e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a852:	4785                	li	a5,1
    8001a854:	07fe                	slli	a5,a5,0x1f
    8001a856:	4485                	li	s1,1
    8001a858:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a85c:	08100793          	li	a5,129
    8001a860:	07e2                	slli	a5,a5,0x18
    8001a862:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a866:	67a1                	lui	a5,0x8
    8001a868:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a86c:	0330000f          	fence	rw,rw
    8001a870:	0002a417          	auipc	s0,0x2a
    8001a874:	7a040413          	addi	s0,s0,1952 # 80045010 <excpt>
    8001a878:	0002a797          	auipc	a5,0x2a
    8001a87c:	7c07b823          	sd	zero,2000(a5) # 80045048 <excpt+0x38>
    8001a880:	00941023          	sh	s1,0(s0)
    8001a884:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001a888:	02149793          	slli	a5,s1,0x21
    8001a88c:	40078793          	addi	a5,a5,1024
    8001a890:	00000297          	auipc	t0,0x0
    8001a894:	00c28293          	addi	t0,t0,12 # 8001a89c <instruction_access_fault_1+0x98>
    8001a898:	02543c23          	sd	t0,56(s0)
    8001a89c:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001a89e:	0002a597          	auipc	a1,0x2a
    8001a8a2:	7735c583          	lbu	a1,1907(a1) # 80045011 <excpt+0x1>
    8001a8a6:	00008517          	auipc	a0,0x8
    8001a8aa:	58a50513          	addi	a0,a0,1418 # 80022e30 <__func__.2+0x5c8>
    8001a8ae:	3c2060ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001a8b2:	640c                	ld	a1,8(s0)
    8001a8b4:	00008517          	auipc	a0,0x8
    8001a8b8:	57c50513          	addi	a0,a0,1404 # 80022e30 <__func__.2+0x5c8>
    8001a8bc:	3b4060ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001a8c0:	08200593          	li	a1,130
    8001a8c4:	0000e617          	auipc	a2,0xe
    8001a8c8:	57460613          	addi	a2,a2,1396 # 80028e38 <__func__.2+0x65d0>
    8001a8cc:	00008517          	auipc	a0,0x8
    8001a8d0:	29c50513          	addi	a0,a0,668 # 80022b68 <__func__.2+0x300>
    8001a8d4:	39c060ef          	jal	80020c70 <printf>
    8001a8d8:	0002a797          	auipc	a5,0x2a
    8001a8dc:	7397c783          	lbu	a5,1849(a5) # 80045011 <excpt+0x1>
    8001a8e0:	00008597          	auipc	a1,0x8
    8001a8e4:	26058593          	addi	a1,a1,608 # 80022b40 <__func__.2+0x2d8>
    8001a8e8:	cf81                	beqz	a5,8001a900 <instruction_access_fault_1+0xfc>
    8001a8ea:	641c                	ld	a5,8(s0)
    8001a8ec:	00008597          	auipc	a1,0x8
    8001a8f0:	24458593          	addi	a1,a1,580 # 80022b30 <__func__.2+0x2c8>
    8001a8f4:	00978663          	beq	a5,s1,8001a900 <instruction_access_fault_1+0xfc>
    8001a8f8:	00008597          	auipc	a1,0x8
    8001a8fc:	24858593          	addi	a1,a1,584 # 80022b40 <__func__.2+0x2d8>
    8001a900:	00008517          	auipc	a0,0x8
    8001a904:	28050513          	addi	a0,a0,640 # 80022b80 <__func__.2+0x318>
    8001a908:	368060ef          	jal	80020c70 <printf>
    8001a90c:	0002a797          	auipc	a5,0x2a
    8001a910:	7057c783          	lbu	a5,1797(a5) # 80045011 <excpt+0x1>
    8001a914:	c789                	beqz	a5,8001a91e <instruction_access_fault_1+0x11a>
    8001a916:	6418                	ld	a4,8(s0)
    8001a918:	4785                	li	a5,1
    8001a91a:	00f70c63          	beq	a4,a5,8001a932 <instruction_access_fault_1+0x12e>
    8001a91e:	00008517          	auipc	a0,0x8
    8001a922:	26a50513          	addi	a0,a0,618 # 80022b88 <__func__.2+0x320>
    8001a926:	34a060ef          	jal	80020c70 <printf>
    8001a92a:	02900513          	li	a0,41
    8001a92e:	1d3050ef          	jal	80020300 <putchar>
    8001a932:	4529                	li	a0,10
    8001a934:	1cd050ef          	jal	80020300 <putchar>
    8001a938:	0002a497          	auipc	s1,0x2a
    8001a93c:	6d94c483          	lbu	s1,1753(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001a940:	00008597          	auipc	a1,0x8
    8001a944:	20058593          	addi	a1,a1,512 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001a948:	cc91                	beqz	s1,8001a964 <instruction_access_fault_1+0x160>
    8001a94a:	6418                	ld	a4,8(s0)
    8001a94c:	4785                	li	a5,1
    TEST_END();
    8001a94e:	00008597          	auipc	a1,0x8
    8001a952:	1e258593          	addi	a1,a1,482 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001a956:	00f70763          	beq	a4,a5,8001a964 <instruction_access_fault_1+0x160>
    8001a95a:	4481                	li	s1,0
    TEST_END();
    8001a95c:	00008597          	auipc	a1,0x8
    8001a960:	1e458593          	addi	a1,a1,484 # 80022b40 <__func__.2+0x2d8>
    8001a964:	00008517          	auipc	a0,0x8
    8001a968:	28450513          	addi	a0,a0,644 # 80022be8 <__func__.2+0x380>
    8001a96c:	304060ef          	jal	80020c70 <printf>
    8001a970:	4511                	li	a0,4
    8001a972:	966e60ef          	jal	80000ad8 <goto_priv>
    8001a976:	a33e60ef          	jal	800013a8 <reset_state>
}
    8001a97a:	60e2                	ld	ra,24(sp)
    8001a97c:	6442                	ld	s0,16(sp)
    8001a97e:	8526                	mv	a0,s1
    8001a980:	64a2                	ld	s1,8(sp)
    8001a982:	6105                	addi	sp,sp,32
    8001a984:	8082                	ret

000000008001a986 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001a986:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a988:	00008597          	auipc	a1,0x8
    8001a98c:	a4058593          	addi	a1,a1,-1472 # 800223c8 <__func__.8>
    8001a990:	00008517          	auipc	a0,0x8
    8001a994:	1c050513          	addi	a0,a0,448 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_2(){
    8001a998:	ec06                	sd	ra,24(sp)
    8001a99a:	e822                	sd	s0,16(sp)
    8001a99c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a99e:	2d2060ef          	jal	80020c70 <printf>
    8001a9a2:	4529                	li	a0,10
    8001a9a4:	15d050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001a9a8:	4511                	li	a0,4
    8001a9aa:	92ee60ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a9ae:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a9b2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a9b6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a9ba:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a9be:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a9c2:	10000793          	li	a5,256
    8001a9c6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a9ca:	20000793          	li	a5,512
    8001a9ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a9d2:	40000793          	li	a5,1024
    8001a9d6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a9da:	6785                	lui	a5,0x1
    8001a9dc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a9e0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a9e4:	4785                	li	a5,1
    8001a9e6:	07fe                	slli	a5,a5,0x1f
    8001a9e8:	4485                	li	s1,1
    8001a9ea:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a9ee:	08100793          	li	a5,129
    8001a9f2:	07e2                	slli	a5,a5,0x18
    8001a9f4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a9f8:	08000793          	li	a5,128
    8001a9fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001aa00:	67a1                	lui	a5,0x8
    8001aa02:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001aa06:	450d                	li	a0,3
    8001aa08:	8d0e60ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aa0c:	0330000f          	fence	rw,rw
    8001aa10:	0002a417          	auipc	s0,0x2a
    8001aa14:	60040413          	addi	s0,s0,1536 # 80045010 <excpt>
    8001aa18:	0002a797          	auipc	a5,0x2a
    8001aa1c:	6207b823          	sd	zero,1584(a5) # 80045048 <excpt+0x38>
    8001aa20:	00941023          	sh	s1,0(s0)
    8001aa24:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001aa28:	02149793          	slli	a5,s1,0x21
    8001aa2c:	40078793          	addi	a5,a5,1024
    8001aa30:	00000297          	auipc	t0,0x0
    8001aa34:	00c28293          	addi	t0,t0,12 # 8001aa3c <instruction_access_fault_2+0xb6>
    8001aa38:	02543c23          	sd	t0,56(s0)
    8001aa3c:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001aa3e:	08200593          	li	a1,130
    8001aa42:	0000e617          	auipc	a2,0xe
    8001aa46:	43e60613          	addi	a2,a2,1086 # 80028e80 <__func__.2+0x6618>
    8001aa4a:	00008517          	auipc	a0,0x8
    8001aa4e:	11e50513          	addi	a0,a0,286 # 80022b68 <__func__.2+0x300>
    8001aa52:	21e060ef          	jal	80020c70 <printf>
    8001aa56:	0002a797          	auipc	a5,0x2a
    8001aa5a:	5bb7c783          	lbu	a5,1467(a5) # 80045011 <excpt+0x1>
    8001aa5e:	00008597          	auipc	a1,0x8
    8001aa62:	0e258593          	addi	a1,a1,226 # 80022b40 <__func__.2+0x2d8>
    8001aa66:	cf81                	beqz	a5,8001aa7e <instruction_access_fault_2+0xf8>
    8001aa68:	641c                	ld	a5,8(s0)
    8001aa6a:	00008597          	auipc	a1,0x8
    8001aa6e:	0c658593          	addi	a1,a1,198 # 80022b30 <__func__.2+0x2c8>
    8001aa72:	00978663          	beq	a5,s1,8001aa7e <instruction_access_fault_2+0xf8>
    8001aa76:	00008597          	auipc	a1,0x8
    8001aa7a:	0ca58593          	addi	a1,a1,202 # 80022b40 <__func__.2+0x2d8>
    8001aa7e:	00008517          	auipc	a0,0x8
    8001aa82:	10250513          	addi	a0,a0,258 # 80022b80 <__func__.2+0x318>
    8001aa86:	1ea060ef          	jal	80020c70 <printf>
    8001aa8a:	0002a797          	auipc	a5,0x2a
    8001aa8e:	5877c783          	lbu	a5,1415(a5) # 80045011 <excpt+0x1>
    8001aa92:	c789                	beqz	a5,8001aa9c <instruction_access_fault_2+0x116>
    8001aa94:	6418                	ld	a4,8(s0)
    8001aa96:	4785                	li	a5,1
    8001aa98:	00f70c63          	beq	a4,a5,8001aab0 <instruction_access_fault_2+0x12a>
    8001aa9c:	00008517          	auipc	a0,0x8
    8001aaa0:	0ec50513          	addi	a0,a0,236 # 80022b88 <__func__.2+0x320>
    8001aaa4:	1cc060ef          	jal	80020c70 <printf>
    8001aaa8:	02900513          	li	a0,41
    8001aaac:	055050ef          	jal	80020300 <putchar>
    8001aab0:	4529                	li	a0,10
    8001aab2:	04f050ef          	jal	80020300 <putchar>
    8001aab6:	0002a497          	auipc	s1,0x2a
    8001aaba:	55b4c483          	lbu	s1,1371(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001aabe:	00008597          	auipc	a1,0x8
    8001aac2:	08258593          	addi	a1,a1,130 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001aac6:	cc91                	beqz	s1,8001aae2 <instruction_access_fault_2+0x15c>
    8001aac8:	6418                	ld	a4,8(s0)
    8001aaca:	4785                	li	a5,1
    TEST_END();
    8001aacc:	00008597          	auipc	a1,0x8
    8001aad0:	06458593          	addi	a1,a1,100 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001aad4:	00f70763          	beq	a4,a5,8001aae2 <instruction_access_fault_2+0x15c>
    8001aad8:	4481                	li	s1,0
    TEST_END();
    8001aada:	00008597          	auipc	a1,0x8
    8001aade:	06658593          	addi	a1,a1,102 # 80022b40 <__func__.2+0x2d8>
    8001aae2:	00008517          	auipc	a0,0x8
    8001aae6:	10650513          	addi	a0,a0,262 # 80022be8 <__func__.2+0x380>
    8001aaea:	186060ef          	jal	80020c70 <printf>
    8001aaee:	4511                	li	a0,4
    8001aaf0:	fe9e50ef          	jal	80000ad8 <goto_priv>
    8001aaf4:	8b5e60ef          	jal	800013a8 <reset_state>
}
    8001aaf8:	60e2                	ld	ra,24(sp)
    8001aafa:	6442                	ld	s0,16(sp)
    8001aafc:	8526                	mv	a0,s1
    8001aafe:	64a2                	ld	s1,8(sp)
    8001ab00:	6105                	addi	sp,sp,32
    8001ab02:	8082                	ret

000000008001ab04 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001ab04:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ab06:	00008597          	auipc	a1,0x8
    8001ab0a:	8e258593          	addi	a1,a1,-1822 # 800223e8 <__func__.7>
    8001ab0e:	00008517          	auipc	a0,0x8
    8001ab12:	04250513          	addi	a0,a0,66 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_3(){
    8001ab16:	ec06                	sd	ra,24(sp)
    8001ab18:	e822                	sd	s0,16(sp)
    8001ab1a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ab1c:	154060ef          	jal	80020c70 <printf>
    8001ab20:	4529                	li	a0,10
    8001ab22:	7de050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001ab26:	4511                	li	a0,4
    8001ab28:	fb1e50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ab2c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ab30:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ab34:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ab38:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ab3c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ab40:	10000793          	li	a5,256
    8001ab44:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ab48:	20000793          	li	a5,512
    8001ab4c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ab50:	40000793          	li	a5,1024
    8001ab54:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ab58:	6785                	lui	a5,0x1
    8001ab5a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ab5e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ab62:	4785                	li	a5,1
    8001ab64:	07fe                	slli	a5,a5,0x1f
    8001ab66:	4485                	li	s1,1
    8001ab68:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ab6c:	08100793          	li	a5,129
    8001ab70:	07e2                	slli	a5,a5,0x18
    8001ab72:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ab76:	08000793          	li	a5,128
    8001ab7a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ab7e:	67a1                	lui	a5,0x8
    8001ab80:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001ab84:	8526                	mv	a0,s1
    8001ab86:	f53e50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ab8a:	0330000f          	fence	rw,rw
    8001ab8e:	0002a417          	auipc	s0,0x2a
    8001ab92:	48240413          	addi	s0,s0,1154 # 80045010 <excpt>
    8001ab96:	0002a797          	auipc	a5,0x2a
    8001ab9a:	4a07b923          	sd	zero,1202(a5) # 80045048 <excpt+0x38>
    8001ab9e:	00941023          	sh	s1,0(s0)
    8001aba2:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001aba6:	02149793          	slli	a5,s1,0x21
    8001abaa:	40078793          	addi	a5,a5,1024
    8001abae:	00000297          	auipc	t0,0x0
    8001abb2:	00c28293          	addi	t0,t0,12 # 8001abba <instruction_access_fault_3+0xb6>
    8001abb6:	02543c23          	sd	t0,56(s0)
    8001abba:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001abbc:	08200593          	li	a1,130
    8001abc0:	0000e617          	auipc	a2,0xe
    8001abc4:	30860613          	addi	a2,a2,776 # 80028ec8 <__func__.2+0x6660>
    8001abc8:	00008517          	auipc	a0,0x8
    8001abcc:	fa050513          	addi	a0,a0,-96 # 80022b68 <__func__.2+0x300>
    8001abd0:	0a0060ef          	jal	80020c70 <printf>
    8001abd4:	0002a797          	auipc	a5,0x2a
    8001abd8:	43d7c783          	lbu	a5,1085(a5) # 80045011 <excpt+0x1>
    8001abdc:	00008597          	auipc	a1,0x8
    8001abe0:	f6458593          	addi	a1,a1,-156 # 80022b40 <__func__.2+0x2d8>
    8001abe4:	cf81                	beqz	a5,8001abfc <instruction_access_fault_3+0xf8>
    8001abe6:	641c                	ld	a5,8(s0)
    8001abe8:	00008597          	auipc	a1,0x8
    8001abec:	f4858593          	addi	a1,a1,-184 # 80022b30 <__func__.2+0x2c8>
    8001abf0:	00978663          	beq	a5,s1,8001abfc <instruction_access_fault_3+0xf8>
    8001abf4:	00008597          	auipc	a1,0x8
    8001abf8:	f4c58593          	addi	a1,a1,-180 # 80022b40 <__func__.2+0x2d8>
    8001abfc:	00008517          	auipc	a0,0x8
    8001ac00:	f8450513          	addi	a0,a0,-124 # 80022b80 <__func__.2+0x318>
    8001ac04:	06c060ef          	jal	80020c70 <printf>
    8001ac08:	0002a797          	auipc	a5,0x2a
    8001ac0c:	4097c783          	lbu	a5,1033(a5) # 80045011 <excpt+0x1>
    8001ac10:	c789                	beqz	a5,8001ac1a <instruction_access_fault_3+0x116>
    8001ac12:	6418                	ld	a4,8(s0)
    8001ac14:	4785                	li	a5,1
    8001ac16:	00f70c63          	beq	a4,a5,8001ac2e <instruction_access_fault_3+0x12a>
    8001ac1a:	00008517          	auipc	a0,0x8
    8001ac1e:	f6e50513          	addi	a0,a0,-146 # 80022b88 <__func__.2+0x320>
    8001ac22:	04e060ef          	jal	80020c70 <printf>
    8001ac26:	02900513          	li	a0,41
    8001ac2a:	6d6050ef          	jal	80020300 <putchar>
    8001ac2e:	4529                	li	a0,10
    8001ac30:	6d0050ef          	jal	80020300 <putchar>
    8001ac34:	0002a497          	auipc	s1,0x2a
    8001ac38:	3dd4c483          	lbu	s1,989(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ac3c:	00008597          	auipc	a1,0x8
    8001ac40:	f0458593          	addi	a1,a1,-252 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ac44:	cc91                	beqz	s1,8001ac60 <instruction_access_fault_3+0x15c>
    8001ac46:	6418                	ld	a4,8(s0)
    8001ac48:	4785                	li	a5,1
    TEST_END();
    8001ac4a:	00008597          	auipc	a1,0x8
    8001ac4e:	ee658593          	addi	a1,a1,-282 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ac52:	00f70763          	beq	a4,a5,8001ac60 <instruction_access_fault_3+0x15c>
    8001ac56:	4481                	li	s1,0
    TEST_END();
    8001ac58:	00008597          	auipc	a1,0x8
    8001ac5c:	ee858593          	addi	a1,a1,-280 # 80022b40 <__func__.2+0x2d8>
    8001ac60:	00008517          	auipc	a0,0x8
    8001ac64:	f8850513          	addi	a0,a0,-120 # 80022be8 <__func__.2+0x380>
    8001ac68:	008060ef          	jal	80020c70 <printf>
    8001ac6c:	4511                	li	a0,4
    8001ac6e:	e6be50ef          	jal	80000ad8 <goto_priv>
    8001ac72:	f36e60ef          	jal	800013a8 <reset_state>
}
    8001ac76:	60e2                	ld	ra,24(sp)
    8001ac78:	6442                	ld	s0,16(sp)
    8001ac7a:	8526                	mv	a0,s1
    8001ac7c:	64a2                	ld	s1,8(sp)
    8001ac7e:	6105                	addi	sp,sp,32
    8001ac80:	8082                	ret

000000008001ac82 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001ac82:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ac84:	00007597          	auipc	a1,0x7
    8001ac88:	78458593          	addi	a1,a1,1924 # 80022408 <__func__.6>
    8001ac8c:	00008517          	auipc	a0,0x8
    8001ac90:	ec450513          	addi	a0,a0,-316 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_4(){
    8001ac94:	ec06                	sd	ra,24(sp)
    8001ac96:	e822                	sd	s0,16(sp)
    8001ac98:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ac9a:	7d7050ef          	jal	80020c70 <printf>
    8001ac9e:	4529                	li	a0,10
    8001aca0:	660050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001aca4:	4511                	li	a0,4
    8001aca6:	e33e50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001acaa:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001acae:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001acb2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001acb6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001acba:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001acbe:	10000793          	li	a5,256
    8001acc2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001acc6:	20000793          	li	a5,512
    8001acca:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001acce:	40000793          	li	a5,1024
    8001acd2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001acd6:	6785                	lui	a5,0x1
    8001acd8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001acdc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ace0:	4785                	li	a5,1
    8001ace2:	07fe                	slli	a5,a5,0x1f
    8001ace4:	4485                	li	s1,1
    8001ace6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001acea:	08100793          	li	a5,129
    8001acee:	07e2                	slli	a5,a5,0x18
    8001acf0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001acf4:	08000793          	li	a5,128
    8001acf8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001acfc:	67a1                	lui	a5,0x8
    8001acfe:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001ad02:	4501                	li	a0,0
    8001ad04:	dd5e50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ad08:	0330000f          	fence	rw,rw
    8001ad0c:	0002a417          	auipc	s0,0x2a
    8001ad10:	30440413          	addi	s0,s0,772 # 80045010 <excpt>
    8001ad14:	0002a797          	auipc	a5,0x2a
    8001ad18:	3207ba23          	sd	zero,820(a5) # 80045048 <excpt+0x38>
    8001ad1c:	00941023          	sh	s1,0(s0)
    8001ad20:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ad24:	02149793          	slli	a5,s1,0x21
    8001ad28:	40078793          	addi	a5,a5,1024
    8001ad2c:	00000297          	auipc	t0,0x0
    8001ad30:	00c28293          	addi	t0,t0,12 # 8001ad38 <instruction_access_fault_4+0xb6>
    8001ad34:	02543c23          	sd	t0,56(s0)
    8001ad38:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ad3a:	08200593          	li	a1,130
    8001ad3e:	0000e617          	auipc	a2,0xe
    8001ad42:	1d260613          	addi	a2,a2,466 # 80028f10 <__func__.2+0x66a8>
    8001ad46:	00008517          	auipc	a0,0x8
    8001ad4a:	e2250513          	addi	a0,a0,-478 # 80022b68 <__func__.2+0x300>
    8001ad4e:	723050ef          	jal	80020c70 <printf>
    8001ad52:	0002a797          	auipc	a5,0x2a
    8001ad56:	2bf7c783          	lbu	a5,703(a5) # 80045011 <excpt+0x1>
    8001ad5a:	00008597          	auipc	a1,0x8
    8001ad5e:	de658593          	addi	a1,a1,-538 # 80022b40 <__func__.2+0x2d8>
    8001ad62:	cf81                	beqz	a5,8001ad7a <instruction_access_fault_4+0xf8>
    8001ad64:	641c                	ld	a5,8(s0)
    8001ad66:	00008597          	auipc	a1,0x8
    8001ad6a:	dca58593          	addi	a1,a1,-566 # 80022b30 <__func__.2+0x2c8>
    8001ad6e:	00978663          	beq	a5,s1,8001ad7a <instruction_access_fault_4+0xf8>
    8001ad72:	00008597          	auipc	a1,0x8
    8001ad76:	dce58593          	addi	a1,a1,-562 # 80022b40 <__func__.2+0x2d8>
    8001ad7a:	00008517          	auipc	a0,0x8
    8001ad7e:	e0650513          	addi	a0,a0,-506 # 80022b80 <__func__.2+0x318>
    8001ad82:	6ef050ef          	jal	80020c70 <printf>
    8001ad86:	0002a797          	auipc	a5,0x2a
    8001ad8a:	28b7c783          	lbu	a5,651(a5) # 80045011 <excpt+0x1>
    8001ad8e:	c789                	beqz	a5,8001ad98 <instruction_access_fault_4+0x116>
    8001ad90:	6418                	ld	a4,8(s0)
    8001ad92:	4785                	li	a5,1
    8001ad94:	00f70c63          	beq	a4,a5,8001adac <instruction_access_fault_4+0x12a>
    8001ad98:	00008517          	auipc	a0,0x8
    8001ad9c:	df050513          	addi	a0,a0,-528 # 80022b88 <__func__.2+0x320>
    8001ada0:	6d1050ef          	jal	80020c70 <printf>
    8001ada4:	02900513          	li	a0,41
    8001ada8:	558050ef          	jal	80020300 <putchar>
    8001adac:	4529                	li	a0,10
    8001adae:	552050ef          	jal	80020300 <putchar>
    8001adb2:	0002a497          	auipc	s1,0x2a
    8001adb6:	25f4c483          	lbu	s1,607(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001adba:	00008597          	auipc	a1,0x8
    8001adbe:	d8658593          	addi	a1,a1,-634 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001adc2:	cc91                	beqz	s1,8001adde <instruction_access_fault_4+0x15c>
    8001adc4:	6418                	ld	a4,8(s0)
    8001adc6:	4785                	li	a5,1
    TEST_END();
    8001adc8:	00008597          	auipc	a1,0x8
    8001adcc:	d6858593          	addi	a1,a1,-664 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001add0:	00f70763          	beq	a4,a5,8001adde <instruction_access_fault_4+0x15c>
    8001add4:	4481                	li	s1,0
    TEST_END();
    8001add6:	00008597          	auipc	a1,0x8
    8001adda:	d6a58593          	addi	a1,a1,-662 # 80022b40 <__func__.2+0x2d8>
    8001adde:	00008517          	auipc	a0,0x8
    8001ade2:	e0a50513          	addi	a0,a0,-502 # 80022be8 <__func__.2+0x380>
    8001ade6:	68b050ef          	jal	80020c70 <printf>
    8001adea:	4511                	li	a0,4
    8001adec:	cede50ef          	jal	80000ad8 <goto_priv>
    8001adf0:	db8e60ef          	jal	800013a8 <reset_state>
}
    8001adf4:	60e2                	ld	ra,24(sp)
    8001adf6:	6442                	ld	s0,16(sp)
    8001adf8:	8526                	mv	a0,s1
    8001adfa:	64a2                	ld	s1,8(sp)
    8001adfc:	6105                	addi	sp,sp,32
    8001adfe:	8082                	ret

000000008001ae00 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001ae00:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ae02:	00007597          	auipc	a1,0x7
    8001ae06:	62658593          	addi	a1,a1,1574 # 80022428 <__func__.5>
    8001ae0a:	00008517          	auipc	a0,0x8
    8001ae0e:	d4650513          	addi	a0,a0,-698 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_5(){
    8001ae12:	e406                	sd	ra,8(sp)
    8001ae14:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ae16:	65b050ef          	jal	80020c70 <printf>
    8001ae1a:	4529                	li	a0,10
    8001ae1c:	4e4050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001ae20:	4511                	li	a0,4
    8001ae22:	cb7e50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ae26:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ae2a:	10000793          	li	a5,256
    8001ae2e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ae32:	20000793          	li	a5,512
    8001ae36:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ae3a:	40000793          	li	a5,1024
    8001ae3e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ae42:	6785                	lui	a5,0x1
    8001ae44:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ae48:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x8000000);
    8001ae4c:	080007b7          	lui	a5,0x8000
    8001ae50:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x8100000);
    8001ae54:	081007b7          	lui	a5,0x8100
    8001ae58:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ae5c:	67a1                	lui	a5,0x8
    8001ae5e:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001ae62:	0330000f          	fence	rw,rw
    8001ae66:	0002a417          	auipc	s0,0x2a
    8001ae6a:	1aa40413          	addi	s0,s0,426 # 80045010 <excpt>
    8001ae6e:	4785                	li	a5,1
    8001ae70:	0002a717          	auipc	a4,0x2a
    8001ae74:	1c073c23          	sd	zero,472(a4) # 80045048 <excpt+0x38>
    8001ae78:	00f41023          	sh	a5,0(s0)
    8001ae7c:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x8000100UL << 2);
    8001ae80:	200007b7          	lui	a5,0x20000
    8001ae84:	40078793          	addi	a5,a5,1024 # 20000400 <STACK_SIZE+0x1ff00400>
    8001ae88:	00000297          	auipc	t0,0x0
    8001ae8c:	00c28293          	addi	t0,t0,12 # 8001ae94 <instruction_access_fault_5+0x94>
    8001ae90:	02543c23          	sd	t0,56(s0)
    8001ae94:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001ae96:	0002a597          	auipc	a1,0x2a
    8001ae9a:	17b5c583          	lbu	a1,379(a1) # 80045011 <excpt+0x1>
    8001ae9e:	00008517          	auipc	a0,0x8
    8001aea2:	f9250513          	addi	a0,a0,-110 # 80022e30 <__func__.2+0x5c8>
    8001aea6:	5cb050ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001aeaa:	640c                	ld	a1,8(s0)
    8001aeac:	00008517          	auipc	a0,0x8
    8001aeb0:	f8450513          	addi	a0,a0,-124 # 80022e30 <__func__.2+0x5c8>
    8001aeb4:	5bd050ef          	jal	80020c70 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001aeb8:	08200593          	li	a1,130
    8001aebc:	0000e617          	auipc	a2,0xe
    8001aec0:	09c60613          	addi	a2,a2,156 # 80028f58 <__func__.2+0x66f0>
    8001aec4:	00008517          	auipc	a0,0x8
    8001aec8:	ca450513          	addi	a0,a0,-860 # 80022b68 <__func__.2+0x300>
    8001aecc:	5a5050ef          	jal	80020c70 <printf>
    8001aed0:	0002a797          	auipc	a5,0x2a
    8001aed4:	1417c783          	lbu	a5,321(a5) # 80045011 <excpt+0x1>
    8001aed8:	00008597          	auipc	a1,0x8
    8001aedc:	c5858593          	addi	a1,a1,-936 # 80022b30 <__func__.2+0x2c8>
    8001aee0:	c789                	beqz	a5,8001aeea <instruction_access_fault_5+0xea>
    8001aee2:	00008597          	auipc	a1,0x8
    8001aee6:	c5e58593          	addi	a1,a1,-930 # 80022b40 <__func__.2+0x2d8>
    8001aeea:	00008517          	auipc	a0,0x8
    8001aeee:	c9650513          	addi	a0,a0,-874 # 80022b80 <__func__.2+0x318>
    8001aef2:	57f050ef          	jal	80020c70 <printf>
    8001aef6:	0002a797          	auipc	a5,0x2a
    8001aefa:	11b7c783          	lbu	a5,283(a5) # 80045011 <excpt+0x1>
    8001aefe:	e7a1                	bnez	a5,8001af46 <instruction_access_fault_5+0x146>
    8001af00:	4529                	li	a0,10
    8001af02:	3fe050ef          	jal	80020300 <putchar>
    8001af06:	0002a797          	auipc	a5,0x2a
    8001af0a:	10b7c783          	lbu	a5,267(a5) # 80045011 <excpt+0x1>
    8001af0e:	e795                	bnez	a5,8001af3a <instruction_access_fault_5+0x13a>
    8001af10:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001af12:	00008597          	auipc	a1,0x8
    8001af16:	c1e58593          	addi	a1,a1,-994 # 80022b30 <__func__.2+0x2c8>
    8001af1a:	00008517          	auipc	a0,0x8
    8001af1e:	cce50513          	addi	a0,a0,-818 # 80022be8 <__func__.2+0x380>
    8001af22:	54f050ef          	jal	80020c70 <printf>
    8001af26:	4511                	li	a0,4
    8001af28:	bb1e50ef          	jal	80000ad8 <goto_priv>
    8001af2c:	c7ce60ef          	jal	800013a8 <reset_state>
}
    8001af30:	60a2                	ld	ra,8(sp)
    8001af32:	8522                	mv	a0,s0
    8001af34:	6402                	ld	s0,0(sp)
    8001af36:	0141                	addi	sp,sp,16
    8001af38:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001af3a:	4401                	li	s0,0
    TEST_END();
    8001af3c:	00008597          	auipc	a1,0x8
    8001af40:	c0458593          	addi	a1,a1,-1020 # 80022b40 <__func__.2+0x2d8>
    8001af44:	bfd9                	j	8001af1a <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001af46:	00008517          	auipc	a0,0x8
    8001af4a:	c4250513          	addi	a0,a0,-958 # 80022b88 <__func__.2+0x320>
    8001af4e:	523050ef          	jal	80020c70 <printf>
    8001af52:	02900513          	li	a0,41
    8001af56:	3aa050ef          	jal	80020300 <putchar>
    8001af5a:	b75d                	j	8001af00 <instruction_access_fault_5+0x100>

000000008001af5c <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001af5c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001af5e:	00007597          	auipc	a1,0x7
    8001af62:	4ea58593          	addi	a1,a1,1258 # 80022448 <__func__.4>
    8001af66:	00008517          	auipc	a0,0x8
    8001af6a:	bea50513          	addi	a0,a0,-1046 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_6(){
    8001af6e:	ec06                	sd	ra,24(sp)
    8001af70:	e822                	sd	s0,16(sp)
    8001af72:	e426                	sd	s1,8(sp)
    TEST_START();
    8001af74:	4fd050ef          	jal	80020c70 <printf>
    8001af78:	4529                	li	a0,10
    8001af7a:	386050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001af7e:	4511                	li	a0,4
    8001af80:	b59e50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001af84:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001af88:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001af8c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001af90:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001af94:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001af98:	10000793          	li	a5,256
    8001af9c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001afa0:	20000793          	li	a5,512
    8001afa4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001afa8:	40000793          	li	a5,1024
    8001afac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001afb0:	6785                	lui	a5,0x1
    8001afb2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001afb6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001afba:	4785                	li	a5,1
    8001afbc:	07fe                	slli	a5,a5,0x1f
    8001afbe:	4485                	li	s1,1
    8001afc0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001afc4:	08100793          	li	a5,129
    8001afc8:	07e2                	slli	a5,a5,0x18
    8001afca:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001afce:	08000793          	li	a5,128
    8001afd2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001afd6:	67a1                	lui	a5,0x8
    8001afd8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001afdc:	450d                	li	a0,3
    8001afde:	afbe50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001afe2:	0330000f          	fence	rw,rw
    8001afe6:	0002a417          	auipc	s0,0x2a
    8001afea:	02a40413          	addi	s0,s0,42 # 80045010 <excpt>
    8001afee:	0002a797          	auipc	a5,0x2a
    8001aff2:	0407bd23          	sd	zero,90(a5) # 80045048 <excpt+0x38>
    8001aff6:	00941023          	sh	s1,0(s0)
    8001affa:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001affe:	02149793          	slli	a5,s1,0x21
    8001b002:	40078793          	addi	a5,a5,1024
    8001b006:	00000297          	auipc	t0,0x0
    8001b00a:	00c28293          	addi	t0,t0,12 # 8001b012 <instruction_access_fault_6+0xb6>
    8001b00e:	02543c23          	sd	t0,56(s0)
    8001b012:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b014:	08200593          	li	a1,130
    8001b018:	0000e617          	auipc	a2,0xe
    8001b01c:	f8860613          	addi	a2,a2,-120 # 80028fa0 <__func__.2+0x6738>
    8001b020:	00008517          	auipc	a0,0x8
    8001b024:	b4850513          	addi	a0,a0,-1208 # 80022b68 <__func__.2+0x300>
    8001b028:	449050ef          	jal	80020c70 <printf>
    8001b02c:	0002a797          	auipc	a5,0x2a
    8001b030:	fe57c783          	lbu	a5,-27(a5) # 80045011 <excpt+0x1>
    8001b034:	00008597          	auipc	a1,0x8
    8001b038:	b0c58593          	addi	a1,a1,-1268 # 80022b40 <__func__.2+0x2d8>
    8001b03c:	cf81                	beqz	a5,8001b054 <instruction_access_fault_6+0xf8>
    8001b03e:	641c                	ld	a5,8(s0)
    8001b040:	00008597          	auipc	a1,0x8
    8001b044:	af058593          	addi	a1,a1,-1296 # 80022b30 <__func__.2+0x2c8>
    8001b048:	00978663          	beq	a5,s1,8001b054 <instruction_access_fault_6+0xf8>
    8001b04c:	00008597          	auipc	a1,0x8
    8001b050:	af458593          	addi	a1,a1,-1292 # 80022b40 <__func__.2+0x2d8>
    8001b054:	00008517          	auipc	a0,0x8
    8001b058:	b2c50513          	addi	a0,a0,-1236 # 80022b80 <__func__.2+0x318>
    8001b05c:	415050ef          	jal	80020c70 <printf>
    8001b060:	0002a797          	auipc	a5,0x2a
    8001b064:	fb17c783          	lbu	a5,-79(a5) # 80045011 <excpt+0x1>
    8001b068:	c789                	beqz	a5,8001b072 <instruction_access_fault_6+0x116>
    8001b06a:	6418                	ld	a4,8(s0)
    8001b06c:	4785                	li	a5,1
    8001b06e:	00f70c63          	beq	a4,a5,8001b086 <instruction_access_fault_6+0x12a>
    8001b072:	00008517          	auipc	a0,0x8
    8001b076:	b1650513          	addi	a0,a0,-1258 # 80022b88 <__func__.2+0x320>
    8001b07a:	3f7050ef          	jal	80020c70 <printf>
    8001b07e:	02900513          	li	a0,41
    8001b082:	27e050ef          	jal	80020300 <putchar>
    8001b086:	4529                	li	a0,10
    8001b088:	278050ef          	jal	80020300 <putchar>
    8001b08c:	0002a497          	auipc	s1,0x2a
    8001b090:	f854c483          	lbu	s1,-123(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001b094:	00008597          	auipc	a1,0x8
    8001b098:	aac58593          	addi	a1,a1,-1364 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b09c:	cc91                	beqz	s1,8001b0b8 <instruction_access_fault_6+0x15c>
    8001b09e:	6418                	ld	a4,8(s0)
    8001b0a0:	4785                	li	a5,1
    TEST_END();
    8001b0a2:	00008597          	auipc	a1,0x8
    8001b0a6:	a8e58593          	addi	a1,a1,-1394 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b0aa:	00f70763          	beq	a4,a5,8001b0b8 <instruction_access_fault_6+0x15c>
    8001b0ae:	4481                	li	s1,0
    TEST_END();
    8001b0b0:	00008597          	auipc	a1,0x8
    8001b0b4:	a9058593          	addi	a1,a1,-1392 # 80022b40 <__func__.2+0x2d8>
    8001b0b8:	00008517          	auipc	a0,0x8
    8001b0bc:	b3050513          	addi	a0,a0,-1232 # 80022be8 <__func__.2+0x380>
    8001b0c0:	3b1050ef          	jal	80020c70 <printf>
    8001b0c4:	4511                	li	a0,4
    8001b0c6:	a13e50ef          	jal	80000ad8 <goto_priv>
    8001b0ca:	adee60ef          	jal	800013a8 <reset_state>
}
    8001b0ce:	60e2                	ld	ra,24(sp)
    8001b0d0:	6442                	ld	s0,16(sp)
    8001b0d2:	8526                	mv	a0,s1
    8001b0d4:	64a2                	ld	s1,8(sp)
    8001b0d6:	6105                	addi	sp,sp,32
    8001b0d8:	8082                	ret

000000008001b0da <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001b0da:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b0dc:	00007597          	auipc	a1,0x7
    8001b0e0:	38c58593          	addi	a1,a1,908 # 80022468 <__func__.3>
    8001b0e4:	00008517          	auipc	a0,0x8
    8001b0e8:	a6c50513          	addi	a0,a0,-1428 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_7(){
    8001b0ec:	ec06                	sd	ra,24(sp)
    8001b0ee:	e822                	sd	s0,16(sp)
    8001b0f0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b0f2:	37f050ef          	jal	80020c70 <printf>
    8001b0f6:	4529                	li	a0,10
    8001b0f8:	208050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001b0fc:	4511                	li	a0,4
    8001b0fe:	9dbe50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b102:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b106:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b10a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b10e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b112:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b116:	10000793          	li	a5,256
    8001b11a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b11e:	20000793          	li	a5,512
    8001b122:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b126:	40000793          	li	a5,1024
    8001b12a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b12e:	6785                	lui	a5,0x1
    8001b130:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b134:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b138:	4785                	li	a5,1
    8001b13a:	07fe                	slli	a5,a5,0x1f
    8001b13c:	4485                	li	s1,1
    8001b13e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b142:	08100793          	li	a5,129
    8001b146:	07e2                	slli	a5,a5,0x18
    8001b148:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b14c:	08000793          	li	a5,128
    8001b150:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b154:	67a1                	lui	a5,0x8
    8001b156:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001b15a:	8526                	mv	a0,s1
    8001b15c:	97de50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b160:	0330000f          	fence	rw,rw
    8001b164:	0002a417          	auipc	s0,0x2a
    8001b168:	eac40413          	addi	s0,s0,-340 # 80045010 <excpt>
    8001b16c:	0002a797          	auipc	a5,0x2a
    8001b170:	ec07be23          	sd	zero,-292(a5) # 80045048 <excpt+0x38>
    8001b174:	00941023          	sh	s1,0(s0)
    8001b178:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001b17c:	02149793          	slli	a5,s1,0x21
    8001b180:	40078793          	addi	a5,a5,1024
    8001b184:	00000297          	auipc	t0,0x0
    8001b188:	00c28293          	addi	t0,t0,12 # 8001b190 <instruction_access_fault_7+0xb6>
    8001b18c:	02543c23          	sd	t0,56(s0)
    8001b190:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b192:	08200593          	li	a1,130
    8001b196:	0000e617          	auipc	a2,0xe
    8001b19a:	e5260613          	addi	a2,a2,-430 # 80028fe8 <__func__.2+0x6780>
    8001b19e:	00008517          	auipc	a0,0x8
    8001b1a2:	9ca50513          	addi	a0,a0,-1590 # 80022b68 <__func__.2+0x300>
    8001b1a6:	2cb050ef          	jal	80020c70 <printf>
    8001b1aa:	0002a797          	auipc	a5,0x2a
    8001b1ae:	e677c783          	lbu	a5,-409(a5) # 80045011 <excpt+0x1>
    8001b1b2:	00008597          	auipc	a1,0x8
    8001b1b6:	98e58593          	addi	a1,a1,-1650 # 80022b40 <__func__.2+0x2d8>
    8001b1ba:	cf81                	beqz	a5,8001b1d2 <instruction_access_fault_7+0xf8>
    8001b1bc:	641c                	ld	a5,8(s0)
    8001b1be:	00008597          	auipc	a1,0x8
    8001b1c2:	97258593          	addi	a1,a1,-1678 # 80022b30 <__func__.2+0x2c8>
    8001b1c6:	00978663          	beq	a5,s1,8001b1d2 <instruction_access_fault_7+0xf8>
    8001b1ca:	00008597          	auipc	a1,0x8
    8001b1ce:	97658593          	addi	a1,a1,-1674 # 80022b40 <__func__.2+0x2d8>
    8001b1d2:	00008517          	auipc	a0,0x8
    8001b1d6:	9ae50513          	addi	a0,a0,-1618 # 80022b80 <__func__.2+0x318>
    8001b1da:	297050ef          	jal	80020c70 <printf>
    8001b1de:	0002a797          	auipc	a5,0x2a
    8001b1e2:	e337c783          	lbu	a5,-461(a5) # 80045011 <excpt+0x1>
    8001b1e6:	c789                	beqz	a5,8001b1f0 <instruction_access_fault_7+0x116>
    8001b1e8:	6418                	ld	a4,8(s0)
    8001b1ea:	4785                	li	a5,1
    8001b1ec:	00f70c63          	beq	a4,a5,8001b204 <instruction_access_fault_7+0x12a>
    8001b1f0:	00008517          	auipc	a0,0x8
    8001b1f4:	99850513          	addi	a0,a0,-1640 # 80022b88 <__func__.2+0x320>
    8001b1f8:	279050ef          	jal	80020c70 <printf>
    8001b1fc:	02900513          	li	a0,41
    8001b200:	100050ef          	jal	80020300 <putchar>
    8001b204:	4529                	li	a0,10
    8001b206:	0fa050ef          	jal	80020300 <putchar>
    8001b20a:	0002a497          	auipc	s1,0x2a
    8001b20e:	e074c483          	lbu	s1,-505(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001b212:	00008597          	auipc	a1,0x8
    8001b216:	92e58593          	addi	a1,a1,-1746 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b21a:	cc91                	beqz	s1,8001b236 <instruction_access_fault_7+0x15c>
    8001b21c:	6418                	ld	a4,8(s0)
    8001b21e:	4785                	li	a5,1
    TEST_END();
    8001b220:	00008597          	auipc	a1,0x8
    8001b224:	91058593          	addi	a1,a1,-1776 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b228:	00f70763          	beq	a4,a5,8001b236 <instruction_access_fault_7+0x15c>
    8001b22c:	4481                	li	s1,0
    TEST_END();
    8001b22e:	00008597          	auipc	a1,0x8
    8001b232:	91258593          	addi	a1,a1,-1774 # 80022b40 <__func__.2+0x2d8>
    8001b236:	00008517          	auipc	a0,0x8
    8001b23a:	9b250513          	addi	a0,a0,-1614 # 80022be8 <__func__.2+0x380>
    8001b23e:	233050ef          	jal	80020c70 <printf>
    8001b242:	4511                	li	a0,4
    8001b244:	895e50ef          	jal	80000ad8 <goto_priv>
    8001b248:	960e60ef          	jal	800013a8 <reset_state>
}
    8001b24c:	60e2                	ld	ra,24(sp)
    8001b24e:	6442                	ld	s0,16(sp)
    8001b250:	8526                	mv	a0,s1
    8001b252:	64a2                	ld	s1,8(sp)
    8001b254:	6105                	addi	sp,sp,32
    8001b256:	8082                	ret

000000008001b258 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001b258:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b25a:	00007597          	auipc	a1,0x7
    8001b25e:	22e58593          	addi	a1,a1,558 # 80022488 <__func__.2>
    8001b262:	00008517          	auipc	a0,0x8
    8001b266:	8ee50513          	addi	a0,a0,-1810 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_8(){
    8001b26a:	ec06                	sd	ra,24(sp)
    8001b26c:	e822                	sd	s0,16(sp)
    8001b26e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b270:	201050ef          	jal	80020c70 <printf>
    8001b274:	4529                	li	a0,10
    8001b276:	08a050ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001b27a:	4511                	li	a0,4
    8001b27c:	85de50ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b280:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b284:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b288:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b28c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b290:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b294:	10000793          	li	a5,256
    8001b298:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b29c:	20000793          	li	a5,512
    8001b2a0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b2a4:	40000793          	li	a5,1024
    8001b2a8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b2ac:	6785                	lui	a5,0x1
    8001b2ae:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b2b2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b2b6:	4785                	li	a5,1
    8001b2b8:	07fe                	slli	a5,a5,0x1f
    8001b2ba:	4485                	li	s1,1
    8001b2bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b2c0:	08100793          	li	a5,129
    8001b2c4:	07e2                	slli	a5,a5,0x18
    8001b2c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b2ca:	08000793          	li	a5,128
    8001b2ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b2d2:	67a1                	lui	a5,0x8
    8001b2d4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b2d8:	4501                	li	a0,0
    8001b2da:	ffee50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b2de:	0330000f          	fence	rw,rw
    8001b2e2:	0002a417          	auipc	s0,0x2a
    8001b2e6:	d2e40413          	addi	s0,s0,-722 # 80045010 <excpt>
    8001b2ea:	0002a797          	auipc	a5,0x2a
    8001b2ee:	d407bf23          	sd	zero,-674(a5) # 80045048 <excpt+0x38>
    8001b2f2:	00941023          	sh	s1,0(s0)
    8001b2f6:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001b2fa:	02149793          	slli	a5,s1,0x21
    8001b2fe:	40078793          	addi	a5,a5,1024
    8001b302:	00000297          	auipc	t0,0x0
    8001b306:	00c28293          	addi	t0,t0,12 # 8001b30e <instruction_access_fault_8+0xb6>
    8001b30a:	02543c23          	sd	t0,56(s0)
    8001b30e:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b310:	08200593          	li	a1,130
    8001b314:	0000e617          	auipc	a2,0xe
    8001b318:	d1c60613          	addi	a2,a2,-740 # 80029030 <__func__.2+0x67c8>
    8001b31c:	00008517          	auipc	a0,0x8
    8001b320:	84c50513          	addi	a0,a0,-1972 # 80022b68 <__func__.2+0x300>
    8001b324:	14d050ef          	jal	80020c70 <printf>
    8001b328:	0002a797          	auipc	a5,0x2a
    8001b32c:	ce97c783          	lbu	a5,-791(a5) # 80045011 <excpt+0x1>
    8001b330:	00008597          	auipc	a1,0x8
    8001b334:	81058593          	addi	a1,a1,-2032 # 80022b40 <__func__.2+0x2d8>
    8001b338:	cf81                	beqz	a5,8001b350 <instruction_access_fault_8+0xf8>
    8001b33a:	641c                	ld	a5,8(s0)
    8001b33c:	00007597          	auipc	a1,0x7
    8001b340:	7f458593          	addi	a1,a1,2036 # 80022b30 <__func__.2+0x2c8>
    8001b344:	00978663          	beq	a5,s1,8001b350 <instruction_access_fault_8+0xf8>
    8001b348:	00007597          	auipc	a1,0x7
    8001b34c:	7f858593          	addi	a1,a1,2040 # 80022b40 <__func__.2+0x2d8>
    8001b350:	00008517          	auipc	a0,0x8
    8001b354:	83050513          	addi	a0,a0,-2000 # 80022b80 <__func__.2+0x318>
    8001b358:	119050ef          	jal	80020c70 <printf>
    8001b35c:	0002a797          	auipc	a5,0x2a
    8001b360:	cb57c783          	lbu	a5,-843(a5) # 80045011 <excpt+0x1>
    8001b364:	c789                	beqz	a5,8001b36e <instruction_access_fault_8+0x116>
    8001b366:	6418                	ld	a4,8(s0)
    8001b368:	4785                	li	a5,1
    8001b36a:	00f70c63          	beq	a4,a5,8001b382 <instruction_access_fault_8+0x12a>
    8001b36e:	00008517          	auipc	a0,0x8
    8001b372:	81a50513          	addi	a0,a0,-2022 # 80022b88 <__func__.2+0x320>
    8001b376:	0fb050ef          	jal	80020c70 <printf>
    8001b37a:	02900513          	li	a0,41
    8001b37e:	783040ef          	jal	80020300 <putchar>
    8001b382:	4529                	li	a0,10
    8001b384:	77d040ef          	jal	80020300 <putchar>
    8001b388:	0002a497          	auipc	s1,0x2a
    8001b38c:	c894c483          	lbu	s1,-887(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001b390:	00007597          	auipc	a1,0x7
    8001b394:	7b058593          	addi	a1,a1,1968 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b398:	cc91                	beqz	s1,8001b3b4 <instruction_access_fault_8+0x15c>
    8001b39a:	6418                	ld	a4,8(s0)
    8001b39c:	4785                	li	a5,1
    TEST_END();
    8001b39e:	00007597          	auipc	a1,0x7
    8001b3a2:	79258593          	addi	a1,a1,1938 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001b3a6:	00f70763          	beq	a4,a5,8001b3b4 <instruction_access_fault_8+0x15c>
    8001b3aa:	4481                	li	s1,0
    TEST_END();
    8001b3ac:	00007597          	auipc	a1,0x7
    8001b3b0:	79458593          	addi	a1,a1,1940 # 80022b40 <__func__.2+0x2d8>
    8001b3b4:	00008517          	auipc	a0,0x8
    8001b3b8:	83450513          	addi	a0,a0,-1996 # 80022be8 <__func__.2+0x380>
    8001b3bc:	0b5050ef          	jal	80020c70 <printf>
    8001b3c0:	4511                	li	a0,4
    8001b3c2:	f16e50ef          	jal	80000ad8 <goto_priv>
    8001b3c6:	fe3e50ef          	jal	800013a8 <reset_state>
}
    8001b3ca:	60e2                	ld	ra,24(sp)
    8001b3cc:	6442                	ld	s0,16(sp)
    8001b3ce:	8526                	mv	a0,s1
    8001b3d0:	64a2                	ld	s1,8(sp)
    8001b3d2:	6105                	addi	sp,sp,32
    8001b3d4:	8082                	ret

000000008001b3d6 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001b3d6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b3d8:	00007597          	auipc	a1,0x7
    8001b3dc:	0d058593          	addi	a1,a1,208 # 800224a8 <__func__.1>
    8001b3e0:	00007517          	auipc	a0,0x7
    8001b3e4:	77050513          	addi	a0,a0,1904 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_9(){
    8001b3e8:	ec06                	sd	ra,24(sp)
    8001b3ea:	e822                	sd	s0,16(sp)
    8001b3ec:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b3ee:	083050ef          	jal	80020c70 <printf>
    8001b3f2:	4529                	li	a0,10
    8001b3f4:	70d040ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001b3f8:	4511                	li	a0,4
    8001b3fa:	edee50ef          	jal	80000ad8 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b3fe:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b402:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b406:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b40a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b40e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b412:	10000793          	li	a5,256
    8001b416:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b41a:	20000793          	li	a5,512
    8001b41e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b422:	40000793          	li	a5,1024
    8001b426:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b42a:	6785                	lui	a5,0x1
    8001b42c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b430:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b434:	4785                	li	a5,1
    8001b436:	07fe                	slli	a5,a5,0x1f
    8001b438:	4485                	li	s1,1
    8001b43a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b43e:	08100793          	li	a5,129
    8001b442:	07e2                	slli	a5,a5,0x18
    8001b444:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b448:	08000793          	li	a5,128
    8001b44c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b450:	67a1                	lui	a5,0x8
    8001b452:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b456:	4501                	li	a0,0
    8001b458:	e80e50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b45c:	0330000f          	fence	rw,rw
    8001b460:	0002a417          	auipc	s0,0x2a
    8001b464:	bb040413          	addi	s0,s0,-1104 # 80045010 <excpt>
    8001b468:	0002a797          	auipc	a5,0x2a
    8001b46c:	be07b023          	sd	zero,-1056(a5) # 80045048 <excpt+0x38>
    8001b470:	00941023          	sh	s1,0(s0)
    8001b474:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001b478:	02349793          	slli	a5,s1,0x23
    8001b47c:	17e1                	addi	a5,a5,-8
    8001b47e:	00000297          	auipc	t0,0x0
    8001b482:	00c28293          	addi	t0,t0,12 # 8001b48a <instruction_access_fault_9+0xb4>
    8001b486:	02543c23          	sd	t0,56(s0)
    8001b48a:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001b48c:	08200593          	li	a1,130
    8001b490:	0000e617          	auipc	a2,0xe
    8001b494:	bd860613          	addi	a2,a2,-1064 # 80029068 <__func__.2+0x6800>
    8001b498:	00007517          	auipc	a0,0x7
    8001b49c:	6d050513          	addi	a0,a0,1744 # 80022b68 <__func__.2+0x300>
    8001b4a0:	7d0050ef          	jal	80020c70 <printf>
    8001b4a4:	0002a797          	auipc	a5,0x2a
    8001b4a8:	b6d7c783          	lbu	a5,-1171(a5) # 80045011 <excpt+0x1>
    8001b4ac:	00007597          	auipc	a1,0x7
    8001b4b0:	69458593          	addi	a1,a1,1684 # 80022b40 <__func__.2+0x2d8>
    8001b4b4:	cf81                	beqz	a5,8001b4cc <instruction_access_fault_9+0xf6>
    8001b4b6:	641c                	ld	a5,8(s0)
    8001b4b8:	00007597          	auipc	a1,0x7
    8001b4bc:	67858593          	addi	a1,a1,1656 # 80022b30 <__func__.2+0x2c8>
    8001b4c0:	00978663          	beq	a5,s1,8001b4cc <instruction_access_fault_9+0xf6>
    8001b4c4:	00007597          	auipc	a1,0x7
    8001b4c8:	67c58593          	addi	a1,a1,1660 # 80022b40 <__func__.2+0x2d8>
    8001b4cc:	00007517          	auipc	a0,0x7
    8001b4d0:	6b450513          	addi	a0,a0,1716 # 80022b80 <__func__.2+0x318>
    8001b4d4:	79c050ef          	jal	80020c70 <printf>
    8001b4d8:	0002a797          	auipc	a5,0x2a
    8001b4dc:	b397c783          	lbu	a5,-1223(a5) # 80045011 <excpt+0x1>
    8001b4e0:	c789                	beqz	a5,8001b4ea <instruction_access_fault_9+0x114>
    8001b4e2:	6418                	ld	a4,8(s0)
    8001b4e4:	4785                	li	a5,1
    8001b4e6:	00f70c63          	beq	a4,a5,8001b4fe <instruction_access_fault_9+0x128>
    8001b4ea:	00007517          	auipc	a0,0x7
    8001b4ee:	69e50513          	addi	a0,a0,1694 # 80022b88 <__func__.2+0x320>
    8001b4f2:	77e050ef          	jal	80020c70 <printf>
    8001b4f6:	02900513          	li	a0,41
    8001b4fa:	607040ef          	jal	80020300 <putchar>
    8001b4fe:	4529                	li	a0,10
    8001b500:	601040ef          	jal	80020300 <putchar>
    8001b504:	0002a497          	auipc	s1,0x2a
    8001b508:	b0d4c483          	lbu	s1,-1267(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001b50c:	00007597          	auipc	a1,0x7
    8001b510:	63458593          	addi	a1,a1,1588 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001b514:	cc91                	beqz	s1,8001b530 <instruction_access_fault_9+0x15a>
    8001b516:	6418                	ld	a4,8(s0)
    8001b518:	4785                	li	a5,1
    TEST_END();
    8001b51a:	00007597          	auipc	a1,0x7
    8001b51e:	61658593          	addi	a1,a1,1558 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001b522:	00f70763          	beq	a4,a5,8001b530 <instruction_access_fault_9+0x15a>
    8001b526:	4481                	li	s1,0
    TEST_END();
    8001b528:	00007597          	auipc	a1,0x7
    8001b52c:	61858593          	addi	a1,a1,1560 # 80022b40 <__func__.2+0x2d8>
    8001b530:	00007517          	auipc	a0,0x7
    8001b534:	6b850513          	addi	a0,a0,1720 # 80022be8 <__func__.2+0x380>
    8001b538:	738050ef          	jal	80020c70 <printf>
    8001b53c:	4511                	li	a0,4
    8001b53e:	d9ae50ef          	jal	80000ad8 <goto_priv>
    8001b542:	e67e50ef          	jal	800013a8 <reset_state>
}
    8001b546:	60e2                	ld	ra,24(sp)
    8001b548:	6442                	ld	s0,16(sp)
    8001b54a:	8526                	mv	a0,s1
    8001b54c:	64a2                	ld	s1,8(sp)
    8001b54e:	6105                	addi	sp,sp,32
    8001b550:	8082                	ret

000000008001b552 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001b552:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b554:	00007597          	auipc	a1,0x7
    8001b558:	f7458593          	addi	a1,a1,-140 # 800224c8 <__func__.0>
    8001b55c:	00007517          	auipc	a0,0x7
    8001b560:	5f450513          	addi	a0,a0,1524 # 80022b50 <__func__.2+0x2e8>
bool instruction_access_fault_10(){
    8001b564:	ec06                	sd	ra,24(sp)
    8001b566:	e822                	sd	s0,16(sp)
    8001b568:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b56a:	706050ef          	jal	80020c70 <printf>
    8001b56e:	4529                	li	a0,10
    8001b570:	591040ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001b574:	4511                	li	a0,4
    8001b576:	d62e50ef          	jal	80000ad8 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b57a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b57e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b582:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b586:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b58a:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b58e:	4785                	li	a5,1
    8001b590:	07fe                	slli	a5,a5,0x1f
    8001b592:	4485                	li	s1,1
    8001b594:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b598:	08000793          	li	a5,128
    8001b59c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_M);
    8001b5a0:	4511                	li	a0,4
    8001b5a2:	d36e50ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b5a6:	0330000f          	fence	rw,rw
    8001b5aa:	0002a417          	auipc	s0,0x2a
    8001b5ae:	a6640413          	addi	s0,s0,-1434 # 80045010 <excpt>
    8001b5b2:	0002a797          	auipc	a5,0x2a
    8001b5b6:	a807bb23          	sd	zero,-1386(a5) # 80045048 <excpt+0x38>
    8001b5ba:	00941023          	sh	s1,0(s0)
    8001b5be:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x90000000UL << 2);
    8001b5c2:	47a5                	li	a5,9
    8001b5c4:	07fa                	slli	a5,a5,0x1e
    8001b5c6:	00000297          	auipc	t0,0x0
    8001b5ca:	00c28293          	addi	t0,t0,12 # 8001b5d2 <instruction_access_fault_10+0x80>
    8001b5ce:	02543c23          	sd	t0,56(s0)
    8001b5d2:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001b5d4:	08200593          	li	a1,130
    8001b5d8:	0000e617          	auipc	a2,0xe
    8001b5dc:	b0060613          	addi	a2,a2,-1280 # 800290d8 <__func__.2+0x6870>
    8001b5e0:	00007517          	auipc	a0,0x7
    8001b5e4:	58850513          	addi	a0,a0,1416 # 80022b68 <__func__.2+0x300>
    8001b5e8:	688050ef          	jal	80020c70 <printf>
    8001b5ec:	0002a797          	auipc	a5,0x2a
    8001b5f0:	a257c783          	lbu	a5,-1499(a5) # 80045011 <excpt+0x1>
    8001b5f4:	00007597          	auipc	a1,0x7
    8001b5f8:	54c58593          	addi	a1,a1,1356 # 80022b40 <__func__.2+0x2d8>
    8001b5fc:	cf81                	beqz	a5,8001b614 <instruction_access_fault_10+0xc2>
    8001b5fe:	641c                	ld	a5,8(s0)
    8001b600:	00007597          	auipc	a1,0x7
    8001b604:	53058593          	addi	a1,a1,1328 # 80022b30 <__func__.2+0x2c8>
    8001b608:	00978663          	beq	a5,s1,8001b614 <instruction_access_fault_10+0xc2>
    8001b60c:	00007597          	auipc	a1,0x7
    8001b610:	53458593          	addi	a1,a1,1332 # 80022b40 <__func__.2+0x2d8>
    8001b614:	00007517          	auipc	a0,0x7
    8001b618:	56c50513          	addi	a0,a0,1388 # 80022b80 <__func__.2+0x318>
    8001b61c:	654050ef          	jal	80020c70 <printf>
    8001b620:	0002a797          	auipc	a5,0x2a
    8001b624:	9f17c783          	lbu	a5,-1551(a5) # 80045011 <excpt+0x1>
    8001b628:	c789                	beqz	a5,8001b632 <instruction_access_fault_10+0xe0>
    8001b62a:	6418                	ld	a4,8(s0)
    8001b62c:	4785                	li	a5,1
    8001b62e:	00f70c63          	beq	a4,a5,8001b646 <instruction_access_fault_10+0xf4>
    8001b632:	00007517          	auipc	a0,0x7
    8001b636:	55650513          	addi	a0,a0,1366 # 80022b88 <__func__.2+0x320>
    8001b63a:	636050ef          	jal	80020c70 <printf>
    8001b63e:	02900513          	li	a0,41
    8001b642:	4bf040ef          	jal	80020300 <putchar>
    8001b646:	4529                	li	a0,10
    8001b648:	4b9040ef          	jal	80020300 <putchar>
    8001b64c:	0002a497          	auipc	s1,0x2a
    8001b650:	9c54c483          	lbu	s1,-1595(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001b654:	00007597          	auipc	a1,0x7
    8001b658:	4ec58593          	addi	a1,a1,1260 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001b65c:	cc91                	beqz	s1,8001b678 <instruction_access_fault_10+0x126>
    8001b65e:	6418                	ld	a4,8(s0)
    8001b660:	4785                	li	a5,1
    TEST_END();
    8001b662:	00007597          	auipc	a1,0x7
    8001b666:	4ce58593          	addi	a1,a1,1230 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001b66a:	00f70763          	beq	a4,a5,8001b678 <instruction_access_fault_10+0x126>
    8001b66e:	4481                	li	s1,0
    TEST_END();
    8001b670:	00007597          	auipc	a1,0x7
    8001b674:	4d058593          	addi	a1,a1,1232 # 80022b40 <__func__.2+0x2d8>
    8001b678:	00007517          	auipc	a0,0x7
    8001b67c:	57050513          	addi	a0,a0,1392 # 80022be8 <__func__.2+0x380>
    8001b680:	5f0050ef          	jal	80020c70 <printf>
    8001b684:	4511                	li	a0,4
    8001b686:	c52e50ef          	jal	80000ad8 <goto_priv>
    8001b68a:	d1fe50ef          	jal	800013a8 <reset_state>
    8001b68e:	60e2                	ld	ra,24(sp)
    8001b690:	6442                	ld	s0,16(sp)
    8001b692:	8526                	mv	a0,s1
    8001b694:	64a2                	ld	s1,8(sp)
    8001b696:	6105                	addi	sp,sp,32
    8001b698:	8082                	ret

000000008001b69a <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001b69a:	1101                	addi	sp,sp,-32

TEST_START();
    8001b69c:	00007597          	auipc	a1,0x7
    8001b6a0:	e4c58593          	addi	a1,a1,-436 # 800224e8 <__func__.9>
    8001b6a4:	00007517          	auipc	a0,0x7
    8001b6a8:	4ac50513          	addi	a0,a0,1196 # 80022b50 <__func__.2+0x2e8>
bool mstatus_csr_tests_1(){
    8001b6ac:	ec06                	sd	ra,24(sp)
    8001b6ae:	e822                	sd	s0,16(sp)
    8001b6b0:	e426                	sd	s1,8(sp)
TEST_START();
    8001b6b2:	5be050ef          	jal	80020c70 <printf>
    8001b6b6:	4529                	li	a0,10
    8001b6b8:	449040ef          	jal	80020300 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001b6bc:	450d                	li	a0,3
    8001b6be:	c1ae50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001b6c2:	f1fe40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b6c6:	95ce50ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001b6ca:	4509                	li	a0,2
    8001b6cc:	c0ce50ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001b6d0:	fe1e40ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001b6d4:	4511                	li	a0,4
    8001b6d6:	c02e50ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001b6da:	000407b7          	lui	a5,0x40
    8001b6de:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001b6e2:	0330000f          	fence	rw,rw
    8001b6e6:	0002a417          	auipc	s0,0x2a
    8001b6ea:	92a40413          	addi	s0,s0,-1750 # 80045010 <excpt>
    8001b6ee:	4785                	li	a5,1
    8001b6f0:	0002a717          	auipc	a4,0x2a
    8001b6f4:	94073c23          	sd	zero,-1704(a4) # 80045048 <excpt+0x38>
    8001b6f8:	00f41023          	sh	a5,0(s0)
    8001b6fc:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001b700:	450d                	li	a0,3
    8001b702:	bd6e50ef          	jal	80000ad8 <goto_priv>
    asm volatile(
    8001b706:	000807b7          	lui	a5,0x80
    8001b70a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001b70c:	07b6                	slli	a5,a5,0xd
    8001b70e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001b712:	08200593          	li	a1,130
    8001b716:	0000e617          	auipc	a2,0xe
    8001b71a:	a2260613          	addi	a2,a2,-1502 # 80029138 <__func__.2+0x68d0>
    8001b71e:	00007517          	auipc	a0,0x7
    8001b722:	44a50513          	addi	a0,a0,1098 # 80022b68 <__func__.2+0x300>
    8001b726:	54a050ef          	jal	80020c70 <printf>
    8001b72a:	0002a797          	auipc	a5,0x2a
    8001b72e:	8e77c783          	lbu	a5,-1817(a5) # 80045011 <excpt+0x1>
    8001b732:	00007597          	auipc	a1,0x7
    8001b736:	40e58593          	addi	a1,a1,1038 # 80022b40 <__func__.2+0x2d8>
    8001b73a:	cf89                	beqz	a5,8001b754 <mstatus_csr_tests_1+0xba>
    8001b73c:	6418                	ld	a4,8(s0)
    8001b73e:	47b5                	li	a5,13
    8001b740:	00007597          	auipc	a1,0x7
    8001b744:	3f058593          	addi	a1,a1,1008 # 80022b30 <__func__.2+0x2c8>
    8001b748:	00f70663          	beq	a4,a5,8001b754 <mstatus_csr_tests_1+0xba>
    8001b74c:	00007597          	auipc	a1,0x7
    8001b750:	3f458593          	addi	a1,a1,1012 # 80022b40 <__func__.2+0x2d8>
    8001b754:	00007517          	auipc	a0,0x7
    8001b758:	42c50513          	addi	a0,a0,1068 # 80022b80 <__func__.2+0x318>
    8001b75c:	514050ef          	jal	80020c70 <printf>
    8001b760:	0002a797          	auipc	a5,0x2a
    8001b764:	8b17c783          	lbu	a5,-1871(a5) # 80045011 <excpt+0x1>
    8001b768:	c789                	beqz	a5,8001b772 <mstatus_csr_tests_1+0xd8>
    8001b76a:	6418                	ld	a4,8(s0)
    8001b76c:	47b5                	li	a5,13
    8001b76e:	00f70c63          	beq	a4,a5,8001b786 <mstatus_csr_tests_1+0xec>
    8001b772:	00007517          	auipc	a0,0x7
    8001b776:	41650513          	addi	a0,a0,1046 # 80022b88 <__func__.2+0x320>
    8001b77a:	4f6050ef          	jal	80020c70 <printf>
    8001b77e:	02900513          	li	a0,41
    8001b782:	37f040ef          	jal	80020300 <putchar>
    8001b786:	4529                	li	a0,10
    8001b788:	379040ef          	jal	80020300 <putchar>
    8001b78c:	0002a497          	auipc	s1,0x2a
    8001b790:	8854c483          	lbu	s1,-1915(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001b794:	00007597          	auipc	a1,0x7
    8001b798:	3ac58593          	addi	a1,a1,940 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001b79c:	cc91                	beqz	s1,8001b7b8 <mstatus_csr_tests_1+0x11e>
    8001b79e:	6418                	ld	a4,8(s0)
    8001b7a0:	47b5                	li	a5,13
    TEST_END();
    8001b7a2:	00007597          	auipc	a1,0x7
    8001b7a6:	38e58593          	addi	a1,a1,910 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001b7aa:	00f70763          	beq	a4,a5,8001b7b8 <mstatus_csr_tests_1+0x11e>
    8001b7ae:	4481                	li	s1,0
    TEST_END();
    8001b7b0:	00007597          	auipc	a1,0x7
    8001b7b4:	39058593          	addi	a1,a1,912 # 80022b40 <__func__.2+0x2d8>
    8001b7b8:	00007517          	auipc	a0,0x7
    8001b7bc:	43050513          	addi	a0,a0,1072 # 80022be8 <__func__.2+0x380>
    8001b7c0:	4b0050ef          	jal	80020c70 <printf>
    8001b7c4:	4511                	li	a0,4
    8001b7c6:	b12e50ef          	jal	80000ad8 <goto_priv>
    8001b7ca:	bdfe50ef          	jal	800013a8 <reset_state>
}
    8001b7ce:	60e2                	ld	ra,24(sp)
    8001b7d0:	6442                	ld	s0,16(sp)
    8001b7d2:	8526                	mv	a0,s1
    8001b7d4:	64a2                	ld	s1,8(sp)
    8001b7d6:	6105                	addi	sp,sp,32
    8001b7d8:	8082                	ret

000000008001b7da <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001b7da:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b7dc:	00007597          	auipc	a1,0x7
    8001b7e0:	d2458593          	addi	a1,a1,-732 # 80022500 <__func__.7>
    8001b7e4:	00007517          	auipc	a0,0x7
    8001b7e8:	36c50513          	addi	a0,a0,876 # 80022b50 <__func__.2+0x2e8>
bool mstatus_csr_tests_2(){
    8001b7ec:	e406                	sd	ra,8(sp)
    8001b7ee:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b7f0:	480050ef          	jal	80020c70 <printf>
    8001b7f4:	4529                	li	a0,10
    8001b7f6:	30b040ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001b7fa:	450d                	li	a0,3
    8001b7fc:	adce50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001b800:	de1e40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b804:	81ee50ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001b808:	4509                	li	a0,2
    8001b80a:	acee50ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001b80e:	ea3e40ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001b812:	4511                	li	a0,4
    8001b814:	ac4e50ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8001b818:	b91e50ef          	jal	800013a8 <reset_state>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001b81c:	000407b7          	lui	a5,0x40
    8001b820:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001b824:	0330000f          	fence	rw,rw
    8001b828:	00029417          	auipc	s0,0x29
    8001b82c:	7e840413          	addi	s0,s0,2024 # 80045010 <excpt>
    8001b830:	4785                	li	a5,1
    8001b832:	0002a717          	auipc	a4,0x2a
    8001b836:	80073b23          	sd	zero,-2026(a4) # 80045048 <excpt+0x38>
    8001b83a:	00f41023          	sh	a5,0(s0)
    8001b83e:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001b842:	450d                	li	a0,3
    8001b844:	a94e50ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001b848:	4509                	li	a0,2
    8001b84a:	9aee50ef          	jal	800009f8 <set_prev_priv>
    8001b84e:	000807b7          	lui	a5,0x80
    8001b852:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001b854:	07b6                	slli	a5,a5,0xd
    8001b856:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001b85a:	00029597          	auipc	a1,0x29
    8001b85e:	7b75c583          	lbu	a1,1975(a1) # 80045011 <excpt+0x1>
    8001b862:	00007517          	auipc	a0,0x7
    8001b866:	5ce50513          	addi	a0,a0,1486 # 80022e30 <__func__.2+0x5c8>
    8001b86a:	406050ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001b86e:	640c                	ld	a1,8(s0)
    8001b870:	00007517          	auipc	a0,0x7
    8001b874:	5c050513          	addi	a0,a0,1472 # 80022e30 <__func__.2+0x5c8>
    8001b878:	3f8050ef          	jal	80020c70 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001b87c:	08200593          	li	a1,130
    8001b880:	0000e617          	auipc	a2,0xe
    8001b884:	8f060613          	addi	a2,a2,-1808 # 80029170 <__func__.2+0x6908>
    8001b888:	00007517          	auipc	a0,0x7
    8001b88c:	2e050513          	addi	a0,a0,736 # 80022b68 <__func__.2+0x300>
    8001b890:	3e0050ef          	jal	80020c70 <printf>
    8001b894:	00029797          	auipc	a5,0x29
    8001b898:	77d7c783          	lbu	a5,1917(a5) # 80045011 <excpt+0x1>
    8001b89c:	00007597          	auipc	a1,0x7
    8001b8a0:	29458593          	addi	a1,a1,660 # 80022b30 <__func__.2+0x2c8>
    8001b8a4:	c789                	beqz	a5,8001b8ae <mstatus_csr_tests_2+0xd4>
    8001b8a6:	00007597          	auipc	a1,0x7
    8001b8aa:	29a58593          	addi	a1,a1,666 # 80022b40 <__func__.2+0x2d8>
    8001b8ae:	00007517          	auipc	a0,0x7
    8001b8b2:	2d250513          	addi	a0,a0,722 # 80022b80 <__func__.2+0x318>
    8001b8b6:	3ba050ef          	jal	80020c70 <printf>
    8001b8ba:	00029797          	auipc	a5,0x29
    8001b8be:	7577c783          	lbu	a5,1879(a5) # 80045011 <excpt+0x1>
    8001b8c2:	e7a1                	bnez	a5,8001b90a <mstatus_csr_tests_2+0x130>
    8001b8c4:	4529                	li	a0,10
    8001b8c6:	23b040ef          	jal	80020300 <putchar>
    8001b8ca:	00029797          	auipc	a5,0x29
    8001b8ce:	7477c783          	lbu	a5,1863(a5) # 80045011 <excpt+0x1>
    8001b8d2:	e795                	bnez	a5,8001b8fe <mstatus_csr_tests_2+0x124>
    8001b8d4:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b8d6:	00007597          	auipc	a1,0x7
    8001b8da:	25a58593          	addi	a1,a1,602 # 80022b30 <__func__.2+0x2c8>
    8001b8de:	00007517          	auipc	a0,0x7
    8001b8e2:	30a50513          	addi	a0,a0,778 # 80022be8 <__func__.2+0x380>
    8001b8e6:	38a050ef          	jal	80020c70 <printf>
    8001b8ea:	4511                	li	a0,4
    8001b8ec:	9ece50ef          	jal	80000ad8 <goto_priv>
    8001b8f0:	ab9e50ef          	jal	800013a8 <reset_state>
}
    8001b8f4:	60a2                	ld	ra,8(sp)
    8001b8f6:	8522                	mv	a0,s0
    8001b8f8:	6402                	ld	s0,0(sp)
    8001b8fa:	0141                	addi	sp,sp,16
    8001b8fc:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001b8fe:	4401                	li	s0,0
    TEST_END();
    8001b900:	00007597          	auipc	a1,0x7
    8001b904:	24058593          	addi	a1,a1,576 # 80022b40 <__func__.2+0x2d8>
    8001b908:	bfd9                	j	8001b8de <mstatus_csr_tests_2+0x104>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001b90a:	00007517          	auipc	a0,0x7
    8001b90e:	27e50513          	addi	a0,a0,638 # 80022b88 <__func__.2+0x320>
    8001b912:	35e050ef          	jal	80020c70 <printf>
    8001b916:	02900513          	li	a0,41
    8001b91a:	1e7040ef          	jal	80020300 <putchar>
    8001b91e:	b75d                	j	8001b8c4 <mstatus_csr_tests_2+0xea>

000000008001b920 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001b920:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b922:	00007597          	auipc	a1,0x7
    8001b926:	bf658593          	addi	a1,a1,-1034 # 80022518 <__func__.6>
    8001b92a:	00007517          	auipc	a0,0x7
    8001b92e:	22650513          	addi	a0,a0,550 # 80022b50 <__func__.2+0x2e8>
bool mstatus_csr_tests_3(){
    8001b932:	ec06                	sd	ra,24(sp)
    8001b934:	e822                	sd	s0,16(sp)
    8001b936:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b938:	338050ef          	jal	80020c70 <printf>
    8001b93c:	4529                	li	a0,10
    8001b93e:	1c3040ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001b942:	450d                	li	a0,3
    8001b944:	994e50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001b948:	c99e40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b94c:	ed7e40ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001b950:	4509                	li	a0,2
    8001b952:	986e50ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001b956:	d5be40ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001b95a:	4511                	li	a0,4
    8001b95c:	97ce50ef          	jal	80000ad8 <goto_priv>
    reset_state();
    8001b960:	a49e50ef          	jal	800013a8 <reset_state>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001b964:	000807b7          	lui	a5,0x80
    8001b968:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001b96c:	450d                	li	a0,3
    8001b96e:	96ae50ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001b972:	4509                	li	a0,2
    8001b974:	884e50ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001b978:	0330000f          	fence	rw,rw
    8001b97c:	00029417          	auipc	s0,0x29
    8001b980:	69440413          	addi	s0,s0,1684 # 80045010 <excpt>
    8001b984:	4785                	li	a5,1
    8001b986:	00029717          	auipc	a4,0x29
    8001b98a:	6c073123          	sd	zero,1730(a4) # 80045048 <excpt+0x38>
    8001b98e:	00f41023          	sh	a5,0(s0)
    8001b992:	0330000f          	fence	rw,rw
    8001b996:	001007b7          	lui	a5,0x100
    8001b99a:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001b99e:	07b2                	slli	a5,a5,0xc
    8001b9a0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001b9a4:	00029597          	auipc	a1,0x29
    8001b9a8:	66d5c583          	lbu	a1,1645(a1) # 80045011 <excpt+0x1>
    8001b9ac:	00007517          	auipc	a0,0x7
    8001b9b0:	48450513          	addi	a0,a0,1156 # 80022e30 <__func__.2+0x5c8>
    8001b9b4:	2bc050ef          	jal	80020c70 <printf>
    printf("%d\n",excpt.cause);
    8001b9b8:	640c                	ld	a1,8(s0)
    8001b9ba:	00007517          	auipc	a0,0x7
    8001b9be:	47650513          	addi	a0,a0,1142 # 80022e30 <__func__.2+0x5c8>
    8001b9c2:	2ae050ef          	jal	80020c70 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001b9c6:	08200593          	li	a1,130
    8001b9ca:	0000d617          	auipc	a2,0xd
    8001b9ce:	7de60613          	addi	a2,a2,2014 # 800291a8 <__func__.2+0x6940>
    8001b9d2:	00007517          	auipc	a0,0x7
    8001b9d6:	19650513          	addi	a0,a0,406 # 80022b68 <__func__.2+0x300>
    8001b9da:	296050ef          	jal	80020c70 <printf>
    8001b9de:	00029797          	auipc	a5,0x29
    8001b9e2:	6337c783          	lbu	a5,1587(a5) # 80045011 <excpt+0x1>
    8001b9e6:	00007597          	auipc	a1,0x7
    8001b9ea:	15a58593          	addi	a1,a1,346 # 80022b40 <__func__.2+0x2d8>
    8001b9ee:	cf89                	beqz	a5,8001ba08 <mstatus_csr_tests_3+0xe8>
    8001b9f0:	6418                	ld	a4,8(s0)
    8001b9f2:	47b5                	li	a5,13
    8001b9f4:	00007597          	auipc	a1,0x7
    8001b9f8:	13c58593          	addi	a1,a1,316 # 80022b30 <__func__.2+0x2c8>
    8001b9fc:	00f70663          	beq	a4,a5,8001ba08 <mstatus_csr_tests_3+0xe8>
    8001ba00:	00007597          	auipc	a1,0x7
    8001ba04:	14058593          	addi	a1,a1,320 # 80022b40 <__func__.2+0x2d8>
    8001ba08:	00007517          	auipc	a0,0x7
    8001ba0c:	17850513          	addi	a0,a0,376 # 80022b80 <__func__.2+0x318>
    8001ba10:	260050ef          	jal	80020c70 <printf>
    8001ba14:	00029797          	auipc	a5,0x29
    8001ba18:	5fd7c783          	lbu	a5,1533(a5) # 80045011 <excpt+0x1>
    8001ba1c:	c789                	beqz	a5,8001ba26 <mstatus_csr_tests_3+0x106>
    8001ba1e:	6418                	ld	a4,8(s0)
    8001ba20:	47b5                	li	a5,13
    8001ba22:	00f70c63          	beq	a4,a5,8001ba3a <mstatus_csr_tests_3+0x11a>
    8001ba26:	00007517          	auipc	a0,0x7
    8001ba2a:	16250513          	addi	a0,a0,354 # 80022b88 <__func__.2+0x320>
    8001ba2e:	242050ef          	jal	80020c70 <printf>
    8001ba32:	02900513          	li	a0,41
    8001ba36:	0cb040ef          	jal	80020300 <putchar>
    8001ba3a:	4529                	li	a0,10
    8001ba3c:	0c5040ef          	jal	80020300 <putchar>
    8001ba40:	00029497          	auipc	s1,0x29
    8001ba44:	5d14c483          	lbu	s1,1489(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001ba48:	00007597          	auipc	a1,0x7
    8001ba4c:	0f858593          	addi	a1,a1,248 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001ba50:	cc91                	beqz	s1,8001ba6c <mstatus_csr_tests_3+0x14c>
    8001ba52:	6418                	ld	a4,8(s0)
    8001ba54:	47b5                	li	a5,13
    TEST_END();
    8001ba56:	00007597          	auipc	a1,0x7
    8001ba5a:	0da58593          	addi	a1,a1,218 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001ba5e:	00f70763          	beq	a4,a5,8001ba6c <mstatus_csr_tests_3+0x14c>
    8001ba62:	4481                	li	s1,0
    TEST_END();
    8001ba64:	00007597          	auipc	a1,0x7
    8001ba68:	0dc58593          	addi	a1,a1,220 # 80022b40 <__func__.2+0x2d8>
    8001ba6c:	00007517          	auipc	a0,0x7
    8001ba70:	17c50513          	addi	a0,a0,380 # 80022be8 <__func__.2+0x380>
    8001ba74:	1fc050ef          	jal	80020c70 <printf>
    8001ba78:	4511                	li	a0,4
    8001ba7a:	85ee50ef          	jal	80000ad8 <goto_priv>
    8001ba7e:	92be50ef          	jal	800013a8 <reset_state>
}
    8001ba82:	60e2                	ld	ra,24(sp)
    8001ba84:	6442                	ld	s0,16(sp)
    8001ba86:	8526                	mv	a0,s1
    8001ba88:	64a2                	ld	s1,8(sp)
    8001ba8a:	6105                	addi	sp,sp,32
    8001ba8c:	8082                	ret

000000008001ba8e <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001ba8e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ba90:	00007597          	auipc	a1,0x7
    8001ba94:	aa058593          	addi	a1,a1,-1376 # 80022530 <__func__.5>
    8001ba98:	00007517          	auipc	a0,0x7
    8001ba9c:	0b850513          	addi	a0,a0,184 # 80022b50 <__func__.2+0x2e8>
bool mstatus_csr_tests_4(){
    8001baa0:	ec06                	sd	ra,24(sp)
    8001baa2:	e822                	sd	s0,16(sp)
    8001baa4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001baa6:	1ca050ef          	jal	80020c70 <printf>
    8001baaa:	4529                	li	a0,10
    8001baac:	055040ef          	jal	80020300 <putchar>

    goto_priv(PRIV_HS);
    8001bab0:	450d                	li	a0,3
    8001bab2:	826e50ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001bab6:	b2be40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001baba:	d69e40ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);
    8001babe:	4509                	li	a0,2
    8001bac0:	818e50ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001bac4:	bede40ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001bac8:	4511                	li	a0,4
    8001baca:	80ee50ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001bace:	000807b7          	lui	a5,0x80
    8001bad2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001bad6:	450d                	li	a0,3
    8001bad8:	800e50ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001badc:	4509                	li	a0,2
    8001bade:	f1be40ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001bae2:	0330000f          	fence	rw,rw
    8001bae6:	00029497          	auipc	s1,0x29
    8001baea:	52a48493          	addi	s1,s1,1322 # 80045010 <excpt>
    8001baee:	4785                	li	a5,1
    8001baf0:	00029717          	auipc	a4,0x29
    8001baf4:	54073c23          	sd	zero,1368(a4) # 80045048 <excpt+0x38>
    8001baf8:	00f49023          	sh	a5,0(s1)
    8001bafc:	0330000f          	fence	rw,rw
    8001bb00:	001007b7          	lui	a5,0x100
    8001bb04:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001bb06:	07b2                	slli	a5,a5,0xc
    8001bb08:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001bb0c:	08200593          	li	a1,130
    8001bb10:	0000d617          	auipc	a2,0xd
    8001bb14:	6d060613          	addi	a2,a2,1744 # 800291e0 <__func__.2+0x6978>
    8001bb18:	00007517          	auipc	a0,0x7
    8001bb1c:	05050513          	addi	a0,a0,80 # 80022b68 <__func__.2+0x300>
    8001bb20:	150050ef          	jal	80020c70 <printf>
    8001bb24:	00029797          	auipc	a5,0x29
    8001bb28:	4ed7c783          	lbu	a5,1261(a5) # 80045011 <excpt+0x1>
    8001bb2c:	00007597          	auipc	a1,0x7
    8001bb30:	01458593          	addi	a1,a1,20 # 80022b40 <__func__.2+0x2d8>
    8001bb34:	cf89                	beqz	a5,8001bb4e <mstatus_csr_tests_4+0xc0>
    8001bb36:	6498                	ld	a4,8(s1)
    8001bb38:	47b5                	li	a5,13
    8001bb3a:	00007597          	auipc	a1,0x7
    8001bb3e:	ff658593          	addi	a1,a1,-10 # 80022b30 <__func__.2+0x2c8>
    8001bb42:	00f70663          	beq	a4,a5,8001bb4e <mstatus_csr_tests_4+0xc0>
    8001bb46:	00007597          	auipc	a1,0x7
    8001bb4a:	ffa58593          	addi	a1,a1,-6 # 80022b40 <__func__.2+0x2d8>
    8001bb4e:	00007517          	auipc	a0,0x7
    8001bb52:	03250513          	addi	a0,a0,50 # 80022b80 <__func__.2+0x318>
    8001bb56:	11a050ef          	jal	80020c70 <printf>
    8001bb5a:	00029797          	auipc	a5,0x29
    8001bb5e:	4b77c783          	lbu	a5,1207(a5) # 80045011 <excpt+0x1>
    8001bb62:	c789                	beqz	a5,8001bb6c <mstatus_csr_tests_4+0xde>
    8001bb64:	6498                	ld	a4,8(s1)
    8001bb66:	47b5                	li	a5,13
    8001bb68:	00f70c63          	beq	a4,a5,8001bb80 <mstatus_csr_tests_4+0xf2>
    8001bb6c:	00007517          	auipc	a0,0x7
    8001bb70:	01c50513          	addi	a0,a0,28 # 80022b88 <__func__.2+0x320>
    8001bb74:	0fc050ef          	jal	80020c70 <printf>
    8001bb78:	02900513          	li	a0,41
    8001bb7c:	784040ef          	jal	80020300 <putchar>
    8001bb80:	4529                	li	a0,10
    8001bb82:	77e040ef          	jal	80020300 <putchar>
    8001bb86:	00029417          	auipc	s0,0x29
    8001bb8a:	48b44403          	lbu	s0,1163(s0) # 80045011 <excpt+0x1>
    8001bb8e:	c409                	beqz	s0,8001bb98 <mstatus_csr_tests_4+0x10a>
    8001bb90:	6498                	ld	a4,8(s1)
    8001bb92:	47b5                	li	a5,13
    8001bb94:	02f70c63          	beq	a4,a5,8001bbcc <mstatus_csr_tests_4+0x13e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001bb98:	000807b7          	lui	a5,0x80
    8001bb9c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001bba0:	4401                	li	s0,0


TEST_END();
    8001bba2:	00007597          	auipc	a1,0x7
    8001bba6:	f9e58593          	addi	a1,a1,-98 # 80022b40 <__func__.2+0x2d8>
    8001bbaa:	00007517          	auipc	a0,0x7
    8001bbae:	03e50513          	addi	a0,a0,62 # 80022be8 <__func__.2+0x380>
    8001bbb2:	0be050ef          	jal	80020c70 <printf>
    8001bbb6:	4511                	li	a0,4
    8001bbb8:	f21e40ef          	jal	80000ad8 <goto_priv>
    8001bbbc:	fece50ef          	jal	800013a8 <reset_state>

}
    8001bbc0:	60e2                	ld	ra,24(sp)
    8001bbc2:	8522                	mv	a0,s0
    8001bbc4:	6442                	ld	s0,16(sp)
    8001bbc6:	64a2                	ld	s1,8(sp)
    8001bbc8:	6105                	addi	sp,sp,32
    8001bbca:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001bbcc:	000807b7          	lui	a5,0x80
    8001bbd0:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001bbd4:	00007597          	auipc	a1,0x7
    8001bbd8:	f5c58593          	addi	a1,a1,-164 # 80022b30 <__func__.2+0x2c8>
    8001bbdc:	b7f9                	j	8001bbaa <mstatus_csr_tests_4+0x11c>

000000008001bbde <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001bbde:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bbe0:	00007597          	auipc	a1,0x7
    8001bbe4:	96858593          	addi	a1,a1,-1688 # 80022548 <__func__.4>
    8001bbe8:	00007517          	auipc	a0,0x7
    8001bbec:	f6850513          	addi	a0,a0,-152 # 80022b50 <__func__.2+0x2e8>
bool mstatus_csr_tests_5(){
    8001bbf0:	ec06                	sd	ra,24(sp)
    8001bbf2:	e822                	sd	s0,16(sp)
    8001bbf4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bbf6:	07a050ef          	jal	80020c70 <printf>
    8001bbfa:	4529                	li	a0,10
    8001bbfc:	704040ef          	jal	80020300 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001bc00:	0330000f          	fence	rw,rw
    8001bc04:	00029417          	auipc	s0,0x29
    8001bc08:	40c40413          	addi	s0,s0,1036 # 80045010 <excpt>
    8001bc0c:	4785                	li	a5,1
    8001bc0e:	00029717          	auipc	a4,0x29
    8001bc12:	42073d23          	sd	zero,1082(a4) # 80045048 <excpt+0x38>
    8001bc16:	00f41023          	sh	a5,0(s0)
    8001bc1a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001bc1e:	4511                	li	a0,4
    8001bc20:	eb9e40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001bc24:	004007b7          	lui	a5,0x400
    8001bc28:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001bc2c:	450d                	li	a0,3
    8001bc2e:	eabe40ef          	jal	80000ad8 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001bc32:	4501                	li	a0,0
    8001bc34:	dc5e40ef          	jal	800009f8 <set_prev_priv>

    TEST_EXEC_SRET();
    8001bc38:	00000297          	auipc	t0,0x0
    8001bc3c:	01028293          	addi	t0,t0,16 # 8001bc48 <mstatus_csr_tests_5+0x6a>
    8001bc40:	14129073          	csrw	sepc,t0
    8001bc44:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001bc48:	08200593          	li	a1,130
    8001bc4c:	0000a617          	auipc	a2,0xa
    8001bc50:	c8c60613          	addi	a2,a2,-884 # 800258d8 <__func__.2+0x3070>
    8001bc54:	00007517          	auipc	a0,0x7
    8001bc58:	f1450513          	addi	a0,a0,-236 # 80022b68 <__func__.2+0x300>
    8001bc5c:	014050ef          	jal	80020c70 <printf>
    8001bc60:	00029797          	auipc	a5,0x29
    8001bc64:	3b17c783          	lbu	a5,945(a5) # 80045011 <excpt+0x1>
    8001bc68:	00007597          	auipc	a1,0x7
    8001bc6c:	ed858593          	addi	a1,a1,-296 # 80022b40 <__func__.2+0x2d8>
    8001bc70:	cf89                	beqz	a5,8001bc8a <mstatus_csr_tests_5+0xac>
    8001bc72:	6418                	ld	a4,8(s0)
    8001bc74:	4789                	li	a5,2
    8001bc76:	00007597          	auipc	a1,0x7
    8001bc7a:	eba58593          	addi	a1,a1,-326 # 80022b30 <__func__.2+0x2c8>
    8001bc7e:	00f70663          	beq	a4,a5,8001bc8a <mstatus_csr_tests_5+0xac>
    8001bc82:	00007597          	auipc	a1,0x7
    8001bc86:	ebe58593          	addi	a1,a1,-322 # 80022b40 <__func__.2+0x2d8>
    8001bc8a:	00007517          	auipc	a0,0x7
    8001bc8e:	ef650513          	addi	a0,a0,-266 # 80022b80 <__func__.2+0x318>
    8001bc92:	7df040ef          	jal	80020c70 <printf>
    8001bc96:	00029797          	auipc	a5,0x29
    8001bc9a:	37b7c783          	lbu	a5,891(a5) # 80045011 <excpt+0x1>
    8001bc9e:	c789                	beqz	a5,8001bca8 <mstatus_csr_tests_5+0xca>
    8001bca0:	6418                	ld	a4,8(s0)
    8001bca2:	4789                	li	a5,2
    8001bca4:	00f70c63          	beq	a4,a5,8001bcbc <mstatus_csr_tests_5+0xde>
    8001bca8:	00007517          	auipc	a0,0x7
    8001bcac:	ee050513          	addi	a0,a0,-288 # 80022b88 <__func__.2+0x320>
    8001bcb0:	7c1040ef          	jal	80020c70 <printf>
    8001bcb4:	02900513          	li	a0,41
    8001bcb8:	648040ef          	jal	80020300 <putchar>
    8001bcbc:	4529                	li	a0,10
    8001bcbe:	642040ef          	jal	80020300 <putchar>
    8001bcc2:	00029497          	auipc	s1,0x29
    8001bcc6:	34f4c483          	lbu	s1,847(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001bcca:	00007597          	auipc	a1,0x7
    8001bcce:	e7658593          	addi	a1,a1,-394 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001bcd2:	cc91                	beqz	s1,8001bcee <mstatus_csr_tests_5+0x110>
    8001bcd4:	6418                	ld	a4,8(s0)
    8001bcd6:	4789                	li	a5,2
    TEST_END();
    8001bcd8:	00007597          	auipc	a1,0x7
    8001bcdc:	e5858593          	addi	a1,a1,-424 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001bce0:	00f70763          	beq	a4,a5,8001bcee <mstatus_csr_tests_5+0x110>
    8001bce4:	4481                	li	s1,0
    TEST_END();
    8001bce6:	00007597          	auipc	a1,0x7
    8001bcea:	e5a58593          	addi	a1,a1,-422 # 80022b40 <__func__.2+0x2d8>
    8001bcee:	00007517          	auipc	a0,0x7
    8001bcf2:	efa50513          	addi	a0,a0,-262 # 80022be8 <__func__.2+0x380>
    8001bcf6:	77b040ef          	jal	80020c70 <printf>
    8001bcfa:	4511                	li	a0,4
    8001bcfc:	ddde40ef          	jal	80000ad8 <goto_priv>
    8001bd00:	ea8e50ef          	jal	800013a8 <reset_state>

}
    8001bd04:	60e2                	ld	ra,24(sp)
    8001bd06:	6442                	ld	s0,16(sp)
    8001bd08:	8526                	mv	a0,s1
    8001bd0a:	64a2                	ld	s1,8(sp)
    8001bd0c:	6105                	addi	sp,sp,32
    8001bd0e:	8082                	ret

000000008001bd10 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001bd10:	1141                	addi	sp,sp,-16

    TEST_START();
    8001bd12:	00007597          	auipc	a1,0x7
    8001bd16:	84e58593          	addi	a1,a1,-1970 # 80022560 <__func__.3>
    8001bd1a:	00007517          	auipc	a0,0x7
    8001bd1e:	e3650513          	addi	a0,a0,-458 # 80022b50 <__func__.2+0x2e8>
bool hedeleg_csr_tests_1(){
    8001bd22:	e406                	sd	ra,8(sp)
    8001bd24:	e022                	sd	s0,0(sp)
    TEST_START();
    8001bd26:	74b040ef          	jal	80020c70 <printf>
    8001bd2a:	4529                	li	a0,10
    8001bd2c:	5d4040ef          	jal	80020300 <putchar>
    TEST_SETUP_EXCEPT();
    8001bd30:	0330000f          	fence	rw,rw
    8001bd34:	4785                	li	a5,1
    8001bd36:	00029717          	auipc	a4,0x29
    8001bd3a:	30073923          	sd	zero,786(a4) # 80045048 <excpt+0x38>
    8001bd3e:	00029717          	auipc	a4,0x29
    8001bd42:	2cf71923          	sh	a5,722(a4) # 80045010 <excpt>
    8001bd46:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001bd4a:	4511                	li	a0,4
    8001bd4c:	d8de40ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001bd50:	57fd                	li	a5,-1
    8001bd52:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001bd56:	602025f3          	csrr	a1,hedeleg
    8001bd5a:	0000d517          	auipc	a0,0xd
    8001bd5e:	99e50513          	addi	a0,a0,-1634 # 800286f8 <__func__.2+0x5e90>
    8001bd62:	70f040ef          	jal	80020c70 <printf>

    TEST_ASSERT("hedeleg right",
    8001bd66:	0000d617          	auipc	a2,0xd
    8001bd6a:	4c260613          	addi	a2,a2,1218 # 80029228 <__func__.2+0x69c0>
    8001bd6e:	08200593          	li	a1,130
    8001bd72:	00007517          	auipc	a0,0x7
    8001bd76:	df650513          	addi	a0,a0,-522 # 80022b68 <__func__.2+0x300>
    8001bd7a:	6f7040ef          	jal	80020c70 <printf>
    8001bd7e:	60202773          	csrr	a4,hedeleg
    8001bd82:	67ad                	lui	a5,0xb
    8001bd84:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bd88:	00007597          	auipc	a1,0x7
    8001bd8c:	da858593          	addi	a1,a1,-600 # 80022b30 <__func__.2+0x2c8>
    8001bd90:	00f70663          	beq	a4,a5,8001bd9c <hedeleg_csr_tests_1+0x8c>
    8001bd94:	00007597          	auipc	a1,0x7
    8001bd98:	dac58593          	addi	a1,a1,-596 # 80022b40 <__func__.2+0x2d8>
    8001bd9c:	00007517          	auipc	a0,0x7
    8001bda0:	de450513          	addi	a0,a0,-540 # 80022b80 <__func__.2+0x318>
    8001bda4:	6cd040ef          	jal	80020c70 <printf>
    8001bda8:	60202773          	csrr	a4,hedeleg
    8001bdac:	67ad                	lui	a5,0xb
    8001bdae:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bdb2:	00f70c63          	beq	a4,a5,8001bdca <hedeleg_csr_tests_1+0xba>
    8001bdb6:	00007517          	auipc	a0,0x7
    8001bdba:	dd250513          	addi	a0,a0,-558 # 80022b88 <__func__.2+0x320>
    8001bdbe:	6b3040ef          	jal	80020c70 <printf>
    8001bdc2:	02900513          	li	a0,41
    8001bdc6:	53a040ef          	jal	80020300 <putchar>
    8001bdca:	4529                	li	a0,10
    8001bdcc:	534040ef          	jal	80020300 <putchar>
    8001bdd0:	60202773          	csrr	a4,hedeleg
    8001bdd4:	67ad                	lui	a5,0xb
    8001bdd6:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bdda:	02f70763          	beq	a4,a5,8001be08 <hedeleg_csr_tests_1+0xf8>
    8001bdde:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001bde0:	00007597          	auipc	a1,0x7
    8001bde4:	d6058593          	addi	a1,a1,-672 # 80022b40 <__func__.2+0x2d8>
    8001bde8:	00007517          	auipc	a0,0x7
    8001bdec:	e0050513          	addi	a0,a0,-512 # 80022be8 <__func__.2+0x380>
    8001bdf0:	681040ef          	jal	80020c70 <printf>
    8001bdf4:	4511                	li	a0,4
    8001bdf6:	ce3e40ef          	jal	80000ad8 <goto_priv>
    8001bdfa:	daee50ef          	jal	800013a8 <reset_state>

}
    8001bdfe:	60a2                	ld	ra,8(sp)
    8001be00:	8522                	mv	a0,s0
    8001be02:	6402                	ld	s0,0(sp)
    8001be04:	0141                	addi	sp,sp,16
    8001be06:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001be08:	4405                	li	s0,1
    TEST_END();
    8001be0a:	00007597          	auipc	a1,0x7
    8001be0e:	d2658593          	addi	a1,a1,-730 # 80022b30 <__func__.2+0x2c8>
    8001be12:	bfd9                	j	8001bde8 <hedeleg_csr_tests_1+0xd8>

000000008001be14 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001be14:	1141                	addi	sp,sp,-16

    TEST_START();
    8001be16:	00006597          	auipc	a1,0x6
    8001be1a:	76258593          	addi	a1,a1,1890 # 80022578 <__func__.2>
    8001be1e:	00007517          	auipc	a0,0x7
    8001be22:	d3250513          	addi	a0,a0,-718 # 80022b50 <__func__.2+0x2e8>
bool mhpmevent_csr_tests_1(){
    8001be26:	e406                	sd	ra,8(sp)
    8001be28:	e022                	sd	s0,0(sp)
    TEST_START();
    8001be2a:	647040ef          	jal	80020c70 <printf>
    8001be2e:	4529                	li	a0,10
    8001be30:	4d0040ef          	jal	80020300 <putchar>
    TEST_SETUP_EXCEPT();
    8001be34:	0330000f          	fence	rw,rw
    8001be38:	00029797          	auipc	a5,0x29
    8001be3c:	1d878793          	addi	a5,a5,472 # 80045010 <excpt>
    8001be40:	4405                	li	s0,1
    8001be42:	0207bc23          	sd	zero,56(a5)
    8001be46:	00879023          	sh	s0,0(a5)
    8001be4a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001be4e:	4511                	li	a0,4
    8001be50:	c89e40ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001be54:	57fd                	li	a5,-1
    8001be56:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001be5a:	323025f3          	csrr	a1,mhpmevent3
    8001be5e:	0000d517          	auipc	a0,0xd
    8001be62:	89a50513          	addi	a0,a0,-1894 # 800286f8 <__func__.2+0x5e90>
    8001be66:	60b040ef          	jal	80020c70 <printf>

    TEST_END();
    8001be6a:	00007597          	auipc	a1,0x7
    8001be6e:	cc658593          	addi	a1,a1,-826 # 80022b30 <__func__.2+0x2c8>
    8001be72:	00007517          	auipc	a0,0x7
    8001be76:	d7650513          	addi	a0,a0,-650 # 80022be8 <__func__.2+0x380>
    8001be7a:	5f7040ef          	jal	80020c70 <printf>
    8001be7e:	4511                	li	a0,4
    8001be80:	c59e40ef          	jal	80000ad8 <goto_priv>
    8001be84:	d24e50ef          	jal	800013a8 <reset_state>

}
    8001be88:	60a2                	ld	ra,8(sp)
    8001be8a:	8522                	mv	a0,s0
    8001be8c:	6402                	ld	s0,0(sp)
    8001be8e:	0141                	addi	sp,sp,16
    8001be90:	8082                	ret

000000008001be92 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001be92:	1141                	addi	sp,sp,-16

    TEST_START();
    8001be94:	00006597          	auipc	a1,0x6
    8001be98:	6fc58593          	addi	a1,a1,1788 # 80022590 <__func__.1>
    8001be9c:	00007517          	auipc	a0,0x7
    8001bea0:	cb450513          	addi	a0,a0,-844 # 80022b50 <__func__.2+0x2e8>
bool tselect_csr_tests_1(){
    8001bea4:	e406                	sd	ra,8(sp)
    8001bea6:	e022                	sd	s0,0(sp)
    TEST_START();
    8001bea8:	5c9040ef          	jal	80020c70 <printf>
    8001beac:	4529                	li	a0,10
    8001beae:	452040ef          	jal	80020300 <putchar>
    TEST_SETUP_EXCEPT();
    8001beb2:	0330000f          	fence	rw,rw
    8001beb6:	4785                	li	a5,1
    8001beb8:	00029717          	auipc	a4,0x29
    8001bebc:	18073823          	sd	zero,400(a4) # 80045048 <excpt+0x38>
    8001bec0:	00029717          	auipc	a4,0x29
    8001bec4:	14f71823          	sh	a5,336(a4) # 80045010 <excpt>
    8001bec8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001becc:	4511                	li	a0,4
    8001bece:	c0be40ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001bed2:	57fd                	li	a5,-1
    8001bed4:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001bed8:	7a0025f3          	csrr	a1,tselect
    8001bedc:	0000d517          	auipc	a0,0xd
    8001bee0:	81c50513          	addi	a0,a0,-2020 # 800286f8 <__func__.2+0x5e90>
    8001bee4:	58d040ef          	jal	80020c70 <printf>

    TEST_ASSERT("tselect right",
    8001bee8:	0000d617          	auipc	a2,0xd
    8001beec:	35060613          	addi	a2,a2,848 # 80029238 <__func__.2+0x69d0>
    8001bef0:	08200593          	li	a1,130
    8001bef4:	00007517          	auipc	a0,0x7
    8001bef8:	c7450513          	addi	a0,a0,-908 # 80022b68 <__func__.2+0x300>
    8001befc:	575040ef          	jal	80020c70 <printf>
    8001bf00:	60202773          	csrr	a4,hedeleg
    8001bf04:	67ad                	lui	a5,0xb
    8001bf06:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bf0a:	00007597          	auipc	a1,0x7
    8001bf0e:	c2658593          	addi	a1,a1,-986 # 80022b30 <__func__.2+0x2c8>
    8001bf12:	00f70663          	beq	a4,a5,8001bf1e <tselect_csr_tests_1+0x8c>
    8001bf16:	00007597          	auipc	a1,0x7
    8001bf1a:	c2a58593          	addi	a1,a1,-982 # 80022b40 <__func__.2+0x2d8>
    8001bf1e:	00007517          	auipc	a0,0x7
    8001bf22:	c6250513          	addi	a0,a0,-926 # 80022b80 <__func__.2+0x318>
    8001bf26:	54b040ef          	jal	80020c70 <printf>
    8001bf2a:	60202773          	csrr	a4,hedeleg
    8001bf2e:	67ad                	lui	a5,0xb
    8001bf30:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bf34:	00f70c63          	beq	a4,a5,8001bf4c <tselect_csr_tests_1+0xba>
    8001bf38:	00007517          	auipc	a0,0x7
    8001bf3c:	c5050513          	addi	a0,a0,-944 # 80022b88 <__func__.2+0x320>
    8001bf40:	531040ef          	jal	80020c70 <printf>
    8001bf44:	02900513          	li	a0,41
    8001bf48:	3b8040ef          	jal	80020300 <putchar>
    8001bf4c:	4529                	li	a0,10
    8001bf4e:	3b2040ef          	jal	80020300 <putchar>
    8001bf52:	60202773          	csrr	a4,hedeleg
    8001bf56:	67ad                	lui	a5,0xb
    8001bf58:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001bf5c:	02f70763          	beq	a4,a5,8001bf8a <tselect_csr_tests_1+0xf8>
    8001bf60:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001bf62:	00007597          	auipc	a1,0x7
    8001bf66:	bde58593          	addi	a1,a1,-1058 # 80022b40 <__func__.2+0x2d8>
    8001bf6a:	00007517          	auipc	a0,0x7
    8001bf6e:	c7e50513          	addi	a0,a0,-898 # 80022be8 <__func__.2+0x380>
    8001bf72:	4ff040ef          	jal	80020c70 <printf>
    8001bf76:	4511                	li	a0,4
    8001bf78:	b61e40ef          	jal	80000ad8 <goto_priv>
    8001bf7c:	c2ce50ef          	jal	800013a8 <reset_state>

}
    8001bf80:	60a2                	ld	ra,8(sp)
    8001bf82:	8522                	mv	a0,s0
    8001bf84:	6402                	ld	s0,0(sp)
    8001bf86:	0141                	addi	sp,sp,16
    8001bf88:	8082                	ret
    TEST_ASSERT("tselect right",
    8001bf8a:	4405                	li	s0,1
    TEST_END();
    8001bf8c:	00007597          	auipc	a1,0x7
    8001bf90:	ba458593          	addi	a1,a1,-1116 # 80022b30 <__func__.2+0x2c8>
    8001bf94:	bfd9                	j	8001bf6a <tselect_csr_tests_1+0xd8>

000000008001bf96 <m_to_vs>:

bool m_to_vs(){
    8001bf96:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bf98:	0000e597          	auipc	a1,0xe
    8001bf9c:	52058593          	addi	a1,a1,1312 # 8002a4b8 <__func__.0>
    8001bfa0:	00007517          	auipc	a0,0x7
    8001bfa4:	bb050513          	addi	a0,a0,-1104 # 80022b50 <__func__.2+0x2e8>
bool m_to_vs(){
    8001bfa8:	ec06                	sd	ra,24(sp)
    8001bfaa:	e822                	sd	s0,16(sp)
    8001bfac:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bfae:	4c3040ef          	jal	80020c70 <printf>
    8001bfb2:	4529                	li	a0,10
    8001bfb4:	34c040ef          	jal	80020300 <putchar>
    TEST_SETUP_EXCEPT();
    8001bfb8:	0330000f          	fence	rw,rw
    8001bfbc:	00029797          	auipc	a5,0x29
    8001bfc0:	05478793          	addi	a5,a5,84 # 80045010 <excpt>
    8001bfc4:	4405                	li	s0,1
    8001bfc6:	0207bc23          	sd	zero,56(a5)
    8001bfca:	00879023          	sh	s0,0(a5)
    8001bfce:	0330000f          	fence	rw,rw
    
    goto_priv(PRIV_M);
    8001bfd2:	4511                	li	a0,4
    8001bfd4:	b05e40ef          	jal	80000ad8 <goto_priv>
    printf("%d\n",curr_priv);
    8001bfd8:	00010497          	auipc	s1,0x10
    8001bfdc:	4f448493          	addi	s1,s1,1268 # 8002c4cc <curr_priv>
    8001bfe0:	408c                	lw	a1,0(s1)
    8001bfe2:	00007517          	auipc	a0,0x7
    8001bfe6:	e4e50513          	addi	a0,a0,-434 # 80022e30 <__func__.2+0x5c8>
    8001bfea:	487040ef          	jal	80020c70 <printf>
    goto_priv(PRIV_VS);
    8001bfee:	4509                	li	a0,2
    8001bff0:	ae9e40ef          	jal	80000ad8 <goto_priv>
    printf("%d\n",curr_priv);
    8001bff4:	408c                	lw	a1,0(s1)
    8001bff6:	00007517          	auipc	a0,0x7
    8001bffa:	e3a50513          	addi	a0,a0,-454 # 80022e30 <__func__.2+0x5c8>
    8001bffe:	473040ef          	jal	80020c70 <printf>


    TEST_END();
    8001c002:	00007597          	auipc	a1,0x7
    8001c006:	b2e58593          	addi	a1,a1,-1234 # 80022b30 <__func__.2+0x2c8>
    8001c00a:	00007517          	auipc	a0,0x7
    8001c00e:	bde50513          	addi	a0,a0,-1058 # 80022be8 <__func__.2+0x380>
    8001c012:	45f040ef          	jal	80020c70 <printf>
    8001c016:	4511                	li	a0,4
    8001c018:	ac1e40ef          	jal	80000ad8 <goto_priv>
    8001c01c:	b8ce50ef          	jal	800013a8 <reset_state>

}
    8001c020:	60e2                	ld	ra,24(sp)
    8001c022:	8522                	mv	a0,s0
    8001c024:	6442                	ld	s0,16(sp)
    8001c026:	64a2                	ld	s1,8(sp)
    8001c028:	6105                	addi	sp,sp,32
    8001c02a:	8082                	ret

000000008001c02c <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001c02c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001c02e:	00006597          	auipc	a1,0x6
    8001c032:	57a58593          	addi	a1,a1,1402 # 800225a8 <__func__.43>
    8001c036:	00007517          	auipc	a0,0x7
    8001c03a:	b1a50513          	addi	a0,a0,-1254 # 80022b50 <__func__.2+0x2e8>
bool time_test_1() {
    8001c03e:	ec06                	sd	ra,24(sp)
    8001c040:	e822                	sd	s0,16(sp)
    8001c042:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001c044:	42d040ef          	jal	80020c70 <printf>
    8001c048:	4529                	li	a0,10
    8001c04a:	2b6040ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c04e:	4511                	li	a0,4
    8001c050:	a89e40ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001c054:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001c058:	4509                	li	a0,2
    8001c05a:	a7fe40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c05e:	0330000f          	fence	rw,rw
    8001c062:	00029417          	auipc	s0,0x29
    8001c066:	fae40413          	addi	s0,s0,-82 # 80045010 <excpt>
    8001c06a:	4785                	li	a5,1
    8001c06c:	00029717          	auipc	a4,0x29
    8001c070:	fc073e23          	sd	zero,-36(a4) # 80045048 <excpt+0x38>
    8001c074:	00f41023          	sh	a5,0(s0)
    8001c078:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c07c:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c080:	08200593          	li	a1,130
    8001c084:	0000d617          	auipc	a2,0xd
    8001c088:	1c460613          	addi	a2,a2,452 # 80029248 <__func__.2+0x69e0>
    8001c08c:	00007517          	auipc	a0,0x7
    8001c090:	adc50513          	addi	a0,a0,-1316 # 80022b68 <__func__.2+0x300>
    8001c094:	3dd040ef          	jal	80020c70 <printf>
    8001c098:	00029797          	auipc	a5,0x29
    8001c09c:	f797c783          	lbu	a5,-135(a5) # 80045011 <excpt+0x1>
    8001c0a0:	00007597          	auipc	a1,0x7
    8001c0a4:	aa058593          	addi	a1,a1,-1376 # 80022b40 <__func__.2+0x2d8>
    8001c0a8:	cf89                	beqz	a5,8001c0c2 <time_test_1+0x96>
    8001c0aa:	6418                	ld	a4,8(s0)
    8001c0ac:	4789                	li	a5,2
    8001c0ae:	00007597          	auipc	a1,0x7
    8001c0b2:	a8258593          	addi	a1,a1,-1406 # 80022b30 <__func__.2+0x2c8>
    8001c0b6:	00f70663          	beq	a4,a5,8001c0c2 <time_test_1+0x96>
    8001c0ba:	00007597          	auipc	a1,0x7
    8001c0be:	a8658593          	addi	a1,a1,-1402 # 80022b40 <__func__.2+0x2d8>
    8001c0c2:	00007517          	auipc	a0,0x7
    8001c0c6:	abe50513          	addi	a0,a0,-1346 # 80022b80 <__func__.2+0x318>
    8001c0ca:	3a7040ef          	jal	80020c70 <printf>
    8001c0ce:	00029797          	auipc	a5,0x29
    8001c0d2:	f437c783          	lbu	a5,-189(a5) # 80045011 <excpt+0x1>
    8001c0d6:	c789                	beqz	a5,8001c0e0 <time_test_1+0xb4>
    8001c0d8:	6418                	ld	a4,8(s0)
    8001c0da:	4789                	li	a5,2
    8001c0dc:	00f70c63          	beq	a4,a5,8001c0f4 <time_test_1+0xc8>
    8001c0e0:	00007517          	auipc	a0,0x7
    8001c0e4:	aa850513          	addi	a0,a0,-1368 # 80022b88 <__func__.2+0x320>
    8001c0e8:	389040ef          	jal	80020c70 <printf>
    8001c0ec:	02900513          	li	a0,41
    8001c0f0:	210040ef          	jal	80020300 <putchar>
    8001c0f4:	4529                	li	a0,10
    8001c0f6:	20a040ef          	jal	80020300 <putchar>
    8001c0fa:	00029797          	auipc	a5,0x29
    8001c0fe:	f177c783          	lbu	a5,-233(a5) # 80045011 <excpt+0x1>
    8001c102:	4481                	li	s1,0
    8001c104:	c789                	beqz	a5,8001c10e <time_test_1+0xe2>
    8001c106:	6404                	ld	s1,8(s0)
    8001c108:	14f9                	addi	s1,s1,-2
    8001c10a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001c10e:	450d                	li	a0,3
    8001c110:	9c9e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c114:	0330000f          	fence	rw,rw
    8001c118:	4785                	li	a5,1
    8001c11a:	00029717          	auipc	a4,0x29
    8001c11e:	f2073723          	sd	zero,-210(a4) # 80045048 <excpt+0x38>
    8001c122:	00f41023          	sh	a5,0(s0)
    8001c126:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c12a:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c12e:	08200593          	li	a1,130
    8001c132:	0000d617          	auipc	a2,0xd
    8001c136:	16660613          	addi	a2,a2,358 # 80029298 <__func__.2+0x6a30>
    8001c13a:	00007517          	auipc	a0,0x7
    8001c13e:	a2e50513          	addi	a0,a0,-1490 # 80022b68 <__func__.2+0x300>
    8001c142:	32f040ef          	jal	80020c70 <printf>
    8001c146:	00029797          	auipc	a5,0x29
    8001c14a:	ecb7c783          	lbu	a5,-309(a5) # 80045011 <excpt+0x1>
    8001c14e:	00007597          	auipc	a1,0x7
    8001c152:	9f258593          	addi	a1,a1,-1550 # 80022b40 <__func__.2+0x2d8>
    8001c156:	cf89                	beqz	a5,8001c170 <time_test_1+0x144>
    8001c158:	6418                	ld	a4,8(s0)
    8001c15a:	4789                	li	a5,2
    8001c15c:	00007597          	auipc	a1,0x7
    8001c160:	9d458593          	addi	a1,a1,-1580 # 80022b30 <__func__.2+0x2c8>
    8001c164:	00f70663          	beq	a4,a5,8001c170 <time_test_1+0x144>
    8001c168:	00007597          	auipc	a1,0x7
    8001c16c:	9d858593          	addi	a1,a1,-1576 # 80022b40 <__func__.2+0x2d8>
    8001c170:	00007517          	auipc	a0,0x7
    8001c174:	a1050513          	addi	a0,a0,-1520 # 80022b80 <__func__.2+0x318>
    8001c178:	2f9040ef          	jal	80020c70 <printf>
    8001c17c:	00029797          	auipc	a5,0x29
    8001c180:	e957c783          	lbu	a5,-363(a5) # 80045011 <excpt+0x1>
    8001c184:	c789                	beqz	a5,8001c18e <time_test_1+0x162>
    8001c186:	6418                	ld	a4,8(s0)
    8001c188:	4789                	li	a5,2
    8001c18a:	00f70c63          	beq	a4,a5,8001c1a2 <time_test_1+0x176>
    8001c18e:	00007517          	auipc	a0,0x7
    8001c192:	9fa50513          	addi	a0,a0,-1542 # 80022b88 <__func__.2+0x320>
    8001c196:	2db040ef          	jal	80020c70 <printf>
    8001c19a:	02900513          	li	a0,41
    8001c19e:	162040ef          	jal	80020300 <putchar>
    8001c1a2:	4529                	li	a0,10
    8001c1a4:	15c040ef          	jal	80020300 <putchar>
    8001c1a8:	c881                	beqz	s1,8001c1b8 <time_test_1+0x18c>
    8001c1aa:	00029797          	auipc	a5,0x29
    8001c1ae:	e677c783          	lbu	a5,-409(a5) # 80045011 <excpt+0x1>
    8001c1b2:	4481                	li	s1,0
    8001c1b4:	1a079163          	bnez	a5,8001c356 <time_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001c1b8:	4501                	li	a0,0
    8001c1ba:	91fe40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c1be:	0330000f          	fence	rw,rw
    8001c1c2:	4785                	li	a5,1
    8001c1c4:	00029717          	auipc	a4,0x29
    8001c1c8:	e8073223          	sd	zero,-380(a4) # 80045048 <excpt+0x38>
    8001c1cc:	00f41023          	sh	a5,0(s0)
    8001c1d0:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c1d4:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c1d8:	08200593          	li	a1,130
    8001c1dc:	0000d617          	auipc	a2,0xd
    8001c1e0:	10c60613          	addi	a2,a2,268 # 800292e8 <__func__.2+0x6a80>
    8001c1e4:	00007517          	auipc	a0,0x7
    8001c1e8:	98450513          	addi	a0,a0,-1660 # 80022b68 <__func__.2+0x300>
    8001c1ec:	285040ef          	jal	80020c70 <printf>
    8001c1f0:	00029797          	auipc	a5,0x29
    8001c1f4:	e217c783          	lbu	a5,-479(a5) # 80045011 <excpt+0x1>
    8001c1f8:	00007597          	auipc	a1,0x7
    8001c1fc:	94858593          	addi	a1,a1,-1720 # 80022b40 <__func__.2+0x2d8>
    8001c200:	cf89                	beqz	a5,8001c21a <time_test_1+0x1ee>
    8001c202:	6418                	ld	a4,8(s0)
    8001c204:	4789                	li	a5,2
    8001c206:	00007597          	auipc	a1,0x7
    8001c20a:	92a58593          	addi	a1,a1,-1750 # 80022b30 <__func__.2+0x2c8>
    8001c20e:	00f70663          	beq	a4,a5,8001c21a <time_test_1+0x1ee>
    8001c212:	00007597          	auipc	a1,0x7
    8001c216:	92e58593          	addi	a1,a1,-1746 # 80022b40 <__func__.2+0x2d8>
    8001c21a:	00007517          	auipc	a0,0x7
    8001c21e:	96650513          	addi	a0,a0,-1690 # 80022b80 <__func__.2+0x318>
    8001c222:	24f040ef          	jal	80020c70 <printf>
    8001c226:	00029797          	auipc	a5,0x29
    8001c22a:	deb7c783          	lbu	a5,-533(a5) # 80045011 <excpt+0x1>
    8001c22e:	c789                	beqz	a5,8001c238 <time_test_1+0x20c>
    8001c230:	6418                	ld	a4,8(s0)
    8001c232:	4789                	li	a5,2
    8001c234:	00f70c63          	beq	a4,a5,8001c24c <time_test_1+0x220>
    8001c238:	00007517          	auipc	a0,0x7
    8001c23c:	95050513          	addi	a0,a0,-1712 # 80022b88 <__func__.2+0x320>
    8001c240:	231040ef          	jal	80020c70 <printf>
    8001c244:	02900513          	li	a0,41
    8001c248:	0b8040ef          	jal	80020300 <putchar>
    8001c24c:	4529                	li	a0,10
    8001c24e:	0b2040ef          	jal	80020300 <putchar>
    8001c252:	c881                	beqz	s1,8001c262 <time_test_1+0x236>
    8001c254:	00029797          	auipc	a5,0x29
    8001c258:	dbd7c783          	lbu	a5,-579(a5) # 80045011 <excpt+0x1>
    8001c25c:	4481                	li	s1,0
    8001c25e:	0e079763          	bnez	a5,8001c34c <time_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001c262:	4505                	li	a0,1
    8001c264:	875e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c268:	0330000f          	fence	rw,rw
    8001c26c:	4785                	li	a5,1
    8001c26e:	00029717          	auipc	a4,0x29
    8001c272:	dc073d23          	sd	zero,-550(a4) # 80045048 <excpt+0x38>
    8001c276:	00f41023          	sh	a5,0(s0)
    8001c27a:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c27e:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c282:	08200593          	li	a1,130
    8001c286:	0000d617          	auipc	a2,0xd
    8001c28a:	0b260613          	addi	a2,a2,178 # 80029338 <__func__.2+0x6ad0>
    8001c28e:	00007517          	auipc	a0,0x7
    8001c292:	8da50513          	addi	a0,a0,-1830 # 80022b68 <__func__.2+0x300>
    8001c296:	1db040ef          	jal	80020c70 <printf>
    8001c29a:	00029797          	auipc	a5,0x29
    8001c29e:	d777c783          	lbu	a5,-649(a5) # 80045011 <excpt+0x1>
    8001c2a2:	00007597          	auipc	a1,0x7
    8001c2a6:	89e58593          	addi	a1,a1,-1890 # 80022b40 <__func__.2+0x2d8>
    8001c2aa:	cf89                	beqz	a5,8001c2c4 <time_test_1+0x298>
    8001c2ac:	6418                	ld	a4,8(s0)
    8001c2ae:	4789                	li	a5,2
    8001c2b0:	00007597          	auipc	a1,0x7
    8001c2b4:	88058593          	addi	a1,a1,-1920 # 80022b30 <__func__.2+0x2c8>
    8001c2b8:	00f70663          	beq	a4,a5,8001c2c4 <time_test_1+0x298>
    8001c2bc:	00007597          	auipc	a1,0x7
    8001c2c0:	88458593          	addi	a1,a1,-1916 # 80022b40 <__func__.2+0x2d8>
    8001c2c4:	00007517          	auipc	a0,0x7
    8001c2c8:	8bc50513          	addi	a0,a0,-1860 # 80022b80 <__func__.2+0x318>
    8001c2cc:	1a5040ef          	jal	80020c70 <printf>
    8001c2d0:	00029797          	auipc	a5,0x29
    8001c2d4:	d417c783          	lbu	a5,-703(a5) # 80045011 <excpt+0x1>
    8001c2d8:	c789                	beqz	a5,8001c2e2 <time_test_1+0x2b6>
    8001c2da:	6418                	ld	a4,8(s0)
    8001c2dc:	4789                	li	a5,2
    8001c2de:	00f70c63          	beq	a4,a5,8001c2f6 <time_test_1+0x2ca>
    8001c2e2:	00007517          	auipc	a0,0x7
    8001c2e6:	8a650513          	addi	a0,a0,-1882 # 80022b88 <__func__.2+0x320>
    8001c2ea:	187040ef          	jal	80020c70 <printf>
    8001c2ee:	02900513          	li	a0,41
    8001c2f2:	00e040ef          	jal	80020300 <putchar>
    8001c2f6:	4529                	li	a0,10
    8001c2f8:	008040ef          	jal	80020300 <putchar>
    8001c2fc:	c095                	beqz	s1,8001c320 <time_test_1+0x2f4>
    8001c2fe:	00029497          	auipc	s1,0x29
    8001c302:	d134c483          	lbu	s1,-749(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001c306:	00007597          	auipc	a1,0x7
    8001c30a:	83a58593          	addi	a1,a1,-1990 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c30e:	cc91                	beqz	s1,8001c32a <time_test_1+0x2fe>
    8001c310:	6418                	ld	a4,8(s0)
    8001c312:	4789                	li	a5,2
    TEST_END(); 
    8001c314:	00007597          	auipc	a1,0x7
    8001c318:	81c58593          	addi	a1,a1,-2020 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c31c:	00f70763          	beq	a4,a5,8001c32a <time_test_1+0x2fe>
    8001c320:	4481                	li	s1,0
    TEST_END(); 
    8001c322:	00007597          	auipc	a1,0x7
    8001c326:	81e58593          	addi	a1,a1,-2018 # 80022b40 <__func__.2+0x2d8>
    8001c32a:	00007517          	auipc	a0,0x7
    8001c32e:	8be50513          	addi	a0,a0,-1858 # 80022be8 <__func__.2+0x380>
    8001c332:	13f040ef          	jal	80020c70 <printf>
    8001c336:	4511                	li	a0,4
    8001c338:	fa0e40ef          	jal	80000ad8 <goto_priv>
    8001c33c:	86ce50ef          	jal	800013a8 <reset_state>
}
    8001c340:	60e2                	ld	ra,24(sp)
    8001c342:	6442                	ld	s0,16(sp)
    8001c344:	8526                	mv	a0,s1
    8001c346:	64a2                	ld	s1,8(sp)
    8001c348:	6105                	addi	sp,sp,32
    8001c34a:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c34c:	6404                	ld	s1,8(s0)
    8001c34e:	14f9                	addi	s1,s1,-2
    8001c350:	0014b493          	seqz	s1,s1
    8001c354:	b739                	j	8001c262 <time_test_1+0x236>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001c356:	6404                	ld	s1,8(s0)
    8001c358:	14f9                	addi	s1,s1,-2
    8001c35a:	0014b493          	seqz	s1,s1
    8001c35e:	bda9                	j	8001c1b8 <time_test_1+0x18c>

000000008001c360 <time_test_2>:

bool time_test_2() {
    8001c360:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001c362:	00006597          	auipc	a1,0x6
    8001c366:	25658593          	addi	a1,a1,598 # 800225b8 <__func__.42>
    8001c36a:	00006517          	auipc	a0,0x6
    8001c36e:	7e650513          	addi	a0,a0,2022 # 80022b50 <__func__.2+0x2e8>
bool time_test_2() {
    8001c372:	e406                	sd	ra,8(sp)
    8001c374:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001c376:	0fb040ef          	jal	80020c70 <printf>
    8001c37a:	4529                	li	a0,10
    8001c37c:	785030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c380:	4511                	li	a0,4
    8001c382:	f56e40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001c386:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001c38a:	450d                	li	a0,3
    8001c38c:	f4ce40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c390:	0330000f          	fence	rw,rw
    8001c394:	4785                	li	a5,1
    8001c396:	00029717          	auipc	a4,0x29
    8001c39a:	ca073923          	sd	zero,-846(a4) # 80045048 <excpt+0x38>
    8001c39e:	00029717          	auipc	a4,0x29
    8001c3a2:	c6f71923          	sh	a5,-910(a4) # 80045010 <excpt>
    8001c3a6:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c3aa:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001c3ae:	08200593          	li	a1,130
    8001c3b2:	0000d617          	auipc	a2,0xd
    8001c3b6:	fd660613          	addi	a2,a2,-42 # 80029388 <__func__.2+0x6b20>
    8001c3ba:	00006517          	auipc	a0,0x6
    8001c3be:	7ae50513          	addi	a0,a0,1966 # 80022b68 <__func__.2+0x300>
    8001c3c2:	0af040ef          	jal	80020c70 <printf>
    8001c3c6:	00029797          	auipc	a5,0x29
    8001c3ca:	c4b7c783          	lbu	a5,-949(a5) # 80045011 <excpt+0x1>
    8001c3ce:	00006597          	auipc	a1,0x6
    8001c3d2:	76258593          	addi	a1,a1,1890 # 80022b30 <__func__.2+0x2c8>
    8001c3d6:	c789                	beqz	a5,8001c3e0 <time_test_2+0x80>
    8001c3d8:	00006597          	auipc	a1,0x6
    8001c3dc:	76858593          	addi	a1,a1,1896 # 80022b40 <__func__.2+0x2d8>
    8001c3e0:	00006517          	auipc	a0,0x6
    8001c3e4:	7a050513          	addi	a0,a0,1952 # 80022b80 <__func__.2+0x318>
    8001c3e8:	089040ef          	jal	80020c70 <printf>
    8001c3ec:	00029797          	auipc	a5,0x29
    8001c3f0:	c257c783          	lbu	a5,-987(a5) # 80045011 <excpt+0x1>
    8001c3f4:	e7a1                	bnez	a5,8001c43c <time_test_2+0xdc>
    8001c3f6:	4529                	li	a0,10
    8001c3f8:	709030ef          	jal	80020300 <putchar>
    8001c3fc:	00029797          	auipc	a5,0x29
    8001c400:	c157c783          	lbu	a5,-1003(a5) # 80045011 <excpt+0x1>
    8001c404:	e795                	bnez	a5,8001c430 <time_test_2+0xd0>
    8001c406:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001c408:	00006597          	auipc	a1,0x6
    8001c40c:	72858593          	addi	a1,a1,1832 # 80022b30 <__func__.2+0x2c8>
    8001c410:	00006517          	auipc	a0,0x6
    8001c414:	7d850513          	addi	a0,a0,2008 # 80022be8 <__func__.2+0x380>
    8001c418:	059040ef          	jal	80020c70 <printf>
    8001c41c:	4511                	li	a0,4
    8001c41e:	ebae40ef          	jal	80000ad8 <goto_priv>
    8001c422:	f87e40ef          	jal	800013a8 <reset_state>
}
    8001c426:	60a2                	ld	ra,8(sp)
    8001c428:	8522                	mv	a0,s0
    8001c42a:	6402                	ld	s0,0(sp)
    8001c42c:	0141                	addi	sp,sp,16
    8001c42e:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001c430:	4401                	li	s0,0
    TEST_END(); 
    8001c432:	00006597          	auipc	a1,0x6
    8001c436:	70e58593          	addi	a1,a1,1806 # 80022b40 <__func__.2+0x2d8>
    8001c43a:	bfd9                	j	8001c410 <time_test_2+0xb0>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001c43c:	00006517          	auipc	a0,0x6
    8001c440:	74c50513          	addi	a0,a0,1868 # 80022b88 <__func__.2+0x320>
    8001c444:	02d040ef          	jal	80020c70 <printf>
    8001c448:	02900513          	li	a0,41
    8001c44c:	6b5030ef          	jal	80020300 <putchar>
    8001c450:	b75d                	j	8001c3f6 <time_test_2+0x96>

000000008001c452 <time_test_3>:

bool time_test_3() {
    8001c452:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001c454:	00006597          	auipc	a1,0x6
    8001c458:	17458593          	addi	a1,a1,372 # 800225c8 <__func__.41>
    8001c45c:	00006517          	auipc	a0,0x6
    8001c460:	6f450513          	addi	a0,a0,1780 # 80022b50 <__func__.2+0x2e8>
bool time_test_3() {
    8001c464:	ec06                	sd	ra,24(sp)
    8001c466:	e822                	sd	s0,16(sp)
    8001c468:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001c46a:	007040ef          	jal	80020c70 <printf>
    8001c46e:	4529                	li	a0,10
    8001c470:	691030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c474:	4511                	li	a0,4
    8001c476:	e62e40ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001c47a:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c47e:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001c482:	4505                	li	a0,1
    8001c484:	e54e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c488:	0330000f          	fence	rw,rw
    8001c48c:	00029417          	auipc	s0,0x29
    8001c490:	b8440413          	addi	s0,s0,-1148 # 80045010 <excpt>
    8001c494:	4785                	li	a5,1
    8001c496:	00029717          	auipc	a4,0x29
    8001c49a:	ba073923          	sd	zero,-1102(a4) # 80045048 <excpt+0x38>
    8001c49e:	00f41023          	sh	a5,0(s0)
    8001c4a2:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c4a6:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001c4aa:	08200593          	li	a1,130
    8001c4ae:	0000d617          	auipc	a2,0xd
    8001c4b2:	f1260613          	addi	a2,a2,-238 # 800293c0 <__func__.2+0x6b58>
    8001c4b6:	00006517          	auipc	a0,0x6
    8001c4ba:	6b250513          	addi	a0,a0,1714 # 80022b68 <__func__.2+0x300>
    8001c4be:	7b2040ef          	jal	80020c70 <printf>
    8001c4c2:	00029797          	auipc	a5,0x29
    8001c4c6:	b4f7c783          	lbu	a5,-1201(a5) # 80045011 <excpt+0x1>
    8001c4ca:	00006597          	auipc	a1,0x6
    8001c4ce:	67658593          	addi	a1,a1,1654 # 80022b40 <__func__.2+0x2d8>
    8001c4d2:	cf89                	beqz	a5,8001c4ec <time_test_3+0x9a>
    8001c4d4:	6418                	ld	a4,8(s0)
    8001c4d6:	4789                	li	a5,2
    8001c4d8:	00006597          	auipc	a1,0x6
    8001c4dc:	65858593          	addi	a1,a1,1624 # 80022b30 <__func__.2+0x2c8>
    8001c4e0:	00f70663          	beq	a4,a5,8001c4ec <time_test_3+0x9a>
    8001c4e4:	00006597          	auipc	a1,0x6
    8001c4e8:	65c58593          	addi	a1,a1,1628 # 80022b40 <__func__.2+0x2d8>
    8001c4ec:	00006517          	auipc	a0,0x6
    8001c4f0:	69450513          	addi	a0,a0,1684 # 80022b80 <__func__.2+0x318>
    8001c4f4:	77c040ef          	jal	80020c70 <printf>
    8001c4f8:	00029797          	auipc	a5,0x29
    8001c4fc:	b197c783          	lbu	a5,-1255(a5) # 80045011 <excpt+0x1>
    8001c500:	c789                	beqz	a5,8001c50a <time_test_3+0xb8>
    8001c502:	6418                	ld	a4,8(s0)
    8001c504:	4789                	li	a5,2
    8001c506:	00f70c63          	beq	a4,a5,8001c51e <time_test_3+0xcc>
    8001c50a:	00006517          	auipc	a0,0x6
    8001c50e:	67e50513          	addi	a0,a0,1662 # 80022b88 <__func__.2+0x320>
    8001c512:	75e040ef          	jal	80020c70 <printf>
    8001c516:	02900513          	li	a0,41
    8001c51a:	5e7030ef          	jal	80020300 <putchar>
    8001c51e:	4529                	li	a0,10
    8001c520:	5e1030ef          	jal	80020300 <putchar>
    8001c524:	00029497          	auipc	s1,0x29
    8001c528:	aed4c483          	lbu	s1,-1299(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001c52c:	00006597          	auipc	a1,0x6
    8001c530:	61458593          	addi	a1,a1,1556 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001c534:	cc91                	beqz	s1,8001c550 <time_test_3+0xfe>
    8001c536:	6418                	ld	a4,8(s0)
    8001c538:	4789                	li	a5,2
    TEST_END(); 
    8001c53a:	00006597          	auipc	a1,0x6
    8001c53e:	5f658593          	addi	a1,a1,1526 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001c542:	00f70763          	beq	a4,a5,8001c550 <time_test_3+0xfe>
    8001c546:	4481                	li	s1,0
    TEST_END(); 
    8001c548:	00006597          	auipc	a1,0x6
    8001c54c:	5f858593          	addi	a1,a1,1528 # 80022b40 <__func__.2+0x2d8>
    8001c550:	00006517          	auipc	a0,0x6
    8001c554:	69850513          	addi	a0,a0,1688 # 80022be8 <__func__.2+0x380>
    8001c558:	718040ef          	jal	80020c70 <printf>
    8001c55c:	4511                	li	a0,4
    8001c55e:	d7ae40ef          	jal	80000ad8 <goto_priv>
    8001c562:	e47e40ef          	jal	800013a8 <reset_state>
}
    8001c566:	60e2                	ld	ra,24(sp)
    8001c568:	6442                	ld	s0,16(sp)
    8001c56a:	8526                	mv	a0,s1
    8001c56c:	64a2                	ld	s1,8(sp)
    8001c56e:	6105                	addi	sp,sp,32
    8001c570:	8082                	ret

000000008001c572 <time_test_4>:

bool time_test_4() {
    8001c572:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001c574:	00006597          	auipc	a1,0x6
    8001c578:	06458593          	addi	a1,a1,100 # 800225d8 <__func__.40>
    8001c57c:	00006517          	auipc	a0,0x6
    8001c580:	5d450513          	addi	a0,a0,1492 # 80022b50 <__func__.2+0x2e8>
bool time_test_4() {
    8001c584:	e406                	sd	ra,8(sp)
    8001c586:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001c588:	6e8040ef          	jal	80020c70 <printf>
    8001c58c:	4529                	li	a0,10
    8001c58e:	573030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c592:	4511                	li	a0,4
    8001c594:	d44e40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001c598:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c59c:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001c5a0:	4505                	li	a0,1
    8001c5a2:	d36e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c5a6:	0330000f          	fence	rw,rw
    8001c5aa:	4785                	li	a5,1
    8001c5ac:	00029717          	auipc	a4,0x29
    8001c5b0:	a8073e23          	sd	zero,-1380(a4) # 80045048 <excpt+0x38>
    8001c5b4:	00029717          	auipc	a4,0x29
    8001c5b8:	a4f71e23          	sh	a5,-1444(a4) # 80045010 <excpt>
    8001c5bc:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c5c0:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001c5c4:	08200593          	li	a1,130
    8001c5c8:	0000d617          	auipc	a2,0xd
    8001c5cc:	e4860613          	addi	a2,a2,-440 # 80029410 <__func__.2+0x6ba8>
    8001c5d0:	00006517          	auipc	a0,0x6
    8001c5d4:	59850513          	addi	a0,a0,1432 # 80022b68 <__func__.2+0x300>
    8001c5d8:	698040ef          	jal	80020c70 <printf>
    8001c5dc:	00029797          	auipc	a5,0x29
    8001c5e0:	a357c783          	lbu	a5,-1483(a5) # 80045011 <excpt+0x1>
    8001c5e4:	00006597          	auipc	a1,0x6
    8001c5e8:	54c58593          	addi	a1,a1,1356 # 80022b30 <__func__.2+0x2c8>
    8001c5ec:	c789                	beqz	a5,8001c5f6 <time_test_4+0x84>
    8001c5ee:	00006597          	auipc	a1,0x6
    8001c5f2:	55258593          	addi	a1,a1,1362 # 80022b40 <__func__.2+0x2d8>
    8001c5f6:	00006517          	auipc	a0,0x6
    8001c5fa:	58a50513          	addi	a0,a0,1418 # 80022b80 <__func__.2+0x318>
    8001c5fe:	672040ef          	jal	80020c70 <printf>
    8001c602:	00029797          	auipc	a5,0x29
    8001c606:	a0f7c783          	lbu	a5,-1521(a5) # 80045011 <excpt+0x1>
    8001c60a:	e7a1                	bnez	a5,8001c652 <time_test_4+0xe0>
    8001c60c:	4529                	li	a0,10
    8001c60e:	4f3030ef          	jal	80020300 <putchar>
    8001c612:	00029797          	auipc	a5,0x29
    8001c616:	9ff7c783          	lbu	a5,-1537(a5) # 80045011 <excpt+0x1>
    8001c61a:	e795                	bnez	a5,8001c646 <time_test_4+0xd4>
    8001c61c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001c61e:	00006597          	auipc	a1,0x6
    8001c622:	51258593          	addi	a1,a1,1298 # 80022b30 <__func__.2+0x2c8>
    8001c626:	00006517          	auipc	a0,0x6
    8001c62a:	5c250513          	addi	a0,a0,1474 # 80022be8 <__func__.2+0x380>
    8001c62e:	642040ef          	jal	80020c70 <printf>
    8001c632:	4511                	li	a0,4
    8001c634:	ca4e40ef          	jal	80000ad8 <goto_priv>
    8001c638:	d71e40ef          	jal	800013a8 <reset_state>
}
    8001c63c:	60a2                	ld	ra,8(sp)
    8001c63e:	8522                	mv	a0,s0
    8001c640:	6402                	ld	s0,0(sp)
    8001c642:	0141                	addi	sp,sp,16
    8001c644:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001c646:	4401                	li	s0,0
    TEST_END(); 
    8001c648:	00006597          	auipc	a1,0x6
    8001c64c:	4f858593          	addi	a1,a1,1272 # 80022b40 <__func__.2+0x2d8>
    8001c650:	bfd9                	j	8001c626 <time_test_4+0xb4>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001c652:	00006517          	auipc	a0,0x6
    8001c656:	53650513          	addi	a0,a0,1334 # 80022b88 <__func__.2+0x320>
    8001c65a:	616040ef          	jal	80020c70 <printf>
    8001c65e:	02900513          	li	a0,41
    8001c662:	49f030ef          	jal	80020300 <putchar>
    8001c666:	b75d                	j	8001c60c <time_test_4+0x9a>

000000008001c668 <time_test_5>:

bool time_test_5() {
    8001c668:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001c66a:	00006597          	auipc	a1,0x6
    8001c66e:	f7e58593          	addi	a1,a1,-130 # 800225e8 <__func__.39>
    8001c672:	00006517          	auipc	a0,0x6
    8001c676:	4de50513          	addi	a0,a0,1246 # 80022b50 <__func__.2+0x2e8>
bool time_test_5() {
    8001c67a:	ec06                	sd	ra,24(sp)
    8001c67c:	e822                	sd	s0,16(sp)
    8001c67e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001c680:	5f0040ef          	jal	80020c70 <printf>
    8001c684:	4529                	li	a0,10
    8001c686:	47b030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c68a:	4511                	li	a0,4
    8001c68c:	c4ce40ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001c690:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c694:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001c698:	4509                	li	a0,2
    8001c69a:	c3ee40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c69e:	0330000f          	fence	rw,rw
    8001c6a2:	00029417          	auipc	s0,0x29
    8001c6a6:	96e40413          	addi	s0,s0,-1682 # 80045010 <excpt>
    8001c6aa:	4785                	li	a5,1
    8001c6ac:	00029717          	auipc	a4,0x29
    8001c6b0:	98073e23          	sd	zero,-1636(a4) # 80045048 <excpt+0x38>
    8001c6b4:	00f41023          	sh	a5,0(s0)
    8001c6b8:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c6bc:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001c6c0:	08200593          	li	a1,130
    8001c6c4:	0000d617          	auipc	a2,0xd
    8001c6c8:	d9460613          	addi	a2,a2,-620 # 80029458 <__func__.2+0x6bf0>
    8001c6cc:	00006517          	auipc	a0,0x6
    8001c6d0:	49c50513          	addi	a0,a0,1180 # 80022b68 <__func__.2+0x300>
    8001c6d4:	59c040ef          	jal	80020c70 <printf>
    8001c6d8:	00029797          	auipc	a5,0x29
    8001c6dc:	9397c783          	lbu	a5,-1735(a5) # 80045011 <excpt+0x1>
    8001c6e0:	00006597          	auipc	a1,0x6
    8001c6e4:	46058593          	addi	a1,a1,1120 # 80022b40 <__func__.2+0x2d8>
    8001c6e8:	cf89                	beqz	a5,8001c702 <time_test_5+0x9a>
    8001c6ea:	6418                	ld	a4,8(s0)
    8001c6ec:	47d9                	li	a5,22
    8001c6ee:	00006597          	auipc	a1,0x6
    8001c6f2:	44258593          	addi	a1,a1,1090 # 80022b30 <__func__.2+0x2c8>
    8001c6f6:	00f70663          	beq	a4,a5,8001c702 <time_test_5+0x9a>
    8001c6fa:	00006597          	auipc	a1,0x6
    8001c6fe:	44658593          	addi	a1,a1,1094 # 80022b40 <__func__.2+0x2d8>
    8001c702:	00006517          	auipc	a0,0x6
    8001c706:	47e50513          	addi	a0,a0,1150 # 80022b80 <__func__.2+0x318>
    8001c70a:	566040ef          	jal	80020c70 <printf>
    8001c70e:	00029797          	auipc	a5,0x29
    8001c712:	9037c783          	lbu	a5,-1789(a5) # 80045011 <excpt+0x1>
    8001c716:	c789                	beqz	a5,8001c720 <time_test_5+0xb8>
    8001c718:	6418                	ld	a4,8(s0)
    8001c71a:	47d9                	li	a5,22
    8001c71c:	00f70c63          	beq	a4,a5,8001c734 <time_test_5+0xcc>
    8001c720:	00006517          	auipc	a0,0x6
    8001c724:	46850513          	addi	a0,a0,1128 # 80022b88 <__func__.2+0x320>
    8001c728:	548040ef          	jal	80020c70 <printf>
    8001c72c:	02900513          	li	a0,41
    8001c730:	3d1030ef          	jal	80020300 <putchar>
    8001c734:	4529                	li	a0,10
    8001c736:	3cb030ef          	jal	80020300 <putchar>
    8001c73a:	00029497          	auipc	s1,0x29
    8001c73e:	8d74c483          	lbu	s1,-1833(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001c742:	00006597          	auipc	a1,0x6
    8001c746:	3fe58593          	addi	a1,a1,1022 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001c74a:	cc91                	beqz	s1,8001c766 <time_test_5+0xfe>
    8001c74c:	6418                	ld	a4,8(s0)
    8001c74e:	47d9                	li	a5,22
    TEST_END(); 
    8001c750:	00006597          	auipc	a1,0x6
    8001c754:	3e058593          	addi	a1,a1,992 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001c758:	00f70763          	beq	a4,a5,8001c766 <time_test_5+0xfe>
    8001c75c:	4481                	li	s1,0
    TEST_END(); 
    8001c75e:	00006597          	auipc	a1,0x6
    8001c762:	3e258593          	addi	a1,a1,994 # 80022b40 <__func__.2+0x2d8>
    8001c766:	00006517          	auipc	a0,0x6
    8001c76a:	48250513          	addi	a0,a0,1154 # 80022be8 <__func__.2+0x380>
    8001c76e:	502040ef          	jal	80020c70 <printf>
    8001c772:	4511                	li	a0,4
    8001c774:	b64e40ef          	jal	80000ad8 <goto_priv>
    8001c778:	c31e40ef          	jal	800013a8 <reset_state>
}
    8001c77c:	60e2                	ld	ra,24(sp)
    8001c77e:	6442                	ld	s0,16(sp)
    8001c780:	8526                	mv	a0,s1
    8001c782:	64a2                	ld	s1,8(sp)
    8001c784:	6105                	addi	sp,sp,32
    8001c786:	8082                	ret

000000008001c788 <time_test_6>:

bool time_test_6() {
    8001c788:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001c78a:	00006597          	auipc	a1,0x6
    8001c78e:	e6e58593          	addi	a1,a1,-402 # 800225f8 <__func__.38>
    8001c792:	00006517          	auipc	a0,0x6
    8001c796:	3be50513          	addi	a0,a0,958 # 80022b50 <__func__.2+0x2e8>
bool time_test_6() {
    8001c79a:	e406                	sd	ra,8(sp)
    8001c79c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001c79e:	4d2040ef          	jal	80020c70 <printf>
    8001c7a2:	4529                	li	a0,10
    8001c7a4:	35d030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c7a8:	4511                	li	a0,4
    8001c7aa:	b2ee40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001c7ae:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c7b2:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001c7b6:	4509                	li	a0,2
    8001c7b8:	b20e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c7bc:	0330000f          	fence	rw,rw
    8001c7c0:	4785                	li	a5,1
    8001c7c2:	00029717          	auipc	a4,0x29
    8001c7c6:	88073323          	sd	zero,-1914(a4) # 80045048 <excpt+0x38>
    8001c7ca:	00029717          	auipc	a4,0x29
    8001c7ce:	84f71323          	sh	a5,-1978(a4) # 80045010 <excpt>
    8001c7d2:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c7d6:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001c7da:	08200593          	li	a1,130
    8001c7de:	0000d617          	auipc	a2,0xd
    8001c7e2:	cda60613          	addi	a2,a2,-806 # 800294b8 <__func__.2+0x6c50>
    8001c7e6:	00006517          	auipc	a0,0x6
    8001c7ea:	38250513          	addi	a0,a0,898 # 80022b68 <__func__.2+0x300>
    8001c7ee:	482040ef          	jal	80020c70 <printf>
    8001c7f2:	00029797          	auipc	a5,0x29
    8001c7f6:	81f7c783          	lbu	a5,-2017(a5) # 80045011 <excpt+0x1>
    8001c7fa:	00006597          	auipc	a1,0x6
    8001c7fe:	33658593          	addi	a1,a1,822 # 80022b30 <__func__.2+0x2c8>
    8001c802:	c789                	beqz	a5,8001c80c <time_test_6+0x84>
    8001c804:	00006597          	auipc	a1,0x6
    8001c808:	33c58593          	addi	a1,a1,828 # 80022b40 <__func__.2+0x2d8>
    8001c80c:	00006517          	auipc	a0,0x6
    8001c810:	37450513          	addi	a0,a0,884 # 80022b80 <__func__.2+0x318>
    8001c814:	45c040ef          	jal	80020c70 <printf>
    8001c818:	00028797          	auipc	a5,0x28
    8001c81c:	7f97c783          	lbu	a5,2041(a5) # 80045011 <excpt+0x1>
    8001c820:	e7a1                	bnez	a5,8001c868 <time_test_6+0xe0>
    8001c822:	4529                	li	a0,10
    8001c824:	2dd030ef          	jal	80020300 <putchar>
    8001c828:	00028797          	auipc	a5,0x28
    8001c82c:	7e97c783          	lbu	a5,2025(a5) # 80045011 <excpt+0x1>
    8001c830:	e795                	bnez	a5,8001c85c <time_test_6+0xd4>
    8001c832:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001c834:	00006597          	auipc	a1,0x6
    8001c838:	2fc58593          	addi	a1,a1,764 # 80022b30 <__func__.2+0x2c8>
    8001c83c:	00006517          	auipc	a0,0x6
    8001c840:	3ac50513          	addi	a0,a0,940 # 80022be8 <__func__.2+0x380>
    8001c844:	42c040ef          	jal	80020c70 <printf>
    8001c848:	4511                	li	a0,4
    8001c84a:	a8ee40ef          	jal	80000ad8 <goto_priv>
    8001c84e:	b5be40ef          	jal	800013a8 <reset_state>
}
    8001c852:	60a2                	ld	ra,8(sp)
    8001c854:	8522                	mv	a0,s0
    8001c856:	6402                	ld	s0,0(sp)
    8001c858:	0141                	addi	sp,sp,16
    8001c85a:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001c85c:	4401                	li	s0,0
    TEST_END(); 
    8001c85e:	00006597          	auipc	a1,0x6
    8001c862:	2e258593          	addi	a1,a1,738 # 80022b40 <__func__.2+0x2d8>
    8001c866:	bfd9                	j	8001c83c <time_test_6+0xb4>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001c868:	00006517          	auipc	a0,0x6
    8001c86c:	32050513          	addi	a0,a0,800 # 80022b88 <__func__.2+0x320>
    8001c870:	400040ef          	jal	80020c70 <printf>
    8001c874:	02900513          	li	a0,41
    8001c878:	289030ef          	jal	80020300 <putchar>
    8001c87c:	b75d                	j	8001c822 <time_test_6+0x9a>

000000008001c87e <time_test_7>:

bool time_test_7() {
    8001c87e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001c880:	00006597          	auipc	a1,0x6
    8001c884:	d8858593          	addi	a1,a1,-632 # 80022608 <__func__.37>
    8001c888:	00006517          	auipc	a0,0x6
    8001c88c:	2c850513          	addi	a0,a0,712 # 80022b50 <__func__.2+0x2e8>
bool time_test_7() {
    8001c890:	e406                	sd	ra,8(sp)
    8001c892:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001c894:	3dc040ef          	jal	80020c70 <printf>
    8001c898:	4529                	li	a0,10
    8001c89a:	267030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c89e:	4511                	li	a0,4
    8001c8a0:	a38e40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001c8a4:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c8a8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001c8ac:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001c8b0:	4501                	li	a0,0
    8001c8b2:	a26e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c8b6:	0330000f          	fence	rw,rw
    8001c8ba:	4785                	li	a5,1
    8001c8bc:	00028717          	auipc	a4,0x28
    8001c8c0:	78073623          	sd	zero,1932(a4) # 80045048 <excpt+0x38>
    8001c8c4:	00028717          	auipc	a4,0x28
    8001c8c8:	74f71623          	sh	a5,1868(a4) # 80045010 <excpt>
    8001c8cc:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c8d0:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001c8d4:	08200593          	li	a1,130
    8001c8d8:	0000d617          	auipc	a2,0xd
    8001c8dc:	c2860613          	addi	a2,a2,-984 # 80029500 <__func__.2+0x6c98>
    8001c8e0:	00006517          	auipc	a0,0x6
    8001c8e4:	28850513          	addi	a0,a0,648 # 80022b68 <__func__.2+0x300>
    8001c8e8:	388040ef          	jal	80020c70 <printf>
    8001c8ec:	00028797          	auipc	a5,0x28
    8001c8f0:	7257c783          	lbu	a5,1829(a5) # 80045011 <excpt+0x1>
    8001c8f4:	00006597          	auipc	a1,0x6
    8001c8f8:	23c58593          	addi	a1,a1,572 # 80022b30 <__func__.2+0x2c8>
    8001c8fc:	c789                	beqz	a5,8001c906 <time_test_7+0x88>
    8001c8fe:	00006597          	auipc	a1,0x6
    8001c902:	24258593          	addi	a1,a1,578 # 80022b40 <__func__.2+0x2d8>
    8001c906:	00006517          	auipc	a0,0x6
    8001c90a:	27a50513          	addi	a0,a0,634 # 80022b80 <__func__.2+0x318>
    8001c90e:	362040ef          	jal	80020c70 <printf>
    8001c912:	00028797          	auipc	a5,0x28
    8001c916:	6ff7c783          	lbu	a5,1791(a5) # 80045011 <excpt+0x1>
    8001c91a:	e7a1                	bnez	a5,8001c962 <time_test_7+0xe4>
    8001c91c:	4529                	li	a0,10
    8001c91e:	1e3030ef          	jal	80020300 <putchar>
    8001c922:	00028797          	auipc	a5,0x28
    8001c926:	6ef7c783          	lbu	a5,1775(a5) # 80045011 <excpt+0x1>
    8001c92a:	e795                	bnez	a5,8001c956 <time_test_7+0xd8>
    8001c92c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001c92e:	00006597          	auipc	a1,0x6
    8001c932:	20258593          	addi	a1,a1,514 # 80022b30 <__func__.2+0x2c8>
    8001c936:	00006517          	auipc	a0,0x6
    8001c93a:	2b250513          	addi	a0,a0,690 # 80022be8 <__func__.2+0x380>
    8001c93e:	332040ef          	jal	80020c70 <printf>
    8001c942:	4511                	li	a0,4
    8001c944:	994e40ef          	jal	80000ad8 <goto_priv>
    8001c948:	a61e40ef          	jal	800013a8 <reset_state>
}
    8001c94c:	60a2                	ld	ra,8(sp)
    8001c94e:	8522                	mv	a0,s0
    8001c950:	6402                	ld	s0,0(sp)
    8001c952:	0141                	addi	sp,sp,16
    8001c954:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001c956:	4401                	li	s0,0
    TEST_END(); 
    8001c958:	00006597          	auipc	a1,0x6
    8001c95c:	1e858593          	addi	a1,a1,488 # 80022b40 <__func__.2+0x2d8>
    8001c960:	bfd9                	j	8001c936 <time_test_7+0xb8>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001c962:	00006517          	auipc	a0,0x6
    8001c966:	22650513          	addi	a0,a0,550 # 80022b88 <__func__.2+0x320>
    8001c96a:	306040ef          	jal	80020c70 <printf>
    8001c96e:	02900513          	li	a0,41
    8001c972:	18f030ef          	jal	80020300 <putchar>
    8001c976:	b75d                	j	8001c91c <time_test_7+0x9e>

000000008001c978 <time_test_8>:

bool time_test_8() {
    8001c978:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001c97a:	00006597          	auipc	a1,0x6
    8001c97e:	c9e58593          	addi	a1,a1,-866 # 80022618 <__func__.36>
    8001c982:	00006517          	auipc	a0,0x6
    8001c986:	1ce50513          	addi	a0,a0,462 # 80022b50 <__func__.2+0x2e8>
bool time_test_8() {
    8001c98a:	ec06                	sd	ra,24(sp)
    8001c98c:	e822                	sd	s0,16(sp)
    8001c98e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001c990:	2e0040ef          	jal	80020c70 <printf>
    8001c994:	4529                	li	a0,10
    8001c996:	16b030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001c99a:	4511                	li	a0,4
    8001c99c:	93ce40ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001c9a0:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001c9a4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001c9a8:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001c9ac:	4501                	li	a0,0
    8001c9ae:	92ae40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001c9b2:	0330000f          	fence	rw,rw
    8001c9b6:	00028417          	auipc	s0,0x28
    8001c9ba:	65a40413          	addi	s0,s0,1626 # 80045010 <excpt>
    8001c9be:	4785                	li	a5,1
    8001c9c0:	00028717          	auipc	a4,0x28
    8001c9c4:	68073423          	sd	zero,1672(a4) # 80045048 <excpt+0x38>
    8001c9c8:	00f41023          	sh	a5,0(s0)
    8001c9cc:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001c9d0:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001c9d4:	08200593          	li	a1,130
    8001c9d8:	0000d617          	auipc	a2,0xd
    8001c9dc:	b8060613          	addi	a2,a2,-1152 # 80029558 <__func__.2+0x6cf0>
    8001c9e0:	00006517          	auipc	a0,0x6
    8001c9e4:	18850513          	addi	a0,a0,392 # 80022b68 <__func__.2+0x300>
    8001c9e8:	288040ef          	jal	80020c70 <printf>
    8001c9ec:	00028797          	auipc	a5,0x28
    8001c9f0:	6257c783          	lbu	a5,1573(a5) # 80045011 <excpt+0x1>
    8001c9f4:	00006597          	auipc	a1,0x6
    8001c9f8:	14c58593          	addi	a1,a1,332 # 80022b40 <__func__.2+0x2d8>
    8001c9fc:	cf89                	beqz	a5,8001ca16 <time_test_8+0x9e>
    8001c9fe:	6418                	ld	a4,8(s0)
    8001ca00:	47d9                	li	a5,22
    8001ca02:	00006597          	auipc	a1,0x6
    8001ca06:	12e58593          	addi	a1,a1,302 # 80022b30 <__func__.2+0x2c8>
    8001ca0a:	00f70663          	beq	a4,a5,8001ca16 <time_test_8+0x9e>
    8001ca0e:	00006597          	auipc	a1,0x6
    8001ca12:	13258593          	addi	a1,a1,306 # 80022b40 <__func__.2+0x2d8>
    8001ca16:	00006517          	auipc	a0,0x6
    8001ca1a:	16a50513          	addi	a0,a0,362 # 80022b80 <__func__.2+0x318>
    8001ca1e:	252040ef          	jal	80020c70 <printf>
    8001ca22:	00028797          	auipc	a5,0x28
    8001ca26:	5ef7c783          	lbu	a5,1519(a5) # 80045011 <excpt+0x1>
    8001ca2a:	c789                	beqz	a5,8001ca34 <time_test_8+0xbc>
    8001ca2c:	6418                	ld	a4,8(s0)
    8001ca2e:	47d9                	li	a5,22
    8001ca30:	00f70c63          	beq	a4,a5,8001ca48 <time_test_8+0xd0>
    8001ca34:	00006517          	auipc	a0,0x6
    8001ca38:	15450513          	addi	a0,a0,340 # 80022b88 <__func__.2+0x320>
    8001ca3c:	234040ef          	jal	80020c70 <printf>
    8001ca40:	02900513          	li	a0,41
    8001ca44:	0bd030ef          	jal	80020300 <putchar>
    8001ca48:	4529                	li	a0,10
    8001ca4a:	0b7030ef          	jal	80020300 <putchar>
    8001ca4e:	00028497          	auipc	s1,0x28
    8001ca52:	5c34c483          	lbu	s1,1475(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001ca56:	00006597          	auipc	a1,0x6
    8001ca5a:	0ea58593          	addi	a1,a1,234 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001ca5e:	cc91                	beqz	s1,8001ca7a <time_test_8+0x102>
    8001ca60:	6418                	ld	a4,8(s0)
    8001ca62:	47d9                	li	a5,22
    TEST_END(); 
    8001ca64:	00006597          	auipc	a1,0x6
    8001ca68:	0cc58593          	addi	a1,a1,204 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001ca6c:	00f70763          	beq	a4,a5,8001ca7a <time_test_8+0x102>
    8001ca70:	4481                	li	s1,0
    TEST_END(); 
    8001ca72:	00006597          	auipc	a1,0x6
    8001ca76:	0ce58593          	addi	a1,a1,206 # 80022b40 <__func__.2+0x2d8>
    8001ca7a:	00006517          	auipc	a0,0x6
    8001ca7e:	16e50513          	addi	a0,a0,366 # 80022be8 <__func__.2+0x380>
    8001ca82:	1ee040ef          	jal	80020c70 <printf>
    8001ca86:	4511                	li	a0,4
    8001ca88:	850e40ef          	jal	80000ad8 <goto_priv>
    8001ca8c:	91de40ef          	jal	800013a8 <reset_state>
}
    8001ca90:	60e2                	ld	ra,24(sp)
    8001ca92:	6442                	ld	s0,16(sp)
    8001ca94:	8526                	mv	a0,s1
    8001ca96:	64a2                	ld	s1,8(sp)
    8001ca98:	6105                	addi	sp,sp,32
    8001ca9a:	8082                	ret

000000008001ca9c <time_test_9>:

bool time_test_9() {
    8001ca9c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ca9e:	00006597          	auipc	a1,0x6
    8001caa2:	b8a58593          	addi	a1,a1,-1142 # 80022628 <__func__.35>
    8001caa6:	00006517          	auipc	a0,0x6
    8001caaa:	0aa50513          	addi	a0,a0,170 # 80022b50 <__func__.2+0x2e8>
bool time_test_9() {
    8001caae:	ec06                	sd	ra,24(sp)
    8001cab0:	e822                	sd	s0,16(sp)
    8001cab2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001cab4:	1bc040ef          	jal	80020c70 <printf>
    8001cab8:	4529                	li	a0,10
    8001caba:	047030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001cabe:	4511                	li	a0,4
    8001cac0:	818e40ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001cac4:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001cac8:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001cacc:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_VU);
    8001cad0:	4501                	li	a0,0
    8001cad2:	806e40ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001cad6:	0330000f          	fence	rw,rw
    8001cada:	00028417          	auipc	s0,0x28
    8001cade:	53640413          	addi	s0,s0,1334 # 80045010 <excpt>
    8001cae2:	4785                	li	a5,1
    8001cae4:	00028717          	auipc	a4,0x28
    8001cae8:	56073223          	sd	zero,1380(a4) # 80045048 <excpt+0x38>
    8001caec:	00f41023          	sh	a5,0(s0)
    8001caf0:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001caf4:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001caf8:	08200593          	li	a1,130
    8001cafc:	0000d617          	auipc	a2,0xd
    8001cb00:	acc60613          	addi	a2,a2,-1332 # 800295c8 <__func__.2+0x6d60>
    8001cb04:	00006517          	auipc	a0,0x6
    8001cb08:	06450513          	addi	a0,a0,100 # 80022b68 <__func__.2+0x300>
    8001cb0c:	164040ef          	jal	80020c70 <printf>
    8001cb10:	00028797          	auipc	a5,0x28
    8001cb14:	5017c783          	lbu	a5,1281(a5) # 80045011 <excpt+0x1>
    8001cb18:	00006597          	auipc	a1,0x6
    8001cb1c:	02858593          	addi	a1,a1,40 # 80022b40 <__func__.2+0x2d8>
    8001cb20:	cf89                	beqz	a5,8001cb3a <time_test_9+0x9e>
    8001cb22:	6418                	ld	a4,8(s0)
    8001cb24:	4789                	li	a5,2
    8001cb26:	00006597          	auipc	a1,0x6
    8001cb2a:	00a58593          	addi	a1,a1,10 # 80022b30 <__func__.2+0x2c8>
    8001cb2e:	00f70663          	beq	a4,a5,8001cb3a <time_test_9+0x9e>
    8001cb32:	00006597          	auipc	a1,0x6
    8001cb36:	00e58593          	addi	a1,a1,14 # 80022b40 <__func__.2+0x2d8>
    8001cb3a:	00006517          	auipc	a0,0x6
    8001cb3e:	04650513          	addi	a0,a0,70 # 80022b80 <__func__.2+0x318>
    8001cb42:	12e040ef          	jal	80020c70 <printf>
    8001cb46:	00028797          	auipc	a5,0x28
    8001cb4a:	4cb7c783          	lbu	a5,1227(a5) # 80045011 <excpt+0x1>
    8001cb4e:	c789                	beqz	a5,8001cb58 <time_test_9+0xbc>
    8001cb50:	6418                	ld	a4,8(s0)
    8001cb52:	4789                	li	a5,2
    8001cb54:	00f70c63          	beq	a4,a5,8001cb6c <time_test_9+0xd0>
    8001cb58:	00006517          	auipc	a0,0x6
    8001cb5c:	03050513          	addi	a0,a0,48 # 80022b88 <__func__.2+0x320>
    8001cb60:	110040ef          	jal	80020c70 <printf>
    8001cb64:	02900513          	li	a0,41
    8001cb68:	798030ef          	jal	80020300 <putchar>
    8001cb6c:	4529                	li	a0,10
    8001cb6e:	792030ef          	jal	80020300 <putchar>
    8001cb72:	00028497          	auipc	s1,0x28
    8001cb76:	49f4c483          	lbu	s1,1183(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001cb7a:	00006597          	auipc	a1,0x6
    8001cb7e:	fc658593          	addi	a1,a1,-58 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001cb82:	cc91                	beqz	s1,8001cb9e <time_test_9+0x102>
    8001cb84:	6418                	ld	a4,8(s0)
    8001cb86:	4789                	li	a5,2
    TEST_END(); 
    8001cb88:	00006597          	auipc	a1,0x6
    8001cb8c:	fa858593          	addi	a1,a1,-88 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001cb90:	00f70763          	beq	a4,a5,8001cb9e <time_test_9+0x102>
    8001cb94:	4481                	li	s1,0
    TEST_END(); 
    8001cb96:	00006597          	auipc	a1,0x6
    8001cb9a:	faa58593          	addi	a1,a1,-86 # 80022b40 <__func__.2+0x2d8>
    8001cb9e:	00006517          	auipc	a0,0x6
    8001cba2:	04a50513          	addi	a0,a0,74 # 80022be8 <__func__.2+0x380>
    8001cba6:	0ca040ef          	jal	80020c70 <printf>
    8001cbaa:	4511                	li	a0,4
    8001cbac:	f2de30ef          	jal	80000ad8 <goto_priv>
    8001cbb0:	ff8e40ef          	jal	800013a8 <reset_state>
}
    8001cbb4:	60e2                	ld	ra,24(sp)
    8001cbb6:	6442                	ld	s0,16(sp)
    8001cbb8:	8526                	mv	a0,s1
    8001cbba:	64a2                	ld	s1,8(sp)
    8001cbbc:	6105                	addi	sp,sp,32
    8001cbbe:	8082                	ret

000000008001cbc0 <time_test_10>:

bool time_test_10() {
    8001cbc0:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001cbc2:	00006597          	auipc	a1,0x6
    8001cbc6:	a7658593          	addi	a1,a1,-1418 # 80022638 <__func__.34>
    8001cbca:	00006517          	auipc	a0,0x6
    8001cbce:	f8650513          	addi	a0,a0,-122 # 80022b50 <__func__.2+0x2e8>
bool time_test_10() {
    8001cbd2:	e406                	sd	ra,8(sp)
    8001cbd4:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001cbd6:	09a040ef          	jal	80020c70 <printf>
    8001cbda:	4529                	li	a0,10
    8001cbdc:	724030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001cbe0:	4511                	li	a0,4
    8001cbe2:	ef7e30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001cbe6:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001cbea:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001cbee:	4509                	li	a0,2
    8001cbf0:	ee9e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001cbf4:	0330000f          	fence	rw,rw
    8001cbf8:	4785                	li	a5,1
    8001cbfa:	00028717          	auipc	a4,0x28
    8001cbfe:	44073723          	sd	zero,1102(a4) # 80045048 <excpt+0x38>
    8001cc02:	00028717          	auipc	a4,0x28
    8001cc06:	40f71723          	sh	a5,1038(a4) # 80045010 <excpt>
    8001cc0a:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001cc0e:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001cc12:	08200593          	li	a1,130
    8001cc16:	0000d617          	auipc	a2,0xd
    8001cc1a:	a2260613          	addi	a2,a2,-1502 # 80029638 <__func__.2+0x6dd0>
    8001cc1e:	00006517          	auipc	a0,0x6
    8001cc22:	f4a50513          	addi	a0,a0,-182 # 80022b68 <__func__.2+0x300>
    8001cc26:	04a040ef          	jal	80020c70 <printf>
    8001cc2a:	00028797          	auipc	a5,0x28
    8001cc2e:	3e77c783          	lbu	a5,999(a5) # 80045011 <excpt+0x1>
    8001cc32:	00006597          	auipc	a1,0x6
    8001cc36:	efe58593          	addi	a1,a1,-258 # 80022b30 <__func__.2+0x2c8>
    8001cc3a:	c789                	beqz	a5,8001cc44 <time_test_10+0x84>
    8001cc3c:	00006597          	auipc	a1,0x6
    8001cc40:	f0458593          	addi	a1,a1,-252 # 80022b40 <__func__.2+0x2d8>
    8001cc44:	00006517          	auipc	a0,0x6
    8001cc48:	f3c50513          	addi	a0,a0,-196 # 80022b80 <__func__.2+0x318>
    8001cc4c:	024040ef          	jal	80020c70 <printf>
    8001cc50:	00028797          	auipc	a5,0x28
    8001cc54:	3c17c783          	lbu	a5,961(a5) # 80045011 <excpt+0x1>
    8001cc58:	e7a1                	bnez	a5,8001cca0 <time_test_10+0xe0>
    8001cc5a:	4529                	li	a0,10
    8001cc5c:	6a4030ef          	jal	80020300 <putchar>
    8001cc60:	00028797          	auipc	a5,0x28
    8001cc64:	3b17c783          	lbu	a5,945(a5) # 80045011 <excpt+0x1>
    8001cc68:	e795                	bnez	a5,8001cc94 <time_test_10+0xd4>
    8001cc6a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001cc6c:	00006597          	auipc	a1,0x6
    8001cc70:	ec458593          	addi	a1,a1,-316 # 80022b30 <__func__.2+0x2c8>
    8001cc74:	00006517          	auipc	a0,0x6
    8001cc78:	f7450513          	addi	a0,a0,-140 # 80022be8 <__func__.2+0x380>
    8001cc7c:	7f5030ef          	jal	80020c70 <printf>
    8001cc80:	4511                	li	a0,4
    8001cc82:	e57e30ef          	jal	80000ad8 <goto_priv>
    8001cc86:	f22e40ef          	jal	800013a8 <reset_state>
}
    8001cc8a:	60a2                	ld	ra,8(sp)
    8001cc8c:	8522                	mv	a0,s0
    8001cc8e:	6402                	ld	s0,0(sp)
    8001cc90:	0141                	addi	sp,sp,16
    8001cc92:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001cc94:	4401                	li	s0,0
    TEST_END(); 
    8001cc96:	00006597          	auipc	a1,0x6
    8001cc9a:	eaa58593          	addi	a1,a1,-342 # 80022b40 <__func__.2+0x2d8>
    8001cc9e:	bfd9                	j	8001cc74 <time_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001cca0:	00006517          	auipc	a0,0x6
    8001cca4:	ee850513          	addi	a0,a0,-280 # 80022b88 <__func__.2+0x320>
    8001cca8:	7c9030ef          	jal	80020c70 <printf>
    8001ccac:	02900513          	li	a0,41
    8001ccb0:	650030ef          	jal	80020300 <putchar>
    8001ccb4:	b75d                	j	8001cc5a <time_test_10+0x9a>

000000008001ccb6 <cycle_test_1>:


bool cycle_test_1() {
    8001ccb6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ccb8:	00006597          	auipc	a1,0x6
    8001ccbc:	99058593          	addi	a1,a1,-1648 # 80022648 <__func__.33>
    8001ccc0:	00006517          	auipc	a0,0x6
    8001ccc4:	e9050513          	addi	a0,a0,-368 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_1() {
    8001ccc8:	ec06                	sd	ra,24(sp)
    8001ccca:	e822                	sd	s0,16(sp)
    8001cccc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ccce:	7a3030ef          	jal	80020c70 <printf>
    8001ccd2:	4529                	li	a0,10
    8001ccd4:	62c030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001ccd8:	4511                	li	a0,4
    8001ccda:	dffe30ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001ccde:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001cce2:	4509                	li	a0,2
    8001cce4:	df5e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001cce8:	0330000f          	fence	rw,rw
    8001ccec:	00028417          	auipc	s0,0x28
    8001ccf0:	32440413          	addi	s0,s0,804 # 80045010 <excpt>
    8001ccf4:	4785                	li	a5,1
    8001ccf6:	00028717          	auipc	a4,0x28
    8001ccfa:	34073923          	sd	zero,850(a4) # 80045048 <excpt+0x38>
    8001ccfe:	00f41023          	sh	a5,0(s0)
    8001cd02:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001cd06:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cd0a:	08200593          	li	a1,130
    8001cd0e:	0000d617          	auipc	a2,0xd
    8001cd12:	97a60613          	addi	a2,a2,-1670 # 80029688 <__func__.2+0x6e20>
    8001cd16:	00006517          	auipc	a0,0x6
    8001cd1a:	e5250513          	addi	a0,a0,-430 # 80022b68 <__func__.2+0x300>
    8001cd1e:	753030ef          	jal	80020c70 <printf>
    8001cd22:	00028797          	auipc	a5,0x28
    8001cd26:	2ef7c783          	lbu	a5,751(a5) # 80045011 <excpt+0x1>
    8001cd2a:	00006597          	auipc	a1,0x6
    8001cd2e:	e1658593          	addi	a1,a1,-490 # 80022b40 <__func__.2+0x2d8>
    8001cd32:	cf89                	beqz	a5,8001cd4c <cycle_test_1+0x96>
    8001cd34:	6418                	ld	a4,8(s0)
    8001cd36:	4789                	li	a5,2
    8001cd38:	00006597          	auipc	a1,0x6
    8001cd3c:	df858593          	addi	a1,a1,-520 # 80022b30 <__func__.2+0x2c8>
    8001cd40:	00f70663          	beq	a4,a5,8001cd4c <cycle_test_1+0x96>
    8001cd44:	00006597          	auipc	a1,0x6
    8001cd48:	dfc58593          	addi	a1,a1,-516 # 80022b40 <__func__.2+0x2d8>
    8001cd4c:	00006517          	auipc	a0,0x6
    8001cd50:	e3450513          	addi	a0,a0,-460 # 80022b80 <__func__.2+0x318>
    8001cd54:	71d030ef          	jal	80020c70 <printf>
    8001cd58:	00028797          	auipc	a5,0x28
    8001cd5c:	2b97c783          	lbu	a5,697(a5) # 80045011 <excpt+0x1>
    8001cd60:	c789                	beqz	a5,8001cd6a <cycle_test_1+0xb4>
    8001cd62:	6418                	ld	a4,8(s0)
    8001cd64:	4789                	li	a5,2
    8001cd66:	00f70c63          	beq	a4,a5,8001cd7e <cycle_test_1+0xc8>
    8001cd6a:	00006517          	auipc	a0,0x6
    8001cd6e:	e1e50513          	addi	a0,a0,-482 # 80022b88 <__func__.2+0x320>
    8001cd72:	6ff030ef          	jal	80020c70 <printf>
    8001cd76:	02900513          	li	a0,41
    8001cd7a:	586030ef          	jal	80020300 <putchar>
    8001cd7e:	4529                	li	a0,10
    8001cd80:	580030ef          	jal	80020300 <putchar>
    8001cd84:	00028797          	auipc	a5,0x28
    8001cd88:	28d7c783          	lbu	a5,653(a5) # 80045011 <excpt+0x1>
    8001cd8c:	4481                	li	s1,0
    8001cd8e:	c789                	beqz	a5,8001cd98 <cycle_test_1+0xe2>
    8001cd90:	6404                	ld	s1,8(s0)
    8001cd92:	14f9                	addi	s1,s1,-2
    8001cd94:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001cd98:	450d                	li	a0,3
    8001cd9a:	d3fe30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001cd9e:	0330000f          	fence	rw,rw
    8001cda2:	4785                	li	a5,1
    8001cda4:	00028717          	auipc	a4,0x28
    8001cda8:	2a073223          	sd	zero,676(a4) # 80045048 <excpt+0x38>
    8001cdac:	00f41023          	sh	a5,0(s0)
    8001cdb0:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001cdb4:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cdb8:	08200593          	li	a1,130
    8001cdbc:	0000d617          	auipc	a2,0xd
    8001cdc0:	91c60613          	addi	a2,a2,-1764 # 800296d8 <__func__.2+0x6e70>
    8001cdc4:	00006517          	auipc	a0,0x6
    8001cdc8:	da450513          	addi	a0,a0,-604 # 80022b68 <__func__.2+0x300>
    8001cdcc:	6a5030ef          	jal	80020c70 <printf>
    8001cdd0:	00028797          	auipc	a5,0x28
    8001cdd4:	2417c783          	lbu	a5,577(a5) # 80045011 <excpt+0x1>
    8001cdd8:	00006597          	auipc	a1,0x6
    8001cddc:	d6858593          	addi	a1,a1,-664 # 80022b40 <__func__.2+0x2d8>
    8001cde0:	cf89                	beqz	a5,8001cdfa <cycle_test_1+0x144>
    8001cde2:	6418                	ld	a4,8(s0)
    8001cde4:	4789                	li	a5,2
    8001cde6:	00006597          	auipc	a1,0x6
    8001cdea:	d4a58593          	addi	a1,a1,-694 # 80022b30 <__func__.2+0x2c8>
    8001cdee:	00f70663          	beq	a4,a5,8001cdfa <cycle_test_1+0x144>
    8001cdf2:	00006597          	auipc	a1,0x6
    8001cdf6:	d4e58593          	addi	a1,a1,-690 # 80022b40 <__func__.2+0x2d8>
    8001cdfa:	00006517          	auipc	a0,0x6
    8001cdfe:	d8650513          	addi	a0,a0,-634 # 80022b80 <__func__.2+0x318>
    8001ce02:	66f030ef          	jal	80020c70 <printf>
    8001ce06:	00028797          	auipc	a5,0x28
    8001ce0a:	20b7c783          	lbu	a5,523(a5) # 80045011 <excpt+0x1>
    8001ce0e:	c789                	beqz	a5,8001ce18 <cycle_test_1+0x162>
    8001ce10:	6418                	ld	a4,8(s0)
    8001ce12:	4789                	li	a5,2
    8001ce14:	00f70c63          	beq	a4,a5,8001ce2c <cycle_test_1+0x176>
    8001ce18:	00006517          	auipc	a0,0x6
    8001ce1c:	d7050513          	addi	a0,a0,-656 # 80022b88 <__func__.2+0x320>
    8001ce20:	651030ef          	jal	80020c70 <printf>
    8001ce24:	02900513          	li	a0,41
    8001ce28:	4d8030ef          	jal	80020300 <putchar>
    8001ce2c:	4529                	li	a0,10
    8001ce2e:	4d2030ef          	jal	80020300 <putchar>
    8001ce32:	c881                	beqz	s1,8001ce42 <cycle_test_1+0x18c>
    8001ce34:	00028797          	auipc	a5,0x28
    8001ce38:	1dd7c783          	lbu	a5,477(a5) # 80045011 <excpt+0x1>
    8001ce3c:	4481                	li	s1,0
    8001ce3e:	1a079163          	bnez	a5,8001cfe0 <cycle_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001ce42:	4501                	li	a0,0
    8001ce44:	c95e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ce48:	0330000f          	fence	rw,rw
    8001ce4c:	4785                	li	a5,1
    8001ce4e:	00028717          	auipc	a4,0x28
    8001ce52:	1e073d23          	sd	zero,506(a4) # 80045048 <excpt+0x38>
    8001ce56:	00f41023          	sh	a5,0(s0)
    8001ce5a:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001ce5e:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ce62:	08200593          	li	a1,130
    8001ce66:	0000d617          	auipc	a2,0xd
    8001ce6a:	8c260613          	addi	a2,a2,-1854 # 80029728 <__func__.2+0x6ec0>
    8001ce6e:	00006517          	auipc	a0,0x6
    8001ce72:	cfa50513          	addi	a0,a0,-774 # 80022b68 <__func__.2+0x300>
    8001ce76:	5fb030ef          	jal	80020c70 <printf>
    8001ce7a:	00028797          	auipc	a5,0x28
    8001ce7e:	1977c783          	lbu	a5,407(a5) # 80045011 <excpt+0x1>
    8001ce82:	00006597          	auipc	a1,0x6
    8001ce86:	cbe58593          	addi	a1,a1,-834 # 80022b40 <__func__.2+0x2d8>
    8001ce8a:	cf89                	beqz	a5,8001cea4 <cycle_test_1+0x1ee>
    8001ce8c:	6418                	ld	a4,8(s0)
    8001ce8e:	4789                	li	a5,2
    8001ce90:	00006597          	auipc	a1,0x6
    8001ce94:	ca058593          	addi	a1,a1,-864 # 80022b30 <__func__.2+0x2c8>
    8001ce98:	00f70663          	beq	a4,a5,8001cea4 <cycle_test_1+0x1ee>
    8001ce9c:	00006597          	auipc	a1,0x6
    8001cea0:	ca458593          	addi	a1,a1,-860 # 80022b40 <__func__.2+0x2d8>
    8001cea4:	00006517          	auipc	a0,0x6
    8001cea8:	cdc50513          	addi	a0,a0,-804 # 80022b80 <__func__.2+0x318>
    8001ceac:	5c5030ef          	jal	80020c70 <printf>
    8001ceb0:	00028797          	auipc	a5,0x28
    8001ceb4:	1617c783          	lbu	a5,353(a5) # 80045011 <excpt+0x1>
    8001ceb8:	c789                	beqz	a5,8001cec2 <cycle_test_1+0x20c>
    8001ceba:	6418                	ld	a4,8(s0)
    8001cebc:	4789                	li	a5,2
    8001cebe:	00f70c63          	beq	a4,a5,8001ced6 <cycle_test_1+0x220>
    8001cec2:	00006517          	auipc	a0,0x6
    8001cec6:	cc650513          	addi	a0,a0,-826 # 80022b88 <__func__.2+0x320>
    8001ceca:	5a7030ef          	jal	80020c70 <printf>
    8001cece:	02900513          	li	a0,41
    8001ced2:	42e030ef          	jal	80020300 <putchar>
    8001ced6:	4529                	li	a0,10
    8001ced8:	428030ef          	jal	80020300 <putchar>
    8001cedc:	c881                	beqz	s1,8001ceec <cycle_test_1+0x236>
    8001cede:	00028797          	auipc	a5,0x28
    8001cee2:	1337c783          	lbu	a5,307(a5) # 80045011 <excpt+0x1>
    8001cee6:	4481                	li	s1,0
    8001cee8:	0e079763          	bnez	a5,8001cfd6 <cycle_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001ceec:	4505                	li	a0,1
    8001ceee:	bebe30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001cef2:	0330000f          	fence	rw,rw
    8001cef6:	4785                	li	a5,1
    8001cef8:	00028717          	auipc	a4,0x28
    8001cefc:	14073823          	sd	zero,336(a4) # 80045048 <excpt+0x38>
    8001cf00:	00f41023          	sh	a5,0(s0)
    8001cf04:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001cf08:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cf0c:	08200593          	li	a1,130
    8001cf10:	0000d617          	auipc	a2,0xd
    8001cf14:	86860613          	addi	a2,a2,-1944 # 80029778 <__func__.2+0x6f10>
    8001cf18:	00006517          	auipc	a0,0x6
    8001cf1c:	c5050513          	addi	a0,a0,-944 # 80022b68 <__func__.2+0x300>
    8001cf20:	551030ef          	jal	80020c70 <printf>
    8001cf24:	00028797          	auipc	a5,0x28
    8001cf28:	0ed7c783          	lbu	a5,237(a5) # 80045011 <excpt+0x1>
    8001cf2c:	00006597          	auipc	a1,0x6
    8001cf30:	c1458593          	addi	a1,a1,-1004 # 80022b40 <__func__.2+0x2d8>
    8001cf34:	cf89                	beqz	a5,8001cf4e <cycle_test_1+0x298>
    8001cf36:	6418                	ld	a4,8(s0)
    8001cf38:	4789                	li	a5,2
    8001cf3a:	00006597          	auipc	a1,0x6
    8001cf3e:	bf658593          	addi	a1,a1,-1034 # 80022b30 <__func__.2+0x2c8>
    8001cf42:	00f70663          	beq	a4,a5,8001cf4e <cycle_test_1+0x298>
    8001cf46:	00006597          	auipc	a1,0x6
    8001cf4a:	bfa58593          	addi	a1,a1,-1030 # 80022b40 <__func__.2+0x2d8>
    8001cf4e:	00006517          	auipc	a0,0x6
    8001cf52:	c3250513          	addi	a0,a0,-974 # 80022b80 <__func__.2+0x318>
    8001cf56:	51b030ef          	jal	80020c70 <printf>
    8001cf5a:	00028797          	auipc	a5,0x28
    8001cf5e:	0b77c783          	lbu	a5,183(a5) # 80045011 <excpt+0x1>
    8001cf62:	c789                	beqz	a5,8001cf6c <cycle_test_1+0x2b6>
    8001cf64:	6418                	ld	a4,8(s0)
    8001cf66:	4789                	li	a5,2
    8001cf68:	00f70c63          	beq	a4,a5,8001cf80 <cycle_test_1+0x2ca>
    8001cf6c:	00006517          	auipc	a0,0x6
    8001cf70:	c1c50513          	addi	a0,a0,-996 # 80022b88 <__func__.2+0x320>
    8001cf74:	4fd030ef          	jal	80020c70 <printf>
    8001cf78:	02900513          	li	a0,41
    8001cf7c:	384030ef          	jal	80020300 <putchar>
    8001cf80:	4529                	li	a0,10
    8001cf82:	37e030ef          	jal	80020300 <putchar>
    8001cf86:	c095                	beqz	s1,8001cfaa <cycle_test_1+0x2f4>
    8001cf88:	00028497          	auipc	s1,0x28
    8001cf8c:	0894c483          	lbu	s1,137(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001cf90:	00006597          	auipc	a1,0x6
    8001cf94:	bb058593          	addi	a1,a1,-1104 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cf98:	cc91                	beqz	s1,8001cfb4 <cycle_test_1+0x2fe>
    8001cf9a:	6418                	ld	a4,8(s0)
    8001cf9c:	4789                	li	a5,2
    TEST_END(); 
    8001cf9e:	00006597          	auipc	a1,0x6
    8001cfa2:	b9258593          	addi	a1,a1,-1134 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cfa6:	00f70763          	beq	a4,a5,8001cfb4 <cycle_test_1+0x2fe>
    8001cfaa:	4481                	li	s1,0
    TEST_END(); 
    8001cfac:	00006597          	auipc	a1,0x6
    8001cfb0:	b9458593          	addi	a1,a1,-1132 # 80022b40 <__func__.2+0x2d8>
    8001cfb4:	00006517          	auipc	a0,0x6
    8001cfb8:	c3450513          	addi	a0,a0,-972 # 80022be8 <__func__.2+0x380>
    8001cfbc:	4b5030ef          	jal	80020c70 <printf>
    8001cfc0:	4511                	li	a0,4
    8001cfc2:	b17e30ef          	jal	80000ad8 <goto_priv>
    8001cfc6:	be2e40ef          	jal	800013a8 <reset_state>
}
    8001cfca:	60e2                	ld	ra,24(sp)
    8001cfcc:	6442                	ld	s0,16(sp)
    8001cfce:	8526                	mv	a0,s1
    8001cfd0:	64a2                	ld	s1,8(sp)
    8001cfd2:	6105                	addi	sp,sp,32
    8001cfd4:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cfd6:	6404                	ld	s1,8(s0)
    8001cfd8:	14f9                	addi	s1,s1,-2
    8001cfda:	0014b493          	seqz	s1,s1
    8001cfde:	b739                	j	8001ceec <cycle_test_1+0x236>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001cfe0:	6404                	ld	s1,8(s0)
    8001cfe2:	14f9                	addi	s1,s1,-2
    8001cfe4:	0014b493          	seqz	s1,s1
    8001cfe8:	bda9                	j	8001ce42 <cycle_test_1+0x18c>

000000008001cfea <cycle_test_2>:

bool cycle_test_2() {
    8001cfea:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001cfec:	00005597          	auipc	a1,0x5
    8001cff0:	66c58593          	addi	a1,a1,1644 # 80022658 <__func__.32>
    8001cff4:	00006517          	auipc	a0,0x6
    8001cff8:	b5c50513          	addi	a0,a0,-1188 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_2() {
    8001cffc:	e406                	sd	ra,8(sp)
    8001cffe:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001d000:	471030ef          	jal	80020c70 <printf>
    8001d004:	4529                	li	a0,10
    8001d006:	2fa030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d00a:	4511                	li	a0,4
    8001d00c:	acde30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001d010:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001d014:	450d                	li	a0,3
    8001d016:	ac3e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d01a:	0330000f          	fence	rw,rw
    8001d01e:	4785                	li	a5,1
    8001d020:	00028717          	auipc	a4,0x28
    8001d024:	02073423          	sd	zero,40(a4) # 80045048 <excpt+0x38>
    8001d028:	00028717          	auipc	a4,0x28
    8001d02c:	fef71423          	sh	a5,-24(a4) # 80045010 <excpt>
    8001d030:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d034:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001d038:	08200593          	li	a1,130
    8001d03c:	0000c617          	auipc	a2,0xc
    8001d040:	78c60613          	addi	a2,a2,1932 # 800297c8 <__func__.2+0x6f60>
    8001d044:	00006517          	auipc	a0,0x6
    8001d048:	b2450513          	addi	a0,a0,-1244 # 80022b68 <__func__.2+0x300>
    8001d04c:	425030ef          	jal	80020c70 <printf>
    8001d050:	00028797          	auipc	a5,0x28
    8001d054:	fc17c783          	lbu	a5,-63(a5) # 80045011 <excpt+0x1>
    8001d058:	00006597          	auipc	a1,0x6
    8001d05c:	ad858593          	addi	a1,a1,-1320 # 80022b30 <__func__.2+0x2c8>
    8001d060:	c789                	beqz	a5,8001d06a <cycle_test_2+0x80>
    8001d062:	00006597          	auipc	a1,0x6
    8001d066:	ade58593          	addi	a1,a1,-1314 # 80022b40 <__func__.2+0x2d8>
    8001d06a:	00006517          	auipc	a0,0x6
    8001d06e:	b1650513          	addi	a0,a0,-1258 # 80022b80 <__func__.2+0x318>
    8001d072:	3ff030ef          	jal	80020c70 <printf>
    8001d076:	00028797          	auipc	a5,0x28
    8001d07a:	f9b7c783          	lbu	a5,-101(a5) # 80045011 <excpt+0x1>
    8001d07e:	e7a1                	bnez	a5,8001d0c6 <cycle_test_2+0xdc>
    8001d080:	4529                	li	a0,10
    8001d082:	27e030ef          	jal	80020300 <putchar>
    8001d086:	00028797          	auipc	a5,0x28
    8001d08a:	f8b7c783          	lbu	a5,-117(a5) # 80045011 <excpt+0x1>
    8001d08e:	e795                	bnez	a5,8001d0ba <cycle_test_2+0xd0>
    8001d090:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001d092:	00006597          	auipc	a1,0x6
    8001d096:	a9e58593          	addi	a1,a1,-1378 # 80022b30 <__func__.2+0x2c8>
    8001d09a:	00006517          	auipc	a0,0x6
    8001d09e:	b4e50513          	addi	a0,a0,-1202 # 80022be8 <__func__.2+0x380>
    8001d0a2:	3cf030ef          	jal	80020c70 <printf>
    8001d0a6:	4511                	li	a0,4
    8001d0a8:	a31e30ef          	jal	80000ad8 <goto_priv>
    8001d0ac:	afce40ef          	jal	800013a8 <reset_state>
}
    8001d0b0:	60a2                	ld	ra,8(sp)
    8001d0b2:	8522                	mv	a0,s0
    8001d0b4:	6402                	ld	s0,0(sp)
    8001d0b6:	0141                	addi	sp,sp,16
    8001d0b8:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001d0ba:	4401                	li	s0,0
    TEST_END(); 
    8001d0bc:	00006597          	auipc	a1,0x6
    8001d0c0:	a8458593          	addi	a1,a1,-1404 # 80022b40 <__func__.2+0x2d8>
    8001d0c4:	bfd9                	j	8001d09a <cycle_test_2+0xb0>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001d0c6:	00006517          	auipc	a0,0x6
    8001d0ca:	ac250513          	addi	a0,a0,-1342 # 80022b88 <__func__.2+0x320>
    8001d0ce:	3a3030ef          	jal	80020c70 <printf>
    8001d0d2:	02900513          	li	a0,41
    8001d0d6:	22a030ef          	jal	80020300 <putchar>
    8001d0da:	b75d                	j	8001d080 <cycle_test_2+0x96>

000000008001d0dc <cycle_test_3>:

bool cycle_test_3() {
    8001d0dc:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001d0de:	00005597          	auipc	a1,0x5
    8001d0e2:	58a58593          	addi	a1,a1,1418 # 80022668 <__func__.31>
    8001d0e6:	00006517          	auipc	a0,0x6
    8001d0ea:	a6a50513          	addi	a0,a0,-1430 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_3() {
    8001d0ee:	ec06                	sd	ra,24(sp)
    8001d0f0:	e822                	sd	s0,16(sp)
    8001d0f2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001d0f4:	37d030ef          	jal	80020c70 <printf>
    8001d0f8:	4529                	li	a0,10
    8001d0fa:	206030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d0fe:	4511                	li	a0,4
    8001d100:	9d9e30ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001d104:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d108:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001d10c:	4505                	li	a0,1
    8001d10e:	9cbe30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d112:	0330000f          	fence	rw,rw
    8001d116:	00028417          	auipc	s0,0x28
    8001d11a:	efa40413          	addi	s0,s0,-262 # 80045010 <excpt>
    8001d11e:	4785                	li	a5,1
    8001d120:	00028717          	auipc	a4,0x28
    8001d124:	f2073423          	sd	zero,-216(a4) # 80045048 <excpt+0x38>
    8001d128:	00f41023          	sh	a5,0(s0)
    8001d12c:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d130:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001d134:	08200593          	li	a1,130
    8001d138:	0000c617          	auipc	a2,0xc
    8001d13c:	6c860613          	addi	a2,a2,1736 # 80029800 <__func__.2+0x6f98>
    8001d140:	00006517          	auipc	a0,0x6
    8001d144:	a2850513          	addi	a0,a0,-1496 # 80022b68 <__func__.2+0x300>
    8001d148:	329030ef          	jal	80020c70 <printf>
    8001d14c:	00028797          	auipc	a5,0x28
    8001d150:	ec57c783          	lbu	a5,-315(a5) # 80045011 <excpt+0x1>
    8001d154:	00006597          	auipc	a1,0x6
    8001d158:	9ec58593          	addi	a1,a1,-1556 # 80022b40 <__func__.2+0x2d8>
    8001d15c:	cf89                	beqz	a5,8001d176 <cycle_test_3+0x9a>
    8001d15e:	6418                	ld	a4,8(s0)
    8001d160:	4789                	li	a5,2
    8001d162:	00006597          	auipc	a1,0x6
    8001d166:	9ce58593          	addi	a1,a1,-1586 # 80022b30 <__func__.2+0x2c8>
    8001d16a:	00f70663          	beq	a4,a5,8001d176 <cycle_test_3+0x9a>
    8001d16e:	00006597          	auipc	a1,0x6
    8001d172:	9d258593          	addi	a1,a1,-1582 # 80022b40 <__func__.2+0x2d8>
    8001d176:	00006517          	auipc	a0,0x6
    8001d17a:	a0a50513          	addi	a0,a0,-1526 # 80022b80 <__func__.2+0x318>
    8001d17e:	2f3030ef          	jal	80020c70 <printf>
    8001d182:	00028797          	auipc	a5,0x28
    8001d186:	e8f7c783          	lbu	a5,-369(a5) # 80045011 <excpt+0x1>
    8001d18a:	c789                	beqz	a5,8001d194 <cycle_test_3+0xb8>
    8001d18c:	6418                	ld	a4,8(s0)
    8001d18e:	4789                	li	a5,2
    8001d190:	00f70c63          	beq	a4,a5,8001d1a8 <cycle_test_3+0xcc>
    8001d194:	00006517          	auipc	a0,0x6
    8001d198:	9f450513          	addi	a0,a0,-1548 # 80022b88 <__func__.2+0x320>
    8001d19c:	2d5030ef          	jal	80020c70 <printf>
    8001d1a0:	02900513          	li	a0,41
    8001d1a4:	15c030ef          	jal	80020300 <putchar>
    8001d1a8:	4529                	li	a0,10
    8001d1aa:	156030ef          	jal	80020300 <putchar>
    8001d1ae:	00028497          	auipc	s1,0x28
    8001d1b2:	e634c483          	lbu	s1,-413(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001d1b6:	00006597          	auipc	a1,0x6
    8001d1ba:	98a58593          	addi	a1,a1,-1654 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001d1be:	cc91                	beqz	s1,8001d1da <cycle_test_3+0xfe>
    8001d1c0:	6418                	ld	a4,8(s0)
    8001d1c2:	4789                	li	a5,2
    TEST_END(); 
    8001d1c4:	00006597          	auipc	a1,0x6
    8001d1c8:	96c58593          	addi	a1,a1,-1684 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001d1cc:	00f70763          	beq	a4,a5,8001d1da <cycle_test_3+0xfe>
    8001d1d0:	4481                	li	s1,0
    TEST_END(); 
    8001d1d2:	00006597          	auipc	a1,0x6
    8001d1d6:	96e58593          	addi	a1,a1,-1682 # 80022b40 <__func__.2+0x2d8>
    8001d1da:	00006517          	auipc	a0,0x6
    8001d1de:	a0e50513          	addi	a0,a0,-1522 # 80022be8 <__func__.2+0x380>
    8001d1e2:	28f030ef          	jal	80020c70 <printf>
    8001d1e6:	4511                	li	a0,4
    8001d1e8:	8f1e30ef          	jal	80000ad8 <goto_priv>
    8001d1ec:	9bce40ef          	jal	800013a8 <reset_state>
}
    8001d1f0:	60e2                	ld	ra,24(sp)
    8001d1f2:	6442                	ld	s0,16(sp)
    8001d1f4:	8526                	mv	a0,s1
    8001d1f6:	64a2                	ld	s1,8(sp)
    8001d1f8:	6105                	addi	sp,sp,32
    8001d1fa:	8082                	ret

000000008001d1fc <cycle_test_4>:

bool cycle_test_4() {
    8001d1fc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001d1fe:	00005597          	auipc	a1,0x5
    8001d202:	47a58593          	addi	a1,a1,1146 # 80022678 <__func__.30>
    8001d206:	00006517          	auipc	a0,0x6
    8001d20a:	94a50513          	addi	a0,a0,-1718 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_4() {
    8001d20e:	e406                	sd	ra,8(sp)
    8001d210:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001d212:	25f030ef          	jal	80020c70 <printf>
    8001d216:	4529                	li	a0,10
    8001d218:	0e8030ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d21c:	4511                	li	a0,4
    8001d21e:	8bbe30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001d222:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d226:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001d22a:	4505                	li	a0,1
    8001d22c:	8ade30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d230:	0330000f          	fence	rw,rw
    8001d234:	4785                	li	a5,1
    8001d236:	00028717          	auipc	a4,0x28
    8001d23a:	e0073923          	sd	zero,-494(a4) # 80045048 <excpt+0x38>
    8001d23e:	00028717          	auipc	a4,0x28
    8001d242:	dcf71923          	sh	a5,-558(a4) # 80045010 <excpt>
    8001d246:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d24a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001d24e:	08200593          	li	a1,130
    8001d252:	0000c617          	auipc	a2,0xc
    8001d256:	5fe60613          	addi	a2,a2,1534 # 80029850 <__func__.2+0x6fe8>
    8001d25a:	00006517          	auipc	a0,0x6
    8001d25e:	90e50513          	addi	a0,a0,-1778 # 80022b68 <__func__.2+0x300>
    8001d262:	20f030ef          	jal	80020c70 <printf>
    8001d266:	00028797          	auipc	a5,0x28
    8001d26a:	dab7c783          	lbu	a5,-597(a5) # 80045011 <excpt+0x1>
    8001d26e:	00006597          	auipc	a1,0x6
    8001d272:	8c258593          	addi	a1,a1,-1854 # 80022b30 <__func__.2+0x2c8>
    8001d276:	c789                	beqz	a5,8001d280 <cycle_test_4+0x84>
    8001d278:	00006597          	auipc	a1,0x6
    8001d27c:	8c858593          	addi	a1,a1,-1848 # 80022b40 <__func__.2+0x2d8>
    8001d280:	00006517          	auipc	a0,0x6
    8001d284:	90050513          	addi	a0,a0,-1792 # 80022b80 <__func__.2+0x318>
    8001d288:	1e9030ef          	jal	80020c70 <printf>
    8001d28c:	00028797          	auipc	a5,0x28
    8001d290:	d857c783          	lbu	a5,-635(a5) # 80045011 <excpt+0x1>
    8001d294:	e7a1                	bnez	a5,8001d2dc <cycle_test_4+0xe0>
    8001d296:	4529                	li	a0,10
    8001d298:	068030ef          	jal	80020300 <putchar>
    8001d29c:	00028797          	auipc	a5,0x28
    8001d2a0:	d757c783          	lbu	a5,-651(a5) # 80045011 <excpt+0x1>
    8001d2a4:	e795                	bnez	a5,8001d2d0 <cycle_test_4+0xd4>
    8001d2a6:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001d2a8:	00006597          	auipc	a1,0x6
    8001d2ac:	88858593          	addi	a1,a1,-1912 # 80022b30 <__func__.2+0x2c8>
    8001d2b0:	00006517          	auipc	a0,0x6
    8001d2b4:	93850513          	addi	a0,a0,-1736 # 80022be8 <__func__.2+0x380>
    8001d2b8:	1b9030ef          	jal	80020c70 <printf>
    8001d2bc:	4511                	li	a0,4
    8001d2be:	81be30ef          	jal	80000ad8 <goto_priv>
    8001d2c2:	8e6e40ef          	jal	800013a8 <reset_state>
}
    8001d2c6:	60a2                	ld	ra,8(sp)
    8001d2c8:	8522                	mv	a0,s0
    8001d2ca:	6402                	ld	s0,0(sp)
    8001d2cc:	0141                	addi	sp,sp,16
    8001d2ce:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001d2d0:	4401                	li	s0,0
    TEST_END(); 
    8001d2d2:	00006597          	auipc	a1,0x6
    8001d2d6:	86e58593          	addi	a1,a1,-1938 # 80022b40 <__func__.2+0x2d8>
    8001d2da:	bfd9                	j	8001d2b0 <cycle_test_4+0xb4>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001d2dc:	00006517          	auipc	a0,0x6
    8001d2e0:	8ac50513          	addi	a0,a0,-1876 # 80022b88 <__func__.2+0x320>
    8001d2e4:	18d030ef          	jal	80020c70 <printf>
    8001d2e8:	02900513          	li	a0,41
    8001d2ec:	014030ef          	jal	80020300 <putchar>
    8001d2f0:	b75d                	j	8001d296 <cycle_test_4+0x9a>

000000008001d2f2 <cycle_test_5>:

bool cycle_test_5() {
    8001d2f2:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001d2f4:	00005597          	auipc	a1,0x5
    8001d2f8:	39458593          	addi	a1,a1,916 # 80022688 <__func__.29>
    8001d2fc:	00006517          	auipc	a0,0x6
    8001d300:	85450513          	addi	a0,a0,-1964 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_5() {
    8001d304:	ec06                	sd	ra,24(sp)
    8001d306:	e822                	sd	s0,16(sp)
    8001d308:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001d30a:	167030ef          	jal	80020c70 <printf>
    8001d30e:	4529                	li	a0,10
    8001d310:	7f1020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d314:	4511                	li	a0,4
    8001d316:	fc2e30ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001d31a:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d31e:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001d322:	4509                	li	a0,2
    8001d324:	fb4e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d328:	0330000f          	fence	rw,rw
    8001d32c:	00028417          	auipc	s0,0x28
    8001d330:	ce440413          	addi	s0,s0,-796 # 80045010 <excpt>
    8001d334:	4785                	li	a5,1
    8001d336:	00028717          	auipc	a4,0x28
    8001d33a:	d0073923          	sd	zero,-750(a4) # 80045048 <excpt+0x38>
    8001d33e:	00f41023          	sh	a5,0(s0)
    8001d342:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d346:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001d34a:	08200593          	li	a1,130
    8001d34e:	0000c617          	auipc	a2,0xc
    8001d352:	54a60613          	addi	a2,a2,1354 # 80029898 <__func__.2+0x7030>
    8001d356:	00006517          	auipc	a0,0x6
    8001d35a:	81250513          	addi	a0,a0,-2030 # 80022b68 <__func__.2+0x300>
    8001d35e:	113030ef          	jal	80020c70 <printf>
    8001d362:	00028797          	auipc	a5,0x28
    8001d366:	caf7c783          	lbu	a5,-849(a5) # 80045011 <excpt+0x1>
    8001d36a:	00005597          	auipc	a1,0x5
    8001d36e:	7d658593          	addi	a1,a1,2006 # 80022b40 <__func__.2+0x2d8>
    8001d372:	cf89                	beqz	a5,8001d38c <cycle_test_5+0x9a>
    8001d374:	6418                	ld	a4,8(s0)
    8001d376:	47d9                	li	a5,22
    8001d378:	00005597          	auipc	a1,0x5
    8001d37c:	7b858593          	addi	a1,a1,1976 # 80022b30 <__func__.2+0x2c8>
    8001d380:	00f70663          	beq	a4,a5,8001d38c <cycle_test_5+0x9a>
    8001d384:	00005597          	auipc	a1,0x5
    8001d388:	7bc58593          	addi	a1,a1,1980 # 80022b40 <__func__.2+0x2d8>
    8001d38c:	00005517          	auipc	a0,0x5
    8001d390:	7f450513          	addi	a0,a0,2036 # 80022b80 <__func__.2+0x318>
    8001d394:	0dd030ef          	jal	80020c70 <printf>
    8001d398:	00028797          	auipc	a5,0x28
    8001d39c:	c797c783          	lbu	a5,-903(a5) # 80045011 <excpt+0x1>
    8001d3a0:	c789                	beqz	a5,8001d3aa <cycle_test_5+0xb8>
    8001d3a2:	6418                	ld	a4,8(s0)
    8001d3a4:	47d9                	li	a5,22
    8001d3a6:	00f70c63          	beq	a4,a5,8001d3be <cycle_test_5+0xcc>
    8001d3aa:	00005517          	auipc	a0,0x5
    8001d3ae:	7de50513          	addi	a0,a0,2014 # 80022b88 <__func__.2+0x320>
    8001d3b2:	0bf030ef          	jal	80020c70 <printf>
    8001d3b6:	02900513          	li	a0,41
    8001d3ba:	747020ef          	jal	80020300 <putchar>
    8001d3be:	4529                	li	a0,10
    8001d3c0:	741020ef          	jal	80020300 <putchar>
    8001d3c4:	00028497          	auipc	s1,0x28
    8001d3c8:	c4d4c483          	lbu	s1,-947(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001d3cc:	00005597          	auipc	a1,0x5
    8001d3d0:	77458593          	addi	a1,a1,1908 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001d3d4:	cc91                	beqz	s1,8001d3f0 <cycle_test_5+0xfe>
    8001d3d6:	6418                	ld	a4,8(s0)
    8001d3d8:	47d9                	li	a5,22
    TEST_END(); 
    8001d3da:	00005597          	auipc	a1,0x5
    8001d3de:	75658593          	addi	a1,a1,1878 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001d3e2:	00f70763          	beq	a4,a5,8001d3f0 <cycle_test_5+0xfe>
    8001d3e6:	4481                	li	s1,0
    TEST_END(); 
    8001d3e8:	00005597          	auipc	a1,0x5
    8001d3ec:	75858593          	addi	a1,a1,1880 # 80022b40 <__func__.2+0x2d8>
    8001d3f0:	00005517          	auipc	a0,0x5
    8001d3f4:	7f850513          	addi	a0,a0,2040 # 80022be8 <__func__.2+0x380>
    8001d3f8:	079030ef          	jal	80020c70 <printf>
    8001d3fc:	4511                	li	a0,4
    8001d3fe:	edae30ef          	jal	80000ad8 <goto_priv>
    8001d402:	fa7e30ef          	jal	800013a8 <reset_state>
}
    8001d406:	60e2                	ld	ra,24(sp)
    8001d408:	6442                	ld	s0,16(sp)
    8001d40a:	8526                	mv	a0,s1
    8001d40c:	64a2                	ld	s1,8(sp)
    8001d40e:	6105                	addi	sp,sp,32
    8001d410:	8082                	ret

000000008001d412 <cycle_test_6>:

bool cycle_test_6() {
    8001d412:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001d414:	00005597          	auipc	a1,0x5
    8001d418:	28458593          	addi	a1,a1,644 # 80022698 <__func__.28>
    8001d41c:	00005517          	auipc	a0,0x5
    8001d420:	73450513          	addi	a0,a0,1844 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_6() {
    8001d424:	e406                	sd	ra,8(sp)
    8001d426:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001d428:	049030ef          	jal	80020c70 <printf>
    8001d42c:	4529                	li	a0,10
    8001d42e:	6d3020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d432:	4511                	li	a0,4
    8001d434:	ea4e30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001d438:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d43c:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001d440:	4509                	li	a0,2
    8001d442:	e96e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d446:	0330000f          	fence	rw,rw
    8001d44a:	4785                	li	a5,1
    8001d44c:	00028717          	auipc	a4,0x28
    8001d450:	be073e23          	sd	zero,-1028(a4) # 80045048 <excpt+0x38>
    8001d454:	00028717          	auipc	a4,0x28
    8001d458:	baf71e23          	sh	a5,-1092(a4) # 80045010 <excpt>
    8001d45c:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d460:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001d464:	08200593          	li	a1,130
    8001d468:	0000c617          	auipc	a2,0xc
    8001d46c:	49060613          	addi	a2,a2,1168 # 800298f8 <__func__.2+0x7090>
    8001d470:	00005517          	auipc	a0,0x5
    8001d474:	6f850513          	addi	a0,a0,1784 # 80022b68 <__func__.2+0x300>
    8001d478:	7f8030ef          	jal	80020c70 <printf>
    8001d47c:	00028797          	auipc	a5,0x28
    8001d480:	b957c783          	lbu	a5,-1131(a5) # 80045011 <excpt+0x1>
    8001d484:	00005597          	auipc	a1,0x5
    8001d488:	6ac58593          	addi	a1,a1,1708 # 80022b30 <__func__.2+0x2c8>
    8001d48c:	c789                	beqz	a5,8001d496 <cycle_test_6+0x84>
    8001d48e:	00005597          	auipc	a1,0x5
    8001d492:	6b258593          	addi	a1,a1,1714 # 80022b40 <__func__.2+0x2d8>
    8001d496:	00005517          	auipc	a0,0x5
    8001d49a:	6ea50513          	addi	a0,a0,1770 # 80022b80 <__func__.2+0x318>
    8001d49e:	7d2030ef          	jal	80020c70 <printf>
    8001d4a2:	00028797          	auipc	a5,0x28
    8001d4a6:	b6f7c783          	lbu	a5,-1169(a5) # 80045011 <excpt+0x1>
    8001d4aa:	e7a1                	bnez	a5,8001d4f2 <cycle_test_6+0xe0>
    8001d4ac:	4529                	li	a0,10
    8001d4ae:	653020ef          	jal	80020300 <putchar>
    8001d4b2:	00028797          	auipc	a5,0x28
    8001d4b6:	b5f7c783          	lbu	a5,-1185(a5) # 80045011 <excpt+0x1>
    8001d4ba:	e795                	bnez	a5,8001d4e6 <cycle_test_6+0xd4>
    8001d4bc:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001d4be:	00005597          	auipc	a1,0x5
    8001d4c2:	67258593          	addi	a1,a1,1650 # 80022b30 <__func__.2+0x2c8>
    8001d4c6:	00005517          	auipc	a0,0x5
    8001d4ca:	72250513          	addi	a0,a0,1826 # 80022be8 <__func__.2+0x380>
    8001d4ce:	7a2030ef          	jal	80020c70 <printf>
    8001d4d2:	4511                	li	a0,4
    8001d4d4:	e04e30ef          	jal	80000ad8 <goto_priv>
    8001d4d8:	ed1e30ef          	jal	800013a8 <reset_state>
}
    8001d4dc:	60a2                	ld	ra,8(sp)
    8001d4de:	8522                	mv	a0,s0
    8001d4e0:	6402                	ld	s0,0(sp)
    8001d4e2:	0141                	addi	sp,sp,16
    8001d4e4:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001d4e6:	4401                	li	s0,0
    TEST_END(); 
    8001d4e8:	00005597          	auipc	a1,0x5
    8001d4ec:	65858593          	addi	a1,a1,1624 # 80022b40 <__func__.2+0x2d8>
    8001d4f0:	bfd9                	j	8001d4c6 <cycle_test_6+0xb4>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001d4f2:	00005517          	auipc	a0,0x5
    8001d4f6:	69650513          	addi	a0,a0,1686 # 80022b88 <__func__.2+0x320>
    8001d4fa:	776030ef          	jal	80020c70 <printf>
    8001d4fe:	02900513          	li	a0,41
    8001d502:	5ff020ef          	jal	80020300 <putchar>
    8001d506:	b75d                	j	8001d4ac <cycle_test_6+0x9a>

000000008001d508 <cycle_test_7>:

bool cycle_test_7() {
    8001d508:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001d50a:	00005597          	auipc	a1,0x5
    8001d50e:	19e58593          	addi	a1,a1,414 # 800226a8 <__func__.27>
    8001d512:	00005517          	auipc	a0,0x5
    8001d516:	63e50513          	addi	a0,a0,1598 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_7() {
    8001d51a:	e406                	sd	ra,8(sp)
    8001d51c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001d51e:	752030ef          	jal	80020c70 <printf>
    8001d522:	4529                	li	a0,10
    8001d524:	5dd020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d528:	4511                	li	a0,4
    8001d52a:	daee30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001d52e:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d532:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001d536:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001d53a:	4501                	li	a0,0
    8001d53c:	d9ce30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d540:	0330000f          	fence	rw,rw
    8001d544:	4785                	li	a5,1
    8001d546:	00028717          	auipc	a4,0x28
    8001d54a:	b0073123          	sd	zero,-1278(a4) # 80045048 <excpt+0x38>
    8001d54e:	00028717          	auipc	a4,0x28
    8001d552:	acf71123          	sh	a5,-1342(a4) # 80045010 <excpt>
    8001d556:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d55a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001d55e:	08200593          	li	a1,130
    8001d562:	0000c617          	auipc	a2,0xc
    8001d566:	3de60613          	addi	a2,a2,990 # 80029940 <__func__.2+0x70d8>
    8001d56a:	00005517          	auipc	a0,0x5
    8001d56e:	5fe50513          	addi	a0,a0,1534 # 80022b68 <__func__.2+0x300>
    8001d572:	6fe030ef          	jal	80020c70 <printf>
    8001d576:	00028797          	auipc	a5,0x28
    8001d57a:	a9b7c783          	lbu	a5,-1381(a5) # 80045011 <excpt+0x1>
    8001d57e:	00005597          	auipc	a1,0x5
    8001d582:	5b258593          	addi	a1,a1,1458 # 80022b30 <__func__.2+0x2c8>
    8001d586:	c789                	beqz	a5,8001d590 <cycle_test_7+0x88>
    8001d588:	00005597          	auipc	a1,0x5
    8001d58c:	5b858593          	addi	a1,a1,1464 # 80022b40 <__func__.2+0x2d8>
    8001d590:	00005517          	auipc	a0,0x5
    8001d594:	5f050513          	addi	a0,a0,1520 # 80022b80 <__func__.2+0x318>
    8001d598:	6d8030ef          	jal	80020c70 <printf>
    8001d59c:	00028797          	auipc	a5,0x28
    8001d5a0:	a757c783          	lbu	a5,-1419(a5) # 80045011 <excpt+0x1>
    8001d5a4:	e7a1                	bnez	a5,8001d5ec <cycle_test_7+0xe4>
    8001d5a6:	4529                	li	a0,10
    8001d5a8:	559020ef          	jal	80020300 <putchar>
    8001d5ac:	00028797          	auipc	a5,0x28
    8001d5b0:	a657c783          	lbu	a5,-1435(a5) # 80045011 <excpt+0x1>
    8001d5b4:	e795                	bnez	a5,8001d5e0 <cycle_test_7+0xd8>
    8001d5b6:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001d5b8:	00005597          	auipc	a1,0x5
    8001d5bc:	57858593          	addi	a1,a1,1400 # 80022b30 <__func__.2+0x2c8>
    8001d5c0:	00005517          	auipc	a0,0x5
    8001d5c4:	62850513          	addi	a0,a0,1576 # 80022be8 <__func__.2+0x380>
    8001d5c8:	6a8030ef          	jal	80020c70 <printf>
    8001d5cc:	4511                	li	a0,4
    8001d5ce:	d0ae30ef          	jal	80000ad8 <goto_priv>
    8001d5d2:	dd7e30ef          	jal	800013a8 <reset_state>
}
    8001d5d6:	60a2                	ld	ra,8(sp)
    8001d5d8:	8522                	mv	a0,s0
    8001d5da:	6402                	ld	s0,0(sp)
    8001d5dc:	0141                	addi	sp,sp,16
    8001d5de:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001d5e0:	4401                	li	s0,0
    TEST_END(); 
    8001d5e2:	00005597          	auipc	a1,0x5
    8001d5e6:	55e58593          	addi	a1,a1,1374 # 80022b40 <__func__.2+0x2d8>
    8001d5ea:	bfd9                	j	8001d5c0 <cycle_test_7+0xb8>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001d5ec:	00005517          	auipc	a0,0x5
    8001d5f0:	59c50513          	addi	a0,a0,1436 # 80022b88 <__func__.2+0x320>
    8001d5f4:	67c030ef          	jal	80020c70 <printf>
    8001d5f8:	02900513          	li	a0,41
    8001d5fc:	505020ef          	jal	80020300 <putchar>
    8001d600:	b75d                	j	8001d5a6 <cycle_test_7+0x9e>

000000008001d602 <cycle_test_8>:

bool cycle_test_8() {
    8001d602:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001d604:	00005597          	auipc	a1,0x5
    8001d608:	0b458593          	addi	a1,a1,180 # 800226b8 <__func__.26>
    8001d60c:	00005517          	auipc	a0,0x5
    8001d610:	54450513          	addi	a0,a0,1348 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_8() {
    8001d614:	ec06                	sd	ra,24(sp)
    8001d616:	e822                	sd	s0,16(sp)
    8001d618:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001d61a:	656030ef          	jal	80020c70 <printf>
    8001d61e:	4529                	li	a0,10
    8001d620:	4e1020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d624:	4511                	li	a0,4
    8001d626:	cb2e30ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001d62a:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d62e:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001d632:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001d636:	4501                	li	a0,0
    8001d638:	ca0e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d63c:	0330000f          	fence	rw,rw
    8001d640:	00028417          	auipc	s0,0x28
    8001d644:	9d040413          	addi	s0,s0,-1584 # 80045010 <excpt>
    8001d648:	4785                	li	a5,1
    8001d64a:	00028717          	auipc	a4,0x28
    8001d64e:	9e073f23          	sd	zero,-1538(a4) # 80045048 <excpt+0x38>
    8001d652:	00f41023          	sh	a5,0(s0)
    8001d656:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d65a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001d65e:	08200593          	li	a1,130
    8001d662:	0000c617          	auipc	a2,0xc
    8001d666:	33660613          	addi	a2,a2,822 # 80029998 <__func__.2+0x7130>
    8001d66a:	00005517          	auipc	a0,0x5
    8001d66e:	4fe50513          	addi	a0,a0,1278 # 80022b68 <__func__.2+0x300>
    8001d672:	5fe030ef          	jal	80020c70 <printf>
    8001d676:	00028797          	auipc	a5,0x28
    8001d67a:	99b7c783          	lbu	a5,-1637(a5) # 80045011 <excpt+0x1>
    8001d67e:	00005597          	auipc	a1,0x5
    8001d682:	4c258593          	addi	a1,a1,1218 # 80022b40 <__func__.2+0x2d8>
    8001d686:	cf89                	beqz	a5,8001d6a0 <cycle_test_8+0x9e>
    8001d688:	6418                	ld	a4,8(s0)
    8001d68a:	47d9                	li	a5,22
    8001d68c:	00005597          	auipc	a1,0x5
    8001d690:	4a458593          	addi	a1,a1,1188 # 80022b30 <__func__.2+0x2c8>
    8001d694:	00f70663          	beq	a4,a5,8001d6a0 <cycle_test_8+0x9e>
    8001d698:	00005597          	auipc	a1,0x5
    8001d69c:	4a858593          	addi	a1,a1,1192 # 80022b40 <__func__.2+0x2d8>
    8001d6a0:	00005517          	auipc	a0,0x5
    8001d6a4:	4e050513          	addi	a0,a0,1248 # 80022b80 <__func__.2+0x318>
    8001d6a8:	5c8030ef          	jal	80020c70 <printf>
    8001d6ac:	00028797          	auipc	a5,0x28
    8001d6b0:	9657c783          	lbu	a5,-1691(a5) # 80045011 <excpt+0x1>
    8001d6b4:	c789                	beqz	a5,8001d6be <cycle_test_8+0xbc>
    8001d6b6:	6418                	ld	a4,8(s0)
    8001d6b8:	47d9                	li	a5,22
    8001d6ba:	00f70c63          	beq	a4,a5,8001d6d2 <cycle_test_8+0xd0>
    8001d6be:	00005517          	auipc	a0,0x5
    8001d6c2:	4ca50513          	addi	a0,a0,1226 # 80022b88 <__func__.2+0x320>
    8001d6c6:	5aa030ef          	jal	80020c70 <printf>
    8001d6ca:	02900513          	li	a0,41
    8001d6ce:	433020ef          	jal	80020300 <putchar>
    8001d6d2:	4529                	li	a0,10
    8001d6d4:	42d020ef          	jal	80020300 <putchar>
    8001d6d8:	00028497          	auipc	s1,0x28
    8001d6dc:	9394c483          	lbu	s1,-1735(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001d6e0:	00005597          	auipc	a1,0x5
    8001d6e4:	46058593          	addi	a1,a1,1120 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001d6e8:	cc91                	beqz	s1,8001d704 <cycle_test_8+0x102>
    8001d6ea:	6418                	ld	a4,8(s0)
    8001d6ec:	47d9                	li	a5,22
    TEST_END(); 
    8001d6ee:	00005597          	auipc	a1,0x5
    8001d6f2:	44258593          	addi	a1,a1,1090 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001d6f6:	00f70763          	beq	a4,a5,8001d704 <cycle_test_8+0x102>
    8001d6fa:	4481                	li	s1,0
    TEST_END(); 
    8001d6fc:	00005597          	auipc	a1,0x5
    8001d700:	44458593          	addi	a1,a1,1092 # 80022b40 <__func__.2+0x2d8>
    8001d704:	00005517          	auipc	a0,0x5
    8001d708:	4e450513          	addi	a0,a0,1252 # 80022be8 <__func__.2+0x380>
    8001d70c:	564030ef          	jal	80020c70 <printf>
    8001d710:	4511                	li	a0,4
    8001d712:	bc6e30ef          	jal	80000ad8 <goto_priv>
    8001d716:	c93e30ef          	jal	800013a8 <reset_state>
}
    8001d71a:	60e2                	ld	ra,24(sp)
    8001d71c:	6442                	ld	s0,16(sp)
    8001d71e:	8526                	mv	a0,s1
    8001d720:	64a2                	ld	s1,8(sp)
    8001d722:	6105                	addi	sp,sp,32
    8001d724:	8082                	ret

000000008001d726 <cycle_test_9>:

bool cycle_test_9() {
    8001d726:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001d728:	00005597          	auipc	a1,0x5
    8001d72c:	fa058593          	addi	a1,a1,-96 # 800226c8 <__func__.25>
    8001d730:	00005517          	auipc	a0,0x5
    8001d734:	42050513          	addi	a0,a0,1056 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_9() {
    8001d738:	ec06                	sd	ra,24(sp)
    8001d73a:	e822                	sd	s0,16(sp)
    8001d73c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001d73e:	532030ef          	jal	80020c70 <printf>
    8001d742:	4529                	li	a0,10
    8001d744:	3bd020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d748:	4511                	li	a0,4
    8001d74a:	b8ee30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d74e:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001d752:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_VU);
    8001d756:	4501                	li	a0,0
    8001d758:	b80e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d75c:	0330000f          	fence	rw,rw
    8001d760:	00028417          	auipc	s0,0x28
    8001d764:	8b040413          	addi	s0,s0,-1872 # 80045010 <excpt>
    8001d768:	4785                	li	a5,1
    8001d76a:	00028717          	auipc	a4,0x28
    8001d76e:	8c073f23          	sd	zero,-1826(a4) # 80045048 <excpt+0x38>
    8001d772:	00f41023          	sh	a5,0(s0)
    8001d776:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d77a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001d77e:	08200593          	li	a1,130
    8001d782:	0000c617          	auipc	a2,0xc
    8001d786:	28660613          	addi	a2,a2,646 # 80029a08 <__func__.2+0x71a0>
    8001d78a:	00005517          	auipc	a0,0x5
    8001d78e:	3de50513          	addi	a0,a0,990 # 80022b68 <__func__.2+0x300>
    8001d792:	4de030ef          	jal	80020c70 <printf>
    8001d796:	00028797          	auipc	a5,0x28
    8001d79a:	87b7c783          	lbu	a5,-1925(a5) # 80045011 <excpt+0x1>
    8001d79e:	00005597          	auipc	a1,0x5
    8001d7a2:	3a258593          	addi	a1,a1,930 # 80022b40 <__func__.2+0x2d8>
    8001d7a6:	cf89                	beqz	a5,8001d7c0 <cycle_test_9+0x9a>
    8001d7a8:	6418                	ld	a4,8(s0)
    8001d7aa:	4789                	li	a5,2
    8001d7ac:	00005597          	auipc	a1,0x5
    8001d7b0:	38458593          	addi	a1,a1,900 # 80022b30 <__func__.2+0x2c8>
    8001d7b4:	00f70663          	beq	a4,a5,8001d7c0 <cycle_test_9+0x9a>
    8001d7b8:	00005597          	auipc	a1,0x5
    8001d7bc:	38858593          	addi	a1,a1,904 # 80022b40 <__func__.2+0x2d8>
    8001d7c0:	00005517          	auipc	a0,0x5
    8001d7c4:	3c050513          	addi	a0,a0,960 # 80022b80 <__func__.2+0x318>
    8001d7c8:	4a8030ef          	jal	80020c70 <printf>
    8001d7cc:	00028797          	auipc	a5,0x28
    8001d7d0:	8457c783          	lbu	a5,-1979(a5) # 80045011 <excpt+0x1>
    8001d7d4:	c789                	beqz	a5,8001d7de <cycle_test_9+0xb8>
    8001d7d6:	6418                	ld	a4,8(s0)
    8001d7d8:	4789                	li	a5,2
    8001d7da:	00f70c63          	beq	a4,a5,8001d7f2 <cycle_test_9+0xcc>
    8001d7de:	00005517          	auipc	a0,0x5
    8001d7e2:	3aa50513          	addi	a0,a0,938 # 80022b88 <__func__.2+0x320>
    8001d7e6:	48a030ef          	jal	80020c70 <printf>
    8001d7ea:	02900513          	li	a0,41
    8001d7ee:	313020ef          	jal	80020300 <putchar>
    8001d7f2:	4529                	li	a0,10
    8001d7f4:	30d020ef          	jal	80020300 <putchar>
    8001d7f8:	00028497          	auipc	s1,0x28
    8001d7fc:	8194c483          	lbu	s1,-2023(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001d800:	00005597          	auipc	a1,0x5
    8001d804:	34058593          	addi	a1,a1,832 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001d808:	cc91                	beqz	s1,8001d824 <cycle_test_9+0xfe>
    8001d80a:	6418                	ld	a4,8(s0)
    8001d80c:	4789                	li	a5,2
    TEST_END(); 
    8001d80e:	00005597          	auipc	a1,0x5
    8001d812:	32258593          	addi	a1,a1,802 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001d816:	00f70763          	beq	a4,a5,8001d824 <cycle_test_9+0xfe>
    8001d81a:	4481                	li	s1,0
    TEST_END(); 
    8001d81c:	00005597          	auipc	a1,0x5
    8001d820:	32458593          	addi	a1,a1,804 # 80022b40 <__func__.2+0x2d8>
    8001d824:	00005517          	auipc	a0,0x5
    8001d828:	3c450513          	addi	a0,a0,964 # 80022be8 <__func__.2+0x380>
    8001d82c:	444030ef          	jal	80020c70 <printf>
    8001d830:	4511                	li	a0,4
    8001d832:	aa6e30ef          	jal	80000ad8 <goto_priv>
    8001d836:	b73e30ef          	jal	800013a8 <reset_state>
}
    8001d83a:	60e2                	ld	ra,24(sp)
    8001d83c:	6442                	ld	s0,16(sp)
    8001d83e:	8526                	mv	a0,s1
    8001d840:	64a2                	ld	s1,8(sp)
    8001d842:	6105                	addi	sp,sp,32
    8001d844:	8082                	ret

000000008001d846 <cycle_test_10>:

bool cycle_test_10() {
    8001d846:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001d848:	00005597          	auipc	a1,0x5
    8001d84c:	e9058593          	addi	a1,a1,-368 # 800226d8 <__func__.24>
    8001d850:	00005517          	auipc	a0,0x5
    8001d854:	30050513          	addi	a0,a0,768 # 80022b50 <__func__.2+0x2e8>
bool cycle_test_10() {
    8001d858:	e406                	sd	ra,8(sp)
    8001d85a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001d85c:	414030ef          	jal	80020c70 <printf>
    8001d860:	4529                	li	a0,10
    8001d862:	29f020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d866:	4511                	li	a0,4
    8001d868:	a70e30ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001d86c:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001d870:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001d874:	4509                	li	a0,2
    8001d876:	a62e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d87a:	0330000f          	fence	rw,rw
    8001d87e:	4785                	li	a5,1
    8001d880:	00027717          	auipc	a4,0x27
    8001d884:	7c073423          	sd	zero,1992(a4) # 80045048 <excpt+0x38>
    8001d888:	00027717          	auipc	a4,0x27
    8001d88c:	78f71423          	sh	a5,1928(a4) # 80045010 <excpt>
    8001d890:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8001d894:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001d898:	08200593          	li	a1,130
    8001d89c:	0000c617          	auipc	a2,0xc
    8001d8a0:	1cc60613          	addi	a2,a2,460 # 80029a68 <__func__.2+0x7200>
    8001d8a4:	00005517          	auipc	a0,0x5
    8001d8a8:	2c450513          	addi	a0,a0,708 # 80022b68 <__func__.2+0x300>
    8001d8ac:	3c4030ef          	jal	80020c70 <printf>
    8001d8b0:	00027797          	auipc	a5,0x27
    8001d8b4:	7617c783          	lbu	a5,1889(a5) # 80045011 <excpt+0x1>
    8001d8b8:	00005597          	auipc	a1,0x5
    8001d8bc:	27858593          	addi	a1,a1,632 # 80022b30 <__func__.2+0x2c8>
    8001d8c0:	c789                	beqz	a5,8001d8ca <cycle_test_10+0x84>
    8001d8c2:	00005597          	auipc	a1,0x5
    8001d8c6:	27e58593          	addi	a1,a1,638 # 80022b40 <__func__.2+0x2d8>
    8001d8ca:	00005517          	auipc	a0,0x5
    8001d8ce:	2b650513          	addi	a0,a0,694 # 80022b80 <__func__.2+0x318>
    8001d8d2:	39e030ef          	jal	80020c70 <printf>
    8001d8d6:	00027797          	auipc	a5,0x27
    8001d8da:	73b7c783          	lbu	a5,1851(a5) # 80045011 <excpt+0x1>
    8001d8de:	e7a1                	bnez	a5,8001d926 <cycle_test_10+0xe0>
    8001d8e0:	4529                	li	a0,10
    8001d8e2:	21f020ef          	jal	80020300 <putchar>
    8001d8e6:	00027797          	auipc	a5,0x27
    8001d8ea:	72b7c783          	lbu	a5,1835(a5) # 80045011 <excpt+0x1>
    8001d8ee:	e795                	bnez	a5,8001d91a <cycle_test_10+0xd4>
    8001d8f0:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001d8f2:	00005597          	auipc	a1,0x5
    8001d8f6:	23e58593          	addi	a1,a1,574 # 80022b30 <__func__.2+0x2c8>
    8001d8fa:	00005517          	auipc	a0,0x5
    8001d8fe:	2ee50513          	addi	a0,a0,750 # 80022be8 <__func__.2+0x380>
    8001d902:	36e030ef          	jal	80020c70 <printf>
    8001d906:	4511                	li	a0,4
    8001d908:	9d0e30ef          	jal	80000ad8 <goto_priv>
    8001d90c:	a9de30ef          	jal	800013a8 <reset_state>
}
    8001d910:	60a2                	ld	ra,8(sp)
    8001d912:	8522                	mv	a0,s0
    8001d914:	6402                	ld	s0,0(sp)
    8001d916:	0141                	addi	sp,sp,16
    8001d918:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001d91a:	4401                	li	s0,0
    TEST_END(); 
    8001d91c:	00005597          	auipc	a1,0x5
    8001d920:	22458593          	addi	a1,a1,548 # 80022b40 <__func__.2+0x2d8>
    8001d924:	bfd9                	j	8001d8fa <cycle_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001d926:	00005517          	auipc	a0,0x5
    8001d92a:	26250513          	addi	a0,a0,610 # 80022b88 <__func__.2+0x320>
    8001d92e:	342030ef          	jal	80020c70 <printf>
    8001d932:	02900513          	li	a0,41
    8001d936:	1cb020ef          	jal	80020300 <putchar>
    8001d93a:	b75d                	j	8001d8e0 <cycle_test_10+0x9a>

000000008001d93c <instret_test_1>:


bool instret_test_1() {
    8001d93c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001d93e:	00005597          	auipc	a1,0x5
    8001d942:	daa58593          	addi	a1,a1,-598 # 800226e8 <__func__.23>
    8001d946:	00005517          	auipc	a0,0x5
    8001d94a:	20a50513          	addi	a0,a0,522 # 80022b50 <__func__.2+0x2e8>
bool instret_test_1() {
    8001d94e:	ec06                	sd	ra,24(sp)
    8001d950:	e822                	sd	s0,16(sp)
    8001d952:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001d954:	31c030ef          	jal	80020c70 <printf>
    8001d958:	4529                	li	a0,10
    8001d95a:	1a7020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001d95e:	4511                	li	a0,4
    8001d960:	978e30ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001d964:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001d968:	4509                	li	a0,2
    8001d96a:	96ee30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001d96e:	0330000f          	fence	rw,rw
    8001d972:	00027417          	auipc	s0,0x27
    8001d976:	69e40413          	addi	s0,s0,1694 # 80045010 <excpt>
    8001d97a:	4785                	li	a5,1
    8001d97c:	00027717          	auipc	a4,0x27
    8001d980:	6c073623          	sd	zero,1740(a4) # 80045048 <excpt+0x38>
    8001d984:	00f41023          	sh	a5,0(s0)
    8001d988:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001d98c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001d990:	08200593          	li	a1,130
    8001d994:	0000c617          	auipc	a2,0xc
    8001d998:	12460613          	addi	a2,a2,292 # 80029ab8 <__func__.2+0x7250>
    8001d99c:	00005517          	auipc	a0,0x5
    8001d9a0:	1cc50513          	addi	a0,a0,460 # 80022b68 <__func__.2+0x300>
    8001d9a4:	2cc030ef          	jal	80020c70 <printf>
    8001d9a8:	00027797          	auipc	a5,0x27
    8001d9ac:	6697c783          	lbu	a5,1641(a5) # 80045011 <excpt+0x1>
    8001d9b0:	00005597          	auipc	a1,0x5
    8001d9b4:	19058593          	addi	a1,a1,400 # 80022b40 <__func__.2+0x2d8>
    8001d9b8:	cf89                	beqz	a5,8001d9d2 <instret_test_1+0x96>
    8001d9ba:	6418                	ld	a4,8(s0)
    8001d9bc:	4789                	li	a5,2
    8001d9be:	00005597          	auipc	a1,0x5
    8001d9c2:	17258593          	addi	a1,a1,370 # 80022b30 <__func__.2+0x2c8>
    8001d9c6:	00f70663          	beq	a4,a5,8001d9d2 <instret_test_1+0x96>
    8001d9ca:	00005597          	auipc	a1,0x5
    8001d9ce:	17658593          	addi	a1,a1,374 # 80022b40 <__func__.2+0x2d8>
    8001d9d2:	00005517          	auipc	a0,0x5
    8001d9d6:	1ae50513          	addi	a0,a0,430 # 80022b80 <__func__.2+0x318>
    8001d9da:	296030ef          	jal	80020c70 <printf>
    8001d9de:	00027797          	auipc	a5,0x27
    8001d9e2:	6337c783          	lbu	a5,1587(a5) # 80045011 <excpt+0x1>
    8001d9e6:	c789                	beqz	a5,8001d9f0 <instret_test_1+0xb4>
    8001d9e8:	6418                	ld	a4,8(s0)
    8001d9ea:	4789                	li	a5,2
    8001d9ec:	00f70c63          	beq	a4,a5,8001da04 <instret_test_1+0xc8>
    8001d9f0:	00005517          	auipc	a0,0x5
    8001d9f4:	19850513          	addi	a0,a0,408 # 80022b88 <__func__.2+0x320>
    8001d9f8:	278030ef          	jal	80020c70 <printf>
    8001d9fc:	02900513          	li	a0,41
    8001da00:	101020ef          	jal	80020300 <putchar>
    8001da04:	4529                	li	a0,10
    8001da06:	0fb020ef          	jal	80020300 <putchar>
    8001da0a:	00027797          	auipc	a5,0x27
    8001da0e:	6077c783          	lbu	a5,1543(a5) # 80045011 <excpt+0x1>
    8001da12:	4481                	li	s1,0
    8001da14:	c789                	beqz	a5,8001da1e <instret_test_1+0xe2>
    8001da16:	6404                	ld	s1,8(s0)
    8001da18:	14f9                	addi	s1,s1,-2
    8001da1a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001da1e:	450d                	li	a0,3
    8001da20:	8b8e30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001da24:	0330000f          	fence	rw,rw
    8001da28:	4785                	li	a5,1
    8001da2a:	00027717          	auipc	a4,0x27
    8001da2e:	60073f23          	sd	zero,1566(a4) # 80045048 <excpt+0x38>
    8001da32:	00f41023          	sh	a5,0(s0)
    8001da36:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001da3a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001da3e:	08200593          	li	a1,130
    8001da42:	0000c617          	auipc	a2,0xc
    8001da46:	0c660613          	addi	a2,a2,198 # 80029b08 <__func__.2+0x72a0>
    8001da4a:	00005517          	auipc	a0,0x5
    8001da4e:	11e50513          	addi	a0,a0,286 # 80022b68 <__func__.2+0x300>
    8001da52:	21e030ef          	jal	80020c70 <printf>
    8001da56:	00027797          	auipc	a5,0x27
    8001da5a:	5bb7c783          	lbu	a5,1467(a5) # 80045011 <excpt+0x1>
    8001da5e:	00005597          	auipc	a1,0x5
    8001da62:	0e258593          	addi	a1,a1,226 # 80022b40 <__func__.2+0x2d8>
    8001da66:	cf89                	beqz	a5,8001da80 <instret_test_1+0x144>
    8001da68:	6418                	ld	a4,8(s0)
    8001da6a:	4789                	li	a5,2
    8001da6c:	00005597          	auipc	a1,0x5
    8001da70:	0c458593          	addi	a1,a1,196 # 80022b30 <__func__.2+0x2c8>
    8001da74:	00f70663          	beq	a4,a5,8001da80 <instret_test_1+0x144>
    8001da78:	00005597          	auipc	a1,0x5
    8001da7c:	0c858593          	addi	a1,a1,200 # 80022b40 <__func__.2+0x2d8>
    8001da80:	00005517          	auipc	a0,0x5
    8001da84:	10050513          	addi	a0,a0,256 # 80022b80 <__func__.2+0x318>
    8001da88:	1e8030ef          	jal	80020c70 <printf>
    8001da8c:	00027797          	auipc	a5,0x27
    8001da90:	5857c783          	lbu	a5,1413(a5) # 80045011 <excpt+0x1>
    8001da94:	c789                	beqz	a5,8001da9e <instret_test_1+0x162>
    8001da96:	6418                	ld	a4,8(s0)
    8001da98:	4789                	li	a5,2
    8001da9a:	00f70c63          	beq	a4,a5,8001dab2 <instret_test_1+0x176>
    8001da9e:	00005517          	auipc	a0,0x5
    8001daa2:	0ea50513          	addi	a0,a0,234 # 80022b88 <__func__.2+0x320>
    8001daa6:	1ca030ef          	jal	80020c70 <printf>
    8001daaa:	02900513          	li	a0,41
    8001daae:	053020ef          	jal	80020300 <putchar>
    8001dab2:	4529                	li	a0,10
    8001dab4:	04d020ef          	jal	80020300 <putchar>
    8001dab8:	c881                	beqz	s1,8001dac8 <instret_test_1+0x18c>
    8001daba:	00027797          	auipc	a5,0x27
    8001dabe:	5577c783          	lbu	a5,1367(a5) # 80045011 <excpt+0x1>
    8001dac2:	4481                	li	s1,0
    8001dac4:	1a079163          	bnez	a5,8001dc66 <instret_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001dac8:	4501                	li	a0,0
    8001daca:	80ee30ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dace:	0330000f          	fence	rw,rw
    8001dad2:	4785                	li	a5,1
    8001dad4:	00027717          	auipc	a4,0x27
    8001dad8:	56073a23          	sd	zero,1396(a4) # 80045048 <excpt+0x38>
    8001dadc:	00f41023          	sh	a5,0(s0)
    8001dae0:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001dae4:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001dae8:	08200593          	li	a1,130
    8001daec:	0000c617          	auipc	a2,0xc
    8001daf0:	06c60613          	addi	a2,a2,108 # 80029b58 <__func__.2+0x72f0>
    8001daf4:	00005517          	auipc	a0,0x5
    8001daf8:	07450513          	addi	a0,a0,116 # 80022b68 <__func__.2+0x300>
    8001dafc:	174030ef          	jal	80020c70 <printf>
    8001db00:	00027797          	auipc	a5,0x27
    8001db04:	5117c783          	lbu	a5,1297(a5) # 80045011 <excpt+0x1>
    8001db08:	00005597          	auipc	a1,0x5
    8001db0c:	03858593          	addi	a1,a1,56 # 80022b40 <__func__.2+0x2d8>
    8001db10:	cf89                	beqz	a5,8001db2a <instret_test_1+0x1ee>
    8001db12:	6418                	ld	a4,8(s0)
    8001db14:	4789                	li	a5,2
    8001db16:	00005597          	auipc	a1,0x5
    8001db1a:	01a58593          	addi	a1,a1,26 # 80022b30 <__func__.2+0x2c8>
    8001db1e:	00f70663          	beq	a4,a5,8001db2a <instret_test_1+0x1ee>
    8001db22:	00005597          	auipc	a1,0x5
    8001db26:	01e58593          	addi	a1,a1,30 # 80022b40 <__func__.2+0x2d8>
    8001db2a:	00005517          	auipc	a0,0x5
    8001db2e:	05650513          	addi	a0,a0,86 # 80022b80 <__func__.2+0x318>
    8001db32:	13e030ef          	jal	80020c70 <printf>
    8001db36:	00027797          	auipc	a5,0x27
    8001db3a:	4db7c783          	lbu	a5,1243(a5) # 80045011 <excpt+0x1>
    8001db3e:	c789                	beqz	a5,8001db48 <instret_test_1+0x20c>
    8001db40:	6418                	ld	a4,8(s0)
    8001db42:	4789                	li	a5,2
    8001db44:	00f70c63          	beq	a4,a5,8001db5c <instret_test_1+0x220>
    8001db48:	00005517          	auipc	a0,0x5
    8001db4c:	04050513          	addi	a0,a0,64 # 80022b88 <__func__.2+0x320>
    8001db50:	120030ef          	jal	80020c70 <printf>
    8001db54:	02900513          	li	a0,41
    8001db58:	7a8020ef          	jal	80020300 <putchar>
    8001db5c:	4529                	li	a0,10
    8001db5e:	7a2020ef          	jal	80020300 <putchar>
    8001db62:	c881                	beqz	s1,8001db72 <instret_test_1+0x236>
    8001db64:	00027797          	auipc	a5,0x27
    8001db68:	4ad7c783          	lbu	a5,1197(a5) # 80045011 <excpt+0x1>
    8001db6c:	4481                	li	s1,0
    8001db6e:	0e079763          	bnez	a5,8001dc5c <instret_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001db72:	4505                	li	a0,1
    8001db74:	f65e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001db78:	0330000f          	fence	rw,rw
    8001db7c:	4785                	li	a5,1
    8001db7e:	00027717          	auipc	a4,0x27
    8001db82:	4c073523          	sd	zero,1226(a4) # 80045048 <excpt+0x38>
    8001db86:	00f41023          	sh	a5,0(s0)
    8001db8a:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001db8e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001db92:	08200593          	li	a1,130
    8001db96:	0000c617          	auipc	a2,0xc
    8001db9a:	01260613          	addi	a2,a2,18 # 80029ba8 <__func__.2+0x7340>
    8001db9e:	00005517          	auipc	a0,0x5
    8001dba2:	fca50513          	addi	a0,a0,-54 # 80022b68 <__func__.2+0x300>
    8001dba6:	0ca030ef          	jal	80020c70 <printf>
    8001dbaa:	00027797          	auipc	a5,0x27
    8001dbae:	4677c783          	lbu	a5,1127(a5) # 80045011 <excpt+0x1>
    8001dbb2:	00005597          	auipc	a1,0x5
    8001dbb6:	f8e58593          	addi	a1,a1,-114 # 80022b40 <__func__.2+0x2d8>
    8001dbba:	cf89                	beqz	a5,8001dbd4 <instret_test_1+0x298>
    8001dbbc:	6418                	ld	a4,8(s0)
    8001dbbe:	4789                	li	a5,2
    8001dbc0:	00005597          	auipc	a1,0x5
    8001dbc4:	f7058593          	addi	a1,a1,-144 # 80022b30 <__func__.2+0x2c8>
    8001dbc8:	00f70663          	beq	a4,a5,8001dbd4 <instret_test_1+0x298>
    8001dbcc:	00005597          	auipc	a1,0x5
    8001dbd0:	f7458593          	addi	a1,a1,-140 # 80022b40 <__func__.2+0x2d8>
    8001dbd4:	00005517          	auipc	a0,0x5
    8001dbd8:	fac50513          	addi	a0,a0,-84 # 80022b80 <__func__.2+0x318>
    8001dbdc:	094030ef          	jal	80020c70 <printf>
    8001dbe0:	00027797          	auipc	a5,0x27
    8001dbe4:	4317c783          	lbu	a5,1073(a5) # 80045011 <excpt+0x1>
    8001dbe8:	c789                	beqz	a5,8001dbf2 <instret_test_1+0x2b6>
    8001dbea:	6418                	ld	a4,8(s0)
    8001dbec:	4789                	li	a5,2
    8001dbee:	00f70c63          	beq	a4,a5,8001dc06 <instret_test_1+0x2ca>
    8001dbf2:	00005517          	auipc	a0,0x5
    8001dbf6:	f9650513          	addi	a0,a0,-106 # 80022b88 <__func__.2+0x320>
    8001dbfa:	076030ef          	jal	80020c70 <printf>
    8001dbfe:	02900513          	li	a0,41
    8001dc02:	6fe020ef          	jal	80020300 <putchar>
    8001dc06:	4529                	li	a0,10
    8001dc08:	6f8020ef          	jal	80020300 <putchar>
    8001dc0c:	c095                	beqz	s1,8001dc30 <instret_test_1+0x2f4>
    8001dc0e:	00027497          	auipc	s1,0x27
    8001dc12:	4034c483          	lbu	s1,1027(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001dc16:	00005597          	auipc	a1,0x5
    8001dc1a:	f2a58593          	addi	a1,a1,-214 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001dc1e:	cc91                	beqz	s1,8001dc3a <instret_test_1+0x2fe>
    8001dc20:	6418                	ld	a4,8(s0)
    8001dc22:	4789                	li	a5,2
    TEST_END(); 
    8001dc24:	00005597          	auipc	a1,0x5
    8001dc28:	f0c58593          	addi	a1,a1,-244 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001dc2c:	00f70763          	beq	a4,a5,8001dc3a <instret_test_1+0x2fe>
    8001dc30:	4481                	li	s1,0
    TEST_END(); 
    8001dc32:	00005597          	auipc	a1,0x5
    8001dc36:	f0e58593          	addi	a1,a1,-242 # 80022b40 <__func__.2+0x2d8>
    8001dc3a:	00005517          	auipc	a0,0x5
    8001dc3e:	fae50513          	addi	a0,a0,-82 # 80022be8 <__func__.2+0x380>
    8001dc42:	02e030ef          	jal	80020c70 <printf>
    8001dc46:	4511                	li	a0,4
    8001dc48:	e91e20ef          	jal	80000ad8 <goto_priv>
    8001dc4c:	f5ce30ef          	jal	800013a8 <reset_state>
}
    8001dc50:	60e2                	ld	ra,24(sp)
    8001dc52:	6442                	ld	s0,16(sp)
    8001dc54:	8526                	mv	a0,s1
    8001dc56:	64a2                	ld	s1,8(sp)
    8001dc58:	6105                	addi	sp,sp,32
    8001dc5a:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001dc5c:	6404                	ld	s1,8(s0)
    8001dc5e:	14f9                	addi	s1,s1,-2
    8001dc60:	0014b493          	seqz	s1,s1
    8001dc64:	b739                	j	8001db72 <instret_test_1+0x236>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001dc66:	6404                	ld	s1,8(s0)
    8001dc68:	14f9                	addi	s1,s1,-2
    8001dc6a:	0014b493          	seqz	s1,s1
    8001dc6e:	bda9                	j	8001dac8 <instret_test_1+0x18c>

000000008001dc70 <instret_test_2>:

bool instret_test_2() {
    8001dc70:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001dc72:	00005597          	auipc	a1,0x5
    8001dc76:	a8658593          	addi	a1,a1,-1402 # 800226f8 <__func__.22>
    8001dc7a:	00005517          	auipc	a0,0x5
    8001dc7e:	ed650513          	addi	a0,a0,-298 # 80022b50 <__func__.2+0x2e8>
bool instret_test_2() {
    8001dc82:	e406                	sd	ra,8(sp)
    8001dc84:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001dc86:	7eb020ef          	jal	80020c70 <printf>
    8001dc8a:	4529                	li	a0,10
    8001dc8c:	674020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001dc90:	4511                	li	a0,4
    8001dc92:	e47e20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001dc96:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001dc9a:	450d                	li	a0,3
    8001dc9c:	e3de20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dca0:	0330000f          	fence	rw,rw
    8001dca4:	4785                	li	a5,1
    8001dca6:	00027717          	auipc	a4,0x27
    8001dcaa:	3a073123          	sd	zero,930(a4) # 80045048 <excpt+0x38>
    8001dcae:	00027717          	auipc	a4,0x27
    8001dcb2:	36f71123          	sh	a5,866(a4) # 80045010 <excpt>
    8001dcb6:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001dcba:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001dcbe:	08200593          	li	a1,130
    8001dcc2:	0000c617          	auipc	a2,0xc
    8001dcc6:	f3660613          	addi	a2,a2,-202 # 80029bf8 <__func__.2+0x7390>
    8001dcca:	00005517          	auipc	a0,0x5
    8001dcce:	e9e50513          	addi	a0,a0,-354 # 80022b68 <__func__.2+0x300>
    8001dcd2:	79f020ef          	jal	80020c70 <printf>
    8001dcd6:	00027797          	auipc	a5,0x27
    8001dcda:	33b7c783          	lbu	a5,827(a5) # 80045011 <excpt+0x1>
    8001dcde:	00005597          	auipc	a1,0x5
    8001dce2:	e5258593          	addi	a1,a1,-430 # 80022b30 <__func__.2+0x2c8>
    8001dce6:	c789                	beqz	a5,8001dcf0 <instret_test_2+0x80>
    8001dce8:	00005597          	auipc	a1,0x5
    8001dcec:	e5858593          	addi	a1,a1,-424 # 80022b40 <__func__.2+0x2d8>
    8001dcf0:	00005517          	auipc	a0,0x5
    8001dcf4:	e9050513          	addi	a0,a0,-368 # 80022b80 <__func__.2+0x318>
    8001dcf8:	779020ef          	jal	80020c70 <printf>
    8001dcfc:	00027797          	auipc	a5,0x27
    8001dd00:	3157c783          	lbu	a5,789(a5) # 80045011 <excpt+0x1>
    8001dd04:	e7a1                	bnez	a5,8001dd4c <instret_test_2+0xdc>
    8001dd06:	4529                	li	a0,10
    8001dd08:	5f8020ef          	jal	80020300 <putchar>
    8001dd0c:	00027797          	auipc	a5,0x27
    8001dd10:	3057c783          	lbu	a5,773(a5) # 80045011 <excpt+0x1>
    8001dd14:	e795                	bnez	a5,8001dd40 <instret_test_2+0xd0>
    8001dd16:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001dd18:	00005597          	auipc	a1,0x5
    8001dd1c:	e1858593          	addi	a1,a1,-488 # 80022b30 <__func__.2+0x2c8>
    8001dd20:	00005517          	auipc	a0,0x5
    8001dd24:	ec850513          	addi	a0,a0,-312 # 80022be8 <__func__.2+0x380>
    8001dd28:	749020ef          	jal	80020c70 <printf>
    8001dd2c:	4511                	li	a0,4
    8001dd2e:	dabe20ef          	jal	80000ad8 <goto_priv>
    8001dd32:	e76e30ef          	jal	800013a8 <reset_state>
}
    8001dd36:	60a2                	ld	ra,8(sp)
    8001dd38:	8522                	mv	a0,s0
    8001dd3a:	6402                	ld	s0,0(sp)
    8001dd3c:	0141                	addi	sp,sp,16
    8001dd3e:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001dd40:	4401                	li	s0,0
    TEST_END(); 
    8001dd42:	00005597          	auipc	a1,0x5
    8001dd46:	dfe58593          	addi	a1,a1,-514 # 80022b40 <__func__.2+0x2d8>
    8001dd4a:	bfd9                	j	8001dd20 <instret_test_2+0xb0>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001dd4c:	00005517          	auipc	a0,0x5
    8001dd50:	e3c50513          	addi	a0,a0,-452 # 80022b88 <__func__.2+0x320>
    8001dd54:	71d020ef          	jal	80020c70 <printf>
    8001dd58:	02900513          	li	a0,41
    8001dd5c:	5a4020ef          	jal	80020300 <putchar>
    8001dd60:	b75d                	j	8001dd06 <instret_test_2+0x96>

000000008001dd62 <instret_test_3>:

bool instret_test_3() {
    8001dd62:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001dd64:	00005597          	auipc	a1,0x5
    8001dd68:	9a458593          	addi	a1,a1,-1628 # 80022708 <__func__.21>
    8001dd6c:	00005517          	auipc	a0,0x5
    8001dd70:	de450513          	addi	a0,a0,-540 # 80022b50 <__func__.2+0x2e8>
bool instret_test_3() {
    8001dd74:	ec06                	sd	ra,24(sp)
    8001dd76:	e822                	sd	s0,16(sp)
    8001dd78:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001dd7a:	6f7020ef          	jal	80020c70 <printf>
    8001dd7e:	4529                	li	a0,10
    8001dd80:	580020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001dd84:	4511                	li	a0,4
    8001dd86:	d53e20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001dd8a:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001dd8e:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001dd92:	4505                	li	a0,1
    8001dd94:	d45e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dd98:	0330000f          	fence	rw,rw
    8001dd9c:	00027417          	auipc	s0,0x27
    8001dda0:	27440413          	addi	s0,s0,628 # 80045010 <excpt>
    8001dda4:	4785                	li	a5,1
    8001dda6:	00027717          	auipc	a4,0x27
    8001ddaa:	2a073123          	sd	zero,674(a4) # 80045048 <excpt+0x38>
    8001ddae:	00f41023          	sh	a5,0(s0)
    8001ddb2:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001ddb6:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001ddba:	08200593          	li	a1,130
    8001ddbe:	0000c617          	auipc	a2,0xc
    8001ddc2:	e7260613          	addi	a2,a2,-398 # 80029c30 <__func__.2+0x73c8>
    8001ddc6:	00005517          	auipc	a0,0x5
    8001ddca:	da250513          	addi	a0,a0,-606 # 80022b68 <__func__.2+0x300>
    8001ddce:	6a3020ef          	jal	80020c70 <printf>
    8001ddd2:	00027797          	auipc	a5,0x27
    8001ddd6:	23f7c783          	lbu	a5,575(a5) # 80045011 <excpt+0x1>
    8001ddda:	00005597          	auipc	a1,0x5
    8001ddde:	d6658593          	addi	a1,a1,-666 # 80022b40 <__func__.2+0x2d8>
    8001dde2:	cf89                	beqz	a5,8001ddfc <instret_test_3+0x9a>
    8001dde4:	6418                	ld	a4,8(s0)
    8001dde6:	4789                	li	a5,2
    8001dde8:	00005597          	auipc	a1,0x5
    8001ddec:	d4858593          	addi	a1,a1,-696 # 80022b30 <__func__.2+0x2c8>
    8001ddf0:	00f70663          	beq	a4,a5,8001ddfc <instret_test_3+0x9a>
    8001ddf4:	00005597          	auipc	a1,0x5
    8001ddf8:	d4c58593          	addi	a1,a1,-692 # 80022b40 <__func__.2+0x2d8>
    8001ddfc:	00005517          	auipc	a0,0x5
    8001de00:	d8450513          	addi	a0,a0,-636 # 80022b80 <__func__.2+0x318>
    8001de04:	66d020ef          	jal	80020c70 <printf>
    8001de08:	00027797          	auipc	a5,0x27
    8001de0c:	2097c783          	lbu	a5,521(a5) # 80045011 <excpt+0x1>
    8001de10:	c789                	beqz	a5,8001de1a <instret_test_3+0xb8>
    8001de12:	6418                	ld	a4,8(s0)
    8001de14:	4789                	li	a5,2
    8001de16:	00f70c63          	beq	a4,a5,8001de2e <instret_test_3+0xcc>
    8001de1a:	00005517          	auipc	a0,0x5
    8001de1e:	d6e50513          	addi	a0,a0,-658 # 80022b88 <__func__.2+0x320>
    8001de22:	64f020ef          	jal	80020c70 <printf>
    8001de26:	02900513          	li	a0,41
    8001de2a:	4d6020ef          	jal	80020300 <putchar>
    8001de2e:	4529                	li	a0,10
    8001de30:	4d0020ef          	jal	80020300 <putchar>
    8001de34:	00027497          	auipc	s1,0x27
    8001de38:	1dd4c483          	lbu	s1,477(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001de3c:	00005597          	auipc	a1,0x5
    8001de40:	d0458593          	addi	a1,a1,-764 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001de44:	cc91                	beqz	s1,8001de60 <instret_test_3+0xfe>
    8001de46:	6418                	ld	a4,8(s0)
    8001de48:	4789                	li	a5,2
    TEST_END(); 
    8001de4a:	00005597          	auipc	a1,0x5
    8001de4e:	ce658593          	addi	a1,a1,-794 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001de52:	00f70763          	beq	a4,a5,8001de60 <instret_test_3+0xfe>
    8001de56:	4481                	li	s1,0
    TEST_END(); 
    8001de58:	00005597          	auipc	a1,0x5
    8001de5c:	ce858593          	addi	a1,a1,-792 # 80022b40 <__func__.2+0x2d8>
    8001de60:	00005517          	auipc	a0,0x5
    8001de64:	d8850513          	addi	a0,a0,-632 # 80022be8 <__func__.2+0x380>
    8001de68:	609020ef          	jal	80020c70 <printf>
    8001de6c:	4511                	li	a0,4
    8001de6e:	c6be20ef          	jal	80000ad8 <goto_priv>
    8001de72:	d36e30ef          	jal	800013a8 <reset_state>
}
    8001de76:	60e2                	ld	ra,24(sp)
    8001de78:	6442                	ld	s0,16(sp)
    8001de7a:	8526                	mv	a0,s1
    8001de7c:	64a2                	ld	s1,8(sp)
    8001de7e:	6105                	addi	sp,sp,32
    8001de80:	8082                	ret

000000008001de82 <instret_test_4>:

bool instret_test_4() {
    8001de82:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001de84:	00005597          	auipc	a1,0x5
    8001de88:	89458593          	addi	a1,a1,-1900 # 80022718 <__func__.20>
    8001de8c:	00005517          	auipc	a0,0x5
    8001de90:	cc450513          	addi	a0,a0,-828 # 80022b50 <__func__.2+0x2e8>
bool instret_test_4() {
    8001de94:	e406                	sd	ra,8(sp)
    8001de96:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001de98:	5d9020ef          	jal	80020c70 <printf>
    8001de9c:	4529                	li	a0,10
    8001de9e:	462020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001dea2:	4511                	li	a0,4
    8001dea4:	c35e20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001dea8:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001deac:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001deb0:	4505                	li	a0,1
    8001deb2:	c27e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001deb6:	0330000f          	fence	rw,rw
    8001deba:	4785                	li	a5,1
    8001debc:	00027717          	auipc	a4,0x27
    8001dec0:	18073623          	sd	zero,396(a4) # 80045048 <excpt+0x38>
    8001dec4:	00027717          	auipc	a4,0x27
    8001dec8:	14f71623          	sh	a5,332(a4) # 80045010 <excpt>
    8001decc:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001ded0:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001ded4:	08200593          	li	a1,130
    8001ded8:	0000c617          	auipc	a2,0xc
    8001dedc:	da860613          	addi	a2,a2,-600 # 80029c80 <__func__.2+0x7418>
    8001dee0:	00005517          	auipc	a0,0x5
    8001dee4:	c8850513          	addi	a0,a0,-888 # 80022b68 <__func__.2+0x300>
    8001dee8:	589020ef          	jal	80020c70 <printf>
    8001deec:	00027797          	auipc	a5,0x27
    8001def0:	1257c783          	lbu	a5,293(a5) # 80045011 <excpt+0x1>
    8001def4:	00005597          	auipc	a1,0x5
    8001def8:	c3c58593          	addi	a1,a1,-964 # 80022b30 <__func__.2+0x2c8>
    8001defc:	c789                	beqz	a5,8001df06 <instret_test_4+0x84>
    8001defe:	00005597          	auipc	a1,0x5
    8001df02:	c4258593          	addi	a1,a1,-958 # 80022b40 <__func__.2+0x2d8>
    8001df06:	00005517          	auipc	a0,0x5
    8001df0a:	c7a50513          	addi	a0,a0,-902 # 80022b80 <__func__.2+0x318>
    8001df0e:	563020ef          	jal	80020c70 <printf>
    8001df12:	00027797          	auipc	a5,0x27
    8001df16:	0ff7c783          	lbu	a5,255(a5) # 80045011 <excpt+0x1>
    8001df1a:	e7a1                	bnez	a5,8001df62 <instret_test_4+0xe0>
    8001df1c:	4529                	li	a0,10
    8001df1e:	3e2020ef          	jal	80020300 <putchar>
    8001df22:	00027797          	auipc	a5,0x27
    8001df26:	0ef7c783          	lbu	a5,239(a5) # 80045011 <excpt+0x1>
    8001df2a:	e795                	bnez	a5,8001df56 <instret_test_4+0xd4>
    8001df2c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001df2e:	00005597          	auipc	a1,0x5
    8001df32:	c0258593          	addi	a1,a1,-1022 # 80022b30 <__func__.2+0x2c8>
    8001df36:	00005517          	auipc	a0,0x5
    8001df3a:	cb250513          	addi	a0,a0,-846 # 80022be8 <__func__.2+0x380>
    8001df3e:	533020ef          	jal	80020c70 <printf>
    8001df42:	4511                	li	a0,4
    8001df44:	b95e20ef          	jal	80000ad8 <goto_priv>
    8001df48:	c60e30ef          	jal	800013a8 <reset_state>
}
    8001df4c:	60a2                	ld	ra,8(sp)
    8001df4e:	8522                	mv	a0,s0
    8001df50:	6402                	ld	s0,0(sp)
    8001df52:	0141                	addi	sp,sp,16
    8001df54:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001df56:	4401                	li	s0,0
    TEST_END(); 
    8001df58:	00005597          	auipc	a1,0x5
    8001df5c:	be858593          	addi	a1,a1,-1048 # 80022b40 <__func__.2+0x2d8>
    8001df60:	bfd9                	j	8001df36 <instret_test_4+0xb4>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001df62:	00005517          	auipc	a0,0x5
    8001df66:	c2650513          	addi	a0,a0,-986 # 80022b88 <__func__.2+0x320>
    8001df6a:	507020ef          	jal	80020c70 <printf>
    8001df6e:	02900513          	li	a0,41
    8001df72:	38e020ef          	jal	80020300 <putchar>
    8001df76:	b75d                	j	8001df1c <instret_test_4+0x9a>

000000008001df78 <instret_test_5>:

bool instret_test_5() {
    8001df78:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001df7a:	00004597          	auipc	a1,0x4
    8001df7e:	7ae58593          	addi	a1,a1,1966 # 80022728 <__func__.19>
    8001df82:	00005517          	auipc	a0,0x5
    8001df86:	bce50513          	addi	a0,a0,-1074 # 80022b50 <__func__.2+0x2e8>
bool instret_test_5() {
    8001df8a:	ec06                	sd	ra,24(sp)
    8001df8c:	e822                	sd	s0,16(sp)
    8001df8e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001df90:	4e1020ef          	jal	80020c70 <printf>
    8001df94:	4529                	li	a0,10
    8001df96:	36a020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001df9a:	4511                	li	a0,4
    8001df9c:	b3de20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001dfa0:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001dfa4:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001dfa8:	4509                	li	a0,2
    8001dfaa:	b2fe20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dfae:	0330000f          	fence	rw,rw
    8001dfb2:	00027417          	auipc	s0,0x27
    8001dfb6:	05e40413          	addi	s0,s0,94 # 80045010 <excpt>
    8001dfba:	4785                	li	a5,1
    8001dfbc:	00027717          	auipc	a4,0x27
    8001dfc0:	08073623          	sd	zero,140(a4) # 80045048 <excpt+0x38>
    8001dfc4:	00f41023          	sh	a5,0(s0)
    8001dfc8:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001dfcc:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001dfd0:	08200593          	li	a1,130
    8001dfd4:	0000c617          	auipc	a2,0xc
    8001dfd8:	cf460613          	addi	a2,a2,-780 # 80029cc8 <__func__.2+0x7460>
    8001dfdc:	00005517          	auipc	a0,0x5
    8001dfe0:	b8c50513          	addi	a0,a0,-1140 # 80022b68 <__func__.2+0x300>
    8001dfe4:	48d020ef          	jal	80020c70 <printf>
    8001dfe8:	00027797          	auipc	a5,0x27
    8001dfec:	0297c783          	lbu	a5,41(a5) # 80045011 <excpt+0x1>
    8001dff0:	00005597          	auipc	a1,0x5
    8001dff4:	b5058593          	addi	a1,a1,-1200 # 80022b40 <__func__.2+0x2d8>
    8001dff8:	cf89                	beqz	a5,8001e012 <instret_test_5+0x9a>
    8001dffa:	6418                	ld	a4,8(s0)
    8001dffc:	47d9                	li	a5,22
    8001dffe:	00005597          	auipc	a1,0x5
    8001e002:	b3258593          	addi	a1,a1,-1230 # 80022b30 <__func__.2+0x2c8>
    8001e006:	00f70663          	beq	a4,a5,8001e012 <instret_test_5+0x9a>
    8001e00a:	00005597          	auipc	a1,0x5
    8001e00e:	b3658593          	addi	a1,a1,-1226 # 80022b40 <__func__.2+0x2d8>
    8001e012:	00005517          	auipc	a0,0x5
    8001e016:	b6e50513          	addi	a0,a0,-1170 # 80022b80 <__func__.2+0x318>
    8001e01a:	457020ef          	jal	80020c70 <printf>
    8001e01e:	00027797          	auipc	a5,0x27
    8001e022:	ff37c783          	lbu	a5,-13(a5) # 80045011 <excpt+0x1>
    8001e026:	c789                	beqz	a5,8001e030 <instret_test_5+0xb8>
    8001e028:	6418                	ld	a4,8(s0)
    8001e02a:	47d9                	li	a5,22
    8001e02c:	00f70c63          	beq	a4,a5,8001e044 <instret_test_5+0xcc>
    8001e030:	00005517          	auipc	a0,0x5
    8001e034:	b5850513          	addi	a0,a0,-1192 # 80022b88 <__func__.2+0x320>
    8001e038:	439020ef          	jal	80020c70 <printf>
    8001e03c:	02900513          	li	a0,41
    8001e040:	2c0020ef          	jal	80020300 <putchar>
    8001e044:	4529                	li	a0,10
    8001e046:	2ba020ef          	jal	80020300 <putchar>
    8001e04a:	00027497          	auipc	s1,0x27
    8001e04e:	fc74c483          	lbu	s1,-57(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e052:	00005597          	auipc	a1,0x5
    8001e056:	aee58593          	addi	a1,a1,-1298 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001e05a:	cc91                	beqz	s1,8001e076 <instret_test_5+0xfe>
    8001e05c:	6418                	ld	a4,8(s0)
    8001e05e:	47d9                	li	a5,22
    TEST_END(); 
    8001e060:	00005597          	auipc	a1,0x5
    8001e064:	ad058593          	addi	a1,a1,-1328 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001e068:	00f70763          	beq	a4,a5,8001e076 <instret_test_5+0xfe>
    8001e06c:	4481                	li	s1,0
    TEST_END(); 
    8001e06e:	00005597          	auipc	a1,0x5
    8001e072:	ad258593          	addi	a1,a1,-1326 # 80022b40 <__func__.2+0x2d8>
    8001e076:	00005517          	auipc	a0,0x5
    8001e07a:	b7250513          	addi	a0,a0,-1166 # 80022be8 <__func__.2+0x380>
    8001e07e:	3f3020ef          	jal	80020c70 <printf>
    8001e082:	4511                	li	a0,4
    8001e084:	a55e20ef          	jal	80000ad8 <goto_priv>
    8001e088:	b20e30ef          	jal	800013a8 <reset_state>
}
    8001e08c:	60e2                	ld	ra,24(sp)
    8001e08e:	6442                	ld	s0,16(sp)
    8001e090:	8526                	mv	a0,s1
    8001e092:	64a2                	ld	s1,8(sp)
    8001e094:	6105                	addi	sp,sp,32
    8001e096:	8082                	ret

000000008001e098 <instret_test_6>:

bool instret_test_6() {
    8001e098:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e09a:	00004597          	auipc	a1,0x4
    8001e09e:	69e58593          	addi	a1,a1,1694 # 80022738 <__func__.18>
    8001e0a2:	00005517          	auipc	a0,0x5
    8001e0a6:	aae50513          	addi	a0,a0,-1362 # 80022b50 <__func__.2+0x2e8>
bool instret_test_6() {
    8001e0aa:	e406                	sd	ra,8(sp)
    8001e0ac:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e0ae:	3c3020ef          	jal	80020c70 <printf>
    8001e0b2:	4529                	li	a0,10
    8001e0b4:	24c020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001e0b8:	4511                	li	a0,4
    8001e0ba:	a1fe20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001e0be:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001e0c2:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001e0c6:	4509                	li	a0,2
    8001e0c8:	a11e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e0cc:	0330000f          	fence	rw,rw
    8001e0d0:	4785                	li	a5,1
    8001e0d2:	00027717          	auipc	a4,0x27
    8001e0d6:	f6073b23          	sd	zero,-138(a4) # 80045048 <excpt+0x38>
    8001e0da:	00027717          	auipc	a4,0x27
    8001e0de:	f2f71b23          	sh	a5,-202(a4) # 80045010 <excpt>
    8001e0e2:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001e0e6:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001e0ea:	08200593          	li	a1,130
    8001e0ee:	0000c617          	auipc	a2,0xc
    8001e0f2:	c3a60613          	addi	a2,a2,-966 # 80029d28 <__func__.2+0x74c0>
    8001e0f6:	00005517          	auipc	a0,0x5
    8001e0fa:	a7250513          	addi	a0,a0,-1422 # 80022b68 <__func__.2+0x300>
    8001e0fe:	373020ef          	jal	80020c70 <printf>
    8001e102:	00027797          	auipc	a5,0x27
    8001e106:	f0f7c783          	lbu	a5,-241(a5) # 80045011 <excpt+0x1>
    8001e10a:	00005597          	auipc	a1,0x5
    8001e10e:	a2658593          	addi	a1,a1,-1498 # 80022b30 <__func__.2+0x2c8>
    8001e112:	c789                	beqz	a5,8001e11c <instret_test_6+0x84>
    8001e114:	00005597          	auipc	a1,0x5
    8001e118:	a2c58593          	addi	a1,a1,-1492 # 80022b40 <__func__.2+0x2d8>
    8001e11c:	00005517          	auipc	a0,0x5
    8001e120:	a6450513          	addi	a0,a0,-1436 # 80022b80 <__func__.2+0x318>
    8001e124:	34d020ef          	jal	80020c70 <printf>
    8001e128:	00027797          	auipc	a5,0x27
    8001e12c:	ee97c783          	lbu	a5,-279(a5) # 80045011 <excpt+0x1>
    8001e130:	e7a1                	bnez	a5,8001e178 <instret_test_6+0xe0>
    8001e132:	4529                	li	a0,10
    8001e134:	1cc020ef          	jal	80020300 <putchar>
    8001e138:	00027797          	auipc	a5,0x27
    8001e13c:	ed97c783          	lbu	a5,-295(a5) # 80045011 <excpt+0x1>
    8001e140:	e795                	bnez	a5,8001e16c <instret_test_6+0xd4>
    8001e142:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e144:	00005597          	auipc	a1,0x5
    8001e148:	9ec58593          	addi	a1,a1,-1556 # 80022b30 <__func__.2+0x2c8>
    8001e14c:	00005517          	auipc	a0,0x5
    8001e150:	a9c50513          	addi	a0,a0,-1380 # 80022be8 <__func__.2+0x380>
    8001e154:	31d020ef          	jal	80020c70 <printf>
    8001e158:	4511                	li	a0,4
    8001e15a:	97fe20ef          	jal	80000ad8 <goto_priv>
    8001e15e:	a4ae30ef          	jal	800013a8 <reset_state>
}
    8001e162:	60a2                	ld	ra,8(sp)
    8001e164:	8522                	mv	a0,s0
    8001e166:	6402                	ld	s0,0(sp)
    8001e168:	0141                	addi	sp,sp,16
    8001e16a:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001e16c:	4401                	li	s0,0
    TEST_END(); 
    8001e16e:	00005597          	auipc	a1,0x5
    8001e172:	9d258593          	addi	a1,a1,-1582 # 80022b40 <__func__.2+0x2d8>
    8001e176:	bfd9                	j	8001e14c <instret_test_6+0xb4>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001e178:	00005517          	auipc	a0,0x5
    8001e17c:	a1050513          	addi	a0,a0,-1520 # 80022b88 <__func__.2+0x320>
    8001e180:	2f1020ef          	jal	80020c70 <printf>
    8001e184:	02900513          	li	a0,41
    8001e188:	178020ef          	jal	80020300 <putchar>
    8001e18c:	b75d                	j	8001e132 <instret_test_6+0x9a>

000000008001e18e <instret_test_7>:

bool instret_test_7() {
    8001e18e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e190:	00004597          	auipc	a1,0x4
    8001e194:	5b858593          	addi	a1,a1,1464 # 80022748 <__func__.17>
    8001e198:	00005517          	auipc	a0,0x5
    8001e19c:	9b850513          	addi	a0,a0,-1608 # 80022b50 <__func__.2+0x2e8>
bool instret_test_7() {
    8001e1a0:	e406                	sd	ra,8(sp)
    8001e1a2:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e1a4:	2cd020ef          	jal	80020c70 <printf>
    8001e1a8:	4529                	li	a0,10
    8001e1aa:	156020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001e1ae:	4511                	li	a0,4
    8001e1b0:	929e20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001e1b4:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001e1b8:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001e1bc:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001e1c0:	4501                	li	a0,0
    8001e1c2:	917e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e1c6:	0330000f          	fence	rw,rw
    8001e1ca:	4785                	li	a5,1
    8001e1cc:	00027717          	auipc	a4,0x27
    8001e1d0:	e6073e23          	sd	zero,-388(a4) # 80045048 <excpt+0x38>
    8001e1d4:	00027717          	auipc	a4,0x27
    8001e1d8:	e2f71e23          	sh	a5,-452(a4) # 80045010 <excpt>
    8001e1dc:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001e1e0:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001e1e4:	08200593          	li	a1,130
    8001e1e8:	0000c617          	auipc	a2,0xc
    8001e1ec:	b8860613          	addi	a2,a2,-1144 # 80029d70 <__func__.2+0x7508>
    8001e1f0:	00005517          	auipc	a0,0x5
    8001e1f4:	97850513          	addi	a0,a0,-1672 # 80022b68 <__func__.2+0x300>
    8001e1f8:	279020ef          	jal	80020c70 <printf>
    8001e1fc:	00027797          	auipc	a5,0x27
    8001e200:	e157c783          	lbu	a5,-491(a5) # 80045011 <excpt+0x1>
    8001e204:	00005597          	auipc	a1,0x5
    8001e208:	92c58593          	addi	a1,a1,-1748 # 80022b30 <__func__.2+0x2c8>
    8001e20c:	c789                	beqz	a5,8001e216 <instret_test_7+0x88>
    8001e20e:	00005597          	auipc	a1,0x5
    8001e212:	93258593          	addi	a1,a1,-1742 # 80022b40 <__func__.2+0x2d8>
    8001e216:	00005517          	auipc	a0,0x5
    8001e21a:	96a50513          	addi	a0,a0,-1686 # 80022b80 <__func__.2+0x318>
    8001e21e:	253020ef          	jal	80020c70 <printf>
    8001e222:	00027797          	auipc	a5,0x27
    8001e226:	def7c783          	lbu	a5,-529(a5) # 80045011 <excpt+0x1>
    8001e22a:	e7a1                	bnez	a5,8001e272 <instret_test_7+0xe4>
    8001e22c:	4529                	li	a0,10
    8001e22e:	0d2020ef          	jal	80020300 <putchar>
    8001e232:	00027797          	auipc	a5,0x27
    8001e236:	ddf7c783          	lbu	a5,-545(a5) # 80045011 <excpt+0x1>
    8001e23a:	e795                	bnez	a5,8001e266 <instret_test_7+0xd8>
    8001e23c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e23e:	00005597          	auipc	a1,0x5
    8001e242:	8f258593          	addi	a1,a1,-1806 # 80022b30 <__func__.2+0x2c8>
    8001e246:	00005517          	auipc	a0,0x5
    8001e24a:	9a250513          	addi	a0,a0,-1630 # 80022be8 <__func__.2+0x380>
    8001e24e:	223020ef          	jal	80020c70 <printf>
    8001e252:	4511                	li	a0,4
    8001e254:	885e20ef          	jal	80000ad8 <goto_priv>
    8001e258:	950e30ef          	jal	800013a8 <reset_state>
}
    8001e25c:	60a2                	ld	ra,8(sp)
    8001e25e:	8522                	mv	a0,s0
    8001e260:	6402                	ld	s0,0(sp)
    8001e262:	0141                	addi	sp,sp,16
    8001e264:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001e266:	4401                	li	s0,0
    TEST_END(); 
    8001e268:	00005597          	auipc	a1,0x5
    8001e26c:	8d858593          	addi	a1,a1,-1832 # 80022b40 <__func__.2+0x2d8>
    8001e270:	bfd9                	j	8001e246 <instret_test_7+0xb8>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001e272:	00005517          	auipc	a0,0x5
    8001e276:	91650513          	addi	a0,a0,-1770 # 80022b88 <__func__.2+0x320>
    8001e27a:	1f7020ef          	jal	80020c70 <printf>
    8001e27e:	02900513          	li	a0,41
    8001e282:	07e020ef          	jal	80020300 <putchar>
    8001e286:	b75d                	j	8001e22c <instret_test_7+0x9e>

000000008001e288 <instret_test_8>:

bool instret_test_8() {
    8001e288:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e28a:	00004597          	auipc	a1,0x4
    8001e28e:	4ce58593          	addi	a1,a1,1230 # 80022758 <__func__.16>
    8001e292:	00005517          	auipc	a0,0x5
    8001e296:	8be50513          	addi	a0,a0,-1858 # 80022b50 <__func__.2+0x2e8>
bool instret_test_8() {
    8001e29a:	ec06                	sd	ra,24(sp)
    8001e29c:	e822                	sd	s0,16(sp)
    8001e29e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e2a0:	1d1020ef          	jal	80020c70 <printf>
    8001e2a4:	4529                	li	a0,10
    8001e2a6:	05a020ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001e2aa:	4511                	li	a0,4
    8001e2ac:	82de20ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001e2b0:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001e2b4:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001e2b8:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001e2bc:	4501                	li	a0,0
    8001e2be:	81be20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e2c2:	0330000f          	fence	rw,rw
    8001e2c6:	00027417          	auipc	s0,0x27
    8001e2ca:	d4a40413          	addi	s0,s0,-694 # 80045010 <excpt>
    8001e2ce:	4785                	li	a5,1
    8001e2d0:	00027717          	auipc	a4,0x27
    8001e2d4:	d6073c23          	sd	zero,-648(a4) # 80045048 <excpt+0x38>
    8001e2d8:	00f41023          	sh	a5,0(s0)
    8001e2dc:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001e2e0:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001e2e4:	08200593          	li	a1,130
    8001e2e8:	0000c617          	auipc	a2,0xc
    8001e2ec:	ae060613          	addi	a2,a2,-1312 # 80029dc8 <__func__.2+0x7560>
    8001e2f0:	00005517          	auipc	a0,0x5
    8001e2f4:	87850513          	addi	a0,a0,-1928 # 80022b68 <__func__.2+0x300>
    8001e2f8:	179020ef          	jal	80020c70 <printf>
    8001e2fc:	00027797          	auipc	a5,0x27
    8001e300:	d157c783          	lbu	a5,-747(a5) # 80045011 <excpt+0x1>
    8001e304:	00005597          	auipc	a1,0x5
    8001e308:	83c58593          	addi	a1,a1,-1988 # 80022b40 <__func__.2+0x2d8>
    8001e30c:	cf89                	beqz	a5,8001e326 <instret_test_8+0x9e>
    8001e30e:	6418                	ld	a4,8(s0)
    8001e310:	47d9                	li	a5,22
    8001e312:	00005597          	auipc	a1,0x5
    8001e316:	81e58593          	addi	a1,a1,-2018 # 80022b30 <__func__.2+0x2c8>
    8001e31a:	00f70663          	beq	a4,a5,8001e326 <instret_test_8+0x9e>
    8001e31e:	00005597          	auipc	a1,0x5
    8001e322:	82258593          	addi	a1,a1,-2014 # 80022b40 <__func__.2+0x2d8>
    8001e326:	00005517          	auipc	a0,0x5
    8001e32a:	85a50513          	addi	a0,a0,-1958 # 80022b80 <__func__.2+0x318>
    8001e32e:	143020ef          	jal	80020c70 <printf>
    8001e332:	00027797          	auipc	a5,0x27
    8001e336:	cdf7c783          	lbu	a5,-801(a5) # 80045011 <excpt+0x1>
    8001e33a:	c789                	beqz	a5,8001e344 <instret_test_8+0xbc>
    8001e33c:	6418                	ld	a4,8(s0)
    8001e33e:	47d9                	li	a5,22
    8001e340:	00f70c63          	beq	a4,a5,8001e358 <instret_test_8+0xd0>
    8001e344:	00005517          	auipc	a0,0x5
    8001e348:	84450513          	addi	a0,a0,-1980 # 80022b88 <__func__.2+0x320>
    8001e34c:	125020ef          	jal	80020c70 <printf>
    8001e350:	02900513          	li	a0,41
    8001e354:	7ad010ef          	jal	80020300 <putchar>
    8001e358:	4529                	li	a0,10
    8001e35a:	7a7010ef          	jal	80020300 <putchar>
    8001e35e:	00027497          	auipc	s1,0x27
    8001e362:	cb34c483          	lbu	s1,-845(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e366:	00004597          	auipc	a1,0x4
    8001e36a:	7da58593          	addi	a1,a1,2010 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001e36e:	cc91                	beqz	s1,8001e38a <instret_test_8+0x102>
    8001e370:	6418                	ld	a4,8(s0)
    8001e372:	47d9                	li	a5,22
    TEST_END(); 
    8001e374:	00004597          	auipc	a1,0x4
    8001e378:	7bc58593          	addi	a1,a1,1980 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001e37c:	00f70763          	beq	a4,a5,8001e38a <instret_test_8+0x102>
    8001e380:	4481                	li	s1,0
    TEST_END(); 
    8001e382:	00004597          	auipc	a1,0x4
    8001e386:	7be58593          	addi	a1,a1,1982 # 80022b40 <__func__.2+0x2d8>
    8001e38a:	00005517          	auipc	a0,0x5
    8001e38e:	85e50513          	addi	a0,a0,-1954 # 80022be8 <__func__.2+0x380>
    8001e392:	0df020ef          	jal	80020c70 <printf>
    8001e396:	4511                	li	a0,4
    8001e398:	f40e20ef          	jal	80000ad8 <goto_priv>
    8001e39c:	80ce30ef          	jal	800013a8 <reset_state>
}
    8001e3a0:	60e2                	ld	ra,24(sp)
    8001e3a2:	6442                	ld	s0,16(sp)
    8001e3a4:	8526                	mv	a0,s1
    8001e3a6:	64a2                	ld	s1,8(sp)
    8001e3a8:	6105                	addi	sp,sp,32
    8001e3aa:	8082                	ret

000000008001e3ac <instret_test_9>:

bool instret_test_9() {
    8001e3ac:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e3ae:	00004597          	auipc	a1,0x4
    8001e3b2:	3ba58593          	addi	a1,a1,954 # 80022768 <__func__.15>
    8001e3b6:	00004517          	auipc	a0,0x4
    8001e3ba:	79a50513          	addi	a0,a0,1946 # 80022b50 <__func__.2+0x2e8>
bool instret_test_9() {
    8001e3be:	ec06                	sd	ra,24(sp)
    8001e3c0:	e822                	sd	s0,16(sp)
    8001e3c2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e3c4:	0ad020ef          	jal	80020c70 <printf>
    8001e3c8:	4529                	li	a0,10
    8001e3ca:	737010ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001e3ce:	4511                	li	a0,4
    8001e3d0:	f08e20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001e3d4:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001e3d8:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_VU);
    8001e3dc:	4501                	li	a0,0
    8001e3de:	efae20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e3e2:	0330000f          	fence	rw,rw
    8001e3e6:	00027417          	auipc	s0,0x27
    8001e3ea:	c2a40413          	addi	s0,s0,-982 # 80045010 <excpt>
    8001e3ee:	4785                	li	a5,1
    8001e3f0:	00027717          	auipc	a4,0x27
    8001e3f4:	c4073c23          	sd	zero,-936(a4) # 80045048 <excpt+0x38>
    8001e3f8:	00f41023          	sh	a5,0(s0)
    8001e3fc:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001e400:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001e404:	08200593          	li	a1,130
    8001e408:	0000c617          	auipc	a2,0xc
    8001e40c:	a3060613          	addi	a2,a2,-1488 # 80029e38 <__func__.2+0x75d0>
    8001e410:	00004517          	auipc	a0,0x4
    8001e414:	75850513          	addi	a0,a0,1880 # 80022b68 <__func__.2+0x300>
    8001e418:	059020ef          	jal	80020c70 <printf>
    8001e41c:	00027797          	auipc	a5,0x27
    8001e420:	bf57c783          	lbu	a5,-1035(a5) # 80045011 <excpt+0x1>
    8001e424:	00004597          	auipc	a1,0x4
    8001e428:	71c58593          	addi	a1,a1,1820 # 80022b40 <__func__.2+0x2d8>
    8001e42c:	cf89                	beqz	a5,8001e446 <instret_test_9+0x9a>
    8001e42e:	6418                	ld	a4,8(s0)
    8001e430:	4789                	li	a5,2
    8001e432:	00004597          	auipc	a1,0x4
    8001e436:	6fe58593          	addi	a1,a1,1790 # 80022b30 <__func__.2+0x2c8>
    8001e43a:	00f70663          	beq	a4,a5,8001e446 <instret_test_9+0x9a>
    8001e43e:	00004597          	auipc	a1,0x4
    8001e442:	70258593          	addi	a1,a1,1794 # 80022b40 <__func__.2+0x2d8>
    8001e446:	00004517          	auipc	a0,0x4
    8001e44a:	73a50513          	addi	a0,a0,1850 # 80022b80 <__func__.2+0x318>
    8001e44e:	023020ef          	jal	80020c70 <printf>
    8001e452:	00027797          	auipc	a5,0x27
    8001e456:	bbf7c783          	lbu	a5,-1089(a5) # 80045011 <excpt+0x1>
    8001e45a:	c789                	beqz	a5,8001e464 <instret_test_9+0xb8>
    8001e45c:	6418                	ld	a4,8(s0)
    8001e45e:	4789                	li	a5,2
    8001e460:	00f70c63          	beq	a4,a5,8001e478 <instret_test_9+0xcc>
    8001e464:	00004517          	auipc	a0,0x4
    8001e468:	72450513          	addi	a0,a0,1828 # 80022b88 <__func__.2+0x320>
    8001e46c:	005020ef          	jal	80020c70 <printf>
    8001e470:	02900513          	li	a0,41
    8001e474:	68d010ef          	jal	80020300 <putchar>
    8001e478:	4529                	li	a0,10
    8001e47a:	687010ef          	jal	80020300 <putchar>
    8001e47e:	00027497          	auipc	s1,0x27
    8001e482:	b934c483          	lbu	s1,-1133(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e486:	00004597          	auipc	a1,0x4
    8001e48a:	6ba58593          	addi	a1,a1,1722 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001e48e:	cc91                	beqz	s1,8001e4aa <instret_test_9+0xfe>
    8001e490:	6418                	ld	a4,8(s0)
    8001e492:	4789                	li	a5,2
    TEST_END(); 
    8001e494:	00004597          	auipc	a1,0x4
    8001e498:	69c58593          	addi	a1,a1,1692 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001e49c:	00f70763          	beq	a4,a5,8001e4aa <instret_test_9+0xfe>
    8001e4a0:	4481                	li	s1,0
    TEST_END(); 
    8001e4a2:	00004597          	auipc	a1,0x4
    8001e4a6:	69e58593          	addi	a1,a1,1694 # 80022b40 <__func__.2+0x2d8>
    8001e4aa:	00004517          	auipc	a0,0x4
    8001e4ae:	73e50513          	addi	a0,a0,1854 # 80022be8 <__func__.2+0x380>
    8001e4b2:	7be020ef          	jal	80020c70 <printf>
    8001e4b6:	4511                	li	a0,4
    8001e4b8:	e20e20ef          	jal	80000ad8 <goto_priv>
    8001e4bc:	eede20ef          	jal	800013a8 <reset_state>
}
    8001e4c0:	60e2                	ld	ra,24(sp)
    8001e4c2:	6442                	ld	s0,16(sp)
    8001e4c4:	8526                	mv	a0,s1
    8001e4c6:	64a2                	ld	s1,8(sp)
    8001e4c8:	6105                	addi	sp,sp,32
    8001e4ca:	8082                	ret

000000008001e4cc <instret_test_10>:

bool instret_test_10() {
    8001e4cc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e4ce:	00004597          	auipc	a1,0x4
    8001e4d2:	2aa58593          	addi	a1,a1,682 # 80022778 <__func__.14>
    8001e4d6:	00004517          	auipc	a0,0x4
    8001e4da:	67a50513          	addi	a0,a0,1658 # 80022b50 <__func__.2+0x2e8>
bool instret_test_10() {
    8001e4de:	e406                	sd	ra,8(sp)
    8001e4e0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e4e2:	78e020ef          	jal	80020c70 <printf>
    8001e4e6:	4529                	li	a0,10
    8001e4e8:	619010ef          	jal	80020300 <putchar>
    goto_priv(PRIV_M);
    8001e4ec:	4511                	li	a0,4
    8001e4ee:	deae20ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001e4f2:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001e4f6:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001e4fa:	4509                	li	a0,2
    8001e4fc:	ddce20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e500:	0330000f          	fence	rw,rw
    8001e504:	4785                	li	a5,1
    8001e506:	00027717          	auipc	a4,0x27
    8001e50a:	b4073123          	sd	zero,-1214(a4) # 80045048 <excpt+0x38>
    8001e50e:	00027717          	auipc	a4,0x27
    8001e512:	b0f71123          	sh	a5,-1278(a4) # 80045010 <excpt>
    8001e516:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8001e51a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8001e51e:	08200593          	li	a1,130
    8001e522:	0000c617          	auipc	a2,0xc
    8001e526:	97660613          	addi	a2,a2,-1674 # 80029e98 <__func__.2+0x7630>
    8001e52a:	00004517          	auipc	a0,0x4
    8001e52e:	63e50513          	addi	a0,a0,1598 # 80022b68 <__func__.2+0x300>
    8001e532:	73e020ef          	jal	80020c70 <printf>
    8001e536:	00027797          	auipc	a5,0x27
    8001e53a:	adb7c783          	lbu	a5,-1317(a5) # 80045011 <excpt+0x1>
    8001e53e:	00004597          	auipc	a1,0x4
    8001e542:	5f258593          	addi	a1,a1,1522 # 80022b30 <__func__.2+0x2c8>
    8001e546:	c789                	beqz	a5,8001e550 <instret_test_10+0x84>
    8001e548:	00004597          	auipc	a1,0x4
    8001e54c:	5f858593          	addi	a1,a1,1528 # 80022b40 <__func__.2+0x2d8>
    8001e550:	00004517          	auipc	a0,0x4
    8001e554:	63050513          	addi	a0,a0,1584 # 80022b80 <__func__.2+0x318>
    8001e558:	718020ef          	jal	80020c70 <printf>
    8001e55c:	00027797          	auipc	a5,0x27
    8001e560:	ab57c783          	lbu	a5,-1355(a5) # 80045011 <excpt+0x1>
    8001e564:	e7a1                	bnez	a5,8001e5ac <instret_test_10+0xe0>
    8001e566:	4529                	li	a0,10
    8001e568:	599010ef          	jal	80020300 <putchar>
    8001e56c:	00027797          	auipc	a5,0x27
    8001e570:	aa57c783          	lbu	a5,-1371(a5) # 80045011 <excpt+0x1>
    8001e574:	e795                	bnez	a5,8001e5a0 <instret_test_10+0xd4>
    8001e576:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e578:	00004597          	auipc	a1,0x4
    8001e57c:	5b858593          	addi	a1,a1,1464 # 80022b30 <__func__.2+0x2c8>
    8001e580:	00004517          	auipc	a0,0x4
    8001e584:	66850513          	addi	a0,a0,1640 # 80022be8 <__func__.2+0x380>
    8001e588:	6e8020ef          	jal	80020c70 <printf>
    8001e58c:	4511                	li	a0,4
    8001e58e:	d4ae20ef          	jal	80000ad8 <goto_priv>
    8001e592:	e17e20ef          	jal	800013a8 <reset_state>
}
    8001e596:	60a2                	ld	ra,8(sp)
    8001e598:	8522                	mv	a0,s0
    8001e59a:	6402                	ld	s0,0(sp)
    8001e59c:	0141                	addi	sp,sp,16
    8001e59e:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8001e5a0:	4401                	li	s0,0
    TEST_END(); 
    8001e5a2:	00004597          	auipc	a1,0x4
    8001e5a6:	59e58593          	addi	a1,a1,1438 # 80022b40 <__func__.2+0x2d8>
    8001e5aa:	bfd9                	j	8001e580 <instret_test_10+0xb4>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8001e5ac:	00004517          	auipc	a0,0x4
    8001e5b0:	5dc50513          	addi	a0,a0,1500 # 80022b88 <__func__.2+0x320>
    8001e5b4:	6bc020ef          	jal	80020c70 <printf>
    8001e5b8:	02900513          	li	a0,41
    8001e5bc:	545010ef          	jal	80020300 <putchar>
    8001e5c0:	b75d                	j	8001e566 <instret_test_10+0x9a>

000000008001e5c2 <timecmp_test_1>:


bool timecmp_test_1() {
    8001e5c2:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e5c4:	00004597          	auipc	a1,0x4
    8001e5c8:	1c458593          	addi	a1,a1,452 # 80022788 <__func__.13>
    8001e5cc:	00004517          	auipc	a0,0x4
    8001e5d0:	58450513          	addi	a0,a0,1412 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_1() {
    8001e5d4:	ec06                	sd	ra,24(sp)
    8001e5d6:	e822                	sd	s0,16(sp)
    8001e5d8:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e5da:	696020ef          	jal	80020c70 <printf>
    8001e5de:	4529                	li	a0,10
    8001e5e0:	521010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001e5e4:	57fd                	li	a5,-1
    8001e5e6:	17fe                	slli	a5,a5,0x3f
    8001e5e8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e5ec:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8001e5f0:	450d                	li	a0,3
    8001e5f2:	ce6e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e5f6:	0330000f          	fence	rw,rw
    8001e5fa:	00027417          	auipc	s0,0x27
    8001e5fe:	a1640413          	addi	s0,s0,-1514 # 80045010 <excpt>
    8001e602:	4785                	li	a5,1
    8001e604:	00027717          	auipc	a4,0x27
    8001e608:	a4073223          	sd	zero,-1468(a4) # 80045048 <excpt+0x38>
    8001e60c:	00f41023          	sh	a5,0(s0)
    8001e610:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001e614:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8001e618:	08200593          	li	a1,130
    8001e61c:	0000c617          	auipc	a2,0xc
    8001e620:	8cc60613          	addi	a2,a2,-1844 # 80029ee8 <__func__.2+0x7680>
    8001e624:	00004517          	auipc	a0,0x4
    8001e628:	54450513          	addi	a0,a0,1348 # 80022b68 <__func__.2+0x300>
    8001e62c:	644020ef          	jal	80020c70 <printf>
    8001e630:	00027797          	auipc	a5,0x27
    8001e634:	9e17c783          	lbu	a5,-1567(a5) # 80045011 <excpt+0x1>
    8001e638:	00004597          	auipc	a1,0x4
    8001e63c:	50858593          	addi	a1,a1,1288 # 80022b40 <__func__.2+0x2d8>
    8001e640:	cf89                	beqz	a5,8001e65a <timecmp_test_1+0x98>
    8001e642:	6418                	ld	a4,8(s0)
    8001e644:	4789                	li	a5,2
    8001e646:	00004597          	auipc	a1,0x4
    8001e64a:	4ea58593          	addi	a1,a1,1258 # 80022b30 <__func__.2+0x2c8>
    8001e64e:	00f70663          	beq	a4,a5,8001e65a <timecmp_test_1+0x98>
    8001e652:	00004597          	auipc	a1,0x4
    8001e656:	4ee58593          	addi	a1,a1,1262 # 80022b40 <__func__.2+0x2d8>
    8001e65a:	00004517          	auipc	a0,0x4
    8001e65e:	52650513          	addi	a0,a0,1318 # 80022b80 <__func__.2+0x318>
    8001e662:	60e020ef          	jal	80020c70 <printf>
    8001e666:	00027797          	auipc	a5,0x27
    8001e66a:	9ab7c783          	lbu	a5,-1621(a5) # 80045011 <excpt+0x1>
    8001e66e:	c789                	beqz	a5,8001e678 <timecmp_test_1+0xb6>
    8001e670:	6418                	ld	a4,8(s0)
    8001e672:	4789                	li	a5,2
    8001e674:	00f70c63          	beq	a4,a5,8001e68c <timecmp_test_1+0xca>
    8001e678:	00004517          	auipc	a0,0x4
    8001e67c:	51050513          	addi	a0,a0,1296 # 80022b88 <__func__.2+0x320>
    8001e680:	5f0020ef          	jal	80020c70 <printf>
    8001e684:	02900513          	li	a0,41
    8001e688:	479010ef          	jal	80020300 <putchar>
    8001e68c:	4529                	li	a0,10
    8001e68e:	473010ef          	jal	80020300 <putchar>
    8001e692:	00027497          	auipc	s1,0x27
    8001e696:	97f4c483          	lbu	s1,-1665(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e69a:	00004597          	auipc	a1,0x4
    8001e69e:	4a658593          	addi	a1,a1,1190 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8001e6a2:	cc91                	beqz	s1,8001e6be <timecmp_test_1+0xfc>
    8001e6a4:	6418                	ld	a4,8(s0)
    8001e6a6:	4789                	li	a5,2
    TEST_END(); 
    8001e6a8:	00004597          	auipc	a1,0x4
    8001e6ac:	48858593          	addi	a1,a1,1160 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8001e6b0:	00f70763          	beq	a4,a5,8001e6be <timecmp_test_1+0xfc>
    8001e6b4:	4481                	li	s1,0
    TEST_END(); 
    8001e6b6:	00004597          	auipc	a1,0x4
    8001e6ba:	48a58593          	addi	a1,a1,1162 # 80022b40 <__func__.2+0x2d8>
    8001e6be:	00004517          	auipc	a0,0x4
    8001e6c2:	52a50513          	addi	a0,a0,1322 # 80022be8 <__func__.2+0x380>
    8001e6c6:	5aa020ef          	jal	80020c70 <printf>
    8001e6ca:	4511                	li	a0,4
    8001e6cc:	c0ce20ef          	jal	80000ad8 <goto_priv>
    8001e6d0:	cd9e20ef          	jal	800013a8 <reset_state>
}
    8001e6d4:	60e2                	ld	ra,24(sp)
    8001e6d6:	6442                	ld	s0,16(sp)
    8001e6d8:	8526                	mv	a0,s1
    8001e6da:	64a2                	ld	s1,8(sp)
    8001e6dc:	6105                	addi	sp,sp,32
    8001e6de:	8082                	ret

000000008001e6e0 <timecmp_test_2>:

bool timecmp_test_2() {
    8001e6e0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e6e2:	00004597          	auipc	a1,0x4
    8001e6e6:	0b658593          	addi	a1,a1,182 # 80022798 <__func__.12>
    8001e6ea:	00004517          	auipc	a0,0x4
    8001e6ee:	46650513          	addi	a0,a0,1126 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_2() {
    8001e6f2:	ec06                	sd	ra,24(sp)
    8001e6f4:	e822                	sd	s0,16(sp)
    8001e6f6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e6f8:	578020ef          	jal	80020c70 <printf>
    8001e6fc:	4529                	li	a0,10
    8001e6fe:	403010ef          	jal	80020300 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001e702:	57fd                	li	a5,-1
    8001e704:	17fe                	slli	a5,a5,0x3f
    8001e706:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    8001e70a:	450d                	li	a0,3
    8001e70c:	bcce20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e710:	0330000f          	fence	rw,rw
    8001e714:	00027417          	auipc	s0,0x27
    8001e718:	8fc40413          	addi	s0,s0,-1796 # 80045010 <excpt>
    8001e71c:	4785                	li	a5,1
    8001e71e:	00027717          	auipc	a4,0x27
    8001e722:	92073523          	sd	zero,-1750(a4) # 80045048 <excpt+0x38>
    8001e726:	00f41023          	sh	a5,0(s0)
    8001e72a:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001e72e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e732:	08200593          	li	a1,130
    8001e736:	0000c617          	auipc	a2,0xc
    8001e73a:	81a60613          	addi	a2,a2,-2022 # 80029f50 <__func__.2+0x76e8>
    8001e73e:	00004517          	auipc	a0,0x4
    8001e742:	42a50513          	addi	a0,a0,1066 # 80022b68 <__func__.2+0x300>
    8001e746:	52a020ef          	jal	80020c70 <printf>
    8001e74a:	00027797          	auipc	a5,0x27
    8001e74e:	8c77c783          	lbu	a5,-1849(a5) # 80045011 <excpt+0x1>
    8001e752:	00004597          	auipc	a1,0x4
    8001e756:	3ee58593          	addi	a1,a1,1006 # 80022b40 <__func__.2+0x2d8>
    8001e75a:	cf89                	beqz	a5,8001e774 <timecmp_test_2+0x94>
    8001e75c:	6418                	ld	a4,8(s0)
    8001e75e:	4789                	li	a5,2
    8001e760:	00004597          	auipc	a1,0x4
    8001e764:	3d058593          	addi	a1,a1,976 # 80022b30 <__func__.2+0x2c8>
    8001e768:	00f70663          	beq	a4,a5,8001e774 <timecmp_test_2+0x94>
    8001e76c:	00004597          	auipc	a1,0x4
    8001e770:	3d458593          	addi	a1,a1,980 # 80022b40 <__func__.2+0x2d8>
    8001e774:	00004517          	auipc	a0,0x4
    8001e778:	40c50513          	addi	a0,a0,1036 # 80022b80 <__func__.2+0x318>
    8001e77c:	4f4020ef          	jal	80020c70 <printf>
    8001e780:	00027797          	auipc	a5,0x27
    8001e784:	8917c783          	lbu	a5,-1903(a5) # 80045011 <excpt+0x1>
    8001e788:	c789                	beqz	a5,8001e792 <timecmp_test_2+0xb2>
    8001e78a:	6418                	ld	a4,8(s0)
    8001e78c:	4789                	li	a5,2
    8001e78e:	00f70c63          	beq	a4,a5,8001e7a6 <timecmp_test_2+0xc6>
    8001e792:	00004517          	auipc	a0,0x4
    8001e796:	3f650513          	addi	a0,a0,1014 # 80022b88 <__func__.2+0x320>
    8001e79a:	4d6020ef          	jal	80020c70 <printf>
    8001e79e:	02900513          	li	a0,41
    8001e7a2:	35f010ef          	jal	80020300 <putchar>
    8001e7a6:	4529                	li	a0,10
    8001e7a8:	359010ef          	jal	80020300 <putchar>
    8001e7ac:	00027497          	auipc	s1,0x27
    8001e7b0:	8654c483          	lbu	s1,-1947(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e7b4:	00004597          	auipc	a1,0x4
    8001e7b8:	38c58593          	addi	a1,a1,908 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e7bc:	cc91                	beqz	s1,8001e7d8 <timecmp_test_2+0xf8>
    8001e7be:	6418                	ld	a4,8(s0)
    8001e7c0:	4789                	li	a5,2
    TEST_END(); 
    8001e7c2:	00004597          	auipc	a1,0x4
    8001e7c6:	36e58593          	addi	a1,a1,878 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e7ca:	00f70763          	beq	a4,a5,8001e7d8 <timecmp_test_2+0xf8>
    8001e7ce:	4481                	li	s1,0
    TEST_END(); 
    8001e7d0:	00004597          	auipc	a1,0x4
    8001e7d4:	37058593          	addi	a1,a1,880 # 80022b40 <__func__.2+0x2d8>
    8001e7d8:	00004517          	auipc	a0,0x4
    8001e7dc:	41050513          	addi	a0,a0,1040 # 80022be8 <__func__.2+0x380>
    8001e7e0:	490020ef          	jal	80020c70 <printf>
    8001e7e4:	4511                	li	a0,4
    8001e7e6:	af2e20ef          	jal	80000ad8 <goto_priv>
    8001e7ea:	bbfe20ef          	jal	800013a8 <reset_state>
}
    8001e7ee:	60e2                	ld	ra,24(sp)
    8001e7f0:	6442                	ld	s0,16(sp)
    8001e7f2:	8526                	mv	a0,s1
    8001e7f4:	64a2                	ld	s1,8(sp)
    8001e7f6:	6105                	addi	sp,sp,32
    8001e7f8:	8082                	ret

000000008001e7fa <timecmp_test_3>:

bool timecmp_test_3() {
    8001e7fa:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e7fc:	00004597          	auipc	a1,0x4
    8001e800:	fac58593          	addi	a1,a1,-84 # 800227a8 <__func__.11>
    8001e804:	00004517          	auipc	a0,0x4
    8001e808:	34c50513          	addi	a0,a0,844 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_3() {
    8001e80c:	ec06                	sd	ra,24(sp)
    8001e80e:	e822                	sd	s0,16(sp)
    8001e810:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e812:	45e020ef          	jal	80020c70 <printf>
    8001e816:	4529                	li	a0,10
    8001e818:	2e9010ef          	jal	80020300 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001e81c:	57fd                	li	a5,-1
    8001e81e:	17fe                	slli	a5,a5,0x3f
    8001e820:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS);
    8001e824:	4509                	li	a0,2
    8001e826:	ab2e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e82a:	0330000f          	fence	rw,rw
    8001e82e:	00026417          	auipc	s0,0x26
    8001e832:	7e240413          	addi	s0,s0,2018 # 80045010 <excpt>
    8001e836:	4785                	li	a5,1
    8001e838:	00027717          	auipc	a4,0x27
    8001e83c:	80073823          	sd	zero,-2032(a4) # 80045048 <excpt+0x38>
    8001e840:	00f41023          	sh	a5,0(s0)
    8001e844:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001e848:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e84c:	08200593          	li	a1,130
    8001e850:	0000b617          	auipc	a2,0xb
    8001e854:	75860613          	addi	a2,a2,1880 # 80029fa8 <__func__.2+0x7740>
    8001e858:	00004517          	auipc	a0,0x4
    8001e85c:	31050513          	addi	a0,a0,784 # 80022b68 <__func__.2+0x300>
    8001e860:	410020ef          	jal	80020c70 <printf>
    8001e864:	00026797          	auipc	a5,0x26
    8001e868:	7ad7c783          	lbu	a5,1965(a5) # 80045011 <excpt+0x1>
    8001e86c:	00004597          	auipc	a1,0x4
    8001e870:	2d458593          	addi	a1,a1,724 # 80022b40 <__func__.2+0x2d8>
    8001e874:	cf89                	beqz	a5,8001e88e <timecmp_test_3+0x94>
    8001e876:	6418                	ld	a4,8(s0)
    8001e878:	4789                	li	a5,2
    8001e87a:	00004597          	auipc	a1,0x4
    8001e87e:	2b658593          	addi	a1,a1,694 # 80022b30 <__func__.2+0x2c8>
    8001e882:	00f70663          	beq	a4,a5,8001e88e <timecmp_test_3+0x94>
    8001e886:	00004597          	auipc	a1,0x4
    8001e88a:	2ba58593          	addi	a1,a1,698 # 80022b40 <__func__.2+0x2d8>
    8001e88e:	00004517          	auipc	a0,0x4
    8001e892:	2f250513          	addi	a0,a0,754 # 80022b80 <__func__.2+0x318>
    8001e896:	3da020ef          	jal	80020c70 <printf>
    8001e89a:	00026797          	auipc	a5,0x26
    8001e89e:	7777c783          	lbu	a5,1911(a5) # 80045011 <excpt+0x1>
    8001e8a2:	c789                	beqz	a5,8001e8ac <timecmp_test_3+0xb2>
    8001e8a4:	6418                	ld	a4,8(s0)
    8001e8a6:	4789                	li	a5,2
    8001e8a8:	00f70c63          	beq	a4,a5,8001e8c0 <timecmp_test_3+0xc6>
    8001e8ac:	00004517          	auipc	a0,0x4
    8001e8b0:	2dc50513          	addi	a0,a0,732 # 80022b88 <__func__.2+0x320>
    8001e8b4:	3bc020ef          	jal	80020c70 <printf>
    8001e8b8:	02900513          	li	a0,41
    8001e8bc:	245010ef          	jal	80020300 <putchar>
    8001e8c0:	4529                	li	a0,10
    8001e8c2:	23f010ef          	jal	80020300 <putchar>
    8001e8c6:	00026497          	auipc	s1,0x26
    8001e8ca:	74b4c483          	lbu	s1,1867(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e8ce:	00004597          	auipc	a1,0x4
    8001e8d2:	27258593          	addi	a1,a1,626 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e8d6:	cc91                	beqz	s1,8001e8f2 <timecmp_test_3+0xf8>
    8001e8d8:	6418                	ld	a4,8(s0)
    8001e8da:	4789                	li	a5,2
    TEST_END(); 
    8001e8dc:	00004597          	auipc	a1,0x4
    8001e8e0:	25458593          	addi	a1,a1,596 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e8e4:	00f70763          	beq	a4,a5,8001e8f2 <timecmp_test_3+0xf8>
    8001e8e8:	4481                	li	s1,0
    TEST_END(); 
    8001e8ea:	00004597          	auipc	a1,0x4
    8001e8ee:	25658593          	addi	a1,a1,598 # 80022b40 <__func__.2+0x2d8>
    8001e8f2:	00004517          	auipc	a0,0x4
    8001e8f6:	2f650513          	addi	a0,a0,758 # 80022be8 <__func__.2+0x380>
    8001e8fa:	376020ef          	jal	80020c70 <printf>
    8001e8fe:	4511                	li	a0,4
    8001e900:	9d8e20ef          	jal	80000ad8 <goto_priv>
    8001e904:	aa5e20ef          	jal	800013a8 <reset_state>
}
    8001e908:	60e2                	ld	ra,24(sp)
    8001e90a:	6442                	ld	s0,16(sp)
    8001e90c:	8526                	mv	a0,s1
    8001e90e:	64a2                	ld	s1,8(sp)
    8001e910:	6105                	addi	sp,sp,32
    8001e912:	8082                	ret

000000008001e914 <timecmp_test_4>:

bool timecmp_test_4() {
    8001e914:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e916:	00004597          	auipc	a1,0x4
    8001e91a:	ea258593          	addi	a1,a1,-350 # 800227b8 <__func__.10>
    8001e91e:	00004517          	auipc	a0,0x4
    8001e922:	23250513          	addi	a0,a0,562 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_4() {
    8001e926:	ec06                	sd	ra,24(sp)
    8001e928:	e822                	sd	s0,16(sp)
    8001e92a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e92c:	344020ef          	jal	80020c70 <printf>
    8001e930:	4529                	li	a0,10
    8001e932:	1cf010ef          	jal	80020300 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001e936:	57fd                	li	a5,-1
    8001e938:	17fe                	slli	a5,a5,0x3f
    8001e93a:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    8001e93e:	4505                	li	a0,1
    8001e940:	998e20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e944:	0330000f          	fence	rw,rw
    8001e948:	00026417          	auipc	s0,0x26
    8001e94c:	6c840413          	addi	s0,s0,1736 # 80045010 <excpt>
    8001e950:	4785                	li	a5,1
    8001e952:	00026717          	auipc	a4,0x26
    8001e956:	6e073b23          	sd	zero,1782(a4) # 80045048 <excpt+0x38>
    8001e95a:	00f41023          	sh	a5,0(s0)
    8001e95e:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001e962:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e966:	08200593          	li	a1,130
    8001e96a:	0000b617          	auipc	a2,0xb
    8001e96e:	69660613          	addi	a2,a2,1686 # 8002a000 <__func__.2+0x7798>
    8001e972:	00004517          	auipc	a0,0x4
    8001e976:	1f650513          	addi	a0,a0,502 # 80022b68 <__func__.2+0x300>
    8001e97a:	2f6020ef          	jal	80020c70 <printf>
    8001e97e:	00026797          	auipc	a5,0x26
    8001e982:	6937c783          	lbu	a5,1683(a5) # 80045011 <excpt+0x1>
    8001e986:	00004597          	auipc	a1,0x4
    8001e98a:	1ba58593          	addi	a1,a1,442 # 80022b40 <__func__.2+0x2d8>
    8001e98e:	cf89                	beqz	a5,8001e9a8 <timecmp_test_4+0x94>
    8001e990:	6418                	ld	a4,8(s0)
    8001e992:	4789                	li	a5,2
    8001e994:	00004597          	auipc	a1,0x4
    8001e998:	19c58593          	addi	a1,a1,412 # 80022b30 <__func__.2+0x2c8>
    8001e99c:	00f70663          	beq	a4,a5,8001e9a8 <timecmp_test_4+0x94>
    8001e9a0:	00004597          	auipc	a1,0x4
    8001e9a4:	1a058593          	addi	a1,a1,416 # 80022b40 <__func__.2+0x2d8>
    8001e9a8:	00004517          	auipc	a0,0x4
    8001e9ac:	1d850513          	addi	a0,a0,472 # 80022b80 <__func__.2+0x318>
    8001e9b0:	2c0020ef          	jal	80020c70 <printf>
    8001e9b4:	00026797          	auipc	a5,0x26
    8001e9b8:	65d7c783          	lbu	a5,1629(a5) # 80045011 <excpt+0x1>
    8001e9bc:	c789                	beqz	a5,8001e9c6 <timecmp_test_4+0xb2>
    8001e9be:	6418                	ld	a4,8(s0)
    8001e9c0:	4789                	li	a5,2
    8001e9c2:	00f70c63          	beq	a4,a5,8001e9da <timecmp_test_4+0xc6>
    8001e9c6:	00004517          	auipc	a0,0x4
    8001e9ca:	1c250513          	addi	a0,a0,450 # 80022b88 <__func__.2+0x320>
    8001e9ce:	2a2020ef          	jal	80020c70 <printf>
    8001e9d2:	02900513          	li	a0,41
    8001e9d6:	12b010ef          	jal	80020300 <putchar>
    8001e9da:	4529                	li	a0,10
    8001e9dc:	125010ef          	jal	80020300 <putchar>
    8001e9e0:	00026497          	auipc	s1,0x26
    8001e9e4:	6314c483          	lbu	s1,1585(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e9e8:	00004597          	auipc	a1,0x4
    8001e9ec:	15858593          	addi	a1,a1,344 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e9f0:	cc91                	beqz	s1,8001ea0c <timecmp_test_4+0xf8>
    8001e9f2:	6418                	ld	a4,8(s0)
    8001e9f4:	4789                	li	a5,2
    TEST_END(); 
    8001e9f6:	00004597          	auipc	a1,0x4
    8001e9fa:	13a58593          	addi	a1,a1,314 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001e9fe:	00f70763          	beq	a4,a5,8001ea0c <timecmp_test_4+0xf8>
    8001ea02:	4481                	li	s1,0
    TEST_END(); 
    8001ea04:	00004597          	auipc	a1,0x4
    8001ea08:	13c58593          	addi	a1,a1,316 # 80022b40 <__func__.2+0x2d8>
    8001ea0c:	00004517          	auipc	a0,0x4
    8001ea10:	1dc50513          	addi	a0,a0,476 # 80022be8 <__func__.2+0x380>
    8001ea14:	25c020ef          	jal	80020c70 <printf>
    8001ea18:	4511                	li	a0,4
    8001ea1a:	8bee20ef          	jal	80000ad8 <goto_priv>
    8001ea1e:	98be20ef          	jal	800013a8 <reset_state>
}
    8001ea22:	60e2                	ld	ra,24(sp)
    8001ea24:	6442                	ld	s0,16(sp)
    8001ea26:	8526                	mv	a0,s1
    8001ea28:	64a2                	ld	s1,8(sp)
    8001ea2a:	6105                	addi	sp,sp,32
    8001ea2c:	8082                	ret

000000008001ea2e <timecmp_test_5>:

bool timecmp_test_5() {
    8001ea2e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ea30:	00004597          	auipc	a1,0x4
    8001ea34:	d9858593          	addi	a1,a1,-616 # 800227c8 <__func__.9>
    8001ea38:	00004517          	auipc	a0,0x4
    8001ea3c:	11850513          	addi	a0,a0,280 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_5() {
    8001ea40:	ec06                	sd	ra,24(sp)
    8001ea42:	e822                	sd	s0,16(sp)
    8001ea44:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ea46:	22a020ef          	jal	80020c70 <printf>
    8001ea4a:	4529                	li	a0,10
    8001ea4c:	0b5010ef          	jal	80020300 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001ea50:	57fd                	li	a5,-1
    8001ea52:	17fe                	slli	a5,a5,0x3f
    8001ea54:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    8001ea58:	4501                	li	a0,0
    8001ea5a:	87ee20ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ea5e:	0330000f          	fence	rw,rw
    8001ea62:	00026417          	auipc	s0,0x26
    8001ea66:	5ae40413          	addi	s0,s0,1454 # 80045010 <excpt>
    8001ea6a:	4785                	li	a5,1
    8001ea6c:	00026717          	auipc	a4,0x26
    8001ea70:	5c073e23          	sd	zero,1500(a4) # 80045048 <excpt+0x38>
    8001ea74:	00f41023          	sh	a5,0(s0)
    8001ea78:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001ea7c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001ea80:	08200593          	li	a1,130
    8001ea84:	0000b617          	auipc	a2,0xb
    8001ea88:	5d460613          	addi	a2,a2,1492 # 8002a058 <__func__.2+0x77f0>
    8001ea8c:	00004517          	auipc	a0,0x4
    8001ea90:	0dc50513          	addi	a0,a0,220 # 80022b68 <__func__.2+0x300>
    8001ea94:	1dc020ef          	jal	80020c70 <printf>
    8001ea98:	00026797          	auipc	a5,0x26
    8001ea9c:	5797c783          	lbu	a5,1401(a5) # 80045011 <excpt+0x1>
    8001eaa0:	00004597          	auipc	a1,0x4
    8001eaa4:	0a058593          	addi	a1,a1,160 # 80022b40 <__func__.2+0x2d8>
    8001eaa8:	cf89                	beqz	a5,8001eac2 <timecmp_test_5+0x94>
    8001eaaa:	6418                	ld	a4,8(s0)
    8001eaac:	4789                	li	a5,2
    8001eaae:	00004597          	auipc	a1,0x4
    8001eab2:	08258593          	addi	a1,a1,130 # 80022b30 <__func__.2+0x2c8>
    8001eab6:	00f70663          	beq	a4,a5,8001eac2 <timecmp_test_5+0x94>
    8001eaba:	00004597          	auipc	a1,0x4
    8001eabe:	08658593          	addi	a1,a1,134 # 80022b40 <__func__.2+0x2d8>
    8001eac2:	00004517          	auipc	a0,0x4
    8001eac6:	0be50513          	addi	a0,a0,190 # 80022b80 <__func__.2+0x318>
    8001eaca:	1a6020ef          	jal	80020c70 <printf>
    8001eace:	00026797          	auipc	a5,0x26
    8001ead2:	5437c783          	lbu	a5,1347(a5) # 80045011 <excpt+0x1>
    8001ead6:	c789                	beqz	a5,8001eae0 <timecmp_test_5+0xb2>
    8001ead8:	6418                	ld	a4,8(s0)
    8001eada:	4789                	li	a5,2
    8001eadc:	00f70c63          	beq	a4,a5,8001eaf4 <timecmp_test_5+0xc6>
    8001eae0:	00004517          	auipc	a0,0x4
    8001eae4:	0a850513          	addi	a0,a0,168 # 80022b88 <__func__.2+0x320>
    8001eae8:	188020ef          	jal	80020c70 <printf>
    8001eaec:	02900513          	li	a0,41
    8001eaf0:	011010ef          	jal	80020300 <putchar>
    8001eaf4:	4529                	li	a0,10
    8001eaf6:	00b010ef          	jal	80020300 <putchar>
    8001eafa:	00026497          	auipc	s1,0x26
    8001eafe:	5174c483          	lbu	s1,1303(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001eb02:	00004597          	auipc	a1,0x4
    8001eb06:	03e58593          	addi	a1,a1,62 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001eb0a:	cc91                	beqz	s1,8001eb26 <timecmp_test_5+0xf8>
    8001eb0c:	6418                	ld	a4,8(s0)
    8001eb0e:	4789                	li	a5,2
    TEST_END(); 
    8001eb10:	00004597          	auipc	a1,0x4
    8001eb14:	02058593          	addi	a1,a1,32 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8001eb18:	00f70763          	beq	a4,a5,8001eb26 <timecmp_test_5+0xf8>
    8001eb1c:	4481                	li	s1,0
    TEST_END(); 
    8001eb1e:	00004597          	auipc	a1,0x4
    8001eb22:	02258593          	addi	a1,a1,34 # 80022b40 <__func__.2+0x2d8>
    8001eb26:	00004517          	auipc	a0,0x4
    8001eb2a:	0c250513          	addi	a0,a0,194 # 80022be8 <__func__.2+0x380>
    8001eb2e:	142020ef          	jal	80020c70 <printf>
    8001eb32:	4511                	li	a0,4
    8001eb34:	fa5e10ef          	jal	80000ad8 <goto_priv>
    8001eb38:	871e20ef          	jal	800013a8 <reset_state>
}
    8001eb3c:	60e2                	ld	ra,24(sp)
    8001eb3e:	6442                	ld	s0,16(sp)
    8001eb40:	8526                	mv	a0,s1
    8001eb42:	64a2                	ld	s1,8(sp)
    8001eb44:	6105                	addi	sp,sp,32
    8001eb46:	8082                	ret

000000008001eb48 <timecmp_test_6>:

bool timecmp_test_6() {
    8001eb48:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001eb4a:	00004597          	auipc	a1,0x4
    8001eb4e:	c8e58593          	addi	a1,a1,-882 # 800227d8 <__func__.8>
    8001eb52:	00004517          	auipc	a0,0x4
    8001eb56:	ffe50513          	addi	a0,a0,-2 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_6() {
    8001eb5a:	ec06                	sd	ra,24(sp)
    8001eb5c:	e822                	sd	s0,16(sp)
    8001eb5e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001eb60:	110020ef          	jal	80020c70 <printf>
    8001eb64:	4529                	li	a0,10
    8001eb66:	79a010ef          	jal	80020300 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001eb6a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8001eb6e:	450d                	li	a0,3
    8001eb70:	f69e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb74:	0330000f          	fence	rw,rw
    8001eb78:	00026417          	auipc	s0,0x26
    8001eb7c:	49840413          	addi	s0,s0,1176 # 80045010 <excpt>
    8001eb80:	4785                	li	a5,1
    8001eb82:	00026717          	auipc	a4,0x26
    8001eb86:	4c073323          	sd	zero,1222(a4) # 80045048 <excpt+0x38>
    8001eb8a:	00f41023          	sh	a5,0(s0)
    8001eb8e:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001eb92:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001eb96:	08200593          	li	a1,130
    8001eb9a:	0000b617          	auipc	a2,0xb
    8001eb9e:	51660613          	addi	a2,a2,1302 # 8002a0b0 <__func__.2+0x7848>
    8001eba2:	00004517          	auipc	a0,0x4
    8001eba6:	fc650513          	addi	a0,a0,-58 # 80022b68 <__func__.2+0x300>
    8001ebaa:	0c6020ef          	jal	80020c70 <printf>
    8001ebae:	00026797          	auipc	a5,0x26
    8001ebb2:	4637c783          	lbu	a5,1123(a5) # 80045011 <excpt+0x1>
    8001ebb6:	00004597          	auipc	a1,0x4
    8001ebba:	f8a58593          	addi	a1,a1,-118 # 80022b40 <__func__.2+0x2d8>
    8001ebbe:	cf89                	beqz	a5,8001ebd8 <timecmp_test_6+0x90>
    8001ebc0:	6418                	ld	a4,8(s0)
    8001ebc2:	4789                	li	a5,2
    8001ebc4:	00004597          	auipc	a1,0x4
    8001ebc8:	f6c58593          	addi	a1,a1,-148 # 80022b30 <__func__.2+0x2c8>
    8001ebcc:	00f70663          	beq	a4,a5,8001ebd8 <timecmp_test_6+0x90>
    8001ebd0:	00004597          	auipc	a1,0x4
    8001ebd4:	f7058593          	addi	a1,a1,-144 # 80022b40 <__func__.2+0x2d8>
    8001ebd8:	00004517          	auipc	a0,0x4
    8001ebdc:	fa850513          	addi	a0,a0,-88 # 80022b80 <__func__.2+0x318>
    8001ebe0:	090020ef          	jal	80020c70 <printf>
    8001ebe4:	00026797          	auipc	a5,0x26
    8001ebe8:	42d7c783          	lbu	a5,1069(a5) # 80045011 <excpt+0x1>
    8001ebec:	c789                	beqz	a5,8001ebf6 <timecmp_test_6+0xae>
    8001ebee:	6418                	ld	a4,8(s0)
    8001ebf0:	4789                	li	a5,2
    8001ebf2:	00f70c63          	beq	a4,a5,8001ec0a <timecmp_test_6+0xc2>
    8001ebf6:	00004517          	auipc	a0,0x4
    8001ebfa:	f9250513          	addi	a0,a0,-110 # 80022b88 <__func__.2+0x320>
    8001ebfe:	072020ef          	jal	80020c70 <printf>
    8001ec02:	02900513          	li	a0,41
    8001ec06:	6fa010ef          	jal	80020300 <putchar>
    8001ec0a:	4529                	li	a0,10
    8001ec0c:	6f4010ef          	jal	80020300 <putchar>
    8001ec10:	00026497          	auipc	s1,0x26
    8001ec14:	4014c483          	lbu	s1,1025(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ec18:	00004597          	auipc	a1,0x4
    8001ec1c:	f2858593          	addi	a1,a1,-216 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001ec20:	cc91                	beqz	s1,8001ec3c <timecmp_test_6+0xf4>
    8001ec22:	6418                	ld	a4,8(s0)
    8001ec24:	4789                	li	a5,2
    TEST_END(); 
    8001ec26:	00004597          	auipc	a1,0x4
    8001ec2a:	f0a58593          	addi	a1,a1,-246 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001ec2e:	00f70763          	beq	a4,a5,8001ec3c <timecmp_test_6+0xf4>
    8001ec32:	4481                	li	s1,0
    TEST_END(); 
    8001ec34:	00004597          	auipc	a1,0x4
    8001ec38:	f0c58593          	addi	a1,a1,-244 # 80022b40 <__func__.2+0x2d8>
    8001ec3c:	00004517          	auipc	a0,0x4
    8001ec40:	fac50513          	addi	a0,a0,-84 # 80022be8 <__func__.2+0x380>
    8001ec44:	02c020ef          	jal	80020c70 <printf>
    8001ec48:	4511                	li	a0,4
    8001ec4a:	e8fe10ef          	jal	80000ad8 <goto_priv>
    8001ec4e:	f5ae20ef          	jal	800013a8 <reset_state>
}
    8001ec52:	60e2                	ld	ra,24(sp)
    8001ec54:	6442                	ld	s0,16(sp)
    8001ec56:	8526                	mv	a0,s1
    8001ec58:	64a2                	ld	s1,8(sp)
    8001ec5a:	6105                	addi	sp,sp,32
    8001ec5c:	8082                	ret

000000008001ec5e <timecmp_test_7>:

bool timecmp_test_7() {
    8001ec5e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ec60:	00004597          	auipc	a1,0x4
    8001ec64:	b8858593          	addi	a1,a1,-1144 # 800227e8 <__func__.7>
    8001ec68:	00004517          	auipc	a0,0x4
    8001ec6c:	ee850513          	addi	a0,a0,-280 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_7() {
    8001ec70:	ec06                	sd	ra,24(sp)
    8001ec72:	e822                	sd	s0,16(sp)
    8001ec74:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ec76:	7fb010ef          	jal	80020c70 <printf>
    8001ec7a:	4529                	li	a0,10
    8001ec7c:	684010ef          	jal	80020300 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001ec80:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001ec84:	4509                	li	a0,2
    8001ec86:	e53e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec8a:	0330000f          	fence	rw,rw
    8001ec8e:	00026417          	auipc	s0,0x26
    8001ec92:	38240413          	addi	s0,s0,898 # 80045010 <excpt>
    8001ec96:	4785                	li	a5,1
    8001ec98:	00026717          	auipc	a4,0x26
    8001ec9c:	3a073823          	sd	zero,944(a4) # 80045048 <excpt+0x38>
    8001eca0:	00f41023          	sh	a5,0(s0)
    8001eca4:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001eca8:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001ecac:	08200593          	li	a1,130
    8001ecb0:	0000b617          	auipc	a2,0xb
    8001ecb4:	45860613          	addi	a2,a2,1112 # 8002a108 <__func__.2+0x78a0>
    8001ecb8:	00004517          	auipc	a0,0x4
    8001ecbc:	eb050513          	addi	a0,a0,-336 # 80022b68 <__func__.2+0x300>
    8001ecc0:	7b1010ef          	jal	80020c70 <printf>
    8001ecc4:	00026797          	auipc	a5,0x26
    8001ecc8:	34d7c783          	lbu	a5,845(a5) # 80045011 <excpt+0x1>
    8001eccc:	00004597          	auipc	a1,0x4
    8001ecd0:	e7458593          	addi	a1,a1,-396 # 80022b40 <__func__.2+0x2d8>
    8001ecd4:	cf89                	beqz	a5,8001ecee <timecmp_test_7+0x90>
    8001ecd6:	6418                	ld	a4,8(s0)
    8001ecd8:	4789                	li	a5,2
    8001ecda:	00004597          	auipc	a1,0x4
    8001ecde:	e5658593          	addi	a1,a1,-426 # 80022b30 <__func__.2+0x2c8>
    8001ece2:	00f70663          	beq	a4,a5,8001ecee <timecmp_test_7+0x90>
    8001ece6:	00004597          	auipc	a1,0x4
    8001ecea:	e5a58593          	addi	a1,a1,-422 # 80022b40 <__func__.2+0x2d8>
    8001ecee:	00004517          	auipc	a0,0x4
    8001ecf2:	e9250513          	addi	a0,a0,-366 # 80022b80 <__func__.2+0x318>
    8001ecf6:	77b010ef          	jal	80020c70 <printf>
    8001ecfa:	00026797          	auipc	a5,0x26
    8001ecfe:	3177c783          	lbu	a5,791(a5) # 80045011 <excpt+0x1>
    8001ed02:	c789                	beqz	a5,8001ed0c <timecmp_test_7+0xae>
    8001ed04:	6418                	ld	a4,8(s0)
    8001ed06:	4789                	li	a5,2
    8001ed08:	00f70c63          	beq	a4,a5,8001ed20 <timecmp_test_7+0xc2>
    8001ed0c:	00004517          	auipc	a0,0x4
    8001ed10:	e7c50513          	addi	a0,a0,-388 # 80022b88 <__func__.2+0x320>
    8001ed14:	75d010ef          	jal	80020c70 <printf>
    8001ed18:	02900513          	li	a0,41
    8001ed1c:	5e4010ef          	jal	80020300 <putchar>
    8001ed20:	4529                	li	a0,10
    8001ed22:	5de010ef          	jal	80020300 <putchar>
    8001ed26:	00026497          	auipc	s1,0x26
    8001ed2a:	2eb4c483          	lbu	s1,747(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ed2e:	00004597          	auipc	a1,0x4
    8001ed32:	e1258593          	addi	a1,a1,-494 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001ed36:	cc91                	beqz	s1,8001ed52 <timecmp_test_7+0xf4>
    8001ed38:	6418                	ld	a4,8(s0)
    8001ed3a:	4789                	li	a5,2
    TEST_END(); 
    8001ed3c:	00004597          	auipc	a1,0x4
    8001ed40:	df458593          	addi	a1,a1,-524 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8001ed44:	00f70763          	beq	a4,a5,8001ed52 <timecmp_test_7+0xf4>
    8001ed48:	4481                	li	s1,0
    TEST_END(); 
    8001ed4a:	00004597          	auipc	a1,0x4
    8001ed4e:	df658593          	addi	a1,a1,-522 # 80022b40 <__func__.2+0x2d8>
    8001ed52:	00004517          	auipc	a0,0x4
    8001ed56:	e9650513          	addi	a0,a0,-362 # 80022be8 <__func__.2+0x380>
    8001ed5a:	717010ef          	jal	80020c70 <printf>
    8001ed5e:	4511                	li	a0,4
    8001ed60:	d79e10ef          	jal	80000ad8 <goto_priv>
    8001ed64:	e44e20ef          	jal	800013a8 <reset_state>
}
    8001ed68:	60e2                	ld	ra,24(sp)
    8001ed6a:	6442                	ld	s0,16(sp)
    8001ed6c:	8526                	mv	a0,s1
    8001ed6e:	64a2                	ld	s1,8(sp)
    8001ed70:	6105                	addi	sp,sp,32
    8001ed72:	8082                	ret

000000008001ed74 <timecmp_test_8>:

bool timecmp_test_8() {
    8001ed74:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ed76:	00004597          	auipc	a1,0x4
    8001ed7a:	a8258593          	addi	a1,a1,-1406 # 800227f8 <__func__.6>
    8001ed7e:	00004517          	auipc	a0,0x4
    8001ed82:	dd250513          	addi	a0,a0,-558 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_8() {
    8001ed86:	ec06                	sd	ra,24(sp)
    8001ed88:	e822                	sd	s0,16(sp)
    8001ed8a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ed8c:	6e5010ef          	jal	80020c70 <printf>
    8001ed90:	4529                	li	a0,10
    8001ed92:	56e010ef          	jal	80020300 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001ed96:	57fd                	li	a5,-1
    8001ed98:	17fe                	slli	a5,a5,0x3f
    8001ed9a:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001ed9e:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001eda2:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001eda6:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    8001edaa:	4509                	li	a0,2
    8001edac:	d2de10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001edb0:	0330000f          	fence	rw,rw
    8001edb4:	00026417          	auipc	s0,0x26
    8001edb8:	25c40413          	addi	s0,s0,604 # 80045010 <excpt>
    8001edbc:	4785                	li	a5,1
    8001edbe:	00026717          	auipc	a4,0x26
    8001edc2:	28073523          	sd	zero,650(a4) # 80045048 <excpt+0x38>
    8001edc6:	00f41023          	sh	a5,0(s0)
    8001edca:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001edce:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    8001edd2:	08200593          	li	a1,130
    8001edd6:	0000b617          	auipc	a2,0xb
    8001edda:	38a60613          	addi	a2,a2,906 # 8002a160 <__func__.2+0x78f8>
    8001edde:	00004517          	auipc	a0,0x4
    8001ede2:	d8a50513          	addi	a0,a0,-630 # 80022b68 <__func__.2+0x300>
    8001ede6:	68b010ef          	jal	80020c70 <printf>
    8001edea:	00026797          	auipc	a5,0x26
    8001edee:	2277c783          	lbu	a5,551(a5) # 80045011 <excpt+0x1>
    8001edf2:	00004597          	auipc	a1,0x4
    8001edf6:	d4e58593          	addi	a1,a1,-690 # 80022b40 <__func__.2+0x2d8>
    8001edfa:	cf89                	beqz	a5,8001ee14 <timecmp_test_8+0xa0>
    8001edfc:	6418                	ld	a4,8(s0)
    8001edfe:	47d9                	li	a5,22
    8001ee00:	00004597          	auipc	a1,0x4
    8001ee04:	d3058593          	addi	a1,a1,-720 # 80022b30 <__func__.2+0x2c8>
    8001ee08:	00f70663          	beq	a4,a5,8001ee14 <timecmp_test_8+0xa0>
    8001ee0c:	00004597          	auipc	a1,0x4
    8001ee10:	d3458593          	addi	a1,a1,-716 # 80022b40 <__func__.2+0x2d8>
    8001ee14:	00004517          	auipc	a0,0x4
    8001ee18:	d6c50513          	addi	a0,a0,-660 # 80022b80 <__func__.2+0x318>
    8001ee1c:	655010ef          	jal	80020c70 <printf>
    8001ee20:	00026797          	auipc	a5,0x26
    8001ee24:	1f17c783          	lbu	a5,497(a5) # 80045011 <excpt+0x1>
    8001ee28:	c789                	beqz	a5,8001ee32 <timecmp_test_8+0xbe>
    8001ee2a:	6418                	ld	a4,8(s0)
    8001ee2c:	47d9                	li	a5,22
    8001ee2e:	00f70c63          	beq	a4,a5,8001ee46 <timecmp_test_8+0xd2>
    8001ee32:	00004517          	auipc	a0,0x4
    8001ee36:	d5650513          	addi	a0,a0,-682 # 80022b88 <__func__.2+0x320>
    8001ee3a:	637010ef          	jal	80020c70 <printf>
    8001ee3e:	02900513          	li	a0,41
    8001ee42:	4be010ef          	jal	80020300 <putchar>
    8001ee46:	4529                	li	a0,10
    8001ee48:	4b8010ef          	jal	80020300 <putchar>
    8001ee4c:	00026497          	auipc	s1,0x26
    8001ee50:	1c54c483          	lbu	s1,453(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001ee54:	00004597          	auipc	a1,0x4
    8001ee58:	cec58593          	addi	a1,a1,-788 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    8001ee5c:	cc91                	beqz	s1,8001ee78 <timecmp_test_8+0x104>
    8001ee5e:	6418                	ld	a4,8(s0)
    8001ee60:	47d9                	li	a5,22
    TEST_END(); 
    8001ee62:	00004597          	auipc	a1,0x4
    8001ee66:	cce58593          	addi	a1,a1,-818 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    8001ee6a:	00f70763          	beq	a4,a5,8001ee78 <timecmp_test_8+0x104>
    8001ee6e:	4481                	li	s1,0
    TEST_END(); 
    8001ee70:	00004597          	auipc	a1,0x4
    8001ee74:	cd058593          	addi	a1,a1,-816 # 80022b40 <__func__.2+0x2d8>
    8001ee78:	00004517          	auipc	a0,0x4
    8001ee7c:	d7050513          	addi	a0,a0,-656 # 80022be8 <__func__.2+0x380>
    8001ee80:	5f1010ef          	jal	80020c70 <printf>
    8001ee84:	4511                	li	a0,4
    8001ee86:	c53e10ef          	jal	80000ad8 <goto_priv>
    8001ee8a:	d1ee20ef          	jal	800013a8 <reset_state>
}
    8001ee8e:	60e2                	ld	ra,24(sp)
    8001ee90:	6442                	ld	s0,16(sp)
    8001ee92:	8526                	mv	a0,s1
    8001ee94:	64a2                	ld	s1,8(sp)
    8001ee96:	6105                	addi	sp,sp,32
    8001ee98:	8082                	ret

000000008001ee9a <timecmp_test_9>:

bool timecmp_test_9() {
    8001ee9a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ee9c:	00004597          	auipc	a1,0x4
    8001eea0:	96c58593          	addi	a1,a1,-1684 # 80022808 <__func__.5>
    8001eea4:	00004517          	auipc	a0,0x4
    8001eea8:	cac50513          	addi	a0,a0,-852 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_9() {
    8001eeac:	ec06                	sd	ra,24(sp)
    8001eeae:	e822                	sd	s0,16(sp)
    8001eeb0:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001eeb2:	5bf010ef          	jal	80020c70 <printf>
    8001eeb6:	4529                	li	a0,10
    8001eeb8:	448010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001eebc:	57fd                	li	a5,-1
    8001eebe:	17fe                	slli	a5,a5,0x3f
    8001eec0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001eec4:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001eec8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001eecc:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    8001eed0:	4509                	li	a0,2
    8001eed2:	c07e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eed6:	0330000f          	fence	rw,rw
    8001eeda:	00026417          	auipc	s0,0x26
    8001eede:	13640413          	addi	s0,s0,310 # 80045010 <excpt>
    8001eee2:	4785                	li	a5,1
    8001eee4:	00026717          	auipc	a4,0x26
    8001eee8:	16073223          	sd	zero,356(a4) # 80045048 <excpt+0x38>
    8001eeec:	00f41023          	sh	a5,0(s0)
    8001eef0:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001eef4:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    8001eef8:	08200593          	li	a1,130
    8001eefc:	0000b617          	auipc	a2,0xb
    8001ef00:	2e460613          	addi	a2,a2,740 # 8002a1e0 <__func__.2+0x7978>
    8001ef04:	00004517          	auipc	a0,0x4
    8001ef08:	c6450513          	addi	a0,a0,-924 # 80022b68 <__func__.2+0x300>
    8001ef0c:	565010ef          	jal	80020c70 <printf>
    8001ef10:	00026797          	auipc	a5,0x26
    8001ef14:	1017c783          	lbu	a5,257(a5) # 80045011 <excpt+0x1>
    8001ef18:	00004597          	auipc	a1,0x4
    8001ef1c:	c2858593          	addi	a1,a1,-984 # 80022b40 <__func__.2+0x2d8>
    8001ef20:	cf89                	beqz	a5,8001ef3a <timecmp_test_9+0xa0>
    8001ef22:	6418                	ld	a4,8(s0)
    8001ef24:	47d9                	li	a5,22
    8001ef26:	00004597          	auipc	a1,0x4
    8001ef2a:	c0a58593          	addi	a1,a1,-1014 # 80022b30 <__func__.2+0x2c8>
    8001ef2e:	00f70663          	beq	a4,a5,8001ef3a <timecmp_test_9+0xa0>
    8001ef32:	00004597          	auipc	a1,0x4
    8001ef36:	c0e58593          	addi	a1,a1,-1010 # 80022b40 <__func__.2+0x2d8>
    8001ef3a:	00004517          	auipc	a0,0x4
    8001ef3e:	c4650513          	addi	a0,a0,-954 # 80022b80 <__func__.2+0x318>
    8001ef42:	52f010ef          	jal	80020c70 <printf>
    8001ef46:	00026797          	auipc	a5,0x26
    8001ef4a:	0cb7c783          	lbu	a5,203(a5) # 80045011 <excpt+0x1>
    8001ef4e:	c789                	beqz	a5,8001ef58 <timecmp_test_9+0xbe>
    8001ef50:	6418                	ld	a4,8(s0)
    8001ef52:	47d9                	li	a5,22
    8001ef54:	00f70c63          	beq	a4,a5,8001ef6c <timecmp_test_9+0xd2>
    8001ef58:	00004517          	auipc	a0,0x4
    8001ef5c:	c3050513          	addi	a0,a0,-976 # 80022b88 <__func__.2+0x320>
    8001ef60:	511010ef          	jal	80020c70 <printf>
    8001ef64:	02900513          	li	a0,41
    8001ef68:	398010ef          	jal	80020300 <putchar>
    8001ef6c:	4529                	li	a0,10
    8001ef6e:	392010ef          	jal	80020300 <putchar>
    8001ef72:	00026497          	auipc	s1,0x26
    8001ef76:	09f4c483          	lbu	s1,159(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001ef7a:	00004597          	auipc	a1,0x4
    8001ef7e:	bc658593          	addi	a1,a1,-1082 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    8001ef82:	cc91                	beqz	s1,8001ef9e <timecmp_test_9+0x104>
    8001ef84:	6418                	ld	a4,8(s0)
    8001ef86:	47d9                	li	a5,22
    TEST_END(); 
    8001ef88:	00004597          	auipc	a1,0x4
    8001ef8c:	ba858593          	addi	a1,a1,-1112 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    8001ef90:	00f70763          	beq	a4,a5,8001ef9e <timecmp_test_9+0x104>
    8001ef94:	4481                	li	s1,0
    TEST_END(); 
    8001ef96:	00004597          	auipc	a1,0x4
    8001ef9a:	baa58593          	addi	a1,a1,-1110 # 80022b40 <__func__.2+0x2d8>
    8001ef9e:	00004517          	auipc	a0,0x4
    8001efa2:	c4a50513          	addi	a0,a0,-950 # 80022be8 <__func__.2+0x380>
    8001efa6:	4cb010ef          	jal	80020c70 <printf>
    8001efaa:	4511                	li	a0,4
    8001efac:	b2de10ef          	jal	80000ad8 <goto_priv>
    8001efb0:	bf8e20ef          	jal	800013a8 <reset_state>
}
    8001efb4:	60e2                	ld	ra,24(sp)
    8001efb6:	6442                	ld	s0,16(sp)
    8001efb8:	8526                	mv	a0,s1
    8001efba:	64a2                	ld	s1,8(sp)
    8001efbc:	6105                	addi	sp,sp,32
    8001efbe:	8082                	ret

000000008001efc0 <timecmp_test_10>:

bool timecmp_test_10() {
    8001efc0:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001efc2:	00004597          	auipc	a1,0x4
    8001efc6:	85658593          	addi	a1,a1,-1962 # 80022818 <__func__.4>
    8001efca:	00004517          	auipc	a0,0x4
    8001efce:	b8650513          	addi	a0,a0,-1146 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_10() {
    8001efd2:	e406                	sd	ra,8(sp)
    8001efd4:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001efd6:	49b010ef          	jal	80020c70 <printf>
    8001efda:	4529                	li	a0,10
    8001efdc:	324010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001efe0:	57fd                	li	a5,-1
    8001efe2:	17fe                	slli	a5,a5,0x3f
    8001efe4:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001efe8:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001efec:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001eff0:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    8001eff4:	4509                	li	a0,2
    8001eff6:	ae3e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001effa:	0330000f          	fence	rw,rw
    8001effe:	4785                	li	a5,1
    8001f000:	00026717          	auipc	a4,0x26
    8001f004:	04073423          	sd	zero,72(a4) # 80045048 <excpt+0x38>
    8001f008:	00026717          	auipc	a4,0x26
    8001f00c:	00f71423          	sh	a5,8(a4) # 80045010 <excpt>
    8001f010:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001f014:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    8001f018:	08200593          	li	a1,130
    8001f01c:	0000b617          	auipc	a2,0xb
    8001f020:	24460613          	addi	a2,a2,580 # 8002a260 <__func__.2+0x79f8>
    8001f024:	00004517          	auipc	a0,0x4
    8001f028:	b4450513          	addi	a0,a0,-1212 # 80022b68 <__func__.2+0x300>
    8001f02c:	445010ef          	jal	80020c70 <printf>
    8001f030:	00026797          	auipc	a5,0x26
    8001f034:	fe17c783          	lbu	a5,-31(a5) # 80045011 <excpt+0x1>
    8001f038:	00004597          	auipc	a1,0x4
    8001f03c:	af858593          	addi	a1,a1,-1288 # 80022b30 <__func__.2+0x2c8>
    8001f040:	c789                	beqz	a5,8001f04a <timecmp_test_10+0x8a>
    8001f042:	00004597          	auipc	a1,0x4
    8001f046:	afe58593          	addi	a1,a1,-1282 # 80022b40 <__func__.2+0x2d8>
    8001f04a:	00004517          	auipc	a0,0x4
    8001f04e:	b3650513          	addi	a0,a0,-1226 # 80022b80 <__func__.2+0x318>
    8001f052:	41f010ef          	jal	80020c70 <printf>
    8001f056:	00026797          	auipc	a5,0x26
    8001f05a:	fbb7c783          	lbu	a5,-69(a5) # 80045011 <excpt+0x1>
    8001f05e:	e7a1                	bnez	a5,8001f0a6 <timecmp_test_10+0xe6>
    8001f060:	4529                	li	a0,10
    8001f062:	29e010ef          	jal	80020300 <putchar>
    8001f066:	00026797          	auipc	a5,0x26
    8001f06a:	fab7c783          	lbu	a5,-85(a5) # 80045011 <excpt+0x1>
    8001f06e:	e795                	bnez	a5,8001f09a <timecmp_test_10+0xda>
    8001f070:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f072:	00004597          	auipc	a1,0x4
    8001f076:	abe58593          	addi	a1,a1,-1346 # 80022b30 <__func__.2+0x2c8>
    8001f07a:	00004517          	auipc	a0,0x4
    8001f07e:	b6e50513          	addi	a0,a0,-1170 # 80022be8 <__func__.2+0x380>
    8001f082:	3ef010ef          	jal	80020c70 <printf>
    8001f086:	4511                	li	a0,4
    8001f088:	a51e10ef          	jal	80000ad8 <goto_priv>
    8001f08c:	b1ce20ef          	jal	800013a8 <reset_state>
}
    8001f090:	60a2                	ld	ra,8(sp)
    8001f092:	8522                	mv	a0,s0
    8001f094:	6402                	ld	s0,0(sp)
    8001f096:	0141                	addi	sp,sp,16
    8001f098:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    8001f09a:	4401                	li	s0,0
    TEST_END(); 
    8001f09c:	00004597          	auipc	a1,0x4
    8001f0a0:	aa458593          	addi	a1,a1,-1372 # 80022b40 <__func__.2+0x2d8>
    8001f0a4:	bfd9                	j	8001f07a <timecmp_test_10+0xba>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    8001f0a6:	00004517          	auipc	a0,0x4
    8001f0aa:	ae250513          	addi	a0,a0,-1310 # 80022b88 <__func__.2+0x320>
    8001f0ae:	3c3010ef          	jal	80020c70 <printf>
    8001f0b2:	02900513          	li	a0,41
    8001f0b6:	24a010ef          	jal	80020300 <putchar>
    8001f0ba:	b75d                	j	8001f060 <timecmp_test_10+0xa0>

000000008001f0bc <timecmp_test_11>:

bool timecmp_test_11() {
    8001f0bc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f0be:	00003597          	auipc	a1,0x3
    8001f0c2:	76a58593          	addi	a1,a1,1898 # 80022828 <__func__.3>
    8001f0c6:	00004517          	auipc	a0,0x4
    8001f0ca:	a8a50513          	addi	a0,a0,-1398 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_11() {
    8001f0ce:	e406                	sd	ra,8(sp)
    8001f0d0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f0d2:	39f010ef          	jal	80020c70 <printf>
    8001f0d6:	4529                	li	a0,10
    8001f0d8:	228010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001f0dc:	57fd                	li	a5,-1
    8001f0de:	17fe                	slli	a5,a5,0x3f
    8001f0e0:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001f0e4:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001f0e8:	450d                	li	a0,3
    8001f0ea:	9efe10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f0ee:	0330000f          	fence	rw,rw
    8001f0f2:	4785                	li	a5,1
    8001f0f4:	00026717          	auipc	a4,0x26
    8001f0f8:	f4073a23          	sd	zero,-172(a4) # 80045048 <excpt+0x38>
    8001f0fc:	00026717          	auipc	a4,0x26
    8001f100:	f0f71a23          	sh	a5,-236(a4) # 80045010 <excpt>
    8001f104:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001f108:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    8001f10c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    8001f110:	08200593          	li	a1,130
    8001f114:	0000b617          	auipc	a2,0xb
    8001f118:	1b460613          	addi	a2,a2,436 # 8002a2c8 <__func__.2+0x7a60>
    8001f11c:	00004517          	auipc	a0,0x4
    8001f120:	a4c50513          	addi	a0,a0,-1460 # 80022b68 <__func__.2+0x300>
    8001f124:	34d010ef          	jal	80020c70 <printf>
    8001f128:	00026797          	auipc	a5,0x26
    8001f12c:	ee97c783          	lbu	a5,-279(a5) # 80045011 <excpt+0x1>
    8001f130:	00004597          	auipc	a1,0x4
    8001f134:	a0058593          	addi	a1,a1,-1536 # 80022b30 <__func__.2+0x2c8>
    8001f138:	c789                	beqz	a5,8001f142 <timecmp_test_11+0x86>
    8001f13a:	00004597          	auipc	a1,0x4
    8001f13e:	a0658593          	addi	a1,a1,-1530 # 80022b40 <__func__.2+0x2d8>
    8001f142:	00004517          	auipc	a0,0x4
    8001f146:	a3e50513          	addi	a0,a0,-1474 # 80022b80 <__func__.2+0x318>
    8001f14a:	327010ef          	jal	80020c70 <printf>
    8001f14e:	00026797          	auipc	a5,0x26
    8001f152:	ec37c783          	lbu	a5,-317(a5) # 80045011 <excpt+0x1>
    8001f156:	e7a1                	bnez	a5,8001f19e <timecmp_test_11+0xe2>
    8001f158:	4529                	li	a0,10
    8001f15a:	1a6010ef          	jal	80020300 <putchar>
    8001f15e:	00026797          	auipc	a5,0x26
    8001f162:	eb37c783          	lbu	a5,-333(a5) # 80045011 <excpt+0x1>
    8001f166:	e795                	bnez	a5,8001f192 <timecmp_test_11+0xd6>
    8001f168:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f16a:	00004597          	auipc	a1,0x4
    8001f16e:	9c658593          	addi	a1,a1,-1594 # 80022b30 <__func__.2+0x2c8>
    8001f172:	00004517          	auipc	a0,0x4
    8001f176:	a7650513          	addi	a0,a0,-1418 # 80022be8 <__func__.2+0x380>
    8001f17a:	2f7010ef          	jal	80020c70 <printf>
    8001f17e:	4511                	li	a0,4
    8001f180:	959e10ef          	jal	80000ad8 <goto_priv>
    8001f184:	a24e20ef          	jal	800013a8 <reset_state>
}
    8001f188:	60a2                	ld	ra,8(sp)
    8001f18a:	8522                	mv	a0,s0
    8001f18c:	6402                	ld	s0,0(sp)
    8001f18e:	0141                	addi	sp,sp,16
    8001f190:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    8001f192:	4401                	li	s0,0
    TEST_END(); 
    8001f194:	00004597          	auipc	a1,0x4
    8001f198:	9ac58593          	addi	a1,a1,-1620 # 80022b40 <__func__.2+0x2d8>
    8001f19c:	bfd9                	j	8001f172 <timecmp_test_11+0xb6>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    8001f19e:	00004517          	auipc	a0,0x4
    8001f1a2:	9ea50513          	addi	a0,a0,-1558 # 80022b88 <__func__.2+0x320>
    8001f1a6:	2cb010ef          	jal	80020c70 <printf>
    8001f1aa:	02900513          	li	a0,41
    8001f1ae:	152010ef          	jal	80020300 <putchar>
    8001f1b2:	b75d                	j	8001f158 <timecmp_test_11+0x9c>

000000008001f1b4 <timecmp_test_12>:

bool timecmp_test_12() {
    8001f1b4:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f1b6:	00003597          	auipc	a1,0x3
    8001f1ba:	68258593          	addi	a1,a1,1666 # 80022838 <__func__.2>
    8001f1be:	00004517          	auipc	a0,0x4
    8001f1c2:	99250513          	addi	a0,a0,-1646 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_12() {
    8001f1c6:	e406                	sd	ra,8(sp)
    8001f1c8:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f1ca:	2a7010ef          	jal	80020c70 <printf>
    8001f1ce:	4529                	li	a0,10
    8001f1d0:	130010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8001f1d4:	57fd                	li	a5,-1
    8001f1d6:	17fe                	slli	a5,a5,0x3f
    8001f1d8:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001f1dc:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001f1e0:	450d                	li	a0,3
    8001f1e2:	8f7e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f1e6:	0330000f          	fence	rw,rw
    8001f1ea:	4785                	li	a5,1
    8001f1ec:	00026717          	auipc	a4,0x26
    8001f1f0:	e4073e23          	sd	zero,-420(a4) # 80045048 <excpt+0x38>
    8001f1f4:	00026717          	auipc	a4,0x26
    8001f1f8:	e0f71e23          	sh	a5,-484(a4) # 80045010 <excpt>
    8001f1fc:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8001f200:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    8001f204:	08200593          	li	a1,130
    8001f208:	0000b617          	auipc	a2,0xb
    8001f20c:	11060613          	addi	a2,a2,272 # 8002a318 <__func__.2+0x7ab0>
    8001f210:	00004517          	auipc	a0,0x4
    8001f214:	95850513          	addi	a0,a0,-1704 # 80022b68 <__func__.2+0x300>
    8001f218:	259010ef          	jal	80020c70 <printf>
    8001f21c:	00026797          	auipc	a5,0x26
    8001f220:	df57c783          	lbu	a5,-523(a5) # 80045011 <excpt+0x1>
    8001f224:	00004597          	auipc	a1,0x4
    8001f228:	90c58593          	addi	a1,a1,-1780 # 80022b30 <__func__.2+0x2c8>
    8001f22c:	c789                	beqz	a5,8001f236 <timecmp_test_12+0x82>
    8001f22e:	00004597          	auipc	a1,0x4
    8001f232:	91258593          	addi	a1,a1,-1774 # 80022b40 <__func__.2+0x2d8>
    8001f236:	00004517          	auipc	a0,0x4
    8001f23a:	94a50513          	addi	a0,a0,-1718 # 80022b80 <__func__.2+0x318>
    8001f23e:	233010ef          	jal	80020c70 <printf>
    8001f242:	00026797          	auipc	a5,0x26
    8001f246:	dcf7c783          	lbu	a5,-561(a5) # 80045011 <excpt+0x1>
    8001f24a:	e7a1                	bnez	a5,8001f292 <timecmp_test_12+0xde>
    8001f24c:	4529                	li	a0,10
    8001f24e:	0b2010ef          	jal	80020300 <putchar>
    8001f252:	00026797          	auipc	a5,0x26
    8001f256:	dbf7c783          	lbu	a5,-577(a5) # 80045011 <excpt+0x1>
    8001f25a:	e795                	bnez	a5,8001f286 <timecmp_test_12+0xd2>
    8001f25c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f25e:	00004597          	auipc	a1,0x4
    8001f262:	8d258593          	addi	a1,a1,-1838 # 80022b30 <__func__.2+0x2c8>
    8001f266:	00004517          	auipc	a0,0x4
    8001f26a:	98250513          	addi	a0,a0,-1662 # 80022be8 <__func__.2+0x380>
    8001f26e:	203010ef          	jal	80020c70 <printf>
    8001f272:	4511                	li	a0,4
    8001f274:	865e10ef          	jal	80000ad8 <goto_priv>
    8001f278:	930e20ef          	jal	800013a8 <reset_state>
}
    8001f27c:	60a2                	ld	ra,8(sp)
    8001f27e:	8522                	mv	a0,s0
    8001f280:	6402                	ld	s0,0(sp)
    8001f282:	0141                	addi	sp,sp,16
    8001f284:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    8001f286:	4401                	li	s0,0
    TEST_END(); 
    8001f288:	00004597          	auipc	a1,0x4
    8001f28c:	8b858593          	addi	a1,a1,-1864 # 80022b40 <__func__.2+0x2d8>
    8001f290:	bfd9                	j	8001f266 <timecmp_test_12+0xb2>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    8001f292:	00004517          	auipc	a0,0x4
    8001f296:	8f650513          	addi	a0,a0,-1802 # 80022b88 <__func__.2+0x320>
    8001f29a:	1d7010ef          	jal	80020c70 <printf>
    8001f29e:	02900513          	li	a0,41
    8001f2a2:	05e010ef          	jal	80020300 <putchar>
    8001f2a6:	b75d                	j	8001f24c <timecmp_test_12+0x98>

000000008001f2a8 <timecmp_test_13>:

bool timecmp_test_13() {
    8001f2a8:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f2aa:	00003597          	auipc	a1,0x3
    8001f2ae:	59e58593          	addi	a1,a1,1438 # 80022848 <__func__.1>
    8001f2b2:	00004517          	auipc	a0,0x4
    8001f2b6:	89e50513          	addi	a0,a0,-1890 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_13() {
    8001f2ba:	ec06                	sd	ra,24(sp)
    8001f2bc:	e822                	sd	s0,16(sp)
    8001f2be:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f2c0:	1b1010ef          	jal	80020c70 <printf>
    8001f2c4:	4529                	li	a0,10
    8001f2c6:	03a010ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001f2ca:	57fd                	li	a5,-1
    8001f2cc:	17fe                	slli	a5,a5,0x3f
    8001f2ce:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001f2d2:	60a7b073          	csrc	henvcfg,a5

    goto_priv(PRIV_VU);
    8001f2d6:	4501                	li	a0,0
    8001f2d8:	801e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f2dc:	0330000f          	fence	rw,rw
    8001f2e0:	00026417          	auipc	s0,0x26
    8001f2e4:	d3040413          	addi	s0,s0,-720 # 80045010 <excpt>
    8001f2e8:	4785                	li	a5,1
    8001f2ea:	00026717          	auipc	a4,0x26
    8001f2ee:	d4073f23          	sd	zero,-674(a4) # 80045048 <excpt+0x38>
    8001f2f2:	00f41023          	sh	a5,0(s0)
    8001f2f6:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001f2fa:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f2fe:	08200593          	li	a1,130
    8001f302:	0000b617          	auipc	a2,0xb
    8001f306:	06660613          	addi	a2,a2,102 # 8002a368 <__func__.2+0x7b00>
    8001f30a:	00004517          	auipc	a0,0x4
    8001f30e:	85e50513          	addi	a0,a0,-1954 # 80022b68 <__func__.2+0x300>
    8001f312:	15f010ef          	jal	80020c70 <printf>
    8001f316:	00026797          	auipc	a5,0x26
    8001f31a:	cfb7c783          	lbu	a5,-773(a5) # 80045011 <excpt+0x1>
    8001f31e:	00004597          	auipc	a1,0x4
    8001f322:	82258593          	addi	a1,a1,-2014 # 80022b40 <__func__.2+0x2d8>
    8001f326:	cf89                	beqz	a5,8001f340 <timecmp_test_13+0x98>
    8001f328:	6418                	ld	a4,8(s0)
    8001f32a:	47d9                	li	a5,22
    8001f32c:	00004597          	auipc	a1,0x4
    8001f330:	80458593          	addi	a1,a1,-2044 # 80022b30 <__func__.2+0x2c8>
    8001f334:	00f70663          	beq	a4,a5,8001f340 <timecmp_test_13+0x98>
    8001f338:	00004597          	auipc	a1,0x4
    8001f33c:	80858593          	addi	a1,a1,-2040 # 80022b40 <__func__.2+0x2d8>
    8001f340:	00004517          	auipc	a0,0x4
    8001f344:	84050513          	addi	a0,a0,-1984 # 80022b80 <__func__.2+0x318>
    8001f348:	129010ef          	jal	80020c70 <printf>
    8001f34c:	00026797          	auipc	a5,0x26
    8001f350:	cc57c783          	lbu	a5,-827(a5) # 80045011 <excpt+0x1>
    8001f354:	c789                	beqz	a5,8001f35e <timecmp_test_13+0xb6>
    8001f356:	6418                	ld	a4,8(s0)
    8001f358:	47d9                	li	a5,22
    8001f35a:	00f70c63          	beq	a4,a5,8001f372 <timecmp_test_13+0xca>
    8001f35e:	00004517          	auipc	a0,0x4
    8001f362:	82a50513          	addi	a0,a0,-2006 # 80022b88 <__func__.2+0x320>
    8001f366:	10b010ef          	jal	80020c70 <printf>
    8001f36a:	02900513          	li	a0,41
    8001f36e:	793000ef          	jal	80020300 <putchar>
    8001f372:	4529                	li	a0,10
    8001f374:	78d000ef          	jal	80020300 <putchar>
    8001f378:	00026497          	auipc	s1,0x26
    8001f37c:	c994c483          	lbu	s1,-871(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f380:	00003597          	auipc	a1,0x3
    8001f384:	7c058593          	addi	a1,a1,1984 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f388:	cc91                	beqz	s1,8001f3a4 <timecmp_test_13+0xfc>
    8001f38a:	6418                	ld	a4,8(s0)
    8001f38c:	47d9                	li	a5,22
    TEST_END(); 
    8001f38e:	00003597          	auipc	a1,0x3
    8001f392:	7a258593          	addi	a1,a1,1954 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f396:	00f70763          	beq	a4,a5,8001f3a4 <timecmp_test_13+0xfc>
    8001f39a:	4481                	li	s1,0
    TEST_END(); 
    8001f39c:	00003597          	auipc	a1,0x3
    8001f3a0:	7a458593          	addi	a1,a1,1956 # 80022b40 <__func__.2+0x2d8>
    8001f3a4:	00004517          	auipc	a0,0x4
    8001f3a8:	84450513          	addi	a0,a0,-1980 # 80022be8 <__func__.2+0x380>
    8001f3ac:	0c5010ef          	jal	80020c70 <printf>
    8001f3b0:	4511                	li	a0,4
    8001f3b2:	f26e10ef          	jal	80000ad8 <goto_priv>
    8001f3b6:	ff3e10ef          	jal	800013a8 <reset_state>
}
    8001f3ba:	60e2                	ld	ra,24(sp)
    8001f3bc:	6442                	ld	s0,16(sp)
    8001f3be:	8526                	mv	a0,s1
    8001f3c0:	64a2                	ld	s1,8(sp)
    8001f3c2:	6105                	addi	sp,sp,32
    8001f3c4:	8082                	ret

000000008001f3c6 <timecmp_test_14>:

bool timecmp_test_14() {
    8001f3c6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f3c8:	00003597          	auipc	a1,0x3
    8001f3cc:	49058593          	addi	a1,a1,1168 # 80022858 <__func__.0>
    8001f3d0:	00003517          	auipc	a0,0x3
    8001f3d4:	78050513          	addi	a0,a0,1920 # 80022b50 <__func__.2+0x2e8>
bool timecmp_test_14() {
    8001f3d8:	ec06                	sd	ra,24(sp)
    8001f3da:	e822                	sd	s0,16(sp)
    8001f3dc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f3de:	093010ef          	jal	80020c70 <printf>
    8001f3e2:	4529                	li	a0,10
    8001f3e4:	71d000ef          	jal	80020300 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001f3e8:	57fd                	li	a5,-1
    8001f3ea:	17fe                	slli	a5,a5,0x3f
    8001f3ec:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001f3f0:	60a7b073          	csrc	henvcfg,a5

    goto_priv(PRIV_VS);
    8001f3f4:	4509                	li	a0,2
    8001f3f6:	ee2e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f3fa:	0330000f          	fence	rw,rw
    8001f3fe:	00026417          	auipc	s0,0x26
    8001f402:	c1240413          	addi	s0,s0,-1006 # 80045010 <excpt>
    8001f406:	4785                	li	a5,1
    8001f408:	00026717          	auipc	a4,0x26
    8001f40c:	c4073023          	sd	zero,-960(a4) # 80045048 <excpt+0x38>
    8001f410:	00f41023          	sh	a5,0(s0)
    8001f414:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001f418:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f41c:	08200593          	li	a1,130
    8001f420:	0000b617          	auipc	a2,0xb
    8001f424:	fa860613          	addi	a2,a2,-88 # 8002a3c8 <__func__.2+0x7b60>
    8001f428:	00003517          	auipc	a0,0x3
    8001f42c:	74050513          	addi	a0,a0,1856 # 80022b68 <__func__.2+0x300>
    8001f430:	041010ef          	jal	80020c70 <printf>
    8001f434:	00026797          	auipc	a5,0x26
    8001f438:	bdd7c783          	lbu	a5,-1059(a5) # 80045011 <excpt+0x1>
    8001f43c:	00003597          	auipc	a1,0x3
    8001f440:	70458593          	addi	a1,a1,1796 # 80022b40 <__func__.2+0x2d8>
    8001f444:	cf89                	beqz	a5,8001f45e <timecmp_test_14+0x98>
    8001f446:	6418                	ld	a4,8(s0)
    8001f448:	47d9                	li	a5,22
    8001f44a:	00003597          	auipc	a1,0x3
    8001f44e:	6e658593          	addi	a1,a1,1766 # 80022b30 <__func__.2+0x2c8>
    8001f452:	00f70663          	beq	a4,a5,8001f45e <timecmp_test_14+0x98>
    8001f456:	00003597          	auipc	a1,0x3
    8001f45a:	6ea58593          	addi	a1,a1,1770 # 80022b40 <__func__.2+0x2d8>
    8001f45e:	00003517          	auipc	a0,0x3
    8001f462:	72250513          	addi	a0,a0,1826 # 80022b80 <__func__.2+0x318>
    8001f466:	00b010ef          	jal	80020c70 <printf>
    8001f46a:	00026797          	auipc	a5,0x26
    8001f46e:	ba77c783          	lbu	a5,-1113(a5) # 80045011 <excpt+0x1>
    8001f472:	c789                	beqz	a5,8001f47c <timecmp_test_14+0xb6>
    8001f474:	6418                	ld	a4,8(s0)
    8001f476:	47d9                	li	a5,22
    8001f478:	00f70c63          	beq	a4,a5,8001f490 <timecmp_test_14+0xca>
    8001f47c:	00003517          	auipc	a0,0x3
    8001f480:	70c50513          	addi	a0,a0,1804 # 80022b88 <__func__.2+0x320>
    8001f484:	7ec010ef          	jal	80020c70 <printf>
    8001f488:	02900513          	li	a0,41
    8001f48c:	675000ef          	jal	80020300 <putchar>
    8001f490:	4529                	li	a0,10
    8001f492:	66f000ef          	jal	80020300 <putchar>
    8001f496:	00026497          	auipc	s1,0x26
    8001f49a:	b7b4c483          	lbu	s1,-1157(s1) # 80045011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f49e:	00003597          	auipc	a1,0x3
    8001f4a2:	6a258593          	addi	a1,a1,1698 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f4a6:	cc91                	beqz	s1,8001f4c2 <timecmp_test_14+0xfc>
    8001f4a8:	6418                	ld	a4,8(s0)
    8001f4aa:	47d9                	li	a5,22
    TEST_END(); 
    8001f4ac:	00003597          	auipc	a1,0x3
    8001f4b0:	68458593          	addi	a1,a1,1668 # 80022b30 <__func__.2+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    8001f4b4:	00f70763          	beq	a4,a5,8001f4c2 <timecmp_test_14+0xfc>
    8001f4b8:	4481                	li	s1,0
    TEST_END(); 
    8001f4ba:	00003597          	auipc	a1,0x3
    8001f4be:	68658593          	addi	a1,a1,1670 # 80022b40 <__func__.2+0x2d8>
    8001f4c2:	00003517          	auipc	a0,0x3
    8001f4c6:	72650513          	addi	a0,a0,1830 # 80022be8 <__func__.2+0x380>
    8001f4ca:	7a6010ef          	jal	80020c70 <printf>
    8001f4ce:	4511                	li	a0,4
    8001f4d0:	e08e10ef          	jal	80000ad8 <goto_priv>
    8001f4d4:	ed5e10ef          	jal	800013a8 <reset_state>
    8001f4d8:	60e2                	ld	ra,24(sp)
    8001f4da:	6442                	ld	s0,16(sp)
    8001f4dc:	8526                	mv	a0,s1
    8001f4de:	64a2                	ld	s1,8(sp)
    8001f4e0:	6105                	addi	sp,sp,32
    8001f4e2:	8082                	ret

000000008001f4e4 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    8001f4e4:	7179                	addi	sp,sp,-48

    TEST_START();
    8001f4e6:	00003597          	auipc	a1,0x3
    8001f4ea:	38258593          	addi	a1,a1,898 # 80022868 <__func__.2>
    8001f4ee:	00003517          	auipc	a0,0x3
    8001f4f2:	66250513          	addi	a0,a0,1634 # 80022b50 <__func__.2+0x2e8>
bool mix_instruction_1(){
    8001f4f6:	f406                	sd	ra,40(sp)
    8001f4f8:	f022                	sd	s0,32(sp)
    8001f4fa:	ec26                	sd	s1,24(sp)
    8001f4fc:	e84a                	sd	s2,16(sp)
    8001f4fe:	e44e                	sd	s3,8(sp)
    TEST_START();
    8001f500:	770010ef          	jal	80020c70 <printf>
    8001f504:	4529                	li	a0,10
    8001f506:	5fb000ef          	jal	80020300 <putchar>

    goto_priv(PRIV_M);
    8001f50a:	4511                	li	a0,4
    8001f50c:	dcce10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8001f510:	57fd                	li	a5,-1
    8001f512:	17fe                	slli	a5,a5,0x3f
    8001f514:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8001f518:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001f51c:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001f520:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    8001f524:	4509                	li	a0,2
    8001f526:	db2e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f52a:	0330000f          	fence	rw,rw
    8001f52e:	00026497          	auipc	s1,0x26
    8001f532:	ae248493          	addi	s1,s1,-1310 # 80045010 <excpt>
    8001f536:	4785                	li	a5,1
    8001f538:	00026717          	auipc	a4,0x26
    8001f53c:	b0073823          	sd	zero,-1264(a4) # 80045048 <excpt+0x38>
    8001f540:	00f49023          	sh	a5,0(s1)
    8001f544:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8001f548:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    8001f54c:	08200593          	li	a1,130
    8001f550:	0000b617          	auipc	a2,0xb
    8001f554:	ed860613          	addi	a2,a2,-296 # 8002a428 <__func__.2+0x7bc0>
    8001f558:	00003517          	auipc	a0,0x3
    8001f55c:	61050513          	addi	a0,a0,1552 # 80022b68 <__func__.2+0x300>
    8001f560:	710010ef          	jal	80020c70 <printf>
    8001f564:	00026797          	auipc	a5,0x26
    8001f568:	aad7c783          	lbu	a5,-1363(a5) # 80045011 <excpt+0x1>
    8001f56c:	00003597          	auipc	a1,0x3
    8001f570:	5d458593          	addi	a1,a1,1492 # 80022b40 <__func__.2+0x2d8>
    8001f574:	cf89                	beqz	a5,8001f58e <mix_instruction_1+0xaa>
    8001f576:	6498                	ld	a4,8(s1)
    8001f578:	47d9                	li	a5,22
    8001f57a:	00003597          	auipc	a1,0x3
    8001f57e:	5b658593          	addi	a1,a1,1462 # 80022b30 <__func__.2+0x2c8>
    8001f582:	00f70663          	beq	a4,a5,8001f58e <mix_instruction_1+0xaa>
    8001f586:	00003597          	auipc	a1,0x3
    8001f58a:	5ba58593          	addi	a1,a1,1466 # 80022b40 <__func__.2+0x2d8>
    8001f58e:	00003517          	auipc	a0,0x3
    8001f592:	5f250513          	addi	a0,a0,1522 # 80022b80 <__func__.2+0x318>
    8001f596:	6da010ef          	jal	80020c70 <printf>
    8001f59a:	00026797          	auipc	a5,0x26
    8001f59e:	a777c783          	lbu	a5,-1417(a5) # 80045011 <excpt+0x1>
    8001f5a2:	c789                	beqz	a5,8001f5ac <mix_instruction_1+0xc8>
    8001f5a4:	6498                	ld	a4,8(s1)
    8001f5a6:	47d9                	li	a5,22
    8001f5a8:	00f70c63          	beq	a4,a5,8001f5c0 <mix_instruction_1+0xdc>
    8001f5ac:	00003517          	auipc	a0,0x3
    8001f5b0:	5dc50513          	addi	a0,a0,1500 # 80022b88 <__func__.2+0x320>
    8001f5b4:	6bc010ef          	jal	80020c70 <printf>
    8001f5b8:	02900513          	li	a0,41
    8001f5bc:	545000ef          	jal	80020300 <putchar>
    8001f5c0:	4529                	li	a0,10
    8001f5c2:	53f000ef          	jal	80020300 <putchar>
    8001f5c6:	00026797          	auipc	a5,0x26
    8001f5ca:	a4b7c783          	lbu	a5,-1461(a5) # 80045011 <excpt+0x1>
    8001f5ce:	4401                	li	s0,0
    8001f5d0:	c789                	beqz	a5,8001f5da <mix_instruction_1+0xf6>
    8001f5d2:	6480                	ld	s0,8(s1)
    8001f5d4:	1429                	addi	s0,s0,-22
    8001f5d6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    8001f5da:	4511                	li	a0,4
    8001f5dc:	cfce10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001f5e0:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8001f5e4:	450d                	li	a0,3
    8001f5e6:	cf2e10ef          	jal	80000ad8 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f5ea:	0330000f          	fence	rw,rw
    8001f5ee:	4785                	li	a5,1
    8001f5f0:	00026717          	auipc	a4,0x26
    8001f5f4:	a4073c23          	sd	zero,-1448(a4) # 80045048 <excpt+0x38>
    8001f5f8:	00f49023          	sh	a5,0(s1)
    8001f5fc:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001f600:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f604:	08200593          	li	a1,130
    8001f608:	0000a617          	auipc	a2,0xa
    8001f60c:	c9060613          	addi	a2,a2,-880 # 80029298 <__func__.2+0x6a30>
    8001f610:	00003517          	auipc	a0,0x3
    8001f614:	55850513          	addi	a0,a0,1368 # 80022b68 <__func__.2+0x300>
    8001f618:	658010ef          	jal	80020c70 <printf>
    8001f61c:	00026797          	auipc	a5,0x26
    8001f620:	9f57c783          	lbu	a5,-1547(a5) # 80045011 <excpt+0x1>
    8001f624:	00003597          	auipc	a1,0x3
    8001f628:	51c58593          	addi	a1,a1,1308 # 80022b40 <__func__.2+0x2d8>
    8001f62c:	cf89                	beqz	a5,8001f646 <mix_instruction_1+0x162>
    8001f62e:	6498                	ld	a4,8(s1)
    8001f630:	4789                	li	a5,2
    8001f632:	00003597          	auipc	a1,0x3
    8001f636:	4fe58593          	addi	a1,a1,1278 # 80022b30 <__func__.2+0x2c8>
    8001f63a:	00f70663          	beq	a4,a5,8001f646 <mix_instruction_1+0x162>
    8001f63e:	00003597          	auipc	a1,0x3
    8001f642:	50258593          	addi	a1,a1,1282 # 80022b40 <__func__.2+0x2d8>
    8001f646:	00003517          	auipc	a0,0x3
    8001f64a:	53a50513          	addi	a0,a0,1338 # 80022b80 <__func__.2+0x318>
    8001f64e:	622010ef          	jal	80020c70 <printf>
    8001f652:	00026797          	auipc	a5,0x26
    8001f656:	9bf7c783          	lbu	a5,-1601(a5) # 80045011 <excpt+0x1>
    8001f65a:	c789                	beqz	a5,8001f664 <mix_instruction_1+0x180>
    8001f65c:	6498                	ld	a4,8(s1)
    8001f65e:	4789                	li	a5,2
    8001f660:	00f70c63          	beq	a4,a5,8001f678 <mix_instruction_1+0x194>
    8001f664:	00003517          	auipc	a0,0x3
    8001f668:	52450513          	addi	a0,a0,1316 # 80022b88 <__func__.2+0x320>
    8001f66c:	604010ef          	jal	80020c70 <printf>
    8001f670:	02900513          	li	a0,41
    8001f674:	48d000ef          	jal	80020300 <putchar>
    8001f678:	4529                	li	a0,10
    8001f67a:	487000ef          	jal	80020300 <putchar>
    8001f67e:	c801                	beqz	s0,8001f68e <mix_instruction_1+0x1aa>
    8001f680:	00026797          	auipc	a5,0x26
    8001f684:	9917c783          	lbu	a5,-1647(a5) # 80045011 <excpt+0x1>
    8001f688:	4401                	li	s0,0
    8001f68a:	380793e3          	bnez	a5,80020210 <mix_instruction_1+0xd2c>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    8001f68e:	4511                	li	a0,4
    8001f690:	c48e10ef          	jal	80000ad8 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    8001f694:	004007b7          	lui	a5,0x400
    8001f698:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8001f69c:	002007b7          	lui	a5,0x200
    8001f6a0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    8001f6a4:	4501                	li	a0,0
    8001f6a6:	c32e10ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001f6aa:	0330000f          	fence	rw,rw
    8001f6ae:	4785                	li	a5,1
    8001f6b0:	00026717          	auipc	a4,0x26
    8001f6b4:	98073c23          	sd	zero,-1640(a4) # 80045048 <excpt+0x38>
    8001f6b8:	00f49023          	sh	a5,0(s1)
    8001f6bc:	0330000f          	fence	rw,rw
    asm volatile(
    8001f6c0:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8001f6c4:	08200593          	li	a1,130
    8001f6c8:	00004617          	auipc	a2,0x4
    8001f6cc:	4a860613          	addi	a2,a2,1192 # 80023b70 <__func__.2+0x1308>
    8001f6d0:	00003517          	auipc	a0,0x3
    8001f6d4:	49850513          	addi	a0,a0,1176 # 80022b68 <__func__.2+0x300>
    8001f6d8:	598010ef          	jal	80020c70 <printf>
    8001f6dc:	00026797          	auipc	a5,0x26
    8001f6e0:	9357c783          	lbu	a5,-1739(a5) # 80045011 <excpt+0x1>
    8001f6e4:	00003597          	auipc	a1,0x3
    8001f6e8:	45c58593          	addi	a1,a1,1116 # 80022b40 <__func__.2+0x2d8>
    8001f6ec:	cf89                	beqz	a5,8001f706 <mix_instruction_1+0x222>
    8001f6ee:	6498                	ld	a4,8(s1)
    8001f6f0:	47d9                	li	a5,22
    8001f6f2:	00003597          	auipc	a1,0x3
    8001f6f6:	43e58593          	addi	a1,a1,1086 # 80022b30 <__func__.2+0x2c8>
    8001f6fa:	00f70663          	beq	a4,a5,8001f706 <mix_instruction_1+0x222>
    8001f6fe:	00003597          	auipc	a1,0x3
    8001f702:	44258593          	addi	a1,a1,1090 # 80022b40 <__func__.2+0x2d8>
    8001f706:	00003517          	auipc	a0,0x3
    8001f70a:	47a50513          	addi	a0,a0,1146 # 80022b80 <__func__.2+0x318>
    8001f70e:	562010ef          	jal	80020c70 <printf>
    8001f712:	00026797          	auipc	a5,0x26
    8001f716:	8ff7c783          	lbu	a5,-1793(a5) # 80045011 <excpt+0x1>
    8001f71a:	c789                	beqz	a5,8001f724 <mix_instruction_1+0x240>
    8001f71c:	6498                	ld	a4,8(s1)
    8001f71e:	47d9                	li	a5,22
    8001f720:	00f70c63          	beq	a4,a5,8001f738 <mix_instruction_1+0x254>
    8001f724:	00003517          	auipc	a0,0x3
    8001f728:	46450513          	addi	a0,a0,1124 # 80022b88 <__func__.2+0x320>
    8001f72c:	544010ef          	jal	80020c70 <printf>
    8001f730:	02900513          	li	a0,41
    8001f734:	3cd000ef          	jal	80020300 <putchar>
    8001f738:	4529                	li	a0,10
    8001f73a:	3c7000ef          	jal	80020300 <putchar>
    8001f73e:	c801                	beqz	s0,8001f74e <mix_instruction_1+0x26a>
    8001f740:	00026797          	auipc	a5,0x26
    8001f744:	8d17c783          	lbu	a5,-1839(a5) # 80045011 <excpt+0x1>
    8001f748:	4401                	li	s0,0
    8001f74a:	2e079ae3          	bnez	a5,8002023e <mix_instruction_1+0xd5a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    8001f74e:	4511                	li	a0,4
    8001f750:	b88e10ef          	jal	80000ad8 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    8001f754:	e8de00ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8001f758:	8cae10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f75c:	f55e00ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    8001f760:	450d                	li	a0,3
    8001f762:	b76e10ef          	jal	80000ad8 <goto_priv>

    set_prev_priv(PRIV_VU);
    8001f766:	4501                	li	a0,0
    8001f768:	a90e10ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f76c:	0330000f          	fence	rw,rw
    8001f770:	4785                	li	a5,1
    8001f772:	00026717          	auipc	a4,0x26
    8001f776:	8c073b23          	sd	zero,-1834(a4) # 80045048 <excpt+0x38>
    8001f77a:	00f49023          	sh	a5,0(s1)
    8001f77e:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    8001f782:	0000b917          	auipc	s2,0xb
    8001f786:	d1e90913          	addi	s2,s2,-738 # 8002a4a0 <__func__.2+0x7c38>
    8001f78a:	00093683          	ld	a3,0(s2)
    8001f78e:	44019737          	lui	a4,0x44019
    asm volatile(
    8001f792:	000807b7          	lui	a5,0x80
    8001f796:	0706                	slli	a4,a4,0x1
    8001f798:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001f79a:	e314                	sd	a3,0(a4)
    8001f79c:	07b6                	slli	a5,a5,0xd
    8001f79e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8001f7a2:	08200593          	li	a1,130
    8001f7a6:	00004617          	auipc	a2,0x4
    8001f7aa:	c6260613          	addi	a2,a2,-926 # 80023408 <__func__.2+0xba0>
    8001f7ae:	00003517          	auipc	a0,0x3
    8001f7b2:	3ba50513          	addi	a0,a0,954 # 80022b68 <__func__.2+0x300>
    8001f7b6:	4ba010ef          	jal	80020c70 <printf>
    8001f7ba:	00026797          	auipc	a5,0x26
    8001f7be:	8577c783          	lbu	a5,-1961(a5) # 80045011 <excpt+0x1>
    8001f7c2:	00003597          	auipc	a1,0x3
    8001f7c6:	37e58593          	addi	a1,a1,894 # 80022b40 <__func__.2+0x2d8>
    8001f7ca:	e789                	bnez	a5,8001f7d4 <mix_instruction_1+0x2f0>
    8001f7cc:	00003597          	auipc	a1,0x3
    8001f7d0:	36458593          	addi	a1,a1,868 # 80022b30 <__func__.2+0x2c8>
    8001f7d4:	00003517          	auipc	a0,0x3
    8001f7d8:	3ac50513          	addi	a0,a0,940 # 80022b80 <__func__.2+0x318>
    8001f7dc:	494010ef          	jal	80020c70 <printf>
    8001f7e0:	00026797          	auipc	a5,0x26
    8001f7e4:	8317c783          	lbu	a5,-1999(a5) # 80045011 <excpt+0x1>
    8001f7e8:	2c079ce3          	bnez	a5,800202c0 <mix_instruction_1+0xddc>
    8001f7ec:	4529                	li	a0,10
    8001f7ee:	313000ef          	jal	80020300 <putchar>
    8001f7f2:	c419                	beqz	s0,8001f800 <mix_instruction_1+0x31c>
    8001f7f4:	00026417          	auipc	s0,0x26
    8001f7f8:	81d44403          	lbu	s0,-2019(s0) # 80045011 <excpt+0x1>
    8001f7fc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    8001f800:	4509                	li	a0,2
    8001f802:	9f6e10ef          	jal	800009f8 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f806:	0330000f          	fence	rw,rw
    8001f80a:	4785                	li	a5,1
    8001f80c:	00026717          	auipc	a4,0x26
    8001f810:	82073e23          	sd	zero,-1988(a4) # 80045048 <excpt+0x38>
    8001f814:	00f49023          	sh	a5,0(s1)
    8001f818:	0330000f          	fence	rw,rw
    8001f81c:	00093683          	ld	a3,0(s2)
    8001f820:	44019737          	lui	a4,0x44019
    8001f824:	000807b7          	lui	a5,0x80
    8001f828:	0706                	slli	a4,a4,0x1
    8001f82a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001f82c:	e314                	sd	a3,0(a4)
    8001f82e:	07b6                	slli	a5,a5,0xd
    8001f830:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8001f834:	08200593          	li	a1,130
    8001f838:	00004617          	auipc	a2,0x4
    8001f83c:	c0060613          	addi	a2,a2,-1024 # 80023438 <__func__.2+0xbd0>
    8001f840:	00003517          	auipc	a0,0x3
    8001f844:	32850513          	addi	a0,a0,808 # 80022b68 <__func__.2+0x300>
    8001f848:	428010ef          	jal	80020c70 <printf>
    8001f84c:	00025797          	auipc	a5,0x25
    8001f850:	7c57c783          	lbu	a5,1989(a5) # 80045011 <excpt+0x1>
    8001f854:	00003597          	auipc	a1,0x3
    8001f858:	2ec58593          	addi	a1,a1,748 # 80022b40 <__func__.2+0x2d8>
    8001f85c:	cf89                	beqz	a5,8001f876 <mix_instruction_1+0x392>
    8001f85e:	6498                	ld	a4,8(s1)
    8001f860:	47b5                	li	a5,13
    8001f862:	00003597          	auipc	a1,0x3
    8001f866:	2ce58593          	addi	a1,a1,718 # 80022b30 <__func__.2+0x2c8>
    8001f86a:	00f70663          	beq	a4,a5,8001f876 <mix_instruction_1+0x392>
    8001f86e:	00003597          	auipc	a1,0x3
    8001f872:	2d258593          	addi	a1,a1,722 # 80022b40 <__func__.2+0x2d8>
    8001f876:	00003517          	auipc	a0,0x3
    8001f87a:	30a50513          	addi	a0,a0,778 # 80022b80 <__func__.2+0x318>
    8001f87e:	3f2010ef          	jal	80020c70 <printf>
    8001f882:	00025797          	auipc	a5,0x25
    8001f886:	78f7c783          	lbu	a5,1935(a5) # 80045011 <excpt+0x1>
    8001f88a:	c789                	beqz	a5,8001f894 <mix_instruction_1+0x3b0>
    8001f88c:	6498                	ld	a4,8(s1)
    8001f88e:	47b5                	li	a5,13
    8001f890:	00f70c63          	beq	a4,a5,8001f8a8 <mix_instruction_1+0x3c4>
    8001f894:	00003517          	auipc	a0,0x3
    8001f898:	2f450513          	addi	a0,a0,756 # 80022b88 <__func__.2+0x320>
    8001f89c:	3d4010ef          	jal	80020c70 <printf>
    8001f8a0:	02900513          	li	a0,41
    8001f8a4:	25d000ef          	jal	80020300 <putchar>
    8001f8a8:	4529                	li	a0,10
    8001f8aa:	257000ef          	jal	80020300 <putchar>
    8001f8ae:	c801                	beqz	s0,8001f8be <mix_instruction_1+0x3da>
    8001f8b0:	00025797          	auipc	a5,0x25
    8001f8b4:	7617c783          	lbu	a5,1889(a5) # 80045011 <excpt+0x1>
    8001f8b8:	4401                	li	s0,0
    8001f8ba:	16079ce3          	bnez	a5,80020232 <mix_instruction_1+0xd4e>
        excpt.cause == CAUSE_LPF
    );


//----------------------------------------------------------------------
    goto_priv(PRIV_HS);
    8001f8be:	450d                	li	a0,3
    8001f8c0:	a18e10ef          	jal	80000ad8 <goto_priv>
    hspt_init();
    8001f8c4:	d1de00ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f8c8:	f5be00ef          	jal	80000822 <hpt_init>
    goto_priv(PRIV_VS);  
    8001f8cc:	4509                	li	a0,2
    8001f8ce:	a0ae10ef          	jal	80000ad8 <goto_priv>
    vspt_init();
    8001f8d2:	ddfe00ef          	jal	800006b0 <vspt_init>

    printf("nihao\n");
    8001f8d6:	0000b517          	auipc	a0,0xb
    8001f8da:	bba50513          	addi	a0,a0,-1094 # 8002a490 <__func__.2+0x7c28>
    8001f8de:	302010ef          	jal	80020be0 <puts>
    goto_priv(PRIV_M);      //unknown_ecall
    8001f8e2:	4511                	li	a0,4
    8001f8e4:	9f4e10ef          	jal	80000ad8 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001f8e8:	000407b7          	lui	a5,0x40
    8001f8ec:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001f8f0:	450d                	li	a0,3
    8001f8f2:	9e6e10ef          	jal	80000ad8 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001f8f6:	0330000f          	fence	rw,rw
    8001f8fa:	4785                	li	a5,1
    8001f8fc:	00025717          	auipc	a4,0x25
    8001f900:	74073623          	sd	zero,1868(a4) # 80045048 <excpt+0x38>
    8001f904:	00f49023          	sh	a5,0(s1)
    8001f908:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001f90c:	37ab77b7          	lui	a5,0x37ab7
    8001f910:	00080737          	lui	a4,0x80
    8001f914:	078a                	slli	a5,a5,0x2
    8001f916:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001f918:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001f91c:	0736                	slli	a4,a4,0xd
    8001f91e:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001f922:	08200593          	li	a1,130
    8001f926:	00008617          	auipc	a2,0x8
    8001f92a:	d9a60613          	addi	a2,a2,-614 # 800276c0 <__func__.2+0x4e58>
    8001f92e:	00003517          	auipc	a0,0x3
    8001f932:	23a50513          	addi	a0,a0,570 # 80022b68 <__func__.2+0x300>
    8001f936:	33a010ef          	jal	80020c70 <printf>
    8001f93a:	00025797          	auipc	a5,0x25
    8001f93e:	6d77c783          	lbu	a5,1751(a5) # 80045011 <excpt+0x1>
    8001f942:	00003597          	auipc	a1,0x3
    8001f946:	1fe58593          	addi	a1,a1,510 # 80022b40 <__func__.2+0x2d8>
    8001f94a:	cf89                	beqz	a5,8001f964 <mix_instruction_1+0x480>
    8001f94c:	6498                	ld	a4,8(s1)
    8001f94e:	47bd                	li	a5,15
    8001f950:	00003597          	auipc	a1,0x3
    8001f954:	1e058593          	addi	a1,a1,480 # 80022b30 <__func__.2+0x2c8>
    8001f958:	00f70663          	beq	a4,a5,8001f964 <mix_instruction_1+0x480>
    8001f95c:	00003597          	auipc	a1,0x3
    8001f960:	1e458593          	addi	a1,a1,484 # 80022b40 <__func__.2+0x2d8>
    8001f964:	00003517          	auipc	a0,0x3
    8001f968:	21c50513          	addi	a0,a0,540 # 80022b80 <__func__.2+0x318>
    8001f96c:	304010ef          	jal	80020c70 <printf>
    8001f970:	00025797          	auipc	a5,0x25
    8001f974:	6a17c783          	lbu	a5,1697(a5) # 80045011 <excpt+0x1>
    8001f978:	c789                	beqz	a5,8001f982 <mix_instruction_1+0x49e>
    8001f97a:	6498                	ld	a4,8(s1)
    8001f97c:	47bd                	li	a5,15
    8001f97e:	00f70c63          	beq	a4,a5,8001f996 <mix_instruction_1+0x4b2>
    8001f982:	00003517          	auipc	a0,0x3
    8001f986:	20650513          	addi	a0,a0,518 # 80022b88 <__func__.2+0x320>
    8001f98a:	2e6010ef          	jal	80020c70 <printf>
    8001f98e:	02900513          	li	a0,41
    8001f992:	16f000ef          	jal	80020300 <putchar>
    8001f996:	4529                	li	a0,10
    8001f998:	169000ef          	jal	80020300 <putchar>
    8001f99c:	c801                	beqz	s0,8001f9ac <mix_instruction_1+0x4c8>
    8001f99e:	00025797          	auipc	a5,0x25
    8001f9a2:	6737c783          	lbu	a5,1651(a5) # 80045011 <excpt+0x1>
    8001f9a6:	4401                	li	s0,0
    8001f9a8:	06079fe3          	bnez	a5,80020226 <mix_instruction_1+0xd42>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    8001f9ac:	4511                	li	a0,4
    8001f9ae:	92ae10ef          	jal	80000ad8 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    8001f9b2:	57fd                	li	a5,-1
    8001f9b4:	03f79713          	slli	a4,a5,0x3f
    8001f9b8:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    8001f9bc:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8001f9c0:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    8001f9c4:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    8001f9c8:	64402973          	csrr	s2,hip
    8001f9cc:	00003617          	auipc	a2,0x3
    8001f9d0:	53460613          	addi	a2,a2,1332 # 80022f00 <__func__.2+0x698>
    8001f9d4:	08200593          	li	a1,130
    8001f9d8:	00003517          	auipc	a0,0x3
    8001f9dc:	19050513          	addi	a0,a0,400 # 80022b68 <__func__.2+0x300>
    8001f9e0:	4991                	li	s3,4
    8001f9e2:	28e010ef          	jal	80020c70 <printf>
    8001f9e6:	093904e3          	beq	s2,s3,8002026e <mix_instruction_1+0xd8a>
    8001f9ea:	00003597          	auipc	a1,0x3
    8001f9ee:	15658593          	addi	a1,a1,342 # 80022b40 <__func__.2+0x2d8>
    8001f9f2:	00003517          	auipc	a0,0x3
    8001f9f6:	18e50513          	addi	a0,a0,398 # 80022b80 <__func__.2+0x318>
    8001f9fa:	276010ef          	jal	80020c70 <printf>
    8001f9fe:	00003517          	auipc	a0,0x3
    8001fa02:	18a50513          	addi	a0,a0,394 # 80022b88 <__func__.2+0x320>
    8001fa06:	26a010ef          	jal	80020c70 <printf>
    8001fa0a:	86ce                	mv	a3,s3
    8001fa0c:	864a                	mv	a2,s2
    8001fa0e:	02d00593          	li	a1,45
    8001fa12:	00003517          	auipc	a0,0x3
    8001fa16:	4f650513          	addi	a0,a0,1270 # 80022f08 <__func__.2+0x6a0>
    8001fa1a:	256010ef          	jal	80020c70 <printf>
    8001fa1e:	02900513          	li	a0,41
    8001fa22:	0df000ef          	jal	80020300 <putchar>
    8001fa26:	4529                	li	a0,10
    8001fa28:	0d9000ef          	jal	80020300 <putchar>
    8001fa2c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    8001fa2e:	14402973          	csrr	s2,sip
    8001fa32:	00003617          	auipc	a2,0x3
    8001fa36:	4ee60613          	addi	a2,a2,1262 # 80022f20 <__func__.2+0x6b8>
    8001fa3a:	08200593          	li	a1,130
    8001fa3e:	00003517          	auipc	a0,0x3
    8001fa42:	12a50513          	addi	a0,a0,298 # 80022b68 <__func__.2+0x300>
    8001fa46:	22200993          	li	s3,546
    8001fa4a:	226010ef          	jal	80020c70 <printf>
    8001fa4e:	79390c63          	beq	s2,s3,800201e6 <mix_instruction_1+0xd02>
    8001fa52:	00003597          	auipc	a1,0x3
    8001fa56:	0ee58593          	addi	a1,a1,238 # 80022b40 <__func__.2+0x2d8>
    8001fa5a:	00003517          	auipc	a0,0x3
    8001fa5e:	12650513          	addi	a0,a0,294 # 80022b80 <__func__.2+0x318>
    8001fa62:	20e010ef          	jal	80020c70 <printf>
    8001fa66:	00003517          	auipc	a0,0x3
    8001fa6a:	12250513          	addi	a0,a0,290 # 80022b88 <__func__.2+0x320>
    8001fa6e:	202010ef          	jal	80020c70 <printf>
    8001fa72:	86ce                	mv	a3,s3
    8001fa74:	864a                	mv	a2,s2
    8001fa76:	02d00593          	li	a1,45
    8001fa7a:	00003517          	auipc	a0,0x3
    8001fa7e:	48e50513          	addi	a0,a0,1166 # 80022f08 <__func__.2+0x6a0>
    8001fa82:	1ee010ef          	jal	80020c70 <printf>
    8001fa86:	02900513          	li	a0,41
    8001fa8a:	077000ef          	jal	80020300 <putchar>
    8001fa8e:	4529                	li	a0,10
    8001fa90:	071000ef          	jal	80020300 <putchar>
    8001fa94:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    8001fa96:	24402973          	csrr	s2,vsip
    8001fa9a:	00003617          	auipc	a2,0x3
    8001fa9e:	45660613          	addi	a2,a2,1110 # 80022ef0 <__func__.2+0x688>
    8001faa2:	08200593          	li	a1,130
    8001faa6:	00003517          	auipc	a0,0x3
    8001faaa:	0c250513          	addi	a0,a0,194 # 80022b68 <__func__.2+0x300>
    8001faae:	4989                	li	s3,2
    8001fab0:	1c0010ef          	jal	80020c70 <printf>
    8001fab4:	71390a63          	beq	s2,s3,800201c8 <mix_instruction_1+0xce4>
    8001fab8:	00003597          	auipc	a1,0x3
    8001fabc:	08858593          	addi	a1,a1,136 # 80022b40 <__func__.2+0x2d8>
    8001fac0:	00003517          	auipc	a0,0x3
    8001fac4:	0c050513          	addi	a0,a0,192 # 80022b80 <__func__.2+0x318>
    8001fac8:	1a8010ef          	jal	80020c70 <printf>
    8001facc:	00003517          	auipc	a0,0x3
    8001fad0:	0bc50513          	addi	a0,a0,188 # 80022b88 <__func__.2+0x320>
    8001fad4:	19c010ef          	jal	80020c70 <printf>
    8001fad8:	86ce                	mv	a3,s3
    8001fada:	864a                	mv	a2,s2
    8001fadc:	02d00593          	li	a1,45
    8001fae0:	00003517          	auipc	a0,0x3
    8001fae4:	42850513          	addi	a0,a0,1064 # 80022f08 <__func__.2+0x6a0>
    8001fae8:	188010ef          	jal	80020c70 <printf>
    8001faec:	02900513          	li	a0,41
    8001faf0:	011000ef          	jal	80020300 <putchar>
    8001faf4:	4529                	li	a0,10
    8001faf6:	00b000ef          	jal	80020300 <putchar>
    8001fafa:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8001fafc:	4509                	li	a0,2
    8001fafe:	fdbe00ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8001fb02:	14402973          	csrr	s2,sip
    8001fb06:	00003617          	auipc	a2,0x3
    8001fb0a:	42260613          	addi	a2,a2,1058 # 80022f28 <__func__.2+0x6c0>
    8001fb0e:	08200593          	li	a1,130
    8001fb12:	00003517          	auipc	a0,0x3
    8001fb16:	05650513          	addi	a0,a0,86 # 80022b68 <__func__.2+0x300>
    8001fb1a:	4989                	li	s3,2
    8001fb1c:	154010ef          	jal	80020c70 <printf>
    8001fb20:	69390663          	beq	s2,s3,800201ac <mix_instruction_1+0xcc8>
    8001fb24:	00003597          	auipc	a1,0x3
    8001fb28:	01c58593          	addi	a1,a1,28 # 80022b40 <__func__.2+0x2d8>
    8001fb2c:	00003517          	auipc	a0,0x3
    8001fb30:	05450513          	addi	a0,a0,84 # 80022b80 <__func__.2+0x318>
    8001fb34:	13c010ef          	jal	80020c70 <printf>
    8001fb38:	00003517          	auipc	a0,0x3
    8001fb3c:	05050513          	addi	a0,a0,80 # 80022b88 <__func__.2+0x320>
    8001fb40:	130010ef          	jal	80020c70 <printf>
    8001fb44:	86ce                	mv	a3,s3
    8001fb46:	864a                	mv	a2,s2
    8001fb48:	02d00593          	li	a1,45
    8001fb4c:	00003517          	auipc	a0,0x3
    8001fb50:	3bc50513          	addi	a0,a0,956 # 80022f08 <__func__.2+0x6a0>
    8001fb54:	11c010ef          	jal	80020c70 <printf>
    8001fb58:	02900513          	li	a0,41
    8001fb5c:	7a4000ef          	jal	80020300 <putchar>
    8001fb60:	4529                	li	a0,10
    8001fb62:	79e000ef          	jal	80020300 <putchar>
    8001fb66:	4401                	li	s0,0
    goto_priv(PRIV_M);
    8001fb68:	4511                	li	a0,4
    8001fb6a:	f6fe00ef          	jal	80000ad8 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    8001fb6e:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    8001fb72:	64402973          	csrr	s2,hip
    8001fb76:	00003617          	auipc	a2,0x3
    8001fb7a:	38a60613          	addi	a2,a2,906 # 80022f00 <__func__.2+0x698>
    8001fb7e:	08200593          	li	a1,130
    8001fb82:	00003517          	auipc	a0,0x3
    8001fb86:	fe650513          	addi	a0,a0,-26 # 80022b68 <__func__.2+0x300>
    8001fb8a:	0e6010ef          	jal	80020c70 <printf>
    8001fb8e:	60090163          	beqz	s2,80020190 <mix_instruction_1+0xcac>
    8001fb92:	00003597          	auipc	a1,0x3
    8001fb96:	fae58593          	addi	a1,a1,-82 # 80022b40 <__func__.2+0x2d8>
    8001fb9a:	00003517          	auipc	a0,0x3
    8001fb9e:	fe650513          	addi	a0,a0,-26 # 80022b80 <__func__.2+0x318>
    8001fba2:	0ce010ef          	jal	80020c70 <printf>
    8001fba6:	00003517          	auipc	a0,0x3
    8001fbaa:	fe250513          	addi	a0,a0,-30 # 80022b88 <__func__.2+0x320>
    8001fbae:	0c2010ef          	jal	80020c70 <printf>
    8001fbb2:	864a                	mv	a2,s2
    8001fbb4:	4681                	li	a3,0
    8001fbb6:	02d00593          	li	a1,45
    8001fbba:	00003517          	auipc	a0,0x3
    8001fbbe:	34e50513          	addi	a0,a0,846 # 80022f08 <__func__.2+0x6a0>
    8001fbc2:	0ae010ef          	jal	80020c70 <printf>
    8001fbc6:	02900513          	li	a0,41
    8001fbca:	736000ef          	jal	80020300 <putchar>
    8001fbce:	4529                	li	a0,10
    8001fbd0:	730000ef          	jal	80020300 <putchar>
    8001fbd4:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8001fbd6:	14402973          	csrr	s2,sip
    8001fbda:	00003617          	auipc	a2,0x3
    8001fbde:	34660613          	addi	a2,a2,838 # 80022f20 <__func__.2+0x6b8>
    8001fbe2:	08200593          	li	a1,130
    8001fbe6:	00003517          	auipc	a0,0x3
    8001fbea:	f8250513          	addi	a0,a0,-126 # 80022b68 <__func__.2+0x300>
    8001fbee:	082010ef          	jal	80020c70 <printf>
    8001fbf2:	58090163          	beqz	s2,80020174 <mix_instruction_1+0xc90>
    8001fbf6:	00003597          	auipc	a1,0x3
    8001fbfa:	f4a58593          	addi	a1,a1,-182 # 80022b40 <__func__.2+0x2d8>
    8001fbfe:	00003517          	auipc	a0,0x3
    8001fc02:	f8250513          	addi	a0,a0,-126 # 80022b80 <__func__.2+0x318>
    8001fc06:	06a010ef          	jal	80020c70 <printf>
    8001fc0a:	00003517          	auipc	a0,0x3
    8001fc0e:	f7e50513          	addi	a0,a0,-130 # 80022b88 <__func__.2+0x320>
    8001fc12:	05e010ef          	jal	80020c70 <printf>
    8001fc16:	864a                	mv	a2,s2
    8001fc18:	4681                	li	a3,0
    8001fc1a:	02d00593          	li	a1,45
    8001fc1e:	00003517          	auipc	a0,0x3
    8001fc22:	2ea50513          	addi	a0,a0,746 # 80022f08 <__func__.2+0x6a0>
    8001fc26:	04a010ef          	jal	80020c70 <printf>
    8001fc2a:	02900513          	li	a0,41
    8001fc2e:	6d2000ef          	jal	80020300 <putchar>
    8001fc32:	4529                	li	a0,10
    8001fc34:	6cc000ef          	jal	80020300 <putchar>
    8001fc38:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8001fc3a:	24402973          	csrr	s2,vsip
    8001fc3e:	00003617          	auipc	a2,0x3
    8001fc42:	2b260613          	addi	a2,a2,690 # 80022ef0 <__func__.2+0x688>
    8001fc46:	08200593          	li	a1,130
    8001fc4a:	00003517          	auipc	a0,0x3
    8001fc4e:	f1e50513          	addi	a0,a0,-226 # 80022b68 <__func__.2+0x300>
    8001fc52:	01e010ef          	jal	80020c70 <printf>
    8001fc56:	50090163          	beqz	s2,80020158 <mix_instruction_1+0xc74>
    8001fc5a:	00003597          	auipc	a1,0x3
    8001fc5e:	ee658593          	addi	a1,a1,-282 # 80022b40 <__func__.2+0x2d8>
    8001fc62:	00003517          	auipc	a0,0x3
    8001fc66:	f1e50513          	addi	a0,a0,-226 # 80022b80 <__func__.2+0x318>
    8001fc6a:	006010ef          	jal	80020c70 <printf>
    8001fc6e:	00003517          	auipc	a0,0x3
    8001fc72:	f1a50513          	addi	a0,a0,-230 # 80022b88 <__func__.2+0x320>
    8001fc76:	7fb000ef          	jal	80020c70 <printf>
    8001fc7a:	864a                	mv	a2,s2
    8001fc7c:	4681                	li	a3,0
    8001fc7e:	02d00593          	li	a1,45
    8001fc82:	00003517          	auipc	a0,0x3
    8001fc86:	28650513          	addi	a0,a0,646 # 80022f08 <__func__.2+0x6a0>
    8001fc8a:	7e7000ef          	jal	80020c70 <printf>
    8001fc8e:	02900513          	li	a0,41
    8001fc92:	66e000ef          	jal	80020300 <putchar>
    8001fc96:	4529                	li	a0,10
    8001fc98:	668000ef          	jal	80020300 <putchar>
    8001fc9c:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8001fc9e:	4509                	li	a0,2
    8001fca0:	e39e00ef          	jal	80000ad8 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8001fca4:	14402973          	csrr	s2,sip
    8001fca8:	00003617          	auipc	a2,0x3
    8001fcac:	28060613          	addi	a2,a2,640 # 80022f28 <__func__.2+0x6c0>
    8001fcb0:	08200593          	li	a1,130
    8001fcb4:	00003517          	auipc	a0,0x3
    8001fcb8:	eb450513          	addi	a0,a0,-332 # 80022b68 <__func__.2+0x300>
    8001fcbc:	7b5000ef          	jal	80020c70 <printf>
    8001fcc0:	46090e63          	beqz	s2,8002013c <mix_instruction_1+0xc58>
    8001fcc4:	00003597          	auipc	a1,0x3
    8001fcc8:	e7c58593          	addi	a1,a1,-388 # 80022b40 <__func__.2+0x2d8>
    8001fccc:	00003517          	auipc	a0,0x3
    8001fcd0:	eb450513          	addi	a0,a0,-332 # 80022b80 <__func__.2+0x318>
    8001fcd4:	79d000ef          	jal	80020c70 <printf>
    8001fcd8:	00003517          	auipc	a0,0x3
    8001fcdc:	eb050513          	addi	a0,a0,-336 # 80022b88 <__func__.2+0x320>
    8001fce0:	791000ef          	jal	80020c70 <printf>
    8001fce4:	864a                	mv	a2,s2
    8001fce6:	4681                	li	a3,0
    8001fce8:	02d00593          	li	a1,45
    8001fcec:	00003517          	auipc	a0,0x3
    8001fcf0:	21c50513          	addi	a0,a0,540 # 80022f08 <__func__.2+0x6a0>
    8001fcf4:	77d000ef          	jal	80020c70 <printf>
    8001fcf8:	02900513          	li	a0,41
    8001fcfc:	604000ef          	jal	80020300 <putchar>
    8001fd00:	4529                	li	a0,10
    8001fd02:	5fe000ef          	jal	80020300 <putchar>
    8001fd06:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    8001fd08:	4511                	li	a0,4
    8001fd0a:	dcfe00ef          	jal	80000ad8 <goto_priv>

//----------------------------------------------------------------------
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    8001fd0e:	0330000f          	fence	rw,rw
    8001fd12:	4785                	li	a5,1
    8001fd14:	00025717          	auipc	a4,0x25
    8001fd18:	32073a23          	sd	zero,820(a4) # 80045048 <excpt+0x38>
    8001fd1c:	00f49023          	sh	a5,0(s1)
    8001fd20:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001fd24:	450d                	li	a0,3
    8001fd26:	db3e00ef          	jal	80000ad8 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8001fd2a:	18005073          	csrwi	satp,0
    asm volatile(
    8001fd2e:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    8001fd32:	00025597          	auipc	a1,0x25
    8001fd36:	2df5c583          	lbu	a1,735(a1) # 80045011 <excpt+0x1>
    8001fd3a:	00006517          	auipc	a0,0x6
    8001fd3e:	b4650513          	addi	a0,a0,-1210 # 80025880 <__func__.2+0x3018>
    8001fd42:	72f000ef          	jal	80020c70 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8001fd46:	08200593          	li	a1,130
    8001fd4a:	00006617          	auipc	a2,0x6
    8001fd4e:	b3e60613          	addi	a2,a2,-1218 # 80025888 <__func__.2+0x3020>
    8001fd52:	00003517          	auipc	a0,0x3
    8001fd56:	e1650513          	addi	a0,a0,-490 # 80022b68 <__func__.2+0x300>
    8001fd5a:	717000ef          	jal	80020c70 <printf>
    8001fd5e:	00025797          	auipc	a5,0x25
    8001fd62:	2b37c783          	lbu	a5,691(a5) # 80045011 <excpt+0x1>
    8001fd66:	00003597          	auipc	a1,0x3
    8001fd6a:	dda58593          	addi	a1,a1,-550 # 80022b40 <__func__.2+0x2d8>
    8001fd6e:	cf89                	beqz	a5,8001fd88 <mix_instruction_1+0x8a4>
    8001fd70:	6498                	ld	a4,8(s1)
    8001fd72:	4789                	li	a5,2
    8001fd74:	00003597          	auipc	a1,0x3
    8001fd78:	dbc58593          	addi	a1,a1,-580 # 80022b30 <__func__.2+0x2c8>
    8001fd7c:	00f70663          	beq	a4,a5,8001fd88 <mix_instruction_1+0x8a4>
    8001fd80:	00003597          	auipc	a1,0x3
    8001fd84:	dc058593          	addi	a1,a1,-576 # 80022b40 <__func__.2+0x2d8>
    8001fd88:	00003517          	auipc	a0,0x3
    8001fd8c:	df850513          	addi	a0,a0,-520 # 80022b80 <__func__.2+0x318>
    8001fd90:	6e1000ef          	jal	80020c70 <printf>
    8001fd94:	00025797          	auipc	a5,0x25
    8001fd98:	27d7c783          	lbu	a5,637(a5) # 80045011 <excpt+0x1>
    8001fd9c:	c789                	beqz	a5,8001fda6 <mix_instruction_1+0x8c2>
    8001fd9e:	6498                	ld	a4,8(s1)
    8001fda0:	4789                	li	a5,2
    8001fda2:	00f70c63          	beq	a4,a5,8001fdba <mix_instruction_1+0x8d6>
    8001fda6:	00003517          	auipc	a0,0x3
    8001fdaa:	de250513          	addi	a0,a0,-542 # 80022b88 <__func__.2+0x320>
    8001fdae:	6c3000ef          	jal	80020c70 <printf>
    8001fdb2:	02900513          	li	a0,41
    8001fdb6:	54a000ef          	jal	80020300 <putchar>
    8001fdba:	4529                	li	a0,10
    8001fdbc:	544000ef          	jal	80020300 <putchar>
    8001fdc0:	c801                	beqz	s0,8001fdd0 <mix_instruction_1+0x8ec>
    8001fdc2:	00025797          	auipc	a5,0x25
    8001fdc6:	24f7c783          	lbu	a5,591(a5) # 80045011 <excpt+0x1>
    8001fdca:	4401                	li	s0,0
    8001fdcc:	48079463          	bnez	a5,80020254 <mix_instruction_1+0xd70>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 
//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    8001fdd0:	4509                	li	a0,2
    8001fdd2:	d07e00ef          	jal	80000ad8 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001fdd6:	0330000f          	fence	rw,rw
    8001fdda:	4785                	li	a5,1
    8001fddc:	00025717          	auipc	a4,0x25
    8001fde0:	26073623          	sd	zero,620(a4) # 80045048 <excpt+0x38>
    8001fde4:	00f49023          	sh	a5,0(s1)
    8001fde8:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001fdec:	400137b7          	lui	a5,0x40013
    8001fdf0:	078a                	slli	a5,a5,0x2
    8001fdf2:	00000297          	auipc	t0,0x0
    8001fdf6:	00c28293          	addi	t0,t0,12 # 8001fdfe <mix_instruction_1+0x91a>
    8001fdfa:	0254bc23          	sd	t0,56(s1)
    8001fdfe:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001fe00:	08200593          	li	a1,130
    8001fe04:	00008617          	auipc	a2,0x8
    8001fe08:	73c60613          	addi	a2,a2,1852 # 80028540 <__func__.2+0x5cd8>
    8001fe0c:	00003517          	auipc	a0,0x3
    8001fe10:	d5c50513          	addi	a0,a0,-676 # 80022b68 <__func__.2+0x300>
    8001fe14:	65d000ef          	jal	80020c70 <printf>
    8001fe18:	00025797          	auipc	a5,0x25
    8001fe1c:	1f97c783          	lbu	a5,505(a5) # 80045011 <excpt+0x1>
    8001fe20:	00003597          	auipc	a1,0x3
    8001fe24:	d2058593          	addi	a1,a1,-736 # 80022b40 <__func__.2+0x2d8>
    8001fe28:	cf89                	beqz	a5,8001fe42 <mix_instruction_1+0x95e>
    8001fe2a:	6498                	ld	a4,8(s1)
    8001fe2c:	47d1                	li	a5,20
    8001fe2e:	00003597          	auipc	a1,0x3
    8001fe32:	d0258593          	addi	a1,a1,-766 # 80022b30 <__func__.2+0x2c8>
    8001fe36:	00f70663          	beq	a4,a5,8001fe42 <mix_instruction_1+0x95e>
    8001fe3a:	00003597          	auipc	a1,0x3
    8001fe3e:	d0658593          	addi	a1,a1,-762 # 80022b40 <__func__.2+0x2d8>
    8001fe42:	00003517          	auipc	a0,0x3
    8001fe46:	d3e50513          	addi	a0,a0,-706 # 80022b80 <__func__.2+0x318>
    8001fe4a:	627000ef          	jal	80020c70 <printf>
    8001fe4e:	00025797          	auipc	a5,0x25
    8001fe52:	1c37c783          	lbu	a5,451(a5) # 80045011 <excpt+0x1>
    8001fe56:	c789                	beqz	a5,8001fe60 <mix_instruction_1+0x97c>
    8001fe58:	6498                	ld	a4,8(s1)
    8001fe5a:	47d1                	li	a5,20
    8001fe5c:	00f70c63          	beq	a4,a5,8001fe74 <mix_instruction_1+0x990>
    8001fe60:	00003517          	auipc	a0,0x3
    8001fe64:	d2850513          	addi	a0,a0,-728 # 80022b88 <__func__.2+0x320>
    8001fe68:	609000ef          	jal	80020c70 <printf>
    8001fe6c:	02900513          	li	a0,41
    8001fe70:	490000ef          	jal	80020300 <putchar>
    8001fe74:	4529                	li	a0,10
    8001fe76:	48a000ef          	jal	80020300 <putchar>
    8001fe7a:	c801                	beqz	s0,8001fe8a <mix_instruction_1+0x9a6>
    8001fe7c:	00025797          	auipc	a5,0x25
    8001fe80:	1957c783          	lbu	a5,405(a5) # 80045011 <excpt+0x1>
    8001fe84:	4401                	li	s0,0
    8001fe86:	3c079263          	bnez	a5,8002024a <mix_instruction_1+0xd66>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    8001fe8a:	0330000f          	fence	rw,rw
    8001fe8e:	4905                	li	s2,1
    8001fe90:	00025797          	auipc	a5,0x25
    8001fe94:	1a07bc23          	sd	zero,440(a5) # 80045048 <excpt+0x38>
    8001fe98:	01249023          	sh	s2,0(s1)
    8001fe9c:	0330000f          	fence	rw,rw
    
    
    hspt_init();        
    8001fea0:	f40e00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8001fea4:	450d                	li	a0,3
    8001fea6:	c33e00ef          	jal	80000ad8 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8001feaa:	0330000f          	fence	rw,rw
    8001feae:	00025797          	auipc	a5,0x25
    8001feb2:	1807bd23          	sd	zero,410(a5) # 80045048 <excpt+0x38>
    8001feb6:	01249023          	sh	s2,0(s1)
    8001feba:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001febe:	001007b7          	lui	a5,0x100
    8001fec2:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8001fec6:	07b2                	slli	a5,a5,0xc
    8001fec8:	97ca                	add	a5,a5,s2
    8001feca:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8001fece:	08200593          	li	a1,130
    8001fed2:	00005617          	auipc	a2,0x5
    8001fed6:	31660613          	addi	a2,a2,790 # 800251e8 <__func__.2+0x2980>
    8001feda:	00003517          	auipc	a0,0x3
    8001fede:	c8e50513          	addi	a0,a0,-882 # 80022b68 <__func__.2+0x300>
    8001fee2:	58f000ef          	jal	80020c70 <printf>
    8001fee6:	00025797          	auipc	a5,0x25
    8001feea:	12b7c783          	lbu	a5,299(a5) # 80045011 <excpt+0x1>
    8001feee:	00003597          	auipc	a1,0x3
    8001fef2:	c5258593          	addi	a1,a1,-942 # 80022b40 <__func__.2+0x2d8>
    8001fef6:	e789                	bnez	a5,8001ff00 <mix_instruction_1+0xa1c>
    8001fef8:	00003597          	auipc	a1,0x3
    8001fefc:	c3858593          	addi	a1,a1,-968 # 80022b30 <__func__.2+0x2c8>
    8001ff00:	00003517          	auipc	a0,0x3
    8001ff04:	c8050513          	addi	a0,a0,-896 # 80022b80 <__func__.2+0x318>
    8001ff08:	569000ef          	jal	80020c70 <printf>
    8001ff0c:	00025797          	auipc	a5,0x25
    8001ff10:	1057c783          	lbu	a5,261(a5) # 80045011 <excpt+0x1>
    8001ff14:	38079b63          	bnez	a5,800202aa <mix_instruction_1+0xdc6>
    8001ff18:	4529                	li	a0,10
    8001ff1a:	3e6000ef          	jal	80020300 <putchar>
    8001ff1e:	c419                	beqz	s0,8001ff2c <mix_instruction_1+0xa48>
    8001ff20:	00025417          	auipc	s0,0x25
    8001ff24:	0f144403          	lbu	s0,241(s0) # 80045011 <excpt+0x1>
    8001ff28:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    8001ff2c:	4511                	li	a0,4
    8001ff2e:	babe00ef          	jal	80000ad8 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ff32:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ff36:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ff3a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ff3e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ff42:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ff46:	10000793          	li	a5,256
    8001ff4a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ff4e:	20000793          	li	a5,512
    8001ff52:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ff56:	40000793          	li	a5,1024
    8001ff5a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ff5e:	6785                	lui	a5,0x1
    8001ff60:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ff64:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ff68:	4785                	li	a5,1
    8001ff6a:	07fe                	slli	a5,a5,0x1f
    8001ff6c:	4905                	li	s2,1
    8001ff6e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ff72:	08100793          	li	a5,129
    8001ff76:	07e2                	slli	a5,a5,0x18
    8001ff78:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ff7c:	08000793          	li	a5,128
    8001ff80:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ff84:	67a1                	lui	a5,0x8
    8001ff86:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001ff8a:	854a                	mv	a0,s2
    8001ff8c:	b4de00ef          	jal	80000ad8 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ff90:	0330000f          	fence	rw,rw
    8001ff94:	00025797          	auipc	a5,0x25
    8001ff98:	0a07ba23          	sd	zero,180(a5) # 80045048 <excpt+0x38>
    8001ff9c:	01249023          	sh	s2,0(s1)
    8001ffa0:	0330000f          	fence	rw,rw
    8001ffa4:	02191793          	slli	a5,s2,0x21
    8001ffa8:	40078793          	addi	a5,a5,1024
    8001ffac:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001ffb0:	08200593          	li	a1,130
    8001ffb4:	00008617          	auipc	a2,0x8
    8001ffb8:	6cc60613          	addi	a2,a2,1740 # 80028680 <__func__.2+0x5e18>
    8001ffbc:	00003517          	auipc	a0,0x3
    8001ffc0:	bac50513          	addi	a0,a0,-1108 # 80022b68 <__func__.2+0x300>
    8001ffc4:	4ad000ef          	jal	80020c70 <printf>
    8001ffc8:	00025797          	auipc	a5,0x25
    8001ffcc:	0497c783          	lbu	a5,73(a5) # 80045011 <excpt+0x1>
    8001ffd0:	00003597          	auipc	a1,0x3
    8001ffd4:	b7058593          	addi	a1,a1,-1168 # 80022b40 <__func__.2+0x2d8>
    8001ffd8:	cf89                	beqz	a5,8001fff2 <mix_instruction_1+0xb0e>
    8001ffda:	6498                	ld	a4,8(s1)
    8001ffdc:	4795                	li	a5,5
    8001ffde:	00003597          	auipc	a1,0x3
    8001ffe2:	b5258593          	addi	a1,a1,-1198 # 80022b30 <__func__.2+0x2c8>
    8001ffe6:	00f70663          	beq	a4,a5,8001fff2 <mix_instruction_1+0xb0e>
    8001ffea:	00003597          	auipc	a1,0x3
    8001ffee:	b5658593          	addi	a1,a1,-1194 # 80022b40 <__func__.2+0x2d8>
    8001fff2:	00003517          	auipc	a0,0x3
    8001fff6:	b8e50513          	addi	a0,a0,-1138 # 80022b80 <__func__.2+0x318>
    8001fffa:	477000ef          	jal	80020c70 <printf>
    8001fffe:	00025797          	auipc	a5,0x25
    80020002:	0137c783          	lbu	a5,19(a5) # 80045011 <excpt+0x1>
    80020006:	c789                	beqz	a5,80020010 <mix_instruction_1+0xb2c>
    80020008:	6498                	ld	a4,8(s1)
    8002000a:	4795                	li	a5,5
    8002000c:	00f70c63          	beq	a4,a5,80020024 <mix_instruction_1+0xb40>
    80020010:	00003517          	auipc	a0,0x3
    80020014:	b7850513          	addi	a0,a0,-1160 # 80022b88 <__func__.2+0x320>
    80020018:	459000ef          	jal	80020c70 <printf>
    8002001c:	02900513          	li	a0,41
    80020020:	2e0000ef          	jal	80020300 <putchar>
    80020024:	4529                	li	a0,10
    80020026:	2da000ef          	jal	80020300 <putchar>
    8002002a:	c801                	beqz	s0,8002003a <mix_instruction_1+0xb56>
    8002002c:	00025797          	auipc	a5,0x25
    80020030:	fe57c783          	lbu	a5,-27(a5) # 80045011 <excpt+0x1>
    80020034:	4401                	li	s0,0
    80020036:	1e079363          	bnez	a5,8002021c <mix_instruction_1+0xd38>
        excpt.cause == CAUSE_LAF
    );

//----------------------------------------------------------------------
    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8002003a:	4511                	li	a0,4
    8002003c:	a9de00ef          	jal	80000ad8 <goto_priv>
    reset_state();
    80020040:	b68e10ef          	jal	800013a8 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    80020044:	57fd                	li	a5,-1
    80020046:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8002004a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8002004e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80020052:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    80020056:	4505                	li	a0,1
    80020058:	a81e00ef          	jal	80000ad8 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8002005c:	0330000f          	fence	rw,rw
    80020060:	4905                	li	s2,1
    80020062:	00025797          	auipc	a5,0x25
    80020066:	fe07b323          	sd	zero,-26(a5) # 80045048 <excpt+0x38>
    8002006a:	01249023          	sh	s2,0(s1)
    8002006e:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    80020072:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80020076:	08200593          	li	a1,130
    8002007a:	00005617          	auipc	a2,0x5
    8002007e:	efe60613          	addi	a2,a2,-258 # 80024f78 <__func__.2+0x2710>
    80020082:	00003517          	auipc	a0,0x3
    80020086:	ae650513          	addi	a0,a0,-1306 # 80022b68 <__func__.2+0x300>
    8002008a:	3e7000ef          	jal	80020c70 <printf>
    8002008e:	6094                	ld	a3,0(s1)
    80020090:	f0001737          	lui	a4,0xf0001
    80020094:	0712                	slli	a4,a4,0x4
    80020096:	478d                	li	a5,3
    80020098:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8002009c:	1782                	slli	a5,a5,0x20
    8002009e:	8f75                	and	a4,a4,a3
    800200a0:	10078793          	addi	a5,a5,256
    800200a4:	00003597          	auipc	a1,0x3
    800200a8:	a9c58593          	addi	a1,a1,-1380 # 80022b40 <__func__.2+0x2d8>
    800200ac:	1ef70063          	beq	a4,a5,8002028c <mix_instruction_1+0xda8>
    800200b0:	00003517          	auipc	a0,0x3
    800200b4:	ad050513          	addi	a0,a0,-1328 # 80022b80 <__func__.2+0x318>
    800200b8:	3b9000ef          	jal	80020c70 <printf>
    800200bc:	00025797          	auipc	a5,0x25
    800200c0:	f557c783          	lbu	a5,-171(a5) # 80045011 <excpt+0x1>
    800200c4:	cb81                	beqz	a5,800200d4 <mix_instruction_1+0xbf0>
    800200c6:	00025717          	auipc	a4,0x25
    800200ca:	f4e72703          	lw	a4,-178(a4) # 80045014 <excpt+0x4>
    800200ce:	478d                	li	a5,3
    800200d0:	18f70763          	beq	a4,a5,8002025e <mix_instruction_1+0xd7a>
    800200d4:	00003517          	auipc	a0,0x3
    800200d8:	ab450513          	addi	a0,a0,-1356 # 80022b88 <__func__.2+0x320>
    800200dc:	395000ef          	jal	80020c70 <printf>
    800200e0:	02900513          	li	a0,41
    800200e4:	21c000ef          	jal	80020300 <putchar>
    800200e8:	4529                	li	a0,10
    800200ea:	216000ef          	jal	80020300 <putchar>
    800200ee:	10040b63          	beqz	s0,80020204 <mix_instruction_1+0xd20>
    800200f2:	6094                	ld	a3,0(s1)
    800200f4:	f0001737          	lui	a4,0xf0001
    800200f8:	0712                	slli	a4,a4,0x4
    800200fa:	478d                	li	a5,3
    800200fc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80020100:	1782                	slli	a5,a5,0x20
    80020102:	8f75                	and	a4,a4,a3
    80020104:	10078793          	addi	a5,a5,256
    80020108:	4401                	li	s0,0
    );
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------

    TEST_END();
    8002010a:	00003597          	auipc	a1,0x3
    8002010e:	a3658593          	addi	a1,a1,-1482 # 80022b40 <__func__.2+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80020112:	1cf70363          	beq	a4,a5,800202d8 <mix_instruction_1+0xdf4>
    TEST_END();
    80020116:	00003517          	auipc	a0,0x3
    8002011a:	ad250513          	addi	a0,a0,-1326 # 80022be8 <__func__.2+0x380>
    8002011e:	353000ef          	jal	80020c70 <printf>
    80020122:	4511                	li	a0,4
    80020124:	9b5e00ef          	jal	80000ad8 <goto_priv>
    80020128:	a80e10ef          	jal	800013a8 <reset_state>

    8002012c:	70a2                	ld	ra,40(sp)
    8002012e:	8522                	mv	a0,s0
    80020130:	7402                	ld	s0,32(sp)
    80020132:	64e2                	ld	s1,24(sp)
    80020134:	6942                	ld	s2,16(sp)
    80020136:	69a2                	ld	s3,8(sp)
    80020138:	6145                	addi	sp,sp,48
    8002013a:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8002013c:	00003597          	auipc	a1,0x3
    80020140:	9f458593          	addi	a1,a1,-1548 # 80022b30 <__func__.2+0x2c8>
    80020144:	00003517          	auipc	a0,0x3
    80020148:	a3c50513          	addi	a0,a0,-1476 # 80022b80 <__func__.2+0x318>
    8002014c:	325000ef          	jal	80020c70 <printf>
    80020150:	4529                	li	a0,10
    80020152:	1ae000ef          	jal	80020300 <putchar>
    80020156:	be4d                	j	8001fd08 <mix_instruction_1+0x824>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80020158:	00003597          	auipc	a1,0x3
    8002015c:	9d858593          	addi	a1,a1,-1576 # 80022b30 <__func__.2+0x2c8>
    80020160:	00003517          	auipc	a0,0x3
    80020164:	a2050513          	addi	a0,a0,-1504 # 80022b80 <__func__.2+0x318>
    80020168:	309000ef          	jal	80020c70 <printf>
    8002016c:	4529                	li	a0,10
    8002016e:	192000ef          	jal	80020300 <putchar>
    80020172:	b635                	j	8001fc9e <mix_instruction_1+0x7ba>
    check_csr_rd("sip", sip, 0x0);
    80020174:	00003597          	auipc	a1,0x3
    80020178:	9bc58593          	addi	a1,a1,-1604 # 80022b30 <__func__.2+0x2c8>
    8002017c:	00003517          	auipc	a0,0x3
    80020180:	a0450513          	addi	a0,a0,-1532 # 80022b80 <__func__.2+0x318>
    80020184:	2ed000ef          	jal	80020c70 <printf>
    80020188:	4529                	li	a0,10
    8002018a:	176000ef          	jal	80020300 <putchar>
    8002018e:	b475                	j	8001fc3a <mix_instruction_1+0x756>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80020190:	00003597          	auipc	a1,0x3
    80020194:	9a058593          	addi	a1,a1,-1632 # 80022b30 <__func__.2+0x2c8>
    80020198:	00003517          	auipc	a0,0x3
    8002019c:	9e850513          	addi	a0,a0,-1560 # 80022b80 <__func__.2+0x318>
    800201a0:	2d1000ef          	jal	80020c70 <printf>
    800201a4:	4529                	li	a0,10
    800201a6:	15a000ef          	jal	80020300 <putchar>
    800201aa:	b435                	j	8001fbd6 <mix_instruction_1+0x6f2>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    800201ac:	00003597          	auipc	a1,0x3
    800201b0:	98458593          	addi	a1,a1,-1660 # 80022b30 <__func__.2+0x2c8>
    800201b4:	00003517          	auipc	a0,0x3
    800201b8:	9cc50513          	addi	a0,a0,-1588 # 80022b80 <__func__.2+0x318>
    800201bc:	2b5000ef          	jal	80020c70 <printf>
    800201c0:	4529                	li	a0,10
    800201c2:	13e000ef          	jal	80020300 <putchar>
    800201c6:	b24d                	j	8001fb68 <mix_instruction_1+0x684>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800201c8:	00003597          	auipc	a1,0x3
    800201cc:	96858593          	addi	a1,a1,-1688 # 80022b30 <__func__.2+0x2c8>
    800201d0:	00003517          	auipc	a0,0x3
    800201d4:	9b050513          	addi	a0,a0,-1616 # 80022b80 <__func__.2+0x318>
    800201d8:	299000ef          	jal	80020c70 <printf>
    800201dc:	4529                	li	a0,10
    800201de:	122000ef          	jal	80020300 <putchar>
    800201e2:	91bff06f          	j	8001fafc <mix_instruction_1+0x618>
    check_csr_rd("sip", sip, 0x222);    
    800201e6:	00003597          	auipc	a1,0x3
    800201ea:	94a58593          	addi	a1,a1,-1718 # 80022b30 <__func__.2+0x2c8>
    800201ee:	00003517          	auipc	a0,0x3
    800201f2:	99250513          	addi	a0,a0,-1646 # 80022b80 <__func__.2+0x318>
    800201f6:	27b000ef          	jal	80020c70 <printf>
    800201fa:	4529                	li	a0,10
    800201fc:	104000ef          	jal	80020300 <putchar>
    80020200:	897ff06f          	j	8001fa96 <mix_instruction_1+0x5b2>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80020204:	4401                	li	s0,0
    TEST_END();
    80020206:	00003597          	auipc	a1,0x3
    8002020a:	93a58593          	addi	a1,a1,-1734 # 80022b40 <__func__.2+0x2d8>
    8002020e:	b721                	j	80020116 <mix_instruction_1+0xc32>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80020210:	6480                	ld	s0,8(s1)
    80020212:	1479                	addi	s0,s0,-2
    80020214:	00143413          	seqz	s0,s0
    80020218:	c76ff06f          	j	8001f68e <mix_instruction_1+0x1aa>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8002021c:	6480                	ld	s0,8(s1)
    8002021e:	146d                	addi	s0,s0,-5
    80020220:	00143413          	seqz	s0,s0
    80020224:	bd19                	j	8002003a <mix_instruction_1+0xb56>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80020226:	6480                	ld	s0,8(s1)
    80020228:	1445                	addi	s0,s0,-15
    8002022a:	00143413          	seqz	s0,s0
    8002022e:	f7eff06f          	j	8001f9ac <mix_instruction_1+0x4c8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80020232:	6480                	ld	s0,8(s1)
    80020234:	144d                	addi	s0,s0,-13
    80020236:	00143413          	seqz	s0,s0
    8002023a:	e84ff06f          	j	8001f8be <mix_instruction_1+0x3da>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8002023e:	6480                	ld	s0,8(s1)
    80020240:	1429                	addi	s0,s0,-22
    80020242:	00143413          	seqz	s0,s0
    80020246:	d08ff06f          	j	8001f74e <mix_instruction_1+0x26a>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8002024a:	6480                	ld	s0,8(s1)
    8002024c:	1431                	addi	s0,s0,-20
    8002024e:	00143413          	seqz	s0,s0
    80020252:	b925                	j	8001fe8a <mix_instruction_1+0x9a6>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80020254:	6480                	ld	s0,8(s1)
    80020256:	1479                	addi	s0,s0,-2
    80020258:	00143413          	seqz	s0,s0
    8002025c:	be95                	j	8001fdd0 <mix_instruction_1+0x8ec>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8002025e:	0000c717          	auipc	a4,0xc
    80020262:	26e72703          	lw	a4,622(a4) # 8002c4cc <curr_priv>
    80020266:	4785                	li	a5,1
    80020268:	e6f716e3          	bne	a4,a5,800200d4 <mix_instruction_1+0xbf0>
    8002026c:	bdb5                	j	800200e8 <mix_instruction_1+0xc04>
    check_csr_rd("hip", CSR_HIP, 0x4);
    8002026e:	00003597          	auipc	a1,0x3
    80020272:	8c258593          	addi	a1,a1,-1854 # 80022b30 <__func__.2+0x2c8>
    80020276:	00003517          	auipc	a0,0x3
    8002027a:	90a50513          	addi	a0,a0,-1782 # 80022b80 <__func__.2+0x318>
    8002027e:	1f3000ef          	jal	80020c70 <printf>
    80020282:	4529                	li	a0,10
    80020284:	07c000ef          	jal	80020300 <putchar>
    80020288:	fa6ff06f          	j	8001fa2e <mix_instruction_1+0x54a>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8002028c:	0000c797          	auipc	a5,0xc
    80020290:	2407a783          	lw	a5,576(a5) # 8002c4cc <curr_priv>
    80020294:	00003597          	auipc	a1,0x3
    80020298:	89c58593          	addi	a1,a1,-1892 # 80022b30 <__func__.2+0x2c8>
    8002029c:	e1278ae3          	beq	a5,s2,800200b0 <mix_instruction_1+0xbcc>
    800202a0:	00003597          	auipc	a1,0x3
    800202a4:	8a058593          	addi	a1,a1,-1888 # 80022b40 <__func__.2+0x2d8>
    800202a8:	b521                	j	800200b0 <mix_instruction_1+0xbcc>
    TEST_ASSERT("load byte address is not aligned successful",         
    800202aa:	00003517          	auipc	a0,0x3
    800202ae:	8de50513          	addi	a0,a0,-1826 # 80022b88 <__func__.2+0x320>
    800202b2:	1bf000ef          	jal	80020c70 <printf>
    800202b6:	02900513          	li	a0,41
    800202ba:	046000ef          	jal	80020300 <putchar>
    800202be:	b9a9                	j	8001ff18 <mix_instruction_1+0xa34>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800202c0:	00003517          	auipc	a0,0x3
    800202c4:	8c850513          	addi	a0,a0,-1848 # 80022b88 <__func__.2+0x320>
    800202c8:	1a9000ef          	jal	80020c70 <printf>
    800202cc:	02900513          	li	a0,41
    800202d0:	030000ef          	jal	80020300 <putchar>
    800202d4:	d18ff06f          	j	8001f7ec <mix_instruction_1+0x308>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800202d8:	0000c797          	auipc	a5,0xc
    800202dc:	1f47a783          	lw	a5,500(a5) # 8002c4cc <curr_priv>
    800202e0:	4705                	li	a4,1
    800202e2:	e2e79ae3          	bne	a5,a4,80020116 <mix_instruction_1+0xc32>
    800202e6:	843e                	mv	s0,a5
    TEST_END();
    800202e8:	00003597          	auipc	a1,0x3
    800202ec:	84858593          	addi	a1,a1,-1976 # 80022b30 <__func__.2+0x2c8>
    800202f0:	b51d                	j	80020116 <mix_instruction_1+0xc32>

00000000800202f2 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    800202f2:	619c                	ld	a5,0(a1)
    800202f4:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    800202f8:	619c                	ld	a5,0(a1)
    800202fa:	0785                	addi	a5,a5,1
    800202fc:	e19c                	sd	a5,0(a1)
  }
    800202fe:	8082                	ret

0000000080020300 <putchar>:
  uartlite_putchar(ch);
    80020300:	0ff57693          	zext.b	a3,a0
  if (ch == '\n') uartlite_putchar('\r');
    80020304:	47a9                	li	a5,10
    80020306:	0000c617          	auipc	a2,0xc
    8002030a:	1da60613          	addi	a2,a2,474 # 8002c4e0 <uartlite>
    8002030e:	00f68a63          	beq	a3,a5,80020322 <putchar+0x22>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020312:	6218                	ld	a4,0(a2)
    80020314:	00874783          	lbu	a5,8(a4)
    80020318:	8ba1                	andi	a5,a5,8
    8002031a:	ffed                	bnez	a5,80020314 <putchar+0x14>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002031c:	00d70223          	sb	a3,4(a4)
}
    80020320:	8082                	ret
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020322:	6218                	ld	a4,0(a2)
    80020324:	00874783          	lbu	a5,8(a4)
    80020328:	8ba1                	andi	a5,a5,8
    8002032a:	ffed                	bnez	a5,80020324 <putchar+0x24>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002032c:	47b5                	li	a5,13
    8002032e:	00f70223          	sb	a5,4(a4)
}
    80020332:	b7c5                	j	80020312 <putchar+0x12>

0000000080020334 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80020334:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    80020336:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    8002033a:	05500e93          	li	t4,85
    8002033e:	00002e17          	auipc	t3,0x2
    80020342:	53ee0e13          	addi	t3,t3,1342 # 8002287c <__func__.2+0x14>
    80020346:	a809                	j	80020358 <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    80020348:	c729                	beqz	a4,80020392 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    8002034a:	6118                	ld	a4,0(a0)
      fmt++;
    8002034c:	0585                	addi	a1,a1,1
    **pstr = ch;
    8002034e:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80020352:	611c                	ld	a5,0(a0)
    80020354:	0785                	addi	a5,a5,1
    80020356:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80020358:	0005c783          	lbu	a5,0(a1)
    8002035c:	0007871b          	sext.w	a4,a5
    80020360:	fe6794e3          	bne	a5,t1,80020348 <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    80020364:	0015c803          	lbu	a6,1(a1)
    fmt++;
    80020368:	00158893          	addi	a7,a1,1
    precision = -1;
    8002036c:	577d                	li	a4,-1
    fmt++;
    8002036e:	86c6                	mv	a3,a7
    width = -1;
    80020370:	8fba                	mv	t6,a4
    padc = ' ';
    80020372:	02000293          	li	t0,32
    lflag = 0;
    80020376:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    80020378:	fdd8079b          	addiw	a5,a6,-35 # fffffdd <STACK_SIZE+0xfefffdd>
    8002037c:	0ff7f793          	zext.b	a5,a5
    80020380:	00168593          	addi	a1,a3,1
    80020384:	02fee563          	bltu	t4,a5,800203ae <vprintfmt.constprop.0+0x7a>
    80020388:	078a                	slli	a5,a5,0x2
    8002038a:	97f2                	add	a5,a5,t3
    8002038c:	439c                	lw	a5,0(a5)
    8002038e:	97f2                	add	a5,a5,t3
    80020390:	8782                	jr	a5
}
    80020392:	6151                	addi	sp,sp,272
    80020394:	8082                	ret
      padc = '0';
    80020396:	82c2                	mv	t0,a6
      goto reswitch;
    80020398:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002039c:	86ae                	mv	a3,a1
    8002039e:	00168593          	addi	a1,a3,1
    800203a2:	fdd8079b          	addiw	a5,a6,-35
    800203a6:	0ff7f793          	zext.b	a5,a5
    800203aa:	fcfeffe3          	bgeu	t4,a5,80020388 <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    800203ae:	611c                	ld	a5,0(a0)
    800203b0:	02500713          	li	a4,37
      fmt = last_fmt;
    800203b4:	85c6                	mv	a1,a7
    **pstr = ch;
    800203b6:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    800203ba:	611c                	ld	a5,0(a0)
    800203bc:	0785                	addi	a5,a5,1
    800203be:	e11c                	sd	a5,0(a0)
  }
    800203c0:	bf61                	j	80020358 <vprintfmt.constprop.0+0x24>
    800203c2:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    800203c4:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    800203c8:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    800203cc:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    800203ce:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    800203d0:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    800203d4:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    800203d8:	02f46463          	bltu	s0,a5,80020400 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    800203dc:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    800203e0:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    800203e4:	9fb9                	addw	a5,a5,a4
    800203e6:	0017979b          	slliw	a5,a5,0x1
    800203ea:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    800203ee:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    800203f2:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    800203f4:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    800203f8:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    800203fc:	feb470e3          	bgeu	s0,a1,800203dc <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    80020400:	6432                	ld	s0,264(sp)
      if (width < 0)
    80020402:	f60fdbe3          	bgez	t6,80020378 <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    80020406:	8fba                	mv	t6,a4
    80020408:	577d                	li	a4,-1
    8002040a:	b7bd                	j	80020378 <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    8002040c:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80020410:	86ae                	mv	a3,a1
      goto reswitch;
    80020412:	b79d                	j	80020378 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80020414:	611c                	ld	a5,0(a0)
    80020416:	02500713          	li	a4,37
    8002041a:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002041e:	611c                	ld	a5,0(a0)
    80020420:	0785                	addi	a5,a5,1
    80020422:	e11c                	sd	a5,0(a0)
  }
    80020424:	bf15                	j	80020358 <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    80020426:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    8002042a:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    8002042c:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    8002042e:	0621                	addi	a2,a2,8
      goto process_precision;
    80020430:	bfc9                	j	80020402 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    80020432:	611c                	ld	a5,0(a0)
    80020434:	03000693          	li	a3,48
    80020438:	07800713          	li	a4,120
    8002043c:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80020440:	611c                	ld	a5,0(a0)
    80020442:	4841                	li	a6,16
    80020444:	00860693          	addi	a3,a2,8
    80020448:	00178893          	addi	a7,a5,1
    8002044c:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    80020450:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80020454:	611c                	ld	a5,0(a0)
    80020456:	0785                	addi	a5,a5,1
    80020458:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    8002045a:	6218                	ld	a4,0(a2)
    8002045c:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    8002045e:	03077f33          	remu	t5,a4,a6
    80020462:	00410893          	addi	a7,sp,4
    80020466:	4685                	li	a3,1
    80020468:	c07a                	sw	t5,0(sp)
    if (num < base)
    8002046a:	1b076c63          	bltu	a4,a6,80020622 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    8002046e:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    80020472:	83b6                	mv	t2,a3
    if (num < base)
    80020474:	0891                	addi	a7,a7,4 # 1004 <_test_table_size+0x1003>
    digs[pos++] = num % base;
    80020476:	2685                	addiw	a3,a3,1
    80020478:	03077f33          	remu	t5,a4,a6
    8002047c:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    80020480:	ff0777e3          	bgeu	a4,a6,8002046e <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    80020484:	ffff871b          	addiw	a4,t6,-1
    80020488:	fff6881b          	addiw	a6,a3,-1
    8002048c:	01f6da63          	bge	a3,t6,800204a0 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    80020490:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80020494:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    80020496:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    80020498:	0785                	addi	a5,a5,1
    8002049a:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8002049c:	fee81ae3          	bne	a6,a4,80020490 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    800204a0:	038a                	slli	t2,t2,0x2
    800204a2:	007106b3          	add	a3,sp,t2
    800204a6:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800204aa:	4825                	li	a6,9
    800204ac:	a819                	j	800204c2 <vprintfmt.constprop.0+0x18e>
    800204ae:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    800204b2:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    800204b6:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    800204b8:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    800204ba:	0785                	addi	a5,a5,1
    800204bc:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    800204be:	e8d88de3          	beq	a7,a3,80020358 <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800204c2:	4298                	lw	a4,0(a3)
    800204c4:	fee865e3          	bltu	a6,a4,800204ae <vprintfmt.constprop.0+0x17a>
    800204c8:	0307071b          	addiw	a4,a4,48
    800204cc:	b7dd                	j	800204b2 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    800204ce:	4785                	li	a5,1
      precision = va_arg(ap, int);
    800204d0:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    800204d4:	01e7c463          	blt	a5,t5,800204dc <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    800204d8:	140f0763          	beqz	t5,80020626 <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    800204dc:	6218                	ld	a4,0(a2)
    **pstr = ch;
    800204de:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    800204e0:	14074963          	bltz	a4,80020632 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    800204e4:	8636                	mv	a2,a3
    800204e6:	4829                	li	a6,10
    800204e8:	bf9d                	j	8002045e <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    800204ea:	0016c803          	lbu	a6,1(a3)
      lflag++;
    800204ee:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    800204f0:	86ae                	mv	a3,a1
      goto reswitch;
    800204f2:	b559                	j	80020378 <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    800204f4:	4841                	li	a6,16
  if (lflag >= 2)
    800204f6:	4705                	li	a4,1
    **pstr = ch;
    800204f8:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    800204fa:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    800204fe:	f5e74ee3          	blt	a4,t5,8002045a <vprintfmt.constprop.0+0x126>
  else if (lflag)
    80020502:	f40f1ce3          	bnez	t5,8002045a <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    80020506:	00066703          	lwu	a4,0(a2)
    8002050a:	8636                	mv	a2,a3
    8002050c:	bf89                	j	8002045e <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002050e:	6214                	ld	a3,0(a2)
    80020510:	ca99                	beqz	a3,80020526 <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    80020512:	07f05663          	blez	t6,8002057e <vprintfmt.constprop.0+0x24a>
    80020516:	02d00793          	li	a5,45
    8002051a:	02f29863          	bne	t0,a5,8002054a <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002051e:	0006c783          	lbu	a5,0(a3)
    80020522:	e3ad                	bnez	a5,80020584 <vprintfmt.constprop.0+0x250>
    80020524:	a879                	j	800205c2 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    80020526:	0000a697          	auipc	a3,0xa
    8002052a:	f7268693          	addi	a3,a3,-142 # 8002a498 <__func__.2+0x7c30>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002052e:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80020532:	05f05963          	blez	t6,80020584 <vprintfmt.constprop.0+0x250>
    80020536:	02d00813          	li	a6,45
        p = "(null)";
    8002053a:	0000a697          	auipc	a3,0xa
    8002053e:	f5e68693          	addi	a3,a3,-162 # 8002a498 <__func__.2+0x7c30>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80020542:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80020546:	03028f63          	beq	t0,a6,80020584 <vprintfmt.constprop.0+0x250>
  const char *p = s;
    8002054a:	87b6                	mv	a5,a3
  while (n-- && *p)
    8002054c:	00e688b3          	add	a7,a3,a4
    80020550:	e709                	bnez	a4,8002055a <vprintfmt.constprop.0+0x226>
    80020552:	a829                	j	8002056c <vprintfmt.constprop.0+0x238>
    p++;
    80020554:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80020556:	01178663          	beq	a5,a7,80020562 <vprintfmt.constprop.0+0x22e>
    8002055a:	0007c803          	lbu	a6,0(a5)
    8002055e:	fe081be3          	bnez	a6,80020554 <vprintfmt.constprop.0+0x220>
  return p - s;
    80020562:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80020564:	40ff8fbb          	subw	t6,t6,a5
    80020568:	01f05b63          	blez	t6,8002057e <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    8002056c:	611c                	ld	a5,0(a0)
    8002056e:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80020572:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80020574:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80020576:	0785                	addi	a5,a5,1
    80020578:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002057a:	fe0f9ae3          	bnez	t6,8002056e <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002057e:	0006c783          	lbu	a5,0(a3)
    80020582:	cbb9                	beqz	a5,800205d8 <vprintfmt.constprop.0+0x2a4>
    80020584:	58fd                	li	a7,-1
    80020586:	04075b63          	bgez	a4,800205dc <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    8002058a:	6118                	ld	a4,0(a0)
        p++;
    8002058c:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80020590:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80020592:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80020596:	611c                	ld	a5,0(a0)
    80020598:	8742                	mv	a4,a6
    8002059a:	0785                	addi	a5,a5,1
    8002059c:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002059e:	0016c683          	lbu	a3,1(a3)
    800205a2:	ce91                	beqz	a3,800205be <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    800205a4:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    800205a8:	611c                	ld	a5,0(a0)
        p++;
    800205aa:	0705                	addi	a4,a4,1
    (*pstr)++;
    800205ac:	0785                	addi	a5,a5,1
    800205ae:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800205b0:	00074683          	lbu	a3,0(a4)
    800205b4:	fae5                	bnez	a3,800205a4 <vprintfmt.constprop.0+0x270>
    800205b6:	40e8083b          	subw	a6,a6,a4
    800205ba:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    800205be:	01f05d63          	blez	t6,800205d8 <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    800205c2:	611c                	ld	a5,0(a0)
    800205c4:	02000713          	li	a4,32
    800205c8:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    800205cc:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    800205ce:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    800205d0:	0785                	addi	a5,a5,1
    800205d2:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    800205d4:	fe0f9ae3          	bnez	t6,800205c8 <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    800205d8:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    800205da:	bbbd                	j	80020358 <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800205dc:	377d                	addiw	a4,a4,-1
    800205de:	ff1700e3          	beq	a4,a7,800205be <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    800205e2:	00053803          	ld	a6,0(a0)
        p++;
    800205e6:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800205e8:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    800205ea:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    800205ee:	611c                	ld	a5,0(a0)
    800205f0:	0785                	addi	a5,a5,1
    800205f2:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800205f4:	0006c783          	lbu	a5,0(a3)
    800205f8:	f3f5                	bnez	a5,800205dc <vprintfmt.constprop.0+0x2a8>
    800205fa:	b7d1                	j	800205be <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    800205fc:	87fe                	mv	a5,t6
    800205fe:	000fd363          	bgez	t6,80020604 <vprintfmt.constprop.0+0x2d0>
    80020602:	4781                	li	a5,0
        ch = *fmt;
    80020604:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    80020608:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8002060c:	86ae                	mv	a3,a1
      goto reswitch;
    8002060e:	b3ad                	j	80020378 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80020610:	611c                	ld	a5,0(a0)
    80020612:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    80020614:	0621                	addi	a2,a2,8
    **pstr = ch;
    80020616:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002061a:	611c                	ld	a5,0(a0)
    8002061c:	0785                	addi	a5,a5,1
    8002061e:	e11c                	sd	a5,0(a0)
  }
    80020620:	bb25                	j	80020358 <vprintfmt.constprop.0+0x24>
    if (num < base)
    80020622:	4381                	li	t2,0
    80020624:	b585                	j	80020484 <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    80020626:	4218                	lw	a4,0(a2)
    80020628:	bd5d                	j	800204de <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    8002062a:	4829                	li	a6,10
    8002062c:	b5e9                	j	800204f6 <vprintfmt.constprop.0+0x1c2>
    8002062e:	4821                	li	a6,8
    80020630:	b5d9                	j	800204f6 <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    80020632:	02d00613          	li	a2,45
    80020636:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8002063a:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8002063c:	40e00733          	neg	a4,a4
    80020640:	8636                	mv	a2,a3
    (*pstr)++;
    80020642:	0785                	addi	a5,a5,1
    80020644:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    80020646:	4829                	li	a6,10
    80020648:	bd19                	j	8002045e <vprintfmt.constprop.0+0x12a>

000000008002064a <vprintfmt.constprop.1>:
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002064a:	00054683          	lbu	a3,0(a0)
    8002064e:	02500813          	li	a6,37
  if (ch == '\n') uartlite_putchar('\r');
    80020652:	48a9                	li	a7,10
    80020654:	0000c617          	auipc	a2,0xc
    80020658:	e8c60613          	addi	a2,a2,-372 # 8002c4e0 <uartlite>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002065c:	4335                	li	t1,13
    switch (ch = *(unsigned char *) fmt++) {
    8002065e:	05500e93          	li	t4,85
    80020662:	00002e17          	auipc	t3,0x2
    80020666:	372e0e13          	addi	t3,t3,882 # 800229d4 <__func__.2+0x16c>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002066a:	0006879b          	sext.w	a5,a3
    8002066e:	03068363          	beq	a3,a6,80020694 <vprintfmt.constprop.1+0x4a>
      if (ch == '\0')
    80020672:	c3b5                	beqz	a5,800206d6 <vprintfmt.constprop.1+0x8c>
      fmt++;
    80020674:	0505                	addi	a0,a0,1
  if (ch == '\n') uartlite_putchar('\r');
    80020676:	05168863          	beq	a3,a7,800206c6 <vprintfmt.constprop.1+0x7c>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    8002067a:	6218                	ld	a4,0(a2)
    8002067c:	00874783          	lbu	a5,8(a4)
    80020680:	8ba1                	andi	a5,a5,8
    80020682:	ffed                	bnez	a5,8002067c <vprintfmt.constprop.1+0x32>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020684:	00d70223          	sb	a3,4(a4)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80020688:	00054683          	lbu	a3,0(a0)
    8002068c:	0006879b          	sext.w	a5,a3
    80020690:	ff0691e3          	bne	a3,a6,80020672 <vprintfmt.constprop.1+0x28>
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80020694:	712d                	addi	sp,sp,-288
    80020696:	ee22                	sd	s0,280(sp)
    switch (ch = *(unsigned char *) fmt++) {
    80020698:	00154f03          	lbu	t5,1(a0)
    fmt++;
    8002069c:	00150f93          	addi	t6,a0,1
    precision = -1;
    800206a0:	577d                	li	a4,-1
    fmt++;
    800206a2:	86fe                	mv	a3,t6
    width = -1;
    800206a4:	82ba                	mv	t0,a4
    padc = ' ';
    800206a6:	02000413          	li	s0,32
    lflag = 0;
    800206aa:	4381                	li	t2,0
    switch (ch = *(unsigned char *) fmt++) {
    800206ac:	fddf079b          	addiw	a5,t5,-35
    800206b0:	0ff7f793          	zext.b	a5,a5
    800206b4:	00168513          	addi	a0,a3,1
    800206b8:	02feec63          	bltu	t4,a5,800206f0 <vprintfmt.constprop.1+0xa6>
    800206bc:	078a                	slli	a5,a5,0x2
    800206be:	97f2                	add	a5,a5,t3
    800206c0:	439c                	lw	a5,0(a5)
    800206c2:	97f2                	add	a5,a5,t3
    800206c4:	8782                	jr	a5
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800206c6:	6218                	ld	a4,0(a2)
    800206c8:	00874783          	lbu	a5,8(a4)
    800206cc:	8ba1                	andi	a5,a5,8
    800206ce:	ffed                	bnez	a5,800206c8 <vprintfmt.constprop.1+0x7e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800206d0:	00670223          	sb	t1,4(a4)
    800206d4:	b75d                	j	8002067a <vprintfmt.constprop.1+0x30>
    800206d6:	8082                	ret
      padc = '0';
    800206d8:	847a                	mv	s0,t5
      goto reswitch;
    800206da:	0016cf03          	lbu	t5,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    800206de:	86aa                	mv	a3,a0
    800206e0:	00168513          	addi	a0,a3,1
    800206e4:	fddf079b          	addiw	a5,t5,-35
    800206e8:	0ff7f793          	zext.b	a5,a5
    800206ec:	fcfef8e3          	bgeu	t4,a5,800206bc <vprintfmt.constprop.1+0x72>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800206f0:	0000c717          	auipc	a4,0xc
    800206f4:	df073703          	ld	a4,-528(a4) # 8002c4e0 <uartlite>
    800206f8:	00874783          	lbu	a5,8(a4)
    800206fc:	8ba1                	andi	a5,a5,8
    800206fe:	ffed                	bnez	a5,800206f8 <vprintfmt.constprop.1+0xae>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020700:	02500793          	li	a5,37
      fmt = last_fmt;
    80020704:	857e                	mv	a0,t6
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020706:	00f70223          	sb	a5,4(a4)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002070a:	00054683          	lbu	a3,0(a0)
    8002070e:	0006879b          	sext.w	a5,a3
    80020712:	f90683e3          	beq	a3,a6,80020698 <vprintfmt.constprop.1+0x4e>
      if (ch == '\0')
    80020716:	36078263          	beqz	a5,80020a7a <vprintfmt.constprop.1+0x430>
      fmt++;
    8002071a:	0505                	addi	a0,a0,1
  if (ch == '\n') uartlite_putchar('\r');
    8002071c:	07168063          	beq	a3,a7,8002077c <vprintfmt.constprop.1+0x132>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020720:	6218                	ld	a4,0(a2)
    80020722:	00874783          	lbu	a5,8(a4)
    80020726:	8ba1                	andi	a5,a5,8
    80020728:	ffed                	bnez	a5,80020722 <vprintfmt.constprop.1+0xd8>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002072a:	00d70223          	sb	a3,4(a4)
    8002072e:	bff1                	j	8002070a <vprintfmt.constprop.1+0xc0>
    80020730:	ea26                	sd	s1,272(sp)
    80020732:	e64a                	sd	s2,264(sp)
        precision = precision * 10 + ch - '0';
    80020734:	fd0f071b          	addiw	a4,t5,-48
        ch = *fmt;
    80020738:	0016cf03          	lbu	t5,1(a3)
        if (ch < '0' || ch > '9')
    8002073c:	4925                	li	s2,9
    switch (ch = *(unsigned char *) fmt++) {
    8002073e:	86aa                	mv	a3,a0
        if (ch < '0' || ch > '9')
    80020740:	fd0f079b          	addiw	a5,t5,-48
        ch = *fmt;
    80020744:	000f049b          	sext.w	s1,t5
        if (ch < '0' || ch > '9')
    80020748:	02f96363          	bltu	s2,a5,8002076e <vprintfmt.constprop.1+0x124>
        precision = precision * 10 + ch - '0';
    8002074c:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    80020750:	0016cf03          	lbu	t5,1(a3)
        precision = precision * 10 + ch - '0';
    80020754:	9fb9                	addw	a5,a5,a4
    80020756:	0017979b          	slliw	a5,a5,0x1
    8002075a:	9fa5                	addw	a5,a5,s1
        if (ch < '0' || ch > '9')
    8002075c:	fd0f051b          	addiw	a0,t5,-48
      for (precision = 0; ; ++fmt) {
    80020760:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80020762:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    80020766:	000f049b          	sext.w	s1,t5
        if (ch < '0' || ch > '9')
    8002076a:	fea971e3          	bgeu	s2,a0,8002074c <vprintfmt.constprop.1+0x102>
    switch (ch = *(unsigned char *) fmt++) {
    8002076e:	64d2                	ld	s1,272(sp)
    80020770:	6932                	ld	s2,264(sp)
      if (width < 0)
    80020772:	f202dde3          	bgez	t0,800206ac <vprintfmt.constprop.1+0x62>
        width = precision, precision = -1;
    80020776:	82ba                	mv	t0,a4
    80020778:	577d                	li	a4,-1
    8002077a:	bf0d                	j	800206ac <vprintfmt.constprop.1+0x62>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    8002077c:	6218                	ld	a4,0(a2)
    8002077e:	00874783          	lbu	a5,8(a4)
    80020782:	8ba1                	andi	a5,a5,8
    80020784:	ffed                	bnez	a5,8002077e <vprintfmt.constprop.1+0x134>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020786:	00670223          	sb	t1,4(a4)
}
    8002078a:	bf59                	j	80020720 <vprintfmt.constprop.1+0xd6>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    8002078c:	0000cf97          	auipc	t6,0xc
    80020790:	d54f8f93          	addi	t6,t6,-684 # 8002c4e0 <uartlite>
    80020794:	000fb703          	ld	a4,0(t6)
    80020798:	ea26                	sd	s1,272(sp)
    8002079a:	00874783          	lbu	a5,8(a4)
    8002079e:	8ba1                	andi	a5,a5,8
    800207a0:	ffed                	bnez	a5,8002079a <vprintfmt.constprop.1+0x150>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800207a2:	03000793          	li	a5,48
    800207a6:	00f70223          	sb	a5,4(a4)
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800207aa:	000fb703          	ld	a4,0(t6)
    800207ae:	00874783          	lbu	a5,8(a4)
    800207b2:	8ba1                	andi	a5,a5,8
    800207b4:	ffed                	bnez	a5,800207ae <vprintfmt.constprop.1+0x164>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800207b6:	07800793          	li	a5,120
    800207ba:	00f70223          	sb	a5,4(a4)
  else if (lflag)
    800207be:	00858693          	addi	a3,a1,8
  uartlite[UART_LITE_TX_FIFO] = ch;
    800207c2:	4741                	li	a4,16
    return va_arg(*ap, unsigned long);
    800207c4:	619c                	ld	a5,0(a1)
    800207c6:	85b6                	mv	a1,a3
    digs[pos++] = num % base;
    800207c8:	02e7f3b3          	remu	t2,a5,a4
    800207cc:	00410f13          	addi	t5,sp,4
    800207d0:	4685                	li	a3,1
    800207d2:	c01e                	sw	t2,0(sp)
    if (num < base)
    800207d4:	2ae7e163          	bltu	a5,a4,80020a76 <vprintfmt.constprop.1+0x42c>
    num /= base;
    800207d8:	02e7d7b3          	divu	a5,a5,a4
    digs[pos++] = num % base;
    800207dc:	84b6                	mv	s1,a3
    if (num < base)
    800207de:	0f11                	addi	t5,t5,4
    digs[pos++] = num % base;
    800207e0:	2685                	addiw	a3,a3,1
    800207e2:	02e7f3b3          	remu	t2,a5,a4
    800207e6:	fe7f2e23          	sw	t2,-4(t5)
    if (num < base)
    800207ea:	fee7f7e3          	bgeu	a5,a4,800207d8 <vprintfmt.constprop.1+0x18e>
  while (width-- > pos)
    800207ee:	fff28f1b          	addiw	t5,t0,-1
    800207f2:	fff6839b          	addiw	t2,a3,-1
    800207f6:	0056dd63          	bge	a3,t0,80020810 <vprintfmt.constprop.1+0x1c6>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800207fa:	000fb703          	ld	a4,0(t6)
    800207fe:	00874783          	lbu	a5,8(a4)
    80020802:	8ba1                	andi	a5,a5,8
    80020804:	ffed                	bnez	a5,800207fe <vprintfmt.constprop.1+0x1b4>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020806:	00870223          	sb	s0,4(a4)
  while (width-- > pos)
    8002080a:	3f7d                	addiw	t5,t5,-1
    8002080c:	fe7f17e3          	bne	t5,t2,800207fa <vprintfmt.constprop.1+0x1b0>
  while (pos-- > 0)
    80020810:	048a                	slli	s1,s1,0x2
    80020812:	00910f33          	add	t5,sp,s1
    80020816:	ffc10393          	addi	t2,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002081a:	42a5                	li	t0,9
  if (ch == '\n') uartlite_putchar('\r');
    8002081c:	4429                	li	s0,10
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002081e:	44b5                	li	s1,13
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80020820:	000f2783          	lw	a5,0(t5)
    80020824:	20f2ea63          	bltu	t0,a5,80020a38 <vprintfmt.constprop.1+0x3ee>
    80020828:	0307879b          	addiw	a5,a5,48
  uartlite_putchar(ch);
    8002082c:	0ff7f693          	zext.b	a3,a5
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020830:	000fb703          	ld	a4,0(t6)
    80020834:	00874783          	lbu	a5,8(a4)
    80020838:	8ba1                	andi	a5,a5,8
    8002083a:	ffed                	bnez	a5,80020834 <vprintfmt.constprop.1+0x1ea>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002083c:	00d70223          	sb	a3,4(a4)
  while (pos-- > 0)
    80020840:	1f71                	addi	t5,t5,-4
    80020842:	fde39fe3          	bne	t2,t5,80020820 <vprintfmt.constprop.1+0x1d6>
    80020846:	64d2                	ld	s1,272(sp)
    80020848:	b5c9                	j	8002070a <vprintfmt.constprop.1+0xc0>
        ch = *fmt;
    8002084a:	0016cf03          	lbu	t5,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002084e:	86aa                	mv	a3,a0
      goto reswitch;
    80020850:	bdb1                	j	800206ac <vprintfmt.constprop.1+0x62>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020852:	0000c717          	auipc	a4,0xc
    80020856:	c8e73703          	ld	a4,-882(a4) # 8002c4e0 <uartlite>
    8002085a:	00874783          	lbu	a5,8(a4)
    8002085e:	8ba1                	andi	a5,a5,8
    80020860:	ffed                	bnez	a5,8002085a <vprintfmt.constprop.1+0x210>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020862:	02500793          	li	a5,37
    80020866:	00f70223          	sb	a5,4(a4)
}
    8002086a:	b545                	j	8002070a <vprintfmt.constprop.1+0xc0>
        ch = *fmt;
    8002086c:	0016cf03          	lbu	t5,1(a3)
      precision = va_arg(ap, int);
    80020870:	4198                	lw	a4,0(a1)
    switch (ch = *(unsigned char *) fmt++) {
    80020872:	86aa                	mv	a3,a0
      precision = va_arg(ap, int);
    80020874:	05a1                	addi	a1,a1,8
      goto process_precision;
    80020876:	bdf5                	j	80020772 <vprintfmt.constprop.1+0x128>
    80020878:	ea26                	sd	s1,272(sp)
  if (lflag >= 2)
    8002087a:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8002087c:	00858f13          	addi	t5,a1,8
  if (lflag >= 2)
    80020880:	0077c463          	blt	a5,t2,80020888 <vprintfmt.constprop.1+0x23e>
  else if (lflag)
    80020884:	1e038e63          	beqz	t2,80020a80 <vprintfmt.constprop.1+0x436>
    return va_arg(*ap, long);
    80020888:	619c                	ld	a5,0(a1)
      if ((long long) num < 0) {
    8002088a:	2007cd63          	bltz	a5,80020aa4 <vprintfmt.constprop.1+0x45a>
      num = getint(&ap, lflag);
    8002088e:	85fa                	mv	a1,t5
    80020890:	4729                	li	a4,10
    80020892:	0000cf97          	auipc	t6,0xc
    80020896:	c4ef8f93          	addi	t6,t6,-946 # 8002c4e0 <uartlite>
    8002089a:	b73d                	j	800207c8 <vprintfmt.constprop.1+0x17e>
        ch = *fmt;
    8002089c:	0016cf03          	lbu	t5,1(a3)
      lflag++;
    800208a0:	2385                	addiw	t2,t2,1
    switch (ch = *(unsigned char *) fmt++) {
    800208a2:	86aa                	mv	a3,a0
      goto reswitch;
    800208a4:	b521                	j	800206ac <vprintfmt.constprop.1+0x62>
    800208a6:	ea26                	sd	s1,272(sp)
    switch (ch = *(unsigned char *) fmt++) {
    800208a8:	4741                	li	a4,16
  if (lflag >= 2)
    800208aa:	4785                	li	a5,1
      precision = va_arg(ap, int);
    800208ac:	00858693          	addi	a3,a1,8
  if (lflag >= 2)
    800208b0:	1a77cc63          	blt	a5,t2,80020a68 <vprintfmt.constprop.1+0x41e>
  else if (lflag)
    800208b4:	20039b63          	bnez	t2,80020aca <vprintfmt.constprop.1+0x480>
    return va_arg(*ap, unsigned int);
    800208b8:	0005e783          	lwu	a5,0(a1)
    800208bc:	0000cf97          	auipc	t6,0xc
    800208c0:	c24f8f93          	addi	t6,t6,-988 # 8002c4e0 <uartlite>
    800208c4:	85b6                	mv	a1,a3
    800208c6:	b709                	j	800207c8 <vprintfmt.constprop.1+0x17e>
      if ((p = va_arg(ap, char *)) == NULL)
    800208c8:	0005b383          	ld	t2,0(a1)
    800208cc:	00038d63          	beqz	t2,800208e6 <vprintfmt.constprop.1+0x29c>
      if (width > 0 && padc != '-')
    800208d0:	06505863          	blez	t0,80020940 <vprintfmt.constprop.1+0x2f6>
    800208d4:	02d00793          	li	a5,45
    800208d8:	02f41363          	bne	s0,a5,800208fe <vprintfmt.constprop.1+0x2b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800208dc:	0003cf03          	lbu	t5,0(t2)
    800208e0:	060f1463          	bnez	t5,80020948 <vprintfmt.constprop.1+0x2fe>
    800208e4:	a8d5                	j	800209d8 <vprintfmt.constprop.1+0x38e>
      if (width > 0 && padc != '-')
    800208e6:	1e505763          	blez	t0,80020ad4 <vprintfmt.constprop.1+0x48a>
    800208ea:	02d00793          	li	a5,45
        p = "(null)";
    800208ee:	0000a397          	auipc	t2,0xa
    800208f2:	baa38393          	addi	t2,t2,-1110 # 8002a498 <__func__.2+0x7c30>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800208f6:	02800f13          	li	t5,40
      if (width > 0 && padc != '-')
    800208fa:	04f40763          	beq	s0,a5,80020948 <vprintfmt.constprop.1+0x2fe>
  const char *p = s;
    800208fe:	879e                	mv	a5,t2
  while (n-- && *p)
    80020900:	00e386b3          	add	a3,t2,a4
    80020904:	e709                	bnez	a4,8002090e <vprintfmt.constprop.1+0x2c4>
    80020906:	a831                	j	80020922 <vprintfmt.constprop.1+0x2d8>
    p++;
    80020908:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002090a:	00d78663          	beq	a5,a3,80020916 <vprintfmt.constprop.1+0x2cc>
    8002090e:	0007cf03          	lbu	t5,0(a5)
    80020912:	fe0f1be3          	bnez	t5,80020908 <vprintfmt.constprop.1+0x2be>
  return p - s;
    80020916:	407787b3          	sub	a5,a5,t2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002091a:	40f282bb          	subw	t0,t0,a5
    8002091e:	02505163          	blez	t0,80020940 <vprintfmt.constprop.1+0x2f6>
    80020922:	0000cf97          	auipc	t6,0xc
    80020926:	bbef8f93          	addi	t6,t6,-1090 # 8002c4e0 <uartlite>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    8002092a:	000fb683          	ld	a3,0(t6)
    8002092e:	0086c783          	lbu	a5,8(a3)
    80020932:	8ba1                	andi	a5,a5,8
    80020934:	ffed                	bnez	a5,8002092e <vprintfmt.constprop.1+0x2e4>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020936:	00868223          	sb	s0,4(a3)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002093a:	32fd                	addiw	t0,t0,-1
    8002093c:	fe0297e3          	bnez	t0,8002092a <vprintfmt.constprop.1+0x2e0>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80020940:	0003cf03          	lbu	t5,0(t2)
    80020944:	0a0f0b63          	beqz	t5,800209fa <vprintfmt.constprop.1+0x3b0>
    80020948:	ea26                	sd	s1,272(sp)
    8002094a:	e64a                	sd	s2,264(sp)
    8002094c:	e24e                	sd	s3,256(sp)
    8002094e:	597d                	li	s2,-1
  if (ch == '\n') uartlite_putchar('\r');
    80020950:	44a9                	li	s1,10
    80020952:	0000c417          	auipc	s0,0xc
    80020956:	b8e40413          	addi	s0,s0,-1138 # 8002c4e0 <uartlite>
  uartlite[UART_LITE_TX_FIFO] = ch;
    8002095a:	49b5                	li	s3,13
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002095c:	02074a63          	bltz	a4,80020990 <vprintfmt.constprop.1+0x346>
    80020960:	fff70f9b          	addiw	t6,a4,-1
    80020964:	072f8563          	beq	t6,s2,800209ce <vprintfmt.constprop.1+0x384>
  if (ch == '\n') uartlite_putchar('\r');
    80020968:	029f0763          	beq	t5,s1,80020996 <vprintfmt.constprop.1+0x34c>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    8002096c:	6014                	ld	a3,0(s0)
    8002096e:	0086c783          	lbu	a5,8(a3)
    80020972:	8ba1                	andi	a5,a5,8
    80020974:	ffed                	bnez	a5,8002096e <vprintfmt.constprop.1+0x324>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020976:	01e68223          	sb	t5,4(a3)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002097a:	0013cf03          	lbu	t5,1(t2)
        p++;
    8002097e:	0385                	addi	t2,t2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80020980:	32fd                	addiw	t0,t0,-1
    80020982:	040f0663          	beqz	t5,800209ce <vprintfmt.constprop.1+0x384>
    80020986:	02074063          	bltz	a4,800209a6 <vprintfmt.constprop.1+0x35c>
    8002098a:	877e                	mv	a4,t6
    8002098c:	fc075ae3          	bgez	a4,80020960 <vprintfmt.constprop.1+0x316>
    80020990:	8fba                	mv	t6,a4
  if (ch == '\n') uartlite_putchar('\r');
    80020992:	fc9f1de3          	bne	t5,s1,8002096c <vprintfmt.constprop.1+0x322>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020996:	6014                	ld	a3,0(s0)
    80020998:	0086c783          	lbu	a5,8(a3)
    8002099c:	8ba1                	andi	a5,a5,8
    8002099e:	ffed                	bnez	a5,80020998 <vprintfmt.constprop.1+0x34e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800209a0:	01368223          	sb	s3,4(a3)
}
    800209a4:	b7e1                	j	8002096c <vprintfmt.constprop.1+0x322>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800209a6:	869e                	mv	a3,t2
  if (ch == '\n') uartlite_putchar('\r');
    800209a8:	4fa9                	li	t6,10
    800209aa:	0bff0663          	beq	t5,t6,80020a56 <vprintfmt.constprop.1+0x40c>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800209ae:	6018                	ld	a4,0(s0)
    800209b0:	00874783          	lbu	a5,8(a4)
    800209b4:	8ba1                	andi	a5,a5,8
    800209b6:	ffed                	bnez	a5,800209b0 <vprintfmt.constprop.1+0x366>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800209b8:	01e70223          	sb	t5,4(a4)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800209bc:	0016cf03          	lbu	t5,1(a3)
        p++;
    800209c0:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800209c2:	fe0f14e3          	bnez	t5,800209aa <vprintfmt.constprop.1+0x360>
    800209c6:	005383bb          	addw	t2,t2,t0
    800209ca:	40d382bb          	subw	t0,t2,a3
      for (; width > 0; width--)
    800209ce:	64d2                	ld	s1,272(sp)
    800209d0:	6932                	ld	s2,264(sp)
    800209d2:	6992                	ld	s3,256(sp)
    800209d4:	02505363          	blez	t0,800209fa <vprintfmt.constprop.1+0x3b0>
    800209d8:	0000cf97          	auipc	t6,0xc
    800209dc:	b08f8f93          	addi	t6,t6,-1272 # 8002c4e0 <uartlite>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800209e0:	02000693          	li	a3,32
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    800209e4:	000fb703          	ld	a4,0(t6)
    800209e8:	00874783          	lbu	a5,8(a4)
    800209ec:	8ba1                	andi	a5,a5,8
    800209ee:	ffed                	bnez	a5,800209e8 <vprintfmt.constprop.1+0x39e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    800209f0:	00d70223          	sb	a3,4(a4)
      for (; width > 0; width--)
    800209f4:	32fd                	addiw	t0,t0,-1
    800209f6:	fe0297e3          	bnez	t0,800209e4 <vprintfmt.constprop.1+0x39a>
      if ((p = va_arg(ap, char *)) == NULL)
    800209fa:	05a1                	addi	a1,a1,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    800209fc:	b339                	j	8002070a <vprintfmt.constprop.1+0xc0>
      if (width < 0)
    800209fe:	8796                	mv	a5,t0
    80020a00:	0002d363          	bgez	t0,80020a06 <vprintfmt.constprop.1+0x3bc>
    80020a04:	4781                	li	a5,0
        ch = *fmt;
    80020a06:	0016cf03          	lbu	t5,1(a3)
      if (width < 0)
    80020a0a:	0007829b          	sext.w	t0,a5
    switch (ch = *(unsigned char *) fmt++) {
    80020a0e:	86aa                	mv	a3,a0
      goto reswitch;
    80020a10:	b971                	j	800206ac <vprintfmt.constprop.1+0x62>
  uartlite_putchar(ch);
    80020a12:	0005c683          	lbu	a3,0(a1)
  if (ch == '\n') uartlite_putchar('\r');
    80020a16:	47a9                	li	a5,10
      putch(va_arg(ap, int), putdat);
    80020a18:	05a1                	addi	a1,a1,8
  if (ch == '\n') uartlite_putchar('\r');
    80020a1a:	0000cf97          	auipc	t6,0xc
    80020a1e:	ac6f8f93          	addi	t6,t6,-1338 # 8002c4e0 <uartlite>
    80020a22:	06f68163          	beq	a3,a5,80020a84 <vprintfmt.constprop.1+0x43a>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020a26:	000fb703          	ld	a4,0(t6)
    80020a2a:	00874783          	lbu	a5,8(a4)
    80020a2e:	8ba1                	andi	a5,a5,8
    80020a30:	ffed                	bnez	a5,80020a2a <vprintfmt.constprop.1+0x3e0>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020a32:	00d70223          	sb	a3,4(a4)
    80020a36:	b9d1                	j	8002070a <vprintfmt.constprop.1+0xc0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80020a38:	0577879b          	addiw	a5,a5,87
  uartlite_putchar(ch);
    80020a3c:	0ff7f693          	zext.b	a3,a5
  if (ch == '\n') uartlite_putchar('\r');
    80020a40:	de8698e3          	bne	a3,s0,80020830 <vprintfmt.constprop.1+0x1e6>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020a44:	000fb703          	ld	a4,0(t6)
    80020a48:	00874783          	lbu	a5,8(a4)
    80020a4c:	8ba1                	andi	a5,a5,8
    80020a4e:	ffed                	bnez	a5,80020a48 <vprintfmt.constprop.1+0x3fe>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020a50:	00970223          	sb	s1,4(a4)
}
    80020a54:	bbf1                	j	80020830 <vprintfmt.constprop.1+0x1e6>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020a56:	6018                	ld	a4,0(s0)
    80020a58:	00874783          	lbu	a5,8(a4)
    80020a5c:	8ba1                	andi	a5,a5,8
    80020a5e:	ffed                	bnez	a5,80020a58 <vprintfmt.constprop.1+0x40e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020a60:	47b5                	li	a5,13
    80020a62:	00f70223          	sb	a5,4(a4)
    80020a66:	b7a1                	j	800209ae <vprintfmt.constprop.1+0x364>
    return va_arg(*ap, unsigned long long);
    80020a68:	619c                	ld	a5,0(a1)
    80020a6a:	0000cf97          	auipc	t6,0xc
    80020a6e:	a76f8f93          	addi	t6,t6,-1418 # 8002c4e0 <uartlite>
    80020a72:	85b6                	mv	a1,a3
    80020a74:	bb91                	j	800207c8 <vprintfmt.constprop.1+0x17e>
    if (num < base)
    80020a76:	4481                	li	s1,0
    80020a78:	bb9d                	j	800207ee <vprintfmt.constprop.1+0x1a4>
}
    80020a7a:	6472                	ld	s0,280(sp)
    80020a7c:	6115                	addi	sp,sp,288
    80020a7e:	8082                	ret
    return va_arg(*ap, int);
    80020a80:	419c                	lw	a5,0(a1)
    80020a82:	b521                	j	8002088a <vprintfmt.constprop.1+0x240>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020a84:	000fb703          	ld	a4,0(t6)
    80020a88:	00874783          	lbu	a5,8(a4)
    80020a8c:	8ba1                	andi	a5,a5,8
    80020a8e:	ffed                	bnez	a5,80020a88 <vprintfmt.constprop.1+0x43e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020a90:	47b5                	li	a5,13
    80020a92:	00f70223          	sb	a5,4(a4)
}
    80020a96:	bf41                	j	80020a26 <vprintfmt.constprop.1+0x3dc>
    80020a98:	ea26                	sd	s1,272(sp)
    switch (ch = *(unsigned char *) fmt++) {
    80020a9a:	4729                	li	a4,10
    80020a9c:	b539                	j	800208aa <vprintfmt.constprop.1+0x260>
    80020a9e:	ea26                	sd	s1,272(sp)
    80020aa0:	4721                	li	a4,8
    80020aa2:	b521                	j	800208aa <vprintfmt.constprop.1+0x260>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020aa4:	0000cf97          	auipc	t6,0xc
    80020aa8:	a3cf8f93          	addi	t6,t6,-1476 # 8002c4e0 <uartlite>
    80020aac:	000fb683          	ld	a3,0(t6)
    80020ab0:	0086c703          	lbu	a4,8(a3)
    80020ab4:	8b21                	andi	a4,a4,8
    80020ab6:	ff6d                	bnez	a4,80020ab0 <vprintfmt.constprop.1+0x466>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020ab8:	02d00713          	li	a4,45
    80020abc:	00e68223          	sb	a4,4(a3)
        num = -(long long) num;
    80020ac0:	40f007b3          	neg	a5,a5
    80020ac4:	85fa                	mv	a1,t5
    80020ac6:	4729                	li	a4,10
    80020ac8:	b301                	j	800207c8 <vprintfmt.constprop.1+0x17e>
    80020aca:	0000cf97          	auipc	t6,0xc
    80020ace:	a16f8f93          	addi	t6,t6,-1514 # 8002c4e0 <uartlite>
    80020ad2:	b9cd                	j	800207c4 <vprintfmt.constprop.1+0x17a>
    80020ad4:	ea26                	sd	s1,272(sp)
    80020ad6:	e64a                	sd	s2,264(sp)
    80020ad8:	e24e                	sd	s3,256(sp)
        p = "(null)";
    80020ada:	0000a397          	auipc	t2,0xa
    80020ade:	9be38393          	addi	t2,t2,-1602 # 8002a498 <__func__.2+0x7c30>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80020ae2:	02800f13          	li	t5,40
    80020ae6:	b5a5                	j	8002094e <vprintfmt.constprop.1+0x304>

0000000080020ae8 <uartlite_putchar>:
  if (ch == '\n') uartlite_putchar('\r');
    80020ae8:	47a9                	li	a5,10
    80020aea:	0000c697          	auipc	a3,0xc
    80020aee:	9f668693          	addi	a3,a3,-1546 # 8002c4e0 <uartlite>
    80020af2:	00f50a63          	beq	a0,a5,80020b06 <uartlite_putchar+0x1e>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020af6:	6298                	ld	a4,0(a3)
    80020af8:	00874783          	lbu	a5,8(a4)
    80020afc:	8ba1                	andi	a5,a5,8
    80020afe:	ffed                	bnez	a5,80020af8 <uartlite_putchar+0x10>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020b00:	00a70223          	sb	a0,4(a4)
}
    80020b04:	8082                	ret
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020b06:	6298                	ld	a4,0(a3)
    80020b08:	00874783          	lbu	a5,8(a4)
    80020b0c:	8ba1                	andi	a5,a5,8
    80020b0e:	ffed                	bnez	a5,80020b08 <uartlite_putchar+0x20>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020b10:	47b5                	li	a5,13
    80020b12:	00f70223          	sb	a5,4(a4)
}
    80020b16:	b7c5                	j	80020af6 <uartlite_putchar+0xe>

0000000080020b18 <strlen>:
  while (*p)
    80020b18:	00054783          	lbu	a5,0(a0)
    80020b1c:	cb89                	beqz	a5,80020b2e <strlen+0x16>
  const char *p = s;
    80020b1e:	87aa                	mv	a5,a0
  while (*p)
    80020b20:	0017c703          	lbu	a4,1(a5)
    p++;
    80020b24:	0785                	addi	a5,a5,1
  while (*p)
    80020b26:	ff6d                	bnez	a4,80020b20 <strlen+0x8>
  return p - s;
    80020b28:	40a78533          	sub	a0,a5,a0
    80020b2c:	8082                	ret
  while (*p)
    80020b2e:	4501                	li	a0,0
}
    80020b30:	8082                	ret

0000000080020b32 <strnlen>:
  while (n-- && *p)
    80020b32:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    80020b36:	87aa                	mv	a5,a0
  while (n-- && *p)
    80020b38:	e589                	bnez	a1,80020b42 <strnlen+0x10>
    80020b3a:	a821                	j	80020b52 <strnlen+0x20>
    p++;
    80020b3c:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80020b3e:	00f68863          	beq	a3,a5,80020b4e <strnlen+0x1c>
    80020b42:	0007c703          	lbu	a4,0(a5)
    80020b46:	fb7d                	bnez	a4,80020b3c <strnlen+0xa>
  return p - s;
    80020b48:	40a78533          	sub	a0,a5,a0
}
    80020b4c:	8082                	ret
  return p - s;
    80020b4e:	852e                	mv	a0,a1
    80020b50:	8082                	ret
  while (n-- && *p)
    80020b52:	4501                	li	a0,0
    80020b54:	8082                	ret

0000000080020b56 <setStats>:
  READ_CTR(mcycle);
    80020b56:	b0002773          	csrr	a4,mcycle
    80020b5a:	00024797          	auipc	a5,0x24
    80020b5e:	4f678793          	addi	a5,a5,1270 # 80045050 <counters>
    80020b62:	c511                	beqz	a0,80020b6e <setStats+0x18>
    80020b64:	e398                	sd	a4,0(a5)
  READ_CTR(minstret);
    80020b66:	b0202773          	csrr	a4,minstret
    80020b6a:	e798                	sd	a4,8(a5)
}
    80020b6c:	8082                	ret
  READ_CTR(mcycle);
    80020b6e:	6394                	ld	a3,0(a5)
    80020b70:	8f15                	sub	a4,a4,a3
    80020b72:	e398                	sd	a4,0(a5)
  READ_CTR(minstret);
    80020b74:	b0202773          	csrr	a4,minstret
    80020b78:	6794                	ld	a3,8(a5)
    80020b7a:	8f15                	sub	a4,a4,a3
    80020b7c:	e798                	sd	a4,8(a5)
}
    80020b7e:	8082                	ret

0000000080020b80 <exit>:
  nemu_trap(0);
    80020b80:	4781                	li	a5,0
    80020b82:	853e                	mv	a0,a5
    80020b84:	0000006b          	.word	0x0000006b

0000000080020b88 <printstr>:
  while (*p)
    80020b88:	00054783          	lbu	a5,0(a0)
  for (int i = 0; i < strlen(s); i++){
    80020b8c:	4681                	li	a3,0
  if (ch == '\n') uartlite_putchar('\r');
    80020b8e:	4829                	li	a6,10
    80020b90:	0000c597          	auipc	a1,0xc
    80020b94:	95058593          	addi	a1,a1,-1712 # 8002c4e0 <uartlite>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020b98:	48b5                	li	a7,13
  while (*p)
    80020b9a:	cb95                	beqz	a5,80020bce <printstr+0x46>
  const char *p = s;
    80020b9c:	87aa                	mv	a5,a0
  while (*p)
    80020b9e:	0017c703          	lbu	a4,1(a5)
    p++;
    80020ba2:	0785                	addi	a5,a5,1
  while (*p)
    80020ba4:	ff6d                	bnez	a4,80020b9e <printstr+0x16>
  return p - s;
    80020ba6:	8f89                	sub	a5,a5,a0
  for (int i = 0; i < strlen(s); i++){
    80020ba8:	02f6f363          	bgeu	a3,a5,80020bce <printstr+0x46>
    uartlite_putchar(s[i]);
    80020bac:	00d507b3          	add	a5,a0,a3
    80020bb0:	0007c603          	lbu	a2,0(a5)
  if (ch == '\n') uartlite_putchar('\r');
    80020bb4:	01060e63          	beq	a2,a6,80020bd0 <printstr+0x48>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020bb8:	6198                	ld	a4,0(a1)
    80020bba:	00874783          	lbu	a5,8(a4)
    80020bbe:	8ba1                	andi	a5,a5,8
    80020bc0:	ffed                	bnez	a5,80020bba <printstr+0x32>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020bc2:	00c70223          	sb	a2,4(a4)
  while (*p)
    80020bc6:	00054783          	lbu	a5,0(a0)
    80020bca:	0685                	addi	a3,a3,1
    80020bcc:	fbe1                	bnez	a5,80020b9c <printstr+0x14>
}
    80020bce:	8082                	ret
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020bd0:	6198                	ld	a4,0(a1)
    80020bd2:	00874783          	lbu	a5,8(a4)
    80020bd6:	8ba1                	andi	a5,a5,8
    80020bd8:	ffed                	bnez	a5,80020bd2 <printstr+0x4a>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020bda:	01170223          	sb	a7,4(a4)
}
    80020bde:	bfe9                	j	80020bb8 <printstr+0x30>

0000000080020be0 <puts>:
  while (*p)
    80020be0:	00054783          	lbu	a5,0(a0)
{
    80020be4:	4681                	li	a3,0
  while (*p)
    80020be6:	0000c597          	auipc	a1,0xc
    80020bea:	8fa58593          	addi	a1,a1,-1798 # 8002c4e0 <uartlite>
  if (ch == '\n') uartlite_putchar('\r');
    80020bee:	4829                	li	a6,10
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020bf0:	48b5                	li	a7,13
  while (*p)
    80020bf2:	cb95                	beqz	a5,80020c26 <puts+0x46>
  const char *p = s;
    80020bf4:	87aa                	mv	a5,a0
  while (*p)
    80020bf6:	0017c703          	lbu	a4,1(a5)
    p++;
    80020bfa:	0785                	addi	a5,a5,1
  while (*p)
    80020bfc:	ff6d                	bnez	a4,80020bf6 <puts+0x16>
  return p - s;
    80020bfe:	8f89                	sub	a5,a5,a0
  for (int i = 0; i < strlen(s); i++){
    80020c00:	02f6f363          	bgeu	a3,a5,80020c26 <puts+0x46>
    uartlite_putchar(s[i]);
    80020c04:	00d507b3          	add	a5,a0,a3
    80020c08:	0007c603          	lbu	a2,0(a5)
  if (ch == '\n') uartlite_putchar('\r');
    80020c0c:	05060863          	beq	a2,a6,80020c5c <puts+0x7c>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020c10:	6198                	ld	a4,0(a1)
    80020c12:	00874783          	lbu	a5,8(a4)
    80020c16:	8ba1                	andi	a5,a5,8
    80020c18:	ffed                	bnez	a5,80020c12 <puts+0x32>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020c1a:	00c70223          	sb	a2,4(a4)
  while (*p)
    80020c1e:	00054783          	lbu	a5,0(a0)
    80020c22:	0685                	addi	a3,a3,1
    80020c24:	fbe1                	bnez	a5,80020bf4 <puts+0x14>
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020c26:	6198                	ld	a4,0(a1)
    80020c28:	00874783          	lbu	a5,8(a4)
    80020c2c:	8ba1                	andi	a5,a5,8
    80020c2e:	ffed                	bnez	a5,80020c28 <puts+0x48>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020c30:	47b5                	li	a5,13
    80020c32:	00f70223          	sb	a5,4(a4)
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020c36:	6198                	ld	a4,0(a1)
    80020c38:	00874783          	lbu	a5,8(a4)
    80020c3c:	8ba1                	andi	a5,a5,8
    80020c3e:	ffed                	bnez	a5,80020c38 <puts+0x58>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020c40:	47a9                	li	a5,10
    80020c42:	00f70223          	sb	a5,4(a4)
  while (*p)
    80020c46:	00054783          	lbu	a5,0(a0)
    80020c4a:	c38d                	beqz	a5,80020c6c <puts+0x8c>
  const char *p = s;
    80020c4c:	87aa                	mv	a5,a0
  while (*p)
    80020c4e:	0017c703          	lbu	a4,1(a5)
    p++;
    80020c52:	0785                	addi	a5,a5,1
  while (*p)
    80020c54:	ff6d                	bnez	a4,80020c4e <puts+0x6e>
  return strlen(s);
    80020c56:	40a7853b          	subw	a0,a5,a0
    80020c5a:	8082                	ret
  while (uartlite[UART_LITE_STAT_REG] & UART_LITE_TX_FULL);
    80020c5c:	6198                	ld	a4,0(a1)
    80020c5e:	00874783          	lbu	a5,8(a4)
    80020c62:	8ba1                	andi	a5,a5,8
    80020c64:	ffed                	bnez	a5,80020c5e <puts+0x7e>
  uartlite[UART_LITE_TX_FIFO] = ch;
    80020c66:	01170223          	sb	a7,4(a4)
}
    80020c6a:	b75d                	j	80020c10 <puts+0x30>
  while (*p)
    80020c6c:	4501                	li	a0,0
}
    80020c6e:	8082                	ret

0000000080020c70 <printf>:
{
    80020c70:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80020c72:	02810313          	addi	t1,sp,40
{
    80020c76:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80020c78:	859a                	mv	a1,t1
{
    80020c7a:	ec06                	sd	ra,24(sp)
    80020c7c:	f832                	sd	a2,48(sp)
    80020c7e:	fc36                	sd	a3,56(sp)
    80020c80:	e0ba                	sd	a4,64(sp)
    80020c82:	e4be                	sd	a5,72(sp)
    80020c84:	e8c2                	sd	a6,80(sp)
    80020c86:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80020c88:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80020c8a:	9c1ff0ef          	jal	8002064a <vprintfmt.constprop.1>
}
    80020c8e:	60e2                	ld	ra,24(sp)
    80020c90:	4501                	li	a0,0
    80020c92:	6125                	addi	sp,sp,96
    80020c94:	8082                	ret

0000000080020c96 <sprintf>:
{
    80020c96:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80020c98:	03010313          	addi	t1,sp,48
{
    80020c9c:	f022                	sd	s0,32(sp)
    80020c9e:	e42a                	sd	a0,8(sp)
    80020ca0:	f832                	sd	a2,48(sp)
  char* str0 = str;
    80020ca2:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80020ca4:	861a                	mv	a2,t1
    80020ca6:	0028                	addi	a0,sp,8
{
    80020ca8:	f406                	sd	ra,40(sp)
    80020caa:	fc36                	sd	a3,56(sp)
    80020cac:	e0ba                	sd	a4,64(sp)
    80020cae:	e4be                	sd	a5,72(sp)
    80020cb0:	e8c2                	sd	a6,80(sp)
    80020cb2:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80020cb4:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80020cb6:	e7eff0ef          	jal	80020334 <vprintfmt.constprop.0>
  *str = 0;
    80020cba:	6522                	ld	a0,8(sp)
    80020cbc:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    80020cc0:	70a2                	ld	ra,40(sp)
    80020cc2:	9d01                	subw	a0,a0,s0
    80020cc4:	7402                	ld	s0,32(sp)
    80020cc6:	6125                	addi	sp,sp,96
    80020cc8:	8082                	ret

0000000080020cca <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80020cca:	00c5e833          	or	a6,a1,a2
    80020cce:	00a86833          	or	a6,a6,a0
    80020cd2:	00787813          	andi	a6,a6,7
    80020cd6:	87ae                	mv	a5,a1
    80020cd8:	872a                	mv	a4,a0
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    80020cda:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80020cde:	0a080b63          	beqz	a6,80020d94 <memcpy+0xca>
    while (d < (char*)(dest + len))
    80020ce2:	0ed57263          	bgeu	a0,a3,80020dc6 <memcpy+0xfc>
    80020ce6:	fff60813          	addi	a6,a2,-1
    80020cea:	489d                	li	a7,7
    80020cec:	0b08ff63          	bgeu	a7,a6,80020daa <memcpy+0xe0>
    80020cf0:	00b56833          	or	a6,a0,a1
    80020cf4:	00787813          	andi	a6,a6,7
    80020cf8:	0a081963          	bnez	a6,80020daa <memcpy+0xe0>
    80020cfc:	00158813          	addi	a6,a1,1
    80020d00:	410508b3          	sub	a7,a0,a6
    80020d04:	0078b893          	sltiu	a7,a7,7
    80020d08:	0a089363          	bnez	a7,80020dae <memcpy+0xe4>
    80020d0c:	ff867893          	andi	a7,a2,-8
    80020d10:	01158833          	add	a6,a1,a7
      *d++ = *s++;
    80020d14:	638c                	ld	a1,0(a5)
    80020d16:	07a1                	addi	a5,a5,8
    80020d18:	0721                	addi	a4,a4,8
    80020d1a:	feb73c23          	sd	a1,-8(a4)
    while (d < (char*)(dest + len))
    80020d1e:	fef81be3          	bne	a6,a5,80020d14 <memcpy+0x4a>
    80020d22:	011507b3          	add	a5,a0,a7
    80020d26:	09160f63          	beq	a2,a7,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d2a:	00084603          	lbu	a2,0(a6)
    80020d2e:	00178713          	addi	a4,a5,1
    80020d32:	00c78023          	sb	a2,0(a5)
    while (d < (char*)(dest + len))
    80020d36:	08d77763          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d3a:	00184603          	lbu	a2,1(a6)
    80020d3e:	00278713          	addi	a4,a5,2
    80020d42:	00c780a3          	sb	a2,1(a5)
    while (d < (char*)(dest + len))
    80020d46:	06d77f63          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d4a:	00284603          	lbu	a2,2(a6)
    80020d4e:	00378713          	addi	a4,a5,3
    80020d52:	00c78123          	sb	a2,2(a5)
    while (d < (char*)(dest + len))
    80020d56:	06d77763          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d5a:	00384603          	lbu	a2,3(a6)
    80020d5e:	00478713          	addi	a4,a5,4
    80020d62:	00c781a3          	sb	a2,3(a5)
    while (d < (char*)(dest + len))
    80020d66:	04d77f63          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d6a:	00484603          	lbu	a2,4(a6)
    80020d6e:	00578713          	addi	a4,a5,5
    80020d72:	00c78223          	sb	a2,4(a5)
    while (d < (char*)(dest + len))
    80020d76:	04d77763          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d7a:	00584603          	lbu	a2,5(a6)
    80020d7e:	00678713          	addi	a4,a5,6
    80020d82:	00c782a3          	sb	a2,5(a5)
    while (d < (char*)(dest + len))
    80020d86:	02d77f63          	bgeu	a4,a3,80020dc4 <memcpy+0xfa>
      *d++ = *s++;
    80020d8a:	00684703          	lbu	a4,6(a6)
    80020d8e:	00e78323          	sb	a4,6(a5)
    while (d < (char*)(dest + len))
    80020d92:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    80020d94:	02d57863          	bgeu	a0,a3,80020dc4 <memcpy+0xfa>
    uintptr_t *d = dest;
    80020d98:	87aa                	mv	a5,a0
      *d++ = *s++;
    80020d9a:	6198                	ld	a4,0(a1)
    80020d9c:	07a1                	addi	a5,a5,8
    80020d9e:	05a1                	addi	a1,a1,8
    80020da0:	fee7bc23          	sd	a4,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    80020da4:	fed7ebe3          	bltu	a5,a3,80020d9a <memcpy+0xd0>
    80020da8:	8082                	ret
    80020daa:	00158813          	addi	a6,a1,1
    80020dae:	95b2                	add	a1,a1,a2
    char *d = dest;
    80020db0:	87aa                	mv	a5,a0
    80020db2:	a011                	j	80020db6 <memcpy+0xec>
    80020db4:	0805                	addi	a6,a6,1
      *d++ = *s++;
    80020db6:	fff84703          	lbu	a4,-1(a6)
    80020dba:	0785                	addi	a5,a5,1
    80020dbc:	fee78fa3          	sb	a4,-1(a5)
    while (d < (char*)(dest + len))
    80020dc0:	feb81ae3          	bne	a6,a1,80020db4 <memcpy+0xea>
  }
  return dest;
}
    80020dc4:	8082                	ret
    80020dc6:	8082                	ret

0000000080020dc8 <memset>:

void* memset(void* dest, int byte, size_t len)
{
    80020dc8:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80020dca:	00c567b3          	or	a5,a0,a2
{
    80020dce:	e022                	sd	s0,0(sp)
    80020dd0:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80020dd2:	8b9d                	andi	a5,a5,7
{
    80020dd4:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    80020dd6:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80020dda:	cf81                	beqz	a5,80020df2 <memset+0x2a>
    while (d < (char*)(dest + len))
    80020ddc:	00e57663          	bgeu	a0,a4,80020de8 <memset+0x20>
      *d++ = byte;
    80020de0:	0ff5f593          	zext.b	a1,a1
    80020de4:	fe5ff0ef          	jal	80020dc8 <memset>
  }
  return dest;
}
    80020de8:	60a2                	ld	ra,8(sp)
    80020dea:	8522                	mv	a0,s0
    80020dec:	6402                	ld	s0,0(sp)
    80020dee:	0141                	addi	sp,sp,16
    80020df0:	8082                	ret
    word |= word << 16 << 16;
    80020df2:	010107b7          	lui	a5,0x1010
    80020df6:	10178793          	addi	a5,a5,257 # 1010101 <STACK_SIZE+0xf10101>
    80020dfa:	02079693          	slli	a3,a5,0x20
    uintptr_t word = byte & 0xFF;
    80020dfe:	0ff5f593          	zext.b	a1,a1
    80020e02:	96be                	add	a3,a3,a5
    80020e04:	02d585b3          	mul	a1,a1,a3
    while (d < (uintptr_t*)(dest + len))
    80020e08:	fee570e3          	bgeu	a0,a4,80020de8 <memset+0x20>
    uintptr_t *d = dest;
    80020e0c:	87aa                	mv	a5,a0
      *d++ = word;
    80020e0e:	07a1                	addi	a5,a5,8
    80020e10:	feb7bc23          	sd	a1,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    80020e14:	fee7ede3          	bltu	a5,a4,80020e0e <memset+0x46>
}
    80020e18:	60a2                	ld	ra,8(sp)
    80020e1a:	8522                	mv	a0,s0
    80020e1c:	6402                	ld	s0,0(sp)
    80020e1e:	0141                	addi	sp,sp,16
    80020e20:	8082                	ret

0000000080020e22 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    80020e22:	00054783          	lbu	a5,0(a0)
    80020e26:	0505                	addi	a0,a0,1
    c2 = *s2++;
    80020e28:	0585                	addi	a1,a1,1
    80020e2a:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    80020e2e:	c799                	beqz	a5,80020e3c <strcmp+0x1a>
    80020e30:	fee789e3          	beq	a5,a4,80020e22 <strcmp>

  return c1 - c2;
    80020e34:	0007851b          	sext.w	a0,a5
}
    80020e38:	9d19                	subw	a0,a0,a4
    80020e3a:	8082                	ret
    80020e3c:	4501                	li	a0,0
    80020e3e:	bfed                	j	80020e38 <strcmp+0x16>

0000000080020e40 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    80020e40:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    80020e42:	0005c703          	lbu	a4,0(a1)
    80020e46:	0585                	addi	a1,a1,1
    80020e48:	0785                	addi	a5,a5,1
    80020e4a:	fee78fa3          	sb	a4,-1(a5)
    80020e4e:	fb75                	bnez	a4,80020e42 <strcpy+0x2>
    ;
  return dest;
}
    80020e50:	8082                	ret

0000000080020e52 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    80020e52:	00054683          	lbu	a3,0(a0)
    80020e56:	02000713          	li	a4,32
{
    80020e5a:	87aa                	mv	a5,a0
  while (*str == ' ')
    80020e5c:	00e69863          	bne	a3,a4,80020e6c <atol+0x1a>
    80020e60:	8736                	mv	a4,a3
    80020e62:	0017c683          	lbu	a3,1(a5)
    str++;
    80020e66:	0785                	addi	a5,a5,1
  while (*str == ' ')
    80020e68:	fee68de3          	beq	a3,a4,80020e62 <atol+0x10>

  if (*str == '-' || *str == '+') {
    80020e6c:	02d00713          	li	a4,45
    80020e70:	02e68f63          	beq	a3,a4,80020eae <atol+0x5c>
    80020e74:	02b00713          	li	a4,43
    80020e78:	02e68563          	beq	a3,a4,80020ea2 <atol+0x50>
  int sign = 0;
    80020e7c:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    80020e7e:	ce8d                	beqz	a3,80020eb8 <atol+0x66>
  int sign = 0;
    80020e80:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    80020e82:	0785                	addi	a5,a5,1
    80020e84:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    80020e88:	00251713          	slli	a4,a0,0x2
  while (*str) {
    80020e8c:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    80020e90:	972a                	add	a4,a4,a0
    80020e92:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    80020e94:	00e60533          	add	a0,a2,a4
  while (*str) {
    80020e98:	f6ed                	bnez	a3,80020e82 <atol+0x30>
  }

  return sign ? -res : res;
    80020e9a:	c185                	beqz	a1,80020eba <atol+0x68>
    80020e9c:	40a00533          	neg	a0,a0
    80020ea0:	8082                	ret
  while (*str) {
    80020ea2:	0017c683          	lbu	a3,1(a5)
    str++;
    80020ea6:	0785                	addi	a5,a5,1
  while (*str) {
    80020ea8:	ca81                	beqz	a3,80020eb8 <atol+0x66>
    sign = *str == '-';
    80020eaa:	4581                	li	a1,0
    80020eac:	bfd1                	j	80020e80 <atol+0x2e>
  while (*str) {
    80020eae:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    80020eb2:	4585                	li	a1,1
    str++;
    80020eb4:	97ae                	add	a5,a5,a1
  while (*str) {
    80020eb6:	f6e9                	bnez	a3,80020e80 <atol+0x2e>
  return sign ? -res : res;
    80020eb8:	4501                	li	a0,0
}
    80020eba:	8082                	ret

0000000080020ebc <_init>:

void _init(){

    80020ebc:	8082                	ret
	...

0000000080020ec0 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    80020ec0:	f0810113          	addi	sp,sp,-248
    80020ec4:	e006                	sd	ra,0(sp)
    80020ec6:	e80e                	sd	gp,16(sp)
    80020ec8:	ec12                	sd	tp,24(sp)
    80020eca:	f016                	sd	t0,32(sp)
    80020ecc:	f41a                	sd	t1,40(sp)
    80020ece:	f81e                	sd	t2,48(sp)
    80020ed0:	fc22                	sd	s0,56(sp)
    80020ed2:	e0a6                	sd	s1,64(sp)
    80020ed4:	e4aa                	sd	a0,72(sp)
    80020ed6:	e8ae                	sd	a1,80(sp)
    80020ed8:	ecb2                	sd	a2,88(sp)
    80020eda:	f0b6                	sd	a3,96(sp)
    80020edc:	f4ba                	sd	a4,104(sp)
    80020ede:	f8be                	sd	a5,112(sp)
    80020ee0:	fcc2                	sd	a6,120(sp)
    80020ee2:	e146                	sd	a7,128(sp)
    80020ee4:	e54a                	sd	s2,136(sp)
    80020ee6:	e94e                	sd	s3,144(sp)
    80020ee8:	ed52                	sd	s4,152(sp)
    80020eea:	f156                	sd	s5,160(sp)
    80020eec:	f55a                	sd	s6,168(sp)
    80020eee:	f95e                	sd	s7,176(sp)
    80020ef0:	fd62                	sd	s8,184(sp)
    80020ef2:	e1e6                	sd	s9,192(sp)
    80020ef4:	e5ea                	sd	s10,200(sp)
    80020ef6:	e9ee                	sd	s11,208(sp)
    80020ef8:	edf2                	sd	t3,216(sp)
    80020efa:	f1f6                	sd	t4,224(sp)
    80020efc:	f5fa                	sd	t5,232(sp)
    80020efe:	f5fe                	sd	t6,232(sp)
    jal mhandler
    80020f00:	d1fdf0ef          	jal	80000c1e <mhandler>
    j _return
    80020f04:	a849                	j	80020f96 <_return>
    80020f06:	0001                	nop

0000000080020f08 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    80020f08:	f0810113          	addi	sp,sp,-248
    80020f0c:	e006                	sd	ra,0(sp)
    80020f0e:	e80e                	sd	gp,16(sp)
    80020f10:	ec12                	sd	tp,24(sp)
    80020f12:	f016                	sd	t0,32(sp)
    80020f14:	f41a                	sd	t1,40(sp)
    80020f16:	f81e                	sd	t2,48(sp)
    80020f18:	fc22                	sd	s0,56(sp)
    80020f1a:	e0a6                	sd	s1,64(sp)
    80020f1c:	e4aa                	sd	a0,72(sp)
    80020f1e:	e8ae                	sd	a1,80(sp)
    80020f20:	ecb2                	sd	a2,88(sp)
    80020f22:	f0b6                	sd	a3,96(sp)
    80020f24:	f4ba                	sd	a4,104(sp)
    80020f26:	f8be                	sd	a5,112(sp)
    80020f28:	fcc2                	sd	a6,120(sp)
    80020f2a:	e146                	sd	a7,128(sp)
    80020f2c:	e54a                	sd	s2,136(sp)
    80020f2e:	e94e                	sd	s3,144(sp)
    80020f30:	ed52                	sd	s4,152(sp)
    80020f32:	f156                	sd	s5,160(sp)
    80020f34:	f55a                	sd	s6,168(sp)
    80020f36:	f95e                	sd	s7,176(sp)
    80020f38:	fd62                	sd	s8,184(sp)
    80020f3a:	e1e6                	sd	s9,192(sp)
    80020f3c:	e5ea                	sd	s10,200(sp)
    80020f3e:	e9ee                	sd	s11,208(sp)
    80020f40:	edf2                	sd	t3,216(sp)
    80020f42:	f1f6                	sd	t4,224(sp)
    80020f44:	f5fa                	sd	t5,232(sp)
    80020f46:	f5fe                	sd	t6,232(sp)
    jal hshandler
    80020f48:	f09df0ef          	jal	80000e50 <hshandler>
    j _return
    80020f4c:	a0a9                	j	80020f96 <_return>
    80020f4e:	0001                	nop

0000000080020f50 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    80020f50:	f0810113          	addi	sp,sp,-248
    80020f54:	e006                	sd	ra,0(sp)
    80020f56:	e80e                	sd	gp,16(sp)
    80020f58:	ec12                	sd	tp,24(sp)
    80020f5a:	f016                	sd	t0,32(sp)
    80020f5c:	f41a                	sd	t1,40(sp)
    80020f5e:	f81e                	sd	t2,48(sp)
    80020f60:	fc22                	sd	s0,56(sp)
    80020f62:	e0a6                	sd	s1,64(sp)
    80020f64:	e4aa                	sd	a0,72(sp)
    80020f66:	e8ae                	sd	a1,80(sp)
    80020f68:	ecb2                	sd	a2,88(sp)
    80020f6a:	f0b6                	sd	a3,96(sp)
    80020f6c:	f4ba                	sd	a4,104(sp)
    80020f6e:	f8be                	sd	a5,112(sp)
    80020f70:	fcc2                	sd	a6,120(sp)
    80020f72:	e146                	sd	a7,128(sp)
    80020f74:	e54a                	sd	s2,136(sp)
    80020f76:	e94e                	sd	s3,144(sp)
    80020f78:	ed52                	sd	s4,152(sp)
    80020f7a:	f156                	sd	s5,160(sp)
    80020f7c:	f55a                	sd	s6,168(sp)
    80020f7e:	f95e                	sd	s7,176(sp)
    80020f80:	fd62                	sd	s8,184(sp)
    80020f82:	e1e6                	sd	s9,192(sp)
    80020f84:	e5ea                	sd	s10,200(sp)
    80020f86:	e9ee                	sd	s11,208(sp)
    80020f88:	edf2                	sd	t3,216(sp)
    80020f8a:	f1f6                	sd	t4,224(sp)
    80020f8c:	f5fa                	sd	t5,232(sp)
    80020f8e:	f5fe                	sd	t6,232(sp)
    jal vshandler
    80020f90:	90ce00ef          	jal	8000109c <vshandler>
    j _return
    80020f94:	a009                	j	80020f96 <_return>

0000000080020f96 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    80020f96:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    80020f98:	04550563          	beq	a0,t0,80020fe2 <_return_from_m>

0000000080020f9c <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    80020f9c:	6082                	ld	ra,0(sp)
    80020f9e:	61c2                	ld	gp,16(sp)
    80020fa0:	6262                	ld	tp,24(sp)
    80020fa2:	7282                	ld	t0,32(sp)
    80020fa4:	7322                	ld	t1,40(sp)
    80020fa6:	73c2                	ld	t2,48(sp)
    80020fa8:	7462                	ld	s0,56(sp)
    80020faa:	6486                	ld	s1,64(sp)
    80020fac:	6526                	ld	a0,72(sp)
    80020fae:	65c6                	ld	a1,80(sp)
    80020fb0:	6666                	ld	a2,88(sp)
    80020fb2:	7686                	ld	a3,96(sp)
    80020fb4:	7726                	ld	a4,104(sp)
    80020fb6:	77c6                	ld	a5,112(sp)
    80020fb8:	7866                	ld	a6,120(sp)
    80020fba:	688a                	ld	a7,128(sp)
    80020fbc:	692a                	ld	s2,136(sp)
    80020fbe:	69ca                	ld	s3,144(sp)
    80020fc0:	6a6a                	ld	s4,152(sp)
    80020fc2:	7a8a                	ld	s5,160(sp)
    80020fc4:	7b2a                	ld	s6,168(sp)
    80020fc6:	7bca                	ld	s7,176(sp)
    80020fc8:	7c6a                	ld	s8,184(sp)
    80020fca:	6c8e                	ld	s9,192(sp)
    80020fcc:	6d2e                	ld	s10,200(sp)
    80020fce:	6dce                	ld	s11,208(sp)
    80020fd0:	6e6e                	ld	t3,216(sp)
    80020fd2:	7e8e                	ld	t4,224(sp)
    80020fd4:	7f2e                	ld	t5,232(sp)
    80020fd6:	7fce                	ld	t6,240(sp)
    80020fd8:	0f810113          	addi	sp,sp,248
    sret
    80020fdc:	10200073          	sret
    j   .
    80020fe0:	a001                	j	80020fe0 <_return_from_s+0x44>

0000000080020fe2 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    80020fe2:	6082                	ld	ra,0(sp)
    80020fe4:	61c2                	ld	gp,16(sp)
    80020fe6:	6262                	ld	tp,24(sp)
    80020fe8:	7282                	ld	t0,32(sp)
    80020fea:	7322                	ld	t1,40(sp)
    80020fec:	73c2                	ld	t2,48(sp)
    80020fee:	7462                	ld	s0,56(sp)
    80020ff0:	6486                	ld	s1,64(sp)
    80020ff2:	6526                	ld	a0,72(sp)
    80020ff4:	65c6                	ld	a1,80(sp)
    80020ff6:	6666                	ld	a2,88(sp)
    80020ff8:	7686                	ld	a3,96(sp)
    80020ffa:	7726                	ld	a4,104(sp)
    80020ffc:	77c6                	ld	a5,112(sp)
    80020ffe:	7866                	ld	a6,120(sp)
    80021000:	688a                	ld	a7,128(sp)
    80021002:	692a                	ld	s2,136(sp)
    80021004:	69ca                	ld	s3,144(sp)
    80021006:	6a6a                	ld	s4,152(sp)
    80021008:	7a8a                	ld	s5,160(sp)
    8002100a:	7b2a                	ld	s6,168(sp)
    8002100c:	7bca                	ld	s7,176(sp)
    8002100e:	7c6a                	ld	s8,184(sp)
    80021010:	6c8e                	ld	s9,192(sp)
    80021012:	6d2e                	ld	s10,200(sp)
    80021014:	6dce                	ld	s11,208(sp)
    80021016:	6e6e                	ld	t3,216(sp)
    80021018:	7e8e                	ld	t4,224(sp)
    8002101a:	7f2e                	ld	t5,232(sp)
    8002101c:	7fce                	ld	t6,240(sp)
    8002101e:	0f810113          	addi	sp,sp,248
    mret
    80021022:	30200073          	mret

Disassembly of section .text.startup:

0000000080021026 <main>:

void main(){
    80021026:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    80021028:	00002517          	auipc	a0,0x2
    8002102c:	c1050513          	addi	a0,a0,-1008 # 80022c38 <__func__.2+0x3d0>
void main(){
    80021030:	ec06                	sd	ra,24(sp)
    80021032:	e822                	sd	s0,16(sp)
    80021034:	e426                	sd	s1,8(sp)
    80021036:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    80021038:	c39ff0ef          	jal	80020c70 <printf>
    8002103c:	4529                	li	a0,10
    8002103e:	ac2ff0ef          	jal	80020300 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    80021042:	ccadf0ef          	jal	8000050c <check_misa_h>
    80021046:	c539                	beqz	a0,80021094 <main+0x6e>
        
        reset_state();
    80021048:	b60e00ef          	jal	800013a8 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8002104c:	0000b497          	auipc	s1,0xb
    80021050:	48448493          	addi	s1,s1,1156 # 8002c4d0 <test_table_size>
    80021054:	609c                	ld	a5,0(s1)
    80021056:	4401                	li	s0,0
    80021058:	0000b917          	auipc	s2,0xb
    8002105c:	48090913          	addi	s2,s2,1152 # 8002c4d8 <test_table>
    80021060:	cf91                	beqz	a5,8002107c <main+0x56>
            reset_state();
    80021062:	b46e00ef          	jal	800013a8 <reset_state>
            test_table[i]();
    80021066:	00093783          	ld	a5,0(s2)
    8002106a:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8002106e:	0405                	addi	s0,s0,1
            test_table[i]();
    80021070:	97ba                	add	a5,a5,a4
    80021072:	639c                	ld	a5,0(a5)
    80021074:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    80021076:	609c                	ld	a5,0(s1)
    80021078:	fef465e3          	bltu	s0,a5,80021062 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8002107c:	00002517          	auipc	a0,0x2
    80021080:	c0c50513          	addi	a0,a0,-1012 # 80022c88 <__func__.2+0x420>
    80021084:	bedff0ef          	jal	80020c70 <printf>
    80021088:	4529                	li	a0,10
    8002108a:	a76ff0ef          	jal	80020300 <putchar>
    exit(0);
    8002108e:	4501                	li	a0,0
    80021090:	af1ff0ef          	jal	80020b80 <exit>
        printf("hypervisor extension is not supported!\n");
    80021094:	00002517          	auipc	a0,0x2
    80021098:	bcc50513          	addi	a0,a0,-1076 # 80022c60 <__func__.2+0x3f8>
    8002109c:	b45ff0ef          	jal	80020be0 <puts>
    800210a0:	bff1                	j	8002107c <main+0x56>
