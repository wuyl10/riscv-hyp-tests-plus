
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	0003d517          	auipc	a0,0x3d
    80000012:	ff250513          	addi	a0,a0,-14 # 8003d000 <__bss_start>
    la a1, __bss_end
    80000016:	00058597          	auipc	a1,0x58
    8000001a:	0c258593          	addi	a1,a1,194 # 800580d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	6322b0ef          	jal	8002b65e <_init>
    call main
    80000030:	7c12b0ef          	jal	8002bff0 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	7ab2a0ef          	jal	8002afe0 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	0002c597          	auipc	a1,0x2c
    80000042:	04a58593          	addi	a1,a1,74 # 8002c088 <__func__.1>
    80000046:	0002e517          	auipc	a0,0x2e
    8000004a:	18250513          	addi	a0,a0,386 # 8002e1c8 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	3d02b0ef          	jal	8002b42a <printf>
    8000005e:	4529                	li	a0,10
    80000060:	0b82a0ef          	jal	8002a118 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	0002e617          	auipc	a2,0x2e
    80000074:	16860613          	addi	a2,a2,360 # 8002e1d8 <__func__.0+0x2f0>
    80000078:	08200593          	li	a1,130
    8000007c:	0002e517          	auipc	a0,0x2e
    80000080:	16450513          	addi	a0,a0,356 # 8002e1e0 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	3a22b0ef          	jal	8002b42a <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	0002e597          	auipc	a1,0x2e
    80000094:	12858593          	addi	a1,a1,296 # 8002e1b8 <__func__.0+0x2d0>
    80000098:	0002e517          	auipc	a0,0x2e
    8000009c:	16050513          	addi	a0,a0,352 # 8002e1f8 <__func__.0+0x310>
    800000a0:	38a2b0ef          	jal	8002b42a <printf>
    800000a4:	0002e517          	auipc	a0,0x2e
    800000a8:	15c50513          	addi	a0,a0,348 # 8002e200 <__func__.0+0x318>
    800000ac:	37e2b0ef          	jal	8002b42a <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	0002e517          	auipc	a0,0x2e
    800000ba:	15250513          	addi	a0,a0,338 # 8002e208 <__func__.0+0x320>
    800000be:	36c2b0ef          	jal	8002b42a <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	0522a0ef          	jal	8002a118 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	04c2a0ef          	jal	8002a118 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	0002e617          	auipc	a2,0x2e
    800000e8:	13c60613          	addi	a2,a2,316 # 8002e220 <__func__.0+0x338>
    800000ec:	08200593          	li	a1,130
    800000f0:	0002e517          	auipc	a0,0x2e
    800000f4:	0f050513          	addi	a0,a0,240 # 8002e1e0 <__func__.0+0x2f8>
    800000f8:	3322b0ef          	jal	8002b42a <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	0002e597          	auipc	a1,0x2e
    80000104:	0b858593          	addi	a1,a1,184 # 8002e1b8 <__func__.0+0x2d0>
    80000108:	0002e517          	auipc	a0,0x2e
    8000010c:	0f050513          	addi	a0,a0,240 # 8002e1f8 <__func__.0+0x310>
    80000110:	31a2b0ef          	jal	8002b42a <printf>
    80000114:	0002e517          	auipc	a0,0x2e
    80000118:	0ec50513          	addi	a0,a0,236 # 8002e200 <__func__.0+0x318>
    8000011c:	30e2b0ef          	jal	8002b42a <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	0002e517          	auipc	a0,0x2e
    8000012a:	0e250513          	addi	a0,a0,226 # 8002e208 <__func__.0+0x320>
    8000012e:	2fc2b0ef          	jal	8002b42a <printf>
    80000132:	02900513          	li	a0,41
    80000136:	7e3290ef          	jal	8002a118 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	7dd290ef          	jal	8002a118 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	0002e617          	auipc	a2,0x2e
    80000158:	0d460613          	addi	a2,a2,212 # 8002e228 <__func__.0+0x340>
    8000015c:	08200593          	li	a1,130
    80000160:	0002e517          	auipc	a0,0x2e
    80000164:	08050513          	addi	a0,a0,128 # 8002e1e0 <__func__.0+0x2f8>
    80000168:	2c22b0ef          	jal	8002b42a <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	0002e597          	auipc	a1,0x2e
    80000174:	04858593          	addi	a1,a1,72 # 8002e1b8 <__func__.0+0x2d0>
    80000178:	0002e517          	auipc	a0,0x2e
    8000017c:	08050513          	addi	a0,a0,128 # 8002e1f8 <__func__.0+0x310>
    80000180:	2aa2b0ef          	jal	8002b42a <printf>
    80000184:	0002e517          	auipc	a0,0x2e
    80000188:	07c50513          	addi	a0,a0,124 # 8002e200 <__func__.0+0x318>
    8000018c:	29e2b0ef          	jal	8002b42a <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	0002e517          	auipc	a0,0x2e
    8000019a:	07250513          	addi	a0,a0,114 # 8002e208 <__func__.0+0x320>
    8000019e:	28c2b0ef          	jal	8002b42a <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	773290ef          	jal	8002a118 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	76d290ef          	jal	8002a118 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	0002e617          	auipc	a2,0x2e
    800001c8:	06c60613          	addi	a2,a2,108 # 8002e230 <__func__.0+0x348>
    800001cc:	08200593          	li	a1,130
    800001d0:	0002e517          	auipc	a0,0x2e
    800001d4:	01050513          	addi	a0,a0,16 # 8002e1e0 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	24e2b0ef          	jal	8002b42a <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	0002e597          	auipc	a1,0x2e
    800001e8:	fd458593          	addi	a1,a1,-44 # 8002e1b8 <__func__.0+0x2d0>
    800001ec:	0002e517          	auipc	a0,0x2e
    800001f0:	00c50513          	addi	a0,a0,12 # 8002e1f8 <__func__.0+0x310>
    800001f4:	2362b0ef          	jal	8002b42a <printf>
    800001f8:	0002e517          	auipc	a0,0x2e
    800001fc:	00850513          	addi	a0,a0,8 # 8002e200 <__func__.0+0x318>
    80000200:	22a2b0ef          	jal	8002b42a <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	0002e517          	auipc	a0,0x2e
    8000020e:	ffe50513          	addi	a0,a0,-2 # 8002e208 <__func__.0+0x320>
    80000212:	2182b0ef          	jal	8002b42a <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	6ff290ef          	jal	8002a118 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	6f9290ef          	jal	8002a118 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	0002e617          	auipc	a2,0x2e
    8000023c:	00060613          	mv	a2,a2
    80000240:	08200593          	li	a1,130
    80000244:	0002e517          	auipc	a0,0x2e
    80000248:	f9c50513          	addi	a0,a0,-100 # 8002e1e0 <__func__.0+0x2f8>
    8000024c:	1de2b0ef          	jal	8002b42a <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	0002e597          	auipc	a1,0x2e
    80000258:	f6458593          	addi	a1,a1,-156 # 8002e1b8 <__func__.0+0x2d0>
    8000025c:	0002e517          	auipc	a0,0x2e
    80000260:	f9c50513          	addi	a0,a0,-100 # 8002e1f8 <__func__.0+0x310>
    80000264:	1c62b0ef          	jal	8002b42a <printf>
    80000268:	0002e517          	auipc	a0,0x2e
    8000026c:	f9850513          	addi	a0,a0,-104 # 8002e200 <__func__.0+0x318>
    80000270:	1ba2b0ef          	jal	8002b42a <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	0002e517          	auipc	a0,0x2e
    8000027e:	f8e50513          	addi	a0,a0,-114 # 8002e208 <__func__.0+0x320>
    80000282:	1a82b0ef          	jal	8002b42a <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	68f290ef          	jal	8002a118 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	689290ef          	jal	8002a118 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	0002e617          	auipc	a2,0x2e
    800002ac:	f9860613          	addi	a2,a2,-104 # 8002e240 <__func__.0+0x358>
    800002b0:	08200593          	li	a1,130
    800002b4:	0002e517          	auipc	a0,0x2e
    800002b8:	f2c50513          	addi	a0,a0,-212 # 8002e1e0 <__func__.0+0x2f8>
    800002bc:	16e2b0ef          	jal	8002b42a <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	0002e597          	auipc	a1,0x2e
    800002c8:	ef458593          	addi	a1,a1,-268 # 8002e1b8 <__func__.0+0x2d0>
    800002cc:	0002e517          	auipc	a0,0x2e
    800002d0:	f2c50513          	addi	a0,a0,-212 # 8002e1f8 <__func__.0+0x310>
    800002d4:	1562b0ef          	jal	8002b42a <printf>
    800002d8:	0002e517          	auipc	a0,0x2e
    800002dc:	f2850513          	addi	a0,a0,-216 # 8002e200 <__func__.0+0x318>
    800002e0:	14a2b0ef          	jal	8002b42a <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	0002e517          	auipc	a0,0x2e
    800002ee:	f1e50513          	addi	a0,a0,-226 # 8002e208 <__func__.0+0x320>
    800002f2:	1382b0ef          	jal	8002b42a <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	61f290ef          	jal	8002a118 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	619290ef          	jal	8002a118 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	0002e617          	auipc	a2,0x2e
    8000031c:	f3060613          	addi	a2,a2,-208 # 8002e248 <__func__.0+0x360>
    80000320:	08200593          	li	a1,130
    80000324:	0002e517          	auipc	a0,0x2e
    80000328:	ebc50513          	addi	a0,a0,-324 # 8002e1e0 <__func__.0+0x2f8>
    8000032c:	0fe2b0ef          	jal	8002b42a <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	0002e597          	auipc	a1,0x2e
    80000338:	e8458593          	addi	a1,a1,-380 # 8002e1b8 <__func__.0+0x2d0>
    8000033c:	0002e517          	auipc	a0,0x2e
    80000340:	ebc50513          	addi	a0,a0,-324 # 8002e1f8 <__func__.0+0x310>
    80000344:	0e62b0ef          	jal	8002b42a <printf>
    80000348:	0002e517          	auipc	a0,0x2e
    8000034c:	eb850513          	addi	a0,a0,-328 # 8002e200 <__func__.0+0x318>
    80000350:	0da2b0ef          	jal	8002b42a <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	0002e517          	auipc	a0,0x2e
    8000035e:	eae50513          	addi	a0,a0,-338 # 8002e208 <__func__.0+0x320>
    80000362:	0c82b0ef          	jal	8002b42a <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	5af290ef          	jal	8002a118 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	5a9290ef          	jal	8002a118 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	0002e617          	auipc	a2,0x2e
    8000038c:	ed060613          	addi	a2,a2,-304 # 8002e258 <__func__.0+0x370>
    80000390:	08200593          	li	a1,130
    80000394:	0002e517          	auipc	a0,0x2e
    80000398:	e4c50513          	addi	a0,a0,-436 # 8002e1e0 <__func__.0+0x2f8>
    8000039c:	08e2b0ef          	jal	8002b42a <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	0002e597          	auipc	a1,0x2e
    800003a8:	e1458593          	addi	a1,a1,-492 # 8002e1b8 <__func__.0+0x2d0>
    800003ac:	0002e517          	auipc	a0,0x2e
    800003b0:	e4c50513          	addi	a0,a0,-436 # 8002e1f8 <__func__.0+0x310>
    800003b4:	0762b0ef          	jal	8002b42a <printf>
    800003b8:	0002e517          	auipc	a0,0x2e
    800003bc:	e4850513          	addi	a0,a0,-440 # 8002e200 <__func__.0+0x318>
    800003c0:	06a2b0ef          	jal	8002b42a <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	0002e517          	auipc	a0,0x2e
    800003ce:	e3e50513          	addi	a0,a0,-450 # 8002e208 <__func__.0+0x320>
    800003d2:	0582b0ef          	jal	8002b42a <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	53f290ef          	jal	8002a118 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	539290ef          	jal	8002a118 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	0002e597          	auipc	a1,0x2e
    800003ee:	dce58593          	addi	a1,a1,-562 # 8002e1b8 <__func__.0+0x2d0>
    800003f2:	0002e517          	auipc	a0,0x2e
    800003f6:	e6e50513          	addi	a0,a0,-402 # 8002e260 <__func__.0+0x378>
    800003fa:	0302b0ef          	jal	8002b42a <printf>
    800003fe:	4511                	li	a0,4
    80000400:	309000ef          	jal	80000f08 <goto_priv>
    80000404:	420010ef          	jal	80001824 <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	0002e597          	auipc	a1,0x2e
    8000041e:	d8e58593          	addi	a1,a1,-626 # 8002e1a8 <__func__.0+0x2c0>
    80000422:	0002e517          	auipc	a0,0x2e
    80000426:	dd650513          	addi	a0,a0,-554 # 8002e1f8 <__func__.0+0x310>
    8000042a:	0002b0ef          	jal	8002b42a <printf>
    8000042e:	4529                	li	a0,10
    80000430:	4e9290ef          	jal	8002a118 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	0002e597          	auipc	a1,0x2e
    8000043a:	d7258593          	addi	a1,a1,-654 # 8002e1a8 <__func__.0+0x2c0>
    8000043e:	0002e517          	auipc	a0,0x2e
    80000442:	dba50513          	addi	a0,a0,-582 # 8002e1f8 <__func__.0+0x310>
    80000446:	7e52a0ef          	jal	8002b42a <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	4cd290ef          	jal	8002a118 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	0002e597          	auipc	a1,0x2e
    8000045c:	d5058593          	addi	a1,a1,-688 # 8002e1a8 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	0002e597          	auipc	a1,0x2e
    80000466:	d4658593          	addi	a1,a1,-698 # 8002e1a8 <__func__.0+0x2c0>
    8000046a:	0002e517          	auipc	a0,0x2e
    8000046e:	d8e50513          	addi	a0,a0,-626 # 8002e1f8 <__func__.0+0x310>
    80000472:	7b92a0ef          	jal	8002b42a <printf>
    80000476:	4529                	li	a0,10
    80000478:	4a1290ef          	jal	8002a118 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	0002e597          	auipc	a1,0x2e
    80000482:	d2a58593          	addi	a1,a1,-726 # 8002e1a8 <__func__.0+0x2c0>
    80000486:	0002e517          	auipc	a0,0x2e
    8000048a:	d7250513          	addi	a0,a0,-654 # 8002e1f8 <__func__.0+0x310>
    8000048e:	79d2a0ef          	jal	8002b42a <printf>
    80000492:	4529                	li	a0,10
    80000494:	485290ef          	jal	8002a118 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	0002e597          	auipc	a1,0x2e
    8000049e:	d0e58593          	addi	a1,a1,-754 # 8002e1a8 <__func__.0+0x2c0>
    800004a2:	0002e517          	auipc	a0,0x2e
    800004a6:	d5650513          	addi	a0,a0,-682 # 8002e1f8 <__func__.0+0x310>
    800004aa:	7812a0ef          	jal	8002b42a <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	469290ef          	jal	8002a118 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	0002e597          	auipc	a1,0x2e
    800004ba:	cf258593          	addi	a1,a1,-782 # 8002e1a8 <__func__.0+0x2c0>
    800004be:	0002e517          	auipc	a0,0x2e
    800004c2:	d3a50513          	addi	a0,a0,-710 # 8002e1f8 <__func__.0+0x310>
    800004c6:	7652a0ef          	jal	8002b42a <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	44d290ef          	jal	8002a118 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	0002e597          	auipc	a1,0x2e
    800004d6:	cd658593          	addi	a1,a1,-810 # 8002e1a8 <__func__.0+0x2c0>
    800004da:	0002e517          	auipc	a0,0x2e
    800004de:	d1e50513          	addi	a0,a0,-738 # 8002e1f8 <__func__.0+0x310>
    800004e2:	7492a0ef          	jal	8002b42a <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	431290ef          	jal	8002a118 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	0002e597          	auipc	a1,0x2e
    800004f2:	cba58593          	addi	a1,a1,-838 # 8002e1a8 <__func__.0+0x2c0>
    800004f6:	0002e517          	auipc	a0,0x2e
    800004fa:	d0250513          	addi	a0,a0,-766 # 8002e1f8 <__func__.0+0x310>
    800004fe:	72d2a0ef          	jal	8002b42a <printf>
    80000502:	4529                	li	a0,10
    80000504:	415290ef          	jal	8002a118 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	0002c597          	auipc	a1,0x2c
    80000512:	b9258593          	addi	a1,a1,-1134 # 8002c0a0 <__func__.0>
    80000516:	0002e517          	auipc	a0,0x2e
    8000051a:	cb250513          	addi	a0,a0,-846 # 8002e1c8 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	7092a0ef          	jal	8002b42a <printf>
    80000526:	4529                	li	a0,10
    80000528:	3f1290ef          	jal	8002a118 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	0002e617          	auipc	a2,0x2e
    80000540:	d2c60613          	addi	a2,a2,-724 # 8002e268 <__func__.0+0x380>
    80000544:	08200593          	li	a1,130
    80000548:	0002e517          	auipc	a0,0x2e
    8000054c:	c9850513          	addi	a0,a0,-872 # 8002e1e0 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	6d72a0ef          	jal	8002b42a <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	0002e597          	auipc	a1,0x2e
    8000055e:	c4e58593          	addi	a1,a1,-946 # 8002e1a8 <__func__.0+0x2c0>
    80000562:	0002e517          	auipc	a0,0x2e
    80000566:	c9650513          	addi	a0,a0,-874 # 8002e1f8 <__func__.0+0x310>
    8000056a:	6c12a0ef          	jal	8002b42a <printf>
    8000056e:	4529                	li	a0,10
    80000570:	3a9290ef          	jal	8002a118 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	0002e597          	auipc	a1,0x2e
    80000578:	c3458593          	addi	a1,a1,-972 # 8002e1a8 <__func__.0+0x2c0>
    8000057c:	0002e517          	auipc	a0,0x2e
    80000580:	ce450513          	addi	a0,a0,-796 # 8002e260 <__func__.0+0x378>
    80000584:	6a72a0ef          	jal	8002b42a <printf>
    80000588:	4511                	li	a0,4
    8000058a:	17f000ef          	jal	80000f08 <goto_priv>
    8000058e:	296010ef          	jal	80001824 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	0002e597          	auipc	a1,0x2e
    800005a0:	c1c58593          	addi	a1,a1,-996 # 8002e1b8 <__func__.0+0x2d0>
    800005a4:	0002e517          	auipc	a0,0x2e
    800005a8:	c5450513          	addi	a0,a0,-940 # 8002e1f8 <__func__.0+0x310>
    800005ac:	67f2a0ef          	jal	8002b42a <printf>
    800005b0:	0002e517          	auipc	a0,0x2e
    800005b4:	c5050513          	addi	a0,a0,-944 # 8002e200 <__func__.0+0x318>
    800005b8:	6732a0ef          	jal	8002b42a <printf>
    800005bc:	0002e517          	auipc	a0,0x2e
    800005c0:	ccc50513          	addi	a0,a0,-820 # 8002e288 <__func__.0+0x3a0>
    800005c4:	6672a0ef          	jal	8002b42a <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	34d290ef          	jal	8002a118 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	347290ef          	jal	8002a118 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    hspt[1][4] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800005e4:	00055797          	auipc	a5,0x55
    800005e8:	a1c78793          	addi	a5,a5,-1508 # 80055000 <hspt+0x2000>
    800005ec:	5e07c157          	vmv.v.x	v2,a5
    800005f0:	00056517          	auipc	a0,0x56
    800005f4:	a1050513          	addi	a0,a0,-1520 # 80056000 <hspt+0x3000>
        hspt[1][i] = 
    800005f8:	5208a0d7          	vid.v	v1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005fc:	3e256157          	vslide1down.vx	v2,v2,a0
        PTE_V | (((uintptr_t)&hspt[3][0]) >> 2);
    hspt[2][0] = 
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);

    for(int i = 0; i < 4; i++){
        hspt[3][i] = 
    80000600:	9619b1d7          	vsll.vi	v3,v1,19
        hspt[1][i] = 
    80000604:	961e30d7          	vsll.vi	v1,v1,28
    80000608:	0cf00593          	li	a1,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000060c:	a2213157          	vsrl.vi	v2,v2,2
        hspt[1][i] = 
    80000610:	200007b7          	lui	a5,0x20000
        hspt[3][i] = 
    80000614:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
        hspt[1][i] = 
    80000618:	97ae                	add	a5,a5,a1
        hspt[3][i] = 
    8000061a:	5208a257          	vid.v	v4
    8000061e:	40000637          	lui	a2,0x40000
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000622:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[3][i] = 
    80000626:	40100737          	lui	a4,0x40100
        hspt[1][i] = 
    8000062a:	0215c2d7          	vadd.vx	v5,v1,a1
        hspt[3][i] = 
    8000062e:	0cf70713          	addi	a4,a4,207 # 401000cf <STACK_SIZE+0x400000cf>
        hspt[1][i] = 
    80000632:	0217c0d7          	vadd.vx	v1,v1,a5
        hspt[3][i] = 
    80000636:	0cf60613          	addi	a2,a2,207 # 400000cf <STACK_SIZE+0x3ff000cf>
    8000063a:	02364357          	vadd.vx	v6,v3,a2
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000063e:	2a20b157          	vor.vi	v2,v2,1
        hspt[3][i] = 
    80000642:	023741d7          	vadd.vx	v3,v3,a4
    80000646:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    8000064a:	96463257          	vsll.vi	v4,v4,12
        hspt[1][i] = 
    8000064e:	00054897          	auipc	a7,0x54
    80000652:	9c288893          	addi	a7,a7,-1598 # 80054010 <hspt+0x1010>
    hspt[1][4] = 
    80000656:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[1][i] = 
    8000065a:	0208f0a7          	vse64.v	v1,(a7)
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000065e:	00054797          	auipc	a5,0x54
    80000662:	9a278793          	addi	a5,a5,-1630 # 80054000 <hspt+0x1000>
    hspt[1][4] = 
    80000666:	00054e17          	auipc	t3,0x54
    8000066a:	9bae0e13          	addi	t3,t3,-1606 # 80054020 <hspt+0x1020>
        hspt[3][i] = 
    8000066e:	00056317          	auipc	t1,0x56
    80000672:	9a230313          	addi	t1,t1,-1630 # 80056010 <hspt+0x3010>
    80000676:	02057327          	vse64.v	v6,(a0)
        hspt[1][i] = 
    8000067a:	0207f2a7          	vse64.v	v5,(a5)
    hspt[1][4] = 
    8000067e:	020e7127          	vse64.v	v2,(t3)
        hspt[3][i] = 
    80000682:	020371a7          	vse64.v	v3,(t1)
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    80000686:	00057717          	auipc	a4,0x57
    8000068a:	97a70713          	addi	a4,a4,-1670 # 80057000 <hspt+0x4000>
        hspt[3][i] = 
    8000068e:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    80000692:	0c000813          	li	a6,192
    80000696:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000698:	8389                	srli	a5,a5,0x2
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    8000069a:	00275693          	srli	a3,a4,0x2
    8000069e:	5e084357          	vmv.v.x	v6,a6
        hspt[3][i] = 
    800006a2:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800006a4:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    800006a8:	0016e693          	ori	a3,a3,1
    hspt[0][0] =
    800006ac:	00053897          	auipc	a7,0x53
    800006b0:	95488893          	addi	a7,a7,-1708 # 80053000 <hspt>
        hspt[3][i] = 
    800006b4:	0245c257          	vadd.vx	v4,v4,a1
    hspt[0][0] =
    800006b8:	00f8b023          	sd	a5,0(a7)
        hspt[3][i] = 
    800006bc:	00039597          	auipc	a1,0x39
    800006c0:	16458593          	addi	a1,a1,356 # 80039820 <test_page_perm_table>
    hspt[2][0] = 
    800006c4:	00055797          	auipc	a5,0x55
    800006c8:	92d7be23          	sd	a3,-1732(a5) # 80055000 <hspt+0x2000>
        hspt[3][i] = 
    800006cc:	1ff00693          	li	a3,511
    800006d0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hspt[4][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800006d4:	2205f107          	vlseg2e64.v	v2,(a1)
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006d8:	a24130d7          	vsrl.vi	v1,v4,2
    800006dc:	00c79513          	slli	a0,a5,0xc
    800006e0:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800006e4:	5e0542d7          	vmv.v.x	v5,a0
    800006e8:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800006ec:	00479813          	slli	a6,a5,0x4
    800006f0:	00379513          	slli	a0,a5,0x3
    800006f4:	8e9d                	sub	a3,a3,a5
    800006f6:	95c2                	add	a1,a1,a6
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006f8:	2a610157          	vor.vv	v2,v6,v2
    800006fc:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000700:	02428257          	vadd.vv	v4,v4,v5
    80000704:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000708:	2a1100d7          	vor.vv	v1,v1,v2
    8000070c:	020770a7          	vse64.v	v1,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000710:	972a                	add	a4,a4,a0
    80000712:	fedd                	bnez	a3,800006d0 <hspt_init+0xf0>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000714:	0003b717          	auipc	a4,0x3b
    80000718:	0fc73703          	ld	a4,252(a4) # 8003b810 <test_page_perm_table+0x1ff0>
        addr += PAGE_SIZE;
    }


    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    8000071c:	0003b797          	auipc	a5,0x3b
    80000720:	1087a783          	lw	a5,264(a5) # 8003b824 <curr_priv>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000724:	220806b7          	lui	a3,0x22080
    80000728:	cc068693          	addi	a3,a3,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    8000072c:	8f55                	or	a4,a4,a3
    8000072e:	00058697          	auipc	a3,0x58
    80000732:	8ce6b523          	sd	a4,-1846(a3) # 80057ff8 <hspt+0x4ff8>
    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000736:	37f5                	addiw	a5,a5,-3
    80000738:	4705                	li	a4,1
    8000073a:	00f76a63          	bltu	a4,a5,8000074e <hspt_init+0x16e>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x9ULL << 60);
    8000073e:	5765                	li	a4,-7
    80000740:	00c8d793          	srli	a5,a7,0xc
    80000744:	1772                	slli	a4,a4,0x3c
    80000746:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000748:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    8000074c:	8082                	ret
void hspt_init(){
    8000074e:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000750:	0002e517          	auipc	a0,0x2e
    80000754:	bb850513          	addi	a0,a0,-1096 # 8002e308 <__func__.0+0x420>
void hspt_init(){
    80000758:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000075a:	4d12a0ef          	jal	8002b42a <printf>
    8000075e:	1bd00613          	li	a2,445
    80000762:	0002c597          	auipc	a1,0x2c
    80000766:	94e58593          	addi	a1,a1,-1714 # 8002c0b0 <__func__.2>
    8000076a:	0002e517          	auipc	a0,0x2e
    8000076e:	be650513          	addi	a0,a0,-1050 # 8002e350 <__func__.0+0x468>
    80000772:	4b92a0ef          	jal	8002b42a <printf>
    80000776:	4501                	li	a0,0
    80000778:	0692a0ef          	jal	8002afe0 <exit>

000000008000077c <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    vspt[1][4] = 
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000077c:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000780:	0004e797          	auipc	a5,0x4e
    80000784:	88078793          	addi	a5,a5,-1920 # 8004e000 <vspt+0x2000>
    80000788:	5e07c0d7          	vmv.v.x	v1,a5
void vspt_init(){
    8000078c:	1101                	addi	sp,sp,-32
    8000078e:	e822                	sd	s0,16(sp)
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000790:	0004f417          	auipc	s0,0x4f
    80000794:	87040413          	addi	s0,s0,-1936 # 8004f000 <vspt+0x3000>
    80000798:	3e1460d7          	vslide1down.vx	v1,v1,s0
        vspt[1][i] = 
    8000079c:	5208a157          	vid.v	v2
    800007a0:	0cf00713          	li	a4,207
    800007a4:	962e3157          	vsll.vi	v2,v2,28
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007a8:	a21130d7          	vsrl.vi	v1,v1,2
        vspt[1][i] = 
    800007ac:	200007b7          	lui	a5,0x20000
    800007b0:	97ba                	add	a5,a5,a4
    800007b2:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007b6:	2a10b0d7          	vor.vi	v1,v1,1
        vspt[1][i] = 
    800007ba:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007be:	0004d717          	auipc	a4,0x4d
    800007c2:	84270713          	addi	a4,a4,-1982 # 8004d000 <vspt+0x1000>
    vspt[1][5] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    vspt[1][6] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007c6:	00050517          	auipc	a0,0x50
    800007ca:	83a50513          	addi	a0,a0,-1990 # 80050000 <vspt+0x4000>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ce:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007d2:	00255693          	srli	a3,a0,0x2
void vspt_init(){
    800007d6:	e426                	sd	s1,8(sp)
    800007d8:	ec06                	sd	ra,24(sp)
    vspt[1][4] = 
    800007da:	0004d897          	auipc	a7,0x4d
    800007de:	84688893          	addi	a7,a7,-1978 # 8004d020 <vspt+0x1020>
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007e2:	0016e693          	ori	a3,a3,1
        vspt[1][i] = 
    800007e6:	0004d817          	auipc	a6,0x4d
    800007ea:	82a80813          	addi	a6,a6,-2006 # 8004d010 <vspt+0x1010>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ee:	0017e793          	ori	a5,a5,1
    vspt[0][0] = 
    800007f2:	0004c497          	auipc	s1,0x4c
    800007f6:	80e48493          	addi	s1,s1,-2034 # 8004c000 <vspt>
    
    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    800007fa:	6605                	lui	a2,0x1
    800007fc:	4581                	li	a1,0
        vspt[1][i] = 
    800007fe:	020771a7          	vse64.v	v3,(a4)
    80000802:	02087127          	vse64.v	v2,(a6)
    vspt[1][6] = 
    80000806:	fb14                	sd	a3,48(a4)
    vspt[1][4] = 
    80000808:	0208f0a7          	vse64.v	v1,(a7)
    vspt[0][0] = 
    8000080c:	e09c                	sd	a5,0(s1)
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    8000080e:	5212a0ef          	jal	8002b52e <memset>
    80000812:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000816:	5208a157          	vid.v	v2
    8000081a:	4705                	li	a4,1
    8000081c:	962ab157          	vsll.vi	v2,v2,21
    80000820:	1702                	slli	a4,a4,0x20
    80000822:	0cf00693          	li	a3,207
    80000826:	02274157          	vadd.vx	v2,v2,a4
    8000082a:	5e06c2d7          	vmv.v.x	v5,a3
    8000082e:	8722                	mv	a4,s0
    80000830:	20000693          	li	a3,512
    80000834:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }

    addr = 4 * SUPERPAGE_SIZE(1);                                        
    for(int i = 0; i < 512; i++){
        vspt[3][i] = (addr >> 2) |
    80000838:	a22130d7          	vsrl.vi	v1,v2,2
    8000083c:	01579613          	slli	a2,a5,0x15
    80000840:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000844:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_AD | PTE_RWX;  
    80000848:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    8000084c:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000850:	00379613          	slli	a2,a5,0x3
    80000854:	8e9d                	sub	a3,a3,a5
        vspt[3][i] = (addr >> 2) |
    80000856:	020770a7          	vse64.v	v1,(a4)
    8000085a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000085e:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000862:	9732                	add	a4,a4,a2
    80000864:	fae1                	bnez	a3,80000834 <vspt_init+0xb8>
        addr +=  SUPERPAGE_SIZE(2);
    }  

    vspt[2][0] = 
    80000866:	5208a257          	vid.v	v4
    8000086a:	4605                	li	a2,1
    8000086c:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000870:	00050717          	auipc	a4,0x50
    80000874:	79070713          	addi	a4,a4,1936 # 80051000 <vspt+0x5000>
    vspt[2][0] = 
    80000878:	1602                	slli	a2,a2,0x20
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    8000087a:	00275793          	srli	a5,a4,0x2
    vspt[2][0] = 
    8000087e:	02464257          	vadd.vx	v4,v4,a2
    80000882:	0c000593          	li	a1,192
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000886:	0017e793          	ori	a5,a5,1
    vspt[2][0] = 
    8000088a:	0004d317          	auipc	t1,0x4d
    8000088e:	77630313          	addi	t1,t1,1910 # 8004e000 <vspt+0x2000>
    80000892:	5e05c3d7          	vmv.v.x	v7,a1
    80000896:	00f33023          	sd	a5,0(t1)
    8000089a:	1ff00693          	li	a3,511
    8000089e:	00039597          	auipc	a1,0x39
    800008a2:	f8258593          	addi	a1,a1,-126 # 80039820 <test_page_perm_table>
    800008a6:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        vspt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800008aa:	2205f107          	vlseg2e64.v	v2,(a1)
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ae:	a24130d7          	vsrl.vi	v1,v4,2
    800008b2:	00c79513          	slli	a0,a5,0xc
    800008b6:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008ba:	5e054357          	vmv.v.x	v6,a0
    800008be:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c2:	00479813          	slli	a6,a5,0x4
    800008c6:	00379513          	slli	a0,a5,0x3
    800008ca:	8e9d                	sub	a3,a3,a5
    800008cc:	95c2                	add	a1,a1,a6
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ce:	2a710157          	vor.vv	v2,v7,v2
    800008d2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008d6:	02430257          	vadd.vv	v4,v4,v6
    800008da:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800008de:	2a208157          	vor.vv	v2,v2,v1
    800008e2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e6:	972a                	add	a4,a4,a0
    800008e8:	fedd                	bnez	a3,800008a6 <vspt_init+0x12a>
        addr +=  PAGE_SIZE;
    }

    vspt[2][1] = 
    800008ea:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    800008ee:	5208a157          	vid.v	v2
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008f2:	0003b697          	auipc	a3,0x3b
    800008f6:	f1e6b683          	ld	a3,-226(a3) # 8003b810 <test_page_perm_table+0x1ff0>
    vspt[2][1] = 
    800008fa:	96263157          	vsll.vi	v2,v2,12
    800008fe:	008015b7          	lui	a1,0x801
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000902:	00051717          	auipc	a4,0x51
    80000906:	6fe70713          	addi	a4,a4,1790 # 80052000 <vspt+0x6000>
    8000090a:	40080637          	lui	a2,0x40080
    vspt[2][1] = 
    8000090e:	05a6                	slli	a1,a1,0x9
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000910:	cc060613          	addi	a2,a2,-832 # 4007fcc0 <STACK_SIZE+0x3ff7fcc0>
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    80000914:	00275793          	srli	a5,a4,0x2
    vspt[2][1] = 
    80000918:	0225c157          	vadd.vx	v2,v2,a1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000091c:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    8000091e:	0017e793          	ori	a5,a5,1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000922:	fed73c23          	sd	a3,-8(a4)
    vspt[2][1] = 
    80000926:	00f33423          	sd	a5,8(t1)
    8000092a:	20000693          	li	a3,512
    8000092e:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = 4 * SUPERPAGE_SIZE(1) + SUPERPAGE_SIZE(2);
    for(int i = 0; i < 512; i++){
        vspt[6][i] = (addr >> 2) | 
    80000932:	a22130d7          	vsrl.vi	v1,v2,2
    80000936:	00c79613          	slli	a2,a5,0xc
    8000093a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000093e:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_AD | PTE_RWX; 
    80000942:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000946:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    8000094a:	00379613          	slli	a2,a5,0x3
    8000094e:	8e9d                	sub	a3,a3,a5
        vspt[6][i] = (addr >> 2) | 
    80000950:	020770a7          	vse64.v	v1,(a4)
    80000954:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000958:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    8000095c:	9732                	add	a4,a4,a2
    8000095e:	fae1                	bnez	a3,8000092e <vspt_init+0x1b2>
        addr +=  PAGE_SIZE;
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    if(curr_priv == PRIV_VS){
    80000960:	0003b717          	auipc	a4,0x3b
    80000964:	ec472703          	lw	a4,-316(a4) # 8003b824 <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000968:	57e5                	li	a5,-7
    8000096a:	80b1                	srli	s1,s1,0xc
    8000096c:	17f2                	slli	a5,a5,0x3c
    if(curr_priv == PRIV_VS){
    8000096e:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000970:	8cdd                	or	s1,s1,a5
    if(curr_priv == PRIV_VS){
    80000972:	04d70263          	beq	a4,a3,800009b6 <vspt_init+0x23a>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000976:	3775                	addiw	a4,a4,-3
    80000978:	4785                	li	a5,1
    8000097a:	00e7e963          	bltu	a5,a4,8000098c <vspt_init+0x210>
        CSRW(CSR_VSATP, satp);
    8000097e:	28049073          	csrw	vsatp,s1
    } else {
        ERROR("");
    }

}
    80000982:	60e2                	ld	ra,24(sp)
    80000984:	6442                	ld	s0,16(sp)
    80000986:	64a2                	ld	s1,8(sp)
    80000988:	6105                	addi	sp,sp,32
    8000098a:	8082                	ret
        ERROR("");
    8000098c:	0002e517          	auipc	a0,0x2e
    80000990:	9d450513          	addi	a0,a0,-1580 # 8002e360 <__func__.0+0x478>
    80000994:	2972a0ef          	jal	8002b42a <printf>
    80000998:	20100613          	li	a2,513
    8000099c:	0002b597          	auipc	a1,0x2b
    800009a0:	72458593          	addi	a1,a1,1828 # 8002c0c0 <__func__.1>
    800009a4:	0002e517          	auipc	a0,0x2e
    800009a8:	9ac50513          	addi	a0,a0,-1620 # 8002e350 <__func__.0+0x468>
    800009ac:	27f2a0ef          	jal	8002b42a <printf>
    800009b0:	4501                	li	a0,0
    800009b2:	62e2a0ef          	jal	8002afe0 <exit>
        CSRW(satp, satp);
    800009b6:	18049073          	csrw	satp,s1
}
    800009ba:	60e2                	ld	ra,24(sp)
    800009bc:	6442                	ld	s0,16(sp)
    800009be:	64a2                	ld	s1,8(sp)
    800009c0:	6105                	addi	sp,sp,32
    800009c2:	8082                	ret

00000000800009c4 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[7][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    800009c4:	1101                	addi	sp,sp,-32
    800009c6:	e822                	sd	s0,16(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    800009c8:	00047417          	auipc	s0,0x47
    800009cc:	63840413          	addi	s0,s0,1592 # 80048000 <hpt_root>
    800009d0:	6611                	lui	a2,0x4
    800009d2:	4581                	li	a1,0
    800009d4:	8522                	mv	a0,s0
void hpt_init(){
    800009d6:	ec06                	sd	ra,24(sp)
    800009d8:	e426                	sd	s1,8(sp)
        hpt_root[i] = 0;
    800009da:	3552a0ef          	jal	8002b52e <memset>

    hpt[1][4] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    hpt[0][0] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009de:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800009e2:	00042797          	auipc	a5,0x42
    800009e6:	61e78793          	addi	a5,a5,1566 # 80043000 <hpt+0x3000>
    800009ea:	5e07c0d7          	vmv.v.x	v1,a5
    800009ee:	00043797          	auipc	a5,0x43
    800009f2:	61278793          	addi	a5,a5,1554 # 80044000 <hpt+0x4000>
        hpt[1][i] = 
    800009f6:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009fa:	3e17e0d7          	vslide1down.vx	v1,v1,a5
        hpt[1][i] = 
    800009fe:	962e3157          	vsll.vi	v2,v2,28
    80000a02:	0df00713          	li	a4,223
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a06:	a21130d7          	vsrl.vi	v1,v1,2
        hpt[1][i] = 
    80000a0a:	200007b7          	lui	a5,0x20000
    80000a0e:	97ba                	add	a5,a5,a4
    80000a10:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a14:	0003f897          	auipc	a7,0x3f
    80000a18:	5ec88893          	addi	a7,a7,1516 # 80040000 <hpt>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a1c:	00040717          	auipc	a4,0x40
    80000a20:	5e470713          	addi	a4,a4,1508 # 80041000 <hpt+0x1000>
        hpt[1][i] = 
    80000a24:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a28:	2a10b0d7          	vor.vi	v1,v1,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a2c:	00041497          	auipc	s1,0x41
    80000a30:	5d448493          	addi	s1,s1,1492 # 80042000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a34:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a38:	0028d813          	srli	a6,a7,0x2
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a3c:	0024d693          	srli	a3,s1,0x2
    80000a40:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a44:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a48:	00186813          	ori	a6,a6,1
        hpt[1][i] = 
    80000a4c:	00040317          	auipc	t1,0x40
    80000a50:	5c430313          	addi	t1,t1,1476 # 80041010 <hpt+0x1010>

    hpt[0][1] = 
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a54:	6605                	lui	a2,0x1
    80000a56:	4581                	li	a1,0
    80000a58:	00042517          	auipc	a0,0x42
    80000a5c:	5a850513          	addi	a0,a0,1448 # 80043000 <hpt+0x3000>
        hpt[1][i] = 
    80000a60:	020771a7          	vse64.v	v3,(a4)
    hpt[1][4] = 
    80000a64:	f314                	sd	a3,32(a4)
        hpt[1][i] = 
    80000a66:	02037127          	vse64.v	v2,(t1)
    hpt[0][0] = 
    80000a6a:	0208f0a7          	vse64.v	v1,(a7)
    hpt_root[2047] =
    80000a6e:	0004b717          	auipc	a4,0x4b
    80000a72:	58f73523          	sd	a5,1418(a4) # 8004bff8 <hpt_root+0x3ff8>
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(1)] =
    80000a76:	01043823          	sd	a6,16(s0)
    hpt_root[0] =
    80000a7a:	e01c                	sd	a5,0(s0)
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a7c:	2b32a0ef          	jal	8002b52e <memset>
    80000a80:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000a84:	5208a157          	vid.v	v2
    80000a88:	4705                	li	a4,1
    80000a8a:	962ab157          	vsll.vi	v2,v2,21
    80000a8e:	077e                	slli	a4,a4,0x1f
    80000a90:	0df00693          	li	a3,223
    80000a94:	00042517          	auipc	a0,0x42
    80000a98:	56c50513          	addi	a0,a0,1388 # 80043000 <hpt+0x3000>
    80000a9c:	02274157          	vadd.vx	v2,v2,a4
    80000aa0:	5e06c2d7          	vmv.v.x	v5,a3
    80000aa4:	04000713          	li	a4,64
    80000aa8:	86aa                	mv	a3,a0
    80000aaa:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
        hpt[3][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000aae:	a22130d7          	vsrl.vi	v1,v2,2
    80000ab2:	01579613          	slli	a2,a5,0x15
    80000ab6:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000aba:	5e0641d7          	vmv.v.x	v3,a2
    80000abe:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000ac2:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ac6:	00379613          	slli	a2,a5,0x3
    80000aca:	8f1d                	sub	a4,a4,a5
        hpt[3][i] = 
    80000acc:	0206f0a7          	vse64.v	v1,(a3)
    80000ad0:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000ad4:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ad8:	96b2                	add	a3,a3,a2
    80000ada:	fb61                	bnez	a4,80000aaa <hpt_init+0xe6>
    80000adc:	5208a157          	vid.v	v2
    80000ae0:	47c5                	li	a5,17
    80000ae2:	962ab157          	vsll.vi	v2,v2,21
    80000ae6:	07ee                	slli	a5,a5,0x1b
    80000ae8:	20000693          	li	a3,512
    80000aec:	0227c157          	vadd.vx	v2,v2,a5
    80000af0:	00043717          	auipc	a4,0x43
    80000af4:	51070713          	addi	a4,a4,1296 # 80044000 <hpt+0x4000>
    80000af8:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }    

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[4][i] = (addr >> 2) |
    80000afc:	a22130d7          	vsrl.vi	v1,v2,2
    80000b00:	01579613          	slli	a2,a5,0x15
    80000b04:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b08:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000b0c:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b10:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b14:	00379613          	slli	a2,a5,0x3
    80000b18:	8e9d                	sub	a3,a3,a5
        hpt[4][i] = (addr >> 2) |
    80000b1a:	020770a7          	vse64.v	v1,(a4)
    80000b1e:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b22:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b26:	9732                	add	a4,a4,a2
    80000b28:	fae1                	bnez	a3,80000af8 <hpt_init+0x134>
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][1] = 
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][511] = 
    80000b2a:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b2e:	00044717          	auipc	a4,0x44
    80000b32:	4d270713          	addi	a4,a4,1234 # 80045000 <hpt+0x5000>
    hpt[2][511] = 
    80000b36:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b3a:	00045317          	auipc	t1,0x45
    80000b3e:	4c630313          	addi	t1,t1,1222 # 80046000 <hpt+0x6000>
    80000b42:	0c000813          	li	a6,192
    hpt[2][511] = 
    80000b46:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b48:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b4c:	00235693          	srli	a3,t1,0x2
    80000b50:	5e0843d7          	vmv.v.x	v7,a6
    hpt[2][511] = 
    80000b54:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b56:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b5a:	0016e693          	ori	a3,a3,1
    hpt[2][511] = 
    80000b5e:	0245c257          	vadd.vx	v4,v4,a1
    80000b62:	fed53c23          	sd	a3,-8(a0)
    hpt[2][0] = 
    80000b66:	e09c                	sd	a5,0(s1)
    hpt[2][1] = 
    80000b68:	e49c                	sd	a5,8(s1)
    hpt[2][511] = 
    80000b6a:	1ff00693          	li	a3,511
    80000b6e:	00039597          	auipc	a1,0x39
    80000b72:	cba58593          	addi	a1,a1,-838 # 80039828 <test_page_perm_table+0x8>
    80000b76:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hpt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
    80000b7a:	2205f107          	vlseg2e64.v	v2,(a1)
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b7e:	a24130d7          	vsrl.vi	v1,v4,2
    80000b82:	00c79513          	slli	a0,a5,0xc
    80000b86:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000b8a:	5e054357          	vmv.v.x	v6,a0
    80000b8e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000b92:	00479813          	slli	a6,a5,0x4
    80000b96:	00379513          	slli	a0,a5,0x3
    80000b9a:	8e9d                	sub	a3,a3,a5
    80000b9c:	95c2                	add	a1,a1,a6
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b9e:	2a710157          	vor.vv	v2,v7,v2
    80000ba2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000ba6:	02430257          	vadd.vv	v4,v4,v6
    80000baa:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000bae:	2a208157          	vor.vv	v2,v2,v1
    80000bb2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000bb6:	972a                	add	a4,a4,a0
    80000bb8:	fedd                	bnez	a3,80000b76 <hpt_init+0x1b2>
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000bba:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000bbe:	5208a157          	vid.v	v2
    80000bc2:	0003b797          	auipc	a5,0x3b
    80000bc6:	c567b783          	ld	a5,-938(a5) # 8003b818 <test_page_perm_table+0x1ff8>
    80000bca:	96263157          	vsll.vi	v2,v2,12
    80000bce:	22080737          	lui	a4,0x22080
    80000bd2:	cc070713          	addi	a4,a4,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    80000bd6:	46c5                	li	a3,17
    80000bd8:	06ee                	slli	a3,a3,0x1b
    80000bda:	8fd9                	or	a5,a5,a4
    80000bdc:	0226c157          	vadd.vx	v2,v2,a3
    80000be0:	fef33c23          	sd	a5,-8(t1)
    80000be4:	20000693          	li	a3,512
    80000be8:	00045717          	auipc	a4,0x45
    80000bec:	41870713          	addi	a4,a4,1048 # 80046000 <hpt+0x6000>
    80000bf0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  PAGE_SIZE;
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[6][i] = (addr >> 2) | 
    80000bf4:	a22130d7          	vsrl.vi	v1,v2,2
    80000bf8:	00c79613          	slli	a2,a5,0xc
    80000bfc:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c00:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000c04:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000c08:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000c0c:	00379613          	slli	a2,a5,0x3
    80000c10:	8e9d                	sub	a3,a3,a5
        hpt[6][i] = (addr >> 2) | 
    80000c12:	020770a7          	vse64.v	v1,(a4)
    80000c16:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c1a:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000c1e:	9732                	add	a4,a4,a2
    80000c20:	fae1                	bnez	a3,80000bf0 <hpt_init+0x22c>
        addr +=  PAGE_SIZE;
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000c22:	0003b797          	auipc	a5,0x3b
    80000c26:	c027a783          	lw	a5,-1022(a5) # 8003b824 <curr_priv>
    80000c2a:	4705                	li	a4,1
    80000c2c:	37f5                	addiw	a5,a5,-3
    80000c2e:	00f76e63          	bltu	a4,a5,80000c4a <hpt_init+0x286>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x9ULL << 60);
    80000c32:	5765                	li	a4,-7
    80000c34:	00c45793          	srli	a5,s0,0xc
    80000c38:	1772                	slli	a4,a4,0x3c
    80000c3a:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000c3c:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }

}
    80000c40:	60e2                	ld	ra,24(sp)
    80000c42:	6442                	ld	s0,16(sp)
    80000c44:	64a2                	ld	s1,8(sp)
    80000c46:	6105                	addi	sp,sp,32
    80000c48:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000c4a:	0002d517          	auipc	a0,0x2d
    80000c4e:	72e50513          	addi	a0,a0,1838 # 8002e378 <__func__.0+0x490>
    80000c52:	7d82a0ef          	jal	8002b42a <printf>
    80000c56:	25400613          	li	a2,596
    80000c5a:	0002b597          	auipc	a1,0x2b
    80000c5e:	47658593          	addi	a1,a1,1142 # 8002c0d0 <__func__.0>
    80000c62:	0002d517          	auipc	a0,0x2d
    80000c66:	6ee50513          	addi	a0,a0,1774 # 8002e350 <__func__.0+0x468>
    80000c6a:	7c02a0ef          	jal	8002b42a <printf>
    80000c6e:	4501                	li	a0,0
    80000c70:	3702a0ef          	jal	8002afe0 <exit>

0000000080000c74 <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c74:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c78:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c7c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c80:	00039617          	auipc	a2,0x39
    80000c84:	ba060613          	addi	a2,a2,-1120 # 80039820 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    80000c88:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8a:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    80000c8c:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8e:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000c90:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000c92:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000c94:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    80000c96:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c98:	40050593          	addi	a1,a0,1024
    80000c9c:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c9e:	8309                	srli	a4,a4,0x2
    80000ca0:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca4:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca6:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca8:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000caa:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cac:	00052617          	auipc	a2,0x52
    80000cb0:	35460613          	addi	a2,a2,852 # 80053000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb4:	0004b697          	auipc	a3,0x4b
    80000cb8:	34c68693          	addi	a3,a3,844 # 8004c000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cbc:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc0:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc4:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc6:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc8:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cca:	e298                	sd	a4,0(a3)
}
    80000ccc:	8082                	ret

0000000080000cce <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000cce:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cd2:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000cd6:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cda:	00039617          	auipc	a2,0x39
    80000cde:	b4660613          	addi	a2,a2,-1210 # 80039820 <test_page_perm_table>
    80000ce2:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000ce4:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000ce6:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000ce8:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000cec:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000cee:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000cf0:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf2:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000cf6:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf8:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfc:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfe:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d00:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d02:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d04:	00052617          	auipc	a2,0x52
    80000d08:	2fc60613          	addi	a2,a2,764 # 80053000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0c:	0004b697          	auipc	a3,0x4b
    80000d10:	2f468693          	addi	a3,a3,756 # 8004c000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d14:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d18:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1c:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1e:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d20:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d22:	e298                	sd	a4,0(a3)
}
    80000d24:	8082                	ret

0000000080000d26 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000d26:	00c5171b          	slliw	a4,a0,0xc
    80000d2a:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d2e:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000d32:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d34:	00039717          	auipc	a4,0x39
    80000d38:	aec70713          	addi	a4,a4,-1300 # 80039820 <test_page_perm_table>
    80000d3c:	9736                	add	a4,a4,a3
    80000d3e:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000d40:	1782                	slli	a5,a5,0x20
    80000d42:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d44:	40050513          	addi	a0,a0,1024
    80000d48:	8389                	srli	a5,a5,0x2
    80000d4a:	050e                	slli	a0,a0,0x3
    80000d4c:	00052717          	auipc	a4,0x52
    80000d50:	2b470713          	addi	a4,a4,692 # 80053000 <hspt>
    80000d54:	8fd5                	or	a5,a5,a3
    80000d56:	972a                	add	a4,a4,a0
    80000d58:	e31c                	sd	a5,0(a4)
}
    80000d5a:	8082                	ret

0000000080000d5c <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000d5c:	00c5171b          	slliw	a4,a0,0xc
    80000d60:	880007b7          	lui	a5,0x88000
    80000d64:	00451693          	slli	a3,a0,0x4
    80000d68:	9fb9                	addw	a5,a5,a4
    80000d6a:	00039717          	auipc	a4,0x39
    80000d6e:	ab670713          	addi	a4,a4,-1354 # 80039820 <test_page_perm_table>
    80000d72:	9736                	add	a4,a4,a3
    80000d74:	6714                	ld	a3,8(a4)
    80000d76:	1782                	slli	a5,a5,0x20
    80000d78:	9381                	srli	a5,a5,0x20
    80000d7a:	40050513          	addi	a0,a0,1024
    80000d7e:	8389                	srli	a5,a5,0x2
    80000d80:	050e                	slli	a0,a0,0x3
    80000d82:	00052717          	auipc	a4,0x52
    80000d86:	27e70713          	addi	a4,a4,638 # 80053000 <hspt>
    80000d8a:	8fd5                	or	a5,a5,a3
    80000d8c:	972a                	add	a4,a4,a0
    80000d8e:	e31c                	sd	a5,0(a4)
    80000d90:	8082                	ret

0000000080000d92 <hspt_switch>:
    addr = 0x88000000 + i*0x1000;
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[4][SWITCH1];
    80000d92:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000d96:	00056797          	auipc	a5,0x56
    80000d9a:	5ca78793          	addi	a5,a5,1482 # 80057360 <hspt+0x4360>
    80000d9e:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hspt[4][SWITCH1];
    80000da2:	5208a0d7          	vid.v	v1
    80000da6:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000daa:	32308157          	vrgather.vv	v2,v3,v1
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000dae:	0207f127          	vse64.v	v2,(a5)
    hspt[4][SWITCH2] = temp;
}
    80000db2:	8082                	ret

0000000080000db4 <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[5][SWITCH1];
    80000db4:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000db8:	00050797          	auipc	a5,0x50
    80000dbc:	5a878793          	addi	a5,a5,1448 # 80051360 <vspt+0x5360>
    80000dc0:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = vspt[5][SWITCH1];
    80000dc4:	5208a0d7          	vid.v	v1
    80000dc8:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dcc:	32308157          	vrgather.vv	v2,v3,v1
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000dd0:	0207f127          	vse64.v	v2,(a5)
    vspt[5][SWITCH2] = temp;
}
    80000dd4:	8082                	ret

0000000080000dd6 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[5][SWITCH1];
    80000dd6:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000dda:	00044797          	auipc	a5,0x44
    80000dde:	58678793          	addi	a5,a5,1414 # 80045360 <hpt+0x5360>
    80000de2:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hpt[5][SWITCH1];
    80000de6:	5208a0d7          	vid.v	v1
    80000dea:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dee:	32308157          	vrgather.vv	v2,v3,v1
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000df2:	0207f127          	vse64.v	v2,(a5)
    hpt[5][SWITCH2] = temp;
}
    80000df6:	8082                	ret

0000000080000df8 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000df8:	00057797          	auipc	a5,0x57
    80000dfc:	20878793          	addi	a5,a5,520 # 80058000 <ecall_args>
    80000e00:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000e02:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000e04:	00000073          	ecall
    return ecall_args[0];

}
    80000e08:	6388                	ld	a0,0(a5)
    80000e0a:	8082                	ret

0000000080000e0c <test_setup_except_function>:

//v扩展时防止被编译成向量指令干扰测试环境
#ifdef __riscv_vector
__attribute__((target("arch=rv64imac_zicsr")))
void test_setup_except_function() {
    __sync_synchronize();
    80000e0c:	0330000f          	fence	rw,rw
    excpt.testing = true;
    80000e10:	00057797          	auipc	a5,0x57
    80000e14:	1f078793          	addi	a5,a5,496 # 80058000 <ecall_args>
    80000e18:	4705                	li	a4,1
    excpt.triggered = false;
    excpt.fault_inst = 0;
    80000e1a:	0407b423          	sd	zero,72(a5)
    excpt.testing = true;
    80000e1e:	00e79823          	sh	a4,16(a5)
    __sync_synchronize();
    80000e22:	0330000f          	fence	rw,rw
    DEBUG("setting up exception test");
}
    80000e26:	8082                	ret

0000000080000e28 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000e28:	0003b797          	auipc	a5,0x3b
    80000e2c:	9fc7a783          	lw	a5,-1540(a5) # 8003b824 <curr_priv>
    80000e30:	470d                	li	a4,3
    80000e32:	06e78963          	beq	a5,a4,80000ea4 <set_prev_priv+0x7c>
    80000e36:	4711                	li	a4,4
    80000e38:	04e78163          	beq	a5,a4,80000e7a <set_prev_priv+0x52>
    80000e3c:	4709                	li	a4,2
    80000e3e:	08e78863          	beq	a5,a4,80000ece <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000e42:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e44:	85aa                	mv	a1,a0
    80000e46:	0002b617          	auipc	a2,0x2b
    80000e4a:	29a60613          	addi	a2,a2,666 # 8002c0e0 <__func__.6>
    80000e4e:	0002d517          	auipc	a0,0x2d
    80000e52:	56a50513          	addi	a0,a0,1386 # 8002e3b8 <__func__.0+0x4d0>
void set_prev_priv(int priv){
    80000e56:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e58:	5d22a0ef          	jal	8002b42a <printf>
    80000e5c:	04b00613          	li	a2,75
    80000e60:	0002b597          	auipc	a1,0x2b
    80000e64:	28058593          	addi	a1,a1,640 # 8002c0e0 <__func__.6>
    80000e68:	0002d517          	auipc	a0,0x2d
    80000e6c:	4e850513          	addi	a0,a0,1256 # 8002e350 <__func__.0+0x468>
    80000e70:	5ba2a0ef          	jal	8002b42a <printf>
    80000e74:	4501                	li	a0,0
    80000e76:	16a2a0ef          	jal	8002afe0 <exit>
            uint64_t temp = CSRR(mstatus);
    80000e7a:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e7e:	fc0007b7          	lui	a5,0xfc000
    80000e82:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000e84:	07b6                	slli	a5,a5,0xd
    80000e86:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e8a:	ffe5069b          	addiw	a3,a0,-2
    80000e8e:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e90:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e92:	06d67363          	bgeu	a2,a3,80000ef8 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000e96:	e501                	bnez	a0,80000e9e <set_prev_priv+0x76>
    80000e98:	4705                	li	a4,1
    80000e9a:	171e                	slli	a4,a4,0x27
    80000e9c:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000e9e:	30079073          	csrw	mstatus,a5
        break;
    80000ea2:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ea4:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ea8:	4705                	li	a4,1
    80000eaa:	ffe5069b          	addiw	a3,a0,-2
    80000eae:	02d77763          	bgeu	a4,a3,80000edc <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000eb2:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000eb6:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000eba:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000ebe:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ec2:	e119                	bnez	a0,80000ec8 <set_prev_priv+0xa0>
    80000ec4:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000ec8:	60079073          	csrw	hstatus,a5
        break;
    80000ecc:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ece:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000ed2:	10000793          	li	a5,256
    80000ed6:	1007b073          	csrc	sstatus,a5
        break;
    80000eda:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000edc:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000ee0:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ee4:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ee8:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000eea:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000eee:	fce51de3          	bne	a0,a4,80000ec8 <set_prev_priv+0xa0>
    80000ef2:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ef6:	b7f9                	j	80000ec4 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ef8:	6705                	lui	a4,0x1
    80000efa:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000efe:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000f00:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000f02:	f8d50be3          	beq	a0,a3,80000e98 <set_prev_priv+0x70>
    80000f06:	bf61                	j	80000e9e <set_prev_priv+0x76>

0000000080000f08 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000f08:	1101                	addi	sp,sp,-32
    80000f0a:	e822                	sd	s0,16(sp)
    80000f0c:	ec06                	sd	ra,24(sp)
    80000f0e:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f10:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000f12:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f14:	02a7f963          	bgeu	a5,a0,80000f46 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f18:	0003b797          	auipc	a5,0x3b
    80000f1c:	9087a783          	lw	a5,-1784(a5) # 8003b820 <real_priv>
    80000f20:	0003b497          	auipc	s1,0x3b
    80000f24:	90448493          	addi	s1,s1,-1788 # 8003b824 <curr_priv>
    80000f28:	00a78963          	beq	a5,a0,80000f3a <goto_priv+0x32>
    80000f2c:	4791                	li	a5,4
    80000f2e:	0003b497          	auipc	s1,0x3b
    80000f32:	8f648493          	addi	s1,s1,-1802 # 8003b824 <curr_priv>
    80000f36:	06a7d363          	bge	a5,a0,80000f9c <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000f3a:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000f3c:	60e2                	ld	ra,24(sp)
    80000f3e:	6442                	ld	s0,16(sp)
    80000f40:	64a2                	ld	s1,8(sp)
    80000f42:	6105                	addi	sp,sp,32
    80000f44:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f46:	0003b717          	auipc	a4,0x3b
    80000f4a:	8de72703          	lw	a4,-1826(a4) # 8003b824 <curr_priv>
    80000f4e:	0003b497          	auipc	s1,0x3b
    80000f52:	8d648493          	addi	s1,s1,-1834 # 8003b824 <curr_priv>
    80000f56:	0ae7f863          	bgeu	a5,a4,80001006 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f5a:	0003b797          	auipc	a5,0x3b
    80000f5e:	8c67a783          	lw	a5,-1850(a5) # 8003b820 <real_priv>
    80000f62:	fca78ce3          	beq	a5,a0,80000f3a <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000f66:	4789                	li	a5,2
    80000f68:	06f71063          	bne	a4,a5,80000fc8 <goto_priv+0xc0>
    80000f6c:	4785                	li	a5,1
    80000f6e:	04f41d63          	bne	s0,a5,80000fc8 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000f72:	0002d517          	auipc	a0,0x2d
    80000f76:	47650513          	addi	a0,a0,1142 # 8002e3e8 <__func__.0+0x500>
    80000f7a:	4b02a0ef          	jal	8002b42a <printf>
    80000f7e:	05a00613          	li	a2,90
        ERROR("cant lower priv from u");
    80000f82:	0002b597          	auipc	a1,0x2b
    80000f86:	16e58593          	addi	a1,a1,366 # 8002c0f0 <__func__.4>
    80000f8a:	0002d517          	auipc	a0,0x2d
    80000f8e:	3c650513          	addi	a0,a0,966 # 8002e350 <__func__.0+0x468>
    80000f92:	4982a0ef          	jal	8002b42a <printf>
    80000f96:	4501                	li	a0,0
    80000f98:	0482a0ef          	jal	8002afe0 <exit>
    if(target_priv > curr_priv){
    80000f9c:	0003b797          	auipc	a5,0x3b
    80000fa0:	8887a783          	lw	a5,-1912(a5) # 8003b824 <curr_priv>
    80000fa4:	02a7f063          	bgeu	a5,a0,80000fc4 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000fa8:	00057797          	auipc	a5,0x57
    80000fac:	05878793          	addi	a5,a5,88 # 80058000 <ecall_args>
    80000fb0:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000fb2:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000fb4:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000fb6:	00000073          	ecall
}
    80000fba:	60e2                	ld	ra,24(sp)
    80000fbc:	6442                	ld	s0,16(sp)
    80000fbe:	64a2                	ld	s1,8(sp)
    80000fc0:	6105                	addi	sp,sp,32
    80000fc2:	8082                	ret
    if(priv == curr_priv) 
    80000fc4:	f6f50ce3          	beq	a0,a5,80000f3c <goto_priv+0x34>
    set_prev_priv(priv);
    80000fc8:	8522                	mv	a0,s0
    80000fca:	e5fff0ef          	jal	80000e28 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000fce:	0003b797          	auipc	a5,0x3b
    80000fd2:	8567a783          	lw	a5,-1962(a5) # 8003b824 <curr_priv>
    real_priv = priv;
    80000fd6:	0003b717          	auipc	a4,0x3b
    80000fda:	84872523          	sw	s0,-1974(a4) # 8003b820 <real_priv>
    if(curr_priv == PRIV_M) {
    80000fde:	4711                	li	a4,4
    80000fe0:	04e78e63          	beq	a5,a4,8000103c <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000fe4:	37f9                	addiw	a5,a5,-2
    80000fe6:	4705                	li	a4,1
    80000fe8:	04f76163          	bltu	a4,a5,8000102a <goto_priv+0x122>
        asm volatile(
    80000fec:	00000297          	auipc	t0,0x0
    80000ff0:	01028293          	addi	t0,t0,16 # 80000ffc <goto_priv+0xf4>
    80000ff4:	14129073          	csrw	sepc,t0
    80000ff8:	10200073          	sret
    curr_priv = priv;
    80000ffc:	0003b797          	auipc	a5,0x3b
    80001000:	8287a423          	sw	s0,-2008(a5) # 8003b824 <curr_priv>
    80001004:	bf25                	j	80000f3c <goto_priv+0x34>
        goto_priv(PRIV_M);
    80001006:	4511                	li	a0,4
    80001008:	f01ff0ef          	jal	80000f08 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    8000100c:	0003b797          	auipc	a5,0x3b
    80001010:	8147a783          	lw	a5,-2028(a5) # 8003b820 <real_priv>
    80001014:	f28783e3          	beq	a5,s0,80000f3a <goto_priv+0x32>
    if(target_priv > curr_priv){
    80001018:	0003b717          	auipc	a4,0x3b
    8000101c:	80c72703          	lw	a4,-2036(a4) # 8003b824 <curr_priv>
    80001020:	f88764e3          	bltu	a4,s0,80000fa8 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80001024:	f0870ce3          	beq	a4,s0,80000f3c <goto_priv+0x34>
    80001028:	bf3d                	j	80000f66 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    8000102a:	0002d517          	auipc	a0,0x2d
    8000102e:	3ee50513          	addi	a0,a0,1006 # 8002e418 <__func__.0+0x530>
    80001032:	3f82a0ef          	jal	8002b42a <printf>
    80001036:	07200613          	li	a2,114
    8000103a:	b7a1                	j	80000f82 <goto_priv+0x7a>
        asm volatile(
    8000103c:	00000297          	auipc	t0,0x0
    80001040:	01028293          	addi	t0,t0,16 # 8000104c <goto_priv+0x144>
    80001044:	34129073          	csrw	mepc,t0
    80001048:	30200073          	mret
    8000104c:	bf45                	j	80000ffc <goto_priv+0xf4>

000000008000104e <excpt_info>:
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    else return epc + 2;
}

void excpt_info(){
    const char* x = excpt.triggered ? "是" : "否";
    8000104e:	00057797          	auipc	a5,0x57
    80001052:	fc37c783          	lbu	a5,-61(a5) # 80058011 <excpt+0x1>
void excpt_info(){
    80001056:	1141                	addi	sp,sp,-16
    80001058:	e406                	sd	ra,8(sp)
    const char* x = excpt.triggered ? "是" : "否";
    8000105a:	0002d597          	auipc	a1,0x2d
    8000105e:	3e658593          	addi	a1,a1,998 # 8002e440 <__func__.0+0x558>
    80001062:	e789                	bnez	a5,8000106c <excpt_info+0x1e>
    80001064:	0002d597          	auipc	a1,0x2d
    80001068:	3e458593          	addi	a1,a1,996 # 8002e448 <__func__.0+0x560>
    printf("异常触发：%s\n",x);
    8000106c:	0002d517          	auipc	a0,0x2d
    80001070:	3e450513          	addi	a0,a0,996 # 8002e450 <__func__.0+0x568>
    80001074:	3b62a0ef          	jal	8002b42a <printf>
    printf("异常原因：%d\n",excpt.cause);
}
    80001078:	60a2                	ld	ra,8(sp)
    printf("异常原因：%d\n",excpt.cause);
    8000107a:	00057597          	auipc	a1,0x57
    8000107e:	f9e5b583          	ld	a1,-98(a1) # 80058018 <excpt+0x8>
    80001082:	0002d517          	auipc	a0,0x2d
    80001086:	3e650513          	addi	a0,a0,998 # 8002e468 <__func__.0+0x580>
}
    8000108a:	0141                	addi	sp,sp,16
    printf("异常原因：%d\n",excpt.cause);
    8000108c:	39e2a06f          	j	8002b42a <printf>

0000000080001090 <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80001090:	715d                	addi	sp,sp,-80
    80001092:	f44e                	sd	s3,40(sp)
    80001094:	e486                	sd	ra,72(sp)
    80001096:	e0a2                	sd	s0,64(sp)
    80001098:	fc26                	sd	s1,56(sp)
    8000109a:	f84a                	sd	s2,48(sp)
    8000109c:	f052                	sd	s4,32(sp)
    8000109e:	ec56                	sd	s5,24(sp)
    800010a0:	e85a                	sd	s6,16(sp)
    800010a2:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    800010a4:	0003a997          	auipc	s3,0x3a
    800010a8:	77c98993          	addi	s3,s3,1916 # 8003b820 <real_priv>
    800010ac:	4791                	li	a5,4
    800010ae:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    800010b2:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    800010b6:	34102973          	csrr	s2,mepc
    800010ba:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    800010bc:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    800010c0:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    800010c4:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800010c8:	478d                	li	a5,3
    800010ca:	ff848713          	addi	a4,s1,-8
    800010ce:	12e7ef63          	bltu	a5,a4,8000120c <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    800010d2:	00057417          	auipc	s0,0x57
    800010d6:	f2e40413          	addi	s0,s0,-210 # 80058000 <ecall_args>
    800010da:	6018                	ld	a4,0(s0)
    800010dc:	4785                	li	a5,1
    800010de:	1cf70763          	beq	a4,a5,800012ac <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800010e2:	00057797          	auipc	a5,0x57
    800010e6:	f2e7c783          	lbu	a5,-210(a5) # 80058010 <excpt>
    800010ea:	c3cd                	beqz	a5,8000118c <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    800010ec:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    800010ee:	4791                	li	a5,4
    excpt.cause = cause;
    800010f0:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    800010f2:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    800010f6:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    800010fa:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    800010fe:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001102:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80001106:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80001108:	300027f3          	csrr	a5,mstatus
    8000110c:	9399                	srli	a5,a5,0x26
    8000110e:	8ff9                	and	a5,a5,a4
    80001110:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80001114:	300027f3          	csrr	a5,mstatus
    80001118:	939d                	srli	a5,a5,0x27
    8000111a:	8ff9                	and	a5,a5,a4
    8000111c:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001120:	00057797          	auipc	a5,0x57
    80001124:	ee078823          	sb	zero,-272(a5) # 80058010 <excpt>
    if(is_inst_fault(cause)){
    80001128:	47d1                	li	a5,20
    8000112a:	0097ed63          	bltu	a5,s1,80001144 <mhandler+0xb4>
    8000112e:	001017b7          	lui	a5,0x101
    80001132:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001134:	0097d7b3          	srl	a5,a5,s1
    80001138:	8ff9                	and	a5,a5,a4
    8000113a:	c789                	beqz	a5,80001144 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    8000113c:	04843a03          	ld	s4,72(s0)
    80001140:	0e0a0763          	beqz	s4,8000122e <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001144:	0003a797          	auipc	a5,0x3a
    80001148:	6e07a783          	lw	a5,1760(a5) # 8003b824 <curr_priv>
    unsigned temp_priv = real_priv;
    8000114c:	0003a517          	auipc	a0,0x3a
    80001150:	6d452503          	lw	a0,1748(a0) # 8003b820 <real_priv>
    excpt.fault_inst = 0;
    80001154:	00057717          	auipc	a4,0x57
    80001158:	ee073a23          	sd	zero,-268(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    8000115c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001160:	478d                	li	a5,3
    80001162:	04f50a63          	beq	a0,a5,800011b6 <mhandler+0x126>
    80001166:	4791                	li	a5,4
    80001168:	0ef50363          	beq	a0,a5,8000124e <mhandler+0x1be>
    8000116c:	4789                	li	a5,2
    8000116e:	06f50263          	beq	a0,a5,800011d2 <mhandler+0x142>
}
    80001172:	60a6                	ld	ra,72(sp)
    80001174:	6406                	ld	s0,64(sp)
    80001176:	1502                	slli	a0,a0,0x20
    80001178:	74e2                	ld	s1,56(sp)
    8000117a:	7942                	ld	s2,48(sp)
    8000117c:	79a2                	ld	s3,40(sp)
    8000117e:	7a02                	ld	s4,32(sp)
    80001180:	6ae2                	ld	s5,24(sp)
    80001182:	6b42                	ld	s6,16(sp)
    80001184:	6ba2                	ld	s7,8(sp)
    80001186:	9101                	srli	a0,a0,0x20
    80001188:	6161                	addi	sp,sp,80
    8000118a:	8082                	ret
        ERROR("untested exception!");
    8000118c:	0002d517          	auipc	a0,0x2d
    80001190:	2f450513          	addi	a0,a0,756 # 8002e480 <__func__.0+0x598>
    80001194:	2962a0ef          	jal	8002b42a <printf>
    80001198:	0ec00613          	li	a2,236
            ERROR("instruction fault without return address");
    8000119c:	0002b597          	auipc	a1,0x2b
    800011a0:	f6458593          	addi	a1,a1,-156 # 8002c100 <__func__.3>
    800011a4:	0002d517          	auipc	a0,0x2d
    800011a8:	1ac50513          	addi	a0,a0,428 # 8002e350 <__func__.0+0x468>
    800011ac:	27e2a0ef          	jal	8002b42a <printf>
    800011b0:	4501                	li	a0,0
    800011b2:	62f290ef          	jal	8002afe0 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011b6:	600026f3          	csrr	a3,hstatus
    800011ba:	0003a797          	auipc	a5,0x3a
    800011be:	66a7a783          	lw	a5,1642(a5) # 8003b824 <curr_priv>
    800011c2:	0806e713          	ori	a4,a3,128
    800011c6:	9bf5                	andi	a5,a5,-3
    800011c8:	c399                	beqz	a5,800011ce <mhandler+0x13e>
    800011ca:	f7f6f713          	andi	a4,a3,-129
    800011ce:	60071073          	csrw	hstatus,a4
    800011d2:	100027f3          	csrr	a5,sstatus
    800011d6:	0003a717          	auipc	a4,0x3a
    800011da:	64e72703          	lw	a4,1614(a4) # 8003b824 <curr_priv>
    800011de:	4685                	li	a3,1
    800011e0:	edf7f793          	andi	a5,a5,-289
    800011e4:	3779                	addiw	a4,a4,-2
    800011e6:	04e6fd63          	bgeu	a3,a4,80001240 <mhandler+0x1b0>
    800011ea:	10079073          	csrw	sstatus,a5
    800011ee:	f804c2e3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011f2:	000a5783          	lhu	a5,0(s4)
    800011f6:	468d                	li	a3,3
    else return epc + 2;
    800011f8:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fc:	8ff5                	and	a5,a5,a3
    800011fe:	00d79463          	bne	a5,a3,80001206 <mhandler+0x176>
    80001202:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001206:	14171073          	csrw	sepc,a4
    8000120a:	b7a5                	j	80001172 <mhandler+0xe2>
    } else if(!excpt.testing){
    8000120c:	00057797          	auipc	a5,0x57
    80001210:	e047c783          	lbu	a5,-508(a5) # 80058010 <excpt>
    80001214:	dfa5                	beqz	a5,8000118c <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80001216:	0004d763          	bgez	s1,80001224 <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    8000121a:	4785                	li	a5,1
    8000121c:	009797b3          	sll	a5,a5,s1
    80001220:	3447b073          	csrc	mip,a5
    80001224:	00057417          	auipc	s0,0x57
    80001228:	ddc40413          	addi	s0,s0,-548 # 80058000 <ecall_args>
    8000122c:	b5c1                	j	800010ec <mhandler+0x5c>
            ERROR("instruction fault without return address");
    8000122e:	0002d517          	auipc	a0,0x2d
    80001232:	27a50513          	addi	a0,a0,634 # 8002e4a8 <__func__.0+0x5c0>
    80001236:	1f42a0ef          	jal	8002b42a <printf>
    8000123a:	10200613          	li	a2,258
    8000123e:	bfb9                	j	8000119c <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001240:	1007e793          	ori	a5,a5,256
    80001244:	10079073          	csrw	sstatus,a5
    80001248:	fa04d5e3          	bgez	s1,800011f2 <mhandler+0x162>
    8000124c:	b71d                	j	80001172 <mhandler+0xe2>
    8000124e:	30002773          	csrr	a4,mstatus
    80001252:	fc0007b7          	lui	a5,0xfc000
    80001256:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001258:	0003a697          	auipc	a3,0x3a
    8000125c:	5cc6a683          	lw	a3,1484(a3) # 8003b824 <curr_priv>
    80001260:	07b6                	slli	a5,a5,0xd
    80001262:	77f78793          	addi	a5,a5,1919
    80001266:	8ff9                	and	a5,a5,a4
    80001268:	04a68663          	beq	a3,a0,800012b4 <mhandler+0x224>
    8000126c:	ffe6871b          	addiw	a4,a3,-2
    80001270:	4605                	li	a2,1
    80001272:	04e66663          	bltu	a2,a4,800012be <mhandler+0x22e>
    80001276:	6705                	lui	a4,0x1
    80001278:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    8000127c:	4609                	li	a2,2
    8000127e:	8fd9                	or	a5,a5,a4
    80001280:	00c69563          	bne	a3,a2,8000128a <mhandler+0x1fa>
    80001284:	4705                	li	a4,1
    80001286:	171e                	slli	a4,a4,0x27
    80001288:	8fd9                	or	a5,a5,a4
    8000128a:	30079073          	csrw	mstatus,a5
    8000128e:	ee04c2e3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001292:	000a5783          	lhu	a5,0(s4)
    80001296:	468d                	li	a3,3
    else return epc + 2;
    80001298:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000129c:	8ff5                	and	a5,a5,a3
    8000129e:	00d79463          	bne	a5,a3,800012a6 <mhandler+0x216>
    800012a2:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012a6:	34171073          	csrw	mepc,a4
    800012aa:	b5e1                	j	80001172 <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    800012ac:	4408                	lw	a0,8(s0)
    800012ae:	c5bff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    800012b2:	bd2d                	j	800010ec <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012b4:	6709                	lui	a4,0x2
    800012b6:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800012ba:	8fd9                	or	a5,a5,a4
    800012bc:	b7f9                	j	8000128a <mhandler+0x1fa>
    800012be:	d2f9                	beqz	a3,80001284 <mhandler+0x1f4>
    800012c0:	b7e9                	j	8000128a <mhandler+0x1fa>

00000000800012c2 <hshandler>:
uint64_t hshandler(){
    800012c2:	715d                	addi	sp,sp,-80
    800012c4:	f44e                	sd	s3,40(sp)
    800012c6:	e486                	sd	ra,72(sp)
    800012c8:	e0a2                	sd	s0,64(sp)
    800012ca:	fc26                	sd	s1,56(sp)
    800012cc:	f84a                	sd	s2,48(sp)
    800012ce:	f052                	sd	s4,32(sp)
    800012d0:	ec56                	sd	s5,24(sp)
    800012d2:	e85a                	sd	s6,16(sp)
    800012d4:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    800012d6:	0003a997          	auipc	s3,0x3a
    800012da:	54a98993          	addi	s3,s3,1354 # 8003b820 <real_priv>
    800012de:	478d                	li	a5,3
    800012e0:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    800012e4:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    800012e8:	14102973          	csrr	s2,sepc
    800012ec:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    800012ee:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    800012f2:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    800012f6:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800012fa:	ff848713          	addi	a4,s1,-8
    800012fe:	02e7ef63          	bltu	a5,a4,8000133c <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80001302:	00057417          	auipc	s0,0x57
    80001306:	cfe40413          	addi	s0,s0,-770 # 80058000 <ecall_args>
    8000130a:	6018                	ld	a4,0(s0)
    8000130c:	4785                	li	a5,1
    8000130e:	14f70063          	beq	a4,a5,8000144e <hshandler+0x18c>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80001312:	0002d517          	auipc	a0,0x2d
    80001316:	1d650513          	addi	a0,a0,470 # 8002e4e8 <__func__.0+0x600>
    8000131a:	1102a0ef          	jal	8002b42a <printf>
    8000131e:	12200613          	li	a2,290
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80001322:	0002b597          	auipc	a1,0x2b
    80001326:	dee58593          	addi	a1,a1,-530 # 8002c110 <__func__.2>
    8000132a:	0002d517          	auipc	a0,0x2d
    8000132e:	02650513          	addi	a0,a0,38 # 8002e350 <__func__.0+0x468>
    80001332:	0f82a0ef          	jal	8002b42a <printf>
    80001336:	4501                	li	a0,0
    80001338:	4a9290ef          	jal	8002afe0 <exit>
    } else if(!excpt.testing){
    8000133c:	00057797          	auipc	a5,0x57
    80001340:	cd47c783          	lbu	a5,-812(a5) # 80058010 <excpt>
    80001344:	cfe5                	beqz	a5,8000143c <hshandler+0x17a>
    }
    
    if(cause & (1ULL << 63)){
    80001346:	0004d963          	bgez	s1,80001358 <hshandler+0x96>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    8000134a:	4785                	li	a5,1
    8000134c:	009797b3          	sll	a5,a5,s1
    80001350:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80001354:	6447b073          	csrc	hip,a5
    80001358:	00057417          	auipc	s0,0x57
    8000135c:	ca840413          	addi	s0,s0,-856 # 80058000 <ecall_args>
    }

    excpt.triggered = true;
    80001360:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    80001362:	478d                	li	a5,3
    excpt.cause = cause;
    80001364:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001366:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    8000136a:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    8000136e:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80001372:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001376:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    8000137a:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    8000137c:	600027f3          	csrr	a5,hstatus
    80001380:	8399                	srli	a5,a5,0x6
    80001382:	8ff9                	and	a5,a5,a4
    80001384:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80001388:	600027f3          	csrr	a5,hstatus
    8000138c:	839d                	srli	a5,a5,0x7
    8000138e:	8ff9                	and	a5,a5,a4
    80001390:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001394:	00057797          	auipc	a5,0x57
    80001398:	c6078e23          	sb	zero,-900(a5) # 80058010 <excpt>
    if(is_inst_fault(cause)){
    8000139c:	47d1                	li	a5,20
    8000139e:	0097ed63          	bltu	a5,s1,800013b8 <hshandler+0xf6>
    800013a2:	001017b7          	lui	a5,0x101
    800013a6:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    800013a8:	0097d7b3          	srl	a5,a5,s1
    800013ac:	8ff9                	and	a5,a5,a4
    800013ae:	c789                	beqz	a5,800013b8 <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    800013b0:	04843a03          	ld	s4,72(s0)
    800013b4:	0a0a0163          	beqz	s4,80001456 <hshandler+0x194>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800013b8:	0003a797          	auipc	a5,0x3a
    800013bc:	46c7a783          	lw	a5,1132(a5) # 8003b824 <curr_priv>
    unsigned temp_priv = real_priv;
    800013c0:	0003a517          	auipc	a0,0x3a
    800013c4:	46052503          	lw	a0,1120(a0) # 8003b820 <real_priv>
    excpt.fault_inst = 0;
    800013c8:	00057717          	auipc	a4,0x57
    800013cc:	c8073023          	sd	zero,-896(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    800013d0:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800013d4:	478d                	li	a5,3
    800013d6:	0ef50863          	beq	a0,a5,800014c6 <hshandler+0x204>
    800013da:	4791                	li	a5,4
    800013dc:	08f50663          	beq	a0,a5,80001468 <hshandler+0x1a6>
    800013e0:	4789                	li	a5,2
    800013e2:	04f51063          	bne	a0,a5,80001422 <hshandler+0x160>
    800013e6:	100027f3          	csrr	a5,sstatus
    800013ea:	0003a717          	auipc	a4,0x3a
    800013ee:	43a72703          	lw	a4,1082(a4) # 8003b824 <curr_priv>
    800013f2:	4685                	li	a3,1
    800013f4:	edf7f793          	andi	a5,a5,-289
    800013f8:	3779                	addiw	a4,a4,-2
    800013fa:	00e6e463          	bltu	a3,a4,80001402 <hshandler+0x140>
    800013fe:	1007e793          	ori	a5,a5,256
    80001402:	10079073          	csrw	sstatus,a5
    80001406:	0004ce63          	bltz	s1,80001422 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000140a:	000a5783          	lhu	a5,0(s4)
    8000140e:	468d                	li	a3,3
    else return epc + 2;
    80001410:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001414:	8ff5                	and	a5,a5,a3
    80001416:	00d79463          	bne	a5,a3,8000141e <hshandler+0x15c>
    8000141a:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000141e:	14171073          	csrw	sepc,a4
}
    80001422:	60a6                	ld	ra,72(sp)
    80001424:	6406                	ld	s0,64(sp)
    80001426:	1502                	slli	a0,a0,0x20
    80001428:	74e2                	ld	s1,56(sp)
    8000142a:	7942                	ld	s2,48(sp)
    8000142c:	79a2                	ld	s3,40(sp)
    8000142e:	7a02                	ld	s4,32(sp)
    80001430:	6ae2                	ld	s5,24(sp)
    80001432:	6b42                	ld	s6,16(sp)
    80001434:	6ba2                	ld	s7,8(sp)
    80001436:	9101                	srli	a0,a0,0x20
    80001438:	6161                	addi	sp,sp,80
    8000143a:	8082                	ret
        ERROR("untested exception!");
    8000143c:	0002d517          	auipc	a0,0x2d
    80001440:	04450513          	addi	a0,a0,68 # 8002e480 <__func__.0+0x598>
    80001444:	7e7290ef          	jal	8002b42a <printf>
    80001448:	12400613          	li	a2,292
    8000144c:	bdd9                	j	80001322 <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    8000144e:	4408                	lw	a0,8(s0)
    80001450:	ab9ff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    80001454:	b731                	j	80001360 <hshandler+0x9e>
            ERROR("instruction fault without return address");
    80001456:	0002d517          	auipc	a0,0x2d
    8000145a:	05250513          	addi	a0,a0,82 # 8002e4a8 <__func__.0+0x5c0>
    8000145e:	7cd290ef          	jal	8002b42a <printf>
    80001462:	13c00613          	li	a2,316
    80001466:	bd75                	j	80001322 <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001468:	30002773          	csrr	a4,mstatus
    8000146c:	fc0007b7          	lui	a5,0xfc000
    80001470:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001472:	0003a697          	auipc	a3,0x3a
    80001476:	3b26a683          	lw	a3,946(a3) # 8003b824 <curr_priv>
    8000147a:	07b6                	slli	a5,a5,0xd
    8000147c:	77f78793          	addi	a5,a5,1919
    80001480:	8ff9                	and	a5,a5,a4
    80001482:	06a68263          	beq	a3,a0,800014e6 <hshandler+0x224>
    80001486:	ffe6871b          	addiw	a4,a3,-2
    8000148a:	4605                	li	a2,1
    8000148c:	06e66263          	bltu	a2,a4,800014f0 <hshandler+0x22e>
    80001490:	6705                	lui	a4,0x1
    80001492:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001496:	4609                	li	a2,2
    80001498:	8fd9                	or	a5,a5,a4
    8000149a:	00c69563          	bne	a3,a2,800014a4 <hshandler+0x1e2>
    8000149e:	4705                	li	a4,1
    800014a0:	171e                	slli	a4,a4,0x27
    800014a2:	8fd9                	or	a5,a5,a4
    800014a4:	30079073          	csrw	mstatus,a5
    800014a8:	f604cde3          	bltz	s1,80001422 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014ac:	000a5783          	lhu	a5,0(s4)
    800014b0:	468d                	li	a3,3
    else return epc + 2;
    800014b2:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014b6:	8ff5                	and	a5,a5,a3
    800014b8:	00d79463          	bne	a5,a3,800014c0 <hshandler+0x1fe>
    800014bc:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014c0:	34171073          	csrw	mepc,a4
    800014c4:	bfb9                	j	80001422 <hshandler+0x160>
    800014c6:	600026f3          	csrr	a3,hstatus
    800014ca:	0003a797          	auipc	a5,0x3a
    800014ce:	35a7a783          	lw	a5,858(a5) # 8003b824 <curr_priv>
    800014d2:	0806e713          	ori	a4,a3,128
    800014d6:	9bf5                	andi	a5,a5,-3
    800014d8:	e781                	bnez	a5,800014e0 <hshandler+0x21e>
    800014da:	60071073          	csrw	hstatus,a4
    800014de:	b721                	j	800013e6 <hshandler+0x124>
    800014e0:	f7f6f713          	andi	a4,a3,-129
    800014e4:	bfdd                	j	800014da <hshandler+0x218>
    800014e6:	6709                	lui	a4,0x2
    800014e8:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800014ec:	8fd9                	or	a5,a5,a4
    800014ee:	bf5d                	j	800014a4 <hshandler+0x1e2>
    800014f0:	d6dd                	beqz	a3,8000149e <hshandler+0x1dc>
    800014f2:	bf4d                	j	800014a4 <hshandler+0x1e2>

00000000800014f4 <vshandler>:

uint64_t vshandler(){
    800014f4:	7139                	addi	sp,sp,-64
    800014f6:	f04a                	sd	s2,32(sp)
    800014f8:	fc06                	sd	ra,56(sp)
    800014fa:	f822                	sd	s0,48(sp)
    800014fc:	f426                	sd	s1,40(sp)
    800014fe:	ec4e                	sd	s3,24(sp)
    80001500:	e852                	sd	s4,16(sp)
    80001502:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    80001504:	0003a917          	auipc	s2,0x3a
    80001508:	31c90913          	addi	s2,s2,796 # 8003b820 <real_priv>
    8000150c:	4709                	li	a4,2
    8000150e:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    80001512:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    80001516:	141029f3          	csrr	s3,sepc
    8000151a:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    8000151c:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001520:	478d                	li	a5,3
    80001522:	ff840693          	addi	a3,s0,-8
    80001526:	04d7e663          	bltu	a5,a3,80001572 <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    8000152a:	00057a97          	auipc	s5,0x57
    8000152e:	ad6a8a93          	addi	s5,s5,-1322 # 80058000 <ecall_args>
    80001532:	000ab703          	ld	a4,0(s5)
    80001536:	4785                	li	a5,1
    80001538:	1cf70563          	beq	a4,a5,80001702 <vshandler+0x20e>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    8000153c:	00057797          	auipc	a5,0x57
    80001540:	ad47c783          	lbu	a5,-1324(a5) # 80058010 <excpt>
    80001544:	1c079363          	bnez	a5,8000170a <vshandler+0x216>
        ERROR("untested exception!");
    80001548:	0002d517          	auipc	a0,0x2d
    8000154c:	f3850513          	addi	a0,a0,-200 # 8002e480 <__func__.0+0x598>
    80001550:	6db290ef          	jal	8002b42a <printf>
    80001554:	15500613          	li	a2,341
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    80001558:	0002b597          	auipc	a1,0x2b
    8000155c:	bc858593          	addi	a1,a1,-1080 # 8002c120 <__func__.1>
    80001560:	0002d517          	auipc	a0,0x2d
    80001564:	df050513          	addi	a0,a0,-528 # 8002e350 <__func__.0+0x468>
    80001568:	6c3290ef          	jal	8002b42a <printf>
    8000156c:	4501                	li	a0,0
    8000156e:	273290ef          	jal	8002afe0 <exit>
    } else if(!excpt.testing){
    80001572:	00057697          	auipc	a3,0x57
    80001576:	a9e6c683          	lbu	a3,-1378(a3) # 80058010 <excpt>
    8000157a:	00057797          	auipc	a5,0x57
    8000157e:	a8678793          	addi	a5,a5,-1402 # 80058000 <ecall_args>
    80001582:	d2f9                	beqz	a3,80001548 <vshandler+0x54>
    if(cause & (1ULL << 63)){
    80001584:	0c045463          	bgez	s0,8000164c <vshandler+0x158>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001588:	4685                	li	a3,1
    8000158a:	008696b3          	sll	a3,a3,s0
    8000158e:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    80001592:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001596:	5208a0d7          	vid.v	v1
    8000159a:	00057697          	auipc	a3,0x57
    8000159e:	a7668693          	addi	a3,a3,-1418 # 80058010 <excpt>
    800015a2:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    800015a6:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800015a8:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800015aa:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800015ae:	0347b423          	sd	s4,40(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800015b2:	0003a797          	auipc	a5,0x3a
    800015b6:	2727a783          	lw	a5,626(a5) # 8003b824 <curr_priv>
    unsigned temp_priv = real_priv;
    800015ba:	0003a517          	auipc	a0,0x3a
    800015be:	26652503          	lw	a0,614(a0) # 8003b820 <real_priv>
    excpt.fault_inst = 0;
    800015c2:	00057717          	auipc	a4,0x57
    800015c6:	a8073323          	sd	zero,-1402(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    800015ca:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015ce:	478d                	li	a5,3
    800015d0:	02f50363          	beq	a0,a5,800015f6 <vshandler+0x102>
    800015d4:	4791                	li	a5,4
    800015d6:	0cf50763          	beq	a0,a5,800016a4 <vshandler+0x1b0>
    800015da:	4789                	li	a5,2
    800015dc:	02f50b63          	beq	a0,a5,80001612 <vshandler+0x11e>
}
    800015e0:	70e2                	ld	ra,56(sp)
    800015e2:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015e4:	1502                	slli	a0,a0,0x20
}
    800015e6:	74a2                	ld	s1,40(sp)
    800015e8:	7902                	ld	s2,32(sp)
    800015ea:	69e2                	ld	s3,24(sp)
    800015ec:	6a42                	ld	s4,16(sp)
    800015ee:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015f0:	9101                	srli	a0,a0,0x20
}
    800015f2:	6121                	addi	sp,sp,64
    800015f4:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015f6:	600026f3          	csrr	a3,hstatus
    800015fa:	0003a797          	auipc	a5,0x3a
    800015fe:	22a7a783          	lw	a5,554(a5) # 8003b824 <curr_priv>
    80001602:	0806e713          	ori	a4,a3,128
    80001606:	9bf5                	andi	a5,a5,-3
    80001608:	c399                	beqz	a5,8000160e <vshandler+0x11a>
    8000160a:	f7f6f713          	andi	a4,a3,-129
    8000160e:	60071073          	csrw	hstatus,a4
    80001612:	100027f3          	csrr	a5,sstatus
    80001616:	0003a717          	auipc	a4,0x3a
    8000161a:	20e72703          	lw	a4,526(a4) # 8003b824 <curr_priv>
    8000161e:	4685                	li	a3,1
    80001620:	edf7f793          	andi	a5,a5,-289
    80001624:	3779                	addiw	a4,a4,-2
    80001626:	06e6f863          	bgeu	a3,a4,80001696 <vshandler+0x1a2>
    8000162a:	10079073          	csrw	sstatus,a5
    8000162e:	fa0449e3          	bltz	s0,800015e0 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001632:	0004d783          	lhu	a5,0(s1)
    80001636:	468d                	li	a3,3
    else return epc + 2;
    80001638:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000163c:	8ff5                	and	a5,a5,a3
    8000163e:	00d79463          	bne	a5,a3,80001646 <vshandler+0x152>
    80001642:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001646:	14171073          	csrw	sepc,a4
    8000164a:	bf59                	j	800015e0 <vshandler+0xec>
    excpt.testing = false;
    8000164c:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001650:	5208a0d7          	vid.v	v1
    80001654:	00057697          	auipc	a3,0x57
    80001658:	9bc68693          	addi	a3,a3,-1604 # 80058010 <excpt>
    8000165c:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    80001660:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001662:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001664:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001668:	0347b423          	sd	s4,40(a5)
    if(is_inst_fault(cause)){
    8000166c:	4751                	li	a4,20
    8000166e:	f48762e3          	bltu	a4,s0,800015b2 <vshandler+0xbe>
    80001672:	00101737          	lui	a4,0x101
    80001676:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001678:	00875733          	srl	a4,a4,s0
    8000167c:	8b05                	andi	a4,a4,1
    8000167e:	db15                	beqz	a4,800015b2 <vshandler+0xbe>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001680:	67a4                	ld	s1,72(a5)
    80001682:	f885                	bnez	s1,800015b2 <vshandler+0xbe>
        else ERROR("instruction fault without return address");
    80001684:	0002d517          	auipc	a0,0x2d
    80001688:	e2450513          	addi	a0,a0,-476 # 8002e4a8 <__func__.0+0x5c0>
    8000168c:	59f290ef          	jal	8002b42a <printf>
    80001690:	16400613          	li	a2,356
    80001694:	b5d1                	j	80001558 <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001696:	1007e793          	ori	a5,a5,256
    8000169a:	10079073          	csrw	sstatus,a5
    8000169e:	f8045ae3          	bgez	s0,80001632 <vshandler+0x13e>
    800016a2:	bf3d                	j	800015e0 <vshandler+0xec>
    800016a4:	30002773          	csrr	a4,mstatus
    800016a8:	fc0007b7          	lui	a5,0xfc000
    800016ac:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800016ae:	0003a697          	auipc	a3,0x3a
    800016b2:	1766a683          	lw	a3,374(a3) # 8003b824 <curr_priv>
    800016b6:	07b6                	slli	a5,a5,0xd
    800016b8:	77f78793          	addi	a5,a5,1919
    800016bc:	8ff9                	and	a5,a5,a4
    800016be:	06a68a63          	beq	a3,a0,80001732 <vshandler+0x23e>
    800016c2:	ffe6871b          	addiw	a4,a3,-2
    800016c6:	4605                	li	a2,1
    800016c8:	06e66a63          	bltu	a2,a4,8000173c <vshandler+0x248>
    800016cc:	6705                	lui	a4,0x1
    800016ce:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800016d2:	4609                	li	a2,2
    800016d4:	8fd9                	or	a5,a5,a4
    800016d6:	00c69563          	bne	a3,a2,800016e0 <vshandler+0x1ec>
    800016da:	4705                	li	a4,1
    800016dc:	171e                	slli	a4,a4,0x27
    800016de:	8fd9                	or	a5,a5,a4
    800016e0:	30079073          	csrw	mstatus,a5
    800016e4:	ee044ee3          	bltz	s0,800015e0 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016e8:	0004d783          	lhu	a5,0(s1)
    800016ec:	468d                	li	a3,3
    else return epc + 2;
    800016ee:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016f2:	8ff5                	and	a5,a5,a3
    800016f4:	00d79463          	bne	a5,a3,800016fc <vshandler+0x208>
    800016f8:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800016fc:	34171073          	csrw	mepc,a4
    80001700:	b5c5                	j	800015e0 <vshandler+0xec>
        goto_priv(ecall_args[1]); 
    80001702:	008aa503          	lw	a0,8(s5)
    80001706:	803ff0ef          	jal	80000f08 <goto_priv>
    excpt.testing = false;
    8000170a:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    8000170e:	5208a0d7          	vid.v	v1
    80001712:	00057717          	auipc	a4,0x57
    80001716:	8fe70713          	addi	a4,a4,-1794 # 80058010 <excpt>
    excpt.priv = PRIV_VS;
    8000171a:	4789                	li	a5,2
    excpt.testing = false;
    8000171c:	020700a7          	vse8.v	v1,(a4)
    excpt.cause = cause;
    80001720:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    80001724:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    80001728:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    8000172c:	00faaa23          	sw	a5,20(s5)
    if(is_inst_fault(cause)){
    80001730:	b549                	j	800015b2 <vshandler+0xbe>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001732:	6709                	lui	a4,0x2
    80001734:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001738:	8fd9                	or	a5,a5,a4
    8000173a:	b75d                	j	800016e0 <vshandler+0x1ec>
    8000173c:	ded9                	beqz	a3,800016da <vshandler+0x1e6>
    8000173e:	b74d                	j	800016e0 <vshandler+0x1ec>

0000000080001740 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    80001740:	1141                	addi	sp,sp,-16
    80001742:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    80001744:	00357713          	andi	a4,a0,3
    80001748:	478d                	li	a5,3
    8000174a:	04f70763          	beq	a4,a5,80001798 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    8000174e:	77f9                	lui	a5,0xffffe
    80001750:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    80001752:	8fe9                	and	a5,a5,a0
    80001754:	6711                	lui	a4,0x4
    80001756:	85aa                	mv	a1,a0
    80001758:	08e78963          	beq	a5,a4,800017ea <expand_compressed_instruction+0xaa>
    8000175c:	6719                	lui	a4,0x6
    8000175e:	04e78663          	beq	a5,a4,800017aa <expand_compressed_instruction+0x6a>
    80001762:	6731                	lui	a4,0xc
    80001764:	0ae78b63          	beq	a5,a4,8000181a <expand_compressed_instruction+0xda>
    80001768:	6739                	lui	a4,0xe
    8000176a:	0ae78363          	beq	a5,a4,80001810 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    8000176e:	0002d517          	auipc	a0,0x2d
    80001772:	dda50513          	addi	a0,a0,-550 # 8002e548 <__func__.0+0x660>
    80001776:	4b5290ef          	jal	8002b42a <printf>
    8000177a:	18300613          	li	a2,387
    8000177e:	0002b597          	auipc	a1,0x2b
    80001782:	9b258593          	addi	a1,a1,-1614 # 8002c130 <__func__.0>
    80001786:	0002d517          	auipc	a0,0x2d
    8000178a:	bca50513          	addi	a0,a0,-1078 # 8002e350 <__func__.0+0x468>
    8000178e:	49d290ef          	jal	8002b42a <printf>
    80001792:	4501                	li	a0,0
    80001794:	04d290ef          	jal	8002afe0 <exit>
        ERROR("trying to expand non-compressed instruction");
    80001798:	0002d517          	auipc	a0,0x2d
    8000179c:	d7050513          	addi	a0,a0,-656 # 8002e508 <__func__.0+0x620>
    800017a0:	48b290ef          	jal	8002b42a <printf>
    800017a4:	17000613          	li	a2,368
    800017a8:	bfd9                	j	8000177e <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    800017aa:	668d                	lui	a3,0x3
    800017ac:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800017ae:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017b0:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017b4:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017b8:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017ba:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017bc:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017be:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    800017c0:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017c4:	0606                	slli	a2,a2,0x1
    800017c6:	0196161b          	slliw	a2,a2,0x19
    800017ca:	0e0005b7          	lui	a1,0xe000
    800017ce:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800017d0:	45d1                	li	a1,20
    800017d2:	c111                	beqz	a0,800017d6 <expand_compressed_instruction+0x96>
    800017d4:	459d                	li	a1,7
    }

}
    800017d6:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017d8:	00f7171b          	slliw	a4,a4,0xf
    800017dc:	8ed1                	or	a3,a3,a2
    800017de:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800017e0:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017e4:	8d59                	or	a0,a0,a4
}
    800017e6:	0141                	addi	sp,sp,16
    800017e8:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    800017ea:	6689                	lui	a3,0x2
    800017ec:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    800017ee:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017f0:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017f4:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800017f8:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017fc:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017fe:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001800:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001804:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001806:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001808:	4601                	li	a2,0
    8000180a:	fc0803e3          	beqz	a6,800017d0 <expand_compressed_instruction+0x90>
    8000180e:	bf4d                	j	800017c0 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001810:	668d                	lui	a3,0x3
    80001812:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    80001816:	4501                	li	a0,0
    80001818:	bf61                	j	800017b0 <expand_compressed_instruction+0x70>
    8000181a:	6689                	lui	a3,0x2
    8000181c:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    80001820:	4501                	li	a0,0
    80001822:	b7f9                	j	800017f0 <expand_compressed_instruction+0xb0>

0000000080001824 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    80001824:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    80001826:	4511                	li	a0,4
void reset_state(){
    80001828:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    8000182a:	edeff0ef          	jal	80000f08 <goto_priv>
    CSRW(mstatus, 0ULL);
    8000182e:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001832:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    80001836:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    8000183a:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    8000183e:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    80001842:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    80001846:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    8000184a:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    8000184e:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    80001852:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    80001856:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    8000185a:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    8000185e:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    80001862:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    80001866:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    8000186a:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    8000186e:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    80001872:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    80001876:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    8000187a:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    8000187e:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001882:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    80001886:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    8000188a:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    8000188e:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001892:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    80001896:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    8000189a:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    8000189e:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    800018a2:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    800018a6:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    800018aa:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    800018ae:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    800018b2:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    800018b6:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    800018ba:	0002a797          	auipc	a5,0x2a
    800018be:	da678793          	addi	a5,a5,-602 # 8002b660 <mhandler_entry>
    800018c2:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    800018c6:	50000793          	li	a5,1280
    800018ca:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    800018ce:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    800018d2:	57fd                	li	a5,-1
    800018d4:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    800018d8:	0002a797          	auipc	a5,0x2a
    800018dc:	dd078793          	addi	a5,a5,-560 # 8002b6a8 <hshandler_entry>
    800018e0:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    800018e4:	10000793          	li	a5,256
    800018e8:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    800018ec:	0002a797          	auipc	a5,0x2a
    800018f0:	e0478793          	addi	a5,a5,-508 # 8002b6f0 <vshandler_entry>
    800018f4:	20579073          	csrw	vstvec,a5

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800018f8:	20000713          	li	a4,512
    800018fc:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80001900:	40000793          	li	a5,1024
    80001904:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80001908:	20072073          	csrs	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8000190c:	2007b073          	csrc	vsstatus,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    80001910:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001914:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001918:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000191c:	60a2                	ld	ra,8(sp)
    8000191e:	0141                	addi	sp,sp,16
    80001920:	8082                	ret

0000000080001922 <random_m_instruction>:
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){    

    int rand1=CSRR(CSR_TIME);  
    80001922:	c01027f3          	rdtime	a5
    int rand2=CSRR(CSR_CYCLE);    
    80001926:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;   
    int num=num0%10;
    8000192a:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;   
    8000192e:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    80001930:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    80001934:	02e78733          	mul	a4,a5,a4
    80001938:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)    //注意负数
    8000193c:	4625                	li	a2,9
    int num=num0%10;
    8000193e:	9709                	srai	a4,a4,0x22
    80001940:	9f15                	subw	a4,a4,a3
    80001942:	0027169b          	slliw	a3,a4,0x2
    80001946:	9f35                	addw	a4,a4,a3
    80001948:	0017171b          	slliw	a4,a4,0x1
    8000194c:	9f99                	subw	a5,a5,a4
    switch (num)    //注意负数
    8000194e:	08f66a63          	bltu	a2,a5,800019e2 <random_m_instruction+0xc0>
    80001952:	02079713          	slli	a4,a5,0x20
    80001956:	01e75793          	srli	a5,a4,0x1e
    8000195a:	0002a717          	auipc	a4,0x2a
    8000195e:	7f670713          	addi	a4,a4,2038 # 8002c150 <__func__.0+0x20>
    80001962:	97ba                	add	a5,a5,a4
    80001964:	439c                	lw	a5,0(a5)
    80001966:	97ba                	add	a5,a5,a4
    80001968:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    8000196a:	0002d517          	auipc	a0,0x2d
    8000196e:	cf650513          	addi	a0,a0,-778 # 8002e660 <__func__.0+0x778>
    80001972:	6f42906f          	j	8002b066 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    80001976:	0002d517          	auipc	a0,0x2d
    8000197a:	d0250513          	addi	a0,a0,-766 # 8002e678 <__func__.0+0x790>
    8000197e:	6e82906f          	j	8002b066 <puts>
        printf("这是0号指令\n");
    80001982:	0002d517          	auipc	a0,0x2d
    80001986:	c1e50513          	addi	a0,a0,-994 # 8002e5a0 <__func__.0+0x6b8>
    8000198a:	6dc2906f          	j	8002b066 <puts>
        printf("这是1号指令\n");
    8000198e:	0002d517          	auipc	a0,0x2d
    80001992:	c2a50513          	addi	a0,a0,-982 # 8002e5b8 <__func__.0+0x6d0>
    80001996:	6d02906f          	j	8002b066 <puts>
        printf("这是2号指令\n");
    8000199a:	0002d517          	auipc	a0,0x2d
    8000199e:	c3650513          	addi	a0,a0,-970 # 8002e5d0 <__func__.0+0x6e8>
    800019a2:	6c42906f          	j	8002b066 <puts>
        printf("这是3号指令\n");
    800019a6:	0002d517          	auipc	a0,0x2d
    800019aa:	c4250513          	addi	a0,a0,-958 # 8002e5e8 <__func__.0+0x700>
    800019ae:	6b82906f          	j	8002b066 <puts>
        printf("这是4号指令\n");
    800019b2:	0002d517          	auipc	a0,0x2d
    800019b6:	c4e50513          	addi	a0,a0,-946 # 8002e600 <__func__.0+0x718>
    800019ba:	6ac2906f          	j	8002b066 <puts>
        printf("这是5号指令\n");
    800019be:	0002d517          	auipc	a0,0x2d
    800019c2:	c5a50513          	addi	a0,a0,-934 # 8002e618 <__func__.0+0x730>
    800019c6:	6a02906f          	j	8002b066 <puts>
        printf("这是6号指令\n");
    800019ca:	0002d517          	auipc	a0,0x2d
    800019ce:	c6650513          	addi	a0,a0,-922 # 8002e630 <__func__.0+0x748>
    800019d2:	6942906f          	j	8002b066 <puts>
        printf("这是7号指令\n");
    800019d6:	0002d517          	auipc	a0,0x2d
    800019da:	c7250513          	addi	a0,a0,-910 # 8002e648 <__func__.0+0x760>
    800019de:	6882906f          	j	8002b066 <puts>
        break;

    default:
        break;
    }
    800019e2:	8082                	ret

00000000800019e4 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    800019e4:	7179                	addi	sp,sp,-48

    TEST_START();
    800019e6:	0002a597          	auipc	a1,0x2a
    800019ea:	79258593          	addi	a1,a1,1938 # 8002c178 <__func__.3>
    800019ee:	0002c517          	auipc	a0,0x2c
    800019f2:	7da50513          	addi	a0,a0,2010 # 8002e1c8 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    800019f6:	f406                	sd	ra,40(sp)
    800019f8:	f022                	sd	s0,32(sp)
    800019fa:	ec26                	sd	s1,24(sp)
    800019fc:	e84a                	sd	s2,16(sp)
    800019fe:	e44e                	sd	s3,8(sp)
    80001a00:	e052                	sd	s4,0(sp)
    TEST_START();
    80001a02:	229290ef          	jal	8002b42a <printf>
    80001a06:	4529                	li	a0,10
    80001a08:	710280ef          	jal	8002a118 <putchar>

    CSRW(mideleg, 0);
    80001a0c:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001a10:	547d                	li	s0,-1
    80001a12:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001a16:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    80001a1a:	244029f3          	csrr	s3,vsip
    80001a1e:	24441073          	csrw	vsip,s0
    80001a22:	24402973          	csrr	s2,vsip
    80001a26:	6489                	lui	s1,0x2
    80001a28:	0002d617          	auipc	a2,0x2d
    80001a2c:	c6860613          	addi	a2,a2,-920 # 8002e690 <__func__.0+0x7a8>
    80001a30:	08200593          	li	a1,130
    80001a34:	0002c517          	auipc	a0,0x2c
    80001a38:	7ac50513          	addi	a0,a0,1964 # 8002e1e0 <__func__.0+0x2f8>
    80001a3c:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001a3e:	1ed290ef          	jal	8002b42a <printf>
    80001a42:	10990f63          	beq	s2,s1,80001b60 <check_xip_regs_1+0x17c>
    80001a46:	0002c597          	auipc	a1,0x2c
    80001a4a:	77258593          	addi	a1,a1,1906 # 8002e1b8 <__func__.0+0x2d0>
    80001a4e:	0002c517          	auipc	a0,0x2c
    80001a52:	7aa50513          	addi	a0,a0,1962 # 8002e1f8 <__func__.0+0x310>
    80001a56:	1d5290ef          	jal	8002b42a <printf>
    80001a5a:	0002c517          	auipc	a0,0x2c
    80001a5e:	7a650513          	addi	a0,a0,1958 # 8002e200 <__func__.0+0x318>
    80001a62:	1c9290ef          	jal	8002b42a <printf>
    80001a66:	86a6                	mv	a3,s1
    80001a68:	864a                	mv	a2,s2
    80001a6a:	85a2                	mv	a1,s0
    80001a6c:	0002c517          	auipc	a0,0x2c
    80001a70:	79c50513          	addi	a0,a0,1948 # 8002e208 <__func__.0+0x320>
    80001a74:	1b7290ef          	jal	8002b42a <printf>
    80001a78:	02900513          	li	a0,41
    80001a7c:	69c280ef          	jal	8002a118 <putchar>
    80001a80:	4529                	li	a0,10
    80001a82:	696280ef          	jal	8002a118 <putchar>
    80001a86:	4a01                	li	s4,0
    80001a88:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001a8c:	204029f3          	csrr	s3,vsie
    80001a90:	54fd                	li	s1,-1
    80001a92:	20449073          	csrw	vsie,s1
    80001a96:	20402973          	csrr	s2,vsie
    80001a9a:	6409                	lui	s0,0x2
    80001a9c:	0002d617          	auipc	a2,0x2d
    80001aa0:	bfc60613          	addi	a2,a2,-1028 # 8002e698 <__func__.0+0x7b0>
    80001aa4:	08200593          	li	a1,130
    80001aa8:	0002c517          	auipc	a0,0x2c
    80001aac:	73850513          	addi	a0,a0,1848 # 8002e1e0 <__func__.0+0x2f8>
    80001ab0:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001ab4:	177290ef          	jal	8002b42a <printf>
    80001ab8:	06890d63          	beq	s2,s0,80001b32 <check_xip_regs_1+0x14e>
    80001abc:	0002c597          	auipc	a1,0x2c
    80001ac0:	6fc58593          	addi	a1,a1,1788 # 8002e1b8 <__func__.0+0x2d0>
    80001ac4:	0002c517          	auipc	a0,0x2c
    80001ac8:	73450513          	addi	a0,a0,1844 # 8002e1f8 <__func__.0+0x310>
    80001acc:	15f290ef          	jal	8002b42a <printf>
    80001ad0:	0002c517          	auipc	a0,0x2c
    80001ad4:	73050513          	addi	a0,a0,1840 # 8002e200 <__func__.0+0x318>
    80001ad8:	153290ef          	jal	8002b42a <printf>
    80001adc:	86a2                	mv	a3,s0
    80001ade:	864a                	mv	a2,s2
    80001ae0:	85a6                	mv	a1,s1
    80001ae2:	0002c517          	auipc	a0,0x2c
    80001ae6:	72650513          	addi	a0,a0,1830 # 8002e208 <__func__.0+0x320>
    80001aea:	141290ef          	jal	8002b42a <printf>
    80001aee:	02900513          	li	a0,41
    80001af2:	626280ef          	jal	8002a118 <putchar>
    80001af6:	4529                	li	a0,10
    80001af8:	620280ef          	jal	8002a118 <putchar>
    80001afc:	20499073          	csrw	vsie,s3
    80001b00:	4401                	li	s0,0
    
    TEST_END();
    80001b02:	0002c597          	auipc	a1,0x2c
    80001b06:	6b658593          	addi	a1,a1,1718 # 8002e1b8 <__func__.0+0x2d0>
    80001b0a:	0002c517          	auipc	a0,0x2c
    80001b0e:	75650513          	addi	a0,a0,1878 # 8002e260 <__func__.0+0x378>
    80001b12:	119290ef          	jal	8002b42a <printf>
    80001b16:	4511                	li	a0,4
    80001b18:	bf0ff0ef          	jal	80000f08 <goto_priv>
    80001b1c:	d09ff0ef          	jal	80001824 <reset_state>
}
    80001b20:	70a2                	ld	ra,40(sp)
    80001b22:	8522                	mv	a0,s0
    80001b24:	7402                	ld	s0,32(sp)
    80001b26:	64e2                	ld	s1,24(sp)
    80001b28:	6942                	ld	s2,16(sp)
    80001b2a:	69a2                	ld	s3,8(sp)
    80001b2c:	6a02                	ld	s4,0(sp)
    80001b2e:	6145                	addi	sp,sp,48
    80001b30:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001b32:	0002c597          	auipc	a1,0x2c
    80001b36:	67658593          	addi	a1,a1,1654 # 8002e1a8 <__func__.0+0x2c0>
    80001b3a:	0002c517          	auipc	a0,0x2c
    80001b3e:	6be50513          	addi	a0,a0,1726 # 8002e1f8 <__func__.0+0x310>
    80001b42:	0e9290ef          	jal	8002b42a <printf>
    80001b46:	4529                	li	a0,10
    80001b48:	5d0280ef          	jal	8002a118 <putchar>
    80001b4c:	fa0a08e3          	beqz	s4,80001afc <check_xip_regs_1+0x118>
    80001b50:	20499073          	csrw	vsie,s3
    80001b54:	4405                	li	s0,1
    TEST_END();
    80001b56:	0002c597          	auipc	a1,0x2c
    80001b5a:	65258593          	addi	a1,a1,1618 # 8002e1a8 <__func__.0+0x2c0>
    80001b5e:	b775                	j	80001b0a <check_xip_regs_1+0x126>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    80001b60:	0002c597          	auipc	a1,0x2c
    80001b64:	64858593          	addi	a1,a1,1608 # 8002e1a8 <__func__.0+0x2c0>
    80001b68:	0002c517          	auipc	a0,0x2c
    80001b6c:	69050513          	addi	a0,a0,1680 # 8002e1f8 <__func__.0+0x310>
    80001b70:	0bb290ef          	jal	8002b42a <printf>
    80001b74:	4529                	li	a0,10
    80001b76:	5a2280ef          	jal	8002a118 <putchar>
    80001b7a:	4a05                	li	s4,1
    80001b7c:	b731                	j	80001a88 <check_xip_regs_1+0xa4>

0000000080001b7e <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001b7e:	1101                	addi	sp,sp,-32

    TEST_START();
    80001b80:	0002a597          	auipc	a1,0x2a
    80001b84:	61058593          	addi	a1,a1,1552 # 8002c190 <__func__.2>
    80001b88:	0002c517          	auipc	a0,0x2c
    80001b8c:	64050513          	addi	a0,a0,1600 # 8002e1c8 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    80001b90:	ec06                	sd	ra,24(sp)
    80001b92:	e822                	sd	s0,16(sp)
    80001b94:	e426                	sd	s1,8(sp)
    80001b96:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001b98:	093290ef          	jal	8002b42a <printf>
    80001b9c:	4529                	li	a0,10
    80001b9e:	57a280ef          	jal	8002a118 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001ba2:	57fd                	li	a5,-1
    80001ba4:	03f79713          	slli	a4,a5,0x3f
    80001ba8:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001bac:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001bb0:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001bb4:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001bb8:	64402473          	csrr	s0,hip
    80001bbc:	0002d617          	auipc	a2,0x2d
    80001bc0:	ae460613          	addi	a2,a2,-1308 # 8002e6a0 <__func__.0+0x7b8>
    80001bc4:	08200593          	li	a1,130
    80001bc8:	0002c517          	auipc	a0,0x2c
    80001bcc:	61850513          	addi	a0,a0,1560 # 8002e1e0 <__func__.0+0x2f8>
    80001bd0:	4491                	li	s1,4
    80001bd2:	059290ef          	jal	8002b42a <printf>
    80001bd6:	46940763          	beq	s0,s1,80002044 <check_xip_regs_2+0x4c6>
    80001bda:	0002c597          	auipc	a1,0x2c
    80001bde:	5de58593          	addi	a1,a1,1502 # 8002e1b8 <__func__.0+0x2d0>
    80001be2:	0002c517          	auipc	a0,0x2c
    80001be6:	61650513          	addi	a0,a0,1558 # 8002e1f8 <__func__.0+0x310>
    80001bea:	041290ef          	jal	8002b42a <printf>
    80001bee:	0002c517          	auipc	a0,0x2c
    80001bf2:	61250513          	addi	a0,a0,1554 # 8002e200 <__func__.0+0x318>
    80001bf6:	035290ef          	jal	8002b42a <printf>
    80001bfa:	8622                	mv	a2,s0
    80001bfc:	86a6                	mv	a3,s1
    80001bfe:	02d00593          	li	a1,45
    80001c02:	0002d517          	auipc	a0,0x2d
    80001c06:	aa650513          	addi	a0,a0,-1370 # 8002e6a8 <__func__.0+0x7c0>
    80001c0a:	021290ef          	jal	8002b42a <printf>
    80001c0e:	02900513          	li	a0,41
    80001c12:	506280ef          	jal	8002a118 <putchar>
    80001c16:	4529                	li	a0,10
    80001c18:	500280ef          	jal	8002a118 <putchar>
    80001c1c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x2222);    
    80001c1e:	14402973          	csrr	s2,sip
    80001c22:	6489                	lui	s1,0x2
    80001c24:	0002d617          	auipc	a2,0x2d
    80001c28:	a9c60613          	addi	a2,a2,-1380 # 8002e6c0 <__func__.0+0x7d8>
    80001c2c:	08200593          	li	a1,130
    80001c30:	0002c517          	auipc	a0,0x2c
    80001c34:	5b050513          	addi	a0,a0,1456 # 8002e1e0 <__func__.0+0x2f8>
    80001c38:	22248493          	addi	s1,s1,546 # 2222 <_test_table_size+0x2221>
    80001c3c:	7ee290ef          	jal	8002b42a <printf>
    80001c40:	3a990863          	beq	s2,s1,80001ff0 <check_xip_regs_2+0x472>
    80001c44:	0002c597          	auipc	a1,0x2c
    80001c48:	57458593          	addi	a1,a1,1396 # 8002e1b8 <__func__.0+0x2d0>
    80001c4c:	0002c517          	auipc	a0,0x2c
    80001c50:	5ac50513          	addi	a0,a0,1452 # 8002e1f8 <__func__.0+0x310>
    80001c54:	7d6290ef          	jal	8002b42a <printf>
    80001c58:	0002c517          	auipc	a0,0x2c
    80001c5c:	5a850513          	addi	a0,a0,1448 # 8002e200 <__func__.0+0x318>
    80001c60:	7ca290ef          	jal	8002b42a <printf>
    80001c64:	86a6                	mv	a3,s1
    80001c66:	864a                	mv	a2,s2
    80001c68:	02d00593          	li	a1,45
    80001c6c:	0002d517          	auipc	a0,0x2d
    80001c70:	a3c50513          	addi	a0,a0,-1476 # 8002e6a8 <__func__.0+0x7c0>
    80001c74:	7b6290ef          	jal	8002b42a <printf>
    80001c78:	02900513          	li	a0,41
    80001c7c:	49c280ef          	jal	8002a118 <putchar>
    80001c80:	4529                	li	a0,10
    80001c82:	496280ef          	jal	8002a118 <putchar>
    80001c86:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    80001c88:	24402973          	csrr	s2,vsip
    80001c8c:	6489                	lui	s1,0x2
    80001c8e:	0002d617          	auipc	a2,0x2d
    80001c92:	a0260613          	addi	a2,a2,-1534 # 8002e690 <__func__.0+0x7a8>
    80001c96:	08200593          	li	a1,130
    80001c9a:	0002c517          	auipc	a0,0x2c
    80001c9e:	54650513          	addi	a0,a0,1350 # 8002e1e0 <__func__.0+0x2f8>
    80001ca2:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001ca4:	786290ef          	jal	8002b42a <printf>
    80001ca8:	38990063          	beq	s2,s1,80002028 <check_xip_regs_2+0x4aa>
    80001cac:	0002c597          	auipc	a1,0x2c
    80001cb0:	50c58593          	addi	a1,a1,1292 # 8002e1b8 <__func__.0+0x2d0>
    80001cb4:	0002c517          	auipc	a0,0x2c
    80001cb8:	54450513          	addi	a0,a0,1348 # 8002e1f8 <__func__.0+0x310>
    80001cbc:	76e290ef          	jal	8002b42a <printf>
    80001cc0:	0002c517          	auipc	a0,0x2c
    80001cc4:	54050513          	addi	a0,a0,1344 # 8002e200 <__func__.0+0x318>
    80001cc8:	762290ef          	jal	8002b42a <printf>
    80001ccc:	86a6                	mv	a3,s1
    80001cce:	864a                	mv	a2,s2
    80001cd0:	02d00593          	li	a1,45
    80001cd4:	0002d517          	auipc	a0,0x2d
    80001cd8:	9d450513          	addi	a0,a0,-1580 # 8002e6a8 <__func__.0+0x7c0>
    80001cdc:	74e290ef          	jal	8002b42a <printf>
    80001ce0:	02900513          	li	a0,41
    80001ce4:	434280ef          	jal	8002a118 <putchar>
    80001ce8:	4529                	li	a0,10
    80001cea:	42e280ef          	jal	8002a118 <putchar>
    80001cee:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001cf0:	4509                	li	a0,2
    80001cf2:	a16ff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    80001cf6:	14402973          	csrr	s2,sip
    80001cfa:	6489                	lui	s1,0x2
    80001cfc:	0002d617          	auipc	a2,0x2d
    80001d00:	9cc60613          	addi	a2,a2,-1588 # 8002e6c8 <__func__.0+0x7e0>
    80001d04:	08200593          	li	a1,130
    80001d08:	0002c517          	auipc	a0,0x2c
    80001d0c:	4d850513          	addi	a0,a0,1240 # 8002e1e0 <__func__.0+0x2f8>
    80001d10:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001d12:	718290ef          	jal	8002b42a <printf>
    80001d16:	2e990b63          	beq	s2,s1,8000200c <check_xip_regs_2+0x48e>
    80001d1a:	0002c597          	auipc	a1,0x2c
    80001d1e:	49e58593          	addi	a1,a1,1182 # 8002e1b8 <__func__.0+0x2d0>
    80001d22:	0002c517          	auipc	a0,0x2c
    80001d26:	4d650513          	addi	a0,a0,1238 # 8002e1f8 <__func__.0+0x310>
    80001d2a:	700290ef          	jal	8002b42a <printf>
    80001d2e:	0002c517          	auipc	a0,0x2c
    80001d32:	4d250513          	addi	a0,a0,1234 # 8002e200 <__func__.0+0x318>
    80001d36:	6f4290ef          	jal	8002b42a <printf>
    80001d3a:	86a6                	mv	a3,s1
    80001d3c:	864a                	mv	a2,s2
    80001d3e:	02d00593          	li	a1,45
    80001d42:	0002d517          	auipc	a0,0x2d
    80001d46:	96650513          	addi	a0,a0,-1690 # 8002e6a8 <__func__.0+0x7c0>
    80001d4a:	6e0290ef          	jal	8002b42a <printf>
    80001d4e:	02900513          	li	a0,41
    80001d52:	3c6280ef          	jal	8002a118 <putchar>
    80001d56:	4529                	li	a0,10
    80001d58:	3c0280ef          	jal	8002a118 <putchar>
    80001d5c:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001d5e:	4511                	li	a0,4
    80001d60:	9a8ff0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001d64:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001d68:	644024f3          	csrr	s1,hip
    80001d6c:	0002d617          	auipc	a2,0x2d
    80001d70:	93460613          	addi	a2,a2,-1740 # 8002e6a0 <__func__.0+0x7b8>
    80001d74:	08200593          	li	a1,130
    80001d78:	0002c517          	auipc	a0,0x2c
    80001d7c:	46850513          	addi	a0,a0,1128 # 8002e1e0 <__func__.0+0x2f8>
    80001d80:	6aa290ef          	jal	8002b42a <printf>
    80001d84:	1a048663          	beqz	s1,80001f30 <check_xip_regs_2+0x3b2>
    80001d88:	0002c597          	auipc	a1,0x2c
    80001d8c:	43058593          	addi	a1,a1,1072 # 8002e1b8 <__func__.0+0x2d0>
    80001d90:	0002c517          	auipc	a0,0x2c
    80001d94:	46850513          	addi	a0,a0,1128 # 8002e1f8 <__func__.0+0x310>
    80001d98:	692290ef          	jal	8002b42a <printf>
    80001d9c:	0002c517          	auipc	a0,0x2c
    80001da0:	46450513          	addi	a0,a0,1124 # 8002e200 <__func__.0+0x318>
    80001da4:	686290ef          	jal	8002b42a <printf>
    80001da8:	8626                	mv	a2,s1
    80001daa:	4681                	li	a3,0
    80001dac:	02d00593          	li	a1,45
    80001db0:	0002d517          	auipc	a0,0x2d
    80001db4:	8f850513          	addi	a0,a0,-1800 # 8002e6a8 <__func__.0+0x7c0>
    80001db8:	672290ef          	jal	8002b42a <printf>
    80001dbc:	02900513          	li	a0,41
    80001dc0:	358280ef          	jal	8002a118 <putchar>
    80001dc4:	4529                	li	a0,10
    80001dc6:	352280ef          	jal	8002a118 <putchar>
    80001dca:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001dcc:	144024f3          	csrr	s1,sip
    80001dd0:	0002d617          	auipc	a2,0x2d
    80001dd4:	8f060613          	addi	a2,a2,-1808 # 8002e6c0 <__func__.0+0x7d8>
    80001dd8:	08200593          	li	a1,130
    80001ddc:	0002c517          	auipc	a0,0x2c
    80001de0:	40450513          	addi	a0,a0,1028 # 8002e1e0 <__func__.0+0x2f8>
    80001de4:	646290ef          	jal	8002b42a <printf>
    80001de8:	18048163          	beqz	s1,80001f6a <check_xip_regs_2+0x3ec>
    80001dec:	0002c597          	auipc	a1,0x2c
    80001df0:	3cc58593          	addi	a1,a1,972 # 8002e1b8 <__func__.0+0x2d0>
    80001df4:	0002c517          	auipc	a0,0x2c
    80001df8:	40450513          	addi	a0,a0,1028 # 8002e1f8 <__func__.0+0x310>
    80001dfc:	62e290ef          	jal	8002b42a <printf>
    80001e00:	0002c517          	auipc	a0,0x2c
    80001e04:	40050513          	addi	a0,a0,1024 # 8002e200 <__func__.0+0x318>
    80001e08:	622290ef          	jal	8002b42a <printf>
    80001e0c:	8626                	mv	a2,s1
    80001e0e:	4681                	li	a3,0
    80001e10:	02d00593          	li	a1,45
    80001e14:	0002d517          	auipc	a0,0x2d
    80001e18:	89450513          	addi	a0,a0,-1900 # 8002e6a8 <__func__.0+0x7c0>
    80001e1c:	60e290ef          	jal	8002b42a <printf>
    80001e20:	02900513          	li	a0,41
    80001e24:	2f4280ef          	jal	8002a118 <putchar>
    80001e28:	4529                	li	a0,10
    80001e2a:	2ee280ef          	jal	8002a118 <putchar>
    80001e2e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001e30:	244024f3          	csrr	s1,vsip
    80001e34:	0002d617          	auipc	a2,0x2d
    80001e38:	85c60613          	addi	a2,a2,-1956 # 8002e690 <__func__.0+0x7a8>
    80001e3c:	08200593          	li	a1,130
    80001e40:	0002c517          	auipc	a0,0x2c
    80001e44:	3a050513          	addi	a0,a0,928 # 8002e1e0 <__func__.0+0x2f8>
    80001e48:	5e2290ef          	jal	8002b42a <printf>
    80001e4c:	14048c63          	beqz	s1,80001fa4 <check_xip_regs_2+0x426>
    80001e50:	0002c597          	auipc	a1,0x2c
    80001e54:	36858593          	addi	a1,a1,872 # 8002e1b8 <__func__.0+0x2d0>
    80001e58:	0002c517          	auipc	a0,0x2c
    80001e5c:	3a050513          	addi	a0,a0,928 # 8002e1f8 <__func__.0+0x310>
    80001e60:	5ca290ef          	jal	8002b42a <printf>
    80001e64:	0002c517          	auipc	a0,0x2c
    80001e68:	39c50513          	addi	a0,a0,924 # 8002e200 <__func__.0+0x318>
    80001e6c:	5be290ef          	jal	8002b42a <printf>
    80001e70:	8626                	mv	a2,s1
    80001e72:	4681                	li	a3,0
    80001e74:	02d00593          	li	a1,45
    80001e78:	0002d517          	auipc	a0,0x2d
    80001e7c:	83050513          	addi	a0,a0,-2000 # 8002e6a8 <__func__.0+0x7c0>
    80001e80:	5aa290ef          	jal	8002b42a <printf>
    80001e84:	02900513          	li	a0,41
    80001e88:	290280ef          	jal	8002a118 <putchar>
    80001e8c:	4529                	li	a0,10
    80001e8e:	28a280ef          	jal	8002a118 <putchar>
    80001e92:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001e94:	4509                	li	a0,2
    80001e96:	872ff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e9a:	144024f3          	csrr	s1,sip
    80001e9e:	0002d617          	auipc	a2,0x2d
    80001ea2:	82a60613          	addi	a2,a2,-2006 # 8002e6c8 <__func__.0+0x7e0>
    80001ea6:	08200593          	li	a1,130
    80001eaa:	0002c517          	auipc	a0,0x2c
    80001eae:	33650513          	addi	a0,a0,822 # 8002e1e0 <__func__.0+0x2f8>
    80001eb2:	578290ef          	jal	8002b42a <printf>
    80001eb6:	10048563          	beqz	s1,80001fc0 <check_xip_regs_2+0x442>
    80001eba:	0002c597          	auipc	a1,0x2c
    80001ebe:	2fe58593          	addi	a1,a1,766 # 8002e1b8 <__func__.0+0x2d0>
    80001ec2:	0002c517          	auipc	a0,0x2c
    80001ec6:	33650513          	addi	a0,a0,822 # 8002e1f8 <__func__.0+0x310>
    80001eca:	560290ef          	jal	8002b42a <printf>
    80001ece:	0002c517          	auipc	a0,0x2c
    80001ed2:	33250513          	addi	a0,a0,818 # 8002e200 <__func__.0+0x318>
    80001ed6:	554290ef          	jal	8002b42a <printf>
    80001eda:	8626                	mv	a2,s1
    80001edc:	4681                	li	a3,0
    80001ede:	02d00593          	li	a1,45
    80001ee2:	0002c517          	auipc	a0,0x2c
    80001ee6:	7c650513          	addi	a0,a0,1990 # 8002e6a8 <__func__.0+0x7c0>
    80001eea:	540290ef          	jal	8002b42a <printf>
    80001eee:	02900513          	li	a0,41
    80001ef2:	226280ef          	jal	8002a118 <putchar>
    80001ef6:	4529                	li	a0,10
    80001ef8:	220280ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);   
    80001efc:	4511                	li	a0,4
    80001efe:	80aff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f02:	4401                	li	s0,0

    TEST_END();
    80001f04:	0002c597          	auipc	a1,0x2c
    80001f08:	2b458593          	addi	a1,a1,692 # 8002e1b8 <__func__.0+0x2d0>
    80001f0c:	0002c517          	auipc	a0,0x2c
    80001f10:	35450513          	addi	a0,a0,852 # 8002e260 <__func__.0+0x378>
    80001f14:	516290ef          	jal	8002b42a <printf>
    80001f18:	4511                	li	a0,4
    80001f1a:	feffe0ef          	jal	80000f08 <goto_priv>
    80001f1e:	907ff0ef          	jal	80001824 <reset_state>
}
    80001f22:	60e2                	ld	ra,24(sp)
    80001f24:	8522                	mv	a0,s0
    80001f26:	6442                	ld	s0,16(sp)
    80001f28:	64a2                	ld	s1,8(sp)
    80001f2a:	6902                	ld	s2,0(sp)
    80001f2c:	6105                	addi	sp,sp,32
    80001f2e:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f30:	0002c597          	auipc	a1,0x2c
    80001f34:	27858593          	addi	a1,a1,632 # 8002e1a8 <__func__.0+0x2c0>
    80001f38:	0002c517          	auipc	a0,0x2c
    80001f3c:	2c050513          	addi	a0,a0,704 # 8002e1f8 <__func__.0+0x310>
    80001f40:	4ea290ef          	jal	8002b42a <printf>
    80001f44:	4529                	li	a0,10
    80001f46:	1d2280ef          	jal	8002a118 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001f4a:	144024f3          	csrr	s1,sip
    80001f4e:	0002c617          	auipc	a2,0x2c
    80001f52:	77260613          	addi	a2,a2,1906 # 8002e6c0 <__func__.0+0x7d8>
    80001f56:	08200593          	li	a1,130
    80001f5a:	0002c517          	auipc	a0,0x2c
    80001f5e:	28650513          	addi	a0,a0,646 # 8002e1e0 <__func__.0+0x2f8>
    80001f62:	4c8290ef          	jal	8002b42a <printf>
    80001f66:	e80493e3          	bnez	s1,80001dec <check_xip_regs_2+0x26e>
    80001f6a:	0002c597          	auipc	a1,0x2c
    80001f6e:	23e58593          	addi	a1,a1,574 # 8002e1a8 <__func__.0+0x2c0>
    80001f72:	0002c517          	auipc	a0,0x2c
    80001f76:	28650513          	addi	a0,a0,646 # 8002e1f8 <__func__.0+0x310>
    80001f7a:	4b0290ef          	jal	8002b42a <printf>
    80001f7e:	4529                	li	a0,10
    80001f80:	198280ef          	jal	8002a118 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001f84:	244024f3          	csrr	s1,vsip
    80001f88:	0002c617          	auipc	a2,0x2c
    80001f8c:	70860613          	addi	a2,a2,1800 # 8002e690 <__func__.0+0x7a8>
    80001f90:	08200593          	li	a1,130
    80001f94:	0002c517          	auipc	a0,0x2c
    80001f98:	24c50513          	addi	a0,a0,588 # 8002e1e0 <__func__.0+0x2f8>
    80001f9c:	48e290ef          	jal	8002b42a <printf>
    80001fa0:	ea0498e3          	bnez	s1,80001e50 <check_xip_regs_2+0x2d2>
    80001fa4:	0002c597          	auipc	a1,0x2c
    80001fa8:	20458593          	addi	a1,a1,516 # 8002e1a8 <__func__.0+0x2c0>
    80001fac:	0002c517          	auipc	a0,0x2c
    80001fb0:	24c50513          	addi	a0,a0,588 # 8002e1f8 <__func__.0+0x310>
    80001fb4:	476290ef          	jal	8002b42a <printf>
    80001fb8:	4529                	li	a0,10
    80001fba:	15e280ef          	jal	8002a118 <putchar>
    80001fbe:	bdd9                	j	80001e94 <check_xip_regs_2+0x316>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001fc0:	0002c597          	auipc	a1,0x2c
    80001fc4:	1e858593          	addi	a1,a1,488 # 8002e1a8 <__func__.0+0x2c0>
    80001fc8:	0002c517          	auipc	a0,0x2c
    80001fcc:	23050513          	addi	a0,a0,560 # 8002e1f8 <__func__.0+0x310>
    80001fd0:	45a290ef          	jal	8002b42a <printf>
    80001fd4:	4529                	li	a0,10
    80001fd6:	142280ef          	jal	8002a118 <putchar>
    80001fda:	f20401e3          	beqz	s0,80001efc <check_xip_regs_2+0x37e>
    goto_priv(PRIV_M);   
    80001fde:	4511                	li	a0,4
    80001fe0:	f29fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001fe4:	4405                	li	s0,1
    TEST_END();
    80001fe6:	0002c597          	auipc	a1,0x2c
    80001fea:	1c258593          	addi	a1,a1,450 # 8002e1a8 <__func__.0+0x2c0>
    80001fee:	bf39                	j	80001f0c <check_xip_regs_2+0x38e>
    check_csr_rd("sip", sip, 0x2222);    
    80001ff0:	0002c597          	auipc	a1,0x2c
    80001ff4:	1b858593          	addi	a1,a1,440 # 8002e1a8 <__func__.0+0x2c0>
    80001ff8:	0002c517          	auipc	a0,0x2c
    80001ffc:	20050513          	addi	a0,a0,512 # 8002e1f8 <__func__.0+0x310>
    80002000:	42a290ef          	jal	8002b42a <printf>
    80002004:	4529                	li	a0,10
    80002006:	112280ef          	jal	8002a118 <putchar>
    8000200a:	b9bd                	j	80001c88 <check_xip_regs_2+0x10a>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    8000200c:	0002c597          	auipc	a1,0x2c
    80002010:	19c58593          	addi	a1,a1,412 # 8002e1a8 <__func__.0+0x2c0>
    80002014:	0002c517          	auipc	a0,0x2c
    80002018:	1e450513          	addi	a0,a0,484 # 8002e1f8 <__func__.0+0x310>
    8000201c:	40e290ef          	jal	8002b42a <printf>
    80002020:	4529                	li	a0,10
    80002022:	0f6280ef          	jal	8002a118 <putchar>
    80002026:	bb25                	j	80001d5e <check_xip_regs_2+0x1e0>
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    80002028:	0002c597          	auipc	a1,0x2c
    8000202c:	18058593          	addi	a1,a1,384 # 8002e1a8 <__func__.0+0x2c0>
    80002030:	0002c517          	auipc	a0,0x2c
    80002034:	1c850513          	addi	a0,a0,456 # 8002e1f8 <__func__.0+0x310>
    80002038:	3f2290ef          	jal	8002b42a <printf>
    8000203c:	4529                	li	a0,10
    8000203e:	0da280ef          	jal	8002a118 <putchar>
    80002042:	b17d                	j	80001cf0 <check_xip_regs_2+0x172>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80002044:	0002c597          	auipc	a1,0x2c
    80002048:	16458593          	addi	a1,a1,356 # 8002e1a8 <__func__.0+0x2c0>
    8000204c:	0002c517          	auipc	a0,0x2c
    80002050:	1ac50513          	addi	a0,a0,428 # 8002e1f8 <__func__.0+0x310>
    80002054:	3d6290ef          	jal	8002b42a <printf>
    80002058:	4529                	li	a0,10
    8000205a:	0be280ef          	jal	8002a118 <putchar>
    8000205e:	4405                	li	s0,1
    80002060:	be7d                	j	80001c1e <check_xip_regs_2+0xa0>

0000000080002062 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80002062:	1101                	addi	sp,sp,-32

    TEST_START();
    80002064:	0002a597          	auipc	a1,0x2a
    80002068:	14458593          	addi	a1,a1,324 # 8002c1a8 <__func__.1>
    8000206c:	0002c517          	auipc	a0,0x2c
    80002070:	15c50513          	addi	a0,a0,348 # 8002e1c8 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    80002074:	ec06                	sd	ra,24(sp)
    80002076:	e822                	sd	s0,16(sp)
    80002078:	e426                	sd	s1,8(sp)
    8000207a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000207c:	3ae290ef          	jal	8002b42a <printf>
    80002080:	4529                	li	a0,10
    80002082:	096280ef          	jal	8002a118 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80002086:	57fd                	li	a5,-1
    80002088:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000208c:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80002090:	64579073          	csrw	hvip,a5
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    80002094:	645024f3          	csrr	s1,hvip
    80002098:	6409                	lui	s0,0x2
    8000209a:	0002c617          	auipc	a2,0x2c
    8000209e:	64660613          	addi	a2,a2,1606 # 8002e6e0 <__func__.0+0x7f8>
    800020a2:	08200593          	li	a1,130
    800020a6:	0002c517          	auipc	a0,0x2c
    800020aa:	13a50513          	addi	a0,a0,314 # 8002e1e0 <__func__.0+0x2f8>
    800020ae:	44440413          	addi	s0,s0,1092 # 2444 <_test_table_size+0x2443>
    800020b2:	378290ef          	jal	8002b42a <printf>
    800020b6:	4a848663          	beq	s1,s0,80002562 <check_xip_regs_3+0x500>
    800020ba:	0002c597          	auipc	a1,0x2c
    800020be:	0fe58593          	addi	a1,a1,254 # 8002e1b8 <__func__.0+0x2d0>
    800020c2:	0002c517          	auipc	a0,0x2c
    800020c6:	13650513          	addi	a0,a0,310 # 8002e1f8 <__func__.0+0x310>
    800020ca:	360290ef          	jal	8002b42a <printf>
    800020ce:	0002c517          	auipc	a0,0x2c
    800020d2:	13250513          	addi	a0,a0,306 # 8002e200 <__func__.0+0x318>
    800020d6:	354290ef          	jal	8002b42a <printf>
    800020da:	86a2                	mv	a3,s0
    800020dc:	8626                	mv	a2,s1
    800020de:	02d00593          	li	a1,45
    800020e2:	0002c517          	auipc	a0,0x2c
    800020e6:	5c650513          	addi	a0,a0,1478 # 8002e6a8 <__func__.0+0x7c0>
    800020ea:	340290ef          	jal	8002b42a <printf>
    800020ee:	02900513          	li	a0,41
    800020f2:	026280ef          	jal	8002a118 <putchar>
    800020f6:	4529                	li	a0,10
    800020f8:	020280ef          	jal	8002a118 <putchar>
    800020fc:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    800020fe:	644024f3          	csrr	s1,hip
    80002102:	0002c617          	auipc	a2,0x2c
    80002106:	59e60613          	addi	a2,a2,1438 # 8002e6a0 <__func__.0+0x7b8>
    8000210a:	08200593          	li	a1,130
    8000210e:	0002c517          	auipc	a0,0x2c
    80002112:	0d250513          	addi	a0,a0,210 # 8002e1e0 <__func__.0+0x2f8>
    80002116:	44400913          	li	s2,1092
    8000211a:	310290ef          	jal	8002b42a <printf>
    8000211e:	3f248863          	beq	s1,s2,8000250e <check_xip_regs_3+0x4ac>
    80002122:	0002c597          	auipc	a1,0x2c
    80002126:	09658593          	addi	a1,a1,150 # 8002e1b8 <__func__.0+0x2d0>
    8000212a:	0002c517          	auipc	a0,0x2c
    8000212e:	0ce50513          	addi	a0,a0,206 # 8002e1f8 <__func__.0+0x310>
    80002132:	2f8290ef          	jal	8002b42a <printf>
    80002136:	0002c517          	auipc	a0,0x2c
    8000213a:	0ca50513          	addi	a0,a0,202 # 8002e200 <__func__.0+0x318>
    8000213e:	2ec290ef          	jal	8002b42a <printf>
    80002142:	86ca                	mv	a3,s2
    80002144:	8626                	mv	a2,s1
    80002146:	02d00593          	li	a1,45
    8000214a:	0002c517          	auipc	a0,0x2c
    8000214e:	55e50513          	addi	a0,a0,1374 # 8002e6a8 <__func__.0+0x7c0>
    80002152:	2d8290ef          	jal	8002b42a <printf>
    80002156:	02900513          	li	a0,41
    8000215a:	7bf270ef          	jal	8002a118 <putchar>
    8000215e:	4529                	li	a0,10
    80002160:	7b9270ef          	jal	8002a118 <putchar>
    80002164:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80002166:	144024f3          	csrr	s1,sip
    8000216a:	0002c617          	auipc	a2,0x2c
    8000216e:	55660613          	addi	a2,a2,1366 # 8002e6c0 <__func__.0+0x7d8>
    80002172:	08200593          	li	a1,130
    80002176:	0002c517          	auipc	a0,0x2c
    8000217a:	06a50513          	addi	a0,a0,106 # 8002e1e0 <__func__.0+0x2f8>
    8000217e:	2ac290ef          	jal	8002b42a <printf>
    80002182:	2e048763          	beqz	s1,80002470 <check_xip_regs_3+0x40e>
    80002186:	0002c597          	auipc	a1,0x2c
    8000218a:	03258593          	addi	a1,a1,50 # 8002e1b8 <__func__.0+0x2d0>
    8000218e:	0002c517          	auipc	a0,0x2c
    80002192:	06a50513          	addi	a0,a0,106 # 8002e1f8 <__func__.0+0x310>
    80002196:	294290ef          	jal	8002b42a <printf>
    8000219a:	0002c517          	auipc	a0,0x2c
    8000219e:	06650513          	addi	a0,a0,102 # 8002e200 <__func__.0+0x318>
    800021a2:	288290ef          	jal	8002b42a <printf>
    800021a6:	8626                	mv	a2,s1
    800021a8:	4681                	li	a3,0
    800021aa:	02d00593          	li	a1,45
    800021ae:	0002c517          	auipc	a0,0x2c
    800021b2:	4fa50513          	addi	a0,a0,1274 # 8002e6a8 <__func__.0+0x7c0>
    800021b6:	274290ef          	jal	8002b42a <printf>
    800021ba:	02900513          	li	a0,41
    800021be:	75b270ef          	jal	8002a118 <putchar>
    800021c2:	4529                	li	a0,10
    800021c4:	755270ef          	jal	8002a118 <putchar>
    800021c8:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    800021ca:	244024f3          	csrr	s1,vsip
    800021ce:	0002c617          	auipc	a2,0x2c
    800021d2:	4c260613          	addi	a2,a2,1218 # 8002e690 <__func__.0+0x7a8>
    800021d6:	08200593          	li	a1,130
    800021da:	0002c517          	auipc	a0,0x2c
    800021de:	00650513          	addi	a0,a0,6 # 8002e1e0 <__func__.0+0x2f8>
    800021e2:	22200913          	li	s2,546
    800021e6:	244290ef          	jal	8002b42a <printf>
    800021ea:	35248e63          	beq	s1,s2,80002546 <check_xip_regs_3+0x4e4>
    800021ee:	0002c597          	auipc	a1,0x2c
    800021f2:	fca58593          	addi	a1,a1,-54 # 8002e1b8 <__func__.0+0x2d0>
    800021f6:	0002c517          	auipc	a0,0x2c
    800021fa:	00250513          	addi	a0,a0,2 # 8002e1f8 <__func__.0+0x310>
    800021fe:	22c290ef          	jal	8002b42a <printf>
    80002202:	0002c517          	auipc	a0,0x2c
    80002206:	ffe50513          	addi	a0,a0,-2 # 8002e200 <__func__.0+0x318>
    8000220a:	220290ef          	jal	8002b42a <printf>
    8000220e:	86ca                	mv	a3,s2
    80002210:	8626                	mv	a2,s1
    80002212:	02d00593          	li	a1,45
    80002216:	0002c517          	auipc	a0,0x2c
    8000221a:	49250513          	addi	a0,a0,1170 # 8002e6a8 <__func__.0+0x7c0>
    8000221e:	20c290ef          	jal	8002b42a <printf>
    80002222:	02900513          	li	a0,41
    80002226:	6f3270ef          	jal	8002a118 <putchar>
    8000222a:	4529                	li	a0,10
    8000222c:	6ed270ef          	jal	8002a118 <putchar>
    80002230:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80002232:	4509                	li	a0,2
    80002234:	cd5fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80002238:	144024f3          	csrr	s1,sip
    8000223c:	0002c617          	auipc	a2,0x2c
    80002240:	48c60613          	addi	a2,a2,1164 # 8002e6c8 <__func__.0+0x7e0>
    80002244:	08200593          	li	a1,130
    80002248:	0002c517          	auipc	a0,0x2c
    8000224c:	f9850513          	addi	a0,a0,-104 # 8002e1e0 <__func__.0+0x2f8>
    80002250:	22200913          	li	s2,546
    80002254:	1d6290ef          	jal	8002b42a <printf>
    80002258:	2d248963          	beq	s1,s2,8000252a <check_xip_regs_3+0x4c8>
    8000225c:	0002c597          	auipc	a1,0x2c
    80002260:	f5c58593          	addi	a1,a1,-164 # 8002e1b8 <__func__.0+0x2d0>
    80002264:	0002c517          	auipc	a0,0x2c
    80002268:	f9450513          	addi	a0,a0,-108 # 8002e1f8 <__func__.0+0x310>
    8000226c:	1be290ef          	jal	8002b42a <printf>
    80002270:	0002c517          	auipc	a0,0x2c
    80002274:	f9050513          	addi	a0,a0,-112 # 8002e200 <__func__.0+0x318>
    80002278:	1b2290ef          	jal	8002b42a <printf>
    8000227c:	86ca                	mv	a3,s2
    8000227e:	8626                	mv	a2,s1
    80002280:	02d00593          	li	a1,45
    80002284:	0002c517          	auipc	a0,0x2c
    80002288:	42450513          	addi	a0,a0,1060 # 8002e6a8 <__func__.0+0x7c0>
    8000228c:	19e290ef          	jal	8002b42a <printf>
    80002290:	02900513          	li	a0,41
    80002294:	685270ef          	jal	8002a118 <putchar>
    80002298:	4529                	li	a0,10
    8000229a:	67f270ef          	jal	8002a118 <putchar>
    8000229e:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800022a0:	4511                	li	a0,4
    800022a2:	c67fe0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    800022a6:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800022aa:	644024f3          	csrr	s1,hip
    800022ae:	0002c617          	auipc	a2,0x2c
    800022b2:	3f260613          	addi	a2,a2,1010 # 8002e6a0 <__func__.0+0x7b8>
    800022b6:	08200593          	li	a1,130
    800022ba:	0002c517          	auipc	a0,0x2c
    800022be:	f2650513          	addi	a0,a0,-218 # 8002e1e0 <__func__.0+0x2f8>
    800022c2:	168290ef          	jal	8002b42a <printf>
    800022c6:	22048663          	beqz	s1,800024f2 <check_xip_regs_3+0x490>
    800022ca:	0002c597          	auipc	a1,0x2c
    800022ce:	eee58593          	addi	a1,a1,-274 # 8002e1b8 <__func__.0+0x2d0>
    800022d2:	0002c517          	auipc	a0,0x2c
    800022d6:	f2650513          	addi	a0,a0,-218 # 8002e1f8 <__func__.0+0x310>
    800022da:	150290ef          	jal	8002b42a <printf>
    800022de:	0002c517          	auipc	a0,0x2c
    800022e2:	f2250513          	addi	a0,a0,-222 # 8002e200 <__func__.0+0x318>
    800022e6:	144290ef          	jal	8002b42a <printf>
    800022ea:	8626                	mv	a2,s1
    800022ec:	4681                	li	a3,0
    800022ee:	02d00593          	li	a1,45
    800022f2:	0002c517          	auipc	a0,0x2c
    800022f6:	3b650513          	addi	a0,a0,950 # 8002e6a8 <__func__.0+0x7c0>
    800022fa:	130290ef          	jal	8002b42a <printf>
    800022fe:	02900513          	li	a0,41
    80002302:	617270ef          	jal	8002a118 <putchar>
    80002306:	4529                	li	a0,10
    80002308:	611270ef          	jal	8002a118 <putchar>
    8000230c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8000230e:	144024f3          	csrr	s1,sip
    80002312:	0002c617          	auipc	a2,0x2c
    80002316:	3ae60613          	addi	a2,a2,942 # 8002e6c0 <__func__.0+0x7d8>
    8000231a:	08200593          	li	a1,130
    8000231e:	0002c517          	auipc	a0,0x2c
    80002322:	ec250513          	addi	a0,a0,-318 # 8002e1e0 <__func__.0+0x2f8>
    80002326:	104290ef          	jal	8002b42a <printf>
    8000232a:	1a048663          	beqz	s1,800024d6 <check_xip_regs_3+0x474>
    8000232e:	0002c597          	auipc	a1,0x2c
    80002332:	e8a58593          	addi	a1,a1,-374 # 8002e1b8 <__func__.0+0x2d0>
    80002336:	0002c517          	auipc	a0,0x2c
    8000233a:	ec250513          	addi	a0,a0,-318 # 8002e1f8 <__func__.0+0x310>
    8000233e:	0ec290ef          	jal	8002b42a <printf>
    80002342:	0002c517          	auipc	a0,0x2c
    80002346:	ebe50513          	addi	a0,a0,-322 # 8002e200 <__func__.0+0x318>
    8000234a:	0e0290ef          	jal	8002b42a <printf>
    8000234e:	8626                	mv	a2,s1
    80002350:	4681                	li	a3,0
    80002352:	02d00593          	li	a1,45
    80002356:	0002c517          	auipc	a0,0x2c
    8000235a:	35250513          	addi	a0,a0,850 # 8002e6a8 <__func__.0+0x7c0>
    8000235e:	0cc290ef          	jal	8002b42a <printf>
    80002362:	02900513          	li	a0,41
    80002366:	5b3270ef          	jal	8002a118 <putchar>
    8000236a:	4529                	li	a0,10
    8000236c:	5ad270ef          	jal	8002a118 <putchar>
    80002370:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002372:	244024f3          	csrr	s1,vsip
    80002376:	0002c617          	auipc	a2,0x2c
    8000237a:	31a60613          	addi	a2,a2,794 # 8002e690 <__func__.0+0x7a8>
    8000237e:	08200593          	li	a1,130
    80002382:	0002c517          	auipc	a0,0x2c
    80002386:	e5e50513          	addi	a0,a0,-418 # 8002e1e0 <__func__.0+0x2f8>
    8000238a:	0a0290ef          	jal	8002b42a <printf>
    8000238e:	12048663          	beqz	s1,800024ba <check_xip_regs_3+0x458>
    80002392:	0002c597          	auipc	a1,0x2c
    80002396:	e2658593          	addi	a1,a1,-474 # 8002e1b8 <__func__.0+0x2d0>
    8000239a:	0002c517          	auipc	a0,0x2c
    8000239e:	e5e50513          	addi	a0,a0,-418 # 8002e1f8 <__func__.0+0x310>
    800023a2:	088290ef          	jal	8002b42a <printf>
    800023a6:	0002c517          	auipc	a0,0x2c
    800023aa:	e5a50513          	addi	a0,a0,-422 # 8002e200 <__func__.0+0x318>
    800023ae:	07c290ef          	jal	8002b42a <printf>
    800023b2:	8626                	mv	a2,s1
    800023b4:	4681                	li	a3,0
    800023b6:	02d00593          	li	a1,45
    800023ba:	0002c517          	auipc	a0,0x2c
    800023be:	2ee50513          	addi	a0,a0,750 # 8002e6a8 <__func__.0+0x7c0>
    800023c2:	068290ef          	jal	8002b42a <printf>
    800023c6:	02900513          	li	a0,41
    800023ca:	54f270ef          	jal	8002a118 <putchar>
    800023ce:	4529                	li	a0,10
    800023d0:	549270ef          	jal	8002a118 <putchar>
    800023d4:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800023d6:	4509                	li	a0,2
    800023d8:	b31fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800023dc:	144024f3          	csrr	s1,sip
    800023e0:	0002c617          	auipc	a2,0x2c
    800023e4:	2e860613          	addi	a2,a2,744 # 8002e6c8 <__func__.0+0x7e0>
    800023e8:	08200593          	li	a1,130
    800023ec:	0002c517          	auipc	a0,0x2c
    800023f0:	df450513          	addi	a0,a0,-524 # 8002e1e0 <__func__.0+0x2f8>
    800023f4:	036290ef          	jal	8002b42a <printf>
    800023f8:	c8d1                	beqz	s1,8000248c <check_xip_regs_3+0x42a>
    800023fa:	0002c597          	auipc	a1,0x2c
    800023fe:	dbe58593          	addi	a1,a1,-578 # 8002e1b8 <__func__.0+0x2d0>
    80002402:	0002c517          	auipc	a0,0x2c
    80002406:	df650513          	addi	a0,a0,-522 # 8002e1f8 <__func__.0+0x310>
    8000240a:	020290ef          	jal	8002b42a <printf>
    8000240e:	0002c517          	auipc	a0,0x2c
    80002412:	df250513          	addi	a0,a0,-526 # 8002e200 <__func__.0+0x318>
    80002416:	014290ef          	jal	8002b42a <printf>
    8000241a:	8626                	mv	a2,s1
    8000241c:	4681                	li	a3,0
    8000241e:	02d00593          	li	a1,45
    80002422:	0002c517          	auipc	a0,0x2c
    80002426:	28650513          	addi	a0,a0,646 # 8002e6a8 <__func__.0+0x7c0>
    8000242a:	000290ef          	jal	8002b42a <printf>
    8000242e:	02900513          	li	a0,41
    80002432:	4e7270ef          	jal	8002a118 <putchar>
    80002436:	4529                	li	a0,10
    80002438:	4e1270ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8000243c:	4511                	li	a0,4
    8000243e:	acbfe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002442:	4401                	li	s0,0

    TEST_END();
    80002444:	0002c597          	auipc	a1,0x2c
    80002448:	d7458593          	addi	a1,a1,-652 # 8002e1b8 <__func__.0+0x2d0>
    8000244c:	0002c517          	auipc	a0,0x2c
    80002450:	e1450513          	addi	a0,a0,-492 # 8002e260 <__func__.0+0x378>
    80002454:	7d7280ef          	jal	8002b42a <printf>
    80002458:	4511                	li	a0,4
    8000245a:	aaffe0ef          	jal	80000f08 <goto_priv>
    8000245e:	bc6ff0ef          	jal	80001824 <reset_state>
}
    80002462:	60e2                	ld	ra,24(sp)
    80002464:	8522                	mv	a0,s0
    80002466:	6442                	ld	s0,16(sp)
    80002468:	64a2                	ld	s1,8(sp)
    8000246a:	6902                	ld	s2,0(sp)
    8000246c:	6105                	addi	sp,sp,32
    8000246e:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    80002470:	0002c597          	auipc	a1,0x2c
    80002474:	d3858593          	addi	a1,a1,-712 # 8002e1a8 <__func__.0+0x2c0>
    80002478:	0002c517          	auipc	a0,0x2c
    8000247c:	d8050513          	addi	a0,a0,-640 # 8002e1f8 <__func__.0+0x310>
    80002480:	7ab280ef          	jal	8002b42a <printf>
    80002484:	4529                	li	a0,10
    80002486:	493270ef          	jal	8002a118 <putchar>
    8000248a:	b381                	j	800021ca <check_xip_regs_3+0x168>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000248c:	0002c597          	auipc	a1,0x2c
    80002490:	d1c58593          	addi	a1,a1,-740 # 8002e1a8 <__func__.0+0x2c0>
    80002494:	0002c517          	auipc	a0,0x2c
    80002498:	d6450513          	addi	a0,a0,-668 # 8002e1f8 <__func__.0+0x310>
    8000249c:	78f280ef          	jal	8002b42a <printf>
    800024a0:	4529                	li	a0,10
    800024a2:	477270ef          	jal	8002a118 <putchar>
    800024a6:	d859                	beqz	s0,8000243c <check_xip_regs_3+0x3da>
    goto_priv(PRIV_M);
    800024a8:	4511                	li	a0,4
    800024aa:	a5ffe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800024ae:	4405                	li	s0,1
    TEST_END();
    800024b0:	0002c597          	auipc	a1,0x2c
    800024b4:	cf858593          	addi	a1,a1,-776 # 8002e1a8 <__func__.0+0x2c0>
    800024b8:	bf51                	j	8000244c <check_xip_regs_3+0x3ea>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800024ba:	0002c597          	auipc	a1,0x2c
    800024be:	cee58593          	addi	a1,a1,-786 # 8002e1a8 <__func__.0+0x2c0>
    800024c2:	0002c517          	auipc	a0,0x2c
    800024c6:	d3650513          	addi	a0,a0,-714 # 8002e1f8 <__func__.0+0x310>
    800024ca:	761280ef          	jal	8002b42a <printf>
    800024ce:	4529                	li	a0,10
    800024d0:	449270ef          	jal	8002a118 <putchar>
    800024d4:	b709                	j	800023d6 <check_xip_regs_3+0x374>
    check_csr_rd("sip", sip, 0x0);
    800024d6:	0002c597          	auipc	a1,0x2c
    800024da:	cd258593          	addi	a1,a1,-814 # 8002e1a8 <__func__.0+0x2c0>
    800024de:	0002c517          	auipc	a0,0x2c
    800024e2:	d1a50513          	addi	a0,a0,-742 # 8002e1f8 <__func__.0+0x310>
    800024e6:	745280ef          	jal	8002b42a <printf>
    800024ea:	4529                	li	a0,10
    800024ec:	42d270ef          	jal	8002a118 <putchar>
    800024f0:	b549                	j	80002372 <check_xip_regs_3+0x310>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800024f2:	0002c597          	auipc	a1,0x2c
    800024f6:	cb658593          	addi	a1,a1,-842 # 8002e1a8 <__func__.0+0x2c0>
    800024fa:	0002c517          	auipc	a0,0x2c
    800024fe:	cfe50513          	addi	a0,a0,-770 # 8002e1f8 <__func__.0+0x310>
    80002502:	729280ef          	jal	8002b42a <printf>
    80002506:	4529                	li	a0,10
    80002508:	411270ef          	jal	8002a118 <putchar>
    8000250c:	b509                	j	8000230e <check_xip_regs_3+0x2ac>
    check_csr_rd("hip", CSR_HIP, 0x444);
    8000250e:	0002c597          	auipc	a1,0x2c
    80002512:	c9a58593          	addi	a1,a1,-870 # 8002e1a8 <__func__.0+0x2c0>
    80002516:	0002c517          	auipc	a0,0x2c
    8000251a:	ce250513          	addi	a0,a0,-798 # 8002e1f8 <__func__.0+0x310>
    8000251e:	70d280ef          	jal	8002b42a <printf>
    80002522:	4529                	li	a0,10
    80002524:	3f5270ef          	jal	8002a118 <putchar>
    80002528:	b93d                	j	80002166 <check_xip_regs_3+0x104>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    8000252a:	0002c597          	auipc	a1,0x2c
    8000252e:	c7e58593          	addi	a1,a1,-898 # 8002e1a8 <__func__.0+0x2c0>
    80002532:	0002c517          	auipc	a0,0x2c
    80002536:	cc650513          	addi	a0,a0,-826 # 8002e1f8 <__func__.0+0x310>
    8000253a:	6f1280ef          	jal	8002b42a <printf>
    8000253e:	4529                	li	a0,10
    80002540:	3d9270ef          	jal	8002a118 <putchar>
    80002544:	bbb1                	j	800022a0 <check_xip_regs_3+0x23e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80002546:	0002c597          	auipc	a1,0x2c
    8000254a:	c6258593          	addi	a1,a1,-926 # 8002e1a8 <__func__.0+0x2c0>
    8000254e:	0002c517          	auipc	a0,0x2c
    80002552:	caa50513          	addi	a0,a0,-854 # 8002e1f8 <__func__.0+0x310>
    80002556:	6d5280ef          	jal	8002b42a <printf>
    8000255a:	4529                	li	a0,10
    8000255c:	3bd270ef          	jal	8002a118 <putchar>
    80002560:	b9c9                	j	80002232 <check_xip_regs_3+0x1d0>
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    80002562:	0002c597          	auipc	a1,0x2c
    80002566:	c4658593          	addi	a1,a1,-954 # 8002e1a8 <__func__.0+0x2c0>
    8000256a:	0002c517          	auipc	a0,0x2c
    8000256e:	c8e50513          	addi	a0,a0,-882 # 8002e1f8 <__func__.0+0x310>
    80002572:	6b9280ef          	jal	8002b42a <printf>
    80002576:	4529                	li	a0,10
    80002578:	3a1270ef          	jal	8002a118 <putchar>
    8000257c:	4405                	li	s0,1
    8000257e:	b641                	j	800020fe <check_xip_regs_3+0x9c>

0000000080002580 <interrupt_tests>:

bool interrupt_tests(){
    80002580:	1101                	addi	sp,sp,-32

    TEST_START();
    80002582:	0002a597          	auipc	a1,0x2a
    80002586:	c3e58593          	addi	a1,a1,-962 # 8002c1c0 <__func__.0>
    8000258a:	0002c517          	auipc	a0,0x2c
    8000258e:	c3e50513          	addi	a0,a0,-962 # 8002e1c8 <__func__.0+0x2e0>
bool interrupt_tests(){
    80002592:	ec06                	sd	ra,24(sp)
    80002594:	e822                	sd	s0,16(sp)
    80002596:	e426                	sd	s1,8(sp)
    TEST_START();
    80002598:	693280ef          	jal	8002b42a <printf>
    8000259c:	4529                	li	a0,10
    8000259e:	37b270ef          	jal	8002a118 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    800025a2:	450d                	li	a0,3
    800025a4:	965fe0ef          	jal	80000f08 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    800025a8:	02200793          	li	a5,34
    800025ac:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    800025b0:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    800025b4:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800025b8:	855fe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    800025bc:	4509                	li	a0,2
    800025be:	94bfe0ef          	jal	80000f08 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    800025c2:	08200593          	li	a1,130
    800025c6:	0002c617          	auipc	a2,0x2c
    800025ca:	12260613          	addi	a2,a2,290 # 8002e6e8 <__func__.0+0x800>
    800025ce:	0002c517          	auipc	a0,0x2c
    800025d2:	c1250513          	addi	a0,a0,-1006 # 8002e1e0 <__func__.0+0x2f8>
    800025d6:	655280ef          	jal	8002b42a <printf>
    800025da:	00056797          	auipc	a5,0x56
    800025de:	a377c783          	lbu	a5,-1481(a5) # 80058011 <excpt+0x1>
    800025e2:	00056417          	auipc	s0,0x56
    800025e6:	a2e40413          	addi	s0,s0,-1490 # 80058010 <excpt>
    800025ea:	0002c597          	auipc	a1,0x2c
    800025ee:	bce58593          	addi	a1,a1,-1074 # 8002e1b8 <__func__.0+0x2d0>
    800025f2:	c799                	beqz	a5,80002600 <interrupt_tests+0x80>
    800025f4:	57fd                	li	a5,-1
    800025f6:	6418                	ld	a4,8(s0)
    800025f8:	17fe                	slli	a5,a5,0x3f
    800025fa:	0789                	addi	a5,a5,2
    800025fc:	16f70863          	beq	a4,a5,8000276c <interrupt_tests+0x1ec>
    80002600:	0002c517          	auipc	a0,0x2c
    80002604:	bf850513          	addi	a0,a0,-1032 # 8002e1f8 <__func__.0+0x310>
    80002608:	623280ef          	jal	8002b42a <printf>
    8000260c:	00056797          	auipc	a5,0x56
    80002610:	a057c783          	lbu	a5,-1531(a5) # 80058011 <excpt+0x1>
    80002614:	c799                	beqz	a5,80002622 <interrupt_tests+0xa2>
    80002616:	57fd                	li	a5,-1
    80002618:	6418                	ld	a4,8(s0)
    8000261a:	17fe                	slli	a5,a5,0x3f
    8000261c:	0789                	addi	a5,a5,2
    8000261e:	12f70f63          	beq	a4,a5,8000275c <interrupt_tests+0x1dc>
    80002622:	0002c517          	auipc	a0,0x2c
    80002626:	bde50513          	addi	a0,a0,-1058 # 8002e200 <__func__.0+0x318>
    8000262a:	601280ef          	jal	8002b42a <printf>
    8000262e:	02900513          	li	a0,41
    80002632:	2e7270ef          	jal	8002a118 <putchar>
    80002636:	4529                	li	a0,10
    80002638:	2e1270ef          	jal	8002a118 <putchar>
    8000263c:	00056797          	auipc	a5,0x56
    80002640:	9d57c783          	lbu	a5,-1579(a5) # 80058011 <excpt+0x1>
    80002644:	4481                	li	s1,0
    80002646:	c799                	beqz	a5,80002654 <interrupt_tests+0xd4>
    80002648:	57fd                	li	a5,-1
    8000264a:	6418                	ld	a4,8(s0)
    8000264c:	17fe                	slli	a5,a5,0x3f
    8000264e:	0789                	addi	a5,a5,2
    80002650:	12f70e63          	beq	a4,a5,8000278c <interrupt_tests+0x20c>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    80002654:	450d                	li	a0,3
    80002656:	8b3fe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    8000265a:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    8000265e:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002662:	faafe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    80002666:	4509                	li	a0,2
    80002668:	8a1fe0ef          	jal	80000f08 <goto_priv>
    CSRS(sie, 0x2);
    8000266c:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    80002670:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    80002674:	08200593          	li	a1,130
    80002678:	0002c617          	auipc	a2,0x2c
    8000267c:	09060613          	addi	a2,a2,144 # 8002e708 <__func__.0+0x820>
    80002680:	0002c517          	auipc	a0,0x2c
    80002684:	b6050513          	addi	a0,a0,-1184 # 8002e1e0 <__func__.0+0x2f8>
    80002688:	5a3280ef          	jal	8002b42a <printf>
    8000268c:	00056797          	auipc	a5,0x56
    80002690:	9857c783          	lbu	a5,-1659(a5) # 80058011 <excpt+0x1>
    80002694:	0002c597          	auipc	a1,0x2c
    80002698:	b2458593          	addi	a1,a1,-1244 # 8002e1b8 <__func__.0+0x2d0>
    8000269c:	c799                	beqz	a5,800026aa <interrupt_tests+0x12a>
    8000269e:	57fd                	li	a5,-1
    800026a0:	6418                	ld	a4,8(s0)
    800026a2:	17fe                	slli	a5,a5,0x3f
    800026a4:	0785                	addi	a5,a5,1
    800026a6:	0ef70b63          	beq	a4,a5,8000279c <interrupt_tests+0x21c>
    800026aa:	0002c517          	auipc	a0,0x2c
    800026ae:	b4e50513          	addi	a0,a0,-1202 # 8002e1f8 <__func__.0+0x310>
    800026b2:	579280ef          	jal	8002b42a <printf>
    800026b6:	00056797          	auipc	a5,0x56
    800026ba:	95b7c783          	lbu	a5,-1701(a5) # 80058011 <excpt+0x1>
    800026be:	c799                	beqz	a5,800026cc <interrupt_tests+0x14c>
    800026c0:	57fd                	li	a5,-1
    800026c2:	6418                	ld	a4,8(s0)
    800026c4:	17fe                	slli	a5,a5,0x3f
    800026c6:	0785                	addi	a5,a5,1
    800026c8:	08f70263          	beq	a4,a5,8000274c <interrupt_tests+0x1cc>
    800026cc:	0002c517          	auipc	a0,0x2c
    800026d0:	b3450513          	addi	a0,a0,-1228 # 8002e200 <__func__.0+0x318>
    800026d4:	557280ef          	jal	8002b42a <printf>
    800026d8:	02900513          	li	a0,41
    800026dc:	23d270ef          	jal	8002a118 <putchar>
    800026e0:	4529                	li	a0,10
    800026e2:	237270ef          	jal	8002a118 <putchar>
    800026e6:	cca9                	beqz	s1,80002740 <interrupt_tests+0x1c0>
    800026e8:	00056497          	auipc	s1,0x56
    800026ec:	9294c483          	lbu	s1,-1751(s1) # 80058011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    800026f0:	0002c597          	auipc	a1,0x2c
    800026f4:	ac858593          	addi	a1,a1,-1336 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    800026f8:	c881                	beqz	s1,80002708 <interrupt_tests+0x188>
    800026fa:	57fd                	li	a5,-1
    800026fc:	6418                	ld	a4,8(s0)
    800026fe:	17fe                	slli	a5,a5,0x3f
    80002700:	0785                	addi	a5,a5,1
    80002702:	02f70463          	beq	a4,a5,8000272a <interrupt_tests+0x1aa>
    80002706:	4481                	li	s1,0
    TEST_END();
    80002708:	0002c517          	auipc	a0,0x2c
    8000270c:	b5850513          	addi	a0,a0,-1192 # 8002e260 <__func__.0+0x378>
    80002710:	51b280ef          	jal	8002b42a <printf>
    80002714:	4511                	li	a0,4
    80002716:	ff2fe0ef          	jal	80000f08 <goto_priv>
    8000271a:	90aff0ef          	jal	80001824 <reset_state>
}
    8000271e:	60e2                	ld	ra,24(sp)
    80002720:	6442                	ld	s0,16(sp)
    80002722:	8526                	mv	a0,s1
    80002724:	64a2                	ld	s1,8(sp)
    80002726:	6105                	addi	sp,sp,32
    80002728:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    8000272a:	00056717          	auipc	a4,0x56
    8000272e:	8ea72703          	lw	a4,-1814(a4) # 80058014 <excpt+0x4>
    80002732:	4789                	li	a5,2
    TEST_END();
    80002734:	0002c597          	auipc	a1,0x2c
    80002738:	a7458593          	addi	a1,a1,-1420 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    8000273c:	fcf706e3          	beq	a4,a5,80002708 <interrupt_tests+0x188>
    80002740:	4481                	li	s1,0
    TEST_END();
    80002742:	0002c597          	auipc	a1,0x2c
    80002746:	a7658593          	addi	a1,a1,-1418 # 8002e1b8 <__func__.0+0x2d0>
    8000274a:	bf7d                	j	80002708 <interrupt_tests+0x188>
    TEST_ASSERT("vs sw irq with delegation", 
    8000274c:	00056717          	auipc	a4,0x56
    80002750:	8c872703          	lw	a4,-1848(a4) # 80058014 <excpt+0x4>
    80002754:	4789                	li	a5,2
    80002756:	f6f71be3          	bne	a4,a5,800026cc <interrupt_tests+0x14c>
    8000275a:	b759                	j	800026e0 <interrupt_tests+0x160>
    TEST_ASSERT("vs sw irq with no delegation", 
    8000275c:	00056717          	auipc	a4,0x56
    80002760:	8b872703          	lw	a4,-1864(a4) # 80058014 <excpt+0x4>
    80002764:	478d                	li	a5,3
    80002766:	eaf71ee3          	bne	a4,a5,80002622 <interrupt_tests+0xa2>
    8000276a:	b5f1                	j	80002636 <interrupt_tests+0xb6>
    8000276c:	00056717          	auipc	a4,0x56
    80002770:	8a872703          	lw	a4,-1880(a4) # 80058014 <excpt+0x4>
    80002774:	478d                	li	a5,3
    80002776:	0002c597          	auipc	a1,0x2c
    8000277a:	a3258593          	addi	a1,a1,-1486 # 8002e1a8 <__func__.0+0x2c0>
    8000277e:	e8f701e3          	beq	a4,a5,80002600 <interrupt_tests+0x80>
    80002782:	0002c597          	auipc	a1,0x2c
    80002786:	a3658593          	addi	a1,a1,-1482 # 8002e1b8 <__func__.0+0x2d0>
    8000278a:	bd9d                	j	80002600 <interrupt_tests+0x80>
    8000278c:	00056497          	auipc	s1,0x56
    80002790:	8884a483          	lw	s1,-1912(s1) # 80058014 <excpt+0x4>
    80002794:	14f5                	addi	s1,s1,-3
    80002796:	0014b493          	seqz	s1,s1
    8000279a:	bd6d                	j	80002654 <interrupt_tests+0xd4>
    TEST_ASSERT("vs sw irq with delegation", 
    8000279c:	00056717          	auipc	a4,0x56
    800027a0:	87872703          	lw	a4,-1928(a4) # 80058014 <excpt+0x4>
    800027a4:	4789                	li	a5,2
    800027a6:	0002c597          	auipc	a1,0x2c
    800027aa:	a0258593          	addi	a1,a1,-1534 # 8002e1a8 <__func__.0+0x2c0>
    800027ae:	eef70ee3          	beq	a4,a5,800026aa <interrupt_tests+0x12a>
    800027b2:	0002c597          	auipc	a1,0x2c
    800027b6:	a0658593          	addi	a1,a1,-1530 # 8002e1b8 <__func__.0+0x2d0>
    800027ba:	bdc5                	j	800026aa <interrupt_tests+0x12a>

00000000800027bc <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    800027bc:	7139                	addi	sp,sp,-64
    
    TEST_START();
    800027be:	0002a597          	auipc	a1,0x2a
    800027c2:	a1258593          	addi	a1,a1,-1518 # 8002c1d0 <__func__.20>
    800027c6:	0002c517          	auipc	a0,0x2c
    800027ca:	a0250513          	addi	a0,a0,-1534 # 8002e1c8 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    800027ce:	fc06                	sd	ra,56(sp)
    800027d0:	f822                	sd	s0,48(sp)
    800027d2:	f426                	sd	s1,40(sp)
    800027d4:	f04a                	sd	s2,32(sp)
    800027d6:	ec4e                	sd	s3,24(sp)
    TEST_START();
    800027d8:	453280ef          	jal	8002b42a <printf>
    800027dc:	4529                	li	a0,10
    800027de:	13b270ef          	jal	8002a118 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    800027e2:	2201b737          	lui	a4,0x2201b
    800027e6:	000887b7          	lui	a5,0x88
    800027ea:	070a                	slli	a4,a4,0x2
    800027ec:	44c5                	li	s1,17
    800027ee:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800027f2:	e304                	sd	s1,0(a4)
    800027f4:	07b2                	slli	a5,a5,0xc
    800027f6:	02200913          	li	s2,34
    800027fa:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    800027fe:	450d                	li	a0,3
    80002800:	f08fe0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80002804:	dddfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002808:	9bcfe0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    8000280c:	f71fd0ef          	jal	8000077c <vspt_init>
    return *((volatile uint64_t*) addr);
    80002810:	4001b737          	lui	a4,0x4001b
    80002814:	070a                	slli	a4,a4,0x2
    80002816:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000281a:	001007b7          	lui	a5,0x100
    8000281e:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002822:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002824:	0002c617          	auipc	a2,0x2c
    80002828:	f0460613          	addi	a2,a2,-252 # 8002e728 <__func__.0+0x840>
    8000282c:	08200593          	li	a1,130
    80002830:	0002c517          	auipc	a0,0x2c
    80002834:	9b050513          	addi	a0,a0,-1616 # 8002e1e0 <__func__.0+0x2f8>
    80002838:	6380                	ld	s0,0(a5)
    8000283a:	3f1280ef          	jal	8002b42a <printf>
    8000283e:	3a998963          	beq	s3,s1,80002bf0 <two_stage_translation_1+0x434>
    80002842:	0002c597          	auipc	a1,0x2c
    80002846:	97658593          	addi	a1,a1,-1674 # 8002e1b8 <__func__.0+0x2d0>
    8000284a:	0002c517          	auipc	a0,0x2c
    8000284e:	9ae50513          	addi	a0,a0,-1618 # 8002e1f8 <__func__.0+0x310>
    80002852:	3d9280ef          	jal	8002b42a <printf>
    80002856:	0002c517          	auipc	a0,0x2c
    8000285a:	9aa50513          	addi	a0,a0,-1622 # 8002e200 <__func__.0+0x318>
    8000285e:	3cd280ef          	jal	8002b42a <printf>
    80002862:	02900513          	li	a0,41
    80002866:	0b3270ef          	jal	8002a118 <putchar>
    8000286a:	4529                	li	a0,10
    8000286c:	0ad270ef          	jal	8002a118 <putchar>
    80002870:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002872:	450d                	li	a0,3
    80002874:	e94fe0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002878:	d5efe0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    8000287c:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80002880:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002884:	4509                	li	a0,2
    80002886:	e82fe0ef          	jal	80000f08 <goto_priv>
    8000288a:	001007b7          	lui	a5,0x100
    8000288e:	4001b737          	lui	a4,0x4001b
    80002892:	070a                	slli	a4,a4,0x2
    80002894:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002898:	07b2                	slli	a5,a5,0xc
    8000289a:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000289e:	0002c617          	auipc	a2,0x2c
    800028a2:	ea260613          	addi	a2,a2,-350 # 8002e740 <__func__.0+0x858>
    800028a6:	08200593          	li	a1,130
    800028aa:	0002c517          	auipc	a0,0x2c
    800028ae:	93650513          	addi	a0,a0,-1738 # 8002e1e0 <__func__.0+0x2f8>
    800028b2:	6384                	ld	s1,0(a5)
    800028b4:	377280ef          	jal	8002b42a <printf>
    800028b8:	02200793          	li	a5,34
    800028bc:	2ef90a63          	beq	s2,a5,80002bb0 <two_stage_translation_1+0x3f4>
    800028c0:	0002c597          	auipc	a1,0x2c
    800028c4:	8f858593          	addi	a1,a1,-1800 # 8002e1b8 <__func__.0+0x2d0>
    800028c8:	0002c517          	auipc	a0,0x2c
    800028cc:	93050513          	addi	a0,a0,-1744 # 8002e1f8 <__func__.0+0x310>
    800028d0:	35b280ef          	jal	8002b42a <printf>
    800028d4:	0002c517          	auipc	a0,0x2c
    800028d8:	92c50513          	addi	a0,a0,-1748 # 8002e200 <__func__.0+0x318>
    800028dc:	34f280ef          	jal	8002b42a <printf>
    800028e0:	02900513          	li	a0,41
    800028e4:	035270ef          	jal	8002a118 <putchar>
    800028e8:	4529                	li	a0,10
    800028ea:	02f270ef          	jal	8002a118 <putchar>
    800028ee:	4401                	li	s0,0

    vspt_switch();
    800028f0:	cc4fe0ef          	jal	80000db4 <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    800028f4:	12000073          	sfence.vma
    800028f8:	001007b7          	lui	a5,0x100
    800028fc:	4001b737          	lui	a4,0x4001b
    80002900:	070a                	slli	a4,a4,0x2
    80002902:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002906:	07b2                	slli	a5,a5,0xc
    80002908:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000290c:	0002c617          	auipc	a2,0x2c
    80002910:	e6c60613          	addi	a2,a2,-404 # 8002e778 <__func__.0+0x890>
    80002914:	08200593          	li	a1,130
    80002918:	0002c517          	auipc	a0,0x2c
    8000291c:	8c850513          	addi	a0,a0,-1848 # 8002e1e0 <__func__.0+0x2f8>
    80002920:	6384                	ld	s1,0(a5)
    80002922:	309280ef          	jal	8002b42a <printf>
    80002926:	47c5                	li	a5,17
    80002928:	32f90063          	beq	s2,a5,80002c48 <two_stage_translation_1+0x48c>
    8000292c:	0002c597          	auipc	a1,0x2c
    80002930:	88c58593          	addi	a1,a1,-1908 # 8002e1b8 <__func__.0+0x2d0>
    80002934:	0002c517          	auipc	a0,0x2c
    80002938:	8c450513          	addi	a0,a0,-1852 # 8002e1f8 <__func__.0+0x310>
    8000293c:	2ef280ef          	jal	8002b42a <printf>
    80002940:	0002c517          	auipc	a0,0x2c
    80002944:	8c050513          	addi	a0,a0,-1856 # 8002e200 <__func__.0+0x318>
    80002948:	2e3280ef          	jal	8002b42a <printf>
    8000294c:	02900513          	li	a0,41
    80002950:	7c8270ef          	jal	8002a118 <putchar>
    80002954:	4529                	li	a0,10
    80002956:	7c2270ef          	jal	8002a118 <putchar>
    8000295a:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    8000295c:	4511                	li	a0,4
    8000295e:	daafe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    80002962:	002007b7          	lui	a5,0x200
    80002966:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    8000296a:	4509                	li	a0,2
    8000296c:	d9cfe0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002970:	c9cfe0ef          	jal	80000e0c <test_setup_except_function>
    80002974:	001007b7          	lui	a5,0x100
    80002978:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000297c:	07b2                	slli	a5,a5,0xc
    8000297e:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002980:	08200593          	li	a1,130
    80002984:	0002c617          	auipc	a2,0x2c
    80002988:	e2c60613          	addi	a2,a2,-468 # 8002e7b0 <__func__.0+0x8c8>
    8000298c:	0002c517          	auipc	a0,0x2c
    80002990:	85450513          	addi	a0,a0,-1964 # 8002e1e0 <__func__.0+0x2f8>
    80002994:	297280ef          	jal	8002b42a <printf>
    80002998:	00055797          	auipc	a5,0x55
    8000299c:	6797c783          	lbu	a5,1657(a5) # 80058011 <excpt+0x1>
    800029a0:	00055417          	auipc	s0,0x55
    800029a4:	67040413          	addi	s0,s0,1648 # 80058010 <excpt>
    800029a8:	0002c597          	auipc	a1,0x2c
    800029ac:	81058593          	addi	a1,a1,-2032 # 8002e1b8 <__func__.0+0x2d0>
    800029b0:	c789                	beqz	a5,800029ba <two_stage_translation_1+0x1fe>
    800029b2:	6418                	ld	a4,8(s0)
    800029b4:	47d5                	li	a5,21
    800029b6:	3ef70963          	beq	a4,a5,80002da8 <two_stage_translation_1+0x5ec>
    800029ba:	0002c517          	auipc	a0,0x2c
    800029be:	83e50513          	addi	a0,a0,-1986 # 8002e1f8 <__func__.0+0x310>
    800029c2:	269280ef          	jal	8002b42a <printf>
    800029c6:	00055797          	auipc	a5,0x55
    800029ca:	64b7c783          	lbu	a5,1611(a5) # 80058011 <excpt+0x1>
    800029ce:	c789                	beqz	a5,800029d8 <two_stage_translation_1+0x21c>
    800029d0:	6418                	ld	a4,8(s0)
    800029d2:	47d5                	li	a5,21
    800029d4:	2af70c63          	beq	a4,a5,80002c8c <two_stage_translation_1+0x4d0>
    800029d8:	0002c517          	auipc	a0,0x2c
    800029dc:	82850513          	addi	a0,a0,-2008 # 8002e200 <__func__.0+0x318>
    800029e0:	24b280ef          	jal	8002b42a <printf>
    800029e4:	02900513          	li	a0,41
    800029e8:	730270ef          	jal	8002a118 <putchar>
    800029ec:	4529                	li	a0,10
    800029ee:	72a270ef          	jal	8002a118 <putchar>
    800029f2:	c899                	beqz	s1,80002a08 <two_stage_translation_1+0x24c>
    800029f4:	00055797          	auipc	a5,0x55
    800029f8:	61d7c783          	lbu	a5,1565(a5) # 80058011 <excpt+0x1>
    800029fc:	4481                	li	s1,0
    800029fe:	c789                	beqz	a5,80002a08 <two_stage_translation_1+0x24c>
    80002a00:	6418                	ld	a4,8(s0)
    80002a02:	47d5                	li	a5,21
    80002a04:	32f70d63          	beq	a4,a5,80002d3e <two_stage_translation_1+0x582>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    80002a08:	c04fe0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    80002a0c:	001007b7          	lui	a5,0x100
    80002a10:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002a14:	07b2                	slli	a5,a5,0xc
    80002a16:	00000297          	auipc	t0,0x0
    80002a1a:	00c28293          	addi	t0,t0,12 # 80002a22 <two_stage_translation_1+0x266>
    80002a1e:	02543c23          	sd	t0,56(s0)
    80002a22:	8782                	jr	a5
    TEST_ASSERT(
    80002a24:	08200593          	li	a1,130
    80002a28:	0002c617          	auipc	a2,0x2c
    80002a2c:	db860613          	addi	a2,a2,-584 # 8002e7e0 <__func__.0+0x8f8>
    80002a30:	0002b517          	auipc	a0,0x2b
    80002a34:	7b050513          	addi	a0,a0,1968 # 8002e1e0 <__func__.0+0x2f8>
    80002a38:	1f3280ef          	jal	8002b42a <printf>
    80002a3c:	00055797          	auipc	a5,0x55
    80002a40:	5d57c783          	lbu	a5,1493(a5) # 80058011 <excpt+0x1>
    80002a44:	0002b597          	auipc	a1,0x2b
    80002a48:	77458593          	addi	a1,a1,1908 # 8002e1b8 <__func__.0+0x2d0>
    80002a4c:	c789                	beqz	a5,80002a56 <two_stage_translation_1+0x29a>
    80002a4e:	6418                	ld	a4,8(s0)
    80002a50:	47d1                	li	a5,20
    80002a52:	3af70e63          	beq	a4,a5,80002e0e <two_stage_translation_1+0x652>
    80002a56:	0002b517          	auipc	a0,0x2b
    80002a5a:	7a250513          	addi	a0,a0,1954 # 8002e1f8 <__func__.0+0x310>
    80002a5e:	1cd280ef          	jal	8002b42a <printf>
    80002a62:	00055797          	auipc	a5,0x55
    80002a66:	5af7c783          	lbu	a5,1455(a5) # 80058011 <excpt+0x1>
    80002a6a:	c789                	beqz	a5,80002a74 <two_stage_translation_1+0x2b8>
    80002a6c:	6418                	ld	a4,8(s0)
    80002a6e:	47d1                	li	a5,20
    80002a70:	24f70963          	beq	a4,a5,80002cc2 <two_stage_translation_1+0x506>
    80002a74:	0002b517          	auipc	a0,0x2b
    80002a78:	78c50513          	addi	a0,a0,1932 # 8002e200 <__func__.0+0x318>
    80002a7c:	1af280ef          	jal	8002b42a <printf>
    80002a80:	02900513          	li	a0,41
    80002a84:	694270ef          	jal	8002a118 <putchar>
    80002a88:	4529                	li	a0,10
    80002a8a:	68e270ef          	jal	8002a118 <putchar>
    80002a8e:	c899                	beqz	s1,80002aa4 <two_stage_translation_1+0x2e8>
    80002a90:	00055797          	auipc	a5,0x55
    80002a94:	5817c783          	lbu	a5,1409(a5) # 80058011 <excpt+0x1>
    80002a98:	4481                	li	s1,0
    80002a9a:	c789                	beqz	a5,80002aa4 <two_stage_translation_1+0x2e8>
    80002a9c:	6418                	ld	a4,8(s0)
    80002a9e:	47d1                	li	a5,20
    80002aa0:	26f70a63          	beq	a4,a5,80002d14 <two_stage_translation_1+0x558>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    80002aa4:	4511                	li	a0,4
    80002aa6:	c62fe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    80002aaa:	002027b7          	lui	a5,0x202
    80002aae:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002ab2:	450d                	li	a0,3
    80002ab4:	c54fe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002ab8:	6789                	lui	a5,0x2
    80002aba:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    80002abe:	4509                	li	a0,2
    80002ac0:	c48fe0ef          	jal	80000f08 <goto_priv>
    80002ac4:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002ac8:	b44fe0ef          	jal	80000e0c <test_setup_except_function>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002acc:	400197b7          	lui	a5,0x40019
    80002ad0:	078a                	slli	a5,a5,0x2
    80002ad2:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002ad4:	08200593          	li	a1,130
    80002ad8:	0002c617          	auipc	a2,0x2c
    80002adc:	d4860613          	addi	a2,a2,-696 # 8002e820 <__func__.0+0x938>
    80002ae0:	0002b517          	auipc	a0,0x2b
    80002ae4:	70050513          	addi	a0,a0,1792 # 8002e1e0 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002ae8:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002aea:	141280ef          	jal	8002b42a <printf>
    80002aee:	00055797          	auipc	a5,0x55
    80002af2:	5237c783          	lbu	a5,1315(a5) # 80058011 <excpt+0x1>
    80002af6:	0002b597          	auipc	a1,0x2b
    80002afa:	6c258593          	addi	a1,a1,1730 # 8002e1b8 <__func__.0+0x2d0>
    80002afe:	c789                	beqz	a5,80002b08 <two_stage_translation_1+0x34c>
    80002b00:	6418                	ld	a4,8(s0)
    80002b02:	47b5                	li	a5,13
    80002b04:	2cf70f63          	beq	a4,a5,80002de2 <two_stage_translation_1+0x626>
    80002b08:	0002b517          	auipc	a0,0x2b
    80002b0c:	6f050513          	addi	a0,a0,1776 # 8002e1f8 <__func__.0+0x310>
    80002b10:	11b280ef          	jal	8002b42a <printf>
    80002b14:	00055797          	auipc	a5,0x55
    80002b18:	4fd7c783          	lbu	a5,1277(a5) # 80058011 <excpt+0x1>
    80002b1c:	c789                	beqz	a5,80002b26 <two_stage_translation_1+0x36a>
    80002b1e:	6418                	ld	a4,8(s0)
    80002b20:	47b5                	li	a5,13
    80002b22:	1cf70b63          	beq	a4,a5,80002cf8 <two_stage_translation_1+0x53c>
    80002b26:	0002b517          	auipc	a0,0x2b
    80002b2a:	6da50513          	addi	a0,a0,1754 # 8002e200 <__func__.0+0x318>
    80002b2e:	0fd280ef          	jal	8002b42a <printf>
    80002b32:	02900513          	li	a0,41
    80002b36:	5e2270ef          	jal	8002a118 <putchar>
    80002b3a:	4529                	li	a0,10
    80002b3c:	5dc270ef          	jal	8002a118 <putchar>
    80002b40:	c0b5                	beqz	s1,80002ba4 <two_stage_translation_1+0x3e8>
    80002b42:	00055497          	auipc	s1,0x55
    80002b46:	4cf4c483          	lbu	s1,1231(s1) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002b4a:	0002b597          	auipc	a1,0x2b
    80002b4e:	66e58593          	addi	a1,a1,1646 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002b52:	c491                	beqz	s1,80002b5e <two_stage_translation_1+0x3a2>
    80002b54:	6418                	ld	a4,8(s0)
    80002b56:	47b5                	li	a5,13
    80002b58:	02f70663          	beq	a4,a5,80002b84 <two_stage_translation_1+0x3c8>
    80002b5c:	4481                	li	s1,0
    TEST_END();
    80002b5e:	0002b517          	auipc	a0,0x2b
    80002b62:	70250513          	addi	a0,a0,1794 # 8002e260 <__func__.0+0x378>
    80002b66:	0c5280ef          	jal	8002b42a <printf>
    80002b6a:	4511                	li	a0,4
    80002b6c:	b9cfe0ef          	jal	80000f08 <goto_priv>
    80002b70:	cb5fe0ef          	jal	80001824 <reset_state>
}
    80002b74:	70e2                	ld	ra,56(sp)
    80002b76:	7442                	ld	s0,48(sp)
    80002b78:	7902                	ld	s2,32(sp)
    80002b7a:	69e2                	ld	s3,24(sp)
    80002b7c:	8526                	mv	a0,s1
    80002b7e:	74a2                	ld	s1,40(sp)
    80002b80:	6121                	addi	sp,sp,64
    80002b82:	8082                	ret
    TEST_ASSERT(
    80002b84:	00055717          	auipc	a4,0x55
    80002b88:	49072703          	lw	a4,1168(a4) # 80058014 <excpt+0x4>
    80002b8c:	4789                	li	a5,2
    80002b8e:	fcf717e3          	bne	a4,a5,80002b5c <two_stage_translation_1+0x3a0>
    80002b92:	00055797          	auipc	a5,0x55
    80002b96:	4ae7c783          	lbu	a5,1198(a5) # 80058040 <excpt+0x30>
    TEST_END();
    80002b9a:	0002b597          	auipc	a1,0x2b
    80002b9e:	60e58593          	addi	a1,a1,1550 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002ba2:	dfd5                	beqz	a5,80002b5e <two_stage_translation_1+0x3a2>
    80002ba4:	4481                	li	s1,0
    TEST_END();
    80002ba6:	0002b597          	auipc	a1,0x2b
    80002baa:	61258593          	addi	a1,a1,1554 # 8002e1b8 <__func__.0+0x2d0>
    80002bae:	bf45                	j	80002b5e <two_stage_translation_1+0x3a2>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002bb0:	47c5                	li	a5,17
    80002bb2:	1cf48b63          	beq	s1,a5,80002d88 <two_stage_translation_1+0x5cc>
    80002bb6:	0002b597          	auipc	a1,0x2b
    80002bba:	60258593          	addi	a1,a1,1538 # 8002e1b8 <__func__.0+0x2d0>
    80002bbe:	0002b517          	auipc	a0,0x2b
    80002bc2:	63a50513          	addi	a0,a0,1594 # 8002e1f8 <__func__.0+0x310>
    80002bc6:	065280ef          	jal	8002b42a <printf>
    80002bca:	0002b517          	auipc	a0,0x2b
    80002bce:	63650513          	addi	a0,a0,1590 # 8002e200 <__func__.0+0x318>
    80002bd2:	059280ef          	jal	8002b42a <printf>
    80002bd6:	02900513          	li	a0,41
    80002bda:	53e270ef          	jal	8002a118 <putchar>
    80002bde:	4529                	li	a0,10
    80002be0:	538270ef          	jal	8002a118 <putchar>
    80002be4:	d00405e3          	beqz	s0,800028ee <two_stage_translation_1+0x132>
    80002be8:	14bd                	addi	s1,s1,-17
    80002bea:	0014b413          	seqz	s0,s1
    80002bee:	b309                	j	800028f0 <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002bf0:	03240e63          	beq	s0,s2,80002c2c <two_stage_translation_1+0x470>
    80002bf4:	0002b597          	auipc	a1,0x2b
    80002bf8:	5c458593          	addi	a1,a1,1476 # 8002e1b8 <__func__.0+0x2d0>
    80002bfc:	0002b517          	auipc	a0,0x2b
    80002c00:	5fc50513          	addi	a0,a0,1532 # 8002e1f8 <__func__.0+0x310>
    80002c04:	027280ef          	jal	8002b42a <printf>
    80002c08:	0002b517          	auipc	a0,0x2b
    80002c0c:	5f850513          	addi	a0,a0,1528 # 8002e200 <__func__.0+0x318>
    80002c10:	01b280ef          	jal	8002b42a <printf>
    80002c14:	02900513          	li	a0,41
    80002c18:	500270ef          	jal	8002a118 <putchar>
    80002c1c:	4529                	li	a0,10
    80002c1e:	4fa270ef          	jal	8002a118 <putchar>
    80002c22:	fde40413          	addi	s0,s0,-34
    80002c26:	00143413          	seqz	s0,s0
    80002c2a:	b1a1                	j	80002872 <two_stage_translation_1+0xb6>
    80002c2c:	0002b597          	auipc	a1,0x2b
    80002c30:	57c58593          	addi	a1,a1,1404 # 8002e1a8 <__func__.0+0x2c0>
    80002c34:	0002b517          	auipc	a0,0x2b
    80002c38:	5c450513          	addi	a0,a0,1476 # 8002e1f8 <__func__.0+0x310>
    80002c3c:	7ee280ef          	jal	8002b42a <printf>
    80002c40:	4529                	li	a0,10
    80002c42:	4d6270ef          	jal	8002a118 <putchar>
    80002c46:	bff1                	j	80002c22 <two_stage_translation_1+0x466>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002c48:	02200793          	li	a5,34
    80002c4c:	10f48e63          	beq	s1,a5,80002d68 <two_stage_translation_1+0x5ac>
    80002c50:	0002b597          	auipc	a1,0x2b
    80002c54:	56858593          	addi	a1,a1,1384 # 8002e1b8 <__func__.0+0x2d0>
    80002c58:	0002b517          	auipc	a0,0x2b
    80002c5c:	5a050513          	addi	a0,a0,1440 # 8002e1f8 <__func__.0+0x310>
    80002c60:	7ca280ef          	jal	8002b42a <printf>
    80002c64:	0002b517          	auipc	a0,0x2b
    80002c68:	59c50513          	addi	a0,a0,1436 # 8002e200 <__func__.0+0x318>
    80002c6c:	7be280ef          	jal	8002b42a <printf>
    80002c70:	02900513          	li	a0,41
    80002c74:	4a4270ef          	jal	8002a118 <putchar>
    80002c78:	4529                	li	a0,10
    80002c7a:	49e270ef          	jal	8002a118 <putchar>
    80002c7e:	cc040ee3          	beqz	s0,8000295a <two_stage_translation_1+0x19e>
    80002c82:	fde48493          	addi	s1,s1,-34
    80002c86:	0014b493          	seqz	s1,s1
    80002c8a:	b9c9                	j	8000295c <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    80002c8c:	7418                	ld	a4,40(s0)
    80002c8e:	400197b7          	lui	a5,0x40019
    80002c92:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c96:	d4f711e3          	bne	a4,a5,800029d8 <two_stage_translation_1+0x21c>
    80002c9a:	00055717          	auipc	a4,0x55
    80002c9e:	37a72703          	lw	a4,890(a4) # 80058014 <excpt+0x4>
    80002ca2:	478d                	li	a5,3
    80002ca4:	d2f71ae3          	bne	a4,a5,800029d8 <two_stage_translation_1+0x21c>
    80002ca8:	00055797          	auipc	a5,0x55
    80002cac:	3987c783          	lbu	a5,920(a5) # 80058040 <excpt+0x30>
    80002cb0:	d20784e3          	beqz	a5,800029d8 <two_stage_translation_1+0x21c>
    80002cb4:	00055797          	auipc	a5,0x55
    80002cb8:	38d7c783          	lbu	a5,909(a5) # 80058041 <excpt+0x31>
    80002cbc:	d20798e3          	bnez	a5,800029ec <two_stage_translation_1+0x230>
    80002cc0:	bb21                	j	800029d8 <two_stage_translation_1+0x21c>
    TEST_ASSERT(
    80002cc2:	7418                	ld	a4,40(s0)
    80002cc4:	400197b7          	lui	a5,0x40019
    80002cc8:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002ccc:	daf714e3          	bne	a4,a5,80002a74 <two_stage_translation_1+0x2b8>
    80002cd0:	00055717          	auipc	a4,0x55
    80002cd4:	34472703          	lw	a4,836(a4) # 80058014 <excpt+0x4>
    80002cd8:	4791                	li	a5,4
    80002cda:	d8f71de3          	bne	a4,a5,80002a74 <two_stage_translation_1+0x2b8>
    80002cde:	00055797          	auipc	a5,0x55
    80002ce2:	3627c783          	lbu	a5,866(a5) # 80058040 <excpt+0x30>
    80002ce6:	d80787e3          	beqz	a5,80002a74 <two_stage_translation_1+0x2b8>
    80002cea:	00055797          	auipc	a5,0x55
    80002cee:	3577c783          	lbu	a5,855(a5) # 80058041 <excpt+0x31>
    80002cf2:	d8079be3          	bnez	a5,80002a88 <two_stage_translation_1+0x2cc>
    80002cf6:	bbbd                	j	80002a74 <two_stage_translation_1+0x2b8>
    TEST_ASSERT(
    80002cf8:	00055717          	auipc	a4,0x55
    80002cfc:	31c72703          	lw	a4,796(a4) # 80058014 <excpt+0x4>
    80002d00:	4789                	li	a5,2
    80002d02:	e2f712e3          	bne	a4,a5,80002b26 <two_stage_translation_1+0x36a>
    80002d06:	00055797          	auipc	a5,0x55
    80002d0a:	33a7c783          	lbu	a5,826(a5) # 80058040 <excpt+0x30>
    80002d0e:	e20786e3          	beqz	a5,80002b3a <two_stage_translation_1+0x37e>
    80002d12:	bd11                	j	80002b26 <two_stage_translation_1+0x36a>
    TEST_ASSERT(
    80002d14:	7418                	ld	a4,40(s0)
    80002d16:	400197b7          	lui	a5,0x40019
    80002d1a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d1e:	d8f713e3          	bne	a4,a5,80002aa4 <two_stage_translation_1+0x2e8>
    80002d22:	00055717          	auipc	a4,0x55
    80002d26:	2f272703          	lw	a4,754(a4) # 80058014 <excpt+0x4>
    80002d2a:	4791                	li	a5,4
    80002d2c:	d6f71ce3          	bne	a4,a5,80002aa4 <two_stage_translation_1+0x2e8>
    80002d30:	03045483          	lhu	s1,48(s0)
    80002d34:	eff48493          	addi	s1,s1,-257
    80002d38:	0014b493          	seqz	s1,s1
    80002d3c:	b3a5                	j	80002aa4 <two_stage_translation_1+0x2e8>
    TEST_ASSERT(
    80002d3e:	7418                	ld	a4,40(s0)
    80002d40:	400197b7          	lui	a5,0x40019
    80002d44:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d48:	ccf710e3          	bne	a4,a5,80002a08 <two_stage_translation_1+0x24c>
    80002d4c:	00055717          	auipc	a4,0x55
    80002d50:	2c872703          	lw	a4,712(a4) # 80058014 <excpt+0x4>
    80002d54:	478d                	li	a5,3
    80002d56:	caf719e3          	bne	a4,a5,80002a08 <two_stage_translation_1+0x24c>
    80002d5a:	03045483          	lhu	s1,48(s0)
    80002d5e:	eff48493          	addi	s1,s1,-257
    80002d62:	0014b493          	seqz	s1,s1
    80002d66:	b14d                	j	80002a08 <two_stage_translation_1+0x24c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002d68:	0002b597          	auipc	a1,0x2b
    80002d6c:	44058593          	addi	a1,a1,1088 # 8002e1a8 <__func__.0+0x2c0>
    80002d70:	0002b517          	auipc	a0,0x2b
    80002d74:	48850513          	addi	a0,a0,1160 # 8002e1f8 <__func__.0+0x310>
    80002d78:	6b2280ef          	jal	8002b42a <printf>
    80002d7c:	4529                	li	a0,10
    80002d7e:	39a270ef          	jal	8002a118 <putchar>
    80002d82:	bc040ce3          	beqz	s0,8000295a <two_stage_translation_1+0x19e>
    80002d86:	bdf5                	j	80002c82 <two_stage_translation_1+0x4c6>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002d88:	0002b597          	auipc	a1,0x2b
    80002d8c:	42058593          	addi	a1,a1,1056 # 8002e1a8 <__func__.0+0x2c0>
    80002d90:	0002b517          	auipc	a0,0x2b
    80002d94:	46850513          	addi	a0,a0,1128 # 8002e1f8 <__func__.0+0x310>
    80002d98:	692280ef          	jal	8002b42a <printf>
    80002d9c:	4529                	li	a0,10
    80002d9e:	37a270ef          	jal	8002a118 <putchar>
    80002da2:	b40406e3          	beqz	s0,800028ee <two_stage_translation_1+0x132>
    80002da6:	b589                	j	80002be8 <two_stage_translation_1+0x42c>
    TEST_ASSERT(
    80002da8:	7418                	ld	a4,40(s0)
    80002daa:	400197b7          	lui	a5,0x40019
    80002dae:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002db2:	c0f714e3          	bne	a4,a5,800029ba <two_stage_translation_1+0x1fe>
    80002db6:	00055717          	auipc	a4,0x55
    80002dba:	25e72703          	lw	a4,606(a4) # 80058014 <excpt+0x4>
    80002dbe:	478d                	li	a5,3
    80002dc0:	bef71de3          	bne	a4,a5,800029ba <two_stage_translation_1+0x1fe>
    80002dc4:	03045703          	lhu	a4,48(s0)
    80002dc8:	10100793          	li	a5,257
    80002dcc:	0002b597          	auipc	a1,0x2b
    80002dd0:	3dc58593          	addi	a1,a1,988 # 8002e1a8 <__func__.0+0x2c0>
    80002dd4:	bef703e3          	beq	a4,a5,800029ba <two_stage_translation_1+0x1fe>
    80002dd8:	0002b597          	auipc	a1,0x2b
    80002ddc:	3e058593          	addi	a1,a1,992 # 8002e1b8 <__func__.0+0x2d0>
    80002de0:	bee9                	j	800029ba <two_stage_translation_1+0x1fe>
    TEST_ASSERT(
    80002de2:	00055717          	auipc	a4,0x55
    80002de6:	23272703          	lw	a4,562(a4) # 80058014 <excpt+0x4>
    80002dea:	4789                	li	a5,2
    80002dec:	d0f71ee3          	bne	a4,a5,80002b08 <two_stage_translation_1+0x34c>
    80002df0:	00055797          	auipc	a5,0x55
    80002df4:	2507c783          	lbu	a5,592(a5) # 80058040 <excpt+0x30>
    80002df8:	0002b597          	auipc	a1,0x2b
    80002dfc:	3b058593          	addi	a1,a1,944 # 8002e1a8 <__func__.0+0x2c0>
    80002e00:	d00784e3          	beqz	a5,80002b08 <two_stage_translation_1+0x34c>
    80002e04:	0002b597          	auipc	a1,0x2b
    80002e08:	3b458593          	addi	a1,a1,948 # 8002e1b8 <__func__.0+0x2d0>
    80002e0c:	b9f5                	j	80002b08 <two_stage_translation_1+0x34c>
    TEST_ASSERT(
    80002e0e:	7418                	ld	a4,40(s0)
    80002e10:	400197b7          	lui	a5,0x40019
    80002e14:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002e18:	c2f71fe3          	bne	a4,a5,80002a56 <two_stage_translation_1+0x29a>
    80002e1c:	00055717          	auipc	a4,0x55
    80002e20:	1f872703          	lw	a4,504(a4) # 80058014 <excpt+0x4>
    80002e24:	4791                	li	a5,4
    80002e26:	c2f718e3          	bne	a4,a5,80002a56 <two_stage_translation_1+0x29a>
    80002e2a:	03045703          	lhu	a4,48(s0)
    80002e2e:	10100793          	li	a5,257
    80002e32:	0002b597          	auipc	a1,0x2b
    80002e36:	37658593          	addi	a1,a1,886 # 8002e1a8 <__func__.0+0x2c0>
    80002e3a:	c0f70ee3          	beq	a4,a5,80002a56 <two_stage_translation_1+0x29a>
    80002e3e:	0002b597          	auipc	a1,0x2b
    80002e42:	37a58593          	addi	a1,a1,890 # 8002e1b8 <__func__.0+0x2d0>
    80002e46:	b901                	j	80002a56 <two_stage_translation_1+0x29a>

0000000080002e48 <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002e48:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002e4a:	00029597          	auipc	a1,0x29
    80002e4e:	39e58593          	addi	a1,a1,926 # 8002c1e8 <__func__.17>
    80002e52:	0002b517          	auipc	a0,0x2b
    80002e56:	37650513          	addi	a0,a0,886 # 8002e1c8 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002e5a:	f406                	sd	ra,40(sp)
    80002e5c:	f022                	sd	s0,32(sp)
    80002e5e:	ec26                	sd	s1,24(sp)
    80002e60:	e84a                	sd	s2,16(sp)
    80002e62:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002e64:	5c6280ef          	jal	8002b42a <printf>
    80002e68:	4529                	li	a0,10
    80002e6a:	2ae270ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    80002e6e:	4511                	li	a0,4
    80002e70:	898fe0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80002e74:	2201b737          	lui	a4,0x2201b
    80002e78:	000887b7          	lui	a5,0x88
    80002e7c:	070a                	slli	a4,a4,0x2
    80002e7e:	44c5                	li	s1,17
    80002e80:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002e84:	e304                	sd	s1,0(a4)
    80002e86:	07b2                	slli	a5,a5,0xc
    80002e88:	02200913          	li	s2,34
    80002e8c:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002e90:	450d                	li	a0,3
    80002e92:	876fe0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80002e96:	f4afd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002e9a:	b2bfd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002e9e:	8dffd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80002ea2:	4509                	li	a0,2
    80002ea4:	864fe0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002ea8:	4001b737          	lui	a4,0x4001b
    80002eac:	070a                	slli	a4,a4,0x2
    80002eae:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002eb2:	001007b7          	lui	a5,0x100
    80002eb6:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002eba:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002ebc:	0002c617          	auipc	a2,0x2c
    80002ec0:	86c60613          	addi	a2,a2,-1940 # 8002e728 <__func__.0+0x840>
    80002ec4:	08200593          	li	a1,130
    80002ec8:	0002b517          	auipc	a0,0x2b
    80002ecc:	31850513          	addi	a0,a0,792 # 8002e1e0 <__func__.0+0x2f8>
    80002ed0:	6380                	ld	s0,0(a5)
    80002ed2:	558280ef          	jal	8002b42a <printf>
    80002ed6:	0c998b63          	beq	s3,s1,80002fac <two_stage_translation_2+0x164>
    80002eda:	0002b597          	auipc	a1,0x2b
    80002ede:	2de58593          	addi	a1,a1,734 # 8002e1b8 <__func__.0+0x2d0>
    80002ee2:	0002b517          	auipc	a0,0x2b
    80002ee6:	31650513          	addi	a0,a0,790 # 8002e1f8 <__func__.0+0x310>
    80002eea:	540280ef          	jal	8002b42a <printf>
    80002eee:	0002b517          	auipc	a0,0x2b
    80002ef2:	31250513          	addi	a0,a0,786 # 8002e200 <__func__.0+0x318>
    80002ef6:	534280ef          	jal	8002b42a <printf>
    80002efa:	02900513          	li	a0,41
    80002efe:	21a270ef          	jal	8002a118 <putchar>
    80002f02:	4529                	li	a0,10
    80002f04:	214270ef          	jal	8002a118 <putchar>
    80002f08:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002f0a:	450d                	li	a0,3
    80002f0c:	ffdfd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002f10:	ec7fd0ef          	jal	80000dd6 <hpt_switch>
    goto_priv(PRIV_VS);
    80002f14:	4509                	li	a0,2
    80002f16:	ff3fd0ef          	jal	80000f08 <goto_priv>
    80002f1a:	001007b7          	lui	a5,0x100
    80002f1e:	4001b737          	lui	a4,0x4001b
    80002f22:	070a                	slli	a4,a4,0x2
    80002f24:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002f28:	07b2                	slli	a5,a5,0xc
    80002f2a:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002f2c:	0002c617          	auipc	a2,0x2c
    80002f30:	92c60613          	addi	a2,a2,-1748 # 8002e858 <__func__.0+0x970>
    80002f34:	08200593          	li	a1,130
    80002f38:	0002b517          	auipc	a0,0x2b
    80002f3c:	2a850513          	addi	a0,a0,680 # 8002e1e0 <__func__.0+0x2f8>
    80002f40:	0007b903          	ld	s2,0(a5)
    80002f44:	4e6280ef          	jal	8002b42a <printf>
    80002f48:	47c5                	li	a5,17
    80002f4a:	0af48d63          	beq	s1,a5,80003004 <two_stage_translation_2+0x1bc>
    80002f4e:	0002b597          	auipc	a1,0x2b
    80002f52:	26a58593          	addi	a1,a1,618 # 8002e1b8 <__func__.0+0x2d0>
    80002f56:	0002b517          	auipc	a0,0x2b
    80002f5a:	2a250513          	addi	a0,a0,674 # 8002e1f8 <__func__.0+0x310>
    80002f5e:	4cc280ef          	jal	8002b42a <printf>
    80002f62:	0002b517          	auipc	a0,0x2b
    80002f66:	29e50513          	addi	a0,a0,670 # 8002e200 <__func__.0+0x318>
    80002f6a:	4c0280ef          	jal	8002b42a <printf>
    80002f6e:	02900513          	li	a0,41
    80002f72:	1a6270ef          	jal	8002a118 <putchar>
    80002f76:	4529                	li	a0,10
    80002f78:	1a0270ef          	jal	8002a118 <putchar>
    80002f7c:	4401                	li	s0,0


    TEST_END();
    80002f7e:	0002b597          	auipc	a1,0x2b
    80002f82:	23a58593          	addi	a1,a1,570 # 8002e1b8 <__func__.0+0x2d0>
    80002f86:	0002b517          	auipc	a0,0x2b
    80002f8a:	2da50513          	addi	a0,a0,730 # 8002e260 <__func__.0+0x378>
    80002f8e:	49c280ef          	jal	8002b42a <printf>
    80002f92:	4511                	li	a0,4
    80002f94:	f75fd0ef          	jal	80000f08 <goto_priv>
    80002f98:	88dfe0ef          	jal	80001824 <reset_state>
}
    80002f9c:	70a2                	ld	ra,40(sp)
    80002f9e:	8522                	mv	a0,s0
    80002fa0:	7402                	ld	s0,32(sp)
    80002fa2:	64e2                	ld	s1,24(sp)
    80002fa4:	6942                	ld	s2,16(sp)
    80002fa6:	69a2                	ld	s3,8(sp)
    80002fa8:	6145                	addi	sp,sp,48
    80002faa:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002fac:	03240e63          	beq	s0,s2,80002fe8 <two_stage_translation_2+0x1a0>
    80002fb0:	0002b597          	auipc	a1,0x2b
    80002fb4:	20858593          	addi	a1,a1,520 # 8002e1b8 <__func__.0+0x2d0>
    80002fb8:	0002b517          	auipc	a0,0x2b
    80002fbc:	24050513          	addi	a0,a0,576 # 8002e1f8 <__func__.0+0x310>
    80002fc0:	46a280ef          	jal	8002b42a <printf>
    80002fc4:	0002b517          	auipc	a0,0x2b
    80002fc8:	23c50513          	addi	a0,a0,572 # 8002e200 <__func__.0+0x318>
    80002fcc:	45e280ef          	jal	8002b42a <printf>
    80002fd0:	02900513          	li	a0,41
    80002fd4:	144270ef          	jal	8002a118 <putchar>
    80002fd8:	4529                	li	a0,10
    80002fda:	13e270ef          	jal	8002a118 <putchar>
    80002fde:	fde40413          	addi	s0,s0,-34
    80002fe2:	00143413          	seqz	s0,s0
    80002fe6:	b715                	j	80002f0a <two_stage_translation_2+0xc2>
    80002fe8:	0002b597          	auipc	a1,0x2b
    80002fec:	1c058593          	addi	a1,a1,448 # 8002e1a8 <__func__.0+0x2c0>
    80002ff0:	0002b517          	auipc	a0,0x2b
    80002ff4:	20850513          	addi	a0,a0,520 # 8002e1f8 <__func__.0+0x310>
    80002ff8:	432280ef          	jal	8002b42a <printf>
    80002ffc:	4529                	li	a0,10
    80002ffe:	11a270ef          	jal	8002a118 <putchar>
    80003002:	bff1                	j	80002fde <two_stage_translation_2+0x196>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80003004:	02200793          	li	a5,34
    80003008:	f4f913e3          	bne	s2,a5,80002f4e <two_stage_translation_2+0x106>
    8000300c:	0002b597          	auipc	a1,0x2b
    80003010:	19c58593          	addi	a1,a1,412 # 8002e1a8 <__func__.0+0x2c0>
    80003014:	0002b517          	auipc	a0,0x2b
    80003018:	1e450513          	addi	a0,a0,484 # 8002e1f8 <__func__.0+0x310>
    8000301c:	40e280ef          	jal	8002b42a <printf>
    80003020:	4529                	li	a0,10
    80003022:	0f6270ef          	jal	8002a118 <putchar>
    80003026:	d839                	beqz	s0,80002f7c <two_stage_translation_2+0x134>
    80003028:	4405                	li	s0,1
    TEST_END();
    8000302a:	0002b597          	auipc	a1,0x2b
    8000302e:	17e58593          	addi	a1,a1,382 # 8002e1a8 <__func__.0+0x2c0>
    80003032:	bf91                	j	80002f86 <two_stage_translation_2+0x13e>

0000000080003034 <two_stage_translation_3>:

bool two_stage_translation_3(){
    80003034:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80003036:	00029597          	auipc	a1,0x29
    8000303a:	1ca58593          	addi	a1,a1,458 # 8002c200 <__func__.16>
    8000303e:	0002b517          	auipc	a0,0x2b
    80003042:	18a50513          	addi	a0,a0,394 # 8002e1c8 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    80003046:	f406                	sd	ra,40(sp)
    80003048:	f022                	sd	s0,32(sp)
    8000304a:	ec26                	sd	s1,24(sp)
    8000304c:	e84a                	sd	s2,16(sp)
    8000304e:	e44e                	sd	s3,8(sp)
    TEST_START();
    80003050:	3da280ef          	jal	8002b42a <printf>
    80003054:	4529                	li	a0,10
    80003056:	0c2270ef          	jal	8002a118 <putchar>
    *((volatile uint64_t*) addr) = val;
    8000305a:	2201b737          	lui	a4,0x2201b
    8000305e:	000887b7          	lui	a5,0x88
    80003062:	070a                	slli	a4,a4,0x2
    80003064:	44c5                	li	s1,17
    80003066:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000306a:	e304                	sd	s1,0(a4)
    8000306c:	07b2                	slli	a5,a5,0xc
    8000306e:	02200913          	li	s2,34
    80003072:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80003076:	450d                	li	a0,3
    80003078:	e91fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000307c:	d64fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80003080:	945fd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80003084:	ef8fd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80003088:	4509                	li	a0,2
    8000308a:	e7ffd0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    8000308e:	4001b737          	lui	a4,0x4001b
    80003092:	070a                	slli	a4,a4,0x2
    80003094:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80003098:	001007b7          	lui	a5,0x100
    8000309c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800030a0:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800030a2:	0002b617          	auipc	a2,0x2b
    800030a6:	68660613          	addi	a2,a2,1670 # 8002e728 <__func__.0+0x840>
    800030aa:	08200593          	li	a1,130
    800030ae:	0002b517          	auipc	a0,0x2b
    800030b2:	13250513          	addi	a0,a0,306 # 8002e1e0 <__func__.0+0x2f8>
    800030b6:	6380                	ld	s0,0(a5)
    800030b8:	372280ef          	jal	8002b42a <printf>
    800030bc:	0c998863          	beq	s3,s1,8000318c <two_stage_translation_3+0x158>
    800030c0:	0002b597          	auipc	a1,0x2b
    800030c4:	0f858593          	addi	a1,a1,248 # 8002e1b8 <__func__.0+0x2d0>
    800030c8:	0002b517          	auipc	a0,0x2b
    800030cc:	13050513          	addi	a0,a0,304 # 8002e1f8 <__func__.0+0x310>
    800030d0:	35a280ef          	jal	8002b42a <printf>
    800030d4:	0002b517          	auipc	a0,0x2b
    800030d8:	12c50513          	addi	a0,a0,300 # 8002e200 <__func__.0+0x318>
    800030dc:	34e280ef          	jal	8002b42a <printf>
    800030e0:	02900513          	li	a0,41
    800030e4:	034270ef          	jal	8002a118 <putchar>
    800030e8:	4529                	li	a0,10
    800030ea:	02e270ef          	jal	8002a118 <putchar>
    800030ee:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    800030f0:	4509                	li	a0,2
    800030f2:	e17fd0ef          	jal	80000f08 <goto_priv>

    vspt_switch();
    800030f6:	cbffd0ef          	jal	80000db4 <vspt_switch>
    800030fa:	001007b7          	lui	a5,0x100
    800030fe:	4001b737          	lui	a4,0x4001b
    80003102:	070a                	slli	a4,a4,0x2
    80003104:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003108:	07b2                	slli	a5,a5,0xc
    8000310a:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    8000310c:	0002b617          	auipc	a2,0x2b
    80003110:	79c60613          	addi	a2,a2,1948 # 8002e8a8 <__func__.0+0x9c0>
    80003114:	08200593          	li	a1,130
    80003118:	0002b517          	auipc	a0,0x2b
    8000311c:	0c850513          	addi	a0,a0,200 # 8002e1e0 <__func__.0+0x2f8>
    80003120:	0007b903          	ld	s2,0(a5)
    80003124:	306280ef          	jal	8002b42a <printf>
    80003128:	47c5                	li	a5,17
    8000312a:	0af48d63          	beq	s1,a5,800031e4 <two_stage_translation_3+0x1b0>
    8000312e:	0002b597          	auipc	a1,0x2b
    80003132:	08a58593          	addi	a1,a1,138 # 8002e1b8 <__func__.0+0x2d0>
    80003136:	0002b517          	auipc	a0,0x2b
    8000313a:	0c250513          	addi	a0,a0,194 # 8002e1f8 <__func__.0+0x310>
    8000313e:	2ec280ef          	jal	8002b42a <printf>
    80003142:	0002b517          	auipc	a0,0x2b
    80003146:	0be50513          	addi	a0,a0,190 # 8002e200 <__func__.0+0x318>
    8000314a:	2e0280ef          	jal	8002b42a <printf>
    8000314e:	02900513          	li	a0,41
    80003152:	7c7260ef          	jal	8002a118 <putchar>
    80003156:	4529                	li	a0,10
    80003158:	7c1260ef          	jal	8002a118 <putchar>
    8000315c:	4401                	li	s0,0

    TEST_END();
    8000315e:	0002b597          	auipc	a1,0x2b
    80003162:	05a58593          	addi	a1,a1,90 # 8002e1b8 <__func__.0+0x2d0>
    80003166:	0002b517          	auipc	a0,0x2b
    8000316a:	0fa50513          	addi	a0,a0,250 # 8002e260 <__func__.0+0x378>
    8000316e:	2bc280ef          	jal	8002b42a <printf>
    80003172:	4511                	li	a0,4
    80003174:	d95fd0ef          	jal	80000f08 <goto_priv>
    80003178:	eacfe0ef          	jal	80001824 <reset_state>
}
    8000317c:	70a2                	ld	ra,40(sp)
    8000317e:	8522                	mv	a0,s0
    80003180:	7402                	ld	s0,32(sp)
    80003182:	64e2                	ld	s1,24(sp)
    80003184:	6942                	ld	s2,16(sp)
    80003186:	69a2                	ld	s3,8(sp)
    80003188:	6145                	addi	sp,sp,48
    8000318a:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000318c:	03240e63          	beq	s0,s2,800031c8 <two_stage_translation_3+0x194>
    80003190:	0002b597          	auipc	a1,0x2b
    80003194:	02858593          	addi	a1,a1,40 # 8002e1b8 <__func__.0+0x2d0>
    80003198:	0002b517          	auipc	a0,0x2b
    8000319c:	06050513          	addi	a0,a0,96 # 8002e1f8 <__func__.0+0x310>
    800031a0:	28a280ef          	jal	8002b42a <printf>
    800031a4:	0002b517          	auipc	a0,0x2b
    800031a8:	05c50513          	addi	a0,a0,92 # 8002e200 <__func__.0+0x318>
    800031ac:	27e280ef          	jal	8002b42a <printf>
    800031b0:	02900513          	li	a0,41
    800031b4:	765260ef          	jal	8002a118 <putchar>
    800031b8:	4529                	li	a0,10
    800031ba:	75f260ef          	jal	8002a118 <putchar>
    800031be:	fde40413          	addi	s0,s0,-34
    800031c2:	00143413          	seqz	s0,s0
    800031c6:	b72d                	j	800030f0 <two_stage_translation_3+0xbc>
    800031c8:	0002b597          	auipc	a1,0x2b
    800031cc:	fe058593          	addi	a1,a1,-32 # 8002e1a8 <__func__.0+0x2c0>
    800031d0:	0002b517          	auipc	a0,0x2b
    800031d4:	02850513          	addi	a0,a0,40 # 8002e1f8 <__func__.0+0x310>
    800031d8:	252280ef          	jal	8002b42a <printf>
    800031dc:	4529                	li	a0,10
    800031de:	73b260ef          	jal	8002a118 <putchar>
    800031e2:	bff1                	j	800031be <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    800031e4:	02200793          	li	a5,34
    800031e8:	f4f913e3          	bne	s2,a5,8000312e <two_stage_translation_3+0xfa>
    800031ec:	0002b597          	auipc	a1,0x2b
    800031f0:	fbc58593          	addi	a1,a1,-68 # 8002e1a8 <__func__.0+0x2c0>
    800031f4:	0002b517          	auipc	a0,0x2b
    800031f8:	00450513          	addi	a0,a0,4 # 8002e1f8 <__func__.0+0x310>
    800031fc:	22e280ef          	jal	8002b42a <printf>
    80003200:	4529                	li	a0,10
    80003202:	717260ef          	jal	8002a118 <putchar>
    80003206:	d839                	beqz	s0,8000315c <two_stage_translation_3+0x128>
    80003208:	4405                	li	s0,1
    TEST_END();
    8000320a:	0002b597          	auipc	a1,0x2b
    8000320e:	f9e58593          	addi	a1,a1,-98 # 8002e1a8 <__func__.0+0x2c0>
    80003212:	bf91                	j	80003166 <two_stage_translation_3+0x132>

0000000080003214 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80003214:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80003216:	00029597          	auipc	a1,0x29
    8000321a:	00258593          	addi	a1,a1,2 # 8002c218 <__func__.15>
    8000321e:	0002b517          	auipc	a0,0x2b
    80003222:	faa50513          	addi	a0,a0,-86 # 8002e1c8 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    80003226:	f406                	sd	ra,40(sp)
    80003228:	f022                	sd	s0,32(sp)
    8000322a:	e84a                	sd	s2,16(sp)
    8000322c:	ec26                	sd	s1,24(sp)
    8000322e:	e44e                	sd	s3,8(sp)
    80003230:	e052                	sd	s4,0(sp)
    TEST_START();
    80003232:	1f8280ef          	jal	8002b42a <printf>
    80003236:	4529                	li	a0,10
    80003238:	6e1260ef          	jal	8002a118 <putchar>
    *((volatile uint64_t*) addr) = val;
    8000323c:	2201b737          	lui	a4,0x2201b
    80003240:	000887b7          	lui	a5,0x88
    80003244:	070a                	slli	a4,a4,0x2
    80003246:	4445                	li	s0,17
    80003248:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000324c:	e300                	sd	s0,0(a4)
    8000324e:	07b2                	slli	a5,a5,0xc
    80003250:	02200913          	li	s2,34
    80003254:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80003258:	00a007b7          	lui	a5,0xa00
    8000325c:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80003260:	450d                	li	a0,3
    80003262:	ca7fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80003266:	b7afd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000326a:	f5afd0ef          	jal	800009c4 <hpt_init>
    
    goto_priv(PRIV_VS);
    8000326e:	4509                	li	a0,2
    80003270:	c99fd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80003274:	b99fd0ef          	jal	80000e0c <test_setup_except_function>
    return *((volatile uint64_t*) addr);
    80003278:	001007b7          	lui	a5,0x100
    8000327c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003280:	4001b737          	lui	a4,0x4001b
    80003284:	07b2                	slli	a5,a5,0xc
    80003286:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003288:	0002b617          	auipc	a2,0x2b
    8000328c:	4a060613          	addi	a2,a2,1184 # 8002e728 <__func__.0+0x840>
    80003290:	08200593          	li	a1,130
    80003294:	0002b517          	auipc	a0,0x2b
    80003298:	f4c50513          	addi	a0,a0,-180 # 8002e1e0 <__func__.0+0x2f8>
    8000329c:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800032a0:	0007ba03          	ld	s4,0(a5)
    800032a4:	186280ef          	jal	8002b42a <printf>
    800032a8:	00055797          	auipc	a5,0x55
    800032ac:	d697c783          	lbu	a5,-663(a5) # 80058011 <excpt+0x1>
    800032b0:	00055497          	auipc	s1,0x55
    800032b4:	d6048493          	addi	s1,s1,-672 # 80058010 <excpt>
    800032b8:	ef91                	bnez	a5,800032d4 <second_stage_only_translation+0xc0>
    800032ba:	2a898663          	beq	s3,s0,80003566 <second_stage_only_translation+0x352>
    800032be:	0002b597          	auipc	a1,0x2b
    800032c2:	efa58593          	addi	a1,a1,-262 # 8002e1b8 <__func__.0+0x2d0>
    800032c6:	0002b517          	auipc	a0,0x2b
    800032ca:	f3250513          	addi	a0,a0,-206 # 8002e1f8 <__func__.0+0x310>
    800032ce:	15c280ef          	jal	8002b42a <printf>
    800032d2:	a01d                	j	800032f8 <second_stage_only_translation+0xe4>
    800032d4:	0002b597          	auipc	a1,0x2b
    800032d8:	ee458593          	addi	a1,a1,-284 # 8002e1b8 <__func__.0+0x2d0>
    800032dc:	0002b517          	auipc	a0,0x2b
    800032e0:	f1c50513          	addi	a0,a0,-228 # 8002e1f8 <__func__.0+0x310>
    800032e4:	146280ef          	jal	8002b42a <printf>
    800032e8:	00055797          	auipc	a5,0x55
    800032ec:	d297c783          	lbu	a5,-727(a5) # 80058011 <excpt+0x1>
    800032f0:	2a079f63          	bnez	a5,800035ae <second_stage_only_translation+0x39a>
    800032f4:	32898f63          	beq	s3,s0,80003632 <second_stage_only_translation+0x41e>
    800032f8:	0002b517          	auipc	a0,0x2b
    800032fc:	f0850513          	addi	a0,a0,-248 # 8002e200 <__func__.0+0x318>
    80003300:	12a280ef          	jal	8002b42a <printf>
    80003304:	02900513          	li	a0,41
    80003308:	611260ef          	jal	8002a118 <putchar>
    8000330c:	4529                	li	a0,10
    8000330e:	60b260ef          	jal	8002a118 <putchar>
    80003312:	4401                	li	s0,0

    goto_priv(PRIV_HS);
    80003314:	450d                	li	a0,3
    80003316:	bf3fd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    8000331a:	abdfd0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    8000331e:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80003322:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80003326:	4509                	li	a0,2
    80003328:	be1fd0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    8000332c:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80003330:	addfd0ef          	jal	80000e0c <test_setup_except_function>
    80003334:	001007b7          	lui	a5,0x100
    80003338:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000333c:	4001b737          	lui	a4,0x4001b
    80003340:	07b2                	slli	a5,a5,0xc
    80003342:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003344:	0002b617          	auipc	a2,0x2b
    80003348:	5b460613          	addi	a2,a2,1460 # 8002e8f8 <__func__.0+0xa10>
    8000334c:	08200593          	li	a1,130
    80003350:	0002b517          	auipc	a0,0x2b
    80003354:	e9050513          	addi	a0,a0,-368 # 8002e1e0 <__func__.0+0x2f8>
    80003358:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000335c:	0007b983          	ld	s3,0(a5)
    80003360:	0ca280ef          	jal	8002b42a <printf>
    80003364:	00055797          	auipc	a5,0x55
    80003368:	cad7c783          	lbu	a5,-851(a5) # 80058011 <excpt+0x1>
    8000336c:	18079363          	bnez	a5,800034f2 <second_stage_only_translation+0x2de>
    80003370:	02200793          	li	a5,34
    80003374:	28f90b63          	beq	s2,a5,8000360a <second_stage_only_translation+0x3f6>
    80003378:	0002b597          	auipc	a1,0x2b
    8000337c:	e4058593          	addi	a1,a1,-448 # 8002e1b8 <__func__.0+0x2d0>
    80003380:	0002b517          	auipc	a0,0x2b
    80003384:	e7850513          	addi	a0,a0,-392 # 8002e1f8 <__func__.0+0x310>
    80003388:	0a2280ef          	jal	8002b42a <printf>
    8000338c:	0002b517          	auipc	a0,0x2b
    80003390:	e7450513          	addi	a0,a0,-396 # 8002e200 <__func__.0+0x318>
    80003394:	096280ef          	jal	8002b42a <printf>
    80003398:	02900513          	li	a0,41
    8000339c:	57d260ef          	jal	8002a118 <putchar>
    800033a0:	4529                	li	a0,10
    800033a2:	577260ef          	jal	8002a118 <putchar>
    800033a6:	c811                	beqz	s0,800033ba <second_stage_only_translation+0x1a6>
    800033a8:	00055797          	auipc	a5,0x55
    800033ac:	c697c783          	lbu	a5,-919(a5) # 80058011 <excpt+0x1>
    800033b0:	e789                	bnez	a5,800033ba <second_stage_only_translation+0x1a6>
    800033b2:	02200793          	li	a5,34
    800033b6:	18f90063          	beq	s2,a5,80003536 <second_stage_only_translation+0x322>
    800033ba:	4401                	li	s0,0

    TEST_SETUP_EXCEPT();
    800033bc:	a51fd0ef          	jal	80000e0c <test_setup_except_function>
    800033c0:	001007b7          	lui	a5,0x100
    800033c4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800033c8:	07b2                	slli	a5,a5,0xc
    800033ca:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    800033cc:	08200593          	li	a1,130
    800033d0:	0002b617          	auipc	a2,0x2b
    800033d4:	55060613          	addi	a2,a2,1360 # 8002e920 <__func__.0+0xa38>
    800033d8:	0002b517          	auipc	a0,0x2b
    800033dc:	e0850513          	addi	a0,a0,-504 # 8002e1e0 <__func__.0+0x2f8>
    800033e0:	04a280ef          	jal	8002b42a <printf>
    800033e4:	00055797          	auipc	a5,0x55
    800033e8:	c2d7c783          	lbu	a5,-979(a5) # 80058011 <excpt+0x1>
    800033ec:	0002b597          	auipc	a1,0x2b
    800033f0:	dcc58593          	addi	a1,a1,-564 # 8002e1b8 <__func__.0+0x2d0>
    800033f4:	c789                	beqz	a5,800033fe <second_stage_only_translation+0x1ea>
    800033f6:	6498                	ld	a4,8(s1)
    800033f8:	47d5                	li	a5,21
    800033fa:	1ef70863          	beq	a4,a5,800035ea <second_stage_only_translation+0x3d6>
    800033fe:	0002b517          	auipc	a0,0x2b
    80003402:	dfa50513          	addi	a0,a0,-518 # 8002e1f8 <__func__.0+0x310>
    80003406:	024280ef          	jal	8002b42a <printf>
    8000340a:	00055797          	auipc	a5,0x55
    8000340e:	c077c783          	lbu	a5,-1017(a5) # 80058011 <excpt+0x1>
    80003412:	c789                	beqz	a5,8000341c <second_stage_only_translation+0x208>
    80003414:	6498                	ld	a4,8(s1)
    80003416:	47d5                	li	a5,21
    80003418:	12f70f63          	beq	a4,a5,80003556 <second_stage_only_translation+0x342>
    8000341c:	0002b517          	auipc	a0,0x2b
    80003420:	de450513          	addi	a0,a0,-540 # 8002e200 <__func__.0+0x318>
    80003424:	006280ef          	jal	8002b42a <printf>
    80003428:	02900513          	li	a0,41
    8000342c:	4ed260ef          	jal	8002a118 <putchar>
    80003430:	4529                	li	a0,10
    80003432:	4e7260ef          	jal	8002a118 <putchar>
    80003436:	c819                	beqz	s0,8000344c <second_stage_only_translation+0x238>
    80003438:	00055797          	auipc	a5,0x55
    8000343c:	bd97c783          	lbu	a5,-1063(a5) # 80058011 <excpt+0x1>
    80003440:	4401                	li	s0,0
    80003442:	c789                	beqz	a5,8000344c <second_stage_only_translation+0x238>
    80003444:	6498                	ld	a4,8(s1)
    80003446:	47d5                	li	a5,21
    80003448:	18f70963          	beq	a4,a5,800035da <second_stage_only_translation+0x3c6>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    8000344c:	9c1fd0ef          	jal	80000e0c <test_setup_except_function>
    80003450:	200007b7          	lui	a5,0x20000
    80003454:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    80003456:	07b2                	slli	a5,a5,0xc
    80003458:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    8000345a:	08200593          	li	a1,130
    8000345e:	0002b617          	auipc	a2,0x2b
    80003462:	4ea60613          	addi	a2,a2,1258 # 8002e948 <__func__.0+0xa60>
    80003466:	0002b517          	auipc	a0,0x2b
    8000346a:	d7a50513          	addi	a0,a0,-646 # 8002e1e0 <__func__.0+0x2f8>
    8000346e:	7bd270ef          	jal	8002b42a <printf>
    80003472:	00055797          	auipc	a5,0x55
    80003476:	b9f7c783          	lbu	a5,-1121(a5) # 80058011 <excpt+0x1>
    8000347a:	0002b597          	auipc	a1,0x2b
    8000347e:	d3e58593          	addi	a1,a1,-706 # 8002e1b8 <__func__.0+0x2d0>
    80003482:	e789                	bnez	a5,8000348c <second_stage_only_translation+0x278>
    80003484:	0002b597          	auipc	a1,0x2b
    80003488:	d2458593          	addi	a1,a1,-732 # 8002e1a8 <__func__.0+0x2c0>
    8000348c:	0002b517          	auipc	a0,0x2b
    80003490:	d6c50513          	addi	a0,a0,-660 # 8002e1f8 <__func__.0+0x310>
    80003494:	797270ef          	jal	8002b42a <printf>
    80003498:	00055797          	auipc	a5,0x55
    8000349c:	b797c783          	lbu	a5,-1159(a5) # 80058011 <excpt+0x1>
    800034a0:	e3c5                	bnez	a5,80003540 <second_stage_only_translation+0x32c>
    800034a2:	4529                	li	a0,10
    800034a4:	475260ef          	jal	8002a118 <putchar>
    800034a8:	cc1d                	beqz	s0,800034e6 <second_stage_only_translation+0x2d2>
    800034aa:	00055797          	auipc	a5,0x55
    800034ae:	b677c783          	lbu	a5,-1177(a5) # 80058011 <excpt+0x1>
    800034b2:	eb95                	bnez	a5,800034e6 <second_stage_only_translation+0x2d2>
    800034b4:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    800034b6:	0002b597          	auipc	a1,0x2b
    800034ba:	cf258593          	addi	a1,a1,-782 # 8002e1a8 <__func__.0+0x2c0>
    800034be:	0002b517          	auipc	a0,0x2b
    800034c2:	da250513          	addi	a0,a0,-606 # 8002e260 <__func__.0+0x378>
    800034c6:	765270ef          	jal	8002b42a <printf>
    800034ca:	4511                	li	a0,4
    800034cc:	a3dfd0ef          	jal	80000f08 <goto_priv>
    800034d0:	b54fe0ef          	jal	80001824 <reset_state>
}
    800034d4:	70a2                	ld	ra,40(sp)
    800034d6:	8522                	mv	a0,s0
    800034d8:	7402                	ld	s0,32(sp)
    800034da:	64e2                	ld	s1,24(sp)
    800034dc:	6942                	ld	s2,16(sp)
    800034de:	69a2                	ld	s3,8(sp)
    800034e0:	6a02                	ld	s4,0(sp)
    800034e2:	6145                	addi	sp,sp,48
    800034e4:	8082                	ret
    TEST_ASSERT(
    800034e6:	4401                	li	s0,0
    TEST_END();
    800034e8:	0002b597          	auipc	a1,0x2b
    800034ec:	cd058593          	addi	a1,a1,-816 # 8002e1b8 <__func__.0+0x2d0>
    800034f0:	b7f9                	j	800034be <second_stage_only_translation+0x2aa>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800034f2:	0002b597          	auipc	a1,0x2b
    800034f6:	cc658593          	addi	a1,a1,-826 # 8002e1b8 <__func__.0+0x2d0>
    800034fa:	0002b517          	auipc	a0,0x2b
    800034fe:	cfe50513          	addi	a0,a0,-770 # 8002e1f8 <__func__.0+0x310>
    80003502:	729270ef          	jal	8002b42a <printf>
    80003506:	00055797          	auipc	a5,0x55
    8000350a:	b0b7c783          	lbu	a5,-1269(a5) # 80058011 <excpt+0x1>
    8000350e:	e6079fe3          	bnez	a5,8000338c <second_stage_only_translation+0x178>
    80003512:	02200793          	li	a5,34
    80003516:	e6f91be3          	bne	s2,a5,8000338c <second_stage_only_translation+0x178>
    8000351a:	47c5                	li	a5,17
    8000351c:	e6f998e3          	bne	s3,a5,8000338c <second_stage_only_translation+0x178>
    80003520:	4529                	li	a0,10
    80003522:	3f7260ef          	jal	8002a118 <putchar>
    80003526:	e8040ae3          	beqz	s0,800033ba <second_stage_only_translation+0x1a6>
    8000352a:	00055797          	auipc	a5,0x55
    8000352e:	ae77c783          	lbu	a5,-1305(a5) # 80058011 <excpt+0x1>
    80003532:	e80794e3          	bnez	a5,800033ba <second_stage_only_translation+0x1a6>
    80003536:	fef98413          	addi	s0,s3,-17
    8000353a:	00143413          	seqz	s0,s0
    8000353e:	bdbd                	j	800033bc <second_stage_only_translation+0x1a8>
    TEST_ASSERT(
    80003540:	0002b517          	auipc	a0,0x2b
    80003544:	cc050513          	addi	a0,a0,-832 # 8002e200 <__func__.0+0x318>
    80003548:	6e3270ef          	jal	8002b42a <printf>
    8000354c:	02900513          	li	a0,41
    80003550:	3c9260ef          	jal	8002a118 <putchar>
    80003554:	b7b9                	j	800034a2 <second_stage_only_translation+0x28e>
    TEST_ASSERT(
    80003556:	00055717          	auipc	a4,0x55
    8000355a:	abe72703          	lw	a4,-1346(a4) # 80058014 <excpt+0x4>
    8000355e:	478d                	li	a5,3
    80003560:	eaf71ee3          	bne	a4,a5,8000341c <second_stage_only_translation+0x208>
    80003564:	b5f1                	j	80003430 <second_stage_only_translation+0x21c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003566:	0f2a0263          	beq	s4,s2,8000364a <second_stage_only_translation+0x436>
    8000356a:	0002b597          	auipc	a1,0x2b
    8000356e:	c4e58593          	addi	a1,a1,-946 # 8002e1b8 <__func__.0+0x2d0>
    80003572:	0002b517          	auipc	a0,0x2b
    80003576:	c8650513          	addi	a0,a0,-890 # 8002e1f8 <__func__.0+0x310>
    8000357a:	6b1270ef          	jal	8002b42a <printf>
    8000357e:	0002b517          	auipc	a0,0x2b
    80003582:	c8250513          	addi	a0,a0,-894 # 8002e200 <__func__.0+0x318>
    80003586:	6a5270ef          	jal	8002b42a <printf>
    8000358a:	02900513          	li	a0,41
    8000358e:	38b260ef          	jal	8002a118 <putchar>
    80003592:	4529                	li	a0,10
    80003594:	385260ef          	jal	8002a118 <putchar>
    80003598:	00055797          	auipc	a5,0x55
    8000359c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800035a0:	d60799e3          	bnez	a5,80003312 <second_stage_only_translation+0xfe>
    800035a4:	fdea0413          	addi	s0,s4,-34
    800035a8:	00143413          	seqz	s0,s0
    800035ac:	b3a5                	j	80003314 <second_stage_only_translation+0x100>
    800035ae:	0002b517          	auipc	a0,0x2b
    800035b2:	c5250513          	addi	a0,a0,-942 # 8002e200 <__func__.0+0x318>
    800035b6:	675270ef          	jal	8002b42a <printf>
    800035ba:	02900513          	li	a0,41
    800035be:	35b260ef          	jal	8002a118 <putchar>
    800035c2:	4529                	li	a0,10
    800035c4:	355260ef          	jal	8002a118 <putchar>
    800035c8:	00055797          	auipc	a5,0x55
    800035cc:	a497c783          	lbu	a5,-1463(a5) # 80058011 <excpt+0x1>
    800035d0:	d40791e3          	bnez	a5,80003312 <second_stage_only_translation+0xfe>
    800035d4:	fc8988e3          	beq	s3,s0,800035a4 <second_stage_only_translation+0x390>
    800035d8:	bb2d                	j	80003312 <second_stage_only_translation+0xfe>
    TEST_ASSERT(
    800035da:	00055417          	auipc	s0,0x55
    800035de:	a3a42403          	lw	s0,-1478(s0) # 80058014 <excpt+0x4>
    800035e2:	1475                	addi	s0,s0,-3
    800035e4:	00143413          	seqz	s0,s0
    800035e8:	b595                	j	8000344c <second_stage_only_translation+0x238>
    800035ea:	00055717          	auipc	a4,0x55
    800035ee:	a2a72703          	lw	a4,-1494(a4) # 80058014 <excpt+0x4>
    800035f2:	478d                	li	a5,3
    800035f4:	0002b597          	auipc	a1,0x2b
    800035f8:	bb458593          	addi	a1,a1,-1100 # 8002e1a8 <__func__.0+0x2c0>
    800035fc:	e0f701e3          	beq	a4,a5,800033fe <second_stage_only_translation+0x1ea>
    80003600:	0002b597          	auipc	a1,0x2b
    80003604:	bb858593          	addi	a1,a1,-1096 # 8002e1b8 <__func__.0+0x2d0>
    80003608:	bbdd                	j	800033fe <second_stage_only_translation+0x1ea>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000360a:	47c5                	li	a5,17
    8000360c:	d6f996e3          	bne	s3,a5,80003378 <second_stage_only_translation+0x164>
    80003610:	0002b597          	auipc	a1,0x2b
    80003614:	b9858593          	addi	a1,a1,-1128 # 8002e1a8 <__func__.0+0x2c0>
    80003618:	0002b517          	auipc	a0,0x2b
    8000361c:	be050513          	addi	a0,a0,-1056 # 8002e1f8 <__func__.0+0x310>
    80003620:	60b270ef          	jal	8002b42a <printf>
    80003624:	00055797          	auipc	a5,0x55
    80003628:	9ed7c783          	lbu	a5,-1555(a5) # 80058011 <excpt+0x1>
    8000362c:	ee078ae3          	beqz	a5,80003520 <second_stage_only_translation+0x30c>
    80003630:	bbb1                	j	8000338c <second_stage_only_translation+0x178>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003632:	f52a16e3          	bne	s4,s2,8000357e <second_stage_only_translation+0x36a>
    80003636:	4529                	li	a0,10
    80003638:	2e1260ef          	jal	8002a118 <putchar>
    8000363c:	00055417          	auipc	s0,0x55
    80003640:	9d544403          	lbu	s0,-1579(s0) # 80058011 <excpt+0x1>
    80003644:	00144413          	xori	s0,s0,1
    80003648:	b1f1                	j	80003314 <second_stage_only_translation+0x100>
    8000364a:	0002b597          	auipc	a1,0x2b
    8000364e:	b5e58593          	addi	a1,a1,-1186 # 8002e1a8 <__func__.0+0x2c0>
    80003652:	0002b517          	auipc	a0,0x2b
    80003656:	ba650513          	addi	a0,a0,-1114 # 8002e1f8 <__func__.0+0x310>
    8000365a:	5d1270ef          	jal	8002b42a <printf>
    8000365e:	00055797          	auipc	a5,0x55
    80003662:	9b37c783          	lbu	a5,-1613(a5) # 80058011 <excpt+0x1>
    80003666:	dbe1                	beqz	a5,80003636 <second_stage_only_translation+0x422>
    80003668:	bf19                	j	8000357e <second_stage_only_translation+0x36a>

000000008000366a <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    8000366a:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    8000366c:	00029597          	auipc	a1,0x29
    80003670:	bcc58593          	addi	a1,a1,-1076 # 8002c238 <__func__.13>
    80003674:	0002b517          	auipc	a0,0x2b
    80003678:	b5450513          	addi	a0,a0,-1196 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    8000367c:	f406                	sd	ra,40(sp)
    8000367e:	ec26                	sd	s1,24(sp)
    80003680:	f022                	sd	s0,32(sp)
    80003682:	e84a                	sd	s2,16(sp)
    80003684:	e44e                	sd	s3,8(sp)
    80003686:	e052                	sd	s4,0(sp)
    TEST_START();
    80003688:	5a3270ef          	jal	8002b42a <printf>
    8000368c:	4529                	li	a0,10
    8000368e:	28b260ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80003692:	f4ffc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003696:	b2efd0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000369a:	8e2fd0ef          	jal	8000077c <vspt_init>

    TEST_SETUP_EXCEPT();
    8000369e:	f6efd0ef          	jal	80000e0c <test_setup_except_function>
    if(curr_priv != PRIV_M){
    800036a2:	00038497          	auipc	s1,0x38
    800036a6:	1824a483          	lw	s1,386(s1) # 8003b824 <curr_priv>
    800036aa:	4791                	li	a5,4
    800036ac:	02f48763          	beq	s1,a5,800036da <m_and_hs_using_vs_access_1+0x70>
        ERROR("trying to write as mprv from low privilege");
    800036b0:	0002b517          	auipc	a0,0x2b
    800036b4:	2d050513          	addi	a0,a0,720 # 8002e980 <__func__.0+0xa98>
    800036b8:	573270ef          	jal	8002b42a <printf>
    800036bc:	11100613          	li	a2,273
    800036c0:	00029597          	auipc	a1,0x29
    800036c4:	b9858593          	addi	a1,a1,-1128 # 8002c258 <__func__.12>
    800036c8:	0002b517          	auipc	a0,0x2b
    800036cc:	c8850513          	addi	a0,a0,-888 # 8002e350 <__func__.0+0x468>
    800036d0:	55b270ef          	jal	8002b42a <printf>
    800036d4:	4501                	li	a0,0
    800036d6:	10b270ef          	jal	8002afe0 <exit>
    asm volatile(
    800036da:	01108437          	lui	s0,0x1108
    800036de:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800036e2:	00100937          	lui	s2,0x100
    set_prev_priv(priv);
    800036e6:	4509                	li	a0,2
    asm volatile(
    800036e8:	0442                	slli	s0,s0,0x10
    800036ea:	06b90913          	addi	s2,s2,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    800036ee:	f3afd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800036f2:	1439                	addi	s0,s0,-18
    800036f4:	0932                	slli	s2,s2,0xc
    800036f6:	000209b7          	lui	s3,0x20
    800036fa:	3009a073          	csrs	mstatus,s3
    800036fe:	00893023          	sd	s0,0(s2)
    80003702:	3009b073          	csrc	mstatus,s3
    if(curr_priv != PRIV_M){
    80003706:	00038797          	auipc	a5,0x38
    8000370a:	11e7a783          	lw	a5,286(a5) # 8003b824 <curr_priv>
    8000370e:	02978763          	beq	a5,s1,8000373c <m_and_hs_using_vs_access_1+0xd2>
        ERROR("trying to read as mprv from low privilege");
    80003712:	0002b517          	auipc	a0,0x2b
    80003716:	2ae50513          	addi	a0,a0,686 # 8002e9c0 <__func__.0+0xad8>
    8000371a:	511270ef          	jal	8002b42a <printf>
    8000371e:	0fe00613          	li	a2,254
    80003722:	00029597          	auipc	a1,0x29
    80003726:	b4658593          	addi	a1,a1,-1210 # 8002c268 <__func__.11>
    8000372a:	0002b517          	auipc	a0,0x2b
    8000372e:	c2650513          	addi	a0,a0,-986 # 8002e350 <__func__.0+0x468>
    80003732:	4f9270ef          	jal	8002b42a <printf>
    80003736:	4501                	li	a0,0
    80003738:	0a9270ef          	jal	8002afe0 <exit>
    set_prev_priv(priv);
    8000373c:	4509                	li	a0,2
    8000373e:	eeafd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80003742:	3009a073          	csrs	mstatus,s3
    80003746:	00093483          	ld	s1,0(s2)
    8000374a:	3009b073          	csrc	mstatus,s3
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    8000374e:	0002b617          	auipc	a2,0x2b
    80003752:	2b260613          	addi	a2,a2,690 # 8002ea00 <__func__.0+0xb18>
    80003756:	08200593          	li	a1,130
    8000375a:	0002b517          	auipc	a0,0x2b
    8000375e:	a8650513          	addi	a0,a0,-1402 # 8002e1e0 <__func__.0+0x2f8>
    80003762:	4c9270ef          	jal	8002b42a <printf>
    80003766:	00055797          	auipc	a5,0x55
    8000376a:	8ab7c783          	lbu	a5,-1877(a5) # 80058011 <excpt+0x1>
    8000376e:	2a079663          	bnez	a5,80003a1a <m_and_hs_using_vs_access_1+0x3b0>
    80003772:	44848763          	beq	s1,s0,80003bc0 <m_and_hs_using_vs_access_1+0x556>
    80003776:	0002b597          	auipc	a1,0x2b
    8000377a:	a4258593          	addi	a1,a1,-1470 # 8002e1b8 <__func__.0+0x2d0>
    8000377e:	0002b517          	auipc	a0,0x2b
    80003782:	a7a50513          	addi	a0,a0,-1414 # 8002e1f8 <__func__.0+0x310>
    80003786:	4a5270ef          	jal	8002b42a <printf>
    8000378a:	0002b517          	auipc	a0,0x2b
    8000378e:	a7650513          	addi	a0,a0,-1418 # 8002e200 <__func__.0+0x318>
    80003792:	499270ef          	jal	8002b42a <printf>
    80003796:	02900513          	li	a0,41
    8000379a:	17f260ef          	jal	8002a118 <putchar>
    8000379e:	4529                	li	a0,10
    800037a0:	179260ef          	jal	8002a118 <putchar>
    800037a4:	00055797          	auipc	a5,0x55
    800037a8:	86d7c783          	lbu	a5,-1939(a5) # 80058011 <excpt+0x1>
    800037ac:	4901                	li	s2,0
    800037ae:	eb91                	bnez	a5,800037c2 <m_and_hs_using_vs_access_1+0x158>
    800037b0:	011087b7          	lui	a5,0x1108
    800037b4:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800037b8:	07c2                	slli	a5,a5,0x10
    800037ba:	17b9                	addi	a5,a5,-18
    800037bc:	8c9d                	sub	s1,s1,a5
    800037be:	0014b913          	seqz	s2,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    800037c2:	450d                	li	a0,3
    800037c4:	f44fd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800037c8:	4509                	li	a0,2
    800037ca:	e5efd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800037ce:	e3efd0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    800037d2:	37ab74b7          	lui	s1,0x37ab7
    800037d6:	001007b7          	lui	a5,0x100
    800037da:	048a                	slli	s1,s1,0x2
    800037dc:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800037e0:	eef48493          	addi	s1,s1,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800037e4:	07b2                	slli	a5,a5,0xc
    800037e6:	6e97c073          	.insn	4, 0x6e97c073
    asm volatile(
    800037ea:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    800037ee:	0002b617          	auipc	a2,0x2b
    800037f2:	23a60613          	addi	a2,a2,570 # 8002ea28 <__func__.0+0xb40>
    800037f6:	08200593          	li	a1,130
    800037fa:	0002b517          	auipc	a0,0x2b
    800037fe:	9e650513          	addi	a0,a0,-1562 # 8002e1e0 <__func__.0+0x2f8>
    80003802:	429270ef          	jal	8002b42a <printf>
    80003806:	00055797          	auipc	a5,0x55
    8000380a:	80b7c783          	lbu	a5,-2037(a5) # 80058011 <excpt+0x1>
    8000380e:	24079263          	bnez	a5,80003a52 <m_and_hs_using_vs_access_1+0x3e8>
    80003812:	3c940863          	beq	s0,s1,80003be2 <m_and_hs_using_vs_access_1+0x578>
    80003816:	0002b597          	auipc	a1,0x2b
    8000381a:	9a258593          	addi	a1,a1,-1630 # 8002e1b8 <__func__.0+0x2d0>
    8000381e:	0002b517          	auipc	a0,0x2b
    80003822:	9da50513          	addi	a0,a0,-1574 # 8002e1f8 <__func__.0+0x310>
    80003826:	405270ef          	jal	8002b42a <printf>
    8000382a:	0002b517          	auipc	a0,0x2b
    8000382e:	9d650513          	addi	a0,a0,-1578 # 8002e200 <__func__.0+0x318>
    80003832:	3f9270ef          	jal	8002b42a <printf>
    80003836:	02900513          	li	a0,41
    8000383a:	0df260ef          	jal	8002a118 <putchar>
    8000383e:	4529                	li	a0,10
    80003840:	0d9260ef          	jal	8002a118 <putchar>
    80003844:	32091563          	bnez	s2,80003b6e <m_and_hs_using_vs_access_1+0x504>
    80003848:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    8000384a:	dc2fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000384e:	001007b7          	lui	a5,0x100
    80003852:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003856:	07b2                	slli	a5,a5,0xc
    80003858:	0ff00913          	li	s2,255
    8000385c:	6327c073          	.insn	4, 0x6327c073
    asm volatile(
    80003860:	6007c9f3          	.insn	4, 0x6007c9f3
    asm volatile(
    80003864:	6017c4f3          	.insn	4, 0x6017c4f3
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003868:	0002b617          	auipc	a2,0x2b
    8000386c:	1c860613          	addi	a2,a2,456 # 8002ea30 <__func__.0+0xb48>
    80003870:	08200593          	li	a1,130
    80003874:	0002b517          	auipc	a0,0x2b
    80003878:	96c50513          	addi	a0,a0,-1684 # 8002e1e0 <__func__.0+0x2f8>
    8000387c:	3af270ef          	jal	8002b42a <printf>
    80003880:	00054797          	auipc	a5,0x54
    80003884:	7917c783          	lbu	a5,1937(a5) # 80058011 <excpt+0x1>
    80003888:	28079e63          	bnez	a5,80003b24 <m_and_hs_using_vs_access_1+0x4ba>
    8000388c:	57fd                	li	a5,-1
    8000388e:	30f98763          	beq	s3,a5,80003b9c <m_and_hs_using_vs_access_1+0x532>
    80003892:	0002b597          	auipc	a1,0x2b
    80003896:	92658593          	addi	a1,a1,-1754 # 8002e1b8 <__func__.0+0x2d0>
    8000389a:	0002b517          	auipc	a0,0x2b
    8000389e:	95e50513          	addi	a0,a0,-1698 # 8002e1f8 <__func__.0+0x310>
    800038a2:	389270ef          	jal	8002b42a <printf>
    800038a6:	0002b517          	auipc	a0,0x2b
    800038aa:	95a50513          	addi	a0,a0,-1702 # 8002e200 <__func__.0+0x318>
    800038ae:	37d270ef          	jal	8002b42a <printf>
    800038b2:	02900513          	li	a0,41
    800038b6:	063260ef          	jal	8002a118 <putchar>
    800038ba:	4529                	li	a0,10
    800038bc:	05d260ef          	jal	8002a118 <putchar>
    800038c0:	c419                	beqz	s0,800038ce <m_and_hs_using_vs_access_1+0x264>
    800038c2:	00054797          	auipc	a5,0x54
    800038c6:	74f7c783          	lbu	a5,1871(a5) # 80058011 <excpt+0x1>
    800038ca:	2c078563          	beqz	a5,80003b94 <m_and_hs_using_vs_access_1+0x52a>
    800038ce:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800038d0:	d3cfd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800038d4:	001007b7          	lui	a5,0x100
    800038d8:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800038dc:	6941                	lui	s2,0x10
    800038de:	07b2                	slli	a5,a5,0xc
    800038e0:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    800038e2:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    800038e6:	6407c9f3          	.insn	4, 0x6407c9f3
    asm volatile(
    800038ea:	6417c4f3          	.insn	4, 0x6417c4f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    800038ee:	0002b617          	auipc	a2,0x2b
    800038f2:	15a60613          	addi	a2,a2,346 # 8002ea48 <__func__.0+0xb60>
    800038f6:	08200593          	li	a1,130
    800038fa:	0002b517          	auipc	a0,0x2b
    800038fe:	8e650513          	addi	a0,a0,-1818 # 8002e1e0 <__func__.0+0x2f8>
    80003902:	329270ef          	jal	8002b42a <printf>
    80003906:	00054797          	auipc	a5,0x54
    8000390a:	70b7c783          	lbu	a5,1803(a5) # 80058011 <excpt+0x1>
    8000390e:	1c079563          	bnez	a5,80003ad8 <m_and_hs_using_vs_access_1+0x46e>
    80003912:	57fd                	li	a5,-1
    80003914:	30f98b63          	beq	s3,a5,80003c2a <m_and_hs_using_vs_access_1+0x5c0>
    80003918:	0002b597          	auipc	a1,0x2b
    8000391c:	8a058593          	addi	a1,a1,-1888 # 8002e1b8 <__func__.0+0x2d0>
    80003920:	0002b517          	auipc	a0,0x2b
    80003924:	8d850513          	addi	a0,a0,-1832 # 8002e1f8 <__func__.0+0x310>
    80003928:	303270ef          	jal	8002b42a <printf>
    8000392c:	0002b517          	auipc	a0,0x2b
    80003930:	8d450513          	addi	a0,a0,-1836 # 8002e200 <__func__.0+0x318>
    80003934:	2f7270ef          	jal	8002b42a <printf>
    80003938:	02900513          	li	a0,41
    8000393c:	7dc260ef          	jal	8002a118 <putchar>
    80003940:	4529                	li	a0,10
    80003942:	7d6260ef          	jal	8002a118 <putchar>
    80003946:	c419                	beqz	s0,80003954 <m_and_hs_using_vs_access_1+0x2ea>
    80003948:	00054797          	auipc	a5,0x54
    8000394c:	6c97c783          	lbu	a5,1737(a5) # 80058011 <excpt+0x1>
    80003950:	22078e63          	beqz	a5,80003b8c <m_and_hs_using_vs_access_1+0x522>
    80003954:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003956:	cb6fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000395a:	001007b7          	lui	a5,0x100
    8000395e:	54fd                	li	s1,-1
    80003960:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003964:	07b2                	slli	a5,a5,0xc
    80003966:	0204d993          	srli	s3,s1,0x20
    8000396a:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    8000396e:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    80003972:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003976:	0002b617          	auipc	a2,0x2b
    8000397a:	0ea60613          	addi	a2,a2,234 # 8002ea60 <__func__.0+0xb78>
    8000397e:	08200593          	li	a1,130
    80003982:	0002b517          	auipc	a0,0x2b
    80003986:	85e50513          	addi	a0,a0,-1954 # 8002e1e0 <__func__.0+0x2f8>
    8000398a:	2a1270ef          	jal	8002b42a <printf>
    8000398e:	00054797          	auipc	a5,0x54
    80003992:	6837c783          	lbu	a5,1667(a5) # 80058011 <excpt+0x1>
    80003996:	0e079c63          	bnez	a5,80003a8e <m_and_hs_using_vs_access_1+0x424>
    8000399a:	269a0563          	beq	s4,s1,80003c04 <m_and_hs_using_vs_access_1+0x59a>
    8000399e:	0002b597          	auipc	a1,0x2b
    800039a2:	81a58593          	addi	a1,a1,-2022 # 8002e1b8 <__func__.0+0x2d0>
    800039a6:	0002b517          	auipc	a0,0x2b
    800039aa:	85250513          	addi	a0,a0,-1966 # 8002e1f8 <__func__.0+0x310>
    800039ae:	27d270ef          	jal	8002b42a <printf>
    800039b2:	0002b517          	auipc	a0,0x2b
    800039b6:	84e50513          	addi	a0,a0,-1970 # 8002e200 <__func__.0+0x318>
    800039ba:	271270ef          	jal	8002b42a <printf>
    800039be:	02900513          	li	a0,41
    800039c2:	756260ef          	jal	8002a118 <putchar>
    800039c6:	4529                	li	a0,10
    800039c8:	750260ef          	jal	8002a118 <putchar>
    800039cc:	00090e63          	beqz	s2,800039e8 <m_and_hs_using_vs_access_1+0x37e>
    800039d0:	00054797          	auipc	a5,0x54
    800039d4:	6417c783          	lbu	a5,1601(a5) # 80058011 <excpt+0x1>
    800039d8:	eb81                	bnez	a5,800039e8 <m_and_hs_using_vs_access_1+0x37e>
    800039da:	57fd                	li	a5,-1
    800039dc:	00fa1663          	bne	s4,a5,800039e8 <m_and_hs_using_vs_access_1+0x37e>
    800039e0:	020a5a13          	srli	s4,s4,0x20
    800039e4:	0f440463          	beq	s0,s4,80003acc <m_and_hs_using_vs_access_1+0x462>
    800039e8:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    800039ea:	0002a597          	auipc	a1,0x2a
    800039ee:	7ce58593          	addi	a1,a1,1998 # 8002e1b8 <__func__.0+0x2d0>
    800039f2:	0002b517          	auipc	a0,0x2b
    800039f6:	86e50513          	addi	a0,a0,-1938 # 8002e260 <__func__.0+0x378>
    800039fa:	231270ef          	jal	8002b42a <printf>
    800039fe:	4511                	li	a0,4
    80003a00:	d08fd0ef          	jal	80000f08 <goto_priv>
    80003a04:	e21fd0ef          	jal	80001824 <reset_state>
}
    80003a08:	70a2                	ld	ra,40(sp)
    80003a0a:	8522                	mv	a0,s0
    80003a0c:	7402                	ld	s0,32(sp)
    80003a0e:	64e2                	ld	s1,24(sp)
    80003a10:	6942                	ld	s2,16(sp)
    80003a12:	69a2                	ld	s3,8(sp)
    80003a14:	6a02                	ld	s4,0(sp)
    80003a16:	6145                	addi	sp,sp,48
    80003a18:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003a1a:	0002a597          	auipc	a1,0x2a
    80003a1e:	79e58593          	addi	a1,a1,1950 # 8002e1b8 <__func__.0+0x2d0>
    80003a22:	0002a517          	auipc	a0,0x2a
    80003a26:	7d650513          	addi	a0,a0,2006 # 8002e1f8 <__func__.0+0x310>
    80003a2a:	201270ef          	jal	8002b42a <printf>
    80003a2e:	00054797          	auipc	a5,0x54
    80003a32:	5e37c783          	lbu	a5,1507(a5) # 80058011 <excpt+0x1>
    80003a36:	d4079ae3          	bnez	a5,8000378a <m_and_hs_using_vs_access_1+0x120>
    80003a3a:	d48498e3          	bne	s1,s0,8000378a <m_and_hs_using_vs_access_1+0x120>
    80003a3e:	4529                	li	a0,10
    80003a40:	6d8260ef          	jal	8002a118 <putchar>
    80003a44:	00054917          	auipc	s2,0x54
    80003a48:	5cd94903          	lbu	s2,1485(s2) # 80058011 <excpt+0x1>
    80003a4c:	00194913          	xori	s2,s2,1
    80003a50:	bb8d                	j	800037c2 <m_and_hs_using_vs_access_1+0x158>
    TEST_ASSERT("hs hlvd",
    80003a52:	0002a597          	auipc	a1,0x2a
    80003a56:	76658593          	addi	a1,a1,1894 # 8002e1b8 <__func__.0+0x2d0>
    80003a5a:	0002a517          	auipc	a0,0x2a
    80003a5e:	79e50513          	addi	a0,a0,1950 # 8002e1f8 <__func__.0+0x310>
    80003a62:	1c9270ef          	jal	8002b42a <printf>
    80003a66:	00054797          	auipc	a5,0x54
    80003a6a:	5ab7c783          	lbu	a5,1451(a5) # 80058011 <excpt+0x1>
    80003a6e:	da079ee3          	bnez	a5,8000382a <m_and_hs_using_vs_access_1+0x1c0>
    80003a72:	da941ce3          	bne	s0,s1,8000382a <m_and_hs_using_vs_access_1+0x1c0>
    80003a76:	4529                	li	a0,10
    80003a78:	6a0260ef          	jal	8002a118 <putchar>
    80003a7c:	dc0906e3          	beqz	s2,80003848 <m_and_hs_using_vs_access_1+0x1de>
    80003a80:	00054417          	auipc	s0,0x54
    80003a84:	59144403          	lbu	s0,1425(s0) # 80058011 <excpt+0x1>
    80003a88:	00144413          	xori	s0,s0,1
    80003a8c:	bb7d                	j	8000384a <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003a8e:	0002a597          	auipc	a1,0x2a
    80003a92:	72a58593          	addi	a1,a1,1834 # 8002e1b8 <__func__.0+0x2d0>
    80003a96:	0002a517          	auipc	a0,0x2a
    80003a9a:	76250513          	addi	a0,a0,1890 # 8002e1f8 <__func__.0+0x310>
    80003a9e:	18d270ef          	jal	8002b42a <printf>
    80003aa2:	00054797          	auipc	a5,0x54
    80003aa6:	56f7c783          	lbu	a5,1391(a5) # 80058011 <excpt+0x1>
    80003aaa:	f00794e3          	bnez	a5,800039b2 <m_and_hs_using_vs_access_1+0x348>
    80003aae:	f09a12e3          	bne	s4,s1,800039b2 <m_and_hs_using_vs_access_1+0x348>
    80003ab2:	f13410e3          	bne	s0,s3,800039b2 <m_and_hs_using_vs_access_1+0x348>
    80003ab6:	4529                	li	a0,10
    80003ab8:	660260ef          	jal	8002a118 <putchar>
    80003abc:	f20906e3          	beqz	s2,800039e8 <m_and_hs_using_vs_access_1+0x37e>
    80003ac0:	00054797          	auipc	a5,0x54
    80003ac4:	5517c783          	lbu	a5,1361(a5) # 80058011 <excpt+0x1>
    80003ac8:	f20790e3          	bnez	a5,800039e8 <m_and_hs_using_vs_access_1+0x37e>
    80003acc:	4405                	li	s0,1
    TEST_END();
    80003ace:	0002a597          	auipc	a1,0x2a
    80003ad2:	6da58593          	addi	a1,a1,1754 # 8002e1a8 <__func__.0+0x2c0>
    80003ad6:	bf31                	j	800039f2 <m_and_hs_using_vs_access_1+0x388>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003ad8:	0002a597          	auipc	a1,0x2a
    80003adc:	6e058593          	addi	a1,a1,1760 # 8002e1b8 <__func__.0+0x2d0>
    80003ae0:	0002a517          	auipc	a0,0x2a
    80003ae4:	71850513          	addi	a0,a0,1816 # 8002e1f8 <__func__.0+0x310>
    80003ae8:	143270ef          	jal	8002b42a <printf>
    80003aec:	00054797          	auipc	a5,0x54
    80003af0:	5257c783          	lbu	a5,1317(a5) # 80058011 <excpt+0x1>
    80003af4:	e2079ce3          	bnez	a5,8000392c <m_and_hs_using_vs_access_1+0x2c2>
    80003af8:	57fd                	li	a5,-1
    80003afa:	e2f999e3          	bne	s3,a5,8000392c <m_and_hs_using_vs_access_1+0x2c2>
    80003afe:	e32497e3          	bne	s1,s2,8000392c <m_and_hs_using_vs_access_1+0x2c2>
    80003b02:	4529                	li	a0,10
    80003b04:	614260ef          	jal	8002a118 <putchar>
    80003b08:	e40406e3          	beqz	s0,80003954 <m_and_hs_using_vs_access_1+0x2ea>
    80003b0c:	00054797          	auipc	a5,0x54
    80003b10:	5057c783          	lbu	a5,1285(a5) # 80058011 <excpt+0x1>
    80003b14:	e40790e3          	bnez	a5,80003954 <m_and_hs_using_vs_access_1+0x2ea>
    80003b18:	7941                	lui	s2,0xffff0
    80003b1a:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003b1c:	9926                	add	s2,s2,s1
    80003b1e:	00193913          	seqz	s2,s2
    80003b22:	bd15                	j	80003956 <m_and_hs_using_vs_access_1+0x2ec>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003b24:	0002a597          	auipc	a1,0x2a
    80003b28:	69458593          	addi	a1,a1,1684 # 8002e1b8 <__func__.0+0x2d0>
    80003b2c:	0002a517          	auipc	a0,0x2a
    80003b30:	6cc50513          	addi	a0,a0,1740 # 8002e1f8 <__func__.0+0x310>
    80003b34:	0f7270ef          	jal	8002b42a <printf>
    80003b38:	00054797          	auipc	a5,0x54
    80003b3c:	4d97c783          	lbu	a5,1241(a5) # 80058011 <excpt+0x1>
    80003b40:	d60793e3          	bnez	a5,800038a6 <m_and_hs_using_vs_access_1+0x23c>
    80003b44:	57fd                	li	a5,-1
    80003b46:	d6f990e3          	bne	s3,a5,800038a6 <m_and_hs_using_vs_access_1+0x23c>
    80003b4a:	d5249ee3          	bne	s1,s2,800038a6 <m_and_hs_using_vs_access_1+0x23c>
    80003b4e:	4529                	li	a0,10
    80003b50:	5c8260ef          	jal	8002a118 <putchar>
    80003b54:	d6040de3          	beqz	s0,800038ce <m_and_hs_using_vs_access_1+0x264>
    80003b58:	00054797          	auipc	a5,0x54
    80003b5c:	4b97c783          	lbu	a5,1209(a5) # 80058011 <excpt+0x1>
    80003b60:	d60797e3          	bnez	a5,800038ce <m_and_hs_using_vs_access_1+0x264>
    80003b64:	f0148793          	addi	a5,s1,-255
    80003b68:	0017b413          	seqz	s0,a5
    80003b6c:	b395                	j	800038d0 <m_and_hs_using_vs_access_1+0x266>
    TEST_ASSERT("hs hlvd",
    80003b6e:	00054797          	auipc	a5,0x54
    80003b72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    80003b76:	cc0799e3          	bnez	a5,80003848 <m_and_hs_using_vs_access_1+0x1de>
    80003b7a:	c85497b7          	lui	a5,0xc8549
    80003b7e:	078a                	slli	a5,a5,0x2
    80003b80:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003b84:	943e                	add	s0,s0,a5
    80003b86:	00143413          	seqz	s0,s0
    80003b8a:	b1c1                	j	8000384a <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003b8c:	57fd                	li	a5,-1
    80003b8e:	dcf993e3          	bne	s3,a5,80003954 <m_and_hs_using_vs_access_1+0x2ea>
    80003b92:	b759                	j	80003b18 <m_and_hs_using_vs_access_1+0x4ae>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003b94:	57fd                	li	a5,-1
    80003b96:	d2f99ce3          	bne	s3,a5,800038ce <m_and_hs_using_vs_access_1+0x264>
    80003b9a:	b7e9                	j	80003b64 <m_and_hs_using_vs_access_1+0x4fa>
    80003b9c:	cf249be3          	bne	s1,s2,80003892 <m_and_hs_using_vs_access_1+0x228>
    80003ba0:	0002a597          	auipc	a1,0x2a
    80003ba4:	60858593          	addi	a1,a1,1544 # 8002e1a8 <__func__.0+0x2c0>
    80003ba8:	0002a517          	auipc	a0,0x2a
    80003bac:	65050513          	addi	a0,a0,1616 # 8002e1f8 <__func__.0+0x310>
    80003bb0:	07b270ef          	jal	8002b42a <printf>
    80003bb4:	00054797          	auipc	a5,0x54
    80003bb8:	45d7c783          	lbu	a5,1117(a5) # 80058011 <excpt+0x1>
    80003bbc:	dbc9                	beqz	a5,80003b4e <m_and_hs_using_vs_access_1+0x4e4>
    80003bbe:	b1e5                	j	800038a6 <m_and_hs_using_vs_access_1+0x23c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003bc0:	0002a597          	auipc	a1,0x2a
    80003bc4:	5e858593          	addi	a1,a1,1512 # 8002e1a8 <__func__.0+0x2c0>
    80003bc8:	0002a517          	auipc	a0,0x2a
    80003bcc:	63050513          	addi	a0,a0,1584 # 8002e1f8 <__func__.0+0x310>
    80003bd0:	05b270ef          	jal	8002b42a <printf>
    80003bd4:	00054797          	auipc	a5,0x54
    80003bd8:	43d7c783          	lbu	a5,1085(a5) # 80058011 <excpt+0x1>
    80003bdc:	bc0781e3          	beqz	a5,8000379e <m_and_hs_using_vs_access_1+0x134>
    80003be0:	b66d                	j	8000378a <m_and_hs_using_vs_access_1+0x120>
    TEST_ASSERT("hs hlvd",
    80003be2:	0002a597          	auipc	a1,0x2a
    80003be6:	5c658593          	addi	a1,a1,1478 # 8002e1a8 <__func__.0+0x2c0>
    80003bea:	0002a517          	auipc	a0,0x2a
    80003bee:	60e50513          	addi	a0,a0,1550 # 8002e1f8 <__func__.0+0x310>
    80003bf2:	039270ef          	jal	8002b42a <printf>
    80003bf6:	00054797          	auipc	a5,0x54
    80003bfa:	41b7c783          	lbu	a5,1051(a5) # 80058011 <excpt+0x1>
    80003bfe:	e6078ce3          	beqz	a5,80003a76 <m_and_hs_using_vs_access_1+0x40c>
    80003c02:	b125                	j	8000382a <m_and_hs_using_vs_access_1+0x1c0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003c04:	d9341de3          	bne	s0,s3,8000399e <m_and_hs_using_vs_access_1+0x334>
    80003c08:	0002a597          	auipc	a1,0x2a
    80003c0c:	5a058593          	addi	a1,a1,1440 # 8002e1a8 <__func__.0+0x2c0>
    80003c10:	0002a517          	auipc	a0,0x2a
    80003c14:	5e850513          	addi	a0,a0,1512 # 8002e1f8 <__func__.0+0x310>
    80003c18:	013270ef          	jal	8002b42a <printf>
    80003c1c:	00054797          	auipc	a5,0x54
    80003c20:	3f57c783          	lbu	a5,1013(a5) # 80058011 <excpt+0x1>
    80003c24:	e80789e3          	beqz	a5,80003ab6 <m_and_hs_using_vs_access_1+0x44c>
    80003c28:	b369                	j	800039b2 <m_and_hs_using_vs_access_1+0x348>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003c2a:	cf2497e3          	bne	s1,s2,80003918 <m_and_hs_using_vs_access_1+0x2ae>
    80003c2e:	0002a597          	auipc	a1,0x2a
    80003c32:	57a58593          	addi	a1,a1,1402 # 8002e1a8 <__func__.0+0x2c0>
    80003c36:	0002a517          	auipc	a0,0x2a
    80003c3a:	5c250513          	addi	a0,a0,1474 # 8002e1f8 <__func__.0+0x310>
    80003c3e:	7ec270ef          	jal	8002b42a <printf>
    80003c42:	00054797          	auipc	a5,0x54
    80003c46:	3cf7c783          	lbu	a5,975(a5) # 80058011 <excpt+0x1>
    80003c4a:	ea078ce3          	beqz	a5,80003b02 <m_and_hs_using_vs_access_1+0x498>
    80003c4e:	b9f9                	j	8000392c <m_and_hs_using_vs_access_1+0x2c2>

0000000080003c50 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003c50:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003c52:	00028597          	auipc	a1,0x28
    80003c56:	62658593          	addi	a1,a1,1574 # 8002c278 <__func__.10>
    80003c5a:	0002a517          	auipc	a0,0x2a
    80003c5e:	56e50513          	addi	a0,a0,1390 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    80003c62:	ec06                	sd	ra,24(sp)
    80003c64:	e822                	sd	s0,16(sp)
    80003c66:	e426                	sd	s1,8(sp)
    TEST_START();
    80003c68:	7c2270ef          	jal	8002b42a <printf>
    80003c6c:	4529                	li	a0,10
    80003c6e:	4aa260ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80003c72:	96ffc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003c76:	d4ffc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003c7a:	b03fc0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80003c7e:	450d                	li	a0,3
    80003c80:	a88fd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003c84:	4509                	li	a0,2
    80003c86:	9a2fd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003c8a:	982fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003c8e:	200037b7          	lui	a5,0x20003
    80003c92:	078e                	slli	a5,a5,0x3
    80003c94:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003c98:	08200593          	li	a1,130
    80003c9c:	0002b617          	auipc	a2,0x2b
    80003ca0:	ddc60613          	addi	a2,a2,-548 # 8002ea78 <__func__.0+0xb90>
    80003ca4:	0002a517          	auipc	a0,0x2a
    80003ca8:	53c50513          	addi	a0,a0,1340 # 8002e1e0 <__func__.0+0x2f8>
    80003cac:	77e270ef          	jal	8002b42a <printf>
    80003cb0:	00054797          	auipc	a5,0x54
    80003cb4:	3617c783          	lbu	a5,865(a5) # 80058011 <excpt+0x1>
    80003cb8:	0002a597          	auipc	a1,0x2a
    80003cbc:	4f058593          	addi	a1,a1,1264 # 8002e1a8 <__func__.0+0x2c0>
    80003cc0:	c789                	beqz	a5,80003cca <m_and_hs_using_vs_access_2+0x7a>
    80003cc2:	0002a597          	auipc	a1,0x2a
    80003cc6:	4f658593          	addi	a1,a1,1270 # 8002e1b8 <__func__.0+0x2d0>
    80003cca:	0002a517          	auipc	a0,0x2a
    80003cce:	52e50513          	addi	a0,a0,1326 # 8002e1f8 <__func__.0+0x310>
    80003cd2:	758270ef          	jal	8002b42a <printf>
    80003cd6:	00054797          	auipc	a5,0x54
    80003cda:	33b7c783          	lbu	a5,827(a5) # 80058011 <excpt+0x1>
    80003cde:	24079d63          	bnez	a5,80003f38 <m_and_hs_using_vs_access_2+0x2e8>
    80003ce2:	4529                	li	a0,10
    80003ce4:	434260ef          	jal	8002a118 <putchar>
    80003ce8:	00054497          	auipc	s1,0x54
    80003cec:	3294c483          	lbu	s1,809(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003cf0:	91cfd0ef          	jal	80000e0c <test_setup_except_function>
    80003cf4:	4785                	li	a5,1
    80003cf6:	1782                	slli	a5,a5,0x20
    80003cf8:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003cfc:	08200593          	li	a1,130
    80003d00:	0002b617          	auipc	a2,0x2b
    80003d04:	da060613          	addi	a2,a2,-608 # 8002eaa0 <__func__.0+0xbb8>
    80003d08:	0002a517          	auipc	a0,0x2a
    80003d0c:	4d850513          	addi	a0,a0,1240 # 8002e1e0 <__func__.0+0x2f8>
    80003d10:	71a270ef          	jal	8002b42a <printf>
    80003d14:	00054797          	auipc	a5,0x54
    80003d18:	2fd7c783          	lbu	a5,765(a5) # 80058011 <excpt+0x1>
    80003d1c:	0002a597          	auipc	a1,0x2a
    80003d20:	49c58593          	addi	a1,a1,1180 # 8002e1b8 <__func__.0+0x2d0>
    80003d24:	e789                	bnez	a5,80003d2e <m_and_hs_using_vs_access_2+0xde>
    80003d26:	0002a597          	auipc	a1,0x2a
    80003d2a:	48258593          	addi	a1,a1,1154 # 8002e1a8 <__func__.0+0x2c0>
    80003d2e:	0002a517          	auipc	a0,0x2a
    80003d32:	4ca50513          	addi	a0,a0,1226 # 8002e1f8 <__func__.0+0x310>
    80003d36:	6f4270ef          	jal	8002b42a <printf>
    80003d3a:	00054797          	auipc	a5,0x54
    80003d3e:	2d77c783          	lbu	a5,727(a5) # 80058011 <excpt+0x1>
    80003d42:	1e079063          	bnez	a5,80003f22 <m_and_hs_using_vs_access_2+0x2d2>
    80003d46:	4529                	li	a0,10
    80003d48:	3d0260ef          	jal	8002a118 <putchar>
    80003d4c:	4401                	li	s0,0
    80003d4e:	e499                	bnez	s1,80003d5c <m_and_hs_using_vs_access_2+0x10c>
    80003d50:	00054417          	auipc	s0,0x54
    80003d54:	2c144403          	lbu	s0,705(s0) # 80058011 <excpt+0x1>
    80003d58:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003d5c:	8b0fd0ef          	jal	80000e0c <test_setup_except_function>
    80003d60:	001007b7          	lui	a5,0x100
    80003d64:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003d66:	07b2                	slli	a5,a5,0xc
    80003d68:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003d6c:	08200593          	li	a1,130
    80003d70:	0002b617          	auipc	a2,0x2b
    80003d74:	d6060613          	addi	a2,a2,-672 # 8002ead0 <__func__.0+0xbe8>
    80003d78:	0002a517          	auipc	a0,0x2a
    80003d7c:	46850513          	addi	a0,a0,1128 # 8002e1e0 <__func__.0+0x2f8>
    80003d80:	6aa270ef          	jal	8002b42a <printf>
    80003d84:	00054797          	auipc	a5,0x54
    80003d88:	28d7c783          	lbu	a5,653(a5) # 80058011 <excpt+0x1>
    80003d8c:	00054497          	auipc	s1,0x54
    80003d90:	28448493          	addi	s1,s1,644 # 80058010 <excpt>
    80003d94:	0002a597          	auipc	a1,0x2a
    80003d98:	42458593          	addi	a1,a1,1060 # 8002e1b8 <__func__.0+0x2d0>
    80003d9c:	c789                	beqz	a5,80003da6 <m_and_hs_using_vs_access_2+0x156>
    80003d9e:	6498                	ld	a4,8(s1)
    80003da0:	47d5                	li	a5,21
    80003da2:	1cf70b63          	beq	a4,a5,80003f78 <m_and_hs_using_vs_access_2+0x328>
    80003da6:	0002a517          	auipc	a0,0x2a
    80003daa:	45250513          	addi	a0,a0,1106 # 8002e1f8 <__func__.0+0x310>
    80003dae:	67c270ef          	jal	8002b42a <printf>
    80003db2:	00054797          	auipc	a5,0x54
    80003db6:	25f7c783          	lbu	a5,607(a5) # 80058011 <excpt+0x1>
    80003dba:	c789                	beqz	a5,80003dc4 <m_and_hs_using_vs_access_2+0x174>
    80003dbc:	6498                	ld	a4,8(s1)
    80003dbe:	47d5                	li	a5,21
    80003dc0:	14f70463          	beq	a4,a5,80003f08 <m_and_hs_using_vs_access_2+0x2b8>
    80003dc4:	0002a517          	auipc	a0,0x2a
    80003dc8:	43c50513          	addi	a0,a0,1084 # 8002e200 <__func__.0+0x318>
    80003dcc:	65e270ef          	jal	8002b42a <printf>
    80003dd0:	02900513          	li	a0,41
    80003dd4:	344260ef          	jal	8002a118 <putchar>
    80003dd8:	4529                	li	a0,10
    80003dda:	33e260ef          	jal	8002a118 <putchar>
    80003dde:	c801                	beqz	s0,80003dee <m_and_hs_using_vs_access_2+0x19e>
    80003de0:	00054797          	auipc	a5,0x54
    80003de4:	2317c783          	lbu	a5,561(a5) # 80058011 <excpt+0x1>
    80003de8:	4401                	li	s0,0
    80003dea:	0e079363          	bnez	a5,80003ed0 <m_and_hs_using_vs_access_2+0x280>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003dee:	81efd0ef          	jal	80000e0c <test_setup_except_function>
    80003df2:	001007b7          	lui	a5,0x100
    80003df6:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003df8:	07b2                	slli	a5,a5,0xc
    80003dfa:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003dfe:	08200593          	li	a1,130
    80003e02:	0002b617          	auipc	a2,0x2b
    80003e06:	d0660613          	addi	a2,a2,-762 # 8002eb08 <__func__.0+0xc20>
    80003e0a:	0002a517          	auipc	a0,0x2a
    80003e0e:	3d650513          	addi	a0,a0,982 # 8002e1e0 <__func__.0+0x2f8>
    80003e12:	618270ef          	jal	8002b42a <printf>
    80003e16:	00054797          	auipc	a5,0x54
    80003e1a:	1fb7c783          	lbu	a5,507(a5) # 80058011 <excpt+0x1>
    80003e1e:	0002a597          	auipc	a1,0x2a
    80003e22:	39a58593          	addi	a1,a1,922 # 8002e1b8 <__func__.0+0x2d0>
    80003e26:	c789                	beqz	a5,80003e30 <m_and_hs_using_vs_access_2+0x1e0>
    80003e28:	6498                	ld	a4,8(s1)
    80003e2a:	47b5                	li	a5,13
    80003e2c:	12f70163          	beq	a4,a5,80003f4e <m_and_hs_using_vs_access_2+0x2fe>
    80003e30:	0002a517          	auipc	a0,0x2a
    80003e34:	3c850513          	addi	a0,a0,968 # 8002e1f8 <__func__.0+0x310>
    80003e38:	5f2270ef          	jal	8002b42a <printf>
    80003e3c:	00054797          	auipc	a5,0x54
    80003e40:	1d57c783          	lbu	a5,469(a5) # 80058011 <excpt+0x1>
    80003e44:	c789                	beqz	a5,80003e4e <m_and_hs_using_vs_access_2+0x1fe>
    80003e46:	6498                	ld	a4,8(s1)
    80003e48:	47b5                	li	a5,13
    80003e4a:	0af70463          	beq	a4,a5,80003ef2 <m_and_hs_using_vs_access_2+0x2a2>
    80003e4e:	0002a517          	auipc	a0,0x2a
    80003e52:	3b250513          	addi	a0,a0,946 # 8002e200 <__func__.0+0x318>
    80003e56:	5d4270ef          	jal	8002b42a <printf>
    80003e5a:	02900513          	li	a0,41
    80003e5e:	2ba260ef          	jal	8002a118 <putchar>
    80003e62:	4529                	li	a0,10
    80003e64:	2b4260ef          	jal	8002a118 <putchar>
    80003e68:	c411                	beqz	s0,80003e74 <m_and_hs_using_vs_access_2+0x224>
    80003e6a:	00054797          	auipc	a5,0x54
    80003e6e:	1a77c783          	lbu	a5,423(a5) # 80058011 <excpt+0x1>
    80003e72:	e79d                	bnez	a5,80003ea0 <m_and_hs_using_vs_access_2+0x250>
    80003e74:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003e76:	0002a597          	auipc	a1,0x2a
    80003e7a:	34258593          	addi	a1,a1,834 # 8002e1b8 <__func__.0+0x2d0>
    80003e7e:	0002a517          	auipc	a0,0x2a
    80003e82:	3e250513          	addi	a0,a0,994 # 8002e260 <__func__.0+0x378>
    80003e86:	5a4270ef          	jal	8002b42a <printf>
    80003e8a:	4511                	li	a0,4
    80003e8c:	87cfd0ef          	jal	80000f08 <goto_priv>
    80003e90:	995fd0ef          	jal	80001824 <reset_state>
}
    80003e94:	60e2                	ld	ra,24(sp)
    80003e96:	8522                	mv	a0,s0
    80003e98:	6442                	ld	s0,16(sp)
    80003e9a:	64a2                	ld	s1,8(sp)
    80003e9c:	6105                	addi	sp,sp,32
    80003e9e:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ea0:	6498                	ld	a4,8(s1)
    80003ea2:	47b5                	li	a5,13
    80003ea4:	4401                	li	s0,0
    TEST_END();
    80003ea6:	0002a597          	auipc	a1,0x2a
    80003eaa:	31258593          	addi	a1,a1,786 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003eae:	fcf718e3          	bne	a4,a5,80003e7e <m_and_hs_using_vs_access_2+0x22e>
    80003eb2:	00054417          	auipc	s0,0x54
    80003eb6:	18e44403          	lbu	s0,398(s0) # 80058040 <excpt+0x30>
    80003eba:	d071                	beqz	s0,80003e7e <m_and_hs_using_vs_access_2+0x22e>
    80003ebc:	00054797          	auipc	a5,0x54
    80003ec0:	1857c783          	lbu	a5,389(a5) # 80058041 <excpt+0x31>
    TEST_END();
    80003ec4:	0002a597          	auipc	a1,0x2a
    80003ec8:	2e458593          	addi	a1,a1,740 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ecc:	dbcd                	beqz	a5,80003e7e <m_and_hs_using_vs_access_2+0x22e>
    80003ece:	b75d                	j	80003e74 <m_and_hs_using_vs_access_2+0x224>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003ed0:	6498                	ld	a4,8(s1)
    80003ed2:	47d5                	li	a5,21
    80003ed4:	f0f71de3          	bne	a4,a5,80003dee <m_and_hs_using_vs_access_2+0x19e>
    80003ed8:	00054797          	auipc	a5,0x54
    80003edc:	1687c783          	lbu	a5,360(a5) # 80058040 <excpt+0x30>
    80003ee0:	f00787e3          	beqz	a5,80003dee <m_and_hs_using_vs_access_2+0x19e>
    80003ee4:	00054417          	auipc	s0,0x54
    80003ee8:	15d44403          	lbu	s0,349(s0) # 80058041 <excpt+0x31>
    80003eec:	00144413          	xori	s0,s0,1
    80003ef0:	bdfd                	j	80003dee <m_and_hs_using_vs_access_2+0x19e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ef2:	00054797          	auipc	a5,0x54
    80003ef6:	14e7c783          	lbu	a5,334(a5) # 80058040 <excpt+0x30>
    80003efa:	dbb1                	beqz	a5,80003e4e <m_and_hs_using_vs_access_2+0x1fe>
    80003efc:	00054797          	auipc	a5,0x54
    80003f00:	1457c783          	lbu	a5,325(a5) # 80058041 <excpt+0x31>
    80003f04:	dfb9                	beqz	a5,80003e62 <m_and_hs_using_vs_access_2+0x212>
    80003f06:	b7a1                	j	80003e4e <m_and_hs_using_vs_access_2+0x1fe>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003f08:	00054797          	auipc	a5,0x54
    80003f0c:	1387c783          	lbu	a5,312(a5) # 80058040 <excpt+0x30>
    80003f10:	ea078ae3          	beqz	a5,80003dc4 <m_and_hs_using_vs_access_2+0x174>
    80003f14:	00054797          	auipc	a5,0x54
    80003f18:	12d7c783          	lbu	a5,301(a5) # 80058041 <excpt+0x31>
    80003f1c:	ea078ee3          	beqz	a5,80003dd8 <m_and_hs_using_vs_access_2+0x188>
    80003f20:	b555                	j	80003dc4 <m_and_hs_using_vs_access_2+0x174>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003f22:	0002a517          	auipc	a0,0x2a
    80003f26:	2de50513          	addi	a0,a0,734 # 8002e200 <__func__.0+0x318>
    80003f2a:	500270ef          	jal	8002b42a <printf>
    80003f2e:	02900513          	li	a0,41
    80003f32:	1e6260ef          	jal	8002a118 <putchar>
    80003f36:	bd01                	j	80003d46 <m_and_hs_using_vs_access_2+0xf6>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003f38:	0002a517          	auipc	a0,0x2a
    80003f3c:	2c850513          	addi	a0,a0,712 # 8002e200 <__func__.0+0x318>
    80003f40:	4ea270ef          	jal	8002b42a <printf>
    80003f44:	02900513          	li	a0,41
    80003f48:	1d0260ef          	jal	8002a118 <putchar>
    80003f4c:	bb59                	j	80003ce2 <m_and_hs_using_vs_access_2+0x92>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003f4e:	00054797          	auipc	a5,0x54
    80003f52:	0f27c783          	lbu	a5,242(a5) # 80058040 <excpt+0x30>
    80003f56:	ec078de3          	beqz	a5,80003e30 <m_and_hs_using_vs_access_2+0x1e0>
    80003f5a:	00054797          	auipc	a5,0x54
    80003f5e:	0e77c783          	lbu	a5,231(a5) # 80058041 <excpt+0x31>
    80003f62:	0002a597          	auipc	a1,0x2a
    80003f66:	24658593          	addi	a1,a1,582 # 8002e1a8 <__func__.0+0x2c0>
    80003f6a:	ec0783e3          	beqz	a5,80003e30 <m_and_hs_using_vs_access_2+0x1e0>
    80003f6e:	0002a597          	auipc	a1,0x2a
    80003f72:	24a58593          	addi	a1,a1,586 # 8002e1b8 <__func__.0+0x2d0>
    80003f76:	bd6d                	j	80003e30 <m_and_hs_using_vs_access_2+0x1e0>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003f78:	00054797          	auipc	a5,0x54
    80003f7c:	0c87c783          	lbu	a5,200(a5) # 80058040 <excpt+0x30>
    80003f80:	e20783e3          	beqz	a5,80003da6 <m_and_hs_using_vs_access_2+0x156>
    80003f84:	00054797          	auipc	a5,0x54
    80003f88:	0bd7c783          	lbu	a5,189(a5) # 80058041 <excpt+0x31>
    80003f8c:	0002a597          	auipc	a1,0x2a
    80003f90:	21c58593          	addi	a1,a1,540 # 8002e1a8 <__func__.0+0x2c0>
    80003f94:	e00789e3          	beqz	a5,80003da6 <m_and_hs_using_vs_access_2+0x156>
    80003f98:	0002a597          	auipc	a1,0x2a
    80003f9c:	22058593          	addi	a1,a1,544 # 8002e1b8 <__func__.0+0x2d0>
    80003fa0:	b519                	j	80003da6 <m_and_hs_using_vs_access_2+0x156>

0000000080003fa2 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003fa2:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003fa4:	00028597          	auipc	a1,0x28
    80003fa8:	2f458593          	addi	a1,a1,756 # 8002c298 <__func__.9>
    80003fac:	0002a517          	auipc	a0,0x2a
    80003fb0:	21c50513          	addi	a0,a0,540 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003fb4:	ec06                	sd	ra,24(sp)
    80003fb6:	e822                	sd	s0,16(sp)
    80003fb8:	e426                	sd	s1,8(sp)
    80003fba:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003fbc:	46e270ef          	jal	8002b42a <printf>
    80003fc0:	4529                	li	a0,10
    80003fc2:	156260ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80003fc6:	e1afc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003fca:	9fbfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003fce:	faefc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003fd2:	4511                	li	a0,4
    80003fd4:	f35fc0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80003fd8:	00036417          	auipc	s0,0x36
    80003fdc:	81840413          	addi	s0,s0,-2024 # 800397f0 <__func__.0+0xb908>

    TEST_SETUP_EXCEPT();
    80003fe0:	e2dfc0ef          	jal	80000e0c <test_setup_except_function>
    80003fe4:	6018                	ld	a4,0(s0)
    80003fe6:	440197b7          	lui	a5,0x44019
    80003fea:	0786                	slli	a5,a5,0x1
    80003fec:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003fee:	00038717          	auipc	a4,0x38
    80003ff2:	83672703          	lw	a4,-1994(a4) # 8003b824 <curr_priv>
    80003ff6:	4791                	li	a5,4
    80003ff8:	02f70763          	beq	a4,a5,80004026 <m_and_hs_using_vs_access_3+0x84>
        ERROR("trying to read as mprv from low privilege");
    80003ffc:	0002b517          	auipc	a0,0x2b
    80004000:	9c450513          	addi	a0,a0,-1596 # 8002e9c0 <__func__.0+0xad8>
    80004004:	426270ef          	jal	8002b42a <printf>
    80004008:	0fe00613          	li	a2,254
    8000400c:	00028597          	auipc	a1,0x28
    80004010:	25c58593          	addi	a1,a1,604 # 8002c268 <__func__.11>
    80004014:	0002a517          	auipc	a0,0x2a
    80004018:	33c50513          	addi	a0,a0,828 # 8002e350 <__func__.0+0x468>
    8000401c:	40e270ef          	jal	8002b42a <printf>
    80004020:	4501                	li	a0,0
    80004022:	7bf260ef          	jal	8002afe0 <exit>
    set_prev_priv(priv);
    80004026:	4509                	li	a0,2
    80004028:	e01fc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    8000402c:	000807b7          	lui	a5,0x80
    80004030:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004032:	07b6                	slli	a5,a5,0xd
    80004034:	00020737          	lui	a4,0x20
    80004038:	30072073          	csrs	mstatus,a4
    8000403c:	6394                	ld	a3,0(a5)
    8000403e:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80004042:	08200593          	li	a1,130
    80004046:	0002b617          	auipc	a2,0x2b
    8000404a:	afa60613          	addi	a2,a2,-1286 # 8002eb40 <__func__.0+0xc58>
    8000404e:	0002a517          	auipc	a0,0x2a
    80004052:	19250513          	addi	a0,a0,402 # 8002e1e0 <__func__.0+0x2f8>
    80004056:	3d4270ef          	jal	8002b42a <printf>
    8000405a:	00054797          	auipc	a5,0x54
    8000405e:	fb77c783          	lbu	a5,-73(a5) # 80058011 <excpt+0x1>
    80004062:	00054917          	auipc	s2,0x54
    80004066:	fae90913          	addi	s2,s2,-82 # 80058010 <excpt>
    8000406a:	0002a597          	auipc	a1,0x2a
    8000406e:	14e58593          	addi	a1,a1,334 # 8002e1b8 <__func__.0+0x2d0>
    80004072:	cf91                	beqz	a5,8000408e <m_and_hs_using_vs_access_3+0xec>
    80004074:	00893703          	ld	a4,8(s2)
    80004078:	47b5                	li	a5,13
    8000407a:	0002a597          	auipc	a1,0x2a
    8000407e:	12e58593          	addi	a1,a1,302 # 8002e1a8 <__func__.0+0x2c0>
    80004082:	00f70663          	beq	a4,a5,8000408e <m_and_hs_using_vs_access_3+0xec>
    80004086:	0002a597          	auipc	a1,0x2a
    8000408a:	13258593          	addi	a1,a1,306 # 8002e1b8 <__func__.0+0x2d0>
    8000408e:	0002a517          	auipc	a0,0x2a
    80004092:	16a50513          	addi	a0,a0,362 # 8002e1f8 <__func__.0+0x310>
    80004096:	394270ef          	jal	8002b42a <printf>
    8000409a:	00054797          	auipc	a5,0x54
    8000409e:	f777c783          	lbu	a5,-137(a5) # 80058011 <excpt+0x1>
    800040a2:	c791                	beqz	a5,800040ae <m_and_hs_using_vs_access_3+0x10c>
    800040a4:	00893703          	ld	a4,8(s2)
    800040a8:	47b5                	li	a5,13
    800040aa:	00f70c63          	beq	a4,a5,800040c2 <m_and_hs_using_vs_access_3+0x120>
    800040ae:	0002a517          	auipc	a0,0x2a
    800040b2:	15250513          	addi	a0,a0,338 # 8002e200 <__func__.0+0x318>
    800040b6:	374270ef          	jal	8002b42a <printf>
    800040ba:	02900513          	li	a0,41
    800040be:	05a260ef          	jal	8002a118 <putchar>
    800040c2:	4529                	li	a0,10
    800040c4:	054260ef          	jal	8002a118 <putchar>
    800040c8:	00054797          	auipc	a5,0x54
    800040cc:	f497c783          	lbu	a5,-183(a5) # 80058011 <excpt+0x1>
    800040d0:	4481                	li	s1,0
    800040d2:	c791                	beqz	a5,800040de <m_and_hs_using_vs_access_3+0x13c>
    800040d4:	00893483          	ld	s1,8(s2)
    800040d8:	14cd                	addi	s1,s1,-13
    800040da:	0014b493          	seqz	s1,s1
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    800040de:	d2ffc0ef          	jal	80000e0c <test_setup_except_function>
    800040e2:	6018                	ld	a4,0(s0)
    800040e4:	440197b7          	lui	a5,0x44019
    800040e8:	0786                	slli	a5,a5,0x1
    800040ea:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    800040ec:	00037717          	auipc	a4,0x37
    800040f0:	73872703          	lw	a4,1848(a4) # 8003b824 <curr_priv>
    800040f4:	4791                	li	a5,4
    800040f6:	f0f713e3          	bne	a4,a5,80003ffc <m_and_hs_using_vs_access_3+0x5a>
    set_prev_priv(priv);
    800040fa:	4501                	li	a0,0
    800040fc:	d2dfc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80004100:	000807b7          	lui	a5,0x80
    80004104:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004106:	07b6                	slli	a5,a5,0xd
    80004108:	00020737          	lui	a4,0x20
    8000410c:	30072073          	csrs	mstatus,a4
    80004110:	6394                	ld	a3,0(a5)
    80004112:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80004116:	08200593          	li	a1,130
    8000411a:	0002b617          	auipc	a2,0x2b
    8000411e:	a5660613          	addi	a2,a2,-1450 # 8002eb70 <__func__.0+0xc88>
    80004122:	0002a517          	auipc	a0,0x2a
    80004126:	0be50513          	addi	a0,a0,190 # 8002e1e0 <__func__.0+0x2f8>
    8000412a:	300270ef          	jal	8002b42a <printf>
    8000412e:	00054797          	auipc	a5,0x54
    80004132:	ee37c783          	lbu	a5,-285(a5) # 80058011 <excpt+0x1>
    80004136:	0002a597          	auipc	a1,0x2a
    8000413a:	08258593          	addi	a1,a1,130 # 8002e1b8 <__func__.0+0x2d0>
    8000413e:	e789                	bnez	a5,80004148 <m_and_hs_using_vs_access_3+0x1a6>
    80004140:	0002a597          	auipc	a1,0x2a
    80004144:	06858593          	addi	a1,a1,104 # 8002e1a8 <__func__.0+0x2c0>
    80004148:	0002a517          	auipc	a0,0x2a
    8000414c:	0b050513          	addi	a0,a0,176 # 8002e1f8 <__func__.0+0x310>
    80004150:	2da270ef          	jal	8002b42a <printf>
    80004154:	00054797          	auipc	a5,0x54
    80004158:	ebd7c783          	lbu	a5,-323(a5) # 80058011 <excpt+0x1>
    8000415c:	e7b9                	bnez	a5,800041aa <m_and_hs_using_vs_access_3+0x208>
    8000415e:	4529                	li	a0,10
    80004160:	7b9250ef          	jal	8002a118 <putchar>
    80004164:	c491                	beqz	s1,80004170 <m_and_hs_using_vs_access_3+0x1ce>
    80004166:	00054797          	auipc	a5,0x54
    8000416a:	eab7c783          	lbu	a5,-341(a5) # 80058011 <excpt+0x1>
    8000416e:	cb85                	beqz	a5,8000419e <m_and_hs_using_vs_access_3+0x1fc>
    80004170:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80004172:	0002a597          	auipc	a1,0x2a
    80004176:	04658593          	addi	a1,a1,70 # 8002e1b8 <__func__.0+0x2d0>
    8000417a:	0002a517          	auipc	a0,0x2a
    8000417e:	0e650513          	addi	a0,a0,230 # 8002e260 <__func__.0+0x378>
    80004182:	2a8270ef          	jal	8002b42a <printf>
    80004186:	4511                	li	a0,4
    80004188:	d81fc0ef          	jal	80000f08 <goto_priv>
    8000418c:	e98fd0ef          	jal	80001824 <reset_state>
}
    80004190:	60e2                	ld	ra,24(sp)
    80004192:	8522                	mv	a0,s0
    80004194:	6442                	ld	s0,16(sp)
    80004196:	64a2                	ld	s1,8(sp)
    80004198:	6902                	ld	s2,0(sp)
    8000419a:	6105                	addi	sp,sp,32
    8000419c:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    8000419e:	4405                	li	s0,1
    TEST_END();
    800041a0:	0002a597          	auipc	a1,0x2a
    800041a4:	00858593          	addi	a1,a1,8 # 8002e1a8 <__func__.0+0x2c0>
    800041a8:	bfc9                	j	8000417a <m_and_hs_using_vs_access_3+0x1d8>
    TEST_ASSERT("machine mprv vu access to vu successful",
    800041aa:	0002a517          	auipc	a0,0x2a
    800041ae:	05650513          	addi	a0,a0,86 # 8002e200 <__func__.0+0x318>
    800041b2:	278270ef          	jal	8002b42a <printf>
    800041b6:	02900513          	li	a0,41
    800041ba:	75f250ef          	jal	8002a118 <putchar>
    800041be:	b745                	j	8000415e <m_and_hs_using_vs_access_3+0x1bc>

00000000800041c0 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    800041c0:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800041c2:	00028597          	auipc	a1,0x28
    800041c6:	0f658593          	addi	a1,a1,246 # 8002c2b8 <__func__.8>
    800041ca:	0002a517          	auipc	a0,0x2a
    800041ce:	ffe50513          	addi	a0,a0,-2 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    800041d2:	ec06                	sd	ra,24(sp)
    800041d4:	e822                	sd	s0,16(sp)
    800041d6:	e426                	sd	s1,8(sp)
    800041d8:	e04a                	sd	s2,0(sp)
    TEST_START();
    800041da:	250270ef          	jal	8002b42a <printf>
    800041de:	4529                	li	a0,10
    800041e0:	739250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    800041e4:	bfcfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041e8:	fdcfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800041ec:	d90fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    800041f0:	450d                	li	a0,3
    800041f2:	d17fc0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    800041f6:	4501                	li	a0,0
    800041f8:	c31fc0ef          	jal	80000e28 <set_prev_priv>
    800041fc:	00035417          	auipc	s0,0x35
    80004200:	5f440413          	addi	s0,s0,1524 # 800397f0 <__func__.0+0xb908>
    TEST_SETUP_EXCEPT();
    80004204:	c09fc0ef          	jal	80000e0c <test_setup_except_function>
    80004208:	6014                	ld	a3,0(s0)
    8000420a:	44019737          	lui	a4,0x44019
    asm volatile(
    8000420e:	000807b7          	lui	a5,0x80
    80004212:	0706                	slli	a4,a4,0x1
    80004214:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004216:	e314                	sd	a3,0(a4)
    80004218:	07b6                	slli	a5,a5,0xd
    8000421a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000421e:	08200593          	li	a1,130
    80004222:	0002b617          	auipc	a2,0x2b
    80004226:	97660613          	addi	a2,a2,-1674 # 8002eb98 <__func__.0+0xcb0>
    8000422a:	0002a517          	auipc	a0,0x2a
    8000422e:	fb650513          	addi	a0,a0,-74 # 8002e1e0 <__func__.0+0x2f8>
    80004232:	1f8270ef          	jal	8002b42a <printf>
    80004236:	00054797          	auipc	a5,0x54
    8000423a:	ddb7c783          	lbu	a5,-549(a5) # 80058011 <excpt+0x1>
    8000423e:	0002a597          	auipc	a1,0x2a
    80004242:	f6a58593          	addi	a1,a1,-150 # 8002e1a8 <__func__.0+0x2c0>
    80004246:	c789                	beqz	a5,80004250 <m_and_hs_using_vs_access_4+0x90>
    80004248:	0002a597          	auipc	a1,0x2a
    8000424c:	f7058593          	addi	a1,a1,-144 # 8002e1b8 <__func__.0+0x2d0>
    80004250:	0002a517          	auipc	a0,0x2a
    80004254:	fa850513          	addi	a0,a0,-88 # 8002e1f8 <__func__.0+0x310>
    80004258:	1d2270ef          	jal	8002b42a <printf>
    8000425c:	00054797          	auipc	a5,0x54
    80004260:	db57c783          	lbu	a5,-587(a5) # 80058011 <excpt+0x1>
    80004264:	10079463          	bnez	a5,8000436c <m_and_hs_using_vs_access_4+0x1ac>
    80004268:	4529                	li	a0,10
    8000426a:	6af250ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    8000426e:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004270:	00054917          	auipc	s2,0x54
    80004274:	da194903          	lbu	s2,-607(s2) # 80058011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    80004278:	bb1fc0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8000427c:	b91fc0ef          	jal	80000e0c <test_setup_except_function>
    80004280:	6014                	ld	a3,0(s0)
    80004282:	44019737          	lui	a4,0x44019
    80004286:	000807b7          	lui	a5,0x80
    8000428a:	0706                	slli	a4,a4,0x1
    8000428c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000428e:	00054497          	auipc	s1,0x54
    80004292:	d8248493          	addi	s1,s1,-638 # 80058010 <excpt>
    80004296:	e314                	sd	a3,0(a4)
    80004298:	07b6                	slli	a5,a5,0xd
    8000429a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000429e:	08200593          	li	a1,130
    800042a2:	0002b617          	auipc	a2,0x2b
    800042a6:	92660613          	addi	a2,a2,-1754 # 8002ebc8 <__func__.0+0xce0>
    800042aa:	0002a517          	auipc	a0,0x2a
    800042ae:	f3650513          	addi	a0,a0,-202 # 8002e1e0 <__func__.0+0x2f8>
    800042b2:	178270ef          	jal	8002b42a <printf>
    800042b6:	00054797          	auipc	a5,0x54
    800042ba:	d5b7c783          	lbu	a5,-677(a5) # 80058011 <excpt+0x1>
    800042be:	0002a597          	auipc	a1,0x2a
    800042c2:	efa58593          	addi	a1,a1,-262 # 8002e1b8 <__func__.0+0x2d0>
    800042c6:	cf89                	beqz	a5,800042e0 <m_and_hs_using_vs_access_4+0x120>
    800042c8:	6498                	ld	a4,8(s1)
    800042ca:	47b5                	li	a5,13
    800042cc:	0002a597          	auipc	a1,0x2a
    800042d0:	edc58593          	addi	a1,a1,-292 # 8002e1a8 <__func__.0+0x2c0>
    800042d4:	00f70663          	beq	a4,a5,800042e0 <m_and_hs_using_vs_access_4+0x120>
    800042d8:	0002a597          	auipc	a1,0x2a
    800042dc:	ee058593          	addi	a1,a1,-288 # 8002e1b8 <__func__.0+0x2d0>
    800042e0:	0002a517          	auipc	a0,0x2a
    800042e4:	f1850513          	addi	a0,a0,-232 # 8002e1f8 <__func__.0+0x310>
    800042e8:	142270ef          	jal	8002b42a <printf>
    800042ec:	00054797          	auipc	a5,0x54
    800042f0:	d257c783          	lbu	a5,-731(a5) # 80058011 <excpt+0x1>
    800042f4:	c789                	beqz	a5,800042fe <m_and_hs_using_vs_access_4+0x13e>
    800042f6:	6498                	ld	a4,8(s1)
    800042f8:	47b5                	li	a5,13
    800042fa:	00f70c63          	beq	a4,a5,80004312 <m_and_hs_using_vs_access_4+0x152>
    800042fe:	0002a517          	auipc	a0,0x2a
    80004302:	f0250513          	addi	a0,a0,-254 # 8002e200 <__func__.0+0x318>
    80004306:	124270ef          	jal	8002b42a <printf>
    8000430a:	02900513          	li	a0,41
    8000430e:	60b250ef          	jal	8002a118 <putchar>
    80004312:	4529                	li	a0,10
    80004314:	605250ef          	jal	8002a118 <putchar>
    80004318:	02091363          	bnez	s2,8000433e <m_and_hs_using_vs_access_4+0x17e>
    8000431c:	00054417          	auipc	s0,0x54
    80004320:	cf544403          	lbu	s0,-779(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80004324:	0002a597          	auipc	a1,0x2a
    80004328:	e9458593          	addi	a1,a1,-364 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000432c:	cc11                	beqz	s0,80004348 <m_and_hs_using_vs_access_4+0x188>
    8000432e:	6498                	ld	a4,8(s1)
    80004330:	47b5                	li	a5,13
    TEST_END();
    80004332:	0002a597          	auipc	a1,0x2a
    80004336:	e7658593          	addi	a1,a1,-394 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000433a:	00f70763          	beq	a4,a5,80004348 <m_and_hs_using_vs_access_4+0x188>
    8000433e:	4401                	li	s0,0
    TEST_END();
    80004340:	0002a597          	auipc	a1,0x2a
    80004344:	e7858593          	addi	a1,a1,-392 # 8002e1b8 <__func__.0+0x2d0>
    80004348:	0002a517          	auipc	a0,0x2a
    8000434c:	f1850513          	addi	a0,a0,-232 # 8002e260 <__func__.0+0x378>
    80004350:	0da270ef          	jal	8002b42a <printf>
    80004354:	4511                	li	a0,4
    80004356:	bb3fc0ef          	jal	80000f08 <goto_priv>
    8000435a:	ccafd0ef          	jal	80001824 <reset_state>
}
    8000435e:	60e2                	ld	ra,24(sp)
    80004360:	8522                	mv	a0,s0
    80004362:	6442                	ld	s0,16(sp)
    80004364:	64a2                	ld	s1,8(sp)
    80004366:	6902                	ld	s2,0(sp)
    80004368:	6105                	addi	sp,sp,32
    8000436a:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000436c:	0002a517          	auipc	a0,0x2a
    80004370:	e9450513          	addi	a0,a0,-364 # 8002e200 <__func__.0+0x318>
    80004374:	0b6270ef          	jal	8002b42a <printf>
    80004378:	02900513          	li	a0,41
    8000437c:	59d250ef          	jal	8002a118 <putchar>
    80004380:	b5e5                	j	80004268 <m_and_hs_using_vs_access_4+0xa8>

0000000080004382 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80004382:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004384:	00028597          	auipc	a1,0x28
    80004388:	f5458593          	addi	a1,a1,-172 # 8002c2d8 <__func__.7>
    8000438c:	0002a517          	auipc	a0,0x2a
    80004390:	e3c50513          	addi	a0,a0,-452 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    80004394:	ec06                	sd	ra,24(sp)
    80004396:	e822                	sd	s0,16(sp)
    80004398:	e426                	sd	s1,8(sp)
    TEST_START();
    8000439a:	090270ef          	jal	8002b42a <printf>
    8000439e:	4529                	li	a0,10
    800043a0:	579250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    800043a4:	a3cfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800043a8:	e1cfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800043ac:	bd0fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    800043b0:	4511                	li	a0,4
    800043b2:	b57fc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800043b6:	000407b7          	lui	a5,0x40
    800043ba:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800043be:	a4ffc0ef          	jal	80000e0c <test_setup_except_function>
    800043c2:	00035417          	auipc	s0,0x35
    800043c6:	42e43403          	ld	s0,1070(s0) # 800397f0 <__func__.0+0xb908>
    800043ca:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    800043ce:	00037717          	auipc	a4,0x37
    800043d2:	45672703          	lw	a4,1110(a4) # 8003b824 <curr_priv>
    800043d6:	0786                	slli	a5,a5,0x1
    800043d8:	e380                	sd	s0,0(a5)
    800043da:	4791                	li	a5,4
    800043dc:	02f70763          	beq	a4,a5,8000440a <m_and_hs_using_vs_access_5+0x88>
        ERROR("trying to read as mprv from low privilege");
    800043e0:	0002a517          	auipc	a0,0x2a
    800043e4:	5e050513          	addi	a0,a0,1504 # 8002e9c0 <__func__.0+0xad8>
    800043e8:	042270ef          	jal	8002b42a <printf>
    800043ec:	0fe00613          	li	a2,254
    800043f0:	00028597          	auipc	a1,0x28
    800043f4:	e7858593          	addi	a1,a1,-392 # 8002c268 <__func__.11>
    800043f8:	0002a517          	auipc	a0,0x2a
    800043fc:	f5850513          	addi	a0,a0,-168 # 8002e350 <__func__.0+0x468>
    80004400:	02a270ef          	jal	8002b42a <printf>
    80004404:	4501                	li	a0,0
    80004406:	3db260ef          	jal	8002afe0 <exit>
    set_prev_priv(priv);
    8000440a:	4509                	li	a0,2
    8000440c:	a1dfc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80004410:	000807b7          	lui	a5,0x80
    80004414:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004416:	07b6                	slli	a5,a5,0xd
    80004418:	00020737          	lui	a4,0x20
    8000441c:	30072073          	csrs	mstatus,a4
    80004420:	6384                	ld	s1,0(a5)
    80004422:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004426:	0002a617          	auipc	a2,0x2a
    8000442a:	7da60613          	addi	a2,a2,2010 # 8002ec00 <__func__.0+0xd18>
    8000442e:	08200593          	li	a1,130
    80004432:	0002a517          	auipc	a0,0x2a
    80004436:	dae50513          	addi	a0,a0,-594 # 8002e1e0 <__func__.0+0x2f8>
    8000443a:	7f1260ef          	jal	8002b42a <printf>
    8000443e:	00054797          	auipc	a5,0x54
    80004442:	bd37c783          	lbu	a5,-1069(a5) # 80058011 <excpt+0x1>
    80004446:	c3d1                	beqz	a5,800044ca <m_and_hs_using_vs_access_5+0x148>
    80004448:	0002a597          	auipc	a1,0x2a
    8000444c:	d7058593          	addi	a1,a1,-656 # 8002e1b8 <__func__.0+0x2d0>
    80004450:	0002a517          	auipc	a0,0x2a
    80004454:	da850513          	addi	a0,a0,-600 # 8002e1f8 <__func__.0+0x310>
    80004458:	7d3260ef          	jal	8002b42a <printf>
    8000445c:	00054797          	auipc	a5,0x54
    80004460:	bb57c783          	lbu	a5,-1099(a5) # 80058011 <excpt+0x1>
    80004464:	e399                	bnez	a5,8000446a <m_and_hs_using_vs_access_5+0xe8>
    80004466:	08848e63          	beq	s1,s0,80004502 <m_and_hs_using_vs_access_5+0x180>
    8000446a:	0002a517          	auipc	a0,0x2a
    8000446e:	d9650513          	addi	a0,a0,-618 # 8002e200 <__func__.0+0x318>
    80004472:	7b9260ef          	jal	8002b42a <printf>
    80004476:	02900513          	li	a0,41
    8000447a:	49f250ef          	jal	8002a118 <putchar>
    8000447e:	4529                	li	a0,10
    80004480:	499250ef          	jal	8002a118 <putchar>
    80004484:	00054797          	auipc	a5,0x54
    80004488:	b8d7c783          	lbu	a5,-1139(a5) # 80058011 <excpt+0x1>
    8000448c:	eb89                	bnez	a5,8000449e <m_and_hs_using_vs_access_5+0x11c>
    8000448e:	011087b7          	lui	a5,0x1108
    80004492:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80004496:	07c2                	slli	a5,a5,0x10
    80004498:	17b9                	addi	a5,a5,-18
    8000449a:	06f48c63          	beq	s1,a5,80004512 <m_and_hs_using_vs_access_5+0x190>
    8000449e:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800044a0:	0002a597          	auipc	a1,0x2a
    800044a4:	d1858593          	addi	a1,a1,-744 # 8002e1b8 <__func__.0+0x2d0>
    800044a8:	0002a517          	auipc	a0,0x2a
    800044ac:	db850513          	addi	a0,a0,-584 # 8002e260 <__func__.0+0x378>
    800044b0:	77b260ef          	jal	8002b42a <printf>
    800044b4:	4511                	li	a0,4
    800044b6:	a53fc0ef          	jal	80000f08 <goto_priv>
    800044ba:	b6afd0ef          	jal	80001824 <reset_state>
}
    800044be:	60e2                	ld	ra,24(sp)
    800044c0:	8522                	mv	a0,s0
    800044c2:	6442                	ld	s0,16(sp)
    800044c4:	64a2                	ld	s1,8(sp)
    800044c6:	6105                	addi	sp,sp,32
    800044c8:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    800044ca:	00848d63          	beq	s1,s0,800044e4 <m_and_hs_using_vs_access_5+0x162>
    800044ce:	0002a597          	auipc	a1,0x2a
    800044d2:	cea58593          	addi	a1,a1,-790 # 8002e1b8 <__func__.0+0x2d0>
    800044d6:	0002a517          	auipc	a0,0x2a
    800044da:	d2250513          	addi	a0,a0,-734 # 8002e1f8 <__func__.0+0x310>
    800044de:	74d260ef          	jal	8002b42a <printf>
    800044e2:	b761                	j	8000446a <m_and_hs_using_vs_access_5+0xe8>
    800044e4:	0002a597          	auipc	a1,0x2a
    800044e8:	cc458593          	addi	a1,a1,-828 # 8002e1a8 <__func__.0+0x2c0>
    800044ec:	0002a517          	auipc	a0,0x2a
    800044f0:	d0c50513          	addi	a0,a0,-756 # 8002e1f8 <__func__.0+0x310>
    800044f4:	737260ef          	jal	8002b42a <printf>
    800044f8:	00054797          	auipc	a5,0x54
    800044fc:	b197c783          	lbu	a5,-1255(a5) # 80058011 <excpt+0x1>
    80004500:	f7ad                	bnez	a5,8000446a <m_and_hs_using_vs_access_5+0xe8>
    80004502:	4529                	li	a0,10
    80004504:	415250ef          	jal	8002a118 <putchar>
    80004508:	00054797          	auipc	a5,0x54
    8000450c:	b097c783          	lbu	a5,-1271(a5) # 80058011 <excpt+0x1>
    80004510:	f7d9                	bnez	a5,8000449e <m_and_hs_using_vs_access_5+0x11c>
    80004512:	4405                	li	s0,1
    TEST_END();
    80004514:	0002a597          	auipc	a1,0x2a
    80004518:	c9458593          	addi	a1,a1,-876 # 8002e1a8 <__func__.0+0x2c0>
    8000451c:	b771                	j	800044a8 <m_and_hs_using_vs_access_5+0x126>

000000008000451e <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    8000451e:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004520:	00028597          	auipc	a1,0x28
    80004524:	dd858593          	addi	a1,a1,-552 # 8002c2f8 <__func__.6>
    80004528:	0002a517          	auipc	a0,0x2a
    8000452c:	ca050513          	addi	a0,a0,-864 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004530:	ec06                	sd	ra,24(sp)
    80004532:	e822                	sd	s0,16(sp)
    80004534:	e426                	sd	s1,8(sp)
    TEST_START();
    80004536:	6f5260ef          	jal	8002b42a <printf>
    8000453a:	4529                	li	a0,10
    8000453c:	3dd250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004540:	8a0fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004544:	c80fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004548:	a34fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8000454c:	000407b7          	lui	a5,0x40
    80004550:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80004554:	450d                	li	a0,3
    80004556:	9b3fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000455a:	4509                	li	a0,2
    8000455c:	8cdfc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004560:	8adfc0ef          	jal	80000e0c <test_setup_except_function>
    80004564:	00035497          	auipc	s1,0x35
    80004568:	28c4b483          	ld	s1,652(s1) # 800397f0 <__func__.0+0xb908>
    8000456c:	440197b7          	lui	a5,0x44019
    80004570:	00080437          	lui	s0,0x80
    80004574:	0786                	slli	a5,a5,0x1
    80004576:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    80004578:	e384                	sd	s1,0(a5)
    8000457a:	0436                	slli	s0,s0,0xd
    8000457c:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004580:	0002a617          	auipc	a2,0x2a
    80004584:	6c860613          	addi	a2,a2,1736 # 8002ec48 <__func__.0+0xd60>
    80004588:	08200593          	li	a1,130
    8000458c:	0002a517          	auipc	a0,0x2a
    80004590:	c5450513          	addi	a0,a0,-940 # 8002e1e0 <__func__.0+0x2f8>
    80004594:	697260ef          	jal	8002b42a <printf>
    80004598:	00054797          	auipc	a5,0x54
    8000459c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800045a0:	e7a5                	bnez	a5,80004608 <m_and_hs_using_vs_access_6+0xea>
    800045a2:	0c940863          	beq	s0,s1,80004672 <m_and_hs_using_vs_access_6+0x154>
    800045a6:	0002a597          	auipc	a1,0x2a
    800045aa:	c1258593          	addi	a1,a1,-1006 # 8002e1b8 <__func__.0+0x2d0>
    800045ae:	0002a517          	auipc	a0,0x2a
    800045b2:	c4a50513          	addi	a0,a0,-950 # 8002e1f8 <__func__.0+0x310>
    800045b6:	675260ef          	jal	8002b42a <printf>
    800045ba:	0002a517          	auipc	a0,0x2a
    800045be:	c4650513          	addi	a0,a0,-954 # 8002e200 <__func__.0+0x318>
    800045c2:	669260ef          	jal	8002b42a <printf>
    800045c6:	02900513          	li	a0,41
    800045ca:	34f250ef          	jal	8002a118 <putchar>
    800045ce:	4529                	li	a0,10
    800045d0:	349250ef          	jal	8002a118 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045d4:	000407b7          	lui	a5,0x40
    800045d8:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045dc:	4401                	li	s0,0

    TEST_END();
    800045de:	0002a597          	auipc	a1,0x2a
    800045e2:	bda58593          	addi	a1,a1,-1062 # 8002e1b8 <__func__.0+0x2d0>
    800045e6:	0002a517          	auipc	a0,0x2a
    800045ea:	c7a50513          	addi	a0,a0,-902 # 8002e260 <__func__.0+0x378>
    800045ee:	63d260ef          	jal	8002b42a <printf>
    800045f2:	4511                	li	a0,4
    800045f4:	915fc0ef          	jal	80000f08 <goto_priv>
    800045f8:	a2cfd0ef          	jal	80001824 <reset_state>
}
    800045fc:	60e2                	ld	ra,24(sp)
    800045fe:	8522                	mv	a0,s0
    80004600:	6442                	ld	s0,16(sp)
    80004602:	64a2                	ld	s1,8(sp)
    80004604:	6105                	addi	sp,sp,32
    80004606:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004608:	0002a597          	auipc	a1,0x2a
    8000460c:	bb058593          	addi	a1,a1,-1104 # 8002e1b8 <__func__.0+0x2d0>
    80004610:	0002a517          	auipc	a0,0x2a
    80004614:	be850513          	addi	a0,a0,-1048 # 8002e1f8 <__func__.0+0x310>
    80004618:	613260ef          	jal	8002b42a <printf>
    8000461c:	00054797          	auipc	a5,0x54
    80004620:	9f57c783          	lbu	a5,-1547(a5) # 80058011 <excpt+0x1>
    80004624:	e399                	bnez	a5,8000462a <m_and_hs_using_vs_access_6+0x10c>
    80004626:	06940563          	beq	s0,s1,80004690 <m_and_hs_using_vs_access_6+0x172>
    8000462a:	0002a517          	auipc	a0,0x2a
    8000462e:	bd650513          	addi	a0,a0,-1066 # 8002e200 <__func__.0+0x318>
    80004632:	5f9260ef          	jal	8002b42a <printf>
    80004636:	02900513          	li	a0,41
    8000463a:	2df250ef          	jal	8002a118 <putchar>
    8000463e:	4529                	li	a0,10
    80004640:	2d9250ef          	jal	8002a118 <putchar>
    80004644:	00054797          	auipc	a5,0x54
    80004648:	9cd7c783          	lbu	a5,-1587(a5) # 80058011 <excpt+0x1>
    8000464c:	f7c1                	bnez	a5,800045d4 <m_and_hs_using_vs_access_6+0xb6>
    8000464e:	011087b7          	lui	a5,0x1108
    80004652:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80004656:	07c2                	slli	a5,a5,0x10
    80004658:	17b9                	addi	a5,a5,-18
    8000465a:	f6f41de3          	bne	s0,a5,800045d4 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000465e:	000407b7          	lui	a5,0x40
    80004662:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004666:	4405                	li	s0,1
    TEST_END();
    80004668:	0002a597          	auipc	a1,0x2a
    8000466c:	b4058593          	addi	a1,a1,-1216 # 8002e1a8 <__func__.0+0x2c0>
    80004670:	bf9d                	j	800045e6 <m_and_hs_using_vs_access_6+0xc8>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004672:	0002a597          	auipc	a1,0x2a
    80004676:	b3658593          	addi	a1,a1,-1226 # 8002e1a8 <__func__.0+0x2c0>
    8000467a:	0002a517          	auipc	a0,0x2a
    8000467e:	b7e50513          	addi	a0,a0,-1154 # 8002e1f8 <__func__.0+0x310>
    80004682:	5a9260ef          	jal	8002b42a <printf>
    80004686:	00054797          	auipc	a5,0x54
    8000468a:	98b7c783          	lbu	a5,-1653(a5) # 80058011 <excpt+0x1>
    8000468e:	ffd1                	bnez	a5,8000462a <m_and_hs_using_vs_access_6+0x10c>
    80004690:	4529                	li	a0,10
    80004692:	287250ef          	jal	8002a118 <putchar>
    80004696:	00054797          	auipc	a5,0x54
    8000469a:	97b7c783          	lbu	a5,-1669(a5) # 80058011 <excpt+0x1>
    8000469e:	fb9d                	bnez	a5,800045d4 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800046a0:	000407b7          	lui	a5,0x40
    800046a4:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800046a8:	4405                	li	s0,1
    TEST_END();
    800046aa:	0002a597          	auipc	a1,0x2a
    800046ae:	afe58593          	addi	a1,a1,-1282 # 8002e1a8 <__func__.0+0x2c0>
    800046b2:	bf15                	j	800045e6 <m_and_hs_using_vs_access_6+0xc8>

00000000800046b4 <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    800046b4:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800046b6:	00028597          	auipc	a1,0x28
    800046ba:	c6258593          	addi	a1,a1,-926 # 8002c318 <__func__.5>
    800046be:	0002a517          	auipc	a0,0x2a
    800046c2:	b0a50513          	addi	a0,a0,-1270 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    800046c6:	e406                	sd	ra,8(sp)
    800046c8:	e022                	sd	s0,0(sp)
    TEST_START();
    800046ca:	561260ef          	jal	8002b42a <printf>
    800046ce:	4529                	li	a0,10
    800046d0:	249250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    800046d4:	f0dfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800046d8:	aecfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800046dc:	8a0fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    800046e0:	450d                	li	a0,3
    800046e2:	827fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800046e6:	4509                	li	a0,2
    800046e8:	f40fc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800046ec:	f20fc0ef          	jal	80000e0c <test_setup_except_function>
    800046f0:	200037b7          	lui	a5,0x20003
    800046f4:	078e                	slli	a5,a5,0x3
    800046f6:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800046fa:	08200593          	li	a1,130
    800046fe:	0002a617          	auipc	a2,0x2a
    80004702:	58260613          	addi	a2,a2,1410 # 8002ec80 <__func__.0+0xd98>
    80004706:	0002a517          	auipc	a0,0x2a
    8000470a:	ada50513          	addi	a0,a0,-1318 # 8002e1e0 <__func__.0+0x2f8>
    8000470e:	51d260ef          	jal	8002b42a <printf>
    80004712:	00054797          	auipc	a5,0x54
    80004716:	8ff7c783          	lbu	a5,-1793(a5) # 80058011 <excpt+0x1>
    8000471a:	0002a597          	auipc	a1,0x2a
    8000471e:	a8e58593          	addi	a1,a1,-1394 # 8002e1a8 <__func__.0+0x2c0>
    80004722:	e789                	bnez	a5,8000472c <m_and_hs_using_vs_access_7+0x78>
    80004724:	0002a597          	auipc	a1,0x2a
    80004728:	a9458593          	addi	a1,a1,-1388 # 8002e1b8 <__func__.0+0x2d0>
    8000472c:	0002a517          	auipc	a0,0x2a
    80004730:	acc50513          	addi	a0,a0,-1332 # 8002e1f8 <__func__.0+0x310>
    80004734:	4f7260ef          	jal	8002b42a <printf>
    80004738:	00054797          	auipc	a5,0x54
    8000473c:	8d97c783          	lbu	a5,-1831(a5) # 80058011 <excpt+0x1>
    80004740:	0c078e63          	beqz	a5,8000481c <m_and_hs_using_vs_access_7+0x168>
    80004744:	4529                	li	a0,10
    80004746:	1d3250ef          	jal	8002a118 <putchar>
    8000474a:	00054417          	auipc	s0,0x54
    8000474e:	8c744403          	lbu	s0,-1849(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    80004752:	ebafc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(sstatus, SSTATUS_MXR);
    80004756:	000807b7          	lui	a5,0x80
    8000475a:	1007a073          	csrs	sstatus,a5
    8000475e:	200037b7          	lui	a5,0x20003
    80004762:	078e                	slli	a5,a5,0x3
    80004764:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004768:	08200593          	li	a1,130
    8000476c:	0002a617          	auipc	a2,0x2a
    80004770:	54460613          	addi	a2,a2,1348 # 8002ecb0 <__func__.0+0xdc8>
    80004774:	0002a517          	auipc	a0,0x2a
    80004778:	a6c50513          	addi	a0,a0,-1428 # 8002e1e0 <__func__.0+0x2f8>
    8000477c:	4af260ef          	jal	8002b42a <printf>
    80004780:	00054797          	auipc	a5,0x54
    80004784:	8917c783          	lbu	a5,-1903(a5) # 80058011 <excpt+0x1>
    80004788:	0002a597          	auipc	a1,0x2a
    8000478c:	a3058593          	addi	a1,a1,-1488 # 8002e1b8 <__func__.0+0x2d0>
    80004790:	e789                	bnez	a5,8000479a <m_and_hs_using_vs_access_7+0xe6>
    80004792:	0002a597          	auipc	a1,0x2a
    80004796:	a1658593          	addi	a1,a1,-1514 # 8002e1a8 <__func__.0+0x2c0>
    8000479a:	0002a517          	auipc	a0,0x2a
    8000479e:	a5e50513          	addi	a0,a0,-1442 # 8002e1f8 <__func__.0+0x310>
    800047a2:	489260ef          	jal	8002b42a <printf>
    800047a6:	00054797          	auipc	a5,0x54
    800047aa:	86b7c783          	lbu	a5,-1941(a5) # 80058011 <excpt+0x1>
    800047ae:	efa1                	bnez	a5,80004806 <m_and_hs_using_vs_access_7+0x152>
    800047b0:	4529                	li	a0,10
    800047b2:	167250ef          	jal	8002a118 <putchar>
    800047b6:	c411                	beqz	s0,800047c2 <m_and_hs_using_vs_access_7+0x10e>
    800047b8:	00054797          	auipc	a5,0x54
    800047bc:	8597c783          	lbu	a5,-1959(a5) # 80058011 <excpt+0x1>
    800047c0:	cb95                	beqz	a5,800047f4 <m_and_hs_using_vs_access_7+0x140>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    800047c2:	000807b7          	lui	a5,0x80
    800047c6:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800047ca:	4401                	li	s0,0

        TEST_END();
    800047cc:	0002a597          	auipc	a1,0x2a
    800047d0:	9ec58593          	addi	a1,a1,-1556 # 8002e1b8 <__func__.0+0x2d0>
    800047d4:	0002a517          	auipc	a0,0x2a
    800047d8:	a8c50513          	addi	a0,a0,-1396 # 8002e260 <__func__.0+0x378>
    800047dc:	44f260ef          	jal	8002b42a <printf>
    800047e0:	4511                	li	a0,4
    800047e2:	f26fc0ef          	jal	80000f08 <goto_priv>
    800047e6:	83efd0ef          	jal	80001824 <reset_state>
}
    800047ea:	60a2                	ld	ra,8(sp)
    800047ec:	8522                	mv	a0,s0
    800047ee:	6402                	ld	s0,0(sp)
    800047f0:	0141                	addi	sp,sp,16
    800047f2:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    800047f4:	000807b7          	lui	a5,0x80
    800047f8:	1007b073          	csrc	sstatus,a5
        TEST_END();
    800047fc:	0002a597          	auipc	a1,0x2a
    80004800:	9ac58593          	addi	a1,a1,-1620 # 8002e1a8 <__func__.0+0x2c0>
    80004804:	bfc1                	j	800047d4 <m_and_hs_using_vs_access_7+0x120>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004806:	0002a517          	auipc	a0,0x2a
    8000480a:	9fa50513          	addi	a0,a0,-1542 # 8002e200 <__func__.0+0x318>
    8000480e:	41d260ef          	jal	8002b42a <printf>
    80004812:	02900513          	li	a0,41
    80004816:	103250ef          	jal	8002a118 <putchar>
    8000481a:	bf59                	j	800047b0 <m_and_hs_using_vs_access_7+0xfc>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    8000481c:	0002a517          	auipc	a0,0x2a
    80004820:	9e450513          	addi	a0,a0,-1564 # 8002e200 <__func__.0+0x318>
    80004824:	407260ef          	jal	8002b42a <printf>
    80004828:	02900513          	li	a0,41
    8000482c:	0ed250ef          	jal	8002a118 <putchar>
    80004830:	bf11                	j	80004744 <m_and_hs_using_vs_access_7+0x90>

0000000080004832 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    80004832:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004834:	00028597          	auipc	a1,0x28
    80004838:	b0458593          	addi	a1,a1,-1276 # 8002c338 <__func__.4>
    8000483c:	0002a517          	auipc	a0,0x2a
    80004840:	98c50513          	addi	a0,a0,-1652 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    80004844:	ec06                	sd	ra,24(sp)
    80004846:	e822                	sd	s0,16(sp)
    80004848:	e426                	sd	s1,8(sp)
    TEST_START();
    8000484a:	3e1260ef          	jal	8002b42a <printf>
    8000484e:	4529                	li	a0,10
    80004850:	0c9250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004854:	d8dfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004858:	96cfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000485c:	f21fb0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    80004860:	450d                	li	a0,3
    80004862:	ea6fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004866:	4509                	li	a0,2
    80004868:	dc0fc0ef          	jal	80000e28 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    8000486c:	011117b7          	lui	a5,0x1111
    80004870:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    80004874:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    80004878:	d94fc0ef          	jal	80000e0c <test_setup_except_function>
    8000487c:	001007b7          	lui	a5,0x100
    80004880:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004882:	07b2                	slli	a5,a5,0xc
    80004884:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004888:	08200593          	li	a1,130
    8000488c:	0002a617          	auipc	a2,0x2a
    80004890:	44c60613          	addi	a2,a2,1100 # 8002ecd8 <__func__.0+0xdf0>
    80004894:	0002a517          	auipc	a0,0x2a
    80004898:	94c50513          	addi	a0,a0,-1716 # 8002e1e0 <__func__.0+0x2f8>
    8000489c:	38f260ef          	jal	8002b42a <printf>
    800048a0:	00053797          	auipc	a5,0x53
    800048a4:	7717c783          	lbu	a5,1905(a5) # 80058011 <excpt+0x1>
    800048a8:	00053497          	auipc	s1,0x53
    800048ac:	76848493          	addi	s1,s1,1896 # 80058010 <excpt>
    800048b0:	0002a597          	auipc	a1,0x2a
    800048b4:	90858593          	addi	a1,a1,-1784 # 8002e1b8 <__func__.0+0x2d0>
    800048b8:	cf89                	beqz	a5,800048d2 <m_and_hs_using_vs_access_8+0xa0>
    800048ba:	6498                	ld	a4,8(s1)
    800048bc:	47b5                	li	a5,13
    800048be:	0002a597          	auipc	a1,0x2a
    800048c2:	8ea58593          	addi	a1,a1,-1814 # 8002e1a8 <__func__.0+0x2c0>
    800048c6:	00f70663          	beq	a4,a5,800048d2 <m_and_hs_using_vs_access_8+0xa0>
    800048ca:	0002a597          	auipc	a1,0x2a
    800048ce:	8ee58593          	addi	a1,a1,-1810 # 8002e1b8 <__func__.0+0x2d0>
    800048d2:	0002a517          	auipc	a0,0x2a
    800048d6:	92650513          	addi	a0,a0,-1754 # 8002e1f8 <__func__.0+0x310>
    800048da:	351260ef          	jal	8002b42a <printf>
    800048de:	00053797          	auipc	a5,0x53
    800048e2:	7337c783          	lbu	a5,1843(a5) # 80058011 <excpt+0x1>
    800048e6:	c789                	beqz	a5,800048f0 <m_and_hs_using_vs_access_8+0xbe>
    800048e8:	6498                	ld	a4,8(s1)
    800048ea:	47b5                	li	a5,13
    800048ec:	00f70c63          	beq	a4,a5,80004904 <m_and_hs_using_vs_access_8+0xd2>
    800048f0:	0002a517          	auipc	a0,0x2a
    800048f4:	91050513          	addi	a0,a0,-1776 # 8002e200 <__func__.0+0x318>
    800048f8:	333260ef          	jal	8002b42a <printf>
    800048fc:	02900513          	li	a0,41
    80004900:	019250ef          	jal	8002a118 <putchar>
    80004904:	4529                	li	a0,10
    80004906:	013250ef          	jal	8002a118 <putchar>
    8000490a:	00053797          	auipc	a5,0x53
    8000490e:	7077c783          	lbu	a5,1799(a5) # 80058011 <excpt+0x1>
    80004912:	4401                	li	s0,0
    80004914:	c789                	beqz	a5,8000491e <m_and_hs_using_vs_access_8+0xec>
    80004916:	6480                	ld	s0,8(s1)
    80004918:	144d                	addi	s0,s0,-13
    8000491a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    8000491e:	ceefc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    80004922:	000807b7          	lui	a5,0x80
    80004926:	2007a073          	csrs	vsstatus,a5
    8000492a:	001007b7          	lui	a5,0x100
    8000492e:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004930:	07b2                	slli	a5,a5,0xc
    80004932:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004936:	08200593          	li	a1,130
    8000493a:	0002a617          	auipc	a2,0x2a
    8000493e:	3ce60613          	addi	a2,a2,974 # 8002ed08 <__func__.0+0xe20>
    80004942:	0002a517          	auipc	a0,0x2a
    80004946:	89e50513          	addi	a0,a0,-1890 # 8002e1e0 <__func__.0+0x2f8>
    8000494a:	2e1260ef          	jal	8002b42a <printf>
    8000494e:	00053797          	auipc	a5,0x53
    80004952:	6c37c783          	lbu	a5,1731(a5) # 80058011 <excpt+0x1>
    80004956:	0002a597          	auipc	a1,0x2a
    8000495a:	86258593          	addi	a1,a1,-1950 # 8002e1b8 <__func__.0+0x2d0>
    8000495e:	e789                	bnez	a5,80004968 <m_and_hs_using_vs_access_8+0x136>
    80004960:	0002a597          	auipc	a1,0x2a
    80004964:	84858593          	addi	a1,a1,-1976 # 8002e1a8 <__func__.0+0x2c0>
    80004968:	0002a517          	auipc	a0,0x2a
    8000496c:	89050513          	addi	a0,a0,-1904 # 8002e1f8 <__func__.0+0x310>
    80004970:	2bb260ef          	jal	8002b42a <printf>
    80004974:	00053797          	auipc	a5,0x53
    80004978:	69d7c783          	lbu	a5,1693(a5) # 80058011 <excpt+0x1>
    8000497c:	e7b1                	bnez	a5,800049c8 <m_and_hs_using_vs_access_8+0x196>
    8000497e:	4529                	li	a0,10
    80004980:	798250ef          	jal	8002a118 <putchar>
    80004984:	c411                	beqz	s0,80004990 <m_and_hs_using_vs_access_8+0x15e>
    80004986:	00053797          	auipc	a5,0x53
    8000498a:	68b7c783          	lbu	a5,1675(a5) # 80058011 <excpt+0x1>
    8000498e:	c79d                	beqz	a5,800049bc <m_and_hs_using_vs_access_8+0x18a>
    80004990:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    80004992:	0002a597          	auipc	a1,0x2a
    80004996:	82658593          	addi	a1,a1,-2010 # 8002e1b8 <__func__.0+0x2d0>
    8000499a:	0002a517          	auipc	a0,0x2a
    8000499e:	8c650513          	addi	a0,a0,-1850 # 8002e260 <__func__.0+0x378>
    800049a2:	289260ef          	jal	8002b42a <printf>
    800049a6:	4511                	li	a0,4
    800049a8:	d60fc0ef          	jal	80000f08 <goto_priv>
    800049ac:	e79fc0ef          	jal	80001824 <reset_state>
}
    800049b0:	60e2                	ld	ra,24(sp)
    800049b2:	8522                	mv	a0,s0
    800049b4:	6442                	ld	s0,16(sp)
    800049b6:	64a2                	ld	s1,8(sp)
    800049b8:	6105                	addi	sp,sp,32
    800049ba:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800049bc:	4405                	li	s0,1
    TEST_END();
    800049be:	00029597          	auipc	a1,0x29
    800049c2:	7ea58593          	addi	a1,a1,2026 # 8002e1a8 <__func__.0+0x2c0>
    800049c6:	bfd1                	j	8000499a <m_and_hs_using_vs_access_8+0x168>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800049c8:	0002a517          	auipc	a0,0x2a
    800049cc:	83850513          	addi	a0,a0,-1992 # 8002e200 <__func__.0+0x318>
    800049d0:	25b260ef          	jal	8002b42a <printf>
    800049d4:	02900513          	li	a0,41
    800049d8:	740250ef          	jal	8002a118 <putchar>
    800049dc:	b74d                	j	8000497e <m_and_hs_using_vs_access_8+0x14c>

00000000800049de <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    800049de:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800049e0:	00028597          	auipc	a1,0x28
    800049e4:	97858593          	addi	a1,a1,-1672 # 8002c358 <__func__.3>
    800049e8:	00029517          	auipc	a0,0x29
    800049ec:	7e050513          	addi	a0,a0,2016 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    800049f0:	ec06                	sd	ra,24(sp)
    800049f2:	e822                	sd	s0,16(sp)
    800049f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800049f6:	235260ef          	jal	8002b42a <printf>
    800049fa:	4529                	li	a0,10
    800049fc:	71c250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004a00:	be1fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004a04:	fc1fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004a08:	d75fb0ef          	jal	8000077c <vspt_init>
    
    reset_state();
    80004a0c:	e19fc0ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HS);
    80004a10:	450d                	li	a0,3
    80004a12:	cf6fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004a16:	4509                	li	a0,2
    80004a18:	c10fc0ef          	jal	80000e28 <set_prev_priv>
    hpt_init();
    80004a1c:	fa9fb0ef          	jal	800009c4 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004a20:	becfc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004a24:	37ab77b7          	lui	a5,0x37ab7
    80004a28:	00100737          	lui	a4,0x100
    80004a2c:	078a                	slli	a5,a5,0x2
    80004a2e:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004a32:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004a36:	0732                	slli	a4,a4,0xc
    80004a38:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004a3c:	00053417          	auipc	s0,0x53
    80004a40:	5d440413          	addi	s0,s0,1492 # 80058010 <excpt>
    80004a44:	640c                	ld	a1,8(s0)
    80004a46:	0002a517          	auipc	a0,0x2a
    80004a4a:	2fa50513          	addi	a0,a0,762 # 8002ed40 <__func__.0+0xe58>
    80004a4e:	1dd260ef          	jal	8002b42a <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a52:	08200593          	li	a1,130
    80004a56:	0002a617          	auipc	a2,0x2a
    80004a5a:	2f260613          	addi	a2,a2,754 # 8002ed48 <__func__.0+0xe60>
    80004a5e:	00029517          	auipc	a0,0x29
    80004a62:	78250513          	addi	a0,a0,1922 # 8002e1e0 <__func__.0+0x2f8>
    80004a66:	1c5260ef          	jal	8002b42a <printf>
    80004a6a:	00053797          	auipc	a5,0x53
    80004a6e:	5a77c783          	lbu	a5,1447(a5) # 80058011 <excpt+0x1>
    80004a72:	00029597          	auipc	a1,0x29
    80004a76:	74658593          	addi	a1,a1,1862 # 8002e1b8 <__func__.0+0x2d0>
    80004a7a:	c789                	beqz	a5,80004a84 <m_and_hs_using_vs_access_9+0xa6>
    80004a7c:	6418                	ld	a4,8(s0)
    80004a7e:	47dd                	li	a5,23
    80004a80:	12f70463          	beq	a4,a5,80004ba8 <m_and_hs_using_vs_access_9+0x1ca>
    80004a84:	00029517          	auipc	a0,0x29
    80004a88:	77450513          	addi	a0,a0,1908 # 8002e1f8 <__func__.0+0x310>
    80004a8c:	19f260ef          	jal	8002b42a <printf>
    80004a90:	00053797          	auipc	a5,0x53
    80004a94:	5817c783          	lbu	a5,1409(a5) # 80058011 <excpt+0x1>
    80004a98:	c789                	beqz	a5,80004aa2 <m_and_hs_using_vs_access_9+0xc4>
    80004a9a:	6418                	ld	a4,8(s0)
    80004a9c:	47dd                	li	a5,23
    80004a9e:	0ef70263          	beq	a4,a5,80004b82 <m_and_hs_using_vs_access_9+0x1a4>
    80004aa2:	00029517          	auipc	a0,0x29
    80004aa6:	75e50513          	addi	a0,a0,1886 # 8002e200 <__func__.0+0x318>
    80004aaa:	181260ef          	jal	8002b42a <printf>
    80004aae:	02900513          	li	a0,41
    80004ab2:	666250ef          	jal	8002a118 <putchar>
    80004ab6:	4529                	li	a0,10
    80004ab8:	660250ef          	jal	8002a118 <putchar>
    80004abc:	00053797          	auipc	a5,0x53
    80004ac0:	5557c783          	lbu	a5,1365(a5) # 80058011 <excpt+0x1>
    80004ac4:	4481                	li	s1,0
    80004ac6:	c789                	beqz	a5,80004ad0 <m_and_hs_using_vs_access_9+0xf2>
    80004ac8:	6418                	ld	a4,8(s0)
    80004aca:	47dd                	li	a5,23
    80004acc:	0ef70e63          	beq	a4,a5,80004bc8 <m_and_hs_using_vs_access_9+0x1ea>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004ad0:	b3cfc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004ad4:	001007b7          	lui	a5,0x100
    80004ad8:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    80004adc:	07b2                	slli	a5,a5,0xc
    80004ade:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004ae2:	640c                	ld	a1,8(s0)
    80004ae4:	0002a517          	auipc	a0,0x2a
    80004ae8:	25c50513          	addi	a0,a0,604 # 8002ed40 <__func__.0+0xe58>
    80004aec:	13f260ef          	jal	8002b42a <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004af0:	08200593          	li	a1,130
    80004af4:	0002a617          	auipc	a2,0x2a
    80004af8:	29460613          	addi	a2,a2,660 # 8002ed88 <__func__.0+0xea0>
    80004afc:	00029517          	auipc	a0,0x29
    80004b00:	6e450513          	addi	a0,a0,1764 # 8002e1e0 <__func__.0+0x2f8>
    80004b04:	127260ef          	jal	8002b42a <printf>
    80004b08:	00053797          	auipc	a5,0x53
    80004b0c:	5097c783          	lbu	a5,1289(a5) # 80058011 <excpt+0x1>
    80004b10:	00029597          	auipc	a1,0x29
    80004b14:	6a858593          	addi	a1,a1,1704 # 8002e1b8 <__func__.0+0x2d0>
    80004b18:	e789                	bnez	a5,80004b22 <m_and_hs_using_vs_access_9+0x144>
    80004b1a:	00029597          	auipc	a1,0x29
    80004b1e:	68e58593          	addi	a1,a1,1678 # 8002e1a8 <__func__.0+0x2c0>
    80004b22:	00029517          	auipc	a0,0x29
    80004b26:	6d650513          	addi	a0,a0,1750 # 8002e1f8 <__func__.0+0x310>
    80004b2a:	101260ef          	jal	8002b42a <printf>
    80004b2e:	00053797          	auipc	a5,0x53
    80004b32:	4e37c783          	lbu	a5,1251(a5) # 80058011 <excpt+0x1>
    80004b36:	efb1                	bnez	a5,80004b92 <m_and_hs_using_vs_access_9+0x1b4>
    80004b38:	4529                	li	a0,10
    80004b3a:	5de250ef          	jal	8002a118 <putchar>
    80004b3e:	c491                	beqz	s1,80004b4a <m_and_hs_using_vs_access_9+0x16c>
    80004b40:	00053797          	auipc	a5,0x53
    80004b44:	4d17c783          	lbu	a5,1233(a5) # 80058011 <excpt+0x1>
    80004b48:	c79d                	beqz	a5,80004b76 <m_and_hs_using_vs_access_9+0x198>
    80004b4a:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004b4c:	00029597          	auipc	a1,0x29
    80004b50:	66c58593          	addi	a1,a1,1644 # 8002e1b8 <__func__.0+0x2d0>
    80004b54:	00029517          	auipc	a0,0x29
    80004b58:	70c50513          	addi	a0,a0,1804 # 8002e260 <__func__.0+0x378>
    80004b5c:	0cf260ef          	jal	8002b42a <printf>
    80004b60:	4511                	li	a0,4
    80004b62:	ba6fc0ef          	jal	80000f08 <goto_priv>
    80004b66:	cbffc0ef          	jal	80001824 <reset_state>
}
    80004b6a:	60e2                	ld	ra,24(sp)
    80004b6c:	8522                	mv	a0,s0
    80004b6e:	6442                	ld	s0,16(sp)
    80004b70:	64a2                	ld	s1,8(sp)
    80004b72:	6105                	addi	sp,sp,32
    80004b74:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004b76:	4405                	li	s0,1
    TEST_END();
    80004b78:	00029597          	auipc	a1,0x29
    80004b7c:	63058593          	addi	a1,a1,1584 # 8002e1a8 <__func__.0+0x2c0>
    80004b80:	bfd1                	j	80004b54 <m_and_hs_using_vs_access_9+0x176>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004b82:	7418                	ld	a4,40(s0)
    80004b84:	4001a7b7          	lui	a5,0x4001a
    80004b88:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004b8c:	f0f71be3          	bne	a4,a5,80004aa2 <m_and_hs_using_vs_access_9+0xc4>
    80004b90:	b71d                	j	80004ab6 <m_and_hs_using_vs_access_9+0xd8>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004b92:	00029517          	auipc	a0,0x29
    80004b96:	66e50513          	addi	a0,a0,1646 # 8002e200 <__func__.0+0x318>
    80004b9a:	091260ef          	jal	8002b42a <printf>
    80004b9e:	02900513          	li	a0,41
    80004ba2:	576250ef          	jal	8002a118 <putchar>
    80004ba6:	bf49                	j	80004b38 <m_and_hs_using_vs_access_9+0x15a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004ba8:	7418                	ld	a4,40(s0)
    80004baa:	4001a7b7          	lui	a5,0x4001a
    80004bae:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004bb2:	00029597          	auipc	a1,0x29
    80004bb6:	5f658593          	addi	a1,a1,1526 # 8002e1a8 <__func__.0+0x2c0>
    80004bba:	ecf705e3          	beq	a4,a5,80004a84 <m_and_hs_using_vs_access_9+0xa6>
    80004bbe:	00029597          	auipc	a1,0x29
    80004bc2:	5fa58593          	addi	a1,a1,1530 # 8002e1b8 <__func__.0+0x2d0>
    80004bc6:	bd7d                	j	80004a84 <m_and_hs_using_vs_access_9+0xa6>
    80004bc8:	7404                	ld	s1,40(s0)
    80004bca:	bffe67b7          	lui	a5,0xbffe6
    80004bce:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004bd2:	94be                	add	s1,s1,a5
    80004bd4:	0014b493          	seqz	s1,s1
    80004bd8:	bde5                	j	80004ad0 <m_and_hs_using_vs_access_9+0xf2>

0000000080004bda <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004bda:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004bdc:	00027597          	auipc	a1,0x27
    80004be0:	79c58593          	addi	a1,a1,1948 # 8002c378 <__func__.2>
    80004be4:	00029517          	auipc	a0,0x29
    80004be8:	5e450513          	addi	a0,a0,1508 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004bec:	ec06                	sd	ra,24(sp)
    80004bee:	e822                	sd	s0,16(sp)
    80004bf0:	e426                	sd	s1,8(sp)
    TEST_START();
    80004bf2:	039260ef          	jal	8002b42a <printf>
    80004bf6:	4529                	li	a0,10
    80004bf8:	520250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004bfc:	9e5fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004c00:	dc5fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004c04:	b79fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004c08:	450d                	li	a0,3
    80004c0a:	afefc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004c0e:	4509                	li	a0,2
    80004c10:	a18fc0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004c14:	9f8fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);
    80004c18:	6785                	lui	a5,0x1
    80004c1a:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004c1e:	14079073          	csrw	sscratch,a5
    80004c22:	000807b7          	lui	a5,0x80
    80004c26:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004c28:	07b6                	slli	a5,a5,0xd
    80004c2a:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c2e:	08200593          	li	a1,130
    80004c32:	0002a617          	auipc	a2,0x2a
    80004c36:	17e60613          	addi	a2,a2,382 # 8002edb0 <__func__.0+0xec8>
    80004c3a:	00029517          	auipc	a0,0x29
    80004c3e:	5a650513          	addi	a0,a0,1446 # 8002e1e0 <__func__.0+0x2f8>
    80004c42:	7e8260ef          	jal	8002b42a <printf>
    80004c46:	00053797          	auipc	a5,0x53
    80004c4a:	3cb7c783          	lbu	a5,971(a5) # 80058011 <excpt+0x1>
    80004c4e:	00029597          	auipc	a1,0x29
    80004c52:	55a58593          	addi	a1,a1,1370 # 8002e1a8 <__func__.0+0x2c0>
    80004c56:	c789                	beqz	a5,80004c60 <m_and_hs_using_vs_access_10+0x86>
    80004c58:	00029597          	auipc	a1,0x29
    80004c5c:	56058593          	addi	a1,a1,1376 # 8002e1b8 <__func__.0+0x2d0>
    80004c60:	00029517          	auipc	a0,0x29
    80004c64:	59850513          	addi	a0,a0,1432 # 8002e1f8 <__func__.0+0x310>
    80004c68:	7c2260ef          	jal	8002b42a <printf>
    80004c6c:	00053797          	auipc	a5,0x53
    80004c70:	3a57c783          	lbu	a5,933(a5) # 80058011 <excpt+0x1>
    80004c74:	10079663          	bnez	a5,80004d80 <m_and_hs_using_vs_access_10+0x1a6>
    80004c78:	4529                	li	a0,10
    80004c7a:	49e250ef          	jal	8002a118 <putchar>
    80004c7e:	00053417          	auipc	s0,0x53
    80004c82:	39344403          	lbu	s0,915(s0) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004c86:	af7fb0ef          	jal	8000077c <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004c8a:	982fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);      
    80004c8e:	6785                	lui	a5,0x1
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c90:	00053497          	auipc	s1,0x53
    80004c94:	38048493          	addi	s1,s1,896 # 80058010 <excpt>
    CSRW(sscratch, 0x911);      
    80004c98:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004c9c:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004ca0:	37ab77b7          	lui	a5,0x37ab7
    80004ca4:	00080737          	lui	a4,0x80
    80004ca8:	078a                	slli	a5,a5,0x2
    80004caa:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004cac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004cb0:	0736                	slli	a4,a4,0xd
    80004cb2:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004cb6:	08200593          	li	a1,130
    80004cba:	0002a617          	auipc	a2,0x2a
    80004cbe:	12660613          	addi	a2,a2,294 # 8002ede0 <__func__.0+0xef8>
    80004cc2:	00029517          	auipc	a0,0x29
    80004cc6:	51e50513          	addi	a0,a0,1310 # 8002e1e0 <__func__.0+0x2f8>
    80004cca:	760260ef          	jal	8002b42a <printf>
    80004cce:	00053797          	auipc	a5,0x53
    80004cd2:	3437c783          	lbu	a5,835(a5) # 80058011 <excpt+0x1>
    80004cd6:	00029597          	auipc	a1,0x29
    80004cda:	4e258593          	addi	a1,a1,1250 # 8002e1b8 <__func__.0+0x2d0>
    80004cde:	cf89                	beqz	a5,80004cf8 <m_and_hs_using_vs_access_10+0x11e>
    80004ce0:	6498                	ld	a4,8(s1)
    80004ce2:	47bd                	li	a5,15
    80004ce4:	00029597          	auipc	a1,0x29
    80004ce8:	4c458593          	addi	a1,a1,1220 # 8002e1a8 <__func__.0+0x2c0>
    80004cec:	00f70663          	beq	a4,a5,80004cf8 <m_and_hs_using_vs_access_10+0x11e>
    80004cf0:	00029597          	auipc	a1,0x29
    80004cf4:	4c858593          	addi	a1,a1,1224 # 8002e1b8 <__func__.0+0x2d0>
    80004cf8:	00029517          	auipc	a0,0x29
    80004cfc:	50050513          	addi	a0,a0,1280 # 8002e1f8 <__func__.0+0x310>
    80004d00:	72a260ef          	jal	8002b42a <printf>
    80004d04:	00053797          	auipc	a5,0x53
    80004d08:	30d7c783          	lbu	a5,781(a5) # 80058011 <excpt+0x1>
    80004d0c:	c789                	beqz	a5,80004d16 <m_and_hs_using_vs_access_10+0x13c>
    80004d0e:	6498                	ld	a4,8(s1)
    80004d10:	47bd                	li	a5,15
    80004d12:	00f70c63          	beq	a4,a5,80004d2a <m_and_hs_using_vs_access_10+0x150>
    80004d16:	00029517          	auipc	a0,0x29
    80004d1a:	4ea50513          	addi	a0,a0,1258 # 8002e200 <__func__.0+0x318>
    80004d1e:	70c260ef          	jal	8002b42a <printf>
    80004d22:	02900513          	li	a0,41
    80004d26:	3f2250ef          	jal	8002a118 <putchar>
    80004d2a:	4529                	li	a0,10
    80004d2c:	3ec250ef          	jal	8002a118 <putchar>
    80004d30:	e015                	bnez	s0,80004d54 <m_and_hs_using_vs_access_10+0x17a>
    80004d32:	00053417          	auipc	s0,0x53
    80004d36:	2df44403          	lbu	s0,735(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004d3a:	00029597          	auipc	a1,0x29
    80004d3e:	47e58593          	addi	a1,a1,1150 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004d42:	cc11                	beqz	s0,80004d5e <m_and_hs_using_vs_access_10+0x184>
    80004d44:	6498                	ld	a4,8(s1)
    80004d46:	47bd                	li	a5,15
    TEST_END();
    80004d48:	00029597          	auipc	a1,0x29
    80004d4c:	46058593          	addi	a1,a1,1120 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004d50:	00f70763          	beq	a4,a5,80004d5e <m_and_hs_using_vs_access_10+0x184>
    80004d54:	4401                	li	s0,0
    TEST_END();
    80004d56:	00029597          	auipc	a1,0x29
    80004d5a:	46258593          	addi	a1,a1,1122 # 8002e1b8 <__func__.0+0x2d0>
    80004d5e:	00029517          	auipc	a0,0x29
    80004d62:	50250513          	addi	a0,a0,1282 # 8002e260 <__func__.0+0x378>
    80004d66:	6c4260ef          	jal	8002b42a <printf>
    80004d6a:	4511                	li	a0,4
    80004d6c:	99cfc0ef          	jal	80000f08 <goto_priv>
    80004d70:	ab5fc0ef          	jal	80001824 <reset_state>
}
    80004d74:	60e2                	ld	ra,24(sp)
    80004d76:	8522                	mv	a0,s0
    80004d78:	6442                	ld	s0,16(sp)
    80004d7a:	64a2                	ld	s1,8(sp)
    80004d7c:	6105                	addi	sp,sp,32
    80004d7e:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004d80:	00029517          	auipc	a0,0x29
    80004d84:	48050513          	addi	a0,a0,1152 # 8002e200 <__func__.0+0x318>
    80004d88:	6a2260ef          	jal	8002b42a <printf>
    80004d8c:	02900513          	li	a0,41
    80004d90:	388250ef          	jal	8002a118 <putchar>
    80004d94:	b5d5                	j	80004c78 <m_and_hs_using_vs_access_10+0x9e>

0000000080004d96 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004d96:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004d98:	00027597          	auipc	a1,0x27
    80004d9c:	60058593          	addi	a1,a1,1536 # 8002c398 <__func__.1>
    80004da0:	00029517          	auipc	a0,0x29
    80004da4:	42850513          	addi	a0,a0,1064 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004da8:	ec06                	sd	ra,24(sp)
    80004daa:	e822                	sd	s0,16(sp)
    80004dac:	e426                	sd	s1,8(sp)
    TEST_START();
    80004dae:	67c260ef          	jal	8002b42a <printf>
    80004db2:	4529                	li	a0,10
    80004db4:	364250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004db8:	829fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004dbc:	c09fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004dc0:	9bdfb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004dc4:	450d                	li	a0,3
    80004dc6:	942fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004dca:	4509                	li	a0,2
    80004dcc:	85cfc0ef          	jal	80000e28 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004dd0:	83cfc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004dd4:	11200793          	li	a5,274
    80004dd8:	14079073          	csrw	sscratch,a5
    80004ddc:	37ab77b7          	lui	a5,0x37ab7
    80004de0:	00080737          	lui	a4,0x80
    80004de4:	078a                	slli	a5,a5,0x2
    80004de6:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004dea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004dee:	0736                	slli	a4,a4,0xd
    80004df0:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004df4:	08200593          	li	a1,130
    80004df8:	0002a617          	auipc	a2,0x2a
    80004dfc:	02060613          	addi	a2,a2,32 # 8002ee18 <__func__.0+0xf30>
    80004e00:	00029517          	auipc	a0,0x29
    80004e04:	3e050513          	addi	a0,a0,992 # 8002e1e0 <__func__.0+0x2f8>
    80004e08:	622260ef          	jal	8002b42a <printf>
    80004e0c:	00053797          	auipc	a5,0x53
    80004e10:	2057c783          	lbu	a5,517(a5) # 80058011 <excpt+0x1>
    80004e14:	00053497          	auipc	s1,0x53
    80004e18:	1fc48493          	addi	s1,s1,508 # 80058010 <excpt>
    80004e1c:	00029597          	auipc	a1,0x29
    80004e20:	39c58593          	addi	a1,a1,924 # 8002e1b8 <__func__.0+0x2d0>
    80004e24:	cf89                	beqz	a5,80004e3e <m_and_hs_using_vs_access_11+0xa8>
    80004e26:	6498                	ld	a4,8(s1)
    80004e28:	47dd                	li	a5,23
    80004e2a:	00029597          	auipc	a1,0x29
    80004e2e:	37e58593          	addi	a1,a1,894 # 8002e1a8 <__func__.0+0x2c0>
    80004e32:	00f70663          	beq	a4,a5,80004e3e <m_and_hs_using_vs_access_11+0xa8>
    80004e36:	00029597          	auipc	a1,0x29
    80004e3a:	38258593          	addi	a1,a1,898 # 8002e1b8 <__func__.0+0x2d0>
    80004e3e:	00029517          	auipc	a0,0x29
    80004e42:	3ba50513          	addi	a0,a0,954 # 8002e1f8 <__func__.0+0x310>
    80004e46:	5e4260ef          	jal	8002b42a <printf>
    80004e4a:	00053797          	auipc	a5,0x53
    80004e4e:	1c77c783          	lbu	a5,455(a5) # 80058011 <excpt+0x1>
    80004e52:	c789                	beqz	a5,80004e5c <m_and_hs_using_vs_access_11+0xc6>
    80004e54:	6498                	ld	a4,8(s1)
    80004e56:	47dd                	li	a5,23
    80004e58:	00f70c63          	beq	a4,a5,80004e70 <m_and_hs_using_vs_access_11+0xda>
    80004e5c:	00029517          	auipc	a0,0x29
    80004e60:	3a450513          	addi	a0,a0,932 # 8002e200 <__func__.0+0x318>
    80004e64:	5c6260ef          	jal	8002b42a <printf>
    80004e68:	02900513          	li	a0,41
    80004e6c:	2ac250ef          	jal	8002a118 <putchar>
    80004e70:	4529                	li	a0,10
    80004e72:	2a6250ef          	jal	8002a118 <putchar>
    80004e76:	00053417          	auipc	s0,0x53
    80004e7a:	19b44403          	lbu	s0,411(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004e7e:	00029597          	auipc	a1,0x29
    80004e82:	33a58593          	addi	a1,a1,826 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004e86:	cc11                	beqz	s0,80004ea2 <m_and_hs_using_vs_access_11+0x10c>
    80004e88:	6498                	ld	a4,8(s1)
    80004e8a:	47dd                	li	a5,23
    TEST_END();
    80004e8c:	00029597          	auipc	a1,0x29
    80004e90:	31c58593          	addi	a1,a1,796 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004e94:	00f70763          	beq	a4,a5,80004ea2 <m_and_hs_using_vs_access_11+0x10c>
    80004e98:	4401                	li	s0,0
    TEST_END();
    80004e9a:	00029597          	auipc	a1,0x29
    80004e9e:	31e58593          	addi	a1,a1,798 # 8002e1b8 <__func__.0+0x2d0>
    80004ea2:	00029517          	auipc	a0,0x29
    80004ea6:	3be50513          	addi	a0,a0,958 # 8002e260 <__func__.0+0x378>
    80004eaa:	580260ef          	jal	8002b42a <printf>
    80004eae:	4511                	li	a0,4
    80004eb0:	858fc0ef          	jal	80000f08 <goto_priv>
    80004eb4:	971fc0ef          	jal	80001824 <reset_state>
}
    80004eb8:	60e2                	ld	ra,24(sp)
    80004eba:	8522                	mv	a0,s0
    80004ebc:	6442                	ld	s0,16(sp)
    80004ebe:	64a2                	ld	s1,8(sp)
    80004ec0:	6105                	addi	sp,sp,32
    80004ec2:	8082                	ret

0000000080004ec4 <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004ec4:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004ec6:	00027597          	auipc	a1,0x27
    80004eca:	4f258593          	addi	a1,a1,1266 # 8002c3b8 <__func__.0>
    80004ece:	00029517          	auipc	a0,0x29
    80004ed2:	2fa50513          	addi	a0,a0,762 # 8002e1c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004ed6:	e406                	sd	ra,8(sp)
    80004ed8:	e022                	sd	s0,0(sp)
    TEST_START();
    80004eda:	550260ef          	jal	8002b42a <printf>
    80004ede:	4529                	li	a0,10
    80004ee0:	238250ef          	jal	8002a118 <putchar>
    
    hspt_init();
    80004ee4:	efcfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004ee8:	addfb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004eec:	891fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004ef0:	450d                	li	a0,3
    80004ef2:	816fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004ef6:	4509                	li	a0,2
    80004ef8:	f31fb0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004efc:	f11fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004f00:	11200793          	li	a5,274
    80004f04:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004f08:	08200593          	li	a1,130
    80004f0c:	0002a617          	auipc	a2,0x2a
    80004f10:	f4c60613          	addi	a2,a2,-180 # 8002ee58 <__func__.0+0xf70>
    80004f14:	00029517          	auipc	a0,0x29
    80004f18:	2cc50513          	addi	a0,a0,716 # 8002e1e0 <__func__.0+0x2f8>
    80004f1c:	50e260ef          	jal	8002b42a <printf>
    80004f20:	00053797          	auipc	a5,0x53
    80004f24:	0f17c783          	lbu	a5,241(a5) # 80058011 <excpt+0x1>
    80004f28:	00029597          	auipc	a1,0x29
    80004f2c:	28058593          	addi	a1,a1,640 # 8002e1a8 <__func__.0+0x2c0>
    80004f30:	c789                	beqz	a5,80004f3a <m_and_hs_using_vs_access_12+0x76>
    80004f32:	00029597          	auipc	a1,0x29
    80004f36:	28658593          	addi	a1,a1,646 # 8002e1b8 <__func__.0+0x2d0>
    80004f3a:	00029517          	auipc	a0,0x29
    80004f3e:	2be50513          	addi	a0,a0,702 # 8002e1f8 <__func__.0+0x310>
    80004f42:	4e8260ef          	jal	8002b42a <printf>
    80004f46:	00053797          	auipc	a5,0x53
    80004f4a:	0cb7c783          	lbu	a5,203(a5) # 80058011 <excpt+0x1>
    80004f4e:	e7a1                	bnez	a5,80004f96 <m_and_hs_using_vs_access_12+0xd2>
    80004f50:	4529                	li	a0,10
    80004f52:	1c6250ef          	jal	8002a118 <putchar>
    80004f56:	00053797          	auipc	a5,0x53
    80004f5a:	0bb7c783          	lbu	a5,187(a5) # 80058011 <excpt+0x1>
    80004f5e:	e795                	bnez	a5,80004f8a <m_and_hs_using_vs_access_12+0xc6>
    80004f60:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004f62:	00029597          	auipc	a1,0x29
    80004f66:	24658593          	addi	a1,a1,582 # 8002e1a8 <__func__.0+0x2c0>
    80004f6a:	00029517          	auipc	a0,0x29
    80004f6e:	2f650513          	addi	a0,a0,758 # 8002e260 <__func__.0+0x378>
    80004f72:	4b8260ef          	jal	8002b42a <printf>
    80004f76:	4511                	li	a0,4
    80004f78:	f91fb0ef          	jal	80000f08 <goto_priv>
    80004f7c:	8a9fc0ef          	jal	80001824 <reset_state>

}
    80004f80:	60a2                	ld	ra,8(sp)
    80004f82:	8522                	mv	a0,s0
    80004f84:	6402                	ld	s0,0(sp)
    80004f86:	0141                	addi	sp,sp,16
    80004f88:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004f8a:	4401                	li	s0,0
    TEST_END();
    80004f8c:	00029597          	auipc	a1,0x29
    80004f90:	22c58593          	addi	a1,a1,556 # 8002e1b8 <__func__.0+0x2d0>
    80004f94:	bfd9                	j	80004f6a <m_and_hs_using_vs_access_12+0xa6>
    TEST_ASSERT("CSRW successfull int any condition",
    80004f96:	00029517          	auipc	a0,0x29
    80004f9a:	26a50513          	addi	a0,a0,618 # 8002e200 <__func__.0+0x318>
    80004f9e:	48c260ef          	jal	8002b42a <printf>
    80004fa2:	02900513          	li	a0,41
    80004fa6:	172250ef          	jal	8002a118 <putchar>
    80004faa:	b75d                	j	80004f50 <m_and_hs_using_vs_access_12+0x8c>

0000000080004fac <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004fac:	1101                	addi	sp,sp,-32

    TEST_START();
    80004fae:	00027597          	auipc	a1,0x27
    80004fb2:	42a58593          	addi	a1,a1,1066 # 8002c3d8 <__func__.11>
    80004fb6:	00029517          	auipc	a0,0x29
    80004fba:	21250513          	addi	a0,a0,530 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004fbe:	ec06                	sd	ra,24(sp)
    80004fc0:	e822                	sd	s0,16(sp)
    80004fc2:	e426                	sd	s1,8(sp)
    TEST_START();
    80004fc4:	466260ef          	jal	8002b42a <printf>
    80004fc8:	4529                	li	a0,10
    80004fca:	14e250ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_VS);
    80004fce:	4509                	li	a0,2
    80004fd0:	f39fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004fd4:	e39fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004fd8:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004fdc:	08200593          	li	a1,130
    80004fe0:	0002a617          	auipc	a2,0x2a
    80004fe4:	ea060613          	addi	a2,a2,-352 # 8002ee80 <__func__.0+0xf98>
    80004fe8:	00029517          	auipc	a0,0x29
    80004fec:	1f850513          	addi	a0,a0,504 # 8002e1e0 <__func__.0+0x2f8>
    80004ff0:	43a260ef          	jal	8002b42a <printf>
    80004ff4:	00053797          	auipc	a5,0x53
    80004ff8:	01d7c783          	lbu	a5,29(a5) # 80058011 <excpt+0x1>
    80004ffc:	00053497          	auipc	s1,0x53
    80005000:	01448493          	addi	s1,s1,20 # 80058010 <excpt>
    80005004:	00029597          	auipc	a1,0x29
    80005008:	1b458593          	addi	a1,a1,436 # 8002e1b8 <__func__.0+0x2d0>
    8000500c:	cf89                	beqz	a5,80005026 <virtual_instruction_1+0x7a>
    8000500e:	6498                	ld	a4,8(s1)
    80005010:	47d9                	li	a5,22
    80005012:	00029597          	auipc	a1,0x29
    80005016:	19658593          	addi	a1,a1,406 # 8002e1a8 <__func__.0+0x2c0>
    8000501a:	00f70663          	beq	a4,a5,80005026 <virtual_instruction_1+0x7a>
    8000501e:	00029597          	auipc	a1,0x29
    80005022:	19a58593          	addi	a1,a1,410 # 8002e1b8 <__func__.0+0x2d0>
    80005026:	00029517          	auipc	a0,0x29
    8000502a:	1d250513          	addi	a0,a0,466 # 8002e1f8 <__func__.0+0x310>
    8000502e:	3fc260ef          	jal	8002b42a <printf>
    80005032:	00053797          	auipc	a5,0x53
    80005036:	fdf7c783          	lbu	a5,-33(a5) # 80058011 <excpt+0x1>
    8000503a:	c789                	beqz	a5,80005044 <virtual_instruction_1+0x98>
    8000503c:	6498                	ld	a4,8(s1)
    8000503e:	47d9                	li	a5,22
    80005040:	00f70c63          	beq	a4,a5,80005058 <virtual_instruction_1+0xac>
    80005044:	00029517          	auipc	a0,0x29
    80005048:	1bc50513          	addi	a0,a0,444 # 8002e200 <__func__.0+0x318>
    8000504c:	3de260ef          	jal	8002b42a <printf>
    80005050:	02900513          	li	a0,41
    80005054:	0c4250ef          	jal	8002a118 <putchar>
    80005058:	4529                	li	a0,10
    8000505a:	0be250ef          	jal	8002a118 <putchar>
    8000505e:	00053797          	auipc	a5,0x53
    80005062:	fb37c783          	lbu	a5,-77(a5) # 80058011 <excpt+0x1>
    80005066:	4401                	li	s0,0
    80005068:	c789                	beqz	a5,80005072 <virtual_instruction_1+0xc6>
    8000506a:	6480                	ld	s0,8(s1)
    8000506c:	1429                	addi	s0,s0,-22
    8000506e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80005072:	4509                	li	a0,2
    80005074:	e95fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005078:	d95fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000507c:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80005080:	08200593          	li	a1,130
    80005084:	0002a617          	auipc	a2,0x2a
    80005088:	e3c60613          	addi	a2,a2,-452 # 8002eec0 <__func__.0+0xfd8>
    8000508c:	00029517          	auipc	a0,0x29
    80005090:	15450513          	addi	a0,a0,340 # 8002e1e0 <__func__.0+0x2f8>
    80005094:	396260ef          	jal	8002b42a <printf>
    80005098:	00053797          	auipc	a5,0x53
    8000509c:	f797c783          	lbu	a5,-135(a5) # 80058011 <excpt+0x1>
    800050a0:	00029597          	auipc	a1,0x29
    800050a4:	11858593          	addi	a1,a1,280 # 8002e1b8 <__func__.0+0x2d0>
    800050a8:	cf89                	beqz	a5,800050c2 <virtual_instruction_1+0x116>
    800050aa:	6498                	ld	a4,8(s1)
    800050ac:	47d9                	li	a5,22
    800050ae:	00029597          	auipc	a1,0x29
    800050b2:	0fa58593          	addi	a1,a1,250 # 8002e1a8 <__func__.0+0x2c0>
    800050b6:	00f70663          	beq	a4,a5,800050c2 <virtual_instruction_1+0x116>
    800050ba:	00029597          	auipc	a1,0x29
    800050be:	0fe58593          	addi	a1,a1,254 # 8002e1b8 <__func__.0+0x2d0>
    800050c2:	00029517          	auipc	a0,0x29
    800050c6:	13650513          	addi	a0,a0,310 # 8002e1f8 <__func__.0+0x310>
    800050ca:	360260ef          	jal	8002b42a <printf>
    800050ce:	00053797          	auipc	a5,0x53
    800050d2:	f437c783          	lbu	a5,-189(a5) # 80058011 <excpt+0x1>
    800050d6:	c789                	beqz	a5,800050e0 <virtual_instruction_1+0x134>
    800050d8:	6498                	ld	a4,8(s1)
    800050da:	47d9                	li	a5,22
    800050dc:	00f70c63          	beq	a4,a5,800050f4 <virtual_instruction_1+0x148>
    800050e0:	00029517          	auipc	a0,0x29
    800050e4:	12050513          	addi	a0,a0,288 # 8002e200 <__func__.0+0x318>
    800050e8:	342260ef          	jal	8002b42a <printf>
    800050ec:	02900513          	li	a0,41
    800050f0:	028250ef          	jal	8002a118 <putchar>
    800050f4:	4529                	li	a0,10
    800050f6:	022250ef          	jal	8002a118 <putchar>
    800050fa:	c801                	beqz	s0,8000510a <virtual_instruction_1+0x15e>
    800050fc:	00053797          	auipc	a5,0x53
    80005100:	f157c783          	lbu	a5,-235(a5) # 80058011 <excpt+0x1>
    80005104:	4401                	li	s0,0
    80005106:	18079663          	bnez	a5,80005292 <virtual_instruction_1+0x2e6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    8000510a:	4511                	li	a0,4
    8000510c:	dfdfb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005110:	001007b7          	lui	a5,0x100
    80005114:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005118:	4509                	li	a0,2
    8000511a:	deffb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000511e:	ceffb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005122:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005126:	08200593          	li	a1,130
    8000512a:	0002a617          	auipc	a2,0x2a
    8000512e:	dd660613          	addi	a2,a2,-554 # 8002ef00 <__func__.0+0x1018>
    80005132:	00029517          	auipc	a0,0x29
    80005136:	0ae50513          	addi	a0,a0,174 # 8002e1e0 <__func__.0+0x2f8>
    8000513a:	2f0260ef          	jal	8002b42a <printf>
    8000513e:	00053797          	auipc	a5,0x53
    80005142:	ed37c783          	lbu	a5,-301(a5) # 80058011 <excpt+0x1>
    80005146:	00029597          	auipc	a1,0x29
    8000514a:	07258593          	addi	a1,a1,114 # 8002e1b8 <__func__.0+0x2d0>
    8000514e:	cf89                	beqz	a5,80005168 <virtual_instruction_1+0x1bc>
    80005150:	6498                	ld	a4,8(s1)
    80005152:	47d9                	li	a5,22
    80005154:	00029597          	auipc	a1,0x29
    80005158:	05458593          	addi	a1,a1,84 # 8002e1a8 <__func__.0+0x2c0>
    8000515c:	00f70663          	beq	a4,a5,80005168 <virtual_instruction_1+0x1bc>
    80005160:	00029597          	auipc	a1,0x29
    80005164:	05858593          	addi	a1,a1,88 # 8002e1b8 <__func__.0+0x2d0>
    80005168:	00029517          	auipc	a0,0x29
    8000516c:	09050513          	addi	a0,a0,144 # 8002e1f8 <__func__.0+0x310>
    80005170:	2ba260ef          	jal	8002b42a <printf>
    80005174:	00053797          	auipc	a5,0x53
    80005178:	e9d7c783          	lbu	a5,-355(a5) # 80058011 <excpt+0x1>
    8000517c:	c789                	beqz	a5,80005186 <virtual_instruction_1+0x1da>
    8000517e:	6498                	ld	a4,8(s1)
    80005180:	47d9                	li	a5,22
    80005182:	00f70c63          	beq	a4,a5,8000519a <virtual_instruction_1+0x1ee>
    80005186:	00029517          	auipc	a0,0x29
    8000518a:	07a50513          	addi	a0,a0,122 # 8002e200 <__func__.0+0x318>
    8000518e:	29c260ef          	jal	8002b42a <printf>
    80005192:	02900513          	li	a0,41
    80005196:	783240ef          	jal	8002a118 <putchar>
    8000519a:	4529                	li	a0,10
    8000519c:	77d240ef          	jal	8002a118 <putchar>
    800051a0:	c801                	beqz	s0,800051b0 <virtual_instruction_1+0x204>
    800051a2:	00053797          	auipc	a5,0x53
    800051a6:	e6f7c783          	lbu	a5,-401(a5) # 80058011 <excpt+0x1>
    800051aa:	4401                	li	s0,0
    800051ac:	0c079e63          	bnez	a5,80005288 <virtual_instruction_1+0x2dc>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800051b0:	4509                	li	a0,2
    800051b2:	d57fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800051b6:	c57fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800051ba:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800051be:	08200593          	li	a1,130
    800051c2:	0002a617          	auipc	a2,0x2a
    800051c6:	d8e60613          	addi	a2,a2,-626 # 8002ef50 <__func__.0+0x1068>
    800051ca:	00029517          	auipc	a0,0x29
    800051ce:	01650513          	addi	a0,a0,22 # 8002e1e0 <__func__.0+0x2f8>
    800051d2:	258260ef          	jal	8002b42a <printf>
    800051d6:	00053797          	auipc	a5,0x53
    800051da:	e3b7c783          	lbu	a5,-453(a5) # 80058011 <excpt+0x1>
    800051de:	00029597          	auipc	a1,0x29
    800051e2:	fda58593          	addi	a1,a1,-38 # 8002e1b8 <__func__.0+0x2d0>
    800051e6:	cf89                	beqz	a5,80005200 <virtual_instruction_1+0x254>
    800051e8:	6498                	ld	a4,8(s1)
    800051ea:	47d9                	li	a5,22
    800051ec:	00029597          	auipc	a1,0x29
    800051f0:	fbc58593          	addi	a1,a1,-68 # 8002e1a8 <__func__.0+0x2c0>
    800051f4:	00f70663          	beq	a4,a5,80005200 <virtual_instruction_1+0x254>
    800051f8:	00029597          	auipc	a1,0x29
    800051fc:	fc058593          	addi	a1,a1,-64 # 8002e1b8 <__func__.0+0x2d0>
    80005200:	00029517          	auipc	a0,0x29
    80005204:	ff850513          	addi	a0,a0,-8 # 8002e1f8 <__func__.0+0x310>
    80005208:	222260ef          	jal	8002b42a <printf>
    8000520c:	00053797          	auipc	a5,0x53
    80005210:	e057c783          	lbu	a5,-507(a5) # 80058011 <excpt+0x1>
    80005214:	c789                	beqz	a5,8000521e <virtual_instruction_1+0x272>
    80005216:	6498                	ld	a4,8(s1)
    80005218:	47d9                	li	a5,22
    8000521a:	00f70c63          	beq	a4,a5,80005232 <virtual_instruction_1+0x286>
    8000521e:	00029517          	auipc	a0,0x29
    80005222:	fe250513          	addi	a0,a0,-30 # 8002e200 <__func__.0+0x318>
    80005226:	204260ef          	jal	8002b42a <printf>
    8000522a:	02900513          	li	a0,41
    8000522e:	6eb240ef          	jal	8002a118 <putchar>
    80005232:	4529                	li	a0,10
    80005234:	6e5240ef          	jal	8002a118 <putchar>
    80005238:	c015                	beqz	s0,8000525c <virtual_instruction_1+0x2b0>
    8000523a:	00053417          	auipc	s0,0x53
    8000523e:	dd744403          	lbu	s0,-553(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005242:	00029597          	auipc	a1,0x29
    80005246:	f7658593          	addi	a1,a1,-138 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000524a:	cc11                	beqz	s0,80005266 <virtual_instruction_1+0x2ba>
    8000524c:	6498                	ld	a4,8(s1)
    8000524e:	47d9                	li	a5,22
    TEST_END();
    80005250:	00029597          	auipc	a1,0x29
    80005254:	f5858593          	addi	a1,a1,-168 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005258:	00f70763          	beq	a4,a5,80005266 <virtual_instruction_1+0x2ba>
    8000525c:	4401                	li	s0,0
    TEST_END();
    8000525e:	00029597          	auipc	a1,0x29
    80005262:	f5a58593          	addi	a1,a1,-166 # 8002e1b8 <__func__.0+0x2d0>
    80005266:	00029517          	auipc	a0,0x29
    8000526a:	ffa50513          	addi	a0,a0,-6 # 8002e260 <__func__.0+0x378>
    8000526e:	1bc260ef          	jal	8002b42a <printf>
    80005272:	4511                	li	a0,4
    80005274:	c95fb0ef          	jal	80000f08 <goto_priv>
    80005278:	dacfc0ef          	jal	80001824 <reset_state>
}
    8000527c:	60e2                	ld	ra,24(sp)
    8000527e:	8522                	mv	a0,s0
    80005280:	6442                	ld	s0,16(sp)
    80005282:	64a2                	ld	s1,8(sp)
    80005284:	6105                	addi	sp,sp,32
    80005286:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005288:	6480                	ld	s0,8(s1)
    8000528a:	1429                	addi	s0,s0,-22
    8000528c:	00143413          	seqz	s0,s0
    80005290:	b705                	j	800051b0 <virtual_instruction_1+0x204>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80005292:	6480                	ld	s0,8(s1)
    80005294:	1429                	addi	s0,s0,-22
    80005296:	00143413          	seqz	s0,s0
    8000529a:	bd85                	j	8000510a <virtual_instruction_1+0x15e>

000000008000529c <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    8000529c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000529e:	00027597          	auipc	a1,0x27
    800052a2:	15258593          	addi	a1,a1,338 # 8002c3f0 <__func__.10>
    800052a6:	00029517          	auipc	a0,0x29
    800052aa:	f2250513          	addi	a0,a0,-222 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    800052ae:	f406                	sd	ra,40(sp)
    800052b0:	f022                	sd	s0,32(sp)
    800052b2:	ec26                	sd	s1,24(sp)
    TEST_START();
    800052b4:	176260ef          	jal	8002b42a <printf>
    800052b8:	4529                	li	a0,10
    800052ba:	65f240ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_VS);
    800052be:	4509                	li	a0,2
    800052c0:	c49fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800052c4:	b49fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800052c8:	4781                	li	a5,0
    800052ca:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    800052ce:	08200593          	li	a1,130
    800052d2:	0002a617          	auipc	a2,0x2a
    800052d6:	cce60613          	addi	a2,a2,-818 # 8002efa0 <__func__.0+0x10b8>
    800052da:	00029517          	auipc	a0,0x29
    800052de:	f0650513          	addi	a0,a0,-250 # 8002e1e0 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    800052e2:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    800052e4:	146260ef          	jal	8002b42a <printf>
    800052e8:	00053797          	auipc	a5,0x53
    800052ec:	d297c783          	lbu	a5,-727(a5) # 80058011 <excpt+0x1>
    800052f0:	00053497          	auipc	s1,0x53
    800052f4:	d2048493          	addi	s1,s1,-736 # 80058010 <excpt>
    800052f8:	00029597          	auipc	a1,0x29
    800052fc:	ec058593          	addi	a1,a1,-320 # 8002e1b8 <__func__.0+0x2d0>
    80005300:	cf89                	beqz	a5,8000531a <virtual_instruction_2+0x7e>
    80005302:	6498                	ld	a4,8(s1)
    80005304:	47d9                	li	a5,22
    80005306:	00029597          	auipc	a1,0x29
    8000530a:	ea258593          	addi	a1,a1,-350 # 8002e1a8 <__func__.0+0x2c0>
    8000530e:	00f70663          	beq	a4,a5,8000531a <virtual_instruction_2+0x7e>
    80005312:	00029597          	auipc	a1,0x29
    80005316:	ea658593          	addi	a1,a1,-346 # 8002e1b8 <__func__.0+0x2d0>
    8000531a:	00029517          	auipc	a0,0x29
    8000531e:	ede50513          	addi	a0,a0,-290 # 8002e1f8 <__func__.0+0x310>
    80005322:	108260ef          	jal	8002b42a <printf>
    80005326:	00053797          	auipc	a5,0x53
    8000532a:	ceb7c783          	lbu	a5,-789(a5) # 80058011 <excpt+0x1>
    8000532e:	c789                	beqz	a5,80005338 <virtual_instruction_2+0x9c>
    80005330:	6498                	ld	a4,8(s1)
    80005332:	47d9                	li	a5,22
    80005334:	00f70c63          	beq	a4,a5,8000534c <virtual_instruction_2+0xb0>
    80005338:	00029517          	auipc	a0,0x29
    8000533c:	ec850513          	addi	a0,a0,-312 # 8002e200 <__func__.0+0x318>
    80005340:	0ea260ef          	jal	8002b42a <printf>
    80005344:	02900513          	li	a0,41
    80005348:	5d1240ef          	jal	8002a118 <putchar>
    8000534c:	4529                	li	a0,10
    8000534e:	5cb240ef          	jal	8002a118 <putchar>
    80005352:	00053797          	auipc	a5,0x53
    80005356:	cbf7c783          	lbu	a5,-833(a5) # 80058011 <excpt+0x1>
    8000535a:	4401                	li	s0,0
    8000535c:	c789                	beqz	a5,80005366 <virtual_instruction_2+0xca>
    8000535e:	6480                	ld	s0,8(s1)
    80005360:	1429                	addi	s0,s0,-22
    80005362:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80005366:	4509                	li	a0,2
    80005368:	ba1fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000536c:	aa1fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005370:	37ab77b7          	lui	a5,0x37ab7
    80005374:	078a                	slli	a5,a5,0x2
    80005376:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000537a:	4701                	li	a4,0
    8000537c:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005380:	08200593          	li	a1,130
    80005384:	0002a617          	auipc	a2,0x2a
    80005388:	c4c60613          	addi	a2,a2,-948 # 8002efd0 <__func__.0+0x10e8>
    8000538c:	00029517          	auipc	a0,0x29
    80005390:	e5450513          	addi	a0,a0,-428 # 8002e1e0 <__func__.0+0x2f8>
    80005394:	096260ef          	jal	8002b42a <printf>
    80005398:	00053797          	auipc	a5,0x53
    8000539c:	c797c783          	lbu	a5,-903(a5) # 80058011 <excpt+0x1>
    800053a0:	00029597          	auipc	a1,0x29
    800053a4:	e1858593          	addi	a1,a1,-488 # 8002e1b8 <__func__.0+0x2d0>
    800053a8:	cf89                	beqz	a5,800053c2 <virtual_instruction_2+0x126>
    800053aa:	6498                	ld	a4,8(s1)
    800053ac:	47d9                	li	a5,22
    800053ae:	00029597          	auipc	a1,0x29
    800053b2:	dfa58593          	addi	a1,a1,-518 # 8002e1a8 <__func__.0+0x2c0>
    800053b6:	00f70663          	beq	a4,a5,800053c2 <virtual_instruction_2+0x126>
    800053ba:	00029597          	auipc	a1,0x29
    800053be:	dfe58593          	addi	a1,a1,-514 # 8002e1b8 <__func__.0+0x2d0>
    800053c2:	00029517          	auipc	a0,0x29
    800053c6:	e3650513          	addi	a0,a0,-458 # 8002e1f8 <__func__.0+0x310>
    800053ca:	060260ef          	jal	8002b42a <printf>
    800053ce:	00053797          	auipc	a5,0x53
    800053d2:	c437c783          	lbu	a5,-957(a5) # 80058011 <excpt+0x1>
    800053d6:	c789                	beqz	a5,800053e0 <virtual_instruction_2+0x144>
    800053d8:	6498                	ld	a4,8(s1)
    800053da:	47d9                	li	a5,22
    800053dc:	00f70c63          	beq	a4,a5,800053f4 <virtual_instruction_2+0x158>
    800053e0:	00029517          	auipc	a0,0x29
    800053e4:	e2050513          	addi	a0,a0,-480 # 8002e200 <__func__.0+0x318>
    800053e8:	042260ef          	jal	8002b42a <printf>
    800053ec:	02900513          	li	a0,41
    800053f0:	529240ef          	jal	8002a118 <putchar>
    800053f4:	4529                	li	a0,10
    800053f6:	523240ef          	jal	8002a118 <putchar>
    800053fa:	c015                	beqz	s0,8000541e <virtual_instruction_2+0x182>
    800053fc:	00053417          	auipc	s0,0x53
    80005400:	c1544403          	lbu	s0,-1003(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80005404:	00029597          	auipc	a1,0x29
    80005408:	db458593          	addi	a1,a1,-588 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    8000540c:	cc11                	beqz	s0,80005428 <virtual_instruction_2+0x18c>
    8000540e:	6498                	ld	a4,8(s1)
    80005410:	47d9                	li	a5,22
    TEST_END();
    80005412:	00029597          	auipc	a1,0x29
    80005416:	d9658593          	addi	a1,a1,-618 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    8000541a:	00f70763          	beq	a4,a5,80005428 <virtual_instruction_2+0x18c>
    8000541e:	4401                	li	s0,0
    TEST_END();
    80005420:	00029597          	auipc	a1,0x29
    80005424:	d9858593          	addi	a1,a1,-616 # 8002e1b8 <__func__.0+0x2d0>
    80005428:	00029517          	auipc	a0,0x29
    8000542c:	e3850513          	addi	a0,a0,-456 # 8002e260 <__func__.0+0x378>
    80005430:	7fb250ef          	jal	8002b42a <printf>
    80005434:	4511                	li	a0,4
    80005436:	ad3fb0ef          	jal	80000f08 <goto_priv>
    8000543a:	beafc0ef          	jal	80001824 <reset_state>

}
    8000543e:	70a2                	ld	ra,40(sp)
    80005440:	8522                	mv	a0,s0
    80005442:	7402                	ld	s0,32(sp)
    80005444:	64e2                	ld	s1,24(sp)
    80005446:	6145                	addi	sp,sp,48
    80005448:	8082                	ret

000000008000544a <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    8000544a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000544c:	00027597          	auipc	a1,0x27
    80005450:	fbc58593          	addi	a1,a1,-68 # 8002c408 <__func__.9>
    80005454:	00029517          	auipc	a0,0x29
    80005458:	d7450513          	addi	a0,a0,-652 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    8000545c:	ec06                	sd	ra,24(sp)
    8000545e:	e822                	sd	s0,16(sp)
    80005460:	e426                	sd	s1,8(sp)
    TEST_START();
    80005462:	7c9250ef          	jal	8002b42a <printf>
    80005466:	4529                	li	a0,10
    80005468:	4b1240ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8000546c:	4511                	li	a0,4
    8000546e:	a9bfb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80005472:	004007b7          	lui	a5,0x400
    80005476:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    8000547a:	4509                	li	a0,2
    8000547c:	a8dfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005480:	98dfb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_SRET();
    80005484:	00000297          	auipc	t0,0x0
    80005488:	01028293          	addi	t0,t0,16 # 80005494 <virtual_instruction_3+0x4a>
    8000548c:	14129073          	csrw	sepc,t0
    80005490:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005494:	08200593          	li	a1,130
    80005498:	0002a617          	auipc	a2,0x2a
    8000549c:	b6860613          	addi	a2,a2,-1176 # 8002f000 <__func__.0+0x1118>
    800054a0:	00029517          	auipc	a0,0x29
    800054a4:	d4050513          	addi	a0,a0,-704 # 8002e1e0 <__func__.0+0x2f8>
    800054a8:	783250ef          	jal	8002b42a <printf>
    800054ac:	00053797          	auipc	a5,0x53
    800054b0:	b657c783          	lbu	a5,-1179(a5) # 80058011 <excpt+0x1>
    800054b4:	00053497          	auipc	s1,0x53
    800054b8:	b5c48493          	addi	s1,s1,-1188 # 80058010 <excpt>
    800054bc:	00029597          	auipc	a1,0x29
    800054c0:	cfc58593          	addi	a1,a1,-772 # 8002e1b8 <__func__.0+0x2d0>
    800054c4:	cf89                	beqz	a5,800054de <virtual_instruction_3+0x94>
    800054c6:	6498                	ld	a4,8(s1)
    800054c8:	47d9                	li	a5,22
    800054ca:	00029597          	auipc	a1,0x29
    800054ce:	cde58593          	addi	a1,a1,-802 # 8002e1a8 <__func__.0+0x2c0>
    800054d2:	00f70663          	beq	a4,a5,800054de <virtual_instruction_3+0x94>
    800054d6:	00029597          	auipc	a1,0x29
    800054da:	ce258593          	addi	a1,a1,-798 # 8002e1b8 <__func__.0+0x2d0>
    800054de:	00029517          	auipc	a0,0x29
    800054e2:	d1a50513          	addi	a0,a0,-742 # 8002e1f8 <__func__.0+0x310>
    800054e6:	745250ef          	jal	8002b42a <printf>
    800054ea:	00053797          	auipc	a5,0x53
    800054ee:	b277c783          	lbu	a5,-1241(a5) # 80058011 <excpt+0x1>
    800054f2:	c789                	beqz	a5,800054fc <virtual_instruction_3+0xb2>
    800054f4:	6498                	ld	a4,8(s1)
    800054f6:	47d9                	li	a5,22
    800054f8:	00f70c63          	beq	a4,a5,80005510 <virtual_instruction_3+0xc6>
    800054fc:	00029517          	auipc	a0,0x29
    80005500:	d0450513          	addi	a0,a0,-764 # 8002e200 <__func__.0+0x318>
    80005504:	727250ef          	jal	8002b42a <printf>
    80005508:	02900513          	li	a0,41
    8000550c:	40d240ef          	jal	8002a118 <putchar>
    80005510:	4529                	li	a0,10
    80005512:	407240ef          	jal	8002a118 <putchar>
    80005516:	00053417          	auipc	s0,0x53
    8000551a:	afb44403          	lbu	s0,-1285(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    8000551e:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005520:	c409                	beqz	s0,8000552a <virtual_instruction_3+0xe0>
    80005522:	6498                	ld	a4,8(s1)
    80005524:	47d9                	li	a5,22
    80005526:	02f70e63          	beq	a4,a5,80005562 <virtual_instruction_3+0x118>
    goto_priv(PRIV_M);
    8000552a:	9dffb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    8000552e:	004007b7          	lui	a5,0x400
    80005532:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005536:	4401                	li	s0,0

    TEST_END();
    80005538:	00029597          	auipc	a1,0x29
    8000553c:	c8058593          	addi	a1,a1,-896 # 8002e1b8 <__func__.0+0x2d0>
    80005540:	00029517          	auipc	a0,0x29
    80005544:	d2050513          	addi	a0,a0,-736 # 8002e260 <__func__.0+0x378>
    80005548:	6e3250ef          	jal	8002b42a <printf>
    8000554c:	4511                	li	a0,4
    8000554e:	9bbfb0ef          	jal	80000f08 <goto_priv>
    80005552:	ad2fc0ef          	jal	80001824 <reset_state>
}
    80005556:	60e2                	ld	ra,24(sp)
    80005558:	8522                	mv	a0,s0
    8000555a:	6442                	ld	s0,16(sp)
    8000555c:	64a2                	ld	s1,8(sp)
    8000555e:	6105                	addi	sp,sp,32
    80005560:	8082                	ret
    goto_priv(PRIV_M);
    80005562:	9a7fb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80005566:	004007b7          	lui	a5,0x400
    8000556a:	6007b073          	csrc	hstatus,a5
    TEST_END();
    8000556e:	00029597          	auipc	a1,0x29
    80005572:	c3a58593          	addi	a1,a1,-966 # 8002e1a8 <__func__.0+0x2c0>
    80005576:	b7e9                	j	80005540 <virtual_instruction_3+0xf6>

0000000080005578 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80005578:	1101                	addi	sp,sp,-32

    TEST_START();
    8000557a:	00027597          	auipc	a1,0x27
    8000557e:	ea658593          	addi	a1,a1,-346 # 8002c420 <__func__.8>
    80005582:	00029517          	auipc	a0,0x29
    80005586:	c4650513          	addi	a0,a0,-954 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    8000558a:	ec06                	sd	ra,24(sp)
    8000558c:	e822                	sd	s0,16(sp)
    8000558e:	e426                	sd	s1,8(sp)
    TEST_START();
    80005590:	69b250ef          	jal	8002b42a <printf>
    80005594:	4529                	li	a0,10
    80005596:	383240ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8000559a:	4511                	li	a0,4
    8000559c:	96dfb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    800055a0:	001007b7          	lui	a5,0x100
    800055a4:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800055a8:	4509                	li	a0,2
    800055aa:	95ffb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800055ae:	85ffb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    800055b2:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    800055b6:	08200593          	li	a1,130
    800055ba:	0002a617          	auipc	a2,0x2a
    800055be:	a8660613          	addi	a2,a2,-1402 # 8002f040 <__func__.0+0x1158>
    800055c2:	00029517          	auipc	a0,0x29
    800055c6:	c1e50513          	addi	a0,a0,-994 # 8002e1e0 <__func__.0+0x2f8>
    800055ca:	661250ef          	jal	8002b42a <printf>
    800055ce:	00053797          	auipc	a5,0x53
    800055d2:	a437c783          	lbu	a5,-1469(a5) # 80058011 <excpt+0x1>
    800055d6:	00053497          	auipc	s1,0x53
    800055da:	a3a48493          	addi	s1,s1,-1478 # 80058010 <excpt>
    800055de:	00029597          	auipc	a1,0x29
    800055e2:	bda58593          	addi	a1,a1,-1062 # 8002e1b8 <__func__.0+0x2d0>
    800055e6:	cf89                	beqz	a5,80005600 <virtual_instruction_4+0x88>
    800055e8:	6498                	ld	a4,8(s1)
    800055ea:	47d9                	li	a5,22
    800055ec:	00029597          	auipc	a1,0x29
    800055f0:	bbc58593          	addi	a1,a1,-1092 # 8002e1a8 <__func__.0+0x2c0>
    800055f4:	00f70663          	beq	a4,a5,80005600 <virtual_instruction_4+0x88>
    800055f8:	00029597          	auipc	a1,0x29
    800055fc:	bc058593          	addi	a1,a1,-1088 # 8002e1b8 <__func__.0+0x2d0>
    80005600:	00029517          	auipc	a0,0x29
    80005604:	bf850513          	addi	a0,a0,-1032 # 8002e1f8 <__func__.0+0x310>
    80005608:	623250ef          	jal	8002b42a <printf>
    8000560c:	00053797          	auipc	a5,0x53
    80005610:	a057c783          	lbu	a5,-1531(a5) # 80058011 <excpt+0x1>
    80005614:	c789                	beqz	a5,8000561e <virtual_instruction_4+0xa6>
    80005616:	6498                	ld	a4,8(s1)
    80005618:	47d9                	li	a5,22
    8000561a:	00f70c63          	beq	a4,a5,80005632 <virtual_instruction_4+0xba>
    8000561e:	00029517          	auipc	a0,0x29
    80005622:	be250513          	addi	a0,a0,-1054 # 8002e200 <__func__.0+0x318>
    80005626:	605250ef          	jal	8002b42a <printf>
    8000562a:	02900513          	li	a0,41
    8000562e:	2eb240ef          	jal	8002a118 <putchar>
    80005632:	4529                	li	a0,10
    80005634:	2e5240ef          	jal	8002a118 <putchar>
    80005638:	00053797          	auipc	a5,0x53
    8000563c:	9d97c783          	lbu	a5,-1575(a5) # 80058011 <excpt+0x1>
    80005640:	4401                	li	s0,0
    80005642:	c789                	beqz	a5,8000564c <virtual_instruction_4+0xd4>
    80005644:	6480                	ld	s0,8(s1)
    80005646:	1429                	addi	s0,s0,-22
    80005648:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    8000564c:	fc0fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(satp, 0x0);
    80005650:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005654:	08200593          	li	a1,130
    80005658:	0002a617          	auipc	a2,0x2a
    8000565c:	a2860613          	addi	a2,a2,-1496 # 8002f080 <__func__.0+0x1198>
    80005660:	00029517          	auipc	a0,0x29
    80005664:	b8050513          	addi	a0,a0,-1152 # 8002e1e0 <__func__.0+0x2f8>
    80005668:	5c3250ef          	jal	8002b42a <printf>
    8000566c:	00053797          	auipc	a5,0x53
    80005670:	9a57c783          	lbu	a5,-1627(a5) # 80058011 <excpt+0x1>
    80005674:	00029597          	auipc	a1,0x29
    80005678:	b4458593          	addi	a1,a1,-1212 # 8002e1b8 <__func__.0+0x2d0>
    8000567c:	cf89                	beqz	a5,80005696 <virtual_instruction_4+0x11e>
    8000567e:	6498                	ld	a4,8(s1)
    80005680:	47d9                	li	a5,22
    80005682:	00029597          	auipc	a1,0x29
    80005686:	b2658593          	addi	a1,a1,-1242 # 8002e1a8 <__func__.0+0x2c0>
    8000568a:	00f70663          	beq	a4,a5,80005696 <virtual_instruction_4+0x11e>
    8000568e:	00029597          	auipc	a1,0x29
    80005692:	b2a58593          	addi	a1,a1,-1238 # 8002e1b8 <__func__.0+0x2d0>
    80005696:	00029517          	auipc	a0,0x29
    8000569a:	b6250513          	addi	a0,a0,-1182 # 8002e1f8 <__func__.0+0x310>
    8000569e:	58d250ef          	jal	8002b42a <printf>
    800056a2:	00053797          	auipc	a5,0x53
    800056a6:	96f7c783          	lbu	a5,-1681(a5) # 80058011 <excpt+0x1>
    800056aa:	c789                	beqz	a5,800056b4 <virtual_instruction_4+0x13c>
    800056ac:	6498                	ld	a4,8(s1)
    800056ae:	47d9                	li	a5,22
    800056b0:	00f70c63          	beq	a4,a5,800056c8 <virtual_instruction_4+0x150>
    800056b4:	00029517          	auipc	a0,0x29
    800056b8:	b4c50513          	addi	a0,a0,-1204 # 8002e200 <__func__.0+0x318>
    800056bc:	56f250ef          	jal	8002b42a <printf>
    800056c0:	02900513          	li	a0,41
    800056c4:	255240ef          	jal	8002a118 <putchar>
    800056c8:	4529                	li	a0,10
    800056ca:	24f240ef          	jal	8002a118 <putchar>
    800056ce:	c015                	beqz	s0,800056f2 <virtual_instruction_4+0x17a>
    800056d0:	00053417          	auipc	s0,0x53
    800056d4:	94144403          	lbu	s0,-1727(s0) # 80058011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    800056d8:	00029597          	auipc	a1,0x29
    800056dc:	ae058593          	addi	a1,a1,-1312 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800056e0:	cc11                	beqz	s0,800056fc <virtual_instruction_4+0x184>
    800056e2:	6498                	ld	a4,8(s1)
    800056e4:	47d9                	li	a5,22
    TEST_END();
    800056e6:	00029597          	auipc	a1,0x29
    800056ea:	ac258593          	addi	a1,a1,-1342 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800056ee:	00f70763          	beq	a4,a5,800056fc <virtual_instruction_4+0x184>
    800056f2:	4401                	li	s0,0
    TEST_END();
    800056f4:	00029597          	auipc	a1,0x29
    800056f8:	ac458593          	addi	a1,a1,-1340 # 8002e1b8 <__func__.0+0x2d0>
    800056fc:	00029517          	auipc	a0,0x29
    80005700:	b6450513          	addi	a0,a0,-1180 # 8002e260 <__func__.0+0x378>
    80005704:	527250ef          	jal	8002b42a <printf>
    80005708:	4511                	li	a0,4
    8000570a:	ffefb0ef          	jal	80000f08 <goto_priv>
    8000570e:	916fc0ef          	jal	80001824 <reset_state>
}
    80005712:	60e2                	ld	ra,24(sp)
    80005714:	8522                	mv	a0,s0
    80005716:	6442                	ld	s0,16(sp)
    80005718:	64a2                	ld	s1,8(sp)
    8000571a:	6105                	addi	sp,sp,32
    8000571c:	8082                	ret

000000008000571e <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    8000571e:	1101                	addi	sp,sp,-32

    TEST_START();
    80005720:	00027597          	auipc	a1,0x27
    80005724:	d1858593          	addi	a1,a1,-744 # 8002c438 <__func__.7>
    80005728:	00029517          	auipc	a0,0x29
    8000572c:	aa050513          	addi	a0,a0,-1376 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    80005730:	ec06                	sd	ra,24(sp)
    80005732:	e822                	sd	s0,16(sp)
    80005734:	e426                	sd	s1,8(sp)
    TEST_START();
    80005736:	4f5250ef          	jal	8002b42a <printf>
    8000573a:	4529                	li	a0,10
    8000573c:	1dd240ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80005740:	4511                	li	a0,4
    80005742:	fc6fb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80005746:	002007b7          	lui	a5,0x200
    8000574a:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8000574e:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    80005752:	4509                	li	a0,2
    80005754:	fb4fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005758:	eb4fb0ef          	jal	80000e0c <test_setup_except_function>
    asm("wfi");
    8000575c:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005760:	08200593          	li	a1,130
    80005764:	0002a617          	auipc	a2,0x2a
    80005768:	96460613          	addi	a2,a2,-1692 # 8002f0c8 <__func__.0+0x11e0>
    8000576c:	00029517          	auipc	a0,0x29
    80005770:	a7450513          	addi	a0,a0,-1420 # 8002e1e0 <__func__.0+0x2f8>
    80005774:	4b7250ef          	jal	8002b42a <printf>
    80005778:	00053797          	auipc	a5,0x53
    8000577c:	8997c783          	lbu	a5,-1895(a5) # 80058011 <excpt+0x1>
    80005780:	00053497          	auipc	s1,0x53
    80005784:	89048493          	addi	s1,s1,-1904 # 80058010 <excpt>
    80005788:	00029597          	auipc	a1,0x29
    8000578c:	a3058593          	addi	a1,a1,-1488 # 8002e1b8 <__func__.0+0x2d0>
    80005790:	cf89                	beqz	a5,800057aa <virtual_instruction_5+0x8c>
    80005792:	6498                	ld	a4,8(s1)
    80005794:	47d9                	li	a5,22
    80005796:	00029597          	auipc	a1,0x29
    8000579a:	a1258593          	addi	a1,a1,-1518 # 8002e1a8 <__func__.0+0x2c0>
    8000579e:	00f70663          	beq	a4,a5,800057aa <virtual_instruction_5+0x8c>
    800057a2:	00029597          	auipc	a1,0x29
    800057a6:	a1658593          	addi	a1,a1,-1514 # 8002e1b8 <__func__.0+0x2d0>
    800057aa:	00029517          	auipc	a0,0x29
    800057ae:	a4e50513          	addi	a0,a0,-1458 # 8002e1f8 <__func__.0+0x310>
    800057b2:	479250ef          	jal	8002b42a <printf>
    800057b6:	00053797          	auipc	a5,0x53
    800057ba:	85b7c783          	lbu	a5,-1957(a5) # 80058011 <excpt+0x1>
    800057be:	c789                	beqz	a5,800057c8 <virtual_instruction_5+0xaa>
    800057c0:	6498                	ld	a4,8(s1)
    800057c2:	47d9                	li	a5,22
    800057c4:	00f70c63          	beq	a4,a5,800057dc <virtual_instruction_5+0xbe>
    800057c8:	00029517          	auipc	a0,0x29
    800057cc:	a3850513          	addi	a0,a0,-1480 # 8002e200 <__func__.0+0x318>
    800057d0:	45b250ef          	jal	8002b42a <printf>
    800057d4:	02900513          	li	a0,41
    800057d8:	141240ef          	jal	8002a118 <putchar>
    800057dc:	4529                	li	a0,10
    800057de:	13b240ef          	jal	8002a118 <putchar>
    800057e2:	00053417          	auipc	s0,0x53
    800057e6:	82f44403          	lbu	s0,-2001(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    800057ea:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800057ec:	c409                	beqz	s0,800057f6 <virtual_instruction_5+0xd8>
    800057ee:	6498                	ld	a4,8(s1)
    800057f0:	47d9                	li	a5,22
    800057f2:	04f70263          	beq	a4,a5,80005836 <virtual_instruction_5+0x118>
    goto_priv(PRIV_M);
    800057f6:	f12fb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800057fa:	343025f3          	csrr	a1,mtval
    800057fe:	0002a517          	auipc	a0,0x2a
    80005802:	91250513          	addi	a0,a0,-1774 # 8002f110 <__func__.0+0x1228>
    80005806:	425250ef          	jal	8002b42a <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000580a:	4401                	li	s0,0

    TEST_END();
    8000580c:	00029597          	auipc	a1,0x29
    80005810:	9ac58593          	addi	a1,a1,-1620 # 8002e1b8 <__func__.0+0x2d0>
    80005814:	00029517          	auipc	a0,0x29
    80005818:	a4c50513          	addi	a0,a0,-1460 # 8002e260 <__func__.0+0x378>
    8000581c:	40f250ef          	jal	8002b42a <printf>
    80005820:	4511                	li	a0,4
    80005822:	ee6fb0ef          	jal	80000f08 <goto_priv>
    80005826:	ffffb0ef          	jal	80001824 <reset_state>
}
    8000582a:	60e2                	ld	ra,24(sp)
    8000582c:	8522                	mv	a0,s0
    8000582e:	6442                	ld	s0,16(sp)
    80005830:	64a2                	ld	s1,8(sp)
    80005832:	6105                	addi	sp,sp,32
    80005834:	8082                	ret
    goto_priv(PRIV_M);
    80005836:	ed2fb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    8000583a:	343025f3          	csrr	a1,mtval
    8000583e:	0002a517          	auipc	a0,0x2a
    80005842:	8d250513          	addi	a0,a0,-1838 # 8002f110 <__func__.0+0x1228>
    80005846:	3e5250ef          	jal	8002b42a <printf>
    TEST_END();
    8000584a:	00029597          	auipc	a1,0x29
    8000584e:	95e58593          	addi	a1,a1,-1698 # 8002e1a8 <__func__.0+0x2c0>
    80005852:	b7c9                	j	80005814 <virtual_instruction_5+0xf6>

0000000080005854 <virtual_instruction_6>:


bool virtual_instruction_6() {
    80005854:	1101                	addi	sp,sp,-32

    TEST_START();
    80005856:	00027597          	auipc	a1,0x27
    8000585a:	bfa58593          	addi	a1,a1,-1030 # 8002c450 <__func__.6>
    8000585e:	00029517          	auipc	a0,0x29
    80005862:	96a50513          	addi	a0,a0,-1686 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    80005866:	ec06                	sd	ra,24(sp)
    80005868:	e822                	sd	s0,16(sp)
    8000586a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000586c:	3bf250ef          	jal	8002b42a <printf>
    80005870:	4529                	li	a0,10
    80005872:	0a7240ef          	jal	8002a118 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005876:	4501                	li	a0,0
    80005878:	e90fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000587c:	d90fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005880:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80005884:	08200593          	li	a1,130
    80005888:	0002a617          	auipc	a2,0x2a
    8000588c:	89060613          	addi	a2,a2,-1904 # 8002f118 <__func__.0+0x1230>
    80005890:	00029517          	auipc	a0,0x29
    80005894:	95050513          	addi	a0,a0,-1712 # 8002e1e0 <__func__.0+0x2f8>
    80005898:	393250ef          	jal	8002b42a <printf>
    8000589c:	00052797          	auipc	a5,0x52
    800058a0:	7757c783          	lbu	a5,1909(a5) # 80058011 <excpt+0x1>
    800058a4:	00052497          	auipc	s1,0x52
    800058a8:	76c48493          	addi	s1,s1,1900 # 80058010 <excpt>
    800058ac:	00029597          	auipc	a1,0x29
    800058b0:	90c58593          	addi	a1,a1,-1780 # 8002e1b8 <__func__.0+0x2d0>
    800058b4:	cf89                	beqz	a5,800058ce <virtual_instruction_6+0x7a>
    800058b6:	6498                	ld	a4,8(s1)
    800058b8:	47d9                	li	a5,22
    800058ba:	00029597          	auipc	a1,0x29
    800058be:	8ee58593          	addi	a1,a1,-1810 # 8002e1a8 <__func__.0+0x2c0>
    800058c2:	00f70663          	beq	a4,a5,800058ce <virtual_instruction_6+0x7a>
    800058c6:	00029597          	auipc	a1,0x29
    800058ca:	8f258593          	addi	a1,a1,-1806 # 8002e1b8 <__func__.0+0x2d0>
    800058ce:	00029517          	auipc	a0,0x29
    800058d2:	92a50513          	addi	a0,a0,-1750 # 8002e1f8 <__func__.0+0x310>
    800058d6:	355250ef          	jal	8002b42a <printf>
    800058da:	00052797          	auipc	a5,0x52
    800058de:	7377c783          	lbu	a5,1847(a5) # 80058011 <excpt+0x1>
    800058e2:	c789                	beqz	a5,800058ec <virtual_instruction_6+0x98>
    800058e4:	6498                	ld	a4,8(s1)
    800058e6:	47d9                	li	a5,22
    800058e8:	00f70c63          	beq	a4,a5,80005900 <virtual_instruction_6+0xac>
    800058ec:	00029517          	auipc	a0,0x29
    800058f0:	91450513          	addi	a0,a0,-1772 # 8002e200 <__func__.0+0x318>
    800058f4:	337250ef          	jal	8002b42a <printf>
    800058f8:	02900513          	li	a0,41
    800058fc:	01d240ef          	jal	8002a118 <putchar>
    80005900:	4529                	li	a0,10
    80005902:	017240ef          	jal	8002a118 <putchar>
    80005906:	00052797          	auipc	a5,0x52
    8000590a:	70b7c783          	lbu	a5,1803(a5) # 80058011 <excpt+0x1>
    8000590e:	4401                	li	s0,0
    80005910:	c789                	beqz	a5,8000591a <virtual_instruction_6+0xc6>
    80005912:	6480                	ld	s0,8(s1)
    80005914:	1429                	addi	s0,s0,-22
    80005916:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    8000591a:	4501                	li	a0,0
    8000591c:	decfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005920:	cecfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005924:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005928:	08200593          	li	a1,130
    8000592c:	0002a617          	auipc	a2,0x2a
    80005930:	82c60613          	addi	a2,a2,-2004 # 8002f158 <__func__.0+0x1270>
    80005934:	00029517          	auipc	a0,0x29
    80005938:	8ac50513          	addi	a0,a0,-1876 # 8002e1e0 <__func__.0+0x2f8>
    8000593c:	2ef250ef          	jal	8002b42a <printf>
    80005940:	00052797          	auipc	a5,0x52
    80005944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    80005948:	00029597          	auipc	a1,0x29
    8000594c:	87058593          	addi	a1,a1,-1936 # 8002e1b8 <__func__.0+0x2d0>
    80005950:	cf89                	beqz	a5,8000596a <virtual_instruction_6+0x116>
    80005952:	6498                	ld	a4,8(s1)
    80005954:	47d9                	li	a5,22
    80005956:	00029597          	auipc	a1,0x29
    8000595a:	85258593          	addi	a1,a1,-1966 # 8002e1a8 <__func__.0+0x2c0>
    8000595e:	00f70663          	beq	a4,a5,8000596a <virtual_instruction_6+0x116>
    80005962:	00029597          	auipc	a1,0x29
    80005966:	85658593          	addi	a1,a1,-1962 # 8002e1b8 <__func__.0+0x2d0>
    8000596a:	00029517          	auipc	a0,0x29
    8000596e:	88e50513          	addi	a0,a0,-1906 # 8002e1f8 <__func__.0+0x310>
    80005972:	2b9250ef          	jal	8002b42a <printf>
    80005976:	00052797          	auipc	a5,0x52
    8000597a:	69b7c783          	lbu	a5,1691(a5) # 80058011 <excpt+0x1>
    8000597e:	c789                	beqz	a5,80005988 <virtual_instruction_6+0x134>
    80005980:	6498                	ld	a4,8(s1)
    80005982:	47d9                	li	a5,22
    80005984:	00f70c63          	beq	a4,a5,8000599c <virtual_instruction_6+0x148>
    80005988:	00029517          	auipc	a0,0x29
    8000598c:	87850513          	addi	a0,a0,-1928 # 8002e200 <__func__.0+0x318>
    80005990:	29b250ef          	jal	8002b42a <printf>
    80005994:	02900513          	li	a0,41
    80005998:	780240ef          	jal	8002a118 <putchar>
    8000599c:	4529                	li	a0,10
    8000599e:	77a240ef          	jal	8002a118 <putchar>
    800059a2:	c801                	beqz	s0,800059b2 <virtual_instruction_6+0x15e>
    800059a4:	00052797          	auipc	a5,0x52
    800059a8:	66d7c783          	lbu	a5,1645(a5) # 80058011 <excpt+0x1>
    800059ac:	4401                	li	s0,0
    800059ae:	0c079e63          	bnez	a5,80005a8a <virtual_instruction_6+0x236>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    800059b2:	4501                	li	a0,0
    800059b4:	d54fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800059b8:	c54fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800059bc:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059c0:	08200593          	li	a1,130
    800059c4:	00029617          	auipc	a2,0x29
    800059c8:	7d460613          	addi	a2,a2,2004 # 8002f198 <__func__.0+0x12b0>
    800059cc:	00029517          	auipc	a0,0x29
    800059d0:	81450513          	addi	a0,a0,-2028 # 8002e1e0 <__func__.0+0x2f8>
    800059d4:	257250ef          	jal	8002b42a <printf>
    800059d8:	00052797          	auipc	a5,0x52
    800059dc:	6397c783          	lbu	a5,1593(a5) # 80058011 <excpt+0x1>
    800059e0:	00028597          	auipc	a1,0x28
    800059e4:	7d858593          	addi	a1,a1,2008 # 8002e1b8 <__func__.0+0x2d0>
    800059e8:	cf89                	beqz	a5,80005a02 <virtual_instruction_6+0x1ae>
    800059ea:	6498                	ld	a4,8(s1)
    800059ec:	47d9                	li	a5,22
    800059ee:	00028597          	auipc	a1,0x28
    800059f2:	7ba58593          	addi	a1,a1,1978 # 8002e1a8 <__func__.0+0x2c0>
    800059f6:	00f70663          	beq	a4,a5,80005a02 <virtual_instruction_6+0x1ae>
    800059fa:	00028597          	auipc	a1,0x28
    800059fe:	7be58593          	addi	a1,a1,1982 # 8002e1b8 <__func__.0+0x2d0>
    80005a02:	00028517          	auipc	a0,0x28
    80005a06:	7f650513          	addi	a0,a0,2038 # 8002e1f8 <__func__.0+0x310>
    80005a0a:	221250ef          	jal	8002b42a <printf>
    80005a0e:	00052797          	auipc	a5,0x52
    80005a12:	6037c783          	lbu	a5,1539(a5) # 80058011 <excpt+0x1>
    80005a16:	c789                	beqz	a5,80005a20 <virtual_instruction_6+0x1cc>
    80005a18:	6498                	ld	a4,8(s1)
    80005a1a:	47d9                	li	a5,22
    80005a1c:	00f70c63          	beq	a4,a5,80005a34 <virtual_instruction_6+0x1e0>
    80005a20:	00028517          	auipc	a0,0x28
    80005a24:	7e050513          	addi	a0,a0,2016 # 8002e200 <__func__.0+0x318>
    80005a28:	203250ef          	jal	8002b42a <printf>
    80005a2c:	02900513          	li	a0,41
    80005a30:	6e8240ef          	jal	8002a118 <putchar>
    80005a34:	4529                	li	a0,10
    80005a36:	6e2240ef          	jal	8002a118 <putchar>
    80005a3a:	c015                	beqz	s0,80005a5e <virtual_instruction_6+0x20a>
    80005a3c:	00052417          	auipc	s0,0x52
    80005a40:	5d544403          	lbu	s0,1493(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005a44:	00028597          	auipc	a1,0x28
    80005a48:	77458593          	addi	a1,a1,1908 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a4c:	cc11                	beqz	s0,80005a68 <virtual_instruction_6+0x214>
    80005a4e:	6498                	ld	a4,8(s1)
    80005a50:	47d9                	li	a5,22
    TEST_END();
    80005a52:	00028597          	auipc	a1,0x28
    80005a56:	75658593          	addi	a1,a1,1878 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a5a:	00f70763          	beq	a4,a5,80005a68 <virtual_instruction_6+0x214>
    80005a5e:	4401                	li	s0,0
    TEST_END();
    80005a60:	00028597          	auipc	a1,0x28
    80005a64:	75858593          	addi	a1,a1,1880 # 8002e1b8 <__func__.0+0x2d0>
    80005a68:	00028517          	auipc	a0,0x28
    80005a6c:	7f850513          	addi	a0,a0,2040 # 8002e260 <__func__.0+0x378>
    80005a70:	1bb250ef          	jal	8002b42a <printf>
    80005a74:	4511                	li	a0,4
    80005a76:	c92fb0ef          	jal	80000f08 <goto_priv>
    80005a7a:	dabfb0ef          	jal	80001824 <reset_state>
}
    80005a7e:	60e2                	ld	ra,24(sp)
    80005a80:	8522                	mv	a0,s0
    80005a82:	6442                	ld	s0,16(sp)
    80005a84:	64a2                	ld	s1,8(sp)
    80005a86:	6105                	addi	sp,sp,32
    80005a88:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005a8a:	6480                	ld	s0,8(s1)
    80005a8c:	1429                	addi	s0,s0,-22
    80005a8e:	00143413          	seqz	s0,s0
    80005a92:	b705                	j	800059b2 <virtual_instruction_6+0x15e>

0000000080005a94 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005a94:	1101                	addi	sp,sp,-32

    TEST_START();
    80005a96:	00027597          	auipc	a1,0x27
    80005a9a:	9d258593          	addi	a1,a1,-1582 # 8002c468 <__func__.5>
    80005a9e:	00028517          	auipc	a0,0x28
    80005aa2:	72a50513          	addi	a0,a0,1834 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    80005aa6:	ec06                	sd	ra,24(sp)
    80005aa8:	e822                	sd	s0,16(sp)
    80005aaa:	e426                	sd	s1,8(sp)
    TEST_START();
    80005aac:	17f250ef          	jal	8002b42a <printf>
    80005ab0:	4529                	li	a0,10
    80005ab2:	666240ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_VU);
    80005ab6:	4501                	li	a0,0
    80005ab8:	c50fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005abc:	b50fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005ac0:	4781                	li	a5,0
    80005ac2:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005ac6:	08200593          	li	a1,130
    80005aca:	00029617          	auipc	a2,0x29
    80005ace:	71e60613          	addi	a2,a2,1822 # 8002f1e8 <__func__.0+0x1300>
    80005ad2:	00028517          	auipc	a0,0x28
    80005ad6:	70e50513          	addi	a0,a0,1806 # 8002e1e0 <__func__.0+0x2f8>
    80005ada:	151250ef          	jal	8002b42a <printf>
    80005ade:	00052797          	auipc	a5,0x52
    80005ae2:	5337c783          	lbu	a5,1331(a5) # 80058011 <excpt+0x1>
    80005ae6:	00052497          	auipc	s1,0x52
    80005aea:	52a48493          	addi	s1,s1,1322 # 80058010 <excpt>
    80005aee:	00028597          	auipc	a1,0x28
    80005af2:	6ca58593          	addi	a1,a1,1738 # 8002e1b8 <__func__.0+0x2d0>
    80005af6:	cf89                	beqz	a5,80005b10 <virtual_instruction_7+0x7c>
    80005af8:	6498                	ld	a4,8(s1)
    80005afa:	47d9                	li	a5,22
    80005afc:	00028597          	auipc	a1,0x28
    80005b00:	6ac58593          	addi	a1,a1,1708 # 8002e1a8 <__func__.0+0x2c0>
    80005b04:	00f70663          	beq	a4,a5,80005b10 <virtual_instruction_7+0x7c>
    80005b08:	00028597          	auipc	a1,0x28
    80005b0c:	6b058593          	addi	a1,a1,1712 # 8002e1b8 <__func__.0+0x2d0>
    80005b10:	00028517          	auipc	a0,0x28
    80005b14:	6e850513          	addi	a0,a0,1768 # 8002e1f8 <__func__.0+0x310>
    80005b18:	113250ef          	jal	8002b42a <printf>
    80005b1c:	00052797          	auipc	a5,0x52
    80005b20:	4f57c783          	lbu	a5,1269(a5) # 80058011 <excpt+0x1>
    80005b24:	c789                	beqz	a5,80005b2e <virtual_instruction_7+0x9a>
    80005b26:	6498                	ld	a4,8(s1)
    80005b28:	47d9                	li	a5,22
    80005b2a:	00f70c63          	beq	a4,a5,80005b42 <virtual_instruction_7+0xae>
    80005b2e:	00028517          	auipc	a0,0x28
    80005b32:	6d250513          	addi	a0,a0,1746 # 8002e200 <__func__.0+0x318>
    80005b36:	0f5250ef          	jal	8002b42a <printf>
    80005b3a:	02900513          	li	a0,41
    80005b3e:	5da240ef          	jal	8002a118 <putchar>
    80005b42:	4529                	li	a0,10
    80005b44:	5d4240ef          	jal	8002a118 <putchar>
    80005b48:	00052797          	auipc	a5,0x52
    80005b4c:	4c97c783          	lbu	a5,1225(a5) # 80058011 <excpt+0x1>
    80005b50:	4401                	li	s0,0
    80005b52:	c789                	beqz	a5,80005b5c <virtual_instruction_7+0xc8>
    80005b54:	6480                	ld	s0,8(s1)
    80005b56:	1429                	addi	s0,s0,-22
    80005b58:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b5c:	4501                	li	a0,0
    80005b5e:	baafb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b62:	aaafb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005b66:	4781                	li	a5,0
    80005b68:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005b6c:	08200593          	li	a1,130
    80005b70:	00029617          	auipc	a2,0x29
    80005b74:	6a860613          	addi	a2,a2,1704 # 8002f218 <__func__.0+0x1330>
    80005b78:	00028517          	auipc	a0,0x28
    80005b7c:	66850513          	addi	a0,a0,1640 # 8002e1e0 <__func__.0+0x2f8>
    80005b80:	0ab250ef          	jal	8002b42a <printf>
    80005b84:	00052797          	auipc	a5,0x52
    80005b88:	48d7c783          	lbu	a5,1165(a5) # 80058011 <excpt+0x1>
    80005b8c:	00028597          	auipc	a1,0x28
    80005b90:	62c58593          	addi	a1,a1,1580 # 8002e1b8 <__func__.0+0x2d0>
    80005b94:	cf89                	beqz	a5,80005bae <virtual_instruction_7+0x11a>
    80005b96:	6498                	ld	a4,8(s1)
    80005b98:	47d9                	li	a5,22
    80005b9a:	00028597          	auipc	a1,0x28
    80005b9e:	60e58593          	addi	a1,a1,1550 # 8002e1a8 <__func__.0+0x2c0>
    80005ba2:	00f70663          	beq	a4,a5,80005bae <virtual_instruction_7+0x11a>
    80005ba6:	00028597          	auipc	a1,0x28
    80005baa:	61258593          	addi	a1,a1,1554 # 8002e1b8 <__func__.0+0x2d0>
    80005bae:	00028517          	auipc	a0,0x28
    80005bb2:	64a50513          	addi	a0,a0,1610 # 8002e1f8 <__func__.0+0x310>
    80005bb6:	075250ef          	jal	8002b42a <printf>
    80005bba:	00052797          	auipc	a5,0x52
    80005bbe:	4577c783          	lbu	a5,1111(a5) # 80058011 <excpt+0x1>
    80005bc2:	c789                	beqz	a5,80005bcc <virtual_instruction_7+0x138>
    80005bc4:	6498                	ld	a4,8(s1)
    80005bc6:	47d9                	li	a5,22
    80005bc8:	00f70c63          	beq	a4,a5,80005be0 <virtual_instruction_7+0x14c>
    80005bcc:	00028517          	auipc	a0,0x28
    80005bd0:	63450513          	addi	a0,a0,1588 # 8002e200 <__func__.0+0x318>
    80005bd4:	057250ef          	jal	8002b42a <printf>
    80005bd8:	02900513          	li	a0,41
    80005bdc:	53c240ef          	jal	8002a118 <putchar>
    80005be0:	4529                	li	a0,10
    80005be2:	536240ef          	jal	8002a118 <putchar>
    80005be6:	c801                	beqz	s0,80005bf6 <virtual_instruction_7+0x162>
    80005be8:	00052797          	auipc	a5,0x52
    80005bec:	4297c783          	lbu	a5,1065(a5) # 80058011 <excpt+0x1>
    80005bf0:	4401                	li	s0,0
    80005bf2:	4c079d63          	bnez	a5,800060cc <virtual_instruction_7+0x638>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005bf6:	4501                	li	a0,0
    80005bf8:	b10fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005bfc:	a10fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005c00:	4781                	li	a5,0
    80005c02:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005c06:	08200593          	li	a1,130
    80005c0a:	00029617          	auipc	a2,0x29
    80005c0e:	63e60613          	addi	a2,a2,1598 # 8002f248 <__func__.0+0x1360>
    80005c12:	00028517          	auipc	a0,0x28
    80005c16:	5ce50513          	addi	a0,a0,1486 # 8002e1e0 <__func__.0+0x2f8>
    80005c1a:	011250ef          	jal	8002b42a <printf>
    80005c1e:	00052797          	auipc	a5,0x52
    80005c22:	3f37c783          	lbu	a5,1011(a5) # 80058011 <excpt+0x1>
    80005c26:	00028597          	auipc	a1,0x28
    80005c2a:	59258593          	addi	a1,a1,1426 # 8002e1b8 <__func__.0+0x2d0>
    80005c2e:	cf89                	beqz	a5,80005c48 <virtual_instruction_7+0x1b4>
    80005c30:	6498                	ld	a4,8(s1)
    80005c32:	47d9                	li	a5,22
    80005c34:	00028597          	auipc	a1,0x28
    80005c38:	57458593          	addi	a1,a1,1396 # 8002e1a8 <__func__.0+0x2c0>
    80005c3c:	00f70663          	beq	a4,a5,80005c48 <virtual_instruction_7+0x1b4>
    80005c40:	00028597          	auipc	a1,0x28
    80005c44:	57858593          	addi	a1,a1,1400 # 8002e1b8 <__func__.0+0x2d0>
    80005c48:	00028517          	auipc	a0,0x28
    80005c4c:	5b050513          	addi	a0,a0,1456 # 8002e1f8 <__func__.0+0x310>
    80005c50:	7da250ef          	jal	8002b42a <printf>
    80005c54:	00052797          	auipc	a5,0x52
    80005c58:	3bd7c783          	lbu	a5,957(a5) # 80058011 <excpt+0x1>
    80005c5c:	c789                	beqz	a5,80005c66 <virtual_instruction_7+0x1d2>
    80005c5e:	6498                	ld	a4,8(s1)
    80005c60:	47d9                	li	a5,22
    80005c62:	00f70c63          	beq	a4,a5,80005c7a <virtual_instruction_7+0x1e6>
    80005c66:	00028517          	auipc	a0,0x28
    80005c6a:	59a50513          	addi	a0,a0,1434 # 8002e200 <__func__.0+0x318>
    80005c6e:	7bc250ef          	jal	8002b42a <printf>
    80005c72:	02900513          	li	a0,41
    80005c76:	4a2240ef          	jal	8002a118 <putchar>
    80005c7a:	4529                	li	a0,10
    80005c7c:	49c240ef          	jal	8002a118 <putchar>
    80005c80:	c801                	beqz	s0,80005c90 <virtual_instruction_7+0x1fc>
    80005c82:	00052797          	auipc	a5,0x52
    80005c86:	38f7c783          	lbu	a5,911(a5) # 80058011 <excpt+0x1>
    80005c8a:	4401                	li	s0,0
    80005c8c:	44079a63          	bnez	a5,800060e0 <virtual_instruction_7+0x64c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c90:	4501                	li	a0,0
    80005c92:	a76fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c96:	976fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005c9a:	4781                	li	a5,0
    80005c9c:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005ca0:	08200593          	li	a1,130
    80005ca4:	00029617          	auipc	a2,0x29
    80005ca8:	5d460613          	addi	a2,a2,1492 # 8002f278 <__func__.0+0x1390>
    80005cac:	00028517          	auipc	a0,0x28
    80005cb0:	53450513          	addi	a0,a0,1332 # 8002e1e0 <__func__.0+0x2f8>
    80005cb4:	776250ef          	jal	8002b42a <printf>
    80005cb8:	00052797          	auipc	a5,0x52
    80005cbc:	3597c783          	lbu	a5,857(a5) # 80058011 <excpt+0x1>
    80005cc0:	00028597          	auipc	a1,0x28
    80005cc4:	4f858593          	addi	a1,a1,1272 # 8002e1b8 <__func__.0+0x2d0>
    80005cc8:	cf89                	beqz	a5,80005ce2 <virtual_instruction_7+0x24e>
    80005cca:	6498                	ld	a4,8(s1)
    80005ccc:	47d9                	li	a5,22
    80005cce:	00028597          	auipc	a1,0x28
    80005cd2:	4da58593          	addi	a1,a1,1242 # 8002e1a8 <__func__.0+0x2c0>
    80005cd6:	00f70663          	beq	a4,a5,80005ce2 <virtual_instruction_7+0x24e>
    80005cda:	00028597          	auipc	a1,0x28
    80005cde:	4de58593          	addi	a1,a1,1246 # 8002e1b8 <__func__.0+0x2d0>
    80005ce2:	00028517          	auipc	a0,0x28
    80005ce6:	51650513          	addi	a0,a0,1302 # 8002e1f8 <__func__.0+0x310>
    80005cea:	740250ef          	jal	8002b42a <printf>
    80005cee:	00052797          	auipc	a5,0x52
    80005cf2:	3237c783          	lbu	a5,803(a5) # 80058011 <excpt+0x1>
    80005cf6:	c789                	beqz	a5,80005d00 <virtual_instruction_7+0x26c>
    80005cf8:	6498                	ld	a4,8(s1)
    80005cfa:	47d9                	li	a5,22
    80005cfc:	00f70c63          	beq	a4,a5,80005d14 <virtual_instruction_7+0x280>
    80005d00:	00028517          	auipc	a0,0x28
    80005d04:	50050513          	addi	a0,a0,1280 # 8002e200 <__func__.0+0x318>
    80005d08:	722250ef          	jal	8002b42a <printf>
    80005d0c:	02900513          	li	a0,41
    80005d10:	408240ef          	jal	8002a118 <putchar>
    80005d14:	4529                	li	a0,10
    80005d16:	402240ef          	jal	8002a118 <putchar>
    80005d1a:	c801                	beqz	s0,80005d2a <virtual_instruction_7+0x296>
    80005d1c:	00052797          	auipc	a5,0x52
    80005d20:	2f57c783          	lbu	a5,757(a5) # 80058011 <excpt+0x1>
    80005d24:	4401                	li	s0,0
    80005d26:	3a079863          	bnez	a5,800060d6 <virtual_instruction_7+0x642>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d2a:	4501                	li	a0,0
    80005d2c:	9dcfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d30:	8dcfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005d34:	4781                	li	a5,0
    80005d36:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005d3a:	08200593          	li	a1,130
    80005d3e:	00029617          	auipc	a2,0x29
    80005d42:	56a60613          	addi	a2,a2,1386 # 8002f2a8 <__func__.0+0x13c0>
    80005d46:	00028517          	auipc	a0,0x28
    80005d4a:	49a50513          	addi	a0,a0,1178 # 8002e1e0 <__func__.0+0x2f8>
    80005d4e:	6dc250ef          	jal	8002b42a <printf>
    80005d52:	00052797          	auipc	a5,0x52
    80005d56:	2bf7c783          	lbu	a5,703(a5) # 80058011 <excpt+0x1>
    80005d5a:	00028597          	auipc	a1,0x28
    80005d5e:	45e58593          	addi	a1,a1,1118 # 8002e1b8 <__func__.0+0x2d0>
    80005d62:	cf89                	beqz	a5,80005d7c <virtual_instruction_7+0x2e8>
    80005d64:	6498                	ld	a4,8(s1)
    80005d66:	47d9                	li	a5,22
    80005d68:	00028597          	auipc	a1,0x28
    80005d6c:	44058593          	addi	a1,a1,1088 # 8002e1a8 <__func__.0+0x2c0>
    80005d70:	00f70663          	beq	a4,a5,80005d7c <virtual_instruction_7+0x2e8>
    80005d74:	00028597          	auipc	a1,0x28
    80005d78:	44458593          	addi	a1,a1,1092 # 8002e1b8 <__func__.0+0x2d0>
    80005d7c:	00028517          	auipc	a0,0x28
    80005d80:	47c50513          	addi	a0,a0,1148 # 8002e1f8 <__func__.0+0x310>
    80005d84:	6a6250ef          	jal	8002b42a <printf>
    80005d88:	00052797          	auipc	a5,0x52
    80005d8c:	2897c783          	lbu	a5,649(a5) # 80058011 <excpt+0x1>
    80005d90:	c789                	beqz	a5,80005d9a <virtual_instruction_7+0x306>
    80005d92:	6498                	ld	a4,8(s1)
    80005d94:	47d9                	li	a5,22
    80005d96:	00f70c63          	beq	a4,a5,80005dae <virtual_instruction_7+0x31a>
    80005d9a:	00028517          	auipc	a0,0x28
    80005d9e:	46650513          	addi	a0,a0,1126 # 8002e200 <__func__.0+0x318>
    80005da2:	688250ef          	jal	8002b42a <printf>
    80005da6:	02900513          	li	a0,41
    80005daa:	36e240ef          	jal	8002a118 <putchar>
    80005dae:	4529                	li	a0,10
    80005db0:	368240ef          	jal	8002a118 <putchar>
    80005db4:	c801                	beqz	s0,80005dc4 <virtual_instruction_7+0x330>
    80005db6:	00052797          	auipc	a5,0x52
    80005dba:	25b7c783          	lbu	a5,603(a5) # 80058011 <excpt+0x1>
    80005dbe:	4401                	li	s0,0
    80005dc0:	32079a63          	bnez	a5,800060f4 <virtual_instruction_7+0x660>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dc4:	4501                	li	a0,0
    80005dc6:	942fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dca:	842fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005dce:	37ab77b7          	lui	a5,0x37ab7
    80005dd2:	078a                	slli	a5,a5,0x2
    80005dd4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005dd8:	4701                	li	a4,0
    80005dda:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005dde:	648c                	ld	a1,8(s1)
    80005de0:	00029517          	auipc	a0,0x29
    80005de4:	f6050513          	addi	a0,a0,-160 # 8002ed40 <__func__.0+0xe58>
    80005de8:	642250ef          	jal	8002b42a <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005dec:	08200593          	li	a1,130
    80005df0:	00029617          	auipc	a2,0x29
    80005df4:	4e860613          	addi	a2,a2,1256 # 8002f2d8 <__func__.0+0x13f0>
    80005df8:	00028517          	auipc	a0,0x28
    80005dfc:	3e850513          	addi	a0,a0,1000 # 8002e1e0 <__func__.0+0x2f8>
    80005e00:	62a250ef          	jal	8002b42a <printf>
    80005e04:	00052797          	auipc	a5,0x52
    80005e08:	20d7c783          	lbu	a5,525(a5) # 80058011 <excpt+0x1>
    80005e0c:	00028597          	auipc	a1,0x28
    80005e10:	3ac58593          	addi	a1,a1,940 # 8002e1b8 <__func__.0+0x2d0>
    80005e14:	cf89                	beqz	a5,80005e2e <virtual_instruction_7+0x39a>
    80005e16:	6498                	ld	a4,8(s1)
    80005e18:	47d9                	li	a5,22
    80005e1a:	00028597          	auipc	a1,0x28
    80005e1e:	38e58593          	addi	a1,a1,910 # 8002e1a8 <__func__.0+0x2c0>
    80005e22:	00f70663          	beq	a4,a5,80005e2e <virtual_instruction_7+0x39a>
    80005e26:	00028597          	auipc	a1,0x28
    80005e2a:	39258593          	addi	a1,a1,914 # 8002e1b8 <__func__.0+0x2d0>
    80005e2e:	00028517          	auipc	a0,0x28
    80005e32:	3ca50513          	addi	a0,a0,970 # 8002e1f8 <__func__.0+0x310>
    80005e36:	5f4250ef          	jal	8002b42a <printf>
    80005e3a:	00052797          	auipc	a5,0x52
    80005e3e:	1d77c783          	lbu	a5,471(a5) # 80058011 <excpt+0x1>
    80005e42:	c789                	beqz	a5,80005e4c <virtual_instruction_7+0x3b8>
    80005e44:	6498                	ld	a4,8(s1)
    80005e46:	47d9                	li	a5,22
    80005e48:	00f70c63          	beq	a4,a5,80005e60 <virtual_instruction_7+0x3cc>
    80005e4c:	00028517          	auipc	a0,0x28
    80005e50:	3b450513          	addi	a0,a0,948 # 8002e200 <__func__.0+0x318>
    80005e54:	5d6250ef          	jal	8002b42a <printf>
    80005e58:	02900513          	li	a0,41
    80005e5c:	2bc240ef          	jal	8002a118 <putchar>
    80005e60:	4529                	li	a0,10
    80005e62:	2b6240ef          	jal	8002a118 <putchar>
    80005e66:	c801                	beqz	s0,80005e76 <virtual_instruction_7+0x3e2>
    80005e68:	00052797          	auipc	a5,0x52
    80005e6c:	1a97c783          	lbu	a5,425(a5) # 80058011 <excpt+0x1>
    80005e70:	4401                	li	s0,0
    80005e72:	26079c63          	bnez	a5,800060ea <virtual_instruction_7+0x656>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e76:	4501                	li	a0,0
    80005e78:	890fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e7c:	f91fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005e80:	37ab77b7          	lui	a5,0x37ab7
    80005e84:	078a                	slli	a5,a5,0x2
    80005e86:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e8a:	4701                	li	a4,0
    80005e8c:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e90:	648c                	ld	a1,8(s1)
    80005e92:	00029517          	auipc	a0,0x29
    80005e96:	eae50513          	addi	a0,a0,-338 # 8002ed40 <__func__.0+0xe58>
    80005e9a:	590250ef          	jal	8002b42a <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005e9e:	08200593          	li	a1,130
    80005ea2:	00029617          	auipc	a2,0x29
    80005ea6:	43660613          	addi	a2,a2,1078 # 8002f2d8 <__func__.0+0x13f0>
    80005eaa:	00028517          	auipc	a0,0x28
    80005eae:	33650513          	addi	a0,a0,822 # 8002e1e0 <__func__.0+0x2f8>
    80005eb2:	578250ef          	jal	8002b42a <printf>
    80005eb6:	00052797          	auipc	a5,0x52
    80005eba:	15b7c783          	lbu	a5,347(a5) # 80058011 <excpt+0x1>
    80005ebe:	00028597          	auipc	a1,0x28
    80005ec2:	2fa58593          	addi	a1,a1,762 # 8002e1b8 <__func__.0+0x2d0>
    80005ec6:	cf89                	beqz	a5,80005ee0 <virtual_instruction_7+0x44c>
    80005ec8:	6498                	ld	a4,8(s1)
    80005eca:	47d9                	li	a5,22
    80005ecc:	00028597          	auipc	a1,0x28
    80005ed0:	2dc58593          	addi	a1,a1,732 # 8002e1a8 <__func__.0+0x2c0>
    80005ed4:	00f70663          	beq	a4,a5,80005ee0 <virtual_instruction_7+0x44c>
    80005ed8:	00028597          	auipc	a1,0x28
    80005edc:	2e058593          	addi	a1,a1,736 # 8002e1b8 <__func__.0+0x2d0>
    80005ee0:	00028517          	auipc	a0,0x28
    80005ee4:	31850513          	addi	a0,a0,792 # 8002e1f8 <__func__.0+0x310>
    80005ee8:	542250ef          	jal	8002b42a <printf>
    80005eec:	00052797          	auipc	a5,0x52
    80005ef0:	1257c783          	lbu	a5,293(a5) # 80058011 <excpt+0x1>
    80005ef4:	c789                	beqz	a5,80005efe <virtual_instruction_7+0x46a>
    80005ef6:	6498                	ld	a4,8(s1)
    80005ef8:	47d9                	li	a5,22
    80005efa:	00f70c63          	beq	a4,a5,80005f12 <virtual_instruction_7+0x47e>
    80005efe:	00028517          	auipc	a0,0x28
    80005f02:	30250513          	addi	a0,a0,770 # 8002e200 <__func__.0+0x318>
    80005f06:	524250ef          	jal	8002b42a <printf>
    80005f0a:	02900513          	li	a0,41
    80005f0e:	20a240ef          	jal	8002a118 <putchar>
    80005f12:	4529                	li	a0,10
    80005f14:	204240ef          	jal	8002a118 <putchar>
    80005f18:	c801                	beqz	s0,80005f28 <virtual_instruction_7+0x494>
    80005f1a:	00052797          	auipc	a5,0x52
    80005f1e:	0f77c783          	lbu	a5,247(a5) # 80058011 <excpt+0x1>
    80005f22:	4401                	li	s0,0
    80005f24:	1e079263          	bnez	a5,80006108 <virtual_instruction_7+0x674>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f28:	4501                	li	a0,0
    80005f2a:	fdffa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f2e:	edffa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005f32:	37ab77b7          	lui	a5,0x37ab7
    80005f36:	078a                	slli	a5,a5,0x2
    80005f38:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005f3c:	4701                	li	a4,0
    80005f3e:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005f42:	648c                	ld	a1,8(s1)
    80005f44:	00029517          	auipc	a0,0x29
    80005f48:	dfc50513          	addi	a0,a0,-516 # 8002ed40 <__func__.0+0xe58>
    80005f4c:	4de250ef          	jal	8002b42a <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f50:	08200593          	li	a1,130
    80005f54:	00029617          	auipc	a2,0x29
    80005f58:	38460613          	addi	a2,a2,900 # 8002f2d8 <__func__.0+0x13f0>
    80005f5c:	00028517          	auipc	a0,0x28
    80005f60:	28450513          	addi	a0,a0,644 # 8002e1e0 <__func__.0+0x2f8>
    80005f64:	4c6250ef          	jal	8002b42a <printf>
    80005f68:	00052797          	auipc	a5,0x52
    80005f6c:	0a97c783          	lbu	a5,169(a5) # 80058011 <excpt+0x1>
    80005f70:	00028597          	auipc	a1,0x28
    80005f74:	24858593          	addi	a1,a1,584 # 8002e1b8 <__func__.0+0x2d0>
    80005f78:	cf89                	beqz	a5,80005f92 <virtual_instruction_7+0x4fe>
    80005f7a:	6498                	ld	a4,8(s1)
    80005f7c:	47d9                	li	a5,22
    80005f7e:	00028597          	auipc	a1,0x28
    80005f82:	22a58593          	addi	a1,a1,554 # 8002e1a8 <__func__.0+0x2c0>
    80005f86:	00f70663          	beq	a4,a5,80005f92 <virtual_instruction_7+0x4fe>
    80005f8a:	00028597          	auipc	a1,0x28
    80005f8e:	22e58593          	addi	a1,a1,558 # 8002e1b8 <__func__.0+0x2d0>
    80005f92:	00028517          	auipc	a0,0x28
    80005f96:	26650513          	addi	a0,a0,614 # 8002e1f8 <__func__.0+0x310>
    80005f9a:	490250ef          	jal	8002b42a <printf>
    80005f9e:	00052797          	auipc	a5,0x52
    80005fa2:	0737c783          	lbu	a5,115(a5) # 80058011 <excpt+0x1>
    80005fa6:	c789                	beqz	a5,80005fb0 <virtual_instruction_7+0x51c>
    80005fa8:	6498                	ld	a4,8(s1)
    80005faa:	47d9                	li	a5,22
    80005fac:	00f70c63          	beq	a4,a5,80005fc4 <virtual_instruction_7+0x530>
    80005fb0:	00028517          	auipc	a0,0x28
    80005fb4:	25050513          	addi	a0,a0,592 # 8002e200 <__func__.0+0x318>
    80005fb8:	472250ef          	jal	8002b42a <printf>
    80005fbc:	02900513          	li	a0,41
    80005fc0:	158240ef          	jal	8002a118 <putchar>
    80005fc4:	4529                	li	a0,10
    80005fc6:	152240ef          	jal	8002a118 <putchar>
    80005fca:	c801                	beqz	s0,80005fda <virtual_instruction_7+0x546>
    80005fcc:	00052797          	auipc	a5,0x52
    80005fd0:	0457c783          	lbu	a5,69(a5) # 80058011 <excpt+0x1>
    80005fd4:	4401                	li	s0,0
    80005fd6:	12079463          	bnez	a5,800060fe <virtual_instruction_7+0x66a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005fda:	4501                	li	a0,0
    80005fdc:	f2dfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005fe0:	e2dfa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005fe4:	37ab77b7          	lui	a5,0x37ab7
    80005fe8:	078a                	slli	a5,a5,0x2
    80005fea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005fee:	4701                	li	a4,0
    80005ff0:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005ff4:	648c                	ld	a1,8(s1)
    80005ff6:	00029517          	auipc	a0,0x29
    80005ffa:	d4a50513          	addi	a0,a0,-694 # 8002ed40 <__func__.0+0xe58>
    80005ffe:	42c250ef          	jal	8002b42a <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006002:	08200593          	li	a1,130
    80006006:	00029617          	auipc	a2,0x29
    8000600a:	2d260613          	addi	a2,a2,722 # 8002f2d8 <__func__.0+0x13f0>
    8000600e:	00028517          	auipc	a0,0x28
    80006012:	1d250513          	addi	a0,a0,466 # 8002e1e0 <__func__.0+0x2f8>
    80006016:	414250ef          	jal	8002b42a <printf>
    8000601a:	00052797          	auipc	a5,0x52
    8000601e:	ff77c783          	lbu	a5,-9(a5) # 80058011 <excpt+0x1>
    80006022:	00028597          	auipc	a1,0x28
    80006026:	19658593          	addi	a1,a1,406 # 8002e1b8 <__func__.0+0x2d0>
    8000602a:	cf89                	beqz	a5,80006044 <virtual_instruction_7+0x5b0>
    8000602c:	6498                	ld	a4,8(s1)
    8000602e:	47d9                	li	a5,22
    80006030:	00028597          	auipc	a1,0x28
    80006034:	17858593          	addi	a1,a1,376 # 8002e1a8 <__func__.0+0x2c0>
    80006038:	00f70663          	beq	a4,a5,80006044 <virtual_instruction_7+0x5b0>
    8000603c:	00028597          	auipc	a1,0x28
    80006040:	17c58593          	addi	a1,a1,380 # 8002e1b8 <__func__.0+0x2d0>
    80006044:	00028517          	auipc	a0,0x28
    80006048:	1b450513          	addi	a0,a0,436 # 8002e1f8 <__func__.0+0x310>
    8000604c:	3de250ef          	jal	8002b42a <printf>
    80006050:	00052797          	auipc	a5,0x52
    80006054:	fc17c783          	lbu	a5,-63(a5) # 80058011 <excpt+0x1>
    80006058:	c789                	beqz	a5,80006062 <virtual_instruction_7+0x5ce>
    8000605a:	6498                	ld	a4,8(s1)
    8000605c:	47d9                	li	a5,22
    8000605e:	00f70c63          	beq	a4,a5,80006076 <virtual_instruction_7+0x5e2>
    80006062:	00028517          	auipc	a0,0x28
    80006066:	19e50513          	addi	a0,a0,414 # 8002e200 <__func__.0+0x318>
    8000606a:	3c0250ef          	jal	8002b42a <printf>
    8000606e:	02900513          	li	a0,41
    80006072:	0a6240ef          	jal	8002a118 <putchar>
    80006076:	4529                	li	a0,10
    80006078:	0a0240ef          	jal	8002a118 <putchar>
    8000607c:	c015                	beqz	s0,800060a0 <virtual_instruction_7+0x60c>
    8000607e:	00052417          	auipc	s0,0x52
    80006082:	f9344403          	lbu	s0,-109(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80006086:	00028597          	auipc	a1,0x28
    8000608a:	13258593          	addi	a1,a1,306 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000608e:	cc11                	beqz	s0,800060aa <virtual_instruction_7+0x616>
    80006090:	6498                	ld	a4,8(s1)
    80006092:	47d9                	li	a5,22
    TEST_END();
    80006094:	00028597          	auipc	a1,0x28
    80006098:	11458593          	addi	a1,a1,276 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000609c:	00f70763          	beq	a4,a5,800060aa <virtual_instruction_7+0x616>
    800060a0:	4401                	li	s0,0
    TEST_END();
    800060a2:	00028597          	auipc	a1,0x28
    800060a6:	11658593          	addi	a1,a1,278 # 8002e1b8 <__func__.0+0x2d0>
    800060aa:	00028517          	auipc	a0,0x28
    800060ae:	1b650513          	addi	a0,a0,438 # 8002e260 <__func__.0+0x378>
    800060b2:	378250ef          	jal	8002b42a <printf>
    800060b6:	4511                	li	a0,4
    800060b8:	e51fa0ef          	jal	80000f08 <goto_priv>
    800060bc:	f68fb0ef          	jal	80001824 <reset_state>
}
    800060c0:	60e2                	ld	ra,24(sp)
    800060c2:	8522                	mv	a0,s0
    800060c4:	6442                	ld	s0,16(sp)
    800060c6:	64a2                	ld	s1,8(sp)
    800060c8:	6105                	addi	sp,sp,32
    800060ca:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    800060cc:	6480                	ld	s0,8(s1)
    800060ce:	1429                	addi	s0,s0,-22
    800060d0:	00143413          	seqz	s0,s0
    800060d4:	b60d                	j	80005bf6 <virtual_instruction_7+0x162>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    800060d6:	6480                	ld	s0,8(s1)
    800060d8:	1429                	addi	s0,s0,-22
    800060da:	00143413          	seqz	s0,s0
    800060de:	b1b1                	j	80005d2a <virtual_instruction_7+0x296>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    800060e0:	6480                	ld	s0,8(s1)
    800060e2:	1429                	addi	s0,s0,-22
    800060e4:	00143413          	seqz	s0,s0
    800060e8:	b665                	j	80005c90 <virtual_instruction_7+0x1fc>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800060ea:	6480                	ld	s0,8(s1)
    800060ec:	1429                	addi	s0,s0,-22
    800060ee:	00143413          	seqz	s0,s0
    800060f2:	b351                	j	80005e76 <virtual_instruction_7+0x3e2>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    800060f4:	6480                	ld	s0,8(s1)
    800060f6:	1429                	addi	s0,s0,-22
    800060f8:	00143413          	seqz	s0,s0
    800060fc:	b1e1                	j	80005dc4 <virtual_instruction_7+0x330>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800060fe:	6480                	ld	s0,8(s1)
    80006100:	1429                	addi	s0,s0,-22
    80006102:	00143413          	seqz	s0,s0
    80006106:	bdd1                	j	80005fda <virtual_instruction_7+0x546>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006108:	6480                	ld	s0,8(s1)
    8000610a:	1429                	addi	s0,s0,-22
    8000610c:	00143413          	seqz	s0,s0
    80006110:	bd21                	j	80005f28 <virtual_instruction_7+0x494>

0000000080006112 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80006112:	1101                	addi	sp,sp,-32

    TEST_START();
    80006114:	00026597          	auipc	a1,0x26
    80006118:	36c58593          	addi	a1,a1,876 # 8002c480 <__func__.4>
    8000611c:	00028517          	auipc	a0,0x28
    80006120:	0ac50513          	addi	a0,a0,172 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    80006124:	ec06                	sd	ra,24(sp)
    80006126:	e822                	sd	s0,16(sp)
    80006128:	e426                	sd	s1,8(sp)
    TEST_START();
    8000612a:	300250ef          	jal	8002b42a <printf>
    8000612e:	4529                	li	a0,10
    80006130:	7e9230ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80006134:	4511                	li	a0,4
    80006136:	dd3fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    8000613a:	004007b7          	lui	a5,0x400
    8000613e:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006142:	002007b7          	lui	a5,0x200
    80006146:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    8000614a:	4501                	li	a0,0
    8000614c:	dbdfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006150:	cbdfa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80006154:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006158:	08200593          	li	a1,130
    8000615c:	00029617          	auipc	a2,0x29
    80006160:	1ac60613          	addi	a2,a2,428 # 8002f308 <__func__.0+0x1420>
    80006164:	00028517          	auipc	a0,0x28
    80006168:	07c50513          	addi	a0,a0,124 # 8002e1e0 <__func__.0+0x2f8>
    8000616c:	2be250ef          	jal	8002b42a <printf>
    80006170:	00052797          	auipc	a5,0x52
    80006174:	ea17c783          	lbu	a5,-351(a5) # 80058011 <excpt+0x1>
    80006178:	00052497          	auipc	s1,0x52
    8000617c:	e9848493          	addi	s1,s1,-360 # 80058010 <excpt>
    80006180:	00028597          	auipc	a1,0x28
    80006184:	03858593          	addi	a1,a1,56 # 8002e1b8 <__func__.0+0x2d0>
    80006188:	cf89                	beqz	a5,800061a2 <virtual_instruction_8+0x90>
    8000618a:	6498                	ld	a4,8(s1)
    8000618c:	47d9                	li	a5,22
    8000618e:	00028597          	auipc	a1,0x28
    80006192:	01a58593          	addi	a1,a1,26 # 8002e1a8 <__func__.0+0x2c0>
    80006196:	00f70663          	beq	a4,a5,800061a2 <virtual_instruction_8+0x90>
    8000619a:	00028597          	auipc	a1,0x28
    8000619e:	01e58593          	addi	a1,a1,30 # 8002e1b8 <__func__.0+0x2d0>
    800061a2:	00028517          	auipc	a0,0x28
    800061a6:	05650513          	addi	a0,a0,86 # 8002e1f8 <__func__.0+0x310>
    800061aa:	280250ef          	jal	8002b42a <printf>
    800061ae:	00052797          	auipc	a5,0x52
    800061b2:	e637c783          	lbu	a5,-413(a5) # 80058011 <excpt+0x1>
    800061b6:	c789                	beqz	a5,800061c0 <virtual_instruction_8+0xae>
    800061b8:	6498                	ld	a4,8(s1)
    800061ba:	47d9                	li	a5,22
    800061bc:	00f70c63          	beq	a4,a5,800061d4 <virtual_instruction_8+0xc2>
    800061c0:	00028517          	auipc	a0,0x28
    800061c4:	04050513          	addi	a0,a0,64 # 8002e200 <__func__.0+0x318>
    800061c8:	262250ef          	jal	8002b42a <printf>
    800061cc:	02900513          	li	a0,41
    800061d0:	749230ef          	jal	8002a118 <putchar>
    800061d4:	4529                	li	a0,10
    800061d6:	743230ef          	jal	8002a118 <putchar>
    800061da:	00052417          	auipc	s0,0x52
    800061de:	e3744403          	lbu	s0,-457(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    800061e2:	00028597          	auipc	a1,0x28
    800061e6:	fd658593          	addi	a1,a1,-42 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800061ea:	cc11                	beqz	s0,80006206 <virtual_instruction_8+0xf4>
    800061ec:	6498                	ld	a4,8(s1)
    800061ee:	47d9                	li	a5,22
    TEST_END();
    800061f0:	00028597          	auipc	a1,0x28
    800061f4:	fb858593          	addi	a1,a1,-72 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800061f8:	00f70763          	beq	a4,a5,80006206 <virtual_instruction_8+0xf4>
    800061fc:	4401                	li	s0,0
    TEST_END();
    800061fe:	00028597          	auipc	a1,0x28
    80006202:	fba58593          	addi	a1,a1,-70 # 8002e1b8 <__func__.0+0x2d0>
    80006206:	00028517          	auipc	a0,0x28
    8000620a:	05a50513          	addi	a0,a0,90 # 8002e260 <__func__.0+0x378>
    8000620e:	21c250ef          	jal	8002b42a <printf>
    80006212:	4511                	li	a0,4
    80006214:	cf5fa0ef          	jal	80000f08 <goto_priv>
    80006218:	e0cfb0ef          	jal	80001824 <reset_state>
}
    8000621c:	60e2                	ld	ra,24(sp)
    8000621e:	8522                	mv	a0,s0
    80006220:	6442                	ld	s0,16(sp)
    80006222:	64a2                	ld	s1,8(sp)
    80006224:	6105                	addi	sp,sp,32
    80006226:	8082                	ret

0000000080006228 <virtual_instruction_9>:
bool virtual_instruction_9() {
    80006228:	1101                	addi	sp,sp,-32

    TEST_START();
    8000622a:	00026597          	auipc	a1,0x26
    8000622e:	26e58593          	addi	a1,a1,622 # 8002c498 <__func__.3>
    80006232:	00028517          	auipc	a0,0x28
    80006236:	f9650513          	addi	a0,a0,-106 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    8000623a:	ec06                	sd	ra,24(sp)
    8000623c:	e822                	sd	s0,16(sp)
    8000623e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006240:	1ea250ef          	jal	8002b42a <printf>
    80006244:	4529                	li	a0,10
    80006246:	6d3230ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8000624a:	4511                	li	a0,4
    8000624c:	cbdfa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006250:	002007b7          	lui	a5,0x200
    80006254:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006258:	4501                	li	a0,0
    8000625a:	caffa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000625e:	baffa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    80006262:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006266:	08200593          	li	a1,130
    8000626a:	00029617          	auipc	a2,0x29
    8000626e:	0e660613          	addi	a2,a2,230 # 8002f350 <__func__.0+0x1468>
    80006272:	00028517          	auipc	a0,0x28
    80006276:	f6e50513          	addi	a0,a0,-146 # 8002e1e0 <__func__.0+0x2f8>
    8000627a:	1b0250ef          	jal	8002b42a <printf>
    8000627e:	00052797          	auipc	a5,0x52
    80006282:	d937c783          	lbu	a5,-621(a5) # 80058011 <excpt+0x1>
    80006286:	00052497          	auipc	s1,0x52
    8000628a:	d8a48493          	addi	s1,s1,-630 # 80058010 <excpt>
    8000628e:	00028597          	auipc	a1,0x28
    80006292:	f2a58593          	addi	a1,a1,-214 # 8002e1b8 <__func__.0+0x2d0>
    80006296:	cf89                	beqz	a5,800062b0 <virtual_instruction_9+0x88>
    80006298:	6498                	ld	a4,8(s1)
    8000629a:	47d9                	li	a5,22
    8000629c:	00028597          	auipc	a1,0x28
    800062a0:	f0c58593          	addi	a1,a1,-244 # 8002e1a8 <__func__.0+0x2c0>
    800062a4:	00f70663          	beq	a4,a5,800062b0 <virtual_instruction_9+0x88>
    800062a8:	00028597          	auipc	a1,0x28
    800062ac:	f1058593          	addi	a1,a1,-240 # 8002e1b8 <__func__.0+0x2d0>
    800062b0:	00028517          	auipc	a0,0x28
    800062b4:	f4850513          	addi	a0,a0,-184 # 8002e1f8 <__func__.0+0x310>
    800062b8:	172250ef          	jal	8002b42a <printf>
    800062bc:	00052797          	auipc	a5,0x52
    800062c0:	d557c783          	lbu	a5,-683(a5) # 80058011 <excpt+0x1>
    800062c4:	c789                	beqz	a5,800062ce <virtual_instruction_9+0xa6>
    800062c6:	6498                	ld	a4,8(s1)
    800062c8:	47d9                	li	a5,22
    800062ca:	00f70c63          	beq	a4,a5,800062e2 <virtual_instruction_9+0xba>
    800062ce:	00028517          	auipc	a0,0x28
    800062d2:	f3250513          	addi	a0,a0,-206 # 8002e200 <__func__.0+0x318>
    800062d6:	154250ef          	jal	8002b42a <printf>
    800062da:	02900513          	li	a0,41
    800062de:	63b230ef          	jal	8002a118 <putchar>
    800062e2:	4529                	li	a0,10
    800062e4:	635230ef          	jal	8002a118 <putchar>
    800062e8:	00052417          	auipc	s0,0x52
    800062ec:	d2944403          	lbu	s0,-727(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800062f0:	00028597          	auipc	a1,0x28
    800062f4:	ec858593          	addi	a1,a1,-312 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800062f8:	cc11                	beqz	s0,80006314 <virtual_instruction_9+0xec>
    800062fa:	6498                	ld	a4,8(s1)
    800062fc:	47d9                	li	a5,22
    TEST_END();
    800062fe:	00028597          	auipc	a1,0x28
    80006302:	eaa58593          	addi	a1,a1,-342 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006306:	00f70763          	beq	a4,a5,80006314 <virtual_instruction_9+0xec>
    8000630a:	4401                	li	s0,0
    TEST_END();
    8000630c:	00028597          	auipc	a1,0x28
    80006310:	eac58593          	addi	a1,a1,-340 # 8002e1b8 <__func__.0+0x2d0>
    80006314:	00028517          	auipc	a0,0x28
    80006318:	f4c50513          	addi	a0,a0,-180 # 8002e260 <__func__.0+0x378>
    8000631c:	10e250ef          	jal	8002b42a <printf>
    80006320:	4511                	li	a0,4
    80006322:	be7fa0ef          	jal	80000f08 <goto_priv>
    80006326:	cfefb0ef          	jal	80001824 <reset_state>
}
    8000632a:	60e2                	ld	ra,24(sp)
    8000632c:	8522                	mv	a0,s0
    8000632e:	6442                	ld	s0,16(sp)
    80006330:	64a2                	ld	s1,8(sp)
    80006332:	6105                	addi	sp,sp,32
    80006334:	8082                	ret

0000000080006336 <virtual_instruction_10>:
bool virtual_instruction_10() {
    80006336:	1101                	addi	sp,sp,-32

    TEST_START();
    80006338:	00026597          	auipc	a1,0x26
    8000633c:	17858593          	addi	a1,a1,376 # 8002c4b0 <__func__.2>
    80006340:	00028517          	auipc	a0,0x28
    80006344:	e8850513          	addi	a0,a0,-376 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    80006348:	ec06                	sd	ra,24(sp)
    8000634a:	e822                	sd	s0,16(sp)
    8000634c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000634e:	0dc250ef          	jal	8002b42a <printf>
    80006352:	4529                	li	a0,10
    80006354:	5c5230ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_M);
    80006358:	4511                	li	a0,4
    8000635a:	baffa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000635e:	002007b7          	lui	a5,0x200
    80006362:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006366:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    8000636a:	4501                	li	a0,0
    8000636c:	b9dfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006370:	a9dfa0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    80006374:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006378:	08200593          	li	a1,130
    8000637c:	00029617          	auipc	a2,0x29
    80006380:	01c60613          	addi	a2,a2,28 # 8002f398 <__func__.0+0x14b0>
    80006384:	00028517          	auipc	a0,0x28
    80006388:	e5c50513          	addi	a0,a0,-420 # 8002e1e0 <__func__.0+0x2f8>
    8000638c:	09e250ef          	jal	8002b42a <printf>
    80006390:	00052797          	auipc	a5,0x52
    80006394:	c817c783          	lbu	a5,-895(a5) # 80058011 <excpt+0x1>
    80006398:	00052497          	auipc	s1,0x52
    8000639c:	c7848493          	addi	s1,s1,-904 # 80058010 <excpt>
    800063a0:	00028597          	auipc	a1,0x28
    800063a4:	e1858593          	addi	a1,a1,-488 # 8002e1b8 <__func__.0+0x2d0>
    800063a8:	cf89                	beqz	a5,800063c2 <virtual_instruction_10+0x8c>
    800063aa:	6498                	ld	a4,8(s1)
    800063ac:	47d9                	li	a5,22
    800063ae:	00028597          	auipc	a1,0x28
    800063b2:	dfa58593          	addi	a1,a1,-518 # 8002e1a8 <__func__.0+0x2c0>
    800063b6:	00f70663          	beq	a4,a5,800063c2 <virtual_instruction_10+0x8c>
    800063ba:	00028597          	auipc	a1,0x28
    800063be:	dfe58593          	addi	a1,a1,-514 # 8002e1b8 <__func__.0+0x2d0>
    800063c2:	00028517          	auipc	a0,0x28
    800063c6:	e3650513          	addi	a0,a0,-458 # 8002e1f8 <__func__.0+0x310>
    800063ca:	060250ef          	jal	8002b42a <printf>
    800063ce:	00052797          	auipc	a5,0x52
    800063d2:	c437c783          	lbu	a5,-957(a5) # 80058011 <excpt+0x1>
    800063d6:	c789                	beqz	a5,800063e0 <virtual_instruction_10+0xaa>
    800063d8:	6498                	ld	a4,8(s1)
    800063da:	47d9                	li	a5,22
    800063dc:	00f70c63          	beq	a4,a5,800063f4 <virtual_instruction_10+0xbe>
    800063e0:	00028517          	auipc	a0,0x28
    800063e4:	e2050513          	addi	a0,a0,-480 # 8002e200 <__func__.0+0x318>
    800063e8:	042250ef          	jal	8002b42a <printf>
    800063ec:	02900513          	li	a0,41
    800063f0:	529230ef          	jal	8002a118 <putchar>
    800063f4:	4529                	li	a0,10
    800063f6:	523230ef          	jal	8002a118 <putchar>
    800063fa:	00052417          	auipc	s0,0x52
    800063fe:	c1744403          	lbu	s0,-1001(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80006402:	00028597          	auipc	a1,0x28
    80006406:	db658593          	addi	a1,a1,-586 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000640a:	cc11                	beqz	s0,80006426 <virtual_instruction_10+0xf0>
    8000640c:	6498                	ld	a4,8(s1)
    8000640e:	47d9                	li	a5,22
    TEST_END();
    80006410:	00028597          	auipc	a1,0x28
    80006414:	d9858593          	addi	a1,a1,-616 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006418:	00f70763          	beq	a4,a5,80006426 <virtual_instruction_10+0xf0>
    8000641c:	4401                	li	s0,0
    TEST_END();
    8000641e:	00028597          	auipc	a1,0x28
    80006422:	d9a58593          	addi	a1,a1,-614 # 8002e1b8 <__func__.0+0x2d0>
    80006426:	00028517          	auipc	a0,0x28
    8000642a:	e3a50513          	addi	a0,a0,-454 # 8002e260 <__func__.0+0x378>
    8000642e:	7fd240ef          	jal	8002b42a <printf>
    80006432:	4511                	li	a0,4
    80006434:	ad5fa0ef          	jal	80000f08 <goto_priv>
    80006438:	becfb0ef          	jal	80001824 <reset_state>
}
    8000643c:	60e2                	ld	ra,24(sp)
    8000643e:	8522                	mv	a0,s0
    80006440:	6442                	ld	s0,16(sp)
    80006442:	64a2                	ld	s1,8(sp)
    80006444:	6105                	addi	sp,sp,32
    80006446:	8082                	ret

0000000080006448 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80006448:	1101                	addi	sp,sp,-32

    TEST_START();    
    8000644a:	00026597          	auipc	a1,0x26
    8000644e:	07e58593          	addi	a1,a1,126 # 8002c4c8 <__func__.1>
    80006452:	00028517          	auipc	a0,0x28
    80006456:	d7650513          	addi	a0,a0,-650 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    8000645a:	ec06                	sd	ra,24(sp)
    8000645c:	e822                	sd	s0,16(sp)
    8000645e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80006460:	7cb240ef          	jal	8002b42a <printf>
    80006464:	4529                	li	a0,10
    80006466:	4b3230ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8000646a:	4511                	li	a0,4
    8000646c:	a9dfa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    80006470:	001007b7          	lui	a5,0x100
    80006474:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006478:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    8000647c:	4501                	li	a0,0
    8000647e:	a8bfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006482:	98bfa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSIE,1ULL << 1);
    80006486:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000648a:	08200593          	li	a1,130
    8000648e:	00029617          	auipc	a2,0x29
    80006492:	f5260613          	addi	a2,a2,-174 # 8002f3e0 <__func__.0+0x14f8>
    80006496:	00028517          	auipc	a0,0x28
    8000649a:	d4a50513          	addi	a0,a0,-694 # 8002e1e0 <__func__.0+0x2f8>
    8000649e:	78d240ef          	jal	8002b42a <printf>
    800064a2:	00052797          	auipc	a5,0x52
    800064a6:	b6f7c783          	lbu	a5,-1169(a5) # 80058011 <excpt+0x1>
    800064aa:	00052497          	auipc	s1,0x52
    800064ae:	b6648493          	addi	s1,s1,-1178 # 80058010 <excpt>
    800064b2:	00028597          	auipc	a1,0x28
    800064b6:	d0658593          	addi	a1,a1,-762 # 8002e1b8 <__func__.0+0x2d0>
    800064ba:	cf89                	beqz	a5,800064d4 <virtual_instruction_11+0x8c>
    800064bc:	6498                	ld	a4,8(s1)
    800064be:	47d9                	li	a5,22
    800064c0:	00028597          	auipc	a1,0x28
    800064c4:	ce858593          	addi	a1,a1,-792 # 8002e1a8 <__func__.0+0x2c0>
    800064c8:	00f70663          	beq	a4,a5,800064d4 <virtual_instruction_11+0x8c>
    800064cc:	00028597          	auipc	a1,0x28
    800064d0:	cec58593          	addi	a1,a1,-788 # 8002e1b8 <__func__.0+0x2d0>
    800064d4:	00028517          	auipc	a0,0x28
    800064d8:	d2450513          	addi	a0,a0,-732 # 8002e1f8 <__func__.0+0x310>
    800064dc:	74f240ef          	jal	8002b42a <printf>
    800064e0:	00052797          	auipc	a5,0x52
    800064e4:	b317c783          	lbu	a5,-1231(a5) # 80058011 <excpt+0x1>
    800064e8:	c789                	beqz	a5,800064f2 <virtual_instruction_11+0xaa>
    800064ea:	6498                	ld	a4,8(s1)
    800064ec:	47d9                	li	a5,22
    800064ee:	00f70c63          	beq	a4,a5,80006506 <virtual_instruction_11+0xbe>
    800064f2:	00028517          	auipc	a0,0x28
    800064f6:	d0e50513          	addi	a0,a0,-754 # 8002e200 <__func__.0+0x318>
    800064fa:	731240ef          	jal	8002b42a <printf>
    800064fe:	02900513          	li	a0,41
    80006502:	417230ef          	jal	8002a118 <putchar>
    80006506:	4529                	li	a0,10
    80006508:	411230ef          	jal	8002a118 <putchar>
    8000650c:	00052417          	auipc	s0,0x52
    80006510:	b0544403          	lbu	s0,-1275(s0) # 80058011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    80006514:	00028597          	auipc	a1,0x28
    80006518:	ca458593          	addi	a1,a1,-860 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000651c:	cc11                	beqz	s0,80006538 <virtual_instruction_11+0xf0>
    8000651e:	6498                	ld	a4,8(s1)
    80006520:	47d9                	li	a5,22
    TEST_END(); 
    80006522:	00028597          	auipc	a1,0x28
    80006526:	c8658593          	addi	a1,a1,-890 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000652a:	00f70763          	beq	a4,a5,80006538 <virtual_instruction_11+0xf0>
    8000652e:	4401                	li	s0,0
    TEST_END(); 
    80006530:	00028597          	auipc	a1,0x28
    80006534:	c8858593          	addi	a1,a1,-888 # 8002e1b8 <__func__.0+0x2d0>
    80006538:	00028517          	auipc	a0,0x28
    8000653c:	d2850513          	addi	a0,a0,-728 # 8002e260 <__func__.0+0x378>
    80006540:	6eb240ef          	jal	8002b42a <printf>
    80006544:	4511                	li	a0,4
    80006546:	9c3fa0ef          	jal	80000f08 <goto_priv>
    8000654a:	adafb0ef          	jal	80001824 <reset_state>
}
    8000654e:	60e2                	ld	ra,24(sp)
    80006550:	8522                	mv	a0,s0
    80006552:	6442                	ld	s0,16(sp)
    80006554:	64a2                	ld	s1,8(sp)
    80006556:	6105                	addi	sp,sp,32
    80006558:	8082                	ret

000000008000655a <virtual_instruction_12>:

bool virtual_instruction_12() {
    8000655a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000655c:	00026597          	auipc	a1,0x26
    80006560:	f8458593          	addi	a1,a1,-124 # 8002c4e0 <__func__.0>
    80006564:	00028517          	auipc	a0,0x28
    80006568:	c6450513          	addi	a0,a0,-924 # 8002e1c8 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    8000656c:	ec06                	sd	ra,24(sp)
    8000656e:	e822                	sd	s0,16(sp)
    80006570:	e426                	sd	s1,8(sp)
    TEST_START();
    80006572:	6b9240ef          	jal	8002b42a <printf>
    80006576:	4529                	li	a0,10
    80006578:	3a1230ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_VU);
    8000657c:	4501                	li	a0,0
    8000657e:	98bfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006582:	88bfa0ef          	jal	80000e0c <test_setup_except_function>

    CSRR(CSR_SATP);
    80006586:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000658a:	08200593          	li	a1,130
    8000658e:	00029617          	auipc	a2,0x29
    80006592:	eb260613          	addi	a2,a2,-334 # 8002f440 <__func__.0+0x1558>
    80006596:	00028517          	auipc	a0,0x28
    8000659a:	c4a50513          	addi	a0,a0,-950 # 8002e1e0 <__func__.0+0x2f8>
    8000659e:	68d240ef          	jal	8002b42a <printf>
    800065a2:	00052797          	auipc	a5,0x52
    800065a6:	a6f7c783          	lbu	a5,-1425(a5) # 80058011 <excpt+0x1>
    800065aa:	00052497          	auipc	s1,0x52
    800065ae:	a6648493          	addi	s1,s1,-1434 # 80058010 <excpt>
    800065b2:	00028597          	auipc	a1,0x28
    800065b6:	c0658593          	addi	a1,a1,-1018 # 8002e1b8 <__func__.0+0x2d0>
    800065ba:	cf89                	beqz	a5,800065d4 <virtual_instruction_12+0x7a>
    800065bc:	6498                	ld	a4,8(s1)
    800065be:	47d9                	li	a5,22
    800065c0:	00028597          	auipc	a1,0x28
    800065c4:	be858593          	addi	a1,a1,-1048 # 8002e1a8 <__func__.0+0x2c0>
    800065c8:	00f70663          	beq	a4,a5,800065d4 <virtual_instruction_12+0x7a>
    800065cc:	00028597          	auipc	a1,0x28
    800065d0:	bec58593          	addi	a1,a1,-1044 # 8002e1b8 <__func__.0+0x2d0>
    800065d4:	00028517          	auipc	a0,0x28
    800065d8:	c2450513          	addi	a0,a0,-988 # 8002e1f8 <__func__.0+0x310>
    800065dc:	64f240ef          	jal	8002b42a <printf>
    800065e0:	00052797          	auipc	a5,0x52
    800065e4:	a317c783          	lbu	a5,-1487(a5) # 80058011 <excpt+0x1>
    800065e8:	c789                	beqz	a5,800065f2 <virtual_instruction_12+0x98>
    800065ea:	6498                	ld	a4,8(s1)
    800065ec:	47d9                	li	a5,22
    800065ee:	00f70c63          	beq	a4,a5,80006606 <virtual_instruction_12+0xac>
    800065f2:	00028517          	auipc	a0,0x28
    800065f6:	c0e50513          	addi	a0,a0,-1010 # 8002e200 <__func__.0+0x318>
    800065fa:	631240ef          	jal	8002b42a <printf>
    800065fe:	02900513          	li	a0,41
    80006602:	317230ef          	jal	8002a118 <putchar>
    80006606:	4529                	li	a0,10
    80006608:	311230ef          	jal	8002a118 <putchar>
    8000660c:	00052417          	auipc	s0,0x52
    80006610:	a0544403          	lbu	s0,-1531(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80006614:	00028597          	auipc	a1,0x28
    80006618:	ba458593          	addi	a1,a1,-1116 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000661c:	cc11                	beqz	s0,80006638 <virtual_instruction_12+0xde>
    8000661e:	6498                	ld	a4,8(s1)
    80006620:	47d9                	li	a5,22
    TEST_END();
    80006622:	00028597          	auipc	a1,0x28
    80006626:	b8658593          	addi	a1,a1,-1146 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000662a:	00f70763          	beq	a4,a5,80006638 <virtual_instruction_12+0xde>
    8000662e:	4401                	li	s0,0
    TEST_END();
    80006630:	00028597          	auipc	a1,0x28
    80006634:	b8858593          	addi	a1,a1,-1144 # 8002e1b8 <__func__.0+0x2d0>
    80006638:	00028517          	auipc	a0,0x28
    8000663c:	c2850513          	addi	a0,a0,-984 # 8002e260 <__func__.0+0x378>
    80006640:	5eb240ef          	jal	8002b42a <printf>
    80006644:	4511                	li	a0,4
    80006646:	8c3fa0ef          	jal	80000f08 <goto_priv>
    8000664a:	9dafb0ef          	jal	80001824 <reset_state>
}
    8000664e:	60e2                	ld	ra,24(sp)
    80006650:	8522                	mv	a0,s0
    80006652:	6442                	ld	s0,16(sp)
    80006654:	64a2                	ld	s1,8(sp)
    80006656:	6105                	addi	sp,sp,32
    80006658:	8082                	ret

000000008000665a <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    8000665a:	7179                	addi	sp,sp,-48

    TEST_START();
    8000665c:	00026597          	auipc	a1,0x26
    80006660:	e9c58593          	addi	a1,a1,-356 # 8002c4f8 <__func__.2>
    80006664:	00028517          	auipc	a0,0x28
    80006668:	b6450513          	addi	a0,a0,-1180 # 8002e1c8 <__func__.0+0x2e0>
bool hfence_test() {
    8000666c:	f406                	sd	ra,40(sp)
    8000666e:	ec26                	sd	s1,24(sp)
    80006670:	f022                	sd	s0,32(sp)
    80006672:	e84a                	sd	s2,16(sp)
    80006674:	e44e                	sd	s3,8(sp)
    TEST_START();
    80006676:	5b5240ef          	jal	8002b42a <printf>
    8000667a:	4529                	li	a0,10
    8000667c:	29d230ef          	jal	8002a118 <putchar>
    80006680:	00033617          	auipc	a2,0x33
    80006684:	17863603          	ld	a2,376(a2) # 800397f8 <__func__.0+0xb910>
    80006688:	00033697          	auipc	a3,0x33
    8000668c:	1786b683          	ld	a3,376(a3) # 80039800 <__func__.0+0xb918>
    80006690:	2201b737          	lui	a4,0x2201b
    80006694:	000887b7          	lui	a5,0x88
    80006698:	070a                	slli	a4,a4,0x2
    8000669a:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000669e:	e310                	sd	a2,0(a4)
    800066a0:	07b2                	slli	a5,a5,0xc
    800066a2:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800066a4:	450d                	li	a0,3
    800066a6:	863fa0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800066aa:	4509                	li	a0,2
    asm volatile(
    800066ac:	4001b4b7          	lui	s1,0x4001b
    800066b0:	f78fa0ef          	jal	80000e28 <set_prev_priv>
    800066b4:	048a                	slli	s1,s1,0x2
    hpt_init();
    800066b6:	b0efa0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800066ba:	8c2fa0ef          	jal	8000077c <vspt_init>
    800066be:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    800066c2:	ef2fa0ef          	jal	80000db4 <vspt_switch>
    800066c6:	6c04c7f3          	.insn	4, 0x6c04c7f3
    asm volatile(
    800066ca:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800066ce:	6c04c473          	.insn	4, 0x6c04c473
    cond = (hlvd(vaddr) == val);

    hfence_vvma();
    cond &= (hlvd(vaddr) != val);
    800066d2:	41340433          	sub	s0,s0,s3
    cond = (hlvd(vaddr) == val);
    800066d6:	413787b3          	sub	a5,a5,s3
    800066da:	0017b793          	seqz	a5,a5
    800066de:	00803433          	snez	s0,s0
    800066e2:	8c7d                	and	s0,s0,a5

    hpt_switch();
    800066e4:	ef2fa0ef          	jal	80000dd6 <hpt_switch>
    800066e8:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    800066ec:	62000073          	.insn	4, 0x62000073
    asm volatile(
    800066f0:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= (hlvd(vaddr) != val);
    800066f4:	41390933          	sub	s2,s2,s3
    800066f8:	01203933          	snez	s2,s2

    hfence_gvma();
    cond &= (hlvd(vaddr) == val);

    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800066fc:	00029617          	auipc	a2,0x29
    80006700:	d8460613          	addi	a2,a2,-636 # 8002f480 <__func__.0+0x1598>
    80006704:	08200593          	li	a1,130
    80006708:	00028517          	auipc	a0,0x28
    8000670c:	ad850513          	addi	a0,a0,-1320 # 8002e1e0 <__func__.0+0x2f8>
    80006710:	01247433          	and	s0,s0,s2
    80006714:	517240ef          	jal	8002b42a <printf>
    80006718:	12040863          	beqz	s0,80006848 <hfence_test+0x1ee>
    8000671c:	13349663          	bne	s1,s3,80006848 <hfence_test+0x1ee>
    80006720:	00028597          	auipc	a1,0x28
    80006724:	a8858593          	addi	a1,a1,-1400 # 8002e1a8 <__func__.0+0x2c0>
    80006728:	00028517          	auipc	a0,0x28
    8000672c:	ad050513          	addi	a0,a0,-1328 # 8002e1f8 <__func__.0+0x310>
    80006730:	4fb240ef          	jal	8002b42a <printf>
    80006734:	4529                	li	a0,10
    80006736:	1e3230ef          	jal	8002a118 <putchar>
    8000673a:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    8000673c:	450d                	li	a0,3
    8000673e:	4001b437          	lui	s0,0x4001b
    80006742:	fc6fa0ef          	jal	80000f08 <goto_priv>
    80006746:	040a                	slli	s0,s0,0x2
    80006748:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    8000674c:	e8afa0ef          	jal	80000dd6 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80006750:	12000073          	sfence.vma
    asm volatile(
    80006754:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006758:	00029617          	auipc	a2,0x29
    8000675c:	d5860613          	addi	a2,a2,-680 # 8002f4b0 <__func__.0+0x15c8>
    80006760:	08200593          	li	a1,130
    80006764:	00028517          	auipc	a0,0x28
    80006768:	a7c50513          	addi	a0,a0,-1412 # 8002e1e0 <__func__.0+0x2f8>
    8000676c:	4bf240ef          	jal	8002b42a <printf>
    80006770:	13240963          	beq	s0,s2,800068a2 <hfence_test+0x248>
    80006774:	00028597          	auipc	a1,0x28
    80006778:	a4458593          	addi	a1,a1,-1468 # 8002e1b8 <__func__.0+0x2d0>
    8000677c:	00028517          	auipc	a0,0x28
    80006780:	a7c50513          	addi	a0,a0,-1412 # 8002e1f8 <__func__.0+0x310>
    80006784:	4a7240ef          	jal	8002b42a <printf>
    80006788:	00028517          	auipc	a0,0x28
    8000678c:	a7850513          	addi	a0,a0,-1416 # 8002e200 <__func__.0+0x318>
    80006790:	49b240ef          	jal	8002b42a <printf>
    80006794:	02900513          	li	a0,41
    80006798:	181230ef          	jal	8002a118 <putchar>
    8000679c:	4529                	li	a0,10
    8000679e:	17b230ef          	jal	8002a118 <putchar>
    800067a2:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    800067a4:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    800067a8:	450d                	li	a0,3
    800067aa:	040a                	slli	s0,s0,0x2
    800067ac:	f5cfa0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800067b0:	e31f90ef          	jal	800005e0 <hspt_init>
    800067b4:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    800067b8:	ddafa0ef          	jal	80000d92 <hspt_switch>
    goto_priv(PRIV_VS);
    800067bc:	4509                	li	a0,2
    800067be:	f4afa0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    800067c2:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    800067c6:	450d                	li	a0,3
    800067c8:	f40fa0ef          	jal	80000f08 <goto_priv>
    800067cc:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800067ce:	00029617          	auipc	a2,0x29
    800067d2:	d1a60613          	addi	a2,a2,-742 # 8002f4e8 <__func__.0+0x1600>
    800067d6:	08200593          	li	a1,130
    800067da:	00028517          	auipc	a0,0x28
    800067de:	a0650513          	addi	a0,a0,-1530 # 8002e1e0 <__func__.0+0x2f8>
    800067e2:	449240ef          	jal	8002b42a <printf>
    800067e6:	09240a63          	beq	s0,s2,8000687a <hfence_test+0x220>
    800067ea:	00028597          	auipc	a1,0x28
    800067ee:	9ce58593          	addi	a1,a1,-1586 # 8002e1b8 <__func__.0+0x2d0>
    800067f2:	00028517          	auipc	a0,0x28
    800067f6:	a0650513          	addi	a0,a0,-1530 # 8002e1f8 <__func__.0+0x310>
    800067fa:	431240ef          	jal	8002b42a <printf>
    800067fe:	00028517          	auipc	a0,0x28
    80006802:	a0250513          	addi	a0,a0,-1534 # 8002e200 <__func__.0+0x318>
    80006806:	425240ef          	jal	8002b42a <printf>
    8000680a:	02900513          	li	a0,41
    8000680e:	10b230ef          	jal	8002a118 <putchar>
    80006812:	4529                	li	a0,10
    80006814:	105230ef          	jal	8002a118 <putchar>
    80006818:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    8000681a:	00028597          	auipc	a1,0x28
    8000681e:	99e58593          	addi	a1,a1,-1634 # 8002e1b8 <__func__.0+0x2d0>
    80006822:	00028517          	auipc	a0,0x28
    80006826:	a3e50513          	addi	a0,a0,-1474 # 8002e260 <__func__.0+0x378>
    8000682a:	401240ef          	jal	8002b42a <printf>
    8000682e:	4511                	li	a0,4
    80006830:	ed8fa0ef          	jal	80000f08 <goto_priv>
    80006834:	ff1fa0ef          	jal	80001824 <reset_state>
    80006838:	70a2                	ld	ra,40(sp)
    8000683a:	8522                	mv	a0,s0
    8000683c:	7402                	ld	s0,32(sp)
    8000683e:	64e2                	ld	s1,24(sp)
    80006840:	6942                	ld	s2,16(sp)
    80006842:	69a2                	ld	s3,8(sp)
    80006844:	6145                	addi	sp,sp,48
    80006846:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006848:	00028597          	auipc	a1,0x28
    8000684c:	97058593          	addi	a1,a1,-1680 # 8002e1b8 <__func__.0+0x2d0>
    80006850:	00028517          	auipc	a0,0x28
    80006854:	9a850513          	addi	a0,a0,-1624 # 8002e1f8 <__func__.0+0x310>
    80006858:	3d3240ef          	jal	8002b42a <printf>
    8000685c:	00028517          	auipc	a0,0x28
    80006860:	9a450513          	addi	a0,a0,-1628 # 8002e200 <__func__.0+0x318>
    80006864:	3c7240ef          	jal	8002b42a <printf>
    80006868:	02900513          	li	a0,41
    8000686c:	0ad230ef          	jal	8002a118 <putchar>
    80006870:	4529                	li	a0,10
    80006872:	0a7230ef          	jal	8002a118 <putchar>
    80006876:	4481                	li	s1,0
    80006878:	b5d1                	j	8000673c <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000687a:	00028597          	auipc	a1,0x28
    8000687e:	92e58593          	addi	a1,a1,-1746 # 8002e1a8 <__func__.0+0x2c0>
    80006882:	00028517          	auipc	a0,0x28
    80006886:	97650513          	addi	a0,a0,-1674 # 8002e1f8 <__func__.0+0x310>
    8000688a:	3a1240ef          	jal	8002b42a <printf>
    8000688e:	4529                	li	a0,10
    80006890:	089230ef          	jal	8002a118 <putchar>
    80006894:	d0d1                	beqz	s1,80006818 <hfence_test+0x1be>
    80006896:	4405                	li	s0,1
    TEST_END();
    80006898:	00028597          	auipc	a1,0x28
    8000689c:	91058593          	addi	a1,a1,-1776 # 8002e1a8 <__func__.0+0x2c0>
    800068a0:	b749                	j	80006822 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    800068a2:	00028597          	auipc	a1,0x28
    800068a6:	90658593          	addi	a1,a1,-1786 # 8002e1a8 <__func__.0+0x2c0>
    800068aa:	00028517          	auipc	a0,0x28
    800068ae:	94e50513          	addi	a0,a0,-1714 # 8002e1f8 <__func__.0+0x310>
    800068b2:	379240ef          	jal	8002b42a <printf>
    800068b6:	4529                	li	a0,10
    800068b8:	061230ef          	jal	8002a118 <putchar>
    800068bc:	b5e5                	j	800067a4 <hfence_test+0x14a>

00000000800068be <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    800068be:	1101                	addi	sp,sp,-32

    TEST_START();
    800068c0:	00026597          	auipc	a1,0x26
    800068c4:	c4858593          	addi	a1,a1,-952 # 8002c508 <__func__.22>
    800068c8:	00028517          	auipc	a0,0x28
    800068cc:	90050513          	addi	a0,a0,-1792 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    800068d0:	ec06                	sd	ra,24(sp)
    800068d2:	e822                	sd	s0,16(sp)
    800068d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800068d6:	355240ef          	jal	8002b42a <printf>
    800068da:	4529                	li	a0,10
    800068dc:	03d230ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    800068e0:	d2cfa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800068e4:	4511                	li	a0,4
    800068e6:	e22fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800068ea:	002007b7          	lui	a5,0x200
    800068ee:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800068f2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    800068f6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800068fa:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800068fe:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    80006902:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    80006906:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    8000690a:	4505                	li	a0,1
    8000690c:	dfcfa0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006910:	08200593          	li	a1,130
    80006914:	00029617          	auipc	a2,0x29
    80006918:	c0c60613          	addi	a2,a2,-1012 # 8002f520 <__func__.0+0x1638>
    8000691c:	00028517          	auipc	a0,0x28
    80006920:	8c450513          	addi	a0,a0,-1852 # 8002e1e0 <__func__.0+0x2f8>
    80006924:	307240ef          	jal	8002b42a <printf>
    80006928:	00051797          	auipc	a5,0x51
    8000692c:	6e97c783          	lbu	a5,1769(a5) # 80058011 <excpt+0x1>
    80006930:	00051497          	auipc	s1,0x51
    80006934:	6e048493          	addi	s1,s1,1760 # 80058010 <excpt>
    80006938:	00028597          	auipc	a1,0x28
    8000693c:	88058593          	addi	a1,a1,-1920 # 8002e1b8 <__func__.0+0x2d0>
    80006940:	cf89                	beqz	a5,8000695a <wfi_exception_tests_1+0x9c>
    80006942:	6498                	ld	a4,8(s1)
    80006944:	4789                	li	a5,2
    80006946:	00028597          	auipc	a1,0x28
    8000694a:	86258593          	addi	a1,a1,-1950 # 8002e1a8 <__func__.0+0x2c0>
    8000694e:	00f70663          	beq	a4,a5,8000695a <wfi_exception_tests_1+0x9c>
    80006952:	00028597          	auipc	a1,0x28
    80006956:	86658593          	addi	a1,a1,-1946 # 8002e1b8 <__func__.0+0x2d0>
    8000695a:	00028517          	auipc	a0,0x28
    8000695e:	89e50513          	addi	a0,a0,-1890 # 8002e1f8 <__func__.0+0x310>
    80006962:	2c9240ef          	jal	8002b42a <printf>
    80006966:	00051797          	auipc	a5,0x51
    8000696a:	6ab7c783          	lbu	a5,1707(a5) # 80058011 <excpt+0x1>
    8000696e:	c789                	beqz	a5,80006978 <wfi_exception_tests_1+0xba>
    80006970:	6498                	ld	a4,8(s1)
    80006972:	4789                	li	a5,2
    80006974:	00f70c63          	beq	a4,a5,8000698c <wfi_exception_tests_1+0xce>
    80006978:	00028517          	auipc	a0,0x28
    8000697c:	88850513          	addi	a0,a0,-1912 # 8002e200 <__func__.0+0x318>
    80006980:	2ab240ef          	jal	8002b42a <printf>
    80006984:	02900513          	li	a0,41
    80006988:	790230ef          	jal	8002a118 <putchar>
    8000698c:	4529                	li	a0,10
    8000698e:	78a230ef          	jal	8002a118 <putchar>
    80006992:	00051417          	auipc	s0,0x51
    80006996:	67f44403          	lbu	s0,1663(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8000699a:	00028597          	auipc	a1,0x28
    8000699e:	81e58593          	addi	a1,a1,-2018 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069a2:	cc11                	beqz	s0,800069be <wfi_exception_tests_1+0x100>
    800069a4:	6498                	ld	a4,8(s1)
    800069a6:	4789                	li	a5,2
    TEST_END();
    800069a8:	00028597          	auipc	a1,0x28
    800069ac:	80058593          	addi	a1,a1,-2048 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069b0:	00f70763          	beq	a4,a5,800069be <wfi_exception_tests_1+0x100>
    800069b4:	4401                	li	s0,0
    TEST_END();
    800069b6:	00028597          	auipc	a1,0x28
    800069ba:	80258593          	addi	a1,a1,-2046 # 8002e1b8 <__func__.0+0x2d0>
    800069be:	00028517          	auipc	a0,0x28
    800069c2:	8a250513          	addi	a0,a0,-1886 # 8002e260 <__func__.0+0x378>
    800069c6:	265240ef          	jal	8002b42a <printf>
    800069ca:	4511                	li	a0,4
    800069cc:	d3cfa0ef          	jal	80000f08 <goto_priv>
    800069d0:	e55fa0ef          	jal	80001824 <reset_state>
}
    800069d4:	60e2                	ld	ra,24(sp)
    800069d6:	8522                	mv	a0,s0
    800069d8:	6442                	ld	s0,16(sp)
    800069da:	64a2                	ld	s1,8(sp)
    800069dc:	6105                	addi	sp,sp,32
    800069de:	8082                	ret

00000000800069e0 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    800069e0:	1101                	addi	sp,sp,-32

    TEST_START();
    800069e2:	00026597          	auipc	a1,0x26
    800069e6:	b3e58593          	addi	a1,a1,-1218 # 8002c520 <__func__.21>
    800069ea:	00027517          	auipc	a0,0x27
    800069ee:	7de50513          	addi	a0,a0,2014 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    800069f2:	ec06                	sd	ra,24(sp)
    800069f4:	e822                	sd	s0,16(sp)
    800069f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800069f8:	233240ef          	jal	8002b42a <printf>
    800069fc:	4529                	li	a0,10
    800069fe:	71a230ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80006a02:	c0afa0ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006a06:	4511                	li	a0,4
    80006a08:	d00fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a0c:	002007b7          	lui	a5,0x200
    80006a10:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006a14:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006a18:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006a1c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006a20:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006a24:	be8fa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_UIE, 0b0100);
    80006a28:	00426073          	csrsi	uie,4
    80006a2c:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006a30:	4501                	li	a0,0
    80006a32:	cd6fa0ef          	jal	80000f08 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a36:	08200593          	li	a1,130
    80006a3a:	00029617          	auipc	a2,0x29
    80006a3e:	b5660613          	addi	a2,a2,-1194 # 8002f590 <__func__.0+0x16a8>
    80006a42:	00027517          	auipc	a0,0x27
    80006a46:	79e50513          	addi	a0,a0,1950 # 8002e1e0 <__func__.0+0x2f8>
    80006a4a:	1e1240ef          	jal	8002b42a <printf>
    80006a4e:	00051797          	auipc	a5,0x51
    80006a52:	5c37c783          	lbu	a5,1475(a5) # 80058011 <excpt+0x1>
    80006a56:	00051497          	auipc	s1,0x51
    80006a5a:	5ba48493          	addi	s1,s1,1466 # 80058010 <excpt>
    80006a5e:	00027597          	auipc	a1,0x27
    80006a62:	75a58593          	addi	a1,a1,1882 # 8002e1b8 <__func__.0+0x2d0>
    80006a66:	cf89                	beqz	a5,80006a80 <wfi_exception_tests_2+0xa0>
    80006a68:	6498                	ld	a4,8(s1)
    80006a6a:	4789                	li	a5,2
    80006a6c:	00027597          	auipc	a1,0x27
    80006a70:	73c58593          	addi	a1,a1,1852 # 8002e1a8 <__func__.0+0x2c0>
    80006a74:	00f70663          	beq	a4,a5,80006a80 <wfi_exception_tests_2+0xa0>
    80006a78:	00027597          	auipc	a1,0x27
    80006a7c:	74058593          	addi	a1,a1,1856 # 8002e1b8 <__func__.0+0x2d0>
    80006a80:	00027517          	auipc	a0,0x27
    80006a84:	77850513          	addi	a0,a0,1912 # 8002e1f8 <__func__.0+0x310>
    80006a88:	1a3240ef          	jal	8002b42a <printf>
    80006a8c:	00051797          	auipc	a5,0x51
    80006a90:	5857c783          	lbu	a5,1413(a5) # 80058011 <excpt+0x1>
    80006a94:	c789                	beqz	a5,80006a9e <wfi_exception_tests_2+0xbe>
    80006a96:	6498                	ld	a4,8(s1)
    80006a98:	4789                	li	a5,2
    80006a9a:	00f70c63          	beq	a4,a5,80006ab2 <wfi_exception_tests_2+0xd2>
    80006a9e:	00027517          	auipc	a0,0x27
    80006aa2:	76250513          	addi	a0,a0,1890 # 8002e200 <__func__.0+0x318>
    80006aa6:	185240ef          	jal	8002b42a <printf>
    80006aaa:	02900513          	li	a0,41
    80006aae:	66a230ef          	jal	8002a118 <putchar>
    80006ab2:	4529                	li	a0,10
    80006ab4:	664230ef          	jal	8002a118 <putchar>
    80006ab8:	00051417          	auipc	s0,0x51
    80006abc:	55944403          	lbu	s0,1369(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006ac0:	00027597          	auipc	a1,0x27
    80006ac4:	6f858593          	addi	a1,a1,1784 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ac8:	cc11                	beqz	s0,80006ae4 <wfi_exception_tests_2+0x104>
    80006aca:	6498                	ld	a4,8(s1)
    80006acc:	4789                	li	a5,2
    TEST_END();
    80006ace:	00027597          	auipc	a1,0x27
    80006ad2:	6da58593          	addi	a1,a1,1754 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ad6:	00f70763          	beq	a4,a5,80006ae4 <wfi_exception_tests_2+0x104>
    80006ada:	4401                	li	s0,0
    TEST_END();
    80006adc:	00027597          	auipc	a1,0x27
    80006ae0:	6dc58593          	addi	a1,a1,1756 # 8002e1b8 <__func__.0+0x2d0>
    80006ae4:	00027517          	auipc	a0,0x27
    80006ae8:	77c50513          	addi	a0,a0,1916 # 8002e260 <__func__.0+0x378>
    80006aec:	13f240ef          	jal	8002b42a <printf>
    80006af0:	4511                	li	a0,4
    80006af2:	c16fa0ef          	jal	80000f08 <goto_priv>
    80006af6:	d2ffa0ef          	jal	80001824 <reset_state>
}
    80006afa:	60e2                	ld	ra,24(sp)
    80006afc:	8522                	mv	a0,s0
    80006afe:	6442                	ld	s0,16(sp)
    80006b00:	64a2                	ld	s1,8(sp)
    80006b02:	6105                	addi	sp,sp,32
    80006b04:	8082                	ret

0000000080006b06 <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006b06:	1141                	addi	sp,sp,-16

    TEST_START();
    80006b08:	00026597          	auipc	a1,0x26
    80006b0c:	a3058593          	addi	a1,a1,-1488 # 8002c538 <__func__.20>
    80006b10:	00027517          	auipc	a0,0x27
    80006b14:	6b850513          	addi	a0,a0,1720 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006b18:	e406                	sd	ra,8(sp)
    80006b1a:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b1c:	10f240ef          	jal	8002b42a <printf>
    80006b20:	4529                	li	a0,10
    80006b22:	5f6230ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80006b26:	ae6fa0ef          	jal	80000e0c <test_setup_except_function>
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006b2a:	4511                	li	a0,4
    80006b2c:	bdcfa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b30:	002007b7          	lui	a5,0x200
    80006b34:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b38:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006b3c:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006b40:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006b44:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006b48:	4511                	li	a0,4
    80006b4a:	bbefa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b4e:	abefa0ef          	jal	80000e0c <test_setup_except_function>
    80006b52:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b56:	08200593          	li	a1,130
    80006b5a:	00029617          	auipc	a2,0x29
    80006b5e:	aa660613          	addi	a2,a2,-1370 # 8002f600 <__func__.0+0x1718>
    80006b62:	00027517          	auipc	a0,0x27
    80006b66:	67e50513          	addi	a0,a0,1662 # 8002e1e0 <__func__.0+0x2f8>
    80006b6a:	0c1240ef          	jal	8002b42a <printf>
    80006b6e:	00051797          	auipc	a5,0x51
    80006b72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    80006b76:	00027597          	auipc	a1,0x27
    80006b7a:	63258593          	addi	a1,a1,1586 # 8002e1a8 <__func__.0+0x2c0>
    80006b7e:	c789                	beqz	a5,80006b88 <wfi_exception_tests_3+0x82>
    80006b80:	00027597          	auipc	a1,0x27
    80006b84:	63858593          	addi	a1,a1,1592 # 8002e1b8 <__func__.0+0x2d0>
    80006b88:	00027517          	auipc	a0,0x27
    80006b8c:	67050513          	addi	a0,a0,1648 # 8002e1f8 <__func__.0+0x310>
    80006b90:	09b240ef          	jal	8002b42a <printf>
    80006b94:	00051797          	auipc	a5,0x51
    80006b98:	47d7c783          	lbu	a5,1149(a5) # 80058011 <excpt+0x1>
    80006b9c:	e7a1                	bnez	a5,80006be4 <wfi_exception_tests_3+0xde>
    80006b9e:	4529                	li	a0,10
    80006ba0:	578230ef          	jal	8002a118 <putchar>
    80006ba4:	00051797          	auipc	a5,0x51
    80006ba8:	46d7c783          	lbu	a5,1133(a5) # 80058011 <excpt+0x1>
    80006bac:	e795                	bnez	a5,80006bd8 <wfi_exception_tests_3+0xd2>
    80006bae:	4405                	li	s0,1
        excpt.triggered == false
    );  

   
    TEST_END();
    80006bb0:	00027597          	auipc	a1,0x27
    80006bb4:	5f858593          	addi	a1,a1,1528 # 8002e1a8 <__func__.0+0x2c0>
    80006bb8:	00027517          	auipc	a0,0x27
    80006bbc:	6a850513          	addi	a0,a0,1704 # 8002e260 <__func__.0+0x378>
    80006bc0:	06b240ef          	jal	8002b42a <printf>
    80006bc4:	4511                	li	a0,4
    80006bc6:	b42fa0ef          	jal	80000f08 <goto_priv>
    80006bca:	c5bfa0ef          	jal	80001824 <reset_state>
}
    80006bce:	60a2                	ld	ra,8(sp)
    80006bd0:	8522                	mv	a0,s0
    80006bd2:	6402                	ld	s0,0(sp)
    80006bd4:	0141                	addi	sp,sp,16
    80006bd6:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bd8:	4401                	li	s0,0
    TEST_END();
    80006bda:	00027597          	auipc	a1,0x27
    80006bde:	5de58593          	addi	a1,a1,1502 # 8002e1b8 <__func__.0+0x2d0>
    80006be2:	bfd9                	j	80006bb8 <wfi_exception_tests_3+0xb2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006be4:	00027517          	auipc	a0,0x27
    80006be8:	61c50513          	addi	a0,a0,1564 # 8002e200 <__func__.0+0x318>
    80006bec:	03f240ef          	jal	8002b42a <printf>
    80006bf0:	02900513          	li	a0,41
    80006bf4:	524230ef          	jal	8002a118 <putchar>
    80006bf8:	b75d                	j	80006b9e <wfi_exception_tests_3+0x98>

0000000080006bfa <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006bfa:	1141                	addi	sp,sp,-16

    TEST_START();
    80006bfc:	00026597          	auipc	a1,0x26
    80006c00:	95458593          	addi	a1,a1,-1708 # 8002c550 <__func__.19>
    80006c04:	00027517          	auipc	a0,0x27
    80006c08:	5c450513          	addi	a0,a0,1476 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006c0c:	e406                	sd	ra,8(sp)
    80006c0e:	e022                	sd	s0,0(sp)
    TEST_START();
    80006c10:	01b240ef          	jal	8002b42a <printf>
    80006c14:	4529                	li	a0,10
    80006c16:	502230ef          	jal	8002a118 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006c1a:	9f2fa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c1e:	002007b7          	lui	a5,0x200
    80006c22:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c26:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006c2a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006c2e:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006c32:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006c36:	450d                	li	a0,3
    80006c38:	ad0fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c3c:	9d0fa0ef          	jal	80000e0c <test_setup_except_function>
    80006c40:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c44:	08200593          	li	a1,130
    80006c48:	00029617          	auipc	a2,0x29
    80006c4c:	a2860613          	addi	a2,a2,-1496 # 8002f670 <__func__.0+0x1788>
    80006c50:	00027517          	auipc	a0,0x27
    80006c54:	59050513          	addi	a0,a0,1424 # 8002e1e0 <__func__.0+0x2f8>
    80006c58:	7d2240ef          	jal	8002b42a <printf>
    80006c5c:	00051797          	auipc	a5,0x51
    80006c60:	3b57c783          	lbu	a5,949(a5) # 80058011 <excpt+0x1>
    80006c64:	00027597          	auipc	a1,0x27
    80006c68:	54458593          	addi	a1,a1,1348 # 8002e1a8 <__func__.0+0x2c0>
    80006c6c:	c789                	beqz	a5,80006c76 <wfi_exception_tests_4+0x7c>
    80006c6e:	00027597          	auipc	a1,0x27
    80006c72:	54a58593          	addi	a1,a1,1354 # 8002e1b8 <__func__.0+0x2d0>
    80006c76:	00027517          	auipc	a0,0x27
    80006c7a:	58250513          	addi	a0,a0,1410 # 8002e1f8 <__func__.0+0x310>
    80006c7e:	7ac240ef          	jal	8002b42a <printf>
    80006c82:	00051797          	auipc	a5,0x51
    80006c86:	38f7c783          	lbu	a5,911(a5) # 80058011 <excpt+0x1>
    80006c8a:	e7a1                	bnez	a5,80006cd2 <wfi_exception_tests_4+0xd8>
    80006c8c:	4529                	li	a0,10
    80006c8e:	48a230ef          	jal	8002a118 <putchar>
    80006c92:	00051797          	auipc	a5,0x51
    80006c96:	37f7c783          	lbu	a5,895(a5) # 80058011 <excpt+0x1>
    80006c9a:	e795                	bnez	a5,80006cc6 <wfi_exception_tests_4+0xcc>
    80006c9c:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006c9e:	00027597          	auipc	a1,0x27
    80006ca2:	50a58593          	addi	a1,a1,1290 # 8002e1a8 <__func__.0+0x2c0>
    80006ca6:	00027517          	auipc	a0,0x27
    80006caa:	5ba50513          	addi	a0,a0,1466 # 8002e260 <__func__.0+0x378>
    80006cae:	77c240ef          	jal	8002b42a <printf>
    80006cb2:	4511                	li	a0,4
    80006cb4:	a54fa0ef          	jal	80000f08 <goto_priv>
    80006cb8:	b6dfa0ef          	jal	80001824 <reset_state>
}
    80006cbc:	60a2                	ld	ra,8(sp)
    80006cbe:	8522                	mv	a0,s0
    80006cc0:	6402                	ld	s0,0(sp)
    80006cc2:	0141                	addi	sp,sp,16
    80006cc4:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006cc6:	4401                	li	s0,0
    TEST_END();
    80006cc8:	00027597          	auipc	a1,0x27
    80006ccc:	4f058593          	addi	a1,a1,1264 # 8002e1b8 <__func__.0+0x2d0>
    80006cd0:	bfd9                	j	80006ca6 <wfi_exception_tests_4+0xac>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006cd2:	00027517          	auipc	a0,0x27
    80006cd6:	52e50513          	addi	a0,a0,1326 # 8002e200 <__func__.0+0x318>
    80006cda:	750240ef          	jal	8002b42a <printf>
    80006cde:	02900513          	li	a0,41
    80006ce2:	436230ef          	jal	8002a118 <putchar>
    80006ce6:	b75d                	j	80006c8c <wfi_exception_tests_4+0x92>

0000000080006ce8 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006ce8:	1141                	addi	sp,sp,-16

    TEST_START();
    80006cea:	00026597          	auipc	a1,0x26
    80006cee:	87e58593          	addi	a1,a1,-1922 # 8002c568 <__func__.18>
    80006cf2:	00027517          	auipc	a0,0x27
    80006cf6:	4d650513          	addi	a0,a0,1238 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006cfa:	e406                	sd	ra,8(sp)
    80006cfc:	e022                	sd	s0,0(sp)
    TEST_START();
    80006cfe:	72c240ef          	jal	8002b42a <printf>
    80006d02:	4529                	li	a0,10
    80006d04:	414230ef          	jal	8002a118 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d08:	904fa0ef          	jal	80000e0c <test_setup_except_function>

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d0c:	002007b7          	lui	a5,0x200
    80006d10:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d14:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d18:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006d1c:	4509                	li	a0,2
    80006d1e:	9eafa0ef          	jal	80000f08 <goto_priv>
    goto_priv(PRIV_M); 
    80006d22:	4511                	li	a0,4
    80006d24:	9e4fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006d28:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006d2c:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006d30:	4509                	li	a0,2
    80006d32:	9d6fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d36:	8d6fa0ef          	jal	80000e0c <test_setup_except_function>
    80006d3a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d3e:	08200593          	li	a1,130
    80006d42:	00029617          	auipc	a2,0x29
    80006d46:	99660613          	addi	a2,a2,-1642 # 8002f6d8 <__func__.0+0x17f0>
    80006d4a:	00027517          	auipc	a0,0x27
    80006d4e:	49650513          	addi	a0,a0,1174 # 8002e1e0 <__func__.0+0x2f8>
    80006d52:	6d8240ef          	jal	8002b42a <printf>
    80006d56:	00051797          	auipc	a5,0x51
    80006d5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    80006d5e:	00027597          	auipc	a1,0x27
    80006d62:	44a58593          	addi	a1,a1,1098 # 8002e1a8 <__func__.0+0x2c0>
    80006d66:	c789                	beqz	a5,80006d70 <wfi_exception_tests_5+0x88>
    80006d68:	00027597          	auipc	a1,0x27
    80006d6c:	45058593          	addi	a1,a1,1104 # 8002e1b8 <__func__.0+0x2d0>
    80006d70:	00027517          	auipc	a0,0x27
    80006d74:	48850513          	addi	a0,a0,1160 # 8002e1f8 <__func__.0+0x310>
    80006d78:	6b2240ef          	jal	8002b42a <printf>
    80006d7c:	00051797          	auipc	a5,0x51
    80006d80:	2957c783          	lbu	a5,661(a5) # 80058011 <excpt+0x1>
    80006d84:	e7a1                	bnez	a5,80006dcc <wfi_exception_tests_5+0xe4>
    80006d86:	4529                	li	a0,10
    80006d88:	390230ef          	jal	8002a118 <putchar>
    80006d8c:	00051797          	auipc	a5,0x51
    80006d90:	2857c783          	lbu	a5,645(a5) # 80058011 <excpt+0x1>
    80006d94:	e795                	bnez	a5,80006dc0 <wfi_exception_tests_5+0xd8>
    80006d96:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006d98:	00027597          	auipc	a1,0x27
    80006d9c:	41058593          	addi	a1,a1,1040 # 8002e1a8 <__func__.0+0x2c0>
    80006da0:	00027517          	auipc	a0,0x27
    80006da4:	4c050513          	addi	a0,a0,1216 # 8002e260 <__func__.0+0x378>
    80006da8:	682240ef          	jal	8002b42a <printf>
    80006dac:	4511                	li	a0,4
    80006dae:	95afa0ef          	jal	80000f08 <goto_priv>
    80006db2:	a73fa0ef          	jal	80001824 <reset_state>
}
    80006db6:	60a2                	ld	ra,8(sp)
    80006db8:	8522                	mv	a0,s0
    80006dba:	6402                	ld	s0,0(sp)
    80006dbc:	0141                	addi	sp,sp,16
    80006dbe:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006dc0:	4401                	li	s0,0
    TEST_END();
    80006dc2:	00027597          	auipc	a1,0x27
    80006dc6:	3f658593          	addi	a1,a1,1014 # 8002e1b8 <__func__.0+0x2d0>
    80006dca:	bfd9                	j	80006da0 <wfi_exception_tests_5+0xb8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006dcc:	00027517          	auipc	a0,0x27
    80006dd0:	43450513          	addi	a0,a0,1076 # 8002e200 <__func__.0+0x318>
    80006dd4:	656240ef          	jal	8002b42a <printf>
    80006dd8:	02900513          	li	a0,41
    80006ddc:	33c230ef          	jal	8002a118 <putchar>
    80006de0:	b75d                	j	80006d86 <wfi_exception_tests_5+0x9e>

0000000080006de2 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006de2:	1141                	addi	sp,sp,-16

    TEST_START();
    80006de4:	00025597          	auipc	a1,0x25
    80006de8:	79c58593          	addi	a1,a1,1948 # 8002c580 <__func__.17>
    80006dec:	00027517          	auipc	a0,0x27
    80006df0:	3dc50513          	addi	a0,a0,988 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006df4:	e406                	sd	ra,8(sp)
    80006df6:	e022                	sd	s0,0(sp)
    TEST_START();
    80006df8:	632240ef          	jal	8002b42a <printf>
    80006dfc:	4529                	li	a0,10
    80006dfe:	31a230ef          	jal	8002a118 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e02:	80afa0ef          	jal	80000e0c <test_setup_except_function>
    
    goto_priv(PRIV_M);
    80006e06:	4511                	li	a0,4
    80006e08:	900fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e0c:	002007b7          	lui	a5,0x200
    80006e10:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006e14:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006e18:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006e1c:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006e20:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006e24:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006e28:	4511                	li	a0,4
    80006e2a:	8defa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e2e:	fdff90ef          	jal	80000e0c <test_setup_except_function>
    80006e32:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e36:	08200593          	li	a1,130
    80006e3a:	00029617          	auipc	a2,0x29
    80006e3e:	90660613          	addi	a2,a2,-1786 # 8002f740 <__func__.0+0x1858>
    80006e42:	00027517          	auipc	a0,0x27
    80006e46:	39e50513          	addi	a0,a0,926 # 8002e1e0 <__func__.0+0x2f8>
    80006e4a:	5e0240ef          	jal	8002b42a <printf>
    80006e4e:	00051797          	auipc	a5,0x51
    80006e52:	1c37c783          	lbu	a5,451(a5) # 80058011 <excpt+0x1>
    80006e56:	00027597          	auipc	a1,0x27
    80006e5a:	35258593          	addi	a1,a1,850 # 8002e1a8 <__func__.0+0x2c0>
    80006e5e:	c789                	beqz	a5,80006e68 <wfi_exception_tests_6+0x86>
    80006e60:	00027597          	auipc	a1,0x27
    80006e64:	35858593          	addi	a1,a1,856 # 8002e1b8 <__func__.0+0x2d0>
    80006e68:	00027517          	auipc	a0,0x27
    80006e6c:	39050513          	addi	a0,a0,912 # 8002e1f8 <__func__.0+0x310>
    80006e70:	5ba240ef          	jal	8002b42a <printf>
    80006e74:	00051797          	auipc	a5,0x51
    80006e78:	19d7c783          	lbu	a5,413(a5) # 80058011 <excpt+0x1>
    80006e7c:	e7a1                	bnez	a5,80006ec4 <wfi_exception_tests_6+0xe2>
    80006e7e:	4529                	li	a0,10
    80006e80:	298230ef          	jal	8002a118 <putchar>
    80006e84:	00051797          	auipc	a5,0x51
    80006e88:	18d7c783          	lbu	a5,397(a5) # 80058011 <excpt+0x1>
    80006e8c:	e795                	bnez	a5,80006eb8 <wfi_exception_tests_6+0xd6>
    80006e8e:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006e90:	00027597          	auipc	a1,0x27
    80006e94:	31858593          	addi	a1,a1,792 # 8002e1a8 <__func__.0+0x2c0>
    80006e98:	00027517          	auipc	a0,0x27
    80006e9c:	3c850513          	addi	a0,a0,968 # 8002e260 <__func__.0+0x378>
    80006ea0:	58a240ef          	jal	8002b42a <printf>
    80006ea4:	4511                	li	a0,4
    80006ea6:	862fa0ef          	jal	80000f08 <goto_priv>
    80006eaa:	97bfa0ef          	jal	80001824 <reset_state>
}
    80006eae:	60a2                	ld	ra,8(sp)
    80006eb0:	8522                	mv	a0,s0
    80006eb2:	6402                	ld	s0,0(sp)
    80006eb4:	0141                	addi	sp,sp,16
    80006eb6:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006eb8:	4401                	li	s0,0
    TEST_END();
    80006eba:	00027597          	auipc	a1,0x27
    80006ebe:	2fe58593          	addi	a1,a1,766 # 8002e1b8 <__func__.0+0x2d0>
    80006ec2:	bfd9                	j	80006e98 <wfi_exception_tests_6+0xb6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ec4:	00027517          	auipc	a0,0x27
    80006ec8:	33c50513          	addi	a0,a0,828 # 8002e200 <__func__.0+0x318>
    80006ecc:	55e240ef          	jal	8002b42a <printf>
    80006ed0:	02900513          	li	a0,41
    80006ed4:	244230ef          	jal	8002a118 <putchar>
    80006ed8:	b75d                	j	80006e7e <wfi_exception_tests_6+0x9c>

0000000080006eda <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006eda:	1141                	addi	sp,sp,-16

    TEST_START();
    80006edc:	00025597          	auipc	a1,0x25
    80006ee0:	6bc58593          	addi	a1,a1,1724 # 8002c598 <__func__.16>
    80006ee4:	00027517          	auipc	a0,0x27
    80006ee8:	2e450513          	addi	a0,a0,740 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    80006eec:	e406                	sd	ra,8(sp)
    80006eee:	e022                	sd	s0,0(sp)
    TEST_START();
    80006ef0:	53a240ef          	jal	8002b42a <printf>
    80006ef4:	4529                	li	a0,10
    80006ef6:	222230ef          	jal	8002a118 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006efa:	f13f90ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006efe:	4511                	li	a0,4
    80006f00:	808fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f04:	002007b7          	lui	a5,0x200
    80006f08:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006f0c:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006f10:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006f14:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006f18:	4509                	li	a0,2
    80006f1a:	feff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f1e:	eeff90ef          	jal	80000e0c <test_setup_except_function>
    80006f22:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f26:	08200593          	li	a1,130
    80006f2a:	00029617          	auipc	a2,0x29
    80006f2e:	88660613          	addi	a2,a2,-1914 # 8002f7b0 <__func__.0+0x18c8>
    80006f32:	00027517          	auipc	a0,0x27
    80006f36:	2ae50513          	addi	a0,a0,686 # 8002e1e0 <__func__.0+0x2f8>
    80006f3a:	4f0240ef          	jal	8002b42a <printf>
    80006f3e:	00051797          	auipc	a5,0x51
    80006f42:	0d37c783          	lbu	a5,211(a5) # 80058011 <excpt+0x1>
    80006f46:	00027597          	auipc	a1,0x27
    80006f4a:	26258593          	addi	a1,a1,610 # 8002e1a8 <__func__.0+0x2c0>
    80006f4e:	c789                	beqz	a5,80006f58 <wfi_exception_tests_7+0x7e>
    80006f50:	00027597          	auipc	a1,0x27
    80006f54:	26858593          	addi	a1,a1,616 # 8002e1b8 <__func__.0+0x2d0>
    80006f58:	00027517          	auipc	a0,0x27
    80006f5c:	2a050513          	addi	a0,a0,672 # 8002e1f8 <__func__.0+0x310>
    80006f60:	4ca240ef          	jal	8002b42a <printf>
    80006f64:	00051797          	auipc	a5,0x51
    80006f68:	0ad7c783          	lbu	a5,173(a5) # 80058011 <excpt+0x1>
    80006f6c:	e7a1                	bnez	a5,80006fb4 <wfi_exception_tests_7+0xda>
    80006f6e:	4529                	li	a0,10
    80006f70:	1a8230ef          	jal	8002a118 <putchar>
    80006f74:	00051797          	auipc	a5,0x51
    80006f78:	09d7c783          	lbu	a5,157(a5) # 80058011 <excpt+0x1>
    80006f7c:	e795                	bnez	a5,80006fa8 <wfi_exception_tests_7+0xce>
    80006f7e:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006f80:	00027597          	auipc	a1,0x27
    80006f84:	22858593          	addi	a1,a1,552 # 8002e1a8 <__func__.0+0x2c0>
    80006f88:	00027517          	auipc	a0,0x27
    80006f8c:	2d850513          	addi	a0,a0,728 # 8002e260 <__func__.0+0x378>
    80006f90:	49a240ef          	jal	8002b42a <printf>
    80006f94:	4511                	li	a0,4
    80006f96:	f73f90ef          	jal	80000f08 <goto_priv>
    80006f9a:	88bfa0ef          	jal	80001824 <reset_state>
}
    80006f9e:	60a2                	ld	ra,8(sp)
    80006fa0:	8522                	mv	a0,s0
    80006fa2:	6402                	ld	s0,0(sp)
    80006fa4:	0141                	addi	sp,sp,16
    80006fa6:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fa8:	4401                	li	s0,0
    TEST_END();
    80006faa:	00027597          	auipc	a1,0x27
    80006fae:	20e58593          	addi	a1,a1,526 # 8002e1b8 <__func__.0+0x2d0>
    80006fb2:	bfd9                	j	80006f88 <wfi_exception_tests_7+0xae>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fb4:	00027517          	auipc	a0,0x27
    80006fb8:	24c50513          	addi	a0,a0,588 # 8002e200 <__func__.0+0x318>
    80006fbc:	46e240ef          	jal	8002b42a <printf>
    80006fc0:	02900513          	li	a0,41
    80006fc4:	154230ef          	jal	8002a118 <putchar>
    80006fc8:	b75d                	j	80006f6e <wfi_exception_tests_7+0x94>

0000000080006fca <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006fca:	1141                	addi	sp,sp,-16

    TEST_START();
    80006fcc:	00025597          	auipc	a1,0x25
    80006fd0:	5e458593          	addi	a1,a1,1508 # 8002c5b0 <__func__.15>
    80006fd4:	00027517          	auipc	a0,0x27
    80006fd8:	1f450513          	addi	a0,a0,500 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    80006fdc:	e406                	sd	ra,8(sp)
    80006fde:	e022                	sd	s0,0(sp)
    TEST_START();
    80006fe0:	44a240ef          	jal	8002b42a <printf>
    80006fe4:	4529                	li	a0,10
    80006fe6:	132230ef          	jal	8002a118 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006fea:	4511                	li	a0,4
    80006fec:	f1df90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006ff0:	002007b7          	lui	a5,0x200
    80006ff4:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006ff8:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80006ffc:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    80007000:	4509                	li	a0,2
    80007002:	f07f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007006:	e07f90ef          	jal	80000e0c <test_setup_except_function>
    8000700a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000700e:	08200593          	li	a1,130
    80007012:	00029617          	auipc	a2,0x29
    80007016:	80660613          	addi	a2,a2,-2042 # 8002f818 <__func__.0+0x1930>
    8000701a:	00027517          	auipc	a0,0x27
    8000701e:	1c650513          	addi	a0,a0,454 # 8002e1e0 <__func__.0+0x2f8>
    80007022:	408240ef          	jal	8002b42a <printf>
    80007026:	00051797          	auipc	a5,0x51
    8000702a:	feb7c783          	lbu	a5,-21(a5) # 80058011 <excpt+0x1>
    8000702e:	00027597          	auipc	a1,0x27
    80007032:	17a58593          	addi	a1,a1,378 # 8002e1a8 <__func__.0+0x2c0>
    80007036:	c789                	beqz	a5,80007040 <wfi_exception_tests_8+0x76>
    80007038:	00027597          	auipc	a1,0x27
    8000703c:	18058593          	addi	a1,a1,384 # 8002e1b8 <__func__.0+0x2d0>
    80007040:	00027517          	auipc	a0,0x27
    80007044:	1b850513          	addi	a0,a0,440 # 8002e1f8 <__func__.0+0x310>
    80007048:	3e2240ef          	jal	8002b42a <printf>
    8000704c:	00051797          	auipc	a5,0x51
    80007050:	fc57c783          	lbu	a5,-59(a5) # 80058011 <excpt+0x1>
    80007054:	e7a1                	bnez	a5,8000709c <wfi_exception_tests_8+0xd2>
    80007056:	4529                	li	a0,10
    80007058:	0c0230ef          	jal	8002a118 <putchar>
    8000705c:	00051797          	auipc	a5,0x51
    80007060:	fb57c783          	lbu	a5,-75(a5) # 80058011 <excpt+0x1>
    80007064:	e795                	bnez	a5,80007090 <wfi_exception_tests_8+0xc6>
    80007066:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80007068:	00027597          	auipc	a1,0x27
    8000706c:	14058593          	addi	a1,a1,320 # 8002e1a8 <__func__.0+0x2c0>
    80007070:	00027517          	auipc	a0,0x27
    80007074:	1f050513          	addi	a0,a0,496 # 8002e260 <__func__.0+0x378>
    80007078:	3b2240ef          	jal	8002b42a <printf>
    8000707c:	4511                	li	a0,4
    8000707e:	e8bf90ef          	jal	80000f08 <goto_priv>
    80007082:	fa2fa0ef          	jal	80001824 <reset_state>
}
    80007086:	60a2                	ld	ra,8(sp)
    80007088:	8522                	mv	a0,s0
    8000708a:	6402                	ld	s0,0(sp)
    8000708c:	0141                	addi	sp,sp,16
    8000708e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007090:	4401                	li	s0,0
    TEST_END();
    80007092:	00027597          	auipc	a1,0x27
    80007096:	12658593          	addi	a1,a1,294 # 8002e1b8 <__func__.0+0x2d0>
    8000709a:	bfd9                	j	80007070 <wfi_exception_tests_8+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000709c:	00027517          	auipc	a0,0x27
    800070a0:	16450513          	addi	a0,a0,356 # 8002e200 <__func__.0+0x318>
    800070a4:	386240ef          	jal	8002b42a <printf>
    800070a8:	02900513          	li	a0,41
    800070ac:	06c230ef          	jal	8002a118 <putchar>
    800070b0:	b75d                	j	80007056 <wfi_exception_tests_8+0x8c>

00000000800070b2 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    800070b2:	1141                	addi	sp,sp,-16

    TEST_START();
    800070b4:	00025597          	auipc	a1,0x25
    800070b8:	51458593          	addi	a1,a1,1300 # 8002c5c8 <__func__.14>
    800070bc:	00027517          	auipc	a0,0x27
    800070c0:	10c50513          	addi	a0,a0,268 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    800070c4:	e406                	sd	ra,8(sp)
    800070c6:	e022                	sd	s0,0(sp)
    TEST_START();
    800070c8:	362240ef          	jal	8002b42a <printf>
    800070cc:	4529                	li	a0,10
    800070ce:	04a230ef          	jal	8002a118 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800070d2:	4511                	li	a0,4
    800070d4:	e35f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800070d8:	002007b7          	lui	a5,0x200
    800070dc:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800070e0:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800070e4:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    800070e8:	450d                	li	a0,3
    800070ea:	e1ff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800070ee:	d1ff90ef          	jal	80000e0c <test_setup_except_function>
    800070f2:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070f6:	08200593          	li	a1,130
    800070fa:	00028617          	auipc	a2,0x28
    800070fe:	71e60613          	addi	a2,a2,1822 # 8002f818 <__func__.0+0x1930>
    80007102:	00027517          	auipc	a0,0x27
    80007106:	0de50513          	addi	a0,a0,222 # 8002e1e0 <__func__.0+0x2f8>
    8000710a:	320240ef          	jal	8002b42a <printf>
    8000710e:	00051797          	auipc	a5,0x51
    80007112:	f037c783          	lbu	a5,-253(a5) # 80058011 <excpt+0x1>
    80007116:	00027597          	auipc	a1,0x27
    8000711a:	09258593          	addi	a1,a1,146 # 8002e1a8 <__func__.0+0x2c0>
    8000711e:	c789                	beqz	a5,80007128 <wfi_exception_tests_9+0x76>
    80007120:	00027597          	auipc	a1,0x27
    80007124:	09858593          	addi	a1,a1,152 # 8002e1b8 <__func__.0+0x2d0>
    80007128:	00027517          	auipc	a0,0x27
    8000712c:	0d050513          	addi	a0,a0,208 # 8002e1f8 <__func__.0+0x310>
    80007130:	2fa240ef          	jal	8002b42a <printf>
    80007134:	00051797          	auipc	a5,0x51
    80007138:	edd7c783          	lbu	a5,-291(a5) # 80058011 <excpt+0x1>
    8000713c:	e7a1                	bnez	a5,80007184 <wfi_exception_tests_9+0xd2>
    8000713e:	4529                	li	a0,10
    80007140:	7d9220ef          	jal	8002a118 <putchar>
    80007144:	00051797          	auipc	a5,0x51
    80007148:	ecd7c783          	lbu	a5,-307(a5) # 80058011 <excpt+0x1>
    8000714c:	e795                	bnez	a5,80007178 <wfi_exception_tests_9+0xc6>
    8000714e:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007150:	00027597          	auipc	a1,0x27
    80007154:	05858593          	addi	a1,a1,88 # 8002e1a8 <__func__.0+0x2c0>
    80007158:	00027517          	auipc	a0,0x27
    8000715c:	10850513          	addi	a0,a0,264 # 8002e260 <__func__.0+0x378>
    80007160:	2ca240ef          	jal	8002b42a <printf>
    80007164:	4511                	li	a0,4
    80007166:	da3f90ef          	jal	80000f08 <goto_priv>
    8000716a:	ebafa0ef          	jal	80001824 <reset_state>
}
    8000716e:	60a2                	ld	ra,8(sp)
    80007170:	8522                	mv	a0,s0
    80007172:	6402                	ld	s0,0(sp)
    80007174:	0141                	addi	sp,sp,16
    80007176:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007178:	4401                	li	s0,0
    TEST_END();
    8000717a:	00027597          	auipc	a1,0x27
    8000717e:	03e58593          	addi	a1,a1,62 # 8002e1b8 <__func__.0+0x2d0>
    80007182:	bfd9                	j	80007158 <wfi_exception_tests_9+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007184:	00027517          	auipc	a0,0x27
    80007188:	07c50513          	addi	a0,a0,124 # 8002e200 <__func__.0+0x318>
    8000718c:	29e240ef          	jal	8002b42a <printf>
    80007190:	02900513          	li	a0,41
    80007194:	785220ef          	jal	8002a118 <putchar>
    80007198:	b75d                	j	8000713e <wfi_exception_tests_9+0x8c>

000000008000719a <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    8000719a:	1141                	addi	sp,sp,-16

    TEST_START();
    8000719c:	00025597          	auipc	a1,0x25
    800071a0:	44458593          	addi	a1,a1,1092 # 8002c5e0 <__func__.13>
    800071a4:	00027517          	auipc	a0,0x27
    800071a8:	02450513          	addi	a0,a0,36 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    800071ac:	e406                	sd	ra,8(sp)
    800071ae:	e022                	sd	s0,0(sp)
    TEST_START();
    800071b0:	27a240ef          	jal	8002b42a <printf>
    800071b4:	4529                	li	a0,10
    800071b6:	763220ef          	jal	8002a118 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800071ba:	4511                	li	a0,4
    800071bc:	d4df90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071c0:	002007b7          	lui	a5,0x200
    800071c4:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    800071c8:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    800071cc:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    800071d0:	4511                	li	a0,4
    800071d2:	d37f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800071d6:	c37f90ef          	jal	80000e0c <test_setup_except_function>
    800071da:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071de:	08200593          	li	a1,130
    800071e2:	00028617          	auipc	a2,0x28
    800071e6:	67e60613          	addi	a2,a2,1662 # 8002f860 <__func__.0+0x1978>
    800071ea:	00027517          	auipc	a0,0x27
    800071ee:	ff650513          	addi	a0,a0,-10 # 8002e1e0 <__func__.0+0x2f8>
    800071f2:	238240ef          	jal	8002b42a <printf>
    800071f6:	00051797          	auipc	a5,0x51
    800071fa:	e1b7c783          	lbu	a5,-485(a5) # 80058011 <excpt+0x1>
    800071fe:	00027597          	auipc	a1,0x27
    80007202:	faa58593          	addi	a1,a1,-86 # 8002e1a8 <__func__.0+0x2c0>
    80007206:	c789                	beqz	a5,80007210 <wfi_exception_tests_10+0x76>
    80007208:	00027597          	auipc	a1,0x27
    8000720c:	fb058593          	addi	a1,a1,-80 # 8002e1b8 <__func__.0+0x2d0>
    80007210:	00027517          	auipc	a0,0x27
    80007214:	fe850513          	addi	a0,a0,-24 # 8002e1f8 <__func__.0+0x310>
    80007218:	212240ef          	jal	8002b42a <printf>
    8000721c:	00051797          	auipc	a5,0x51
    80007220:	df57c783          	lbu	a5,-523(a5) # 80058011 <excpt+0x1>
    80007224:	e7a1                	bnez	a5,8000726c <wfi_exception_tests_10+0xd2>
    80007226:	4529                	li	a0,10
    80007228:	6f1220ef          	jal	8002a118 <putchar>
    8000722c:	00051797          	auipc	a5,0x51
    80007230:	de57c783          	lbu	a5,-539(a5) # 80058011 <excpt+0x1>
    80007234:	e795                	bnez	a5,80007260 <wfi_exception_tests_10+0xc6>
    80007236:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007238:	00027597          	auipc	a1,0x27
    8000723c:	f7058593          	addi	a1,a1,-144 # 8002e1a8 <__func__.0+0x2c0>
    80007240:	00027517          	auipc	a0,0x27
    80007244:	02050513          	addi	a0,a0,32 # 8002e260 <__func__.0+0x378>
    80007248:	1e2240ef          	jal	8002b42a <printf>
    8000724c:	4511                	li	a0,4
    8000724e:	cbbf90ef          	jal	80000f08 <goto_priv>
    80007252:	dd2fa0ef          	jal	80001824 <reset_state>
}
    80007256:	60a2                	ld	ra,8(sp)
    80007258:	8522                	mv	a0,s0
    8000725a:	6402                	ld	s0,0(sp)
    8000725c:	0141                	addi	sp,sp,16
    8000725e:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007260:	4401                	li	s0,0
    TEST_END();
    80007262:	00027597          	auipc	a1,0x27
    80007266:	f5658593          	addi	a1,a1,-170 # 8002e1b8 <__func__.0+0x2d0>
    8000726a:	bfd9                	j	80007240 <wfi_exception_tests_10+0xa6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000726c:	00027517          	auipc	a0,0x27
    80007270:	f9450513          	addi	a0,a0,-108 # 8002e200 <__func__.0+0x318>
    80007274:	1b6240ef          	jal	8002b42a <printf>
    80007278:	02900513          	li	a0,41
    8000727c:	69d220ef          	jal	8002a118 <putchar>
    80007280:	b75d                	j	80007226 <wfi_exception_tests_10+0x8c>

0000000080007282 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    80007282:	1141                	addi	sp,sp,-16

    TEST_START();
    80007284:	00025597          	auipc	a1,0x25
    80007288:	37458593          	addi	a1,a1,884 # 8002c5f8 <__func__.12>
    8000728c:	00027517          	auipc	a0,0x27
    80007290:	f3c50513          	addi	a0,a0,-196 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    80007294:	e406                	sd	ra,8(sp)
    80007296:	e022                	sd	s0,0(sp)
    TEST_START();
    80007298:	192240ef          	jal	8002b42a <printf>
    8000729c:	4529                	li	a0,10
    8000729e:	67b220ef          	jal	8002a118 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800072a2:	4511                	li	a0,4
    800072a4:	c65f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072a8:	002007b7          	lui	a5,0x200
    800072ac:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800072b0:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    800072b4:	57fd                	li	a5,-1
    800072b6:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    800072ba:	4509                	li	a0,2
    800072bc:	c4df90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800072c0:	b4df90ef          	jal	80000e0c <test_setup_except_function>
    800072c4:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800072c8:	08200593          	li	a1,130
    800072cc:	00028617          	auipc	a2,0x28
    800072d0:	5dc60613          	addi	a2,a2,1500 # 8002f8a8 <__func__.0+0x19c0>
    800072d4:	00027517          	auipc	a0,0x27
    800072d8:	f0c50513          	addi	a0,a0,-244 # 8002e1e0 <__func__.0+0x2f8>
    800072dc:	14e240ef          	jal	8002b42a <printf>
    800072e0:	00051797          	auipc	a5,0x51
    800072e4:	d317c783          	lbu	a5,-719(a5) # 80058011 <excpt+0x1>
    800072e8:	00027597          	auipc	a1,0x27
    800072ec:	ec058593          	addi	a1,a1,-320 # 8002e1a8 <__func__.0+0x2c0>
    800072f0:	c789                	beqz	a5,800072fa <wfi_exception_tests_11+0x78>
    800072f2:	00027597          	auipc	a1,0x27
    800072f6:	ec658593          	addi	a1,a1,-314 # 8002e1b8 <__func__.0+0x2d0>
    800072fa:	00027517          	auipc	a0,0x27
    800072fe:	efe50513          	addi	a0,a0,-258 # 8002e1f8 <__func__.0+0x310>
    80007302:	128240ef          	jal	8002b42a <printf>
    80007306:	00051797          	auipc	a5,0x51
    8000730a:	d0b7c783          	lbu	a5,-757(a5) # 80058011 <excpt+0x1>
    8000730e:	e7a1                	bnez	a5,80007356 <wfi_exception_tests_11+0xd4>
    80007310:	4529                	li	a0,10
    80007312:	607220ef          	jal	8002a118 <putchar>
    80007316:	00051797          	auipc	a5,0x51
    8000731a:	cfb7c783          	lbu	a5,-773(a5) # 80058011 <excpt+0x1>
    8000731e:	e795                	bnez	a5,8000734a <wfi_exception_tests_11+0xc8>
    80007320:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007322:	00027597          	auipc	a1,0x27
    80007326:	e8658593          	addi	a1,a1,-378 # 8002e1a8 <__func__.0+0x2c0>
    8000732a:	00027517          	auipc	a0,0x27
    8000732e:	f3650513          	addi	a0,a0,-202 # 8002e260 <__func__.0+0x378>
    80007332:	0f8240ef          	jal	8002b42a <printf>
    80007336:	4511                	li	a0,4
    80007338:	bd1f90ef          	jal	80000f08 <goto_priv>
    8000733c:	ce8fa0ef          	jal	80001824 <reset_state>
}
    80007340:	60a2                	ld	ra,8(sp)
    80007342:	8522                	mv	a0,s0
    80007344:	6402                	ld	s0,0(sp)
    80007346:	0141                	addi	sp,sp,16
    80007348:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000734a:	4401                	li	s0,0
    TEST_END();
    8000734c:	00027597          	auipc	a1,0x27
    80007350:	e6c58593          	addi	a1,a1,-404 # 8002e1b8 <__func__.0+0x2d0>
    80007354:	bfd9                	j	8000732a <wfi_exception_tests_11+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007356:	00027517          	auipc	a0,0x27
    8000735a:	eaa50513          	addi	a0,a0,-342 # 8002e200 <__func__.0+0x318>
    8000735e:	0cc240ef          	jal	8002b42a <printf>
    80007362:	02900513          	li	a0,41
    80007366:	5b3220ef          	jal	8002a118 <putchar>
    8000736a:	b75d                	j	80007310 <wfi_exception_tests_11+0x8e>

000000008000736c <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    8000736c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000736e:	00025597          	auipc	a1,0x25
    80007372:	2a258593          	addi	a1,a1,674 # 8002c610 <__func__.11>
    80007376:	00027517          	auipc	a0,0x27
    8000737a:	e5250513          	addi	a0,a0,-430 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    8000737e:	e406                	sd	ra,8(sp)
    80007380:	e022                	sd	s0,0(sp)
    TEST_START();
    80007382:	0a8240ef          	jal	8002b42a <printf>
    80007386:	4529                	li	a0,10
    80007388:	591220ef          	jal	8002a118 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000738c:	4511                	li	a0,4
    8000738e:	b7bf90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007392:	002007b7          	lui	a5,0x200
    80007396:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    8000739a:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    8000739e:	57fd                	li	a5,-1
    800073a0:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800073a4:	450d                	li	a0,3
    800073a6:	b63f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800073aa:	a63f90ef          	jal	80000e0c <test_setup_except_function>
    800073ae:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073b2:	08200593          	li	a1,130
    800073b6:	00028617          	auipc	a2,0x28
    800073ba:	4f260613          	addi	a2,a2,1266 # 8002f8a8 <__func__.0+0x19c0>
    800073be:	00027517          	auipc	a0,0x27
    800073c2:	e2250513          	addi	a0,a0,-478 # 8002e1e0 <__func__.0+0x2f8>
    800073c6:	064240ef          	jal	8002b42a <printf>
    800073ca:	00051797          	auipc	a5,0x51
    800073ce:	c477c783          	lbu	a5,-953(a5) # 80058011 <excpt+0x1>
    800073d2:	00027597          	auipc	a1,0x27
    800073d6:	dd658593          	addi	a1,a1,-554 # 8002e1a8 <__func__.0+0x2c0>
    800073da:	c789                	beqz	a5,800073e4 <wfi_exception_tests_12+0x78>
    800073dc:	00027597          	auipc	a1,0x27
    800073e0:	ddc58593          	addi	a1,a1,-548 # 8002e1b8 <__func__.0+0x2d0>
    800073e4:	00027517          	auipc	a0,0x27
    800073e8:	e1450513          	addi	a0,a0,-492 # 8002e1f8 <__func__.0+0x310>
    800073ec:	03e240ef          	jal	8002b42a <printf>
    800073f0:	00051797          	auipc	a5,0x51
    800073f4:	c217c783          	lbu	a5,-991(a5) # 80058011 <excpt+0x1>
    800073f8:	e7a1                	bnez	a5,80007440 <wfi_exception_tests_12+0xd4>
    800073fa:	4529                	li	a0,10
    800073fc:	51d220ef          	jal	8002a118 <putchar>
    80007400:	00051797          	auipc	a5,0x51
    80007404:	c117c783          	lbu	a5,-1007(a5) # 80058011 <excpt+0x1>
    80007408:	e795                	bnez	a5,80007434 <wfi_exception_tests_12+0xc8>
    8000740a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000740c:	00027597          	auipc	a1,0x27
    80007410:	d9c58593          	addi	a1,a1,-612 # 8002e1a8 <__func__.0+0x2c0>
    80007414:	00027517          	auipc	a0,0x27
    80007418:	e4c50513          	addi	a0,a0,-436 # 8002e260 <__func__.0+0x378>
    8000741c:	00e240ef          	jal	8002b42a <printf>
    80007420:	4511                	li	a0,4
    80007422:	ae7f90ef          	jal	80000f08 <goto_priv>
    80007426:	bfefa0ef          	jal	80001824 <reset_state>
}
    8000742a:	60a2                	ld	ra,8(sp)
    8000742c:	8522                	mv	a0,s0
    8000742e:	6402                	ld	s0,0(sp)
    80007430:	0141                	addi	sp,sp,16
    80007432:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007434:	4401                	li	s0,0
    TEST_END();
    80007436:	00027597          	auipc	a1,0x27
    8000743a:	d8258593          	addi	a1,a1,-638 # 8002e1b8 <__func__.0+0x2d0>
    8000743e:	bfd9                	j	80007414 <wfi_exception_tests_12+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007440:	00027517          	auipc	a0,0x27
    80007444:	dc050513          	addi	a0,a0,-576 # 8002e200 <__func__.0+0x318>
    80007448:	7e3230ef          	jal	8002b42a <printf>
    8000744c:	02900513          	li	a0,41
    80007450:	4c9220ef          	jal	8002a118 <putchar>
    80007454:	b75d                	j	800073fa <wfi_exception_tests_12+0x8e>

0000000080007456 <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    80007456:	1141                	addi	sp,sp,-16

    TEST_START();
    80007458:	00025597          	auipc	a1,0x25
    8000745c:	1d058593          	addi	a1,a1,464 # 8002c628 <__func__.10>
    80007460:	00027517          	auipc	a0,0x27
    80007464:	d6850513          	addi	a0,a0,-664 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    80007468:	e406                	sd	ra,8(sp)
    8000746a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000746c:	7bf230ef          	jal	8002b42a <printf>
    80007470:	4529                	li	a0,10
    80007472:	4a7220ef          	jal	8002a118 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007476:	4511                	li	a0,4
    80007478:	a91f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000747c:	002007b7          	lui	a5,0x200
    80007480:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    80007484:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80007488:	57fd                	li	a5,-1
    8000748a:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    8000748e:	4511                	li	a0,4
    80007490:	a79f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007494:	979f90ef          	jal	80000e0c <test_setup_except_function>
    80007498:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000749c:	08200593          	li	a1,130
    800074a0:	00028617          	auipc	a2,0x28
    800074a4:	45060613          	addi	a2,a2,1104 # 8002f8f0 <__func__.0+0x1a08>
    800074a8:	00027517          	auipc	a0,0x27
    800074ac:	d3850513          	addi	a0,a0,-712 # 8002e1e0 <__func__.0+0x2f8>
    800074b0:	77b230ef          	jal	8002b42a <printf>
    800074b4:	00051797          	auipc	a5,0x51
    800074b8:	b5d7c783          	lbu	a5,-1187(a5) # 80058011 <excpt+0x1>
    800074bc:	00027597          	auipc	a1,0x27
    800074c0:	cec58593          	addi	a1,a1,-788 # 8002e1a8 <__func__.0+0x2c0>
    800074c4:	c789                	beqz	a5,800074ce <wfi_exception_tests_13+0x78>
    800074c6:	00027597          	auipc	a1,0x27
    800074ca:	cf258593          	addi	a1,a1,-782 # 8002e1b8 <__func__.0+0x2d0>
    800074ce:	00027517          	auipc	a0,0x27
    800074d2:	d2a50513          	addi	a0,a0,-726 # 8002e1f8 <__func__.0+0x310>
    800074d6:	755230ef          	jal	8002b42a <printf>
    800074da:	00051797          	auipc	a5,0x51
    800074de:	b377c783          	lbu	a5,-1225(a5) # 80058011 <excpt+0x1>
    800074e2:	e7a1                	bnez	a5,8000752a <wfi_exception_tests_13+0xd4>
    800074e4:	4529                	li	a0,10
    800074e6:	433220ef          	jal	8002a118 <putchar>
    800074ea:	00051797          	auipc	a5,0x51
    800074ee:	b277c783          	lbu	a5,-1241(a5) # 80058011 <excpt+0x1>
    800074f2:	e795                	bnez	a5,8000751e <wfi_exception_tests_13+0xc8>
    800074f4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800074f6:	00027597          	auipc	a1,0x27
    800074fa:	cb258593          	addi	a1,a1,-846 # 8002e1a8 <__func__.0+0x2c0>
    800074fe:	00027517          	auipc	a0,0x27
    80007502:	d6250513          	addi	a0,a0,-670 # 8002e260 <__func__.0+0x378>
    80007506:	725230ef          	jal	8002b42a <printf>
    8000750a:	4511                	li	a0,4
    8000750c:	9fdf90ef          	jal	80000f08 <goto_priv>
    80007510:	b14fa0ef          	jal	80001824 <reset_state>
}
    80007514:	60a2                	ld	ra,8(sp)
    80007516:	8522                	mv	a0,s0
    80007518:	6402                	ld	s0,0(sp)
    8000751a:	0141                	addi	sp,sp,16
    8000751c:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000751e:	4401                	li	s0,0
    TEST_END();
    80007520:	00027597          	auipc	a1,0x27
    80007524:	c9858593          	addi	a1,a1,-872 # 8002e1b8 <__func__.0+0x2d0>
    80007528:	bfd9                	j	800074fe <wfi_exception_tests_13+0xa8>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000752a:	00027517          	auipc	a0,0x27
    8000752e:	cd650513          	addi	a0,a0,-810 # 8002e200 <__func__.0+0x318>
    80007532:	6f9230ef          	jal	8002b42a <printf>
    80007536:	02900513          	li	a0,41
    8000753a:	3df220ef          	jal	8002a118 <putchar>
    8000753e:	b75d                	j	800074e4 <wfi_exception_tests_13+0x8e>

0000000080007540 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80007540:	1141                	addi	sp,sp,-16

    TEST_START();
    80007542:	00025597          	auipc	a1,0x25
    80007546:	0fe58593          	addi	a1,a1,254 # 8002c640 <__func__.9>
    8000754a:	00027517          	auipc	a0,0x27
    8000754e:	c7e50513          	addi	a0,a0,-898 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    80007552:	e406                	sd	ra,8(sp)
    80007554:	e022                	sd	s0,0(sp)
    TEST_START();
    80007556:	6d5230ef          	jal	8002b42a <printf>
    8000755a:	4529                	li	a0,10
    8000755c:	3bd220ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    80007560:	4511                	li	a0,4
    80007562:	9a7f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007566:	002007b7          	lui	a5,0x200
    8000756a:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    8000756e:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    80007572:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    80007576:	4509                	li	a0,2
    80007578:	991f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000757c:	891f90ef          	jal	80000e0c <test_setup_except_function>
    80007580:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007584:	08200593          	li	a1,130
    80007588:	00028617          	auipc	a2,0x28
    8000758c:	22860613          	addi	a2,a2,552 # 8002f7b0 <__func__.0+0x18c8>
    80007590:	00027517          	auipc	a0,0x27
    80007594:	c5050513          	addi	a0,a0,-944 # 8002e1e0 <__func__.0+0x2f8>
    80007598:	693230ef          	jal	8002b42a <printf>
    8000759c:	00051797          	auipc	a5,0x51
    800075a0:	a757c783          	lbu	a5,-1419(a5) # 80058011 <excpt+0x1>
    800075a4:	00027597          	auipc	a1,0x27
    800075a8:	c0458593          	addi	a1,a1,-1020 # 8002e1a8 <__func__.0+0x2c0>
    800075ac:	c789                	beqz	a5,800075b6 <wfi_exception_tests_14+0x76>
    800075ae:	00027597          	auipc	a1,0x27
    800075b2:	c0a58593          	addi	a1,a1,-1014 # 8002e1b8 <__func__.0+0x2d0>
    800075b6:	00027517          	auipc	a0,0x27
    800075ba:	c4250513          	addi	a0,a0,-958 # 8002e1f8 <__func__.0+0x310>
    800075be:	66d230ef          	jal	8002b42a <printf>
    800075c2:	00051797          	auipc	a5,0x51
    800075c6:	a4f7c783          	lbu	a5,-1457(a5) # 80058011 <excpt+0x1>
    800075ca:	e7a1                	bnez	a5,80007612 <wfi_exception_tests_14+0xd2>
    800075cc:	4529                	li	a0,10
    800075ce:	34b220ef          	jal	8002a118 <putchar>
    800075d2:	00051797          	auipc	a5,0x51
    800075d6:	a3f7c783          	lbu	a5,-1473(a5) # 80058011 <excpt+0x1>
    800075da:	e795                	bnez	a5,80007606 <wfi_exception_tests_14+0xc6>
    800075dc:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    800075de:	00027597          	auipc	a1,0x27
    800075e2:	bca58593          	addi	a1,a1,-1078 # 8002e1a8 <__func__.0+0x2c0>
    800075e6:	00027517          	auipc	a0,0x27
    800075ea:	c7a50513          	addi	a0,a0,-902 # 8002e260 <__func__.0+0x378>
    800075ee:	63d230ef          	jal	8002b42a <printf>
    800075f2:	4511                	li	a0,4
    800075f4:	915f90ef          	jal	80000f08 <goto_priv>
    800075f8:	a2cfa0ef          	jal	80001824 <reset_state>
}
    800075fc:	60a2                	ld	ra,8(sp)
    800075fe:	8522                	mv	a0,s0
    80007600:	6402                	ld	s0,0(sp)
    80007602:	0141                	addi	sp,sp,16
    80007604:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007606:	4401                	li	s0,0
    TEST_END();
    80007608:	00027597          	auipc	a1,0x27
    8000760c:	bb058593          	addi	a1,a1,-1104 # 8002e1b8 <__func__.0+0x2d0>
    80007610:	bfd9                	j	800075e6 <wfi_exception_tests_14+0xa6>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007612:	00027517          	auipc	a0,0x27
    80007616:	bee50513          	addi	a0,a0,-1042 # 8002e200 <__func__.0+0x318>
    8000761a:	611230ef          	jal	8002b42a <printf>
    8000761e:	02900513          	li	a0,41
    80007622:	2f7220ef          	jal	8002a118 <putchar>
    80007626:	b75d                	j	800075cc <wfi_exception_tests_14+0x8c>

0000000080007628 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    80007628:	1101                	addi	sp,sp,-32

    TEST_START();
    8000762a:	00025597          	auipc	a1,0x25
    8000762e:	02e58593          	addi	a1,a1,46 # 8002c658 <__func__.8>
    80007632:	00027517          	auipc	a0,0x27
    80007636:	b9650513          	addi	a0,a0,-1130 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    8000763a:	ec06                	sd	ra,24(sp)
    8000763c:	e822                	sd	s0,16(sp)
    8000763e:	e426                	sd	s1,8(sp)
    TEST_START();
    80007640:	5eb230ef          	jal	8002b42a <printf>
    80007644:	4529                	li	a0,10
    80007646:	2d3220ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8000764a:	4511                	li	a0,4
    8000764c:	8bdf90ef          	jal	80000f08 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    80007650:	002007b7          	lui	a5,0x200
    80007654:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80007658:	450d                	li	a0,3
    8000765a:	8aff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000765e:	faef90ef          	jal	80000e0c <test_setup_except_function>
    80007662:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007666:	08200593          	li	a1,130
    8000766a:	00028617          	auipc	a2,0x28
    8000766e:	2ce60613          	addi	a2,a2,718 # 8002f938 <__func__.0+0x1a50>
    80007672:	00027517          	auipc	a0,0x27
    80007676:	b6e50513          	addi	a0,a0,-1170 # 8002e1e0 <__func__.0+0x2f8>
    8000767a:	5b1230ef          	jal	8002b42a <printf>
    8000767e:	00051797          	auipc	a5,0x51
    80007682:	9937c783          	lbu	a5,-1645(a5) # 80058011 <excpt+0x1>
    80007686:	00051497          	auipc	s1,0x51
    8000768a:	98a48493          	addi	s1,s1,-1654 # 80058010 <excpt>
    8000768e:	00027597          	auipc	a1,0x27
    80007692:	b2a58593          	addi	a1,a1,-1238 # 8002e1b8 <__func__.0+0x2d0>
    80007696:	cf89                	beqz	a5,800076b0 <wfi_exception_tests_15+0x88>
    80007698:	6498                	ld	a4,8(s1)
    8000769a:	4789                	li	a5,2
    8000769c:	00027597          	auipc	a1,0x27
    800076a0:	b0c58593          	addi	a1,a1,-1268 # 8002e1a8 <__func__.0+0x2c0>
    800076a4:	00f70663          	beq	a4,a5,800076b0 <wfi_exception_tests_15+0x88>
    800076a8:	00027597          	auipc	a1,0x27
    800076ac:	b1058593          	addi	a1,a1,-1264 # 8002e1b8 <__func__.0+0x2d0>
    800076b0:	00027517          	auipc	a0,0x27
    800076b4:	b4850513          	addi	a0,a0,-1208 # 8002e1f8 <__func__.0+0x310>
    800076b8:	573230ef          	jal	8002b42a <printf>
    800076bc:	00051797          	auipc	a5,0x51
    800076c0:	9557c783          	lbu	a5,-1707(a5) # 80058011 <excpt+0x1>
    800076c4:	c789                	beqz	a5,800076ce <wfi_exception_tests_15+0xa6>
    800076c6:	6498                	ld	a4,8(s1)
    800076c8:	4789                	li	a5,2
    800076ca:	00f70c63          	beq	a4,a5,800076e2 <wfi_exception_tests_15+0xba>
    800076ce:	00027517          	auipc	a0,0x27
    800076d2:	b3250513          	addi	a0,a0,-1230 # 8002e200 <__func__.0+0x318>
    800076d6:	555230ef          	jal	8002b42a <printf>
    800076da:	02900513          	li	a0,41
    800076de:	23b220ef          	jal	8002a118 <putchar>
    800076e2:	4529                	li	a0,10
    800076e4:	235220ef          	jal	8002a118 <putchar>
    800076e8:	00051417          	auipc	s0,0x51
    800076ec:	92944403          	lbu	s0,-1751(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800076f0:	00027597          	auipc	a1,0x27
    800076f4:	ac858593          	addi	a1,a1,-1336 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800076f8:	cc11                	beqz	s0,80007714 <wfi_exception_tests_15+0xec>
    800076fa:	6498                	ld	a4,8(s1)
    800076fc:	4789                	li	a5,2
    TEST_END();
    800076fe:	00027597          	auipc	a1,0x27
    80007702:	aaa58593          	addi	a1,a1,-1366 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007706:	00f70763          	beq	a4,a5,80007714 <wfi_exception_tests_15+0xec>
    8000770a:	4401                	li	s0,0
    TEST_END();
    8000770c:	00027597          	auipc	a1,0x27
    80007710:	aac58593          	addi	a1,a1,-1364 # 8002e1b8 <__func__.0+0x2d0>
    80007714:	00027517          	auipc	a0,0x27
    80007718:	b4c50513          	addi	a0,a0,-1204 # 8002e260 <__func__.0+0x378>
    8000771c:	50f230ef          	jal	8002b42a <printf>
    80007720:	4511                	li	a0,4
    80007722:	fe6f90ef          	jal	80000f08 <goto_priv>
    80007726:	8fefa0ef          	jal	80001824 <reset_state>
}
    8000772a:	60e2                	ld	ra,24(sp)
    8000772c:	8522                	mv	a0,s0
    8000772e:	6442                	ld	s0,16(sp)
    80007730:	64a2                	ld	s1,8(sp)
    80007732:	6105                	addi	sp,sp,32
    80007734:	8082                	ret

0000000080007736 <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    80007736:	1101                	addi	sp,sp,-32

    TEST_START();
    80007738:	00025597          	auipc	a1,0x25
    8000773c:	f3858593          	addi	a1,a1,-200 # 8002c670 <__func__.7>
    80007740:	00027517          	auipc	a0,0x27
    80007744:	a8850513          	addi	a0,a0,-1400 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    80007748:	ec06                	sd	ra,24(sp)
    8000774a:	e822                	sd	s0,16(sp)
    8000774c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000774e:	4dd230ef          	jal	8002b42a <printf>
    80007752:	4529                	li	a0,10
    80007754:	1c5220ef          	jal	8002a118 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    80007758:	002007b7          	lui	a5,0x200
    8000775c:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80007760:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    80007764:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    80007768:	4509                	li	a0,2
    8000776a:	f9ef90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000776e:	e9ef90ef          	jal	80000e0c <test_setup_except_function>
    80007772:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007776:	08200593          	li	a1,130
    8000777a:	00028617          	auipc	a2,0x28
    8000777e:	20660613          	addi	a2,a2,518 # 8002f980 <__func__.0+0x1a98>
    80007782:	00027517          	auipc	a0,0x27
    80007786:	a5e50513          	addi	a0,a0,-1442 # 8002e1e0 <__func__.0+0x2f8>
    8000778a:	4a1230ef          	jal	8002b42a <printf>
    8000778e:	00051797          	auipc	a5,0x51
    80007792:	8837c783          	lbu	a5,-1917(a5) # 80058011 <excpt+0x1>
    80007796:	00051497          	auipc	s1,0x51
    8000779a:	87a48493          	addi	s1,s1,-1926 # 80058010 <excpt>
    8000779e:	00027597          	auipc	a1,0x27
    800077a2:	a1a58593          	addi	a1,a1,-1510 # 8002e1b8 <__func__.0+0x2d0>
    800077a6:	cf89                	beqz	a5,800077c0 <wfi_exception_tests_16+0x8a>
    800077a8:	6498                	ld	a4,8(s1)
    800077aa:	4789                	li	a5,2
    800077ac:	00027597          	auipc	a1,0x27
    800077b0:	9fc58593          	addi	a1,a1,-1540 # 8002e1a8 <__func__.0+0x2c0>
    800077b4:	00f70663          	beq	a4,a5,800077c0 <wfi_exception_tests_16+0x8a>
    800077b8:	00027597          	auipc	a1,0x27
    800077bc:	a0058593          	addi	a1,a1,-1536 # 8002e1b8 <__func__.0+0x2d0>
    800077c0:	00027517          	auipc	a0,0x27
    800077c4:	a3850513          	addi	a0,a0,-1480 # 8002e1f8 <__func__.0+0x310>
    800077c8:	463230ef          	jal	8002b42a <printf>
    800077cc:	00051797          	auipc	a5,0x51
    800077d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    800077d4:	c789                	beqz	a5,800077de <wfi_exception_tests_16+0xa8>
    800077d6:	6498                	ld	a4,8(s1)
    800077d8:	4789                	li	a5,2
    800077da:	00f70c63          	beq	a4,a5,800077f2 <wfi_exception_tests_16+0xbc>
    800077de:	00027517          	auipc	a0,0x27
    800077e2:	a2250513          	addi	a0,a0,-1502 # 8002e200 <__func__.0+0x318>
    800077e6:	445230ef          	jal	8002b42a <printf>
    800077ea:	02900513          	li	a0,41
    800077ee:	12b220ef          	jal	8002a118 <putchar>
    800077f2:	4529                	li	a0,10
    800077f4:	125220ef          	jal	8002a118 <putchar>
    800077f8:	00051417          	auipc	s0,0x51
    800077fc:	81944403          	lbu	s0,-2023(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007800:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007802:	c409                	beqz	s0,8000780c <wfi_exception_tests_16+0xd6>
    80007804:	6498                	ld	a4,8(s1)
    80007806:	4789                	li	a5,2
    80007808:	02f70e63          	beq	a4,a5,80007844 <wfi_exception_tests_16+0x10e>
    goto_priv(PRIV_M);
    8000780c:	efcf90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007810:	002007b7          	lui	a5,0x200
    80007814:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007818:	4401                	li	s0,0
    TEST_END();
    8000781a:	00027597          	auipc	a1,0x27
    8000781e:	99e58593          	addi	a1,a1,-1634 # 8002e1b8 <__func__.0+0x2d0>
    80007822:	00027517          	auipc	a0,0x27
    80007826:	a3e50513          	addi	a0,a0,-1474 # 8002e260 <__func__.0+0x378>
    8000782a:	401230ef          	jal	8002b42a <printf>
    8000782e:	4511                	li	a0,4
    80007830:	ed8f90ef          	jal	80000f08 <goto_priv>
    80007834:	ff1f90ef          	jal	80001824 <reset_state>
}
    80007838:	60e2                	ld	ra,24(sp)
    8000783a:	8522                	mv	a0,s0
    8000783c:	6442                	ld	s0,16(sp)
    8000783e:	64a2                	ld	s1,8(sp)
    80007840:	6105                	addi	sp,sp,32
    80007842:	8082                	ret
    goto_priv(PRIV_M);
    80007844:	ec4f90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007848:	002007b7          	lui	a5,0x200
    8000784c:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80007850:	00027597          	auipc	a1,0x27
    80007854:	95858593          	addi	a1,a1,-1704 # 8002e1a8 <__func__.0+0x2c0>
    80007858:	b7e9                	j	80007822 <wfi_exception_tests_16+0xec>

000000008000785a <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    8000785a:	1141                	addi	sp,sp,-16

    TEST_START();
    8000785c:	00025597          	auipc	a1,0x25
    80007860:	e2c58593          	addi	a1,a1,-468 # 8002c688 <__func__.6>
    80007864:	00027517          	auipc	a0,0x27
    80007868:	96450513          	addi	a0,a0,-1692 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    8000786c:	e406                	sd	ra,8(sp)
    8000786e:	e022                	sd	s0,0(sp)
    TEST_START();
    80007870:	3bb230ef          	jal	8002b42a <printf>
    80007874:	4529                	li	a0,10
    80007876:	0a3220ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8000787a:	4511                	li	a0,4
    8000787c:	e8cf90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007880:	002007b7          	lui	a5,0x200
    80007884:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007888:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    8000788c:	4509                	li	a0,2
    8000788e:	e7af90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007892:	d7af90ef          	jal	80000e0c <test_setup_except_function>
    80007896:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000789a:	08200593          	li	a1,130
    8000789e:	00028617          	auipc	a2,0x28
    800078a2:	12a60613          	addi	a2,a2,298 # 8002f9c8 <__func__.0+0x1ae0>
    800078a6:	00027517          	auipc	a0,0x27
    800078aa:	93a50513          	addi	a0,a0,-1734 # 8002e1e0 <__func__.0+0x2f8>
    800078ae:	37d230ef          	jal	8002b42a <printf>
    800078b2:	00050797          	auipc	a5,0x50
    800078b6:	75f7c783          	lbu	a5,1887(a5) # 80058011 <excpt+0x1>
    800078ba:	00027597          	auipc	a1,0x27
    800078be:	8ee58593          	addi	a1,a1,-1810 # 8002e1a8 <__func__.0+0x2c0>
    800078c2:	c789                	beqz	a5,800078cc <wfi_exception_tests_17+0x72>
    800078c4:	00027597          	auipc	a1,0x27
    800078c8:	8f458593          	addi	a1,a1,-1804 # 8002e1b8 <__func__.0+0x2d0>
    800078cc:	00027517          	auipc	a0,0x27
    800078d0:	92c50513          	addi	a0,a0,-1748 # 8002e1f8 <__func__.0+0x310>
    800078d4:	357230ef          	jal	8002b42a <printf>
    800078d8:	00050797          	auipc	a5,0x50
    800078dc:	7397c783          	lbu	a5,1849(a5) # 80058011 <excpt+0x1>
    800078e0:	e7a1                	bnez	a5,80007928 <wfi_exception_tests_17+0xce>
    800078e2:	4529                	li	a0,10
    800078e4:	035220ef          	jal	8002a118 <putchar>
    800078e8:	00050797          	auipc	a5,0x50
    800078ec:	7297c783          	lbu	a5,1833(a5) # 80058011 <excpt+0x1>
    800078f0:	e795                	bnez	a5,8000791c <wfi_exception_tests_17+0xc2>
    800078f2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800078f4:	00027597          	auipc	a1,0x27
    800078f8:	8b458593          	addi	a1,a1,-1868 # 8002e1a8 <__func__.0+0x2c0>
    800078fc:	00027517          	auipc	a0,0x27
    80007900:	96450513          	addi	a0,a0,-1692 # 8002e260 <__func__.0+0x378>
    80007904:	327230ef          	jal	8002b42a <printf>
    80007908:	4511                	li	a0,4
    8000790a:	dfef90ef          	jal	80000f08 <goto_priv>
    8000790e:	f17f90ef          	jal	80001824 <reset_state>
}
    80007912:	60a2                	ld	ra,8(sp)
    80007914:	8522                	mv	a0,s0
    80007916:	6402                	ld	s0,0(sp)
    80007918:	0141                	addi	sp,sp,16
    8000791a:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000791c:	4401                	li	s0,0
    TEST_END();
    8000791e:	00027597          	auipc	a1,0x27
    80007922:	89a58593          	addi	a1,a1,-1894 # 8002e1b8 <__func__.0+0x2d0>
    80007926:	bfd9                	j	800078fc <wfi_exception_tests_17+0xa2>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007928:	00027517          	auipc	a0,0x27
    8000792c:	8d850513          	addi	a0,a0,-1832 # 8002e200 <__func__.0+0x318>
    80007930:	2fb230ef          	jal	8002b42a <printf>
    80007934:	02900513          	li	a0,41
    80007938:	7e0220ef          	jal	8002a118 <putchar>
    8000793c:	b75d                	j	800078e2 <wfi_exception_tests_17+0x88>

000000008000793e <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    8000793e:	1101                	addi	sp,sp,-32

    TEST_START();
    80007940:	00025597          	auipc	a1,0x25
    80007944:	d6058593          	addi	a1,a1,-672 # 8002c6a0 <__func__.5>
    80007948:	00027517          	auipc	a0,0x27
    8000794c:	88050513          	addi	a0,a0,-1920 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    80007950:	ec06                	sd	ra,24(sp)
    80007952:	e822                	sd	s0,16(sp)
    80007954:	e426                	sd	s1,8(sp)
    TEST_START();
    80007956:	2d5230ef          	jal	8002b42a <printf>
    8000795a:	4529                	li	a0,10
    8000795c:	7bc220ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80007960:	4511                	li	a0,4
    80007962:	da6f90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80007966:	002007b7          	lui	a5,0x200
    8000796a:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    8000796e:	4509                	li	a0,2
    80007970:	d98f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007974:	c98f90ef          	jal	80000e0c <test_setup_except_function>
    80007978:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    8000797c:	08200593          	li	a1,130
    80007980:	00028617          	auipc	a2,0x28
    80007984:	09060613          	addi	a2,a2,144 # 8002fa10 <__func__.0+0x1b28>
    80007988:	00027517          	auipc	a0,0x27
    8000798c:	85850513          	addi	a0,a0,-1960 # 8002e1e0 <__func__.0+0x2f8>
    80007990:	29b230ef          	jal	8002b42a <printf>
    80007994:	00050797          	auipc	a5,0x50
    80007998:	67d7c783          	lbu	a5,1661(a5) # 80058011 <excpt+0x1>
    8000799c:	00050497          	auipc	s1,0x50
    800079a0:	67448493          	addi	s1,s1,1652 # 80058010 <excpt>
    800079a4:	00027597          	auipc	a1,0x27
    800079a8:	81458593          	addi	a1,a1,-2028 # 8002e1b8 <__func__.0+0x2d0>
    800079ac:	cf89                	beqz	a5,800079c6 <wfi_exception_tests_18+0x88>
    800079ae:	6498                	ld	a4,8(s1)
    800079b0:	47d9                	li	a5,22
    800079b2:	00026597          	auipc	a1,0x26
    800079b6:	7f658593          	addi	a1,a1,2038 # 8002e1a8 <__func__.0+0x2c0>
    800079ba:	00f70663          	beq	a4,a5,800079c6 <wfi_exception_tests_18+0x88>
    800079be:	00026597          	auipc	a1,0x26
    800079c2:	7fa58593          	addi	a1,a1,2042 # 8002e1b8 <__func__.0+0x2d0>
    800079c6:	00027517          	auipc	a0,0x27
    800079ca:	83250513          	addi	a0,a0,-1998 # 8002e1f8 <__func__.0+0x310>
    800079ce:	25d230ef          	jal	8002b42a <printf>
    800079d2:	00050797          	auipc	a5,0x50
    800079d6:	63f7c783          	lbu	a5,1599(a5) # 80058011 <excpt+0x1>
    800079da:	c789                	beqz	a5,800079e4 <wfi_exception_tests_18+0xa6>
    800079dc:	6498                	ld	a4,8(s1)
    800079de:	47d9                	li	a5,22
    800079e0:	00f70c63          	beq	a4,a5,800079f8 <wfi_exception_tests_18+0xba>
    800079e4:	00027517          	auipc	a0,0x27
    800079e8:	81c50513          	addi	a0,a0,-2020 # 8002e200 <__func__.0+0x318>
    800079ec:	23f230ef          	jal	8002b42a <printf>
    800079f0:	02900513          	li	a0,41
    800079f4:	724220ef          	jal	8002a118 <putchar>
    800079f8:	4529                	li	a0,10
    800079fa:	71e220ef          	jal	8002a118 <putchar>
    800079fe:	00050417          	auipc	s0,0x50
    80007a02:	61344403          	lbu	s0,1555(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007a06:	00026597          	auipc	a1,0x26
    80007a0a:	7b258593          	addi	a1,a1,1970 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007a0e:	cc11                	beqz	s0,80007a2a <wfi_exception_tests_18+0xec>
    80007a10:	6498                	ld	a4,8(s1)
    80007a12:	47d9                	li	a5,22
    TEST_END();
    80007a14:	00026597          	auipc	a1,0x26
    80007a18:	79458593          	addi	a1,a1,1940 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007a1c:	00f70763          	beq	a4,a5,80007a2a <wfi_exception_tests_18+0xec>
    80007a20:	4401                	li	s0,0
    TEST_END();
    80007a22:	00026597          	auipc	a1,0x26
    80007a26:	79658593          	addi	a1,a1,1942 # 8002e1b8 <__func__.0+0x2d0>
    80007a2a:	00027517          	auipc	a0,0x27
    80007a2e:	83650513          	addi	a0,a0,-1994 # 8002e260 <__func__.0+0x378>
    80007a32:	1f9230ef          	jal	8002b42a <printf>
    80007a36:	4511                	li	a0,4
    80007a38:	cd0f90ef          	jal	80000f08 <goto_priv>
    80007a3c:	de9f90ef          	jal	80001824 <reset_state>
}
    80007a40:	60e2                	ld	ra,24(sp)
    80007a42:	8522                	mv	a0,s0
    80007a44:	6442                	ld	s0,16(sp)
    80007a46:	64a2                	ld	s1,8(sp)
    80007a48:	6105                	addi	sp,sp,32
    80007a4a:	8082                	ret

0000000080007a4c <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007a4c:	1101                	addi	sp,sp,-32

    TEST_START();
    80007a4e:	00025597          	auipc	a1,0x25
    80007a52:	c6a58593          	addi	a1,a1,-918 # 8002c6b8 <__func__.4>
    80007a56:	00026517          	auipc	a0,0x26
    80007a5a:	77250513          	addi	a0,a0,1906 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    80007a5e:	ec06                	sd	ra,24(sp)
    80007a60:	e822                	sd	s0,16(sp)
    80007a62:	e426                	sd	s1,8(sp)
    TEST_START();
    80007a64:	1c7230ef          	jal	8002b42a <printf>
    80007a68:	4529                	li	a0,10
    80007a6a:	6ae220ef          	jal	8002a118 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007a6e:	4511                	li	a0,4
    80007a70:	c98f90ef          	jal	80000f08 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007a74:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007a78:	002007b7          	lui	a5,0x200
    80007a7c:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007a80:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007a84:	4509                	li	a0,2
    80007a86:	c82f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a8a:	b82f90ef          	jal	80000e0c <test_setup_except_function>
    80007a8e:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007a92:	00050417          	auipc	s0,0x50
    80007a96:	57e40413          	addi	s0,s0,1406 # 80058010 <excpt>
    80007a9a:	640c                	ld	a1,8(s0)
    80007a9c:	00027517          	auipc	a0,0x27
    80007aa0:	2a450513          	addi	a0,a0,676 # 8002ed40 <__func__.0+0xe58>
    80007aa4:	187230ef          	jal	8002b42a <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007aa8:	08200593          	li	a1,130
    80007aac:	00028617          	auipc	a2,0x28
    80007ab0:	fac60613          	addi	a2,a2,-84 # 8002fa58 <__func__.0+0x1b70>
    80007ab4:	00026517          	auipc	a0,0x26
    80007ab8:	72c50513          	addi	a0,a0,1836 # 8002e1e0 <__func__.0+0x2f8>
    80007abc:	16f230ef          	jal	8002b42a <printf>
    80007ac0:	00050797          	auipc	a5,0x50
    80007ac4:	5517c783          	lbu	a5,1361(a5) # 80058011 <excpt+0x1>
    80007ac8:	00026597          	auipc	a1,0x26
    80007acc:	6f058593          	addi	a1,a1,1776 # 8002e1b8 <__func__.0+0x2d0>
    80007ad0:	cf89                	beqz	a5,80007aea <wfi_exception_tests_19+0x9e>
    80007ad2:	6418                	ld	a4,8(s0)
    80007ad4:	47d9                	li	a5,22
    80007ad6:	00026597          	auipc	a1,0x26
    80007ada:	6d258593          	addi	a1,a1,1746 # 8002e1a8 <__func__.0+0x2c0>
    80007ade:	00f70663          	beq	a4,a5,80007aea <wfi_exception_tests_19+0x9e>
    80007ae2:	00026597          	auipc	a1,0x26
    80007ae6:	6d658593          	addi	a1,a1,1750 # 8002e1b8 <__func__.0+0x2d0>
    80007aea:	00026517          	auipc	a0,0x26
    80007aee:	70e50513          	addi	a0,a0,1806 # 8002e1f8 <__func__.0+0x310>
    80007af2:	139230ef          	jal	8002b42a <printf>
    80007af6:	00050797          	auipc	a5,0x50
    80007afa:	51b7c783          	lbu	a5,1307(a5) # 80058011 <excpt+0x1>
    80007afe:	c789                	beqz	a5,80007b08 <wfi_exception_tests_19+0xbc>
    80007b00:	6418                	ld	a4,8(s0)
    80007b02:	47d9                	li	a5,22
    80007b04:	00f70c63          	beq	a4,a5,80007b1c <wfi_exception_tests_19+0xd0>
    80007b08:	00026517          	auipc	a0,0x26
    80007b0c:	6f850513          	addi	a0,a0,1784 # 8002e200 <__func__.0+0x318>
    80007b10:	11b230ef          	jal	8002b42a <printf>
    80007b14:	02900513          	li	a0,41
    80007b18:	600220ef          	jal	8002a118 <putchar>
    80007b1c:	4529                	li	a0,10
    80007b1e:	5fa220ef          	jal	8002a118 <putchar>
    80007b22:	00050497          	auipc	s1,0x50
    80007b26:	4ef4c483          	lbu	s1,1263(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007b2a:	00026597          	auipc	a1,0x26
    80007b2e:	68e58593          	addi	a1,a1,1678 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007b32:	cc91                	beqz	s1,80007b4e <wfi_exception_tests_19+0x102>
    80007b34:	6418                	ld	a4,8(s0)
    80007b36:	47d9                	li	a5,22
    TEST_END();
    80007b38:	00026597          	auipc	a1,0x26
    80007b3c:	67058593          	addi	a1,a1,1648 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007b40:	00f70763          	beq	a4,a5,80007b4e <wfi_exception_tests_19+0x102>
    80007b44:	4481                	li	s1,0
    TEST_END();
    80007b46:	00026597          	auipc	a1,0x26
    80007b4a:	67258593          	addi	a1,a1,1650 # 8002e1b8 <__func__.0+0x2d0>
    80007b4e:	00026517          	auipc	a0,0x26
    80007b52:	71250513          	addi	a0,a0,1810 # 8002e260 <__func__.0+0x378>
    80007b56:	0d5230ef          	jal	8002b42a <printf>
    80007b5a:	4511                	li	a0,4
    80007b5c:	bacf90ef          	jal	80000f08 <goto_priv>
    80007b60:	cc5f90ef          	jal	80001824 <reset_state>
}
    80007b64:	60e2                	ld	ra,24(sp)
    80007b66:	6442                	ld	s0,16(sp)
    80007b68:	8526                	mv	a0,s1
    80007b6a:	64a2                	ld	s1,8(sp)
    80007b6c:	6105                	addi	sp,sp,32
    80007b6e:	8082                	ret

0000000080007b70 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007b70:	1141                	addi	sp,sp,-16

    TEST_START();
    80007b72:	00025597          	auipc	a1,0x25
    80007b76:	b5e58593          	addi	a1,a1,-1186 # 8002c6d0 <__func__.3>
    80007b7a:	00026517          	auipc	a0,0x26
    80007b7e:	64e50513          	addi	a0,a0,1614 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007b82:	e406                	sd	ra,8(sp)
    80007b84:	e022                	sd	s0,0(sp)
    TEST_START();
    80007b86:	0a5230ef          	jal	8002b42a <printf>
    80007b8a:	4529                	li	a0,10
    80007b8c:	58c220ef          	jal	8002a118 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007b90:	a7cf90ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007b94:	4511                	li	a0,4
    80007b96:	b72f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007b9a:	002007b7          	lui	a5,0x200
    80007b9e:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007ba2:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007ba6:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007baa:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007bae:	450d                	li	a0,3
    80007bb0:	b58f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007bb4:	a58f90ef          	jal	80000e0c <test_setup_except_function>
    80007bb8:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007bbc:	08200593          	li	a1,130
    80007bc0:	00028617          	auipc	a2,0x28
    80007bc4:	ee060613          	addi	a2,a2,-288 # 8002faa0 <__func__.0+0x1bb8>
    80007bc8:	00026517          	auipc	a0,0x26
    80007bcc:	61850513          	addi	a0,a0,1560 # 8002e1e0 <__func__.0+0x2f8>
    80007bd0:	05b230ef          	jal	8002b42a <printf>
    80007bd4:	00050797          	auipc	a5,0x50
    80007bd8:	43d7c783          	lbu	a5,1085(a5) # 80058011 <excpt+0x1>
    80007bdc:	00026597          	auipc	a1,0x26
    80007be0:	5cc58593          	addi	a1,a1,1484 # 8002e1a8 <__func__.0+0x2c0>
    80007be4:	c789                	beqz	a5,80007bee <wfi_exception_tests_20+0x7e>
    80007be6:	00026597          	auipc	a1,0x26
    80007bea:	5d258593          	addi	a1,a1,1490 # 8002e1b8 <__func__.0+0x2d0>
    80007bee:	00026517          	auipc	a0,0x26
    80007bf2:	60a50513          	addi	a0,a0,1546 # 8002e1f8 <__func__.0+0x310>
    80007bf6:	035230ef          	jal	8002b42a <printf>
    80007bfa:	00050797          	auipc	a5,0x50
    80007bfe:	4177c783          	lbu	a5,1047(a5) # 80058011 <excpt+0x1>
    80007c02:	e7a1                	bnez	a5,80007c4a <wfi_exception_tests_20+0xda>
    80007c04:	4529                	li	a0,10
    80007c06:	512220ef          	jal	8002a118 <putchar>
    80007c0a:	00050797          	auipc	a5,0x50
    80007c0e:	4077c783          	lbu	a5,1031(a5) # 80058011 <excpt+0x1>
    80007c12:	e795                	bnez	a5,80007c3e <wfi_exception_tests_20+0xce>
    80007c14:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007c16:	00026597          	auipc	a1,0x26
    80007c1a:	59258593          	addi	a1,a1,1426 # 8002e1a8 <__func__.0+0x2c0>
    80007c1e:	00026517          	auipc	a0,0x26
    80007c22:	64250513          	addi	a0,a0,1602 # 8002e260 <__func__.0+0x378>
    80007c26:	005230ef          	jal	8002b42a <printf>
    80007c2a:	4511                	li	a0,4
    80007c2c:	adcf90ef          	jal	80000f08 <goto_priv>
    80007c30:	bf5f90ef          	jal	80001824 <reset_state>
}
    80007c34:	60a2                	ld	ra,8(sp)
    80007c36:	8522                	mv	a0,s0
    80007c38:	6402                	ld	s0,0(sp)
    80007c3a:	0141                	addi	sp,sp,16
    80007c3c:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007c3e:	4401                	li	s0,0
    TEST_END();
    80007c40:	00026597          	auipc	a1,0x26
    80007c44:	57858593          	addi	a1,a1,1400 # 8002e1b8 <__func__.0+0x2d0>
    80007c48:	bfd9                	j	80007c1e <wfi_exception_tests_20+0xae>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007c4a:	00026517          	auipc	a0,0x26
    80007c4e:	5b650513          	addi	a0,a0,1462 # 8002e200 <__func__.0+0x318>
    80007c52:	7d8230ef          	jal	8002b42a <printf>
    80007c56:	02900513          	li	a0,41
    80007c5a:	4be220ef          	jal	8002a118 <putchar>
    80007c5e:	b75d                	j	80007c04 <wfi_exception_tests_20+0x94>

0000000080007c60 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007c60:	1101                	addi	sp,sp,-32

    TEST_START();
    80007c62:	00025597          	auipc	a1,0x25
    80007c66:	a8658593          	addi	a1,a1,-1402 # 8002c6e8 <__func__.2>
    80007c6a:	00026517          	auipc	a0,0x26
    80007c6e:	55e50513          	addi	a0,a0,1374 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007c72:	ec06                	sd	ra,24(sp)
    80007c74:	e822                	sd	s0,16(sp)
    80007c76:	e426                	sd	s1,8(sp)
    TEST_START();
    80007c78:	7b2230ef          	jal	8002b42a <printf>
    80007c7c:	4529                	li	a0,10
    80007c7e:	49a220ef          	jal	8002a118 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007c82:	98af90ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007c86:	4511                	li	a0,4
    80007c88:	a80f90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007c8c:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007c90:	002007b7          	lui	a5,0x200
    80007c94:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007c98:	4505                	li	a0,1
    80007c9a:	a6ef90ef          	jal	80000f08 <goto_priv>
    80007c9e:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007ca2:	08200593          	li	a1,130
    80007ca6:	00028617          	auipc	a2,0x28
    80007caa:	e6260613          	addi	a2,a2,-414 # 8002fb08 <__func__.0+0x1c20>
    80007cae:	00026517          	auipc	a0,0x26
    80007cb2:	53250513          	addi	a0,a0,1330 # 8002e1e0 <__func__.0+0x2f8>
    80007cb6:	774230ef          	jal	8002b42a <printf>
    80007cba:	00050797          	auipc	a5,0x50
    80007cbe:	3577c783          	lbu	a5,855(a5) # 80058011 <excpt+0x1>
    80007cc2:	00050497          	auipc	s1,0x50
    80007cc6:	34e48493          	addi	s1,s1,846 # 80058010 <excpt>
    80007cca:	00026597          	auipc	a1,0x26
    80007cce:	4ee58593          	addi	a1,a1,1262 # 8002e1b8 <__func__.0+0x2d0>
    80007cd2:	cf89                	beqz	a5,80007cec <wfi_exception_tests_21+0x8c>
    80007cd4:	6498                	ld	a4,8(s1)
    80007cd6:	4789                	li	a5,2
    80007cd8:	00026597          	auipc	a1,0x26
    80007cdc:	4d058593          	addi	a1,a1,1232 # 8002e1a8 <__func__.0+0x2c0>
    80007ce0:	00f70663          	beq	a4,a5,80007cec <wfi_exception_tests_21+0x8c>
    80007ce4:	00026597          	auipc	a1,0x26
    80007ce8:	4d458593          	addi	a1,a1,1236 # 8002e1b8 <__func__.0+0x2d0>
    80007cec:	00026517          	auipc	a0,0x26
    80007cf0:	50c50513          	addi	a0,a0,1292 # 8002e1f8 <__func__.0+0x310>
    80007cf4:	736230ef          	jal	8002b42a <printf>
    80007cf8:	00050797          	auipc	a5,0x50
    80007cfc:	3197c783          	lbu	a5,793(a5) # 80058011 <excpt+0x1>
    80007d00:	c789                	beqz	a5,80007d0a <wfi_exception_tests_21+0xaa>
    80007d02:	6498                	ld	a4,8(s1)
    80007d04:	4789                	li	a5,2
    80007d06:	00f70c63          	beq	a4,a5,80007d1e <wfi_exception_tests_21+0xbe>
    80007d0a:	00026517          	auipc	a0,0x26
    80007d0e:	4f650513          	addi	a0,a0,1270 # 8002e200 <__func__.0+0x318>
    80007d12:	718230ef          	jal	8002b42a <printf>
    80007d16:	02900513          	li	a0,41
    80007d1a:	3fe220ef          	jal	8002a118 <putchar>
    80007d1e:	4529                	li	a0,10
    80007d20:	3f8220ef          	jal	8002a118 <putchar>
    80007d24:	00050417          	auipc	s0,0x50
    80007d28:	2ed44403          	lbu	s0,749(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007d2c:	00026597          	auipc	a1,0x26
    80007d30:	48c58593          	addi	a1,a1,1164 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d34:	cc11                	beqz	s0,80007d50 <wfi_exception_tests_21+0xf0>
    80007d36:	6498                	ld	a4,8(s1)
    80007d38:	4789                	li	a5,2
    TEST_END();
    80007d3a:	00026597          	auipc	a1,0x26
    80007d3e:	46e58593          	addi	a1,a1,1134 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d42:	00f70763          	beq	a4,a5,80007d50 <wfi_exception_tests_21+0xf0>
    80007d46:	4401                	li	s0,0
    TEST_END();
    80007d48:	00026597          	auipc	a1,0x26
    80007d4c:	47058593          	addi	a1,a1,1136 # 8002e1b8 <__func__.0+0x2d0>
    80007d50:	00026517          	auipc	a0,0x26
    80007d54:	51050513          	addi	a0,a0,1296 # 8002e260 <__func__.0+0x378>
    80007d58:	6d2230ef          	jal	8002b42a <printf>
    80007d5c:	4511                	li	a0,4
    80007d5e:	9aaf90ef          	jal	80000f08 <goto_priv>
    80007d62:	ac3f90ef          	jal	80001824 <reset_state>
}
    80007d66:	60e2                	ld	ra,24(sp)
    80007d68:	8522                	mv	a0,s0
    80007d6a:	6442                	ld	s0,16(sp)
    80007d6c:	64a2                	ld	s1,8(sp)
    80007d6e:	6105                	addi	sp,sp,32
    80007d70:	8082                	ret

0000000080007d72 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007d72:	1101                	addi	sp,sp,-32

    TEST_START();
    80007d74:	00025597          	auipc	a1,0x25
    80007d78:	98c58593          	addi	a1,a1,-1652 # 8002c700 <__func__.1>
    80007d7c:	00026517          	auipc	a0,0x26
    80007d80:	44c50513          	addi	a0,a0,1100 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    80007d84:	ec06                	sd	ra,24(sp)
    80007d86:	e822                	sd	s0,16(sp)
    80007d88:	e426                	sd	s1,8(sp)
    TEST_START();
    80007d8a:	6a0230ef          	jal	8002b42a <printf>
    80007d8e:	4529                	li	a0,10
    80007d90:	388220ef          	jal	8002a118 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007d94:	878f90ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007d98:	4511                	li	a0,4
    80007d9a:	96ef90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0);
    80007d9e:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007da2:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007da6:	002007b7          	lui	a5,0x200
    80007daa:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007dae:	4505                	li	a0,1
    80007db0:	958f90ef          	jal	80000f08 <goto_priv>
    80007db4:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007db8:	08200593          	li	a1,130
    80007dbc:	00028617          	auipc	a2,0x28
    80007dc0:	d4c60613          	addi	a2,a2,-692 # 8002fb08 <__func__.0+0x1c20>
    80007dc4:	00026517          	auipc	a0,0x26
    80007dc8:	41c50513          	addi	a0,a0,1052 # 8002e1e0 <__func__.0+0x2f8>
    80007dcc:	65e230ef          	jal	8002b42a <printf>
    80007dd0:	00050797          	auipc	a5,0x50
    80007dd4:	2417c783          	lbu	a5,577(a5) # 80058011 <excpt+0x1>
    80007dd8:	00050497          	auipc	s1,0x50
    80007ddc:	23848493          	addi	s1,s1,568 # 80058010 <excpt>
    80007de0:	00026597          	auipc	a1,0x26
    80007de4:	3d858593          	addi	a1,a1,984 # 8002e1b8 <__func__.0+0x2d0>
    80007de8:	cf89                	beqz	a5,80007e02 <wfi_exception_tests_22+0x90>
    80007dea:	6498                	ld	a4,8(s1)
    80007dec:	4789                	li	a5,2
    80007dee:	00026597          	auipc	a1,0x26
    80007df2:	3ba58593          	addi	a1,a1,954 # 8002e1a8 <__func__.0+0x2c0>
    80007df6:	00f70663          	beq	a4,a5,80007e02 <wfi_exception_tests_22+0x90>
    80007dfa:	00026597          	auipc	a1,0x26
    80007dfe:	3be58593          	addi	a1,a1,958 # 8002e1b8 <__func__.0+0x2d0>
    80007e02:	00026517          	auipc	a0,0x26
    80007e06:	3f650513          	addi	a0,a0,1014 # 8002e1f8 <__func__.0+0x310>
    80007e0a:	620230ef          	jal	8002b42a <printf>
    80007e0e:	00050797          	auipc	a5,0x50
    80007e12:	2037c783          	lbu	a5,515(a5) # 80058011 <excpt+0x1>
    80007e16:	c789                	beqz	a5,80007e20 <wfi_exception_tests_22+0xae>
    80007e18:	6498                	ld	a4,8(s1)
    80007e1a:	4789                	li	a5,2
    80007e1c:	00f70c63          	beq	a4,a5,80007e34 <wfi_exception_tests_22+0xc2>
    80007e20:	00026517          	auipc	a0,0x26
    80007e24:	3e050513          	addi	a0,a0,992 # 8002e200 <__func__.0+0x318>
    80007e28:	602230ef          	jal	8002b42a <printf>
    80007e2c:	02900513          	li	a0,41
    80007e30:	2e8220ef          	jal	8002a118 <putchar>
    80007e34:	4529                	li	a0,10
    80007e36:	2e2220ef          	jal	8002a118 <putchar>
    80007e3a:	00050417          	auipc	s0,0x50
    80007e3e:	1d744403          	lbu	s0,471(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007e42:	00026597          	auipc	a1,0x26
    80007e46:	37658593          	addi	a1,a1,886 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e4a:	cc11                	beqz	s0,80007e66 <wfi_exception_tests_22+0xf4>
    80007e4c:	6498                	ld	a4,8(s1)
    80007e4e:	4789                	li	a5,2
    TEST_END();
    80007e50:	00026597          	auipc	a1,0x26
    80007e54:	35858593          	addi	a1,a1,856 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e58:	00f70763          	beq	a4,a5,80007e66 <wfi_exception_tests_22+0xf4>
    80007e5c:	4401                	li	s0,0
    TEST_END();
    80007e5e:	00026597          	auipc	a1,0x26
    80007e62:	35a58593          	addi	a1,a1,858 # 8002e1b8 <__func__.0+0x2d0>
    80007e66:	00026517          	auipc	a0,0x26
    80007e6a:	3fa50513          	addi	a0,a0,1018 # 8002e260 <__func__.0+0x378>
    80007e6e:	5bc230ef          	jal	8002b42a <printf>
    80007e72:	4511                	li	a0,4
    80007e74:	894f90ef          	jal	80000f08 <goto_priv>
    80007e78:	9adf90ef          	jal	80001824 <reset_state>
}
    80007e7c:	60e2                	ld	ra,24(sp)
    80007e7e:	8522                	mv	a0,s0
    80007e80:	6442                	ld	s0,16(sp)
    80007e82:	64a2                	ld	s1,8(sp)
    80007e84:	6105                	addi	sp,sp,32
    80007e86:	8082                	ret

0000000080007e88 <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    80007e88:	1141                	addi	sp,sp,-16

    TEST_START();
    80007e8a:	00025597          	auipc	a1,0x25
    80007e8e:	88e58593          	addi	a1,a1,-1906 # 8002c718 <__func__.0>
    80007e92:	00026517          	auipc	a0,0x26
    80007e96:	33650513          	addi	a0,a0,822 # 8002e1c8 <__func__.0+0x2e0>
bool wfi_exception_tests_23() {
    80007e9a:	e406                	sd	ra,8(sp)
    TEST_START();
    80007e9c:	58e230ef          	jal	8002b42a <printf>
    80007ea0:	4529                	li	a0,10
    80007ea2:	276220ef          	jal	8002a118 <putchar>



    TEST_END();
    80007ea6:	00026597          	auipc	a1,0x26
    80007eaa:	30258593          	addi	a1,a1,770 # 8002e1a8 <__func__.0+0x2c0>
    80007eae:	00026517          	auipc	a0,0x26
    80007eb2:	3b250513          	addi	a0,a0,946 # 8002e260 <__func__.0+0x378>
    80007eb6:	574230ef          	jal	8002b42a <printf>
    80007eba:	4511                	li	a0,4
    80007ebc:	84cf90ef          	jal	80000f08 <goto_priv>
    80007ec0:	965f90ef          	jal	80001824 <reset_state>
}
    80007ec4:	60a2                	ld	ra,8(sp)
    80007ec6:	4505                	li	a0,1
    80007ec8:	0141                	addi	sp,sp,16
    80007eca:	8082                	ret

0000000080007ecc <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80007ecc:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80007ece:	00025597          	auipc	a1,0x25
    80007ed2:	86258593          	addi	a1,a1,-1950 # 8002c730 <__func__.3>
    80007ed6:	00026517          	auipc	a0,0x26
    80007eda:	2f250513          	addi	a0,a0,754 # 8002e1c8 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    80007ede:	f406                	sd	ra,40(sp)
    80007ee0:	f022                	sd	s0,32(sp)
    80007ee2:	ec26                	sd	s1,24(sp)
    80007ee4:	e84a                	sd	s2,16(sp)
    80007ee6:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007ee8:	542230ef          	jal	8002b42a <printf>
    80007eec:	4529                	li	a0,10
    80007eee:	22a220ef          	jal	8002a118 <putchar>

    hspt_init();        
    80007ef2:	eeef80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80007ef6:	450d                	li	a0,3
    80007ef8:	810f90ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007efc:	f11f80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007f00:	400197b7          	lui	a5,0x40019
    80007f04:	078a                	slli	a5,a5,0x2
    80007f06:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80007f0a:	00028617          	auipc	a2,0x28
    80007f0e:	c4660613          	addi	a2,a2,-954 # 8002fb50 <__func__.0+0x1c68>
    80007f12:	08200593          	li	a1,130
    80007f16:	00026517          	auipc	a0,0x26
    80007f1a:	2ca50513          	addi	a0,a0,714 # 8002e1e0 <__func__.0+0x2f8>
    80007f1e:	50c230ef          	jal	8002b42a <printf>
    80007f22:	00050797          	auipc	a5,0x50
    80007f26:	0ef7c783          	lbu	a5,239(a5) # 80058011 <excpt+0x1>
    80007f2a:	00050417          	auipc	s0,0x50
    80007f2e:	0e640413          	addi	s0,s0,230 # 80058010 <excpt>
    80007f32:	e399                	bnez	a5,80007f38 <tinst_tests_pf+0x6c>
    80007f34:	6000106f          	j	80009534 <tinst_tests_pf+0x1668>
    80007f38:	6418                	ld	a4,8(s0)
    80007f3a:	47b5                	li	a5,13
    80007f3c:	00026597          	auipc	a1,0x26
    80007f40:	27c58593          	addi	a1,a1,636 # 8002e1b8 <__func__.0+0x2d0>
    80007f44:	00f71463          	bne	a4,a5,80007f4c <tinst_tests_pf+0x80>
    80007f48:	5a40106f          	j	800094ec <tinst_tests_pf+0x1620>
    80007f4c:	00026517          	auipc	a0,0x26
    80007f50:	2ac50513          	addi	a0,a0,684 # 8002e1f8 <__func__.0+0x310>
    80007f54:	4d6230ef          	jal	8002b42a <printf>
    80007f58:	00050797          	auipc	a5,0x50
    80007f5c:	0b97c783          	lbu	a5,185(a5) # 80058011 <excpt+0x1>
    80007f60:	c799                	beqz	a5,80007f6e <tinst_tests_pf+0xa2>
    80007f62:	6418                	ld	a4,8(s0)
    80007f64:	47b5                	li	a5,13
    80007f66:	00f71463          	bne	a4,a5,80007f6e <tinst_tests_pf+0xa2>
    80007f6a:	6260106f          	j	80009590 <tinst_tests_pf+0x16c4>
    80007f6e:	00026517          	auipc	a0,0x26
    80007f72:	29250513          	addi	a0,a0,658 # 8002e200 <__func__.0+0x318>
    80007f76:	4b4230ef          	jal	8002b42a <printf>
    80007f7a:	02900513          	li	a0,41
    80007f7e:	19a220ef          	jal	8002a118 <putchar>
    80007f82:	4529                	li	a0,10
    80007f84:	194220ef          	jal	8002a118 <putchar>
    80007f88:	00050797          	auipc	a5,0x50
    80007f8c:	0897c783          	lbu	a5,137(a5) # 80058011 <excpt+0x1>
    80007f90:	c399                	beqz	a5,80007f96 <tinst_tests_pf+0xca>
    80007f92:	5ae0106f          	j	80009540 <tinst_tests_pf+0x1674>
    80007f96:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007f98:	e75f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007f9c:	400197b7          	lui	a5,0x40019
    80007fa0:	078a                	slli	a5,a5,0x2
    80007fa2:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80007fa6:	00028617          	auipc	a2,0x28
    80007faa:	c2a60613          	addi	a2,a2,-982 # 8002fbd0 <__func__.0+0x1ce8>
    80007fae:	08200593          	li	a1,130
    80007fb2:	00026517          	auipc	a0,0x26
    80007fb6:	22e50513          	addi	a0,a0,558 # 8002e1e0 <__func__.0+0x2f8>
    80007fba:	470230ef          	jal	8002b42a <printf>
    80007fbe:	00050797          	auipc	a5,0x50
    80007fc2:	0537c783          	lbu	a5,83(a5) # 80058011 <excpt+0x1>
    80007fc6:	e399                	bnez	a5,80007fcc <tinst_tests_pf+0x100>
    80007fc8:	64c0106f          	j	80009614 <tinst_tests_pf+0x1748>
    80007fcc:	6418                	ld	a4,8(s0)
    80007fce:	47b5                	li	a5,13
    80007fd0:	00026597          	auipc	a1,0x26
    80007fd4:	1e858593          	addi	a1,a1,488 # 8002e1b8 <__func__.0+0x2d0>
    80007fd8:	00f71463          	bne	a4,a5,80007fe0 <tinst_tests_pf+0x114>
    80007fdc:	5f00106f          	j	800095cc <tinst_tests_pf+0x1700>
    80007fe0:	00026517          	auipc	a0,0x26
    80007fe4:	21850513          	addi	a0,a0,536 # 8002e1f8 <__func__.0+0x310>
    80007fe8:	442230ef          	jal	8002b42a <printf>
    80007fec:	00050797          	auipc	a5,0x50
    80007ff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    80007ff4:	c799                	beqz	a5,80008002 <tinst_tests_pf+0x136>
    80007ff6:	6418                	ld	a4,8(s0)
    80007ff8:	47b5                	li	a5,13
    80007ffa:	00f71463          	bne	a4,a5,80008002 <tinst_tests_pf+0x136>
    80007ffe:	23d0106f          	j	80009a3a <tinst_tests_pf+0x1b6e>
    80008002:	00026517          	auipc	a0,0x26
    80008006:	1fe50513          	addi	a0,a0,510 # 8002e200 <__func__.0+0x318>
    8000800a:	420230ef          	jal	8002b42a <printf>
    8000800e:	02900513          	li	a0,41
    80008012:	106220ef          	jal	8002a118 <putchar>
    80008016:	4529                	li	a0,10
    80008018:	100220ef          	jal	8002a118 <putchar>
    8000801c:	00090e63          	beqz	s2,80008038 <tinst_tests_pf+0x16c>
    80008020:	00050797          	auipc	a5,0x50
    80008024:	ff17c783          	lbu	a5,-15(a5) # 80058011 <excpt+0x1>
    80008028:	c799                	beqz	a5,80008036 <tinst_tests_pf+0x16a>
    8000802a:	6418                	ld	a4,8(s0)
    8000802c:	47b5                	li	a5,13
    8000802e:	00f71463          	bne	a4,a5,80008036 <tinst_tests_pf+0x16a>
    80008032:	64d0106f          	j	80009e7e <tinst_tests_pf+0x1fb2>
    80008036:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008038:	dd5f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000803c:	400197b7          	lui	a5,0x40019
    80008040:	078a                	slli	a5,a5,0x2
    80008042:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80008046:	00028617          	auipc	a2,0x28
    8000804a:	bca60613          	addi	a2,a2,-1078 # 8002fc10 <__func__.0+0x1d28>
    8000804e:	08200593          	li	a1,130
    80008052:	00026517          	auipc	a0,0x26
    80008056:	18e50513          	addi	a0,a0,398 # 8002e1e0 <__func__.0+0x2f8>
    8000805a:	3d0230ef          	jal	8002b42a <printf>
    8000805e:	00050797          	auipc	a5,0x50
    80008062:	fb37c783          	lbu	a5,-77(a5) # 80058011 <excpt+0x1>
    80008066:	e399                	bnez	a5,8000806c <tinst_tests_pf+0x1a0>
    80008068:	6000106f          	j	80009668 <tinst_tests_pf+0x179c>
    8000806c:	6418                	ld	a4,8(s0)
    8000806e:	47b5                	li	a5,13
    80008070:	00026597          	auipc	a1,0x26
    80008074:	14858593          	addi	a1,a1,328 # 8002e1b8 <__func__.0+0x2d0>
    80008078:	00f71463          	bne	a4,a5,80008080 <tinst_tests_pf+0x1b4>
    8000807c:	5a40106f          	j	80009620 <tinst_tests_pf+0x1754>
    80008080:	00026517          	auipc	a0,0x26
    80008084:	17850513          	addi	a0,a0,376 # 8002e1f8 <__func__.0+0x310>
    80008088:	3a2230ef          	jal	8002b42a <printf>
    8000808c:	00050797          	auipc	a5,0x50
    80008090:	f857c783          	lbu	a5,-123(a5) # 80058011 <excpt+0x1>
    80008094:	c799                	beqz	a5,800080a2 <tinst_tests_pf+0x1d6>
    80008096:	6418                	ld	a4,8(s0)
    80008098:	47b5                	li	a5,13
    8000809a:	00f71463          	bne	a4,a5,800080a2 <tinst_tests_pf+0x1d6>
    8000809e:	6990106f          	j	80009f36 <tinst_tests_pf+0x206a>
    800080a2:	00026517          	auipc	a0,0x26
    800080a6:	15e50513          	addi	a0,a0,350 # 8002e200 <__func__.0+0x318>
    800080aa:	380230ef          	jal	8002b42a <printf>
    800080ae:	02900513          	li	a0,41
    800080b2:	066220ef          	jal	8002a118 <putchar>
    800080b6:	4529                	li	a0,10
    800080b8:	060220ef          	jal	8002a118 <putchar>
    800080bc:	00090e63          	beqz	s2,800080d8 <tinst_tests_pf+0x20c>
    800080c0:	00050797          	auipc	a5,0x50
    800080c4:	f517c783          	lbu	a5,-175(a5) # 80058011 <excpt+0x1>
    800080c8:	c799                	beqz	a5,800080d6 <tinst_tests_pf+0x20a>
    800080ca:	6418                	ld	a4,8(s0)
    800080cc:	47b5                	li	a5,13
    800080ce:	00f71463          	bne	a4,a5,800080d6 <tinst_tests_pf+0x20a>
    800080d2:	5eb0106f          	j	80009ebc <tinst_tests_pf+0x1ff0>
    800080d6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080d8:	d35f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    800080dc:	400197b7          	lui	a5,0x40019
    800080e0:	078a                	slli	a5,a5,0x2
    800080e2:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800080e6:	00028617          	auipc	a2,0x28
    800080ea:	b6a60613          	addi	a2,a2,-1174 # 8002fc50 <__func__.0+0x1d68>
    800080ee:	08200593          	li	a1,130
    800080f2:	00026517          	auipc	a0,0x26
    800080f6:	0ee50513          	addi	a0,a0,238 # 8002e1e0 <__func__.0+0x2f8>
    800080fa:	330230ef          	jal	8002b42a <printf>
    800080fe:	00050797          	auipc	a5,0x50
    80008102:	f137c783          	lbu	a5,-237(a5) # 80058011 <excpt+0x1>
    80008106:	e399                	bnez	a5,8000810c <tinst_tests_pf+0x240>
    80008108:	5b40106f          	j	800096bc <tinst_tests_pf+0x17f0>
    8000810c:	6418                	ld	a4,8(s0)
    8000810e:	47b5                	li	a5,13
    80008110:	00026597          	auipc	a1,0x26
    80008114:	0a858593          	addi	a1,a1,168 # 8002e1b8 <__func__.0+0x2d0>
    80008118:	00f71463          	bne	a4,a5,80008120 <tinst_tests_pf+0x254>
    8000811c:	5580106f          	j	80009674 <tinst_tests_pf+0x17a8>
    80008120:	00026517          	auipc	a0,0x26
    80008124:	0d850513          	addi	a0,a0,216 # 8002e1f8 <__func__.0+0x310>
    80008128:	302230ef          	jal	8002b42a <printf>
    8000812c:	00050797          	auipc	a5,0x50
    80008130:	ee57c783          	lbu	a5,-283(a5) # 80058011 <excpt+0x1>
    80008134:	c799                	beqz	a5,80008142 <tinst_tests_pf+0x276>
    80008136:	6418                	ld	a4,8(s0)
    80008138:	47b5                	li	a5,13
    8000813a:	00f71463          	bne	a4,a5,80008142 <tinst_tests_pf+0x276>
    8000813e:	6990106f          	j	80009fd6 <tinst_tests_pf+0x210a>
    80008142:	00026517          	auipc	a0,0x26
    80008146:	0be50513          	addi	a0,a0,190 # 8002e200 <__func__.0+0x318>
    8000814a:	2e0230ef          	jal	8002b42a <printf>
    8000814e:	02900513          	li	a0,41
    80008152:	7c7210ef          	jal	8002a118 <putchar>
    80008156:	4529                	li	a0,10
    80008158:	7c1210ef          	jal	8002a118 <putchar>
    8000815c:	00090e63          	beqz	s2,80008178 <tinst_tests_pf+0x2ac>
    80008160:	00050797          	auipc	a5,0x50
    80008164:	eb17c783          	lbu	a5,-335(a5) # 80058011 <excpt+0x1>
    80008168:	c799                	beqz	a5,80008176 <tinst_tests_pf+0x2aa>
    8000816a:	6418                	ld	a4,8(s0)
    8000816c:	47b5                	li	a5,13
    8000816e:	00f71463          	bne	a4,a5,80008176 <tinst_tests_pf+0x2aa>
    80008172:	5890106f          	j	80009efa <tinst_tests_pf+0x202e>
    80008176:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008178:	c95f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000817c:	400197b7          	lui	a5,0x40019
    80008180:	078a                	slli	a5,a5,0x2
    80008182:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008186:	00028617          	auipc	a2,0x28
    8000818a:	b0a60613          	addi	a2,a2,-1270 # 8002fc90 <__func__.0+0x1da8>
    8000818e:	08200593          	li	a1,130
    80008192:	00026517          	auipc	a0,0x26
    80008196:	04e50513          	addi	a0,a0,78 # 8002e1e0 <__func__.0+0x2f8>
    8000819a:	290230ef          	jal	8002b42a <printf>
    8000819e:	00050797          	auipc	a5,0x50
    800081a2:	e737c783          	lbu	a5,-397(a5) # 80058011 <excpt+0x1>
    800081a6:	e399                	bnez	a5,800081ac <tinst_tests_pf+0x2e0>
    800081a8:	5680106f          	j	80009710 <tinst_tests_pf+0x1844>
    800081ac:	6418                	ld	a4,8(s0)
    800081ae:	47b5                	li	a5,13
    800081b0:	00026597          	auipc	a1,0x26
    800081b4:	00858593          	addi	a1,a1,8 # 8002e1b8 <__func__.0+0x2d0>
    800081b8:	00f71463          	bne	a4,a5,800081c0 <tinst_tests_pf+0x2f4>
    800081bc:	50c0106f          	j	800096c8 <tinst_tests_pf+0x17fc>
    800081c0:	00026517          	auipc	a0,0x26
    800081c4:	03850513          	addi	a0,a0,56 # 8002e1f8 <__func__.0+0x310>
    800081c8:	262230ef          	jal	8002b42a <printf>
    800081cc:	00050797          	auipc	a5,0x50
    800081d0:	e457c783          	lbu	a5,-443(a5) # 80058011 <excpt+0x1>
    800081d4:	c799                	beqz	a5,800081e2 <tinst_tests_pf+0x316>
    800081d6:	6418                	ld	a4,8(s0)
    800081d8:	47b5                	li	a5,13
    800081da:	00f71463          	bne	a4,a5,800081e2 <tinst_tests_pf+0x316>
    800081de:	68b0106f          	j	8000a068 <tinst_tests_pf+0x219c>
    800081e2:	00026517          	auipc	a0,0x26
    800081e6:	01e50513          	addi	a0,a0,30 # 8002e200 <__func__.0+0x318>
    800081ea:	240230ef          	jal	8002b42a <printf>
    800081ee:	02900513          	li	a0,41
    800081f2:	727210ef          	jal	8002a118 <putchar>
    800081f6:	4529                	li	a0,10
    800081f8:	721210ef          	jal	8002a118 <putchar>
    800081fc:	00090a63          	beqz	s2,80008210 <tinst_tests_pf+0x344>
    80008200:	00050797          	auipc	a5,0x50
    80008204:	e117c783          	lbu	a5,-495(a5) # 80058011 <excpt+0x1>
    80008208:	c399                	beqz	a5,8000820e <tinst_tests_pf+0x342>
    8000820a:	06d0106f          	j	80009a76 <tinst_tests_pf+0x1baa>
    8000820e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008210:	bfdf80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    80008214:	400197b7          	lui	a5,0x40019
    80008218:	078a                	slli	a5,a5,0x2
    8000821a:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000821e:	00028617          	auipc	a2,0x28
    80008222:	ab260613          	addi	a2,a2,-1358 # 8002fcd0 <__func__.0+0x1de8>
    80008226:	08200593          	li	a1,130
    8000822a:	00026517          	auipc	a0,0x26
    8000822e:	fb650513          	addi	a0,a0,-74 # 8002e1e0 <__func__.0+0x2f8>
    80008232:	1f8230ef          	jal	8002b42a <printf>
    80008236:	00050797          	auipc	a5,0x50
    8000823a:	ddb7c783          	lbu	a5,-549(a5) # 80058011 <excpt+0x1>
    8000823e:	e399                	bnez	a5,80008244 <tinst_tests_pf+0x378>
    80008240:	5240106f          	j	80009764 <tinst_tests_pf+0x1898>
    80008244:	6418                	ld	a4,8(s0)
    80008246:	47b5                	li	a5,13
    80008248:	00026597          	auipc	a1,0x26
    8000824c:	f7058593          	addi	a1,a1,-144 # 8002e1b8 <__func__.0+0x2d0>
    80008250:	00f71463          	bne	a4,a5,80008258 <tinst_tests_pf+0x38c>
    80008254:	4c80106f          	j	8000971c <tinst_tests_pf+0x1850>
    80008258:	00026517          	auipc	a0,0x26
    8000825c:	fa050513          	addi	a0,a0,-96 # 8002e1f8 <__func__.0+0x310>
    80008260:	1ca230ef          	jal	8002b42a <printf>
    80008264:	00050797          	auipc	a5,0x50
    80008268:	dad7c783          	lbu	a5,-595(a5) # 80058011 <excpt+0x1>
    8000826c:	c799                	beqz	a5,8000827a <tinst_tests_pf+0x3ae>
    8000826e:	6418                	ld	a4,8(s0)
    80008270:	47b5                	li	a5,13
    80008272:	00f71463          	bne	a4,a5,8000827a <tinst_tests_pf+0x3ae>
    80008276:	6890106f          	j	8000a0fe <tinst_tests_pf+0x2232>
    8000827a:	00026517          	auipc	a0,0x26
    8000827e:	f8650513          	addi	a0,a0,-122 # 8002e200 <__func__.0+0x318>
    80008282:	1a8230ef          	jal	8002b42a <printf>
    80008286:	02900513          	li	a0,41
    8000828a:	68f210ef          	jal	8002a118 <putchar>
    8000828e:	4529                	li	a0,10
    80008290:	689210ef          	jal	8002a118 <putchar>
    80008294:	00090a63          	beqz	s2,800082a8 <tinst_tests_pf+0x3dc>
    80008298:	00050797          	auipc	a5,0x50
    8000829c:	d797c783          	lbu	a5,-647(a5) # 80058011 <excpt+0x1>
    800082a0:	c399                	beqz	a5,800082a6 <tinst_tests_pf+0x3da>
    800082a2:	0850106f          	j	80009b26 <tinst_tests_pf+0x1c5a>
    800082a6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800082a8:	b65f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800082ac:	400197b7          	lui	a5,0x40019
    800082b0:	078a                	slli	a5,a5,0x2
    800082b2:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800082b6:	00028617          	auipc	a2,0x28
    800082ba:	a5a60613          	addi	a2,a2,-1446 # 8002fd10 <__func__.0+0x1e28>
    800082be:	08200593          	li	a1,130
    800082c2:	00026517          	auipc	a0,0x26
    800082c6:	f1e50513          	addi	a0,a0,-226 # 8002e1e0 <__func__.0+0x2f8>
    800082ca:	160230ef          	jal	8002b42a <printf>
    800082ce:	00050797          	auipc	a5,0x50
    800082d2:	d437c783          	lbu	a5,-701(a5) # 80058011 <excpt+0x1>
    800082d6:	e399                	bnez	a5,800082dc <tinst_tests_pf+0x410>
    800082d8:	4e00106f          	j	800097b8 <tinst_tests_pf+0x18ec>
    800082dc:	6418                	ld	a4,8(s0)
    800082de:	47b5                	li	a5,13
    800082e0:	00026597          	auipc	a1,0x26
    800082e4:	ed858593          	addi	a1,a1,-296 # 8002e1b8 <__func__.0+0x2d0>
    800082e8:	00f71463          	bne	a4,a5,800082f0 <tinst_tests_pf+0x424>
    800082ec:	4840106f          	j	80009770 <tinst_tests_pf+0x18a4>
    800082f0:	00026517          	auipc	a0,0x26
    800082f4:	f0850513          	addi	a0,a0,-248 # 8002e1f8 <__func__.0+0x310>
    800082f8:	132230ef          	jal	8002b42a <printf>
    800082fc:	00050797          	auipc	a5,0x50
    80008300:	d157c783          	lbu	a5,-747(a5) # 80058011 <excpt+0x1>
    80008304:	c799                	beqz	a5,80008312 <tinst_tests_pf+0x446>
    80008306:	6418                	ld	a4,8(s0)
    80008308:	47b5                	li	a5,13
    8000830a:	00f71463          	bne	a4,a5,80008312 <tinst_tests_pf+0x446>
    8000830e:	6870106f          	j	8000a194 <tinst_tests_pf+0x22c8>
    80008312:	00026517          	auipc	a0,0x26
    80008316:	eee50513          	addi	a0,a0,-274 # 8002e200 <__func__.0+0x318>
    8000831a:	110230ef          	jal	8002b42a <printf>
    8000831e:	02900513          	li	a0,41
    80008322:	5f7210ef          	jal	8002a118 <putchar>
    80008326:	4529                	li	a0,10
    80008328:	5f1210ef          	jal	8002a118 <putchar>
    8000832c:	00090a63          	beqz	s2,80008340 <tinst_tests_pf+0x474>
    80008330:	00050797          	auipc	a5,0x50
    80008334:	ce17c783          	lbu	a5,-799(a5) # 80058011 <excpt+0x1>
    80008338:	c399                	beqz	a5,8000833e <tinst_tests_pf+0x472>
    8000833a:	0370106f          	j	80009b70 <tinst_tests_pf+0x1ca4>
    8000833e:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80008340:	acdf80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    80008344:	400197b7          	lui	a5,0x40019
    80008348:	078a                	slli	a5,a5,0x2
    8000834a:	573d                	li	a4,-17
    8000834c:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008350:	00028617          	auipc	a2,0x28
    80008354:	a0060613          	addi	a2,a2,-1536 # 8002fd50 <__func__.0+0x1e68>
    80008358:	08200593          	li	a1,130
    8000835c:	00026517          	auipc	a0,0x26
    80008360:	e8450513          	addi	a0,a0,-380 # 8002e1e0 <__func__.0+0x2f8>
    80008364:	0c6230ef          	jal	8002b42a <printf>
    80008368:	00050797          	auipc	a5,0x50
    8000836c:	ca97c783          	lbu	a5,-855(a5) # 80058011 <excpt+0x1>
    80008370:	e399                	bnez	a5,80008376 <tinst_tests_pf+0x4aa>
    80008372:	4a00106f          	j	80009812 <tinst_tests_pf+0x1946>
    80008376:	6418                	ld	a4,8(s0)
    80008378:	47bd                	li	a5,15
    8000837a:	00026597          	auipc	a1,0x26
    8000837e:	e3e58593          	addi	a1,a1,-450 # 8002e1b8 <__func__.0+0x2d0>
    80008382:	00f71463          	bne	a4,a5,8000838a <tinst_tests_pf+0x4be>
    80008386:	43e0106f          	j	800097c4 <tinst_tests_pf+0x18f8>
    8000838a:	00026517          	auipc	a0,0x26
    8000838e:	e6e50513          	addi	a0,a0,-402 # 8002e1f8 <__func__.0+0x310>
    80008392:	098230ef          	jal	8002b42a <printf>
    80008396:	00050797          	auipc	a5,0x50
    8000839a:	c7b7c783          	lbu	a5,-901(a5) # 80058011 <excpt+0x1>
    8000839e:	c799                	beqz	a5,800083ac <tinst_tests_pf+0x4e0>
    800083a0:	6418                	ld	a4,8(s0)
    800083a2:	47bd                	li	a5,15
    800083a4:	00f71463          	bne	a4,a5,800083ac <tinst_tests_pf+0x4e0>
    800083a8:	6830106f          	j	8000a22a <tinst_tests_pf+0x235e>
    800083ac:	00026517          	auipc	a0,0x26
    800083b0:	e5450513          	addi	a0,a0,-428 # 8002e200 <__func__.0+0x318>
    800083b4:	076230ef          	jal	8002b42a <printf>
    800083b8:	02900513          	li	a0,41
    800083bc:	55d210ef          	jal	8002a118 <putchar>
    800083c0:	4529                	li	a0,10
    800083c2:	557210ef          	jal	8002a118 <putchar>
    800083c6:	00090a63          	beqz	s2,800083da <tinst_tests_pf+0x50e>
    800083ca:	00050797          	auipc	a5,0x50
    800083ce:	c477c783          	lbu	a5,-953(a5) # 80058011 <excpt+0x1>
    800083d2:	c399                	beqz	a5,800083d8 <tinst_tests_pf+0x50c>
    800083d4:	7e60106f          	j	80009bba <tinst_tests_pf+0x1cee>
    800083d8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800083da:	a33f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800083de:	77f1                	lui	a5,0xffffc
    800083e0:	40019737          	lui	a4,0x40019
    800083e4:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800083e8:	070a                	slli	a4,a4,0x2
    800083ea:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800083ee:	00028617          	auipc	a2,0x28
    800083f2:	9a260613          	addi	a2,a2,-1630 # 8002fd90 <__func__.0+0x1ea8>
    800083f6:	08200593          	li	a1,130
    800083fa:	00026517          	auipc	a0,0x26
    800083fe:	de650513          	addi	a0,a0,-538 # 8002e1e0 <__func__.0+0x2f8>
    80008402:	028230ef          	jal	8002b42a <printf>
    80008406:	00050797          	auipc	a5,0x50
    8000840a:	c0b7c783          	lbu	a5,-1013(a5) # 80058011 <excpt+0x1>
    8000840e:	e399                	bnez	a5,80008414 <tinst_tests_pf+0x548>
    80008410:	45c0106f          	j	8000986c <tinst_tests_pf+0x19a0>
    80008414:	6418                	ld	a4,8(s0)
    80008416:	47bd                	li	a5,15
    80008418:	00026597          	auipc	a1,0x26
    8000841c:	da058593          	addi	a1,a1,-608 # 8002e1b8 <__func__.0+0x2d0>
    80008420:	00f71463          	bne	a4,a5,80008428 <tinst_tests_pf+0x55c>
    80008424:	3fa0106f          	j	8000981e <tinst_tests_pf+0x1952>
    80008428:	00026517          	auipc	a0,0x26
    8000842c:	dd050513          	addi	a0,a0,-560 # 8002e1f8 <__func__.0+0x310>
    80008430:	7fb220ef          	jal	8002b42a <printf>
    80008434:	00050797          	auipc	a5,0x50
    80008438:	bdd7c783          	lbu	a5,-1059(a5) # 80058011 <excpt+0x1>
    8000843c:	c799                	beqz	a5,8000844a <tinst_tests_pf+0x57e>
    8000843e:	6418                	ld	a4,8(s0)
    80008440:	47bd                	li	a5,15
    80008442:	00f71463          	bne	a4,a5,8000844a <tinst_tests_pf+0x57e>
    80008446:	6810106f          	j	8000a2c6 <tinst_tests_pf+0x23fa>
    8000844a:	00026517          	auipc	a0,0x26
    8000844e:	db650513          	addi	a0,a0,-586 # 8002e200 <__func__.0+0x318>
    80008452:	7d9220ef          	jal	8002b42a <printf>
    80008456:	02900513          	li	a0,41
    8000845a:	4bf210ef          	jal	8002a118 <putchar>
    8000845e:	4529                	li	a0,10
    80008460:	4b9210ef          	jal	8002a118 <putchar>
    80008464:	00090a63          	beqz	s2,80008478 <tinst_tests_pf+0x5ac>
    80008468:	00050797          	auipc	a5,0x50
    8000846c:	ba97c783          	lbu	a5,-1111(a5) # 80058011 <excpt+0x1>
    80008470:	c399                	beqz	a5,80008476 <tinst_tests_pf+0x5aa>
    80008472:	7960106f          	j	80009c08 <tinst_tests_pf+0x1d3c>
    80008476:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008478:	995f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000847c:	deadc7b7          	lui	a5,0xdeadc
    80008480:	40019737          	lui	a4,0x40019
    80008484:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80008488:	070a                	slli	a4,a4,0x2
    8000848a:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000848e:	00028617          	auipc	a2,0x28
    80008492:	94260613          	addi	a2,a2,-1726 # 8002fdd0 <__func__.0+0x1ee8>
    80008496:	08200593          	li	a1,130
    8000849a:	00026517          	auipc	a0,0x26
    8000849e:	d4650513          	addi	a0,a0,-698 # 8002e1e0 <__func__.0+0x2f8>
    800084a2:	789220ef          	jal	8002b42a <printf>
    800084a6:	00050797          	auipc	a5,0x50
    800084aa:	b6b7c783          	lbu	a5,-1173(a5) # 80058011 <excpt+0x1>
    800084ae:	e399                	bnez	a5,800084b4 <tinst_tests_pf+0x5e8>
    800084b0:	4160106f          	j	800098c6 <tinst_tests_pf+0x19fa>
    800084b4:	6418                	ld	a4,8(s0)
    800084b6:	47bd                	li	a5,15
    800084b8:	00026597          	auipc	a1,0x26
    800084bc:	d0058593          	addi	a1,a1,-768 # 8002e1b8 <__func__.0+0x2d0>
    800084c0:	00f71463          	bne	a4,a5,800084c8 <tinst_tests_pf+0x5fc>
    800084c4:	3b40106f          	j	80009878 <tinst_tests_pf+0x19ac>
    800084c8:	00026517          	auipc	a0,0x26
    800084cc:	d3050513          	addi	a0,a0,-720 # 8002e1f8 <__func__.0+0x310>
    800084d0:	75b220ef          	jal	8002b42a <printf>
    800084d4:	00050797          	auipc	a5,0x50
    800084d8:	b3d7c783          	lbu	a5,-1219(a5) # 80058011 <excpt+0x1>
    800084dc:	c799                	beqz	a5,800084ea <tinst_tests_pf+0x61e>
    800084de:	6418                	ld	a4,8(s0)
    800084e0:	47bd                	li	a5,15
    800084e2:	00f71463          	bne	a4,a5,800084ea <tinst_tests_pf+0x61e>
    800084e6:	67d0106f          	j	8000a362 <tinst_tests_pf+0x2496>
    800084ea:	00026517          	auipc	a0,0x26
    800084ee:	d1650513          	addi	a0,a0,-746 # 8002e200 <__func__.0+0x318>
    800084f2:	739220ef          	jal	8002b42a <printf>
    800084f6:	02900513          	li	a0,41
    800084fa:	41f210ef          	jal	8002a118 <putchar>
    800084fe:	4529                	li	a0,10
    80008500:	419210ef          	jal	8002a118 <putchar>
    80008504:	00090a63          	beqz	s2,80008518 <tinst_tests_pf+0x64c>
    80008508:	00050797          	auipc	a5,0x50
    8000850c:	b097c783          	lbu	a5,-1271(a5) # 80058011 <excpt+0x1>
    80008510:	c399                	beqz	a5,80008516 <tinst_tests_pf+0x64a>
    80008512:	7440106f          	j	80009c56 <tinst_tests_pf+0x1d8a>
    80008516:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008518:	8f5f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000851c:	37ab77b7          	lui	a5,0x37ab7
    80008520:	078a                	slli	a5,a5,0x2
    80008522:	40019737          	lui	a4,0x40019
    80008526:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000852a:	070a                	slli	a4,a4,0x2
    8000852c:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008530:	00028617          	auipc	a2,0x28
    80008534:	8e060613          	addi	a2,a2,-1824 # 8002fe10 <__func__.0+0x1f28>
    80008538:	08200593          	li	a1,130
    8000853c:	00026517          	auipc	a0,0x26
    80008540:	ca450513          	addi	a0,a0,-860 # 8002e1e0 <__func__.0+0x2f8>
    80008544:	6e7220ef          	jal	8002b42a <printf>
    80008548:	00050797          	auipc	a5,0x50
    8000854c:	ac97c783          	lbu	a5,-1335(a5) # 80058011 <excpt+0x1>
    80008550:	e399                	bnez	a5,80008556 <tinst_tests_pf+0x68a>
    80008552:	3ce0106f          	j	80009920 <tinst_tests_pf+0x1a54>
    80008556:	6418                	ld	a4,8(s0)
    80008558:	47bd                	li	a5,15
    8000855a:	00026597          	auipc	a1,0x26
    8000855e:	c5e58593          	addi	a1,a1,-930 # 8002e1b8 <__func__.0+0x2d0>
    80008562:	00f71463          	bne	a4,a5,8000856a <tinst_tests_pf+0x69e>
    80008566:	36c0106f          	j	800098d2 <tinst_tests_pf+0x1a06>
    8000856a:	00026517          	auipc	a0,0x26
    8000856e:	c8e50513          	addi	a0,a0,-882 # 8002e1f8 <__func__.0+0x310>
    80008572:	6b9220ef          	jal	8002b42a <printf>
    80008576:	00050797          	auipc	a5,0x50
    8000857a:	a9b7c783          	lbu	a5,-1381(a5) # 80058011 <excpt+0x1>
    8000857e:	c799                	beqz	a5,8000858c <tinst_tests_pf+0x6c0>
    80008580:	6418                	ld	a4,8(s0)
    80008582:	47bd                	li	a5,15
    80008584:	00f71463          	bne	a4,a5,8000858c <tinst_tests_pf+0x6c0>
    80008588:	6770106f          	j	8000a3fe <tinst_tests_pf+0x2532>
    8000858c:	00026517          	auipc	a0,0x26
    80008590:	c7450513          	addi	a0,a0,-908 # 8002e200 <__func__.0+0x318>
    80008594:	697220ef          	jal	8002b42a <printf>
    80008598:	02900513          	li	a0,41
    8000859c:	37d210ef          	jal	8002a118 <putchar>
    800085a0:	4529                	li	a0,10
    800085a2:	377210ef          	jal	8002a118 <putchar>
    800085a6:	00090a63          	beqz	s2,800085ba <tinst_tests_pf+0x6ee>
    800085aa:	00050797          	auipc	a5,0x50
    800085ae:	a677c783          	lbu	a5,-1433(a5) # 80058011 <excpt+0x1>
    800085b2:	c399                	beqz	a5,800085b8 <tinst_tests_pf+0x6ec>
    800085b4:	6f00106f          	j	80009ca4 <tinst_tests_pf+0x1dd8>
    800085b8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800085ba:	853f80ef          	jal	80000e0c <test_setup_except_function>
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800085be:	40019537          	lui	a0,0x40019
    800085c2:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800085c4:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800085c6:	00028617          	auipc	a2,0x28
    800085ca:	88a60613          	addi	a2,a2,-1910 # 8002fe50 <__func__.0+0x1f68>
    800085ce:	08200593          	li	a1,130
    800085d2:	00026517          	auipc	a0,0x26
    800085d6:	c0e50513          	addi	a0,a0,-1010 # 8002e1e0 <__func__.0+0x2f8>
    800085da:	651220ef          	jal	8002b42a <printf>
    800085de:	00050797          	auipc	a5,0x50
    800085e2:	a337c783          	lbu	a5,-1485(a5) # 80058011 <excpt+0x1>
    800085e6:	c799                	beqz	a5,800085f4 <tinst_tests_pf+0x728>
    800085e8:	6418                	ld	a4,8(s0)
    800085ea:	47b5                	li	a5,13
    800085ec:	00f71463          	bne	a4,a5,800085f4 <tinst_tests_pf+0x728>
    800085f0:	7fe0106f          	j	80009dee <tinst_tests_pf+0x1f22>
    800085f4:	00026597          	auipc	a1,0x26
    800085f8:	bc458593          	addi	a1,a1,-1084 # 8002e1b8 <__func__.0+0x2d0>
    800085fc:	00026517          	auipc	a0,0x26
    80008600:	bfc50513          	addi	a0,a0,-1028 # 8002e1f8 <__func__.0+0x310>
    80008604:	627220ef          	jal	8002b42a <printf>
    80008608:	00050797          	auipc	a5,0x50
    8000860c:	a097c783          	lbu	a5,-1527(a5) # 80058011 <excpt+0x1>
    80008610:	c799                	beqz	a5,8000861e <tinst_tests_pf+0x752>
    80008612:	6418                	ld	a4,8(s0)
    80008614:	47b5                	li	a5,13
    80008616:	00f71463          	bne	a4,a5,8000861e <tinst_tests_pf+0x752>
    8000861a:	6810106f          	j	8000a49a <tinst_tests_pf+0x25ce>
    8000861e:	00026517          	auipc	a0,0x26
    80008622:	be250513          	addi	a0,a0,-1054 # 8002e200 <__func__.0+0x318>
    80008626:	605220ef          	jal	8002b42a <printf>
    8000862a:	02900513          	li	a0,41
    8000862e:	2eb210ef          	jal	8002a118 <putchar>
    80008632:	4529                	li	a0,10
    80008634:	2e5210ef          	jal	8002a118 <putchar>
    80008638:	00090a63          	beqz	s2,8000864c <tinst_tests_pf+0x780>
    8000863c:	00050797          	auipc	a5,0x50
    80008640:	9d57c783          	lbu	a5,-1579(a5) # 80058011 <excpt+0x1>
    80008644:	c399                	beqz	a5,8000864a <tinst_tests_pf+0x77e>
    80008646:	6ac0106f          	j	80009cf2 <tinst_tests_pf+0x1e26>
    8000864a:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000864c:	fc0f80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008650:	40019537          	lui	a0,0x40019
    80008654:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008656:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008658:	00028617          	auipc	a2,0x28
    8000865c:	83860613          	addi	a2,a2,-1992 # 8002fe90 <__func__.0+0x1fa8>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80008660:	84ae                	mv	s1,a1
    80008662:	00026517          	auipc	a0,0x26
    80008666:	b7e50513          	addi	a0,a0,-1154 # 8002e1e0 <__func__.0+0x2f8>
    8000866a:	08200593          	li	a1,130
    8000866e:	5bd220ef          	jal	8002b42a <printf>
    80008672:	00050797          	auipc	a5,0x50
    80008676:	99f7c783          	lbu	a5,-1633(a5) # 80058011 <excpt+0x1>
    8000867a:	c799                	beqz	a5,80008688 <tinst_tests_pf+0x7bc>
    8000867c:	6418                	ld	a4,8(s0)
    8000867e:	47b5                	li	a5,13
    80008680:	00f71463          	bne	a4,a5,80008688 <tinst_tests_pf+0x7bc>
    80008684:	7be0106f          	j	80009e42 <tinst_tests_pf+0x1f76>
    80008688:	00026597          	auipc	a1,0x26
    8000868c:	b3058593          	addi	a1,a1,-1232 # 8002e1b8 <__func__.0+0x2d0>
    80008690:	00026517          	auipc	a0,0x26
    80008694:	b6850513          	addi	a0,a0,-1176 # 8002e1f8 <__func__.0+0x310>
    80008698:	593220ef          	jal	8002b42a <printf>
    8000869c:	00050797          	auipc	a5,0x50
    800086a0:	9757c783          	lbu	a5,-1675(a5) # 80058011 <excpt+0x1>
    800086a4:	c799                	beqz	a5,800086b2 <tinst_tests_pf+0x7e6>
    800086a6:	6418                	ld	a4,8(s0)
    800086a8:	47b5                	li	a5,13
    800086aa:	00f71463          	bne	a4,a5,800086b2 <tinst_tests_pf+0x7e6>
    800086ae:	6730106f          	j	8000a520 <tinst_tests_pf+0x2654>
    800086b2:	00026517          	auipc	a0,0x26
    800086b6:	b4e50513          	addi	a0,a0,-1202 # 8002e200 <__func__.0+0x318>
    800086ba:	571220ef          	jal	8002b42a <printf>
    800086be:	02900513          	li	a0,41
    800086c2:	257210ef          	jal	8002a118 <putchar>
    800086c6:	4529                	li	a0,10
    800086c8:	251210ef          	jal	8002a118 <putchar>
    800086cc:	00090a63          	beqz	s2,800086e0 <tinst_tests_pf+0x814>
    800086d0:	00050797          	auipc	a5,0x50
    800086d4:	9417c783          	lbu	a5,-1727(a5) # 80058011 <excpt+0x1>
    800086d8:	c399                	beqz	a5,800086de <tinst_tests_pf+0x812>
    800086da:	6520106f          	j	80009d2c <tinst_tests_pf+0x1e60>
    800086de:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800086e0:	f2cf80ef          	jal	80000e0c <test_setup_except_function>
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800086e4:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    800086e8:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    800086ea:	050a                	slli	a0,a0,0x2
    asm volatile(
    800086ec:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800086ee:	00027617          	auipc	a2,0x27
    800086f2:	76260613          	addi	a2,a2,1890 # 8002fe50 <__func__.0+0x1f68>
    800086f6:	08200593          	li	a1,130
    800086fa:	00026517          	auipc	a0,0x26
    800086fe:	ae650513          	addi	a0,a0,-1306 # 8002e1e0 <__func__.0+0x2f8>
    80008702:	529220ef          	jal	8002b42a <printf>
    80008706:	00050797          	auipc	a5,0x50
    8000870a:	90b7c783          	lbu	a5,-1781(a5) # 80058011 <excpt+0x1>
    8000870e:	c799                	beqz	a5,8000871c <tinst_tests_pf+0x850>
    80008710:	6418                	ld	a4,8(s0)
    80008712:	47bd                	li	a5,15
    80008714:	00f71463          	bne	a4,a5,8000871c <tinst_tests_pf+0x850>
    80008718:	73e0106f          	j	80009e56 <tinst_tests_pf+0x1f8a>
    8000871c:	00026597          	auipc	a1,0x26
    80008720:	a9c58593          	addi	a1,a1,-1380 # 8002e1b8 <__func__.0+0x2d0>
    80008724:	00026517          	auipc	a0,0x26
    80008728:	ad450513          	addi	a0,a0,-1324 # 8002e1f8 <__func__.0+0x310>
    8000872c:	4ff220ef          	jal	8002b42a <printf>
    80008730:	00050797          	auipc	a5,0x50
    80008734:	8e17c783          	lbu	a5,-1823(a5) # 80058011 <excpt+0x1>
    80008738:	c799                	beqz	a5,80008746 <tinst_tests_pf+0x87a>
    8000873a:	6418                	ld	a4,8(s0)
    8000873c:	47bd                	li	a5,15
    8000873e:	00f71463          	bne	a4,a5,80008746 <tinst_tests_pf+0x87a>
    80008742:	6690106f          	j	8000a5aa <tinst_tests_pf+0x26de>
    80008746:	00026517          	auipc	a0,0x26
    8000874a:	aba50513          	addi	a0,a0,-1350 # 8002e200 <__func__.0+0x318>
    8000874e:	4dd220ef          	jal	8002b42a <printf>
    80008752:	02900513          	li	a0,41
    80008756:	1c3210ef          	jal	8002a118 <putchar>
    8000875a:	4529                	li	a0,10
    8000875c:	1bd210ef          	jal	8002a118 <putchar>
    80008760:	00090e63          	beqz	s2,8000877c <tinst_tests_pf+0x8b0>
    80008764:	00050797          	auipc	a5,0x50
    80008768:	8ad7c783          	lbu	a5,-1875(a5) # 80058011 <excpt+0x1>
    8000876c:	c799                	beqz	a5,8000877a <tinst_tests_pf+0x8ae>
    8000876e:	6418                	ld	a4,8(s0)
    80008770:	47bd                	li	a5,15
    80008772:	00f71463          	bne	a4,a5,8000877a <tinst_tests_pf+0x8ae>
    80008776:	4920206f          	j	8000ac08 <tinst_tests_pf+0x2d3c>
    8000877a:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000877c:	e90f80ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008780:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008784:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008786:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008788:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000878a:	00027617          	auipc	a2,0x27
    8000878e:	74660613          	addi	a2,a2,1862 # 8002fed0 <__func__.0+0x1fe8>
    80008792:	08200593          	li	a1,130
    80008796:	00026517          	auipc	a0,0x26
    8000879a:	a4a50513          	addi	a0,a0,-1462 # 8002e1e0 <__func__.0+0x2f8>
    8000879e:	48d220ef          	jal	8002b42a <printf>
    800087a2:	00050797          	auipc	a5,0x50
    800087a6:	86f7c783          	lbu	a5,-1937(a5) # 80058011 <excpt+0x1>
    800087aa:	c799                	beqz	a5,800087b8 <tinst_tests_pf+0x8ec>
    800087ac:	6418                	ld	a4,8(s0)
    800087ae:	47bd                	li	a5,15
    800087b0:	00f71463          	bne	a4,a5,800087b8 <tinst_tests_pf+0x8ec>
    800087b4:	6b60106f          	j	80009e6a <tinst_tests_pf+0x1f9e>
    800087b8:	00026597          	auipc	a1,0x26
    800087bc:	a0058593          	addi	a1,a1,-1536 # 8002e1b8 <__func__.0+0x2d0>
    800087c0:	00026517          	auipc	a0,0x26
    800087c4:	a3850513          	addi	a0,a0,-1480 # 8002e1f8 <__func__.0+0x310>
    800087c8:	463220ef          	jal	8002b42a <printf>
    800087cc:	00050797          	auipc	a5,0x50
    800087d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    800087d4:	c799                	beqz	a5,800087e2 <tinst_tests_pf+0x916>
    800087d6:	6418                	ld	a4,8(s0)
    800087d8:	47bd                	li	a5,15
    800087da:	00f71463          	bne	a4,a5,800087e2 <tinst_tests_pf+0x916>
    800087de:	65b0106f          	j	8000a638 <tinst_tests_pf+0x276c>
    800087e2:	00026517          	auipc	a0,0x26
    800087e6:	a1e50513          	addi	a0,a0,-1506 # 8002e200 <__func__.0+0x318>
    800087ea:	441220ef          	jal	8002b42a <printf>
    800087ee:	02900513          	li	a0,41
    800087f2:	127210ef          	jal	8002a118 <putchar>
    800087f6:	4529                	li	a0,10
    800087f8:	121210ef          	jal	8002a118 <putchar>
    800087fc:	00090e63          	beqz	s2,80008818 <tinst_tests_pf+0x94c>
    80008800:	00050797          	auipc	a5,0x50
    80008804:	8117c783          	lbu	a5,-2031(a5) # 80058011 <excpt+0x1>
    80008808:	c799                	beqz	a5,80008816 <tinst_tests_pf+0x94a>
    8000880a:	6418                	ld	a4,8(s0)
    8000880c:	47bd                	li	a5,15
    8000880e:	00f71463          	bne	a4,a5,80008816 <tinst_tests_pf+0x94a>
    80008812:	42c0206f          	j	8000ac3e <tinst_tests_pf+0x2d72>
    80008816:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008818:	df4f80ef          	jal	80000e0c <test_setup_except_function>
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    8000881c:	400197b7          	lui	a5,0x40019
    80008820:	078a                	slli	a5,a5,0x2
    80008822:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008826:	00027617          	auipc	a2,0x27
    8000882a:	6ea60613          	addi	a2,a2,1770 # 8002ff10 <__func__.0+0x2028>
    8000882e:	08200593          	li	a1,130
    80008832:	00026517          	auipc	a0,0x26
    80008836:	9ae50513          	addi	a0,a0,-1618 # 8002e1e0 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    8000883a:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000883e:	3ed220ef          	jal	8002b42a <printf>
    80008842:	0004f797          	auipc	a5,0x4f
    80008846:	7cf7c783          	lbu	a5,1999(a5) # 80058011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000884a:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000884c:	e399                	bnez	a5,80008852 <tinst_tests_pf+0x986>
    8000884e:	12c0106f          	j	8000997a <tinst_tests_pf+0x1aae>
    80008852:	6418                	ld	a4,8(s0)
    80008854:	47b5                	li	a5,13
    80008856:	00026597          	auipc	a1,0x26
    8000885a:	96258593          	addi	a1,a1,-1694 # 8002e1b8 <__func__.0+0x2d0>
    8000885e:	00f71463          	bne	a4,a5,80008866 <tinst_tests_pf+0x99a>
    80008862:	0ca0106f          	j	8000992c <tinst_tests_pf+0x1a60>
    80008866:	00026517          	auipc	a0,0x26
    8000886a:	99250513          	addi	a0,a0,-1646 # 8002e1f8 <__func__.0+0x310>
    8000886e:	3bd220ef          	jal	8002b42a <printf>
    80008872:	0004f797          	auipc	a5,0x4f
    80008876:	79f7c783          	lbu	a5,1951(a5) # 80058011 <excpt+0x1>
    8000887a:	c799                	beqz	a5,80008888 <tinst_tests_pf+0x9bc>
    8000887c:	6418                	ld	a4,8(s0)
    8000887e:	47b5                	li	a5,13
    80008880:	00f71463          	bne	a4,a5,80008888 <tinst_tests_pf+0x9bc>
    80008884:	4e60106f          	j	80009d6a <tinst_tests_pf+0x1e9e>
    80008888:	00026517          	auipc	a0,0x26
    8000888c:	97850513          	addi	a0,a0,-1672 # 8002e200 <__func__.0+0x318>
    80008890:	39b220ef          	jal	8002b42a <printf>
    80008894:	02900513          	li	a0,41
    80008898:	081210ef          	jal	8002a118 <putchar>
    8000889c:	4529                	li	a0,10
    8000889e:	07b210ef          	jal	8002a118 <putchar>
    800088a2:	00090e63          	beqz	s2,800088be <tinst_tests_pf+0x9f2>
    800088a6:	0004f797          	auipc	a5,0x4f
    800088aa:	76b7c783          	lbu	a5,1899(a5) # 80058011 <excpt+0x1>
    800088ae:	c799                	beqz	a5,800088bc <tinst_tests_pf+0x9f0>
    800088b0:	6418                	ld	a4,8(s0)
    800088b2:	47b5                	li	a5,13
    800088b4:	00f71463          	bne	a4,a5,800088bc <tinst_tests_pf+0x9f0>
    800088b8:	3b80206f          	j	8000ac70 <tinst_tests_pf+0x2da4>
    800088bc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800088be:	d4ef80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    800088c2:	40019737          	lui	a4,0x40019
    800088c6:	87a6                	mv	a5,s1
    800088c8:	070a                	slli	a4,a4,0x2
    800088ca:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800088ce:	00027617          	auipc	a2,0x27
    800088d2:	68260613          	addi	a2,a2,1666 # 8002ff50 <__func__.0+0x2068>
    800088d6:	08200593          	li	a1,130
    800088da:	00026517          	auipc	a0,0x26
    800088de:	90650513          	addi	a0,a0,-1786 # 8002e1e0 <__func__.0+0x2f8>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    800088e2:	0007849b          	sext.w	s1,a5
    800088e6:	345220ef          	jal	8002b42a <printf>
    800088ea:	0004f797          	auipc	a5,0x4f
    800088ee:	7277c783          	lbu	a5,1831(a5) # 80058011 <excpt+0x1>
    800088f2:	e399                	bnez	a5,800088f8 <tinst_tests_pf+0xa2c>
    800088f4:	0e00106f          	j	800099d4 <tinst_tests_pf+0x1b08>
    800088f8:	6418                	ld	a4,8(s0)
    800088fa:	47bd                	li	a5,15
    800088fc:	00026597          	auipc	a1,0x26
    80008900:	8bc58593          	addi	a1,a1,-1860 # 8002e1b8 <__func__.0+0x2d0>
    80008904:	00f71463          	bne	a4,a5,8000890c <tinst_tests_pf+0xa40>
    80008908:	07e0106f          	j	80009986 <tinst_tests_pf+0x1aba>
    8000890c:	00026517          	auipc	a0,0x26
    80008910:	8ec50513          	addi	a0,a0,-1812 # 8002e1f8 <__func__.0+0x310>
    80008914:	317220ef          	jal	8002b42a <printf>
    80008918:	0004f797          	auipc	a5,0x4f
    8000891c:	6f97c783          	lbu	a5,1785(a5) # 80058011 <excpt+0x1>
    80008920:	c799                	beqz	a5,8000892e <tinst_tests_pf+0xa62>
    80008922:	6418                	ld	a4,8(s0)
    80008924:	47bd                	li	a5,15
    80008926:	00f71463          	bne	a4,a5,8000892e <tinst_tests_pf+0xa62>
    8000892a:	4820106f          	j	80009dac <tinst_tests_pf+0x1ee0>
    8000892e:	00026517          	auipc	a0,0x26
    80008932:	8d250513          	addi	a0,a0,-1838 # 8002e200 <__func__.0+0x318>
    80008936:	2f5220ef          	jal	8002b42a <printf>
    8000893a:	02900513          	li	a0,41
    8000893e:	7da210ef          	jal	8002a118 <putchar>
    80008942:	4529                	li	a0,10
    80008944:	7d4210ef          	jal	8002a118 <putchar>
    80008948:	00090e63          	beqz	s2,80008964 <tinst_tests_pf+0xa98>
    8000894c:	0004f797          	auipc	a5,0x4f
    80008950:	6c57c783          	lbu	a5,1733(a5) # 80058011 <excpt+0x1>
    80008954:	c799                	beqz	a5,80008962 <tinst_tests_pf+0xa96>
    80008956:	6418                	ld	a4,8(s0)
    80008958:	47bd                	li	a5,15
    8000895a:	00f71463          	bne	a4,a5,80008962 <tinst_tests_pf+0xa96>
    8000895e:	3540206f          	j	8000acb2 <tinst_tests_pf+0x2de6>
    80008962:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008964:	ca8f80ef          	jal	80000e0c <test_setup_except_function>
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008968:	400197b7          	lui	a5,0x40019
    8000896c:	078a                	slli	a5,a5,0x2
    8000896e:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008972:	00027617          	auipc	a2,0x27
    80008976:	61e60613          	addi	a2,a2,1566 # 8002ff90 <__func__.0+0x20a8>
    8000897a:	08200593          	li	a1,130
    8000897e:	00026517          	auipc	a0,0x26
    80008982:	86250513          	addi	a0,a0,-1950 # 8002e1e0 <__func__.0+0x2f8>
    80008986:	2a5220ef          	jal	8002b42a <printf>
    8000898a:	0004f797          	auipc	a5,0x4f
    8000898e:	6877c783          	lbu	a5,1671(a5) # 80058011 <excpt+0x1>
    80008992:	e399                	bnez	a5,80008998 <tinst_tests_pf+0xacc>
    80008994:	09a0106f          	j	80009a2e <tinst_tests_pf+0x1b62>
    80008998:	6418                	ld	a4,8(s0)
    8000899a:	47bd                	li	a5,15
    8000899c:	00026597          	auipc	a1,0x26
    800089a0:	81c58593          	addi	a1,a1,-2020 # 8002e1b8 <__func__.0+0x2d0>
    800089a4:	00f71463          	bne	a4,a5,800089ac <tinst_tests_pf+0xae0>
    800089a8:	0380106f          	j	800099e0 <tinst_tests_pf+0x1b14>
    800089ac:	00026517          	auipc	a0,0x26
    800089b0:	84c50513          	addi	a0,a0,-1972 # 8002e1f8 <__func__.0+0x310>
    800089b4:	277220ef          	jal	8002b42a <printf>
    800089b8:	0004f797          	auipc	a5,0x4f
    800089bc:	6597c783          	lbu	a5,1625(a5) # 80058011 <excpt+0x1>
    800089c0:	c799                	beqz	a5,800089ce <tinst_tests_pf+0xb02>
    800089c2:	6418                	ld	a4,8(s0)
    800089c4:	47bd                	li	a5,15
    800089c6:	00f71463          	bne	a4,a5,800089ce <tinst_tests_pf+0xb02>
    800089ca:	4360106f          	j	80009e00 <tinst_tests_pf+0x1f34>
    800089ce:	00026517          	auipc	a0,0x26
    800089d2:	83250513          	addi	a0,a0,-1998 # 8002e200 <__func__.0+0x318>
    800089d6:	255220ef          	jal	8002b42a <printf>
    800089da:	02900513          	li	a0,41
    800089de:	73a210ef          	jal	8002a118 <putchar>
    800089e2:	4529                	li	a0,10
    800089e4:	734210ef          	jal	8002a118 <putchar>
    800089e8:	00090e63          	beqz	s2,80008a04 <tinst_tests_pf+0xb38>
    800089ec:	0004f797          	auipc	a5,0x4f
    800089f0:	6257c783          	lbu	a5,1573(a5) # 80058011 <excpt+0x1>
    800089f4:	c799                	beqz	a5,80008a02 <tinst_tests_pf+0xb36>
    800089f6:	6418                	ld	a4,8(s0)
    800089f8:	47bd                	li	a5,15
    800089fa:	00f71463          	bne	a4,a5,80008a02 <tinst_tests_pf+0xb36>
    800089fe:	2f60206f          	j	8000acf4 <tinst_tests_pf+0x2e28>
    80008a02:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a04:	c08f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008a08:	400197b7          	lui	a5,0x40019
    80008a0c:	078a                	slli	a5,a5,0x2
    80008a0e:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008a12:	00027617          	auipc	a2,0x27
    80008a16:	5be60613          	addi	a2,a2,1470 # 8002ffd0 <__func__.0+0x20e8>
    80008a1a:	08200593          	li	a1,130
    80008a1e:	00025517          	auipc	a0,0x25
    80008a22:	7c250513          	addi	a0,a0,1986 # 8002e1e0 <__func__.0+0x2f8>
    80008a26:	205220ef          	jal	8002b42a <printf>
    80008a2a:	0004f797          	auipc	a5,0x4f
    80008a2e:	5e77c783          	lbu	a5,1511(a5) # 80058011 <excpt+0x1>
    80008a32:	c399                	beqz	a5,80008a38 <tinst_tests_pf+0xb6c>
    80008a34:	08c0106f          	j	80009ac0 <tinst_tests_pf+0x1bf4>
    80008a38:	00025597          	auipc	a1,0x25
    80008a3c:	78058593          	addi	a1,a1,1920 # 8002e1b8 <__func__.0+0x2d0>
    80008a40:	00025517          	auipc	a0,0x25
    80008a44:	7b850513          	addi	a0,a0,1976 # 8002e1f8 <__func__.0+0x310>
    80008a48:	1e3220ef          	jal	8002b42a <printf>
    80008a4c:	0004f797          	auipc	a5,0x4f
    80008a50:	5c57c783          	lbu	a5,1477(a5) # 80058011 <excpt+0x1>
    80008a54:	c799                	beqz	a5,80008a62 <tinst_tests_pf+0xb96>
    80008a56:	6418                	ld	a4,8(s0)
    80008a58:	47bd                	li	a5,15
    80008a5a:	00f71463          	bne	a4,a5,80008a62 <tinst_tests_pf+0xb96>
    80008a5e:	5730106f          	j	8000a7d0 <tinst_tests_pf+0x2904>
    80008a62:	00025517          	auipc	a0,0x25
    80008a66:	79e50513          	addi	a0,a0,1950 # 8002e200 <__func__.0+0x318>
    80008a6a:	1c1220ef          	jal	8002b42a <printf>
    80008a6e:	02900513          	li	a0,41
    80008a72:	6a6210ef          	jal	8002a118 <putchar>
    80008a76:	4529                	li	a0,10
    80008a78:	6a0210ef          	jal	8002a118 <putchar>
    80008a7c:	00090e63          	beqz	s2,80008a98 <tinst_tests_pf+0xbcc>
    80008a80:	0004f797          	auipc	a5,0x4f
    80008a84:	5917c783          	lbu	a5,1425(a5) # 80058011 <excpt+0x1>
    80008a88:	c799                	beqz	a5,80008a96 <tinst_tests_pf+0xbca>
    80008a8a:	6418                	ld	a4,8(s0)
    80008a8c:	47bd                	li	a5,15
    80008a8e:	00f71463          	bne	a4,a5,80008a96 <tinst_tests_pf+0xbca>
    80008a92:	2a40206f          	j	8000ad36 <tinst_tests_pf+0x2e6a>
    80008a96:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a98:	b74f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008a9c:	400197b7          	lui	a5,0x40019
    80008aa0:	078a                	slli	a5,a5,0x2
    80008aa2:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008aa6:	00027617          	auipc	a2,0x27
    80008aaa:	56a60613          	addi	a2,a2,1386 # 80030010 <__func__.0+0x2128>
    80008aae:	08200593          	li	a1,130
    80008ab2:	00025517          	auipc	a0,0x25
    80008ab6:	72e50513          	addi	a0,a0,1838 # 8002e1e0 <__func__.0+0x2f8>
    80008aba:	171220ef          	jal	8002b42a <printf>
    80008abe:	0004f797          	auipc	a5,0x4f
    80008ac2:	5537c783          	lbu	a5,1363(a5) # 80058011 <excpt+0x1>
    80008ac6:	e399                	bnez	a5,80008acc <tinst_tests_pf+0xc00>
    80008ac8:	5020106f          	j	80009fca <tinst_tests_pf+0x20fe>
    80008acc:	6418                	ld	a4,8(s0)
    80008ace:	47bd                	li	a5,15
    80008ad0:	00025597          	auipc	a1,0x25
    80008ad4:	6e858593          	addi	a1,a1,1768 # 8002e1b8 <__func__.0+0x2d0>
    80008ad8:	00f71463          	bne	a4,a5,80008ae0 <tinst_tests_pf+0xc14>
    80008adc:	4a20106f          	j	80009f7e <tinst_tests_pf+0x20b2>
    80008ae0:	00025517          	auipc	a0,0x25
    80008ae4:	71850513          	addi	a0,a0,1816 # 8002e1f8 <__func__.0+0x310>
    80008ae8:	143220ef          	jal	8002b42a <printf>
    80008aec:	0004f797          	auipc	a5,0x4f
    80008af0:	5257c783          	lbu	a5,1317(a5) # 80058011 <excpt+0x1>
    80008af4:	c799                	beqz	a5,80008b02 <tinst_tests_pf+0xc36>
    80008af6:	6418                	ld	a4,8(s0)
    80008af8:	47bd                	li	a5,15
    80008afa:	00f71463          	bne	a4,a5,80008b02 <tinst_tests_pf+0xc36>
    80008afe:	5150106f          	j	8000a812 <tinst_tests_pf+0x2946>
    80008b02:	00025517          	auipc	a0,0x25
    80008b06:	6fe50513          	addi	a0,a0,1790 # 8002e200 <__func__.0+0x318>
    80008b0a:	121220ef          	jal	8002b42a <printf>
    80008b0e:	02900513          	li	a0,41
    80008b12:	606210ef          	jal	8002a118 <putchar>
    80008b16:	4529                	li	a0,10
    80008b18:	600210ef          	jal	8002a118 <putchar>
    80008b1c:	00090e63          	beqz	s2,80008b38 <tinst_tests_pf+0xc6c>
    80008b20:	0004f797          	auipc	a5,0x4f
    80008b24:	4f17c783          	lbu	a5,1265(a5) # 80058011 <excpt+0x1>
    80008b28:	c799                	beqz	a5,80008b36 <tinst_tests_pf+0xc6a>
    80008b2a:	6418                	ld	a4,8(s0)
    80008b2c:	47bd                	li	a5,15
    80008b2e:	00f71463          	bne	a4,a5,80008b36 <tinst_tests_pf+0xc6a>
    80008b32:	29e0206f          	j	8000add0 <tinst_tests_pf+0x2f04>
    80008b36:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b38:	ad4f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008b3c:	400197b7          	lui	a5,0x40019
    80008b40:	078a                	slli	a5,a5,0x2
    80008b42:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008b46:	00027617          	auipc	a2,0x27
    80008b4a:	50a60613          	addi	a2,a2,1290 # 80030050 <__func__.0+0x2168>
    80008b4e:	08200593          	li	a1,130
    80008b52:	00025517          	auipc	a0,0x25
    80008b56:	68e50513          	addi	a0,a0,1678 # 8002e1e0 <__func__.0+0x2f8>
    80008b5a:	0d1220ef          	jal	8002b42a <printf>
    80008b5e:	0004f797          	auipc	a5,0x4f
    80008b62:	4b37c783          	lbu	a5,1203(a5) # 80058011 <excpt+0x1>
    80008b66:	e399                	bnez	a5,80008b6c <tinst_tests_pf+0xca0>
    80008b68:	4f40106f          	j	8000a05c <tinst_tests_pf+0x2190>
    80008b6c:	6418                	ld	a4,8(s0)
    80008b6e:	47bd                	li	a5,15
    80008b70:	00025597          	auipc	a1,0x25
    80008b74:	64858593          	addi	a1,a1,1608 # 8002e1b8 <__func__.0+0x2d0>
    80008b78:	00f71463          	bne	a4,a5,80008b80 <tinst_tests_pf+0xcb4>
    80008b7c:	4940106f          	j	8000a010 <tinst_tests_pf+0x2144>
    80008b80:	00025517          	auipc	a0,0x25
    80008b84:	67850513          	addi	a0,a0,1656 # 8002e1f8 <__func__.0+0x310>
    80008b88:	0a3220ef          	jal	8002b42a <printf>
    80008b8c:	0004f797          	auipc	a5,0x4f
    80008b90:	4857c783          	lbu	a5,1157(a5) # 80058011 <excpt+0x1>
    80008b94:	c799                	beqz	a5,80008ba2 <tinst_tests_pf+0xcd6>
    80008b96:	6418                	ld	a4,8(s0)
    80008b98:	47bd                	li	a5,15
    80008b9a:	00f71463          	bne	a4,a5,80008ba2 <tinst_tests_pf+0xcd6>
    80008b9e:	4b70106f          	j	8000a854 <tinst_tests_pf+0x2988>
    80008ba2:	00025517          	auipc	a0,0x25
    80008ba6:	65e50513          	addi	a0,a0,1630 # 8002e200 <__func__.0+0x318>
    80008baa:	081220ef          	jal	8002b42a <printf>
    80008bae:	02900513          	li	a0,41
    80008bb2:	566210ef          	jal	8002a118 <putchar>
    80008bb6:	4529                	li	a0,10
    80008bb8:	560210ef          	jal	8002a118 <putchar>
    80008bbc:	00090e63          	beqz	s2,80008bd8 <tinst_tests_pf+0xd0c>
    80008bc0:	0004f797          	auipc	a5,0x4f
    80008bc4:	4517c783          	lbu	a5,1105(a5) # 80058011 <excpt+0x1>
    80008bc8:	c799                	beqz	a5,80008bd6 <tinst_tests_pf+0xd0a>
    80008bca:	6418                	ld	a4,8(s0)
    80008bcc:	47bd                	li	a5,15
    80008bce:	00f71463          	bne	a4,a5,80008bd6 <tinst_tests_pf+0xd0a>
    80008bd2:	2700206f          	j	8000ae42 <tinst_tests_pf+0x2f76>
    80008bd6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008bd8:	a34f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008bdc:	400197b7          	lui	a5,0x40019
    80008be0:	078a                	slli	a5,a5,0x2
    80008be2:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008be6:	00027617          	auipc	a2,0x27
    80008bea:	4aa60613          	addi	a2,a2,1194 # 80030090 <__func__.0+0x21a8>
    80008bee:	08200593          	li	a1,130
    80008bf2:	00025517          	auipc	a0,0x25
    80008bf6:	5ee50513          	addi	a0,a0,1518 # 8002e1e0 <__func__.0+0x2f8>
    80008bfa:	031220ef          	jal	8002b42a <printf>
    80008bfe:	0004f797          	auipc	a5,0x4f
    80008c02:	4137c783          	lbu	a5,1043(a5) # 80058011 <excpt+0x1>
    80008c06:	e399                	bnez	a5,80008c0c <tinst_tests_pf+0xd40>
    80008c08:	4ea0106f          	j	8000a0f2 <tinst_tests_pf+0x2226>
    80008c0c:	6418                	ld	a4,8(s0)
    80008c0e:	47bd                	li	a5,15
    80008c10:	00025597          	auipc	a1,0x25
    80008c14:	5a858593          	addi	a1,a1,1448 # 8002e1b8 <__func__.0+0x2d0>
    80008c18:	00f71463          	bne	a4,a5,80008c20 <tinst_tests_pf+0xd54>
    80008c1c:	4880106f          	j	8000a0a4 <tinst_tests_pf+0x21d8>
    80008c20:	00025517          	auipc	a0,0x25
    80008c24:	5d850513          	addi	a0,a0,1496 # 8002e1f8 <__func__.0+0x310>
    80008c28:	003220ef          	jal	8002b42a <printf>
    80008c2c:	0004f797          	auipc	a5,0x4f
    80008c30:	3e57c783          	lbu	a5,997(a5) # 80058011 <excpt+0x1>
    80008c34:	c799                	beqz	a5,80008c42 <tinst_tests_pf+0xd76>
    80008c36:	6418                	ld	a4,8(s0)
    80008c38:	47bd                	li	a5,15
    80008c3a:	00f71463          	bne	a4,a5,80008c42 <tinst_tests_pf+0xd76>
    80008c3e:	4590106f          	j	8000a896 <tinst_tests_pf+0x29ca>
    80008c42:	00025517          	auipc	a0,0x25
    80008c46:	5be50513          	addi	a0,a0,1470 # 8002e200 <__func__.0+0x318>
    80008c4a:	7e0220ef          	jal	8002b42a <printf>
    80008c4e:	02900513          	li	a0,41
    80008c52:	4c6210ef          	jal	8002a118 <putchar>
    80008c56:	4529                	li	a0,10
    80008c58:	4c0210ef          	jal	8002a118 <putchar>
    80008c5c:	00090e63          	beqz	s2,80008c78 <tinst_tests_pf+0xdac>
    80008c60:	0004f797          	auipc	a5,0x4f
    80008c64:	3b17c783          	lbu	a5,945(a5) # 80058011 <excpt+0x1>
    80008c68:	c799                	beqz	a5,80008c76 <tinst_tests_pf+0xdaa>
    80008c6a:	6418                	ld	a4,8(s0)
    80008c6c:	47bd                	li	a5,15
    80008c6e:	00f71463          	bne	a4,a5,80008c76 <tinst_tests_pf+0xdaa>
    80008c72:	2420206f          	j	8000aeb4 <tinst_tests_pf+0x2fe8>
    80008c76:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c78:	994f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008c7c:	400197b7          	lui	a5,0x40019
    80008c80:	078a                	slli	a5,a5,0x2
    80008c82:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008c86:	00027617          	auipc	a2,0x27
    80008c8a:	44a60613          	addi	a2,a2,1098 # 800300d0 <__func__.0+0x21e8>
    80008c8e:	08200593          	li	a1,130
    80008c92:	00025517          	auipc	a0,0x25
    80008c96:	54e50513          	addi	a0,a0,1358 # 8002e1e0 <__func__.0+0x2f8>
    80008c9a:	790220ef          	jal	8002b42a <printf>
    80008c9e:	0004f797          	auipc	a5,0x4f
    80008ca2:	3737c783          	lbu	a5,883(a5) # 80058011 <excpt+0x1>
    80008ca6:	e399                	bnez	a5,80008cac <tinst_tests_pf+0xde0>
    80008ca8:	4e00106f          	j	8000a188 <tinst_tests_pf+0x22bc>
    80008cac:	6418                	ld	a4,8(s0)
    80008cae:	47bd                	li	a5,15
    80008cb0:	00025597          	auipc	a1,0x25
    80008cb4:	50858593          	addi	a1,a1,1288 # 8002e1b8 <__func__.0+0x2d0>
    80008cb8:	00f71463          	bne	a4,a5,80008cc0 <tinst_tests_pf+0xdf4>
    80008cbc:	47e0106f          	j	8000a13a <tinst_tests_pf+0x226e>
    80008cc0:	00025517          	auipc	a0,0x25
    80008cc4:	53850513          	addi	a0,a0,1336 # 8002e1f8 <__func__.0+0x310>
    80008cc8:	762220ef          	jal	8002b42a <printf>
    80008ccc:	0004f797          	auipc	a5,0x4f
    80008cd0:	3457c783          	lbu	a5,837(a5) # 80058011 <excpt+0x1>
    80008cd4:	c799                	beqz	a5,80008ce2 <tinst_tests_pf+0xe16>
    80008cd6:	6418                	ld	a4,8(s0)
    80008cd8:	47bd                	li	a5,15
    80008cda:	00f71463          	bne	a4,a5,80008ce2 <tinst_tests_pf+0xe16>
    80008cde:	3fb0106f          	j	8000a8d8 <tinst_tests_pf+0x2a0c>
    80008ce2:	00025517          	auipc	a0,0x25
    80008ce6:	51e50513          	addi	a0,a0,1310 # 8002e200 <__func__.0+0x318>
    80008cea:	740220ef          	jal	8002b42a <printf>
    80008cee:	02900513          	li	a0,41
    80008cf2:	426210ef          	jal	8002a118 <putchar>
    80008cf6:	4529                	li	a0,10
    80008cf8:	420210ef          	jal	8002a118 <putchar>
    80008cfc:	00090e63          	beqz	s2,80008d18 <tinst_tests_pf+0xe4c>
    80008d00:	0004f797          	auipc	a5,0x4f
    80008d04:	3117c783          	lbu	a5,785(a5) # 80058011 <excpt+0x1>
    80008d08:	c799                	beqz	a5,80008d16 <tinst_tests_pf+0xe4a>
    80008d0a:	6418                	ld	a4,8(s0)
    80008d0c:	47bd                	li	a5,15
    80008d0e:	00f71463          	bne	a4,a5,80008d16 <tinst_tests_pf+0xe4a>
    80008d12:	1e40206f          	j	8000aef6 <tinst_tests_pf+0x302a>
    80008d16:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d18:	8f4f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008d1c:	400197b7          	lui	a5,0x40019
    80008d20:	078a                	slli	a5,a5,0x2
    80008d22:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008d26:	00027617          	auipc	a2,0x27
    80008d2a:	3ea60613          	addi	a2,a2,1002 # 80030110 <__func__.0+0x2228>
    80008d2e:	08200593          	li	a1,130
    80008d32:	00025517          	auipc	a0,0x25
    80008d36:	4ae50513          	addi	a0,a0,1198 # 8002e1e0 <__func__.0+0x2f8>
    80008d3a:	6f0220ef          	jal	8002b42a <printf>
    80008d3e:	0004f797          	auipc	a5,0x4f
    80008d42:	2d37c783          	lbu	a5,723(a5) # 80058011 <excpt+0x1>
    80008d46:	e399                	bnez	a5,80008d4c <tinst_tests_pf+0xe80>
    80008d48:	4d60106f          	j	8000a21e <tinst_tests_pf+0x2352>
    80008d4c:	6418                	ld	a4,8(s0)
    80008d4e:	47bd                	li	a5,15
    80008d50:	00025597          	auipc	a1,0x25
    80008d54:	46858593          	addi	a1,a1,1128 # 8002e1b8 <__func__.0+0x2d0>
    80008d58:	00f71463          	bne	a4,a5,80008d60 <tinst_tests_pf+0xe94>
    80008d5c:	4740106f          	j	8000a1d0 <tinst_tests_pf+0x2304>
    80008d60:	00025517          	auipc	a0,0x25
    80008d64:	49850513          	addi	a0,a0,1176 # 8002e1f8 <__func__.0+0x310>
    80008d68:	6c2220ef          	jal	8002b42a <printf>
    80008d6c:	0004f797          	auipc	a5,0x4f
    80008d70:	2a57c783          	lbu	a5,677(a5) # 80058011 <excpt+0x1>
    80008d74:	c799                	beqz	a5,80008d82 <tinst_tests_pf+0xeb6>
    80008d76:	6418                	ld	a4,8(s0)
    80008d78:	47bd                	li	a5,15
    80008d7a:	00f71463          	bne	a4,a5,80008d82 <tinst_tests_pf+0xeb6>
    80008d7e:	39d0106f          	j	8000a91a <tinst_tests_pf+0x2a4e>
    80008d82:	00025517          	auipc	a0,0x25
    80008d86:	47e50513          	addi	a0,a0,1150 # 8002e200 <__func__.0+0x318>
    80008d8a:	6a0220ef          	jal	8002b42a <printf>
    80008d8e:	02900513          	li	a0,41
    80008d92:	386210ef          	jal	8002a118 <putchar>
    80008d96:	4529                	li	a0,10
    80008d98:	380210ef          	jal	8002a118 <putchar>
    80008d9c:	00090e63          	beqz	s2,80008db8 <tinst_tests_pf+0xeec>
    80008da0:	0004f797          	auipc	a5,0x4f
    80008da4:	2717c783          	lbu	a5,625(a5) # 80058011 <excpt+0x1>
    80008da8:	c799                	beqz	a5,80008db6 <tinst_tests_pf+0xeea>
    80008daa:	6418                	ld	a4,8(s0)
    80008dac:	47bd                	li	a5,15
    80008dae:	00f71463          	bne	a4,a5,80008db6 <tinst_tests_pf+0xeea>
    80008db2:	1860206f          	j	8000af38 <tinst_tests_pf+0x306c>
    80008db6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008db8:	854f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    80008dbc:	400197b7          	lui	a5,0x40019
    80008dc0:	078a                	slli	a5,a5,0x2
    80008dc2:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008dc6:	00027617          	auipc	a2,0x27
    80008dca:	38a60613          	addi	a2,a2,906 # 80030150 <__func__.0+0x2268>
    80008dce:	08200593          	li	a1,130
    80008dd2:	00025517          	auipc	a0,0x25
    80008dd6:	40e50513          	addi	a0,a0,1038 # 8002e1e0 <__func__.0+0x2f8>
    80008dda:	650220ef          	jal	8002b42a <printf>
    80008dde:	0004f797          	auipc	a5,0x4f
    80008de2:	2337c783          	lbu	a5,563(a5) # 80058011 <excpt+0x1>
    80008de6:	e399                	bnez	a5,80008dec <tinst_tests_pf+0xf20>
    80008de8:	4d20106f          	j	8000a2ba <tinst_tests_pf+0x23ee>
    80008dec:	6418                	ld	a4,8(s0)
    80008dee:	47bd                	li	a5,15
    80008df0:	00025597          	auipc	a1,0x25
    80008df4:	3c858593          	addi	a1,a1,968 # 8002e1b8 <__func__.0+0x2d0>
    80008df8:	00f71463          	bne	a4,a5,80008e00 <tinst_tests_pf+0xf34>
    80008dfc:	4700106f          	j	8000a26c <tinst_tests_pf+0x23a0>
    80008e00:	00025517          	auipc	a0,0x25
    80008e04:	3f850513          	addi	a0,a0,1016 # 8002e1f8 <__func__.0+0x310>
    80008e08:	622220ef          	jal	8002b42a <printf>
    80008e0c:	0004f797          	auipc	a5,0x4f
    80008e10:	2057c783          	lbu	a5,517(a5) # 80058011 <excpt+0x1>
    80008e14:	c799                	beqz	a5,80008e22 <tinst_tests_pf+0xf56>
    80008e16:	6418                	ld	a4,8(s0)
    80008e18:	47bd                	li	a5,15
    80008e1a:	00f71463          	bne	a4,a5,80008e22 <tinst_tests_pf+0xf56>
    80008e1e:	33f0106f          	j	8000a95c <tinst_tests_pf+0x2a90>
    80008e22:	00025517          	auipc	a0,0x25
    80008e26:	3de50513          	addi	a0,a0,990 # 8002e200 <__func__.0+0x318>
    80008e2a:	600220ef          	jal	8002b42a <printf>
    80008e2e:	02900513          	li	a0,41
    80008e32:	2e6210ef          	jal	8002a118 <putchar>
    80008e36:	4529                	li	a0,10
    80008e38:	2e0210ef          	jal	8002a118 <putchar>
    80008e3c:	00090e63          	beqz	s2,80008e58 <tinst_tests_pf+0xf8c>
    80008e40:	0004f797          	auipc	a5,0x4f
    80008e44:	1d17c783          	lbu	a5,465(a5) # 80058011 <excpt+0x1>
    80008e48:	c799                	beqz	a5,80008e56 <tinst_tests_pf+0xf8a>
    80008e4a:	6418                	ld	a4,8(s0)
    80008e4c:	47bd                	li	a5,15
    80008e4e:	00f71463          	bne	a4,a5,80008e56 <tinst_tests_pf+0xf8a>
    80008e52:	12a0206f          	j	8000af7c <tinst_tests_pf+0x30b0>
    80008e56:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e58:	fb5f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008e5c:	400197b7          	lui	a5,0x40019
    80008e60:	078a                	slli	a5,a5,0x2
    80008e62:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008e66:	00027617          	auipc	a2,0x27
    80008e6a:	32a60613          	addi	a2,a2,810 # 80030190 <__func__.0+0x22a8>
    80008e6e:	08200593          	li	a1,130
    80008e72:	00025517          	auipc	a0,0x25
    80008e76:	36e50513          	addi	a0,a0,878 # 8002e1e0 <__func__.0+0x2f8>
    80008e7a:	5b0220ef          	jal	8002b42a <printf>
    80008e7e:	0004f797          	auipc	a5,0x4f
    80008e82:	1937c783          	lbu	a5,403(a5) # 80058011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80008e86:	1482                	slli	s1,s1,0x20
    80008e88:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008e8a:	e399                	bnez	a5,80008e90 <tinst_tests_pf+0xfc4>
    80008e8c:	4ca0106f          	j	8000a356 <tinst_tests_pf+0x248a>
    80008e90:	6418                	ld	a4,8(s0)
    80008e92:	47bd                	li	a5,15
    80008e94:	00025597          	auipc	a1,0x25
    80008e98:	32458593          	addi	a1,a1,804 # 8002e1b8 <__func__.0+0x2d0>
    80008e9c:	00f71463          	bne	a4,a5,80008ea4 <tinst_tests_pf+0xfd8>
    80008ea0:	4680106f          	j	8000a308 <tinst_tests_pf+0x243c>
    80008ea4:	00025517          	auipc	a0,0x25
    80008ea8:	35450513          	addi	a0,a0,852 # 8002e1f8 <__func__.0+0x310>
    80008eac:	57e220ef          	jal	8002b42a <printf>
    80008eb0:	0004f797          	auipc	a5,0x4f
    80008eb4:	1617c783          	lbu	a5,353(a5) # 80058011 <excpt+0x1>
    80008eb8:	c799                	beqz	a5,80008ec6 <tinst_tests_pf+0xffa>
    80008eba:	6418                	ld	a4,8(s0)
    80008ebc:	47bd                	li	a5,15
    80008ebe:	00f71463          	bne	a4,a5,80008ec6 <tinst_tests_pf+0xffa>
    80008ec2:	2dd0106f          	j	8000a99e <tinst_tests_pf+0x2ad2>
    80008ec6:	00025517          	auipc	a0,0x25
    80008eca:	33a50513          	addi	a0,a0,826 # 8002e200 <__func__.0+0x318>
    80008ece:	55c220ef          	jal	8002b42a <printf>
    80008ed2:	02900513          	li	a0,41
    80008ed6:	242210ef          	jal	8002a118 <putchar>
    80008eda:	4529                	li	a0,10
    80008edc:	23c210ef          	jal	8002a118 <putchar>
    80008ee0:	00090e63          	beqz	s2,80008efc <tinst_tests_pf+0x1030>
    80008ee4:	0004f797          	auipc	a5,0x4f
    80008ee8:	12d7c783          	lbu	a5,301(a5) # 80058011 <excpt+0x1>
    80008eec:	c799                	beqz	a5,80008efa <tinst_tests_pf+0x102e>
    80008eee:	6418                	ld	a4,8(s0)
    80008ef0:	47bd                	li	a5,15
    80008ef2:	00f71463          	bne	a4,a5,80008efa <tinst_tests_pf+0x102e>
    80008ef6:	0ca0206f          	j	8000afc0 <tinst_tests_pf+0x30f4>
    80008efa:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008efc:	f11f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80008f00:	400197b7          	lui	a5,0x40019
    80008f04:	078a                	slli	a5,a5,0x2
    80008f06:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008f0a:	00027617          	auipc	a2,0x27
    80008f0e:	2c660613          	addi	a2,a2,710 # 800301d0 <__func__.0+0x22e8>
    80008f12:	08200593          	li	a1,130
    80008f16:	00025517          	auipc	a0,0x25
    80008f1a:	2ca50513          	addi	a0,a0,714 # 8002e1e0 <__func__.0+0x2f8>
    80008f1e:	50c220ef          	jal	8002b42a <printf>
    80008f22:	0004f797          	auipc	a5,0x4f
    80008f26:	0ef7c783          	lbu	a5,239(a5) # 80058011 <excpt+0x1>
    80008f2a:	e399                	bnez	a5,80008f30 <tinst_tests_pf+0x1064>
    80008f2c:	4c60106f          	j	8000a3f2 <tinst_tests_pf+0x2526>
    80008f30:	6418                	ld	a4,8(s0)
    80008f32:	47bd                	li	a5,15
    80008f34:	00025597          	auipc	a1,0x25
    80008f38:	28458593          	addi	a1,a1,644 # 8002e1b8 <__func__.0+0x2d0>
    80008f3c:	00f71463          	bne	a4,a5,80008f44 <tinst_tests_pf+0x1078>
    80008f40:	4640106f          	j	8000a3a4 <tinst_tests_pf+0x24d8>
    80008f44:	00025517          	auipc	a0,0x25
    80008f48:	2b450513          	addi	a0,a0,692 # 8002e1f8 <__func__.0+0x310>
    80008f4c:	4de220ef          	jal	8002b42a <printf>
    80008f50:	0004f797          	auipc	a5,0x4f
    80008f54:	0c17c783          	lbu	a5,193(a5) # 80058011 <excpt+0x1>
    80008f58:	c799                	beqz	a5,80008f66 <tinst_tests_pf+0x109a>
    80008f5a:	6418                	ld	a4,8(s0)
    80008f5c:	47bd                	li	a5,15
    80008f5e:	00f71463          	bne	a4,a5,80008f66 <tinst_tests_pf+0x109a>
    80008f62:	27f0106f          	j	8000a9e0 <tinst_tests_pf+0x2b14>
    80008f66:	00025517          	auipc	a0,0x25
    80008f6a:	29a50513          	addi	a0,a0,666 # 8002e200 <__func__.0+0x318>
    80008f6e:	4bc220ef          	jal	8002b42a <printf>
    80008f72:	02900513          	li	a0,41
    80008f76:	1a2210ef          	jal	8002a118 <putchar>
    80008f7a:	4529                	li	a0,10
    80008f7c:	19c210ef          	jal	8002a118 <putchar>
    80008f80:	00090e63          	beqz	s2,80008f9c <tinst_tests_pf+0x10d0>
    80008f84:	0004f797          	auipc	a5,0x4f
    80008f88:	08d7c783          	lbu	a5,141(a5) # 80058011 <excpt+0x1>
    80008f8c:	c799                	beqz	a5,80008f9a <tinst_tests_pf+0x10ce>
    80008f8e:	6418                	ld	a4,8(s0)
    80008f90:	47bd                	li	a5,15
    80008f92:	00f71463          	bne	a4,a5,80008f9a <tinst_tests_pf+0x10ce>
    80008f96:	06e0206f          	j	8000b004 <tinst_tests_pf+0x3138>
    80008f9a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f9c:	e71f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80008fa0:	400197b7          	lui	a5,0x40019
    80008fa4:	078a                	slli	a5,a5,0x2
    80008fa6:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80008faa:	00027617          	auipc	a2,0x27
    80008fae:	26660613          	addi	a2,a2,614 # 80030210 <__func__.0+0x2328>
    80008fb2:	08200593          	li	a1,130
    80008fb6:	00025517          	auipc	a0,0x25
    80008fba:	22a50513          	addi	a0,a0,554 # 8002e1e0 <__func__.0+0x2f8>
    80008fbe:	46c220ef          	jal	8002b42a <printf>
    80008fc2:	0004f797          	auipc	a5,0x4f
    80008fc6:	04f7c783          	lbu	a5,79(a5) # 80058011 <excpt+0x1>
    80008fca:	e399                	bnez	a5,80008fd0 <tinst_tests_pf+0x1104>
    80008fcc:	4c20106f          	j	8000a48e <tinst_tests_pf+0x25c2>
    80008fd0:	6418                	ld	a4,8(s0)
    80008fd2:	47bd                	li	a5,15
    80008fd4:	00025597          	auipc	a1,0x25
    80008fd8:	1e458593          	addi	a1,a1,484 # 8002e1b8 <__func__.0+0x2d0>
    80008fdc:	00f71463          	bne	a4,a5,80008fe4 <tinst_tests_pf+0x1118>
    80008fe0:	4600106f          	j	8000a440 <tinst_tests_pf+0x2574>
    80008fe4:	00025517          	auipc	a0,0x25
    80008fe8:	21450513          	addi	a0,a0,532 # 8002e1f8 <__func__.0+0x310>
    80008fec:	43e220ef          	jal	8002b42a <printf>
    80008ff0:	0004f797          	auipc	a5,0x4f
    80008ff4:	0217c783          	lbu	a5,33(a5) # 80058011 <excpt+0x1>
    80008ff8:	c799                	beqz	a5,80009006 <tinst_tests_pf+0x113a>
    80008ffa:	6418                	ld	a4,8(s0)
    80008ffc:	47bd                	li	a5,15
    80008ffe:	00f71463          	bne	a4,a5,80009006 <tinst_tests_pf+0x113a>
    80009002:	2210106f          	j	8000aa22 <tinst_tests_pf+0x2b56>
    80009006:	00025517          	auipc	a0,0x25
    8000900a:	1fa50513          	addi	a0,a0,506 # 8002e200 <__func__.0+0x318>
    8000900e:	41c220ef          	jal	8002b42a <printf>
    80009012:	02900513          	li	a0,41
    80009016:	102210ef          	jal	8002a118 <putchar>
    8000901a:	4529                	li	a0,10
    8000901c:	0fc210ef          	jal	8002a118 <putchar>
    80009020:	00090e63          	beqz	s2,8000903c <tinst_tests_pf+0x1170>
    80009024:	0004f797          	auipc	a5,0x4f
    80009028:	fed7c783          	lbu	a5,-19(a5) # 80058011 <excpt+0x1>
    8000902c:	c799                	beqz	a5,8000903a <tinst_tests_pf+0x116e>
    8000902e:	6418                	ld	a4,8(s0)
    80009030:	47bd                	li	a5,15
    80009032:	00f71463          	bne	a4,a5,8000903a <tinst_tests_pf+0x116e>
    80009036:	0120206f          	j	8000b048 <tinst_tests_pf+0x317c>
    8000903a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000903c:	dd1f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80009040:	400197b7          	lui	a5,0x40019
    80009044:	078a                	slli	a5,a5,0x2
    80009046:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000904a:	00027617          	auipc	a2,0x27
    8000904e:	20660613          	addi	a2,a2,518 # 80030250 <__func__.0+0x2368>
    80009052:	08200593          	li	a1,130
    80009056:	00025517          	auipc	a0,0x25
    8000905a:	18a50513          	addi	a0,a0,394 # 8002e1e0 <__func__.0+0x2f8>
    8000905e:	3cc220ef          	jal	8002b42a <printf>
    80009062:	0004f797          	auipc	a5,0x4f
    80009066:	faf7c783          	lbu	a5,-81(a5) # 80058011 <excpt+0x1>
    8000906a:	e399                	bnez	a5,80009070 <tinst_tests_pf+0x11a4>
    8000906c:	4a80106f          	j	8000a514 <tinst_tests_pf+0x2648>
    80009070:	6418                	ld	a4,8(s0)
    80009072:	47bd                	li	a5,15
    80009074:	00025597          	auipc	a1,0x25
    80009078:	14458593          	addi	a1,a1,324 # 8002e1b8 <__func__.0+0x2d0>
    8000907c:	00f71463          	bne	a4,a5,80009084 <tinst_tests_pf+0x11b8>
    80009080:	4460106f          	j	8000a4c6 <tinst_tests_pf+0x25fa>
    80009084:	00025517          	auipc	a0,0x25
    80009088:	17450513          	addi	a0,a0,372 # 8002e1f8 <__func__.0+0x310>
    8000908c:	39e220ef          	jal	8002b42a <printf>
    80009090:	0004f797          	auipc	a5,0x4f
    80009094:	f817c783          	lbu	a5,-127(a5) # 80058011 <excpt+0x1>
    80009098:	c799                	beqz	a5,800090a6 <tinst_tests_pf+0x11da>
    8000909a:	6418                	ld	a4,8(s0)
    8000909c:	47bd                	li	a5,15
    8000909e:	00f71463          	bne	a4,a5,800090a6 <tinst_tests_pf+0x11da>
    800090a2:	1c30106f          	j	8000aa64 <tinst_tests_pf+0x2b98>
    800090a6:	00025517          	auipc	a0,0x25
    800090aa:	15a50513          	addi	a0,a0,346 # 8002e200 <__func__.0+0x318>
    800090ae:	37c220ef          	jal	8002b42a <printf>
    800090b2:	02900513          	li	a0,41
    800090b6:	062210ef          	jal	8002a118 <putchar>
    800090ba:	4529                	li	a0,10
    800090bc:	05c210ef          	jal	8002a118 <putchar>
    800090c0:	00090e63          	beqz	s2,800090dc <tinst_tests_pf+0x1210>
    800090c4:	0004f797          	auipc	a5,0x4f
    800090c8:	f4d7c783          	lbu	a5,-179(a5) # 80058011 <excpt+0x1>
    800090cc:	c799                	beqz	a5,800090da <tinst_tests_pf+0x120e>
    800090ce:	6418                	ld	a4,8(s0)
    800090d0:	47bd                	li	a5,15
    800090d2:	00f71463          	bne	a4,a5,800090da <tinst_tests_pf+0x120e>
    800090d6:	7b70106f          	j	8000b08c <tinst_tests_pf+0x31c0>
    800090da:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090dc:	d31f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    800090e0:	400197b7          	lui	a5,0x40019
    800090e4:	078a                	slli	a5,a5,0x2
    800090e6:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    800090ea:	00027617          	auipc	a2,0x27
    800090ee:	1a660613          	addi	a2,a2,422 # 80030290 <__func__.0+0x23a8>
    800090f2:	08200593          	li	a1,130
    800090f6:	00025517          	auipc	a0,0x25
    800090fa:	0ea50513          	addi	a0,a0,234 # 8002e1e0 <__func__.0+0x2f8>
    800090fe:	32c220ef          	jal	8002b42a <printf>
    80009102:	0004f797          	auipc	a5,0x4f
    80009106:	f0f7c783          	lbu	a5,-241(a5) # 80058011 <excpt+0x1>
    8000910a:	e399                	bnez	a5,80009110 <tinst_tests_pf+0x1244>
    8000910c:	4920106f          	j	8000a59e <tinst_tests_pf+0x26d2>
    80009110:	6418                	ld	a4,8(s0)
    80009112:	47bd                	li	a5,15
    80009114:	00025597          	auipc	a1,0x25
    80009118:	0a458593          	addi	a1,a1,164 # 8002e1b8 <__func__.0+0x2d0>
    8000911c:	00f71463          	bne	a4,a5,80009124 <tinst_tests_pf+0x1258>
    80009120:	4300106f          	j	8000a550 <tinst_tests_pf+0x2684>
    80009124:	00025517          	auipc	a0,0x25
    80009128:	0d450513          	addi	a0,a0,212 # 8002e1f8 <__func__.0+0x310>
    8000912c:	2fe220ef          	jal	8002b42a <printf>
    80009130:	0004f797          	auipc	a5,0x4f
    80009134:	ee17c783          	lbu	a5,-287(a5) # 80058011 <excpt+0x1>
    80009138:	c799                	beqz	a5,80009146 <tinst_tests_pf+0x127a>
    8000913a:	6418                	ld	a4,8(s0)
    8000913c:	47bd                	li	a5,15
    8000913e:	00f71463          	bne	a4,a5,80009146 <tinst_tests_pf+0x127a>
    80009142:	7d30106f          	j	8000b114 <tinst_tests_pf+0x3248>
    80009146:	00025517          	auipc	a0,0x25
    8000914a:	0ba50513          	addi	a0,a0,186 # 8002e200 <__func__.0+0x318>
    8000914e:	2dc220ef          	jal	8002b42a <printf>
    80009152:	02900513          	li	a0,41
    80009156:	7c3200ef          	jal	8002a118 <putchar>
    8000915a:	4529                	li	a0,10
    8000915c:	7bd200ef          	jal	8002a118 <putchar>
    80009160:	00090e63          	beqz	s2,8000917c <tinst_tests_pf+0x12b0>
    80009164:	0004f797          	auipc	a5,0x4f
    80009168:	ead7c783          	lbu	a5,-339(a5) # 80058011 <excpt+0x1>
    8000916c:	c799                	beqz	a5,8000917a <tinst_tests_pf+0x12ae>
    8000916e:	6418                	ld	a4,8(s0)
    80009170:	47bd                	li	a5,15
    80009172:	00f71463          	bne	a4,a5,8000917a <tinst_tests_pf+0x12ae>
    80009176:	75b0106f          	j	8000b0d0 <tinst_tests_pf+0x3204>
    8000917a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000917c:	c91f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80009180:	400197b7          	lui	a5,0x40019
    80009184:	078a                	slli	a5,a5,0x2
    80009186:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000918a:	00027617          	auipc	a2,0x27
    8000918e:	14660613          	addi	a2,a2,326 # 800302d0 <__func__.0+0x23e8>
    80009192:	08200593          	li	a1,130
    80009196:	00025517          	auipc	a0,0x25
    8000919a:	04a50513          	addi	a0,a0,74 # 8002e1e0 <__func__.0+0x2f8>
    8000919e:	28c220ef          	jal	8002b42a <printf>
    800091a2:	0004f797          	auipc	a5,0x4f
    800091a6:	e6f7c783          	lbu	a5,-401(a5) # 80058011 <excpt+0x1>
    800091aa:	e399                	bnez	a5,800091b0 <tinst_tests_pf+0x12e4>
    800091ac:	4800106f          	j	8000a62c <tinst_tests_pf+0x2760>
    800091b0:	6418                	ld	a4,8(s0)
    800091b2:	47bd                	li	a5,15
    800091b4:	00025597          	auipc	a1,0x25
    800091b8:	00458593          	addi	a1,a1,4 # 8002e1b8 <__func__.0+0x2d0>
    800091bc:	00f71463          	bne	a4,a5,800091c4 <tinst_tests_pf+0x12f8>
    800091c0:	41e0106f          	j	8000a5de <tinst_tests_pf+0x2712>
    800091c4:	00025517          	auipc	a0,0x25
    800091c8:	03450513          	addi	a0,a0,52 # 8002e1f8 <__func__.0+0x310>
    800091cc:	25e220ef          	jal	8002b42a <printf>
    800091d0:	0004f797          	auipc	a5,0x4f
    800091d4:	e417c783          	lbu	a5,-447(a5) # 80058011 <excpt+0x1>
    800091d8:	c799                	beqz	a5,800091e6 <tinst_tests_pf+0x131a>
    800091da:	6418                	ld	a4,8(s0)
    800091dc:	47bd                	li	a5,15
    800091de:	00f71463          	bne	a4,a5,800091e6 <tinst_tests_pf+0x131a>
    800091e2:	7770106f          	j	8000b158 <tinst_tests_pf+0x328c>
    800091e6:	00025517          	auipc	a0,0x25
    800091ea:	01a50513          	addi	a0,a0,26 # 8002e200 <__func__.0+0x318>
    800091ee:	23c220ef          	jal	8002b42a <printf>
    800091f2:	02900513          	li	a0,41
    800091f6:	723200ef          	jal	8002a118 <putchar>
    800091fa:	4529                	li	a0,10
    800091fc:	71d200ef          	jal	8002a118 <putchar>
    80009200:	00090a63          	beqz	s2,80009214 <tinst_tests_pf+0x1348>
    80009204:	0004f797          	auipc	a5,0x4f
    80009208:	e0d7c783          	lbu	a5,-499(a5) # 80058011 <excpt+0x1>
    8000920c:	c399                	beqz	a5,80009212 <tinst_tests_pf+0x1346>
    8000920e:	0990106f          	j	8000aaa6 <tinst_tests_pf+0x2bda>
    80009212:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009214:	bf9f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80009218:	400197b7          	lui	a5,0x40019
    8000921c:	078a                	slli	a5,a5,0x2
    8000921e:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009222:	00027617          	auipc	a2,0x27
    80009226:	0ee60613          	addi	a2,a2,238 # 80030310 <__func__.0+0x2428>
    8000922a:	08200593          	li	a1,130
    8000922e:	00025517          	auipc	a0,0x25
    80009232:	fb250513          	addi	a0,a0,-78 # 8002e1e0 <__func__.0+0x2f8>
    80009236:	1f4220ef          	jal	8002b42a <printf>
    8000923a:	0004f797          	auipc	a5,0x4f
    8000923e:	dd77c783          	lbu	a5,-553(a5) # 80058011 <excpt+0x1>
    80009242:	e399                	bnez	a5,80009248 <tinst_tests_pf+0x137c>
    80009244:	4720106f          	j	8000a6b6 <tinst_tests_pf+0x27ea>
    80009248:	6418                	ld	a4,8(s0)
    8000924a:	47bd                	li	a5,15
    8000924c:	00025597          	auipc	a1,0x25
    80009250:	f6c58593          	addi	a1,a1,-148 # 8002e1b8 <__func__.0+0x2d0>
    80009254:	00f71463          	bne	a4,a5,8000925c <tinst_tests_pf+0x1390>
    80009258:	4100106f          	j	8000a668 <tinst_tests_pf+0x279c>
    8000925c:	00025517          	auipc	a0,0x25
    80009260:	f9c50513          	addi	a0,a0,-100 # 8002e1f8 <__func__.0+0x310>
    80009264:	1c6220ef          	jal	8002b42a <printf>
    80009268:	0004f797          	auipc	a5,0x4f
    8000926c:	da97c783          	lbu	a5,-599(a5) # 80058011 <excpt+0x1>
    80009270:	c799                	beqz	a5,8000927e <tinst_tests_pf+0x13b2>
    80009272:	6418                	ld	a4,8(s0)
    80009274:	47bd                	li	a5,15
    80009276:	00f71463          	bne	a4,a5,8000927e <tinst_tests_pf+0x13b2>
    8000927a:	7230106f          	j	8000b19c <tinst_tests_pf+0x32d0>
    8000927e:	00025517          	auipc	a0,0x25
    80009282:	f8250513          	addi	a0,a0,-126 # 8002e200 <__func__.0+0x318>
    80009286:	1a4220ef          	jal	8002b42a <printf>
    8000928a:	02900513          	li	a0,41
    8000928e:	68b200ef          	jal	8002a118 <putchar>
    80009292:	4529                	li	a0,10
    80009294:	685200ef          	jal	8002a118 <putchar>
    80009298:	00090a63          	beqz	s2,800092ac <tinst_tests_pf+0x13e0>
    8000929c:	0004f797          	auipc	a5,0x4f
    800092a0:	d757c783          	lbu	a5,-651(a5) # 80058011 <excpt+0x1>
    800092a4:	c399                	beqz	a5,800092aa <tinst_tests_pf+0x13de>
    800092a6:	04f0106f          	j	8000aaf4 <tinst_tests_pf+0x2c28>
    800092aa:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800092ac:	b61f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800092b0:	400197b7          	lui	a5,0x40019
    800092b4:	078a                	slli	a5,a5,0x2
    800092b6:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    800092ba:	00027617          	auipc	a2,0x27
    800092be:	09660613          	addi	a2,a2,150 # 80030350 <__func__.0+0x2468>
    800092c2:	08200593          	li	a1,130
    800092c6:	00025517          	auipc	a0,0x25
    800092ca:	f1a50513          	addi	a0,a0,-230 # 8002e1e0 <__func__.0+0x2f8>
    800092ce:	15c220ef          	jal	8002b42a <printf>
    800092d2:	0004f797          	auipc	a5,0x4f
    800092d6:	d3f7c783          	lbu	a5,-705(a5) # 80058011 <excpt+0x1>
    800092da:	e399                	bnez	a5,800092e0 <tinst_tests_pf+0x1414>
    800092dc:	4340106f          	j	8000a710 <tinst_tests_pf+0x2844>
    800092e0:	6418                	ld	a4,8(s0)
    800092e2:	47bd                	li	a5,15
    800092e4:	00025597          	auipc	a1,0x25
    800092e8:	ed458593          	addi	a1,a1,-300 # 8002e1b8 <__func__.0+0x2d0>
    800092ec:	00f71463          	bne	a4,a5,800092f4 <tinst_tests_pf+0x1428>
    800092f0:	3d20106f          	j	8000a6c2 <tinst_tests_pf+0x27f6>
    800092f4:	00025517          	auipc	a0,0x25
    800092f8:	f0450513          	addi	a0,a0,-252 # 8002e1f8 <__func__.0+0x310>
    800092fc:	12e220ef          	jal	8002b42a <printf>
    80009300:	0004f797          	auipc	a5,0x4f
    80009304:	d117c783          	lbu	a5,-751(a5) # 80058011 <excpt+0x1>
    80009308:	c799                	beqz	a5,80009316 <tinst_tests_pf+0x144a>
    8000930a:	6418                	ld	a4,8(s0)
    8000930c:	47bd                	li	a5,15
    8000930e:	00f71463          	bne	a4,a5,80009316 <tinst_tests_pf+0x144a>
    80009312:	6cf0106f          	j	8000b1e0 <tinst_tests_pf+0x3314>
    80009316:	00025517          	auipc	a0,0x25
    8000931a:	eea50513          	addi	a0,a0,-278 # 8002e200 <__func__.0+0x318>
    8000931e:	10c220ef          	jal	8002b42a <printf>
    80009322:	02900513          	li	a0,41
    80009326:	5f3200ef          	jal	8002a118 <putchar>
    8000932a:	4529                	li	a0,10
    8000932c:	5ed200ef          	jal	8002a118 <putchar>
    80009330:	00090a63          	beqz	s2,80009344 <tinst_tests_pf+0x1478>
    80009334:	0004f797          	auipc	a5,0x4f
    80009338:	cdd7c783          	lbu	a5,-803(a5) # 80058011 <excpt+0x1>
    8000933c:	c399                	beqz	a5,80009342 <tinst_tests_pf+0x1476>
    8000933e:	02f0106f          	j	8000ab6c <tinst_tests_pf+0x2ca0>
    80009342:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009344:	ac9f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80009348:	400197b7          	lui	a5,0x40019
    8000934c:	078a                	slli	a5,a5,0x2
    8000934e:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    80009352:	00027617          	auipc	a2,0x27
    80009356:	03e60613          	addi	a2,a2,62 # 80030390 <__func__.0+0x24a8>
    8000935a:	08200593          	li	a1,130
    8000935e:	00025517          	auipc	a0,0x25
    80009362:	e8250513          	addi	a0,a0,-382 # 8002e1e0 <__func__.0+0x2f8>
    80009366:	0c4220ef          	jal	8002b42a <printf>
    8000936a:	0004f797          	auipc	a5,0x4f
    8000936e:	ca77c783          	lbu	a5,-857(a5) # 80058011 <excpt+0x1>
    80009372:	e399                	bnez	a5,80009378 <tinst_tests_pf+0x14ac>
    80009374:	3f60106f          	j	8000a76a <tinst_tests_pf+0x289e>
    80009378:	6418                	ld	a4,8(s0)
    8000937a:	47bd                	li	a5,15
    8000937c:	00025597          	auipc	a1,0x25
    80009380:	e3c58593          	addi	a1,a1,-452 # 8002e1b8 <__func__.0+0x2d0>
    80009384:	00f71463          	bne	a4,a5,8000938c <tinst_tests_pf+0x14c0>
    80009388:	3940106f          	j	8000a71c <tinst_tests_pf+0x2850>
    8000938c:	00025517          	auipc	a0,0x25
    80009390:	e6c50513          	addi	a0,a0,-404 # 8002e1f8 <__func__.0+0x310>
    80009394:	096220ef          	jal	8002b42a <printf>
    80009398:	0004f797          	auipc	a5,0x4f
    8000939c:	c797c783          	lbu	a5,-903(a5) # 80058011 <excpt+0x1>
    800093a0:	c799                	beqz	a5,800093ae <tinst_tests_pf+0x14e2>
    800093a2:	6418                	ld	a4,8(s0)
    800093a4:	47bd                	li	a5,15
    800093a6:	00f71463          	bne	a4,a5,800093ae <tinst_tests_pf+0x14e2>
    800093aa:	67b0106f          	j	8000b224 <tinst_tests_pf+0x3358>
    800093ae:	00025517          	auipc	a0,0x25
    800093b2:	e5250513          	addi	a0,a0,-430 # 8002e200 <__func__.0+0x318>
    800093b6:	074220ef          	jal	8002b42a <printf>
    800093ba:	02900513          	li	a0,41
    800093be:	55b200ef          	jal	8002a118 <putchar>
    800093c2:	4529                	li	a0,10
    800093c4:	555200ef          	jal	8002a118 <putchar>
    800093c8:	00090a63          	beqz	s2,800093dc <tinst_tests_pf+0x1510>
    800093cc:	0004f797          	auipc	a5,0x4f
    800093d0:	c457c783          	lbu	a5,-955(a5) # 80058011 <excpt+0x1>
    800093d4:	c399                	beqz	a5,800093da <tinst_tests_pf+0x150e>
    800093d6:	7e40106f          	j	8000abba <tinst_tests_pf+0x2cee>
    800093da:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800093dc:	a31f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    800093e0:	400197b7          	lui	a5,0x40019
    800093e4:	078a                	slli	a5,a5,0x2
    800093e6:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800093ea:	00027617          	auipc	a2,0x27
    800093ee:	fe660613          	addi	a2,a2,-26 # 800303d0 <__func__.0+0x24e8>
    800093f2:	08200593          	li	a1,130
    800093f6:	00025517          	auipc	a0,0x25
    800093fa:	dea50513          	addi	a0,a0,-534 # 8002e1e0 <__func__.0+0x2f8>
    800093fe:	02c220ef          	jal	8002b42a <printf>
    80009402:	0004f797          	auipc	a5,0x4f
    80009406:	c0f7c783          	lbu	a5,-1009(a5) # 80058011 <excpt+0x1>
    8000940a:	e399                	bnez	a5,80009410 <tinst_tests_pf+0x1544>
    8000940c:	3b80106f          	j	8000a7c4 <tinst_tests_pf+0x28f8>
    80009410:	6418                	ld	a4,8(s0)
    80009412:	47bd                	li	a5,15
    80009414:	00025597          	auipc	a1,0x25
    80009418:	da458593          	addi	a1,a1,-604 # 8002e1b8 <__func__.0+0x2d0>
    8000941c:	00f71463          	bne	a4,a5,80009424 <tinst_tests_pf+0x1558>
    80009420:	3560106f          	j	8000a776 <tinst_tests_pf+0x28aa>
    80009424:	00025517          	auipc	a0,0x25
    80009428:	dd450513          	addi	a0,a0,-556 # 8002e1f8 <__func__.0+0x310>
    8000942c:	7ff210ef          	jal	8002b42a <printf>
    80009430:	0004f797          	auipc	a5,0x4f
    80009434:	be17c783          	lbu	a5,-1055(a5) # 80058011 <excpt+0x1>
    80009438:	c799                	beqz	a5,80009446 <tinst_tests_pf+0x157a>
    8000943a:	6418                	ld	a4,8(s0)
    8000943c:	47bd                	li	a5,15
    8000943e:	00f71463          	bne	a4,a5,80009446 <tinst_tests_pf+0x157a>
    80009442:	6270106f          	j	8000b268 <tinst_tests_pf+0x339c>
    80009446:	00025517          	auipc	a0,0x25
    8000944a:	dba50513          	addi	a0,a0,-582 # 8002e200 <__func__.0+0x318>
    8000944e:	7dd210ef          	jal	8002b42a <printf>
    80009452:	02900513          	li	a0,41
    80009456:	4c3200ef          	jal	8002a118 <putchar>
    8000945a:	4529                	li	a0,10
    8000945c:	4bd200ef          	jal	8002a118 <putchar>
    80009460:	04090e63          	beqz	s2,800094bc <tinst_tests_pf+0x15f0>
    80009464:	0004f497          	auipc	s1,0x4f
    80009468:	bad4c483          	lbu	s1,-1107(s1) # 80058011 <excpt+0x1>
    8000946c:	c8a9                	beqz	s1,800094be <tinst_tests_pf+0x15f2>
    8000946e:	6418                	ld	a4,8(s0)
    80009470:	47bd                	li	a5,15
    80009472:	04f71563          	bne	a4,a5,800094bc <tinst_tests_pf+0x15f0>
    80009476:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80009478:	00025597          	auipc	a1,0x25
    8000947c:	d3058593          	addi	a1,a1,-720 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009480:	c3b9                	beqz	a5,800094c6 <tinst_tests_pf+0x15fa>
    80009482:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80009484:	0016f713          	andi	a4,a3,1
    80009488:	2c0710e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    8000948c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009490:	460d                	li	a2,3
    80009492:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009496:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009498:	00c59763          	bne	a1,a2,800094a6 <tinst_tests_pf+0x15da>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000949c:	0026d683          	lhu	a3,2(a3)
    800094a0:	0106969b          	slliw	a3,a3,0x10
    800094a4:	8f55                	or	a4,a4,a3
    800094a6:	1ffe16b7          	lui	a3,0x1ffe1
    800094aa:	068e                	slli	a3,a3,0x3
    800094ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800094ae:	8f75                	and	a4,a4,a3
    TEST_END();
    800094b0:	00025597          	auipc	a1,0x25
    800094b4:	cf858593          	addi	a1,a1,-776 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800094b8:	00e78763          	beq	a5,a4,800094c6 <tinst_tests_pf+0x15fa>
    800094bc:	4481                	li	s1,0
    TEST_END();
    800094be:	00025597          	auipc	a1,0x25
    800094c2:	cfa58593          	addi	a1,a1,-774 # 8002e1b8 <__func__.0+0x2d0>
    800094c6:	00025517          	auipc	a0,0x25
    800094ca:	d9a50513          	addi	a0,a0,-614 # 8002e260 <__func__.0+0x378>
    800094ce:	75d210ef          	jal	8002b42a <printf>
    800094d2:	4511                	li	a0,4
    800094d4:	a35f70ef          	jal	80000f08 <goto_priv>
    800094d8:	b4cf80ef          	jal	80001824 <reset_state>
}
    800094dc:	70a2                	ld	ra,40(sp)
    800094de:	7402                	ld	s0,32(sp)
    800094e0:	6942                	ld	s2,16(sp)
    800094e2:	69a2                	ld	s3,8(sp)
    800094e4:	8526                	mv	a0,s1
    800094e6:	64e2                	ld	s1,24(sp)
    800094e8:	6145                	addi	sp,sp,48
    800094ea:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    800094ec:	701c                	ld	a5,32(s0)
    800094ee:	00025597          	auipc	a1,0x25
    800094f2:	cba58593          	addi	a1,a1,-838 # 8002e1a8 <__func__.0+0x2c0>
    800094f6:	e399                	bnez	a5,800094fc <tinst_tests_pf+0x1630>
    800094f8:	a55fe06f          	j	80007f4c <tinst_tests_pf+0x80>
    800094fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094fe:	0016f713          	andi	a4,a3,1
    80009502:	240713e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009506:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000950a:	460d                	li	a2,3
    8000950c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009510:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009512:	00c59763          	bne	a1,a2,80009520 <tinst_tests_pf+0x1654>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009516:	0026d683          	lhu	a3,2(a3)
    8000951a:	0106969b          	slliw	a3,a3,0x10
    8000951e:	8f55                	or	a4,a4,a3
    80009520:	1746                	slli	a4,a4,0x31
    80009522:	9345                	srli	a4,a4,0x31
    80009524:	00025597          	auipc	a1,0x25
    80009528:	c8458593          	addi	a1,a1,-892 # 8002e1a8 <__func__.0+0x2c0>
    8000952c:	00e79463          	bne	a5,a4,80009534 <tinst_tests_pf+0x1668>
    80009530:	a1dfe06f          	j	80007f4c <tinst_tests_pf+0x80>
    80009534:	00025597          	auipc	a1,0x25
    80009538:	c8458593          	addi	a1,a1,-892 # 8002e1b8 <__func__.0+0x2d0>
    8000953c:	a11fe06f          	j	80007f4c <tinst_tests_pf+0x80>
    80009540:	6418                	ld	a4,8(s0)
    80009542:	47b5                	li	a5,13
    80009544:	4901                	li	s2,0
    80009546:	00f70463          	beq	a4,a5,8000954e <tinst_tests_pf+0x1682>
    8000954a:	a4ffe06f          	j	80007f98 <tinst_tests_pf+0xcc>
    8000954e:	7018                	ld	a4,32(s0)
    80009550:	4905                	li	s2,1
    80009552:	e319                	bnez	a4,80009558 <tinst_tests_pf+0x168c>
    80009554:	a45fe06f          	j	80007f98 <tinst_tests_pf+0xcc>
    80009558:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000955a:	0126f7b3          	and	a5,a3,s2
    8000955e:	1e0795e3          	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009562:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009566:	460d                	li	a2,3
    80009568:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000956c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000956e:	00c59763          	bne	a1,a2,8000957c <tinst_tests_pf+0x16b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009572:	0026d683          	lhu	a3,2(a3)
    80009576:	0106969b          	slliw	a3,a3,0x10
    8000957a:	8fd5                	or	a5,a5,a3
    8000957c:	03179913          	slli	s2,a5,0x31
    80009580:	03195913          	srli	s2,s2,0x31
    80009584:	40e90933          	sub	s2,s2,a4
    80009588:	00193913          	seqz	s2,s2
    8000958c:	a0dfe06f          	j	80007f98 <tinst_tests_pf+0xcc>
    80009590:	701c                	ld	a5,32(s0)
    80009592:	e399                	bnez	a5,80009598 <tinst_tests_pf+0x16cc>
    80009594:	9effe06f          	j	80007f82 <tinst_tests_pf+0xb6>
    80009598:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000959a:	0016f713          	andi	a4,a3,1
    8000959e:	1a0715e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095a6:	460d                	li	a2,3
    800095a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095ae:	00c59763          	bne	a1,a2,800095bc <tinst_tests_pf+0x16f0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095b2:	0026d683          	lhu	a3,2(a3)
    800095b6:	0106969b          	slliw	a3,a3,0x10
    800095ba:	8f55                	or	a4,a4,a3
    800095bc:	1746                	slli	a4,a4,0x31
    800095be:	9345                	srli	a4,a4,0x31
    800095c0:	00e78463          	beq	a5,a4,800095c8 <tinst_tests_pf+0x16fc>
    800095c4:	9abfe06f          	j	80007f6e <tinst_tests_pf+0xa2>
    800095c8:	9bbfe06f          	j	80007f82 <tinst_tests_pf+0xb6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    800095cc:	701c                	ld	a5,32(s0)
    800095ce:	00025597          	auipc	a1,0x25
    800095d2:	bda58593          	addi	a1,a1,-1062 # 8002e1a8 <__func__.0+0x2c0>
    800095d6:	e399                	bnez	a5,800095dc <tinst_tests_pf+0x1710>
    800095d8:	a09fe06f          	j	80007fe0 <tinst_tests_pf+0x114>
    800095dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095de:	0016f713          	andi	a4,a3,1
    800095e2:	160713e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095ea:	460d                	li	a2,3
    800095ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095f2:	00c59763          	bne	a1,a2,80009600 <tinst_tests_pf+0x1734>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095f6:	0026d683          	lhu	a3,2(a3)
    800095fa:	0106969b          	slliw	a3,a3,0x10
    800095fe:	8f55                	or	a4,a4,a3
    80009600:	1746                	slli	a4,a4,0x31
    80009602:	9345                	srli	a4,a4,0x31
    80009604:	00025597          	auipc	a1,0x25
    80009608:	ba458593          	addi	a1,a1,-1116 # 8002e1a8 <__func__.0+0x2c0>
    8000960c:	00e79463          	bne	a5,a4,80009614 <tinst_tests_pf+0x1748>
    80009610:	9d1fe06f          	j	80007fe0 <tinst_tests_pf+0x114>
    80009614:	00025597          	auipc	a1,0x25
    80009618:	ba458593          	addi	a1,a1,-1116 # 8002e1b8 <__func__.0+0x2d0>
    8000961c:	9c5fe06f          	j	80007fe0 <tinst_tests_pf+0x114>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009620:	701c                	ld	a5,32(s0)
    80009622:	00025597          	auipc	a1,0x25
    80009626:	b8658593          	addi	a1,a1,-1146 # 8002e1a8 <__func__.0+0x2c0>
    8000962a:	e399                	bnez	a5,80009630 <tinst_tests_pf+0x1764>
    8000962c:	a55fe06f          	j	80008080 <tinst_tests_pf+0x1b4>
    80009630:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009632:	0016f713          	andi	a4,a3,1
    80009636:	100719e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000963a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000963e:	460d                	li	a2,3
    80009640:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009644:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009646:	00c59763          	bne	a1,a2,80009654 <tinst_tests_pf+0x1788>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000964a:	0026d683          	lhu	a3,2(a3)
    8000964e:	0106969b          	slliw	a3,a3,0x10
    80009652:	8f55                	or	a4,a4,a3
    80009654:	1746                	slli	a4,a4,0x31
    80009656:	9345                	srli	a4,a4,0x31
    80009658:	00025597          	auipc	a1,0x25
    8000965c:	b5058593          	addi	a1,a1,-1200 # 8002e1a8 <__func__.0+0x2c0>
    80009660:	00e79463          	bne	a5,a4,80009668 <tinst_tests_pf+0x179c>
    80009664:	a1dfe06f          	j	80008080 <tinst_tests_pf+0x1b4>
    80009668:	00025597          	auipc	a1,0x25
    8000966c:	b5058593          	addi	a1,a1,-1200 # 8002e1b8 <__func__.0+0x2d0>
    80009670:	a11fe06f          	j	80008080 <tinst_tests_pf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009674:	701c                	ld	a5,32(s0)
    80009676:	00025597          	auipc	a1,0x25
    8000967a:	b3258593          	addi	a1,a1,-1230 # 8002e1a8 <__func__.0+0x2c0>
    8000967e:	e399                	bnez	a5,80009684 <tinst_tests_pf+0x17b8>
    80009680:	aa1fe06f          	j	80008120 <tinst_tests_pf+0x254>
    80009684:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009686:	0016f713          	andi	a4,a3,1
    8000968a:	0a071fe3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000968e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009692:	460d                	li	a2,3
    80009694:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009698:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000969a:	00c59763          	bne	a1,a2,800096a8 <tinst_tests_pf+0x17dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000969e:	0026d683          	lhu	a3,2(a3)
    800096a2:	0106969b          	slliw	a3,a3,0x10
    800096a6:	8f55                	or	a4,a4,a3
    800096a8:	1746                	slli	a4,a4,0x31
    800096aa:	9345                	srli	a4,a4,0x31
    800096ac:	00025597          	auipc	a1,0x25
    800096b0:	afc58593          	addi	a1,a1,-1284 # 8002e1a8 <__func__.0+0x2c0>
    800096b4:	00e79463          	bne	a5,a4,800096bc <tinst_tests_pf+0x17f0>
    800096b8:	a69fe06f          	j	80008120 <tinst_tests_pf+0x254>
    800096bc:	00025597          	auipc	a1,0x25
    800096c0:	afc58593          	addi	a1,a1,-1284 # 8002e1b8 <__func__.0+0x2d0>
    800096c4:	a5dfe06f          	j	80008120 <tinst_tests_pf+0x254>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800096c8:	701c                	ld	a5,32(s0)
    800096ca:	00025597          	auipc	a1,0x25
    800096ce:	ade58593          	addi	a1,a1,-1314 # 8002e1a8 <__func__.0+0x2c0>
    800096d2:	e399                	bnez	a5,800096d8 <tinst_tests_pf+0x180c>
    800096d4:	aedfe06f          	j	800081c0 <tinst_tests_pf+0x2f4>
    800096d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096da:	0016f713          	andi	a4,a3,1
    800096de:	060715e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800096e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096e6:	460d                	li	a2,3
    800096e8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096ee:	00c59763          	bne	a1,a2,800096fc <tinst_tests_pf+0x1830>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096f2:	0026d683          	lhu	a3,2(a3)
    800096f6:	0106969b          	slliw	a3,a3,0x10
    800096fa:	8f55                	or	a4,a4,a3
    800096fc:	1746                	slli	a4,a4,0x31
    800096fe:	9345                	srli	a4,a4,0x31
    80009700:	00025597          	auipc	a1,0x25
    80009704:	aa858593          	addi	a1,a1,-1368 # 8002e1a8 <__func__.0+0x2c0>
    80009708:	00e79463          	bne	a5,a4,80009710 <tinst_tests_pf+0x1844>
    8000970c:	ab5fe06f          	j	800081c0 <tinst_tests_pf+0x2f4>
    80009710:	00025597          	auipc	a1,0x25
    80009714:	aa858593          	addi	a1,a1,-1368 # 8002e1b8 <__func__.0+0x2d0>
    80009718:	aa9fe06f          	j	800081c0 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000971c:	701c                	ld	a5,32(s0)
    8000971e:	00025597          	auipc	a1,0x25
    80009722:	a8a58593          	addi	a1,a1,-1398 # 8002e1a8 <__func__.0+0x2c0>
    80009726:	e399                	bnez	a5,8000972c <tinst_tests_pf+0x1860>
    80009728:	b31fe06f          	j	80008258 <tinst_tests_pf+0x38c>
    8000972c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000972e:	0016f713          	andi	a4,a3,1
    80009732:	00071be3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009736:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000973a:	460d                	li	a2,3
    8000973c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009740:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009742:	00c59763          	bne	a1,a2,80009750 <tinst_tests_pf+0x1884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009746:	0026d683          	lhu	a3,2(a3)
    8000974a:	0106969b          	slliw	a3,a3,0x10
    8000974e:	8f55                	or	a4,a4,a3
    80009750:	1746                	slli	a4,a4,0x31
    80009752:	9345                	srli	a4,a4,0x31
    80009754:	00025597          	auipc	a1,0x25
    80009758:	a5458593          	addi	a1,a1,-1452 # 8002e1a8 <__func__.0+0x2c0>
    8000975c:	00e79463          	bne	a5,a4,80009764 <tinst_tests_pf+0x1898>
    80009760:	af9fe06f          	j	80008258 <tinst_tests_pf+0x38c>
    80009764:	00025597          	auipc	a1,0x25
    80009768:	a5458593          	addi	a1,a1,-1452 # 8002e1b8 <__func__.0+0x2d0>
    8000976c:	aedfe06f          	j	80008258 <tinst_tests_pf+0x38c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009770:	701c                	ld	a5,32(s0)
    80009772:	00025597          	auipc	a1,0x25
    80009776:	a3658593          	addi	a1,a1,-1482 # 8002e1a8 <__func__.0+0x2c0>
    8000977a:	e399                	bnez	a5,80009780 <tinst_tests_pf+0x18b4>
    8000977c:	b75fe06f          	j	800082f0 <tinst_tests_pf+0x424>
    80009780:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009782:	0016f713          	andi	a4,a3,1
    80009786:	7c071163          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000978a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000978e:	460d                	li	a2,3
    80009790:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009794:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009796:	00c59763          	bne	a1,a2,800097a4 <tinst_tests_pf+0x18d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000979a:	0026d683          	lhu	a3,2(a3)
    8000979e:	0106969b          	slliw	a3,a3,0x10
    800097a2:	8f55                	or	a4,a4,a3
    800097a4:	1746                	slli	a4,a4,0x31
    800097a6:	9345                	srli	a4,a4,0x31
    800097a8:	00025597          	auipc	a1,0x25
    800097ac:	a0058593          	addi	a1,a1,-1536 # 8002e1a8 <__func__.0+0x2c0>
    800097b0:	00e79463          	bne	a5,a4,800097b8 <tinst_tests_pf+0x18ec>
    800097b4:	b3dfe06f          	j	800082f0 <tinst_tests_pf+0x424>
    800097b8:	00025597          	auipc	a1,0x25
    800097bc:	a0058593          	addi	a1,a1,-1536 # 8002e1b8 <__func__.0+0x2d0>
    800097c0:	b31fe06f          	j	800082f0 <tinst_tests_pf+0x424>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800097c4:	701c                	ld	a5,32(s0)
    800097c6:	00025597          	auipc	a1,0x25
    800097ca:	9e258593          	addi	a1,a1,-1566 # 8002e1a8 <__func__.0+0x2c0>
    800097ce:	e399                	bnez	a5,800097d4 <tinst_tests_pf+0x1908>
    800097d0:	bbbfe06f          	j	8000838a <tinst_tests_pf+0x4be>
    800097d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097d6:	0016f713          	andi	a4,a3,1
    800097da:	76071763          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800097de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097e2:	460d                	li	a2,3
    800097e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800097e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800097ea:	00c59763          	bne	a1,a2,800097f8 <tinst_tests_pf+0x192c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097ee:	0026d683          	lhu	a3,2(a3)
    800097f2:	0106969b          	slliw	a3,a3,0x10
    800097f6:	8f55                	or	a4,a4,a3
    800097f8:	01f076b7          	lui	a3,0x1f07
    800097fc:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009800:	8f75                	and	a4,a4,a3
    80009802:	00025597          	auipc	a1,0x25
    80009806:	9a658593          	addi	a1,a1,-1626 # 8002e1a8 <__func__.0+0x2c0>
    8000980a:	00e79463          	bne	a5,a4,80009812 <tinst_tests_pf+0x1946>
    8000980e:	b7dfe06f          	j	8000838a <tinst_tests_pf+0x4be>
    80009812:	00025597          	auipc	a1,0x25
    80009816:	9a658593          	addi	a1,a1,-1626 # 8002e1b8 <__func__.0+0x2d0>
    8000981a:	b71fe06f          	j	8000838a <tinst_tests_pf+0x4be>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000981e:	701c                	ld	a5,32(s0)
    80009820:	00025597          	auipc	a1,0x25
    80009824:	98858593          	addi	a1,a1,-1656 # 8002e1a8 <__func__.0+0x2c0>
    80009828:	e399                	bnez	a5,8000982e <tinst_tests_pf+0x1962>
    8000982a:	bfffe06f          	j	80008428 <tinst_tests_pf+0x55c>
    8000982e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009830:	0016f713          	andi	a4,a3,1
    80009834:	70071a63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009838:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000983c:	460d                	li	a2,3
    8000983e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009842:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009844:	00c59763          	bne	a1,a2,80009852 <tinst_tests_pf+0x1986>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009848:	0026d683          	lhu	a3,2(a3)
    8000984c:	0106969b          	slliw	a3,a3,0x10
    80009850:	8f55                	or	a4,a4,a3
    80009852:	01f076b7          	lui	a3,0x1f07
    80009856:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000985a:	8f75                	and	a4,a4,a3
    8000985c:	00025597          	auipc	a1,0x25
    80009860:	94c58593          	addi	a1,a1,-1716 # 8002e1a8 <__func__.0+0x2c0>
    80009864:	00e79463          	bne	a5,a4,8000986c <tinst_tests_pf+0x19a0>
    80009868:	bc1fe06f          	j	80008428 <tinst_tests_pf+0x55c>
    8000986c:	00025597          	auipc	a1,0x25
    80009870:	94c58593          	addi	a1,a1,-1716 # 8002e1b8 <__func__.0+0x2d0>
    80009874:	bb5fe06f          	j	80008428 <tinst_tests_pf+0x55c>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009878:	701c                	ld	a5,32(s0)
    8000987a:	00025597          	auipc	a1,0x25
    8000987e:	92e58593          	addi	a1,a1,-1746 # 8002e1a8 <__func__.0+0x2c0>
    80009882:	e399                	bnez	a5,80009888 <tinst_tests_pf+0x19bc>
    80009884:	c45fe06f          	j	800084c8 <tinst_tests_pf+0x5fc>
    80009888:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000988a:	0016f713          	andi	a4,a3,1
    8000988e:	6a071d63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009892:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009896:	460d                	li	a2,3
    80009898:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000989c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000989e:	00c59763          	bne	a1,a2,800098ac <tinst_tests_pf+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098a2:	0026d683          	lhu	a3,2(a3)
    800098a6:	0106969b          	slliw	a3,a3,0x10
    800098aa:	8f55                	or	a4,a4,a3
    800098ac:	01f076b7          	lui	a3,0x1f07
    800098b0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800098b4:	8f75                	and	a4,a4,a3
    800098b6:	00025597          	auipc	a1,0x25
    800098ba:	8f258593          	addi	a1,a1,-1806 # 8002e1a8 <__func__.0+0x2c0>
    800098be:	00e79463          	bne	a5,a4,800098c6 <tinst_tests_pf+0x19fa>
    800098c2:	c07fe06f          	j	800084c8 <tinst_tests_pf+0x5fc>
    800098c6:	00025597          	auipc	a1,0x25
    800098ca:	8f258593          	addi	a1,a1,-1806 # 8002e1b8 <__func__.0+0x2d0>
    800098ce:	bfbfe06f          	j	800084c8 <tinst_tests_pf+0x5fc>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    800098d2:	701c                	ld	a5,32(s0)
    800098d4:	00025597          	auipc	a1,0x25
    800098d8:	8d458593          	addi	a1,a1,-1836 # 8002e1a8 <__func__.0+0x2c0>
    800098dc:	e399                	bnez	a5,800098e2 <tinst_tests_pf+0x1a16>
    800098de:	c8dfe06f          	j	8000856a <tinst_tests_pf+0x69e>
    800098e2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098e4:	0016f713          	andi	a4,a3,1
    800098e8:	66071063          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800098ec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098f0:	460d                	li	a2,3
    800098f2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098f6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098f8:	00c59763          	bne	a1,a2,80009906 <tinst_tests_pf+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098fc:	0026d683          	lhu	a3,2(a3)
    80009900:	0106969b          	slliw	a3,a3,0x10
    80009904:	8f55                	or	a4,a4,a3
    80009906:	01f076b7          	lui	a3,0x1f07
    8000990a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000990e:	8f75                	and	a4,a4,a3
    80009910:	00025597          	auipc	a1,0x25
    80009914:	89858593          	addi	a1,a1,-1896 # 8002e1a8 <__func__.0+0x2c0>
    80009918:	00e79463          	bne	a5,a4,80009920 <tinst_tests_pf+0x1a54>
    8000991c:	c4ffe06f          	j	8000856a <tinst_tests_pf+0x69e>
    80009920:	00025597          	auipc	a1,0x25
    80009924:	89858593          	addi	a1,a1,-1896 # 8002e1b8 <__func__.0+0x2d0>
    80009928:	c43fe06f          	j	8000856a <tinst_tests_pf+0x69e>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000992c:	701c                	ld	a5,32(s0)
    8000992e:	00025597          	auipc	a1,0x25
    80009932:	87a58593          	addi	a1,a1,-1926 # 8002e1a8 <__func__.0+0x2c0>
    80009936:	e399                	bnez	a5,8000993c <tinst_tests_pf+0x1a70>
    80009938:	f2ffe06f          	j	80008866 <tinst_tests_pf+0x99a>
    8000993c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000993e:	0016f713          	andi	a4,a3,1
    80009942:	60071363          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009946:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000994a:	460d                	li	a2,3
    8000994c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009950:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009952:	00c59763          	bne	a1,a2,80009960 <tinst_tests_pf+0x1a94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009956:	0026d683          	lhu	a3,2(a3)
    8000995a:	0106969b          	slliw	a3,a3,0x10
    8000995e:	8f55                	or	a4,a4,a3
    80009960:	1ffe16b7          	lui	a3,0x1ffe1
    80009964:	068e                	slli	a3,a3,0x3
    80009966:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009968:	8f75                	and	a4,a4,a3
    8000996a:	00025597          	auipc	a1,0x25
    8000996e:	83e58593          	addi	a1,a1,-1986 # 8002e1a8 <__func__.0+0x2c0>
    80009972:	00e79463          	bne	a5,a4,8000997a <tinst_tests_pf+0x1aae>
    80009976:	ef1fe06f          	j	80008866 <tinst_tests_pf+0x99a>
    8000997a:	00025597          	auipc	a1,0x25
    8000997e:	83e58593          	addi	a1,a1,-1986 # 8002e1b8 <__func__.0+0x2d0>
    80009982:	ee5fe06f          	j	80008866 <tinst_tests_pf+0x99a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009986:	701c                	ld	a5,32(s0)
    80009988:	00025597          	auipc	a1,0x25
    8000998c:	82058593          	addi	a1,a1,-2016 # 8002e1a8 <__func__.0+0x2c0>
    80009990:	e399                	bnez	a5,80009996 <tinst_tests_pf+0x1aca>
    80009992:	f7bfe06f          	j	8000890c <tinst_tests_pf+0xa40>
    80009996:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009998:	0016f713          	andi	a4,a3,1
    8000999c:	5a071663          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099a0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099a4:	460d                	li	a2,3
    800099a6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099aa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099ac:	00c59763          	bne	a1,a2,800099ba <tinst_tests_pf+0x1aee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099b0:	0026d683          	lhu	a3,2(a3)
    800099b4:	0106969b          	slliw	a3,a3,0x10
    800099b8:	8f55                	or	a4,a4,a3
    800099ba:	1ffe16b7          	lui	a3,0x1ffe1
    800099be:	068e                	slli	a3,a3,0x3
    800099c0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800099c2:	8f75                	and	a4,a4,a3
    800099c4:	00024597          	auipc	a1,0x24
    800099c8:	7e458593          	addi	a1,a1,2020 # 8002e1a8 <__func__.0+0x2c0>
    800099cc:	00e79463          	bne	a5,a4,800099d4 <tinst_tests_pf+0x1b08>
    800099d0:	f3dfe06f          	j	8000890c <tinst_tests_pf+0xa40>
    800099d4:	00024597          	auipc	a1,0x24
    800099d8:	7e458593          	addi	a1,a1,2020 # 8002e1b8 <__func__.0+0x2d0>
    800099dc:	f31fe06f          	j	8000890c <tinst_tests_pf+0xa40>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    800099e0:	701c                	ld	a5,32(s0)
    800099e2:	00024597          	auipc	a1,0x24
    800099e6:	7c658593          	addi	a1,a1,1990 # 8002e1a8 <__func__.0+0x2c0>
    800099ea:	e399                	bnez	a5,800099f0 <tinst_tests_pf+0x1b24>
    800099ec:	fc1fe06f          	j	800089ac <tinst_tests_pf+0xae0>
    800099f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099f2:	0016f713          	andi	a4,a3,1
    800099f6:	54071963          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099fa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099fe:	460d                	li	a2,3
    80009a00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a06:	00c59763          	bne	a1,a2,80009a14 <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a0a:	0026d683          	lhu	a3,2(a3)
    80009a0e:	0106969b          	slliw	a3,a3,0x10
    80009a12:	8f55                	or	a4,a4,a3
    80009a14:	1ffe16b7          	lui	a3,0x1ffe1
    80009a18:	068e                	slli	a3,a3,0x3
    80009a1a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a1c:	8f75                	and	a4,a4,a3
    80009a1e:	00024597          	auipc	a1,0x24
    80009a22:	78a58593          	addi	a1,a1,1930 # 8002e1a8 <__func__.0+0x2c0>
    80009a26:	00e79463          	bne	a5,a4,80009a2e <tinst_tests_pf+0x1b62>
    80009a2a:	f83fe06f          	j	800089ac <tinst_tests_pf+0xae0>
    80009a2e:	00024597          	auipc	a1,0x24
    80009a32:	78a58593          	addi	a1,a1,1930 # 8002e1b8 <__func__.0+0x2d0>
    80009a36:	f77fe06f          	j	800089ac <tinst_tests_pf+0xae0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009a3a:	701c                	ld	a5,32(s0)
    80009a3c:	e399                	bnez	a5,80009a42 <tinst_tests_pf+0x1b76>
    80009a3e:	dd8fe06f          	j	80008016 <tinst_tests_pf+0x14a>
    80009a42:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a44:	0016f713          	andi	a4,a3,1
    80009a48:	50071063          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a4c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a50:	460d                	li	a2,3
    80009a52:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a56:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a58:	00c59763          	bne	a1,a2,80009a66 <tinst_tests_pf+0x1b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a5c:	0026d683          	lhu	a3,2(a3)
    80009a60:	0106969b          	slliw	a3,a3,0x10
    80009a64:	8f55                	or	a4,a4,a3
    80009a66:	1746                	slli	a4,a4,0x31
    80009a68:	9345                	srli	a4,a4,0x31
    80009a6a:	00e78463          	beq	a5,a4,80009a72 <tinst_tests_pf+0x1ba6>
    80009a6e:	d94fe06f          	j	80008002 <tinst_tests_pf+0x136>
    80009a72:	da4fe06f          	j	80008016 <tinst_tests_pf+0x14a>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009a76:	6418                	ld	a4,8(s0)
    80009a78:	47b5                	li	a5,13
    80009a7a:	00f70463          	beq	a4,a5,80009a82 <tinst_tests_pf+0x1bb6>
    80009a7e:	f90fe06f          	j	8000820e <tinst_tests_pf+0x342>
    80009a82:	7018                	ld	a4,32(s0)
    80009a84:	e319                	bnez	a4,80009a8a <tinst_tests_pf+0x1bbe>
    80009a86:	f8afe06f          	j	80008210 <tinst_tests_pf+0x344>
    80009a8a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a8c:	0016f793          	andi	a5,a3,1
    80009a90:	4a079c63          	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a94:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a98:	460d                	li	a2,3
    80009a9a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009a9e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009aa0:	00c59763          	bne	a1,a2,80009aae <tinst_tests_pf+0x1be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aa4:	0026d683          	lhu	a3,2(a3)
    80009aa8:	0106969b          	slliw	a3,a3,0x10
    80009aac:	8fd5                	or	a5,a5,a3
    80009aae:	17c6                	slli	a5,a5,0x31
    80009ab0:	0317d913          	srli	s2,a5,0x31
    80009ab4:	40e90933          	sub	s2,s2,a4
    80009ab8:	00193913          	seqz	s2,s2
    80009abc:	f54fe06f          	j	80008210 <tinst_tests_pf+0x344>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009ac0:	6418                	ld	a4,8(s0)
    80009ac2:	47bd                	li	a5,15
    80009ac4:	00024597          	auipc	a1,0x24
    80009ac8:	6f458593          	addi	a1,a1,1780 # 8002e1b8 <__func__.0+0x2d0>
    80009acc:	00f70463          	beq	a4,a5,80009ad4 <tinst_tests_pf+0x1c08>
    80009ad0:	f71fe06f          	j	80008a40 <tinst_tests_pf+0xb74>
    80009ad4:	701c                	ld	a5,32(s0)
    80009ad6:	00024597          	auipc	a1,0x24
    80009ada:	6d258593          	addi	a1,a1,1746 # 8002e1a8 <__func__.0+0x2c0>
    80009ade:	e399                	bnez	a5,80009ae4 <tinst_tests_pf+0x1c18>
    80009ae0:	f61fe06f          	j	80008a40 <tinst_tests_pf+0xb74>
    80009ae4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ae6:	0016f713          	andi	a4,a3,1
    80009aea:	44071f63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009aee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009af2:	460d                	li	a2,3
    80009af4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009af8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009afa:	00c59763          	bne	a1,a2,80009b08 <tinst_tests_pf+0x1c3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009afe:	0026d683          	lhu	a3,2(a3)
    80009b02:	0106969b          	slliw	a3,a3,0x10
    80009b06:	8f55                	or	a4,a4,a3
    80009b08:	1ffe16b7          	lui	a3,0x1ffe1
    80009b0c:	068e                	slli	a3,a3,0x3
    80009b0e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009b10:	8f75                	and	a4,a4,a3
    80009b12:	00024597          	auipc	a1,0x24
    80009b16:	69658593          	addi	a1,a1,1686 # 8002e1a8 <__func__.0+0x2c0>
    80009b1a:	00e78463          	beq	a5,a4,80009b22 <tinst_tests_pf+0x1c56>
    80009b1e:	f1bfe06f          	j	80008a38 <tinst_tests_pf+0xb6c>
    80009b22:	f1ffe06f          	j	80008a40 <tinst_tests_pf+0xb74>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009b26:	6418                	ld	a4,8(s0)
    80009b28:	47b5                	li	a5,13
    80009b2a:	00f70463          	beq	a4,a5,80009b32 <tinst_tests_pf+0x1c66>
    80009b2e:	f78fe06f          	j	800082a6 <tinst_tests_pf+0x3da>
    80009b32:	7018                	ld	a4,32(s0)
    80009b34:	e319                	bnez	a4,80009b3a <tinst_tests_pf+0x1c6e>
    80009b36:	f72fe06f          	j	800082a8 <tinst_tests_pf+0x3dc>
    80009b3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b3c:	0016f793          	andi	a5,a3,1
    80009b40:	40079463          	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b44:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b48:	460d                	li	a2,3
    80009b4a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009b4e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b50:	00c59763          	bne	a1,a2,80009b5e <tinst_tests_pf+0x1c92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b54:	0026d683          	lhu	a3,2(a3)
    80009b58:	0106969b          	slliw	a3,a3,0x10
    80009b5c:	8fd5                	or	a5,a5,a3
    80009b5e:	17c6                	slli	a5,a5,0x31
    80009b60:	0317d913          	srli	s2,a5,0x31
    80009b64:	40e90933          	sub	s2,s2,a4
    80009b68:	00193913          	seqz	s2,s2
    80009b6c:	f3cfe06f          	j	800082a8 <tinst_tests_pf+0x3dc>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009b70:	6418                	ld	a4,8(s0)
    80009b72:	47b5                	li	a5,13
    80009b74:	00f70463          	beq	a4,a5,80009b7c <tinst_tests_pf+0x1cb0>
    80009b78:	fc6fe06f          	j	8000833e <tinst_tests_pf+0x472>
    80009b7c:	7018                	ld	a4,32(s0)
    80009b7e:	e319                	bnez	a4,80009b84 <tinst_tests_pf+0x1cb8>
    80009b80:	fc0fe06f          	j	80008340 <tinst_tests_pf+0x474>
    80009b84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b86:	0016f793          	andi	a5,a3,1
    80009b8a:	3a079f63          	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b8e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b92:	460d                	li	a2,3
    80009b94:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009b98:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b9a:	00c59763          	bne	a1,a2,80009ba8 <tinst_tests_pf+0x1cdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b9e:	0026d683          	lhu	a3,2(a3)
    80009ba2:	0106969b          	slliw	a3,a3,0x10
    80009ba6:	8fd5                	or	a5,a5,a3
    80009ba8:	17c6                	slli	a5,a5,0x31
    80009baa:	0317d913          	srli	s2,a5,0x31
    80009bae:	40e90933          	sub	s2,s2,a4
    80009bb2:	00193913          	seqz	s2,s2
    80009bb6:	f8afe06f          	j	80008340 <tinst_tests_pf+0x474>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009bba:	6418                	ld	a4,8(s0)
    80009bbc:	47bd                	li	a5,15
    80009bbe:	00f70463          	beq	a4,a5,80009bc6 <tinst_tests_pf+0x1cfa>
    80009bc2:	817fe06f          	j	800083d8 <tinst_tests_pf+0x50c>
    80009bc6:	701c                	ld	a5,32(s0)
    80009bc8:	e399                	bnez	a5,80009bce <tinst_tests_pf+0x1d02>
    80009bca:	811fe06f          	j	800083da <tinst_tests_pf+0x50e>
    80009bce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bd0:	0016f713          	andi	a4,a3,1
    80009bd4:	36071a63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009bd8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bdc:	460d                	li	a2,3
    80009bde:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009be2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009be4:	00c59763          	bne	a1,a2,80009bf2 <tinst_tests_pf+0x1d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009be8:	0026d683          	lhu	a3,2(a3)
    80009bec:	0106969b          	slliw	a3,a3,0x10
    80009bf0:	8f55                	or	a4,a4,a3
    80009bf2:	01f076b7          	lui	a3,0x1f07
    80009bf6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009bfa:	8f75                	and	a4,a4,a3
    80009bfc:	40f70933          	sub	s2,a4,a5
    80009c00:	00193913          	seqz	s2,s2
    80009c04:	fd6fe06f          	j	800083da <tinst_tests_pf+0x50e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009c08:	6418                	ld	a4,8(s0)
    80009c0a:	47bd                	li	a5,15
    80009c0c:	00f70463          	beq	a4,a5,80009c14 <tinst_tests_pf+0x1d48>
    80009c10:	867fe06f          	j	80008476 <tinst_tests_pf+0x5aa>
    80009c14:	701c                	ld	a5,32(s0)
    80009c16:	e399                	bnez	a5,80009c1c <tinst_tests_pf+0x1d50>
    80009c18:	861fe06f          	j	80008478 <tinst_tests_pf+0x5ac>
    80009c1c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c1e:	0016f713          	andi	a4,a3,1
    80009c22:	32071363          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c26:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c2a:	460d                	li	a2,3
    80009c2c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c30:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c32:	00c59763          	bne	a1,a2,80009c40 <tinst_tests_pf+0x1d74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c36:	0026d683          	lhu	a3,2(a3)
    80009c3a:	0106969b          	slliw	a3,a3,0x10
    80009c3e:	8f55                	or	a4,a4,a3
    80009c40:	01f076b7          	lui	a3,0x1f07
    80009c44:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c48:	8f75                	and	a4,a4,a3
    80009c4a:	40f70933          	sub	s2,a4,a5
    80009c4e:	00193913          	seqz	s2,s2
    80009c52:	827fe06f          	j	80008478 <tinst_tests_pf+0x5ac>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009c56:	6418                	ld	a4,8(s0)
    80009c58:	47bd                	li	a5,15
    80009c5a:	00f70463          	beq	a4,a5,80009c62 <tinst_tests_pf+0x1d96>
    80009c5e:	8b9fe06f          	j	80008516 <tinst_tests_pf+0x64a>
    80009c62:	701c                	ld	a5,32(s0)
    80009c64:	e399                	bnez	a5,80009c6a <tinst_tests_pf+0x1d9e>
    80009c66:	8b3fe06f          	j	80008518 <tinst_tests_pf+0x64c>
    80009c6a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c6c:	0016f713          	andi	a4,a3,1
    80009c70:	2c071c63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c74:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c78:	460d                	li	a2,3
    80009c7a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c7e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c80:	00c59763          	bne	a1,a2,80009c8e <tinst_tests_pf+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c84:	0026d683          	lhu	a3,2(a3)
    80009c88:	0106969b          	slliw	a3,a3,0x10
    80009c8c:	8f55                	or	a4,a4,a3
    80009c8e:	01f076b7          	lui	a3,0x1f07
    80009c92:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c96:	8f75                	and	a4,a4,a3
    80009c98:	40f70933          	sub	s2,a4,a5
    80009c9c:	00193913          	seqz	s2,s2
    80009ca0:	879fe06f          	j	80008518 <tinst_tests_pf+0x64c>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009ca4:	6418                	ld	a4,8(s0)
    80009ca6:	47bd                	li	a5,15
    80009ca8:	00f70463          	beq	a4,a5,80009cb0 <tinst_tests_pf+0x1de4>
    80009cac:	90dfe06f          	j	800085b8 <tinst_tests_pf+0x6ec>
    80009cb0:	701c                	ld	a5,32(s0)
    80009cb2:	e399                	bnez	a5,80009cb8 <tinst_tests_pf+0x1dec>
    80009cb4:	907fe06f          	j	800085ba <tinst_tests_pf+0x6ee>
    80009cb8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cba:	0016f713          	andi	a4,a3,1
    80009cbe:	28071563          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009cc2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cc6:	460d                	li	a2,3
    80009cc8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ccc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cce:	00c59763          	bne	a1,a2,80009cdc <tinst_tests_pf+0x1e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cd2:	0026d683          	lhu	a3,2(a3)
    80009cd6:	0106969b          	slliw	a3,a3,0x10
    80009cda:	8f55                	or	a4,a4,a3
    80009cdc:	01f076b7          	lui	a3,0x1f07
    80009ce0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009ce4:	8f75                	and	a4,a4,a3
    80009ce6:	40f70933          	sub	s2,a4,a5
    80009cea:	00193913          	seqz	s2,s2
    80009cee:	8cdfe06f          	j	800085ba <tinst_tests_pf+0x6ee>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009cf2:	6418                	ld	a4,8(s0)
    80009cf4:	47b5                	li	a5,13
    80009cf6:	00f70463          	beq	a4,a5,80009cfe <tinst_tests_pf+0x1e32>
    80009cfa:	951fe06f          	j	8000864a <tinst_tests_pf+0x77e>
    80009cfe:	7004                	ld	s1,32(s0)
    80009d00:	e099                	bnez	s1,80009d06 <tinst_tests_pf+0x1e3a>
    80009d02:	94bfe06f          	j	8000864c <tinst_tests_pf+0x780>
    80009d06:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009d08:	0017f713          	andi	a4,a5,1
    80009d0c:	22071e63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d10:	0007d503          	lhu	a0,0(a5)
    80009d14:	a2df70ef          	jal	80001740 <expand_compressed_instruction>
    80009d18:	67a1                	lui	a5,0x8
    80009d1a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009d1c:	00f57933          	and	s2,a0,a5
    80009d20:	40990933          	sub	s2,s2,s1
    80009d24:	00193913          	seqz	s2,s2
    80009d28:	925fe06f          	j	8000864c <tinst_tests_pf+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009d2c:	6418                	ld	a4,8(s0)
    80009d2e:	47b5                	li	a5,13
    80009d30:	00f70463          	beq	a4,a5,80009d38 <tinst_tests_pf+0x1e6c>
    80009d34:	9abfe06f          	j	800086de <tinst_tests_pf+0x812>
    80009d38:	02043983          	ld	s3,32(s0)
    80009d3c:	00099463          	bnez	s3,80009d44 <tinst_tests_pf+0x1e78>
    80009d40:	9a1fe06f          	j	800086e0 <tinst_tests_pf+0x814>
    80009d44:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009d46:	0017f713          	andi	a4,a5,1
    80009d4a:	1e071f63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d4e:	0007d503          	lhu	a0,0(a5)
    80009d52:	9eff70ef          	jal	80001740 <expand_compressed_instruction>
    80009d56:	67a1                	lui	a5,0x8
    80009d58:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009d5a:	00f57933          	and	s2,a0,a5
    80009d5e:	41390933          	sub	s2,s2,s3
    80009d62:	00193913          	seqz	s2,s2
    80009d66:	97bfe06f          	j	800086e0 <tinst_tests_pf+0x814>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009d6a:	701c                	ld	a5,32(s0)
    80009d6c:	e399                	bnez	a5,80009d72 <tinst_tests_pf+0x1ea6>
    80009d6e:	b2ffe06f          	j	8000889c <tinst_tests_pf+0x9d0>
    80009d72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d74:	0016f713          	andi	a4,a3,1
    80009d78:	1c071863          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d7c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d80:	460d                	li	a2,3
    80009d82:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d86:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d88:	00c59763          	bne	a1,a2,80009d96 <tinst_tests_pf+0x1eca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d8c:	0026d683          	lhu	a3,2(a3)
    80009d90:	0106969b          	slliw	a3,a3,0x10
    80009d94:	8f55                	or	a4,a4,a3
    80009d96:	1ffe16b7          	lui	a3,0x1ffe1
    80009d9a:	068e                	slli	a3,a3,0x3
    80009d9c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d9e:	8f75                	and	a4,a4,a3
    80009da0:	00e78463          	beq	a5,a4,80009da8 <tinst_tests_pf+0x1edc>
    80009da4:	ae5fe06f          	j	80008888 <tinst_tests_pf+0x9bc>
    80009da8:	af5fe06f          	j	8000889c <tinst_tests_pf+0x9d0>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009dac:	701c                	ld	a5,32(s0)
    80009dae:	e399                	bnez	a5,80009db4 <tinst_tests_pf+0x1ee8>
    80009db0:	b93fe06f          	j	80008942 <tinst_tests_pf+0xa76>
    80009db4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009db6:	0016f713          	andi	a4,a3,1
    80009dba:	18071763          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009dbe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009dc2:	460d                	li	a2,3
    80009dc4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009dc8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009dca:	00c59763          	bne	a1,a2,80009dd8 <tinst_tests_pf+0x1f0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dce:	0026d683          	lhu	a3,2(a3)
    80009dd2:	0106969b          	slliw	a3,a3,0x10
    80009dd6:	8f55                	or	a4,a4,a3
    80009dd8:	1ffe16b7          	lui	a3,0x1ffe1
    80009ddc:	068e                	slli	a3,a3,0x3
    80009dde:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009de0:	8f75                	and	a4,a4,a3
    80009de2:	00e78463          	beq	a5,a4,80009dea <tinst_tests_pf+0x1f1e>
    80009de6:	b49fe06f          	j	8000892e <tinst_tests_pf+0xa62>
    80009dea:	b59fe06f          	j	80008942 <tinst_tests_pf+0xa76>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009dee:	7004                	ld	s1,32(s0)
    80009df0:	780494e3          	bnez	s1,8000ad78 <tinst_tests_pf+0x2eac>
    80009df4:	00024597          	auipc	a1,0x24
    80009df8:	3b458593          	addi	a1,a1,948 # 8002e1a8 <__func__.0+0x2c0>
    80009dfc:	801fe06f          	j	800085fc <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009e00:	701c                	ld	a5,32(s0)
    80009e02:	e399                	bnez	a5,80009e08 <tinst_tests_pf+0x1f3c>
    80009e04:	bdffe06f          	j	800089e2 <tinst_tests_pf+0xb16>
    80009e08:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e0a:	0016f713          	andi	a4,a3,1
    80009e0e:	12071d63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e12:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e16:	460d                	li	a2,3
    80009e18:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e1c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e1e:	00c59763          	bne	a1,a2,80009e2c <tinst_tests_pf+0x1f60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e22:	0026d683          	lhu	a3,2(a3)
    80009e26:	0106969b          	slliw	a3,a3,0x10
    80009e2a:	8f55                	or	a4,a4,a3
    80009e2c:	1ffe16b7          	lui	a3,0x1ffe1
    80009e30:	068e                	slli	a3,a3,0x3
    80009e32:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009e34:	8f75                	and	a4,a4,a3
    80009e36:	00e78463          	beq	a5,a4,80009e3e <tinst_tests_pf+0x1f72>
    80009e3a:	b95fe06f          	j	800089ce <tinst_tests_pf+0xb02>
    80009e3e:	ba5fe06f          	j	800089e2 <tinst_tests_pf+0xb16>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009e42:	02043983          	ld	s3,32(s0)
    80009e46:	74099fe3          	bnez	s3,8000ada4 <tinst_tests_pf+0x2ed8>
    80009e4a:	00024597          	auipc	a1,0x24
    80009e4e:	35e58593          	addi	a1,a1,862 # 8002e1a8 <__func__.0+0x2c0>
    80009e52:	83ffe06f          	j	80008690 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009e56:	02043983          	ld	s3,32(s0)
    80009e5a:	7a099ce3          	bnez	s3,8000ae12 <tinst_tests_pf+0x2f46>
    80009e5e:	00024597          	auipc	a1,0x24
    80009e62:	34a58593          	addi	a1,a1,842 # 8002e1a8 <__func__.0+0x2c0>
    80009e66:	8bffe06f          	j	80008724 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009e6a:	7004                	ld	s1,32(s0)
    80009e6c:	c099                	beqz	s1,80009e72 <tinst_tests_pf+0x1fa6>
    80009e6e:	0160106f          	j	8000ae84 <tinst_tests_pf+0x2fb8>
    80009e72:	00024597          	auipc	a1,0x24
    80009e76:	33658593          	addi	a1,a1,822 # 8002e1a8 <__func__.0+0x2c0>
    80009e7a:	947fe06f          	j	800087c0 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009e7e:	7018                	ld	a4,32(s0)
    80009e80:	e319                	bnez	a4,80009e86 <tinst_tests_pf+0x1fba>
    80009e82:	9b6fe06f          	j	80008038 <tinst_tests_pf+0x16c>
    80009e86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e88:	0016f793          	andi	a5,a3,1
    80009e8c:	efd5                	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e8e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e92:	460d                	li	a2,3
    80009e94:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e98:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e9a:	00c59763          	bne	a1,a2,80009ea8 <tinst_tests_pf+0x1fdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e9e:	0026d683          	lhu	a3,2(a3)
    80009ea2:	0106969b          	slliw	a3,a3,0x10
    80009ea6:	8fd5                	or	a5,a5,a3
    80009ea8:	03179913          	slli	s2,a5,0x31
    80009eac:	03195913          	srli	s2,s2,0x31
    80009eb0:	40e90933          	sub	s2,s2,a4
    80009eb4:	00193913          	seqz	s2,s2
    80009eb8:	980fe06f          	j	80008038 <tinst_tests_pf+0x16c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009ebc:	7018                	ld	a4,32(s0)
    80009ebe:	e319                	bnez	a4,80009ec4 <tinst_tests_pf+0x1ff8>
    80009ec0:	a18fe06f          	j	800080d8 <tinst_tests_pf+0x20c>
    80009ec4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ec6:	0016f793          	andi	a5,a3,1
    80009eca:	efbd                	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ecc:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ed0:	460d                	li	a2,3
    80009ed2:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009ed6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ed8:	00c59763          	bne	a1,a2,80009ee6 <tinst_tests_pf+0x201a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009edc:	0026d683          	lhu	a3,2(a3)
    80009ee0:	0106969b          	slliw	a3,a3,0x10
    80009ee4:	8fd5                	or	a5,a5,a3
    80009ee6:	03179913          	slli	s2,a5,0x31
    80009eea:	03195913          	srli	s2,s2,0x31
    80009eee:	40e90933          	sub	s2,s2,a4
    80009ef2:	00193913          	seqz	s2,s2
    80009ef6:	9e2fe06f          	j	800080d8 <tinst_tests_pf+0x20c>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009efa:	7018                	ld	a4,32(s0)
    80009efc:	e319                	bnez	a4,80009f02 <tinst_tests_pf+0x2036>
    80009efe:	a7afe06f          	j	80008178 <tinst_tests_pf+0x2ac>
    80009f02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f04:	0016f793          	andi	a5,a3,1
    80009f08:	e3a1                	bnez	a5,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f0a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f0e:	460d                	li	a2,3
    80009f10:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009f14:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f16:	00c59763          	bne	a1,a2,80009f24 <tinst_tests_pf+0x2058>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f1a:	0026d683          	lhu	a3,2(a3)
    80009f1e:	0106969b          	slliw	a3,a3,0x10
    80009f22:	8fd5                	or	a5,a5,a3
    80009f24:	17c6                	slli	a5,a5,0x31
    80009f26:	0317d913          	srli	s2,a5,0x31
    80009f2a:	40e90933          	sub	s2,s2,a4
    80009f2e:	00193913          	seqz	s2,s2
    80009f32:	a46fe06f          	j	80008178 <tinst_tests_pf+0x2ac>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009f36:	701c                	ld	a5,32(s0)
    80009f38:	e399                	bnez	a5,80009f3e <tinst_tests_pf+0x2072>
    80009f3a:	97cfe06f          	j	800080b6 <tinst_tests_pf+0x1ea>
    80009f3e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f40:	0016f713          	andi	a4,a3,1
    80009f44:	3e070fe3          	beqz	a4,8000ab42 <tinst_tests_pf+0x2c76>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    80009f48:	12300613          	li	a2,291
    80009f4c:	00022597          	auipc	a1,0x22
    80009f50:	7f458593          	addi	a1,a1,2036 # 8002c740 <__func__.1>
    80009f54:	00026517          	auipc	a0,0x26
    80009f58:	c3c50513          	addi	a0,a0,-964 # 8002fb90 <__func__.0+0x1ca8>
    80009f5c:	4ce210ef          	jal	8002b42a <printf>
    80009f60:	12300613          	li	a2,291
    80009f64:	00022597          	auipc	a1,0x22
    80009f68:	7dc58593          	addi	a1,a1,2012 # 8002c740 <__func__.1>
    80009f6c:	00024517          	auipc	a0,0x24
    80009f70:	3e450513          	addi	a0,a0,996 # 8002e350 <__func__.0+0x468>
    80009f74:	4b6210ef          	jal	8002b42a <printf>
    80009f78:	4501                	li	a0,0
    80009f7a:	066210ef          	jal	8002afe0 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009f7e:	701c                	ld	a5,32(s0)
    80009f80:	00024597          	auipc	a1,0x24
    80009f84:	22858593          	addi	a1,a1,552 # 8002e1a8 <__func__.0+0x2c0>
    80009f88:	e399                	bnez	a5,80009f8e <tinst_tests_pf+0x20c2>
    80009f8a:	b57fe06f          	j	80008ae0 <tinst_tests_pf+0xc14>
    80009f8e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f90:	0016f713          	andi	a4,a3,1
    80009f94:	fb55                	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f96:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f9a:	460d                	li	a2,3
    80009f9c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fa0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fa2:	00c59763          	bne	a1,a2,80009fb0 <tinst_tests_pf+0x20e4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fa6:	0026d683          	lhu	a3,2(a3)
    80009faa:	0106969b          	slliw	a3,a3,0x10
    80009fae:	8f55                	or	a4,a4,a3
    80009fb0:	1ffe16b7          	lui	a3,0x1ffe1
    80009fb4:	068e                	slli	a3,a3,0x3
    80009fb6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009fb8:	8f75                	and	a4,a4,a3
    80009fba:	00024597          	auipc	a1,0x24
    80009fbe:	1ee58593          	addi	a1,a1,494 # 8002e1a8 <__func__.0+0x2c0>
    80009fc2:	00e79463          	bne	a5,a4,80009fca <tinst_tests_pf+0x20fe>
    80009fc6:	b1bfe06f          	j	80008ae0 <tinst_tests_pf+0xc14>
    80009fca:	00024597          	auipc	a1,0x24
    80009fce:	1ee58593          	addi	a1,a1,494 # 8002e1b8 <__func__.0+0x2d0>
    80009fd2:	b0ffe06f          	j	80008ae0 <tinst_tests_pf+0xc14>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009fd6:	701c                	ld	a5,32(s0)
    80009fd8:	e399                	bnez	a5,80009fde <tinst_tests_pf+0x2112>
    80009fda:	97cfe06f          	j	80008156 <tinst_tests_pf+0x28a>
    80009fde:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fe0:	0016f713          	andi	a4,a3,1
    80009fe4:	f335                	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009fe6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fea:	460d                	li	a2,3
    80009fec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ff0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ff2:	00c59763          	bne	a1,a2,8000a000 <tinst_tests_pf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ff6:	0026d683          	lhu	a3,2(a3)
    80009ffa:	0106969b          	slliw	a3,a3,0x10
    80009ffe:	8f55                	or	a4,a4,a3
    8000a000:	1746                	slli	a4,a4,0x31
    8000a002:	9345                	srli	a4,a4,0x31
    8000a004:	00e78463          	beq	a5,a4,8000a00c <tinst_tests_pf+0x2140>
    8000a008:	93afe06f          	j	80008142 <tinst_tests_pf+0x276>
    8000a00c:	94afe06f          	j	80008156 <tinst_tests_pf+0x28a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a010:	701c                	ld	a5,32(s0)
    8000a012:	00024597          	auipc	a1,0x24
    8000a016:	19658593          	addi	a1,a1,406 # 8002e1a8 <__func__.0+0x2c0>
    8000a01a:	e399                	bnez	a5,8000a020 <tinst_tests_pf+0x2154>
    8000a01c:	b65fe06f          	j	80008b80 <tinst_tests_pf+0xcb4>
    8000a020:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a022:	0016f713          	andi	a4,a3,1
    8000a026:	f30d                	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a028:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a02c:	460d                	li	a2,3
    8000a02e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a032:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a034:	00c59763          	bne	a1,a2,8000a042 <tinst_tests_pf+0x2176>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a038:	0026d683          	lhu	a3,2(a3)
    8000a03c:	0106969b          	slliw	a3,a3,0x10
    8000a040:	8f55                	or	a4,a4,a3
    8000a042:	1ffe16b7          	lui	a3,0x1ffe1
    8000a046:	068e                	slli	a3,a3,0x3
    8000a048:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a04a:	8f75                	and	a4,a4,a3
    8000a04c:	00024597          	auipc	a1,0x24
    8000a050:	15c58593          	addi	a1,a1,348 # 8002e1a8 <__func__.0+0x2c0>
    8000a054:	00e79463          	bne	a5,a4,8000a05c <tinst_tests_pf+0x2190>
    8000a058:	b29fe06f          	j	80008b80 <tinst_tests_pf+0xcb4>
    8000a05c:	00024597          	auipc	a1,0x24
    8000a060:	15c58593          	addi	a1,a1,348 # 8002e1b8 <__func__.0+0x2d0>
    8000a064:	b1dfe06f          	j	80008b80 <tinst_tests_pf+0xcb4>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a068:	701c                	ld	a5,32(s0)
    8000a06a:	e399                	bnez	a5,8000a070 <tinst_tests_pf+0x21a4>
    8000a06c:	98afe06f          	j	800081f6 <tinst_tests_pf+0x32a>
    8000a070:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a072:	0016f713          	andi	a4,a3,1
    8000a076:	ec0719e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a07a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a07e:	460d                	li	a2,3
    8000a080:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a084:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a086:	00c59763          	bne	a1,a2,8000a094 <tinst_tests_pf+0x21c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a08a:	0026d683          	lhu	a3,2(a3)
    8000a08e:	0106969b          	slliw	a3,a3,0x10
    8000a092:	8f55                	or	a4,a4,a3
    8000a094:	1746                	slli	a4,a4,0x31
    8000a096:	9345                	srli	a4,a4,0x31
    8000a098:	00e78463          	beq	a5,a4,8000a0a0 <tinst_tests_pf+0x21d4>
    8000a09c:	946fe06f          	j	800081e2 <tinst_tests_pf+0x316>
    8000a0a0:	956fe06f          	j	800081f6 <tinst_tests_pf+0x32a>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a0a4:	701c                	ld	a5,32(s0)
    8000a0a6:	00024597          	auipc	a1,0x24
    8000a0aa:	10258593          	addi	a1,a1,258 # 8002e1a8 <__func__.0+0x2c0>
    8000a0ae:	e399                	bnez	a5,8000a0b4 <tinst_tests_pf+0x21e8>
    8000a0b0:	b71fe06f          	j	80008c20 <tinst_tests_pf+0xd54>
    8000a0b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0b6:	0016f713          	andi	a4,a3,1
    8000a0ba:	e80717e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0c2:	460d                	li	a2,3
    8000a0c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0ca:	00c59763          	bne	a1,a2,8000a0d8 <tinst_tests_pf+0x220c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0ce:	0026d683          	lhu	a3,2(a3)
    8000a0d2:	0106969b          	slliw	a3,a3,0x10
    8000a0d6:	8f55                	or	a4,a4,a3
    8000a0d8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0dc:	068e                	slli	a3,a3,0x3
    8000a0de:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0e0:	8f75                	and	a4,a4,a3
    8000a0e2:	00024597          	auipc	a1,0x24
    8000a0e6:	0c658593          	addi	a1,a1,198 # 8002e1a8 <__func__.0+0x2c0>
    8000a0ea:	00e79463          	bne	a5,a4,8000a0f2 <tinst_tests_pf+0x2226>
    8000a0ee:	b33fe06f          	j	80008c20 <tinst_tests_pf+0xd54>
    8000a0f2:	00024597          	auipc	a1,0x24
    8000a0f6:	0c658593          	addi	a1,a1,198 # 8002e1b8 <__func__.0+0x2d0>
    8000a0fa:	b27fe06f          	j	80008c20 <tinst_tests_pf+0xd54>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a0fe:	701c                	ld	a5,32(s0)
    8000a100:	e399                	bnez	a5,8000a106 <tinst_tests_pf+0x223a>
    8000a102:	98cfe06f          	j	8000828e <tinst_tests_pf+0x3c2>
    8000a106:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a108:	0016f713          	andi	a4,a3,1
    8000a10c:	e2071ee3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a110:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a114:	460d                	li	a2,3
    8000a116:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a11a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a11c:	00c59763          	bne	a1,a2,8000a12a <tinst_tests_pf+0x225e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a120:	0026d683          	lhu	a3,2(a3)
    8000a124:	0106969b          	slliw	a3,a3,0x10
    8000a128:	8f55                	or	a4,a4,a3
    8000a12a:	1746                	slli	a4,a4,0x31
    8000a12c:	9345                	srli	a4,a4,0x31
    8000a12e:	00e78463          	beq	a5,a4,8000a136 <tinst_tests_pf+0x226a>
    8000a132:	948fe06f          	j	8000827a <tinst_tests_pf+0x3ae>
    8000a136:	958fe06f          	j	8000828e <tinst_tests_pf+0x3c2>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a13a:	701c                	ld	a5,32(s0)
    8000a13c:	00024597          	auipc	a1,0x24
    8000a140:	06c58593          	addi	a1,a1,108 # 8002e1a8 <__func__.0+0x2c0>
    8000a144:	e399                	bnez	a5,8000a14a <tinst_tests_pf+0x227e>
    8000a146:	b7bfe06f          	j	80008cc0 <tinst_tests_pf+0xdf4>
    8000a14a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a14c:	0016f713          	andi	a4,a3,1
    8000a150:	de071ce3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a154:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a158:	460d                	li	a2,3
    8000a15a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a15e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a160:	00c59763          	bne	a1,a2,8000a16e <tinst_tests_pf+0x22a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a164:	0026d683          	lhu	a3,2(a3)
    8000a168:	0106969b          	slliw	a3,a3,0x10
    8000a16c:	8f55                	or	a4,a4,a3
    8000a16e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a172:	068e                	slli	a3,a3,0x3
    8000a174:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a176:	8f75                	and	a4,a4,a3
    8000a178:	00024597          	auipc	a1,0x24
    8000a17c:	03058593          	addi	a1,a1,48 # 8002e1a8 <__func__.0+0x2c0>
    8000a180:	00e79463          	bne	a5,a4,8000a188 <tinst_tests_pf+0x22bc>
    8000a184:	b3dfe06f          	j	80008cc0 <tinst_tests_pf+0xdf4>
    8000a188:	00024597          	auipc	a1,0x24
    8000a18c:	03058593          	addi	a1,a1,48 # 8002e1b8 <__func__.0+0x2d0>
    8000a190:	b31fe06f          	j	80008cc0 <tinst_tests_pf+0xdf4>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a194:	701c                	ld	a5,32(s0)
    8000a196:	e399                	bnez	a5,8000a19c <tinst_tests_pf+0x22d0>
    8000a198:	98efe06f          	j	80008326 <tinst_tests_pf+0x45a>
    8000a19c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a19e:	0016f713          	andi	a4,a3,1
    8000a1a2:	da0713e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1aa:	460d                	li	a2,3
    8000a1ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1b2:	00c59763          	bne	a1,a2,8000a1c0 <tinst_tests_pf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1b6:	0026d683          	lhu	a3,2(a3)
    8000a1ba:	0106969b          	slliw	a3,a3,0x10
    8000a1be:	8f55                	or	a4,a4,a3
    8000a1c0:	1746                	slli	a4,a4,0x31
    8000a1c2:	9345                	srli	a4,a4,0x31
    8000a1c4:	00e78463          	beq	a5,a4,8000a1cc <tinst_tests_pf+0x2300>
    8000a1c8:	94afe06f          	j	80008312 <tinst_tests_pf+0x446>
    8000a1cc:	95afe06f          	j	80008326 <tinst_tests_pf+0x45a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a1d0:	701c                	ld	a5,32(s0)
    8000a1d2:	00024597          	auipc	a1,0x24
    8000a1d6:	fd658593          	addi	a1,a1,-42 # 8002e1a8 <__func__.0+0x2c0>
    8000a1da:	e399                	bnez	a5,8000a1e0 <tinst_tests_pf+0x2314>
    8000a1dc:	b85fe06f          	j	80008d60 <tinst_tests_pf+0xe94>
    8000a1e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1e2:	0016f713          	andi	a4,a3,1
    8000a1e6:	d60711e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1ee:	460d                	li	a2,3
    8000a1f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1f6:	00c59763          	bne	a1,a2,8000a204 <tinst_tests_pf+0x2338>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1fa:	0026d683          	lhu	a3,2(a3)
    8000a1fe:	0106969b          	slliw	a3,a3,0x10
    8000a202:	8f55                	or	a4,a4,a3
    8000a204:	1ffe16b7          	lui	a3,0x1ffe1
    8000a208:	068e                	slli	a3,a3,0x3
    8000a20a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a20c:	8f75                	and	a4,a4,a3
    8000a20e:	00024597          	auipc	a1,0x24
    8000a212:	f9a58593          	addi	a1,a1,-102 # 8002e1a8 <__func__.0+0x2c0>
    8000a216:	00e79463          	bne	a5,a4,8000a21e <tinst_tests_pf+0x2352>
    8000a21a:	b47fe06f          	j	80008d60 <tinst_tests_pf+0xe94>
    8000a21e:	00024597          	auipc	a1,0x24
    8000a222:	f9a58593          	addi	a1,a1,-102 # 8002e1b8 <__func__.0+0x2d0>
    8000a226:	b3bfe06f          	j	80008d60 <tinst_tests_pf+0xe94>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a22a:	701c                	ld	a5,32(s0)
    8000a22c:	e399                	bnez	a5,8000a232 <tinst_tests_pf+0x2366>
    8000a22e:	992fe06f          	j	800083c0 <tinst_tests_pf+0x4f4>
    8000a232:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a234:	0016f713          	andi	a4,a3,1
    8000a238:	d00718e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a23c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a240:	460d                	li	a2,3
    8000a242:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a246:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a248:	00c59763          	bne	a1,a2,8000a256 <tinst_tests_pf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a24c:	0026d683          	lhu	a3,2(a3)
    8000a250:	0106969b          	slliw	a3,a3,0x10
    8000a254:	8f55                	or	a4,a4,a3
    8000a256:	01f076b7          	lui	a3,0x1f07
    8000a25a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a25e:	8f75                	and	a4,a4,a3
    8000a260:	00e78463          	beq	a5,a4,8000a268 <tinst_tests_pf+0x239c>
    8000a264:	948fe06f          	j	800083ac <tinst_tests_pf+0x4e0>
    8000a268:	958fe06f          	j	800083c0 <tinst_tests_pf+0x4f4>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a26c:	701c                	ld	a5,32(s0)
    8000a26e:	00024597          	auipc	a1,0x24
    8000a272:	f3a58593          	addi	a1,a1,-198 # 8002e1a8 <__func__.0+0x2c0>
    8000a276:	e399                	bnez	a5,8000a27c <tinst_tests_pf+0x23b0>
    8000a278:	b89fe06f          	j	80008e00 <tinst_tests_pf+0xf34>
    8000a27c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a27e:	0016f713          	andi	a4,a3,1
    8000a282:	cc0713e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a286:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a28a:	460d                	li	a2,3
    8000a28c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a290:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a292:	00c59763          	bne	a1,a2,8000a2a0 <tinst_tests_pf+0x23d4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a296:	0026d683          	lhu	a3,2(a3)
    8000a29a:	0106969b          	slliw	a3,a3,0x10
    8000a29e:	8f55                	or	a4,a4,a3
    8000a2a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a2a4:	068e                	slli	a3,a3,0x3
    8000a2a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a2a8:	8f75                	and	a4,a4,a3
    8000a2aa:	00024597          	auipc	a1,0x24
    8000a2ae:	efe58593          	addi	a1,a1,-258 # 8002e1a8 <__func__.0+0x2c0>
    8000a2b2:	00e79463          	bne	a5,a4,8000a2ba <tinst_tests_pf+0x23ee>
    8000a2b6:	b4bfe06f          	j	80008e00 <tinst_tests_pf+0xf34>
    8000a2ba:	00024597          	auipc	a1,0x24
    8000a2be:	efe58593          	addi	a1,a1,-258 # 8002e1b8 <__func__.0+0x2d0>
    8000a2c2:	b3ffe06f          	j	80008e00 <tinst_tests_pf+0xf34>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a2c6:	701c                	ld	a5,32(s0)
    8000a2c8:	e399                	bnez	a5,8000a2ce <tinst_tests_pf+0x2402>
    8000a2ca:	994fe06f          	j	8000845e <tinst_tests_pf+0x592>
    8000a2ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2d0:	0016f713          	andi	a4,a3,1
    8000a2d4:	c6071ae3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a2d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2dc:	460d                	li	a2,3
    8000a2de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2e4:	00c59763          	bne	a1,a2,8000a2f2 <tinst_tests_pf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2e8:	0026d683          	lhu	a3,2(a3)
    8000a2ec:	0106969b          	slliw	a3,a3,0x10
    8000a2f0:	8f55                	or	a4,a4,a3
    8000a2f2:	01f076b7          	lui	a3,0x1f07
    8000a2f6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a2fa:	8f75                	and	a4,a4,a3
    8000a2fc:	00e78463          	beq	a5,a4,8000a304 <tinst_tests_pf+0x2438>
    8000a300:	94afe06f          	j	8000844a <tinst_tests_pf+0x57e>
    8000a304:	95afe06f          	j	8000845e <tinst_tests_pf+0x592>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a308:	701c                	ld	a5,32(s0)
    8000a30a:	00024597          	auipc	a1,0x24
    8000a30e:	e9e58593          	addi	a1,a1,-354 # 8002e1a8 <__func__.0+0x2c0>
    8000a312:	e399                	bnez	a5,8000a318 <tinst_tests_pf+0x244c>
    8000a314:	b91fe06f          	j	80008ea4 <tinst_tests_pf+0xfd8>
    8000a318:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a31a:	0016f713          	andi	a4,a3,1
    8000a31e:	c20715e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a322:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a326:	460d                	li	a2,3
    8000a328:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a32c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a32e:	00c59763          	bne	a1,a2,8000a33c <tinst_tests_pf+0x2470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a332:	0026d683          	lhu	a3,2(a3)
    8000a336:	0106969b          	slliw	a3,a3,0x10
    8000a33a:	8f55                	or	a4,a4,a3
    8000a33c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a340:	068e                	slli	a3,a3,0x3
    8000a342:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a344:	8f75                	and	a4,a4,a3
    8000a346:	00024597          	auipc	a1,0x24
    8000a34a:	e6258593          	addi	a1,a1,-414 # 8002e1a8 <__func__.0+0x2c0>
    8000a34e:	00e79463          	bne	a5,a4,8000a356 <tinst_tests_pf+0x248a>
    8000a352:	b53fe06f          	j	80008ea4 <tinst_tests_pf+0xfd8>
    8000a356:	00024597          	auipc	a1,0x24
    8000a35a:	e6258593          	addi	a1,a1,-414 # 8002e1b8 <__func__.0+0x2d0>
    8000a35e:	b47fe06f          	j	80008ea4 <tinst_tests_pf+0xfd8>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a362:	701c                	ld	a5,32(s0)
    8000a364:	e399                	bnez	a5,8000a36a <tinst_tests_pf+0x249e>
    8000a366:	998fe06f          	j	800084fe <tinst_tests_pf+0x632>
    8000a36a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a36c:	0016f713          	andi	a4,a3,1
    8000a370:	bc071ce3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a374:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a378:	460d                	li	a2,3
    8000a37a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a37e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a380:	00c59763          	bne	a1,a2,8000a38e <tinst_tests_pf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a384:	0026d683          	lhu	a3,2(a3)
    8000a388:	0106969b          	slliw	a3,a3,0x10
    8000a38c:	8f55                	or	a4,a4,a3
    8000a38e:	01f076b7          	lui	a3,0x1f07
    8000a392:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a396:	8f75                	and	a4,a4,a3
    8000a398:	00e78463          	beq	a5,a4,8000a3a0 <tinst_tests_pf+0x24d4>
    8000a39c:	94efe06f          	j	800084ea <tinst_tests_pf+0x61e>
    8000a3a0:	95efe06f          	j	800084fe <tinst_tests_pf+0x632>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a3a4:	701c                	ld	a5,32(s0)
    8000a3a6:	00024597          	auipc	a1,0x24
    8000a3aa:	e0258593          	addi	a1,a1,-510 # 8002e1a8 <__func__.0+0x2c0>
    8000a3ae:	e399                	bnez	a5,8000a3b4 <tinst_tests_pf+0x24e8>
    8000a3b0:	b95fe06f          	j	80008f44 <tinst_tests_pf+0x1078>
    8000a3b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3b6:	0016f713          	andi	a4,a3,1
    8000a3ba:	b80717e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3c2:	460d                	li	a2,3
    8000a3c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3ca:	00c59763          	bne	a1,a2,8000a3d8 <tinst_tests_pf+0x250c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3ce:	0026d683          	lhu	a3,2(a3)
    8000a3d2:	0106969b          	slliw	a3,a3,0x10
    8000a3d6:	8f55                	or	a4,a4,a3
    8000a3d8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3dc:	068e                	slli	a3,a3,0x3
    8000a3de:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3e0:	8f75                	and	a4,a4,a3
    8000a3e2:	00024597          	auipc	a1,0x24
    8000a3e6:	dc658593          	addi	a1,a1,-570 # 8002e1a8 <__func__.0+0x2c0>
    8000a3ea:	00e79463          	bne	a5,a4,8000a3f2 <tinst_tests_pf+0x2526>
    8000a3ee:	b57fe06f          	j	80008f44 <tinst_tests_pf+0x1078>
    8000a3f2:	00024597          	auipc	a1,0x24
    8000a3f6:	dc658593          	addi	a1,a1,-570 # 8002e1b8 <__func__.0+0x2d0>
    8000a3fa:	b4bfe06f          	j	80008f44 <tinst_tests_pf+0x1078>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a3fe:	701c                	ld	a5,32(s0)
    8000a400:	e399                	bnez	a5,8000a406 <tinst_tests_pf+0x253a>
    8000a402:	99efe06f          	j	800085a0 <tinst_tests_pf+0x6d4>
    8000a406:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a408:	0016f713          	andi	a4,a3,1
    8000a40c:	b2071ee3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a410:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a414:	460d                	li	a2,3
    8000a416:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a41a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a41c:	00c59763          	bne	a1,a2,8000a42a <tinst_tests_pf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a420:	0026d683          	lhu	a3,2(a3)
    8000a424:	0106969b          	slliw	a3,a3,0x10
    8000a428:	8f55                	or	a4,a4,a3
    8000a42a:	01f076b7          	lui	a3,0x1f07
    8000a42e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a432:	8f75                	and	a4,a4,a3
    8000a434:	00e78463          	beq	a5,a4,8000a43c <tinst_tests_pf+0x2570>
    8000a438:	954fe06f          	j	8000858c <tinst_tests_pf+0x6c0>
    8000a43c:	964fe06f          	j	800085a0 <tinst_tests_pf+0x6d4>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a440:	701c                	ld	a5,32(s0)
    8000a442:	00024597          	auipc	a1,0x24
    8000a446:	d6658593          	addi	a1,a1,-666 # 8002e1a8 <__func__.0+0x2c0>
    8000a44a:	e399                	bnez	a5,8000a450 <tinst_tests_pf+0x2584>
    8000a44c:	b99fe06f          	j	80008fe4 <tinst_tests_pf+0x1118>
    8000a450:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a452:	0016f713          	andi	a4,a3,1
    8000a456:	ae0719e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a45a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a45e:	460d                	li	a2,3
    8000a460:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a464:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a466:	00c59763          	bne	a1,a2,8000a474 <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a46a:	0026d683          	lhu	a3,2(a3)
    8000a46e:	0106969b          	slliw	a3,a3,0x10
    8000a472:	8f55                	or	a4,a4,a3
    8000a474:	1ffe16b7          	lui	a3,0x1ffe1
    8000a478:	068e                	slli	a3,a3,0x3
    8000a47a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a47c:	8f75                	and	a4,a4,a3
    8000a47e:	00024597          	auipc	a1,0x24
    8000a482:	d2a58593          	addi	a1,a1,-726 # 8002e1a8 <__func__.0+0x2c0>
    8000a486:	00e79463          	bne	a5,a4,8000a48e <tinst_tests_pf+0x25c2>
    8000a48a:	b5bfe06f          	j	80008fe4 <tinst_tests_pf+0x1118>
    8000a48e:	00024597          	auipc	a1,0x24
    8000a492:	d2a58593          	addi	a1,a1,-726 # 8002e1b8 <__func__.0+0x2d0>
    8000a496:	b4ffe06f          	j	80008fe4 <tinst_tests_pf+0x1118>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a49a:	7004                	ld	s1,32(s0)
    8000a49c:	e099                	bnez	s1,8000a4a2 <tinst_tests_pf+0x25d6>
    8000a49e:	994fe06f          	j	80008632 <tinst_tests_pf+0x766>
    8000a4a2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a4a4:	0017f713          	andi	a4,a5,1
    8000a4a8:	aa0710e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4ac:	0007d503          	lhu	a0,0(a5)
    8000a4b0:	a90f70ef          	jal	80001740 <expand_compressed_instruction>
    8000a4b4:	67a1                	lui	a5,0x8
    8000a4b6:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a4b8:	8d7d                	and	a0,a0,a5
    8000a4ba:	00a48463          	beq	s1,a0,8000a4c2 <tinst_tests_pf+0x25f6>
    8000a4be:	960fe06f          	j	8000861e <tinst_tests_pf+0x752>
    8000a4c2:	970fe06f          	j	80008632 <tinst_tests_pf+0x766>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a4c6:	701c                	ld	a5,32(s0)
    8000a4c8:	00024597          	auipc	a1,0x24
    8000a4cc:	ce058593          	addi	a1,a1,-800 # 8002e1a8 <__func__.0+0x2c0>
    8000a4d0:	e399                	bnez	a5,8000a4d6 <tinst_tests_pf+0x260a>
    8000a4d2:	bb3fe06f          	j	80009084 <tinst_tests_pf+0x11b8>
    8000a4d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4d8:	0016f713          	andi	a4,a3,1
    8000a4dc:	a60716e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4e4:	460d                	li	a2,3
    8000a4e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4ec:	00c59763          	bne	a1,a2,8000a4fa <tinst_tests_pf+0x262e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4f0:	0026d683          	lhu	a3,2(a3)
    8000a4f4:	0106969b          	slliw	a3,a3,0x10
    8000a4f8:	8f55                	or	a4,a4,a3
    8000a4fa:	1ffe16b7          	lui	a3,0x1ffe1
    8000a4fe:	068e                	slli	a3,a3,0x3
    8000a500:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a502:	8f75                	and	a4,a4,a3
    8000a504:	00024597          	auipc	a1,0x24
    8000a508:	ca458593          	addi	a1,a1,-860 # 8002e1a8 <__func__.0+0x2c0>
    8000a50c:	00e79463          	bne	a5,a4,8000a514 <tinst_tests_pf+0x2648>
    8000a510:	b75fe06f          	j	80009084 <tinst_tests_pf+0x11b8>
    8000a514:	00024597          	auipc	a1,0x24
    8000a518:	ca458593          	addi	a1,a1,-860 # 8002e1b8 <__func__.0+0x2d0>
    8000a51c:	b69fe06f          	j	80009084 <tinst_tests_pf+0x11b8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a520:	02043983          	ld	s3,32(s0)
    8000a524:	00099463          	bnez	s3,8000a52c <tinst_tests_pf+0x2660>
    8000a528:	99efe06f          	j	800086c6 <tinst_tests_pf+0x7fa>
    8000a52c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a52e:	0017f713          	andi	a4,a5,1
    8000a532:	a0071be3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a536:	0007d503          	lhu	a0,0(a5)
    8000a53a:	a06f70ef          	jal	80001740 <expand_compressed_instruction>
    8000a53e:	67a1                	lui	a5,0x8
    8000a540:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a542:	8d7d                	and	a0,a0,a5
    8000a544:	00a98463          	beq	s3,a0,8000a54c <tinst_tests_pf+0x2680>
    8000a548:	96afe06f          	j	800086b2 <tinst_tests_pf+0x7e6>
    8000a54c:	97afe06f          	j	800086c6 <tinst_tests_pf+0x7fa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a550:	701c                	ld	a5,32(s0)
    8000a552:	00024597          	auipc	a1,0x24
    8000a556:	c5658593          	addi	a1,a1,-938 # 8002e1a8 <__func__.0+0x2c0>
    8000a55a:	e399                	bnez	a5,8000a560 <tinst_tests_pf+0x2694>
    8000a55c:	bc9fe06f          	j	80009124 <tinst_tests_pf+0x1258>
    8000a560:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a562:	0016f713          	andi	a4,a3,1
    8000a566:	9e0711e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a56a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a56e:	460d                	li	a2,3
    8000a570:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a574:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a576:	00c59763          	bne	a1,a2,8000a584 <tinst_tests_pf+0x26b8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a57a:	0026d683          	lhu	a3,2(a3)
    8000a57e:	0106969b          	slliw	a3,a3,0x10
    8000a582:	8f55                	or	a4,a4,a3
    8000a584:	1ffe16b7          	lui	a3,0x1ffe1
    8000a588:	068e                	slli	a3,a3,0x3
    8000a58a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a58c:	8f75                	and	a4,a4,a3
    8000a58e:	00024597          	auipc	a1,0x24
    8000a592:	c1a58593          	addi	a1,a1,-998 # 8002e1a8 <__func__.0+0x2c0>
    8000a596:	00e79463          	bne	a5,a4,8000a59e <tinst_tests_pf+0x26d2>
    8000a59a:	b8bfe06f          	j	80009124 <tinst_tests_pf+0x1258>
    8000a59e:	00024597          	auipc	a1,0x24
    8000a5a2:	c1a58593          	addi	a1,a1,-998 # 8002e1b8 <__func__.0+0x2d0>
    8000a5a6:	b7ffe06f          	j	80009124 <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a5aa:	02043983          	ld	s3,32(s0)
    8000a5ae:	00099463          	bnez	s3,8000a5b6 <tinst_tests_pf+0x26ea>
    8000a5b2:	9a8fe06f          	j	8000875a <tinst_tests_pf+0x88e>
    8000a5b6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a5b8:	0017f713          	andi	a4,a5,1
    8000a5bc:	980716e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5c0:	0007d503          	lhu	a0,0(a5)
    8000a5c4:	97cf70ef          	jal	80001740 <expand_compressed_instruction>
    8000a5c8:	01f077b7          	lui	a5,0x1f07
    8000a5cc:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a5d0:	8d7d                	and	a0,a0,a5
    8000a5d2:	00a98463          	beq	s3,a0,8000a5da <tinst_tests_pf+0x270e>
    8000a5d6:	970fe06f          	j	80008746 <tinst_tests_pf+0x87a>
    8000a5da:	980fe06f          	j	8000875a <tinst_tests_pf+0x88e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a5de:	701c                	ld	a5,32(s0)
    8000a5e0:	00024597          	auipc	a1,0x24
    8000a5e4:	bc858593          	addi	a1,a1,-1080 # 8002e1a8 <__func__.0+0x2c0>
    8000a5e8:	e399                	bnez	a5,8000a5ee <tinst_tests_pf+0x2722>
    8000a5ea:	bdbfe06f          	j	800091c4 <tinst_tests_pf+0x12f8>
    8000a5ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5f0:	0016f713          	andi	a4,a3,1
    8000a5f4:	94071ae3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5fc:	460d                	li	a2,3
    8000a5fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a602:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a604:	00c59763          	bne	a1,a2,8000a612 <tinst_tests_pf+0x2746>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a608:	0026d683          	lhu	a3,2(a3)
    8000a60c:	0106969b          	slliw	a3,a3,0x10
    8000a610:	8f55                	or	a4,a4,a3
    8000a612:	1ffe16b7          	lui	a3,0x1ffe1
    8000a616:	068e                	slli	a3,a3,0x3
    8000a618:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a61a:	8f75                	and	a4,a4,a3
    8000a61c:	00024597          	auipc	a1,0x24
    8000a620:	b8c58593          	addi	a1,a1,-1140 # 8002e1a8 <__func__.0+0x2c0>
    8000a624:	00e79463          	bne	a5,a4,8000a62c <tinst_tests_pf+0x2760>
    8000a628:	b9dfe06f          	j	800091c4 <tinst_tests_pf+0x12f8>
    8000a62c:	00024597          	auipc	a1,0x24
    8000a630:	b8c58593          	addi	a1,a1,-1140 # 8002e1b8 <__func__.0+0x2d0>
    8000a634:	b91fe06f          	j	800091c4 <tinst_tests_pf+0x12f8>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a638:	7004                	ld	s1,32(s0)
    8000a63a:	e099                	bnez	s1,8000a640 <tinst_tests_pf+0x2774>
    8000a63c:	9bafe06f          	j	800087f6 <tinst_tests_pf+0x92a>
    8000a640:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a642:	0017f713          	andi	a4,a5,1
    8000a646:	900711e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a64a:	0007d503          	lhu	a0,0(a5)
    8000a64e:	8f2f70ef          	jal	80001740 <expand_compressed_instruction>
    8000a652:	01f077b7          	lui	a5,0x1f07
    8000a656:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a65a:	8d7d                	and	a0,a0,a5
    8000a65c:	00a48463          	beq	s1,a0,8000a664 <tinst_tests_pf+0x2798>
    8000a660:	982fe06f          	j	800087e2 <tinst_tests_pf+0x916>
    8000a664:	992fe06f          	j	800087f6 <tinst_tests_pf+0x92a>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a668:	701c                	ld	a5,32(s0)
    8000a66a:	00024597          	auipc	a1,0x24
    8000a66e:	b3e58593          	addi	a1,a1,-1218 # 8002e1a8 <__func__.0+0x2c0>
    8000a672:	e399                	bnez	a5,8000a678 <tinst_tests_pf+0x27ac>
    8000a674:	be9fe06f          	j	8000925c <tinst_tests_pf+0x1390>
    8000a678:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a67a:	0016f713          	andi	a4,a3,1
    8000a67e:	8c0715e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a682:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a686:	460d                	li	a2,3
    8000a688:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a68c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a68e:	00c59763          	bne	a1,a2,8000a69c <tinst_tests_pf+0x27d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a692:	0026d683          	lhu	a3,2(a3)
    8000a696:	0106969b          	slliw	a3,a3,0x10
    8000a69a:	8f55                	or	a4,a4,a3
    8000a69c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6a0:	068e                	slli	a3,a3,0x3
    8000a6a2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6a4:	8f75                	and	a4,a4,a3
    8000a6a6:	00024597          	auipc	a1,0x24
    8000a6aa:	b0258593          	addi	a1,a1,-1278 # 8002e1a8 <__func__.0+0x2c0>
    8000a6ae:	00e79463          	bne	a5,a4,8000a6b6 <tinst_tests_pf+0x27ea>
    8000a6b2:	babfe06f          	j	8000925c <tinst_tests_pf+0x1390>
    8000a6b6:	00024597          	auipc	a1,0x24
    8000a6ba:	b0258593          	addi	a1,a1,-1278 # 8002e1b8 <__func__.0+0x2d0>
    8000a6be:	b9ffe06f          	j	8000925c <tinst_tests_pf+0x1390>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a6c2:	701c                	ld	a5,32(s0)
    8000a6c4:	00024597          	auipc	a1,0x24
    8000a6c8:	ae458593          	addi	a1,a1,-1308 # 8002e1a8 <__func__.0+0x2c0>
    8000a6cc:	e399                	bnez	a5,8000a6d2 <tinst_tests_pf+0x2806>
    8000a6ce:	c27fe06f          	j	800092f4 <tinst_tests_pf+0x1428>
    8000a6d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6d4:	0016f713          	andi	a4,a3,1
    8000a6d8:	860718e3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6e0:	460d                	li	a2,3
    8000a6e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6e8:	00c59763          	bne	a1,a2,8000a6f6 <tinst_tests_pf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6ec:	0026d683          	lhu	a3,2(a3)
    8000a6f0:	0106969b          	slliw	a3,a3,0x10
    8000a6f4:	8f55                	or	a4,a4,a3
    8000a6f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6fa:	068e                	slli	a3,a3,0x3
    8000a6fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6fe:	8f75                	and	a4,a4,a3
    8000a700:	00024597          	auipc	a1,0x24
    8000a704:	aa858593          	addi	a1,a1,-1368 # 8002e1a8 <__func__.0+0x2c0>
    8000a708:	00e79463          	bne	a5,a4,8000a710 <tinst_tests_pf+0x2844>
    8000a70c:	be9fe06f          	j	800092f4 <tinst_tests_pf+0x1428>
    8000a710:	00024597          	auipc	a1,0x24
    8000a714:	aa858593          	addi	a1,a1,-1368 # 8002e1b8 <__func__.0+0x2d0>
    8000a718:	bddfe06f          	j	800092f4 <tinst_tests_pf+0x1428>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a71c:	701c                	ld	a5,32(s0)
    8000a71e:	00024597          	auipc	a1,0x24
    8000a722:	a8a58593          	addi	a1,a1,-1398 # 8002e1a8 <__func__.0+0x2c0>
    8000a726:	e399                	bnez	a5,8000a72c <tinst_tests_pf+0x2860>
    8000a728:	c65fe06f          	j	8000938c <tinst_tests_pf+0x14c0>
    8000a72c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a72e:	0016f713          	andi	a4,a3,1
    8000a732:	80071be3          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a736:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a73a:	460d                	li	a2,3
    8000a73c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a740:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a742:	00c59763          	bne	a1,a2,8000a750 <tinst_tests_pf+0x2884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a746:	0026d683          	lhu	a3,2(a3)
    8000a74a:	0106969b          	slliw	a3,a3,0x10
    8000a74e:	8f55                	or	a4,a4,a3
    8000a750:	1ffe16b7          	lui	a3,0x1ffe1
    8000a754:	068e                	slli	a3,a3,0x3
    8000a756:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a758:	8f75                	and	a4,a4,a3
    8000a75a:	00024597          	auipc	a1,0x24
    8000a75e:	a4e58593          	addi	a1,a1,-1458 # 8002e1a8 <__func__.0+0x2c0>
    8000a762:	00e79463          	bne	a5,a4,8000a76a <tinst_tests_pf+0x289e>
    8000a766:	c27fe06f          	j	8000938c <tinst_tests_pf+0x14c0>
    8000a76a:	00024597          	auipc	a1,0x24
    8000a76e:	a4e58593          	addi	a1,a1,-1458 # 8002e1b8 <__func__.0+0x2d0>
    8000a772:	c1bfe06f          	j	8000938c <tinst_tests_pf+0x14c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a776:	701c                	ld	a5,32(s0)
    8000a778:	00024597          	auipc	a1,0x24
    8000a77c:	a3058593          	addi	a1,a1,-1488 # 8002e1a8 <__func__.0+0x2c0>
    8000a780:	e399                	bnez	a5,8000a786 <tinst_tests_pf+0x28ba>
    8000a782:	ca3fe06f          	j	80009424 <tinst_tests_pf+0x1558>
    8000a786:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a788:	0016f713          	andi	a4,a3,1
    8000a78c:	fa071e63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a790:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a794:	460d                	li	a2,3
    8000a796:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a79a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a79c:	00c59763          	bne	a1,a2,8000a7aa <tinst_tests_pf+0x28de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7a0:	0026d683          	lhu	a3,2(a3)
    8000a7a4:	0106969b          	slliw	a3,a3,0x10
    8000a7a8:	8f55                	or	a4,a4,a3
    8000a7aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7ae:	068e                	slli	a3,a3,0x3
    8000a7b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7b2:	8f75                	and	a4,a4,a3
    8000a7b4:	00024597          	auipc	a1,0x24
    8000a7b8:	9f458593          	addi	a1,a1,-1548 # 8002e1a8 <__func__.0+0x2c0>
    8000a7bc:	00e79463          	bne	a5,a4,8000a7c4 <tinst_tests_pf+0x28f8>
    8000a7c0:	c65fe06f          	j	80009424 <tinst_tests_pf+0x1558>
    8000a7c4:	00024597          	auipc	a1,0x24
    8000a7c8:	9f458593          	addi	a1,a1,-1548 # 8002e1b8 <__func__.0+0x2d0>
    8000a7cc:	c59fe06f          	j	80009424 <tinst_tests_pf+0x1558>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a7d0:	701c                	ld	a5,32(s0)
    8000a7d2:	e399                	bnez	a5,8000a7d8 <tinst_tests_pf+0x290c>
    8000a7d4:	aa2fe06f          	j	80008a76 <tinst_tests_pf+0xbaa>
    8000a7d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7da:	0016f713          	andi	a4,a3,1
    8000a7de:	f6071563          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7e6:	460d                	li	a2,3
    8000a7e8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7ee:	00c59763          	bne	a1,a2,8000a7fc <tinst_tests_pf+0x2930>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7f2:	0026d683          	lhu	a3,2(a3)
    8000a7f6:	0106969b          	slliw	a3,a3,0x10
    8000a7fa:	8f55                	or	a4,a4,a3
    8000a7fc:	1ffe16b7          	lui	a3,0x1ffe1
    8000a800:	068e                	slli	a3,a3,0x3
    8000a802:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a804:	8f75                	and	a4,a4,a3
    8000a806:	00e78463          	beq	a5,a4,8000a80e <tinst_tests_pf+0x2942>
    8000a80a:	a58fe06f          	j	80008a62 <tinst_tests_pf+0xb96>
    8000a80e:	a68fe06f          	j	80008a76 <tinst_tests_pf+0xbaa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a812:	701c                	ld	a5,32(s0)
    8000a814:	e399                	bnez	a5,8000a81a <tinst_tests_pf+0x294e>
    8000a816:	b00fe06f          	j	80008b16 <tinst_tests_pf+0xc4a>
    8000a81a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a81c:	0016f713          	andi	a4,a3,1
    8000a820:	f2071463          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a824:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a828:	460d                	li	a2,3
    8000a82a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a82e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a830:	00c59763          	bne	a1,a2,8000a83e <tinst_tests_pf+0x2972>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a834:	0026d683          	lhu	a3,2(a3)
    8000a838:	0106969b          	slliw	a3,a3,0x10
    8000a83c:	8f55                	or	a4,a4,a3
    8000a83e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a842:	068e                	slli	a3,a3,0x3
    8000a844:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a846:	8f75                	and	a4,a4,a3
    8000a848:	00e78463          	beq	a5,a4,8000a850 <tinst_tests_pf+0x2984>
    8000a84c:	ab6fe06f          	j	80008b02 <tinst_tests_pf+0xc36>
    8000a850:	ac6fe06f          	j	80008b16 <tinst_tests_pf+0xc4a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a854:	701c                	ld	a5,32(s0)
    8000a856:	e399                	bnez	a5,8000a85c <tinst_tests_pf+0x2990>
    8000a858:	b5efe06f          	j	80008bb6 <tinst_tests_pf+0xcea>
    8000a85c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a85e:	0016f713          	andi	a4,a3,1
    8000a862:	ee071363          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a866:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a86a:	460d                	li	a2,3
    8000a86c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a870:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a872:	00c59763          	bne	a1,a2,8000a880 <tinst_tests_pf+0x29b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a876:	0026d683          	lhu	a3,2(a3)
    8000a87a:	0106969b          	slliw	a3,a3,0x10
    8000a87e:	8f55                	or	a4,a4,a3
    8000a880:	1ffe16b7          	lui	a3,0x1ffe1
    8000a884:	068e                	slli	a3,a3,0x3
    8000a886:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a888:	8f75                	and	a4,a4,a3
    8000a88a:	00e78463          	beq	a5,a4,8000a892 <tinst_tests_pf+0x29c6>
    8000a88e:	b14fe06f          	j	80008ba2 <tinst_tests_pf+0xcd6>
    8000a892:	b24fe06f          	j	80008bb6 <tinst_tests_pf+0xcea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a896:	701c                	ld	a5,32(s0)
    8000a898:	e399                	bnez	a5,8000a89e <tinst_tests_pf+0x29d2>
    8000a89a:	bbcfe06f          	j	80008c56 <tinst_tests_pf+0xd8a>
    8000a89e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8a0:	0016f713          	andi	a4,a3,1
    8000a8a4:	ea071263          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8ac:	460d                	li	a2,3
    8000a8ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8b4:	00c59763          	bne	a1,a2,8000a8c2 <tinst_tests_pf+0x29f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8b8:	0026d683          	lhu	a3,2(a3)
    8000a8bc:	0106969b          	slliw	a3,a3,0x10
    8000a8c0:	8f55                	or	a4,a4,a3
    8000a8c2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8c6:	068e                	slli	a3,a3,0x3
    8000a8c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8ca:	8f75                	and	a4,a4,a3
    8000a8cc:	00e78463          	beq	a5,a4,8000a8d4 <tinst_tests_pf+0x2a08>
    8000a8d0:	b72fe06f          	j	80008c42 <tinst_tests_pf+0xd76>
    8000a8d4:	b82fe06f          	j	80008c56 <tinst_tests_pf+0xd8a>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a8d8:	701c                	ld	a5,32(s0)
    8000a8da:	e399                	bnez	a5,8000a8e0 <tinst_tests_pf+0x2a14>
    8000a8dc:	c1afe06f          	j	80008cf6 <tinst_tests_pf+0xe2a>
    8000a8e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8e2:	0016f713          	andi	a4,a3,1
    8000a8e6:	e6071163          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8ee:	460d                	li	a2,3
    8000a8f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8f6:	00c59763          	bne	a1,a2,8000a904 <tinst_tests_pf+0x2a38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8fa:	0026d683          	lhu	a3,2(a3)
    8000a8fe:	0106969b          	slliw	a3,a3,0x10
    8000a902:	8f55                	or	a4,a4,a3
    8000a904:	1ffe16b7          	lui	a3,0x1ffe1
    8000a908:	068e                	slli	a3,a3,0x3
    8000a90a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a90c:	8f75                	and	a4,a4,a3
    8000a90e:	00e78463          	beq	a5,a4,8000a916 <tinst_tests_pf+0x2a4a>
    8000a912:	bd0fe06f          	j	80008ce2 <tinst_tests_pf+0xe16>
    8000a916:	be0fe06f          	j	80008cf6 <tinst_tests_pf+0xe2a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a91a:	701c                	ld	a5,32(s0)
    8000a91c:	e399                	bnez	a5,8000a922 <tinst_tests_pf+0x2a56>
    8000a91e:	c78fe06f          	j	80008d96 <tinst_tests_pf+0xeca>
    8000a922:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a924:	0016f713          	andi	a4,a3,1
    8000a928:	e2071063          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a92c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a930:	460d                	li	a2,3
    8000a932:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a936:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a938:	00c59763          	bne	a1,a2,8000a946 <tinst_tests_pf+0x2a7a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a93c:	0026d683          	lhu	a3,2(a3)
    8000a940:	0106969b          	slliw	a3,a3,0x10
    8000a944:	8f55                	or	a4,a4,a3
    8000a946:	1ffe16b7          	lui	a3,0x1ffe1
    8000a94a:	068e                	slli	a3,a3,0x3
    8000a94c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a94e:	8f75                	and	a4,a4,a3
    8000a950:	00e78463          	beq	a5,a4,8000a958 <tinst_tests_pf+0x2a8c>
    8000a954:	c2efe06f          	j	80008d82 <tinst_tests_pf+0xeb6>
    8000a958:	c3efe06f          	j	80008d96 <tinst_tests_pf+0xeca>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a95c:	701c                	ld	a5,32(s0)
    8000a95e:	e399                	bnez	a5,8000a964 <tinst_tests_pf+0x2a98>
    8000a960:	cd6fe06f          	j	80008e36 <tinst_tests_pf+0xf6a>
    8000a964:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a966:	0016f713          	andi	a4,a3,1
    8000a96a:	dc071f63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a96e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a972:	460d                	li	a2,3
    8000a974:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a978:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a97a:	00c59763          	bne	a1,a2,8000a988 <tinst_tests_pf+0x2abc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a97e:	0026d683          	lhu	a3,2(a3)
    8000a982:	0106969b          	slliw	a3,a3,0x10
    8000a986:	8f55                	or	a4,a4,a3
    8000a988:	1ffe16b7          	lui	a3,0x1ffe1
    8000a98c:	068e                	slli	a3,a3,0x3
    8000a98e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a990:	8f75                	and	a4,a4,a3
    8000a992:	00e78463          	beq	a5,a4,8000a99a <tinst_tests_pf+0x2ace>
    8000a996:	c8cfe06f          	j	80008e22 <tinst_tests_pf+0xf56>
    8000a99a:	c9cfe06f          	j	80008e36 <tinst_tests_pf+0xf6a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a99e:	701c                	ld	a5,32(s0)
    8000a9a0:	e399                	bnez	a5,8000a9a6 <tinst_tests_pf+0x2ada>
    8000a9a2:	d38fe06f          	j	80008eda <tinst_tests_pf+0x100e>
    8000a9a6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9a8:	0016f713          	andi	a4,a3,1
    8000a9ac:	d8071e63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9b4:	460d                	li	a2,3
    8000a9b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9bc:	00c59763          	bne	a1,a2,8000a9ca <tinst_tests_pf+0x2afe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9c0:	0026d683          	lhu	a3,2(a3)
    8000a9c4:	0106969b          	slliw	a3,a3,0x10
    8000a9c8:	8f55                	or	a4,a4,a3
    8000a9ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9ce:	068e                	slli	a3,a3,0x3
    8000a9d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9d2:	8f75                	and	a4,a4,a3
    8000a9d4:	00e78463          	beq	a5,a4,8000a9dc <tinst_tests_pf+0x2b10>
    8000a9d8:	ceefe06f          	j	80008ec6 <tinst_tests_pf+0xffa>
    8000a9dc:	cfefe06f          	j	80008eda <tinst_tests_pf+0x100e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a9e0:	701c                	ld	a5,32(s0)
    8000a9e2:	e399                	bnez	a5,8000a9e8 <tinst_tests_pf+0x2b1c>
    8000a9e4:	d96fe06f          	j	80008f7a <tinst_tests_pf+0x10ae>
    8000a9e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9ea:	0016f713          	andi	a4,a3,1
    8000a9ee:	d4071d63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9f6:	460d                	li	a2,3
    8000a9f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9fe:	00c59763          	bne	a1,a2,8000aa0c <tinst_tests_pf+0x2b40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa02:	0026d683          	lhu	a3,2(a3)
    8000aa06:	0106969b          	slliw	a3,a3,0x10
    8000aa0a:	8f55                	or	a4,a4,a3
    8000aa0c:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa10:	068e                	slli	a3,a3,0x3
    8000aa12:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa14:	8f75                	and	a4,a4,a3
    8000aa16:	00e78463          	beq	a5,a4,8000aa1e <tinst_tests_pf+0x2b52>
    8000aa1a:	d4cfe06f          	j	80008f66 <tinst_tests_pf+0x109a>
    8000aa1e:	d5cfe06f          	j	80008f7a <tinst_tests_pf+0x10ae>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000aa22:	701c                	ld	a5,32(s0)
    8000aa24:	e399                	bnez	a5,8000aa2a <tinst_tests_pf+0x2b5e>
    8000aa26:	df4fe06f          	j	8000901a <tinst_tests_pf+0x114e>
    8000aa2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa2c:	0016f713          	andi	a4,a3,1
    8000aa30:	d0071c63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa38:	460d                	li	a2,3
    8000aa3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa40:	00c59763          	bne	a1,a2,8000aa4e <tinst_tests_pf+0x2b82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa44:	0026d683          	lhu	a3,2(a3)
    8000aa48:	0106969b          	slliw	a3,a3,0x10
    8000aa4c:	8f55                	or	a4,a4,a3
    8000aa4e:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa52:	068e                	slli	a3,a3,0x3
    8000aa54:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa56:	8f75                	and	a4,a4,a3
    8000aa58:	00e78463          	beq	a5,a4,8000aa60 <tinst_tests_pf+0x2b94>
    8000aa5c:	daafe06f          	j	80009006 <tinst_tests_pf+0x113a>
    8000aa60:	dbafe06f          	j	8000901a <tinst_tests_pf+0x114e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000aa64:	701c                	ld	a5,32(s0)
    8000aa66:	e399                	bnez	a5,8000aa6c <tinst_tests_pf+0x2ba0>
    8000aa68:	e52fe06f          	j	800090ba <tinst_tests_pf+0x11ee>
    8000aa6c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa6e:	0016f713          	andi	a4,a3,1
    8000aa72:	cc071b63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa76:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa7a:	460d                	li	a2,3
    8000aa7c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa80:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa82:	00c59763          	bne	a1,a2,8000aa90 <tinst_tests_pf+0x2bc4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa86:	0026d683          	lhu	a3,2(a3)
    8000aa8a:	0106969b          	slliw	a3,a3,0x10
    8000aa8e:	8f55                	or	a4,a4,a3
    8000aa90:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa94:	068e                	slli	a3,a3,0x3
    8000aa96:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa98:	8f75                	and	a4,a4,a3
    8000aa9a:	00e78463          	beq	a5,a4,8000aaa2 <tinst_tests_pf+0x2bd6>
    8000aa9e:	e08fe06f          	j	800090a6 <tinst_tests_pf+0x11da>
    8000aaa2:	e18fe06f          	j	800090ba <tinst_tests_pf+0x11ee>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000aaa6:	6418                	ld	a4,8(s0)
    8000aaa8:	47bd                	li	a5,15
    8000aaaa:	00f70463          	beq	a4,a5,8000aab2 <tinst_tests_pf+0x2be6>
    8000aaae:	f64fe06f          	j	80009212 <tinst_tests_pf+0x1346>
    8000aab2:	701c                	ld	a5,32(s0)
    8000aab4:	e399                	bnez	a5,8000aaba <tinst_tests_pf+0x2bee>
    8000aab6:	f5efe06f          	j	80009214 <tinst_tests_pf+0x1348>
    8000aaba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aabc:	0016f713          	andi	a4,a3,1
    8000aac0:	c8071463          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aac4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aac8:	460d                	li	a2,3
    8000aaca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aace:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aad0:	00c59763          	bne	a1,a2,8000aade <tinst_tests_pf+0x2c12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aad4:	0026d683          	lhu	a3,2(a3)
    8000aad8:	0106969b          	slliw	a3,a3,0x10
    8000aadc:	8f55                	or	a4,a4,a3
    8000aade:	1ffe16b7          	lui	a3,0x1ffe1
    8000aae2:	068e                	slli	a3,a3,0x3
    8000aae4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aae6:	8f75                	and	a4,a4,a3
    8000aae8:	40f70933          	sub	s2,a4,a5
    8000aaec:	00193913          	seqz	s2,s2
    8000aaf0:	f24fe06f          	j	80009214 <tinst_tests_pf+0x1348>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aaf4:	6418                	ld	a4,8(s0)
    8000aaf6:	47bd                	li	a5,15
    8000aaf8:	00f70463          	beq	a4,a5,8000ab00 <tinst_tests_pf+0x2c34>
    8000aafc:	faefe06f          	j	800092aa <tinst_tests_pf+0x13de>
    8000ab00:	701c                	ld	a5,32(s0)
    8000ab02:	e399                	bnez	a5,8000ab08 <tinst_tests_pf+0x2c3c>
    8000ab04:	fa8fe06f          	j	800092ac <tinst_tests_pf+0x13e0>
    8000ab08:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab0a:	0016f713          	andi	a4,a3,1
    8000ab0e:	c2071d63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab12:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab16:	460d                	li	a2,3
    8000ab18:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab1c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab1e:	00c59763          	bne	a1,a2,8000ab2c <tinst_tests_pf+0x2c60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab22:	0026d683          	lhu	a3,2(a3)
    8000ab26:	0106969b          	slliw	a3,a3,0x10
    8000ab2a:	8f55                	or	a4,a4,a3
    8000ab2c:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab30:	068e                	slli	a3,a3,0x3
    8000ab32:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab34:	8f75                	and	a4,a4,a3
    8000ab36:	40f70933          	sub	s2,a4,a5
    8000ab3a:	00193913          	seqz	s2,s2
    8000ab3e:	f6efe06f          	j	800092ac <tinst_tests_pf+0x13e0>
    instruction = *((uint16_t*)addr);
    8000ab42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab46:	460d                	li	a2,3
    8000ab48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab4e:	00c59763          	bne	a1,a2,8000ab5c <tinst_tests_pf+0x2c90>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab52:	0026d683          	lhu	a3,2(a3)
    8000ab56:	0106969b          	slliw	a3,a3,0x10
    8000ab5a:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000ab5c:	1746                	slli	a4,a4,0x31
    8000ab5e:	9345                	srli	a4,a4,0x31
    8000ab60:	00e78463          	beq	a5,a4,8000ab68 <tinst_tests_pf+0x2c9c>
    8000ab64:	d3efd06f          	j	800080a2 <tinst_tests_pf+0x1d6>
    8000ab68:	d4efd06f          	j	800080b6 <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ab6c:	6418                	ld	a4,8(s0)
    8000ab6e:	47bd                	li	a5,15
    8000ab70:	00f70463          	beq	a4,a5,8000ab78 <tinst_tests_pf+0x2cac>
    8000ab74:	fcefe06f          	j	80009342 <tinst_tests_pf+0x1476>
    8000ab78:	701c                	ld	a5,32(s0)
    8000ab7a:	e399                	bnez	a5,8000ab80 <tinst_tests_pf+0x2cb4>
    8000ab7c:	fc8fe06f          	j	80009344 <tinst_tests_pf+0x1478>
    8000ab80:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab82:	0016f713          	andi	a4,a3,1
    8000ab86:	bc071163          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab8a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab8e:	460d                	li	a2,3
    8000ab90:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab94:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab96:	00c59763          	bne	a1,a2,8000aba4 <tinst_tests_pf+0x2cd8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab9a:	0026d683          	lhu	a3,2(a3)
    8000ab9e:	0106969b          	slliw	a3,a3,0x10
    8000aba2:	8f55                	or	a4,a4,a3
    8000aba4:	1ffe16b7          	lui	a3,0x1ffe1
    8000aba8:	068e                	slli	a3,a3,0x3
    8000abaa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abac:	8f75                	and	a4,a4,a3
    8000abae:	40f70933          	sub	s2,a4,a5
    8000abb2:	00193913          	seqz	s2,s2
    8000abb6:	f8efe06f          	j	80009344 <tinst_tests_pf+0x1478>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000abba:	6418                	ld	a4,8(s0)
    8000abbc:	47bd                	li	a5,15
    8000abbe:	00f70463          	beq	a4,a5,8000abc6 <tinst_tests_pf+0x2cfa>
    8000abc2:	819fe06f          	j	800093da <tinst_tests_pf+0x150e>
    8000abc6:	701c                	ld	a5,32(s0)
    8000abc8:	e399                	bnez	a5,8000abce <tinst_tests_pf+0x2d02>
    8000abca:	813fe06f          	j	800093dc <tinst_tests_pf+0x1510>
    8000abce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abd0:	0016f713          	andi	a4,a3,1
    8000abd4:	b6071a63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000abd8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abdc:	460d                	li	a2,3
    8000abde:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abe2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abe4:	00c59763          	bne	a1,a2,8000abf2 <tinst_tests_pf+0x2d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abe8:	0026d683          	lhu	a3,2(a3)
    8000abec:	0106969b          	slliw	a3,a3,0x10
    8000abf0:	8f55                	or	a4,a4,a3
    8000abf2:	1ffe16b7          	lui	a3,0x1ffe1
    8000abf6:	068e                	slli	a3,a3,0x3
    8000abf8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abfa:	8f75                	and	a4,a4,a3
    8000abfc:	40f70933          	sub	s2,a4,a5
    8000ac00:	00193913          	seqz	s2,s2
    8000ac04:	fd8fe06f          	j	800093dc <tinst_tests_pf+0x1510>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ac08:	02043983          	ld	s3,32(s0)
    8000ac0c:	00099463          	bnez	s3,8000ac14 <tinst_tests_pf+0x2d48>
    8000ac10:	b6dfd06f          	j	8000877c <tinst_tests_pf+0x8b0>
    8000ac14:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ac16:	0017f713          	andi	a4,a5,1
    8000ac1a:	b2071763          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac1e:	0007d503          	lhu	a0,0(a5)
    8000ac22:	b1ff60ef          	jal	80001740 <expand_compressed_instruction>
    8000ac26:	01f077b7          	lui	a5,0x1f07
    8000ac2a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ac2e:	00f57933          	and	s2,a0,a5
    8000ac32:	41390933          	sub	s2,s2,s3
    8000ac36:	00193913          	seqz	s2,s2
    8000ac3a:	b43fd06f          	j	8000877c <tinst_tests_pf+0x8b0>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ac3e:	7004                	ld	s1,32(s0)
    8000ac40:	e099                	bnez	s1,8000ac46 <tinst_tests_pf+0x2d7a>
    8000ac42:	bd7fd06f          	j	80008818 <tinst_tests_pf+0x94c>
    8000ac46:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ac48:	0017f713          	andi	a4,a5,1
    8000ac4c:	ae071e63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac50:	0007d503          	lhu	a0,0(a5)
    8000ac54:	aedf60ef          	jal	80001740 <expand_compressed_instruction>
    8000ac58:	01f077b7          	lui	a5,0x1f07
    8000ac5c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ac60:	00f57933          	and	s2,a0,a5
    8000ac64:	40990933          	sub	s2,s2,s1
    8000ac68:	00193913          	seqz	s2,s2
    8000ac6c:	badfd06f          	j	80008818 <tinst_tests_pf+0x94c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000ac70:	701c                	ld	a5,32(s0)
    8000ac72:	e399                	bnez	a5,8000ac78 <tinst_tests_pf+0x2dac>
    8000ac74:	c4bfd06f          	j	800088be <tinst_tests_pf+0x9f2>
    8000ac78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac7a:	0016f713          	andi	a4,a3,1
    8000ac7e:	ac071563          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac82:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac86:	460d                	li	a2,3
    8000ac88:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac8c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac8e:	00c59763          	bne	a1,a2,8000ac9c <tinst_tests_pf+0x2dd0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac92:	0026d683          	lhu	a3,2(a3)
    8000ac96:	0106969b          	slliw	a3,a3,0x10
    8000ac9a:	8f55                	or	a4,a4,a3
    8000ac9c:	1ffe16b7          	lui	a3,0x1ffe1
    8000aca0:	068e                	slli	a3,a3,0x3
    8000aca2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aca4:	8f75                	and	a4,a4,a3
    8000aca6:	40f70933          	sub	s2,a4,a5
    8000acaa:	00193913          	seqz	s2,s2
    8000acae:	c11fd06f          	j	800088be <tinst_tests_pf+0x9f2>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000acb2:	701c                	ld	a5,32(s0)
    8000acb4:	e399                	bnez	a5,8000acba <tinst_tests_pf+0x2dee>
    8000acb6:	caffd06f          	j	80008964 <tinst_tests_pf+0xa98>
    8000acba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acbc:	0016f713          	andi	a4,a3,1
    8000acc0:	a8071463          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000acc4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000acc8:	460d                	li	a2,3
    8000acca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000acce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000acd0:	00c59763          	bne	a1,a2,8000acde <tinst_tests_pf+0x2e12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acd4:	0026d683          	lhu	a3,2(a3)
    8000acd8:	0106969b          	slliw	a3,a3,0x10
    8000acdc:	8f55                	or	a4,a4,a3
    8000acde:	1ffe16b7          	lui	a3,0x1ffe1
    8000ace2:	068e                	slli	a3,a3,0x3
    8000ace4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ace6:	8f75                	and	a4,a4,a3
    8000ace8:	40f70933          	sub	s2,a4,a5
    8000acec:	00193913          	seqz	s2,s2
    8000acf0:	c75fd06f          	j	80008964 <tinst_tests_pf+0xa98>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000acf4:	701c                	ld	a5,32(s0)
    8000acf6:	e399                	bnez	a5,8000acfc <tinst_tests_pf+0x2e30>
    8000acf8:	d0dfd06f          	j	80008a04 <tinst_tests_pf+0xb38>
    8000acfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acfe:	0016f713          	andi	a4,a3,1
    8000ad02:	a4071363          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad06:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad0a:	460d                	li	a2,3
    8000ad0c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad10:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad12:	00c59763          	bne	a1,a2,8000ad20 <tinst_tests_pf+0x2e54>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad16:	0026d683          	lhu	a3,2(a3)
    8000ad1a:	0106969b          	slliw	a3,a3,0x10
    8000ad1e:	8f55                	or	a4,a4,a3
    8000ad20:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad24:	068e                	slli	a3,a3,0x3
    8000ad26:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad28:	8f75                	and	a4,a4,a3
    8000ad2a:	40f70933          	sub	s2,a4,a5
    8000ad2e:	00193913          	seqz	s2,s2
    8000ad32:	cd3fd06f          	j	80008a04 <tinst_tests_pf+0xb38>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ad36:	701c                	ld	a5,32(s0)
    8000ad38:	e399                	bnez	a5,8000ad3e <tinst_tests_pf+0x2e72>
    8000ad3a:	d5ffd06f          	j	80008a98 <tinst_tests_pf+0xbcc>
    8000ad3e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad40:	0016f713          	andi	a4,a3,1
    8000ad44:	a0071263          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad48:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad4c:	460d                	li	a2,3
    8000ad4e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad52:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad54:	00c59763          	bne	a1,a2,8000ad62 <tinst_tests_pf+0x2e96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad58:	0026d683          	lhu	a3,2(a3)
    8000ad5c:	0106969b          	slliw	a3,a3,0x10
    8000ad60:	8f55                	or	a4,a4,a3
    8000ad62:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad66:	068e                	slli	a3,a3,0x3
    8000ad68:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad6a:	8f75                	and	a4,a4,a3
    8000ad6c:	40f70933          	sub	s2,a4,a5
    8000ad70:	00193913          	seqz	s2,s2
    8000ad74:	d25fd06f          	j	80008a98 <tinst_tests_pf+0xbcc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ad78:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ad7a:	0017f713          	andi	a4,a5,1
    8000ad7e:	9c071563          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad82:	0007d503          	lhu	a0,0(a5)
    8000ad86:	9bbf60ef          	jal	80001740 <expand_compressed_instruction>
    8000ad8a:	67a1                	lui	a5,0x8
    8000ad8c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ad8e:	8d7d                	and	a0,a0,a5
    8000ad90:	00a48463          	beq	s1,a0,8000ad98 <tinst_tests_pf+0x2ecc>
    8000ad94:	861fd06f          	j	800085f4 <tinst_tests_pf+0x728>
    8000ad98:	00023597          	auipc	a1,0x23
    8000ad9c:	41058593          	addi	a1,a1,1040 # 8002e1a8 <__func__.0+0x2c0>
    8000ada0:	85dfd06f          	j	800085fc <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000ada4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ada6:	0017f713          	andi	a4,a5,1
    8000adaa:	98071f63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adae:	0007d503          	lhu	a0,0(a5)
    8000adb2:	98ff60ef          	jal	80001740 <expand_compressed_instruction>
    8000adb6:	67a1                	lui	a5,0x8
    8000adb8:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000adba:	8d7d                	and	a0,a0,a5
    8000adbc:	00a98463          	beq	s3,a0,8000adc4 <tinst_tests_pf+0x2ef8>
    8000adc0:	8c9fd06f          	j	80008688 <tinst_tests_pf+0x7bc>
    8000adc4:	00023597          	auipc	a1,0x23
    8000adc8:	3e458593          	addi	a1,a1,996 # 8002e1a8 <__func__.0+0x2c0>
    8000adcc:	8c5fd06f          	j	80008690 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000add0:	701c                	ld	a5,32(s0)
    8000add2:	e399                	bnez	a5,8000add8 <tinst_tests_pf+0x2f0c>
    8000add4:	d65fd06f          	j	80008b38 <tinst_tests_pf+0xc6c>
    8000add8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000adda:	0016f713          	andi	a4,a3,1
    8000adde:	96071563          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ade2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ade6:	460d                	li	a2,3
    8000ade8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adee:	00c59763          	bne	a1,a2,8000adfc <tinst_tests_pf+0x2f30>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adf2:	0026d683          	lhu	a3,2(a3)
    8000adf6:	0106969b          	slliw	a3,a3,0x10
    8000adfa:	8f55                	or	a4,a4,a3
    8000adfc:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae00:	068e                	slli	a3,a3,0x3
    8000ae02:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae04:	8f75                	and	a4,a4,a3
    8000ae06:	40f70933          	sub	s2,a4,a5
    8000ae0a:	00193913          	seqz	s2,s2
    8000ae0e:	d2bfd06f          	j	80008b38 <tinst_tests_pf+0xc6c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ae12:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae14:	0017f713          	andi	a4,a5,1
    8000ae18:	92071863          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae1c:	0007d503          	lhu	a0,0(a5)
    8000ae20:	921f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ae24:	01f077b7          	lui	a5,0x1f07
    8000ae28:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ae2c:	8d7d                	and	a0,a0,a5
    8000ae2e:	00a98463          	beq	s3,a0,8000ae36 <tinst_tests_pf+0x2f6a>
    8000ae32:	8ebfd06f          	j	8000871c <tinst_tests_pf+0x850>
    8000ae36:	00023597          	auipc	a1,0x23
    8000ae3a:	37258593          	addi	a1,a1,882 # 8002e1a8 <__func__.0+0x2c0>
    8000ae3e:	8e7fd06f          	j	80008724 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ae42:	701c                	ld	a5,32(s0)
    8000ae44:	e399                	bnez	a5,8000ae4a <tinst_tests_pf+0x2f7e>
    8000ae46:	d93fd06f          	j	80008bd8 <tinst_tests_pf+0xd0c>
    8000ae4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae4c:	0016f713          	andi	a4,a3,1
    8000ae50:	8e071c63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae58:	460d                	li	a2,3
    8000ae5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae60:	00c59763          	bne	a1,a2,8000ae6e <tinst_tests_pf+0x2fa2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae64:	0026d683          	lhu	a3,2(a3)
    8000ae68:	0106969b          	slliw	a3,a3,0x10
    8000ae6c:	8f55                	or	a4,a4,a3
    8000ae6e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae72:	068e                	slli	a3,a3,0x3
    8000ae74:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae76:	8f75                	and	a4,a4,a3
    8000ae78:	40f70933          	sub	s2,a4,a5
    8000ae7c:	00193913          	seqz	s2,s2
    8000ae80:	d59fd06f          	j	80008bd8 <tinst_tests_pf+0xd0c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ae84:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae86:	0017f713          	andi	a4,a5,1
    8000ae8a:	8a071f63          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae8e:	0007d503          	lhu	a0,0(a5)
    8000ae92:	8aff60ef          	jal	80001740 <expand_compressed_instruction>
    8000ae96:	01f077b7          	lui	a5,0x1f07
    8000ae9a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ae9e:	8d7d                	and	a0,a0,a5
    8000aea0:	00a48463          	beq	s1,a0,8000aea8 <tinst_tests_pf+0x2fdc>
    8000aea4:	915fd06f          	j	800087b8 <tinst_tests_pf+0x8ec>
    8000aea8:	00023597          	auipc	a1,0x23
    8000aeac:	30058593          	addi	a1,a1,768 # 8002e1a8 <__func__.0+0x2c0>
    8000aeb0:	911fd06f          	j	800087c0 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000aeb4:	701c                	ld	a5,32(s0)
    8000aeb6:	e399                	bnez	a5,8000aebc <tinst_tests_pf+0x2ff0>
    8000aeb8:	dc1fd06f          	j	80008c78 <tinst_tests_pf+0xdac>
    8000aebc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aebe:	0016f713          	andi	a4,a3,1
    8000aec2:	88071363          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aec6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aeca:	460d                	li	a2,3
    8000aecc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aed0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aed2:	00c59763          	bne	a1,a2,8000aee0 <tinst_tests_pf+0x3014>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aed6:	0026d683          	lhu	a3,2(a3)
    8000aeda:	0106969b          	slliw	a3,a3,0x10
    8000aede:	8f55                	or	a4,a4,a3
    8000aee0:	1ffe16b7          	lui	a3,0x1ffe1
    8000aee4:	068e                	slli	a3,a3,0x3
    8000aee6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aee8:	8f75                	and	a4,a4,a3
    8000aeea:	40f70933          	sub	s2,a4,a5
    8000aeee:	00193913          	seqz	s2,s2
    8000aef2:	d87fd06f          	j	80008c78 <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000aef6:	701c                	ld	a5,32(s0)
    8000aef8:	e399                	bnez	a5,8000aefe <tinst_tests_pf+0x3032>
    8000aefa:	e1ffd06f          	j	80008d18 <tinst_tests_pf+0xe4c>
    8000aefe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af00:	0016f713          	andi	a4,a3,1
    8000af04:	84071263          	bnez	a4,80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af08:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af0c:	460d                	li	a2,3
    8000af0e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af12:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af14:	00c59763          	bne	a1,a2,8000af22 <tinst_tests_pf+0x3056>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af18:	0026d683          	lhu	a3,2(a3)
    8000af1c:	0106969b          	slliw	a3,a3,0x10
    8000af20:	8f55                	or	a4,a4,a3
    8000af22:	1ffe16b7          	lui	a3,0x1ffe1
    8000af26:	068e                	slli	a3,a3,0x3
    8000af28:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af2a:	8f75                	and	a4,a4,a3
    8000af2c:	40f70933          	sub	s2,a4,a5
    8000af30:	00193913          	seqz	s2,s2
    8000af34:	de5fd06f          	j	80008d18 <tinst_tests_pf+0xe4c>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000af38:	701c                	ld	a5,32(s0)
    8000af3a:	e399                	bnez	a5,8000af40 <tinst_tests_pf+0x3074>
    8000af3c:	e7dfd06f          	j	80008db8 <tinst_tests_pf+0xeec>
    8000af40:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af42:	0016f713          	andi	a4,a3,1
    8000af46:	c319                	beqz	a4,8000af4c <tinst_tests_pf+0x3080>
    8000af48:	800ff06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af4c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af50:	460d                	li	a2,3
    8000af52:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af56:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af58:	00c59763          	bne	a1,a2,8000af66 <tinst_tests_pf+0x309a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af5c:	0026d683          	lhu	a3,2(a3)
    8000af60:	0106969b          	slliw	a3,a3,0x10
    8000af64:	8f55                	or	a4,a4,a3
    8000af66:	1ffe16b7          	lui	a3,0x1ffe1
    8000af6a:	068e                	slli	a3,a3,0x3
    8000af6c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af6e:	8f75                	and	a4,a4,a3
    8000af70:	40f70933          	sub	s2,a4,a5
    8000af74:	00193913          	seqz	s2,s2
    8000af78:	e41fd06f          	j	80008db8 <tinst_tests_pf+0xeec>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000af7c:	701c                	ld	a5,32(s0)
    8000af7e:	e399                	bnez	a5,8000af84 <tinst_tests_pf+0x30b8>
    8000af80:	ed9fd06f          	j	80008e58 <tinst_tests_pf+0xf8c>
    8000af84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af86:	0016f713          	andi	a4,a3,1
    8000af8a:	c319                	beqz	a4,8000af90 <tinst_tests_pf+0x30c4>
    8000af8c:	fbdfe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af94:	460d                	li	a2,3
    8000af96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af9c:	00c59763          	bne	a1,a2,8000afaa <tinst_tests_pf+0x30de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afa0:	0026d683          	lhu	a3,2(a3)
    8000afa4:	0106969b          	slliw	a3,a3,0x10
    8000afa8:	8f55                	or	a4,a4,a3
    8000afaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000afae:	068e                	slli	a3,a3,0x3
    8000afb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afb2:	8f75                	and	a4,a4,a3
    8000afb4:	40f70933          	sub	s2,a4,a5
    8000afb8:	00193913          	seqz	s2,s2
    8000afbc:	e9dfd06f          	j	80008e58 <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000afc0:	701c                	ld	a5,32(s0)
    8000afc2:	e399                	bnez	a5,8000afc8 <tinst_tests_pf+0x30fc>
    8000afc4:	f39fd06f          	j	80008efc <tinst_tests_pf+0x1030>
    8000afc8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afca:	0016f713          	andi	a4,a3,1
    8000afce:	c319                	beqz	a4,8000afd4 <tinst_tests_pf+0x3108>
    8000afd0:	f79fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000afd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afd8:	460d                	li	a2,3
    8000afda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afe0:	00c59763          	bne	a1,a2,8000afee <tinst_tests_pf+0x3122>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afe4:	0026d683          	lhu	a3,2(a3)
    8000afe8:	0106969b          	slliw	a3,a3,0x10
    8000afec:	8f55                	or	a4,a4,a3
    8000afee:	1ffe16b7          	lui	a3,0x1ffe1
    8000aff2:	068e                	slli	a3,a3,0x3
    8000aff4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aff6:	8f75                	and	a4,a4,a3
    8000aff8:	40f70933          	sub	s2,a4,a5
    8000affc:	00193913          	seqz	s2,s2
    8000b000:	efdfd06f          	j	80008efc <tinst_tests_pf+0x1030>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b004:	701c                	ld	a5,32(s0)
    8000b006:	e399                	bnez	a5,8000b00c <tinst_tests_pf+0x3140>
    8000b008:	f95fd06f          	j	80008f9c <tinst_tests_pf+0x10d0>
    8000b00c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b00e:	0016f713          	andi	a4,a3,1
    8000b012:	c319                	beqz	a4,8000b018 <tinst_tests_pf+0x314c>
    8000b014:	f35fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b018:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b01c:	460d                	li	a2,3
    8000b01e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b022:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b024:	00c59763          	bne	a1,a2,8000b032 <tinst_tests_pf+0x3166>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b028:	0026d683          	lhu	a3,2(a3)
    8000b02c:	0106969b          	slliw	a3,a3,0x10
    8000b030:	8f55                	or	a4,a4,a3
    8000b032:	1ffe16b7          	lui	a3,0x1ffe1
    8000b036:	068e                	slli	a3,a3,0x3
    8000b038:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b03a:	8f75                	and	a4,a4,a3
    8000b03c:	40f70933          	sub	s2,a4,a5
    8000b040:	00193913          	seqz	s2,s2
    8000b044:	f59fd06f          	j	80008f9c <tinst_tests_pf+0x10d0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b048:	701c                	ld	a5,32(s0)
    8000b04a:	e399                	bnez	a5,8000b050 <tinst_tests_pf+0x3184>
    8000b04c:	ff1fd06f          	j	8000903c <tinst_tests_pf+0x1170>
    8000b050:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b052:	0016f713          	andi	a4,a3,1
    8000b056:	c319                	beqz	a4,8000b05c <tinst_tests_pf+0x3190>
    8000b058:	ef1fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b05c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b060:	460d                	li	a2,3
    8000b062:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b066:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b068:	00c59763          	bne	a1,a2,8000b076 <tinst_tests_pf+0x31aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b06c:	0026d683          	lhu	a3,2(a3)
    8000b070:	0106969b          	slliw	a3,a3,0x10
    8000b074:	8f55                	or	a4,a4,a3
    8000b076:	1ffe16b7          	lui	a3,0x1ffe1
    8000b07a:	068e                	slli	a3,a3,0x3
    8000b07c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b07e:	8f75                	and	a4,a4,a3
    8000b080:	40f70933          	sub	s2,a4,a5
    8000b084:	00193913          	seqz	s2,s2
    8000b088:	fb5fd06f          	j	8000903c <tinst_tests_pf+0x1170>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b08c:	701c                	ld	a5,32(s0)
    8000b08e:	e399                	bnez	a5,8000b094 <tinst_tests_pf+0x31c8>
    8000b090:	84cfe06f          	j	800090dc <tinst_tests_pf+0x1210>
    8000b094:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b096:	0016f713          	andi	a4,a3,1
    8000b09a:	c319                	beqz	a4,8000b0a0 <tinst_tests_pf+0x31d4>
    8000b09c:	eadfe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0a0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0a4:	460d                	li	a2,3
    8000b0a6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0aa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0ac:	00c59763          	bne	a1,a2,8000b0ba <tinst_tests_pf+0x31ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0b0:	0026d683          	lhu	a3,2(a3)
    8000b0b4:	0106969b          	slliw	a3,a3,0x10
    8000b0b8:	8f55                	or	a4,a4,a3
    8000b0ba:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0be:	068e                	slli	a3,a3,0x3
    8000b0c0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0c2:	8f75                	and	a4,a4,a3
    8000b0c4:	40f70933          	sub	s2,a4,a5
    8000b0c8:	00193913          	seqz	s2,s2
    8000b0cc:	810fe06f          	j	800090dc <tinst_tests_pf+0x1210>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b0d0:	701c                	ld	a5,32(s0)
    8000b0d2:	e399                	bnez	a5,8000b0d8 <tinst_tests_pf+0x320c>
    8000b0d4:	8a8fe06f          	j	8000917c <tinst_tests_pf+0x12b0>
    8000b0d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0da:	0016f713          	andi	a4,a3,1
    8000b0de:	c319                	beqz	a4,8000b0e4 <tinst_tests_pf+0x3218>
    8000b0e0:	e69fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0e8:	460d                	li	a2,3
    8000b0ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0f0:	00c59763          	bne	a1,a2,8000b0fe <tinst_tests_pf+0x3232>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0f4:	0026d683          	lhu	a3,2(a3)
    8000b0f8:	0106969b          	slliw	a3,a3,0x10
    8000b0fc:	8f55                	or	a4,a4,a3
    8000b0fe:	1ffe16b7          	lui	a3,0x1ffe1
    8000b102:	068e                	slli	a3,a3,0x3
    8000b104:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b106:	8f75                	and	a4,a4,a3
    8000b108:	40f70933          	sub	s2,a4,a5
    8000b10c:	00193913          	seqz	s2,s2
    8000b110:	86cfe06f          	j	8000917c <tinst_tests_pf+0x12b0>
    8000b114:	701c                	ld	a5,32(s0)
    8000b116:	e399                	bnez	a5,8000b11c <tinst_tests_pf+0x3250>
    8000b118:	842fe06f          	j	8000915a <tinst_tests_pf+0x128e>
    8000b11c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b11e:	0016f713          	andi	a4,a3,1
    8000b122:	c319                	beqz	a4,8000b128 <tinst_tests_pf+0x325c>
    8000b124:	e25fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b128:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b12c:	460d                	li	a2,3
    8000b12e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b132:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b134:	00c59763          	bne	a1,a2,8000b142 <tinst_tests_pf+0x3276>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b138:	0026d683          	lhu	a3,2(a3)
    8000b13c:	0106969b          	slliw	a3,a3,0x10
    8000b140:	8f55                	or	a4,a4,a3
    8000b142:	1ffe16b7          	lui	a3,0x1ffe1
    8000b146:	068e                	slli	a3,a3,0x3
    8000b148:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b14a:	8f75                	and	a4,a4,a3
    8000b14c:	00e78463          	beq	a5,a4,8000b154 <tinst_tests_pf+0x3288>
    8000b150:	ff7fd06f          	j	80009146 <tinst_tests_pf+0x127a>
    8000b154:	806fe06f          	j	8000915a <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b158:	701c                	ld	a5,32(s0)
    8000b15a:	e399                	bnez	a5,8000b160 <tinst_tests_pf+0x3294>
    8000b15c:	89efe06f          	j	800091fa <tinst_tests_pf+0x132e>
    8000b160:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b162:	0016f713          	andi	a4,a3,1
    8000b166:	c319                	beqz	a4,8000b16c <tinst_tests_pf+0x32a0>
    8000b168:	de1fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b16c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b170:	460d                	li	a2,3
    8000b172:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b176:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b178:	00c59763          	bne	a1,a2,8000b186 <tinst_tests_pf+0x32ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b17c:	0026d683          	lhu	a3,2(a3)
    8000b180:	0106969b          	slliw	a3,a3,0x10
    8000b184:	8f55                	or	a4,a4,a3
    8000b186:	1ffe16b7          	lui	a3,0x1ffe1
    8000b18a:	068e                	slli	a3,a3,0x3
    8000b18c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b18e:	8f75                	and	a4,a4,a3
    8000b190:	00e78463          	beq	a5,a4,8000b198 <tinst_tests_pf+0x32cc>
    8000b194:	852fe06f          	j	800091e6 <tinst_tests_pf+0x131a>
    8000b198:	862fe06f          	j	800091fa <tinst_tests_pf+0x132e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b19c:	701c                	ld	a5,32(s0)
    8000b19e:	e399                	bnez	a5,8000b1a4 <tinst_tests_pf+0x32d8>
    8000b1a0:	8f2fe06f          	j	80009292 <tinst_tests_pf+0x13c6>
    8000b1a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1a6:	0016f713          	andi	a4,a3,1
    8000b1aa:	c319                	beqz	a4,8000b1b0 <tinst_tests_pf+0x32e4>
    8000b1ac:	d9dfe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1b4:	460d                	li	a2,3
    8000b1b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1bc:	00c59763          	bne	a1,a2,8000b1ca <tinst_tests_pf+0x32fe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1c0:	0026d683          	lhu	a3,2(a3)
    8000b1c4:	0106969b          	slliw	a3,a3,0x10
    8000b1c8:	8f55                	or	a4,a4,a3
    8000b1ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1ce:	068e                	slli	a3,a3,0x3
    8000b1d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1d2:	8f75                	and	a4,a4,a3
    8000b1d4:	00e78463          	beq	a5,a4,8000b1dc <tinst_tests_pf+0x3310>
    8000b1d8:	8a6fe06f          	j	8000927e <tinst_tests_pf+0x13b2>
    8000b1dc:	8b6fe06f          	j	80009292 <tinst_tests_pf+0x13c6>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b1e0:	701c                	ld	a5,32(s0)
    8000b1e2:	e399                	bnez	a5,8000b1e8 <tinst_tests_pf+0x331c>
    8000b1e4:	946fe06f          	j	8000932a <tinst_tests_pf+0x145e>
    8000b1e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1ea:	0016f713          	andi	a4,a3,1
    8000b1ee:	c319                	beqz	a4,8000b1f4 <tinst_tests_pf+0x3328>
    8000b1f0:	d59fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1f8:	460d                	li	a2,3
    8000b1fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b200:	00c59763          	bne	a1,a2,8000b20e <tinst_tests_pf+0x3342>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b204:	0026d683          	lhu	a3,2(a3)
    8000b208:	0106969b          	slliw	a3,a3,0x10
    8000b20c:	8f55                	or	a4,a4,a3
    8000b20e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b212:	068e                	slli	a3,a3,0x3
    8000b214:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b216:	8f75                	and	a4,a4,a3
    8000b218:	00e78463          	beq	a5,a4,8000b220 <tinst_tests_pf+0x3354>
    8000b21c:	8fafe06f          	j	80009316 <tinst_tests_pf+0x144a>
    8000b220:	90afe06f          	j	8000932a <tinst_tests_pf+0x145e>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b224:	701c                	ld	a5,32(s0)
    8000b226:	e399                	bnez	a5,8000b22c <tinst_tests_pf+0x3360>
    8000b228:	99afe06f          	j	800093c2 <tinst_tests_pf+0x14f6>
    8000b22c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b22e:	0016f713          	andi	a4,a3,1
    8000b232:	c319                	beqz	a4,8000b238 <tinst_tests_pf+0x336c>
    8000b234:	d15fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b238:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b23c:	460d                	li	a2,3
    8000b23e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b242:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b244:	00c59763          	bne	a1,a2,8000b252 <tinst_tests_pf+0x3386>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b248:	0026d683          	lhu	a3,2(a3)
    8000b24c:	0106969b          	slliw	a3,a3,0x10
    8000b250:	8f55                	or	a4,a4,a3
    8000b252:	1ffe16b7          	lui	a3,0x1ffe1
    8000b256:	068e                	slli	a3,a3,0x3
    8000b258:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b25a:	8f75                	and	a4,a4,a3
    8000b25c:	00e78463          	beq	a5,a4,8000b264 <tinst_tests_pf+0x3398>
    8000b260:	94efe06f          	j	800093ae <tinst_tests_pf+0x14e2>
    8000b264:	95efe06f          	j	800093c2 <tinst_tests_pf+0x14f6>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b268:	701c                	ld	a5,32(s0)
    8000b26a:	e399                	bnez	a5,8000b270 <tinst_tests_pf+0x33a4>
    8000b26c:	9eefe06f          	j	8000945a <tinst_tests_pf+0x158e>
    8000b270:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b272:	0016f713          	andi	a4,a3,1
    8000b276:	c319                	beqz	a4,8000b27c <tinst_tests_pf+0x33b0>
    8000b278:	cd1fe06f          	j	80009f48 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b27c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b280:	460d                	li	a2,3
    8000b282:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b286:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b288:	00c59763          	bne	a1,a2,8000b296 <tinst_tests_pf+0x33ca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b28c:	0026d683          	lhu	a3,2(a3)
    8000b290:	0106969b          	slliw	a3,a3,0x10
    8000b294:	8f55                	or	a4,a4,a3
    8000b296:	1ffe16b7          	lui	a3,0x1ffe1
    8000b29a:	068e                	slli	a3,a3,0x3
    8000b29c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b29e:	8f75                	and	a4,a4,a3
    8000b2a0:	00e78463          	beq	a5,a4,8000b2a8 <tinst_tests_pf+0x33dc>
    8000b2a4:	9a2fe06f          	j	80009446 <tinst_tests_pf+0x157a>
    8000b2a8:	9b2fe06f          	j	8000945a <tinst_tests_pf+0x158e>

000000008000b2ac <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b2ac:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b2ae:	00021597          	auipc	a1,0x21
    8000b2b2:	4aa58593          	addi	a1,a1,1194 # 8002c758 <__func__.0>
    8000b2b6:	00023517          	auipc	a0,0x23
    8000b2ba:	f1250513          	addi	a0,a0,-238 # 8002e1c8 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b2be:	f406                	sd	ra,40(sp)
    8000b2c0:	f022                	sd	s0,32(sp)
    8000b2c2:	ec26                	sd	s1,24(sp)
    8000b2c4:	e84a                	sd	s2,16(sp)
    8000b2c6:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b2c8:	162200ef          	jal	8002b42a <printf>
    8000b2cc:	4529                	li	a0,10
    8000b2ce:	64b1e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8000b2d2:	450d                	li	a0,3
    8000b2d4:	c35f50ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000b2d8:	b08f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b2dc:	ee8f50ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000b2e0:	c9cf50ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);   
    8000b2e4:	4509                	li	a0,2
    8000b2e6:	c23f50ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b2ea:	001005b7          	lui	a1,0x100
    8000b2ee:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b2f2:	05b2                	slli	a1,a1,0xc
    8000b2f4:	00029517          	auipc	a0,0x29
    8000b2f8:	4ec50513          	addi	a0,a0,1260 # 800347e0 <__func__.0+0x68f8>
    8000b2fc:	12e200ef          	jal	8002b42a <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b300:	b0df50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b304:	001007b7          	lui	a5,0x100
    8000b308:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b30c:	07b2                	slli	a5,a5,0xc
    8000b30e:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b312:	0004d417          	auipc	s0,0x4d
    8000b316:	cfe40413          	addi	s0,s0,-770 # 80058010 <excpt>
    8000b31a:	700c                	ld	a1,32(s0)
    8000b31c:	00029517          	auipc	a0,0x29
    8000b320:	4c450513          	addi	a0,a0,1220 # 800347e0 <__func__.0+0x68f8>
    8000b324:	106200ef          	jal	8002b42a <printf>
    printf("%llx\n",excpt.triggered);
    8000b328:	0004d597          	auipc	a1,0x4d
    8000b32c:	ce95c583          	lbu	a1,-791(a1) # 80058011 <excpt+0x1>
    8000b330:	00029517          	auipc	a0,0x29
    8000b334:	4b050513          	addi	a0,a0,1200 # 800347e0 <__func__.0+0x68f8>
    8000b338:	0f2200ef          	jal	8002b42a <printf>
    printf("%llx\n",excpt.cause);
    8000b33c:	640c                	ld	a1,8(s0)
    8000b33e:	00029517          	auipc	a0,0x29
    8000b342:	4a250513          	addi	a0,a0,1186 # 800347e0 <__func__.0+0x68f8>
    8000b346:	0e4200ef          	jal	8002b42a <printf>
    printf("%llx\n",excpt.tval2);
    8000b34a:	740c                	ld	a1,40(s0)
    8000b34c:	00029517          	auipc	a0,0x29
    8000b350:	49450513          	addi	a0,a0,1172 # 800347e0 <__func__.0+0x68f8>
    8000b354:	0d6200ef          	jal	8002b42a <printf>
    printf("%llx\n",excpt.tval);
    8000b358:	6c0c                	ld	a1,24(s0)
    8000b35a:	00029517          	auipc	a0,0x29
    8000b35e:	48650513          	addi	a0,a0,1158 # 800347e0 <__func__.0+0x68f8>
    8000b362:	0c8200ef          	jal	8002b42a <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b366:	08200593          	li	a1,130
    8000b36a:	00025617          	auipc	a2,0x25
    8000b36e:	0a660613          	addi	a2,a2,166 # 80030410 <__func__.0+0x2528>
    8000b372:	00023517          	auipc	a0,0x23
    8000b376:	e6e50513          	addi	a0,a0,-402 # 8002e1e0 <__func__.0+0x2f8>
    8000b37a:	0b0200ef          	jal	8002b42a <printf>
    8000b37e:	0004d797          	auipc	a5,0x4d
    8000b382:	c937c783          	lbu	a5,-877(a5) # 80058011 <excpt+0x1>
    8000b386:	00023597          	auipc	a1,0x23
    8000b38a:	e3258593          	addi	a1,a1,-462 # 8002e1b8 <__func__.0+0x2d0>
    8000b38e:	cf89                	beqz	a5,8000b3a8 <tinst_tests_gpf+0xfc>
    8000b390:	6418                	ld	a4,8(s0)
    8000b392:	47d5                	li	a5,21
    8000b394:	00023597          	auipc	a1,0x23
    8000b398:	e1458593          	addi	a1,a1,-492 # 8002e1a8 <__func__.0+0x2c0>
    8000b39c:	00f70663          	beq	a4,a5,8000b3a8 <tinst_tests_gpf+0xfc>
    8000b3a0:	00023597          	auipc	a1,0x23
    8000b3a4:	e1858593          	addi	a1,a1,-488 # 8002e1b8 <__func__.0+0x2d0>
    8000b3a8:	00023517          	auipc	a0,0x23
    8000b3ac:	e5050513          	addi	a0,a0,-432 # 8002e1f8 <__func__.0+0x310>
    8000b3b0:	07a200ef          	jal	8002b42a <printf>
    8000b3b4:	0004d797          	auipc	a5,0x4d
    8000b3b8:	c5d7c783          	lbu	a5,-931(a5) # 80058011 <excpt+0x1>
    8000b3bc:	c789                	beqz	a5,8000b3c6 <tinst_tests_gpf+0x11a>
    8000b3be:	6418                	ld	a4,8(s0)
    8000b3c0:	47d5                	li	a5,21
    8000b3c2:	00f70c63          	beq	a4,a5,8000b3da <tinst_tests_gpf+0x12e>
    8000b3c6:	00023517          	auipc	a0,0x23
    8000b3ca:	e3a50513          	addi	a0,a0,-454 # 8002e200 <__func__.0+0x318>
    8000b3ce:	05c200ef          	jal	8002b42a <printf>
    8000b3d2:	02900513          	li	a0,41
    8000b3d6:	5431e0ef          	jal	8002a118 <putchar>
    8000b3da:	4529                	li	a0,10
    8000b3dc:	53d1e0ef          	jal	8002a118 <putchar>
    8000b3e0:	0004d797          	auipc	a5,0x4d
    8000b3e4:	c317c783          	lbu	a5,-975(a5) # 80058011 <excpt+0x1>
    8000b3e8:	4481                	li	s1,0
    8000b3ea:	c789                	beqz	a5,8000b3f4 <tinst_tests_gpf+0x148>
    8000b3ec:	6404                	ld	s1,8(s0)
    8000b3ee:	14ad                	addi	s1,s1,-21
    8000b3f0:	0014b493          	seqz	s1,s1
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF 
    );

    TEST_SETUP_EXCEPT();
    8000b3f4:	a19f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b3f8:	001007b7          	lui	a5,0x100
    8000b3fc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b400:	07b2                	slli	a5,a5,0xc
    8000b402:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b406:	00025617          	auipc	a2,0x25
    8000b40a:	04a60613          	addi	a2,a2,74 # 80030450 <__func__.0+0x2568>
    8000b40e:	08200593          	li	a1,130
    8000b412:	00023517          	auipc	a0,0x23
    8000b416:	dce50513          	addi	a0,a0,-562 # 8002e1e0 <__func__.0+0x2f8>
    8000b41a:	010200ef          	jal	8002b42a <printf>
    8000b41e:	0004d797          	auipc	a5,0x4d
    8000b422:	bf37c783          	lbu	a5,-1037(a5) # 80058011 <excpt+0x1>
    8000b426:	e399                	bnez	a5,8000b42c <tinst_tests_gpf+0x180>
    8000b428:	59a0106f          	j	8000c9c2 <tinst_tests_gpf+0x1716>
    8000b42c:	6418                	ld	a4,8(s0)
    8000b42e:	47d5                	li	a5,21
    8000b430:	00023597          	auipc	a1,0x23
    8000b434:	d8858593          	addi	a1,a1,-632 # 8002e1b8 <__func__.0+0x2d0>
    8000b438:	00f71463          	bne	a4,a5,8000b440 <tinst_tests_gpf+0x194>
    8000b43c:	53e0106f          	j	8000c97a <tinst_tests_gpf+0x16ce>
    8000b440:	00023517          	auipc	a0,0x23
    8000b444:	db850513          	addi	a0,a0,-584 # 8002e1f8 <__func__.0+0x310>
    8000b448:	7e31f0ef          	jal	8002b42a <printf>
    8000b44c:	0004d797          	auipc	a5,0x4d
    8000b450:	bc57c783          	lbu	a5,-1083(a5) # 80058011 <excpt+0x1>
    8000b454:	c799                	beqz	a5,8000b462 <tinst_tests_gpf+0x1b6>
    8000b456:	6418                	ld	a4,8(s0)
    8000b458:	47d5                	li	a5,21
    8000b45a:	00f71463          	bne	a4,a5,8000b462 <tinst_tests_gpf+0x1b6>
    8000b45e:	5d00106f          	j	8000ca2e <tinst_tests_gpf+0x1782>
    8000b462:	00023517          	auipc	a0,0x23
    8000b466:	d9e50513          	addi	a0,a0,-610 # 8002e200 <__func__.0+0x318>
    8000b46a:	7c11f0ef          	jal	8002b42a <printf>
    8000b46e:	02900513          	li	a0,41
    8000b472:	4a71e0ef          	jal	8002a118 <putchar>
    8000b476:	4529                	li	a0,10
    8000b478:	4a11e0ef          	jal	8002a118 <putchar>
    8000b47c:	cc89                	beqz	s1,8000b496 <tinst_tests_gpf+0x1ea>
    8000b47e:	0004d797          	auipc	a5,0x4d
    8000b482:	b937c783          	lbu	a5,-1133(a5) # 80058011 <excpt+0x1>
    8000b486:	c799                	beqz	a5,8000b494 <tinst_tests_gpf+0x1e8>
    8000b488:	6418                	ld	a4,8(s0)
    8000b48a:	47d5                	li	a5,21
    8000b48c:	00f71463          	bne	a4,a5,8000b494 <tinst_tests_gpf+0x1e8>
    8000b490:	71d0106f          	j	8000d3ac <tinst_tests_gpf+0x2100>
    8000b494:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b496:	977f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000b49a:	001007b7          	lui	a5,0x100
    8000b49e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b4a2:	07b2                	slli	a5,a5,0xc
    8000b4a4:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000b4a8:	00025617          	auipc	a2,0x25
    8000b4ac:	fe860613          	addi	a2,a2,-24 # 80030490 <__func__.0+0x25a8>
    8000b4b0:	08200593          	li	a1,130
    8000b4b4:	00023517          	auipc	a0,0x23
    8000b4b8:	d2c50513          	addi	a0,a0,-724 # 8002e1e0 <__func__.0+0x2f8>
    8000b4bc:	76f1f0ef          	jal	8002b42a <printf>
    8000b4c0:	0004d797          	auipc	a5,0x4d
    8000b4c4:	b517c783          	lbu	a5,-1199(a5) # 80058011 <excpt+0x1>
    8000b4c8:	c399                	beqz	a5,8000b4ce <tinst_tests_gpf+0x222>
    8000b4ca:	5040106f          	j	8000c9ce <tinst_tests_gpf+0x1722>
    8000b4ce:	00023597          	auipc	a1,0x23
    8000b4d2:	cea58593          	addi	a1,a1,-790 # 8002e1b8 <__func__.0+0x2d0>
    8000b4d6:	00023517          	auipc	a0,0x23
    8000b4da:	d2250513          	addi	a0,a0,-734 # 8002e1f8 <__func__.0+0x310>
    8000b4de:	74d1f0ef          	jal	8002b42a <printf>
    8000b4e2:	0004d797          	auipc	a5,0x4d
    8000b4e6:	b2f7c783          	lbu	a5,-1233(a5) # 80058011 <excpt+0x1>
    8000b4ea:	c799                	beqz	a5,8000b4f8 <tinst_tests_gpf+0x24c>
    8000b4ec:	6418                	ld	a4,8(s0)
    8000b4ee:	47d5                	li	a5,21
    8000b4f0:	00f71463          	bne	a4,a5,8000b4f8 <tinst_tests_gpf+0x24c>
    8000b4f4:	1970106f          	j	8000ce8a <tinst_tests_gpf+0x1bde>
    8000b4f8:	00023517          	auipc	a0,0x23
    8000b4fc:	d0850513          	addi	a0,a0,-760 # 8002e200 <__func__.0+0x318>
    8000b500:	72b1f0ef          	jal	8002b42a <printf>
    8000b504:	02900513          	li	a0,41
    8000b508:	4111e0ef          	jal	8002a118 <putchar>
    8000b50c:	4529                	li	a0,10
    8000b50e:	40b1e0ef          	jal	8002a118 <putchar>
    8000b512:	cc89                	beqz	s1,8000b52c <tinst_tests_gpf+0x280>
    8000b514:	0004d797          	auipc	a5,0x4d
    8000b518:	afd7c783          	lbu	a5,-1283(a5) # 80058011 <excpt+0x1>
    8000b51c:	c799                	beqz	a5,8000b52a <tinst_tests_gpf+0x27e>
    8000b51e:	6418                	ld	a4,8(s0)
    8000b520:	47d5                	li	a5,21
    8000b522:	00f71463          	bne	a4,a5,8000b52a <tinst_tests_gpf+0x27e>
    8000b526:	6c10106f          	j	8000d3e6 <tinst_tests_gpf+0x213a>
    8000b52a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b52c:	8e1f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000b530:	001007b7          	lui	a5,0x100
    8000b534:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b538:	07b2                	slli	a5,a5,0xc
    8000b53a:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000b53e:	00025617          	auipc	a2,0x25
    8000b542:	f9260613          	addi	a2,a2,-110 # 800304d0 <__func__.0+0x25e8>
    8000b546:	08200593          	li	a1,130
    8000b54a:	00023517          	auipc	a0,0x23
    8000b54e:	c9650513          	addi	a0,a0,-874 # 8002e1e0 <__func__.0+0x2f8>
    8000b552:	6d91f0ef          	jal	8002b42a <printf>
    8000b556:	0004d797          	auipc	a5,0x4d
    8000b55a:	abb7c783          	lbu	a5,-1349(a5) # 80058011 <excpt+0x1>
    8000b55e:	e399                	bnez	a5,8000b564 <tinst_tests_gpf+0x2b8>
    8000b560:	5520106f          	j	8000cab2 <tinst_tests_gpf+0x1806>
    8000b564:	6418                	ld	a4,8(s0)
    8000b566:	47d5                	li	a5,21
    8000b568:	00023597          	auipc	a1,0x23
    8000b56c:	c5058593          	addi	a1,a1,-944 # 8002e1b8 <__func__.0+0x2d0>
    8000b570:	00f71463          	bne	a4,a5,8000b578 <tinst_tests_gpf+0x2cc>
    8000b574:	4f60106f          	j	8000ca6a <tinst_tests_gpf+0x17be>
    8000b578:	00023517          	auipc	a0,0x23
    8000b57c:	c8050513          	addi	a0,a0,-896 # 8002e1f8 <__func__.0+0x310>
    8000b580:	6ab1f0ef          	jal	8002b42a <printf>
    8000b584:	0004d797          	auipc	a5,0x4d
    8000b588:	a8d7c783          	lbu	a5,-1395(a5) # 80058011 <excpt+0x1>
    8000b58c:	c799                	beqz	a5,8000b59a <tinst_tests_gpf+0x2ee>
    8000b58e:	6418                	ld	a4,8(s0)
    8000b590:	47d5                	li	a5,21
    8000b592:	00f71463          	bne	a4,a5,8000b59a <tinst_tests_gpf+0x2ee>
    8000b596:	1310106f          	j	8000cec6 <tinst_tests_gpf+0x1c1a>
    8000b59a:	00023517          	auipc	a0,0x23
    8000b59e:	c6650513          	addi	a0,a0,-922 # 8002e200 <__func__.0+0x318>
    8000b5a2:	6891f0ef          	jal	8002b42a <printf>
    8000b5a6:	02900513          	li	a0,41
    8000b5aa:	36f1e0ef          	jal	8002a118 <putchar>
    8000b5ae:	4529                	li	a0,10
    8000b5b0:	3691e0ef          	jal	8002a118 <putchar>
    8000b5b4:	cc89                	beqz	s1,8000b5ce <tinst_tests_gpf+0x322>
    8000b5b6:	0004d797          	auipc	a5,0x4d
    8000b5ba:	a5b7c783          	lbu	a5,-1445(a5) # 80058011 <excpt+0x1>
    8000b5be:	c799                	beqz	a5,8000b5cc <tinst_tests_gpf+0x320>
    8000b5c0:	6418                	ld	a4,8(s0)
    8000b5c2:	47d5                	li	a5,21
    8000b5c4:	00f71463          	bne	a4,a5,8000b5cc <tinst_tests_gpf+0x320>
    8000b5c8:	6590106f          	j	8000d420 <tinst_tests_gpf+0x2174>
    8000b5cc:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b5ce:	83ff50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000b5d2:	001007b7          	lui	a5,0x100
    8000b5d6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b5da:	07b2                	slli	a5,a5,0xc
    8000b5dc:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000b5e0:	00025617          	auipc	a2,0x25
    8000b5e4:	f3060613          	addi	a2,a2,-208 # 80030510 <__func__.0+0x2628>
    8000b5e8:	08200593          	li	a1,130
    8000b5ec:	00023517          	auipc	a0,0x23
    8000b5f0:	bf450513          	addi	a0,a0,-1036 # 8002e1e0 <__func__.0+0x2f8>
    8000b5f4:	6371f0ef          	jal	8002b42a <printf>
    8000b5f8:	0004d797          	auipc	a5,0x4d
    8000b5fc:	a197c783          	lbu	a5,-1511(a5) # 80058011 <excpt+0x1>
    8000b600:	e399                	bnez	a5,8000b606 <tinst_tests_gpf+0x35a>
    8000b602:	5040106f          	j	8000cb06 <tinst_tests_gpf+0x185a>
    8000b606:	6418                	ld	a4,8(s0)
    8000b608:	47d5                	li	a5,21
    8000b60a:	00023597          	auipc	a1,0x23
    8000b60e:	bae58593          	addi	a1,a1,-1106 # 8002e1b8 <__func__.0+0x2d0>
    8000b612:	00f71463          	bne	a4,a5,8000b61a <tinst_tests_gpf+0x36e>
    8000b616:	4a80106f          	j	8000cabe <tinst_tests_gpf+0x1812>
    8000b61a:	00023517          	auipc	a0,0x23
    8000b61e:	bde50513          	addi	a0,a0,-1058 # 8002e1f8 <__func__.0+0x310>
    8000b622:	6091f0ef          	jal	8002b42a <printf>
    8000b626:	0004d797          	auipc	a5,0x4d
    8000b62a:	9eb7c783          	lbu	a5,-1557(a5) # 80058011 <excpt+0x1>
    8000b62e:	c799                	beqz	a5,8000b63c <tinst_tests_gpf+0x390>
    8000b630:	6418                	ld	a4,8(s0)
    8000b632:	47d5                	li	a5,21
    8000b634:	00f71463          	bne	a4,a5,8000b63c <tinst_tests_gpf+0x390>
    8000b638:	65d0106f          	j	8000d494 <tinst_tests_gpf+0x21e8>
    8000b63c:	00023517          	auipc	a0,0x23
    8000b640:	bc450513          	addi	a0,a0,-1084 # 8002e200 <__func__.0+0x318>
    8000b644:	5e71f0ef          	jal	8002b42a <printf>
    8000b648:	02900513          	li	a0,41
    8000b64c:	2cd1e0ef          	jal	8002a118 <putchar>
    8000b650:	4529                	li	a0,10
    8000b652:	2c71e0ef          	jal	8002a118 <putchar>
    8000b656:	cc89                	beqz	s1,8000b670 <tinst_tests_gpf+0x3c4>
    8000b658:	0004d797          	auipc	a5,0x4d
    8000b65c:	9b97c783          	lbu	a5,-1607(a5) # 80058011 <excpt+0x1>
    8000b660:	c799                	beqz	a5,8000b66e <tinst_tests_gpf+0x3c2>
    8000b662:	6418                	ld	a4,8(s0)
    8000b664:	47d5                	li	a5,21
    8000b666:	00f71463          	bne	a4,a5,8000b66e <tinst_tests_gpf+0x3c2>
    8000b66a:	5f10106f          	j	8000d45a <tinst_tests_gpf+0x21ae>
    8000b66e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b670:	f9cf50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000b674:	001007b7          	lui	a5,0x100
    8000b678:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b67c:	07b2                	slli	a5,a5,0xc
    8000b67e:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000b682:	00025617          	auipc	a2,0x25
    8000b686:	ece60613          	addi	a2,a2,-306 # 80030550 <__func__.0+0x2668>
    8000b68a:	08200593          	li	a1,130
    8000b68e:	00023517          	auipc	a0,0x23
    8000b692:	b5250513          	addi	a0,a0,-1198 # 8002e1e0 <__func__.0+0x2f8>
    8000b696:	5951f0ef          	jal	8002b42a <printf>
    8000b69a:	0004d797          	auipc	a5,0x4d
    8000b69e:	9777c783          	lbu	a5,-1673(a5) # 80058011 <excpt+0x1>
    8000b6a2:	e399                	bnez	a5,8000b6a8 <tinst_tests_gpf+0x3fc>
    8000b6a4:	4b60106f          	j	8000cb5a <tinst_tests_gpf+0x18ae>
    8000b6a8:	6418                	ld	a4,8(s0)
    8000b6aa:	47d5                	li	a5,21
    8000b6ac:	00023597          	auipc	a1,0x23
    8000b6b0:	b0c58593          	addi	a1,a1,-1268 # 8002e1b8 <__func__.0+0x2d0>
    8000b6b4:	00f71463          	bne	a4,a5,8000b6bc <tinst_tests_gpf+0x410>
    8000b6b8:	45a0106f          	j	8000cb12 <tinst_tests_gpf+0x1866>
    8000b6bc:	00023517          	auipc	a0,0x23
    8000b6c0:	b3c50513          	addi	a0,a0,-1220 # 8002e1f8 <__func__.0+0x310>
    8000b6c4:	5671f0ef          	jal	8002b42a <printf>
    8000b6c8:	0004d797          	auipc	a5,0x4d
    8000b6cc:	9497c783          	lbu	a5,-1719(a5) # 80058011 <excpt+0x1>
    8000b6d0:	c799                	beqz	a5,8000b6de <tinst_tests_gpf+0x432>
    8000b6d2:	6418                	ld	a4,8(s0)
    8000b6d4:	47d5                	li	a5,21
    8000b6d6:	00f71463          	bne	a4,a5,8000b6de <tinst_tests_gpf+0x432>
    8000b6da:	65b0106f          	j	8000d534 <tinst_tests_gpf+0x2288>
    8000b6de:	00023517          	auipc	a0,0x23
    8000b6e2:	b2250513          	addi	a0,a0,-1246 # 8002e200 <__func__.0+0x318>
    8000b6e6:	5451f0ef          	jal	8002b42a <printf>
    8000b6ea:	02900513          	li	a0,41
    8000b6ee:	22b1e0ef          	jal	8002a118 <putchar>
    8000b6f2:	4529                	li	a0,10
    8000b6f4:	2251e0ef          	jal	8002a118 <putchar>
    8000b6f8:	c889                	beqz	s1,8000b70a <tinst_tests_gpf+0x45e>
    8000b6fa:	0004d797          	auipc	a5,0x4d
    8000b6fe:	9177c783          	lbu	a5,-1769(a5) # 80058011 <excpt+0x1>
    8000b702:	c399                	beqz	a5,8000b708 <tinst_tests_gpf+0x45c>
    8000b704:	7fe0106f          	j	8000cf02 <tinst_tests_gpf+0x1c56>
    8000b708:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b70a:	f02f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000b70e:	001007b7          	lui	a5,0x100
    8000b712:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b716:	07b2                	slli	a5,a5,0xc
    8000b718:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000b71c:	00025617          	auipc	a2,0x25
    8000b720:	e7460613          	addi	a2,a2,-396 # 80030590 <__func__.0+0x26a8>
    8000b724:	08200593          	li	a1,130
    8000b728:	00023517          	auipc	a0,0x23
    8000b72c:	ab850513          	addi	a0,a0,-1352 # 8002e1e0 <__func__.0+0x2f8>
    8000b730:	4fb1f0ef          	jal	8002b42a <printf>
    8000b734:	0004d797          	auipc	a5,0x4d
    8000b738:	8dd7c783          	lbu	a5,-1827(a5) # 80058011 <excpt+0x1>
    8000b73c:	e399                	bnez	a5,8000b742 <tinst_tests_gpf+0x496>
    8000b73e:	4700106f          	j	8000cbae <tinst_tests_gpf+0x1902>
    8000b742:	6418                	ld	a4,8(s0)
    8000b744:	47d5                	li	a5,21
    8000b746:	00023597          	auipc	a1,0x23
    8000b74a:	a7258593          	addi	a1,a1,-1422 # 8002e1b8 <__func__.0+0x2d0>
    8000b74e:	00f71463          	bne	a4,a5,8000b756 <tinst_tests_gpf+0x4aa>
    8000b752:	4140106f          	j	8000cb66 <tinst_tests_gpf+0x18ba>
    8000b756:	00023517          	auipc	a0,0x23
    8000b75a:	aa250513          	addi	a0,a0,-1374 # 8002e1f8 <__func__.0+0x310>
    8000b75e:	4cd1f0ef          	jal	8002b42a <printf>
    8000b762:	0004d797          	auipc	a5,0x4d
    8000b766:	8af7c783          	lbu	a5,-1873(a5) # 80058011 <excpt+0x1>
    8000b76a:	c799                	beqz	a5,8000b778 <tinst_tests_gpf+0x4cc>
    8000b76c:	6418                	ld	a4,8(s0)
    8000b76e:	47d5                	li	a5,21
    8000b770:	00f71463          	bne	a4,a5,8000b778 <tinst_tests_gpf+0x4cc>
    8000b774:	6530106f          	j	8000d5c6 <tinst_tests_gpf+0x231a>
    8000b778:	00023517          	auipc	a0,0x23
    8000b77c:	a8850513          	addi	a0,a0,-1400 # 8002e200 <__func__.0+0x318>
    8000b780:	4ab1f0ef          	jal	8002b42a <printf>
    8000b784:	02900513          	li	a0,41
    8000b788:	1911e0ef          	jal	8002a118 <putchar>
    8000b78c:	4529                	li	a0,10
    8000b78e:	18b1e0ef          	jal	8002a118 <putchar>
    8000b792:	c889                	beqz	s1,8000b7a4 <tinst_tests_gpf+0x4f8>
    8000b794:	0004d797          	auipc	a5,0x4d
    8000b798:	87d7c783          	lbu	a5,-1923(a5) # 80058011 <excpt+0x1>
    8000b79c:	c399                	beqz	a5,8000b7a2 <tinst_tests_gpf+0x4f6>
    8000b79e:	0130106f          	j	8000cfb0 <tinst_tests_gpf+0x1d04>
    8000b7a2:	4481                	li	s1,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000b7a4:	e68f50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000b7a8:	001007b7          	lui	a5,0x100
    8000b7ac:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b7b0:	07b2                	slli	a5,a5,0xc
    8000b7b2:	573d                	li	a4,-17
    8000b7b4:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000b7b8:	00025617          	auipc	a2,0x25
    8000b7bc:	e1860613          	addi	a2,a2,-488 # 800305d0 <__func__.0+0x26e8>
    8000b7c0:	08200593          	li	a1,130
    8000b7c4:	00023517          	auipc	a0,0x23
    8000b7c8:	a1c50513          	addi	a0,a0,-1508 # 8002e1e0 <__func__.0+0x2f8>
    8000b7cc:	45f1f0ef          	jal	8002b42a <printf>
    8000b7d0:	0004d797          	auipc	a5,0x4d
    8000b7d4:	8417c783          	lbu	a5,-1983(a5) # 80058011 <excpt+0x1>
    8000b7d8:	e399                	bnez	a5,8000b7de <tinst_tests_gpf+0x532>
    8000b7da:	42e0106f          	j	8000cc08 <tinst_tests_gpf+0x195c>
    8000b7de:	6418                	ld	a4,8(s0)
    8000b7e0:	47dd                	li	a5,23
    8000b7e2:	00023597          	auipc	a1,0x23
    8000b7e6:	9d658593          	addi	a1,a1,-1578 # 8002e1b8 <__func__.0+0x2d0>
    8000b7ea:	00f71463          	bne	a4,a5,8000b7f2 <tinst_tests_gpf+0x546>
    8000b7ee:	3cc0106f          	j	8000cbba <tinst_tests_gpf+0x190e>
    8000b7f2:	00023517          	auipc	a0,0x23
    8000b7f6:	a0650513          	addi	a0,a0,-1530 # 8002e1f8 <__func__.0+0x310>
    8000b7fa:	4311f0ef          	jal	8002b42a <printf>
    8000b7fe:	0004d797          	auipc	a5,0x4d
    8000b802:	8137c783          	lbu	a5,-2029(a5) # 80058011 <excpt+0x1>
    8000b806:	c799                	beqz	a5,8000b814 <tinst_tests_gpf+0x568>
    8000b808:	6418                	ld	a4,8(s0)
    8000b80a:	47dd                	li	a5,23
    8000b80c:	00f71463          	bne	a4,a5,8000b814 <tinst_tests_gpf+0x568>
    8000b810:	64d0106f          	j	8000d65c <tinst_tests_gpf+0x23b0>
    8000b814:	00023517          	auipc	a0,0x23
    8000b818:	9ec50513          	addi	a0,a0,-1556 # 8002e200 <__func__.0+0x318>
    8000b81c:	40f1f0ef          	jal	8002b42a <printf>
    8000b820:	02900513          	li	a0,41
    8000b824:	0f51e0ef          	jal	8002a118 <putchar>
    8000b828:	4529                	li	a0,10
    8000b82a:	0ef1e0ef          	jal	8002a118 <putchar>
    8000b82e:	c889                	beqz	s1,8000b840 <tinst_tests_gpf+0x594>
    8000b830:	0004c797          	auipc	a5,0x4c
    8000b834:	7e17c783          	lbu	a5,2017(a5) # 80058011 <excpt+0x1>
    8000b838:	c399                	beqz	a5,8000b83e <tinst_tests_gpf+0x592>
    8000b83a:	0250106f          	j	8000d05e <tinst_tests_gpf+0x1db2>
    8000b83e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b840:	dccf50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000b844:	001007b7          	lui	a5,0x100
    8000b848:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b84c:	7771                	lui	a4,0xffffc
    8000b84e:	07b2                	slli	a5,a5,0xc
    8000b850:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000b854:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000b858:	00025617          	auipc	a2,0x25
    8000b85c:	db860613          	addi	a2,a2,-584 # 80030610 <__func__.0+0x2728>
    8000b860:	08200593          	li	a1,130
    8000b864:	00023517          	auipc	a0,0x23
    8000b868:	97c50513          	addi	a0,a0,-1668 # 8002e1e0 <__func__.0+0x2f8>
    8000b86c:	3bf1f0ef          	jal	8002b42a <printf>
    8000b870:	0004c797          	auipc	a5,0x4c
    8000b874:	7a17c783          	lbu	a5,1953(a5) # 80058011 <excpt+0x1>
    8000b878:	e399                	bnez	a5,8000b87e <tinst_tests_gpf+0x5d2>
    8000b87a:	3e80106f          	j	8000cc62 <tinst_tests_gpf+0x19b6>
    8000b87e:	6418                	ld	a4,8(s0)
    8000b880:	47dd                	li	a5,23
    8000b882:	00023597          	auipc	a1,0x23
    8000b886:	93658593          	addi	a1,a1,-1738 # 8002e1b8 <__func__.0+0x2d0>
    8000b88a:	00f71463          	bne	a4,a5,8000b892 <tinst_tests_gpf+0x5e6>
    8000b88e:	3860106f          	j	8000cc14 <tinst_tests_gpf+0x1968>
    8000b892:	00023517          	auipc	a0,0x23
    8000b896:	96650513          	addi	a0,a0,-1690 # 8002e1f8 <__func__.0+0x310>
    8000b89a:	3911f0ef          	jal	8002b42a <printf>
    8000b89e:	0004c797          	auipc	a5,0x4c
    8000b8a2:	7737c783          	lbu	a5,1907(a5) # 80058011 <excpt+0x1>
    8000b8a6:	c799                	beqz	a5,8000b8b4 <tinst_tests_gpf+0x608>
    8000b8a8:	6418                	ld	a4,8(s0)
    8000b8aa:	47dd                	li	a5,23
    8000b8ac:	00f71463          	bne	a4,a5,8000b8b4 <tinst_tests_gpf+0x608>
    8000b8b0:	6490106f          	j	8000d6f8 <tinst_tests_gpf+0x244c>
    8000b8b4:	00023517          	auipc	a0,0x23
    8000b8b8:	94c50513          	addi	a0,a0,-1716 # 8002e200 <__func__.0+0x318>
    8000b8bc:	36f1f0ef          	jal	8002b42a <printf>
    8000b8c0:	02900513          	li	a0,41
    8000b8c4:	0551e0ef          	jal	8002a118 <putchar>
    8000b8c8:	4529                	li	a0,10
    8000b8ca:	04f1e0ef          	jal	8002a118 <putchar>
    8000b8ce:	c889                	beqz	s1,8000b8e0 <tinst_tests_gpf+0x634>
    8000b8d0:	0004c797          	auipc	a5,0x4c
    8000b8d4:	7417c783          	lbu	a5,1857(a5) # 80058011 <excpt+0x1>
    8000b8d8:	c399                	beqz	a5,8000b8de <tinst_tests_gpf+0x632>
    8000b8da:	7d20106f          	j	8000d0ac <tinst_tests_gpf+0x1e00>
    8000b8de:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b8e0:	d2cf50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000b8e4:	001007b7          	lui	a5,0x100
    8000b8e8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b8ec:	deadc737          	lui	a4,0xdeadc
    8000b8f0:	07b2                	slli	a5,a5,0xc
    8000b8f2:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000b8f6:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000b8fa:	00025617          	auipc	a2,0x25
    8000b8fe:	d5660613          	addi	a2,a2,-682 # 80030650 <__func__.0+0x2768>
    8000b902:	08200593          	li	a1,130
    8000b906:	00023517          	auipc	a0,0x23
    8000b90a:	8da50513          	addi	a0,a0,-1830 # 8002e1e0 <__func__.0+0x2f8>
    8000b90e:	31d1f0ef          	jal	8002b42a <printf>
    8000b912:	0004c797          	auipc	a5,0x4c
    8000b916:	6ff7c783          	lbu	a5,1791(a5) # 80058011 <excpt+0x1>
    8000b91a:	e399                	bnez	a5,8000b920 <tinst_tests_gpf+0x674>
    8000b91c:	3a00106f          	j	8000ccbc <tinst_tests_gpf+0x1a10>
    8000b920:	6418                	ld	a4,8(s0)
    8000b922:	47dd                	li	a5,23
    8000b924:	00023597          	auipc	a1,0x23
    8000b928:	89458593          	addi	a1,a1,-1900 # 8002e1b8 <__func__.0+0x2d0>
    8000b92c:	00f71463          	bne	a4,a5,8000b934 <tinst_tests_gpf+0x688>
    8000b930:	33e0106f          	j	8000cc6e <tinst_tests_gpf+0x19c2>
    8000b934:	00023517          	auipc	a0,0x23
    8000b938:	8c450513          	addi	a0,a0,-1852 # 8002e1f8 <__func__.0+0x310>
    8000b93c:	2ef1f0ef          	jal	8002b42a <printf>
    8000b940:	0004c797          	auipc	a5,0x4c
    8000b944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    8000b948:	c799                	beqz	a5,8000b956 <tinst_tests_gpf+0x6aa>
    8000b94a:	6418                	ld	a4,8(s0)
    8000b94c:	47dd                	li	a5,23
    8000b94e:	00f71463          	bne	a4,a5,8000b956 <tinst_tests_gpf+0x6aa>
    8000b952:	6430106f          	j	8000d794 <tinst_tests_gpf+0x24e8>
    8000b956:	00023517          	auipc	a0,0x23
    8000b95a:	8aa50513          	addi	a0,a0,-1878 # 8002e200 <__func__.0+0x318>
    8000b95e:	2cd1f0ef          	jal	8002b42a <printf>
    8000b962:	02900513          	li	a0,41
    8000b966:	7b21e0ef          	jal	8002a118 <putchar>
    8000b96a:	4529                	li	a0,10
    8000b96c:	7ac1e0ef          	jal	8002a118 <putchar>
    8000b970:	c889                	beqz	s1,8000b982 <tinst_tests_gpf+0x6d6>
    8000b972:	0004c797          	auipc	a5,0x4c
    8000b976:	69f7c783          	lbu	a5,1695(a5) # 80058011 <excpt+0x1>
    8000b97a:	c399                	beqz	a5,8000b980 <tinst_tests_gpf+0x6d4>
    8000b97c:	77e0106f          	j	8000d0fa <tinst_tests_gpf+0x1e4e>
    8000b980:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b982:	c8af50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000b986:	37ab77b7          	lui	a5,0x37ab7
    8000b98a:	00100737          	lui	a4,0x100
    8000b98e:	078a                	slli	a5,a5,0x2
    8000b990:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000b994:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000b998:	0732                	slli	a4,a4,0xc
    8000b99a:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000b99e:	00025617          	auipc	a2,0x25
    8000b9a2:	cf260613          	addi	a2,a2,-782 # 80030690 <__func__.0+0x27a8>
    8000b9a6:	08200593          	li	a1,130
    8000b9aa:	00023517          	auipc	a0,0x23
    8000b9ae:	83650513          	addi	a0,a0,-1994 # 8002e1e0 <__func__.0+0x2f8>
    8000b9b2:	2791f0ef          	jal	8002b42a <printf>
    8000b9b6:	0004c797          	auipc	a5,0x4c
    8000b9ba:	65b7c783          	lbu	a5,1627(a5) # 80058011 <excpt+0x1>
    8000b9be:	e399                	bnez	a5,8000b9c4 <tinst_tests_gpf+0x718>
    8000b9c0:	3560106f          	j	8000cd16 <tinst_tests_gpf+0x1a6a>
    8000b9c4:	6418                	ld	a4,8(s0)
    8000b9c6:	47dd                	li	a5,23
    8000b9c8:	00022597          	auipc	a1,0x22
    8000b9cc:	7f058593          	addi	a1,a1,2032 # 8002e1b8 <__func__.0+0x2d0>
    8000b9d0:	00f71463          	bne	a4,a5,8000b9d8 <tinst_tests_gpf+0x72c>
    8000b9d4:	2f40106f          	j	8000ccc8 <tinst_tests_gpf+0x1a1c>
    8000b9d8:	00023517          	auipc	a0,0x23
    8000b9dc:	82050513          	addi	a0,a0,-2016 # 8002e1f8 <__func__.0+0x310>
    8000b9e0:	24b1f0ef          	jal	8002b42a <printf>
    8000b9e4:	0004c797          	auipc	a5,0x4c
    8000b9e8:	62d7c783          	lbu	a5,1581(a5) # 80058011 <excpt+0x1>
    8000b9ec:	c799                	beqz	a5,8000b9fa <tinst_tests_gpf+0x74e>
    8000b9ee:	6418                	ld	a4,8(s0)
    8000b9f0:	47dd                	li	a5,23
    8000b9f2:	00f71463          	bne	a4,a5,8000b9fa <tinst_tests_gpf+0x74e>
    8000b9f6:	63b0106f          	j	8000d830 <tinst_tests_gpf+0x2584>
    8000b9fa:	00023517          	auipc	a0,0x23
    8000b9fe:	80650513          	addi	a0,a0,-2042 # 8002e200 <__func__.0+0x318>
    8000ba02:	2291f0ef          	jal	8002b42a <printf>
    8000ba06:	02900513          	li	a0,41
    8000ba0a:	70e1e0ef          	jal	8002a118 <putchar>
    8000ba0e:	4529                	li	a0,10
    8000ba10:	7081e0ef          	jal	8002a118 <putchar>
    8000ba14:	c889                	beqz	s1,8000ba26 <tinst_tests_gpf+0x77a>
    8000ba16:	0004c797          	auipc	a5,0x4c
    8000ba1a:	5fb7c783          	lbu	a5,1531(a5) # 80058011 <excpt+0x1>
    8000ba1e:	c399                	beqz	a5,8000ba24 <tinst_tests_gpf+0x778>
    8000ba20:	7280106f          	j	8000d148 <tinst_tests_gpf+0x1e9c>
    8000ba24:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000ba26:	be6f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000ba2a:	00100537          	lui	a0,0x100
    8000ba2e:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000ba32:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000ba34:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000ba36:	00025617          	auipc	a2,0x25
    8000ba3a:	c9a60613          	addi	a2,a2,-870 # 800306d0 <__func__.0+0x27e8>
    8000ba3e:	08200593          	li	a1,130
    8000ba42:	00022517          	auipc	a0,0x22
    8000ba46:	79e50513          	addi	a0,a0,1950 # 8002e1e0 <__func__.0+0x2f8>
    8000ba4a:	1e11f0ef          	jal	8002b42a <printf>
    8000ba4e:	0004c797          	auipc	a5,0x4c
    8000ba52:	5c37c783          	lbu	a5,1475(a5) # 80058011 <excpt+0x1>
    8000ba56:	c799                	beqz	a5,8000ba64 <tinst_tests_gpf+0x7b8>
    8000ba58:	6418                	ld	a4,8(s0)
    8000ba5a:	47d5                	li	a5,21
    8000ba5c:	00f71463          	bne	a4,a5,8000ba64 <tinst_tests_gpf+0x7b8>
    8000ba60:	0370106f          	j	8000d296 <tinst_tests_gpf+0x1fea>
    8000ba64:	00022597          	auipc	a1,0x22
    8000ba68:	75458593          	addi	a1,a1,1876 # 8002e1b8 <__func__.0+0x2d0>
    8000ba6c:	00022517          	auipc	a0,0x22
    8000ba70:	78c50513          	addi	a0,a0,1932 # 8002e1f8 <__func__.0+0x310>
    8000ba74:	1b71f0ef          	jal	8002b42a <printf>
    8000ba78:	0004c797          	auipc	a5,0x4c
    8000ba7c:	5997c783          	lbu	a5,1433(a5) # 80058011 <excpt+0x1>
    8000ba80:	c799                	beqz	a5,8000ba8e <tinst_tests_gpf+0x7e2>
    8000ba82:	6418                	ld	a4,8(s0)
    8000ba84:	47d5                	li	a5,21
    8000ba86:	00f71463          	bne	a4,a5,8000ba8e <tinst_tests_gpf+0x7e2>
    8000ba8a:	6430106f          	j	8000d8cc <tinst_tests_gpf+0x2620>
    8000ba8e:	00022517          	auipc	a0,0x22
    8000ba92:	77250513          	addi	a0,a0,1906 # 8002e200 <__func__.0+0x318>
    8000ba96:	1951f0ef          	jal	8002b42a <printf>
    8000ba9a:	02900513          	li	a0,41
    8000ba9e:	67a1e0ef          	jal	8002a118 <putchar>
    8000baa2:	4529                	li	a0,10
    8000baa4:	6741e0ef          	jal	8002a118 <putchar>
    8000baa8:	c889                	beqz	s1,8000baba <tinst_tests_gpf+0x80e>
    8000baaa:	0004c797          	auipc	a5,0x4c
    8000baae:	5677c783          	lbu	a5,1383(a5) # 80058011 <excpt+0x1>
    8000bab2:	c399                	beqz	a5,8000bab8 <tinst_tests_gpf+0x80c>
    8000bab4:	6e20106f          	j	8000d196 <tinst_tests_gpf+0x1eea>
    8000bab8:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000baba:	b52f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000babe:	00100537          	lui	a0,0x100
    8000bac2:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bac6:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bac8:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000baca:	00025617          	auipc	a2,0x25
    8000bace:	c4660613          	addi	a2,a2,-954 # 80030710 <__func__.0+0x2828>
    return value;
    8000bad2:	892e                	mv	s2,a1
    8000bad4:	00022517          	auipc	a0,0x22
    8000bad8:	70c50513          	addi	a0,a0,1804 # 8002e1e0 <__func__.0+0x2f8>
    8000badc:	08200593          	li	a1,130
    8000bae0:	14b1f0ef          	jal	8002b42a <printf>
    8000bae4:	0004c797          	auipc	a5,0x4c
    8000bae8:	52d7c783          	lbu	a5,1325(a5) # 80058011 <excpt+0x1>
    8000baec:	c799                	beqz	a5,8000bafa <tinst_tests_gpf+0x84e>
    8000baee:	6418                	ld	a4,8(s0)
    8000baf0:	47d5                	li	a5,21
    8000baf2:	00f71463          	bne	a4,a5,8000bafa <tinst_tests_gpf+0x84e>
    8000baf6:	7f60106f          	j	8000d2ec <tinst_tests_gpf+0x2040>
    8000bafa:	00022597          	auipc	a1,0x22
    8000bafe:	6be58593          	addi	a1,a1,1726 # 8002e1b8 <__func__.0+0x2d0>
    8000bb02:	00022517          	auipc	a0,0x22
    8000bb06:	6f650513          	addi	a0,a0,1782 # 8002e1f8 <__func__.0+0x310>
    8000bb0a:	1211f0ef          	jal	8002b42a <printf>
    8000bb0e:	0004c797          	auipc	a5,0x4c
    8000bb12:	5037c783          	lbu	a5,1283(a5) # 80058011 <excpt+0x1>
    8000bb16:	c799                	beqz	a5,8000bb24 <tinst_tests_gpf+0x878>
    8000bb18:	6418                	ld	a4,8(s0)
    8000bb1a:	47d5                	li	a5,21
    8000bb1c:	00f71463          	bne	a4,a5,8000bb24 <tinst_tests_gpf+0x878>
    8000bb20:	6370106f          	j	8000d956 <tinst_tests_gpf+0x26aa>
    8000bb24:	00022517          	auipc	a0,0x22
    8000bb28:	6dc50513          	addi	a0,a0,1756 # 8002e200 <__func__.0+0x318>
    8000bb2c:	0ff1f0ef          	jal	8002b42a <printf>
    8000bb30:	02900513          	li	a0,41
    8000bb34:	5e41e0ef          	jal	8002a118 <putchar>
    8000bb38:	4529                	li	a0,10
    8000bb3a:	5de1e0ef          	jal	8002a118 <putchar>
    8000bb3e:	c889                	beqz	s1,8000bb50 <tinst_tests_gpf+0x8a4>
    8000bb40:	0004c797          	auipc	a5,0x4c
    8000bb44:	4d17c783          	lbu	a5,1233(a5) # 80058011 <excpt+0x1>
    8000bb48:	c399                	beqz	a5,8000bb4e <tinst_tests_gpf+0x8a2>
    8000bb4a:	68a0106f          	j	8000d1d4 <tinst_tests_gpf+0x1f28>
    8000bb4e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bb50:	abcf50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bb54:	00100537          	lui	a0,0x100
    8000bb58:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bb5c:	0532                	slli	a0,a0,0xc
    register uint64_t _value asm("a1") = value;
    8000bb5e:	85ca                	mv	a1,s2
    asm volatile(
    8000bb60:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bb62:	00025617          	auipc	a2,0x25
    8000bb66:	b6e60613          	addi	a2,a2,-1170 # 800306d0 <__func__.0+0x27e8>
    8000bb6a:	08200593          	li	a1,130
    8000bb6e:	00022517          	auipc	a0,0x22
    8000bb72:	67250513          	addi	a0,a0,1650 # 8002e1e0 <__func__.0+0x2f8>
    8000bb76:	0b51f0ef          	jal	8002b42a <printf>
    8000bb7a:	0004c797          	auipc	a5,0x4c
    8000bb7e:	4977c783          	lbu	a5,1175(a5) # 80058011 <excpt+0x1>
    8000bb82:	c799                	beqz	a5,8000bb90 <tinst_tests_gpf+0x8e4>
    8000bb84:	6418                	ld	a4,8(s0)
    8000bb86:	47dd                	li	a5,23
    8000bb88:	00f71463          	bne	a4,a5,8000bb90 <tinst_tests_gpf+0x8e4>
    8000bb8c:	7b60106f          	j	8000d342 <tinst_tests_gpf+0x2096>
    8000bb90:	00022597          	auipc	a1,0x22
    8000bb94:	62858593          	addi	a1,a1,1576 # 8002e1b8 <__func__.0+0x2d0>
    8000bb98:	00022517          	auipc	a0,0x22
    8000bb9c:	66050513          	addi	a0,a0,1632 # 8002e1f8 <__func__.0+0x310>
    8000bba0:	08b1f0ef          	jal	8002b42a <printf>
    8000bba4:	0004c797          	auipc	a5,0x4c
    8000bba8:	46d7c783          	lbu	a5,1133(a5) # 80058011 <excpt+0x1>
    8000bbac:	c799                	beqz	a5,8000bbba <tinst_tests_gpf+0x90e>
    8000bbae:	6418                	ld	a4,8(s0)
    8000bbb0:	47dd                	li	a5,23
    8000bbb2:	00f71463          	bne	a4,a5,8000bbba <tinst_tests_gpf+0x90e>
    8000bbb6:	62b0106f          	j	8000d9e0 <tinst_tests_gpf+0x2734>
    8000bbba:	00022517          	auipc	a0,0x22
    8000bbbe:	64650513          	addi	a0,a0,1606 # 8002e200 <__func__.0+0x318>
    8000bbc2:	0691f0ef          	jal	8002b42a <printf>
    8000bbc6:	02900513          	li	a0,41
    8000bbca:	54e1e0ef          	jal	8002a118 <putchar>
    8000bbce:	4529                	li	a0,10
    8000bbd0:	5481e0ef          	jal	8002a118 <putchar>
    8000bbd4:	c889                	beqz	s1,8000bbe6 <tinst_tests_gpf+0x93a>
    8000bbd6:	0004c797          	auipc	a5,0x4c
    8000bbda:	43b7c783          	lbu	a5,1083(a5) # 80058011 <excpt+0x1>
    8000bbde:	c399                	beqz	a5,8000bbe4 <tinst_tests_gpf+0x938>
    8000bbe0:	6320106f          	j	8000d212 <tinst_tests_gpf+0x1f66>
    8000bbe4:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bbe6:	a26f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bbea:	00100537          	lui	a0,0x100
    8000bbee:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000bbf2:	85ca                	mv	a1,s2
    register uint64_t _addr asm("a0") = addr;
    8000bbf4:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bbf6:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000bbf8:	00025617          	auipc	a2,0x25
    8000bbfc:	b5860613          	addi	a2,a2,-1192 # 80030750 <__func__.0+0x2868>
    8000bc00:	08200593          	li	a1,130
    8000bc04:	00022517          	auipc	a0,0x22
    8000bc08:	5dc50513          	addi	a0,a0,1500 # 8002e1e0 <__func__.0+0x2f8>
    8000bc0c:	01f1f0ef          	jal	8002b42a <printf>
    8000bc10:	0004c797          	auipc	a5,0x4c
    8000bc14:	4017c783          	lbu	a5,1025(a5) # 80058011 <excpt+0x1>
    8000bc18:	c799                	beqz	a5,8000bc26 <tinst_tests_gpf+0x97a>
    8000bc1a:	6418                	ld	a4,8(s0)
    8000bc1c:	47dd                	li	a5,23
    8000bc1e:	00f71463          	bne	a4,a5,8000bc26 <tinst_tests_gpf+0x97a>
    8000bc22:	7760106f          	j	8000d398 <tinst_tests_gpf+0x20ec>
    8000bc26:	00022597          	auipc	a1,0x22
    8000bc2a:	59258593          	addi	a1,a1,1426 # 8002e1b8 <__func__.0+0x2d0>
    8000bc2e:	00022517          	auipc	a0,0x22
    8000bc32:	5ca50513          	addi	a0,a0,1482 # 8002e1f8 <__func__.0+0x310>
    8000bc36:	7f41f0ef          	jal	8002b42a <printf>
    8000bc3a:	0004c797          	auipc	a5,0x4c
    8000bc3e:	3d77c783          	lbu	a5,983(a5) # 80058011 <excpt+0x1>
    8000bc42:	c799                	beqz	a5,8000bc50 <tinst_tests_gpf+0x9a4>
    8000bc44:	6418                	ld	a4,8(s0)
    8000bc46:	47dd                	li	a5,23
    8000bc48:	00f71463          	bne	a4,a5,8000bc50 <tinst_tests_gpf+0x9a4>
    8000bc4c:	6230106f          	j	8000da6e <tinst_tests_gpf+0x27c2>
    8000bc50:	00022517          	auipc	a0,0x22
    8000bc54:	5b050513          	addi	a0,a0,1456 # 8002e200 <__func__.0+0x318>
    8000bc58:	7d21f0ef          	jal	8002b42a <printf>
    8000bc5c:	02900513          	li	a0,41
    8000bc60:	4b81e0ef          	jal	8002a118 <putchar>
    8000bc64:	4529                	li	a0,10
    8000bc66:	4b21e0ef          	jal	8002a118 <putchar>
    8000bc6a:	cc89                	beqz	s1,8000bc84 <tinst_tests_gpf+0x9d8>
    8000bc6c:	0004c797          	auipc	a5,0x4c
    8000bc70:	3a57c783          	lbu	a5,933(a5) # 80058011 <excpt+0x1>
    8000bc74:	c799                	beqz	a5,8000bc82 <tinst_tests_gpf+0x9d6>
    8000bc76:	6418                	ld	a4,8(s0)
    8000bc78:	47dd                	li	a5,23
    8000bc7a:	00f71463          	bne	a4,a5,8000bc82 <tinst_tests_gpf+0x9d6>
    8000bc7e:	3760206f          	j	8000dff4 <tinst_tests_gpf+0x2d48>
    8000bc82:	4481                	li	s1,0
    asm volatile(
    8000bc84:	00100937          	lui	s2,0x100
    8000bc88:	06590913          	addi	s2,s2,101 # 100065 <STACK_SIZE+0x65>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bc8c:	980f50ef          	jal	80000e0c <test_setup_except_function>
    8000bc90:	0932                	slli	s2,s2,0xc
    8000bc92:	1009292f          	lr.w	s2,(s2)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bc96:	00025617          	auipc	a2,0x25
    8000bc9a:	afa60613          	addi	a2,a2,-1286 # 80030790 <__func__.0+0x28a8>
    8000bc9e:	08200593          	li	a1,130
    8000bca2:	00022517          	auipc	a0,0x22
    8000bca6:	53e50513          	addi	a0,a0,1342 # 8002e1e0 <__func__.0+0x2f8>
    8000bcaa:	7801f0ef          	jal	8002b42a <printf>
    8000bcae:	0004c797          	auipc	a5,0x4c
    8000bcb2:	3637c783          	lbu	a5,867(a5) # 80058011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000bcb6:	1902                	slli	s2,s2,0x20
    8000bcb8:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bcbc:	e399                	bnez	a5,8000bcc2 <tinst_tests_gpf+0xa16>
    8000bcbe:	0b20106f          	j	8000cd70 <tinst_tests_gpf+0x1ac4>
    8000bcc2:	6418                	ld	a4,8(s0)
    8000bcc4:	47d5                	li	a5,21
    8000bcc6:	00022597          	auipc	a1,0x22
    8000bcca:	4f258593          	addi	a1,a1,1266 # 8002e1b8 <__func__.0+0x2d0>
    8000bcce:	00f71463          	bne	a4,a5,8000bcd6 <tinst_tests_gpf+0xa2a>
    8000bcd2:	0500106f          	j	8000cd22 <tinst_tests_gpf+0x1a76>
    8000bcd6:	00022517          	auipc	a0,0x22
    8000bcda:	52250513          	addi	a0,a0,1314 # 8002e1f8 <__func__.0+0x310>
    8000bcde:	74c1f0ef          	jal	8002b42a <printf>
    8000bce2:	0004c797          	auipc	a5,0x4c
    8000bce6:	32f7c783          	lbu	a5,815(a5) # 80058011 <excpt+0x1>
    8000bcea:	c799                	beqz	a5,8000bcf8 <tinst_tests_gpf+0xa4c>
    8000bcec:	6418                	ld	a4,8(s0)
    8000bcee:	47d5                	li	a5,21
    8000bcf0:	00f71463          	bne	a4,a5,8000bcf8 <tinst_tests_gpf+0xa4c>
    8000bcf4:	6090106f          	j	8000dafc <tinst_tests_gpf+0x2850>
    8000bcf8:	00022517          	auipc	a0,0x22
    8000bcfc:	50850513          	addi	a0,a0,1288 # 8002e200 <__func__.0+0x318>
    8000bd00:	72a1f0ef          	jal	8002b42a <printf>
    8000bd04:	02900513          	li	a0,41
    8000bd08:	4101e0ef          	jal	8002a118 <putchar>
    8000bd0c:	4529                	li	a0,10
    8000bd0e:	40a1e0ef          	jal	8002a118 <putchar>
    8000bd12:	cc89                	beqz	s1,8000bd2c <tinst_tests_gpf+0xa80>
    8000bd14:	0004c797          	auipc	a5,0x4c
    8000bd18:	2fd7c783          	lbu	a5,765(a5) # 80058011 <excpt+0x1>
    8000bd1c:	c799                	beqz	a5,8000bd2a <tinst_tests_gpf+0xa7e>
    8000bd1e:	6418                	ld	a4,8(s0)
    8000bd20:	47d5                	li	a5,21
    8000bd22:	00f71463          	bne	a4,a5,8000bd2a <tinst_tests_gpf+0xa7e>
    8000bd26:	3040206f          	j	8000e02a <tinst_tests_gpf+0x2d7e>
    8000bd2a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bd2c:	8e0f50ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000bd30:	001007b7          	lui	a5,0x100
    8000bd34:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bd38:	07b2                	slli	a5,a5,0xc
    8000bd3a:	1927a92f          	sc.w	s2,s2,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000bd3e:	00025617          	auipc	a2,0x25
    8000bd42:	a9260613          	addi	a2,a2,-1390 # 800307d0 <__func__.0+0x28e8>
    8000bd46:	08200593          	li	a1,130
    8000bd4a:	00022517          	auipc	a0,0x22
    8000bd4e:	49650513          	addi	a0,a0,1174 # 8002e1e0 <__func__.0+0x2f8>
    8000bd52:	6d81f0ef          	jal	8002b42a <printf>
    8000bd56:	0004c797          	auipc	a5,0x4c
    8000bd5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    return value;
    8000bd5e:	2901                	sext.w	s2,s2
    8000bd60:	e399                	bnez	a5,8000bd66 <tinst_tests_gpf+0xaba>
    8000bd62:	0680106f          	j	8000cdca <tinst_tests_gpf+0x1b1e>
    8000bd66:	6418                	ld	a4,8(s0)
    8000bd68:	47dd                	li	a5,23
    8000bd6a:	00022597          	auipc	a1,0x22
    8000bd6e:	44e58593          	addi	a1,a1,1102 # 8002e1b8 <__func__.0+0x2d0>
    8000bd72:	00f71463          	bne	a4,a5,8000bd7a <tinst_tests_gpf+0xace>
    8000bd76:	0060106f          	j	8000cd7c <tinst_tests_gpf+0x1ad0>
    8000bd7a:	00022517          	auipc	a0,0x22
    8000bd7e:	47e50513          	addi	a0,a0,1150 # 8002e1f8 <__func__.0+0x310>
    8000bd82:	6a81f0ef          	jal	8002b42a <printf>
    8000bd86:	0004c797          	auipc	a5,0x4c
    8000bd8a:	28b7c783          	lbu	a5,651(a5) # 80058011 <excpt+0x1>
    8000bd8e:	c799                	beqz	a5,8000bd9c <tinst_tests_gpf+0xaf0>
    8000bd90:	6418                	ld	a4,8(s0)
    8000bd92:	47dd                	li	a5,23
    8000bd94:	00f71463          	bne	a4,a5,8000bd9c <tinst_tests_gpf+0xaf0>
    8000bd98:	4bc0106f          	j	8000d254 <tinst_tests_gpf+0x1fa8>
    8000bd9c:	00022517          	auipc	a0,0x22
    8000bda0:	46450513          	addi	a0,a0,1124 # 8002e200 <__func__.0+0x318>
    8000bda4:	6861f0ef          	jal	8002b42a <printf>
    8000bda8:	02900513          	li	a0,41
    8000bdac:	36c1e0ef          	jal	8002a118 <putchar>
    8000bdb0:	4529                	li	a0,10
    8000bdb2:	3661e0ef          	jal	8002a118 <putchar>
    8000bdb6:	cc89                	beqz	s1,8000bdd0 <tinst_tests_gpf+0xb24>
    8000bdb8:	0004c797          	auipc	a5,0x4c
    8000bdbc:	2597c783          	lbu	a5,601(a5) # 80058011 <excpt+0x1>
    8000bdc0:	c799                	beqz	a5,8000bdce <tinst_tests_gpf+0xb22>
    8000bdc2:	6418                	ld	a4,8(s0)
    8000bdc4:	47dd                	li	a5,23
    8000bdc6:	00f71463          	bne	a4,a5,8000bdce <tinst_tests_gpf+0xb22>
    8000bdca:	2a20206f          	j	8000e06c <tinst_tests_gpf+0x2dc0>
    8000bdce:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bdd0:	83cf50ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000bdd4:	001007b7          	lui	a5,0x100
    8000bdd8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bddc:	07b2                	slli	a5,a5,0xc
    8000bdde:	0927a92f          	amoswap.w	s2,s2,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000bde2:	00025617          	auipc	a2,0x25
    8000bde6:	a2e60613          	addi	a2,a2,-1490 # 80030810 <__func__.0+0x2928>
    8000bdea:	08200593          	li	a1,130
    8000bdee:	00022517          	auipc	a0,0x22
    8000bdf2:	3f250513          	addi	a0,a0,1010 # 8002e1e0 <__func__.0+0x2f8>
    8000bdf6:	6341f0ef          	jal	8002b42a <printf>
    8000bdfa:	0004c797          	auipc	a5,0x4c
    8000bdfe:	2177c783          	lbu	a5,535(a5) # 80058011 <excpt+0x1>
    8000be02:	e399                	bnez	a5,8000be08 <tinst_tests_gpf+0xb5c>
    8000be04:	0200106f          	j	8000ce24 <tinst_tests_gpf+0x1b78>
    8000be08:	6418                	ld	a4,8(s0)
    8000be0a:	47dd                	li	a5,23
    8000be0c:	00022597          	auipc	a1,0x22
    8000be10:	3ac58593          	addi	a1,a1,940 # 8002e1b8 <__func__.0+0x2d0>
    8000be14:	00f71463          	bne	a4,a5,8000be1c <tinst_tests_gpf+0xb70>
    8000be18:	7bf0006f          	j	8000cdd6 <tinst_tests_gpf+0x1b2a>
    8000be1c:	00022517          	auipc	a0,0x22
    8000be20:	3dc50513          	addi	a0,a0,988 # 8002e1f8 <__func__.0+0x310>
    8000be24:	6061f0ef          	jal	8002b42a <printf>
    8000be28:	0004c797          	auipc	a5,0x4c
    8000be2c:	1e97c783          	lbu	a5,489(a5) # 80058011 <excpt+0x1>
    8000be30:	c799                	beqz	a5,8000be3e <tinst_tests_gpf+0xb92>
    8000be32:	6418                	ld	a4,8(s0)
    8000be34:	47dd                	li	a5,23
    8000be36:	00f71463          	bne	a4,a5,8000be3e <tinst_tests_gpf+0xb92>
    8000be3a:	4700106f          	j	8000d2aa <tinst_tests_gpf+0x1ffe>
    8000be3e:	00022517          	auipc	a0,0x22
    8000be42:	3c250513          	addi	a0,a0,962 # 8002e200 <__func__.0+0x318>
    8000be46:	5e41f0ef          	jal	8002b42a <printf>
    8000be4a:	02900513          	li	a0,41
    8000be4e:	2ca1e0ef          	jal	8002a118 <putchar>
    8000be52:	4529                	li	a0,10
    8000be54:	2c41e0ef          	jal	8002a118 <putchar>
    8000be58:	cc89                	beqz	s1,8000be72 <tinst_tests_gpf+0xbc6>
    8000be5a:	0004c797          	auipc	a5,0x4c
    8000be5e:	1b77c783          	lbu	a5,439(a5) # 80058011 <excpt+0x1>
    8000be62:	c799                	beqz	a5,8000be70 <tinst_tests_gpf+0xbc4>
    8000be64:	6418                	ld	a4,8(s0)
    8000be66:	47dd                	li	a5,23
    8000be68:	00f71463          	bne	a4,a5,8000be70 <tinst_tests_gpf+0xbc4>
    8000be6c:	2420206f          	j	8000e0ae <tinst_tests_gpf+0x2e02>
    8000be70:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000be72:	f9bf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000be76:	001007b7          	lui	a5,0x100
    8000be7a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be7e:	07b2                	slli	a5,a5,0xc
    8000be80:	0127a92f          	amoadd.w	s2,s2,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000be84:	00025617          	auipc	a2,0x25
    8000be88:	9d460613          	addi	a2,a2,-1580 # 80030858 <__func__.0+0x2970>
    8000be8c:	08200593          	li	a1,130
    8000be90:	00022517          	auipc	a0,0x22
    8000be94:	35050513          	addi	a0,a0,848 # 8002e1e0 <__func__.0+0x2f8>
    8000be98:	5921f0ef          	jal	8002b42a <printf>
    8000be9c:	0004c797          	auipc	a5,0x4c
    8000bea0:	1757c783          	lbu	a5,373(a5) # 80058011 <excpt+0x1>
    8000bea4:	e399                	bnez	a5,8000beaa <tinst_tests_gpf+0xbfe>
    8000bea6:	7d90006f          	j	8000ce7e <tinst_tests_gpf+0x1bd2>
    8000beaa:	6418                	ld	a4,8(s0)
    8000beac:	47dd                	li	a5,23
    8000beae:	00022597          	auipc	a1,0x22
    8000beb2:	30a58593          	addi	a1,a1,778 # 8002e1b8 <__func__.0+0x2d0>
    8000beb6:	00f71463          	bne	a4,a5,8000bebe <tinst_tests_gpf+0xc12>
    8000beba:	7770006f          	j	8000ce30 <tinst_tests_gpf+0x1b84>
    8000bebe:	00022517          	auipc	a0,0x22
    8000bec2:	33a50513          	addi	a0,a0,826 # 8002e1f8 <__func__.0+0x310>
    8000bec6:	5641f0ef          	jal	8002b42a <printf>
    8000beca:	0004c797          	auipc	a5,0x4c
    8000bece:	1477c783          	lbu	a5,327(a5) # 80058011 <excpt+0x1>
    8000bed2:	c799                	beqz	a5,8000bee0 <tinst_tests_gpf+0xc34>
    8000bed4:	6418                	ld	a4,8(s0)
    8000bed6:	47dd                	li	a5,23
    8000bed8:	00f71463          	bne	a4,a5,8000bee0 <tinst_tests_gpf+0xc34>
    8000bedc:	4240106f          	j	8000d300 <tinst_tests_gpf+0x2054>
    8000bee0:	00022517          	auipc	a0,0x22
    8000bee4:	32050513          	addi	a0,a0,800 # 8002e200 <__func__.0+0x318>
    8000bee8:	5421f0ef          	jal	8002b42a <printf>
    8000beec:	02900513          	li	a0,41
    8000bef0:	2281e0ef          	jal	8002a118 <putchar>
    8000bef4:	4529                	li	a0,10
    8000bef6:	2221e0ef          	jal	8002a118 <putchar>
    8000befa:	cc89                	beqz	s1,8000bf14 <tinst_tests_gpf+0xc68>
    8000befc:	0004c797          	auipc	a5,0x4c
    8000bf00:	1157c783          	lbu	a5,277(a5) # 80058011 <excpt+0x1>
    8000bf04:	c799                	beqz	a5,8000bf12 <tinst_tests_gpf+0xc66>
    8000bf06:	6418                	ld	a4,8(s0)
    8000bf08:	47dd                	li	a5,23
    8000bf0a:	00f71463          	bne	a4,a5,8000bf12 <tinst_tests_gpf+0xc66>
    8000bf0e:	20e0206f          	j	8000e11c <tinst_tests_gpf+0x2e70>
    8000bf12:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf14:	ef9f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000bf18:	001007b7          	lui	a5,0x100
    8000bf1c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf20:	07b2                	slli	a5,a5,0xc
    8000bf22:	2127a92f          	amoxor.w	s2,s2,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000bf26:	00025617          	auipc	a2,0x25
    8000bf2a:	97260613          	addi	a2,a2,-1678 # 80030898 <__func__.0+0x29b0>
    8000bf2e:	08200593          	li	a1,130
    8000bf32:	00022517          	auipc	a0,0x22
    8000bf36:	2ae50513          	addi	a0,a0,686 # 8002e1e0 <__func__.0+0x2f8>
    8000bf3a:	4f01f0ef          	jal	8002b42a <printf>
    8000bf3e:	0004c797          	auipc	a5,0x4c
    8000bf42:	0d37c783          	lbu	a5,211(a5) # 80058011 <excpt+0x1>
    8000bf46:	c399                	beqz	a5,8000bf4c <tinst_tests_gpf+0xca0>
    8000bf48:	0020106f          	j	8000cf4a <tinst_tests_gpf+0x1c9e>
    8000bf4c:	00022597          	auipc	a1,0x22
    8000bf50:	26c58593          	addi	a1,a1,620 # 8002e1b8 <__func__.0+0x2d0>
    8000bf54:	00022517          	auipc	a0,0x22
    8000bf58:	2a450513          	addi	a0,a0,676 # 8002e1f8 <__func__.0+0x310>
    8000bf5c:	4ce1f0ef          	jal	8002b42a <printf>
    8000bf60:	0004c797          	auipc	a5,0x4c
    8000bf64:	0b17c783          	lbu	a5,177(a5) # 80058011 <excpt+0x1>
    8000bf68:	c799                	beqz	a5,8000bf76 <tinst_tests_gpf+0xcca>
    8000bf6a:	6418                	ld	a4,8(s0)
    8000bf6c:	47dd                	li	a5,23
    8000bf6e:	00f71463          	bne	a4,a5,8000bf76 <tinst_tests_gpf+0xcca>
    8000bf72:	3e40106f          	j	8000d356 <tinst_tests_gpf+0x20aa>
    8000bf76:	00022517          	auipc	a0,0x22
    8000bf7a:	28a50513          	addi	a0,a0,650 # 8002e200 <__func__.0+0x318>
    8000bf7e:	4ac1f0ef          	jal	8002b42a <printf>
    8000bf82:	02900513          	li	a0,41
    8000bf86:	1921e0ef          	jal	8002a118 <putchar>
    8000bf8a:	4529                	li	a0,10
    8000bf8c:	18c1e0ef          	jal	8002a118 <putchar>
    8000bf90:	cc89                	beqz	s1,8000bfaa <tinst_tests_gpf+0xcfe>
    8000bf92:	0004c797          	auipc	a5,0x4c
    8000bf96:	07f7c783          	lbu	a5,127(a5) # 80058011 <excpt+0x1>
    8000bf9a:	c799                	beqz	a5,8000bfa8 <tinst_tests_gpf+0xcfc>
    8000bf9c:	6418                	ld	a4,8(s0)
    8000bf9e:	47dd                	li	a5,23
    8000bfa0:	00f71463          	bne	a4,a5,8000bfa8 <tinst_tests_gpf+0xcfc>
    8000bfa4:	1e60206f          	j	8000e18a <tinst_tests_gpf+0x2ede>
    8000bfa8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bfaa:	e63f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000bfae:	001007b7          	lui	a5,0x100
    8000bfb2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bfb6:	07b2                	slli	a5,a5,0xc
    8000bfb8:	6127a92f          	amoand.w	s2,s2,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000bfbc:	00025617          	auipc	a2,0x25
    8000bfc0:	91c60613          	addi	a2,a2,-1764 # 800308d8 <__func__.0+0x29f0>
    8000bfc4:	08200593          	li	a1,130
    8000bfc8:	00022517          	auipc	a0,0x22
    8000bfcc:	21850513          	addi	a0,a0,536 # 8002e1e0 <__func__.0+0x2f8>
    8000bfd0:	45a1f0ef          	jal	8002b42a <printf>
    8000bfd4:	0004c797          	auipc	a5,0x4c
    8000bfd8:	03d7c783          	lbu	a5,61(a5) # 80058011 <excpt+0x1>
    8000bfdc:	c399                	beqz	a5,8000bfe2 <tinst_tests_gpf+0xd36>
    8000bfde:	01a0106f          	j	8000cff8 <tinst_tests_gpf+0x1d4c>
    8000bfe2:	00022597          	auipc	a1,0x22
    8000bfe6:	1d658593          	addi	a1,a1,470 # 8002e1b8 <__func__.0+0x2d0>
    8000bfea:	00022517          	auipc	a0,0x22
    8000bfee:	20e50513          	addi	a0,a0,526 # 8002e1f8 <__func__.0+0x310>
    8000bff2:	4381f0ef          	jal	8002b42a <printf>
    8000bff6:	0004c797          	auipc	a5,0x4c
    8000bffa:	01b7c783          	lbu	a5,27(a5) # 80058011 <excpt+0x1>
    8000bffe:	c799                	beqz	a5,8000c00c <tinst_tests_gpf+0xd60>
    8000c000:	6418                	ld	a4,8(s0)
    8000c002:	47dd                	li	a5,23
    8000c004:	00f71463          	bne	a4,a5,8000c00c <tinst_tests_gpf+0xd60>
    8000c008:	4450106f          	j	8000dc4c <tinst_tests_gpf+0x29a0>
    8000c00c:	00022517          	auipc	a0,0x22
    8000c010:	1f450513          	addi	a0,a0,500 # 8002e200 <__func__.0+0x318>
    8000c014:	4161f0ef          	jal	8002b42a <printf>
    8000c018:	02900513          	li	a0,41
    8000c01c:	0fc1e0ef          	jal	8002a118 <putchar>
    8000c020:	4529                	li	a0,10
    8000c022:	0f61e0ef          	jal	8002a118 <putchar>
    8000c026:	cc89                	beqz	s1,8000c040 <tinst_tests_gpf+0xd94>
    8000c028:	0004c797          	auipc	a5,0x4c
    8000c02c:	fe97c783          	lbu	a5,-23(a5) # 80058011 <excpt+0x1>
    8000c030:	c799                	beqz	a5,8000c03e <tinst_tests_gpf+0xd92>
    8000c032:	6418                	ld	a4,8(s0)
    8000c034:	47dd                	li	a5,23
    8000c036:	00f71463          	bne	a4,a5,8000c03e <tinst_tests_gpf+0xd92>
    8000c03a:	1920206f          	j	8000e1cc <tinst_tests_gpf+0x2f20>
    8000c03e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c040:	dcdf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000c044:	001007b7          	lui	a5,0x100
    8000c048:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c04c:	07b2                	slli	a5,a5,0xc
    8000c04e:	4127a92f          	amoor.w	s2,s2,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000c052:	00025617          	auipc	a2,0x25
    8000c056:	8c660613          	addi	a2,a2,-1850 # 80030918 <__func__.0+0x2a30>
    8000c05a:	08200593          	li	a1,130
    8000c05e:	00022517          	auipc	a0,0x22
    8000c062:	18250513          	addi	a0,a0,386 # 8002e1e0 <__func__.0+0x2f8>
    8000c066:	3c41f0ef          	jal	8002b42a <printf>
    8000c06a:	0004c797          	auipc	a5,0x4c
    8000c06e:	fa77c783          	lbu	a5,-89(a5) # 80058011 <excpt+0x1>
    8000c072:	e399                	bnez	a5,8000c078 <tinst_tests_gpf+0xdcc>
    8000c074:	4b40106f          	j	8000d528 <tinst_tests_gpf+0x227c>
    8000c078:	6418                	ld	a4,8(s0)
    8000c07a:	47dd                	li	a5,23
    8000c07c:	00022597          	auipc	a1,0x22
    8000c080:	13c58593          	addi	a1,a1,316 # 8002e1b8 <__func__.0+0x2d0>
    8000c084:	00f71463          	bne	a4,a5,8000c08c <tinst_tests_gpf+0xde0>
    8000c088:	4540106f          	j	8000d4dc <tinst_tests_gpf+0x2230>
    8000c08c:	00022517          	auipc	a0,0x22
    8000c090:	16c50513          	addi	a0,a0,364 # 8002e1f8 <__func__.0+0x310>
    8000c094:	3961f0ef          	jal	8002b42a <printf>
    8000c098:	0004c797          	auipc	a5,0x4c
    8000c09c:	f797c783          	lbu	a5,-135(a5) # 80058011 <excpt+0x1>
    8000c0a0:	c799                	beqz	a5,8000c0ae <tinst_tests_gpf+0xe02>
    8000c0a2:	6418                	ld	a4,8(s0)
    8000c0a4:	47dd                	li	a5,23
    8000c0a6:	00f71463          	bne	a4,a5,8000c0ae <tinst_tests_gpf+0xe02>
    8000c0aa:	3e50106f          	j	8000dc8e <tinst_tests_gpf+0x29e2>
    8000c0ae:	00022517          	auipc	a0,0x22
    8000c0b2:	15250513          	addi	a0,a0,338 # 8002e200 <__func__.0+0x318>
    8000c0b6:	3741f0ef          	jal	8002b42a <printf>
    8000c0ba:	02900513          	li	a0,41
    8000c0be:	05a1e0ef          	jal	8002a118 <putchar>
    8000c0c2:	4529                	li	a0,10
    8000c0c4:	0541e0ef          	jal	8002a118 <putchar>
    8000c0c8:	cc89                	beqz	s1,8000c0e2 <tinst_tests_gpf+0xe36>
    8000c0ca:	0004c797          	auipc	a5,0x4c
    8000c0ce:	f477c783          	lbu	a5,-185(a5) # 80058011 <excpt+0x1>
    8000c0d2:	c799                	beqz	a5,8000c0e0 <tinst_tests_gpf+0xe34>
    8000c0d4:	6418                	ld	a4,8(s0)
    8000c0d6:	47dd                	li	a5,23
    8000c0d8:	00f71463          	bne	a4,a5,8000c0e0 <tinst_tests_gpf+0xe34>
    8000c0dc:	1620206f          	j	8000e23e <tinst_tests_gpf+0x2f92>
    8000c0e0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c0e2:	d2bf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c0e6:	001007b7          	lui	a5,0x100
    8000c0ea:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c0ee:	07b2                	slli	a5,a5,0xc
    8000c0f0:	8127a92f          	amomin.w	s2,s2,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c0f4:	00025617          	auipc	a2,0x25
    8000c0f8:	86460613          	addi	a2,a2,-1948 # 80030958 <__func__.0+0x2a70>
    8000c0fc:	08200593          	li	a1,130
    8000c100:	00022517          	auipc	a0,0x22
    8000c104:	0e050513          	addi	a0,a0,224 # 8002e1e0 <__func__.0+0x2f8>
    8000c108:	3221f0ef          	jal	8002b42a <printf>
    8000c10c:	0004c797          	auipc	a5,0x4c
    8000c110:	f057c783          	lbu	a5,-251(a5) # 80058011 <excpt+0x1>
    8000c114:	e399                	bnez	a5,8000c11a <tinst_tests_gpf+0xe6e>
    8000c116:	4a40106f          	j	8000d5ba <tinst_tests_gpf+0x230e>
    8000c11a:	6418                	ld	a4,8(s0)
    8000c11c:	47dd                	li	a5,23
    8000c11e:	00022597          	auipc	a1,0x22
    8000c122:	09a58593          	addi	a1,a1,154 # 8002e1b8 <__func__.0+0x2d0>
    8000c126:	00f71463          	bne	a4,a5,8000c12e <tinst_tests_gpf+0xe82>
    8000c12a:	4440106f          	j	8000d56e <tinst_tests_gpf+0x22c2>
    8000c12e:	00022517          	auipc	a0,0x22
    8000c132:	0ca50513          	addi	a0,a0,202 # 8002e1f8 <__func__.0+0x310>
    8000c136:	2f41f0ef          	jal	8002b42a <printf>
    8000c13a:	0004c797          	auipc	a5,0x4c
    8000c13e:	ed77c783          	lbu	a5,-297(a5) # 80058011 <excpt+0x1>
    8000c142:	c799                	beqz	a5,8000c150 <tinst_tests_gpf+0xea4>
    8000c144:	6418                	ld	a4,8(s0)
    8000c146:	47dd                	li	a5,23
    8000c148:	00f71463          	bne	a4,a5,8000c150 <tinst_tests_gpf+0xea4>
    8000c14c:	3850106f          	j	8000dcd0 <tinst_tests_gpf+0x2a24>
    8000c150:	00022517          	auipc	a0,0x22
    8000c154:	0b050513          	addi	a0,a0,176 # 8002e200 <__func__.0+0x318>
    8000c158:	2d21f0ef          	jal	8002b42a <printf>
    8000c15c:	02900513          	li	a0,41
    8000c160:	7b91d0ef          	jal	8002a118 <putchar>
    8000c164:	4529                	li	a0,10
    8000c166:	7b31d0ef          	jal	8002a118 <putchar>
    8000c16a:	cc89                	beqz	s1,8000c184 <tinst_tests_gpf+0xed8>
    8000c16c:	0004c797          	auipc	a5,0x4c
    8000c170:	ea57c783          	lbu	a5,-347(a5) # 80058011 <excpt+0x1>
    8000c174:	c799                	beqz	a5,8000c182 <tinst_tests_gpf+0xed6>
    8000c176:	6418                	ld	a4,8(s0)
    8000c178:	47dd                	li	a5,23
    8000c17a:	00f71463          	bne	a4,a5,8000c182 <tinst_tests_gpf+0xed6>
    8000c17e:	1320206f          	j	8000e2b0 <tinst_tests_gpf+0x3004>
    8000c182:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c184:	c89f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c188:	001007b7          	lui	a5,0x100
    8000c18c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c190:	07b2                	slli	a5,a5,0xc
    8000c192:	a127a92f          	amomax.w	s2,s2,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c196:	00025617          	auipc	a2,0x25
    8000c19a:	80260613          	addi	a2,a2,-2046 # 80030998 <__func__.0+0x2ab0>
    8000c19e:	08200593          	li	a1,130
    8000c1a2:	00022517          	auipc	a0,0x22
    8000c1a6:	03e50513          	addi	a0,a0,62 # 8002e1e0 <__func__.0+0x2f8>
    8000c1aa:	2801f0ef          	jal	8002b42a <printf>
    8000c1ae:	0004c797          	auipc	a5,0x4c
    8000c1b2:	e637c783          	lbu	a5,-413(a5) # 80058011 <excpt+0x1>
    8000c1b6:	e399                	bnez	a5,8000c1bc <tinst_tests_gpf+0xf10>
    8000c1b8:	4980106f          	j	8000d650 <tinst_tests_gpf+0x23a4>
    8000c1bc:	6418                	ld	a4,8(s0)
    8000c1be:	47dd                	li	a5,23
    8000c1c0:	00022597          	auipc	a1,0x22
    8000c1c4:	ff858593          	addi	a1,a1,-8 # 8002e1b8 <__func__.0+0x2d0>
    8000c1c8:	00f71463          	bne	a4,a5,8000c1d0 <tinst_tests_gpf+0xf24>
    8000c1cc:	4360106f          	j	8000d602 <tinst_tests_gpf+0x2356>
    8000c1d0:	00022517          	auipc	a0,0x22
    8000c1d4:	02850513          	addi	a0,a0,40 # 8002e1f8 <__func__.0+0x310>
    8000c1d8:	2521f0ef          	jal	8002b42a <printf>
    8000c1dc:	0004c797          	auipc	a5,0x4c
    8000c1e0:	e357c783          	lbu	a5,-459(a5) # 80058011 <excpt+0x1>
    8000c1e4:	c799                	beqz	a5,8000c1f2 <tinst_tests_gpf+0xf46>
    8000c1e6:	6418                	ld	a4,8(s0)
    8000c1e8:	47dd                	li	a5,23
    8000c1ea:	00f71463          	bne	a4,a5,8000c1f2 <tinst_tests_gpf+0xf46>
    8000c1ee:	3250106f          	j	8000dd12 <tinst_tests_gpf+0x2a66>
    8000c1f2:	00022517          	auipc	a0,0x22
    8000c1f6:	00e50513          	addi	a0,a0,14 # 8002e200 <__func__.0+0x318>
    8000c1fa:	2301f0ef          	jal	8002b42a <printf>
    8000c1fe:	02900513          	li	a0,41
    8000c202:	7171d0ef          	jal	8002a118 <putchar>
    8000c206:	4529                	li	a0,10
    8000c208:	7111d0ef          	jal	8002a118 <putchar>
    8000c20c:	cc89                	beqz	s1,8000c226 <tinst_tests_gpf+0xf7a>
    8000c20e:	0004c797          	auipc	a5,0x4c
    8000c212:	e037c783          	lbu	a5,-509(a5) # 80058011 <excpt+0x1>
    8000c216:	c799                	beqz	a5,8000c224 <tinst_tests_gpf+0xf78>
    8000c218:	6418                	ld	a4,8(s0)
    8000c21a:	47dd                	li	a5,23
    8000c21c:	00f71463          	bne	a4,a5,8000c224 <tinst_tests_gpf+0xf78>
    8000c220:	0d20206f          	j	8000e2f2 <tinst_tests_gpf+0x3046>
    8000c224:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c226:	be7f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c22a:	001007b7          	lui	a5,0x100
    8000c22e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c232:	07b2                	slli	a5,a5,0xc
    8000c234:	c127a92f          	amominu.w	s2,s2,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c238:	00024617          	auipc	a2,0x24
    8000c23c:	7a060613          	addi	a2,a2,1952 # 800309d8 <__func__.0+0x2af0>
    8000c240:	08200593          	li	a1,130
    8000c244:	00022517          	auipc	a0,0x22
    8000c248:	f9c50513          	addi	a0,a0,-100 # 8002e1e0 <__func__.0+0x2f8>
    8000c24c:	1de1f0ef          	jal	8002b42a <printf>
    8000c250:	0004c797          	auipc	a5,0x4c
    8000c254:	dc17c783          	lbu	a5,-575(a5) # 80058011 <excpt+0x1>
    8000c258:	e399                	bnez	a5,8000c25e <tinst_tests_gpf+0xfb2>
    8000c25a:	4920106f          	j	8000d6ec <tinst_tests_gpf+0x2440>
    8000c25e:	6418                	ld	a4,8(s0)
    8000c260:	47dd                	li	a5,23
    8000c262:	00022597          	auipc	a1,0x22
    8000c266:	f5658593          	addi	a1,a1,-170 # 8002e1b8 <__func__.0+0x2d0>
    8000c26a:	00f71463          	bne	a4,a5,8000c272 <tinst_tests_gpf+0xfc6>
    8000c26e:	4300106f          	j	8000d69e <tinst_tests_gpf+0x23f2>
    8000c272:	00022517          	auipc	a0,0x22
    8000c276:	f8650513          	addi	a0,a0,-122 # 8002e1f8 <__func__.0+0x310>
    8000c27a:	1b01f0ef          	jal	8002b42a <printf>
    8000c27e:	0004c797          	auipc	a5,0x4c
    8000c282:	d937c783          	lbu	a5,-621(a5) # 80058011 <excpt+0x1>
    8000c286:	c799                	beqz	a5,8000c294 <tinst_tests_gpf+0xfe8>
    8000c288:	6418                	ld	a4,8(s0)
    8000c28a:	47dd                	li	a5,23
    8000c28c:	00f71463          	bne	a4,a5,8000c294 <tinst_tests_gpf+0xfe8>
    8000c290:	2c50106f          	j	8000dd54 <tinst_tests_gpf+0x2aa8>
    8000c294:	00022517          	auipc	a0,0x22
    8000c298:	f6c50513          	addi	a0,a0,-148 # 8002e200 <__func__.0+0x318>
    8000c29c:	18e1f0ef          	jal	8002b42a <printf>
    8000c2a0:	02900513          	li	a0,41
    8000c2a4:	6751d0ef          	jal	8002a118 <putchar>
    8000c2a8:	4529                	li	a0,10
    8000c2aa:	66f1d0ef          	jal	8002a118 <putchar>
    8000c2ae:	cc89                	beqz	s1,8000c2c8 <tinst_tests_gpf+0x101c>
    8000c2b0:	0004c797          	auipc	a5,0x4c
    8000c2b4:	d617c783          	lbu	a5,-671(a5) # 80058011 <excpt+0x1>
    8000c2b8:	c799                	beqz	a5,8000c2c6 <tinst_tests_gpf+0x101a>
    8000c2ba:	6418                	ld	a4,8(s0)
    8000c2bc:	47dd                	li	a5,23
    8000c2be:	00f71463          	bne	a4,a5,8000c2c6 <tinst_tests_gpf+0x101a>
    8000c2c2:	0720206f          	j	8000e334 <tinst_tests_gpf+0x3088>
    8000c2c6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c2c8:	b45f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000c2cc:	001007b7          	lui	a5,0x100
    8000c2d0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c2d4:	07b2                	slli	a5,a5,0xc
    8000c2d6:	e127a92f          	amomaxu.w	s2,s2,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c2da:	00024617          	auipc	a2,0x24
    8000c2de:	74660613          	addi	a2,a2,1862 # 80030a20 <__func__.0+0x2b38>
    8000c2e2:	08200593          	li	a1,130
    8000c2e6:	00022517          	auipc	a0,0x22
    8000c2ea:	efa50513          	addi	a0,a0,-262 # 8002e1e0 <__func__.0+0x2f8>
    8000c2ee:	13c1f0ef          	jal	8002b42a <printf>
    8000c2f2:	0004c797          	auipc	a5,0x4c
    8000c2f6:	d1f7c783          	lbu	a5,-737(a5) # 80058011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000c2fa:	1902                	slli	s2,s2,0x20
    8000c2fc:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c300:	e399                	bnez	a5,8000c306 <tinst_tests_gpf+0x105a>
    8000c302:	4860106f          	j	8000d788 <tinst_tests_gpf+0x24dc>
    8000c306:	6418                	ld	a4,8(s0)
    8000c308:	47dd                	li	a5,23
    8000c30a:	00022597          	auipc	a1,0x22
    8000c30e:	eae58593          	addi	a1,a1,-338 # 8002e1b8 <__func__.0+0x2d0>
    8000c312:	00f71463          	bne	a4,a5,8000c31a <tinst_tests_gpf+0x106e>
    8000c316:	4240106f          	j	8000d73a <tinst_tests_gpf+0x248e>
    8000c31a:	00022517          	auipc	a0,0x22
    8000c31e:	ede50513          	addi	a0,a0,-290 # 8002e1f8 <__func__.0+0x310>
    8000c322:	1081f0ef          	jal	8002b42a <printf>
    8000c326:	0004c797          	auipc	a5,0x4c
    8000c32a:	ceb7c783          	lbu	a5,-789(a5) # 80058011 <excpt+0x1>
    8000c32e:	c799                	beqz	a5,8000c33c <tinst_tests_gpf+0x1090>
    8000c330:	6418                	ld	a4,8(s0)
    8000c332:	47dd                	li	a5,23
    8000c334:	00f71463          	bne	a4,a5,8000c33c <tinst_tests_gpf+0x1090>
    8000c338:	25f0106f          	j	8000dd96 <tinst_tests_gpf+0x2aea>
    8000c33c:	00022517          	auipc	a0,0x22
    8000c340:	ec450513          	addi	a0,a0,-316 # 8002e200 <__func__.0+0x318>
    8000c344:	0e61f0ef          	jal	8002b42a <printf>
    8000c348:	02900513          	li	a0,41
    8000c34c:	5cd1d0ef          	jal	8002a118 <putchar>
    8000c350:	4529                	li	a0,10
    8000c352:	5c71d0ef          	jal	8002a118 <putchar>
    8000c356:	cc89                	beqz	s1,8000c370 <tinst_tests_gpf+0x10c4>
    8000c358:	0004c797          	auipc	a5,0x4c
    8000c35c:	cb97c783          	lbu	a5,-839(a5) # 80058011 <excpt+0x1>
    8000c360:	c799                	beqz	a5,8000c36e <tinst_tests_gpf+0x10c2>
    8000c362:	6418                	ld	a4,8(s0)
    8000c364:	47dd                	li	a5,23
    8000c366:	00f71463          	bne	a4,a5,8000c36e <tinst_tests_gpf+0x10c2>
    8000c36a:	00c0206f          	j	8000e376 <tinst_tests_gpf+0x30ca>
    8000c36e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c370:	a9df40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000c374:	001007b7          	lui	a5,0x100
    8000c378:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c37c:	07b2                	slli	a5,a5,0xc
    8000c37e:	0927b92f          	amoswap.d	s2,s2,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000c382:	00024617          	auipc	a2,0x24
    8000c386:	6e660613          	addi	a2,a2,1766 # 80030a68 <__func__.0+0x2b80>
    8000c38a:	08200593          	li	a1,130
    8000c38e:	00022517          	auipc	a0,0x22
    8000c392:	e5250513          	addi	a0,a0,-430 # 8002e1e0 <__func__.0+0x2f8>
    8000c396:	0941f0ef          	jal	8002b42a <printf>
    8000c39a:	0004c797          	auipc	a5,0x4c
    8000c39e:	c777c783          	lbu	a5,-905(a5) # 80058011 <excpt+0x1>
    8000c3a2:	e399                	bnez	a5,8000c3a8 <tinst_tests_gpf+0x10fc>
    8000c3a4:	4800106f          	j	8000d824 <tinst_tests_gpf+0x2578>
    8000c3a8:	6418                	ld	a4,8(s0)
    8000c3aa:	47dd                	li	a5,23
    8000c3ac:	00022597          	auipc	a1,0x22
    8000c3b0:	e0c58593          	addi	a1,a1,-500 # 8002e1b8 <__func__.0+0x2d0>
    8000c3b4:	00f71463          	bne	a4,a5,8000c3bc <tinst_tests_gpf+0x1110>
    8000c3b8:	41e0106f          	j	8000d7d6 <tinst_tests_gpf+0x252a>
    8000c3bc:	00022517          	auipc	a0,0x22
    8000c3c0:	e3c50513          	addi	a0,a0,-452 # 8002e1f8 <__func__.0+0x310>
    8000c3c4:	0661f0ef          	jal	8002b42a <printf>
    8000c3c8:	0004c797          	auipc	a5,0x4c
    8000c3cc:	c497c783          	lbu	a5,-951(a5) # 80058011 <excpt+0x1>
    8000c3d0:	c799                	beqz	a5,8000c3de <tinst_tests_gpf+0x1132>
    8000c3d2:	6418                	ld	a4,8(s0)
    8000c3d4:	47dd                	li	a5,23
    8000c3d6:	00f71463          	bne	a4,a5,8000c3de <tinst_tests_gpf+0x1132>
    8000c3da:	1ff0106f          	j	8000ddd8 <tinst_tests_gpf+0x2b2c>
    8000c3de:	00022517          	auipc	a0,0x22
    8000c3e2:	e2250513          	addi	a0,a0,-478 # 8002e200 <__func__.0+0x318>
    8000c3e6:	0441f0ef          	jal	8002b42a <printf>
    8000c3ea:	02900513          	li	a0,41
    8000c3ee:	52b1d0ef          	jal	8002a118 <putchar>
    8000c3f2:	4529                	li	a0,10
    8000c3f4:	5251d0ef          	jal	8002a118 <putchar>
    8000c3f8:	cc89                	beqz	s1,8000c412 <tinst_tests_gpf+0x1166>
    8000c3fa:	0004c797          	auipc	a5,0x4c
    8000c3fe:	c177c783          	lbu	a5,-1001(a5) # 80058011 <excpt+0x1>
    8000c402:	c799                	beqz	a5,8000c410 <tinst_tests_gpf+0x1164>
    8000c404:	6418                	ld	a4,8(s0)
    8000c406:	47dd                	li	a5,23
    8000c408:	00f71463          	bne	a4,a5,8000c410 <tinst_tests_gpf+0x1164>
    8000c40c:	7ad0106f          	j	8000e3b8 <tinst_tests_gpf+0x310c>
    8000c410:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c412:	9fbf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000c416:	001007b7          	lui	a5,0x100
    8000c41a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c41e:	07b2                	slli	a5,a5,0xc
    8000c420:	0127b92f          	amoadd.d	s2,s2,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000c424:	00024617          	auipc	a2,0x24
    8000c428:	68c60613          	addi	a2,a2,1676 # 80030ab0 <__func__.0+0x2bc8>
    8000c42c:	08200593          	li	a1,130
    8000c430:	00022517          	auipc	a0,0x22
    8000c434:	db050513          	addi	a0,a0,-592 # 8002e1e0 <__func__.0+0x2f8>
    8000c438:	7f31e0ef          	jal	8002b42a <printf>
    8000c43c:	0004c797          	auipc	a5,0x4c
    8000c440:	bd57c783          	lbu	a5,-1067(a5) # 80058011 <excpt+0x1>
    8000c444:	e399                	bnez	a5,8000c44a <tinst_tests_gpf+0x119e>
    8000c446:	47a0106f          	j	8000d8c0 <tinst_tests_gpf+0x2614>
    8000c44a:	6418                	ld	a4,8(s0)
    8000c44c:	47dd                	li	a5,23
    8000c44e:	00022597          	auipc	a1,0x22
    8000c452:	d6a58593          	addi	a1,a1,-662 # 8002e1b8 <__func__.0+0x2d0>
    8000c456:	00f71463          	bne	a4,a5,8000c45e <tinst_tests_gpf+0x11b2>
    8000c45a:	4180106f          	j	8000d872 <tinst_tests_gpf+0x25c6>
    8000c45e:	00022517          	auipc	a0,0x22
    8000c462:	d9a50513          	addi	a0,a0,-614 # 8002e1f8 <__func__.0+0x310>
    8000c466:	7c51e0ef          	jal	8002b42a <printf>
    8000c46a:	0004c797          	auipc	a5,0x4c
    8000c46e:	ba77c783          	lbu	a5,-1113(a5) # 80058011 <excpt+0x1>
    8000c472:	c799                	beqz	a5,8000c480 <tinst_tests_gpf+0x11d4>
    8000c474:	6418                	ld	a4,8(s0)
    8000c476:	47dd                	li	a5,23
    8000c478:	00f71463          	bne	a4,a5,8000c480 <tinst_tests_gpf+0x11d4>
    8000c47c:	19f0106f          	j	8000de1a <tinst_tests_gpf+0x2b6e>
    8000c480:	00022517          	auipc	a0,0x22
    8000c484:	d8050513          	addi	a0,a0,-640 # 8002e200 <__func__.0+0x318>
    8000c488:	7a31e0ef          	jal	8002b42a <printf>
    8000c48c:	02900513          	li	a0,41
    8000c490:	4891d0ef          	jal	8002a118 <putchar>
    8000c494:	4529                	li	a0,10
    8000c496:	4831d0ef          	jal	8002a118 <putchar>
    8000c49a:	cc89                	beqz	s1,8000c4b4 <tinst_tests_gpf+0x1208>
    8000c49c:	0004c797          	auipc	a5,0x4c
    8000c4a0:	b757c783          	lbu	a5,-1163(a5) # 80058011 <excpt+0x1>
    8000c4a4:	c799                	beqz	a5,8000c4b2 <tinst_tests_gpf+0x1206>
    8000c4a6:	6418                	ld	a4,8(s0)
    8000c4a8:	47dd                	li	a5,23
    8000c4aa:	00f71463          	bne	a4,a5,8000c4b2 <tinst_tests_gpf+0x1206>
    8000c4ae:	74d0106f          	j	8000e3fa <tinst_tests_gpf+0x314e>
    8000c4b2:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4b4:	959f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000c4b8:	001007b7          	lui	a5,0x100
    8000c4bc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4c0:	07b2                	slli	a5,a5,0xc
    8000c4c2:	2127b92f          	amoxor.d	s2,s2,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000c4c6:	00024617          	auipc	a2,0x24
    8000c4ca:	62a60613          	addi	a2,a2,1578 # 80030af0 <__func__.0+0x2c08>
    8000c4ce:	08200593          	li	a1,130
    8000c4d2:	00022517          	auipc	a0,0x22
    8000c4d6:	d0e50513          	addi	a0,a0,-754 # 8002e1e0 <__func__.0+0x2f8>
    8000c4da:	7511e0ef          	jal	8002b42a <printf>
    8000c4de:	0004c797          	auipc	a5,0x4c
    8000c4e2:	b337c783          	lbu	a5,-1229(a5) # 80058011 <excpt+0x1>
    8000c4e6:	e399                	bnez	a5,8000c4ec <tinst_tests_gpf+0x1240>
    8000c4e8:	4620106f          	j	8000d94a <tinst_tests_gpf+0x269e>
    8000c4ec:	6418                	ld	a4,8(s0)
    8000c4ee:	47dd                	li	a5,23
    8000c4f0:	00022597          	auipc	a1,0x22
    8000c4f4:	cc858593          	addi	a1,a1,-824 # 8002e1b8 <__func__.0+0x2d0>
    8000c4f8:	00f71463          	bne	a4,a5,8000c500 <tinst_tests_gpf+0x1254>
    8000c4fc:	4000106f          	j	8000d8fc <tinst_tests_gpf+0x2650>
    8000c500:	00022517          	auipc	a0,0x22
    8000c504:	cf850513          	addi	a0,a0,-776 # 8002e1f8 <__func__.0+0x310>
    8000c508:	7231e0ef          	jal	8002b42a <printf>
    8000c50c:	0004c797          	auipc	a5,0x4c
    8000c510:	b057c783          	lbu	a5,-1275(a5) # 80058011 <excpt+0x1>
    8000c514:	c799                	beqz	a5,8000c522 <tinst_tests_gpf+0x1276>
    8000c516:	6418                	ld	a4,8(s0)
    8000c518:	47dd                	li	a5,23
    8000c51a:	00f71463          	bne	a4,a5,8000c522 <tinst_tests_gpf+0x1276>
    8000c51e:	13f0106f          	j	8000de5c <tinst_tests_gpf+0x2bb0>
    8000c522:	00022517          	auipc	a0,0x22
    8000c526:	cde50513          	addi	a0,a0,-802 # 8002e200 <__func__.0+0x318>
    8000c52a:	7011e0ef          	jal	8002b42a <printf>
    8000c52e:	02900513          	li	a0,41
    8000c532:	3e71d0ef          	jal	8002a118 <putchar>
    8000c536:	4529                	li	a0,10
    8000c538:	3e11d0ef          	jal	8002a118 <putchar>
    8000c53c:	cc89                	beqz	s1,8000c556 <tinst_tests_gpf+0x12aa>
    8000c53e:	0004c797          	auipc	a5,0x4c
    8000c542:	ad37c783          	lbu	a5,-1325(a5) # 80058011 <excpt+0x1>
    8000c546:	c799                	beqz	a5,8000c554 <tinst_tests_gpf+0x12a8>
    8000c548:	6418                	ld	a4,8(s0)
    8000c54a:	47dd                	li	a5,23
    8000c54c:	00f71463          	bne	a4,a5,8000c554 <tinst_tests_gpf+0x12a8>
    8000c550:	6ed0106f          	j	8000e43c <tinst_tests_gpf+0x3190>
    8000c554:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c556:	8b7f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000c55a:	001007b7          	lui	a5,0x100
    8000c55e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c562:	07b2                	slli	a5,a5,0xc
    8000c564:	6127b92f          	amoand.d	s2,s2,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000c568:	00024617          	auipc	a2,0x24
    8000c56c:	5c860613          	addi	a2,a2,1480 # 80030b30 <__func__.0+0x2c48>
    8000c570:	08200593          	li	a1,130
    8000c574:	00022517          	auipc	a0,0x22
    8000c578:	c6c50513          	addi	a0,a0,-916 # 8002e1e0 <__func__.0+0x2f8>
    8000c57c:	6af1e0ef          	jal	8002b42a <printf>
    8000c580:	0004c797          	auipc	a5,0x4c
    8000c584:	a917c783          	lbu	a5,-1391(a5) # 80058011 <excpt+0x1>
    8000c588:	e399                	bnez	a5,8000c58e <tinst_tests_gpf+0x12e2>
    8000c58a:	44a0106f          	j	8000d9d4 <tinst_tests_gpf+0x2728>
    8000c58e:	6418                	ld	a4,8(s0)
    8000c590:	47dd                	li	a5,23
    8000c592:	00022597          	auipc	a1,0x22
    8000c596:	c2658593          	addi	a1,a1,-986 # 8002e1b8 <__func__.0+0x2d0>
    8000c59a:	00f71463          	bne	a4,a5,8000c5a2 <tinst_tests_gpf+0x12f6>
    8000c59e:	3e80106f          	j	8000d986 <tinst_tests_gpf+0x26da>
    8000c5a2:	00022517          	auipc	a0,0x22
    8000c5a6:	c5650513          	addi	a0,a0,-938 # 8002e1f8 <__func__.0+0x310>
    8000c5aa:	6811e0ef          	jal	8002b42a <printf>
    8000c5ae:	0004c797          	auipc	a5,0x4c
    8000c5b2:	a637c783          	lbu	a5,-1437(a5) # 80058011 <excpt+0x1>
    8000c5b6:	c799                	beqz	a5,8000c5c4 <tinst_tests_gpf+0x1318>
    8000c5b8:	6418                	ld	a4,8(s0)
    8000c5ba:	47dd                	li	a5,23
    8000c5bc:	00f71463          	bne	a4,a5,8000c5c4 <tinst_tests_gpf+0x1318>
    8000c5c0:	0df0106f          	j	8000de9e <tinst_tests_gpf+0x2bf2>
    8000c5c4:	00022517          	auipc	a0,0x22
    8000c5c8:	c3c50513          	addi	a0,a0,-964 # 8002e200 <__func__.0+0x318>
    8000c5cc:	65f1e0ef          	jal	8002b42a <printf>
    8000c5d0:	02900513          	li	a0,41
    8000c5d4:	3451d0ef          	jal	8002a118 <putchar>
    8000c5d8:	4529                	li	a0,10
    8000c5da:	33f1d0ef          	jal	8002a118 <putchar>
    8000c5de:	cc89                	beqz	s1,8000c5f8 <tinst_tests_gpf+0x134c>
    8000c5e0:	0004c797          	auipc	a5,0x4c
    8000c5e4:	a317c783          	lbu	a5,-1487(a5) # 80058011 <excpt+0x1>
    8000c5e8:	c799                	beqz	a5,8000c5f6 <tinst_tests_gpf+0x134a>
    8000c5ea:	6418                	ld	a4,8(s0)
    8000c5ec:	47dd                	li	a5,23
    8000c5ee:	00f71463          	bne	a4,a5,8000c5f6 <tinst_tests_gpf+0x134a>
    8000c5f2:	68d0106f          	j	8000e47e <tinst_tests_gpf+0x31d2>
    8000c5f6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c5f8:	815f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000c5fc:	001007b7          	lui	a5,0x100
    8000c600:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c604:	07b2                	slli	a5,a5,0xc
    8000c606:	4127b92f          	amoor.d	s2,s2,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000c60a:	00024617          	auipc	a2,0x24
    8000c60e:	56660613          	addi	a2,a2,1382 # 80030b70 <__func__.0+0x2c88>
    8000c612:	08200593          	li	a1,130
    8000c616:	00022517          	auipc	a0,0x22
    8000c61a:	bca50513          	addi	a0,a0,-1078 # 8002e1e0 <__func__.0+0x2f8>
    8000c61e:	60d1e0ef          	jal	8002b42a <printf>
    8000c622:	0004c797          	auipc	a5,0x4c
    8000c626:	9ef7c783          	lbu	a5,-1553(a5) # 80058011 <excpt+0x1>
    8000c62a:	e399                	bnez	a5,8000c630 <tinst_tests_gpf+0x1384>
    8000c62c:	4360106f          	j	8000da62 <tinst_tests_gpf+0x27b6>
    8000c630:	6418                	ld	a4,8(s0)
    8000c632:	47dd                	li	a5,23
    8000c634:	00022597          	auipc	a1,0x22
    8000c638:	b8458593          	addi	a1,a1,-1148 # 8002e1b8 <__func__.0+0x2d0>
    8000c63c:	00f71463          	bne	a4,a5,8000c644 <tinst_tests_gpf+0x1398>
    8000c640:	3d40106f          	j	8000da14 <tinst_tests_gpf+0x2768>
    8000c644:	00022517          	auipc	a0,0x22
    8000c648:	bb450513          	addi	a0,a0,-1100 # 8002e1f8 <__func__.0+0x310>
    8000c64c:	5df1e0ef          	jal	8002b42a <printf>
    8000c650:	0004c797          	auipc	a5,0x4c
    8000c654:	9c17c783          	lbu	a5,-1599(a5) # 80058011 <excpt+0x1>
    8000c658:	c799                	beqz	a5,8000c666 <tinst_tests_gpf+0x13ba>
    8000c65a:	6418                	ld	a4,8(s0)
    8000c65c:	47dd                	li	a5,23
    8000c65e:	00f71463          	bne	a4,a5,8000c666 <tinst_tests_gpf+0x13ba>
    8000c662:	6a50106f          	j	8000e506 <tinst_tests_gpf+0x325a>
    8000c666:	00022517          	auipc	a0,0x22
    8000c66a:	b9a50513          	addi	a0,a0,-1126 # 8002e200 <__func__.0+0x318>
    8000c66e:	5bd1e0ef          	jal	8002b42a <printf>
    8000c672:	02900513          	li	a0,41
    8000c676:	2a31d0ef          	jal	8002a118 <putchar>
    8000c67a:	4529                	li	a0,10
    8000c67c:	29d1d0ef          	jal	8002a118 <putchar>
    8000c680:	cc89                	beqz	s1,8000c69a <tinst_tests_gpf+0x13ee>
    8000c682:	0004c797          	auipc	a5,0x4c
    8000c686:	98f7c783          	lbu	a5,-1649(a5) # 80058011 <excpt+0x1>
    8000c68a:	c799                	beqz	a5,8000c698 <tinst_tests_gpf+0x13ec>
    8000c68c:	6418                	ld	a4,8(s0)
    8000c68e:	47dd                	li	a5,23
    8000c690:	00f71463          	bne	a4,a5,8000c698 <tinst_tests_gpf+0x13ec>
    8000c694:	62f0106f          	j	8000e4c2 <tinst_tests_gpf+0x3216>
    8000c698:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c69a:	f72f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000c69e:	001007b7          	lui	a5,0x100
    8000c6a2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c6a6:	07b2                	slli	a5,a5,0xc
    8000c6a8:	8127b92f          	amomin.d	s2,s2,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000c6ac:	00024617          	auipc	a2,0x24
    8000c6b0:	50460613          	addi	a2,a2,1284 # 80030bb0 <__func__.0+0x2cc8>
    8000c6b4:	08200593          	li	a1,130
    8000c6b8:	00022517          	auipc	a0,0x22
    8000c6bc:	b2850513          	addi	a0,a0,-1240 # 8002e1e0 <__func__.0+0x2f8>
    8000c6c0:	56b1e0ef          	jal	8002b42a <printf>
    8000c6c4:	0004c797          	auipc	a5,0x4c
    8000c6c8:	94d7c783          	lbu	a5,-1715(a5) # 80058011 <excpt+0x1>
    8000c6cc:	e399                	bnez	a5,8000c6d2 <tinst_tests_gpf+0x1426>
    8000c6ce:	4220106f          	j	8000daf0 <tinst_tests_gpf+0x2844>
    8000c6d2:	6418                	ld	a4,8(s0)
    8000c6d4:	47dd                	li	a5,23
    8000c6d6:	00022597          	auipc	a1,0x22
    8000c6da:	ae258593          	addi	a1,a1,-1310 # 8002e1b8 <__func__.0+0x2d0>
    8000c6de:	00f71463          	bne	a4,a5,8000c6e6 <tinst_tests_gpf+0x143a>
    8000c6e2:	3c00106f          	j	8000daa2 <tinst_tests_gpf+0x27f6>
    8000c6e6:	00022517          	auipc	a0,0x22
    8000c6ea:	b1250513          	addi	a0,a0,-1262 # 8002e1f8 <__func__.0+0x310>
    8000c6ee:	53d1e0ef          	jal	8002b42a <printf>
    8000c6f2:	0004c797          	auipc	a5,0x4c
    8000c6f6:	91f7c783          	lbu	a5,-1761(a5) # 80058011 <excpt+0x1>
    8000c6fa:	c799                	beqz	a5,8000c708 <tinst_tests_gpf+0x145c>
    8000c6fc:	6418                	ld	a4,8(s0)
    8000c6fe:	47dd                	li	a5,23
    8000c700:	00f71463          	bne	a4,a5,8000c708 <tinst_tests_gpf+0x145c>
    8000c704:	6470106f          	j	8000e54a <tinst_tests_gpf+0x329e>
    8000c708:	00022517          	auipc	a0,0x22
    8000c70c:	af850513          	addi	a0,a0,-1288 # 8002e200 <__func__.0+0x318>
    8000c710:	51b1e0ef          	jal	8002b42a <printf>
    8000c714:	02900513          	li	a0,41
    8000c718:	2011d0ef          	jal	8002a118 <putchar>
    8000c71c:	4529                	li	a0,10
    8000c71e:	1fb1d0ef          	jal	8002a118 <putchar>
    8000c722:	c889                	beqz	s1,8000c734 <tinst_tests_gpf+0x1488>
    8000c724:	0004c797          	auipc	a5,0x4c
    8000c728:	8ed7c783          	lbu	a5,-1811(a5) # 80058011 <excpt+0x1>
    8000c72c:	c399                	beqz	a5,8000c732 <tinst_tests_gpf+0x1486>
    8000c72e:	7b20106f          	j	8000dee0 <tinst_tests_gpf+0x2c34>
    8000c732:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c734:	ed8f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000c738:	001007b7          	lui	a5,0x100
    8000c73c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c740:	07b2                	slli	a5,a5,0xc
    8000c742:	a127b92f          	amomax.d	s2,s2,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000c746:	00024617          	auipc	a2,0x24
    8000c74a:	4aa60613          	addi	a2,a2,1194 # 80030bf0 <__func__.0+0x2d08>
    8000c74e:	08200593          	li	a1,130
    8000c752:	00022517          	auipc	a0,0x22
    8000c756:	a8e50513          	addi	a0,a0,-1394 # 8002e1e0 <__func__.0+0x2f8>
    8000c75a:	4d11e0ef          	jal	8002b42a <printf>
    8000c75e:	0004c797          	auipc	a5,0x4c
    8000c762:	8b37c783          	lbu	a5,-1869(a5) # 80058011 <excpt+0x1>
    8000c766:	e399                	bnez	a5,8000c76c <tinst_tests_gpf+0x14c0>
    8000c768:	4240106f          	j	8000db8c <tinst_tests_gpf+0x28e0>
    8000c76c:	6418                	ld	a4,8(s0)
    8000c76e:	47dd                	li	a5,23
    8000c770:	00022597          	auipc	a1,0x22
    8000c774:	a4858593          	addi	a1,a1,-1464 # 8002e1b8 <__func__.0+0x2d0>
    8000c778:	00f71463          	bne	a4,a5,8000c780 <tinst_tests_gpf+0x14d4>
    8000c77c:	3c20106f          	j	8000db3e <tinst_tests_gpf+0x2892>
    8000c780:	00022517          	auipc	a0,0x22
    8000c784:	a7850513          	addi	a0,a0,-1416 # 8002e1f8 <__func__.0+0x310>
    8000c788:	4a31e0ef          	jal	8002b42a <printf>
    8000c78c:	0004c797          	auipc	a5,0x4c
    8000c790:	8857c783          	lbu	a5,-1915(a5) # 80058011 <excpt+0x1>
    8000c794:	c799                	beqz	a5,8000c7a2 <tinst_tests_gpf+0x14f6>
    8000c796:	6418                	ld	a4,8(s0)
    8000c798:	47dd                	li	a5,23
    8000c79a:	00f71463          	bne	a4,a5,8000c7a2 <tinst_tests_gpf+0x14f6>
    8000c79e:	5f10106f          	j	8000e58e <tinst_tests_gpf+0x32e2>
    8000c7a2:	00022517          	auipc	a0,0x22
    8000c7a6:	a5e50513          	addi	a0,a0,-1442 # 8002e200 <__func__.0+0x318>
    8000c7aa:	4811e0ef          	jal	8002b42a <printf>
    8000c7ae:	02900513          	li	a0,41
    8000c7b2:	1671d0ef          	jal	8002a118 <putchar>
    8000c7b6:	4529                	li	a0,10
    8000c7b8:	1611d0ef          	jal	8002a118 <putchar>
    8000c7bc:	c889                	beqz	s1,8000c7ce <tinst_tests_gpf+0x1522>
    8000c7be:	0004c797          	auipc	a5,0x4c
    8000c7c2:	8537c783          	lbu	a5,-1965(a5) # 80058011 <excpt+0x1>
    8000c7c6:	c399                	beqz	a5,8000c7cc <tinst_tests_gpf+0x1520>
    8000c7c8:	7660106f          	j	8000df2e <tinst_tests_gpf+0x2c82>
    8000c7cc:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7ce:	e3ef40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000c7d2:	001007b7          	lui	a5,0x100
    8000c7d6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7da:	07b2                	slli	a5,a5,0xc
    8000c7dc:	c127b92f          	amominu.d	s2,s2,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000c7e0:	00024617          	auipc	a2,0x24
    8000c7e4:	45060613          	addi	a2,a2,1104 # 80030c30 <__func__.0+0x2d48>
    8000c7e8:	08200593          	li	a1,130
    8000c7ec:	00022517          	auipc	a0,0x22
    8000c7f0:	9f450513          	addi	a0,a0,-1548 # 8002e1e0 <__func__.0+0x2f8>
    8000c7f4:	4371e0ef          	jal	8002b42a <printf>
    8000c7f8:	0004c797          	auipc	a5,0x4c
    8000c7fc:	8197c783          	lbu	a5,-2023(a5) # 80058011 <excpt+0x1>
    8000c800:	e399                	bnez	a5,8000c806 <tinst_tests_gpf+0x155a>
    8000c802:	3e40106f          	j	8000dbe6 <tinst_tests_gpf+0x293a>
    8000c806:	6418                	ld	a4,8(s0)
    8000c808:	47dd                	li	a5,23
    8000c80a:	00022597          	auipc	a1,0x22
    8000c80e:	9ae58593          	addi	a1,a1,-1618 # 8002e1b8 <__func__.0+0x2d0>
    8000c812:	00f71463          	bne	a4,a5,8000c81a <tinst_tests_gpf+0x156e>
    8000c816:	3820106f          	j	8000db98 <tinst_tests_gpf+0x28ec>
    8000c81a:	00022517          	auipc	a0,0x22
    8000c81e:	9de50513          	addi	a0,a0,-1570 # 8002e1f8 <__func__.0+0x310>
    8000c822:	4091e0ef          	jal	8002b42a <printf>
    8000c826:	0004b797          	auipc	a5,0x4b
    8000c82a:	7eb7c783          	lbu	a5,2027(a5) # 80058011 <excpt+0x1>
    8000c82e:	c799                	beqz	a5,8000c83c <tinst_tests_gpf+0x1590>
    8000c830:	6418                	ld	a4,8(s0)
    8000c832:	47dd                	li	a5,23
    8000c834:	00f71463          	bne	a4,a5,8000c83c <tinst_tests_gpf+0x1590>
    8000c838:	59b0106f          	j	8000e5d2 <tinst_tests_gpf+0x3326>
    8000c83c:	00022517          	auipc	a0,0x22
    8000c840:	9c450513          	addi	a0,a0,-1596 # 8002e200 <__func__.0+0x318>
    8000c844:	3e71e0ef          	jal	8002b42a <printf>
    8000c848:	02900513          	li	a0,41
    8000c84c:	0cd1d0ef          	jal	8002a118 <putchar>
    8000c850:	4529                	li	a0,10
    8000c852:	0c71d0ef          	jal	8002a118 <putchar>
    8000c856:	c889                	beqz	s1,8000c868 <tinst_tests_gpf+0x15bc>
    8000c858:	0004b797          	auipc	a5,0x4b
    8000c85c:	7b97c783          	lbu	a5,1977(a5) # 80058011 <excpt+0x1>
    8000c860:	c399                	beqz	a5,8000c866 <tinst_tests_gpf+0x15ba>
    8000c862:	71a0106f          	j	8000df7c <tinst_tests_gpf+0x2cd0>
    8000c866:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c868:	da4f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000c86c:	001007b7          	lui	a5,0x100
    8000c870:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c874:	07b2                	slli	a5,a5,0xc
    8000c876:	e127b92f          	amomaxu.d	s2,s2,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c87a:	00024617          	auipc	a2,0x24
    8000c87e:	3fe60613          	addi	a2,a2,1022 # 80030c78 <__func__.0+0x2d90>
    8000c882:	08200593          	li	a1,130
    8000c886:	00022517          	auipc	a0,0x22
    8000c88a:	95a50513          	addi	a0,a0,-1702 # 8002e1e0 <__func__.0+0x2f8>
    8000c88e:	39d1e0ef          	jal	8002b42a <printf>
    8000c892:	0004b797          	auipc	a5,0x4b
    8000c896:	77f7c783          	lbu	a5,1919(a5) # 80058011 <excpt+0x1>
    8000c89a:	e399                	bnez	a5,8000c8a0 <tinst_tests_gpf+0x15f4>
    8000c89c:	3a40106f          	j	8000dc40 <tinst_tests_gpf+0x2994>
    8000c8a0:	6418                	ld	a4,8(s0)
    8000c8a2:	47dd                	li	a5,23
    8000c8a4:	00022597          	auipc	a1,0x22
    8000c8a8:	91458593          	addi	a1,a1,-1772 # 8002e1b8 <__func__.0+0x2d0>
    8000c8ac:	00f71463          	bne	a4,a5,8000c8b4 <tinst_tests_gpf+0x1608>
    8000c8b0:	3420106f          	j	8000dbf2 <tinst_tests_gpf+0x2946>
    8000c8b4:	00022517          	auipc	a0,0x22
    8000c8b8:	94450513          	addi	a0,a0,-1724 # 8002e1f8 <__func__.0+0x310>
    8000c8bc:	36f1e0ef          	jal	8002b42a <printf>
    8000c8c0:	0004b797          	auipc	a5,0x4b
    8000c8c4:	7517c783          	lbu	a5,1873(a5) # 80058011 <excpt+0x1>
    8000c8c8:	c799                	beqz	a5,8000c8d6 <tinst_tests_gpf+0x162a>
    8000c8ca:	6418                	ld	a4,8(s0)
    8000c8cc:	47dd                	li	a5,23
    8000c8ce:	00f71463          	bne	a4,a5,8000c8d6 <tinst_tests_gpf+0x162a>
    8000c8d2:	5450106f          	j	8000e616 <tinst_tests_gpf+0x336a>
    8000c8d6:	00022517          	auipc	a0,0x22
    8000c8da:	92a50513          	addi	a0,a0,-1750 # 8002e200 <__func__.0+0x318>
    8000c8de:	34d1e0ef          	jal	8002b42a <printf>
    8000c8e2:	02900513          	li	a0,41
    8000c8e6:	0331d0ef          	jal	8002a118 <putchar>
    8000c8ea:	4529                	li	a0,10
    8000c8ec:	02d1d0ef          	jal	8002a118 <putchar>
    8000c8f0:	cca9                	beqz	s1,8000c94a <tinst_tests_gpf+0x169e>
    8000c8f2:	0004b497          	auipc	s1,0x4b
    8000c8f6:	71f4c483          	lbu	s1,1823(s1) # 80058011 <excpt+0x1>
    8000c8fa:	c8a9                	beqz	s1,8000c94c <tinst_tests_gpf+0x16a0>
    8000c8fc:	6418                	ld	a4,8(s0)
    8000c8fe:	47dd                	li	a5,23
    8000c900:	04f71563          	bne	a4,a5,8000c94a <tinst_tests_gpf+0x169e>
    8000c904:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000c906:	00022597          	auipc	a1,0x22
    8000c90a:	8a258593          	addi	a1,a1,-1886 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c90e:	c3b9                	beqz	a5,8000c954 <tinst_tests_gpf+0x16a8>
    8000c910:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c912:	0016f713          	andi	a4,a3,1
    8000c916:	380718e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c91a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c91e:	460d                	li	a2,3
    8000c920:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c924:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c926:	00c59763          	bne	a1,a2,8000c934 <tinst_tests_gpf+0x1688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c92a:	0026d683          	lhu	a3,2(a3)
    8000c92e:	0106969b          	slliw	a3,a3,0x10
    8000c932:	8f55                	or	a4,a4,a3
    8000c934:	1ffe16b7          	lui	a3,0x1ffe1
    8000c938:	068e                	slli	a3,a3,0x3
    8000c93a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000c93c:	8f75                	and	a4,a4,a3
    TEST_END();
    8000c93e:	00022597          	auipc	a1,0x22
    8000c942:	86a58593          	addi	a1,a1,-1942 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c946:	00e78763          	beq	a5,a4,8000c954 <tinst_tests_gpf+0x16a8>
    8000c94a:	4481                	li	s1,0
    TEST_END();
    8000c94c:	00022597          	auipc	a1,0x22
    8000c950:	86c58593          	addi	a1,a1,-1940 # 8002e1b8 <__func__.0+0x2d0>
    8000c954:	00022517          	auipc	a0,0x22
    8000c958:	90c50513          	addi	a0,a0,-1780 # 8002e260 <__func__.0+0x378>
    8000c95c:	2cf1e0ef          	jal	8002b42a <printf>
    8000c960:	4511                	li	a0,4
    8000c962:	da6f40ef          	jal	80000f08 <goto_priv>
    8000c966:	ebff40ef          	jal	80001824 <reset_state>
}
    8000c96a:	70a2                	ld	ra,40(sp)
    8000c96c:	7402                	ld	s0,32(sp)
    8000c96e:	6942                	ld	s2,16(sp)
    8000c970:	69a2                	ld	s3,8(sp)
    8000c972:	8526                	mv	a0,s1
    8000c974:	64e2                	ld	s1,24(sp)
    8000c976:	6145                	addi	sp,sp,48
    8000c978:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c97a:	701c                	ld	a5,32(s0)
    8000c97c:	00022597          	auipc	a1,0x22
    8000c980:	82c58593          	addi	a1,a1,-2004 # 8002e1a8 <__func__.0+0x2c0>
    8000c984:	e399                	bnez	a5,8000c98a <tinst_tests_gpf+0x16de>
    8000c986:	abbfe06f          	j	8000b440 <tinst_tests_gpf+0x194>
    8000c98a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c98c:	0016f713          	andi	a4,a3,1
    8000c990:	30071be3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c994:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c998:	460d                	li	a2,3
    8000c99a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c99e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9a0:	00c59763          	bne	a1,a2,8000c9ae <tinst_tests_gpf+0x1702>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9a4:	0026d683          	lhu	a3,2(a3)
    8000c9a8:	0106969b          	slliw	a3,a3,0x10
    8000c9ac:	8f55                	or	a4,a4,a3
    8000c9ae:	1746                	slli	a4,a4,0x31
    8000c9b0:	9345                	srli	a4,a4,0x31
    8000c9b2:	00021597          	auipc	a1,0x21
    8000c9b6:	7f658593          	addi	a1,a1,2038 # 8002e1a8 <__func__.0+0x2c0>
    8000c9ba:	00e79463          	bne	a5,a4,8000c9c2 <tinst_tests_gpf+0x1716>
    8000c9be:	a83fe06f          	j	8000b440 <tinst_tests_gpf+0x194>
    8000c9c2:	00021597          	auipc	a1,0x21
    8000c9c6:	7f658593          	addi	a1,a1,2038 # 8002e1b8 <__func__.0+0x2d0>
    8000c9ca:	a77fe06f          	j	8000b440 <tinst_tests_gpf+0x194>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000c9ce:	6418                	ld	a4,8(s0)
    8000c9d0:	47d5                	li	a5,21
    8000c9d2:	00021597          	auipc	a1,0x21
    8000c9d6:	7e658593          	addi	a1,a1,2022 # 8002e1b8 <__func__.0+0x2d0>
    8000c9da:	00f70463          	beq	a4,a5,8000c9e2 <tinst_tests_gpf+0x1736>
    8000c9de:	af9fe06f          	j	8000b4d6 <tinst_tests_gpf+0x22a>
    8000c9e2:	701c                	ld	a5,32(s0)
    8000c9e4:	00021597          	auipc	a1,0x21
    8000c9e8:	7c458593          	addi	a1,a1,1988 # 8002e1a8 <__func__.0+0x2c0>
    8000c9ec:	e399                	bnez	a5,8000c9f2 <tinst_tests_gpf+0x1746>
    8000c9ee:	ae9fe06f          	j	8000b4d6 <tinst_tests_gpf+0x22a>
    8000c9f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c9f4:	0016f713          	andi	a4,a3,1
    8000c9f8:	2a0717e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c9fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca00:	460d                	li	a2,3
    8000ca02:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca06:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca08:	00c59763          	bne	a1,a2,8000ca16 <tinst_tests_gpf+0x176a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca0c:	0026d683          	lhu	a3,2(a3)
    8000ca10:	0106969b          	slliw	a3,a3,0x10
    8000ca14:	8f55                	or	a4,a4,a3
    8000ca16:	1746                	slli	a4,a4,0x31
    8000ca18:	9345                	srli	a4,a4,0x31
    8000ca1a:	00021597          	auipc	a1,0x21
    8000ca1e:	78e58593          	addi	a1,a1,1934 # 8002e1a8 <__func__.0+0x2c0>
    8000ca22:	00e78463          	beq	a5,a4,8000ca2a <tinst_tests_gpf+0x177e>
    8000ca26:	aa9fe06f          	j	8000b4ce <tinst_tests_gpf+0x222>
    8000ca2a:	aadfe06f          	j	8000b4d6 <tinst_tests_gpf+0x22a>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000ca2e:	701c                	ld	a5,32(s0)
    8000ca30:	e399                	bnez	a5,8000ca36 <tinst_tests_gpf+0x178a>
    8000ca32:	a45fe06f          	j	8000b476 <tinst_tests_gpf+0x1ca>
    8000ca36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca38:	0016f713          	andi	a4,a3,1
    8000ca3c:	260715e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca44:	460d                	li	a2,3
    8000ca46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca4c:	00c59763          	bne	a1,a2,8000ca5a <tinst_tests_gpf+0x17ae>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca50:	0026d683          	lhu	a3,2(a3)
    8000ca54:	0106969b          	slliw	a3,a3,0x10
    8000ca58:	8f55                	or	a4,a4,a3
    8000ca5a:	1746                	slli	a4,a4,0x31
    8000ca5c:	9345                	srli	a4,a4,0x31
    8000ca5e:	00e78463          	beq	a5,a4,8000ca66 <tinst_tests_gpf+0x17ba>
    8000ca62:	a01fe06f          	j	8000b462 <tinst_tests_gpf+0x1b6>
    8000ca66:	a11fe06f          	j	8000b476 <tinst_tests_gpf+0x1ca>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000ca6a:	701c                	ld	a5,32(s0)
    8000ca6c:	00021597          	auipc	a1,0x21
    8000ca70:	73c58593          	addi	a1,a1,1852 # 8002e1a8 <__func__.0+0x2c0>
    8000ca74:	e399                	bnez	a5,8000ca7a <tinst_tests_gpf+0x17ce>
    8000ca76:	b03fe06f          	j	8000b578 <tinst_tests_gpf+0x2cc>
    8000ca7a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca7c:	0016f713          	andi	a4,a3,1
    8000ca80:	220713e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca84:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca88:	460d                	li	a2,3
    8000ca8a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca8e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca90:	00c59763          	bne	a1,a2,8000ca9e <tinst_tests_gpf+0x17f2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca94:	0026d683          	lhu	a3,2(a3)
    8000ca98:	0106969b          	slliw	a3,a3,0x10
    8000ca9c:	8f55                	or	a4,a4,a3
    8000ca9e:	1746                	slli	a4,a4,0x31
    8000caa0:	9345                	srli	a4,a4,0x31
    8000caa2:	00021597          	auipc	a1,0x21
    8000caa6:	70658593          	addi	a1,a1,1798 # 8002e1a8 <__func__.0+0x2c0>
    8000caaa:	00e79463          	bne	a5,a4,8000cab2 <tinst_tests_gpf+0x1806>
    8000caae:	acbfe06f          	j	8000b578 <tinst_tests_gpf+0x2cc>
    8000cab2:	00021597          	auipc	a1,0x21
    8000cab6:	70658593          	addi	a1,a1,1798 # 8002e1b8 <__func__.0+0x2d0>
    8000caba:	abffe06f          	j	8000b578 <tinst_tests_gpf+0x2cc>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000cabe:	701c                	ld	a5,32(s0)
    8000cac0:	00021597          	auipc	a1,0x21
    8000cac4:	6e858593          	addi	a1,a1,1768 # 8002e1a8 <__func__.0+0x2c0>
    8000cac8:	e399                	bnez	a5,8000cace <tinst_tests_gpf+0x1822>
    8000caca:	b51fe06f          	j	8000b61a <tinst_tests_gpf+0x36e>
    8000cace:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cad0:	0016f713          	andi	a4,a3,1
    8000cad4:	1c0719e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cad8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cadc:	460d                	li	a2,3
    8000cade:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cae2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cae4:	00c59763          	bne	a1,a2,8000caf2 <tinst_tests_gpf+0x1846>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cae8:	0026d683          	lhu	a3,2(a3)
    8000caec:	0106969b          	slliw	a3,a3,0x10
    8000caf0:	8f55                	or	a4,a4,a3
    8000caf2:	1746                	slli	a4,a4,0x31
    8000caf4:	9345                	srli	a4,a4,0x31
    8000caf6:	00021597          	auipc	a1,0x21
    8000cafa:	6b258593          	addi	a1,a1,1714 # 8002e1a8 <__func__.0+0x2c0>
    8000cafe:	00e79463          	bne	a5,a4,8000cb06 <tinst_tests_gpf+0x185a>
    8000cb02:	b19fe06f          	j	8000b61a <tinst_tests_gpf+0x36e>
    8000cb06:	00021597          	auipc	a1,0x21
    8000cb0a:	6b258593          	addi	a1,a1,1714 # 8002e1b8 <__func__.0+0x2d0>
    8000cb0e:	b0dfe06f          	j	8000b61a <tinst_tests_gpf+0x36e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cb12:	701c                	ld	a5,32(s0)
    8000cb14:	00021597          	auipc	a1,0x21
    8000cb18:	69458593          	addi	a1,a1,1684 # 8002e1a8 <__func__.0+0x2c0>
    8000cb1c:	e399                	bnez	a5,8000cb22 <tinst_tests_gpf+0x1876>
    8000cb1e:	b9ffe06f          	j	8000b6bc <tinst_tests_gpf+0x410>
    8000cb22:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb24:	0016f713          	andi	a4,a3,1
    8000cb28:	16071fe3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb2c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb30:	460d                	li	a2,3
    8000cb32:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb36:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb38:	00c59763          	bne	a1,a2,8000cb46 <tinst_tests_gpf+0x189a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb3c:	0026d683          	lhu	a3,2(a3)
    8000cb40:	0106969b          	slliw	a3,a3,0x10
    8000cb44:	8f55                	or	a4,a4,a3
    8000cb46:	1746                	slli	a4,a4,0x31
    8000cb48:	9345                	srli	a4,a4,0x31
    8000cb4a:	00021597          	auipc	a1,0x21
    8000cb4e:	65e58593          	addi	a1,a1,1630 # 8002e1a8 <__func__.0+0x2c0>
    8000cb52:	00e79463          	bne	a5,a4,8000cb5a <tinst_tests_gpf+0x18ae>
    8000cb56:	b67fe06f          	j	8000b6bc <tinst_tests_gpf+0x410>
    8000cb5a:	00021597          	auipc	a1,0x21
    8000cb5e:	65e58593          	addi	a1,a1,1630 # 8002e1b8 <__func__.0+0x2d0>
    8000cb62:	b5bfe06f          	j	8000b6bc <tinst_tests_gpf+0x410>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cb66:	701c                	ld	a5,32(s0)
    8000cb68:	00021597          	auipc	a1,0x21
    8000cb6c:	64058593          	addi	a1,a1,1600 # 8002e1a8 <__func__.0+0x2c0>
    8000cb70:	e399                	bnez	a5,8000cb76 <tinst_tests_gpf+0x18ca>
    8000cb72:	be5fe06f          	j	8000b756 <tinst_tests_gpf+0x4aa>
    8000cb76:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb78:	0016f713          	andi	a4,a3,1
    8000cb7c:	120715e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb80:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb84:	460d                	li	a2,3
    8000cb86:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb8a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb8c:	00c59763          	bne	a1,a2,8000cb9a <tinst_tests_gpf+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb90:	0026d683          	lhu	a3,2(a3)
    8000cb94:	0106969b          	slliw	a3,a3,0x10
    8000cb98:	8f55                	or	a4,a4,a3
    8000cb9a:	1746                	slli	a4,a4,0x31
    8000cb9c:	9345                	srli	a4,a4,0x31
    8000cb9e:	00021597          	auipc	a1,0x21
    8000cba2:	60a58593          	addi	a1,a1,1546 # 8002e1a8 <__func__.0+0x2c0>
    8000cba6:	00e79463          	bne	a5,a4,8000cbae <tinst_tests_gpf+0x1902>
    8000cbaa:	badfe06f          	j	8000b756 <tinst_tests_gpf+0x4aa>
    8000cbae:	00021597          	auipc	a1,0x21
    8000cbb2:	60a58593          	addi	a1,a1,1546 # 8002e1b8 <__func__.0+0x2d0>
    8000cbb6:	ba1fe06f          	j	8000b756 <tinst_tests_gpf+0x4aa>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cbba:	701c                	ld	a5,32(s0)
    8000cbbc:	00021597          	auipc	a1,0x21
    8000cbc0:	5ec58593          	addi	a1,a1,1516 # 8002e1a8 <__func__.0+0x2c0>
    8000cbc4:	e399                	bnez	a5,8000cbca <tinst_tests_gpf+0x191e>
    8000cbc6:	c2dfe06f          	j	8000b7f2 <tinst_tests_gpf+0x546>
    8000cbca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cbcc:	0016f713          	andi	a4,a3,1
    8000cbd0:	0c071be3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cbd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cbd8:	460d                	li	a2,3
    8000cbda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cbde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cbe0:	00c59763          	bne	a1,a2,8000cbee <tinst_tests_gpf+0x1942>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cbe4:	0026d683          	lhu	a3,2(a3)
    8000cbe8:	0106969b          	slliw	a3,a3,0x10
    8000cbec:	8f55                	or	a4,a4,a3
    8000cbee:	01f076b7          	lui	a3,0x1f07
    8000cbf2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cbf6:	8f75                	and	a4,a4,a3
    8000cbf8:	00021597          	auipc	a1,0x21
    8000cbfc:	5b058593          	addi	a1,a1,1456 # 8002e1a8 <__func__.0+0x2c0>
    8000cc00:	00e79463          	bne	a5,a4,8000cc08 <tinst_tests_gpf+0x195c>
    8000cc04:	beffe06f          	j	8000b7f2 <tinst_tests_gpf+0x546>
    8000cc08:	00021597          	auipc	a1,0x21
    8000cc0c:	5b058593          	addi	a1,a1,1456 # 8002e1b8 <__func__.0+0x2d0>
    8000cc10:	be3fe06f          	j	8000b7f2 <tinst_tests_gpf+0x546>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000cc14:	701c                	ld	a5,32(s0)
    8000cc16:	00021597          	auipc	a1,0x21
    8000cc1a:	59258593          	addi	a1,a1,1426 # 8002e1a8 <__func__.0+0x2c0>
    8000cc1e:	e399                	bnez	a5,8000cc24 <tinst_tests_gpf+0x1978>
    8000cc20:	c73fe06f          	j	8000b892 <tinst_tests_gpf+0x5e6>
    8000cc24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc26:	0016f713          	andi	a4,a3,1
    8000cc2a:	06071ee3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc32:	460d                	li	a2,3
    8000cc34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc3a:	00c59763          	bne	a1,a2,8000cc48 <tinst_tests_gpf+0x199c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc3e:	0026d683          	lhu	a3,2(a3)
    8000cc42:	0106969b          	slliw	a3,a3,0x10
    8000cc46:	8f55                	or	a4,a4,a3
    8000cc48:	01f076b7          	lui	a3,0x1f07
    8000cc4c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cc50:	8f75                	and	a4,a4,a3
    8000cc52:	00021597          	auipc	a1,0x21
    8000cc56:	55658593          	addi	a1,a1,1366 # 8002e1a8 <__func__.0+0x2c0>
    8000cc5a:	00e79463          	bne	a5,a4,8000cc62 <tinst_tests_gpf+0x19b6>
    8000cc5e:	c35fe06f          	j	8000b892 <tinst_tests_gpf+0x5e6>
    8000cc62:	00021597          	auipc	a1,0x21
    8000cc66:	55658593          	addi	a1,a1,1366 # 8002e1b8 <__func__.0+0x2d0>
    8000cc6a:	c29fe06f          	j	8000b892 <tinst_tests_gpf+0x5e6>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000cc6e:	701c                	ld	a5,32(s0)
    8000cc70:	00021597          	auipc	a1,0x21
    8000cc74:	53858593          	addi	a1,a1,1336 # 8002e1a8 <__func__.0+0x2c0>
    8000cc78:	e399                	bnez	a5,8000cc7e <tinst_tests_gpf+0x19d2>
    8000cc7a:	cbbfe06f          	j	8000b934 <tinst_tests_gpf+0x688>
    8000cc7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc80:	0016f713          	andi	a4,a3,1
    8000cc84:	020711e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc8c:	460d                	li	a2,3
    8000cc8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc94:	00c59763          	bne	a1,a2,8000cca2 <tinst_tests_gpf+0x19f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc98:	0026d683          	lhu	a3,2(a3)
    8000cc9c:	0106969b          	slliw	a3,a3,0x10
    8000cca0:	8f55                	or	a4,a4,a3
    8000cca2:	01f076b7          	lui	a3,0x1f07
    8000cca6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000ccaa:	8f75                	and	a4,a4,a3
    8000ccac:	00021597          	auipc	a1,0x21
    8000ccb0:	4fc58593          	addi	a1,a1,1276 # 8002e1a8 <__func__.0+0x2c0>
    8000ccb4:	00e79463          	bne	a5,a4,8000ccbc <tinst_tests_gpf+0x1a10>
    8000ccb8:	c7dfe06f          	j	8000b934 <tinst_tests_gpf+0x688>
    8000ccbc:	00021597          	auipc	a1,0x21
    8000ccc0:	4fc58593          	addi	a1,a1,1276 # 8002e1b8 <__func__.0+0x2d0>
    8000ccc4:	c71fe06f          	j	8000b934 <tinst_tests_gpf+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000ccc8:	701c                	ld	a5,32(s0)
    8000ccca:	00021597          	auipc	a1,0x21
    8000ccce:	4de58593          	addi	a1,a1,1246 # 8002e1a8 <__func__.0+0x2c0>
    8000ccd2:	e399                	bnez	a5,8000ccd8 <tinst_tests_gpf+0x1a2c>
    8000ccd4:	d05fe06f          	j	8000b9d8 <tinst_tests_gpf+0x72c>
    8000ccd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ccda:	0016f713          	andi	a4,a3,1
    8000ccde:	7c071463          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cce2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cce6:	460d                	li	a2,3
    8000cce8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ccec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ccee:	00c59763          	bne	a1,a2,8000ccfc <tinst_tests_gpf+0x1a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ccf2:	0026d683          	lhu	a3,2(a3)
    8000ccf6:	0106969b          	slliw	a3,a3,0x10
    8000ccfa:	8f55                	or	a4,a4,a3
    8000ccfc:	01f076b7          	lui	a3,0x1f07
    8000cd00:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cd04:	8f75                	and	a4,a4,a3
    8000cd06:	00021597          	auipc	a1,0x21
    8000cd0a:	4a258593          	addi	a1,a1,1186 # 8002e1a8 <__func__.0+0x2c0>
    8000cd0e:	00e79463          	bne	a5,a4,8000cd16 <tinst_tests_gpf+0x1a6a>
    8000cd12:	cc7fe06f          	j	8000b9d8 <tinst_tests_gpf+0x72c>
    8000cd16:	00021597          	auipc	a1,0x21
    8000cd1a:	4a258593          	addi	a1,a1,1186 # 8002e1b8 <__func__.0+0x2d0>
    8000cd1e:	cbbfe06f          	j	8000b9d8 <tinst_tests_gpf+0x72c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000cd22:	701c                	ld	a5,32(s0)
    8000cd24:	00021597          	auipc	a1,0x21
    8000cd28:	48458593          	addi	a1,a1,1156 # 8002e1a8 <__func__.0+0x2c0>
    8000cd2c:	e399                	bnez	a5,8000cd32 <tinst_tests_gpf+0x1a86>
    8000cd2e:	fa9fe06f          	j	8000bcd6 <tinst_tests_gpf+0xa2a>
    8000cd32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd34:	0016f713          	andi	a4,a3,1
    8000cd38:	76071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd40:	460d                	li	a2,3
    8000cd42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd48:	00c59763          	bne	a1,a2,8000cd56 <tinst_tests_gpf+0x1aaa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cd4c:	0026d683          	lhu	a3,2(a3)
    8000cd50:	0106969b          	slliw	a3,a3,0x10
    8000cd54:	8f55                	or	a4,a4,a3
    8000cd56:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd5a:	068e                	slli	a3,a3,0x3
    8000cd5c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd5e:	8f75                	and	a4,a4,a3
    8000cd60:	00021597          	auipc	a1,0x21
    8000cd64:	44858593          	addi	a1,a1,1096 # 8002e1a8 <__func__.0+0x2c0>
    8000cd68:	00e79463          	bne	a5,a4,8000cd70 <tinst_tests_gpf+0x1ac4>
    8000cd6c:	f6bfe06f          	j	8000bcd6 <tinst_tests_gpf+0xa2a>
    8000cd70:	00021597          	auipc	a1,0x21
    8000cd74:	44858593          	addi	a1,a1,1096 # 8002e1b8 <__func__.0+0x2d0>
    8000cd78:	f5ffe06f          	j	8000bcd6 <tinst_tests_gpf+0xa2a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000cd7c:	701c                	ld	a5,32(s0)
    8000cd7e:	00021597          	auipc	a1,0x21
    8000cd82:	42a58593          	addi	a1,a1,1066 # 8002e1a8 <__func__.0+0x2c0>
    8000cd86:	e399                	bnez	a5,8000cd8c <tinst_tests_gpf+0x1ae0>
    8000cd88:	ff3fe06f          	j	8000bd7a <tinst_tests_gpf+0xace>
    8000cd8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd8e:	0016f713          	andi	a4,a3,1
    8000cd92:	70071a63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd96:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd9a:	460d                	li	a2,3
    8000cd9c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cda0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cda2:	00c59763          	bne	a1,a2,8000cdb0 <tinst_tests_gpf+0x1b04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cda6:	0026d683          	lhu	a3,2(a3)
    8000cdaa:	0106969b          	slliw	a3,a3,0x10
    8000cdae:	8f55                	or	a4,a4,a3
    8000cdb0:	1ffe16b7          	lui	a3,0x1ffe1
    8000cdb4:	068e                	slli	a3,a3,0x3
    8000cdb6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cdb8:	8f75                	and	a4,a4,a3
    8000cdba:	00021597          	auipc	a1,0x21
    8000cdbe:	3ee58593          	addi	a1,a1,1006 # 8002e1a8 <__func__.0+0x2c0>
    8000cdc2:	00e79463          	bne	a5,a4,8000cdca <tinst_tests_gpf+0x1b1e>
    8000cdc6:	fb5fe06f          	j	8000bd7a <tinst_tests_gpf+0xace>
    8000cdca:	00021597          	auipc	a1,0x21
    8000cdce:	3ee58593          	addi	a1,a1,1006 # 8002e1b8 <__func__.0+0x2d0>
    8000cdd2:	fa9fe06f          	j	8000bd7a <tinst_tests_gpf+0xace>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000cdd6:	701c                	ld	a5,32(s0)
    8000cdd8:	00021597          	auipc	a1,0x21
    8000cddc:	3d058593          	addi	a1,a1,976 # 8002e1a8 <__func__.0+0x2c0>
    8000cde0:	e399                	bnez	a5,8000cde6 <tinst_tests_gpf+0x1b3a>
    8000cde2:	83aff06f          	j	8000be1c <tinst_tests_gpf+0xb70>
    8000cde6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cde8:	0016f713          	andi	a4,a3,1
    8000cdec:	6a071d63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cdf0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cdf4:	460d                	li	a2,3
    8000cdf6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cdfa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdfc:	00c59763          	bne	a1,a2,8000ce0a <tinst_tests_gpf+0x1b5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce00:	0026d683          	lhu	a3,2(a3)
    8000ce04:	0106969b          	slliw	a3,a3,0x10
    8000ce08:	8f55                	or	a4,a4,a3
    8000ce0a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce0e:	068e                	slli	a3,a3,0x3
    8000ce10:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce12:	8f75                	and	a4,a4,a3
    8000ce14:	00021597          	auipc	a1,0x21
    8000ce18:	39458593          	addi	a1,a1,916 # 8002e1a8 <__func__.0+0x2c0>
    8000ce1c:	00e79463          	bne	a5,a4,8000ce24 <tinst_tests_gpf+0x1b78>
    8000ce20:	ffdfe06f          	j	8000be1c <tinst_tests_gpf+0xb70>
    8000ce24:	00021597          	auipc	a1,0x21
    8000ce28:	39458593          	addi	a1,a1,916 # 8002e1b8 <__func__.0+0x2d0>
    8000ce2c:	ff1fe06f          	j	8000be1c <tinst_tests_gpf+0xb70>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000ce30:	701c                	ld	a5,32(s0)
    8000ce32:	00021597          	auipc	a1,0x21
    8000ce36:	37658593          	addi	a1,a1,886 # 8002e1a8 <__func__.0+0x2c0>
    8000ce3a:	e399                	bnez	a5,8000ce40 <tinst_tests_gpf+0x1b94>
    8000ce3c:	882ff06f          	j	8000bebe <tinst_tests_gpf+0xc12>
    8000ce40:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce42:	0016f713          	andi	a4,a3,1
    8000ce46:	66071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce4a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce4e:	460d                	li	a2,3
    8000ce50:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce54:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce56:	00c59763          	bne	a1,a2,8000ce64 <tinst_tests_gpf+0x1bb8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce5a:	0026d683          	lhu	a3,2(a3)
    8000ce5e:	0106969b          	slliw	a3,a3,0x10
    8000ce62:	8f55                	or	a4,a4,a3
    8000ce64:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce68:	068e                	slli	a3,a3,0x3
    8000ce6a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce6c:	8f75                	and	a4,a4,a3
    8000ce6e:	00021597          	auipc	a1,0x21
    8000ce72:	33a58593          	addi	a1,a1,826 # 8002e1a8 <__func__.0+0x2c0>
    8000ce76:	00e79463          	bne	a5,a4,8000ce7e <tinst_tests_gpf+0x1bd2>
    8000ce7a:	844ff06f          	j	8000bebe <tinst_tests_gpf+0xc12>
    8000ce7e:	00021597          	auipc	a1,0x21
    8000ce82:	33a58593          	addi	a1,a1,826 # 8002e1b8 <__func__.0+0x2d0>
    8000ce86:	838ff06f          	j	8000bebe <tinst_tests_gpf+0xc12>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000ce8a:	701c                	ld	a5,32(s0)
    8000ce8c:	e399                	bnez	a5,8000ce92 <tinst_tests_gpf+0x1be6>
    8000ce8e:	e7efe06f          	j	8000b50c <tinst_tests_gpf+0x260>
    8000ce92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce94:	0016f713          	andi	a4,a3,1
    8000ce98:	60071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce9c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cea0:	460d                	li	a2,3
    8000cea2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cea6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cea8:	00c59763          	bne	a1,a2,8000ceb6 <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ceac:	0026d683          	lhu	a3,2(a3)
    8000ceb0:	0106969b          	slliw	a3,a3,0x10
    8000ceb4:	8f55                	or	a4,a4,a3
    8000ceb6:	1746                	slli	a4,a4,0x31
    8000ceb8:	9345                	srli	a4,a4,0x31
    8000ceba:	00e78463          	beq	a5,a4,8000cec2 <tinst_tests_gpf+0x1c16>
    8000cebe:	e3afe06f          	j	8000b4f8 <tinst_tests_gpf+0x24c>
    8000cec2:	e4afe06f          	j	8000b50c <tinst_tests_gpf+0x260>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000cec6:	701c                	ld	a5,32(s0)
    8000cec8:	e399                	bnez	a5,8000cece <tinst_tests_gpf+0x1c22>
    8000ceca:	ee4fe06f          	j	8000b5ae <tinst_tests_gpf+0x302>
    8000cece:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ced0:	0016f713          	andi	a4,a3,1
    8000ced4:	5c071963          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ced8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cedc:	460d                	li	a2,3
    8000cede:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cee2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cee4:	00c59763          	bne	a1,a2,8000cef2 <tinst_tests_gpf+0x1c46>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cee8:	0026d683          	lhu	a3,2(a3)
    8000ceec:	0106969b          	slliw	a3,a3,0x10
    8000cef0:	8f55                	or	a4,a4,a3
    8000cef2:	1746                	slli	a4,a4,0x31
    8000cef4:	9345                	srli	a4,a4,0x31
    8000cef6:	00e78463          	beq	a5,a4,8000cefe <tinst_tests_gpf+0x1c52>
    8000cefa:	ea0fe06f          	j	8000b59a <tinst_tests_gpf+0x2ee>
    8000cefe:	eb0fe06f          	j	8000b5ae <tinst_tests_gpf+0x302>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cf02:	6418                	ld	a4,8(s0)
    8000cf04:	47d5                	li	a5,21
    8000cf06:	00f70463          	beq	a4,a5,8000cf0e <tinst_tests_gpf+0x1c62>
    8000cf0a:	ffefe06f          	j	8000b708 <tinst_tests_gpf+0x45c>
    8000cf0e:	7018                	ld	a4,32(s0)
    8000cf10:	e319                	bnez	a4,8000cf16 <tinst_tests_gpf+0x1c6a>
    8000cf12:	ff8fe06f          	j	8000b70a <tinst_tests_gpf+0x45e>
    8000cf16:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf18:	0016f793          	andi	a5,a3,1
    8000cf1c:	58079563          	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf20:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf24:	460d                	li	a2,3
    8000cf26:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cf2a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cf2c:	00c59763          	bne	a1,a2,8000cf3a <tinst_tests_gpf+0x1c8e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf30:	0026d683          	lhu	a3,2(a3)
    8000cf34:	0106969b          	slliw	a3,a3,0x10
    8000cf38:	8fd5                	or	a5,a5,a3
    8000cf3a:	17c6                	slli	a5,a5,0x31
    8000cf3c:	0317d493          	srli	s1,a5,0x31
    8000cf40:	8c99                	sub	s1,s1,a4
    8000cf42:	0014b493          	seqz	s1,s1
    8000cf46:	fc4fe06f          	j	8000b70a <tinst_tests_gpf+0x45e>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000cf4a:	6418                	ld	a4,8(s0)
    8000cf4c:	47dd                	li	a5,23
    8000cf4e:	00021597          	auipc	a1,0x21
    8000cf52:	26a58593          	addi	a1,a1,618 # 8002e1b8 <__func__.0+0x2d0>
    8000cf56:	00f70463          	beq	a4,a5,8000cf5e <tinst_tests_gpf+0x1cb2>
    8000cf5a:	ffbfe06f          	j	8000bf54 <tinst_tests_gpf+0xca8>
    8000cf5e:	701c                	ld	a5,32(s0)
    8000cf60:	00021597          	auipc	a1,0x21
    8000cf64:	24858593          	addi	a1,a1,584 # 8002e1a8 <__func__.0+0x2c0>
    8000cf68:	e399                	bnez	a5,8000cf6e <tinst_tests_gpf+0x1cc2>
    8000cf6a:	febfe06f          	j	8000bf54 <tinst_tests_gpf+0xca8>
    8000cf6e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf70:	0016f713          	andi	a4,a3,1
    8000cf74:	52071963          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf78:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf7c:	460d                	li	a2,3
    8000cf7e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf82:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf84:	00c59763          	bne	a1,a2,8000cf92 <tinst_tests_gpf+0x1ce6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf88:	0026d683          	lhu	a3,2(a3)
    8000cf8c:	0106969b          	slliw	a3,a3,0x10
    8000cf90:	8f55                	or	a4,a4,a3
    8000cf92:	1ffe16b7          	lui	a3,0x1ffe1
    8000cf96:	068e                	slli	a3,a3,0x3
    8000cf98:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cf9a:	8f75                	and	a4,a4,a3
    8000cf9c:	00021597          	auipc	a1,0x21
    8000cfa0:	20c58593          	addi	a1,a1,524 # 8002e1a8 <__func__.0+0x2c0>
    8000cfa4:	00e78463          	beq	a5,a4,8000cfac <tinst_tests_gpf+0x1d00>
    8000cfa8:	fa5fe06f          	j	8000bf4c <tinst_tests_gpf+0xca0>
    8000cfac:	fa9fe06f          	j	8000bf54 <tinst_tests_gpf+0xca8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cfb0:	6418                	ld	a4,8(s0)
    8000cfb2:	47d5                	li	a5,21
    8000cfb4:	00f70463          	beq	a4,a5,8000cfbc <tinst_tests_gpf+0x1d10>
    8000cfb8:	feafe06f          	j	8000b7a2 <tinst_tests_gpf+0x4f6>
    8000cfbc:	7018                	ld	a4,32(s0)
    8000cfbe:	e319                	bnez	a4,8000cfc4 <tinst_tests_gpf+0x1d18>
    8000cfc0:	fe4fe06f          	j	8000b7a4 <tinst_tests_gpf+0x4f8>
    8000cfc4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cfc6:	0016f793          	andi	a5,a3,1
    8000cfca:	4c079e63          	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cfce:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cfd2:	460d                	li	a2,3
    8000cfd4:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cfd8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cfda:	00c59763          	bne	a1,a2,8000cfe8 <tinst_tests_gpf+0x1d3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cfde:	0026d683          	lhu	a3,2(a3)
    8000cfe2:	0106969b          	slliw	a3,a3,0x10
    8000cfe6:	8fd5                	or	a5,a5,a3
    8000cfe8:	17c6                	slli	a5,a5,0x31
    8000cfea:	0317d493          	srli	s1,a5,0x31
    8000cfee:	8c99                	sub	s1,s1,a4
    8000cff0:	0014b493          	seqz	s1,s1
    8000cff4:	fb0fe06f          	j	8000b7a4 <tinst_tests_gpf+0x4f8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000cff8:	6418                	ld	a4,8(s0)
    8000cffa:	47dd                	li	a5,23
    8000cffc:	00021597          	auipc	a1,0x21
    8000d000:	1bc58593          	addi	a1,a1,444 # 8002e1b8 <__func__.0+0x2d0>
    8000d004:	00f70463          	beq	a4,a5,8000d00c <tinst_tests_gpf+0x1d60>
    8000d008:	fe3fe06f          	j	8000bfea <tinst_tests_gpf+0xd3e>
    8000d00c:	701c                	ld	a5,32(s0)
    8000d00e:	00021597          	auipc	a1,0x21
    8000d012:	19a58593          	addi	a1,a1,410 # 8002e1a8 <__func__.0+0x2c0>
    8000d016:	e399                	bnez	a5,8000d01c <tinst_tests_gpf+0x1d70>
    8000d018:	fd3fe06f          	j	8000bfea <tinst_tests_gpf+0xd3e>
    8000d01c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d01e:	0016f713          	andi	a4,a3,1
    8000d022:	48071263          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d026:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d02a:	460d                	li	a2,3
    8000d02c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d030:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d032:	00c59763          	bne	a1,a2,8000d040 <tinst_tests_gpf+0x1d94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d036:	0026d683          	lhu	a3,2(a3)
    8000d03a:	0106969b          	slliw	a3,a3,0x10
    8000d03e:	8f55                	or	a4,a4,a3
    8000d040:	1ffe16b7          	lui	a3,0x1ffe1
    8000d044:	068e                	slli	a3,a3,0x3
    8000d046:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d048:	8f75                	and	a4,a4,a3
    8000d04a:	00021597          	auipc	a1,0x21
    8000d04e:	15e58593          	addi	a1,a1,350 # 8002e1a8 <__func__.0+0x2c0>
    8000d052:	00e78463          	beq	a5,a4,8000d05a <tinst_tests_gpf+0x1dae>
    8000d056:	f8dfe06f          	j	8000bfe2 <tinst_tests_gpf+0xd36>
    8000d05a:	f91fe06f          	j	8000bfea <tinst_tests_gpf+0xd3e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d05e:	6418                	ld	a4,8(s0)
    8000d060:	47dd                	li	a5,23
    8000d062:	00f70463          	beq	a4,a5,8000d06a <tinst_tests_gpf+0x1dbe>
    8000d066:	fd8fe06f          	j	8000b83e <tinst_tests_gpf+0x592>
    8000d06a:	701c                	ld	a5,32(s0)
    8000d06c:	e399                	bnez	a5,8000d072 <tinst_tests_gpf+0x1dc6>
    8000d06e:	fd2fe06f          	j	8000b840 <tinst_tests_gpf+0x594>
    8000d072:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d074:	0016f713          	andi	a4,a3,1
    8000d078:	42071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d07c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d080:	460d                	li	a2,3
    8000d082:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d086:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d088:	00c59763          	bne	a1,a2,8000d096 <tinst_tests_gpf+0x1dea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d08c:	0026d683          	lhu	a3,2(a3)
    8000d090:	0106969b          	slliw	a3,a3,0x10
    8000d094:	8f55                	or	a4,a4,a3
    8000d096:	01f076b7          	lui	a3,0x1f07
    8000d09a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d09e:	8f75                	and	a4,a4,a3
    8000d0a0:	40f704b3          	sub	s1,a4,a5
    8000d0a4:	0014b493          	seqz	s1,s1
    8000d0a8:	f98fe06f          	j	8000b840 <tinst_tests_gpf+0x594>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d0ac:	6418                	ld	a4,8(s0)
    8000d0ae:	47dd                	li	a5,23
    8000d0b0:	00f70463          	beq	a4,a5,8000d0b8 <tinst_tests_gpf+0x1e0c>
    8000d0b4:	82bfe06f          	j	8000b8de <tinst_tests_gpf+0x632>
    8000d0b8:	701c                	ld	a5,32(s0)
    8000d0ba:	e399                	bnez	a5,8000d0c0 <tinst_tests_gpf+0x1e14>
    8000d0bc:	825fe06f          	j	8000b8e0 <tinst_tests_gpf+0x634>
    8000d0c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d0c2:	0016f713          	andi	a4,a3,1
    8000d0c6:	3e071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d0ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d0ce:	460d                	li	a2,3
    8000d0d0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d0d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d0d6:	00c59763          	bne	a1,a2,8000d0e4 <tinst_tests_gpf+0x1e38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d0da:	0026d683          	lhu	a3,2(a3)
    8000d0de:	0106969b          	slliw	a3,a3,0x10
    8000d0e2:	8f55                	or	a4,a4,a3
    8000d0e4:	01f076b7          	lui	a3,0x1f07
    8000d0e8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d0ec:	8f75                	and	a4,a4,a3
    8000d0ee:	40f704b3          	sub	s1,a4,a5
    8000d0f2:	0014b493          	seqz	s1,s1
    8000d0f6:	feafe06f          	j	8000b8e0 <tinst_tests_gpf+0x634>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d0fa:	6418                	ld	a4,8(s0)
    8000d0fc:	47dd                	li	a5,23
    8000d0fe:	00f70463          	beq	a4,a5,8000d106 <tinst_tests_gpf+0x1e5a>
    8000d102:	87ffe06f          	j	8000b980 <tinst_tests_gpf+0x6d4>
    8000d106:	701c                	ld	a5,32(s0)
    8000d108:	e399                	bnez	a5,8000d10e <tinst_tests_gpf+0x1e62>
    8000d10a:	879fe06f          	j	8000b982 <tinst_tests_gpf+0x6d6>
    8000d10e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d110:	0016f713          	andi	a4,a3,1
    8000d114:	38071963          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d118:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d11c:	460d                	li	a2,3
    8000d11e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d122:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d124:	00c59763          	bne	a1,a2,8000d132 <tinst_tests_gpf+0x1e86>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d128:	0026d683          	lhu	a3,2(a3)
    8000d12c:	0106969b          	slliw	a3,a3,0x10
    8000d130:	8f55                	or	a4,a4,a3
    8000d132:	01f076b7          	lui	a3,0x1f07
    8000d136:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d13a:	8f75                	and	a4,a4,a3
    8000d13c:	40f704b3          	sub	s1,a4,a5
    8000d140:	0014b493          	seqz	s1,s1
    8000d144:	83ffe06f          	j	8000b982 <tinst_tests_gpf+0x6d6>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d148:	6418                	ld	a4,8(s0)
    8000d14a:	47dd                	li	a5,23
    8000d14c:	00f70463          	beq	a4,a5,8000d154 <tinst_tests_gpf+0x1ea8>
    8000d150:	8d5fe06f          	j	8000ba24 <tinst_tests_gpf+0x778>
    8000d154:	701c                	ld	a5,32(s0)
    8000d156:	e399                	bnez	a5,8000d15c <tinst_tests_gpf+0x1eb0>
    8000d158:	8cffe06f          	j	8000ba26 <tinst_tests_gpf+0x77a>
    8000d15c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d15e:	0016f713          	andi	a4,a3,1
    8000d162:	34071263          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d166:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d16a:	460d                	li	a2,3
    8000d16c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d170:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d172:	00c59763          	bne	a1,a2,8000d180 <tinst_tests_gpf+0x1ed4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d176:	0026d683          	lhu	a3,2(a3)
    8000d17a:	0106969b          	slliw	a3,a3,0x10
    8000d17e:	8f55                	or	a4,a4,a3
    8000d180:	01f076b7          	lui	a3,0x1f07
    8000d184:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d188:	8f75                	and	a4,a4,a3
    8000d18a:	40f704b3          	sub	s1,a4,a5
    8000d18e:	0014b493          	seqz	s1,s1
    8000d192:	895fe06f          	j	8000ba26 <tinst_tests_gpf+0x77a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d196:	6418                	ld	a4,8(s0)
    8000d198:	47d5                	li	a5,21
    8000d19a:	00f70463          	beq	a4,a5,8000d1a2 <tinst_tests_gpf+0x1ef6>
    8000d19e:	91bfe06f          	j	8000bab8 <tinst_tests_gpf+0x80c>
    8000d1a2:	02043903          	ld	s2,32(s0)
    8000d1a6:	00091463          	bnez	s2,8000d1ae <tinst_tests_gpf+0x1f02>
    8000d1aa:	911fe06f          	j	8000baba <tinst_tests_gpf+0x80e>
    8000d1ae:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d1b0:	0017f713          	andi	a4,a5,1
    8000d1b4:	2e071963          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1b8:	0007d503          	lhu	a0,0(a5)
    8000d1bc:	d84f40ef          	jal	80001740 <expand_compressed_instruction>
    8000d1c0:	67a1                	lui	a5,0x8
    8000d1c2:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d1c4:	00f574b3          	and	s1,a0,a5
    8000d1c8:	412484b3          	sub	s1,s1,s2
    8000d1cc:	0014b493          	seqz	s1,s1
    8000d1d0:	8ebfe06f          	j	8000baba <tinst_tests_gpf+0x80e>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d1d4:	6418                	ld	a4,8(s0)
    8000d1d6:	47d5                	li	a5,21
    8000d1d8:	00f70463          	beq	a4,a5,8000d1e0 <tinst_tests_gpf+0x1f34>
    8000d1dc:	973fe06f          	j	8000bb4e <tinst_tests_gpf+0x8a2>
    8000d1e0:	02043983          	ld	s3,32(s0)
    8000d1e4:	00099463          	bnez	s3,8000d1ec <tinst_tests_gpf+0x1f40>
    8000d1e8:	969fe06f          	j	8000bb50 <tinst_tests_gpf+0x8a4>
    8000d1ec:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d1ee:	0017f713          	andi	a4,a5,1
    8000d1f2:	2a071a63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1f6:	0007d503          	lhu	a0,0(a5)
    8000d1fa:	d46f40ef          	jal	80001740 <expand_compressed_instruction>
    8000d1fe:	67a1                	lui	a5,0x8
    8000d200:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d202:	00f574b3          	and	s1,a0,a5
    8000d206:	413484b3          	sub	s1,s1,s3
    8000d20a:	0014b493          	seqz	s1,s1
    8000d20e:	943fe06f          	j	8000bb50 <tinst_tests_gpf+0x8a4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d212:	6418                	ld	a4,8(s0)
    8000d214:	47dd                	li	a5,23
    8000d216:	00f70463          	beq	a4,a5,8000d21e <tinst_tests_gpf+0x1f72>
    8000d21a:	9cbfe06f          	j	8000bbe4 <tinst_tests_gpf+0x938>
    8000d21e:	02043983          	ld	s3,32(s0)
    8000d222:	00099463          	bnez	s3,8000d22a <tinst_tests_gpf+0x1f7e>
    8000d226:	9c1fe06f          	j	8000bbe6 <tinst_tests_gpf+0x93a>
    8000d22a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d22c:	0017f713          	andi	a4,a5,1
    8000d230:	26071b63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d234:	0007d503          	lhu	a0,0(a5)
    8000d238:	d08f40ef          	jal	80001740 <expand_compressed_instruction>
    8000d23c:	01f077b7          	lui	a5,0x1f07
    8000d240:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d244:	00f574b3          	and	s1,a0,a5
    8000d248:	413484b3          	sub	s1,s1,s3
    8000d24c:	0014b493          	seqz	s1,s1
    8000d250:	997fe06f          	j	8000bbe6 <tinst_tests_gpf+0x93a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d254:	701c                	ld	a5,32(s0)
    8000d256:	e399                	bnez	a5,8000d25c <tinst_tests_gpf+0x1fb0>
    8000d258:	b59fe06f          	j	8000bdb0 <tinst_tests_gpf+0xb04>
    8000d25c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d25e:	0016f713          	andi	a4,a3,1
    8000d262:	24071263          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d266:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d26a:	460d                	li	a2,3
    8000d26c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d270:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d272:	00c59763          	bne	a1,a2,8000d280 <tinst_tests_gpf+0x1fd4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d276:	0026d683          	lhu	a3,2(a3)
    8000d27a:	0106969b          	slliw	a3,a3,0x10
    8000d27e:	8f55                	or	a4,a4,a3
    8000d280:	1ffe16b7          	lui	a3,0x1ffe1
    8000d284:	068e                	slli	a3,a3,0x3
    8000d286:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d288:	8f75                	and	a4,a4,a3
    8000d28a:	00e78463          	beq	a5,a4,8000d292 <tinst_tests_gpf+0x1fe6>
    8000d28e:	b0ffe06f          	j	8000bd9c <tinst_tests_gpf+0xaf0>
    8000d292:	b1ffe06f          	j	8000bdb0 <tinst_tests_gpf+0xb04>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d296:	02043903          	ld	s2,32(s0)
    8000d29a:	64091be3          	bnez	s2,8000e0f0 <tinst_tests_gpf+0x2e44>
    8000d29e:	00021597          	auipc	a1,0x21
    8000d2a2:	f0a58593          	addi	a1,a1,-246 # 8002e1a8 <__func__.0+0x2c0>
    8000d2a6:	fc6fe06f          	j	8000ba6c <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d2aa:	701c                	ld	a5,32(s0)
    8000d2ac:	e399                	bnez	a5,8000d2b2 <tinst_tests_gpf+0x2006>
    8000d2ae:	ba5fe06f          	j	8000be52 <tinst_tests_gpf+0xba6>
    8000d2b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2b4:	0016f713          	andi	a4,a3,1
    8000d2b8:	1e071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2c0:	460d                	li	a2,3
    8000d2c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2c8:	00c59763          	bne	a1,a2,8000d2d6 <tinst_tests_gpf+0x202a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2cc:	0026d683          	lhu	a3,2(a3)
    8000d2d0:	0106969b          	slliw	a3,a3,0x10
    8000d2d4:	8f55                	or	a4,a4,a3
    8000d2d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000d2da:	068e                	slli	a3,a3,0x3
    8000d2dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d2de:	8f75                	and	a4,a4,a3
    8000d2e0:	00e78463          	beq	a5,a4,8000d2e8 <tinst_tests_gpf+0x203c>
    8000d2e4:	b5bfe06f          	j	8000be3e <tinst_tests_gpf+0xb92>
    8000d2e8:	b6bfe06f          	j	8000be52 <tinst_tests_gpf+0xba6>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d2ec:	02043983          	ld	s3,32(s0)
    8000d2f0:	660997e3          	bnez	s3,8000e15e <tinst_tests_gpf+0x2eb2>
    8000d2f4:	00021597          	auipc	a1,0x21
    8000d2f8:	eb458593          	addi	a1,a1,-332 # 8002e1a8 <__func__.0+0x2c0>
    8000d2fc:	807fe06f          	j	8000bb02 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d300:	701c                	ld	a5,32(s0)
    8000d302:	e399                	bnez	a5,8000d308 <tinst_tests_gpf+0x205c>
    8000d304:	bf1fe06f          	j	8000bef4 <tinst_tests_gpf+0xc48>
    8000d308:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d30a:	0016f713          	andi	a4,a3,1
    8000d30e:	18071c63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d312:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d316:	460d                	li	a2,3
    8000d318:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d31c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d31e:	00c59763          	bne	a1,a2,8000d32c <tinst_tests_gpf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d322:	0026d683          	lhu	a3,2(a3)
    8000d326:	0106969b          	slliw	a3,a3,0x10
    8000d32a:	8f55                	or	a4,a4,a3
    8000d32c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d330:	068e                	slli	a3,a3,0x3
    8000d332:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d334:	8f75                	and	a4,a4,a3
    8000d336:	00e78463          	beq	a5,a4,8000d33e <tinst_tests_gpf+0x2092>
    8000d33a:	ba7fe06f          	j	8000bee0 <tinst_tests_gpf+0xc34>
    8000d33e:	bb7fe06f          	j	8000bef4 <tinst_tests_gpf+0xc48>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d342:	02043983          	ld	s3,32(s0)
    8000d346:	6c0994e3          	bnez	s3,8000e20e <tinst_tests_gpf+0x2f62>
    8000d34a:	00021597          	auipc	a1,0x21
    8000d34e:	e5e58593          	addi	a1,a1,-418 # 8002e1a8 <__func__.0+0x2c0>
    8000d352:	847fe06f          	j	8000bb98 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d356:	701c                	ld	a5,32(s0)
    8000d358:	e399                	bnez	a5,8000d35e <tinst_tests_gpf+0x20b2>
    8000d35a:	c31fe06f          	j	8000bf8a <tinst_tests_gpf+0xcde>
    8000d35e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d360:	0016f713          	andi	a4,a3,1
    8000d364:	14071163          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d368:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d36c:	460d                	li	a2,3
    8000d36e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d372:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d374:	00c59763          	bne	a1,a2,8000d382 <tinst_tests_gpf+0x20d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d378:	0026d683          	lhu	a3,2(a3)
    8000d37c:	0106969b          	slliw	a3,a3,0x10
    8000d380:	8f55                	or	a4,a4,a3
    8000d382:	1ffe16b7          	lui	a3,0x1ffe1
    8000d386:	068e                	slli	a3,a3,0x3
    8000d388:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d38a:	8f75                	and	a4,a4,a3
    8000d38c:	00e78463          	beq	a5,a4,8000d394 <tinst_tests_gpf+0x20e8>
    8000d390:	be7fe06f          	j	8000bf76 <tinst_tests_gpf+0xcca>
    8000d394:	bf7fe06f          	j	8000bf8a <tinst_tests_gpf+0xcde>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d398:	02043903          	ld	s2,32(s0)
    8000d39c:	6e0912e3          	bnez	s2,8000e280 <tinst_tests_gpf+0x2fd4>
    8000d3a0:	00021597          	auipc	a1,0x21
    8000d3a4:	e0858593          	addi	a1,a1,-504 # 8002e1a8 <__func__.0+0x2c0>
    8000d3a8:	887fe06f          	j	8000bc2e <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d3ac:	7018                	ld	a4,32(s0)
    8000d3ae:	e319                	bnez	a4,8000d3b4 <tinst_tests_gpf+0x2108>
    8000d3b0:	8e6fe06f          	j	8000b496 <tinst_tests_gpf+0x1ea>
    8000d3b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3b6:	0016f793          	andi	a5,a3,1
    8000d3ba:	e7f5                	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3bc:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3c0:	460d                	li	a2,3
    8000d3c2:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d3c6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d3c8:	00c59763          	bne	a1,a2,8000d3d6 <tinst_tests_gpf+0x212a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3cc:	0026d683          	lhu	a3,2(a3)
    8000d3d0:	0106969b          	slliw	a3,a3,0x10
    8000d3d4:	8fd5                	or	a5,a5,a3
    8000d3d6:	03179493          	slli	s1,a5,0x31
    8000d3da:	90c5                	srli	s1,s1,0x31
    8000d3dc:	8c99                	sub	s1,s1,a4
    8000d3de:	0014b493          	seqz	s1,s1
    8000d3e2:	8b4fe06f          	j	8000b496 <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d3e6:	7018                	ld	a4,32(s0)
    8000d3e8:	e319                	bnez	a4,8000d3ee <tinst_tests_gpf+0x2142>
    8000d3ea:	942fe06f          	j	8000b52c <tinst_tests_gpf+0x280>
    8000d3ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f0:	0016f793          	andi	a5,a3,1
    8000d3f4:	ebcd                	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3f6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3fa:	460d                	li	a2,3
    8000d3fc:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d400:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d402:	00c59763          	bne	a1,a2,8000d410 <tinst_tests_gpf+0x2164>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d406:	0026d683          	lhu	a3,2(a3)
    8000d40a:	0106969b          	slliw	a3,a3,0x10
    8000d40e:	8fd5                	or	a5,a5,a3
    8000d410:	03179493          	slli	s1,a5,0x31
    8000d414:	90c5                	srli	s1,s1,0x31
    8000d416:	8c99                	sub	s1,s1,a4
    8000d418:	0014b493          	seqz	s1,s1
    8000d41c:	910fe06f          	j	8000b52c <tinst_tests_gpf+0x280>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d420:	7018                	ld	a4,32(s0)
    8000d422:	e319                	bnez	a4,8000d428 <tinst_tests_gpf+0x217c>
    8000d424:	9aafe06f          	j	8000b5ce <tinst_tests_gpf+0x322>
    8000d428:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d42a:	0016f793          	andi	a5,a3,1
    8000d42e:	efa5                	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d430:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d434:	460d                	li	a2,3
    8000d436:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d43a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d43c:	00c59763          	bne	a1,a2,8000d44a <tinst_tests_gpf+0x219e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d440:	0026d683          	lhu	a3,2(a3)
    8000d444:	0106969b          	slliw	a3,a3,0x10
    8000d448:	8fd5                	or	a5,a5,a3
    8000d44a:	03179493          	slli	s1,a5,0x31
    8000d44e:	90c5                	srli	s1,s1,0x31
    8000d450:	8c99                	sub	s1,s1,a4
    8000d452:	0014b493          	seqz	s1,s1
    8000d456:	978fe06f          	j	8000b5ce <tinst_tests_gpf+0x322>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d45a:	7018                	ld	a4,32(s0)
    8000d45c:	e319                	bnez	a4,8000d462 <tinst_tests_gpf+0x21b6>
    8000d45e:	a12fe06f          	j	8000b670 <tinst_tests_gpf+0x3c4>
    8000d462:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d464:	0016f793          	andi	a5,a3,1
    8000d468:	ef9d                	bnez	a5,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d46a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d46e:	460d                	li	a2,3
    8000d470:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d474:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d476:	00c59763          	bne	a1,a2,8000d484 <tinst_tests_gpf+0x21d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d47a:	0026d683          	lhu	a3,2(a3)
    8000d47e:	0106969b          	slliw	a3,a3,0x10
    8000d482:	8fd5                	or	a5,a5,a3
    8000d484:	17c6                	slli	a5,a5,0x31
    8000d486:	0317d493          	srli	s1,a5,0x31
    8000d48a:	8c99                	sub	s1,s1,a4
    8000d48c:	0014b493          	seqz	s1,s1
    8000d490:	9e0fe06f          	j	8000b670 <tinst_tests_gpf+0x3c4>
    8000d494:	701c                	ld	a5,32(s0)
    8000d496:	e399                	bnez	a5,8000d49c <tinst_tests_gpf+0x21f0>
    8000d498:	9b8fe06f          	j	8000b650 <tinst_tests_gpf+0x3a4>
    8000d49c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d49e:	0016f713          	andi	a4,a3,1
    8000d4a2:	320704e3          	beqz	a4,8000dfca <tinst_tests_gpf+0x2d1e>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000d4a6:	12300613          	li	a2,291
    8000d4aa:	0001f597          	auipc	a1,0x1f
    8000d4ae:	29658593          	addi	a1,a1,662 # 8002c740 <__func__.1>
    8000d4b2:	00022517          	auipc	a0,0x22
    8000d4b6:	6de50513          	addi	a0,a0,1758 # 8002fb90 <__func__.0+0x1ca8>
    8000d4ba:	7711d0ef          	jal	8002b42a <printf>
    8000d4be:	12300613          	li	a2,291
    8000d4c2:	0001f597          	auipc	a1,0x1f
    8000d4c6:	27e58593          	addi	a1,a1,638 # 8002c740 <__func__.1>
    8000d4ca:	00021517          	auipc	a0,0x21
    8000d4ce:	e8650513          	addi	a0,a0,-378 # 8002e350 <__func__.0+0x468>
    8000d4d2:	7591d0ef          	jal	8002b42a <printf>
    8000d4d6:	4501                	li	a0,0
    8000d4d8:	3091d0ef          	jal	8002afe0 <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000d4dc:	701c                	ld	a5,32(s0)
    8000d4de:	00021597          	auipc	a1,0x21
    8000d4e2:	cca58593          	addi	a1,a1,-822 # 8002e1a8 <__func__.0+0x2c0>
    8000d4e6:	e399                	bnez	a5,8000d4ec <tinst_tests_gpf+0x2240>
    8000d4e8:	ba5fe06f          	j	8000c08c <tinst_tests_gpf+0xde0>
    8000d4ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4ee:	0016f713          	andi	a4,a3,1
    8000d4f2:	fb55                	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4f8:	460d                	li	a2,3
    8000d4fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d500:	00c59763          	bne	a1,a2,8000d50e <tinst_tests_gpf+0x2262>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d504:	0026d683          	lhu	a3,2(a3)
    8000d508:	0106969b          	slliw	a3,a3,0x10
    8000d50c:	8f55                	or	a4,a4,a3
    8000d50e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d512:	068e                	slli	a3,a3,0x3
    8000d514:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d516:	8f75                	and	a4,a4,a3
    8000d518:	00021597          	auipc	a1,0x21
    8000d51c:	c9058593          	addi	a1,a1,-880 # 8002e1a8 <__func__.0+0x2c0>
    8000d520:	00e79463          	bne	a5,a4,8000d528 <tinst_tests_gpf+0x227c>
    8000d524:	b69fe06f          	j	8000c08c <tinst_tests_gpf+0xde0>
    8000d528:	00021597          	auipc	a1,0x21
    8000d52c:	c9058593          	addi	a1,a1,-880 # 8002e1b8 <__func__.0+0x2d0>
    8000d530:	b5dfe06f          	j	8000c08c <tinst_tests_gpf+0xde0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d534:	701c                	ld	a5,32(s0)
    8000d536:	e399                	bnez	a5,8000d53c <tinst_tests_gpf+0x2290>
    8000d538:	9bafe06f          	j	8000b6f2 <tinst_tests_gpf+0x446>
    8000d53c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d53e:	0016f713          	andi	a4,a3,1
    8000d542:	f335                	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d544:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d548:	460d                	li	a2,3
    8000d54a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d54e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d550:	00c59763          	bne	a1,a2,8000d55e <tinst_tests_gpf+0x22b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d554:	0026d683          	lhu	a3,2(a3)
    8000d558:	0106969b          	slliw	a3,a3,0x10
    8000d55c:	8f55                	or	a4,a4,a3
    8000d55e:	1746                	slli	a4,a4,0x31
    8000d560:	9345                	srli	a4,a4,0x31
    8000d562:	00e78463          	beq	a5,a4,8000d56a <tinst_tests_gpf+0x22be>
    8000d566:	978fe06f          	j	8000b6de <tinst_tests_gpf+0x432>
    8000d56a:	988fe06f          	j	8000b6f2 <tinst_tests_gpf+0x446>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000d56e:	701c                	ld	a5,32(s0)
    8000d570:	00021597          	auipc	a1,0x21
    8000d574:	c3858593          	addi	a1,a1,-968 # 8002e1a8 <__func__.0+0x2c0>
    8000d578:	e399                	bnez	a5,8000d57e <tinst_tests_gpf+0x22d2>
    8000d57a:	bb5fe06f          	j	8000c12e <tinst_tests_gpf+0xe82>
    8000d57e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d580:	0016f713          	andi	a4,a3,1
    8000d584:	f30d                	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d586:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d58a:	460d                	li	a2,3
    8000d58c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d590:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d592:	00c59763          	bne	a1,a2,8000d5a0 <tinst_tests_gpf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d596:	0026d683          	lhu	a3,2(a3)
    8000d59a:	0106969b          	slliw	a3,a3,0x10
    8000d59e:	8f55                	or	a4,a4,a3
    8000d5a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d5a4:	068e                	slli	a3,a3,0x3
    8000d5a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d5a8:	8f75                	and	a4,a4,a3
    8000d5aa:	00021597          	auipc	a1,0x21
    8000d5ae:	bfe58593          	addi	a1,a1,-1026 # 8002e1a8 <__func__.0+0x2c0>
    8000d5b2:	00e79463          	bne	a5,a4,8000d5ba <tinst_tests_gpf+0x230e>
    8000d5b6:	b79fe06f          	j	8000c12e <tinst_tests_gpf+0xe82>
    8000d5ba:	00021597          	auipc	a1,0x21
    8000d5be:	bfe58593          	addi	a1,a1,-1026 # 8002e1b8 <__func__.0+0x2d0>
    8000d5c2:	b6dfe06f          	j	8000c12e <tinst_tests_gpf+0xe82>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d5c6:	701c                	ld	a5,32(s0)
    8000d5c8:	e399                	bnez	a5,8000d5ce <tinst_tests_gpf+0x2322>
    8000d5ca:	9c2fe06f          	j	8000b78c <tinst_tests_gpf+0x4e0>
    8000d5ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5d0:	0016f713          	andi	a4,a3,1
    8000d5d4:	ec0719e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5dc:	460d                	li	a2,3
    8000d5de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5e4:	00c59763          	bne	a1,a2,8000d5f2 <tinst_tests_gpf+0x2346>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5e8:	0026d683          	lhu	a3,2(a3)
    8000d5ec:	0106969b          	slliw	a3,a3,0x10
    8000d5f0:	8f55                	or	a4,a4,a3
    8000d5f2:	1746                	slli	a4,a4,0x31
    8000d5f4:	9345                	srli	a4,a4,0x31
    8000d5f6:	00e78463          	beq	a5,a4,8000d5fe <tinst_tests_gpf+0x2352>
    8000d5fa:	97efe06f          	j	8000b778 <tinst_tests_gpf+0x4cc>
    8000d5fe:	98efe06f          	j	8000b78c <tinst_tests_gpf+0x4e0>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000d602:	701c                	ld	a5,32(s0)
    8000d604:	00021597          	auipc	a1,0x21
    8000d608:	ba458593          	addi	a1,a1,-1116 # 8002e1a8 <__func__.0+0x2c0>
    8000d60c:	e399                	bnez	a5,8000d612 <tinst_tests_gpf+0x2366>
    8000d60e:	bc3fe06f          	j	8000c1d0 <tinst_tests_gpf+0xf24>
    8000d612:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d614:	0016f713          	andi	a4,a3,1
    8000d618:	e80717e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d61c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d620:	460d                	li	a2,3
    8000d622:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d626:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d628:	00c59763          	bne	a1,a2,8000d636 <tinst_tests_gpf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d62c:	0026d683          	lhu	a3,2(a3)
    8000d630:	0106969b          	slliw	a3,a3,0x10
    8000d634:	8f55                	or	a4,a4,a3
    8000d636:	1ffe16b7          	lui	a3,0x1ffe1
    8000d63a:	068e                	slli	a3,a3,0x3
    8000d63c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d63e:	8f75                	and	a4,a4,a3
    8000d640:	00021597          	auipc	a1,0x21
    8000d644:	b6858593          	addi	a1,a1,-1176 # 8002e1a8 <__func__.0+0x2c0>
    8000d648:	00e79463          	bne	a5,a4,8000d650 <tinst_tests_gpf+0x23a4>
    8000d64c:	b85fe06f          	j	8000c1d0 <tinst_tests_gpf+0xf24>
    8000d650:	00021597          	auipc	a1,0x21
    8000d654:	b6858593          	addi	a1,a1,-1176 # 8002e1b8 <__func__.0+0x2d0>
    8000d658:	b79fe06f          	j	8000c1d0 <tinst_tests_gpf+0xf24>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d65c:	701c                	ld	a5,32(s0)
    8000d65e:	e399                	bnez	a5,8000d664 <tinst_tests_gpf+0x23b8>
    8000d660:	9c8fe06f          	j	8000b828 <tinst_tests_gpf+0x57c>
    8000d664:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d666:	0016f713          	andi	a4,a3,1
    8000d66a:	e2071ee3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d66e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d672:	460d                	li	a2,3
    8000d674:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d678:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d67a:	00c59763          	bne	a1,a2,8000d688 <tinst_tests_gpf+0x23dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d67e:	0026d683          	lhu	a3,2(a3)
    8000d682:	0106969b          	slliw	a3,a3,0x10
    8000d686:	8f55                	or	a4,a4,a3
    8000d688:	01f076b7          	lui	a3,0x1f07
    8000d68c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d690:	8f75                	and	a4,a4,a3
    8000d692:	00e78463          	beq	a5,a4,8000d69a <tinst_tests_gpf+0x23ee>
    8000d696:	97efe06f          	j	8000b814 <tinst_tests_gpf+0x568>
    8000d69a:	98efe06f          	j	8000b828 <tinst_tests_gpf+0x57c>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000d69e:	701c                	ld	a5,32(s0)
    8000d6a0:	00021597          	auipc	a1,0x21
    8000d6a4:	b0858593          	addi	a1,a1,-1272 # 8002e1a8 <__func__.0+0x2c0>
    8000d6a8:	e399                	bnez	a5,8000d6ae <tinst_tests_gpf+0x2402>
    8000d6aa:	bc9fe06f          	j	8000c272 <tinst_tests_gpf+0xfc6>
    8000d6ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6b0:	0016f713          	andi	a4,a3,1
    8000d6b4:	de0719e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6bc:	460d                	li	a2,3
    8000d6be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6c4:	00c59763          	bne	a1,a2,8000d6d2 <tinst_tests_gpf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6c8:	0026d683          	lhu	a3,2(a3)
    8000d6cc:	0106969b          	slliw	a3,a3,0x10
    8000d6d0:	8f55                	or	a4,a4,a3
    8000d6d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6d6:	068e                	slli	a3,a3,0x3
    8000d6d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6da:	8f75                	and	a4,a4,a3
    8000d6dc:	00021597          	auipc	a1,0x21
    8000d6e0:	acc58593          	addi	a1,a1,-1332 # 8002e1a8 <__func__.0+0x2c0>
    8000d6e4:	00e79463          	bne	a5,a4,8000d6ec <tinst_tests_gpf+0x2440>
    8000d6e8:	b8bfe06f          	j	8000c272 <tinst_tests_gpf+0xfc6>
    8000d6ec:	00021597          	auipc	a1,0x21
    8000d6f0:	acc58593          	addi	a1,a1,-1332 # 8002e1b8 <__func__.0+0x2d0>
    8000d6f4:	b7ffe06f          	j	8000c272 <tinst_tests_gpf+0xfc6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d6f8:	701c                	ld	a5,32(s0)
    8000d6fa:	e399                	bnez	a5,8000d700 <tinst_tests_gpf+0x2454>
    8000d6fc:	9ccfe06f          	j	8000b8c8 <tinst_tests_gpf+0x61c>
    8000d700:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d702:	0016f713          	andi	a4,a3,1
    8000d706:	da0710e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d70a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d70e:	460d                	li	a2,3
    8000d710:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d714:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d716:	00c59763          	bne	a1,a2,8000d724 <tinst_tests_gpf+0x2478>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d71a:	0026d683          	lhu	a3,2(a3)
    8000d71e:	0106969b          	slliw	a3,a3,0x10
    8000d722:	8f55                	or	a4,a4,a3
    8000d724:	01f076b7          	lui	a3,0x1f07
    8000d728:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d72c:	8f75                	and	a4,a4,a3
    8000d72e:	00e78463          	beq	a5,a4,8000d736 <tinst_tests_gpf+0x248a>
    8000d732:	982fe06f          	j	8000b8b4 <tinst_tests_gpf+0x608>
    8000d736:	992fe06f          	j	8000b8c8 <tinst_tests_gpf+0x61c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000d73a:	701c                	ld	a5,32(s0)
    8000d73c:	00021597          	auipc	a1,0x21
    8000d740:	a6c58593          	addi	a1,a1,-1428 # 8002e1a8 <__func__.0+0x2c0>
    8000d744:	e399                	bnez	a5,8000d74a <tinst_tests_gpf+0x249e>
    8000d746:	bd5fe06f          	j	8000c31a <tinst_tests_gpf+0x106e>
    8000d74a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d74c:	0016f713          	andi	a4,a3,1
    8000d750:	d4071be3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d754:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d758:	460d                	li	a2,3
    8000d75a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d75e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d760:	00c59763          	bne	a1,a2,8000d76e <tinst_tests_gpf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d764:	0026d683          	lhu	a3,2(a3)
    8000d768:	0106969b          	slliw	a3,a3,0x10
    8000d76c:	8f55                	or	a4,a4,a3
    8000d76e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d772:	068e                	slli	a3,a3,0x3
    8000d774:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d776:	8f75                	and	a4,a4,a3
    8000d778:	00021597          	auipc	a1,0x21
    8000d77c:	a3058593          	addi	a1,a1,-1488 # 8002e1a8 <__func__.0+0x2c0>
    8000d780:	00e79463          	bne	a5,a4,8000d788 <tinst_tests_gpf+0x24dc>
    8000d784:	b97fe06f          	j	8000c31a <tinst_tests_gpf+0x106e>
    8000d788:	00021597          	auipc	a1,0x21
    8000d78c:	a3058593          	addi	a1,a1,-1488 # 8002e1b8 <__func__.0+0x2d0>
    8000d790:	b8bfe06f          	j	8000c31a <tinst_tests_gpf+0x106e>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d794:	701c                	ld	a5,32(s0)
    8000d796:	e399                	bnez	a5,8000d79c <tinst_tests_gpf+0x24f0>
    8000d798:	9d2fe06f          	j	8000b96a <tinst_tests_gpf+0x6be>
    8000d79c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d79e:	0016f713          	andi	a4,a3,1
    8000d7a2:	d00712e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7aa:	460d                	li	a2,3
    8000d7ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7b2:	00c59763          	bne	a1,a2,8000d7c0 <tinst_tests_gpf+0x2514>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7b6:	0026d683          	lhu	a3,2(a3)
    8000d7ba:	0106969b          	slliw	a3,a3,0x10
    8000d7be:	8f55                	or	a4,a4,a3
    8000d7c0:	01f076b7          	lui	a3,0x1f07
    8000d7c4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d7c8:	8f75                	and	a4,a4,a3
    8000d7ca:	00e78463          	beq	a5,a4,8000d7d2 <tinst_tests_gpf+0x2526>
    8000d7ce:	988fe06f          	j	8000b956 <tinst_tests_gpf+0x6aa>
    8000d7d2:	998fe06f          	j	8000b96a <tinst_tests_gpf+0x6be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000d7d6:	701c                	ld	a5,32(s0)
    8000d7d8:	00021597          	auipc	a1,0x21
    8000d7dc:	9d058593          	addi	a1,a1,-1584 # 8002e1a8 <__func__.0+0x2c0>
    8000d7e0:	e399                	bnez	a5,8000d7e6 <tinst_tests_gpf+0x253a>
    8000d7e2:	bdbfe06f          	j	8000c3bc <tinst_tests_gpf+0x1110>
    8000d7e6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7e8:	0016f713          	andi	a4,a3,1
    8000d7ec:	ca071de3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7f0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7f4:	460d                	li	a2,3
    8000d7f6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7fa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7fc:	00c59763          	bne	a1,a2,8000d80a <tinst_tests_gpf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d800:	0026d683          	lhu	a3,2(a3)
    8000d804:	0106969b          	slliw	a3,a3,0x10
    8000d808:	8f55                	or	a4,a4,a3
    8000d80a:	1ffe16b7          	lui	a3,0x1ffe1
    8000d80e:	068e                	slli	a3,a3,0x3
    8000d810:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d812:	8f75                	and	a4,a4,a3
    8000d814:	00021597          	auipc	a1,0x21
    8000d818:	99458593          	addi	a1,a1,-1644 # 8002e1a8 <__func__.0+0x2c0>
    8000d81c:	00e79463          	bne	a5,a4,8000d824 <tinst_tests_gpf+0x2578>
    8000d820:	b9dfe06f          	j	8000c3bc <tinst_tests_gpf+0x1110>
    8000d824:	00021597          	auipc	a1,0x21
    8000d828:	99458593          	addi	a1,a1,-1644 # 8002e1b8 <__func__.0+0x2d0>
    8000d82c:	b91fe06f          	j	8000c3bc <tinst_tests_gpf+0x1110>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d830:	701c                	ld	a5,32(s0)
    8000d832:	e399                	bnez	a5,8000d838 <tinst_tests_gpf+0x258c>
    8000d834:	9dafe06f          	j	8000ba0e <tinst_tests_gpf+0x762>
    8000d838:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d83a:	0016f713          	andi	a4,a3,1
    8000d83e:	c60714e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d842:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d846:	460d                	li	a2,3
    8000d848:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d84c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d84e:	00c59763          	bne	a1,a2,8000d85c <tinst_tests_gpf+0x25b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d852:	0026d683          	lhu	a3,2(a3)
    8000d856:	0106969b          	slliw	a3,a3,0x10
    8000d85a:	8f55                	or	a4,a4,a3
    8000d85c:	01f076b7          	lui	a3,0x1f07
    8000d860:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d864:	8f75                	and	a4,a4,a3
    8000d866:	00e78463          	beq	a5,a4,8000d86e <tinst_tests_gpf+0x25c2>
    8000d86a:	990fe06f          	j	8000b9fa <tinst_tests_gpf+0x74e>
    8000d86e:	9a0fe06f          	j	8000ba0e <tinst_tests_gpf+0x762>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000d872:	701c                	ld	a5,32(s0)
    8000d874:	00021597          	auipc	a1,0x21
    8000d878:	93458593          	addi	a1,a1,-1740 # 8002e1a8 <__func__.0+0x2c0>
    8000d87c:	e399                	bnez	a5,8000d882 <tinst_tests_gpf+0x25d6>
    8000d87e:	be1fe06f          	j	8000c45e <tinst_tests_gpf+0x11b2>
    8000d882:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d884:	0016f713          	andi	a4,a3,1
    8000d888:	c0071fe3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d88c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d890:	460d                	li	a2,3
    8000d892:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d896:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d898:	00c59763          	bne	a1,a2,8000d8a6 <tinst_tests_gpf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d89c:	0026d683          	lhu	a3,2(a3)
    8000d8a0:	0106969b          	slliw	a3,a3,0x10
    8000d8a4:	8f55                	or	a4,a4,a3
    8000d8a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000d8aa:	068e                	slli	a3,a3,0x3
    8000d8ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d8ae:	8f75                	and	a4,a4,a3
    8000d8b0:	00021597          	auipc	a1,0x21
    8000d8b4:	8f858593          	addi	a1,a1,-1800 # 8002e1a8 <__func__.0+0x2c0>
    8000d8b8:	00e79463          	bne	a5,a4,8000d8c0 <tinst_tests_gpf+0x2614>
    8000d8bc:	ba3fe06f          	j	8000c45e <tinst_tests_gpf+0x11b2>
    8000d8c0:	00021597          	auipc	a1,0x21
    8000d8c4:	8f858593          	addi	a1,a1,-1800 # 8002e1b8 <__func__.0+0x2d0>
    8000d8c8:	b97fe06f          	j	8000c45e <tinst_tests_gpf+0x11b2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d8cc:	02043903          	ld	s2,32(s0)
    8000d8d0:	00091463          	bnez	s2,8000d8d8 <tinst_tests_gpf+0x262c>
    8000d8d4:	9cefe06f          	j	8000baa2 <tinst_tests_gpf+0x7f6>
    8000d8d8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d8da:	0017f713          	andi	a4,a5,1
    8000d8de:	bc0714e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8e2:	0007d503          	lhu	a0,0(a5)
    8000d8e6:	e5bf30ef          	jal	80001740 <expand_compressed_instruction>
    8000d8ea:	67a1                	lui	a5,0x8
    8000d8ec:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d8ee:	8d7d                	and	a0,a0,a5
    8000d8f0:	00a90463          	beq	s2,a0,8000d8f8 <tinst_tests_gpf+0x264c>
    8000d8f4:	99afe06f          	j	8000ba8e <tinst_tests_gpf+0x7e2>
    8000d8f8:	9aafe06f          	j	8000baa2 <tinst_tests_gpf+0x7f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000d8fc:	701c                	ld	a5,32(s0)
    8000d8fe:	00021597          	auipc	a1,0x21
    8000d902:	8aa58593          	addi	a1,a1,-1878 # 8002e1a8 <__func__.0+0x2c0>
    8000d906:	e399                	bnez	a5,8000d90c <tinst_tests_gpf+0x2660>
    8000d908:	bf9fe06f          	j	8000c500 <tinst_tests_gpf+0x1254>
    8000d90c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d90e:	0016f713          	andi	a4,a3,1
    8000d912:	b8071ae3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d916:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d91a:	460d                	li	a2,3
    8000d91c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d920:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d922:	00c59763          	bne	a1,a2,8000d930 <tinst_tests_gpf+0x2684>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d926:	0026d683          	lhu	a3,2(a3)
    8000d92a:	0106969b          	slliw	a3,a3,0x10
    8000d92e:	8f55                	or	a4,a4,a3
    8000d930:	1ffe16b7          	lui	a3,0x1ffe1
    8000d934:	068e                	slli	a3,a3,0x3
    8000d936:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d938:	8f75                	and	a4,a4,a3
    8000d93a:	00021597          	auipc	a1,0x21
    8000d93e:	86e58593          	addi	a1,a1,-1938 # 8002e1a8 <__func__.0+0x2c0>
    8000d942:	00e79463          	bne	a5,a4,8000d94a <tinst_tests_gpf+0x269e>
    8000d946:	bbbfe06f          	j	8000c500 <tinst_tests_gpf+0x1254>
    8000d94a:	00021597          	auipc	a1,0x21
    8000d94e:	86e58593          	addi	a1,a1,-1938 # 8002e1b8 <__func__.0+0x2d0>
    8000d952:	baffe06f          	j	8000c500 <tinst_tests_gpf+0x1254>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d956:	02043983          	ld	s3,32(s0)
    8000d95a:	00099463          	bnez	s3,8000d962 <tinst_tests_gpf+0x26b6>
    8000d95e:	9dafe06f          	j	8000bb38 <tinst_tests_gpf+0x88c>
    8000d962:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d964:	0017f713          	andi	a4,a5,1
    8000d968:	b2071fe3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d96c:	0007d503          	lhu	a0,0(a5)
    8000d970:	dd1f30ef          	jal	80001740 <expand_compressed_instruction>
    8000d974:	67a1                	lui	a5,0x8
    8000d976:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d978:	8d7d                	and	a0,a0,a5
    8000d97a:	00a98463          	beq	s3,a0,8000d982 <tinst_tests_gpf+0x26d6>
    8000d97e:	9a6fe06f          	j	8000bb24 <tinst_tests_gpf+0x878>
    8000d982:	9b6fe06f          	j	8000bb38 <tinst_tests_gpf+0x88c>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000d986:	701c                	ld	a5,32(s0)
    8000d988:	00021597          	auipc	a1,0x21
    8000d98c:	82058593          	addi	a1,a1,-2016 # 8002e1a8 <__func__.0+0x2c0>
    8000d990:	e399                	bnez	a5,8000d996 <tinst_tests_gpf+0x26ea>
    8000d992:	c11fe06f          	j	8000c5a2 <tinst_tests_gpf+0x12f6>
    8000d996:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d998:	0016f713          	andi	a4,a3,1
    8000d99c:	b00715e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9a0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d9a4:	460d                	li	a2,3
    8000d9a6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d9aa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d9ac:	00c59763          	bne	a1,a2,8000d9ba <tinst_tests_gpf+0x270e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d9b0:	0026d683          	lhu	a3,2(a3)
    8000d9b4:	0106969b          	slliw	a3,a3,0x10
    8000d9b8:	8f55                	or	a4,a4,a3
    8000d9ba:	1ffe16b7          	lui	a3,0x1ffe1
    8000d9be:	068e                	slli	a3,a3,0x3
    8000d9c0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d9c2:	8f75                	and	a4,a4,a3
    8000d9c4:	00020597          	auipc	a1,0x20
    8000d9c8:	7e458593          	addi	a1,a1,2020 # 8002e1a8 <__func__.0+0x2c0>
    8000d9cc:	00e79463          	bne	a5,a4,8000d9d4 <tinst_tests_gpf+0x2728>
    8000d9d0:	bd3fe06f          	j	8000c5a2 <tinst_tests_gpf+0x12f6>
    8000d9d4:	00020597          	auipc	a1,0x20
    8000d9d8:	7e458593          	addi	a1,a1,2020 # 8002e1b8 <__func__.0+0x2d0>
    8000d9dc:	bc7fe06f          	j	8000c5a2 <tinst_tests_gpf+0x12f6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d9e0:	02043983          	ld	s3,32(s0)
    8000d9e4:	00099463          	bnez	s3,8000d9ec <tinst_tests_gpf+0x2740>
    8000d9e8:	9e6fe06f          	j	8000bbce <tinst_tests_gpf+0x922>
    8000d9ec:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d9ee:	0017f713          	andi	a4,a5,1
    8000d9f2:	aa071ae3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9f6:	0007d503          	lhu	a0,0(a5)
    8000d9fa:	d47f30ef          	jal	80001740 <expand_compressed_instruction>
    8000d9fe:	01f077b7          	lui	a5,0x1f07
    8000da02:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000da06:	8d7d                	and	a0,a0,a5
    8000da08:	00a98463          	beq	s3,a0,8000da10 <tinst_tests_gpf+0x2764>
    8000da0c:	9aefe06f          	j	8000bbba <tinst_tests_gpf+0x90e>
    8000da10:	9befe06f          	j	8000bbce <tinst_tests_gpf+0x922>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000da14:	701c                	ld	a5,32(s0)
    8000da16:	00020597          	auipc	a1,0x20
    8000da1a:	79258593          	addi	a1,a1,1938 # 8002e1a8 <__func__.0+0x2c0>
    8000da1e:	e399                	bnez	a5,8000da24 <tinst_tests_gpf+0x2778>
    8000da20:	c25fe06f          	j	8000c644 <tinst_tests_gpf+0x1398>
    8000da24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da26:	0016f713          	andi	a4,a3,1
    8000da2a:	a6071ee3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da32:	460d                	li	a2,3
    8000da34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da3a:	00c59763          	bne	a1,a2,8000da48 <tinst_tests_gpf+0x279c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da3e:	0026d683          	lhu	a3,2(a3)
    8000da42:	0106969b          	slliw	a3,a3,0x10
    8000da46:	8f55                	or	a4,a4,a3
    8000da48:	1ffe16b7          	lui	a3,0x1ffe1
    8000da4c:	068e                	slli	a3,a3,0x3
    8000da4e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da50:	8f75                	and	a4,a4,a3
    8000da52:	00020597          	auipc	a1,0x20
    8000da56:	75658593          	addi	a1,a1,1878 # 8002e1a8 <__func__.0+0x2c0>
    8000da5a:	00e79463          	bne	a5,a4,8000da62 <tinst_tests_gpf+0x27b6>
    8000da5e:	be7fe06f          	j	8000c644 <tinst_tests_gpf+0x1398>
    8000da62:	00020597          	auipc	a1,0x20
    8000da66:	75658593          	addi	a1,a1,1878 # 8002e1b8 <__func__.0+0x2d0>
    8000da6a:	bdbfe06f          	j	8000c644 <tinst_tests_gpf+0x1398>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000da6e:	02043903          	ld	s2,32(s0)
    8000da72:	00091463          	bnez	s2,8000da7a <tinst_tests_gpf+0x27ce>
    8000da76:	9eefe06f          	j	8000bc64 <tinst_tests_gpf+0x9b8>
    8000da7a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da7c:	0017f713          	andi	a4,a5,1
    8000da80:	a20713e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da84:	0007d503          	lhu	a0,0(a5)
    8000da88:	cb9f30ef          	jal	80001740 <expand_compressed_instruction>
    8000da8c:	01f077b7          	lui	a5,0x1f07
    8000da90:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000da94:	8d7d                	and	a0,a0,a5
    8000da96:	00a90463          	beq	s2,a0,8000da9e <tinst_tests_gpf+0x27f2>
    8000da9a:	9b6fe06f          	j	8000bc50 <tinst_tests_gpf+0x9a4>
    8000da9e:	9c6fe06f          	j	8000bc64 <tinst_tests_gpf+0x9b8>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000daa2:	701c                	ld	a5,32(s0)
    8000daa4:	00020597          	auipc	a1,0x20
    8000daa8:	70458593          	addi	a1,a1,1796 # 8002e1a8 <__func__.0+0x2c0>
    8000daac:	e399                	bnez	a5,8000dab2 <tinst_tests_gpf+0x2806>
    8000daae:	c39fe06f          	j	8000c6e6 <tinst_tests_gpf+0x143a>
    8000dab2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dab4:	0016f713          	andi	a4,a3,1
    8000dab8:	9e0717e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dabc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dac0:	460d                	li	a2,3
    8000dac2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dac6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dac8:	00c59763          	bne	a1,a2,8000dad6 <tinst_tests_gpf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dacc:	0026d683          	lhu	a3,2(a3)
    8000dad0:	0106969b          	slliw	a3,a3,0x10
    8000dad4:	8f55                	or	a4,a4,a3
    8000dad6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dada:	068e                	slli	a3,a3,0x3
    8000dadc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dade:	8f75                	and	a4,a4,a3
    8000dae0:	00020597          	auipc	a1,0x20
    8000dae4:	6c858593          	addi	a1,a1,1736 # 8002e1a8 <__func__.0+0x2c0>
    8000dae8:	00e79463          	bne	a5,a4,8000daf0 <tinst_tests_gpf+0x2844>
    8000daec:	bfbfe06f          	j	8000c6e6 <tinst_tests_gpf+0x143a>
    8000daf0:	00020597          	auipc	a1,0x20
    8000daf4:	6c858593          	addi	a1,a1,1736 # 8002e1b8 <__func__.0+0x2d0>
    8000daf8:	beffe06f          	j	8000c6e6 <tinst_tests_gpf+0x143a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000dafc:	701c                	ld	a5,32(s0)
    8000dafe:	e399                	bnez	a5,8000db04 <tinst_tests_gpf+0x2858>
    8000db00:	a0cfe06f          	j	8000bd0c <tinst_tests_gpf+0xa60>
    8000db04:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db06:	0016f713          	andi	a4,a3,1
    8000db0a:	98071ee3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db12:	460d                	li	a2,3
    8000db14:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db1a:	00c59763          	bne	a1,a2,8000db28 <tinst_tests_gpf+0x287c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db1e:	0026d683          	lhu	a3,2(a3)
    8000db22:	0106969b          	slliw	a3,a3,0x10
    8000db26:	8f55                	or	a4,a4,a3
    8000db28:	1ffe16b7          	lui	a3,0x1ffe1
    8000db2c:	068e                	slli	a3,a3,0x3
    8000db2e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db30:	8f75                	and	a4,a4,a3
    8000db32:	00e78463          	beq	a5,a4,8000db3a <tinst_tests_gpf+0x288e>
    8000db36:	9c2fe06f          	j	8000bcf8 <tinst_tests_gpf+0xa4c>
    8000db3a:	9d2fe06f          	j	8000bd0c <tinst_tests_gpf+0xa60>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000db3e:	701c                	ld	a5,32(s0)
    8000db40:	00020597          	auipc	a1,0x20
    8000db44:	66858593          	addi	a1,a1,1640 # 8002e1a8 <__func__.0+0x2c0>
    8000db48:	e399                	bnez	a5,8000db4e <tinst_tests_gpf+0x28a2>
    8000db4a:	c37fe06f          	j	8000c780 <tinst_tests_gpf+0x14d4>
    8000db4e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db50:	0016f713          	andi	a4,a3,1
    8000db54:	940719e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db58:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db5c:	460d                	li	a2,3
    8000db5e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db62:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db64:	00c59763          	bne	a1,a2,8000db72 <tinst_tests_gpf+0x28c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db68:	0026d683          	lhu	a3,2(a3)
    8000db6c:	0106969b          	slliw	a3,a3,0x10
    8000db70:	8f55                	or	a4,a4,a3
    8000db72:	1ffe16b7          	lui	a3,0x1ffe1
    8000db76:	068e                	slli	a3,a3,0x3
    8000db78:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db7a:	8f75                	and	a4,a4,a3
    8000db7c:	00020597          	auipc	a1,0x20
    8000db80:	62c58593          	addi	a1,a1,1580 # 8002e1a8 <__func__.0+0x2c0>
    8000db84:	00e79463          	bne	a5,a4,8000db8c <tinst_tests_gpf+0x28e0>
    8000db88:	bf9fe06f          	j	8000c780 <tinst_tests_gpf+0x14d4>
    8000db8c:	00020597          	auipc	a1,0x20
    8000db90:	62c58593          	addi	a1,a1,1580 # 8002e1b8 <__func__.0+0x2d0>
    8000db94:	bedfe06f          	j	8000c780 <tinst_tests_gpf+0x14d4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000db98:	701c                	ld	a5,32(s0)
    8000db9a:	00020597          	auipc	a1,0x20
    8000db9e:	60e58593          	addi	a1,a1,1550 # 8002e1a8 <__func__.0+0x2c0>
    8000dba2:	e399                	bnez	a5,8000dba8 <tinst_tests_gpf+0x28fc>
    8000dba4:	c77fe06f          	j	8000c81a <tinst_tests_gpf+0x156e>
    8000dba8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbaa:	0016f713          	andi	a4,a3,1
    8000dbae:	8e071ce3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbb2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbb6:	460d                	li	a2,3
    8000dbb8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbbc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbbe:	00c59763          	bne	a1,a2,8000dbcc <tinst_tests_gpf+0x2920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbc2:	0026d683          	lhu	a3,2(a3)
    8000dbc6:	0106969b          	slliw	a3,a3,0x10
    8000dbca:	8f55                	or	a4,a4,a3
    8000dbcc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbd0:	068e                	slli	a3,a3,0x3
    8000dbd2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbd4:	8f75                	and	a4,a4,a3
    8000dbd6:	00020597          	auipc	a1,0x20
    8000dbda:	5d258593          	addi	a1,a1,1490 # 8002e1a8 <__func__.0+0x2c0>
    8000dbde:	00e79463          	bne	a5,a4,8000dbe6 <tinst_tests_gpf+0x293a>
    8000dbe2:	c39fe06f          	j	8000c81a <tinst_tests_gpf+0x156e>
    8000dbe6:	00020597          	auipc	a1,0x20
    8000dbea:	5d258593          	addi	a1,a1,1490 # 8002e1b8 <__func__.0+0x2d0>
    8000dbee:	c2dfe06f          	j	8000c81a <tinst_tests_gpf+0x156e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000dbf2:	701c                	ld	a5,32(s0)
    8000dbf4:	00020597          	auipc	a1,0x20
    8000dbf8:	5b458593          	addi	a1,a1,1460 # 8002e1a8 <__func__.0+0x2c0>
    8000dbfc:	e399                	bnez	a5,8000dc02 <tinst_tests_gpf+0x2956>
    8000dbfe:	cb7fe06f          	j	8000c8b4 <tinst_tests_gpf+0x1608>
    8000dc02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc04:	0016f713          	andi	a4,a3,1
    8000dc08:	88071fe3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc0c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc10:	460d                	li	a2,3
    8000dc12:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc16:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc18:	00c59763          	bne	a1,a2,8000dc26 <tinst_tests_gpf+0x297a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc1c:	0026d683          	lhu	a3,2(a3)
    8000dc20:	0106969b          	slliw	a3,a3,0x10
    8000dc24:	8f55                	or	a4,a4,a3
    8000dc26:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc2a:	068e                	slli	a3,a3,0x3
    8000dc2c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc2e:	8f75                	and	a4,a4,a3
    8000dc30:	00020597          	auipc	a1,0x20
    8000dc34:	57858593          	addi	a1,a1,1400 # 8002e1a8 <__func__.0+0x2c0>
    8000dc38:	00e79463          	bne	a5,a4,8000dc40 <tinst_tests_gpf+0x2994>
    8000dc3c:	c79fe06f          	j	8000c8b4 <tinst_tests_gpf+0x1608>
    8000dc40:	00020597          	auipc	a1,0x20
    8000dc44:	57858593          	addi	a1,a1,1400 # 8002e1b8 <__func__.0+0x2d0>
    8000dc48:	c6dfe06f          	j	8000c8b4 <tinst_tests_gpf+0x1608>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000dc4c:	701c                	ld	a5,32(s0)
    8000dc4e:	e399                	bnez	a5,8000dc54 <tinst_tests_gpf+0x29a8>
    8000dc50:	bd0fe06f          	j	8000c020 <tinst_tests_gpf+0xd74>
    8000dc54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc56:	0016f713          	andi	a4,a3,1
    8000dc5a:	840716e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc62:	460d                	li	a2,3
    8000dc64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc6a:	00c59763          	bne	a1,a2,8000dc78 <tinst_tests_gpf+0x29cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc6e:	0026d683          	lhu	a3,2(a3)
    8000dc72:	0106969b          	slliw	a3,a3,0x10
    8000dc76:	8f55                	or	a4,a4,a3
    8000dc78:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc7c:	068e                	slli	a3,a3,0x3
    8000dc7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc80:	8f75                	and	a4,a4,a3
    8000dc82:	00e78463          	beq	a5,a4,8000dc8a <tinst_tests_gpf+0x29de>
    8000dc86:	b86fe06f          	j	8000c00c <tinst_tests_gpf+0xd60>
    8000dc8a:	b96fe06f          	j	8000c020 <tinst_tests_gpf+0xd74>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dc8e:	701c                	ld	a5,32(s0)
    8000dc90:	e399                	bnez	a5,8000dc96 <tinst_tests_gpf+0x29ea>
    8000dc92:	c30fe06f          	j	8000c0c2 <tinst_tests_gpf+0xe16>
    8000dc96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc98:	0016f713          	andi	a4,a3,1
    8000dc9c:	800715e3          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dca0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dca4:	460d                	li	a2,3
    8000dca6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcac:	00c59763          	bne	a1,a2,8000dcba <tinst_tests_gpf+0x2a0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcb0:	0026d683          	lhu	a3,2(a3)
    8000dcb4:	0106969b          	slliw	a3,a3,0x10
    8000dcb8:	8f55                	or	a4,a4,a3
    8000dcba:	1ffe16b7          	lui	a3,0x1ffe1
    8000dcbe:	068e                	slli	a3,a3,0x3
    8000dcc0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dcc2:	8f75                	and	a4,a4,a3
    8000dcc4:	00e78463          	beq	a5,a4,8000dccc <tinst_tests_gpf+0x2a20>
    8000dcc8:	be6fe06f          	j	8000c0ae <tinst_tests_gpf+0xe02>
    8000dccc:	bf6fe06f          	j	8000c0c2 <tinst_tests_gpf+0xe16>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000dcd0:	701c                	ld	a5,32(s0)
    8000dcd2:	e399                	bnez	a5,8000dcd8 <tinst_tests_gpf+0x2a2c>
    8000dcd4:	c90fe06f          	j	8000c164 <tinst_tests_gpf+0xeb8>
    8000dcd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcda:	0016f713          	andi	a4,a3,1
    8000dcde:	fc071463          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dce2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dce6:	460d                	li	a2,3
    8000dce8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcee:	00c59763          	bne	a1,a2,8000dcfc <tinst_tests_gpf+0x2a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcf2:	0026d683          	lhu	a3,2(a3)
    8000dcf6:	0106969b          	slliw	a3,a3,0x10
    8000dcfa:	8f55                	or	a4,a4,a3
    8000dcfc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd00:	068e                	slli	a3,a3,0x3
    8000dd02:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd04:	8f75                	and	a4,a4,a3
    8000dd06:	00e78463          	beq	a5,a4,8000dd0e <tinst_tests_gpf+0x2a62>
    8000dd0a:	c46fe06f          	j	8000c150 <tinst_tests_gpf+0xea4>
    8000dd0e:	c56fe06f          	j	8000c164 <tinst_tests_gpf+0xeb8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000dd12:	701c                	ld	a5,32(s0)
    8000dd14:	e399                	bnez	a5,8000dd1a <tinst_tests_gpf+0x2a6e>
    8000dd16:	cf0fe06f          	j	8000c206 <tinst_tests_gpf+0xf5a>
    8000dd1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd1c:	0016f713          	andi	a4,a3,1
    8000dd20:	f8071363          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd24:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd28:	460d                	li	a2,3
    8000dd2a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd2e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd30:	00c59763          	bne	a1,a2,8000dd3e <tinst_tests_gpf+0x2a92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd34:	0026d683          	lhu	a3,2(a3)
    8000dd38:	0106969b          	slliw	a3,a3,0x10
    8000dd3c:	8f55                	or	a4,a4,a3
    8000dd3e:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd42:	068e                	slli	a3,a3,0x3
    8000dd44:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd46:	8f75                	and	a4,a4,a3
    8000dd48:	00e78463          	beq	a5,a4,8000dd50 <tinst_tests_gpf+0x2aa4>
    8000dd4c:	ca6fe06f          	j	8000c1f2 <tinst_tests_gpf+0xf46>
    8000dd50:	cb6fe06f          	j	8000c206 <tinst_tests_gpf+0xf5a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000dd54:	701c                	ld	a5,32(s0)
    8000dd56:	e399                	bnez	a5,8000dd5c <tinst_tests_gpf+0x2ab0>
    8000dd58:	d50fe06f          	j	8000c2a8 <tinst_tests_gpf+0xffc>
    8000dd5c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd5e:	0016f713          	andi	a4,a3,1
    8000dd62:	f4071263          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd66:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd6a:	460d                	li	a2,3
    8000dd6c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd70:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd72:	00c59763          	bne	a1,a2,8000dd80 <tinst_tests_gpf+0x2ad4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd76:	0026d683          	lhu	a3,2(a3)
    8000dd7a:	0106969b          	slliw	a3,a3,0x10
    8000dd7e:	8f55                	or	a4,a4,a3
    8000dd80:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd84:	068e                	slli	a3,a3,0x3
    8000dd86:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd88:	8f75                	and	a4,a4,a3
    8000dd8a:	00e78463          	beq	a5,a4,8000dd92 <tinst_tests_gpf+0x2ae6>
    8000dd8e:	d06fe06f          	j	8000c294 <tinst_tests_gpf+0xfe8>
    8000dd92:	d16fe06f          	j	8000c2a8 <tinst_tests_gpf+0xffc>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dd96:	701c                	ld	a5,32(s0)
    8000dd98:	e399                	bnez	a5,8000dd9e <tinst_tests_gpf+0x2af2>
    8000dd9a:	db6fe06f          	j	8000c350 <tinst_tests_gpf+0x10a4>
    8000dd9e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dda0:	0016f713          	andi	a4,a3,1
    8000dda4:	f0071163          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dda8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddac:	460d                	li	a2,3
    8000ddae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddb2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddb4:	00c59763          	bne	a1,a2,8000ddc2 <tinst_tests_gpf+0x2b16>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddb8:	0026d683          	lhu	a3,2(a3)
    8000ddbc:	0106969b          	slliw	a3,a3,0x10
    8000ddc0:	8f55                	or	a4,a4,a3
    8000ddc2:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddc6:	068e                	slli	a3,a3,0x3
    8000ddc8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ddca:	8f75                	and	a4,a4,a3
    8000ddcc:	00e78463          	beq	a5,a4,8000ddd4 <tinst_tests_gpf+0x2b28>
    8000ddd0:	d6cfe06f          	j	8000c33c <tinst_tests_gpf+0x1090>
    8000ddd4:	d7cfe06f          	j	8000c350 <tinst_tests_gpf+0x10a4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000ddd8:	701c                	ld	a5,32(s0)
    8000ddda:	e399                	bnez	a5,8000dde0 <tinst_tests_gpf+0x2b34>
    8000dddc:	e16fe06f          	j	8000c3f2 <tinst_tests_gpf+0x1146>
    8000dde0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dde2:	0016f713          	andi	a4,a3,1
    8000dde6:	ec071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddee:	460d                	li	a2,3
    8000ddf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddf6:	00c59763          	bne	a1,a2,8000de04 <tinst_tests_gpf+0x2b58>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddfa:	0026d683          	lhu	a3,2(a3)
    8000ddfe:	0106969b          	slliw	a3,a3,0x10
    8000de02:	8f55                	or	a4,a4,a3
    8000de04:	1ffe16b7          	lui	a3,0x1ffe1
    8000de08:	068e                	slli	a3,a3,0x3
    8000de0a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de0c:	8f75                	and	a4,a4,a3
    8000de0e:	00e78463          	beq	a5,a4,8000de16 <tinst_tests_gpf+0x2b6a>
    8000de12:	dccfe06f          	j	8000c3de <tinst_tests_gpf+0x1132>
    8000de16:	ddcfe06f          	j	8000c3f2 <tinst_tests_gpf+0x1146>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000de1a:	701c                	ld	a5,32(s0)
    8000de1c:	e399                	bnez	a5,8000de22 <tinst_tests_gpf+0x2b76>
    8000de1e:	e76fe06f          	j	8000c494 <tinst_tests_gpf+0x11e8>
    8000de22:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de24:	0016f713          	andi	a4,a3,1
    8000de28:	e6071f63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de2c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de30:	460d                	li	a2,3
    8000de32:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de36:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de38:	00c59763          	bne	a1,a2,8000de46 <tinst_tests_gpf+0x2b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de3c:	0026d683          	lhu	a3,2(a3)
    8000de40:	0106969b          	slliw	a3,a3,0x10
    8000de44:	8f55                	or	a4,a4,a3
    8000de46:	1ffe16b7          	lui	a3,0x1ffe1
    8000de4a:	068e                	slli	a3,a3,0x3
    8000de4c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de4e:	8f75                	and	a4,a4,a3
    8000de50:	00e78463          	beq	a5,a4,8000de58 <tinst_tests_gpf+0x2bac>
    8000de54:	e2cfe06f          	j	8000c480 <tinst_tests_gpf+0x11d4>
    8000de58:	e3cfe06f          	j	8000c494 <tinst_tests_gpf+0x11e8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000de5c:	701c                	ld	a5,32(s0)
    8000de5e:	e399                	bnez	a5,8000de64 <tinst_tests_gpf+0x2bb8>
    8000de60:	ed6fe06f          	j	8000c536 <tinst_tests_gpf+0x128a>
    8000de64:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de66:	0016f713          	andi	a4,a3,1
    8000de6a:	e2071e63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de6e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de72:	460d                	li	a2,3
    8000de74:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de78:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de7a:	00c59763          	bne	a1,a2,8000de88 <tinst_tests_gpf+0x2bdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de7e:	0026d683          	lhu	a3,2(a3)
    8000de82:	0106969b          	slliw	a3,a3,0x10
    8000de86:	8f55                	or	a4,a4,a3
    8000de88:	1ffe16b7          	lui	a3,0x1ffe1
    8000de8c:	068e                	slli	a3,a3,0x3
    8000de8e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de90:	8f75                	and	a4,a4,a3
    8000de92:	00e78463          	beq	a5,a4,8000de9a <tinst_tests_gpf+0x2bee>
    8000de96:	e8cfe06f          	j	8000c522 <tinst_tests_gpf+0x1276>
    8000de9a:	e9cfe06f          	j	8000c536 <tinst_tests_gpf+0x128a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000de9e:	701c                	ld	a5,32(s0)
    8000dea0:	e399                	bnez	a5,8000dea6 <tinst_tests_gpf+0x2bfa>
    8000dea2:	f36fe06f          	j	8000c5d8 <tinst_tests_gpf+0x132c>
    8000dea6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dea8:	0016f713          	andi	a4,a3,1
    8000deac:	de071d63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000deb0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000deb4:	460d                	li	a2,3
    8000deb6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000deba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000debc:	00c59763          	bne	a1,a2,8000deca <tinst_tests_gpf+0x2c1e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dec0:	0026d683          	lhu	a3,2(a3)
    8000dec4:	0106969b          	slliw	a3,a3,0x10
    8000dec8:	8f55                	or	a4,a4,a3
    8000deca:	1ffe16b7          	lui	a3,0x1ffe1
    8000dece:	068e                	slli	a3,a3,0x3
    8000ded0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ded2:	8f75                	and	a4,a4,a3
    8000ded4:	00e78463          	beq	a5,a4,8000dedc <tinst_tests_gpf+0x2c30>
    8000ded8:	eecfe06f          	j	8000c5c4 <tinst_tests_gpf+0x1318>
    8000dedc:	efcfe06f          	j	8000c5d8 <tinst_tests_gpf+0x132c>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000dee0:	6418                	ld	a4,8(s0)
    8000dee2:	47dd                	li	a5,23
    8000dee4:	00f70463          	beq	a4,a5,8000deec <tinst_tests_gpf+0x2c40>
    8000dee8:	84bfe06f          	j	8000c732 <tinst_tests_gpf+0x1486>
    8000deec:	701c                	ld	a5,32(s0)
    8000deee:	e399                	bnez	a5,8000def4 <tinst_tests_gpf+0x2c48>
    8000def0:	845fe06f          	j	8000c734 <tinst_tests_gpf+0x1488>
    8000def4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000def6:	0016f713          	andi	a4,a3,1
    8000defa:	da071663          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000defe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df02:	460d                	li	a2,3
    8000df04:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df08:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df0a:	00c59763          	bne	a1,a2,8000df18 <tinst_tests_gpf+0x2c6c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df0e:	0026d683          	lhu	a3,2(a3)
    8000df12:	0106969b          	slliw	a3,a3,0x10
    8000df16:	8f55                	or	a4,a4,a3
    8000df18:	1ffe16b7          	lui	a3,0x1ffe1
    8000df1c:	068e                	slli	a3,a3,0x3
    8000df1e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df20:	8f75                	and	a4,a4,a3
    8000df22:	40f704b3          	sub	s1,a4,a5
    8000df26:	0014b493          	seqz	s1,s1
    8000df2a:	80bfe06f          	j	8000c734 <tinst_tests_gpf+0x1488>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000df2e:	6418                	ld	a4,8(s0)
    8000df30:	47dd                	li	a5,23
    8000df32:	00f70463          	beq	a4,a5,8000df3a <tinst_tests_gpf+0x2c8e>
    8000df36:	897fe06f          	j	8000c7cc <tinst_tests_gpf+0x1520>
    8000df3a:	701c                	ld	a5,32(s0)
    8000df3c:	e399                	bnez	a5,8000df42 <tinst_tests_gpf+0x2c96>
    8000df3e:	891fe06f          	j	8000c7ce <tinst_tests_gpf+0x1522>
    8000df42:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df44:	0016f713          	andi	a4,a3,1
    8000df48:	d4071f63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df4c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df50:	460d                	li	a2,3
    8000df52:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df56:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df58:	00c59763          	bne	a1,a2,8000df66 <tinst_tests_gpf+0x2cba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df5c:	0026d683          	lhu	a3,2(a3)
    8000df60:	0106969b          	slliw	a3,a3,0x10
    8000df64:	8f55                	or	a4,a4,a3
    8000df66:	1ffe16b7          	lui	a3,0x1ffe1
    8000df6a:	068e                	slli	a3,a3,0x3
    8000df6c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df6e:	8f75                	and	a4,a4,a3
    8000df70:	40f704b3          	sub	s1,a4,a5
    8000df74:	0014b493          	seqz	s1,s1
    8000df78:	857fe06f          	j	8000c7ce <tinst_tests_gpf+0x1522>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000df7c:	6418                	ld	a4,8(s0)
    8000df7e:	47dd                	li	a5,23
    8000df80:	00f70463          	beq	a4,a5,8000df88 <tinst_tests_gpf+0x2cdc>
    8000df84:	8e3fe06f          	j	8000c866 <tinst_tests_gpf+0x15ba>
    8000df88:	701c                	ld	a5,32(s0)
    8000df8a:	e399                	bnez	a5,8000df90 <tinst_tests_gpf+0x2ce4>
    8000df8c:	8ddfe06f          	j	8000c868 <tinst_tests_gpf+0x15bc>
    8000df90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df92:	0016f713          	andi	a4,a3,1
    8000df96:	d0071863          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df9e:	460d                	li	a2,3
    8000dfa0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfa4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfa6:	00c59763          	bne	a1,a2,8000dfb4 <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfaa:	0026d683          	lhu	a3,2(a3)
    8000dfae:	0106969b          	slliw	a3,a3,0x10
    8000dfb2:	8f55                	or	a4,a4,a3
    8000dfb4:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfb8:	068e                	slli	a3,a3,0x3
    8000dfba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfbc:	8f75                	and	a4,a4,a3
    8000dfbe:	40f704b3          	sub	s1,a4,a5
    8000dfc2:	0014b493          	seqz	s1,s1
    8000dfc6:	8a3fe06f          	j	8000c868 <tinst_tests_gpf+0x15bc>
    instruction = *((uint16_t*)addr);
    8000dfca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfce:	460d                	li	a2,3
    8000dfd0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfd4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfd6:	00c59763          	bne	a1,a2,8000dfe4 <tinst_tests_gpf+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfda:	0026d683          	lhu	a3,2(a3)
    8000dfde:	0106969b          	slliw	a3,a3,0x10
    8000dfe2:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000dfe4:	1746                	slli	a4,a4,0x31
    8000dfe6:	9345                	srli	a4,a4,0x31
    8000dfe8:	00e78463          	beq	a5,a4,8000dff0 <tinst_tests_gpf+0x2d44>
    8000dfec:	e50fd06f          	j	8000b63c <tinst_tests_gpf+0x390>
    8000dff0:	e60fd06f          	j	8000b650 <tinst_tests_gpf+0x3a4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000dff4:	02043903          	ld	s2,32(s0)
    8000dff8:	00091463          	bnez	s2,8000e000 <tinst_tests_gpf+0x2d54>
    8000dffc:	c89fd06f          	j	8000bc84 <tinst_tests_gpf+0x9d8>
    8000e000:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e002:	0017f713          	andi	a4,a5,1
    8000e006:	ca071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e00a:	0007d503          	lhu	a0,0(a5)
    8000e00e:	f32f30ef          	jal	80001740 <expand_compressed_instruction>
    8000e012:	01f077b7          	lui	a5,0x1f07
    8000e016:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e01a:	00f574b3          	and	s1,a0,a5
    8000e01e:	412484b3          	sub	s1,s1,s2
    8000e022:	0014b493          	seqz	s1,s1
    8000e026:	c5ffd06f          	j	8000bc84 <tinst_tests_gpf+0x9d8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e02a:	701c                	ld	a5,32(s0)
    8000e02c:	e399                	bnez	a5,8000e032 <tinst_tests_gpf+0x2d86>
    8000e02e:	cfffd06f          	j	8000bd2c <tinst_tests_gpf+0xa80>
    8000e032:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e034:	0016f713          	andi	a4,a3,1
    8000e038:	c6071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e03c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e040:	460d                	li	a2,3
    8000e042:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e046:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e048:	00c59763          	bne	a1,a2,8000e056 <tinst_tests_gpf+0x2daa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e04c:	0026d683          	lhu	a3,2(a3)
    8000e050:	0106969b          	slliw	a3,a3,0x10
    8000e054:	8f55                	or	a4,a4,a3
    8000e056:	1ffe16b7          	lui	a3,0x1ffe1
    8000e05a:	068e                	slli	a3,a3,0x3
    8000e05c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e05e:	8f75                	and	a4,a4,a3
    8000e060:	40f704b3          	sub	s1,a4,a5
    8000e064:	0014b493          	seqz	s1,s1
    8000e068:	cc5fd06f          	j	8000bd2c <tinst_tests_gpf+0xa80>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000e06c:	701c                	ld	a5,32(s0)
    8000e06e:	e399                	bnez	a5,8000e074 <tinst_tests_gpf+0x2dc8>
    8000e070:	d61fd06f          	j	8000bdd0 <tinst_tests_gpf+0xb24>
    8000e074:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e076:	0016f713          	andi	a4,a3,1
    8000e07a:	c2071663          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e07e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e082:	460d                	li	a2,3
    8000e084:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e088:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e08a:	00c59763          	bne	a1,a2,8000e098 <tinst_tests_gpf+0x2dec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e08e:	0026d683          	lhu	a3,2(a3)
    8000e092:	0106969b          	slliw	a3,a3,0x10
    8000e096:	8f55                	or	a4,a4,a3
    8000e098:	1ffe16b7          	lui	a3,0x1ffe1
    8000e09c:	068e                	slli	a3,a3,0x3
    8000e09e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0a0:	8f75                	and	a4,a4,a3
    8000e0a2:	40f704b3          	sub	s1,a4,a5
    8000e0a6:	0014b493          	seqz	s1,s1
    8000e0aa:	d27fd06f          	j	8000bdd0 <tinst_tests_gpf+0xb24>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e0ae:	701c                	ld	a5,32(s0)
    8000e0b0:	e399                	bnez	a5,8000e0b6 <tinst_tests_gpf+0x2e0a>
    8000e0b2:	dc1fd06f          	j	8000be72 <tinst_tests_gpf+0xbc6>
    8000e0b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0b8:	0016f713          	andi	a4,a3,1
    8000e0bc:	be071563          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0c4:	460d                	li	a2,3
    8000e0c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0cc:	00c59763          	bne	a1,a2,8000e0da <tinst_tests_gpf+0x2e2e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0d0:	0026d683          	lhu	a3,2(a3)
    8000e0d4:	0106969b          	slliw	a3,a3,0x10
    8000e0d8:	8f55                	or	a4,a4,a3
    8000e0da:	1ffe16b7          	lui	a3,0x1ffe1
    8000e0de:	068e                	slli	a3,a3,0x3
    8000e0e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0e2:	8f75                	and	a4,a4,a3
    8000e0e4:	40f704b3          	sub	s1,a4,a5
    8000e0e8:	0014b493          	seqz	s1,s1
    8000e0ec:	d87fd06f          	j	8000be72 <tinst_tests_gpf+0xbc6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e0f0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e0f2:	0017f713          	andi	a4,a5,1
    8000e0f6:	ba071863          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0fa:	0007d503          	lhu	a0,0(a5)
    8000e0fe:	e42f30ef          	jal	80001740 <expand_compressed_instruction>
    8000e102:	67a1                	lui	a5,0x8
    8000e104:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e106:	8d7d                	and	a0,a0,a5
    8000e108:	00a90463          	beq	s2,a0,8000e110 <tinst_tests_gpf+0x2e64>
    8000e10c:	959fd06f          	j	8000ba64 <tinst_tests_gpf+0x7b8>
    8000e110:	00020597          	auipc	a1,0x20
    8000e114:	09858593          	addi	a1,a1,152 # 8002e1a8 <__func__.0+0x2c0>
    8000e118:	955fd06f          	j	8000ba6c <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e11c:	701c                	ld	a5,32(s0)
    8000e11e:	e399                	bnez	a5,8000e124 <tinst_tests_gpf+0x2e78>
    8000e120:	df5fd06f          	j	8000bf14 <tinst_tests_gpf+0xc68>
    8000e124:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e126:	0016f713          	andi	a4,a3,1
    8000e12a:	b6071e63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e12e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e132:	460d                	li	a2,3
    8000e134:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e138:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e13a:	00c59763          	bne	a1,a2,8000e148 <tinst_tests_gpf+0x2e9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e13e:	0026d683          	lhu	a3,2(a3)
    8000e142:	0106969b          	slliw	a3,a3,0x10
    8000e146:	8f55                	or	a4,a4,a3
    8000e148:	1ffe16b7          	lui	a3,0x1ffe1
    8000e14c:	068e                	slli	a3,a3,0x3
    8000e14e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e150:	8f75                	and	a4,a4,a3
    8000e152:	40f704b3          	sub	s1,a4,a5
    8000e156:	0014b493          	seqz	s1,s1
    8000e15a:	dbbfd06f          	j	8000bf14 <tinst_tests_gpf+0xc68>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e15e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e160:	0017f713          	andi	a4,a5,1
    8000e164:	b4071163          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e168:	0007d503          	lhu	a0,0(a5)
    8000e16c:	dd4f30ef          	jal	80001740 <expand_compressed_instruction>
    8000e170:	67a1                	lui	a5,0x8
    8000e172:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e174:	8d7d                	and	a0,a0,a5
    8000e176:	00a98463          	beq	s3,a0,8000e17e <tinst_tests_gpf+0x2ed2>
    8000e17a:	981fd06f          	j	8000bafa <tinst_tests_gpf+0x84e>
    8000e17e:	00020597          	auipc	a1,0x20
    8000e182:	02a58593          	addi	a1,a1,42 # 8002e1a8 <__func__.0+0x2c0>
    8000e186:	97dfd06f          	j	8000bb02 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e18a:	701c                	ld	a5,32(s0)
    8000e18c:	e399                	bnez	a5,8000e192 <tinst_tests_gpf+0x2ee6>
    8000e18e:	e1dfd06f          	j	8000bfaa <tinst_tests_gpf+0xcfe>
    8000e192:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e194:	0016f713          	andi	a4,a3,1
    8000e198:	b0071763          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e19c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1a0:	460d                	li	a2,3
    8000e1a2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1a6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1a8:	00c59763          	bne	a1,a2,8000e1b6 <tinst_tests_gpf+0x2f0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1ac:	0026d683          	lhu	a3,2(a3)
    8000e1b0:	0106969b          	slliw	a3,a3,0x10
    8000e1b4:	8f55                	or	a4,a4,a3
    8000e1b6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1ba:	068e                	slli	a3,a3,0x3
    8000e1bc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1be:	8f75                	and	a4,a4,a3
    8000e1c0:	40f704b3          	sub	s1,a4,a5
    8000e1c4:	0014b493          	seqz	s1,s1
    8000e1c8:	de3fd06f          	j	8000bfaa <tinst_tests_gpf+0xcfe>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e1cc:	701c                	ld	a5,32(s0)
    8000e1ce:	e399                	bnez	a5,8000e1d4 <tinst_tests_gpf+0x2f28>
    8000e1d0:	e71fd06f          	j	8000c040 <tinst_tests_gpf+0xd94>
    8000e1d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e1d6:	0016f713          	andi	a4,a3,1
    8000e1da:	ac071663          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1e2:	460d                	li	a2,3
    8000e1e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1ea:	00c59763          	bne	a1,a2,8000e1f8 <tinst_tests_gpf+0x2f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1ee:	0026d683          	lhu	a3,2(a3)
    8000e1f2:	0106969b          	slliw	a3,a3,0x10
    8000e1f6:	8f55                	or	a4,a4,a3
    8000e1f8:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1fc:	068e                	slli	a3,a3,0x3
    8000e1fe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e200:	8f75                	and	a4,a4,a3
    8000e202:	40f704b3          	sub	s1,a4,a5
    8000e206:	0014b493          	seqz	s1,s1
    8000e20a:	e37fd06f          	j	8000c040 <tinst_tests_gpf+0xd94>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e20e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e210:	0017f713          	andi	a4,a5,1
    8000e214:	a8071963          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e218:	0007d503          	lhu	a0,0(a5)
    8000e21c:	d24f30ef          	jal	80001740 <expand_compressed_instruction>
    8000e220:	01f077b7          	lui	a5,0x1f07
    8000e224:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e228:	8d7d                	and	a0,a0,a5
    8000e22a:	00a98463          	beq	s3,a0,8000e232 <tinst_tests_gpf+0x2f86>
    8000e22e:	963fd06f          	j	8000bb90 <tinst_tests_gpf+0x8e4>
    8000e232:	00020597          	auipc	a1,0x20
    8000e236:	f7658593          	addi	a1,a1,-138 # 8002e1a8 <__func__.0+0x2c0>
    8000e23a:	95ffd06f          	j	8000bb98 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e23e:	701c                	ld	a5,32(s0)
    8000e240:	e399                	bnez	a5,8000e246 <tinst_tests_gpf+0x2f9a>
    8000e242:	ea1fd06f          	j	8000c0e2 <tinst_tests_gpf+0xe36>
    8000e246:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e248:	0016f713          	andi	a4,a3,1
    8000e24c:	a4071d63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e250:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e254:	460d                	li	a2,3
    8000e256:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e25a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e25c:	00c59763          	bne	a1,a2,8000e26a <tinst_tests_gpf+0x2fbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e260:	0026d683          	lhu	a3,2(a3)
    8000e264:	0106969b          	slliw	a3,a3,0x10
    8000e268:	8f55                	or	a4,a4,a3
    8000e26a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e26e:	068e                	slli	a3,a3,0x3
    8000e270:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e272:	8f75                	and	a4,a4,a3
    8000e274:	40f704b3          	sub	s1,a4,a5
    8000e278:	0014b493          	seqz	s1,s1
    8000e27c:	e67fd06f          	j	8000c0e2 <tinst_tests_gpf+0xe36>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e280:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e282:	0017f713          	andi	a4,a5,1
    8000e286:	a2071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e28a:	0007d503          	lhu	a0,0(a5)
    8000e28e:	cb2f30ef          	jal	80001740 <expand_compressed_instruction>
    8000e292:	01f077b7          	lui	a5,0x1f07
    8000e296:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e29a:	8d7d                	and	a0,a0,a5
    8000e29c:	00a90463          	beq	s2,a0,8000e2a4 <tinst_tests_gpf+0x2ff8>
    8000e2a0:	987fd06f          	j	8000bc26 <tinst_tests_gpf+0x97a>
    8000e2a4:	00020597          	auipc	a1,0x20
    8000e2a8:	f0458593          	addi	a1,a1,-252 # 8002e1a8 <__func__.0+0x2c0>
    8000e2ac:	983fd06f          	j	8000bc2e <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e2b0:	701c                	ld	a5,32(s0)
    8000e2b2:	e399                	bnez	a5,8000e2b8 <tinst_tests_gpf+0x300c>
    8000e2b4:	ed1fd06f          	j	8000c184 <tinst_tests_gpf+0xed8>
    8000e2b8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2ba:	0016f713          	andi	a4,a3,1
    8000e2be:	9e071463          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2c2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2c6:	460d                	li	a2,3
    8000e2c8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2cc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2ce:	00c59763          	bne	a1,a2,8000e2dc <tinst_tests_gpf+0x3030>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2d2:	0026d683          	lhu	a3,2(a3)
    8000e2d6:	0106969b          	slliw	a3,a3,0x10
    8000e2da:	8f55                	or	a4,a4,a3
    8000e2dc:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2e0:	068e                	slli	a3,a3,0x3
    8000e2e2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2e4:	8f75                	and	a4,a4,a3
    8000e2e6:	40f704b3          	sub	s1,a4,a5
    8000e2ea:	0014b493          	seqz	s1,s1
    8000e2ee:	e97fd06f          	j	8000c184 <tinst_tests_gpf+0xed8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e2f2:	701c                	ld	a5,32(s0)
    8000e2f4:	e399                	bnez	a5,8000e2fa <tinst_tests_gpf+0x304e>
    8000e2f6:	f31fd06f          	j	8000c226 <tinst_tests_gpf+0xf7a>
    8000e2fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2fc:	0016f713          	andi	a4,a3,1
    8000e300:	9a071363          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e304:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e308:	460d                	li	a2,3
    8000e30a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e30e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e310:	00c59763          	bne	a1,a2,8000e31e <tinst_tests_gpf+0x3072>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e314:	0026d683          	lhu	a3,2(a3)
    8000e318:	0106969b          	slliw	a3,a3,0x10
    8000e31c:	8f55                	or	a4,a4,a3
    8000e31e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e322:	068e                	slli	a3,a3,0x3
    8000e324:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e326:	8f75                	and	a4,a4,a3
    8000e328:	40f704b3          	sub	s1,a4,a5
    8000e32c:	0014b493          	seqz	s1,s1
    8000e330:	ef7fd06f          	j	8000c226 <tinst_tests_gpf+0xf7a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e334:	701c                	ld	a5,32(s0)
    8000e336:	e399                	bnez	a5,8000e33c <tinst_tests_gpf+0x3090>
    8000e338:	f91fd06f          	j	8000c2c8 <tinst_tests_gpf+0x101c>
    8000e33c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e33e:	0016f713          	andi	a4,a3,1
    8000e342:	96071263          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e346:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e34a:	460d                	li	a2,3
    8000e34c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e350:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e352:	00c59763          	bne	a1,a2,8000e360 <tinst_tests_gpf+0x30b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e356:	0026d683          	lhu	a3,2(a3)
    8000e35a:	0106969b          	slliw	a3,a3,0x10
    8000e35e:	8f55                	or	a4,a4,a3
    8000e360:	1ffe16b7          	lui	a3,0x1ffe1
    8000e364:	068e                	slli	a3,a3,0x3
    8000e366:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e368:	8f75                	and	a4,a4,a3
    8000e36a:	40f704b3          	sub	s1,a4,a5
    8000e36e:	0014b493          	seqz	s1,s1
    8000e372:	f57fd06f          	j	8000c2c8 <tinst_tests_gpf+0x101c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e376:	701c                	ld	a5,32(s0)
    8000e378:	e399                	bnez	a5,8000e37e <tinst_tests_gpf+0x30d2>
    8000e37a:	ff7fd06f          	j	8000c370 <tinst_tests_gpf+0x10c4>
    8000e37e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e380:	0016f713          	andi	a4,a3,1
    8000e384:	92071163          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e388:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e38c:	460d                	li	a2,3
    8000e38e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e392:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e394:	00c59763          	bne	a1,a2,8000e3a2 <tinst_tests_gpf+0x30f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e398:	0026d683          	lhu	a3,2(a3)
    8000e39c:	0106969b          	slliw	a3,a3,0x10
    8000e3a0:	8f55                	or	a4,a4,a3
    8000e3a2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3a6:	068e                	slli	a3,a3,0x3
    8000e3a8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3aa:	8f75                	and	a4,a4,a3
    8000e3ac:	40f704b3          	sub	s1,a4,a5
    8000e3b0:	0014b493          	seqz	s1,s1
    8000e3b4:	fbdfd06f          	j	8000c370 <tinst_tests_gpf+0x10c4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e3b8:	701c                	ld	a5,32(s0)
    8000e3ba:	e399                	bnez	a5,8000e3c0 <tinst_tests_gpf+0x3114>
    8000e3bc:	856fe06f          	j	8000c412 <tinst_tests_gpf+0x1166>
    8000e3c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3c2:	0016f713          	andi	a4,a3,1
    8000e3c6:	8e071063          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3ce:	460d                	li	a2,3
    8000e3d0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3d6:	00c59763          	bne	a1,a2,8000e3e4 <tinst_tests_gpf+0x3138>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3da:	0026d683          	lhu	a3,2(a3)
    8000e3de:	0106969b          	slliw	a3,a3,0x10
    8000e3e2:	8f55                	or	a4,a4,a3
    8000e3e4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3e8:	068e                	slli	a3,a3,0x3
    8000e3ea:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3ec:	8f75                	and	a4,a4,a3
    8000e3ee:	40f704b3          	sub	s1,a4,a5
    8000e3f2:	0014b493          	seqz	s1,s1
    8000e3f6:	81cfe06f          	j	8000c412 <tinst_tests_gpf+0x1166>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e3fa:	701c                	ld	a5,32(s0)
    8000e3fc:	e399                	bnez	a5,8000e402 <tinst_tests_gpf+0x3156>
    8000e3fe:	8b6fe06f          	j	8000c4b4 <tinst_tests_gpf+0x1208>
    8000e402:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e404:	0016f713          	andi	a4,a3,1
    8000e408:	88071f63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e40c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e410:	460d                	li	a2,3
    8000e412:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e416:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e418:	00c59763          	bne	a1,a2,8000e426 <tinst_tests_gpf+0x317a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e41c:	0026d683          	lhu	a3,2(a3)
    8000e420:	0106969b          	slliw	a3,a3,0x10
    8000e424:	8f55                	or	a4,a4,a3
    8000e426:	1ffe16b7          	lui	a3,0x1ffe1
    8000e42a:	068e                	slli	a3,a3,0x3
    8000e42c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e42e:	8f75                	and	a4,a4,a3
    8000e430:	40f704b3          	sub	s1,a4,a5
    8000e434:	0014b493          	seqz	s1,s1
    8000e438:	87cfe06f          	j	8000c4b4 <tinst_tests_gpf+0x1208>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e43c:	701c                	ld	a5,32(s0)
    8000e43e:	e399                	bnez	a5,8000e444 <tinst_tests_gpf+0x3198>
    8000e440:	916fe06f          	j	8000c556 <tinst_tests_gpf+0x12aa>
    8000e444:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e446:	0016f713          	andi	a4,a3,1
    8000e44a:	84071e63          	bnez	a4,8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e44e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e452:	460d                	li	a2,3
    8000e454:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e458:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e45a:	00c59763          	bne	a1,a2,8000e468 <tinst_tests_gpf+0x31bc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e45e:	0026d683          	lhu	a3,2(a3)
    8000e462:	0106969b          	slliw	a3,a3,0x10
    8000e466:	8f55                	or	a4,a4,a3
    8000e468:	1ffe16b7          	lui	a3,0x1ffe1
    8000e46c:	068e                	slli	a3,a3,0x3
    8000e46e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e470:	8f75                	and	a4,a4,a3
    8000e472:	40f704b3          	sub	s1,a4,a5
    8000e476:	0014b493          	seqz	s1,s1
    8000e47a:	8dcfe06f          	j	8000c556 <tinst_tests_gpf+0x12aa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e47e:	701c                	ld	a5,32(s0)
    8000e480:	e399                	bnez	a5,8000e486 <tinst_tests_gpf+0x31da>
    8000e482:	976fe06f          	j	8000c5f8 <tinst_tests_gpf+0x134c>
    8000e486:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e488:	0016f713          	andi	a4,a3,1
    8000e48c:	c319                	beqz	a4,8000e492 <tinst_tests_gpf+0x31e6>
    8000e48e:	818ff06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e492:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e496:	460d                	li	a2,3
    8000e498:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e49c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e49e:	00c59763          	bne	a1,a2,8000e4ac <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4a2:	0026d683          	lhu	a3,2(a3)
    8000e4a6:	0106969b          	slliw	a3,a3,0x10
    8000e4aa:	8f55                	or	a4,a4,a3
    8000e4ac:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4b0:	068e                	slli	a3,a3,0x3
    8000e4b2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4b4:	8f75                	and	a4,a4,a3
    8000e4b6:	40f704b3          	sub	s1,a4,a5
    8000e4ba:	0014b493          	seqz	s1,s1
    8000e4be:	93afe06f          	j	8000c5f8 <tinst_tests_gpf+0x134c>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e4c2:	701c                	ld	a5,32(s0)
    8000e4c4:	e399                	bnez	a5,8000e4ca <tinst_tests_gpf+0x321e>
    8000e4c6:	9d4fe06f          	j	8000c69a <tinst_tests_gpf+0x13ee>
    8000e4ca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4cc:	0016f713          	andi	a4,a3,1
    8000e4d0:	c319                	beqz	a4,8000e4d6 <tinst_tests_gpf+0x322a>
    8000e4d2:	fd5fe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4d6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4da:	460d                	li	a2,3
    8000e4dc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4e0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4e2:	00c59763          	bne	a1,a2,8000e4f0 <tinst_tests_gpf+0x3244>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4e6:	0026d683          	lhu	a3,2(a3)
    8000e4ea:	0106969b          	slliw	a3,a3,0x10
    8000e4ee:	8f55                	or	a4,a4,a3
    8000e4f0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4f4:	068e                	slli	a3,a3,0x3
    8000e4f6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4f8:	8f75                	and	a4,a4,a3
    8000e4fa:	40f704b3          	sub	s1,a4,a5
    8000e4fe:	0014b493          	seqz	s1,s1
    8000e502:	998fe06f          	j	8000c69a <tinst_tests_gpf+0x13ee>
    8000e506:	701c                	ld	a5,32(s0)
    8000e508:	e399                	bnez	a5,8000e50e <tinst_tests_gpf+0x3262>
    8000e50a:	970fe06f          	j	8000c67a <tinst_tests_gpf+0x13ce>
    8000e50e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e510:	0016f713          	andi	a4,a3,1
    8000e514:	c319                	beqz	a4,8000e51a <tinst_tests_gpf+0x326e>
    8000e516:	f91fe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e51a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e51e:	460d                	li	a2,3
    8000e520:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e524:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e526:	00c59763          	bne	a1,a2,8000e534 <tinst_tests_gpf+0x3288>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e52a:	0026d683          	lhu	a3,2(a3)
    8000e52e:	0106969b          	slliw	a3,a3,0x10
    8000e532:	8f55                	or	a4,a4,a3
    8000e534:	1ffe16b7          	lui	a3,0x1ffe1
    8000e538:	068e                	slli	a3,a3,0x3
    8000e53a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e53c:	8f75                	and	a4,a4,a3
    8000e53e:	00e78463          	beq	a5,a4,8000e546 <tinst_tests_gpf+0x329a>
    8000e542:	924fe06f          	j	8000c666 <tinst_tests_gpf+0x13ba>
    8000e546:	934fe06f          	j	8000c67a <tinst_tests_gpf+0x13ce>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e54a:	701c                	ld	a5,32(s0)
    8000e54c:	e399                	bnez	a5,8000e552 <tinst_tests_gpf+0x32a6>
    8000e54e:	9cefe06f          	j	8000c71c <tinst_tests_gpf+0x1470>
    8000e552:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e554:	0016f713          	andi	a4,a3,1
    8000e558:	c319                	beqz	a4,8000e55e <tinst_tests_gpf+0x32b2>
    8000e55a:	f4dfe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e55e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e562:	460d                	li	a2,3
    8000e564:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e568:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e56a:	00c59763          	bne	a1,a2,8000e578 <tinst_tests_gpf+0x32cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e56e:	0026d683          	lhu	a3,2(a3)
    8000e572:	0106969b          	slliw	a3,a3,0x10
    8000e576:	8f55                	or	a4,a4,a3
    8000e578:	1ffe16b7          	lui	a3,0x1ffe1
    8000e57c:	068e                	slli	a3,a3,0x3
    8000e57e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e580:	8f75                	and	a4,a4,a3
    8000e582:	00e78463          	beq	a5,a4,8000e58a <tinst_tests_gpf+0x32de>
    8000e586:	982fe06f          	j	8000c708 <tinst_tests_gpf+0x145c>
    8000e58a:	992fe06f          	j	8000c71c <tinst_tests_gpf+0x1470>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e58e:	701c                	ld	a5,32(s0)
    8000e590:	e399                	bnez	a5,8000e596 <tinst_tests_gpf+0x32ea>
    8000e592:	a24fe06f          	j	8000c7b6 <tinst_tests_gpf+0x150a>
    8000e596:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e598:	0016f713          	andi	a4,a3,1
    8000e59c:	c319                	beqz	a4,8000e5a2 <tinst_tests_gpf+0x32f6>
    8000e59e:	f09fe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e5a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5a6:	460d                	li	a2,3
    8000e5a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5ae:	00c59763          	bne	a1,a2,8000e5bc <tinst_tests_gpf+0x3310>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5b2:	0026d683          	lhu	a3,2(a3)
    8000e5b6:	0106969b          	slliw	a3,a3,0x10
    8000e5ba:	8f55                	or	a4,a4,a3
    8000e5bc:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5c0:	068e                	slli	a3,a3,0x3
    8000e5c2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5c4:	8f75                	and	a4,a4,a3
    8000e5c6:	00e78463          	beq	a5,a4,8000e5ce <tinst_tests_gpf+0x3322>
    8000e5ca:	9d8fe06f          	j	8000c7a2 <tinst_tests_gpf+0x14f6>
    8000e5ce:	9e8fe06f          	j	8000c7b6 <tinst_tests_gpf+0x150a>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e5d2:	701c                	ld	a5,32(s0)
    8000e5d4:	e399                	bnez	a5,8000e5da <tinst_tests_gpf+0x332e>
    8000e5d6:	a7afe06f          	j	8000c850 <tinst_tests_gpf+0x15a4>
    8000e5da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5dc:	0016f713          	andi	a4,a3,1
    8000e5e0:	c319                	beqz	a4,8000e5e6 <tinst_tests_gpf+0x333a>
    8000e5e2:	ec5fe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e5e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5ea:	460d                	li	a2,3
    8000e5ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5f2:	00c59763          	bne	a1,a2,8000e600 <tinst_tests_gpf+0x3354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5f6:	0026d683          	lhu	a3,2(a3)
    8000e5fa:	0106969b          	slliw	a3,a3,0x10
    8000e5fe:	8f55                	or	a4,a4,a3
    8000e600:	1ffe16b7          	lui	a3,0x1ffe1
    8000e604:	068e                	slli	a3,a3,0x3
    8000e606:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e608:	8f75                	and	a4,a4,a3
    8000e60a:	00e78463          	beq	a5,a4,8000e612 <tinst_tests_gpf+0x3366>
    8000e60e:	a2efe06f          	j	8000c83c <tinst_tests_gpf+0x1590>
    8000e612:	a3efe06f          	j	8000c850 <tinst_tests_gpf+0x15a4>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e616:	701c                	ld	a5,32(s0)
    8000e618:	e399                	bnez	a5,8000e61e <tinst_tests_gpf+0x3372>
    8000e61a:	ad0fe06f          	j	8000c8ea <tinst_tests_gpf+0x163e>
    8000e61e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e620:	0016f713          	andi	a4,a3,1
    8000e624:	c319                	beqz	a4,8000e62a <tinst_tests_gpf+0x337e>
    8000e626:	e81fe06f          	j	8000d4a6 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e62a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e62e:	460d                	li	a2,3
    8000e630:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e634:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e636:	00c59763          	bne	a1,a2,8000e644 <tinst_tests_gpf+0x3398>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e63a:	0026d683          	lhu	a3,2(a3)
    8000e63e:	0106969b          	slliw	a3,a3,0x10
    8000e642:	8f55                	or	a4,a4,a3
    8000e644:	1ffe16b7          	lui	a3,0x1ffe1
    8000e648:	068e                	slli	a3,a3,0x3
    8000e64a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e64c:	8f75                	and	a4,a4,a3
    8000e64e:	00e78463          	beq	a5,a4,8000e656 <tinst_tests_gpf+0x33aa>
    8000e652:	a84fe06f          	j	8000c8d6 <tinst_tests_gpf+0x162a>
    8000e656:	a94fe06f          	j	8000c8ea <tinst_tests_gpf+0x163e>

000000008000e65a <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000e65a:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e65c:	0001e597          	auipc	a1,0x1e
    8000e660:	10c58593          	addi	a1,a1,268 # 8002c768 <__func__.16>
    8000e664:	00020517          	auipc	a0,0x20
    8000e668:	b6450513          	addi	a0,a0,-1180 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_1(){
    8000e66c:	ec06                	sd	ra,24(sp)
    8000e66e:	e822                	sd	s0,16(sp)
    8000e670:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e672:	5b91c0ef          	jal	8002b42a <printf>
    8000e676:	4529                	li	a0,10
    8000e678:	2a11b0ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    8000e67c:	450d                	li	a0,3
    8000e67e:	88bf20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e682:	f5ff10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e686:	b3ef20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e68a:	8f2f20ef          	jal	8000077c <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000e68e:	4511                	li	a0,4
    8000e690:	879f20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000e694:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000e698:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e69c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000e6a0:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000e6a4:	4509                	li	a0,2
    8000e6a6:	863f20ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e6aa:	f62f20ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000e6ae:	400197b7          	lui	a5,0x40019
    8000e6b2:	078a                	slli	a5,a5,0x2
    8000e6b4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6b8:	08200593          	li	a1,130
    8000e6bc:	00022617          	auipc	a2,0x22
    8000e6c0:	60460613          	addi	a2,a2,1540 # 80030cc0 <__func__.0+0x2dd8>
    8000e6c4:	00020517          	auipc	a0,0x20
    8000e6c8:	b1c50513          	addi	a0,a0,-1252 # 8002e1e0 <__func__.0+0x2f8>
    8000e6cc:	55f1c0ef          	jal	8002b42a <printf>
    8000e6d0:	0004a797          	auipc	a5,0x4a
    8000e6d4:	9417c783          	lbu	a5,-1727(a5) # 80058011 <excpt+0x1>
    8000e6d8:	0004a497          	auipc	s1,0x4a
    8000e6dc:	93848493          	addi	s1,s1,-1736 # 80058010 <excpt>
    8000e6e0:	00020597          	auipc	a1,0x20
    8000e6e4:	ad858593          	addi	a1,a1,-1320 # 8002e1b8 <__func__.0+0x2d0>
    8000e6e8:	c789                	beqz	a5,8000e6f2 <priv_change_1+0x98>
    8000e6ea:	6498                	ld	a4,8(s1)
    8000e6ec:	47b5                	li	a5,13
    8000e6ee:	0cf70463          	beq	a4,a5,8000e7b6 <priv_change_1+0x15c>
    8000e6f2:	00020517          	auipc	a0,0x20
    8000e6f6:	b0650513          	addi	a0,a0,-1274 # 8002e1f8 <__func__.0+0x310>
    8000e6fa:	5311c0ef          	jal	8002b42a <printf>
    8000e6fe:	0004a797          	auipc	a5,0x4a
    8000e702:	9137c783          	lbu	a5,-1773(a5) # 80058011 <excpt+0x1>
    8000e706:	c789                	beqz	a5,8000e710 <priv_change_1+0xb6>
    8000e708:	6498                	ld	a4,8(s1)
    8000e70a:	47b5                	li	a5,13
    8000e70c:	04f70e63          	beq	a4,a5,8000e768 <priv_change_1+0x10e>
    8000e710:	00020517          	auipc	a0,0x20
    8000e714:	af050513          	addi	a0,a0,-1296 # 8002e200 <__func__.0+0x318>
    8000e718:	5131c0ef          	jal	8002b42a <printf>
    8000e71c:	02900513          	li	a0,41
    8000e720:	1f91b0ef          	jal	8002a118 <putchar>
    8000e724:	4529                	li	a0,10
    8000e726:	1f31b0ef          	jal	8002a118 <putchar>
    8000e72a:	0004a417          	auipc	s0,0x4a
    8000e72e:	8e744403          	lbu	s0,-1817(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000e732:	00020597          	auipc	a1,0x20
    8000e736:	a8658593          	addi	a1,a1,-1402 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e73a:	c411                	beqz	s0,8000e746 <priv_change_1+0xec>
    8000e73c:	6498                	ld	a4,8(s1)
    8000e73e:	47b5                	li	a5,13
    8000e740:	04f70363          	beq	a4,a5,8000e786 <priv_change_1+0x12c>
    8000e744:	4401                	li	s0,0
    TEST_END();
    8000e746:	00020517          	auipc	a0,0x20
    8000e74a:	b1a50513          	addi	a0,a0,-1254 # 8002e260 <__func__.0+0x378>
    8000e74e:	4dd1c0ef          	jal	8002b42a <printf>
    8000e752:	4511                	li	a0,4
    8000e754:	fb4f20ef          	jal	80000f08 <goto_priv>
    8000e758:	8ccf30ef          	jal	80001824 <reset_state>
}
    8000e75c:	60e2                	ld	ra,24(sp)
    8000e75e:	8522                	mv	a0,s0
    8000e760:	6442                	ld	s0,16(sp)
    8000e762:	64a2                	ld	s1,8(sp)
    8000e764:	6105                	addi	sp,sp,32
    8000e766:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e768:	0004a717          	auipc	a4,0x4a
    8000e76c:	8ac72703          	lw	a4,-1876(a4) # 80058014 <excpt+0x4>
    8000e770:	4791                	li	a5,4
    8000e772:	f8f71fe3          	bne	a4,a5,8000e710 <priv_change_1+0xb6>
    8000e776:	0002d717          	auipc	a4,0x2d
    8000e77a:	0ae72703          	lw	a4,174(a4) # 8003b824 <curr_priv>
    8000e77e:	4789                	li	a5,2
    8000e780:	f8f718e3          	bne	a4,a5,8000e710 <priv_change_1+0xb6>
    8000e784:	b745                	j	8000e724 <priv_change_1+0xca>
    8000e786:	0004a717          	auipc	a4,0x4a
    8000e78a:	88e72703          	lw	a4,-1906(a4) # 80058014 <excpt+0x4>
    8000e78e:	4791                	li	a5,4
    8000e790:	faf71ae3          	bne	a4,a5,8000e744 <priv_change_1+0xea>
    8000e794:	0002d717          	auipc	a4,0x2d
    8000e798:	09072703          	lw	a4,144(a4) # 8003b824 <curr_priv>
    8000e79c:	4789                	li	a5,2
    TEST_END();
    8000e79e:	00020597          	auipc	a1,0x20
    8000e7a2:	a0a58593          	addi	a1,a1,-1526 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e7a6:	faf700e3          	beq	a4,a5,8000e746 <priv_change_1+0xec>
    8000e7aa:	4401                	li	s0,0
    TEST_END();
    8000e7ac:	00020597          	auipc	a1,0x20
    8000e7b0:	a0c58593          	addi	a1,a1,-1524 # 8002e1b8 <__func__.0+0x2d0>
    8000e7b4:	bf49                	j	8000e746 <priv_change_1+0xec>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e7b6:	0004a717          	auipc	a4,0x4a
    8000e7ba:	85e72703          	lw	a4,-1954(a4) # 80058014 <excpt+0x4>
    8000e7be:	4791                	li	a5,4
    8000e7c0:	f2f719e3          	bne	a4,a5,8000e6f2 <priv_change_1+0x98>
    8000e7c4:	0002d717          	auipc	a4,0x2d
    8000e7c8:	06072703          	lw	a4,96(a4) # 8003b824 <curr_priv>
    8000e7cc:	4789                	li	a5,2
    8000e7ce:	00020597          	auipc	a1,0x20
    8000e7d2:	9da58593          	addi	a1,a1,-1574 # 8002e1a8 <__func__.0+0x2c0>
    8000e7d6:	f0f70ee3          	beq	a4,a5,8000e6f2 <priv_change_1+0x98>
    8000e7da:	00020597          	auipc	a1,0x20
    8000e7de:	9de58593          	addi	a1,a1,-1570 # 8002e1b8 <__func__.0+0x2d0>
    8000e7e2:	bf01                	j	8000e6f2 <priv_change_1+0x98>

000000008000e7e4 <priv_change_2>:

bool priv_change_2(){
    8000e7e4:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e7e6:	0001e597          	auipc	a1,0x1e
    8000e7ea:	f9258593          	addi	a1,a1,-110 # 8002c778 <__func__.14>
    8000e7ee:	00020517          	auipc	a0,0x20
    8000e7f2:	9da50513          	addi	a0,a0,-1574 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_2(){
    8000e7f6:	ec06                	sd	ra,24(sp)
    8000e7f8:	e822                	sd	s0,16(sp)
    8000e7fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e7fc:	42f1c0ef          	jal	8002b42a <printf>
    8000e800:	4529                	li	a0,10
    8000e802:	1171b0ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    8000e806:	450d                	li	a0,3
    8000e808:	f00f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e80c:	dd5f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e810:	9b4f20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e814:	f69f10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000e818:	4511                	li	a0,4
    8000e81a:	eeef20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000e81e:	6789                	lui	a5,0x2
    8000e820:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000e824:	4509                	li	a0,2
    8000e826:	ee2f20ef          	jal	80000f08 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000e82a:	de2f20ef          	jal	80000e0c <test_setup_except_function>
    8000e82e:	400197b7          	lui	a5,0x40019
    8000e832:	078a                	slli	a5,a5,0x2
    8000e834:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e838:	08200593          	li	a1,130
    8000e83c:	00022617          	auipc	a2,0x22
    8000e840:	4f460613          	addi	a2,a2,1268 # 80030d30 <__func__.0+0x2e48>
    8000e844:	00020517          	auipc	a0,0x20
    8000e848:	99c50513          	addi	a0,a0,-1636 # 8002e1e0 <__func__.0+0x2f8>
    8000e84c:	3df1c0ef          	jal	8002b42a <printf>
    8000e850:	00049797          	auipc	a5,0x49
    8000e854:	7c17c783          	lbu	a5,1985(a5) # 80058011 <excpt+0x1>
    8000e858:	00049497          	auipc	s1,0x49
    8000e85c:	7b848493          	addi	s1,s1,1976 # 80058010 <excpt>
    8000e860:	00020597          	auipc	a1,0x20
    8000e864:	95858593          	addi	a1,a1,-1704 # 8002e1b8 <__func__.0+0x2d0>
    8000e868:	c789                	beqz	a5,8000e872 <priv_change_2+0x8e>
    8000e86a:	6498                	ld	a4,8(s1)
    8000e86c:	47b5                	li	a5,13
    8000e86e:	0cf70463          	beq	a4,a5,8000e936 <priv_change_2+0x152>
    8000e872:	00020517          	auipc	a0,0x20
    8000e876:	98650513          	addi	a0,a0,-1658 # 8002e1f8 <__func__.0+0x310>
    8000e87a:	3b11c0ef          	jal	8002b42a <printf>
    8000e87e:	00049797          	auipc	a5,0x49
    8000e882:	7937c783          	lbu	a5,1939(a5) # 80058011 <excpt+0x1>
    8000e886:	c789                	beqz	a5,8000e890 <priv_change_2+0xac>
    8000e888:	6498                	ld	a4,8(s1)
    8000e88a:	47b5                	li	a5,13
    8000e88c:	04f70e63          	beq	a4,a5,8000e8e8 <priv_change_2+0x104>
    8000e890:	00020517          	auipc	a0,0x20
    8000e894:	97050513          	addi	a0,a0,-1680 # 8002e200 <__func__.0+0x318>
    8000e898:	3931c0ef          	jal	8002b42a <printf>
    8000e89c:	02900513          	li	a0,41
    8000e8a0:	0791b0ef          	jal	8002a118 <putchar>
    8000e8a4:	4529                	li	a0,10
    8000e8a6:	0731b0ef          	jal	8002a118 <putchar>
    8000e8aa:	00049417          	auipc	s0,0x49
    8000e8ae:	76744403          	lbu	s0,1895(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000e8b2:	00020597          	auipc	a1,0x20
    8000e8b6:	90658593          	addi	a1,a1,-1786 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e8ba:	c411                	beqz	s0,8000e8c6 <priv_change_2+0xe2>
    8000e8bc:	6498                	ld	a4,8(s1)
    8000e8be:	47b5                	li	a5,13
    8000e8c0:	04f70363          	beq	a4,a5,8000e906 <priv_change_2+0x122>
    8000e8c4:	4401                	li	s0,0
    TEST_END();
    8000e8c6:	00020517          	auipc	a0,0x20
    8000e8ca:	99a50513          	addi	a0,a0,-1638 # 8002e260 <__func__.0+0x378>
    8000e8ce:	35d1c0ef          	jal	8002b42a <printf>
    8000e8d2:	4511                	li	a0,4
    8000e8d4:	e34f20ef          	jal	80000f08 <goto_priv>
    8000e8d8:	f4df20ef          	jal	80001824 <reset_state>
}
    8000e8dc:	60e2                	ld	ra,24(sp)
    8000e8de:	8522                	mv	a0,s0
    8000e8e0:	6442                	ld	s0,16(sp)
    8000e8e2:	64a2                	ld	s1,8(sp)
    8000e8e4:	6105                	addi	sp,sp,32
    8000e8e6:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e8e8:	00049717          	auipc	a4,0x49
    8000e8ec:	72c72703          	lw	a4,1836(a4) # 80058014 <excpt+0x4>
    8000e8f0:	4791                	li	a5,4
    8000e8f2:	f8f71fe3          	bne	a4,a5,8000e890 <priv_change_2+0xac>
    8000e8f6:	0002d717          	auipc	a4,0x2d
    8000e8fa:	f2e72703          	lw	a4,-210(a4) # 8003b824 <curr_priv>
    8000e8fe:	4789                	li	a5,2
    8000e900:	f8f718e3          	bne	a4,a5,8000e890 <priv_change_2+0xac>
    8000e904:	b745                	j	8000e8a4 <priv_change_2+0xc0>
    8000e906:	00049717          	auipc	a4,0x49
    8000e90a:	70e72703          	lw	a4,1806(a4) # 80058014 <excpt+0x4>
    8000e90e:	4791                	li	a5,4
    8000e910:	faf71ae3          	bne	a4,a5,8000e8c4 <priv_change_2+0xe0>
    8000e914:	0002d717          	auipc	a4,0x2d
    8000e918:	f1072703          	lw	a4,-240(a4) # 8003b824 <curr_priv>
    8000e91c:	4789                	li	a5,2
    TEST_END();
    8000e91e:	00020597          	auipc	a1,0x20
    8000e922:	88a58593          	addi	a1,a1,-1910 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e926:	faf700e3          	beq	a4,a5,8000e8c6 <priv_change_2+0xe2>
    8000e92a:	4401                	li	s0,0
    TEST_END();
    8000e92c:	00020597          	auipc	a1,0x20
    8000e930:	88c58593          	addi	a1,a1,-1908 # 8002e1b8 <__func__.0+0x2d0>
    8000e934:	bf49                	j	8000e8c6 <priv_change_2+0xe2>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e936:	00049717          	auipc	a4,0x49
    8000e93a:	6de72703          	lw	a4,1758(a4) # 80058014 <excpt+0x4>
    8000e93e:	4791                	li	a5,4
    8000e940:	f2f719e3          	bne	a4,a5,8000e872 <priv_change_2+0x8e>
    8000e944:	0002d717          	auipc	a4,0x2d
    8000e948:	ee072703          	lw	a4,-288(a4) # 8003b824 <curr_priv>
    8000e94c:	4789                	li	a5,2
    8000e94e:	00020597          	auipc	a1,0x20
    8000e952:	85a58593          	addi	a1,a1,-1958 # 8002e1a8 <__func__.0+0x2c0>
    8000e956:	f0f70ee3          	beq	a4,a5,8000e872 <priv_change_2+0x8e>
    8000e95a:	00020597          	auipc	a1,0x20
    8000e95e:	85e58593          	addi	a1,a1,-1954 # 8002e1b8 <__func__.0+0x2d0>
    8000e962:	bf01                	j	8000e872 <priv_change_2+0x8e>

000000008000e964 <priv_change_3>:


bool priv_change_3(){
    8000e964:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000e966:	0001e597          	auipc	a1,0x1e
    8000e96a:	e2258593          	addi	a1,a1,-478 # 8002c788 <__func__.13>
    8000e96e:	00020517          	auipc	a0,0x20
    8000e972:	85a50513          	addi	a0,a0,-1958 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_3(){
    8000e976:	e406                	sd	ra,8(sp)
    8000e978:	e022                	sd	s0,0(sp)
    TEST_START();
    8000e97a:	2b11c0ef          	jal	8002b42a <printf>
    8000e97e:	4529                	li	a0,10
    8000e980:	7981b0ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    8000e984:	450d                	li	a0,3
    8000e986:	d82f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e98a:	c57f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e98e:	836f20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e992:	debf10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000e996:	c76f20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8000e99a:	4511                	li	a0,4
    8000e99c:	d6cf20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000e9a0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000e9a4:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000e9a8:	450d                	li	a0,3
    8000e9aa:	d5ef20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e9ae:	c5ef20ef          	jal	80000e0c <test_setup_except_function>
    8000e9b2:	400197b7          	lui	a5,0x40019
    8000e9b6:	078a                	slli	a5,a5,0x2
    8000e9b8:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9bc:	08200593          	li	a1,130
    8000e9c0:	00022617          	auipc	a2,0x22
    8000e9c4:	3b060613          	addi	a2,a2,944 # 80030d70 <__func__.0+0x2e88>
    8000e9c8:	00020517          	auipc	a0,0x20
    8000e9cc:	81850513          	addi	a0,a0,-2024 # 8002e1e0 <__func__.0+0x2f8>
    8000e9d0:	25b1c0ef          	jal	8002b42a <printf>
    8000e9d4:	00049797          	auipc	a5,0x49
    8000e9d8:	63d7c783          	lbu	a5,1597(a5) # 80058011 <excpt+0x1>
    8000e9dc:	0001f597          	auipc	a1,0x1f
    8000e9e0:	7dc58593          	addi	a1,a1,2012 # 8002e1b8 <__func__.0+0x2d0>
    8000e9e4:	cb81                	beqz	a5,8000e9f4 <priv_change_3+0x90>
    8000e9e6:	0002d717          	auipc	a4,0x2d
    8000e9ea:	e3e72703          	lw	a4,-450(a4) # 8003b824 <curr_priv>
    8000e9ee:	478d                	li	a5,3
    8000e9f0:	0af70b63          	beq	a4,a5,8000eaa6 <priv_change_3+0x142>
    8000e9f4:	00020517          	auipc	a0,0x20
    8000e9f8:	80450513          	addi	a0,a0,-2044 # 8002e1f8 <__func__.0+0x310>
    8000e9fc:	22f1c0ef          	jal	8002b42a <printf>
    8000ea00:	00049797          	auipc	a5,0x49
    8000ea04:	6117c783          	lbu	a5,1553(a5) # 80058011 <excpt+0x1>
    8000ea08:	cb81                	beqz	a5,8000ea18 <priv_change_3+0xb4>
    8000ea0a:	0002d717          	auipc	a4,0x2d
    8000ea0e:	e1a72703          	lw	a4,-486(a4) # 8003b824 <curr_priv>
    8000ea12:	478d                	li	a5,3
    8000ea14:	06f70063          	beq	a4,a5,8000ea74 <priv_change_3+0x110>
    8000ea18:	0001f517          	auipc	a0,0x1f
    8000ea1c:	7e850513          	addi	a0,a0,2024 # 8002e200 <__func__.0+0x318>
    8000ea20:	20b1c0ef          	jal	8002b42a <printf>
    8000ea24:	02900513          	li	a0,41
    8000ea28:	6f01b0ef          	jal	8002a118 <putchar>
    8000ea2c:	4529                	li	a0,10
    8000ea2e:	6ea1b0ef          	jal	8002a118 <putchar>
    8000ea32:	00049417          	auipc	s0,0x49
    8000ea36:	5df44403          	lbu	s0,1503(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000ea3a:	0001f597          	auipc	a1,0x1f
    8000ea3e:	77e58593          	addi	a1,a1,1918 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea42:	c809                	beqz	s0,8000ea54 <priv_change_3+0xf0>
    8000ea44:	0002d717          	auipc	a4,0x2d
    8000ea48:	de072703          	lw	a4,-544(a4) # 8003b824 <curr_priv>
    8000ea4c:	478d                	li	a5,3
    8000ea4e:	02f70b63          	beq	a4,a5,8000ea84 <priv_change_3+0x120>
    8000ea52:	4401                	li	s0,0
    TEST_END();
    8000ea54:	00020517          	auipc	a0,0x20
    8000ea58:	80c50513          	addi	a0,a0,-2036 # 8002e260 <__func__.0+0x378>
    8000ea5c:	1cf1c0ef          	jal	8002b42a <printf>
    8000ea60:	4511                	li	a0,4
    8000ea62:	ca6f20ef          	jal	80000f08 <goto_priv>
    8000ea66:	dbff20ef          	jal	80001824 <reset_state>
}
    8000ea6a:	60a2                	ld	ra,8(sp)
    8000ea6c:	8522                	mv	a0,s0
    8000ea6e:	6402                	ld	s0,0(sp)
    8000ea70:	0141                	addi	sp,sp,16
    8000ea72:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea74:	00049717          	auipc	a4,0x49
    8000ea78:	5a072703          	lw	a4,1440(a4) # 80058014 <excpt+0x4>
    8000ea7c:	4791                	li	a5,4
    8000ea7e:	f8f71de3          	bne	a4,a5,8000ea18 <priv_change_3+0xb4>
    8000ea82:	b76d                	j	8000ea2c <priv_change_3+0xc8>
    8000ea84:	00049717          	auipc	a4,0x49
    8000ea88:	59072703          	lw	a4,1424(a4) # 80058014 <excpt+0x4>
    8000ea8c:	4791                	li	a5,4
    TEST_END();
    8000ea8e:	0001f597          	auipc	a1,0x1f
    8000ea92:	71a58593          	addi	a1,a1,1818 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea96:	faf70fe3          	beq	a4,a5,8000ea54 <priv_change_3+0xf0>
    8000ea9a:	4401                	li	s0,0
    TEST_END();
    8000ea9c:	0001f597          	auipc	a1,0x1f
    8000eaa0:	71c58593          	addi	a1,a1,1820 # 8002e1b8 <__func__.0+0x2d0>
    8000eaa4:	bf45                	j	8000ea54 <priv_change_3+0xf0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eaa6:	00049717          	auipc	a4,0x49
    8000eaaa:	56e72703          	lw	a4,1390(a4) # 80058014 <excpt+0x4>
    8000eaae:	4791                	li	a5,4
    8000eab0:	0001f597          	auipc	a1,0x1f
    8000eab4:	6f858593          	addi	a1,a1,1784 # 8002e1a8 <__func__.0+0x2c0>
    8000eab8:	f2f70ee3          	beq	a4,a5,8000e9f4 <priv_change_3+0x90>
    8000eabc:	0001f597          	auipc	a1,0x1f
    8000eac0:	6fc58593          	addi	a1,a1,1788 # 8002e1b8 <__func__.0+0x2d0>
    8000eac4:	bf05                	j	8000e9f4 <priv_change_3+0x90>

000000008000eac6 <priv_change_4>:

bool priv_change_4(){
    8000eac6:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000eac8:	0001e597          	auipc	a1,0x1e
    8000eacc:	cd058593          	addi	a1,a1,-816 # 8002c798 <__func__.12>
    8000ead0:	0001f517          	auipc	a0,0x1f
    8000ead4:	6f850513          	addi	a0,a0,1784 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_4(){
    8000ead8:	ec06                	sd	ra,24(sp)
    8000eada:	e822                	sd	s0,16(sp)
    8000eadc:	e426                	sd	s1,8(sp)
    TEST_START();
    8000eade:	14d1c0ef          	jal	8002b42a <printf>
    8000eae2:	4529                	li	a0,10
    8000eae4:	6341b0ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    8000eae8:	450d                	li	a0,3
    8000eaea:	c1ef20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000eaee:	af3f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000eaf2:	ed3f10ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000eaf6:	c87f10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000eafa:	4511                	li	a0,4
    8000eafc:	c0cf20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000eb00:	6789                	lui	a5,0x2
    8000eb02:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000eb06:	450d                	li	a0,3
    8000eb08:	c00f20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000eb0c:	b00f20ef          	jal	80000e0c <test_setup_except_function>
    8000eb10:	400197b7          	lui	a5,0x40019
    8000eb14:	078a                	slli	a5,a5,0x2
    8000eb16:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb1a:	08200593          	li	a1,130
    8000eb1e:	00022617          	auipc	a2,0x22
    8000eb22:	2c260613          	addi	a2,a2,706 # 80030de0 <__func__.0+0x2ef8>
    8000eb26:	0001f517          	auipc	a0,0x1f
    8000eb2a:	6ba50513          	addi	a0,a0,1722 # 8002e1e0 <__func__.0+0x2f8>
    8000eb2e:	0fd1c0ef          	jal	8002b42a <printf>
    8000eb32:	00049797          	auipc	a5,0x49
    8000eb36:	4df7c783          	lbu	a5,1247(a5) # 80058011 <excpt+0x1>
    8000eb3a:	00049497          	auipc	s1,0x49
    8000eb3e:	4d648493          	addi	s1,s1,1238 # 80058010 <excpt>
    8000eb42:	0001f597          	auipc	a1,0x1f
    8000eb46:	67658593          	addi	a1,a1,1654 # 8002e1b8 <__func__.0+0x2d0>
    8000eb4a:	c789                	beqz	a5,8000eb54 <priv_change_4+0x8e>
    8000eb4c:	6498                	ld	a4,8(s1)
    8000eb4e:	47b5                	li	a5,13
    8000eb50:	0af70663          	beq	a4,a5,8000ebfc <priv_change_4+0x136>
    8000eb54:	0001f517          	auipc	a0,0x1f
    8000eb58:	6a450513          	addi	a0,a0,1700 # 8002e1f8 <__func__.0+0x310>
    8000eb5c:	0cf1c0ef          	jal	8002b42a <printf>
    8000eb60:	00049797          	auipc	a5,0x49
    8000eb64:	4b17c783          	lbu	a5,1201(a5) # 80058011 <excpt+0x1>
    8000eb68:	c789                	beqz	a5,8000eb72 <priv_change_4+0xac>
    8000eb6a:	6498                	ld	a4,8(s1)
    8000eb6c:	47b5                	li	a5,13
    8000eb6e:	04f70e63          	beq	a4,a5,8000ebca <priv_change_4+0x104>
    8000eb72:	0001f517          	auipc	a0,0x1f
    8000eb76:	68e50513          	addi	a0,a0,1678 # 8002e200 <__func__.0+0x318>
    8000eb7a:	0b11c0ef          	jal	8002b42a <printf>
    8000eb7e:	02900513          	li	a0,41
    8000eb82:	5961b0ef          	jal	8002a118 <putchar>
    8000eb86:	4529                	li	a0,10
    8000eb88:	5901b0ef          	jal	8002a118 <putchar>
    8000eb8c:	00049417          	auipc	s0,0x49
    8000eb90:	48544403          	lbu	s0,1157(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000eb94:	0001f597          	auipc	a1,0x1f
    8000eb98:	62458593          	addi	a1,a1,1572 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb9c:	c411                	beqz	s0,8000eba8 <priv_change_4+0xe2>
    8000eb9e:	6498                	ld	a4,8(s1)
    8000eba0:	47b5                	li	a5,13
    8000eba2:	02f70c63          	beq	a4,a5,8000ebda <priv_change_4+0x114>
    8000eba6:	4401                	li	s0,0
    TEST_END();
    8000eba8:	0001f517          	auipc	a0,0x1f
    8000ebac:	6b850513          	addi	a0,a0,1720 # 8002e260 <__func__.0+0x378>
    8000ebb0:	07b1c0ef          	jal	8002b42a <printf>
    8000ebb4:	4511                	li	a0,4
    8000ebb6:	b52f20ef          	jal	80000f08 <goto_priv>
    8000ebba:	c6bf20ef          	jal	80001824 <reset_state>
}
    8000ebbe:	60e2                	ld	ra,24(sp)
    8000ebc0:	8522                	mv	a0,s0
    8000ebc2:	6442                	ld	s0,16(sp)
    8000ebc4:	64a2                	ld	s1,8(sp)
    8000ebc6:	6105                	addi	sp,sp,32
    8000ebc8:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebca:	00049717          	auipc	a4,0x49
    8000ebce:	44a72703          	lw	a4,1098(a4) # 80058014 <excpt+0x4>
    8000ebd2:	4791                	li	a5,4
    8000ebd4:	f8f71fe3          	bne	a4,a5,8000eb72 <priv_change_4+0xac>
    8000ebd8:	b77d                	j	8000eb86 <priv_change_4+0xc0>
    8000ebda:	00049717          	auipc	a4,0x49
    8000ebde:	43a72703          	lw	a4,1082(a4) # 80058014 <excpt+0x4>
    8000ebe2:	4791                	li	a5,4
    TEST_END();
    8000ebe4:	0001f597          	auipc	a1,0x1f
    8000ebe8:	5c458593          	addi	a1,a1,1476 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebec:	faf70ee3          	beq	a4,a5,8000eba8 <priv_change_4+0xe2>
    8000ebf0:	4401                	li	s0,0
    TEST_END();
    8000ebf2:	0001f597          	auipc	a1,0x1f
    8000ebf6:	5c658593          	addi	a1,a1,1478 # 8002e1b8 <__func__.0+0x2d0>
    8000ebfa:	b77d                	j	8000eba8 <priv_change_4+0xe2>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebfc:	00049717          	auipc	a4,0x49
    8000ec00:	41872703          	lw	a4,1048(a4) # 80058014 <excpt+0x4>
    8000ec04:	4791                	li	a5,4
    8000ec06:	0001f597          	auipc	a1,0x1f
    8000ec0a:	5a258593          	addi	a1,a1,1442 # 8002e1a8 <__func__.0+0x2c0>
    8000ec0e:	f4f703e3          	beq	a4,a5,8000eb54 <priv_change_4+0x8e>
    8000ec12:	0001f597          	auipc	a1,0x1f
    8000ec16:	5a658593          	addi	a1,a1,1446 # 8002e1b8 <__func__.0+0x2d0>
    8000ec1a:	bf2d                	j	8000eb54 <priv_change_4+0x8e>

000000008000ec1c <priv_change_5>:

bool priv_change_5(){
    8000ec1c:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ec1e:	0001e597          	auipc	a1,0x1e
    8000ec22:	b8a58593          	addi	a1,a1,-1142 # 8002c7a8 <__func__.11>
    8000ec26:	0001f517          	auipc	a0,0x1f
    8000ec2a:	5a250513          	addi	a0,a0,1442 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_5(){
    8000ec2e:	e406                	sd	ra,8(sp)
    8000ec30:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ec32:	7f81c0ef          	jal	8002b42a <printf>
    8000ec36:	4529                	li	a0,10
    8000ec38:	4e01b0ef          	jal	8002a118 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000ec3c:	4511                	li	a0,4
    8000ec3e:	acaf20ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000ec42:	be3f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg, 0); 
    8000ec46:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000ec4a:	9c2f20ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000ec4e:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec52:	08200593          	li	a1,130
    8000ec56:	00022617          	auipc	a2,0x22
    8000ec5a:	1ca60613          	addi	a2,a2,458 # 80030e20 <__func__.0+0x2f38>
    8000ec5e:	0001f517          	auipc	a0,0x1f
    8000ec62:	58250513          	addi	a0,a0,1410 # 8002e1e0 <__func__.0+0x2f8>
    8000ec66:	7c41c0ef          	jal	8002b42a <printf>
    8000ec6a:	00049417          	auipc	s0,0x49
    8000ec6e:	3a640413          	addi	s0,s0,934 # 80058010 <excpt>
    8000ec72:	6014                	ld	a3,0(s0)
    8000ec74:	f0001737          	lui	a4,0xf0001
    8000ec78:	0712                	slli	a4,a4,0x4
    8000ec7a:	4785                	li	a5,1
    8000ec7c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ec80:	178a                	slli	a5,a5,0x22
    8000ec82:	8f75                	and	a4,a4,a3
    8000ec84:	10078793          	addi	a5,a5,256
    8000ec88:	0001f597          	auipc	a1,0x1f
    8000ec8c:	52058593          	addi	a1,a1,1312 # 8002e1a8 <__func__.0+0x2c0>
    8000ec90:	00f70663          	beq	a4,a5,8000ec9c <priv_change_5+0x80>
    8000ec94:	0001f597          	auipc	a1,0x1f
    8000ec98:	52458593          	addi	a1,a1,1316 # 8002e1b8 <__func__.0+0x2d0>
    8000ec9c:	0001f517          	auipc	a0,0x1f
    8000eca0:	55c50513          	addi	a0,a0,1372 # 8002e1f8 <__func__.0+0x310>
    8000eca4:	7861c0ef          	jal	8002b42a <printf>
    8000eca8:	00049797          	auipc	a5,0x49
    8000ecac:	3697c783          	lbu	a5,873(a5) # 80058011 <excpt+0x1>
    8000ecb0:	cb81                	beqz	a5,8000ecc0 <priv_change_5+0xa4>
    8000ecb2:	00049717          	auipc	a4,0x49
    8000ecb6:	36272703          	lw	a4,866(a4) # 80058014 <excpt+0x4>
    8000ecba:	4791                	li	a5,4
    8000ecbc:	00f70c63          	beq	a4,a5,8000ecd4 <priv_change_5+0xb8>
    8000ecc0:	0001f517          	auipc	a0,0x1f
    8000ecc4:	54050513          	addi	a0,a0,1344 # 8002e200 <__func__.0+0x318>
    8000ecc8:	7621c0ef          	jal	8002b42a <printf>
    8000eccc:	02900513          	li	a0,41
    8000ecd0:	4481b0ef          	jal	8002a118 <putchar>
    8000ecd4:	4529                	li	a0,10
    8000ecd6:	4421b0ef          	jal	8002a118 <putchar>
    8000ecda:	6014                	ld	a3,0(s0)
    8000ecdc:	f0001737          	lui	a4,0xf0001
    8000ece0:	0712                	slli	a4,a4,0x4
    8000ece2:	4785                	li	a5,1
    8000ece4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ece8:	178a                	slli	a5,a5,0x22
    8000ecea:	8f75                	and	a4,a4,a3
    8000ecec:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000ecf0:	00022517          	auipc	a0,0x22
    8000ecf4:	16850513          	addi	a0,a0,360 # 80030e58 <__func__.0+0x2f70>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ecf8:	02f70963          	beq	a4,a5,8000ed2a <priv_change_5+0x10e>
    printf("niuh");
    8000ecfc:	72e1c0ef          	jal	8002b42a <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed00:	4401                	li	s0,0

    TEST_END();
    8000ed02:	0001f597          	auipc	a1,0x1f
    8000ed06:	4b658593          	addi	a1,a1,1206 # 8002e1b8 <__func__.0+0x2d0>
    8000ed0a:	0001f517          	auipc	a0,0x1f
    8000ed0e:	55650513          	addi	a0,a0,1366 # 8002e260 <__func__.0+0x378>
    8000ed12:	7181c0ef          	jal	8002b42a <printf>
    8000ed16:	4511                	li	a0,4
    8000ed18:	9f0f20ef          	jal	80000f08 <goto_priv>
    8000ed1c:	b09f20ef          	jal	80001824 <reset_state>
}
    8000ed20:	60a2                	ld	ra,8(sp)
    8000ed22:	8522                	mv	a0,s0
    8000ed24:	6402                	ld	s0,0(sp)
    8000ed26:	0141                	addi	sp,sp,16
    8000ed28:	8082                	ret
    printf("niuh");
    8000ed2a:	7001c0ef          	jal	8002b42a <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed2e:	4405                	li	s0,1
    TEST_END();
    8000ed30:	0001f597          	auipc	a1,0x1f
    8000ed34:	47858593          	addi	a1,a1,1144 # 8002e1a8 <__func__.0+0x2c0>
    8000ed38:	bfc9                	j	8000ed0a <priv_change_5+0xee>

000000008000ed3a <priv_change_6>:

bool priv_change_6(){
    8000ed3a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ed3c:	0001e597          	auipc	a1,0x1e
    8000ed40:	a7c58593          	addi	a1,a1,-1412 # 8002c7b8 <__func__.10>
    8000ed44:	0001f517          	auipc	a0,0x1f
    8000ed48:	48450513          	addi	a0,a0,1156 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_6(){
    8000ed4c:	e406                	sd	ra,8(sp)
    8000ed4e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ed50:	6da1c0ef          	jal	8002b42a <printf>
    8000ed54:	4529                	li	a0,10
    8000ed56:	3c21b0ef          	jal	8002a118 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ed5a:	4511                	li	a0,4
    8000ed5c:	9acf20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);         
    8000ed60:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000ed64:	4505                	li	a0,1
    8000ed66:	9a2f20ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000ed6a:	8a2f20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ed6e:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ed72:	08200593          	li	a1,130
    8000ed76:	00022617          	auipc	a2,0x22
    8000ed7a:	0ea60613          	addi	a2,a2,234 # 80030e60 <__func__.0+0x2f78>
    8000ed7e:	0001f517          	auipc	a0,0x1f
    8000ed82:	46250513          	addi	a0,a0,1122 # 8002e1e0 <__func__.0+0x2f8>
    8000ed86:	6a41c0ef          	jal	8002b42a <printf>
    8000ed8a:	00049417          	auipc	s0,0x49
    8000ed8e:	28640413          	addi	s0,s0,646 # 80058010 <excpt>
    8000ed92:	6014                	ld	a3,0(s0)
    8000ed94:	f0001737          	lui	a4,0xf0001
    8000ed98:	0712                	slli	a4,a4,0x4
    8000ed9a:	4785                	li	a5,1
    8000ed9c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eda0:	178a                	slli	a5,a5,0x22
    8000eda2:	8f75                	and	a4,a4,a3
    8000eda4:	10078793          	addi	a5,a5,256
    8000eda8:	0001f597          	auipc	a1,0x1f
    8000edac:	40058593          	addi	a1,a1,1024 # 8002e1a8 <__func__.0+0x2c0>
    8000edb0:	00f70663          	beq	a4,a5,8000edbc <priv_change_6+0x82>
    8000edb4:	0001f597          	auipc	a1,0x1f
    8000edb8:	40458593          	addi	a1,a1,1028 # 8002e1b8 <__func__.0+0x2d0>
    8000edbc:	0001f517          	auipc	a0,0x1f
    8000edc0:	43c50513          	addi	a0,a0,1084 # 8002e1f8 <__func__.0+0x310>
    8000edc4:	6661c0ef          	jal	8002b42a <printf>
    8000edc8:	00049797          	auipc	a5,0x49
    8000edcc:	2497c783          	lbu	a5,585(a5) # 80058011 <excpt+0x1>
    8000edd0:	cb81                	beqz	a5,8000ede0 <priv_change_6+0xa6>
    8000edd2:	00049717          	auipc	a4,0x49
    8000edd6:	24272703          	lw	a4,578(a4) # 80058014 <excpt+0x4>
    8000edda:	4791                	li	a5,4
    8000eddc:	00f70c63          	beq	a4,a5,8000edf4 <priv_change_6+0xba>
    8000ede0:	0001f517          	auipc	a0,0x1f
    8000ede4:	42050513          	addi	a0,a0,1056 # 8002e200 <__func__.0+0x318>
    8000ede8:	6421c0ef          	jal	8002b42a <printf>
    8000edec:	02900513          	li	a0,41
    8000edf0:	3281b0ef          	jal	8002a118 <putchar>
    8000edf4:	4529                	li	a0,10
    8000edf6:	3221b0ef          	jal	8002a118 <putchar>
    8000edfa:	6014                	ld	a3,0(s0)
    8000edfc:	f0001737          	lui	a4,0xf0001
    8000ee00:	0712                	slli	a4,a4,0x4
    8000ee02:	4785                	li	a5,1
    8000ee04:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee08:	178a                	slli	a5,a5,0x22
    8000ee0a:	8f75                	and	a4,a4,a3
    8000ee0c:	10078793          	addi	a5,a5,256
    8000ee10:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000ee12:	0001f597          	auipc	a1,0x1f
    8000ee16:	3a658593          	addi	a1,a1,934 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ee1a:	00f71763          	bne	a4,a5,8000ee28 <priv_change_6+0xee>
    8000ee1e:	4405                	li	s0,1
    TEST_END();
    8000ee20:	0001f597          	auipc	a1,0x1f
    8000ee24:	38858593          	addi	a1,a1,904 # 8002e1a8 <__func__.0+0x2c0>
    8000ee28:	0001f517          	auipc	a0,0x1f
    8000ee2c:	43850513          	addi	a0,a0,1080 # 8002e260 <__func__.0+0x378>
    8000ee30:	5fa1c0ef          	jal	8002b42a <printf>
    8000ee34:	4511                	li	a0,4
    8000ee36:	8d2f20ef          	jal	80000f08 <goto_priv>
    8000ee3a:	9ebf20ef          	jal	80001824 <reset_state>
}
    8000ee3e:	60a2                	ld	ra,8(sp)
    8000ee40:	8522                	mv	a0,s0
    8000ee42:	6402                	ld	s0,0(sp)
    8000ee44:	0141                	addi	sp,sp,16
    8000ee46:	8082                	ret

000000008000ee48 <priv_change_7>:

bool priv_change_7(){
    8000ee48:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ee4a:	0001e597          	auipc	a1,0x1e
    8000ee4e:	97e58593          	addi	a1,a1,-1666 # 8002c7c8 <__func__.9>
    8000ee52:	0001f517          	auipc	a0,0x1f
    8000ee56:	37650513          	addi	a0,a0,886 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_7(){
    8000ee5a:	e406                	sd	ra,8(sp)
    8000ee5c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ee5e:	5cc1c0ef          	jal	8002b42a <printf>
    8000ee62:	4529                	li	a0,10
    8000ee64:	2b41b0ef          	jal	8002a118 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ee68:	4511                	li	a0,4
    8000ee6a:	89ef20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);      
    8000ee6e:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000ee72:	4501                	li	a0,0
    8000ee74:	894f20ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000ee78:	f95f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ee7c:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ee80:	08200593          	li	a1,130
    8000ee84:	00022617          	auipc	a2,0x22
    8000ee88:	01c60613          	addi	a2,a2,28 # 80030ea0 <__func__.0+0x2fb8>
    8000ee8c:	0001f517          	auipc	a0,0x1f
    8000ee90:	35450513          	addi	a0,a0,852 # 8002e1e0 <__func__.0+0x2f8>
    8000ee94:	5961c0ef          	jal	8002b42a <printf>
    8000ee98:	00049417          	auipc	s0,0x49
    8000ee9c:	17840413          	addi	s0,s0,376 # 80058010 <excpt>
    8000eea0:	6014                	ld	a3,0(s0)
    8000eea2:	f0001737          	lui	a4,0xf0001
    8000eea6:	0712                	slli	a4,a4,0x4
    8000eea8:	4785                	li	a5,1
    8000eeaa:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eeae:	178a                	slli	a5,a5,0x22
    8000eeb0:	8f75                	and	a4,a4,a3
    8000eeb2:	10078793          	addi	a5,a5,256
    8000eeb6:	0001f597          	auipc	a1,0x1f
    8000eeba:	2f258593          	addi	a1,a1,754 # 8002e1a8 <__func__.0+0x2c0>
    8000eebe:	00f70663          	beq	a4,a5,8000eeca <priv_change_7+0x82>
    8000eec2:	0001f597          	auipc	a1,0x1f
    8000eec6:	2f658593          	addi	a1,a1,758 # 8002e1b8 <__func__.0+0x2d0>
    8000eeca:	0001f517          	auipc	a0,0x1f
    8000eece:	32e50513          	addi	a0,a0,814 # 8002e1f8 <__func__.0+0x310>
    8000eed2:	5581c0ef          	jal	8002b42a <printf>
    8000eed6:	00049797          	auipc	a5,0x49
    8000eeda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    8000eede:	cb81                	beqz	a5,8000eeee <priv_change_7+0xa6>
    8000eee0:	00049717          	auipc	a4,0x49
    8000eee4:	13472703          	lw	a4,308(a4) # 80058014 <excpt+0x4>
    8000eee8:	4791                	li	a5,4
    8000eeea:	00f70c63          	beq	a4,a5,8000ef02 <priv_change_7+0xba>
    8000eeee:	0001f517          	auipc	a0,0x1f
    8000eef2:	31250513          	addi	a0,a0,786 # 8002e200 <__func__.0+0x318>
    8000eef6:	5341c0ef          	jal	8002b42a <printf>
    8000eefa:	02900513          	li	a0,41
    8000eefe:	21a1b0ef          	jal	8002a118 <putchar>
    8000ef02:	4529                	li	a0,10
    8000ef04:	2141b0ef          	jal	8002a118 <putchar>
    8000ef08:	6014                	ld	a3,0(s0)
    8000ef0a:	f0001737          	lui	a4,0xf0001
    8000ef0e:	0712                	slli	a4,a4,0x4
    8000ef10:	4785                	li	a5,1
    8000ef12:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef16:	178a                	slli	a5,a5,0x22
    8000ef18:	8f75                	and	a4,a4,a3
    8000ef1a:	10078793          	addi	a5,a5,256
    8000ef1e:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000ef20:	0001f597          	auipc	a1,0x1f
    8000ef24:	29858593          	addi	a1,a1,664 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ef28:	00f71763          	bne	a4,a5,8000ef36 <priv_change_7+0xee>
    8000ef2c:	4405                	li	s0,1
    TEST_END();
    8000ef2e:	0001f597          	auipc	a1,0x1f
    8000ef32:	27a58593          	addi	a1,a1,634 # 8002e1a8 <__func__.0+0x2c0>
    8000ef36:	0001f517          	auipc	a0,0x1f
    8000ef3a:	32a50513          	addi	a0,a0,810 # 8002e260 <__func__.0+0x378>
    8000ef3e:	4ec1c0ef          	jal	8002b42a <printf>
    8000ef42:	4511                	li	a0,4
    8000ef44:	fc5f10ef          	jal	80000f08 <goto_priv>
    8000ef48:	8ddf20ef          	jal	80001824 <reset_state>
}
    8000ef4c:	60a2                	ld	ra,8(sp)
    8000ef4e:	8522                	mv	a0,s0
    8000ef50:	6402                	ld	s0,0(sp)
    8000ef52:	0141                	addi	sp,sp,16
    8000ef54:	8082                	ret

000000008000ef56 <priv_change_8>:

bool priv_change_8(){
    8000ef56:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ef58:	0001e597          	auipc	a1,0x1e
    8000ef5c:	88058593          	addi	a1,a1,-1920 # 8002c7d8 <__func__.8>
    8000ef60:	0001f517          	auipc	a0,0x1f
    8000ef64:	26850513          	addi	a0,a0,616 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_8(){
    8000ef68:	e406                	sd	ra,8(sp)
    8000ef6a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ef6c:	4be1c0ef          	jal	8002b42a <printf>
    8000ef70:	4529                	li	a0,10
    8000ef72:	1a61b0ef          	jal	8002a118 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000ef76:	4511                	li	a0,4
    8000ef78:	f91f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000ef7c:	8a9f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,0);
    8000ef80:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000ef84:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000ef88:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ef8c:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000ef90:	4501                	li	a0,0
    8000ef92:	f77f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000ef96:	e77f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000ef9a:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ef9e:	08200593          	li	a1,130
    8000efa2:	00022617          	auipc	a2,0x22
    8000efa6:	f3e60613          	addi	a2,a2,-194 # 80030ee0 <__func__.0+0x2ff8>
    8000efaa:	0001f517          	auipc	a0,0x1f
    8000efae:	23650513          	addi	a0,a0,566 # 8002e1e0 <__func__.0+0x2f8>
    8000efb2:	4781c0ef          	jal	8002b42a <printf>
    8000efb6:	00049417          	auipc	s0,0x49
    8000efba:	05a40413          	addi	s0,s0,90 # 80058010 <excpt>
    8000efbe:	6014                	ld	a3,0(s0)
    8000efc0:	f0001737          	lui	a4,0xf0001
    8000efc4:	0712                	slli	a4,a4,0x4
    8000efc6:	4785                	li	a5,1
    8000efc8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000efcc:	178a                	slli	a5,a5,0x22
    8000efce:	8f75                	and	a4,a4,a3
    8000efd0:	10078793          	addi	a5,a5,256
    8000efd4:	0001f597          	auipc	a1,0x1f
    8000efd8:	1e458593          	addi	a1,a1,484 # 8002e1b8 <__func__.0+0x2d0>
    8000efdc:	08f70963          	beq	a4,a5,8000f06e <priv_change_8+0x118>
    8000efe0:	0001f517          	auipc	a0,0x1f
    8000efe4:	21850513          	addi	a0,a0,536 # 8002e1f8 <__func__.0+0x310>
    8000efe8:	4421c0ef          	jal	8002b42a <printf>
    8000efec:	00049797          	auipc	a5,0x49
    8000eff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    8000eff4:	cb81                	beqz	a5,8000f004 <priv_change_8+0xae>
    8000eff6:	00049717          	auipc	a4,0x49
    8000effa:	01e72703          	lw	a4,30(a4) # 80058014 <excpt+0x4>
    8000effe:	4791                	li	a5,4
    8000f000:	06f70163          	beq	a4,a5,8000f062 <priv_change_8+0x10c>
    8000f004:	0001f517          	auipc	a0,0x1f
    8000f008:	1fc50513          	addi	a0,a0,508 # 8002e200 <__func__.0+0x318>
    8000f00c:	41e1c0ef          	jal	8002b42a <printf>
    8000f010:	02900513          	li	a0,41
    8000f014:	1041b0ef          	jal	8002a118 <putchar>
    8000f018:	4529                	li	a0,10
    8000f01a:	0fe1b0ef          	jal	8002a118 <putchar>
    8000f01e:	6014                	ld	a3,0(s0)
    8000f020:	f0001737          	lui	a4,0xf0001
    8000f024:	0712                	slli	a4,a4,0x4
    8000f026:	4785                	li	a5,1
    8000f028:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f02c:	178a                	slli	a5,a5,0x22
    8000f02e:	8f75                	and	a4,a4,a3
    8000f030:	10078793          	addi	a5,a5,256
    8000f034:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000f036:	0001f597          	auipc	a1,0x1f
    8000f03a:	18258593          	addi	a1,a1,386 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f03e:	04f70663          	beq	a4,a5,8000f08a <priv_change_8+0x134>
    TEST_END();
    8000f042:	0001f517          	auipc	a0,0x1f
    8000f046:	21e50513          	addi	a0,a0,542 # 8002e260 <__func__.0+0x378>
    8000f04a:	3e01c0ef          	jal	8002b42a <printf>
    8000f04e:	4511                	li	a0,4
    8000f050:	eb9f10ef          	jal	80000f08 <goto_priv>
    8000f054:	fd0f20ef          	jal	80001824 <reset_state>
}
    8000f058:	60a2                	ld	ra,8(sp)
    8000f05a:	8522                	mv	a0,s0
    8000f05c:	6402                	ld	s0,0(sp)
    8000f05e:	0141                	addi	sp,sp,16
    8000f060:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f062:	0002c797          	auipc	a5,0x2c
    8000f066:	7c27a783          	lw	a5,1986(a5) # 8003b824 <curr_priv>
    8000f06a:	d7dd                	beqz	a5,8000f018 <priv_change_8+0xc2>
    8000f06c:	bf61                	j	8000f004 <priv_change_8+0xae>
    8000f06e:	0002c797          	auipc	a5,0x2c
    8000f072:	7b67a783          	lw	a5,1974(a5) # 8003b824 <curr_priv>
    8000f076:	0001f597          	auipc	a1,0x1f
    8000f07a:	13258593          	addi	a1,a1,306 # 8002e1a8 <__func__.0+0x2c0>
    8000f07e:	d3ad                	beqz	a5,8000efe0 <priv_change_8+0x8a>
    8000f080:	0001f597          	auipc	a1,0x1f
    8000f084:	13858593          	addi	a1,a1,312 # 8002e1b8 <__func__.0+0x2d0>
    8000f088:	bfa1                	j	8000efe0 <priv_change_8+0x8a>
    8000f08a:	0002c797          	auipc	a5,0x2c
    8000f08e:	79a7a783          	lw	a5,1946(a5) # 8003b824 <curr_priv>
    8000f092:	fbc5                	bnez	a5,8000f042 <priv_change_8+0xec>
    8000f094:	4405                	li	s0,1
    TEST_END();
    8000f096:	0001f597          	auipc	a1,0x1f
    8000f09a:	11258593          	addi	a1,a1,274 # 8002e1a8 <__func__.0+0x2c0>
    8000f09e:	b755                	j	8000f042 <priv_change_8+0xec>

000000008000f0a0 <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000f0a0:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f0a2:	0001d597          	auipc	a1,0x1d
    8000f0a6:	74658593          	addi	a1,a1,1862 # 8002c7e8 <__func__.7>
    8000f0aa:	0001f517          	auipc	a0,0x1f
    8000f0ae:	11e50513          	addi	a0,a0,286 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_9(){
    8000f0b2:	e406                	sd	ra,8(sp)
    8000f0b4:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f0b6:	3741c0ef          	jal	8002b42a <printf>
    8000f0ba:	4529                	li	a0,10
    8000f0bc:	05c1b0ef          	jal	8002a118 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f0c0:	4511                	li	a0,4
    8000f0c2:	e47f10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f0c6:	57fd                	li	a5,-1
    8000f0c8:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f0cc:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f0d0:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f0d4:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f0d8:	4501                	li	a0,0
    8000f0da:	e2ff10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f0de:	d2ff10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f0e2:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0e6:	08200593          	li	a1,130
    8000f0ea:	00022617          	auipc	a2,0x22
    8000f0ee:	e6660613          	addi	a2,a2,-410 # 80030f50 <__func__.0+0x3068>
    8000f0f2:	0001f517          	auipc	a0,0x1f
    8000f0f6:	0ee50513          	addi	a0,a0,238 # 8002e1e0 <__func__.0+0x2f8>
    8000f0fa:	3301c0ef          	jal	8002b42a <printf>
    8000f0fe:	00049417          	auipc	s0,0x49
    8000f102:	f1240413          	addi	s0,s0,-238 # 80058010 <excpt>
    8000f106:	6014                	ld	a3,0(s0)
    8000f108:	f0001737          	lui	a4,0xf0001
    8000f10c:	0712                	slli	a4,a4,0x4
    8000f10e:	4785                	li	a5,1
    8000f110:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f114:	1786                	slli	a5,a5,0x21
    8000f116:	8f75                	and	a4,a4,a3
    8000f118:	10078793          	addi	a5,a5,256
    8000f11c:	0001f597          	auipc	a1,0x1f
    8000f120:	09c58593          	addi	a1,a1,156 # 8002e1b8 <__func__.0+0x2d0>
    8000f124:	08f70263          	beq	a4,a5,8000f1a8 <priv_change_9+0x108>
    8000f128:	0001f517          	auipc	a0,0x1f
    8000f12c:	0d050513          	addi	a0,a0,208 # 8002e1f8 <__func__.0+0x310>
    8000f130:	2fa1c0ef          	jal	8002b42a <printf>
    8000f134:	00049797          	auipc	a5,0x49
    8000f138:	edd7c783          	lbu	a5,-291(a5) # 80058011 <excpt+0x1>
    8000f13c:	cb81                	beqz	a5,8000f14c <priv_change_9+0xac>
    8000f13e:	00049717          	auipc	a4,0x49
    8000f142:	ed672703          	lw	a4,-298(a4) # 80058014 <excpt+0x4>
    8000f146:	4789                	li	a5,2
    8000f148:	04f70a63          	beq	a4,a5,8000f19c <priv_change_9+0xfc>
    8000f14c:	0001f517          	auipc	a0,0x1f
    8000f150:	0b450513          	addi	a0,a0,180 # 8002e200 <__func__.0+0x318>
    8000f154:	2d61c0ef          	jal	8002b42a <printf>
    8000f158:	02900513          	li	a0,41
    8000f15c:	7bd1a0ef          	jal	8002a118 <putchar>
    8000f160:	4529                	li	a0,10
    8000f162:	7b71a0ef          	jal	8002a118 <putchar>
    8000f166:	6014                	ld	a3,0(s0)
    8000f168:	f0001737          	lui	a4,0xf0001
    8000f16c:	0712                	slli	a4,a4,0x4
    8000f16e:	4785                	li	a5,1
    8000f170:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f174:	1786                	slli	a5,a5,0x21
    8000f176:	8f75                	and	a4,a4,a3
    8000f178:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f17c:	0001f597          	auipc	a1,0x1f
    8000f180:	03c58593          	addi	a1,a1,60 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f184:	04f70063          	beq	a4,a5,8000f1c4 <priv_change_9+0x124>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f188:	0001f517          	auipc	a0,0x1f
    8000f18c:	0d850513          	addi	a0,a0,216 # 8002e260 <__func__.0+0x378>
    8000f190:	29a1c0ef          	jal	8002b42a <printf>
    }
}
    8000f194:	60a2                	ld	ra,8(sp)
    8000f196:	6402                	ld	s0,0(sp)
    8000f198:	0141                	addi	sp,sp,16
    8000f19a:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f19c:	0002c797          	auipc	a5,0x2c
    8000f1a0:	6887a783          	lw	a5,1672(a5) # 8003b824 <curr_priv>
    8000f1a4:	dfd5                	beqz	a5,8000f160 <priv_change_9+0xc0>
    8000f1a6:	b75d                	j	8000f14c <priv_change_9+0xac>
    8000f1a8:	0002c797          	auipc	a5,0x2c
    8000f1ac:	67c7a783          	lw	a5,1660(a5) # 8003b824 <curr_priv>
    8000f1b0:	0001f597          	auipc	a1,0x1f
    8000f1b4:	ff858593          	addi	a1,a1,-8 # 8002e1a8 <__func__.0+0x2c0>
    8000f1b8:	dba5                	beqz	a5,8000f128 <priv_change_9+0x88>
    8000f1ba:	0001f597          	auipc	a1,0x1f
    8000f1be:	ffe58593          	addi	a1,a1,-2 # 8002e1b8 <__func__.0+0x2d0>
    8000f1c2:	b79d                	j	8000f128 <priv_change_9+0x88>
    8000f1c4:	0002c797          	auipc	a5,0x2c
    8000f1c8:	6607a783          	lw	a5,1632(a5) # 8003b824 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f1cc:	0001f597          	auipc	a1,0x1f
    8000f1d0:	fdc58593          	addi	a1,a1,-36 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f1d4:	dbd5                	beqz	a5,8000f188 <priv_change_9+0xe8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f1d6:	0001f597          	auipc	a1,0x1f
    8000f1da:	fe258593          	addi	a1,a1,-30 # 8002e1b8 <__func__.0+0x2d0>
    8000f1de:	0001f517          	auipc	a0,0x1f
    8000f1e2:	08250513          	addi	a0,a0,130 # 8002e260 <__func__.0+0x378>
    8000f1e6:	2441c0ef          	jal	8002b42a <printf>
}
    8000f1ea:	60a2                	ld	ra,8(sp)
    8000f1ec:	6402                	ld	s0,0(sp)
    8000f1ee:	0141                	addi	sp,sp,16
    8000f1f0:	8082                	ret

000000008000f1f2 <priv_change_10>:


bool priv_change_10(){
    8000f1f2:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f1f4:	0001d597          	auipc	a1,0x1d
    8000f1f8:	60458593          	addi	a1,a1,1540 # 8002c7f8 <__func__.6>
    8000f1fc:	0001f517          	auipc	a0,0x1f
    8000f200:	fcc50513          	addi	a0,a0,-52 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_10(){
    8000f204:	e406                	sd	ra,8(sp)
    8000f206:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f208:	2221c0ef          	jal	8002b42a <printf>
    8000f20c:	4529                	li	a0,10
    8000f20e:	70b1a0ef          	jal	8002a118 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000f212:	4511                	li	a0,4
    8000f214:	cf5f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f218:	e0cf20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f21c:	57fd                	li	a5,-1
    8000f21e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f222:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f226:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f22a:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000f22e:	4505                	li	a0,1
    8000f230:	cd9f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f234:	bd9f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f238:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f23c:	08200593          	li	a1,130
    8000f240:	00022617          	auipc	a2,0x22
    8000f244:	d8060613          	addi	a2,a2,-640 # 80030fc0 <__func__.0+0x30d8>
    8000f248:	0001f517          	auipc	a0,0x1f
    8000f24c:	f9850513          	addi	a0,a0,-104 # 8002e1e0 <__func__.0+0x2f8>
    8000f250:	1da1c0ef          	jal	8002b42a <printf>
    8000f254:	00049417          	auipc	s0,0x49
    8000f258:	dbc40413          	addi	s0,s0,-580 # 80058010 <excpt>
    8000f25c:	6014                	ld	a3,0(s0)
    8000f25e:	f0001737          	lui	a4,0xf0001
    8000f262:	0712                	slli	a4,a4,0x4
    8000f264:	478d                	li	a5,3
    8000f266:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f26a:	1782                	slli	a5,a5,0x20
    8000f26c:	8f75                	and	a4,a4,a3
    8000f26e:	10078793          	addi	a5,a5,256
    8000f272:	0001f597          	auipc	a1,0x1f
    8000f276:	f4658593          	addi	a1,a1,-186 # 8002e1b8 <__func__.0+0x2d0>
    8000f27a:	08f70463          	beq	a4,a5,8000f302 <priv_change_10+0x110>
    8000f27e:	0001f517          	auipc	a0,0x1f
    8000f282:	f7a50513          	addi	a0,a0,-134 # 8002e1f8 <__func__.0+0x310>
    8000f286:	1a41c0ef          	jal	8002b42a <printf>
    8000f28a:	00049797          	auipc	a5,0x49
    8000f28e:	d877c783          	lbu	a5,-633(a5) # 80058011 <excpt+0x1>
    8000f292:	cb81                	beqz	a5,8000f2a2 <priv_change_10+0xb0>
    8000f294:	00049717          	auipc	a4,0x49
    8000f298:	d8072703          	lw	a4,-640(a4) # 80058014 <excpt+0x4>
    8000f29c:	478d                	li	a5,3
    8000f29e:	04f70a63          	beq	a4,a5,8000f2f2 <priv_change_10+0x100>
    8000f2a2:	0001f517          	auipc	a0,0x1f
    8000f2a6:	f5e50513          	addi	a0,a0,-162 # 8002e200 <__func__.0+0x318>
    8000f2aa:	1801c0ef          	jal	8002b42a <printf>
    8000f2ae:	02900513          	li	a0,41
    8000f2b2:	6671a0ef          	jal	8002a118 <putchar>
    8000f2b6:	4529                	li	a0,10
    8000f2b8:	6611a0ef          	jal	8002a118 <putchar>
    8000f2bc:	6014                	ld	a3,0(s0)
    8000f2be:	f0001737          	lui	a4,0xf0001
    8000f2c2:	0712                	slli	a4,a4,0x4
    8000f2c4:	478d                	li	a5,3
    8000f2c6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f2ca:	1782                	slli	a5,a5,0x20
    8000f2cc:	8f75                	and	a4,a4,a3
    8000f2ce:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f2d2:	0001f597          	auipc	a1,0x1f
    8000f2d6:	ee658593          	addi	a1,a1,-282 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f2da:	04f70463          	beq	a4,a5,8000f322 <priv_change_10+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f2de:	0001f517          	auipc	a0,0x1f
    8000f2e2:	f8250513          	addi	a0,a0,-126 # 8002e260 <__func__.0+0x378>
    8000f2e6:	1441c0ef          	jal	8002b42a <printf>
    }
}
    8000f2ea:	60a2                	ld	ra,8(sp)
    8000f2ec:	6402                	ld	s0,0(sp)
    8000f2ee:	0141                	addi	sp,sp,16
    8000f2f0:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f2f2:	0002c717          	auipc	a4,0x2c
    8000f2f6:	53272703          	lw	a4,1330(a4) # 8003b824 <curr_priv>
    8000f2fa:	4785                	li	a5,1
    8000f2fc:	faf713e3          	bne	a4,a5,8000f2a2 <priv_change_10+0xb0>
    8000f300:	bf5d                	j	8000f2b6 <priv_change_10+0xc4>
    8000f302:	0002c717          	auipc	a4,0x2c
    8000f306:	52272703          	lw	a4,1314(a4) # 8003b824 <curr_priv>
    8000f30a:	4785                	li	a5,1
    8000f30c:	0001f597          	auipc	a1,0x1f
    8000f310:	e9c58593          	addi	a1,a1,-356 # 8002e1a8 <__func__.0+0x2c0>
    8000f314:	f6f705e3          	beq	a4,a5,8000f27e <priv_change_10+0x8c>
    8000f318:	0001f597          	auipc	a1,0x1f
    8000f31c:	ea058593          	addi	a1,a1,-352 # 8002e1b8 <__func__.0+0x2d0>
    8000f320:	bfb9                	j	8000f27e <priv_change_10+0x8c>
    8000f322:	0002c717          	auipc	a4,0x2c
    8000f326:	50272703          	lw	a4,1282(a4) # 8003b824 <curr_priv>
    8000f32a:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f32c:	0001f597          	auipc	a1,0x1f
    8000f330:	e7c58593          	addi	a1,a1,-388 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f334:	faf705e3          	beq	a4,a5,8000f2de <priv_change_10+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f338:	0001f597          	auipc	a1,0x1f
    8000f33c:	e8058593          	addi	a1,a1,-384 # 8002e1b8 <__func__.0+0x2d0>
    8000f340:	0001f517          	auipc	a0,0x1f
    8000f344:	f2050513          	addi	a0,a0,-224 # 8002e260 <__func__.0+0x378>
    8000f348:	0e21c0ef          	jal	8002b42a <printf>
}
    8000f34c:	60a2                	ld	ra,8(sp)
    8000f34e:	6402                	ld	s0,0(sp)
    8000f350:	0141                	addi	sp,sp,16
    8000f352:	8082                	ret

000000008000f354 <priv_change_11>:


bool priv_change_11(){
    8000f354:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f356:	0001d597          	auipc	a1,0x1d
    8000f35a:	4b258593          	addi	a1,a1,1202 # 8002c808 <__func__.5>
    8000f35e:	0001f517          	auipc	a0,0x1f
    8000f362:	e6a50513          	addi	a0,a0,-406 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_11(){
    8000f366:	e406                	sd	ra,8(sp)
    8000f368:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f36a:	0c01c0ef          	jal	8002b42a <printf>
    8000f36e:	4529                	li	a0,10
    8000f370:	5a91a0ef          	jal	8002a118 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000f374:	4511                	li	a0,4
    8000f376:	b93f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f37a:	caaf20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f37e:	57fd                	li	a5,-1
    8000f380:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f384:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f388:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f38c:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000f390:	4509                	li	a0,2
    8000f392:	b77f10ef          	jal	80000f08 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000f396:	a77f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f39a:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f39e:	08200593          	li	a1,130
    8000f3a2:	00022617          	auipc	a2,0x22
    8000f3a6:	c8e60613          	addi	a2,a2,-882 # 80031030 <__func__.0+0x3148>
    8000f3aa:	0001f517          	auipc	a0,0x1f
    8000f3ae:	e3650513          	addi	a0,a0,-458 # 8002e1e0 <__func__.0+0x2f8>
    8000f3b2:	0781c0ef          	jal	8002b42a <printf>
    8000f3b6:	00049417          	auipc	s0,0x49
    8000f3ba:	c5a40413          	addi	s0,s0,-934 # 80058010 <excpt>
    8000f3be:	6014                	ld	a3,0(s0)
    8000f3c0:	f0001737          	lui	a4,0xf0001
    8000f3c4:	0712                	slli	a4,a4,0x4
    8000f3c6:	4785                	li	a5,1
    8000f3c8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f3cc:	1786                	slli	a5,a5,0x21
    8000f3ce:	8f75                	and	a4,a4,a3
    8000f3d0:	10078793          	addi	a5,a5,256
    8000f3d4:	0001f597          	auipc	a1,0x1f
    8000f3d8:	dd458593          	addi	a1,a1,-556 # 8002e1a8 <__func__.0+0x2c0>
    8000f3dc:	00f70663          	beq	a4,a5,8000f3e8 <priv_change_11+0x94>
    8000f3e0:	0001f597          	auipc	a1,0x1f
    8000f3e4:	dd858593          	addi	a1,a1,-552 # 8002e1b8 <__func__.0+0x2d0>
    8000f3e8:	0001f517          	auipc	a0,0x1f
    8000f3ec:	e1050513          	addi	a0,a0,-496 # 8002e1f8 <__func__.0+0x310>
    8000f3f0:	03a1c0ef          	jal	8002b42a <printf>
    8000f3f4:	00049797          	auipc	a5,0x49
    8000f3f8:	c1d7c783          	lbu	a5,-995(a5) # 80058011 <excpt+0x1>
    8000f3fc:	cb81                	beqz	a5,8000f40c <priv_change_11+0xb8>
    8000f3fe:	00049717          	auipc	a4,0x49
    8000f402:	c1672703          	lw	a4,-1002(a4) # 80058014 <excpt+0x4>
    8000f406:	4789                	li	a5,2
    8000f408:	00f70c63          	beq	a4,a5,8000f420 <priv_change_11+0xcc>
    8000f40c:	0001f517          	auipc	a0,0x1f
    8000f410:	df450513          	addi	a0,a0,-524 # 8002e200 <__func__.0+0x318>
    8000f414:	0161c0ef          	jal	8002b42a <printf>
    8000f418:	02900513          	li	a0,41
    8000f41c:	4fd1a0ef          	jal	8002a118 <putchar>
    8000f420:	4529                	li	a0,10
    8000f422:	4f71a0ef          	jal	8002a118 <putchar>
    8000f426:	6014                	ld	a3,0(s0)
    8000f428:	f0001737          	lui	a4,0xf0001
    8000f42c:	0712                	slli	a4,a4,0x4
    8000f42e:	4785                	li	a5,1
    8000f430:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f434:	1786                	slli	a5,a5,0x21
    8000f436:	8f75                	and	a4,a4,a3
    8000f438:	10078793          	addi	a5,a5,256
        excpt.priv==PRIV_VS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f43c:	0001f597          	auipc	a1,0x1f
    8000f440:	d7c58593          	addi	a1,a1,-644 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f444:	00f71663          	bne	a4,a5,8000f450 <priv_change_11+0xfc>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f448:	0001f597          	auipc	a1,0x1f
    8000f44c:	d6058593          	addi	a1,a1,-672 # 8002e1a8 <__func__.0+0x2c0>
    8000f450:	0001f517          	auipc	a0,0x1f
    8000f454:	e1050513          	addi	a0,a0,-496 # 8002e260 <__func__.0+0x378>
    8000f458:	7d31b0ef          	jal	8002b42a <printf>
    }
}
    8000f45c:	60a2                	ld	ra,8(sp)
    8000f45e:	6402                	ld	s0,0(sp)
    8000f460:	0141                	addi	sp,sp,16
    8000f462:	8082                	ret

000000008000f464 <priv_change_12>:



bool priv_change_12(){
    8000f464:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f466:	0001d597          	auipc	a1,0x1d
    8000f46a:	3b258593          	addi	a1,a1,946 # 8002c818 <__func__.4>
    8000f46e:	0001f517          	auipc	a0,0x1f
    8000f472:	d5a50513          	addi	a0,a0,-678 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_12(){
    8000f476:	e406                	sd	ra,8(sp)
    8000f478:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f47a:	7b11b0ef          	jal	8002b42a <printf>
    8000f47e:	4529                	li	a0,10
    8000f480:	4991a0ef          	jal	8002a118 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000f484:	4511                	li	a0,4
    8000f486:	a83f10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f48a:	57fd                	li	a5,-1
    8000f48c:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f490:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f494:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f498:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000f49c:	450d                	li	a0,3
    8000f49e:	a6bf10ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f4a2:	96bf10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f4a6:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f4aa:	08200593          	li	a1,130
    8000f4ae:	00022617          	auipc	a2,0x22
    8000f4b2:	bda60613          	addi	a2,a2,-1062 # 80031088 <__func__.0+0x31a0>
    8000f4b6:	0001f517          	auipc	a0,0x1f
    8000f4ba:	d2a50513          	addi	a0,a0,-726 # 8002e1e0 <__func__.0+0x2f8>
    8000f4be:	76d1b0ef          	jal	8002b42a <printf>
    8000f4c2:	00049417          	auipc	s0,0x49
    8000f4c6:	b4e40413          	addi	s0,s0,-1202 # 80058010 <excpt>
    8000f4ca:	6014                	ld	a3,0(s0)
    8000f4cc:	f0001737          	lui	a4,0xf0001
    8000f4d0:	0712                	slli	a4,a4,0x4
    8000f4d2:	478d                	li	a5,3
    8000f4d4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f4d8:	1782                	slli	a5,a5,0x20
    8000f4da:	8f75                	and	a4,a4,a3
    8000f4dc:	10078793          	addi	a5,a5,256
    8000f4e0:	0001f597          	auipc	a1,0x1f
    8000f4e4:	cc858593          	addi	a1,a1,-824 # 8002e1a8 <__func__.0+0x2c0>
    8000f4e8:	00f70663          	beq	a4,a5,8000f4f4 <priv_change_12+0x90>
    8000f4ec:	0001f597          	auipc	a1,0x1f
    8000f4f0:	ccc58593          	addi	a1,a1,-820 # 8002e1b8 <__func__.0+0x2d0>
    8000f4f4:	0001f517          	auipc	a0,0x1f
    8000f4f8:	d0450513          	addi	a0,a0,-764 # 8002e1f8 <__func__.0+0x310>
    8000f4fc:	72f1b0ef          	jal	8002b42a <printf>
    8000f500:	00049797          	auipc	a5,0x49
    8000f504:	b117c783          	lbu	a5,-1263(a5) # 80058011 <excpt+0x1>
    8000f508:	cb81                	beqz	a5,8000f518 <priv_change_12+0xb4>
    8000f50a:	00049717          	auipc	a4,0x49
    8000f50e:	b0a72703          	lw	a4,-1270(a4) # 80058014 <excpt+0x4>
    8000f512:	478d                	li	a5,3
    8000f514:	00f70c63          	beq	a4,a5,8000f52c <priv_change_12+0xc8>
    8000f518:	0001f517          	auipc	a0,0x1f
    8000f51c:	ce850513          	addi	a0,a0,-792 # 8002e200 <__func__.0+0x318>
    8000f520:	70b1b0ef          	jal	8002b42a <printf>
    8000f524:	02900513          	li	a0,41
    8000f528:	3f11a0ef          	jal	8002a118 <putchar>
    8000f52c:	4529                	li	a0,10
    8000f52e:	3eb1a0ef          	jal	8002a118 <putchar>
    8000f532:	6014                	ld	a3,0(s0)
    8000f534:	f0001737          	lui	a4,0xf0001
    8000f538:	0712                	slli	a4,a4,0x4
    8000f53a:	478d                	li	a5,3
    8000f53c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f540:	1782                	slli	a5,a5,0x20
    8000f542:	8f75                	and	a4,a4,a3
    8000f544:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f548:	0001f597          	auipc	a1,0x1f
    8000f54c:	c7058593          	addi	a1,a1,-912 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f550:	00f71663          	bne	a4,a5,8000f55c <priv_change_12+0xf8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f554:	0001f597          	auipc	a1,0x1f
    8000f558:	c5458593          	addi	a1,a1,-940 # 8002e1a8 <__func__.0+0x2c0>
    8000f55c:	0001f517          	auipc	a0,0x1f
    8000f560:	d0450513          	addi	a0,a0,-764 # 8002e260 <__func__.0+0x378>
    8000f564:	6c71b0ef          	jal	8002b42a <printf>
    }

}
    8000f568:	60a2                	ld	ra,8(sp)
    8000f56a:	6402                	ld	s0,0(sp)
    8000f56c:	0141                	addi	sp,sp,16
    8000f56e:	8082                	ret

000000008000f570 <priv_change_13>:

bool priv_change_13(){
    8000f570:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f572:	0001d597          	auipc	a1,0x1d
    8000f576:	2b658593          	addi	a1,a1,694 # 8002c828 <__func__.3>
    8000f57a:	0001f517          	auipc	a0,0x1f
    8000f57e:	c4e50513          	addi	a0,a0,-946 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_13(){
    8000f582:	e406                	sd	ra,8(sp)
    8000f584:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f586:	6a51b0ef          	jal	8002b42a <printf>
    8000f58a:	4529                	li	a0,10
    8000f58c:	38d1a0ef          	jal	8002a118 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f590:	4511                	li	a0,4
    8000f592:	977f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f596:	a8ef20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f59a:	57fd                	li	a5,-1
    8000f59c:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f5a0:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f5a4:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f5a8:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000f5ac:	861f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VU);      
    8000f5b0:	4501                	li	a0,0
    8000f5b2:	957f10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f5b6:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5ba:	08200593          	li	a1,130
    8000f5be:	00022617          	auipc	a2,0x22
    8000f5c2:	b2260613          	addi	a2,a2,-1246 # 800310e0 <__func__.0+0x31f8>
    8000f5c6:	0001f517          	auipc	a0,0x1f
    8000f5ca:	c1a50513          	addi	a0,a0,-998 # 8002e1e0 <__func__.0+0x2f8>
    8000f5ce:	65d1b0ef          	jal	8002b42a <printf>
    8000f5d2:	00049417          	auipc	s0,0x49
    8000f5d6:	a3e40413          	addi	s0,s0,-1474 # 80058010 <excpt>
    8000f5da:	6014                	ld	a3,0(s0)
    8000f5dc:	f0001737          	lui	a4,0xf0001
    8000f5e0:	0712                	slli	a4,a4,0x4
    8000f5e2:	478d                	li	a5,3
    8000f5e4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5e8:	1782                	slli	a5,a5,0x20
    8000f5ea:	8f75                	and	a4,a4,a3
    8000f5ec:	10078793          	addi	a5,a5,256
    8000f5f0:	0001f597          	auipc	a1,0x1f
    8000f5f4:	bc858593          	addi	a1,a1,-1080 # 8002e1b8 <__func__.0+0x2d0>
    8000f5f8:	08f70263          	beq	a4,a5,8000f67c <priv_change_13+0x10c>
    8000f5fc:	0001f517          	auipc	a0,0x1f
    8000f600:	bfc50513          	addi	a0,a0,-1028 # 8002e1f8 <__func__.0+0x310>
    8000f604:	6271b0ef          	jal	8002b42a <printf>
    8000f608:	00049797          	auipc	a5,0x49
    8000f60c:	a097c783          	lbu	a5,-1527(a5) # 80058011 <excpt+0x1>
    8000f610:	cb81                	beqz	a5,8000f620 <priv_change_13+0xb0>
    8000f612:	00049717          	auipc	a4,0x49
    8000f616:	a0272703          	lw	a4,-1534(a4) # 80058014 <excpt+0x4>
    8000f61a:	478d                	li	a5,3
    8000f61c:	04f70a63          	beq	a4,a5,8000f670 <priv_change_13+0x100>
    8000f620:	0001f517          	auipc	a0,0x1f
    8000f624:	be050513          	addi	a0,a0,-1056 # 8002e200 <__func__.0+0x318>
    8000f628:	6031b0ef          	jal	8002b42a <printf>
    8000f62c:	02900513          	li	a0,41
    8000f630:	2e91a0ef          	jal	8002a118 <putchar>
    8000f634:	4529                	li	a0,10
    8000f636:	2e31a0ef          	jal	8002a118 <putchar>
    8000f63a:	6014                	ld	a3,0(s0)
    8000f63c:	f0001737          	lui	a4,0xf0001
    8000f640:	0712                	slli	a4,a4,0x4
    8000f642:	478d                	li	a5,3
    8000f644:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f648:	1782                	slli	a5,a5,0x20
    8000f64a:	8f75                	and	a4,a4,a3
    8000f64c:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f650:	0001f597          	auipc	a1,0x1f
    8000f654:	b6858593          	addi	a1,a1,-1176 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f658:	04f70063          	beq	a4,a5,8000f698 <priv_change_13+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f65c:	0001f517          	auipc	a0,0x1f
    8000f660:	c0450513          	addi	a0,a0,-1020 # 8002e260 <__func__.0+0x378>
    8000f664:	5c71b0ef          	jal	8002b42a <printf>
    }
}
    8000f668:	60a2                	ld	ra,8(sp)
    8000f66a:	6402                	ld	s0,0(sp)
    8000f66c:	0141                	addi	sp,sp,16
    8000f66e:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f670:	0002c797          	auipc	a5,0x2c
    8000f674:	1b47a783          	lw	a5,436(a5) # 8003b824 <curr_priv>
    8000f678:	dfd5                	beqz	a5,8000f634 <priv_change_13+0xc4>
    8000f67a:	b75d                	j	8000f620 <priv_change_13+0xb0>
    8000f67c:	0002c797          	auipc	a5,0x2c
    8000f680:	1a87a783          	lw	a5,424(a5) # 8003b824 <curr_priv>
    8000f684:	0001f597          	auipc	a1,0x1f
    8000f688:	b2458593          	addi	a1,a1,-1244 # 8002e1a8 <__func__.0+0x2c0>
    8000f68c:	dba5                	beqz	a5,8000f5fc <priv_change_13+0x8c>
    8000f68e:	0001f597          	auipc	a1,0x1f
    8000f692:	b2a58593          	addi	a1,a1,-1238 # 8002e1b8 <__func__.0+0x2d0>
    8000f696:	b79d                	j	8000f5fc <priv_change_13+0x8c>
    8000f698:	0002c797          	auipc	a5,0x2c
    8000f69c:	18c7a783          	lw	a5,396(a5) # 8003b824 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6a0:	0001f597          	auipc	a1,0x1f
    8000f6a4:	b0858593          	addi	a1,a1,-1272 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f6a8:	dbd5                	beqz	a5,8000f65c <priv_change_13+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6aa:	0001f597          	auipc	a1,0x1f
    8000f6ae:	b0e58593          	addi	a1,a1,-1266 # 8002e1b8 <__func__.0+0x2d0>
    8000f6b2:	0001f517          	auipc	a0,0x1f
    8000f6b6:	bae50513          	addi	a0,a0,-1106 # 8002e260 <__func__.0+0x378>
    8000f6ba:	5711b0ef          	jal	8002b42a <printf>
}
    8000f6be:	60a2                	ld	ra,8(sp)
    8000f6c0:	6402                	ld	s0,0(sp)
    8000f6c2:	0141                	addi	sp,sp,16
    8000f6c4:	8082                	ret

000000008000f6c6 <priv_change_14>:

bool priv_change_14(){
    8000f6c6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f6c8:	0001d597          	auipc	a1,0x1d
    8000f6cc:	17058593          	addi	a1,a1,368 # 8002c838 <__func__.2>
    8000f6d0:	0001f517          	auipc	a0,0x1f
    8000f6d4:	af850513          	addi	a0,a0,-1288 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_14(){
    8000f6d8:	e406                	sd	ra,8(sp)
    8000f6da:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f6dc:	54f1b0ef          	jal	8002b42a <printf>
    8000f6e0:	4529                	li	a0,10
    8000f6e2:	2371a0ef          	jal	8002a118 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000f6e6:	4511                	li	a0,4
    8000f6e8:	821f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f6ec:	938f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f6f0:	57fd                	li	a5,-1
    8000f6f2:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f6f6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f6fa:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f6fe:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000f702:	4501                	li	a0,0
    8000f704:	805f10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000f708:	f04f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f70c:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f710:	08200593          	li	a1,130
    8000f714:	00022617          	auipc	a2,0x22
    8000f718:	a3c60613          	addi	a2,a2,-1476 # 80031150 <__func__.0+0x3268>
    8000f71c:	0001f517          	auipc	a0,0x1f
    8000f720:	ac450513          	addi	a0,a0,-1340 # 8002e1e0 <__func__.0+0x2f8>
    8000f724:	5071b0ef          	jal	8002b42a <printf>
    8000f728:	00049417          	auipc	s0,0x49
    8000f72c:	8e840413          	addi	s0,s0,-1816 # 80058010 <excpt>
    8000f730:	6014                	ld	a3,0(s0)
    8000f732:	f0001737          	lui	a4,0xf0001
    8000f736:	0712                	slli	a4,a4,0x4
    8000f738:	478d                	li	a5,3
    8000f73a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f73e:	1782                	slli	a5,a5,0x20
    8000f740:	8f75                	and	a4,a4,a3
    8000f742:	10078793          	addi	a5,a5,256
    8000f746:	0001f597          	auipc	a1,0x1f
    8000f74a:	a7258593          	addi	a1,a1,-1422 # 8002e1b8 <__func__.0+0x2d0>
    8000f74e:	08f70263          	beq	a4,a5,8000f7d2 <priv_change_14+0x10c>
    8000f752:	0001f517          	auipc	a0,0x1f
    8000f756:	aa650513          	addi	a0,a0,-1370 # 8002e1f8 <__func__.0+0x310>
    8000f75a:	4d11b0ef          	jal	8002b42a <printf>
    8000f75e:	00049797          	auipc	a5,0x49
    8000f762:	8b37c783          	lbu	a5,-1869(a5) # 80058011 <excpt+0x1>
    8000f766:	cb81                	beqz	a5,8000f776 <priv_change_14+0xb0>
    8000f768:	00049717          	auipc	a4,0x49
    8000f76c:	8ac72703          	lw	a4,-1876(a4) # 80058014 <excpt+0x4>
    8000f770:	478d                	li	a5,3
    8000f772:	04f70a63          	beq	a4,a5,8000f7c6 <priv_change_14+0x100>
    8000f776:	0001f517          	auipc	a0,0x1f
    8000f77a:	a8a50513          	addi	a0,a0,-1398 # 8002e200 <__func__.0+0x318>
    8000f77e:	4ad1b0ef          	jal	8002b42a <printf>
    8000f782:	02900513          	li	a0,41
    8000f786:	1931a0ef          	jal	8002a118 <putchar>
    8000f78a:	4529                	li	a0,10
    8000f78c:	18d1a0ef          	jal	8002a118 <putchar>
    8000f790:	6014                	ld	a3,0(s0)
    8000f792:	f0001737          	lui	a4,0xf0001
    8000f796:	0712                	slli	a4,a4,0x4
    8000f798:	478d                	li	a5,3
    8000f79a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f79e:	1782                	slli	a5,a5,0x20
    8000f7a0:	8f75                	and	a4,a4,a3
    8000f7a2:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7a6:	0001f597          	auipc	a1,0x1f
    8000f7aa:	a1258593          	addi	a1,a1,-1518 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7ae:	04f70063          	beq	a4,a5,8000f7ee <priv_change_14+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7b2:	0001f517          	auipc	a0,0x1f
    8000f7b6:	aae50513          	addi	a0,a0,-1362 # 8002e260 <__func__.0+0x378>
    8000f7ba:	4711b0ef          	jal	8002b42a <printf>
    }

}
    8000f7be:	60a2                	ld	ra,8(sp)
    8000f7c0:	6402                	ld	s0,0(sp)
    8000f7c2:	0141                	addi	sp,sp,16
    8000f7c4:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7c6:	0002c797          	auipc	a5,0x2c
    8000f7ca:	05e7a783          	lw	a5,94(a5) # 8003b824 <curr_priv>
    8000f7ce:	dfd5                	beqz	a5,8000f78a <priv_change_14+0xc4>
    8000f7d0:	b75d                	j	8000f776 <priv_change_14+0xb0>
    8000f7d2:	0002c797          	auipc	a5,0x2c
    8000f7d6:	0527a783          	lw	a5,82(a5) # 8003b824 <curr_priv>
    8000f7da:	0001f597          	auipc	a1,0x1f
    8000f7de:	9ce58593          	addi	a1,a1,-1586 # 8002e1a8 <__func__.0+0x2c0>
    8000f7e2:	dba5                	beqz	a5,8000f752 <priv_change_14+0x8c>
    8000f7e4:	0001f597          	auipc	a1,0x1f
    8000f7e8:	9d458593          	addi	a1,a1,-1580 # 8002e1b8 <__func__.0+0x2d0>
    8000f7ec:	b79d                	j	8000f752 <priv_change_14+0x8c>
    8000f7ee:	0002c797          	auipc	a5,0x2c
    8000f7f2:	0367a783          	lw	a5,54(a5) # 8003b824 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7f6:	0001f597          	auipc	a1,0x1f
    8000f7fa:	9b258593          	addi	a1,a1,-1614 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7fe:	dbd5                	beqz	a5,8000f7b2 <priv_change_14+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f800:	0001f597          	auipc	a1,0x1f
    8000f804:	9b858593          	addi	a1,a1,-1608 # 8002e1b8 <__func__.0+0x2d0>
    8000f808:	0001f517          	auipc	a0,0x1f
    8000f80c:	a5850513          	addi	a0,a0,-1448 # 8002e260 <__func__.0+0x378>
    8000f810:	41b1b0ef          	jal	8002b42a <printf>
}
    8000f814:	60a2                	ld	ra,8(sp)
    8000f816:	6402                	ld	s0,0(sp)
    8000f818:	0141                	addi	sp,sp,16
    8000f81a:	8082                	ret

000000008000f81c <priv_change_15>:

bool priv_change_15(){
    8000f81c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f81e:	0001d597          	auipc	a1,0x1d
    8000f822:	02a58593          	addi	a1,a1,42 # 8002c848 <__func__.1>
    8000f826:	0001f517          	auipc	a0,0x1f
    8000f82a:	9a250513          	addi	a0,a0,-1630 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_15(){
    8000f82e:	e406                	sd	ra,8(sp)
    8000f830:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f832:	3f91b0ef          	jal	8002b42a <printf>
    8000f836:	4529                	li	a0,10
    8000f838:	0e11a0ef          	jal	8002a118 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f83c:	4511                	li	a0,4
    8000f83e:	ecaf10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f842:	fe3f10ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f846:	57fd                	li	a5,-1
    8000f848:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f84c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f850:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f854:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000f858:	db4f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f85c:	4509                	li	a0,2
    8000f85e:	eaaf10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f862:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f866:	08200593          	li	a1,130
    8000f86a:	00022617          	auipc	a2,0x22
    8000f86e:	95660613          	addi	a2,a2,-1706 # 800311c0 <__func__.0+0x32d8>
    8000f872:	0001f517          	auipc	a0,0x1f
    8000f876:	96e50513          	addi	a0,a0,-1682 # 8002e1e0 <__func__.0+0x2f8>
    8000f87a:	3b11b0ef          	jal	8002b42a <printf>
    8000f87e:	00048417          	auipc	s0,0x48
    8000f882:	79240413          	addi	s0,s0,1938 # 80058010 <excpt>
    8000f886:	6014                	ld	a3,0(s0)
    8000f888:	f0001737          	lui	a4,0xf0001
    8000f88c:	0712                	slli	a4,a4,0x4
    8000f88e:	478d                	li	a5,3
    8000f890:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f894:	1782                	slli	a5,a5,0x20
    8000f896:	8f75                	and	a4,a4,a3
    8000f898:	10078793          	addi	a5,a5,256
    8000f89c:	0001f597          	auipc	a1,0x1f
    8000f8a0:	91c58593          	addi	a1,a1,-1764 # 8002e1b8 <__func__.0+0x2d0>
    8000f8a4:	08f70463          	beq	a4,a5,8000f92c <priv_change_15+0x110>
    8000f8a8:	0001f517          	auipc	a0,0x1f
    8000f8ac:	95050513          	addi	a0,a0,-1712 # 8002e1f8 <__func__.0+0x310>
    8000f8b0:	37b1b0ef          	jal	8002b42a <printf>
    8000f8b4:	00048797          	auipc	a5,0x48
    8000f8b8:	75d7c783          	lbu	a5,1885(a5) # 80058011 <excpt+0x1>
    8000f8bc:	cb81                	beqz	a5,8000f8cc <priv_change_15+0xb0>
    8000f8be:	00048717          	auipc	a4,0x48
    8000f8c2:	75672703          	lw	a4,1878(a4) # 80058014 <excpt+0x4>
    8000f8c6:	478d                	li	a5,3
    8000f8c8:	04f70a63          	beq	a4,a5,8000f91c <priv_change_15+0x100>
    8000f8cc:	0001f517          	auipc	a0,0x1f
    8000f8d0:	93450513          	addi	a0,a0,-1740 # 8002e200 <__func__.0+0x318>
    8000f8d4:	3571b0ef          	jal	8002b42a <printf>
    8000f8d8:	02900513          	li	a0,41
    8000f8dc:	03d1a0ef          	jal	8002a118 <putchar>
    8000f8e0:	4529                	li	a0,10
    8000f8e2:	0371a0ef          	jal	8002a118 <putchar>
    8000f8e6:	6014                	ld	a3,0(s0)
    8000f8e8:	f0001737          	lui	a4,0xf0001
    8000f8ec:	0712                	slli	a4,a4,0x4
    8000f8ee:	478d                	li	a5,3
    8000f8f0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f8f4:	1782                	slli	a5,a5,0x20
    8000f8f6:	8f75                	and	a4,a4,a3
    8000f8f8:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8fc:	0001f597          	auipc	a1,0x1f
    8000f900:	8bc58593          	addi	a1,a1,-1860 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f904:	04f70463          	beq	a4,a5,8000f94c <priv_change_15+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f908:	0001f517          	auipc	a0,0x1f
    8000f90c:	95850513          	addi	a0,a0,-1704 # 8002e260 <__func__.0+0x378>
    8000f910:	31b1b0ef          	jal	8002b42a <printf>
    }

}
    8000f914:	60a2                	ld	ra,8(sp)
    8000f916:	6402                	ld	s0,0(sp)
    8000f918:	0141                	addi	sp,sp,16
    8000f91a:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f91c:	0002c717          	auipc	a4,0x2c
    8000f920:	f0872703          	lw	a4,-248(a4) # 8003b824 <curr_priv>
    8000f924:	4789                	li	a5,2
    8000f926:	faf713e3          	bne	a4,a5,8000f8cc <priv_change_15+0xb0>
    8000f92a:	bf5d                	j	8000f8e0 <priv_change_15+0xc4>
    8000f92c:	0002c717          	auipc	a4,0x2c
    8000f930:	ef872703          	lw	a4,-264(a4) # 8003b824 <curr_priv>
    8000f934:	4789                	li	a5,2
    8000f936:	0001f597          	auipc	a1,0x1f
    8000f93a:	87258593          	addi	a1,a1,-1934 # 8002e1a8 <__func__.0+0x2c0>
    8000f93e:	f6f705e3          	beq	a4,a5,8000f8a8 <priv_change_15+0x8c>
    8000f942:	0001f597          	auipc	a1,0x1f
    8000f946:	87658593          	addi	a1,a1,-1930 # 8002e1b8 <__func__.0+0x2d0>
    8000f94a:	bfb9                	j	8000f8a8 <priv_change_15+0x8c>
    8000f94c:	0002c717          	auipc	a4,0x2c
    8000f950:	ed872703          	lw	a4,-296(a4) # 8003b824 <curr_priv>
    8000f954:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f956:	0001f597          	auipc	a1,0x1f
    8000f95a:	85258593          	addi	a1,a1,-1966 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f95e:	faf705e3          	beq	a4,a5,8000f908 <priv_change_15+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f962:	0001f597          	auipc	a1,0x1f
    8000f966:	85658593          	addi	a1,a1,-1962 # 8002e1b8 <__func__.0+0x2d0>
    8000f96a:	0001f517          	auipc	a0,0x1f
    8000f96e:	8f650513          	addi	a0,a0,-1802 # 8002e260 <__func__.0+0x378>
    8000f972:	2b91b0ef          	jal	8002b42a <printf>
}
    8000f976:	60a2                	ld	ra,8(sp)
    8000f978:	6402                	ld	s0,0(sp)
    8000f97a:	0141                	addi	sp,sp,16
    8000f97c:	8082                	ret

000000008000f97e <priv_change_16>:

bool priv_change_16(){
    8000f97e:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f980:	0001d597          	auipc	a1,0x1d
    8000f984:	ed858593          	addi	a1,a1,-296 # 8002c858 <__func__.0>
    8000f988:	0001f517          	auipc	a0,0x1f
    8000f98c:	84050513          	addi	a0,a0,-1984 # 8002e1c8 <__func__.0+0x2e0>
bool priv_change_16(){
    8000f990:	e406                	sd	ra,8(sp)
    8000f992:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f994:	2971b0ef          	jal	8002b42a <printf>
    8000f998:	4529                	li	a0,10
    8000f99a:	77e1a0ef          	jal	8002a118 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f99e:	4511                	li	a0,4
    8000f9a0:	d68f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f9a4:	e81f10ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f9a8:	57fd                	li	a5,-1
    8000f9aa:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f9ae:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f9b2:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f9b6:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    8000f9ba:	c52f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f9be:	4509                	li	a0,2
    8000f9c0:	d48f10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f9c4:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9c8:	08200593          	li	a1,130
    8000f9cc:	00022617          	auipc	a2,0x22
    8000f9d0:	86460613          	addi	a2,a2,-1948 # 80031230 <__func__.0+0x3348>
    8000f9d4:	0001f517          	auipc	a0,0x1f
    8000f9d8:	80c50513          	addi	a0,a0,-2036 # 8002e1e0 <__func__.0+0x2f8>
    8000f9dc:	24f1b0ef          	jal	8002b42a <printf>
    8000f9e0:	00048417          	auipc	s0,0x48
    8000f9e4:	63040413          	addi	s0,s0,1584 # 80058010 <excpt>
    8000f9e8:	6014                	ld	a3,0(s0)
    8000f9ea:	f0001737          	lui	a4,0xf0001
    8000f9ee:	0712                	slli	a4,a4,0x4
    8000f9f0:	4785                	li	a5,1
    8000f9f2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f9f6:	1786                	slli	a5,a5,0x21
    8000f9f8:	8f75                	and	a4,a4,a3
    8000f9fa:	10078793          	addi	a5,a5,256
    8000f9fe:	0001e597          	auipc	a1,0x1e
    8000fa02:	7ba58593          	addi	a1,a1,1978 # 8002e1b8 <__func__.0+0x2d0>
    8000fa06:	08f70363          	beq	a4,a5,8000fa8c <priv_change_16+0x10e>
    8000fa0a:	0001e517          	auipc	a0,0x1e
    8000fa0e:	7ee50513          	addi	a0,a0,2030 # 8002e1f8 <__func__.0+0x310>
    8000fa12:	2191b0ef          	jal	8002b42a <printf>
    8000fa16:	00048797          	auipc	a5,0x48
    8000fa1a:	5fb7c783          	lbu	a5,1531(a5) # 80058011 <excpt+0x1>
    8000fa1e:	cb81                	beqz	a5,8000fa2e <priv_change_16+0xb0>
    8000fa20:	00048797          	auipc	a5,0x48
    8000fa24:	5f47a783          	lw	a5,1524(a5) # 80058014 <excpt+0x4>
    8000fa28:	4709                	li	a4,2
    8000fa2a:	04e78a63          	beq	a5,a4,8000fa7e <priv_change_16+0x100>
    8000fa2e:	0001e517          	auipc	a0,0x1e
    8000fa32:	7d250513          	addi	a0,a0,2002 # 8002e200 <__func__.0+0x318>
    8000fa36:	1f51b0ef          	jal	8002b42a <printf>
    8000fa3a:	02900513          	li	a0,41
    8000fa3e:	6da1a0ef          	jal	8002a118 <putchar>
    8000fa42:	4529                	li	a0,10
    8000fa44:	6d41a0ef          	jal	8002a118 <putchar>
    8000fa48:	6014                	ld	a3,0(s0)
    8000fa4a:	f0001737          	lui	a4,0xf0001
    8000fa4e:	0712                	slli	a4,a4,0x4
    8000fa50:	4785                	li	a5,1
    8000fa52:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fa56:	1786                	slli	a5,a5,0x21
    8000fa58:	8f75                	and	a4,a4,a3
    8000fa5a:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa5e:	0001e597          	auipc	a1,0x1e
    8000fa62:	75a58593          	addi	a1,a1,1882 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa66:	04f70363          	beq	a4,a5,8000faac <priv_change_16+0x12e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa6a:	0001e517          	auipc	a0,0x1e
    8000fa6e:	7f650513          	addi	a0,a0,2038 # 8002e260 <__func__.0+0x378>
    8000fa72:	1b91b0ef          	jal	8002b42a <printf>
    }

}
    8000fa76:	60a2                	ld	ra,8(sp)
    8000fa78:	6402                	ld	s0,0(sp)
    8000fa7a:	0141                	addi	sp,sp,16
    8000fa7c:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa7e:	0002c717          	auipc	a4,0x2c
    8000fa82:	da672703          	lw	a4,-602(a4) # 8003b824 <curr_priv>
    8000fa86:	faf714e3          	bne	a4,a5,8000fa2e <priv_change_16+0xb0>
    8000fa8a:	bf65                	j	8000fa42 <priv_change_16+0xc4>
    8000fa8c:	0002c717          	auipc	a4,0x2c
    8000fa90:	d9872703          	lw	a4,-616(a4) # 8003b824 <curr_priv>
    8000fa94:	4789                	li	a5,2
    8000fa96:	0001e597          	auipc	a1,0x1e
    8000fa9a:	71258593          	addi	a1,a1,1810 # 8002e1a8 <__func__.0+0x2c0>
    8000fa9e:	f6f706e3          	beq	a4,a5,8000fa0a <priv_change_16+0x8c>
    8000faa2:	0001e597          	auipc	a1,0x1e
    8000faa6:	71658593          	addi	a1,a1,1814 # 8002e1b8 <__func__.0+0x2d0>
    8000faaa:	b785                	j	8000fa0a <priv_change_16+0x8c>
    8000faac:	0002c717          	auipc	a4,0x2c
    8000fab0:	d7872703          	lw	a4,-648(a4) # 8003b824 <curr_priv>
    8000fab4:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fab6:	0001e597          	auipc	a1,0x1e
    8000faba:	6f258593          	addi	a1,a1,1778 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fabe:	faf706e3          	beq	a4,a5,8000fa6a <priv_change_16+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fac2:	0001e597          	auipc	a1,0x1e
    8000fac6:	6f658593          	addi	a1,a1,1782 # 8002e1b8 <__func__.0+0x2d0>
    8000faca:	0001e517          	auipc	a0,0x1e
    8000face:	79650513          	addi	a0,a0,1942 # 8002e260 <__func__.0+0x378>
    8000fad2:	1591b0ef          	jal	8002b42a <printf>
}
    8000fad6:	60a2                	ld	ra,8(sp)
    8000fad8:	6402                	ld	s0,0(sp)
    8000fada:	0141                	addi	sp,sp,16
    8000fadc:	8082                	ret

000000008000fade <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000fade:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fae0:	0001d597          	auipc	a1,0x1d
    8000fae4:	d8858593          	addi	a1,a1,-632 # 8002c868 <__func__.1>
    8000fae8:	0001e517          	auipc	a0,0x1e
    8000faec:	6e050513          	addi	a0,a0,1760 # 8002e1c8 <__func__.0+0x2e0>
bool addr_unaligned() {
    8000faf0:	ec06                	sd	ra,24(sp)
    8000faf2:	e822                	sd	s0,16(sp)
    8000faf4:	e426                	sd	s1,8(sp)
    8000faf6:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000faf8:	1331b0ef          	jal	8002b42a <printf>
    8000fafc:	4529                	li	a0,10
    8000fafe:	61a1a0ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    8000fb02:	b0af10ef          	jal	80000e0c <test_setup_except_function>
    
    
    hspt_init();        
    8000fb06:	adbf00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000fb0a:	450d                	li	a0,3
    8000fb0c:	bfcf10ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fb10:	afcf10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000fb14:	001007b7          	lui	a5,0x100
    8000fb18:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb1c:	07b2                	slli	a5,a5,0xc
    8000fb1e:	0785                	addi	a5,a5,1
    8000fb20:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fb24:	08200593          	li	a1,130
    8000fb28:	00021617          	auipc	a2,0x21
    8000fb2c:	77860613          	addi	a2,a2,1912 # 800312a0 <__func__.0+0x33b8>
    8000fb30:	0001e517          	auipc	a0,0x1e
    8000fb34:	6b050513          	addi	a0,a0,1712 # 8002e1e0 <__func__.0+0x2f8>
    8000fb38:	0f31b0ef          	jal	8002b42a <printf>
    8000fb3c:	00048797          	auipc	a5,0x48
    8000fb40:	4d57c783          	lbu	a5,1237(a5) # 80058011 <excpt+0x1>
    8000fb44:	0001e597          	auipc	a1,0x1e
    8000fb48:	66458593          	addi	a1,a1,1636 # 8002e1a8 <__func__.0+0x2c0>
    8000fb4c:	c789                	beqz	a5,8000fb56 <addr_unaligned+0x78>
    8000fb4e:	0001e597          	auipc	a1,0x1e
    8000fb52:	66a58593          	addi	a1,a1,1642 # 8002e1b8 <__func__.0+0x2d0>
    8000fb56:	0001e517          	auipc	a0,0x1e
    8000fb5a:	6a250513          	addi	a0,a0,1698 # 8002e1f8 <__func__.0+0x310>
    8000fb5e:	0cd1b0ef          	jal	8002b42a <printf>
    8000fb62:	00048797          	auipc	a5,0x48
    8000fb66:	4af7c783          	lbu	a5,1199(a5) # 80058011 <excpt+0x1>
    8000fb6a:	4c079c63          	bnez	a5,80010042 <addr_unaligned+0x564>
    8000fb6e:	4529                	li	a0,10
    8000fb70:	5a81a0ef          	jal	8002a118 <putchar>
    8000fb74:	00048497          	auipc	s1,0x48
    8000fb78:	49d4c483          	lbu	s1,1181(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fb7c:	a90f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000fb80:	001007b7          	lui	a5,0x100
    8000fb84:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb88:	07b2                	slli	a5,a5,0xc
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fb8a:	00048917          	auipc	s2,0x48
    8000fb8e:	48690913          	addi	s2,s2,1158 # 80058010 <excpt>
    8000fb92:	0785                	addi	a5,a5,1
    8000fb94:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000fb98:	08200593          	li	a1,130
    8000fb9c:	00021617          	auipc	a2,0x21
    8000fba0:	73460613          	addi	a2,a2,1844 # 800312d0 <__func__.0+0x33e8>
    8000fba4:	0001e517          	auipc	a0,0x1e
    8000fba8:	63c50513          	addi	a0,a0,1596 # 8002e1e0 <__func__.0+0x2f8>
    8000fbac:	07f1b0ef          	jal	8002b42a <printf>
    8000fbb0:	00048797          	auipc	a5,0x48
    8000fbb4:	4617c783          	lbu	a5,1121(a5) # 80058011 <excpt+0x1>
    8000fbb8:	0001e597          	auipc	a1,0x1e
    8000fbbc:	60058593          	addi	a1,a1,1536 # 8002e1b8 <__func__.0+0x2d0>
    8000fbc0:	cf91                	beqz	a5,8000fbdc <addr_unaligned+0xfe>
    8000fbc2:	00893703          	ld	a4,8(s2)
    8000fbc6:	4791                	li	a5,4
    8000fbc8:	0001e597          	auipc	a1,0x1e
    8000fbcc:	5e058593          	addi	a1,a1,1504 # 8002e1a8 <__func__.0+0x2c0>
    8000fbd0:	00f70663          	beq	a4,a5,8000fbdc <addr_unaligned+0xfe>
    8000fbd4:	0001e597          	auipc	a1,0x1e
    8000fbd8:	5e458593          	addi	a1,a1,1508 # 8002e1b8 <__func__.0+0x2d0>
    8000fbdc:	0001e517          	auipc	a0,0x1e
    8000fbe0:	61c50513          	addi	a0,a0,1564 # 8002e1f8 <__func__.0+0x310>
    8000fbe4:	0471b0ef          	jal	8002b42a <printf>
    8000fbe8:	00048797          	auipc	a5,0x48
    8000fbec:	4297c783          	lbu	a5,1065(a5) # 80058011 <excpt+0x1>
    8000fbf0:	c791                	beqz	a5,8000fbfc <addr_unaligned+0x11e>
    8000fbf2:	00893703          	ld	a4,8(s2)
    8000fbf6:	4791                	li	a5,4
    8000fbf8:	00f70c63          	beq	a4,a5,8000fc10 <addr_unaligned+0x132>
    8000fbfc:	0001e517          	auipc	a0,0x1e
    8000fc00:	60450513          	addi	a0,a0,1540 # 8002e200 <__func__.0+0x318>
    8000fc04:	0271b0ef          	jal	8002b42a <printf>
    8000fc08:	02900513          	li	a0,41
    8000fc0c:	50c1a0ef          	jal	8002a118 <putchar>
    8000fc10:	4529                	li	a0,10
    8000fc12:	5061a0ef          	jal	8002a118 <putchar>
    8000fc16:	4401                	li	s0,0
    8000fc18:	e499                	bnez	s1,8000fc26 <addr_unaligned+0x148>
    8000fc1a:	00048797          	auipc	a5,0x48
    8000fc1e:	3f77c783          	lbu	a5,1015(a5) # 80058011 <excpt+0x1>
    8000fc22:	3e079863          	bnez	a5,80010012 <addr_unaligned+0x534>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fc26:	9e6f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000fc2a:	001007b7          	lui	a5,0x100
    8000fc2e:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fc32:	07b2                	slli	a5,a5,0xc
    8000fc34:	0785                	addi	a5,a5,1
    8000fc36:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000fc3a:	08200593          	li	a1,130
    8000fc3e:	00021617          	auipc	a2,0x21
    8000fc42:	6ca60613          	addi	a2,a2,1738 # 80031308 <__func__.0+0x3420>
    8000fc46:	0001e517          	auipc	a0,0x1e
    8000fc4a:	59a50513          	addi	a0,a0,1434 # 8002e1e0 <__func__.0+0x2f8>
    8000fc4e:	7dc1b0ef          	jal	8002b42a <printf>
    8000fc52:	00048797          	auipc	a5,0x48
    8000fc56:	3bf7c783          	lbu	a5,959(a5) # 80058011 <excpt+0x1>
    8000fc5a:	0001e597          	auipc	a1,0x1e
    8000fc5e:	55e58593          	addi	a1,a1,1374 # 8002e1b8 <__func__.0+0x2d0>
    8000fc62:	cf91                	beqz	a5,8000fc7e <addr_unaligned+0x1a0>
    8000fc64:	00893703          	ld	a4,8(s2)
    8000fc68:	4791                	li	a5,4
    8000fc6a:	0001e597          	auipc	a1,0x1e
    8000fc6e:	53e58593          	addi	a1,a1,1342 # 8002e1a8 <__func__.0+0x2c0>
    8000fc72:	00f70663          	beq	a4,a5,8000fc7e <addr_unaligned+0x1a0>
    8000fc76:	0001e597          	auipc	a1,0x1e
    8000fc7a:	54258593          	addi	a1,a1,1346 # 8002e1b8 <__func__.0+0x2d0>
    8000fc7e:	0001e517          	auipc	a0,0x1e
    8000fc82:	57a50513          	addi	a0,a0,1402 # 8002e1f8 <__func__.0+0x310>
    8000fc86:	7a41b0ef          	jal	8002b42a <printf>
    8000fc8a:	00048797          	auipc	a5,0x48
    8000fc8e:	3877c783          	lbu	a5,903(a5) # 80058011 <excpt+0x1>
    8000fc92:	c791                	beqz	a5,8000fc9e <addr_unaligned+0x1c0>
    8000fc94:	00893703          	ld	a4,8(s2)
    8000fc98:	4791                	li	a5,4
    8000fc9a:	00f70c63          	beq	a4,a5,8000fcb2 <addr_unaligned+0x1d4>
    8000fc9e:	0001e517          	auipc	a0,0x1e
    8000fca2:	56250513          	addi	a0,a0,1378 # 8002e200 <__func__.0+0x318>
    8000fca6:	7841b0ef          	jal	8002b42a <printf>
    8000fcaa:	02900513          	li	a0,41
    8000fcae:	46a1a0ef          	jal	8002a118 <putchar>
    8000fcb2:	4529                	li	a0,10
    8000fcb4:	4641a0ef          	jal	8002a118 <putchar>
    8000fcb8:	c801                	beqz	s0,8000fcc8 <addr_unaligned+0x1ea>
    8000fcba:	00048797          	auipc	a5,0x48
    8000fcbe:	3577c783          	lbu	a5,855(a5) # 80058011 <excpt+0x1>
    8000fcc2:	4401                	li	s0,0
    8000fcc4:	34079163          	bnez	a5,80010006 <addr_unaligned+0x528>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000fcc8:	001004b7          	lui	s1,0x100
    8000fccc:	04b48493          	addi	s1,s1,75 # 10004b <STACK_SIZE+0x4b>
    8000fcd0:	04b2                	slli	s1,s1,0xc
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fcd2:	93af10ef          	jal	80000e0c <test_setup_except_function>
    8000fcd6:	0485                	addi	s1,s1,1
    8000fcd8:	0004b483          	ld	s1,0(s1)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000fcdc:	08200593          	li	a1,130
    8000fce0:	00021617          	auipc	a2,0x21
    8000fce4:	66060613          	addi	a2,a2,1632 # 80031340 <__func__.0+0x3458>
    8000fce8:	0001e517          	auipc	a0,0x1e
    8000fcec:	4f850513          	addi	a0,a0,1272 # 8002e1e0 <__func__.0+0x2f8>
    8000fcf0:	73a1b0ef          	jal	8002b42a <printf>
    8000fcf4:	00048797          	auipc	a5,0x48
    8000fcf8:	31d7c783          	lbu	a5,797(a5) # 80058011 <excpt+0x1>
    8000fcfc:	0001e597          	auipc	a1,0x1e
    8000fd00:	4bc58593          	addi	a1,a1,1212 # 8002e1b8 <__func__.0+0x2d0>
    8000fd04:	cf91                	beqz	a5,8000fd20 <addr_unaligned+0x242>
    8000fd06:	00893703          	ld	a4,8(s2)
    8000fd0a:	4791                	li	a5,4
    8000fd0c:	0001e597          	auipc	a1,0x1e
    8000fd10:	49c58593          	addi	a1,a1,1180 # 8002e1a8 <__func__.0+0x2c0>
    8000fd14:	00f70663          	beq	a4,a5,8000fd20 <addr_unaligned+0x242>
    8000fd18:	0001e597          	auipc	a1,0x1e
    8000fd1c:	4a058593          	addi	a1,a1,1184 # 8002e1b8 <__func__.0+0x2d0>
    8000fd20:	0001e517          	auipc	a0,0x1e
    8000fd24:	4d850513          	addi	a0,a0,1240 # 8002e1f8 <__func__.0+0x310>
    8000fd28:	7021b0ef          	jal	8002b42a <printf>
    8000fd2c:	00048797          	auipc	a5,0x48
    8000fd30:	2e57c783          	lbu	a5,741(a5) # 80058011 <excpt+0x1>
    8000fd34:	c791                	beqz	a5,8000fd40 <addr_unaligned+0x262>
    8000fd36:	00893703          	ld	a4,8(s2)
    8000fd3a:	4791                	li	a5,4
    8000fd3c:	00f70c63          	beq	a4,a5,8000fd54 <addr_unaligned+0x276>
    8000fd40:	0001e517          	auipc	a0,0x1e
    8000fd44:	4c050513          	addi	a0,a0,1216 # 8002e200 <__func__.0+0x318>
    8000fd48:	6e21b0ef          	jal	8002b42a <printf>
    8000fd4c:	02900513          	li	a0,41
    8000fd50:	3c81a0ef          	jal	8002a118 <putchar>
    8000fd54:	4529                	li	a0,10
    8000fd56:	3c21a0ef          	jal	8002a118 <putchar>
    8000fd5a:	c801                	beqz	s0,8000fd6a <addr_unaligned+0x28c>
    8000fd5c:	00048797          	auipc	a5,0x48
    8000fd60:	2b57c783          	lbu	a5,693(a5) # 80058011 <excpt+0x1>
    8000fd64:	4401                	li	s0,0
    8000fd66:	2c079863          	bnez	a5,80010036 <addr_unaligned+0x558>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fd6a:	8a2f10ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000fd6e:	001007b7          	lui	a5,0x100
    8000fd72:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fd76:	07b2                	slli	a5,a5,0xc
    8000fd78:	0785                	addi	a5,a5,1
    8000fd7a:	00978023          	sb	s1,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000fd7e:	08200593          	li	a1,130
    8000fd82:	00021617          	auipc	a2,0x21
    8000fd86:	5f660613          	addi	a2,a2,1526 # 80031378 <__func__.0+0x3490>
    8000fd8a:	0001e517          	auipc	a0,0x1e
    8000fd8e:	45650513          	addi	a0,a0,1110 # 8002e1e0 <__func__.0+0x2f8>
    8000fd92:	6981b0ef          	jal	8002b42a <printf>
    8000fd96:	00048797          	auipc	a5,0x48
    8000fd9a:	27b7c783          	lbu	a5,635(a5) # 80058011 <excpt+0x1>
    8000fd9e:	0001e597          	auipc	a1,0x1e
    8000fda2:	41a58593          	addi	a1,a1,1050 # 8002e1b8 <__func__.0+0x2d0>
    8000fda6:	e789                	bnez	a5,8000fdb0 <addr_unaligned+0x2d2>
    8000fda8:	0001e597          	auipc	a1,0x1e
    8000fdac:	40058593          	addi	a1,a1,1024 # 8002e1a8 <__func__.0+0x2c0>
    8000fdb0:	0001e517          	auipc	a0,0x1e
    8000fdb4:	44850513          	addi	a0,a0,1096 # 8002e1f8 <__func__.0+0x310>
    8000fdb8:	6721b0ef          	jal	8002b42a <printf>
    8000fdbc:	00048797          	auipc	a5,0x48
    8000fdc0:	2557c783          	lbu	a5,597(a5) # 80058011 <excpt+0x1>
    8000fdc4:	28079a63          	bnez	a5,80010058 <addr_unaligned+0x57a>
    8000fdc8:	4529                	li	a0,10
    8000fdca:	34e1a0ef          	jal	8002a118 <putchar>
    8000fdce:	c419                	beqz	s0,8000fddc <addr_unaligned+0x2fe>
    8000fdd0:	00048417          	auipc	s0,0x48
    8000fdd4:	24144403          	lbu	s0,577(s0) # 80058011 <excpt+0x1>
    8000fdd8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fddc:	830f10ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000fde0:	001007b7          	lui	a5,0x100
    8000fde4:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fde8:	07b2                	slli	a5,a5,0xc
    8000fdea:	0785                	addi	a5,a5,1
    8000fdec:	00979023          	sh	s1,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000fdf0:	08200593          	li	a1,130
    8000fdf4:	00021617          	auipc	a2,0x21
    8000fdf8:	5b460613          	addi	a2,a2,1460 # 800313a8 <__func__.0+0x34c0>
    8000fdfc:	0001e517          	auipc	a0,0x1e
    8000fe00:	3e450513          	addi	a0,a0,996 # 8002e1e0 <__func__.0+0x2f8>
    8000fe04:	6261b0ef          	jal	8002b42a <printf>
    8000fe08:	00048797          	auipc	a5,0x48
    8000fe0c:	2097c783          	lbu	a5,521(a5) # 80058011 <excpt+0x1>
    8000fe10:	0001e597          	auipc	a1,0x1e
    8000fe14:	3a858593          	addi	a1,a1,936 # 8002e1b8 <__func__.0+0x2d0>
    8000fe18:	cf91                	beqz	a5,8000fe34 <addr_unaligned+0x356>
    8000fe1a:	00893703          	ld	a4,8(s2)
    8000fe1e:	4799                	li	a5,6
    8000fe20:	0001e597          	auipc	a1,0x1e
    8000fe24:	38858593          	addi	a1,a1,904 # 8002e1a8 <__func__.0+0x2c0>
    8000fe28:	00f70663          	beq	a4,a5,8000fe34 <addr_unaligned+0x356>
    8000fe2c:	0001e597          	auipc	a1,0x1e
    8000fe30:	38c58593          	addi	a1,a1,908 # 8002e1b8 <__func__.0+0x2d0>
    8000fe34:	0001e517          	auipc	a0,0x1e
    8000fe38:	3c450513          	addi	a0,a0,964 # 8002e1f8 <__func__.0+0x310>
    8000fe3c:	5ee1b0ef          	jal	8002b42a <printf>
    8000fe40:	00048797          	auipc	a5,0x48
    8000fe44:	1d17c783          	lbu	a5,465(a5) # 80058011 <excpt+0x1>
    8000fe48:	c791                	beqz	a5,8000fe54 <addr_unaligned+0x376>
    8000fe4a:	00893703          	ld	a4,8(s2)
    8000fe4e:	4799                	li	a5,6
    8000fe50:	00f70c63          	beq	a4,a5,8000fe68 <addr_unaligned+0x38a>
    8000fe54:	0001e517          	auipc	a0,0x1e
    8000fe58:	3ac50513          	addi	a0,a0,940 # 8002e200 <__func__.0+0x318>
    8000fe5c:	5ce1b0ef          	jal	8002b42a <printf>
    8000fe60:	02900513          	li	a0,41
    8000fe64:	2b41a0ef          	jal	8002a118 <putchar>
    8000fe68:	4529                	li	a0,10
    8000fe6a:	2ae1a0ef          	jal	8002a118 <putchar>
    8000fe6e:	c801                	beqz	s0,8000fe7e <addr_unaligned+0x3a0>
    8000fe70:	00048797          	auipc	a5,0x48
    8000fe74:	1a17c783          	lbu	a5,417(a5) # 80058011 <excpt+0x1>
    8000fe78:	4401                	li	s0,0
    8000fe7a:	1a079863          	bnez	a5,8001002a <addr_unaligned+0x54c>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fe7e:	f8ff00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000fe82:	001007b7          	lui	a5,0x100
    8000fe86:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe8a:	07b2                	slli	a5,a5,0xc
    8000fe8c:	0785                	addi	a5,a5,1
    8000fe8e:	0097a023          	sw	s1,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000fe92:	08200593          	li	a1,130
    8000fe96:	00021617          	auipc	a2,0x21
    8000fe9a:	54a60613          	addi	a2,a2,1354 # 800313e0 <__func__.0+0x34f8>
    8000fe9e:	0001e517          	auipc	a0,0x1e
    8000fea2:	34250513          	addi	a0,a0,834 # 8002e1e0 <__func__.0+0x2f8>
    8000fea6:	5841b0ef          	jal	8002b42a <printf>
    8000feaa:	00048797          	auipc	a5,0x48
    8000feae:	1677c783          	lbu	a5,359(a5) # 80058011 <excpt+0x1>
    8000feb2:	0001e597          	auipc	a1,0x1e
    8000feb6:	30658593          	addi	a1,a1,774 # 8002e1b8 <__func__.0+0x2d0>
    8000feba:	cf91                	beqz	a5,8000fed6 <addr_unaligned+0x3f8>
    8000febc:	00893703          	ld	a4,8(s2)
    8000fec0:	4799                	li	a5,6
    8000fec2:	0001e597          	auipc	a1,0x1e
    8000fec6:	2e658593          	addi	a1,a1,742 # 8002e1a8 <__func__.0+0x2c0>
    8000feca:	00f70663          	beq	a4,a5,8000fed6 <addr_unaligned+0x3f8>
    8000fece:	0001e597          	auipc	a1,0x1e
    8000fed2:	2ea58593          	addi	a1,a1,746 # 8002e1b8 <__func__.0+0x2d0>
    8000fed6:	0001e517          	auipc	a0,0x1e
    8000feda:	32250513          	addi	a0,a0,802 # 8002e1f8 <__func__.0+0x310>
    8000fede:	54c1b0ef          	jal	8002b42a <printf>
    8000fee2:	00048797          	auipc	a5,0x48
    8000fee6:	12f7c783          	lbu	a5,303(a5) # 80058011 <excpt+0x1>
    8000feea:	c791                	beqz	a5,8000fef6 <addr_unaligned+0x418>
    8000feec:	00893703          	ld	a4,8(s2)
    8000fef0:	4799                	li	a5,6
    8000fef2:	00f70c63          	beq	a4,a5,8000ff0a <addr_unaligned+0x42c>
    8000fef6:	0001e517          	auipc	a0,0x1e
    8000fefa:	30a50513          	addi	a0,a0,778 # 8002e200 <__func__.0+0x318>
    8000fefe:	52c1b0ef          	jal	8002b42a <printf>
    8000ff02:	02900513          	li	a0,41
    8000ff06:	2121a0ef          	jal	8002a118 <putchar>
    8000ff0a:	4529                	li	a0,10
    8000ff0c:	20c1a0ef          	jal	8002a118 <putchar>
    8000ff10:	c801                	beqz	s0,8000ff20 <addr_unaligned+0x442>
    8000ff12:	00048797          	auipc	a5,0x48
    8000ff16:	0ff7c783          	lbu	a5,255(a5) # 80058011 <excpt+0x1>
    8000ff1a:	4401                	li	s0,0
    8000ff1c:	10079163          	bnez	a5,8001001e <addr_unaligned+0x540>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000ff20:	eedf00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000ff24:	001007b7          	lui	a5,0x100
    8000ff28:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000ff2c:	07b2                	slli	a5,a5,0xc
    8000ff2e:	0785                	addi	a5,a5,1
    8000ff30:	0097b023          	sd	s1,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff34:	08200593          	li	a1,130
    8000ff38:	00021617          	auipc	a2,0x21
    8000ff3c:	4e060613          	addi	a2,a2,1248 # 80031418 <__func__.0+0x3530>
    8000ff40:	0001e517          	auipc	a0,0x1e
    8000ff44:	2a050513          	addi	a0,a0,672 # 8002e1e0 <__func__.0+0x2f8>
    8000ff48:	4e21b0ef          	jal	8002b42a <printf>
    8000ff4c:	00048797          	auipc	a5,0x48
    8000ff50:	0c57c783          	lbu	a5,197(a5) # 80058011 <excpt+0x1>
    8000ff54:	0001e597          	auipc	a1,0x1e
    8000ff58:	26458593          	addi	a1,a1,612 # 8002e1b8 <__func__.0+0x2d0>
    8000ff5c:	cf91                	beqz	a5,8000ff78 <addr_unaligned+0x49a>
    8000ff5e:	00893703          	ld	a4,8(s2)
    8000ff62:	4799                	li	a5,6
    8000ff64:	0001e597          	auipc	a1,0x1e
    8000ff68:	24458593          	addi	a1,a1,580 # 8002e1a8 <__func__.0+0x2c0>
    8000ff6c:	00f70663          	beq	a4,a5,8000ff78 <addr_unaligned+0x49a>
    8000ff70:	0001e597          	auipc	a1,0x1e
    8000ff74:	24858593          	addi	a1,a1,584 # 8002e1b8 <__func__.0+0x2d0>
    8000ff78:	0001e517          	auipc	a0,0x1e
    8000ff7c:	28050513          	addi	a0,a0,640 # 8002e1f8 <__func__.0+0x310>
    8000ff80:	4aa1b0ef          	jal	8002b42a <printf>
    8000ff84:	00048797          	auipc	a5,0x48
    8000ff88:	08d7c783          	lbu	a5,141(a5) # 80058011 <excpt+0x1>
    8000ff8c:	c791                	beqz	a5,8000ff98 <addr_unaligned+0x4ba>
    8000ff8e:	00893703          	ld	a4,8(s2)
    8000ff92:	4799                	li	a5,6
    8000ff94:	00f70c63          	beq	a4,a5,8000ffac <addr_unaligned+0x4ce>
    8000ff98:	0001e517          	auipc	a0,0x1e
    8000ff9c:	26850513          	addi	a0,a0,616 # 8002e200 <__func__.0+0x318>
    8000ffa0:	48a1b0ef          	jal	8002b42a <printf>
    8000ffa4:	02900513          	li	a0,41
    8000ffa8:	1701a0ef          	jal	8002a118 <putchar>
    8000ffac:	4529                	li	a0,10
    8000ffae:	16a1a0ef          	jal	8002a118 <putchar>
    8000ffb2:	c01d                	beqz	s0,8000ffd8 <addr_unaligned+0x4fa>
    8000ffb4:	00048417          	auipc	s0,0x48
    8000ffb8:	05d44403          	lbu	s0,93(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000ffbc:	0001e597          	auipc	a1,0x1e
    8000ffc0:	1fc58593          	addi	a1,a1,508 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ffc4:	cc19                	beqz	s0,8000ffe2 <addr_unaligned+0x504>
    8000ffc6:	00893703          	ld	a4,8(s2)
    8000ffca:	4799                	li	a5,6
    TEST_END();
    8000ffcc:	0001e597          	auipc	a1,0x1e
    8000ffd0:	1dc58593          	addi	a1,a1,476 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ffd4:	00f70763          	beq	a4,a5,8000ffe2 <addr_unaligned+0x504>
    8000ffd8:	4401                	li	s0,0
    TEST_END();
    8000ffda:	0001e597          	auipc	a1,0x1e
    8000ffde:	1de58593          	addi	a1,a1,478 # 8002e1b8 <__func__.0+0x2d0>
    8000ffe2:	0001e517          	auipc	a0,0x1e
    8000ffe6:	27e50513          	addi	a0,a0,638 # 8002e260 <__func__.0+0x378>
    8000ffea:	4401b0ef          	jal	8002b42a <printf>
    8000ffee:	4511                	li	a0,4
    8000fff0:	f19f00ef          	jal	80000f08 <goto_priv>
    8000fff4:	831f10ef          	jal	80001824 <reset_state>

    8000fff8:	60e2                	ld	ra,24(sp)
    8000fffa:	8522                	mv	a0,s0
    8000fffc:	6442                	ld	s0,16(sp)
    8000fffe:	64a2                	ld	s1,8(sp)
    80010000:	6902                	ld	s2,0(sp)
    80010002:	6105                	addi	sp,sp,32
    80010004:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    80010006:	00893403          	ld	s0,8(s2)
    8001000a:	1471                	addi	s0,s0,-4
    8001000c:	00143413          	seqz	s0,s0
    80010010:	b965                	j	8000fcc8 <addr_unaligned+0x1ea>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    80010012:	00893403          	ld	s0,8(s2)
    80010016:	1471                	addi	s0,s0,-4
    80010018:	00143413          	seqz	s0,s0
    8001001c:	b129                	j	8000fc26 <addr_unaligned+0x148>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8001001e:	00893403          	ld	s0,8(s2)
    80010022:	1469                	addi	s0,s0,-6
    80010024:	00143413          	seqz	s0,s0
    80010028:	bde5                	j	8000ff20 <addr_unaligned+0x442>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8001002a:	00893403          	ld	s0,8(s2)
    8001002e:	1469                	addi	s0,s0,-6
    80010030:	00143413          	seqz	s0,s0
    80010034:	b5a9                	j	8000fe7e <addr_unaligned+0x3a0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    80010036:	00893403          	ld	s0,8(s2)
    8001003a:	1471                	addi	s0,s0,-4
    8001003c:	00143413          	seqz	s0,s0
    80010040:	b32d                	j	8000fd6a <addr_unaligned+0x28c>
    TEST_ASSERT("load byte address is not aligned successful",         
    80010042:	0001e517          	auipc	a0,0x1e
    80010046:	1be50513          	addi	a0,a0,446 # 8002e200 <__func__.0+0x318>
    8001004a:	3e01b0ef          	jal	8002b42a <printf>
    8001004e:	02900513          	li	a0,41
    80010052:	0c61a0ef          	jal	8002a118 <putchar>
    80010056:	be21                	j	8000fb6e <addr_unaligned+0x90>
    TEST_ASSERT("store byte address is not aligned successful",         
    80010058:	0001e517          	auipc	a0,0x1e
    8001005c:	1a850513          	addi	a0,a0,424 # 8002e200 <__func__.0+0x318>
    80010060:	3ca1b0ef          	jal	8002b42a <printf>
    80010064:	02900513          	li	a0,41
    80010068:	0b01a0ef          	jal	8002a118 <putchar>
    8001006c:	bbb1                	j	8000fdc8 <addr_unaligned+0x2ea>

000000008001006e <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8001006e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010070:	0001d597          	auipc	a1,0x1d
    80010074:	80858593          	addi	a1,a1,-2040 # 8002c878 <__func__.14>
    80010078:	0001e517          	auipc	a0,0x1e
    8001007c:	15050513          	addi	a0,a0,336 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_1() {
    80010080:	ec06                	sd	ra,24(sp)
    80010082:	e822                	sd	s0,16(sp)
    80010084:	e426                	sd	s1,8(sp)
    TEST_START();
    80010086:	3a41b0ef          	jal	8002b42a <printf>
    8001008a:	4529                	li	a0,10
    8001008c:	08c1a0ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80010090:	d7df00ef          	jal	80000e0c <test_setup_except_function>
    // ); 
    // printf("%d",excpt.triggered);
    // printf("%d",excpt.cause);

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    80010094:	4511                	li	a0,4
    80010096:	e73f00ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8001009a:	6785                	lui	a5,0x1
    8001009c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8001009e:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    800100a2:	08200593          	li	a1,130
    800100a6:	00021617          	auipc	a2,0x21
    800100aa:	3b260613          	addi	a2,a2,946 # 80031458 <__func__.0+0x3570>
    800100ae:	0001e517          	auipc	a0,0x1e
    800100b2:	13250513          	addi	a0,a0,306 # 8002e1e0 <__func__.0+0x2f8>
    800100b6:	3741b0ef          	jal	8002b42a <printf>
    800100ba:	00048797          	auipc	a5,0x48
    800100be:	f577c783          	lbu	a5,-169(a5) # 80058011 <excpt+0x1>
    800100c2:	00048497          	auipc	s1,0x48
    800100c6:	f4e48493          	addi	s1,s1,-178 # 80058010 <excpt>
    800100ca:	0001e597          	auipc	a1,0x1e
    800100ce:	0ee58593          	addi	a1,a1,238 # 8002e1b8 <__func__.0+0x2d0>
    800100d2:	cf89                	beqz	a5,800100ec <illegal_except_1+0x7e>
    800100d4:	6498                	ld	a4,8(s1)
    800100d6:	4789                	li	a5,2
    800100d8:	0001e597          	auipc	a1,0x1e
    800100dc:	0d058593          	addi	a1,a1,208 # 8002e1a8 <__func__.0+0x2c0>
    800100e0:	00f70663          	beq	a4,a5,800100ec <illegal_except_1+0x7e>
    800100e4:	0001e597          	auipc	a1,0x1e
    800100e8:	0d458593          	addi	a1,a1,212 # 8002e1b8 <__func__.0+0x2d0>
    800100ec:	0001e517          	auipc	a0,0x1e
    800100f0:	10c50513          	addi	a0,a0,268 # 8002e1f8 <__func__.0+0x310>
    800100f4:	3361b0ef          	jal	8002b42a <printf>
    800100f8:	00048797          	auipc	a5,0x48
    800100fc:	f197c783          	lbu	a5,-231(a5) # 80058011 <excpt+0x1>
    80010100:	c789                	beqz	a5,8001010a <illegal_except_1+0x9c>
    80010102:	6498                	ld	a4,8(s1)
    80010104:	4789                	li	a5,2
    80010106:	00f70c63          	beq	a4,a5,8001011e <illegal_except_1+0xb0>
    8001010a:	0001e517          	auipc	a0,0x1e
    8001010e:	0f650513          	addi	a0,a0,246 # 8002e200 <__func__.0+0x318>
    80010112:	3181b0ef          	jal	8002b42a <printf>
    80010116:	02900513          	li	a0,41
    8001011a:	7ff190ef          	jal	8002a118 <putchar>
    8001011e:	4529                	li	a0,10
    80010120:	7f9190ef          	jal	8002a118 <putchar>
    80010124:	00048797          	auipc	a5,0x48
    80010128:	eed7c783          	lbu	a5,-275(a5) # 80058011 <excpt+0x1>
    8001012c:	4401                	li	s0,0
    8001012e:	c789                	beqz	a5,80010138 <illegal_except_1+0xca>
    80010130:	6480                	ld	s0,8(s1)
    80010132:	1479                	addi	s0,s0,-2
    80010134:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    80010138:	450d                	li	a0,3
    8001013a:	dcff00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001013e:	ccff00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIE);
    80010142:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010146:	08200593          	li	a1,130
    8001014a:	00021617          	auipc	a2,0x21
    8001014e:	35660613          	addi	a2,a2,854 # 800314a0 <__func__.0+0x35b8>
    80010152:	0001e517          	auipc	a0,0x1e
    80010156:	08e50513          	addi	a0,a0,142 # 8002e1e0 <__func__.0+0x2f8>
    8001015a:	2d01b0ef          	jal	8002b42a <printf>
    8001015e:	00048797          	auipc	a5,0x48
    80010162:	eb37c783          	lbu	a5,-333(a5) # 80058011 <excpt+0x1>
    80010166:	0001e597          	auipc	a1,0x1e
    8001016a:	05258593          	addi	a1,a1,82 # 8002e1b8 <__func__.0+0x2d0>
    8001016e:	cf89                	beqz	a5,80010188 <illegal_except_1+0x11a>
    80010170:	6498                	ld	a4,8(s1)
    80010172:	4789                	li	a5,2
    80010174:	0001e597          	auipc	a1,0x1e
    80010178:	03458593          	addi	a1,a1,52 # 8002e1a8 <__func__.0+0x2c0>
    8001017c:	00f70663          	beq	a4,a5,80010188 <illegal_except_1+0x11a>
    80010180:	0001e597          	auipc	a1,0x1e
    80010184:	03858593          	addi	a1,a1,56 # 8002e1b8 <__func__.0+0x2d0>
    80010188:	0001e517          	auipc	a0,0x1e
    8001018c:	07050513          	addi	a0,a0,112 # 8002e1f8 <__func__.0+0x310>
    80010190:	29a1b0ef          	jal	8002b42a <printf>
    80010194:	00048797          	auipc	a5,0x48
    80010198:	e7d7c783          	lbu	a5,-387(a5) # 80058011 <excpt+0x1>
    8001019c:	c789                	beqz	a5,800101a6 <illegal_except_1+0x138>
    8001019e:	6498                	ld	a4,8(s1)
    800101a0:	4789                	li	a5,2
    800101a2:	00f70c63          	beq	a4,a5,800101ba <illegal_except_1+0x14c>
    800101a6:	0001e517          	auipc	a0,0x1e
    800101aa:	05a50513          	addi	a0,a0,90 # 8002e200 <__func__.0+0x318>
    800101ae:	27c1b0ef          	jal	8002b42a <printf>
    800101b2:	02900513          	li	a0,41
    800101b6:	763190ef          	jal	8002a118 <putchar>
    800101ba:	4529                	li	a0,10
    800101bc:	75d190ef          	jal	8002a118 <putchar>
    800101c0:	c015                	beqz	s0,800101e4 <illegal_except_1+0x176>
    800101c2:	00048417          	auipc	s0,0x48
    800101c6:	e4f44403          	lbu	s0,-433(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800101ca:	0001e597          	auipc	a1,0x1e
    800101ce:	fee58593          	addi	a1,a1,-18 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800101d2:	cc11                	beqz	s0,800101ee <illegal_except_1+0x180>
    800101d4:	6498                	ld	a4,8(s1)
    800101d6:	4789                	li	a5,2
    TEST_END();
    800101d8:	0001e597          	auipc	a1,0x1e
    800101dc:	fd058593          	addi	a1,a1,-48 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800101e0:	00f70763          	beq	a4,a5,800101ee <illegal_except_1+0x180>
    800101e4:	4401                	li	s0,0
    TEST_END();
    800101e6:	0001e597          	auipc	a1,0x1e
    800101ea:	fd258593          	addi	a1,a1,-46 # 8002e1b8 <__func__.0+0x2d0>
    800101ee:	0001e517          	auipc	a0,0x1e
    800101f2:	07250513          	addi	a0,a0,114 # 8002e260 <__func__.0+0x378>
    800101f6:	2341b0ef          	jal	8002b42a <printf>
    800101fa:	4511                	li	a0,4
    800101fc:	d0df00ef          	jal	80000f08 <goto_priv>
    80010200:	e24f10ef          	jal	80001824 <reset_state>

}
    80010204:	60e2                	ld	ra,24(sp)
    80010206:	8522                	mv	a0,s0
    80010208:	6442                	ld	s0,16(sp)
    8001020a:	64a2                	ld	s1,8(sp)
    8001020c:	6105                	addi	sp,sp,32
    8001020e:	8082                	ret

0000000080010210 <illegal_except_2>:

bool illegal_except_2() {
    80010210:	1101                	addi	sp,sp,-32

    TEST_START();
    80010212:	0001c597          	auipc	a1,0x1c
    80010216:	67e58593          	addi	a1,a1,1662 # 8002c890 <__func__.13>
    8001021a:	0001e517          	auipc	a0,0x1e
    8001021e:	fae50513          	addi	a0,a0,-82 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_2() {
    80010222:	ec06                	sd	ra,24(sp)
    80010224:	e822                	sd	s0,16(sp)
    80010226:	e426                	sd	s1,8(sp)
    TEST_START();
    80010228:	2021b0ef          	jal	8002b42a <printf>
    8001022c:	4529                	li	a0,10
    8001022e:	6eb190ef          	jal	8002a118 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    80010232:	4511                	li	a0,4
    80010234:	cd5f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010238:	001007b7          	lui	a5,0x100
    8001023c:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    80010240:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    80010244:	450d                	li	a0,3
    80010246:	cc3f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001024a:	bc3f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    8001024e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010252:	08200593          	li	a1,130
    80010256:	00021617          	auipc	a2,0x21
    8001025a:	2a260613          	addi	a2,a2,674 # 800314f8 <__func__.0+0x3610>
    8001025e:	0001e517          	auipc	a0,0x1e
    80010262:	f8250513          	addi	a0,a0,-126 # 8002e1e0 <__func__.0+0x2f8>
    80010266:	1c41b0ef          	jal	8002b42a <printf>
    8001026a:	00048797          	auipc	a5,0x48
    8001026e:	da77c783          	lbu	a5,-601(a5) # 80058011 <excpt+0x1>
    80010272:	00048497          	auipc	s1,0x48
    80010276:	d9e48493          	addi	s1,s1,-610 # 80058010 <excpt>
    8001027a:	0001e597          	auipc	a1,0x1e
    8001027e:	f3e58593          	addi	a1,a1,-194 # 8002e1b8 <__func__.0+0x2d0>
    80010282:	cf89                	beqz	a5,8001029c <illegal_except_2+0x8c>
    80010284:	6498                	ld	a4,8(s1)
    80010286:	4789                	li	a5,2
    80010288:	0001e597          	auipc	a1,0x1e
    8001028c:	f2058593          	addi	a1,a1,-224 # 8002e1a8 <__func__.0+0x2c0>
    80010290:	00f70663          	beq	a4,a5,8001029c <illegal_except_2+0x8c>
    80010294:	0001e597          	auipc	a1,0x1e
    80010298:	f2458593          	addi	a1,a1,-220 # 8002e1b8 <__func__.0+0x2d0>
    8001029c:	0001e517          	auipc	a0,0x1e
    800102a0:	f5c50513          	addi	a0,a0,-164 # 8002e1f8 <__func__.0+0x310>
    800102a4:	1861b0ef          	jal	8002b42a <printf>
    800102a8:	00048797          	auipc	a5,0x48
    800102ac:	d697c783          	lbu	a5,-663(a5) # 80058011 <excpt+0x1>
    800102b0:	c789                	beqz	a5,800102ba <illegal_except_2+0xaa>
    800102b2:	6498                	ld	a4,8(s1)
    800102b4:	4789                	li	a5,2
    800102b6:	00f70c63          	beq	a4,a5,800102ce <illegal_except_2+0xbe>
    800102ba:	0001e517          	auipc	a0,0x1e
    800102be:	f4650513          	addi	a0,a0,-186 # 8002e200 <__func__.0+0x318>
    800102c2:	1681b0ef          	jal	8002b42a <printf>
    800102c6:	02900513          	li	a0,41
    800102ca:	64f190ef          	jal	8002a118 <putchar>
    800102ce:	4529                	li	a0,10
    800102d0:	649190ef          	jal	8002a118 <putchar>
    800102d4:	00048417          	auipc	s0,0x48
    800102d8:	d3d44403          	lbu	s0,-707(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800102dc:	0001e597          	auipc	a1,0x1e
    800102e0:	edc58593          	addi	a1,a1,-292 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800102e4:	cc11                	beqz	s0,80010300 <illegal_except_2+0xf0>
    800102e6:	6498                	ld	a4,8(s1)
    800102e8:	4789                	li	a5,2
    TEST_END();
    800102ea:	0001e597          	auipc	a1,0x1e
    800102ee:	ebe58593          	addi	a1,a1,-322 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800102f2:	00f70763          	beq	a4,a5,80010300 <illegal_except_2+0xf0>
    800102f6:	4401                	li	s0,0
    TEST_END();
    800102f8:	0001e597          	auipc	a1,0x1e
    800102fc:	ec058593          	addi	a1,a1,-320 # 8002e1b8 <__func__.0+0x2d0>
    80010300:	0001e517          	auipc	a0,0x1e
    80010304:	f6050513          	addi	a0,a0,-160 # 8002e260 <__func__.0+0x378>
    80010308:	1221b0ef          	jal	8002b42a <printf>
    8001030c:	4511                	li	a0,4
    8001030e:	bfbf00ef          	jal	80000f08 <goto_priv>
    80010312:	d12f10ef          	jal	80001824 <reset_state>

}
    80010316:	60e2                	ld	ra,24(sp)
    80010318:	8522                	mv	a0,s0
    8001031a:	6442                	ld	s0,16(sp)
    8001031c:	64a2                	ld	s1,8(sp)
    8001031e:	6105                	addi	sp,sp,32
    80010320:	8082                	ret

0000000080010322 <illegal_except_3>:

bool illegal_except_3() {
    80010322:	1101                	addi	sp,sp,-32

    TEST_START();
    80010324:	0001c597          	auipc	a1,0x1c
    80010328:	58458593          	addi	a1,a1,1412 # 8002c8a8 <__func__.12>
    8001032c:	0001e517          	auipc	a0,0x1e
    80010330:	e9c50513          	addi	a0,a0,-356 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_3() {
    80010334:	ec06                	sd	ra,24(sp)
    80010336:	e822                	sd	s0,16(sp)
    80010338:	e426                	sd	s1,8(sp)
    TEST_START();
    8001033a:	0f01b0ef          	jal	8002b42a <printf>
    8001033e:	4529                	li	a0,10
    80010340:	5d9190ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80010344:	ac9f00ef          	jal	80000e0c <test_setup_except_function>

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010348:	342025f3          	csrr	a1,mcause
    8001034c:	00024517          	auipc	a0,0x24
    80010350:	49450513          	addi	a0,a0,1172 # 800347e0 <__func__.0+0x68f8>
    80010354:	0d61b0ef          	jal	8002b42a <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    80010358:	57fd                	li	a5,-1
    8001035a:	83f1                	srli	a5,a5,0x1c
    8001035c:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010360:	342025f3          	csrr	a1,mcause
    80010364:	00024517          	auipc	a0,0x24
    80010368:	47c50513          	addi	a0,a0,1148 # 800347e0 <__func__.0+0x68f8>
    8001036c:	0be1b0ef          	jal	8002b42a <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010370:	08200593          	li	a1,130
    80010374:	00021617          	auipc	a2,0x21
    80010378:	1e460613          	addi	a2,a2,484 # 80031558 <__func__.0+0x3670>
    8001037c:	0001e517          	auipc	a0,0x1e
    80010380:	e6450513          	addi	a0,a0,-412 # 8002e1e0 <__func__.0+0x2f8>
    80010384:	0a61b0ef          	jal	8002b42a <printf>
    80010388:	00048797          	auipc	a5,0x48
    8001038c:	c897c783          	lbu	a5,-887(a5) # 80058011 <excpt+0x1>
    80010390:	00048497          	auipc	s1,0x48
    80010394:	c8048493          	addi	s1,s1,-896 # 80058010 <excpt>
    80010398:	0001e597          	auipc	a1,0x1e
    8001039c:	e2058593          	addi	a1,a1,-480 # 8002e1b8 <__func__.0+0x2d0>
    800103a0:	cf89                	beqz	a5,800103ba <illegal_except_3+0x98>
    800103a2:	6498                	ld	a4,8(s1)
    800103a4:	4789                	li	a5,2
    800103a6:	0001e597          	auipc	a1,0x1e
    800103aa:	e0258593          	addi	a1,a1,-510 # 8002e1a8 <__func__.0+0x2c0>
    800103ae:	00f70663          	beq	a4,a5,800103ba <illegal_except_3+0x98>
    800103b2:	0001e597          	auipc	a1,0x1e
    800103b6:	e0658593          	addi	a1,a1,-506 # 8002e1b8 <__func__.0+0x2d0>
    800103ba:	0001e517          	auipc	a0,0x1e
    800103be:	e3e50513          	addi	a0,a0,-450 # 8002e1f8 <__func__.0+0x310>
    800103c2:	0681b0ef          	jal	8002b42a <printf>
    800103c6:	00048797          	auipc	a5,0x48
    800103ca:	c4b7c783          	lbu	a5,-949(a5) # 80058011 <excpt+0x1>
    800103ce:	c789                	beqz	a5,800103d8 <illegal_except_3+0xb6>
    800103d0:	6498                	ld	a4,8(s1)
    800103d2:	4789                	li	a5,2
    800103d4:	00f70c63          	beq	a4,a5,800103ec <illegal_except_3+0xca>
    800103d8:	0001e517          	auipc	a0,0x1e
    800103dc:	e2850513          	addi	a0,a0,-472 # 8002e200 <__func__.0+0x318>
    800103e0:	04a1b0ef          	jal	8002b42a <printf>
    800103e4:	02900513          	li	a0,41
    800103e8:	531190ef          	jal	8002a118 <putchar>
    800103ec:	4529                	li	a0,10
    800103ee:	52b190ef          	jal	8002a118 <putchar>
    800103f2:	00048417          	auipc	s0,0x48
    800103f6:	c1f44403          	lbu	s0,-993(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    800103fa:	0001e597          	auipc	a1,0x1e
    800103fe:	dbe58593          	addi	a1,a1,-578 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010402:	cc11                	beqz	s0,8001041e <illegal_except_3+0xfc>
    80010404:	6498                	ld	a4,8(s1)
    80010406:	4789                	li	a5,2
    TEST_END();
    80010408:	0001e597          	auipc	a1,0x1e
    8001040c:	da058593          	addi	a1,a1,-608 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010410:	00f70763          	beq	a4,a5,8001041e <illegal_except_3+0xfc>
    80010414:	4401                	li	s0,0
    TEST_END();
    80010416:	0001e597          	auipc	a1,0x1e
    8001041a:	da258593          	addi	a1,a1,-606 # 8002e1b8 <__func__.0+0x2d0>
    8001041e:	0001e517          	auipc	a0,0x1e
    80010422:	e4250513          	addi	a0,a0,-446 # 8002e260 <__func__.0+0x378>
    80010426:	0041b0ef          	jal	8002b42a <printf>
    8001042a:	4511                	li	a0,4
    8001042c:	addf00ef          	jal	80000f08 <goto_priv>
    80010430:	bf4f10ef          	jal	80001824 <reset_state>
}
    80010434:	60e2                	ld	ra,24(sp)
    80010436:	8522                	mv	a0,s0
    80010438:	6442                	ld	s0,16(sp)
    8001043a:	64a2                	ld	s1,8(sp)
    8001043c:	6105                	addi	sp,sp,32
    8001043e:	8082                	ret

0000000080010440 <illegal_except_4>:



bool illegal_except_4() {
    80010440:	1101                	addi	sp,sp,-32

    TEST_START();
    80010442:	0001c597          	auipc	a1,0x1c
    80010446:	47e58593          	addi	a1,a1,1150 # 8002c8c0 <__func__.11>
    8001044a:	0001e517          	auipc	a0,0x1e
    8001044e:	d7e50513          	addi	a0,a0,-642 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_4() {
    80010452:	ec06                	sd	ra,24(sp)
    80010454:	e822                	sd	s0,16(sp)
    80010456:	e426                	sd	s1,8(sp)
    80010458:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001045a:	7d11a0ef          	jal	8002b42a <printf>
    8001045e:	4529                	li	a0,10
    80010460:	4b9190ef          	jal	8002a118 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    80010464:	4511                	li	a0,4
    80010466:	aa3f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001046a:	9a3f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    8001046e:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    80010472:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    80010476:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    8001047a:	08200593          	li	a1,130
    8001047e:	00021617          	auipc	a2,0x21
    80010482:	11a60613          	addi	a2,a2,282 # 80031598 <__func__.0+0x36b0>
    80010486:	0001e517          	auipc	a0,0x1e
    8001048a:	d5a50513          	addi	a0,a0,-678 # 8002e1e0 <__func__.0+0x2f8>
    8001048e:	79d1a0ef          	jal	8002b42a <printf>
    80010492:	00048797          	auipc	a5,0x48
    80010496:	b7f7c783          	lbu	a5,-1153(a5) # 80058011 <excpt+0x1>
    8001049a:	0001e597          	auipc	a1,0x1e
    8001049e:	d0e58593          	addi	a1,a1,-754 # 8002e1a8 <__func__.0+0x2c0>
    800104a2:	c789                	beqz	a5,800104ac <illegal_except_4+0x6c>
    800104a4:	0001e597          	auipc	a1,0x1e
    800104a8:	d1458593          	addi	a1,a1,-748 # 8002e1b8 <__func__.0+0x2d0>
    800104ac:	0001e517          	auipc	a0,0x1e
    800104b0:	d4c50513          	addi	a0,a0,-692 # 8002e1f8 <__func__.0+0x310>
    800104b4:	7771a0ef          	jal	8002b42a <printf>
    800104b8:	00048797          	auipc	a5,0x48
    800104bc:	b597c783          	lbu	a5,-1191(a5) # 80058011 <excpt+0x1>
    800104c0:	18079e63          	bnez	a5,8001065c <illegal_except_4+0x21c>
    800104c4:	4529                	li	a0,10
    800104c6:	453190ef          	jal	8002a118 <putchar>
    800104ca:	00048917          	auipc	s2,0x48
    800104ce:	b4794903          	lbu	s2,-1209(s2) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    800104d2:	b52f10ef          	jal	80001824 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    800104d6:	450d                	li	a0,3
    800104d8:	a31f00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode access any csr successful",
    800104dc:	00048417          	auipc	s0,0x48
    800104e0:	b3440413          	addi	s0,s0,-1228 # 80058010 <excpt>
    TEST_SETUP_EXCEPT();
    800104e4:	929f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    800104e8:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    800104ec:	08200593          	li	a1,130
    800104f0:	00021617          	auipc	a2,0x21
    800104f4:	0d060613          	addi	a2,a2,208 # 800315c0 <__func__.0+0x36d8>
    800104f8:	0001e517          	auipc	a0,0x1e
    800104fc:	ce850513          	addi	a0,a0,-792 # 8002e1e0 <__func__.0+0x2f8>
    80010500:	72b1a0ef          	jal	8002b42a <printf>
    80010504:	00048797          	auipc	a5,0x48
    80010508:	b0d7c783          	lbu	a5,-1267(a5) # 80058011 <excpt+0x1>
    8001050c:	0001e597          	auipc	a1,0x1e
    80010510:	cac58593          	addi	a1,a1,-852 # 8002e1b8 <__func__.0+0x2d0>
    80010514:	cf89                	beqz	a5,8001052e <illegal_except_4+0xee>
    80010516:	6418                	ld	a4,8(s0)
    80010518:	4789                	li	a5,2
    8001051a:	0001e597          	auipc	a1,0x1e
    8001051e:	c8e58593          	addi	a1,a1,-882 # 8002e1a8 <__func__.0+0x2c0>
    80010522:	00f70663          	beq	a4,a5,8001052e <illegal_except_4+0xee>
    80010526:	0001e597          	auipc	a1,0x1e
    8001052a:	c9258593          	addi	a1,a1,-878 # 8002e1b8 <__func__.0+0x2d0>
    8001052e:	0001e517          	auipc	a0,0x1e
    80010532:	cca50513          	addi	a0,a0,-822 # 8002e1f8 <__func__.0+0x310>
    80010536:	6f51a0ef          	jal	8002b42a <printf>
    8001053a:	00048797          	auipc	a5,0x48
    8001053e:	ad77c783          	lbu	a5,-1321(a5) # 80058011 <excpt+0x1>
    80010542:	c789                	beqz	a5,8001054c <illegal_except_4+0x10c>
    80010544:	6418                	ld	a4,8(s0)
    80010546:	4789                	li	a5,2
    80010548:	00f70c63          	beq	a4,a5,80010560 <illegal_except_4+0x120>
    8001054c:	0001e517          	auipc	a0,0x1e
    80010550:	cb450513          	addi	a0,a0,-844 # 8002e200 <__func__.0+0x318>
    80010554:	6d71a0ef          	jal	8002b42a <printf>
    80010558:	02900513          	li	a0,41
    8001055c:	3bd190ef          	jal	8002a118 <putchar>
    80010560:	4529                	li	a0,10
    80010562:	3b7190ef          	jal	8002a118 <putchar>
    80010566:	4481                	li	s1,0
    80010568:	00091863          	bnez	s2,80010578 <illegal_except_4+0x138>
    8001056c:	00048797          	auipc	a5,0x48
    80010570:	aa57c783          	lbu	a5,-1371(a5) # 80058011 <excpt+0x1>
    80010574:	0c079f63          	bnez	a5,80010652 <illegal_except_4+0x212>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    80010578:	4509                	li	a0,2
    8001057a:	98ff00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001057e:	88ff00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIDELEG);
    80010582:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010586:	08200593          	li	a1,130
    8001058a:	00021617          	auipc	a2,0x21
    8001058e:	06e60613          	addi	a2,a2,110 # 800315f8 <__func__.0+0x3710>
    80010592:	0001e517          	auipc	a0,0x1e
    80010596:	c4e50513          	addi	a0,a0,-946 # 8002e1e0 <__func__.0+0x2f8>
    8001059a:	6911a0ef          	jal	8002b42a <printf>
    8001059e:	00048797          	auipc	a5,0x48
    800105a2:	a737c783          	lbu	a5,-1421(a5) # 80058011 <excpt+0x1>
    800105a6:	0001e597          	auipc	a1,0x1e
    800105aa:	c1258593          	addi	a1,a1,-1006 # 8002e1b8 <__func__.0+0x2d0>
    800105ae:	cf89                	beqz	a5,800105c8 <illegal_except_4+0x188>
    800105b0:	6418                	ld	a4,8(s0)
    800105b2:	4789                	li	a5,2
    800105b4:	0001e597          	auipc	a1,0x1e
    800105b8:	bf458593          	addi	a1,a1,-1036 # 8002e1a8 <__func__.0+0x2c0>
    800105bc:	00f70663          	beq	a4,a5,800105c8 <illegal_except_4+0x188>
    800105c0:	0001e597          	auipc	a1,0x1e
    800105c4:	bf858593          	addi	a1,a1,-1032 # 8002e1b8 <__func__.0+0x2d0>
    800105c8:	0001e517          	auipc	a0,0x1e
    800105cc:	c3050513          	addi	a0,a0,-976 # 8002e1f8 <__func__.0+0x310>
    800105d0:	65b1a0ef          	jal	8002b42a <printf>
    800105d4:	00048797          	auipc	a5,0x48
    800105d8:	a3d7c783          	lbu	a5,-1475(a5) # 80058011 <excpt+0x1>
    800105dc:	c789                	beqz	a5,800105e6 <illegal_except_4+0x1a6>
    800105de:	6418                	ld	a4,8(s0)
    800105e0:	4789                	li	a5,2
    800105e2:	00f70c63          	beq	a4,a5,800105fa <illegal_except_4+0x1ba>
    800105e6:	0001e517          	auipc	a0,0x1e
    800105ea:	c1a50513          	addi	a0,a0,-998 # 8002e200 <__func__.0+0x318>
    800105ee:	63d1a0ef          	jal	8002b42a <printf>
    800105f2:	02900513          	li	a0,41
    800105f6:	323190ef          	jal	8002a118 <putchar>
    800105fa:	4529                	li	a0,10
    800105fc:	31d190ef          	jal	8002a118 <putchar>
    80010600:	c095                	beqz	s1,80010624 <illegal_except_4+0x1e4>
    80010602:	00048497          	auipc	s1,0x48
    80010606:	a0f4c483          	lbu	s1,-1521(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    8001060a:	0001e597          	auipc	a1,0x1e
    8001060e:	bae58593          	addi	a1,a1,-1106 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010612:	cc91                	beqz	s1,8001062e <illegal_except_4+0x1ee>
    80010614:	6418                	ld	a4,8(s0)
    80010616:	4789                	li	a5,2
    TEST_END();
    80010618:	0001e597          	auipc	a1,0x1e
    8001061c:	b9058593          	addi	a1,a1,-1136 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010620:	00f70763          	beq	a4,a5,8001062e <illegal_except_4+0x1ee>
    80010624:	4481                	li	s1,0
    TEST_END();
    80010626:	0001e597          	auipc	a1,0x1e
    8001062a:	b9258593          	addi	a1,a1,-1134 # 8002e1b8 <__func__.0+0x2d0>
    8001062e:	0001e517          	auipc	a0,0x1e
    80010632:	c3250513          	addi	a0,a0,-974 # 8002e260 <__func__.0+0x378>
    80010636:	5f51a0ef          	jal	8002b42a <printf>
    8001063a:	4511                	li	a0,4
    8001063c:	8cdf00ef          	jal	80000f08 <goto_priv>
    80010640:	9e4f10ef          	jal	80001824 <reset_state>
}
    80010644:	60e2                	ld	ra,24(sp)
    80010646:	6442                	ld	s0,16(sp)
    80010648:	6902                	ld	s2,0(sp)
    8001064a:	8526                	mv	a0,s1
    8001064c:	64a2                	ld	s1,8(sp)
    8001064e:	6105                	addi	sp,sp,32
    80010650:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80010652:	6404                	ld	s1,8(s0)
    80010654:	14f9                	addi	s1,s1,-2
    80010656:	0014b493          	seqz	s1,s1
    8001065a:	bf39                	j	80010578 <illegal_except_4+0x138>
    TEST_ASSERT("m mode access any csr successful",
    8001065c:	0001e517          	auipc	a0,0x1e
    80010660:	ba450513          	addi	a0,a0,-1116 # 8002e200 <__func__.0+0x318>
    80010664:	5c71a0ef          	jal	8002b42a <printf>
    80010668:	02900513          	li	a0,41
    8001066c:	2ad190ef          	jal	8002a118 <putchar>
    80010670:	bd91                	j	800104c4 <illegal_except_4+0x84>

0000000080010672 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    80010672:	1101                	addi	sp,sp,-32

    TEST_START();
    80010674:	0001c597          	auipc	a1,0x1c
    80010678:	26458593          	addi	a1,a1,612 # 8002c8d8 <__func__.10>
    8001067c:	0001e517          	auipc	a0,0x1e
    80010680:	b4c50513          	addi	a0,a0,-1204 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_5() {
    80010684:	ec06                	sd	ra,24(sp)
    80010686:	e822                	sd	s0,16(sp)
    80010688:	e426                	sd	s1,8(sp)
    TEST_START();
    8001068a:	5a11a0ef          	jal	8002b42a <printf>
    8001068e:	4529                	li	a0,10
    80010690:	289190ef          	jal	8002a118 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    80010694:	4511                	li	a0,4
    80010696:	873f00ef          	jal	80000f08 <goto_priv>
    CSRW(satp, 0x0);
    8001069a:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001069e:	001007b7          	lui	a5,0x100
    800106a2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800106a6:	450d                	li	a0,3
    800106a8:	861f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800106ac:	f60f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    800106b0:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800106b4:	08200593          	li	a1,130
    800106b8:	00021617          	auipc	a2,0x21
    800106bc:	e4060613          	addi	a2,a2,-448 # 800314f8 <__func__.0+0x3610>
    800106c0:	0001e517          	auipc	a0,0x1e
    800106c4:	b2050513          	addi	a0,a0,-1248 # 8002e1e0 <__func__.0+0x2f8>
    800106c8:	5631a0ef          	jal	8002b42a <printf>
    800106cc:	00048797          	auipc	a5,0x48
    800106d0:	9457c783          	lbu	a5,-1723(a5) # 80058011 <excpt+0x1>
    800106d4:	00048497          	auipc	s1,0x48
    800106d8:	93c48493          	addi	s1,s1,-1732 # 80058010 <excpt>
    800106dc:	0001e597          	auipc	a1,0x1e
    800106e0:	adc58593          	addi	a1,a1,-1316 # 8002e1b8 <__func__.0+0x2d0>
    800106e4:	cf89                	beqz	a5,800106fe <illegal_except_5+0x8c>
    800106e6:	6498                	ld	a4,8(s1)
    800106e8:	4789                	li	a5,2
    800106ea:	0001e597          	auipc	a1,0x1e
    800106ee:	abe58593          	addi	a1,a1,-1346 # 8002e1a8 <__func__.0+0x2c0>
    800106f2:	00f70663          	beq	a4,a5,800106fe <illegal_except_5+0x8c>
    800106f6:	0001e597          	auipc	a1,0x1e
    800106fa:	ac258593          	addi	a1,a1,-1342 # 8002e1b8 <__func__.0+0x2d0>
    800106fe:	0001e517          	auipc	a0,0x1e
    80010702:	afa50513          	addi	a0,a0,-1286 # 8002e1f8 <__func__.0+0x310>
    80010706:	5251a0ef          	jal	8002b42a <printf>
    8001070a:	00048797          	auipc	a5,0x48
    8001070e:	9077c783          	lbu	a5,-1785(a5) # 80058011 <excpt+0x1>
    80010712:	c789                	beqz	a5,8001071c <illegal_except_5+0xaa>
    80010714:	6498                	ld	a4,8(s1)
    80010716:	4789                	li	a5,2
    80010718:	00f70c63          	beq	a4,a5,80010730 <illegal_except_5+0xbe>
    8001071c:	0001e517          	auipc	a0,0x1e
    80010720:	ae450513          	addi	a0,a0,-1308 # 8002e200 <__func__.0+0x318>
    80010724:	5071a0ef          	jal	8002b42a <printf>
    80010728:	02900513          	li	a0,41
    8001072c:	1ed190ef          	jal	8002a118 <putchar>
    80010730:	4529                	li	a0,10
    80010732:	1e7190ef          	jal	8002a118 <putchar>
    80010736:	00048417          	auipc	s0,0x48
    8001073a:	8db44403          	lbu	s0,-1829(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001073e:	0001e597          	auipc	a1,0x1e
    80010742:	a7a58593          	addi	a1,a1,-1414 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010746:	cc11                	beqz	s0,80010762 <illegal_except_5+0xf0>
    80010748:	6498                	ld	a4,8(s1)
    8001074a:	4789                	li	a5,2
    TEST_END();
    8001074c:	0001e597          	auipc	a1,0x1e
    80010750:	a5c58593          	addi	a1,a1,-1444 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010754:	00f70763          	beq	a4,a5,80010762 <illegal_except_5+0xf0>
    80010758:	4401                	li	s0,0
    TEST_END();
    8001075a:	0001e597          	auipc	a1,0x1e
    8001075e:	a5e58593          	addi	a1,a1,-1442 # 8002e1b8 <__func__.0+0x2d0>
    80010762:	0001e517          	auipc	a0,0x1e
    80010766:	afe50513          	addi	a0,a0,-1282 # 8002e260 <__func__.0+0x378>
    8001076a:	4c11a0ef          	jal	8002b42a <printf>
    8001076e:	4511                	li	a0,4
    80010770:	f98f00ef          	jal	80000f08 <goto_priv>
    80010774:	8b0f10ef          	jal	80001824 <reset_state>
}
    80010778:	60e2                	ld	ra,24(sp)
    8001077a:	8522                	mv	a0,s0
    8001077c:	6442                	ld	s0,16(sp)
    8001077e:	64a2                	ld	s1,8(sp)
    80010780:	6105                	addi	sp,sp,32
    80010782:	8082                	ret

0000000080010784 <illegal_except_6>:

bool illegal_except_6() {
    80010784:	1101                	addi	sp,sp,-32

    TEST_START();
    80010786:	0001c597          	auipc	a1,0x1c
    8001078a:	16a58593          	addi	a1,a1,362 # 8002c8f0 <__func__.9>
    8001078e:	0001e517          	auipc	a0,0x1e
    80010792:	a3a50513          	addi	a0,a0,-1478 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_6() {
    80010796:	ec06                	sd	ra,24(sp)
    80010798:	e822                	sd	s0,16(sp)
    8001079a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001079c:	48f1a0ef          	jal	8002b42a <printf>
    800107a0:	4529                	li	a0,10
    800107a2:	177190ef          	jal	8002a118 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    800107a6:	4511                	li	a0,4
    800107a8:	f60f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800107ac:	001007b7          	lui	a5,0x100
    800107b0:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800107b4:	450d                	li	a0,3
    800107b6:	f52f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800107ba:	e52f00ef          	jal	80000e0c <test_setup_except_function>
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    800107be:	57fd                	li	a5,-1
    800107c0:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107c4:	08200593          	li	a1,130
    800107c8:	00021617          	auipc	a2,0x21
    800107cc:	e6860613          	addi	a2,a2,-408 # 80031630 <__func__.0+0x3748>
    800107d0:	0001e517          	auipc	a0,0x1e
    800107d4:	a1050513          	addi	a0,a0,-1520 # 8002e1e0 <__func__.0+0x2f8>
    800107d8:	4531a0ef          	jal	8002b42a <printf>
    800107dc:	00048797          	auipc	a5,0x48
    800107e0:	8357c783          	lbu	a5,-1995(a5) # 80058011 <excpt+0x1>
    800107e4:	00048497          	auipc	s1,0x48
    800107e8:	82c48493          	addi	s1,s1,-2004 # 80058010 <excpt>
    800107ec:	0001e597          	auipc	a1,0x1e
    800107f0:	9cc58593          	addi	a1,a1,-1588 # 8002e1b8 <__func__.0+0x2d0>
    800107f4:	cf89                	beqz	a5,8001080e <illegal_except_6+0x8a>
    800107f6:	6498                	ld	a4,8(s1)
    800107f8:	4789                	li	a5,2
    800107fa:	0001e597          	auipc	a1,0x1e
    800107fe:	9ae58593          	addi	a1,a1,-1618 # 8002e1a8 <__func__.0+0x2c0>
    80010802:	00f70663          	beq	a4,a5,8001080e <illegal_except_6+0x8a>
    80010806:	0001e597          	auipc	a1,0x1e
    8001080a:	9b258593          	addi	a1,a1,-1614 # 8002e1b8 <__func__.0+0x2d0>
    8001080e:	0001e517          	auipc	a0,0x1e
    80010812:	9ea50513          	addi	a0,a0,-1558 # 8002e1f8 <__func__.0+0x310>
    80010816:	4151a0ef          	jal	8002b42a <printf>
    8001081a:	00047797          	auipc	a5,0x47
    8001081e:	7f77c783          	lbu	a5,2039(a5) # 80058011 <excpt+0x1>
    80010822:	c789                	beqz	a5,8001082c <illegal_except_6+0xa8>
    80010824:	6498                	ld	a4,8(s1)
    80010826:	4789                	li	a5,2
    80010828:	00f70c63          	beq	a4,a5,80010840 <illegal_except_6+0xbc>
    8001082c:	0001e517          	auipc	a0,0x1e
    80010830:	9d450513          	addi	a0,a0,-1580 # 8002e200 <__func__.0+0x318>
    80010834:	3f71a0ef          	jal	8002b42a <printf>
    80010838:	02900513          	li	a0,41
    8001083c:	0dd190ef          	jal	8002a118 <putchar>
    80010840:	4529                	li	a0,10
    80010842:	0d7190ef          	jal	8002a118 <putchar>
    80010846:	00047417          	auipc	s0,0x47
    8001084a:	7cb44403          	lbu	s0,1995(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001084e:	0001e597          	auipc	a1,0x1e
    80010852:	96a58593          	addi	a1,a1,-1686 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010856:	cc11                	beqz	s0,80010872 <illegal_except_6+0xee>
    80010858:	6498                	ld	a4,8(s1)
    8001085a:	4789                	li	a5,2
    TEST_END();
    8001085c:	0001e597          	auipc	a1,0x1e
    80010860:	94c58593          	addi	a1,a1,-1716 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010864:	00f70763          	beq	a4,a5,80010872 <illegal_except_6+0xee>
    80010868:	4401                	li	s0,0
    TEST_END();
    8001086a:	0001e597          	auipc	a1,0x1e
    8001086e:	94e58593          	addi	a1,a1,-1714 # 8002e1b8 <__func__.0+0x2d0>
    80010872:	0001e517          	auipc	a0,0x1e
    80010876:	9ee50513          	addi	a0,a0,-1554 # 8002e260 <__func__.0+0x378>
    8001087a:	3b11a0ef          	jal	8002b42a <printf>
    8001087e:	4511                	li	a0,4
    80010880:	e88f00ef          	jal	80000f08 <goto_priv>
    80010884:	fa1f00ef          	jal	80001824 <reset_state>
}
    80010888:	60e2                	ld	ra,24(sp)
    8001088a:	8522                	mv	a0,s0
    8001088c:	6442                	ld	s0,16(sp)
    8001088e:	64a2                	ld	s1,8(sp)
    80010890:	6105                	addi	sp,sp,32
    80010892:	8082                	ret

0000000080010894 <illegal_except_7>:

bool illegal_except_7() {
    80010894:	1101                	addi	sp,sp,-32

    TEST_START();
    80010896:	0001c597          	auipc	a1,0x1c
    8001089a:	07258593          	addi	a1,a1,114 # 8002c908 <__func__.8>
    8001089e:	0001e517          	auipc	a0,0x1e
    800108a2:	92a50513          	addi	a0,a0,-1750 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_7() {
    800108a6:	ec06                	sd	ra,24(sp)
    800108a8:	e822                	sd	s0,16(sp)
    800108aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800108ac:	37f1a0ef          	jal	8002b42a <printf>
    800108b0:	4529                	li	a0,10
    800108b2:	067190ef          	jal	8002a118 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    800108b6:	4511                	li	a0,4
    800108b8:	e50f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    800108bc:	001007b7          	lui	a5,0x100
    800108c0:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    800108c4:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    800108c8:	450d                	li	a0,3
    800108ca:	e3ef00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800108ce:	d3ef00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800108d2:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    800108d6:	08200593          	li	a1,130
    800108da:	00021617          	auipc	a2,0x21
    800108de:	dbe60613          	addi	a2,a2,-578 # 80031698 <__func__.0+0x37b0>
    800108e2:	0001e517          	auipc	a0,0x1e
    800108e6:	8fe50513          	addi	a0,a0,-1794 # 8002e1e0 <__func__.0+0x2f8>
    800108ea:	3411a0ef          	jal	8002b42a <printf>
    800108ee:	00047797          	auipc	a5,0x47
    800108f2:	7237c783          	lbu	a5,1827(a5) # 80058011 <excpt+0x1>
    800108f6:	00047497          	auipc	s1,0x47
    800108fa:	71a48493          	addi	s1,s1,1818 # 80058010 <excpt>
    800108fe:	0001e597          	auipc	a1,0x1e
    80010902:	8ba58593          	addi	a1,a1,-1862 # 8002e1b8 <__func__.0+0x2d0>
    80010906:	cf89                	beqz	a5,80010920 <illegal_except_7+0x8c>
    80010908:	6498                	ld	a4,8(s1)
    8001090a:	4789                	li	a5,2
    8001090c:	0001e597          	auipc	a1,0x1e
    80010910:	89c58593          	addi	a1,a1,-1892 # 8002e1a8 <__func__.0+0x2c0>
    80010914:	00f70663          	beq	a4,a5,80010920 <illegal_except_7+0x8c>
    80010918:	0001e597          	auipc	a1,0x1e
    8001091c:	8a058593          	addi	a1,a1,-1888 # 8002e1b8 <__func__.0+0x2d0>
    80010920:	0001e517          	auipc	a0,0x1e
    80010924:	8d850513          	addi	a0,a0,-1832 # 8002e1f8 <__func__.0+0x310>
    80010928:	3031a0ef          	jal	8002b42a <printf>
    8001092c:	00047797          	auipc	a5,0x47
    80010930:	6e57c783          	lbu	a5,1765(a5) # 80058011 <excpt+0x1>
    80010934:	c789                	beqz	a5,8001093e <illegal_except_7+0xaa>
    80010936:	6498                	ld	a4,8(s1)
    80010938:	4789                	li	a5,2
    8001093a:	00f70c63          	beq	a4,a5,80010952 <illegal_except_7+0xbe>
    8001093e:	0001e517          	auipc	a0,0x1e
    80010942:	8c250513          	addi	a0,a0,-1854 # 8002e200 <__func__.0+0x318>
    80010946:	2e51a0ef          	jal	8002b42a <printf>
    8001094a:	02900513          	li	a0,41
    8001094e:	7ca190ef          	jal	8002a118 <putchar>
    80010952:	4529                	li	a0,10
    80010954:	7c4190ef          	jal	8002a118 <putchar>
    80010958:	00047797          	auipc	a5,0x47
    8001095c:	6b97c783          	lbu	a5,1721(a5) # 80058011 <excpt+0x1>
    80010960:	4401                	li	s0,0
    80010962:	c789                	beqz	a5,8001096c <illegal_except_7+0xd8>
    80010964:	6480                	ld	s0,8(s1)
    80010966:	1479                	addi	s0,s0,-2
    80010968:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8001096c:	450d                	li	a0,3
    8001096e:	d9af00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010972:	c9af00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010976:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001097a:	08200593          	li	a1,130
    8001097e:	00021617          	auipc	a2,0x21
    80010982:	d4a60613          	addi	a2,a2,-694 # 800316c8 <__func__.0+0x37e0>
    80010986:	0001e517          	auipc	a0,0x1e
    8001098a:	85a50513          	addi	a0,a0,-1958 # 8002e1e0 <__func__.0+0x2f8>
    8001098e:	29d1a0ef          	jal	8002b42a <printf>
    80010992:	00047797          	auipc	a5,0x47
    80010996:	67f7c783          	lbu	a5,1663(a5) # 80058011 <excpt+0x1>
    8001099a:	0001e597          	auipc	a1,0x1e
    8001099e:	81e58593          	addi	a1,a1,-2018 # 8002e1b8 <__func__.0+0x2d0>
    800109a2:	cf89                	beqz	a5,800109bc <illegal_except_7+0x128>
    800109a4:	6498                	ld	a4,8(s1)
    800109a6:	4789                	li	a5,2
    800109a8:	0001e597          	auipc	a1,0x1e
    800109ac:	80058593          	addi	a1,a1,-2048 # 8002e1a8 <__func__.0+0x2c0>
    800109b0:	00f70663          	beq	a4,a5,800109bc <illegal_except_7+0x128>
    800109b4:	0001e597          	auipc	a1,0x1e
    800109b8:	80458593          	addi	a1,a1,-2044 # 8002e1b8 <__func__.0+0x2d0>
    800109bc:	0001e517          	auipc	a0,0x1e
    800109c0:	83c50513          	addi	a0,a0,-1988 # 8002e1f8 <__func__.0+0x310>
    800109c4:	2671a0ef          	jal	8002b42a <printf>
    800109c8:	00047797          	auipc	a5,0x47
    800109cc:	6497c783          	lbu	a5,1609(a5) # 80058011 <excpt+0x1>
    800109d0:	c789                	beqz	a5,800109da <illegal_except_7+0x146>
    800109d2:	6498                	ld	a4,8(s1)
    800109d4:	4789                	li	a5,2
    800109d6:	00f70c63          	beq	a4,a5,800109ee <illegal_except_7+0x15a>
    800109da:	0001e517          	auipc	a0,0x1e
    800109de:	82650513          	addi	a0,a0,-2010 # 8002e200 <__func__.0+0x318>
    800109e2:	2491a0ef          	jal	8002b42a <printf>
    800109e6:	02900513          	li	a0,41
    800109ea:	72e190ef          	jal	8002a118 <putchar>
    800109ee:	4529                	li	a0,10
    800109f0:	728190ef          	jal	8002a118 <putchar>
    800109f4:	c015                	beqz	s0,80010a18 <illegal_except_7+0x184>
    800109f6:	00047417          	auipc	s0,0x47
    800109fa:	61b44403          	lbu	s0,1563(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800109fe:	0001d597          	auipc	a1,0x1d
    80010a02:	7ba58593          	addi	a1,a1,1978 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010a06:	cc11                	beqz	s0,80010a22 <illegal_except_7+0x18e>
    80010a08:	6498                	ld	a4,8(s1)
    80010a0a:	4789                	li	a5,2
    TEST_END();
    80010a0c:	0001d597          	auipc	a1,0x1d
    80010a10:	79c58593          	addi	a1,a1,1948 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010a14:	00f70763          	beq	a4,a5,80010a22 <illegal_except_7+0x18e>
    80010a18:	4401                	li	s0,0
    TEST_END();
    80010a1a:	0001d597          	auipc	a1,0x1d
    80010a1e:	79e58593          	addi	a1,a1,1950 # 8002e1b8 <__func__.0+0x2d0>
    80010a22:	0001e517          	auipc	a0,0x1e
    80010a26:	83e50513          	addi	a0,a0,-1986 # 8002e260 <__func__.0+0x378>
    80010a2a:	2011a0ef          	jal	8002b42a <printf>
    80010a2e:	4511                	li	a0,4
    80010a30:	cd8f00ef          	jal	80000f08 <goto_priv>
    80010a34:	df1f00ef          	jal	80001824 <reset_state>
}
    80010a38:	60e2                	ld	ra,24(sp)
    80010a3a:	8522                	mv	a0,s0
    80010a3c:	6442                	ld	s0,16(sp)
    80010a3e:	64a2                	ld	s1,8(sp)
    80010a40:	6105                	addi	sp,sp,32
    80010a42:	8082                	ret

0000000080010a44 <illegal_except_8>:


bool illegal_except_8() {
    80010a44:	1141                	addi	sp,sp,-16

    TEST_START();
    80010a46:	0001c597          	auipc	a1,0x1c
    80010a4a:	eda58593          	addi	a1,a1,-294 # 8002c920 <__func__.7>
    80010a4e:	0001d517          	auipc	a0,0x1d
    80010a52:	77a50513          	addi	a0,a0,1914 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_8() {
    80010a56:	e406                	sd	ra,8(sp)
    80010a58:	e022                	sd	s0,0(sp)
    TEST_START();
    80010a5a:	1d11a0ef          	jal	8002b42a <printf>
    80010a5e:	4529                	li	a0,10
    80010a60:	6b8190ef          	jal	8002a118 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010a64:	4511                	li	a0,4
    80010a66:	ca2f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010a6a:	ba2f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010a6e:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a72:	08200593          	li	a1,130
    80010a76:	00021617          	auipc	a2,0x21
    80010a7a:	c8260613          	addi	a2,a2,-894 # 800316f8 <__func__.0+0x3810>
    80010a7e:	0001d517          	auipc	a0,0x1d
    80010a82:	76250513          	addi	a0,a0,1890 # 8002e1e0 <__func__.0+0x2f8>
    80010a86:	1a51a0ef          	jal	8002b42a <printf>
    80010a8a:	00047797          	auipc	a5,0x47
    80010a8e:	5877c783          	lbu	a5,1415(a5) # 80058011 <excpt+0x1>
    80010a92:	0001d597          	auipc	a1,0x1d
    80010a96:	71658593          	addi	a1,a1,1814 # 8002e1a8 <__func__.0+0x2c0>
    80010a9a:	c789                	beqz	a5,80010aa4 <illegal_except_8+0x60>
    80010a9c:	0001d597          	auipc	a1,0x1d
    80010aa0:	71c58593          	addi	a1,a1,1820 # 8002e1b8 <__func__.0+0x2d0>
    80010aa4:	0001d517          	auipc	a0,0x1d
    80010aa8:	75450513          	addi	a0,a0,1876 # 8002e1f8 <__func__.0+0x310>
    80010aac:	17f1a0ef          	jal	8002b42a <printf>
    80010ab0:	00047797          	auipc	a5,0x47
    80010ab4:	5617c783          	lbu	a5,1377(a5) # 80058011 <excpt+0x1>
    80010ab8:	e7a1                	bnez	a5,80010b00 <illegal_except_8+0xbc>
    80010aba:	4529                	li	a0,10
    80010abc:	65c190ef          	jal	8002a118 <putchar>
    80010ac0:	00047797          	auipc	a5,0x47
    80010ac4:	5517c783          	lbu	a5,1361(a5) # 80058011 <excpt+0x1>
    80010ac8:	e795                	bnez	a5,80010af4 <illegal_except_8+0xb0>
    80010aca:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80010acc:	0001d597          	auipc	a1,0x1d
    80010ad0:	6dc58593          	addi	a1,a1,1756 # 8002e1a8 <__func__.0+0x2c0>
    80010ad4:	0001d517          	auipc	a0,0x1d
    80010ad8:	78c50513          	addi	a0,a0,1932 # 8002e260 <__func__.0+0x378>
    80010adc:	14f1a0ef          	jal	8002b42a <printf>
    80010ae0:	4511                	li	a0,4
    80010ae2:	c26f00ef          	jal	80000f08 <goto_priv>
    80010ae6:	d3ff00ef          	jal	80001824 <reset_state>
}
    80010aea:	60a2                	ld	ra,8(sp)
    80010aec:	8522                	mv	a0,s0
    80010aee:	6402                	ld	s0,0(sp)
    80010af0:	0141                	addi	sp,sp,16
    80010af2:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80010af4:	4401                	li	s0,0
    TEST_END();
    80010af6:	0001d597          	auipc	a1,0x1d
    80010afa:	6c258593          	addi	a1,a1,1730 # 8002e1b8 <__func__.0+0x2d0>
    80010afe:	bfd9                	j	80010ad4 <illegal_except_8+0x90>
    TEST_ASSERT("m mode hfence.gvma successful",
    80010b00:	0001d517          	auipc	a0,0x1d
    80010b04:	70050513          	addi	a0,a0,1792 # 8002e200 <__func__.0+0x318>
    80010b08:	1231a0ef          	jal	8002b42a <printf>
    80010b0c:	02900513          	li	a0,41
    80010b10:	608190ef          	jal	8002a118 <putchar>
    80010b14:	b75d                	j	80010aba <illegal_except_8+0x76>

0000000080010b16 <illegal_except_9>:

bool illegal_except_9() {
    80010b16:	1101                	addi	sp,sp,-32

    TEST_START();
    80010b18:	0001c597          	auipc	a1,0x1c
    80010b1c:	e2058593          	addi	a1,a1,-480 # 8002c938 <__func__.6>
    80010b20:	0001d517          	auipc	a0,0x1d
    80010b24:	6a850513          	addi	a0,a0,1704 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_9() {
    80010b28:	ec06                	sd	ra,24(sp)
    80010b2a:	e822                	sd	s0,16(sp)
    80010b2c:	e426                	sd	s1,8(sp)
    TEST_START();
    80010b2e:	0fd1a0ef          	jal	8002b42a <printf>
    80010b32:	4529                	li	a0,10
    80010b34:	5e4190ef          	jal	8002a118 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010b38:	4511                	li	a0,4
    80010b3a:	bcef00ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80010b3e:	001007b7          	lui	a5,0x100
    80010b42:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80010b46:	450d                	li	a0,3
    80010b48:	bc0f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b4c:	ac0f00ef          	jal	80000e0c <test_setup_except_function>
    80010b50:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010b54:	08200593          	li	a1,130
    80010b58:	00021617          	auipc	a2,0x21
    80010b5c:	bc060613          	addi	a2,a2,-1088 # 80031718 <__func__.0+0x3830>
    80010b60:	0001d517          	auipc	a0,0x1d
    80010b64:	68050513          	addi	a0,a0,1664 # 8002e1e0 <__func__.0+0x2f8>
    80010b68:	0c31a0ef          	jal	8002b42a <printf>
    80010b6c:	00047797          	auipc	a5,0x47
    80010b70:	4a57c783          	lbu	a5,1189(a5) # 80058011 <excpt+0x1>
    80010b74:	0001d597          	auipc	a1,0x1d
    80010b78:	63458593          	addi	a1,a1,1588 # 8002e1a8 <__func__.0+0x2c0>
    80010b7c:	c789                	beqz	a5,80010b86 <illegal_except_9+0x70>
    80010b7e:	0001d597          	auipc	a1,0x1d
    80010b82:	63a58593          	addi	a1,a1,1594 # 8002e1b8 <__func__.0+0x2d0>
    80010b86:	0001d517          	auipc	a0,0x1d
    80010b8a:	67250513          	addi	a0,a0,1650 # 8002e1f8 <__func__.0+0x310>
    80010b8e:	09d1a0ef          	jal	8002b42a <printf>
    80010b92:	00047797          	auipc	a5,0x47
    80010b96:	47f7c783          	lbu	a5,1151(a5) # 80058011 <excpt+0x1>
    80010b9a:	10079063          	bnez	a5,80010c9a <illegal_except_9+0x184>
    80010b9e:	4529                	li	a0,10
    80010ba0:	578190ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010ba4:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010ba6:	00047417          	auipc	s0,0x47
    80010baa:	46b44403          	lbu	s0,1131(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80010bae:	b5af00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010bb2:	00047497          	auipc	s1,0x47
    80010bb6:	45e48493          	addi	s1,s1,1118 # 80058010 <excpt>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010bba:	001007b7          	lui	a5,0x100
    80010bbe:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010bc2:	450d                	li	a0,3
    80010bc4:	b44f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010bc8:	a44f00ef          	jal	80000e0c <test_setup_except_function>
    80010bcc:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010bd0:	08200593          	li	a1,130
    80010bd4:	00021617          	auipc	a2,0x21
    80010bd8:	b7c60613          	addi	a2,a2,-1156 # 80031750 <__func__.0+0x3868>
    80010bdc:	0001d517          	auipc	a0,0x1d
    80010be0:	60450513          	addi	a0,a0,1540 # 8002e1e0 <__func__.0+0x2f8>
    80010be4:	0471a0ef          	jal	8002b42a <printf>
    80010be8:	00047797          	auipc	a5,0x47
    80010bec:	4297c783          	lbu	a5,1065(a5) # 80058011 <excpt+0x1>
    80010bf0:	0001d597          	auipc	a1,0x1d
    80010bf4:	5c858593          	addi	a1,a1,1480 # 8002e1b8 <__func__.0+0x2d0>
    80010bf8:	cf89                	beqz	a5,80010c12 <illegal_except_9+0xfc>
    80010bfa:	6498                	ld	a4,8(s1)
    80010bfc:	4789                	li	a5,2
    80010bfe:	0001d597          	auipc	a1,0x1d
    80010c02:	5aa58593          	addi	a1,a1,1450 # 8002e1a8 <__func__.0+0x2c0>
    80010c06:	00f70663          	beq	a4,a5,80010c12 <illegal_except_9+0xfc>
    80010c0a:	0001d597          	auipc	a1,0x1d
    80010c0e:	5ae58593          	addi	a1,a1,1454 # 8002e1b8 <__func__.0+0x2d0>
    80010c12:	0001d517          	auipc	a0,0x1d
    80010c16:	5e650513          	addi	a0,a0,1510 # 8002e1f8 <__func__.0+0x310>
    80010c1a:	0111a0ef          	jal	8002b42a <printf>
    80010c1e:	00047797          	auipc	a5,0x47
    80010c22:	3f37c783          	lbu	a5,1011(a5) # 80058011 <excpt+0x1>
    80010c26:	c789                	beqz	a5,80010c30 <illegal_except_9+0x11a>
    80010c28:	6498                	ld	a4,8(s1)
    80010c2a:	4789                	li	a5,2
    80010c2c:	00f70c63          	beq	a4,a5,80010c44 <illegal_except_9+0x12e>
    80010c30:	0001d517          	auipc	a0,0x1d
    80010c34:	5d050513          	addi	a0,a0,1488 # 8002e200 <__func__.0+0x318>
    80010c38:	7f21a0ef          	jal	8002b42a <printf>
    80010c3c:	02900513          	li	a0,41
    80010c40:	4d8190ef          	jal	8002a118 <putchar>
    80010c44:	4529                	li	a0,10
    80010c46:	4d2190ef          	jal	8002a118 <putchar>
    80010c4a:	e015                	bnez	s0,80010c6e <illegal_except_9+0x158>
    80010c4c:	00047417          	auipc	s0,0x47
    80010c50:	3c544403          	lbu	s0,965(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010c54:	0001d597          	auipc	a1,0x1d
    80010c58:	56458593          	addi	a1,a1,1380 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010c5c:	cc11                	beqz	s0,80010c78 <illegal_except_9+0x162>
    80010c5e:	6498                	ld	a4,8(s1)
    80010c60:	4789                	li	a5,2
    TEST_END();
    80010c62:	0001d597          	auipc	a1,0x1d
    80010c66:	54658593          	addi	a1,a1,1350 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010c6a:	00f70763          	beq	a4,a5,80010c78 <illegal_except_9+0x162>
    80010c6e:	4401                	li	s0,0
    TEST_END();
    80010c70:	0001d597          	auipc	a1,0x1d
    80010c74:	54858593          	addi	a1,a1,1352 # 8002e1b8 <__func__.0+0x2d0>
    80010c78:	0001d517          	auipc	a0,0x1d
    80010c7c:	5e850513          	addi	a0,a0,1512 # 8002e260 <__func__.0+0x378>
    80010c80:	7aa1a0ef          	jal	8002b42a <printf>
    80010c84:	4511                	li	a0,4
    80010c86:	a82f00ef          	jal	80000f08 <goto_priv>
    80010c8a:	b9bf00ef          	jal	80001824 <reset_state>
}
    80010c8e:	60e2                	ld	ra,24(sp)
    80010c90:	8522                	mv	a0,s0
    80010c92:	6442                	ld	s0,16(sp)
    80010c94:	64a2                	ld	s1,8(sp)
    80010c96:	6105                	addi	sp,sp,32
    80010c98:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010c9a:	0001d517          	auipc	a0,0x1d
    80010c9e:	56650513          	addi	a0,a0,1382 # 8002e200 <__func__.0+0x318>
    80010ca2:	7881a0ef          	jal	8002b42a <printf>
    80010ca6:	02900513          	li	a0,41
    80010caa:	46e190ef          	jal	8002a118 <putchar>
    80010cae:	bdc5                	j	80010b9e <illegal_except_9+0x88>

0000000080010cb0 <illegal_except_10>:

bool illegal_except_10() {
    80010cb0:	1101                	addi	sp,sp,-32

    TEST_START();
    80010cb2:	0001c597          	auipc	a1,0x1c
    80010cb6:	c9e58593          	addi	a1,a1,-866 # 8002c950 <__func__.5>
    80010cba:	0001d517          	auipc	a0,0x1d
    80010cbe:	50e50513          	addi	a0,a0,1294 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_10() {
    80010cc2:	ec06                	sd	ra,24(sp)
    80010cc4:	e822                	sd	s0,16(sp)
    80010cc6:	e426                	sd	s1,8(sp)
    TEST_START();
    80010cc8:	7621a0ef          	jal	8002b42a <printf>
    80010ccc:	4529                	li	a0,10
    80010cce:	44a190ef          	jal	8002a118 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80010cd2:	4511                	li	a0,4
    80010cd4:	a34f00ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010cd8:	b4df00ef          	jal	80001824 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010cdc:	001007b7          	lui	a5,0x100
    80010ce0:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010ce4:	450d                	li	a0,3
    80010ce6:	a22f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010cea:	922f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010cee:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    80010cf2:	08200593          	li	a1,130
    80010cf6:	00021617          	auipc	a2,0x21
    80010cfa:	a9260613          	addi	a2,a2,-1390 # 80031788 <__func__.0+0x38a0>
    80010cfe:	0001d517          	auipc	a0,0x1d
    80010d02:	4e250513          	addi	a0,a0,1250 # 8002e1e0 <__func__.0+0x2f8>
    80010d06:	7241a0ef          	jal	8002b42a <printf>
    80010d0a:	00047797          	auipc	a5,0x47
    80010d0e:	3077c783          	lbu	a5,775(a5) # 80058011 <excpt+0x1>
    80010d12:	00047497          	auipc	s1,0x47
    80010d16:	2fe48493          	addi	s1,s1,766 # 80058010 <excpt>
    80010d1a:	0001d597          	auipc	a1,0x1d
    80010d1e:	49e58593          	addi	a1,a1,1182 # 8002e1b8 <__func__.0+0x2d0>
    80010d22:	cf89                	beqz	a5,80010d3c <illegal_except_10+0x8c>
    80010d24:	6498                	ld	a4,8(s1)
    80010d26:	4789                	li	a5,2
    80010d28:	0001d597          	auipc	a1,0x1d
    80010d2c:	48058593          	addi	a1,a1,1152 # 8002e1a8 <__func__.0+0x2c0>
    80010d30:	00f70663          	beq	a4,a5,80010d3c <illegal_except_10+0x8c>
    80010d34:	0001d597          	auipc	a1,0x1d
    80010d38:	48458593          	addi	a1,a1,1156 # 8002e1b8 <__func__.0+0x2d0>
    80010d3c:	0001d517          	auipc	a0,0x1d
    80010d40:	4bc50513          	addi	a0,a0,1212 # 8002e1f8 <__func__.0+0x310>
    80010d44:	6e61a0ef          	jal	8002b42a <printf>
    80010d48:	00047797          	auipc	a5,0x47
    80010d4c:	2c97c783          	lbu	a5,713(a5) # 80058011 <excpt+0x1>
    80010d50:	c789                	beqz	a5,80010d5a <illegal_except_10+0xaa>
    80010d52:	6498                	ld	a4,8(s1)
    80010d54:	4789                	li	a5,2
    80010d56:	00f70c63          	beq	a4,a5,80010d6e <illegal_except_10+0xbe>
    80010d5a:	0001d517          	auipc	a0,0x1d
    80010d5e:	4a650513          	addi	a0,a0,1190 # 8002e200 <__func__.0+0x318>
    80010d62:	6c81a0ef          	jal	8002b42a <printf>
    80010d66:	02900513          	li	a0,41
    80010d6a:	3ae190ef          	jal	8002a118 <putchar>
    80010d6e:	4529                	li	a0,10
    80010d70:	3a8190ef          	jal	8002a118 <putchar>
    80010d74:	00047797          	auipc	a5,0x47
    80010d78:	29d7c783          	lbu	a5,669(a5) # 80058011 <excpt+0x1>
    80010d7c:	4401                	li	s0,0
    80010d7e:	c789                	beqz	a5,80010d88 <illegal_except_10+0xd8>
    80010d80:	6480                	ld	s0,8(s1)
    80010d82:	1479                	addi	s0,s0,-2
    80010d84:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    80010d88:	4511                	li	a0,4
    80010d8a:	97ef00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010d8e:	001007b7          	lui	a5,0x100
    80010d92:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010d96:	450d                	li	a0,3
    80010d98:	970f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010d9c:	870f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010da0:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010da4:	08200593          	li	a1,130
    80010da8:	00021617          	auipc	a2,0x21
    80010dac:	a1860613          	addi	a2,a2,-1512 # 800317c0 <__func__.0+0x38d8>
    80010db0:	0001d517          	auipc	a0,0x1d
    80010db4:	43050513          	addi	a0,a0,1072 # 8002e1e0 <__func__.0+0x2f8>
    80010db8:	6721a0ef          	jal	8002b42a <printf>
    80010dbc:	00047797          	auipc	a5,0x47
    80010dc0:	2557c783          	lbu	a5,597(a5) # 80058011 <excpt+0x1>
    80010dc4:	0001d597          	auipc	a1,0x1d
    80010dc8:	3f458593          	addi	a1,a1,1012 # 8002e1b8 <__func__.0+0x2d0>
    80010dcc:	cf89                	beqz	a5,80010de6 <illegal_except_10+0x136>
    80010dce:	6498                	ld	a4,8(s1)
    80010dd0:	4789                	li	a5,2
    80010dd2:	0001d597          	auipc	a1,0x1d
    80010dd6:	3d658593          	addi	a1,a1,982 # 8002e1a8 <__func__.0+0x2c0>
    80010dda:	00f70663          	beq	a4,a5,80010de6 <illegal_except_10+0x136>
    80010dde:	0001d597          	auipc	a1,0x1d
    80010de2:	3da58593          	addi	a1,a1,986 # 8002e1b8 <__func__.0+0x2d0>
    80010de6:	0001d517          	auipc	a0,0x1d
    80010dea:	41250513          	addi	a0,a0,1042 # 8002e1f8 <__func__.0+0x310>
    80010dee:	63c1a0ef          	jal	8002b42a <printf>
    80010df2:	00047797          	auipc	a5,0x47
    80010df6:	21f7c783          	lbu	a5,543(a5) # 80058011 <excpt+0x1>
    80010dfa:	c789                	beqz	a5,80010e04 <illegal_except_10+0x154>
    80010dfc:	6498                	ld	a4,8(s1)
    80010dfe:	4789                	li	a5,2
    80010e00:	00f70c63          	beq	a4,a5,80010e18 <illegal_except_10+0x168>
    80010e04:	0001d517          	auipc	a0,0x1d
    80010e08:	3fc50513          	addi	a0,a0,1020 # 8002e200 <__func__.0+0x318>
    80010e0c:	61e1a0ef          	jal	8002b42a <printf>
    80010e10:	02900513          	li	a0,41
    80010e14:	304190ef          	jal	8002a118 <putchar>
    80010e18:	4529                	li	a0,10
    80010e1a:	2fe190ef          	jal	8002a118 <putchar>
    80010e1e:	c015                	beqz	s0,80010e42 <illegal_except_10+0x192>
    80010e20:	00047417          	auipc	s0,0x47
    80010e24:	1f144403          	lbu	s0,497(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010e28:	0001d597          	auipc	a1,0x1d
    80010e2c:	39058593          	addi	a1,a1,912 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010e30:	cc11                	beqz	s0,80010e4c <illegal_except_10+0x19c>
    80010e32:	6498                	ld	a4,8(s1)
    80010e34:	4789                	li	a5,2
    TEST_END();
    80010e36:	0001d597          	auipc	a1,0x1d
    80010e3a:	37258593          	addi	a1,a1,882 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010e3e:	00f70763          	beq	a4,a5,80010e4c <illegal_except_10+0x19c>
    80010e42:	4401                	li	s0,0
    TEST_END();
    80010e44:	0001d597          	auipc	a1,0x1d
    80010e48:	37458593          	addi	a1,a1,884 # 8002e1b8 <__func__.0+0x2d0>
    80010e4c:	0001d517          	auipc	a0,0x1d
    80010e50:	41450513          	addi	a0,a0,1044 # 8002e260 <__func__.0+0x378>
    80010e54:	5d61a0ef          	jal	8002b42a <printf>
    80010e58:	4511                	li	a0,4
    80010e5a:	8aef00ef          	jal	80000f08 <goto_priv>
    80010e5e:	9c7f00ef          	jal	80001824 <reset_state>
}
    80010e62:	60e2                	ld	ra,24(sp)
    80010e64:	8522                	mv	a0,s0
    80010e66:	6442                	ld	s0,16(sp)
    80010e68:	64a2                	ld	s1,8(sp)
    80010e6a:	6105                	addi	sp,sp,32
    80010e6c:	8082                	ret

0000000080010e6e <illegal_except_11>:

bool illegal_except_11() {
    80010e6e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010e70:	0001c597          	auipc	a1,0x1c
    80010e74:	af858593          	addi	a1,a1,-1288 # 8002c968 <__func__.4>
    80010e78:	0001d517          	auipc	a0,0x1d
    80010e7c:	35050513          	addi	a0,a0,848 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_11() {
    80010e80:	ec06                	sd	ra,24(sp)
    80010e82:	e822                	sd	s0,16(sp)
    80010e84:	e426                	sd	s1,8(sp)
    TEST_START();
    80010e86:	5a41a0ef          	jal	8002b42a <printf>
    80010e8a:	4529                	li	a0,10
    80010e8c:	28c190ef          	jal	8002a118 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80010e90:	f7def0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010e94:	4511                	li	a0,4
    80010e96:	872f00ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010e9a:	98bf00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80010e9e:	4505                	li	a0,1
    80010ea0:	868f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010ea4:	f69ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010ea8:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80010eac:	08200593          	li	a1,130
    80010eb0:	00021617          	auipc	a2,0x21
    80010eb4:	94860613          	addi	a2,a2,-1720 # 800317f8 <__func__.0+0x3910>
    80010eb8:	0001d517          	auipc	a0,0x1d
    80010ebc:	32850513          	addi	a0,a0,808 # 8002e1e0 <__func__.0+0x2f8>
    80010ec0:	56a1a0ef          	jal	8002b42a <printf>
    80010ec4:	00047797          	auipc	a5,0x47
    80010ec8:	14d7c783          	lbu	a5,333(a5) # 80058011 <excpt+0x1>
    80010ecc:	00047497          	auipc	s1,0x47
    80010ed0:	14448493          	addi	s1,s1,324 # 80058010 <excpt>
    80010ed4:	0001d597          	auipc	a1,0x1d
    80010ed8:	2e458593          	addi	a1,a1,740 # 8002e1b8 <__func__.0+0x2d0>
    80010edc:	cf89                	beqz	a5,80010ef6 <illegal_except_11+0x88>
    80010ede:	6498                	ld	a4,8(s1)
    80010ee0:	4789                	li	a5,2
    80010ee2:	0001d597          	auipc	a1,0x1d
    80010ee6:	2c658593          	addi	a1,a1,710 # 8002e1a8 <__func__.0+0x2c0>
    80010eea:	00f70663          	beq	a4,a5,80010ef6 <illegal_except_11+0x88>
    80010eee:	0001d597          	auipc	a1,0x1d
    80010ef2:	2ca58593          	addi	a1,a1,714 # 8002e1b8 <__func__.0+0x2d0>
    80010ef6:	0001d517          	auipc	a0,0x1d
    80010efa:	30250513          	addi	a0,a0,770 # 8002e1f8 <__func__.0+0x310>
    80010efe:	52c1a0ef          	jal	8002b42a <printf>
    80010f02:	00047797          	auipc	a5,0x47
    80010f06:	10f7c783          	lbu	a5,271(a5) # 80058011 <excpt+0x1>
    80010f0a:	c789                	beqz	a5,80010f14 <illegal_except_11+0xa6>
    80010f0c:	6498                	ld	a4,8(s1)
    80010f0e:	4789                	li	a5,2
    80010f10:	00f70c63          	beq	a4,a5,80010f28 <illegal_except_11+0xba>
    80010f14:	0001d517          	auipc	a0,0x1d
    80010f18:	2ec50513          	addi	a0,a0,748 # 8002e200 <__func__.0+0x318>
    80010f1c:	50e1a0ef          	jal	8002b42a <printf>
    80010f20:	02900513          	li	a0,41
    80010f24:	1f4190ef          	jal	8002a118 <putchar>
    80010f28:	4529                	li	a0,10
    80010f2a:	1ee190ef          	jal	8002a118 <putchar>
    80010f2e:	00047797          	auipc	a5,0x47
    80010f32:	0e37c783          	lbu	a5,227(a5) # 80058011 <excpt+0x1>
    80010f36:	4401                	li	s0,0
    80010f38:	c789                	beqz	a5,80010f42 <illegal_except_11+0xd4>
    80010f3a:	6480                	ld	s0,8(s1)
    80010f3c:	1479                	addi	s0,s0,-2
    80010f3e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80010f42:	ecbef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010f46:	4511                	li	a0,4
    80010f48:	fc1ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010f4c:	8d9f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80010f50:	4505                	li	a0,1
    80010f52:	fb7ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010f56:	eb7ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010f5a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f5e:	08200593          	li	a1,130
    80010f62:	00021617          	auipc	a2,0x21
    80010f66:	8d660613          	addi	a2,a2,-1834 # 80031838 <__func__.0+0x3950>
    80010f6a:	0001d517          	auipc	a0,0x1d
    80010f6e:	27650513          	addi	a0,a0,630 # 8002e1e0 <__func__.0+0x2f8>
    80010f72:	4b81a0ef          	jal	8002b42a <printf>
    80010f76:	00047797          	auipc	a5,0x47
    80010f7a:	09b7c783          	lbu	a5,155(a5) # 80058011 <excpt+0x1>
    80010f7e:	0001d597          	auipc	a1,0x1d
    80010f82:	23a58593          	addi	a1,a1,570 # 8002e1b8 <__func__.0+0x2d0>
    80010f86:	cf89                	beqz	a5,80010fa0 <illegal_except_11+0x132>
    80010f88:	6498                	ld	a4,8(s1)
    80010f8a:	4789                	li	a5,2
    80010f8c:	0001d597          	auipc	a1,0x1d
    80010f90:	21c58593          	addi	a1,a1,540 # 8002e1a8 <__func__.0+0x2c0>
    80010f94:	00f70663          	beq	a4,a5,80010fa0 <illegal_except_11+0x132>
    80010f98:	0001d597          	auipc	a1,0x1d
    80010f9c:	22058593          	addi	a1,a1,544 # 8002e1b8 <__func__.0+0x2d0>
    80010fa0:	0001d517          	auipc	a0,0x1d
    80010fa4:	25850513          	addi	a0,a0,600 # 8002e1f8 <__func__.0+0x310>
    80010fa8:	4821a0ef          	jal	8002b42a <printf>
    80010fac:	00047797          	auipc	a5,0x47
    80010fb0:	0657c783          	lbu	a5,101(a5) # 80058011 <excpt+0x1>
    80010fb4:	c789                	beqz	a5,80010fbe <illegal_except_11+0x150>
    80010fb6:	6498                	ld	a4,8(s1)
    80010fb8:	4789                	li	a5,2
    80010fba:	00f70c63          	beq	a4,a5,80010fd2 <illegal_except_11+0x164>
    80010fbe:	0001d517          	auipc	a0,0x1d
    80010fc2:	24250513          	addi	a0,a0,578 # 8002e200 <__func__.0+0x318>
    80010fc6:	4641a0ef          	jal	8002b42a <printf>
    80010fca:	02900513          	li	a0,41
    80010fce:	14a190ef          	jal	8002a118 <putchar>
    80010fd2:	4529                	li	a0,10
    80010fd4:	144190ef          	jal	8002a118 <putchar>
    80010fd8:	c015                	beqz	s0,80010ffc <illegal_except_11+0x18e>
    80010fda:	00047417          	auipc	s0,0x47
    80010fde:	03744403          	lbu	s0,55(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010fe2:	0001d597          	auipc	a1,0x1d
    80010fe6:	1d658593          	addi	a1,a1,470 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010fea:	cc11                	beqz	s0,80011006 <illegal_except_11+0x198>
    80010fec:	6498                	ld	a4,8(s1)
    80010fee:	4789                	li	a5,2
    TEST_END();
    80010ff0:	0001d597          	auipc	a1,0x1d
    80010ff4:	1b858593          	addi	a1,a1,440 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010ff8:	00f70763          	beq	a4,a5,80011006 <illegal_except_11+0x198>
    80010ffc:	4401                	li	s0,0
    TEST_END();
    80010ffe:	0001d597          	auipc	a1,0x1d
    80011002:	1ba58593          	addi	a1,a1,442 # 8002e1b8 <__func__.0+0x2d0>
    80011006:	0001d517          	auipc	a0,0x1d
    8001100a:	25a50513          	addi	a0,a0,602 # 8002e260 <__func__.0+0x378>
    8001100e:	41c1a0ef          	jal	8002b42a <printf>
    80011012:	4511                	li	a0,4
    80011014:	ef5ef0ef          	jal	80000f08 <goto_priv>
    80011018:	80df00ef          	jal	80001824 <reset_state>
}
    8001101c:	60e2                	ld	ra,24(sp)
    8001101e:	8522                	mv	a0,s0
    80011020:	6442                	ld	s0,16(sp)
    80011022:	64a2                	ld	s1,8(sp)
    80011024:	6105                	addi	sp,sp,32
    80011026:	8082                	ret

0000000080011028 <illegal_except_12>:

bool illegal_except_12() {
    80011028:	1101                	addi	sp,sp,-32

    TEST_START();
    8001102a:	0001c597          	auipc	a1,0x1c
    8001102e:	95658593          	addi	a1,a1,-1706 # 8002c980 <__func__.3>
    80011032:	0001d517          	auipc	a0,0x1d
    80011036:	19650513          	addi	a0,a0,406 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_12() {
    8001103a:	ec06                	sd	ra,24(sp)
    8001103c:	e822                	sd	s0,16(sp)
    8001103e:	e426                	sd	s1,8(sp)
    TEST_START();
    80011040:	3ea1a0ef          	jal	8002b42a <printf>
    80011044:	4529                	li	a0,10
    80011046:	0d2190ef          	jal	8002a118 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    8001104a:	dc3ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001104e:	4511                	li	a0,4
    80011050:	eb9ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80011054:	fd0f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80011058:	4505                	li	a0,1
    8001105a:	eafef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001105e:	dafef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80011062:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80011066:	08200593          	li	a1,130
    8001106a:	00021617          	auipc	a2,0x21
    8001106e:	80e60613          	addi	a2,a2,-2034 # 80031878 <__func__.0+0x3990>
    80011072:	0001d517          	auipc	a0,0x1d
    80011076:	16e50513          	addi	a0,a0,366 # 8002e1e0 <__func__.0+0x2f8>
    8001107a:	3b01a0ef          	jal	8002b42a <printf>
    8001107e:	00047797          	auipc	a5,0x47
    80011082:	f937c783          	lbu	a5,-109(a5) # 80058011 <excpt+0x1>
    80011086:	00047497          	auipc	s1,0x47
    8001108a:	f8a48493          	addi	s1,s1,-118 # 80058010 <excpt>
    8001108e:	0001d597          	auipc	a1,0x1d
    80011092:	12a58593          	addi	a1,a1,298 # 8002e1b8 <__func__.0+0x2d0>
    80011096:	cf89                	beqz	a5,800110b0 <illegal_except_12+0x88>
    80011098:	6498                	ld	a4,8(s1)
    8001109a:	4789                	li	a5,2
    8001109c:	0001d597          	auipc	a1,0x1d
    800110a0:	10c58593          	addi	a1,a1,268 # 8002e1a8 <__func__.0+0x2c0>
    800110a4:	00f70663          	beq	a4,a5,800110b0 <illegal_except_12+0x88>
    800110a8:	0001d597          	auipc	a1,0x1d
    800110ac:	11058593          	addi	a1,a1,272 # 8002e1b8 <__func__.0+0x2d0>
    800110b0:	0001d517          	auipc	a0,0x1d
    800110b4:	14850513          	addi	a0,a0,328 # 8002e1f8 <__func__.0+0x310>
    800110b8:	3721a0ef          	jal	8002b42a <printf>
    800110bc:	00047797          	auipc	a5,0x47
    800110c0:	f557c783          	lbu	a5,-171(a5) # 80058011 <excpt+0x1>
    800110c4:	c789                	beqz	a5,800110ce <illegal_except_12+0xa6>
    800110c6:	6498                	ld	a4,8(s1)
    800110c8:	4789                	li	a5,2
    800110ca:	00f70c63          	beq	a4,a5,800110e2 <illegal_except_12+0xba>
    800110ce:	0001d517          	auipc	a0,0x1d
    800110d2:	13250513          	addi	a0,a0,306 # 8002e200 <__func__.0+0x318>
    800110d6:	3541a0ef          	jal	8002b42a <printf>
    800110da:	02900513          	li	a0,41
    800110de:	03a190ef          	jal	8002a118 <putchar>
    800110e2:	4529                	li	a0,10
    800110e4:	034190ef          	jal	8002a118 <putchar>
    800110e8:	00047797          	auipc	a5,0x47
    800110ec:	f297c783          	lbu	a5,-215(a5) # 80058011 <excpt+0x1>
    800110f0:	4401                	li	s0,0
    800110f2:	c789                	beqz	a5,800110fc <illegal_except_12+0xd4>
    800110f4:	6480                	ld	s0,8(s1)
    800110f6:	1479                	addi	s0,s0,-2
    800110f8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    800110fc:	d11ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011100:	4511                	li	a0,4
    80011102:	e07ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80011106:	f1ef00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    8001110a:	4505                	li	a0,1
    8001110c:	dfdef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011110:	cfdef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80011114:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011118:	08200593          	li	a1,130
    8001111c:	00020617          	auipc	a2,0x20
    80011120:	79c60613          	addi	a2,a2,1948 # 800318b8 <__func__.0+0x39d0>
    80011124:	0001d517          	auipc	a0,0x1d
    80011128:	0bc50513          	addi	a0,a0,188 # 8002e1e0 <__func__.0+0x2f8>
    8001112c:	2fe1a0ef          	jal	8002b42a <printf>
    80011130:	00047797          	auipc	a5,0x47
    80011134:	ee17c783          	lbu	a5,-287(a5) # 80058011 <excpt+0x1>
    80011138:	0001d597          	auipc	a1,0x1d
    8001113c:	08058593          	addi	a1,a1,128 # 8002e1b8 <__func__.0+0x2d0>
    80011140:	cf89                	beqz	a5,8001115a <illegal_except_12+0x132>
    80011142:	6498                	ld	a4,8(s1)
    80011144:	4789                	li	a5,2
    80011146:	0001d597          	auipc	a1,0x1d
    8001114a:	06258593          	addi	a1,a1,98 # 8002e1a8 <__func__.0+0x2c0>
    8001114e:	00f70663          	beq	a4,a5,8001115a <illegal_except_12+0x132>
    80011152:	0001d597          	auipc	a1,0x1d
    80011156:	06658593          	addi	a1,a1,102 # 8002e1b8 <__func__.0+0x2d0>
    8001115a:	0001d517          	auipc	a0,0x1d
    8001115e:	09e50513          	addi	a0,a0,158 # 8002e1f8 <__func__.0+0x310>
    80011162:	2c81a0ef          	jal	8002b42a <printf>
    80011166:	00047797          	auipc	a5,0x47
    8001116a:	eab7c783          	lbu	a5,-341(a5) # 80058011 <excpt+0x1>
    8001116e:	c789                	beqz	a5,80011178 <illegal_except_12+0x150>
    80011170:	6498                	ld	a4,8(s1)
    80011172:	4789                	li	a5,2
    80011174:	00f70c63          	beq	a4,a5,8001118c <illegal_except_12+0x164>
    80011178:	0001d517          	auipc	a0,0x1d
    8001117c:	08850513          	addi	a0,a0,136 # 8002e200 <__func__.0+0x318>
    80011180:	2aa1a0ef          	jal	8002b42a <printf>
    80011184:	02900513          	li	a0,41
    80011188:	791180ef          	jal	8002a118 <putchar>
    8001118c:	4529                	li	a0,10
    8001118e:	78b180ef          	jal	8002a118 <putchar>
    80011192:	c801                	beqz	s0,800111a2 <illegal_except_12+0x17a>
    80011194:	00047797          	auipc	a5,0x47
    80011198:	e7d7c783          	lbu	a5,-387(a5) # 80058011 <excpt+0x1>
    8001119c:	4401                	li	s0,0
    8001119e:	0e079563          	bnez	a5,80011288 <illegal_except_12+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    800111a2:	c6bef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800111a6:	4511                	li	a0,4
    800111a8:	d61ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    800111ac:	e78f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    800111b0:	4505                	li	a0,1
    800111b2:	d57ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800111b6:	c57ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800111ba:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111be:	08200593          	li	a1,130
    800111c2:	00020617          	auipc	a2,0x20
    800111c6:	73660613          	addi	a2,a2,1846 # 800318f8 <__func__.0+0x3a10>
    800111ca:	0001d517          	auipc	a0,0x1d
    800111ce:	01650513          	addi	a0,a0,22 # 8002e1e0 <__func__.0+0x2f8>
    800111d2:	2581a0ef          	jal	8002b42a <printf>
    800111d6:	00047797          	auipc	a5,0x47
    800111da:	e3b7c783          	lbu	a5,-453(a5) # 80058011 <excpt+0x1>
    800111de:	0001d597          	auipc	a1,0x1d
    800111e2:	fda58593          	addi	a1,a1,-38 # 8002e1b8 <__func__.0+0x2d0>
    800111e6:	cf89                	beqz	a5,80011200 <illegal_except_12+0x1d8>
    800111e8:	6498                	ld	a4,8(s1)
    800111ea:	4789                	li	a5,2
    800111ec:	0001d597          	auipc	a1,0x1d
    800111f0:	fbc58593          	addi	a1,a1,-68 # 8002e1a8 <__func__.0+0x2c0>
    800111f4:	00f70663          	beq	a4,a5,80011200 <illegal_except_12+0x1d8>
    800111f8:	0001d597          	auipc	a1,0x1d
    800111fc:	fc058593          	addi	a1,a1,-64 # 8002e1b8 <__func__.0+0x2d0>
    80011200:	0001d517          	auipc	a0,0x1d
    80011204:	ff850513          	addi	a0,a0,-8 # 8002e1f8 <__func__.0+0x310>
    80011208:	2221a0ef          	jal	8002b42a <printf>
    8001120c:	00047797          	auipc	a5,0x47
    80011210:	e057c783          	lbu	a5,-507(a5) # 80058011 <excpt+0x1>
    80011214:	c789                	beqz	a5,8001121e <illegal_except_12+0x1f6>
    80011216:	6498                	ld	a4,8(s1)
    80011218:	4789                	li	a5,2
    8001121a:	00f70c63          	beq	a4,a5,80011232 <illegal_except_12+0x20a>
    8001121e:	0001d517          	auipc	a0,0x1d
    80011222:	fe250513          	addi	a0,a0,-30 # 8002e200 <__func__.0+0x318>
    80011226:	2041a0ef          	jal	8002b42a <printf>
    8001122a:	02900513          	li	a0,41
    8001122e:	6eb180ef          	jal	8002a118 <putchar>
    80011232:	4529                	li	a0,10
    80011234:	6e5180ef          	jal	8002a118 <putchar>
    80011238:	c015                	beqz	s0,8001125c <illegal_except_12+0x234>
    8001123a:	00047417          	auipc	s0,0x47
    8001123e:	dd744403          	lbu	s0,-553(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011242:	0001d597          	auipc	a1,0x1d
    80011246:	f7658593          	addi	a1,a1,-138 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8001124a:	cc11                	beqz	s0,80011266 <illegal_except_12+0x23e>
    8001124c:	6498                	ld	a4,8(s1)
    8001124e:	4789                	li	a5,2
    TEST_END();
    80011250:	0001d597          	auipc	a1,0x1d
    80011254:	f5858593          	addi	a1,a1,-168 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011258:	00f70763          	beq	a4,a5,80011266 <illegal_except_12+0x23e>
    8001125c:	4401                	li	s0,0
    TEST_END();
    8001125e:	0001d597          	auipc	a1,0x1d
    80011262:	f5a58593          	addi	a1,a1,-166 # 8002e1b8 <__func__.0+0x2d0>
    80011266:	0001d517          	auipc	a0,0x1d
    8001126a:	ffa50513          	addi	a0,a0,-6 # 8002e260 <__func__.0+0x378>
    8001126e:	1bc1a0ef          	jal	8002b42a <printf>
    80011272:	4511                	li	a0,4
    80011274:	c95ef0ef          	jal	80000f08 <goto_priv>
    80011278:	dacf00ef          	jal	80001824 <reset_state>
}
    8001127c:	60e2                	ld	ra,24(sp)
    8001127e:	8522                	mv	a0,s0
    80011280:	6442                	ld	s0,16(sp)
    80011282:	64a2                	ld	s1,8(sp)
    80011284:	6105                	addi	sp,sp,32
    80011286:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011288:	6480                	ld	s0,8(s1)
    8001128a:	1479                	addi	s0,s0,-2
    8001128c:	00143413          	seqz	s0,s0
    80011290:	bf09                	j	800111a2 <illegal_except_12+0x17a>

0000000080011292 <illegal_except_13>:


bool illegal_except_13() {
    80011292:	1101                	addi	sp,sp,-32

    TEST_START();
    80011294:	0001b597          	auipc	a1,0x1b
    80011298:	70458593          	addi	a1,a1,1796 # 8002c998 <__func__.2>
    8001129c:	0001d517          	auipc	a0,0x1d
    800112a0:	f2c50513          	addi	a0,a0,-212 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_13() {
    800112a4:	ec06                	sd	ra,24(sp)
    800112a6:	e822                	sd	s0,16(sp)
    800112a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800112aa:	1801a0ef          	jal	8002b42a <printf>
    800112ae:	4529                	li	a0,10
    800112b0:	669180ef          	jal	8002a118 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    800112b4:	b59ef0ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    800112b8:	450d                	li	a0,3
    800112ba:	c4fef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    800112be:	18005073          	csrwi	satp,0
    asm volatile(
    800112c2:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    800112c6:	00047597          	auipc	a1,0x47
    800112ca:	d4b5c583          	lbu	a1,-693(a1) # 80058011 <excpt+0x1>
    800112ce:	00020517          	auipc	a0,0x20
    800112d2:	66a50513          	addi	a0,a0,1642 # 80031938 <__func__.0+0x3a50>
    800112d6:	00047497          	auipc	s1,0x47
    800112da:	d3a48493          	addi	s1,s1,-710 # 80058010 <excpt>
    800112de:	14c1a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112e2:	08200593          	li	a1,130
    800112e6:	00020617          	auipc	a2,0x20
    800112ea:	65a60613          	addi	a2,a2,1626 # 80031940 <__func__.0+0x3a58>
    800112ee:	0001d517          	auipc	a0,0x1d
    800112f2:	ef250513          	addi	a0,a0,-270 # 8002e1e0 <__func__.0+0x2f8>
    800112f6:	1341a0ef          	jal	8002b42a <printf>
    800112fa:	00047797          	auipc	a5,0x47
    800112fe:	d177c783          	lbu	a5,-745(a5) # 80058011 <excpt+0x1>
    80011302:	0001d597          	auipc	a1,0x1d
    80011306:	eb658593          	addi	a1,a1,-330 # 8002e1b8 <__func__.0+0x2d0>
    8001130a:	cf89                	beqz	a5,80011324 <illegal_except_13+0x92>
    8001130c:	6498                	ld	a4,8(s1)
    8001130e:	4789                	li	a5,2
    80011310:	0001d597          	auipc	a1,0x1d
    80011314:	e9858593          	addi	a1,a1,-360 # 8002e1a8 <__func__.0+0x2c0>
    80011318:	00f70663          	beq	a4,a5,80011324 <illegal_except_13+0x92>
    8001131c:	0001d597          	auipc	a1,0x1d
    80011320:	e9c58593          	addi	a1,a1,-356 # 8002e1b8 <__func__.0+0x2d0>
    80011324:	0001d517          	auipc	a0,0x1d
    80011328:	ed450513          	addi	a0,a0,-300 # 8002e1f8 <__func__.0+0x310>
    8001132c:	0fe1a0ef          	jal	8002b42a <printf>
    80011330:	00047797          	auipc	a5,0x47
    80011334:	ce17c783          	lbu	a5,-799(a5) # 80058011 <excpt+0x1>
    80011338:	c789                	beqz	a5,80011342 <illegal_except_13+0xb0>
    8001133a:	6498                	ld	a4,8(s1)
    8001133c:	4789                	li	a5,2
    8001133e:	00f70c63          	beq	a4,a5,80011356 <illegal_except_13+0xc4>
    80011342:	0001d517          	auipc	a0,0x1d
    80011346:	ebe50513          	addi	a0,a0,-322 # 8002e200 <__func__.0+0x318>
    8001134a:	0e01a0ef          	jal	8002b42a <printf>
    8001134e:	02900513          	li	a0,41
    80011352:	5c7180ef          	jal	8002a118 <putchar>
    80011356:	4529                	li	a0,10
    80011358:	5c1180ef          	jal	8002a118 <putchar>
    8001135c:	00047417          	auipc	s0,0x47
    80011360:	cb544403          	lbu	s0,-843(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011364:	0001d597          	auipc	a1,0x1d
    80011368:	e5458593          	addi	a1,a1,-428 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8001136c:	cc11                	beqz	s0,80011388 <illegal_except_13+0xf6>
    8001136e:	6498                	ld	a4,8(s1)
    80011370:	4789                	li	a5,2
    TEST_END();
    80011372:	0001d597          	auipc	a1,0x1d
    80011376:	e3658593          	addi	a1,a1,-458 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8001137a:	00f70763          	beq	a4,a5,80011388 <illegal_except_13+0xf6>
    8001137e:	4401                	li	s0,0
    TEST_END();
    80011380:	0001d597          	auipc	a1,0x1d
    80011384:	e3858593          	addi	a1,a1,-456 # 8002e1b8 <__func__.0+0x2d0>
    80011388:	0001d517          	auipc	a0,0x1d
    8001138c:	ed850513          	addi	a0,a0,-296 # 8002e260 <__func__.0+0x378>
    80011390:	09a1a0ef          	jal	8002b42a <printf>
    80011394:	4511                	li	a0,4
    80011396:	b73ef0ef          	jal	80000f08 <goto_priv>
    8001139a:	c8af00ef          	jal	80001824 <reset_state>
}
    8001139e:	60e2                	ld	ra,24(sp)
    800113a0:	8522                	mv	a0,s0
    800113a2:	6442                	ld	s0,16(sp)
    800113a4:	64a2                	ld	s1,8(sp)
    800113a6:	6105                	addi	sp,sp,32
    800113a8:	8082                	ret

00000000800113aa <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    800113aa:	1101                	addi	sp,sp,-32

    TEST_START();
    800113ac:	0001b597          	auipc	a1,0x1b
    800113b0:	60458593          	addi	a1,a1,1540 # 8002c9b0 <__func__.1>
    800113b4:	0001d517          	auipc	a0,0x1d
    800113b8:	e1450513          	addi	a0,a0,-492 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_14() {
    800113bc:	ec06                	sd	ra,24(sp)
    800113be:	e822                	sd	s0,16(sp)
    800113c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800113c2:	0681a0ef          	jal	8002b42a <printf>
    800113c6:	4529                	li	a0,10
    800113c8:	551180ef          	jal	8002a118 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    800113cc:	a41ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800113d0:	4511                	li	a0,4
    800113d2:	b37ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    800113d6:	004007b7          	lui	a5,0x400
    800113da:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800113de:	450d                	li	a0,3
    800113e0:	b29ef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    800113e4:	4501                	li	a0,0
    800113e6:	a43ef0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800113ea:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800113ee:	08200593          	li	a1,130
    800113f2:	00020617          	auipc	a2,0x20
    800113f6:	59e60613          	addi	a2,a2,1438 # 80031990 <__func__.0+0x3aa8>
    800113fa:	0001d517          	auipc	a0,0x1d
    800113fe:	de650513          	addi	a0,a0,-538 # 8002e1e0 <__func__.0+0x2f8>
    80011402:	0281a0ef          	jal	8002b42a <printf>
    80011406:	00047797          	auipc	a5,0x47
    8001140a:	c0b7c783          	lbu	a5,-1013(a5) # 80058011 <excpt+0x1>
    8001140e:	00047497          	auipc	s1,0x47
    80011412:	c0248493          	addi	s1,s1,-1022 # 80058010 <excpt>
    80011416:	0001d597          	auipc	a1,0x1d
    8001141a:	da258593          	addi	a1,a1,-606 # 8002e1b8 <__func__.0+0x2d0>
    8001141e:	cf89                	beqz	a5,80011438 <illegal_except_14+0x8e>
    80011420:	6498                	ld	a4,8(s1)
    80011422:	4789                	li	a5,2
    80011424:	0001d597          	auipc	a1,0x1d
    80011428:	d8458593          	addi	a1,a1,-636 # 8002e1a8 <__func__.0+0x2c0>
    8001142c:	00f70663          	beq	a4,a5,80011438 <illegal_except_14+0x8e>
    80011430:	0001d597          	auipc	a1,0x1d
    80011434:	d8858593          	addi	a1,a1,-632 # 8002e1b8 <__func__.0+0x2d0>
    80011438:	0001d517          	auipc	a0,0x1d
    8001143c:	dc050513          	addi	a0,a0,-576 # 8002e1f8 <__func__.0+0x310>
    80011440:	7eb190ef          	jal	8002b42a <printf>
    80011444:	00047797          	auipc	a5,0x47
    80011448:	bcd7c783          	lbu	a5,-1075(a5) # 80058011 <excpt+0x1>
    8001144c:	c789                	beqz	a5,80011456 <illegal_except_14+0xac>
    8001144e:	6498                	ld	a4,8(s1)
    80011450:	4789                	li	a5,2
    80011452:	00f70c63          	beq	a4,a5,8001146a <illegal_except_14+0xc0>
    80011456:	0001d517          	auipc	a0,0x1d
    8001145a:	daa50513          	addi	a0,a0,-598 # 8002e200 <__func__.0+0x318>
    8001145e:	7cd190ef          	jal	8002b42a <printf>
    80011462:	02900513          	li	a0,41
    80011466:	4b3180ef          	jal	8002a118 <putchar>
    8001146a:	4529                	li	a0,10
    8001146c:	4ad180ef          	jal	8002a118 <putchar>
    80011470:	00047417          	auipc	s0,0x47
    80011474:	ba144403          	lbu	s0,-1119(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011478:	0001d597          	auipc	a1,0x1d
    8001147c:	d4058593          	addi	a1,a1,-704 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011480:	cc11                	beqz	s0,8001149c <illegal_except_14+0xf2>
    80011482:	6498                	ld	a4,8(s1)
    80011484:	4789                	li	a5,2
    TEST_END();
    80011486:	0001d597          	auipc	a1,0x1d
    8001148a:	d2258593          	addi	a1,a1,-734 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001148e:	00f70763          	beq	a4,a5,8001149c <illegal_except_14+0xf2>
    80011492:	4401                	li	s0,0
    TEST_END();
    80011494:	0001d597          	auipc	a1,0x1d
    80011498:	d2458593          	addi	a1,a1,-732 # 8002e1b8 <__func__.0+0x2d0>
    8001149c:	0001d517          	auipc	a0,0x1d
    800114a0:	dc450513          	addi	a0,a0,-572 # 8002e260 <__func__.0+0x378>
    800114a4:	787190ef          	jal	8002b42a <printf>
    800114a8:	4511                	li	a0,4
    800114aa:	a5fef0ef          	jal	80000f08 <goto_priv>
    800114ae:	b76f00ef          	jal	80001824 <reset_state>

}
    800114b2:	60e2                	ld	ra,24(sp)
    800114b4:	8522                	mv	a0,s0
    800114b6:	6442                	ld	s0,16(sp)
    800114b8:	64a2                	ld	s1,8(sp)
    800114ba:	6105                	addi	sp,sp,32
    800114bc:	8082                	ret

00000000800114be <illegal_except_15>:

bool illegal_except_15() {
    800114be:	1141                	addi	sp,sp,-16

    TEST_START();
    800114c0:	0001b597          	auipc	a1,0x1b
    800114c4:	50858593          	addi	a1,a1,1288 # 8002c9c8 <__func__.0>
    800114c8:	0001d517          	auipc	a0,0x1d
    800114cc:	d0050513          	addi	a0,a0,-768 # 8002e1c8 <__func__.0+0x2e0>
bool illegal_except_15() {
    800114d0:	e406                	sd	ra,8(sp)
    800114d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800114d4:	757190ef          	jal	8002b42a <printf>
    800114d8:	4529                	li	a0,10
    800114da:	43f180ef          	jal	8002a118 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    800114de:	92fef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800114e2:	4511                	li	a0,4
    800114e4:	a25ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    800114e8:	004007b7          	lui	a5,0x400
    800114ec:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800114f0:	450d                	li	a0,3
    800114f2:	a17ef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800114f6:	4509                	li	a0,2
    800114f8:	931ef0ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    800114fc:	00000297          	auipc	t0,0x0
    80011500:	01028293          	addi	t0,t0,16 # 8001150c <illegal_except_15+0x4e>
    80011504:	14129073          	csrw	sepc,t0
    80011508:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001150c:	08200593          	li	a1,130
    80011510:	00020617          	auipc	a2,0x20
    80011514:	4b060613          	addi	a2,a2,1200 # 800319c0 <__func__.0+0x3ad8>
    80011518:	0001d517          	auipc	a0,0x1d
    8001151c:	cc850513          	addi	a0,a0,-824 # 8002e1e0 <__func__.0+0x2f8>
    80011520:	70b190ef          	jal	8002b42a <printf>
    80011524:	00047797          	auipc	a5,0x47
    80011528:	aed7c783          	lbu	a5,-1299(a5) # 80058011 <excpt+0x1>
    8001152c:	0001d597          	auipc	a1,0x1d
    80011530:	c7c58593          	addi	a1,a1,-900 # 8002e1a8 <__func__.0+0x2c0>
    80011534:	c789                	beqz	a5,8001153e <illegal_except_15+0x80>
    80011536:	0001d597          	auipc	a1,0x1d
    8001153a:	c8258593          	addi	a1,a1,-894 # 8002e1b8 <__func__.0+0x2d0>
    8001153e:	0001d517          	auipc	a0,0x1d
    80011542:	cba50513          	addi	a0,a0,-838 # 8002e1f8 <__func__.0+0x310>
    80011546:	6e5190ef          	jal	8002b42a <printf>
    8001154a:	00047797          	auipc	a5,0x47
    8001154e:	ac77c783          	lbu	a5,-1337(a5) # 80058011 <excpt+0x1>
    80011552:	e7a1                	bnez	a5,8001159a <illegal_except_15+0xdc>
    80011554:	4529                	li	a0,10
    80011556:	3c3180ef          	jal	8002a118 <putchar>
    8001155a:	00047797          	auipc	a5,0x47
    8001155e:	ab77c783          	lbu	a5,-1353(a5) # 80058011 <excpt+0x1>
    80011562:	e795                	bnez	a5,8001158e <illegal_except_15+0xd0>
    80011564:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80011566:	0001d597          	auipc	a1,0x1d
    8001156a:	c4258593          	addi	a1,a1,-958 # 8002e1a8 <__func__.0+0x2c0>
    8001156e:	0001d517          	auipc	a0,0x1d
    80011572:	cf250513          	addi	a0,a0,-782 # 8002e260 <__func__.0+0x378>
    80011576:	6b5190ef          	jal	8002b42a <printf>
    8001157a:	4511                	li	a0,4
    8001157c:	98def0ef          	jal	80000f08 <goto_priv>
    80011580:	aa4f00ef          	jal	80001824 <reset_state>

}
    80011584:	60a2                	ld	ra,8(sp)
    80011586:	8522                	mv	a0,s0
    80011588:	6402                	ld	s0,0(sp)
    8001158a:	0141                	addi	sp,sp,16
    8001158c:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001158e:	4401                	li	s0,0
    TEST_END();
    80011590:	0001d597          	auipc	a1,0x1d
    80011594:	c2858593          	addi	a1,a1,-984 # 8002e1b8 <__func__.0+0x2d0>
    80011598:	bfd9                	j	8001156e <illegal_except_15+0xb0>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001159a:	0001d517          	auipc	a0,0x1d
    8001159e:	c6650513          	addi	a0,a0,-922 # 8002e200 <__func__.0+0x318>
    800115a2:	689190ef          	jal	8002b42a <printf>
    800115a6:	02900513          	li	a0,41
    800115aa:	36f180ef          	jal	8002a118 <putchar>
    800115ae:	b75d                	j	80011554 <illegal_except_15+0x96>

00000000800115b0 <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    800115b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800115b2:	0001b597          	auipc	a1,0x1b
    800115b6:	42e58593          	addi	a1,a1,1070 # 8002c9e0 <__func__.2>
    800115ba:	0001d517          	auipc	a0,0x1d
    800115be:	c0e50513          	addi	a0,a0,-1010 # 8002e1c8 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    800115c2:	ec06                	sd	ra,24(sp)
    800115c4:	e822                	sd	s0,16(sp)
    800115c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800115c8:	663190ef          	jal	8002b42a <printf>
    800115cc:	4529                	li	a0,10
    800115ce:	34b180ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    800115d2:	83bef0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    800115d6:	4511                	li	a0,4
    800115d8:	931ef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    800115dc:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800115e0:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    800115e4:	6785                	lui	a5,0x1
    800115e6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800115ea:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    800115ee:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800115f2:	4511                	li	a0,4
    800115f4:	915ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    800115f8:	08200593          	li	a1,130
    800115fc:	00020617          	auipc	a2,0x20
    80011600:	3f460613          	addi	a2,a2,1012 # 800319f0 <__func__.0+0x3b08>
    80011604:	0001d517          	auipc	a0,0x1d
    80011608:	bdc50513          	addi	a0,a0,-1060 # 8002e1e0 <__func__.0+0x2f8>
    8001160c:	61f190ef          	jal	8002b42a <printf>
    80011610:	00047797          	auipc	a5,0x47
    80011614:	a017c783          	lbu	a5,-1535(a5) # 80058011 <excpt+0x1>
    80011618:	00047497          	auipc	s1,0x47
    8001161c:	9f848493          	addi	s1,s1,-1544 # 80058010 <excpt>
    80011620:	0001d597          	auipc	a1,0x1d
    80011624:	b9858593          	addi	a1,a1,-1128 # 8002e1b8 <__func__.0+0x2d0>
    80011628:	cf99                	beqz	a5,80011646 <external_interrupt_MEI+0x96>
    8001162a:	57fd                	li	a5,-1
    8001162c:	6498                	ld	a4,8(s1)
    8001162e:	17fe                	slli	a5,a5,0x3f
    80011630:	07ad                	addi	a5,a5,11
    80011632:	0001d597          	auipc	a1,0x1d
    80011636:	b7658593          	addi	a1,a1,-1162 # 8002e1a8 <__func__.0+0x2c0>
    8001163a:	00f70663          	beq	a4,a5,80011646 <external_interrupt_MEI+0x96>
    8001163e:	0001d597          	auipc	a1,0x1d
    80011642:	b7a58593          	addi	a1,a1,-1158 # 8002e1b8 <__func__.0+0x2d0>
    80011646:	0001d517          	auipc	a0,0x1d
    8001164a:	bb250513          	addi	a0,a0,-1102 # 8002e1f8 <__func__.0+0x310>
    8001164e:	5dd190ef          	jal	8002b42a <printf>
    80011652:	00047797          	auipc	a5,0x47
    80011656:	9bf7c783          	lbu	a5,-1601(a5) # 80058011 <excpt+0x1>
    8001165a:	c799                	beqz	a5,80011668 <external_interrupt_MEI+0xb8>
    8001165c:	57fd                	li	a5,-1
    8001165e:	6498                	ld	a4,8(s1)
    80011660:	17fe                	slli	a5,a5,0x3f
    80011662:	07ad                	addi	a5,a5,11
    80011664:	00f70c63          	beq	a4,a5,8001167c <external_interrupt_MEI+0xcc>
    80011668:	0001d517          	auipc	a0,0x1d
    8001166c:	b9850513          	addi	a0,a0,-1128 # 8002e200 <__func__.0+0x318>
    80011670:	5bb190ef          	jal	8002b42a <printf>
    80011674:	02900513          	li	a0,41
    80011678:	2a1180ef          	jal	8002a118 <putchar>
    8001167c:	4529                	li	a0,10
    8001167e:	29b180ef          	jal	8002a118 <putchar>
    80011682:	00047797          	auipc	a5,0x47
    80011686:	98f7c783          	lbu	a5,-1649(a5) # 80058011 <excpt+0x1>
    8001168a:	4401                	li	s0,0
    8001168c:	c799                	beqz	a5,8001169a <external_interrupt_MEI+0xea>
    8001168e:	6480                	ld	s0,8(s1)
    80011690:	57ad                	li	a5,-21
    80011692:	8385                	srli	a5,a5,0x1
    80011694:	943e                	add	s0,s0,a5
    80011696:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    8001169a:	f72ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001169e:	4511                	li	a0,4
    800116a0:	869ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800116a4:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800116a8:	6785                	lui	a5,0x1
    800116aa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800116ae:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800116b2:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800116b6:	4511                	li	a0,4
    800116b8:	851ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    800116bc:	08200593          	li	a1,130
    800116c0:	00020617          	auipc	a2,0x20
    800116c4:	39060613          	addi	a2,a2,912 # 80031a50 <__func__.0+0x3b68>
    800116c8:	0001d517          	auipc	a0,0x1d
    800116cc:	b1850513          	addi	a0,a0,-1256 # 8002e1e0 <__func__.0+0x2f8>
    800116d0:	55b190ef          	jal	8002b42a <printf>
    800116d4:	00047797          	auipc	a5,0x47
    800116d8:	93d7c783          	lbu	a5,-1731(a5) # 80058011 <excpt+0x1>
    800116dc:	0001d597          	auipc	a1,0x1d
    800116e0:	adc58593          	addi	a1,a1,-1316 # 8002e1b8 <__func__.0+0x2d0>
    800116e4:	e789                	bnez	a5,800116ee <external_interrupt_MEI+0x13e>
    800116e6:	0001d597          	auipc	a1,0x1d
    800116ea:	ac258593          	addi	a1,a1,-1342 # 8002e1a8 <__func__.0+0x2c0>
    800116ee:	0001d517          	auipc	a0,0x1d
    800116f2:	b0a50513          	addi	a0,a0,-1270 # 8002e1f8 <__func__.0+0x310>
    800116f6:	535190ef          	jal	8002b42a <printf>
    800116fa:	00047797          	auipc	a5,0x47
    800116fe:	9177c783          	lbu	a5,-1769(a5) # 80058011 <excpt+0x1>
    80011702:	180796e3          	bnez	a5,8001208e <external_interrupt_MEI+0xade>
    80011706:	4529                	li	a0,10
    80011708:	211180ef          	jal	8002a118 <putchar>
    8001170c:	c419                	beqz	s0,8001171a <external_interrupt_MEI+0x16a>
    8001170e:	00047417          	auipc	s0,0x47
    80011712:	90344403          	lbu	s0,-1789(s0) # 80058011 <excpt+0x1>
    80011716:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    8001171a:	ef2ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001171e:	4511                	li	a0,4
    80011720:	fe8ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011724:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011728:	6785                	lui	a5,0x1
    8001172a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001172e:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011732:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011736:	4511                	li	a0,4
    80011738:	fd0ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8001173c:	08200593          	li	a1,130
    80011740:	00020617          	auipc	a2,0x20
    80011744:	36860613          	addi	a2,a2,872 # 80031aa8 <__func__.0+0x3bc0>
    80011748:	0001d517          	auipc	a0,0x1d
    8001174c:	a9850513          	addi	a0,a0,-1384 # 8002e1e0 <__func__.0+0x2f8>
    80011750:	4db190ef          	jal	8002b42a <printf>
    80011754:	00047797          	auipc	a5,0x47
    80011758:	8bd7c783          	lbu	a5,-1859(a5) # 80058011 <excpt+0x1>
    8001175c:	0001d597          	auipc	a1,0x1d
    80011760:	a5c58593          	addi	a1,a1,-1444 # 8002e1b8 <__func__.0+0x2d0>
    80011764:	cf99                	beqz	a5,80011782 <external_interrupt_MEI+0x1d2>
    80011766:	57fd                	li	a5,-1
    80011768:	6498                	ld	a4,8(s1)
    8001176a:	17fe                	slli	a5,a5,0x3f
    8001176c:	07ad                	addi	a5,a5,11
    8001176e:	0001d597          	auipc	a1,0x1d
    80011772:	a3a58593          	addi	a1,a1,-1478 # 8002e1a8 <__func__.0+0x2c0>
    80011776:	00f70663          	beq	a4,a5,80011782 <external_interrupt_MEI+0x1d2>
    8001177a:	0001d597          	auipc	a1,0x1d
    8001177e:	a3e58593          	addi	a1,a1,-1474 # 8002e1b8 <__func__.0+0x2d0>
    80011782:	0001d517          	auipc	a0,0x1d
    80011786:	a7650513          	addi	a0,a0,-1418 # 8002e1f8 <__func__.0+0x310>
    8001178a:	4a1190ef          	jal	8002b42a <printf>
    8001178e:	00047797          	auipc	a5,0x47
    80011792:	8837c783          	lbu	a5,-1917(a5) # 80058011 <excpt+0x1>
    80011796:	c799                	beqz	a5,800117a4 <external_interrupt_MEI+0x1f4>
    80011798:	57fd                	li	a5,-1
    8001179a:	6498                	ld	a4,8(s1)
    8001179c:	17fe                	slli	a5,a5,0x3f
    8001179e:	07ad                	addi	a5,a5,11
    800117a0:	00f70c63          	beq	a4,a5,800117b8 <external_interrupt_MEI+0x208>
    800117a4:	0001d517          	auipc	a0,0x1d
    800117a8:	a5c50513          	addi	a0,a0,-1444 # 8002e200 <__func__.0+0x318>
    800117ac:	47f190ef          	jal	8002b42a <printf>
    800117b0:	02900513          	li	a0,41
    800117b4:	165180ef          	jal	8002a118 <putchar>
    800117b8:	4529                	li	a0,10
    800117ba:	15f180ef          	jal	8002a118 <putchar>
    800117be:	c801                	beqz	s0,800117ce <external_interrupt_MEI+0x21e>
    800117c0:	00047797          	auipc	a5,0x47
    800117c4:	8517c783          	lbu	a5,-1967(a5) # 80058011 <excpt+0x1>
    800117c8:	4401                	li	s0,0
    800117ca:	020792e3          	bnez	a5,80011fee <external_interrupt_MEI+0xa3e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    800117ce:	e3eef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800117d2:	4511                	li	a0,4
    800117d4:	f34ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800117d8:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800117dc:	6785                	lui	a5,0x1
    800117de:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800117e2:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800117e6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800117ea:	4511                	li	a0,4
    800117ec:	f1cef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    800117f0:	08200593          	li	a1,130
    800117f4:	00020617          	auipc	a2,0x20
    800117f8:	31460613          	addi	a2,a2,788 # 80031b08 <__func__.0+0x3c20>
    800117fc:	0001d517          	auipc	a0,0x1d
    80011800:	9e450513          	addi	a0,a0,-1564 # 8002e1e0 <__func__.0+0x2f8>
    80011804:	427190ef          	jal	8002b42a <printf>
    80011808:	00047797          	auipc	a5,0x47
    8001180c:	8097c783          	lbu	a5,-2039(a5) # 80058011 <excpt+0x1>
    80011810:	0001d597          	auipc	a1,0x1d
    80011814:	9a858593          	addi	a1,a1,-1624 # 8002e1b8 <__func__.0+0x2d0>
    80011818:	e789                	bnez	a5,80011822 <external_interrupt_MEI+0x272>
    8001181a:	0001d597          	auipc	a1,0x1d
    8001181e:	98e58593          	addi	a1,a1,-1650 # 8002e1a8 <__func__.0+0x2c0>
    80011822:	0001d517          	auipc	a0,0x1d
    80011826:	9d650513          	addi	a0,a0,-1578 # 8002e1f8 <__func__.0+0x310>
    8001182a:	401190ef          	jal	8002b42a <printf>
    8001182e:	00046797          	auipc	a5,0x46
    80011832:	7e37c783          	lbu	a5,2019(a5) # 80058011 <excpt+0x1>
    80011836:	0c0796e3          	bnez	a5,80012102 <external_interrupt_MEI+0xb52>
    8001183a:	4529                	li	a0,10
    8001183c:	0dd180ef          	jal	8002a118 <putchar>
    80011840:	c419                	beqz	s0,8001184e <external_interrupt_MEI+0x29e>
    80011842:	00046417          	auipc	s0,0x46
    80011846:	7cf44403          	lbu	s0,1999(s0) # 80058011 <excpt+0x1>
    8001184a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8001184e:	dbeef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011852:	4511                	li	a0,4
    80011854:	eb4ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80011858:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001185c:	6785                	lui	a5,0x1
    8001185e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011862:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011866:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8001186a:	4511                	li	a0,4
    8001186c:	e9cef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80011870:	08200593          	li	a1,130
    80011874:	00020617          	auipc	a2,0x20
    80011878:	2ec60613          	addi	a2,a2,748 # 80031b60 <__func__.0+0x3c78>
    8001187c:	0001d517          	auipc	a0,0x1d
    80011880:	96450513          	addi	a0,a0,-1692 # 8002e1e0 <__func__.0+0x2f8>
    80011884:	3a7190ef          	jal	8002b42a <printf>
    80011888:	00046797          	auipc	a5,0x46
    8001188c:	7897c783          	lbu	a5,1929(a5) # 80058011 <excpt+0x1>
    80011890:	0001d597          	auipc	a1,0x1d
    80011894:	92858593          	addi	a1,a1,-1752 # 8002e1b8 <__func__.0+0x2d0>
    80011898:	e789                	bnez	a5,800118a2 <external_interrupt_MEI+0x2f2>
    8001189a:	0001d597          	auipc	a1,0x1d
    8001189e:	90e58593          	addi	a1,a1,-1778 # 8002e1a8 <__func__.0+0x2c0>
    800118a2:	0001d517          	auipc	a0,0x1d
    800118a6:	95650513          	addi	a0,a0,-1706 # 8002e1f8 <__func__.0+0x310>
    800118aa:	381190ef          	jal	8002b42a <printf>
    800118ae:	00046797          	auipc	a5,0x46
    800118b2:	7637c783          	lbu	a5,1891(a5) # 80058011 <excpt+0x1>
    800118b6:	02079ae3          	bnez	a5,800120ea <external_interrupt_MEI+0xb3a>
    800118ba:	4529                	li	a0,10
    800118bc:	05d180ef          	jal	8002a118 <putchar>
    800118c0:	c419                	beqz	s0,800118ce <external_interrupt_MEI+0x31e>
    800118c2:	00046417          	auipc	s0,0x46
    800118c6:	74f44403          	lbu	s0,1871(s0) # 80058011 <excpt+0x1>
    800118ca:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800118ce:	d3eef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800118d2:	4511                	li	a0,4
    800118d4:	e34ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800118d8:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800118dc:	6785                	lui	a5,0x1
    800118de:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800118e2:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800118e6:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800118ea:	4511                	li	a0,4
    800118ec:	e1cef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    800118f0:	08200593          	li	a1,130
    800118f4:	00020617          	auipc	a2,0x20
    800118f8:	2c460613          	addi	a2,a2,708 # 80031bb8 <__func__.0+0x3cd0>
    800118fc:	0001d517          	auipc	a0,0x1d
    80011900:	8e450513          	addi	a0,a0,-1820 # 8002e1e0 <__func__.0+0x2f8>
    80011904:	327190ef          	jal	8002b42a <printf>
    80011908:	00046797          	auipc	a5,0x46
    8001190c:	7097c783          	lbu	a5,1801(a5) # 80058011 <excpt+0x1>
    80011910:	0001d597          	auipc	a1,0x1d
    80011914:	8a858593          	addi	a1,a1,-1880 # 8002e1b8 <__func__.0+0x2d0>
    80011918:	e789                	bnez	a5,80011922 <external_interrupt_MEI+0x372>
    8001191a:	0001d597          	auipc	a1,0x1d
    8001191e:	88e58593          	addi	a1,a1,-1906 # 8002e1a8 <__func__.0+0x2c0>
    80011922:	0001d517          	auipc	a0,0x1d
    80011926:	8d650513          	addi	a0,a0,-1834 # 8002e1f8 <__func__.0+0x310>
    8001192a:	301190ef          	jal	8002b42a <printf>
    8001192e:	00046797          	auipc	a5,0x46
    80011932:	6e37c783          	lbu	a5,1763(a5) # 80058011 <excpt+0x1>
    80011936:	78079e63          	bnez	a5,800120d2 <external_interrupt_MEI+0xb22>
    8001193a:	4529                	li	a0,10
    8001193c:	7dc180ef          	jal	8002a118 <putchar>
    80011940:	c419                	beqz	s0,8001194e <external_interrupt_MEI+0x39e>
    80011942:	00046417          	auipc	s0,0x46
    80011946:	6cf44403          	lbu	s0,1743(s0) # 80058011 <excpt+0x1>
    8001194a:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8001194e:	cbeef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011952:	4511                	li	a0,4
    80011954:	db4ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011958:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001195c:	6785                	lui	a5,0x1
    8001195e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011962:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011966:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    8001196a:	450d                	li	a0,3
    8001196c:	d9cef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011970:	08200593          	li	a1,130
    80011974:	00020617          	auipc	a2,0x20
    80011978:	29c60613          	addi	a2,a2,668 # 80031c10 <__func__.0+0x3d28>
    8001197c:	0001d517          	auipc	a0,0x1d
    80011980:	86450513          	addi	a0,a0,-1948 # 8002e1e0 <__func__.0+0x2f8>
    80011984:	2a7190ef          	jal	8002b42a <printf>
    80011988:	6094                	ld	a3,0(s1)
    8001198a:	f0001737          	lui	a4,0xf0001
    8001198e:	0712                	slli	a4,a4,0x4
    80011990:	4785                	li	a5,1
    80011992:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011996:	178a                	slli	a5,a5,0x22
    80011998:	8f75                	and	a4,a4,a3
    8001199a:	10078793          	addi	a5,a5,256
    8001199e:	0001d597          	auipc	a1,0x1d
    800119a2:	81a58593          	addi	a1,a1,-2022 # 8002e1b8 <__func__.0+0x2d0>
    800119a6:	00f71663          	bne	a4,a5,800119b2 <external_interrupt_MEI+0x402>
    800119aa:	0001c597          	auipc	a1,0x1c
    800119ae:	7fe58593          	addi	a1,a1,2046 # 8002e1a8 <__func__.0+0x2c0>
    800119b2:	0001d517          	auipc	a0,0x1d
    800119b6:	84650513          	addi	a0,a0,-1978 # 8002e1f8 <__func__.0+0x310>
    800119ba:	271190ef          	jal	8002b42a <printf>
    800119be:	00046797          	auipc	a5,0x46
    800119c2:	6537c783          	lbu	a5,1619(a5) # 80058011 <excpt+0x1>
    800119c6:	cb81                	beqz	a5,800119d6 <external_interrupt_MEI+0x426>
    800119c8:	00046717          	auipc	a4,0x46
    800119cc:	64c72703          	lw	a4,1612(a4) # 80058014 <excpt+0x4>
    800119d0:	4791                	li	a5,4
    800119d2:	00f70c63          	beq	a4,a5,800119ea <external_interrupt_MEI+0x43a>
    800119d6:	0001d517          	auipc	a0,0x1d
    800119da:	82a50513          	addi	a0,a0,-2006 # 8002e200 <__func__.0+0x318>
    800119de:	24d190ef          	jal	8002b42a <printf>
    800119e2:	02900513          	li	a0,41
    800119e6:	732180ef          	jal	8002a118 <putchar>
    800119ea:	4529                	li	a0,10
    800119ec:	72c180ef          	jal	8002a118 <putchar>
    800119f0:	cc19                	beqz	s0,80011a0e <external_interrupt_MEI+0x45e>
    800119f2:	6080                	ld	s0,0(s1)
    800119f4:	f0001737          	lui	a4,0xf0001
    800119f8:	0712                	slli	a4,a4,0x4
    800119fa:	57fd                	li	a5,-1
    800119fc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a00:	178a                	slli	a5,a5,0x22
    80011a02:	8c79                	and	s0,s0,a4
    80011a04:	f0078793          	addi	a5,a5,-256
    80011a08:	943e                	add	s0,s0,a5
    80011a0a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011a0e:	bfeef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011a12:	4511                	li	a0,4
    80011a14:	cf4ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011a18:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011a1c:	6785                	lui	a5,0x1
    80011a1e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011a22:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011a26:	577d                	li	a4,-1
    80011a28:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011a2c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011a30:	450d                	li	a0,3
    80011a32:	cd6ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011a36:	08200593          	li	a1,130
    80011a3a:	00020617          	auipc	a2,0x20
    80011a3e:	22e60613          	addi	a2,a2,558 # 80031c68 <__func__.0+0x3d80>
    80011a42:	0001c517          	auipc	a0,0x1c
    80011a46:	79e50513          	addi	a0,a0,1950 # 8002e1e0 <__func__.0+0x2f8>
    80011a4a:	1e1190ef          	jal	8002b42a <printf>
    80011a4e:	6094                	ld	a3,0(s1)
    80011a50:	f0001737          	lui	a4,0xf0001
    80011a54:	0712                	slli	a4,a4,0x4
    80011a56:	478d                	li	a5,3
    80011a58:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a5c:	1782                	slli	a5,a5,0x20
    80011a5e:	8f75                	and	a4,a4,a3
    80011a60:	10078793          	addi	a5,a5,256
    80011a64:	0001c597          	auipc	a1,0x1c
    80011a68:	75458593          	addi	a1,a1,1876 # 8002e1b8 <__func__.0+0x2d0>
    80011a6c:	00f71663          	bne	a4,a5,80011a78 <external_interrupt_MEI+0x4c8>
    80011a70:	0001c597          	auipc	a1,0x1c
    80011a74:	73858593          	addi	a1,a1,1848 # 8002e1a8 <__func__.0+0x2c0>
    80011a78:	0001c517          	auipc	a0,0x1c
    80011a7c:	78050513          	addi	a0,a0,1920 # 8002e1f8 <__func__.0+0x310>
    80011a80:	1ab190ef          	jal	8002b42a <printf>
    80011a84:	00046797          	auipc	a5,0x46
    80011a88:	58d7c783          	lbu	a5,1421(a5) # 80058011 <excpt+0x1>
    80011a8c:	cb81                	beqz	a5,80011a9c <external_interrupt_MEI+0x4ec>
    80011a8e:	00046717          	auipc	a4,0x46
    80011a92:	58672703          	lw	a4,1414(a4) # 80058014 <excpt+0x4>
    80011a96:	478d                	li	a5,3
    80011a98:	00f70c63          	beq	a4,a5,80011ab0 <external_interrupt_MEI+0x500>
    80011a9c:	0001c517          	auipc	a0,0x1c
    80011aa0:	76450513          	addi	a0,a0,1892 # 8002e200 <__func__.0+0x318>
    80011aa4:	187190ef          	jal	8002b42a <printf>
    80011aa8:	02900513          	li	a0,41
    80011aac:	66c180ef          	jal	8002a118 <putchar>
    80011ab0:	4529                	li	a0,10
    80011ab2:	666180ef          	jal	8002a118 <putchar>
    80011ab6:	cc19                	beqz	s0,80011ad4 <external_interrupt_MEI+0x524>
    80011ab8:	6080                	ld	s0,0(s1)
    80011aba:	f0001737          	lui	a4,0xf0001
    80011abe:	0712                	slli	a4,a4,0x4
    80011ac0:	57f5                	li	a5,-3
    80011ac2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011ac6:	1782                	slli	a5,a5,0x20
    80011ac8:	8c79                	and	s0,s0,a4
    80011aca:	f0078793          	addi	a5,a5,-256
    80011ace:	943e                	add	s0,s0,a5
    80011ad0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011ad4:	b38ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ad8:	4511                	li	a0,4
    80011ada:	c2eef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ade:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011ae2:	6785                	lui	a5,0x1
    80011ae4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ae8:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011aec:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011af0:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011af4:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011af8:	450d                	li	a0,3
    80011afa:	c0eef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011afe:	08200593          	li	a1,130
    80011b02:	00020617          	auipc	a2,0x20
    80011b06:	1be60613          	addi	a2,a2,446 # 80031cc0 <__func__.0+0x3dd8>
    80011b0a:	0001c517          	auipc	a0,0x1c
    80011b0e:	6d650513          	addi	a0,a0,1750 # 8002e1e0 <__func__.0+0x2f8>
    80011b12:	119190ef          	jal	8002b42a <printf>
    80011b16:	00046797          	auipc	a5,0x46
    80011b1a:	4fb7c783          	lbu	a5,1275(a5) # 80058011 <excpt+0x1>
    80011b1e:	0001c597          	auipc	a1,0x1c
    80011b22:	69a58593          	addi	a1,a1,1690 # 8002e1b8 <__func__.0+0x2d0>
    80011b26:	e789                	bnez	a5,80011b30 <external_interrupt_MEI+0x580>
    80011b28:	0001c597          	auipc	a1,0x1c
    80011b2c:	68058593          	addi	a1,a1,1664 # 8002e1a8 <__func__.0+0x2c0>
    80011b30:	0001c517          	auipc	a0,0x1c
    80011b34:	6c850513          	addi	a0,a0,1736 # 8002e1f8 <__func__.0+0x310>
    80011b38:	0f3190ef          	jal	8002b42a <printf>
    80011b3c:	00046797          	auipc	a5,0x46
    80011b40:	4d57c783          	lbu	a5,1237(a5) # 80058011 <excpt+0x1>
    80011b44:	56079c63          	bnez	a5,800120bc <external_interrupt_MEI+0xb0c>
    80011b48:	4529                	li	a0,10
    80011b4a:	5ce180ef          	jal	8002a118 <putchar>
    80011b4e:	c419                	beqz	s0,80011b5c <external_interrupt_MEI+0x5ac>
    80011b50:	00046417          	auipc	s0,0x46
    80011b54:	4c144403          	lbu	s0,1217(s0) # 80058011 <excpt+0x1>
    80011b58:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011b5c:	ab0ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011b60:	4511                	li	a0,4
    80011b62:	ba6ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011b66:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011b6a:	6785                	lui	a5,0x1
    80011b6c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011b70:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011b74:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011b78:	450d                	li	a0,3
    80011b7a:	b8eef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011b7e:	08200593          	li	a1,130
    80011b82:	00020617          	auipc	a2,0x20
    80011b86:	19660613          	addi	a2,a2,406 # 80031d18 <__func__.0+0x3e30>
    80011b8a:	0001c517          	auipc	a0,0x1c
    80011b8e:	65650513          	addi	a0,a0,1622 # 8002e1e0 <__func__.0+0x2f8>
    80011b92:	099190ef          	jal	8002b42a <printf>
    80011b96:	00046797          	auipc	a5,0x46
    80011b9a:	47b7c783          	lbu	a5,1147(a5) # 80058011 <excpt+0x1>
    80011b9e:	0001c597          	auipc	a1,0x1c
    80011ba2:	61a58593          	addi	a1,a1,1562 # 8002e1b8 <__func__.0+0x2d0>
    80011ba6:	c799                	beqz	a5,80011bb4 <external_interrupt_MEI+0x604>
    80011ba8:	57fd                	li	a5,-1
    80011baa:	6498                	ld	a4,8(s1)
    80011bac:	17fe                	slli	a5,a5,0x3f
    80011bae:	07ad                	addi	a5,a5,11
    80011bb0:	56f70563          	beq	a4,a5,8001211a <external_interrupt_MEI+0xb6a>
    80011bb4:	0001c517          	auipc	a0,0x1c
    80011bb8:	64450513          	addi	a0,a0,1604 # 8002e1f8 <__func__.0+0x310>
    80011bbc:	06f190ef          	jal	8002b42a <printf>
    80011bc0:	00046797          	auipc	a5,0x46
    80011bc4:	4517c783          	lbu	a5,1105(a5) # 80058011 <excpt+0x1>
    80011bc8:	c799                	beqz	a5,80011bd6 <external_interrupt_MEI+0x626>
    80011bca:	57fd                	li	a5,-1
    80011bcc:	6498                	ld	a4,8(s1)
    80011bce:	17fe                	slli	a5,a5,0x3f
    80011bd0:	07ad                	addi	a5,a5,11
    80011bd2:	48f70063          	beq	a4,a5,80012052 <external_interrupt_MEI+0xaa2>
    80011bd6:	0001c517          	auipc	a0,0x1c
    80011bda:	62a50513          	addi	a0,a0,1578 # 8002e200 <__func__.0+0x318>
    80011bde:	04d190ef          	jal	8002b42a <printf>
    80011be2:	02900513          	li	a0,41
    80011be6:	532180ef          	jal	8002a118 <putchar>
    80011bea:	4529                	li	a0,10
    80011bec:	52c180ef          	jal	8002a118 <putchar>
    80011bf0:	c801                	beqz	s0,80011c00 <external_interrupt_MEI+0x650>
    80011bf2:	00046797          	auipc	a5,0x46
    80011bf6:	41f7c783          	lbu	a5,1055(a5) # 80058011 <excpt+0x1>
    80011bfa:	4401                	li	s0,0
    80011bfc:	42079563          	bnez	a5,80012026 <external_interrupt_MEI+0xa76>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011c00:	a0cef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c04:	4511                	li	a0,4
    80011c06:	b02ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011c0a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011c0e:	6785                	lui	a5,0x1
    80011c10:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011c14:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011c18:	577d                	li	a4,-1
    80011c1a:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80011c1e:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80011c22:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011c26:	450d                	li	a0,3
    80011c28:	ae0ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011c2c:	08200593          	li	a1,130
    80011c30:	00020617          	auipc	a2,0x20
    80011c34:	14060613          	addi	a2,a2,320 # 80031d70 <__func__.0+0x3e88>
    80011c38:	0001c517          	auipc	a0,0x1c
    80011c3c:	5a850513          	addi	a0,a0,1448 # 8002e1e0 <__func__.0+0x2f8>
    80011c40:	7ea190ef          	jal	8002b42a <printf>
    80011c44:	00046797          	auipc	a5,0x46
    80011c48:	3cd7c783          	lbu	a5,973(a5) # 80058011 <excpt+0x1>
    80011c4c:	0001c597          	auipc	a1,0x1c
    80011c50:	56c58593          	addi	a1,a1,1388 # 8002e1b8 <__func__.0+0x2d0>
    80011c54:	e789                	bnez	a5,80011c5e <external_interrupt_MEI+0x6ae>
    80011c56:	0001c597          	auipc	a1,0x1c
    80011c5a:	55258593          	addi	a1,a1,1362 # 8002e1a8 <__func__.0+0x2c0>
    80011c5e:	0001c517          	auipc	a0,0x1c
    80011c62:	59a50513          	addi	a0,a0,1434 # 8002e1f8 <__func__.0+0x310>
    80011c66:	7c4190ef          	jal	8002b42a <printf>
    80011c6a:	00046797          	auipc	a5,0x46
    80011c6e:	3a77c783          	lbu	a5,935(a5) # 80058011 <excpt+0x1>
    80011c72:	3e079863          	bnez	a5,80012062 <external_interrupt_MEI+0xab2>
    80011c76:	4529                	li	a0,10
    80011c78:	4a0180ef          	jal	8002a118 <putchar>
    80011c7c:	c419                	beqz	s0,80011c8a <external_interrupt_MEI+0x6da>
    80011c7e:	00046417          	auipc	s0,0x46
    80011c82:	39344403          	lbu	s0,915(s0) # 80058011 <excpt+0x1>
    80011c86:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011c8a:	982ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c8e:	4511                	li	a0,4
    80011c90:	a78ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011c94:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011c98:	6785                	lui	a5,0x1
    80011c9a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011c9e:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011ca2:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80011ca6:	4509                	li	a0,2
    80011ca8:	a60ef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011cac:	08200593          	li	a1,130
    80011cb0:	00020617          	auipc	a2,0x20
    80011cb4:	11060613          	addi	a2,a2,272 # 80031dc0 <__func__.0+0x3ed8>
    80011cb8:	0001c517          	auipc	a0,0x1c
    80011cbc:	52850513          	addi	a0,a0,1320 # 8002e1e0 <__func__.0+0x2f8>
    80011cc0:	76a190ef          	jal	8002b42a <printf>
    80011cc4:	6094                	ld	a3,0(s1)
    80011cc6:	f0001737          	lui	a4,0xf0001
    80011cca:	0712                	slli	a4,a4,0x4
    80011ccc:	4785                	li	a5,1
    80011cce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011cd2:	178a                	slli	a5,a5,0x22
    80011cd4:	8f75                	and	a4,a4,a3
    80011cd6:	10078793          	addi	a5,a5,256
    80011cda:	0001c597          	auipc	a1,0x1c
    80011cde:	4de58593          	addi	a1,a1,1246 # 8002e1b8 <__func__.0+0x2d0>
    80011ce2:	00f71663          	bne	a4,a5,80011cee <external_interrupt_MEI+0x73e>
    80011ce6:	0001c597          	auipc	a1,0x1c
    80011cea:	4c258593          	addi	a1,a1,1218 # 8002e1a8 <__func__.0+0x2c0>
    80011cee:	0001c517          	auipc	a0,0x1c
    80011cf2:	50a50513          	addi	a0,a0,1290 # 8002e1f8 <__func__.0+0x310>
    80011cf6:	734190ef          	jal	8002b42a <printf>
    80011cfa:	00046797          	auipc	a5,0x46
    80011cfe:	3177c783          	lbu	a5,791(a5) # 80058011 <excpt+0x1>
    80011d02:	cb81                	beqz	a5,80011d12 <external_interrupt_MEI+0x762>
    80011d04:	00046717          	auipc	a4,0x46
    80011d08:	31072703          	lw	a4,784(a4) # 80058014 <excpt+0x4>
    80011d0c:	4791                	li	a5,4
    80011d0e:	00f70c63          	beq	a4,a5,80011d26 <external_interrupt_MEI+0x776>
    80011d12:	0001c517          	auipc	a0,0x1c
    80011d16:	4ee50513          	addi	a0,a0,1262 # 8002e200 <__func__.0+0x318>
    80011d1a:	710190ef          	jal	8002b42a <printf>
    80011d1e:	02900513          	li	a0,41
    80011d22:	3f6180ef          	jal	8002a118 <putchar>
    80011d26:	4529                	li	a0,10
    80011d28:	3f0180ef          	jal	8002a118 <putchar>
    80011d2c:	cc19                	beqz	s0,80011d4a <external_interrupt_MEI+0x79a>
    80011d2e:	6080                	ld	s0,0(s1)
    80011d30:	f0001737          	lui	a4,0xf0001
    80011d34:	0712                	slli	a4,a4,0x4
    80011d36:	57fd                	li	a5,-1
    80011d38:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d3c:	178a                	slli	a5,a5,0x22
    80011d3e:	8c79                	and	s0,s0,a4
    80011d40:	f0078793          	addi	a5,a5,-256
    80011d44:	943e                	add	s0,s0,a5
    80011d46:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011d4a:	8c2ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011d4e:	4511                	li	a0,4
    80011d50:	9b8ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011d54:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011d58:	6785                	lui	a5,0x1
    80011d5a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011d5e:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011d62:	577d                	li	a4,-1
    80011d64:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011d68:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011d6c:	4509                	li	a0,2
    80011d6e:	99aef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011d72:	08200593          	li	a1,130
    80011d76:	00020617          	auipc	a2,0x20
    80011d7a:	0aa60613          	addi	a2,a2,170 # 80031e20 <__func__.0+0x3f38>
    80011d7e:	0001c517          	auipc	a0,0x1c
    80011d82:	46250513          	addi	a0,a0,1122 # 8002e1e0 <__func__.0+0x2f8>
    80011d86:	6a4190ef          	jal	8002b42a <printf>
    80011d8a:	6094                	ld	a3,0(s1)
    80011d8c:	f0001737          	lui	a4,0xf0001
    80011d90:	0712                	slli	a4,a4,0x4
    80011d92:	4785                	li	a5,1
    80011d94:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d98:	1786                	slli	a5,a5,0x21
    80011d9a:	8f75                	and	a4,a4,a3
    80011d9c:	10078793          	addi	a5,a5,256
    80011da0:	0001c597          	auipc	a1,0x1c
    80011da4:	41858593          	addi	a1,a1,1048 # 8002e1b8 <__func__.0+0x2d0>
    80011da8:	00f71663          	bne	a4,a5,80011db4 <external_interrupt_MEI+0x804>
    80011dac:	0001c597          	auipc	a1,0x1c
    80011db0:	3fc58593          	addi	a1,a1,1020 # 8002e1a8 <__func__.0+0x2c0>
    80011db4:	0001c517          	auipc	a0,0x1c
    80011db8:	44450513          	addi	a0,a0,1092 # 8002e1f8 <__func__.0+0x310>
    80011dbc:	66e190ef          	jal	8002b42a <printf>
    80011dc0:	00046797          	auipc	a5,0x46
    80011dc4:	2517c783          	lbu	a5,593(a5) # 80058011 <excpt+0x1>
    80011dc8:	cb81                	beqz	a5,80011dd8 <external_interrupt_MEI+0x828>
    80011dca:	00046717          	auipc	a4,0x46
    80011dce:	24a72703          	lw	a4,586(a4) # 80058014 <excpt+0x4>
    80011dd2:	4789                	li	a5,2
    80011dd4:	00f70c63          	beq	a4,a5,80011dec <external_interrupt_MEI+0x83c>
    80011dd8:	0001c517          	auipc	a0,0x1c
    80011ddc:	42850513          	addi	a0,a0,1064 # 8002e200 <__func__.0+0x318>
    80011de0:	64a190ef          	jal	8002b42a <printf>
    80011de4:	02900513          	li	a0,41
    80011de8:	330180ef          	jal	8002a118 <putchar>
    80011dec:	4529                	li	a0,10
    80011dee:	32a180ef          	jal	8002a118 <putchar>
    80011df2:	cc19                	beqz	s0,80011e10 <external_interrupt_MEI+0x860>
    80011df4:	6080                	ld	s0,0(s1)
    80011df6:	f0001737          	lui	a4,0xf0001
    80011dfa:	0712                	slli	a4,a4,0x4
    80011dfc:	57fd                	li	a5,-1
    80011dfe:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011e02:	1786                	slli	a5,a5,0x21
    80011e04:	8c79                	and	s0,s0,a4
    80011e06:	f0078793          	addi	a5,a5,-256
    80011e0a:	943e                	add	s0,s0,a5
    80011e0c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011e10:	ffdee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011e14:	4511                	li	a0,4
    80011e16:	8f2ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011e1a:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011e1e:	6785                	lui	a5,0x1
    80011e20:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011e24:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011e28:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011e2c:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011e30:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011e34:	4509                	li	a0,2
    80011e36:	8d2ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011e3a:	08200593          	li	a1,130
    80011e3e:	00020617          	auipc	a2,0x20
    80011e42:	04260613          	addi	a2,a2,66 # 80031e80 <__func__.0+0x3f98>
    80011e46:	0001c517          	auipc	a0,0x1c
    80011e4a:	39a50513          	addi	a0,a0,922 # 8002e1e0 <__func__.0+0x2f8>
    80011e4e:	5dc190ef          	jal	8002b42a <printf>
    80011e52:	00046797          	auipc	a5,0x46
    80011e56:	1bf7c783          	lbu	a5,447(a5) # 80058011 <excpt+0x1>
    80011e5a:	0001c597          	auipc	a1,0x1c
    80011e5e:	35e58593          	addi	a1,a1,862 # 8002e1b8 <__func__.0+0x2d0>
    80011e62:	e789                	bnez	a5,80011e6c <external_interrupt_MEI+0x8bc>
    80011e64:	0001c597          	auipc	a1,0x1c
    80011e68:	34458593          	addi	a1,a1,836 # 8002e1a8 <__func__.0+0x2c0>
    80011e6c:	0001c517          	auipc	a0,0x1c
    80011e70:	38c50513          	addi	a0,a0,908 # 8002e1f8 <__func__.0+0x310>
    80011e74:	5b6190ef          	jal	8002b42a <printf>
    80011e78:	00046797          	auipc	a5,0x46
    80011e7c:	1997c783          	lbu	a5,409(a5) # 80058011 <excpt+0x1>
    80011e80:	1e079c63          	bnez	a5,80012078 <external_interrupt_MEI+0xac8>
    80011e84:	4529                	li	a0,10
    80011e86:	292180ef          	jal	8002a118 <putchar>
    80011e8a:	c419                	beqz	s0,80011e98 <external_interrupt_MEI+0x8e8>
    80011e8c:	00046417          	auipc	s0,0x46
    80011e90:	18544403          	lbu	s0,389(s0) # 80058011 <excpt+0x1>
    80011e94:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011e98:	f75ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011e9c:	4511                	li	a0,4
    80011e9e:	86aef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ea2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ea6:	6785                	lui	a5,0x1
    80011ea8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011eac:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011eb0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011eb4:	4509                	li	a0,2
    80011eb6:	852ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011eba:	08200593          	li	a1,130
    80011ebe:	00020617          	auipc	a2,0x20
    80011ec2:	02260613          	addi	a2,a2,34 # 80031ee0 <__func__.0+0x3ff8>
    80011ec6:	0001c517          	auipc	a0,0x1c
    80011eca:	31a50513          	addi	a0,a0,794 # 8002e1e0 <__func__.0+0x2f8>
    80011ece:	55c190ef          	jal	8002b42a <printf>
    80011ed2:	00046797          	auipc	a5,0x46
    80011ed6:	13f7c783          	lbu	a5,319(a5) # 80058011 <excpt+0x1>
    80011eda:	0001c597          	auipc	a1,0x1c
    80011ede:	2de58593          	addi	a1,a1,734 # 8002e1b8 <__func__.0+0x2d0>
    80011ee2:	c799                	beqz	a5,80011ef0 <external_interrupt_MEI+0x940>
    80011ee4:	57fd                	li	a5,-1
    80011ee6:	6498                	ld	a4,8(s1)
    80011ee8:	17fe                	slli	a5,a5,0x3f
    80011eea:	07ad                	addi	a5,a5,11
    80011eec:	24f70763          	beq	a4,a5,8001213a <external_interrupt_MEI+0xb8a>
    80011ef0:	0001c517          	auipc	a0,0x1c
    80011ef4:	30850513          	addi	a0,a0,776 # 8002e1f8 <__func__.0+0x310>
    80011ef8:	532190ef          	jal	8002b42a <printf>
    80011efc:	00046797          	auipc	a5,0x46
    80011f00:	1157c783          	lbu	a5,277(a5) # 80058011 <excpt+0x1>
    80011f04:	c799                	beqz	a5,80011f12 <external_interrupt_MEI+0x962>
    80011f06:	57fd                	li	a5,-1
    80011f08:	6498                	ld	a4,8(s1)
    80011f0a:	17fe                	slli	a5,a5,0x3f
    80011f0c:	07ad                	addi	a5,a5,11
    80011f0e:	12f70a63          	beq	a4,a5,80012042 <external_interrupt_MEI+0xa92>
    80011f12:	0001c517          	auipc	a0,0x1c
    80011f16:	2ee50513          	addi	a0,a0,750 # 8002e200 <__func__.0+0x318>
    80011f1a:	510190ef          	jal	8002b42a <printf>
    80011f1e:	02900513          	li	a0,41
    80011f22:	1f6180ef          	jal	8002a118 <putchar>
    80011f26:	4529                	li	a0,10
    80011f28:	1f0180ef          	jal	8002a118 <putchar>
    80011f2c:	c419                	beqz	s0,80011f3a <external_interrupt_MEI+0x98a>
    80011f2e:	00046797          	auipc	a5,0x46
    80011f32:	0e37c783          	lbu	a5,227(a5) # 80058011 <excpt+0x1>
    80011f36:	4401                	li	s0,0
    80011f38:	ebe9                	bnez	a5,8001200a <external_interrupt_MEI+0xa5a>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011f3a:	ed3ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011f3e:	4511                	li	a0,4
    80011f40:	fc9ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011f44:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011f48:	6785                	lui	a5,0x1
    80011f4a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011f4e:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011f52:	577d                	li	a4,-1
    80011f54:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80011f58:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80011f5c:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011f60:	4509                	li	a0,2
    80011f62:	fa7ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011f66:	08200593          	li	a1,130
    80011f6a:	00020617          	auipc	a2,0x20
    80011f6e:	fd660613          	addi	a2,a2,-42 # 80031f40 <__func__.0+0x4058>
    80011f72:	0001c517          	auipc	a0,0x1c
    80011f76:	26e50513          	addi	a0,a0,622 # 8002e1e0 <__func__.0+0x2f8>
    80011f7a:	4b0190ef          	jal	8002b42a <printf>
    80011f7e:	00046797          	auipc	a5,0x46
    80011f82:	0937c783          	lbu	a5,147(a5) # 80058011 <excpt+0x1>
    80011f86:	0001c597          	auipc	a1,0x1c
    80011f8a:	23258593          	addi	a1,a1,562 # 8002e1b8 <__func__.0+0x2d0>
    80011f8e:	e789                	bnez	a5,80011f98 <external_interrupt_MEI+0x9e8>
    80011f90:	0001c597          	auipc	a1,0x1c
    80011f94:	21858593          	addi	a1,a1,536 # 8002e1a8 <__func__.0+0x2c0>
    80011f98:	0001c517          	auipc	a0,0x1c
    80011f9c:	26050513          	addi	a0,a0,608 # 8002e1f8 <__func__.0+0x310>
    80011fa0:	48a190ef          	jal	8002b42a <printf>
    80011fa4:	00046797          	auipc	a5,0x46
    80011fa8:	06d7c783          	lbu	a5,109(a5) # 80058011 <excpt+0x1>
    80011fac:	0e079d63          	bnez	a5,800120a6 <external_interrupt_MEI+0xaf6>
    80011fb0:	4529                	li	a0,10
    80011fb2:	166180ef          	jal	8002a118 <putchar>
    80011fb6:	c411                	beqz	s0,80011fc2 <external_interrupt_MEI+0xa12>
    80011fb8:	00046797          	auipc	a5,0x46
    80011fbc:	0597c783          	lbu	a5,89(a5) # 80058011 <excpt+0x1>
    80011fc0:	cf9d                	beqz	a5,80011ffe <external_interrupt_MEI+0xa4e>
    80011fc2:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80011fc4:	0001c597          	auipc	a1,0x1c
    80011fc8:	1f458593          	addi	a1,a1,500 # 8002e1b8 <__func__.0+0x2d0>
    80011fcc:	0001c517          	auipc	a0,0x1c
    80011fd0:	29450513          	addi	a0,a0,660 # 8002e260 <__func__.0+0x378>
    80011fd4:	456190ef          	jal	8002b42a <printf>
    80011fd8:	4511                	li	a0,4
    80011fda:	f2fee0ef          	jal	80000f08 <goto_priv>
    80011fde:	847ef0ef          	jal	80001824 <reset_state>
}
    80011fe2:	60e2                	ld	ra,24(sp)
    80011fe4:	8522                	mv	a0,s0
    80011fe6:	6442                	ld	s0,16(sp)
    80011fe8:	64a2                	ld	s1,8(sp)
    80011fea:	6105                	addi	sp,sp,32
    80011fec:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011fee:	6480                	ld	s0,8(s1)
    80011ff0:	57ad                	li	a5,-21
    80011ff2:	8385                	srli	a5,a5,0x1
    80011ff4:	943e                	add	s0,s0,a5
    80011ff6:	00143413          	seqz	s0,s0
    80011ffa:	fd4ff06f          	j	800117ce <external_interrupt_MEI+0x21e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011ffe:	4405                	li	s0,1
    TEST_END();
    80012000:	0001c597          	auipc	a1,0x1c
    80012004:	1a858593          	addi	a1,a1,424 # 8002e1a8 <__func__.0+0x2c0>
    80012008:	b7d1                	j	80011fcc <external_interrupt_MEI+0xa1c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001200a:	57fd                	li	a5,-1
    8001200c:	6498                	ld	a4,8(s1)
    8001200e:	17fe                	slli	a5,a5,0x3f
    80012010:	07ad                	addi	a5,a5,11
    80012012:	f2f714e3          	bne	a4,a5,80011f3a <external_interrupt_MEI+0x98a>
    80012016:	00046417          	auipc	s0,0x46
    8001201a:	ffe42403          	lw	s0,-2(s0) # 80058014 <excpt+0x4>
    8001201e:	1479                	addi	s0,s0,-2
    80012020:	00143413          	seqz	s0,s0
    80012024:	bf19                	j	80011f3a <external_interrupt_MEI+0x98a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012026:	57fd                	li	a5,-1
    80012028:	6498                	ld	a4,8(s1)
    8001202a:	17fe                	slli	a5,a5,0x3f
    8001202c:	07ad                	addi	a5,a5,11
    8001202e:	bcf719e3          	bne	a4,a5,80011c00 <external_interrupt_MEI+0x650>
    80012032:	00046417          	auipc	s0,0x46
    80012036:	fe242403          	lw	s0,-30(s0) # 80058014 <excpt+0x4>
    8001203a:	1475                	addi	s0,s0,-3
    8001203c:	00143413          	seqz	s0,s0
    80012040:	b6c1                	j	80011c00 <external_interrupt_MEI+0x650>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012042:	00046717          	auipc	a4,0x46
    80012046:	fd272703          	lw	a4,-46(a4) # 80058014 <excpt+0x4>
    8001204a:	4789                	li	a5,2
    8001204c:	ecf713e3          	bne	a4,a5,80011f12 <external_interrupt_MEI+0x962>
    80012050:	bdd9                	j	80011f26 <external_interrupt_MEI+0x976>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012052:	00046717          	auipc	a4,0x46
    80012056:	fc272703          	lw	a4,-62(a4) # 80058014 <excpt+0x4>
    8001205a:	478d                	li	a5,3
    8001205c:	b6f71de3          	bne	a4,a5,80011bd6 <external_interrupt_MEI+0x626>
    80012060:	b669                	j	80011bea <external_interrupt_MEI+0x63a>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012062:	0001c517          	auipc	a0,0x1c
    80012066:	19e50513          	addi	a0,a0,414 # 8002e200 <__func__.0+0x318>
    8001206a:	3c0190ef          	jal	8002b42a <printf>
    8001206e:	02900513          	li	a0,41
    80012072:	0a6180ef          	jal	8002a118 <putchar>
    80012076:	b101                	j	80011c76 <external_interrupt_MEI+0x6c6>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012078:	0001c517          	auipc	a0,0x1c
    8001207c:	18850513          	addi	a0,a0,392 # 8002e200 <__func__.0+0x318>
    80012080:	3aa190ef          	jal	8002b42a <printf>
    80012084:	02900513          	li	a0,41
    80012088:	090180ef          	jal	8002a118 <putchar>
    8001208c:	bbe5                	j	80011e84 <external_interrupt_MEI+0x8d4>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001208e:	0001c517          	auipc	a0,0x1c
    80012092:	17250513          	addi	a0,a0,370 # 8002e200 <__func__.0+0x318>
    80012096:	394190ef          	jal	8002b42a <printf>
    8001209a:	02900513          	li	a0,41
    8001209e:	07a180ef          	jal	8002a118 <putchar>
    800120a2:	e64ff06f          	j	80011706 <external_interrupt_MEI+0x156>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    800120a6:	0001c517          	auipc	a0,0x1c
    800120aa:	15a50513          	addi	a0,a0,346 # 8002e200 <__func__.0+0x318>
    800120ae:	37c190ef          	jal	8002b42a <printf>
    800120b2:	02900513          	li	a0,41
    800120b6:	062180ef          	jal	8002a118 <putchar>
    800120ba:	bddd                	j	80011fb0 <external_interrupt_MEI+0xa00>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    800120bc:	0001c517          	auipc	a0,0x1c
    800120c0:	14450513          	addi	a0,a0,324 # 8002e200 <__func__.0+0x318>
    800120c4:	366190ef          	jal	8002b42a <printf>
    800120c8:	02900513          	li	a0,41
    800120cc:	04c180ef          	jal	8002a118 <putchar>
    800120d0:	bca5                	j	80011b48 <external_interrupt_MEI+0x598>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    800120d2:	0001c517          	auipc	a0,0x1c
    800120d6:	12e50513          	addi	a0,a0,302 # 8002e200 <__func__.0+0x318>
    800120da:	350190ef          	jal	8002b42a <printf>
    800120de:	02900513          	li	a0,41
    800120e2:	036180ef          	jal	8002a118 <putchar>
    800120e6:	855ff06f          	j	8001193a <external_interrupt_MEI+0x38a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    800120ea:	0001c517          	auipc	a0,0x1c
    800120ee:	11650513          	addi	a0,a0,278 # 8002e200 <__func__.0+0x318>
    800120f2:	338190ef          	jal	8002b42a <printf>
    800120f6:	02900513          	li	a0,41
    800120fa:	01e180ef          	jal	8002a118 <putchar>
    800120fe:	fbcff06f          	j	800118ba <external_interrupt_MEI+0x30a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012102:	0001c517          	auipc	a0,0x1c
    80012106:	0fe50513          	addi	a0,a0,254 # 8002e200 <__func__.0+0x318>
    8001210a:	320190ef          	jal	8002b42a <printf>
    8001210e:	02900513          	li	a0,41
    80012112:	006180ef          	jal	8002a118 <putchar>
    80012116:	f24ff06f          	j	8001183a <external_interrupt_MEI+0x28a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001211a:	00046717          	auipc	a4,0x46
    8001211e:	efa72703          	lw	a4,-262(a4) # 80058014 <excpt+0x4>
    80012122:	478d                	li	a5,3
    80012124:	0001c597          	auipc	a1,0x1c
    80012128:	08458593          	addi	a1,a1,132 # 8002e1a8 <__func__.0+0x2c0>
    8001212c:	a8f704e3          	beq	a4,a5,80011bb4 <external_interrupt_MEI+0x604>
    80012130:	0001c597          	auipc	a1,0x1c
    80012134:	08858593          	addi	a1,a1,136 # 8002e1b8 <__func__.0+0x2d0>
    80012138:	bcb5                	j	80011bb4 <external_interrupt_MEI+0x604>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001213a:	00046717          	auipc	a4,0x46
    8001213e:	eda72703          	lw	a4,-294(a4) # 80058014 <excpt+0x4>
    80012142:	4789                	li	a5,2
    80012144:	0001c597          	auipc	a1,0x1c
    80012148:	06458593          	addi	a1,a1,100 # 8002e1a8 <__func__.0+0x2c0>
    8001214c:	daf702e3          	beq	a4,a5,80011ef0 <external_interrupt_MEI+0x940>
    80012150:	0001c597          	auipc	a1,0x1c
    80012154:	06858593          	addi	a1,a1,104 # 8002e1b8 <__func__.0+0x2d0>
    80012158:	bb61                	j	80011ef0 <external_interrupt_MEI+0x940>

000000008001215a <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    8001215a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001215c:	0001b597          	auipc	a1,0x1b
    80012160:	89c58593          	addi	a1,a1,-1892 # 8002c9f8 <__func__.1>
    80012164:	0001c517          	auipc	a0,0x1c
    80012168:	06450513          	addi	a0,a0,100 # 8002e1c8 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    8001216c:	ec06                	sd	ra,24(sp)
    8001216e:	e822                	sd	s0,16(sp)
    80012170:	e426                	sd	s1,8(sp)
    TEST_START();
    80012172:	2b8190ef          	jal	8002b42a <printf>
    80012176:	4529                	li	a0,10
    80012178:	7a1170ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    8001217c:	c91ee0ef          	jal	80000e0c <test_setup_except_function>

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    80012180:	450d                	li	a0,3
    80012182:	d87ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    80012186:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001218a:	20000793          	li	a5,512
    8001218e:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012192:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012196:	450d                	li	a0,3
    80012198:	d71ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001219c:	08200593          	li	a1,130
    800121a0:	00020617          	auipc	a2,0x20
    800121a4:	e0060613          	addi	a2,a2,-512 # 80031fa0 <__func__.0+0x40b8>
    800121a8:	0001c517          	auipc	a0,0x1c
    800121ac:	03850513          	addi	a0,a0,56 # 8002e1e0 <__func__.0+0x2f8>
    800121b0:	27a190ef          	jal	8002b42a <printf>
    800121b4:	00046797          	auipc	a5,0x46
    800121b8:	e5d7c783          	lbu	a5,-419(a5) # 80058011 <excpt+0x1>
    800121bc:	00046497          	auipc	s1,0x46
    800121c0:	e5448493          	addi	s1,s1,-428 # 80058010 <excpt>
    800121c4:	0001c597          	auipc	a1,0x1c
    800121c8:	ff458593          	addi	a1,a1,-12 # 8002e1b8 <__func__.0+0x2d0>
    800121cc:	c799                	beqz	a5,800121da <external_interrupt_SEI+0x80>
    800121ce:	57fd                	li	a5,-1
    800121d0:	6498                	ld	a4,8(s1)
    800121d2:	17fe                	slli	a5,a5,0x3f
    800121d4:	07a5                	addi	a5,a5,9
    800121d6:	74f70763          	beq	a4,a5,80012924 <external_interrupt_SEI+0x7ca>
    800121da:	0001c517          	auipc	a0,0x1c
    800121de:	01e50513          	addi	a0,a0,30 # 8002e1f8 <__func__.0+0x310>
    800121e2:	248190ef          	jal	8002b42a <printf>
    800121e6:	00046797          	auipc	a5,0x46
    800121ea:	e2b7c783          	lbu	a5,-469(a5) # 80058011 <excpt+0x1>
    800121ee:	c799                	beqz	a5,800121fc <external_interrupt_SEI+0xa2>
    800121f0:	57fd                	li	a5,-1
    800121f2:	6498                	ld	a4,8(s1)
    800121f4:	17fe                	slli	a5,a5,0x3f
    800121f6:	07a5                	addi	a5,a5,9
    800121f8:	5ef70f63          	beq	a4,a5,800127f6 <external_interrupt_SEI+0x69c>
    800121fc:	0001c517          	auipc	a0,0x1c
    80012200:	00450513          	addi	a0,a0,4 # 8002e200 <__func__.0+0x318>
    80012204:	226190ef          	jal	8002b42a <printf>
    80012208:	02900513          	li	a0,41
    8001220c:	70d170ef          	jal	8002a118 <putchar>
    80012210:	4529                	li	a0,10
    80012212:	707170ef          	jal	8002a118 <putchar>
    80012216:	00046797          	auipc	a5,0x46
    8001221a:	dfb7c783          	lbu	a5,-517(a5) # 80058011 <excpt+0x1>
    8001221e:	4401                	li	s0,0
    80012220:	c799                	beqz	a5,8001222e <external_interrupt_SEI+0xd4>
    80012222:	57fd                	li	a5,-1
    80012224:	6498                	ld	a4,8(s1)
    80012226:	17fe                	slli	a5,a5,0x3f
    80012228:	07a5                	addi	a5,a5,9
    8001222a:	6af70563          	beq	a4,a5,800128d4 <external_interrupt_SEI+0x77a>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    8001222e:	bdfee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    80012232:	450d                	li	a0,3
    80012234:	cd5ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012238:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001223c:	20000793          	li	a5,512
    80012240:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012244:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012248:	450d                	li	a0,3
    8001224a:	cbfee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001224e:	08200593          	li	a1,130
    80012252:	00020617          	auipc	a2,0x20
    80012256:	dae60613          	addi	a2,a2,-594 # 80032000 <__func__.0+0x4118>
    8001225a:	0001c517          	auipc	a0,0x1c
    8001225e:	f8650513          	addi	a0,a0,-122 # 8002e1e0 <__func__.0+0x2f8>
    80012262:	1c8190ef          	jal	8002b42a <printf>
    80012266:	00046797          	auipc	a5,0x46
    8001226a:	dab7c783          	lbu	a5,-597(a5) # 80058011 <excpt+0x1>
    8001226e:	0001c597          	auipc	a1,0x1c
    80012272:	f4a58593          	addi	a1,a1,-182 # 8002e1b8 <__func__.0+0x2d0>
    80012276:	e789                	bnez	a5,80012280 <external_interrupt_SEI+0x126>
    80012278:	0001c597          	auipc	a1,0x1c
    8001227c:	f3058593          	addi	a1,a1,-208 # 8002e1a8 <__func__.0+0x2c0>
    80012280:	0001c517          	auipc	a0,0x1c
    80012284:	f7850513          	addi	a0,a0,-136 # 8002e1f8 <__func__.0+0x310>
    80012288:	1a2190ef          	jal	8002b42a <printf>
    8001228c:	00046797          	auipc	a5,0x46
    80012290:	d857c783          	lbu	a5,-635(a5) # 80058011 <excpt+0x1>
    80012294:	5a079f63          	bnez	a5,80012852 <external_interrupt_SEI+0x6f8>
    80012298:	4529                	li	a0,10
    8001229a:	67f170ef          	jal	8002a118 <putchar>
    8001229e:	c419                	beqz	s0,800122ac <external_interrupt_SEI+0x152>
    800122a0:	00046417          	auipc	s0,0x46
    800122a4:	d7144403          	lbu	s0,-655(s0) # 80058011 <excpt+0x1>
    800122a8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    800122ac:	b61ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800122b0:	4511                	li	a0,4
    800122b2:	c57ee0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    800122b6:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800122ba:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800122be:	20000793          	li	a5,512
    800122c2:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800122c6:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800122ca:	450d                	li	a0,3
    800122cc:	c3dee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800122d0:	08200593          	li	a1,130
    800122d4:	00020617          	auipc	a2,0x20
    800122d8:	d7c60613          	addi	a2,a2,-644 # 80032050 <__func__.0+0x4168>
    800122dc:	0001c517          	auipc	a0,0x1c
    800122e0:	f0450513          	addi	a0,a0,-252 # 8002e1e0 <__func__.0+0x2f8>
    800122e4:	146190ef          	jal	8002b42a <printf>
    800122e8:	00046797          	auipc	a5,0x46
    800122ec:	d297c783          	lbu	a5,-727(a5) # 80058011 <excpt+0x1>
    800122f0:	0001c597          	auipc	a1,0x1c
    800122f4:	ec858593          	addi	a1,a1,-312 # 8002e1b8 <__func__.0+0x2d0>
    800122f8:	c799                	beqz	a5,80012306 <external_interrupt_SEI+0x1ac>
    800122fa:	57fd                	li	a5,-1
    800122fc:	6498                	ld	a4,8(s1)
    800122fe:	17fe                	slli	a5,a5,0x3f
    80012300:	07a5                	addi	a5,a5,9
    80012302:	5ef70163          	beq	a4,a5,800128e4 <external_interrupt_SEI+0x78a>
    80012306:	0001c517          	auipc	a0,0x1c
    8001230a:	ef250513          	addi	a0,a0,-270 # 8002e1f8 <__func__.0+0x310>
    8001230e:	11c190ef          	jal	8002b42a <printf>
    80012312:	00046797          	auipc	a5,0x46
    80012316:	cff7c783          	lbu	a5,-769(a5) # 80058011 <excpt+0x1>
    8001231a:	c799                	beqz	a5,80012328 <external_interrupt_SEI+0x1ce>
    8001231c:	57fd                	li	a5,-1
    8001231e:	6498                	ld	a4,8(s1)
    80012320:	17fe                	slli	a5,a5,0x3f
    80012322:	07a5                	addi	a5,a5,9
    80012324:	4cf70163          	beq	a4,a5,800127e6 <external_interrupt_SEI+0x68c>
    80012328:	0001c517          	auipc	a0,0x1c
    8001232c:	ed850513          	addi	a0,a0,-296 # 8002e200 <__func__.0+0x318>
    80012330:	0fa190ef          	jal	8002b42a <printf>
    80012334:	02900513          	li	a0,41
    80012338:	5e1170ef          	jal	8002a118 <putchar>
    8001233c:	4529                	li	a0,10
    8001233e:	5db170ef          	jal	8002a118 <putchar>
    80012342:	c801                	beqz	s0,80012352 <external_interrupt_SEI+0x1f8>
    80012344:	00046797          	auipc	a5,0x46
    80012348:	ccd7c783          	lbu	a5,-819(a5) # 80058011 <excpt+0x1>
    8001234c:	4401                	li	s0,0
    8001234e:	46079663          	bnez	a5,800127ba <external_interrupt_SEI+0x660>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80012352:	abbee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012356:	4511                	li	a0,4
    80012358:	bb1ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    8001235c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012360:	20000793          	li	a5,512
    80012364:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012368:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8001236c:	450d                	li	a0,3
    8001236e:	b9bee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80012372:	08200593          	li	a1,130
    80012376:	00020617          	auipc	a2,0x20
    8001237a:	d3a60613          	addi	a2,a2,-710 # 800320b0 <__func__.0+0x41c8>
    8001237e:	0001c517          	auipc	a0,0x1c
    80012382:	e6250513          	addi	a0,a0,-414 # 8002e1e0 <__func__.0+0x2f8>
    80012386:	0a4190ef          	jal	8002b42a <printf>
    8001238a:	00046797          	auipc	a5,0x46
    8001238e:	c877c783          	lbu	a5,-889(a5) # 80058011 <excpt+0x1>
    80012392:	0001c597          	auipc	a1,0x1c
    80012396:	e2658593          	addi	a1,a1,-474 # 8002e1b8 <__func__.0+0x2d0>
    8001239a:	e789                	bnez	a5,800123a4 <external_interrupt_SEI+0x24a>
    8001239c:	0001c597          	auipc	a1,0x1c
    800123a0:	e0c58593          	addi	a1,a1,-500 # 8002e1a8 <__func__.0+0x2c0>
    800123a4:	0001c517          	auipc	a0,0x1c
    800123a8:	e5450513          	addi	a0,a0,-428 # 8002e1f8 <__func__.0+0x310>
    800123ac:	07e190ef          	jal	8002b42a <printf>
    800123b0:	00046797          	auipc	a5,0x46
    800123b4:	c617c783          	lbu	a5,-927(a5) # 80058011 <excpt+0x1>
    800123b8:	48079263          	bnez	a5,8001283c <external_interrupt_SEI+0x6e2>
    800123bc:	4529                	li	a0,10
    800123be:	55b170ef          	jal	8002a118 <putchar>
    800123c2:	c419                	beqz	s0,800123d0 <external_interrupt_SEI+0x276>
    800123c4:	00046417          	auipc	s0,0x46
    800123c8:	c4d44403          	lbu	s0,-947(s0) # 80058011 <excpt+0x1>
    800123cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    800123d0:	a3dee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800123d4:	4511                	li	a0,4
    800123d6:	b33ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    800123da:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800123de:	20000793          	li	a5,512
    800123e2:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800123e6:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800123ea:	450d                	li	a0,3
    800123ec:	b1dee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    800123f0:	08200593          	li	a1,130
    800123f4:	00020617          	auipc	a2,0x20
    800123f8:	d0c60613          	addi	a2,a2,-756 # 80032100 <__func__.0+0x4218>
    800123fc:	0001c517          	auipc	a0,0x1c
    80012400:	de450513          	addi	a0,a0,-540 # 8002e1e0 <__func__.0+0x2f8>
    80012404:	026190ef          	jal	8002b42a <printf>
    80012408:	00046797          	auipc	a5,0x46
    8001240c:	c097c783          	lbu	a5,-1015(a5) # 80058011 <excpt+0x1>
    80012410:	0001c597          	auipc	a1,0x1c
    80012414:	da858593          	addi	a1,a1,-600 # 8002e1b8 <__func__.0+0x2d0>
    80012418:	e789                	bnez	a5,80012422 <external_interrupt_SEI+0x2c8>
    8001241a:	0001c597          	auipc	a1,0x1c
    8001241e:	d8e58593          	addi	a1,a1,-626 # 8002e1a8 <__func__.0+0x2c0>
    80012422:	0001c517          	auipc	a0,0x1c
    80012426:	dd650513          	addi	a0,a0,-554 # 8002e1f8 <__func__.0+0x310>
    8001242a:	000190ef          	jal	8002b42a <printf>
    8001242e:	00046797          	auipc	a5,0x46
    80012432:	be37c783          	lbu	a5,-1053(a5) # 80058011 <excpt+0x1>
    80012436:	3e079863          	bnez	a5,80012826 <external_interrupt_SEI+0x6cc>
    8001243a:	4529                	li	a0,10
    8001243c:	4dd170ef          	jal	8002a118 <putchar>
    80012440:	c419                	beqz	s0,8001244e <external_interrupt_SEI+0x2f4>
    80012442:	00046417          	auipc	s0,0x46
    80012446:	bcf44403          	lbu	s0,-1073(s0) # 80058011 <excpt+0x1>
    8001244a:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    8001244e:	9bfee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012452:	4511                	li	a0,4
    80012454:	ab5ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012458:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001245c:	20000793          	li	a5,512
    80012460:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012464:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012468:	4509                	li	a0,2
    8001246a:	a9fee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001246e:	08200593          	li	a1,130
    80012472:	00020617          	auipc	a2,0x20
    80012476:	cde60613          	addi	a2,a2,-802 # 80032150 <__func__.0+0x4268>
    8001247a:	0001c517          	auipc	a0,0x1c
    8001247e:	d6650513          	addi	a0,a0,-666 # 8002e1e0 <__func__.0+0x2f8>
    80012482:	7a9180ef          	jal	8002b42a <printf>
    80012486:	00046797          	auipc	a5,0x46
    8001248a:	b8b7c783          	lbu	a5,-1141(a5) # 80058011 <excpt+0x1>
    8001248e:	0001c597          	auipc	a1,0x1c
    80012492:	d2a58593          	addi	a1,a1,-726 # 8002e1b8 <__func__.0+0x2d0>
    80012496:	c799                	beqz	a5,800124a4 <external_interrupt_SEI+0x34a>
    80012498:	57fd                	li	a5,-1
    8001249a:	6498                	ld	a4,8(s1)
    8001249c:	17fe                	slli	a5,a5,0x3f
    8001249e:	07a5                	addi	a5,a5,9
    800124a0:	40f70a63          	beq	a4,a5,800128b4 <external_interrupt_SEI+0x75a>
    800124a4:	0001c517          	auipc	a0,0x1c
    800124a8:	d5450513          	addi	a0,a0,-684 # 8002e1f8 <__func__.0+0x310>
    800124ac:	77f180ef          	jal	8002b42a <printf>
    800124b0:	00046797          	auipc	a5,0x46
    800124b4:	b617c783          	lbu	a5,-1183(a5) # 80058011 <excpt+0x1>
    800124b8:	c799                	beqz	a5,800124c6 <external_interrupt_SEI+0x36c>
    800124ba:	57fd                	li	a5,-1
    800124bc:	6498                	ld	a4,8(s1)
    800124be:	17fe                	slli	a5,a5,0x3f
    800124c0:	07a5                	addi	a5,a5,9
    800124c2:	30f70a63          	beq	a4,a5,800127d6 <external_interrupt_SEI+0x67c>
    800124c6:	0001c517          	auipc	a0,0x1c
    800124ca:	d3a50513          	addi	a0,a0,-710 # 8002e200 <__func__.0+0x318>
    800124ce:	75d180ef          	jal	8002b42a <printf>
    800124d2:	02900513          	li	a0,41
    800124d6:	443170ef          	jal	8002a118 <putchar>
    800124da:	4529                	li	a0,10
    800124dc:	43d170ef          	jal	8002a118 <putchar>
    800124e0:	c801                	beqz	s0,800124f0 <external_interrupt_SEI+0x396>
    800124e2:	00046797          	auipc	a5,0x46
    800124e6:	b2f7c783          	lbu	a5,-1233(a5) # 80058011 <excpt+0x1>
    800124ea:	4401                	li	s0,0
    800124ec:	2a079963          	bnez	a5,8001279e <external_interrupt_SEI+0x644>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    800124f0:	91dee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800124f4:	4511                	li	a0,4
    800124f6:	a13ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800124fa:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800124fe:	20000793          	li	a5,512
    80012502:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012506:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8001250a:	4509                	li	a0,2
    8001250c:	9fdee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012510:	08200593          	li	a1,130
    80012514:	00020617          	auipc	a2,0x20
    80012518:	c9460613          	addi	a2,a2,-876 # 800321a8 <__func__.0+0x42c0>
    8001251c:	0001c517          	auipc	a0,0x1c
    80012520:	cc450513          	addi	a0,a0,-828 # 8002e1e0 <__func__.0+0x2f8>
    80012524:	707180ef          	jal	8002b42a <printf>
    80012528:	00046797          	auipc	a5,0x46
    8001252c:	ae97c783          	lbu	a5,-1303(a5) # 80058011 <excpt+0x1>
    80012530:	0001c597          	auipc	a1,0x1c
    80012534:	c8858593          	addi	a1,a1,-888 # 8002e1b8 <__func__.0+0x2d0>
    80012538:	c799                	beqz	a5,80012546 <external_interrupt_SEI+0x3ec>
    8001253a:	57fd                	li	a5,-1
    8001253c:	6498                	ld	a4,8(s1)
    8001253e:	17fe                	slli	a5,a5,0x3f
    80012540:	07a5                	addi	a5,a5,9
    80012542:	34f70963          	beq	a4,a5,80012894 <external_interrupt_SEI+0x73a>
    80012546:	0001c517          	auipc	a0,0x1c
    8001254a:	cb250513          	addi	a0,a0,-846 # 8002e1f8 <__func__.0+0x310>
    8001254e:	6dd180ef          	jal	8002b42a <printf>
    80012552:	00046797          	auipc	a5,0x46
    80012556:	abf7c783          	lbu	a5,-1345(a5) # 80058011 <excpt+0x1>
    8001255a:	c799                	beqz	a5,80012568 <external_interrupt_SEI+0x40e>
    8001255c:	57fd                	li	a5,-1
    8001255e:	6498                	ld	a4,8(s1)
    80012560:	17fe                	slli	a5,a5,0x3f
    80012562:	07a5                	addi	a5,a5,9
    80012564:	2af70963          	beq	a4,a5,80012816 <external_interrupt_SEI+0x6bc>
    80012568:	0001c517          	auipc	a0,0x1c
    8001256c:	c9850513          	addi	a0,a0,-872 # 8002e200 <__func__.0+0x318>
    80012570:	6bb180ef          	jal	8002b42a <printf>
    80012574:	02900513          	li	a0,41
    80012578:	3a1170ef          	jal	8002a118 <putchar>
    8001257c:	4529                	li	a0,10
    8001257e:	39b170ef          	jal	8002a118 <putchar>
    80012582:	c801                	beqz	s0,80012592 <external_interrupt_SEI+0x438>
    80012584:	00046797          	auipc	a5,0x46
    80012588:	a8d7c783          	lbu	a5,-1395(a5) # 80058011 <excpt+0x1>
    8001258c:	4401                	li	s0,0
    8001258e:	1e079a63          	bnez	a5,80012782 <external_interrupt_SEI+0x628>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    80012592:	87bee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012596:	4511                	li	a0,4
    80012598:	971ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001259c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800125a0:	20000793          	li	a5,512
    800125a4:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800125a8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800125ac:	4509                	li	a0,2
    800125ae:	95bee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800125b2:	08200593          	li	a1,130
    800125b6:	00020617          	auipc	a2,0x20
    800125ba:	c4a60613          	addi	a2,a2,-950 # 80032200 <__func__.0+0x4318>
    800125be:	0001c517          	auipc	a0,0x1c
    800125c2:	c2250513          	addi	a0,a0,-990 # 8002e1e0 <__func__.0+0x2f8>
    800125c6:	665180ef          	jal	8002b42a <printf>
    800125ca:	00046797          	auipc	a5,0x46
    800125ce:	a477c783          	lbu	a5,-1465(a5) # 80058011 <excpt+0x1>
    800125d2:	0001c597          	auipc	a1,0x1c
    800125d6:	be658593          	addi	a1,a1,-1050 # 8002e1b8 <__func__.0+0x2d0>
    800125da:	c799                	beqz	a5,800125e8 <external_interrupt_SEI+0x48e>
    800125dc:	57fd                	li	a5,-1
    800125de:	6498                	ld	a4,8(s1)
    800125e0:	17fe                	slli	a5,a5,0x3f
    800125e2:	07a5                	addi	a5,a5,9
    800125e4:	32f70063          	beq	a4,a5,80012904 <external_interrupt_SEI+0x7aa>
    800125e8:	0001c517          	auipc	a0,0x1c
    800125ec:	c1050513          	addi	a0,a0,-1008 # 8002e1f8 <__func__.0+0x310>
    800125f0:	63b180ef          	jal	8002b42a <printf>
    800125f4:	00046797          	auipc	a5,0x46
    800125f8:	a1d7c783          	lbu	a5,-1507(a5) # 80058011 <excpt+0x1>
    800125fc:	c799                	beqz	a5,8001260a <external_interrupt_SEI+0x4b0>
    800125fe:	57fd                	li	a5,-1
    80012600:	6498                	ld	a4,8(s1)
    80012602:	17fe                	slli	a5,a5,0x3f
    80012604:	07a5                	addi	a5,a5,9
    80012606:	20f70063          	beq	a4,a5,80012806 <external_interrupt_SEI+0x6ac>
    8001260a:	0001c517          	auipc	a0,0x1c
    8001260e:	bf650513          	addi	a0,a0,-1034 # 8002e200 <__func__.0+0x318>
    80012612:	619180ef          	jal	8002b42a <printf>
    80012616:	02900513          	li	a0,41
    8001261a:	2ff170ef          	jal	8002a118 <putchar>
    8001261e:	4529                	li	a0,10
    80012620:	2f9170ef          	jal	8002a118 <putchar>
    80012624:	c801                	beqz	s0,80012634 <external_interrupt_SEI+0x4da>
    80012626:	00046797          	auipc	a5,0x46
    8001262a:	9eb7c783          	lbu	a5,-1557(a5) # 80058011 <excpt+0x1>
    8001262e:	4401                	li	s0,0
    80012630:	12079b63          	bnez	a5,80012766 <external_interrupt_SEI+0x60c>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80012634:	fd8ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012638:	4511                	li	a0,4
    8001263a:	8cfee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001263e:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012642:	20000793          	li	a5,512
    80012646:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001264a:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001264e:	4509                	li	a0,2
    80012650:	8b9ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012654:	08200593          	li	a1,130
    80012658:	00020617          	auipc	a2,0x20
    8001265c:	c0060613          	addi	a2,a2,-1024 # 80032258 <__func__.0+0x4370>
    80012660:	0001c517          	auipc	a0,0x1c
    80012664:	b8050513          	addi	a0,a0,-1152 # 8002e1e0 <__func__.0+0x2f8>
    80012668:	5c3180ef          	jal	8002b42a <printf>
    8001266c:	00046797          	auipc	a5,0x46
    80012670:	9a57c783          	lbu	a5,-1627(a5) # 80058011 <excpt+0x1>
    80012674:	0001c597          	auipc	a1,0x1c
    80012678:	b4458593          	addi	a1,a1,-1212 # 8002e1b8 <__func__.0+0x2d0>
    8001267c:	e789                	bnez	a5,80012686 <external_interrupt_SEI+0x52c>
    8001267e:	0001c597          	auipc	a1,0x1c
    80012682:	b2a58593          	addi	a1,a1,-1238 # 8002e1a8 <__func__.0+0x2c0>
    80012686:	0001c517          	auipc	a0,0x1c
    8001268a:	b7250513          	addi	a0,a0,-1166 # 8002e1f8 <__func__.0+0x310>
    8001268e:	59d180ef          	jal	8002b42a <printf>
    80012692:	00046797          	auipc	a5,0x46
    80012696:	97f7c783          	lbu	a5,-1665(a5) # 80058011 <excpt+0x1>
    8001269a:	1e079263          	bnez	a5,8001287e <external_interrupt_SEI+0x724>
    8001269e:	4529                	li	a0,10
    800126a0:	279170ef          	jal	8002a118 <putchar>
    800126a4:	c419                	beqz	s0,800126b2 <external_interrupt_SEI+0x558>
    800126a6:	00046417          	auipc	s0,0x46
    800126aa:	96b44403          	lbu	s0,-1685(s0) # 80058011 <excpt+0x1>
    800126ae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    800126b2:	f5aee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800126b6:	4511                	li	a0,4
    800126b8:	851ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    800126bc:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800126c0:	20000793          	li	a5,512
    800126c4:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800126c8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800126cc:	4509                	li	a0,2
    800126ce:	83bee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800126d2:	08200593          	li	a1,130
    800126d6:	00020617          	auipc	a2,0x20
    800126da:	b8260613          	addi	a2,a2,-1150 # 80032258 <__func__.0+0x4370>
    800126de:	0001c517          	auipc	a0,0x1c
    800126e2:	b0250513          	addi	a0,a0,-1278 # 8002e1e0 <__func__.0+0x2f8>
    800126e6:	545180ef          	jal	8002b42a <printf>
    800126ea:	00046797          	auipc	a5,0x46
    800126ee:	9277c783          	lbu	a5,-1753(a5) # 80058011 <excpt+0x1>
    800126f2:	0001c597          	auipc	a1,0x1c
    800126f6:	ac658593          	addi	a1,a1,-1338 # 8002e1b8 <__func__.0+0x2d0>
    800126fa:	e789                	bnez	a5,80012704 <external_interrupt_SEI+0x5aa>
    800126fc:	0001c597          	auipc	a1,0x1c
    80012700:	aac58593          	addi	a1,a1,-1364 # 8002e1a8 <__func__.0+0x2c0>
    80012704:	0001c517          	auipc	a0,0x1c
    80012708:	af450513          	addi	a0,a0,-1292 # 8002e1f8 <__func__.0+0x310>
    8001270c:	51f180ef          	jal	8002b42a <printf>
    80012710:	00046797          	auipc	a5,0x46
    80012714:	9017c783          	lbu	a5,-1791(a5) # 80058011 <excpt+0x1>
    80012718:	14079863          	bnez	a5,80012868 <external_interrupt_SEI+0x70e>
    8001271c:	4529                	li	a0,10
    8001271e:	1fb170ef          	jal	8002a118 <putchar>
    80012722:	c411                	beqz	s0,8001272e <external_interrupt_SEI+0x5d4>
    80012724:	00046797          	auipc	a5,0x46
    80012728:	8ed7c783          	lbu	a5,-1811(a5) # 80058011 <excpt+0x1>
    8001272c:	c79d                	beqz	a5,8001275a <external_interrupt_SEI+0x600>
    8001272e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80012730:	0001c597          	auipc	a1,0x1c
    80012734:	a8858593          	addi	a1,a1,-1400 # 8002e1b8 <__func__.0+0x2d0>
    80012738:	0001c517          	auipc	a0,0x1c
    8001273c:	b2850513          	addi	a0,a0,-1240 # 8002e260 <__func__.0+0x378>
    80012740:	4eb180ef          	jal	8002b42a <printf>
    80012744:	4511                	li	a0,4
    80012746:	fc2ee0ef          	jal	80000f08 <goto_priv>
    8001274a:	8daef0ef          	jal	80001824 <reset_state>
}
    8001274e:	60e2                	ld	ra,24(sp)
    80012750:	8522                	mv	a0,s0
    80012752:	6442                	ld	s0,16(sp)
    80012754:	64a2                	ld	s1,8(sp)
    80012756:	6105                	addi	sp,sp,32
    80012758:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001275a:	4405                	li	s0,1
    TEST_END();
    8001275c:	0001c597          	auipc	a1,0x1c
    80012760:	a4c58593          	addi	a1,a1,-1460 # 8002e1a8 <__func__.0+0x2c0>
    80012764:	bfd1                	j	80012738 <external_interrupt_SEI+0x5de>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012766:	57fd                	li	a5,-1
    80012768:	6498                	ld	a4,8(s1)
    8001276a:	17fe                	slli	a5,a5,0x3f
    8001276c:	07a5                	addi	a5,a5,9
    8001276e:	ecf713e3          	bne	a4,a5,80012634 <external_interrupt_SEI+0x4da>
    80012772:	00046417          	auipc	s0,0x46
    80012776:	8a242403          	lw	s0,-1886(s0) # 80058014 <excpt+0x4>
    8001277a:	1471                	addi	s0,s0,-4
    8001277c:	00143413          	seqz	s0,s0
    80012780:	bd55                	j	80012634 <external_interrupt_SEI+0x4da>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012782:	57fd                	li	a5,-1
    80012784:	6498                	ld	a4,8(s1)
    80012786:	17fe                	slli	a5,a5,0x3f
    80012788:	07a5                	addi	a5,a5,9
    8001278a:	e0f714e3          	bne	a4,a5,80012592 <external_interrupt_SEI+0x438>
    8001278e:	00046417          	auipc	s0,0x46
    80012792:	88642403          	lw	s0,-1914(s0) # 80058014 <excpt+0x4>
    80012796:	1471                	addi	s0,s0,-4
    80012798:	00143413          	seqz	s0,s0
    8001279c:	bbdd                	j	80012592 <external_interrupt_SEI+0x438>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001279e:	57fd                	li	a5,-1
    800127a0:	6498                	ld	a4,8(s1)
    800127a2:	17fe                	slli	a5,a5,0x3f
    800127a4:	07a5                	addi	a5,a5,9
    800127a6:	d4f715e3          	bne	a4,a5,800124f0 <external_interrupt_SEI+0x396>
    800127aa:	00046417          	auipc	s0,0x46
    800127ae:	86a42403          	lw	s0,-1942(s0) # 80058014 <excpt+0x4>
    800127b2:	1471                	addi	s0,s0,-4
    800127b4:	00143413          	seqz	s0,s0
    800127b8:	bb25                	j	800124f0 <external_interrupt_SEI+0x396>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800127ba:	57fd                	li	a5,-1
    800127bc:	6498                	ld	a4,8(s1)
    800127be:	17fe                	slli	a5,a5,0x3f
    800127c0:	07a5                	addi	a5,a5,9
    800127c2:	b8f718e3          	bne	a4,a5,80012352 <external_interrupt_SEI+0x1f8>
    800127c6:	00046417          	auipc	s0,0x46
    800127ca:	84e42403          	lw	s0,-1970(s0) # 80058014 <excpt+0x4>
    800127ce:	1471                	addi	s0,s0,-4
    800127d0:	00143413          	seqz	s0,s0
    800127d4:	bebd                	j	80012352 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800127d6:	00046717          	auipc	a4,0x46
    800127da:	83e72703          	lw	a4,-1986(a4) # 80058014 <excpt+0x4>
    800127de:	4791                	li	a5,4
    800127e0:	cef713e3          	bne	a4,a5,800124c6 <external_interrupt_SEI+0x36c>
    800127e4:	b9dd                	j	800124da <external_interrupt_SEI+0x380>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800127e6:	00046717          	auipc	a4,0x46
    800127ea:	82e72703          	lw	a4,-2002(a4) # 80058014 <excpt+0x4>
    800127ee:	4791                	li	a5,4
    800127f0:	b2f71ce3          	bne	a4,a5,80012328 <external_interrupt_SEI+0x1ce>
    800127f4:	b6a1                	j	8001233c <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800127f6:	00046717          	auipc	a4,0x46
    800127fa:	81e72703          	lw	a4,-2018(a4) # 80058014 <excpt+0x4>
    800127fe:	4791                	li	a5,4
    80012800:	9ef71ee3          	bne	a4,a5,800121fc <external_interrupt_SEI+0xa2>
    80012804:	b431                	j	80012210 <external_interrupt_SEI+0xb6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012806:	00046717          	auipc	a4,0x46
    8001280a:	80e72703          	lw	a4,-2034(a4) # 80058014 <excpt+0x4>
    8001280e:	4791                	li	a5,4
    80012810:	def71de3          	bne	a4,a5,8001260a <external_interrupt_SEI+0x4b0>
    80012814:	b529                	j	8001261e <external_interrupt_SEI+0x4c4>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012816:	00045717          	auipc	a4,0x45
    8001281a:	7fe72703          	lw	a4,2046(a4) # 80058014 <excpt+0x4>
    8001281e:	4791                	li	a5,4
    80012820:	d4f714e3          	bne	a4,a5,80012568 <external_interrupt_SEI+0x40e>
    80012824:	bba1                	j	8001257c <external_interrupt_SEI+0x422>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    80012826:	0001c517          	auipc	a0,0x1c
    8001282a:	9da50513          	addi	a0,a0,-1574 # 8002e200 <__func__.0+0x318>
    8001282e:	3fd180ef          	jal	8002b42a <printf>
    80012832:	02900513          	li	a0,41
    80012836:	0e3170ef          	jal	8002a118 <putchar>
    8001283a:	b101                	j	8001243a <external_interrupt_SEI+0x2e0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8001283c:	0001c517          	auipc	a0,0x1c
    80012840:	9c450513          	addi	a0,a0,-1596 # 8002e200 <__func__.0+0x318>
    80012844:	3e7180ef          	jal	8002b42a <printf>
    80012848:	02900513          	li	a0,41
    8001284c:	0cd170ef          	jal	8002a118 <putchar>
    80012850:	b6b5                	j	800123bc <external_interrupt_SEI+0x262>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012852:	0001c517          	auipc	a0,0x1c
    80012856:	9ae50513          	addi	a0,a0,-1618 # 8002e200 <__func__.0+0x318>
    8001285a:	3d1180ef          	jal	8002b42a <printf>
    8001285e:	02900513          	li	a0,41
    80012862:	0b7170ef          	jal	8002a118 <putchar>
    80012866:	bc0d                	j	80012298 <external_interrupt_SEI+0x13e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012868:	0001c517          	auipc	a0,0x1c
    8001286c:	99850513          	addi	a0,a0,-1640 # 8002e200 <__func__.0+0x318>
    80012870:	3bb180ef          	jal	8002b42a <printf>
    80012874:	02900513          	li	a0,41
    80012878:	0a1170ef          	jal	8002a118 <putchar>
    8001287c:	b545                	j	8001271c <external_interrupt_SEI+0x5c2>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001287e:	0001c517          	auipc	a0,0x1c
    80012882:	98250513          	addi	a0,a0,-1662 # 8002e200 <__func__.0+0x318>
    80012886:	3a5180ef          	jal	8002b42a <printf>
    8001288a:	02900513          	li	a0,41
    8001288e:	08b170ef          	jal	8002a118 <putchar>
    80012892:	b531                	j	8001269e <external_interrupt_SEI+0x544>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012894:	00045717          	auipc	a4,0x45
    80012898:	78072703          	lw	a4,1920(a4) # 80058014 <excpt+0x4>
    8001289c:	4791                	li	a5,4
    8001289e:	0001c597          	auipc	a1,0x1c
    800128a2:	90a58593          	addi	a1,a1,-1782 # 8002e1a8 <__func__.0+0x2c0>
    800128a6:	caf700e3          	beq	a4,a5,80012546 <external_interrupt_SEI+0x3ec>
    800128aa:	0001c597          	auipc	a1,0x1c
    800128ae:	90e58593          	addi	a1,a1,-1778 # 8002e1b8 <__func__.0+0x2d0>
    800128b2:	b951                	j	80012546 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128b4:	00045717          	auipc	a4,0x45
    800128b8:	76072703          	lw	a4,1888(a4) # 80058014 <excpt+0x4>
    800128bc:	4791                	li	a5,4
    800128be:	0001c597          	auipc	a1,0x1c
    800128c2:	8ea58593          	addi	a1,a1,-1814 # 8002e1a8 <__func__.0+0x2c0>
    800128c6:	bcf70fe3          	beq	a4,a5,800124a4 <external_interrupt_SEI+0x34a>
    800128ca:	0001c597          	auipc	a1,0x1c
    800128ce:	8ee58593          	addi	a1,a1,-1810 # 8002e1b8 <__func__.0+0x2d0>
    800128d2:	bec9                	j	800124a4 <external_interrupt_SEI+0x34a>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128d4:	00045417          	auipc	s0,0x45
    800128d8:	74042403          	lw	s0,1856(s0) # 80058014 <excpt+0x4>
    800128dc:	1471                	addi	s0,s0,-4
    800128de:	00143413          	seqz	s0,s0
    800128e2:	b2b1                	j	8001222e <external_interrupt_SEI+0xd4>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800128e4:	00045717          	auipc	a4,0x45
    800128e8:	73072703          	lw	a4,1840(a4) # 80058014 <excpt+0x4>
    800128ec:	4791                	li	a5,4
    800128ee:	0001c597          	auipc	a1,0x1c
    800128f2:	8ba58593          	addi	a1,a1,-1862 # 8002e1a8 <__func__.0+0x2c0>
    800128f6:	a0f708e3          	beq	a4,a5,80012306 <external_interrupt_SEI+0x1ac>
    800128fa:	0001c597          	auipc	a1,0x1c
    800128fe:	8be58593          	addi	a1,a1,-1858 # 8002e1b8 <__func__.0+0x2d0>
    80012902:	b411                	j	80012306 <external_interrupt_SEI+0x1ac>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012904:	00045717          	auipc	a4,0x45
    80012908:	71072703          	lw	a4,1808(a4) # 80058014 <excpt+0x4>
    8001290c:	4791                	li	a5,4
    8001290e:	0001c597          	auipc	a1,0x1c
    80012912:	89a58593          	addi	a1,a1,-1894 # 8002e1a8 <__func__.0+0x2c0>
    80012916:	ccf709e3          	beq	a4,a5,800125e8 <external_interrupt_SEI+0x48e>
    8001291a:	0001c597          	auipc	a1,0x1c
    8001291e:	89e58593          	addi	a1,a1,-1890 # 8002e1b8 <__func__.0+0x2d0>
    80012922:	b1d9                	j	800125e8 <external_interrupt_SEI+0x48e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012924:	00045717          	auipc	a4,0x45
    80012928:	6f072703          	lw	a4,1776(a4) # 80058014 <excpt+0x4>
    8001292c:	4791                	li	a5,4
    8001292e:	0001c597          	auipc	a1,0x1c
    80012932:	87a58593          	addi	a1,a1,-1926 # 8002e1a8 <__func__.0+0x2c0>
    80012936:	8af702e3          	beq	a4,a5,800121da <external_interrupt_SEI+0x80>
    8001293a:	0001c597          	auipc	a1,0x1c
    8001293e:	87e58593          	addi	a1,a1,-1922 # 8002e1b8 <__func__.0+0x2d0>
    80012942:	899ff06f          	j	800121da <external_interrupt_SEI+0x80>

0000000080012946 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    80012946:	1101                	addi	sp,sp,-32

    TEST_START();
    80012948:	0001a597          	auipc	a1,0x1a
    8001294c:	0c858593          	addi	a1,a1,200 # 8002ca10 <__func__.0>
    80012950:	0001c517          	auipc	a0,0x1c
    80012954:	87850513          	addi	a0,a0,-1928 # 8002e1c8 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    80012958:	ec06                	sd	ra,24(sp)
    8001295a:	e822                	sd	s0,16(sp)
    8001295c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001295e:	2cd180ef          	jal	8002b42a <printf>
    80012962:	4529                	li	a0,10
    80012964:	7b4170ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80012968:	ca4ee0ef          	jal	80000e0c <test_setup_except_function>

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    8001296c:	4511                	li	a0,4
    8001296e:	d9aee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012972:	40000793          	li	a5,1024
    80012976:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    8001297a:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8001297e:	4509                	li	a0,2
    80012980:	d88ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012984:	08200593          	li	a1,130
    80012988:	00020617          	auipc	a2,0x20
    8001298c:	92060613          	addi	a2,a2,-1760 # 800322a8 <__func__.0+0x43c0>
    80012990:	0001c517          	auipc	a0,0x1c
    80012994:	85050513          	addi	a0,a0,-1968 # 8002e1e0 <__func__.0+0x2f8>
    80012998:	293180ef          	jal	8002b42a <printf>
    8001299c:	00045797          	auipc	a5,0x45
    800129a0:	6757c783          	lbu	a5,1653(a5) # 80058011 <excpt+0x1>
    800129a4:	00045497          	auipc	s1,0x45
    800129a8:	66c48493          	addi	s1,s1,1644 # 80058010 <excpt>
    800129ac:	0001c597          	auipc	a1,0x1c
    800129b0:	80c58593          	addi	a1,a1,-2036 # 8002e1b8 <__func__.0+0x2d0>
    800129b4:	c799                	beqz	a5,800129c2 <external_interrupt_VSEI+0x7c>
    800129b6:	57fd                	li	a5,-1
    800129b8:	6498                	ld	a4,8(s1)
    800129ba:	17fe                	slli	a5,a5,0x3f
    800129bc:	07a9                	addi	a5,a5,10
    800129be:	62f70463          	beq	a4,a5,80012fe6 <external_interrupt_VSEI+0x6a0>
    800129c2:	0001c517          	auipc	a0,0x1c
    800129c6:	83650513          	addi	a0,a0,-1994 # 8002e1f8 <__func__.0+0x310>
    800129ca:	261180ef          	jal	8002b42a <printf>
    800129ce:	00045797          	auipc	a5,0x45
    800129d2:	6437c783          	lbu	a5,1603(a5) # 80058011 <excpt+0x1>
    800129d6:	c799                	beqz	a5,800129e4 <external_interrupt_VSEI+0x9e>
    800129d8:	57fd                	li	a5,-1
    800129da:	6498                	ld	a4,8(s1)
    800129dc:	17fe                	slli	a5,a5,0x3f
    800129de:	07a9                	addi	a5,a5,10
    800129e0:	54f70563          	beq	a4,a5,80012f2a <external_interrupt_VSEI+0x5e4>
    800129e4:	0001c517          	auipc	a0,0x1c
    800129e8:	81c50513          	addi	a0,a0,-2020 # 8002e200 <__func__.0+0x318>
    800129ec:	23f180ef          	jal	8002b42a <printf>
    800129f0:	02900513          	li	a0,41
    800129f4:	724170ef          	jal	8002a118 <putchar>
    800129f8:	4529                	li	a0,10
    800129fa:	71e170ef          	jal	8002a118 <putchar>
    800129fe:	00045797          	auipc	a5,0x45
    80012a02:	6137c783          	lbu	a5,1555(a5) # 80058011 <excpt+0x1>
    80012a06:	4401                	li	s0,0
    80012a08:	c799                	beqz	a5,80012a16 <external_interrupt_VSEI+0xd0>
    80012a0a:	57fd                	li	a5,-1
    80012a0c:	6498                	ld	a4,8(s1)
    80012a0e:	17fe                	slli	a5,a5,0x3f
    80012a10:	07a9                	addi	a5,a5,10
    80012a12:	5af70263          	beq	a4,a5,80012fb6 <external_interrupt_VSEI+0x670>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    80012a16:	bf6ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012a1a:	4511                	li	a0,4
    80012a1c:	cecee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012a20:	40000793          	li	a5,1024
    80012a24:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012a28:	577d                	li	a4,-1
    80012a2a:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012a2e:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012a32:	4509                	li	a0,2
    80012a34:	cd4ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012a38:	08200593          	li	a1,130
    80012a3c:	00020617          	auipc	a2,0x20
    80012a40:	8bc60613          	addi	a2,a2,-1860 # 800322f8 <__func__.0+0x4410>
    80012a44:	0001b517          	auipc	a0,0x1b
    80012a48:	79c50513          	addi	a0,a0,1948 # 8002e1e0 <__func__.0+0x2f8>
    80012a4c:	1df180ef          	jal	8002b42a <printf>
    80012a50:	00045797          	auipc	a5,0x45
    80012a54:	5c17c783          	lbu	a5,1473(a5) # 80058011 <excpt+0x1>
    80012a58:	0001b597          	auipc	a1,0x1b
    80012a5c:	76058593          	addi	a1,a1,1888 # 8002e1b8 <__func__.0+0x2d0>
    80012a60:	c799                	beqz	a5,80012a6e <external_interrupt_VSEI+0x128>
    80012a62:	57fd                	li	a5,-1
    80012a64:	6498                	ld	a4,8(s1)
    80012a66:	17fe                	slli	a5,a5,0x3f
    80012a68:	07a9                	addi	a5,a5,10
    80012a6a:	54f70e63          	beq	a4,a5,80012fc6 <external_interrupt_VSEI+0x680>
    80012a6e:	0001b517          	auipc	a0,0x1b
    80012a72:	78a50513          	addi	a0,a0,1930 # 8002e1f8 <__func__.0+0x310>
    80012a76:	1b5180ef          	jal	8002b42a <printf>
    80012a7a:	00045797          	auipc	a5,0x45
    80012a7e:	5977c783          	lbu	a5,1431(a5) # 80058011 <excpt+0x1>
    80012a82:	c799                	beqz	a5,80012a90 <external_interrupt_VSEI+0x14a>
    80012a84:	57fd                	li	a5,-1
    80012a86:	6498                	ld	a4,8(s1)
    80012a88:	17fe                	slli	a5,a5,0x3f
    80012a8a:	07a9                	addi	a5,a5,10
    80012a8c:	46f70f63          	beq	a4,a5,80012f0a <external_interrupt_VSEI+0x5c4>
    80012a90:	0001b517          	auipc	a0,0x1b
    80012a94:	77050513          	addi	a0,a0,1904 # 8002e200 <__func__.0+0x318>
    80012a98:	193180ef          	jal	8002b42a <printf>
    80012a9c:	02900513          	li	a0,41
    80012aa0:	678170ef          	jal	8002a118 <putchar>
    80012aa4:	4529                	li	a0,10
    80012aa6:	672170ef          	jal	8002a118 <putchar>
    80012aaa:	c801                	beqz	s0,80012aba <external_interrupt_VSEI+0x174>
    80012aac:	00045797          	auipc	a5,0x45
    80012ab0:	5657c783          	lbu	a5,1381(a5) # 80058011 <excpt+0x1>
    80012ab4:	4401                	li	s0,0
    80012ab6:	42079c63          	bnez	a5,80012eee <external_interrupt_VSEI+0x5a8>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012aba:	b52ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012abe:	4511                	li	a0,4
    80012ac0:	c48ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012ac4:	40000793          	li	a5,1024
    80012ac8:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012acc:	577d                	li	a4,-1
    80012ace:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80012ad2:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012ad6:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012ada:	4509                	li	a0,2
    80012adc:	c2cee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012ae0:	08200593          	li	a1,130
    80012ae4:	00020617          	auipc	a2,0x20
    80012ae8:	87460613          	addi	a2,a2,-1932 # 80032358 <__func__.0+0x4470>
    80012aec:	0001b517          	auipc	a0,0x1b
    80012af0:	6f450513          	addi	a0,a0,1780 # 8002e1e0 <__func__.0+0x2f8>
    80012af4:	137180ef          	jal	8002b42a <printf>
    80012af8:	00045797          	auipc	a5,0x45
    80012afc:	5197c783          	lbu	a5,1305(a5) # 80058011 <excpt+0x1>
    80012b00:	0001b597          	auipc	a1,0x1b
    80012b04:	6b858593          	addi	a1,a1,1720 # 8002e1b8 <__func__.0+0x2d0>
    80012b08:	c799                	beqz	a5,80012b16 <external_interrupt_VSEI+0x1d0>
    80012b0a:	57fd                	li	a5,-1
    80012b0c:	6498                	ld	a4,8(s1)
    80012b0e:	17fe                	slli	a5,a5,0x3f
    80012b10:	07a9                	addi	a5,a5,10
    80012b12:	4ef70a63          	beq	a4,a5,80013006 <external_interrupt_VSEI+0x6c0>
    80012b16:	0001b517          	auipc	a0,0x1b
    80012b1a:	6e250513          	addi	a0,a0,1762 # 8002e1f8 <__func__.0+0x310>
    80012b1e:	10d180ef          	jal	8002b42a <printf>
    80012b22:	00045797          	auipc	a5,0x45
    80012b26:	4ef7c783          	lbu	a5,1263(a5) # 80058011 <excpt+0x1>
    80012b2a:	c799                	beqz	a5,80012b38 <external_interrupt_VSEI+0x1f2>
    80012b2c:	57fd                	li	a5,-1
    80012b2e:	6498                	ld	a4,8(s1)
    80012b30:	17fe                	slli	a5,a5,0x3f
    80012b32:	07a9                	addi	a5,a5,10
    80012b34:	3ef70363          	beq	a4,a5,80012f1a <external_interrupt_VSEI+0x5d4>
    80012b38:	0001b517          	auipc	a0,0x1b
    80012b3c:	6c850513          	addi	a0,a0,1736 # 8002e200 <__func__.0+0x318>
    80012b40:	0eb180ef          	jal	8002b42a <printf>
    80012b44:	02900513          	li	a0,41
    80012b48:	5d0170ef          	jal	8002a118 <putchar>
    80012b4c:	4529                	li	a0,10
    80012b4e:	5ca170ef          	jal	8002a118 <putchar>
    80012b52:	c801                	beqz	s0,80012b62 <external_interrupt_VSEI+0x21c>
    80012b54:	00045797          	auipc	a5,0x45
    80012b58:	4bd7c783          	lbu	a5,1213(a5) # 80058011 <excpt+0x1>
    80012b5c:	4401                	li	s0,0
    80012b5e:	36079a63          	bnez	a5,80012ed2 <external_interrupt_VSEI+0x58c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012b62:	aaaee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012b66:	4511                	li	a0,4
    80012b68:	ba0ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012b6c:	40000793          	li	a5,1024
    80012b70:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012b74:	577d                	li	a4,-1
    80012b76:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80012b7a:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012b7e:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012b82:	4509                	li	a0,2
    80012b84:	b84ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012b88:	08200593          	li	a1,130
    80012b8c:	00020617          	auipc	a2,0x20
    80012b90:	83c60613          	addi	a2,a2,-1988 # 800323c8 <__func__.0+0x44e0>
    80012b94:	0001b517          	auipc	a0,0x1b
    80012b98:	64c50513          	addi	a0,a0,1612 # 8002e1e0 <__func__.0+0x2f8>
    80012b9c:	08f180ef          	jal	8002b42a <printf>
    80012ba0:	00045797          	auipc	a5,0x45
    80012ba4:	4717c783          	lbu	a5,1137(a5) # 80058011 <excpt+0x1>
    80012ba8:	0001b597          	auipc	a1,0x1b
    80012bac:	61058593          	addi	a1,a1,1552 # 8002e1b8 <__func__.0+0x2d0>
    80012bb0:	e789                	bnez	a5,80012bba <external_interrupt_VSEI+0x274>
    80012bb2:	0001b597          	auipc	a1,0x1b
    80012bb6:	5f658593          	addi	a1,a1,1526 # 8002e1a8 <__func__.0+0x2c0>
    80012bba:	0001b517          	auipc	a0,0x1b
    80012bbe:	63e50513          	addi	a0,a0,1598 # 8002e1f8 <__func__.0+0x310>
    80012bc2:	069180ef          	jal	8002b42a <printf>
    80012bc6:	00045797          	auipc	a5,0x45
    80012bca:	44b7c783          	lbu	a5,1099(a5) # 80058011 <excpt+0x1>
    80012bce:	3a079963          	bnez	a5,80012f80 <external_interrupt_VSEI+0x63a>
    80012bd2:	4529                	li	a0,10
    80012bd4:	544170ef          	jal	8002a118 <putchar>
    80012bd8:	c419                	beqz	s0,80012be6 <external_interrupt_VSEI+0x2a0>
    80012bda:	00045417          	auipc	s0,0x45
    80012bde:	43744403          	lbu	s0,1079(s0) # 80058011 <excpt+0x1>
    80012be2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80012be6:	a26ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012bea:	4511                	li	a0,4
    80012bec:	b1cee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012bf0:	40000793          	li	a5,1024
    80012bf4:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012bf8:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012bfc:	4509                	li	a0,2
    80012bfe:	b0aee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012c02:	08200593          	li	a1,130
    80012c06:	00020617          	auipc	a2,0x20
    80012c0a:	80260613          	addi	a2,a2,-2046 # 80032408 <__func__.0+0x4520>
    80012c0e:	0001b517          	auipc	a0,0x1b
    80012c12:	5d250513          	addi	a0,a0,1490 # 8002e1e0 <__func__.0+0x2f8>
    80012c16:	015180ef          	jal	8002b42a <printf>
    80012c1a:	00045797          	auipc	a5,0x45
    80012c1e:	3f77c783          	lbu	a5,1015(a5) # 80058011 <excpt+0x1>
    80012c22:	0001b597          	auipc	a1,0x1b
    80012c26:	59658593          	addi	a1,a1,1430 # 8002e1b8 <__func__.0+0x2d0>
    80012c2a:	e799                	bnez	a5,80012c38 <external_interrupt_VSEI+0x2f2>
    80012c2c:	57fd                	li	a5,-1
    80012c2e:	6498                	ld	a4,8(s1)
    80012c30:	17fe                	slli	a5,a5,0x3f
    80012c32:	07a9                	addi	a5,a5,10
    80012c34:	40f70963          	beq	a4,a5,80013046 <external_interrupt_VSEI+0x700>
    80012c38:	0001b517          	auipc	a0,0x1b
    80012c3c:	5c050513          	addi	a0,a0,1472 # 8002e1f8 <__func__.0+0x310>
    80012c40:	7ea180ef          	jal	8002b42a <printf>
    80012c44:	00045797          	auipc	a5,0x45
    80012c48:	3cd7c783          	lbu	a5,973(a5) # 80058011 <excpt+0x1>
    80012c4c:	e799                	bnez	a5,80012c5a <external_interrupt_VSEI+0x314>
    80012c4e:	57fd                	li	a5,-1
    80012c50:	6498                	ld	a4,8(s1)
    80012c52:	17fe                	slli	a5,a5,0x3f
    80012c54:	07a9                	addi	a5,a5,10
    80012c56:	2ef70263          	beq	a4,a5,80012f3a <external_interrupt_VSEI+0x5f4>
    80012c5a:	0001b517          	auipc	a0,0x1b
    80012c5e:	5a650513          	addi	a0,a0,1446 # 8002e200 <__func__.0+0x318>
    80012c62:	7c8180ef          	jal	8002b42a <printf>
    80012c66:	02900513          	li	a0,41
    80012c6a:	4ae170ef          	jal	8002a118 <putchar>
    80012c6e:	4529                	li	a0,10
    80012c70:	4a8170ef          	jal	8002a118 <putchar>
    80012c74:	c801                	beqz	s0,80012c84 <external_interrupt_VSEI+0x33e>
    80012c76:	00045797          	auipc	a5,0x45
    80012c7a:	39b7c783          	lbu	a5,923(a5) # 80058011 <excpt+0x1>
    80012c7e:	4401                	li	s0,0
    80012c80:	22078b63          	beqz	a5,80012eb6 <external_interrupt_VSEI+0x570>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80012c84:	988ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c88:	4511                	li	a0,4
    80012c8a:	a7eee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012c8e:	40000793          	li	a5,1024
    80012c92:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012c96:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012c9a:	57fd                	li	a5,-1
    80012c9c:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80012ca0:	4509                	li	a0,2
    80012ca2:	a66ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012ca6:	08200593          	li	a1,130
    80012caa:	0001f617          	auipc	a2,0x1f
    80012cae:	7ae60613          	addi	a2,a2,1966 # 80032458 <__func__.0+0x4570>
    80012cb2:	0001b517          	auipc	a0,0x1b
    80012cb6:	52e50513          	addi	a0,a0,1326 # 8002e1e0 <__func__.0+0x2f8>
    80012cba:	770180ef          	jal	8002b42a <printf>
    80012cbe:	00045797          	auipc	a5,0x45
    80012cc2:	3537c783          	lbu	a5,851(a5) # 80058011 <excpt+0x1>
    80012cc6:	0001b597          	auipc	a1,0x1b
    80012cca:	4f258593          	addi	a1,a1,1266 # 8002e1b8 <__func__.0+0x2d0>
    80012cce:	e799                	bnez	a5,80012cdc <external_interrupt_VSEI+0x396>
    80012cd0:	57fd                	li	a5,-1
    80012cd2:	6498                	ld	a4,8(s1)
    80012cd4:	17fe                	slli	a5,a5,0x3f
    80012cd6:	07a9                	addi	a5,a5,10
    80012cd8:	2af70f63          	beq	a4,a5,80012f96 <external_interrupt_VSEI+0x650>
    80012cdc:	0001b517          	auipc	a0,0x1b
    80012ce0:	51c50513          	addi	a0,a0,1308 # 8002e1f8 <__func__.0+0x310>
    80012ce4:	746180ef          	jal	8002b42a <printf>
    80012ce8:	00045797          	auipc	a5,0x45
    80012cec:	3297c783          	lbu	a5,809(a5) # 80058011 <excpt+0x1>
    80012cf0:	e799                	bnez	a5,80012cfe <external_interrupt_VSEI+0x3b8>
    80012cf2:	57fd                	li	a5,-1
    80012cf4:	6498                	ld	a4,8(s1)
    80012cf6:	17fe                	slli	a5,a5,0x3f
    80012cf8:	07a9                	addi	a5,a5,10
    80012cfa:	26f70063          	beq	a4,a5,80012f5a <external_interrupt_VSEI+0x614>
    80012cfe:	0001b517          	auipc	a0,0x1b
    80012d02:	50250513          	addi	a0,a0,1282 # 8002e200 <__func__.0+0x318>
    80012d06:	724180ef          	jal	8002b42a <printf>
    80012d0a:	02900513          	li	a0,41
    80012d0e:	40a170ef          	jal	8002a118 <putchar>
    80012d12:	4529                	li	a0,10
    80012d14:	404170ef          	jal	8002a118 <putchar>
    80012d18:	c801                	beqz	s0,80012d28 <external_interrupt_VSEI+0x3e2>
    80012d1a:	00045797          	auipc	a5,0x45
    80012d1e:	2f77c783          	lbu	a5,759(a5) # 80058011 <excpt+0x1>
    80012d22:	4401                	li	s0,0
    80012d24:	16078b63          	beqz	a5,80012e9a <external_interrupt_VSEI+0x554>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012d28:	8e4ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012d2c:	4511                	li	a0,4
    80012d2e:	9daee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012d32:	40000793          	li	a5,1024
    80012d36:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012d3a:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012d3e:	57fd                	li	a5,-1
    80012d40:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012d44:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80012d48:	4509                	li	a0,2
    80012d4a:	9beee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012d4e:	08200593          	li	a1,130
    80012d52:	0001f617          	auipc	a2,0x1f
    80012d56:	76660613          	addi	a2,a2,1894 # 800324b8 <__func__.0+0x45d0>
    80012d5a:	0001b517          	auipc	a0,0x1b
    80012d5e:	48650513          	addi	a0,a0,1158 # 8002e1e0 <__func__.0+0x2f8>
    80012d62:	6c8180ef          	jal	8002b42a <printf>
    80012d66:	00045797          	auipc	a5,0x45
    80012d6a:	2ab7c783          	lbu	a5,683(a5) # 80058011 <excpt+0x1>
    80012d6e:	0001b597          	auipc	a1,0x1b
    80012d72:	44a58593          	addi	a1,a1,1098 # 8002e1b8 <__func__.0+0x2d0>
    80012d76:	e799                	bnez	a5,80012d84 <external_interrupt_VSEI+0x43e>
    80012d78:	57fd                	li	a5,-1
    80012d7a:	6498                	ld	a4,8(s1)
    80012d7c:	17fe                	slli	a5,a5,0x3f
    80012d7e:	07a9                	addi	a5,a5,10
    80012d80:	2af70363          	beq	a4,a5,80013026 <external_interrupt_VSEI+0x6e0>
    80012d84:	0001b517          	auipc	a0,0x1b
    80012d88:	47450513          	addi	a0,a0,1140 # 8002e1f8 <__func__.0+0x310>
    80012d8c:	69e180ef          	jal	8002b42a <printf>
    80012d90:	00045797          	auipc	a5,0x45
    80012d94:	2817c783          	lbu	a5,641(a5) # 80058011 <excpt+0x1>
    80012d98:	e799                	bnez	a5,80012da6 <external_interrupt_VSEI+0x460>
    80012d9a:	57fd                	li	a5,-1
    80012d9c:	6498                	ld	a4,8(s1)
    80012d9e:	17fe                	slli	a5,a5,0x3f
    80012da0:	07a9                	addi	a5,a5,10
    80012da2:	1af70463          	beq	a4,a5,80012f4a <external_interrupt_VSEI+0x604>
    80012da6:	0001b517          	auipc	a0,0x1b
    80012daa:	45a50513          	addi	a0,a0,1114 # 8002e200 <__func__.0+0x318>
    80012dae:	67c180ef          	jal	8002b42a <printf>
    80012db2:	02900513          	li	a0,41
    80012db6:	362170ef          	jal	8002a118 <putchar>
    80012dba:	4529                	li	a0,10
    80012dbc:	35c170ef          	jal	8002a118 <putchar>
    80012dc0:	c419                	beqz	s0,80012dce <external_interrupt_VSEI+0x488>
    80012dc2:	00045797          	auipc	a5,0x45
    80012dc6:	24f7c783          	lbu	a5,591(a5) # 80058011 <excpt+0x1>
    80012dca:	4401                	li	s0,0
    80012dcc:	cbcd                	beqz	a5,80012e7e <external_interrupt_VSEI+0x538>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012dce:	83eee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012dd2:	4511                	li	a0,4
    80012dd4:	934ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012dd8:	40000793          	li	a5,1024
    80012ddc:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012de0:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012de4:	4509                	li	a0,2
    80012de6:	922ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012dea:	08200593          	li	a1,130
    80012dee:	0001f617          	auipc	a2,0x1f
    80012df2:	73a60613          	addi	a2,a2,1850 # 80032528 <__func__.0+0x4640>
    80012df6:	0001b517          	auipc	a0,0x1b
    80012dfa:	3ea50513          	addi	a0,a0,1002 # 8002e1e0 <__func__.0+0x2f8>
    80012dfe:	62c180ef          	jal	8002b42a <printf>
    80012e02:	00045797          	auipc	a5,0x45
    80012e06:	20f7c783          	lbu	a5,527(a5) # 80058011 <excpt+0x1>
    80012e0a:	0001b597          	auipc	a1,0x1b
    80012e0e:	3ae58593          	addi	a1,a1,942 # 8002e1b8 <__func__.0+0x2d0>
    80012e12:	e789                	bnez	a5,80012e1c <external_interrupt_VSEI+0x4d6>
    80012e14:	0001b597          	auipc	a1,0x1b
    80012e18:	39458593          	addi	a1,a1,916 # 8002e1a8 <__func__.0+0x2c0>
    80012e1c:	0001b517          	auipc	a0,0x1b
    80012e20:	3dc50513          	addi	a0,a0,988 # 8002e1f8 <__func__.0+0x310>
    80012e24:	606180ef          	jal	8002b42a <printf>
    80012e28:	00045797          	auipc	a5,0x45
    80012e2c:	1e97c783          	lbu	a5,489(a5) # 80058011 <excpt+0x1>
    80012e30:	12079d63          	bnez	a5,80012f6a <external_interrupt_VSEI+0x624>
    80012e34:	4529                	li	a0,10
    80012e36:	2e2170ef          	jal	8002a118 <putchar>
    80012e3a:	c411                	beqz	s0,80012e46 <external_interrupt_VSEI+0x500>
    80012e3c:	00045797          	auipc	a5,0x45
    80012e40:	1d57c783          	lbu	a5,469(a5) # 80058011 <excpt+0x1>
    80012e44:	c79d                	beqz	a5,80012e72 <external_interrupt_VSEI+0x52c>
    80012e46:	4401                	li	s0,0





    TEST_END();
    80012e48:	0001b597          	auipc	a1,0x1b
    80012e4c:	37058593          	addi	a1,a1,880 # 8002e1b8 <__func__.0+0x2d0>
    80012e50:	0001b517          	auipc	a0,0x1b
    80012e54:	41050513          	addi	a0,a0,1040 # 8002e260 <__func__.0+0x378>
    80012e58:	5d2180ef          	jal	8002b42a <printf>
    80012e5c:	4511                	li	a0,4
    80012e5e:	8aaee0ef          	jal	80000f08 <goto_priv>
    80012e62:	9c3ee0ef          	jal	80001824 <reset_state>
}
    80012e66:	60e2                	ld	ra,24(sp)
    80012e68:	8522                	mv	a0,s0
    80012e6a:	6442                	ld	s0,16(sp)
    80012e6c:	64a2                	ld	s1,8(sp)
    80012e6e:	6105                	addi	sp,sp,32
    80012e70:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012e72:	4405                	li	s0,1
    TEST_END();
    80012e74:	0001b597          	auipc	a1,0x1b
    80012e78:	33458593          	addi	a1,a1,820 # 8002e1a8 <__func__.0+0x2c0>
    80012e7c:	bfd1                	j	80012e50 <external_interrupt_VSEI+0x50a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012e7e:	57fd                	li	a5,-1
    80012e80:	6498                	ld	a4,8(s1)
    80012e82:	17fe                	slli	a5,a5,0x3f
    80012e84:	07a9                	addi	a5,a5,10
    80012e86:	f4f714e3          	bne	a4,a5,80012dce <external_interrupt_VSEI+0x488>
    80012e8a:	00045417          	auipc	s0,0x45
    80012e8e:	18a42403          	lw	s0,394(s0) # 80058014 <excpt+0x4>
    80012e92:	1479                	addi	s0,s0,-2
    80012e94:	00143413          	seqz	s0,s0
    80012e98:	bf1d                	j	80012dce <external_interrupt_VSEI+0x488>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012e9a:	57fd                	li	a5,-1
    80012e9c:	6498                	ld	a4,8(s1)
    80012e9e:	17fe                	slli	a5,a5,0x3f
    80012ea0:	07a9                	addi	a5,a5,10
    80012ea2:	e8f713e3          	bne	a4,a5,80012d28 <external_interrupt_VSEI+0x3e2>
    80012ea6:	00045417          	auipc	s0,0x45
    80012eaa:	16e42403          	lw	s0,366(s0) # 80058014 <excpt+0x4>
    80012eae:	1475                	addi	s0,s0,-3
    80012eb0:	00143413          	seqz	s0,s0
    80012eb4:	bd95                	j	80012d28 <external_interrupt_VSEI+0x3e2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012eb6:	57fd                	li	a5,-1
    80012eb8:	6498                	ld	a4,8(s1)
    80012eba:	17fe                	slli	a5,a5,0x3f
    80012ebc:	07a9                	addi	a5,a5,10
    80012ebe:	dcf713e3          	bne	a4,a5,80012c84 <external_interrupt_VSEI+0x33e>
    80012ec2:	00045417          	auipc	s0,0x45
    80012ec6:	15242403          	lw	s0,338(s0) # 80058014 <excpt+0x4>
    80012eca:	1471                	addi	s0,s0,-4
    80012ecc:	00143413          	seqz	s0,s0
    80012ed0:	bb55                	j	80012c84 <external_interrupt_VSEI+0x33e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012ed2:	57fd                	li	a5,-1
    80012ed4:	6498                	ld	a4,8(s1)
    80012ed6:	17fe                	slli	a5,a5,0x3f
    80012ed8:	07a9                	addi	a5,a5,10
    80012eda:	c8f714e3          	bne	a4,a5,80012b62 <external_interrupt_VSEI+0x21c>
    80012ede:	00045417          	auipc	s0,0x45
    80012ee2:	13642403          	lw	s0,310(s0) # 80058014 <excpt+0x4>
    80012ee6:	1479                	addi	s0,s0,-2
    80012ee8:	00143413          	seqz	s0,s0
    80012eec:	b99d                	j	80012b62 <external_interrupt_VSEI+0x21c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012eee:	57fd                	li	a5,-1
    80012ef0:	6498                	ld	a4,8(s1)
    80012ef2:	17fe                	slli	a5,a5,0x3f
    80012ef4:	07a9                	addi	a5,a5,10
    80012ef6:	bcf712e3          	bne	a4,a5,80012aba <external_interrupt_VSEI+0x174>
    80012efa:	00045417          	auipc	s0,0x45
    80012efe:	11a42403          	lw	s0,282(s0) # 80058014 <excpt+0x4>
    80012f02:	1475                	addi	s0,s0,-3
    80012f04:	00143413          	seqz	s0,s0
    80012f08:	be4d                	j	80012aba <external_interrupt_VSEI+0x174>
    80012f0a:	00045717          	auipc	a4,0x45
    80012f0e:	10a72703          	lw	a4,266(a4) # 80058014 <excpt+0x4>
    80012f12:	478d                	li	a5,3
    80012f14:	b6f71ee3          	bne	a4,a5,80012a90 <external_interrupt_VSEI+0x14a>
    80012f18:	b671                	j	80012aa4 <external_interrupt_VSEI+0x15e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012f1a:	00045717          	auipc	a4,0x45
    80012f1e:	0fa72703          	lw	a4,250(a4) # 80058014 <excpt+0x4>
    80012f22:	4789                	li	a5,2
    80012f24:	c0f71ae3          	bne	a4,a5,80012b38 <external_interrupt_VSEI+0x1f2>
    80012f28:	b115                	j	80012b4c <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f2a:	00045717          	auipc	a4,0x45
    80012f2e:	0ea72703          	lw	a4,234(a4) # 80058014 <excpt+0x4>
    80012f32:	4791                	li	a5,4
    80012f34:	aaf718e3          	bne	a4,a5,800129e4 <external_interrupt_VSEI+0x9e>
    80012f38:	b4c1                	j	800129f8 <external_interrupt_VSEI+0xb2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012f3a:	00045717          	auipc	a4,0x45
    80012f3e:	0da72703          	lw	a4,218(a4) # 80058014 <excpt+0x4>
    80012f42:	4791                	li	a5,4
    80012f44:	d0f71be3          	bne	a4,a5,80012c5a <external_interrupt_VSEI+0x314>
    80012f48:	b31d                	j	80012c6e <external_interrupt_VSEI+0x328>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012f4a:	00045717          	auipc	a4,0x45
    80012f4e:	0ca72703          	lw	a4,202(a4) # 80058014 <excpt+0x4>
    80012f52:	4789                	li	a5,2
    80012f54:	e4f719e3          	bne	a4,a5,80012da6 <external_interrupt_VSEI+0x460>
    80012f58:	b58d                	j	80012dba <external_interrupt_VSEI+0x474>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f5a:	00045717          	auipc	a4,0x45
    80012f5e:	0ba72703          	lw	a4,186(a4) # 80058014 <excpt+0x4>
    80012f62:	478d                	li	a5,3
    80012f64:	d8f71de3          	bne	a4,a5,80012cfe <external_interrupt_VSEI+0x3b8>
    80012f68:	b36d                	j	80012d12 <external_interrupt_VSEI+0x3cc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012f6a:	0001b517          	auipc	a0,0x1b
    80012f6e:	29650513          	addi	a0,a0,662 # 8002e200 <__func__.0+0x318>
    80012f72:	4b8180ef          	jal	8002b42a <printf>
    80012f76:	02900513          	li	a0,41
    80012f7a:	19e170ef          	jal	8002a118 <putchar>
    80012f7e:	bd5d                	j	80012e34 <external_interrupt_VSEI+0x4ee>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012f80:	0001b517          	auipc	a0,0x1b
    80012f84:	28050513          	addi	a0,a0,640 # 8002e200 <__func__.0+0x318>
    80012f88:	4a2180ef          	jal	8002b42a <printf>
    80012f8c:	02900513          	li	a0,41
    80012f90:	188170ef          	jal	8002a118 <putchar>
    80012f94:	b93d                	j	80012bd2 <external_interrupt_VSEI+0x28c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f96:	00045717          	auipc	a4,0x45
    80012f9a:	07e72703          	lw	a4,126(a4) # 80058014 <excpt+0x4>
    80012f9e:	478d                	li	a5,3
    80012fa0:	0001b597          	auipc	a1,0x1b
    80012fa4:	20858593          	addi	a1,a1,520 # 8002e1a8 <__func__.0+0x2c0>
    80012fa8:	d2f70ae3          	beq	a4,a5,80012cdc <external_interrupt_VSEI+0x396>
    80012fac:	0001b597          	auipc	a1,0x1b
    80012fb0:	20c58593          	addi	a1,a1,524 # 8002e1b8 <__func__.0+0x2d0>
    80012fb4:	b325                	j	80012cdc <external_interrupt_VSEI+0x396>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012fb6:	00045417          	auipc	s0,0x45
    80012fba:	05e42403          	lw	s0,94(s0) # 80058014 <excpt+0x4>
    80012fbe:	1471                	addi	s0,s0,-4
    80012fc0:	00143413          	seqz	s0,s0
    80012fc4:	bc89                	j	80012a16 <external_interrupt_VSEI+0xd0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012fc6:	00045717          	auipc	a4,0x45
    80012fca:	04e72703          	lw	a4,78(a4) # 80058014 <excpt+0x4>
    80012fce:	478d                	li	a5,3
    80012fd0:	0001b597          	auipc	a1,0x1b
    80012fd4:	1d858593          	addi	a1,a1,472 # 8002e1a8 <__func__.0+0x2c0>
    80012fd8:	a8f70be3          	beq	a4,a5,80012a6e <external_interrupt_VSEI+0x128>
    80012fdc:	0001b597          	auipc	a1,0x1b
    80012fe0:	1dc58593          	addi	a1,a1,476 # 8002e1b8 <__func__.0+0x2d0>
    80012fe4:	b469                	j	80012a6e <external_interrupt_VSEI+0x128>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012fe6:	00045717          	auipc	a4,0x45
    80012fea:	02e72703          	lw	a4,46(a4) # 80058014 <excpt+0x4>
    80012fee:	4791                	li	a5,4
    80012ff0:	0001b597          	auipc	a1,0x1b
    80012ff4:	1b858593          	addi	a1,a1,440 # 8002e1a8 <__func__.0+0x2c0>
    80012ff8:	9cf705e3          	beq	a4,a5,800129c2 <external_interrupt_VSEI+0x7c>
    80012ffc:	0001b597          	auipc	a1,0x1b
    80013000:	1bc58593          	addi	a1,a1,444 # 8002e1b8 <__func__.0+0x2d0>
    80013004:	ba7d                	j	800129c2 <external_interrupt_VSEI+0x7c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013006:	00045717          	auipc	a4,0x45
    8001300a:	00e72703          	lw	a4,14(a4) # 80058014 <excpt+0x4>
    8001300e:	4789                	li	a5,2
    80013010:	0001b597          	auipc	a1,0x1b
    80013014:	19858593          	addi	a1,a1,408 # 8002e1a8 <__func__.0+0x2c0>
    80013018:	aef70fe3          	beq	a4,a5,80012b16 <external_interrupt_VSEI+0x1d0>
    8001301c:	0001b597          	auipc	a1,0x1b
    80013020:	19c58593          	addi	a1,a1,412 # 8002e1b8 <__func__.0+0x2d0>
    80013024:	bccd                	j	80012b16 <external_interrupt_VSEI+0x1d0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013026:	00045717          	auipc	a4,0x45
    8001302a:	fee72703          	lw	a4,-18(a4) # 80058014 <excpt+0x4>
    8001302e:	4789                	li	a5,2
    80013030:	0001b597          	auipc	a1,0x1b
    80013034:	17858593          	addi	a1,a1,376 # 8002e1a8 <__func__.0+0x2c0>
    80013038:	d4f706e3          	beq	a4,a5,80012d84 <external_interrupt_VSEI+0x43e>
    8001303c:	0001b597          	auipc	a1,0x1b
    80013040:	17c58593          	addi	a1,a1,380 # 8002e1b8 <__func__.0+0x2d0>
    80013044:	b381                	j	80012d84 <external_interrupt_VSEI+0x43e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013046:	00045717          	auipc	a4,0x45
    8001304a:	fce72703          	lw	a4,-50(a4) # 80058014 <excpt+0x4>
    8001304e:	4791                	li	a5,4
    80013050:	0001b597          	auipc	a1,0x1b
    80013054:	15858593          	addi	a1,a1,344 # 8002e1a8 <__func__.0+0x2c0>
    80013058:	bef700e3          	beq	a4,a5,80012c38 <external_interrupt_VSEI+0x2f2>
    8001305c:	0001b597          	auipc	a1,0x1b
    80013060:	15c58593          	addi	a1,a1,348 # 8002e1b8 <__func__.0+0x2d0>
    80013064:	bed1                	j	80012c38 <external_interrupt_VSEI+0x2f2>

0000000080013066 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80013066:	1101                	addi	sp,sp,-32

    TEST_START();
    80013068:	0001a597          	auipc	a1,0x1a
    8001306c:	9c058593          	addi	a1,a1,-1600 # 8002ca28 <__func__.2>
    80013070:	0001b517          	auipc	a0,0x1b
    80013074:	15850513          	addi	a0,a0,344 # 8002e1c8 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    80013078:	ec06                	sd	ra,24(sp)
    8001307a:	e822                	sd	s0,16(sp)
    8001307c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001307e:	3ac180ef          	jal	8002b42a <printf>
    80013082:	4529                	li	a0,10
    80013084:	094170ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80013088:	d85ed0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8001308c:	4511                	li	a0,4
    8001308e:	e7bed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013092:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013096:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    8001309a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8001309e:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800130a2:	4511                	li	a0,4
    800130a4:	e65ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800130a8:	08200593          	li	a1,130
    800130ac:	0001f617          	auipc	a2,0x1f
    800130b0:	4cc60613          	addi	a2,a2,1228 # 80032578 <__func__.0+0x4690>
    800130b4:	0001b517          	auipc	a0,0x1b
    800130b8:	12c50513          	addi	a0,a0,300 # 8002e1e0 <__func__.0+0x2f8>
    800130bc:	36e180ef          	jal	8002b42a <printf>
    800130c0:	00045797          	auipc	a5,0x45
    800130c4:	f517c783          	lbu	a5,-175(a5) # 80058011 <excpt+0x1>
    800130c8:	00045497          	auipc	s1,0x45
    800130cc:	f4848493          	addi	s1,s1,-184 # 80058010 <excpt>
    800130d0:	0001b597          	auipc	a1,0x1b
    800130d4:	0e858593          	addi	a1,a1,232 # 8002e1b8 <__func__.0+0x2d0>
    800130d8:	c799                	beqz	a5,800130e6 <software_interrupt_msi+0x80>
    800130da:	57fd                	li	a5,-1
    800130dc:	6498                	ld	a4,8(s1)
    800130de:	17fe                	slli	a5,a5,0x3f
    800130e0:	0789                	addi	a5,a5,2
    800130e2:	4ef702e3          	beq	a4,a5,80013dc6 <software_interrupt_msi+0xd60>
    800130e6:	0001b517          	auipc	a0,0x1b
    800130ea:	11250513          	addi	a0,a0,274 # 8002e1f8 <__func__.0+0x310>
    800130ee:	33c180ef          	jal	8002b42a <printf>
    800130f2:	00045797          	auipc	a5,0x45
    800130f6:	f1f7c783          	lbu	a5,-225(a5) # 80058011 <excpt+0x1>
    800130fa:	c799                	beqz	a5,80013108 <software_interrupt_msi+0xa2>
    800130fc:	57fd                	li	a5,-1
    800130fe:	6498                	ld	a4,8(s1)
    80013100:	17fe                	slli	a5,a5,0x3f
    80013102:	0789                	addi	a5,a5,2
    80013104:	34f700e3          	beq	a4,a5,80013c44 <software_interrupt_msi+0xbde>
    80013108:	0001b517          	auipc	a0,0x1b
    8001310c:	0f850513          	addi	a0,a0,248 # 8002e200 <__func__.0+0x318>
    80013110:	31a180ef          	jal	8002b42a <printf>
    80013114:	02900513          	li	a0,41
    80013118:	000170ef          	jal	8002a118 <putchar>
    8001311c:	4529                	li	a0,10
    8001311e:	7fb160ef          	jal	8002a118 <putchar>
    80013122:	00045797          	auipc	a5,0x45
    80013126:	eef7c783          	lbu	a5,-273(a5) # 80058011 <excpt+0x1>
    8001312a:	4401                	li	s0,0
    8001312c:	c799                	beqz	a5,8001313a <software_interrupt_msi+0xd4>
    8001312e:	57fd                	li	a5,-1
    80013130:	6498                	ld	a4,8(s1)
    80013132:	17fe                	slli	a5,a5,0x3f
    80013134:	0789                	addi	a5,a5,2
    80013136:	56f70ce3          	beq	a4,a5,80013eae <software_interrupt_msi+0xe48>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001313a:	cd3ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001313e:	4511                	li	a0,4
    80013140:	dc9ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80013144:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013148:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001314c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013150:	4511                	li	a0,4
    80013152:	db7ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013156:	08200593          	li	a1,130
    8001315a:	0001f617          	auipc	a2,0x1f
    8001315e:	47e60613          	addi	a2,a2,1150 # 800325d8 <__func__.0+0x46f0>
    80013162:	0001b517          	auipc	a0,0x1b
    80013166:	07e50513          	addi	a0,a0,126 # 8002e1e0 <__func__.0+0x2f8>
    8001316a:	2c0180ef          	jal	8002b42a <printf>
    8001316e:	00045797          	auipc	a5,0x45
    80013172:	ea37c783          	lbu	a5,-349(a5) # 80058011 <excpt+0x1>
    80013176:	0001b597          	auipc	a1,0x1b
    8001317a:	04258593          	addi	a1,a1,66 # 8002e1b8 <__func__.0+0x2d0>
    8001317e:	e789                	bnez	a5,80013188 <software_interrupt_msi+0x122>
    80013180:	0001b597          	auipc	a1,0x1b
    80013184:	02858593          	addi	a1,a1,40 # 8002e1a8 <__func__.0+0x2c0>
    80013188:	0001b517          	auipc	a0,0x1b
    8001318c:	07050513          	addi	a0,a0,112 # 8002e1f8 <__func__.0+0x310>
    80013190:	29a180ef          	jal	8002b42a <printf>
    80013194:	00045797          	auipc	a5,0x45
    80013198:	e7d7c783          	lbu	a5,-387(a5) # 80058011 <excpt+0x1>
    8001319c:	320797e3          	bnez	a5,80013cca <software_interrupt_msi+0xc64>
    800131a0:	4529                	li	a0,10
    800131a2:	777160ef          	jal	8002a118 <putchar>
    800131a6:	c419                	beqz	s0,800131b4 <software_interrupt_msi+0x14e>
    800131a8:	00045417          	auipc	s0,0x45
    800131ac:	e6944403          	lbu	s0,-407(s0) # 80058011 <excpt+0x1>
    800131b0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    800131b4:	c59ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800131b8:	4511                	li	a0,4
    800131ba:	d4fed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800131be:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800131c2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800131c6:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800131ca:	4511                	li	a0,4
    800131cc:	d3ded0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    800131d0:	08200593          	li	a1,130
    800131d4:	0001f617          	auipc	a2,0x1f
    800131d8:	45c60613          	addi	a2,a2,1116 # 80032630 <__func__.0+0x4748>
    800131dc:	0001b517          	auipc	a0,0x1b
    800131e0:	00450513          	addi	a0,a0,4 # 8002e1e0 <__func__.0+0x2f8>
    800131e4:	246180ef          	jal	8002b42a <printf>
    800131e8:	00045797          	auipc	a5,0x45
    800131ec:	e297c783          	lbu	a5,-471(a5) # 80058011 <excpt+0x1>
    800131f0:	0001b597          	auipc	a1,0x1b
    800131f4:	fc858593          	addi	a1,a1,-56 # 8002e1b8 <__func__.0+0x2d0>
    800131f8:	cf99                	beqz	a5,80013216 <software_interrupt_msi+0x1b0>
    800131fa:	57fd                	li	a5,-1
    800131fc:	6498                	ld	a4,8(s1)
    800131fe:	17fe                	slli	a5,a5,0x3f
    80013200:	0789                	addi	a5,a5,2
    80013202:	0001b597          	auipc	a1,0x1b
    80013206:	fa658593          	addi	a1,a1,-90 # 8002e1a8 <__func__.0+0x2c0>
    8001320a:	00f70663          	beq	a4,a5,80013216 <software_interrupt_msi+0x1b0>
    8001320e:	0001b597          	auipc	a1,0x1b
    80013212:	faa58593          	addi	a1,a1,-86 # 8002e1b8 <__func__.0+0x2d0>
    80013216:	0001b517          	auipc	a0,0x1b
    8001321a:	fe250513          	addi	a0,a0,-30 # 8002e1f8 <__func__.0+0x310>
    8001321e:	20c180ef          	jal	8002b42a <printf>
    80013222:	00045797          	auipc	a5,0x45
    80013226:	def7c783          	lbu	a5,-529(a5) # 80058011 <excpt+0x1>
    8001322a:	c799                	beqz	a5,80013238 <software_interrupt_msi+0x1d2>
    8001322c:	57fd                	li	a5,-1
    8001322e:	6498                	ld	a4,8(s1)
    80013230:	17fe                	slli	a5,a5,0x3f
    80013232:	0789                	addi	a5,a5,2
    80013234:	00f70c63          	beq	a4,a5,8001324c <software_interrupt_msi+0x1e6>
    80013238:	0001b517          	auipc	a0,0x1b
    8001323c:	fc850513          	addi	a0,a0,-56 # 8002e200 <__func__.0+0x318>
    80013240:	1ea180ef          	jal	8002b42a <printf>
    80013244:	02900513          	li	a0,41
    80013248:	6d1160ef          	jal	8002a118 <putchar>
    8001324c:	4529                	li	a0,10
    8001324e:	6cb160ef          	jal	8002a118 <putchar>
    80013252:	c801                	beqz	s0,80013262 <software_interrupt_msi+0x1fc>
    80013254:	00045797          	auipc	a5,0x45
    80013258:	dbd7c783          	lbu	a5,-579(a5) # 80058011 <excpt+0x1>
    8001325c:	4401                	li	s0,0
    8001325e:	1c0793e3          	bnez	a5,80013c24 <software_interrupt_msi+0xbbe>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013262:	babed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013266:	4511                	li	a0,4
    80013268:	ca1ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001326c:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013270:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013274:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013278:	4511                	li	a0,4
    8001327a:	c8fed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    8001327e:	08200593          	li	a1,130
    80013282:	0001f617          	auipc	a2,0x1f
    80013286:	40e60613          	addi	a2,a2,1038 # 80032690 <__func__.0+0x47a8>
    8001328a:	0001b517          	auipc	a0,0x1b
    8001328e:	f5650513          	addi	a0,a0,-170 # 8002e1e0 <__func__.0+0x2f8>
    80013292:	198180ef          	jal	8002b42a <printf>
    80013296:	00045797          	auipc	a5,0x45
    8001329a:	d7b7c783          	lbu	a5,-645(a5) # 80058011 <excpt+0x1>
    8001329e:	0001b597          	auipc	a1,0x1b
    800132a2:	f1a58593          	addi	a1,a1,-230 # 8002e1b8 <__func__.0+0x2d0>
    800132a6:	e789                	bnez	a5,800132b0 <software_interrupt_msi+0x24a>
    800132a8:	0001b597          	auipc	a1,0x1b
    800132ac:	f0058593          	addi	a1,a1,-256 # 8002e1a8 <__func__.0+0x2c0>
    800132b0:	0001b517          	auipc	a0,0x1b
    800132b4:	f4850513          	addi	a0,a0,-184 # 8002e1f8 <__func__.0+0x310>
    800132b8:	172180ef          	jal	8002b42a <printf>
    800132bc:	00045797          	auipc	a5,0x45
    800132c0:	d557c783          	lbu	a5,-683(a5) # 80058011 <excpt+0x1>
    800132c4:	22079ae3          	bnez	a5,80013cf8 <software_interrupt_msi+0xc92>
    800132c8:	4529                	li	a0,10
    800132ca:	64f160ef          	jal	8002a118 <putchar>
    800132ce:	c419                	beqz	s0,800132dc <software_interrupt_msi+0x276>
    800132d0:	00045417          	auipc	s0,0x45
    800132d4:	d4144403          	lbu	s0,-703(s0) # 80058011 <excpt+0x1>
    800132d8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800132dc:	b31ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800132e0:	4511                	li	a0,4
    800132e2:	c27ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800132e6:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800132ea:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800132ee:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800132f2:	4511                	li	a0,4
    800132f4:	c15ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    800132f8:	08200593          	li	a1,130
    800132fc:	0001f617          	auipc	a2,0x1f
    80013300:	3e460613          	addi	a2,a2,996 # 800326e0 <__func__.0+0x47f8>
    80013304:	0001b517          	auipc	a0,0x1b
    80013308:	edc50513          	addi	a0,a0,-292 # 8002e1e0 <__func__.0+0x2f8>
    8001330c:	11e180ef          	jal	8002b42a <printf>
    80013310:	00045797          	auipc	a5,0x45
    80013314:	d017c783          	lbu	a5,-767(a5) # 80058011 <excpt+0x1>
    80013318:	0001b597          	auipc	a1,0x1b
    8001331c:	ea058593          	addi	a1,a1,-352 # 8002e1b8 <__func__.0+0x2d0>
    80013320:	e789                	bnez	a5,8001332a <software_interrupt_msi+0x2c4>
    80013322:	0001b597          	auipc	a1,0x1b
    80013326:	e8658593          	addi	a1,a1,-378 # 8002e1a8 <__func__.0+0x2c0>
    8001332a:	0001b517          	auipc	a0,0x1b
    8001332e:	ece50513          	addi	a0,a0,-306 # 8002e1f8 <__func__.0+0x310>
    80013332:	0f8180ef          	jal	8002b42a <printf>
    80013336:	00045797          	auipc	a5,0x45
    8001333a:	cdb7c783          	lbu	a5,-805(a5) # 80058011 <excpt+0x1>
    8001333e:	220797e3          	bnez	a5,80013d6c <software_interrupt_msi+0xd06>
    80013342:	4529                	li	a0,10
    80013344:	5d5160ef          	jal	8002a118 <putchar>
    80013348:	c419                	beqz	s0,80013356 <software_interrupt_msi+0x2f0>
    8001334a:	00045417          	auipc	s0,0x45
    8001334e:	cc744403          	lbu	s0,-825(s0) # 80058011 <excpt+0x1>
    80013352:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013356:	ab7ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001335a:	4511                	li	a0,4
    8001335c:	baded0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013360:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013364:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013368:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    8001336c:	4511                	li	a0,4
    8001336e:	b9bed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013372:	08200593          	li	a1,130
    80013376:	0001f617          	auipc	a2,0x1f
    8001337a:	3ba60613          	addi	a2,a2,954 # 80032730 <__func__.0+0x4848>
    8001337e:	0001b517          	auipc	a0,0x1b
    80013382:	e6250513          	addi	a0,a0,-414 # 8002e1e0 <__func__.0+0x2f8>
    80013386:	0a4180ef          	jal	8002b42a <printf>
    8001338a:	00045797          	auipc	a5,0x45
    8001338e:	c877c783          	lbu	a5,-889(a5) # 80058011 <excpt+0x1>
    80013392:	0001b597          	auipc	a1,0x1b
    80013396:	e2658593          	addi	a1,a1,-474 # 8002e1b8 <__func__.0+0x2d0>
    8001339a:	e789                	bnez	a5,800133a4 <software_interrupt_msi+0x33e>
    8001339c:	0001b597          	auipc	a1,0x1b
    800133a0:	e0c58593          	addi	a1,a1,-500 # 8002e1a8 <__func__.0+0x2c0>
    800133a4:	0001b517          	auipc	a0,0x1b
    800133a8:	e5450513          	addi	a0,a0,-428 # 8002e1f8 <__func__.0+0x310>
    800133ac:	07e180ef          	jal	8002b42a <printf>
    800133b0:	00045797          	auipc	a5,0x45
    800133b4:	c617c783          	lbu	a5,-927(a5) # 80058011 <excpt+0x1>
    800133b8:	18079ee3          	bnez	a5,80013d54 <software_interrupt_msi+0xcee>
    800133bc:	4529                	li	a0,10
    800133be:	55b160ef          	jal	8002a118 <putchar>
    800133c2:	c419                	beqz	s0,800133d0 <software_interrupt_msi+0x36a>
    800133c4:	00045417          	auipc	s0,0x45
    800133c8:	c4d44403          	lbu	s0,-947(s0) # 80058011 <excpt+0x1>
    800133cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    800133d0:	a3ded0ef          	jal	80000e0c <test_setup_except_function>
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    800133d4:	4511                	li	a0,4
    800133d6:	b33ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800133da:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800133de:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800133e2:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800133e6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800133ea:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800133ee:	450d                	li	a0,3
    800133f0:	b19ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800133f4:	08200593          	li	a1,130
    800133f8:	0001f617          	auipc	a2,0x1f
    800133fc:	38860613          	addi	a2,a2,904 # 80032780 <__func__.0+0x4898>
    80013400:	0001b517          	auipc	a0,0x1b
    80013404:	de050513          	addi	a0,a0,-544 # 8002e1e0 <__func__.0+0x2f8>
    80013408:	022180ef          	jal	8002b42a <printf>
    8001340c:	00045797          	auipc	a5,0x45
    80013410:	c057c783          	lbu	a5,-1019(a5) # 80058011 <excpt+0x1>
    80013414:	0001b597          	auipc	a1,0x1b
    80013418:	da458593          	addi	a1,a1,-604 # 8002e1b8 <__func__.0+0x2d0>
    8001341c:	c799                	beqz	a5,8001342a <software_interrupt_msi+0x3c4>
    8001341e:	57fd                	li	a5,-1
    80013420:	6498                	ld	a4,8(s1)
    80013422:	17fe                	slli	a5,a5,0x3f
    80013424:	0789                	addi	a5,a5,2
    80013426:	20f702e3          	beq	a4,a5,80013e2a <software_interrupt_msi+0xdc4>
    8001342a:	0001b517          	auipc	a0,0x1b
    8001342e:	dce50513          	addi	a0,a0,-562 # 8002e1f8 <__func__.0+0x310>
    80013432:	7f9170ef          	jal	8002b42a <printf>
    80013436:	00045797          	auipc	a5,0x45
    8001343a:	bdb7c783          	lbu	a5,-1061(a5) # 80058011 <excpt+0x1>
    8001343e:	c799                	beqz	a5,8001344c <software_interrupt_msi+0x3e6>
    80013440:	57fd                	li	a5,-1
    80013442:	6498                	ld	a4,8(s1)
    80013444:	17fe                	slli	a5,a5,0x3f
    80013446:	0789                	addi	a5,a5,2
    80013448:	04f700e3          	beq	a4,a5,80013c88 <software_interrupt_msi+0xc22>
    8001344c:	0001b517          	auipc	a0,0x1b
    80013450:	db450513          	addi	a0,a0,-588 # 8002e200 <__func__.0+0x318>
    80013454:	7d7170ef          	jal	8002b42a <printf>
    80013458:	02900513          	li	a0,41
    8001345c:	4bd160ef          	jal	8002a118 <putchar>
    80013460:	4529                	li	a0,10
    80013462:	4b7160ef          	jal	8002a118 <putchar>
    80013466:	c801                	beqz	s0,80013476 <software_interrupt_msi+0x410>
    80013468:	00045797          	auipc	a5,0x45
    8001346c:	ba97c783          	lbu	a5,-1111(a5) # 80058011 <excpt+0x1>
    80013470:	4401                	li	s0,0
    80013472:	78079a63          	bnez	a5,80013c06 <software_interrupt_msi+0xba0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80013476:	997ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001347a:	4511                	li	a0,4
    8001347c:	a8ded0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013480:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013484:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013488:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8001348c:	57fd                	li	a5,-1
    8001348e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013492:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013496:	450d                	li	a0,3
    80013498:	a71ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001349c:	08200593          	li	a1,130
    800134a0:	0001f617          	auipc	a2,0x1f
    800134a4:	34060613          	addi	a2,a2,832 # 800327e0 <__func__.0+0x48f8>
    800134a8:	0001b517          	auipc	a0,0x1b
    800134ac:	d3850513          	addi	a0,a0,-712 # 8002e1e0 <__func__.0+0x2f8>
    800134b0:	77b170ef          	jal	8002b42a <printf>
    800134b4:	00045797          	auipc	a5,0x45
    800134b8:	b5d7c783          	lbu	a5,-1187(a5) # 80058011 <excpt+0x1>
    800134bc:	0001b597          	auipc	a1,0x1b
    800134c0:	cfc58593          	addi	a1,a1,-772 # 8002e1b8 <__func__.0+0x2d0>
    800134c4:	c799                	beqz	a5,800134d2 <software_interrupt_msi+0x46c>
    800134c6:	57fd                	li	a5,-1
    800134c8:	6498                	ld	a4,8(s1)
    800134ca:	17fe                	slli	a5,a5,0x3f
    800134cc:	0789                	addi	a5,a5,2
    800134ce:	16f70fe3          	beq	a4,a5,80013e4c <software_interrupt_msi+0xde6>
    800134d2:	0001b517          	auipc	a0,0x1b
    800134d6:	d2650513          	addi	a0,a0,-730 # 8002e1f8 <__func__.0+0x310>
    800134da:	751170ef          	jal	8002b42a <printf>
    800134de:	00045797          	auipc	a5,0x45
    800134e2:	b337c783          	lbu	a5,-1229(a5) # 80058011 <excpt+0x1>
    800134e6:	c799                	beqz	a5,800134f4 <software_interrupt_msi+0x48e>
    800134e8:	57fd                	li	a5,-1
    800134ea:	6498                	ld	a4,8(s1)
    800134ec:	17fe                	slli	a5,a5,0x3f
    800134ee:	0789                	addi	a5,a5,2
    800134f0:	78f70363          	beq	a4,a5,80013c76 <software_interrupt_msi+0xc10>
    800134f4:	0001b517          	auipc	a0,0x1b
    800134f8:	d0c50513          	addi	a0,a0,-756 # 8002e200 <__func__.0+0x318>
    800134fc:	72f170ef          	jal	8002b42a <printf>
    80013500:	02900513          	li	a0,41
    80013504:	415160ef          	jal	8002a118 <putchar>
    80013508:	4529                	li	a0,10
    8001350a:	40f160ef          	jal	8002a118 <putchar>
    8001350e:	c801                	beqz	s0,8001351e <software_interrupt_msi+0x4b8>
    80013510:	00045797          	auipc	a5,0x45
    80013514:	b017c783          	lbu	a5,-1279(a5) # 80058011 <excpt+0x1>
    80013518:	4401                	li	s0,0
    8001351a:	6c079763          	bnez	a5,80013be8 <software_interrupt_msi+0xb82>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001351e:	8efed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013522:	4511                	li	a0,4
    80013524:	9e5ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013528:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001352c:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013530:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013534:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013538:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001353c:	450d                	li	a0,3
    8001353e:	9cbed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013542:	08200593          	li	a1,130
    80013546:	0001f617          	auipc	a2,0x1f
    8001354a:	30a60613          	addi	a2,a2,778 # 80032850 <__func__.0+0x4968>
    8001354e:	0001b517          	auipc	a0,0x1b
    80013552:	c9250513          	addi	a0,a0,-878 # 8002e1e0 <__func__.0+0x2f8>
    80013556:	6d5170ef          	jal	8002b42a <printf>
    8001355a:	00045797          	auipc	a5,0x45
    8001355e:	ab77c783          	lbu	a5,-1353(a5) # 80058011 <excpt+0x1>
    80013562:	0001b597          	auipc	a1,0x1b
    80013566:	c5658593          	addi	a1,a1,-938 # 8002e1b8 <__func__.0+0x2d0>
    8001356a:	e789                	bnez	a5,80013574 <software_interrupt_msi+0x50e>
    8001356c:	0001b597          	auipc	a1,0x1b
    80013570:	c3c58593          	addi	a1,a1,-964 # 8002e1a8 <__func__.0+0x2c0>
    80013574:	0001b517          	auipc	a0,0x1b
    80013578:	c8450513          	addi	a0,a0,-892 # 8002e1f8 <__func__.0+0x310>
    8001357c:	6af170ef          	jal	8002b42a <printf>
    80013580:	00045797          	auipc	a5,0x45
    80013584:	a917c783          	lbu	a5,-1391(a5) # 80058011 <excpt+0x1>
    80013588:	7a079a63          	bnez	a5,80013d3c <software_interrupt_msi+0xcd6>
    8001358c:	4529                	li	a0,10
    8001358e:	38b160ef          	jal	8002a118 <putchar>
    80013592:	c419                	beqz	s0,800135a0 <software_interrupt_msi+0x53a>
    80013594:	00045417          	auipc	s0,0x45
    80013598:	a7d44403          	lbu	s0,-1411(s0) # 80058011 <excpt+0x1>
    8001359c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800135a0:	86ded0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800135a4:	4511                	li	a0,4
    800135a6:	963ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800135aa:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800135ae:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800135b2:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800135b6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800135ba:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800135be:	450d                	li	a0,3
    800135c0:	949ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800135c4:	08200593          	li	a1,130
    800135c8:	0001f617          	auipc	a2,0x1f
    800135cc:	2f060613          	addi	a2,a2,752 # 800328b8 <__func__.0+0x49d0>
    800135d0:	0001b517          	auipc	a0,0x1b
    800135d4:	c1050513          	addi	a0,a0,-1008 # 8002e1e0 <__func__.0+0x2f8>
    800135d8:	653170ef          	jal	8002b42a <printf>
    800135dc:	00045797          	auipc	a5,0x45
    800135e0:	a357c783          	lbu	a5,-1483(a5) # 80058011 <excpt+0x1>
    800135e4:	0001b597          	auipc	a1,0x1b
    800135e8:	bd458593          	addi	a1,a1,-1068 # 8002e1b8 <__func__.0+0x2d0>
    800135ec:	c799                	beqz	a5,800135fa <software_interrupt_msi+0x594>
    800135ee:	57fd                	li	a5,-1
    800135f0:	6498                	ld	a4,8(s1)
    800135f2:	17fe                	slli	a5,a5,0x3f
    800135f4:	0789                	addi	a5,a5,2
    800135f6:	7ef70963          	beq	a4,a5,80013de8 <software_interrupt_msi+0xd82>
    800135fa:	0001b517          	auipc	a0,0x1b
    800135fe:	bfe50513          	addi	a0,a0,-1026 # 8002e1f8 <__func__.0+0x310>
    80013602:	629170ef          	jal	8002b42a <printf>
    80013606:	00045797          	auipc	a5,0x45
    8001360a:	a0b7c783          	lbu	a5,-1525(a5) # 80058011 <excpt+0x1>
    8001360e:	c799                	beqz	a5,8001361c <software_interrupt_msi+0x5b6>
    80013610:	57fd                	li	a5,-1
    80013612:	6498                	ld	a4,8(s1)
    80013614:	17fe                	slli	a5,a5,0x3f
    80013616:	0789                	addi	a5,a5,2
    80013618:	68f70963          	beq	a4,a5,80013caa <software_interrupt_msi+0xc44>
    8001361c:	0001b517          	auipc	a0,0x1b
    80013620:	be450513          	addi	a0,a0,-1052 # 8002e200 <__func__.0+0x318>
    80013624:	607170ef          	jal	8002b42a <printf>
    80013628:	02900513          	li	a0,41
    8001362c:	2ed160ef          	jal	8002a118 <putchar>
    80013630:	4529                	li	a0,10
    80013632:	2e7160ef          	jal	8002a118 <putchar>
    80013636:	c801                	beqz	s0,80013646 <software_interrupt_msi+0x5e0>
    80013638:	00045797          	auipc	a5,0x45
    8001363c:	9d97c783          	lbu	a5,-1575(a5) # 80058011 <excpt+0x1>
    80013640:	4401                	li	s0,0
    80013642:	58079563          	bnez	a5,80013bcc <software_interrupt_msi+0xb66>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80013646:	fc6ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001364a:	4511                	li	a0,4
    8001364c:	8bded0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013650:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013654:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013658:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    8001365c:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80013660:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013664:	450d                	li	a0,3
    80013666:	8a3ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8001366a:	08200593          	li	a1,130
    8001366e:	0001f617          	auipc	a2,0x1f
    80013672:	2ba60613          	addi	a2,a2,698 # 80032928 <__func__.0+0x4a40>
    80013676:	0001b517          	auipc	a0,0x1b
    8001367a:	b6a50513          	addi	a0,a0,-1174 # 8002e1e0 <__func__.0+0x2f8>
    8001367e:	5ad170ef          	jal	8002b42a <printf>
    80013682:	00045797          	auipc	a5,0x45
    80013686:	98f7c783          	lbu	a5,-1649(a5) # 80058011 <excpt+0x1>
    8001368a:	0001b597          	auipc	a1,0x1b
    8001368e:	b2e58593          	addi	a1,a1,-1234 # 8002e1b8 <__func__.0+0x2d0>
    80013692:	c799                	beqz	a5,800136a0 <software_interrupt_msi+0x63a>
    80013694:	57fd                	li	a5,-1
    80013696:	6498                	ld	a4,8(s1)
    80013698:	17fe                	slli	a5,a5,0x3f
    8001369a:	0789                	addi	a5,a5,2
    8001369c:	6ef70463          	beq	a4,a5,80013d84 <software_interrupt_msi+0xd1e>
    800136a0:	0001b517          	auipc	a0,0x1b
    800136a4:	b5850513          	addi	a0,a0,-1192 # 8002e1f8 <__func__.0+0x310>
    800136a8:	583170ef          	jal	8002b42a <printf>
    800136ac:	00045797          	auipc	a5,0x45
    800136b0:	9657c783          	lbu	a5,-1691(a5) # 80058011 <excpt+0x1>
    800136b4:	c799                	beqz	a5,800136c2 <software_interrupt_msi+0x65c>
    800136b6:	57fd                	li	a5,-1
    800136b8:	6498                	ld	a4,8(s1)
    800136ba:	17fe                	slli	a5,a5,0x3f
    800136bc:	0789                	addi	a5,a5,2
    800136be:	5ef70e63          	beq	a4,a5,80013cba <software_interrupt_msi+0xc54>
    800136c2:	0001b517          	auipc	a0,0x1b
    800136c6:	b3e50513          	addi	a0,a0,-1218 # 8002e200 <__func__.0+0x318>
    800136ca:	561170ef          	jal	8002b42a <printf>
    800136ce:	02900513          	li	a0,41
    800136d2:	247160ef          	jal	8002a118 <putchar>
    800136d6:	4529                	li	a0,10
    800136d8:	241160ef          	jal	8002a118 <putchar>
    800136dc:	c801                	beqz	s0,800136ec <software_interrupt_msi+0x686>
    800136de:	00045797          	auipc	a5,0x45
    800136e2:	9337c783          	lbu	a5,-1741(a5) # 80058011 <excpt+0x1>
    800136e6:	4401                	li	s0,0
    800136e8:	4c079463          	bnez	a5,80013bb0 <software_interrupt_msi+0xb4a>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800136ec:	f20ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800136f0:	4511                	li	a0,4
    800136f2:	817ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800136f6:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800136fa:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800136fe:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013702:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013706:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001370a:	450d                	li	a0,3
    8001370c:	ffced0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013710:	08200593          	li	a1,130
    80013714:	0001f617          	auipc	a2,0x1f
    80013718:	28460613          	addi	a2,a2,644 # 80032998 <__func__.0+0x4ab0>
    8001371c:	0001b517          	auipc	a0,0x1b
    80013720:	ac450513          	addi	a0,a0,-1340 # 8002e1e0 <__func__.0+0x2f8>
    80013724:	507170ef          	jal	8002b42a <printf>
    80013728:	00045797          	auipc	a5,0x45
    8001372c:	8e97c783          	lbu	a5,-1815(a5) # 80058011 <excpt+0x1>
    80013730:	0001b597          	auipc	a1,0x1b
    80013734:	a8858593          	addi	a1,a1,-1400 # 8002e1b8 <__func__.0+0x2d0>
    80013738:	e789                	bnez	a5,80013742 <software_interrupt_msi+0x6dc>
    8001373a:	0001b597          	auipc	a1,0x1b
    8001373e:	a6e58593          	addi	a1,a1,-1426 # 8002e1a8 <__func__.0+0x2c0>
    80013742:	0001b517          	auipc	a0,0x1b
    80013746:	ab650513          	addi	a0,a0,-1354 # 8002e1f8 <__func__.0+0x310>
    8001374a:	4e1170ef          	jal	8002b42a <printf>
    8001374e:	00045797          	auipc	a5,0x45
    80013752:	8c37c783          	lbu	a5,-1853(a5) # 80058011 <excpt+0x1>
    80013756:	5c079863          	bnez	a5,80013d26 <software_interrupt_msi+0xcc0>
    8001375a:	4529                	li	a0,10
    8001375c:	1bd160ef          	jal	8002a118 <putchar>
    80013760:	c419                	beqz	s0,8001376e <software_interrupt_msi+0x708>
    80013762:	00045417          	auipc	s0,0x45
    80013766:	8af44403          	lbu	s0,-1873(s0) # 80058011 <excpt+0x1>
    8001376a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    8001376e:	e9eed0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80013772:	4511                	li	a0,4
    80013774:	f94ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013778:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001377c:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013780:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013784:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013788:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001378c:	4509                	li	a0,2
    8001378e:	f7aed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013792:	08200593          	li	a1,130
    80013796:	0001f617          	auipc	a2,0x1f
    8001379a:	26260613          	addi	a2,a2,610 # 800329f8 <__func__.0+0x4b10>
    8001379e:	0001b517          	auipc	a0,0x1b
    800137a2:	a4250513          	addi	a0,a0,-1470 # 8002e1e0 <__func__.0+0x2f8>
    800137a6:	485170ef          	jal	8002b42a <printf>
    800137aa:	00045797          	auipc	a5,0x45
    800137ae:	8677c783          	lbu	a5,-1945(a5) # 80058011 <excpt+0x1>
    800137b2:	0001b597          	auipc	a1,0x1b
    800137b6:	a0658593          	addi	a1,a1,-1530 # 8002e1b8 <__func__.0+0x2d0>
    800137ba:	c799                	beqz	a5,800137c8 <software_interrupt_msi+0x762>
    800137bc:	57fd                	li	a5,-1
    800137be:	6498                	ld	a4,8(s1)
    800137c0:	17fe                	slli	a5,a5,0x3f
    800137c2:	0789                	addi	a5,a5,2
    800137c4:	64f70363          	beq	a4,a5,80013e0a <software_interrupt_msi+0xda4>
    800137c8:	0001b517          	auipc	a0,0x1b
    800137cc:	a3050513          	addi	a0,a0,-1488 # 8002e1f8 <__func__.0+0x310>
    800137d0:	45b170ef          	jal	8002b42a <printf>
    800137d4:	00045797          	auipc	a5,0x45
    800137d8:	83d7c783          	lbu	a5,-1987(a5) # 80058011 <excpt+0x1>
    800137dc:	c799                	beqz	a5,800137ea <software_interrupt_msi+0x784>
    800137de:	57fd                	li	a5,-1
    800137e0:	6498                	ld	a4,8(s1)
    800137e2:	17fe                	slli	a5,a5,0x3f
    800137e4:	0789                	addi	a5,a5,2
    800137e6:	4af70a63          	beq	a4,a5,80013c9a <software_interrupt_msi+0xc34>
    800137ea:	0001b517          	auipc	a0,0x1b
    800137ee:	a1650513          	addi	a0,a0,-1514 # 8002e200 <__func__.0+0x318>
    800137f2:	439170ef          	jal	8002b42a <printf>
    800137f6:	02900513          	li	a0,41
    800137fa:	11f160ef          	jal	8002a118 <putchar>
    800137fe:	4529                	li	a0,10
    80013800:	119160ef          	jal	8002a118 <putchar>
    80013804:	c801                	beqz	s0,80013814 <software_interrupt_msi+0x7ae>
    80013806:	00045797          	auipc	a5,0x45
    8001380a:	80b7c783          	lbu	a5,-2037(a5) # 80058011 <excpt+0x1>
    8001380e:	4401                	li	s0,0
    80013810:	38079263          	bnez	a5,80013b94 <software_interrupt_msi+0xb2e>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80013814:	df8ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013818:	4511                	li	a0,4
    8001381a:	eeeed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001381e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013822:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013826:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8001382a:	57fd                	li	a5,-1
    8001382c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013830:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013834:	4509                	li	a0,2
    80013836:	ed2ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001383a:	08200593          	li	a1,130
    8001383e:	0001f617          	auipc	a2,0x1f
    80013842:	21a60613          	addi	a2,a2,538 # 80032a58 <__func__.0+0x4b70>
    80013846:	0001b517          	auipc	a0,0x1b
    8001384a:	99a50513          	addi	a0,a0,-1638 # 8002e1e0 <__func__.0+0x2f8>
    8001384e:	3dd170ef          	jal	8002b42a <printf>
    80013852:	00044797          	auipc	a5,0x44
    80013856:	7bf7c783          	lbu	a5,1983(a5) # 80058011 <excpt+0x1>
    8001385a:	0001b597          	auipc	a1,0x1b
    8001385e:	95e58593          	addi	a1,a1,-1698 # 8002e1b8 <__func__.0+0x2d0>
    80013862:	c799                	beqz	a5,80013870 <software_interrupt_msi+0x80a>
    80013864:	57fd                	li	a5,-1
    80013866:	6498                	ld	a4,8(s1)
    80013868:	17fe                	slli	a5,a5,0x3f
    8001386a:	0789                	addi	a5,a5,2
    8001386c:	62f70163          	beq	a4,a5,80013e8e <software_interrupt_msi+0xe28>
    80013870:	0001b517          	auipc	a0,0x1b
    80013874:	98850513          	addi	a0,a0,-1656 # 8002e1f8 <__func__.0+0x310>
    80013878:	3b3170ef          	jal	8002b42a <printf>
    8001387c:	00044797          	auipc	a5,0x44
    80013880:	7957c783          	lbu	a5,1941(a5) # 80058011 <excpt+0x1>
    80013884:	c799                	beqz	a5,80013892 <software_interrupt_msi+0x82c>
    80013886:	57fd                	li	a5,-1
    80013888:	6498                	ld	a4,8(s1)
    8001388a:	17fe                	slli	a5,a5,0x3f
    8001388c:	0789                	addi	a5,a5,2
    8001388e:	3cf70463          	beq	a4,a5,80013c56 <software_interrupt_msi+0xbf0>
    80013892:	0001b517          	auipc	a0,0x1b
    80013896:	96e50513          	addi	a0,a0,-1682 # 8002e200 <__func__.0+0x318>
    8001389a:	391170ef          	jal	8002b42a <printf>
    8001389e:	02900513          	li	a0,41
    800138a2:	077160ef          	jal	8002a118 <putchar>
    800138a6:	4529                	li	a0,10
    800138a8:	071160ef          	jal	8002a118 <putchar>
    800138ac:	c801                	beqz	s0,800138bc <software_interrupt_msi+0x856>
    800138ae:	00044797          	auipc	a5,0x44
    800138b2:	7637c783          	lbu	a5,1891(a5) # 80058011 <excpt+0x1>
    800138b6:	4401                	li	s0,0
    800138b8:	2c079063          	bnez	a5,80013b78 <software_interrupt_msi+0xb12>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    800138bc:	d50ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800138c0:	4511                	li	a0,4
    800138c2:	e46ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800138c6:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800138ca:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800138ce:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800138d2:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800138d6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800138da:	4509                	li	a0,2
    800138dc:	e2ced0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800138e0:	08200593          	li	a1,130
    800138e4:	0001f617          	auipc	a2,0x1f
    800138e8:	1e460613          	addi	a2,a2,484 # 80032ac8 <__func__.0+0x4be0>
    800138ec:	0001b517          	auipc	a0,0x1b
    800138f0:	8f450513          	addi	a0,a0,-1804 # 8002e1e0 <__func__.0+0x2f8>
    800138f4:	337170ef          	jal	8002b42a <printf>
    800138f8:	00044797          	auipc	a5,0x44
    800138fc:	7197c783          	lbu	a5,1817(a5) # 80058011 <excpt+0x1>
    80013900:	0001b597          	auipc	a1,0x1b
    80013904:	8b858593          	addi	a1,a1,-1864 # 8002e1b8 <__func__.0+0x2d0>
    80013908:	e789                	bnez	a5,80013912 <software_interrupt_msi+0x8ac>
    8001390a:	0001b597          	auipc	a1,0x1b
    8001390e:	89e58593          	addi	a1,a1,-1890 # 8002e1a8 <__func__.0+0x2c0>
    80013912:	0001b517          	auipc	a0,0x1b
    80013916:	8e650513          	addi	a0,a0,-1818 # 8002e1f8 <__func__.0+0x310>
    8001391a:	311170ef          	jal	8002b42a <printf>
    8001391e:	00044797          	auipc	a5,0x44
    80013922:	6f37c783          	lbu	a5,1779(a5) # 80058011 <excpt+0x1>
    80013926:	3a079e63          	bnez	a5,80013ce2 <software_interrupt_msi+0xc7c>
    8001392a:	4529                	li	a0,10
    8001392c:	7ec160ef          	jal	8002a118 <putchar>
    80013930:	c419                	beqz	s0,8001393e <software_interrupt_msi+0x8d8>
    80013932:	00044417          	auipc	s0,0x44
    80013936:	6df44403          	lbu	s0,1759(s0) # 80058011 <excpt+0x1>
    8001393a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001393e:	cceed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013942:	4511                	li	a0,4
    80013944:	dc4ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013948:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001394c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013950:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013954:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013958:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001395c:	4509                	li	a0,2
    8001395e:	daaed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013962:	08200593          	li	a1,130
    80013966:	0001f617          	auipc	a2,0x1f
    8001396a:	1ca60613          	addi	a2,a2,458 # 80032b30 <__func__.0+0x4c48>
    8001396e:	0001b517          	auipc	a0,0x1b
    80013972:	87250513          	addi	a0,a0,-1934 # 8002e1e0 <__func__.0+0x2f8>
    80013976:	2b5170ef          	jal	8002b42a <printf>
    8001397a:	00044797          	auipc	a5,0x44
    8001397e:	6977c783          	lbu	a5,1687(a5) # 80058011 <excpt+0x1>
    80013982:	0001b597          	auipc	a1,0x1b
    80013986:	83658593          	addi	a1,a1,-1994 # 8002e1b8 <__func__.0+0x2d0>
    8001398a:	c799                	beqz	a5,80013998 <software_interrupt_msi+0x932>
    8001398c:	57fd                	li	a5,-1
    8001398e:	6498                	ld	a4,8(s1)
    80013990:	17fe                	slli	a5,a5,0x3f
    80013992:	0789                	addi	a5,a5,2
    80013994:	40f70963          	beq	a4,a5,80013da6 <software_interrupt_msi+0xd40>
    80013998:	0001b517          	auipc	a0,0x1b
    8001399c:	86050513          	addi	a0,a0,-1952 # 8002e1f8 <__func__.0+0x310>
    800139a0:	28b170ef          	jal	8002b42a <printf>
    800139a4:	00044797          	auipc	a5,0x44
    800139a8:	66d7c783          	lbu	a5,1645(a5) # 80058011 <excpt+0x1>
    800139ac:	c799                	beqz	a5,800139ba <software_interrupt_msi+0x954>
    800139ae:	57fd                	li	a5,-1
    800139b0:	6498                	ld	a4,8(s1)
    800139b2:	17fe                	slli	a5,a5,0x3f
    800139b4:	0789                	addi	a5,a5,2
    800139b6:	26f70f63          	beq	a4,a5,80013c34 <software_interrupt_msi+0xbce>
    800139ba:	0001b517          	auipc	a0,0x1b
    800139be:	84650513          	addi	a0,a0,-1978 # 8002e200 <__func__.0+0x318>
    800139c2:	269170ef          	jal	8002b42a <printf>
    800139c6:	02900513          	li	a0,41
    800139ca:	74e160ef          	jal	8002a118 <putchar>
    800139ce:	4529                	li	a0,10
    800139d0:	748160ef          	jal	8002a118 <putchar>
    800139d4:	c801                	beqz	s0,800139e4 <software_interrupt_msi+0x97e>
    800139d6:	00044797          	auipc	a5,0x44
    800139da:	63b7c783          	lbu	a5,1595(a5) # 80058011 <excpt+0x1>
    800139de:	4401                	li	s0,0
    800139e0:	16079e63          	bnez	a5,80013b5c <software_interrupt_msi+0xaf6>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800139e4:	c28ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800139e8:	4511                	li	a0,4
    800139ea:	d1eed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800139ee:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800139f2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800139f6:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    800139fa:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    800139fe:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013a02:	4509                	li	a0,2
    80013a04:	d04ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013a08:	08200593          	li	a1,130
    80013a0c:	0001f617          	auipc	a2,0x1f
    80013a10:	19460613          	addi	a2,a2,404 # 80032ba0 <__func__.0+0x4cb8>
    80013a14:	0001a517          	auipc	a0,0x1a
    80013a18:	7cc50513          	addi	a0,a0,1996 # 8002e1e0 <__func__.0+0x2f8>
    80013a1c:	20f170ef          	jal	8002b42a <printf>
    80013a20:	00044797          	auipc	a5,0x44
    80013a24:	5f17c783          	lbu	a5,1521(a5) # 80058011 <excpt+0x1>
    80013a28:	0001a597          	auipc	a1,0x1a
    80013a2c:	79058593          	addi	a1,a1,1936 # 8002e1b8 <__func__.0+0x2d0>
    80013a30:	c799                	beqz	a5,80013a3e <software_interrupt_msi+0x9d8>
    80013a32:	57fd                	li	a5,-1
    80013a34:	6498                	ld	a4,8(s1)
    80013a36:	17fe                	slli	a5,a5,0x3f
    80013a38:	0789                	addi	a5,a5,2
    80013a3a:	42f70a63          	beq	a4,a5,80013e6e <software_interrupt_msi+0xe08>
    80013a3e:	0001a517          	auipc	a0,0x1a
    80013a42:	7ba50513          	addi	a0,a0,1978 # 8002e1f8 <__func__.0+0x310>
    80013a46:	1e5170ef          	jal	8002b42a <printf>
    80013a4a:	00044797          	auipc	a5,0x44
    80013a4e:	5c77c783          	lbu	a5,1479(a5) # 80058011 <excpt+0x1>
    80013a52:	c799                	beqz	a5,80013a60 <software_interrupt_msi+0x9fa>
    80013a54:	57fd                	li	a5,-1
    80013a56:	6498                	ld	a4,8(s1)
    80013a58:	17fe                	slli	a5,a5,0x3f
    80013a5a:	0789                	addi	a5,a5,2
    80013a5c:	20f70563          	beq	a4,a5,80013c66 <software_interrupt_msi+0xc00>
    80013a60:	0001a517          	auipc	a0,0x1a
    80013a64:	7a050513          	addi	a0,a0,1952 # 8002e200 <__func__.0+0x318>
    80013a68:	1c3170ef          	jal	8002b42a <printf>
    80013a6c:	02900513          	li	a0,41
    80013a70:	6a8160ef          	jal	8002a118 <putchar>
    80013a74:	4529                	li	a0,10
    80013a76:	6a2160ef          	jal	8002a118 <putchar>
    80013a7a:	c419                	beqz	s0,80013a88 <software_interrupt_msi+0xa22>
    80013a7c:	00044797          	auipc	a5,0x44
    80013a80:	5957c783          	lbu	a5,1429(a5) # 80058011 <excpt+0x1>
    80013a84:	4401                	li	s0,0
    80013a86:	efcd                	bnez	a5,80013b40 <software_interrupt_msi+0xada>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80013a88:	b84ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013a8c:	4511                	li	a0,4
    80013a8e:	c7aed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80013a92:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013a96:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013a9a:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013a9e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013aa2:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013aa6:	4509                	li	a0,2
    80013aa8:	c60ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013aac:	08200593          	li	a1,130
    80013ab0:	0001f617          	auipc	a2,0x1f
    80013ab4:	16060613          	addi	a2,a2,352 # 80032c10 <__func__.0+0x4d28>
    80013ab8:	0001a517          	auipc	a0,0x1a
    80013abc:	72850513          	addi	a0,a0,1832 # 8002e1e0 <__func__.0+0x2f8>
    80013ac0:	16b170ef          	jal	8002b42a <printf>
    80013ac4:	00044797          	auipc	a5,0x44
    80013ac8:	54d7c783          	lbu	a5,1357(a5) # 80058011 <excpt+0x1>
    80013acc:	0001a597          	auipc	a1,0x1a
    80013ad0:	6ec58593          	addi	a1,a1,1772 # 8002e1b8 <__func__.0+0x2d0>
    80013ad4:	e789                	bnez	a5,80013ade <software_interrupt_msi+0xa78>
    80013ad6:	0001a597          	auipc	a1,0x1a
    80013ada:	6d258593          	addi	a1,a1,1746 # 8002e1a8 <__func__.0+0x2c0>
    80013ade:	0001a517          	auipc	a0,0x1a
    80013ae2:	71a50513          	addi	a0,a0,1818 # 8002e1f8 <__func__.0+0x310>
    80013ae6:	145170ef          	jal	8002b42a <printf>
    80013aea:	00044797          	auipc	a5,0x44
    80013aee:	5277c783          	lbu	a5,1319(a5) # 80058011 <excpt+0x1>
    80013af2:	20079f63          	bnez	a5,80013d10 <software_interrupt_msi+0xcaa>
    80013af6:	4529                	li	a0,10
    80013af8:	620160ef          	jal	8002a118 <putchar>
    80013afc:	c411                	beqz	s0,80013b08 <software_interrupt_msi+0xaa2>
    80013afe:	00044797          	auipc	a5,0x44
    80013b02:	5137c783          	lbu	a5,1299(a5) # 80058011 <excpt+0x1>
    80013b06:	c79d                	beqz	a5,80013b34 <software_interrupt_msi+0xace>
    80013b08:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013b0a:	0001a597          	auipc	a1,0x1a
    80013b0e:	6ae58593          	addi	a1,a1,1710 # 8002e1b8 <__func__.0+0x2d0>
    80013b12:	0001a517          	auipc	a0,0x1a
    80013b16:	74e50513          	addi	a0,a0,1870 # 8002e260 <__func__.0+0x378>
    80013b1a:	111170ef          	jal	8002b42a <printf>
    80013b1e:	4511                	li	a0,4
    80013b20:	be8ed0ef          	jal	80000f08 <goto_priv>
    80013b24:	d01ed0ef          	jal	80001824 <reset_state>
}
    80013b28:	60e2                	ld	ra,24(sp)
    80013b2a:	8522                	mv	a0,s0
    80013b2c:	6442                	ld	s0,16(sp)
    80013b2e:	64a2                	ld	s1,8(sp)
    80013b30:	6105                	addi	sp,sp,32
    80013b32:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013b34:	4405                	li	s0,1
    TEST_END();
    80013b36:	0001a597          	auipc	a1,0x1a
    80013b3a:	67258593          	addi	a1,a1,1650 # 8002e1a8 <__func__.0+0x2c0>
    80013b3e:	bfd1                	j	80013b12 <software_interrupt_msi+0xaac>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013b40:	57fd                	li	a5,-1
    80013b42:	6498                	ld	a4,8(s1)
    80013b44:	17fe                	slli	a5,a5,0x3f
    80013b46:	0789                	addi	a5,a5,2
    80013b48:	f4f710e3          	bne	a4,a5,80013a88 <software_interrupt_msi+0xa22>
    80013b4c:	00044417          	auipc	s0,0x44
    80013b50:	4c842403          	lw	s0,1224(s0) # 80058014 <excpt+0x4>
    80013b54:	1475                	addi	s0,s0,-3
    80013b56:	00143413          	seqz	s0,s0
    80013b5a:	b73d                	j	80013a88 <software_interrupt_msi+0xa22>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013b5c:	57fd                	li	a5,-1
    80013b5e:	6498                	ld	a4,8(s1)
    80013b60:	17fe                	slli	a5,a5,0x3f
    80013b62:	0789                	addi	a5,a5,2
    80013b64:	e8f710e3          	bne	a4,a5,800139e4 <software_interrupt_msi+0x97e>
    80013b68:	00044417          	auipc	s0,0x44
    80013b6c:	4ac42403          	lw	s0,1196(s0) # 80058014 <excpt+0x4>
    80013b70:	1471                	addi	s0,s0,-4
    80013b72:	00143413          	seqz	s0,s0
    80013b76:	b5bd                	j	800139e4 <software_interrupt_msi+0x97e>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013b78:	57fd                	li	a5,-1
    80013b7a:	6498                	ld	a4,8(s1)
    80013b7c:	17fe                	slli	a5,a5,0x3f
    80013b7e:	0789                	addi	a5,a5,2
    80013b80:	d2f71ee3          	bne	a4,a5,800138bc <software_interrupt_msi+0x856>
    80013b84:	00044417          	auipc	s0,0x44
    80013b88:	49042403          	lw	s0,1168(s0) # 80058014 <excpt+0x4>
    80013b8c:	1475                	addi	s0,s0,-3
    80013b8e:	00143413          	seqz	s0,s0
    80013b92:	b32d                	j	800138bc <software_interrupt_msi+0x856>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b94:	57fd                	li	a5,-1
    80013b96:	6498                	ld	a4,8(s1)
    80013b98:	17fe                	slli	a5,a5,0x3f
    80013b9a:	0789                	addi	a5,a5,2
    80013b9c:	c6f71ce3          	bne	a4,a5,80013814 <software_interrupt_msi+0x7ae>
    80013ba0:	00044417          	auipc	s0,0x44
    80013ba4:	47442403          	lw	s0,1140(s0) # 80058014 <excpt+0x4>
    80013ba8:	1471                	addi	s0,s0,-4
    80013baa:	00143413          	seqz	s0,s0
    80013bae:	b19d                	j	80013814 <software_interrupt_msi+0x7ae>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013bb0:	57fd                	li	a5,-1
    80013bb2:	6498                	ld	a4,8(s1)
    80013bb4:	17fe                	slli	a5,a5,0x3f
    80013bb6:	0789                	addi	a5,a5,2
    80013bb8:	b2f71ae3          	bne	a4,a5,800136ec <software_interrupt_msi+0x686>
    80013bbc:	00044417          	auipc	s0,0x44
    80013bc0:	45842403          	lw	s0,1112(s0) # 80058014 <excpt+0x4>
    80013bc4:	1475                	addi	s0,s0,-3
    80013bc6:	00143413          	seqz	s0,s0
    80013bca:	b60d                	j	800136ec <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013bcc:	57fd                	li	a5,-1
    80013bce:	6498                	ld	a4,8(s1)
    80013bd0:	17fe                	slli	a5,a5,0x3f
    80013bd2:	0789                	addi	a5,a5,2
    80013bd4:	a6f719e3          	bne	a4,a5,80013646 <software_interrupt_msi+0x5e0>
    80013bd8:	00044417          	auipc	s0,0x44
    80013bdc:	43c42403          	lw	s0,1084(s0) # 80058014 <excpt+0x4>
    80013be0:	1471                	addi	s0,s0,-4
    80013be2:	00143413          	seqz	s0,s0
    80013be6:	b485                	j	80013646 <software_interrupt_msi+0x5e0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013be8:	57fd                	li	a5,-1
    80013bea:	6498                	ld	a4,8(s1)
    80013bec:	17fe                	slli	a5,a5,0x3f
    80013bee:	0789                	addi	a5,a5,2
    80013bf0:	92f717e3          	bne	a4,a5,8001351e <software_interrupt_msi+0x4b8>
    80013bf4:	00044417          	auipc	s0,0x44
    80013bf8:	42042403          	lw	s0,1056(s0) # 80058014 <excpt+0x4>
    80013bfc:	1475                	addi	s0,s0,-3
    80013bfe:	00143413          	seqz	s0,s0
    80013c02:	91dff06f          	j	8001351e <software_interrupt_msi+0x4b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c06:	57fd                	li	a5,-1
    80013c08:	6498                	ld	a4,8(s1)
    80013c0a:	17fe                	slli	a5,a5,0x3f
    80013c0c:	0789                	addi	a5,a5,2
    80013c0e:	86f714e3          	bne	a4,a5,80013476 <software_interrupt_msi+0x410>
    80013c12:	00044417          	auipc	s0,0x44
    80013c16:	40242403          	lw	s0,1026(s0) # 80058014 <excpt+0x4>
    80013c1a:	1471                	addi	s0,s0,-4
    80013c1c:	00143413          	seqz	s0,s0
    80013c20:	857ff06f          	j	80013476 <software_interrupt_msi+0x410>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013c24:	6480                	ld	s0,8(s1)
    80013c26:	57f5                	li	a5,-3
    80013c28:	8385                	srli	a5,a5,0x1
    80013c2a:	943e                	add	s0,s0,a5
    80013c2c:	00143413          	seqz	s0,s0
    80013c30:	e32ff06f          	j	80013262 <software_interrupt_msi+0x1fc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c34:	00044717          	auipc	a4,0x44
    80013c38:	3e072703          	lw	a4,992(a4) # 80058014 <excpt+0x4>
    80013c3c:	4791                	li	a5,4
    80013c3e:	d6f71ee3          	bne	a4,a5,800139ba <software_interrupt_msi+0x954>
    80013c42:	b371                	j	800139ce <software_interrupt_msi+0x968>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c44:	00044717          	auipc	a4,0x44
    80013c48:	3d072703          	lw	a4,976(a4) # 80058014 <excpt+0x4>
    80013c4c:	4791                	li	a5,4
    80013c4e:	caf71d63          	bne	a4,a5,80013108 <software_interrupt_msi+0xa2>
    80013c52:	ccaff06f          	j	8001311c <software_interrupt_msi+0xb6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c56:	00044717          	auipc	a4,0x44
    80013c5a:	3be72703          	lw	a4,958(a4) # 80058014 <excpt+0x4>
    80013c5e:	478d                	li	a5,3
    80013c60:	c2f719e3          	bne	a4,a5,80013892 <software_interrupt_msi+0x82c>
    80013c64:	b189                	j	800138a6 <software_interrupt_msi+0x840>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013c66:	00044717          	auipc	a4,0x44
    80013c6a:	3ae72703          	lw	a4,942(a4) # 80058014 <excpt+0x4>
    80013c6e:	478d                	li	a5,3
    80013c70:	def718e3          	bne	a4,a5,80013a60 <software_interrupt_msi+0x9fa>
    80013c74:	b501                	j	80013a74 <software_interrupt_msi+0xa0e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c76:	00044717          	auipc	a4,0x44
    80013c7a:	39e72703          	lw	a4,926(a4) # 80058014 <excpt+0x4>
    80013c7e:	478d                	li	a5,3
    80013c80:	86f71ae3          	bne	a4,a5,800134f4 <software_interrupt_msi+0x48e>
    80013c84:	885ff06f          	j	80013508 <software_interrupt_msi+0x4a2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c88:	00044717          	auipc	a4,0x44
    80013c8c:	38c72703          	lw	a4,908(a4) # 80058014 <excpt+0x4>
    80013c90:	4791                	li	a5,4
    80013c92:	faf71d63          	bne	a4,a5,8001344c <software_interrupt_msi+0x3e6>
    80013c96:	fcaff06f          	j	80013460 <software_interrupt_msi+0x3fa>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c9a:	00044717          	auipc	a4,0x44
    80013c9e:	37a72703          	lw	a4,890(a4) # 80058014 <excpt+0x4>
    80013ca2:	4791                	li	a5,4
    80013ca4:	b4f713e3          	bne	a4,a5,800137ea <software_interrupt_msi+0x784>
    80013ca8:	be99                	j	800137fe <software_interrupt_msi+0x798>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013caa:	00044717          	auipc	a4,0x44
    80013cae:	36a72703          	lw	a4,874(a4) # 80058014 <excpt+0x4>
    80013cb2:	4791                	li	a5,4
    80013cb4:	96f714e3          	bne	a4,a5,8001361c <software_interrupt_msi+0x5b6>
    80013cb8:	baa5                	j	80013630 <software_interrupt_msi+0x5ca>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013cba:	00044717          	auipc	a4,0x44
    80013cbe:	35a72703          	lw	a4,858(a4) # 80058014 <excpt+0x4>
    80013cc2:	478d                	li	a5,3
    80013cc4:	9ef71fe3          	bne	a4,a5,800136c2 <software_interrupt_msi+0x65c>
    80013cc8:	b439                	j	800136d6 <software_interrupt_msi+0x670>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013cca:	0001a517          	auipc	a0,0x1a
    80013cce:	53650513          	addi	a0,a0,1334 # 8002e200 <__func__.0+0x318>
    80013cd2:	758170ef          	jal	8002b42a <printf>
    80013cd6:	02900513          	li	a0,41
    80013cda:	43e160ef          	jal	8002a118 <putchar>
    80013cde:	cc2ff06f          	j	800131a0 <software_interrupt_msi+0x13a>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013ce2:	0001a517          	auipc	a0,0x1a
    80013ce6:	51e50513          	addi	a0,a0,1310 # 8002e200 <__func__.0+0x318>
    80013cea:	740170ef          	jal	8002b42a <printf>
    80013cee:	02900513          	li	a0,41
    80013cf2:	426160ef          	jal	8002a118 <putchar>
    80013cf6:	b915                	j	8001392a <software_interrupt_msi+0x8c4>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013cf8:	0001a517          	auipc	a0,0x1a
    80013cfc:	50850513          	addi	a0,a0,1288 # 8002e200 <__func__.0+0x318>
    80013d00:	72a170ef          	jal	8002b42a <printf>
    80013d04:	02900513          	li	a0,41
    80013d08:	410160ef          	jal	8002a118 <putchar>
    80013d0c:	dbcff06f          	j	800132c8 <software_interrupt_msi+0x262>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013d10:	0001a517          	auipc	a0,0x1a
    80013d14:	4f050513          	addi	a0,a0,1264 # 8002e200 <__func__.0+0x318>
    80013d18:	712170ef          	jal	8002b42a <printf>
    80013d1c:	02900513          	li	a0,41
    80013d20:	3f8160ef          	jal	8002a118 <putchar>
    80013d24:	bbc9                	j	80013af6 <software_interrupt_msi+0xa90>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013d26:	0001a517          	auipc	a0,0x1a
    80013d2a:	4da50513          	addi	a0,a0,1242 # 8002e200 <__func__.0+0x318>
    80013d2e:	6fc170ef          	jal	8002b42a <printf>
    80013d32:	02900513          	li	a0,41
    80013d36:	3e2160ef          	jal	8002a118 <putchar>
    80013d3a:	b405                	j	8001375a <software_interrupt_msi+0x6f4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013d3c:	0001a517          	auipc	a0,0x1a
    80013d40:	4c450513          	addi	a0,a0,1220 # 8002e200 <__func__.0+0x318>
    80013d44:	6e6170ef          	jal	8002b42a <printf>
    80013d48:	02900513          	li	a0,41
    80013d4c:	3cc160ef          	jal	8002a118 <putchar>
    80013d50:	83dff06f          	j	8001358c <software_interrupt_msi+0x526>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013d54:	0001a517          	auipc	a0,0x1a
    80013d58:	4ac50513          	addi	a0,a0,1196 # 8002e200 <__func__.0+0x318>
    80013d5c:	6ce170ef          	jal	8002b42a <printf>
    80013d60:	02900513          	li	a0,41
    80013d64:	3b4160ef          	jal	8002a118 <putchar>
    80013d68:	e54ff06f          	j	800133bc <software_interrupt_msi+0x356>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013d6c:	0001a517          	auipc	a0,0x1a
    80013d70:	49450513          	addi	a0,a0,1172 # 8002e200 <__func__.0+0x318>
    80013d74:	6b6170ef          	jal	8002b42a <printf>
    80013d78:	02900513          	li	a0,41
    80013d7c:	39c160ef          	jal	8002a118 <putchar>
    80013d80:	dc2ff06f          	j	80013342 <software_interrupt_msi+0x2dc>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013d84:	00044717          	auipc	a4,0x44
    80013d88:	29072703          	lw	a4,656(a4) # 80058014 <excpt+0x4>
    80013d8c:	478d                	li	a5,3
    80013d8e:	0001a597          	auipc	a1,0x1a
    80013d92:	41a58593          	addi	a1,a1,1050 # 8002e1a8 <__func__.0+0x2c0>
    80013d96:	90f705e3          	beq	a4,a5,800136a0 <software_interrupt_msi+0x63a>
    80013d9a:	0001a597          	auipc	a1,0x1a
    80013d9e:	41e58593          	addi	a1,a1,1054 # 8002e1b8 <__func__.0+0x2d0>
    80013da2:	8ffff06f          	j	800136a0 <software_interrupt_msi+0x63a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013da6:	00044717          	auipc	a4,0x44
    80013daa:	26e72703          	lw	a4,622(a4) # 80058014 <excpt+0x4>
    80013dae:	4791                	li	a5,4
    80013db0:	0001a597          	auipc	a1,0x1a
    80013db4:	3f858593          	addi	a1,a1,1016 # 8002e1a8 <__func__.0+0x2c0>
    80013db8:	bef700e3          	beq	a4,a5,80013998 <software_interrupt_msi+0x932>
    80013dbc:	0001a597          	auipc	a1,0x1a
    80013dc0:	3fc58593          	addi	a1,a1,1020 # 8002e1b8 <__func__.0+0x2d0>
    80013dc4:	bed1                	j	80013998 <software_interrupt_msi+0x932>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013dc6:	00044717          	auipc	a4,0x44
    80013dca:	24e72703          	lw	a4,590(a4) # 80058014 <excpt+0x4>
    80013dce:	4791                	li	a5,4
    80013dd0:	0001a597          	auipc	a1,0x1a
    80013dd4:	3d858593          	addi	a1,a1,984 # 8002e1a8 <__func__.0+0x2c0>
    80013dd8:	b0f70763          	beq	a4,a5,800130e6 <software_interrupt_msi+0x80>
    80013ddc:	0001a597          	auipc	a1,0x1a
    80013de0:	3dc58593          	addi	a1,a1,988 # 8002e1b8 <__func__.0+0x2d0>
    80013de4:	b02ff06f          	j	800130e6 <software_interrupt_msi+0x80>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013de8:	00044717          	auipc	a4,0x44
    80013dec:	22c72703          	lw	a4,556(a4) # 80058014 <excpt+0x4>
    80013df0:	4791                	li	a5,4
    80013df2:	0001a597          	auipc	a1,0x1a
    80013df6:	3b658593          	addi	a1,a1,950 # 8002e1a8 <__func__.0+0x2c0>
    80013dfa:	80f700e3          	beq	a4,a5,800135fa <software_interrupt_msi+0x594>
    80013dfe:	0001a597          	auipc	a1,0x1a
    80013e02:	3ba58593          	addi	a1,a1,954 # 8002e1b8 <__func__.0+0x2d0>
    80013e06:	ff4ff06f          	j	800135fa <software_interrupt_msi+0x594>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e0a:	00044717          	auipc	a4,0x44
    80013e0e:	20a72703          	lw	a4,522(a4) # 80058014 <excpt+0x4>
    80013e12:	4791                	li	a5,4
    80013e14:	0001a597          	auipc	a1,0x1a
    80013e18:	39458593          	addi	a1,a1,916 # 8002e1a8 <__func__.0+0x2c0>
    80013e1c:	9af706e3          	beq	a4,a5,800137c8 <software_interrupt_msi+0x762>
    80013e20:	0001a597          	auipc	a1,0x1a
    80013e24:	39858593          	addi	a1,a1,920 # 8002e1b8 <__func__.0+0x2d0>
    80013e28:	b245                	j	800137c8 <software_interrupt_msi+0x762>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e2a:	00044717          	auipc	a4,0x44
    80013e2e:	1ea72703          	lw	a4,490(a4) # 80058014 <excpt+0x4>
    80013e32:	4791                	li	a5,4
    80013e34:	0001a597          	auipc	a1,0x1a
    80013e38:	37458593          	addi	a1,a1,884 # 8002e1a8 <__func__.0+0x2c0>
    80013e3c:	def70763          	beq	a4,a5,8001342a <software_interrupt_msi+0x3c4>
    80013e40:	0001a597          	auipc	a1,0x1a
    80013e44:	37858593          	addi	a1,a1,888 # 8002e1b8 <__func__.0+0x2d0>
    80013e48:	de2ff06f          	j	8001342a <software_interrupt_msi+0x3c4>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013e4c:	00044717          	auipc	a4,0x44
    80013e50:	1c872703          	lw	a4,456(a4) # 80058014 <excpt+0x4>
    80013e54:	478d                	li	a5,3
    80013e56:	0001a597          	auipc	a1,0x1a
    80013e5a:	35258593          	addi	a1,a1,850 # 8002e1a8 <__func__.0+0x2c0>
    80013e5e:	e6f70a63          	beq	a4,a5,800134d2 <software_interrupt_msi+0x46c>
    80013e62:	0001a597          	auipc	a1,0x1a
    80013e66:	35658593          	addi	a1,a1,854 # 8002e1b8 <__func__.0+0x2d0>
    80013e6a:	e68ff06f          	j	800134d2 <software_interrupt_msi+0x46c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013e6e:	00044717          	auipc	a4,0x44
    80013e72:	1a672703          	lw	a4,422(a4) # 80058014 <excpt+0x4>
    80013e76:	478d                	li	a5,3
    80013e78:	0001a597          	auipc	a1,0x1a
    80013e7c:	33058593          	addi	a1,a1,816 # 8002e1a8 <__func__.0+0x2c0>
    80013e80:	baf70fe3          	beq	a4,a5,80013a3e <software_interrupt_msi+0x9d8>
    80013e84:	0001a597          	auipc	a1,0x1a
    80013e88:	33458593          	addi	a1,a1,820 # 8002e1b8 <__func__.0+0x2d0>
    80013e8c:	be4d                	j	80013a3e <software_interrupt_msi+0x9d8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013e8e:	00044717          	auipc	a4,0x44
    80013e92:	18672703          	lw	a4,390(a4) # 80058014 <excpt+0x4>
    80013e96:	478d                	li	a5,3
    80013e98:	0001a597          	auipc	a1,0x1a
    80013e9c:	31058593          	addi	a1,a1,784 # 8002e1a8 <__func__.0+0x2c0>
    80013ea0:	9cf708e3          	beq	a4,a5,80013870 <software_interrupt_msi+0x80a>
    80013ea4:	0001a597          	auipc	a1,0x1a
    80013ea8:	31458593          	addi	a1,a1,788 # 8002e1b8 <__func__.0+0x2d0>
    80013eac:	b2d1                	j	80013870 <software_interrupt_msi+0x80a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013eae:	00044417          	auipc	s0,0x44
    80013eb2:	16642403          	lw	s0,358(s0) # 80058014 <excpt+0x4>
    80013eb6:	1471                	addi	s0,s0,-4
    80013eb8:	00143413          	seqz	s0,s0
    80013ebc:	a7eff06f          	j	8001313a <software_interrupt_msi+0xd4>

0000000080013ec0 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80013ec0:	1101                	addi	sp,sp,-32

    TEST_START();
    80013ec2:	00019597          	auipc	a1,0x19
    80013ec6:	b7e58593          	addi	a1,a1,-1154 # 8002ca40 <__func__.1>
    80013eca:	0001a517          	auipc	a0,0x1a
    80013ece:	2fe50513          	addi	a0,a0,766 # 8002e1c8 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80013ed2:	ec06                	sd	ra,24(sp)
    80013ed4:	e822                	sd	s0,16(sp)
    80013ed6:	e426                	sd	s1,8(sp)
    TEST_START();
    80013ed8:	552170ef          	jal	8002b42a <printf>
    80013edc:	4529                	li	a0,10
    80013ede:	23a160ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80013ee2:	f2bec0ef          	jal	80000e0c <test_setup_except_function>

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80013ee6:	4511                	li	a0,4
    80013ee8:	820ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80013eec:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80013ef0:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80013ef4:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013ef8:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013efc:	450d                	li	a0,3
    80013efe:	80aed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80013f02:	08200593          	li	a1,130
    80013f06:	0001f617          	auipc	a2,0x1f
    80013f0a:	d6a60613          	addi	a2,a2,-662 # 80032c70 <__func__.0+0x4d88>
    80013f0e:	0001a517          	auipc	a0,0x1a
    80013f12:	2d250513          	addi	a0,a0,722 # 8002e1e0 <__func__.0+0x2f8>
    80013f16:	514170ef          	jal	8002b42a <printf>
    80013f1a:	00044797          	auipc	a5,0x44
    80013f1e:	0f77c783          	lbu	a5,247(a5) # 80058011 <excpt+0x1>
    80013f22:	00044497          	auipc	s1,0x44
    80013f26:	0ee48493          	addi	s1,s1,238 # 80058010 <excpt>
    80013f2a:	0001a597          	auipc	a1,0x1a
    80013f2e:	28e58593          	addi	a1,a1,654 # 8002e1b8 <__func__.0+0x2d0>
    80013f32:	c799                	beqz	a5,80013f40 <software_interrupt_ssi+0x80>
    80013f34:	57fd                	li	a5,-1
    80013f36:	6498                	ld	a4,8(s1)
    80013f38:	17fe                	slli	a5,a5,0x3f
    80013f3a:	0785                	addi	a5,a5,1
    80013f3c:	26f706e3          	beq	a4,a5,800149a8 <software_interrupt_ssi+0xae8>
    80013f40:	0001a517          	auipc	a0,0x1a
    80013f44:	2b850513          	addi	a0,a0,696 # 8002e1f8 <__func__.0+0x310>
    80013f48:	4e2170ef          	jal	8002b42a <printf>
    80013f4c:	00044797          	auipc	a5,0x44
    80013f50:	0c57c783          	lbu	a5,197(a5) # 80058011 <excpt+0x1>
    80013f54:	c799                	beqz	a5,80013f62 <software_interrupt_ssi+0xa2>
    80013f56:	57fd                	li	a5,-1
    80013f58:	6498                	ld	a4,8(s1)
    80013f5a:	17fe                	slli	a5,a5,0x3f
    80013f5c:	0785                	addi	a5,a5,1
    80013f5e:	08f70de3          	beq	a4,a5,800147f8 <software_interrupt_ssi+0x938>
    80013f62:	0001a517          	auipc	a0,0x1a
    80013f66:	29e50513          	addi	a0,a0,670 # 8002e200 <__func__.0+0x318>
    80013f6a:	4c0170ef          	jal	8002b42a <printf>
    80013f6e:	02900513          	li	a0,41
    80013f72:	1a6160ef          	jal	8002a118 <putchar>
    80013f76:	4529                	li	a0,10
    80013f78:	1a0160ef          	jal	8002a118 <putchar>
    80013f7c:	00044797          	auipc	a5,0x44
    80013f80:	0957c783          	lbu	a5,149(a5) # 80058011 <excpt+0x1>
    80013f84:	4401                	li	s0,0
    80013f86:	c799                	beqz	a5,80013f94 <software_interrupt_ssi+0xd4>
    80013f88:	57fd                	li	a5,-1
    80013f8a:	6498                	ld	a4,8(s1)
    80013f8c:	17fe                	slli	a5,a5,0x3f
    80013f8e:	0785                	addi	a5,a5,1
    80013f90:	18f701e3          	beq	a4,a5,80014912 <software_interrupt_ssi+0xa52>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80013f94:	e79ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013f98:	4511                	li	a0,4
    80013f9a:	f6fec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013f9e:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80013fa2:	57fd                	li	a5,-1
    80013fa4:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80013fa8:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013fac:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013fb0:	450d                	li	a0,3
    80013fb2:	f57ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80013fb6:	08200593          	li	a1,130
    80013fba:	0001f617          	auipc	a2,0x1f
    80013fbe:	d2660613          	addi	a2,a2,-730 # 80032ce0 <__func__.0+0x4df8>
    80013fc2:	0001a517          	auipc	a0,0x1a
    80013fc6:	21e50513          	addi	a0,a0,542 # 8002e1e0 <__func__.0+0x2f8>
    80013fca:	460170ef          	jal	8002b42a <printf>
    80013fce:	00044797          	auipc	a5,0x44
    80013fd2:	0437c783          	lbu	a5,67(a5) # 80058011 <excpt+0x1>
    80013fd6:	0001a597          	auipc	a1,0x1a
    80013fda:	1e258593          	addi	a1,a1,482 # 8002e1b8 <__func__.0+0x2d0>
    80013fde:	c799                	beqz	a5,80013fec <software_interrupt_ssi+0x12c>
    80013fe0:	57fd                	li	a5,-1
    80013fe2:	6498                	ld	a4,8(s1)
    80013fe4:	17fe                	slli	a5,a5,0x3f
    80013fe6:	0785                	addi	a5,a5,1
    80013fe8:	12f70ee3          	beq	a4,a5,80014924 <software_interrupt_ssi+0xa64>
    80013fec:	0001a517          	auipc	a0,0x1a
    80013ff0:	20c50513          	addi	a0,a0,524 # 8002e1f8 <__func__.0+0x310>
    80013ff4:	436170ef          	jal	8002b42a <printf>
    80013ff8:	00044797          	auipc	a5,0x44
    80013ffc:	0197c783          	lbu	a5,25(a5) # 80058011 <excpt+0x1>
    80014000:	c799                	beqz	a5,8001400e <software_interrupt_ssi+0x14e>
    80014002:	57fd                	li	a5,-1
    80014004:	6498                	ld	a4,8(s1)
    80014006:	17fe                	slli	a5,a5,0x3f
    80014008:	0785                	addi	a5,a5,1
    8001400a:	7cf70e63          	beq	a4,a5,800147e6 <software_interrupt_ssi+0x926>
    8001400e:	0001a517          	auipc	a0,0x1a
    80014012:	1f250513          	addi	a0,a0,498 # 8002e200 <__func__.0+0x318>
    80014016:	414170ef          	jal	8002b42a <printf>
    8001401a:	02900513          	li	a0,41
    8001401e:	0fa160ef          	jal	8002a118 <putchar>
    80014022:	4529                	li	a0,10
    80014024:	0f4160ef          	jal	8002a118 <putchar>
    80014028:	c801                	beqz	s0,80014038 <software_interrupt_ssi+0x178>
    8001402a:	00044797          	auipc	a5,0x44
    8001402e:	fe77c783          	lbu	a5,-25(a5) # 80058011 <excpt+0x1>
    80014032:	4401                	li	s0,0
    80014034:	78079a63          	bnez	a5,800147c8 <software_interrupt_ssi+0x908>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014038:	dd5ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001403c:	4511                	li	a0,4
    8001403e:	ecbec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014042:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014046:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    8001404a:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    8001404e:	450d                	li	a0,3
    80014050:	eb9ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014054:	08200593          	li	a1,130
    80014058:	0001f617          	auipc	a2,0x1f
    8001405c:	cf860613          	addi	a2,a2,-776 # 80032d50 <__func__.0+0x4e68>
    80014060:	0001a517          	auipc	a0,0x1a
    80014064:	18050513          	addi	a0,a0,384 # 8002e1e0 <__func__.0+0x2f8>
    80014068:	3c2170ef          	jal	8002b42a <printf>
    8001406c:	00044797          	auipc	a5,0x44
    80014070:	fa57c783          	lbu	a5,-91(a5) # 80058011 <excpt+0x1>
    80014074:	0001a597          	auipc	a1,0x1a
    80014078:	14458593          	addi	a1,a1,324 # 8002e1b8 <__func__.0+0x2d0>
    8001407c:	e789                	bnez	a5,80014086 <software_interrupt_ssi+0x1c6>
    8001407e:	0001a597          	auipc	a1,0x1a
    80014082:	12a58593          	addi	a1,a1,298 # 8002e1a8 <__func__.0+0x2c0>
    80014086:	0001a517          	auipc	a0,0x1a
    8001408a:	17250513          	addi	a0,a0,370 # 8002e1f8 <__func__.0+0x310>
    8001408e:	39c170ef          	jal	8002b42a <printf>
    80014092:	00044797          	auipc	a5,0x44
    80014096:	f7f7c783          	lbu	a5,-129(a5) # 80058011 <excpt+0x1>
    8001409a:	7e079463          	bnez	a5,80014882 <software_interrupt_ssi+0x9c2>
    8001409e:	4529                	li	a0,10
    800140a0:	078160ef          	jal	8002a118 <putchar>
    800140a4:	c419                	beqz	s0,800140b2 <software_interrupt_ssi+0x1f2>
    800140a6:	00044417          	auipc	s0,0x44
    800140aa:	f6b44403          	lbu	s0,-149(s0) # 80058011 <excpt+0x1>
    800140ae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800140b2:	d5bec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800140b6:	4511                	li	a0,4
    800140b8:	e51ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800140bc:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800140c0:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800140c4:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800140c8:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800140cc:	450d                	li	a0,3
    800140ce:	e3bec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800140d2:	08200593          	li	a1,130
    800140d6:	0001f617          	auipc	a2,0x1f
    800140da:	cd260613          	addi	a2,a2,-814 # 80032da8 <__func__.0+0x4ec0>
    800140de:	0001a517          	auipc	a0,0x1a
    800140e2:	10250513          	addi	a0,a0,258 # 8002e1e0 <__func__.0+0x2f8>
    800140e6:	344170ef          	jal	8002b42a <printf>
    800140ea:	00044797          	auipc	a5,0x44
    800140ee:	f277c783          	lbu	a5,-217(a5) # 80058011 <excpt+0x1>
    800140f2:	0001a597          	auipc	a1,0x1a
    800140f6:	0c658593          	addi	a1,a1,198 # 8002e1b8 <__func__.0+0x2d0>
    800140fa:	c799                	beqz	a5,80014108 <software_interrupt_ssi+0x248>
    800140fc:	57fd                	li	a5,-1
    800140fe:	6498                	ld	a4,8(s1)
    80014100:	17fe                	slli	a5,a5,0x3f
    80014102:	0785                	addi	a5,a5,1
    80014104:	04f701e3          	beq	a4,a5,80014946 <software_interrupt_ssi+0xa86>
    80014108:	0001a517          	auipc	a0,0x1a
    8001410c:	0f050513          	addi	a0,a0,240 # 8002e1f8 <__func__.0+0x310>
    80014110:	31a170ef          	jal	8002b42a <printf>
    80014114:	00044797          	auipc	a5,0x44
    80014118:	efd7c783          	lbu	a5,-259(a5) # 80058011 <excpt+0x1>
    8001411c:	c799                	beqz	a5,8001412a <software_interrupt_ssi+0x26a>
    8001411e:	57fd                	li	a5,-1
    80014120:	6498                	ld	a4,8(s1)
    80014122:	17fe                	slli	a5,a5,0x3f
    80014124:	0785                	addi	a5,a5,1
    80014126:	70f70a63          	beq	a4,a5,8001483a <software_interrupt_ssi+0x97a>
    8001412a:	0001a517          	auipc	a0,0x1a
    8001412e:	0d650513          	addi	a0,a0,214 # 8002e200 <__func__.0+0x318>
    80014132:	2f8170ef          	jal	8002b42a <printf>
    80014136:	02900513          	li	a0,41
    8001413a:	7df150ef          	jal	8002a118 <putchar>
    8001413e:	4529                	li	a0,10
    80014140:	7d9150ef          	jal	8002a118 <putchar>
    80014144:	c801                	beqz	s0,80014154 <software_interrupt_ssi+0x294>
    80014146:	00044797          	auipc	a5,0x44
    8001414a:	ecb7c783          	lbu	a5,-309(a5) # 80058011 <excpt+0x1>
    8001414e:	4401                	li	s0,0
    80014150:	64079e63          	bnez	a5,800147ac <software_interrupt_ssi+0x8ec>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80014154:	cb9ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014158:	4511                	li	a0,4
    8001415a:	dafec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001415e:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014162:	57fd                	li	a5,-1
    80014164:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014168:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001416c:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014170:	450d                	li	a0,3
    80014172:	d97ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014176:	08200593          	li	a1,130
    8001417a:	0001f617          	auipc	a2,0x1f
    8001417e:	c9e60613          	addi	a2,a2,-866 # 80032e18 <__func__.0+0x4f30>
    80014182:	0001a517          	auipc	a0,0x1a
    80014186:	05e50513          	addi	a0,a0,94 # 8002e1e0 <__func__.0+0x2f8>
    8001418a:	2a0170ef          	jal	8002b42a <printf>
    8001418e:	00044797          	auipc	a5,0x44
    80014192:	e837c783          	lbu	a5,-381(a5) # 80058011 <excpt+0x1>
    80014196:	0001a597          	auipc	a1,0x1a
    8001419a:	02258593          	addi	a1,a1,34 # 8002e1b8 <__func__.0+0x2d0>
    8001419e:	c799                	beqz	a5,800141ac <software_interrupt_ssi+0x2ec>
    800141a0:	57fd                	li	a5,-1
    800141a2:	6498                	ld	a4,8(s1)
    800141a4:	17fe                	slli	a5,a5,0x3f
    800141a6:	0785                	addi	a5,a5,1
    800141a8:	02f701e3          	beq	a4,a5,800149ca <software_interrupt_ssi+0xb0a>
    800141ac:	0001a517          	auipc	a0,0x1a
    800141b0:	04c50513          	addi	a0,a0,76 # 8002e1f8 <__func__.0+0x310>
    800141b4:	276170ef          	jal	8002b42a <printf>
    800141b8:	00044797          	auipc	a5,0x44
    800141bc:	e597c783          	lbu	a5,-423(a5) # 80058011 <excpt+0x1>
    800141c0:	c799                	beqz	a5,800141ce <software_interrupt_ssi+0x30e>
    800141c2:	57fd                	li	a5,-1
    800141c4:	6498                	ld	a4,8(s1)
    800141c6:	17fe                	slli	a5,a5,0x3f
    800141c8:	0785                	addi	a5,a5,1
    800141ca:	68f70163          	beq	a4,a5,8001484c <software_interrupt_ssi+0x98c>
    800141ce:	0001a517          	auipc	a0,0x1a
    800141d2:	03250513          	addi	a0,a0,50 # 8002e200 <__func__.0+0x318>
    800141d6:	254170ef          	jal	8002b42a <printf>
    800141da:	02900513          	li	a0,41
    800141de:	73b150ef          	jal	8002a118 <putchar>
    800141e2:	4529                	li	a0,10
    800141e4:	735150ef          	jal	8002a118 <putchar>
    800141e8:	c801                	beqz	s0,800141f8 <software_interrupt_ssi+0x338>
    800141ea:	00044797          	auipc	a5,0x44
    800141ee:	e277c783          	lbu	a5,-473(a5) # 80058011 <excpt+0x1>
    800141f2:	4401                	li	s0,0
    800141f4:	58079e63          	bnez	a5,80014790 <software_interrupt_ssi+0x8d0>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800141f8:	c15ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800141fc:	4511                	li	a0,4
    800141fe:	d0bec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014202:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014206:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001420a:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001420e:	450d                	li	a0,3
    80014210:	cf9ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014214:	08200593          	li	a1,130
    80014218:	0001f617          	auipc	a2,0x1f
    8001421c:	c6060613          	addi	a2,a2,-928 # 80032e78 <__func__.0+0x4f90>
    80014220:	0001a517          	auipc	a0,0x1a
    80014224:	fc050513          	addi	a0,a0,-64 # 8002e1e0 <__func__.0+0x2f8>
    80014228:	202170ef          	jal	8002b42a <printf>
    8001422c:	00044797          	auipc	a5,0x44
    80014230:	de57c783          	lbu	a5,-539(a5) # 80058011 <excpt+0x1>
    80014234:	0001a597          	auipc	a1,0x1a
    80014238:	f8458593          	addi	a1,a1,-124 # 8002e1b8 <__func__.0+0x2d0>
    8001423c:	e789                	bnez	a5,80014246 <software_interrupt_ssi+0x386>
    8001423e:	0001a597          	auipc	a1,0x1a
    80014242:	f6a58593          	addi	a1,a1,-150 # 8002e1a8 <__func__.0+0x2c0>
    80014246:	0001a517          	auipc	a0,0x1a
    8001424a:	fb250513          	addi	a0,a0,-78 # 8002e1f8 <__func__.0+0x310>
    8001424e:	1dc170ef          	jal	8002b42a <printf>
    80014252:	00044797          	auipc	a5,0x44
    80014256:	dbf7c783          	lbu	a5,-577(a5) # 80058011 <excpt+0x1>
    8001425a:	64079b63          	bnez	a5,800148b0 <software_interrupt_ssi+0x9f0>
    8001425e:	4529                	li	a0,10
    80014260:	6b9150ef          	jal	8002a118 <putchar>
    80014264:	c419                	beqz	s0,80014272 <software_interrupt_ssi+0x3b2>
    80014266:	00044417          	auipc	s0,0x44
    8001426a:	dab44403          	lbu	s0,-597(s0) # 80058011 <excpt+0x1>
    8001426e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014272:	b9bec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014276:	4511                	li	a0,4
    80014278:	c91ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001427c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014280:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014284:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014288:	450d                	li	a0,3
    8001428a:	c7fec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001428e:	08200593          	li	a1,130
    80014292:	0001f617          	auipc	a2,0x1f
    80014296:	c3660613          	addi	a2,a2,-970 # 80032ec8 <__func__.0+0x4fe0>
    8001429a:	0001a517          	auipc	a0,0x1a
    8001429e:	f4650513          	addi	a0,a0,-186 # 8002e1e0 <__func__.0+0x2f8>
    800142a2:	188170ef          	jal	8002b42a <printf>
    800142a6:	00044797          	auipc	a5,0x44
    800142aa:	d6b7c783          	lbu	a5,-661(a5) # 80058011 <excpt+0x1>
    800142ae:	0001a597          	auipc	a1,0x1a
    800142b2:	f0a58593          	addi	a1,a1,-246 # 8002e1b8 <__func__.0+0x2d0>
    800142b6:	e789                	bnez	a5,800142c0 <software_interrupt_ssi+0x400>
    800142b8:	0001a597          	auipc	a1,0x1a
    800142bc:	ef058593          	addi	a1,a1,-272 # 8002e1a8 <__func__.0+0x2c0>
    800142c0:	0001a517          	auipc	a0,0x1a
    800142c4:	f3850513          	addi	a0,a0,-200 # 8002e1f8 <__func__.0+0x310>
    800142c8:	162170ef          	jal	8002b42a <printf>
    800142cc:	00044797          	auipc	a5,0x44
    800142d0:	d457c783          	lbu	a5,-699(a5) # 80058011 <excpt+0x1>
    800142d4:	5c079363          	bnez	a5,8001489a <software_interrupt_ssi+0x9da>
    800142d8:	4529                	li	a0,10
    800142da:	63f150ef          	jal	8002a118 <putchar>
    800142de:	c419                	beqz	s0,800142ec <software_interrupt_ssi+0x42c>
    800142e0:	00044417          	auipc	s0,0x44
    800142e4:	d3144403          	lbu	s0,-719(s0) # 80058011 <excpt+0x1>
    800142e8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    800142ec:	b21ec0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    800142f0:	b1dec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800142f4:	4511                	li	a0,4
    800142f6:	c13ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800142fa:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800142fe:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80014302:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014306:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    8001430a:	4509                	li	a0,2
    8001430c:	bfdec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014310:	08200593          	li	a1,130
    80014314:	0001f617          	auipc	a2,0x1f
    80014318:	c0460613          	addi	a2,a2,-1020 # 80032f18 <__func__.0+0x5030>
    8001431c:	0001a517          	auipc	a0,0x1a
    80014320:	ec450513          	addi	a0,a0,-316 # 8002e1e0 <__func__.0+0x2f8>
    80014324:	106170ef          	jal	8002b42a <printf>
    80014328:	00044797          	auipc	a5,0x44
    8001432c:	ce97c783          	lbu	a5,-791(a5) # 80058011 <excpt+0x1>
    80014330:	0001a597          	auipc	a1,0x1a
    80014334:	e8858593          	addi	a1,a1,-376 # 8002e1b8 <__func__.0+0x2d0>
    80014338:	c799                	beqz	a5,80014346 <software_interrupt_ssi+0x486>
    8001433a:	57fd                	li	a5,-1
    8001433c:	6498                	ld	a4,8(s1)
    8001433e:	17fe                	slli	a5,a5,0x3f
    80014340:	0785                	addi	a5,a5,1
    80014342:	6af70563          	beq	a4,a5,800149ec <software_interrupt_ssi+0xb2c>
    80014346:	0001a517          	auipc	a0,0x1a
    8001434a:	eb250513          	addi	a0,a0,-334 # 8002e1f8 <__func__.0+0x310>
    8001434e:	0dc170ef          	jal	8002b42a <printf>
    80014352:	00044797          	auipc	a5,0x44
    80014356:	cbf7c783          	lbu	a5,-833(a5) # 80058011 <excpt+0x1>
    8001435a:	c799                	beqz	a5,80014368 <software_interrupt_ssi+0x4a8>
    8001435c:	57fd                	li	a5,-1
    8001435e:	6498                	ld	a4,8(s1)
    80014360:	17fe                	slli	a5,a5,0x3f
    80014362:	0785                	addi	a5,a5,1
    80014364:	4af70363          	beq	a4,a5,8001480a <software_interrupt_ssi+0x94a>
    80014368:	0001a517          	auipc	a0,0x1a
    8001436c:	e9850513          	addi	a0,a0,-360 # 8002e200 <__func__.0+0x318>
    80014370:	0ba170ef          	jal	8002b42a <printf>
    80014374:	02900513          	li	a0,41
    80014378:	5a1150ef          	jal	8002a118 <putchar>
    8001437c:	4529                	li	a0,10
    8001437e:	59b150ef          	jal	8002a118 <putchar>
    80014382:	c801                	beqz	s0,80014392 <software_interrupt_ssi+0x4d2>
    80014384:	00044797          	auipc	a5,0x44
    80014388:	c8d7c783          	lbu	a5,-883(a5) # 80058011 <excpt+0x1>
    8001438c:	4401                	li	s0,0
    8001438e:	3e079363          	bnez	a5,80014774 <software_interrupt_ssi+0x8b4>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80014392:	a7bec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014396:	4511                	li	a0,4
    80014398:	b71ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001439c:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800143a0:	57fd                	li	a5,-1
    800143a2:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800143a6:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800143aa:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800143ae:	4509                	li	a0,2
    800143b0:	b59ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800143b4:	08200593          	li	a1,130
    800143b8:	0001f617          	auipc	a2,0x1f
    800143bc:	bd060613          	addi	a2,a2,-1072 # 80032f88 <__func__.0+0x50a0>
    800143c0:	0001a517          	auipc	a0,0x1a
    800143c4:	e2050513          	addi	a0,a0,-480 # 8002e1e0 <__func__.0+0x2f8>
    800143c8:	062170ef          	jal	8002b42a <printf>
    800143cc:	00044797          	auipc	a5,0x44
    800143d0:	c457c783          	lbu	a5,-955(a5) # 80058011 <excpt+0x1>
    800143d4:	0001a597          	auipc	a1,0x1a
    800143d8:	de458593          	addi	a1,a1,-540 # 8002e1b8 <__func__.0+0x2d0>
    800143dc:	c799                	beqz	a5,800143ea <software_interrupt_ssi+0x52a>
    800143de:	57fd                	li	a5,-1
    800143e0:	6498                	ld	a4,8(s1)
    800143e2:	17fe                	slli	a5,a5,0x3f
    800143e4:	0785                	addi	a5,a5,1
    800143e6:	5af70163          	beq	a4,a5,80014988 <software_interrupt_ssi+0xac8>
    800143ea:	0001a517          	auipc	a0,0x1a
    800143ee:	e0e50513          	addi	a0,a0,-498 # 8002e1f8 <__func__.0+0x310>
    800143f2:	038170ef          	jal	8002b42a <printf>
    800143f6:	00044797          	auipc	a5,0x44
    800143fa:	c1b7c783          	lbu	a5,-997(a5) # 80058011 <excpt+0x1>
    800143fe:	c799                	beqz	a5,8001440c <software_interrupt_ssi+0x54c>
    80014400:	57fd                	li	a5,-1
    80014402:	6498                	ld	a4,8(s1)
    80014404:	17fe                	slli	a5,a5,0x3f
    80014406:	0785                	addi	a5,a5,1
    80014408:	40f70963          	beq	a4,a5,8001481a <software_interrupt_ssi+0x95a>
    8001440c:	0001a517          	auipc	a0,0x1a
    80014410:	df450513          	addi	a0,a0,-524 # 8002e200 <__func__.0+0x318>
    80014414:	016170ef          	jal	8002b42a <printf>
    80014418:	02900513          	li	a0,41
    8001441c:	4fd150ef          	jal	8002a118 <putchar>
    80014420:	4529                	li	a0,10
    80014422:	4f7150ef          	jal	8002a118 <putchar>
    80014426:	c801                	beqz	s0,80014436 <software_interrupt_ssi+0x576>
    80014428:	00044797          	auipc	a5,0x44
    8001442c:	be97c783          	lbu	a5,-1047(a5) # 80058011 <excpt+0x1>
    80014430:	4401                	li	s0,0
    80014432:	32079363          	bnez	a5,80014758 <software_interrupt_ssi+0x898>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014436:	9d7ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001443a:	4511                	li	a0,4
    8001443c:	acdec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014440:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014444:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80014448:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    8001444c:	4509                	li	a0,2
    8001444e:	abbec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014452:	08200593          	li	a1,130
    80014456:	0001f617          	auipc	a2,0x1f
    8001445a:	ba260613          	addi	a2,a2,-1118 # 80032ff8 <__func__.0+0x5110>
    8001445e:	0001a517          	auipc	a0,0x1a
    80014462:	d8250513          	addi	a0,a0,-638 # 8002e1e0 <__func__.0+0x2f8>
    80014466:	7c5160ef          	jal	8002b42a <printf>
    8001446a:	00044797          	auipc	a5,0x44
    8001446e:	ba77c783          	lbu	a5,-1113(a5) # 80058011 <excpt+0x1>
    80014472:	0001a597          	auipc	a1,0x1a
    80014476:	d4658593          	addi	a1,a1,-698 # 8002e1b8 <__func__.0+0x2d0>
    8001447a:	e789                	bnez	a5,80014484 <software_interrupt_ssi+0x5c4>
    8001447c:	0001a597          	auipc	a1,0x1a
    80014480:	d2c58593          	addi	a1,a1,-724 # 8002e1a8 <__func__.0+0x2c0>
    80014484:	0001a517          	auipc	a0,0x1a
    80014488:	d7450513          	addi	a0,a0,-652 # 8002e1f8 <__func__.0+0x310>
    8001448c:	79f160ef          	jal	8002b42a <printf>
    80014490:	00044797          	auipc	a5,0x44
    80014494:	b817c783          	lbu	a5,-1151(a5) # 80058011 <excpt+0x1>
    80014498:	3c079a63          	bnez	a5,8001486c <software_interrupt_ssi+0x9ac>
    8001449c:	4529                	li	a0,10
    8001449e:	47b150ef          	jal	8002a118 <putchar>
    800144a2:	c419                	beqz	s0,800144b0 <software_interrupt_ssi+0x5f0>
    800144a4:	00044417          	auipc	s0,0x44
    800144a8:	b6d44403          	lbu	s0,-1171(s0) # 80058011 <excpt+0x1>
    800144ac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800144b0:	95dec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800144b4:	4511                	li	a0,4
    800144b6:	a53ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800144ba:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800144be:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800144c2:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800144c6:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800144ca:	4509                	li	a0,2
    800144cc:	a3dec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800144d0:	08200593          	li	a1,130
    800144d4:	0001f617          	auipc	a2,0x1f
    800144d8:	b7c60613          	addi	a2,a2,-1156 # 80033050 <__func__.0+0x5168>
    800144dc:	0001a517          	auipc	a0,0x1a
    800144e0:	d0450513          	addi	a0,a0,-764 # 8002e1e0 <__func__.0+0x2f8>
    800144e4:	747160ef          	jal	8002b42a <printf>
    800144e8:	00044797          	auipc	a5,0x44
    800144ec:	b297c783          	lbu	a5,-1239(a5) # 80058011 <excpt+0x1>
    800144f0:	0001a597          	auipc	a1,0x1a
    800144f4:	cc858593          	addi	a1,a1,-824 # 8002e1b8 <__func__.0+0x2d0>
    800144f8:	c799                	beqz	a5,80014506 <software_interrupt_ssi+0x646>
    800144fa:	57fd                	li	a5,-1
    800144fc:	6498                	ld	a4,8(s1)
    800144fe:	17fe                	slli	a5,a5,0x3f
    80014500:	0785                	addi	a5,a5,1
    80014502:	3ef70863          	beq	a4,a5,800148f2 <software_interrupt_ssi+0xa32>
    80014506:	0001a517          	auipc	a0,0x1a
    8001450a:	cf250513          	addi	a0,a0,-782 # 8002e1f8 <__func__.0+0x310>
    8001450e:	71d160ef          	jal	8002b42a <printf>
    80014512:	00044797          	auipc	a5,0x44
    80014516:	aff7c783          	lbu	a5,-1281(a5) # 80058011 <excpt+0x1>
    8001451a:	c799                	beqz	a5,80014528 <software_interrupt_ssi+0x668>
    8001451c:	57fd                	li	a5,-1
    8001451e:	6498                	ld	a4,8(s1)
    80014520:	17fe                	slli	a5,a5,0x3f
    80014522:	0785                	addi	a5,a5,1
    80014524:	32f70c63          	beq	a4,a5,8001485c <software_interrupt_ssi+0x99c>
    80014528:	0001a517          	auipc	a0,0x1a
    8001452c:	cd850513          	addi	a0,a0,-808 # 8002e200 <__func__.0+0x318>
    80014530:	6fb160ef          	jal	8002b42a <printf>
    80014534:	02900513          	li	a0,41
    80014538:	3e1150ef          	jal	8002a118 <putchar>
    8001453c:	4529                	li	a0,10
    8001453e:	3db150ef          	jal	8002a118 <putchar>
    80014542:	c801                	beqz	s0,80014552 <software_interrupt_ssi+0x692>
    80014544:	00044797          	auipc	a5,0x44
    80014548:	acd7c783          	lbu	a5,-1331(a5) # 80058011 <excpt+0x1>
    8001454c:	4401                	li	s0,0
    8001454e:	1e079763          	bnez	a5,8001473c <software_interrupt_ssi+0x87c>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80014552:	8bbec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014556:	4511                	li	a0,4
    80014558:	9b1ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001455c:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014560:	57fd                	li	a5,-1
    80014562:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014566:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001456a:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001456e:	4509                	li	a0,2
    80014570:	999ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014574:	08200593          	li	a1,130
    80014578:	0001f617          	auipc	a2,0x1f
    8001457c:	b4860613          	addi	a2,a2,-1208 # 800330c0 <__func__.0+0x51d8>
    80014580:	0001a517          	auipc	a0,0x1a
    80014584:	c6050513          	addi	a0,a0,-928 # 8002e1e0 <__func__.0+0x2f8>
    80014588:	6a3160ef          	jal	8002b42a <printf>
    8001458c:	00044797          	auipc	a5,0x44
    80014590:	a857c783          	lbu	a5,-1403(a5) # 80058011 <excpt+0x1>
    80014594:	0001a597          	auipc	a1,0x1a
    80014598:	c2458593          	addi	a1,a1,-988 # 8002e1b8 <__func__.0+0x2d0>
    8001459c:	c799                	beqz	a5,800145aa <software_interrupt_ssi+0x6ea>
    8001459e:	57fd                	li	a5,-1
    800145a0:	6498                	ld	a4,8(s1)
    800145a2:	17fe                	slli	a5,a5,0x3f
    800145a4:	0785                	addi	a5,a5,1
    800145a6:	3cf70163          	beq	a4,a5,80014968 <software_interrupt_ssi+0xaa8>
    800145aa:	0001a517          	auipc	a0,0x1a
    800145ae:	c4e50513          	addi	a0,a0,-946 # 8002e1f8 <__func__.0+0x310>
    800145b2:	679160ef          	jal	8002b42a <printf>
    800145b6:	00044797          	auipc	a5,0x44
    800145ba:	a5b7c783          	lbu	a5,-1445(a5) # 80058011 <excpt+0x1>
    800145be:	c799                	beqz	a5,800145cc <software_interrupt_ssi+0x70c>
    800145c0:	57fd                	li	a5,-1
    800145c2:	6498                	ld	a4,8(s1)
    800145c4:	17fe                	slli	a5,a5,0x3f
    800145c6:	0785                	addi	a5,a5,1
    800145c8:	26f70163          	beq	a4,a5,8001482a <software_interrupt_ssi+0x96a>
    800145cc:	0001a517          	auipc	a0,0x1a
    800145d0:	c3450513          	addi	a0,a0,-972 # 8002e200 <__func__.0+0x318>
    800145d4:	657160ef          	jal	8002b42a <printf>
    800145d8:	02900513          	li	a0,41
    800145dc:	33d150ef          	jal	8002a118 <putchar>
    800145e0:	4529                	li	a0,10
    800145e2:	337150ef          	jal	8002a118 <putchar>
    800145e6:	c801                	beqz	s0,800145f6 <software_interrupt_ssi+0x736>
    800145e8:	00044797          	auipc	a5,0x44
    800145ec:	a297c783          	lbu	a5,-1495(a5) # 80058011 <excpt+0x1>
    800145f0:	4401                	li	s0,0
    800145f2:	12079763          	bnez	a5,80014720 <software_interrupt_ssi+0x860>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800145f6:	817ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800145fa:	4511                	li	a0,4
    800145fc:	90dec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014600:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014604:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014608:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001460c:	4509                	li	a0,2
    8001460e:	8fbec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014612:	08200593          	li	a1,130
    80014616:	0001f617          	auipc	a2,0x1f
    8001461a:	b0a60613          	addi	a2,a2,-1270 # 80033120 <__func__.0+0x5238>
    8001461e:	0001a517          	auipc	a0,0x1a
    80014622:	bc250513          	addi	a0,a0,-1086 # 8002e1e0 <__func__.0+0x2f8>
    80014626:	605160ef          	jal	8002b42a <printf>
    8001462a:	00044797          	auipc	a5,0x44
    8001462e:	9e77c783          	lbu	a5,-1561(a5) # 80058011 <excpt+0x1>
    80014632:	0001a597          	auipc	a1,0x1a
    80014636:	b8658593          	addi	a1,a1,-1146 # 8002e1b8 <__func__.0+0x2d0>
    8001463a:	e789                	bnez	a5,80014644 <software_interrupt_ssi+0x784>
    8001463c:	0001a597          	auipc	a1,0x1a
    80014640:	b6c58593          	addi	a1,a1,-1172 # 8002e1a8 <__func__.0+0x2c0>
    80014644:	0001a517          	auipc	a0,0x1a
    80014648:	bb450513          	addi	a0,a0,-1100 # 8002e1f8 <__func__.0+0x310>
    8001464c:	5df160ef          	jal	8002b42a <printf>
    80014650:	00044797          	auipc	a5,0x44
    80014654:	9c17c783          	lbu	a5,-1599(a5) # 80058011 <excpt+0x1>
    80014658:	28079263          	bnez	a5,800148dc <software_interrupt_ssi+0xa1c>
    8001465c:	4529                	li	a0,10
    8001465e:	2bb150ef          	jal	8002a118 <putchar>
    80014662:	c419                	beqz	s0,80014670 <software_interrupt_ssi+0x7b0>
    80014664:	00044417          	auipc	s0,0x44
    80014668:	9ad44403          	lbu	s0,-1619(s0) # 80058011 <excpt+0x1>
    8001466c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014670:	f9cec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014674:	4511                	li	a0,4
    80014676:	893ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001467a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001467e:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014682:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014686:	4509                	li	a0,2
    80014688:	881ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001468c:	08200593          	li	a1,130
    80014690:	0001f617          	auipc	a2,0x1f
    80014694:	ae060613          	addi	a2,a2,-1312 # 80033170 <__func__.0+0x5288>
    80014698:	0001a517          	auipc	a0,0x1a
    8001469c:	b4850513          	addi	a0,a0,-1208 # 8002e1e0 <__func__.0+0x2f8>
    800146a0:	58b160ef          	jal	8002b42a <printf>
    800146a4:	00044797          	auipc	a5,0x44
    800146a8:	96d7c783          	lbu	a5,-1683(a5) # 80058011 <excpt+0x1>
    800146ac:	0001a597          	auipc	a1,0x1a
    800146b0:	b0c58593          	addi	a1,a1,-1268 # 8002e1b8 <__func__.0+0x2d0>
    800146b4:	e789                	bnez	a5,800146be <software_interrupt_ssi+0x7fe>
    800146b6:	0001a597          	auipc	a1,0x1a
    800146ba:	af258593          	addi	a1,a1,-1294 # 8002e1a8 <__func__.0+0x2c0>
    800146be:	0001a517          	auipc	a0,0x1a
    800146c2:	b3a50513          	addi	a0,a0,-1222 # 8002e1f8 <__func__.0+0x310>
    800146c6:	565160ef          	jal	8002b42a <printf>
    800146ca:	00044797          	auipc	a5,0x44
    800146ce:	9477c783          	lbu	a5,-1721(a5) # 80058011 <excpt+0x1>
    800146d2:	1e079a63          	bnez	a5,800148c6 <software_interrupt_ssi+0xa06>
    800146d6:	4529                	li	a0,10
    800146d8:	241150ef          	jal	8002a118 <putchar>
    800146dc:	c411                	beqz	s0,800146e8 <software_interrupt_ssi+0x828>
    800146de:	00044797          	auipc	a5,0x44
    800146e2:	9337c783          	lbu	a5,-1741(a5) # 80058011 <excpt+0x1>
    800146e6:	c79d                	beqz	a5,80014714 <software_interrupt_ssi+0x854>
    800146e8:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800146ea:	0001a597          	auipc	a1,0x1a
    800146ee:	ace58593          	addi	a1,a1,-1330 # 8002e1b8 <__func__.0+0x2d0>
    800146f2:	0001a517          	auipc	a0,0x1a
    800146f6:	b6e50513          	addi	a0,a0,-1170 # 8002e260 <__func__.0+0x378>
    800146fa:	531160ef          	jal	8002b42a <printf>
    800146fe:	4511                	li	a0,4
    80014700:	809ec0ef          	jal	80000f08 <goto_priv>
    80014704:	920ed0ef          	jal	80001824 <reset_state>
}
    80014708:	60e2                	ld	ra,24(sp)
    8001470a:	8522                	mv	a0,s0
    8001470c:	6442                	ld	s0,16(sp)
    8001470e:	64a2                	ld	s1,8(sp)
    80014710:	6105                	addi	sp,sp,32
    80014712:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014714:	4405                	li	s0,1
    TEST_END();
    80014716:	0001a597          	auipc	a1,0x1a
    8001471a:	a9258593          	addi	a1,a1,-1390 # 8002e1a8 <__func__.0+0x2c0>
    8001471e:	bfd1                	j	800146f2 <software_interrupt_ssi+0x832>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014720:	57fd                	li	a5,-1
    80014722:	6498                	ld	a4,8(s1)
    80014724:	17fe                	slli	a5,a5,0x3f
    80014726:	0785                	addi	a5,a5,1
    80014728:	ecf717e3          	bne	a4,a5,800145f6 <software_interrupt_ssi+0x736>
    8001472c:	00044417          	auipc	s0,0x44
    80014730:	8e842403          	lw	s0,-1816(s0) # 80058014 <excpt+0x4>
    80014734:	1475                	addi	s0,s0,-3
    80014736:	00143413          	seqz	s0,s0
    8001473a:	bd75                	j	800145f6 <software_interrupt_ssi+0x736>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001473c:	57fd                	li	a5,-1
    8001473e:	6498                	ld	a4,8(s1)
    80014740:	17fe                	slli	a5,a5,0x3f
    80014742:	0785                	addi	a5,a5,1
    80014744:	e0f717e3          	bne	a4,a5,80014552 <software_interrupt_ssi+0x692>
    80014748:	00044417          	auipc	s0,0x44
    8001474c:	8cc42403          	lw	s0,-1844(s0) # 80058014 <excpt+0x4>
    80014750:	1471                	addi	s0,s0,-4
    80014752:	00143413          	seqz	s0,s0
    80014756:	bbf5                	j	80014552 <software_interrupt_ssi+0x692>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014758:	57fd                	li	a5,-1
    8001475a:	6498                	ld	a4,8(s1)
    8001475c:	17fe                	slli	a5,a5,0x3f
    8001475e:	0785                	addi	a5,a5,1
    80014760:	ccf71be3          	bne	a4,a5,80014436 <software_interrupt_ssi+0x576>
    80014764:	00044417          	auipc	s0,0x44
    80014768:	8b042403          	lw	s0,-1872(s0) # 80058014 <excpt+0x4>
    8001476c:	1475                	addi	s0,s0,-3
    8001476e:	00143413          	seqz	s0,s0
    80014772:	b1d1                	j	80014436 <software_interrupt_ssi+0x576>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014774:	57fd                	li	a5,-1
    80014776:	6498                	ld	a4,8(s1)
    80014778:	17fe                	slli	a5,a5,0x3f
    8001477a:	0785                	addi	a5,a5,1
    8001477c:	c0f71be3          	bne	a4,a5,80014392 <software_interrupt_ssi+0x4d2>
    80014780:	00044417          	auipc	s0,0x44
    80014784:	89442403          	lw	s0,-1900(s0) # 80058014 <excpt+0x4>
    80014788:	1471                	addi	s0,s0,-4
    8001478a:	00143413          	seqz	s0,s0
    8001478e:	b111                	j	80014392 <software_interrupt_ssi+0x4d2>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014790:	57fd                	li	a5,-1
    80014792:	6498                	ld	a4,8(s1)
    80014794:	17fe                	slli	a5,a5,0x3f
    80014796:	0785                	addi	a5,a5,1
    80014798:	a6f710e3          	bne	a4,a5,800141f8 <software_interrupt_ssi+0x338>
    8001479c:	00044417          	auipc	s0,0x44
    800147a0:	87842403          	lw	s0,-1928(s0) # 80058014 <excpt+0x4>
    800147a4:	1475                	addi	s0,s0,-3
    800147a6:	00143413          	seqz	s0,s0
    800147aa:	b4b9                	j	800141f8 <software_interrupt_ssi+0x338>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147ac:	57fd                	li	a5,-1
    800147ae:	6498                	ld	a4,8(s1)
    800147b0:	17fe                	slli	a5,a5,0x3f
    800147b2:	0785                	addi	a5,a5,1
    800147b4:	9af710e3          	bne	a4,a5,80014154 <software_interrupt_ssi+0x294>
    800147b8:	00044417          	auipc	s0,0x44
    800147bc:	85c42403          	lw	s0,-1956(s0) # 80058014 <excpt+0x4>
    800147c0:	1471                	addi	s0,s0,-4
    800147c2:	00143413          	seqz	s0,s0
    800147c6:	b279                	j	80014154 <software_interrupt_ssi+0x294>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800147c8:	57fd                	li	a5,-1
    800147ca:	6498                	ld	a4,8(s1)
    800147cc:	17fe                	slli	a5,a5,0x3f
    800147ce:	0785                	addi	a5,a5,1
    800147d0:	86f714e3          	bne	a4,a5,80014038 <software_interrupt_ssi+0x178>
    800147d4:	00044417          	auipc	s0,0x44
    800147d8:	84042403          	lw	s0,-1984(s0) # 80058014 <excpt+0x4>
    800147dc:	1475                	addi	s0,s0,-3
    800147de:	00143413          	seqz	s0,s0
    800147e2:	857ff06f          	j	80014038 <software_interrupt_ssi+0x178>
    800147e6:	00044717          	auipc	a4,0x44
    800147ea:	82e72703          	lw	a4,-2002(a4) # 80058014 <excpt+0x4>
    800147ee:	478d                	li	a5,3
    800147f0:	80f71fe3          	bne	a4,a5,8001400e <software_interrupt_ssi+0x14e>
    800147f4:	82fff06f          	j	80014022 <software_interrupt_ssi+0x162>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800147f8:	00044717          	auipc	a4,0x44
    800147fc:	81c72703          	lw	a4,-2020(a4) # 80058014 <excpt+0x4>
    80014800:	4791                	li	a5,4
    80014802:	f6f71063          	bne	a4,a5,80013f62 <software_interrupt_ssi+0xa2>
    80014806:	f70ff06f          	j	80013f76 <software_interrupt_ssi+0xb6>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001480a:	00044717          	auipc	a4,0x44
    8001480e:	80a72703          	lw	a4,-2038(a4) # 80058014 <excpt+0x4>
    80014812:	4791                	li	a5,4
    80014814:	b4f71ae3          	bne	a4,a5,80014368 <software_interrupt_ssi+0x4a8>
    80014818:	b695                	j	8001437c <software_interrupt_ssi+0x4bc>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001481a:	00043717          	auipc	a4,0x43
    8001481e:	7fa72703          	lw	a4,2042(a4) # 80058014 <excpt+0x4>
    80014822:	478d                	li	a5,3
    80014824:	bef714e3          	bne	a4,a5,8001440c <software_interrupt_ssi+0x54c>
    80014828:	bee5                	j	80014420 <software_interrupt_ssi+0x560>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001482a:	00043717          	auipc	a4,0x43
    8001482e:	7ea72703          	lw	a4,2026(a4) # 80058014 <excpt+0x4>
    80014832:	478d                	li	a5,3
    80014834:	d8f71ce3          	bne	a4,a5,800145cc <software_interrupt_ssi+0x70c>
    80014838:	b365                	j	800145e0 <software_interrupt_ssi+0x720>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001483a:	00043717          	auipc	a4,0x43
    8001483e:	7da72703          	lw	a4,2010(a4) # 80058014 <excpt+0x4>
    80014842:	4791                	li	a5,4
    80014844:	8ef713e3          	bne	a4,a5,8001412a <software_interrupt_ssi+0x26a>
    80014848:	8f7ff06f          	j	8001413e <software_interrupt_ssi+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001484c:	00043717          	auipc	a4,0x43
    80014850:	7c872703          	lw	a4,1992(a4) # 80058014 <excpt+0x4>
    80014854:	478d                	li	a5,3
    80014856:	96f71ce3          	bne	a4,a5,800141ce <software_interrupt_ssi+0x30e>
    8001485a:	b261                	j	800141e2 <software_interrupt_ssi+0x322>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001485c:	00043717          	auipc	a4,0x43
    80014860:	7b872703          	lw	a4,1976(a4) # 80058014 <excpt+0x4>
    80014864:	4791                	li	a5,4
    80014866:	ccf711e3          	bne	a4,a5,80014528 <software_interrupt_ssi+0x668>
    8001486a:	b9c9                	j	8001453c <software_interrupt_ssi+0x67c>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001486c:	0001a517          	auipc	a0,0x1a
    80014870:	99450513          	addi	a0,a0,-1644 # 8002e200 <__func__.0+0x318>
    80014874:	3b7160ef          	jal	8002b42a <printf>
    80014878:	02900513          	li	a0,41
    8001487c:	09d150ef          	jal	8002a118 <putchar>
    80014880:	b931                	j	8001449c <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014882:	0001a517          	auipc	a0,0x1a
    80014886:	97e50513          	addi	a0,a0,-1666 # 8002e200 <__func__.0+0x318>
    8001488a:	3a1160ef          	jal	8002b42a <printf>
    8001488e:	02900513          	li	a0,41
    80014892:	087150ef          	jal	8002a118 <putchar>
    80014896:	809ff06f          	j	8001409e <software_interrupt_ssi+0x1de>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001489a:	0001a517          	auipc	a0,0x1a
    8001489e:	96650513          	addi	a0,a0,-1690 # 8002e200 <__func__.0+0x318>
    800148a2:	389160ef          	jal	8002b42a <printf>
    800148a6:	02900513          	li	a0,41
    800148aa:	06f150ef          	jal	8002a118 <putchar>
    800148ae:	b42d                	j	800142d8 <software_interrupt_ssi+0x418>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800148b0:	0001a517          	auipc	a0,0x1a
    800148b4:	95050513          	addi	a0,a0,-1712 # 8002e200 <__func__.0+0x318>
    800148b8:	373160ef          	jal	8002b42a <printf>
    800148bc:	02900513          	li	a0,41
    800148c0:	059150ef          	jal	8002a118 <putchar>
    800148c4:	ba69                	j	8001425e <software_interrupt_ssi+0x39e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800148c6:	0001a517          	auipc	a0,0x1a
    800148ca:	93a50513          	addi	a0,a0,-1734 # 8002e200 <__func__.0+0x318>
    800148ce:	35d160ef          	jal	8002b42a <printf>
    800148d2:	02900513          	li	a0,41
    800148d6:	043150ef          	jal	8002a118 <putchar>
    800148da:	bbf5                	j	800146d6 <software_interrupt_ssi+0x816>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800148dc:	0001a517          	auipc	a0,0x1a
    800148e0:	92450513          	addi	a0,a0,-1756 # 8002e200 <__func__.0+0x318>
    800148e4:	347160ef          	jal	8002b42a <printf>
    800148e8:	02900513          	li	a0,41
    800148ec:	02d150ef          	jal	8002a118 <putchar>
    800148f0:	b3b5                	j	8001465c <software_interrupt_ssi+0x79c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800148f2:	00043717          	auipc	a4,0x43
    800148f6:	72272703          	lw	a4,1826(a4) # 80058014 <excpt+0x4>
    800148fa:	4791                	li	a5,4
    800148fc:	0001a597          	auipc	a1,0x1a
    80014900:	8ac58593          	addi	a1,a1,-1876 # 8002e1a8 <__func__.0+0x2c0>
    80014904:	c0f701e3          	beq	a4,a5,80014506 <software_interrupt_ssi+0x646>
    80014908:	0001a597          	auipc	a1,0x1a
    8001490c:	8b058593          	addi	a1,a1,-1872 # 8002e1b8 <__func__.0+0x2d0>
    80014910:	bedd                	j	80014506 <software_interrupt_ssi+0x646>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014912:	00043417          	auipc	s0,0x43
    80014916:	70242403          	lw	s0,1794(s0) # 80058014 <excpt+0x4>
    8001491a:	1471                	addi	s0,s0,-4
    8001491c:	00143413          	seqz	s0,s0
    80014920:	e74ff06f          	j	80013f94 <software_interrupt_ssi+0xd4>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014924:	00043717          	auipc	a4,0x43
    80014928:	6f072703          	lw	a4,1776(a4) # 80058014 <excpt+0x4>
    8001492c:	478d                	li	a5,3
    8001492e:	0001a597          	auipc	a1,0x1a
    80014932:	87a58593          	addi	a1,a1,-1926 # 8002e1a8 <__func__.0+0x2c0>
    80014936:	eaf70b63          	beq	a4,a5,80013fec <software_interrupt_ssi+0x12c>
    8001493a:	0001a597          	auipc	a1,0x1a
    8001493e:	87e58593          	addi	a1,a1,-1922 # 8002e1b8 <__func__.0+0x2d0>
    80014942:	eaaff06f          	j	80013fec <software_interrupt_ssi+0x12c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014946:	00043717          	auipc	a4,0x43
    8001494a:	6ce72703          	lw	a4,1742(a4) # 80058014 <excpt+0x4>
    8001494e:	4791                	li	a5,4
    80014950:	0001a597          	auipc	a1,0x1a
    80014954:	85858593          	addi	a1,a1,-1960 # 8002e1a8 <__func__.0+0x2c0>
    80014958:	faf70863          	beq	a4,a5,80014108 <software_interrupt_ssi+0x248>
    8001495c:	0001a597          	auipc	a1,0x1a
    80014960:	85c58593          	addi	a1,a1,-1956 # 8002e1b8 <__func__.0+0x2d0>
    80014964:	fa4ff06f          	j	80014108 <software_interrupt_ssi+0x248>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014968:	00043717          	auipc	a4,0x43
    8001496c:	6ac72703          	lw	a4,1708(a4) # 80058014 <excpt+0x4>
    80014970:	478d                	li	a5,3
    80014972:	0001a597          	auipc	a1,0x1a
    80014976:	83658593          	addi	a1,a1,-1994 # 8002e1a8 <__func__.0+0x2c0>
    8001497a:	c2f708e3          	beq	a4,a5,800145aa <software_interrupt_ssi+0x6ea>
    8001497e:	0001a597          	auipc	a1,0x1a
    80014982:	83a58593          	addi	a1,a1,-1990 # 8002e1b8 <__func__.0+0x2d0>
    80014986:	b115                	j	800145aa <software_interrupt_ssi+0x6ea>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014988:	00043717          	auipc	a4,0x43
    8001498c:	68c72703          	lw	a4,1676(a4) # 80058014 <excpt+0x4>
    80014990:	478d                	li	a5,3
    80014992:	0001a597          	auipc	a1,0x1a
    80014996:	81658593          	addi	a1,a1,-2026 # 8002e1a8 <__func__.0+0x2c0>
    8001499a:	a4f708e3          	beq	a4,a5,800143ea <software_interrupt_ssi+0x52a>
    8001499e:	0001a597          	auipc	a1,0x1a
    800149a2:	81a58593          	addi	a1,a1,-2022 # 8002e1b8 <__func__.0+0x2d0>
    800149a6:	b491                	j	800143ea <software_interrupt_ssi+0x52a>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800149a8:	00043717          	auipc	a4,0x43
    800149ac:	66c72703          	lw	a4,1644(a4) # 80058014 <excpt+0x4>
    800149b0:	4791                	li	a5,4
    800149b2:	00019597          	auipc	a1,0x19
    800149b6:	7f658593          	addi	a1,a1,2038 # 8002e1a8 <__func__.0+0x2c0>
    800149ba:	d8f70363          	beq	a4,a5,80013f40 <software_interrupt_ssi+0x80>
    800149be:	00019597          	auipc	a1,0x19
    800149c2:	7fa58593          	addi	a1,a1,2042 # 8002e1b8 <__func__.0+0x2d0>
    800149c6:	d7aff06f          	j	80013f40 <software_interrupt_ssi+0x80>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800149ca:	00043717          	auipc	a4,0x43
    800149ce:	64a72703          	lw	a4,1610(a4) # 80058014 <excpt+0x4>
    800149d2:	478d                	li	a5,3
    800149d4:	00019597          	auipc	a1,0x19
    800149d8:	7d458593          	addi	a1,a1,2004 # 8002e1a8 <__func__.0+0x2c0>
    800149dc:	fcf70863          	beq	a4,a5,800141ac <software_interrupt_ssi+0x2ec>
    800149e0:	00019597          	auipc	a1,0x19
    800149e4:	7d858593          	addi	a1,a1,2008 # 8002e1b8 <__func__.0+0x2d0>
    800149e8:	fc4ff06f          	j	800141ac <software_interrupt_ssi+0x2ec>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800149ec:	00043717          	auipc	a4,0x43
    800149f0:	62872703          	lw	a4,1576(a4) # 80058014 <excpt+0x4>
    800149f4:	4791                	li	a5,4
    800149f6:	00019597          	auipc	a1,0x19
    800149fa:	7b258593          	addi	a1,a1,1970 # 8002e1a8 <__func__.0+0x2c0>
    800149fe:	94f704e3          	beq	a4,a5,80014346 <software_interrupt_ssi+0x486>
    80014a02:	00019597          	auipc	a1,0x19
    80014a06:	7b658593          	addi	a1,a1,1974 # 8002e1b8 <__func__.0+0x2d0>
    80014a0a:	ba35                	j	80014346 <software_interrupt_ssi+0x486>

0000000080014a0c <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80014a0c:	1141                	addi	sp,sp,-16

    TEST_START();
    80014a0e:	00018597          	auipc	a1,0x18
    80014a12:	04a58593          	addi	a1,a1,74 # 8002ca58 <__func__.0>
    80014a16:	00019517          	auipc	a0,0x19
    80014a1a:	7b250513          	addi	a0,a0,1970 # 8002e1c8 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    80014a1e:	e406                	sd	ra,8(sp)
    TEST_START();
    80014a20:	20b160ef          	jal	8002b42a <printf>
    80014a24:	4529                	li	a0,10
    80014a26:	6f2150ef          	jal	8002a118 <putchar>

    TEST_SETUP_EXCEPT();
    80014a2a:	be2ec0ef          	jal	80000e0c <test_setup_except_function>

    TEST_END();
    80014a2e:	00019597          	auipc	a1,0x19
    80014a32:	77a58593          	addi	a1,a1,1914 # 8002e1a8 <__func__.0+0x2c0>
    80014a36:	0001a517          	auipc	a0,0x1a
    80014a3a:	82a50513          	addi	a0,a0,-2006 # 8002e260 <__func__.0+0x378>
    80014a3e:	1ed160ef          	jal	8002b42a <printf>
    80014a42:	4511                	li	a0,4
    80014a44:	cc4ec0ef          	jal	80000f08 <goto_priv>
    80014a48:	dddec0ef          	jal	80001824 <reset_state>


    80014a4c:	60a2                	ld	ra,8(sp)
    80014a4e:	4505                	li	a0,1
    80014a50:	0141                	addi	sp,sp,16
    80014a52:	8082                	ret

0000000080014a54 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80014a54:	1101                	addi	sp,sp,-32

    TEST_START();
    80014a56:	00018597          	auipc	a1,0x18
    80014a5a:	01a58593          	addi	a1,a1,26 # 8002ca70 <__func__.26>
    80014a5e:	00019517          	auipc	a0,0x19
    80014a62:	76a50513          	addi	a0,a0,1898 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    80014a66:	ec06                	sd	ra,24(sp)
    80014a68:	e822                	sd	s0,16(sp)
    80014a6a:	e426                	sd	s1,8(sp)
    TEST_START();
    80014a6c:	1bf160ef          	jal	8002b42a <printf>
    80014a70:	4529                	li	a0,10
    80014a72:	6a6150ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80014a76:	450d                	li	a0,3
    80014a78:	c90ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014a7c:	b65eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014a80:	f45eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014a84:	cf9eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80014a88:	450d                	li	a0,3
    80014a8a:	c7eec0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a8e:	4509                	li	a0,2
    80014a90:	b98ec0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014a94:	b78ec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014a98:	400197b7          	lui	a5,0x40019
    80014a9c:	078a                	slli	a5,a5,0x2
    80014a9e:	00043417          	auipc	s0,0x43
    80014aa2:	57240413          	addi	s0,s0,1394 # 80058010 <excpt>
    80014aa6:	00000297          	auipc	t0,0x0
    80014aaa:	00c28293          	addi	t0,t0,12 # 80014ab2 <instruction_page_fault_1+0x5e>
    80014aae:	02543c23          	sd	t0,56(s0)
    80014ab2:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80014ab4:	08200593          	li	a1,130
    80014ab8:	0001e617          	auipc	a2,0x1e
    80014abc:	70860613          	addi	a2,a2,1800 # 800331c0 <__func__.0+0x52d8>
    80014ac0:	00019517          	auipc	a0,0x19
    80014ac4:	72050513          	addi	a0,a0,1824 # 8002e1e0 <__func__.0+0x2f8>
    80014ac8:	163160ef          	jal	8002b42a <printf>
    80014acc:	00043797          	auipc	a5,0x43
    80014ad0:	5457c783          	lbu	a5,1349(a5) # 80058011 <excpt+0x1>
    80014ad4:	00019597          	auipc	a1,0x19
    80014ad8:	6e458593          	addi	a1,a1,1764 # 8002e1b8 <__func__.0+0x2d0>
    80014adc:	cf89                	beqz	a5,80014af6 <instruction_page_fault_1+0xa2>
    80014ade:	6418                	ld	a4,8(s0)
    80014ae0:	47b1                	li	a5,12
    80014ae2:	00019597          	auipc	a1,0x19
    80014ae6:	6c658593          	addi	a1,a1,1734 # 8002e1a8 <__func__.0+0x2c0>
    80014aea:	00f70663          	beq	a4,a5,80014af6 <instruction_page_fault_1+0xa2>
    80014aee:	00019597          	auipc	a1,0x19
    80014af2:	6ca58593          	addi	a1,a1,1738 # 8002e1b8 <__func__.0+0x2d0>
    80014af6:	00019517          	auipc	a0,0x19
    80014afa:	70250513          	addi	a0,a0,1794 # 8002e1f8 <__func__.0+0x310>
    80014afe:	12d160ef          	jal	8002b42a <printf>
    80014b02:	00043797          	auipc	a5,0x43
    80014b06:	50f7c783          	lbu	a5,1295(a5) # 80058011 <excpt+0x1>
    80014b0a:	c789                	beqz	a5,80014b14 <instruction_page_fault_1+0xc0>
    80014b0c:	6418                	ld	a4,8(s0)
    80014b0e:	47b1                	li	a5,12
    80014b10:	00f70c63          	beq	a4,a5,80014b28 <instruction_page_fault_1+0xd4>
    80014b14:	00019517          	auipc	a0,0x19
    80014b18:	6ec50513          	addi	a0,a0,1772 # 8002e200 <__func__.0+0x318>
    80014b1c:	10f160ef          	jal	8002b42a <printf>
    80014b20:	02900513          	li	a0,41
    80014b24:	5f4150ef          	jal	8002a118 <putchar>
    80014b28:	4529                	li	a0,10
    80014b2a:	5ee150ef          	jal	8002a118 <putchar>
    80014b2e:	00043797          	auipc	a5,0x43
    80014b32:	4e37c783          	lbu	a5,1251(a5) # 80058011 <excpt+0x1>
    80014b36:	4481                	li	s1,0
    80014b38:	c789                	beqz	a5,80014b42 <instruction_page_fault_1+0xee>
    80014b3a:	6404                	ld	s1,8(s0)
    80014b3c:	14d1                	addi	s1,s1,-12
    80014b3e:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014b42:	acaec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014b46:	001007b7          	lui	a5,0x100
    80014b4a:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014b4e:	07b2                	slli	a5,a5,0xc
    80014b50:	00000297          	auipc	t0,0x0
    80014b54:	00c28293          	addi	t0,t0,12 # 80014b5c <instruction_page_fault_1+0x108>
    80014b58:	02543c23          	sd	t0,56(s0)
    80014b5c:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b5e:	08200593          	li	a1,130
    80014b62:	0001e617          	auipc	a2,0x1e
    80014b66:	69660613          	addi	a2,a2,1686 # 800331f8 <__func__.0+0x5310>
    80014b6a:	00019517          	auipc	a0,0x19
    80014b6e:	67650513          	addi	a0,a0,1654 # 8002e1e0 <__func__.0+0x2f8>
    80014b72:	0b9160ef          	jal	8002b42a <printf>
    80014b76:	00043797          	auipc	a5,0x43
    80014b7a:	49b7c783          	lbu	a5,1179(a5) # 80058011 <excpt+0x1>
    80014b7e:	00019597          	auipc	a1,0x19
    80014b82:	63a58593          	addi	a1,a1,1594 # 8002e1b8 <__func__.0+0x2d0>
    80014b86:	cf89                	beqz	a5,80014ba0 <instruction_page_fault_1+0x14c>
    80014b88:	6418                	ld	a4,8(s0)
    80014b8a:	47b1                	li	a5,12
    80014b8c:	00019597          	auipc	a1,0x19
    80014b90:	61c58593          	addi	a1,a1,1564 # 8002e1a8 <__func__.0+0x2c0>
    80014b94:	00f70663          	beq	a4,a5,80014ba0 <instruction_page_fault_1+0x14c>
    80014b98:	00019597          	auipc	a1,0x19
    80014b9c:	62058593          	addi	a1,a1,1568 # 8002e1b8 <__func__.0+0x2d0>
    80014ba0:	00019517          	auipc	a0,0x19
    80014ba4:	65850513          	addi	a0,a0,1624 # 8002e1f8 <__func__.0+0x310>
    80014ba8:	083160ef          	jal	8002b42a <printf>
    80014bac:	00043797          	auipc	a5,0x43
    80014bb0:	4657c783          	lbu	a5,1125(a5) # 80058011 <excpt+0x1>
    80014bb4:	c789                	beqz	a5,80014bbe <instruction_page_fault_1+0x16a>
    80014bb6:	6418                	ld	a4,8(s0)
    80014bb8:	47b1                	li	a5,12
    80014bba:	00f70c63          	beq	a4,a5,80014bd2 <instruction_page_fault_1+0x17e>
    80014bbe:	00019517          	auipc	a0,0x19
    80014bc2:	64250513          	addi	a0,a0,1602 # 8002e200 <__func__.0+0x318>
    80014bc6:	065160ef          	jal	8002b42a <printf>
    80014bca:	02900513          	li	a0,41
    80014bce:	54a150ef          	jal	8002a118 <putchar>
    80014bd2:	4529                	li	a0,10
    80014bd4:	544150ef          	jal	8002a118 <putchar>
    80014bd8:	c095                	beqz	s1,80014bfc <instruction_page_fault_1+0x1a8>
    80014bda:	00043497          	auipc	s1,0x43
    80014bde:	4374c483          	lbu	s1,1079(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014be2:	00019597          	auipc	a1,0x19
    80014be6:	5d658593          	addi	a1,a1,1494 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014bea:	cc91                	beqz	s1,80014c06 <instruction_page_fault_1+0x1b2>
    80014bec:	6418                	ld	a4,8(s0)
    80014bee:	47b1                	li	a5,12
    TEST_END();
    80014bf0:	00019597          	auipc	a1,0x19
    80014bf4:	5b858593          	addi	a1,a1,1464 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014bf8:	00f70763          	beq	a4,a5,80014c06 <instruction_page_fault_1+0x1b2>
    80014bfc:	4481                	li	s1,0
    TEST_END();
    80014bfe:	00019597          	auipc	a1,0x19
    80014c02:	5ba58593          	addi	a1,a1,1466 # 8002e1b8 <__func__.0+0x2d0>
    80014c06:	00019517          	auipc	a0,0x19
    80014c0a:	65a50513          	addi	a0,a0,1626 # 8002e260 <__func__.0+0x378>
    80014c0e:	01d160ef          	jal	8002b42a <printf>
    80014c12:	4511                	li	a0,4
    80014c14:	af4ec0ef          	jal	80000f08 <goto_priv>
    80014c18:	c0dec0ef          	jal	80001824 <reset_state>
}
    80014c1c:	60e2                	ld	ra,24(sp)
    80014c1e:	6442                	ld	s0,16(sp)
    80014c20:	8526                	mv	a0,s1
    80014c22:	64a2                	ld	s1,8(sp)
    80014c24:	6105                	addi	sp,sp,32
    80014c26:	8082                	ret

0000000080014c28 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80014c28:	1101                	addi	sp,sp,-32

    TEST_START();
    80014c2a:	00018597          	auipc	a1,0x18
    80014c2e:	e6658593          	addi	a1,a1,-410 # 8002ca90 <__func__.24>
    80014c32:	00019517          	auipc	a0,0x19
    80014c36:	59650513          	addi	a0,a0,1430 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80014c3a:	ec06                	sd	ra,24(sp)
    80014c3c:	e822                	sd	s0,16(sp)
    80014c3e:	e426                	sd	s1,8(sp)
    TEST_START();
    80014c40:	7ea160ef          	jal	8002b42a <printf>
    80014c44:	4529                	li	a0,10
    80014c46:	4d2150ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80014c4a:	450d                	li	a0,3
    80014c4c:	abcec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014c50:	991eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014c54:	d71eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014c58:	b25eb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_HS);
    80014c5c:	450d                	li	a0,3
    80014c5e:	aaaec0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014c62:	9aaec0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014c66:	000807b7          	lui	a5,0x80
    80014c6a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014c6c:	07b6                	slli	a5,a5,0xd
    80014c6e:	00043417          	auipc	s0,0x43
    80014c72:	3a240413          	addi	s0,s0,930 # 80058010 <excpt>
    80014c76:	00000297          	auipc	t0,0x0
    80014c7a:	00c28293          	addi	t0,t0,12 # 80014c82 <instruction_page_fault_2+0x5a>
    80014c7e:	02543c23          	sd	t0,56(s0)
    80014c82:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c84:	08200593          	li	a1,130
    80014c88:	0001e617          	auipc	a2,0x1e
    80014c8c:	5a860613          	addi	a2,a2,1448 # 80033230 <__func__.0+0x5348>
    80014c90:	00019517          	auipc	a0,0x19
    80014c94:	55050513          	addi	a0,a0,1360 # 8002e1e0 <__func__.0+0x2f8>
    80014c98:	792160ef          	jal	8002b42a <printf>
    80014c9c:	00043797          	auipc	a5,0x43
    80014ca0:	3757c783          	lbu	a5,885(a5) # 80058011 <excpt+0x1>
    80014ca4:	00019597          	auipc	a1,0x19
    80014ca8:	51458593          	addi	a1,a1,1300 # 8002e1b8 <__func__.0+0x2d0>
    80014cac:	cf89                	beqz	a5,80014cc6 <instruction_page_fault_2+0x9e>
    80014cae:	6418                	ld	a4,8(s0)
    80014cb0:	47b1                	li	a5,12
    80014cb2:	00019597          	auipc	a1,0x19
    80014cb6:	4f658593          	addi	a1,a1,1270 # 8002e1a8 <__func__.0+0x2c0>
    80014cba:	00f70663          	beq	a4,a5,80014cc6 <instruction_page_fault_2+0x9e>
    80014cbe:	00019597          	auipc	a1,0x19
    80014cc2:	4fa58593          	addi	a1,a1,1274 # 8002e1b8 <__func__.0+0x2d0>
    80014cc6:	00019517          	auipc	a0,0x19
    80014cca:	53250513          	addi	a0,a0,1330 # 8002e1f8 <__func__.0+0x310>
    80014cce:	75c160ef          	jal	8002b42a <printf>
    80014cd2:	00043797          	auipc	a5,0x43
    80014cd6:	33f7c783          	lbu	a5,831(a5) # 80058011 <excpt+0x1>
    80014cda:	c789                	beqz	a5,80014ce4 <instruction_page_fault_2+0xbc>
    80014cdc:	6418                	ld	a4,8(s0)
    80014cde:	47b1                	li	a5,12
    80014ce0:	00f70c63          	beq	a4,a5,80014cf8 <instruction_page_fault_2+0xd0>
    80014ce4:	00019517          	auipc	a0,0x19
    80014ce8:	51c50513          	addi	a0,a0,1308 # 8002e200 <__func__.0+0x318>
    80014cec:	73e160ef          	jal	8002b42a <printf>
    80014cf0:	02900513          	li	a0,41
    80014cf4:	424150ef          	jal	8002a118 <putchar>
    80014cf8:	4529                	li	a0,10
    80014cfa:	41e150ef          	jal	8002a118 <putchar>
    80014cfe:	00043497          	auipc	s1,0x43
    80014d02:	3134c483          	lbu	s1,787(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014d06:	00019597          	auipc	a1,0x19
    80014d0a:	4b258593          	addi	a1,a1,1202 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014d0e:	cc91                	beqz	s1,80014d2a <instruction_page_fault_2+0x102>
    80014d10:	6418                	ld	a4,8(s0)
    80014d12:	47b1                	li	a5,12
    TEST_END();
    80014d14:	00019597          	auipc	a1,0x19
    80014d18:	49458593          	addi	a1,a1,1172 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014d1c:	00f70763          	beq	a4,a5,80014d2a <instruction_page_fault_2+0x102>
    80014d20:	4481                	li	s1,0
    TEST_END();
    80014d22:	00019597          	auipc	a1,0x19
    80014d26:	49658593          	addi	a1,a1,1174 # 8002e1b8 <__func__.0+0x2d0>
    80014d2a:	00019517          	auipc	a0,0x19
    80014d2e:	53650513          	addi	a0,a0,1334 # 8002e260 <__func__.0+0x378>
    80014d32:	6f8160ef          	jal	8002b42a <printf>
    80014d36:	4511                	li	a0,4
    80014d38:	9d0ec0ef          	jal	80000f08 <goto_priv>
    80014d3c:	ae9ec0ef          	jal	80001824 <reset_state>
}
    80014d40:	60e2                	ld	ra,24(sp)
    80014d42:	6442                	ld	s0,16(sp)
    80014d44:	8526                	mv	a0,s1
    80014d46:	64a2                	ld	s1,8(sp)
    80014d48:	6105                	addi	sp,sp,32
    80014d4a:	8082                	ret

0000000080014d4c <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80014d4c:	1101                	addi	sp,sp,-32

    TEST_START();
    80014d4e:	00018597          	auipc	a1,0x18
    80014d52:	d6258593          	addi	a1,a1,-670 # 8002cab0 <__func__.23>
    80014d56:	00019517          	auipc	a0,0x19
    80014d5a:	47250513          	addi	a0,a0,1138 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80014d5e:	ec06                	sd	ra,24(sp)
    80014d60:	e822                	sd	s0,16(sp)
    80014d62:	e426                	sd	s1,8(sp)
    TEST_START();
    80014d64:	6c6160ef          	jal	8002b42a <printf>
    80014d68:	4529                	li	a0,10
    80014d6a:	3ae150ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80014d6e:	450d                	li	a0,3
    80014d70:	998ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014d74:	86deb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014d78:	c4deb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014d7c:	a01eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80014d80:	4509                	li	a0,2
    80014d82:	986ec0ef          	jal	80000f08 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014d86:	886ec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014d8a:	400197b7          	lui	a5,0x40019
    80014d8e:	078a                	slli	a5,a5,0x2
    80014d90:	00043417          	auipc	s0,0x43
    80014d94:	28040413          	addi	s0,s0,640 # 80058010 <excpt>
    80014d98:	00000297          	auipc	t0,0x0
    80014d9c:	00c28293          	addi	t0,t0,12 # 80014da4 <instruction_page_fault_3+0x58>
    80014da0:	02543c23          	sd	t0,56(s0)
    80014da4:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80014da6:	08200593          	li	a1,130
    80014daa:	0001e617          	auipc	a2,0x1e
    80014dae:	4be60613          	addi	a2,a2,1214 # 80033268 <__func__.0+0x5380>
    80014db2:	00019517          	auipc	a0,0x19
    80014db6:	42e50513          	addi	a0,a0,1070 # 8002e1e0 <__func__.0+0x2f8>
    80014dba:	670160ef          	jal	8002b42a <printf>
    80014dbe:	00043797          	auipc	a5,0x43
    80014dc2:	2537c783          	lbu	a5,595(a5) # 80058011 <excpt+0x1>
    80014dc6:	00019597          	auipc	a1,0x19
    80014dca:	3f258593          	addi	a1,a1,1010 # 8002e1b8 <__func__.0+0x2d0>
    80014dce:	cf89                	beqz	a5,80014de8 <instruction_page_fault_3+0x9c>
    80014dd0:	6418                	ld	a4,8(s0)
    80014dd2:	47b1                	li	a5,12
    80014dd4:	00019597          	auipc	a1,0x19
    80014dd8:	3d458593          	addi	a1,a1,980 # 8002e1a8 <__func__.0+0x2c0>
    80014ddc:	00f70663          	beq	a4,a5,80014de8 <instruction_page_fault_3+0x9c>
    80014de0:	00019597          	auipc	a1,0x19
    80014de4:	3d858593          	addi	a1,a1,984 # 8002e1b8 <__func__.0+0x2d0>
    80014de8:	00019517          	auipc	a0,0x19
    80014dec:	41050513          	addi	a0,a0,1040 # 8002e1f8 <__func__.0+0x310>
    80014df0:	63a160ef          	jal	8002b42a <printf>
    80014df4:	00043797          	auipc	a5,0x43
    80014df8:	21d7c783          	lbu	a5,541(a5) # 80058011 <excpt+0x1>
    80014dfc:	c789                	beqz	a5,80014e06 <instruction_page_fault_3+0xba>
    80014dfe:	6418                	ld	a4,8(s0)
    80014e00:	47b1                	li	a5,12
    80014e02:	00f70c63          	beq	a4,a5,80014e1a <instruction_page_fault_3+0xce>
    80014e06:	00019517          	auipc	a0,0x19
    80014e0a:	3fa50513          	addi	a0,a0,1018 # 8002e200 <__func__.0+0x318>
    80014e0e:	61c160ef          	jal	8002b42a <printf>
    80014e12:	02900513          	li	a0,41
    80014e16:	302150ef          	jal	8002a118 <putchar>
    80014e1a:	4529                	li	a0,10
    80014e1c:	2fc150ef          	jal	8002a118 <putchar>
    80014e20:	00043797          	auipc	a5,0x43
    80014e24:	1f17c783          	lbu	a5,497(a5) # 80058011 <excpt+0x1>
    80014e28:	4481                	li	s1,0
    80014e2a:	c789                	beqz	a5,80014e34 <instruction_page_fault_3+0xe8>
    80014e2c:	6404                	ld	s1,8(s0)
    80014e2e:	14d1                	addi	s1,s1,-12
    80014e30:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014e34:	fd9eb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014e38:	001007b7          	lui	a5,0x100
    80014e3c:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014e40:	07b2                	slli	a5,a5,0xc
    80014e42:	00000297          	auipc	t0,0x0
    80014e46:	00c28293          	addi	t0,t0,12 # 80014e4e <instruction_page_fault_3+0x102>
    80014e4a:	02543c23          	sd	t0,56(s0)
    80014e4e:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e50:	08200593          	li	a1,130
    80014e54:	0001e617          	auipc	a2,0x1e
    80014e58:	44c60613          	addi	a2,a2,1100 # 800332a0 <__func__.0+0x53b8>
    80014e5c:	00019517          	auipc	a0,0x19
    80014e60:	38450513          	addi	a0,a0,900 # 8002e1e0 <__func__.0+0x2f8>
    80014e64:	5c6160ef          	jal	8002b42a <printf>
    80014e68:	00043797          	auipc	a5,0x43
    80014e6c:	1a97c783          	lbu	a5,425(a5) # 80058011 <excpt+0x1>
    80014e70:	00019597          	auipc	a1,0x19
    80014e74:	34858593          	addi	a1,a1,840 # 8002e1b8 <__func__.0+0x2d0>
    80014e78:	cf89                	beqz	a5,80014e92 <instruction_page_fault_3+0x146>
    80014e7a:	6418                	ld	a4,8(s0)
    80014e7c:	47b1                	li	a5,12
    80014e7e:	00019597          	auipc	a1,0x19
    80014e82:	32a58593          	addi	a1,a1,810 # 8002e1a8 <__func__.0+0x2c0>
    80014e86:	00f70663          	beq	a4,a5,80014e92 <instruction_page_fault_3+0x146>
    80014e8a:	00019597          	auipc	a1,0x19
    80014e8e:	32e58593          	addi	a1,a1,814 # 8002e1b8 <__func__.0+0x2d0>
    80014e92:	00019517          	auipc	a0,0x19
    80014e96:	36650513          	addi	a0,a0,870 # 8002e1f8 <__func__.0+0x310>
    80014e9a:	590160ef          	jal	8002b42a <printf>
    80014e9e:	00043797          	auipc	a5,0x43
    80014ea2:	1737c783          	lbu	a5,371(a5) # 80058011 <excpt+0x1>
    80014ea6:	c789                	beqz	a5,80014eb0 <instruction_page_fault_3+0x164>
    80014ea8:	6418                	ld	a4,8(s0)
    80014eaa:	47b1                	li	a5,12
    80014eac:	00f70c63          	beq	a4,a5,80014ec4 <instruction_page_fault_3+0x178>
    80014eb0:	00019517          	auipc	a0,0x19
    80014eb4:	35050513          	addi	a0,a0,848 # 8002e200 <__func__.0+0x318>
    80014eb8:	572160ef          	jal	8002b42a <printf>
    80014ebc:	02900513          	li	a0,41
    80014ec0:	258150ef          	jal	8002a118 <putchar>
    80014ec4:	4529                	li	a0,10
    80014ec6:	252150ef          	jal	8002a118 <putchar>
    80014eca:	c095                	beqz	s1,80014eee <instruction_page_fault_3+0x1a2>
    80014ecc:	00043497          	auipc	s1,0x43
    80014ed0:	1454c483          	lbu	s1,325(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014ed4:	00019597          	auipc	a1,0x19
    80014ed8:	2e458593          	addi	a1,a1,740 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014edc:	cc91                	beqz	s1,80014ef8 <instruction_page_fault_3+0x1ac>
    80014ede:	6418                	ld	a4,8(s0)
    80014ee0:	47b1                	li	a5,12
    TEST_END();
    80014ee2:	00019597          	auipc	a1,0x19
    80014ee6:	2c658593          	addi	a1,a1,710 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014eea:	00f70763          	beq	a4,a5,80014ef8 <instruction_page_fault_3+0x1ac>
    80014eee:	4481                	li	s1,0
    TEST_END();
    80014ef0:	00019597          	auipc	a1,0x19
    80014ef4:	2c858593          	addi	a1,a1,712 # 8002e1b8 <__func__.0+0x2d0>
    80014ef8:	00019517          	auipc	a0,0x19
    80014efc:	36850513          	addi	a0,a0,872 # 8002e260 <__func__.0+0x378>
    80014f00:	52a160ef          	jal	8002b42a <printf>
    80014f04:	4511                	li	a0,4
    80014f06:	802ec0ef          	jal	80000f08 <goto_priv>
    80014f0a:	91bec0ef          	jal	80001824 <reset_state>
}
    80014f0e:	60e2                	ld	ra,24(sp)
    80014f10:	6442                	ld	s0,16(sp)
    80014f12:	8526                	mv	a0,s1
    80014f14:	64a2                	ld	s1,8(sp)
    80014f16:	6105                	addi	sp,sp,32
    80014f18:	8082                	ret

0000000080014f1a <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80014f1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80014f1c:	00018597          	auipc	a1,0x18
    80014f20:	bb458593          	addi	a1,a1,-1100 # 8002cad0 <__func__.22>
    80014f24:	00019517          	auipc	a0,0x19
    80014f28:	2a450513          	addi	a0,a0,676 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    80014f2c:	ec06                	sd	ra,24(sp)
    80014f2e:	e822                	sd	s0,16(sp)
    80014f30:	e426                	sd	s1,8(sp)
    TEST_START();
    80014f32:	4f8160ef          	jal	8002b42a <printf>
    80014f36:	4529                	li	a0,10
    80014f38:	1e0150ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80014f3c:	450d                	li	a0,3
    80014f3e:	fcbeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014f42:	e9eeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014f46:	a7feb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014f4a:	833eb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_VS);
    80014f4e:	4509                	li	a0,2
    80014f50:	fb9eb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014f54:	eb9eb0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014f58:	000807b7          	lui	a5,0x80
    80014f5c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014f5e:	07b6                	slli	a5,a5,0xd
    80014f60:	00043417          	auipc	s0,0x43
    80014f64:	0b040413          	addi	s0,s0,176 # 80058010 <excpt>
    80014f68:	00000297          	auipc	t0,0x0
    80014f6c:	00c28293          	addi	t0,t0,12 # 80014f74 <instruction_page_fault_4+0x5a>
    80014f70:	02543c23          	sd	t0,56(s0)
    80014f74:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f76:	08200593          	li	a1,130
    80014f7a:	0001e617          	auipc	a2,0x1e
    80014f7e:	35e60613          	addi	a2,a2,862 # 800332d8 <__func__.0+0x53f0>
    80014f82:	00019517          	auipc	a0,0x19
    80014f86:	25e50513          	addi	a0,a0,606 # 8002e1e0 <__func__.0+0x2f8>
    80014f8a:	4a0160ef          	jal	8002b42a <printf>
    80014f8e:	00043797          	auipc	a5,0x43
    80014f92:	0837c783          	lbu	a5,131(a5) # 80058011 <excpt+0x1>
    80014f96:	00019597          	auipc	a1,0x19
    80014f9a:	22258593          	addi	a1,a1,546 # 8002e1b8 <__func__.0+0x2d0>
    80014f9e:	cf89                	beqz	a5,80014fb8 <instruction_page_fault_4+0x9e>
    80014fa0:	6418                	ld	a4,8(s0)
    80014fa2:	47b1                	li	a5,12
    80014fa4:	00019597          	auipc	a1,0x19
    80014fa8:	20458593          	addi	a1,a1,516 # 8002e1a8 <__func__.0+0x2c0>
    80014fac:	00f70663          	beq	a4,a5,80014fb8 <instruction_page_fault_4+0x9e>
    80014fb0:	00019597          	auipc	a1,0x19
    80014fb4:	20858593          	addi	a1,a1,520 # 8002e1b8 <__func__.0+0x2d0>
    80014fb8:	00019517          	auipc	a0,0x19
    80014fbc:	24050513          	addi	a0,a0,576 # 8002e1f8 <__func__.0+0x310>
    80014fc0:	46a160ef          	jal	8002b42a <printf>
    80014fc4:	00043797          	auipc	a5,0x43
    80014fc8:	04d7c783          	lbu	a5,77(a5) # 80058011 <excpt+0x1>
    80014fcc:	c789                	beqz	a5,80014fd6 <instruction_page_fault_4+0xbc>
    80014fce:	6418                	ld	a4,8(s0)
    80014fd0:	47b1                	li	a5,12
    80014fd2:	00f70c63          	beq	a4,a5,80014fea <instruction_page_fault_4+0xd0>
    80014fd6:	00019517          	auipc	a0,0x19
    80014fda:	22a50513          	addi	a0,a0,554 # 8002e200 <__func__.0+0x318>
    80014fde:	44c160ef          	jal	8002b42a <printf>
    80014fe2:	02900513          	li	a0,41
    80014fe6:	132150ef          	jal	8002a118 <putchar>
    80014fea:	4529                	li	a0,10
    80014fec:	12c150ef          	jal	8002a118 <putchar>
    80014ff0:	00043497          	auipc	s1,0x43
    80014ff4:	0214c483          	lbu	s1,33(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014ff8:	00019597          	auipc	a1,0x19
    80014ffc:	1c058593          	addi	a1,a1,448 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015000:	cc91                	beqz	s1,8001501c <instruction_page_fault_4+0x102>
    80015002:	6418                	ld	a4,8(s0)
    80015004:	47b1                	li	a5,12
    TEST_END();
    80015006:	00019597          	auipc	a1,0x19
    8001500a:	1a258593          	addi	a1,a1,418 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001500e:	00f70763          	beq	a4,a5,8001501c <instruction_page_fault_4+0x102>
    80015012:	4481                	li	s1,0
    TEST_END();
    80015014:	00019597          	auipc	a1,0x19
    80015018:	1a458593          	addi	a1,a1,420 # 8002e1b8 <__func__.0+0x2d0>
    8001501c:	00019517          	auipc	a0,0x19
    80015020:	24450513          	addi	a0,a0,580 # 8002e260 <__func__.0+0x378>
    80015024:	406160ef          	jal	8002b42a <printf>
    80015028:	4511                	li	a0,4
    8001502a:	edfeb0ef          	jal	80000f08 <goto_priv>
    8001502e:	ff6ec0ef          	jal	80001824 <reset_state>
}
    80015032:	60e2                	ld	ra,24(sp)
    80015034:	6442                	ld	s0,16(sp)
    80015036:	8526                	mv	a0,s1
    80015038:	64a2                	ld	s1,8(sp)
    8001503a:	6105                	addi	sp,sp,32
    8001503c:	8082                	ret

000000008001503e <load_page_fault_1>:

bool load_page_fault_1(){
    8001503e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015040:	00018597          	auipc	a1,0x18
    80015044:	ab058593          	addi	a1,a1,-1360 # 8002caf0 <__func__.21>
    80015048:	00019517          	auipc	a0,0x19
    8001504c:	18050513          	addi	a0,a0,384 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_1(){
    80015050:	ec06                	sd	ra,24(sp)
    80015052:	e822                	sd	s0,16(sp)
    80015054:	e426                	sd	s1,8(sp)
    TEST_START();
    80015056:	3d4160ef          	jal	8002b42a <printf>
    8001505a:	4529                	li	a0,10
    8001505c:	0bc150ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS); 
    80015060:	450d                	li	a0,3
    80015062:	ea7eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015066:	d7aeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001506a:	95beb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001506e:	f0eeb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015072:	450d                	li	a0,3
    80015074:	e95eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015078:	4509                	li	a0,2
    8001507a:	dafeb0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001507e:	d8feb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015082:	400197b7          	lui	a5,0x40019
    80015086:	078a                	slli	a5,a5,0x2
    80015088:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    8001508c:	08200593          	li	a1,130
    80015090:	0001e617          	auipc	a2,0x1e
    80015094:	28060613          	addi	a2,a2,640 # 80033310 <__func__.0+0x5428>
    80015098:	00019517          	auipc	a0,0x19
    8001509c:	14850513          	addi	a0,a0,328 # 8002e1e0 <__func__.0+0x2f8>
    800150a0:	38a160ef          	jal	8002b42a <printf>
    800150a4:	00043797          	auipc	a5,0x43
    800150a8:	f6d7c783          	lbu	a5,-147(a5) # 80058011 <excpt+0x1>
    800150ac:	00043497          	auipc	s1,0x43
    800150b0:	f6448493          	addi	s1,s1,-156 # 80058010 <excpt>
    800150b4:	00019597          	auipc	a1,0x19
    800150b8:	10458593          	addi	a1,a1,260 # 8002e1b8 <__func__.0+0x2d0>
    800150bc:	cf89                	beqz	a5,800150d6 <load_page_fault_1+0x98>
    800150be:	6498                	ld	a4,8(s1)
    800150c0:	47b5                	li	a5,13
    800150c2:	00019597          	auipc	a1,0x19
    800150c6:	0e658593          	addi	a1,a1,230 # 8002e1a8 <__func__.0+0x2c0>
    800150ca:	00f70663          	beq	a4,a5,800150d6 <load_page_fault_1+0x98>
    800150ce:	00019597          	auipc	a1,0x19
    800150d2:	0ea58593          	addi	a1,a1,234 # 8002e1b8 <__func__.0+0x2d0>
    800150d6:	00019517          	auipc	a0,0x19
    800150da:	12250513          	addi	a0,a0,290 # 8002e1f8 <__func__.0+0x310>
    800150de:	34c160ef          	jal	8002b42a <printf>
    800150e2:	00043797          	auipc	a5,0x43
    800150e6:	f2f7c783          	lbu	a5,-209(a5) # 80058011 <excpt+0x1>
    800150ea:	c789                	beqz	a5,800150f4 <load_page_fault_1+0xb6>
    800150ec:	6498                	ld	a4,8(s1)
    800150ee:	47b5                	li	a5,13
    800150f0:	00f70c63          	beq	a4,a5,80015108 <load_page_fault_1+0xca>
    800150f4:	00019517          	auipc	a0,0x19
    800150f8:	10c50513          	addi	a0,a0,268 # 8002e200 <__func__.0+0x318>
    800150fc:	32e160ef          	jal	8002b42a <printf>
    80015100:	02900513          	li	a0,41
    80015104:	014150ef          	jal	8002a118 <putchar>
    80015108:	4529                	li	a0,10
    8001510a:	00e150ef          	jal	8002a118 <putchar>
    8001510e:	00043797          	auipc	a5,0x43
    80015112:	f037c783          	lbu	a5,-253(a5) # 80058011 <excpt+0x1>
    80015116:	4401                	li	s0,0
    80015118:	c789                	beqz	a5,80015122 <load_page_fault_1+0xe4>
    8001511a:	6480                	ld	s0,8(s1)
    8001511c:	144d                	addi	s0,s0,-13
    8001511e:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80015122:	cebeb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015126:	000807b7          	lui	a5,0x80
    8001512a:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001512e:	001007b7          	lui	a5,0x100
    80015132:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80015136:	07b2                	slli	a5,a5,0xc
    80015138:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001513c:	08200593          	li	a1,130
    80015140:	0001e617          	auipc	a2,0x1e
    80015144:	1f860613          	addi	a2,a2,504 # 80033338 <__func__.0+0x5450>
    80015148:	00019517          	auipc	a0,0x19
    8001514c:	09850513          	addi	a0,a0,152 # 8002e1e0 <__func__.0+0x2f8>
    80015150:	2da160ef          	jal	8002b42a <printf>
    80015154:	00043797          	auipc	a5,0x43
    80015158:	ebd7c783          	lbu	a5,-323(a5) # 80058011 <excpt+0x1>
    8001515c:	00019597          	auipc	a1,0x19
    80015160:	05c58593          	addi	a1,a1,92 # 8002e1b8 <__func__.0+0x2d0>
    80015164:	cf89                	beqz	a5,8001517e <load_page_fault_1+0x140>
    80015166:	6498                	ld	a4,8(s1)
    80015168:	47b5                	li	a5,13
    8001516a:	00019597          	auipc	a1,0x19
    8001516e:	03e58593          	addi	a1,a1,62 # 8002e1a8 <__func__.0+0x2c0>
    80015172:	00f70663          	beq	a4,a5,8001517e <load_page_fault_1+0x140>
    80015176:	00019597          	auipc	a1,0x19
    8001517a:	04258593          	addi	a1,a1,66 # 8002e1b8 <__func__.0+0x2d0>
    8001517e:	00019517          	auipc	a0,0x19
    80015182:	07a50513          	addi	a0,a0,122 # 8002e1f8 <__func__.0+0x310>
    80015186:	2a4160ef          	jal	8002b42a <printf>
    8001518a:	00043797          	auipc	a5,0x43
    8001518e:	e877c783          	lbu	a5,-377(a5) # 80058011 <excpt+0x1>
    80015192:	c789                	beqz	a5,8001519c <load_page_fault_1+0x15e>
    80015194:	6498                	ld	a4,8(s1)
    80015196:	47b5                	li	a5,13
    80015198:	00f70c63          	beq	a4,a5,800151b0 <load_page_fault_1+0x172>
    8001519c:	00019517          	auipc	a0,0x19
    800151a0:	06450513          	addi	a0,a0,100 # 8002e200 <__func__.0+0x318>
    800151a4:	286160ef          	jal	8002b42a <printf>
    800151a8:	02900513          	li	a0,41
    800151ac:	76d140ef          	jal	8002a118 <putchar>
    800151b0:	4529                	li	a0,10
    800151b2:	767140ef          	jal	8002a118 <putchar>
    800151b6:	c801                	beqz	s0,800151c6 <load_page_fault_1+0x188>
    800151b8:	00043797          	auipc	a5,0x43
    800151bc:	e597c783          	lbu	a5,-423(a5) # 80058011 <excpt+0x1>
    800151c0:	4401                	li	s0,0
    800151c2:	0c079e63          	bnez	a5,8001529e <load_page_fault_1+0x260>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    800151c6:	450d                	li	a0,3
    800151c8:	d41eb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800151cc:	c41eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800151d0:	000807b7          	lui	a5,0x80
    800151d4:	1007a073          	csrs	sstatus,a5
    800151d8:	001007b7          	lui	a5,0x100
    800151dc:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800151de:	07b2                	slli	a5,a5,0xc
    800151e0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800151e4:	08200593          	li	a1,130
    800151e8:	0001e617          	auipc	a2,0x1e
    800151ec:	19060613          	addi	a2,a2,400 # 80033378 <__func__.0+0x5490>
    800151f0:	00019517          	auipc	a0,0x19
    800151f4:	ff050513          	addi	a0,a0,-16 # 8002e1e0 <__func__.0+0x2f8>
    800151f8:	232160ef          	jal	8002b42a <printf>
    800151fc:	00043797          	auipc	a5,0x43
    80015200:	e157c783          	lbu	a5,-491(a5) # 80058011 <excpt+0x1>
    80015204:	00019597          	auipc	a1,0x19
    80015208:	fb458593          	addi	a1,a1,-76 # 8002e1b8 <__func__.0+0x2d0>
    8001520c:	cf89                	beqz	a5,80015226 <load_page_fault_1+0x1e8>
    8001520e:	6498                	ld	a4,8(s1)
    80015210:	47b5                	li	a5,13
    80015212:	00019597          	auipc	a1,0x19
    80015216:	f9658593          	addi	a1,a1,-106 # 8002e1a8 <__func__.0+0x2c0>
    8001521a:	00f70663          	beq	a4,a5,80015226 <load_page_fault_1+0x1e8>
    8001521e:	00019597          	auipc	a1,0x19
    80015222:	f9a58593          	addi	a1,a1,-102 # 8002e1b8 <__func__.0+0x2d0>
    80015226:	00019517          	auipc	a0,0x19
    8001522a:	fd250513          	addi	a0,a0,-46 # 8002e1f8 <__func__.0+0x310>
    8001522e:	1fc160ef          	jal	8002b42a <printf>
    80015232:	00043797          	auipc	a5,0x43
    80015236:	ddf7c783          	lbu	a5,-545(a5) # 80058011 <excpt+0x1>
    8001523a:	c789                	beqz	a5,80015244 <load_page_fault_1+0x206>
    8001523c:	6498                	ld	a4,8(s1)
    8001523e:	47b5                	li	a5,13
    80015240:	00f70c63          	beq	a4,a5,80015258 <load_page_fault_1+0x21a>
    80015244:	00019517          	auipc	a0,0x19
    80015248:	fbc50513          	addi	a0,a0,-68 # 8002e200 <__func__.0+0x318>
    8001524c:	1de160ef          	jal	8002b42a <printf>
    80015250:	02900513          	li	a0,41
    80015254:	6c5140ef          	jal	8002a118 <putchar>
    80015258:	4529                	li	a0,10
    8001525a:	6bf140ef          	jal	8002a118 <putchar>
    8001525e:	c411                	beqz	s0,8001526a <load_page_fault_1+0x22c>
    80015260:	00043417          	auipc	s0,0x43
    80015264:	db144403          	lbu	s0,-591(s0) # 80058011 <excpt+0x1>
    80015268:	e021                	bnez	s0,800152a8 <load_page_fault_1+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001526a:	000807b7          	lui	a5,0x80
    8001526e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015272:	4401                	li	s0,0

    TEST_END();
    80015274:	00019597          	auipc	a1,0x19
    80015278:	f4458593          	addi	a1,a1,-188 # 8002e1b8 <__func__.0+0x2d0>
    8001527c:	00019517          	auipc	a0,0x19
    80015280:	fe450513          	addi	a0,a0,-28 # 8002e260 <__func__.0+0x378>
    80015284:	1a6160ef          	jal	8002b42a <printf>
    80015288:	4511                	li	a0,4
    8001528a:	c7feb0ef          	jal	80000f08 <goto_priv>
    8001528e:	d96ec0ef          	jal	80001824 <reset_state>

}
    80015292:	60e2                	ld	ra,24(sp)
    80015294:	8522                	mv	a0,s0
    80015296:	6442                	ld	s0,16(sp)
    80015298:	64a2                	ld	s1,8(sp)
    8001529a:	6105                	addi	sp,sp,32
    8001529c:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001529e:	6480                	ld	s0,8(s1)
    800152a0:	144d                	addi	s0,s0,-13
    800152a2:	00143413          	seqz	s0,s0
    800152a6:	b705                	j	800151c6 <load_page_fault_1+0x188>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800152a8:	6498                	ld	a4,8(s1)
    800152aa:	47b5                	li	a5,13
    800152ac:	faf71fe3          	bne	a4,a5,8001526a <load_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800152b0:	000807b7          	lui	a5,0x80
    800152b4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800152b8:	00019597          	auipc	a1,0x19
    800152bc:	ef058593          	addi	a1,a1,-272 # 8002e1a8 <__func__.0+0x2c0>
    800152c0:	bf75                	j	8001527c <load_page_fault_1+0x23e>

00000000800152c2 <load_page_fault_2>:

bool load_page_fault_2(){
    800152c2:	1101                	addi	sp,sp,-32

    TEST_START();
    800152c4:	00018597          	auipc	a1,0x18
    800152c8:	84458593          	addi	a1,a1,-1980 # 8002cb08 <__func__.20>
    800152cc:	00019517          	auipc	a0,0x19
    800152d0:	efc50513          	addi	a0,a0,-260 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_2(){
    800152d4:	ec06                	sd	ra,24(sp)
    800152d6:	e822                	sd	s0,16(sp)
    800152d8:	e426                	sd	s1,8(sp)
    TEST_START();
    800152da:	150160ef          	jal	8002b42a <printf>
    800152de:	4529                	li	a0,10
    800152e0:	639140ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    800152e4:	450d                	li	a0,3
    800152e6:	c23eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800152ea:	af6eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800152ee:	ed6eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800152f2:	c8aeb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800152f6:	4511                	li	a0,4
    800152f8:	c11eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800152fc:	000407b7          	lui	a5,0x40
    80015300:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015304:	450d                	li	a0,3
    80015306:	c03eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001530a:	4509                	li	a0,2
    8001530c:	b1deb0ef          	jal	80000e28 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015310:	afdeb0ef          	jal	80000e0c <test_setup_except_function>
    80015314:	000807b7          	lui	a5,0x80
    80015318:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001531a:	07b6                	slli	a5,a5,0xd
    8001531c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015320:	08200593          	li	a1,130
    80015324:	0001e617          	auipc	a2,0x1e
    80015328:	09c60613          	addi	a2,a2,156 # 800333c0 <__func__.0+0x54d8>
    8001532c:	00019517          	auipc	a0,0x19
    80015330:	eb450513          	addi	a0,a0,-332 # 8002e1e0 <__func__.0+0x2f8>
    80015334:	0f6160ef          	jal	8002b42a <printf>
    80015338:	00043797          	auipc	a5,0x43
    8001533c:	cd97c783          	lbu	a5,-807(a5) # 80058011 <excpt+0x1>
    80015340:	00043497          	auipc	s1,0x43
    80015344:	cd048493          	addi	s1,s1,-816 # 80058010 <excpt>
    80015348:	00019597          	auipc	a1,0x19
    8001534c:	e7058593          	addi	a1,a1,-400 # 8002e1b8 <__func__.0+0x2d0>
    80015350:	cf89                	beqz	a5,8001536a <load_page_fault_2+0xa8>
    80015352:	6498                	ld	a4,8(s1)
    80015354:	47b5                	li	a5,13
    80015356:	00019597          	auipc	a1,0x19
    8001535a:	e5258593          	addi	a1,a1,-430 # 8002e1a8 <__func__.0+0x2c0>
    8001535e:	00f70663          	beq	a4,a5,8001536a <load_page_fault_2+0xa8>
    80015362:	00019597          	auipc	a1,0x19
    80015366:	e5658593          	addi	a1,a1,-426 # 8002e1b8 <__func__.0+0x2d0>
    8001536a:	00019517          	auipc	a0,0x19
    8001536e:	e8e50513          	addi	a0,a0,-370 # 8002e1f8 <__func__.0+0x310>
    80015372:	0b8160ef          	jal	8002b42a <printf>
    80015376:	00043797          	auipc	a5,0x43
    8001537a:	c9b7c783          	lbu	a5,-869(a5) # 80058011 <excpt+0x1>
    8001537e:	c789                	beqz	a5,80015388 <load_page_fault_2+0xc6>
    80015380:	6498                	ld	a4,8(s1)
    80015382:	47b5                	li	a5,13
    80015384:	00f70c63          	beq	a4,a5,8001539c <load_page_fault_2+0xda>
    80015388:	00019517          	auipc	a0,0x19
    8001538c:	e7850513          	addi	a0,a0,-392 # 8002e200 <__func__.0+0x318>
    80015390:	09a160ef          	jal	8002b42a <printf>
    80015394:	02900513          	li	a0,41
    80015398:	581140ef          	jal	8002a118 <putchar>
    8001539c:	4529                	li	a0,10
    8001539e:	57b140ef          	jal	8002a118 <putchar>
    800153a2:	00043417          	auipc	s0,0x43
    800153a6:	c6f44403          	lbu	s0,-913(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800153aa:	00019597          	auipc	a1,0x19
    800153ae:	e0e58593          	addi	a1,a1,-498 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800153b2:	cc11                	beqz	s0,800153ce <load_page_fault_2+0x10c>
    800153b4:	6498                	ld	a4,8(s1)
    800153b6:	47b5                	li	a5,13
    TEST_END();
    800153b8:	00019597          	auipc	a1,0x19
    800153bc:	df058593          	addi	a1,a1,-528 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800153c0:	00f70763          	beq	a4,a5,800153ce <load_page_fault_2+0x10c>
    800153c4:	4401                	li	s0,0
    TEST_END();
    800153c6:	00019597          	auipc	a1,0x19
    800153ca:	df258593          	addi	a1,a1,-526 # 8002e1b8 <__func__.0+0x2d0>
    800153ce:	00019517          	auipc	a0,0x19
    800153d2:	e9250513          	addi	a0,a0,-366 # 8002e260 <__func__.0+0x378>
    800153d6:	054160ef          	jal	8002b42a <printf>
    800153da:	4511                	li	a0,4
    800153dc:	b2deb0ef          	jal	80000f08 <goto_priv>
    800153e0:	c44ec0ef          	jal	80001824 <reset_state>
}
    800153e4:	60e2                	ld	ra,24(sp)
    800153e6:	8522                	mv	a0,s0
    800153e8:	6442                	ld	s0,16(sp)
    800153ea:	64a2                	ld	s1,8(sp)
    800153ec:	6105                	addi	sp,sp,32
    800153ee:	8082                	ret

00000000800153f0 <load_page_fault_3>:

bool load_page_fault_3(){
    800153f0:	1141                	addi	sp,sp,-16

    TEST_START();
    800153f2:	00017597          	auipc	a1,0x17
    800153f6:	72e58593          	addi	a1,a1,1838 # 8002cb20 <__func__.19>
    800153fa:	00019517          	auipc	a0,0x19
    800153fe:	dce50513          	addi	a0,a0,-562 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_3(){
    80015402:	e406                	sd	ra,8(sp)
    80015404:	e022                	sd	s0,0(sp)
    TEST_START();
    80015406:	024160ef          	jal	8002b42a <printf>
    8001540a:	4529                	li	a0,10
    8001540c:	50d140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80015410:	450d                	li	a0,3
    80015412:	af7eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015416:	9caeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001541a:	daaeb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001541e:	b5eeb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015422:	4511                	li	a0,4
    80015424:	ae5eb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015428:	000407b7          	lui	a5,0x40
    8001542c:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015430:	450d                	li	a0,3
    80015432:	ad7eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015436:	4509                	li	a0,2
    80015438:	9f1eb0ef          	jal	80000e28 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001543c:	9d1eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015440:	000807b7          	lui	a5,0x80
    80015444:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015446:	07b6                	slli	a5,a5,0xd
    80015448:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001544c:	08200593          	li	a1,130
    80015450:	0001e617          	auipc	a2,0x1e
    80015454:	fb060613          	addi	a2,a2,-80 # 80033400 <__func__.0+0x5518>
    80015458:	00019517          	auipc	a0,0x19
    8001545c:	d8850513          	addi	a0,a0,-632 # 8002e1e0 <__func__.0+0x2f8>
    80015460:	7cb150ef          	jal	8002b42a <printf>
    80015464:	00043797          	auipc	a5,0x43
    80015468:	bad7c783          	lbu	a5,-1107(a5) # 80058011 <excpt+0x1>
    8001546c:	00019597          	auipc	a1,0x19
    80015470:	d3c58593          	addi	a1,a1,-708 # 8002e1a8 <__func__.0+0x2c0>
    80015474:	c789                	beqz	a5,8001547e <load_page_fault_3+0x8e>
    80015476:	00019597          	auipc	a1,0x19
    8001547a:	d4258593          	addi	a1,a1,-702 # 8002e1b8 <__func__.0+0x2d0>
    8001547e:	00019517          	auipc	a0,0x19
    80015482:	d7a50513          	addi	a0,a0,-646 # 8002e1f8 <__func__.0+0x310>
    80015486:	7a5150ef          	jal	8002b42a <printf>
    8001548a:	00043797          	auipc	a5,0x43
    8001548e:	b877c783          	lbu	a5,-1145(a5) # 80058011 <excpt+0x1>
    80015492:	e7a1                	bnez	a5,800154da <load_page_fault_3+0xea>
    80015494:	4529                	li	a0,10
    80015496:	483140ef          	jal	8002a118 <putchar>
    8001549a:	00043797          	auipc	a5,0x43
    8001549e:	b777c783          	lbu	a5,-1161(a5) # 80058011 <excpt+0x1>
    800154a2:	e795                	bnez	a5,800154ce <load_page_fault_3+0xde>
    800154a4:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800154a6:	00019597          	auipc	a1,0x19
    800154aa:	d0258593          	addi	a1,a1,-766 # 8002e1a8 <__func__.0+0x2c0>
    800154ae:	00019517          	auipc	a0,0x19
    800154b2:	db250513          	addi	a0,a0,-590 # 8002e260 <__func__.0+0x378>
    800154b6:	775150ef          	jal	8002b42a <printf>
    800154ba:	4511                	li	a0,4
    800154bc:	a4deb0ef          	jal	80000f08 <goto_priv>
    800154c0:	b64ec0ef          	jal	80001824 <reset_state>
}
    800154c4:	60a2                	ld	ra,8(sp)
    800154c6:	8522                	mv	a0,s0
    800154c8:	6402                	ld	s0,0(sp)
    800154ca:	0141                	addi	sp,sp,16
    800154cc:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800154ce:	4401                	li	s0,0
    TEST_END();
    800154d0:	00019597          	auipc	a1,0x19
    800154d4:	ce858593          	addi	a1,a1,-792 # 8002e1b8 <__func__.0+0x2d0>
    800154d8:	bfd9                	j	800154ae <load_page_fault_3+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800154da:	00019517          	auipc	a0,0x19
    800154de:	d2650513          	addi	a0,a0,-730 # 8002e200 <__func__.0+0x318>
    800154e2:	749150ef          	jal	8002b42a <printf>
    800154e6:	02900513          	li	a0,41
    800154ea:	42f140ef          	jal	8002a118 <putchar>
    800154ee:	b75d                	j	80015494 <load_page_fault_3+0xa4>

00000000800154f0 <load_page_fault_4>:


bool load_page_fault_4(){
    800154f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800154f2:	00017597          	auipc	a1,0x17
    800154f6:	64658593          	addi	a1,a1,1606 # 8002cb38 <__func__.18>
    800154fa:	00019517          	auipc	a0,0x19
    800154fe:	cce50513          	addi	a0,a0,-818 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_4(){
    80015502:	ec06                	sd	ra,24(sp)
    80015504:	e822                	sd	s0,16(sp)
    80015506:	e426                	sd	s1,8(sp)
    TEST_START();
    80015508:	723150ef          	jal	8002b42a <printf>
    8001550c:	4529                	li	a0,10
    8001550e:	40b140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS); 
    80015512:	450d                	li	a0,3
    80015514:	9f5eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015518:	8c8eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001551c:	ca8eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015520:	a5ceb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80015524:	4509                	li	a0,2
    80015526:	9e3eb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001552a:	8e3eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001552e:	400197b7          	lui	a5,0x40019
    80015532:	078a                	slli	a5,a5,0x2
    80015534:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    80015538:	08200593          	li	a1,130
    8001553c:	0001e617          	auipc	a2,0x1e
    80015540:	efc60613          	addi	a2,a2,-260 # 80033438 <__func__.0+0x5550>
    80015544:	00019517          	auipc	a0,0x19
    80015548:	c9c50513          	addi	a0,a0,-868 # 8002e1e0 <__func__.0+0x2f8>
    8001554c:	6df150ef          	jal	8002b42a <printf>
    80015550:	00043797          	auipc	a5,0x43
    80015554:	ac17c783          	lbu	a5,-1343(a5) # 80058011 <excpt+0x1>
    80015558:	00043497          	auipc	s1,0x43
    8001555c:	ab848493          	addi	s1,s1,-1352 # 80058010 <excpt>
    80015560:	00019597          	auipc	a1,0x19
    80015564:	c5858593          	addi	a1,a1,-936 # 8002e1b8 <__func__.0+0x2d0>
    80015568:	cf89                	beqz	a5,80015582 <load_page_fault_4+0x92>
    8001556a:	6498                	ld	a4,8(s1)
    8001556c:	47b5                	li	a5,13
    8001556e:	00019597          	auipc	a1,0x19
    80015572:	c3a58593          	addi	a1,a1,-966 # 8002e1a8 <__func__.0+0x2c0>
    80015576:	00f70663          	beq	a4,a5,80015582 <load_page_fault_4+0x92>
    8001557a:	00019597          	auipc	a1,0x19
    8001557e:	c3e58593          	addi	a1,a1,-962 # 8002e1b8 <__func__.0+0x2d0>
    80015582:	00019517          	auipc	a0,0x19
    80015586:	c7650513          	addi	a0,a0,-906 # 8002e1f8 <__func__.0+0x310>
    8001558a:	6a1150ef          	jal	8002b42a <printf>
    8001558e:	00043797          	auipc	a5,0x43
    80015592:	a837c783          	lbu	a5,-1405(a5) # 80058011 <excpt+0x1>
    80015596:	c789                	beqz	a5,800155a0 <load_page_fault_4+0xb0>
    80015598:	6498                	ld	a4,8(s1)
    8001559a:	47b5                	li	a5,13
    8001559c:	00f70c63          	beq	a4,a5,800155b4 <load_page_fault_4+0xc4>
    800155a0:	00019517          	auipc	a0,0x19
    800155a4:	c6050513          	addi	a0,a0,-928 # 8002e200 <__func__.0+0x318>
    800155a8:	683150ef          	jal	8002b42a <printf>
    800155ac:	02900513          	li	a0,41
    800155b0:	369140ef          	jal	8002a118 <putchar>
    800155b4:	4529                	li	a0,10
    800155b6:	363140ef          	jal	8002a118 <putchar>
    800155ba:	00043797          	auipc	a5,0x43
    800155be:	a577c783          	lbu	a5,-1449(a5) # 80058011 <excpt+0x1>
    800155c2:	4401                	li	s0,0
    800155c4:	c789                	beqz	a5,800155ce <load_page_fault_4+0xde>
    800155c6:	6480                	ld	s0,8(s1)
    800155c8:	144d                	addi	s0,s0,-13
    800155ca:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800155ce:	83feb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800155d2:	000807b7          	lui	a5,0x80
    800155d6:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800155da:	001007b7          	lui	a5,0x100
    800155de:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800155e2:	07b2                	slli	a5,a5,0xc
    800155e4:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800155e8:	08200593          	li	a1,130
    800155ec:	0001e617          	auipc	a2,0x1e
    800155f0:	e7460613          	addi	a2,a2,-396 # 80033460 <__func__.0+0x5578>
    800155f4:	00019517          	auipc	a0,0x19
    800155f8:	bec50513          	addi	a0,a0,-1044 # 8002e1e0 <__func__.0+0x2f8>
    800155fc:	62f150ef          	jal	8002b42a <printf>
    80015600:	00043797          	auipc	a5,0x43
    80015604:	a117c783          	lbu	a5,-1519(a5) # 80058011 <excpt+0x1>
    80015608:	00019597          	auipc	a1,0x19
    8001560c:	bb058593          	addi	a1,a1,-1104 # 8002e1b8 <__func__.0+0x2d0>
    80015610:	cf89                	beqz	a5,8001562a <load_page_fault_4+0x13a>
    80015612:	6498                	ld	a4,8(s1)
    80015614:	47b5                	li	a5,13
    80015616:	00019597          	auipc	a1,0x19
    8001561a:	b9258593          	addi	a1,a1,-1134 # 8002e1a8 <__func__.0+0x2c0>
    8001561e:	00f70663          	beq	a4,a5,8001562a <load_page_fault_4+0x13a>
    80015622:	00019597          	auipc	a1,0x19
    80015626:	b9658593          	addi	a1,a1,-1130 # 8002e1b8 <__func__.0+0x2d0>
    8001562a:	00019517          	auipc	a0,0x19
    8001562e:	bce50513          	addi	a0,a0,-1074 # 8002e1f8 <__func__.0+0x310>
    80015632:	5f9150ef          	jal	8002b42a <printf>
    80015636:	00043797          	auipc	a5,0x43
    8001563a:	9db7c783          	lbu	a5,-1573(a5) # 80058011 <excpt+0x1>
    8001563e:	c789                	beqz	a5,80015648 <load_page_fault_4+0x158>
    80015640:	6498                	ld	a4,8(s1)
    80015642:	47b5                	li	a5,13
    80015644:	00f70c63          	beq	a4,a5,8001565c <load_page_fault_4+0x16c>
    80015648:	00019517          	auipc	a0,0x19
    8001564c:	bb850513          	addi	a0,a0,-1096 # 8002e200 <__func__.0+0x318>
    80015650:	5db150ef          	jal	8002b42a <printf>
    80015654:	02900513          	li	a0,41
    80015658:	2c1140ef          	jal	8002a118 <putchar>
    8001565c:	4529                	li	a0,10
    8001565e:	2bb140ef          	jal	8002a118 <putchar>
    80015662:	c801                	beqz	s0,80015672 <load_page_fault_4+0x182>
    80015664:	00043797          	auipc	a5,0x43
    80015668:	9ad7c783          	lbu	a5,-1619(a5) # 80058011 <excpt+0x1>
    8001566c:	4401                	li	s0,0
    8001566e:	0c079e63          	bnez	a5,8001574a <load_page_fault_4+0x25a>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80015672:	4509                	li	a0,2
    80015674:	895eb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80015678:	f94eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001567c:	000807b7          	lui	a5,0x80
    80015680:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80015684:	001007b7          	lui	a5,0x100
    80015688:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001568a:	07b2                	slli	a5,a5,0xc
    8001568c:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015690:	08200593          	li	a1,130
    80015694:	0001e617          	auipc	a2,0x1e
    80015698:	e0460613          	addi	a2,a2,-508 # 80033498 <__func__.0+0x55b0>
    8001569c:	00019517          	auipc	a0,0x19
    800156a0:	b4450513          	addi	a0,a0,-1212 # 8002e1e0 <__func__.0+0x2f8>
    800156a4:	587150ef          	jal	8002b42a <printf>
    800156a8:	00043797          	auipc	a5,0x43
    800156ac:	9697c783          	lbu	a5,-1687(a5) # 80058011 <excpt+0x1>
    800156b0:	00019597          	auipc	a1,0x19
    800156b4:	b0858593          	addi	a1,a1,-1272 # 8002e1b8 <__func__.0+0x2d0>
    800156b8:	cf89                	beqz	a5,800156d2 <load_page_fault_4+0x1e2>
    800156ba:	6498                	ld	a4,8(s1)
    800156bc:	47b5                	li	a5,13
    800156be:	00019597          	auipc	a1,0x19
    800156c2:	aea58593          	addi	a1,a1,-1302 # 8002e1a8 <__func__.0+0x2c0>
    800156c6:	00f70663          	beq	a4,a5,800156d2 <load_page_fault_4+0x1e2>
    800156ca:	00019597          	auipc	a1,0x19
    800156ce:	aee58593          	addi	a1,a1,-1298 # 8002e1b8 <__func__.0+0x2d0>
    800156d2:	00019517          	auipc	a0,0x19
    800156d6:	b2650513          	addi	a0,a0,-1242 # 8002e1f8 <__func__.0+0x310>
    800156da:	551150ef          	jal	8002b42a <printf>
    800156de:	00043797          	auipc	a5,0x43
    800156e2:	9337c783          	lbu	a5,-1741(a5) # 80058011 <excpt+0x1>
    800156e6:	c789                	beqz	a5,800156f0 <load_page_fault_4+0x200>
    800156e8:	6498                	ld	a4,8(s1)
    800156ea:	47b5                	li	a5,13
    800156ec:	00f70c63          	beq	a4,a5,80015704 <load_page_fault_4+0x214>
    800156f0:	00019517          	auipc	a0,0x19
    800156f4:	b1050513          	addi	a0,a0,-1264 # 8002e200 <__func__.0+0x318>
    800156f8:	533150ef          	jal	8002b42a <printf>
    800156fc:	02900513          	li	a0,41
    80015700:	219140ef          	jal	8002a118 <putchar>
    80015704:	4529                	li	a0,10
    80015706:	213140ef          	jal	8002a118 <putchar>
    8001570a:	c411                	beqz	s0,80015716 <load_page_fault_4+0x226>
    8001570c:	00043417          	auipc	s0,0x43
    80015710:	90544403          	lbu	s0,-1787(s0) # 80058011 <excpt+0x1>
    80015714:	e021                	bnez	s0,80015754 <load_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015716:	000807b7          	lui	a5,0x80
    8001571a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001571e:	4401                	li	s0,0

    TEST_END();
    80015720:	00019597          	auipc	a1,0x19
    80015724:	a9858593          	addi	a1,a1,-1384 # 8002e1b8 <__func__.0+0x2d0>
    80015728:	00019517          	auipc	a0,0x19
    8001572c:	b3850513          	addi	a0,a0,-1224 # 8002e260 <__func__.0+0x378>
    80015730:	4fb150ef          	jal	8002b42a <printf>
    80015734:	4511                	li	a0,4
    80015736:	fd2eb0ef          	jal	80000f08 <goto_priv>
    8001573a:	8eaec0ef          	jal	80001824 <reset_state>

}
    8001573e:	60e2                	ld	ra,24(sp)
    80015740:	8522                	mv	a0,s0
    80015742:	6442                	ld	s0,16(sp)
    80015744:	64a2                	ld	s1,8(sp)
    80015746:	6105                	addi	sp,sp,32
    80015748:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001574a:	6480                	ld	s0,8(s1)
    8001574c:	144d                	addi	s0,s0,-13
    8001574e:	00143413          	seqz	s0,s0
    80015752:	b705                	j	80015672 <load_page_fault_4+0x182>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015754:	6498                	ld	a4,8(s1)
    80015756:	47b5                	li	a5,13
    80015758:	faf71fe3          	bne	a4,a5,80015716 <load_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001575c:	000807b7          	lui	a5,0x80
    80015760:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015764:	00019597          	auipc	a1,0x19
    80015768:	a4458593          	addi	a1,a1,-1468 # 8002e1a8 <__func__.0+0x2c0>
    8001576c:	bf75                	j	80015728 <load_page_fault_4+0x238>

000000008001576e <load_page_fault_5>:

bool load_page_fault_5(){
    8001576e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015770:	00017597          	auipc	a1,0x17
    80015774:	3e058593          	addi	a1,a1,992 # 8002cb50 <__func__.17>
    80015778:	00019517          	auipc	a0,0x19
    8001577c:	a5050513          	addi	a0,a0,-1456 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_5(){
    80015780:	ec06                	sd	ra,24(sp)
    80015782:	e822                	sd	s0,16(sp)
    80015784:	e426                	sd	s1,8(sp)
    TEST_START();
    80015786:	4a5150ef          	jal	8002b42a <printf>
    8001578a:	4529                	li	a0,10
    8001578c:	18d140ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    80015790:	450d                	li	a0,3
    80015792:	f76eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015796:	e4bea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001579a:	a2aeb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001579e:	fdfea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800157a2:	4511                	li	a0,4
    800157a4:	f64eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800157a8:	000407b7          	lui	a5,0x40
    800157ac:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800157b0:	4509                	li	a0,2
    800157b2:	f56eb0ef          	jal	80000f08 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800157b6:	e56eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    800157ba:	000807b7          	lui	a5,0x80
    800157be:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800157c0:	07b6                	slli	a5,a5,0xd
    800157c2:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157c6:	08200593          	li	a1,130
    800157ca:	0001e617          	auipc	a2,0x1e
    800157ce:	d1660613          	addi	a2,a2,-746 # 800334e0 <__func__.0+0x55f8>
    800157d2:	00019517          	auipc	a0,0x19
    800157d6:	a0e50513          	addi	a0,a0,-1522 # 8002e1e0 <__func__.0+0x2f8>
    800157da:	451150ef          	jal	8002b42a <printf>
    800157de:	00043797          	auipc	a5,0x43
    800157e2:	8337c783          	lbu	a5,-1997(a5) # 80058011 <excpt+0x1>
    800157e6:	00043497          	auipc	s1,0x43
    800157ea:	82a48493          	addi	s1,s1,-2006 # 80058010 <excpt>
    800157ee:	00019597          	auipc	a1,0x19
    800157f2:	9ca58593          	addi	a1,a1,-1590 # 8002e1b8 <__func__.0+0x2d0>
    800157f6:	cf89                	beqz	a5,80015810 <load_page_fault_5+0xa2>
    800157f8:	6498                	ld	a4,8(s1)
    800157fa:	47b5                	li	a5,13
    800157fc:	00019597          	auipc	a1,0x19
    80015800:	9ac58593          	addi	a1,a1,-1620 # 8002e1a8 <__func__.0+0x2c0>
    80015804:	00f70663          	beq	a4,a5,80015810 <load_page_fault_5+0xa2>
    80015808:	00019597          	auipc	a1,0x19
    8001580c:	9b058593          	addi	a1,a1,-1616 # 8002e1b8 <__func__.0+0x2d0>
    80015810:	00019517          	auipc	a0,0x19
    80015814:	9e850513          	addi	a0,a0,-1560 # 8002e1f8 <__func__.0+0x310>
    80015818:	413150ef          	jal	8002b42a <printf>
    8001581c:	00042797          	auipc	a5,0x42
    80015820:	7f57c783          	lbu	a5,2037(a5) # 80058011 <excpt+0x1>
    80015824:	c789                	beqz	a5,8001582e <load_page_fault_5+0xc0>
    80015826:	6498                	ld	a4,8(s1)
    80015828:	47b5                	li	a5,13
    8001582a:	00f70c63          	beq	a4,a5,80015842 <load_page_fault_5+0xd4>
    8001582e:	00019517          	auipc	a0,0x19
    80015832:	9d250513          	addi	a0,a0,-1582 # 8002e200 <__func__.0+0x318>
    80015836:	3f5150ef          	jal	8002b42a <printf>
    8001583a:	02900513          	li	a0,41
    8001583e:	0db140ef          	jal	8002a118 <putchar>
    80015842:	4529                	li	a0,10
    80015844:	0d5140ef          	jal	8002a118 <putchar>
    80015848:	00042417          	auipc	s0,0x42
    8001584c:	7c944403          	lbu	s0,1993(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015850:	00019597          	auipc	a1,0x19
    80015854:	96858593          	addi	a1,a1,-1688 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015858:	cc11                	beqz	s0,80015874 <load_page_fault_5+0x106>
    8001585a:	6498                	ld	a4,8(s1)
    8001585c:	47b5                	li	a5,13
    TEST_END();
    8001585e:	00019597          	auipc	a1,0x19
    80015862:	94a58593          	addi	a1,a1,-1718 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015866:	00f70763          	beq	a4,a5,80015874 <load_page_fault_5+0x106>
    8001586a:	4401                	li	s0,0
    TEST_END();
    8001586c:	00019597          	auipc	a1,0x19
    80015870:	94c58593          	addi	a1,a1,-1716 # 8002e1b8 <__func__.0+0x2d0>
    80015874:	00019517          	auipc	a0,0x19
    80015878:	9ec50513          	addi	a0,a0,-1556 # 8002e260 <__func__.0+0x378>
    8001587c:	3af150ef          	jal	8002b42a <printf>
    80015880:	4511                	li	a0,4
    80015882:	e86eb0ef          	jal	80000f08 <goto_priv>
    80015886:	f9feb0ef          	jal	80001824 <reset_state>
}
    8001588a:	60e2                	ld	ra,24(sp)
    8001588c:	8522                	mv	a0,s0
    8001588e:	6442                	ld	s0,16(sp)
    80015890:	64a2                	ld	s1,8(sp)
    80015892:	6105                	addi	sp,sp,32
    80015894:	8082                	ret

0000000080015896 <load_page_fault_6>:

bool load_page_fault_6(){
    80015896:	1141                	addi	sp,sp,-16

    TEST_START();
    80015898:	00017597          	auipc	a1,0x17
    8001589c:	2d058593          	addi	a1,a1,720 # 8002cb68 <__func__.16>
    800158a0:	00019517          	auipc	a0,0x19
    800158a4:	92850513          	addi	a0,a0,-1752 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_6(){
    800158a8:	e406                	sd	ra,8(sp)
    800158aa:	e022                	sd	s0,0(sp)
    TEST_START();
    800158ac:	37f150ef          	jal	8002b42a <printf>
    800158b0:	4529                	li	a0,10
    800158b2:	067140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800158b6:	450d                	li	a0,3
    800158b8:	e50eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800158bc:	d25ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800158c0:	904eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800158c4:	eb9ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800158c8:	4511                	li	a0,4
    800158ca:	e3eeb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800158ce:	000407b7          	lui	a5,0x40
    800158d2:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    800158d6:	4509                	li	a0,2
    800158d8:	e30eb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800158dc:	d30eb0ef          	jal	80000e0c <test_setup_except_function>
    800158e0:	000807b7          	lui	a5,0x80
    800158e4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800158e6:	07b6                	slli	a5,a5,0xd
    800158e8:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158ec:	08200593          	li	a1,130
    800158f0:	0001e617          	auipc	a2,0x1e
    800158f4:	c3060613          	addi	a2,a2,-976 # 80033520 <__func__.0+0x5638>
    800158f8:	00019517          	auipc	a0,0x19
    800158fc:	8e850513          	addi	a0,a0,-1816 # 8002e1e0 <__func__.0+0x2f8>
    80015900:	32b150ef          	jal	8002b42a <printf>
    80015904:	00042797          	auipc	a5,0x42
    80015908:	70d7c783          	lbu	a5,1805(a5) # 80058011 <excpt+0x1>
    8001590c:	00019597          	auipc	a1,0x19
    80015910:	89c58593          	addi	a1,a1,-1892 # 8002e1a8 <__func__.0+0x2c0>
    80015914:	c789                	beqz	a5,8001591e <load_page_fault_6+0x88>
    80015916:	00019597          	auipc	a1,0x19
    8001591a:	8a258593          	addi	a1,a1,-1886 # 8002e1b8 <__func__.0+0x2d0>
    8001591e:	00019517          	auipc	a0,0x19
    80015922:	8da50513          	addi	a0,a0,-1830 # 8002e1f8 <__func__.0+0x310>
    80015926:	305150ef          	jal	8002b42a <printf>
    8001592a:	00042797          	auipc	a5,0x42
    8001592e:	6e77c783          	lbu	a5,1767(a5) # 80058011 <excpt+0x1>
    80015932:	e7a1                	bnez	a5,8001597a <load_page_fault_6+0xe4>
    80015934:	4529                	li	a0,10
    80015936:	7e2140ef          	jal	8002a118 <putchar>
    8001593a:	00042797          	auipc	a5,0x42
    8001593e:	6d77c783          	lbu	a5,1751(a5) # 80058011 <excpt+0x1>
    80015942:	e795                	bnez	a5,8001596e <load_page_fault_6+0xd8>
    80015944:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80015946:	00019597          	auipc	a1,0x19
    8001594a:	86258593          	addi	a1,a1,-1950 # 8002e1a8 <__func__.0+0x2c0>
    8001594e:	00019517          	auipc	a0,0x19
    80015952:	91250513          	addi	a0,a0,-1774 # 8002e260 <__func__.0+0x378>
    80015956:	2d5150ef          	jal	8002b42a <printf>
    8001595a:	4511                	li	a0,4
    8001595c:	daceb0ef          	jal	80000f08 <goto_priv>
    80015960:	ec5eb0ef          	jal	80001824 <reset_state>
}
    80015964:	60a2                	ld	ra,8(sp)
    80015966:	8522                	mv	a0,s0
    80015968:	6402                	ld	s0,0(sp)
    8001596a:	0141                	addi	sp,sp,16
    8001596c:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001596e:	4401                	li	s0,0
    TEST_END();
    80015970:	00019597          	auipc	a1,0x19
    80015974:	84858593          	addi	a1,a1,-1976 # 8002e1b8 <__func__.0+0x2d0>
    80015978:	bfd9                	j	8001594e <load_page_fault_6+0xb8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001597a:	00019517          	auipc	a0,0x19
    8001597e:	88650513          	addi	a0,a0,-1914 # 8002e200 <__func__.0+0x318>
    80015982:	2a9150ef          	jal	8002b42a <printf>
    80015986:	02900513          	li	a0,41
    8001598a:	78e140ef          	jal	8002a118 <putchar>
    8001598e:	b75d                	j	80015934 <load_page_fault_6+0x9e>

0000000080015990 <load_page_fault_7>:


bool load_page_fault_7(){
    80015990:	1101                	addi	sp,sp,-32

    TEST_START();
    80015992:	00017597          	auipc	a1,0x17
    80015996:	1ee58593          	addi	a1,a1,494 # 8002cb80 <__func__.15>
    8001599a:	00019517          	auipc	a0,0x19
    8001599e:	82e50513          	addi	a0,a0,-2002 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_7(){
    800159a2:	ec06                	sd	ra,24(sp)
    800159a4:	e822                	sd	s0,16(sp)
    800159a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800159a8:	283150ef          	jal	8002b42a <printf>
    800159ac:	4529                	li	a0,10
    800159ae:	76a140ef          	jal	8002a118 <putchar>


    goto_priv(PRIV_HS);
    800159b2:	450d                	li	a0,3
    800159b4:	d54eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800159b8:	c29ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800159bc:	808eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800159c0:	dbdea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800159c4:	4511                	li	a0,4
    800159c6:	d42eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800159ca:	000407b7          	lui	a5,0x40
    800159ce:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800159d2:	450d                	li	a0,3
    800159d4:	d34eb0ef          	jal	80000f08 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800159d8:	c34eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800159dc:	000807b7          	lui	a5,0x80
    800159e0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800159e2:	07b6                	slli	a5,a5,0xd
    800159e4:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800159e8:	08200593          	li	a1,130
    800159ec:	0001e617          	auipc	a2,0x1e
    800159f0:	b6c60613          	addi	a2,a2,-1172 # 80033558 <__func__.0+0x5670>
    800159f4:	00018517          	auipc	a0,0x18
    800159f8:	7ec50513          	addi	a0,a0,2028 # 8002e1e0 <__func__.0+0x2f8>
    800159fc:	22f150ef          	jal	8002b42a <printf>
    80015a00:	00042797          	auipc	a5,0x42
    80015a04:	6117c783          	lbu	a5,1553(a5) # 80058011 <excpt+0x1>
    80015a08:	00042497          	auipc	s1,0x42
    80015a0c:	60848493          	addi	s1,s1,1544 # 80058010 <excpt>
    80015a10:	00018597          	auipc	a1,0x18
    80015a14:	7a858593          	addi	a1,a1,1960 # 8002e1b8 <__func__.0+0x2d0>
    80015a18:	cf89                	beqz	a5,80015a32 <load_page_fault_7+0xa2>
    80015a1a:	6498                	ld	a4,8(s1)
    80015a1c:	47b5                	li	a5,13
    80015a1e:	00018597          	auipc	a1,0x18
    80015a22:	78a58593          	addi	a1,a1,1930 # 8002e1a8 <__func__.0+0x2c0>
    80015a26:	00f70663          	beq	a4,a5,80015a32 <load_page_fault_7+0xa2>
    80015a2a:	00018597          	auipc	a1,0x18
    80015a2e:	78e58593          	addi	a1,a1,1934 # 8002e1b8 <__func__.0+0x2d0>
    80015a32:	00018517          	auipc	a0,0x18
    80015a36:	7c650513          	addi	a0,a0,1990 # 8002e1f8 <__func__.0+0x310>
    80015a3a:	1f1150ef          	jal	8002b42a <printf>
    80015a3e:	00042797          	auipc	a5,0x42
    80015a42:	5d37c783          	lbu	a5,1491(a5) # 80058011 <excpt+0x1>
    80015a46:	c789                	beqz	a5,80015a50 <load_page_fault_7+0xc0>
    80015a48:	6498                	ld	a4,8(s1)
    80015a4a:	47b5                	li	a5,13
    80015a4c:	00f70c63          	beq	a4,a5,80015a64 <load_page_fault_7+0xd4>
    80015a50:	00018517          	auipc	a0,0x18
    80015a54:	7b050513          	addi	a0,a0,1968 # 8002e200 <__func__.0+0x318>
    80015a58:	1d3150ef          	jal	8002b42a <printf>
    80015a5c:	02900513          	li	a0,41
    80015a60:	6b8140ef          	jal	8002a118 <putchar>
    80015a64:	4529                	li	a0,10
    80015a66:	6b2140ef          	jal	8002a118 <putchar>
    80015a6a:	00042417          	auipc	s0,0x42
    80015a6e:	5a744403          	lbu	s0,1447(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015a72:	00018597          	auipc	a1,0x18
    80015a76:	74658593          	addi	a1,a1,1862 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a7a:	cc11                	beqz	s0,80015a96 <load_page_fault_7+0x106>
    80015a7c:	6498                	ld	a4,8(s1)
    80015a7e:	47b5                	li	a5,13
    TEST_END();
    80015a80:	00018597          	auipc	a1,0x18
    80015a84:	72858593          	addi	a1,a1,1832 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a88:	00f70763          	beq	a4,a5,80015a96 <load_page_fault_7+0x106>
    80015a8c:	4401                	li	s0,0
    TEST_END();
    80015a8e:	00018597          	auipc	a1,0x18
    80015a92:	72a58593          	addi	a1,a1,1834 # 8002e1b8 <__func__.0+0x2d0>
    80015a96:	00018517          	auipc	a0,0x18
    80015a9a:	7ca50513          	addi	a0,a0,1994 # 8002e260 <__func__.0+0x378>
    80015a9e:	18d150ef          	jal	8002b42a <printf>
    80015aa2:	4511                	li	a0,4
    80015aa4:	c64eb0ef          	jal	80000f08 <goto_priv>
    80015aa8:	d7deb0ef          	jal	80001824 <reset_state>
}
    80015aac:	60e2                	ld	ra,24(sp)
    80015aae:	8522                	mv	a0,s0
    80015ab0:	6442                	ld	s0,16(sp)
    80015ab2:	64a2                	ld	s1,8(sp)
    80015ab4:	6105                	addi	sp,sp,32
    80015ab6:	8082                	ret

0000000080015ab8 <load_page_fault_8>:

bool load_page_fault_8(){
    80015ab8:	1141                	addi	sp,sp,-16

    TEST_START();
    80015aba:	00017597          	auipc	a1,0x17
    80015abe:	0de58593          	addi	a1,a1,222 # 8002cb98 <__func__.14>
    80015ac2:	00018517          	auipc	a0,0x18
    80015ac6:	70650513          	addi	a0,a0,1798 # 8002e1c8 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80015aca:	e406                	sd	ra,8(sp)
    80015acc:	e022                	sd	s0,0(sp)
    TEST_START();
    80015ace:	15d150ef          	jal	8002b42a <printf>
    80015ad2:	4529                	li	a0,10
    80015ad4:	644140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80015ad8:	450d                	li	a0,3
    80015ada:	c2eeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015ade:	b03ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015ae2:	ee3ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015ae6:	c97ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015aea:	4511                	li	a0,4
    80015aec:	c1ceb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015af0:	000407b7          	lui	a5,0x40
    80015af4:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015af8:	450d                	li	a0,3
    80015afa:	c0eeb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015afe:	b0eeb0ef          	jal	80000e0c <test_setup_except_function>
    80015b02:	000807b7          	lui	a5,0x80
    80015b06:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015b08:	07b6                	slli	a5,a5,0xd
    80015b0a:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b0e:	08200593          	li	a1,130
    80015b12:	0001e617          	auipc	a2,0x1e
    80015b16:	a7e60613          	addi	a2,a2,-1410 # 80033590 <__func__.0+0x56a8>
    80015b1a:	00018517          	auipc	a0,0x18
    80015b1e:	6c650513          	addi	a0,a0,1734 # 8002e1e0 <__func__.0+0x2f8>
    80015b22:	109150ef          	jal	8002b42a <printf>
    80015b26:	00042797          	auipc	a5,0x42
    80015b2a:	4eb7c783          	lbu	a5,1259(a5) # 80058011 <excpt+0x1>
    80015b2e:	00018597          	auipc	a1,0x18
    80015b32:	67a58593          	addi	a1,a1,1658 # 8002e1a8 <__func__.0+0x2c0>
    80015b36:	c789                	beqz	a5,80015b40 <load_page_fault_8+0x88>
    80015b38:	00018597          	auipc	a1,0x18
    80015b3c:	68058593          	addi	a1,a1,1664 # 8002e1b8 <__func__.0+0x2d0>
    80015b40:	00018517          	auipc	a0,0x18
    80015b44:	6b850513          	addi	a0,a0,1720 # 8002e1f8 <__func__.0+0x310>
    80015b48:	0e3150ef          	jal	8002b42a <printf>
    80015b4c:	00042797          	auipc	a5,0x42
    80015b50:	4c57c783          	lbu	a5,1221(a5) # 80058011 <excpt+0x1>
    80015b54:	e7a1                	bnez	a5,80015b9c <load_page_fault_8+0xe4>
    80015b56:	4529                	li	a0,10
    80015b58:	5c0140ef          	jal	8002a118 <putchar>
    80015b5c:	00042797          	auipc	a5,0x42
    80015b60:	4b57c783          	lbu	a5,1205(a5) # 80058011 <excpt+0x1>
    80015b64:	e795                	bnez	a5,80015b90 <load_page_fault_8+0xd8>
    80015b66:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015b68:	00018597          	auipc	a1,0x18
    80015b6c:	64058593          	addi	a1,a1,1600 # 8002e1a8 <__func__.0+0x2c0>
    80015b70:	00018517          	auipc	a0,0x18
    80015b74:	6f050513          	addi	a0,a0,1776 # 8002e260 <__func__.0+0x378>
    80015b78:	0b3150ef          	jal	8002b42a <printf>
    80015b7c:	4511                	li	a0,4
    80015b7e:	b8aeb0ef          	jal	80000f08 <goto_priv>
    80015b82:	ca3eb0ef          	jal	80001824 <reset_state>
}
    80015b86:	60a2                	ld	ra,8(sp)
    80015b88:	8522                	mv	a0,s0
    80015b8a:	6402                	ld	s0,0(sp)
    80015b8c:	0141                	addi	sp,sp,16
    80015b8e:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b90:	4401                	li	s0,0
    TEST_END();
    80015b92:	00018597          	auipc	a1,0x18
    80015b96:	62658593          	addi	a1,a1,1574 # 8002e1b8 <__func__.0+0x2d0>
    80015b9a:	bfd9                	j	80015b70 <load_page_fault_8+0xb8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b9c:	00018517          	auipc	a0,0x18
    80015ba0:	66450513          	addi	a0,a0,1636 # 8002e200 <__func__.0+0x318>
    80015ba4:	087150ef          	jal	8002b42a <printf>
    80015ba8:	02900513          	li	a0,41
    80015bac:	56c140ef          	jal	8002a118 <putchar>
    80015bb0:	b75d                	j	80015b56 <load_page_fault_8+0x9e>

0000000080015bb2 <store_page_fault_1>:





bool store_page_fault_1(){
    80015bb2:	1101                	addi	sp,sp,-32

    TEST_START();
    80015bb4:	00017597          	auipc	a1,0x17
    80015bb8:	ffc58593          	addi	a1,a1,-4 # 8002cbb0 <__func__.13>
    80015bbc:	00018517          	auipc	a0,0x18
    80015bc0:	60c50513          	addi	a0,a0,1548 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80015bc4:	ec06                	sd	ra,24(sp)
    80015bc6:	e822                	sd	s0,16(sp)
    80015bc8:	e426                	sd	s1,8(sp)
    TEST_START();
    80015bca:	061150ef          	jal	8002b42a <printf>
    80015bce:	4529                	li	a0,10
    80015bd0:	548140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80015bd4:	450d                	li	a0,3
    80015bd6:	b32eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015bda:	a07ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015bde:	de7ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015be2:	b9bea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015be6:	450d                	li	a0,3
    80015be8:	b20eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015bec:	4509                	li	a0,2
    80015bee:	a3aeb0ef          	jal	80000e28 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015bf2:	a1aeb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015bf6:	37ab77b7          	lui	a5,0x37ab7
    80015bfa:	078a                	slli	a5,a5,0x2
    80015bfc:	40019737          	lui	a4,0x40019
    80015c00:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015c04:	070a                	slli	a4,a4,0x2
    80015c06:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80015c0a:	08200593          	li	a1,130
    80015c0e:	0001e617          	auipc	a2,0x1e
    80015c12:	9ba60613          	addi	a2,a2,-1606 # 800335c8 <__func__.0+0x56e0>
    80015c16:	00018517          	auipc	a0,0x18
    80015c1a:	5ca50513          	addi	a0,a0,1482 # 8002e1e0 <__func__.0+0x2f8>
    80015c1e:	00d150ef          	jal	8002b42a <printf>
    80015c22:	00042797          	auipc	a5,0x42
    80015c26:	3ef7c783          	lbu	a5,1007(a5) # 80058011 <excpt+0x1>
    80015c2a:	00042497          	auipc	s1,0x42
    80015c2e:	3e648493          	addi	s1,s1,998 # 80058010 <excpt>
    80015c32:	00018597          	auipc	a1,0x18
    80015c36:	58658593          	addi	a1,a1,1414 # 8002e1b8 <__func__.0+0x2d0>
    80015c3a:	cf89                	beqz	a5,80015c54 <store_page_fault_1+0xa2>
    80015c3c:	6498                	ld	a4,8(s1)
    80015c3e:	47bd                	li	a5,15
    80015c40:	00018597          	auipc	a1,0x18
    80015c44:	56858593          	addi	a1,a1,1384 # 8002e1a8 <__func__.0+0x2c0>
    80015c48:	00f70663          	beq	a4,a5,80015c54 <store_page_fault_1+0xa2>
    80015c4c:	00018597          	auipc	a1,0x18
    80015c50:	56c58593          	addi	a1,a1,1388 # 8002e1b8 <__func__.0+0x2d0>
    80015c54:	00018517          	auipc	a0,0x18
    80015c58:	5a450513          	addi	a0,a0,1444 # 8002e1f8 <__func__.0+0x310>
    80015c5c:	7ce150ef          	jal	8002b42a <printf>
    80015c60:	00042797          	auipc	a5,0x42
    80015c64:	3b17c783          	lbu	a5,945(a5) # 80058011 <excpt+0x1>
    80015c68:	c789                	beqz	a5,80015c72 <store_page_fault_1+0xc0>
    80015c6a:	6498                	ld	a4,8(s1)
    80015c6c:	47bd                	li	a5,15
    80015c6e:	00f70c63          	beq	a4,a5,80015c86 <store_page_fault_1+0xd4>
    80015c72:	00018517          	auipc	a0,0x18
    80015c76:	58e50513          	addi	a0,a0,1422 # 8002e200 <__func__.0+0x318>
    80015c7a:	7b0150ef          	jal	8002b42a <printf>
    80015c7e:	02900513          	li	a0,41
    80015c82:	496140ef          	jal	8002a118 <putchar>
    80015c86:	4529                	li	a0,10
    80015c88:	490140ef          	jal	8002a118 <putchar>
    80015c8c:	00042797          	auipc	a5,0x42
    80015c90:	3857c783          	lbu	a5,901(a5) # 80058011 <excpt+0x1>
    80015c94:	4401                	li	s0,0
    80015c96:	c789                	beqz	a5,80015ca0 <store_page_fault_1+0xee>
    80015c98:	6480                	ld	s0,8(s1)
    80015c9a:	1445                	addi	s0,s0,-15
    80015c9c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80015ca0:	96ceb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015ca4:	37ab77b7          	lui	a5,0x37ab7
    80015ca8:	00100737          	lui	a4,0x100
    80015cac:	078a                	slli	a5,a5,0x2
    80015cae:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80015cb2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cb6:	0732                	slli	a4,a4,0xc
    80015cb8:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015cbc:	08200593          	li	a1,130
    80015cc0:	0001e617          	auipc	a2,0x1e
    80015cc4:	93060613          	addi	a2,a2,-1744 # 800335f0 <__func__.0+0x5708>
    80015cc8:	00018517          	auipc	a0,0x18
    80015ccc:	51850513          	addi	a0,a0,1304 # 8002e1e0 <__func__.0+0x2f8>
    80015cd0:	75a150ef          	jal	8002b42a <printf>
    80015cd4:	00042797          	auipc	a5,0x42
    80015cd8:	33d7c783          	lbu	a5,829(a5) # 80058011 <excpt+0x1>
    80015cdc:	00018597          	auipc	a1,0x18
    80015ce0:	4dc58593          	addi	a1,a1,1244 # 8002e1b8 <__func__.0+0x2d0>
    80015ce4:	cf89                	beqz	a5,80015cfe <store_page_fault_1+0x14c>
    80015ce6:	6498                	ld	a4,8(s1)
    80015ce8:	47bd                	li	a5,15
    80015cea:	00018597          	auipc	a1,0x18
    80015cee:	4be58593          	addi	a1,a1,1214 # 8002e1a8 <__func__.0+0x2c0>
    80015cf2:	00f70663          	beq	a4,a5,80015cfe <store_page_fault_1+0x14c>
    80015cf6:	00018597          	auipc	a1,0x18
    80015cfa:	4c258593          	addi	a1,a1,1218 # 8002e1b8 <__func__.0+0x2d0>
    80015cfe:	00018517          	auipc	a0,0x18
    80015d02:	4fa50513          	addi	a0,a0,1274 # 8002e1f8 <__func__.0+0x310>
    80015d06:	724150ef          	jal	8002b42a <printf>
    80015d0a:	00042797          	auipc	a5,0x42
    80015d0e:	3077c783          	lbu	a5,775(a5) # 80058011 <excpt+0x1>
    80015d12:	c789                	beqz	a5,80015d1c <store_page_fault_1+0x16a>
    80015d14:	6498                	ld	a4,8(s1)
    80015d16:	47bd                	li	a5,15
    80015d18:	00f70c63          	beq	a4,a5,80015d30 <store_page_fault_1+0x17e>
    80015d1c:	00018517          	auipc	a0,0x18
    80015d20:	4e450513          	addi	a0,a0,1252 # 8002e200 <__func__.0+0x318>
    80015d24:	706150ef          	jal	8002b42a <printf>
    80015d28:	02900513          	li	a0,41
    80015d2c:	3ec140ef          	jal	8002a118 <putchar>
    80015d30:	4529                	li	a0,10
    80015d32:	3e6140ef          	jal	8002a118 <putchar>
    80015d36:	c419                	beqz	s0,80015d44 <store_page_fault_1+0x192>
    80015d38:	00042797          	auipc	a5,0x42
    80015d3c:	2d97c783          	lbu	a5,729(a5) # 80058011 <excpt+0x1>
    80015d40:	4401                	li	s0,0
    80015d42:	e7dd                	bnez	a5,80015df0 <store_page_fault_1+0x23e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80015d44:	8c8eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015d48:	37ab77b7          	lui	a5,0x37ab7
    80015d4c:	00080737          	lui	a4,0x80
    80015d50:	078a                	slli	a5,a5,0x2
    80015d52:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80015d54:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015d58:	0736                	slli	a4,a4,0xd
    80015d5a:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d5e:	08200593          	li	a1,130
    80015d62:	0001e617          	auipc	a2,0x1e
    80015d66:	8be60613          	addi	a2,a2,-1858 # 80033620 <__func__.0+0x5738>
    80015d6a:	00018517          	auipc	a0,0x18
    80015d6e:	47650513          	addi	a0,a0,1142 # 8002e1e0 <__func__.0+0x2f8>
    80015d72:	6b8150ef          	jal	8002b42a <printf>
    80015d76:	00042797          	auipc	a5,0x42
    80015d7a:	29b7c783          	lbu	a5,667(a5) # 80058011 <excpt+0x1>
    80015d7e:	00018597          	auipc	a1,0x18
    80015d82:	43a58593          	addi	a1,a1,1082 # 8002e1b8 <__func__.0+0x2d0>
    80015d86:	e789                	bnez	a5,80015d90 <store_page_fault_1+0x1de>
    80015d88:	00018597          	auipc	a1,0x18
    80015d8c:	42058593          	addi	a1,a1,1056 # 8002e1a8 <__func__.0+0x2c0>
    80015d90:	00018517          	auipc	a0,0x18
    80015d94:	46850513          	addi	a0,a0,1128 # 8002e1f8 <__func__.0+0x310>
    80015d98:	692150ef          	jal	8002b42a <printf>
    80015d9c:	00042797          	auipc	a5,0x42
    80015da0:	2757c783          	lbu	a5,629(a5) # 80058011 <excpt+0x1>
    80015da4:	ebb9                	bnez	a5,80015dfa <store_page_fault_1+0x248>
    80015da6:	4529                	li	a0,10
    80015da8:	370140ef          	jal	8002a118 <putchar>
    80015dac:	c411                	beqz	s0,80015db8 <store_page_fault_1+0x206>
    80015dae:	00042797          	auipc	a5,0x42
    80015db2:	2637c783          	lbu	a5,611(a5) # 80058011 <excpt+0x1>
    80015db6:	c79d                	beqz	a5,80015de4 <store_page_fault_1+0x232>
    80015db8:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015dba:	00018597          	auipc	a1,0x18
    80015dbe:	3fe58593          	addi	a1,a1,1022 # 8002e1b8 <__func__.0+0x2d0>
    80015dc2:	00018517          	auipc	a0,0x18
    80015dc6:	49e50513          	addi	a0,a0,1182 # 8002e260 <__func__.0+0x378>
    80015dca:	660150ef          	jal	8002b42a <printf>
    80015dce:	4511                	li	a0,4
    80015dd0:	938eb0ef          	jal	80000f08 <goto_priv>
    80015dd4:	a51eb0ef          	jal	80001824 <reset_state>
}
    80015dd8:	60e2                	ld	ra,24(sp)
    80015dda:	8522                	mv	a0,s0
    80015ddc:	6442                	ld	s0,16(sp)
    80015dde:	64a2                	ld	s1,8(sp)
    80015de0:	6105                	addi	sp,sp,32
    80015de2:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015de4:	4405                	li	s0,1
    TEST_END();
    80015de6:	00018597          	auipc	a1,0x18
    80015dea:	3c258593          	addi	a1,a1,962 # 8002e1a8 <__func__.0+0x2c0>
    80015dee:	bfd1                	j	80015dc2 <store_page_fault_1+0x210>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015df0:	6480                	ld	s0,8(s1)
    80015df2:	1445                	addi	s0,s0,-15
    80015df4:	00143413          	seqz	s0,s0
    80015df8:	b7b1                	j	80015d44 <store_page_fault_1+0x192>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015dfa:	00018517          	auipc	a0,0x18
    80015dfe:	40650513          	addi	a0,a0,1030 # 8002e200 <__func__.0+0x318>
    80015e02:	628150ef          	jal	8002b42a <printf>
    80015e06:	02900513          	li	a0,41
    80015e0a:	30e140ef          	jal	8002a118 <putchar>
    80015e0e:	bf61                	j	80015da6 <store_page_fault_1+0x1f4>

0000000080015e10 <store_page_fault_2>:

bool store_page_fault_2(){
    80015e10:	1101                	addi	sp,sp,-32

    TEST_START();
    80015e12:	00017597          	auipc	a1,0x17
    80015e16:	db658593          	addi	a1,a1,-586 # 8002cbc8 <__func__.12>
    80015e1a:	00018517          	auipc	a0,0x18
    80015e1e:	3ae50513          	addi	a0,a0,942 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_2(){
    80015e22:	ec06                	sd	ra,24(sp)
    80015e24:	e822                	sd	s0,16(sp)
    80015e26:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e28:	602150ef          	jal	8002b42a <printf>
    80015e2c:	4529                	li	a0,10
    80015e2e:	2ea140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80015e32:	450d                	li	a0,3
    80015e34:	8d4eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015e38:	fa8ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e3c:	b89ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015e40:	93dea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015e44:	4511                	li	a0,4
    80015e46:	8c2eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015e4a:	000407b7          	lui	a5,0x40
    80015e4e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015e52:	450d                	li	a0,3
    80015e54:	8b4eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015e58:	4509                	li	a0,2
    80015e5a:	fcfea0ef          	jal	80000e28 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015e5e:	fafea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015e62:	37ab77b7          	lui	a5,0x37ab7
    80015e66:	00080737          	lui	a4,0x80
    80015e6a:	078a                	slli	a5,a5,0x2
    80015e6c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015e6e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015e72:	0736                	slli	a4,a4,0xd
    80015e74:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e78:	08200593          	li	a1,130
    80015e7c:	0001d617          	auipc	a2,0x1d
    80015e80:	7cc60613          	addi	a2,a2,1996 # 80033648 <__func__.0+0x5760>
    80015e84:	00018517          	auipc	a0,0x18
    80015e88:	35c50513          	addi	a0,a0,860 # 8002e1e0 <__func__.0+0x2f8>
    80015e8c:	59e150ef          	jal	8002b42a <printf>
    80015e90:	00042797          	auipc	a5,0x42
    80015e94:	1817c783          	lbu	a5,385(a5) # 80058011 <excpt+0x1>
    80015e98:	00042497          	auipc	s1,0x42
    80015e9c:	17848493          	addi	s1,s1,376 # 80058010 <excpt>
    80015ea0:	00018597          	auipc	a1,0x18
    80015ea4:	31858593          	addi	a1,a1,792 # 8002e1b8 <__func__.0+0x2d0>
    80015ea8:	cf89                	beqz	a5,80015ec2 <store_page_fault_2+0xb2>
    80015eaa:	6498                	ld	a4,8(s1)
    80015eac:	47bd                	li	a5,15
    80015eae:	00018597          	auipc	a1,0x18
    80015eb2:	2fa58593          	addi	a1,a1,762 # 8002e1a8 <__func__.0+0x2c0>
    80015eb6:	00f70663          	beq	a4,a5,80015ec2 <store_page_fault_2+0xb2>
    80015eba:	00018597          	auipc	a1,0x18
    80015ebe:	2fe58593          	addi	a1,a1,766 # 8002e1b8 <__func__.0+0x2d0>
    80015ec2:	00018517          	auipc	a0,0x18
    80015ec6:	33650513          	addi	a0,a0,822 # 8002e1f8 <__func__.0+0x310>
    80015eca:	560150ef          	jal	8002b42a <printf>
    80015ece:	00042797          	auipc	a5,0x42
    80015ed2:	1437c783          	lbu	a5,323(a5) # 80058011 <excpt+0x1>
    80015ed6:	c789                	beqz	a5,80015ee0 <store_page_fault_2+0xd0>
    80015ed8:	6498                	ld	a4,8(s1)
    80015eda:	47bd                	li	a5,15
    80015edc:	00f70c63          	beq	a4,a5,80015ef4 <store_page_fault_2+0xe4>
    80015ee0:	00018517          	auipc	a0,0x18
    80015ee4:	32050513          	addi	a0,a0,800 # 8002e200 <__func__.0+0x318>
    80015ee8:	542150ef          	jal	8002b42a <printf>
    80015eec:	02900513          	li	a0,41
    80015ef0:	228140ef          	jal	8002a118 <putchar>
    80015ef4:	4529                	li	a0,10
    80015ef6:	222140ef          	jal	8002a118 <putchar>
    80015efa:	00042417          	auipc	s0,0x42
    80015efe:	11744403          	lbu	s0,279(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80015f02:	00018597          	auipc	a1,0x18
    80015f06:	2b658593          	addi	a1,a1,694 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015f0a:	cc11                	beqz	s0,80015f26 <store_page_fault_2+0x116>
    80015f0c:	6498                	ld	a4,8(s1)
    80015f0e:	47bd                	li	a5,15
    TEST_END();
    80015f10:	00018597          	auipc	a1,0x18
    80015f14:	29858593          	addi	a1,a1,664 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015f18:	00f70763          	beq	a4,a5,80015f26 <store_page_fault_2+0x116>
    80015f1c:	4401                	li	s0,0
    TEST_END();
    80015f1e:	00018597          	auipc	a1,0x18
    80015f22:	29a58593          	addi	a1,a1,666 # 8002e1b8 <__func__.0+0x2d0>
    80015f26:	00018517          	auipc	a0,0x18
    80015f2a:	33a50513          	addi	a0,a0,826 # 8002e260 <__func__.0+0x378>
    80015f2e:	4fc150ef          	jal	8002b42a <printf>
    80015f32:	4511                	li	a0,4
    80015f34:	fd5ea0ef          	jal	80000f08 <goto_priv>
    80015f38:	8edeb0ef          	jal	80001824 <reset_state>
}
    80015f3c:	60e2                	ld	ra,24(sp)
    80015f3e:	8522                	mv	a0,s0
    80015f40:	6442                	ld	s0,16(sp)
    80015f42:	64a2                	ld	s1,8(sp)
    80015f44:	6105                	addi	sp,sp,32
    80015f46:	8082                	ret

0000000080015f48 <store_page_fault_3>:

bool store_page_fault_3(){
    80015f48:	1141                	addi	sp,sp,-16

    TEST_START();
    80015f4a:	00017597          	auipc	a1,0x17
    80015f4e:	c9658593          	addi	a1,a1,-874 # 8002cbe0 <__func__.11>
    80015f52:	00018517          	auipc	a0,0x18
    80015f56:	27650513          	addi	a0,a0,630 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80015f5a:	e406                	sd	ra,8(sp)
    80015f5c:	e022                	sd	s0,0(sp)
    TEST_START();
    80015f5e:	4cc150ef          	jal	8002b42a <printf>
    80015f62:	4529                	li	a0,10
    80015f64:	1b4140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80015f68:	450d                	li	a0,3
    80015f6a:	f9fea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015f6e:	e72ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015f72:	a53ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015f76:	807ea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80015f7a:	4511                	li	a0,4
    80015f7c:	f8dea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015f80:	000407b7          	lui	a5,0x40
    80015f84:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80015f88:	450d                	li	a0,3
    80015f8a:	f7fea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015f8e:	4509                	li	a0,2
    80015f90:	e99ea0ef          	jal	80000e28 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015f94:	e79ea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015f98:	37ab77b7          	lui	a5,0x37ab7
    80015f9c:	00080737          	lui	a4,0x80
    80015fa0:	078a                	slli	a5,a5,0x2
    80015fa2:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015fa4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015fa8:	0736                	slli	a4,a4,0xd
    80015faa:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015fae:	08200593          	li	a1,130
    80015fb2:	0001d617          	auipc	a2,0x1d
    80015fb6:	6d660613          	addi	a2,a2,1750 # 80033688 <__func__.0+0x57a0>
    80015fba:	00018517          	auipc	a0,0x18
    80015fbe:	22650513          	addi	a0,a0,550 # 8002e1e0 <__func__.0+0x2f8>
    80015fc2:	468150ef          	jal	8002b42a <printf>
    80015fc6:	00042797          	auipc	a5,0x42
    80015fca:	04b7c783          	lbu	a5,75(a5) # 80058011 <excpt+0x1>
    80015fce:	00018597          	auipc	a1,0x18
    80015fd2:	1da58593          	addi	a1,a1,474 # 8002e1a8 <__func__.0+0x2c0>
    80015fd6:	c789                	beqz	a5,80015fe0 <store_page_fault_3+0x98>
    80015fd8:	00018597          	auipc	a1,0x18
    80015fdc:	1e058593          	addi	a1,a1,480 # 8002e1b8 <__func__.0+0x2d0>
    80015fe0:	00018517          	auipc	a0,0x18
    80015fe4:	21850513          	addi	a0,a0,536 # 8002e1f8 <__func__.0+0x310>
    80015fe8:	442150ef          	jal	8002b42a <printf>
    80015fec:	00042797          	auipc	a5,0x42
    80015ff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    80015ff4:	e7a1                	bnez	a5,8001603c <store_page_fault_3+0xf4>
    80015ff6:	4529                	li	a0,10
    80015ff8:	120140ef          	jal	8002a118 <putchar>
    80015ffc:	00042797          	auipc	a5,0x42
    80016000:	0157c783          	lbu	a5,21(a5) # 80058011 <excpt+0x1>
    80016004:	e795                	bnez	a5,80016030 <store_page_fault_3+0xe8>
    80016006:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016008:	00018597          	auipc	a1,0x18
    8001600c:	1a058593          	addi	a1,a1,416 # 8002e1a8 <__func__.0+0x2c0>
    80016010:	00018517          	auipc	a0,0x18
    80016014:	25050513          	addi	a0,a0,592 # 8002e260 <__func__.0+0x378>
    80016018:	412150ef          	jal	8002b42a <printf>
    8001601c:	4511                	li	a0,4
    8001601e:	eebea0ef          	jal	80000f08 <goto_priv>
    80016022:	803eb0ef          	jal	80001824 <reset_state>
}
    80016026:	60a2                	ld	ra,8(sp)
    80016028:	8522                	mv	a0,s0
    8001602a:	6402                	ld	s0,0(sp)
    8001602c:	0141                	addi	sp,sp,16
    8001602e:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80016030:	4401                	li	s0,0
    TEST_END();
    80016032:	00018597          	auipc	a1,0x18
    80016036:	18658593          	addi	a1,a1,390 # 8002e1b8 <__func__.0+0x2d0>
    8001603a:	bfd9                	j	80016010 <store_page_fault_3+0xc8>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001603c:	00018517          	auipc	a0,0x18
    80016040:	1c450513          	addi	a0,a0,452 # 8002e200 <__func__.0+0x318>
    80016044:	3e6150ef          	jal	8002b42a <printf>
    80016048:	02900513          	li	a0,41
    8001604c:	0cc140ef          	jal	8002a118 <putchar>
    80016050:	b75d                	j	80015ff6 <store_page_fault_3+0xae>

0000000080016052 <store_page_fault_4>:


bool store_page_fault_4(){
    80016052:	1101                	addi	sp,sp,-32

    TEST_START();
    80016054:	00017597          	auipc	a1,0x17
    80016058:	ba458593          	addi	a1,a1,-1116 # 8002cbf8 <__func__.10>
    8001605c:	00018517          	auipc	a0,0x18
    80016060:	16c50513          	addi	a0,a0,364 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_4(){
    80016064:	ec06                	sd	ra,24(sp)
    80016066:	e822                	sd	s0,16(sp)
    80016068:	e426                	sd	s1,8(sp)
    TEST_START();
    8001606a:	3c0150ef          	jal	8002b42a <printf>
    8001606e:	4529                	li	a0,10
    80016070:	0a8140ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016074:	450d                	li	a0,3
    80016076:	e93ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001607a:	d66ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001607e:	947ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016082:	efaea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016086:	4509                	li	a0,2
    80016088:	e81ea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001608c:	d81ea0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016090:	37ab77b7          	lui	a5,0x37ab7
    80016094:	078a                	slli	a5,a5,0x2
    80016096:	40019737          	lui	a4,0x40019
    8001609a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001609e:	070a                	slli	a4,a4,0x2
    800160a0:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800160a4:	08200593          	li	a1,130
    800160a8:	0001d617          	auipc	a2,0x1d
    800160ac:	61860613          	addi	a2,a2,1560 # 800336c0 <__func__.0+0x57d8>
    800160b0:	00018517          	auipc	a0,0x18
    800160b4:	13050513          	addi	a0,a0,304 # 8002e1e0 <__func__.0+0x2f8>
    800160b8:	372150ef          	jal	8002b42a <printf>
    800160bc:	00042797          	auipc	a5,0x42
    800160c0:	f557c783          	lbu	a5,-171(a5) # 80058011 <excpt+0x1>
    800160c4:	00042497          	auipc	s1,0x42
    800160c8:	f4c48493          	addi	s1,s1,-180 # 80058010 <excpt>
    800160cc:	00018597          	auipc	a1,0x18
    800160d0:	0ec58593          	addi	a1,a1,236 # 8002e1b8 <__func__.0+0x2d0>
    800160d4:	cf89                	beqz	a5,800160ee <store_page_fault_4+0x9c>
    800160d6:	6498                	ld	a4,8(s1)
    800160d8:	47bd                	li	a5,15
    800160da:	00018597          	auipc	a1,0x18
    800160de:	0ce58593          	addi	a1,a1,206 # 8002e1a8 <__func__.0+0x2c0>
    800160e2:	00f70663          	beq	a4,a5,800160ee <store_page_fault_4+0x9c>
    800160e6:	00018597          	auipc	a1,0x18
    800160ea:	0d258593          	addi	a1,a1,210 # 8002e1b8 <__func__.0+0x2d0>
    800160ee:	00018517          	auipc	a0,0x18
    800160f2:	10a50513          	addi	a0,a0,266 # 8002e1f8 <__func__.0+0x310>
    800160f6:	334150ef          	jal	8002b42a <printf>
    800160fa:	00042797          	auipc	a5,0x42
    800160fe:	f177c783          	lbu	a5,-233(a5) # 80058011 <excpt+0x1>
    80016102:	c789                	beqz	a5,8001610c <store_page_fault_4+0xba>
    80016104:	6498                	ld	a4,8(s1)
    80016106:	47bd                	li	a5,15
    80016108:	00f70c63          	beq	a4,a5,80016120 <store_page_fault_4+0xce>
    8001610c:	00018517          	auipc	a0,0x18
    80016110:	0f450513          	addi	a0,a0,244 # 8002e200 <__func__.0+0x318>
    80016114:	316150ef          	jal	8002b42a <printf>
    80016118:	02900513          	li	a0,41
    8001611c:	7fd130ef          	jal	8002a118 <putchar>
    80016120:	4529                	li	a0,10
    80016122:	7f7130ef          	jal	8002a118 <putchar>
    80016126:	00042797          	auipc	a5,0x42
    8001612a:	eeb7c783          	lbu	a5,-277(a5) # 80058011 <excpt+0x1>
    8001612e:	4401                	li	s0,0
    80016130:	c789                	beqz	a5,8001613a <store_page_fault_4+0xe8>
    80016132:	6480                	ld	s0,8(s1)
    80016134:	1445                	addi	s0,s0,-15
    80016136:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001613a:	cd3ea0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001613e:	000807b7          	lui	a5,0x80
    80016142:	1007b073          	csrc	sstatus,a5
    80016146:	37ab77b7          	lui	a5,0x37ab7
    8001614a:	00100737          	lui	a4,0x100
    8001614e:	078a                	slli	a5,a5,0x2
    80016150:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80016154:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016158:	0732                	slli	a4,a4,0xc
    8001615a:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    8001615e:	08200593          	li	a1,130
    80016162:	0001d617          	auipc	a2,0x1d
    80016166:	58660613          	addi	a2,a2,1414 # 800336e8 <__func__.0+0x5800>
    8001616a:	00018517          	auipc	a0,0x18
    8001616e:	07650513          	addi	a0,a0,118 # 8002e1e0 <__func__.0+0x2f8>
    80016172:	2b8150ef          	jal	8002b42a <printf>
    80016176:	00042797          	auipc	a5,0x42
    8001617a:	e9b7c783          	lbu	a5,-357(a5) # 80058011 <excpt+0x1>
    8001617e:	00018597          	auipc	a1,0x18
    80016182:	03a58593          	addi	a1,a1,58 # 8002e1b8 <__func__.0+0x2d0>
    80016186:	cf89                	beqz	a5,800161a0 <store_page_fault_4+0x14e>
    80016188:	6498                	ld	a4,8(s1)
    8001618a:	47bd                	li	a5,15
    8001618c:	00018597          	auipc	a1,0x18
    80016190:	01c58593          	addi	a1,a1,28 # 8002e1a8 <__func__.0+0x2c0>
    80016194:	00f70663          	beq	a4,a5,800161a0 <store_page_fault_4+0x14e>
    80016198:	00018597          	auipc	a1,0x18
    8001619c:	02058593          	addi	a1,a1,32 # 8002e1b8 <__func__.0+0x2d0>
    800161a0:	00018517          	auipc	a0,0x18
    800161a4:	05850513          	addi	a0,a0,88 # 8002e1f8 <__func__.0+0x310>
    800161a8:	282150ef          	jal	8002b42a <printf>
    800161ac:	00042797          	auipc	a5,0x42
    800161b0:	e657c783          	lbu	a5,-411(a5) # 80058011 <excpt+0x1>
    800161b4:	c789                	beqz	a5,800161be <store_page_fault_4+0x16c>
    800161b6:	6498                	ld	a4,8(s1)
    800161b8:	47bd                	li	a5,15
    800161ba:	00f70c63          	beq	a4,a5,800161d2 <store_page_fault_4+0x180>
    800161be:	00018517          	auipc	a0,0x18
    800161c2:	04250513          	addi	a0,a0,66 # 8002e200 <__func__.0+0x318>
    800161c6:	264150ef          	jal	8002b42a <printf>
    800161ca:	02900513          	li	a0,41
    800161ce:	74b130ef          	jal	8002a118 <putchar>
    800161d2:	4529                	li	a0,10
    800161d4:	745130ef          	jal	8002a118 <putchar>
    800161d8:	c419                	beqz	s0,800161e6 <store_page_fault_4+0x194>
    800161da:	00042797          	auipc	a5,0x42
    800161de:	e377c783          	lbu	a5,-457(a5) # 80058011 <excpt+0x1>
    800161e2:	4401                	li	s0,0
    800161e4:	e7dd                	bnez	a5,80016292 <store_page_fault_4+0x240>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800161e6:	c27ea0ef          	jal	80000e0c <test_setup_except_function>
    800161ea:	37ab77b7          	lui	a5,0x37ab7
    800161ee:	00080737          	lui	a4,0x80
    800161f2:	078a                	slli	a5,a5,0x2
    800161f4:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    800161f6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800161fa:	0736                	slli	a4,a4,0xd
    800161fc:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016200:	08200593          	li	a1,130
    80016204:	0001d617          	auipc	a2,0x1d
    80016208:	50c60613          	addi	a2,a2,1292 # 80033710 <__func__.0+0x5828>
    8001620c:	00018517          	auipc	a0,0x18
    80016210:	fd450513          	addi	a0,a0,-44 # 8002e1e0 <__func__.0+0x2f8>
    80016214:	216150ef          	jal	8002b42a <printf>
    80016218:	00042797          	auipc	a5,0x42
    8001621c:	df97c783          	lbu	a5,-519(a5) # 80058011 <excpt+0x1>
    80016220:	00018597          	auipc	a1,0x18
    80016224:	f9858593          	addi	a1,a1,-104 # 8002e1b8 <__func__.0+0x2d0>
    80016228:	e789                	bnez	a5,80016232 <store_page_fault_4+0x1e0>
    8001622a:	00018597          	auipc	a1,0x18
    8001622e:	f7e58593          	addi	a1,a1,-130 # 8002e1a8 <__func__.0+0x2c0>
    80016232:	00018517          	auipc	a0,0x18
    80016236:	fc650513          	addi	a0,a0,-58 # 8002e1f8 <__func__.0+0x310>
    8001623a:	1f0150ef          	jal	8002b42a <printf>
    8001623e:	00042797          	auipc	a5,0x42
    80016242:	dd37c783          	lbu	a5,-557(a5) # 80058011 <excpt+0x1>
    80016246:	ebb9                	bnez	a5,8001629c <store_page_fault_4+0x24a>
    80016248:	4529                	li	a0,10
    8001624a:	6cf130ef          	jal	8002a118 <putchar>
    8001624e:	c411                	beqz	s0,8001625a <store_page_fault_4+0x208>
    80016250:	00042797          	auipc	a5,0x42
    80016254:	dc17c783          	lbu	a5,-575(a5) # 80058011 <excpt+0x1>
    80016258:	c79d                	beqz	a5,80016286 <store_page_fault_4+0x234>
    8001625a:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    8001625c:	00018597          	auipc	a1,0x18
    80016260:	f5c58593          	addi	a1,a1,-164 # 8002e1b8 <__func__.0+0x2d0>
    80016264:	00018517          	auipc	a0,0x18
    80016268:	ffc50513          	addi	a0,a0,-4 # 8002e260 <__func__.0+0x378>
    8001626c:	1be150ef          	jal	8002b42a <printf>
    80016270:	4511                	li	a0,4
    80016272:	c97ea0ef          	jal	80000f08 <goto_priv>
    80016276:	daeeb0ef          	jal	80001824 <reset_state>
}
    8001627a:	60e2                	ld	ra,24(sp)
    8001627c:	8522                	mv	a0,s0
    8001627e:	6442                	ld	s0,16(sp)
    80016280:	64a2                	ld	s1,8(sp)
    80016282:	6105                	addi	sp,sp,32
    80016284:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016286:	4405                	li	s0,1
    TEST_END();
    80016288:	00018597          	auipc	a1,0x18
    8001628c:	f2058593          	addi	a1,a1,-224 # 8002e1a8 <__func__.0+0x2c0>
    80016290:	bfd1                	j	80016264 <store_page_fault_4+0x212>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80016292:	6480                	ld	s0,8(s1)
    80016294:	1445                	addi	s0,s0,-15
    80016296:	00143413          	seqz	s0,s0
    8001629a:	b7b1                	j	800161e6 <store_page_fault_4+0x194>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    8001629c:	00018517          	auipc	a0,0x18
    800162a0:	f6450513          	addi	a0,a0,-156 # 8002e200 <__func__.0+0x318>
    800162a4:	186150ef          	jal	8002b42a <printf>
    800162a8:	02900513          	li	a0,41
    800162ac:	66d130ef          	jal	8002a118 <putchar>
    800162b0:	bf61                	j	80016248 <store_page_fault_4+0x1f6>

00000000800162b2 <store_page_fault_5>:

bool store_page_fault_5(){
    800162b2:	1101                	addi	sp,sp,-32

    TEST_START();
    800162b4:	00017597          	auipc	a1,0x17
    800162b8:	95c58593          	addi	a1,a1,-1700 # 8002cc10 <__func__.9>
    800162bc:	00018517          	auipc	a0,0x18
    800162c0:	f0c50513          	addi	a0,a0,-244 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_5(){
    800162c4:	ec06                	sd	ra,24(sp)
    800162c6:	e822                	sd	s0,16(sp)
    800162c8:	e426                	sd	s1,8(sp)
    TEST_START();
    800162ca:	160150ef          	jal	8002b42a <printf>
    800162ce:	4529                	li	a0,10
    800162d0:	649130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800162d4:	450d                	li	a0,3
    800162d6:	c33ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800162da:	b06ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800162de:	ee6ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800162e2:	c9aea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800162e6:	4511                	li	a0,4
    800162e8:	c21ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800162ec:	000407b7          	lui	a5,0x40
    800162f0:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800162f4:	4509                	li	a0,2
    800162f6:	c13ea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800162fa:	b13ea0ef          	jal	80000e0c <test_setup_except_function>
    800162fe:	37ab77b7          	lui	a5,0x37ab7
    80016302:	00080737          	lui	a4,0x80
    80016306:	078a                	slli	a5,a5,0x2
    80016308:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001630a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001630e:	0736                	slli	a4,a4,0xd
    80016310:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016314:	08200593          	li	a1,130
    80016318:	0001d617          	auipc	a2,0x1d
    8001631c:	42060613          	addi	a2,a2,1056 # 80033738 <__func__.0+0x5850>
    80016320:	00018517          	auipc	a0,0x18
    80016324:	ec050513          	addi	a0,a0,-320 # 8002e1e0 <__func__.0+0x2f8>
    80016328:	102150ef          	jal	8002b42a <printf>
    8001632c:	00042797          	auipc	a5,0x42
    80016330:	ce57c783          	lbu	a5,-795(a5) # 80058011 <excpt+0x1>
    80016334:	00042497          	auipc	s1,0x42
    80016338:	cdc48493          	addi	s1,s1,-804 # 80058010 <excpt>
    8001633c:	00018597          	auipc	a1,0x18
    80016340:	e7c58593          	addi	a1,a1,-388 # 8002e1b8 <__func__.0+0x2d0>
    80016344:	cf89                	beqz	a5,8001635e <store_page_fault_5+0xac>
    80016346:	6498                	ld	a4,8(s1)
    80016348:	47bd                	li	a5,15
    8001634a:	00018597          	auipc	a1,0x18
    8001634e:	e5e58593          	addi	a1,a1,-418 # 8002e1a8 <__func__.0+0x2c0>
    80016352:	00f70663          	beq	a4,a5,8001635e <store_page_fault_5+0xac>
    80016356:	00018597          	auipc	a1,0x18
    8001635a:	e6258593          	addi	a1,a1,-414 # 8002e1b8 <__func__.0+0x2d0>
    8001635e:	00018517          	auipc	a0,0x18
    80016362:	e9a50513          	addi	a0,a0,-358 # 8002e1f8 <__func__.0+0x310>
    80016366:	0c4150ef          	jal	8002b42a <printf>
    8001636a:	00042797          	auipc	a5,0x42
    8001636e:	ca77c783          	lbu	a5,-857(a5) # 80058011 <excpt+0x1>
    80016372:	c789                	beqz	a5,8001637c <store_page_fault_5+0xca>
    80016374:	6498                	ld	a4,8(s1)
    80016376:	47bd                	li	a5,15
    80016378:	00f70c63          	beq	a4,a5,80016390 <store_page_fault_5+0xde>
    8001637c:	00018517          	auipc	a0,0x18
    80016380:	e8450513          	addi	a0,a0,-380 # 8002e200 <__func__.0+0x318>
    80016384:	0a6150ef          	jal	8002b42a <printf>
    80016388:	02900513          	li	a0,41
    8001638c:	58d130ef          	jal	8002a118 <putchar>
    80016390:	4529                	li	a0,10
    80016392:	587130ef          	jal	8002a118 <putchar>
    80016396:	00042417          	auipc	s0,0x42
    8001639a:	c7b44403          	lbu	s0,-901(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    8001639e:	00018597          	auipc	a1,0x18
    800163a2:	e1a58593          	addi	a1,a1,-486 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800163a6:	cc11                	beqz	s0,800163c2 <store_page_fault_5+0x110>
    800163a8:	6498                	ld	a4,8(s1)
    800163aa:	47bd                	li	a5,15
    TEST_END();
    800163ac:	00018597          	auipc	a1,0x18
    800163b0:	dfc58593          	addi	a1,a1,-516 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800163b4:	00f70763          	beq	a4,a5,800163c2 <store_page_fault_5+0x110>
    800163b8:	4401                	li	s0,0
    TEST_END();
    800163ba:	00018597          	auipc	a1,0x18
    800163be:	dfe58593          	addi	a1,a1,-514 # 8002e1b8 <__func__.0+0x2d0>
    800163c2:	00018517          	auipc	a0,0x18
    800163c6:	e9e50513          	addi	a0,a0,-354 # 8002e260 <__func__.0+0x378>
    800163ca:	060150ef          	jal	8002b42a <printf>
    800163ce:	4511                	li	a0,4
    800163d0:	b39ea0ef          	jal	80000f08 <goto_priv>
    800163d4:	c50eb0ef          	jal	80001824 <reset_state>
}
    800163d8:	60e2                	ld	ra,24(sp)
    800163da:	8522                	mv	a0,s0
    800163dc:	6442                	ld	s0,16(sp)
    800163de:	64a2                	ld	s1,8(sp)
    800163e0:	6105                	addi	sp,sp,32
    800163e2:	8082                	ret

00000000800163e4 <store_page_fault_6>:

bool store_page_fault_6(){
    800163e4:	1141                	addi	sp,sp,-16

    TEST_START();
    800163e6:	00017597          	auipc	a1,0x17
    800163ea:	84258593          	addi	a1,a1,-1982 # 8002cc28 <__func__.8>
    800163ee:	00018517          	auipc	a0,0x18
    800163f2:	dda50513          	addi	a0,a0,-550 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_6(){
    800163f6:	e406                	sd	ra,8(sp)
    800163f8:	e022                	sd	s0,0(sp)
    TEST_START();
    800163fa:	030150ef          	jal	8002b42a <printf>
    800163fe:	4529                	li	a0,10
    80016400:	519130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016404:	450d                	li	a0,3
    80016406:	b03ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001640a:	9d6ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001640e:	db6ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016412:	b6aea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016416:	4511                	li	a0,4
    80016418:	af1ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001641c:	000407b7          	lui	a5,0x40
    80016420:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80016424:	4509                	li	a0,2
    80016426:	ae3ea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001642a:	9e3ea0ef          	jal	80000e0c <test_setup_except_function>
    8001642e:	37ab77b7          	lui	a5,0x37ab7
    80016432:	00080737          	lui	a4,0x80
    80016436:	078a                	slli	a5,a5,0x2
    80016438:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001643a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001643e:	0736                	slli	a4,a4,0xd
    80016440:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016444:	08200593          	li	a1,130
    80016448:	0001d617          	auipc	a2,0x1d
    8001644c:	32860613          	addi	a2,a2,808 # 80033770 <__func__.0+0x5888>
    80016450:	00018517          	auipc	a0,0x18
    80016454:	d9050513          	addi	a0,a0,-624 # 8002e1e0 <__func__.0+0x2f8>
    80016458:	7d3140ef          	jal	8002b42a <printf>
    8001645c:	00042797          	auipc	a5,0x42
    80016460:	bb57c783          	lbu	a5,-1099(a5) # 80058011 <excpt+0x1>
    80016464:	00018597          	auipc	a1,0x18
    80016468:	d4458593          	addi	a1,a1,-700 # 8002e1a8 <__func__.0+0x2c0>
    8001646c:	c789                	beqz	a5,80016476 <store_page_fault_6+0x92>
    8001646e:	00018597          	auipc	a1,0x18
    80016472:	d4a58593          	addi	a1,a1,-694 # 8002e1b8 <__func__.0+0x2d0>
    80016476:	00018517          	auipc	a0,0x18
    8001647a:	d8250513          	addi	a0,a0,-638 # 8002e1f8 <__func__.0+0x310>
    8001647e:	7ad140ef          	jal	8002b42a <printf>
    80016482:	00042797          	auipc	a5,0x42
    80016486:	b8f7c783          	lbu	a5,-1137(a5) # 80058011 <excpt+0x1>
    8001648a:	e7a1                	bnez	a5,800164d2 <store_page_fault_6+0xee>
    8001648c:	4529                	li	a0,10
    8001648e:	48b130ef          	jal	8002a118 <putchar>
    80016492:	00042797          	auipc	a5,0x42
    80016496:	b7f7c783          	lbu	a5,-1153(a5) # 80058011 <excpt+0x1>
    8001649a:	e795                	bnez	a5,800164c6 <store_page_fault_6+0xe2>
    8001649c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001649e:	00018597          	auipc	a1,0x18
    800164a2:	d0a58593          	addi	a1,a1,-758 # 8002e1a8 <__func__.0+0x2c0>
    800164a6:	00018517          	auipc	a0,0x18
    800164aa:	dba50513          	addi	a0,a0,-582 # 8002e260 <__func__.0+0x378>
    800164ae:	77d140ef          	jal	8002b42a <printf>
    800164b2:	4511                	li	a0,4
    800164b4:	a55ea0ef          	jal	80000f08 <goto_priv>
    800164b8:	b6ceb0ef          	jal	80001824 <reset_state>
}
    800164bc:	60a2                	ld	ra,8(sp)
    800164be:	8522                	mv	a0,s0
    800164c0:	6402                	ld	s0,0(sp)
    800164c2:	0141                	addi	sp,sp,16
    800164c4:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800164c6:	4401                	li	s0,0
    TEST_END();
    800164c8:	00018597          	auipc	a1,0x18
    800164cc:	cf058593          	addi	a1,a1,-784 # 8002e1b8 <__func__.0+0x2d0>
    800164d0:	bfd9                	j	800164a6 <store_page_fault_6+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800164d2:	00018517          	auipc	a0,0x18
    800164d6:	d2e50513          	addi	a0,a0,-722 # 8002e200 <__func__.0+0x318>
    800164da:	751140ef          	jal	8002b42a <printf>
    800164de:	02900513          	li	a0,41
    800164e2:	437130ef          	jal	8002a118 <putchar>
    800164e6:	b75d                	j	8001648c <store_page_fault_6+0xa8>

00000000800164e8 <store_page_fault_7>:

bool store_page_fault_7(){
    800164e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800164ea:	00016597          	auipc	a1,0x16
    800164ee:	75658593          	addi	a1,a1,1878 # 8002cc40 <__func__.7>
    800164f2:	00018517          	auipc	a0,0x18
    800164f6:	cd650513          	addi	a0,a0,-810 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_7(){
    800164fa:	ec06                	sd	ra,24(sp)
    800164fc:	e822                	sd	s0,16(sp)
    800164fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80016500:	72b140ef          	jal	8002b42a <printf>
    80016504:	4529                	li	a0,10
    80016506:	413130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001650a:	450d                	li	a0,3
    8001650c:	9fdea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016510:	8d0ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016514:	cb0ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016518:	a64ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    8001651c:	4511                	li	a0,4
    8001651e:	9ebea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016522:	000407b7          	lui	a5,0x40
    80016526:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001652a:	450d                	li	a0,3
    8001652c:	9ddea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016530:	8ddea0ef          	jal	80000e0c <test_setup_except_function>
    80016534:	37ab77b7          	lui	a5,0x37ab7
    80016538:	00080737          	lui	a4,0x80
    8001653c:	078a                	slli	a5,a5,0x2
    8001653e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016540:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016544:	0736                	slli	a4,a4,0xd
    80016546:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001654a:	08200593          	li	a1,130
    8001654e:	0001d617          	auipc	a2,0x1d
    80016552:	25a60613          	addi	a2,a2,602 # 800337a8 <__func__.0+0x58c0>
    80016556:	00018517          	auipc	a0,0x18
    8001655a:	c8a50513          	addi	a0,a0,-886 # 8002e1e0 <__func__.0+0x2f8>
    8001655e:	6cd140ef          	jal	8002b42a <printf>
    80016562:	00042797          	auipc	a5,0x42
    80016566:	aaf7c783          	lbu	a5,-1361(a5) # 80058011 <excpt+0x1>
    8001656a:	00042497          	auipc	s1,0x42
    8001656e:	aa648493          	addi	s1,s1,-1370 # 80058010 <excpt>
    80016572:	00018597          	auipc	a1,0x18
    80016576:	c4658593          	addi	a1,a1,-954 # 8002e1b8 <__func__.0+0x2d0>
    8001657a:	cf89                	beqz	a5,80016594 <store_page_fault_7+0xac>
    8001657c:	6498                	ld	a4,8(s1)
    8001657e:	47bd                	li	a5,15
    80016580:	00018597          	auipc	a1,0x18
    80016584:	c2858593          	addi	a1,a1,-984 # 8002e1a8 <__func__.0+0x2c0>
    80016588:	00f70663          	beq	a4,a5,80016594 <store_page_fault_7+0xac>
    8001658c:	00018597          	auipc	a1,0x18
    80016590:	c2c58593          	addi	a1,a1,-980 # 8002e1b8 <__func__.0+0x2d0>
    80016594:	00018517          	auipc	a0,0x18
    80016598:	c6450513          	addi	a0,a0,-924 # 8002e1f8 <__func__.0+0x310>
    8001659c:	68f140ef          	jal	8002b42a <printf>
    800165a0:	00042797          	auipc	a5,0x42
    800165a4:	a717c783          	lbu	a5,-1423(a5) # 80058011 <excpt+0x1>
    800165a8:	c789                	beqz	a5,800165b2 <store_page_fault_7+0xca>
    800165aa:	6498                	ld	a4,8(s1)
    800165ac:	47bd                	li	a5,15
    800165ae:	00f70c63          	beq	a4,a5,800165c6 <store_page_fault_7+0xde>
    800165b2:	00018517          	auipc	a0,0x18
    800165b6:	c4e50513          	addi	a0,a0,-946 # 8002e200 <__func__.0+0x318>
    800165ba:	671140ef          	jal	8002b42a <printf>
    800165be:	02900513          	li	a0,41
    800165c2:	357130ef          	jal	8002a118 <putchar>
    800165c6:	4529                	li	a0,10
    800165c8:	351130ef          	jal	8002a118 <putchar>
    800165cc:	00042417          	auipc	s0,0x42
    800165d0:	a4544403          	lbu	s0,-1467(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800165d4:	00018597          	auipc	a1,0x18
    800165d8:	be458593          	addi	a1,a1,-1052 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800165dc:	cc11                	beqz	s0,800165f8 <store_page_fault_7+0x110>
    800165de:	6498                	ld	a4,8(s1)
    800165e0:	47bd                	li	a5,15
    TEST_END();
    800165e2:	00018597          	auipc	a1,0x18
    800165e6:	bc658593          	addi	a1,a1,-1082 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800165ea:	00f70763          	beq	a4,a5,800165f8 <store_page_fault_7+0x110>
    800165ee:	4401                	li	s0,0
    TEST_END();
    800165f0:	00018597          	auipc	a1,0x18
    800165f4:	bc858593          	addi	a1,a1,-1080 # 8002e1b8 <__func__.0+0x2d0>
    800165f8:	00018517          	auipc	a0,0x18
    800165fc:	c6850513          	addi	a0,a0,-920 # 8002e260 <__func__.0+0x378>
    80016600:	62b140ef          	jal	8002b42a <printf>
    80016604:	4511                	li	a0,4
    80016606:	903ea0ef          	jal	80000f08 <goto_priv>
    8001660a:	a1aeb0ef          	jal	80001824 <reset_state>
}
    8001660e:	60e2                	ld	ra,24(sp)
    80016610:	8522                	mv	a0,s0
    80016612:	6442                	ld	s0,16(sp)
    80016614:	64a2                	ld	s1,8(sp)
    80016616:	6105                	addi	sp,sp,32
    80016618:	8082                	ret

000000008001661a <store_page_fault_8>:

bool store_page_fault_8(){
    8001661a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001661c:	00016597          	auipc	a1,0x16
    80016620:	63c58593          	addi	a1,a1,1596 # 8002cc58 <__func__.6>
    80016624:	00018517          	auipc	a0,0x18
    80016628:	ba450513          	addi	a0,a0,-1116 # 8002e1c8 <__func__.0+0x2e0>
bool store_page_fault_8(){
    8001662c:	e406                	sd	ra,8(sp)
    8001662e:	e022                	sd	s0,0(sp)
    TEST_START();
    80016630:	5fb140ef          	jal	8002b42a <printf>
    80016634:	4529                	li	a0,10
    80016636:	2e3130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001663a:	450d                	li	a0,3
    8001663c:	8cdea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016640:	fa1e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016644:	b80ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016648:	934ea0ef          	jal	8000077c <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001664c:	4511                	li	a0,4
    8001664e:	8bbea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016652:	000407b7          	lui	a5,0x40
    80016656:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001665a:	450d                	li	a0,3
    8001665c:	8adea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016660:	facea0ef          	jal	80000e0c <test_setup_except_function>
    80016664:	37ab77b7          	lui	a5,0x37ab7
    80016668:	00080737          	lui	a4,0x80
    8001666c:	078a                	slli	a5,a5,0x2
    8001666e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016670:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016674:	0736                	slli	a4,a4,0xd
    80016676:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    8001667a:	08200593          	li	a1,130
    8001667e:	0001d617          	auipc	a2,0x1d
    80016682:	16260613          	addi	a2,a2,354 # 800337e0 <__func__.0+0x58f8>
    80016686:	00018517          	auipc	a0,0x18
    8001668a:	b5a50513          	addi	a0,a0,-1190 # 8002e1e0 <__func__.0+0x2f8>
    8001668e:	59d140ef          	jal	8002b42a <printf>
    80016692:	00042797          	auipc	a5,0x42
    80016696:	97f7c783          	lbu	a5,-1665(a5) # 80058011 <excpt+0x1>
    8001669a:	00018597          	auipc	a1,0x18
    8001669e:	b0e58593          	addi	a1,a1,-1266 # 8002e1a8 <__func__.0+0x2c0>
    800166a2:	c789                	beqz	a5,800166ac <store_page_fault_8+0x92>
    800166a4:	00018597          	auipc	a1,0x18
    800166a8:	b1458593          	addi	a1,a1,-1260 # 8002e1b8 <__func__.0+0x2d0>
    800166ac:	00018517          	auipc	a0,0x18
    800166b0:	b4c50513          	addi	a0,a0,-1204 # 8002e1f8 <__func__.0+0x310>
    800166b4:	577140ef          	jal	8002b42a <printf>
    800166b8:	00042797          	auipc	a5,0x42
    800166bc:	9597c783          	lbu	a5,-1703(a5) # 80058011 <excpt+0x1>
    800166c0:	e7a1                	bnez	a5,80016708 <store_page_fault_8+0xee>
    800166c2:	4529                	li	a0,10
    800166c4:	255130ef          	jal	8002a118 <putchar>
    800166c8:	00042797          	auipc	a5,0x42
    800166cc:	9497c783          	lbu	a5,-1719(a5) # 80058011 <excpt+0x1>
    800166d0:	e795                	bnez	a5,800166fc <store_page_fault_8+0xe2>
    800166d2:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800166d4:	00018597          	auipc	a1,0x18
    800166d8:	ad458593          	addi	a1,a1,-1324 # 8002e1a8 <__func__.0+0x2c0>
    800166dc:	00018517          	auipc	a0,0x18
    800166e0:	b8450513          	addi	a0,a0,-1148 # 8002e260 <__func__.0+0x378>
    800166e4:	547140ef          	jal	8002b42a <printf>
    800166e8:	4511                	li	a0,4
    800166ea:	81fea0ef          	jal	80000f08 <goto_priv>
    800166ee:	936eb0ef          	jal	80001824 <reset_state>
}
    800166f2:	60a2                	ld	ra,8(sp)
    800166f4:	8522                	mv	a0,s0
    800166f6:	6402                	ld	s0,0(sp)
    800166f8:	0141                	addi	sp,sp,16
    800166fa:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800166fc:	4401                	li	s0,0
    TEST_END();
    800166fe:	00018597          	auipc	a1,0x18
    80016702:	aba58593          	addi	a1,a1,-1350 # 8002e1b8 <__func__.0+0x2d0>
    80016706:	bfd9                	j	800166dc <store_page_fault_8+0xc2>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016708:	00018517          	auipc	a0,0x18
    8001670c:	af850513          	addi	a0,a0,-1288 # 8002e200 <__func__.0+0x318>
    80016710:	51b140ef          	jal	8002b42a <printf>
    80016714:	02900513          	li	a0,41
    80016718:	201130ef          	jal	8002a118 <putchar>
    8001671c:	b75d                	j	800166c2 <store_page_fault_8+0xa8>

000000008001671e <amo_page_fault_1>:





bool amo_page_fault_1(){
    8001671e:	1101                	addi	sp,sp,-32

    TEST_START();
    80016720:	00016597          	auipc	a1,0x16
    80016724:	55058593          	addi	a1,a1,1360 # 8002cc70 <__func__.5>
    80016728:	00018517          	auipc	a0,0x18
    8001672c:	aa050513          	addi	a0,a0,-1376 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    80016730:	ec06                	sd	ra,24(sp)
    80016732:	e822                	sd	s0,16(sp)
    80016734:	e426                	sd	s1,8(sp)
    80016736:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016738:	4f3140ef          	jal	8002b42a <printf>
    8001673c:	4529                	li	a0,10
    8001673e:	1db130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016742:	450d                	li	a0,3
    80016744:	fc4ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016748:	e99e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001674c:	a78ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016750:	82cea0ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80016754:	450d                	li	a0,3
    80016756:	fb2ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001675a:	4509                	li	a0,2
    8001675c:	eccea0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016760:	eacea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016764:	deadc7b7          	lui	a5,0xdeadc
    80016768:	40019737          	lui	a4,0x40019
    8001676c:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016770:	070a                	slli	a4,a4,0x2
    80016772:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016776:	08200593          	li	a1,130
    8001677a:	0001d617          	auipc	a2,0x1d
    8001677e:	09e60613          	addi	a2,a2,158 # 80033818 <__func__.0+0x5930>
    80016782:	00018517          	auipc	a0,0x18
    80016786:	a5e50513          	addi	a0,a0,-1442 # 8002e1e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    8001678a:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001678e:	49d140ef          	jal	8002b42a <printf>
    80016792:	00042797          	auipc	a5,0x42
    80016796:	87f7c783          	lbu	a5,-1921(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    8001679a:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001679c:	00042917          	auipc	s2,0x42
    800167a0:	87490913          	addi	s2,s2,-1932 # 80058010 <excpt>
    800167a4:	00018597          	auipc	a1,0x18
    800167a8:	a1458593          	addi	a1,a1,-1516 # 8002e1b8 <__func__.0+0x2d0>
    800167ac:	cf91                	beqz	a5,800167c8 <amo_page_fault_1+0xaa>
    800167ae:	00893703          	ld	a4,8(s2)
    800167b2:	47bd                	li	a5,15
    800167b4:	00018597          	auipc	a1,0x18
    800167b8:	9f458593          	addi	a1,a1,-1548 # 8002e1a8 <__func__.0+0x2c0>
    800167bc:	00f70663          	beq	a4,a5,800167c8 <amo_page_fault_1+0xaa>
    800167c0:	00018597          	auipc	a1,0x18
    800167c4:	9f858593          	addi	a1,a1,-1544 # 8002e1b8 <__func__.0+0x2d0>
    800167c8:	00018517          	auipc	a0,0x18
    800167cc:	a3050513          	addi	a0,a0,-1488 # 8002e1f8 <__func__.0+0x310>
    800167d0:	45b140ef          	jal	8002b42a <printf>
    800167d4:	00042797          	auipc	a5,0x42
    800167d8:	83d7c783          	lbu	a5,-1987(a5) # 80058011 <excpt+0x1>
    800167dc:	c791                	beqz	a5,800167e8 <amo_page_fault_1+0xca>
    800167de:	00893703          	ld	a4,8(s2)
    800167e2:	47bd                	li	a5,15
    800167e4:	00f70c63          	beq	a4,a5,800167fc <amo_page_fault_1+0xde>
    800167e8:	00018517          	auipc	a0,0x18
    800167ec:	a1850513          	addi	a0,a0,-1512 # 8002e200 <__func__.0+0x318>
    800167f0:	43b140ef          	jal	8002b42a <printf>
    800167f4:	02900513          	li	a0,41
    800167f8:	121130ef          	jal	8002a118 <putchar>
    800167fc:	4529                	li	a0,10
    800167fe:	11b130ef          	jal	8002a118 <putchar>
    80016802:	00042797          	auipc	a5,0x42
    80016806:	80f7c783          	lbu	a5,-2033(a5) # 80058011 <excpt+0x1>
    8001680a:	4481                	li	s1,0
    8001680c:	c791                	beqz	a5,80016818 <amo_page_fault_1+0xfa>
    8001680e:	00893483          	ld	s1,8(s2)
    80016812:	14c5                	addi	s1,s1,-15
    80016814:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016818:	df4ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001681c:	001007b7          	lui	a5,0x100
    80016820:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    80016824:	07b2                	slli	a5,a5,0xc
    80016826:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    8001682a:	08200593          	li	a1,130
    8001682e:	0001d617          	auipc	a2,0x1d
    80016832:	02260613          	addi	a2,a2,34 # 80033850 <__func__.0+0x5968>
    80016836:	00018517          	auipc	a0,0x18
    8001683a:	9aa50513          	addi	a0,a0,-1622 # 8002e1e0 <__func__.0+0x2f8>
    8001683e:	3ed140ef          	jal	8002b42a <printf>
    80016842:	00041797          	auipc	a5,0x41
    80016846:	7cf7c783          	lbu	a5,1999(a5) # 80058011 <excpt+0x1>
    8001684a:	00018597          	auipc	a1,0x18
    8001684e:	96e58593          	addi	a1,a1,-1682 # 8002e1b8 <__func__.0+0x2d0>
    80016852:	cf91                	beqz	a5,8001686e <amo_page_fault_1+0x150>
    80016854:	00893703          	ld	a4,8(s2)
    80016858:	47bd                	li	a5,15
    8001685a:	00018597          	auipc	a1,0x18
    8001685e:	94e58593          	addi	a1,a1,-1714 # 8002e1a8 <__func__.0+0x2c0>
    80016862:	00f70663          	beq	a4,a5,8001686e <amo_page_fault_1+0x150>
    80016866:	00018597          	auipc	a1,0x18
    8001686a:	95258593          	addi	a1,a1,-1710 # 8002e1b8 <__func__.0+0x2d0>
    8001686e:	00018517          	auipc	a0,0x18
    80016872:	98a50513          	addi	a0,a0,-1654 # 8002e1f8 <__func__.0+0x310>
    80016876:	3b5140ef          	jal	8002b42a <printf>
    8001687a:	00041797          	auipc	a5,0x41
    8001687e:	7977c783          	lbu	a5,1943(a5) # 80058011 <excpt+0x1>
    80016882:	c791                	beqz	a5,8001688e <amo_page_fault_1+0x170>
    80016884:	00893703          	ld	a4,8(s2)
    80016888:	47bd                	li	a5,15
    8001688a:	00f70c63          	beq	a4,a5,800168a2 <amo_page_fault_1+0x184>
    8001688e:	00018517          	auipc	a0,0x18
    80016892:	97250513          	addi	a0,a0,-1678 # 8002e200 <__func__.0+0x318>
    80016896:	395140ef          	jal	8002b42a <printf>
    8001689a:	02900513          	li	a0,41
    8001689e:	07b130ef          	jal	8002a118 <putchar>
    800168a2:	4529                	li	a0,10
    800168a4:	075130ef          	jal	8002a118 <putchar>
    800168a8:	c499                	beqz	s1,800168b6 <amo_page_fault_1+0x198>
    800168aa:	00041797          	auipc	a5,0x41
    800168ae:	7677c783          	lbu	a5,1895(a5) # 80058011 <excpt+0x1>
    800168b2:	4481                	li	s1,0
    800168b4:	e3cd                	bnez	a5,80016956 <amo_page_fault_1+0x238>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800168b6:	d56ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800168ba:	4785                	li	a5,1
    800168bc:	1782                	slli	a5,a5,0x20
    800168be:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168c2:	08200593          	li	a1,130
    800168c6:	0001d617          	auipc	a2,0x1d
    800168ca:	fc260613          	addi	a2,a2,-62 # 80033888 <__func__.0+0x59a0>
    800168ce:	00018517          	auipc	a0,0x18
    800168d2:	91250513          	addi	a0,a0,-1774 # 8002e1e0 <__func__.0+0x2f8>
    800168d6:	355140ef          	jal	8002b42a <printf>
    800168da:	00041797          	auipc	a5,0x41
    800168de:	7377c783          	lbu	a5,1847(a5) # 80058011 <excpt+0x1>
    800168e2:	00018597          	auipc	a1,0x18
    800168e6:	8d658593          	addi	a1,a1,-1834 # 8002e1b8 <__func__.0+0x2d0>
    800168ea:	e789                	bnez	a5,800168f4 <amo_page_fault_1+0x1d6>
    800168ec:	00018597          	auipc	a1,0x18
    800168f0:	8bc58593          	addi	a1,a1,-1860 # 8002e1a8 <__func__.0+0x2c0>
    800168f4:	00018517          	auipc	a0,0x18
    800168f8:	90450513          	addi	a0,a0,-1788 # 8002e1f8 <__func__.0+0x310>
    800168fc:	32f140ef          	jal	8002b42a <printf>
    80016900:	00041797          	auipc	a5,0x41
    80016904:	7117c783          	lbu	a5,1809(a5) # 80058011 <excpt+0x1>
    80016908:	efa9                	bnez	a5,80016962 <amo_page_fault_1+0x244>
    8001690a:	4529                	li	a0,10
    8001690c:	00d130ef          	jal	8002a118 <putchar>
    80016910:	c491                	beqz	s1,8001691c <amo_page_fault_1+0x1fe>
    80016912:	00041797          	auipc	a5,0x41
    80016916:	6ff7c783          	lbu	a5,1791(a5) # 80058011 <excpt+0x1>
    8001691a:	cb85                	beqz	a5,8001694a <amo_page_fault_1+0x22c>
    8001691c:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    8001691e:	00018597          	auipc	a1,0x18
    80016922:	89a58593          	addi	a1,a1,-1894 # 8002e1b8 <__func__.0+0x2d0>
    80016926:	00018517          	auipc	a0,0x18
    8001692a:	93a50513          	addi	a0,a0,-1734 # 8002e260 <__func__.0+0x378>
    8001692e:	2fd140ef          	jal	8002b42a <printf>
    80016932:	4511                	li	a0,4
    80016934:	dd4ea0ef          	jal	80000f08 <goto_priv>
    80016938:	eedea0ef          	jal	80001824 <reset_state>
}
    8001693c:	60e2                	ld	ra,24(sp)
    8001693e:	8522                	mv	a0,s0
    80016940:	6442                	ld	s0,16(sp)
    80016942:	64a2                	ld	s1,8(sp)
    80016944:	6902                	ld	s2,0(sp)
    80016946:	6105                	addi	sp,sp,32
    80016948:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    8001694a:	4405                	li	s0,1
    TEST_END();
    8001694c:	00018597          	auipc	a1,0x18
    80016950:	85c58593          	addi	a1,a1,-1956 # 8002e1a8 <__func__.0+0x2c0>
    80016954:	bfc9                	j	80016926 <amo_page_fault_1+0x208>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80016956:	00893483          	ld	s1,8(s2)
    8001695a:	14c5                	addi	s1,s1,-15
    8001695c:	0014b493          	seqz	s1,s1
    80016960:	bf99                	j	800168b6 <amo_page_fault_1+0x198>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016962:	00018517          	auipc	a0,0x18
    80016966:	89e50513          	addi	a0,a0,-1890 # 8002e200 <__func__.0+0x318>
    8001696a:	2c1140ef          	jal	8002b42a <printf>
    8001696e:	02900513          	li	a0,41
    80016972:	7a6130ef          	jal	8002a118 <putchar>
    80016976:	bf51                	j	8001690a <amo_page_fault_1+0x1ec>

0000000080016978 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80016978:	1101                	addi	sp,sp,-32

    TEST_START();
    8001697a:	00016597          	auipc	a1,0x16
    8001697e:	30e58593          	addi	a1,a1,782 # 8002cc88 <__func__.4>
    80016982:	00018517          	auipc	a0,0x18
    80016986:	84650513          	addi	a0,a0,-1978 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    8001698a:	ec06                	sd	ra,24(sp)
    8001698c:	e822                	sd	s0,16(sp)
    8001698e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016990:	29b140ef          	jal	8002b42a <printf>
    80016994:	4529                	li	a0,10
    80016996:	782130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001699a:	450d                	li	a0,3
    8001699c:	d6cea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800169a0:	c41e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800169a4:	820ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800169a8:	dd5e90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800169ac:	4511                	li	a0,4
    800169ae:	d5aea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800169b2:	000407b7          	lui	a5,0x40
    800169b6:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800169ba:	450d                	li	a0,3
    800169bc:	d4cea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);    
    800169c0:	4509                	li	a0,2
    800169c2:	c66ea0ef          	jal	80000e28 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    800169c6:	c46ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800169ca:	000807b7          	lui	a5,0x80
    800169ce:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800169d0:	4701                	li	a4,0
    800169d2:	07b6                	slli	a5,a5,0xd
    800169d4:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169d8:	08200593          	li	a1,130
    800169dc:	0001d617          	auipc	a2,0x1d
    800169e0:	ee460613          	addi	a2,a2,-284 # 800338c0 <__func__.0+0x59d8>
    800169e4:	00017517          	auipc	a0,0x17
    800169e8:	7fc50513          	addi	a0,a0,2044 # 8002e1e0 <__func__.0+0x2f8>
    800169ec:	23f140ef          	jal	8002b42a <printf>
    800169f0:	00041797          	auipc	a5,0x41
    800169f4:	6217c783          	lbu	a5,1569(a5) # 80058011 <excpt+0x1>
    800169f8:	00041497          	auipc	s1,0x41
    800169fc:	61848493          	addi	s1,s1,1560 # 80058010 <excpt>
    80016a00:	00017597          	auipc	a1,0x17
    80016a04:	7b858593          	addi	a1,a1,1976 # 8002e1b8 <__func__.0+0x2d0>
    80016a08:	cf89                	beqz	a5,80016a22 <amo_page_fault_2+0xaa>
    80016a0a:	6498                	ld	a4,8(s1)
    80016a0c:	47bd                	li	a5,15
    80016a0e:	00017597          	auipc	a1,0x17
    80016a12:	79a58593          	addi	a1,a1,1946 # 8002e1a8 <__func__.0+0x2c0>
    80016a16:	00f70663          	beq	a4,a5,80016a22 <amo_page_fault_2+0xaa>
    80016a1a:	00017597          	auipc	a1,0x17
    80016a1e:	79e58593          	addi	a1,a1,1950 # 8002e1b8 <__func__.0+0x2d0>
    80016a22:	00017517          	auipc	a0,0x17
    80016a26:	7d650513          	addi	a0,a0,2006 # 8002e1f8 <__func__.0+0x310>
    80016a2a:	201140ef          	jal	8002b42a <printf>
    80016a2e:	00041797          	auipc	a5,0x41
    80016a32:	5e37c783          	lbu	a5,1507(a5) # 80058011 <excpt+0x1>
    80016a36:	c789                	beqz	a5,80016a40 <amo_page_fault_2+0xc8>
    80016a38:	6498                	ld	a4,8(s1)
    80016a3a:	47bd                	li	a5,15
    80016a3c:	00f70c63          	beq	a4,a5,80016a54 <amo_page_fault_2+0xdc>
    80016a40:	00017517          	auipc	a0,0x17
    80016a44:	7c050513          	addi	a0,a0,1984 # 8002e200 <__func__.0+0x318>
    80016a48:	1e3140ef          	jal	8002b42a <printf>
    80016a4c:	02900513          	li	a0,41
    80016a50:	6c8130ef          	jal	8002a118 <putchar>
    80016a54:	4529                	li	a0,10
    80016a56:	6c2130ef          	jal	8002a118 <putchar>
    80016a5a:	00041417          	auipc	s0,0x41
    80016a5e:	5b744403          	lbu	s0,1463(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016a62:	00017597          	auipc	a1,0x17
    80016a66:	75658593          	addi	a1,a1,1878 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016a6a:	cc11                	beqz	s0,80016a86 <amo_page_fault_2+0x10e>
    80016a6c:	6498                	ld	a4,8(s1)
    80016a6e:	47bd                	li	a5,15
    TEST_END();
    80016a70:	00017597          	auipc	a1,0x17
    80016a74:	73858593          	addi	a1,a1,1848 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016a78:	00f70763          	beq	a4,a5,80016a86 <amo_page_fault_2+0x10e>
    80016a7c:	4401                	li	s0,0
    TEST_END();
    80016a7e:	00017597          	auipc	a1,0x17
    80016a82:	73a58593          	addi	a1,a1,1850 # 8002e1b8 <__func__.0+0x2d0>
    80016a86:	00017517          	auipc	a0,0x17
    80016a8a:	7da50513          	addi	a0,a0,2010 # 8002e260 <__func__.0+0x378>
    80016a8e:	19d140ef          	jal	8002b42a <printf>
    80016a92:	4511                	li	a0,4
    80016a94:	c74ea0ef          	jal	80000f08 <goto_priv>
    80016a98:	d8dea0ef          	jal	80001824 <reset_state>
}
    80016a9c:	60e2                	ld	ra,24(sp)
    80016a9e:	8522                	mv	a0,s0
    80016aa0:	6442                	ld	s0,16(sp)
    80016aa2:	64a2                	ld	s1,8(sp)
    80016aa4:	6105                	addi	sp,sp,32
    80016aa6:	8082                	ret

0000000080016aa8 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80016aa8:	1141                	addi	sp,sp,-16

    TEST_START();
    80016aaa:	00016597          	auipc	a1,0x16
    80016aae:	1f658593          	addi	a1,a1,502 # 8002cca0 <__func__.3>
    80016ab2:	00017517          	auipc	a0,0x17
    80016ab6:	71650513          	addi	a0,a0,1814 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80016aba:	e406                	sd	ra,8(sp)
    80016abc:	e022                	sd	s0,0(sp)
    TEST_START();
    80016abe:	16d140ef          	jal	8002b42a <printf>
    80016ac2:	4529                	li	a0,10
    80016ac4:	654130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016ac8:	450d                	li	a0,3
    80016aca:	c3eea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016ace:	b13e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016ad2:	ef3e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016ad6:	ca7e90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016ada:	4511                	li	a0,4
    80016adc:	c2cea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016ae0:	000407b7          	lui	a5,0x40
    80016ae4:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80016ae8:	450d                	li	a0,3
    80016aea:	c1eea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80016aee:	4509                	li	a0,2
    80016af0:	b38ea0ef          	jal	80000e28 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80016af4:	b18ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016af8:	000807b7          	lui	a5,0x80
    80016afc:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016afe:	4701                	li	a4,0
    80016b00:	07b6                	slli	a5,a5,0xd
    80016b02:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b06:	08200593          	li	a1,130
    80016b0a:	0001d617          	auipc	a2,0x1d
    80016b0e:	dfe60613          	addi	a2,a2,-514 # 80033908 <__func__.0+0x5a20>
    80016b12:	00017517          	auipc	a0,0x17
    80016b16:	6ce50513          	addi	a0,a0,1742 # 8002e1e0 <__func__.0+0x2f8>
    80016b1a:	111140ef          	jal	8002b42a <printf>
    80016b1e:	00041797          	auipc	a5,0x41
    80016b22:	4f37c783          	lbu	a5,1267(a5) # 80058011 <excpt+0x1>
    80016b26:	00017597          	auipc	a1,0x17
    80016b2a:	68258593          	addi	a1,a1,1666 # 8002e1a8 <__func__.0+0x2c0>
    80016b2e:	c789                	beqz	a5,80016b38 <amo_page_fault_3+0x90>
    80016b30:	00017597          	auipc	a1,0x17
    80016b34:	68858593          	addi	a1,a1,1672 # 8002e1b8 <__func__.0+0x2d0>
    80016b38:	00017517          	auipc	a0,0x17
    80016b3c:	6c050513          	addi	a0,a0,1728 # 8002e1f8 <__func__.0+0x310>
    80016b40:	0eb140ef          	jal	8002b42a <printf>
    80016b44:	00041797          	auipc	a5,0x41
    80016b48:	4cd7c783          	lbu	a5,1229(a5) # 80058011 <excpt+0x1>
    80016b4c:	e7a1                	bnez	a5,80016b94 <amo_page_fault_3+0xec>
    80016b4e:	4529                	li	a0,10
    80016b50:	5c8130ef          	jal	8002a118 <putchar>
    80016b54:	00041797          	auipc	a5,0x41
    80016b58:	4bd7c783          	lbu	a5,1213(a5) # 80058011 <excpt+0x1>
    80016b5c:	e795                	bnez	a5,80016b88 <amo_page_fault_3+0xe0>
    80016b5e:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016b60:	00017597          	auipc	a1,0x17
    80016b64:	64858593          	addi	a1,a1,1608 # 8002e1a8 <__func__.0+0x2c0>
    80016b68:	00017517          	auipc	a0,0x17
    80016b6c:	6f850513          	addi	a0,a0,1784 # 8002e260 <__func__.0+0x378>
    80016b70:	0bb140ef          	jal	8002b42a <printf>
    80016b74:	4511                	li	a0,4
    80016b76:	b92ea0ef          	jal	80000f08 <goto_priv>
    80016b7a:	cabea0ef          	jal	80001824 <reset_state>
}
    80016b7e:	60a2                	ld	ra,8(sp)
    80016b80:	8522                	mv	a0,s0
    80016b82:	6402                	ld	s0,0(sp)
    80016b84:	0141                	addi	sp,sp,16
    80016b86:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b88:	4401                	li	s0,0
    TEST_END();
    80016b8a:	00017597          	auipc	a1,0x17
    80016b8e:	62e58593          	addi	a1,a1,1582 # 8002e1b8 <__func__.0+0x2d0>
    80016b92:	bfd9                	j	80016b68 <amo_page_fault_3+0xc0>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b94:	00017517          	auipc	a0,0x17
    80016b98:	66c50513          	addi	a0,a0,1644 # 8002e200 <__func__.0+0x318>
    80016b9c:	08f140ef          	jal	8002b42a <printf>
    80016ba0:	02900513          	li	a0,41
    80016ba4:	574130ef          	jal	8002a118 <putchar>
    80016ba8:	b75d                	j	80016b4e <amo_page_fault_3+0xa6>

0000000080016baa <amo_page_fault_4>:

bool amo_page_fault_4(){
    80016baa:	1101                	addi	sp,sp,-32

    TEST_START();
    80016bac:	00016597          	auipc	a1,0x16
    80016bb0:	10c58593          	addi	a1,a1,268 # 8002ccb8 <__func__.2>
    80016bb4:	00017517          	auipc	a0,0x17
    80016bb8:	61450513          	addi	a0,a0,1556 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    80016bbc:	ec06                	sd	ra,24(sp)
    80016bbe:	e822                	sd	s0,16(sp)
    80016bc0:	e426                	sd	s1,8(sp)
    80016bc2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016bc4:	067140ef          	jal	8002b42a <printf>
    80016bc8:	4529                	li	a0,10
    80016bca:	54e130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016bce:	450d                	li	a0,3
    80016bd0:	b38ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016bd4:	a0de90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016bd8:	dede90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016bdc:	ba1e90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016be0:	4509                	li	a0,2
    80016be2:	b26ea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016be6:	a26ea0ef          	jal	80000e0c <test_setup_except_function>
    80016bea:	deadc7b7          	lui	a5,0xdeadc
    80016bee:	40019737          	lui	a4,0x40019
    80016bf2:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016bf6:	070a                	slli	a4,a4,0x2
    80016bf8:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016bfc:	08200593          	li	a1,130
    80016c00:	0001d617          	auipc	a2,0x1d
    80016c04:	d5060613          	addi	a2,a2,-688 # 80033950 <__func__.0+0x5a68>
    80016c08:	00017517          	auipc	a0,0x17
    80016c0c:	5d850513          	addi	a0,a0,1496 # 8002e1e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80016c10:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016c14:	017140ef          	jal	8002b42a <printf>
    80016c18:	00041797          	auipc	a5,0x41
    80016c1c:	3f97c783          	lbu	a5,1017(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016c20:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016c22:	00041917          	auipc	s2,0x41
    80016c26:	3ee90913          	addi	s2,s2,1006 # 80058010 <excpt>
    80016c2a:	00017597          	auipc	a1,0x17
    80016c2e:	58e58593          	addi	a1,a1,1422 # 8002e1b8 <__func__.0+0x2d0>
    80016c32:	cf91                	beqz	a5,80016c4e <amo_page_fault_4+0xa4>
    80016c34:	00893703          	ld	a4,8(s2)
    80016c38:	47bd                	li	a5,15
    80016c3a:	00017597          	auipc	a1,0x17
    80016c3e:	56e58593          	addi	a1,a1,1390 # 8002e1a8 <__func__.0+0x2c0>
    80016c42:	00f70663          	beq	a4,a5,80016c4e <amo_page_fault_4+0xa4>
    80016c46:	00017597          	auipc	a1,0x17
    80016c4a:	57258593          	addi	a1,a1,1394 # 8002e1b8 <__func__.0+0x2d0>
    80016c4e:	00017517          	auipc	a0,0x17
    80016c52:	5aa50513          	addi	a0,a0,1450 # 8002e1f8 <__func__.0+0x310>
    80016c56:	7d4140ef          	jal	8002b42a <printf>
    80016c5a:	00041797          	auipc	a5,0x41
    80016c5e:	3b77c783          	lbu	a5,951(a5) # 80058011 <excpt+0x1>
    80016c62:	c791                	beqz	a5,80016c6e <amo_page_fault_4+0xc4>
    80016c64:	00893703          	ld	a4,8(s2)
    80016c68:	47bd                	li	a5,15
    80016c6a:	00f70c63          	beq	a4,a5,80016c82 <amo_page_fault_4+0xd8>
    80016c6e:	00017517          	auipc	a0,0x17
    80016c72:	59250513          	addi	a0,a0,1426 # 8002e200 <__func__.0+0x318>
    80016c76:	7b4140ef          	jal	8002b42a <printf>
    80016c7a:	02900513          	li	a0,41
    80016c7e:	49a130ef          	jal	8002a118 <putchar>
    80016c82:	4529                	li	a0,10
    80016c84:	494130ef          	jal	8002a118 <putchar>
    80016c88:	00041797          	auipc	a5,0x41
    80016c8c:	3897c783          	lbu	a5,905(a5) # 80058011 <excpt+0x1>
    80016c90:	4481                	li	s1,0
    80016c92:	c791                	beqz	a5,80016c9e <amo_page_fault_4+0xf4>
    80016c94:	00893483          	ld	s1,8(s2)
    80016c98:	14c5                	addi	s1,s1,-15
    80016c9a:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016c9e:	96eea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016ca2:	000807b7          	lui	a5,0x80
    80016ca6:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80016ca8:	07b6                	slli	a5,a5,0xd
    80016caa:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016cae:	08200593          	li	a1,130
    80016cb2:	0001d617          	auipc	a2,0x1d
    80016cb6:	cd660613          	addi	a2,a2,-810 # 80033988 <__func__.0+0x5aa0>
    80016cba:	00017517          	auipc	a0,0x17
    80016cbe:	52650513          	addi	a0,a0,1318 # 8002e1e0 <__func__.0+0x2f8>
    80016cc2:	768140ef          	jal	8002b42a <printf>
    80016cc6:	00041797          	auipc	a5,0x41
    80016cca:	34b7c783          	lbu	a5,843(a5) # 80058011 <excpt+0x1>
    80016cce:	00017597          	auipc	a1,0x17
    80016cd2:	4ea58593          	addi	a1,a1,1258 # 8002e1b8 <__func__.0+0x2d0>
    80016cd6:	cf91                	beqz	a5,80016cf2 <amo_page_fault_4+0x148>
    80016cd8:	00893703          	ld	a4,8(s2)
    80016cdc:	47bd                	li	a5,15
    80016cde:	00017597          	auipc	a1,0x17
    80016ce2:	4ca58593          	addi	a1,a1,1226 # 8002e1a8 <__func__.0+0x2c0>
    80016ce6:	00f70663          	beq	a4,a5,80016cf2 <amo_page_fault_4+0x148>
    80016cea:	00017597          	auipc	a1,0x17
    80016cee:	4ce58593          	addi	a1,a1,1230 # 8002e1b8 <__func__.0+0x2d0>
    80016cf2:	00017517          	auipc	a0,0x17
    80016cf6:	50650513          	addi	a0,a0,1286 # 8002e1f8 <__func__.0+0x310>
    80016cfa:	730140ef          	jal	8002b42a <printf>
    80016cfe:	00041797          	auipc	a5,0x41
    80016d02:	3137c783          	lbu	a5,787(a5) # 80058011 <excpt+0x1>
    80016d06:	c791                	beqz	a5,80016d12 <amo_page_fault_4+0x168>
    80016d08:	00893703          	ld	a4,8(s2)
    80016d0c:	47bd                	li	a5,15
    80016d0e:	00f70c63          	beq	a4,a5,80016d26 <amo_page_fault_4+0x17c>
    80016d12:	00017517          	auipc	a0,0x17
    80016d16:	4ee50513          	addi	a0,a0,1262 # 8002e200 <__func__.0+0x318>
    80016d1a:	710140ef          	jal	8002b42a <printf>
    80016d1e:	02900513          	li	a0,41
    80016d22:	3f6130ef          	jal	8002a118 <putchar>
    80016d26:	4529                	li	a0,10
    80016d28:	3f0130ef          	jal	8002a118 <putchar>
    80016d2c:	c499                	beqz	s1,80016d3a <amo_page_fault_4+0x190>
    80016d2e:	00041797          	auipc	a5,0x41
    80016d32:	2e37c783          	lbu	a5,739(a5) # 80058011 <excpt+0x1>
    80016d36:	4481                	li	s1,0
    80016d38:	e3cd                	bnez	a5,80016dda <amo_page_fault_4+0x230>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016d3a:	8d2ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016d3e:	4785                	li	a5,1
    80016d40:	1782                	slli	a5,a5,0x20
    80016d42:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d46:	08200593          	li	a1,130
    80016d4a:	0001d617          	auipc	a2,0x1d
    80016d4e:	c6e60613          	addi	a2,a2,-914 # 800339b8 <__func__.0+0x5ad0>
    80016d52:	00017517          	auipc	a0,0x17
    80016d56:	48e50513          	addi	a0,a0,1166 # 8002e1e0 <__func__.0+0x2f8>
    80016d5a:	6d0140ef          	jal	8002b42a <printf>
    80016d5e:	00041797          	auipc	a5,0x41
    80016d62:	2b37c783          	lbu	a5,691(a5) # 80058011 <excpt+0x1>
    80016d66:	00017597          	auipc	a1,0x17
    80016d6a:	45258593          	addi	a1,a1,1106 # 8002e1b8 <__func__.0+0x2d0>
    80016d6e:	e789                	bnez	a5,80016d78 <amo_page_fault_4+0x1ce>
    80016d70:	00017597          	auipc	a1,0x17
    80016d74:	43858593          	addi	a1,a1,1080 # 8002e1a8 <__func__.0+0x2c0>
    80016d78:	00017517          	auipc	a0,0x17
    80016d7c:	48050513          	addi	a0,a0,1152 # 8002e1f8 <__func__.0+0x310>
    80016d80:	6aa140ef          	jal	8002b42a <printf>
    80016d84:	00041797          	auipc	a5,0x41
    80016d88:	28d7c783          	lbu	a5,653(a5) # 80058011 <excpt+0x1>
    80016d8c:	efa9                	bnez	a5,80016de6 <amo_page_fault_4+0x23c>
    80016d8e:	4529                	li	a0,10
    80016d90:	388130ef          	jal	8002a118 <putchar>
    80016d94:	c491                	beqz	s1,80016da0 <amo_page_fault_4+0x1f6>
    80016d96:	00041797          	auipc	a5,0x41
    80016d9a:	27b7c783          	lbu	a5,635(a5) # 80058011 <excpt+0x1>
    80016d9e:	cb85                	beqz	a5,80016dce <amo_page_fault_4+0x224>
    80016da0:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016da2:	00017597          	auipc	a1,0x17
    80016da6:	41658593          	addi	a1,a1,1046 # 8002e1b8 <__func__.0+0x2d0>
    80016daa:	00017517          	auipc	a0,0x17
    80016dae:	4b650513          	addi	a0,a0,1206 # 8002e260 <__func__.0+0x378>
    80016db2:	678140ef          	jal	8002b42a <printf>
    80016db6:	4511                	li	a0,4
    80016db8:	950ea0ef          	jal	80000f08 <goto_priv>
    80016dbc:	a69ea0ef          	jal	80001824 <reset_state>
}
    80016dc0:	60e2                	ld	ra,24(sp)
    80016dc2:	8522                	mv	a0,s0
    80016dc4:	6442                	ld	s0,16(sp)
    80016dc6:	64a2                	ld	s1,8(sp)
    80016dc8:	6902                	ld	s2,0(sp)
    80016dca:	6105                	addi	sp,sp,32
    80016dcc:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016dce:	4405                	li	s0,1
    TEST_END();
    80016dd0:	00017597          	auipc	a1,0x17
    80016dd4:	3d858593          	addi	a1,a1,984 # 8002e1a8 <__func__.0+0x2c0>
    80016dd8:	bfc9                	j	80016daa <amo_page_fault_4+0x200>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016dda:	00893483          	ld	s1,8(s2)
    80016dde:	14c5                	addi	s1,s1,-15
    80016de0:	0014b493          	seqz	s1,s1
    80016de4:	bf99                	j	80016d3a <amo_page_fault_4+0x190>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016de6:	00017517          	auipc	a0,0x17
    80016dea:	41a50513          	addi	a0,a0,1050 # 8002e200 <__func__.0+0x318>
    80016dee:	63c140ef          	jal	8002b42a <printf>
    80016df2:	02900513          	li	a0,41
    80016df6:	322130ef          	jal	8002a118 <putchar>
    80016dfa:	bf51                	j	80016d8e <amo_page_fault_4+0x1e4>

0000000080016dfc <amo_page_fault_5>:

bool amo_page_fault_5(){
    80016dfc:	1101                	addi	sp,sp,-32

    TEST_START();
    80016dfe:	00016597          	auipc	a1,0x16
    80016e02:	ed258593          	addi	a1,a1,-302 # 8002ccd0 <__func__.1>
    80016e06:	00017517          	auipc	a0,0x17
    80016e0a:	3c250513          	addi	a0,a0,962 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    80016e0e:	ec06                	sd	ra,24(sp)
    80016e10:	e822                	sd	s0,16(sp)
    80016e12:	e426                	sd	s1,8(sp)
    TEST_START();
    80016e14:	616140ef          	jal	8002b42a <printf>
    80016e18:	4529                	li	a0,10
    80016e1a:	2fe130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016e1e:	450d                	li	a0,3
    80016e20:	8e8ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016e24:	fbce90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016e28:	b9de90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016e2c:	951e90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016e30:	4511                	li	a0,4
    80016e32:	8d6ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016e36:	000407b7          	lui	a5,0x40
    80016e3a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016e3e:	4509                	li	a0,2
    80016e40:	8c8ea0ef          	jal	80000f08 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016e44:	fc9e90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016e48:	000807b7          	lui	a5,0x80
    80016e4c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016e4e:	4701                	li	a4,0
    80016e50:	07b6                	slli	a5,a5,0xd
    80016e52:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e56:	08200593          	li	a1,130
    80016e5a:	0001d617          	auipc	a2,0x1d
    80016e5e:	b9660613          	addi	a2,a2,-1130 # 800339f0 <__func__.0+0x5b08>
    80016e62:	00017517          	auipc	a0,0x17
    80016e66:	37e50513          	addi	a0,a0,894 # 8002e1e0 <__func__.0+0x2f8>
    80016e6a:	5c0140ef          	jal	8002b42a <printf>
    80016e6e:	00041797          	auipc	a5,0x41
    80016e72:	1a37c783          	lbu	a5,419(a5) # 80058011 <excpt+0x1>
    80016e76:	00041497          	auipc	s1,0x41
    80016e7a:	19a48493          	addi	s1,s1,410 # 80058010 <excpt>
    80016e7e:	00017597          	auipc	a1,0x17
    80016e82:	33a58593          	addi	a1,a1,826 # 8002e1b8 <__func__.0+0x2d0>
    80016e86:	cf89                	beqz	a5,80016ea0 <amo_page_fault_5+0xa4>
    80016e88:	6498                	ld	a4,8(s1)
    80016e8a:	47bd                	li	a5,15
    80016e8c:	00017597          	auipc	a1,0x17
    80016e90:	31c58593          	addi	a1,a1,796 # 8002e1a8 <__func__.0+0x2c0>
    80016e94:	00f70663          	beq	a4,a5,80016ea0 <amo_page_fault_5+0xa4>
    80016e98:	00017597          	auipc	a1,0x17
    80016e9c:	32058593          	addi	a1,a1,800 # 8002e1b8 <__func__.0+0x2d0>
    80016ea0:	00017517          	auipc	a0,0x17
    80016ea4:	35850513          	addi	a0,a0,856 # 8002e1f8 <__func__.0+0x310>
    80016ea8:	582140ef          	jal	8002b42a <printf>
    80016eac:	00041797          	auipc	a5,0x41
    80016eb0:	1657c783          	lbu	a5,357(a5) # 80058011 <excpt+0x1>
    80016eb4:	c789                	beqz	a5,80016ebe <amo_page_fault_5+0xc2>
    80016eb6:	6498                	ld	a4,8(s1)
    80016eb8:	47bd                	li	a5,15
    80016eba:	00f70c63          	beq	a4,a5,80016ed2 <amo_page_fault_5+0xd6>
    80016ebe:	00017517          	auipc	a0,0x17
    80016ec2:	34250513          	addi	a0,a0,834 # 8002e200 <__func__.0+0x318>
    80016ec6:	564140ef          	jal	8002b42a <printf>
    80016eca:	02900513          	li	a0,41
    80016ece:	24a130ef          	jal	8002a118 <putchar>
    80016ed2:	4529                	li	a0,10
    80016ed4:	244130ef          	jal	8002a118 <putchar>
    80016ed8:	00041417          	auipc	s0,0x41
    80016edc:	13944403          	lbu	s0,313(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016ee0:	00017597          	auipc	a1,0x17
    80016ee4:	2d858593          	addi	a1,a1,728 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016ee8:	cc11                	beqz	s0,80016f04 <amo_page_fault_5+0x108>
    80016eea:	6498                	ld	a4,8(s1)
    80016eec:	47bd                	li	a5,15
    TEST_END();
    80016eee:	00017597          	auipc	a1,0x17
    80016ef2:	2ba58593          	addi	a1,a1,698 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016ef6:	00f70763          	beq	a4,a5,80016f04 <amo_page_fault_5+0x108>
    80016efa:	4401                	li	s0,0
    TEST_END();
    80016efc:	00017597          	auipc	a1,0x17
    80016f00:	2bc58593          	addi	a1,a1,700 # 8002e1b8 <__func__.0+0x2d0>
    80016f04:	00017517          	auipc	a0,0x17
    80016f08:	35c50513          	addi	a0,a0,860 # 8002e260 <__func__.0+0x378>
    80016f0c:	51e140ef          	jal	8002b42a <printf>
    80016f10:	4511                	li	a0,4
    80016f12:	ff7e90ef          	jal	80000f08 <goto_priv>
    80016f16:	90fea0ef          	jal	80001824 <reset_state>
}
    80016f1a:	60e2                	ld	ra,24(sp)
    80016f1c:	8522                	mv	a0,s0
    80016f1e:	6442                	ld	s0,16(sp)
    80016f20:	64a2                	ld	s1,8(sp)
    80016f22:	6105                	addi	sp,sp,32
    80016f24:	8082                	ret

0000000080016f26 <amo_page_fault_6>:

bool amo_page_fault_6(){
    80016f26:	1141                	addi	sp,sp,-16

    TEST_START();
    80016f28:	00016597          	auipc	a1,0x16
    80016f2c:	dc058593          	addi	a1,a1,-576 # 8002cce8 <__func__.0>
    80016f30:	00017517          	auipc	a0,0x17
    80016f34:	29850513          	addi	a0,a0,664 # 8002e1c8 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    80016f38:	e406                	sd	ra,8(sp)
    80016f3a:	e022                	sd	s0,0(sp)
    TEST_START();
    80016f3c:	4ee140ef          	jal	8002b42a <printf>
    80016f40:	4529                	li	a0,10
    80016f42:	1d6130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80016f46:	450d                	li	a0,3
    80016f48:	fc1e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016f4c:	e94e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016f50:	a75e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016f54:	829e90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016f58:	4511                	li	a0,4
    80016f5a:	fafe90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016f5e:	000407b7          	lui	a5,0x40
    80016f62:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80016f66:	4509                	li	a0,2
    80016f68:	fa1e90ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80016f6c:	ea1e90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016f70:	000807b7          	lui	a5,0x80
    80016f74:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016f76:	4701                	li	a4,0
    80016f78:	07b6                	slli	a5,a5,0xd
    80016f7a:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f7e:	08200593          	li	a1,130
    80016f82:	0001d617          	auipc	a2,0x1d
    80016f86:	abe60613          	addi	a2,a2,-1346 # 80033a40 <__func__.0+0x5b58>
    80016f8a:	00017517          	auipc	a0,0x17
    80016f8e:	25650513          	addi	a0,a0,598 # 8002e1e0 <__func__.0+0x2f8>
    80016f92:	498140ef          	jal	8002b42a <printf>
    80016f96:	00041797          	auipc	a5,0x41
    80016f9a:	07b7c783          	lbu	a5,123(a5) # 80058011 <excpt+0x1>
    80016f9e:	00017597          	auipc	a1,0x17
    80016fa2:	20a58593          	addi	a1,a1,522 # 8002e1a8 <__func__.0+0x2c0>
    80016fa6:	c789                	beqz	a5,80016fb0 <amo_page_fault_6+0x8a>
    80016fa8:	00017597          	auipc	a1,0x17
    80016fac:	21058593          	addi	a1,a1,528 # 8002e1b8 <__func__.0+0x2d0>
    80016fb0:	00017517          	auipc	a0,0x17
    80016fb4:	24850513          	addi	a0,a0,584 # 8002e1f8 <__func__.0+0x310>
    80016fb8:	472140ef          	jal	8002b42a <printf>
    80016fbc:	00041797          	auipc	a5,0x41
    80016fc0:	0557c783          	lbu	a5,85(a5) # 80058011 <excpt+0x1>
    80016fc4:	e7a1                	bnez	a5,8001700c <amo_page_fault_6+0xe6>
    80016fc6:	4529                	li	a0,10
    80016fc8:	150130ef          	jal	8002a118 <putchar>
    80016fcc:	00041797          	auipc	a5,0x41
    80016fd0:	0457c783          	lbu	a5,69(a5) # 80058011 <excpt+0x1>
    80016fd4:	e795                	bnez	a5,80017000 <amo_page_fault_6+0xda>
    80016fd6:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016fd8:	00017597          	auipc	a1,0x17
    80016fdc:	1d058593          	addi	a1,a1,464 # 8002e1a8 <__func__.0+0x2c0>
    80016fe0:	00017517          	auipc	a0,0x17
    80016fe4:	28050513          	addi	a0,a0,640 # 8002e260 <__func__.0+0x378>
    80016fe8:	442140ef          	jal	8002b42a <printf>
    80016fec:	4511                	li	a0,4
    80016fee:	f1be90ef          	jal	80000f08 <goto_priv>
    80016ff2:	833ea0ef          	jal	80001824 <reset_state>
}
    80016ff6:	60a2                	ld	ra,8(sp)
    80016ff8:	8522                	mv	a0,s0
    80016ffa:	6402                	ld	s0,0(sp)
    80016ffc:	0141                	addi	sp,sp,16
    80016ffe:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80017000:	4401                	li	s0,0
    TEST_END();
    80017002:	00017597          	auipc	a1,0x17
    80017006:	1b658593          	addi	a1,a1,438 # 8002e1b8 <__func__.0+0x2d0>
    8001700a:	bfd9                	j	80016fe0 <amo_page_fault_6+0xba>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001700c:	00017517          	auipc	a0,0x17
    80017010:	1f450513          	addi	a0,a0,500 # 8002e200 <__func__.0+0x318>
    80017014:	416140ef          	jal	8002b42a <printf>
    80017018:	02900513          	li	a0,41
    8001701c:	0fc130ef          	jal	8002a118 <putchar>
    80017020:	b75d                	j	80016fc6 <amo_page_fault_6+0xa0>

0000000080017022 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    80017022:	1101                	addi	sp,sp,-32

    TEST_START();
    80017024:	00016597          	auipc	a1,0x16
    80017028:	cdc58593          	addi	a1,a1,-804 # 8002cd00 <__func__.37>
    8001702c:	00017517          	auipc	a0,0x17
    80017030:	19c50513          	addi	a0,a0,412 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    80017034:	ec06                	sd	ra,24(sp)
    80017036:	e822                	sd	s0,16(sp)
    80017038:	e426                	sd	s1,8(sp)
    TEST_START();
    8001703a:	3f0140ef          	jal	8002b42a <printf>
    8001703e:	4529                	li	a0,10
    80017040:	0d8130ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017044:	450d                	li	a0,3
    80017046:	ec3e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001704a:	d96e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001704e:	977e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017052:	f2ae90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80017056:	450d                	li	a0,3
    80017058:	eb1e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001705c:	4509                	li	a0,2
    8001705e:	dcbe90ef          	jal	80000e28 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017062:	dabe90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017066:	001007b7          	lui	a5,0x100
    8001706a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001706e:	07b2                	slli	a5,a5,0xc
    80017070:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017074:	08200593          	li	a1,130
    80017078:	0001d617          	auipc	a2,0x1d
    8001707c:	a1060613          	addi	a2,a2,-1520 # 80033a88 <__func__.0+0x5ba0>
    80017080:	00017517          	auipc	a0,0x17
    80017084:	16050513          	addi	a0,a0,352 # 8002e1e0 <__func__.0+0x2f8>
    80017088:	3a2140ef          	jal	8002b42a <printf>
    8001708c:	00041797          	auipc	a5,0x41
    80017090:	f857c783          	lbu	a5,-123(a5) # 80058011 <excpt+0x1>
    80017094:	00041497          	auipc	s1,0x41
    80017098:	f7c48493          	addi	s1,s1,-132 # 80058010 <excpt>
    8001709c:	00017597          	auipc	a1,0x17
    800170a0:	11c58593          	addi	a1,a1,284 # 8002e1b8 <__func__.0+0x2d0>
    800170a4:	cf89                	beqz	a5,800170be <load_guest_page_fault_1+0x9c>
    800170a6:	6498                	ld	a4,8(s1)
    800170a8:	47d5                	li	a5,21
    800170aa:	00017597          	auipc	a1,0x17
    800170ae:	0fe58593          	addi	a1,a1,254 # 8002e1a8 <__func__.0+0x2c0>
    800170b2:	00f70663          	beq	a4,a5,800170be <load_guest_page_fault_1+0x9c>
    800170b6:	00017597          	auipc	a1,0x17
    800170ba:	10258593          	addi	a1,a1,258 # 8002e1b8 <__func__.0+0x2d0>
    800170be:	00017517          	auipc	a0,0x17
    800170c2:	13a50513          	addi	a0,a0,314 # 8002e1f8 <__func__.0+0x310>
    800170c6:	364140ef          	jal	8002b42a <printf>
    800170ca:	00041797          	auipc	a5,0x41
    800170ce:	f477c783          	lbu	a5,-185(a5) # 80058011 <excpt+0x1>
    800170d2:	c789                	beqz	a5,800170dc <load_guest_page_fault_1+0xba>
    800170d4:	6498                	ld	a4,8(s1)
    800170d6:	47d5                	li	a5,21
    800170d8:	00f70c63          	beq	a4,a5,800170f0 <load_guest_page_fault_1+0xce>
    800170dc:	00017517          	auipc	a0,0x17
    800170e0:	12450513          	addi	a0,a0,292 # 8002e200 <__func__.0+0x318>
    800170e4:	346140ef          	jal	8002b42a <printf>
    800170e8:	02900513          	li	a0,41
    800170ec:	02c130ef          	jal	8002a118 <putchar>
    800170f0:	4529                	li	a0,10
    800170f2:	026130ef          	jal	8002a118 <putchar>
    800170f6:	00041797          	auipc	a5,0x41
    800170fa:	f1b7c783          	lbu	a5,-229(a5) # 80058011 <excpt+0x1>
    800170fe:	4401                	li	s0,0
    80017100:	c789                	beqz	a5,8001710a <load_guest_page_fault_1+0xe8>
    80017102:	6480                	ld	s0,8(s1)
    80017104:	142d                	addi	s0,s0,-21
    80017106:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001710a:	d03e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001710e:	001007b7          	lui	a5,0x100
    80017112:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017116:	07b2                	slli	a5,a5,0xc
    80017118:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001711c:	08200593          	li	a1,130
    80017120:	0001d617          	auipc	a2,0x1d
    80017124:	9b860613          	addi	a2,a2,-1608 # 80033ad8 <__func__.0+0x5bf0>
    80017128:	00017517          	auipc	a0,0x17
    8001712c:	0b850513          	addi	a0,a0,184 # 8002e1e0 <__func__.0+0x2f8>
    80017130:	2fa140ef          	jal	8002b42a <printf>
    80017134:	00041797          	auipc	a5,0x41
    80017138:	edd7c783          	lbu	a5,-291(a5) # 80058011 <excpt+0x1>
    8001713c:	00017597          	auipc	a1,0x17
    80017140:	07c58593          	addi	a1,a1,124 # 8002e1b8 <__func__.0+0x2d0>
    80017144:	cf89                	beqz	a5,8001715e <load_guest_page_fault_1+0x13c>
    80017146:	6498                	ld	a4,8(s1)
    80017148:	47d5                	li	a5,21
    8001714a:	00017597          	auipc	a1,0x17
    8001714e:	05e58593          	addi	a1,a1,94 # 8002e1a8 <__func__.0+0x2c0>
    80017152:	00f70663          	beq	a4,a5,8001715e <load_guest_page_fault_1+0x13c>
    80017156:	00017597          	auipc	a1,0x17
    8001715a:	06258593          	addi	a1,a1,98 # 8002e1b8 <__func__.0+0x2d0>
    8001715e:	00017517          	auipc	a0,0x17
    80017162:	09a50513          	addi	a0,a0,154 # 8002e1f8 <__func__.0+0x310>
    80017166:	2c4140ef          	jal	8002b42a <printf>
    8001716a:	00041797          	auipc	a5,0x41
    8001716e:	ea77c783          	lbu	a5,-345(a5) # 80058011 <excpt+0x1>
    80017172:	c789                	beqz	a5,8001717c <load_guest_page_fault_1+0x15a>
    80017174:	6498                	ld	a4,8(s1)
    80017176:	47d5                	li	a5,21
    80017178:	00f70c63          	beq	a4,a5,80017190 <load_guest_page_fault_1+0x16e>
    8001717c:	00017517          	auipc	a0,0x17
    80017180:	08450513          	addi	a0,a0,132 # 8002e200 <__func__.0+0x318>
    80017184:	2a6140ef          	jal	8002b42a <printf>
    80017188:	02900513          	li	a0,41
    8001718c:	78d120ef          	jal	8002a118 <putchar>
    80017190:	4529                	li	a0,10
    80017192:	787120ef          	jal	8002a118 <putchar>
    80017196:	c015                	beqz	s0,800171ba <load_guest_page_fault_1+0x198>
    80017198:	00041417          	auipc	s0,0x41
    8001719c:	e7944403          	lbu	s0,-391(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800171a0:	00017597          	auipc	a1,0x17
    800171a4:	01858593          	addi	a1,a1,24 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800171a8:	cc11                	beqz	s0,800171c4 <load_guest_page_fault_1+0x1a2>
    800171aa:	6498                	ld	a4,8(s1)
    800171ac:	47d5                	li	a5,21
    TEST_END();
    800171ae:	00017597          	auipc	a1,0x17
    800171b2:	ffa58593          	addi	a1,a1,-6 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800171b6:	00f70763          	beq	a4,a5,800171c4 <load_guest_page_fault_1+0x1a2>
    800171ba:	4401                	li	s0,0
    TEST_END();
    800171bc:	00017597          	auipc	a1,0x17
    800171c0:	ffc58593          	addi	a1,a1,-4 # 8002e1b8 <__func__.0+0x2d0>
    800171c4:	00017517          	auipc	a0,0x17
    800171c8:	09c50513          	addi	a0,a0,156 # 8002e260 <__func__.0+0x378>
    800171cc:	25e140ef          	jal	8002b42a <printf>
    800171d0:	4511                	li	a0,4
    800171d2:	d37e90ef          	jal	80000f08 <goto_priv>
    800171d6:	e4eea0ef          	jal	80001824 <reset_state>
}
    800171da:	60e2                	ld	ra,24(sp)
    800171dc:	8522                	mv	a0,s0
    800171de:	6442                	ld	s0,16(sp)
    800171e0:	64a2                	ld	s1,8(sp)
    800171e2:	6105                	addi	sp,sp,32
    800171e4:	8082                	ret

00000000800171e6 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    800171e6:	1101                	addi	sp,sp,-32

    TEST_START();
    800171e8:	00016597          	auipc	a1,0x16
    800171ec:	b3058593          	addi	a1,a1,-1232 # 8002cd18 <__func__.35>
    800171f0:	00017517          	auipc	a0,0x17
    800171f4:	fd850513          	addi	a0,a0,-40 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    800171f8:	ec06                	sd	ra,24(sp)
    800171fa:	e822                	sd	s0,16(sp)
    800171fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800171fe:	22c140ef          	jal	8002b42a <printf>
    80017202:	4529                	li	a0,10
    80017204:	715120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017208:	450d                	li	a0,3
    8001720a:	cffe90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001720e:	bd2e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017212:	fb2e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017216:	d66e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001721a:	450d                	li	a0,3
    8001721c:	cede90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017220:	4509                	li	a0,2
    80017222:	c07e90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017226:	be7e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001722a:	000807b7          	lui	a5,0x80
    8001722e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017232:	001007b7          	lui	a5,0x100
    80017236:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001723a:	07b2                	slli	a5,a5,0xc
    8001723c:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017240:	08200593          	li	a1,130
    80017244:	0001d617          	auipc	a2,0x1d
    80017248:	8f460613          	addi	a2,a2,-1804 # 80033b38 <__func__.0+0x5c50>
    8001724c:	00017517          	auipc	a0,0x17
    80017250:	f9450513          	addi	a0,a0,-108 # 8002e1e0 <__func__.0+0x2f8>
    80017254:	1d6140ef          	jal	8002b42a <printf>
    80017258:	00041797          	auipc	a5,0x41
    8001725c:	db97c783          	lbu	a5,-583(a5) # 80058011 <excpt+0x1>
    80017260:	00041497          	auipc	s1,0x41
    80017264:	db048493          	addi	s1,s1,-592 # 80058010 <excpt>
    80017268:	00017597          	auipc	a1,0x17
    8001726c:	f5058593          	addi	a1,a1,-176 # 8002e1b8 <__func__.0+0x2d0>
    80017270:	cf89                	beqz	a5,8001728a <load_guest_page_fault_2+0xa4>
    80017272:	6498                	ld	a4,8(s1)
    80017274:	47d5                	li	a5,21
    80017276:	00017597          	auipc	a1,0x17
    8001727a:	f3258593          	addi	a1,a1,-206 # 8002e1a8 <__func__.0+0x2c0>
    8001727e:	00f70663          	beq	a4,a5,8001728a <load_guest_page_fault_2+0xa4>
    80017282:	00017597          	auipc	a1,0x17
    80017286:	f3658593          	addi	a1,a1,-202 # 8002e1b8 <__func__.0+0x2d0>
    8001728a:	00017517          	auipc	a0,0x17
    8001728e:	f6e50513          	addi	a0,a0,-146 # 8002e1f8 <__func__.0+0x310>
    80017292:	198140ef          	jal	8002b42a <printf>
    80017296:	00041797          	auipc	a5,0x41
    8001729a:	d7b7c783          	lbu	a5,-645(a5) # 80058011 <excpt+0x1>
    8001729e:	c789                	beqz	a5,800172a8 <load_guest_page_fault_2+0xc2>
    800172a0:	6498                	ld	a4,8(s1)
    800172a2:	47d5                	li	a5,21
    800172a4:	00f70c63          	beq	a4,a5,800172bc <load_guest_page_fault_2+0xd6>
    800172a8:	00017517          	auipc	a0,0x17
    800172ac:	f5850513          	addi	a0,a0,-168 # 8002e200 <__func__.0+0x318>
    800172b0:	17a140ef          	jal	8002b42a <printf>
    800172b4:	02900513          	li	a0,41
    800172b8:	661120ef          	jal	8002a118 <putchar>
    800172bc:	4529                	li	a0,10
    800172be:	65b120ef          	jal	8002a118 <putchar>
    800172c2:	00041417          	auipc	s0,0x41
    800172c6:	d4f44403          	lbu	s0,-689(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800172ca:	00017597          	auipc	a1,0x17
    800172ce:	eee58593          	addi	a1,a1,-274 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800172d2:	cc11                	beqz	s0,800172ee <load_guest_page_fault_2+0x108>
    800172d4:	6498                	ld	a4,8(s1)
    800172d6:	47d5                	li	a5,21
    TEST_END();
    800172d8:	00017597          	auipc	a1,0x17
    800172dc:	ed058593          	addi	a1,a1,-304 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800172e0:	00f70763          	beq	a4,a5,800172ee <load_guest_page_fault_2+0x108>
    800172e4:	4401                	li	s0,0
    TEST_END();
    800172e6:	00017597          	auipc	a1,0x17
    800172ea:	ed258593          	addi	a1,a1,-302 # 8002e1b8 <__func__.0+0x2d0>
    800172ee:	00017517          	auipc	a0,0x17
    800172f2:	f7250513          	addi	a0,a0,-142 # 8002e260 <__func__.0+0x378>
    800172f6:	134140ef          	jal	8002b42a <printf>
    800172fa:	4511                	li	a0,4
    800172fc:	c0de90ef          	jal	80000f08 <goto_priv>
    80017300:	d24ea0ef          	jal	80001824 <reset_state>
}
    80017304:	60e2                	ld	ra,24(sp)
    80017306:	8522                	mv	a0,s0
    80017308:	6442                	ld	s0,16(sp)
    8001730a:	64a2                	ld	s1,8(sp)
    8001730c:	6105                	addi	sp,sp,32
    8001730e:	8082                	ret

0000000080017310 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80017310:	1101                	addi	sp,sp,-32

    TEST_START();
    80017312:	00016597          	auipc	a1,0x16
    80017316:	a1e58593          	addi	a1,a1,-1506 # 8002cd30 <__func__.34>
    8001731a:	00017517          	auipc	a0,0x17
    8001731e:	eae50513          	addi	a0,a0,-338 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    80017322:	ec06                	sd	ra,24(sp)
    80017324:	e822                	sd	s0,16(sp)
    80017326:	e426                	sd	s1,8(sp)
    TEST_START();
    80017328:	102140ef          	jal	8002b42a <printf>
    8001732c:	4529                	li	a0,10
    8001732e:	5eb120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017332:	450d                	li	a0,3
    80017334:	bd5e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017338:	aa8e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001733c:	e88e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017340:	c3ce90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80017344:	450d                	li	a0,3
    80017346:	bc3e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001734a:	4509                	li	a0,2
    8001734c:	adde90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017350:	abde90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017354:	000807b7          	lui	a5,0x80
    80017358:	1007a073          	csrs	sstatus,a5
    8001735c:	001007b7          	lui	a5,0x100
    80017360:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017364:	07b2                	slli	a5,a5,0xc
    80017366:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001736a:	08200593          	li	a1,130
    8001736e:	0001d617          	auipc	a2,0x1d
    80017372:	82a60613          	addi	a2,a2,-2006 # 80033b98 <__func__.0+0x5cb0>
    80017376:	00017517          	auipc	a0,0x17
    8001737a:	e6a50513          	addi	a0,a0,-406 # 8002e1e0 <__func__.0+0x2f8>
    8001737e:	0ac140ef          	jal	8002b42a <printf>
    80017382:	00041797          	auipc	a5,0x41
    80017386:	c8f7c783          	lbu	a5,-881(a5) # 80058011 <excpt+0x1>
    8001738a:	00041497          	auipc	s1,0x41
    8001738e:	c8648493          	addi	s1,s1,-890 # 80058010 <excpt>
    80017392:	00017597          	auipc	a1,0x17
    80017396:	e2658593          	addi	a1,a1,-474 # 8002e1b8 <__func__.0+0x2d0>
    8001739a:	cf89                	beqz	a5,800173b4 <load_guest_page_fault_3+0xa4>
    8001739c:	6498                	ld	a4,8(s1)
    8001739e:	47d5                	li	a5,21
    800173a0:	00017597          	auipc	a1,0x17
    800173a4:	e0858593          	addi	a1,a1,-504 # 8002e1a8 <__func__.0+0x2c0>
    800173a8:	00f70663          	beq	a4,a5,800173b4 <load_guest_page_fault_3+0xa4>
    800173ac:	00017597          	auipc	a1,0x17
    800173b0:	e0c58593          	addi	a1,a1,-500 # 8002e1b8 <__func__.0+0x2d0>
    800173b4:	00017517          	auipc	a0,0x17
    800173b8:	e4450513          	addi	a0,a0,-444 # 8002e1f8 <__func__.0+0x310>
    800173bc:	06e140ef          	jal	8002b42a <printf>
    800173c0:	00041797          	auipc	a5,0x41
    800173c4:	c517c783          	lbu	a5,-943(a5) # 80058011 <excpt+0x1>
    800173c8:	c789                	beqz	a5,800173d2 <load_guest_page_fault_3+0xc2>
    800173ca:	6498                	ld	a4,8(s1)
    800173cc:	47d5                	li	a5,21
    800173ce:	00f70c63          	beq	a4,a5,800173e6 <load_guest_page_fault_3+0xd6>
    800173d2:	00017517          	auipc	a0,0x17
    800173d6:	e2e50513          	addi	a0,a0,-466 # 8002e200 <__func__.0+0x318>
    800173da:	050140ef          	jal	8002b42a <printf>
    800173de:	02900513          	li	a0,41
    800173e2:	537120ef          	jal	8002a118 <putchar>
    800173e6:	4529                	li	a0,10
    800173e8:	531120ef          	jal	8002a118 <putchar>
    800173ec:	00041417          	auipc	s0,0x41
    800173f0:	c2544403          	lbu	s0,-987(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800173f4:	00017597          	auipc	a1,0x17
    800173f8:	dc458593          	addi	a1,a1,-572 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800173fc:	cc11                	beqz	s0,80017418 <load_guest_page_fault_3+0x108>
    800173fe:	6498                	ld	a4,8(s1)
    80017400:	47d5                	li	a5,21
    TEST_END();
    80017402:	00017597          	auipc	a1,0x17
    80017406:	da658593          	addi	a1,a1,-602 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001740a:	00f70763          	beq	a4,a5,80017418 <load_guest_page_fault_3+0x108>
    8001740e:	4401                	li	s0,0
    TEST_END();
    80017410:	00017597          	auipc	a1,0x17
    80017414:	da858593          	addi	a1,a1,-600 # 8002e1b8 <__func__.0+0x2d0>
    80017418:	00017517          	auipc	a0,0x17
    8001741c:	e4850513          	addi	a0,a0,-440 # 8002e260 <__func__.0+0x378>
    80017420:	00a140ef          	jal	8002b42a <printf>
    80017424:	4511                	li	a0,4
    80017426:	ae3e90ef          	jal	80000f08 <goto_priv>
    8001742a:	bfaea0ef          	jal	80001824 <reset_state>
}
    8001742e:	60e2                	ld	ra,24(sp)
    80017430:	8522                	mv	a0,s0
    80017432:	6442                	ld	s0,16(sp)
    80017434:	64a2                	ld	s1,8(sp)
    80017436:	6105                	addi	sp,sp,32
    80017438:	8082                	ret

000000008001743a <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    8001743a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001743c:	00016597          	auipc	a1,0x16
    80017440:	90c58593          	addi	a1,a1,-1780 # 8002cd48 <__func__.33>
    80017444:	00017517          	auipc	a0,0x17
    80017448:	d8450513          	addi	a0,a0,-636 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    8001744c:	ec06                	sd	ra,24(sp)
    8001744e:	e822                	sd	s0,16(sp)
    80017450:	e426                	sd	s1,8(sp)
    TEST_START();
    80017452:	7d9130ef          	jal	8002b42a <printf>
    80017456:	4529                	li	a0,10
    80017458:	4c1120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001745c:	450d                	li	a0,3
    8001745e:	aabe90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017462:	97ee90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017466:	d5ee90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001746a:	b12e90ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    8001746e:	4511                	li	a0,4
    80017470:	a99e90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017474:	000407b7          	lui	a5,0x40
    80017478:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    8001747c:	450d                	li	a0,3
    8001747e:	a8be90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017482:	4509                	li	a0,2
    80017484:	9a5e90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017488:	985e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001748c:	000807b7          	lui	a5,0x80
    80017490:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017492:	07b6                	slli	a5,a5,0xd
    80017494:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017498:	08200593          	li	a1,130
    8001749c:	0001c617          	auipc	a2,0x1c
    800174a0:	76c60613          	addi	a2,a2,1900 # 80033c08 <__func__.0+0x5d20>
    800174a4:	00017517          	auipc	a0,0x17
    800174a8:	d3c50513          	addi	a0,a0,-708 # 8002e1e0 <__func__.0+0x2f8>
    800174ac:	77f130ef          	jal	8002b42a <printf>
    800174b0:	00041797          	auipc	a5,0x41
    800174b4:	b617c783          	lbu	a5,-1183(a5) # 80058011 <excpt+0x1>
    800174b8:	00041497          	auipc	s1,0x41
    800174bc:	b5848493          	addi	s1,s1,-1192 # 80058010 <excpt>
    800174c0:	00017597          	auipc	a1,0x17
    800174c4:	cf858593          	addi	a1,a1,-776 # 8002e1b8 <__func__.0+0x2d0>
    800174c8:	cf89                	beqz	a5,800174e2 <load_guest_page_fault_4+0xa8>
    800174ca:	6498                	ld	a4,8(s1)
    800174cc:	47b5                	li	a5,13
    800174ce:	00017597          	auipc	a1,0x17
    800174d2:	cda58593          	addi	a1,a1,-806 # 8002e1a8 <__func__.0+0x2c0>
    800174d6:	00f70663          	beq	a4,a5,800174e2 <load_guest_page_fault_4+0xa8>
    800174da:	00017597          	auipc	a1,0x17
    800174de:	cde58593          	addi	a1,a1,-802 # 8002e1b8 <__func__.0+0x2d0>
    800174e2:	00017517          	auipc	a0,0x17
    800174e6:	d1650513          	addi	a0,a0,-746 # 8002e1f8 <__func__.0+0x310>
    800174ea:	741130ef          	jal	8002b42a <printf>
    800174ee:	00041797          	auipc	a5,0x41
    800174f2:	b237c783          	lbu	a5,-1245(a5) # 80058011 <excpt+0x1>
    800174f6:	c789                	beqz	a5,80017500 <load_guest_page_fault_4+0xc6>
    800174f8:	6498                	ld	a4,8(s1)
    800174fa:	47b5                	li	a5,13
    800174fc:	00f70c63          	beq	a4,a5,80017514 <load_guest_page_fault_4+0xda>
    80017500:	00017517          	auipc	a0,0x17
    80017504:	d0050513          	addi	a0,a0,-768 # 8002e200 <__func__.0+0x318>
    80017508:	723130ef          	jal	8002b42a <printf>
    8001750c:	02900513          	li	a0,41
    80017510:	409120ef          	jal	8002a118 <putchar>
    80017514:	4529                	li	a0,10
    80017516:	403120ef          	jal	8002a118 <putchar>
    8001751a:	00041417          	auipc	s0,0x41
    8001751e:	af744403          	lbu	s0,-1289(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017522:	00017597          	auipc	a1,0x17
    80017526:	c9658593          	addi	a1,a1,-874 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001752a:	cc11                	beqz	s0,80017546 <load_guest_page_fault_4+0x10c>
    8001752c:	6498                	ld	a4,8(s1)
    8001752e:	47b5                	li	a5,13
    TEST_END();
    80017530:	00017597          	auipc	a1,0x17
    80017534:	c7858593          	addi	a1,a1,-904 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017538:	00f70763          	beq	a4,a5,80017546 <load_guest_page_fault_4+0x10c>
    8001753c:	4401                	li	s0,0
    TEST_END();
    8001753e:	00017597          	auipc	a1,0x17
    80017542:	c7a58593          	addi	a1,a1,-902 # 8002e1b8 <__func__.0+0x2d0>
    80017546:	00017517          	auipc	a0,0x17
    8001754a:	d1a50513          	addi	a0,a0,-742 # 8002e260 <__func__.0+0x378>
    8001754e:	6dd130ef          	jal	8002b42a <printf>
    80017552:	4511                	li	a0,4
    80017554:	9b5e90ef          	jal	80000f08 <goto_priv>
    80017558:	accea0ef          	jal	80001824 <reset_state>
}
    8001755c:	60e2                	ld	ra,24(sp)
    8001755e:	8522                	mv	a0,s0
    80017560:	6442                	ld	s0,16(sp)
    80017562:	64a2                	ld	s1,8(sp)
    80017564:	6105                	addi	sp,sp,32
    80017566:	8082                	ret

0000000080017568 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80017568:	1141                	addi	sp,sp,-16

    TEST_START();
    8001756a:	00015597          	auipc	a1,0x15
    8001756e:	7f658593          	addi	a1,a1,2038 # 8002cd60 <__func__.32>
    80017572:	00017517          	auipc	a0,0x17
    80017576:	c5650513          	addi	a0,a0,-938 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    8001757a:	e406                	sd	ra,8(sp)
    8001757c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001757e:	6ad130ef          	jal	8002b42a <printf>
    80017582:	4529                	li	a0,10
    80017584:	395120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017588:	450d                	li	a0,3
    8001758a:	97fe90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001758e:	852e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017592:	c32e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017596:	9e6e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001759a:	4511                	li	a0,4
    8001759c:	96de90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800175a0:	000407b7          	lui	a5,0x40
    800175a4:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800175a8:	450d                	li	a0,3
    800175aa:	95fe90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800175ae:	4509                	li	a0,2
    800175b0:	879e90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800175b4:	859e90ef          	jal	80000e0c <test_setup_except_function>
    800175b8:	000807b7          	lui	a5,0x80
    800175bc:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800175be:	07b6                	slli	a5,a5,0xd
    800175c0:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800175c4:	08200593          	li	a1,130
    800175c8:	0001c617          	auipc	a2,0x1c
    800175cc:	e3860613          	addi	a2,a2,-456 # 80033400 <__func__.0+0x5518>
    800175d0:	00017517          	auipc	a0,0x17
    800175d4:	c1050513          	addi	a0,a0,-1008 # 8002e1e0 <__func__.0+0x2f8>
    800175d8:	653130ef          	jal	8002b42a <printf>
    800175dc:	00041797          	auipc	a5,0x41
    800175e0:	a357c783          	lbu	a5,-1483(a5) # 80058011 <excpt+0x1>
    800175e4:	00017597          	auipc	a1,0x17
    800175e8:	bc458593          	addi	a1,a1,-1084 # 8002e1a8 <__func__.0+0x2c0>
    800175ec:	c789                	beqz	a5,800175f6 <load_guest_page_fault_5+0x8e>
    800175ee:	00017597          	auipc	a1,0x17
    800175f2:	bca58593          	addi	a1,a1,-1078 # 8002e1b8 <__func__.0+0x2d0>
    800175f6:	00017517          	auipc	a0,0x17
    800175fa:	c0250513          	addi	a0,a0,-1022 # 8002e1f8 <__func__.0+0x310>
    800175fe:	62d130ef          	jal	8002b42a <printf>
    80017602:	00041797          	auipc	a5,0x41
    80017606:	a0f7c783          	lbu	a5,-1521(a5) # 80058011 <excpt+0x1>
    8001760a:	e7a1                	bnez	a5,80017652 <load_guest_page_fault_5+0xea>
    8001760c:	4529                	li	a0,10
    8001760e:	30b120ef          	jal	8002a118 <putchar>
    80017612:	00041797          	auipc	a5,0x41
    80017616:	9ff7c783          	lbu	a5,-1537(a5) # 80058011 <excpt+0x1>
    8001761a:	e795                	bnez	a5,80017646 <load_guest_page_fault_5+0xde>
    8001761c:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001761e:	00017597          	auipc	a1,0x17
    80017622:	b8a58593          	addi	a1,a1,-1142 # 8002e1a8 <__func__.0+0x2c0>
    80017626:	00017517          	auipc	a0,0x17
    8001762a:	c3a50513          	addi	a0,a0,-966 # 8002e260 <__func__.0+0x378>
    8001762e:	5fd130ef          	jal	8002b42a <printf>
    80017632:	4511                	li	a0,4
    80017634:	8d5e90ef          	jal	80000f08 <goto_priv>
    80017638:	9ecea0ef          	jal	80001824 <reset_state>
}
    8001763c:	60a2                	ld	ra,8(sp)
    8001763e:	8522                	mv	a0,s0
    80017640:	6402                	ld	s0,0(sp)
    80017642:	0141                	addi	sp,sp,16
    80017644:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80017646:	4401                	li	s0,0
    TEST_END();
    80017648:	00017597          	auipc	a1,0x17
    8001764c:	b7058593          	addi	a1,a1,-1168 # 8002e1b8 <__func__.0+0x2d0>
    80017650:	bfd9                	j	80017626 <load_guest_page_fault_5+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80017652:	00017517          	auipc	a0,0x17
    80017656:	bae50513          	addi	a0,a0,-1106 # 8002e200 <__func__.0+0x318>
    8001765a:	5d1130ef          	jal	8002b42a <printf>
    8001765e:	02900513          	li	a0,41
    80017662:	2b7120ef          	jal	8002a118 <putchar>
    80017666:	b75d                	j	8001760c <load_guest_page_fault_5+0xa4>

0000000080017668 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80017668:	1101                	addi	sp,sp,-32

    TEST_START();
    8001766a:	00015597          	auipc	a1,0x15
    8001766e:	70e58593          	addi	a1,a1,1806 # 8002cd78 <__func__.31>
    80017672:	00017517          	auipc	a0,0x17
    80017676:	b5650513          	addi	a0,a0,-1194 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    8001767a:	ec06                	sd	ra,24(sp)
    8001767c:	e822                	sd	s0,16(sp)
    8001767e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017680:	5ab130ef          	jal	8002b42a <printf>
    80017684:	4529                	li	a0,10
    80017686:	293120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001768a:	450d                	li	a0,3
    8001768c:	87de90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017690:	f51e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017694:	b30e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017698:	8e4e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001769c:	4509                	li	a0,2
    8001769e:	86be90ef          	jal	80000f08 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800176a2:	f6ae90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800176a6:	001007b7          	lui	a5,0x100
    800176aa:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800176ae:	07b2                	slli	a5,a5,0xc
    800176b0:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    800176b4:	08200593          	li	a1,130
    800176b8:	0001c617          	auipc	a2,0x1c
    800176bc:	59060613          	addi	a2,a2,1424 # 80033c48 <__func__.0+0x5d60>
    800176c0:	00017517          	auipc	a0,0x17
    800176c4:	b2050513          	addi	a0,a0,-1248 # 8002e1e0 <__func__.0+0x2f8>
    800176c8:	563130ef          	jal	8002b42a <printf>
    800176cc:	00041797          	auipc	a5,0x41
    800176d0:	9457c783          	lbu	a5,-1723(a5) # 80058011 <excpt+0x1>
    800176d4:	00041497          	auipc	s1,0x41
    800176d8:	93c48493          	addi	s1,s1,-1732 # 80058010 <excpt>
    800176dc:	00017597          	auipc	a1,0x17
    800176e0:	adc58593          	addi	a1,a1,-1316 # 8002e1b8 <__func__.0+0x2d0>
    800176e4:	cf89                	beqz	a5,800176fe <load_guest_page_fault_6+0x96>
    800176e6:	6498                	ld	a4,8(s1)
    800176e8:	47d5                	li	a5,21
    800176ea:	00017597          	auipc	a1,0x17
    800176ee:	abe58593          	addi	a1,a1,-1346 # 8002e1a8 <__func__.0+0x2c0>
    800176f2:	00f70663          	beq	a4,a5,800176fe <load_guest_page_fault_6+0x96>
    800176f6:	00017597          	auipc	a1,0x17
    800176fa:	ac258593          	addi	a1,a1,-1342 # 8002e1b8 <__func__.0+0x2d0>
    800176fe:	00017517          	auipc	a0,0x17
    80017702:	afa50513          	addi	a0,a0,-1286 # 8002e1f8 <__func__.0+0x310>
    80017706:	525130ef          	jal	8002b42a <printf>
    8001770a:	00041797          	auipc	a5,0x41
    8001770e:	9077c783          	lbu	a5,-1785(a5) # 80058011 <excpt+0x1>
    80017712:	c789                	beqz	a5,8001771c <load_guest_page_fault_6+0xb4>
    80017714:	6498                	ld	a4,8(s1)
    80017716:	47d5                	li	a5,21
    80017718:	00f70c63          	beq	a4,a5,80017730 <load_guest_page_fault_6+0xc8>
    8001771c:	00017517          	auipc	a0,0x17
    80017720:	ae450513          	addi	a0,a0,-1308 # 8002e200 <__func__.0+0x318>
    80017724:	507130ef          	jal	8002b42a <printf>
    80017728:	02900513          	li	a0,41
    8001772c:	1ed120ef          	jal	8002a118 <putchar>
    80017730:	4529                	li	a0,10
    80017732:	1e7120ef          	jal	8002a118 <putchar>
    80017736:	00041797          	auipc	a5,0x41
    8001773a:	8db7c783          	lbu	a5,-1829(a5) # 80058011 <excpt+0x1>
    8001773e:	4401                	li	s0,0
    80017740:	c789                	beqz	a5,8001774a <load_guest_page_fault_6+0xe2>
    80017742:	6480                	ld	s0,8(s1)
    80017744:	142d                	addi	s0,s0,-21
    80017746:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001774a:	ec2e90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001774e:	001007b7          	lui	a5,0x100
    80017752:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017756:	07b2                	slli	a5,a5,0xc
    80017758:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001775c:	08200593          	li	a1,130
    80017760:	0001c617          	auipc	a2,0x1c
    80017764:	53860613          	addi	a2,a2,1336 # 80033c98 <__func__.0+0x5db0>
    80017768:	00017517          	auipc	a0,0x17
    8001776c:	a7850513          	addi	a0,a0,-1416 # 8002e1e0 <__func__.0+0x2f8>
    80017770:	4bb130ef          	jal	8002b42a <printf>
    80017774:	00041797          	auipc	a5,0x41
    80017778:	89d7c783          	lbu	a5,-1891(a5) # 80058011 <excpt+0x1>
    8001777c:	00017597          	auipc	a1,0x17
    80017780:	a3c58593          	addi	a1,a1,-1476 # 8002e1b8 <__func__.0+0x2d0>
    80017784:	cf89                	beqz	a5,8001779e <load_guest_page_fault_6+0x136>
    80017786:	6498                	ld	a4,8(s1)
    80017788:	47d5                	li	a5,21
    8001778a:	00017597          	auipc	a1,0x17
    8001778e:	a1e58593          	addi	a1,a1,-1506 # 8002e1a8 <__func__.0+0x2c0>
    80017792:	00f70663          	beq	a4,a5,8001779e <load_guest_page_fault_6+0x136>
    80017796:	00017597          	auipc	a1,0x17
    8001779a:	a2258593          	addi	a1,a1,-1502 # 8002e1b8 <__func__.0+0x2d0>
    8001779e:	00017517          	auipc	a0,0x17
    800177a2:	a5a50513          	addi	a0,a0,-1446 # 8002e1f8 <__func__.0+0x310>
    800177a6:	485130ef          	jal	8002b42a <printf>
    800177aa:	00041797          	auipc	a5,0x41
    800177ae:	8677c783          	lbu	a5,-1945(a5) # 80058011 <excpt+0x1>
    800177b2:	c789                	beqz	a5,800177bc <load_guest_page_fault_6+0x154>
    800177b4:	6498                	ld	a4,8(s1)
    800177b6:	47d5                	li	a5,21
    800177b8:	00f70c63          	beq	a4,a5,800177d0 <load_guest_page_fault_6+0x168>
    800177bc:	00017517          	auipc	a0,0x17
    800177c0:	a4450513          	addi	a0,a0,-1468 # 8002e200 <__func__.0+0x318>
    800177c4:	467130ef          	jal	8002b42a <printf>
    800177c8:	02900513          	li	a0,41
    800177cc:	14d120ef          	jal	8002a118 <putchar>
    800177d0:	4529                	li	a0,10
    800177d2:	147120ef          	jal	8002a118 <putchar>
    800177d6:	c015                	beqz	s0,800177fa <load_guest_page_fault_6+0x192>
    800177d8:	00041417          	auipc	s0,0x41
    800177dc:	83944403          	lbu	s0,-1991(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800177e0:	00017597          	auipc	a1,0x17
    800177e4:	9d858593          	addi	a1,a1,-1576 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800177e8:	cc11                	beqz	s0,80017804 <load_guest_page_fault_6+0x19c>
    800177ea:	6498                	ld	a4,8(s1)
    800177ec:	47d5                	li	a5,21
    TEST_END();
    800177ee:	00017597          	auipc	a1,0x17
    800177f2:	9ba58593          	addi	a1,a1,-1606 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800177f6:	00f70763          	beq	a4,a5,80017804 <load_guest_page_fault_6+0x19c>
    800177fa:	4401                	li	s0,0
    TEST_END();
    800177fc:	00017597          	auipc	a1,0x17
    80017800:	9bc58593          	addi	a1,a1,-1604 # 8002e1b8 <__func__.0+0x2d0>
    80017804:	00017517          	auipc	a0,0x17
    80017808:	a5c50513          	addi	a0,a0,-1444 # 8002e260 <__func__.0+0x378>
    8001780c:	41f130ef          	jal	8002b42a <printf>
    80017810:	4511                	li	a0,4
    80017812:	ef6e90ef          	jal	80000f08 <goto_priv>
    80017816:	80eea0ef          	jal	80001824 <reset_state>
}
    8001781a:	60e2                	ld	ra,24(sp)
    8001781c:	8522                	mv	a0,s0
    8001781e:	6442                	ld	s0,16(sp)
    80017820:	64a2                	ld	s1,8(sp)
    80017822:	6105                	addi	sp,sp,32
    80017824:	8082                	ret

0000000080017826 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    80017826:	1101                	addi	sp,sp,-32

    TEST_START();
    80017828:	00015597          	auipc	a1,0x15
    8001782c:	56858593          	addi	a1,a1,1384 # 8002cd90 <__func__.30>
    80017830:	00017517          	auipc	a0,0x17
    80017834:	99850513          	addi	a0,a0,-1640 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    80017838:	ec06                	sd	ra,24(sp)
    8001783a:	e822                	sd	s0,16(sp)
    8001783c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001783e:	3ed130ef          	jal	8002b42a <printf>
    80017842:	4529                	li	a0,10
    80017844:	0d5120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017848:	450d                	li	a0,3
    8001784a:	ebee90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001784e:	d93e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017852:	972e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017856:	f27e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001785a:	4509                	li	a0,2
    8001785c:	eace90ef          	jal	80000f08 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017860:	dace90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017864:	000807b7          	lui	a5,0x80
    80017868:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8001786c:	001007b7          	lui	a5,0x100
    80017870:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017874:	07b2                	slli	a5,a5,0xc
    80017876:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001787a:	08200593          	li	a1,130
    8001787e:	0001c617          	auipc	a2,0x1c
    80017882:	47260613          	addi	a2,a2,1138 # 80033cf0 <__func__.0+0x5e08>
    80017886:	00017517          	auipc	a0,0x17
    8001788a:	95a50513          	addi	a0,a0,-1702 # 8002e1e0 <__func__.0+0x2f8>
    8001788e:	39d130ef          	jal	8002b42a <printf>
    80017892:	00040797          	auipc	a5,0x40
    80017896:	77f7c783          	lbu	a5,1919(a5) # 80058011 <excpt+0x1>
    8001789a:	00040497          	auipc	s1,0x40
    8001789e:	77648493          	addi	s1,s1,1910 # 80058010 <excpt>
    800178a2:	00017597          	auipc	a1,0x17
    800178a6:	91658593          	addi	a1,a1,-1770 # 8002e1b8 <__func__.0+0x2d0>
    800178aa:	cf89                	beqz	a5,800178c4 <load_guest_page_fault_7+0x9e>
    800178ac:	6498                	ld	a4,8(s1)
    800178ae:	47d5                	li	a5,21
    800178b0:	00017597          	auipc	a1,0x17
    800178b4:	8f858593          	addi	a1,a1,-1800 # 8002e1a8 <__func__.0+0x2c0>
    800178b8:	00f70663          	beq	a4,a5,800178c4 <load_guest_page_fault_7+0x9e>
    800178bc:	00017597          	auipc	a1,0x17
    800178c0:	8fc58593          	addi	a1,a1,-1796 # 8002e1b8 <__func__.0+0x2d0>
    800178c4:	00017517          	auipc	a0,0x17
    800178c8:	93450513          	addi	a0,a0,-1740 # 8002e1f8 <__func__.0+0x310>
    800178cc:	35f130ef          	jal	8002b42a <printf>
    800178d0:	00040797          	auipc	a5,0x40
    800178d4:	7417c783          	lbu	a5,1857(a5) # 80058011 <excpt+0x1>
    800178d8:	c789                	beqz	a5,800178e2 <load_guest_page_fault_7+0xbc>
    800178da:	6498                	ld	a4,8(s1)
    800178dc:	47d5                	li	a5,21
    800178de:	00f70c63          	beq	a4,a5,800178f6 <load_guest_page_fault_7+0xd0>
    800178e2:	00017517          	auipc	a0,0x17
    800178e6:	91e50513          	addi	a0,a0,-1762 # 8002e200 <__func__.0+0x318>
    800178ea:	341130ef          	jal	8002b42a <printf>
    800178ee:	02900513          	li	a0,41
    800178f2:	027120ef          	jal	8002a118 <putchar>
    800178f6:	4529                	li	a0,10
    800178f8:	021120ef          	jal	8002a118 <putchar>
    800178fc:	00040417          	auipc	s0,0x40
    80017900:	71544403          	lbu	s0,1813(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017904:	00017597          	auipc	a1,0x17
    80017908:	8b458593          	addi	a1,a1,-1868 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001790c:	cc11                	beqz	s0,80017928 <load_guest_page_fault_7+0x102>
    8001790e:	6498                	ld	a4,8(s1)
    80017910:	47d5                	li	a5,21
    TEST_END();
    80017912:	00017597          	auipc	a1,0x17
    80017916:	89658593          	addi	a1,a1,-1898 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001791a:	00f70763          	beq	a4,a5,80017928 <load_guest_page_fault_7+0x102>
    8001791e:	4401                	li	s0,0
    TEST_END();
    80017920:	00017597          	auipc	a1,0x17
    80017924:	89858593          	addi	a1,a1,-1896 # 8002e1b8 <__func__.0+0x2d0>
    80017928:	00017517          	auipc	a0,0x17
    8001792c:	93850513          	addi	a0,a0,-1736 # 8002e260 <__func__.0+0x378>
    80017930:	2fb130ef          	jal	8002b42a <printf>
    80017934:	4511                	li	a0,4
    80017936:	dd2e90ef          	jal	80000f08 <goto_priv>
    8001793a:	eebe90ef          	jal	80001824 <reset_state>
}
    8001793e:	60e2                	ld	ra,24(sp)
    80017940:	8522                	mv	a0,s0
    80017942:	6442                	ld	s0,16(sp)
    80017944:	64a2                	ld	s1,8(sp)
    80017946:	6105                	addi	sp,sp,32
    80017948:	8082                	ret

000000008001794a <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    8001794a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001794c:	00015597          	auipc	a1,0x15
    80017950:	45c58593          	addi	a1,a1,1116 # 8002cda8 <__func__.29>
    80017954:	00017517          	auipc	a0,0x17
    80017958:	87450513          	addi	a0,a0,-1932 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    8001795c:	ec06                	sd	ra,24(sp)
    8001795e:	e822                	sd	s0,16(sp)
    80017960:	e426                	sd	s1,8(sp)
    TEST_START();
    80017962:	2c9130ef          	jal	8002b42a <printf>
    80017966:	4529                	li	a0,10
    80017968:	7b0120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001796c:	450d                	li	a0,3
    8001796e:	d9ae90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017972:	c6fe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017976:	84ee90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001797a:	e03e80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001797e:	4509                	li	a0,2
    80017980:	d88e90ef          	jal	80000f08 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017984:	c88e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017988:	000807b7          	lui	a5,0x80
    8001798c:	1007a073          	csrs	sstatus,a5
    80017990:	001007b7          	lui	a5,0x100
    80017994:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017998:	07b2                	slli	a5,a5,0xc
    8001799a:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001799e:	08200593          	li	a1,130
    800179a2:	0001c617          	auipc	a2,0x1c
    800179a6:	3ae60613          	addi	a2,a2,942 # 80033d50 <__func__.0+0x5e68>
    800179aa:	00017517          	auipc	a0,0x17
    800179ae:	83650513          	addi	a0,a0,-1994 # 8002e1e0 <__func__.0+0x2f8>
    800179b2:	279130ef          	jal	8002b42a <printf>
    800179b6:	00040797          	auipc	a5,0x40
    800179ba:	65b7c783          	lbu	a5,1627(a5) # 80058011 <excpt+0x1>
    800179be:	00040497          	auipc	s1,0x40
    800179c2:	65248493          	addi	s1,s1,1618 # 80058010 <excpt>
    800179c6:	00016597          	auipc	a1,0x16
    800179ca:	7f258593          	addi	a1,a1,2034 # 8002e1b8 <__func__.0+0x2d0>
    800179ce:	cf89                	beqz	a5,800179e8 <load_guest_page_fault_8+0x9e>
    800179d0:	6498                	ld	a4,8(s1)
    800179d2:	47d5                	li	a5,21
    800179d4:	00016597          	auipc	a1,0x16
    800179d8:	7d458593          	addi	a1,a1,2004 # 8002e1a8 <__func__.0+0x2c0>
    800179dc:	00f70663          	beq	a4,a5,800179e8 <load_guest_page_fault_8+0x9e>
    800179e0:	00016597          	auipc	a1,0x16
    800179e4:	7d858593          	addi	a1,a1,2008 # 8002e1b8 <__func__.0+0x2d0>
    800179e8:	00017517          	auipc	a0,0x17
    800179ec:	81050513          	addi	a0,a0,-2032 # 8002e1f8 <__func__.0+0x310>
    800179f0:	23b130ef          	jal	8002b42a <printf>
    800179f4:	00040797          	auipc	a5,0x40
    800179f8:	61d7c783          	lbu	a5,1565(a5) # 80058011 <excpt+0x1>
    800179fc:	c789                	beqz	a5,80017a06 <load_guest_page_fault_8+0xbc>
    800179fe:	6498                	ld	a4,8(s1)
    80017a00:	47d5                	li	a5,21
    80017a02:	00f70c63          	beq	a4,a5,80017a1a <load_guest_page_fault_8+0xd0>
    80017a06:	00016517          	auipc	a0,0x16
    80017a0a:	7fa50513          	addi	a0,a0,2042 # 8002e200 <__func__.0+0x318>
    80017a0e:	21d130ef          	jal	8002b42a <printf>
    80017a12:	02900513          	li	a0,41
    80017a16:	702120ef          	jal	8002a118 <putchar>
    80017a1a:	4529                	li	a0,10
    80017a1c:	6fc120ef          	jal	8002a118 <putchar>
    80017a20:	00040417          	auipc	s0,0x40
    80017a24:	5f144403          	lbu	s0,1521(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017a28:	00016597          	auipc	a1,0x16
    80017a2c:	79058593          	addi	a1,a1,1936 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017a30:	cc11                	beqz	s0,80017a4c <load_guest_page_fault_8+0x102>
    80017a32:	6498                	ld	a4,8(s1)
    80017a34:	47d5                	li	a5,21
    TEST_END();
    80017a36:	00016597          	auipc	a1,0x16
    80017a3a:	77258593          	addi	a1,a1,1906 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017a3e:	00f70763          	beq	a4,a5,80017a4c <load_guest_page_fault_8+0x102>
    80017a42:	4401                	li	s0,0
    TEST_END();
    80017a44:	00016597          	auipc	a1,0x16
    80017a48:	77458593          	addi	a1,a1,1908 # 8002e1b8 <__func__.0+0x2d0>
    80017a4c:	00017517          	auipc	a0,0x17
    80017a50:	81450513          	addi	a0,a0,-2028 # 8002e260 <__func__.0+0x378>
    80017a54:	1d7130ef          	jal	8002b42a <printf>
    80017a58:	4511                	li	a0,4
    80017a5a:	caee90ef          	jal	80000f08 <goto_priv>
    80017a5e:	dc7e90ef          	jal	80001824 <reset_state>
}
    80017a62:	60e2                	ld	ra,24(sp)
    80017a64:	8522                	mv	a0,s0
    80017a66:	6442                	ld	s0,16(sp)
    80017a68:	64a2                	ld	s1,8(sp)
    80017a6a:	6105                	addi	sp,sp,32
    80017a6c:	8082                	ret

0000000080017a6e <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80017a6e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017a70:	00015597          	auipc	a1,0x15
    80017a74:	35058593          	addi	a1,a1,848 # 8002cdc0 <__func__.28>
    80017a78:	00016517          	auipc	a0,0x16
    80017a7c:	75050513          	addi	a0,a0,1872 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    80017a80:	ec06                	sd	ra,24(sp)
    80017a82:	e822                	sd	s0,16(sp)
    80017a84:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a86:	1a5130ef          	jal	8002b42a <printf>
    80017a8a:	4529                	li	a0,10
    80017a8c:	68c120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017a90:	450d                	li	a0,3
    80017a92:	c76e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017a96:	b4be80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017a9a:	f2be80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017a9e:	cdfe80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017aa2:	4511                	li	a0,4
    80017aa4:	c64e90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017aa8:	000407b7          	lui	a5,0x40
    80017aac:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80017ab0:	4509                	li	a0,2
    80017ab2:	c56e90ef          	jal	80000f08 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017ab6:	b56e90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017aba:	000807b7          	lui	a5,0x80
    80017abe:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017ac0:	07b6                	slli	a5,a5,0xd
    80017ac2:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017ac6:	08200593          	li	a1,130
    80017aca:	0001c617          	auipc	a2,0x1c
    80017ace:	2f660613          	addi	a2,a2,758 # 80033dc0 <__func__.0+0x5ed8>
    80017ad2:	00016517          	auipc	a0,0x16
    80017ad6:	70e50513          	addi	a0,a0,1806 # 8002e1e0 <__func__.0+0x2f8>
    80017ada:	151130ef          	jal	8002b42a <printf>
    80017ade:	00040797          	auipc	a5,0x40
    80017ae2:	5337c783          	lbu	a5,1331(a5) # 80058011 <excpt+0x1>
    80017ae6:	00040497          	auipc	s1,0x40
    80017aea:	52a48493          	addi	s1,s1,1322 # 80058010 <excpt>
    80017aee:	00016597          	auipc	a1,0x16
    80017af2:	6ca58593          	addi	a1,a1,1738 # 8002e1b8 <__func__.0+0x2d0>
    80017af6:	cf89                	beqz	a5,80017b10 <load_guest_page_fault_9+0xa2>
    80017af8:	6498                	ld	a4,8(s1)
    80017afa:	47b5                	li	a5,13
    80017afc:	00016597          	auipc	a1,0x16
    80017b00:	6ac58593          	addi	a1,a1,1708 # 8002e1a8 <__func__.0+0x2c0>
    80017b04:	00f70663          	beq	a4,a5,80017b10 <load_guest_page_fault_9+0xa2>
    80017b08:	00016597          	auipc	a1,0x16
    80017b0c:	6b058593          	addi	a1,a1,1712 # 8002e1b8 <__func__.0+0x2d0>
    80017b10:	00016517          	auipc	a0,0x16
    80017b14:	6e850513          	addi	a0,a0,1768 # 8002e1f8 <__func__.0+0x310>
    80017b18:	113130ef          	jal	8002b42a <printf>
    80017b1c:	00040797          	auipc	a5,0x40
    80017b20:	4f57c783          	lbu	a5,1269(a5) # 80058011 <excpt+0x1>
    80017b24:	c789                	beqz	a5,80017b2e <load_guest_page_fault_9+0xc0>
    80017b26:	6498                	ld	a4,8(s1)
    80017b28:	47b5                	li	a5,13
    80017b2a:	00f70c63          	beq	a4,a5,80017b42 <load_guest_page_fault_9+0xd4>
    80017b2e:	00016517          	auipc	a0,0x16
    80017b32:	6d250513          	addi	a0,a0,1746 # 8002e200 <__func__.0+0x318>
    80017b36:	0f5130ef          	jal	8002b42a <printf>
    80017b3a:	02900513          	li	a0,41
    80017b3e:	5da120ef          	jal	8002a118 <putchar>
    80017b42:	4529                	li	a0,10
    80017b44:	5d4120ef          	jal	8002a118 <putchar>
    80017b48:	00040417          	auipc	s0,0x40
    80017b4c:	4c944403          	lbu	s0,1225(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017b50:	00016597          	auipc	a1,0x16
    80017b54:	66858593          	addi	a1,a1,1640 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017b58:	cc11                	beqz	s0,80017b74 <load_guest_page_fault_9+0x106>
    80017b5a:	6498                	ld	a4,8(s1)
    80017b5c:	47b5                	li	a5,13
    TEST_END();
    80017b5e:	00016597          	auipc	a1,0x16
    80017b62:	64a58593          	addi	a1,a1,1610 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017b66:	00f70763          	beq	a4,a5,80017b74 <load_guest_page_fault_9+0x106>
    80017b6a:	4401                	li	s0,0
    TEST_END();
    80017b6c:	00016597          	auipc	a1,0x16
    80017b70:	64c58593          	addi	a1,a1,1612 # 8002e1b8 <__func__.0+0x2d0>
    80017b74:	00016517          	auipc	a0,0x16
    80017b78:	6ec50513          	addi	a0,a0,1772 # 8002e260 <__func__.0+0x378>
    80017b7c:	0af130ef          	jal	8002b42a <printf>
    80017b80:	4511                	li	a0,4
    80017b82:	b86e90ef          	jal	80000f08 <goto_priv>
    80017b86:	c9fe90ef          	jal	80001824 <reset_state>
}
    80017b8a:	60e2                	ld	ra,24(sp)
    80017b8c:	8522                	mv	a0,s0
    80017b8e:	6442                	ld	s0,16(sp)
    80017b90:	64a2                	ld	s1,8(sp)
    80017b92:	6105                	addi	sp,sp,32
    80017b94:	8082                	ret

0000000080017b96 <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80017b96:	1141                	addi	sp,sp,-16

    TEST_START();
    80017b98:	00015597          	auipc	a1,0x15
    80017b9c:	24058593          	addi	a1,a1,576 # 8002cdd8 <__func__.27>
    80017ba0:	00016517          	auipc	a0,0x16
    80017ba4:	62850513          	addi	a0,a0,1576 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80017ba8:	e406                	sd	ra,8(sp)
    80017baa:	e022                	sd	s0,0(sp)
    TEST_START();
    80017bac:	07f130ef          	jal	8002b42a <printf>
    80017bb0:	4529                	li	a0,10
    80017bb2:	566120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017bb6:	450d                	li	a0,3
    80017bb8:	b50e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017bbc:	a25e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017bc0:	e05e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017bc4:	bb9e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017bc8:	4511                	li	a0,4
    80017bca:	b3ee90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017bce:	000407b7          	lui	a5,0x40
    80017bd2:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017bd6:	4509                	li	a0,2
    80017bd8:	b30e90ef          	jal	80000f08 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017bdc:	a30e90ef          	jal	80000e0c <test_setup_except_function>
    80017be0:	000807b7          	lui	a5,0x80
    80017be4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017be6:	07b6                	slli	a5,a5,0xd
    80017be8:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bec:	08200593          	li	a1,130
    80017bf0:	0001c617          	auipc	a2,0x1c
    80017bf4:	20860613          	addi	a2,a2,520 # 80033df8 <__func__.0+0x5f10>
    80017bf8:	00016517          	auipc	a0,0x16
    80017bfc:	5e850513          	addi	a0,a0,1512 # 8002e1e0 <__func__.0+0x2f8>
    80017c00:	02b130ef          	jal	8002b42a <printf>
    80017c04:	00040797          	auipc	a5,0x40
    80017c08:	40d7c783          	lbu	a5,1037(a5) # 80058011 <excpt+0x1>
    80017c0c:	00016597          	auipc	a1,0x16
    80017c10:	59c58593          	addi	a1,a1,1436 # 8002e1a8 <__func__.0+0x2c0>
    80017c14:	c789                	beqz	a5,80017c1e <load_guest_page_fault_10+0x88>
    80017c16:	00016597          	auipc	a1,0x16
    80017c1a:	5a258593          	addi	a1,a1,1442 # 8002e1b8 <__func__.0+0x2d0>
    80017c1e:	00016517          	auipc	a0,0x16
    80017c22:	5da50513          	addi	a0,a0,1498 # 8002e1f8 <__func__.0+0x310>
    80017c26:	005130ef          	jal	8002b42a <printf>
    80017c2a:	00040797          	auipc	a5,0x40
    80017c2e:	3e77c783          	lbu	a5,999(a5) # 80058011 <excpt+0x1>
    80017c32:	e7a1                	bnez	a5,80017c7a <load_guest_page_fault_10+0xe4>
    80017c34:	4529                	li	a0,10
    80017c36:	4e2120ef          	jal	8002a118 <putchar>
    80017c3a:	00040797          	auipc	a5,0x40
    80017c3e:	3d77c783          	lbu	a5,983(a5) # 80058011 <excpt+0x1>
    80017c42:	e795                	bnez	a5,80017c6e <load_guest_page_fault_10+0xd8>
    80017c44:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017c46:	00016597          	auipc	a1,0x16
    80017c4a:	56258593          	addi	a1,a1,1378 # 8002e1a8 <__func__.0+0x2c0>
    80017c4e:	00016517          	auipc	a0,0x16
    80017c52:	61250513          	addi	a0,a0,1554 # 8002e260 <__func__.0+0x378>
    80017c56:	7d4130ef          	jal	8002b42a <printf>
    80017c5a:	4511                	li	a0,4
    80017c5c:	aace90ef          	jal	80000f08 <goto_priv>
    80017c60:	bc5e90ef          	jal	80001824 <reset_state>
}
    80017c64:	60a2                	ld	ra,8(sp)
    80017c66:	8522                	mv	a0,s0
    80017c68:	6402                	ld	s0,0(sp)
    80017c6a:	0141                	addi	sp,sp,16
    80017c6c:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017c6e:	4401                	li	s0,0
    TEST_END();
    80017c70:	00016597          	auipc	a1,0x16
    80017c74:	54858593          	addi	a1,a1,1352 # 8002e1b8 <__func__.0+0x2d0>
    80017c78:	bfd9                	j	80017c4e <load_guest_page_fault_10+0xb8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017c7a:	00016517          	auipc	a0,0x16
    80017c7e:	58650513          	addi	a0,a0,1414 # 8002e200 <__func__.0+0x318>
    80017c82:	7a8130ef          	jal	8002b42a <printf>
    80017c86:	02900513          	li	a0,41
    80017c8a:	48e120ef          	jal	8002a118 <putchar>
    80017c8e:	b75d                	j	80017c34 <load_guest_page_fault_10+0x9e>

0000000080017c90 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80017c90:	1101                	addi	sp,sp,-32

    TEST_START();
    80017c92:	00015597          	auipc	a1,0x15
    80017c96:	16658593          	addi	a1,a1,358 # 8002cdf8 <__func__.26>
    80017c9a:	00016517          	auipc	a0,0x16
    80017c9e:	52e50513          	addi	a0,a0,1326 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80017ca2:	ec06                	sd	ra,24(sp)
    80017ca4:	e822                	sd	s0,16(sp)
    80017ca6:	e426                	sd	s1,8(sp)
    TEST_START();
    80017ca8:	782130ef          	jal	8002b42a <printf>
    80017cac:	4529                	li	a0,10
    80017cae:	46a120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017cb2:	450d                	li	a0,3
    80017cb4:	a54e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017cb8:	929e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017cbc:	d09e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017cc0:	abde80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017cc4:	4511                	li	a0,4
    80017cc6:	a42e90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017cca:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017cce:	450d                	li	a0,3
    80017cd0:	a38e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017cd4:	4509                	li	a0,2
    80017cd6:	952e90ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017cda:	932e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017cde:	400197b7          	lui	a5,0x40019
    80017ce2:	078a                	slli	a5,a5,0x2
    80017ce4:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017ce8:	08200593          	li	a1,130
    80017cec:	0001c617          	auipc	a2,0x1c
    80017cf0:	d9c60613          	addi	a2,a2,-612 # 80033a88 <__func__.0+0x5ba0>
    80017cf4:	00016517          	auipc	a0,0x16
    80017cf8:	4ec50513          	addi	a0,a0,1260 # 8002e1e0 <__func__.0+0x2f8>
    80017cfc:	72e130ef          	jal	8002b42a <printf>
    80017d00:	00040797          	auipc	a5,0x40
    80017d04:	3117c783          	lbu	a5,785(a5) # 80058011 <excpt+0x1>
    80017d08:	00040497          	auipc	s1,0x40
    80017d0c:	30848493          	addi	s1,s1,776 # 80058010 <excpt>
    80017d10:	00016597          	auipc	a1,0x16
    80017d14:	4a858593          	addi	a1,a1,1192 # 8002e1b8 <__func__.0+0x2d0>
    80017d18:	cf89                	beqz	a5,80017d32 <load_guest_page_fault_11+0xa2>
    80017d1a:	6498                	ld	a4,8(s1)
    80017d1c:	47d5                	li	a5,21
    80017d1e:	00016597          	auipc	a1,0x16
    80017d22:	48a58593          	addi	a1,a1,1162 # 8002e1a8 <__func__.0+0x2c0>
    80017d26:	00f70663          	beq	a4,a5,80017d32 <load_guest_page_fault_11+0xa2>
    80017d2a:	00016597          	auipc	a1,0x16
    80017d2e:	48e58593          	addi	a1,a1,1166 # 8002e1b8 <__func__.0+0x2d0>
    80017d32:	00016517          	auipc	a0,0x16
    80017d36:	4c650513          	addi	a0,a0,1222 # 8002e1f8 <__func__.0+0x310>
    80017d3a:	6f0130ef          	jal	8002b42a <printf>
    80017d3e:	00040797          	auipc	a5,0x40
    80017d42:	2d37c783          	lbu	a5,723(a5) # 80058011 <excpt+0x1>
    80017d46:	c789                	beqz	a5,80017d50 <load_guest_page_fault_11+0xc0>
    80017d48:	6498                	ld	a4,8(s1)
    80017d4a:	47d5                	li	a5,21
    80017d4c:	00f70c63          	beq	a4,a5,80017d64 <load_guest_page_fault_11+0xd4>
    80017d50:	00016517          	auipc	a0,0x16
    80017d54:	4b050513          	addi	a0,a0,1200 # 8002e200 <__func__.0+0x318>
    80017d58:	6d2130ef          	jal	8002b42a <printf>
    80017d5c:	02900513          	li	a0,41
    80017d60:	3b8120ef          	jal	8002a118 <putchar>
    80017d64:	4529                	li	a0,10
    80017d66:	3b2120ef          	jal	8002a118 <putchar>
    80017d6a:	00040417          	auipc	s0,0x40
    80017d6e:	2a744403          	lbu	s0,679(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80017d72:	00016597          	auipc	a1,0x16
    80017d76:	44658593          	addi	a1,a1,1094 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d7a:	cc11                	beqz	s0,80017d96 <load_guest_page_fault_11+0x106>
    80017d7c:	6498                	ld	a4,8(s1)
    80017d7e:	47d5                	li	a5,21
    TEST_END();
    80017d80:	00016597          	auipc	a1,0x16
    80017d84:	42858593          	addi	a1,a1,1064 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d88:	00f70763          	beq	a4,a5,80017d96 <load_guest_page_fault_11+0x106>
    80017d8c:	4401                	li	s0,0
    TEST_END();
    80017d8e:	00016597          	auipc	a1,0x16
    80017d92:	42a58593          	addi	a1,a1,1066 # 8002e1b8 <__func__.0+0x2d0>
    80017d96:	00016517          	auipc	a0,0x16
    80017d9a:	4ca50513          	addi	a0,a0,1226 # 8002e260 <__func__.0+0x378>
    80017d9e:	68c130ef          	jal	8002b42a <printf>
    80017da2:	4511                	li	a0,4
    80017da4:	964e90ef          	jal	80000f08 <goto_priv>
    80017da8:	a7de90ef          	jal	80001824 <reset_state>
}
    80017dac:	60e2                	ld	ra,24(sp)
    80017dae:	8522                	mv	a0,s0
    80017db0:	6442                	ld	s0,16(sp)
    80017db2:	64a2                	ld	s1,8(sp)
    80017db4:	6105                	addi	sp,sp,32
    80017db6:	8082                	ret

0000000080017db8 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80017db8:	1101                	addi	sp,sp,-32

    TEST_START();
    80017dba:	00015597          	auipc	a1,0x15
    80017dbe:	05e58593          	addi	a1,a1,94 # 8002ce18 <__func__.25>
    80017dc2:	00016517          	auipc	a0,0x16
    80017dc6:	40650513          	addi	a0,a0,1030 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    80017dca:	ec06                	sd	ra,24(sp)
    80017dcc:	e822                	sd	s0,16(sp)
    80017dce:	e426                	sd	s1,8(sp)
    TEST_START();
    80017dd0:	65a130ef          	jal	8002b42a <printf>
    80017dd4:	4529                	li	a0,10
    80017dd6:	342120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017dda:	450d                	li	a0,3
    80017ddc:	92ce90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017de0:	801e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017de4:	be1e80ef          	jal	800009c4 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017de8:	4511                	li	a0,4
    80017dea:	91ee90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017dee:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017df2:	450d                	li	a0,3
    80017df4:	914e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017df8:	4509                	li	a0,2
    80017dfa:	82ee90ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017dfe:	80ee90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017e02:	000807b7          	lui	a5,0x80
    80017e06:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017e0a:	2000d5b7          	lui	a1,0x2000d
    80017e0e:	058e                	slli	a1,a1,0x3
    80017e10:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    80017e14:	0001d517          	auipc	a0,0x1d
    80017e18:	9cc50513          	addi	a0,a0,-1588 # 800347e0 <__func__.0+0x68f8>
    80017e1c:	60e130ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    80017e20:	00040417          	auipc	s0,0x40
    80017e24:	1f040413          	addi	s0,s0,496 # 80058010 <excpt>
    80017e28:	640c                	ld	a1,8(s0)
    80017e2a:	00017517          	auipc	a0,0x17
    80017e2e:	f1650513          	addi	a0,a0,-234 # 8002ed40 <__func__.0+0xe58>
    80017e32:	5f8130ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.triggered);
    80017e36:	00040597          	auipc	a1,0x40
    80017e3a:	1db5c583          	lbu	a1,475(a1) # 80058011 <excpt+0x1>
    80017e3e:	00017517          	auipc	a0,0x17
    80017e42:	f0250513          	addi	a0,a0,-254 # 8002ed40 <__func__.0+0xe58>
    80017e46:	5e4130ef          	jal	8002b42a <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e4a:	08200593          	li	a1,130
    80017e4e:	0001c617          	auipc	a2,0x1c
    80017e52:	cea60613          	addi	a2,a2,-790 # 80033b38 <__func__.0+0x5c50>
    80017e56:	00016517          	auipc	a0,0x16
    80017e5a:	38a50513          	addi	a0,a0,906 # 8002e1e0 <__func__.0+0x2f8>
    80017e5e:	5cc130ef          	jal	8002b42a <printf>
    80017e62:	00040797          	auipc	a5,0x40
    80017e66:	1af7c783          	lbu	a5,431(a5) # 80058011 <excpt+0x1>
    80017e6a:	00016597          	auipc	a1,0x16
    80017e6e:	34e58593          	addi	a1,a1,846 # 8002e1b8 <__func__.0+0x2d0>
    80017e72:	cf89                	beqz	a5,80017e8c <load_guest_page_fault_12+0xd4>
    80017e74:	6418                	ld	a4,8(s0)
    80017e76:	47d5                	li	a5,21
    80017e78:	00016597          	auipc	a1,0x16
    80017e7c:	33058593          	addi	a1,a1,816 # 8002e1a8 <__func__.0+0x2c0>
    80017e80:	00f70663          	beq	a4,a5,80017e8c <load_guest_page_fault_12+0xd4>
    80017e84:	00016597          	auipc	a1,0x16
    80017e88:	33458593          	addi	a1,a1,820 # 8002e1b8 <__func__.0+0x2d0>
    80017e8c:	00016517          	auipc	a0,0x16
    80017e90:	36c50513          	addi	a0,a0,876 # 8002e1f8 <__func__.0+0x310>
    80017e94:	596130ef          	jal	8002b42a <printf>
    80017e98:	00040797          	auipc	a5,0x40
    80017e9c:	1797c783          	lbu	a5,377(a5) # 80058011 <excpt+0x1>
    80017ea0:	c789                	beqz	a5,80017eaa <load_guest_page_fault_12+0xf2>
    80017ea2:	6418                	ld	a4,8(s0)
    80017ea4:	47d5                	li	a5,21
    80017ea6:	00f70c63          	beq	a4,a5,80017ebe <load_guest_page_fault_12+0x106>
    80017eaa:	00016517          	auipc	a0,0x16
    80017eae:	35650513          	addi	a0,a0,854 # 8002e200 <__func__.0+0x318>
    80017eb2:	578130ef          	jal	8002b42a <printf>
    80017eb6:	02900513          	li	a0,41
    80017eba:	25e120ef          	jal	8002a118 <putchar>
    80017ebe:	4529                	li	a0,10
    80017ec0:	258120ef          	jal	8002a118 <putchar>
    80017ec4:	00040497          	auipc	s1,0x40
    80017ec8:	14d4c483          	lbu	s1,333(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017ecc:	00016597          	auipc	a1,0x16
    80017ed0:	2ec58593          	addi	a1,a1,748 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017ed4:	cc91                	beqz	s1,80017ef0 <load_guest_page_fault_12+0x138>
    80017ed6:	6418                	ld	a4,8(s0)
    80017ed8:	47d5                	li	a5,21
    TEST_END();
    80017eda:	00016597          	auipc	a1,0x16
    80017ede:	2ce58593          	addi	a1,a1,718 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017ee2:	00f70763          	beq	a4,a5,80017ef0 <load_guest_page_fault_12+0x138>
    80017ee6:	4481                	li	s1,0
    TEST_END();
    80017ee8:	00016597          	auipc	a1,0x16
    80017eec:	2d058593          	addi	a1,a1,720 # 8002e1b8 <__func__.0+0x2d0>
    80017ef0:	00016517          	auipc	a0,0x16
    80017ef4:	37050513          	addi	a0,a0,880 # 8002e260 <__func__.0+0x378>
    80017ef8:	532130ef          	jal	8002b42a <printf>
    80017efc:	4511                	li	a0,4
    80017efe:	80ae90ef          	jal	80000f08 <goto_priv>
    80017f02:	923e90ef          	jal	80001824 <reset_state>
}
    80017f06:	60e2                	ld	ra,24(sp)
    80017f08:	6442                	ld	s0,16(sp)
    80017f0a:	8526                	mv	a0,s1
    80017f0c:	64a2                	ld	s1,8(sp)
    80017f0e:	6105                	addi	sp,sp,32
    80017f10:	8082                	ret

0000000080017f12 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80017f12:	1101                	addi	sp,sp,-32

    TEST_START();
    80017f14:	00015597          	auipc	a1,0x15
    80017f18:	f2458593          	addi	a1,a1,-220 # 8002ce38 <__func__.24>
    80017f1c:	00016517          	auipc	a0,0x16
    80017f20:	2ac50513          	addi	a0,a0,684 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80017f24:	ec06                	sd	ra,24(sp)
    80017f26:	e822                	sd	s0,16(sp)
    80017f28:	e426                	sd	s1,8(sp)
    TEST_START();
    80017f2a:	500130ef          	jal	8002b42a <printf>
    80017f2e:	4529                	li	a0,10
    80017f30:	1e8120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80017f34:	450d                	li	a0,3
    80017f36:	fd3e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017f3a:	ea6e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017f3e:	a87e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017f42:	83be80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017f46:	4511                	li	a0,4
    80017f48:	fc1e80ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017f4c:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017f50:	450d                	li	a0,3
    80017f52:	fb7e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017f56:	4509                	li	a0,2
    80017f58:	ed1e80ef          	jal	80000e28 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017f5c:	eb1e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017f60:	000807b7          	lui	a5,0x80
    80017f64:	1007a073          	csrs	sstatus,a5
    80017f68:	400197b7          	lui	a5,0x40019
    80017f6c:	078a                	slli	a5,a5,0x2
    80017f6e:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f72:	08200593          	li	a1,130
    80017f76:	0001c617          	auipc	a2,0x1c
    80017f7a:	c2260613          	addi	a2,a2,-990 # 80033b98 <__func__.0+0x5cb0>
    80017f7e:	00016517          	auipc	a0,0x16
    80017f82:	26250513          	addi	a0,a0,610 # 8002e1e0 <__func__.0+0x2f8>
    80017f86:	4a4130ef          	jal	8002b42a <printf>
    80017f8a:	00040797          	auipc	a5,0x40
    80017f8e:	0877c783          	lbu	a5,135(a5) # 80058011 <excpt+0x1>
    80017f92:	00040497          	auipc	s1,0x40
    80017f96:	07e48493          	addi	s1,s1,126 # 80058010 <excpt>
    80017f9a:	00016597          	auipc	a1,0x16
    80017f9e:	21e58593          	addi	a1,a1,542 # 8002e1b8 <__func__.0+0x2d0>
    80017fa2:	cf89                	beqz	a5,80017fbc <load_guest_page_fault_13+0xaa>
    80017fa4:	6498                	ld	a4,8(s1)
    80017fa6:	47d5                	li	a5,21
    80017fa8:	00016597          	auipc	a1,0x16
    80017fac:	20058593          	addi	a1,a1,512 # 8002e1a8 <__func__.0+0x2c0>
    80017fb0:	00f70663          	beq	a4,a5,80017fbc <load_guest_page_fault_13+0xaa>
    80017fb4:	00016597          	auipc	a1,0x16
    80017fb8:	20458593          	addi	a1,a1,516 # 8002e1b8 <__func__.0+0x2d0>
    80017fbc:	00016517          	auipc	a0,0x16
    80017fc0:	23c50513          	addi	a0,a0,572 # 8002e1f8 <__func__.0+0x310>
    80017fc4:	466130ef          	jal	8002b42a <printf>
    80017fc8:	00040797          	auipc	a5,0x40
    80017fcc:	0497c783          	lbu	a5,73(a5) # 80058011 <excpt+0x1>
    80017fd0:	c789                	beqz	a5,80017fda <load_guest_page_fault_13+0xc8>
    80017fd2:	6498                	ld	a4,8(s1)
    80017fd4:	47d5                	li	a5,21
    80017fd6:	00f70c63          	beq	a4,a5,80017fee <load_guest_page_fault_13+0xdc>
    80017fda:	00016517          	auipc	a0,0x16
    80017fde:	22650513          	addi	a0,a0,550 # 8002e200 <__func__.0+0x318>
    80017fe2:	448130ef          	jal	8002b42a <printf>
    80017fe6:	02900513          	li	a0,41
    80017fea:	12e120ef          	jal	8002a118 <putchar>
    80017fee:	4529                	li	a0,10
    80017ff0:	128120ef          	jal	8002a118 <putchar>
    80017ff4:	00040417          	auipc	s0,0x40
    80017ff8:	01d44403          	lbu	s0,29(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017ffc:	00016597          	auipc	a1,0x16
    80018000:	1bc58593          	addi	a1,a1,444 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018004:	cc11                	beqz	s0,80018020 <load_guest_page_fault_13+0x10e>
    80018006:	6498                	ld	a4,8(s1)
    80018008:	47d5                	li	a5,21
    TEST_END();
    8001800a:	00016597          	auipc	a1,0x16
    8001800e:	19e58593          	addi	a1,a1,414 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018012:	00f70763          	beq	a4,a5,80018020 <load_guest_page_fault_13+0x10e>
    80018016:	4401                	li	s0,0
    TEST_END();
    80018018:	00016597          	auipc	a1,0x16
    8001801c:	1a058593          	addi	a1,a1,416 # 8002e1b8 <__func__.0+0x2d0>
    80018020:	00016517          	auipc	a0,0x16
    80018024:	24050513          	addi	a0,a0,576 # 8002e260 <__func__.0+0x378>
    80018028:	402130ef          	jal	8002b42a <printf>
    8001802c:	4511                	li	a0,4
    8001802e:	edbe80ef          	jal	80000f08 <goto_priv>
    80018032:	ff2e90ef          	jal	80001824 <reset_state>
}
    80018036:	60e2                	ld	ra,24(sp)
    80018038:	8522                	mv	a0,s0
    8001803a:	6442                	ld	s0,16(sp)
    8001803c:	64a2                	ld	s1,8(sp)
    8001803e:	6105                	addi	sp,sp,32
    80018040:	8082                	ret

0000000080018042 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80018042:	1101                	addi	sp,sp,-32

    TEST_START();
    80018044:	00015597          	auipc	a1,0x15
    80018048:	e1458593          	addi	a1,a1,-492 # 8002ce58 <__func__.23>
    8001804c:	00016517          	auipc	a0,0x16
    80018050:	17c50513          	addi	a0,a0,380 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    80018054:	ec06                	sd	ra,24(sp)
    80018056:	e822                	sd	s0,16(sp)
    80018058:	e426                	sd	s1,8(sp)
    TEST_START();
    8001805a:	3d0130ef          	jal	8002b42a <printf>
    8001805e:	4529                	li	a0,10
    80018060:	0b8120ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018064:	450d                	li	a0,3
    80018066:	ea3e80ef          	jal	80000f08 <goto_priv>
    hpt_init();
    8001806a:	95be80ef          	jal	800009c4 <hpt_init>
    hspt_init();
    8001806e:	d72e80ef          	jal	800005e0 <hspt_init>
    vspt_init();
    80018072:	f0ae80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80018076:	4511                	li	a0,4
    80018078:	e91e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001807c:	000407b7          	lui	a5,0x40
    80018080:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80018084:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80018088:	450d                	li	a0,3
    8001808a:	e7fe80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001808e:	4509                	li	a0,2
    80018090:	d99e80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018094:	d79e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018098:	001007b7          	lui	a5,0x100
    8001809c:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    800180a0:	07b2                	slli	a5,a5,0xc
    800180a2:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800180a6:	00040417          	auipc	s0,0x40
    800180aa:	f6a40413          	addi	s0,s0,-150 # 80058010 <excpt>
    800180ae:	640c                	ld	a1,8(s0)
    800180b0:	00017517          	auipc	a0,0x17
    800180b4:	c9050513          	addi	a0,a0,-880 # 8002ed40 <__func__.0+0xe58>
    800180b8:	372130ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.triggered);
    800180bc:	00040597          	auipc	a1,0x40
    800180c0:	f555c583          	lbu	a1,-171(a1) # 80058011 <excpt+0x1>
    800180c4:	00017517          	auipc	a0,0x17
    800180c8:	c7c50513          	addi	a0,a0,-900 # 8002ed40 <__func__.0+0xe58>
    800180cc:	35e130ef          	jal	8002b42a <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180d0:	08200593          	li	a1,130
    800180d4:	0001c617          	auipc	a2,0x1c
    800180d8:	d5c60613          	addi	a2,a2,-676 # 80033e30 <__func__.0+0x5f48>
    800180dc:	00016517          	auipc	a0,0x16
    800180e0:	10450513          	addi	a0,a0,260 # 8002e1e0 <__func__.0+0x2f8>
    800180e4:	346130ef          	jal	8002b42a <printf>
    800180e8:	00040797          	auipc	a5,0x40
    800180ec:	f297c783          	lbu	a5,-215(a5) # 80058011 <excpt+0x1>
    800180f0:	00016597          	auipc	a1,0x16
    800180f4:	0c858593          	addi	a1,a1,200 # 8002e1b8 <__func__.0+0x2d0>
    800180f8:	cf89                	beqz	a5,80018112 <load_guest_page_fault_14+0xd0>
    800180fa:	6418                	ld	a4,8(s0)
    800180fc:	47d5                	li	a5,21
    800180fe:	00016597          	auipc	a1,0x16
    80018102:	0aa58593          	addi	a1,a1,170 # 8002e1a8 <__func__.0+0x2c0>
    80018106:	00f70663          	beq	a4,a5,80018112 <load_guest_page_fault_14+0xd0>
    8001810a:	00016597          	auipc	a1,0x16
    8001810e:	0ae58593          	addi	a1,a1,174 # 8002e1b8 <__func__.0+0x2d0>
    80018112:	00016517          	auipc	a0,0x16
    80018116:	0e650513          	addi	a0,a0,230 # 8002e1f8 <__func__.0+0x310>
    8001811a:	310130ef          	jal	8002b42a <printf>
    8001811e:	00040797          	auipc	a5,0x40
    80018122:	ef37c783          	lbu	a5,-269(a5) # 80058011 <excpt+0x1>
    80018126:	c789                	beqz	a5,80018130 <load_guest_page_fault_14+0xee>
    80018128:	6418                	ld	a4,8(s0)
    8001812a:	47d5                	li	a5,21
    8001812c:	00f70c63          	beq	a4,a5,80018144 <load_guest_page_fault_14+0x102>
    80018130:	00016517          	auipc	a0,0x16
    80018134:	0d050513          	addi	a0,a0,208 # 8002e200 <__func__.0+0x318>
    80018138:	2f2130ef          	jal	8002b42a <printf>
    8001813c:	02900513          	li	a0,41
    80018140:	7d9110ef          	jal	8002a118 <putchar>
    80018144:	4529                	li	a0,10
    80018146:	7d3110ef          	jal	8002a118 <putchar>
    8001814a:	00040497          	auipc	s1,0x40
    8001814e:	ec74c483          	lbu	s1,-313(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80018152:	00016597          	auipc	a1,0x16
    80018156:	06658593          	addi	a1,a1,102 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    8001815a:	cc91                	beqz	s1,80018176 <load_guest_page_fault_14+0x134>
    8001815c:	6418                	ld	a4,8(s0)
    8001815e:	47d5                	li	a5,21
    TEST_END();
    80018160:	00016597          	auipc	a1,0x16
    80018164:	04858593          	addi	a1,a1,72 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018168:	00f70763          	beq	a4,a5,80018176 <load_guest_page_fault_14+0x134>
    8001816c:	4481                	li	s1,0
    TEST_END();
    8001816e:	00016597          	auipc	a1,0x16
    80018172:	04a58593          	addi	a1,a1,74 # 8002e1b8 <__func__.0+0x2d0>
    80018176:	00016517          	auipc	a0,0x16
    8001817a:	0ea50513          	addi	a0,a0,234 # 8002e260 <__func__.0+0x378>
    8001817e:	2ac130ef          	jal	8002b42a <printf>
    80018182:	4511                	li	a0,4
    80018184:	d85e80ef          	jal	80000f08 <goto_priv>
    80018188:	e9ce90ef          	jal	80001824 <reset_state>
}
    8001818c:	60e2                	ld	ra,24(sp)
    8001818e:	6442                	ld	s0,16(sp)
    80018190:	8526                	mv	a0,s1
    80018192:	64a2                	ld	s1,8(sp)
    80018194:	6105                	addi	sp,sp,32
    80018196:	8082                	ret

0000000080018198 <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    80018198:	1141                	addi	sp,sp,-16

    TEST_START();
    8001819a:	00015597          	auipc	a1,0x15
    8001819e:	cde58593          	addi	a1,a1,-802 # 8002ce78 <__func__.22>
    800181a2:	00016517          	auipc	a0,0x16
    800181a6:	02650513          	addi	a0,a0,38 # 8002e1c8 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    800181aa:	e406                	sd	ra,8(sp)
    800181ac:	e022                	sd	s0,0(sp)
    TEST_START();
    800181ae:	27c130ef          	jal	8002b42a <printf>
    800181b2:	4529                	li	a0,10
    800181b4:	765110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800181b8:	450d                	li	a0,3
    800181ba:	d4fe80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800181be:	c22e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800181c2:	803e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800181c6:	db6e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800181ca:	4511                	li	a0,4
    800181cc:	d3de80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800181d0:	000407b7          	lui	a5,0x40
    800181d4:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    800181d8:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800181dc:	450d                	li	a0,3
    800181de:	d2be80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800181e2:	4509                	li	a0,2
    800181e4:	c45e80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800181e8:	c25e80ef          	jal	80000e0c <test_setup_except_function>
    800181ec:	000807b7          	lui	a5,0x80
    800181f0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800181f2:	07b6                	slli	a5,a5,0xd
    800181f4:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800181f8:	08200593          	li	a1,130
    800181fc:	0001b617          	auipc	a2,0x1b
    80018200:	20460613          	addi	a2,a2,516 # 80033400 <__func__.0+0x5518>
    80018204:	00016517          	auipc	a0,0x16
    80018208:	fdc50513          	addi	a0,a0,-36 # 8002e1e0 <__func__.0+0x2f8>
    8001820c:	21e130ef          	jal	8002b42a <printf>
    80018210:	00040797          	auipc	a5,0x40
    80018214:	e017c783          	lbu	a5,-511(a5) # 80058011 <excpt+0x1>
    80018218:	00016597          	auipc	a1,0x16
    8001821c:	f9058593          	addi	a1,a1,-112 # 8002e1a8 <__func__.0+0x2c0>
    80018220:	c789                	beqz	a5,8001822a <load_guest_page_fault_15+0x92>
    80018222:	00016597          	auipc	a1,0x16
    80018226:	f9658593          	addi	a1,a1,-106 # 8002e1b8 <__func__.0+0x2d0>
    8001822a:	00016517          	auipc	a0,0x16
    8001822e:	fce50513          	addi	a0,a0,-50 # 8002e1f8 <__func__.0+0x310>
    80018232:	1f8130ef          	jal	8002b42a <printf>
    80018236:	00040797          	auipc	a5,0x40
    8001823a:	ddb7c783          	lbu	a5,-549(a5) # 80058011 <excpt+0x1>
    8001823e:	e7a1                	bnez	a5,80018286 <load_guest_page_fault_15+0xee>
    80018240:	4529                	li	a0,10
    80018242:	6d7110ef          	jal	8002a118 <putchar>
    80018246:	00040797          	auipc	a5,0x40
    8001824a:	dcb7c783          	lbu	a5,-565(a5) # 80058011 <excpt+0x1>
    8001824e:	e795                	bnez	a5,8001827a <load_guest_page_fault_15+0xe2>
    80018250:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80018252:	00016597          	auipc	a1,0x16
    80018256:	f5658593          	addi	a1,a1,-170 # 8002e1a8 <__func__.0+0x2c0>
    8001825a:	00016517          	auipc	a0,0x16
    8001825e:	00650513          	addi	a0,a0,6 # 8002e260 <__func__.0+0x378>
    80018262:	1c8130ef          	jal	8002b42a <printf>
    80018266:	4511                	li	a0,4
    80018268:	ca1e80ef          	jal	80000f08 <goto_priv>
    8001826c:	db8e90ef          	jal	80001824 <reset_state>
}
    80018270:	60a2                	ld	ra,8(sp)
    80018272:	8522                	mv	a0,s0
    80018274:	6402                	ld	s0,0(sp)
    80018276:	0141                	addi	sp,sp,16
    80018278:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001827a:	4401                	li	s0,0
    TEST_END();
    8001827c:	00016597          	auipc	a1,0x16
    80018280:	f3c58593          	addi	a1,a1,-196 # 8002e1b8 <__func__.0+0x2d0>
    80018284:	bfd9                	j	8001825a <load_guest_page_fault_15+0xc2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018286:	00016517          	auipc	a0,0x16
    8001828a:	f7a50513          	addi	a0,a0,-134 # 8002e200 <__func__.0+0x318>
    8001828e:	19c130ef          	jal	8002b42a <printf>
    80018292:	02900513          	li	a0,41
    80018296:	683110ef          	jal	8002a118 <putchar>
    8001829a:	b75d                	j	80018240 <load_guest_page_fault_15+0xa8>

000000008001829c <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    8001829c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001829e:	00015597          	auipc	a1,0x15
    800182a2:	bfa58593          	addi	a1,a1,-1030 # 8002ce98 <__func__.21>
    800182a6:	00016517          	auipc	a0,0x16
    800182aa:	f2250513          	addi	a0,a0,-222 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    800182ae:	ec06                	sd	ra,24(sp)
    800182b0:	e822                	sd	s0,16(sp)
    800182b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800182b4:	176130ef          	jal	8002b42a <printf>
    800182b8:	4529                	li	a0,10
    800182ba:	65f110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800182be:	450d                	li	a0,3
    800182c0:	c49e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800182c4:	b1ce80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800182c8:	efce80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800182cc:	cb0e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800182d0:	450d                	li	a0,3
    800182d2:	c37e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800182d6:	4509                	li	a0,2
    800182d8:	b51e80ef          	jal	80000e28 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800182dc:	b31e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800182e0:	37ab77b7          	lui	a5,0x37ab7
    800182e4:	00100737          	lui	a4,0x100
    800182e8:	078a                	slli	a5,a5,0x2
    800182ea:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800182ee:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800182f2:	0732                	slli	a4,a4,0xc
    800182f4:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    800182f8:	08200593          	li	a1,130
    800182fc:	0001c617          	auipc	a2,0x1c
    80018300:	b7460613          	addi	a2,a2,-1164 # 80033e70 <__func__.0+0x5f88>
    80018304:	00016517          	auipc	a0,0x16
    80018308:	edc50513          	addi	a0,a0,-292 # 8002e1e0 <__func__.0+0x2f8>
    8001830c:	11e130ef          	jal	8002b42a <printf>
    80018310:	00040797          	auipc	a5,0x40
    80018314:	d017c783          	lbu	a5,-767(a5) # 80058011 <excpt+0x1>
    80018318:	00040497          	auipc	s1,0x40
    8001831c:	cf848493          	addi	s1,s1,-776 # 80058010 <excpt>
    80018320:	00016597          	auipc	a1,0x16
    80018324:	e9858593          	addi	a1,a1,-360 # 8002e1b8 <__func__.0+0x2d0>
    80018328:	cf89                	beqz	a5,80018342 <store_guest_page_fault_1+0xa6>
    8001832a:	6498                	ld	a4,8(s1)
    8001832c:	47dd                	li	a5,23
    8001832e:	00016597          	auipc	a1,0x16
    80018332:	e7a58593          	addi	a1,a1,-390 # 8002e1a8 <__func__.0+0x2c0>
    80018336:	00f70663          	beq	a4,a5,80018342 <store_guest_page_fault_1+0xa6>
    8001833a:	00016597          	auipc	a1,0x16
    8001833e:	e7e58593          	addi	a1,a1,-386 # 8002e1b8 <__func__.0+0x2d0>
    80018342:	00016517          	auipc	a0,0x16
    80018346:	eb650513          	addi	a0,a0,-330 # 8002e1f8 <__func__.0+0x310>
    8001834a:	0e0130ef          	jal	8002b42a <printf>
    8001834e:	00040797          	auipc	a5,0x40
    80018352:	cc37c783          	lbu	a5,-829(a5) # 80058011 <excpt+0x1>
    80018356:	c789                	beqz	a5,80018360 <store_guest_page_fault_1+0xc4>
    80018358:	6498                	ld	a4,8(s1)
    8001835a:	47dd                	li	a5,23
    8001835c:	00f70c63          	beq	a4,a5,80018374 <store_guest_page_fault_1+0xd8>
    80018360:	00016517          	auipc	a0,0x16
    80018364:	ea050513          	addi	a0,a0,-352 # 8002e200 <__func__.0+0x318>
    80018368:	0c2130ef          	jal	8002b42a <printf>
    8001836c:	02900513          	li	a0,41
    80018370:	5a9110ef          	jal	8002a118 <putchar>
    80018374:	4529                	li	a0,10
    80018376:	5a3110ef          	jal	8002a118 <putchar>
    8001837a:	00040797          	auipc	a5,0x40
    8001837e:	c977c783          	lbu	a5,-873(a5) # 80058011 <excpt+0x1>
    80018382:	4401                	li	s0,0
    80018384:	c789                	beqz	a5,8001838e <store_guest_page_fault_1+0xf2>
    80018386:	6480                	ld	s0,8(s1)
    80018388:	1425                	addi	s0,s0,-23
    8001838a:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001838e:	a7fe80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018392:	001007b7          	lui	a5,0x100
    80018396:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001839a:	6731                	lui	a4,0xc
    8001839c:	07b2                	slli	a5,a5,0xc
    8001839e:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    800183a2:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800183a6:	08200593          	li	a1,130
    800183aa:	0001c617          	auipc	a2,0x1c
    800183ae:	b1660613          	addi	a2,a2,-1258 # 80033ec0 <__func__.0+0x5fd8>
    800183b2:	00016517          	auipc	a0,0x16
    800183b6:	e2e50513          	addi	a0,a0,-466 # 8002e1e0 <__func__.0+0x2f8>
    800183ba:	070130ef          	jal	8002b42a <printf>
    800183be:	00040797          	auipc	a5,0x40
    800183c2:	c537c783          	lbu	a5,-941(a5) # 80058011 <excpt+0x1>
    800183c6:	00016597          	auipc	a1,0x16
    800183ca:	df258593          	addi	a1,a1,-526 # 8002e1b8 <__func__.0+0x2d0>
    800183ce:	cf89                	beqz	a5,800183e8 <store_guest_page_fault_1+0x14c>
    800183d0:	6498                	ld	a4,8(s1)
    800183d2:	47dd                	li	a5,23
    800183d4:	00016597          	auipc	a1,0x16
    800183d8:	dd458593          	addi	a1,a1,-556 # 8002e1a8 <__func__.0+0x2c0>
    800183dc:	00f70663          	beq	a4,a5,800183e8 <store_guest_page_fault_1+0x14c>
    800183e0:	00016597          	auipc	a1,0x16
    800183e4:	dd858593          	addi	a1,a1,-552 # 8002e1b8 <__func__.0+0x2d0>
    800183e8:	00016517          	auipc	a0,0x16
    800183ec:	e1050513          	addi	a0,a0,-496 # 8002e1f8 <__func__.0+0x310>
    800183f0:	03a130ef          	jal	8002b42a <printf>
    800183f4:	00040797          	auipc	a5,0x40
    800183f8:	c1d7c783          	lbu	a5,-995(a5) # 80058011 <excpt+0x1>
    800183fc:	c789                	beqz	a5,80018406 <store_guest_page_fault_1+0x16a>
    800183fe:	6498                	ld	a4,8(s1)
    80018400:	47dd                	li	a5,23
    80018402:	00f70c63          	beq	a4,a5,8001841a <store_guest_page_fault_1+0x17e>
    80018406:	00016517          	auipc	a0,0x16
    8001840a:	dfa50513          	addi	a0,a0,-518 # 8002e200 <__func__.0+0x318>
    8001840e:	01c130ef          	jal	8002b42a <printf>
    80018412:	02900513          	li	a0,41
    80018416:	503110ef          	jal	8002a118 <putchar>
    8001841a:	4529                	li	a0,10
    8001841c:	4fd110ef          	jal	8002a118 <putchar>
    80018420:	c015                	beqz	s0,80018444 <store_guest_page_fault_1+0x1a8>
    80018422:	00040417          	auipc	s0,0x40
    80018426:	bef44403          	lbu	s0,-1041(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001842a:	00016597          	auipc	a1,0x16
    8001842e:	d8e58593          	addi	a1,a1,-626 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018432:	cc11                	beqz	s0,8001844e <store_guest_page_fault_1+0x1b2>
    80018434:	6498                	ld	a4,8(s1)
    80018436:	47dd                	li	a5,23
    TEST_END();
    80018438:	00016597          	auipc	a1,0x16
    8001843c:	d7058593          	addi	a1,a1,-656 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018440:	00f70763          	beq	a4,a5,8001844e <store_guest_page_fault_1+0x1b2>
    80018444:	4401                	li	s0,0
    TEST_END();
    80018446:	00016597          	auipc	a1,0x16
    8001844a:	d7258593          	addi	a1,a1,-654 # 8002e1b8 <__func__.0+0x2d0>
    8001844e:	00016517          	auipc	a0,0x16
    80018452:	e1250513          	addi	a0,a0,-494 # 8002e260 <__func__.0+0x378>
    80018456:	7d5120ef          	jal	8002b42a <printf>
    8001845a:	4511                	li	a0,4
    8001845c:	aade80ef          	jal	80000f08 <goto_priv>
    80018460:	bc4e90ef          	jal	80001824 <reset_state>

}
    80018464:	60e2                	ld	ra,24(sp)
    80018466:	8522                	mv	a0,s0
    80018468:	6442                	ld	s0,16(sp)
    8001846a:	64a2                	ld	s1,8(sp)
    8001846c:	6105                	addi	sp,sp,32
    8001846e:	8082                	ret

0000000080018470 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    80018470:	1101                	addi	sp,sp,-32

    TEST_START();
    80018472:	00015597          	auipc	a1,0x15
    80018476:	a4658593          	addi	a1,a1,-1466 # 8002ceb8 <__func__.20>
    8001847a:	00016517          	auipc	a0,0x16
    8001847e:	d4e50513          	addi	a0,a0,-690 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    80018482:	ec06                	sd	ra,24(sp)
    80018484:	e822                	sd	s0,16(sp)
    80018486:	e426                	sd	s1,8(sp)
    TEST_START();
    80018488:	7a3120ef          	jal	8002b42a <printf>
    8001848c:	4529                	li	a0,10
    8001848e:	48b110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018492:	450d                	li	a0,3
    80018494:	a75e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018498:	948e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001849c:	d28e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800184a0:	adce80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800184a4:	450d                	li	a0,3
    800184a6:	a63e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800184aa:	4509                	li	a0,2
    800184ac:	97de80ef          	jal	80000e28 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800184b0:	95de80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800184b4:	000807b7          	lui	a5,0x80
    800184b8:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800184bc:	37ab77b7          	lui	a5,0x37ab7
    800184c0:	00100737          	lui	a4,0x100
    800184c4:	078a                	slli	a5,a5,0x2
    800184c6:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800184ca:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800184ce:	0732                	slli	a4,a4,0xc
    800184d0:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184d4:	08200593          	li	a1,130
    800184d8:	0001c617          	auipc	a2,0x1c
    800184dc:	a4860613          	addi	a2,a2,-1464 # 80033f20 <__func__.0+0x6038>
    800184e0:	00016517          	auipc	a0,0x16
    800184e4:	d0050513          	addi	a0,a0,-768 # 8002e1e0 <__func__.0+0x2f8>
    800184e8:	743120ef          	jal	8002b42a <printf>
    800184ec:	00040797          	auipc	a5,0x40
    800184f0:	b257c783          	lbu	a5,-1243(a5) # 80058011 <excpt+0x1>
    800184f4:	00040497          	auipc	s1,0x40
    800184f8:	b1c48493          	addi	s1,s1,-1252 # 80058010 <excpt>
    800184fc:	00016597          	auipc	a1,0x16
    80018500:	cbc58593          	addi	a1,a1,-836 # 8002e1b8 <__func__.0+0x2d0>
    80018504:	cf89                	beqz	a5,8001851e <store_guest_page_fault_2+0xae>
    80018506:	6498                	ld	a4,8(s1)
    80018508:	47dd                	li	a5,23
    8001850a:	00016597          	auipc	a1,0x16
    8001850e:	c9e58593          	addi	a1,a1,-866 # 8002e1a8 <__func__.0+0x2c0>
    80018512:	00f70663          	beq	a4,a5,8001851e <store_guest_page_fault_2+0xae>
    80018516:	00016597          	auipc	a1,0x16
    8001851a:	ca258593          	addi	a1,a1,-862 # 8002e1b8 <__func__.0+0x2d0>
    8001851e:	00016517          	auipc	a0,0x16
    80018522:	cda50513          	addi	a0,a0,-806 # 8002e1f8 <__func__.0+0x310>
    80018526:	705120ef          	jal	8002b42a <printf>
    8001852a:	00040797          	auipc	a5,0x40
    8001852e:	ae77c783          	lbu	a5,-1305(a5) # 80058011 <excpt+0x1>
    80018532:	c789                	beqz	a5,8001853c <store_guest_page_fault_2+0xcc>
    80018534:	6498                	ld	a4,8(s1)
    80018536:	47dd                	li	a5,23
    80018538:	00f70c63          	beq	a4,a5,80018550 <store_guest_page_fault_2+0xe0>
    8001853c:	00016517          	auipc	a0,0x16
    80018540:	cc450513          	addi	a0,a0,-828 # 8002e200 <__func__.0+0x318>
    80018544:	6e7120ef          	jal	8002b42a <printf>
    80018548:	02900513          	li	a0,41
    8001854c:	3cd110ef          	jal	8002a118 <putchar>
    80018550:	4529                	li	a0,10
    80018552:	3c7110ef          	jal	8002a118 <putchar>
    80018556:	00040417          	auipc	s0,0x40
    8001855a:	abb44403          	lbu	s0,-1349(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001855e:	00016597          	auipc	a1,0x16
    80018562:	c5a58593          	addi	a1,a1,-934 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018566:	cc11                	beqz	s0,80018582 <store_guest_page_fault_2+0x112>
    80018568:	6498                	ld	a4,8(s1)
    8001856a:	47dd                	li	a5,23
    TEST_END();
    8001856c:	00016597          	auipc	a1,0x16
    80018570:	c3c58593          	addi	a1,a1,-964 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018574:	00f70763          	beq	a4,a5,80018582 <store_guest_page_fault_2+0x112>
    80018578:	4401                	li	s0,0
    TEST_END();
    8001857a:	00016597          	auipc	a1,0x16
    8001857e:	c3e58593          	addi	a1,a1,-962 # 8002e1b8 <__func__.0+0x2d0>
    80018582:	00016517          	auipc	a0,0x16
    80018586:	cde50513          	addi	a0,a0,-802 # 8002e260 <__func__.0+0x378>
    8001858a:	6a1120ef          	jal	8002b42a <printf>
    8001858e:	4511                	li	a0,4
    80018590:	979e80ef          	jal	80000f08 <goto_priv>
    80018594:	a90e90ef          	jal	80001824 <reset_state>
}
    80018598:	60e2                	ld	ra,24(sp)
    8001859a:	8522                	mv	a0,s0
    8001859c:	6442                	ld	s0,16(sp)
    8001859e:	64a2                	ld	s1,8(sp)
    800185a0:	6105                	addi	sp,sp,32
    800185a2:	8082                	ret

00000000800185a4 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    800185a4:	1101                	addi	sp,sp,-32

    TEST_START();
    800185a6:	00015597          	auipc	a1,0x15
    800185aa:	93258593          	addi	a1,a1,-1742 # 8002ced8 <__func__.19>
    800185ae:	00016517          	auipc	a0,0x16
    800185b2:	c1a50513          	addi	a0,a0,-998 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    800185b6:	ec06                	sd	ra,24(sp)
    800185b8:	e822                	sd	s0,16(sp)
    800185ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800185bc:	66f120ef          	jal	8002b42a <printf>
    800185c0:	4529                	li	a0,10
    800185c2:	357110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800185c6:	450d                	li	a0,3
    800185c8:	941e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800185cc:	814e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800185d0:	bf4e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800185d4:	9a8e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800185d8:	450d                	li	a0,3
    800185da:	92fe80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800185de:	4509                	li	a0,2
    800185e0:	849e80ef          	jal	80000e28 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800185e4:	829e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800185e8:	000807b7          	lui	a5,0x80
    800185ec:	1007a073          	csrs	sstatus,a5
    800185f0:	37ab77b7          	lui	a5,0x37ab7
    800185f4:	00100737          	lui	a4,0x100
    800185f8:	078a                	slli	a5,a5,0x2
    800185fa:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800185fe:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018602:	0732                	slli	a4,a4,0xc
    80018604:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018608:	08200593          	li	a1,130
    8001860c:	0001c617          	auipc	a2,0x1c
    80018610:	97460613          	addi	a2,a2,-1676 # 80033f80 <__func__.0+0x6098>
    80018614:	00016517          	auipc	a0,0x16
    80018618:	bcc50513          	addi	a0,a0,-1076 # 8002e1e0 <__func__.0+0x2f8>
    8001861c:	60f120ef          	jal	8002b42a <printf>
    80018620:	00040797          	auipc	a5,0x40
    80018624:	9f17c783          	lbu	a5,-1551(a5) # 80058011 <excpt+0x1>
    80018628:	00040497          	auipc	s1,0x40
    8001862c:	9e848493          	addi	s1,s1,-1560 # 80058010 <excpt>
    80018630:	00016597          	auipc	a1,0x16
    80018634:	b8858593          	addi	a1,a1,-1144 # 8002e1b8 <__func__.0+0x2d0>
    80018638:	cf89                	beqz	a5,80018652 <store_guest_page_fault_3+0xae>
    8001863a:	6498                	ld	a4,8(s1)
    8001863c:	47dd                	li	a5,23
    8001863e:	00016597          	auipc	a1,0x16
    80018642:	b6a58593          	addi	a1,a1,-1174 # 8002e1a8 <__func__.0+0x2c0>
    80018646:	00f70663          	beq	a4,a5,80018652 <store_guest_page_fault_3+0xae>
    8001864a:	00016597          	auipc	a1,0x16
    8001864e:	b6e58593          	addi	a1,a1,-1170 # 8002e1b8 <__func__.0+0x2d0>
    80018652:	00016517          	auipc	a0,0x16
    80018656:	ba650513          	addi	a0,a0,-1114 # 8002e1f8 <__func__.0+0x310>
    8001865a:	5d1120ef          	jal	8002b42a <printf>
    8001865e:	00040797          	auipc	a5,0x40
    80018662:	9b37c783          	lbu	a5,-1613(a5) # 80058011 <excpt+0x1>
    80018666:	c789                	beqz	a5,80018670 <store_guest_page_fault_3+0xcc>
    80018668:	6498                	ld	a4,8(s1)
    8001866a:	47dd                	li	a5,23
    8001866c:	00f70c63          	beq	a4,a5,80018684 <store_guest_page_fault_3+0xe0>
    80018670:	00016517          	auipc	a0,0x16
    80018674:	b9050513          	addi	a0,a0,-1136 # 8002e200 <__func__.0+0x318>
    80018678:	5b3120ef          	jal	8002b42a <printf>
    8001867c:	02900513          	li	a0,41
    80018680:	299110ef          	jal	8002a118 <putchar>
    80018684:	4529                	li	a0,10
    80018686:	293110ef          	jal	8002a118 <putchar>
    8001868a:	00040417          	auipc	s0,0x40
    8001868e:	98744403          	lbu	s0,-1657(s0) # 80058011 <excpt+0x1>
    80018692:	c409                	beqz	s0,8001869c <store_guest_page_fault_3+0xf8>
    80018694:	6498                	ld	a4,8(s1)
    80018696:	47dd                	li	a5,23
    80018698:	02f70c63          	beq	a4,a5,800186d0 <store_guest_page_fault_3+0x12c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001869c:	000807b7          	lui	a5,0x80
    800186a0:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800186a4:	4401                	li	s0,0

    TEST_END();
    800186a6:	00016597          	auipc	a1,0x16
    800186aa:	b1258593          	addi	a1,a1,-1262 # 8002e1b8 <__func__.0+0x2d0>
    800186ae:	00016517          	auipc	a0,0x16
    800186b2:	bb250513          	addi	a0,a0,-1102 # 8002e260 <__func__.0+0x378>
    800186b6:	575120ef          	jal	8002b42a <printf>
    800186ba:	4511                	li	a0,4
    800186bc:	84de80ef          	jal	80000f08 <goto_priv>
    800186c0:	964e90ef          	jal	80001824 <reset_state>
}
    800186c4:	60e2                	ld	ra,24(sp)
    800186c6:	8522                	mv	a0,s0
    800186c8:	6442                	ld	s0,16(sp)
    800186ca:	64a2                	ld	s1,8(sp)
    800186cc:	6105                	addi	sp,sp,32
    800186ce:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800186d0:	000807b7          	lui	a5,0x80
    800186d4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800186d8:	00016597          	auipc	a1,0x16
    800186dc:	ad058593          	addi	a1,a1,-1328 # 8002e1a8 <__func__.0+0x2c0>
    800186e0:	b7f9                	j	800186ae <store_guest_page_fault_3+0x10a>

00000000800186e2 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    800186e2:	1101                	addi	sp,sp,-32

    TEST_START();
    800186e4:	00015597          	auipc	a1,0x15
    800186e8:	81458593          	addi	a1,a1,-2028 # 8002cef8 <__func__.18>
    800186ec:	00016517          	auipc	a0,0x16
    800186f0:	adc50513          	addi	a0,a0,-1316 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    800186f4:	ec06                	sd	ra,24(sp)
    800186f6:	e822                	sd	s0,16(sp)
    800186f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800186fa:	531120ef          	jal	8002b42a <printf>
    800186fe:	4529                	li	a0,10
    80018700:	219110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018704:	450d                	li	a0,3
    80018706:	803e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001870a:	ed7e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001870e:	ab6e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018712:	86ae80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018716:	4511                	li	a0,4
    80018718:	ff0e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001871c:	000407b7          	lui	a5,0x40
    80018720:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80018724:	450d                	li	a0,3
    80018726:	fe2e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001872a:	4509                	li	a0,2
    8001872c:	efce80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018730:	edce80ef          	jal	80000e0c <test_setup_except_function>
    80018734:	37ab77b7          	lui	a5,0x37ab7
    80018738:	00080737          	lui	a4,0x80
    8001873c:	078a                	slli	a5,a5,0x2
    8001873e:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018740:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018744:	0736                	slli	a4,a4,0xd
    80018746:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    8001874a:	08200593          	li	a1,130
    8001874e:	0001c617          	auipc	a2,0x1c
    80018752:	8a260613          	addi	a2,a2,-1886 # 80033ff0 <__func__.0+0x6108>
    80018756:	00016517          	auipc	a0,0x16
    8001875a:	a8a50513          	addi	a0,a0,-1398 # 8002e1e0 <__func__.0+0x2f8>
    8001875e:	4cd120ef          	jal	8002b42a <printf>
    80018762:	00040797          	auipc	a5,0x40
    80018766:	8af7c783          	lbu	a5,-1873(a5) # 80058011 <excpt+0x1>
    8001876a:	00040497          	auipc	s1,0x40
    8001876e:	8a648493          	addi	s1,s1,-1882 # 80058010 <excpt>
    80018772:	00016597          	auipc	a1,0x16
    80018776:	a4658593          	addi	a1,a1,-1466 # 8002e1b8 <__func__.0+0x2d0>
    8001877a:	cf89                	beqz	a5,80018794 <store_guest_page_fault_4+0xb2>
    8001877c:	6498                	ld	a4,8(s1)
    8001877e:	47bd                	li	a5,15
    80018780:	00016597          	auipc	a1,0x16
    80018784:	a2858593          	addi	a1,a1,-1496 # 8002e1a8 <__func__.0+0x2c0>
    80018788:	00f70663          	beq	a4,a5,80018794 <store_guest_page_fault_4+0xb2>
    8001878c:	00016597          	auipc	a1,0x16
    80018790:	a2c58593          	addi	a1,a1,-1492 # 8002e1b8 <__func__.0+0x2d0>
    80018794:	00016517          	auipc	a0,0x16
    80018798:	a6450513          	addi	a0,a0,-1436 # 8002e1f8 <__func__.0+0x310>
    8001879c:	48f120ef          	jal	8002b42a <printf>
    800187a0:	00040797          	auipc	a5,0x40
    800187a4:	8717c783          	lbu	a5,-1935(a5) # 80058011 <excpt+0x1>
    800187a8:	c789                	beqz	a5,800187b2 <store_guest_page_fault_4+0xd0>
    800187aa:	6498                	ld	a4,8(s1)
    800187ac:	47bd                	li	a5,15
    800187ae:	00f70c63          	beq	a4,a5,800187c6 <store_guest_page_fault_4+0xe4>
    800187b2:	00016517          	auipc	a0,0x16
    800187b6:	a4e50513          	addi	a0,a0,-1458 # 8002e200 <__func__.0+0x318>
    800187ba:	471120ef          	jal	8002b42a <printf>
    800187be:	02900513          	li	a0,41
    800187c2:	157110ef          	jal	8002a118 <putchar>
    800187c6:	4529                	li	a0,10
    800187c8:	151110ef          	jal	8002a118 <putchar>
    800187cc:	00040417          	auipc	s0,0x40
    800187d0:	84544403          	lbu	s0,-1979(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800187d4:	00016597          	auipc	a1,0x16
    800187d8:	9e458593          	addi	a1,a1,-1564 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800187dc:	cc11                	beqz	s0,800187f8 <store_guest_page_fault_4+0x116>
    800187de:	6498                	ld	a4,8(s1)
    800187e0:	47bd                	li	a5,15
    TEST_END();
    800187e2:	00016597          	auipc	a1,0x16
    800187e6:	9c658593          	addi	a1,a1,-1594 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800187ea:	00f70763          	beq	a4,a5,800187f8 <store_guest_page_fault_4+0x116>
    800187ee:	4401                	li	s0,0
    TEST_END();
    800187f0:	00016597          	auipc	a1,0x16
    800187f4:	9c858593          	addi	a1,a1,-1592 # 8002e1b8 <__func__.0+0x2d0>
    800187f8:	00016517          	auipc	a0,0x16
    800187fc:	a6850513          	addi	a0,a0,-1432 # 8002e260 <__func__.0+0x378>
    80018800:	42b120ef          	jal	8002b42a <printf>
    80018804:	4511                	li	a0,4
    80018806:	f02e80ef          	jal	80000f08 <goto_priv>
    8001880a:	81ae90ef          	jal	80001824 <reset_state>
}
    8001880e:	60e2                	ld	ra,24(sp)
    80018810:	8522                	mv	a0,s0
    80018812:	6442                	ld	s0,16(sp)
    80018814:	64a2                	ld	s1,8(sp)
    80018816:	6105                	addi	sp,sp,32
    80018818:	8082                	ret

000000008001881a <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    8001881a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001881c:	00014597          	auipc	a1,0x14
    80018820:	6fc58593          	addi	a1,a1,1788 # 8002cf18 <__func__.17>
    80018824:	00016517          	auipc	a0,0x16
    80018828:	9a450513          	addi	a0,a0,-1628 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    8001882c:	e406                	sd	ra,8(sp)
    8001882e:	e022                	sd	s0,0(sp)
    TEST_START();
    80018830:	3fb120ef          	jal	8002b42a <printf>
    80018834:	4529                	li	a0,10
    80018836:	0e3110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001883a:	450d                	li	a0,3
    8001883c:	ecce80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018840:	da1e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018844:	980e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018848:	f35e70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    8001884c:	4511                	li	a0,4
    8001884e:	ebae80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018852:	000407b7          	lui	a5,0x40
    80018856:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001885a:	450d                	li	a0,3
    8001885c:	eace80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018860:	4509                	li	a0,2
    80018862:	dc6e80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018866:	da6e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001886a:	37ab77b7          	lui	a5,0x37ab7
    8001886e:	00080737          	lui	a4,0x80
    80018872:	078a                	slli	a5,a5,0x2
    80018874:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018876:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001887a:	0736                	slli	a4,a4,0xd
    8001887c:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018880:	08200593          	li	a1,130
    80018884:	0001b617          	auipc	a2,0x1b
    80018888:	7ac60613          	addi	a2,a2,1964 # 80034030 <__func__.0+0x6148>
    8001888c:	00016517          	auipc	a0,0x16
    80018890:	95450513          	addi	a0,a0,-1708 # 8002e1e0 <__func__.0+0x2f8>
    80018894:	397120ef          	jal	8002b42a <printf>
    80018898:	0003f797          	auipc	a5,0x3f
    8001889c:	7797c783          	lbu	a5,1913(a5) # 80058011 <excpt+0x1>
    800188a0:	00016597          	auipc	a1,0x16
    800188a4:	90858593          	addi	a1,a1,-1784 # 8002e1a8 <__func__.0+0x2c0>
    800188a8:	c789                	beqz	a5,800188b2 <store_guest_page_fault_5+0x98>
    800188aa:	00016597          	auipc	a1,0x16
    800188ae:	90e58593          	addi	a1,a1,-1778 # 8002e1b8 <__func__.0+0x2d0>
    800188b2:	00016517          	auipc	a0,0x16
    800188b6:	94650513          	addi	a0,a0,-1722 # 8002e1f8 <__func__.0+0x310>
    800188ba:	371120ef          	jal	8002b42a <printf>
    800188be:	0003f797          	auipc	a5,0x3f
    800188c2:	7537c783          	lbu	a5,1875(a5) # 80058011 <excpt+0x1>
    800188c6:	e7a1                	bnez	a5,8001890e <store_guest_page_fault_5+0xf4>
    800188c8:	4529                	li	a0,10
    800188ca:	04f110ef          	jal	8002a118 <putchar>
    800188ce:	0003f797          	auipc	a5,0x3f
    800188d2:	7437c783          	lbu	a5,1859(a5) # 80058011 <excpt+0x1>
    800188d6:	e795                	bnez	a5,80018902 <store_guest_page_fault_5+0xe8>
    800188d8:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800188da:	00016597          	auipc	a1,0x16
    800188de:	8ce58593          	addi	a1,a1,-1842 # 8002e1a8 <__func__.0+0x2c0>
    800188e2:	00016517          	auipc	a0,0x16
    800188e6:	97e50513          	addi	a0,a0,-1666 # 8002e260 <__func__.0+0x378>
    800188ea:	341120ef          	jal	8002b42a <printf>
    800188ee:	4511                	li	a0,4
    800188f0:	e18e80ef          	jal	80000f08 <goto_priv>
    800188f4:	f31e80ef          	jal	80001824 <reset_state>
}
    800188f8:	60a2                	ld	ra,8(sp)
    800188fa:	8522                	mv	a0,s0
    800188fc:	6402                	ld	s0,0(sp)
    800188fe:	0141                	addi	sp,sp,16
    80018900:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018902:	4401                	li	s0,0
    TEST_END();
    80018904:	00016597          	auipc	a1,0x16
    80018908:	8b458593          	addi	a1,a1,-1868 # 8002e1b8 <__func__.0+0x2d0>
    8001890c:	bfd9                	j	800188e2 <store_guest_page_fault_5+0xc8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    8001890e:	00016517          	auipc	a0,0x16
    80018912:	8f250513          	addi	a0,a0,-1806 # 8002e200 <__func__.0+0x318>
    80018916:	315120ef          	jal	8002b42a <printf>
    8001891a:	02900513          	li	a0,41
    8001891e:	7fa110ef          	jal	8002a118 <putchar>
    80018922:	b75d                	j	800188c8 <store_guest_page_fault_5+0xae>

0000000080018924 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80018924:	1101                	addi	sp,sp,-32

    TEST_START();
    80018926:	00014597          	auipc	a1,0x14
    8001892a:	61258593          	addi	a1,a1,1554 # 8002cf38 <__func__.16>
    8001892e:	00016517          	auipc	a0,0x16
    80018932:	89a50513          	addi	a0,a0,-1894 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    80018936:	ec06                	sd	ra,24(sp)
    80018938:	e822                	sd	s0,16(sp)
    8001893a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001893c:	2ef120ef          	jal	8002b42a <printf>
    80018940:	4529                	li	a0,10
    80018942:	7d6110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018946:	450d                	li	a0,3
    80018948:	dc0e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001894c:	c95e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018950:	874e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018954:	e29e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018958:	4509                	li	a0,2
    8001895a:	daee80ef          	jal	80000f08 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001895e:	caee80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018962:	37ab77b7          	lui	a5,0x37ab7
    80018966:	00100737          	lui	a4,0x100
    8001896a:	078a                	slli	a5,a5,0x2
    8001896c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018970:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018974:	0732                	slli	a4,a4,0xc
    80018976:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    8001897a:	08200593          	li	a1,130
    8001897e:	0001b617          	auipc	a2,0x1b
    80018982:	6ea60613          	addi	a2,a2,1770 # 80034068 <__func__.0+0x6180>
    80018986:	00016517          	auipc	a0,0x16
    8001898a:	85a50513          	addi	a0,a0,-1958 # 8002e1e0 <__func__.0+0x2f8>
    8001898e:	29d120ef          	jal	8002b42a <printf>
    80018992:	0003f797          	auipc	a5,0x3f
    80018996:	67f7c783          	lbu	a5,1663(a5) # 80058011 <excpt+0x1>
    8001899a:	0003f497          	auipc	s1,0x3f
    8001899e:	67648493          	addi	s1,s1,1654 # 80058010 <excpt>
    800189a2:	00016597          	auipc	a1,0x16
    800189a6:	81658593          	addi	a1,a1,-2026 # 8002e1b8 <__func__.0+0x2d0>
    800189aa:	cf89                	beqz	a5,800189c4 <store_guest_page_fault_6+0xa0>
    800189ac:	6498                	ld	a4,8(s1)
    800189ae:	47dd                	li	a5,23
    800189b0:	00015597          	auipc	a1,0x15
    800189b4:	7f858593          	addi	a1,a1,2040 # 8002e1a8 <__func__.0+0x2c0>
    800189b8:	00f70663          	beq	a4,a5,800189c4 <store_guest_page_fault_6+0xa0>
    800189bc:	00015597          	auipc	a1,0x15
    800189c0:	7fc58593          	addi	a1,a1,2044 # 8002e1b8 <__func__.0+0x2d0>
    800189c4:	00016517          	auipc	a0,0x16
    800189c8:	83450513          	addi	a0,a0,-1996 # 8002e1f8 <__func__.0+0x310>
    800189cc:	25f120ef          	jal	8002b42a <printf>
    800189d0:	0003f797          	auipc	a5,0x3f
    800189d4:	6417c783          	lbu	a5,1601(a5) # 80058011 <excpt+0x1>
    800189d8:	c789                	beqz	a5,800189e2 <store_guest_page_fault_6+0xbe>
    800189da:	6498                	ld	a4,8(s1)
    800189dc:	47dd                	li	a5,23
    800189de:	00f70c63          	beq	a4,a5,800189f6 <store_guest_page_fault_6+0xd2>
    800189e2:	00016517          	auipc	a0,0x16
    800189e6:	81e50513          	addi	a0,a0,-2018 # 8002e200 <__func__.0+0x318>
    800189ea:	241120ef          	jal	8002b42a <printf>
    800189ee:	02900513          	li	a0,41
    800189f2:	726110ef          	jal	8002a118 <putchar>
    800189f6:	4529                	li	a0,10
    800189f8:	720110ef          	jal	8002a118 <putchar>
    800189fc:	0003f797          	auipc	a5,0x3f
    80018a00:	6157c783          	lbu	a5,1557(a5) # 80058011 <excpt+0x1>
    80018a04:	4401                	li	s0,0
    80018a06:	c789                	beqz	a5,80018a10 <store_guest_page_fault_6+0xec>
    80018a08:	6480                	ld	s0,8(s1)
    80018a0a:	1425                	addi	s0,s0,-23
    80018a0c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018a10:	bfce80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018a14:	001007b7          	lui	a5,0x100
    80018a18:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018a1c:	7771                	lui	a4,0xffffc
    80018a1e:	07b2                	slli	a5,a5,0xc
    80018a20:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018a24:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a28:	08200593          	li	a1,130
    80018a2c:	0001b617          	auipc	a2,0x1b
    80018a30:	68c60613          	addi	a2,a2,1676 # 800340b8 <__func__.0+0x61d0>
    80018a34:	00015517          	auipc	a0,0x15
    80018a38:	7ac50513          	addi	a0,a0,1964 # 8002e1e0 <__func__.0+0x2f8>
    80018a3c:	1ef120ef          	jal	8002b42a <printf>
    80018a40:	0003f797          	auipc	a5,0x3f
    80018a44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    80018a48:	00015597          	auipc	a1,0x15
    80018a4c:	77058593          	addi	a1,a1,1904 # 8002e1b8 <__func__.0+0x2d0>
    80018a50:	cf89                	beqz	a5,80018a6a <store_guest_page_fault_6+0x146>
    80018a52:	6498                	ld	a4,8(s1)
    80018a54:	47dd                	li	a5,23
    80018a56:	00015597          	auipc	a1,0x15
    80018a5a:	75258593          	addi	a1,a1,1874 # 8002e1a8 <__func__.0+0x2c0>
    80018a5e:	00f70663          	beq	a4,a5,80018a6a <store_guest_page_fault_6+0x146>
    80018a62:	00015597          	auipc	a1,0x15
    80018a66:	75658593          	addi	a1,a1,1878 # 8002e1b8 <__func__.0+0x2d0>
    80018a6a:	00015517          	auipc	a0,0x15
    80018a6e:	78e50513          	addi	a0,a0,1934 # 8002e1f8 <__func__.0+0x310>
    80018a72:	1b9120ef          	jal	8002b42a <printf>
    80018a76:	0003f797          	auipc	a5,0x3f
    80018a7a:	59b7c783          	lbu	a5,1435(a5) # 80058011 <excpt+0x1>
    80018a7e:	c789                	beqz	a5,80018a88 <store_guest_page_fault_6+0x164>
    80018a80:	6498                	ld	a4,8(s1)
    80018a82:	47dd                	li	a5,23
    80018a84:	00f70c63          	beq	a4,a5,80018a9c <store_guest_page_fault_6+0x178>
    80018a88:	00015517          	auipc	a0,0x15
    80018a8c:	77850513          	addi	a0,a0,1912 # 8002e200 <__func__.0+0x318>
    80018a90:	19b120ef          	jal	8002b42a <printf>
    80018a94:	02900513          	li	a0,41
    80018a98:	680110ef          	jal	8002a118 <putchar>
    80018a9c:	4529                	li	a0,10
    80018a9e:	67a110ef          	jal	8002a118 <putchar>
    80018aa2:	c015                	beqz	s0,80018ac6 <store_guest_page_fault_6+0x1a2>
    80018aa4:	0003f417          	auipc	s0,0x3f
    80018aa8:	56d44403          	lbu	s0,1389(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018aac:	00015597          	auipc	a1,0x15
    80018ab0:	70c58593          	addi	a1,a1,1804 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018ab4:	cc11                	beqz	s0,80018ad0 <store_guest_page_fault_6+0x1ac>
    80018ab6:	6498                	ld	a4,8(s1)
    80018ab8:	47dd                	li	a5,23
    TEST_END();
    80018aba:	00015597          	auipc	a1,0x15
    80018abe:	6ee58593          	addi	a1,a1,1774 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018ac2:	00f70763          	beq	a4,a5,80018ad0 <store_guest_page_fault_6+0x1ac>
    80018ac6:	4401                	li	s0,0
    TEST_END();
    80018ac8:	00015597          	auipc	a1,0x15
    80018acc:	6f058593          	addi	a1,a1,1776 # 8002e1b8 <__func__.0+0x2d0>
    80018ad0:	00015517          	auipc	a0,0x15
    80018ad4:	79050513          	addi	a0,a0,1936 # 8002e260 <__func__.0+0x378>
    80018ad8:	153120ef          	jal	8002b42a <printf>
    80018adc:	4511                	li	a0,4
    80018ade:	c2ae80ef          	jal	80000f08 <goto_priv>
    80018ae2:	d43e80ef          	jal	80001824 <reset_state>

}
    80018ae6:	60e2                	ld	ra,24(sp)
    80018ae8:	8522                	mv	a0,s0
    80018aea:	6442                	ld	s0,16(sp)
    80018aec:	64a2                	ld	s1,8(sp)
    80018aee:	6105                	addi	sp,sp,32
    80018af0:	8082                	ret

0000000080018af2 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80018af2:	1101                	addi	sp,sp,-32

    TEST_START();
    80018af4:	00014597          	auipc	a1,0x14
    80018af8:	46458593          	addi	a1,a1,1124 # 8002cf58 <__func__.15>
    80018afc:	00015517          	auipc	a0,0x15
    80018b00:	6cc50513          	addi	a0,a0,1740 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    80018b04:	ec06                	sd	ra,24(sp)
    80018b06:	e822                	sd	s0,16(sp)
    80018b08:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b0a:	121120ef          	jal	8002b42a <printf>
    80018b0e:	4529                	li	a0,10
    80018b10:	608110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018b14:	450d                	li	a0,3
    80018b16:	bf2e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018b1a:	ac7e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018b1e:	ea7e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018b22:	c5be70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018b26:	4509                	li	a0,2
    80018b28:	be0e80ef          	jal	80000f08 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018b2c:	ae0e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018b30:	000807b7          	lui	a5,0x80
    80018b34:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018b38:	37ab77b7          	lui	a5,0x37ab7
    80018b3c:	00100737          	lui	a4,0x100
    80018b40:	078a                	slli	a5,a5,0x2
    80018b42:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018b46:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018b4a:	0732                	slli	a4,a4,0xc
    80018b4c:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b50:	08200593          	li	a1,130
    80018b54:	0001b617          	auipc	a2,0x1b
    80018b58:	5bc60613          	addi	a2,a2,1468 # 80034110 <__func__.0+0x6228>
    80018b5c:	00015517          	auipc	a0,0x15
    80018b60:	68450513          	addi	a0,a0,1668 # 8002e1e0 <__func__.0+0x2f8>
    80018b64:	0c7120ef          	jal	8002b42a <printf>
    80018b68:	0003f797          	auipc	a5,0x3f
    80018b6c:	4a97c783          	lbu	a5,1193(a5) # 80058011 <excpt+0x1>
    80018b70:	0003f497          	auipc	s1,0x3f
    80018b74:	4a048493          	addi	s1,s1,1184 # 80058010 <excpt>
    80018b78:	00015597          	auipc	a1,0x15
    80018b7c:	64058593          	addi	a1,a1,1600 # 8002e1b8 <__func__.0+0x2d0>
    80018b80:	cf89                	beqz	a5,80018b9a <store_guest_page_fault_7+0xa8>
    80018b82:	6498                	ld	a4,8(s1)
    80018b84:	47dd                	li	a5,23
    80018b86:	00015597          	auipc	a1,0x15
    80018b8a:	62258593          	addi	a1,a1,1570 # 8002e1a8 <__func__.0+0x2c0>
    80018b8e:	00f70663          	beq	a4,a5,80018b9a <store_guest_page_fault_7+0xa8>
    80018b92:	00015597          	auipc	a1,0x15
    80018b96:	62658593          	addi	a1,a1,1574 # 8002e1b8 <__func__.0+0x2d0>
    80018b9a:	00015517          	auipc	a0,0x15
    80018b9e:	65e50513          	addi	a0,a0,1630 # 8002e1f8 <__func__.0+0x310>
    80018ba2:	089120ef          	jal	8002b42a <printf>
    80018ba6:	0003f797          	auipc	a5,0x3f
    80018baa:	46b7c783          	lbu	a5,1131(a5) # 80058011 <excpt+0x1>
    80018bae:	c789                	beqz	a5,80018bb8 <store_guest_page_fault_7+0xc6>
    80018bb0:	6498                	ld	a4,8(s1)
    80018bb2:	47dd                	li	a5,23
    80018bb4:	00f70c63          	beq	a4,a5,80018bcc <store_guest_page_fault_7+0xda>
    80018bb8:	00015517          	auipc	a0,0x15
    80018bbc:	64850513          	addi	a0,a0,1608 # 8002e200 <__func__.0+0x318>
    80018bc0:	06b120ef          	jal	8002b42a <printf>
    80018bc4:	02900513          	li	a0,41
    80018bc8:	550110ef          	jal	8002a118 <putchar>
    80018bcc:	4529                	li	a0,10
    80018bce:	54a110ef          	jal	8002a118 <putchar>
    80018bd2:	0003f417          	auipc	s0,0x3f
    80018bd6:	43f44403          	lbu	s0,1087(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018bda:	00015597          	auipc	a1,0x15
    80018bde:	5de58593          	addi	a1,a1,1502 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018be2:	cc11                	beqz	s0,80018bfe <store_guest_page_fault_7+0x10c>
    80018be4:	6498                	ld	a4,8(s1)
    80018be6:	47dd                	li	a5,23
    TEST_END();
    80018be8:	00015597          	auipc	a1,0x15
    80018bec:	5c058593          	addi	a1,a1,1472 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018bf0:	00f70763          	beq	a4,a5,80018bfe <store_guest_page_fault_7+0x10c>
    80018bf4:	4401                	li	s0,0
    TEST_END();
    80018bf6:	00015597          	auipc	a1,0x15
    80018bfa:	5c258593          	addi	a1,a1,1474 # 8002e1b8 <__func__.0+0x2d0>
    80018bfe:	00015517          	auipc	a0,0x15
    80018c02:	66250513          	addi	a0,a0,1634 # 8002e260 <__func__.0+0x378>
    80018c06:	025120ef          	jal	8002b42a <printf>
    80018c0a:	4511                	li	a0,4
    80018c0c:	afce80ef          	jal	80000f08 <goto_priv>
    80018c10:	c15e80ef          	jal	80001824 <reset_state>
}
    80018c14:	60e2                	ld	ra,24(sp)
    80018c16:	8522                	mv	a0,s0
    80018c18:	6442                	ld	s0,16(sp)
    80018c1a:	64a2                	ld	s1,8(sp)
    80018c1c:	6105                	addi	sp,sp,32
    80018c1e:	8082                	ret

0000000080018c20 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80018c20:	1101                	addi	sp,sp,-32

    TEST_START();
    80018c22:	00014597          	auipc	a1,0x14
    80018c26:	35658593          	addi	a1,a1,854 # 8002cf78 <__func__.14>
    80018c2a:	00015517          	auipc	a0,0x15
    80018c2e:	59e50513          	addi	a0,a0,1438 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    80018c32:	ec06                	sd	ra,24(sp)
    80018c34:	e822                	sd	s0,16(sp)
    80018c36:	e426                	sd	s1,8(sp)
    TEST_START();
    80018c38:	7f2120ef          	jal	8002b42a <printf>
    80018c3c:	4529                	li	a0,10
    80018c3e:	4da110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018c42:	450d                	li	a0,3
    80018c44:	ac4e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018c48:	999e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018c4c:	d79e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018c50:	b2de70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018c54:	4509                	li	a0,2
    80018c56:	ab2e80ef          	jal	80000f08 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018c5a:	9b2e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018c5e:	000807b7          	lui	a5,0x80
    80018c62:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018c66:	001007b7          	lui	a5,0x100
    80018c6a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018c6e:	7771                	lui	a4,0xffffc
    80018c70:	07b2                	slli	a5,a5,0xc
    80018c72:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018c76:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018c7a:	08200593          	li	a1,130
    80018c7e:	0001b617          	auipc	a2,0x1b
    80018c82:	4f260613          	addi	a2,a2,1266 # 80034170 <__func__.0+0x6288>
    80018c86:	00015517          	auipc	a0,0x15
    80018c8a:	55a50513          	addi	a0,a0,1370 # 8002e1e0 <__func__.0+0x2f8>
    80018c8e:	79c120ef          	jal	8002b42a <printf>
    80018c92:	0003f797          	auipc	a5,0x3f
    80018c96:	37f7c783          	lbu	a5,895(a5) # 80058011 <excpt+0x1>
    80018c9a:	0003f497          	auipc	s1,0x3f
    80018c9e:	37648493          	addi	s1,s1,886 # 80058010 <excpt>
    80018ca2:	00015597          	auipc	a1,0x15
    80018ca6:	51658593          	addi	a1,a1,1302 # 8002e1b8 <__func__.0+0x2d0>
    80018caa:	cf89                	beqz	a5,80018cc4 <store_guest_page_fault_8+0xa4>
    80018cac:	6498                	ld	a4,8(s1)
    80018cae:	47dd                	li	a5,23
    80018cb0:	00015597          	auipc	a1,0x15
    80018cb4:	4f858593          	addi	a1,a1,1272 # 8002e1a8 <__func__.0+0x2c0>
    80018cb8:	00f70663          	beq	a4,a5,80018cc4 <store_guest_page_fault_8+0xa4>
    80018cbc:	00015597          	auipc	a1,0x15
    80018cc0:	4fc58593          	addi	a1,a1,1276 # 8002e1b8 <__func__.0+0x2d0>
    80018cc4:	00015517          	auipc	a0,0x15
    80018cc8:	53450513          	addi	a0,a0,1332 # 8002e1f8 <__func__.0+0x310>
    80018ccc:	75e120ef          	jal	8002b42a <printf>
    80018cd0:	0003f797          	auipc	a5,0x3f
    80018cd4:	3417c783          	lbu	a5,833(a5) # 80058011 <excpt+0x1>
    80018cd8:	c789                	beqz	a5,80018ce2 <store_guest_page_fault_8+0xc2>
    80018cda:	6498                	ld	a4,8(s1)
    80018cdc:	47dd                	li	a5,23
    80018cde:	00f70c63          	beq	a4,a5,80018cf6 <store_guest_page_fault_8+0xd6>
    80018ce2:	00015517          	auipc	a0,0x15
    80018ce6:	51e50513          	addi	a0,a0,1310 # 8002e200 <__func__.0+0x318>
    80018cea:	740120ef          	jal	8002b42a <printf>
    80018cee:	02900513          	li	a0,41
    80018cf2:	426110ef          	jal	8002a118 <putchar>
    80018cf6:	4529                	li	a0,10
    80018cf8:	420110ef          	jal	8002a118 <putchar>
    80018cfc:	0003f417          	auipc	s0,0x3f
    80018d00:	31544403          	lbu	s0,789(s0) # 80058011 <excpt+0x1>
    80018d04:	c409                	beqz	s0,80018d0e <store_guest_page_fault_8+0xee>
    80018d06:	6498                	ld	a4,8(s1)
    80018d08:	47dd                	li	a5,23
    80018d0a:	02f70c63          	beq	a4,a5,80018d42 <store_guest_page_fault_8+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018d0e:	000807b7          	lui	a5,0x80
    80018d12:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018d16:	4401                	li	s0,0

    TEST_END();
    80018d18:	00015597          	auipc	a1,0x15
    80018d1c:	4a058593          	addi	a1,a1,1184 # 8002e1b8 <__func__.0+0x2d0>
    80018d20:	00015517          	auipc	a0,0x15
    80018d24:	54050513          	addi	a0,a0,1344 # 8002e260 <__func__.0+0x378>
    80018d28:	702120ef          	jal	8002b42a <printf>
    80018d2c:	4511                	li	a0,4
    80018d2e:	9dae80ef          	jal	80000f08 <goto_priv>
    80018d32:	af3e80ef          	jal	80001824 <reset_state>
}
    80018d36:	60e2                	ld	ra,24(sp)
    80018d38:	8522                	mv	a0,s0
    80018d3a:	6442                	ld	s0,16(sp)
    80018d3c:	64a2                	ld	s1,8(sp)
    80018d3e:	6105                	addi	sp,sp,32
    80018d40:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018d42:	000807b7          	lui	a5,0x80
    80018d46:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018d4a:	00015597          	auipc	a1,0x15
    80018d4e:	45e58593          	addi	a1,a1,1118 # 8002e1a8 <__func__.0+0x2c0>
    80018d52:	b7f9                	j	80018d20 <store_guest_page_fault_8+0x100>

0000000080018d54 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    80018d54:	1101                	addi	sp,sp,-32

    TEST_START();
    80018d56:	00014597          	auipc	a1,0x14
    80018d5a:	24258593          	addi	a1,a1,578 # 8002cf98 <__func__.13>
    80018d5e:	00015517          	auipc	a0,0x15
    80018d62:	46a50513          	addi	a0,a0,1130 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    80018d66:	ec06                	sd	ra,24(sp)
    80018d68:	e822                	sd	s0,16(sp)
    80018d6a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018d6c:	6be120ef          	jal	8002b42a <printf>
    80018d70:	4529                	li	a0,10
    80018d72:	3a6110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018d76:	450d                	li	a0,3
    80018d78:	990e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018d7c:	865e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018d80:	c45e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018d84:	9f9e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018d88:	4511                	li	a0,4
    80018d8a:	97ee80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018d8e:	000407b7          	lui	a5,0x40
    80018d92:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018d96:	4509                	li	a0,2
    80018d98:	970e80ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018d9c:	870e80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018da0:	37ab77b7          	lui	a5,0x37ab7
    80018da4:	00080737          	lui	a4,0x80
    80018da8:	078a                	slli	a5,a5,0x2
    80018daa:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018dac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018db0:	0736                	slli	a4,a4,0xd
    80018db2:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018db6:	08200593          	li	a1,130
    80018dba:	0001b617          	auipc	a2,0x1b
    80018dbe:	42660613          	addi	a2,a2,1062 # 800341e0 <__func__.0+0x62f8>
    80018dc2:	00015517          	auipc	a0,0x15
    80018dc6:	41e50513          	addi	a0,a0,1054 # 8002e1e0 <__func__.0+0x2f8>
    80018dca:	660120ef          	jal	8002b42a <printf>
    80018dce:	0003f797          	auipc	a5,0x3f
    80018dd2:	2437c783          	lbu	a5,579(a5) # 80058011 <excpt+0x1>
    80018dd6:	0003f497          	auipc	s1,0x3f
    80018dda:	23a48493          	addi	s1,s1,570 # 80058010 <excpt>
    80018dde:	00015597          	auipc	a1,0x15
    80018de2:	3da58593          	addi	a1,a1,986 # 8002e1b8 <__func__.0+0x2d0>
    80018de6:	cf89                	beqz	a5,80018e00 <store_guest_page_fault_9+0xac>
    80018de8:	6498                	ld	a4,8(s1)
    80018dea:	47bd                	li	a5,15
    80018dec:	00015597          	auipc	a1,0x15
    80018df0:	3bc58593          	addi	a1,a1,956 # 8002e1a8 <__func__.0+0x2c0>
    80018df4:	00f70663          	beq	a4,a5,80018e00 <store_guest_page_fault_9+0xac>
    80018df8:	00015597          	auipc	a1,0x15
    80018dfc:	3c058593          	addi	a1,a1,960 # 8002e1b8 <__func__.0+0x2d0>
    80018e00:	00015517          	auipc	a0,0x15
    80018e04:	3f850513          	addi	a0,a0,1016 # 8002e1f8 <__func__.0+0x310>
    80018e08:	622120ef          	jal	8002b42a <printf>
    80018e0c:	0003f797          	auipc	a5,0x3f
    80018e10:	2057c783          	lbu	a5,517(a5) # 80058011 <excpt+0x1>
    80018e14:	c789                	beqz	a5,80018e1e <store_guest_page_fault_9+0xca>
    80018e16:	6498                	ld	a4,8(s1)
    80018e18:	47bd                	li	a5,15
    80018e1a:	00f70c63          	beq	a4,a5,80018e32 <store_guest_page_fault_9+0xde>
    80018e1e:	00015517          	auipc	a0,0x15
    80018e22:	3e250513          	addi	a0,a0,994 # 8002e200 <__func__.0+0x318>
    80018e26:	604120ef          	jal	8002b42a <printf>
    80018e2a:	02900513          	li	a0,41
    80018e2e:	2ea110ef          	jal	8002a118 <putchar>
    80018e32:	4529                	li	a0,10
    80018e34:	2e4110ef          	jal	8002a118 <putchar>
    80018e38:	0003f417          	auipc	s0,0x3f
    80018e3c:	1d944403          	lbu	s0,473(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018e40:	00015597          	auipc	a1,0x15
    80018e44:	37858593          	addi	a1,a1,888 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018e48:	cc11                	beqz	s0,80018e64 <store_guest_page_fault_9+0x110>
    80018e4a:	6498                	ld	a4,8(s1)
    80018e4c:	47bd                	li	a5,15
    TEST_END();
    80018e4e:	00015597          	auipc	a1,0x15
    80018e52:	35a58593          	addi	a1,a1,858 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018e56:	00f70763          	beq	a4,a5,80018e64 <store_guest_page_fault_9+0x110>
    80018e5a:	4401                	li	s0,0
    TEST_END();
    80018e5c:	00015597          	auipc	a1,0x15
    80018e60:	35c58593          	addi	a1,a1,860 # 8002e1b8 <__func__.0+0x2d0>
    80018e64:	00015517          	auipc	a0,0x15
    80018e68:	3fc50513          	addi	a0,a0,1020 # 8002e260 <__func__.0+0x378>
    80018e6c:	5be120ef          	jal	8002b42a <printf>
    80018e70:	4511                	li	a0,4
    80018e72:	896e80ef          	jal	80000f08 <goto_priv>
    80018e76:	9afe80ef          	jal	80001824 <reset_state>
}
    80018e7a:	60e2                	ld	ra,24(sp)
    80018e7c:	8522                	mv	a0,s0
    80018e7e:	6442                	ld	s0,16(sp)
    80018e80:	64a2                	ld	s1,8(sp)
    80018e82:	6105                	addi	sp,sp,32
    80018e84:	8082                	ret

0000000080018e86 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80018e86:	1141                	addi	sp,sp,-16

    TEST_START();
    80018e88:	00014597          	auipc	a1,0x14
    80018e8c:	13058593          	addi	a1,a1,304 # 8002cfb8 <__func__.12>
    80018e90:	00015517          	auipc	a0,0x15
    80018e94:	33850513          	addi	a0,a0,824 # 8002e1c8 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    80018e98:	e406                	sd	ra,8(sp)
    80018e9a:	e022                	sd	s0,0(sp)
    TEST_START();
    80018e9c:	58e120ef          	jal	8002b42a <printf>
    80018ea0:	4529                	li	a0,10
    80018ea2:	276110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018ea6:	450d                	li	a0,3
    80018ea8:	860e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018eac:	f34e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018eb0:	b15e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018eb4:	8c9e70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80018eb8:	4511                	li	a0,4
    80018eba:	84ee80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018ebe:	000407b7          	lui	a5,0x40
    80018ec2:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018ec6:	4509                	li	a0,2
    80018ec8:	840e80ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018ecc:	f41e70ef          	jal	80000e0c <test_setup_except_function>
    80018ed0:	37ab77b7          	lui	a5,0x37ab7
    80018ed4:	00080737          	lui	a4,0x80
    80018ed8:	078a                	slli	a5,a5,0x2
    80018eda:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018edc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018ee0:	0736                	slli	a4,a4,0xd
    80018ee2:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018ee6:	08200593          	li	a1,130
    80018eea:	0001b617          	auipc	a2,0x1b
    80018eee:	88660613          	addi	a2,a2,-1914 # 80033770 <__func__.0+0x5888>
    80018ef2:	00015517          	auipc	a0,0x15
    80018ef6:	2ee50513          	addi	a0,a0,750 # 8002e1e0 <__func__.0+0x2f8>
    80018efa:	530120ef          	jal	8002b42a <printf>
    80018efe:	0003f797          	auipc	a5,0x3f
    80018f02:	1137c783          	lbu	a5,275(a5) # 80058011 <excpt+0x1>
    80018f06:	00015597          	auipc	a1,0x15
    80018f0a:	2a258593          	addi	a1,a1,674 # 8002e1a8 <__func__.0+0x2c0>
    80018f0e:	c789                	beqz	a5,80018f18 <store_guest_page_fault_10+0x92>
    80018f10:	00015597          	auipc	a1,0x15
    80018f14:	2a858593          	addi	a1,a1,680 # 8002e1b8 <__func__.0+0x2d0>
    80018f18:	00015517          	auipc	a0,0x15
    80018f1c:	2e050513          	addi	a0,a0,736 # 8002e1f8 <__func__.0+0x310>
    80018f20:	50a120ef          	jal	8002b42a <printf>
    80018f24:	0003f797          	auipc	a5,0x3f
    80018f28:	0ed7c783          	lbu	a5,237(a5) # 80058011 <excpt+0x1>
    80018f2c:	e7a1                	bnez	a5,80018f74 <store_guest_page_fault_10+0xee>
    80018f2e:	4529                	li	a0,10
    80018f30:	1e8110ef          	jal	8002a118 <putchar>
    80018f34:	0003f797          	auipc	a5,0x3f
    80018f38:	0dd7c783          	lbu	a5,221(a5) # 80058011 <excpt+0x1>
    80018f3c:	e795                	bnez	a5,80018f68 <store_guest_page_fault_10+0xe2>
    80018f3e:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018f40:	00015597          	auipc	a1,0x15
    80018f44:	26858593          	addi	a1,a1,616 # 8002e1a8 <__func__.0+0x2c0>
    80018f48:	00015517          	auipc	a0,0x15
    80018f4c:	31850513          	addi	a0,a0,792 # 8002e260 <__func__.0+0x378>
    80018f50:	4da120ef          	jal	8002b42a <printf>
    80018f54:	4511                	li	a0,4
    80018f56:	fb3e70ef          	jal	80000f08 <goto_priv>
    80018f5a:	8cbe80ef          	jal	80001824 <reset_state>
}
    80018f5e:	60a2                	ld	ra,8(sp)
    80018f60:	8522                	mv	a0,s0
    80018f62:	6402                	ld	s0,0(sp)
    80018f64:	0141                	addi	sp,sp,16
    80018f66:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018f68:	4401                	li	s0,0
    TEST_END();
    80018f6a:	00015597          	auipc	a1,0x15
    80018f6e:	24e58593          	addi	a1,a1,590 # 8002e1b8 <__func__.0+0x2d0>
    80018f72:	bfd9                	j	80018f48 <store_guest_page_fault_10+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018f74:	00015517          	auipc	a0,0x15
    80018f78:	28c50513          	addi	a0,a0,652 # 8002e200 <__func__.0+0x318>
    80018f7c:	4ae120ef          	jal	8002b42a <printf>
    80018f80:	02900513          	li	a0,41
    80018f84:	194110ef          	jal	8002a118 <putchar>
    80018f88:	b75d                	j	80018f2e <store_guest_page_fault_10+0xa8>

0000000080018f8a <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80018f8a:	1101                	addi	sp,sp,-32

    TEST_START();
    80018f8c:	00014597          	auipc	a1,0x14
    80018f90:	04c58593          	addi	a1,a1,76 # 8002cfd8 <__func__.11>
    80018f94:	00015517          	auipc	a0,0x15
    80018f98:	23450513          	addi	a0,a0,564 # 8002e1c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    80018f9c:	ec06                	sd	ra,24(sp)
    80018f9e:	e822                	sd	s0,16(sp)
    80018fa0:	e426                	sd	s1,8(sp)
    80018fa2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018fa4:	486120ef          	jal	8002b42a <printf>
    80018fa8:	4529                	li	a0,10
    80018faa:	16e110ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80018fae:	450d                	li	a0,3
    80018fb0:	f59e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018fb4:	e2ce70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018fb8:	a0de70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018fbc:	fc0e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80018fc0:	4509                	li	a0,2
    80018fc2:	f47e70ef          	jal	80000f08 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018fc6:	e47e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80018fca:	00100737          	lui	a4,0x100
    80018fce:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018fd2:	4785                	li	a5,1
    80018fd4:	0732                	slli	a4,a4,0xc
    80018fd6:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018fda:	08200593          	li	a1,130
    80018fde:	0001b617          	auipc	a2,0x1b
    80018fe2:	23a60613          	addi	a2,a2,570 # 80034218 <__func__.0+0x6330>
    80018fe6:	00015517          	auipc	a0,0x15
    80018fea:	1fa50513          	addi	a0,a0,506 # 8002e1e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80018fee:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018ff2:	438120ef          	jal	8002b42a <printf>
    80018ff6:	0003f797          	auipc	a5,0x3f
    80018ffa:	01b7c783          	lbu	a5,27(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80018ffe:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80019000:	0003f917          	auipc	s2,0x3f
    80019004:	01090913          	addi	s2,s2,16 # 80058010 <excpt>
    80019008:	00015597          	auipc	a1,0x15
    8001900c:	1b058593          	addi	a1,a1,432 # 8002e1b8 <__func__.0+0x2d0>
    80019010:	cf91                	beqz	a5,8001902c <amo_guest_page_fault_1+0xa2>
    80019012:	00893703          	ld	a4,8(s2)
    80019016:	47dd                	li	a5,23
    80019018:	00015597          	auipc	a1,0x15
    8001901c:	19058593          	addi	a1,a1,400 # 8002e1a8 <__func__.0+0x2c0>
    80019020:	00f70663          	beq	a4,a5,8001902c <amo_guest_page_fault_1+0xa2>
    80019024:	00015597          	auipc	a1,0x15
    80019028:	19458593          	addi	a1,a1,404 # 8002e1b8 <__func__.0+0x2d0>
    8001902c:	00015517          	auipc	a0,0x15
    80019030:	1cc50513          	addi	a0,a0,460 # 8002e1f8 <__func__.0+0x310>
    80019034:	3f6120ef          	jal	8002b42a <printf>
    80019038:	0003f797          	auipc	a5,0x3f
    8001903c:	fd97c783          	lbu	a5,-39(a5) # 80058011 <excpt+0x1>
    80019040:	c791                	beqz	a5,8001904c <amo_guest_page_fault_1+0xc2>
    80019042:	00893703          	ld	a4,8(s2)
    80019046:	47dd                	li	a5,23
    80019048:	00f70c63          	beq	a4,a5,80019060 <amo_guest_page_fault_1+0xd6>
    8001904c:	00015517          	auipc	a0,0x15
    80019050:	1b450513          	addi	a0,a0,436 # 8002e200 <__func__.0+0x318>
    80019054:	3d6120ef          	jal	8002b42a <printf>
    80019058:	02900513          	li	a0,41
    8001905c:	0bc110ef          	jal	8002a118 <putchar>
    80019060:	4529                	li	a0,10
    80019062:	0b6110ef          	jal	8002a118 <putchar>
    80019066:	0003f797          	auipc	a5,0x3f
    8001906a:	fab7c783          	lbu	a5,-85(a5) # 80058011 <excpt+0x1>
    8001906e:	4481                	li	s1,0
    80019070:	c791                	beqz	a5,8001907c <amo_guest_page_fault_1+0xf2>
    80019072:	00893483          	ld	s1,8(s2)
    80019076:	14a5                	addi	s1,s1,-23
    80019078:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001907c:	d91e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80019080:	001007b7          	lui	a5,0x100
    80019084:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019088:	8722                	mv	a4,s0
    8001908a:	07b2                	slli	a5,a5,0xc
    8001908c:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019090:	08200593          	li	a1,130
    80019094:	0001b617          	auipc	a2,0x1b
    80019098:	1d460613          	addi	a2,a2,468 # 80034268 <__func__.0+0x6380>
    8001909c:	00015517          	auipc	a0,0x15
    800190a0:	14450513          	addi	a0,a0,324 # 8002e1e0 <__func__.0+0x2f8>
    800190a4:	386120ef          	jal	8002b42a <printf>
    800190a8:	0003f797          	auipc	a5,0x3f
    800190ac:	f697c783          	lbu	a5,-151(a5) # 80058011 <excpt+0x1>
    800190b0:	00015597          	auipc	a1,0x15
    800190b4:	10858593          	addi	a1,a1,264 # 8002e1b8 <__func__.0+0x2d0>
    800190b8:	cf91                	beqz	a5,800190d4 <amo_guest_page_fault_1+0x14a>
    800190ba:	00893703          	ld	a4,8(s2)
    800190be:	47dd                	li	a5,23
    800190c0:	00015597          	auipc	a1,0x15
    800190c4:	0e858593          	addi	a1,a1,232 # 8002e1a8 <__func__.0+0x2c0>
    800190c8:	00f70663          	beq	a4,a5,800190d4 <amo_guest_page_fault_1+0x14a>
    800190cc:	00015597          	auipc	a1,0x15
    800190d0:	0ec58593          	addi	a1,a1,236 # 8002e1b8 <__func__.0+0x2d0>
    800190d4:	00015517          	auipc	a0,0x15
    800190d8:	12450513          	addi	a0,a0,292 # 8002e1f8 <__func__.0+0x310>
    800190dc:	34e120ef          	jal	8002b42a <printf>
    800190e0:	0003f797          	auipc	a5,0x3f
    800190e4:	f317c783          	lbu	a5,-207(a5) # 80058011 <excpt+0x1>
    800190e8:	c791                	beqz	a5,800190f4 <amo_guest_page_fault_1+0x16a>
    800190ea:	00893703          	ld	a4,8(s2)
    800190ee:	47dd                	li	a5,23
    800190f0:	00f70c63          	beq	a4,a5,80019108 <amo_guest_page_fault_1+0x17e>
    800190f4:	00015517          	auipc	a0,0x15
    800190f8:	10c50513          	addi	a0,a0,268 # 8002e200 <__func__.0+0x318>
    800190fc:	32e120ef          	jal	8002b42a <printf>
    80019100:	02900513          	li	a0,41
    80019104:	014110ef          	jal	8002a118 <putchar>
    80019108:	4529                	li	a0,10
    8001910a:	00e110ef          	jal	8002a118 <putchar>
    8001910e:	c09d                	beqz	s1,80019134 <amo_guest_page_fault_1+0x1aa>
    80019110:	0003f417          	auipc	s0,0x3f
    80019114:	f0144403          	lbu	s0,-255(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019118:	00015597          	auipc	a1,0x15
    8001911c:	0a058593          	addi	a1,a1,160 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019120:	cc19                	beqz	s0,8001913e <amo_guest_page_fault_1+0x1b4>
    80019122:	00893703          	ld	a4,8(s2)
    80019126:	47dd                	li	a5,23
    TEST_END();
    80019128:	00015597          	auipc	a1,0x15
    8001912c:	08058593          	addi	a1,a1,128 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019130:	00f70763          	beq	a4,a5,8001913e <amo_guest_page_fault_1+0x1b4>
    80019134:	4401                	li	s0,0
    TEST_END();
    80019136:	00015597          	auipc	a1,0x15
    8001913a:	08258593          	addi	a1,a1,130 # 8002e1b8 <__func__.0+0x2d0>
    8001913e:	00015517          	auipc	a0,0x15
    80019142:	12250513          	addi	a0,a0,290 # 8002e260 <__func__.0+0x378>
    80019146:	2e4120ef          	jal	8002b42a <printf>
    8001914a:	4511                	li	a0,4
    8001914c:	dbde70ef          	jal	80000f08 <goto_priv>
    80019150:	ed4e80ef          	jal	80001824 <reset_state>
}
    80019154:	60e2                	ld	ra,24(sp)
    80019156:	8522                	mv	a0,s0
    80019158:	6442                	ld	s0,16(sp)
    8001915a:	64a2                	ld	s1,8(sp)
    8001915c:	6902                	ld	s2,0(sp)
    8001915e:	6105                	addi	sp,sp,32
    80019160:	8082                	ret

0000000080019162 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    80019162:	1101                	addi	sp,sp,-32

    TEST_START();
    80019164:	00014597          	auipc	a1,0x14
    80019168:	e8c58593          	addi	a1,a1,-372 # 8002cff0 <__func__.10>
    8001916c:	00015517          	auipc	a0,0x15
    80019170:	05c50513          	addi	a0,a0,92 # 8002e1c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    80019174:	ec06                	sd	ra,24(sp)
    80019176:	e822                	sd	s0,16(sp)
    80019178:	e426                	sd	s1,8(sp)
    TEST_START();
    8001917a:	2b0120ef          	jal	8002b42a <printf>
    8001917e:	4529                	li	a0,10
    80019180:	799100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019184:	450d                	li	a0,3
    80019186:	d83e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001918a:	c56e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001918e:	837e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019192:	deae70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80019196:	4509                	li	a0,2
    80019198:	d71e70ef          	jal	80000f08 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001919c:	c71e70ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800191a0:	000807b7          	lui	a5,0x80
    800191a4:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    800191a8:	37ab77b7          	lui	a5,0x37ab7
    800191ac:	00100737          	lui	a4,0x100
    800191b0:	078a                	slli	a5,a5,0x2
    800191b2:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800191b6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800191ba:	0732                	slli	a4,a4,0xc
    800191bc:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191c0:	08200593          	li	a1,130
    800191c4:	0001b617          	auipc	a2,0x1b
    800191c8:	10460613          	addi	a2,a2,260 # 800342c8 <__func__.0+0x63e0>
    800191cc:	00015517          	auipc	a0,0x15
    800191d0:	01450513          	addi	a0,a0,20 # 8002e1e0 <__func__.0+0x2f8>
    800191d4:	256120ef          	jal	8002b42a <printf>
    800191d8:	0003f797          	auipc	a5,0x3f
    800191dc:	e397c783          	lbu	a5,-455(a5) # 80058011 <excpt+0x1>
    800191e0:	0003f497          	auipc	s1,0x3f
    800191e4:	e3048493          	addi	s1,s1,-464 # 80058010 <excpt>
    800191e8:	00015597          	auipc	a1,0x15
    800191ec:	fd058593          	addi	a1,a1,-48 # 8002e1b8 <__func__.0+0x2d0>
    800191f0:	cf89                	beqz	a5,8001920a <amo_guest_page_fault_2+0xa8>
    800191f2:	6498                	ld	a4,8(s1)
    800191f4:	47dd                	li	a5,23
    800191f6:	00015597          	auipc	a1,0x15
    800191fa:	fb258593          	addi	a1,a1,-78 # 8002e1a8 <__func__.0+0x2c0>
    800191fe:	00f70663          	beq	a4,a5,8001920a <amo_guest_page_fault_2+0xa8>
    80019202:	00015597          	auipc	a1,0x15
    80019206:	fb658593          	addi	a1,a1,-74 # 8002e1b8 <__func__.0+0x2d0>
    8001920a:	00015517          	auipc	a0,0x15
    8001920e:	fee50513          	addi	a0,a0,-18 # 8002e1f8 <__func__.0+0x310>
    80019212:	218120ef          	jal	8002b42a <printf>
    80019216:	0003f797          	auipc	a5,0x3f
    8001921a:	dfb7c783          	lbu	a5,-517(a5) # 80058011 <excpt+0x1>
    8001921e:	c789                	beqz	a5,80019228 <amo_guest_page_fault_2+0xc6>
    80019220:	6498                	ld	a4,8(s1)
    80019222:	47dd                	li	a5,23
    80019224:	00f70c63          	beq	a4,a5,8001923c <amo_guest_page_fault_2+0xda>
    80019228:	00015517          	auipc	a0,0x15
    8001922c:	fd850513          	addi	a0,a0,-40 # 8002e200 <__func__.0+0x318>
    80019230:	1fa120ef          	jal	8002b42a <printf>
    80019234:	02900513          	li	a0,41
    80019238:	6e1100ef          	jal	8002a118 <putchar>
    8001923c:	4529                	li	a0,10
    8001923e:	6db100ef          	jal	8002a118 <putchar>
    80019242:	0003f417          	auipc	s0,0x3f
    80019246:	dcf44403          	lbu	s0,-561(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001924a:	00015597          	auipc	a1,0x15
    8001924e:	f6e58593          	addi	a1,a1,-146 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019252:	cc11                	beqz	s0,8001926e <amo_guest_page_fault_2+0x10c>
    80019254:	6498                	ld	a4,8(s1)
    80019256:	47dd                	li	a5,23
    TEST_END();
    80019258:	00015597          	auipc	a1,0x15
    8001925c:	f5058593          	addi	a1,a1,-176 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019260:	00f70763          	beq	a4,a5,8001926e <amo_guest_page_fault_2+0x10c>
    80019264:	4401                	li	s0,0
    TEST_END();
    80019266:	00015597          	auipc	a1,0x15
    8001926a:	f5258593          	addi	a1,a1,-174 # 8002e1b8 <__func__.0+0x2d0>
    8001926e:	00015517          	auipc	a0,0x15
    80019272:	ff250513          	addi	a0,a0,-14 # 8002e260 <__func__.0+0x378>
    80019276:	1b4120ef          	jal	8002b42a <printf>
    8001927a:	4511                	li	a0,4
    8001927c:	c8de70ef          	jal	80000f08 <goto_priv>
    80019280:	da4e80ef          	jal	80001824 <reset_state>
}
    80019284:	60e2                	ld	ra,24(sp)
    80019286:	8522                	mv	a0,s0
    80019288:	6442                	ld	s0,16(sp)
    8001928a:	64a2                	ld	s1,8(sp)
    8001928c:	6105                	addi	sp,sp,32
    8001928e:	8082                	ret

0000000080019290 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80019290:	1101                	addi	sp,sp,-32

    TEST_START();
    80019292:	00014597          	auipc	a1,0x14
    80019296:	d7658593          	addi	a1,a1,-650 # 8002d008 <__func__.9>
    8001929a:	00015517          	auipc	a0,0x15
    8001929e:	f2e50513          	addi	a0,a0,-210 # 8002e1c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    800192a2:	ec06                	sd	ra,24(sp)
    800192a4:	e822                	sd	s0,16(sp)
    800192a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800192a8:	182120ef          	jal	8002b42a <printf>
    800192ac:	4529                	li	a0,10
    800192ae:	66b100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800192b2:	450d                	li	a0,3
    800192b4:	c55e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800192b8:	b28e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800192bc:	f08e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800192c0:	cbce70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    800192c4:	4509                	li	a0,2
    800192c6:	c43e70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800192ca:	b43e70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800192ce:	000807b7          	lui	a5,0x80
    800192d2:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800192d6:	37ab77b7          	lui	a5,0x37ab7
    800192da:	00100737          	lui	a4,0x100
    800192de:	078a                	slli	a5,a5,0x2
    800192e0:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800192e4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800192e8:	0732                	slli	a4,a4,0xc
    800192ea:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800192ee:	08200593          	li	a1,130
    800192f2:	0001b617          	auipc	a2,0x1b
    800192f6:	03e60613          	addi	a2,a2,62 # 80034330 <__func__.0+0x6448>
    800192fa:	00015517          	auipc	a0,0x15
    800192fe:	ee650513          	addi	a0,a0,-282 # 8002e1e0 <__func__.0+0x2f8>
    80019302:	128120ef          	jal	8002b42a <printf>
    80019306:	0003f797          	auipc	a5,0x3f
    8001930a:	d0b7c783          	lbu	a5,-757(a5) # 80058011 <excpt+0x1>
    8001930e:	0003f497          	auipc	s1,0x3f
    80019312:	d0248493          	addi	s1,s1,-766 # 80058010 <excpt>
    80019316:	00015597          	auipc	a1,0x15
    8001931a:	ea258593          	addi	a1,a1,-350 # 8002e1b8 <__func__.0+0x2d0>
    8001931e:	cf89                	beqz	a5,80019338 <amo_guest_page_fault_3+0xa8>
    80019320:	6498                	ld	a4,8(s1)
    80019322:	47dd                	li	a5,23
    80019324:	00015597          	auipc	a1,0x15
    80019328:	e8458593          	addi	a1,a1,-380 # 8002e1a8 <__func__.0+0x2c0>
    8001932c:	00f70663          	beq	a4,a5,80019338 <amo_guest_page_fault_3+0xa8>
    80019330:	00015597          	auipc	a1,0x15
    80019334:	e8858593          	addi	a1,a1,-376 # 8002e1b8 <__func__.0+0x2d0>
    80019338:	00015517          	auipc	a0,0x15
    8001933c:	ec050513          	addi	a0,a0,-320 # 8002e1f8 <__func__.0+0x310>
    80019340:	0ea120ef          	jal	8002b42a <printf>
    80019344:	0003f797          	auipc	a5,0x3f
    80019348:	ccd7c783          	lbu	a5,-819(a5) # 80058011 <excpt+0x1>
    8001934c:	c789                	beqz	a5,80019356 <amo_guest_page_fault_3+0xc6>
    8001934e:	6498                	ld	a4,8(s1)
    80019350:	47dd                	li	a5,23
    80019352:	00f70c63          	beq	a4,a5,8001936a <amo_guest_page_fault_3+0xda>
    80019356:	00015517          	auipc	a0,0x15
    8001935a:	eaa50513          	addi	a0,a0,-342 # 8002e200 <__func__.0+0x318>
    8001935e:	0cc120ef          	jal	8002b42a <printf>
    80019362:	02900513          	li	a0,41
    80019366:	5b3100ef          	jal	8002a118 <putchar>
    8001936a:	4529                	li	a0,10
    8001936c:	5ad100ef          	jal	8002a118 <putchar>
    80019370:	0003f417          	auipc	s0,0x3f
    80019374:	ca144403          	lbu	s0,-863(s0) # 80058011 <excpt+0x1>
    80019378:	c409                	beqz	s0,80019382 <amo_guest_page_fault_3+0xf2>
    8001937a:	6498                	ld	a4,8(s1)
    8001937c:	47dd                	li	a5,23
    8001937e:	02f70c63          	beq	a4,a5,800193b6 <amo_guest_page_fault_3+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019382:	000807b7          	lui	a5,0x80
    80019386:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001938a:	4401                	li	s0,0

    TEST_END();
    8001938c:	00015597          	auipc	a1,0x15
    80019390:	e2c58593          	addi	a1,a1,-468 # 8002e1b8 <__func__.0+0x2d0>
    80019394:	00015517          	auipc	a0,0x15
    80019398:	ecc50513          	addi	a0,a0,-308 # 8002e260 <__func__.0+0x378>
    8001939c:	08e120ef          	jal	8002b42a <printf>
    800193a0:	4511                	li	a0,4
    800193a2:	b67e70ef          	jal	80000f08 <goto_priv>
    800193a6:	c7ee80ef          	jal	80001824 <reset_state>
}
    800193aa:	60e2                	ld	ra,24(sp)
    800193ac:	8522                	mv	a0,s0
    800193ae:	6442                	ld	s0,16(sp)
    800193b0:	64a2                	ld	s1,8(sp)
    800193b2:	6105                	addi	sp,sp,32
    800193b4:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800193b6:	000807b7          	lui	a5,0x80
    800193ba:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800193be:	00015597          	auipc	a1,0x15
    800193c2:	dea58593          	addi	a1,a1,-534 # 8002e1a8 <__func__.0+0x2c0>
    800193c6:	b7f9                	j	80019394 <amo_guest_page_fault_3+0x104>

00000000800193c8 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    800193c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800193ca:	00014597          	auipc	a1,0x14
    800193ce:	c5658593          	addi	a1,a1,-938 # 8002d020 <__func__.8>
    800193d2:	00015517          	auipc	a0,0x15
    800193d6:	df650513          	addi	a0,a0,-522 # 8002e1c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    800193da:	ec06                	sd	ra,24(sp)
    800193dc:	e822                	sd	s0,16(sp)
    800193de:	e426                	sd	s1,8(sp)
    TEST_START();
    800193e0:	04a120ef          	jal	8002b42a <printf>
    800193e4:	4529                	li	a0,10
    800193e6:	533100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    800193ea:	450d                	li	a0,3
    800193ec:	b1de70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800193f0:	9f0e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800193f4:	dd0e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800193f8:	b84e70ef          	jal	8000077c <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    800193fc:	4511                	li	a0,4
    800193fe:	b0be70ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80019402:	000407b7          	lui	a5,0x40
    80019406:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001940a:	450d                	li	a0,3
    8001940c:	afde70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019410:	9fde70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80019414:	37ab77b7          	lui	a5,0x37ab7
    80019418:	00080737          	lui	a4,0x80
    8001941c:	078a                	slli	a5,a5,0x2
    8001941e:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80019420:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019424:	0736                	slli	a4,a4,0xd
    80019426:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001942a:	08200593          	li	a1,130
    8001942e:	0001b617          	auipc	a2,0x1b
    80019432:	f7260613          	addi	a2,a2,-142 # 800343a0 <__func__.0+0x64b8>
    80019436:	00015517          	auipc	a0,0x15
    8001943a:	daa50513          	addi	a0,a0,-598 # 8002e1e0 <__func__.0+0x2f8>
    8001943e:	7ed110ef          	jal	8002b42a <printf>
    80019442:	0003f797          	auipc	a5,0x3f
    80019446:	bcf7c783          	lbu	a5,-1073(a5) # 80058011 <excpt+0x1>
    8001944a:	0003f497          	auipc	s1,0x3f
    8001944e:	bc648493          	addi	s1,s1,-1082 # 80058010 <excpt>
    80019452:	00015597          	auipc	a1,0x15
    80019456:	d6658593          	addi	a1,a1,-666 # 8002e1b8 <__func__.0+0x2d0>
    8001945a:	cf89                	beqz	a5,80019474 <amo_guest_page_fault_4+0xac>
    8001945c:	6498                	ld	a4,8(s1)
    8001945e:	47bd                	li	a5,15
    80019460:	00015597          	auipc	a1,0x15
    80019464:	d4858593          	addi	a1,a1,-696 # 8002e1a8 <__func__.0+0x2c0>
    80019468:	00f70663          	beq	a4,a5,80019474 <amo_guest_page_fault_4+0xac>
    8001946c:	00015597          	auipc	a1,0x15
    80019470:	d4c58593          	addi	a1,a1,-692 # 8002e1b8 <__func__.0+0x2d0>
    80019474:	00015517          	auipc	a0,0x15
    80019478:	d8450513          	addi	a0,a0,-636 # 8002e1f8 <__func__.0+0x310>
    8001947c:	7af110ef          	jal	8002b42a <printf>
    80019480:	0003f797          	auipc	a5,0x3f
    80019484:	b917c783          	lbu	a5,-1135(a5) # 80058011 <excpt+0x1>
    80019488:	c789                	beqz	a5,80019492 <amo_guest_page_fault_4+0xca>
    8001948a:	6498                	ld	a4,8(s1)
    8001948c:	47bd                	li	a5,15
    8001948e:	00f70c63          	beq	a4,a5,800194a6 <amo_guest_page_fault_4+0xde>
    80019492:	00015517          	auipc	a0,0x15
    80019496:	d6e50513          	addi	a0,a0,-658 # 8002e200 <__func__.0+0x318>
    8001949a:	791110ef          	jal	8002b42a <printf>
    8001949e:	02900513          	li	a0,41
    800194a2:	477100ef          	jal	8002a118 <putchar>
    800194a6:	4529                	li	a0,10
    800194a8:	471100ef          	jal	8002a118 <putchar>
    800194ac:	0003f417          	auipc	s0,0x3f
    800194b0:	b6544403          	lbu	s0,-1179(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800194b4:	00015597          	auipc	a1,0x15
    800194b8:	d0458593          	addi	a1,a1,-764 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800194bc:	cc11                	beqz	s0,800194d8 <amo_guest_page_fault_4+0x110>
    800194be:	6498                	ld	a4,8(s1)
    800194c0:	47bd                	li	a5,15
    TEST_END();
    800194c2:	00015597          	auipc	a1,0x15
    800194c6:	ce658593          	addi	a1,a1,-794 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800194ca:	00f70763          	beq	a4,a5,800194d8 <amo_guest_page_fault_4+0x110>
    800194ce:	4401                	li	s0,0
    TEST_END();
    800194d0:	00015597          	auipc	a1,0x15
    800194d4:	ce858593          	addi	a1,a1,-792 # 8002e1b8 <__func__.0+0x2d0>
    800194d8:	00015517          	auipc	a0,0x15
    800194dc:	d8850513          	addi	a0,a0,-632 # 8002e260 <__func__.0+0x378>
    800194e0:	74b110ef          	jal	8002b42a <printf>
    800194e4:	4511                	li	a0,4
    800194e6:	a23e70ef          	jal	80000f08 <goto_priv>
    800194ea:	b3ae80ef          	jal	80001824 <reset_state>
}
    800194ee:	60e2                	ld	ra,24(sp)
    800194f0:	8522                	mv	a0,s0
    800194f2:	6442                	ld	s0,16(sp)
    800194f4:	64a2                	ld	s1,8(sp)
    800194f6:	6105                	addi	sp,sp,32
    800194f8:	8082                	ret

00000000800194fa <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    800194fa:	1141                	addi	sp,sp,-16

    TEST_START();
    800194fc:	00014597          	auipc	a1,0x14
    80019500:	b3c58593          	addi	a1,a1,-1220 # 8002d038 <__func__.7>
    80019504:	00015517          	auipc	a0,0x15
    80019508:	cc450513          	addi	a0,a0,-828 # 8002e1c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    8001950c:	e406                	sd	ra,8(sp)
    8001950e:	e022                	sd	s0,0(sp)
    TEST_START();
    80019510:	71b110ef          	jal	8002b42a <printf>
    80019514:	4529                	li	a0,10
    80019516:	403100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001951a:	450d                	li	a0,3
    8001951c:	9ede70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019520:	8c0e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019524:	ca0e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019528:	a54e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    8001952c:	4511                	li	a0,4
    8001952e:	9dbe70ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80019532:	000407b7          	lui	a5,0x40
    80019536:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001953a:	450d                	li	a0,3
    8001953c:	9cde70ef          	jal	80000f08 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019540:	8cde70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80019544:	37ab77b7          	lui	a5,0x37ab7
    80019548:	00080737          	lui	a4,0x80
    8001954c:	078a                	slli	a5,a5,0x2
    8001954e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80019550:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019554:	0736                	slli	a4,a4,0xd
    80019556:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001955a:	08200593          	li	a1,130
    8001955e:	0001b617          	auipc	a2,0x1b
    80019562:	e8260613          	addi	a2,a2,-382 # 800343e0 <__func__.0+0x64f8>
    80019566:	00015517          	auipc	a0,0x15
    8001956a:	c7a50513          	addi	a0,a0,-902 # 8002e1e0 <__func__.0+0x2f8>
    8001956e:	6bd110ef          	jal	8002b42a <printf>
    80019572:	0003f797          	auipc	a5,0x3f
    80019576:	a9f7c783          	lbu	a5,-1377(a5) # 80058011 <excpt+0x1>
    8001957a:	00015597          	auipc	a1,0x15
    8001957e:	c2e58593          	addi	a1,a1,-978 # 8002e1a8 <__func__.0+0x2c0>
    80019582:	c789                	beqz	a5,8001958c <amo_guest_page_fault_5+0x92>
    80019584:	00015597          	auipc	a1,0x15
    80019588:	c3458593          	addi	a1,a1,-972 # 8002e1b8 <__func__.0+0x2d0>
    8001958c:	00015517          	auipc	a0,0x15
    80019590:	c6c50513          	addi	a0,a0,-916 # 8002e1f8 <__func__.0+0x310>
    80019594:	697110ef          	jal	8002b42a <printf>
    80019598:	0003f797          	auipc	a5,0x3f
    8001959c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800195a0:	e7a1                	bnez	a5,800195e8 <amo_guest_page_fault_5+0xee>
    800195a2:	4529                	li	a0,10
    800195a4:	375100ef          	jal	8002a118 <putchar>
    800195a8:	0003f797          	auipc	a5,0x3f
    800195ac:	a697c783          	lbu	a5,-1431(a5) # 80058011 <excpt+0x1>
    800195b0:	e795                	bnez	a5,800195dc <amo_guest_page_fault_5+0xe2>
    800195b2:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800195b4:	00015597          	auipc	a1,0x15
    800195b8:	bf458593          	addi	a1,a1,-1036 # 8002e1a8 <__func__.0+0x2c0>
    800195bc:	00015517          	auipc	a0,0x15
    800195c0:	ca450513          	addi	a0,a0,-860 # 8002e260 <__func__.0+0x378>
    800195c4:	667110ef          	jal	8002b42a <printf>
    800195c8:	4511                	li	a0,4
    800195ca:	93fe70ef          	jal	80000f08 <goto_priv>
    800195ce:	a56e80ef          	jal	80001824 <reset_state>
}
    800195d2:	60a2                	ld	ra,8(sp)
    800195d4:	8522                	mv	a0,s0
    800195d6:	6402                	ld	s0,0(sp)
    800195d8:	0141                	addi	sp,sp,16
    800195da:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800195dc:	4401                	li	s0,0
    TEST_END();
    800195de:	00015597          	auipc	a1,0x15
    800195e2:	bda58593          	addi	a1,a1,-1062 # 8002e1b8 <__func__.0+0x2d0>
    800195e6:	bfd9                	j	800195bc <amo_guest_page_fault_5+0xc2>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800195e8:	00015517          	auipc	a0,0x15
    800195ec:	c1850513          	addi	a0,a0,-1000 # 8002e200 <__func__.0+0x318>
    800195f0:	63b110ef          	jal	8002b42a <printf>
    800195f4:	02900513          	li	a0,41
    800195f8:	321100ef          	jal	8002a118 <putchar>
    800195fc:	b75d                	j	800195a2 <amo_guest_page_fault_5+0xa8>

00000000800195fe <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    800195fe:	1101                	addi	sp,sp,-32

    TEST_START();
    80019600:	00014597          	auipc	a1,0x14
    80019604:	a5058593          	addi	a1,a1,-1456 # 8002d050 <__func__.6>
    80019608:	00015517          	auipc	a0,0x15
    8001960c:	bc050513          	addi	a0,a0,-1088 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    80019610:	ec06                	sd	ra,24(sp)
    80019612:	e822                	sd	s0,16(sp)
    80019614:	e426                	sd	s1,8(sp)
    TEST_START();
    80019616:	615110ef          	jal	8002b42a <printf>
    8001961a:	4529                	li	a0,10
    8001961c:	2fd100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019620:	450d                	li	a0,3
    80019622:	8e7e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019626:	fbbe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001962a:	b9ae70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001962e:	94ee70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019632:	4509                	li	a0,2
    80019634:	8d5e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    80019638:	fd4e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    8001963c:	001007b7          	lui	a5,0x100
    80019640:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019644:	07b2                	slli	a5,a5,0xc
    80019646:	0003f417          	auipc	s0,0x3f
    8001964a:	9ca40413          	addi	s0,s0,-1590 # 80058010 <excpt>
    8001964e:	00000297          	auipc	t0,0x0
    80019652:	00c28293          	addi	t0,t0,12 # 8001965a <instruction_guest_page_fault_1+0x5c>
    80019656:	02543c23          	sd	t0,56(s0)
    8001965a:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001965c:	08200593          	li	a1,130
    80019660:	0001b617          	auipc	a2,0x1b
    80019664:	dc060613          	addi	a2,a2,-576 # 80034420 <__func__.0+0x6538>
    80019668:	00015517          	auipc	a0,0x15
    8001966c:	b7850513          	addi	a0,a0,-1160 # 8002e1e0 <__func__.0+0x2f8>
    80019670:	5bb110ef          	jal	8002b42a <printf>
    80019674:	0003f797          	auipc	a5,0x3f
    80019678:	99d7c783          	lbu	a5,-1635(a5) # 80058011 <excpt+0x1>
    8001967c:	00015597          	auipc	a1,0x15
    80019680:	b3c58593          	addi	a1,a1,-1220 # 8002e1b8 <__func__.0+0x2d0>
    80019684:	cf89                	beqz	a5,8001969e <instruction_guest_page_fault_1+0xa0>
    80019686:	6418                	ld	a4,8(s0)
    80019688:	47d1                	li	a5,20
    8001968a:	00015597          	auipc	a1,0x15
    8001968e:	b1e58593          	addi	a1,a1,-1250 # 8002e1a8 <__func__.0+0x2c0>
    80019692:	00f70663          	beq	a4,a5,8001969e <instruction_guest_page_fault_1+0xa0>
    80019696:	00015597          	auipc	a1,0x15
    8001969a:	b2258593          	addi	a1,a1,-1246 # 8002e1b8 <__func__.0+0x2d0>
    8001969e:	00015517          	auipc	a0,0x15
    800196a2:	b5a50513          	addi	a0,a0,-1190 # 8002e1f8 <__func__.0+0x310>
    800196a6:	585110ef          	jal	8002b42a <printf>
    800196aa:	0003f797          	auipc	a5,0x3f
    800196ae:	9677c783          	lbu	a5,-1689(a5) # 80058011 <excpt+0x1>
    800196b2:	c789                	beqz	a5,800196bc <instruction_guest_page_fault_1+0xbe>
    800196b4:	6418                	ld	a4,8(s0)
    800196b6:	47d1                	li	a5,20
    800196b8:	00f70c63          	beq	a4,a5,800196d0 <instruction_guest_page_fault_1+0xd2>
    800196bc:	00015517          	auipc	a0,0x15
    800196c0:	b4450513          	addi	a0,a0,-1212 # 8002e200 <__func__.0+0x318>
    800196c4:	567110ef          	jal	8002b42a <printf>
    800196c8:	02900513          	li	a0,41
    800196cc:	24d100ef          	jal	8002a118 <putchar>
    800196d0:	4529                	li	a0,10
    800196d2:	247100ef          	jal	8002a118 <putchar>
    800196d6:	0003f497          	auipc	s1,0x3f
    800196da:	93b4c483          	lbu	s1,-1733(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800196de:	00015597          	auipc	a1,0x15
    800196e2:	ada58593          	addi	a1,a1,-1318 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800196e6:	cc91                	beqz	s1,80019702 <instruction_guest_page_fault_1+0x104>
    800196e8:	6418                	ld	a4,8(s0)
    800196ea:	47d1                	li	a5,20
    TEST_END();
    800196ec:	00015597          	auipc	a1,0x15
    800196f0:	abc58593          	addi	a1,a1,-1348 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800196f4:	00f70763          	beq	a4,a5,80019702 <instruction_guest_page_fault_1+0x104>
    800196f8:	4481                	li	s1,0
    TEST_END();
    800196fa:	00015597          	auipc	a1,0x15
    800196fe:	abe58593          	addi	a1,a1,-1346 # 8002e1b8 <__func__.0+0x2d0>
    80019702:	00015517          	auipc	a0,0x15
    80019706:	b5e50513          	addi	a0,a0,-1186 # 8002e260 <__func__.0+0x378>
    8001970a:	521110ef          	jal	8002b42a <printf>
    8001970e:	4511                	li	a0,4
    80019710:	ff8e70ef          	jal	80000f08 <goto_priv>
    80019714:	910e80ef          	jal	80001824 <reset_state>

}
    80019718:	60e2                	ld	ra,24(sp)
    8001971a:	6442                	ld	s0,16(sp)
    8001971c:	8526                	mv	a0,s1
    8001971e:	64a2                	ld	s1,8(sp)
    80019720:	6105                	addi	sp,sp,32
    80019722:	8082                	ret

0000000080019724 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    80019724:	1101                	addi	sp,sp,-32

    TEST_START();
    80019726:	00014597          	auipc	a1,0x14
    8001972a:	94a58593          	addi	a1,a1,-1718 # 8002d070 <__func__.5>
    8001972e:	00015517          	auipc	a0,0x15
    80019732:	a9a50513          	addi	a0,a0,-1382 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    80019736:	ec06                	sd	ra,24(sp)
    80019738:	e822                	sd	s0,16(sp)
    8001973a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001973c:	4ef110ef          	jal	8002b42a <printf>
    80019740:	4529                	li	a0,10
    80019742:	1d7100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019746:	450d                	li	a0,3
    80019748:	fc0e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001974c:	e95e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019750:	a74e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019754:	828e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019758:	4509                	li	a0,2
    8001975a:	faee70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001975e:	eaee70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019762:	400137b7          	lui	a5,0x40013
    80019766:	078a                	slli	a5,a5,0x2
    80019768:	0003f417          	auipc	s0,0x3f
    8001976c:	8a840413          	addi	s0,s0,-1880 # 80058010 <excpt>
    80019770:	00000297          	auipc	t0,0x0
    80019774:	00c28293          	addi	t0,t0,12 # 8001977c <instruction_guest_page_fault_2+0x58>
    80019778:	02543c23          	sd	t0,56(s0)
    8001977c:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001977e:	08200593          	li	a1,130
    80019782:	0001b617          	auipc	a2,0x1b
    80019786:	cfe60613          	addi	a2,a2,-770 # 80034480 <__func__.0+0x6598>
    8001978a:	00015517          	auipc	a0,0x15
    8001978e:	a5650513          	addi	a0,a0,-1450 # 8002e1e0 <__func__.0+0x2f8>
    80019792:	499110ef          	jal	8002b42a <printf>
    80019796:	0003f797          	auipc	a5,0x3f
    8001979a:	87b7c783          	lbu	a5,-1925(a5) # 80058011 <excpt+0x1>
    8001979e:	00015597          	auipc	a1,0x15
    800197a2:	a1a58593          	addi	a1,a1,-1510 # 8002e1b8 <__func__.0+0x2d0>
    800197a6:	cf89                	beqz	a5,800197c0 <instruction_guest_page_fault_2+0x9c>
    800197a8:	6418                	ld	a4,8(s0)
    800197aa:	47d1                	li	a5,20
    800197ac:	00015597          	auipc	a1,0x15
    800197b0:	9fc58593          	addi	a1,a1,-1540 # 8002e1a8 <__func__.0+0x2c0>
    800197b4:	00f70663          	beq	a4,a5,800197c0 <instruction_guest_page_fault_2+0x9c>
    800197b8:	00015597          	auipc	a1,0x15
    800197bc:	a0058593          	addi	a1,a1,-1536 # 8002e1b8 <__func__.0+0x2d0>
    800197c0:	00015517          	auipc	a0,0x15
    800197c4:	a3850513          	addi	a0,a0,-1480 # 8002e1f8 <__func__.0+0x310>
    800197c8:	463110ef          	jal	8002b42a <printf>
    800197cc:	0003f797          	auipc	a5,0x3f
    800197d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    800197d4:	c789                	beqz	a5,800197de <instruction_guest_page_fault_2+0xba>
    800197d6:	6418                	ld	a4,8(s0)
    800197d8:	47d1                	li	a5,20
    800197da:	00f70c63          	beq	a4,a5,800197f2 <instruction_guest_page_fault_2+0xce>
    800197de:	00015517          	auipc	a0,0x15
    800197e2:	a2250513          	addi	a0,a0,-1502 # 8002e200 <__func__.0+0x318>
    800197e6:	445110ef          	jal	8002b42a <printf>
    800197ea:	02900513          	li	a0,41
    800197ee:	12b100ef          	jal	8002a118 <putchar>
    800197f2:	4529                	li	a0,10
    800197f4:	125100ef          	jal	8002a118 <putchar>
    800197f8:	0003f497          	auipc	s1,0x3f
    800197fc:	8194c483          	lbu	s1,-2023(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019800:	00015597          	auipc	a1,0x15
    80019804:	9b858593          	addi	a1,a1,-1608 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019808:	cc91                	beqz	s1,80019824 <instruction_guest_page_fault_2+0x100>
    8001980a:	6418                	ld	a4,8(s0)
    8001980c:	47d1                	li	a5,20
    TEST_END();
    8001980e:	00015597          	auipc	a1,0x15
    80019812:	99a58593          	addi	a1,a1,-1638 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019816:	00f70763          	beq	a4,a5,80019824 <instruction_guest_page_fault_2+0x100>
    8001981a:	4481                	li	s1,0
    TEST_END();
    8001981c:	00015597          	auipc	a1,0x15
    80019820:	99c58593          	addi	a1,a1,-1636 # 8002e1b8 <__func__.0+0x2d0>
    80019824:	00015517          	auipc	a0,0x15
    80019828:	a3c50513          	addi	a0,a0,-1476 # 8002e260 <__func__.0+0x378>
    8001982c:	3ff110ef          	jal	8002b42a <printf>
    80019830:	4511                	li	a0,4
    80019832:	ed6e70ef          	jal	80000f08 <goto_priv>
    80019836:	fefe70ef          	jal	80001824 <reset_state>
}
    8001983a:	60e2                	ld	ra,24(sp)
    8001983c:	6442                	ld	s0,16(sp)
    8001983e:	8526                	mv	a0,s1
    80019840:	64a2                	ld	s1,8(sp)
    80019842:	6105                	addi	sp,sp,32
    80019844:	8082                	ret

0000000080019846 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    80019846:	1101                	addi	sp,sp,-32

    TEST_START();
    80019848:	00014597          	auipc	a1,0x14
    8001984c:	84858593          	addi	a1,a1,-1976 # 8002d090 <__func__.4>
    80019850:	00015517          	auipc	a0,0x15
    80019854:	97850513          	addi	a0,a0,-1672 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    80019858:	ec06                	sd	ra,24(sp)
    8001985a:	e822                	sd	s0,16(sp)
    8001985c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001985e:	3cd110ef          	jal	8002b42a <printf>
    80019862:	4529                	li	a0,10
    80019864:	0b5100ef          	jal	8002a118 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    80019868:	000407b7          	lui	a5,0x40
    8001986c:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80019870:	450d                	li	a0,3
    80019872:	e96e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019876:	d6be60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001987a:	94ae70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001987e:	effe60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019882:	4509                	li	a0,2
    80019884:	e84e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019888:	d84e70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001988c:	000807b7          	lui	a5,0x80
    80019890:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80019892:	07b6                	slli	a5,a5,0xd
    80019894:	0003e417          	auipc	s0,0x3e
    80019898:	77c40413          	addi	s0,s0,1916 # 80058010 <excpt>
    8001989c:	00000297          	auipc	t0,0x0
    800198a0:	00c28293          	addi	t0,t0,12 # 800198a8 <instruction_guest_page_fault_3+0x62>
    800198a4:	02543c23          	sd	t0,56(s0)
    800198a8:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800198aa:	08200593          	li	a1,130
    800198ae:	0001b617          	auipc	a2,0x1b
    800198b2:	c3260613          	addi	a2,a2,-974 # 800344e0 <__func__.0+0x65f8>
    800198b6:	00015517          	auipc	a0,0x15
    800198ba:	92a50513          	addi	a0,a0,-1750 # 8002e1e0 <__func__.0+0x2f8>
    800198be:	36d110ef          	jal	8002b42a <printf>
    800198c2:	0003e797          	auipc	a5,0x3e
    800198c6:	74f7c783          	lbu	a5,1871(a5) # 80058011 <excpt+0x1>
    800198ca:	00015597          	auipc	a1,0x15
    800198ce:	8ee58593          	addi	a1,a1,-1810 # 8002e1b8 <__func__.0+0x2d0>
    800198d2:	cf89                	beqz	a5,800198ec <instruction_guest_page_fault_3+0xa6>
    800198d4:	6418                	ld	a4,8(s0)
    800198d6:	47b1                	li	a5,12
    800198d8:	00015597          	auipc	a1,0x15
    800198dc:	8d058593          	addi	a1,a1,-1840 # 8002e1a8 <__func__.0+0x2c0>
    800198e0:	00f70663          	beq	a4,a5,800198ec <instruction_guest_page_fault_3+0xa6>
    800198e4:	00015597          	auipc	a1,0x15
    800198e8:	8d458593          	addi	a1,a1,-1836 # 8002e1b8 <__func__.0+0x2d0>
    800198ec:	00015517          	auipc	a0,0x15
    800198f0:	90c50513          	addi	a0,a0,-1780 # 8002e1f8 <__func__.0+0x310>
    800198f4:	337110ef          	jal	8002b42a <printf>
    800198f8:	0003e797          	auipc	a5,0x3e
    800198fc:	7197c783          	lbu	a5,1817(a5) # 80058011 <excpt+0x1>
    80019900:	c789                	beqz	a5,8001990a <instruction_guest_page_fault_3+0xc4>
    80019902:	6418                	ld	a4,8(s0)
    80019904:	47b1                	li	a5,12
    80019906:	00f70c63          	beq	a4,a5,8001991e <instruction_guest_page_fault_3+0xd8>
    8001990a:	00015517          	auipc	a0,0x15
    8001990e:	8f650513          	addi	a0,a0,-1802 # 8002e200 <__func__.0+0x318>
    80019912:	319110ef          	jal	8002b42a <printf>
    80019916:	02900513          	li	a0,41
    8001991a:	7fe100ef          	jal	8002a118 <putchar>
    8001991e:	4529                	li	a0,10
    80019920:	7f8100ef          	jal	8002a118 <putchar>
    80019924:	0003e497          	auipc	s1,0x3e
    80019928:	6ed4c483          	lbu	s1,1773(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001992c:	00015597          	auipc	a1,0x15
    80019930:	88c58593          	addi	a1,a1,-1908 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    80019934:	cc91                	beqz	s1,80019950 <instruction_guest_page_fault_3+0x10a>
    80019936:	6418                	ld	a4,8(s0)
    80019938:	47b1                	li	a5,12
    TEST_END();
    8001993a:	00015597          	auipc	a1,0x15
    8001993e:	86e58593          	addi	a1,a1,-1938 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    80019942:	00f70763          	beq	a4,a5,80019950 <instruction_guest_page_fault_3+0x10a>
    80019946:	4481                	li	s1,0
    TEST_END();
    80019948:	00015597          	auipc	a1,0x15
    8001994c:	87058593          	addi	a1,a1,-1936 # 8002e1b8 <__func__.0+0x2d0>
    80019950:	00015517          	auipc	a0,0x15
    80019954:	91050513          	addi	a0,a0,-1776 # 8002e260 <__func__.0+0x378>
    80019958:	2d3110ef          	jal	8002b42a <printf>
    8001995c:	4511                	li	a0,4
    8001995e:	daae70ef          	jal	80000f08 <goto_priv>
    80019962:	ec3e70ef          	jal	80001824 <reset_state>
}
    80019966:	60e2                	ld	ra,24(sp)
    80019968:	6442                	ld	s0,16(sp)
    8001996a:	8526                	mv	a0,s1
    8001996c:	64a2                	ld	s1,8(sp)
    8001996e:	6105                	addi	sp,sp,32
    80019970:	8082                	ret

0000000080019972 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    80019972:	1101                	addi	sp,sp,-32

    TEST_START();
    80019974:	00013597          	auipc	a1,0x13
    80019978:	73c58593          	addi	a1,a1,1852 # 8002d0b0 <__func__.3>
    8001997c:	00015517          	auipc	a0,0x15
    80019980:	84c50513          	addi	a0,a0,-1972 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    80019984:	ec06                	sd	ra,24(sp)
    80019986:	e822                	sd	s0,16(sp)
    80019988:	e426                	sd	s1,8(sp)
    TEST_START();
    8001998a:	2a1110ef          	jal	8002b42a <printf>
    8001998e:	4529                	li	a0,10
    80019990:	788100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019994:	450d                	li	a0,3
    80019996:	d72e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001999a:	c47e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001999e:	826e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800199a2:	ddbe60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    800199a6:	4511                	li	a0,4
    800199a8:	d60e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800199ac:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    800199b0:	4509                	li	a0,2
    800199b2:	d56e70ef          	jal	80000f08 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    800199b6:	c56e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(addr); 
    800199ba:	000807b7          	lui	a5,0x80
    800199be:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    800199c0:	07b6                	slli	a5,a5,0xd
    800199c2:	0003e417          	auipc	s0,0x3e
    800199c6:	64e40413          	addi	s0,s0,1614 # 80058010 <excpt>
    800199ca:	00000297          	auipc	t0,0x0
    800199ce:	00c28293          	addi	t0,t0,12 # 800199d6 <instruction_guest_page_fault_4+0x64>
    800199d2:	02543c23          	sd	t0,56(s0)
    800199d6:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    800199d8:	640c                	ld	a1,8(s0)
    800199da:	00015517          	auipc	a0,0x15
    800199de:	36650513          	addi	a0,a0,870 # 8002ed40 <__func__.0+0xe58>
    800199e2:	249110ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.triggered);
    800199e6:	0003e597          	auipc	a1,0x3e
    800199ea:	62b5c583          	lbu	a1,1579(a1) # 80058011 <excpt+0x1>
    800199ee:	00015517          	auipc	a0,0x15
    800199f2:	35250513          	addi	a0,a0,850 # 8002ed40 <__func__.0+0xe58>
    800199f6:	235110ef          	jal	8002b42a <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800199fa:	08200593          	li	a1,130
    800199fe:	0001b617          	auipc	a2,0x1b
    80019a02:	b2a60613          	addi	a2,a2,-1238 # 80034528 <__func__.0+0x6640>
    80019a06:	00014517          	auipc	a0,0x14
    80019a0a:	7da50513          	addi	a0,a0,2010 # 8002e1e0 <__func__.0+0x2f8>
    80019a0e:	21d110ef          	jal	8002b42a <printf>
    80019a12:	0003e797          	auipc	a5,0x3e
    80019a16:	5ff7c783          	lbu	a5,1535(a5) # 80058011 <excpt+0x1>
    80019a1a:	00014597          	auipc	a1,0x14
    80019a1e:	79e58593          	addi	a1,a1,1950 # 8002e1b8 <__func__.0+0x2d0>
    80019a22:	cf89                	beqz	a5,80019a3c <instruction_guest_page_fault_4+0xca>
    80019a24:	6418                	ld	a4,8(s0)
    80019a26:	47d1                	li	a5,20
    80019a28:	00014597          	auipc	a1,0x14
    80019a2c:	78058593          	addi	a1,a1,1920 # 8002e1a8 <__func__.0+0x2c0>
    80019a30:	00f70663          	beq	a4,a5,80019a3c <instruction_guest_page_fault_4+0xca>
    80019a34:	00014597          	auipc	a1,0x14
    80019a38:	78458593          	addi	a1,a1,1924 # 8002e1b8 <__func__.0+0x2d0>
    80019a3c:	00014517          	auipc	a0,0x14
    80019a40:	7bc50513          	addi	a0,a0,1980 # 8002e1f8 <__func__.0+0x310>
    80019a44:	1e7110ef          	jal	8002b42a <printf>
    80019a48:	0003e797          	auipc	a5,0x3e
    80019a4c:	5c97c783          	lbu	a5,1481(a5) # 80058011 <excpt+0x1>
    80019a50:	c789                	beqz	a5,80019a5a <instruction_guest_page_fault_4+0xe8>
    80019a52:	6418                	ld	a4,8(s0)
    80019a54:	47d1                	li	a5,20
    80019a56:	00f70c63          	beq	a4,a5,80019a6e <instruction_guest_page_fault_4+0xfc>
    80019a5a:	00014517          	auipc	a0,0x14
    80019a5e:	7a650513          	addi	a0,a0,1958 # 8002e200 <__func__.0+0x318>
    80019a62:	1c9110ef          	jal	8002b42a <printf>
    80019a66:	02900513          	li	a0,41
    80019a6a:	6ae100ef          	jal	8002a118 <putchar>
    80019a6e:	4529                	li	a0,10
    80019a70:	6a8100ef          	jal	8002a118 <putchar>
    80019a74:	0003e497          	auipc	s1,0x3e
    80019a78:	59d4c483          	lbu	s1,1437(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019a7c:	00014597          	auipc	a1,0x14
    80019a80:	73c58593          	addi	a1,a1,1852 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a84:	cc91                	beqz	s1,80019aa0 <instruction_guest_page_fault_4+0x12e>
    80019a86:	6418                	ld	a4,8(s0)
    80019a88:	47d1                	li	a5,20
    TEST_END();
    80019a8a:	00014597          	auipc	a1,0x14
    80019a8e:	71e58593          	addi	a1,a1,1822 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a92:	00f70763          	beq	a4,a5,80019aa0 <instruction_guest_page_fault_4+0x12e>
    80019a96:	4481                	li	s1,0
    TEST_END();
    80019a98:	00014597          	auipc	a1,0x14
    80019a9c:	72058593          	addi	a1,a1,1824 # 8002e1b8 <__func__.0+0x2d0>
    80019aa0:	00014517          	auipc	a0,0x14
    80019aa4:	7c050513          	addi	a0,a0,1984 # 8002e260 <__func__.0+0x378>
    80019aa8:	183110ef          	jal	8002b42a <printf>
    80019aac:	4511                	li	a0,4
    80019aae:	c5ae70ef          	jal	80000f08 <goto_priv>
    80019ab2:	d73e70ef          	jal	80001824 <reset_state>
}
    80019ab6:	60e2                	ld	ra,24(sp)
    80019ab8:	6442                	ld	s0,16(sp)
    80019aba:	8526                	mv	a0,s1
    80019abc:	64a2                	ld	s1,8(sp)
    80019abe:	6105                	addi	sp,sp,32
    80019ac0:	8082                	ret

0000000080019ac2 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80019ac2:	1101                	addi	sp,sp,-32

    TEST_START();
    80019ac4:	00013597          	auipc	a1,0x13
    80019ac8:	60c58593          	addi	a1,a1,1548 # 8002d0d0 <__func__.2>
    80019acc:	00014517          	auipc	a0,0x14
    80019ad0:	6fc50513          	addi	a0,a0,1788 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    80019ad4:	ec06                	sd	ra,24(sp)
    80019ad6:	e822                	sd	s0,16(sp)
    80019ad8:	e426                	sd	s1,8(sp)
    TEST_START();
    80019ada:	151110ef          	jal	8002b42a <printf>
    80019ade:	4529                	li	a0,10
    80019ae0:	638100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019ae4:	450d                	li	a0,3
    80019ae6:	c22e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019aea:	af7e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019aee:	ed7e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019af2:	c8be60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80019af6:	4511                	li	a0,4
    80019af8:	c10e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019afc:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80019b00:	4509                	li	a0,2
    80019b02:	c06e70ef          	jal	80000f08 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80019b06:	b06e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019b0a:	400197b7          	lui	a5,0x40019
    80019b0e:	078a                	slli	a5,a5,0x2
    80019b10:	0003e417          	auipc	s0,0x3e
    80019b14:	50040413          	addi	s0,s0,1280 # 80058010 <excpt>
    80019b18:	00000297          	auipc	t0,0x0
    80019b1c:	00c28293          	addi	t0,t0,12 # 80019b24 <instruction_guest_page_fault_5+0x62>
    80019b20:	02543c23          	sd	t0,56(s0)
    80019b24:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b26:	08200593          	li	a1,130
    80019b2a:	0001b617          	auipc	a2,0x1b
    80019b2e:	a5e60613          	addi	a2,a2,-1442 # 80034588 <__func__.0+0x66a0>
    80019b32:	00014517          	auipc	a0,0x14
    80019b36:	6ae50513          	addi	a0,a0,1710 # 8002e1e0 <__func__.0+0x2f8>
    80019b3a:	0f1110ef          	jal	8002b42a <printf>
    80019b3e:	0003e797          	auipc	a5,0x3e
    80019b42:	4d37c783          	lbu	a5,1235(a5) # 80058011 <excpt+0x1>
    80019b46:	00014597          	auipc	a1,0x14
    80019b4a:	67258593          	addi	a1,a1,1650 # 8002e1b8 <__func__.0+0x2d0>
    80019b4e:	cf89                	beqz	a5,80019b68 <instruction_guest_page_fault_5+0xa6>
    80019b50:	6418                	ld	a4,8(s0)
    80019b52:	47d1                	li	a5,20
    80019b54:	00014597          	auipc	a1,0x14
    80019b58:	65458593          	addi	a1,a1,1620 # 8002e1a8 <__func__.0+0x2c0>
    80019b5c:	00f70663          	beq	a4,a5,80019b68 <instruction_guest_page_fault_5+0xa6>
    80019b60:	00014597          	auipc	a1,0x14
    80019b64:	65858593          	addi	a1,a1,1624 # 8002e1b8 <__func__.0+0x2d0>
    80019b68:	00014517          	auipc	a0,0x14
    80019b6c:	69050513          	addi	a0,a0,1680 # 8002e1f8 <__func__.0+0x310>
    80019b70:	0bb110ef          	jal	8002b42a <printf>
    80019b74:	0003e797          	auipc	a5,0x3e
    80019b78:	49d7c783          	lbu	a5,1181(a5) # 80058011 <excpt+0x1>
    80019b7c:	c789                	beqz	a5,80019b86 <instruction_guest_page_fault_5+0xc4>
    80019b7e:	6418                	ld	a4,8(s0)
    80019b80:	47d1                	li	a5,20
    80019b82:	00f70c63          	beq	a4,a5,80019b9a <instruction_guest_page_fault_5+0xd8>
    80019b86:	00014517          	auipc	a0,0x14
    80019b8a:	67a50513          	addi	a0,a0,1658 # 8002e200 <__func__.0+0x318>
    80019b8e:	09d110ef          	jal	8002b42a <printf>
    80019b92:	02900513          	li	a0,41
    80019b96:	582100ef          	jal	8002a118 <putchar>
    80019b9a:	4529                	li	a0,10
    80019b9c:	57c100ef          	jal	8002a118 <putchar>
    80019ba0:	0003e497          	auipc	s1,0x3e
    80019ba4:	4714c483          	lbu	s1,1137(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019ba8:	00014597          	auipc	a1,0x14
    80019bac:	61058593          	addi	a1,a1,1552 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019bb0:	cc91                	beqz	s1,80019bcc <instruction_guest_page_fault_5+0x10a>
    80019bb2:	6418                	ld	a4,8(s0)
    80019bb4:	47d1                	li	a5,20
    TEST_END();
    80019bb6:	00014597          	auipc	a1,0x14
    80019bba:	5f258593          	addi	a1,a1,1522 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019bbe:	00f70763          	beq	a4,a5,80019bcc <instruction_guest_page_fault_5+0x10a>
    80019bc2:	4481                	li	s1,0
    TEST_END();
    80019bc4:	00014597          	auipc	a1,0x14
    80019bc8:	5f458593          	addi	a1,a1,1524 # 8002e1b8 <__func__.0+0x2d0>
    80019bcc:	00014517          	auipc	a0,0x14
    80019bd0:	69450513          	addi	a0,a0,1684 # 8002e260 <__func__.0+0x378>
    80019bd4:	057110ef          	jal	8002b42a <printf>
    80019bd8:	4511                	li	a0,4
    80019bda:	b2ee70ef          	jal	80000f08 <goto_priv>
    80019bde:	c47e70ef          	jal	80001824 <reset_state>

}
    80019be2:	60e2                	ld	ra,24(sp)
    80019be4:	6442                	ld	s0,16(sp)
    80019be6:	8526                	mv	a0,s1
    80019be8:	64a2                	ld	s1,8(sp)
    80019bea:	6105                	addi	sp,sp,32
    80019bec:	8082                	ret

0000000080019bee <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80019bee:	1141                	addi	sp,sp,-16

    TEST_START();
    80019bf0:	00013597          	auipc	a1,0x13
    80019bf4:	50058593          	addi	a1,a1,1280 # 8002d0f0 <__func__.1>
    80019bf8:	00014517          	auipc	a0,0x14
    80019bfc:	5d050513          	addi	a0,a0,1488 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    80019c00:	e406                	sd	ra,8(sp)
    80019c02:	e022                	sd	s0,0(sp)
    TEST_START();
    80019c04:	027110ef          	jal	8002b42a <printf>
    80019c08:	4529                	li	a0,10
    80019c0a:	50e100ef          	jal	8002a118 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80019c0e:	450d                	li	a0,3
    80019c10:	af8e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019c14:	9cde60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c18:	dade60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019c1c:	b61e60ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    80019c20:	4509                	li	a0,2
    80019c22:	ae6e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019c26:	9e6e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019c2a:	4785                	li	a5,1
    80019c2c:	1782                	slli	a5,a5,0x20
    80019c2e:	0003e717          	auipc	a4,0x3e
    80019c32:	3e270713          	addi	a4,a4,994 # 80058010 <excpt>
    80019c36:	00000297          	auipc	t0,0x0
    80019c3a:	00c28293          	addi	t0,t0,12 # 80019c42 <instruction_guest_page_fault_6+0x54>
    80019c3e:	02573c23          	sd	t0,56(a4)
    80019c42:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c44:	08200593          	li	a1,130
    80019c48:	0001b617          	auipc	a2,0x1b
    80019c4c:	9a860613          	addi	a2,a2,-1624 # 800345f0 <__func__.0+0x6708>
    80019c50:	00014517          	auipc	a0,0x14
    80019c54:	59050513          	addi	a0,a0,1424 # 8002e1e0 <__func__.0+0x2f8>
    80019c58:	7d2110ef          	jal	8002b42a <printf>
    80019c5c:	0003e797          	auipc	a5,0x3e
    80019c60:	3b57c783          	lbu	a5,949(a5) # 80058011 <excpt+0x1>
    80019c64:	00014597          	auipc	a1,0x14
    80019c68:	54458593          	addi	a1,a1,1348 # 8002e1a8 <__func__.0+0x2c0>
    80019c6c:	c789                	beqz	a5,80019c76 <instruction_guest_page_fault_6+0x88>
    80019c6e:	00014597          	auipc	a1,0x14
    80019c72:	54a58593          	addi	a1,a1,1354 # 8002e1b8 <__func__.0+0x2d0>
    80019c76:	00014517          	auipc	a0,0x14
    80019c7a:	58250513          	addi	a0,a0,1410 # 8002e1f8 <__func__.0+0x310>
    80019c7e:	7ac110ef          	jal	8002b42a <printf>
    80019c82:	0003e797          	auipc	a5,0x3e
    80019c86:	38f7c783          	lbu	a5,911(a5) # 80058011 <excpt+0x1>
    80019c8a:	e7a1                	bnez	a5,80019cd2 <instruction_guest_page_fault_6+0xe4>
    80019c8c:	4529                	li	a0,10
    80019c8e:	48a100ef          	jal	8002a118 <putchar>
    80019c92:	0003e797          	auipc	a5,0x3e
    80019c96:	37f7c783          	lbu	a5,895(a5) # 80058011 <excpt+0x1>
    80019c9a:	e795                	bnez	a5,80019cc6 <instruction_guest_page_fault_6+0xd8>
    80019c9c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019c9e:	00014597          	auipc	a1,0x14
    80019ca2:	50a58593          	addi	a1,a1,1290 # 8002e1a8 <__func__.0+0x2c0>
    80019ca6:	00014517          	auipc	a0,0x14
    80019caa:	5ba50513          	addi	a0,a0,1466 # 8002e260 <__func__.0+0x378>
    80019cae:	77c110ef          	jal	8002b42a <printf>
    80019cb2:	4511                	li	a0,4
    80019cb4:	a54e70ef          	jal	80000f08 <goto_priv>
    80019cb8:	b6de70ef          	jal	80001824 <reset_state>
}
    80019cbc:	60a2                	ld	ra,8(sp)
    80019cbe:	8522                	mv	a0,s0
    80019cc0:	6402                	ld	s0,0(sp)
    80019cc2:	0141                	addi	sp,sp,16
    80019cc4:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019cc6:	4401                	li	s0,0
    TEST_END();
    80019cc8:	00014597          	auipc	a1,0x14
    80019ccc:	4f058593          	addi	a1,a1,1264 # 8002e1b8 <__func__.0+0x2d0>
    80019cd0:	bfd9                	j	80019ca6 <instruction_guest_page_fault_6+0xb8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019cd2:	00014517          	auipc	a0,0x14
    80019cd6:	52e50513          	addi	a0,a0,1326 # 8002e200 <__func__.0+0x318>
    80019cda:	750110ef          	jal	8002b42a <printf>
    80019cde:	02900513          	li	a0,41
    80019ce2:	436100ef          	jal	8002a118 <putchar>
    80019ce6:	b75d                	j	80019c8c <instruction_guest_page_fault_6+0x9e>

0000000080019ce8 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80019ce8:	1101                	addi	sp,sp,-32

    TEST_START();
    80019cea:	00013597          	auipc	a1,0x13
    80019cee:	42658593          	addi	a1,a1,1062 # 8002d110 <__func__.0>
    80019cf2:	00014517          	auipc	a0,0x14
    80019cf6:	4d650513          	addi	a0,a0,1238 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    80019cfa:	ec06                	sd	ra,24(sp)
    80019cfc:	e822                	sd	s0,16(sp)
    80019cfe:	e426                	sd	s1,8(sp)
    TEST_START();
    80019d00:	72a110ef          	jal	8002b42a <printf>
    80019d04:	4529                	li	a0,10
    80019d06:	412100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    80019d0a:	450d                	li	a0,3
    80019d0c:	9fce70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019d10:	8d1e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019d14:	cb1e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019d18:	a65e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019d1c:	4509                	li	a0,2
    80019d1e:	9eae70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019d22:	8eae70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019d26:	400137b7          	lui	a5,0x40013
    80019d2a:	078a                	slli	a5,a5,0x2
    80019d2c:	0003e417          	auipc	s0,0x3e
    80019d30:	2e440413          	addi	s0,s0,740 # 80058010 <excpt>
    80019d34:	00000297          	auipc	t0,0x0
    80019d38:	00c28293          	addi	t0,t0,12 # 80019d40 <instruction_guest_page_fault_7+0x58>
    80019d3c:	02543c23          	sd	t0,56(s0)
    80019d40:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019d42:	08200593          	li	a1,130
    80019d46:	0001b617          	auipc	a2,0x1b
    80019d4a:	8e260613          	addi	a2,a2,-1822 # 80034628 <__func__.0+0x6740>
    80019d4e:	00014517          	auipc	a0,0x14
    80019d52:	49250513          	addi	a0,a0,1170 # 8002e1e0 <__func__.0+0x2f8>
    80019d56:	6d4110ef          	jal	8002b42a <printf>
    80019d5a:	0003e797          	auipc	a5,0x3e
    80019d5e:	2b77c783          	lbu	a5,695(a5) # 80058011 <excpt+0x1>
    80019d62:	00014597          	auipc	a1,0x14
    80019d66:	45658593          	addi	a1,a1,1110 # 8002e1b8 <__func__.0+0x2d0>
    80019d6a:	cf89                	beqz	a5,80019d84 <instruction_guest_page_fault_7+0x9c>
    80019d6c:	6418                	ld	a4,8(s0)
    80019d6e:	47d1                	li	a5,20
    80019d70:	00014597          	auipc	a1,0x14
    80019d74:	43858593          	addi	a1,a1,1080 # 8002e1a8 <__func__.0+0x2c0>
    80019d78:	00f70663          	beq	a4,a5,80019d84 <instruction_guest_page_fault_7+0x9c>
    80019d7c:	00014597          	auipc	a1,0x14
    80019d80:	43c58593          	addi	a1,a1,1084 # 8002e1b8 <__func__.0+0x2d0>
    80019d84:	00014517          	auipc	a0,0x14
    80019d88:	47450513          	addi	a0,a0,1140 # 8002e1f8 <__func__.0+0x310>
    80019d8c:	69e110ef          	jal	8002b42a <printf>
    80019d90:	0003e797          	auipc	a5,0x3e
    80019d94:	2817c783          	lbu	a5,641(a5) # 80058011 <excpt+0x1>
    80019d98:	c789                	beqz	a5,80019da2 <instruction_guest_page_fault_7+0xba>
    80019d9a:	6418                	ld	a4,8(s0)
    80019d9c:	47d1                	li	a5,20
    80019d9e:	00f70c63          	beq	a4,a5,80019db6 <instruction_guest_page_fault_7+0xce>
    80019da2:	00014517          	auipc	a0,0x14
    80019da6:	45e50513          	addi	a0,a0,1118 # 8002e200 <__func__.0+0x318>
    80019daa:	680110ef          	jal	8002b42a <printf>
    80019dae:	02900513          	li	a0,41
    80019db2:	366100ef          	jal	8002a118 <putchar>
    80019db6:	4529                	li	a0,10
    80019db8:	360100ef          	jal	8002a118 <putchar>
    80019dbc:	0003e797          	auipc	a5,0x3e
    80019dc0:	2557c783          	lbu	a5,597(a5) # 80058011 <excpt+0x1>
    80019dc4:	4481                	li	s1,0
    80019dc6:	c789                	beqz	a5,80019dd0 <instruction_guest_page_fault_7+0xe8>
    80019dc8:	6404                	ld	s1,8(s0)
    80019dca:	14b1                	addi	s1,s1,-20
    80019dcc:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80019dd0:	83ce70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019dd4:	400137b7          	lui	a5,0x40013
    80019dd8:	078a                	slli	a5,a5,0x2
    80019dda:	00000297          	auipc	t0,0x0
    80019dde:	00c28293          	addi	t0,t0,12 # 80019de6 <instruction_guest_page_fault_7+0xfe>
    80019de2:	02543c23          	sd	t0,56(s0)
    80019de6:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019de8:	08200593          	li	a1,130
    80019dec:	0001b617          	auipc	a2,0x1b
    80019df0:	8a460613          	addi	a2,a2,-1884 # 80034690 <__func__.0+0x67a8>
    80019df4:	00014517          	auipc	a0,0x14
    80019df8:	3ec50513          	addi	a0,a0,1004 # 8002e1e0 <__func__.0+0x2f8>
    80019dfc:	62e110ef          	jal	8002b42a <printf>
    80019e00:	0003e797          	auipc	a5,0x3e
    80019e04:	2117c783          	lbu	a5,529(a5) # 80058011 <excpt+0x1>
    80019e08:	00014597          	auipc	a1,0x14
    80019e0c:	3b058593          	addi	a1,a1,944 # 8002e1b8 <__func__.0+0x2d0>
    80019e10:	cf89                	beqz	a5,80019e2a <instruction_guest_page_fault_7+0x142>
    80019e12:	6418                	ld	a4,8(s0)
    80019e14:	47d1                	li	a5,20
    80019e16:	00014597          	auipc	a1,0x14
    80019e1a:	39258593          	addi	a1,a1,914 # 8002e1a8 <__func__.0+0x2c0>
    80019e1e:	00f70663          	beq	a4,a5,80019e2a <instruction_guest_page_fault_7+0x142>
    80019e22:	00014597          	auipc	a1,0x14
    80019e26:	39658593          	addi	a1,a1,918 # 8002e1b8 <__func__.0+0x2d0>
    80019e2a:	00014517          	auipc	a0,0x14
    80019e2e:	3ce50513          	addi	a0,a0,974 # 8002e1f8 <__func__.0+0x310>
    80019e32:	5f8110ef          	jal	8002b42a <printf>
    80019e36:	0003e797          	auipc	a5,0x3e
    80019e3a:	1db7c783          	lbu	a5,475(a5) # 80058011 <excpt+0x1>
    80019e3e:	c789                	beqz	a5,80019e48 <instruction_guest_page_fault_7+0x160>
    80019e40:	6418                	ld	a4,8(s0)
    80019e42:	47d1                	li	a5,20
    80019e44:	00f70c63          	beq	a4,a5,80019e5c <instruction_guest_page_fault_7+0x174>
    80019e48:	00014517          	auipc	a0,0x14
    80019e4c:	3b850513          	addi	a0,a0,952 # 8002e200 <__func__.0+0x318>
    80019e50:	5da110ef          	jal	8002b42a <printf>
    80019e54:	02900513          	li	a0,41
    80019e58:	2c0100ef          	jal	8002a118 <putchar>
    80019e5c:	4529                	li	a0,10
    80019e5e:	2ba100ef          	jal	8002a118 <putchar>
    80019e62:	c095                	beqz	s1,80019e86 <instruction_guest_page_fault_7+0x19e>
    80019e64:	0003e497          	auipc	s1,0x3e
    80019e68:	1ad4c483          	lbu	s1,429(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019e6c:	00014597          	auipc	a1,0x14
    80019e70:	34c58593          	addi	a1,a1,844 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e74:	cc91                	beqz	s1,80019e90 <instruction_guest_page_fault_7+0x1a8>
    80019e76:	6418                	ld	a4,8(s0)
    80019e78:	47d1                	li	a5,20
    TEST_END();
    80019e7a:	00014597          	auipc	a1,0x14
    80019e7e:	32e58593          	addi	a1,a1,814 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e82:	00f70763          	beq	a4,a5,80019e90 <instruction_guest_page_fault_7+0x1a8>
    80019e86:	4481                	li	s1,0
    TEST_END();
    80019e88:	00014597          	auipc	a1,0x14
    80019e8c:	33058593          	addi	a1,a1,816 # 8002e1b8 <__func__.0+0x2d0>
    80019e90:	00014517          	auipc	a0,0x14
    80019e94:	3d050513          	addi	a0,a0,976 # 8002e260 <__func__.0+0x378>
    80019e98:	592110ef          	jal	8002b42a <printf>
    80019e9c:	4511                	li	a0,4
    80019e9e:	86ae70ef          	jal	80000f08 <goto_priv>
    80019ea2:	983e70ef          	jal	80001824 <reset_state>
    80019ea6:	60e2                	ld	ra,24(sp)
    80019ea8:	6442                	ld	s0,16(sp)
    80019eaa:	8526                	mv	a0,s1
    80019eac:	64a2                	ld	s1,8(sp)
    80019eae:	6105                	addi	sp,sp,32
    80019eb0:	8082                	ret

0000000080019eb2 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80019eb2:	1101                	addi	sp,sp,-32

    TEST_START();
    80019eb4:	00013597          	auipc	a1,0x13
    80019eb8:	27c58593          	addi	a1,a1,636 # 8002d130 <__func__.39>
    80019ebc:	00014517          	auipc	a0,0x14
    80019ec0:	30c50513          	addi	a0,a0,780 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_1(){
    80019ec4:	ec06                	sd	ra,24(sp)
    80019ec6:	e822                	sd	s0,16(sp)
    80019ec8:	e426                	sd	s1,8(sp)
    TEST_START();
    80019eca:	560110ef          	jal	8002b42a <printf>
    80019ece:	4529                	li	a0,10
    80019ed0:	248100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80019ed4:	4511                	li	a0,4
    80019ed6:	832e70ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019eda:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80019ede:	10000793          	li	a5,256
    80019ee2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019ee6:	20000793          	li	a5,512
    80019eea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019eee:	40000793          	li	a5,1024
    80019ef2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019ef6:	6785                	lui	a5,0x1
    80019ef8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019efc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019f00:	4785                	li	a5,1
    80019f02:	07fe                	slli	a5,a5,0x1f
    80019f04:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019f08:	08100793          	li	a5,129
    80019f0c:	07e2                	slli	a5,a5,0x18
    80019f0e:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019f12:	67a1                	lui	a5,0x8
    80019f14:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80019f18:	ef5e60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80019f1c:	4785                	li	a5,1
    80019f1e:	1786                	slli	a5,a5,0x21
    80019f20:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    80019f24:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f28:	08200593          	li	a1,130
    80019f2c:	0001a617          	auipc	a2,0x1a
    80019f30:	7cc60613          	addi	a2,a2,1996 # 800346f8 <__func__.0+0x6810>
    80019f34:	00014517          	auipc	a0,0x14
    80019f38:	2ac50513          	addi	a0,a0,684 # 8002e1e0 <__func__.0+0x2f8>
    80019f3c:	4ee110ef          	jal	8002b42a <printf>
    80019f40:	0003e797          	auipc	a5,0x3e
    80019f44:	0d17c783          	lbu	a5,209(a5) # 80058011 <excpt+0x1>
    80019f48:	0003e497          	auipc	s1,0x3e
    80019f4c:	0c848493          	addi	s1,s1,200 # 80058010 <excpt>
    80019f50:	00014597          	auipc	a1,0x14
    80019f54:	26858593          	addi	a1,a1,616 # 8002e1b8 <__func__.0+0x2d0>
    80019f58:	cf89                	beqz	a5,80019f72 <load_access_fault_1+0xc0>
    80019f5a:	6498                	ld	a4,8(s1)
    80019f5c:	4795                	li	a5,5
    80019f5e:	00014597          	auipc	a1,0x14
    80019f62:	24a58593          	addi	a1,a1,586 # 8002e1a8 <__func__.0+0x2c0>
    80019f66:	00f70663          	beq	a4,a5,80019f72 <load_access_fault_1+0xc0>
    80019f6a:	00014597          	auipc	a1,0x14
    80019f6e:	24e58593          	addi	a1,a1,590 # 8002e1b8 <__func__.0+0x2d0>
    80019f72:	00014517          	auipc	a0,0x14
    80019f76:	28650513          	addi	a0,a0,646 # 8002e1f8 <__func__.0+0x310>
    80019f7a:	4b0110ef          	jal	8002b42a <printf>
    80019f7e:	0003e797          	auipc	a5,0x3e
    80019f82:	0937c783          	lbu	a5,147(a5) # 80058011 <excpt+0x1>
    80019f86:	c789                	beqz	a5,80019f90 <load_access_fault_1+0xde>
    80019f88:	6498                	ld	a4,8(s1)
    80019f8a:	4795                	li	a5,5
    80019f8c:	00f70c63          	beq	a4,a5,80019fa4 <load_access_fault_1+0xf2>
    80019f90:	00014517          	auipc	a0,0x14
    80019f94:	27050513          	addi	a0,a0,624 # 8002e200 <__func__.0+0x318>
    80019f98:	492110ef          	jal	8002b42a <printf>
    80019f9c:	02900513          	li	a0,41
    80019fa0:	178100ef          	jal	8002a118 <putchar>
    80019fa4:	4529                	li	a0,10
    80019fa6:	172100ef          	jal	8002a118 <putchar>
    80019faa:	0003e417          	auipc	s0,0x3e
    80019fae:	06744403          	lbu	s0,103(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80019fb2:	00014597          	auipc	a1,0x14
    80019fb6:	20658593          	addi	a1,a1,518 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019fba:	cc11                	beqz	s0,80019fd6 <load_access_fault_1+0x124>
    80019fbc:	6498                	ld	a4,8(s1)
    80019fbe:	4795                	li	a5,5
    TEST_END();
    80019fc0:	00014597          	auipc	a1,0x14
    80019fc4:	1e858593          	addi	a1,a1,488 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019fc8:	00f70763          	beq	a4,a5,80019fd6 <load_access_fault_1+0x124>
    80019fcc:	4401                	li	s0,0
    TEST_END();
    80019fce:	00014597          	auipc	a1,0x14
    80019fd2:	1ea58593          	addi	a1,a1,490 # 8002e1b8 <__func__.0+0x2d0>
    80019fd6:	00014517          	auipc	a0,0x14
    80019fda:	28a50513          	addi	a0,a0,650 # 8002e260 <__func__.0+0x378>
    80019fde:	44c110ef          	jal	8002b42a <printf>
    80019fe2:	4511                	li	a0,4
    80019fe4:	f25e60ef          	jal	80000f08 <goto_priv>
    80019fe8:	83de70ef          	jal	80001824 <reset_state>
}
    80019fec:	60e2                	ld	ra,24(sp)
    80019fee:	8522                	mv	a0,s0
    80019ff0:	6442                	ld	s0,16(sp)
    80019ff2:	64a2                	ld	s1,8(sp)
    80019ff4:	6105                	addi	sp,sp,32
    80019ff6:	8082                	ret

0000000080019ff8 <load_access_fault_2>:

bool load_access_fault_2(){
    80019ff8:	1101                	addi	sp,sp,-32

    TEST_START();
    80019ffa:	00013597          	auipc	a1,0x13
    80019ffe:	14e58593          	addi	a1,a1,334 # 8002d148 <__func__.38>
    8001a002:	00014517          	auipc	a0,0x14
    8001a006:	1c650513          	addi	a0,a0,454 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_2(){
    8001a00a:	ec06                	sd	ra,24(sp)
    8001a00c:	e822                	sd	s0,16(sp)
    8001a00e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a010:	41a110ef          	jal	8002b42a <printf>
    8001a014:	4529                	li	a0,10
    8001a016:	102100ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a01a:	4511                	li	a0,4
    8001a01c:	eede60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a020:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a024:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a028:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a02c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a030:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a034:	10000793          	li	a5,256
    8001a038:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a03c:	20000793          	li	a5,512
    8001a040:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a044:	40000793          	li	a5,1024
    8001a048:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a04c:	6785                	lui	a5,0x1
    8001a04e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a052:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    8001a056:	47c5                	li	a5,17
    8001a058:	07ee                	slli	a5,a5,0x1b
    8001a05a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    8001a05e:	08900793          	li	a5,137
    8001a062:	07e2                	slli	a5,a5,0x18
    8001a064:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    8001a068:	08000793          	li	a5,128
    8001a06c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    8001a070:	67a1                	lui	a5,0x8
    8001a072:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001a076:	450d                	li	a0,3
    8001a078:	e91e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a07c:	d91e60ef          	jal	80000e0c <test_setup_except_function>
    8001a080:	008817b7          	lui	a5,0x881
    8001a084:	07aa                	slli	a5,a5,0xa
    8001a086:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a08a:	08200593          	li	a1,130
    8001a08e:	0001a617          	auipc	a2,0x1a
    8001a092:	6a260613          	addi	a2,a2,1698 # 80034730 <__func__.0+0x6848>
    8001a096:	00014517          	auipc	a0,0x14
    8001a09a:	14a50513          	addi	a0,a0,330 # 8002e1e0 <__func__.0+0x2f8>
    8001a09e:	38c110ef          	jal	8002b42a <printf>
    8001a0a2:	0003e797          	auipc	a5,0x3e
    8001a0a6:	f6f7c783          	lbu	a5,-145(a5) # 80058011 <excpt+0x1>
    8001a0aa:	0003e497          	auipc	s1,0x3e
    8001a0ae:	f6648493          	addi	s1,s1,-154 # 80058010 <excpt>
    8001a0b2:	00014597          	auipc	a1,0x14
    8001a0b6:	10658593          	addi	a1,a1,262 # 8002e1b8 <__func__.0+0x2d0>
    8001a0ba:	cf89                	beqz	a5,8001a0d4 <load_access_fault_2+0xdc>
    8001a0bc:	6498                	ld	a4,8(s1)
    8001a0be:	4795                	li	a5,5
    8001a0c0:	00014597          	auipc	a1,0x14
    8001a0c4:	0e858593          	addi	a1,a1,232 # 8002e1a8 <__func__.0+0x2c0>
    8001a0c8:	00f70663          	beq	a4,a5,8001a0d4 <load_access_fault_2+0xdc>
    8001a0cc:	00014597          	auipc	a1,0x14
    8001a0d0:	0ec58593          	addi	a1,a1,236 # 8002e1b8 <__func__.0+0x2d0>
    8001a0d4:	00014517          	auipc	a0,0x14
    8001a0d8:	12450513          	addi	a0,a0,292 # 8002e1f8 <__func__.0+0x310>
    8001a0dc:	34e110ef          	jal	8002b42a <printf>
    8001a0e0:	0003e797          	auipc	a5,0x3e
    8001a0e4:	f317c783          	lbu	a5,-207(a5) # 80058011 <excpt+0x1>
    8001a0e8:	c789                	beqz	a5,8001a0f2 <load_access_fault_2+0xfa>
    8001a0ea:	6498                	ld	a4,8(s1)
    8001a0ec:	4795                	li	a5,5
    8001a0ee:	00f70c63          	beq	a4,a5,8001a106 <load_access_fault_2+0x10e>
    8001a0f2:	00014517          	auipc	a0,0x14
    8001a0f6:	10e50513          	addi	a0,a0,270 # 8002e200 <__func__.0+0x318>
    8001a0fa:	330110ef          	jal	8002b42a <printf>
    8001a0fe:	02900513          	li	a0,41
    8001a102:	016100ef          	jal	8002a118 <putchar>
    8001a106:	4529                	li	a0,10
    8001a108:	010100ef          	jal	8002a118 <putchar>
    8001a10c:	0003e417          	auipc	s0,0x3e
    8001a110:	f0544403          	lbu	s0,-251(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a114:	00014597          	auipc	a1,0x14
    8001a118:	0a458593          	addi	a1,a1,164 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a11c:	cc11                	beqz	s0,8001a138 <load_access_fault_2+0x140>
    8001a11e:	6498                	ld	a4,8(s1)
    8001a120:	4795                	li	a5,5
    TEST_END();
    8001a122:	00014597          	auipc	a1,0x14
    8001a126:	08658593          	addi	a1,a1,134 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a12a:	00f70763          	beq	a4,a5,8001a138 <load_access_fault_2+0x140>
    8001a12e:	4401                	li	s0,0
    TEST_END();
    8001a130:	00014597          	auipc	a1,0x14
    8001a134:	08858593          	addi	a1,a1,136 # 8002e1b8 <__func__.0+0x2d0>
    8001a138:	00014517          	auipc	a0,0x14
    8001a13c:	12850513          	addi	a0,a0,296 # 8002e260 <__func__.0+0x378>
    8001a140:	2ea110ef          	jal	8002b42a <printf>
    8001a144:	4511                	li	a0,4
    8001a146:	dc3e60ef          	jal	80000f08 <goto_priv>
    8001a14a:	edae70ef          	jal	80001824 <reset_state>
}
    8001a14e:	60e2                	ld	ra,24(sp)
    8001a150:	8522                	mv	a0,s0
    8001a152:	6442                	ld	s0,16(sp)
    8001a154:	64a2                	ld	s1,8(sp)
    8001a156:	6105                	addi	sp,sp,32
    8001a158:	8082                	ret

000000008001a15a <load_access_fault_3>:


bool load_access_fault_3(){
    8001a15a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a15c:	00013597          	auipc	a1,0x13
    8001a160:	00458593          	addi	a1,a1,4 # 8002d160 <__func__.37>
    8001a164:	00014517          	auipc	a0,0x14
    8001a168:	06450513          	addi	a0,a0,100 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001a16c:	ec06                	sd	ra,24(sp)
    8001a16e:	e822                	sd	s0,16(sp)
    8001a170:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a172:	2b8110ef          	jal	8002b42a <printf>
    8001a176:	4529                	li	a0,10
    8001a178:	7a10f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a17c:	4511                	li	a0,4
    8001a17e:	d8be60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a182:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a186:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a18a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a18e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a192:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a196:	10000793          	li	a5,256
    8001a19a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a19e:	20000793          	li	a5,512
    8001a1a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a1a6:	40000793          	li	a5,1024
    8001a1aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a1ae:	6785                	lui	a5,0x1
    8001a1b0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a1b4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a1b8:	4785                	li	a5,1
    8001a1ba:	07fe                	slli	a5,a5,0x1f
    8001a1bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a1c0:	08100793          	li	a5,129
    8001a1c4:	07e2                	slli	a5,a5,0x18
    8001a1c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a1ca:	08000793          	li	a5,128
    8001a1ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a1d2:	67a1                	lui	a5,0x8
    8001a1d4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a1d8:	4505                	li	a0,1
    8001a1da:	d2fe60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a1de:	c2fe60ef          	jal	80000e0c <test_setup_except_function>
    8001a1e2:	4785                	li	a5,1
    8001a1e4:	1786                	slli	a5,a5,0x21
    8001a1e6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a1ea:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1ee:	08200593          	li	a1,130
    8001a1f2:	0001a617          	auipc	a2,0x1a
    8001a1f6:	57660613          	addi	a2,a2,1398 # 80034768 <__func__.0+0x6880>
    8001a1fa:	00014517          	auipc	a0,0x14
    8001a1fe:	fe650513          	addi	a0,a0,-26 # 8002e1e0 <__func__.0+0x2f8>
    8001a202:	228110ef          	jal	8002b42a <printf>
    8001a206:	0003e797          	auipc	a5,0x3e
    8001a20a:	e0b7c783          	lbu	a5,-501(a5) # 80058011 <excpt+0x1>
    8001a20e:	0003e497          	auipc	s1,0x3e
    8001a212:	e0248493          	addi	s1,s1,-510 # 80058010 <excpt>
    8001a216:	00014597          	auipc	a1,0x14
    8001a21a:	fa258593          	addi	a1,a1,-94 # 8002e1b8 <__func__.0+0x2d0>
    8001a21e:	cf89                	beqz	a5,8001a238 <load_access_fault_3+0xde>
    8001a220:	6498                	ld	a4,8(s1)
    8001a222:	4795                	li	a5,5
    8001a224:	00014597          	auipc	a1,0x14
    8001a228:	f8458593          	addi	a1,a1,-124 # 8002e1a8 <__func__.0+0x2c0>
    8001a22c:	00f70663          	beq	a4,a5,8001a238 <load_access_fault_3+0xde>
    8001a230:	00014597          	auipc	a1,0x14
    8001a234:	f8858593          	addi	a1,a1,-120 # 8002e1b8 <__func__.0+0x2d0>
    8001a238:	00014517          	auipc	a0,0x14
    8001a23c:	fc050513          	addi	a0,a0,-64 # 8002e1f8 <__func__.0+0x310>
    8001a240:	1ea110ef          	jal	8002b42a <printf>
    8001a244:	0003e797          	auipc	a5,0x3e
    8001a248:	dcd7c783          	lbu	a5,-563(a5) # 80058011 <excpt+0x1>
    8001a24c:	c789                	beqz	a5,8001a256 <load_access_fault_3+0xfc>
    8001a24e:	6498                	ld	a4,8(s1)
    8001a250:	4795                	li	a5,5
    8001a252:	00f70c63          	beq	a4,a5,8001a26a <load_access_fault_3+0x110>
    8001a256:	00014517          	auipc	a0,0x14
    8001a25a:	faa50513          	addi	a0,a0,-86 # 8002e200 <__func__.0+0x318>
    8001a25e:	1cc110ef          	jal	8002b42a <printf>
    8001a262:	02900513          	li	a0,41
    8001a266:	6b30f0ef          	jal	8002a118 <putchar>
    8001a26a:	4529                	li	a0,10
    8001a26c:	6ad0f0ef          	jal	8002a118 <putchar>
    8001a270:	0003e417          	auipc	s0,0x3e
    8001a274:	da144403          	lbu	s0,-607(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a278:	00014597          	auipc	a1,0x14
    8001a27c:	f4058593          	addi	a1,a1,-192 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a280:	cc11                	beqz	s0,8001a29c <load_access_fault_3+0x142>
    8001a282:	6498                	ld	a4,8(s1)
    8001a284:	4795                	li	a5,5
    TEST_END();
    8001a286:	00014597          	auipc	a1,0x14
    8001a28a:	f2258593          	addi	a1,a1,-222 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a28e:	00f70763          	beq	a4,a5,8001a29c <load_access_fault_3+0x142>
    8001a292:	4401                	li	s0,0
    TEST_END();
    8001a294:	00014597          	auipc	a1,0x14
    8001a298:	f2458593          	addi	a1,a1,-220 # 8002e1b8 <__func__.0+0x2d0>
    8001a29c:	00014517          	auipc	a0,0x14
    8001a2a0:	fc450513          	addi	a0,a0,-60 # 8002e260 <__func__.0+0x378>
    8001a2a4:	186110ef          	jal	8002b42a <printf>
    8001a2a8:	4511                	li	a0,4
    8001a2aa:	c5fe60ef          	jal	80000f08 <goto_priv>
    8001a2ae:	d76e70ef          	jal	80001824 <reset_state>
}
    8001a2b2:	60e2                	ld	ra,24(sp)
    8001a2b4:	8522                	mv	a0,s0
    8001a2b6:	6442                	ld	s0,16(sp)
    8001a2b8:	64a2                	ld	s1,8(sp)
    8001a2ba:	6105                	addi	sp,sp,32
    8001a2bc:	8082                	ret

000000008001a2be <load_access_fault_4>:

bool load_access_fault_4(){
    8001a2be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a2c0:	00013597          	auipc	a1,0x13
    8001a2c4:	eb858593          	addi	a1,a1,-328 # 8002d178 <__func__.36>
    8001a2c8:	00014517          	auipc	a0,0x14
    8001a2cc:	f0050513          	addi	a0,a0,-256 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001a2d0:	ec06                	sd	ra,24(sp)
    8001a2d2:	e822                	sd	s0,16(sp)
    8001a2d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a2d6:	154110ef          	jal	8002b42a <printf>
    8001a2da:	4529                	li	a0,10
    8001a2dc:	63d0f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a2e0:	4511                	li	a0,4
    8001a2e2:	c27e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a2e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a2ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a2ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a2f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a2f6:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a2fa:	10000793          	li	a5,256
    8001a2fe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a302:	20000793          	li	a5,512
    8001a306:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a30a:	40000793          	li	a5,1024
    8001a30e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a312:	6785                	lui	a5,0x1
    8001a314:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a318:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a31c:	4785                	li	a5,1
    8001a31e:	07fe                	slli	a5,a5,0x1f
    8001a320:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a324:	08100793          	li	a5,129
    8001a328:	07e2                	slli	a5,a5,0x18
    8001a32a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a32e:	08000793          	li	a5,128
    8001a332:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a336:	67a1                	lui	a5,0x8
    8001a338:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a33c:	4501                	li	a0,0
    8001a33e:	bcbe60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a342:	acbe60ef          	jal	80000e0c <test_setup_except_function>
    8001a346:	4785                	li	a5,1
    8001a348:	1786                	slli	a5,a5,0x21
    8001a34a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a34e:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a352:	08200593          	li	a1,130
    8001a356:	0001a617          	auipc	a2,0x1a
    8001a35a:	44a60613          	addi	a2,a2,1098 # 800347a0 <__func__.0+0x68b8>
    8001a35e:	00014517          	auipc	a0,0x14
    8001a362:	e8250513          	addi	a0,a0,-382 # 8002e1e0 <__func__.0+0x2f8>
    8001a366:	0c4110ef          	jal	8002b42a <printf>
    8001a36a:	0003e797          	auipc	a5,0x3e
    8001a36e:	ca77c783          	lbu	a5,-857(a5) # 80058011 <excpt+0x1>
    8001a372:	0003e497          	auipc	s1,0x3e
    8001a376:	c9e48493          	addi	s1,s1,-866 # 80058010 <excpt>
    8001a37a:	00014597          	auipc	a1,0x14
    8001a37e:	e3e58593          	addi	a1,a1,-450 # 8002e1b8 <__func__.0+0x2d0>
    8001a382:	cf89                	beqz	a5,8001a39c <load_access_fault_4+0xde>
    8001a384:	6498                	ld	a4,8(s1)
    8001a386:	4795                	li	a5,5
    8001a388:	00014597          	auipc	a1,0x14
    8001a38c:	e2058593          	addi	a1,a1,-480 # 8002e1a8 <__func__.0+0x2c0>
    8001a390:	00f70663          	beq	a4,a5,8001a39c <load_access_fault_4+0xde>
    8001a394:	00014597          	auipc	a1,0x14
    8001a398:	e2458593          	addi	a1,a1,-476 # 8002e1b8 <__func__.0+0x2d0>
    8001a39c:	00014517          	auipc	a0,0x14
    8001a3a0:	e5c50513          	addi	a0,a0,-420 # 8002e1f8 <__func__.0+0x310>
    8001a3a4:	086110ef          	jal	8002b42a <printf>
    8001a3a8:	0003e797          	auipc	a5,0x3e
    8001a3ac:	c697c783          	lbu	a5,-919(a5) # 80058011 <excpt+0x1>
    8001a3b0:	c789                	beqz	a5,8001a3ba <load_access_fault_4+0xfc>
    8001a3b2:	6498                	ld	a4,8(s1)
    8001a3b4:	4795                	li	a5,5
    8001a3b6:	00f70c63          	beq	a4,a5,8001a3ce <load_access_fault_4+0x110>
    8001a3ba:	00014517          	auipc	a0,0x14
    8001a3be:	e4650513          	addi	a0,a0,-442 # 8002e200 <__func__.0+0x318>
    8001a3c2:	068110ef          	jal	8002b42a <printf>
    8001a3c6:	02900513          	li	a0,41
    8001a3ca:	54f0f0ef          	jal	8002a118 <putchar>
    8001a3ce:	4529                	li	a0,10
    8001a3d0:	5490f0ef          	jal	8002a118 <putchar>
    8001a3d4:	0003e417          	auipc	s0,0x3e
    8001a3d8:	c3d44403          	lbu	s0,-963(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a3dc:	00014597          	auipc	a1,0x14
    8001a3e0:	ddc58593          	addi	a1,a1,-548 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a3e4:	cc11                	beqz	s0,8001a400 <load_access_fault_4+0x142>
    8001a3e6:	6498                	ld	a4,8(s1)
    8001a3e8:	4795                	li	a5,5
    TEST_END();
    8001a3ea:	00014597          	auipc	a1,0x14
    8001a3ee:	dbe58593          	addi	a1,a1,-578 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a3f2:	00f70763          	beq	a4,a5,8001a400 <load_access_fault_4+0x142>
    8001a3f6:	4401                	li	s0,0
    TEST_END();
    8001a3f8:	00014597          	auipc	a1,0x14
    8001a3fc:	dc058593          	addi	a1,a1,-576 # 8002e1b8 <__func__.0+0x2d0>
    8001a400:	00014517          	auipc	a0,0x14
    8001a404:	e6050513          	addi	a0,a0,-416 # 8002e260 <__func__.0+0x378>
    8001a408:	022110ef          	jal	8002b42a <printf>
    8001a40c:	4511                	li	a0,4
    8001a40e:	afbe60ef          	jal	80000f08 <goto_priv>
    8001a412:	c12e70ef          	jal	80001824 <reset_state>
}
    8001a416:	60e2                	ld	ra,24(sp)
    8001a418:	8522                	mv	a0,s0
    8001a41a:	6442                	ld	s0,16(sp)
    8001a41c:	64a2                	ld	s1,8(sp)
    8001a41e:	6105                	addi	sp,sp,32
    8001a420:	8082                	ret

000000008001a422 <load_access_fault_5>:

bool load_access_fault_5(){
    8001a422:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a424:	00013597          	auipc	a1,0x13
    8001a428:	d6c58593          	addi	a1,a1,-660 # 8002d190 <__func__.35>
    8001a42c:	00014517          	auipc	a0,0x14
    8001a430:	d9c50513          	addi	a0,a0,-612 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001a434:	e406                	sd	ra,8(sp)
    8001a436:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a438:	7f3100ef          	jal	8002b42a <printf>
    8001a43c:	4529                	li	a0,10
    8001a43e:	4db0f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a442:	4511                	li	a0,4
    8001a444:	ac5e60ef          	jal	80000f08 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001a448:	3a0025f3          	csrr	a1,pmpcfg0
    8001a44c:	0001a517          	auipc	a0,0x1a
    8001a450:	38c50513          	addi	a0,a0,908 # 800347d8 <__func__.0+0x68f0>
    8001a454:	7d7100ef          	jal	8002b42a <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a458:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a45c:	10000793          	li	a5,256
    8001a460:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a464:	20000793          	li	a5,512
    8001a468:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a46c:	40000793          	li	a5,1024
    8001a470:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a474:	6785                	lui	a5,0x1
    8001a476:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a47a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a47e:	4785                	li	a5,1
    8001a480:	07fe                	slli	a5,a5,0x1f
    8001a482:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a486:	08100793          	li	a5,129
    8001a48a:	07e2                	slli	a5,a5,0x18
    8001a48c:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a490:	67a1                	lui	a5,0x8
    8001a492:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a496:	977e60ef          	jal	80000e0c <test_setup_except_function>
    8001a49a:	4785                	li	a5,1
    8001a49c:	1786                	slli	a5,a5,0x21
    8001a49e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a4a2:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001a4a6:	0003e597          	auipc	a1,0x3e
    8001a4aa:	b6b5c583          	lbu	a1,-1173(a1) # 80058011 <excpt+0x1>
    8001a4ae:	00015517          	auipc	a0,0x15
    8001a4b2:	89250513          	addi	a0,a0,-1902 # 8002ed40 <__func__.0+0xe58>
    8001a4b6:	775100ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001a4ba:	0003e597          	auipc	a1,0x3e
    8001a4be:	b5e5b583          	ld	a1,-1186(a1) # 80058018 <excpt+0x8>
    8001a4c2:	00015517          	auipc	a0,0x15
    8001a4c6:	87e50513          	addi	a0,a0,-1922 # 8002ed40 <__func__.0+0xe58>
    8001a4ca:	761100ef          	jal	8002b42a <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4ce:	08200593          	li	a1,130
    8001a4d2:	0001a617          	auipc	a2,0x1a
    8001a4d6:	31660613          	addi	a2,a2,790 # 800347e8 <__func__.0+0x6900>
    8001a4da:	00014517          	auipc	a0,0x14
    8001a4de:	d0650513          	addi	a0,a0,-762 # 8002e1e0 <__func__.0+0x2f8>
    8001a4e2:	749100ef          	jal	8002b42a <printf>
    8001a4e6:	0003e797          	auipc	a5,0x3e
    8001a4ea:	b2b7c783          	lbu	a5,-1237(a5) # 80058011 <excpt+0x1>
    8001a4ee:	00014597          	auipc	a1,0x14
    8001a4f2:	cba58593          	addi	a1,a1,-838 # 8002e1a8 <__func__.0+0x2c0>
    8001a4f6:	c789                	beqz	a5,8001a500 <load_access_fault_5+0xde>
    8001a4f8:	00014597          	auipc	a1,0x14
    8001a4fc:	cc058593          	addi	a1,a1,-832 # 8002e1b8 <__func__.0+0x2d0>
    8001a500:	00014517          	auipc	a0,0x14
    8001a504:	cf850513          	addi	a0,a0,-776 # 8002e1f8 <__func__.0+0x310>
    8001a508:	723100ef          	jal	8002b42a <printf>
    8001a50c:	0003e797          	auipc	a5,0x3e
    8001a510:	b057c783          	lbu	a5,-1275(a5) # 80058011 <excpt+0x1>
    8001a514:	e7a1                	bnez	a5,8001a55c <load_access_fault_5+0x13a>
    8001a516:	4529                	li	a0,10
    8001a518:	4010f0ef          	jal	8002a118 <putchar>
    8001a51c:	0003e797          	auipc	a5,0x3e
    8001a520:	af57c783          	lbu	a5,-1291(a5) # 80058011 <excpt+0x1>
    8001a524:	e795                	bnez	a5,8001a550 <load_access_fault_5+0x12e>
    8001a526:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001a528:	00014597          	auipc	a1,0x14
    8001a52c:	c8058593          	addi	a1,a1,-896 # 8002e1a8 <__func__.0+0x2c0>
    8001a530:	00014517          	auipc	a0,0x14
    8001a534:	d3050513          	addi	a0,a0,-720 # 8002e260 <__func__.0+0x378>
    8001a538:	6f3100ef          	jal	8002b42a <printf>
    8001a53c:	4511                	li	a0,4
    8001a53e:	9cbe60ef          	jal	80000f08 <goto_priv>
    8001a542:	ae2e70ef          	jal	80001824 <reset_state>
}
    8001a546:	60a2                	ld	ra,8(sp)
    8001a548:	8522                	mv	a0,s0
    8001a54a:	6402                	ld	s0,0(sp)
    8001a54c:	0141                	addi	sp,sp,16
    8001a54e:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a550:	4401                	li	s0,0
    TEST_END();
    8001a552:	00014597          	auipc	a1,0x14
    8001a556:	c6658593          	addi	a1,a1,-922 # 8002e1b8 <__func__.0+0x2d0>
    8001a55a:	bfd9                	j	8001a530 <load_access_fault_5+0x10e>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a55c:	00014517          	auipc	a0,0x14
    8001a560:	ca450513          	addi	a0,a0,-860 # 8002e200 <__func__.0+0x318>
    8001a564:	6c7100ef          	jal	8002b42a <printf>
    8001a568:	02900513          	li	a0,41
    8001a56c:	3ad0f0ef          	jal	8002a118 <putchar>
    8001a570:	b75d                	j	8001a516 <load_access_fault_5+0xf4>

000000008001a572 <load_access_fault_6>:


bool load_access_fault_6(){
    8001a572:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a574:	00013597          	auipc	a1,0x13
    8001a578:	c3458593          	addi	a1,a1,-972 # 8002d1a8 <__func__.34>
    8001a57c:	00014517          	auipc	a0,0x14
    8001a580:	c4c50513          	addi	a0,a0,-948 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001a584:	ec06                	sd	ra,24(sp)
    8001a586:	e822                	sd	s0,16(sp)
    8001a588:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a58a:	6a1100ef          	jal	8002b42a <printf>
    8001a58e:	4529                	li	a0,10
    8001a590:	3890f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a594:	4511                	li	a0,4
    8001a596:	973e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a59a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a59e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a5a2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a5a6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a5aa:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a5ae:	10000793          	li	a5,256
    8001a5b2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a5b6:	20000793          	li	a5,512
    8001a5ba:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a5be:	40000793          	li	a5,1024
    8001a5c2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a5c6:	6785                	lui	a5,0x1
    8001a5c8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a5cc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a5d0:	4785                	li	a5,1
    8001a5d2:	07fe                	slli	a5,a5,0x1f
    8001a5d4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a5d8:	08100793          	li	a5,129
    8001a5dc:	07e2                	slli	a5,a5,0x18
    8001a5de:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001a5e2:	08000793          	li	a5,128
    8001a5e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001a5ea:	67a1                	lui	a5,0x8
    8001a5ec:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001a5f0:	3b0025f3          	csrr	a1,pmpaddr0
    8001a5f4:	0001a517          	auipc	a0,0x1a
    8001a5f8:	1ec50513          	addi	a0,a0,492 # 800347e0 <__func__.0+0x68f8>
    8001a5fc:	62f100ef          	jal	8002b42a <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001a600:	3b1025f3          	csrr	a1,pmpaddr1
    8001a604:	0001a517          	auipc	a0,0x1a
    8001a608:	1dc50513          	addi	a0,a0,476 # 800347e0 <__func__.0+0x68f8>
    8001a60c:	61f100ef          	jal	8002b42a <printf>
    goto_priv(PRIV_HS);
    8001a610:	450d                	li	a0,3
    8001a612:	8f7e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a616:	ff6e60ef          	jal	80000e0c <test_setup_except_function>
    8001a61a:	4785                	li	a5,1
    8001a61c:	1786                	slli	a5,a5,0x21
    8001a61e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a622:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a626:	08200593          	li	a1,130
    8001a62a:	0001a617          	auipc	a2,0x1a
    8001a62e:	1f660613          	addi	a2,a2,502 # 80034820 <__func__.0+0x6938>
    8001a632:	00014517          	auipc	a0,0x14
    8001a636:	bae50513          	addi	a0,a0,-1106 # 8002e1e0 <__func__.0+0x2f8>
    8001a63a:	5f1100ef          	jal	8002b42a <printf>
    8001a63e:	0003e797          	auipc	a5,0x3e
    8001a642:	9d37c783          	lbu	a5,-1581(a5) # 80058011 <excpt+0x1>
    8001a646:	0003e497          	auipc	s1,0x3e
    8001a64a:	9ca48493          	addi	s1,s1,-1590 # 80058010 <excpt>
    8001a64e:	00014597          	auipc	a1,0x14
    8001a652:	b6a58593          	addi	a1,a1,-1174 # 8002e1b8 <__func__.0+0x2d0>
    8001a656:	cf89                	beqz	a5,8001a670 <load_access_fault_6+0xfe>
    8001a658:	6498                	ld	a4,8(s1)
    8001a65a:	4795                	li	a5,5
    8001a65c:	00014597          	auipc	a1,0x14
    8001a660:	b4c58593          	addi	a1,a1,-1204 # 8002e1a8 <__func__.0+0x2c0>
    8001a664:	00f70663          	beq	a4,a5,8001a670 <load_access_fault_6+0xfe>
    8001a668:	00014597          	auipc	a1,0x14
    8001a66c:	b5058593          	addi	a1,a1,-1200 # 8002e1b8 <__func__.0+0x2d0>
    8001a670:	00014517          	auipc	a0,0x14
    8001a674:	b8850513          	addi	a0,a0,-1144 # 8002e1f8 <__func__.0+0x310>
    8001a678:	5b3100ef          	jal	8002b42a <printf>
    8001a67c:	0003e797          	auipc	a5,0x3e
    8001a680:	9957c783          	lbu	a5,-1643(a5) # 80058011 <excpt+0x1>
    8001a684:	c789                	beqz	a5,8001a68e <load_access_fault_6+0x11c>
    8001a686:	6498                	ld	a4,8(s1)
    8001a688:	4795                	li	a5,5
    8001a68a:	00f70c63          	beq	a4,a5,8001a6a2 <load_access_fault_6+0x130>
    8001a68e:	00014517          	auipc	a0,0x14
    8001a692:	b7250513          	addi	a0,a0,-1166 # 8002e200 <__func__.0+0x318>
    8001a696:	595100ef          	jal	8002b42a <printf>
    8001a69a:	02900513          	li	a0,41
    8001a69e:	27b0f0ef          	jal	8002a118 <putchar>
    8001a6a2:	4529                	li	a0,10
    8001a6a4:	2750f0ef          	jal	8002a118 <putchar>
    8001a6a8:	0003e417          	auipc	s0,0x3e
    8001a6ac:	96944403          	lbu	s0,-1687(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a6b0:	00014597          	auipc	a1,0x14
    8001a6b4:	b0858593          	addi	a1,a1,-1272 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6b8:	cc11                	beqz	s0,8001a6d4 <load_access_fault_6+0x162>
    8001a6ba:	6498                	ld	a4,8(s1)
    8001a6bc:	4795                	li	a5,5
    TEST_END();
    8001a6be:	00014597          	auipc	a1,0x14
    8001a6c2:	aea58593          	addi	a1,a1,-1302 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6c6:	00f70763          	beq	a4,a5,8001a6d4 <load_access_fault_6+0x162>
    8001a6ca:	4401                	li	s0,0
    TEST_END();
    8001a6cc:	00014597          	auipc	a1,0x14
    8001a6d0:	aec58593          	addi	a1,a1,-1300 # 8002e1b8 <__func__.0+0x2d0>
    8001a6d4:	00014517          	auipc	a0,0x14
    8001a6d8:	b8c50513          	addi	a0,a0,-1140 # 8002e260 <__func__.0+0x378>
    8001a6dc:	54f100ef          	jal	8002b42a <printf>
    8001a6e0:	4511                	li	a0,4
    8001a6e2:	827e60ef          	jal	80000f08 <goto_priv>
    8001a6e6:	93ee70ef          	jal	80001824 <reset_state>
}
    8001a6ea:	60e2                	ld	ra,24(sp)
    8001a6ec:	8522                	mv	a0,s0
    8001a6ee:	6442                	ld	s0,16(sp)
    8001a6f0:	64a2                	ld	s1,8(sp)
    8001a6f2:	6105                	addi	sp,sp,32
    8001a6f4:	8082                	ret

000000008001a6f6 <load_access_fault_7>:


bool load_access_fault_7(){
    8001a6f6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a6f8:	00013597          	auipc	a1,0x13
    8001a6fc:	ac858593          	addi	a1,a1,-1336 # 8002d1c0 <__func__.33>
    8001a700:	00014517          	auipc	a0,0x14
    8001a704:	ac850513          	addi	a0,a0,-1336 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001a708:	ec06                	sd	ra,24(sp)
    8001a70a:	e822                	sd	s0,16(sp)
    8001a70c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a70e:	51d100ef          	jal	8002b42a <printf>
    8001a712:	4529                	li	a0,10
    8001a714:	2050f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a718:	4511                	li	a0,4
    8001a71a:	feee60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a71e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a722:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a726:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a72a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a72e:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a732:	10000793          	li	a5,256
    8001a736:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a73a:	20000793          	li	a5,512
    8001a73e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a742:	40000793          	li	a5,1024
    8001a746:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a74a:	6785                	lui	a5,0x1
    8001a74c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a750:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a754:	4785                	li	a5,1
    8001a756:	07fe                	slli	a5,a5,0x1f
    8001a758:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a75c:	08100793          	li	a5,129
    8001a760:	07e2                	slli	a5,a5,0x18
    8001a762:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a766:	08000793          	li	a5,128
    8001a76a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a76e:	67a1                	lui	a5,0x8
    8001a770:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a774:	4505                	li	a0,1
    8001a776:	f92e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a77a:	e92e60ef          	jal	80000e0c <test_setup_except_function>
    8001a77e:	4785                	li	a5,1
    8001a780:	1786                	slli	a5,a5,0x21
    8001a782:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a786:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a78a:	08200593          	li	a1,130
    8001a78e:	0001a617          	auipc	a2,0x1a
    8001a792:	0ca60613          	addi	a2,a2,202 # 80034858 <__func__.0+0x6970>
    8001a796:	00014517          	auipc	a0,0x14
    8001a79a:	a4a50513          	addi	a0,a0,-1462 # 8002e1e0 <__func__.0+0x2f8>
    8001a79e:	48d100ef          	jal	8002b42a <printf>
    8001a7a2:	0003e797          	auipc	a5,0x3e
    8001a7a6:	86f7c783          	lbu	a5,-1937(a5) # 80058011 <excpt+0x1>
    8001a7aa:	0003e497          	auipc	s1,0x3e
    8001a7ae:	86648493          	addi	s1,s1,-1946 # 80058010 <excpt>
    8001a7b2:	00014597          	auipc	a1,0x14
    8001a7b6:	a0658593          	addi	a1,a1,-1530 # 8002e1b8 <__func__.0+0x2d0>
    8001a7ba:	cf89                	beqz	a5,8001a7d4 <load_access_fault_7+0xde>
    8001a7bc:	6498                	ld	a4,8(s1)
    8001a7be:	4795                	li	a5,5
    8001a7c0:	00014597          	auipc	a1,0x14
    8001a7c4:	9e858593          	addi	a1,a1,-1560 # 8002e1a8 <__func__.0+0x2c0>
    8001a7c8:	00f70663          	beq	a4,a5,8001a7d4 <load_access_fault_7+0xde>
    8001a7cc:	00014597          	auipc	a1,0x14
    8001a7d0:	9ec58593          	addi	a1,a1,-1556 # 8002e1b8 <__func__.0+0x2d0>
    8001a7d4:	00014517          	auipc	a0,0x14
    8001a7d8:	a2450513          	addi	a0,a0,-1500 # 8002e1f8 <__func__.0+0x310>
    8001a7dc:	44f100ef          	jal	8002b42a <printf>
    8001a7e0:	0003e797          	auipc	a5,0x3e
    8001a7e4:	8317c783          	lbu	a5,-1999(a5) # 80058011 <excpt+0x1>
    8001a7e8:	c789                	beqz	a5,8001a7f2 <load_access_fault_7+0xfc>
    8001a7ea:	6498                	ld	a4,8(s1)
    8001a7ec:	4795                	li	a5,5
    8001a7ee:	00f70c63          	beq	a4,a5,8001a806 <load_access_fault_7+0x110>
    8001a7f2:	00014517          	auipc	a0,0x14
    8001a7f6:	a0e50513          	addi	a0,a0,-1522 # 8002e200 <__func__.0+0x318>
    8001a7fa:	431100ef          	jal	8002b42a <printf>
    8001a7fe:	02900513          	li	a0,41
    8001a802:	1170f0ef          	jal	8002a118 <putchar>
    8001a806:	4529                	li	a0,10
    8001a808:	1110f0ef          	jal	8002a118 <putchar>
    8001a80c:	0003e417          	auipc	s0,0x3e
    8001a810:	80544403          	lbu	s0,-2043(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a814:	00014597          	auipc	a1,0x14
    8001a818:	9a458593          	addi	a1,a1,-1628 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a81c:	cc11                	beqz	s0,8001a838 <load_access_fault_7+0x142>
    8001a81e:	6498                	ld	a4,8(s1)
    8001a820:	4795                	li	a5,5
    TEST_END();
    8001a822:	00014597          	auipc	a1,0x14
    8001a826:	98658593          	addi	a1,a1,-1658 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a82a:	00f70763          	beq	a4,a5,8001a838 <load_access_fault_7+0x142>
    8001a82e:	4401                	li	s0,0
    TEST_END();
    8001a830:	00014597          	auipc	a1,0x14
    8001a834:	98858593          	addi	a1,a1,-1656 # 8002e1b8 <__func__.0+0x2d0>
    8001a838:	00014517          	auipc	a0,0x14
    8001a83c:	a2850513          	addi	a0,a0,-1496 # 8002e260 <__func__.0+0x378>
    8001a840:	3eb100ef          	jal	8002b42a <printf>
    8001a844:	4511                	li	a0,4
    8001a846:	ec2e60ef          	jal	80000f08 <goto_priv>
    8001a84a:	fdbe60ef          	jal	80001824 <reset_state>
}
    8001a84e:	60e2                	ld	ra,24(sp)
    8001a850:	8522                	mv	a0,s0
    8001a852:	6442                	ld	s0,16(sp)
    8001a854:	64a2                	ld	s1,8(sp)
    8001a856:	6105                	addi	sp,sp,32
    8001a858:	8082                	ret

000000008001a85a <load_access_fault_8>:

bool load_access_fault_8(){
    8001a85a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a85c:	00013597          	auipc	a1,0x13
    8001a860:	97c58593          	addi	a1,a1,-1668 # 8002d1d8 <__func__.32>
    8001a864:	00014517          	auipc	a0,0x14
    8001a868:	96450513          	addi	a0,a0,-1692 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001a86c:	ec06                	sd	ra,24(sp)
    8001a86e:	e822                	sd	s0,16(sp)
    8001a870:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a872:	3b9100ef          	jal	8002b42a <printf>
    8001a876:	4529                	li	a0,10
    8001a878:	0a10f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a87c:	4511                	li	a0,4
    8001a87e:	e8ae60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a882:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a886:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a88a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a88e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a892:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a896:	10000793          	li	a5,256
    8001a89a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a89e:	20000793          	li	a5,512
    8001a8a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a8a6:	40000793          	li	a5,1024
    8001a8aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a8ae:	6785                	lui	a5,0x1
    8001a8b0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a8b4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a8b8:	4785                	li	a5,1
    8001a8ba:	07fe                	slli	a5,a5,0x1f
    8001a8bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a8c0:	08100793          	li	a5,129
    8001a8c4:	07e2                	slli	a5,a5,0x18
    8001a8c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a8ca:	08000793          	li	a5,128
    8001a8ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a8d2:	67a1                	lui	a5,0x8
    8001a8d4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a8d8:	4501                	li	a0,0
    8001a8da:	e2ee60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a8de:	d2ee60ef          	jal	80000e0c <test_setup_except_function>
    8001a8e2:	4785                	li	a5,1
    8001a8e4:	1786                	slli	a5,a5,0x21
    8001a8e6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a8ea:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8ee:	08200593          	li	a1,130
    8001a8f2:	0001a617          	auipc	a2,0x1a
    8001a8f6:	f9e60613          	addi	a2,a2,-98 # 80034890 <__func__.0+0x69a8>
    8001a8fa:	00014517          	auipc	a0,0x14
    8001a8fe:	8e650513          	addi	a0,a0,-1818 # 8002e1e0 <__func__.0+0x2f8>
    8001a902:	329100ef          	jal	8002b42a <printf>
    8001a906:	0003d797          	auipc	a5,0x3d
    8001a90a:	70b7c783          	lbu	a5,1803(a5) # 80058011 <excpt+0x1>
    8001a90e:	0003d497          	auipc	s1,0x3d
    8001a912:	70248493          	addi	s1,s1,1794 # 80058010 <excpt>
    8001a916:	00014597          	auipc	a1,0x14
    8001a91a:	8a258593          	addi	a1,a1,-1886 # 8002e1b8 <__func__.0+0x2d0>
    8001a91e:	cf89                	beqz	a5,8001a938 <load_access_fault_8+0xde>
    8001a920:	6498                	ld	a4,8(s1)
    8001a922:	4795                	li	a5,5
    8001a924:	00014597          	auipc	a1,0x14
    8001a928:	88458593          	addi	a1,a1,-1916 # 8002e1a8 <__func__.0+0x2c0>
    8001a92c:	00f70663          	beq	a4,a5,8001a938 <load_access_fault_8+0xde>
    8001a930:	00014597          	auipc	a1,0x14
    8001a934:	88858593          	addi	a1,a1,-1912 # 8002e1b8 <__func__.0+0x2d0>
    8001a938:	00014517          	auipc	a0,0x14
    8001a93c:	8c050513          	addi	a0,a0,-1856 # 8002e1f8 <__func__.0+0x310>
    8001a940:	2eb100ef          	jal	8002b42a <printf>
    8001a944:	0003d797          	auipc	a5,0x3d
    8001a948:	6cd7c783          	lbu	a5,1741(a5) # 80058011 <excpt+0x1>
    8001a94c:	c789                	beqz	a5,8001a956 <load_access_fault_8+0xfc>
    8001a94e:	6498                	ld	a4,8(s1)
    8001a950:	4795                	li	a5,5
    8001a952:	00f70c63          	beq	a4,a5,8001a96a <load_access_fault_8+0x110>
    8001a956:	00014517          	auipc	a0,0x14
    8001a95a:	8aa50513          	addi	a0,a0,-1878 # 8002e200 <__func__.0+0x318>
    8001a95e:	2cd100ef          	jal	8002b42a <printf>
    8001a962:	02900513          	li	a0,41
    8001a966:	7b20f0ef          	jal	8002a118 <putchar>
    8001a96a:	4529                	li	a0,10
    8001a96c:	7ac0f0ef          	jal	8002a118 <putchar>
    8001a970:	0003d417          	auipc	s0,0x3d
    8001a974:	6a144403          	lbu	s0,1697(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a978:	00014597          	auipc	a1,0x14
    8001a97c:	84058593          	addi	a1,a1,-1984 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a980:	cc11                	beqz	s0,8001a99c <load_access_fault_8+0x142>
    8001a982:	6498                	ld	a4,8(s1)
    8001a984:	4795                	li	a5,5
    TEST_END();
    8001a986:	00014597          	auipc	a1,0x14
    8001a98a:	82258593          	addi	a1,a1,-2014 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a98e:	00f70763          	beq	a4,a5,8001a99c <load_access_fault_8+0x142>
    8001a992:	4401                	li	s0,0
    TEST_END();
    8001a994:	00014597          	auipc	a1,0x14
    8001a998:	82458593          	addi	a1,a1,-2012 # 8002e1b8 <__func__.0+0x2d0>
    8001a99c:	00014517          	auipc	a0,0x14
    8001a9a0:	8c450513          	addi	a0,a0,-1852 # 8002e260 <__func__.0+0x378>
    8001a9a4:	287100ef          	jal	8002b42a <printf>
    8001a9a8:	4511                	li	a0,4
    8001a9aa:	d5ee60ef          	jal	80000f08 <goto_priv>
    8001a9ae:	e77e60ef          	jal	80001824 <reset_state>
}
    8001a9b2:	60e2                	ld	ra,24(sp)
    8001a9b4:	8522                	mv	a0,s0
    8001a9b6:	6442                	ld	s0,16(sp)
    8001a9b8:	64a2                	ld	s1,8(sp)
    8001a9ba:	6105                	addi	sp,sp,32
    8001a9bc:	8082                	ret

000000008001a9be <load_access_fault_9>:

bool load_access_fault_9(){
    8001a9be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a9c0:	00013597          	auipc	a1,0x13
    8001a9c4:	83058593          	addi	a1,a1,-2000 # 8002d1f0 <__func__.31>
    8001a9c8:	00014517          	auipc	a0,0x14
    8001a9cc:	80050513          	addi	a0,a0,-2048 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001a9d0:	ec06                	sd	ra,24(sp)
    8001a9d2:	e822                	sd	s0,16(sp)
    8001a9d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a9d6:	255100ef          	jal	8002b42a <printf>
    8001a9da:	4529                	li	a0,10
    8001a9dc:	73c0f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001a9e0:	4511                	li	a0,4
    8001a9e2:	d26e60ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a9e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a9ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a9ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a9f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a9f6:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a9fa:	10000793          	li	a5,256
    8001a9fe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001aa02:	20000793          	li	a5,512
    8001aa06:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001aa0a:	40000793          	li	a5,1024
    8001aa0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001aa12:	6785                	lui	a5,0x1
    8001aa14:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001aa18:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001aa1c:	4785                	li	a5,1
    8001aa1e:	07fe                	slli	a5,a5,0x1f
    8001aa20:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001aa24:	08100793          	li	a5,129
    8001aa28:	07e2                	slli	a5,a5,0x18
    8001aa2a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001aa2e:	08000793          	li	a5,128
    8001aa32:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001aa36:	67a1                	lui	a5,0x8
    8001aa38:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001aa3c:	4501                	li	a0,0
    8001aa3e:	ccae60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aa42:	bcae60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001aa46:	4785                	li	a5,1
    8001aa48:	178e                	slli	a5,a5,0x23
    8001aa4a:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001aa4c:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa50:	08200593          	li	a1,130
    8001aa54:	0001a617          	auipc	a2,0x1a
    8001aa58:	e7460613          	addi	a2,a2,-396 # 800348c8 <__func__.0+0x69e0>
    8001aa5c:	00013517          	auipc	a0,0x13
    8001aa60:	78450513          	addi	a0,a0,1924 # 8002e1e0 <__func__.0+0x2f8>
    8001aa64:	1c7100ef          	jal	8002b42a <printf>
    8001aa68:	0003d797          	auipc	a5,0x3d
    8001aa6c:	5a97c783          	lbu	a5,1449(a5) # 80058011 <excpt+0x1>
    8001aa70:	0003d497          	auipc	s1,0x3d
    8001aa74:	5a048493          	addi	s1,s1,1440 # 80058010 <excpt>
    8001aa78:	00013597          	auipc	a1,0x13
    8001aa7c:	74058593          	addi	a1,a1,1856 # 8002e1b8 <__func__.0+0x2d0>
    8001aa80:	cf89                	beqz	a5,8001aa9a <load_access_fault_9+0xdc>
    8001aa82:	6498                	ld	a4,8(s1)
    8001aa84:	4795                	li	a5,5
    8001aa86:	00013597          	auipc	a1,0x13
    8001aa8a:	72258593          	addi	a1,a1,1826 # 8002e1a8 <__func__.0+0x2c0>
    8001aa8e:	00f70663          	beq	a4,a5,8001aa9a <load_access_fault_9+0xdc>
    8001aa92:	00013597          	auipc	a1,0x13
    8001aa96:	72658593          	addi	a1,a1,1830 # 8002e1b8 <__func__.0+0x2d0>
    8001aa9a:	00013517          	auipc	a0,0x13
    8001aa9e:	75e50513          	addi	a0,a0,1886 # 8002e1f8 <__func__.0+0x310>
    8001aaa2:	189100ef          	jal	8002b42a <printf>
    8001aaa6:	0003d797          	auipc	a5,0x3d
    8001aaaa:	56b7c783          	lbu	a5,1387(a5) # 80058011 <excpt+0x1>
    8001aaae:	c789                	beqz	a5,8001aab8 <load_access_fault_9+0xfa>
    8001aab0:	6498                	ld	a4,8(s1)
    8001aab2:	4795                	li	a5,5
    8001aab4:	00f70c63          	beq	a4,a5,8001aacc <load_access_fault_9+0x10e>
    8001aab8:	00013517          	auipc	a0,0x13
    8001aabc:	74850513          	addi	a0,a0,1864 # 8002e200 <__func__.0+0x318>
    8001aac0:	16b100ef          	jal	8002b42a <printf>
    8001aac4:	02900513          	li	a0,41
    8001aac8:	6500f0ef          	jal	8002a118 <putchar>
    8001aacc:	4529                	li	a0,10
    8001aace:	64a0f0ef          	jal	8002a118 <putchar>
    8001aad2:	0003d417          	auipc	s0,0x3d
    8001aad6:	53f44403          	lbu	s0,1343(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aada:	00013597          	auipc	a1,0x13
    8001aade:	6de58593          	addi	a1,a1,1758 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aae2:	cc11                	beqz	s0,8001aafe <load_access_fault_9+0x140>
    8001aae4:	6498                	ld	a4,8(s1)
    8001aae6:	4795                	li	a5,5
    TEST_END();
    8001aae8:	00013597          	auipc	a1,0x13
    8001aaec:	6c058593          	addi	a1,a1,1728 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aaf0:	00f70763          	beq	a4,a5,8001aafe <load_access_fault_9+0x140>
    8001aaf4:	4401                	li	s0,0
    TEST_END();
    8001aaf6:	00013597          	auipc	a1,0x13
    8001aafa:	6c258593          	addi	a1,a1,1730 # 8002e1b8 <__func__.0+0x2d0>
    8001aafe:	00013517          	auipc	a0,0x13
    8001ab02:	76250513          	addi	a0,a0,1890 # 8002e260 <__func__.0+0x378>
    8001ab06:	125100ef          	jal	8002b42a <printf>
    8001ab0a:	4511                	li	a0,4
    8001ab0c:	bfce60ef          	jal	80000f08 <goto_priv>
    8001ab10:	d15e60ef          	jal	80001824 <reset_state>
}
    8001ab14:	60e2                	ld	ra,24(sp)
    8001ab16:	8522                	mv	a0,s0
    8001ab18:	6442                	ld	s0,16(sp)
    8001ab1a:	64a2                	ld	s1,8(sp)
    8001ab1c:	6105                	addi	sp,sp,32
    8001ab1e:	8082                	ret

000000008001ab20 <load_access_fault_10>:

bool load_access_fault_10(){
    8001ab20:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ab22:	00012597          	auipc	a1,0x12
    8001ab26:	6e658593          	addi	a1,a1,1766 # 8002d208 <__func__.30>
    8001ab2a:	00013517          	auipc	a0,0x13
    8001ab2e:	69e50513          	addi	a0,a0,1694 # 8002e1c8 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001ab32:	ec06                	sd	ra,24(sp)
    8001ab34:	e822                	sd	s0,16(sp)
    8001ab36:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ab38:	0f3100ef          	jal	8002b42a <printf>
    8001ab3c:	4529                	li	a0,10
    8001ab3e:	5da0f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001ab42:	4511                	li	a0,4
    8001ab44:	bc4e60ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ab48:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ab4c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ab50:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ab54:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ab58:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ab5c:	4785                	li	a5,1
    8001ab5e:	07fe                	slli	a5,a5,0x1f
    8001ab60:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ab64:	08000793          	li	a5,128
    8001ab68:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001ab6c:	3a0025f3          	csrr	a1,pmpcfg0
    8001ab70:	0001a517          	auipc	a0,0x1a
    8001ab74:	dc850513          	addi	a0,a0,-568 # 80034938 <__func__.0+0x6a50>
    8001ab78:	0b3100ef          	jal	8002b42a <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001ab7c:	3a2025f3          	csrr	a1,pmpcfg2
    8001ab80:	0001a517          	auipc	a0,0x1a
    8001ab84:	dc850513          	addi	a0,a0,-568 # 80034948 <__func__.0+0x6a60>
    8001ab88:	0a3100ef          	jal	8002b42a <printf>


    goto_priv(PRIV_HS);
    8001ab8c:	450d                	li	a0,3
    8001ab8e:	b7ae60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ab92:	a7ae60ef          	jal	80000e0c <test_setup_except_function>
    8001ab96:	08f00793          	li	a5,143
    8001ab9a:	07ea                	slli	a5,a5,0x1a
    8001ab9c:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001aba0:	0003d597          	auipc	a1,0x3d
    8001aba4:	4715c583          	lbu	a1,1137(a1) # 80058011 <excpt+0x1>
    8001aba8:	00014517          	auipc	a0,0x14
    8001abac:	19850513          	addi	a0,a0,408 # 8002ed40 <__func__.0+0xe58>
    8001abb0:	0003d417          	auipc	s0,0x3d
    8001abb4:	46040413          	addi	s0,s0,1120 # 80058010 <excpt>
    8001abb8:	073100ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001abbc:	640c                	ld	a1,8(s0)
    8001abbe:	00014517          	auipc	a0,0x14
    8001abc2:	18250513          	addi	a0,a0,386 # 8002ed40 <__func__.0+0xe58>
    8001abc6:	065100ef          	jal	8002b42a <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abca:	08200593          	li	a1,130
    8001abce:	0001a617          	auipc	a2,0x1a
    8001abd2:	d8a60613          	addi	a2,a2,-630 # 80034958 <__func__.0+0x6a70>
    8001abd6:	00013517          	auipc	a0,0x13
    8001abda:	60a50513          	addi	a0,a0,1546 # 8002e1e0 <__func__.0+0x2f8>
    8001abde:	04d100ef          	jal	8002b42a <printf>
    8001abe2:	0003d797          	auipc	a5,0x3d
    8001abe6:	42f7c783          	lbu	a5,1071(a5) # 80058011 <excpt+0x1>
    8001abea:	00013597          	auipc	a1,0x13
    8001abee:	5ce58593          	addi	a1,a1,1486 # 8002e1b8 <__func__.0+0x2d0>
    8001abf2:	cf89                	beqz	a5,8001ac0c <load_access_fault_10+0xec>
    8001abf4:	6418                	ld	a4,8(s0)
    8001abf6:	4795                	li	a5,5
    8001abf8:	00013597          	auipc	a1,0x13
    8001abfc:	5b058593          	addi	a1,a1,1456 # 8002e1a8 <__func__.0+0x2c0>
    8001ac00:	00f70663          	beq	a4,a5,8001ac0c <load_access_fault_10+0xec>
    8001ac04:	00013597          	auipc	a1,0x13
    8001ac08:	5b458593          	addi	a1,a1,1460 # 8002e1b8 <__func__.0+0x2d0>
    8001ac0c:	00013517          	auipc	a0,0x13
    8001ac10:	5ec50513          	addi	a0,a0,1516 # 8002e1f8 <__func__.0+0x310>
    8001ac14:	017100ef          	jal	8002b42a <printf>
    8001ac18:	0003d797          	auipc	a5,0x3d
    8001ac1c:	3f97c783          	lbu	a5,1017(a5) # 80058011 <excpt+0x1>
    8001ac20:	c789                	beqz	a5,8001ac2a <load_access_fault_10+0x10a>
    8001ac22:	6418                	ld	a4,8(s0)
    8001ac24:	4795                	li	a5,5
    8001ac26:	00f70c63          	beq	a4,a5,8001ac3e <load_access_fault_10+0x11e>
    8001ac2a:	00013517          	auipc	a0,0x13
    8001ac2e:	5d650513          	addi	a0,a0,1494 # 8002e200 <__func__.0+0x318>
    8001ac32:	7f8100ef          	jal	8002b42a <printf>
    8001ac36:	02900513          	li	a0,41
    8001ac3a:	4de0f0ef          	jal	8002a118 <putchar>
    8001ac3e:	4529                	li	a0,10
    8001ac40:	4d80f0ef          	jal	8002a118 <putchar>
    8001ac44:	0003d497          	auipc	s1,0x3d
    8001ac48:	3cd4c483          	lbu	s1,973(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001ac4c:	00013597          	auipc	a1,0x13
    8001ac50:	56c58593          	addi	a1,a1,1388 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ac54:	cc91                	beqz	s1,8001ac70 <load_access_fault_10+0x150>
    8001ac56:	6418                	ld	a4,8(s0)
    8001ac58:	4795                	li	a5,5
    TEST_END();
    8001ac5a:	00013597          	auipc	a1,0x13
    8001ac5e:	54e58593          	addi	a1,a1,1358 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ac62:	00f70763          	beq	a4,a5,8001ac70 <load_access_fault_10+0x150>
    8001ac66:	4481                	li	s1,0
    TEST_END();
    8001ac68:	00013597          	auipc	a1,0x13
    8001ac6c:	55058593          	addi	a1,a1,1360 # 8002e1b8 <__func__.0+0x2d0>
    8001ac70:	00013517          	auipc	a0,0x13
    8001ac74:	5f050513          	addi	a0,a0,1520 # 8002e260 <__func__.0+0x378>
    8001ac78:	7b2100ef          	jal	8002b42a <printf>
    8001ac7c:	4511                	li	a0,4
    8001ac7e:	a8ae60ef          	jal	80000f08 <goto_priv>
    8001ac82:	ba3e60ef          	jal	80001824 <reset_state>
}
    8001ac86:	60e2                	ld	ra,24(sp)
    8001ac88:	6442                	ld	s0,16(sp)
    8001ac8a:	8526                	mv	a0,s1
    8001ac8c:	64a2                	ld	s1,8(sp)
    8001ac8e:	6105                	addi	sp,sp,32
    8001ac90:	8082                	ret

000000008001ac92 <store_access_fault_1>:


bool store_access_fault_1(){
    8001ac92:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ac94:	00012597          	auipc	a1,0x12
    8001ac98:	58c58593          	addi	a1,a1,1420 # 8002d220 <__func__.29>
    8001ac9c:	00013517          	auipc	a0,0x13
    8001aca0:	52c50513          	addi	a0,a0,1324 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001aca4:	ec06                	sd	ra,24(sp)
    8001aca6:	e822                	sd	s0,16(sp)
    8001aca8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001acaa:	780100ef          	jal	8002b42a <printf>
    8001acae:	4529                	li	a0,10
    8001acb0:	4680f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001acb4:	4511                	li	a0,4
    8001acb6:	a52e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001acba:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001acbe:	10000793          	li	a5,256
    8001acc2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001acc6:	20000793          	li	a5,512
    8001acca:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001acce:	40000793          	li	a5,1024
    8001acd2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001acd6:	6785                	lui	a5,0x1
    8001acd8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001acdc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ace0:	4785                	li	a5,1
    8001ace2:	07fe                	slli	a5,a5,0x1f
    8001ace4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ace8:	08100793          	li	a5,129
    8001acec:	07e2                	slli	a5,a5,0x18
    8001acee:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001acf2:	67a1                	lui	a5,0x8
    8001acf4:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001acf8:	12000073          	sfence.vma
    asm volatile(
    8001acfc:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001ad00:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001ad04:	908e60ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001ad08:	4785                	li	a5,1
    8001ad0a:	1786                	slli	a5,a5,0x21
    8001ad0c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ad10:	4701                	li	a4,0
    8001ad12:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001ad16:	0003d597          	auipc	a1,0x3d
    8001ad1a:	2fb5c583          	lbu	a1,763(a1) # 80058011 <excpt+0x1>
    8001ad1e:	00014517          	auipc	a0,0x14
    8001ad22:	02250513          	addi	a0,a0,34 # 8002ed40 <__func__.0+0xe58>
    8001ad26:	0003d417          	auipc	s0,0x3d
    8001ad2a:	2ea40413          	addi	s0,s0,746 # 80058010 <excpt>
    8001ad2e:	6fc100ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001ad32:	640c                	ld	a1,8(s0)
    8001ad34:	00014517          	auipc	a0,0x14
    8001ad38:	00c50513          	addi	a0,a0,12 # 8002ed40 <__func__.0+0xe58>
    8001ad3c:	6ee100ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad40:	08200593          	li	a1,130
    8001ad44:	0001a617          	auipc	a2,0x1a
    8001ad48:	c7460613          	addi	a2,a2,-908 # 800349b8 <__func__.0+0x6ad0>
    8001ad4c:	00013517          	auipc	a0,0x13
    8001ad50:	49450513          	addi	a0,a0,1172 # 8002e1e0 <__func__.0+0x2f8>
    8001ad54:	6d6100ef          	jal	8002b42a <printf>
    8001ad58:	0003d797          	auipc	a5,0x3d
    8001ad5c:	2b97c783          	lbu	a5,697(a5) # 80058011 <excpt+0x1>
    8001ad60:	00013597          	auipc	a1,0x13
    8001ad64:	45858593          	addi	a1,a1,1112 # 8002e1b8 <__func__.0+0x2d0>
    8001ad68:	cf89                	beqz	a5,8001ad82 <store_access_fault_1+0xf0>
    8001ad6a:	6418                	ld	a4,8(s0)
    8001ad6c:	479d                	li	a5,7
    8001ad6e:	00013597          	auipc	a1,0x13
    8001ad72:	43a58593          	addi	a1,a1,1082 # 8002e1a8 <__func__.0+0x2c0>
    8001ad76:	00f70663          	beq	a4,a5,8001ad82 <store_access_fault_1+0xf0>
    8001ad7a:	00013597          	auipc	a1,0x13
    8001ad7e:	43e58593          	addi	a1,a1,1086 # 8002e1b8 <__func__.0+0x2d0>
    8001ad82:	00013517          	auipc	a0,0x13
    8001ad86:	47650513          	addi	a0,a0,1142 # 8002e1f8 <__func__.0+0x310>
    8001ad8a:	6a0100ef          	jal	8002b42a <printf>
    8001ad8e:	0003d797          	auipc	a5,0x3d
    8001ad92:	2837c783          	lbu	a5,643(a5) # 80058011 <excpt+0x1>
    8001ad96:	c789                	beqz	a5,8001ada0 <store_access_fault_1+0x10e>
    8001ad98:	6418                	ld	a4,8(s0)
    8001ad9a:	479d                	li	a5,7
    8001ad9c:	00f70c63          	beq	a4,a5,8001adb4 <store_access_fault_1+0x122>
    8001ada0:	00013517          	auipc	a0,0x13
    8001ada4:	46050513          	addi	a0,a0,1120 # 8002e200 <__func__.0+0x318>
    8001ada8:	682100ef          	jal	8002b42a <printf>
    8001adac:	02900513          	li	a0,41
    8001adb0:	3680f0ef          	jal	8002a118 <putchar>
    8001adb4:	4529                	li	a0,10
    8001adb6:	3620f0ef          	jal	8002a118 <putchar>
    8001adba:	0003d497          	auipc	s1,0x3d
    8001adbe:	2574c483          	lbu	s1,599(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001adc2:	00013597          	auipc	a1,0x13
    8001adc6:	3f658593          	addi	a1,a1,1014 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001adca:	cc91                	beqz	s1,8001ade6 <store_access_fault_1+0x154>
    8001adcc:	6418                	ld	a4,8(s0)
    8001adce:	479d                	li	a5,7
    TEST_END();
    8001add0:	00013597          	auipc	a1,0x13
    8001add4:	3d858593          	addi	a1,a1,984 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001add8:	00f70763          	beq	a4,a5,8001ade6 <store_access_fault_1+0x154>
    8001addc:	4481                	li	s1,0
    TEST_END();
    8001adde:	00013597          	auipc	a1,0x13
    8001ade2:	3da58593          	addi	a1,a1,986 # 8002e1b8 <__func__.0+0x2d0>
    8001ade6:	00013517          	auipc	a0,0x13
    8001adea:	47a50513          	addi	a0,a0,1146 # 8002e260 <__func__.0+0x378>
    8001adee:	63c100ef          	jal	8002b42a <printf>
    8001adf2:	4511                	li	a0,4
    8001adf4:	914e60ef          	jal	80000f08 <goto_priv>
    8001adf8:	a2de60ef          	jal	80001824 <reset_state>
}
    8001adfc:	60e2                	ld	ra,24(sp)
    8001adfe:	6442                	ld	s0,16(sp)
    8001ae00:	8526                	mv	a0,s1
    8001ae02:	64a2                	ld	s1,8(sp)
    8001ae04:	6105                	addi	sp,sp,32
    8001ae06:	8082                	ret

000000008001ae08 <store_access_fault_2>:

bool store_access_fault_2(){
    8001ae08:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ae0a:	00012597          	auipc	a1,0x12
    8001ae0e:	42e58593          	addi	a1,a1,1070 # 8002d238 <__func__.28>
    8001ae12:	00013517          	auipc	a0,0x13
    8001ae16:	3b650513          	addi	a0,a0,950 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001ae1a:	ec06                	sd	ra,24(sp)
    8001ae1c:	e822                	sd	s0,16(sp)
    8001ae1e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ae20:	60a100ef          	jal	8002b42a <printf>
    8001ae24:	4529                	li	a0,10
    8001ae26:	2f20f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001ae2a:	4511                	li	a0,4
    8001ae2c:	8dce60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ae30:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ae34:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ae38:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ae3c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ae40:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ae44:	10000793          	li	a5,256
    8001ae48:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ae4c:	20000793          	li	a5,512
    8001ae50:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ae54:	40000793          	li	a5,1024
    8001ae58:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ae5c:	6785                	lui	a5,0x1
    8001ae5e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ae62:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ae66:	4785                	li	a5,1
    8001ae68:	07fe                	slli	a5,a5,0x1f
    8001ae6a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ae6e:	08100793          	li	a5,129
    8001ae72:	07e2                	slli	a5,a5,0x18
    8001ae74:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ae78:	08000793          	li	a5,128
    8001ae7c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ae80:	67a1                	lui	a5,0x8
    8001ae82:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ae86:	450d                	li	a0,3
    8001ae88:	880e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ae8c:	f81e50ef          	jal	80000e0c <test_setup_except_function>
    8001ae90:	4785                	li	a5,1
    8001ae92:	1786                	slli	a5,a5,0x21
    8001ae94:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ae98:	4701                	li	a4,0
    8001ae9a:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae9e:	08200593          	li	a1,130
    8001aea2:	0001a617          	auipc	a2,0x1a
    8001aea6:	b4e60613          	addi	a2,a2,-1202 # 800349f0 <__func__.0+0x6b08>
    8001aeaa:	00013517          	auipc	a0,0x13
    8001aeae:	33650513          	addi	a0,a0,822 # 8002e1e0 <__func__.0+0x2f8>
    8001aeb2:	578100ef          	jal	8002b42a <printf>
    8001aeb6:	0003d797          	auipc	a5,0x3d
    8001aeba:	15b7c783          	lbu	a5,347(a5) # 80058011 <excpt+0x1>
    8001aebe:	0003d497          	auipc	s1,0x3d
    8001aec2:	15248493          	addi	s1,s1,338 # 80058010 <excpt>
    8001aec6:	00013597          	auipc	a1,0x13
    8001aeca:	2f258593          	addi	a1,a1,754 # 8002e1b8 <__func__.0+0x2d0>
    8001aece:	cf89                	beqz	a5,8001aee8 <store_access_fault_2+0xe0>
    8001aed0:	6498                	ld	a4,8(s1)
    8001aed2:	479d                	li	a5,7
    8001aed4:	00013597          	auipc	a1,0x13
    8001aed8:	2d458593          	addi	a1,a1,724 # 8002e1a8 <__func__.0+0x2c0>
    8001aedc:	00f70663          	beq	a4,a5,8001aee8 <store_access_fault_2+0xe0>
    8001aee0:	00013597          	auipc	a1,0x13
    8001aee4:	2d858593          	addi	a1,a1,728 # 8002e1b8 <__func__.0+0x2d0>
    8001aee8:	00013517          	auipc	a0,0x13
    8001aeec:	31050513          	addi	a0,a0,784 # 8002e1f8 <__func__.0+0x310>
    8001aef0:	53a100ef          	jal	8002b42a <printf>
    8001aef4:	0003d797          	auipc	a5,0x3d
    8001aef8:	11d7c783          	lbu	a5,285(a5) # 80058011 <excpt+0x1>
    8001aefc:	c789                	beqz	a5,8001af06 <store_access_fault_2+0xfe>
    8001aefe:	6498                	ld	a4,8(s1)
    8001af00:	479d                	li	a5,7
    8001af02:	00f70c63          	beq	a4,a5,8001af1a <store_access_fault_2+0x112>
    8001af06:	00013517          	auipc	a0,0x13
    8001af0a:	2fa50513          	addi	a0,a0,762 # 8002e200 <__func__.0+0x318>
    8001af0e:	51c100ef          	jal	8002b42a <printf>
    8001af12:	02900513          	li	a0,41
    8001af16:	2020f0ef          	jal	8002a118 <putchar>
    8001af1a:	4529                	li	a0,10
    8001af1c:	1fc0f0ef          	jal	8002a118 <putchar>
    8001af20:	0003d417          	auipc	s0,0x3d
    8001af24:	0f144403          	lbu	s0,241(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001af28:	00013597          	auipc	a1,0x13
    8001af2c:	29058593          	addi	a1,a1,656 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af30:	cc11                	beqz	s0,8001af4c <store_access_fault_2+0x144>
    8001af32:	6498                	ld	a4,8(s1)
    8001af34:	479d                	li	a5,7
    TEST_END();
    8001af36:	00013597          	auipc	a1,0x13
    8001af3a:	27258593          	addi	a1,a1,626 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af3e:	00f70763          	beq	a4,a5,8001af4c <store_access_fault_2+0x144>
    8001af42:	4401                	li	s0,0
    TEST_END();
    8001af44:	00013597          	auipc	a1,0x13
    8001af48:	27458593          	addi	a1,a1,628 # 8002e1b8 <__func__.0+0x2d0>
    8001af4c:	00013517          	auipc	a0,0x13
    8001af50:	31450513          	addi	a0,a0,788 # 8002e260 <__func__.0+0x378>
    8001af54:	4d6100ef          	jal	8002b42a <printf>
    8001af58:	4511                	li	a0,4
    8001af5a:	fafe50ef          	jal	80000f08 <goto_priv>
    8001af5e:	8c7e60ef          	jal	80001824 <reset_state>
}
    8001af62:	60e2                	ld	ra,24(sp)
    8001af64:	8522                	mv	a0,s0
    8001af66:	6442                	ld	s0,16(sp)
    8001af68:	64a2                	ld	s1,8(sp)
    8001af6a:	6105                	addi	sp,sp,32
    8001af6c:	8082                	ret

000000008001af6e <store_access_fault_3>:


bool store_access_fault_3(){
    8001af6e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001af70:	00012597          	auipc	a1,0x12
    8001af74:	2e058593          	addi	a1,a1,736 # 8002d250 <__func__.27>
    8001af78:	00013517          	auipc	a0,0x13
    8001af7c:	25050513          	addi	a0,a0,592 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001af80:	ec06                	sd	ra,24(sp)
    8001af82:	e822                	sd	s0,16(sp)
    8001af84:	e426                	sd	s1,8(sp)
    TEST_START();
    8001af86:	4a4100ef          	jal	8002b42a <printf>
    8001af8a:	4529                	li	a0,10
    8001af8c:	18c0f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001af90:	4511                	li	a0,4
    8001af92:	f77e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001af96:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001af9a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001af9e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001afa2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001afa6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001afaa:	10000793          	li	a5,256
    8001afae:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001afb2:	20000793          	li	a5,512
    8001afb6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001afba:	40000793          	li	a5,1024
    8001afbe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001afc2:	6785                	lui	a5,0x1
    8001afc4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001afc8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001afcc:	4785                	li	a5,1
    8001afce:	07fe                	slli	a5,a5,0x1f
    8001afd0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001afd4:	08100793          	li	a5,129
    8001afd8:	07e2                	slli	a5,a5,0x18
    8001afda:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001afde:	08000793          	li	a5,128
    8001afe2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001afe6:	67a1                	lui	a5,0x8
    8001afe8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001afec:	4505                	li	a0,1
    8001afee:	f1be50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aff2:	e1be50ef          	jal	80000e0c <test_setup_except_function>
    8001aff6:	4785                	li	a5,1
    8001aff8:	1786                	slli	a5,a5,0x21
    8001affa:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001affe:	4701                	li	a4,0
    8001b000:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b004:	08200593          	li	a1,130
    8001b008:	0001a617          	auipc	a2,0x1a
    8001b00c:	a2060613          	addi	a2,a2,-1504 # 80034a28 <__func__.0+0x6b40>
    8001b010:	00013517          	auipc	a0,0x13
    8001b014:	1d050513          	addi	a0,a0,464 # 8002e1e0 <__func__.0+0x2f8>
    8001b018:	412100ef          	jal	8002b42a <printf>
    8001b01c:	0003d797          	auipc	a5,0x3d
    8001b020:	ff57c783          	lbu	a5,-11(a5) # 80058011 <excpt+0x1>
    8001b024:	0003d497          	auipc	s1,0x3d
    8001b028:	fec48493          	addi	s1,s1,-20 # 80058010 <excpt>
    8001b02c:	00013597          	auipc	a1,0x13
    8001b030:	18c58593          	addi	a1,a1,396 # 8002e1b8 <__func__.0+0x2d0>
    8001b034:	cf89                	beqz	a5,8001b04e <store_access_fault_3+0xe0>
    8001b036:	6498                	ld	a4,8(s1)
    8001b038:	479d                	li	a5,7
    8001b03a:	00013597          	auipc	a1,0x13
    8001b03e:	16e58593          	addi	a1,a1,366 # 8002e1a8 <__func__.0+0x2c0>
    8001b042:	00f70663          	beq	a4,a5,8001b04e <store_access_fault_3+0xe0>
    8001b046:	00013597          	auipc	a1,0x13
    8001b04a:	17258593          	addi	a1,a1,370 # 8002e1b8 <__func__.0+0x2d0>
    8001b04e:	00013517          	auipc	a0,0x13
    8001b052:	1aa50513          	addi	a0,a0,426 # 8002e1f8 <__func__.0+0x310>
    8001b056:	3d4100ef          	jal	8002b42a <printf>
    8001b05a:	0003d797          	auipc	a5,0x3d
    8001b05e:	fb77c783          	lbu	a5,-73(a5) # 80058011 <excpt+0x1>
    8001b062:	c789                	beqz	a5,8001b06c <store_access_fault_3+0xfe>
    8001b064:	6498                	ld	a4,8(s1)
    8001b066:	479d                	li	a5,7
    8001b068:	00f70c63          	beq	a4,a5,8001b080 <store_access_fault_3+0x112>
    8001b06c:	00013517          	auipc	a0,0x13
    8001b070:	19450513          	addi	a0,a0,404 # 8002e200 <__func__.0+0x318>
    8001b074:	3b6100ef          	jal	8002b42a <printf>
    8001b078:	02900513          	li	a0,41
    8001b07c:	09c0f0ef          	jal	8002a118 <putchar>
    8001b080:	4529                	li	a0,10
    8001b082:	0960f0ef          	jal	8002a118 <putchar>
    8001b086:	0003d417          	auipc	s0,0x3d
    8001b08a:	f8b44403          	lbu	s0,-117(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b08e:	00013597          	auipc	a1,0x13
    8001b092:	12a58593          	addi	a1,a1,298 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b096:	cc11                	beqz	s0,8001b0b2 <store_access_fault_3+0x144>
    8001b098:	6498                	ld	a4,8(s1)
    8001b09a:	479d                	li	a5,7
    TEST_END();
    8001b09c:	00013597          	auipc	a1,0x13
    8001b0a0:	10c58593          	addi	a1,a1,268 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b0a4:	00f70763          	beq	a4,a5,8001b0b2 <store_access_fault_3+0x144>
    8001b0a8:	4401                	li	s0,0
    TEST_END();
    8001b0aa:	00013597          	auipc	a1,0x13
    8001b0ae:	10e58593          	addi	a1,a1,270 # 8002e1b8 <__func__.0+0x2d0>
    8001b0b2:	00013517          	auipc	a0,0x13
    8001b0b6:	1ae50513          	addi	a0,a0,430 # 8002e260 <__func__.0+0x378>
    8001b0ba:	370100ef          	jal	8002b42a <printf>
    8001b0be:	4511                	li	a0,4
    8001b0c0:	e49e50ef          	jal	80000f08 <goto_priv>
    8001b0c4:	f60e60ef          	jal	80001824 <reset_state>
}
    8001b0c8:	60e2                	ld	ra,24(sp)
    8001b0ca:	8522                	mv	a0,s0
    8001b0cc:	6442                	ld	s0,16(sp)
    8001b0ce:	64a2                	ld	s1,8(sp)
    8001b0d0:	6105                	addi	sp,sp,32
    8001b0d2:	8082                	ret

000000008001b0d4 <store_access_fault_4>:

bool store_access_fault_4(){
    8001b0d4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b0d6:	00012597          	auipc	a1,0x12
    8001b0da:	19258593          	addi	a1,a1,402 # 8002d268 <__func__.26>
    8001b0de:	00013517          	auipc	a0,0x13
    8001b0e2:	0ea50513          	addi	a0,a0,234 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001b0e6:	ec06                	sd	ra,24(sp)
    8001b0e8:	e822                	sd	s0,16(sp)
    8001b0ea:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b0ec:	33e100ef          	jal	8002b42a <printf>
    8001b0f0:	4529                	li	a0,10
    8001b0f2:	0260f0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b0f6:	4511                	li	a0,4
    8001b0f8:	e11e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b0fc:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b100:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b104:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b108:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b10c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b110:	10000793          	li	a5,256
    8001b114:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b118:	20000793          	li	a5,512
    8001b11c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b120:	40000793          	li	a5,1024
    8001b124:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b128:	6785                	lui	a5,0x1
    8001b12a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b12e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b132:	4785                	li	a5,1
    8001b134:	07fe                	slli	a5,a5,0x1f
    8001b136:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b13a:	08100793          	li	a5,129
    8001b13e:	07e2                	slli	a5,a5,0x18
    8001b140:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b144:	08000793          	li	a5,128
    8001b148:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b14c:	67a1                	lui	a5,0x8
    8001b14e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b152:	4501                	li	a0,0
    8001b154:	db5e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b158:	cb5e50ef          	jal	80000e0c <test_setup_except_function>
    8001b15c:	4785                	li	a5,1
    8001b15e:	1786                	slli	a5,a5,0x21
    8001b160:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b164:	4701                	li	a4,0
    8001b166:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b16a:	08200593          	li	a1,130
    8001b16e:	0001a617          	auipc	a2,0x1a
    8001b172:	8f260613          	addi	a2,a2,-1806 # 80034a60 <__func__.0+0x6b78>
    8001b176:	00013517          	auipc	a0,0x13
    8001b17a:	06a50513          	addi	a0,a0,106 # 8002e1e0 <__func__.0+0x2f8>
    8001b17e:	2ac100ef          	jal	8002b42a <printf>
    8001b182:	0003d797          	auipc	a5,0x3d
    8001b186:	e8f7c783          	lbu	a5,-369(a5) # 80058011 <excpt+0x1>
    8001b18a:	0003d497          	auipc	s1,0x3d
    8001b18e:	e8648493          	addi	s1,s1,-378 # 80058010 <excpt>
    8001b192:	00013597          	auipc	a1,0x13
    8001b196:	02658593          	addi	a1,a1,38 # 8002e1b8 <__func__.0+0x2d0>
    8001b19a:	cf89                	beqz	a5,8001b1b4 <store_access_fault_4+0xe0>
    8001b19c:	6498                	ld	a4,8(s1)
    8001b19e:	479d                	li	a5,7
    8001b1a0:	00013597          	auipc	a1,0x13
    8001b1a4:	00858593          	addi	a1,a1,8 # 8002e1a8 <__func__.0+0x2c0>
    8001b1a8:	00f70663          	beq	a4,a5,8001b1b4 <store_access_fault_4+0xe0>
    8001b1ac:	00013597          	auipc	a1,0x13
    8001b1b0:	00c58593          	addi	a1,a1,12 # 8002e1b8 <__func__.0+0x2d0>
    8001b1b4:	00013517          	auipc	a0,0x13
    8001b1b8:	04450513          	addi	a0,a0,68 # 8002e1f8 <__func__.0+0x310>
    8001b1bc:	26e100ef          	jal	8002b42a <printf>
    8001b1c0:	0003d797          	auipc	a5,0x3d
    8001b1c4:	e517c783          	lbu	a5,-431(a5) # 80058011 <excpt+0x1>
    8001b1c8:	c789                	beqz	a5,8001b1d2 <store_access_fault_4+0xfe>
    8001b1ca:	6498                	ld	a4,8(s1)
    8001b1cc:	479d                	li	a5,7
    8001b1ce:	00f70c63          	beq	a4,a5,8001b1e6 <store_access_fault_4+0x112>
    8001b1d2:	00013517          	auipc	a0,0x13
    8001b1d6:	02e50513          	addi	a0,a0,46 # 8002e200 <__func__.0+0x318>
    8001b1da:	250100ef          	jal	8002b42a <printf>
    8001b1de:	02900513          	li	a0,41
    8001b1e2:	7370e0ef          	jal	8002a118 <putchar>
    8001b1e6:	4529                	li	a0,10
    8001b1e8:	7310e0ef          	jal	8002a118 <putchar>
    8001b1ec:	0003d417          	auipc	s0,0x3d
    8001b1f0:	e2544403          	lbu	s0,-475(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b1f4:	00013597          	auipc	a1,0x13
    8001b1f8:	fc458593          	addi	a1,a1,-60 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b1fc:	cc11                	beqz	s0,8001b218 <store_access_fault_4+0x144>
    8001b1fe:	6498                	ld	a4,8(s1)
    8001b200:	479d                	li	a5,7
    TEST_END();
    8001b202:	00013597          	auipc	a1,0x13
    8001b206:	fa658593          	addi	a1,a1,-90 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b20a:	00f70763          	beq	a4,a5,8001b218 <store_access_fault_4+0x144>
    8001b20e:	4401                	li	s0,0
    TEST_END();
    8001b210:	00013597          	auipc	a1,0x13
    8001b214:	fa858593          	addi	a1,a1,-88 # 8002e1b8 <__func__.0+0x2d0>
    8001b218:	00013517          	auipc	a0,0x13
    8001b21c:	04850513          	addi	a0,a0,72 # 8002e260 <__func__.0+0x378>
    8001b220:	20a100ef          	jal	8002b42a <printf>
    8001b224:	4511                	li	a0,4
    8001b226:	ce3e50ef          	jal	80000f08 <goto_priv>
    8001b22a:	dfae60ef          	jal	80001824 <reset_state>
}
    8001b22e:	60e2                	ld	ra,24(sp)
    8001b230:	8522                	mv	a0,s0
    8001b232:	6442                	ld	s0,16(sp)
    8001b234:	64a2                	ld	s1,8(sp)
    8001b236:	6105                	addi	sp,sp,32
    8001b238:	8082                	ret

000000008001b23a <store_access_fault_5>:

bool store_access_fault_5(){
    8001b23a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b23c:	00012597          	auipc	a1,0x12
    8001b240:	04458593          	addi	a1,a1,68 # 8002d280 <__func__.25>
    8001b244:	00013517          	auipc	a0,0x13
    8001b248:	f8450513          	addi	a0,a0,-124 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001b24c:	e406                	sd	ra,8(sp)
    8001b24e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b250:	1da100ef          	jal	8002b42a <printf>
    8001b254:	4529                	li	a0,10
    8001b256:	6c30e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b25a:	4511                	li	a0,4
    8001b25c:	cade50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b260:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b264:	10000793          	li	a5,256
    8001b268:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b26c:	20000793          	li	a5,512
    8001b270:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b274:	40000793          	li	a5,1024
    8001b278:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b27c:	6785                	lui	a5,0x1
    8001b27e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b282:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b286:	4785                	li	a5,1
    8001b288:	07fe                	slli	a5,a5,0x1f
    8001b28a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b28e:	08100793          	li	a5,129
    8001b292:	07e2                	slli	a5,a5,0x18
    8001b294:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b298:	67a1                	lui	a5,0x8
    8001b29a:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b29e:	b6fe50ef          	jal	80000e0c <test_setup_except_function>
    8001b2a2:	4785                	li	a5,1
    8001b2a4:	1786                	slli	a5,a5,0x21
    8001b2a6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b2aa:	4701                	li	a4,0
    8001b2ac:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001b2b0:	0003d597          	auipc	a1,0x3d
    8001b2b4:	d615c583          	lbu	a1,-671(a1) # 80058011 <excpt+0x1>
    8001b2b8:	00014517          	auipc	a0,0x14
    8001b2bc:	a8850513          	addi	a0,a0,-1400 # 8002ed40 <__func__.0+0xe58>
    8001b2c0:	16a100ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001b2c4:	0003d597          	auipc	a1,0x3d
    8001b2c8:	d545b583          	ld	a1,-684(a1) # 80058018 <excpt+0x8>
    8001b2cc:	00014517          	auipc	a0,0x14
    8001b2d0:	a7450513          	addi	a0,a0,-1420 # 8002ed40 <__func__.0+0xe58>
    8001b2d4:	156100ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2d8:	08200593          	li	a1,130
    8001b2dc:	00019617          	auipc	a2,0x19
    8001b2e0:	7bc60613          	addi	a2,a2,1980 # 80034a98 <__func__.0+0x6bb0>
    8001b2e4:	00013517          	auipc	a0,0x13
    8001b2e8:	efc50513          	addi	a0,a0,-260 # 8002e1e0 <__func__.0+0x2f8>
    8001b2ec:	13e100ef          	jal	8002b42a <printf>
    8001b2f0:	0003d797          	auipc	a5,0x3d
    8001b2f4:	d217c783          	lbu	a5,-735(a5) # 80058011 <excpt+0x1>
    8001b2f8:	00013597          	auipc	a1,0x13
    8001b2fc:	eb058593          	addi	a1,a1,-336 # 8002e1a8 <__func__.0+0x2c0>
    8001b300:	c789                	beqz	a5,8001b30a <store_access_fault_5+0xd0>
    8001b302:	00013597          	auipc	a1,0x13
    8001b306:	eb658593          	addi	a1,a1,-330 # 8002e1b8 <__func__.0+0x2d0>
    8001b30a:	00013517          	auipc	a0,0x13
    8001b30e:	eee50513          	addi	a0,a0,-274 # 8002e1f8 <__func__.0+0x310>
    8001b312:	118100ef          	jal	8002b42a <printf>
    8001b316:	0003d797          	auipc	a5,0x3d
    8001b31a:	cfb7c783          	lbu	a5,-773(a5) # 80058011 <excpt+0x1>
    8001b31e:	e7a1                	bnez	a5,8001b366 <store_access_fault_5+0x12c>
    8001b320:	4529                	li	a0,10
    8001b322:	5f70e0ef          	jal	8002a118 <putchar>
    8001b326:	0003d797          	auipc	a5,0x3d
    8001b32a:	ceb7c783          	lbu	a5,-789(a5) # 80058011 <excpt+0x1>
    8001b32e:	e795                	bnez	a5,8001b35a <store_access_fault_5+0x120>
    8001b330:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b332:	00013597          	auipc	a1,0x13
    8001b336:	e7658593          	addi	a1,a1,-394 # 8002e1a8 <__func__.0+0x2c0>
    8001b33a:	00013517          	auipc	a0,0x13
    8001b33e:	f2650513          	addi	a0,a0,-218 # 8002e260 <__func__.0+0x378>
    8001b342:	0e8100ef          	jal	8002b42a <printf>
    8001b346:	4511                	li	a0,4
    8001b348:	bc1e50ef          	jal	80000f08 <goto_priv>
    8001b34c:	cd8e60ef          	jal	80001824 <reset_state>
}
    8001b350:	60a2                	ld	ra,8(sp)
    8001b352:	8522                	mv	a0,s0
    8001b354:	6402                	ld	s0,0(sp)
    8001b356:	0141                	addi	sp,sp,16
    8001b358:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b35a:	4401                	li	s0,0
    TEST_END();
    8001b35c:	00013597          	auipc	a1,0x13
    8001b360:	e5c58593          	addi	a1,a1,-420 # 8002e1b8 <__func__.0+0x2d0>
    8001b364:	bfd9                	j	8001b33a <store_access_fault_5+0x100>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b366:	00013517          	auipc	a0,0x13
    8001b36a:	e9a50513          	addi	a0,a0,-358 # 8002e200 <__func__.0+0x318>
    8001b36e:	0bc100ef          	jal	8002b42a <printf>
    8001b372:	02900513          	li	a0,41
    8001b376:	5a30e0ef          	jal	8002a118 <putchar>
    8001b37a:	b75d                	j	8001b320 <store_access_fault_5+0xe6>

000000008001b37c <store_access_fault_6>:


bool store_access_fault_6(){
    8001b37c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b37e:	00012597          	auipc	a1,0x12
    8001b382:	f1a58593          	addi	a1,a1,-230 # 8002d298 <__func__.24>
    8001b386:	00013517          	auipc	a0,0x13
    8001b38a:	e4250513          	addi	a0,a0,-446 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001b38e:	ec06                	sd	ra,24(sp)
    8001b390:	e822                	sd	s0,16(sp)
    8001b392:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b394:	096100ef          	jal	8002b42a <printf>
    8001b398:	4529                	li	a0,10
    8001b39a:	57f0e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b39e:	4511                	li	a0,4
    8001b3a0:	b69e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b3a4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b3a8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b3ac:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b3b0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b3b4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b3b8:	10000793          	li	a5,256
    8001b3bc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b3c0:	20000793          	li	a5,512
    8001b3c4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b3c8:	40000793          	li	a5,1024
    8001b3cc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b3d0:	6785                	lui	a5,0x1
    8001b3d2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b3d6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b3da:	4785                	li	a5,1
    8001b3dc:	07fe                	slli	a5,a5,0x1f
    8001b3de:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b3e2:	08100793          	li	a5,129
    8001b3e6:	07e2                	slli	a5,a5,0x18
    8001b3e8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b3ec:	08000793          	li	a5,128
    8001b3f0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b3f4:	67a1                	lui	a5,0x8
    8001b3f6:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b3fa:	450d                	li	a0,3
    8001b3fc:	b0de50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b400:	a0de50ef          	jal	80000e0c <test_setup_except_function>
    8001b404:	4785                	li	a5,1
    8001b406:	1786                	slli	a5,a5,0x21
    8001b408:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b40c:	4701                	li	a4,0
    8001b40e:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b412:	08200593          	li	a1,130
    8001b416:	00019617          	auipc	a2,0x19
    8001b41a:	6ba60613          	addi	a2,a2,1722 # 80034ad0 <__func__.0+0x6be8>
    8001b41e:	00013517          	auipc	a0,0x13
    8001b422:	dc250513          	addi	a0,a0,-574 # 8002e1e0 <__func__.0+0x2f8>
    8001b426:	004100ef          	jal	8002b42a <printf>
    8001b42a:	0003d797          	auipc	a5,0x3d
    8001b42e:	be77c783          	lbu	a5,-1049(a5) # 80058011 <excpt+0x1>
    8001b432:	0003d497          	auipc	s1,0x3d
    8001b436:	bde48493          	addi	s1,s1,-1058 # 80058010 <excpt>
    8001b43a:	00013597          	auipc	a1,0x13
    8001b43e:	d7e58593          	addi	a1,a1,-642 # 8002e1b8 <__func__.0+0x2d0>
    8001b442:	cf89                	beqz	a5,8001b45c <store_access_fault_6+0xe0>
    8001b444:	6498                	ld	a4,8(s1)
    8001b446:	479d                	li	a5,7
    8001b448:	00013597          	auipc	a1,0x13
    8001b44c:	d6058593          	addi	a1,a1,-672 # 8002e1a8 <__func__.0+0x2c0>
    8001b450:	00f70663          	beq	a4,a5,8001b45c <store_access_fault_6+0xe0>
    8001b454:	00013597          	auipc	a1,0x13
    8001b458:	d6458593          	addi	a1,a1,-668 # 8002e1b8 <__func__.0+0x2d0>
    8001b45c:	00013517          	auipc	a0,0x13
    8001b460:	d9c50513          	addi	a0,a0,-612 # 8002e1f8 <__func__.0+0x310>
    8001b464:	7c70f0ef          	jal	8002b42a <printf>
    8001b468:	0003d797          	auipc	a5,0x3d
    8001b46c:	ba97c783          	lbu	a5,-1111(a5) # 80058011 <excpt+0x1>
    8001b470:	c789                	beqz	a5,8001b47a <store_access_fault_6+0xfe>
    8001b472:	6498                	ld	a4,8(s1)
    8001b474:	479d                	li	a5,7
    8001b476:	00f70c63          	beq	a4,a5,8001b48e <store_access_fault_6+0x112>
    8001b47a:	00013517          	auipc	a0,0x13
    8001b47e:	d8650513          	addi	a0,a0,-634 # 8002e200 <__func__.0+0x318>
    8001b482:	7a90f0ef          	jal	8002b42a <printf>
    8001b486:	02900513          	li	a0,41
    8001b48a:	48f0e0ef          	jal	8002a118 <putchar>
    8001b48e:	4529                	li	a0,10
    8001b490:	4890e0ef          	jal	8002a118 <putchar>
    8001b494:	0003d417          	auipc	s0,0x3d
    8001b498:	b7d44403          	lbu	s0,-1155(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b49c:	00013597          	auipc	a1,0x13
    8001b4a0:	d1c58593          	addi	a1,a1,-740 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4a4:	cc11                	beqz	s0,8001b4c0 <store_access_fault_6+0x144>
    8001b4a6:	6498                	ld	a4,8(s1)
    8001b4a8:	479d                	li	a5,7
    TEST_END();
    8001b4aa:	00013597          	auipc	a1,0x13
    8001b4ae:	cfe58593          	addi	a1,a1,-770 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4b2:	00f70763          	beq	a4,a5,8001b4c0 <store_access_fault_6+0x144>
    8001b4b6:	4401                	li	s0,0
    TEST_END();
    8001b4b8:	00013597          	auipc	a1,0x13
    8001b4bc:	d0058593          	addi	a1,a1,-768 # 8002e1b8 <__func__.0+0x2d0>
    8001b4c0:	00013517          	auipc	a0,0x13
    8001b4c4:	da050513          	addi	a0,a0,-608 # 8002e260 <__func__.0+0x378>
    8001b4c8:	7630f0ef          	jal	8002b42a <printf>
    8001b4cc:	4511                	li	a0,4
    8001b4ce:	a3be50ef          	jal	80000f08 <goto_priv>
    8001b4d2:	b52e60ef          	jal	80001824 <reset_state>
}
    8001b4d6:	60e2                	ld	ra,24(sp)
    8001b4d8:	8522                	mv	a0,s0
    8001b4da:	6442                	ld	s0,16(sp)
    8001b4dc:	64a2                	ld	s1,8(sp)
    8001b4de:	6105                	addi	sp,sp,32
    8001b4e0:	8082                	ret

000000008001b4e2 <store_access_fault_7>:


bool store_access_fault_7(){
    8001b4e2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b4e4:	00012597          	auipc	a1,0x12
    8001b4e8:	dcc58593          	addi	a1,a1,-564 # 8002d2b0 <__func__.23>
    8001b4ec:	00013517          	auipc	a0,0x13
    8001b4f0:	cdc50513          	addi	a0,a0,-804 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001b4f4:	ec06                	sd	ra,24(sp)
    8001b4f6:	e822                	sd	s0,16(sp)
    8001b4f8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b4fa:	7310f0ef          	jal	8002b42a <printf>
    8001b4fe:	4529                	li	a0,10
    8001b500:	4190e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b504:	4511                	li	a0,4
    8001b506:	a03e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b50a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b50e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b512:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b516:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b51a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b51e:	10000793          	li	a5,256
    8001b522:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b526:	20000793          	li	a5,512
    8001b52a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b52e:	40000793          	li	a5,1024
    8001b532:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b536:	6785                	lui	a5,0x1
    8001b538:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b53c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b540:	4785                	li	a5,1
    8001b542:	07fe                	slli	a5,a5,0x1f
    8001b544:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b548:	08100793          	li	a5,129
    8001b54c:	07e2                	slli	a5,a5,0x18
    8001b54e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b552:	08000793          	li	a5,128
    8001b556:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b55a:	67a1                	lui	a5,0x8
    8001b55c:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b560:	4505                	li	a0,1
    8001b562:	9a7e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b566:	8a7e50ef          	jal	80000e0c <test_setup_except_function>
    8001b56a:	4785                	li	a5,1
    8001b56c:	1786                	slli	a5,a5,0x21
    8001b56e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b572:	4701                	li	a4,0
    8001b574:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b578:	08200593          	li	a1,130
    8001b57c:	00019617          	auipc	a2,0x19
    8001b580:	58c60613          	addi	a2,a2,1420 # 80034b08 <__func__.0+0x6c20>
    8001b584:	00013517          	auipc	a0,0x13
    8001b588:	c5c50513          	addi	a0,a0,-932 # 8002e1e0 <__func__.0+0x2f8>
    8001b58c:	69f0f0ef          	jal	8002b42a <printf>
    8001b590:	0003d797          	auipc	a5,0x3d
    8001b594:	a817c783          	lbu	a5,-1407(a5) # 80058011 <excpt+0x1>
    8001b598:	0003d497          	auipc	s1,0x3d
    8001b59c:	a7848493          	addi	s1,s1,-1416 # 80058010 <excpt>
    8001b5a0:	00013597          	auipc	a1,0x13
    8001b5a4:	c1858593          	addi	a1,a1,-1000 # 8002e1b8 <__func__.0+0x2d0>
    8001b5a8:	cf89                	beqz	a5,8001b5c2 <store_access_fault_7+0xe0>
    8001b5aa:	6498                	ld	a4,8(s1)
    8001b5ac:	479d                	li	a5,7
    8001b5ae:	00013597          	auipc	a1,0x13
    8001b5b2:	bfa58593          	addi	a1,a1,-1030 # 8002e1a8 <__func__.0+0x2c0>
    8001b5b6:	00f70663          	beq	a4,a5,8001b5c2 <store_access_fault_7+0xe0>
    8001b5ba:	00013597          	auipc	a1,0x13
    8001b5be:	bfe58593          	addi	a1,a1,-1026 # 8002e1b8 <__func__.0+0x2d0>
    8001b5c2:	00013517          	auipc	a0,0x13
    8001b5c6:	c3650513          	addi	a0,a0,-970 # 8002e1f8 <__func__.0+0x310>
    8001b5ca:	6610f0ef          	jal	8002b42a <printf>
    8001b5ce:	0003d797          	auipc	a5,0x3d
    8001b5d2:	a437c783          	lbu	a5,-1469(a5) # 80058011 <excpt+0x1>
    8001b5d6:	c789                	beqz	a5,8001b5e0 <store_access_fault_7+0xfe>
    8001b5d8:	6498                	ld	a4,8(s1)
    8001b5da:	479d                	li	a5,7
    8001b5dc:	00f70c63          	beq	a4,a5,8001b5f4 <store_access_fault_7+0x112>
    8001b5e0:	00013517          	auipc	a0,0x13
    8001b5e4:	c2050513          	addi	a0,a0,-992 # 8002e200 <__func__.0+0x318>
    8001b5e8:	6430f0ef          	jal	8002b42a <printf>
    8001b5ec:	02900513          	li	a0,41
    8001b5f0:	3290e0ef          	jal	8002a118 <putchar>
    8001b5f4:	4529                	li	a0,10
    8001b5f6:	3230e0ef          	jal	8002a118 <putchar>
    8001b5fa:	0003d417          	auipc	s0,0x3d
    8001b5fe:	a1744403          	lbu	s0,-1513(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b602:	00013597          	auipc	a1,0x13
    8001b606:	bb658593          	addi	a1,a1,-1098 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b60a:	cc11                	beqz	s0,8001b626 <store_access_fault_7+0x144>
    8001b60c:	6498                	ld	a4,8(s1)
    8001b60e:	479d                	li	a5,7
    TEST_END();
    8001b610:	00013597          	auipc	a1,0x13
    8001b614:	b9858593          	addi	a1,a1,-1128 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b618:	00f70763          	beq	a4,a5,8001b626 <store_access_fault_7+0x144>
    8001b61c:	4401                	li	s0,0
    TEST_END();
    8001b61e:	00013597          	auipc	a1,0x13
    8001b622:	b9a58593          	addi	a1,a1,-1126 # 8002e1b8 <__func__.0+0x2d0>
    8001b626:	00013517          	auipc	a0,0x13
    8001b62a:	c3a50513          	addi	a0,a0,-966 # 8002e260 <__func__.0+0x378>
    8001b62e:	5fd0f0ef          	jal	8002b42a <printf>
    8001b632:	4511                	li	a0,4
    8001b634:	8d5e50ef          	jal	80000f08 <goto_priv>
    8001b638:	9ece60ef          	jal	80001824 <reset_state>
}
    8001b63c:	60e2                	ld	ra,24(sp)
    8001b63e:	8522                	mv	a0,s0
    8001b640:	6442                	ld	s0,16(sp)
    8001b642:	64a2                	ld	s1,8(sp)
    8001b644:	6105                	addi	sp,sp,32
    8001b646:	8082                	ret

000000008001b648 <store_access_fault_8>:

bool store_access_fault_8(){
    8001b648:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b64a:	00012597          	auipc	a1,0x12
    8001b64e:	c7e58593          	addi	a1,a1,-898 # 8002d2c8 <__func__.22>
    8001b652:	00013517          	auipc	a0,0x13
    8001b656:	b7650513          	addi	a0,a0,-1162 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001b65a:	ec06                	sd	ra,24(sp)
    8001b65c:	e822                	sd	s0,16(sp)
    8001b65e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b660:	5cb0f0ef          	jal	8002b42a <printf>
    8001b664:	4529                	li	a0,10
    8001b666:	2b30e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b66a:	4511                	li	a0,4
    8001b66c:	89de50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b670:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b674:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b678:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b67c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b680:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b684:	10000793          	li	a5,256
    8001b688:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b68c:	20000793          	li	a5,512
    8001b690:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b694:	40000793          	li	a5,1024
    8001b698:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b69c:	6785                	lui	a5,0x1
    8001b69e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b6a2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b6a6:	4785                	li	a5,1
    8001b6a8:	07fe                	slli	a5,a5,0x1f
    8001b6aa:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b6ae:	08100793          	li	a5,129
    8001b6b2:	07e2                	slli	a5,a5,0x18
    8001b6b4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b6b8:	08000793          	li	a5,128
    8001b6bc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b6c0:	67a1                	lui	a5,0x8
    8001b6c2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b6c6:	4501                	li	a0,0
    8001b6c8:	841e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b6cc:	f40e50ef          	jal	80000e0c <test_setup_except_function>
    8001b6d0:	4785                	li	a5,1
    8001b6d2:	1786                	slli	a5,a5,0x21
    8001b6d4:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b6d8:	4701                	li	a4,0
    8001b6da:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6de:	08200593          	li	a1,130
    8001b6e2:	00019617          	auipc	a2,0x19
    8001b6e6:	45e60613          	addi	a2,a2,1118 # 80034b40 <__func__.0+0x6c58>
    8001b6ea:	00013517          	auipc	a0,0x13
    8001b6ee:	af650513          	addi	a0,a0,-1290 # 8002e1e0 <__func__.0+0x2f8>
    8001b6f2:	5390f0ef          	jal	8002b42a <printf>
    8001b6f6:	0003d797          	auipc	a5,0x3d
    8001b6fa:	91b7c783          	lbu	a5,-1765(a5) # 80058011 <excpt+0x1>
    8001b6fe:	0003d497          	auipc	s1,0x3d
    8001b702:	91248493          	addi	s1,s1,-1774 # 80058010 <excpt>
    8001b706:	00013597          	auipc	a1,0x13
    8001b70a:	ab258593          	addi	a1,a1,-1358 # 8002e1b8 <__func__.0+0x2d0>
    8001b70e:	cf89                	beqz	a5,8001b728 <store_access_fault_8+0xe0>
    8001b710:	6498                	ld	a4,8(s1)
    8001b712:	479d                	li	a5,7
    8001b714:	00013597          	auipc	a1,0x13
    8001b718:	a9458593          	addi	a1,a1,-1388 # 8002e1a8 <__func__.0+0x2c0>
    8001b71c:	00f70663          	beq	a4,a5,8001b728 <store_access_fault_8+0xe0>
    8001b720:	00013597          	auipc	a1,0x13
    8001b724:	a9858593          	addi	a1,a1,-1384 # 8002e1b8 <__func__.0+0x2d0>
    8001b728:	00013517          	auipc	a0,0x13
    8001b72c:	ad050513          	addi	a0,a0,-1328 # 8002e1f8 <__func__.0+0x310>
    8001b730:	4fb0f0ef          	jal	8002b42a <printf>
    8001b734:	0003d797          	auipc	a5,0x3d
    8001b738:	8dd7c783          	lbu	a5,-1827(a5) # 80058011 <excpt+0x1>
    8001b73c:	c789                	beqz	a5,8001b746 <store_access_fault_8+0xfe>
    8001b73e:	6498                	ld	a4,8(s1)
    8001b740:	479d                	li	a5,7
    8001b742:	00f70c63          	beq	a4,a5,8001b75a <store_access_fault_8+0x112>
    8001b746:	00013517          	auipc	a0,0x13
    8001b74a:	aba50513          	addi	a0,a0,-1350 # 8002e200 <__func__.0+0x318>
    8001b74e:	4dd0f0ef          	jal	8002b42a <printf>
    8001b752:	02900513          	li	a0,41
    8001b756:	1c30e0ef          	jal	8002a118 <putchar>
    8001b75a:	4529                	li	a0,10
    8001b75c:	1bd0e0ef          	jal	8002a118 <putchar>
    8001b760:	0003d417          	auipc	s0,0x3d
    8001b764:	8b144403          	lbu	s0,-1871(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b768:	00013597          	auipc	a1,0x13
    8001b76c:	a5058593          	addi	a1,a1,-1456 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b770:	cc11                	beqz	s0,8001b78c <store_access_fault_8+0x144>
    8001b772:	6498                	ld	a4,8(s1)
    8001b774:	479d                	li	a5,7
    TEST_END();
    8001b776:	00013597          	auipc	a1,0x13
    8001b77a:	a3258593          	addi	a1,a1,-1486 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b77e:	00f70763          	beq	a4,a5,8001b78c <store_access_fault_8+0x144>
    8001b782:	4401                	li	s0,0
    TEST_END();
    8001b784:	00013597          	auipc	a1,0x13
    8001b788:	a3458593          	addi	a1,a1,-1484 # 8002e1b8 <__func__.0+0x2d0>
    8001b78c:	00013517          	auipc	a0,0x13
    8001b790:	ad450513          	addi	a0,a0,-1324 # 8002e260 <__func__.0+0x378>
    8001b794:	4970f0ef          	jal	8002b42a <printf>
    8001b798:	4511                	li	a0,4
    8001b79a:	f6ee50ef          	jal	80000f08 <goto_priv>
    8001b79e:	886e60ef          	jal	80001824 <reset_state>
}
    8001b7a2:	60e2                	ld	ra,24(sp)
    8001b7a4:	8522                	mv	a0,s0
    8001b7a6:	6442                	ld	s0,16(sp)
    8001b7a8:	64a2                	ld	s1,8(sp)
    8001b7aa:	6105                	addi	sp,sp,32
    8001b7ac:	8082                	ret

000000008001b7ae <store_access_fault_9>:

bool store_access_fault_9(){
    8001b7ae:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b7b0:	00012597          	auipc	a1,0x12
    8001b7b4:	b3058593          	addi	a1,a1,-1232 # 8002d2e0 <__func__.21>
    8001b7b8:	00013517          	auipc	a0,0x13
    8001b7bc:	a1050513          	addi	a0,a0,-1520 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001b7c0:	ec06                	sd	ra,24(sp)
    8001b7c2:	e822                	sd	s0,16(sp)
    8001b7c4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b7c6:	4650f0ef          	jal	8002b42a <printf>
    8001b7ca:	4529                	li	a0,10
    8001b7cc:	14d0e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b7d0:	4511                	li	a0,4
    8001b7d2:	f36e50ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b7d6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b7da:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b7de:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b7e2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b7e6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b7ea:	10000793          	li	a5,256
    8001b7ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b7f2:	20000793          	li	a5,512
    8001b7f6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b7fa:	40000793          	li	a5,1024
    8001b7fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b802:	6785                	lui	a5,0x1
    8001b804:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b808:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b80c:	4785                	li	a5,1
    8001b80e:	07fe                	slli	a5,a5,0x1f
    8001b810:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b814:	08100793          	li	a5,129
    8001b818:	07e2                	slli	a5,a5,0x18
    8001b81a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b81e:	08000793          	li	a5,128
    8001b822:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b826:	67a1                	lui	a5,0x8
    8001b828:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b82c:	4501                	li	a0,0
    8001b82e:	edae50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b832:	ddae50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001b836:	37ab77b7          	lui	a5,0x37ab7
    8001b83a:	4705                	li	a4,1
    8001b83c:	078a                	slli	a5,a5,0x2
    8001b83e:	170e                	slli	a4,a4,0x23
    8001b840:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b844:	1761                	addi	a4,a4,-8
    8001b846:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b84a:	08200593          	li	a1,130
    8001b84e:	00019617          	auipc	a2,0x19
    8001b852:	32a60613          	addi	a2,a2,810 # 80034b78 <__func__.0+0x6c90>
    8001b856:	00013517          	auipc	a0,0x13
    8001b85a:	98a50513          	addi	a0,a0,-1654 # 8002e1e0 <__func__.0+0x2f8>
    8001b85e:	3cd0f0ef          	jal	8002b42a <printf>
    8001b862:	0003c797          	auipc	a5,0x3c
    8001b866:	7af7c783          	lbu	a5,1967(a5) # 80058011 <excpt+0x1>
    8001b86a:	0003c497          	auipc	s1,0x3c
    8001b86e:	7a648493          	addi	s1,s1,1958 # 80058010 <excpt>
    8001b872:	00013597          	auipc	a1,0x13
    8001b876:	94658593          	addi	a1,a1,-1722 # 8002e1b8 <__func__.0+0x2d0>
    8001b87a:	cf89                	beqz	a5,8001b894 <store_access_fault_9+0xe6>
    8001b87c:	6498                	ld	a4,8(s1)
    8001b87e:	479d                	li	a5,7
    8001b880:	00013597          	auipc	a1,0x13
    8001b884:	92858593          	addi	a1,a1,-1752 # 8002e1a8 <__func__.0+0x2c0>
    8001b888:	00f70663          	beq	a4,a5,8001b894 <store_access_fault_9+0xe6>
    8001b88c:	00013597          	auipc	a1,0x13
    8001b890:	92c58593          	addi	a1,a1,-1748 # 8002e1b8 <__func__.0+0x2d0>
    8001b894:	00013517          	auipc	a0,0x13
    8001b898:	96450513          	addi	a0,a0,-1692 # 8002e1f8 <__func__.0+0x310>
    8001b89c:	38f0f0ef          	jal	8002b42a <printf>
    8001b8a0:	0003c797          	auipc	a5,0x3c
    8001b8a4:	7717c783          	lbu	a5,1905(a5) # 80058011 <excpt+0x1>
    8001b8a8:	c789                	beqz	a5,8001b8b2 <store_access_fault_9+0x104>
    8001b8aa:	6498                	ld	a4,8(s1)
    8001b8ac:	479d                	li	a5,7
    8001b8ae:	00f70c63          	beq	a4,a5,8001b8c6 <store_access_fault_9+0x118>
    8001b8b2:	00013517          	auipc	a0,0x13
    8001b8b6:	94e50513          	addi	a0,a0,-1714 # 8002e200 <__func__.0+0x318>
    8001b8ba:	3710f0ef          	jal	8002b42a <printf>
    8001b8be:	02900513          	li	a0,41
    8001b8c2:	0570e0ef          	jal	8002a118 <putchar>
    8001b8c6:	4529                	li	a0,10
    8001b8c8:	0510e0ef          	jal	8002a118 <putchar>
    8001b8cc:	0003c417          	auipc	s0,0x3c
    8001b8d0:	74544403          	lbu	s0,1861(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b8d4:	00013597          	auipc	a1,0x13
    8001b8d8:	8e458593          	addi	a1,a1,-1820 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b8dc:	cc11                	beqz	s0,8001b8f8 <store_access_fault_9+0x14a>
    8001b8de:	6498                	ld	a4,8(s1)
    8001b8e0:	479d                	li	a5,7
    TEST_END();
    8001b8e2:	00013597          	auipc	a1,0x13
    8001b8e6:	8c658593          	addi	a1,a1,-1850 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b8ea:	00f70763          	beq	a4,a5,8001b8f8 <store_access_fault_9+0x14a>
    8001b8ee:	4401                	li	s0,0
    TEST_END();
    8001b8f0:	00013597          	auipc	a1,0x13
    8001b8f4:	8c858593          	addi	a1,a1,-1848 # 8002e1b8 <__func__.0+0x2d0>
    8001b8f8:	00013517          	auipc	a0,0x13
    8001b8fc:	96850513          	addi	a0,a0,-1688 # 8002e260 <__func__.0+0x378>
    8001b900:	32b0f0ef          	jal	8002b42a <printf>
    8001b904:	4511                	li	a0,4
    8001b906:	e02e50ef          	jal	80000f08 <goto_priv>
    8001b90a:	f1be50ef          	jal	80001824 <reset_state>
}
    8001b90e:	60e2                	ld	ra,24(sp)
    8001b910:	8522                	mv	a0,s0
    8001b912:	6442                	ld	s0,16(sp)
    8001b914:	64a2                	ld	s1,8(sp)
    8001b916:	6105                	addi	sp,sp,32
    8001b918:	8082                	ret

000000008001b91a <store_access_fault_10>:


bool store_access_fault_10(){
    8001b91a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b91c:	00012597          	auipc	a1,0x12
    8001b920:	9dc58593          	addi	a1,a1,-1572 # 8002d2f8 <__func__.20>
    8001b924:	00013517          	auipc	a0,0x13
    8001b928:	8a450513          	addi	a0,a0,-1884 # 8002e1c8 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001b92c:	ec06                	sd	ra,24(sp)
    8001b92e:	e822                	sd	s0,16(sp)
    8001b930:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b932:	2f90f0ef          	jal	8002b42a <printf>
    8001b936:	4529                	li	a0,10
    8001b938:	7e00e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001b93c:	4511                	li	a0,4
    8001b93e:	dcae50ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b942:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b946:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b94a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b94e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b952:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b956:	4785                	li	a5,1
    8001b958:	07fe                	slli	a5,a5,0x1f
    8001b95a:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b95e:	08000793          	li	a5,128
    8001b962:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b966:	450d                	li	a0,3
    8001b968:	da0e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b96c:	ca0e50ef          	jal	80000e0c <test_setup_except_function>
    8001b970:	37ab77b7          	lui	a5,0x37ab7
    8001b974:	078a                	slli	a5,a5,0x2
    8001b976:	00803737          	lui	a4,0x803
    8001b97a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b97e:	072a                	slli	a4,a4,0xa
    8001b980:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b984:	08200593          	li	a1,130
    8001b988:	00019617          	auipc	a2,0x19
    8001b98c:	26060613          	addi	a2,a2,608 # 80034be8 <__func__.0+0x6d00>
    8001b990:	00013517          	auipc	a0,0x13
    8001b994:	85050513          	addi	a0,a0,-1968 # 8002e1e0 <__func__.0+0x2f8>
    8001b998:	2930f0ef          	jal	8002b42a <printf>
    8001b99c:	0003c797          	auipc	a5,0x3c
    8001b9a0:	6757c783          	lbu	a5,1653(a5) # 80058011 <excpt+0x1>
    8001b9a4:	0003c497          	auipc	s1,0x3c
    8001b9a8:	66c48493          	addi	s1,s1,1644 # 80058010 <excpt>
    8001b9ac:	00013597          	auipc	a1,0x13
    8001b9b0:	80c58593          	addi	a1,a1,-2036 # 8002e1b8 <__func__.0+0x2d0>
    8001b9b4:	cf89                	beqz	a5,8001b9ce <store_access_fault_10+0xb4>
    8001b9b6:	6498                	ld	a4,8(s1)
    8001b9b8:	479d                	li	a5,7
    8001b9ba:	00012597          	auipc	a1,0x12
    8001b9be:	7ee58593          	addi	a1,a1,2030 # 8002e1a8 <__func__.0+0x2c0>
    8001b9c2:	00f70663          	beq	a4,a5,8001b9ce <store_access_fault_10+0xb4>
    8001b9c6:	00012597          	auipc	a1,0x12
    8001b9ca:	7f258593          	addi	a1,a1,2034 # 8002e1b8 <__func__.0+0x2d0>
    8001b9ce:	00013517          	auipc	a0,0x13
    8001b9d2:	82a50513          	addi	a0,a0,-2006 # 8002e1f8 <__func__.0+0x310>
    8001b9d6:	2550f0ef          	jal	8002b42a <printf>
    8001b9da:	0003c797          	auipc	a5,0x3c
    8001b9de:	6377c783          	lbu	a5,1591(a5) # 80058011 <excpt+0x1>
    8001b9e2:	c789                	beqz	a5,8001b9ec <store_access_fault_10+0xd2>
    8001b9e4:	6498                	ld	a4,8(s1)
    8001b9e6:	479d                	li	a5,7
    8001b9e8:	00f70c63          	beq	a4,a5,8001ba00 <store_access_fault_10+0xe6>
    8001b9ec:	00013517          	auipc	a0,0x13
    8001b9f0:	81450513          	addi	a0,a0,-2028 # 8002e200 <__func__.0+0x318>
    8001b9f4:	2370f0ef          	jal	8002b42a <printf>
    8001b9f8:	02900513          	li	a0,41
    8001b9fc:	71c0e0ef          	jal	8002a118 <putchar>
    8001ba00:	4529                	li	a0,10
    8001ba02:	7160e0ef          	jal	8002a118 <putchar>
    8001ba06:	0003c417          	auipc	s0,0x3c
    8001ba0a:	60b44403          	lbu	s0,1547(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ba0e:	00012597          	auipc	a1,0x12
    8001ba12:	7aa58593          	addi	a1,a1,1962 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001ba16:	cc11                	beqz	s0,8001ba32 <store_access_fault_10+0x118>
    8001ba18:	6498                	ld	a4,8(s1)
    8001ba1a:	479d                	li	a5,7
    TEST_END();
    8001ba1c:	00012597          	auipc	a1,0x12
    8001ba20:	78c58593          	addi	a1,a1,1932 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001ba24:	00f70763          	beq	a4,a5,8001ba32 <store_access_fault_10+0x118>
    8001ba28:	4401                	li	s0,0
    TEST_END();
    8001ba2a:	00012597          	auipc	a1,0x12
    8001ba2e:	78e58593          	addi	a1,a1,1934 # 8002e1b8 <__func__.0+0x2d0>
    8001ba32:	00013517          	auipc	a0,0x13
    8001ba36:	82e50513          	addi	a0,a0,-2002 # 8002e260 <__func__.0+0x378>
    8001ba3a:	1f10f0ef          	jal	8002b42a <printf>
    8001ba3e:	4511                	li	a0,4
    8001ba40:	cc8e50ef          	jal	80000f08 <goto_priv>
    8001ba44:	de1e50ef          	jal	80001824 <reset_state>
}
    8001ba48:	60e2                	ld	ra,24(sp)
    8001ba4a:	8522                	mv	a0,s0
    8001ba4c:	6442                	ld	s0,16(sp)
    8001ba4e:	64a2                	ld	s1,8(sp)
    8001ba50:	6105                	addi	sp,sp,32
    8001ba52:	8082                	ret

000000008001ba54 <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001ba54:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ba56:	00012597          	auipc	a1,0x12
    8001ba5a:	8ba58593          	addi	a1,a1,-1862 # 8002d310 <__func__.19>
    8001ba5e:	00012517          	auipc	a0,0x12
    8001ba62:	76a50513          	addi	a0,a0,1898 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001ba66:	ec06                	sd	ra,24(sp)
    8001ba68:	e822                	sd	s0,16(sp)
    8001ba6a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ba6c:	1bf0f0ef          	jal	8002b42a <printf>
    8001ba70:	4529                	li	a0,10
    8001ba72:	6a60e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001ba76:	4511                	li	a0,4
    8001ba78:	c90e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ba7c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ba80:	10000793          	li	a5,256
    8001ba84:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ba88:	20000793          	li	a5,512
    8001ba8c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ba90:	40000793          	li	a5,1024
    8001ba94:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ba98:	6785                	lui	a5,0x1
    8001ba9a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ba9e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001baa2:	4785                	li	a5,1
    8001baa4:	07fe                	slli	a5,a5,0x1f
    8001baa6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001baaa:	08100793          	li	a5,129
    8001baae:	07e2                	slli	a5,a5,0x18
    8001bab0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bab4:	67a1                	lui	a5,0x8
    8001bab6:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001baba:	b52e50ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001babe:	37ab77b7          	lui	a5,0x37ab7
    8001bac2:	4705                	li	a4,1
    8001bac4:	078a                	slli	a5,a5,0x2
    8001bac6:	1706                	slli	a4,a4,0x21
    8001bac8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bacc:	40070713          	addi	a4,a4,1024
    8001bad0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001bad4:	0003c597          	auipc	a1,0x3c
    8001bad8:	53d5c583          	lbu	a1,1341(a1) # 80058011 <excpt+0x1>
    8001badc:	00013517          	auipc	a0,0x13
    8001bae0:	26450513          	addi	a0,a0,612 # 8002ed40 <__func__.0+0xe58>
    8001bae4:	0003c417          	auipc	s0,0x3c
    8001bae8:	52c40413          	addi	s0,s0,1324 # 80058010 <excpt>
    8001baec:	13f0f0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001baf0:	640c                	ld	a1,8(s0)
    8001baf2:	00013517          	auipc	a0,0x13
    8001baf6:	24e50513          	addi	a0,a0,590 # 8002ed40 <__func__.0+0xe58>
    8001bafa:	1310f0ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bafe:	08200593          	li	a1,130
    8001bb02:	00019617          	auipc	a2,0x19
    8001bb06:	14660613          	addi	a2,a2,326 # 80034c48 <__func__.0+0x6d60>
    8001bb0a:	00012517          	auipc	a0,0x12
    8001bb0e:	6d650513          	addi	a0,a0,1750 # 8002e1e0 <__func__.0+0x2f8>
    8001bb12:	1190f0ef          	jal	8002b42a <printf>
    8001bb16:	0003c797          	auipc	a5,0x3c
    8001bb1a:	4fb7c783          	lbu	a5,1275(a5) # 80058011 <excpt+0x1>
    8001bb1e:	00012597          	auipc	a1,0x12
    8001bb22:	69a58593          	addi	a1,a1,1690 # 8002e1b8 <__func__.0+0x2d0>
    8001bb26:	cf89                	beqz	a5,8001bb40 <amo_access_fault_1+0xec>
    8001bb28:	6418                	ld	a4,8(s0)
    8001bb2a:	479d                	li	a5,7
    8001bb2c:	00012597          	auipc	a1,0x12
    8001bb30:	67c58593          	addi	a1,a1,1660 # 8002e1a8 <__func__.0+0x2c0>
    8001bb34:	00f70663          	beq	a4,a5,8001bb40 <amo_access_fault_1+0xec>
    8001bb38:	00012597          	auipc	a1,0x12
    8001bb3c:	68058593          	addi	a1,a1,1664 # 8002e1b8 <__func__.0+0x2d0>
    8001bb40:	00012517          	auipc	a0,0x12
    8001bb44:	6b850513          	addi	a0,a0,1720 # 8002e1f8 <__func__.0+0x310>
    8001bb48:	0e30f0ef          	jal	8002b42a <printf>
    8001bb4c:	0003c797          	auipc	a5,0x3c
    8001bb50:	4c57c783          	lbu	a5,1221(a5) # 80058011 <excpt+0x1>
    8001bb54:	c789                	beqz	a5,8001bb5e <amo_access_fault_1+0x10a>
    8001bb56:	6418                	ld	a4,8(s0)
    8001bb58:	479d                	li	a5,7
    8001bb5a:	00f70c63          	beq	a4,a5,8001bb72 <amo_access_fault_1+0x11e>
    8001bb5e:	00012517          	auipc	a0,0x12
    8001bb62:	6a250513          	addi	a0,a0,1698 # 8002e200 <__func__.0+0x318>
    8001bb66:	0c50f0ef          	jal	8002b42a <printf>
    8001bb6a:	02900513          	li	a0,41
    8001bb6e:	5aa0e0ef          	jal	8002a118 <putchar>
    8001bb72:	4529                	li	a0,10
    8001bb74:	5a40e0ef          	jal	8002a118 <putchar>
    8001bb78:	0003c497          	auipc	s1,0x3c
    8001bb7c:	4994c483          	lbu	s1,1177(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bb80:	00012597          	auipc	a1,0x12
    8001bb84:	63858593          	addi	a1,a1,1592 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb88:	cc91                	beqz	s1,8001bba4 <amo_access_fault_1+0x150>
    8001bb8a:	6418                	ld	a4,8(s0)
    8001bb8c:	479d                	li	a5,7
    TEST_END();
    8001bb8e:	00012597          	auipc	a1,0x12
    8001bb92:	61a58593          	addi	a1,a1,1562 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb96:	00f70763          	beq	a4,a5,8001bba4 <amo_access_fault_1+0x150>
    8001bb9a:	4481                	li	s1,0
    TEST_END();
    8001bb9c:	00012597          	auipc	a1,0x12
    8001bba0:	61c58593          	addi	a1,a1,1564 # 8002e1b8 <__func__.0+0x2d0>
    8001bba4:	00012517          	auipc	a0,0x12
    8001bba8:	6bc50513          	addi	a0,a0,1724 # 8002e260 <__func__.0+0x378>
    8001bbac:	07f0f0ef          	jal	8002b42a <printf>
    8001bbb0:	4511                	li	a0,4
    8001bbb2:	b56e50ef          	jal	80000f08 <goto_priv>
    8001bbb6:	c6fe50ef          	jal	80001824 <reset_state>
}
    8001bbba:	60e2                	ld	ra,24(sp)
    8001bbbc:	6442                	ld	s0,16(sp)
    8001bbbe:	8526                	mv	a0,s1
    8001bbc0:	64a2                	ld	s1,8(sp)
    8001bbc2:	6105                	addi	sp,sp,32
    8001bbc4:	8082                	ret

000000008001bbc6 <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001bbc6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bbc8:	00011597          	auipc	a1,0x11
    8001bbcc:	76058593          	addi	a1,a1,1888 # 8002d328 <__func__.18>
    8001bbd0:	00012517          	auipc	a0,0x12
    8001bbd4:	5f850513          	addi	a0,a0,1528 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001bbd8:	ec06                	sd	ra,24(sp)
    8001bbda:	e822                	sd	s0,16(sp)
    8001bbdc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bbde:	04d0f0ef          	jal	8002b42a <printf>
    8001bbe2:	4529                	li	a0,10
    8001bbe4:	5340e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001bbe8:	4511                	li	a0,4
    8001bbea:	b1ee50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bbee:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bbf2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bbf6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bbfa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bbfe:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bc02:	10000793          	li	a5,256
    8001bc06:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bc0a:	20000793          	li	a5,512
    8001bc0e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bc12:	40000793          	li	a5,1024
    8001bc16:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bc1a:	6785                	lui	a5,0x1
    8001bc1c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bc20:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bc24:	4785                	li	a5,1
    8001bc26:	07fe                	slli	a5,a5,0x1f
    8001bc28:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bc2c:	08100793          	li	a5,129
    8001bc30:	07e2                	slli	a5,a5,0x18
    8001bc32:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bc36:	08000793          	li	a5,128
    8001bc3a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bc3e:	67a1                	lui	a5,0x8
    8001bc40:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001bc44:	450d                	li	a0,3
    8001bc46:	ac2e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bc4a:	9c2e50ef          	jal	80000e0c <test_setup_except_function>
    8001bc4e:	37ab77b7          	lui	a5,0x37ab7
    8001bc52:	4705                	li	a4,1
    8001bc54:	078a                	slli	a5,a5,0x2
    8001bc56:	1706                	slli	a4,a4,0x21
    8001bc58:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bc5c:	40070713          	addi	a4,a4,1024
    8001bc60:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc64:	08200593          	li	a1,130
    8001bc68:	00019617          	auipc	a2,0x19
    8001bc6c:	02060613          	addi	a2,a2,32 # 80034c88 <__func__.0+0x6da0>
    8001bc70:	00012517          	auipc	a0,0x12
    8001bc74:	57050513          	addi	a0,a0,1392 # 8002e1e0 <__func__.0+0x2f8>
    8001bc78:	7b20f0ef          	jal	8002b42a <printf>
    8001bc7c:	0003c797          	auipc	a5,0x3c
    8001bc80:	3957c783          	lbu	a5,917(a5) # 80058011 <excpt+0x1>
    8001bc84:	0003c497          	auipc	s1,0x3c
    8001bc88:	38c48493          	addi	s1,s1,908 # 80058010 <excpt>
    8001bc8c:	00012597          	auipc	a1,0x12
    8001bc90:	52c58593          	addi	a1,a1,1324 # 8002e1b8 <__func__.0+0x2d0>
    8001bc94:	cf89                	beqz	a5,8001bcae <amo_access_fault_2+0xe8>
    8001bc96:	6498                	ld	a4,8(s1)
    8001bc98:	479d                	li	a5,7
    8001bc9a:	00012597          	auipc	a1,0x12
    8001bc9e:	50e58593          	addi	a1,a1,1294 # 8002e1a8 <__func__.0+0x2c0>
    8001bca2:	00f70663          	beq	a4,a5,8001bcae <amo_access_fault_2+0xe8>
    8001bca6:	00012597          	auipc	a1,0x12
    8001bcaa:	51258593          	addi	a1,a1,1298 # 8002e1b8 <__func__.0+0x2d0>
    8001bcae:	00012517          	auipc	a0,0x12
    8001bcb2:	54a50513          	addi	a0,a0,1354 # 8002e1f8 <__func__.0+0x310>
    8001bcb6:	7740f0ef          	jal	8002b42a <printf>
    8001bcba:	0003c797          	auipc	a5,0x3c
    8001bcbe:	3577c783          	lbu	a5,855(a5) # 80058011 <excpt+0x1>
    8001bcc2:	c789                	beqz	a5,8001bccc <amo_access_fault_2+0x106>
    8001bcc4:	6498                	ld	a4,8(s1)
    8001bcc6:	479d                	li	a5,7
    8001bcc8:	00f70c63          	beq	a4,a5,8001bce0 <amo_access_fault_2+0x11a>
    8001bccc:	00012517          	auipc	a0,0x12
    8001bcd0:	53450513          	addi	a0,a0,1332 # 8002e200 <__func__.0+0x318>
    8001bcd4:	7560f0ef          	jal	8002b42a <printf>
    8001bcd8:	02900513          	li	a0,41
    8001bcdc:	43c0e0ef          	jal	8002a118 <putchar>
    8001bce0:	4529                	li	a0,10
    8001bce2:	4360e0ef          	jal	8002a118 <putchar>
    8001bce6:	0003c417          	auipc	s0,0x3c
    8001bcea:	32b44403          	lbu	s0,811(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bcee:	00012597          	auipc	a1,0x12
    8001bcf2:	4ca58593          	addi	a1,a1,1226 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bcf6:	cc11                	beqz	s0,8001bd12 <amo_access_fault_2+0x14c>
    8001bcf8:	6498                	ld	a4,8(s1)
    8001bcfa:	479d                	li	a5,7
    TEST_END();
    8001bcfc:	00012597          	auipc	a1,0x12
    8001bd00:	4ac58593          	addi	a1,a1,1196 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bd04:	00f70763          	beq	a4,a5,8001bd12 <amo_access_fault_2+0x14c>
    8001bd08:	4401                	li	s0,0
    TEST_END();
    8001bd0a:	00012597          	auipc	a1,0x12
    8001bd0e:	4ae58593          	addi	a1,a1,1198 # 8002e1b8 <__func__.0+0x2d0>
    8001bd12:	00012517          	auipc	a0,0x12
    8001bd16:	54e50513          	addi	a0,a0,1358 # 8002e260 <__func__.0+0x378>
    8001bd1a:	7100f0ef          	jal	8002b42a <printf>
    8001bd1e:	4511                	li	a0,4
    8001bd20:	9e8e50ef          	jal	80000f08 <goto_priv>
    8001bd24:	b01e50ef          	jal	80001824 <reset_state>
}
    8001bd28:	60e2                	ld	ra,24(sp)
    8001bd2a:	8522                	mv	a0,s0
    8001bd2c:	6442                	ld	s0,16(sp)
    8001bd2e:	64a2                	ld	s1,8(sp)
    8001bd30:	6105                	addi	sp,sp,32
    8001bd32:	8082                	ret

000000008001bd34 <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001bd34:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bd36:	00011597          	auipc	a1,0x11
    8001bd3a:	60a58593          	addi	a1,a1,1546 # 8002d340 <__func__.17>
    8001bd3e:	00012517          	auipc	a0,0x12
    8001bd42:	48a50513          	addi	a0,a0,1162 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001bd46:	ec06                	sd	ra,24(sp)
    8001bd48:	e822                	sd	s0,16(sp)
    8001bd4a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bd4c:	6de0f0ef          	jal	8002b42a <printf>
    8001bd50:	4529                	li	a0,10
    8001bd52:	3c60e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001bd56:	4511                	li	a0,4
    8001bd58:	9b0e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bd5c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bd60:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bd64:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bd68:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bd6c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bd70:	10000793          	li	a5,256
    8001bd74:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bd78:	20000793          	li	a5,512
    8001bd7c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bd80:	40000793          	li	a5,1024
    8001bd84:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bd88:	6785                	lui	a5,0x1
    8001bd8a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bd8e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bd92:	4785                	li	a5,1
    8001bd94:	07fe                	slli	a5,a5,0x1f
    8001bd96:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bd9a:	08100793          	li	a5,129
    8001bd9e:	07e2                	slli	a5,a5,0x18
    8001bda0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bda4:	08000793          	li	a5,128
    8001bda8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bdac:	67a1                	lui	a5,0x8
    8001bdae:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001bdb2:	4505                	li	a0,1
    8001bdb4:	954e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bdb8:	854e50ef          	jal	80000e0c <test_setup_except_function>
    8001bdbc:	37ab77b7          	lui	a5,0x37ab7
    8001bdc0:	4705                	li	a4,1
    8001bdc2:	078a                	slli	a5,a5,0x2
    8001bdc4:	1706                	slli	a4,a4,0x21
    8001bdc6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bdca:	40070713          	addi	a4,a4,1024
    8001bdce:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdd2:	08200593          	li	a1,130
    8001bdd6:	00019617          	auipc	a2,0x19
    8001bdda:	ef260613          	addi	a2,a2,-270 # 80034cc8 <__func__.0+0x6de0>
    8001bdde:	00012517          	auipc	a0,0x12
    8001bde2:	40250513          	addi	a0,a0,1026 # 8002e1e0 <__func__.0+0x2f8>
    8001bde6:	6440f0ef          	jal	8002b42a <printf>
    8001bdea:	0003c797          	auipc	a5,0x3c
    8001bdee:	2277c783          	lbu	a5,551(a5) # 80058011 <excpt+0x1>
    8001bdf2:	0003c497          	auipc	s1,0x3c
    8001bdf6:	21e48493          	addi	s1,s1,542 # 80058010 <excpt>
    8001bdfa:	00012597          	auipc	a1,0x12
    8001bdfe:	3be58593          	addi	a1,a1,958 # 8002e1b8 <__func__.0+0x2d0>
    8001be02:	cf89                	beqz	a5,8001be1c <amo_access_fault_3+0xe8>
    8001be04:	6498                	ld	a4,8(s1)
    8001be06:	479d                	li	a5,7
    8001be08:	00012597          	auipc	a1,0x12
    8001be0c:	3a058593          	addi	a1,a1,928 # 8002e1a8 <__func__.0+0x2c0>
    8001be10:	00f70663          	beq	a4,a5,8001be1c <amo_access_fault_3+0xe8>
    8001be14:	00012597          	auipc	a1,0x12
    8001be18:	3a458593          	addi	a1,a1,932 # 8002e1b8 <__func__.0+0x2d0>
    8001be1c:	00012517          	auipc	a0,0x12
    8001be20:	3dc50513          	addi	a0,a0,988 # 8002e1f8 <__func__.0+0x310>
    8001be24:	6060f0ef          	jal	8002b42a <printf>
    8001be28:	0003c797          	auipc	a5,0x3c
    8001be2c:	1e97c783          	lbu	a5,489(a5) # 80058011 <excpt+0x1>
    8001be30:	c789                	beqz	a5,8001be3a <amo_access_fault_3+0x106>
    8001be32:	6498                	ld	a4,8(s1)
    8001be34:	479d                	li	a5,7
    8001be36:	00f70c63          	beq	a4,a5,8001be4e <amo_access_fault_3+0x11a>
    8001be3a:	00012517          	auipc	a0,0x12
    8001be3e:	3c650513          	addi	a0,a0,966 # 8002e200 <__func__.0+0x318>
    8001be42:	5e80f0ef          	jal	8002b42a <printf>
    8001be46:	02900513          	li	a0,41
    8001be4a:	2ce0e0ef          	jal	8002a118 <putchar>
    8001be4e:	4529                	li	a0,10
    8001be50:	2c80e0ef          	jal	8002a118 <putchar>
    8001be54:	0003c417          	auipc	s0,0x3c
    8001be58:	1bd44403          	lbu	s0,445(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001be5c:	00012597          	auipc	a1,0x12
    8001be60:	35c58593          	addi	a1,a1,860 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be64:	cc11                	beqz	s0,8001be80 <amo_access_fault_3+0x14c>
    8001be66:	6498                	ld	a4,8(s1)
    8001be68:	479d                	li	a5,7
    TEST_END();
    8001be6a:	00012597          	auipc	a1,0x12
    8001be6e:	33e58593          	addi	a1,a1,830 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be72:	00f70763          	beq	a4,a5,8001be80 <amo_access_fault_3+0x14c>
    8001be76:	4401                	li	s0,0
    TEST_END();
    8001be78:	00012597          	auipc	a1,0x12
    8001be7c:	34058593          	addi	a1,a1,832 # 8002e1b8 <__func__.0+0x2d0>
    8001be80:	00012517          	auipc	a0,0x12
    8001be84:	3e050513          	addi	a0,a0,992 # 8002e260 <__func__.0+0x378>
    8001be88:	5a20f0ef          	jal	8002b42a <printf>
    8001be8c:	4511                	li	a0,4
    8001be8e:	87ae50ef          	jal	80000f08 <goto_priv>
    8001be92:	993e50ef          	jal	80001824 <reset_state>
}
    8001be96:	60e2                	ld	ra,24(sp)
    8001be98:	8522                	mv	a0,s0
    8001be9a:	6442                	ld	s0,16(sp)
    8001be9c:	64a2                	ld	s1,8(sp)
    8001be9e:	6105                	addi	sp,sp,32
    8001bea0:	8082                	ret

000000008001bea2 <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001bea2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bea4:	00011597          	auipc	a1,0x11
    8001bea8:	4b458593          	addi	a1,a1,1204 # 8002d358 <__func__.16>
    8001beac:	00012517          	auipc	a0,0x12
    8001beb0:	31c50513          	addi	a0,a0,796 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001beb4:	ec06                	sd	ra,24(sp)
    8001beb6:	e822                	sd	s0,16(sp)
    8001beb8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001beba:	5700f0ef          	jal	8002b42a <printf>
    8001bebe:	4529                	li	a0,10
    8001bec0:	2580e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001bec4:	4511                	li	a0,4
    8001bec6:	842e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001beca:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bece:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bed2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bed6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001beda:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bede:	10000793          	li	a5,256
    8001bee2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bee6:	20000793          	li	a5,512
    8001beea:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001beee:	40000793          	li	a5,1024
    8001bef2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bef6:	6785                	lui	a5,0x1
    8001bef8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001befc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bf00:	4785                	li	a5,1
    8001bf02:	07fe                	slli	a5,a5,0x1f
    8001bf04:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bf08:	08100793          	li	a5,129
    8001bf0c:	07e2                	slli	a5,a5,0x18
    8001bf0e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bf12:	08000793          	li	a5,128
    8001bf16:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bf1a:	67a1                	lui	a5,0x8
    8001bf1c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bf20:	4501                	li	a0,0
    8001bf22:	fe7e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bf26:	ee7e40ef          	jal	80000e0c <test_setup_except_function>
    8001bf2a:	37ab77b7          	lui	a5,0x37ab7
    8001bf2e:	4705                	li	a4,1
    8001bf30:	078a                	slli	a5,a5,0x2
    8001bf32:	1706                	slli	a4,a4,0x21
    8001bf34:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bf38:	40070713          	addi	a4,a4,1024
    8001bf3c:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf40:	08200593          	li	a1,130
    8001bf44:	00019617          	auipc	a2,0x19
    8001bf48:	dc460613          	addi	a2,a2,-572 # 80034d08 <__func__.0+0x6e20>
    8001bf4c:	00012517          	auipc	a0,0x12
    8001bf50:	29450513          	addi	a0,a0,660 # 8002e1e0 <__func__.0+0x2f8>
    8001bf54:	4d60f0ef          	jal	8002b42a <printf>
    8001bf58:	0003c797          	auipc	a5,0x3c
    8001bf5c:	0b97c783          	lbu	a5,185(a5) # 80058011 <excpt+0x1>
    8001bf60:	0003c497          	auipc	s1,0x3c
    8001bf64:	0b048493          	addi	s1,s1,176 # 80058010 <excpt>
    8001bf68:	00012597          	auipc	a1,0x12
    8001bf6c:	25058593          	addi	a1,a1,592 # 8002e1b8 <__func__.0+0x2d0>
    8001bf70:	cf89                	beqz	a5,8001bf8a <amo_access_fault_4+0xe8>
    8001bf72:	6498                	ld	a4,8(s1)
    8001bf74:	479d                	li	a5,7
    8001bf76:	00012597          	auipc	a1,0x12
    8001bf7a:	23258593          	addi	a1,a1,562 # 8002e1a8 <__func__.0+0x2c0>
    8001bf7e:	00f70663          	beq	a4,a5,8001bf8a <amo_access_fault_4+0xe8>
    8001bf82:	00012597          	auipc	a1,0x12
    8001bf86:	23658593          	addi	a1,a1,566 # 8002e1b8 <__func__.0+0x2d0>
    8001bf8a:	00012517          	auipc	a0,0x12
    8001bf8e:	26e50513          	addi	a0,a0,622 # 8002e1f8 <__func__.0+0x310>
    8001bf92:	4980f0ef          	jal	8002b42a <printf>
    8001bf96:	0003c797          	auipc	a5,0x3c
    8001bf9a:	07b7c783          	lbu	a5,123(a5) # 80058011 <excpt+0x1>
    8001bf9e:	c789                	beqz	a5,8001bfa8 <amo_access_fault_4+0x106>
    8001bfa0:	6498                	ld	a4,8(s1)
    8001bfa2:	479d                	li	a5,7
    8001bfa4:	00f70c63          	beq	a4,a5,8001bfbc <amo_access_fault_4+0x11a>
    8001bfa8:	00012517          	auipc	a0,0x12
    8001bfac:	25850513          	addi	a0,a0,600 # 8002e200 <__func__.0+0x318>
    8001bfb0:	47a0f0ef          	jal	8002b42a <printf>
    8001bfb4:	02900513          	li	a0,41
    8001bfb8:	1600e0ef          	jal	8002a118 <putchar>
    8001bfbc:	4529                	li	a0,10
    8001bfbe:	15a0e0ef          	jal	8002a118 <putchar>
    8001bfc2:	0003c417          	auipc	s0,0x3c
    8001bfc6:	04f44403          	lbu	s0,79(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bfca:	00012597          	auipc	a1,0x12
    8001bfce:	1ee58593          	addi	a1,a1,494 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bfd2:	cc11                	beqz	s0,8001bfee <amo_access_fault_4+0x14c>
    8001bfd4:	6498                	ld	a4,8(s1)
    8001bfd6:	479d                	li	a5,7
    TEST_END();
    8001bfd8:	00012597          	auipc	a1,0x12
    8001bfdc:	1d058593          	addi	a1,a1,464 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bfe0:	00f70763          	beq	a4,a5,8001bfee <amo_access_fault_4+0x14c>
    8001bfe4:	4401                	li	s0,0
    TEST_END();
    8001bfe6:	00012597          	auipc	a1,0x12
    8001bfea:	1d258593          	addi	a1,a1,466 # 8002e1b8 <__func__.0+0x2d0>
    8001bfee:	00012517          	auipc	a0,0x12
    8001bff2:	27250513          	addi	a0,a0,626 # 8002e260 <__func__.0+0x378>
    8001bff6:	4340f0ef          	jal	8002b42a <printf>
    8001bffa:	4511                	li	a0,4
    8001bffc:	f0de40ef          	jal	80000f08 <goto_priv>
    8001c000:	825e50ef          	jal	80001824 <reset_state>
}
    8001c004:	60e2                	ld	ra,24(sp)
    8001c006:	8522                	mv	a0,s0
    8001c008:	6442                	ld	s0,16(sp)
    8001c00a:	64a2                	ld	s1,8(sp)
    8001c00c:	6105                	addi	sp,sp,32
    8001c00e:	8082                	ret

000000008001c010 <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001c010:	1141                	addi	sp,sp,-16

    TEST_START();
    8001c012:	00011597          	auipc	a1,0x11
    8001c016:	35e58593          	addi	a1,a1,862 # 8002d370 <__func__.15>
    8001c01a:	00012517          	auipc	a0,0x12
    8001c01e:	1ae50513          	addi	a0,a0,430 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001c022:	e406                	sd	ra,8(sp)
    8001c024:	e022                	sd	s0,0(sp)
    TEST_START();
    8001c026:	4040f0ef          	jal	8002b42a <printf>
    8001c02a:	4529                	li	a0,10
    8001c02c:	0ec0e0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c030:	4511                	li	a0,4
    8001c032:	ed7e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c036:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c03a:	10000793          	li	a5,256
    8001c03e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c042:	20000793          	li	a5,512
    8001c046:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c04a:	40000793          	li	a5,1024
    8001c04e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c052:	6785                	lui	a5,0x1
    8001c054:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c058:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c05c:	4785                	li	a5,1
    8001c05e:	07fe                	slli	a5,a5,0x1f
    8001c060:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c064:	08100793          	li	a5,129
    8001c068:	07e2                	slli	a5,a5,0x18
    8001c06a:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c06e:	67a1                	lui	a5,0x8
    8001c070:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c074:	d99e40ef          	jal	80000e0c <test_setup_except_function>
    8001c078:	37ab77b7          	lui	a5,0x37ab7
    8001c07c:	4705                	li	a4,1
    8001c07e:	078a                	slli	a5,a5,0x2
    8001c080:	1706                	slli	a4,a4,0x21
    8001c082:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c086:	40070713          	addi	a4,a4,1024
    8001c08a:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001c08e:	0003c597          	auipc	a1,0x3c
    8001c092:	f835c583          	lbu	a1,-125(a1) # 80058011 <excpt+0x1>
    8001c096:	00013517          	auipc	a0,0x13
    8001c09a:	caa50513          	addi	a0,a0,-854 # 8002ed40 <__func__.0+0xe58>
    8001c09e:	38c0f0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001c0a2:	0003c597          	auipc	a1,0x3c
    8001c0a6:	f765b583          	ld	a1,-138(a1) # 80058018 <excpt+0x8>
    8001c0aa:	00013517          	auipc	a0,0x13
    8001c0ae:	c9650513          	addi	a0,a0,-874 # 8002ed40 <__func__.0+0xe58>
    8001c0b2:	3780f0ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c0b6:	08200593          	li	a1,130
    8001c0ba:	00019617          	auipc	a2,0x19
    8001c0be:	c8e60613          	addi	a2,a2,-882 # 80034d48 <__func__.0+0x6e60>
    8001c0c2:	00012517          	auipc	a0,0x12
    8001c0c6:	11e50513          	addi	a0,a0,286 # 8002e1e0 <__func__.0+0x2f8>
    8001c0ca:	3600f0ef          	jal	8002b42a <printf>
    8001c0ce:	0003c797          	auipc	a5,0x3c
    8001c0d2:	f437c783          	lbu	a5,-189(a5) # 80058011 <excpt+0x1>
    8001c0d6:	00012597          	auipc	a1,0x12
    8001c0da:	0d258593          	addi	a1,a1,210 # 8002e1a8 <__func__.0+0x2c0>
    8001c0de:	c789                	beqz	a5,8001c0e8 <amo_access_fault_5+0xd8>
    8001c0e0:	00012597          	auipc	a1,0x12
    8001c0e4:	0d858593          	addi	a1,a1,216 # 8002e1b8 <__func__.0+0x2d0>
    8001c0e8:	00012517          	auipc	a0,0x12
    8001c0ec:	11050513          	addi	a0,a0,272 # 8002e1f8 <__func__.0+0x310>
    8001c0f0:	33a0f0ef          	jal	8002b42a <printf>
    8001c0f4:	0003c797          	auipc	a5,0x3c
    8001c0f8:	f1d7c783          	lbu	a5,-227(a5) # 80058011 <excpt+0x1>
    8001c0fc:	e7a1                	bnez	a5,8001c144 <amo_access_fault_5+0x134>
    8001c0fe:	4529                	li	a0,10
    8001c100:	0180e0ef          	jal	8002a118 <putchar>
    8001c104:	0003c797          	auipc	a5,0x3c
    8001c108:	f0d7c783          	lbu	a5,-243(a5) # 80058011 <excpt+0x1>
    8001c10c:	e795                	bnez	a5,8001c138 <amo_access_fault_5+0x128>
    8001c10e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c110:	00012597          	auipc	a1,0x12
    8001c114:	09858593          	addi	a1,a1,152 # 8002e1a8 <__func__.0+0x2c0>
    8001c118:	00012517          	auipc	a0,0x12
    8001c11c:	14850513          	addi	a0,a0,328 # 8002e260 <__func__.0+0x378>
    8001c120:	30a0f0ef          	jal	8002b42a <printf>
    8001c124:	4511                	li	a0,4
    8001c126:	de3e40ef          	jal	80000f08 <goto_priv>
    8001c12a:	efae50ef          	jal	80001824 <reset_state>
}
    8001c12e:	60a2                	ld	ra,8(sp)
    8001c130:	8522                	mv	a0,s0
    8001c132:	6402                	ld	s0,0(sp)
    8001c134:	0141                	addi	sp,sp,16
    8001c136:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c138:	4401                	li	s0,0
    TEST_END();
    8001c13a:	00012597          	auipc	a1,0x12
    8001c13e:	07e58593          	addi	a1,a1,126 # 8002e1b8 <__func__.0+0x2d0>
    8001c142:	bfd9                	j	8001c118 <amo_access_fault_5+0x108>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c144:	00012517          	auipc	a0,0x12
    8001c148:	0bc50513          	addi	a0,a0,188 # 8002e200 <__func__.0+0x318>
    8001c14c:	2de0f0ef          	jal	8002b42a <printf>
    8001c150:	02900513          	li	a0,41
    8001c154:	7c50d0ef          	jal	8002a118 <putchar>
    8001c158:	b75d                	j	8001c0fe <amo_access_fault_5+0xee>

000000008001c15a <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001c15a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c15c:	00011597          	auipc	a1,0x11
    8001c160:	22c58593          	addi	a1,a1,556 # 8002d388 <__func__.14>
    8001c164:	00012517          	auipc	a0,0x12
    8001c168:	06450513          	addi	a0,a0,100 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001c16c:	ec06                	sd	ra,24(sp)
    8001c16e:	e822                	sd	s0,16(sp)
    8001c170:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c172:	2b80f0ef          	jal	8002b42a <printf>
    8001c176:	4529                	li	a0,10
    8001c178:	7a10d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c17c:	4511                	li	a0,4
    8001c17e:	d8be40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c182:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c186:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c18a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c18e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c192:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c196:	10000793          	li	a5,256
    8001c19a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c19e:	20000793          	li	a5,512
    8001c1a2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c1a6:	40000793          	li	a5,1024
    8001c1aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c1ae:	6785                	lui	a5,0x1
    8001c1b0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c1b4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c1b8:	4785                	li	a5,1
    8001c1ba:	07fe                	slli	a5,a5,0x1f
    8001c1bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c1c0:	08100793          	li	a5,129
    8001c1c4:	07e2                	slli	a5,a5,0x18
    8001c1c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c1ca:	08000793          	li	a5,128
    8001c1ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c1d2:	67a1                	lui	a5,0x8
    8001c1d4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c1d8:	450d                	li	a0,3
    8001c1da:	d2fe40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c1de:	c2fe40ef          	jal	80000e0c <test_setup_except_function>
    8001c1e2:	37ab77b7          	lui	a5,0x37ab7
    8001c1e6:	4705                	li	a4,1
    8001c1e8:	078a                	slli	a5,a5,0x2
    8001c1ea:	1706                	slli	a4,a4,0x21
    8001c1ec:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c1f0:	40070713          	addi	a4,a4,1024
    8001c1f4:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c1f8:	08200593          	li	a1,130
    8001c1fc:	00019617          	auipc	a2,0x19
    8001c200:	b8c60613          	addi	a2,a2,-1140 # 80034d88 <__func__.0+0x6ea0>
    8001c204:	00012517          	auipc	a0,0x12
    8001c208:	fdc50513          	addi	a0,a0,-36 # 8002e1e0 <__func__.0+0x2f8>
    8001c20c:	21e0f0ef          	jal	8002b42a <printf>
    8001c210:	0003c797          	auipc	a5,0x3c
    8001c214:	e017c783          	lbu	a5,-511(a5) # 80058011 <excpt+0x1>
    8001c218:	0003c497          	auipc	s1,0x3c
    8001c21c:	df848493          	addi	s1,s1,-520 # 80058010 <excpt>
    8001c220:	00012597          	auipc	a1,0x12
    8001c224:	f9858593          	addi	a1,a1,-104 # 8002e1b8 <__func__.0+0x2d0>
    8001c228:	cf89                	beqz	a5,8001c242 <amo_access_fault_6+0xe8>
    8001c22a:	6498                	ld	a4,8(s1)
    8001c22c:	479d                	li	a5,7
    8001c22e:	00012597          	auipc	a1,0x12
    8001c232:	f7a58593          	addi	a1,a1,-134 # 8002e1a8 <__func__.0+0x2c0>
    8001c236:	00f70663          	beq	a4,a5,8001c242 <amo_access_fault_6+0xe8>
    8001c23a:	00012597          	auipc	a1,0x12
    8001c23e:	f7e58593          	addi	a1,a1,-130 # 8002e1b8 <__func__.0+0x2d0>
    8001c242:	00012517          	auipc	a0,0x12
    8001c246:	fb650513          	addi	a0,a0,-74 # 8002e1f8 <__func__.0+0x310>
    8001c24a:	1e00f0ef          	jal	8002b42a <printf>
    8001c24e:	0003c797          	auipc	a5,0x3c
    8001c252:	dc37c783          	lbu	a5,-573(a5) # 80058011 <excpt+0x1>
    8001c256:	c789                	beqz	a5,8001c260 <amo_access_fault_6+0x106>
    8001c258:	6498                	ld	a4,8(s1)
    8001c25a:	479d                	li	a5,7
    8001c25c:	00f70c63          	beq	a4,a5,8001c274 <amo_access_fault_6+0x11a>
    8001c260:	00012517          	auipc	a0,0x12
    8001c264:	fa050513          	addi	a0,a0,-96 # 8002e200 <__func__.0+0x318>
    8001c268:	1c20f0ef          	jal	8002b42a <printf>
    8001c26c:	02900513          	li	a0,41
    8001c270:	6a90d0ef          	jal	8002a118 <putchar>
    8001c274:	4529                	li	a0,10
    8001c276:	6a30d0ef          	jal	8002a118 <putchar>
    8001c27a:	0003c417          	auipc	s0,0x3c
    8001c27e:	d9744403          	lbu	s0,-617(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c282:	00012597          	auipc	a1,0x12
    8001c286:	f3658593          	addi	a1,a1,-202 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c28a:	cc11                	beqz	s0,8001c2a6 <amo_access_fault_6+0x14c>
    8001c28c:	6498                	ld	a4,8(s1)
    8001c28e:	479d                	li	a5,7
    TEST_END();
    8001c290:	00012597          	auipc	a1,0x12
    8001c294:	f1858593          	addi	a1,a1,-232 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c298:	00f70763          	beq	a4,a5,8001c2a6 <amo_access_fault_6+0x14c>
    8001c29c:	4401                	li	s0,0
    TEST_END();
    8001c29e:	00012597          	auipc	a1,0x12
    8001c2a2:	f1a58593          	addi	a1,a1,-230 # 8002e1b8 <__func__.0+0x2d0>
    8001c2a6:	00012517          	auipc	a0,0x12
    8001c2aa:	fba50513          	addi	a0,a0,-70 # 8002e260 <__func__.0+0x378>
    8001c2ae:	17c0f0ef          	jal	8002b42a <printf>
    8001c2b2:	4511                	li	a0,4
    8001c2b4:	c55e40ef          	jal	80000f08 <goto_priv>
    8001c2b8:	d6ce50ef          	jal	80001824 <reset_state>
}
    8001c2bc:	60e2                	ld	ra,24(sp)
    8001c2be:	8522                	mv	a0,s0
    8001c2c0:	6442                	ld	s0,16(sp)
    8001c2c2:	64a2                	ld	s1,8(sp)
    8001c2c4:	6105                	addi	sp,sp,32
    8001c2c6:	8082                	ret

000000008001c2c8 <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001c2c8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c2ca:	00011597          	auipc	a1,0x11
    8001c2ce:	0d658593          	addi	a1,a1,214 # 8002d3a0 <__func__.13>
    8001c2d2:	00012517          	auipc	a0,0x12
    8001c2d6:	ef650513          	addi	a0,a0,-266 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001c2da:	ec06                	sd	ra,24(sp)
    8001c2dc:	e822                	sd	s0,16(sp)
    8001c2de:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c2e0:	14a0f0ef          	jal	8002b42a <printf>
    8001c2e4:	4529                	li	a0,10
    8001c2e6:	6330d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c2ea:	4511                	li	a0,4
    8001c2ec:	c1de40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c2f0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c2f4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c2f8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c2fc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c300:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c304:	10000793          	li	a5,256
    8001c308:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c30c:	20000793          	li	a5,512
    8001c310:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c314:	40000793          	li	a5,1024
    8001c318:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c31c:	6785                	lui	a5,0x1
    8001c31e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c322:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c326:	4785                	li	a5,1
    8001c328:	07fe                	slli	a5,a5,0x1f
    8001c32a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c32e:	08100793          	li	a5,129
    8001c332:	07e2                	slli	a5,a5,0x18
    8001c334:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c338:	08000793          	li	a5,128
    8001c33c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c340:	67a1                	lui	a5,0x8
    8001c342:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c346:	4505                	li	a0,1
    8001c348:	bc1e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c34c:	ac1e40ef          	jal	80000e0c <test_setup_except_function>
    8001c350:	37ab77b7          	lui	a5,0x37ab7
    8001c354:	4705                	li	a4,1
    8001c356:	078a                	slli	a5,a5,0x2
    8001c358:	1706                	slli	a4,a4,0x21
    8001c35a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c35e:	40070713          	addi	a4,a4,1024
    8001c362:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c366:	08200593          	li	a1,130
    8001c36a:	00019617          	auipc	a2,0x19
    8001c36e:	a5e60613          	addi	a2,a2,-1442 # 80034dc8 <__func__.0+0x6ee0>
    8001c372:	00012517          	auipc	a0,0x12
    8001c376:	e6e50513          	addi	a0,a0,-402 # 8002e1e0 <__func__.0+0x2f8>
    8001c37a:	0b00f0ef          	jal	8002b42a <printf>
    8001c37e:	0003c797          	auipc	a5,0x3c
    8001c382:	c937c783          	lbu	a5,-877(a5) # 80058011 <excpt+0x1>
    8001c386:	0003c497          	auipc	s1,0x3c
    8001c38a:	c8a48493          	addi	s1,s1,-886 # 80058010 <excpt>
    8001c38e:	00012597          	auipc	a1,0x12
    8001c392:	e2a58593          	addi	a1,a1,-470 # 8002e1b8 <__func__.0+0x2d0>
    8001c396:	cf89                	beqz	a5,8001c3b0 <amo_access_fault_7+0xe8>
    8001c398:	6498                	ld	a4,8(s1)
    8001c39a:	479d                	li	a5,7
    8001c39c:	00012597          	auipc	a1,0x12
    8001c3a0:	e0c58593          	addi	a1,a1,-500 # 8002e1a8 <__func__.0+0x2c0>
    8001c3a4:	00f70663          	beq	a4,a5,8001c3b0 <amo_access_fault_7+0xe8>
    8001c3a8:	00012597          	auipc	a1,0x12
    8001c3ac:	e1058593          	addi	a1,a1,-496 # 8002e1b8 <__func__.0+0x2d0>
    8001c3b0:	00012517          	auipc	a0,0x12
    8001c3b4:	e4850513          	addi	a0,a0,-440 # 8002e1f8 <__func__.0+0x310>
    8001c3b8:	0720f0ef          	jal	8002b42a <printf>
    8001c3bc:	0003c797          	auipc	a5,0x3c
    8001c3c0:	c557c783          	lbu	a5,-939(a5) # 80058011 <excpt+0x1>
    8001c3c4:	c789                	beqz	a5,8001c3ce <amo_access_fault_7+0x106>
    8001c3c6:	6498                	ld	a4,8(s1)
    8001c3c8:	479d                	li	a5,7
    8001c3ca:	00f70c63          	beq	a4,a5,8001c3e2 <amo_access_fault_7+0x11a>
    8001c3ce:	00012517          	auipc	a0,0x12
    8001c3d2:	e3250513          	addi	a0,a0,-462 # 8002e200 <__func__.0+0x318>
    8001c3d6:	0540f0ef          	jal	8002b42a <printf>
    8001c3da:	02900513          	li	a0,41
    8001c3de:	53b0d0ef          	jal	8002a118 <putchar>
    8001c3e2:	4529                	li	a0,10
    8001c3e4:	5350d0ef          	jal	8002a118 <putchar>
    8001c3e8:	0003c417          	auipc	s0,0x3c
    8001c3ec:	c2944403          	lbu	s0,-983(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c3f0:	00012597          	auipc	a1,0x12
    8001c3f4:	dc858593          	addi	a1,a1,-568 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c3f8:	cc11                	beqz	s0,8001c414 <amo_access_fault_7+0x14c>
    8001c3fa:	6498                	ld	a4,8(s1)
    8001c3fc:	479d                	li	a5,7
    TEST_END();
    8001c3fe:	00012597          	auipc	a1,0x12
    8001c402:	daa58593          	addi	a1,a1,-598 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c406:	00f70763          	beq	a4,a5,8001c414 <amo_access_fault_7+0x14c>
    8001c40a:	4401                	li	s0,0
    TEST_END();
    8001c40c:	00012597          	auipc	a1,0x12
    8001c410:	dac58593          	addi	a1,a1,-596 # 8002e1b8 <__func__.0+0x2d0>
    8001c414:	00012517          	auipc	a0,0x12
    8001c418:	e4c50513          	addi	a0,a0,-436 # 8002e260 <__func__.0+0x378>
    8001c41c:	00e0f0ef          	jal	8002b42a <printf>
    8001c420:	4511                	li	a0,4
    8001c422:	ae7e40ef          	jal	80000f08 <goto_priv>
    8001c426:	bfee50ef          	jal	80001824 <reset_state>
}
    8001c42a:	60e2                	ld	ra,24(sp)
    8001c42c:	8522                	mv	a0,s0
    8001c42e:	6442                	ld	s0,16(sp)
    8001c430:	64a2                	ld	s1,8(sp)
    8001c432:	6105                	addi	sp,sp,32
    8001c434:	8082                	ret

000000008001c436 <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001c436:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c438:	00011597          	auipc	a1,0x11
    8001c43c:	f8058593          	addi	a1,a1,-128 # 8002d3b8 <__func__.12>
    8001c440:	00012517          	auipc	a0,0x12
    8001c444:	d8850513          	addi	a0,a0,-632 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001c448:	ec06                	sd	ra,24(sp)
    8001c44a:	e822                	sd	s0,16(sp)
    8001c44c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c44e:	7dd0e0ef          	jal	8002b42a <printf>
    8001c452:	4529                	li	a0,10
    8001c454:	4c50d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c458:	4511                	li	a0,4
    8001c45a:	aafe40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c45e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c462:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c466:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c46a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c46e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c472:	10000793          	li	a5,256
    8001c476:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c47a:	20000793          	li	a5,512
    8001c47e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c482:	40000793          	li	a5,1024
    8001c486:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c48a:	6785                	lui	a5,0x1
    8001c48c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c490:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c494:	4785                	li	a5,1
    8001c496:	07fe                	slli	a5,a5,0x1f
    8001c498:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c49c:	08100793          	li	a5,129
    8001c4a0:	07e2                	slli	a5,a5,0x18
    8001c4a2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c4a6:	08000793          	li	a5,128
    8001c4aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c4ae:	67a1                	lui	a5,0x8
    8001c4b0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c4b4:	4501                	li	a0,0
    8001c4b6:	a53e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c4ba:	953e40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001c4be:	37ab77b7          	lui	a5,0x37ab7
    8001c4c2:	4705                	li	a4,1
    8001c4c4:	078a                	slli	a5,a5,0x2
    8001c4c6:	1706                	slli	a4,a4,0x21
    8001c4c8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c4cc:	40070713          	addi	a4,a4,1024
    8001c4d0:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4d4:	08200593          	li	a1,130
    8001c4d8:	00019617          	auipc	a2,0x19
    8001c4dc:	93060613          	addi	a2,a2,-1744 # 80034e08 <__func__.0+0x6f20>
    8001c4e0:	00012517          	auipc	a0,0x12
    8001c4e4:	d0050513          	addi	a0,a0,-768 # 8002e1e0 <__func__.0+0x2f8>
    8001c4e8:	7430e0ef          	jal	8002b42a <printf>
    8001c4ec:	0003c797          	auipc	a5,0x3c
    8001c4f0:	b257c783          	lbu	a5,-1243(a5) # 80058011 <excpt+0x1>
    8001c4f4:	0003c497          	auipc	s1,0x3c
    8001c4f8:	b1c48493          	addi	s1,s1,-1252 # 80058010 <excpt>
    8001c4fc:	00012597          	auipc	a1,0x12
    8001c500:	cbc58593          	addi	a1,a1,-836 # 8002e1b8 <__func__.0+0x2d0>
    8001c504:	cf89                	beqz	a5,8001c51e <amo_access_fault_8+0xe8>
    8001c506:	6498                	ld	a4,8(s1)
    8001c508:	479d                	li	a5,7
    8001c50a:	00012597          	auipc	a1,0x12
    8001c50e:	c9e58593          	addi	a1,a1,-866 # 8002e1a8 <__func__.0+0x2c0>
    8001c512:	00f70663          	beq	a4,a5,8001c51e <amo_access_fault_8+0xe8>
    8001c516:	00012597          	auipc	a1,0x12
    8001c51a:	ca258593          	addi	a1,a1,-862 # 8002e1b8 <__func__.0+0x2d0>
    8001c51e:	00012517          	auipc	a0,0x12
    8001c522:	cda50513          	addi	a0,a0,-806 # 8002e1f8 <__func__.0+0x310>
    8001c526:	7050e0ef          	jal	8002b42a <printf>
    8001c52a:	0003c797          	auipc	a5,0x3c
    8001c52e:	ae77c783          	lbu	a5,-1305(a5) # 80058011 <excpt+0x1>
    8001c532:	c789                	beqz	a5,8001c53c <amo_access_fault_8+0x106>
    8001c534:	6498                	ld	a4,8(s1)
    8001c536:	479d                	li	a5,7
    8001c538:	00f70c63          	beq	a4,a5,8001c550 <amo_access_fault_8+0x11a>
    8001c53c:	00012517          	auipc	a0,0x12
    8001c540:	cc450513          	addi	a0,a0,-828 # 8002e200 <__func__.0+0x318>
    8001c544:	6e70e0ef          	jal	8002b42a <printf>
    8001c548:	02900513          	li	a0,41
    8001c54c:	3cd0d0ef          	jal	8002a118 <putchar>
    8001c550:	4529                	li	a0,10
    8001c552:	3c70d0ef          	jal	8002a118 <putchar>
    8001c556:	0003c417          	auipc	s0,0x3c
    8001c55a:	abb44403          	lbu	s0,-1349(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c55e:	00012597          	auipc	a1,0x12
    8001c562:	c5a58593          	addi	a1,a1,-934 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c566:	cc11                	beqz	s0,8001c582 <amo_access_fault_8+0x14c>
    8001c568:	6498                	ld	a4,8(s1)
    8001c56a:	479d                	li	a5,7
    TEST_END();
    8001c56c:	00012597          	auipc	a1,0x12
    8001c570:	c3c58593          	addi	a1,a1,-964 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c574:	00f70763          	beq	a4,a5,8001c582 <amo_access_fault_8+0x14c>
    8001c578:	4401                	li	s0,0
    TEST_END();
    8001c57a:	00012597          	auipc	a1,0x12
    8001c57e:	c3e58593          	addi	a1,a1,-962 # 8002e1b8 <__func__.0+0x2d0>
    8001c582:	00012517          	auipc	a0,0x12
    8001c586:	cde50513          	addi	a0,a0,-802 # 8002e260 <__func__.0+0x378>
    8001c58a:	6a10e0ef          	jal	8002b42a <printf>
    8001c58e:	4511                	li	a0,4
    8001c590:	979e40ef          	jal	80000f08 <goto_priv>
    8001c594:	a90e50ef          	jal	80001824 <reset_state>
}
    8001c598:	60e2                	ld	ra,24(sp)
    8001c59a:	8522                	mv	a0,s0
    8001c59c:	6442                	ld	s0,16(sp)
    8001c59e:	64a2                	ld	s1,8(sp)
    8001c5a0:	6105                	addi	sp,sp,32
    8001c5a2:	8082                	ret

000000008001c5a4 <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001c5a4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c5a6:	00011597          	auipc	a1,0x11
    8001c5aa:	e2a58593          	addi	a1,a1,-470 # 8002d3d0 <__func__.11>
    8001c5ae:	00012517          	auipc	a0,0x12
    8001c5b2:	c1a50513          	addi	a0,a0,-998 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001c5b6:	ec06                	sd	ra,24(sp)
    8001c5b8:	e822                	sd	s0,16(sp)
    8001c5ba:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c5bc:	66f0e0ef          	jal	8002b42a <printf>
    8001c5c0:	4529                	li	a0,10
    8001c5c2:	3570d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c5c6:	4511                	li	a0,4
    8001c5c8:	941e40ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c5cc:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c5d0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c5d4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c5d8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c5dc:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c5e0:	10000793          	li	a5,256
    8001c5e4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c5e8:	20000793          	li	a5,512
    8001c5ec:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c5f0:	40000793          	li	a5,1024
    8001c5f4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c5f8:	6785                	lui	a5,0x1
    8001c5fa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c5fe:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c602:	4785                	li	a5,1
    8001c604:	07fe                	slli	a5,a5,0x1f
    8001c606:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c60a:	08100793          	li	a5,129
    8001c60e:	07e2                	slli	a5,a5,0x18
    8001c610:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c614:	08000793          	li	a5,128
    8001c618:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c61c:	67a1                	lui	a5,0x8
    8001c61e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c622:	4501                	li	a0,0
    8001c624:	8e5e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c628:	fe4e40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001c62c:	37ab77b7          	lui	a5,0x37ab7
    8001c630:	4705                	li	a4,1
    8001c632:	078a                	slli	a5,a5,0x2
    8001c634:	170e                	slli	a4,a4,0x23
    8001c636:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c63a:	1761                	addi	a4,a4,-8
    8001c63c:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c640:	08200593          	li	a1,130
    8001c644:	00019617          	auipc	a2,0x19
    8001c648:	80460613          	addi	a2,a2,-2044 # 80034e48 <__func__.0+0x6f60>
    8001c64c:	00012517          	auipc	a0,0x12
    8001c650:	b9450513          	addi	a0,a0,-1132 # 8002e1e0 <__func__.0+0x2f8>
    8001c654:	5d70e0ef          	jal	8002b42a <printf>
    8001c658:	0003c797          	auipc	a5,0x3c
    8001c65c:	9b97c783          	lbu	a5,-1607(a5) # 80058011 <excpt+0x1>
    8001c660:	0003c497          	auipc	s1,0x3c
    8001c664:	9b048493          	addi	s1,s1,-1616 # 80058010 <excpt>
    8001c668:	00012597          	auipc	a1,0x12
    8001c66c:	b5058593          	addi	a1,a1,-1200 # 8002e1b8 <__func__.0+0x2d0>
    8001c670:	cf89                	beqz	a5,8001c68a <amo_access_fault_9+0xe6>
    8001c672:	6498                	ld	a4,8(s1)
    8001c674:	479d                	li	a5,7
    8001c676:	00012597          	auipc	a1,0x12
    8001c67a:	b3258593          	addi	a1,a1,-1230 # 8002e1a8 <__func__.0+0x2c0>
    8001c67e:	00f70663          	beq	a4,a5,8001c68a <amo_access_fault_9+0xe6>
    8001c682:	00012597          	auipc	a1,0x12
    8001c686:	b3658593          	addi	a1,a1,-1226 # 8002e1b8 <__func__.0+0x2d0>
    8001c68a:	00012517          	auipc	a0,0x12
    8001c68e:	b6e50513          	addi	a0,a0,-1170 # 8002e1f8 <__func__.0+0x310>
    8001c692:	5990e0ef          	jal	8002b42a <printf>
    8001c696:	0003c797          	auipc	a5,0x3c
    8001c69a:	97b7c783          	lbu	a5,-1669(a5) # 80058011 <excpt+0x1>
    8001c69e:	c789                	beqz	a5,8001c6a8 <amo_access_fault_9+0x104>
    8001c6a0:	6498                	ld	a4,8(s1)
    8001c6a2:	479d                	li	a5,7
    8001c6a4:	00f70c63          	beq	a4,a5,8001c6bc <amo_access_fault_9+0x118>
    8001c6a8:	00012517          	auipc	a0,0x12
    8001c6ac:	b5850513          	addi	a0,a0,-1192 # 8002e200 <__func__.0+0x318>
    8001c6b0:	57b0e0ef          	jal	8002b42a <printf>
    8001c6b4:	02900513          	li	a0,41
    8001c6b8:	2610d0ef          	jal	8002a118 <putchar>
    8001c6bc:	4529                	li	a0,10
    8001c6be:	25b0d0ef          	jal	8002a118 <putchar>
    8001c6c2:	0003c417          	auipc	s0,0x3c
    8001c6c6:	94f44403          	lbu	s0,-1713(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c6ca:	00012597          	auipc	a1,0x12
    8001c6ce:	aee58593          	addi	a1,a1,-1298 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c6d2:	cc11                	beqz	s0,8001c6ee <amo_access_fault_9+0x14a>
    8001c6d4:	6498                	ld	a4,8(s1)
    8001c6d6:	479d                	li	a5,7
    TEST_END();
    8001c6d8:	00012597          	auipc	a1,0x12
    8001c6dc:	ad058593          	addi	a1,a1,-1328 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c6e0:	00f70763          	beq	a4,a5,8001c6ee <amo_access_fault_9+0x14a>
    8001c6e4:	4401                	li	s0,0
    TEST_END();
    8001c6e6:	00012597          	auipc	a1,0x12
    8001c6ea:	ad258593          	addi	a1,a1,-1326 # 8002e1b8 <__func__.0+0x2d0>
    8001c6ee:	00012517          	auipc	a0,0x12
    8001c6f2:	b7250513          	addi	a0,a0,-1166 # 8002e260 <__func__.0+0x378>
    8001c6f6:	5350e0ef          	jal	8002b42a <printf>
    8001c6fa:	4511                	li	a0,4
    8001c6fc:	80de40ef          	jal	80000f08 <goto_priv>
    8001c700:	924e50ef          	jal	80001824 <reset_state>
}
    8001c704:	60e2                	ld	ra,24(sp)
    8001c706:	8522                	mv	a0,s0
    8001c708:	6442                	ld	s0,16(sp)
    8001c70a:	64a2                	ld	s1,8(sp)
    8001c70c:	6105                	addi	sp,sp,32
    8001c70e:	8082                	ret

000000008001c710 <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001c710:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c712:	00011597          	auipc	a1,0x11
    8001c716:	cd658593          	addi	a1,a1,-810 # 8002d3e8 <__func__.10>
    8001c71a:	00012517          	auipc	a0,0x12
    8001c71e:	aae50513          	addi	a0,a0,-1362 # 8002e1c8 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001c722:	ec06                	sd	ra,24(sp)
    8001c724:	e822                	sd	s0,16(sp)
    8001c726:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c728:	5030e0ef          	jal	8002b42a <printf>
    8001c72c:	4529                	li	a0,10
    8001c72e:	1eb0d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c732:	4511                	li	a0,4
    8001c734:	fd4e40ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c738:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c73c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c740:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c744:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c748:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c74c:	4785                	li	a5,1
    8001c74e:	07fe                	slli	a5,a5,0x1f
    8001c750:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c754:	08000793          	li	a5,128
    8001c758:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c75c:	450d                	li	a0,3
    8001c75e:	faae40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c762:	eaae40ef          	jal	80000e0c <test_setup_except_function>
    8001c766:	37ab77b7          	lui	a5,0x37ab7
    8001c76a:	078a                	slli	a5,a5,0x2
    8001c76c:	4705                	li	a4,1
    8001c76e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c772:	1706                	slli	a4,a4,0x21
    8001c774:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c778:	08200593          	li	a1,130
    8001c77c:	00018617          	auipc	a2,0x18
    8001c780:	74460613          	addi	a2,a2,1860 # 80034ec0 <__func__.0+0x6fd8>
    8001c784:	00012517          	auipc	a0,0x12
    8001c788:	a5c50513          	addi	a0,a0,-1444 # 8002e1e0 <__func__.0+0x2f8>
    8001c78c:	49f0e0ef          	jal	8002b42a <printf>
    8001c790:	0003c797          	auipc	a5,0x3c
    8001c794:	8817c783          	lbu	a5,-1919(a5) # 80058011 <excpt+0x1>
    8001c798:	0003c497          	auipc	s1,0x3c
    8001c79c:	87848493          	addi	s1,s1,-1928 # 80058010 <excpt>
    8001c7a0:	00012597          	auipc	a1,0x12
    8001c7a4:	a1858593          	addi	a1,a1,-1512 # 8002e1b8 <__func__.0+0x2d0>
    8001c7a8:	cf89                	beqz	a5,8001c7c2 <amo_access_fault_10+0xb2>
    8001c7aa:	6498                	ld	a4,8(s1)
    8001c7ac:	479d                	li	a5,7
    8001c7ae:	00012597          	auipc	a1,0x12
    8001c7b2:	9fa58593          	addi	a1,a1,-1542 # 8002e1a8 <__func__.0+0x2c0>
    8001c7b6:	00f70663          	beq	a4,a5,8001c7c2 <amo_access_fault_10+0xb2>
    8001c7ba:	00012597          	auipc	a1,0x12
    8001c7be:	9fe58593          	addi	a1,a1,-1538 # 8002e1b8 <__func__.0+0x2d0>
    8001c7c2:	00012517          	auipc	a0,0x12
    8001c7c6:	a3650513          	addi	a0,a0,-1482 # 8002e1f8 <__func__.0+0x310>
    8001c7ca:	4610e0ef          	jal	8002b42a <printf>
    8001c7ce:	0003c797          	auipc	a5,0x3c
    8001c7d2:	8437c783          	lbu	a5,-1981(a5) # 80058011 <excpt+0x1>
    8001c7d6:	c789                	beqz	a5,8001c7e0 <amo_access_fault_10+0xd0>
    8001c7d8:	6498                	ld	a4,8(s1)
    8001c7da:	479d                	li	a5,7
    8001c7dc:	00f70c63          	beq	a4,a5,8001c7f4 <amo_access_fault_10+0xe4>
    8001c7e0:	00012517          	auipc	a0,0x12
    8001c7e4:	a2050513          	addi	a0,a0,-1504 # 8002e200 <__func__.0+0x318>
    8001c7e8:	4430e0ef          	jal	8002b42a <printf>
    8001c7ec:	02900513          	li	a0,41
    8001c7f0:	1290d0ef          	jal	8002a118 <putchar>
    8001c7f4:	4529                	li	a0,10
    8001c7f6:	1230d0ef          	jal	8002a118 <putchar>
    8001c7fa:	0003c417          	auipc	s0,0x3c
    8001c7fe:	81744403          	lbu	s0,-2025(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c802:	00012597          	auipc	a1,0x12
    8001c806:	9b658593          	addi	a1,a1,-1610 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c80a:	cc11                	beqz	s0,8001c826 <amo_access_fault_10+0x116>
    8001c80c:	6498                	ld	a4,8(s1)
    8001c80e:	479d                	li	a5,7
    TEST_END();
    8001c810:	00012597          	auipc	a1,0x12
    8001c814:	99858593          	addi	a1,a1,-1640 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c818:	00f70763          	beq	a4,a5,8001c826 <amo_access_fault_10+0x116>
    8001c81c:	4401                	li	s0,0
    TEST_END();
    8001c81e:	00012597          	auipc	a1,0x12
    8001c822:	99a58593          	addi	a1,a1,-1638 # 8002e1b8 <__func__.0+0x2d0>
    8001c826:	00012517          	auipc	a0,0x12
    8001c82a:	a3a50513          	addi	a0,a0,-1478 # 8002e260 <__func__.0+0x378>
    8001c82e:	3fd0e0ef          	jal	8002b42a <printf>
    8001c832:	4511                	li	a0,4
    8001c834:	ed4e40ef          	jal	80000f08 <goto_priv>
    8001c838:	fede40ef          	jal	80001824 <reset_state>
}
    8001c83c:	60e2                	ld	ra,24(sp)
    8001c83e:	8522                	mv	a0,s0
    8001c840:	6442                	ld	s0,16(sp)
    8001c842:	64a2                	ld	s1,8(sp)
    8001c844:	6105                	addi	sp,sp,32
    8001c846:	8082                	ret

000000008001c848 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001c848:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c84a:	00011597          	auipc	a1,0x11
    8001c84e:	bb658593          	addi	a1,a1,-1098 # 8002d400 <__func__.9>
    8001c852:	00012517          	auipc	a0,0x12
    8001c856:	97650513          	addi	a0,a0,-1674 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001c85a:	ec06                	sd	ra,24(sp)
    8001c85c:	e822                	sd	s0,16(sp)
    8001c85e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c860:	3cb0e0ef          	jal	8002b42a <printf>
    8001c864:	4529                	li	a0,10
    8001c866:	0b30d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c86a:	4511                	li	a0,4
    8001c86c:	e9ce40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c870:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c874:	10000793          	li	a5,256
    8001c878:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c87c:	20000793          	li	a5,512
    8001c880:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c884:	40000793          	li	a5,1024
    8001c888:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c88c:	6785                	lui	a5,0x1
    8001c88e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c892:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c896:	4785                	li	a5,1
    8001c898:	07fe                	slli	a5,a5,0x1f
    8001c89a:	4485                	li	s1,1
    8001c89c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c8a0:	08100793          	li	a5,129
    8001c8a4:	07e2                	slli	a5,a5,0x18
    8001c8a6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c8aa:	67a1                	lui	a5,0x8
    8001c8ac:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c8b0:	d5ce40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c8b4:	02149793          	slli	a5,s1,0x21
    8001c8b8:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c8bc:	0003b417          	auipc	s0,0x3b
    8001c8c0:	75440413          	addi	s0,s0,1876 # 80058010 <excpt>
    8001c8c4:	00000297          	auipc	t0,0x0
    8001c8c8:	00c28293          	addi	t0,t0,12 # 8001c8d0 <instruction_access_fault_1+0x88>
    8001c8cc:	02543c23          	sd	t0,56(s0)
    8001c8d0:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001c8d2:	0003b597          	auipc	a1,0x3b
    8001c8d6:	73f5c583          	lbu	a1,1855(a1) # 80058011 <excpt+0x1>
    8001c8da:	00012517          	auipc	a0,0x12
    8001c8de:	46650513          	addi	a0,a0,1126 # 8002ed40 <__func__.0+0xe58>
    8001c8e2:	3490e0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001c8e6:	640c                	ld	a1,8(s0)
    8001c8e8:	00012517          	auipc	a0,0x12
    8001c8ec:	45850513          	addi	a0,a0,1112 # 8002ed40 <__func__.0+0xe58>
    8001c8f0:	33b0e0ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c8f4:	08200593          	li	a1,130
    8001c8f8:	00018617          	auipc	a2,0x18
    8001c8fc:	63860613          	addi	a2,a2,1592 # 80034f30 <__func__.0+0x7048>
    8001c900:	00012517          	auipc	a0,0x12
    8001c904:	8e050513          	addi	a0,a0,-1824 # 8002e1e0 <__func__.0+0x2f8>
    8001c908:	3230e0ef          	jal	8002b42a <printf>
    8001c90c:	0003b797          	auipc	a5,0x3b
    8001c910:	7057c783          	lbu	a5,1797(a5) # 80058011 <excpt+0x1>
    8001c914:	00012597          	auipc	a1,0x12
    8001c918:	8a458593          	addi	a1,a1,-1884 # 8002e1b8 <__func__.0+0x2d0>
    8001c91c:	cf81                	beqz	a5,8001c934 <instruction_access_fault_1+0xec>
    8001c91e:	641c                	ld	a5,8(s0)
    8001c920:	00012597          	auipc	a1,0x12
    8001c924:	88858593          	addi	a1,a1,-1912 # 8002e1a8 <__func__.0+0x2c0>
    8001c928:	00978663          	beq	a5,s1,8001c934 <instruction_access_fault_1+0xec>
    8001c92c:	00012597          	auipc	a1,0x12
    8001c930:	88c58593          	addi	a1,a1,-1908 # 8002e1b8 <__func__.0+0x2d0>
    8001c934:	00012517          	auipc	a0,0x12
    8001c938:	8c450513          	addi	a0,a0,-1852 # 8002e1f8 <__func__.0+0x310>
    8001c93c:	2ef0e0ef          	jal	8002b42a <printf>
    8001c940:	0003b797          	auipc	a5,0x3b
    8001c944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    8001c948:	c789                	beqz	a5,8001c952 <instruction_access_fault_1+0x10a>
    8001c94a:	6418                	ld	a4,8(s0)
    8001c94c:	4785                	li	a5,1
    8001c94e:	00f70c63          	beq	a4,a5,8001c966 <instruction_access_fault_1+0x11e>
    8001c952:	00012517          	auipc	a0,0x12
    8001c956:	8ae50513          	addi	a0,a0,-1874 # 8002e200 <__func__.0+0x318>
    8001c95a:	2d10e0ef          	jal	8002b42a <printf>
    8001c95e:	02900513          	li	a0,41
    8001c962:	7b60d0ef          	jal	8002a118 <putchar>
    8001c966:	4529                	li	a0,10
    8001c968:	7b00d0ef          	jal	8002a118 <putchar>
    8001c96c:	0003b497          	auipc	s1,0x3b
    8001c970:	6a54c483          	lbu	s1,1701(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001c974:	00012597          	auipc	a1,0x12
    8001c978:	84458593          	addi	a1,a1,-1980 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c97c:	cc91                	beqz	s1,8001c998 <instruction_access_fault_1+0x150>
    8001c97e:	6418                	ld	a4,8(s0)
    8001c980:	4785                	li	a5,1
    TEST_END();
    8001c982:	00012597          	auipc	a1,0x12
    8001c986:	82658593          	addi	a1,a1,-2010 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c98a:	00f70763          	beq	a4,a5,8001c998 <instruction_access_fault_1+0x150>
    8001c98e:	4481                	li	s1,0
    TEST_END();
    8001c990:	00012597          	auipc	a1,0x12
    8001c994:	82858593          	addi	a1,a1,-2008 # 8002e1b8 <__func__.0+0x2d0>
    8001c998:	00012517          	auipc	a0,0x12
    8001c99c:	8c850513          	addi	a0,a0,-1848 # 8002e260 <__func__.0+0x378>
    8001c9a0:	28b0e0ef          	jal	8002b42a <printf>
    8001c9a4:	4511                	li	a0,4
    8001c9a6:	d62e40ef          	jal	80000f08 <goto_priv>
    8001c9aa:	e7be40ef          	jal	80001824 <reset_state>
}
    8001c9ae:	60e2                	ld	ra,24(sp)
    8001c9b0:	6442                	ld	s0,16(sp)
    8001c9b2:	8526                	mv	a0,s1
    8001c9b4:	64a2                	ld	s1,8(sp)
    8001c9b6:	6105                	addi	sp,sp,32
    8001c9b8:	8082                	ret

000000008001c9ba <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001c9ba:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c9bc:	00011597          	auipc	a1,0x11
    8001c9c0:	a6458593          	addi	a1,a1,-1436 # 8002d420 <__func__.8>
    8001c9c4:	00012517          	auipc	a0,0x12
    8001c9c8:	80450513          	addi	a0,a0,-2044 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001c9cc:	ec06                	sd	ra,24(sp)
    8001c9ce:	e822                	sd	s0,16(sp)
    8001c9d0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c9d2:	2590e0ef          	jal	8002b42a <printf>
    8001c9d6:	4529                	li	a0,10
    8001c9d8:	7400d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001c9dc:	4511                	li	a0,4
    8001c9de:	d2ae40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c9e2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c9e6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c9ea:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c9ee:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c9f2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c9f6:	10000793          	li	a5,256
    8001c9fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c9fe:	20000793          	li	a5,512
    8001ca02:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ca06:	40000793          	li	a5,1024
    8001ca0a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ca0e:	6785                	lui	a5,0x1
    8001ca10:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ca14:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ca18:	4785                	li	a5,1
    8001ca1a:	07fe                	slli	a5,a5,0x1f
    8001ca1c:	4485                	li	s1,1
    8001ca1e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ca22:	08100793          	li	a5,129
    8001ca26:	07e2                	slli	a5,a5,0x18
    8001ca28:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ca2c:	08000793          	li	a5,128
    8001ca30:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ca34:	67a1                	lui	a5,0x8
    8001ca36:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ca3a:	450d                	li	a0,3
    8001ca3c:	ccce40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ca40:	bcce40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ca44:	02149793          	slli	a5,s1,0x21
    8001ca48:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ca4c:	0003b417          	auipc	s0,0x3b
    8001ca50:	5c440413          	addi	s0,s0,1476 # 80058010 <excpt>
    8001ca54:	00000297          	auipc	t0,0x0
    8001ca58:	00c28293          	addi	t0,t0,12 # 8001ca60 <instruction_access_fault_2+0xa6>
    8001ca5c:	02543c23          	sd	t0,56(s0)
    8001ca60:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca62:	08200593          	li	a1,130
    8001ca66:	00018617          	auipc	a2,0x18
    8001ca6a:	51260613          	addi	a2,a2,1298 # 80034f78 <__func__.0+0x7090>
    8001ca6e:	00011517          	auipc	a0,0x11
    8001ca72:	77250513          	addi	a0,a0,1906 # 8002e1e0 <__func__.0+0x2f8>
    8001ca76:	1b50e0ef          	jal	8002b42a <printf>
    8001ca7a:	0003b797          	auipc	a5,0x3b
    8001ca7e:	5977c783          	lbu	a5,1431(a5) # 80058011 <excpt+0x1>
    8001ca82:	00011597          	auipc	a1,0x11
    8001ca86:	73658593          	addi	a1,a1,1846 # 8002e1b8 <__func__.0+0x2d0>
    8001ca8a:	cf81                	beqz	a5,8001caa2 <instruction_access_fault_2+0xe8>
    8001ca8c:	641c                	ld	a5,8(s0)
    8001ca8e:	00011597          	auipc	a1,0x11
    8001ca92:	71a58593          	addi	a1,a1,1818 # 8002e1a8 <__func__.0+0x2c0>
    8001ca96:	00978663          	beq	a5,s1,8001caa2 <instruction_access_fault_2+0xe8>
    8001ca9a:	00011597          	auipc	a1,0x11
    8001ca9e:	71e58593          	addi	a1,a1,1822 # 8002e1b8 <__func__.0+0x2d0>
    8001caa2:	00011517          	auipc	a0,0x11
    8001caa6:	75650513          	addi	a0,a0,1878 # 8002e1f8 <__func__.0+0x310>
    8001caaa:	1810e0ef          	jal	8002b42a <printf>
    8001caae:	0003b797          	auipc	a5,0x3b
    8001cab2:	5637c783          	lbu	a5,1379(a5) # 80058011 <excpt+0x1>
    8001cab6:	c789                	beqz	a5,8001cac0 <instruction_access_fault_2+0x106>
    8001cab8:	6418                	ld	a4,8(s0)
    8001caba:	4785                	li	a5,1
    8001cabc:	00f70c63          	beq	a4,a5,8001cad4 <instruction_access_fault_2+0x11a>
    8001cac0:	00011517          	auipc	a0,0x11
    8001cac4:	74050513          	addi	a0,a0,1856 # 8002e200 <__func__.0+0x318>
    8001cac8:	1630e0ef          	jal	8002b42a <printf>
    8001cacc:	02900513          	li	a0,41
    8001cad0:	6480d0ef          	jal	8002a118 <putchar>
    8001cad4:	4529                	li	a0,10
    8001cad6:	6420d0ef          	jal	8002a118 <putchar>
    8001cada:	0003b497          	auipc	s1,0x3b
    8001cade:	5374c483          	lbu	s1,1335(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cae2:	00011597          	auipc	a1,0x11
    8001cae6:	6d658593          	addi	a1,a1,1750 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001caea:	cc91                	beqz	s1,8001cb06 <instruction_access_fault_2+0x14c>
    8001caec:	6418                	ld	a4,8(s0)
    8001caee:	4785                	li	a5,1
    TEST_END();
    8001caf0:	00011597          	auipc	a1,0x11
    8001caf4:	6b858593          	addi	a1,a1,1720 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001caf8:	00f70763          	beq	a4,a5,8001cb06 <instruction_access_fault_2+0x14c>
    8001cafc:	4481                	li	s1,0
    TEST_END();
    8001cafe:	00011597          	auipc	a1,0x11
    8001cb02:	6ba58593          	addi	a1,a1,1722 # 8002e1b8 <__func__.0+0x2d0>
    8001cb06:	00011517          	auipc	a0,0x11
    8001cb0a:	75a50513          	addi	a0,a0,1882 # 8002e260 <__func__.0+0x378>
    8001cb0e:	11d0e0ef          	jal	8002b42a <printf>
    8001cb12:	4511                	li	a0,4
    8001cb14:	bf4e40ef          	jal	80000f08 <goto_priv>
    8001cb18:	d0de40ef          	jal	80001824 <reset_state>
}
    8001cb1c:	60e2                	ld	ra,24(sp)
    8001cb1e:	6442                	ld	s0,16(sp)
    8001cb20:	8526                	mv	a0,s1
    8001cb22:	64a2                	ld	s1,8(sp)
    8001cb24:	6105                	addi	sp,sp,32
    8001cb26:	8082                	ret

000000008001cb28 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001cb28:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cb2a:	00011597          	auipc	a1,0x11
    8001cb2e:	91658593          	addi	a1,a1,-1770 # 8002d440 <__func__.7>
    8001cb32:	00011517          	auipc	a0,0x11
    8001cb36:	69650513          	addi	a0,a0,1686 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001cb3a:	ec06                	sd	ra,24(sp)
    8001cb3c:	e822                	sd	s0,16(sp)
    8001cb3e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cb40:	0eb0e0ef          	jal	8002b42a <printf>
    8001cb44:	4529                	li	a0,10
    8001cb46:	5d20d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001cb4a:	4511                	li	a0,4
    8001cb4c:	bbce40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cb50:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cb54:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cb58:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cb5c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cb60:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cb64:	10000793          	li	a5,256
    8001cb68:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cb6c:	20000793          	li	a5,512
    8001cb70:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cb74:	40000793          	li	a5,1024
    8001cb78:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cb7c:	6785                	lui	a5,0x1
    8001cb7e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cb82:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cb86:	4785                	li	a5,1
    8001cb88:	07fe                	slli	a5,a5,0x1f
    8001cb8a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cb8e:	08100793          	li	a5,129
    8001cb92:	07e2                	slli	a5,a5,0x18
    8001cb94:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cb98:	08000793          	li	a5,128
    8001cb9c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cba0:	67a1                	lui	a5,0x8
    8001cba2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cba6:	4505                	li	a0,1
    8001cba8:	b60e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cbac:	a60e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cbb0:	4785                	li	a5,1
    8001cbb2:	1786                	slli	a5,a5,0x21
    8001cbb4:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cbb8:	0003b417          	auipc	s0,0x3b
    8001cbbc:	45840413          	addi	s0,s0,1112 # 80058010 <excpt>
    8001cbc0:	00000297          	auipc	t0,0x0
    8001cbc4:	00c28293          	addi	t0,t0,12 # 8001cbcc <instruction_access_fault_3+0xa4>
    8001cbc8:	02543c23          	sd	t0,56(s0)
    8001cbcc:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbce:	08200593          	li	a1,130
    8001cbd2:	00018617          	auipc	a2,0x18
    8001cbd6:	3ee60613          	addi	a2,a2,1006 # 80034fc0 <__func__.0+0x70d8>
    8001cbda:	00011517          	auipc	a0,0x11
    8001cbde:	60650513          	addi	a0,a0,1542 # 8002e1e0 <__func__.0+0x2f8>
    8001cbe2:	0490e0ef          	jal	8002b42a <printf>
    8001cbe6:	0003b797          	auipc	a5,0x3b
    8001cbea:	42b7c783          	lbu	a5,1067(a5) # 80058011 <excpt+0x1>
    8001cbee:	00011597          	auipc	a1,0x11
    8001cbf2:	5ca58593          	addi	a1,a1,1482 # 8002e1b8 <__func__.0+0x2d0>
    8001cbf6:	cf89                	beqz	a5,8001cc10 <instruction_access_fault_3+0xe8>
    8001cbf8:	641c                	ld	a5,8(s0)
    8001cbfa:	4705                	li	a4,1
    8001cbfc:	00011597          	auipc	a1,0x11
    8001cc00:	5ac58593          	addi	a1,a1,1452 # 8002e1a8 <__func__.0+0x2c0>
    8001cc04:	00e78663          	beq	a5,a4,8001cc10 <instruction_access_fault_3+0xe8>
    8001cc08:	00011597          	auipc	a1,0x11
    8001cc0c:	5b058593          	addi	a1,a1,1456 # 8002e1b8 <__func__.0+0x2d0>
    8001cc10:	00011517          	auipc	a0,0x11
    8001cc14:	5e850513          	addi	a0,a0,1512 # 8002e1f8 <__func__.0+0x310>
    8001cc18:	0130e0ef          	jal	8002b42a <printf>
    8001cc1c:	0003b797          	auipc	a5,0x3b
    8001cc20:	3f57c783          	lbu	a5,1013(a5) # 80058011 <excpt+0x1>
    8001cc24:	c789                	beqz	a5,8001cc2e <instruction_access_fault_3+0x106>
    8001cc26:	6418                	ld	a4,8(s0)
    8001cc28:	4785                	li	a5,1
    8001cc2a:	00f70c63          	beq	a4,a5,8001cc42 <instruction_access_fault_3+0x11a>
    8001cc2e:	00011517          	auipc	a0,0x11
    8001cc32:	5d250513          	addi	a0,a0,1490 # 8002e200 <__func__.0+0x318>
    8001cc36:	7f40e0ef          	jal	8002b42a <printf>
    8001cc3a:	02900513          	li	a0,41
    8001cc3e:	4da0d0ef          	jal	8002a118 <putchar>
    8001cc42:	4529                	li	a0,10
    8001cc44:	4d40d0ef          	jal	8002a118 <putchar>
    8001cc48:	0003b497          	auipc	s1,0x3b
    8001cc4c:	3c94c483          	lbu	s1,969(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cc50:	00011597          	auipc	a1,0x11
    8001cc54:	56858593          	addi	a1,a1,1384 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc58:	cc91                	beqz	s1,8001cc74 <instruction_access_fault_3+0x14c>
    8001cc5a:	6418                	ld	a4,8(s0)
    8001cc5c:	4785                	li	a5,1
    TEST_END();
    8001cc5e:	00011597          	auipc	a1,0x11
    8001cc62:	54a58593          	addi	a1,a1,1354 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc66:	00f70763          	beq	a4,a5,8001cc74 <instruction_access_fault_3+0x14c>
    8001cc6a:	4481                	li	s1,0
    TEST_END();
    8001cc6c:	00011597          	auipc	a1,0x11
    8001cc70:	54c58593          	addi	a1,a1,1356 # 8002e1b8 <__func__.0+0x2d0>
    8001cc74:	00011517          	auipc	a0,0x11
    8001cc78:	5ec50513          	addi	a0,a0,1516 # 8002e260 <__func__.0+0x378>
    8001cc7c:	7ae0e0ef          	jal	8002b42a <printf>
    8001cc80:	4511                	li	a0,4
    8001cc82:	a86e40ef          	jal	80000f08 <goto_priv>
    8001cc86:	b9fe40ef          	jal	80001824 <reset_state>
}
    8001cc8a:	60e2                	ld	ra,24(sp)
    8001cc8c:	6442                	ld	s0,16(sp)
    8001cc8e:	8526                	mv	a0,s1
    8001cc90:	64a2                	ld	s1,8(sp)
    8001cc92:	6105                	addi	sp,sp,32
    8001cc94:	8082                	ret

000000008001cc96 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001cc96:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cc98:	00010597          	auipc	a1,0x10
    8001cc9c:	7c858593          	addi	a1,a1,1992 # 8002d460 <__func__.6>
    8001cca0:	00011517          	auipc	a0,0x11
    8001cca4:	52850513          	addi	a0,a0,1320 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001cca8:	ec06                	sd	ra,24(sp)
    8001ccaa:	e822                	sd	s0,16(sp)
    8001ccac:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ccae:	77c0e0ef          	jal	8002b42a <printf>
    8001ccb2:	4529                	li	a0,10
    8001ccb4:	4640d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001ccb8:	4511                	li	a0,4
    8001ccba:	a4ee40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ccbe:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ccc2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ccc6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ccca:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ccce:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ccd2:	10000793          	li	a5,256
    8001ccd6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ccda:	20000793          	li	a5,512
    8001ccde:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cce2:	40000793          	li	a5,1024
    8001cce6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ccea:	6785                	lui	a5,0x1
    8001ccec:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ccf0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ccf4:	4785                	li	a5,1
    8001ccf6:	07fe                	slli	a5,a5,0x1f
    8001ccf8:	4485                	li	s1,1
    8001ccfa:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ccfe:	08100793          	li	a5,129
    8001cd02:	07e2                	slli	a5,a5,0x18
    8001cd04:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cd08:	08000793          	li	a5,128
    8001cd0c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cd10:	67a1                	lui	a5,0x8
    8001cd12:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cd16:	4501                	li	a0,0
    8001cd18:	9f0e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cd1c:	8f0e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cd20:	02149793          	slli	a5,s1,0x21
    8001cd24:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cd28:	0003b417          	auipc	s0,0x3b
    8001cd2c:	2e840413          	addi	s0,s0,744 # 80058010 <excpt>
    8001cd30:	00000297          	auipc	t0,0x0
    8001cd34:	00c28293          	addi	t0,t0,12 # 8001cd3c <instruction_access_fault_4+0xa6>
    8001cd38:	02543c23          	sd	t0,56(s0)
    8001cd3c:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd3e:	08200593          	li	a1,130
    8001cd42:	00018617          	auipc	a2,0x18
    8001cd46:	2c660613          	addi	a2,a2,710 # 80035008 <__func__.0+0x7120>
    8001cd4a:	00011517          	auipc	a0,0x11
    8001cd4e:	49650513          	addi	a0,a0,1174 # 8002e1e0 <__func__.0+0x2f8>
    8001cd52:	6d80e0ef          	jal	8002b42a <printf>
    8001cd56:	0003b797          	auipc	a5,0x3b
    8001cd5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    8001cd5e:	00011597          	auipc	a1,0x11
    8001cd62:	45a58593          	addi	a1,a1,1114 # 8002e1b8 <__func__.0+0x2d0>
    8001cd66:	cf81                	beqz	a5,8001cd7e <instruction_access_fault_4+0xe8>
    8001cd68:	641c                	ld	a5,8(s0)
    8001cd6a:	00011597          	auipc	a1,0x11
    8001cd6e:	43e58593          	addi	a1,a1,1086 # 8002e1a8 <__func__.0+0x2c0>
    8001cd72:	00978663          	beq	a5,s1,8001cd7e <instruction_access_fault_4+0xe8>
    8001cd76:	00011597          	auipc	a1,0x11
    8001cd7a:	44258593          	addi	a1,a1,1090 # 8002e1b8 <__func__.0+0x2d0>
    8001cd7e:	00011517          	auipc	a0,0x11
    8001cd82:	47a50513          	addi	a0,a0,1146 # 8002e1f8 <__func__.0+0x310>
    8001cd86:	6a40e0ef          	jal	8002b42a <printf>
    8001cd8a:	0003b797          	auipc	a5,0x3b
    8001cd8e:	2877c783          	lbu	a5,647(a5) # 80058011 <excpt+0x1>
    8001cd92:	c789                	beqz	a5,8001cd9c <instruction_access_fault_4+0x106>
    8001cd94:	6418                	ld	a4,8(s0)
    8001cd96:	4785                	li	a5,1
    8001cd98:	00f70c63          	beq	a4,a5,8001cdb0 <instruction_access_fault_4+0x11a>
    8001cd9c:	00011517          	auipc	a0,0x11
    8001cda0:	46450513          	addi	a0,a0,1124 # 8002e200 <__func__.0+0x318>
    8001cda4:	6860e0ef          	jal	8002b42a <printf>
    8001cda8:	02900513          	li	a0,41
    8001cdac:	36c0d0ef          	jal	8002a118 <putchar>
    8001cdb0:	4529                	li	a0,10
    8001cdb2:	3660d0ef          	jal	8002a118 <putchar>
    8001cdb6:	0003b497          	auipc	s1,0x3b
    8001cdba:	25b4c483          	lbu	s1,603(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cdbe:	00011597          	auipc	a1,0x11
    8001cdc2:	3fa58593          	addi	a1,a1,1018 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cdc6:	cc91                	beqz	s1,8001cde2 <instruction_access_fault_4+0x14c>
    8001cdc8:	6418                	ld	a4,8(s0)
    8001cdca:	4785                	li	a5,1
    TEST_END();
    8001cdcc:	00011597          	auipc	a1,0x11
    8001cdd0:	3dc58593          	addi	a1,a1,988 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cdd4:	00f70763          	beq	a4,a5,8001cde2 <instruction_access_fault_4+0x14c>
    8001cdd8:	4481                	li	s1,0
    TEST_END();
    8001cdda:	00011597          	auipc	a1,0x11
    8001cdde:	3de58593          	addi	a1,a1,990 # 8002e1b8 <__func__.0+0x2d0>
    8001cde2:	00011517          	auipc	a0,0x11
    8001cde6:	47e50513          	addi	a0,a0,1150 # 8002e260 <__func__.0+0x378>
    8001cdea:	6400e0ef          	jal	8002b42a <printf>
    8001cdee:	4511                	li	a0,4
    8001cdf0:	918e40ef          	jal	80000f08 <goto_priv>
    8001cdf4:	a31e40ef          	jal	80001824 <reset_state>
}
    8001cdf8:	60e2                	ld	ra,24(sp)
    8001cdfa:	6442                	ld	s0,16(sp)
    8001cdfc:	8526                	mv	a0,s1
    8001cdfe:	64a2                	ld	s1,8(sp)
    8001ce00:	6105                	addi	sp,sp,32
    8001ce02:	8082                	ret

000000008001ce04 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001ce04:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ce06:	00010597          	auipc	a1,0x10
    8001ce0a:	67a58593          	addi	a1,a1,1658 # 8002d480 <__func__.5>
    8001ce0e:	00011517          	auipc	a0,0x11
    8001ce12:	3ba50513          	addi	a0,a0,954 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001ce16:	e406                	sd	ra,8(sp)
    8001ce18:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ce1a:	6100e0ef          	jal	8002b42a <printf>
    8001ce1e:	4529                	li	a0,10
    8001ce20:	2f80d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001ce24:	4511                	li	a0,4
    8001ce26:	8e2e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ce2a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ce2e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ce32:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ce36:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ce3a:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ce3e:	10000793          	li	a5,256
    8001ce42:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ce46:	20000793          	li	a5,512
    8001ce4a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ce4e:	40000793          	li	a5,1024
    8001ce52:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ce56:	6785                	lui	a5,0x1
    8001ce58:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ce5c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001ce60:	4785                	li	a5,1
    8001ce62:	07fe                	slli	a5,a5,0x1f
    8001ce64:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001ce68:	08100793          	li	a5,129
    8001ce6c:	07e2                	slli	a5,a5,0x18
    8001ce6e:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ce72:	67a1                	lui	a5,0x8
    8001ce74:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001ce78:	f95e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ce7c:	4785                	li	a5,1
    8001ce7e:	1786                	slli	a5,a5,0x21
    8001ce80:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ce84:	0003b417          	auipc	s0,0x3b
    8001ce88:	18c40413          	addi	s0,s0,396 # 80058010 <excpt>
    8001ce8c:	00000297          	auipc	t0,0x0
    8001ce90:	00c28293          	addi	t0,t0,12 # 8001ce98 <instruction_access_fault_5+0x94>
    8001ce94:	02543c23          	sd	t0,56(s0)
    8001ce98:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001ce9a:	0003b597          	auipc	a1,0x3b
    8001ce9e:	1775c583          	lbu	a1,375(a1) # 80058011 <excpt+0x1>
    8001cea2:	00012517          	auipc	a0,0x12
    8001cea6:	e9e50513          	addi	a0,a0,-354 # 8002ed40 <__func__.0+0xe58>
    8001ceaa:	5800e0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001ceae:	640c                	ld	a1,8(s0)
    8001ceb0:	00012517          	auipc	a0,0x12
    8001ceb4:	e9050513          	addi	a0,a0,-368 # 8002ed40 <__func__.0+0xe58>
    8001ceb8:	5720e0ef          	jal	8002b42a <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cebc:	08200593          	li	a1,130
    8001cec0:	00018617          	auipc	a2,0x18
    8001cec4:	19060613          	addi	a2,a2,400 # 80035050 <__func__.0+0x7168>
    8001cec8:	00011517          	auipc	a0,0x11
    8001cecc:	31850513          	addi	a0,a0,792 # 8002e1e0 <__func__.0+0x2f8>
    8001ced0:	55a0e0ef          	jal	8002b42a <printf>
    8001ced4:	0003b797          	auipc	a5,0x3b
    8001ced8:	13d7c783          	lbu	a5,317(a5) # 80058011 <excpt+0x1>
    8001cedc:	00011597          	auipc	a1,0x11
    8001cee0:	2cc58593          	addi	a1,a1,716 # 8002e1a8 <__func__.0+0x2c0>
    8001cee4:	c789                	beqz	a5,8001ceee <instruction_access_fault_5+0xea>
    8001cee6:	00011597          	auipc	a1,0x11
    8001ceea:	2d258593          	addi	a1,a1,722 # 8002e1b8 <__func__.0+0x2d0>
    8001ceee:	00011517          	auipc	a0,0x11
    8001cef2:	30a50513          	addi	a0,a0,778 # 8002e1f8 <__func__.0+0x310>
    8001cef6:	5340e0ef          	jal	8002b42a <printf>
    8001cefa:	0003b797          	auipc	a5,0x3b
    8001cefe:	1177c783          	lbu	a5,279(a5) # 80058011 <excpt+0x1>
    8001cf02:	e7a1                	bnez	a5,8001cf4a <instruction_access_fault_5+0x146>
    8001cf04:	4529                	li	a0,10
    8001cf06:	2120d0ef          	jal	8002a118 <putchar>
    8001cf0a:	0003b797          	auipc	a5,0x3b
    8001cf0e:	1077c783          	lbu	a5,263(a5) # 80058011 <excpt+0x1>
    8001cf12:	e795                	bnez	a5,8001cf3e <instruction_access_fault_5+0x13a>
    8001cf14:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001cf16:	00011597          	auipc	a1,0x11
    8001cf1a:	29258593          	addi	a1,a1,658 # 8002e1a8 <__func__.0+0x2c0>
    8001cf1e:	00011517          	auipc	a0,0x11
    8001cf22:	34250513          	addi	a0,a0,834 # 8002e260 <__func__.0+0x378>
    8001cf26:	5040e0ef          	jal	8002b42a <printf>
    8001cf2a:	4511                	li	a0,4
    8001cf2c:	fdde30ef          	jal	80000f08 <goto_priv>
    8001cf30:	8f5e40ef          	jal	80001824 <reset_state>
}
    8001cf34:	60a2                	ld	ra,8(sp)
    8001cf36:	8522                	mv	a0,s0
    8001cf38:	6402                	ld	s0,0(sp)
    8001cf3a:	0141                	addi	sp,sp,16
    8001cf3c:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cf3e:	4401                	li	s0,0
    TEST_END();
    8001cf40:	00011597          	auipc	a1,0x11
    8001cf44:	27858593          	addi	a1,a1,632 # 8002e1b8 <__func__.0+0x2d0>
    8001cf48:	bfd9                	j	8001cf1e <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cf4a:	00011517          	auipc	a0,0x11
    8001cf4e:	2b650513          	addi	a0,a0,694 # 8002e200 <__func__.0+0x318>
    8001cf52:	4d80e0ef          	jal	8002b42a <printf>
    8001cf56:	02900513          	li	a0,41
    8001cf5a:	1be0d0ef          	jal	8002a118 <putchar>
    8001cf5e:	b75d                	j	8001cf04 <instruction_access_fault_5+0x100>

000000008001cf60 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001cf60:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cf62:	00010597          	auipc	a1,0x10
    8001cf66:	53e58593          	addi	a1,a1,1342 # 8002d4a0 <__func__.4>
    8001cf6a:	00011517          	auipc	a0,0x11
    8001cf6e:	25e50513          	addi	a0,a0,606 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001cf72:	ec06                	sd	ra,24(sp)
    8001cf74:	e822                	sd	s0,16(sp)
    8001cf76:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cf78:	4b20e0ef          	jal	8002b42a <printf>
    8001cf7c:	4529                	li	a0,10
    8001cf7e:	19a0d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001cf82:	4511                	li	a0,4
    8001cf84:	f85e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cf88:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cf8c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cf90:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cf94:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cf98:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cf9c:	10000793          	li	a5,256
    8001cfa0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cfa4:	20000793          	li	a5,512
    8001cfa8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cfac:	40000793          	li	a5,1024
    8001cfb0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cfb4:	6785                	lui	a5,0x1
    8001cfb6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cfba:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cfbe:	4785                	li	a5,1
    8001cfc0:	07fe                	slli	a5,a5,0x1f
    8001cfc2:	4485                	li	s1,1
    8001cfc4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cfc8:	08100793          	li	a5,129
    8001cfcc:	07e2                	slli	a5,a5,0x18
    8001cfce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cfd2:	08000793          	li	a5,128
    8001cfd6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cfda:	67a1                	lui	a5,0x8
    8001cfdc:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cfe0:	450d                	li	a0,3
    8001cfe2:	f27e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cfe6:	e27e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cfea:	02149793          	slli	a5,s1,0x21
    8001cfee:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cff2:	0003b417          	auipc	s0,0x3b
    8001cff6:	01e40413          	addi	s0,s0,30 # 80058010 <excpt>
    8001cffa:	00000297          	auipc	t0,0x0
    8001cffe:	00c28293          	addi	t0,t0,12 # 8001d006 <instruction_access_fault_6+0xa6>
    8001d002:	02543c23          	sd	t0,56(s0)
    8001d006:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d008:	08200593          	li	a1,130
    8001d00c:	00018617          	auipc	a2,0x18
    8001d010:	08c60613          	addi	a2,a2,140 # 80035098 <__func__.0+0x71b0>
    8001d014:	00011517          	auipc	a0,0x11
    8001d018:	1cc50513          	addi	a0,a0,460 # 8002e1e0 <__func__.0+0x2f8>
    8001d01c:	40e0e0ef          	jal	8002b42a <printf>
    8001d020:	0003b797          	auipc	a5,0x3b
    8001d024:	ff17c783          	lbu	a5,-15(a5) # 80058011 <excpt+0x1>
    8001d028:	00011597          	auipc	a1,0x11
    8001d02c:	19058593          	addi	a1,a1,400 # 8002e1b8 <__func__.0+0x2d0>
    8001d030:	cf81                	beqz	a5,8001d048 <instruction_access_fault_6+0xe8>
    8001d032:	641c                	ld	a5,8(s0)
    8001d034:	00011597          	auipc	a1,0x11
    8001d038:	17458593          	addi	a1,a1,372 # 8002e1a8 <__func__.0+0x2c0>
    8001d03c:	00978663          	beq	a5,s1,8001d048 <instruction_access_fault_6+0xe8>
    8001d040:	00011597          	auipc	a1,0x11
    8001d044:	17858593          	addi	a1,a1,376 # 8002e1b8 <__func__.0+0x2d0>
    8001d048:	00011517          	auipc	a0,0x11
    8001d04c:	1b050513          	addi	a0,a0,432 # 8002e1f8 <__func__.0+0x310>
    8001d050:	3da0e0ef          	jal	8002b42a <printf>
    8001d054:	0003b797          	auipc	a5,0x3b
    8001d058:	fbd7c783          	lbu	a5,-67(a5) # 80058011 <excpt+0x1>
    8001d05c:	c789                	beqz	a5,8001d066 <instruction_access_fault_6+0x106>
    8001d05e:	6418                	ld	a4,8(s0)
    8001d060:	4785                	li	a5,1
    8001d062:	00f70c63          	beq	a4,a5,8001d07a <instruction_access_fault_6+0x11a>
    8001d066:	00011517          	auipc	a0,0x11
    8001d06a:	19a50513          	addi	a0,a0,410 # 8002e200 <__func__.0+0x318>
    8001d06e:	3bc0e0ef          	jal	8002b42a <printf>
    8001d072:	02900513          	li	a0,41
    8001d076:	0a20d0ef          	jal	8002a118 <putchar>
    8001d07a:	4529                	li	a0,10
    8001d07c:	09c0d0ef          	jal	8002a118 <putchar>
    8001d080:	0003b497          	auipc	s1,0x3b
    8001d084:	f914c483          	lbu	s1,-111(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d088:	00011597          	auipc	a1,0x11
    8001d08c:	13058593          	addi	a1,a1,304 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d090:	cc91                	beqz	s1,8001d0ac <instruction_access_fault_6+0x14c>
    8001d092:	6418                	ld	a4,8(s0)
    8001d094:	4785                	li	a5,1
    TEST_END();
    8001d096:	00011597          	auipc	a1,0x11
    8001d09a:	11258593          	addi	a1,a1,274 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d09e:	00f70763          	beq	a4,a5,8001d0ac <instruction_access_fault_6+0x14c>
    8001d0a2:	4481                	li	s1,0
    TEST_END();
    8001d0a4:	00011597          	auipc	a1,0x11
    8001d0a8:	11458593          	addi	a1,a1,276 # 8002e1b8 <__func__.0+0x2d0>
    8001d0ac:	00011517          	auipc	a0,0x11
    8001d0b0:	1b450513          	addi	a0,a0,436 # 8002e260 <__func__.0+0x378>
    8001d0b4:	3760e0ef          	jal	8002b42a <printf>
    8001d0b8:	4511                	li	a0,4
    8001d0ba:	e4fe30ef          	jal	80000f08 <goto_priv>
    8001d0be:	f66e40ef          	jal	80001824 <reset_state>
}
    8001d0c2:	60e2                	ld	ra,24(sp)
    8001d0c4:	6442                	ld	s0,16(sp)
    8001d0c6:	8526                	mv	a0,s1
    8001d0c8:	64a2                	ld	s1,8(sp)
    8001d0ca:	6105                	addi	sp,sp,32
    8001d0cc:	8082                	ret

000000008001d0ce <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001d0ce:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d0d0:	00010597          	auipc	a1,0x10
    8001d0d4:	3f058593          	addi	a1,a1,1008 # 8002d4c0 <__func__.3>
    8001d0d8:	00011517          	auipc	a0,0x11
    8001d0dc:	0f050513          	addi	a0,a0,240 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001d0e0:	ec06                	sd	ra,24(sp)
    8001d0e2:	e822                	sd	s0,16(sp)
    8001d0e4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d0e6:	3440e0ef          	jal	8002b42a <printf>
    8001d0ea:	4529                	li	a0,10
    8001d0ec:	02c0d0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001d0f0:	4511                	li	a0,4
    8001d0f2:	e17e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d0f6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d0fa:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d0fe:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d102:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d106:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d10a:	10000793          	li	a5,256
    8001d10e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d112:	20000793          	li	a5,512
    8001d116:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d11a:	40000793          	li	a5,1024
    8001d11e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d122:	6785                	lui	a5,0x1
    8001d124:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d128:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d12c:	4785                	li	a5,1
    8001d12e:	07fe                	slli	a5,a5,0x1f
    8001d130:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d134:	08100793          	li	a5,129
    8001d138:	07e2                	slli	a5,a5,0x18
    8001d13a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d13e:	08000793          	li	a5,128
    8001d142:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d146:	67a1                	lui	a5,0x8
    8001d148:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001d14c:	4505                	li	a0,1
    8001d14e:	dbbe30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d152:	cbbe30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d156:	4785                	li	a5,1
    8001d158:	1786                	slli	a5,a5,0x21
    8001d15a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d15e:	0003b417          	auipc	s0,0x3b
    8001d162:	eb240413          	addi	s0,s0,-334 # 80058010 <excpt>
    8001d166:	00000297          	auipc	t0,0x0
    8001d16a:	00c28293          	addi	t0,t0,12 # 8001d172 <instruction_access_fault_7+0xa4>
    8001d16e:	02543c23          	sd	t0,56(s0)
    8001d172:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d174:	08200593          	li	a1,130
    8001d178:	00018617          	auipc	a2,0x18
    8001d17c:	f6860613          	addi	a2,a2,-152 # 800350e0 <__func__.0+0x71f8>
    8001d180:	00011517          	auipc	a0,0x11
    8001d184:	06050513          	addi	a0,a0,96 # 8002e1e0 <__func__.0+0x2f8>
    8001d188:	2a20e0ef          	jal	8002b42a <printf>
    8001d18c:	0003b797          	auipc	a5,0x3b
    8001d190:	e857c783          	lbu	a5,-379(a5) # 80058011 <excpt+0x1>
    8001d194:	00011597          	auipc	a1,0x11
    8001d198:	02458593          	addi	a1,a1,36 # 8002e1b8 <__func__.0+0x2d0>
    8001d19c:	cf89                	beqz	a5,8001d1b6 <instruction_access_fault_7+0xe8>
    8001d19e:	641c                	ld	a5,8(s0)
    8001d1a0:	4705                	li	a4,1
    8001d1a2:	00011597          	auipc	a1,0x11
    8001d1a6:	00658593          	addi	a1,a1,6 # 8002e1a8 <__func__.0+0x2c0>
    8001d1aa:	00e78663          	beq	a5,a4,8001d1b6 <instruction_access_fault_7+0xe8>
    8001d1ae:	00011597          	auipc	a1,0x11
    8001d1b2:	00a58593          	addi	a1,a1,10 # 8002e1b8 <__func__.0+0x2d0>
    8001d1b6:	00011517          	auipc	a0,0x11
    8001d1ba:	04250513          	addi	a0,a0,66 # 8002e1f8 <__func__.0+0x310>
    8001d1be:	26c0e0ef          	jal	8002b42a <printf>
    8001d1c2:	0003b797          	auipc	a5,0x3b
    8001d1c6:	e4f7c783          	lbu	a5,-433(a5) # 80058011 <excpt+0x1>
    8001d1ca:	c789                	beqz	a5,8001d1d4 <instruction_access_fault_7+0x106>
    8001d1cc:	6418                	ld	a4,8(s0)
    8001d1ce:	4785                	li	a5,1
    8001d1d0:	00f70c63          	beq	a4,a5,8001d1e8 <instruction_access_fault_7+0x11a>
    8001d1d4:	00011517          	auipc	a0,0x11
    8001d1d8:	02c50513          	addi	a0,a0,44 # 8002e200 <__func__.0+0x318>
    8001d1dc:	24e0e0ef          	jal	8002b42a <printf>
    8001d1e0:	02900513          	li	a0,41
    8001d1e4:	7350c0ef          	jal	8002a118 <putchar>
    8001d1e8:	4529                	li	a0,10
    8001d1ea:	72f0c0ef          	jal	8002a118 <putchar>
    8001d1ee:	0003b497          	auipc	s1,0x3b
    8001d1f2:	e234c483          	lbu	s1,-477(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001d1f6:	00011597          	auipc	a1,0x11
    8001d1fa:	fc258593          	addi	a1,a1,-62 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d1fe:	cc91                	beqz	s1,8001d21a <instruction_access_fault_7+0x14c>
    8001d200:	6418                	ld	a4,8(s0)
    8001d202:	4785                	li	a5,1
    TEST_END();
    8001d204:	00011597          	auipc	a1,0x11
    8001d208:	fa458593          	addi	a1,a1,-92 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d20c:	00f70763          	beq	a4,a5,8001d21a <instruction_access_fault_7+0x14c>
    8001d210:	4481                	li	s1,0
    TEST_END();
    8001d212:	00011597          	auipc	a1,0x11
    8001d216:	fa658593          	addi	a1,a1,-90 # 8002e1b8 <__func__.0+0x2d0>
    8001d21a:	00011517          	auipc	a0,0x11
    8001d21e:	04650513          	addi	a0,a0,70 # 8002e260 <__func__.0+0x378>
    8001d222:	2080e0ef          	jal	8002b42a <printf>
    8001d226:	4511                	li	a0,4
    8001d228:	ce1e30ef          	jal	80000f08 <goto_priv>
    8001d22c:	df8e40ef          	jal	80001824 <reset_state>
}
    8001d230:	60e2                	ld	ra,24(sp)
    8001d232:	6442                	ld	s0,16(sp)
    8001d234:	8526                	mv	a0,s1
    8001d236:	64a2                	ld	s1,8(sp)
    8001d238:	6105                	addi	sp,sp,32
    8001d23a:	8082                	ret

000000008001d23c <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001d23c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d23e:	00010597          	auipc	a1,0x10
    8001d242:	2a258593          	addi	a1,a1,674 # 8002d4e0 <__func__.2>
    8001d246:	00011517          	auipc	a0,0x11
    8001d24a:	f8250513          	addi	a0,a0,-126 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001d24e:	ec06                	sd	ra,24(sp)
    8001d250:	e822                	sd	s0,16(sp)
    8001d252:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d254:	1d60e0ef          	jal	8002b42a <printf>
    8001d258:	4529                	li	a0,10
    8001d25a:	6bf0c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001d25e:	4511                	li	a0,4
    8001d260:	ca9e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d264:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d268:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d26c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d270:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d274:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d278:	10000793          	li	a5,256
    8001d27c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d280:	20000793          	li	a5,512
    8001d284:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d288:	40000793          	li	a5,1024
    8001d28c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d290:	6785                	lui	a5,0x1
    8001d292:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d296:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d29a:	4785                	li	a5,1
    8001d29c:	07fe                	slli	a5,a5,0x1f
    8001d29e:	4485                	li	s1,1
    8001d2a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d2a4:	08100793          	li	a5,129
    8001d2a8:	07e2                	slli	a5,a5,0x18
    8001d2aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d2ae:	08000793          	li	a5,128
    8001d2b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d2b6:	67a1                	lui	a5,0x8
    8001d2b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d2bc:	4501                	li	a0,0
    8001d2be:	c4be30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d2c2:	b4be30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d2c6:	02149793          	slli	a5,s1,0x21
    8001d2ca:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d2ce:	0003b417          	auipc	s0,0x3b
    8001d2d2:	d4240413          	addi	s0,s0,-702 # 80058010 <excpt>
    8001d2d6:	00000297          	auipc	t0,0x0
    8001d2da:	00c28293          	addi	t0,t0,12 # 8001d2e2 <instruction_access_fault_8+0xa6>
    8001d2de:	02543c23          	sd	t0,56(s0)
    8001d2e2:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2e4:	08200593          	li	a1,130
    8001d2e8:	00018617          	auipc	a2,0x18
    8001d2ec:	e4060613          	addi	a2,a2,-448 # 80035128 <__func__.0+0x7240>
    8001d2f0:	00011517          	auipc	a0,0x11
    8001d2f4:	ef050513          	addi	a0,a0,-272 # 8002e1e0 <__func__.0+0x2f8>
    8001d2f8:	1320e0ef          	jal	8002b42a <printf>
    8001d2fc:	0003b797          	auipc	a5,0x3b
    8001d300:	d157c783          	lbu	a5,-747(a5) # 80058011 <excpt+0x1>
    8001d304:	00011597          	auipc	a1,0x11
    8001d308:	eb458593          	addi	a1,a1,-332 # 8002e1b8 <__func__.0+0x2d0>
    8001d30c:	cf81                	beqz	a5,8001d324 <instruction_access_fault_8+0xe8>
    8001d30e:	641c                	ld	a5,8(s0)
    8001d310:	00011597          	auipc	a1,0x11
    8001d314:	e9858593          	addi	a1,a1,-360 # 8002e1a8 <__func__.0+0x2c0>
    8001d318:	00978663          	beq	a5,s1,8001d324 <instruction_access_fault_8+0xe8>
    8001d31c:	00011597          	auipc	a1,0x11
    8001d320:	e9c58593          	addi	a1,a1,-356 # 8002e1b8 <__func__.0+0x2d0>
    8001d324:	00011517          	auipc	a0,0x11
    8001d328:	ed450513          	addi	a0,a0,-300 # 8002e1f8 <__func__.0+0x310>
    8001d32c:	0fe0e0ef          	jal	8002b42a <printf>
    8001d330:	0003b797          	auipc	a5,0x3b
    8001d334:	ce17c783          	lbu	a5,-799(a5) # 80058011 <excpt+0x1>
    8001d338:	c789                	beqz	a5,8001d342 <instruction_access_fault_8+0x106>
    8001d33a:	6418                	ld	a4,8(s0)
    8001d33c:	4785                	li	a5,1
    8001d33e:	00f70c63          	beq	a4,a5,8001d356 <instruction_access_fault_8+0x11a>
    8001d342:	00011517          	auipc	a0,0x11
    8001d346:	ebe50513          	addi	a0,a0,-322 # 8002e200 <__func__.0+0x318>
    8001d34a:	0e00e0ef          	jal	8002b42a <printf>
    8001d34e:	02900513          	li	a0,41
    8001d352:	5c70c0ef          	jal	8002a118 <putchar>
    8001d356:	4529                	li	a0,10
    8001d358:	5c10c0ef          	jal	8002a118 <putchar>
    8001d35c:	0003b497          	auipc	s1,0x3b
    8001d360:	cb54c483          	lbu	s1,-843(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d364:	00011597          	auipc	a1,0x11
    8001d368:	e5458593          	addi	a1,a1,-428 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d36c:	cc91                	beqz	s1,8001d388 <instruction_access_fault_8+0x14c>
    8001d36e:	6418                	ld	a4,8(s0)
    8001d370:	4785                	li	a5,1
    TEST_END();
    8001d372:	00011597          	auipc	a1,0x11
    8001d376:	e3658593          	addi	a1,a1,-458 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d37a:	00f70763          	beq	a4,a5,8001d388 <instruction_access_fault_8+0x14c>
    8001d37e:	4481                	li	s1,0
    TEST_END();
    8001d380:	00011597          	auipc	a1,0x11
    8001d384:	e3858593          	addi	a1,a1,-456 # 8002e1b8 <__func__.0+0x2d0>
    8001d388:	00011517          	auipc	a0,0x11
    8001d38c:	ed850513          	addi	a0,a0,-296 # 8002e260 <__func__.0+0x378>
    8001d390:	09a0e0ef          	jal	8002b42a <printf>
    8001d394:	4511                	li	a0,4
    8001d396:	b73e30ef          	jal	80000f08 <goto_priv>
    8001d39a:	c8ae40ef          	jal	80001824 <reset_state>
}
    8001d39e:	60e2                	ld	ra,24(sp)
    8001d3a0:	6442                	ld	s0,16(sp)
    8001d3a2:	8526                	mv	a0,s1
    8001d3a4:	64a2                	ld	s1,8(sp)
    8001d3a6:	6105                	addi	sp,sp,32
    8001d3a8:	8082                	ret

000000008001d3aa <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001d3aa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d3ac:	00010597          	auipc	a1,0x10
    8001d3b0:	15458593          	addi	a1,a1,340 # 8002d500 <__func__.1>
    8001d3b4:	00011517          	auipc	a0,0x11
    8001d3b8:	e1450513          	addi	a0,a0,-492 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001d3bc:	ec06                	sd	ra,24(sp)
    8001d3be:	e822                	sd	s0,16(sp)
    8001d3c0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d3c2:	0680e0ef          	jal	8002b42a <printf>
    8001d3c6:	4529                	li	a0,10
    8001d3c8:	5510c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001d3cc:	4511                	li	a0,4
    8001d3ce:	b3be30ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d3d2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d3d6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d3da:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d3de:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d3e2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d3e6:	10000793          	li	a5,256
    8001d3ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d3ee:	20000793          	li	a5,512
    8001d3f2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d3f6:	40000793          	li	a5,1024
    8001d3fa:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d3fe:	6785                	lui	a5,0x1
    8001d400:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d404:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d408:	4785                	li	a5,1
    8001d40a:	07fe                	slli	a5,a5,0x1f
    8001d40c:	4485                	li	s1,1
    8001d40e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d412:	08100793          	li	a5,129
    8001d416:	07e2                	slli	a5,a5,0x18
    8001d418:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d41c:	08000793          	li	a5,128
    8001d420:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d424:	67a1                	lui	a5,0x8
    8001d426:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d42a:	4501                	li	a0,0
    8001d42c:	adde30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d430:	9dde30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001d434:	02349793          	slli	a5,s1,0x23
    8001d438:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001d43a:	0003b417          	auipc	s0,0x3b
    8001d43e:	bd640413          	addi	s0,s0,-1066 # 80058010 <excpt>
    8001d442:	00000297          	auipc	t0,0x0
    8001d446:	00c28293          	addi	t0,t0,12 # 8001d44e <instruction_access_fault_9+0xa4>
    8001d44a:	02543c23          	sd	t0,56(s0)
    8001d44e:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d450:	08200593          	li	a1,130
    8001d454:	00018617          	auipc	a2,0x18
    8001d458:	d0c60613          	addi	a2,a2,-756 # 80035160 <__func__.0+0x7278>
    8001d45c:	00011517          	auipc	a0,0x11
    8001d460:	d8450513          	addi	a0,a0,-636 # 8002e1e0 <__func__.0+0x2f8>
    8001d464:	7c70d0ef          	jal	8002b42a <printf>
    8001d468:	0003b797          	auipc	a5,0x3b
    8001d46c:	ba97c783          	lbu	a5,-1111(a5) # 80058011 <excpt+0x1>
    8001d470:	00011597          	auipc	a1,0x11
    8001d474:	d4858593          	addi	a1,a1,-696 # 8002e1b8 <__func__.0+0x2d0>
    8001d478:	cf81                	beqz	a5,8001d490 <instruction_access_fault_9+0xe6>
    8001d47a:	641c                	ld	a5,8(s0)
    8001d47c:	00011597          	auipc	a1,0x11
    8001d480:	d2c58593          	addi	a1,a1,-724 # 8002e1a8 <__func__.0+0x2c0>
    8001d484:	00978663          	beq	a5,s1,8001d490 <instruction_access_fault_9+0xe6>
    8001d488:	00011597          	auipc	a1,0x11
    8001d48c:	d3058593          	addi	a1,a1,-720 # 8002e1b8 <__func__.0+0x2d0>
    8001d490:	00011517          	auipc	a0,0x11
    8001d494:	d6850513          	addi	a0,a0,-664 # 8002e1f8 <__func__.0+0x310>
    8001d498:	7930d0ef          	jal	8002b42a <printf>
    8001d49c:	0003b797          	auipc	a5,0x3b
    8001d4a0:	b757c783          	lbu	a5,-1163(a5) # 80058011 <excpt+0x1>
    8001d4a4:	c789                	beqz	a5,8001d4ae <instruction_access_fault_9+0x104>
    8001d4a6:	6418                	ld	a4,8(s0)
    8001d4a8:	4785                	li	a5,1
    8001d4aa:	00f70c63          	beq	a4,a5,8001d4c2 <instruction_access_fault_9+0x118>
    8001d4ae:	00011517          	auipc	a0,0x11
    8001d4b2:	d5250513          	addi	a0,a0,-686 # 8002e200 <__func__.0+0x318>
    8001d4b6:	7750d0ef          	jal	8002b42a <printf>
    8001d4ba:	02900513          	li	a0,41
    8001d4be:	45b0c0ef          	jal	8002a118 <putchar>
    8001d4c2:	4529                	li	a0,10
    8001d4c4:	4550c0ef          	jal	8002a118 <putchar>
    8001d4c8:	0003b497          	auipc	s1,0x3b
    8001d4cc:	b494c483          	lbu	s1,-1207(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d4d0:	00011597          	auipc	a1,0x11
    8001d4d4:	ce858593          	addi	a1,a1,-792 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d4d8:	cc91                	beqz	s1,8001d4f4 <instruction_access_fault_9+0x14a>
    8001d4da:	6418                	ld	a4,8(s0)
    8001d4dc:	4785                	li	a5,1
    TEST_END();
    8001d4de:	00011597          	auipc	a1,0x11
    8001d4e2:	cca58593          	addi	a1,a1,-822 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d4e6:	00f70763          	beq	a4,a5,8001d4f4 <instruction_access_fault_9+0x14a>
    8001d4ea:	4481                	li	s1,0
    TEST_END();
    8001d4ec:	00011597          	auipc	a1,0x11
    8001d4f0:	ccc58593          	addi	a1,a1,-820 # 8002e1b8 <__func__.0+0x2d0>
    8001d4f4:	00011517          	auipc	a0,0x11
    8001d4f8:	d6c50513          	addi	a0,a0,-660 # 8002e260 <__func__.0+0x378>
    8001d4fc:	72f0d0ef          	jal	8002b42a <printf>
    8001d500:	4511                	li	a0,4
    8001d502:	a07e30ef          	jal	80000f08 <goto_priv>
    8001d506:	b1ee40ef          	jal	80001824 <reset_state>
}
    8001d50a:	60e2                	ld	ra,24(sp)
    8001d50c:	6442                	ld	s0,16(sp)
    8001d50e:	8526                	mv	a0,s1
    8001d510:	64a2                	ld	s1,8(sp)
    8001d512:	6105                	addi	sp,sp,32
    8001d514:	8082                	ret

000000008001d516 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001d516:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d518:	00010597          	auipc	a1,0x10
    8001d51c:	00858593          	addi	a1,a1,8 # 8002d520 <__func__.0>
    8001d520:	00011517          	auipc	a0,0x11
    8001d524:	ca850513          	addi	a0,a0,-856 # 8002e1c8 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001d528:	ec06                	sd	ra,24(sp)
    8001d52a:	e822                	sd	s0,16(sp)
    8001d52c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d52e:	6fd0d0ef          	jal	8002b42a <printf>
    8001d532:	4529                	li	a0,10
    8001d534:	3e50c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8001d538:	4511                	li	a0,4
    8001d53a:	9cfe30ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d53e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d542:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d546:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d54a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d54e:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001d552:	47a5                	li	a5,9
    8001d554:	07f2                	slli	a5,a5,0x1c
    8001d556:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d55a:	08000793          	li	a5,128
    8001d55e:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001d562:	3a0025f3          	csrr	a1,pmpcfg0
    8001d566:	00017517          	auipc	a0,0x17
    8001d56a:	27250513          	addi	a0,a0,626 # 800347d8 <__func__.0+0x68f0>
    8001d56e:	6bd0d0ef          	jal	8002b42a <printf>
    8001d572:	3a2025f3          	csrr	a1,pmpcfg2
    8001d576:	00018517          	auipc	a0,0x18
    8001d57a:	c5a50513          	addi	a0,a0,-934 # 800351d0 <__func__.0+0x72e8>
    8001d57e:	6ad0d0ef          	jal	8002b42a <printf>
    goto_priv(PRIV_HS);
    8001d582:	450d                	li	a0,3
    8001d584:	985e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d588:	885e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001d58c:	09f00793          	li	a5,159
    8001d590:	07ea                	slli	a5,a5,0x1a
    8001d592:	0003b417          	auipc	s0,0x3b
    8001d596:	a7e40413          	addi	s0,s0,-1410 # 80058010 <excpt>
    8001d59a:	00000297          	auipc	t0,0x0
    8001d59e:	00c28293          	addi	t0,t0,12 # 8001d5a6 <instruction_access_fault_10+0x90>
    8001d5a2:	02543c23          	sd	t0,56(s0)
    8001d5a6:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d5a8:	08200593          	li	a1,130
    8001d5ac:	00018617          	auipc	a2,0x18
    8001d5b0:	c3460613          	addi	a2,a2,-972 # 800351e0 <__func__.0+0x72f8>
    8001d5b4:	00011517          	auipc	a0,0x11
    8001d5b8:	c2c50513          	addi	a0,a0,-980 # 8002e1e0 <__func__.0+0x2f8>
    8001d5bc:	66f0d0ef          	jal	8002b42a <printf>
    8001d5c0:	0003b797          	auipc	a5,0x3b
    8001d5c4:	a517c783          	lbu	a5,-1455(a5) # 80058011 <excpt+0x1>
    8001d5c8:	00011597          	auipc	a1,0x11
    8001d5cc:	bf058593          	addi	a1,a1,-1040 # 8002e1b8 <__func__.0+0x2d0>
    8001d5d0:	cf89                	beqz	a5,8001d5ea <instruction_access_fault_10+0xd4>
    8001d5d2:	6418                	ld	a4,8(s0)
    8001d5d4:	4785                	li	a5,1
    8001d5d6:	00011597          	auipc	a1,0x11
    8001d5da:	bd258593          	addi	a1,a1,-1070 # 8002e1a8 <__func__.0+0x2c0>
    8001d5de:	00f70663          	beq	a4,a5,8001d5ea <instruction_access_fault_10+0xd4>
    8001d5e2:	00011597          	auipc	a1,0x11
    8001d5e6:	bd658593          	addi	a1,a1,-1066 # 8002e1b8 <__func__.0+0x2d0>
    8001d5ea:	00011517          	auipc	a0,0x11
    8001d5ee:	c0e50513          	addi	a0,a0,-1010 # 8002e1f8 <__func__.0+0x310>
    8001d5f2:	6390d0ef          	jal	8002b42a <printf>
    8001d5f6:	0003b797          	auipc	a5,0x3b
    8001d5fa:	a1b7c783          	lbu	a5,-1509(a5) # 80058011 <excpt+0x1>
    8001d5fe:	c789                	beqz	a5,8001d608 <instruction_access_fault_10+0xf2>
    8001d600:	6418                	ld	a4,8(s0)
    8001d602:	4785                	li	a5,1
    8001d604:	00f70c63          	beq	a4,a5,8001d61c <instruction_access_fault_10+0x106>
    8001d608:	00011517          	auipc	a0,0x11
    8001d60c:	bf850513          	addi	a0,a0,-1032 # 8002e200 <__func__.0+0x318>
    8001d610:	61b0d0ef          	jal	8002b42a <printf>
    8001d614:	02900513          	li	a0,41
    8001d618:	3010c0ef          	jal	8002a118 <putchar>
    8001d61c:	4529                	li	a0,10
    8001d61e:	2fb0c0ef          	jal	8002a118 <putchar>
    8001d622:	0003b497          	auipc	s1,0x3b
    8001d626:	9ef4c483          	lbu	s1,-1553(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d62a:	00011597          	auipc	a1,0x11
    8001d62e:	b8e58593          	addi	a1,a1,-1138 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d632:	cc91                	beqz	s1,8001d64e <instruction_access_fault_10+0x138>
    8001d634:	6418                	ld	a4,8(s0)
    8001d636:	4785                	li	a5,1
    TEST_END();
    8001d638:	00011597          	auipc	a1,0x11
    8001d63c:	b7058593          	addi	a1,a1,-1168 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d640:	00f70763          	beq	a4,a5,8001d64e <instruction_access_fault_10+0x138>
    8001d644:	4481                	li	s1,0
    TEST_END();
    8001d646:	00011597          	auipc	a1,0x11
    8001d64a:	b7258593          	addi	a1,a1,-1166 # 8002e1b8 <__func__.0+0x2d0>
    8001d64e:	00011517          	auipc	a0,0x11
    8001d652:	c1250513          	addi	a0,a0,-1006 # 8002e260 <__func__.0+0x378>
    8001d656:	5d50d0ef          	jal	8002b42a <printf>
    8001d65a:	4511                	li	a0,4
    8001d65c:	8ade30ef          	jal	80000f08 <goto_priv>
    8001d660:	9c4e40ef          	jal	80001824 <reset_state>
    8001d664:	60e2                	ld	ra,24(sp)
    8001d666:	6442                	ld	s0,16(sp)
    8001d668:	8526                	mv	a0,s1
    8001d66a:	64a2                	ld	s1,8(sp)
    8001d66c:	6105                	addi	sp,sp,32
    8001d66e:	8082                	ret

000000008001d670 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001d670:	1101                	addi	sp,sp,-32

TEST_START();
    8001d672:	00010597          	auipc	a1,0x10
    8001d676:	ece58593          	addi	a1,a1,-306 # 8002d540 <__func__.9>
    8001d67a:	00011517          	auipc	a0,0x11
    8001d67e:	b4e50513          	addi	a0,a0,-1202 # 8002e1c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001d682:	ec06                	sd	ra,24(sp)
    8001d684:	e822                	sd	s0,16(sp)
    8001d686:	e426                	sd	s1,8(sp)
TEST_START();
    8001d688:	5a30d0ef          	jal	8002b42a <printf>
    8001d68c:	4529                	li	a0,10
    8001d68e:	28b0c0ef          	jal	8002a118 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001d692:	450d                	li	a0,3
    8001d694:	875e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d698:	f49e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d69c:	b28e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d6a0:	8dce30ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d6a4:	4511                	li	a0,4
    8001d6a6:	863e30ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001d6aa:	000407b7          	lui	a5,0x40
    8001d6ae:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d6b2:	f5ae30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d6b6:	450d                	li	a0,3
    8001d6b8:	851e30ef          	jal	80000f08 <goto_priv>
    asm volatile(
    8001d6bc:	000807b7          	lui	a5,0x80
    8001d6c0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d6c2:	07b6                	slli	a5,a5,0xd
    8001d6c4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d6c8:	08200593          	li	a1,130
    8001d6cc:	00018617          	auipc	a2,0x18
    8001d6d0:	b7460613          	addi	a2,a2,-1164 # 80035240 <__func__.0+0x7358>
    8001d6d4:	00011517          	auipc	a0,0x11
    8001d6d8:	b0c50513          	addi	a0,a0,-1268 # 8002e1e0 <__func__.0+0x2f8>
    8001d6dc:	54f0d0ef          	jal	8002b42a <printf>
    8001d6e0:	0003b797          	auipc	a5,0x3b
    8001d6e4:	9317c783          	lbu	a5,-1743(a5) # 80058011 <excpt+0x1>
    8001d6e8:	0003b497          	auipc	s1,0x3b
    8001d6ec:	92848493          	addi	s1,s1,-1752 # 80058010 <excpt>
    8001d6f0:	00011597          	auipc	a1,0x11
    8001d6f4:	ac858593          	addi	a1,a1,-1336 # 8002e1b8 <__func__.0+0x2d0>
    8001d6f8:	cf89                	beqz	a5,8001d712 <mstatus_csr_tests_1+0xa2>
    8001d6fa:	6498                	ld	a4,8(s1)
    8001d6fc:	47b5                	li	a5,13
    8001d6fe:	00011597          	auipc	a1,0x11
    8001d702:	aaa58593          	addi	a1,a1,-1366 # 8002e1a8 <__func__.0+0x2c0>
    8001d706:	00f70663          	beq	a4,a5,8001d712 <mstatus_csr_tests_1+0xa2>
    8001d70a:	00011597          	auipc	a1,0x11
    8001d70e:	aae58593          	addi	a1,a1,-1362 # 8002e1b8 <__func__.0+0x2d0>
    8001d712:	00011517          	auipc	a0,0x11
    8001d716:	ae650513          	addi	a0,a0,-1306 # 8002e1f8 <__func__.0+0x310>
    8001d71a:	5110d0ef          	jal	8002b42a <printf>
    8001d71e:	0003b797          	auipc	a5,0x3b
    8001d722:	8f37c783          	lbu	a5,-1805(a5) # 80058011 <excpt+0x1>
    8001d726:	c789                	beqz	a5,8001d730 <mstatus_csr_tests_1+0xc0>
    8001d728:	6498                	ld	a4,8(s1)
    8001d72a:	47b5                	li	a5,13
    8001d72c:	00f70c63          	beq	a4,a5,8001d744 <mstatus_csr_tests_1+0xd4>
    8001d730:	00011517          	auipc	a0,0x11
    8001d734:	ad050513          	addi	a0,a0,-1328 # 8002e200 <__func__.0+0x318>
    8001d738:	4f30d0ef          	jal	8002b42a <printf>
    8001d73c:	02900513          	li	a0,41
    8001d740:	1d90c0ef          	jal	8002a118 <putchar>
    8001d744:	4529                	li	a0,10
    8001d746:	1d30c0ef          	jal	8002a118 <putchar>
    8001d74a:	0003b417          	auipc	s0,0x3b
    8001d74e:	8c744403          	lbu	s0,-1849(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001d752:	00011597          	auipc	a1,0x11
    8001d756:	a6658593          	addi	a1,a1,-1434 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d75a:	cc11                	beqz	s0,8001d776 <mstatus_csr_tests_1+0x106>
    8001d75c:	6498                	ld	a4,8(s1)
    8001d75e:	47b5                	li	a5,13
    TEST_END();
    8001d760:	00011597          	auipc	a1,0x11
    8001d764:	a4858593          	addi	a1,a1,-1464 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d768:	00f70763          	beq	a4,a5,8001d776 <mstatus_csr_tests_1+0x106>
    8001d76c:	4401                	li	s0,0
    TEST_END();
    8001d76e:	00011597          	auipc	a1,0x11
    8001d772:	a4a58593          	addi	a1,a1,-1462 # 8002e1b8 <__func__.0+0x2d0>
    8001d776:	00011517          	auipc	a0,0x11
    8001d77a:	aea50513          	addi	a0,a0,-1302 # 8002e260 <__func__.0+0x378>
    8001d77e:	4ad0d0ef          	jal	8002b42a <printf>
    8001d782:	4511                	li	a0,4
    8001d784:	f84e30ef          	jal	80000f08 <goto_priv>
    8001d788:	89ce40ef          	jal	80001824 <reset_state>
}
    8001d78c:	60e2                	ld	ra,24(sp)
    8001d78e:	8522                	mv	a0,s0
    8001d790:	6442                	ld	s0,16(sp)
    8001d792:	64a2                	ld	s1,8(sp)
    8001d794:	6105                	addi	sp,sp,32
    8001d796:	8082                	ret

000000008001d798 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001d798:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d79a:	00010597          	auipc	a1,0x10
    8001d79e:	dbe58593          	addi	a1,a1,-578 # 8002d558 <__func__.7>
    8001d7a2:	00011517          	auipc	a0,0x11
    8001d7a6:	a2650513          	addi	a0,a0,-1498 # 8002e1c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001d7aa:	e406                	sd	ra,8(sp)
    8001d7ac:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d7ae:	47d0d0ef          	jal	8002b42a <printf>
    8001d7b2:	4529                	li	a0,10
    8001d7b4:	1650c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001d7b8:	450d                	li	a0,3
    8001d7ba:	f4ee30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d7be:	e23e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d7c2:	a02e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d7c6:	fb7e20ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d7ca:	4511                	li	a0,4
    8001d7cc:	f3ce30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001d7d0:	000407b7          	lui	a5,0x40
    8001d7d4:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d7d8:	e34e30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d7dc:	450d                	li	a0,3
    8001d7de:	f2ae30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d7e2:	4509                	li	a0,2
    8001d7e4:	e44e30ef          	jal	80000e28 <set_prev_priv>
    8001d7e8:	000807b7          	lui	a5,0x80
    8001d7ec:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d7ee:	07b6                	slli	a5,a5,0xd
    8001d7f0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001d7f4:	0003b597          	auipc	a1,0x3b
    8001d7f8:	81d5c583          	lbu	a1,-2019(a1) # 80058011 <excpt+0x1>
    8001d7fc:	00011517          	auipc	a0,0x11
    8001d800:	54450513          	addi	a0,a0,1348 # 8002ed40 <__func__.0+0xe58>
    8001d804:	4270d0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001d808:	0003b597          	auipc	a1,0x3b
    8001d80c:	8105b583          	ld	a1,-2032(a1) # 80058018 <excpt+0x8>
    8001d810:	00011517          	auipc	a0,0x11
    8001d814:	53050513          	addi	a0,a0,1328 # 8002ed40 <__func__.0+0xe58>
    8001d818:	4130d0ef          	jal	8002b42a <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d81c:	08200593          	li	a1,130
    8001d820:	00018617          	auipc	a2,0x18
    8001d824:	a5860613          	addi	a2,a2,-1448 # 80035278 <__func__.0+0x7390>
    8001d828:	00011517          	auipc	a0,0x11
    8001d82c:	9b850513          	addi	a0,a0,-1608 # 8002e1e0 <__func__.0+0x2f8>
    8001d830:	3fb0d0ef          	jal	8002b42a <printf>
    8001d834:	0003a797          	auipc	a5,0x3a
    8001d838:	7dd7c783          	lbu	a5,2013(a5) # 80058011 <excpt+0x1>
    8001d83c:	00011597          	auipc	a1,0x11
    8001d840:	96c58593          	addi	a1,a1,-1684 # 8002e1a8 <__func__.0+0x2c0>
    8001d844:	c789                	beqz	a5,8001d84e <mstatus_csr_tests_2+0xb6>
    8001d846:	00011597          	auipc	a1,0x11
    8001d84a:	97258593          	addi	a1,a1,-1678 # 8002e1b8 <__func__.0+0x2d0>
    8001d84e:	00011517          	auipc	a0,0x11
    8001d852:	9aa50513          	addi	a0,a0,-1622 # 8002e1f8 <__func__.0+0x310>
    8001d856:	3d50d0ef          	jal	8002b42a <printf>
    8001d85a:	0003a797          	auipc	a5,0x3a
    8001d85e:	7b77c783          	lbu	a5,1975(a5) # 80058011 <excpt+0x1>
    8001d862:	e7a1                	bnez	a5,8001d8aa <mstatus_csr_tests_2+0x112>
    8001d864:	4529                	li	a0,10
    8001d866:	0b30c0ef          	jal	8002a118 <putchar>
    8001d86a:	0003a797          	auipc	a5,0x3a
    8001d86e:	7a77c783          	lbu	a5,1959(a5) # 80058011 <excpt+0x1>
    8001d872:	e795                	bnez	a5,8001d89e <mstatus_csr_tests_2+0x106>
    8001d874:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d876:	00011597          	auipc	a1,0x11
    8001d87a:	93258593          	addi	a1,a1,-1742 # 8002e1a8 <__func__.0+0x2c0>
    8001d87e:	00011517          	auipc	a0,0x11
    8001d882:	9e250513          	addi	a0,a0,-1566 # 8002e260 <__func__.0+0x378>
    8001d886:	3a50d0ef          	jal	8002b42a <printf>
    8001d88a:	4511                	li	a0,4
    8001d88c:	e7ce30ef          	jal	80000f08 <goto_priv>
    8001d890:	f95e30ef          	jal	80001824 <reset_state>
}
    8001d894:	60a2                	ld	ra,8(sp)
    8001d896:	8522                	mv	a0,s0
    8001d898:	6402                	ld	s0,0(sp)
    8001d89a:	0141                	addi	sp,sp,16
    8001d89c:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d89e:	4401                	li	s0,0
    TEST_END();
    8001d8a0:	00011597          	auipc	a1,0x11
    8001d8a4:	91858593          	addi	a1,a1,-1768 # 8002e1b8 <__func__.0+0x2d0>
    8001d8a8:	bfd9                	j	8001d87e <mstatus_csr_tests_2+0xe6>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d8aa:	00011517          	auipc	a0,0x11
    8001d8ae:	95650513          	addi	a0,a0,-1706 # 8002e200 <__func__.0+0x318>
    8001d8b2:	3790d0ef          	jal	8002b42a <printf>
    8001d8b6:	02900513          	li	a0,41
    8001d8ba:	05f0c0ef          	jal	8002a118 <putchar>
    8001d8be:	b75d                	j	8001d864 <mstatus_csr_tests_2+0xcc>

000000008001d8c0 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001d8c0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d8c2:	00010597          	auipc	a1,0x10
    8001d8c6:	cae58593          	addi	a1,a1,-850 # 8002d570 <__func__.6>
    8001d8ca:	00011517          	auipc	a0,0x11
    8001d8ce:	8fe50513          	addi	a0,a0,-1794 # 8002e1c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001d8d2:	ec06                	sd	ra,24(sp)
    8001d8d4:	e822                	sd	s0,16(sp)
    8001d8d6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d8d8:	3530d0ef          	jal	8002b42a <printf>
    8001d8dc:	4529                	li	a0,10
    8001d8de:	03b0c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001d8e2:	450d                	li	a0,3
    8001d8e4:	e24e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d8e8:	cf9e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d8ec:	8d8e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d8f0:	e8de20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001d8f4:	4511                	li	a0,4
    8001d8f6:	e12e30ef          	jal	80000f08 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001d8fa:	000807b7          	lui	a5,0x80
    8001d8fe:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001d902:	450d                	li	a0,3
    8001d904:	e04e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d908:	4509                	li	a0,2
    8001d90a:	d1ee30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d90e:	cfee30ef          	jal	80000e0c <test_setup_except_function>
    8001d912:	001007b7          	lui	a5,0x100
    8001d916:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001d91a:	07b2                	slli	a5,a5,0xc
    8001d91c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001d920:	0003a597          	auipc	a1,0x3a
    8001d924:	6f15c583          	lbu	a1,1777(a1) # 80058011 <excpt+0x1>
    8001d928:	00011517          	auipc	a0,0x11
    8001d92c:	41850513          	addi	a0,a0,1048 # 8002ed40 <__func__.0+0xe58>
    8001d930:	0003a417          	auipc	s0,0x3a
    8001d934:	6e040413          	addi	s0,s0,1760 # 80058010 <excpt>
    8001d938:	2f30d0ef          	jal	8002b42a <printf>
    printf("%d\n",excpt.cause);
    8001d93c:	640c                	ld	a1,8(s0)
    8001d93e:	00011517          	auipc	a0,0x11
    8001d942:	40250513          	addi	a0,a0,1026 # 8002ed40 <__func__.0+0xe58>
    8001d946:	2e50d0ef          	jal	8002b42a <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d94a:	08200593          	li	a1,130
    8001d94e:	00018617          	auipc	a2,0x18
    8001d952:	96260613          	addi	a2,a2,-1694 # 800352b0 <__func__.0+0x73c8>
    8001d956:	00011517          	auipc	a0,0x11
    8001d95a:	88a50513          	addi	a0,a0,-1910 # 8002e1e0 <__func__.0+0x2f8>
    8001d95e:	2cd0d0ef          	jal	8002b42a <printf>
    8001d962:	0003a797          	auipc	a5,0x3a
    8001d966:	6af7c783          	lbu	a5,1711(a5) # 80058011 <excpt+0x1>
    8001d96a:	00011597          	auipc	a1,0x11
    8001d96e:	84e58593          	addi	a1,a1,-1970 # 8002e1b8 <__func__.0+0x2d0>
    8001d972:	cf89                	beqz	a5,8001d98c <mstatus_csr_tests_3+0xcc>
    8001d974:	6418                	ld	a4,8(s0)
    8001d976:	47b5                	li	a5,13
    8001d978:	00011597          	auipc	a1,0x11
    8001d97c:	83058593          	addi	a1,a1,-2000 # 8002e1a8 <__func__.0+0x2c0>
    8001d980:	00f70663          	beq	a4,a5,8001d98c <mstatus_csr_tests_3+0xcc>
    8001d984:	00011597          	auipc	a1,0x11
    8001d988:	83458593          	addi	a1,a1,-1996 # 8002e1b8 <__func__.0+0x2d0>
    8001d98c:	00011517          	auipc	a0,0x11
    8001d990:	86c50513          	addi	a0,a0,-1940 # 8002e1f8 <__func__.0+0x310>
    8001d994:	2970d0ef          	jal	8002b42a <printf>
    8001d998:	0003a797          	auipc	a5,0x3a
    8001d99c:	6797c783          	lbu	a5,1657(a5) # 80058011 <excpt+0x1>
    8001d9a0:	c789                	beqz	a5,8001d9aa <mstatus_csr_tests_3+0xea>
    8001d9a2:	6418                	ld	a4,8(s0)
    8001d9a4:	47b5                	li	a5,13
    8001d9a6:	00f70c63          	beq	a4,a5,8001d9be <mstatus_csr_tests_3+0xfe>
    8001d9aa:	00011517          	auipc	a0,0x11
    8001d9ae:	85650513          	addi	a0,a0,-1962 # 8002e200 <__func__.0+0x318>
    8001d9b2:	2790d0ef          	jal	8002b42a <printf>
    8001d9b6:	02900513          	li	a0,41
    8001d9ba:	75e0c0ef          	jal	8002a118 <putchar>
    8001d9be:	4529                	li	a0,10
    8001d9c0:	7580c0ef          	jal	8002a118 <putchar>
    8001d9c4:	0003a497          	auipc	s1,0x3a
    8001d9c8:	64d4c483          	lbu	s1,1613(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001d9cc:	00010597          	auipc	a1,0x10
    8001d9d0:	7ec58593          	addi	a1,a1,2028 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9d4:	cc91                	beqz	s1,8001d9f0 <mstatus_csr_tests_3+0x130>
    8001d9d6:	6418                	ld	a4,8(s0)
    8001d9d8:	47b5                	li	a5,13
    TEST_END();
    8001d9da:	00010597          	auipc	a1,0x10
    8001d9de:	7ce58593          	addi	a1,a1,1998 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9e2:	00f70763          	beq	a4,a5,8001d9f0 <mstatus_csr_tests_3+0x130>
    8001d9e6:	4481                	li	s1,0
    TEST_END();
    8001d9e8:	00010597          	auipc	a1,0x10
    8001d9ec:	7d058593          	addi	a1,a1,2000 # 8002e1b8 <__func__.0+0x2d0>
    8001d9f0:	00011517          	auipc	a0,0x11
    8001d9f4:	87050513          	addi	a0,a0,-1936 # 8002e260 <__func__.0+0x378>
    8001d9f8:	2330d0ef          	jal	8002b42a <printf>
    8001d9fc:	4511                	li	a0,4
    8001d9fe:	d0ae30ef          	jal	80000f08 <goto_priv>
    8001da02:	e23e30ef          	jal	80001824 <reset_state>
}
    8001da06:	60e2                	ld	ra,24(sp)
    8001da08:	6442                	ld	s0,16(sp)
    8001da0a:	8526                	mv	a0,s1
    8001da0c:	64a2                	ld	s1,8(sp)
    8001da0e:	6105                	addi	sp,sp,32
    8001da10:	8082                	ret

000000008001da12 <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001da12:	1101                	addi	sp,sp,-32

    TEST_START();
    8001da14:	00010597          	auipc	a1,0x10
    8001da18:	b7458593          	addi	a1,a1,-1164 # 8002d588 <__func__.5>
    8001da1c:	00010517          	auipc	a0,0x10
    8001da20:	7ac50513          	addi	a0,a0,1964 # 8002e1c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001da24:	ec06                	sd	ra,24(sp)
    8001da26:	e822                	sd	s0,16(sp)
    8001da28:	e426                	sd	s1,8(sp)
    TEST_START();
    8001da2a:	2010d0ef          	jal	8002b42a <printf>
    8001da2e:	4529                	li	a0,10
    8001da30:	6e80c0ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_HS);
    8001da34:	450d                	li	a0,3
    8001da36:	cd2e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001da3a:	ba7e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001da3e:	f87e20ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001da42:	d3be20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001da46:	4511                	li	a0,4
    8001da48:	cc0e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001da4c:	000807b7          	lui	a5,0x80
    8001da50:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001da54:	450d                	li	a0,3
    8001da56:	cb2e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001da5a:	4509                	li	a0,2
    8001da5c:	bcce30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001da60:	bace30ef          	jal	80000e0c <test_setup_except_function>
    8001da64:	001007b7          	lui	a5,0x100
    8001da68:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001da6a:	07b2                	slli	a5,a5,0xc
    8001da6c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001da70:	08200593          	li	a1,130
    8001da74:	00018617          	auipc	a2,0x18
    8001da78:	87460613          	addi	a2,a2,-1932 # 800352e8 <__func__.0+0x7400>
    8001da7c:	00010517          	auipc	a0,0x10
    8001da80:	76450513          	addi	a0,a0,1892 # 8002e1e0 <__func__.0+0x2f8>
    8001da84:	1a70d0ef          	jal	8002b42a <printf>
    8001da88:	0003a797          	auipc	a5,0x3a
    8001da8c:	5897c783          	lbu	a5,1417(a5) # 80058011 <excpt+0x1>
    8001da90:	0003a497          	auipc	s1,0x3a
    8001da94:	58048493          	addi	s1,s1,1408 # 80058010 <excpt>
    8001da98:	00010597          	auipc	a1,0x10
    8001da9c:	72058593          	addi	a1,a1,1824 # 8002e1b8 <__func__.0+0x2d0>
    8001daa0:	cf89                	beqz	a5,8001daba <mstatus_csr_tests_4+0xa8>
    8001daa2:	6498                	ld	a4,8(s1)
    8001daa4:	47b5                	li	a5,13
    8001daa6:	00010597          	auipc	a1,0x10
    8001daaa:	70258593          	addi	a1,a1,1794 # 8002e1a8 <__func__.0+0x2c0>
    8001daae:	00f70663          	beq	a4,a5,8001daba <mstatus_csr_tests_4+0xa8>
    8001dab2:	00010597          	auipc	a1,0x10
    8001dab6:	70658593          	addi	a1,a1,1798 # 8002e1b8 <__func__.0+0x2d0>
    8001daba:	00010517          	auipc	a0,0x10
    8001dabe:	73e50513          	addi	a0,a0,1854 # 8002e1f8 <__func__.0+0x310>
    8001dac2:	1690d0ef          	jal	8002b42a <printf>
    8001dac6:	0003a797          	auipc	a5,0x3a
    8001daca:	54b7c783          	lbu	a5,1355(a5) # 80058011 <excpt+0x1>
    8001dace:	c789                	beqz	a5,8001dad8 <mstatus_csr_tests_4+0xc6>
    8001dad0:	6498                	ld	a4,8(s1)
    8001dad2:	47b5                	li	a5,13
    8001dad4:	00f70c63          	beq	a4,a5,8001daec <mstatus_csr_tests_4+0xda>
    8001dad8:	00010517          	auipc	a0,0x10
    8001dadc:	72850513          	addi	a0,a0,1832 # 8002e200 <__func__.0+0x318>
    8001dae0:	14b0d0ef          	jal	8002b42a <printf>
    8001dae4:	02900513          	li	a0,41
    8001dae8:	6300c0ef          	jal	8002a118 <putchar>
    8001daec:	4529                	li	a0,10
    8001daee:	62a0c0ef          	jal	8002a118 <putchar>
    8001daf2:	0003a417          	auipc	s0,0x3a
    8001daf6:	51f44403          	lbu	s0,1311(s0) # 80058011 <excpt+0x1>
    8001dafa:	c409                	beqz	s0,8001db04 <mstatus_csr_tests_4+0xf2>
    8001dafc:	6498                	ld	a4,8(s1)
    8001dafe:	47b5                	li	a5,13
    8001db00:	02f70c63          	beq	a4,a5,8001db38 <mstatus_csr_tests_4+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001db04:	000807b7          	lui	a5,0x80
    8001db08:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001db0c:	4401                	li	s0,0


TEST_END();
    8001db0e:	00010597          	auipc	a1,0x10
    8001db12:	6aa58593          	addi	a1,a1,1706 # 8002e1b8 <__func__.0+0x2d0>
    8001db16:	00010517          	auipc	a0,0x10
    8001db1a:	74a50513          	addi	a0,a0,1866 # 8002e260 <__func__.0+0x378>
    8001db1e:	10d0d0ef          	jal	8002b42a <printf>
    8001db22:	4511                	li	a0,4
    8001db24:	be4e30ef          	jal	80000f08 <goto_priv>
    8001db28:	cfde30ef          	jal	80001824 <reset_state>

}
    8001db2c:	60e2                	ld	ra,24(sp)
    8001db2e:	8522                	mv	a0,s0
    8001db30:	6442                	ld	s0,16(sp)
    8001db32:	64a2                	ld	s1,8(sp)
    8001db34:	6105                	addi	sp,sp,32
    8001db36:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001db38:	000807b7          	lui	a5,0x80
    8001db3c:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001db40:	00010597          	auipc	a1,0x10
    8001db44:	66858593          	addi	a1,a1,1640 # 8002e1a8 <__func__.0+0x2c0>
    8001db48:	b7f9                	j	8001db16 <mstatus_csr_tests_4+0x104>

000000008001db4a <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001db4a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001db4c:	00010597          	auipc	a1,0x10
    8001db50:	a5458593          	addi	a1,a1,-1452 # 8002d5a0 <__func__.4>
    8001db54:	00010517          	auipc	a0,0x10
    8001db58:	67450513          	addi	a0,a0,1652 # 8002e1c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001db5c:	ec06                	sd	ra,24(sp)
    8001db5e:	e822                	sd	s0,16(sp)
    8001db60:	e426                	sd	s1,8(sp)
    TEST_START();
    8001db62:	0c90d0ef          	jal	8002b42a <printf>
    8001db66:	4529                	li	a0,10
    8001db68:	5b00c0ef          	jal	8002a118 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001db6c:	aa0e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001db70:	4511                	li	a0,4
    8001db72:	b96e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001db76:	004007b7          	lui	a5,0x400
    8001db7a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001db7e:	450d                	li	a0,3
    8001db80:	b88e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001db84:	4501                	li	a0,0
    8001db86:	aa2e30ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    8001db8a:	00000297          	auipc	t0,0x0
    8001db8e:	01028293          	addi	t0,t0,16 # 8001db9a <mstatus_csr_tests_5+0x50>
    8001db92:	14129073          	csrw	sepc,t0
    8001db96:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001db9a:	08200593          	li	a1,130
    8001db9e:	00014617          	auipc	a2,0x14
    8001dba2:	df260613          	addi	a2,a2,-526 # 80031990 <__func__.0+0x3aa8>
    8001dba6:	00010517          	auipc	a0,0x10
    8001dbaa:	63a50513          	addi	a0,a0,1594 # 8002e1e0 <__func__.0+0x2f8>
    8001dbae:	07d0d0ef          	jal	8002b42a <printf>
    8001dbb2:	0003a797          	auipc	a5,0x3a
    8001dbb6:	45f7c783          	lbu	a5,1119(a5) # 80058011 <excpt+0x1>
    8001dbba:	0003a497          	auipc	s1,0x3a
    8001dbbe:	45648493          	addi	s1,s1,1110 # 80058010 <excpt>
    8001dbc2:	00010597          	auipc	a1,0x10
    8001dbc6:	5f658593          	addi	a1,a1,1526 # 8002e1b8 <__func__.0+0x2d0>
    8001dbca:	cf89                	beqz	a5,8001dbe4 <mstatus_csr_tests_5+0x9a>
    8001dbcc:	6498                	ld	a4,8(s1)
    8001dbce:	4789                	li	a5,2
    8001dbd0:	00010597          	auipc	a1,0x10
    8001dbd4:	5d858593          	addi	a1,a1,1496 # 8002e1a8 <__func__.0+0x2c0>
    8001dbd8:	00f70663          	beq	a4,a5,8001dbe4 <mstatus_csr_tests_5+0x9a>
    8001dbdc:	00010597          	auipc	a1,0x10
    8001dbe0:	5dc58593          	addi	a1,a1,1500 # 8002e1b8 <__func__.0+0x2d0>
    8001dbe4:	00010517          	auipc	a0,0x10
    8001dbe8:	61450513          	addi	a0,a0,1556 # 8002e1f8 <__func__.0+0x310>
    8001dbec:	03f0d0ef          	jal	8002b42a <printf>
    8001dbf0:	0003a797          	auipc	a5,0x3a
    8001dbf4:	4217c783          	lbu	a5,1057(a5) # 80058011 <excpt+0x1>
    8001dbf8:	c789                	beqz	a5,8001dc02 <mstatus_csr_tests_5+0xb8>
    8001dbfa:	6498                	ld	a4,8(s1)
    8001dbfc:	4789                	li	a5,2
    8001dbfe:	00f70c63          	beq	a4,a5,8001dc16 <mstatus_csr_tests_5+0xcc>
    8001dc02:	00010517          	auipc	a0,0x10
    8001dc06:	5fe50513          	addi	a0,a0,1534 # 8002e200 <__func__.0+0x318>
    8001dc0a:	0210d0ef          	jal	8002b42a <printf>
    8001dc0e:	02900513          	li	a0,41
    8001dc12:	5060c0ef          	jal	8002a118 <putchar>
    8001dc16:	4529                	li	a0,10
    8001dc18:	5000c0ef          	jal	8002a118 <putchar>
    8001dc1c:	0003a417          	auipc	s0,0x3a
    8001dc20:	3f544403          	lbu	s0,1013(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001dc24:	00010597          	auipc	a1,0x10
    8001dc28:	59458593          	addi	a1,a1,1428 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc2c:	cc11                	beqz	s0,8001dc48 <mstatus_csr_tests_5+0xfe>
    8001dc2e:	6498                	ld	a4,8(s1)
    8001dc30:	4789                	li	a5,2
    TEST_END();
    8001dc32:	00010597          	auipc	a1,0x10
    8001dc36:	57658593          	addi	a1,a1,1398 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc3a:	00f70763          	beq	a4,a5,8001dc48 <mstatus_csr_tests_5+0xfe>
    8001dc3e:	4401                	li	s0,0
    TEST_END();
    8001dc40:	00010597          	auipc	a1,0x10
    8001dc44:	57858593          	addi	a1,a1,1400 # 8002e1b8 <__func__.0+0x2d0>
    8001dc48:	00010517          	auipc	a0,0x10
    8001dc4c:	61850513          	addi	a0,a0,1560 # 8002e260 <__func__.0+0x378>
    8001dc50:	7da0d0ef          	jal	8002b42a <printf>
    8001dc54:	4511                	li	a0,4
    8001dc56:	ab2e30ef          	jal	80000f08 <goto_priv>
    8001dc5a:	bcbe30ef          	jal	80001824 <reset_state>

}
    8001dc5e:	60e2                	ld	ra,24(sp)
    8001dc60:	8522                	mv	a0,s0
    8001dc62:	6442                	ld	s0,16(sp)
    8001dc64:	64a2                	ld	s1,8(sp)
    8001dc66:	6105                	addi	sp,sp,32
    8001dc68:	8082                	ret

000000008001dc6a <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001dc6a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dc6c:	00010597          	auipc	a1,0x10
    8001dc70:	94c58593          	addi	a1,a1,-1716 # 8002d5b8 <__func__.3>
    8001dc74:	00010517          	auipc	a0,0x10
    8001dc78:	55450513          	addi	a0,a0,1364 # 8002e1c8 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001dc7c:	e406                	sd	ra,8(sp)
    8001dc7e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dc80:	7aa0d0ef          	jal	8002b42a <printf>
    8001dc84:	4529                	li	a0,10
    8001dc86:	4920c0ef          	jal	8002a118 <putchar>
    TEST_SETUP_EXCEPT();
    8001dc8a:	982e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dc8e:	4511                	li	a0,4
    8001dc90:	a78e30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001dc94:	57fd                	li	a5,-1
    8001dc96:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001dc9a:	602025f3          	csrr	a1,hedeleg
    8001dc9e:	00017517          	auipc	a0,0x17
    8001dca2:	b4250513          	addi	a0,a0,-1214 # 800347e0 <__func__.0+0x68f8>
    8001dca6:	7840d0ef          	jal	8002b42a <printf>

    TEST_ASSERT("hedeleg right",
    8001dcaa:	00017617          	auipc	a2,0x17
    8001dcae:	68660613          	addi	a2,a2,1670 # 80035330 <__func__.0+0x7448>
    8001dcb2:	08200593          	li	a1,130
    8001dcb6:	00010517          	auipc	a0,0x10
    8001dcba:	52a50513          	addi	a0,a0,1322 # 8002e1e0 <__func__.0+0x2f8>
    8001dcbe:	76c0d0ef          	jal	8002b42a <printf>
    8001dcc2:	60202773          	csrr	a4,hedeleg
    8001dcc6:	67ad                	lui	a5,0xb
    8001dcc8:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dccc:	00010597          	auipc	a1,0x10
    8001dcd0:	4dc58593          	addi	a1,a1,1244 # 8002e1a8 <__func__.0+0x2c0>
    8001dcd4:	00f70663          	beq	a4,a5,8001dce0 <hedeleg_csr_tests_1+0x76>
    8001dcd8:	00010597          	auipc	a1,0x10
    8001dcdc:	4e058593          	addi	a1,a1,1248 # 8002e1b8 <__func__.0+0x2d0>
    8001dce0:	00010517          	auipc	a0,0x10
    8001dce4:	51850513          	addi	a0,a0,1304 # 8002e1f8 <__func__.0+0x310>
    8001dce8:	7420d0ef          	jal	8002b42a <printf>
    8001dcec:	60202773          	csrr	a4,hedeleg
    8001dcf0:	67ad                	lui	a5,0xb
    8001dcf2:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dcf6:	00f70c63          	beq	a4,a5,8001dd0e <hedeleg_csr_tests_1+0xa4>
    8001dcfa:	00010517          	auipc	a0,0x10
    8001dcfe:	50650513          	addi	a0,a0,1286 # 8002e200 <__func__.0+0x318>
    8001dd02:	7280d0ef          	jal	8002b42a <printf>
    8001dd06:	02900513          	li	a0,41
    8001dd0a:	40e0c0ef          	jal	8002a118 <putchar>
    8001dd0e:	4529                	li	a0,10
    8001dd10:	4080c0ef          	jal	8002a118 <putchar>
    8001dd14:	60202773          	csrr	a4,hedeleg
    8001dd18:	67ad                	lui	a5,0xb
    8001dd1a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd1e:	02f70763          	beq	a4,a5,8001dd4c <hedeleg_csr_tests_1+0xe2>
    8001dd22:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001dd24:	00010597          	auipc	a1,0x10
    8001dd28:	49458593          	addi	a1,a1,1172 # 8002e1b8 <__func__.0+0x2d0>
    8001dd2c:	00010517          	auipc	a0,0x10
    8001dd30:	53450513          	addi	a0,a0,1332 # 8002e260 <__func__.0+0x378>
    8001dd34:	6f60d0ef          	jal	8002b42a <printf>
    8001dd38:	4511                	li	a0,4
    8001dd3a:	9cee30ef          	jal	80000f08 <goto_priv>
    8001dd3e:	ae7e30ef          	jal	80001824 <reset_state>

}
    8001dd42:	60a2                	ld	ra,8(sp)
    8001dd44:	8522                	mv	a0,s0
    8001dd46:	6402                	ld	s0,0(sp)
    8001dd48:	0141                	addi	sp,sp,16
    8001dd4a:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001dd4c:	4405                	li	s0,1
    TEST_END();
    8001dd4e:	00010597          	auipc	a1,0x10
    8001dd52:	45a58593          	addi	a1,a1,1114 # 8002e1a8 <__func__.0+0x2c0>
    8001dd56:	bfd9                	j	8001dd2c <hedeleg_csr_tests_1+0xc2>

000000008001dd58 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001dd58:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dd5a:	00010597          	auipc	a1,0x10
    8001dd5e:	87658593          	addi	a1,a1,-1930 # 8002d5d0 <__func__.2>
    8001dd62:	00010517          	auipc	a0,0x10
    8001dd66:	46650513          	addi	a0,a0,1126 # 8002e1c8 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001dd6a:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dd6c:	6be0d0ef          	jal	8002b42a <printf>
    8001dd70:	4529                	li	a0,10
    8001dd72:	3a60c0ef          	jal	8002a118 <putchar>
    TEST_SETUP_EXCEPT();
    8001dd76:	896e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dd7a:	4511                	li	a0,4
    8001dd7c:	98ce30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001dd80:	57fd                	li	a5,-1
    8001dd82:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001dd86:	323025f3          	csrr	a1,mhpmevent3
    8001dd8a:	00017517          	auipc	a0,0x17
    8001dd8e:	a5650513          	addi	a0,a0,-1450 # 800347e0 <__func__.0+0x68f8>
    8001dd92:	6980d0ef          	jal	8002b42a <printf>

    TEST_END();
    8001dd96:	00010597          	auipc	a1,0x10
    8001dd9a:	41258593          	addi	a1,a1,1042 # 8002e1a8 <__func__.0+0x2c0>
    8001dd9e:	00010517          	auipc	a0,0x10
    8001dda2:	4c250513          	addi	a0,a0,1218 # 8002e260 <__func__.0+0x378>
    8001dda6:	6840d0ef          	jal	8002b42a <printf>
    8001ddaa:	4511                	li	a0,4
    8001ddac:	95ce30ef          	jal	80000f08 <goto_priv>
    8001ddb0:	a75e30ef          	jal	80001824 <reset_state>

}
    8001ddb4:	60a2                	ld	ra,8(sp)
    8001ddb6:	4505                	li	a0,1
    8001ddb8:	0141                	addi	sp,sp,16
    8001ddba:	8082                	ret

000000008001ddbc <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001ddbc:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ddbe:	00010597          	auipc	a1,0x10
    8001ddc2:	82a58593          	addi	a1,a1,-2006 # 8002d5e8 <__func__.1>
    8001ddc6:	00010517          	auipc	a0,0x10
    8001ddca:	40250513          	addi	a0,a0,1026 # 8002e1c8 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001ddce:	e406                	sd	ra,8(sp)
    8001ddd0:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ddd2:	6580d0ef          	jal	8002b42a <printf>
    8001ddd6:	4529                	li	a0,10
    8001ddd8:	3400c0ef          	jal	8002a118 <putchar>
    TEST_SETUP_EXCEPT();
    8001dddc:	830e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dde0:	4511                	li	a0,4
    8001dde2:	926e30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001dde6:	57fd                	li	a5,-1
    8001dde8:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001ddec:	7a0025f3          	csrr	a1,tselect
    8001ddf0:	00017517          	auipc	a0,0x17
    8001ddf4:	9f050513          	addi	a0,a0,-1552 # 800347e0 <__func__.0+0x68f8>
    8001ddf8:	6320d0ef          	jal	8002b42a <printf>

    TEST_ASSERT("tselect right",
    8001ddfc:	00017617          	auipc	a2,0x17
    8001de00:	54460613          	addi	a2,a2,1348 # 80035340 <__func__.0+0x7458>
    8001de04:	08200593          	li	a1,130
    8001de08:	00010517          	auipc	a0,0x10
    8001de0c:	3d850513          	addi	a0,a0,984 # 8002e1e0 <__func__.0+0x2f8>
    8001de10:	61a0d0ef          	jal	8002b42a <printf>
    8001de14:	60202773          	csrr	a4,hedeleg
    8001de18:	67ad                	lui	a5,0xb
    8001de1a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de1e:	00010597          	auipc	a1,0x10
    8001de22:	38a58593          	addi	a1,a1,906 # 8002e1a8 <__func__.0+0x2c0>
    8001de26:	00f70663          	beq	a4,a5,8001de32 <tselect_csr_tests_1+0x76>
    8001de2a:	00010597          	auipc	a1,0x10
    8001de2e:	38e58593          	addi	a1,a1,910 # 8002e1b8 <__func__.0+0x2d0>
    8001de32:	00010517          	auipc	a0,0x10
    8001de36:	3c650513          	addi	a0,a0,966 # 8002e1f8 <__func__.0+0x310>
    8001de3a:	5f00d0ef          	jal	8002b42a <printf>
    8001de3e:	60202773          	csrr	a4,hedeleg
    8001de42:	67ad                	lui	a5,0xb
    8001de44:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de48:	00f70c63          	beq	a4,a5,8001de60 <tselect_csr_tests_1+0xa4>
    8001de4c:	00010517          	auipc	a0,0x10
    8001de50:	3b450513          	addi	a0,a0,948 # 8002e200 <__func__.0+0x318>
    8001de54:	5d60d0ef          	jal	8002b42a <printf>
    8001de58:	02900513          	li	a0,41
    8001de5c:	2bc0c0ef          	jal	8002a118 <putchar>
    8001de60:	4529                	li	a0,10
    8001de62:	2b60c0ef          	jal	8002a118 <putchar>
    8001de66:	60202773          	csrr	a4,hedeleg
    8001de6a:	67ad                	lui	a5,0xb
    8001de6c:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de70:	02f70763          	beq	a4,a5,8001de9e <tselect_csr_tests_1+0xe2>
    8001de74:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001de76:	00010597          	auipc	a1,0x10
    8001de7a:	34258593          	addi	a1,a1,834 # 8002e1b8 <__func__.0+0x2d0>
    8001de7e:	00010517          	auipc	a0,0x10
    8001de82:	3e250513          	addi	a0,a0,994 # 8002e260 <__func__.0+0x378>
    8001de86:	5a40d0ef          	jal	8002b42a <printf>
    8001de8a:	4511                	li	a0,4
    8001de8c:	87ce30ef          	jal	80000f08 <goto_priv>
    8001de90:	995e30ef          	jal	80001824 <reset_state>

}
    8001de94:	60a2                	ld	ra,8(sp)
    8001de96:	8522                	mv	a0,s0
    8001de98:	6402                	ld	s0,0(sp)
    8001de9a:	0141                	addi	sp,sp,16
    8001de9c:	8082                	ret
    TEST_ASSERT("tselect right",
    8001de9e:	4405                	li	s0,1
    TEST_END();
    8001dea0:	00010597          	auipc	a1,0x10
    8001dea4:	30858593          	addi	a1,a1,776 # 8002e1a8 <__func__.0+0x2c0>
    8001dea8:	bfd9                	j	8001de7e <tselect_csr_tests_1+0xc2>

000000008001deaa <random_instruction_tests>:


bool random_instruction_tests(){
    8001deaa:	1141                	addi	sp,sp,-16

    TEST_START();
    8001deac:	0000f597          	auipc	a1,0xf
    8001deb0:	75458593          	addi	a1,a1,1876 # 8002d600 <__func__.0>
    8001deb4:	00010517          	auipc	a0,0x10
    8001deb8:	31450513          	addi	a0,a0,788 # 8002e1c8 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001debc:	e406                	sd	ra,8(sp)
    8001debe:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dec0:	56a0d0ef          	jal	8002b42a <printf>
    8001dec4:	4529                	li	a0,10
    8001dec6:	2520c0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001deca:	4511                	li	a0,4
    8001decc:	83ce30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MCYCLE,0x0);
    8001ded0:	b0005073          	csrwi	mcycle,0

    excpt_info();
    8001ded4:	4429                	li	s0,10
    8001ded6:	978e30ef          	jal	8000104e <excpt_info>

    for (int i = 0; i < 10; i++)
    8001deda:	347d                	addiw	s0,s0,-1
    {
        random_m_instruction();
    8001dedc:	a47e30ef          	jal	80001922 <random_m_instruction>
    for (int i = 0; i < 10; i++)
    8001dee0:	fc6d                	bnez	s0,8001deda <random_instruction_tests+0x30>
    }
    

    TEST_END();
    8001dee2:	00010597          	auipc	a1,0x10
    8001dee6:	2c658593          	addi	a1,a1,710 # 8002e1a8 <__func__.0+0x2c0>
    8001deea:	00010517          	auipc	a0,0x10
    8001deee:	37650513          	addi	a0,a0,886 # 8002e260 <__func__.0+0x378>
    8001def2:	5380d0ef          	jal	8002b42a <printf>
    8001def6:	4511                	li	a0,4
    8001def8:	810e30ef          	jal	80000f08 <goto_priv>
    8001defc:	929e30ef          	jal	80001824 <reset_state>

    8001df00:	60a2                	ld	ra,8(sp)
    8001df02:	6402                	ld	s0,0(sp)
    8001df04:	4505                	li	a0,1
    8001df06:	0141                	addi	sp,sp,16
    8001df08:	8082                	ret

000000008001df0a <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001df0a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001df0c:	0000f597          	auipc	a1,0xf
    8001df10:	71458593          	addi	a1,a1,1812 # 8002d620 <__func__.50>
    8001df14:	00010517          	auipc	a0,0x10
    8001df18:	2b450513          	addi	a0,a0,692 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_1() {
    8001df1c:	ec06                	sd	ra,24(sp)
    8001df1e:	e822                	sd	s0,16(sp)
    8001df20:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001df22:	5080d0ef          	jal	8002b42a <printf>
    8001df26:	4529                	li	a0,10
    8001df28:	1f00c0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001df2c:	4511                	li	a0,4
    8001df2e:	fdbe20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001df32:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001df36:	4509                	li	a0,2
    8001df38:	fd1e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001df3c:	ed1e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001df40:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001df44:	08200593          	li	a1,130
    8001df48:	00017617          	auipc	a2,0x17
    8001df4c:	40860613          	addi	a2,a2,1032 # 80035350 <__func__.0+0x7468>
    8001df50:	00010517          	auipc	a0,0x10
    8001df54:	29050513          	addi	a0,a0,656 # 8002e1e0 <__func__.0+0x2f8>
    8001df58:	4d20d0ef          	jal	8002b42a <printf>
    8001df5c:	0003a797          	auipc	a5,0x3a
    8001df60:	0b57c783          	lbu	a5,181(a5) # 80058011 <excpt+0x1>
    8001df64:	0003a497          	auipc	s1,0x3a
    8001df68:	0ac48493          	addi	s1,s1,172 # 80058010 <excpt>
    8001df6c:	00010597          	auipc	a1,0x10
    8001df70:	24c58593          	addi	a1,a1,588 # 8002e1b8 <__func__.0+0x2d0>
    8001df74:	cf89                	beqz	a5,8001df8e <time_test_1+0x84>
    8001df76:	6498                	ld	a4,8(s1)
    8001df78:	4789                	li	a5,2
    8001df7a:	00010597          	auipc	a1,0x10
    8001df7e:	22e58593          	addi	a1,a1,558 # 8002e1a8 <__func__.0+0x2c0>
    8001df82:	00f70663          	beq	a4,a5,8001df8e <time_test_1+0x84>
    8001df86:	00010597          	auipc	a1,0x10
    8001df8a:	23258593          	addi	a1,a1,562 # 8002e1b8 <__func__.0+0x2d0>
    8001df8e:	00010517          	auipc	a0,0x10
    8001df92:	26a50513          	addi	a0,a0,618 # 8002e1f8 <__func__.0+0x310>
    8001df96:	4940d0ef          	jal	8002b42a <printf>
    8001df9a:	0003a797          	auipc	a5,0x3a
    8001df9e:	0777c783          	lbu	a5,119(a5) # 80058011 <excpt+0x1>
    8001dfa2:	c789                	beqz	a5,8001dfac <time_test_1+0xa2>
    8001dfa4:	6498                	ld	a4,8(s1)
    8001dfa6:	4789                	li	a5,2
    8001dfa8:	00f70c63          	beq	a4,a5,8001dfc0 <time_test_1+0xb6>
    8001dfac:	00010517          	auipc	a0,0x10
    8001dfb0:	25450513          	addi	a0,a0,596 # 8002e200 <__func__.0+0x318>
    8001dfb4:	4760d0ef          	jal	8002b42a <printf>
    8001dfb8:	02900513          	li	a0,41
    8001dfbc:	15c0c0ef          	jal	8002a118 <putchar>
    8001dfc0:	4529                	li	a0,10
    8001dfc2:	1560c0ef          	jal	8002a118 <putchar>
    8001dfc6:	0003a797          	auipc	a5,0x3a
    8001dfca:	04b7c783          	lbu	a5,75(a5) # 80058011 <excpt+0x1>
    8001dfce:	4401                	li	s0,0
    8001dfd0:	c789                	beqz	a5,8001dfda <time_test_1+0xd0>
    8001dfd2:	6480                	ld	s0,8(s1)
    8001dfd4:	1479                	addi	s0,s0,-2
    8001dfd6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001dfda:	450d                	li	a0,3
    8001dfdc:	f2de20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dfe0:	e2de20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001dfe4:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001dfe8:	08200593          	li	a1,130
    8001dfec:	00017617          	auipc	a2,0x17
    8001dff0:	3b460613          	addi	a2,a2,948 # 800353a0 <__func__.0+0x74b8>
    8001dff4:	00010517          	auipc	a0,0x10
    8001dff8:	1ec50513          	addi	a0,a0,492 # 8002e1e0 <__func__.0+0x2f8>
    8001dffc:	42e0d0ef          	jal	8002b42a <printf>
    8001e000:	0003a797          	auipc	a5,0x3a
    8001e004:	0117c783          	lbu	a5,17(a5) # 80058011 <excpt+0x1>
    8001e008:	00010597          	auipc	a1,0x10
    8001e00c:	1b058593          	addi	a1,a1,432 # 8002e1b8 <__func__.0+0x2d0>
    8001e010:	cf89                	beqz	a5,8001e02a <time_test_1+0x120>
    8001e012:	6498                	ld	a4,8(s1)
    8001e014:	4789                	li	a5,2
    8001e016:	00010597          	auipc	a1,0x10
    8001e01a:	19258593          	addi	a1,a1,402 # 8002e1a8 <__func__.0+0x2c0>
    8001e01e:	00f70663          	beq	a4,a5,8001e02a <time_test_1+0x120>
    8001e022:	00010597          	auipc	a1,0x10
    8001e026:	19658593          	addi	a1,a1,406 # 8002e1b8 <__func__.0+0x2d0>
    8001e02a:	00010517          	auipc	a0,0x10
    8001e02e:	1ce50513          	addi	a0,a0,462 # 8002e1f8 <__func__.0+0x310>
    8001e032:	3f80d0ef          	jal	8002b42a <printf>
    8001e036:	0003a797          	auipc	a5,0x3a
    8001e03a:	fdb7c783          	lbu	a5,-37(a5) # 80058011 <excpt+0x1>
    8001e03e:	c789                	beqz	a5,8001e048 <time_test_1+0x13e>
    8001e040:	6498                	ld	a4,8(s1)
    8001e042:	4789                	li	a5,2
    8001e044:	00f70c63          	beq	a4,a5,8001e05c <time_test_1+0x152>
    8001e048:	00010517          	auipc	a0,0x10
    8001e04c:	1b850513          	addi	a0,a0,440 # 8002e200 <__func__.0+0x318>
    8001e050:	3da0d0ef          	jal	8002b42a <printf>
    8001e054:	02900513          	li	a0,41
    8001e058:	0c00c0ef          	jal	8002a118 <putchar>
    8001e05c:	4529                	li	a0,10
    8001e05e:	0ba0c0ef          	jal	8002a118 <putchar>
    8001e062:	c801                	beqz	s0,8001e072 <time_test_1+0x168>
    8001e064:	0003a797          	auipc	a5,0x3a
    8001e068:	fad7c783          	lbu	a5,-83(a5) # 80058011 <excpt+0x1>
    8001e06c:	4401                	li	s0,0
    8001e06e:	16079f63          	bnez	a5,8001e1ec <time_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001e072:	4501                	li	a0,0
    8001e074:	e95e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e078:	d95e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e07c:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e080:	08200593          	li	a1,130
    8001e084:	00017617          	auipc	a2,0x17
    8001e088:	36c60613          	addi	a2,a2,876 # 800353f0 <__func__.0+0x7508>
    8001e08c:	00010517          	auipc	a0,0x10
    8001e090:	15450513          	addi	a0,a0,340 # 8002e1e0 <__func__.0+0x2f8>
    8001e094:	3960d0ef          	jal	8002b42a <printf>
    8001e098:	0003a797          	auipc	a5,0x3a
    8001e09c:	f797c783          	lbu	a5,-135(a5) # 80058011 <excpt+0x1>
    8001e0a0:	00010597          	auipc	a1,0x10
    8001e0a4:	11858593          	addi	a1,a1,280 # 8002e1b8 <__func__.0+0x2d0>
    8001e0a8:	cf89                	beqz	a5,8001e0c2 <time_test_1+0x1b8>
    8001e0aa:	6498                	ld	a4,8(s1)
    8001e0ac:	4789                	li	a5,2
    8001e0ae:	00010597          	auipc	a1,0x10
    8001e0b2:	0fa58593          	addi	a1,a1,250 # 8002e1a8 <__func__.0+0x2c0>
    8001e0b6:	00f70663          	beq	a4,a5,8001e0c2 <time_test_1+0x1b8>
    8001e0ba:	00010597          	auipc	a1,0x10
    8001e0be:	0fe58593          	addi	a1,a1,254 # 8002e1b8 <__func__.0+0x2d0>
    8001e0c2:	00010517          	auipc	a0,0x10
    8001e0c6:	13650513          	addi	a0,a0,310 # 8002e1f8 <__func__.0+0x310>
    8001e0ca:	3600d0ef          	jal	8002b42a <printf>
    8001e0ce:	0003a797          	auipc	a5,0x3a
    8001e0d2:	f437c783          	lbu	a5,-189(a5) # 80058011 <excpt+0x1>
    8001e0d6:	c789                	beqz	a5,8001e0e0 <time_test_1+0x1d6>
    8001e0d8:	6498                	ld	a4,8(s1)
    8001e0da:	4789                	li	a5,2
    8001e0dc:	00f70c63          	beq	a4,a5,8001e0f4 <time_test_1+0x1ea>
    8001e0e0:	00010517          	auipc	a0,0x10
    8001e0e4:	12050513          	addi	a0,a0,288 # 8002e200 <__func__.0+0x318>
    8001e0e8:	3420d0ef          	jal	8002b42a <printf>
    8001e0ec:	02900513          	li	a0,41
    8001e0f0:	0280c0ef          	jal	8002a118 <putchar>
    8001e0f4:	4529                	li	a0,10
    8001e0f6:	0220c0ef          	jal	8002a118 <putchar>
    8001e0fa:	c801                	beqz	s0,8001e10a <time_test_1+0x200>
    8001e0fc:	0003a797          	auipc	a5,0x3a
    8001e100:	f157c783          	lbu	a5,-235(a5) # 80058011 <excpt+0x1>
    8001e104:	4401                	li	s0,0
    8001e106:	0c079e63          	bnez	a5,8001e1e2 <time_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001e10a:	4505                	li	a0,1
    8001e10c:	dfde20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e110:	cfde20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e114:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e118:	08200593          	li	a1,130
    8001e11c:	00017617          	auipc	a2,0x17
    8001e120:	32460613          	addi	a2,a2,804 # 80035440 <__func__.0+0x7558>
    8001e124:	00010517          	auipc	a0,0x10
    8001e128:	0bc50513          	addi	a0,a0,188 # 8002e1e0 <__func__.0+0x2f8>
    8001e12c:	2fe0d0ef          	jal	8002b42a <printf>
    8001e130:	0003a797          	auipc	a5,0x3a
    8001e134:	ee17c783          	lbu	a5,-287(a5) # 80058011 <excpt+0x1>
    8001e138:	00010597          	auipc	a1,0x10
    8001e13c:	08058593          	addi	a1,a1,128 # 8002e1b8 <__func__.0+0x2d0>
    8001e140:	cf89                	beqz	a5,8001e15a <time_test_1+0x250>
    8001e142:	6498                	ld	a4,8(s1)
    8001e144:	4789                	li	a5,2
    8001e146:	00010597          	auipc	a1,0x10
    8001e14a:	06258593          	addi	a1,a1,98 # 8002e1a8 <__func__.0+0x2c0>
    8001e14e:	00f70663          	beq	a4,a5,8001e15a <time_test_1+0x250>
    8001e152:	00010597          	auipc	a1,0x10
    8001e156:	06658593          	addi	a1,a1,102 # 8002e1b8 <__func__.0+0x2d0>
    8001e15a:	00010517          	auipc	a0,0x10
    8001e15e:	09e50513          	addi	a0,a0,158 # 8002e1f8 <__func__.0+0x310>
    8001e162:	2c80d0ef          	jal	8002b42a <printf>
    8001e166:	0003a797          	auipc	a5,0x3a
    8001e16a:	eab7c783          	lbu	a5,-341(a5) # 80058011 <excpt+0x1>
    8001e16e:	c789                	beqz	a5,8001e178 <time_test_1+0x26e>
    8001e170:	6498                	ld	a4,8(s1)
    8001e172:	4789                	li	a5,2
    8001e174:	00f70c63          	beq	a4,a5,8001e18c <time_test_1+0x282>
    8001e178:	00010517          	auipc	a0,0x10
    8001e17c:	08850513          	addi	a0,a0,136 # 8002e200 <__func__.0+0x318>
    8001e180:	2aa0d0ef          	jal	8002b42a <printf>
    8001e184:	02900513          	li	a0,41
    8001e188:	7910b0ef          	jal	8002a118 <putchar>
    8001e18c:	4529                	li	a0,10
    8001e18e:	78b0b0ef          	jal	8002a118 <putchar>
    8001e192:	c015                	beqz	s0,8001e1b6 <time_test_1+0x2ac>
    8001e194:	0003a417          	auipc	s0,0x3a
    8001e198:	e7d44403          	lbu	s0,-387(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e19c:	00010597          	auipc	a1,0x10
    8001e1a0:	01c58593          	addi	a1,a1,28 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1a4:	cc11                	beqz	s0,8001e1c0 <time_test_1+0x2b6>
    8001e1a6:	6498                	ld	a4,8(s1)
    8001e1a8:	4789                	li	a5,2
    TEST_END(); 
    8001e1aa:	00010597          	auipc	a1,0x10
    8001e1ae:	ffe58593          	addi	a1,a1,-2 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1b2:	00f70763          	beq	a4,a5,8001e1c0 <time_test_1+0x2b6>
    8001e1b6:	4401                	li	s0,0
    TEST_END(); 
    8001e1b8:	00010597          	auipc	a1,0x10
    8001e1bc:	00058593          	mv	a1,a1
    8001e1c0:	00010517          	auipc	a0,0x10
    8001e1c4:	0a050513          	addi	a0,a0,160 # 8002e260 <__func__.0+0x378>
    8001e1c8:	2620d0ef          	jal	8002b42a <printf>
    8001e1cc:	4511                	li	a0,4
    8001e1ce:	d3be20ef          	jal	80000f08 <goto_priv>
    8001e1d2:	e52e30ef          	jal	80001824 <reset_state>
}
    8001e1d6:	60e2                	ld	ra,24(sp)
    8001e1d8:	8522                	mv	a0,s0
    8001e1da:	6442                	ld	s0,16(sp)
    8001e1dc:	64a2                	ld	s1,8(sp)
    8001e1de:	6105                	addi	sp,sp,32
    8001e1e0:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1e2:	6480                	ld	s0,8(s1)
    8001e1e4:	1479                	addi	s0,s0,-2
    8001e1e6:	00143413          	seqz	s0,s0
    8001e1ea:	b705                	j	8001e10a <time_test_1+0x200>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1ec:	6480                	ld	s0,8(s1)
    8001e1ee:	1479                	addi	s0,s0,-2
    8001e1f0:	00143413          	seqz	s0,s0
    8001e1f4:	bdbd                	j	8001e072 <time_test_1+0x168>

000000008001e1f6 <time_test_2>:

bool time_test_2() {
    8001e1f6:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e1f8:	0000f597          	auipc	a1,0xf
    8001e1fc:	43858593          	addi	a1,a1,1080 # 8002d630 <__func__.49>
    8001e200:	00010517          	auipc	a0,0x10
    8001e204:	fc850513          	addi	a0,a0,-56 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_2() {
    8001e208:	e406                	sd	ra,8(sp)
    8001e20a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e20c:	21e0d0ef          	jal	8002b42a <printf>
    8001e210:	4529                	li	a0,10
    8001e212:	7070b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e216:	4511                	li	a0,4
    8001e218:	cf1e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e21c:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001e220:	450d                	li	a0,3
    8001e222:	ce7e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e226:	be7e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e22a:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e22e:	08200593          	li	a1,130
    8001e232:	00017617          	auipc	a2,0x17
    8001e236:	25e60613          	addi	a2,a2,606 # 80035490 <__func__.0+0x75a8>
    8001e23a:	00010517          	auipc	a0,0x10
    8001e23e:	fa650513          	addi	a0,a0,-90 # 8002e1e0 <__func__.0+0x2f8>
    8001e242:	1e80d0ef          	jal	8002b42a <printf>
    8001e246:	0003a797          	auipc	a5,0x3a
    8001e24a:	dcb7c783          	lbu	a5,-565(a5) # 80058011 <excpt+0x1>
    8001e24e:	00010597          	auipc	a1,0x10
    8001e252:	f5a58593          	addi	a1,a1,-166 # 8002e1a8 <__func__.0+0x2c0>
    8001e256:	c789                	beqz	a5,8001e260 <time_test_2+0x6a>
    8001e258:	00010597          	auipc	a1,0x10
    8001e25c:	f6058593          	addi	a1,a1,-160 # 8002e1b8 <__func__.0+0x2d0>
    8001e260:	00010517          	auipc	a0,0x10
    8001e264:	f9850513          	addi	a0,a0,-104 # 8002e1f8 <__func__.0+0x310>
    8001e268:	1c20d0ef          	jal	8002b42a <printf>
    8001e26c:	0003a797          	auipc	a5,0x3a
    8001e270:	da57c783          	lbu	a5,-603(a5) # 80058011 <excpt+0x1>
    8001e274:	e7a1                	bnez	a5,8001e2bc <time_test_2+0xc6>
    8001e276:	4529                	li	a0,10
    8001e278:	6a10b0ef          	jal	8002a118 <putchar>
    8001e27c:	0003a797          	auipc	a5,0x3a
    8001e280:	d957c783          	lbu	a5,-619(a5) # 80058011 <excpt+0x1>
    8001e284:	e795                	bnez	a5,8001e2b0 <time_test_2+0xba>
    8001e286:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001e288:	00010597          	auipc	a1,0x10
    8001e28c:	f2058593          	addi	a1,a1,-224 # 8002e1a8 <__func__.0+0x2c0>
    8001e290:	00010517          	auipc	a0,0x10
    8001e294:	fd050513          	addi	a0,a0,-48 # 8002e260 <__func__.0+0x378>
    8001e298:	1920d0ef          	jal	8002b42a <printf>
    8001e29c:	4511                	li	a0,4
    8001e29e:	c6be20ef          	jal	80000f08 <goto_priv>
    8001e2a2:	d82e30ef          	jal	80001824 <reset_state>
}
    8001e2a6:	60a2                	ld	ra,8(sp)
    8001e2a8:	8522                	mv	a0,s0
    8001e2aa:	6402                	ld	s0,0(sp)
    8001e2ac:	0141                	addi	sp,sp,16
    8001e2ae:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e2b0:	4401                	li	s0,0
    TEST_END(); 
    8001e2b2:	00010597          	auipc	a1,0x10
    8001e2b6:	f0658593          	addi	a1,a1,-250 # 8002e1b8 <__func__.0+0x2d0>
    8001e2ba:	bfd9                	j	8001e290 <time_test_2+0x9a>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e2bc:	00010517          	auipc	a0,0x10
    8001e2c0:	f4450513          	addi	a0,a0,-188 # 8002e200 <__func__.0+0x318>
    8001e2c4:	1660d0ef          	jal	8002b42a <printf>
    8001e2c8:	02900513          	li	a0,41
    8001e2cc:	64d0b0ef          	jal	8002a118 <putchar>
    8001e2d0:	b75d                	j	8001e276 <time_test_2+0x80>

000000008001e2d2 <time_test_3>:

bool time_test_3() {
    8001e2d2:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e2d4:	0000f597          	auipc	a1,0xf
    8001e2d8:	36c58593          	addi	a1,a1,876 # 8002d640 <__func__.48>
    8001e2dc:	00010517          	auipc	a0,0x10
    8001e2e0:	eec50513          	addi	a0,a0,-276 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_3() {
    8001e2e4:	ec06                	sd	ra,24(sp)
    8001e2e6:	e822                	sd	s0,16(sp)
    8001e2e8:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e2ea:	1400d0ef          	jal	8002b42a <printf>
    8001e2ee:	4529                	li	a0,10
    8001e2f0:	6290b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e2f4:	4511                	li	a0,4
    8001e2f6:	c13e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e2fa:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e2fe:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e302:	4505                	li	a0,1
    8001e304:	c05e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e308:	b05e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e30c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e310:	08200593          	li	a1,130
    8001e314:	00017617          	auipc	a2,0x17
    8001e318:	1b460613          	addi	a2,a2,436 # 800354c8 <__func__.0+0x75e0>
    8001e31c:	00010517          	auipc	a0,0x10
    8001e320:	ec450513          	addi	a0,a0,-316 # 8002e1e0 <__func__.0+0x2f8>
    8001e324:	1060d0ef          	jal	8002b42a <printf>
    8001e328:	0003a797          	auipc	a5,0x3a
    8001e32c:	ce97c783          	lbu	a5,-791(a5) # 80058011 <excpt+0x1>
    8001e330:	0003a497          	auipc	s1,0x3a
    8001e334:	ce048493          	addi	s1,s1,-800 # 80058010 <excpt>
    8001e338:	00010597          	auipc	a1,0x10
    8001e33c:	e8058593          	addi	a1,a1,-384 # 8002e1b8 <__func__.0+0x2d0>
    8001e340:	cf89                	beqz	a5,8001e35a <time_test_3+0x88>
    8001e342:	6498                	ld	a4,8(s1)
    8001e344:	4789                	li	a5,2
    8001e346:	00010597          	auipc	a1,0x10
    8001e34a:	e6258593          	addi	a1,a1,-414 # 8002e1a8 <__func__.0+0x2c0>
    8001e34e:	00f70663          	beq	a4,a5,8001e35a <time_test_3+0x88>
    8001e352:	00010597          	auipc	a1,0x10
    8001e356:	e6658593          	addi	a1,a1,-410 # 8002e1b8 <__func__.0+0x2d0>
    8001e35a:	00010517          	auipc	a0,0x10
    8001e35e:	e9e50513          	addi	a0,a0,-354 # 8002e1f8 <__func__.0+0x310>
    8001e362:	0c80d0ef          	jal	8002b42a <printf>
    8001e366:	0003a797          	auipc	a5,0x3a
    8001e36a:	cab7c783          	lbu	a5,-853(a5) # 80058011 <excpt+0x1>
    8001e36e:	c789                	beqz	a5,8001e378 <time_test_3+0xa6>
    8001e370:	6498                	ld	a4,8(s1)
    8001e372:	4789                	li	a5,2
    8001e374:	00f70c63          	beq	a4,a5,8001e38c <time_test_3+0xba>
    8001e378:	00010517          	auipc	a0,0x10
    8001e37c:	e8850513          	addi	a0,a0,-376 # 8002e200 <__func__.0+0x318>
    8001e380:	0aa0d0ef          	jal	8002b42a <printf>
    8001e384:	02900513          	li	a0,41
    8001e388:	5910b0ef          	jal	8002a118 <putchar>
    8001e38c:	4529                	li	a0,10
    8001e38e:	58b0b0ef          	jal	8002a118 <putchar>
    8001e392:	0003a417          	auipc	s0,0x3a
    8001e396:	c7f44403          	lbu	s0,-897(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e39a:	00010597          	auipc	a1,0x10
    8001e39e:	e1e58593          	addi	a1,a1,-482 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e3a2:	cc11                	beqz	s0,8001e3be <time_test_3+0xec>
    8001e3a4:	6498                	ld	a4,8(s1)
    8001e3a6:	4789                	li	a5,2
    TEST_END(); 
    8001e3a8:	00010597          	auipc	a1,0x10
    8001e3ac:	e0058593          	addi	a1,a1,-512 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e3b0:	00f70763          	beq	a4,a5,8001e3be <time_test_3+0xec>
    8001e3b4:	4401                	li	s0,0
    TEST_END(); 
    8001e3b6:	00010597          	auipc	a1,0x10
    8001e3ba:	e0258593          	addi	a1,a1,-510 # 8002e1b8 <__func__.0+0x2d0>
    8001e3be:	00010517          	auipc	a0,0x10
    8001e3c2:	ea250513          	addi	a0,a0,-350 # 8002e260 <__func__.0+0x378>
    8001e3c6:	0640d0ef          	jal	8002b42a <printf>
    8001e3ca:	4511                	li	a0,4
    8001e3cc:	b3de20ef          	jal	80000f08 <goto_priv>
    8001e3d0:	c54e30ef          	jal	80001824 <reset_state>
}
    8001e3d4:	60e2                	ld	ra,24(sp)
    8001e3d6:	8522                	mv	a0,s0
    8001e3d8:	6442                	ld	s0,16(sp)
    8001e3da:	64a2                	ld	s1,8(sp)
    8001e3dc:	6105                	addi	sp,sp,32
    8001e3de:	8082                	ret

000000008001e3e0 <time_test_4>:

bool time_test_4() {
    8001e3e0:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e3e2:	0000f597          	auipc	a1,0xf
    8001e3e6:	26e58593          	addi	a1,a1,622 # 8002d650 <__func__.47>
    8001e3ea:	00010517          	auipc	a0,0x10
    8001e3ee:	dde50513          	addi	a0,a0,-546 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_4() {
    8001e3f2:	e406                	sd	ra,8(sp)
    8001e3f4:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e3f6:	0340d0ef          	jal	8002b42a <printf>
    8001e3fa:	4529                	li	a0,10
    8001e3fc:	51d0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e400:	4511                	li	a0,4
    8001e402:	b07e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e406:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e40a:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e40e:	4505                	li	a0,1
    8001e410:	af9e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e414:	9f9e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e418:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e41c:	08200593          	li	a1,130
    8001e420:	00017617          	auipc	a2,0x17
    8001e424:	0f860613          	addi	a2,a2,248 # 80035518 <__func__.0+0x7630>
    8001e428:	00010517          	auipc	a0,0x10
    8001e42c:	db850513          	addi	a0,a0,-584 # 8002e1e0 <__func__.0+0x2f8>
    8001e430:	7fb0c0ef          	jal	8002b42a <printf>
    8001e434:	0003a797          	auipc	a5,0x3a
    8001e438:	bdd7c783          	lbu	a5,-1059(a5) # 80058011 <excpt+0x1>
    8001e43c:	00010597          	auipc	a1,0x10
    8001e440:	d6c58593          	addi	a1,a1,-660 # 8002e1a8 <__func__.0+0x2c0>
    8001e444:	c789                	beqz	a5,8001e44e <time_test_4+0x6e>
    8001e446:	00010597          	auipc	a1,0x10
    8001e44a:	d7258593          	addi	a1,a1,-654 # 8002e1b8 <__func__.0+0x2d0>
    8001e44e:	00010517          	auipc	a0,0x10
    8001e452:	daa50513          	addi	a0,a0,-598 # 8002e1f8 <__func__.0+0x310>
    8001e456:	7d50c0ef          	jal	8002b42a <printf>
    8001e45a:	0003a797          	auipc	a5,0x3a
    8001e45e:	bb77c783          	lbu	a5,-1097(a5) # 80058011 <excpt+0x1>
    8001e462:	e7a1                	bnez	a5,8001e4aa <time_test_4+0xca>
    8001e464:	4529                	li	a0,10
    8001e466:	4b30b0ef          	jal	8002a118 <putchar>
    8001e46a:	0003a797          	auipc	a5,0x3a
    8001e46e:	ba77c783          	lbu	a5,-1113(a5) # 80058011 <excpt+0x1>
    8001e472:	e795                	bnez	a5,8001e49e <time_test_4+0xbe>
    8001e474:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e476:	00010597          	auipc	a1,0x10
    8001e47a:	d3258593          	addi	a1,a1,-718 # 8002e1a8 <__func__.0+0x2c0>
    8001e47e:	00010517          	auipc	a0,0x10
    8001e482:	de250513          	addi	a0,a0,-542 # 8002e260 <__func__.0+0x378>
    8001e486:	7a50c0ef          	jal	8002b42a <printf>
    8001e48a:	4511                	li	a0,4
    8001e48c:	a7de20ef          	jal	80000f08 <goto_priv>
    8001e490:	b94e30ef          	jal	80001824 <reset_state>
}
    8001e494:	60a2                	ld	ra,8(sp)
    8001e496:	8522                	mv	a0,s0
    8001e498:	6402                	ld	s0,0(sp)
    8001e49a:	0141                	addi	sp,sp,16
    8001e49c:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e49e:	4401                	li	s0,0
    TEST_END(); 
    8001e4a0:	00010597          	auipc	a1,0x10
    8001e4a4:	d1858593          	addi	a1,a1,-744 # 8002e1b8 <__func__.0+0x2d0>
    8001e4a8:	bfd9                	j	8001e47e <time_test_4+0x9e>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e4aa:	00010517          	auipc	a0,0x10
    8001e4ae:	d5650513          	addi	a0,a0,-682 # 8002e200 <__func__.0+0x318>
    8001e4b2:	7790c0ef          	jal	8002b42a <printf>
    8001e4b6:	02900513          	li	a0,41
    8001e4ba:	45f0b0ef          	jal	8002a118 <putchar>
    8001e4be:	b75d                	j	8001e464 <time_test_4+0x84>

000000008001e4c0 <time_test_5>:

bool time_test_5() {
    8001e4c0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e4c2:	0000f597          	auipc	a1,0xf
    8001e4c6:	19e58593          	addi	a1,a1,414 # 8002d660 <__func__.46>
    8001e4ca:	00010517          	auipc	a0,0x10
    8001e4ce:	cfe50513          	addi	a0,a0,-770 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_5() {
    8001e4d2:	ec06                	sd	ra,24(sp)
    8001e4d4:	e822                	sd	s0,16(sp)
    8001e4d6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e4d8:	7530c0ef          	jal	8002b42a <printf>
    8001e4dc:	4529                	li	a0,10
    8001e4de:	43b0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e4e2:	4511                	li	a0,4
    8001e4e4:	a25e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e4e8:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e4ec:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e4f0:	4509                	li	a0,2
    8001e4f2:	a17e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e4f6:	917e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e4fa:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e4fe:	08200593          	li	a1,130
    8001e502:	00017617          	auipc	a2,0x17
    8001e506:	05e60613          	addi	a2,a2,94 # 80035560 <__func__.0+0x7678>
    8001e50a:	00010517          	auipc	a0,0x10
    8001e50e:	cd650513          	addi	a0,a0,-810 # 8002e1e0 <__func__.0+0x2f8>
    8001e512:	7190c0ef          	jal	8002b42a <printf>
    8001e516:	0003a797          	auipc	a5,0x3a
    8001e51a:	afb7c783          	lbu	a5,-1285(a5) # 80058011 <excpt+0x1>
    8001e51e:	0003a497          	auipc	s1,0x3a
    8001e522:	af248493          	addi	s1,s1,-1294 # 80058010 <excpt>
    8001e526:	00010597          	auipc	a1,0x10
    8001e52a:	c9258593          	addi	a1,a1,-878 # 8002e1b8 <__func__.0+0x2d0>
    8001e52e:	cf89                	beqz	a5,8001e548 <time_test_5+0x88>
    8001e530:	6498                	ld	a4,8(s1)
    8001e532:	47d9                	li	a5,22
    8001e534:	00010597          	auipc	a1,0x10
    8001e538:	c7458593          	addi	a1,a1,-908 # 8002e1a8 <__func__.0+0x2c0>
    8001e53c:	00f70663          	beq	a4,a5,8001e548 <time_test_5+0x88>
    8001e540:	00010597          	auipc	a1,0x10
    8001e544:	c7858593          	addi	a1,a1,-904 # 8002e1b8 <__func__.0+0x2d0>
    8001e548:	00010517          	auipc	a0,0x10
    8001e54c:	cb050513          	addi	a0,a0,-848 # 8002e1f8 <__func__.0+0x310>
    8001e550:	6db0c0ef          	jal	8002b42a <printf>
    8001e554:	0003a797          	auipc	a5,0x3a
    8001e558:	abd7c783          	lbu	a5,-1347(a5) # 80058011 <excpt+0x1>
    8001e55c:	c789                	beqz	a5,8001e566 <time_test_5+0xa6>
    8001e55e:	6498                	ld	a4,8(s1)
    8001e560:	47d9                	li	a5,22
    8001e562:	00f70c63          	beq	a4,a5,8001e57a <time_test_5+0xba>
    8001e566:	00010517          	auipc	a0,0x10
    8001e56a:	c9a50513          	addi	a0,a0,-870 # 8002e200 <__func__.0+0x318>
    8001e56e:	6bd0c0ef          	jal	8002b42a <printf>
    8001e572:	02900513          	li	a0,41
    8001e576:	3a30b0ef          	jal	8002a118 <putchar>
    8001e57a:	4529                	li	a0,10
    8001e57c:	39d0b0ef          	jal	8002a118 <putchar>
    8001e580:	0003a417          	auipc	s0,0x3a
    8001e584:	a9144403          	lbu	s0,-1391(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e588:	00010597          	auipc	a1,0x10
    8001e58c:	c3058593          	addi	a1,a1,-976 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e590:	cc11                	beqz	s0,8001e5ac <time_test_5+0xec>
    8001e592:	6498                	ld	a4,8(s1)
    8001e594:	47d9                	li	a5,22
    TEST_END(); 
    8001e596:	00010597          	auipc	a1,0x10
    8001e59a:	c1258593          	addi	a1,a1,-1006 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e59e:	00f70763          	beq	a4,a5,8001e5ac <time_test_5+0xec>
    8001e5a2:	4401                	li	s0,0
    TEST_END(); 
    8001e5a4:	00010597          	auipc	a1,0x10
    8001e5a8:	c1458593          	addi	a1,a1,-1004 # 8002e1b8 <__func__.0+0x2d0>
    8001e5ac:	00010517          	auipc	a0,0x10
    8001e5b0:	cb450513          	addi	a0,a0,-844 # 8002e260 <__func__.0+0x378>
    8001e5b4:	6770c0ef          	jal	8002b42a <printf>
    8001e5b8:	4511                	li	a0,4
    8001e5ba:	94fe20ef          	jal	80000f08 <goto_priv>
    8001e5be:	a66e30ef          	jal	80001824 <reset_state>
}
    8001e5c2:	60e2                	ld	ra,24(sp)
    8001e5c4:	8522                	mv	a0,s0
    8001e5c6:	6442                	ld	s0,16(sp)
    8001e5c8:	64a2                	ld	s1,8(sp)
    8001e5ca:	6105                	addi	sp,sp,32
    8001e5cc:	8082                	ret

000000008001e5ce <time_test_6>:

bool time_test_6() {
    8001e5ce:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e5d0:	0000f597          	auipc	a1,0xf
    8001e5d4:	0a058593          	addi	a1,a1,160 # 8002d670 <__func__.45>
    8001e5d8:	00010517          	auipc	a0,0x10
    8001e5dc:	bf050513          	addi	a0,a0,-1040 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_6() {
    8001e5e0:	e406                	sd	ra,8(sp)
    8001e5e2:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e5e4:	6470c0ef          	jal	8002b42a <printf>
    8001e5e8:	4529                	li	a0,10
    8001e5ea:	32f0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e5ee:	4511                	li	a0,4
    8001e5f0:	919e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e5f4:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e5f8:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e5fc:	4509                	li	a0,2
    8001e5fe:	90be20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e602:	80be20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e606:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e60a:	08200593          	li	a1,130
    8001e60e:	00017617          	auipc	a2,0x17
    8001e612:	fb260613          	addi	a2,a2,-78 # 800355c0 <__func__.0+0x76d8>
    8001e616:	00010517          	auipc	a0,0x10
    8001e61a:	bca50513          	addi	a0,a0,-1078 # 8002e1e0 <__func__.0+0x2f8>
    8001e61e:	60d0c0ef          	jal	8002b42a <printf>
    8001e622:	0003a797          	auipc	a5,0x3a
    8001e626:	9ef7c783          	lbu	a5,-1553(a5) # 80058011 <excpt+0x1>
    8001e62a:	00010597          	auipc	a1,0x10
    8001e62e:	b7e58593          	addi	a1,a1,-1154 # 8002e1a8 <__func__.0+0x2c0>
    8001e632:	c789                	beqz	a5,8001e63c <time_test_6+0x6e>
    8001e634:	00010597          	auipc	a1,0x10
    8001e638:	b8458593          	addi	a1,a1,-1148 # 8002e1b8 <__func__.0+0x2d0>
    8001e63c:	00010517          	auipc	a0,0x10
    8001e640:	bbc50513          	addi	a0,a0,-1092 # 8002e1f8 <__func__.0+0x310>
    8001e644:	5e70c0ef          	jal	8002b42a <printf>
    8001e648:	0003a797          	auipc	a5,0x3a
    8001e64c:	9c97c783          	lbu	a5,-1591(a5) # 80058011 <excpt+0x1>
    8001e650:	e7a1                	bnez	a5,8001e698 <time_test_6+0xca>
    8001e652:	4529                	li	a0,10
    8001e654:	2c50b0ef          	jal	8002a118 <putchar>
    8001e658:	0003a797          	auipc	a5,0x3a
    8001e65c:	9b97c783          	lbu	a5,-1607(a5) # 80058011 <excpt+0x1>
    8001e660:	e795                	bnez	a5,8001e68c <time_test_6+0xbe>
    8001e662:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e664:	00010597          	auipc	a1,0x10
    8001e668:	b4458593          	addi	a1,a1,-1212 # 8002e1a8 <__func__.0+0x2c0>
    8001e66c:	00010517          	auipc	a0,0x10
    8001e670:	bf450513          	addi	a0,a0,-1036 # 8002e260 <__func__.0+0x378>
    8001e674:	5b70c0ef          	jal	8002b42a <printf>
    8001e678:	4511                	li	a0,4
    8001e67a:	88fe20ef          	jal	80000f08 <goto_priv>
    8001e67e:	9a6e30ef          	jal	80001824 <reset_state>
}
    8001e682:	60a2                	ld	ra,8(sp)
    8001e684:	8522                	mv	a0,s0
    8001e686:	6402                	ld	s0,0(sp)
    8001e688:	0141                	addi	sp,sp,16
    8001e68a:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e68c:	4401                	li	s0,0
    TEST_END(); 
    8001e68e:	00010597          	auipc	a1,0x10
    8001e692:	b2a58593          	addi	a1,a1,-1238 # 8002e1b8 <__func__.0+0x2d0>
    8001e696:	bfd9                	j	8001e66c <time_test_6+0x9e>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e698:	00010517          	auipc	a0,0x10
    8001e69c:	b6850513          	addi	a0,a0,-1176 # 8002e200 <__func__.0+0x318>
    8001e6a0:	58b0c0ef          	jal	8002b42a <printf>
    8001e6a4:	02900513          	li	a0,41
    8001e6a8:	2710b0ef          	jal	8002a118 <putchar>
    8001e6ac:	b75d                	j	8001e652 <time_test_6+0x84>

000000008001e6ae <time_test_7>:

bool time_test_7() {
    8001e6ae:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e6b0:	0000f597          	auipc	a1,0xf
    8001e6b4:	fd058593          	addi	a1,a1,-48 # 8002d680 <__func__.44>
    8001e6b8:	00010517          	auipc	a0,0x10
    8001e6bc:	b1050513          	addi	a0,a0,-1264 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_7() {
    8001e6c0:	e406                	sd	ra,8(sp)
    8001e6c2:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e6c4:	5670c0ef          	jal	8002b42a <printf>
    8001e6c8:	4529                	li	a0,10
    8001e6ca:	24f0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e6ce:	4511                	li	a0,4
    8001e6d0:	839e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e6d4:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e6d8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e6dc:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e6e0:	4501                	li	a0,0
    8001e6e2:	827e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e6e6:	f26e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e6ea:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e6ee:	08200593          	li	a1,130
    8001e6f2:	00017617          	auipc	a2,0x17
    8001e6f6:	f1660613          	addi	a2,a2,-234 # 80035608 <__func__.0+0x7720>
    8001e6fa:	00010517          	auipc	a0,0x10
    8001e6fe:	ae650513          	addi	a0,a0,-1306 # 8002e1e0 <__func__.0+0x2f8>
    8001e702:	5290c0ef          	jal	8002b42a <printf>
    8001e706:	0003a797          	auipc	a5,0x3a
    8001e70a:	90b7c783          	lbu	a5,-1781(a5) # 80058011 <excpt+0x1>
    8001e70e:	00010597          	auipc	a1,0x10
    8001e712:	a9a58593          	addi	a1,a1,-1382 # 8002e1a8 <__func__.0+0x2c0>
    8001e716:	c789                	beqz	a5,8001e720 <time_test_7+0x72>
    8001e718:	00010597          	auipc	a1,0x10
    8001e71c:	aa058593          	addi	a1,a1,-1376 # 8002e1b8 <__func__.0+0x2d0>
    8001e720:	00010517          	auipc	a0,0x10
    8001e724:	ad850513          	addi	a0,a0,-1320 # 8002e1f8 <__func__.0+0x310>
    8001e728:	5030c0ef          	jal	8002b42a <printf>
    8001e72c:	0003a797          	auipc	a5,0x3a
    8001e730:	8e57c783          	lbu	a5,-1819(a5) # 80058011 <excpt+0x1>
    8001e734:	e7a1                	bnez	a5,8001e77c <time_test_7+0xce>
    8001e736:	4529                	li	a0,10
    8001e738:	1e10b0ef          	jal	8002a118 <putchar>
    8001e73c:	0003a797          	auipc	a5,0x3a
    8001e740:	8d57c783          	lbu	a5,-1835(a5) # 80058011 <excpt+0x1>
    8001e744:	e795                	bnez	a5,8001e770 <time_test_7+0xc2>
    8001e746:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e748:	00010597          	auipc	a1,0x10
    8001e74c:	a6058593          	addi	a1,a1,-1440 # 8002e1a8 <__func__.0+0x2c0>
    8001e750:	00010517          	auipc	a0,0x10
    8001e754:	b1050513          	addi	a0,a0,-1264 # 8002e260 <__func__.0+0x378>
    8001e758:	4d30c0ef          	jal	8002b42a <printf>
    8001e75c:	4511                	li	a0,4
    8001e75e:	faae20ef          	jal	80000f08 <goto_priv>
    8001e762:	8c2e30ef          	jal	80001824 <reset_state>
}
    8001e766:	60a2                	ld	ra,8(sp)
    8001e768:	8522                	mv	a0,s0
    8001e76a:	6402                	ld	s0,0(sp)
    8001e76c:	0141                	addi	sp,sp,16
    8001e76e:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e770:	4401                	li	s0,0
    TEST_END(); 
    8001e772:	00010597          	auipc	a1,0x10
    8001e776:	a4658593          	addi	a1,a1,-1466 # 8002e1b8 <__func__.0+0x2d0>
    8001e77a:	bfd9                	j	8001e750 <time_test_7+0xa2>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e77c:	00010517          	auipc	a0,0x10
    8001e780:	a8450513          	addi	a0,a0,-1404 # 8002e200 <__func__.0+0x318>
    8001e784:	4a70c0ef          	jal	8002b42a <printf>
    8001e788:	02900513          	li	a0,41
    8001e78c:	18d0b0ef          	jal	8002a118 <putchar>
    8001e790:	b75d                	j	8001e736 <time_test_7+0x88>

000000008001e792 <time_test_8>:

bool time_test_8() {
    8001e792:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e794:	0000f597          	auipc	a1,0xf
    8001e798:	efc58593          	addi	a1,a1,-260 # 8002d690 <__func__.43>
    8001e79c:	00010517          	auipc	a0,0x10
    8001e7a0:	a2c50513          	addi	a0,a0,-1492 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_8() {
    8001e7a4:	ec06                	sd	ra,24(sp)
    8001e7a6:	e822                	sd	s0,16(sp)
    8001e7a8:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e7aa:	4810c0ef          	jal	8002b42a <printf>
    8001e7ae:	4529                	li	a0,10
    8001e7b0:	1690b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e7b4:	4511                	li	a0,4
    8001e7b6:	f52e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e7ba:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e7be:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e7c2:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e7c6:	4501                	li	a0,0
    8001e7c8:	f40e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e7cc:	e40e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e7d0:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e7d4:	08200593          	li	a1,130
    8001e7d8:	00017617          	auipc	a2,0x17
    8001e7dc:	e8860613          	addi	a2,a2,-376 # 80035660 <__func__.0+0x7778>
    8001e7e0:	00010517          	auipc	a0,0x10
    8001e7e4:	a0050513          	addi	a0,a0,-1536 # 8002e1e0 <__func__.0+0x2f8>
    8001e7e8:	4430c0ef          	jal	8002b42a <printf>
    8001e7ec:	0003a797          	auipc	a5,0x3a
    8001e7f0:	8257c783          	lbu	a5,-2011(a5) # 80058011 <excpt+0x1>
    8001e7f4:	0003a497          	auipc	s1,0x3a
    8001e7f8:	81c48493          	addi	s1,s1,-2020 # 80058010 <excpt>
    8001e7fc:	00010597          	auipc	a1,0x10
    8001e800:	9bc58593          	addi	a1,a1,-1604 # 8002e1b8 <__func__.0+0x2d0>
    8001e804:	cf89                	beqz	a5,8001e81e <time_test_8+0x8c>
    8001e806:	6498                	ld	a4,8(s1)
    8001e808:	47d9                	li	a5,22
    8001e80a:	00010597          	auipc	a1,0x10
    8001e80e:	99e58593          	addi	a1,a1,-1634 # 8002e1a8 <__func__.0+0x2c0>
    8001e812:	00f70663          	beq	a4,a5,8001e81e <time_test_8+0x8c>
    8001e816:	00010597          	auipc	a1,0x10
    8001e81a:	9a258593          	addi	a1,a1,-1630 # 8002e1b8 <__func__.0+0x2d0>
    8001e81e:	00010517          	auipc	a0,0x10
    8001e822:	9da50513          	addi	a0,a0,-1574 # 8002e1f8 <__func__.0+0x310>
    8001e826:	4050c0ef          	jal	8002b42a <printf>
    8001e82a:	00039797          	auipc	a5,0x39
    8001e82e:	7e77c783          	lbu	a5,2023(a5) # 80058011 <excpt+0x1>
    8001e832:	c789                	beqz	a5,8001e83c <time_test_8+0xaa>
    8001e834:	6498                	ld	a4,8(s1)
    8001e836:	47d9                	li	a5,22
    8001e838:	00f70c63          	beq	a4,a5,8001e850 <time_test_8+0xbe>
    8001e83c:	00010517          	auipc	a0,0x10
    8001e840:	9c450513          	addi	a0,a0,-1596 # 8002e200 <__func__.0+0x318>
    8001e844:	3e70c0ef          	jal	8002b42a <printf>
    8001e848:	02900513          	li	a0,41
    8001e84c:	0cd0b0ef          	jal	8002a118 <putchar>
    8001e850:	4529                	li	a0,10
    8001e852:	0c70b0ef          	jal	8002a118 <putchar>
    8001e856:	00039417          	auipc	s0,0x39
    8001e85a:	7bb44403          	lbu	s0,1979(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e85e:	00010597          	auipc	a1,0x10
    8001e862:	95a58593          	addi	a1,a1,-1702 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e866:	cc11                	beqz	s0,8001e882 <time_test_8+0xf0>
    8001e868:	6498                	ld	a4,8(s1)
    8001e86a:	47d9                	li	a5,22
    TEST_END(); 
    8001e86c:	00010597          	auipc	a1,0x10
    8001e870:	93c58593          	addi	a1,a1,-1732 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e874:	00f70763          	beq	a4,a5,8001e882 <time_test_8+0xf0>
    8001e878:	4401                	li	s0,0
    TEST_END(); 
    8001e87a:	00010597          	auipc	a1,0x10
    8001e87e:	93e58593          	addi	a1,a1,-1730 # 8002e1b8 <__func__.0+0x2d0>
    8001e882:	00010517          	auipc	a0,0x10
    8001e886:	9de50513          	addi	a0,a0,-1570 # 8002e260 <__func__.0+0x378>
    8001e88a:	3a10c0ef          	jal	8002b42a <printf>
    8001e88e:	4511                	li	a0,4
    8001e890:	e78e20ef          	jal	80000f08 <goto_priv>
    8001e894:	f91e20ef          	jal	80001824 <reset_state>
}
    8001e898:	60e2                	ld	ra,24(sp)
    8001e89a:	8522                	mv	a0,s0
    8001e89c:	6442                	ld	s0,16(sp)
    8001e89e:	64a2                	ld	s1,8(sp)
    8001e8a0:	6105                	addi	sp,sp,32
    8001e8a2:	8082                	ret

000000008001e8a4 <time_test_9>:

bool time_test_9() {
    8001e8a4:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e8a6:	0000f597          	auipc	a1,0xf
    8001e8aa:	dfa58593          	addi	a1,a1,-518 # 8002d6a0 <__func__.42>
    8001e8ae:	00010517          	auipc	a0,0x10
    8001e8b2:	91a50513          	addi	a0,a0,-1766 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_9() {
    8001e8b6:	ec06                	sd	ra,24(sp)
    8001e8b8:	e822                	sd	s0,16(sp)
    8001e8ba:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e8bc:	36f0c0ef          	jal	8002b42a <printf>
    8001e8c0:	4529                	li	a0,10
    8001e8c2:	0570b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e8c6:	4511                	li	a0,4
    8001e8c8:	e40e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e8cc:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e8d0:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e8d4:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8001e8d8:	4505                	li	a0,1
    8001e8da:	e2ee20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e8de:	d2ee20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e8e2:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e8e6:	08200593          	li	a1,130
    8001e8ea:	00017617          	auipc	a2,0x17
    8001e8ee:	de660613          	addi	a2,a2,-538 # 800356d0 <__func__.0+0x77e8>
    8001e8f2:	00010517          	auipc	a0,0x10
    8001e8f6:	8ee50513          	addi	a0,a0,-1810 # 8002e1e0 <__func__.0+0x2f8>
    8001e8fa:	3310c0ef          	jal	8002b42a <printf>
    8001e8fe:	00039797          	auipc	a5,0x39
    8001e902:	7137c783          	lbu	a5,1811(a5) # 80058011 <excpt+0x1>
    8001e906:	00039497          	auipc	s1,0x39
    8001e90a:	70a48493          	addi	s1,s1,1802 # 80058010 <excpt>
    8001e90e:	00010597          	auipc	a1,0x10
    8001e912:	8aa58593          	addi	a1,a1,-1878 # 8002e1b8 <__func__.0+0x2d0>
    8001e916:	cf89                	beqz	a5,8001e930 <time_test_9+0x8c>
    8001e918:	6498                	ld	a4,8(s1)
    8001e91a:	4789                	li	a5,2
    8001e91c:	00010597          	auipc	a1,0x10
    8001e920:	88c58593          	addi	a1,a1,-1908 # 8002e1a8 <__func__.0+0x2c0>
    8001e924:	00f70663          	beq	a4,a5,8001e930 <time_test_9+0x8c>
    8001e928:	00010597          	auipc	a1,0x10
    8001e92c:	89058593          	addi	a1,a1,-1904 # 8002e1b8 <__func__.0+0x2d0>
    8001e930:	00010517          	auipc	a0,0x10
    8001e934:	8c850513          	addi	a0,a0,-1848 # 8002e1f8 <__func__.0+0x310>
    8001e938:	2f30c0ef          	jal	8002b42a <printf>
    8001e93c:	00039797          	auipc	a5,0x39
    8001e940:	6d57c783          	lbu	a5,1749(a5) # 80058011 <excpt+0x1>
    8001e944:	c789                	beqz	a5,8001e94e <time_test_9+0xaa>
    8001e946:	6498                	ld	a4,8(s1)
    8001e948:	4789                	li	a5,2
    8001e94a:	00f70c63          	beq	a4,a5,8001e962 <time_test_9+0xbe>
    8001e94e:	00010517          	auipc	a0,0x10
    8001e952:	8b250513          	addi	a0,a0,-1870 # 8002e200 <__func__.0+0x318>
    8001e956:	2d50c0ef          	jal	8002b42a <printf>
    8001e95a:	02900513          	li	a0,41
    8001e95e:	7ba0b0ef          	jal	8002a118 <putchar>
    8001e962:	4529                	li	a0,10
    8001e964:	7b40b0ef          	jal	8002a118 <putchar>
    8001e968:	00039417          	auipc	s0,0x39
    8001e96c:	6a944403          	lbu	s0,1705(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e970:	00010597          	auipc	a1,0x10
    8001e974:	84858593          	addi	a1,a1,-1976 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e978:	cc11                	beqz	s0,8001e994 <time_test_9+0xf0>
    8001e97a:	6498                	ld	a4,8(s1)
    8001e97c:	4789                	li	a5,2
    TEST_END(); 
    8001e97e:	00010597          	auipc	a1,0x10
    8001e982:	82a58593          	addi	a1,a1,-2006 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e986:	00f70763          	beq	a4,a5,8001e994 <time_test_9+0xf0>
    8001e98a:	4401                	li	s0,0
    TEST_END(); 
    8001e98c:	00010597          	auipc	a1,0x10
    8001e990:	82c58593          	addi	a1,a1,-2004 # 8002e1b8 <__func__.0+0x2d0>
    8001e994:	00010517          	auipc	a0,0x10
    8001e998:	8cc50513          	addi	a0,a0,-1844 # 8002e260 <__func__.0+0x378>
    8001e99c:	28f0c0ef          	jal	8002b42a <printf>
    8001e9a0:	4511                	li	a0,4
    8001e9a2:	d66e20ef          	jal	80000f08 <goto_priv>
    8001e9a6:	e7fe20ef          	jal	80001824 <reset_state>
}
    8001e9aa:	60e2                	ld	ra,24(sp)
    8001e9ac:	8522                	mv	a0,s0
    8001e9ae:	6442                	ld	s0,16(sp)
    8001e9b0:	64a2                	ld	s1,8(sp)
    8001e9b2:	6105                	addi	sp,sp,32
    8001e9b4:	8082                	ret

000000008001e9b6 <time_test_10>:

bool time_test_10() {
    8001e9b6:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e9b8:	0000f597          	auipc	a1,0xf
    8001e9bc:	cf858593          	addi	a1,a1,-776 # 8002d6b0 <__func__.41>
    8001e9c0:	00010517          	auipc	a0,0x10
    8001e9c4:	80850513          	addi	a0,a0,-2040 # 8002e1c8 <__func__.0+0x2e0>
bool time_test_10() {
    8001e9c8:	e406                	sd	ra,8(sp)
    8001e9ca:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e9cc:	25f0c0ef          	jal	8002b42a <printf>
    8001e9d0:	4529                	li	a0,10
    8001e9d2:	7460b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001e9d6:	4511                	li	a0,4
    8001e9d8:	d30e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e9dc:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e9e0:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e9e4:	4509                	li	a0,2
    8001e9e6:	d22e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e9ea:	c22e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e9ee:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001e9f2:	08200593          	li	a1,130
    8001e9f6:	00017617          	auipc	a2,0x17
    8001e9fa:	d4a60613          	addi	a2,a2,-694 # 80035740 <__func__.0+0x7858>
    8001e9fe:	0000f517          	auipc	a0,0xf
    8001ea02:	7e250513          	addi	a0,a0,2018 # 8002e1e0 <__func__.0+0x2f8>
    8001ea06:	2250c0ef          	jal	8002b42a <printf>
    8001ea0a:	00039797          	auipc	a5,0x39
    8001ea0e:	6077c783          	lbu	a5,1543(a5) # 80058011 <excpt+0x1>
    8001ea12:	0000f597          	auipc	a1,0xf
    8001ea16:	79658593          	addi	a1,a1,1942 # 8002e1a8 <__func__.0+0x2c0>
    8001ea1a:	c789                	beqz	a5,8001ea24 <time_test_10+0x6e>
    8001ea1c:	0000f597          	auipc	a1,0xf
    8001ea20:	79c58593          	addi	a1,a1,1948 # 8002e1b8 <__func__.0+0x2d0>
    8001ea24:	0000f517          	auipc	a0,0xf
    8001ea28:	7d450513          	addi	a0,a0,2004 # 8002e1f8 <__func__.0+0x310>
    8001ea2c:	1ff0c0ef          	jal	8002b42a <printf>
    8001ea30:	00039797          	auipc	a5,0x39
    8001ea34:	5e17c783          	lbu	a5,1505(a5) # 80058011 <excpt+0x1>
    8001ea38:	e7a1                	bnez	a5,8001ea80 <time_test_10+0xca>
    8001ea3a:	4529                	li	a0,10
    8001ea3c:	6dc0b0ef          	jal	8002a118 <putchar>
    8001ea40:	00039797          	auipc	a5,0x39
    8001ea44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    8001ea48:	e795                	bnez	a5,8001ea74 <time_test_10+0xbe>
    8001ea4a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001ea4c:	0000f597          	auipc	a1,0xf
    8001ea50:	75c58593          	addi	a1,a1,1884 # 8002e1a8 <__func__.0+0x2c0>
    8001ea54:	00010517          	auipc	a0,0x10
    8001ea58:	80c50513          	addi	a0,a0,-2036 # 8002e260 <__func__.0+0x378>
    8001ea5c:	1cf0c0ef          	jal	8002b42a <printf>
    8001ea60:	4511                	li	a0,4
    8001ea62:	ca6e20ef          	jal	80000f08 <goto_priv>
    8001ea66:	dbfe20ef          	jal	80001824 <reset_state>
}
    8001ea6a:	60a2                	ld	ra,8(sp)
    8001ea6c:	8522                	mv	a0,s0
    8001ea6e:	6402                	ld	s0,0(sp)
    8001ea70:	0141                	addi	sp,sp,16
    8001ea72:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ea74:	4401                	li	s0,0
    TEST_END(); 
    8001ea76:	0000f597          	auipc	a1,0xf
    8001ea7a:	74258593          	addi	a1,a1,1858 # 8002e1b8 <__func__.0+0x2d0>
    8001ea7e:	bfd9                	j	8001ea54 <time_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ea80:	0000f517          	auipc	a0,0xf
    8001ea84:	78050513          	addi	a0,a0,1920 # 8002e200 <__func__.0+0x318>
    8001ea88:	1a30c0ef          	jal	8002b42a <printf>
    8001ea8c:	02900513          	li	a0,41
    8001ea90:	6880b0ef          	jal	8002a118 <putchar>
    8001ea94:	b75d                	j	8001ea3a <time_test_10+0x84>

000000008001ea96 <cycle_test_1>:


bool cycle_test_1() {
    8001ea96:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ea98:	0000f597          	auipc	a1,0xf
    8001ea9c:	c2858593          	addi	a1,a1,-984 # 8002d6c0 <__func__.40>
    8001eaa0:	0000f517          	auipc	a0,0xf
    8001eaa4:	72850513          	addi	a0,a0,1832 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_1() {
    8001eaa8:	ec06                	sd	ra,24(sp)
    8001eaaa:	e822                	sd	s0,16(sp)
    8001eaac:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001eaae:	17d0c0ef          	jal	8002b42a <printf>
    8001eab2:	4529                	li	a0,10
    8001eab4:	6640b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001eab8:	4511                	li	a0,4
    8001eaba:	c4ee20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001eabe:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001eac2:	4509                	li	a0,2
    8001eac4:	c44e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eac8:	b44e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eacc:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ead0:	08200593          	li	a1,130
    8001ead4:	00017617          	auipc	a2,0x17
    8001ead8:	cbc60613          	addi	a2,a2,-836 # 80035790 <__func__.0+0x78a8>
    8001eadc:	0000f517          	auipc	a0,0xf
    8001eae0:	70450513          	addi	a0,a0,1796 # 8002e1e0 <__func__.0+0x2f8>
    8001eae4:	1470c0ef          	jal	8002b42a <printf>
    8001eae8:	00039797          	auipc	a5,0x39
    8001eaec:	5297c783          	lbu	a5,1321(a5) # 80058011 <excpt+0x1>
    8001eaf0:	00039497          	auipc	s1,0x39
    8001eaf4:	52048493          	addi	s1,s1,1312 # 80058010 <excpt>
    8001eaf8:	0000f597          	auipc	a1,0xf
    8001eafc:	6c058593          	addi	a1,a1,1728 # 8002e1b8 <__func__.0+0x2d0>
    8001eb00:	cf89                	beqz	a5,8001eb1a <cycle_test_1+0x84>
    8001eb02:	6498                	ld	a4,8(s1)
    8001eb04:	4789                	li	a5,2
    8001eb06:	0000f597          	auipc	a1,0xf
    8001eb0a:	6a258593          	addi	a1,a1,1698 # 8002e1a8 <__func__.0+0x2c0>
    8001eb0e:	00f70663          	beq	a4,a5,8001eb1a <cycle_test_1+0x84>
    8001eb12:	0000f597          	auipc	a1,0xf
    8001eb16:	6a658593          	addi	a1,a1,1702 # 8002e1b8 <__func__.0+0x2d0>
    8001eb1a:	0000f517          	auipc	a0,0xf
    8001eb1e:	6de50513          	addi	a0,a0,1758 # 8002e1f8 <__func__.0+0x310>
    8001eb22:	1090c0ef          	jal	8002b42a <printf>
    8001eb26:	00039797          	auipc	a5,0x39
    8001eb2a:	4eb7c783          	lbu	a5,1259(a5) # 80058011 <excpt+0x1>
    8001eb2e:	c789                	beqz	a5,8001eb38 <cycle_test_1+0xa2>
    8001eb30:	6498                	ld	a4,8(s1)
    8001eb32:	4789                	li	a5,2
    8001eb34:	00f70c63          	beq	a4,a5,8001eb4c <cycle_test_1+0xb6>
    8001eb38:	0000f517          	auipc	a0,0xf
    8001eb3c:	6c850513          	addi	a0,a0,1736 # 8002e200 <__func__.0+0x318>
    8001eb40:	0eb0c0ef          	jal	8002b42a <printf>
    8001eb44:	02900513          	li	a0,41
    8001eb48:	5d00b0ef          	jal	8002a118 <putchar>
    8001eb4c:	4529                	li	a0,10
    8001eb4e:	5ca0b0ef          	jal	8002a118 <putchar>
    8001eb52:	00039797          	auipc	a5,0x39
    8001eb56:	4bf7c783          	lbu	a5,1215(a5) # 80058011 <excpt+0x1>
    8001eb5a:	4401                	li	s0,0
    8001eb5c:	c789                	beqz	a5,8001eb66 <cycle_test_1+0xd0>
    8001eb5e:	6480                	ld	s0,8(s1)
    8001eb60:	1479                	addi	s0,s0,-2
    8001eb62:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001eb66:	450d                	li	a0,3
    8001eb68:	ba0e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb6c:	aa0e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eb70:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eb74:	08200593          	li	a1,130
    8001eb78:	00017617          	auipc	a2,0x17
    8001eb7c:	c6860613          	addi	a2,a2,-920 # 800357e0 <__func__.0+0x78f8>
    8001eb80:	0000f517          	auipc	a0,0xf
    8001eb84:	66050513          	addi	a0,a0,1632 # 8002e1e0 <__func__.0+0x2f8>
    8001eb88:	0a30c0ef          	jal	8002b42a <printf>
    8001eb8c:	00039797          	auipc	a5,0x39
    8001eb90:	4857c783          	lbu	a5,1157(a5) # 80058011 <excpt+0x1>
    8001eb94:	0000f597          	auipc	a1,0xf
    8001eb98:	62458593          	addi	a1,a1,1572 # 8002e1b8 <__func__.0+0x2d0>
    8001eb9c:	cf89                	beqz	a5,8001ebb6 <cycle_test_1+0x120>
    8001eb9e:	6498                	ld	a4,8(s1)
    8001eba0:	4789                	li	a5,2
    8001eba2:	0000f597          	auipc	a1,0xf
    8001eba6:	60658593          	addi	a1,a1,1542 # 8002e1a8 <__func__.0+0x2c0>
    8001ebaa:	00f70663          	beq	a4,a5,8001ebb6 <cycle_test_1+0x120>
    8001ebae:	0000f597          	auipc	a1,0xf
    8001ebb2:	60a58593          	addi	a1,a1,1546 # 8002e1b8 <__func__.0+0x2d0>
    8001ebb6:	0000f517          	auipc	a0,0xf
    8001ebba:	64250513          	addi	a0,a0,1602 # 8002e1f8 <__func__.0+0x310>
    8001ebbe:	06d0c0ef          	jal	8002b42a <printf>
    8001ebc2:	00039797          	auipc	a5,0x39
    8001ebc6:	44f7c783          	lbu	a5,1103(a5) # 80058011 <excpt+0x1>
    8001ebca:	c789                	beqz	a5,8001ebd4 <cycle_test_1+0x13e>
    8001ebcc:	6498                	ld	a4,8(s1)
    8001ebce:	4789                	li	a5,2
    8001ebd0:	00f70c63          	beq	a4,a5,8001ebe8 <cycle_test_1+0x152>
    8001ebd4:	0000f517          	auipc	a0,0xf
    8001ebd8:	62c50513          	addi	a0,a0,1580 # 8002e200 <__func__.0+0x318>
    8001ebdc:	04f0c0ef          	jal	8002b42a <printf>
    8001ebe0:	02900513          	li	a0,41
    8001ebe4:	5340b0ef          	jal	8002a118 <putchar>
    8001ebe8:	4529                	li	a0,10
    8001ebea:	52e0b0ef          	jal	8002a118 <putchar>
    8001ebee:	c801                	beqz	s0,8001ebfe <cycle_test_1+0x168>
    8001ebf0:	00039797          	auipc	a5,0x39
    8001ebf4:	4217c783          	lbu	a5,1057(a5) # 80058011 <excpt+0x1>
    8001ebf8:	4401                	li	s0,0
    8001ebfa:	16079f63          	bnez	a5,8001ed78 <cycle_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001ebfe:	4501                	li	a0,0
    8001ec00:	b08e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec04:	a08e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ec08:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec0c:	08200593          	li	a1,130
    8001ec10:	00017617          	auipc	a2,0x17
    8001ec14:	c2060613          	addi	a2,a2,-992 # 80035830 <__func__.0+0x7948>
    8001ec18:	0000f517          	auipc	a0,0xf
    8001ec1c:	5c850513          	addi	a0,a0,1480 # 8002e1e0 <__func__.0+0x2f8>
    8001ec20:	00b0c0ef          	jal	8002b42a <printf>
    8001ec24:	00039797          	auipc	a5,0x39
    8001ec28:	3ed7c783          	lbu	a5,1005(a5) # 80058011 <excpt+0x1>
    8001ec2c:	0000f597          	auipc	a1,0xf
    8001ec30:	58c58593          	addi	a1,a1,1420 # 8002e1b8 <__func__.0+0x2d0>
    8001ec34:	cf89                	beqz	a5,8001ec4e <cycle_test_1+0x1b8>
    8001ec36:	6498                	ld	a4,8(s1)
    8001ec38:	4789                	li	a5,2
    8001ec3a:	0000f597          	auipc	a1,0xf
    8001ec3e:	56e58593          	addi	a1,a1,1390 # 8002e1a8 <__func__.0+0x2c0>
    8001ec42:	00f70663          	beq	a4,a5,8001ec4e <cycle_test_1+0x1b8>
    8001ec46:	0000f597          	auipc	a1,0xf
    8001ec4a:	57258593          	addi	a1,a1,1394 # 8002e1b8 <__func__.0+0x2d0>
    8001ec4e:	0000f517          	auipc	a0,0xf
    8001ec52:	5aa50513          	addi	a0,a0,1450 # 8002e1f8 <__func__.0+0x310>
    8001ec56:	7d40c0ef          	jal	8002b42a <printf>
    8001ec5a:	00039797          	auipc	a5,0x39
    8001ec5e:	3b77c783          	lbu	a5,951(a5) # 80058011 <excpt+0x1>
    8001ec62:	c789                	beqz	a5,8001ec6c <cycle_test_1+0x1d6>
    8001ec64:	6498                	ld	a4,8(s1)
    8001ec66:	4789                	li	a5,2
    8001ec68:	00f70c63          	beq	a4,a5,8001ec80 <cycle_test_1+0x1ea>
    8001ec6c:	0000f517          	auipc	a0,0xf
    8001ec70:	59450513          	addi	a0,a0,1428 # 8002e200 <__func__.0+0x318>
    8001ec74:	7b60c0ef          	jal	8002b42a <printf>
    8001ec78:	02900513          	li	a0,41
    8001ec7c:	49c0b0ef          	jal	8002a118 <putchar>
    8001ec80:	4529                	li	a0,10
    8001ec82:	4960b0ef          	jal	8002a118 <putchar>
    8001ec86:	c801                	beqz	s0,8001ec96 <cycle_test_1+0x200>
    8001ec88:	00039797          	auipc	a5,0x39
    8001ec8c:	3897c783          	lbu	a5,905(a5) # 80058011 <excpt+0x1>
    8001ec90:	4401                	li	s0,0
    8001ec92:	0c079e63          	bnez	a5,8001ed6e <cycle_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001ec96:	4505                	li	a0,1
    8001ec98:	a70e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec9c:	970e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eca0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eca4:	08200593          	li	a1,130
    8001eca8:	00017617          	auipc	a2,0x17
    8001ecac:	bd860613          	addi	a2,a2,-1064 # 80035880 <__func__.0+0x7998>
    8001ecb0:	0000f517          	auipc	a0,0xf
    8001ecb4:	53050513          	addi	a0,a0,1328 # 8002e1e0 <__func__.0+0x2f8>
    8001ecb8:	7720c0ef          	jal	8002b42a <printf>
    8001ecbc:	00039797          	auipc	a5,0x39
    8001ecc0:	3557c783          	lbu	a5,853(a5) # 80058011 <excpt+0x1>
    8001ecc4:	0000f597          	auipc	a1,0xf
    8001ecc8:	4f458593          	addi	a1,a1,1268 # 8002e1b8 <__func__.0+0x2d0>
    8001eccc:	cf89                	beqz	a5,8001ece6 <cycle_test_1+0x250>
    8001ecce:	6498                	ld	a4,8(s1)
    8001ecd0:	4789                	li	a5,2
    8001ecd2:	0000f597          	auipc	a1,0xf
    8001ecd6:	4d658593          	addi	a1,a1,1238 # 8002e1a8 <__func__.0+0x2c0>
    8001ecda:	00f70663          	beq	a4,a5,8001ece6 <cycle_test_1+0x250>
    8001ecde:	0000f597          	auipc	a1,0xf
    8001ece2:	4da58593          	addi	a1,a1,1242 # 8002e1b8 <__func__.0+0x2d0>
    8001ece6:	0000f517          	auipc	a0,0xf
    8001ecea:	51250513          	addi	a0,a0,1298 # 8002e1f8 <__func__.0+0x310>
    8001ecee:	73c0c0ef          	jal	8002b42a <printf>
    8001ecf2:	00039797          	auipc	a5,0x39
    8001ecf6:	31f7c783          	lbu	a5,799(a5) # 80058011 <excpt+0x1>
    8001ecfa:	c789                	beqz	a5,8001ed04 <cycle_test_1+0x26e>
    8001ecfc:	6498                	ld	a4,8(s1)
    8001ecfe:	4789                	li	a5,2
    8001ed00:	00f70c63          	beq	a4,a5,8001ed18 <cycle_test_1+0x282>
    8001ed04:	0000f517          	auipc	a0,0xf
    8001ed08:	4fc50513          	addi	a0,a0,1276 # 8002e200 <__func__.0+0x318>
    8001ed0c:	71e0c0ef          	jal	8002b42a <printf>
    8001ed10:	02900513          	li	a0,41
    8001ed14:	4040b0ef          	jal	8002a118 <putchar>
    8001ed18:	4529                	li	a0,10
    8001ed1a:	3fe0b0ef          	jal	8002a118 <putchar>
    8001ed1e:	c015                	beqz	s0,8001ed42 <cycle_test_1+0x2ac>
    8001ed20:	00039417          	auipc	s0,0x39
    8001ed24:	2f144403          	lbu	s0,753(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ed28:	0000f597          	auipc	a1,0xf
    8001ed2c:	49058593          	addi	a1,a1,1168 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed30:	cc11                	beqz	s0,8001ed4c <cycle_test_1+0x2b6>
    8001ed32:	6498                	ld	a4,8(s1)
    8001ed34:	4789                	li	a5,2
    TEST_END(); 
    8001ed36:	0000f597          	auipc	a1,0xf
    8001ed3a:	47258593          	addi	a1,a1,1138 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed3e:	00f70763          	beq	a4,a5,8001ed4c <cycle_test_1+0x2b6>
    8001ed42:	4401                	li	s0,0
    TEST_END(); 
    8001ed44:	0000f597          	auipc	a1,0xf
    8001ed48:	47458593          	addi	a1,a1,1140 # 8002e1b8 <__func__.0+0x2d0>
    8001ed4c:	0000f517          	auipc	a0,0xf
    8001ed50:	51450513          	addi	a0,a0,1300 # 8002e260 <__func__.0+0x378>
    8001ed54:	6d60c0ef          	jal	8002b42a <printf>
    8001ed58:	4511                	li	a0,4
    8001ed5a:	9aee20ef          	jal	80000f08 <goto_priv>
    8001ed5e:	ac7e20ef          	jal	80001824 <reset_state>
}
    8001ed62:	60e2                	ld	ra,24(sp)
    8001ed64:	8522                	mv	a0,s0
    8001ed66:	6442                	ld	s0,16(sp)
    8001ed68:	64a2                	ld	s1,8(sp)
    8001ed6a:	6105                	addi	sp,sp,32
    8001ed6c:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed6e:	6480                	ld	s0,8(s1)
    8001ed70:	1479                	addi	s0,s0,-2
    8001ed72:	00143413          	seqz	s0,s0
    8001ed76:	b705                	j	8001ec96 <cycle_test_1+0x200>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed78:	6480                	ld	s0,8(s1)
    8001ed7a:	1479                	addi	s0,s0,-2
    8001ed7c:	00143413          	seqz	s0,s0
    8001ed80:	bdbd                	j	8001ebfe <cycle_test_1+0x168>

000000008001ed82 <cycle_test_2>:

bool cycle_test_2() {
    8001ed82:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ed84:	0000f597          	auipc	a1,0xf
    8001ed88:	94c58593          	addi	a1,a1,-1716 # 8002d6d0 <__func__.39>
    8001ed8c:	0000f517          	auipc	a0,0xf
    8001ed90:	43c50513          	addi	a0,a0,1084 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_2() {
    8001ed94:	e406                	sd	ra,8(sp)
    8001ed96:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ed98:	6920c0ef          	jal	8002b42a <printf>
    8001ed9c:	4529                	li	a0,10
    8001ed9e:	37a0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001eda2:	4511                	li	a0,4
    8001eda4:	964e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001eda8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001edac:	450d                	li	a0,3
    8001edae:	95ae20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001edb2:	85ae20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001edb6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001edba:	08200593          	li	a1,130
    8001edbe:	00017617          	auipc	a2,0x17
    8001edc2:	b1260613          	addi	a2,a2,-1262 # 800358d0 <__func__.0+0x79e8>
    8001edc6:	0000f517          	auipc	a0,0xf
    8001edca:	41a50513          	addi	a0,a0,1050 # 8002e1e0 <__func__.0+0x2f8>
    8001edce:	65c0c0ef          	jal	8002b42a <printf>
    8001edd2:	00039797          	auipc	a5,0x39
    8001edd6:	23f7c783          	lbu	a5,575(a5) # 80058011 <excpt+0x1>
    8001edda:	0000f597          	auipc	a1,0xf
    8001edde:	3ce58593          	addi	a1,a1,974 # 8002e1a8 <__func__.0+0x2c0>
    8001ede2:	c789                	beqz	a5,8001edec <cycle_test_2+0x6a>
    8001ede4:	0000f597          	auipc	a1,0xf
    8001ede8:	3d458593          	addi	a1,a1,980 # 8002e1b8 <__func__.0+0x2d0>
    8001edec:	0000f517          	auipc	a0,0xf
    8001edf0:	40c50513          	addi	a0,a0,1036 # 8002e1f8 <__func__.0+0x310>
    8001edf4:	6360c0ef          	jal	8002b42a <printf>
    8001edf8:	00039797          	auipc	a5,0x39
    8001edfc:	2197c783          	lbu	a5,537(a5) # 80058011 <excpt+0x1>
    8001ee00:	e7a1                	bnez	a5,8001ee48 <cycle_test_2+0xc6>
    8001ee02:	4529                	li	a0,10
    8001ee04:	3140b0ef          	jal	8002a118 <putchar>
    8001ee08:	00039797          	auipc	a5,0x39
    8001ee0c:	2097c783          	lbu	a5,521(a5) # 80058011 <excpt+0x1>
    8001ee10:	e795                	bnez	a5,8001ee3c <cycle_test_2+0xba>
    8001ee12:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001ee14:	0000f597          	auipc	a1,0xf
    8001ee18:	39458593          	addi	a1,a1,916 # 8002e1a8 <__func__.0+0x2c0>
    8001ee1c:	0000f517          	auipc	a0,0xf
    8001ee20:	44450513          	addi	a0,a0,1092 # 8002e260 <__func__.0+0x378>
    8001ee24:	6060c0ef          	jal	8002b42a <printf>
    8001ee28:	4511                	li	a0,4
    8001ee2a:	8dee20ef          	jal	80000f08 <goto_priv>
    8001ee2e:	9f7e20ef          	jal	80001824 <reset_state>
}
    8001ee32:	60a2                	ld	ra,8(sp)
    8001ee34:	8522                	mv	a0,s0
    8001ee36:	6402                	ld	s0,0(sp)
    8001ee38:	0141                	addi	sp,sp,16
    8001ee3a:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ee3c:	4401                	li	s0,0
    TEST_END(); 
    8001ee3e:	0000f597          	auipc	a1,0xf
    8001ee42:	37a58593          	addi	a1,a1,890 # 8002e1b8 <__func__.0+0x2d0>
    8001ee46:	bfd9                	j	8001ee1c <cycle_test_2+0x9a>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ee48:	0000f517          	auipc	a0,0xf
    8001ee4c:	3b850513          	addi	a0,a0,952 # 8002e200 <__func__.0+0x318>
    8001ee50:	5da0c0ef          	jal	8002b42a <printf>
    8001ee54:	02900513          	li	a0,41
    8001ee58:	2c00b0ef          	jal	8002a118 <putchar>
    8001ee5c:	b75d                	j	8001ee02 <cycle_test_2+0x80>

000000008001ee5e <cycle_test_3>:

bool cycle_test_3() {
    8001ee5e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ee60:	0000f597          	auipc	a1,0xf
    8001ee64:	88058593          	addi	a1,a1,-1920 # 8002d6e0 <__func__.38>
    8001ee68:	0000f517          	auipc	a0,0xf
    8001ee6c:	36050513          	addi	a0,a0,864 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_3() {
    8001ee70:	ec06                	sd	ra,24(sp)
    8001ee72:	e822                	sd	s0,16(sp)
    8001ee74:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ee76:	5b40c0ef          	jal	8002b42a <printf>
    8001ee7a:	4529                	li	a0,10
    8001ee7c:	29c0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001ee80:	4511                	li	a0,4
    8001ee82:	886e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001ee86:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001ee8a:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001ee8e:	4505                	li	a0,1
    8001ee90:	878e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ee94:	f79e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ee98:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ee9c:	08200593          	li	a1,130
    8001eea0:	00017617          	auipc	a2,0x17
    8001eea4:	a6860613          	addi	a2,a2,-1432 # 80035908 <__func__.0+0x7a20>
    8001eea8:	0000f517          	auipc	a0,0xf
    8001eeac:	33850513          	addi	a0,a0,824 # 8002e1e0 <__func__.0+0x2f8>
    8001eeb0:	57a0c0ef          	jal	8002b42a <printf>
    8001eeb4:	00039797          	auipc	a5,0x39
    8001eeb8:	15d7c783          	lbu	a5,349(a5) # 80058011 <excpt+0x1>
    8001eebc:	00039497          	auipc	s1,0x39
    8001eec0:	15448493          	addi	s1,s1,340 # 80058010 <excpt>
    8001eec4:	0000f597          	auipc	a1,0xf
    8001eec8:	2f458593          	addi	a1,a1,756 # 8002e1b8 <__func__.0+0x2d0>
    8001eecc:	cf89                	beqz	a5,8001eee6 <cycle_test_3+0x88>
    8001eece:	6498                	ld	a4,8(s1)
    8001eed0:	4789                	li	a5,2
    8001eed2:	0000f597          	auipc	a1,0xf
    8001eed6:	2d658593          	addi	a1,a1,726 # 8002e1a8 <__func__.0+0x2c0>
    8001eeda:	00f70663          	beq	a4,a5,8001eee6 <cycle_test_3+0x88>
    8001eede:	0000f597          	auipc	a1,0xf
    8001eee2:	2da58593          	addi	a1,a1,730 # 8002e1b8 <__func__.0+0x2d0>
    8001eee6:	0000f517          	auipc	a0,0xf
    8001eeea:	31250513          	addi	a0,a0,786 # 8002e1f8 <__func__.0+0x310>
    8001eeee:	53c0c0ef          	jal	8002b42a <printf>
    8001eef2:	00039797          	auipc	a5,0x39
    8001eef6:	11f7c783          	lbu	a5,287(a5) # 80058011 <excpt+0x1>
    8001eefa:	c789                	beqz	a5,8001ef04 <cycle_test_3+0xa6>
    8001eefc:	6498                	ld	a4,8(s1)
    8001eefe:	4789                	li	a5,2
    8001ef00:	00f70c63          	beq	a4,a5,8001ef18 <cycle_test_3+0xba>
    8001ef04:	0000f517          	auipc	a0,0xf
    8001ef08:	2fc50513          	addi	a0,a0,764 # 8002e200 <__func__.0+0x318>
    8001ef0c:	51e0c0ef          	jal	8002b42a <printf>
    8001ef10:	02900513          	li	a0,41
    8001ef14:	2040b0ef          	jal	8002a118 <putchar>
    8001ef18:	4529                	li	a0,10
    8001ef1a:	1fe0b0ef          	jal	8002a118 <putchar>
    8001ef1e:	00039417          	auipc	s0,0x39
    8001ef22:	0f344403          	lbu	s0,243(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ef26:	0000f597          	auipc	a1,0xf
    8001ef2a:	29258593          	addi	a1,a1,658 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ef2e:	cc11                	beqz	s0,8001ef4a <cycle_test_3+0xec>
    8001ef30:	6498                	ld	a4,8(s1)
    8001ef32:	4789                	li	a5,2
    TEST_END(); 
    8001ef34:	0000f597          	auipc	a1,0xf
    8001ef38:	27458593          	addi	a1,a1,628 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ef3c:	00f70763          	beq	a4,a5,8001ef4a <cycle_test_3+0xec>
    8001ef40:	4401                	li	s0,0
    TEST_END(); 
    8001ef42:	0000f597          	auipc	a1,0xf
    8001ef46:	27658593          	addi	a1,a1,630 # 8002e1b8 <__func__.0+0x2d0>
    8001ef4a:	0000f517          	auipc	a0,0xf
    8001ef4e:	31650513          	addi	a0,a0,790 # 8002e260 <__func__.0+0x378>
    8001ef52:	4d80c0ef          	jal	8002b42a <printf>
    8001ef56:	4511                	li	a0,4
    8001ef58:	fb1e10ef          	jal	80000f08 <goto_priv>
    8001ef5c:	8c9e20ef          	jal	80001824 <reset_state>
}
    8001ef60:	60e2                	ld	ra,24(sp)
    8001ef62:	8522                	mv	a0,s0
    8001ef64:	6442                	ld	s0,16(sp)
    8001ef66:	64a2                	ld	s1,8(sp)
    8001ef68:	6105                	addi	sp,sp,32
    8001ef6a:	8082                	ret

000000008001ef6c <cycle_test_4>:

bool cycle_test_4() {
    8001ef6c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ef6e:	0000e597          	auipc	a1,0xe
    8001ef72:	78258593          	addi	a1,a1,1922 # 8002d6f0 <__func__.37>
    8001ef76:	0000f517          	auipc	a0,0xf
    8001ef7a:	25250513          	addi	a0,a0,594 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_4() {
    8001ef7e:	e406                	sd	ra,8(sp)
    8001ef80:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ef82:	4a80c0ef          	jal	8002b42a <printf>
    8001ef86:	4529                	li	a0,10
    8001ef88:	1900b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001ef8c:	4511                	li	a0,4
    8001ef8e:	f7be10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001ef92:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001ef96:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001ef9a:	4505                	li	a0,1
    8001ef9c:	f6de10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001efa0:	e6de10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001efa4:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001efa8:	08200593          	li	a1,130
    8001efac:	00017617          	auipc	a2,0x17
    8001efb0:	9ac60613          	addi	a2,a2,-1620 # 80035958 <__func__.0+0x7a70>
    8001efb4:	0000f517          	auipc	a0,0xf
    8001efb8:	22c50513          	addi	a0,a0,556 # 8002e1e0 <__func__.0+0x2f8>
    8001efbc:	46e0c0ef          	jal	8002b42a <printf>
    8001efc0:	00039797          	auipc	a5,0x39
    8001efc4:	0517c783          	lbu	a5,81(a5) # 80058011 <excpt+0x1>
    8001efc8:	0000f597          	auipc	a1,0xf
    8001efcc:	1e058593          	addi	a1,a1,480 # 8002e1a8 <__func__.0+0x2c0>
    8001efd0:	c789                	beqz	a5,8001efda <cycle_test_4+0x6e>
    8001efd2:	0000f597          	auipc	a1,0xf
    8001efd6:	1e658593          	addi	a1,a1,486 # 8002e1b8 <__func__.0+0x2d0>
    8001efda:	0000f517          	auipc	a0,0xf
    8001efde:	21e50513          	addi	a0,a0,542 # 8002e1f8 <__func__.0+0x310>
    8001efe2:	4480c0ef          	jal	8002b42a <printf>
    8001efe6:	00039797          	auipc	a5,0x39
    8001efea:	02b7c783          	lbu	a5,43(a5) # 80058011 <excpt+0x1>
    8001efee:	e7a1                	bnez	a5,8001f036 <cycle_test_4+0xca>
    8001eff0:	4529                	li	a0,10
    8001eff2:	1260b0ef          	jal	8002a118 <putchar>
    8001eff6:	00039797          	auipc	a5,0x39
    8001effa:	01b7c783          	lbu	a5,27(a5) # 80058011 <excpt+0x1>
    8001effe:	e795                	bnez	a5,8001f02a <cycle_test_4+0xbe>
    8001f000:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f002:	0000f597          	auipc	a1,0xf
    8001f006:	1a658593          	addi	a1,a1,422 # 8002e1a8 <__func__.0+0x2c0>
    8001f00a:	0000f517          	auipc	a0,0xf
    8001f00e:	25650513          	addi	a0,a0,598 # 8002e260 <__func__.0+0x378>
    8001f012:	4180c0ef          	jal	8002b42a <printf>
    8001f016:	4511                	li	a0,4
    8001f018:	ef1e10ef          	jal	80000f08 <goto_priv>
    8001f01c:	809e20ef          	jal	80001824 <reset_state>
}
    8001f020:	60a2                	ld	ra,8(sp)
    8001f022:	8522                	mv	a0,s0
    8001f024:	6402                	ld	s0,0(sp)
    8001f026:	0141                	addi	sp,sp,16
    8001f028:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f02a:	4401                	li	s0,0
    TEST_END(); 
    8001f02c:	0000f597          	auipc	a1,0xf
    8001f030:	18c58593          	addi	a1,a1,396 # 8002e1b8 <__func__.0+0x2d0>
    8001f034:	bfd9                	j	8001f00a <cycle_test_4+0x9e>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f036:	0000f517          	auipc	a0,0xf
    8001f03a:	1ca50513          	addi	a0,a0,458 # 8002e200 <__func__.0+0x318>
    8001f03e:	3ec0c0ef          	jal	8002b42a <printf>
    8001f042:	02900513          	li	a0,41
    8001f046:	0d20b0ef          	jal	8002a118 <putchar>
    8001f04a:	b75d                	j	8001eff0 <cycle_test_4+0x84>

000000008001f04c <cycle_test_5>:

bool cycle_test_5() {
    8001f04c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f04e:	0000e597          	auipc	a1,0xe
    8001f052:	6b258593          	addi	a1,a1,1714 # 8002d700 <__func__.36>
    8001f056:	0000f517          	auipc	a0,0xf
    8001f05a:	17250513          	addi	a0,a0,370 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_5() {
    8001f05e:	ec06                	sd	ra,24(sp)
    8001f060:	e822                	sd	s0,16(sp)
    8001f062:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f064:	3c60c0ef          	jal	8002b42a <printf>
    8001f068:	4529                	li	a0,10
    8001f06a:	0ae0b0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f06e:	4511                	li	a0,4
    8001f070:	e99e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f074:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f078:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f07c:	4509                	li	a0,2
    8001f07e:	e8be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f082:	d8be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f086:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f08a:	08200593          	li	a1,130
    8001f08e:	00017617          	auipc	a2,0x17
    8001f092:	91260613          	addi	a2,a2,-1774 # 800359a0 <__func__.0+0x7ab8>
    8001f096:	0000f517          	auipc	a0,0xf
    8001f09a:	14a50513          	addi	a0,a0,330 # 8002e1e0 <__func__.0+0x2f8>
    8001f09e:	38c0c0ef          	jal	8002b42a <printf>
    8001f0a2:	00039797          	auipc	a5,0x39
    8001f0a6:	f6f7c783          	lbu	a5,-145(a5) # 80058011 <excpt+0x1>
    8001f0aa:	00039497          	auipc	s1,0x39
    8001f0ae:	f6648493          	addi	s1,s1,-154 # 80058010 <excpt>
    8001f0b2:	0000f597          	auipc	a1,0xf
    8001f0b6:	10658593          	addi	a1,a1,262 # 8002e1b8 <__func__.0+0x2d0>
    8001f0ba:	cf89                	beqz	a5,8001f0d4 <cycle_test_5+0x88>
    8001f0bc:	6498                	ld	a4,8(s1)
    8001f0be:	47d9                	li	a5,22
    8001f0c0:	0000f597          	auipc	a1,0xf
    8001f0c4:	0e858593          	addi	a1,a1,232 # 8002e1a8 <__func__.0+0x2c0>
    8001f0c8:	00f70663          	beq	a4,a5,8001f0d4 <cycle_test_5+0x88>
    8001f0cc:	0000f597          	auipc	a1,0xf
    8001f0d0:	0ec58593          	addi	a1,a1,236 # 8002e1b8 <__func__.0+0x2d0>
    8001f0d4:	0000f517          	auipc	a0,0xf
    8001f0d8:	12450513          	addi	a0,a0,292 # 8002e1f8 <__func__.0+0x310>
    8001f0dc:	34e0c0ef          	jal	8002b42a <printf>
    8001f0e0:	00039797          	auipc	a5,0x39
    8001f0e4:	f317c783          	lbu	a5,-207(a5) # 80058011 <excpt+0x1>
    8001f0e8:	c789                	beqz	a5,8001f0f2 <cycle_test_5+0xa6>
    8001f0ea:	6498                	ld	a4,8(s1)
    8001f0ec:	47d9                	li	a5,22
    8001f0ee:	00f70c63          	beq	a4,a5,8001f106 <cycle_test_5+0xba>
    8001f0f2:	0000f517          	auipc	a0,0xf
    8001f0f6:	10e50513          	addi	a0,a0,270 # 8002e200 <__func__.0+0x318>
    8001f0fa:	3300c0ef          	jal	8002b42a <printf>
    8001f0fe:	02900513          	li	a0,41
    8001f102:	0160b0ef          	jal	8002a118 <putchar>
    8001f106:	4529                	li	a0,10
    8001f108:	0100b0ef          	jal	8002a118 <putchar>
    8001f10c:	00039417          	auipc	s0,0x39
    8001f110:	f0544403          	lbu	s0,-251(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f114:	0000f597          	auipc	a1,0xf
    8001f118:	0a458593          	addi	a1,a1,164 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f11c:	cc11                	beqz	s0,8001f138 <cycle_test_5+0xec>
    8001f11e:	6498                	ld	a4,8(s1)
    8001f120:	47d9                	li	a5,22
    TEST_END(); 
    8001f122:	0000f597          	auipc	a1,0xf
    8001f126:	08658593          	addi	a1,a1,134 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f12a:	00f70763          	beq	a4,a5,8001f138 <cycle_test_5+0xec>
    8001f12e:	4401                	li	s0,0
    TEST_END(); 
    8001f130:	0000f597          	auipc	a1,0xf
    8001f134:	08858593          	addi	a1,a1,136 # 8002e1b8 <__func__.0+0x2d0>
    8001f138:	0000f517          	auipc	a0,0xf
    8001f13c:	12850513          	addi	a0,a0,296 # 8002e260 <__func__.0+0x378>
    8001f140:	2ea0c0ef          	jal	8002b42a <printf>
    8001f144:	4511                	li	a0,4
    8001f146:	dc3e10ef          	jal	80000f08 <goto_priv>
    8001f14a:	edae20ef          	jal	80001824 <reset_state>
}
    8001f14e:	60e2                	ld	ra,24(sp)
    8001f150:	8522                	mv	a0,s0
    8001f152:	6442                	ld	s0,16(sp)
    8001f154:	64a2                	ld	s1,8(sp)
    8001f156:	6105                	addi	sp,sp,32
    8001f158:	8082                	ret

000000008001f15a <cycle_test_6>:

bool cycle_test_6() {
    8001f15a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f15c:	0000e597          	auipc	a1,0xe
    8001f160:	5b458593          	addi	a1,a1,1460 # 8002d710 <__func__.35>
    8001f164:	0000f517          	auipc	a0,0xf
    8001f168:	06450513          	addi	a0,a0,100 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_6() {
    8001f16c:	e406                	sd	ra,8(sp)
    8001f16e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f170:	2ba0c0ef          	jal	8002b42a <printf>
    8001f174:	4529                	li	a0,10
    8001f176:	7a30a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f17a:	4511                	li	a0,4
    8001f17c:	d8de10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f180:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f184:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f188:	4509                	li	a0,2
    8001f18a:	d7fe10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f18e:	c7fe10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f192:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f196:	08200593          	li	a1,130
    8001f19a:	00017617          	auipc	a2,0x17
    8001f19e:	86660613          	addi	a2,a2,-1946 # 80035a00 <__func__.0+0x7b18>
    8001f1a2:	0000f517          	auipc	a0,0xf
    8001f1a6:	03e50513          	addi	a0,a0,62 # 8002e1e0 <__func__.0+0x2f8>
    8001f1aa:	2800c0ef          	jal	8002b42a <printf>
    8001f1ae:	00039797          	auipc	a5,0x39
    8001f1b2:	e637c783          	lbu	a5,-413(a5) # 80058011 <excpt+0x1>
    8001f1b6:	0000f597          	auipc	a1,0xf
    8001f1ba:	ff258593          	addi	a1,a1,-14 # 8002e1a8 <__func__.0+0x2c0>
    8001f1be:	c789                	beqz	a5,8001f1c8 <cycle_test_6+0x6e>
    8001f1c0:	0000f597          	auipc	a1,0xf
    8001f1c4:	ff858593          	addi	a1,a1,-8 # 8002e1b8 <__func__.0+0x2d0>
    8001f1c8:	0000f517          	auipc	a0,0xf
    8001f1cc:	03050513          	addi	a0,a0,48 # 8002e1f8 <__func__.0+0x310>
    8001f1d0:	25a0c0ef          	jal	8002b42a <printf>
    8001f1d4:	00039797          	auipc	a5,0x39
    8001f1d8:	e3d7c783          	lbu	a5,-451(a5) # 80058011 <excpt+0x1>
    8001f1dc:	e7a1                	bnez	a5,8001f224 <cycle_test_6+0xca>
    8001f1de:	4529                	li	a0,10
    8001f1e0:	7390a0ef          	jal	8002a118 <putchar>
    8001f1e4:	00039797          	auipc	a5,0x39
    8001f1e8:	e2d7c783          	lbu	a5,-467(a5) # 80058011 <excpt+0x1>
    8001f1ec:	e795                	bnez	a5,8001f218 <cycle_test_6+0xbe>
    8001f1ee:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f1f0:	0000f597          	auipc	a1,0xf
    8001f1f4:	fb858593          	addi	a1,a1,-72 # 8002e1a8 <__func__.0+0x2c0>
    8001f1f8:	0000f517          	auipc	a0,0xf
    8001f1fc:	06850513          	addi	a0,a0,104 # 8002e260 <__func__.0+0x378>
    8001f200:	22a0c0ef          	jal	8002b42a <printf>
    8001f204:	4511                	li	a0,4
    8001f206:	d03e10ef          	jal	80000f08 <goto_priv>
    8001f20a:	e1ae20ef          	jal	80001824 <reset_state>
}
    8001f20e:	60a2                	ld	ra,8(sp)
    8001f210:	8522                	mv	a0,s0
    8001f212:	6402                	ld	s0,0(sp)
    8001f214:	0141                	addi	sp,sp,16
    8001f216:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f218:	4401                	li	s0,0
    TEST_END(); 
    8001f21a:	0000f597          	auipc	a1,0xf
    8001f21e:	f9e58593          	addi	a1,a1,-98 # 8002e1b8 <__func__.0+0x2d0>
    8001f222:	bfd9                	j	8001f1f8 <cycle_test_6+0x9e>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f224:	0000f517          	auipc	a0,0xf
    8001f228:	fdc50513          	addi	a0,a0,-36 # 8002e200 <__func__.0+0x318>
    8001f22c:	1fe0c0ef          	jal	8002b42a <printf>
    8001f230:	02900513          	li	a0,41
    8001f234:	6e50a0ef          	jal	8002a118 <putchar>
    8001f238:	b75d                	j	8001f1de <cycle_test_6+0x84>

000000008001f23a <cycle_test_7>:

bool cycle_test_7() {
    8001f23a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f23c:	0000e597          	auipc	a1,0xe
    8001f240:	4e458593          	addi	a1,a1,1252 # 8002d720 <__func__.34>
    8001f244:	0000f517          	auipc	a0,0xf
    8001f248:	f8450513          	addi	a0,a0,-124 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_7() {
    8001f24c:	e406                	sd	ra,8(sp)
    8001f24e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f250:	1da0c0ef          	jal	8002b42a <printf>
    8001f254:	4529                	li	a0,10
    8001f256:	6c30a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f25a:	4511                	li	a0,4
    8001f25c:	cade10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f260:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f264:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f268:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f26c:	4501                	li	a0,0
    8001f26e:	c9be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f272:	b9be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f276:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f27a:	08200593          	li	a1,130
    8001f27e:	00016617          	auipc	a2,0x16
    8001f282:	7ca60613          	addi	a2,a2,1994 # 80035a48 <__func__.0+0x7b60>
    8001f286:	0000f517          	auipc	a0,0xf
    8001f28a:	f5a50513          	addi	a0,a0,-166 # 8002e1e0 <__func__.0+0x2f8>
    8001f28e:	19c0c0ef          	jal	8002b42a <printf>
    8001f292:	00039797          	auipc	a5,0x39
    8001f296:	d7f7c783          	lbu	a5,-641(a5) # 80058011 <excpt+0x1>
    8001f29a:	0000f597          	auipc	a1,0xf
    8001f29e:	f0e58593          	addi	a1,a1,-242 # 8002e1a8 <__func__.0+0x2c0>
    8001f2a2:	c789                	beqz	a5,8001f2ac <cycle_test_7+0x72>
    8001f2a4:	0000f597          	auipc	a1,0xf
    8001f2a8:	f1458593          	addi	a1,a1,-236 # 8002e1b8 <__func__.0+0x2d0>
    8001f2ac:	0000f517          	auipc	a0,0xf
    8001f2b0:	f4c50513          	addi	a0,a0,-180 # 8002e1f8 <__func__.0+0x310>
    8001f2b4:	1760c0ef          	jal	8002b42a <printf>
    8001f2b8:	00039797          	auipc	a5,0x39
    8001f2bc:	d597c783          	lbu	a5,-679(a5) # 80058011 <excpt+0x1>
    8001f2c0:	e7a1                	bnez	a5,8001f308 <cycle_test_7+0xce>
    8001f2c2:	4529                	li	a0,10
    8001f2c4:	6550a0ef          	jal	8002a118 <putchar>
    8001f2c8:	00039797          	auipc	a5,0x39
    8001f2cc:	d497c783          	lbu	a5,-695(a5) # 80058011 <excpt+0x1>
    8001f2d0:	e795                	bnez	a5,8001f2fc <cycle_test_7+0xc2>
    8001f2d2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f2d4:	0000f597          	auipc	a1,0xf
    8001f2d8:	ed458593          	addi	a1,a1,-300 # 8002e1a8 <__func__.0+0x2c0>
    8001f2dc:	0000f517          	auipc	a0,0xf
    8001f2e0:	f8450513          	addi	a0,a0,-124 # 8002e260 <__func__.0+0x378>
    8001f2e4:	1460c0ef          	jal	8002b42a <printf>
    8001f2e8:	4511                	li	a0,4
    8001f2ea:	c1fe10ef          	jal	80000f08 <goto_priv>
    8001f2ee:	d36e20ef          	jal	80001824 <reset_state>
}
    8001f2f2:	60a2                	ld	ra,8(sp)
    8001f2f4:	8522                	mv	a0,s0
    8001f2f6:	6402                	ld	s0,0(sp)
    8001f2f8:	0141                	addi	sp,sp,16
    8001f2fa:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f2fc:	4401                	li	s0,0
    TEST_END(); 
    8001f2fe:	0000f597          	auipc	a1,0xf
    8001f302:	eba58593          	addi	a1,a1,-326 # 8002e1b8 <__func__.0+0x2d0>
    8001f306:	bfd9                	j	8001f2dc <cycle_test_7+0xa2>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f308:	0000f517          	auipc	a0,0xf
    8001f30c:	ef850513          	addi	a0,a0,-264 # 8002e200 <__func__.0+0x318>
    8001f310:	11a0c0ef          	jal	8002b42a <printf>
    8001f314:	02900513          	li	a0,41
    8001f318:	6010a0ef          	jal	8002a118 <putchar>
    8001f31c:	b75d                	j	8001f2c2 <cycle_test_7+0x88>

000000008001f31e <cycle_test_8>:

bool cycle_test_8() {
    8001f31e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f320:	0000e597          	auipc	a1,0xe
    8001f324:	41058593          	addi	a1,a1,1040 # 8002d730 <__func__.33>
    8001f328:	0000f517          	auipc	a0,0xf
    8001f32c:	ea050513          	addi	a0,a0,-352 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_8() {
    8001f330:	ec06                	sd	ra,24(sp)
    8001f332:	e822                	sd	s0,16(sp)
    8001f334:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f336:	0f40c0ef          	jal	8002b42a <printf>
    8001f33a:	4529                	li	a0,10
    8001f33c:	5dd0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f340:	4511                	li	a0,4
    8001f342:	bc7e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f346:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f34a:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f34e:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f352:	4501                	li	a0,0
    8001f354:	bb5e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f358:	ab5e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f35c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f360:	08200593          	li	a1,130
    8001f364:	00016617          	auipc	a2,0x16
    8001f368:	73c60613          	addi	a2,a2,1852 # 80035aa0 <__func__.0+0x7bb8>
    8001f36c:	0000f517          	auipc	a0,0xf
    8001f370:	e7450513          	addi	a0,a0,-396 # 8002e1e0 <__func__.0+0x2f8>
    8001f374:	0b60c0ef          	jal	8002b42a <printf>
    8001f378:	00039797          	auipc	a5,0x39
    8001f37c:	c997c783          	lbu	a5,-871(a5) # 80058011 <excpt+0x1>
    8001f380:	00039497          	auipc	s1,0x39
    8001f384:	c9048493          	addi	s1,s1,-880 # 80058010 <excpt>
    8001f388:	0000f597          	auipc	a1,0xf
    8001f38c:	e3058593          	addi	a1,a1,-464 # 8002e1b8 <__func__.0+0x2d0>
    8001f390:	cf89                	beqz	a5,8001f3aa <cycle_test_8+0x8c>
    8001f392:	6498                	ld	a4,8(s1)
    8001f394:	47d9                	li	a5,22
    8001f396:	0000f597          	auipc	a1,0xf
    8001f39a:	e1258593          	addi	a1,a1,-494 # 8002e1a8 <__func__.0+0x2c0>
    8001f39e:	00f70663          	beq	a4,a5,8001f3aa <cycle_test_8+0x8c>
    8001f3a2:	0000f597          	auipc	a1,0xf
    8001f3a6:	e1658593          	addi	a1,a1,-490 # 8002e1b8 <__func__.0+0x2d0>
    8001f3aa:	0000f517          	auipc	a0,0xf
    8001f3ae:	e4e50513          	addi	a0,a0,-434 # 8002e1f8 <__func__.0+0x310>
    8001f3b2:	0780c0ef          	jal	8002b42a <printf>
    8001f3b6:	00039797          	auipc	a5,0x39
    8001f3ba:	c5b7c783          	lbu	a5,-933(a5) # 80058011 <excpt+0x1>
    8001f3be:	c789                	beqz	a5,8001f3c8 <cycle_test_8+0xaa>
    8001f3c0:	6498                	ld	a4,8(s1)
    8001f3c2:	47d9                	li	a5,22
    8001f3c4:	00f70c63          	beq	a4,a5,8001f3dc <cycle_test_8+0xbe>
    8001f3c8:	0000f517          	auipc	a0,0xf
    8001f3cc:	e3850513          	addi	a0,a0,-456 # 8002e200 <__func__.0+0x318>
    8001f3d0:	05a0c0ef          	jal	8002b42a <printf>
    8001f3d4:	02900513          	li	a0,41
    8001f3d8:	5410a0ef          	jal	8002a118 <putchar>
    8001f3dc:	4529                	li	a0,10
    8001f3de:	53b0a0ef          	jal	8002a118 <putchar>
    8001f3e2:	00039417          	auipc	s0,0x39
    8001f3e6:	c2f44403          	lbu	s0,-977(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f3ea:	0000f597          	auipc	a1,0xf
    8001f3ee:	dce58593          	addi	a1,a1,-562 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f3f2:	cc11                	beqz	s0,8001f40e <cycle_test_8+0xf0>
    8001f3f4:	6498                	ld	a4,8(s1)
    8001f3f6:	47d9                	li	a5,22
    TEST_END(); 
    8001f3f8:	0000f597          	auipc	a1,0xf
    8001f3fc:	db058593          	addi	a1,a1,-592 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f400:	00f70763          	beq	a4,a5,8001f40e <cycle_test_8+0xf0>
    8001f404:	4401                	li	s0,0
    TEST_END(); 
    8001f406:	0000f597          	auipc	a1,0xf
    8001f40a:	db258593          	addi	a1,a1,-590 # 8002e1b8 <__func__.0+0x2d0>
    8001f40e:	0000f517          	auipc	a0,0xf
    8001f412:	e5250513          	addi	a0,a0,-430 # 8002e260 <__func__.0+0x378>
    8001f416:	0140c0ef          	jal	8002b42a <printf>
    8001f41a:	4511                	li	a0,4
    8001f41c:	aede10ef          	jal	80000f08 <goto_priv>
    8001f420:	c04e20ef          	jal	80001824 <reset_state>
}
    8001f424:	60e2                	ld	ra,24(sp)
    8001f426:	8522                	mv	a0,s0
    8001f428:	6442                	ld	s0,16(sp)
    8001f42a:	64a2                	ld	s1,8(sp)
    8001f42c:	6105                	addi	sp,sp,32
    8001f42e:	8082                	ret

000000008001f430 <cycle_test_9>:

bool cycle_test_9() {
    8001f430:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f432:	0000e597          	auipc	a1,0xe
    8001f436:	30e58593          	addi	a1,a1,782 # 8002d740 <__func__.32>
    8001f43a:	0000f517          	auipc	a0,0xf
    8001f43e:	d8e50513          	addi	a0,a0,-626 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_9() {
    8001f442:	ec06                	sd	ra,24(sp)
    8001f444:	e822                	sd	s0,16(sp)
    8001f446:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f448:	7e30b0ef          	jal	8002b42a <printf>
    8001f44c:	4529                	li	a0,10
    8001f44e:	4cb0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f452:	4511                	li	a0,4
    8001f454:	ab5e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f458:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f45c:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    8001f460:	4505                	li	a0,1
    8001f462:	aa7e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f466:	9a7e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f46a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f46e:	08200593          	li	a1,130
    8001f472:	00016617          	auipc	a2,0x16
    8001f476:	69e60613          	addi	a2,a2,1694 # 80035b10 <__func__.0+0x7c28>
    8001f47a:	0000f517          	auipc	a0,0xf
    8001f47e:	d6650513          	addi	a0,a0,-666 # 8002e1e0 <__func__.0+0x2f8>
    8001f482:	7a90b0ef          	jal	8002b42a <printf>
    8001f486:	00039797          	auipc	a5,0x39
    8001f48a:	b8b7c783          	lbu	a5,-1141(a5) # 80058011 <excpt+0x1>
    8001f48e:	00039497          	auipc	s1,0x39
    8001f492:	b8248493          	addi	s1,s1,-1150 # 80058010 <excpt>
    8001f496:	0000f597          	auipc	a1,0xf
    8001f49a:	d2258593          	addi	a1,a1,-734 # 8002e1b8 <__func__.0+0x2d0>
    8001f49e:	cf89                	beqz	a5,8001f4b8 <cycle_test_9+0x88>
    8001f4a0:	6498                	ld	a4,8(s1)
    8001f4a2:	4789                	li	a5,2
    8001f4a4:	0000f597          	auipc	a1,0xf
    8001f4a8:	d0458593          	addi	a1,a1,-764 # 8002e1a8 <__func__.0+0x2c0>
    8001f4ac:	00f70663          	beq	a4,a5,8001f4b8 <cycle_test_9+0x88>
    8001f4b0:	0000f597          	auipc	a1,0xf
    8001f4b4:	d0858593          	addi	a1,a1,-760 # 8002e1b8 <__func__.0+0x2d0>
    8001f4b8:	0000f517          	auipc	a0,0xf
    8001f4bc:	d4050513          	addi	a0,a0,-704 # 8002e1f8 <__func__.0+0x310>
    8001f4c0:	76b0b0ef          	jal	8002b42a <printf>
    8001f4c4:	00039797          	auipc	a5,0x39
    8001f4c8:	b4d7c783          	lbu	a5,-1203(a5) # 80058011 <excpt+0x1>
    8001f4cc:	c789                	beqz	a5,8001f4d6 <cycle_test_9+0xa6>
    8001f4ce:	6498                	ld	a4,8(s1)
    8001f4d0:	4789                	li	a5,2
    8001f4d2:	00f70c63          	beq	a4,a5,8001f4ea <cycle_test_9+0xba>
    8001f4d6:	0000f517          	auipc	a0,0xf
    8001f4da:	d2a50513          	addi	a0,a0,-726 # 8002e200 <__func__.0+0x318>
    8001f4de:	74d0b0ef          	jal	8002b42a <printf>
    8001f4e2:	02900513          	li	a0,41
    8001f4e6:	4330a0ef          	jal	8002a118 <putchar>
    8001f4ea:	4529                	li	a0,10
    8001f4ec:	42d0a0ef          	jal	8002a118 <putchar>
    8001f4f0:	00039417          	auipc	s0,0x39
    8001f4f4:	b2144403          	lbu	s0,-1247(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f4f8:	0000f597          	auipc	a1,0xf
    8001f4fc:	cc058593          	addi	a1,a1,-832 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f500:	cc11                	beqz	s0,8001f51c <cycle_test_9+0xec>
    8001f502:	6498                	ld	a4,8(s1)
    8001f504:	4789                	li	a5,2
    TEST_END(); 
    8001f506:	0000f597          	auipc	a1,0xf
    8001f50a:	ca258593          	addi	a1,a1,-862 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f50e:	00f70763          	beq	a4,a5,8001f51c <cycle_test_9+0xec>
    8001f512:	4401                	li	s0,0
    TEST_END(); 
    8001f514:	0000f597          	auipc	a1,0xf
    8001f518:	ca458593          	addi	a1,a1,-860 # 8002e1b8 <__func__.0+0x2d0>
    8001f51c:	0000f517          	auipc	a0,0xf
    8001f520:	d4450513          	addi	a0,a0,-700 # 8002e260 <__func__.0+0x378>
    8001f524:	7070b0ef          	jal	8002b42a <printf>
    8001f528:	4511                	li	a0,4
    8001f52a:	9dfe10ef          	jal	80000f08 <goto_priv>
    8001f52e:	af6e20ef          	jal	80001824 <reset_state>
}
    8001f532:	60e2                	ld	ra,24(sp)
    8001f534:	8522                	mv	a0,s0
    8001f536:	6442                	ld	s0,16(sp)
    8001f538:	64a2                	ld	s1,8(sp)
    8001f53a:	6105                	addi	sp,sp,32
    8001f53c:	8082                	ret

000000008001f53e <cycle_test_10>:

bool cycle_test_10() {
    8001f53e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f540:	0000e597          	auipc	a1,0xe
    8001f544:	21058593          	addi	a1,a1,528 # 8002d750 <__func__.31>
    8001f548:	0000f517          	auipc	a0,0xf
    8001f54c:	c8050513          	addi	a0,a0,-896 # 8002e1c8 <__func__.0+0x2e0>
bool cycle_test_10() {
    8001f550:	e406                	sd	ra,8(sp)
    8001f552:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f554:	6d70b0ef          	jal	8002b42a <printf>
    8001f558:	4529                	li	a0,10
    8001f55a:	3bf0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f55e:	4511                	li	a0,4
    8001f560:	9a9e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f564:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f568:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f56c:	4509                	li	a0,2
    8001f56e:	99be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f572:	89be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f576:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f57a:	08200593          	li	a1,130
    8001f57e:	00016617          	auipc	a2,0x16
    8001f582:	5f260613          	addi	a2,a2,1522 # 80035b70 <__func__.0+0x7c88>
    8001f586:	0000f517          	auipc	a0,0xf
    8001f58a:	c5a50513          	addi	a0,a0,-934 # 8002e1e0 <__func__.0+0x2f8>
    8001f58e:	69d0b0ef          	jal	8002b42a <printf>
    8001f592:	00039797          	auipc	a5,0x39
    8001f596:	a7f7c783          	lbu	a5,-1409(a5) # 80058011 <excpt+0x1>
    8001f59a:	0000f597          	auipc	a1,0xf
    8001f59e:	c0e58593          	addi	a1,a1,-1010 # 8002e1a8 <__func__.0+0x2c0>
    8001f5a2:	c789                	beqz	a5,8001f5ac <cycle_test_10+0x6e>
    8001f5a4:	0000f597          	auipc	a1,0xf
    8001f5a8:	c1458593          	addi	a1,a1,-1004 # 8002e1b8 <__func__.0+0x2d0>
    8001f5ac:	0000f517          	auipc	a0,0xf
    8001f5b0:	c4c50513          	addi	a0,a0,-948 # 8002e1f8 <__func__.0+0x310>
    8001f5b4:	6770b0ef          	jal	8002b42a <printf>
    8001f5b8:	00039797          	auipc	a5,0x39
    8001f5bc:	a597c783          	lbu	a5,-1447(a5) # 80058011 <excpt+0x1>
    8001f5c0:	e7a1                	bnez	a5,8001f608 <cycle_test_10+0xca>
    8001f5c2:	4529                	li	a0,10
    8001f5c4:	3550a0ef          	jal	8002a118 <putchar>
    8001f5c8:	00039797          	auipc	a5,0x39
    8001f5cc:	a497c783          	lbu	a5,-1463(a5) # 80058011 <excpt+0x1>
    8001f5d0:	e795                	bnez	a5,8001f5fc <cycle_test_10+0xbe>
    8001f5d2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f5d4:	0000f597          	auipc	a1,0xf
    8001f5d8:	bd458593          	addi	a1,a1,-1068 # 8002e1a8 <__func__.0+0x2c0>
    8001f5dc:	0000f517          	auipc	a0,0xf
    8001f5e0:	c8450513          	addi	a0,a0,-892 # 8002e260 <__func__.0+0x378>
    8001f5e4:	6470b0ef          	jal	8002b42a <printf>
    8001f5e8:	4511                	li	a0,4
    8001f5ea:	91fe10ef          	jal	80000f08 <goto_priv>
    8001f5ee:	a36e20ef          	jal	80001824 <reset_state>
}
    8001f5f2:	60a2                	ld	ra,8(sp)
    8001f5f4:	8522                	mv	a0,s0
    8001f5f6:	6402                	ld	s0,0(sp)
    8001f5f8:	0141                	addi	sp,sp,16
    8001f5fa:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f5fc:	4401                	li	s0,0
    TEST_END(); 
    8001f5fe:	0000f597          	auipc	a1,0xf
    8001f602:	bba58593          	addi	a1,a1,-1094 # 8002e1b8 <__func__.0+0x2d0>
    8001f606:	bfd9                	j	8001f5dc <cycle_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f608:	0000f517          	auipc	a0,0xf
    8001f60c:	bf850513          	addi	a0,a0,-1032 # 8002e200 <__func__.0+0x318>
    8001f610:	61b0b0ef          	jal	8002b42a <printf>
    8001f614:	02900513          	li	a0,41
    8001f618:	3010a0ef          	jal	8002a118 <putchar>
    8001f61c:	b75d                	j	8001f5c2 <cycle_test_10+0x84>

000000008001f61e <instret_test_1>:


bool instret_test_1() {
    8001f61e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f620:	0000e597          	auipc	a1,0xe
    8001f624:	14058593          	addi	a1,a1,320 # 8002d760 <__func__.30>
    8001f628:	0000f517          	auipc	a0,0xf
    8001f62c:	ba050513          	addi	a0,a0,-1120 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_1() {
    8001f630:	ec06                	sd	ra,24(sp)
    8001f632:	e822                	sd	s0,16(sp)
    8001f634:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f636:	5f50b0ef          	jal	8002b42a <printf>
    8001f63a:	4529                	li	a0,10
    8001f63c:	2dd0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f640:	4511                	li	a0,4
    8001f642:	8c7e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f646:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001f64a:	4509                	li	a0,2
    8001f64c:	8bde10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f650:	fbce10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f654:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f658:	08200593          	li	a1,130
    8001f65c:	00016617          	auipc	a2,0x16
    8001f660:	56460613          	addi	a2,a2,1380 # 80035bc0 <__func__.0+0x7cd8>
    8001f664:	0000f517          	auipc	a0,0xf
    8001f668:	b7c50513          	addi	a0,a0,-1156 # 8002e1e0 <__func__.0+0x2f8>
    8001f66c:	5bf0b0ef          	jal	8002b42a <printf>
    8001f670:	00039797          	auipc	a5,0x39
    8001f674:	9a17c783          	lbu	a5,-1631(a5) # 80058011 <excpt+0x1>
    8001f678:	00039497          	auipc	s1,0x39
    8001f67c:	99848493          	addi	s1,s1,-1640 # 80058010 <excpt>
    8001f680:	0000f597          	auipc	a1,0xf
    8001f684:	b3858593          	addi	a1,a1,-1224 # 8002e1b8 <__func__.0+0x2d0>
    8001f688:	cf89                	beqz	a5,8001f6a2 <instret_test_1+0x84>
    8001f68a:	6498                	ld	a4,8(s1)
    8001f68c:	4789                	li	a5,2
    8001f68e:	0000f597          	auipc	a1,0xf
    8001f692:	b1a58593          	addi	a1,a1,-1254 # 8002e1a8 <__func__.0+0x2c0>
    8001f696:	00f70663          	beq	a4,a5,8001f6a2 <instret_test_1+0x84>
    8001f69a:	0000f597          	auipc	a1,0xf
    8001f69e:	b1e58593          	addi	a1,a1,-1250 # 8002e1b8 <__func__.0+0x2d0>
    8001f6a2:	0000f517          	auipc	a0,0xf
    8001f6a6:	b5650513          	addi	a0,a0,-1194 # 8002e1f8 <__func__.0+0x310>
    8001f6aa:	5810b0ef          	jal	8002b42a <printf>
    8001f6ae:	00039797          	auipc	a5,0x39
    8001f6b2:	9637c783          	lbu	a5,-1693(a5) # 80058011 <excpt+0x1>
    8001f6b6:	c789                	beqz	a5,8001f6c0 <instret_test_1+0xa2>
    8001f6b8:	6498                	ld	a4,8(s1)
    8001f6ba:	4789                	li	a5,2
    8001f6bc:	00f70c63          	beq	a4,a5,8001f6d4 <instret_test_1+0xb6>
    8001f6c0:	0000f517          	auipc	a0,0xf
    8001f6c4:	b4050513          	addi	a0,a0,-1216 # 8002e200 <__func__.0+0x318>
    8001f6c8:	5630b0ef          	jal	8002b42a <printf>
    8001f6cc:	02900513          	li	a0,41
    8001f6d0:	2490a0ef          	jal	8002a118 <putchar>
    8001f6d4:	4529                	li	a0,10
    8001f6d6:	2430a0ef          	jal	8002a118 <putchar>
    8001f6da:	00039797          	auipc	a5,0x39
    8001f6de:	9377c783          	lbu	a5,-1737(a5) # 80058011 <excpt+0x1>
    8001f6e2:	4401                	li	s0,0
    8001f6e4:	c789                	beqz	a5,8001f6ee <instret_test_1+0xd0>
    8001f6e6:	6480                	ld	s0,8(s1)
    8001f6e8:	1479                	addi	s0,s0,-2
    8001f6ea:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f6ee:	450d                	li	a0,3
    8001f6f0:	819e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f6f4:	f18e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f6f8:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f6fc:	08200593          	li	a1,130
    8001f700:	00016617          	auipc	a2,0x16
    8001f704:	51060613          	addi	a2,a2,1296 # 80035c10 <__func__.0+0x7d28>
    8001f708:	0000f517          	auipc	a0,0xf
    8001f70c:	ad850513          	addi	a0,a0,-1320 # 8002e1e0 <__func__.0+0x2f8>
    8001f710:	51b0b0ef          	jal	8002b42a <printf>
    8001f714:	00039797          	auipc	a5,0x39
    8001f718:	8fd7c783          	lbu	a5,-1795(a5) # 80058011 <excpt+0x1>
    8001f71c:	0000f597          	auipc	a1,0xf
    8001f720:	a9c58593          	addi	a1,a1,-1380 # 8002e1b8 <__func__.0+0x2d0>
    8001f724:	cf89                	beqz	a5,8001f73e <instret_test_1+0x120>
    8001f726:	6498                	ld	a4,8(s1)
    8001f728:	4789                	li	a5,2
    8001f72a:	0000f597          	auipc	a1,0xf
    8001f72e:	a7e58593          	addi	a1,a1,-1410 # 8002e1a8 <__func__.0+0x2c0>
    8001f732:	00f70663          	beq	a4,a5,8001f73e <instret_test_1+0x120>
    8001f736:	0000f597          	auipc	a1,0xf
    8001f73a:	a8258593          	addi	a1,a1,-1406 # 8002e1b8 <__func__.0+0x2d0>
    8001f73e:	0000f517          	auipc	a0,0xf
    8001f742:	aba50513          	addi	a0,a0,-1350 # 8002e1f8 <__func__.0+0x310>
    8001f746:	4e50b0ef          	jal	8002b42a <printf>
    8001f74a:	00039797          	auipc	a5,0x39
    8001f74e:	8c77c783          	lbu	a5,-1849(a5) # 80058011 <excpt+0x1>
    8001f752:	c789                	beqz	a5,8001f75c <instret_test_1+0x13e>
    8001f754:	6498                	ld	a4,8(s1)
    8001f756:	4789                	li	a5,2
    8001f758:	00f70c63          	beq	a4,a5,8001f770 <instret_test_1+0x152>
    8001f75c:	0000f517          	auipc	a0,0xf
    8001f760:	aa450513          	addi	a0,a0,-1372 # 8002e200 <__func__.0+0x318>
    8001f764:	4c70b0ef          	jal	8002b42a <printf>
    8001f768:	02900513          	li	a0,41
    8001f76c:	1ad0a0ef          	jal	8002a118 <putchar>
    8001f770:	4529                	li	a0,10
    8001f772:	1a70a0ef          	jal	8002a118 <putchar>
    8001f776:	c801                	beqz	s0,8001f786 <instret_test_1+0x168>
    8001f778:	00039797          	auipc	a5,0x39
    8001f77c:	8997c783          	lbu	a5,-1895(a5) # 80058011 <excpt+0x1>
    8001f780:	4401                	li	s0,0
    8001f782:	16079f63          	bnez	a5,8001f900 <instret_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f786:	4501                	li	a0,0
    8001f788:	f80e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f78c:	e80e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f790:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f794:	08200593          	li	a1,130
    8001f798:	00016617          	auipc	a2,0x16
    8001f79c:	4c860613          	addi	a2,a2,1224 # 80035c60 <__func__.0+0x7d78>
    8001f7a0:	0000f517          	auipc	a0,0xf
    8001f7a4:	a4050513          	addi	a0,a0,-1472 # 8002e1e0 <__func__.0+0x2f8>
    8001f7a8:	4830b0ef          	jal	8002b42a <printf>
    8001f7ac:	00039797          	auipc	a5,0x39
    8001f7b0:	8657c783          	lbu	a5,-1947(a5) # 80058011 <excpt+0x1>
    8001f7b4:	0000f597          	auipc	a1,0xf
    8001f7b8:	a0458593          	addi	a1,a1,-1532 # 8002e1b8 <__func__.0+0x2d0>
    8001f7bc:	cf89                	beqz	a5,8001f7d6 <instret_test_1+0x1b8>
    8001f7be:	6498                	ld	a4,8(s1)
    8001f7c0:	4789                	li	a5,2
    8001f7c2:	0000f597          	auipc	a1,0xf
    8001f7c6:	9e658593          	addi	a1,a1,-1562 # 8002e1a8 <__func__.0+0x2c0>
    8001f7ca:	00f70663          	beq	a4,a5,8001f7d6 <instret_test_1+0x1b8>
    8001f7ce:	0000f597          	auipc	a1,0xf
    8001f7d2:	9ea58593          	addi	a1,a1,-1558 # 8002e1b8 <__func__.0+0x2d0>
    8001f7d6:	0000f517          	auipc	a0,0xf
    8001f7da:	a2250513          	addi	a0,a0,-1502 # 8002e1f8 <__func__.0+0x310>
    8001f7de:	44d0b0ef          	jal	8002b42a <printf>
    8001f7e2:	00039797          	auipc	a5,0x39
    8001f7e6:	82f7c783          	lbu	a5,-2001(a5) # 80058011 <excpt+0x1>
    8001f7ea:	c789                	beqz	a5,8001f7f4 <instret_test_1+0x1d6>
    8001f7ec:	6498                	ld	a4,8(s1)
    8001f7ee:	4789                	li	a5,2
    8001f7f0:	00f70c63          	beq	a4,a5,8001f808 <instret_test_1+0x1ea>
    8001f7f4:	0000f517          	auipc	a0,0xf
    8001f7f8:	a0c50513          	addi	a0,a0,-1524 # 8002e200 <__func__.0+0x318>
    8001f7fc:	42f0b0ef          	jal	8002b42a <printf>
    8001f800:	02900513          	li	a0,41
    8001f804:	1150a0ef          	jal	8002a118 <putchar>
    8001f808:	4529                	li	a0,10
    8001f80a:	10f0a0ef          	jal	8002a118 <putchar>
    8001f80e:	c801                	beqz	s0,8001f81e <instret_test_1+0x200>
    8001f810:	00039797          	auipc	a5,0x39
    8001f814:	8017c783          	lbu	a5,-2047(a5) # 80058011 <excpt+0x1>
    8001f818:	4401                	li	s0,0
    8001f81a:	0c079e63          	bnez	a5,8001f8f6 <instret_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f81e:	4505                	li	a0,1
    8001f820:	ee8e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f824:	de8e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f828:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f82c:	08200593          	li	a1,130
    8001f830:	00016617          	auipc	a2,0x16
    8001f834:	48060613          	addi	a2,a2,1152 # 80035cb0 <__func__.0+0x7dc8>
    8001f838:	0000f517          	auipc	a0,0xf
    8001f83c:	9a850513          	addi	a0,a0,-1624 # 8002e1e0 <__func__.0+0x2f8>
    8001f840:	3eb0b0ef          	jal	8002b42a <printf>
    8001f844:	00038797          	auipc	a5,0x38
    8001f848:	7cd7c783          	lbu	a5,1997(a5) # 80058011 <excpt+0x1>
    8001f84c:	0000f597          	auipc	a1,0xf
    8001f850:	96c58593          	addi	a1,a1,-1684 # 8002e1b8 <__func__.0+0x2d0>
    8001f854:	cf89                	beqz	a5,8001f86e <instret_test_1+0x250>
    8001f856:	6498                	ld	a4,8(s1)
    8001f858:	4789                	li	a5,2
    8001f85a:	0000f597          	auipc	a1,0xf
    8001f85e:	94e58593          	addi	a1,a1,-1714 # 8002e1a8 <__func__.0+0x2c0>
    8001f862:	00f70663          	beq	a4,a5,8001f86e <instret_test_1+0x250>
    8001f866:	0000f597          	auipc	a1,0xf
    8001f86a:	95258593          	addi	a1,a1,-1710 # 8002e1b8 <__func__.0+0x2d0>
    8001f86e:	0000f517          	auipc	a0,0xf
    8001f872:	98a50513          	addi	a0,a0,-1654 # 8002e1f8 <__func__.0+0x310>
    8001f876:	3b50b0ef          	jal	8002b42a <printf>
    8001f87a:	00038797          	auipc	a5,0x38
    8001f87e:	7977c783          	lbu	a5,1943(a5) # 80058011 <excpt+0x1>
    8001f882:	c789                	beqz	a5,8001f88c <instret_test_1+0x26e>
    8001f884:	6498                	ld	a4,8(s1)
    8001f886:	4789                	li	a5,2
    8001f888:	00f70c63          	beq	a4,a5,8001f8a0 <instret_test_1+0x282>
    8001f88c:	0000f517          	auipc	a0,0xf
    8001f890:	97450513          	addi	a0,a0,-1676 # 8002e200 <__func__.0+0x318>
    8001f894:	3970b0ef          	jal	8002b42a <printf>
    8001f898:	02900513          	li	a0,41
    8001f89c:	07d0a0ef          	jal	8002a118 <putchar>
    8001f8a0:	4529                	li	a0,10
    8001f8a2:	0770a0ef          	jal	8002a118 <putchar>
    8001f8a6:	c015                	beqz	s0,8001f8ca <instret_test_1+0x2ac>
    8001f8a8:	00038417          	auipc	s0,0x38
    8001f8ac:	76944403          	lbu	s0,1897(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f8b0:	0000f597          	auipc	a1,0xf
    8001f8b4:	90858593          	addi	a1,a1,-1784 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8b8:	cc11                	beqz	s0,8001f8d4 <instret_test_1+0x2b6>
    8001f8ba:	6498                	ld	a4,8(s1)
    8001f8bc:	4789                	li	a5,2
    TEST_END(); 
    8001f8be:	0000f597          	auipc	a1,0xf
    8001f8c2:	8ea58593          	addi	a1,a1,-1814 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8c6:	00f70763          	beq	a4,a5,8001f8d4 <instret_test_1+0x2b6>
    8001f8ca:	4401                	li	s0,0
    TEST_END(); 
    8001f8cc:	0000f597          	auipc	a1,0xf
    8001f8d0:	8ec58593          	addi	a1,a1,-1812 # 8002e1b8 <__func__.0+0x2d0>
    8001f8d4:	0000f517          	auipc	a0,0xf
    8001f8d8:	98c50513          	addi	a0,a0,-1652 # 8002e260 <__func__.0+0x378>
    8001f8dc:	34f0b0ef          	jal	8002b42a <printf>
    8001f8e0:	4511                	li	a0,4
    8001f8e2:	e26e10ef          	jal	80000f08 <goto_priv>
    8001f8e6:	f3fe10ef          	jal	80001824 <reset_state>
}
    8001f8ea:	60e2                	ld	ra,24(sp)
    8001f8ec:	8522                	mv	a0,s0
    8001f8ee:	6442                	ld	s0,16(sp)
    8001f8f0:	64a2                	ld	s1,8(sp)
    8001f8f2:	6105                	addi	sp,sp,32
    8001f8f4:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8f6:	6480                	ld	s0,8(s1)
    8001f8f8:	1479                	addi	s0,s0,-2
    8001f8fa:	00143413          	seqz	s0,s0
    8001f8fe:	b705                	j	8001f81e <instret_test_1+0x200>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f900:	6480                	ld	s0,8(s1)
    8001f902:	1479                	addi	s0,s0,-2
    8001f904:	00143413          	seqz	s0,s0
    8001f908:	bdbd                	j	8001f786 <instret_test_1+0x168>

000000008001f90a <instret_test_2>:

bool instret_test_2() {
    8001f90a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f90c:	0000e597          	auipc	a1,0xe
    8001f910:	e6458593          	addi	a1,a1,-412 # 8002d770 <__func__.29>
    8001f914:	0000f517          	auipc	a0,0xf
    8001f918:	8b450513          	addi	a0,a0,-1868 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_2() {
    8001f91c:	e406                	sd	ra,8(sp)
    8001f91e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f920:	30b0b0ef          	jal	8002b42a <printf>
    8001f924:	4529                	li	a0,10
    8001f926:	7f20a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001f92a:	4511                	li	a0,4
    8001f92c:	ddce10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f930:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001f934:	450d                	li	a0,3
    8001f936:	dd2e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f93a:	cd2e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f93e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f942:	08200593          	li	a1,130
    8001f946:	00016617          	auipc	a2,0x16
    8001f94a:	3ba60613          	addi	a2,a2,954 # 80035d00 <__func__.0+0x7e18>
    8001f94e:	0000f517          	auipc	a0,0xf
    8001f952:	89250513          	addi	a0,a0,-1902 # 8002e1e0 <__func__.0+0x2f8>
    8001f956:	2d50b0ef          	jal	8002b42a <printf>
    8001f95a:	00038797          	auipc	a5,0x38
    8001f95e:	6b77c783          	lbu	a5,1719(a5) # 80058011 <excpt+0x1>
    8001f962:	0000f597          	auipc	a1,0xf
    8001f966:	84658593          	addi	a1,a1,-1978 # 8002e1a8 <__func__.0+0x2c0>
    8001f96a:	c789                	beqz	a5,8001f974 <instret_test_2+0x6a>
    8001f96c:	0000f597          	auipc	a1,0xf
    8001f970:	84c58593          	addi	a1,a1,-1972 # 8002e1b8 <__func__.0+0x2d0>
    8001f974:	0000f517          	auipc	a0,0xf
    8001f978:	88450513          	addi	a0,a0,-1916 # 8002e1f8 <__func__.0+0x310>
    8001f97c:	2af0b0ef          	jal	8002b42a <printf>
    8001f980:	00038797          	auipc	a5,0x38
    8001f984:	6917c783          	lbu	a5,1681(a5) # 80058011 <excpt+0x1>
    8001f988:	e7a1                	bnez	a5,8001f9d0 <instret_test_2+0xc6>
    8001f98a:	4529                	li	a0,10
    8001f98c:	78c0a0ef          	jal	8002a118 <putchar>
    8001f990:	00038797          	auipc	a5,0x38
    8001f994:	6817c783          	lbu	a5,1665(a5) # 80058011 <excpt+0x1>
    8001f998:	e795                	bnez	a5,8001f9c4 <instret_test_2+0xba>
    8001f99a:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001f99c:	0000f597          	auipc	a1,0xf
    8001f9a0:	80c58593          	addi	a1,a1,-2036 # 8002e1a8 <__func__.0+0x2c0>
    8001f9a4:	0000f517          	auipc	a0,0xf
    8001f9a8:	8bc50513          	addi	a0,a0,-1860 # 8002e260 <__func__.0+0x378>
    8001f9ac:	27f0b0ef          	jal	8002b42a <printf>
    8001f9b0:	4511                	li	a0,4
    8001f9b2:	d56e10ef          	jal	80000f08 <goto_priv>
    8001f9b6:	e6fe10ef          	jal	80001824 <reset_state>
}
    8001f9ba:	60a2                	ld	ra,8(sp)
    8001f9bc:	8522                	mv	a0,s0
    8001f9be:	6402                	ld	s0,0(sp)
    8001f9c0:	0141                	addi	sp,sp,16
    8001f9c2:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f9c4:	4401                	li	s0,0
    TEST_END(); 
    8001f9c6:	0000e597          	auipc	a1,0xe
    8001f9ca:	7f258593          	addi	a1,a1,2034 # 8002e1b8 <__func__.0+0x2d0>
    8001f9ce:	bfd9                	j	8001f9a4 <instret_test_2+0x9a>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f9d0:	0000f517          	auipc	a0,0xf
    8001f9d4:	83050513          	addi	a0,a0,-2000 # 8002e200 <__func__.0+0x318>
    8001f9d8:	2530b0ef          	jal	8002b42a <printf>
    8001f9dc:	02900513          	li	a0,41
    8001f9e0:	7380a0ef          	jal	8002a118 <putchar>
    8001f9e4:	b75d                	j	8001f98a <instret_test_2+0x80>

000000008001f9e6 <instret_test_3>:

bool instret_test_3() {
    8001f9e6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f9e8:	0000e597          	auipc	a1,0xe
    8001f9ec:	d9858593          	addi	a1,a1,-616 # 8002d780 <__func__.28>
    8001f9f0:	0000e517          	auipc	a0,0xe
    8001f9f4:	7d850513          	addi	a0,a0,2008 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_3() {
    8001f9f8:	ec06                	sd	ra,24(sp)
    8001f9fa:	e822                	sd	s0,16(sp)
    8001f9fc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f9fe:	22d0b0ef          	jal	8002b42a <printf>
    8001fa02:	4529                	li	a0,10
    8001fa04:	7140a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fa08:	4511                	li	a0,4
    8001fa0a:	cfee10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fa0e:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fa12:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fa16:	4505                	li	a0,1
    8001fa18:	cf0e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa1c:	bf0e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fa20:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fa24:	08200593          	li	a1,130
    8001fa28:	00016617          	auipc	a2,0x16
    8001fa2c:	31060613          	addi	a2,a2,784 # 80035d38 <__func__.0+0x7e50>
    8001fa30:	0000e517          	auipc	a0,0xe
    8001fa34:	7b050513          	addi	a0,a0,1968 # 8002e1e0 <__func__.0+0x2f8>
    8001fa38:	1f30b0ef          	jal	8002b42a <printf>
    8001fa3c:	00038797          	auipc	a5,0x38
    8001fa40:	5d57c783          	lbu	a5,1493(a5) # 80058011 <excpt+0x1>
    8001fa44:	00038497          	auipc	s1,0x38
    8001fa48:	5cc48493          	addi	s1,s1,1484 # 80058010 <excpt>
    8001fa4c:	0000e597          	auipc	a1,0xe
    8001fa50:	76c58593          	addi	a1,a1,1900 # 8002e1b8 <__func__.0+0x2d0>
    8001fa54:	cf89                	beqz	a5,8001fa6e <instret_test_3+0x88>
    8001fa56:	6498                	ld	a4,8(s1)
    8001fa58:	4789                	li	a5,2
    8001fa5a:	0000e597          	auipc	a1,0xe
    8001fa5e:	74e58593          	addi	a1,a1,1870 # 8002e1a8 <__func__.0+0x2c0>
    8001fa62:	00f70663          	beq	a4,a5,8001fa6e <instret_test_3+0x88>
    8001fa66:	0000e597          	auipc	a1,0xe
    8001fa6a:	75258593          	addi	a1,a1,1874 # 8002e1b8 <__func__.0+0x2d0>
    8001fa6e:	0000e517          	auipc	a0,0xe
    8001fa72:	78a50513          	addi	a0,a0,1930 # 8002e1f8 <__func__.0+0x310>
    8001fa76:	1b50b0ef          	jal	8002b42a <printf>
    8001fa7a:	00038797          	auipc	a5,0x38
    8001fa7e:	5977c783          	lbu	a5,1431(a5) # 80058011 <excpt+0x1>
    8001fa82:	c789                	beqz	a5,8001fa8c <instret_test_3+0xa6>
    8001fa84:	6498                	ld	a4,8(s1)
    8001fa86:	4789                	li	a5,2
    8001fa88:	00f70c63          	beq	a4,a5,8001faa0 <instret_test_3+0xba>
    8001fa8c:	0000e517          	auipc	a0,0xe
    8001fa90:	77450513          	addi	a0,a0,1908 # 8002e200 <__func__.0+0x318>
    8001fa94:	1970b0ef          	jal	8002b42a <printf>
    8001fa98:	02900513          	li	a0,41
    8001fa9c:	67c0a0ef          	jal	8002a118 <putchar>
    8001faa0:	4529                	li	a0,10
    8001faa2:	6760a0ef          	jal	8002a118 <putchar>
    8001faa6:	00038417          	auipc	s0,0x38
    8001faaa:	56b44403          	lbu	s0,1387(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001faae:	0000e597          	auipc	a1,0xe
    8001fab2:	70a58593          	addi	a1,a1,1802 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fab6:	cc11                	beqz	s0,8001fad2 <instret_test_3+0xec>
    8001fab8:	6498                	ld	a4,8(s1)
    8001faba:	4789                	li	a5,2
    TEST_END(); 
    8001fabc:	0000e597          	auipc	a1,0xe
    8001fac0:	6ec58593          	addi	a1,a1,1772 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fac4:	00f70763          	beq	a4,a5,8001fad2 <instret_test_3+0xec>
    8001fac8:	4401                	li	s0,0
    TEST_END(); 
    8001faca:	0000e597          	auipc	a1,0xe
    8001face:	6ee58593          	addi	a1,a1,1774 # 8002e1b8 <__func__.0+0x2d0>
    8001fad2:	0000e517          	auipc	a0,0xe
    8001fad6:	78e50513          	addi	a0,a0,1934 # 8002e260 <__func__.0+0x378>
    8001fada:	1510b0ef          	jal	8002b42a <printf>
    8001fade:	4511                	li	a0,4
    8001fae0:	c28e10ef          	jal	80000f08 <goto_priv>
    8001fae4:	d41e10ef          	jal	80001824 <reset_state>
}
    8001fae8:	60e2                	ld	ra,24(sp)
    8001faea:	8522                	mv	a0,s0
    8001faec:	6442                	ld	s0,16(sp)
    8001faee:	64a2                	ld	s1,8(sp)
    8001faf0:	6105                	addi	sp,sp,32
    8001faf2:	8082                	ret

000000008001faf4 <instret_test_4>:

bool instret_test_4() {
    8001faf4:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001faf6:	0000e597          	auipc	a1,0xe
    8001fafa:	c9a58593          	addi	a1,a1,-870 # 8002d790 <__func__.27>
    8001fafe:	0000e517          	auipc	a0,0xe
    8001fb02:	6ca50513          	addi	a0,a0,1738 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_4() {
    8001fb06:	e406                	sd	ra,8(sp)
    8001fb08:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fb0a:	1210b0ef          	jal	8002b42a <printf>
    8001fb0e:	4529                	li	a0,10
    8001fb10:	6080a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fb14:	4511                	li	a0,4
    8001fb16:	bf2e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fb1a:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fb1e:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fb22:	4505                	li	a0,1
    8001fb24:	be4e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb28:	ae4e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fb2c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fb30:	08200593          	li	a1,130
    8001fb34:	00016617          	auipc	a2,0x16
    8001fb38:	25460613          	addi	a2,a2,596 # 80035d88 <__func__.0+0x7ea0>
    8001fb3c:	0000e517          	auipc	a0,0xe
    8001fb40:	6a450513          	addi	a0,a0,1700 # 8002e1e0 <__func__.0+0x2f8>
    8001fb44:	0e70b0ef          	jal	8002b42a <printf>
    8001fb48:	00038797          	auipc	a5,0x38
    8001fb4c:	4c97c783          	lbu	a5,1225(a5) # 80058011 <excpt+0x1>
    8001fb50:	0000e597          	auipc	a1,0xe
    8001fb54:	65858593          	addi	a1,a1,1624 # 8002e1a8 <__func__.0+0x2c0>
    8001fb58:	c789                	beqz	a5,8001fb62 <instret_test_4+0x6e>
    8001fb5a:	0000e597          	auipc	a1,0xe
    8001fb5e:	65e58593          	addi	a1,a1,1630 # 8002e1b8 <__func__.0+0x2d0>
    8001fb62:	0000e517          	auipc	a0,0xe
    8001fb66:	69650513          	addi	a0,a0,1686 # 8002e1f8 <__func__.0+0x310>
    8001fb6a:	0c10b0ef          	jal	8002b42a <printf>
    8001fb6e:	00038797          	auipc	a5,0x38
    8001fb72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    8001fb76:	e7a1                	bnez	a5,8001fbbe <instret_test_4+0xca>
    8001fb78:	4529                	li	a0,10
    8001fb7a:	59e0a0ef          	jal	8002a118 <putchar>
    8001fb7e:	00038797          	auipc	a5,0x38
    8001fb82:	4937c783          	lbu	a5,1171(a5) # 80058011 <excpt+0x1>
    8001fb86:	e795                	bnez	a5,8001fbb2 <instret_test_4+0xbe>
    8001fb88:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fb8a:	0000e597          	auipc	a1,0xe
    8001fb8e:	61e58593          	addi	a1,a1,1566 # 8002e1a8 <__func__.0+0x2c0>
    8001fb92:	0000e517          	auipc	a0,0xe
    8001fb96:	6ce50513          	addi	a0,a0,1742 # 8002e260 <__func__.0+0x378>
    8001fb9a:	0910b0ef          	jal	8002b42a <printf>
    8001fb9e:	4511                	li	a0,4
    8001fba0:	b68e10ef          	jal	80000f08 <goto_priv>
    8001fba4:	c81e10ef          	jal	80001824 <reset_state>
}
    8001fba8:	60a2                	ld	ra,8(sp)
    8001fbaa:	8522                	mv	a0,s0
    8001fbac:	6402                	ld	s0,0(sp)
    8001fbae:	0141                	addi	sp,sp,16
    8001fbb0:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fbb2:	4401                	li	s0,0
    TEST_END(); 
    8001fbb4:	0000e597          	auipc	a1,0xe
    8001fbb8:	60458593          	addi	a1,a1,1540 # 8002e1b8 <__func__.0+0x2d0>
    8001fbbc:	bfd9                	j	8001fb92 <instret_test_4+0x9e>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fbbe:	0000e517          	auipc	a0,0xe
    8001fbc2:	64250513          	addi	a0,a0,1602 # 8002e200 <__func__.0+0x318>
    8001fbc6:	0650b0ef          	jal	8002b42a <printf>
    8001fbca:	02900513          	li	a0,41
    8001fbce:	54a0a0ef          	jal	8002a118 <putchar>
    8001fbd2:	b75d                	j	8001fb78 <instret_test_4+0x84>

000000008001fbd4 <instret_test_5>:

bool instret_test_5() {
    8001fbd4:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fbd6:	0000e597          	auipc	a1,0xe
    8001fbda:	bca58593          	addi	a1,a1,-1078 # 8002d7a0 <__func__.26>
    8001fbde:	0000e517          	auipc	a0,0xe
    8001fbe2:	5ea50513          	addi	a0,a0,1514 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_5() {
    8001fbe6:	ec06                	sd	ra,24(sp)
    8001fbe8:	e822                	sd	s0,16(sp)
    8001fbea:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fbec:	03f0b0ef          	jal	8002b42a <printf>
    8001fbf0:	4529                	li	a0,10
    8001fbf2:	5260a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fbf6:	4511                	li	a0,4
    8001fbf8:	b10e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fbfc:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fc00:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fc04:	4509                	li	a0,2
    8001fc06:	b02e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc0a:	a02e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fc0e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fc12:	08200593          	li	a1,130
    8001fc16:	00016617          	auipc	a2,0x16
    8001fc1a:	1ba60613          	addi	a2,a2,442 # 80035dd0 <__func__.0+0x7ee8>
    8001fc1e:	0000e517          	auipc	a0,0xe
    8001fc22:	5c250513          	addi	a0,a0,1474 # 8002e1e0 <__func__.0+0x2f8>
    8001fc26:	0050b0ef          	jal	8002b42a <printf>
    8001fc2a:	00038797          	auipc	a5,0x38
    8001fc2e:	3e77c783          	lbu	a5,999(a5) # 80058011 <excpt+0x1>
    8001fc32:	00038497          	auipc	s1,0x38
    8001fc36:	3de48493          	addi	s1,s1,990 # 80058010 <excpt>
    8001fc3a:	0000e597          	auipc	a1,0xe
    8001fc3e:	57e58593          	addi	a1,a1,1406 # 8002e1b8 <__func__.0+0x2d0>
    8001fc42:	cf89                	beqz	a5,8001fc5c <instret_test_5+0x88>
    8001fc44:	6498                	ld	a4,8(s1)
    8001fc46:	47d9                	li	a5,22
    8001fc48:	0000e597          	auipc	a1,0xe
    8001fc4c:	56058593          	addi	a1,a1,1376 # 8002e1a8 <__func__.0+0x2c0>
    8001fc50:	00f70663          	beq	a4,a5,8001fc5c <instret_test_5+0x88>
    8001fc54:	0000e597          	auipc	a1,0xe
    8001fc58:	56458593          	addi	a1,a1,1380 # 8002e1b8 <__func__.0+0x2d0>
    8001fc5c:	0000e517          	auipc	a0,0xe
    8001fc60:	59c50513          	addi	a0,a0,1436 # 8002e1f8 <__func__.0+0x310>
    8001fc64:	7c60b0ef          	jal	8002b42a <printf>
    8001fc68:	00038797          	auipc	a5,0x38
    8001fc6c:	3a97c783          	lbu	a5,937(a5) # 80058011 <excpt+0x1>
    8001fc70:	c789                	beqz	a5,8001fc7a <instret_test_5+0xa6>
    8001fc72:	6498                	ld	a4,8(s1)
    8001fc74:	47d9                	li	a5,22
    8001fc76:	00f70c63          	beq	a4,a5,8001fc8e <instret_test_5+0xba>
    8001fc7a:	0000e517          	auipc	a0,0xe
    8001fc7e:	58650513          	addi	a0,a0,1414 # 8002e200 <__func__.0+0x318>
    8001fc82:	7a80b0ef          	jal	8002b42a <printf>
    8001fc86:	02900513          	li	a0,41
    8001fc8a:	48e0a0ef          	jal	8002a118 <putchar>
    8001fc8e:	4529                	li	a0,10
    8001fc90:	4880a0ef          	jal	8002a118 <putchar>
    8001fc94:	00038417          	auipc	s0,0x38
    8001fc98:	37d44403          	lbu	s0,893(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fc9c:	0000e597          	auipc	a1,0xe
    8001fca0:	51c58593          	addi	a1,a1,1308 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fca4:	cc11                	beqz	s0,8001fcc0 <instret_test_5+0xec>
    8001fca6:	6498                	ld	a4,8(s1)
    8001fca8:	47d9                	li	a5,22
    TEST_END(); 
    8001fcaa:	0000e597          	auipc	a1,0xe
    8001fcae:	4fe58593          	addi	a1,a1,1278 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fcb2:	00f70763          	beq	a4,a5,8001fcc0 <instret_test_5+0xec>
    8001fcb6:	4401                	li	s0,0
    TEST_END(); 
    8001fcb8:	0000e597          	auipc	a1,0xe
    8001fcbc:	50058593          	addi	a1,a1,1280 # 8002e1b8 <__func__.0+0x2d0>
    8001fcc0:	0000e517          	auipc	a0,0xe
    8001fcc4:	5a050513          	addi	a0,a0,1440 # 8002e260 <__func__.0+0x378>
    8001fcc8:	7620b0ef          	jal	8002b42a <printf>
    8001fccc:	4511                	li	a0,4
    8001fcce:	a3ae10ef          	jal	80000f08 <goto_priv>
    8001fcd2:	b53e10ef          	jal	80001824 <reset_state>
}
    8001fcd6:	60e2                	ld	ra,24(sp)
    8001fcd8:	8522                	mv	a0,s0
    8001fcda:	6442                	ld	s0,16(sp)
    8001fcdc:	64a2                	ld	s1,8(sp)
    8001fcde:	6105                	addi	sp,sp,32
    8001fce0:	8082                	ret

000000008001fce2 <instret_test_6>:

bool instret_test_6() {
    8001fce2:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fce4:	0000e597          	auipc	a1,0xe
    8001fce8:	acc58593          	addi	a1,a1,-1332 # 8002d7b0 <__func__.25>
    8001fcec:	0000e517          	auipc	a0,0xe
    8001fcf0:	4dc50513          	addi	a0,a0,1244 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_6() {
    8001fcf4:	e406                	sd	ra,8(sp)
    8001fcf6:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fcf8:	7320b0ef          	jal	8002b42a <printf>
    8001fcfc:	4529                	li	a0,10
    8001fcfe:	41a0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fd02:	4511                	li	a0,4
    8001fd04:	a04e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fd08:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fd0c:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fd10:	4509                	li	a0,2
    8001fd12:	9f6e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd16:	8f6e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fd1a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fd1e:	08200593          	li	a1,130
    8001fd22:	00016617          	auipc	a2,0x16
    8001fd26:	10e60613          	addi	a2,a2,270 # 80035e30 <__func__.0+0x7f48>
    8001fd2a:	0000e517          	auipc	a0,0xe
    8001fd2e:	4b650513          	addi	a0,a0,1206 # 8002e1e0 <__func__.0+0x2f8>
    8001fd32:	6f80b0ef          	jal	8002b42a <printf>
    8001fd36:	00038797          	auipc	a5,0x38
    8001fd3a:	2db7c783          	lbu	a5,731(a5) # 80058011 <excpt+0x1>
    8001fd3e:	0000e597          	auipc	a1,0xe
    8001fd42:	46a58593          	addi	a1,a1,1130 # 8002e1a8 <__func__.0+0x2c0>
    8001fd46:	c789                	beqz	a5,8001fd50 <instret_test_6+0x6e>
    8001fd48:	0000e597          	auipc	a1,0xe
    8001fd4c:	47058593          	addi	a1,a1,1136 # 8002e1b8 <__func__.0+0x2d0>
    8001fd50:	0000e517          	auipc	a0,0xe
    8001fd54:	4a850513          	addi	a0,a0,1192 # 8002e1f8 <__func__.0+0x310>
    8001fd58:	6d20b0ef          	jal	8002b42a <printf>
    8001fd5c:	00038797          	auipc	a5,0x38
    8001fd60:	2b57c783          	lbu	a5,693(a5) # 80058011 <excpt+0x1>
    8001fd64:	e7a1                	bnez	a5,8001fdac <instret_test_6+0xca>
    8001fd66:	4529                	li	a0,10
    8001fd68:	3b00a0ef          	jal	8002a118 <putchar>
    8001fd6c:	00038797          	auipc	a5,0x38
    8001fd70:	2a57c783          	lbu	a5,677(a5) # 80058011 <excpt+0x1>
    8001fd74:	e795                	bnez	a5,8001fda0 <instret_test_6+0xbe>
    8001fd76:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fd78:	0000e597          	auipc	a1,0xe
    8001fd7c:	43058593          	addi	a1,a1,1072 # 8002e1a8 <__func__.0+0x2c0>
    8001fd80:	0000e517          	auipc	a0,0xe
    8001fd84:	4e050513          	addi	a0,a0,1248 # 8002e260 <__func__.0+0x378>
    8001fd88:	6a20b0ef          	jal	8002b42a <printf>
    8001fd8c:	4511                	li	a0,4
    8001fd8e:	97ae10ef          	jal	80000f08 <goto_priv>
    8001fd92:	a93e10ef          	jal	80001824 <reset_state>
}
    8001fd96:	60a2                	ld	ra,8(sp)
    8001fd98:	8522                	mv	a0,s0
    8001fd9a:	6402                	ld	s0,0(sp)
    8001fd9c:	0141                	addi	sp,sp,16
    8001fd9e:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fda0:	4401                	li	s0,0
    TEST_END(); 
    8001fda2:	0000e597          	auipc	a1,0xe
    8001fda6:	41658593          	addi	a1,a1,1046 # 8002e1b8 <__func__.0+0x2d0>
    8001fdaa:	bfd9                	j	8001fd80 <instret_test_6+0x9e>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fdac:	0000e517          	auipc	a0,0xe
    8001fdb0:	45450513          	addi	a0,a0,1108 # 8002e200 <__func__.0+0x318>
    8001fdb4:	6760b0ef          	jal	8002b42a <printf>
    8001fdb8:	02900513          	li	a0,41
    8001fdbc:	35c0a0ef          	jal	8002a118 <putchar>
    8001fdc0:	b75d                	j	8001fd66 <instret_test_6+0x84>

000000008001fdc2 <instret_test_7>:

bool instret_test_7() {
    8001fdc2:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fdc4:	0000e597          	auipc	a1,0xe
    8001fdc8:	9fc58593          	addi	a1,a1,-1540 # 8002d7c0 <__func__.24>
    8001fdcc:	0000e517          	auipc	a0,0xe
    8001fdd0:	3fc50513          	addi	a0,a0,1020 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_7() {
    8001fdd4:	e406                	sd	ra,8(sp)
    8001fdd6:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fdd8:	6520b0ef          	jal	8002b42a <printf>
    8001fddc:	4529                	li	a0,10
    8001fdde:	33a0a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fde2:	4511                	li	a0,4
    8001fde4:	924e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fde8:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fdec:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fdf0:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001fdf4:	4501                	li	a0,0
    8001fdf6:	912e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fdfa:	812e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fdfe:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe02:	08200593          	li	a1,130
    8001fe06:	00016617          	auipc	a2,0x16
    8001fe0a:	07260613          	addi	a2,a2,114 # 80035e78 <__func__.0+0x7f90>
    8001fe0e:	0000e517          	auipc	a0,0xe
    8001fe12:	3d250513          	addi	a0,a0,978 # 8002e1e0 <__func__.0+0x2f8>
    8001fe16:	6140b0ef          	jal	8002b42a <printf>
    8001fe1a:	00038797          	auipc	a5,0x38
    8001fe1e:	1f77c783          	lbu	a5,503(a5) # 80058011 <excpt+0x1>
    8001fe22:	0000e597          	auipc	a1,0xe
    8001fe26:	38658593          	addi	a1,a1,902 # 8002e1a8 <__func__.0+0x2c0>
    8001fe2a:	c789                	beqz	a5,8001fe34 <instret_test_7+0x72>
    8001fe2c:	0000e597          	auipc	a1,0xe
    8001fe30:	38c58593          	addi	a1,a1,908 # 8002e1b8 <__func__.0+0x2d0>
    8001fe34:	0000e517          	auipc	a0,0xe
    8001fe38:	3c450513          	addi	a0,a0,964 # 8002e1f8 <__func__.0+0x310>
    8001fe3c:	5ee0b0ef          	jal	8002b42a <printf>
    8001fe40:	00038797          	auipc	a5,0x38
    8001fe44:	1d17c783          	lbu	a5,465(a5) # 80058011 <excpt+0x1>
    8001fe48:	e7a1                	bnez	a5,8001fe90 <instret_test_7+0xce>
    8001fe4a:	4529                	li	a0,10
    8001fe4c:	2cc0a0ef          	jal	8002a118 <putchar>
    8001fe50:	00038797          	auipc	a5,0x38
    8001fe54:	1c17c783          	lbu	a5,449(a5) # 80058011 <excpt+0x1>
    8001fe58:	e795                	bnez	a5,8001fe84 <instret_test_7+0xc2>
    8001fe5a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fe5c:	0000e597          	auipc	a1,0xe
    8001fe60:	34c58593          	addi	a1,a1,844 # 8002e1a8 <__func__.0+0x2c0>
    8001fe64:	0000e517          	auipc	a0,0xe
    8001fe68:	3fc50513          	addi	a0,a0,1020 # 8002e260 <__func__.0+0x378>
    8001fe6c:	5be0b0ef          	jal	8002b42a <printf>
    8001fe70:	4511                	li	a0,4
    8001fe72:	896e10ef          	jal	80000f08 <goto_priv>
    8001fe76:	9afe10ef          	jal	80001824 <reset_state>
}
    8001fe7a:	60a2                	ld	ra,8(sp)
    8001fe7c:	8522                	mv	a0,s0
    8001fe7e:	6402                	ld	s0,0(sp)
    8001fe80:	0141                	addi	sp,sp,16
    8001fe82:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe84:	4401                	li	s0,0
    TEST_END(); 
    8001fe86:	0000e597          	auipc	a1,0xe
    8001fe8a:	33258593          	addi	a1,a1,818 # 8002e1b8 <__func__.0+0x2d0>
    8001fe8e:	bfd9                	j	8001fe64 <instret_test_7+0xa2>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe90:	0000e517          	auipc	a0,0xe
    8001fe94:	37050513          	addi	a0,a0,880 # 8002e200 <__func__.0+0x318>
    8001fe98:	5920b0ef          	jal	8002b42a <printf>
    8001fe9c:	02900513          	li	a0,41
    8001fea0:	2780a0ef          	jal	8002a118 <putchar>
    8001fea4:	b75d                	j	8001fe4a <instret_test_7+0x88>

000000008001fea6 <instret_test_8>:

bool instret_test_8() {
    8001fea6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fea8:	0000e597          	auipc	a1,0xe
    8001feac:	92858593          	addi	a1,a1,-1752 # 8002d7d0 <__func__.23>
    8001feb0:	0000e517          	auipc	a0,0xe
    8001feb4:	31850513          	addi	a0,a0,792 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_8() {
    8001feb8:	ec06                	sd	ra,24(sp)
    8001feba:	e822                	sd	s0,16(sp)
    8001febc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001febe:	56c0b0ef          	jal	8002b42a <printf>
    8001fec2:	4529                	li	a0,10
    8001fec4:	2540a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001fec8:	4511                	li	a0,4
    8001feca:	83ee10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fece:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fed2:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fed6:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001feda:	4501                	li	a0,0
    8001fedc:	82ce10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fee0:	f2de00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fee4:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001fee8:	08200593          	li	a1,130
    8001feec:	00016617          	auipc	a2,0x16
    8001fef0:	fe460613          	addi	a2,a2,-28 # 80035ed0 <__func__.0+0x7fe8>
    8001fef4:	0000e517          	auipc	a0,0xe
    8001fef8:	2ec50513          	addi	a0,a0,748 # 8002e1e0 <__func__.0+0x2f8>
    8001fefc:	52e0b0ef          	jal	8002b42a <printf>
    8001ff00:	00038797          	auipc	a5,0x38
    8001ff04:	1117c783          	lbu	a5,273(a5) # 80058011 <excpt+0x1>
    8001ff08:	00038497          	auipc	s1,0x38
    8001ff0c:	10848493          	addi	s1,s1,264 # 80058010 <excpt>
    8001ff10:	0000e597          	auipc	a1,0xe
    8001ff14:	2a858593          	addi	a1,a1,680 # 8002e1b8 <__func__.0+0x2d0>
    8001ff18:	cf89                	beqz	a5,8001ff32 <instret_test_8+0x8c>
    8001ff1a:	6498                	ld	a4,8(s1)
    8001ff1c:	47d9                	li	a5,22
    8001ff1e:	0000e597          	auipc	a1,0xe
    8001ff22:	28a58593          	addi	a1,a1,650 # 8002e1a8 <__func__.0+0x2c0>
    8001ff26:	00f70663          	beq	a4,a5,8001ff32 <instret_test_8+0x8c>
    8001ff2a:	0000e597          	auipc	a1,0xe
    8001ff2e:	28e58593          	addi	a1,a1,654 # 8002e1b8 <__func__.0+0x2d0>
    8001ff32:	0000e517          	auipc	a0,0xe
    8001ff36:	2c650513          	addi	a0,a0,710 # 8002e1f8 <__func__.0+0x310>
    8001ff3a:	4f00b0ef          	jal	8002b42a <printf>
    8001ff3e:	00038797          	auipc	a5,0x38
    8001ff42:	0d37c783          	lbu	a5,211(a5) # 80058011 <excpt+0x1>
    8001ff46:	c789                	beqz	a5,8001ff50 <instret_test_8+0xaa>
    8001ff48:	6498                	ld	a4,8(s1)
    8001ff4a:	47d9                	li	a5,22
    8001ff4c:	00f70c63          	beq	a4,a5,8001ff64 <instret_test_8+0xbe>
    8001ff50:	0000e517          	auipc	a0,0xe
    8001ff54:	2b050513          	addi	a0,a0,688 # 8002e200 <__func__.0+0x318>
    8001ff58:	4d20b0ef          	jal	8002b42a <printf>
    8001ff5c:	02900513          	li	a0,41
    8001ff60:	1b80a0ef          	jal	8002a118 <putchar>
    8001ff64:	4529                	li	a0,10
    8001ff66:	1b20a0ef          	jal	8002a118 <putchar>
    8001ff6a:	00038417          	auipc	s0,0x38
    8001ff6e:	0a744403          	lbu	s0,167(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001ff72:	0000e597          	auipc	a1,0xe
    8001ff76:	24658593          	addi	a1,a1,582 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001ff7a:	cc11                	beqz	s0,8001ff96 <instret_test_8+0xf0>
    8001ff7c:	6498                	ld	a4,8(s1)
    8001ff7e:	47d9                	li	a5,22
    TEST_END(); 
    8001ff80:	0000e597          	auipc	a1,0xe
    8001ff84:	22858593          	addi	a1,a1,552 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001ff88:	00f70763          	beq	a4,a5,8001ff96 <instret_test_8+0xf0>
    8001ff8c:	4401                	li	s0,0
    TEST_END(); 
    8001ff8e:	0000e597          	auipc	a1,0xe
    8001ff92:	22a58593          	addi	a1,a1,554 # 8002e1b8 <__func__.0+0x2d0>
    8001ff96:	0000e517          	auipc	a0,0xe
    8001ff9a:	2ca50513          	addi	a0,a0,714 # 8002e260 <__func__.0+0x378>
    8001ff9e:	48c0b0ef          	jal	8002b42a <printf>
    8001ffa2:	4511                	li	a0,4
    8001ffa4:	f65e00ef          	jal	80000f08 <goto_priv>
    8001ffa8:	87de10ef          	jal	80001824 <reset_state>
}
    8001ffac:	60e2                	ld	ra,24(sp)
    8001ffae:	8522                	mv	a0,s0
    8001ffb0:	6442                	ld	s0,16(sp)
    8001ffb2:	64a2                	ld	s1,8(sp)
    8001ffb4:	6105                	addi	sp,sp,32
    8001ffb6:	8082                	ret

000000008001ffb8 <instret_test_9>:

bool instret_test_9() {
    8001ffb8:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ffba:	0000e597          	auipc	a1,0xe
    8001ffbe:	82658593          	addi	a1,a1,-2010 # 8002d7e0 <__func__.22>
    8001ffc2:	0000e517          	auipc	a0,0xe
    8001ffc6:	20650513          	addi	a0,a0,518 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_9() {
    8001ffca:	ec06                	sd	ra,24(sp)
    8001ffcc:	e822                	sd	s0,16(sp)
    8001ffce:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ffd0:	45a0b0ef          	jal	8002b42a <printf>
    8001ffd4:	4529                	li	a0,10
    8001ffd6:	1420a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    8001ffda:	4511                	li	a0,4
    8001ffdc:	f2de00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001ffe0:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001ffe4:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    8001ffe8:	4505                	li	a0,1
    8001ffea:	f1fe00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ffee:	e1fe00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fff2:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001fff6:	08200593          	li	a1,130
    8001fffa:	00016617          	auipc	a2,0x16
    8001fffe:	f4660613          	addi	a2,a2,-186 # 80035f40 <__func__.0+0x8058>
    80020002:	0000e517          	auipc	a0,0xe
    80020006:	1de50513          	addi	a0,a0,478 # 8002e1e0 <__func__.0+0x2f8>
    8002000a:	4200b0ef          	jal	8002b42a <printf>
    8002000e:	00038797          	auipc	a5,0x38
    80020012:	0037c783          	lbu	a5,3(a5) # 80058011 <excpt+0x1>
    80020016:	00038497          	auipc	s1,0x38
    8002001a:	ffa48493          	addi	s1,s1,-6 # 80058010 <excpt>
    8002001e:	0000e597          	auipc	a1,0xe
    80020022:	19a58593          	addi	a1,a1,410 # 8002e1b8 <__func__.0+0x2d0>
    80020026:	cf89                	beqz	a5,80020040 <instret_test_9+0x88>
    80020028:	6498                	ld	a4,8(s1)
    8002002a:	4789                	li	a5,2
    8002002c:	0000e597          	auipc	a1,0xe
    80020030:	17c58593          	addi	a1,a1,380 # 8002e1a8 <__func__.0+0x2c0>
    80020034:	00f70663          	beq	a4,a5,80020040 <instret_test_9+0x88>
    80020038:	0000e597          	auipc	a1,0xe
    8002003c:	18058593          	addi	a1,a1,384 # 8002e1b8 <__func__.0+0x2d0>
    80020040:	0000e517          	auipc	a0,0xe
    80020044:	1b850513          	addi	a0,a0,440 # 8002e1f8 <__func__.0+0x310>
    80020048:	3e20b0ef          	jal	8002b42a <printf>
    8002004c:	00038797          	auipc	a5,0x38
    80020050:	fc57c783          	lbu	a5,-59(a5) # 80058011 <excpt+0x1>
    80020054:	c789                	beqz	a5,8002005e <instret_test_9+0xa6>
    80020056:	6498                	ld	a4,8(s1)
    80020058:	4789                	li	a5,2
    8002005a:	00f70c63          	beq	a4,a5,80020072 <instret_test_9+0xba>
    8002005e:	0000e517          	auipc	a0,0xe
    80020062:	1a250513          	addi	a0,a0,418 # 8002e200 <__func__.0+0x318>
    80020066:	3c40b0ef          	jal	8002b42a <printf>
    8002006a:	02900513          	li	a0,41
    8002006e:	0aa0a0ef          	jal	8002a118 <putchar>
    80020072:	4529                	li	a0,10
    80020074:	0a40a0ef          	jal	8002a118 <putchar>
    80020078:	00038417          	auipc	s0,0x38
    8002007c:	f9944403          	lbu	s0,-103(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020080:	0000e597          	auipc	a1,0xe
    80020084:	13858593          	addi	a1,a1,312 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020088:	cc11                	beqz	s0,800200a4 <instret_test_9+0xec>
    8002008a:	6498                	ld	a4,8(s1)
    8002008c:	4789                	li	a5,2
    TEST_END(); 
    8002008e:	0000e597          	auipc	a1,0xe
    80020092:	11a58593          	addi	a1,a1,282 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020096:	00f70763          	beq	a4,a5,800200a4 <instret_test_9+0xec>
    8002009a:	4401                	li	s0,0
    TEST_END(); 
    8002009c:	0000e597          	auipc	a1,0xe
    800200a0:	11c58593          	addi	a1,a1,284 # 8002e1b8 <__func__.0+0x2d0>
    800200a4:	0000e517          	auipc	a0,0xe
    800200a8:	1bc50513          	addi	a0,a0,444 # 8002e260 <__func__.0+0x378>
    800200ac:	37e0b0ef          	jal	8002b42a <printf>
    800200b0:	4511                	li	a0,4
    800200b2:	e57e00ef          	jal	80000f08 <goto_priv>
    800200b6:	f6ee10ef          	jal	80001824 <reset_state>
}
    800200ba:	60e2                	ld	ra,24(sp)
    800200bc:	8522                	mv	a0,s0
    800200be:	6442                	ld	s0,16(sp)
    800200c0:	64a2                	ld	s1,8(sp)
    800200c2:	6105                	addi	sp,sp,32
    800200c4:	8082                	ret

00000000800200c6 <instret_test_10>:

bool instret_test_10() {
    800200c6:	1141                	addi	sp,sp,-16

    TEST_START();    
    800200c8:	0000d597          	auipc	a1,0xd
    800200cc:	72858593          	addi	a1,a1,1832 # 8002d7f0 <__func__.21>
    800200d0:	0000e517          	auipc	a0,0xe
    800200d4:	0f850513          	addi	a0,a0,248 # 8002e1c8 <__func__.0+0x2e0>
bool instret_test_10() {
    800200d8:	e406                	sd	ra,8(sp)
    800200da:	e022                	sd	s0,0(sp)
    TEST_START();    
    800200dc:	34e0b0ef          	jal	8002b42a <printf>
    800200e0:	4529                	li	a0,10
    800200e2:	0360a0ef          	jal	8002a118 <putchar>
    goto_priv(PRIV_M);
    800200e6:	4511                	li	a0,4
    800200e8:	e21e00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    800200ec:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    800200f0:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    800200f4:	4509                	li	a0,2
    800200f6:	e13e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800200fa:	d13e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    800200fe:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80020102:	08200593          	li	a1,130
    80020106:	00016617          	auipc	a2,0x16
    8002010a:	e9a60613          	addi	a2,a2,-358 # 80035fa0 <__func__.0+0x80b8>
    8002010e:	0000e517          	auipc	a0,0xe
    80020112:	0d250513          	addi	a0,a0,210 # 8002e1e0 <__func__.0+0x2f8>
    80020116:	3140b0ef          	jal	8002b42a <printf>
    8002011a:	00038797          	auipc	a5,0x38
    8002011e:	ef77c783          	lbu	a5,-265(a5) # 80058011 <excpt+0x1>
    80020122:	0000e597          	auipc	a1,0xe
    80020126:	08658593          	addi	a1,a1,134 # 8002e1a8 <__func__.0+0x2c0>
    8002012a:	c789                	beqz	a5,80020134 <instret_test_10+0x6e>
    8002012c:	0000e597          	auipc	a1,0xe
    80020130:	08c58593          	addi	a1,a1,140 # 8002e1b8 <__func__.0+0x2d0>
    80020134:	0000e517          	auipc	a0,0xe
    80020138:	0c450513          	addi	a0,a0,196 # 8002e1f8 <__func__.0+0x310>
    8002013c:	2ee0b0ef          	jal	8002b42a <printf>
    80020140:	00038797          	auipc	a5,0x38
    80020144:	ed17c783          	lbu	a5,-303(a5) # 80058011 <excpt+0x1>
    80020148:	e7a1                	bnez	a5,80020190 <instret_test_10+0xca>
    8002014a:	4529                	li	a0,10
    8002014c:	7cd090ef          	jal	8002a118 <putchar>
    80020150:	00038797          	auipc	a5,0x38
    80020154:	ec17c783          	lbu	a5,-319(a5) # 80058011 <excpt+0x1>
    80020158:	e795                	bnez	a5,80020184 <instret_test_10+0xbe>
    8002015a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002015c:	0000e597          	auipc	a1,0xe
    80020160:	04c58593          	addi	a1,a1,76 # 8002e1a8 <__func__.0+0x2c0>
    80020164:	0000e517          	auipc	a0,0xe
    80020168:	0fc50513          	addi	a0,a0,252 # 8002e260 <__func__.0+0x378>
    8002016c:	2be0b0ef          	jal	8002b42a <printf>
    80020170:	4511                	li	a0,4
    80020172:	d97e00ef          	jal	80000f08 <goto_priv>
    80020176:	eaee10ef          	jal	80001824 <reset_state>
}
    8002017a:	60a2                	ld	ra,8(sp)
    8002017c:	8522                	mv	a0,s0
    8002017e:	6402                	ld	s0,0(sp)
    80020180:	0141                	addi	sp,sp,16
    80020182:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80020184:	4401                	li	s0,0
    TEST_END(); 
    80020186:	0000e597          	auipc	a1,0xe
    8002018a:	03258593          	addi	a1,a1,50 # 8002e1b8 <__func__.0+0x2d0>
    8002018e:	bfd9                	j	80020164 <instret_test_10+0x9e>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80020190:	0000e517          	auipc	a0,0xe
    80020194:	07050513          	addi	a0,a0,112 # 8002e200 <__func__.0+0x318>
    80020198:	2920b0ef          	jal	8002b42a <printf>
    8002019c:	02900513          	li	a0,41
    800201a0:	779090ef          	jal	8002a118 <putchar>
    800201a4:	b75d                	j	8002014a <instret_test_10+0x84>

00000000800201a6 <timecmp_test_1>:


bool timecmp_test_1() {
    800201a6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800201a8:	0000d597          	auipc	a1,0xd
    800201ac:	65858593          	addi	a1,a1,1624 # 8002d800 <__func__.20>
    800201b0:	0000e517          	auipc	a0,0xe
    800201b4:	01850513          	addi	a0,a0,24 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_1() {
    800201b8:	ec06                	sd	ra,24(sp)
    800201ba:	e822                	sd	s0,16(sp)
    800201bc:	e426                	sd	s1,8(sp)
    TEST_START();    
    800201be:	26c0b0ef          	jal	8002b42a <printf>
    800201c2:	4529                	li	a0,10
    800201c4:	755090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800201c8:	57fd                	li	a5,-1
    800201ca:	17fe                	slli	a5,a5,0x3f
    800201cc:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800201d0:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800201d4:	450d                	li	a0,3
    800201d6:	d33e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800201da:	c33e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800201de:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800201e2:	08200593          	li	a1,130
    800201e6:	00016617          	auipc	a2,0x16
    800201ea:	e0a60613          	addi	a2,a2,-502 # 80035ff0 <__func__.0+0x8108>
    800201ee:	0000e517          	auipc	a0,0xe
    800201f2:	ff250513          	addi	a0,a0,-14 # 8002e1e0 <__func__.0+0x2f8>
    800201f6:	2340b0ef          	jal	8002b42a <printf>
    800201fa:	00038797          	auipc	a5,0x38
    800201fe:	e177c783          	lbu	a5,-489(a5) # 80058011 <excpt+0x1>
    80020202:	00038497          	auipc	s1,0x38
    80020206:	e0e48493          	addi	s1,s1,-498 # 80058010 <excpt>
    8002020a:	0000e597          	auipc	a1,0xe
    8002020e:	fae58593          	addi	a1,a1,-82 # 8002e1b8 <__func__.0+0x2d0>
    80020212:	cf89                	beqz	a5,8002022c <timecmp_test_1+0x86>
    80020214:	6498                	ld	a4,8(s1)
    80020216:	4789                	li	a5,2
    80020218:	0000e597          	auipc	a1,0xe
    8002021c:	f9058593          	addi	a1,a1,-112 # 8002e1a8 <__func__.0+0x2c0>
    80020220:	00f70663          	beq	a4,a5,8002022c <timecmp_test_1+0x86>
    80020224:	0000e597          	auipc	a1,0xe
    80020228:	f9458593          	addi	a1,a1,-108 # 8002e1b8 <__func__.0+0x2d0>
    8002022c:	0000e517          	auipc	a0,0xe
    80020230:	fcc50513          	addi	a0,a0,-52 # 8002e1f8 <__func__.0+0x310>
    80020234:	1f60b0ef          	jal	8002b42a <printf>
    80020238:	00038797          	auipc	a5,0x38
    8002023c:	dd97c783          	lbu	a5,-551(a5) # 80058011 <excpt+0x1>
    80020240:	c789                	beqz	a5,8002024a <timecmp_test_1+0xa4>
    80020242:	6498                	ld	a4,8(s1)
    80020244:	4789                	li	a5,2
    80020246:	00f70c63          	beq	a4,a5,8002025e <timecmp_test_1+0xb8>
    8002024a:	0000e517          	auipc	a0,0xe
    8002024e:	fb650513          	addi	a0,a0,-74 # 8002e200 <__func__.0+0x318>
    80020252:	1d80b0ef          	jal	8002b42a <printf>
    80020256:	02900513          	li	a0,41
    8002025a:	6bf090ef          	jal	8002a118 <putchar>
    8002025e:	4529                	li	a0,10
    80020260:	6b9090ef          	jal	8002a118 <putchar>
    80020264:	00038797          	auipc	a5,0x38
    80020268:	dad7c783          	lbu	a5,-595(a5) # 80058011 <excpt+0x1>
    8002026c:	4401                	li	s0,0
    8002026e:	c789                	beqz	a5,80020278 <timecmp_test_1+0xd2>
    80020270:	6480                	ld	s0,8(s1)
    80020272:	1479                	addi	s0,s0,-2
    80020274:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    80020278:	4505                	li	a0,1
    8002027a:	c8fe00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002027e:	b8fe00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020282:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020286:	08200593          	li	a1,130
    8002028a:	00016617          	auipc	a2,0x16
    8002028e:	dce60613          	addi	a2,a2,-562 # 80036058 <__func__.0+0x8170>
    80020292:	0000e517          	auipc	a0,0xe
    80020296:	f4e50513          	addi	a0,a0,-178 # 8002e1e0 <__func__.0+0x2f8>
    8002029a:	1900b0ef          	jal	8002b42a <printf>
    8002029e:	00038797          	auipc	a5,0x38
    800202a2:	d737c783          	lbu	a5,-653(a5) # 80058011 <excpt+0x1>
    800202a6:	0000e597          	auipc	a1,0xe
    800202aa:	f1258593          	addi	a1,a1,-238 # 8002e1b8 <__func__.0+0x2d0>
    800202ae:	cf89                	beqz	a5,800202c8 <timecmp_test_1+0x122>
    800202b0:	6498                	ld	a4,8(s1)
    800202b2:	4789                	li	a5,2
    800202b4:	0000e597          	auipc	a1,0xe
    800202b8:	ef458593          	addi	a1,a1,-268 # 8002e1a8 <__func__.0+0x2c0>
    800202bc:	00f70663          	beq	a4,a5,800202c8 <timecmp_test_1+0x122>
    800202c0:	0000e597          	auipc	a1,0xe
    800202c4:	ef858593          	addi	a1,a1,-264 # 8002e1b8 <__func__.0+0x2d0>
    800202c8:	0000e517          	auipc	a0,0xe
    800202cc:	f3050513          	addi	a0,a0,-208 # 8002e1f8 <__func__.0+0x310>
    800202d0:	15a0b0ef          	jal	8002b42a <printf>
    800202d4:	00038797          	auipc	a5,0x38
    800202d8:	d3d7c783          	lbu	a5,-707(a5) # 80058011 <excpt+0x1>
    800202dc:	c789                	beqz	a5,800202e6 <timecmp_test_1+0x140>
    800202de:	6498                	ld	a4,8(s1)
    800202e0:	4789                	li	a5,2
    800202e2:	00f70c63          	beq	a4,a5,800202fa <timecmp_test_1+0x154>
    800202e6:	0000e517          	auipc	a0,0xe
    800202ea:	f1a50513          	addi	a0,a0,-230 # 8002e200 <__func__.0+0x318>
    800202ee:	13c0b0ef          	jal	8002b42a <printf>
    800202f2:	02900513          	li	a0,41
    800202f6:	623090ef          	jal	8002a118 <putchar>
    800202fa:	4529                	li	a0,10
    800202fc:	61d090ef          	jal	8002a118 <putchar>
    80020300:	c015                	beqz	s0,80020324 <timecmp_test_1+0x17e>
    80020302:	00038417          	auipc	s0,0x38
    80020306:	d0f44403          	lbu	s0,-753(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002030a:	0000e597          	auipc	a1,0xe
    8002030e:	eae58593          	addi	a1,a1,-338 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020312:	cc11                	beqz	s0,8002032e <timecmp_test_1+0x188>
    80020314:	6498                	ld	a4,8(s1)
    80020316:	4789                	li	a5,2
    TEST_END(); 
    80020318:	0000e597          	auipc	a1,0xe
    8002031c:	e9058593          	addi	a1,a1,-368 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020320:	00f70763          	beq	a4,a5,8002032e <timecmp_test_1+0x188>
    80020324:	4401                	li	s0,0
    TEST_END(); 
    80020326:	0000e597          	auipc	a1,0xe
    8002032a:	e9258593          	addi	a1,a1,-366 # 8002e1b8 <__func__.0+0x2d0>
    8002032e:	0000e517          	auipc	a0,0xe
    80020332:	f3250513          	addi	a0,a0,-206 # 8002e260 <__func__.0+0x378>
    80020336:	0f40b0ef          	jal	8002b42a <printf>
    8002033a:	4511                	li	a0,4
    8002033c:	bcde00ef          	jal	80000f08 <goto_priv>
    80020340:	ce4e10ef          	jal	80001824 <reset_state>
}
    80020344:	60e2                	ld	ra,24(sp)
    80020346:	8522                	mv	a0,s0
    80020348:	6442                	ld	s0,16(sp)
    8002034a:	64a2                	ld	s1,8(sp)
    8002034c:	6105                	addi	sp,sp,32
    8002034e:	8082                	ret

0000000080020350 <timecmp_test_2>:

bool timecmp_test_2() {
    80020350:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020352:	0000d597          	auipc	a1,0xd
    80020356:	4be58593          	addi	a1,a1,1214 # 8002d810 <__func__.19>
    8002035a:	0000e517          	auipc	a0,0xe
    8002035e:	e6e50513          	addi	a0,a0,-402 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_2() {
    80020362:	ec06                	sd	ra,24(sp)
    80020364:	e822                	sd	s0,16(sp)
    80020366:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020368:	0c20b0ef          	jal	8002b42a <printf>
    8002036c:	4529                	li	a0,10
    8002036e:	5ab090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020372:	57fd                	li	a5,-1
    80020374:	17fe                	slli	a5,a5,0x3f
    80020376:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    8002037a:	450d                	li	a0,3
    8002037c:	b8de00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020380:	a8de00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020384:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020388:	08200593          	li	a1,130
    8002038c:	00016617          	auipc	a2,0x16
    80020390:	d3460613          	addi	a2,a2,-716 # 800360c0 <__func__.0+0x81d8>
    80020394:	0000e517          	auipc	a0,0xe
    80020398:	e4c50513          	addi	a0,a0,-436 # 8002e1e0 <__func__.0+0x2f8>
    8002039c:	08e0b0ef          	jal	8002b42a <printf>
    800203a0:	00038797          	auipc	a5,0x38
    800203a4:	c717c783          	lbu	a5,-911(a5) # 80058011 <excpt+0x1>
    800203a8:	00038497          	auipc	s1,0x38
    800203ac:	c6848493          	addi	s1,s1,-920 # 80058010 <excpt>
    800203b0:	0000e597          	auipc	a1,0xe
    800203b4:	e0858593          	addi	a1,a1,-504 # 8002e1b8 <__func__.0+0x2d0>
    800203b8:	cf89                	beqz	a5,800203d2 <timecmp_test_2+0x82>
    800203ba:	6498                	ld	a4,8(s1)
    800203bc:	4789                	li	a5,2
    800203be:	0000e597          	auipc	a1,0xe
    800203c2:	dea58593          	addi	a1,a1,-534 # 8002e1a8 <__func__.0+0x2c0>
    800203c6:	00f70663          	beq	a4,a5,800203d2 <timecmp_test_2+0x82>
    800203ca:	0000e597          	auipc	a1,0xe
    800203ce:	dee58593          	addi	a1,a1,-530 # 8002e1b8 <__func__.0+0x2d0>
    800203d2:	0000e517          	auipc	a0,0xe
    800203d6:	e2650513          	addi	a0,a0,-474 # 8002e1f8 <__func__.0+0x310>
    800203da:	0500b0ef          	jal	8002b42a <printf>
    800203de:	00038797          	auipc	a5,0x38
    800203e2:	c337c783          	lbu	a5,-973(a5) # 80058011 <excpt+0x1>
    800203e6:	c789                	beqz	a5,800203f0 <timecmp_test_2+0xa0>
    800203e8:	6498                	ld	a4,8(s1)
    800203ea:	4789                	li	a5,2
    800203ec:	00f70c63          	beq	a4,a5,80020404 <timecmp_test_2+0xb4>
    800203f0:	0000e517          	auipc	a0,0xe
    800203f4:	e1050513          	addi	a0,a0,-496 # 8002e200 <__func__.0+0x318>
    800203f8:	0320b0ef          	jal	8002b42a <printf>
    800203fc:	02900513          	li	a0,41
    80020400:	519090ef          	jal	8002a118 <putchar>
    80020404:	4529                	li	a0,10
    80020406:	513090ef          	jal	8002a118 <putchar>
    8002040a:	00038417          	auipc	s0,0x38
    8002040e:	c0744403          	lbu	s0,-1017(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020412:	0000e597          	auipc	a1,0xe
    80020416:	da658593          	addi	a1,a1,-602 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002041a:	cc11                	beqz	s0,80020436 <timecmp_test_2+0xe6>
    8002041c:	6498                	ld	a4,8(s1)
    8002041e:	4789                	li	a5,2
    TEST_END(); 
    80020420:	0000e597          	auipc	a1,0xe
    80020424:	d8858593          	addi	a1,a1,-632 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020428:	00f70763          	beq	a4,a5,80020436 <timecmp_test_2+0xe6>
    8002042c:	4401                	li	s0,0
    TEST_END(); 
    8002042e:	0000e597          	auipc	a1,0xe
    80020432:	d8a58593          	addi	a1,a1,-630 # 8002e1b8 <__func__.0+0x2d0>
    80020436:	0000e517          	auipc	a0,0xe
    8002043a:	e2a50513          	addi	a0,a0,-470 # 8002e260 <__func__.0+0x378>
    8002043e:	7ed0a0ef          	jal	8002b42a <printf>
    80020442:	4511                	li	a0,4
    80020444:	ac5e00ef          	jal	80000f08 <goto_priv>
    80020448:	bdce10ef          	jal	80001824 <reset_state>
}
    8002044c:	60e2                	ld	ra,24(sp)
    8002044e:	8522                	mv	a0,s0
    80020450:	6442                	ld	s0,16(sp)
    80020452:	64a2                	ld	s1,8(sp)
    80020454:	6105                	addi	sp,sp,32
    80020456:	8082                	ret

0000000080020458 <timecmp_test_3>:

bool timecmp_test_3() {
    80020458:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002045a:	0000d597          	auipc	a1,0xd
    8002045e:	3c658593          	addi	a1,a1,966 # 8002d820 <__func__.18>
    80020462:	0000e517          	auipc	a0,0xe
    80020466:	d6650513          	addi	a0,a0,-666 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_3() {
    8002046a:	ec06                	sd	ra,24(sp)
    8002046c:	e822                	sd	s0,16(sp)
    8002046e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020470:	7bb0a0ef          	jal	8002b42a <printf>
    80020474:	4529                	li	a0,10
    80020476:	4a3090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002047a:	57fd                	li	a5,-1
    8002047c:	17fe                	slli	a5,a5,0x3f
    8002047e:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    80020482:	4509                	li	a0,2
    80020484:	a85e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020488:	985e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002048c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020490:	08200593          	li	a1,130
    80020494:	00016617          	auipc	a2,0x16
    80020498:	c8460613          	addi	a2,a2,-892 # 80036118 <__func__.0+0x8230>
    8002049c:	0000e517          	auipc	a0,0xe
    800204a0:	d4450513          	addi	a0,a0,-700 # 8002e1e0 <__func__.0+0x2f8>
    800204a4:	7870a0ef          	jal	8002b42a <printf>
    800204a8:	00038797          	auipc	a5,0x38
    800204ac:	b697c783          	lbu	a5,-1175(a5) # 80058011 <excpt+0x1>
    800204b0:	00038497          	auipc	s1,0x38
    800204b4:	b6048493          	addi	s1,s1,-1184 # 80058010 <excpt>
    800204b8:	0000e597          	auipc	a1,0xe
    800204bc:	d0058593          	addi	a1,a1,-768 # 8002e1b8 <__func__.0+0x2d0>
    800204c0:	cf89                	beqz	a5,800204da <timecmp_test_3+0x82>
    800204c2:	6498                	ld	a4,8(s1)
    800204c4:	4789                	li	a5,2
    800204c6:	0000e597          	auipc	a1,0xe
    800204ca:	ce258593          	addi	a1,a1,-798 # 8002e1a8 <__func__.0+0x2c0>
    800204ce:	00f70663          	beq	a4,a5,800204da <timecmp_test_3+0x82>
    800204d2:	0000e597          	auipc	a1,0xe
    800204d6:	ce658593          	addi	a1,a1,-794 # 8002e1b8 <__func__.0+0x2d0>
    800204da:	0000e517          	auipc	a0,0xe
    800204de:	d1e50513          	addi	a0,a0,-738 # 8002e1f8 <__func__.0+0x310>
    800204e2:	7490a0ef          	jal	8002b42a <printf>
    800204e6:	00038797          	auipc	a5,0x38
    800204ea:	b2b7c783          	lbu	a5,-1237(a5) # 80058011 <excpt+0x1>
    800204ee:	c789                	beqz	a5,800204f8 <timecmp_test_3+0xa0>
    800204f0:	6498                	ld	a4,8(s1)
    800204f2:	4789                	li	a5,2
    800204f4:	00f70c63          	beq	a4,a5,8002050c <timecmp_test_3+0xb4>
    800204f8:	0000e517          	auipc	a0,0xe
    800204fc:	d0850513          	addi	a0,a0,-760 # 8002e200 <__func__.0+0x318>
    80020500:	72b0a0ef          	jal	8002b42a <printf>
    80020504:	02900513          	li	a0,41
    80020508:	411090ef          	jal	8002a118 <putchar>
    8002050c:	4529                	li	a0,10
    8002050e:	40b090ef          	jal	8002a118 <putchar>
    80020512:	00038417          	auipc	s0,0x38
    80020516:	aff44403          	lbu	s0,-1281(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002051a:	0000e597          	auipc	a1,0xe
    8002051e:	c9e58593          	addi	a1,a1,-866 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020522:	cc11                	beqz	s0,8002053e <timecmp_test_3+0xe6>
    80020524:	6498                	ld	a4,8(s1)
    80020526:	4789                	li	a5,2
    TEST_END(); 
    80020528:	0000e597          	auipc	a1,0xe
    8002052c:	c8058593          	addi	a1,a1,-896 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020530:	00f70763          	beq	a4,a5,8002053e <timecmp_test_3+0xe6>
    80020534:	4401                	li	s0,0
    TEST_END(); 
    80020536:	0000e597          	auipc	a1,0xe
    8002053a:	c8258593          	addi	a1,a1,-894 # 8002e1b8 <__func__.0+0x2d0>
    8002053e:	0000e517          	auipc	a0,0xe
    80020542:	d2250513          	addi	a0,a0,-734 # 8002e260 <__func__.0+0x378>
    80020546:	6e50a0ef          	jal	8002b42a <printf>
    8002054a:	4511                	li	a0,4
    8002054c:	9bde00ef          	jal	80000f08 <goto_priv>
    80020550:	ad4e10ef          	jal	80001824 <reset_state>
}
    80020554:	60e2                	ld	ra,24(sp)
    80020556:	8522                	mv	a0,s0
    80020558:	6442                	ld	s0,16(sp)
    8002055a:	64a2                	ld	s1,8(sp)
    8002055c:	6105                	addi	sp,sp,32
    8002055e:	8082                	ret

0000000080020560 <timecmp_test_4>:

bool timecmp_test_4() {
    80020560:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020562:	0000d597          	auipc	a1,0xd
    80020566:	2ce58593          	addi	a1,a1,718 # 8002d830 <__func__.17>
    8002056a:	0000e517          	auipc	a0,0xe
    8002056e:	c5e50513          	addi	a0,a0,-930 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_4() {
    80020572:	ec06                	sd	ra,24(sp)
    80020574:	e822                	sd	s0,16(sp)
    80020576:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020578:	6b30a0ef          	jal	8002b42a <printf>
    8002057c:	4529                	li	a0,10
    8002057e:	39b090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020582:	57fd                	li	a5,-1
    80020584:	17fe                	slli	a5,a5,0x3f
    80020586:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    8002058a:	4505                	li	a0,1
    8002058c:	97de00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020590:	87de00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020594:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020598:	08200593          	li	a1,130
    8002059c:	00016617          	auipc	a2,0x16
    800205a0:	bd460613          	addi	a2,a2,-1068 # 80036170 <__func__.0+0x8288>
    800205a4:	0000e517          	auipc	a0,0xe
    800205a8:	c3c50513          	addi	a0,a0,-964 # 8002e1e0 <__func__.0+0x2f8>
    800205ac:	67f0a0ef          	jal	8002b42a <printf>
    800205b0:	00038797          	auipc	a5,0x38
    800205b4:	a617c783          	lbu	a5,-1439(a5) # 80058011 <excpt+0x1>
    800205b8:	00038497          	auipc	s1,0x38
    800205bc:	a5848493          	addi	s1,s1,-1448 # 80058010 <excpt>
    800205c0:	0000e597          	auipc	a1,0xe
    800205c4:	bf858593          	addi	a1,a1,-1032 # 8002e1b8 <__func__.0+0x2d0>
    800205c8:	cf89                	beqz	a5,800205e2 <timecmp_test_4+0x82>
    800205ca:	6498                	ld	a4,8(s1)
    800205cc:	4789                	li	a5,2
    800205ce:	0000e597          	auipc	a1,0xe
    800205d2:	bda58593          	addi	a1,a1,-1062 # 8002e1a8 <__func__.0+0x2c0>
    800205d6:	00f70663          	beq	a4,a5,800205e2 <timecmp_test_4+0x82>
    800205da:	0000e597          	auipc	a1,0xe
    800205de:	bde58593          	addi	a1,a1,-1058 # 8002e1b8 <__func__.0+0x2d0>
    800205e2:	0000e517          	auipc	a0,0xe
    800205e6:	c1650513          	addi	a0,a0,-1002 # 8002e1f8 <__func__.0+0x310>
    800205ea:	6410a0ef          	jal	8002b42a <printf>
    800205ee:	00038797          	auipc	a5,0x38
    800205f2:	a237c783          	lbu	a5,-1501(a5) # 80058011 <excpt+0x1>
    800205f6:	c789                	beqz	a5,80020600 <timecmp_test_4+0xa0>
    800205f8:	6498                	ld	a4,8(s1)
    800205fa:	4789                	li	a5,2
    800205fc:	00f70c63          	beq	a4,a5,80020614 <timecmp_test_4+0xb4>
    80020600:	0000e517          	auipc	a0,0xe
    80020604:	c0050513          	addi	a0,a0,-1024 # 8002e200 <__func__.0+0x318>
    80020608:	6230a0ef          	jal	8002b42a <printf>
    8002060c:	02900513          	li	a0,41
    80020610:	309090ef          	jal	8002a118 <putchar>
    80020614:	4529                	li	a0,10
    80020616:	303090ef          	jal	8002a118 <putchar>
    8002061a:	00038417          	auipc	s0,0x38
    8002061e:	9f744403          	lbu	s0,-1545(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020622:	0000e597          	auipc	a1,0xe
    80020626:	b9658593          	addi	a1,a1,-1130 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002062a:	cc11                	beqz	s0,80020646 <timecmp_test_4+0xe6>
    8002062c:	6498                	ld	a4,8(s1)
    8002062e:	4789                	li	a5,2
    TEST_END(); 
    80020630:	0000e597          	auipc	a1,0xe
    80020634:	b7858593          	addi	a1,a1,-1160 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020638:	00f70763          	beq	a4,a5,80020646 <timecmp_test_4+0xe6>
    8002063c:	4401                	li	s0,0
    TEST_END(); 
    8002063e:	0000e597          	auipc	a1,0xe
    80020642:	b7a58593          	addi	a1,a1,-1158 # 8002e1b8 <__func__.0+0x2d0>
    80020646:	0000e517          	auipc	a0,0xe
    8002064a:	c1a50513          	addi	a0,a0,-998 # 8002e260 <__func__.0+0x378>
    8002064e:	5dd0a0ef          	jal	8002b42a <printf>
    80020652:	4511                	li	a0,4
    80020654:	8b5e00ef          	jal	80000f08 <goto_priv>
    80020658:	9cce10ef          	jal	80001824 <reset_state>
}
    8002065c:	60e2                	ld	ra,24(sp)
    8002065e:	8522                	mv	a0,s0
    80020660:	6442                	ld	s0,16(sp)
    80020662:	64a2                	ld	s1,8(sp)
    80020664:	6105                	addi	sp,sp,32
    80020666:	8082                	ret

0000000080020668 <timecmp_test_5>:

bool timecmp_test_5() {
    80020668:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002066a:	0000d597          	auipc	a1,0xd
    8002066e:	1d658593          	addi	a1,a1,470 # 8002d840 <__func__.16>
    80020672:	0000e517          	auipc	a0,0xe
    80020676:	b5650513          	addi	a0,a0,-1194 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_5() {
    8002067a:	ec06                	sd	ra,24(sp)
    8002067c:	e822                	sd	s0,16(sp)
    8002067e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020680:	5ab0a0ef          	jal	8002b42a <printf>
    80020684:	4529                	li	a0,10
    80020686:	293090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002068a:	57fd                	li	a5,-1
    8002068c:	17fe                	slli	a5,a5,0x3f
    8002068e:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    80020692:	4501                	li	a0,0
    80020694:	875e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020698:	f74e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002069c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800206a0:	08200593          	li	a1,130
    800206a4:	00016617          	auipc	a2,0x16
    800206a8:	b2460613          	addi	a2,a2,-1244 # 800361c8 <__func__.0+0x82e0>
    800206ac:	0000e517          	auipc	a0,0xe
    800206b0:	b3450513          	addi	a0,a0,-1228 # 8002e1e0 <__func__.0+0x2f8>
    800206b4:	5770a0ef          	jal	8002b42a <printf>
    800206b8:	00038797          	auipc	a5,0x38
    800206bc:	9597c783          	lbu	a5,-1703(a5) # 80058011 <excpt+0x1>
    800206c0:	00038497          	auipc	s1,0x38
    800206c4:	95048493          	addi	s1,s1,-1712 # 80058010 <excpt>
    800206c8:	0000e597          	auipc	a1,0xe
    800206cc:	af058593          	addi	a1,a1,-1296 # 8002e1b8 <__func__.0+0x2d0>
    800206d0:	cf89                	beqz	a5,800206ea <timecmp_test_5+0x82>
    800206d2:	6498                	ld	a4,8(s1)
    800206d4:	4789                	li	a5,2
    800206d6:	0000e597          	auipc	a1,0xe
    800206da:	ad258593          	addi	a1,a1,-1326 # 8002e1a8 <__func__.0+0x2c0>
    800206de:	00f70663          	beq	a4,a5,800206ea <timecmp_test_5+0x82>
    800206e2:	0000e597          	auipc	a1,0xe
    800206e6:	ad658593          	addi	a1,a1,-1322 # 8002e1b8 <__func__.0+0x2d0>
    800206ea:	0000e517          	auipc	a0,0xe
    800206ee:	b0e50513          	addi	a0,a0,-1266 # 8002e1f8 <__func__.0+0x310>
    800206f2:	5390a0ef          	jal	8002b42a <printf>
    800206f6:	00038797          	auipc	a5,0x38
    800206fa:	91b7c783          	lbu	a5,-1765(a5) # 80058011 <excpt+0x1>
    800206fe:	c789                	beqz	a5,80020708 <timecmp_test_5+0xa0>
    80020700:	6498                	ld	a4,8(s1)
    80020702:	4789                	li	a5,2
    80020704:	00f70c63          	beq	a4,a5,8002071c <timecmp_test_5+0xb4>
    80020708:	0000e517          	auipc	a0,0xe
    8002070c:	af850513          	addi	a0,a0,-1288 # 8002e200 <__func__.0+0x318>
    80020710:	51b0a0ef          	jal	8002b42a <printf>
    80020714:	02900513          	li	a0,41
    80020718:	201090ef          	jal	8002a118 <putchar>
    8002071c:	4529                	li	a0,10
    8002071e:	1fb090ef          	jal	8002a118 <putchar>
    80020722:	00038417          	auipc	s0,0x38
    80020726:	8ef44403          	lbu	s0,-1809(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002072a:	0000e597          	auipc	a1,0xe
    8002072e:	a8e58593          	addi	a1,a1,-1394 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020732:	cc11                	beqz	s0,8002074e <timecmp_test_5+0xe6>
    80020734:	6498                	ld	a4,8(s1)
    80020736:	4789                	li	a5,2
    TEST_END(); 
    80020738:	0000e597          	auipc	a1,0xe
    8002073c:	a7058593          	addi	a1,a1,-1424 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020740:	00f70763          	beq	a4,a5,8002074e <timecmp_test_5+0xe6>
    80020744:	4401                	li	s0,0
    TEST_END(); 
    80020746:	0000e597          	auipc	a1,0xe
    8002074a:	a7258593          	addi	a1,a1,-1422 # 8002e1b8 <__func__.0+0x2d0>
    8002074e:	0000e517          	auipc	a0,0xe
    80020752:	b1250513          	addi	a0,a0,-1262 # 8002e260 <__func__.0+0x378>
    80020756:	4d50a0ef          	jal	8002b42a <printf>
    8002075a:	4511                	li	a0,4
    8002075c:	face00ef          	jal	80000f08 <goto_priv>
    80020760:	8c4e10ef          	jal	80001824 <reset_state>
}
    80020764:	60e2                	ld	ra,24(sp)
    80020766:	8522                	mv	a0,s0
    80020768:	6442                	ld	s0,16(sp)
    8002076a:	64a2                	ld	s1,8(sp)
    8002076c:	6105                	addi	sp,sp,32
    8002076e:	8082                	ret

0000000080020770 <timecmp_test_6>:

bool timecmp_test_6() {
    80020770:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020772:	0000d597          	auipc	a1,0xd
    80020776:	0de58593          	addi	a1,a1,222 # 8002d850 <__func__.15>
    8002077a:	0000e517          	auipc	a0,0xe
    8002077e:	a4e50513          	addi	a0,a0,-1458 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_6() {
    80020782:	ec06                	sd	ra,24(sp)
    80020784:	e822                	sd	s0,16(sp)
    80020786:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020788:	4a30a0ef          	jal	8002b42a <printf>
    8002078c:	4529                	li	a0,10
    8002078e:	18b090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020792:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80020796:	450d                	li	a0,3
    80020798:	f70e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002079c:	e70e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800207a0:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800207a4:	08200593          	li	a1,130
    800207a8:	00016617          	auipc	a2,0x16
    800207ac:	a7860613          	addi	a2,a2,-1416 # 80036220 <__func__.0+0x8338>
    800207b0:	0000e517          	auipc	a0,0xe
    800207b4:	a3050513          	addi	a0,a0,-1488 # 8002e1e0 <__func__.0+0x2f8>
    800207b8:	4730a0ef          	jal	8002b42a <printf>
    800207bc:	00038797          	auipc	a5,0x38
    800207c0:	8557c783          	lbu	a5,-1963(a5) # 80058011 <excpt+0x1>
    800207c4:	00038497          	auipc	s1,0x38
    800207c8:	84c48493          	addi	s1,s1,-1972 # 80058010 <excpt>
    800207cc:	0000e597          	auipc	a1,0xe
    800207d0:	9ec58593          	addi	a1,a1,-1556 # 8002e1b8 <__func__.0+0x2d0>
    800207d4:	cf89                	beqz	a5,800207ee <timecmp_test_6+0x7e>
    800207d6:	6498                	ld	a4,8(s1)
    800207d8:	4789                	li	a5,2
    800207da:	0000e597          	auipc	a1,0xe
    800207de:	9ce58593          	addi	a1,a1,-1586 # 8002e1a8 <__func__.0+0x2c0>
    800207e2:	00f70663          	beq	a4,a5,800207ee <timecmp_test_6+0x7e>
    800207e6:	0000e597          	auipc	a1,0xe
    800207ea:	9d258593          	addi	a1,a1,-1582 # 8002e1b8 <__func__.0+0x2d0>
    800207ee:	0000e517          	auipc	a0,0xe
    800207f2:	a0a50513          	addi	a0,a0,-1526 # 8002e1f8 <__func__.0+0x310>
    800207f6:	4350a0ef          	jal	8002b42a <printf>
    800207fa:	00038797          	auipc	a5,0x38
    800207fe:	8177c783          	lbu	a5,-2025(a5) # 80058011 <excpt+0x1>
    80020802:	c789                	beqz	a5,8002080c <timecmp_test_6+0x9c>
    80020804:	6498                	ld	a4,8(s1)
    80020806:	4789                	li	a5,2
    80020808:	00f70c63          	beq	a4,a5,80020820 <timecmp_test_6+0xb0>
    8002080c:	0000e517          	auipc	a0,0xe
    80020810:	9f450513          	addi	a0,a0,-1548 # 8002e200 <__func__.0+0x318>
    80020814:	4170a0ef          	jal	8002b42a <printf>
    80020818:	02900513          	li	a0,41
    8002081c:	0fd090ef          	jal	8002a118 <putchar>
    80020820:	4529                	li	a0,10
    80020822:	0f7090ef          	jal	8002a118 <putchar>
    80020826:	00037417          	auipc	s0,0x37
    8002082a:	7eb44403          	lbu	s0,2027(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002082e:	0000e597          	auipc	a1,0xe
    80020832:	98a58593          	addi	a1,a1,-1654 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020836:	cc11                	beqz	s0,80020852 <timecmp_test_6+0xe2>
    80020838:	6498                	ld	a4,8(s1)
    8002083a:	4789                	li	a5,2
    TEST_END(); 
    8002083c:	0000e597          	auipc	a1,0xe
    80020840:	96c58593          	addi	a1,a1,-1684 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020844:	00f70763          	beq	a4,a5,80020852 <timecmp_test_6+0xe2>
    80020848:	4401                	li	s0,0
    TEST_END(); 
    8002084a:	0000e597          	auipc	a1,0xe
    8002084e:	96e58593          	addi	a1,a1,-1682 # 8002e1b8 <__func__.0+0x2d0>
    80020852:	0000e517          	auipc	a0,0xe
    80020856:	a0e50513          	addi	a0,a0,-1522 # 8002e260 <__func__.0+0x378>
    8002085a:	3d10a0ef          	jal	8002b42a <printf>
    8002085e:	4511                	li	a0,4
    80020860:	ea8e00ef          	jal	80000f08 <goto_priv>
    80020864:	fc1e00ef          	jal	80001824 <reset_state>
}
    80020868:	60e2                	ld	ra,24(sp)
    8002086a:	8522                	mv	a0,s0
    8002086c:	6442                	ld	s0,16(sp)
    8002086e:	64a2                	ld	s1,8(sp)
    80020870:	6105                	addi	sp,sp,32
    80020872:	8082                	ret

0000000080020874 <timecmp_test_7>:

bool timecmp_test_7() {
    80020874:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020876:	0000d597          	auipc	a1,0xd
    8002087a:	fea58593          	addi	a1,a1,-22 # 8002d860 <__func__.14>
    8002087e:	0000e517          	auipc	a0,0xe
    80020882:	94a50513          	addi	a0,a0,-1718 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_7() {
    80020886:	ec06                	sd	ra,24(sp)
    80020888:	e822                	sd	s0,16(sp)
    8002088a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002088c:	39f0a0ef          	jal	8002b42a <printf>
    80020890:	4529                	li	a0,10
    80020892:	087090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020896:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8002089a:	4509                	li	a0,2
    8002089c:	e6ce00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208a0:	d6ce00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800208a4:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800208a8:	08200593          	li	a1,130
    800208ac:	00016617          	auipc	a2,0x16
    800208b0:	9cc60613          	addi	a2,a2,-1588 # 80036278 <__func__.0+0x8390>
    800208b4:	0000e517          	auipc	a0,0xe
    800208b8:	92c50513          	addi	a0,a0,-1748 # 8002e1e0 <__func__.0+0x2f8>
    800208bc:	36f0a0ef          	jal	8002b42a <printf>
    800208c0:	00037797          	auipc	a5,0x37
    800208c4:	7517c783          	lbu	a5,1873(a5) # 80058011 <excpt+0x1>
    800208c8:	00037497          	auipc	s1,0x37
    800208cc:	74848493          	addi	s1,s1,1864 # 80058010 <excpt>
    800208d0:	0000e597          	auipc	a1,0xe
    800208d4:	8e858593          	addi	a1,a1,-1816 # 8002e1b8 <__func__.0+0x2d0>
    800208d8:	cf89                	beqz	a5,800208f2 <timecmp_test_7+0x7e>
    800208da:	6498                	ld	a4,8(s1)
    800208dc:	4789                	li	a5,2
    800208de:	0000e597          	auipc	a1,0xe
    800208e2:	8ca58593          	addi	a1,a1,-1846 # 8002e1a8 <__func__.0+0x2c0>
    800208e6:	00f70663          	beq	a4,a5,800208f2 <timecmp_test_7+0x7e>
    800208ea:	0000e597          	auipc	a1,0xe
    800208ee:	8ce58593          	addi	a1,a1,-1842 # 8002e1b8 <__func__.0+0x2d0>
    800208f2:	0000e517          	auipc	a0,0xe
    800208f6:	90650513          	addi	a0,a0,-1786 # 8002e1f8 <__func__.0+0x310>
    800208fa:	3310a0ef          	jal	8002b42a <printf>
    800208fe:	00037797          	auipc	a5,0x37
    80020902:	7137c783          	lbu	a5,1811(a5) # 80058011 <excpt+0x1>
    80020906:	c789                	beqz	a5,80020910 <timecmp_test_7+0x9c>
    80020908:	6498                	ld	a4,8(s1)
    8002090a:	4789                	li	a5,2
    8002090c:	00f70c63          	beq	a4,a5,80020924 <timecmp_test_7+0xb0>
    80020910:	0000e517          	auipc	a0,0xe
    80020914:	8f050513          	addi	a0,a0,-1808 # 8002e200 <__func__.0+0x318>
    80020918:	3130a0ef          	jal	8002b42a <printf>
    8002091c:	02900513          	li	a0,41
    80020920:	7f8090ef          	jal	8002a118 <putchar>
    80020924:	4529                	li	a0,10
    80020926:	7f2090ef          	jal	8002a118 <putchar>
    8002092a:	00037417          	auipc	s0,0x37
    8002092e:	6e744403          	lbu	s0,1767(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020932:	0000e597          	auipc	a1,0xe
    80020936:	88658593          	addi	a1,a1,-1914 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002093a:	cc11                	beqz	s0,80020956 <timecmp_test_7+0xe2>
    8002093c:	6498                	ld	a4,8(s1)
    8002093e:	4789                	li	a5,2
    TEST_END(); 
    80020940:	0000e597          	auipc	a1,0xe
    80020944:	86858593          	addi	a1,a1,-1944 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020948:	00f70763          	beq	a4,a5,80020956 <timecmp_test_7+0xe2>
    8002094c:	4401                	li	s0,0
    TEST_END(); 
    8002094e:	0000e597          	auipc	a1,0xe
    80020952:	86a58593          	addi	a1,a1,-1942 # 8002e1b8 <__func__.0+0x2d0>
    80020956:	0000e517          	auipc	a0,0xe
    8002095a:	90a50513          	addi	a0,a0,-1782 # 8002e260 <__func__.0+0x378>
    8002095e:	2cd0a0ef          	jal	8002b42a <printf>
    80020962:	4511                	li	a0,4
    80020964:	da4e00ef          	jal	80000f08 <goto_priv>
    80020968:	ebde00ef          	jal	80001824 <reset_state>
}
    8002096c:	60e2                	ld	ra,24(sp)
    8002096e:	8522                	mv	a0,s0
    80020970:	6442                	ld	s0,16(sp)
    80020972:	64a2                	ld	s1,8(sp)
    80020974:	6105                	addi	sp,sp,32
    80020976:	8082                	ret

0000000080020978 <timecmp_test_8>:

bool timecmp_test_8() {
    80020978:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002097a:	0000d597          	auipc	a1,0xd
    8002097e:	ef658593          	addi	a1,a1,-266 # 8002d870 <__func__.13>
    80020982:	0000e517          	auipc	a0,0xe
    80020986:	84650513          	addi	a0,a0,-1978 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_8() {
    8002098a:	ec06                	sd	ra,24(sp)
    8002098c:	e822                	sd	s0,16(sp)
    8002098e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020990:	29b0a0ef          	jal	8002b42a <printf>
    80020994:	4529                	li	a0,10
    80020996:	782090ef          	jal	8002a118 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002099a:	57fd                	li	a5,-1
    8002099c:	17fe                	slli	a5,a5,0x3f
    8002099e:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    800209a2:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800209a6:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800209aa:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    800209ae:	4509                	li	a0,2
    800209b0:	d58e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800209b4:	c58e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800209b8:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    800209bc:	08200593          	li	a1,130
    800209c0:	00016617          	auipc	a2,0x16
    800209c4:	91060613          	addi	a2,a2,-1776 # 800362d0 <__func__.0+0x83e8>
    800209c8:	0000e517          	auipc	a0,0xe
    800209cc:	81850513          	addi	a0,a0,-2024 # 8002e1e0 <__func__.0+0x2f8>
    800209d0:	25b0a0ef          	jal	8002b42a <printf>
    800209d4:	00037797          	auipc	a5,0x37
    800209d8:	63d7c783          	lbu	a5,1597(a5) # 80058011 <excpt+0x1>
    800209dc:	00037497          	auipc	s1,0x37
    800209e0:	63448493          	addi	s1,s1,1588 # 80058010 <excpt>
    800209e4:	0000d597          	auipc	a1,0xd
    800209e8:	7d458593          	addi	a1,a1,2004 # 8002e1b8 <__func__.0+0x2d0>
    800209ec:	cf89                	beqz	a5,80020a06 <timecmp_test_8+0x8e>
    800209ee:	6498                	ld	a4,8(s1)
    800209f0:	47d9                	li	a5,22
    800209f2:	0000d597          	auipc	a1,0xd
    800209f6:	7b658593          	addi	a1,a1,1974 # 8002e1a8 <__func__.0+0x2c0>
    800209fa:	00f70663          	beq	a4,a5,80020a06 <timecmp_test_8+0x8e>
    800209fe:	0000d597          	auipc	a1,0xd
    80020a02:	7ba58593          	addi	a1,a1,1978 # 8002e1b8 <__func__.0+0x2d0>
    80020a06:	0000d517          	auipc	a0,0xd
    80020a0a:	7f250513          	addi	a0,a0,2034 # 8002e1f8 <__func__.0+0x310>
    80020a0e:	21d0a0ef          	jal	8002b42a <printf>
    80020a12:	00037797          	auipc	a5,0x37
    80020a16:	5ff7c783          	lbu	a5,1535(a5) # 80058011 <excpt+0x1>
    80020a1a:	c789                	beqz	a5,80020a24 <timecmp_test_8+0xac>
    80020a1c:	6498                	ld	a4,8(s1)
    80020a1e:	47d9                	li	a5,22
    80020a20:	00f70c63          	beq	a4,a5,80020a38 <timecmp_test_8+0xc0>
    80020a24:	0000d517          	auipc	a0,0xd
    80020a28:	7dc50513          	addi	a0,a0,2012 # 8002e200 <__func__.0+0x318>
    80020a2c:	1ff0a0ef          	jal	8002b42a <printf>
    80020a30:	02900513          	li	a0,41
    80020a34:	6e4090ef          	jal	8002a118 <putchar>
    80020a38:	4529                	li	a0,10
    80020a3a:	6de090ef          	jal	8002a118 <putchar>
    80020a3e:	00037417          	auipc	s0,0x37
    80020a42:	5d344403          	lbu	s0,1491(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020a46:	0000d597          	auipc	a1,0xd
    80020a4a:	77258593          	addi	a1,a1,1906 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020a4e:	cc11                	beqz	s0,80020a6a <timecmp_test_8+0xf2>
    80020a50:	6498                	ld	a4,8(s1)
    80020a52:	47d9                	li	a5,22
    TEST_END(); 
    80020a54:	0000d597          	auipc	a1,0xd
    80020a58:	75458593          	addi	a1,a1,1876 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020a5c:	00f70763          	beq	a4,a5,80020a6a <timecmp_test_8+0xf2>
    80020a60:	4401                	li	s0,0
    TEST_END(); 
    80020a62:	0000d597          	auipc	a1,0xd
    80020a66:	75658593          	addi	a1,a1,1878 # 8002e1b8 <__func__.0+0x2d0>
    80020a6a:	0000d517          	auipc	a0,0xd
    80020a6e:	7f650513          	addi	a0,a0,2038 # 8002e260 <__func__.0+0x378>
    80020a72:	1b90a0ef          	jal	8002b42a <printf>
    80020a76:	4511                	li	a0,4
    80020a78:	c90e00ef          	jal	80000f08 <goto_priv>
    80020a7c:	da9e00ef          	jal	80001824 <reset_state>
}
    80020a80:	60e2                	ld	ra,24(sp)
    80020a82:	8522                	mv	a0,s0
    80020a84:	6442                	ld	s0,16(sp)
    80020a86:	64a2                	ld	s1,8(sp)
    80020a88:	6105                	addi	sp,sp,32
    80020a8a:	8082                	ret

0000000080020a8c <timecmp_test_9>:

bool timecmp_test_9() {
    80020a8c:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020a8e:	0000d597          	auipc	a1,0xd
    80020a92:	df258593          	addi	a1,a1,-526 # 8002d880 <__func__.12>
    80020a96:	0000d517          	auipc	a0,0xd
    80020a9a:	73250513          	addi	a0,a0,1842 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_9() {
    80020a9e:	ec06                	sd	ra,24(sp)
    80020aa0:	e822                	sd	s0,16(sp)
    80020aa2:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020aa4:	1870a0ef          	jal	8002b42a <printf>
    80020aa8:	4529                	li	a0,10
    80020aaa:	66e090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020aae:	57fd                	li	a5,-1
    80020ab0:	17fe                	slli	a5,a5,0x3f
    80020ab2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020ab6:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020aba:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020abe:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020ac2:	4509                	li	a0,2
    80020ac4:	c44e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ac8:	b44e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020acc:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020ad0:	08200593          	li	a1,130
    80020ad4:	00016617          	auipc	a2,0x16
    80020ad8:	87c60613          	addi	a2,a2,-1924 # 80036350 <__func__.0+0x8468>
    80020adc:	0000d517          	auipc	a0,0xd
    80020ae0:	70450513          	addi	a0,a0,1796 # 8002e1e0 <__func__.0+0x2f8>
    80020ae4:	1470a0ef          	jal	8002b42a <printf>
    80020ae8:	00037797          	auipc	a5,0x37
    80020aec:	5297c783          	lbu	a5,1321(a5) # 80058011 <excpt+0x1>
    80020af0:	00037497          	auipc	s1,0x37
    80020af4:	52048493          	addi	s1,s1,1312 # 80058010 <excpt>
    80020af8:	0000d597          	auipc	a1,0xd
    80020afc:	6c058593          	addi	a1,a1,1728 # 8002e1b8 <__func__.0+0x2d0>
    80020b00:	cf89                	beqz	a5,80020b1a <timecmp_test_9+0x8e>
    80020b02:	6498                	ld	a4,8(s1)
    80020b04:	47d9                	li	a5,22
    80020b06:	0000d597          	auipc	a1,0xd
    80020b0a:	6a258593          	addi	a1,a1,1698 # 8002e1a8 <__func__.0+0x2c0>
    80020b0e:	00f70663          	beq	a4,a5,80020b1a <timecmp_test_9+0x8e>
    80020b12:	0000d597          	auipc	a1,0xd
    80020b16:	6a658593          	addi	a1,a1,1702 # 8002e1b8 <__func__.0+0x2d0>
    80020b1a:	0000d517          	auipc	a0,0xd
    80020b1e:	6de50513          	addi	a0,a0,1758 # 8002e1f8 <__func__.0+0x310>
    80020b22:	1090a0ef          	jal	8002b42a <printf>
    80020b26:	00037797          	auipc	a5,0x37
    80020b2a:	4eb7c783          	lbu	a5,1259(a5) # 80058011 <excpt+0x1>
    80020b2e:	c789                	beqz	a5,80020b38 <timecmp_test_9+0xac>
    80020b30:	6498                	ld	a4,8(s1)
    80020b32:	47d9                	li	a5,22
    80020b34:	00f70c63          	beq	a4,a5,80020b4c <timecmp_test_9+0xc0>
    80020b38:	0000d517          	auipc	a0,0xd
    80020b3c:	6c850513          	addi	a0,a0,1736 # 8002e200 <__func__.0+0x318>
    80020b40:	0eb0a0ef          	jal	8002b42a <printf>
    80020b44:	02900513          	li	a0,41
    80020b48:	5d0090ef          	jal	8002a118 <putchar>
    80020b4c:	4529                	li	a0,10
    80020b4e:	5ca090ef          	jal	8002a118 <putchar>
    80020b52:	00037417          	auipc	s0,0x37
    80020b56:	4bf44403          	lbu	s0,1215(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020b5a:	0000d597          	auipc	a1,0xd
    80020b5e:	65e58593          	addi	a1,a1,1630 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020b62:	cc11                	beqz	s0,80020b7e <timecmp_test_9+0xf2>
    80020b64:	6498                	ld	a4,8(s1)
    80020b66:	47d9                	li	a5,22
    TEST_END(); 
    80020b68:	0000d597          	auipc	a1,0xd
    80020b6c:	64058593          	addi	a1,a1,1600 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020b70:	00f70763          	beq	a4,a5,80020b7e <timecmp_test_9+0xf2>
    80020b74:	4401                	li	s0,0
    TEST_END(); 
    80020b76:	0000d597          	auipc	a1,0xd
    80020b7a:	64258593          	addi	a1,a1,1602 # 8002e1b8 <__func__.0+0x2d0>
    80020b7e:	0000d517          	auipc	a0,0xd
    80020b82:	6e250513          	addi	a0,a0,1762 # 8002e260 <__func__.0+0x378>
    80020b86:	0a50a0ef          	jal	8002b42a <printf>
    80020b8a:	4511                	li	a0,4
    80020b8c:	b7ce00ef          	jal	80000f08 <goto_priv>
    80020b90:	c95e00ef          	jal	80001824 <reset_state>
}
    80020b94:	60e2                	ld	ra,24(sp)
    80020b96:	8522                	mv	a0,s0
    80020b98:	6442                	ld	s0,16(sp)
    80020b9a:	64a2                	ld	s1,8(sp)
    80020b9c:	6105                	addi	sp,sp,32
    80020b9e:	8082                	ret

0000000080020ba0 <timecmp_test_10>:

bool timecmp_test_10() {
    80020ba0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020ba2:	0000d597          	auipc	a1,0xd
    80020ba6:	cee58593          	addi	a1,a1,-786 # 8002d890 <__func__.11>
    80020baa:	0000d517          	auipc	a0,0xd
    80020bae:	61e50513          	addi	a0,a0,1566 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_10() {
    80020bb2:	e406                	sd	ra,8(sp)
    80020bb4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020bb6:	0750a0ef          	jal	8002b42a <printf>
    80020bba:	4529                	li	a0,10
    80020bbc:	55c090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020bc0:	57fd                	li	a5,-1
    80020bc2:	17fe                	slli	a5,a5,0x3f
    80020bc4:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020bc8:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020bcc:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020bd0:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020bd4:	4509                	li	a0,2
    80020bd6:	b32e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020bda:	a32e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020bde:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020be2:	08200593          	li	a1,130
    80020be6:	00015617          	auipc	a2,0x15
    80020bea:	7ea60613          	addi	a2,a2,2026 # 800363d0 <__func__.0+0x84e8>
    80020bee:	0000d517          	auipc	a0,0xd
    80020bf2:	5f250513          	addi	a0,a0,1522 # 8002e1e0 <__func__.0+0x2f8>
    80020bf6:	0350a0ef          	jal	8002b42a <printf>
    80020bfa:	00037797          	auipc	a5,0x37
    80020bfe:	4177c783          	lbu	a5,1047(a5) # 80058011 <excpt+0x1>
    80020c02:	0000d597          	auipc	a1,0xd
    80020c06:	5a658593          	addi	a1,a1,1446 # 8002e1a8 <__func__.0+0x2c0>
    80020c0a:	c789                	beqz	a5,80020c14 <timecmp_test_10+0x74>
    80020c0c:	0000d597          	auipc	a1,0xd
    80020c10:	5ac58593          	addi	a1,a1,1452 # 8002e1b8 <__func__.0+0x2d0>
    80020c14:	0000d517          	auipc	a0,0xd
    80020c18:	5e450513          	addi	a0,a0,1508 # 8002e1f8 <__func__.0+0x310>
    80020c1c:	00f0a0ef          	jal	8002b42a <printf>
    80020c20:	00037797          	auipc	a5,0x37
    80020c24:	3f17c783          	lbu	a5,1009(a5) # 80058011 <excpt+0x1>
    80020c28:	e7a1                	bnez	a5,80020c70 <timecmp_test_10+0xd0>
    80020c2a:	4529                	li	a0,10
    80020c2c:	4ec090ef          	jal	8002a118 <putchar>
    80020c30:	00037797          	auipc	a5,0x37
    80020c34:	3e17c783          	lbu	a5,993(a5) # 80058011 <excpt+0x1>
    80020c38:	e795                	bnez	a5,80020c64 <timecmp_test_10+0xc4>
    80020c3a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020c3c:	0000d597          	auipc	a1,0xd
    80020c40:	56c58593          	addi	a1,a1,1388 # 8002e1a8 <__func__.0+0x2c0>
    80020c44:	0000d517          	auipc	a0,0xd
    80020c48:	61c50513          	addi	a0,a0,1564 # 8002e260 <__func__.0+0x378>
    80020c4c:	7de0a0ef          	jal	8002b42a <printf>
    80020c50:	4511                	li	a0,4
    80020c52:	ab6e00ef          	jal	80000f08 <goto_priv>
    80020c56:	bcfe00ef          	jal	80001824 <reset_state>
}
    80020c5a:	60a2                	ld	ra,8(sp)
    80020c5c:	8522                	mv	a0,s0
    80020c5e:	6402                	ld	s0,0(sp)
    80020c60:	0141                	addi	sp,sp,16
    80020c62:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020c64:	4401                	li	s0,0
    TEST_END(); 
    80020c66:	0000d597          	auipc	a1,0xd
    80020c6a:	55258593          	addi	a1,a1,1362 # 8002e1b8 <__func__.0+0x2d0>
    80020c6e:	bfd9                	j	80020c44 <timecmp_test_10+0xa4>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020c70:	0000d517          	auipc	a0,0xd
    80020c74:	59050513          	addi	a0,a0,1424 # 8002e200 <__func__.0+0x318>
    80020c78:	7b20a0ef          	jal	8002b42a <printf>
    80020c7c:	02900513          	li	a0,41
    80020c80:	498090ef          	jal	8002a118 <putchar>
    80020c84:	b75d                	j	80020c2a <timecmp_test_10+0x8a>

0000000080020c86 <timecmp_test_11>:

bool timecmp_test_11() {
    80020c86:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020c88:	0000d597          	auipc	a1,0xd
    80020c8c:	c1858593          	addi	a1,a1,-1000 # 8002d8a0 <__func__.10>
    80020c90:	0000d517          	auipc	a0,0xd
    80020c94:	53850513          	addi	a0,a0,1336 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80020c98:	e406                	sd	ra,8(sp)
    80020c9a:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020c9c:	78e0a0ef          	jal	8002b42a <printf>
    80020ca0:	4529                	li	a0,10
    80020ca2:	476090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020ca6:	57fd                	li	a5,-1
    80020ca8:	17fe                	slli	a5,a5,0x3f
    80020caa:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020cae:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020cb2:	450d                	li	a0,3
    80020cb4:	a54e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020cb8:	954e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020cbc:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80020cc0:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020cc4:	08200593          	li	a1,130
    80020cc8:	00015617          	auipc	a2,0x15
    80020ccc:	77060613          	addi	a2,a2,1904 # 80036438 <__func__.0+0x8550>
    80020cd0:	0000d517          	auipc	a0,0xd
    80020cd4:	51050513          	addi	a0,a0,1296 # 8002e1e0 <__func__.0+0x2f8>
    80020cd8:	7520a0ef          	jal	8002b42a <printf>
    80020cdc:	00037797          	auipc	a5,0x37
    80020ce0:	3357c783          	lbu	a5,821(a5) # 80058011 <excpt+0x1>
    80020ce4:	0000d597          	auipc	a1,0xd
    80020ce8:	4c458593          	addi	a1,a1,1220 # 8002e1a8 <__func__.0+0x2c0>
    80020cec:	c789                	beqz	a5,80020cf6 <timecmp_test_11+0x70>
    80020cee:	0000d597          	auipc	a1,0xd
    80020cf2:	4ca58593          	addi	a1,a1,1226 # 8002e1b8 <__func__.0+0x2d0>
    80020cf6:	0000d517          	auipc	a0,0xd
    80020cfa:	50250513          	addi	a0,a0,1282 # 8002e1f8 <__func__.0+0x310>
    80020cfe:	72c0a0ef          	jal	8002b42a <printf>
    80020d02:	00037797          	auipc	a5,0x37
    80020d06:	30f7c783          	lbu	a5,783(a5) # 80058011 <excpt+0x1>
    80020d0a:	e7a1                	bnez	a5,80020d52 <timecmp_test_11+0xcc>
    80020d0c:	4529                	li	a0,10
    80020d0e:	40a090ef          	jal	8002a118 <putchar>
    80020d12:	00037797          	auipc	a5,0x37
    80020d16:	2ff7c783          	lbu	a5,767(a5) # 80058011 <excpt+0x1>
    80020d1a:	e795                	bnez	a5,80020d46 <timecmp_test_11+0xc0>
    80020d1c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d1e:	0000d597          	auipc	a1,0xd
    80020d22:	48a58593          	addi	a1,a1,1162 # 8002e1a8 <__func__.0+0x2c0>
    80020d26:	0000d517          	auipc	a0,0xd
    80020d2a:	53a50513          	addi	a0,a0,1338 # 8002e260 <__func__.0+0x378>
    80020d2e:	6fc0a0ef          	jal	8002b42a <printf>
    80020d32:	4511                	li	a0,4
    80020d34:	9d4e00ef          	jal	80000f08 <goto_priv>
    80020d38:	aede00ef          	jal	80001824 <reset_state>
}
    80020d3c:	60a2                	ld	ra,8(sp)
    80020d3e:	8522                	mv	a0,s0
    80020d40:	6402                	ld	s0,0(sp)
    80020d42:	0141                	addi	sp,sp,16
    80020d44:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020d46:	4401                	li	s0,0
    TEST_END(); 
    80020d48:	0000d597          	auipc	a1,0xd
    80020d4c:	47058593          	addi	a1,a1,1136 # 8002e1b8 <__func__.0+0x2d0>
    80020d50:	bfd9                	j	80020d26 <timecmp_test_11+0xa0>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020d52:	0000d517          	auipc	a0,0xd
    80020d56:	4ae50513          	addi	a0,a0,1198 # 8002e200 <__func__.0+0x318>
    80020d5a:	6d00a0ef          	jal	8002b42a <printf>
    80020d5e:	02900513          	li	a0,41
    80020d62:	3b6090ef          	jal	8002a118 <putchar>
    80020d66:	b75d                	j	80020d0c <timecmp_test_11+0x86>

0000000080020d68 <timecmp_test_12>:

bool timecmp_test_12() {
    80020d68:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020d6a:	0000d597          	auipc	a1,0xd
    80020d6e:	b4658593          	addi	a1,a1,-1210 # 8002d8b0 <__func__.9>
    80020d72:	0000d517          	auipc	a0,0xd
    80020d76:	45650513          	addi	a0,a0,1110 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_12() {
    80020d7a:	e406                	sd	ra,8(sp)
    80020d7c:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020d7e:	6ac0a0ef          	jal	8002b42a <printf>
    80020d82:	4529                	li	a0,10
    80020d84:	394090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020d88:	57fd                	li	a5,-1
    80020d8a:	17fe                	slli	a5,a5,0x3f
    80020d8c:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020d90:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020d94:	450d                	li	a0,3
    80020d96:	972e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020d9a:	872e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020d9e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020da2:	08200593          	li	a1,130
    80020da6:	00015617          	auipc	a2,0x15
    80020daa:	6e260613          	addi	a2,a2,1762 # 80036488 <__func__.0+0x85a0>
    80020dae:	0000d517          	auipc	a0,0xd
    80020db2:	43250513          	addi	a0,a0,1074 # 8002e1e0 <__func__.0+0x2f8>
    80020db6:	6740a0ef          	jal	8002b42a <printf>
    80020dba:	00037797          	auipc	a5,0x37
    80020dbe:	2577c783          	lbu	a5,599(a5) # 80058011 <excpt+0x1>
    80020dc2:	0000d597          	auipc	a1,0xd
    80020dc6:	3e658593          	addi	a1,a1,998 # 8002e1a8 <__func__.0+0x2c0>
    80020dca:	c789                	beqz	a5,80020dd4 <timecmp_test_12+0x6c>
    80020dcc:	0000d597          	auipc	a1,0xd
    80020dd0:	3ec58593          	addi	a1,a1,1004 # 8002e1b8 <__func__.0+0x2d0>
    80020dd4:	0000d517          	auipc	a0,0xd
    80020dd8:	42450513          	addi	a0,a0,1060 # 8002e1f8 <__func__.0+0x310>
    80020ddc:	64e0a0ef          	jal	8002b42a <printf>
    80020de0:	00037797          	auipc	a5,0x37
    80020de4:	2317c783          	lbu	a5,561(a5) # 80058011 <excpt+0x1>
    80020de8:	e7a1                	bnez	a5,80020e30 <timecmp_test_12+0xc8>
    80020dea:	4529                	li	a0,10
    80020dec:	32c090ef          	jal	8002a118 <putchar>
    80020df0:	00037797          	auipc	a5,0x37
    80020df4:	2217c783          	lbu	a5,545(a5) # 80058011 <excpt+0x1>
    80020df8:	e795                	bnez	a5,80020e24 <timecmp_test_12+0xbc>
    80020dfa:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020dfc:	0000d597          	auipc	a1,0xd
    80020e00:	3ac58593          	addi	a1,a1,940 # 8002e1a8 <__func__.0+0x2c0>
    80020e04:	0000d517          	auipc	a0,0xd
    80020e08:	45c50513          	addi	a0,a0,1116 # 8002e260 <__func__.0+0x378>
    80020e0c:	61e0a0ef          	jal	8002b42a <printf>
    80020e10:	4511                	li	a0,4
    80020e12:	8f6e00ef          	jal	80000f08 <goto_priv>
    80020e16:	a0fe00ef          	jal	80001824 <reset_state>
}
    80020e1a:	60a2                	ld	ra,8(sp)
    80020e1c:	8522                	mv	a0,s0
    80020e1e:	6402                	ld	s0,0(sp)
    80020e20:	0141                	addi	sp,sp,16
    80020e22:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020e24:	4401                	li	s0,0
    TEST_END(); 
    80020e26:	0000d597          	auipc	a1,0xd
    80020e2a:	39258593          	addi	a1,a1,914 # 8002e1b8 <__func__.0+0x2d0>
    80020e2e:	bfd9                	j	80020e04 <timecmp_test_12+0x9c>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020e30:	0000d517          	auipc	a0,0xd
    80020e34:	3d050513          	addi	a0,a0,976 # 8002e200 <__func__.0+0x318>
    80020e38:	5f20a0ef          	jal	8002b42a <printf>
    80020e3c:	02900513          	li	a0,41
    80020e40:	2d8090ef          	jal	8002a118 <putchar>
    80020e44:	b75d                	j	80020dea <timecmp_test_12+0x82>

0000000080020e46 <timecmp_test_13>:

bool timecmp_test_13() {
    80020e46:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020e48:	0000d597          	auipc	a1,0xd
    80020e4c:	a7858593          	addi	a1,a1,-1416 # 8002d8c0 <__func__.8>
    80020e50:	0000d517          	auipc	a0,0xd
    80020e54:	37850513          	addi	a0,a0,888 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80020e58:	ec06                	sd	ra,24(sp)
    80020e5a:	e822                	sd	s0,16(sp)
    80020e5c:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020e5e:	5cc0a0ef          	jal	8002b42a <printf>
    80020e62:	4529                	li	a0,10
    80020e64:	2b4090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020e68:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020e6c:	57fd                	li	a5,-1
    80020e6e:	17fe                	slli	a5,a5,0x3f
    80020e70:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020e74:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020e78:	30a025f3          	csrr	a1,0x30a
    80020e7c:	00014517          	auipc	a0,0x14
    80020e80:	96450513          	addi	a0,a0,-1692 # 800347e0 <__func__.0+0x68f8>
    80020e84:	5a60a0ef          	jal	8002b42a <printf>
    80020e88:	60a025f3          	csrr	a1,henvcfg
    80020e8c:	00014517          	auipc	a0,0x14
    80020e90:	95450513          	addi	a0,a0,-1708 # 800347e0 <__func__.0+0x68f8>
    80020e94:	5960a0ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VU);
    80020e98:	4501                	li	a0,0
    80020e9a:	86ee00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020e9e:	f6fdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020ea2:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020ea6:	00037597          	auipc	a1,0x37
    80020eaa:	16b5c583          	lbu	a1,363(a1) # 80058011 <excpt+0x1>
    80020eae:	00015517          	auipc	a0,0x15
    80020eb2:	62a50513          	addi	a0,a0,1578 # 800364d8 <__func__.0+0x85f0>
    80020eb6:	00037417          	auipc	s0,0x37
    80020eba:	15a40413          	addi	s0,s0,346 # 80058010 <excpt>
    80020ebe:	56c0a0ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    80020ec2:	640c                	ld	a1,8(s0)
    80020ec4:	00015517          	auipc	a0,0x15
    80020ec8:	62450513          	addi	a0,a0,1572 # 800364e8 <__func__.0+0x8600>
    80020ecc:	55e0a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020ed0:	08200593          	li	a1,130
    80020ed4:	00015617          	auipc	a2,0x15
    80020ed8:	62460613          	addi	a2,a2,1572 # 800364f8 <__func__.0+0x8610>
    80020edc:	0000d517          	auipc	a0,0xd
    80020ee0:	30450513          	addi	a0,a0,772 # 8002e1e0 <__func__.0+0x2f8>
    80020ee4:	5460a0ef          	jal	8002b42a <printf>
    80020ee8:	00037797          	auipc	a5,0x37
    80020eec:	1297c783          	lbu	a5,297(a5) # 80058011 <excpt+0x1>
    80020ef0:	0000d597          	auipc	a1,0xd
    80020ef4:	2c858593          	addi	a1,a1,712 # 8002e1b8 <__func__.0+0x2d0>
    80020ef8:	cf89                	beqz	a5,80020f12 <timecmp_test_13+0xcc>
    80020efa:	6418                	ld	a4,8(s0)
    80020efc:	47d9                	li	a5,22
    80020efe:	0000d597          	auipc	a1,0xd
    80020f02:	2aa58593          	addi	a1,a1,682 # 8002e1a8 <__func__.0+0x2c0>
    80020f06:	00f70663          	beq	a4,a5,80020f12 <timecmp_test_13+0xcc>
    80020f0a:	0000d597          	auipc	a1,0xd
    80020f0e:	2ae58593          	addi	a1,a1,686 # 8002e1b8 <__func__.0+0x2d0>
    80020f12:	0000d517          	auipc	a0,0xd
    80020f16:	2e650513          	addi	a0,a0,742 # 8002e1f8 <__func__.0+0x310>
    80020f1a:	5100a0ef          	jal	8002b42a <printf>
    80020f1e:	00037797          	auipc	a5,0x37
    80020f22:	0f37c783          	lbu	a5,243(a5) # 80058011 <excpt+0x1>
    80020f26:	c789                	beqz	a5,80020f30 <timecmp_test_13+0xea>
    80020f28:	6418                	ld	a4,8(s0)
    80020f2a:	47d9                	li	a5,22
    80020f2c:	00f70c63          	beq	a4,a5,80020f44 <timecmp_test_13+0xfe>
    80020f30:	0000d517          	auipc	a0,0xd
    80020f34:	2d050513          	addi	a0,a0,720 # 8002e200 <__func__.0+0x318>
    80020f38:	4f20a0ef          	jal	8002b42a <printf>
    80020f3c:	02900513          	li	a0,41
    80020f40:	1d8090ef          	jal	8002a118 <putchar>
    80020f44:	4529                	li	a0,10
    80020f46:	1d2090ef          	jal	8002a118 <putchar>
    80020f4a:	00037497          	auipc	s1,0x37
    80020f4e:	0c74c483          	lbu	s1,199(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020f52:	0000d597          	auipc	a1,0xd
    80020f56:	26658593          	addi	a1,a1,614 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020f5a:	cc91                	beqz	s1,80020f76 <timecmp_test_13+0x130>
    80020f5c:	6418                	ld	a4,8(s0)
    80020f5e:	47d9                	li	a5,22
    TEST_END(); 
    80020f60:	0000d597          	auipc	a1,0xd
    80020f64:	24858593          	addi	a1,a1,584 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020f68:	00f70763          	beq	a4,a5,80020f76 <timecmp_test_13+0x130>
    80020f6c:	4481                	li	s1,0
    TEST_END(); 
    80020f6e:	0000d597          	auipc	a1,0xd
    80020f72:	24a58593          	addi	a1,a1,586 # 8002e1b8 <__func__.0+0x2d0>
    80020f76:	0000d517          	auipc	a0,0xd
    80020f7a:	2ea50513          	addi	a0,a0,746 # 8002e260 <__func__.0+0x378>
    80020f7e:	4ac0a0ef          	jal	8002b42a <printf>
    80020f82:	4511                	li	a0,4
    80020f84:	f85df0ef          	jal	80000f08 <goto_priv>
    80020f88:	89de00ef          	jal	80001824 <reset_state>
}
    80020f8c:	60e2                	ld	ra,24(sp)
    80020f8e:	6442                	ld	s0,16(sp)
    80020f90:	8526                	mv	a0,s1
    80020f92:	64a2                	ld	s1,8(sp)
    80020f94:	6105                	addi	sp,sp,32
    80020f96:	8082                	ret

0000000080020f98 <timecmp_test_14>:

bool timecmp_test_14() {
    80020f98:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020f9a:	0000d597          	auipc	a1,0xd
    80020f9e:	93658593          	addi	a1,a1,-1738 # 8002d8d0 <__func__.7>
    80020fa2:	0000d517          	auipc	a0,0xd
    80020fa6:	22650513          	addi	a0,a0,550 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_14() {
    80020faa:	ec06                	sd	ra,24(sp)
    80020fac:	e822                	sd	s0,16(sp)
    80020fae:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020fb0:	47a0a0ef          	jal	8002b42a <printf>
    80020fb4:	4529                	li	a0,10
    80020fb6:	162090ef          	jal	8002a118 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020fba:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020fbe:	57fd                	li	a5,-1
    80020fc0:	17fe                	slli	a5,a5,0x3f
    80020fc2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020fc6:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020fca:	30a025f3          	csrr	a1,0x30a
    80020fce:	00014517          	auipc	a0,0x14
    80020fd2:	81250513          	addi	a0,a0,-2030 # 800347e0 <__func__.0+0x68f8>
    80020fd6:	4540a0ef          	jal	8002b42a <printf>
    80020fda:	60a025f3          	csrr	a1,henvcfg
    80020fde:	00014517          	auipc	a0,0x14
    80020fe2:	80250513          	addi	a0,a0,-2046 # 800347e0 <__func__.0+0x68f8>
    80020fe6:	4440a0ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    80020fea:	4509                	li	a0,2
    80020fec:	f1ddf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ff0:	e1ddf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020ff4:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020ff8:	00037597          	auipc	a1,0x37
    80020ffc:	0195c583          	lbu	a1,25(a1) # 80058011 <excpt+0x1>
    80021000:	00015517          	auipc	a0,0x15
    80021004:	4d850513          	addi	a0,a0,1240 # 800364d8 <__func__.0+0x85f0>
    80021008:	00037417          	auipc	s0,0x37
    8002100c:	00840413          	addi	s0,s0,8 # 80058010 <excpt>
    80021010:	41a0a0ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    80021014:	640c                	ld	a1,8(s0)
    80021016:	00015517          	auipc	a0,0x15
    8002101a:	4d250513          	addi	a0,a0,1234 # 800364e8 <__func__.0+0x8600>
    8002101e:	40c0a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021022:	08200593          	li	a1,130
    80021026:	00015617          	auipc	a2,0x15
    8002102a:	54260613          	addi	a2,a2,1346 # 80036568 <__func__.0+0x8680>
    8002102e:	0000d517          	auipc	a0,0xd
    80021032:	1b250513          	addi	a0,a0,434 # 8002e1e0 <__func__.0+0x2f8>
    80021036:	3f40a0ef          	jal	8002b42a <printf>
    8002103a:	00037797          	auipc	a5,0x37
    8002103e:	fd77c783          	lbu	a5,-41(a5) # 80058011 <excpt+0x1>
    80021042:	0000d597          	auipc	a1,0xd
    80021046:	17658593          	addi	a1,a1,374 # 8002e1b8 <__func__.0+0x2d0>
    8002104a:	cf89                	beqz	a5,80021064 <timecmp_test_14+0xcc>
    8002104c:	6418                	ld	a4,8(s0)
    8002104e:	47d9                	li	a5,22
    80021050:	0000d597          	auipc	a1,0xd
    80021054:	15858593          	addi	a1,a1,344 # 8002e1a8 <__func__.0+0x2c0>
    80021058:	00f70663          	beq	a4,a5,80021064 <timecmp_test_14+0xcc>
    8002105c:	0000d597          	auipc	a1,0xd
    80021060:	15c58593          	addi	a1,a1,348 # 8002e1b8 <__func__.0+0x2d0>
    80021064:	0000d517          	auipc	a0,0xd
    80021068:	19450513          	addi	a0,a0,404 # 8002e1f8 <__func__.0+0x310>
    8002106c:	3be0a0ef          	jal	8002b42a <printf>
    80021070:	00037797          	auipc	a5,0x37
    80021074:	fa17c783          	lbu	a5,-95(a5) # 80058011 <excpt+0x1>
    80021078:	c789                	beqz	a5,80021082 <timecmp_test_14+0xea>
    8002107a:	6418                	ld	a4,8(s0)
    8002107c:	47d9                	li	a5,22
    8002107e:	00f70c63          	beq	a4,a5,80021096 <timecmp_test_14+0xfe>
    80021082:	0000d517          	auipc	a0,0xd
    80021086:	17e50513          	addi	a0,a0,382 # 8002e200 <__func__.0+0x318>
    8002108a:	3a00a0ef          	jal	8002b42a <printf>
    8002108e:	02900513          	li	a0,41
    80021092:	086090ef          	jal	8002a118 <putchar>
    80021096:	4529                	li	a0,10
    80021098:	080090ef          	jal	8002a118 <putchar>
    8002109c:	00037497          	auipc	s1,0x37
    800210a0:	f754c483          	lbu	s1,-139(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800210a4:	0000d597          	auipc	a1,0xd
    800210a8:	11458593          	addi	a1,a1,276 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210ac:	cc91                	beqz	s1,800210c8 <timecmp_test_14+0x130>
    800210ae:	6418                	ld	a4,8(s0)
    800210b0:	47d9                	li	a5,22
    TEST_END(); 
    800210b2:	0000d597          	auipc	a1,0xd
    800210b6:	0f658593          	addi	a1,a1,246 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210ba:	00f70763          	beq	a4,a5,800210c8 <timecmp_test_14+0x130>
    800210be:	4481                	li	s1,0
    TEST_END(); 
    800210c0:	0000d597          	auipc	a1,0xd
    800210c4:	0f858593          	addi	a1,a1,248 # 8002e1b8 <__func__.0+0x2d0>
    800210c8:	0000d517          	auipc	a0,0xd
    800210cc:	19850513          	addi	a0,a0,408 # 8002e260 <__func__.0+0x378>
    800210d0:	35a0a0ef          	jal	8002b42a <printf>
    800210d4:	4511                	li	a0,4
    800210d6:	e33df0ef          	jal	80000f08 <goto_priv>
    800210da:	f4ae00ef          	jal	80001824 <reset_state>
}
    800210de:	60e2                	ld	ra,24(sp)
    800210e0:	6442                	ld	s0,16(sp)
    800210e2:	8526                	mv	a0,s1
    800210e4:	64a2                	ld	s1,8(sp)
    800210e6:	6105                	addi	sp,sp,32
    800210e8:	8082                	ret

00000000800210ea <timecmp_test_15>:


bool timecmp_test_15() {
    800210ea:	1101                	addi	sp,sp,-32

    TEST_START();    
    800210ec:	0000c597          	auipc	a1,0xc
    800210f0:	7f458593          	addi	a1,a1,2036 # 8002d8e0 <__func__.6>
    800210f4:	0000d517          	auipc	a0,0xd
    800210f8:	0d450513          	addi	a0,a0,212 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_15() {
    800210fc:	ec06                	sd	ra,24(sp)
    800210fe:	e822                	sd	s0,16(sp)
    80021100:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021102:	3280a0ef          	jal	8002b42a <printf>
    80021106:	4529                	li	a0,10
    80021108:	010090ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002110c:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021110:	57fd                	li	a5,-1
    80021112:	17fe                	slli	a5,a5,0x3f
    80021114:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021118:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002111c:	30a025f3          	csrr	a1,0x30a
    80021120:	00013517          	auipc	a0,0x13
    80021124:	6c050513          	addi	a0,a0,1728 # 800347e0 <__func__.0+0x68f8>
    80021128:	3020a0ef          	jal	8002b42a <printf>
    8002112c:	60a025f3          	csrr	a1,henvcfg
    80021130:	00013517          	auipc	a0,0x13
    80021134:	6b050513          	addi	a0,a0,1712 # 800347e0 <__func__.0+0x68f8>
    80021138:	2f20a0ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VU);
    8002113c:	4501                	li	a0,0
    8002113e:	dcbdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021142:	ccbdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021146:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002114a:	00037597          	auipc	a1,0x37
    8002114e:	ec75c583          	lbu	a1,-313(a1) # 80058011 <excpt+0x1>
    80021152:	00015517          	auipc	a0,0x15
    80021156:	38650513          	addi	a0,a0,902 # 800364d8 <__func__.0+0x85f0>
    8002115a:	00037417          	auipc	s0,0x37
    8002115e:	eb640413          	addi	s0,s0,-330 # 80058010 <excpt>
    80021162:	2c80a0ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    80021166:	640c                	ld	a1,8(s0)
    80021168:	00015517          	auipc	a0,0x15
    8002116c:	38050513          	addi	a0,a0,896 # 800364e8 <__func__.0+0x8600>
    80021170:	2ba0a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021174:	08200593          	li	a1,130
    80021178:	00015617          	auipc	a2,0x15
    8002117c:	46060613          	addi	a2,a2,1120 # 800365d8 <__func__.0+0x86f0>
    80021180:	0000d517          	auipc	a0,0xd
    80021184:	06050513          	addi	a0,a0,96 # 8002e1e0 <__func__.0+0x2f8>
    80021188:	2a20a0ef          	jal	8002b42a <printf>
    8002118c:	00037797          	auipc	a5,0x37
    80021190:	e857c783          	lbu	a5,-379(a5) # 80058011 <excpt+0x1>
    80021194:	0000d597          	auipc	a1,0xd
    80021198:	02458593          	addi	a1,a1,36 # 8002e1b8 <__func__.0+0x2d0>
    8002119c:	cf89                	beqz	a5,800211b6 <timecmp_test_15+0xcc>
    8002119e:	6418                	ld	a4,8(s0)
    800211a0:	4789                	li	a5,2
    800211a2:	0000d597          	auipc	a1,0xd
    800211a6:	00658593          	addi	a1,a1,6 # 8002e1a8 <__func__.0+0x2c0>
    800211aa:	00f70663          	beq	a4,a5,800211b6 <timecmp_test_15+0xcc>
    800211ae:	0000d597          	auipc	a1,0xd
    800211b2:	00a58593          	addi	a1,a1,10 # 8002e1b8 <__func__.0+0x2d0>
    800211b6:	0000d517          	auipc	a0,0xd
    800211ba:	04250513          	addi	a0,a0,66 # 8002e1f8 <__func__.0+0x310>
    800211be:	26c0a0ef          	jal	8002b42a <printf>
    800211c2:	00037797          	auipc	a5,0x37
    800211c6:	e4f7c783          	lbu	a5,-433(a5) # 80058011 <excpt+0x1>
    800211ca:	c789                	beqz	a5,800211d4 <timecmp_test_15+0xea>
    800211cc:	6418                	ld	a4,8(s0)
    800211ce:	4789                	li	a5,2
    800211d0:	00f70c63          	beq	a4,a5,800211e8 <timecmp_test_15+0xfe>
    800211d4:	0000d517          	auipc	a0,0xd
    800211d8:	02c50513          	addi	a0,a0,44 # 8002e200 <__func__.0+0x318>
    800211dc:	24e0a0ef          	jal	8002b42a <printf>
    800211e0:	02900513          	li	a0,41
    800211e4:	735080ef          	jal	8002a118 <putchar>
    800211e8:	4529                	li	a0,10
    800211ea:	72f080ef          	jal	8002a118 <putchar>
    800211ee:	00037497          	auipc	s1,0x37
    800211f2:	e234c483          	lbu	s1,-477(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800211f6:	0000d597          	auipc	a1,0xd
    800211fa:	fc258593          	addi	a1,a1,-62 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800211fe:	cc91                	beqz	s1,8002121a <timecmp_test_15+0x130>
    80021200:	6418                	ld	a4,8(s0)
    80021202:	4789                	li	a5,2
    TEST_END(); 
    80021204:	0000d597          	auipc	a1,0xd
    80021208:	fa458593          	addi	a1,a1,-92 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002120c:	00f70763          	beq	a4,a5,8002121a <timecmp_test_15+0x130>
    80021210:	4481                	li	s1,0
    TEST_END(); 
    80021212:	0000d597          	auipc	a1,0xd
    80021216:	fa658593          	addi	a1,a1,-90 # 8002e1b8 <__func__.0+0x2d0>
    8002121a:	0000d517          	auipc	a0,0xd
    8002121e:	04650513          	addi	a0,a0,70 # 8002e260 <__func__.0+0x378>
    80021222:	2080a0ef          	jal	8002b42a <printf>
    80021226:	4511                	li	a0,4
    80021228:	ce1df0ef          	jal	80000f08 <goto_priv>
    8002122c:	df8e00ef          	jal	80001824 <reset_state>
}
    80021230:	60e2                	ld	ra,24(sp)
    80021232:	6442                	ld	s0,16(sp)
    80021234:	8526                	mv	a0,s1
    80021236:	64a2                	ld	s1,8(sp)
    80021238:	6105                	addi	sp,sp,32
    8002123a:	8082                	ret

000000008002123c <timecmp_test_16>:

bool timecmp_test_16() {
    8002123c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002123e:	0000c597          	auipc	a1,0xc
    80021242:	6b258593          	addi	a1,a1,1714 # 8002d8f0 <__func__.5>
    80021246:	0000d517          	auipc	a0,0xd
    8002124a:	f8250513          	addi	a0,a0,-126 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_16() {
    8002124e:	ec06                	sd	ra,24(sp)
    80021250:	e822                	sd	s0,16(sp)
    80021252:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021254:	1d60a0ef          	jal	8002b42a <printf>
    80021258:	4529                	li	a0,10
    8002125a:	6bf080ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002125e:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021262:	57fd                	li	a5,-1
    80021264:	17fe                	slli	a5,a5,0x3f
    80021266:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002126a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002126e:	30a025f3          	csrr	a1,0x30a
    80021272:	00013517          	auipc	a0,0x13
    80021276:	56e50513          	addi	a0,a0,1390 # 800347e0 <__func__.0+0x68f8>
    8002127a:	1b00a0ef          	jal	8002b42a <printf>
    8002127e:	60a025f3          	csrr	a1,henvcfg
    80021282:	00013517          	auipc	a0,0x13
    80021286:	55e50513          	addi	a0,a0,1374 # 800347e0 <__func__.0+0x68f8>
    8002128a:	1a00a0ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    8002128e:	4509                	li	a0,2
    80021290:	c79df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021294:	b79df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021298:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002129c:	00037597          	auipc	a1,0x37
    800212a0:	d755c583          	lbu	a1,-651(a1) # 80058011 <excpt+0x1>
    800212a4:	00015517          	auipc	a0,0x15
    800212a8:	23450513          	addi	a0,a0,564 # 800364d8 <__func__.0+0x85f0>
    800212ac:	00037417          	auipc	s0,0x37
    800212b0:	d6440413          	addi	s0,s0,-668 # 80058010 <excpt>
    800212b4:	1760a0ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    800212b8:	640c                	ld	a1,8(s0)
    800212ba:	00015517          	auipc	a0,0x15
    800212be:	22e50513          	addi	a0,a0,558 # 800364e8 <__func__.0+0x8600>
    800212c2:	1680a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212c6:	08200593          	li	a1,130
    800212ca:	00015617          	auipc	a2,0x15
    800212ce:	37e60613          	addi	a2,a2,894 # 80036648 <__func__.0+0x8760>
    800212d2:	0000d517          	auipc	a0,0xd
    800212d6:	f0e50513          	addi	a0,a0,-242 # 8002e1e0 <__func__.0+0x2f8>
    800212da:	1500a0ef          	jal	8002b42a <printf>
    800212de:	00037797          	auipc	a5,0x37
    800212e2:	d337c783          	lbu	a5,-717(a5) # 80058011 <excpt+0x1>
    800212e6:	0000d597          	auipc	a1,0xd
    800212ea:	ed258593          	addi	a1,a1,-302 # 8002e1b8 <__func__.0+0x2d0>
    800212ee:	cf89                	beqz	a5,80021308 <timecmp_test_16+0xcc>
    800212f0:	6418                	ld	a4,8(s0)
    800212f2:	4789                	li	a5,2
    800212f4:	0000d597          	auipc	a1,0xd
    800212f8:	eb458593          	addi	a1,a1,-332 # 8002e1a8 <__func__.0+0x2c0>
    800212fc:	00f70663          	beq	a4,a5,80021308 <timecmp_test_16+0xcc>
    80021300:	0000d597          	auipc	a1,0xd
    80021304:	eb858593          	addi	a1,a1,-328 # 8002e1b8 <__func__.0+0x2d0>
    80021308:	0000d517          	auipc	a0,0xd
    8002130c:	ef050513          	addi	a0,a0,-272 # 8002e1f8 <__func__.0+0x310>
    80021310:	11a0a0ef          	jal	8002b42a <printf>
    80021314:	00037797          	auipc	a5,0x37
    80021318:	cfd7c783          	lbu	a5,-771(a5) # 80058011 <excpt+0x1>
    8002131c:	c789                	beqz	a5,80021326 <timecmp_test_16+0xea>
    8002131e:	6418                	ld	a4,8(s0)
    80021320:	4789                	li	a5,2
    80021322:	00f70c63          	beq	a4,a5,8002133a <timecmp_test_16+0xfe>
    80021326:	0000d517          	auipc	a0,0xd
    8002132a:	eda50513          	addi	a0,a0,-294 # 8002e200 <__func__.0+0x318>
    8002132e:	0fc0a0ef          	jal	8002b42a <printf>
    80021332:	02900513          	li	a0,41
    80021336:	5e3080ef          	jal	8002a118 <putchar>
    8002133a:	4529                	li	a0,10
    8002133c:	5dd080ef          	jal	8002a118 <putchar>
    80021340:	00037497          	auipc	s1,0x37
    80021344:	cd14c483          	lbu	s1,-815(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021348:	0000d597          	auipc	a1,0xd
    8002134c:	e7058593          	addi	a1,a1,-400 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021350:	cc91                	beqz	s1,8002136c <timecmp_test_16+0x130>
    80021352:	6418                	ld	a4,8(s0)
    80021354:	4789                	li	a5,2
    TEST_END(); 
    80021356:	0000d597          	auipc	a1,0xd
    8002135a:	e5258593          	addi	a1,a1,-430 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002135e:	00f70763          	beq	a4,a5,8002136c <timecmp_test_16+0x130>
    80021362:	4481                	li	s1,0
    TEST_END(); 
    80021364:	0000d597          	auipc	a1,0xd
    80021368:	e5458593          	addi	a1,a1,-428 # 8002e1b8 <__func__.0+0x2d0>
    8002136c:	0000d517          	auipc	a0,0xd
    80021370:	ef450513          	addi	a0,a0,-268 # 8002e260 <__func__.0+0x378>
    80021374:	0b60a0ef          	jal	8002b42a <printf>
    80021378:	4511                	li	a0,4
    8002137a:	b8fdf0ef          	jal	80000f08 <goto_priv>
    8002137e:	ca6e00ef          	jal	80001824 <reset_state>
}
    80021382:	60e2                	ld	ra,24(sp)
    80021384:	6442                	ld	s0,16(sp)
    80021386:	8526                	mv	a0,s1
    80021388:	64a2                	ld	s1,8(sp)
    8002138a:	6105                	addi	sp,sp,32
    8002138c:	8082                	ret

000000008002138e <timecmp_test_17>:

bool timecmp_test_17() {
    8002138e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021390:	0000c597          	auipc	a1,0xc
    80021394:	57058593          	addi	a1,a1,1392 # 8002d900 <__func__.4>
    80021398:	0000d517          	auipc	a0,0xd
    8002139c:	e3050513          	addi	a0,a0,-464 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_17() {
    800213a0:	ec06                	sd	ra,24(sp)
    800213a2:	e822                	sd	s0,16(sp)
    800213a4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800213a6:	0840a0ef          	jal	8002b42a <printf>
    800213aa:	4529                	li	a0,10
    800213ac:	56d080ef          	jal	8002a118 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800213b0:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800213b4:	57fd                	li	a5,-1
    800213b6:	17fe                	slli	a5,a5,0x3f
    800213b8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800213bc:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800213c0:	30a025f3          	csrr	a1,0x30a
    800213c4:	00013517          	auipc	a0,0x13
    800213c8:	41c50513          	addi	a0,a0,1052 # 800347e0 <__func__.0+0x68f8>
    800213cc:	05e0a0ef          	jal	8002b42a <printf>
    800213d0:	60a025f3          	csrr	a1,henvcfg
    800213d4:	00013517          	auipc	a0,0x13
    800213d8:	40c50513          	addi	a0,a0,1036 # 800347e0 <__func__.0+0x68f8>
    800213dc:	04e0a0ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VU);
    800213e0:	4501                	li	a0,0
    800213e2:	b27df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800213e6:	a27df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800213ea:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800213ee:	00037597          	auipc	a1,0x37
    800213f2:	c235c583          	lbu	a1,-989(a1) # 80058011 <excpt+0x1>
    800213f6:	00015517          	auipc	a0,0x15
    800213fa:	0e250513          	addi	a0,a0,226 # 800364d8 <__func__.0+0x85f0>
    800213fe:	00037417          	auipc	s0,0x37
    80021402:	c1240413          	addi	s0,s0,-1006 # 80058010 <excpt>
    80021406:	0240a0ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    8002140a:	640c                	ld	a1,8(s0)
    8002140c:	00015517          	auipc	a0,0x15
    80021410:	0dc50513          	addi	a0,a0,220 # 800364e8 <__func__.0+0x8600>
    80021414:	0160a0ef          	jal	8002b42a <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021418:	08200593          	li	a1,130
    8002141c:	00015617          	auipc	a2,0x15
    80021420:	0dc60613          	addi	a2,a2,220 # 800364f8 <__func__.0+0x8610>
    80021424:	0000d517          	auipc	a0,0xd
    80021428:	dbc50513          	addi	a0,a0,-580 # 8002e1e0 <__func__.0+0x2f8>
    8002142c:	7ff090ef          	jal	8002b42a <printf>
    80021430:	00037797          	auipc	a5,0x37
    80021434:	be17c783          	lbu	a5,-1055(a5) # 80058011 <excpt+0x1>
    80021438:	0000d597          	auipc	a1,0xd
    8002143c:	d8058593          	addi	a1,a1,-640 # 8002e1b8 <__func__.0+0x2d0>
    80021440:	cf89                	beqz	a5,8002145a <timecmp_test_17+0xcc>
    80021442:	6418                	ld	a4,8(s0)
    80021444:	47d9                	li	a5,22
    80021446:	0000d597          	auipc	a1,0xd
    8002144a:	d6258593          	addi	a1,a1,-670 # 8002e1a8 <__func__.0+0x2c0>
    8002144e:	00f70663          	beq	a4,a5,8002145a <timecmp_test_17+0xcc>
    80021452:	0000d597          	auipc	a1,0xd
    80021456:	d6658593          	addi	a1,a1,-666 # 8002e1b8 <__func__.0+0x2d0>
    8002145a:	0000d517          	auipc	a0,0xd
    8002145e:	d9e50513          	addi	a0,a0,-610 # 8002e1f8 <__func__.0+0x310>
    80021462:	7c9090ef          	jal	8002b42a <printf>
    80021466:	00037797          	auipc	a5,0x37
    8002146a:	bab7c783          	lbu	a5,-1109(a5) # 80058011 <excpt+0x1>
    8002146e:	c789                	beqz	a5,80021478 <timecmp_test_17+0xea>
    80021470:	6418                	ld	a4,8(s0)
    80021472:	47d9                	li	a5,22
    80021474:	00f70c63          	beq	a4,a5,8002148c <timecmp_test_17+0xfe>
    80021478:	0000d517          	auipc	a0,0xd
    8002147c:	d8850513          	addi	a0,a0,-632 # 8002e200 <__func__.0+0x318>
    80021480:	7ab090ef          	jal	8002b42a <printf>
    80021484:	02900513          	li	a0,41
    80021488:	491080ef          	jal	8002a118 <putchar>
    8002148c:	4529                	li	a0,10
    8002148e:	48b080ef          	jal	8002a118 <putchar>
    80021492:	00037497          	auipc	s1,0x37
    80021496:	b7f4c483          	lbu	s1,-1153(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002149a:	0000d597          	auipc	a1,0xd
    8002149e:	d1e58593          	addi	a1,a1,-738 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800214a2:	cc91                	beqz	s1,800214be <timecmp_test_17+0x130>
    800214a4:	6418                	ld	a4,8(s0)
    800214a6:	47d9                	li	a5,22
    TEST_END(); 
    800214a8:	0000d597          	auipc	a1,0xd
    800214ac:	d0058593          	addi	a1,a1,-768 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800214b0:	00f70763          	beq	a4,a5,800214be <timecmp_test_17+0x130>
    800214b4:	4481                	li	s1,0
    TEST_END(); 
    800214b6:	0000d597          	auipc	a1,0xd
    800214ba:	d0258593          	addi	a1,a1,-766 # 8002e1b8 <__func__.0+0x2d0>
    800214be:	0000d517          	auipc	a0,0xd
    800214c2:	da250513          	addi	a0,a0,-606 # 8002e260 <__func__.0+0x378>
    800214c6:	765090ef          	jal	8002b42a <printf>
    800214ca:	4511                	li	a0,4
    800214cc:	a3ddf0ef          	jal	80000f08 <goto_priv>
    800214d0:	b54e00ef          	jal	80001824 <reset_state>
}
    800214d4:	60e2                	ld	ra,24(sp)
    800214d6:	6442                	ld	s0,16(sp)
    800214d8:	8526                	mv	a0,s1
    800214da:	64a2                	ld	s1,8(sp)
    800214dc:	6105                	addi	sp,sp,32
    800214de:	8082                	ret

00000000800214e0 <timecmp_test_18>:

bool timecmp_test_18() {
    800214e0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800214e2:	0000c597          	auipc	a1,0xc
    800214e6:	42e58593          	addi	a1,a1,1070 # 8002d910 <__func__.3>
    800214ea:	0000d517          	auipc	a0,0xd
    800214ee:	cde50513          	addi	a0,a0,-802 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_18() {
    800214f2:	ec06                	sd	ra,24(sp)
    800214f4:	e822                	sd	s0,16(sp)
    800214f6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800214f8:	733090ef          	jal	8002b42a <printf>
    800214fc:	4529                	li	a0,10
    800214fe:	41b080ef          	jal	8002a118 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021502:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021506:	57fd                	li	a5,-1
    80021508:	17fe                	slli	a5,a5,0x3f
    8002150a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002150e:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021512:	30a025f3          	csrr	a1,0x30a
    80021516:	00013517          	auipc	a0,0x13
    8002151a:	2ca50513          	addi	a0,a0,714 # 800347e0 <__func__.0+0x68f8>
    8002151e:	70d090ef          	jal	8002b42a <printf>
    80021522:	60a025f3          	csrr	a1,henvcfg
    80021526:	00013517          	auipc	a0,0x13
    8002152a:	2ba50513          	addi	a0,a0,698 # 800347e0 <__func__.0+0x68f8>
    8002152e:	6fd090ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    80021532:	4509                	li	a0,2
    80021534:	9d5df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021538:	8d5df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002153c:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021540:	00037597          	auipc	a1,0x37
    80021544:	ad15c583          	lbu	a1,-1327(a1) # 80058011 <excpt+0x1>
    80021548:	00015517          	auipc	a0,0x15
    8002154c:	f9050513          	addi	a0,a0,-112 # 800364d8 <__func__.0+0x85f0>
    80021550:	00037417          	auipc	s0,0x37
    80021554:	ac040413          	addi	s0,s0,-1344 # 80058010 <excpt>
    80021558:	6d3090ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    8002155c:	640c                	ld	a1,8(s0)
    8002155e:	00015517          	auipc	a0,0x15
    80021562:	f8a50513          	addi	a0,a0,-118 # 800364e8 <__func__.0+0x8600>
    80021566:	6c5090ef          	jal	8002b42a <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002156a:	08200593          	li	a1,130
    8002156e:	00015617          	auipc	a2,0x15
    80021572:	ffa60613          	addi	a2,a2,-6 # 80036568 <__func__.0+0x8680>
    80021576:	0000d517          	auipc	a0,0xd
    8002157a:	c6a50513          	addi	a0,a0,-918 # 8002e1e0 <__func__.0+0x2f8>
    8002157e:	6ad090ef          	jal	8002b42a <printf>
    80021582:	00037797          	auipc	a5,0x37
    80021586:	a8f7c783          	lbu	a5,-1393(a5) # 80058011 <excpt+0x1>
    8002158a:	0000d597          	auipc	a1,0xd
    8002158e:	c2e58593          	addi	a1,a1,-978 # 8002e1b8 <__func__.0+0x2d0>
    80021592:	cf89                	beqz	a5,800215ac <timecmp_test_18+0xcc>
    80021594:	6418                	ld	a4,8(s0)
    80021596:	47d9                	li	a5,22
    80021598:	0000d597          	auipc	a1,0xd
    8002159c:	c1058593          	addi	a1,a1,-1008 # 8002e1a8 <__func__.0+0x2c0>
    800215a0:	00f70663          	beq	a4,a5,800215ac <timecmp_test_18+0xcc>
    800215a4:	0000d597          	auipc	a1,0xd
    800215a8:	c1458593          	addi	a1,a1,-1004 # 8002e1b8 <__func__.0+0x2d0>
    800215ac:	0000d517          	auipc	a0,0xd
    800215b0:	c4c50513          	addi	a0,a0,-948 # 8002e1f8 <__func__.0+0x310>
    800215b4:	677090ef          	jal	8002b42a <printf>
    800215b8:	00037797          	auipc	a5,0x37
    800215bc:	a597c783          	lbu	a5,-1447(a5) # 80058011 <excpt+0x1>
    800215c0:	c789                	beqz	a5,800215ca <timecmp_test_18+0xea>
    800215c2:	6418                	ld	a4,8(s0)
    800215c4:	47d9                	li	a5,22
    800215c6:	00f70c63          	beq	a4,a5,800215de <timecmp_test_18+0xfe>
    800215ca:	0000d517          	auipc	a0,0xd
    800215ce:	c3650513          	addi	a0,a0,-970 # 8002e200 <__func__.0+0x318>
    800215d2:	659090ef          	jal	8002b42a <printf>
    800215d6:	02900513          	li	a0,41
    800215da:	33f080ef          	jal	8002a118 <putchar>
    800215de:	4529                	li	a0,10
    800215e0:	339080ef          	jal	8002a118 <putchar>
    800215e4:	00037497          	auipc	s1,0x37
    800215e8:	a2d4c483          	lbu	s1,-1491(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800215ec:	0000d597          	auipc	a1,0xd
    800215f0:	bcc58593          	addi	a1,a1,-1076 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215f4:	cc91                	beqz	s1,80021610 <timecmp_test_18+0x130>
    800215f6:	6418                	ld	a4,8(s0)
    800215f8:	47d9                	li	a5,22
    TEST_END(); 
    800215fa:	0000d597          	auipc	a1,0xd
    800215fe:	bae58593          	addi	a1,a1,-1106 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021602:	00f70763          	beq	a4,a5,80021610 <timecmp_test_18+0x130>
    80021606:	4481                	li	s1,0
    TEST_END(); 
    80021608:	0000d597          	auipc	a1,0xd
    8002160c:	bb058593          	addi	a1,a1,-1104 # 8002e1b8 <__func__.0+0x2d0>
    80021610:	0000d517          	auipc	a0,0xd
    80021614:	c5050513          	addi	a0,a0,-944 # 8002e260 <__func__.0+0x378>
    80021618:	613090ef          	jal	8002b42a <printf>
    8002161c:	4511                	li	a0,4
    8002161e:	8ebdf0ef          	jal	80000f08 <goto_priv>
    80021622:	a02e00ef          	jal	80001824 <reset_state>
}
    80021626:	60e2                	ld	ra,24(sp)
    80021628:	6442                	ld	s0,16(sp)
    8002162a:	8526                	mv	a0,s1
    8002162c:	64a2                	ld	s1,8(sp)
    8002162e:	6105                	addi	sp,sp,32
    80021630:	8082                	ret

0000000080021632 <timecmp_test_19>:


bool timecmp_test_19() {
    80021632:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021634:	0000c597          	auipc	a1,0xc
    80021638:	2ec58593          	addi	a1,a1,748 # 8002d920 <__func__.2>
    8002163c:	0000d517          	auipc	a0,0xd
    80021640:	b8c50513          	addi	a0,a0,-1140 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_19() {
    80021644:	ec06                	sd	ra,24(sp)
    80021646:	e822                	sd	s0,16(sp)
    80021648:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002164a:	5e1090ef          	jal	8002b42a <printf>
    8002164e:	4529                	li	a0,10
    80021650:	2c9080ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021654:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021658:	57fd                	li	a5,-1
    8002165a:	17fe                	slli	a5,a5,0x3f
    8002165c:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021660:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021664:	30a025f3          	csrr	a1,0x30a
    80021668:	00013517          	auipc	a0,0x13
    8002166c:	17850513          	addi	a0,a0,376 # 800347e0 <__func__.0+0x68f8>
    80021670:	5bb090ef          	jal	8002b42a <printf>
    80021674:	60a025f3          	csrr	a1,henvcfg
    80021678:	00013517          	auipc	a0,0x13
    8002167c:	16850513          	addi	a0,a0,360 # 800347e0 <__func__.0+0x68f8>
    80021680:	5ab090ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VU);
    80021684:	4501                	li	a0,0
    80021686:	883df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002168a:	f82df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002168e:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021692:	00037597          	auipc	a1,0x37
    80021696:	97f5c583          	lbu	a1,-1665(a1) # 80058011 <excpt+0x1>
    8002169a:	00015517          	auipc	a0,0x15
    8002169e:	e3e50513          	addi	a0,a0,-450 # 800364d8 <__func__.0+0x85f0>
    800216a2:	00037417          	auipc	s0,0x37
    800216a6:	96e40413          	addi	s0,s0,-1682 # 80058010 <excpt>
    800216aa:	581090ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    800216ae:	640c                	ld	a1,8(s0)
    800216b0:	00015517          	auipc	a0,0x15
    800216b4:	e3850513          	addi	a0,a0,-456 # 800364e8 <__func__.0+0x8600>
    800216b8:	573090ef          	jal	8002b42a <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800216bc:	08200593          	li	a1,130
    800216c0:	00015617          	auipc	a2,0x15
    800216c4:	f1860613          	addi	a2,a2,-232 # 800365d8 <__func__.0+0x86f0>
    800216c8:	0000d517          	auipc	a0,0xd
    800216cc:	b1850513          	addi	a0,a0,-1256 # 8002e1e0 <__func__.0+0x2f8>
    800216d0:	55b090ef          	jal	8002b42a <printf>
    800216d4:	00037797          	auipc	a5,0x37
    800216d8:	93d7c783          	lbu	a5,-1731(a5) # 80058011 <excpt+0x1>
    800216dc:	0000d597          	auipc	a1,0xd
    800216e0:	adc58593          	addi	a1,a1,-1316 # 8002e1b8 <__func__.0+0x2d0>
    800216e4:	cf89                	beqz	a5,800216fe <timecmp_test_19+0xcc>
    800216e6:	6418                	ld	a4,8(s0)
    800216e8:	4789                	li	a5,2
    800216ea:	0000d597          	auipc	a1,0xd
    800216ee:	abe58593          	addi	a1,a1,-1346 # 8002e1a8 <__func__.0+0x2c0>
    800216f2:	00f70663          	beq	a4,a5,800216fe <timecmp_test_19+0xcc>
    800216f6:	0000d597          	auipc	a1,0xd
    800216fa:	ac258593          	addi	a1,a1,-1342 # 8002e1b8 <__func__.0+0x2d0>
    800216fe:	0000d517          	auipc	a0,0xd
    80021702:	afa50513          	addi	a0,a0,-1286 # 8002e1f8 <__func__.0+0x310>
    80021706:	525090ef          	jal	8002b42a <printf>
    8002170a:	00037797          	auipc	a5,0x37
    8002170e:	9077c783          	lbu	a5,-1785(a5) # 80058011 <excpt+0x1>
    80021712:	c789                	beqz	a5,8002171c <timecmp_test_19+0xea>
    80021714:	6418                	ld	a4,8(s0)
    80021716:	4789                	li	a5,2
    80021718:	00f70c63          	beq	a4,a5,80021730 <timecmp_test_19+0xfe>
    8002171c:	0000d517          	auipc	a0,0xd
    80021720:	ae450513          	addi	a0,a0,-1308 # 8002e200 <__func__.0+0x318>
    80021724:	507090ef          	jal	8002b42a <printf>
    80021728:	02900513          	li	a0,41
    8002172c:	1ed080ef          	jal	8002a118 <putchar>
    80021730:	4529                	li	a0,10
    80021732:	1e7080ef          	jal	8002a118 <putchar>
    80021736:	00037497          	auipc	s1,0x37
    8002173a:	8db4c483          	lbu	s1,-1829(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002173e:	0000d597          	auipc	a1,0xd
    80021742:	a7a58593          	addi	a1,a1,-1414 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021746:	cc91                	beqz	s1,80021762 <timecmp_test_19+0x130>
    80021748:	6418                	ld	a4,8(s0)
    8002174a:	4789                	li	a5,2
    TEST_END(); 
    8002174c:	0000d597          	auipc	a1,0xd
    80021750:	a5c58593          	addi	a1,a1,-1444 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021754:	00f70763          	beq	a4,a5,80021762 <timecmp_test_19+0x130>
    80021758:	4481                	li	s1,0
    TEST_END(); 
    8002175a:	0000d597          	auipc	a1,0xd
    8002175e:	a5e58593          	addi	a1,a1,-1442 # 8002e1b8 <__func__.0+0x2d0>
    80021762:	0000d517          	auipc	a0,0xd
    80021766:	afe50513          	addi	a0,a0,-1282 # 8002e260 <__func__.0+0x378>
    8002176a:	4c1090ef          	jal	8002b42a <printf>
    8002176e:	4511                	li	a0,4
    80021770:	f98df0ef          	jal	80000f08 <goto_priv>
    80021774:	8b0e00ef          	jal	80001824 <reset_state>
}
    80021778:	60e2                	ld	ra,24(sp)
    8002177a:	6442                	ld	s0,16(sp)
    8002177c:	8526                	mv	a0,s1
    8002177e:	64a2                	ld	s1,8(sp)
    80021780:	6105                	addi	sp,sp,32
    80021782:	8082                	ret

0000000080021784 <timecmp_test_20>:

bool timecmp_test_20() {
    80021784:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021786:	0000c597          	auipc	a1,0xc
    8002178a:	1aa58593          	addi	a1,a1,426 # 8002d930 <__func__.1>
    8002178e:	0000d517          	auipc	a0,0xd
    80021792:	a3a50513          	addi	a0,a0,-1478 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_20() {
    80021796:	ec06                	sd	ra,24(sp)
    80021798:	e822                	sd	s0,16(sp)
    8002179a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002179c:	48f090ef          	jal	8002b42a <printf>
    800217a0:	4529                	li	a0,10
    800217a2:	177080ef          	jal	8002a118 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800217a6:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800217aa:	57fd                	li	a5,-1
    800217ac:	17fe                	slli	a5,a5,0x3f
    800217ae:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800217b2:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800217b6:	30a025f3          	csrr	a1,0x30a
    800217ba:	00013517          	auipc	a0,0x13
    800217be:	02650513          	addi	a0,a0,38 # 800347e0 <__func__.0+0x68f8>
    800217c2:	469090ef          	jal	8002b42a <printf>
    800217c6:	60a025f3          	csrr	a1,henvcfg
    800217ca:	00013517          	auipc	a0,0x13
    800217ce:	01650513          	addi	a0,a0,22 # 800347e0 <__func__.0+0x68f8>
    800217d2:	459090ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    800217d6:	4509                	li	a0,2
    800217d8:	f30df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800217dc:	e30df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800217e0:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800217e4:	00037597          	auipc	a1,0x37
    800217e8:	82d5c583          	lbu	a1,-2003(a1) # 80058011 <excpt+0x1>
    800217ec:	00015517          	auipc	a0,0x15
    800217f0:	cec50513          	addi	a0,a0,-788 # 800364d8 <__func__.0+0x85f0>
    800217f4:	00037417          	auipc	s0,0x37
    800217f8:	81c40413          	addi	s0,s0,-2020 # 80058010 <excpt>
    800217fc:	42f090ef          	jal	8002b42a <printf>
    printf("cause=%d\n",excpt.cause);
    80021800:	640c                	ld	a1,8(s0)
    80021802:	00015517          	auipc	a0,0x15
    80021806:	ce650513          	addi	a0,a0,-794 # 800364e8 <__func__.0+0x8600>
    8002180a:	421090ef          	jal	8002b42a <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002180e:	08200593          	li	a1,130
    80021812:	00015617          	auipc	a2,0x15
    80021816:	e3660613          	addi	a2,a2,-458 # 80036648 <__func__.0+0x8760>
    8002181a:	0000d517          	auipc	a0,0xd
    8002181e:	9c650513          	addi	a0,a0,-1594 # 8002e1e0 <__func__.0+0x2f8>
    80021822:	409090ef          	jal	8002b42a <printf>
    80021826:	00036797          	auipc	a5,0x36
    8002182a:	7eb7c783          	lbu	a5,2027(a5) # 80058011 <excpt+0x1>
    8002182e:	0000d597          	auipc	a1,0xd
    80021832:	98a58593          	addi	a1,a1,-1654 # 8002e1b8 <__func__.0+0x2d0>
    80021836:	cf89                	beqz	a5,80021850 <timecmp_test_20+0xcc>
    80021838:	6418                	ld	a4,8(s0)
    8002183a:	4789                	li	a5,2
    8002183c:	0000d597          	auipc	a1,0xd
    80021840:	96c58593          	addi	a1,a1,-1684 # 8002e1a8 <__func__.0+0x2c0>
    80021844:	00f70663          	beq	a4,a5,80021850 <timecmp_test_20+0xcc>
    80021848:	0000d597          	auipc	a1,0xd
    8002184c:	97058593          	addi	a1,a1,-1680 # 8002e1b8 <__func__.0+0x2d0>
    80021850:	0000d517          	auipc	a0,0xd
    80021854:	9a850513          	addi	a0,a0,-1624 # 8002e1f8 <__func__.0+0x310>
    80021858:	3d3090ef          	jal	8002b42a <printf>
    8002185c:	00036797          	auipc	a5,0x36
    80021860:	7b57c783          	lbu	a5,1973(a5) # 80058011 <excpt+0x1>
    80021864:	c789                	beqz	a5,8002186e <timecmp_test_20+0xea>
    80021866:	6418                	ld	a4,8(s0)
    80021868:	4789                	li	a5,2
    8002186a:	00f70c63          	beq	a4,a5,80021882 <timecmp_test_20+0xfe>
    8002186e:	0000d517          	auipc	a0,0xd
    80021872:	99250513          	addi	a0,a0,-1646 # 8002e200 <__func__.0+0x318>
    80021876:	3b5090ef          	jal	8002b42a <printf>
    8002187a:	02900513          	li	a0,41
    8002187e:	09b080ef          	jal	8002a118 <putchar>
    80021882:	4529                	li	a0,10
    80021884:	095080ef          	jal	8002a118 <putchar>
    80021888:	00036497          	auipc	s1,0x36
    8002188c:	7894c483          	lbu	s1,1929(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021890:	0000d597          	auipc	a1,0xd
    80021894:	92858593          	addi	a1,a1,-1752 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021898:	cc91                	beqz	s1,800218b4 <timecmp_test_20+0x130>
    8002189a:	6418                	ld	a4,8(s0)
    8002189c:	4789                	li	a5,2
    TEST_END(); 
    8002189e:	0000d597          	auipc	a1,0xd
    800218a2:	90a58593          	addi	a1,a1,-1782 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800218a6:	00f70763          	beq	a4,a5,800218b4 <timecmp_test_20+0x130>
    800218aa:	4481                	li	s1,0
    TEST_END(); 
    800218ac:	0000d597          	auipc	a1,0xd
    800218b0:	90c58593          	addi	a1,a1,-1780 # 8002e1b8 <__func__.0+0x2d0>
    800218b4:	0000d517          	auipc	a0,0xd
    800218b8:	9ac50513          	addi	a0,a0,-1620 # 8002e260 <__func__.0+0x378>
    800218bc:	36f090ef          	jal	8002b42a <printf>
    800218c0:	4511                	li	a0,4
    800218c2:	e46df0ef          	jal	80000f08 <goto_priv>
    800218c6:	f5fdf0ef          	jal	80001824 <reset_state>
}
    800218ca:	60e2                	ld	ra,24(sp)
    800218cc:	6442                	ld	s0,16(sp)
    800218ce:	8526                	mv	a0,s1
    800218d0:	64a2                	ld	s1,8(sp)
    800218d2:	6105                	addi	sp,sp,32
    800218d4:	8082                	ret

00000000800218d6 <timecmp_test_21>:

bool timecmp_test_21() {
    800218d6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800218d8:	0000c597          	auipc	a1,0xc
    800218dc:	06858593          	addi	a1,a1,104 # 8002d940 <__func__.0>
    800218e0:	0000d517          	auipc	a0,0xd
    800218e4:	8e850513          	addi	a0,a0,-1816 # 8002e1c8 <__func__.0+0x2e0>
bool timecmp_test_21() {
    800218e8:	ec06                	sd	ra,24(sp)
    800218ea:	e822                	sd	s0,16(sp)
    800218ec:	e426                	sd	s1,8(sp)
    TEST_START();    
    800218ee:	33d090ef          	jal	8002b42a <printf>
    800218f2:	4529                	li	a0,10
    800218f4:	025080ef          	jal	8002a118 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800218f8:	57fd                	li	a5,-1
    800218fa:	17fe                	slli	a5,a5,0x3f
    800218fc:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021900:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    80021904:	4509                	li	a0,2
    80021906:	e02df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002190a:	d02df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002190e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021912:	08200593          	li	a1,130
    80021916:	00015617          	auipc	a2,0x15
    8002191a:	da260613          	addi	a2,a2,-606 # 800366b8 <__func__.0+0x87d0>
    8002191e:	0000d517          	auipc	a0,0xd
    80021922:	8c250513          	addi	a0,a0,-1854 # 8002e1e0 <__func__.0+0x2f8>
    80021926:	305090ef          	jal	8002b42a <printf>
    8002192a:	00036797          	auipc	a5,0x36
    8002192e:	6e77c783          	lbu	a5,1767(a5) # 80058011 <excpt+0x1>
    80021932:	00036497          	auipc	s1,0x36
    80021936:	6de48493          	addi	s1,s1,1758 # 80058010 <excpt>
    8002193a:	0000d597          	auipc	a1,0xd
    8002193e:	87e58593          	addi	a1,a1,-1922 # 8002e1b8 <__func__.0+0x2d0>
    80021942:	cf89                	beqz	a5,8002195c <timecmp_test_21+0x86>
    80021944:	6498                	ld	a4,8(s1)
    80021946:	4789                	li	a5,2
    80021948:	0000d597          	auipc	a1,0xd
    8002194c:	86058593          	addi	a1,a1,-1952 # 8002e1a8 <__func__.0+0x2c0>
    80021950:	00f70663          	beq	a4,a5,8002195c <timecmp_test_21+0x86>
    80021954:	0000d597          	auipc	a1,0xd
    80021958:	86458593          	addi	a1,a1,-1948 # 8002e1b8 <__func__.0+0x2d0>
    8002195c:	0000d517          	auipc	a0,0xd
    80021960:	89c50513          	addi	a0,a0,-1892 # 8002e1f8 <__func__.0+0x310>
    80021964:	2c7090ef          	jal	8002b42a <printf>
    80021968:	00036797          	auipc	a5,0x36
    8002196c:	6a97c783          	lbu	a5,1705(a5) # 80058011 <excpt+0x1>
    80021970:	c789                	beqz	a5,8002197a <timecmp_test_21+0xa4>
    80021972:	6498                	ld	a4,8(s1)
    80021974:	4789                	li	a5,2
    80021976:	00f70c63          	beq	a4,a5,8002198e <timecmp_test_21+0xb8>
    8002197a:	0000d517          	auipc	a0,0xd
    8002197e:	88650513          	addi	a0,a0,-1914 # 8002e200 <__func__.0+0x318>
    80021982:	2a9090ef          	jal	8002b42a <printf>
    80021986:	02900513          	li	a0,41
    8002198a:	78e080ef          	jal	8002a118 <putchar>
    8002198e:	4529                	li	a0,10
    80021990:	788080ef          	jal	8002a118 <putchar>
    80021994:	00036797          	auipc	a5,0x36
    80021998:	67d7c783          	lbu	a5,1661(a5) # 80058011 <excpt+0x1>
    8002199c:	4401                	li	s0,0
    8002199e:	c789                	beqz	a5,800219a8 <timecmp_test_21+0xd2>
    800219a0:	6480                	ld	s0,8(s1)
    800219a2:	1479                	addi	s0,s0,-2
    800219a4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    800219a8:	4501                	li	a0,0
    800219aa:	d5edf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800219ae:	c5edf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800219b2:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800219b6:	08200593          	li	a1,130
    800219ba:	00015617          	auipc	a2,0x15
    800219be:	d6660613          	addi	a2,a2,-666 # 80036720 <__func__.0+0x8838>
    800219c2:	0000d517          	auipc	a0,0xd
    800219c6:	81e50513          	addi	a0,a0,-2018 # 8002e1e0 <__func__.0+0x2f8>
    800219ca:	261090ef          	jal	8002b42a <printf>
    800219ce:	00036797          	auipc	a5,0x36
    800219d2:	6437c783          	lbu	a5,1603(a5) # 80058011 <excpt+0x1>
    800219d6:	0000c597          	auipc	a1,0xc
    800219da:	7e258593          	addi	a1,a1,2018 # 8002e1b8 <__func__.0+0x2d0>
    800219de:	cf89                	beqz	a5,800219f8 <timecmp_test_21+0x122>
    800219e0:	6498                	ld	a4,8(s1)
    800219e2:	4789                	li	a5,2
    800219e4:	0000c597          	auipc	a1,0xc
    800219e8:	7c458593          	addi	a1,a1,1988 # 8002e1a8 <__func__.0+0x2c0>
    800219ec:	00f70663          	beq	a4,a5,800219f8 <timecmp_test_21+0x122>
    800219f0:	0000c597          	auipc	a1,0xc
    800219f4:	7c858593          	addi	a1,a1,1992 # 8002e1b8 <__func__.0+0x2d0>
    800219f8:	0000d517          	auipc	a0,0xd
    800219fc:	80050513          	addi	a0,a0,-2048 # 8002e1f8 <__func__.0+0x310>
    80021a00:	22b090ef          	jal	8002b42a <printf>
    80021a04:	00036797          	auipc	a5,0x36
    80021a08:	60d7c783          	lbu	a5,1549(a5) # 80058011 <excpt+0x1>
    80021a0c:	c789                	beqz	a5,80021a16 <timecmp_test_21+0x140>
    80021a0e:	6498                	ld	a4,8(s1)
    80021a10:	4789                	li	a5,2
    80021a12:	00f70c63          	beq	a4,a5,80021a2a <timecmp_test_21+0x154>
    80021a16:	0000c517          	auipc	a0,0xc
    80021a1a:	7ea50513          	addi	a0,a0,2026 # 8002e200 <__func__.0+0x318>
    80021a1e:	20d090ef          	jal	8002b42a <printf>
    80021a22:	02900513          	li	a0,41
    80021a26:	6f2080ef          	jal	8002a118 <putchar>
    80021a2a:	4529                	li	a0,10
    80021a2c:	6ec080ef          	jal	8002a118 <putchar>
    80021a30:	c015                	beqz	s0,80021a54 <timecmp_test_21+0x17e>
    80021a32:	00036417          	auipc	s0,0x36
    80021a36:	5df44403          	lbu	s0,1503(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021a3a:	0000c597          	auipc	a1,0xc
    80021a3e:	77e58593          	addi	a1,a1,1918 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a42:	cc11                	beqz	s0,80021a5e <timecmp_test_21+0x188>
    80021a44:	6498                	ld	a4,8(s1)
    80021a46:	4789                	li	a5,2
    TEST_END(); 
    80021a48:	0000c597          	auipc	a1,0xc
    80021a4c:	76058593          	addi	a1,a1,1888 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a50:	00f70763          	beq	a4,a5,80021a5e <timecmp_test_21+0x188>
    80021a54:	4401                	li	s0,0
    TEST_END(); 
    80021a56:	0000c597          	auipc	a1,0xc
    80021a5a:	76258593          	addi	a1,a1,1890 # 8002e1b8 <__func__.0+0x2d0>
    80021a5e:	0000d517          	auipc	a0,0xd
    80021a62:	80250513          	addi	a0,a0,-2046 # 8002e260 <__func__.0+0x378>
    80021a66:	1c5090ef          	jal	8002b42a <printf>
    80021a6a:	4511                	li	a0,4
    80021a6c:	c9cdf0ef          	jal	80000f08 <goto_priv>
    80021a70:	db5df0ef          	jal	80001824 <reset_state>
    80021a74:	60e2                	ld	ra,24(sp)
    80021a76:	8522                	mv	a0,s0
    80021a78:	6442                	ld	s0,16(sp)
    80021a7a:	64a2                	ld	s1,8(sp)
    80021a7c:	6105                	addi	sp,sp,32
    80021a7e:	8082                	ret

0000000080021a80 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80021a80:	7179                	addi	sp,sp,-48

    TEST_START();
    80021a82:	0000c597          	auipc	a1,0xc
    80021a86:	ece58593          	addi	a1,a1,-306 # 8002d950 <__func__.2>
    80021a8a:	0000c517          	auipc	a0,0xc
    80021a8e:	73e50513          	addi	a0,a0,1854 # 8002e1c8 <__func__.0+0x2e0>
bool mix_instruction_1(){
    80021a92:	f406                	sd	ra,40(sp)
    80021a94:	f022                	sd	s0,32(sp)
    80021a96:	ec26                	sd	s1,24(sp)
    80021a98:	e84a                	sd	s2,16(sp)
    80021a9a:	e44e                	sd	s3,8(sp)
    TEST_START();
    80021a9c:	18f090ef          	jal	8002b42a <printf>
    80021aa0:	4529                	li	a0,10
    80021aa2:	676080ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80021aa6:	4511                	li	a0,4
    80021aa8:	c60df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021aac:	57fd                	li	a5,-1
    80021aae:	17fe                	slli	a5,a5,0x3f
    80021ab0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021ab4:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021ab8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80021abc:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80021ac0:	4509                	li	a0,2
    80021ac2:	c46df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021ac6:	b46df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80021aca:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80021ace:	08200593          	li	a1,130
    80021ad2:	00015617          	auipc	a2,0x15
    80021ad6:	cb660613          	addi	a2,a2,-842 # 80036788 <__func__.0+0x88a0>
    80021ada:	0000c517          	auipc	a0,0xc
    80021ade:	70650513          	addi	a0,a0,1798 # 8002e1e0 <__func__.0+0x2f8>
    80021ae2:	149090ef          	jal	8002b42a <printf>
    80021ae6:	00036797          	auipc	a5,0x36
    80021aea:	52b7c783          	lbu	a5,1323(a5) # 80058011 <excpt+0x1>
    80021aee:	00036497          	auipc	s1,0x36
    80021af2:	52248493          	addi	s1,s1,1314 # 80058010 <excpt>
    80021af6:	0000c597          	auipc	a1,0xc
    80021afa:	6c258593          	addi	a1,a1,1730 # 8002e1b8 <__func__.0+0x2d0>
    80021afe:	cf89                	beqz	a5,80021b18 <mix_instruction_1+0x98>
    80021b00:	6498                	ld	a4,8(s1)
    80021b02:	47d9                	li	a5,22
    80021b04:	0000c597          	auipc	a1,0xc
    80021b08:	6a458593          	addi	a1,a1,1700 # 8002e1a8 <__func__.0+0x2c0>
    80021b0c:	00f70663          	beq	a4,a5,80021b18 <mix_instruction_1+0x98>
    80021b10:	0000c597          	auipc	a1,0xc
    80021b14:	6a858593          	addi	a1,a1,1704 # 8002e1b8 <__func__.0+0x2d0>
    80021b18:	0000c517          	auipc	a0,0xc
    80021b1c:	6e050513          	addi	a0,a0,1760 # 8002e1f8 <__func__.0+0x310>
    80021b20:	10b090ef          	jal	8002b42a <printf>
    80021b24:	00036797          	auipc	a5,0x36
    80021b28:	4ed7c783          	lbu	a5,1261(a5) # 80058011 <excpt+0x1>
    80021b2c:	c789                	beqz	a5,80021b36 <mix_instruction_1+0xb6>
    80021b2e:	6498                	ld	a4,8(s1)
    80021b30:	47d9                	li	a5,22
    80021b32:	00f70c63          	beq	a4,a5,80021b4a <mix_instruction_1+0xca>
    80021b36:	0000c517          	auipc	a0,0xc
    80021b3a:	6ca50513          	addi	a0,a0,1738 # 8002e200 <__func__.0+0x318>
    80021b3e:	0ed090ef          	jal	8002b42a <printf>
    80021b42:	02900513          	li	a0,41
    80021b46:	5d2080ef          	jal	8002a118 <putchar>
    80021b4a:	4529                	li	a0,10
    80021b4c:	5cc080ef          	jal	8002a118 <putchar>
    80021b50:	00036797          	auipc	a5,0x36
    80021b54:	4c17c783          	lbu	a5,1217(a5) # 80058011 <excpt+0x1>
    80021b58:	4401                	li	s0,0
    80021b5a:	c789                	beqz	a5,80021b64 <mix_instruction_1+0xe4>
    80021b5c:	6480                	ld	s0,8(s1)
    80021b5e:	1429                	addi	s0,s0,-22
    80021b60:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021b64:	4511                	li	a0,4
    80021b66:	ba2df0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021b6a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021b6e:	450d                	li	a0,3
    80021b70:	b98df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021b74:	a98df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    80021b78:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80021b7c:	08200593          	li	a1,130
    80021b80:	00014617          	auipc	a2,0x14
    80021b84:	82060613          	addi	a2,a2,-2016 # 800353a0 <__func__.0+0x74b8>
    80021b88:	0000c517          	auipc	a0,0xc
    80021b8c:	65850513          	addi	a0,a0,1624 # 8002e1e0 <__func__.0+0x2f8>
    80021b90:	09b090ef          	jal	8002b42a <printf>
    80021b94:	00036797          	auipc	a5,0x36
    80021b98:	47d7c783          	lbu	a5,1149(a5) # 80058011 <excpt+0x1>
    80021b9c:	0000c597          	auipc	a1,0xc
    80021ba0:	61c58593          	addi	a1,a1,1564 # 8002e1b8 <__func__.0+0x2d0>
    80021ba4:	cf89                	beqz	a5,80021bbe <mix_instruction_1+0x13e>
    80021ba6:	6498                	ld	a4,8(s1)
    80021ba8:	4789                	li	a5,2
    80021baa:	0000c597          	auipc	a1,0xc
    80021bae:	5fe58593          	addi	a1,a1,1534 # 8002e1a8 <__func__.0+0x2c0>
    80021bb2:	00f70663          	beq	a4,a5,80021bbe <mix_instruction_1+0x13e>
    80021bb6:	0000c597          	auipc	a1,0xc
    80021bba:	60258593          	addi	a1,a1,1538 # 8002e1b8 <__func__.0+0x2d0>
    80021bbe:	0000c517          	auipc	a0,0xc
    80021bc2:	63a50513          	addi	a0,a0,1594 # 8002e1f8 <__func__.0+0x310>
    80021bc6:	065090ef          	jal	8002b42a <printf>
    80021bca:	00036797          	auipc	a5,0x36
    80021bce:	4477c783          	lbu	a5,1095(a5) # 80058011 <excpt+0x1>
    80021bd2:	c789                	beqz	a5,80021bdc <mix_instruction_1+0x15c>
    80021bd4:	6498                	ld	a4,8(s1)
    80021bd6:	4789                	li	a5,2
    80021bd8:	00f70c63          	beq	a4,a5,80021bf0 <mix_instruction_1+0x170>
    80021bdc:	0000c517          	auipc	a0,0xc
    80021be0:	62450513          	addi	a0,a0,1572 # 8002e200 <__func__.0+0x318>
    80021be4:	047090ef          	jal	8002b42a <printf>
    80021be8:	02900513          	li	a0,41
    80021bec:	52c080ef          	jal	8002a118 <putchar>
    80021bf0:	4529                	li	a0,10
    80021bf2:	526080ef          	jal	8002a118 <putchar>
    80021bf6:	c801                	beqz	s0,80021c06 <mix_instruction_1+0x186>
    80021bf8:	00036797          	auipc	a5,0x36
    80021bfc:	4197c783          	lbu	a5,1049(a5) # 80058011 <excpt+0x1>
    80021c00:	4401                	li	s0,0
    80021c02:	040794e3          	bnez	a5,8002244a <mix_instruction_1+0x9ca>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021c06:	4511                	li	a0,4
    80021c08:	b00df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80021c0c:	004007b7          	lui	a5,0x400
    80021c10:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80021c14:	002007b7          	lui	a5,0x200
    80021c18:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80021c1c:	4501                	li	a0,0
    80021c1e:	aeadf0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80021c22:	9eadf0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80021c26:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80021c2a:	08200593          	li	a1,130
    80021c2e:	0000d617          	auipc	a2,0xd
    80021c32:	6da60613          	addi	a2,a2,1754 # 8002f308 <__func__.0+0x1420>
    80021c36:	0000c517          	auipc	a0,0xc
    80021c3a:	5aa50513          	addi	a0,a0,1450 # 8002e1e0 <__func__.0+0x2f8>
    80021c3e:	7ec090ef          	jal	8002b42a <printf>
    80021c42:	00036797          	auipc	a5,0x36
    80021c46:	3cf7c783          	lbu	a5,975(a5) # 80058011 <excpt+0x1>
    80021c4a:	0000c597          	auipc	a1,0xc
    80021c4e:	56e58593          	addi	a1,a1,1390 # 8002e1b8 <__func__.0+0x2d0>
    80021c52:	cf89                	beqz	a5,80021c6c <mix_instruction_1+0x1ec>
    80021c54:	6498                	ld	a4,8(s1)
    80021c56:	47d9                	li	a5,22
    80021c58:	0000c597          	auipc	a1,0xc
    80021c5c:	55058593          	addi	a1,a1,1360 # 8002e1a8 <__func__.0+0x2c0>
    80021c60:	00f70663          	beq	a4,a5,80021c6c <mix_instruction_1+0x1ec>
    80021c64:	0000c597          	auipc	a1,0xc
    80021c68:	55458593          	addi	a1,a1,1364 # 8002e1b8 <__func__.0+0x2d0>
    80021c6c:	0000c517          	auipc	a0,0xc
    80021c70:	58c50513          	addi	a0,a0,1420 # 8002e1f8 <__func__.0+0x310>
    80021c74:	7b6090ef          	jal	8002b42a <printf>
    80021c78:	00036797          	auipc	a5,0x36
    80021c7c:	3997c783          	lbu	a5,921(a5) # 80058011 <excpt+0x1>
    80021c80:	c789                	beqz	a5,80021c8a <mix_instruction_1+0x20a>
    80021c82:	6498                	ld	a4,8(s1)
    80021c84:	47d9                	li	a5,22
    80021c86:	00f70c63          	beq	a4,a5,80021c9e <mix_instruction_1+0x21e>
    80021c8a:	0000c517          	auipc	a0,0xc
    80021c8e:	57650513          	addi	a0,a0,1398 # 8002e200 <__func__.0+0x318>
    80021c92:	798090ef          	jal	8002b42a <printf>
    80021c96:	02900513          	li	a0,41
    80021c9a:	47e080ef          	jal	8002a118 <putchar>
    80021c9e:	4529                	li	a0,10
    80021ca0:	478080ef          	jal	8002a118 <putchar>
    80021ca4:	c801                	beqz	s0,80021cb4 <mix_instruction_1+0x234>
    80021ca6:	00036797          	auipc	a5,0x36
    80021caa:	36b7c783          	lbu	a5,875(a5) # 80058011 <excpt+0x1>
    80021cae:	4401                	li	s0,0
    80021cb0:	78079763          	bnez	a5,8002243e <mix_instruction_1+0x9be>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021cb4:	4511                	li	a0,4
    80021cb6:	a52df0ef          	jal	80000f08 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80021cba:	927de0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80021cbe:	d07de0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80021cc2:	abbde0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80021cc6:	450d                	li	a0,3
    80021cc8:	a40df0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    80021ccc:	4501                	li	a0,0
    80021cce:	95adf0ef          	jal	80000e28 <set_prev_priv>
    *((volatile uint64_t*) addr) = val;
    80021cd2:	00018917          	auipc	s2,0x18
    80021cd6:	b1e90913          	addi	s2,s2,-1250 # 800397f0 <__func__.0+0xb908>
    TEST_SETUP_EXCEPT();
    80021cda:	932df0ef          	jal	80000e0c <test_setup_except_function>
    80021cde:	00093683          	ld	a3,0(s2)
    80021ce2:	44019737          	lui	a4,0x44019
    asm volatile(
    80021ce6:	000807b7          	lui	a5,0x80
    80021cea:	0706                	slli	a4,a4,0x1
    80021cec:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021cee:	e314                	sd	a3,0(a4)
    80021cf0:	07b6                	slli	a5,a5,0xd
    80021cf2:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80021cf6:	08200593          	li	a1,130
    80021cfa:	0000d617          	auipc	a2,0xd
    80021cfe:	e9e60613          	addi	a2,a2,-354 # 8002eb98 <__func__.0+0xcb0>
    80021d02:	0000c517          	auipc	a0,0xc
    80021d06:	4de50513          	addi	a0,a0,1246 # 8002e1e0 <__func__.0+0x2f8>
    80021d0a:	720090ef          	jal	8002b42a <printf>
    80021d0e:	00036797          	auipc	a5,0x36
    80021d12:	3037c783          	lbu	a5,771(a5) # 80058011 <excpt+0x1>
    80021d16:	0000c597          	auipc	a1,0xc
    80021d1a:	4a258593          	addi	a1,a1,1186 # 8002e1b8 <__func__.0+0x2d0>
    80021d1e:	e789                	bnez	a5,80021d28 <mix_instruction_1+0x2a8>
    80021d20:	0000c597          	auipc	a1,0xc
    80021d24:	48858593          	addi	a1,a1,1160 # 8002e1a8 <__func__.0+0x2c0>
    80021d28:	0000c517          	auipc	a0,0xc
    80021d2c:	4d050513          	addi	a0,a0,1232 # 8002e1f8 <__func__.0+0x310>
    80021d30:	6fa090ef          	jal	8002b42a <printf>
    80021d34:	00036797          	auipc	a5,0x36
    80021d38:	2dd7c783          	lbu	a5,733(a5) # 80058011 <excpt+0x1>
    80021d3c:	76079563          	bnez	a5,800224a6 <mix_instruction_1+0xa26>
    80021d40:	4529                	li	a0,10
    80021d42:	3d6080ef          	jal	8002a118 <putchar>
    80021d46:	c419                	beqz	s0,80021d54 <mix_instruction_1+0x2d4>
    80021d48:	00036417          	auipc	s0,0x36
    80021d4c:	2c944403          	lbu	s0,713(s0) # 80058011 <excpt+0x1>
    80021d50:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80021d54:	4509                	li	a0,2
    80021d56:	8d2df0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80021d5a:	8b2df0ef          	jal	80000e0c <test_setup_except_function>
    80021d5e:	00093683          	ld	a3,0(s2)
    80021d62:	44019737          	lui	a4,0x44019
    80021d66:	000807b7          	lui	a5,0x80
    80021d6a:	0706                	slli	a4,a4,0x1
    80021d6c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021d6e:	e314                	sd	a3,0(a4)
    80021d70:	07b6                	slli	a5,a5,0xd
    80021d72:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80021d76:	08200593          	li	a1,130
    80021d7a:	0000d617          	auipc	a2,0xd
    80021d7e:	e4e60613          	addi	a2,a2,-434 # 8002ebc8 <__func__.0+0xce0>
    80021d82:	0000c517          	auipc	a0,0xc
    80021d86:	45e50513          	addi	a0,a0,1118 # 8002e1e0 <__func__.0+0x2f8>
    80021d8a:	6a0090ef          	jal	8002b42a <printf>
    80021d8e:	00036797          	auipc	a5,0x36
    80021d92:	2837c783          	lbu	a5,643(a5) # 80058011 <excpt+0x1>
    80021d96:	0000c597          	auipc	a1,0xc
    80021d9a:	42258593          	addi	a1,a1,1058 # 8002e1b8 <__func__.0+0x2d0>
    80021d9e:	cf89                	beqz	a5,80021db8 <mix_instruction_1+0x338>
    80021da0:	6498                	ld	a4,8(s1)
    80021da2:	47b5                	li	a5,13
    80021da4:	0000c597          	auipc	a1,0xc
    80021da8:	40458593          	addi	a1,a1,1028 # 8002e1a8 <__func__.0+0x2c0>
    80021dac:	00f70663          	beq	a4,a5,80021db8 <mix_instruction_1+0x338>
    80021db0:	0000c597          	auipc	a1,0xc
    80021db4:	40858593          	addi	a1,a1,1032 # 8002e1b8 <__func__.0+0x2d0>
    80021db8:	0000c517          	auipc	a0,0xc
    80021dbc:	44050513          	addi	a0,a0,1088 # 8002e1f8 <__func__.0+0x310>
    80021dc0:	66a090ef          	jal	8002b42a <printf>
    80021dc4:	00036797          	auipc	a5,0x36
    80021dc8:	24d7c783          	lbu	a5,589(a5) # 80058011 <excpt+0x1>
    80021dcc:	c789                	beqz	a5,80021dd6 <mix_instruction_1+0x356>
    80021dce:	6498                	ld	a4,8(s1)
    80021dd0:	47b5                	li	a5,13
    80021dd2:	00f70c63          	beq	a4,a5,80021dea <mix_instruction_1+0x36a>
    80021dd6:	0000c517          	auipc	a0,0xc
    80021dda:	42a50513          	addi	a0,a0,1066 # 8002e200 <__func__.0+0x318>
    80021dde:	64c090ef          	jal	8002b42a <printf>
    80021de2:	02900513          	li	a0,41
    80021de6:	332080ef          	jal	8002a118 <putchar>
    80021dea:	4529                	li	a0,10
    80021dec:	32c080ef          	jal	8002a118 <putchar>
    80021df0:	c801                	beqz	s0,80021e00 <mix_instruction_1+0x380>
    80021df2:	00036797          	auipc	a5,0x36
    80021df6:	21f7c783          	lbu	a5,543(a5) # 80058011 <excpt+0x1>
    80021dfa:	4401                	li	s0,0
    80021dfc:	66079263          	bnez	a5,80022460 <mix_instruction_1+0x9e0>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80021e00:	4511                	li	a0,4
    80021e02:	906df0ef          	jal	80000f08 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80021e06:	000407b7          	lui	a5,0x40
    80021e0a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80021e0e:	450d                	li	a0,3
    80021e10:	8f8df0ef          	jal	80000f08 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80021e14:	ff9de0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80021e18:	37ab77b7          	lui	a5,0x37ab7
    80021e1c:	00080737          	lui	a4,0x80
    80021e20:	078a                	slli	a5,a5,0x2
    80021e22:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80021e24:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80021e28:	0736                	slli	a4,a4,0xd
    80021e2a:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80021e2e:	08200593          	li	a1,130
    80021e32:	00012617          	auipc	a2,0x12
    80021e36:	97660613          	addi	a2,a2,-1674 # 800337a8 <__func__.0+0x58c0>
    80021e3a:	0000c517          	auipc	a0,0xc
    80021e3e:	3a650513          	addi	a0,a0,934 # 8002e1e0 <__func__.0+0x2f8>
    80021e42:	5e8090ef          	jal	8002b42a <printf>
    80021e46:	00036797          	auipc	a5,0x36
    80021e4a:	1cb7c783          	lbu	a5,459(a5) # 80058011 <excpt+0x1>
    80021e4e:	0000c597          	auipc	a1,0xc
    80021e52:	36a58593          	addi	a1,a1,874 # 8002e1b8 <__func__.0+0x2d0>
    80021e56:	cf89                	beqz	a5,80021e70 <mix_instruction_1+0x3f0>
    80021e58:	6498                	ld	a4,8(s1)
    80021e5a:	47bd                	li	a5,15
    80021e5c:	0000c597          	auipc	a1,0xc
    80021e60:	34c58593          	addi	a1,a1,844 # 8002e1a8 <__func__.0+0x2c0>
    80021e64:	00f70663          	beq	a4,a5,80021e70 <mix_instruction_1+0x3f0>
    80021e68:	0000c597          	auipc	a1,0xc
    80021e6c:	35058593          	addi	a1,a1,848 # 8002e1b8 <__func__.0+0x2d0>
    80021e70:	0000c517          	auipc	a0,0xc
    80021e74:	38850513          	addi	a0,a0,904 # 8002e1f8 <__func__.0+0x310>
    80021e78:	5b2090ef          	jal	8002b42a <printf>
    80021e7c:	00036797          	auipc	a5,0x36
    80021e80:	1957c783          	lbu	a5,405(a5) # 80058011 <excpt+0x1>
    80021e84:	c789                	beqz	a5,80021e8e <mix_instruction_1+0x40e>
    80021e86:	6498                	ld	a4,8(s1)
    80021e88:	47bd                	li	a5,15
    80021e8a:	00f70c63          	beq	a4,a5,80021ea2 <mix_instruction_1+0x422>
    80021e8e:	0000c517          	auipc	a0,0xc
    80021e92:	37250513          	addi	a0,a0,882 # 8002e200 <__func__.0+0x318>
    80021e96:	594090ef          	jal	8002b42a <printf>
    80021e9a:	02900513          	li	a0,41
    80021e9e:	27a080ef          	jal	8002a118 <putchar>
    80021ea2:	4529                	li	a0,10
    80021ea4:	274080ef          	jal	8002a118 <putchar>
    80021ea8:	c801                	beqz	s0,80021eb8 <mix_instruction_1+0x438>
    80021eaa:	00036797          	auipc	a5,0x36
    80021eae:	1677c783          	lbu	a5,359(a5) # 80058011 <excpt+0x1>
    80021eb2:	4401                	li	s0,0
    80021eb4:	5a079b63          	bnez	a5,8002246a <mix_instruction_1+0x9ea>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021eb8:	4511                	li	a0,4
    80021eba:	84edf0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80021ebe:	57fd                	li	a5,-1
    80021ec0:	03f79713          	slli	a4,a5,0x3f
    80021ec4:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80021ec8:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80021ecc:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80021ed0:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80021ed4:	64402973          	csrr	s2,hip
    80021ed8:	0000c617          	auipc	a2,0xc
    80021edc:	7c860613          	addi	a2,a2,1992 # 8002e6a0 <__func__.0+0x7b8>
    80021ee0:	08200593          	li	a1,130
    80021ee4:	0000c517          	auipc	a0,0xc
    80021ee8:	2fc50513          	addi	a0,a0,764 # 8002e1e0 <__func__.0+0x2f8>
    80021eec:	4991                	li	s3,4
    80021eee:	53c090ef          	jal	8002b42a <printf>
    80021ef2:	59390163          	beq	s2,s3,80022474 <mix_instruction_1+0x9f4>
    80021ef6:	0000c597          	auipc	a1,0xc
    80021efa:	2c258593          	addi	a1,a1,706 # 8002e1b8 <__func__.0+0x2d0>
    80021efe:	0000c517          	auipc	a0,0xc
    80021f02:	2fa50513          	addi	a0,a0,762 # 8002e1f8 <__func__.0+0x310>
    80021f06:	524090ef          	jal	8002b42a <printf>
    80021f0a:	0000c517          	auipc	a0,0xc
    80021f0e:	2f650513          	addi	a0,a0,758 # 8002e200 <__func__.0+0x318>
    80021f12:	518090ef          	jal	8002b42a <printf>
    80021f16:	86ce                	mv	a3,s3
    80021f18:	864a                	mv	a2,s2
    80021f1a:	02d00593          	li	a1,45
    80021f1e:	0000c517          	auipc	a0,0xc
    80021f22:	78a50513          	addi	a0,a0,1930 # 8002e6a8 <__func__.0+0x7c0>
    80021f26:	504090ef          	jal	8002b42a <printf>
    80021f2a:	02900513          	li	a0,41
    80021f2e:	1ea080ef          	jal	8002a118 <putchar>
    80021f32:	4529                	li	a0,10
    80021f34:	1e4080ef          	jal	8002a118 <putchar>
    80021f38:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80021f3a:	14402973          	csrr	s2,sip
    80021f3e:	0000c617          	auipc	a2,0xc
    80021f42:	78260613          	addi	a2,a2,1922 # 8002e6c0 <__func__.0+0x7d8>
    80021f46:	08200593          	li	a1,130
    80021f4a:	0000c517          	auipc	a0,0xc
    80021f4e:	29650513          	addi	a0,a0,662 # 8002e1e0 <__func__.0+0x2f8>
    80021f52:	22200993          	li	s3,546
    80021f56:	4d4090ef          	jal	8002b42a <printf>
    80021f5a:	4b390e63          	beq	s2,s3,80022416 <mix_instruction_1+0x996>
    80021f5e:	0000c597          	auipc	a1,0xc
    80021f62:	25a58593          	addi	a1,a1,602 # 8002e1b8 <__func__.0+0x2d0>
    80021f66:	0000c517          	auipc	a0,0xc
    80021f6a:	29250513          	addi	a0,a0,658 # 8002e1f8 <__func__.0+0x310>
    80021f6e:	4bc090ef          	jal	8002b42a <printf>
    80021f72:	0000c517          	auipc	a0,0xc
    80021f76:	28e50513          	addi	a0,a0,654 # 8002e200 <__func__.0+0x318>
    80021f7a:	4b0090ef          	jal	8002b42a <printf>
    80021f7e:	86ce                	mv	a3,s3
    80021f80:	864a                	mv	a2,s2
    80021f82:	02d00593          	li	a1,45
    80021f86:	0000c517          	auipc	a0,0xc
    80021f8a:	72250513          	addi	a0,a0,1826 # 8002e6a8 <__func__.0+0x7c0>
    80021f8e:	49c090ef          	jal	8002b42a <printf>
    80021f92:	02900513          	li	a0,41
    80021f96:	182080ef          	jal	8002a118 <putchar>
    80021f9a:	4529                	li	a0,10
    80021f9c:	17c080ef          	jal	8002a118 <putchar>
    80021fa0:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80021fa2:	24402973          	csrr	s2,vsip
    80021fa6:	0000c617          	auipc	a2,0xc
    80021faa:	6ea60613          	addi	a2,a2,1770 # 8002e690 <__func__.0+0x7a8>
    80021fae:	08200593          	li	a1,130
    80021fb2:	0000c517          	auipc	a0,0xc
    80021fb6:	22e50513          	addi	a0,a0,558 # 8002e1e0 <__func__.0+0x2f8>
    80021fba:	4989                	li	s3,2
    80021fbc:	46e090ef          	jal	8002b42a <printf>
    80021fc0:	43390d63          	beq	s2,s3,800223fa <mix_instruction_1+0x97a>
    80021fc4:	0000c597          	auipc	a1,0xc
    80021fc8:	1f458593          	addi	a1,a1,500 # 8002e1b8 <__func__.0+0x2d0>
    80021fcc:	0000c517          	auipc	a0,0xc
    80021fd0:	22c50513          	addi	a0,a0,556 # 8002e1f8 <__func__.0+0x310>
    80021fd4:	456090ef          	jal	8002b42a <printf>
    80021fd8:	0000c517          	auipc	a0,0xc
    80021fdc:	22850513          	addi	a0,a0,552 # 8002e200 <__func__.0+0x318>
    80021fe0:	44a090ef          	jal	8002b42a <printf>
    80021fe4:	86ce                	mv	a3,s3
    80021fe6:	864a                	mv	a2,s2
    80021fe8:	02d00593          	li	a1,45
    80021fec:	0000c517          	auipc	a0,0xc
    80021ff0:	6bc50513          	addi	a0,a0,1724 # 8002e6a8 <__func__.0+0x7c0>
    80021ff4:	436090ef          	jal	8002b42a <printf>
    80021ff8:	02900513          	li	a0,41
    80021ffc:	11c080ef          	jal	8002a118 <putchar>
    80022000:	4529                	li	a0,10
    80022002:	116080ef          	jal	8002a118 <putchar>
    80022006:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80022008:	4509                	li	a0,2
    8002200a:	effde0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8002200e:	14402973          	csrr	s2,sip
    80022012:	0000c617          	auipc	a2,0xc
    80022016:	6b660613          	addi	a2,a2,1718 # 8002e6c8 <__func__.0+0x7e0>
    8002201a:	08200593          	li	a1,130
    8002201e:	0000c517          	auipc	a0,0xc
    80022022:	1c250513          	addi	a0,a0,450 # 8002e1e0 <__func__.0+0x2f8>
    80022026:	4989                	li	s3,2
    80022028:	402090ef          	jal	8002b42a <printf>
    8002202c:	3b390963          	beq	s2,s3,800223de <mix_instruction_1+0x95e>
    80022030:	0000c597          	auipc	a1,0xc
    80022034:	18858593          	addi	a1,a1,392 # 8002e1b8 <__func__.0+0x2d0>
    80022038:	0000c517          	auipc	a0,0xc
    8002203c:	1c050513          	addi	a0,a0,448 # 8002e1f8 <__func__.0+0x310>
    80022040:	3ea090ef          	jal	8002b42a <printf>
    80022044:	0000c517          	auipc	a0,0xc
    80022048:	1bc50513          	addi	a0,a0,444 # 8002e200 <__func__.0+0x318>
    8002204c:	3de090ef          	jal	8002b42a <printf>
    80022050:	86ce                	mv	a3,s3
    80022052:	864a                	mv	a2,s2
    80022054:	02d00593          	li	a1,45
    80022058:	0000c517          	auipc	a0,0xc
    8002205c:	65050513          	addi	a0,a0,1616 # 8002e6a8 <__func__.0+0x7c0>
    80022060:	3ca090ef          	jal	8002b42a <printf>
    80022064:	02900513          	li	a0,41
    80022068:	0b0080ef          	jal	8002a118 <putchar>
    8002206c:	4529                	li	a0,10
    8002206e:	0aa080ef          	jal	8002a118 <putchar>
    80022072:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80022074:	4511                	li	a0,4
    80022076:	e93de0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    8002207a:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    8002207e:	64402973          	csrr	s2,hip
    80022082:	0000c617          	auipc	a2,0xc
    80022086:	61e60613          	addi	a2,a2,1566 # 8002e6a0 <__func__.0+0x7b8>
    8002208a:	08200593          	li	a1,130
    8002208e:	0000c517          	auipc	a0,0xc
    80022092:	15250513          	addi	a0,a0,338 # 8002e1e0 <__func__.0+0x2f8>
    80022096:	394090ef          	jal	8002b42a <printf>
    8002209a:	32090463          	beqz	s2,800223c2 <mix_instruction_1+0x942>
    8002209e:	0000c597          	auipc	a1,0xc
    800220a2:	11a58593          	addi	a1,a1,282 # 8002e1b8 <__func__.0+0x2d0>
    800220a6:	0000c517          	auipc	a0,0xc
    800220aa:	15250513          	addi	a0,a0,338 # 8002e1f8 <__func__.0+0x310>
    800220ae:	37c090ef          	jal	8002b42a <printf>
    800220b2:	0000c517          	auipc	a0,0xc
    800220b6:	14e50513          	addi	a0,a0,334 # 8002e200 <__func__.0+0x318>
    800220ba:	370090ef          	jal	8002b42a <printf>
    800220be:	864a                	mv	a2,s2
    800220c0:	4681                	li	a3,0
    800220c2:	02d00593          	li	a1,45
    800220c6:	0000c517          	auipc	a0,0xc
    800220ca:	5e250513          	addi	a0,a0,1506 # 8002e6a8 <__func__.0+0x7c0>
    800220ce:	35c090ef          	jal	8002b42a <printf>
    800220d2:	02900513          	li	a0,41
    800220d6:	042080ef          	jal	8002a118 <putchar>
    800220da:	4529                	li	a0,10
    800220dc:	03c080ef          	jal	8002a118 <putchar>
    800220e0:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800220e2:	14402973          	csrr	s2,sip
    800220e6:	0000c617          	auipc	a2,0xc
    800220ea:	5da60613          	addi	a2,a2,1498 # 8002e6c0 <__func__.0+0x7d8>
    800220ee:	08200593          	li	a1,130
    800220f2:	0000c517          	auipc	a0,0xc
    800220f6:	0ee50513          	addi	a0,a0,238 # 8002e1e0 <__func__.0+0x2f8>
    800220fa:	330090ef          	jal	8002b42a <printf>
    800220fe:	2a090463          	beqz	s2,800223a6 <mix_instruction_1+0x926>
    80022102:	0000c597          	auipc	a1,0xc
    80022106:	0b658593          	addi	a1,a1,182 # 8002e1b8 <__func__.0+0x2d0>
    8002210a:	0000c517          	auipc	a0,0xc
    8002210e:	0ee50513          	addi	a0,a0,238 # 8002e1f8 <__func__.0+0x310>
    80022112:	318090ef          	jal	8002b42a <printf>
    80022116:	0000c517          	auipc	a0,0xc
    8002211a:	0ea50513          	addi	a0,a0,234 # 8002e200 <__func__.0+0x318>
    8002211e:	30c090ef          	jal	8002b42a <printf>
    80022122:	864a                	mv	a2,s2
    80022124:	4681                	li	a3,0
    80022126:	02d00593          	li	a1,45
    8002212a:	0000c517          	auipc	a0,0xc
    8002212e:	57e50513          	addi	a0,a0,1406 # 8002e6a8 <__func__.0+0x7c0>
    80022132:	2f8090ef          	jal	8002b42a <printf>
    80022136:	02900513          	li	a0,41
    8002213a:	7df070ef          	jal	8002a118 <putchar>
    8002213e:	4529                	li	a0,10
    80022140:	7d9070ef          	jal	8002a118 <putchar>
    80022144:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80022146:	24402973          	csrr	s2,vsip
    8002214a:	0000c617          	auipc	a2,0xc
    8002214e:	54660613          	addi	a2,a2,1350 # 8002e690 <__func__.0+0x7a8>
    80022152:	08200593          	li	a1,130
    80022156:	0000c517          	auipc	a0,0xc
    8002215a:	08a50513          	addi	a0,a0,138 # 8002e1e0 <__func__.0+0x2f8>
    8002215e:	2cc090ef          	jal	8002b42a <printf>
    80022162:	22090463          	beqz	s2,8002238a <mix_instruction_1+0x90a>
    80022166:	0000c597          	auipc	a1,0xc
    8002216a:	05258593          	addi	a1,a1,82 # 8002e1b8 <__func__.0+0x2d0>
    8002216e:	0000c517          	auipc	a0,0xc
    80022172:	08a50513          	addi	a0,a0,138 # 8002e1f8 <__func__.0+0x310>
    80022176:	2b4090ef          	jal	8002b42a <printf>
    8002217a:	0000c517          	auipc	a0,0xc
    8002217e:	08650513          	addi	a0,a0,134 # 8002e200 <__func__.0+0x318>
    80022182:	2a8090ef          	jal	8002b42a <printf>
    80022186:	864a                	mv	a2,s2
    80022188:	4681                	li	a3,0
    8002218a:	02d00593          	li	a1,45
    8002218e:	0000c517          	auipc	a0,0xc
    80022192:	51a50513          	addi	a0,a0,1306 # 8002e6a8 <__func__.0+0x7c0>
    80022196:	294090ef          	jal	8002b42a <printf>
    8002219a:	02900513          	li	a0,41
    8002219e:	77b070ef          	jal	8002a118 <putchar>
    800221a2:	4529                	li	a0,10
    800221a4:	775070ef          	jal	8002a118 <putchar>
    800221a8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800221aa:	4509                	li	a0,2
    800221ac:	d5dde0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800221b0:	14402973          	csrr	s2,sip
    800221b4:	0000c617          	auipc	a2,0xc
    800221b8:	51460613          	addi	a2,a2,1300 # 8002e6c8 <__func__.0+0x7e0>
    800221bc:	08200593          	li	a1,130
    800221c0:	0000c517          	auipc	a0,0xc
    800221c4:	02050513          	addi	a0,a0,32 # 8002e1e0 <__func__.0+0x2f8>
    800221c8:	262090ef          	jal	8002b42a <printf>
    800221cc:	1a090163          	beqz	s2,8002236e <mix_instruction_1+0x8ee>
    800221d0:	0000c597          	auipc	a1,0xc
    800221d4:	fe858593          	addi	a1,a1,-24 # 8002e1b8 <__func__.0+0x2d0>
    800221d8:	0000c517          	auipc	a0,0xc
    800221dc:	02050513          	addi	a0,a0,32 # 8002e1f8 <__func__.0+0x310>
    800221e0:	24a090ef          	jal	8002b42a <printf>
    800221e4:	0000c517          	auipc	a0,0xc
    800221e8:	01c50513          	addi	a0,a0,28 # 8002e200 <__func__.0+0x318>
    800221ec:	23e090ef          	jal	8002b42a <printf>
    800221f0:	864a                	mv	a2,s2
    800221f2:	4681                	li	a3,0
    800221f4:	02d00593          	li	a1,45
    800221f8:	0000c517          	auipc	a0,0xc
    800221fc:	4b050513          	addi	a0,a0,1200 # 8002e6a8 <__func__.0+0x7c0>
    80022200:	22a090ef          	jal	8002b42a <printf>
    80022204:	02900513          	li	a0,41
    80022208:	711070ef          	jal	8002a118 <putchar>
    8002220c:	4529                	li	a0,10
    8002220e:	70b070ef          	jal	8002a118 <putchar>
    80022212:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    80022214:	4511                	li	a0,4
    80022216:	cf3de0ef          	jal	80000f08 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    8002221a:	4509                	li	a0,2
    8002221c:	cedde0ef          	jal	80000f08 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80022220:	bedde0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80022224:	400137b7          	lui	a5,0x40013
    80022228:	078a                	slli	a5,a5,0x2
    8002222a:	00000297          	auipc	t0,0x0
    8002222e:	00c28293          	addi	t0,t0,12 # 80022236 <mix_instruction_1+0x7b6>
    80022232:	0254bc23          	sd	t0,56(s1)
    80022236:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022238:	08200593          	li	a1,130
    8002223c:	00012617          	auipc	a2,0x12
    80022240:	3ec60613          	addi	a2,a2,1004 # 80034628 <__func__.0+0x6740>
    80022244:	0000c517          	auipc	a0,0xc
    80022248:	f9c50513          	addi	a0,a0,-100 # 8002e1e0 <__func__.0+0x2f8>
    8002224c:	1de090ef          	jal	8002b42a <printf>
    80022250:	00036797          	auipc	a5,0x36
    80022254:	dc17c783          	lbu	a5,-575(a5) # 80058011 <excpt+0x1>
    80022258:	0000c597          	auipc	a1,0xc
    8002225c:	f6058593          	addi	a1,a1,-160 # 8002e1b8 <__func__.0+0x2d0>
    80022260:	cf89                	beqz	a5,8002227a <mix_instruction_1+0x7fa>
    80022262:	6498                	ld	a4,8(s1)
    80022264:	47d1                	li	a5,20
    80022266:	0000c597          	auipc	a1,0xc
    8002226a:	f4258593          	addi	a1,a1,-190 # 8002e1a8 <__func__.0+0x2c0>
    8002226e:	00f70663          	beq	a4,a5,8002227a <mix_instruction_1+0x7fa>
    80022272:	0000c597          	auipc	a1,0xc
    80022276:	f4658593          	addi	a1,a1,-186 # 8002e1b8 <__func__.0+0x2d0>
    8002227a:	0000c517          	auipc	a0,0xc
    8002227e:	f7e50513          	addi	a0,a0,-130 # 8002e1f8 <__func__.0+0x310>
    80022282:	1a8090ef          	jal	8002b42a <printf>
    80022286:	00036797          	auipc	a5,0x36
    8002228a:	d8b7c783          	lbu	a5,-629(a5) # 80058011 <excpt+0x1>
    8002228e:	c789                	beqz	a5,80022298 <mix_instruction_1+0x818>
    80022290:	6498                	ld	a4,8(s1)
    80022292:	47d1                	li	a5,20
    80022294:	00f70c63          	beq	a4,a5,800222ac <mix_instruction_1+0x82c>
    80022298:	0000c517          	auipc	a0,0xc
    8002229c:	f6850513          	addi	a0,a0,-152 # 8002e200 <__func__.0+0x318>
    800222a0:	18a090ef          	jal	8002b42a <printf>
    800222a4:	02900513          	li	a0,41
    800222a8:	671070ef          	jal	8002a118 <putchar>
    800222ac:	4529                	li	a0,10
    800222ae:	66b070ef          	jal	8002a118 <putchar>
    800222b2:	c801                	beqz	s0,800222c2 <mix_instruction_1+0x842>
    800222b4:	00036797          	auipc	a5,0x36
    800222b8:	d5d7c783          	lbu	a5,-675(a5) # 80058011 <excpt+0x1>
    800222bc:	4401                	li	s0,0
    800222be:	18079c63          	bnez	a5,80022456 <mix_instruction_1+0x9d6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    800222c2:	b4bde0ef          	jal	80000e0c <test_setup_except_function>
    
    
    goto_priv(PRIV_HS);     
    800222c6:	450d                	li	a0,3
    800222c8:	c41de0ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    800222cc:	b41de0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800222d0:	001007b7          	lui	a5,0x100
    800222d4:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800222d8:	07b2                	slli	a5,a5,0xc
    800222da:	0785                	addi	a5,a5,1
    800222dc:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    800222e0:	08200593          	li	a1,130
    800222e4:	0000f617          	auipc	a2,0xf
    800222e8:	fbc60613          	addi	a2,a2,-68 # 800312a0 <__func__.0+0x33b8>
    800222ec:	0000c517          	auipc	a0,0xc
    800222f0:	ef450513          	addi	a0,a0,-268 # 8002e1e0 <__func__.0+0x2f8>
    800222f4:	136090ef          	jal	8002b42a <printf>
    800222f8:	00036797          	auipc	a5,0x36
    800222fc:	d197c783          	lbu	a5,-743(a5) # 80058011 <excpt+0x1>
    80022300:	0000c597          	auipc	a1,0xc
    80022304:	eb858593          	addi	a1,a1,-328 # 8002e1b8 <__func__.0+0x2d0>
    80022308:	e789                	bnez	a5,80022312 <mix_instruction_1+0x892>
    8002230a:	0000c597          	auipc	a1,0xc
    8002230e:	e9e58593          	addi	a1,a1,-354 # 8002e1a8 <__func__.0+0x2c0>
    80022312:	0000c517          	auipc	a0,0xc
    80022316:	ee650513          	addi	a0,a0,-282 # 8002e1f8 <__func__.0+0x310>
    8002231a:	110090ef          	jal	8002b42a <printf>
    8002231e:	00036797          	auipc	a5,0x36
    80022322:	cf37c783          	lbu	a5,-781(a5) # 80058011 <excpt+0x1>
    80022326:	16079563          	bnez	a5,80022490 <mix_instruction_1+0xa10>
    8002232a:	4529                	li	a0,10
    8002232c:	5ed070ef          	jal	8002a118 <putchar>
    80022330:	c419                	beqz	s0,8002233e <mix_instruction_1+0x8be>
    80022332:	00036797          	auipc	a5,0x36
    80022336:	cdf7c783          	lbu	a5,-801(a5) # 80058011 <excpt+0x1>
    8002233a:	0e078c63          	beqz	a5,80022432 <mix_instruction_1+0x9b2>
    8002233e:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    80022340:	0000c597          	auipc	a1,0xc
    80022344:	e7858593          	addi	a1,a1,-392 # 8002e1b8 <__func__.0+0x2d0>
    80022348:	0000c517          	auipc	a0,0xc
    8002234c:	f1850513          	addi	a0,a0,-232 # 8002e260 <__func__.0+0x378>
    80022350:	0da090ef          	jal	8002b42a <printf>
    80022354:	4511                	li	a0,4
    80022356:	bb3de0ef          	jal	80000f08 <goto_priv>
    8002235a:	ccadf0ef          	jal	80001824 <reset_state>

    8002235e:	70a2                	ld	ra,40(sp)
    80022360:	8522                	mv	a0,s0
    80022362:	7402                	ld	s0,32(sp)
    80022364:	64e2                	ld	s1,24(sp)
    80022366:	6942                	ld	s2,16(sp)
    80022368:	69a2                	ld	s3,8(sp)
    8002236a:	6145                	addi	sp,sp,48
    8002236c:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8002236e:	0000c597          	auipc	a1,0xc
    80022372:	e3a58593          	addi	a1,a1,-454 # 8002e1a8 <__func__.0+0x2c0>
    80022376:	0000c517          	auipc	a0,0xc
    8002237a:	e8250513          	addi	a0,a0,-382 # 8002e1f8 <__func__.0+0x310>
    8002237e:	0ac090ef          	jal	8002b42a <printf>
    80022382:	4529                	li	a0,10
    80022384:	595070ef          	jal	8002a118 <putchar>
    80022388:	b571                	j	80022214 <mix_instruction_1+0x794>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8002238a:	0000c597          	auipc	a1,0xc
    8002238e:	e1e58593          	addi	a1,a1,-482 # 8002e1a8 <__func__.0+0x2c0>
    80022392:	0000c517          	auipc	a0,0xc
    80022396:	e6650513          	addi	a0,a0,-410 # 8002e1f8 <__func__.0+0x310>
    8002239a:	090090ef          	jal	8002b42a <printf>
    8002239e:	4529                	li	a0,10
    800223a0:	579070ef          	jal	8002a118 <putchar>
    800223a4:	b519                	j	800221aa <mix_instruction_1+0x72a>
    check_csr_rd("sip", sip, 0x0);
    800223a6:	0000c597          	auipc	a1,0xc
    800223aa:	e0258593          	addi	a1,a1,-510 # 8002e1a8 <__func__.0+0x2c0>
    800223ae:	0000c517          	auipc	a0,0xc
    800223b2:	e4a50513          	addi	a0,a0,-438 # 8002e1f8 <__func__.0+0x310>
    800223b6:	074090ef          	jal	8002b42a <printf>
    800223ba:	4529                	li	a0,10
    800223bc:	55d070ef          	jal	8002a118 <putchar>
    800223c0:	b359                	j	80022146 <mix_instruction_1+0x6c6>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800223c2:	0000c597          	auipc	a1,0xc
    800223c6:	de658593          	addi	a1,a1,-538 # 8002e1a8 <__func__.0+0x2c0>
    800223ca:	0000c517          	auipc	a0,0xc
    800223ce:	e2e50513          	addi	a0,a0,-466 # 8002e1f8 <__func__.0+0x310>
    800223d2:	058090ef          	jal	8002b42a <printf>
    800223d6:	4529                	li	a0,10
    800223d8:	541070ef          	jal	8002a118 <putchar>
    800223dc:	b319                	j	800220e2 <mix_instruction_1+0x662>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    800223de:	0000c597          	auipc	a1,0xc
    800223e2:	dca58593          	addi	a1,a1,-566 # 8002e1a8 <__func__.0+0x2c0>
    800223e6:	0000c517          	auipc	a0,0xc
    800223ea:	e1250513          	addi	a0,a0,-494 # 8002e1f8 <__func__.0+0x310>
    800223ee:	03c090ef          	jal	8002b42a <printf>
    800223f2:	4529                	li	a0,10
    800223f4:	525070ef          	jal	8002a118 <putchar>
    800223f8:	b9b5                	j	80022074 <mix_instruction_1+0x5f4>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800223fa:	0000c597          	auipc	a1,0xc
    800223fe:	dae58593          	addi	a1,a1,-594 # 8002e1a8 <__func__.0+0x2c0>
    80022402:	0000c517          	auipc	a0,0xc
    80022406:	df650513          	addi	a0,a0,-522 # 8002e1f8 <__func__.0+0x310>
    8002240a:	020090ef          	jal	8002b42a <printf>
    8002240e:	4529                	li	a0,10
    80022410:	509070ef          	jal	8002a118 <putchar>
    80022414:	bed5                	j	80022008 <mix_instruction_1+0x588>
    check_csr_rd("sip", sip, 0x222);    
    80022416:	0000c597          	auipc	a1,0xc
    8002241a:	d9258593          	addi	a1,a1,-622 # 8002e1a8 <__func__.0+0x2c0>
    8002241e:	0000c517          	auipc	a0,0xc
    80022422:	dda50513          	addi	a0,a0,-550 # 8002e1f8 <__func__.0+0x310>
    80022426:	004090ef          	jal	8002b42a <printf>
    8002242a:	4529                	li	a0,10
    8002242c:	4ed070ef          	jal	8002a118 <putchar>
    80022430:	be8d                	j	80021fa2 <mix_instruction_1+0x522>
    TEST_ASSERT("load byte address is not aligned successful",         
    80022432:	4405                	li	s0,1
    TEST_END();
    80022434:	0000c597          	auipc	a1,0xc
    80022438:	d7458593          	addi	a1,a1,-652 # 8002e1a8 <__func__.0+0x2c0>
    8002243c:	b731                	j	80022348 <mix_instruction_1+0x8c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8002243e:	6480                	ld	s0,8(s1)
    80022440:	1429                	addi	s0,s0,-22
    80022442:	00143413          	seqz	s0,s0
    80022446:	86fff06f          	j	80021cb4 <mix_instruction_1+0x234>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8002244a:	6480                	ld	s0,8(s1)
    8002244c:	1479                	addi	s0,s0,-2
    8002244e:	00143413          	seqz	s0,s0
    80022452:	fb4ff06f          	j	80021c06 <mix_instruction_1+0x186>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022456:	6480                	ld	s0,8(s1)
    80022458:	1431                	addi	s0,s0,-20
    8002245a:	00143413          	seqz	s0,s0
    8002245e:	b595                	j	800222c2 <mix_instruction_1+0x842>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80022460:	6480                	ld	s0,8(s1)
    80022462:	144d                	addi	s0,s0,-13
    80022464:	00143413          	seqz	s0,s0
    80022468:	ba61                	j	80021e00 <mix_instruction_1+0x380>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8002246a:	6480                	ld	s0,8(s1)
    8002246c:	1445                	addi	s0,s0,-15
    8002246e:	00143413          	seqz	s0,s0
    80022472:	b499                	j	80021eb8 <mix_instruction_1+0x438>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80022474:	0000c597          	auipc	a1,0xc
    80022478:	d3458593          	addi	a1,a1,-716 # 8002e1a8 <__func__.0+0x2c0>
    8002247c:	0000c517          	auipc	a0,0xc
    80022480:	d7c50513          	addi	a0,a0,-644 # 8002e1f8 <__func__.0+0x310>
    80022484:	7a7080ef          	jal	8002b42a <printf>
    80022488:	4529                	li	a0,10
    8002248a:	48f070ef          	jal	8002a118 <putchar>
    8002248e:	b475                	j	80021f3a <mix_instruction_1+0x4ba>
    TEST_ASSERT("load byte address is not aligned successful",         
    80022490:	0000c517          	auipc	a0,0xc
    80022494:	d7050513          	addi	a0,a0,-656 # 8002e200 <__func__.0+0x318>
    80022498:	793080ef          	jal	8002b42a <printf>
    8002249c:	02900513          	li	a0,41
    800224a0:	479070ef          	jal	8002a118 <putchar>
    800224a4:	b559                	j	8002232a <mix_instruction_1+0x8aa>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800224a6:	0000c517          	auipc	a0,0xc
    800224aa:	d5a50513          	addi	a0,a0,-678 # 8002e200 <__func__.0+0x318>
    800224ae:	77d080ef          	jal	8002b42a <printf>
    800224b2:	02900513          	li	a0,41
    800224b6:	463070ef          	jal	8002a118 <putchar>
    800224ba:	887ff06f          	j	80021d40 <mix_instruction_1+0x2c0>

00000000800224be <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    800224be:	1101                	addi	sp,sp,-32

    TEST_START();
    800224c0:	0000b597          	auipc	a1,0xb
    800224c4:	4a858593          	addi	a1,a1,1192 # 8002d968 <__func__.4>
    800224c8:	0000c517          	auipc	a0,0xc
    800224cc:	d0050513          	addi	a0,a0,-768 # 8002e1c8 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    800224d0:	ec06                	sd	ra,24(sp)
    800224d2:	e822                	sd	s0,16(sp)
    800224d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800224d6:	755080ef          	jal	8002b42a <printf>
    800224da:	4529                	li	a0,10
    800224dc:	43d070ef          	jal	8002a118 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    800224e0:	4511                	li	a0,4
    800224e2:	a27de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800224e6:	927de0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("ebreak");
    800224ea:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800224ec:	08200593          	li	a1,130
    800224f0:	00014617          	auipc	a2,0x14
    800224f4:	30060613          	addi	a2,a2,768 # 800367f0 <__func__.0+0x8908>
    800224f8:	0000c517          	auipc	a0,0xc
    800224fc:	ce850513          	addi	a0,a0,-792 # 8002e1e0 <__func__.0+0x2f8>
    80022500:	72b080ef          	jal	8002b42a <printf>
    80022504:	00036797          	auipc	a5,0x36
    80022508:	b0d7c783          	lbu	a5,-1267(a5) # 80058011 <excpt+0x1>
    8002250c:	00036497          	auipc	s1,0x36
    80022510:	b0448493          	addi	s1,s1,-1276 # 80058010 <excpt>
    80022514:	0000c597          	auipc	a1,0xc
    80022518:	ca458593          	addi	a1,a1,-860 # 8002e1b8 <__func__.0+0x2d0>
    8002251c:	cf89                	beqz	a5,80022536 <ebreak_tests_1+0x78>
    8002251e:	6498                	ld	a4,8(s1)
    80022520:	478d                	li	a5,3
    80022522:	0000c597          	auipc	a1,0xc
    80022526:	c8658593          	addi	a1,a1,-890 # 8002e1a8 <__func__.0+0x2c0>
    8002252a:	00f70663          	beq	a4,a5,80022536 <ebreak_tests_1+0x78>
    8002252e:	0000c597          	auipc	a1,0xc
    80022532:	c8a58593          	addi	a1,a1,-886 # 8002e1b8 <__func__.0+0x2d0>
    80022536:	0000c517          	auipc	a0,0xc
    8002253a:	cc250513          	addi	a0,a0,-830 # 8002e1f8 <__func__.0+0x310>
    8002253e:	6ed080ef          	jal	8002b42a <printf>
    80022542:	00036797          	auipc	a5,0x36
    80022546:	acf7c783          	lbu	a5,-1329(a5) # 80058011 <excpt+0x1>
    8002254a:	c789                	beqz	a5,80022554 <ebreak_tests_1+0x96>
    8002254c:	6498                	ld	a4,8(s1)
    8002254e:	478d                	li	a5,3
    80022550:	00f70c63          	beq	a4,a5,80022568 <ebreak_tests_1+0xaa>
    80022554:	0000c517          	auipc	a0,0xc
    80022558:	cac50513          	addi	a0,a0,-852 # 8002e200 <__func__.0+0x318>
    8002255c:	6cf080ef          	jal	8002b42a <printf>
    80022560:	02900513          	li	a0,41
    80022564:	3b5070ef          	jal	8002a118 <putchar>
    80022568:	4529                	li	a0,10
    8002256a:	3af070ef          	jal	8002a118 <putchar>
    8002256e:	00036417          	auipc	s0,0x36
    80022572:	aa344403          	lbu	s0,-1373(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022576:	0000c597          	auipc	a1,0xc
    8002257a:	c4258593          	addi	a1,a1,-958 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    8002257e:	cc11                	beqz	s0,8002259a <ebreak_tests_1+0xdc>
    80022580:	6498                	ld	a4,8(s1)
    80022582:	478d                	li	a5,3
    TEST_END();
    80022584:	0000c597          	auipc	a1,0xc
    80022588:	c2458593          	addi	a1,a1,-988 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    8002258c:	00f70763          	beq	a4,a5,8002259a <ebreak_tests_1+0xdc>
    80022590:	4401                	li	s0,0
    TEST_END();
    80022592:	0000c597          	auipc	a1,0xc
    80022596:	c2658593          	addi	a1,a1,-986 # 8002e1b8 <__func__.0+0x2d0>
    8002259a:	0000c517          	auipc	a0,0xc
    8002259e:	cc650513          	addi	a0,a0,-826 # 8002e260 <__func__.0+0x378>
    800225a2:	689080ef          	jal	8002b42a <printf>
    800225a6:	4511                	li	a0,4
    800225a8:	961de0ef          	jal	80000f08 <goto_priv>
    800225ac:	a78df0ef          	jal	80001824 <reset_state>

}
    800225b0:	60e2                	ld	ra,24(sp)
    800225b2:	8522                	mv	a0,s0
    800225b4:	6442                	ld	s0,16(sp)
    800225b6:	64a2                	ld	s1,8(sp)
    800225b8:	6105                	addi	sp,sp,32
    800225ba:	8082                	ret

00000000800225bc <ebreak_tests_2>:

bool ebreak_tests_2() {
    800225bc:	1101                	addi	sp,sp,-32

    TEST_START();
    800225be:	0000b597          	auipc	a1,0xb
    800225c2:	3ba58593          	addi	a1,a1,954 # 8002d978 <__func__.3>
    800225c6:	0000c517          	auipc	a0,0xc
    800225ca:	c0250513          	addi	a0,a0,-1022 # 8002e1c8 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    800225ce:	ec06                	sd	ra,24(sp)
    800225d0:	e822                	sd	s0,16(sp)
    800225d2:	e426                	sd	s1,8(sp)
    TEST_START();
    800225d4:	657080ef          	jal	8002b42a <printf>
    800225d8:	4529                	li	a0,10
    800225da:	33f070ef          	jal	8002a118 <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_VS);
    800225de:	4509                	li	a0,2
    800225e0:	929de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800225e4:	829de0ef          	jal	80000e0c <test_setup_except_function>
    800225e8:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800225ea:	08200593          	li	a1,130
    800225ee:	00014617          	auipc	a2,0x14
    800225f2:	22a60613          	addi	a2,a2,554 # 80036818 <__func__.0+0x8930>
    800225f6:	0000c517          	auipc	a0,0xc
    800225fa:	bea50513          	addi	a0,a0,-1046 # 8002e1e0 <__func__.0+0x2f8>
    800225fe:	62d080ef          	jal	8002b42a <printf>
    80022602:	00036797          	auipc	a5,0x36
    80022606:	a0f7c783          	lbu	a5,-1521(a5) # 80058011 <excpt+0x1>
    8002260a:	00036497          	auipc	s1,0x36
    8002260e:	a0648493          	addi	s1,s1,-1530 # 80058010 <excpt>
    80022612:	0000c597          	auipc	a1,0xc
    80022616:	ba658593          	addi	a1,a1,-1114 # 8002e1b8 <__func__.0+0x2d0>
    8002261a:	cf89                	beqz	a5,80022634 <ebreak_tests_2+0x78>
    8002261c:	6498                	ld	a4,8(s1)
    8002261e:	478d                	li	a5,3
    80022620:	0000c597          	auipc	a1,0xc
    80022624:	b8858593          	addi	a1,a1,-1144 # 8002e1a8 <__func__.0+0x2c0>
    80022628:	00f70663          	beq	a4,a5,80022634 <ebreak_tests_2+0x78>
    8002262c:	0000c597          	auipc	a1,0xc
    80022630:	b8c58593          	addi	a1,a1,-1140 # 8002e1b8 <__func__.0+0x2d0>
    80022634:	0000c517          	auipc	a0,0xc
    80022638:	bc450513          	addi	a0,a0,-1084 # 8002e1f8 <__func__.0+0x310>
    8002263c:	5ef080ef          	jal	8002b42a <printf>
    80022640:	00036797          	auipc	a5,0x36
    80022644:	9d17c783          	lbu	a5,-1583(a5) # 80058011 <excpt+0x1>
    80022648:	c789                	beqz	a5,80022652 <ebreak_tests_2+0x96>
    8002264a:	6498                	ld	a4,8(s1)
    8002264c:	478d                	li	a5,3
    8002264e:	00f70c63          	beq	a4,a5,80022666 <ebreak_tests_2+0xaa>
    80022652:	0000c517          	auipc	a0,0xc
    80022656:	bae50513          	addi	a0,a0,-1106 # 8002e200 <__func__.0+0x318>
    8002265a:	5d1080ef          	jal	8002b42a <printf>
    8002265e:	02900513          	li	a0,41
    80022662:	2b7070ef          	jal	8002a118 <putchar>
    80022666:	4529                	li	a0,10
    80022668:	2b1070ef          	jal	8002a118 <putchar>
    8002266c:	00036417          	auipc	s0,0x36
    80022670:	9a544403          	lbu	s0,-1627(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022674:	0000c597          	auipc	a1,0xc
    80022678:	b4458593          	addi	a1,a1,-1212 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    8002267c:	cc11                	beqz	s0,80022698 <ebreak_tests_2+0xdc>
    8002267e:	6498                	ld	a4,8(s1)
    80022680:	478d                	li	a5,3
    TEST_END();
    80022682:	0000c597          	auipc	a1,0xc
    80022686:	b2658593          	addi	a1,a1,-1242 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    8002268a:	00f70763          	beq	a4,a5,80022698 <ebreak_tests_2+0xdc>
    8002268e:	4401                	li	s0,0
    TEST_END();
    80022690:	0000c597          	auipc	a1,0xc
    80022694:	b2858593          	addi	a1,a1,-1240 # 8002e1b8 <__func__.0+0x2d0>
    80022698:	0000c517          	auipc	a0,0xc
    8002269c:	bc850513          	addi	a0,a0,-1080 # 8002e260 <__func__.0+0x378>
    800226a0:	58b080ef          	jal	8002b42a <printf>
    800226a4:	4511                	li	a0,4
    800226a6:	863de0ef          	jal	80000f08 <goto_priv>
    800226aa:	97adf0ef          	jal	80001824 <reset_state>

}
    800226ae:	60e2                	ld	ra,24(sp)
    800226b0:	8522                	mv	a0,s0
    800226b2:	6442                	ld	s0,16(sp)
    800226b4:	64a2                	ld	s1,8(sp)
    800226b6:	6105                	addi	sp,sp,32
    800226b8:	8082                	ret

00000000800226ba <ebreak_tests_3>:

bool ebreak_tests_3() {
    800226ba:	1101                	addi	sp,sp,-32

    TEST_START();
    800226bc:	0000b597          	auipc	a1,0xb
    800226c0:	2cc58593          	addi	a1,a1,716 # 8002d988 <__func__.2>
    800226c4:	0000c517          	auipc	a0,0xc
    800226c8:	b0450513          	addi	a0,a0,-1276 # 8002e1c8 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    800226cc:	ec06                	sd	ra,24(sp)
    800226ce:	e822                	sd	s0,16(sp)
    800226d0:	e426                	sd	s1,8(sp)
    TEST_START();
    800226d2:	559080ef          	jal	8002b42a <printf>
    800226d6:	4529                	li	a0,10
    800226d8:	241070ef          	jal	8002a118 <putchar>

    //HS模式下执行ebreak指令
    goto_priv(PRIV_HS);
    800226dc:	450d                	li	a0,3
    800226de:	82bde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800226e2:	f2ade0ef          	jal	80000e0c <test_setup_except_function>
    800226e6:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800226e8:	08200593          	li	a1,130
    800226ec:	00014617          	auipc	a2,0x14
    800226f0:	15460613          	addi	a2,a2,340 # 80036840 <__func__.0+0x8958>
    800226f4:	0000c517          	auipc	a0,0xc
    800226f8:	aec50513          	addi	a0,a0,-1300 # 8002e1e0 <__func__.0+0x2f8>
    800226fc:	52f080ef          	jal	8002b42a <printf>
    80022700:	00036797          	auipc	a5,0x36
    80022704:	9117c783          	lbu	a5,-1775(a5) # 80058011 <excpt+0x1>
    80022708:	00036497          	auipc	s1,0x36
    8002270c:	90848493          	addi	s1,s1,-1784 # 80058010 <excpt>
    80022710:	0000c597          	auipc	a1,0xc
    80022714:	aa858593          	addi	a1,a1,-1368 # 8002e1b8 <__func__.0+0x2d0>
    80022718:	cf89                	beqz	a5,80022732 <ebreak_tests_3+0x78>
    8002271a:	6498                	ld	a4,8(s1)
    8002271c:	478d                	li	a5,3
    8002271e:	0000c597          	auipc	a1,0xc
    80022722:	a8a58593          	addi	a1,a1,-1398 # 8002e1a8 <__func__.0+0x2c0>
    80022726:	00f70663          	beq	a4,a5,80022732 <ebreak_tests_3+0x78>
    8002272a:	0000c597          	auipc	a1,0xc
    8002272e:	a8e58593          	addi	a1,a1,-1394 # 8002e1b8 <__func__.0+0x2d0>
    80022732:	0000c517          	auipc	a0,0xc
    80022736:	ac650513          	addi	a0,a0,-1338 # 8002e1f8 <__func__.0+0x310>
    8002273a:	4f1080ef          	jal	8002b42a <printf>
    8002273e:	00036797          	auipc	a5,0x36
    80022742:	8d37c783          	lbu	a5,-1837(a5) # 80058011 <excpt+0x1>
    80022746:	c789                	beqz	a5,80022750 <ebreak_tests_3+0x96>
    80022748:	6498                	ld	a4,8(s1)
    8002274a:	478d                	li	a5,3
    8002274c:	00f70c63          	beq	a4,a5,80022764 <ebreak_tests_3+0xaa>
    80022750:	0000c517          	auipc	a0,0xc
    80022754:	ab050513          	addi	a0,a0,-1360 # 8002e200 <__func__.0+0x318>
    80022758:	4d3080ef          	jal	8002b42a <printf>
    8002275c:	02900513          	li	a0,41
    80022760:	1b9070ef          	jal	8002a118 <putchar>
    80022764:	4529                	li	a0,10
    80022766:	1b3070ef          	jal	8002a118 <putchar>
    8002276a:	00036417          	auipc	s0,0x36
    8002276e:	8a744403          	lbu	s0,-1881(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022772:	0000c597          	auipc	a1,0xc
    80022776:	a4658593          	addi	a1,a1,-1466 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    8002277a:	cc11                	beqz	s0,80022796 <ebreak_tests_3+0xdc>
    8002277c:	6498                	ld	a4,8(s1)
    8002277e:	478d                	li	a5,3
    TEST_END();
    80022780:	0000c597          	auipc	a1,0xc
    80022784:	a2858593          	addi	a1,a1,-1496 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022788:	00f70763          	beq	a4,a5,80022796 <ebreak_tests_3+0xdc>
    8002278c:	4401                	li	s0,0
    TEST_END();
    8002278e:	0000c597          	auipc	a1,0xc
    80022792:	a2a58593          	addi	a1,a1,-1494 # 8002e1b8 <__func__.0+0x2d0>
    80022796:	0000c517          	auipc	a0,0xc
    8002279a:	aca50513          	addi	a0,a0,-1334 # 8002e260 <__func__.0+0x378>
    8002279e:	48d080ef          	jal	8002b42a <printf>
    800227a2:	4511                	li	a0,4
    800227a4:	f64de0ef          	jal	80000f08 <goto_priv>
    800227a8:	87cdf0ef          	jal	80001824 <reset_state>

}
    800227ac:	60e2                	ld	ra,24(sp)
    800227ae:	8522                	mv	a0,s0
    800227b0:	6442                	ld	s0,16(sp)
    800227b2:	64a2                	ld	s1,8(sp)
    800227b4:	6105                	addi	sp,sp,32
    800227b6:	8082                	ret

00000000800227b8 <ebreak_tests_4>:

bool ebreak_tests_4() {
    800227b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800227ba:	0000b597          	auipc	a1,0xb
    800227be:	1de58593          	addi	a1,a1,478 # 8002d998 <__func__.1>
    800227c2:	0000c517          	auipc	a0,0xc
    800227c6:	a0650513          	addi	a0,a0,-1530 # 8002e1c8 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    800227ca:	ec06                	sd	ra,24(sp)
    800227cc:	e822                	sd	s0,16(sp)
    800227ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800227d0:	45b080ef          	jal	8002b42a <printf>
    800227d4:	4529                	li	a0,10
    800227d6:	143070ef          	jal	8002a118 <putchar>

    //HU模式下执行ebreak指令
    goto_priv(PRIV_HU);
    800227da:	4505                	li	a0,1
    800227dc:	f2cde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800227e0:	e2cde0ef          	jal	80000e0c <test_setup_except_function>
    800227e4:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800227e6:	08200593          	li	a1,130
    800227ea:	00014617          	auipc	a2,0x14
    800227ee:	07e60613          	addi	a2,a2,126 # 80036868 <__func__.0+0x8980>
    800227f2:	0000c517          	auipc	a0,0xc
    800227f6:	9ee50513          	addi	a0,a0,-1554 # 8002e1e0 <__func__.0+0x2f8>
    800227fa:	431080ef          	jal	8002b42a <printf>
    800227fe:	00036797          	auipc	a5,0x36
    80022802:	8137c783          	lbu	a5,-2029(a5) # 80058011 <excpt+0x1>
    80022806:	00036497          	auipc	s1,0x36
    8002280a:	80a48493          	addi	s1,s1,-2038 # 80058010 <excpt>
    8002280e:	0000c597          	auipc	a1,0xc
    80022812:	9aa58593          	addi	a1,a1,-1622 # 8002e1b8 <__func__.0+0x2d0>
    80022816:	cf89                	beqz	a5,80022830 <ebreak_tests_4+0x78>
    80022818:	6498                	ld	a4,8(s1)
    8002281a:	478d                	li	a5,3
    8002281c:	0000c597          	auipc	a1,0xc
    80022820:	98c58593          	addi	a1,a1,-1652 # 8002e1a8 <__func__.0+0x2c0>
    80022824:	00f70663          	beq	a4,a5,80022830 <ebreak_tests_4+0x78>
    80022828:	0000c597          	auipc	a1,0xc
    8002282c:	99058593          	addi	a1,a1,-1648 # 8002e1b8 <__func__.0+0x2d0>
    80022830:	0000c517          	auipc	a0,0xc
    80022834:	9c850513          	addi	a0,a0,-1592 # 8002e1f8 <__func__.0+0x310>
    80022838:	3f3080ef          	jal	8002b42a <printf>
    8002283c:	00035797          	auipc	a5,0x35
    80022840:	7d57c783          	lbu	a5,2005(a5) # 80058011 <excpt+0x1>
    80022844:	c789                	beqz	a5,8002284e <ebreak_tests_4+0x96>
    80022846:	6498                	ld	a4,8(s1)
    80022848:	478d                	li	a5,3
    8002284a:	00f70c63          	beq	a4,a5,80022862 <ebreak_tests_4+0xaa>
    8002284e:	0000c517          	auipc	a0,0xc
    80022852:	9b250513          	addi	a0,a0,-1614 # 8002e200 <__func__.0+0x318>
    80022856:	3d5080ef          	jal	8002b42a <printf>
    8002285a:	02900513          	li	a0,41
    8002285e:	0bb070ef          	jal	8002a118 <putchar>
    80022862:	4529                	li	a0,10
    80022864:	0b5070ef          	jal	8002a118 <putchar>
    80022868:	00035417          	auipc	s0,0x35
    8002286c:	7a944403          	lbu	s0,1961(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022870:	0000c597          	auipc	a1,0xc
    80022874:	94858593          	addi	a1,a1,-1720 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022878:	cc11                	beqz	s0,80022894 <ebreak_tests_4+0xdc>
    8002287a:	6498                	ld	a4,8(s1)
    8002287c:	478d                	li	a5,3
    TEST_END();
    8002287e:	0000c597          	auipc	a1,0xc
    80022882:	92a58593          	addi	a1,a1,-1750 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022886:	00f70763          	beq	a4,a5,80022894 <ebreak_tests_4+0xdc>
    8002288a:	4401                	li	s0,0
    TEST_END();
    8002288c:	0000c597          	auipc	a1,0xc
    80022890:	92c58593          	addi	a1,a1,-1748 # 8002e1b8 <__func__.0+0x2d0>
    80022894:	0000c517          	auipc	a0,0xc
    80022898:	9cc50513          	addi	a0,a0,-1588 # 8002e260 <__func__.0+0x378>
    8002289c:	38f080ef          	jal	8002b42a <printf>
    800228a0:	4511                	li	a0,4
    800228a2:	e66de0ef          	jal	80000f08 <goto_priv>
    800228a6:	f7fde0ef          	jal	80001824 <reset_state>

}
    800228aa:	60e2                	ld	ra,24(sp)
    800228ac:	8522                	mv	a0,s0
    800228ae:	6442                	ld	s0,16(sp)
    800228b0:	64a2                	ld	s1,8(sp)
    800228b2:	6105                	addi	sp,sp,32
    800228b4:	8082                	ret

00000000800228b6 <ebreak_tests_5>:

bool ebreak_tests_5() {
    800228b6:	1101                	addi	sp,sp,-32

    TEST_START();
    800228b8:	0000b597          	auipc	a1,0xb
    800228bc:	0f058593          	addi	a1,a1,240 # 8002d9a8 <__func__.0>
    800228c0:	0000c517          	auipc	a0,0xc
    800228c4:	90850513          	addi	a0,a0,-1784 # 8002e1c8 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    800228c8:	ec06                	sd	ra,24(sp)
    800228ca:	e822                	sd	s0,16(sp)
    800228cc:	e426                	sd	s1,8(sp)
    TEST_START();
    800228ce:	35d080ef          	jal	8002b42a <printf>
    800228d2:	4529                	li	a0,10
    800228d4:	045070ef          	jal	8002a118 <putchar>

    //VU模式下执行ebreak指令
    goto_priv(PRIV_VU);
    800228d8:	4501                	li	a0,0
    800228da:	e2ede0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800228de:	d2ede0ef          	jal	80000e0c <test_setup_except_function>
    800228e2:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    800228e4:	08200593          	li	a1,130
    800228e8:	00014617          	auipc	a2,0x14
    800228ec:	fa860613          	addi	a2,a2,-88 # 80036890 <__func__.0+0x89a8>
    800228f0:	0000c517          	auipc	a0,0xc
    800228f4:	8f050513          	addi	a0,a0,-1808 # 8002e1e0 <__func__.0+0x2f8>
    800228f8:	333080ef          	jal	8002b42a <printf>
    800228fc:	00035797          	auipc	a5,0x35
    80022900:	7157c783          	lbu	a5,1813(a5) # 80058011 <excpt+0x1>
    80022904:	00035497          	auipc	s1,0x35
    80022908:	70c48493          	addi	s1,s1,1804 # 80058010 <excpt>
    8002290c:	0000c597          	auipc	a1,0xc
    80022910:	8ac58593          	addi	a1,a1,-1876 # 8002e1b8 <__func__.0+0x2d0>
    80022914:	cf89                	beqz	a5,8002292e <ebreak_tests_5+0x78>
    80022916:	6498                	ld	a4,8(s1)
    80022918:	478d                	li	a5,3
    8002291a:	0000c597          	auipc	a1,0xc
    8002291e:	88e58593          	addi	a1,a1,-1906 # 8002e1a8 <__func__.0+0x2c0>
    80022922:	00f70663          	beq	a4,a5,8002292e <ebreak_tests_5+0x78>
    80022926:	0000c597          	auipc	a1,0xc
    8002292a:	89258593          	addi	a1,a1,-1902 # 8002e1b8 <__func__.0+0x2d0>
    8002292e:	0000c517          	auipc	a0,0xc
    80022932:	8ca50513          	addi	a0,a0,-1846 # 8002e1f8 <__func__.0+0x310>
    80022936:	2f5080ef          	jal	8002b42a <printf>
    8002293a:	00035797          	auipc	a5,0x35
    8002293e:	6d77c783          	lbu	a5,1751(a5) # 80058011 <excpt+0x1>
    80022942:	c789                	beqz	a5,8002294c <ebreak_tests_5+0x96>
    80022944:	6498                	ld	a4,8(s1)
    80022946:	478d                	li	a5,3
    80022948:	00f70c63          	beq	a4,a5,80022960 <ebreak_tests_5+0xaa>
    8002294c:	0000c517          	auipc	a0,0xc
    80022950:	8b450513          	addi	a0,a0,-1868 # 8002e200 <__func__.0+0x318>
    80022954:	2d7080ef          	jal	8002b42a <printf>
    80022958:	02900513          	li	a0,41
    8002295c:	7bc070ef          	jal	8002a118 <putchar>
    80022960:	4529                	li	a0,10
    80022962:	7b6070ef          	jal	8002a118 <putchar>
    80022966:	00035417          	auipc	s0,0x35
    8002296a:	6ab44403          	lbu	s0,1707(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002296e:	0000c597          	auipc	a1,0xc
    80022972:	84a58593          	addi	a1,a1,-1974 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022976:	cc11                	beqz	s0,80022992 <ebreak_tests_5+0xdc>
    80022978:	6498                	ld	a4,8(s1)
    8002297a:	478d                	li	a5,3
    TEST_END();
    8002297c:	0000c597          	auipc	a1,0xc
    80022980:	82c58593          	addi	a1,a1,-2004 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022984:	00f70763          	beq	a4,a5,80022992 <ebreak_tests_5+0xdc>
    80022988:	4401                	li	s0,0
    TEST_END();
    8002298a:	0000c597          	auipc	a1,0xc
    8002298e:	82e58593          	addi	a1,a1,-2002 # 8002e1b8 <__func__.0+0x2d0>
    80022992:	0000c517          	auipc	a0,0xc
    80022996:	8ce50513          	addi	a0,a0,-1842 # 8002e260 <__func__.0+0x378>
    8002299a:	291080ef          	jal	8002b42a <printf>
    8002299e:	4511                	li	a0,4
    800229a0:	d68de0ef          	jal	80000f08 <goto_priv>
    800229a4:	e81de0ef          	jal	80001824 <reset_state>

    800229a8:	60e2                	ld	ra,24(sp)
    800229aa:	8522                	mv	a0,s0
    800229ac:	6442                	ld	s0,16(sp)
    800229ae:	64a2                	ld	s1,8(sp)
    800229b0:	6105                	addi	sp,sp,32
    800229b2:	8082                	ret

00000000800229b4 <stateen_C_test_1>:
#include <rvh_test.h>


bool stateen_C_test_1(){
    800229b4:	1101                	addi	sp,sp,-32

    TEST_START();
    800229b6:	0000b597          	auipc	a1,0xb
    800229ba:	00258593          	addi	a1,a1,2 # 8002d9b8 <__func__.36>
    800229be:	0000c517          	auipc	a0,0xc
    800229c2:	80a50513          	addi	a0,a0,-2038 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_1(){
    800229c6:	ec06                	sd	ra,24(sp)
    800229c8:	e822                	sd	s0,16(sp)
    800229ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800229cc:	25f080ef          	jal	8002b42a <printf>
    800229d0:	4529                	li	a0,10
    800229d2:	746070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800229d6:	4511                	li	a0,4
    800229d8:	d30de0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=0,hu mode 不可访问自定义寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    800229dc:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HU);
    800229e0:	4505                	li	a0,1
    800229e2:	d26de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800229e6:	c26de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    800229ea:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    800229ee:	e60de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    800229f2:	08200593          	li	a1,130
    800229f6:	00014617          	auipc	a2,0x14
    800229fa:	ec260613          	addi	a2,a2,-318 # 800368b8 <__func__.0+0x89d0>
    800229fe:	0000b517          	auipc	a0,0xb
    80022a02:	7e250513          	addi	a0,a0,2018 # 8002e1e0 <__func__.0+0x2f8>
    80022a06:	225080ef          	jal	8002b42a <printf>
    80022a0a:	00035797          	auipc	a5,0x35
    80022a0e:	6077c783          	lbu	a5,1543(a5) # 80058011 <excpt+0x1>
    80022a12:	00035497          	auipc	s1,0x35
    80022a16:	5fe48493          	addi	s1,s1,1534 # 80058010 <excpt>
    80022a1a:	0000b597          	auipc	a1,0xb
    80022a1e:	79e58593          	addi	a1,a1,1950 # 8002e1b8 <__func__.0+0x2d0>
    80022a22:	cf89                	beqz	a5,80022a3c <stateen_C_test_1+0x88>
    80022a24:	6498                	ld	a4,8(s1)
    80022a26:	4789                	li	a5,2
    80022a28:	0000b597          	auipc	a1,0xb
    80022a2c:	78058593          	addi	a1,a1,1920 # 8002e1a8 <__func__.0+0x2c0>
    80022a30:	00f70663          	beq	a4,a5,80022a3c <stateen_C_test_1+0x88>
    80022a34:	0000b597          	auipc	a1,0xb
    80022a38:	78458593          	addi	a1,a1,1924 # 8002e1b8 <__func__.0+0x2d0>
    80022a3c:	0000b517          	auipc	a0,0xb
    80022a40:	7bc50513          	addi	a0,a0,1980 # 8002e1f8 <__func__.0+0x310>
    80022a44:	1e7080ef          	jal	8002b42a <printf>
    80022a48:	00035797          	auipc	a5,0x35
    80022a4c:	5c97c783          	lbu	a5,1481(a5) # 80058011 <excpt+0x1>
    80022a50:	c789                	beqz	a5,80022a5a <stateen_C_test_1+0xa6>
    80022a52:	6498                	ld	a4,8(s1)
    80022a54:	4789                	li	a5,2
    80022a56:	00f70c63          	beq	a4,a5,80022a6e <stateen_C_test_1+0xba>
    80022a5a:	0000b517          	auipc	a0,0xb
    80022a5e:	7a650513          	addi	a0,a0,1958 # 8002e200 <__func__.0+0x318>
    80022a62:	1c9080ef          	jal	8002b42a <printf>
    80022a66:	02900513          	li	a0,41
    80022a6a:	6ae070ef          	jal	8002a118 <putchar>
    80022a6e:	4529                	li	a0,10
    80022a70:	6a8070ef          	jal	8002a118 <putchar>
    80022a74:	00035417          	auipc	s0,0x35
    80022a78:	59d44403          	lbu	s0,1437(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022a7c:	0000b597          	auipc	a1,0xb
    80022a80:	73c58593          	addi	a1,a1,1852 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022a84:	cc11                	beqz	s0,80022aa0 <stateen_C_test_1+0xec>
    80022a86:	6498                	ld	a4,8(s1)
    80022a88:	4789                	li	a5,2
    TEST_END();
    80022a8a:	0000b597          	auipc	a1,0xb
    80022a8e:	71e58593          	addi	a1,a1,1822 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022a92:	00f70763          	beq	a4,a5,80022aa0 <stateen_C_test_1+0xec>
    80022a96:	4401                	li	s0,0
    TEST_END();
    80022a98:	0000b597          	auipc	a1,0xb
    80022a9c:	72058593          	addi	a1,a1,1824 # 8002e1b8 <__func__.0+0x2d0>
    80022aa0:	0000b517          	auipc	a0,0xb
    80022aa4:	7c050513          	addi	a0,a0,1984 # 8002e260 <__func__.0+0x378>
    80022aa8:	183080ef          	jal	8002b42a <printf>
    80022aac:	4511                	li	a0,4
    80022aae:	c5ade0ef          	jal	80000f08 <goto_priv>
    80022ab2:	d73de0ef          	jal	80001824 <reset_state>

}
    80022ab6:	60e2                	ld	ra,24(sp)
    80022ab8:	8522                	mv	a0,s0
    80022aba:	6442                	ld	s0,16(sp)
    80022abc:	64a2                	ld	s1,8(sp)
    80022abe:	6105                	addi	sp,sp,32
    80022ac0:	8082                	ret

0000000080022ac2 <stateen_C_test_2>:

bool stateen_C_test_2(){
    80022ac2:	1101                	addi	sp,sp,-32

    TEST_START();
    80022ac4:	0000b597          	auipc	a1,0xb
    80022ac8:	f0c58593          	addi	a1,a1,-244 # 8002d9d0 <__func__.35>
    80022acc:	0000b517          	auipc	a0,0xb
    80022ad0:	6fc50513          	addi	a0,a0,1788 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_2(){
    80022ad4:	ec06                	sd	ra,24(sp)
    80022ad6:	e822                	sd	s0,16(sp)
    80022ad8:	e426                	sd	s1,8(sp)
    TEST_START();
    80022ada:	151080ef          	jal	8002b42a <printf>
    80022ade:	4529                	li	a0,10
    80022ae0:	638070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80022ae4:	4511                	li	a0,4
    80022ae6:	c22de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022aea:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022aee:	60c0f073          	csrci	hstateen0,1

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器
    goto_priv(PRIV_VU);
    80022af2:	4501                	li	a0,0
    80022af4:	c14de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022af8:	b14de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    80022afc:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022b00:	d4ede0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022b04:	08200593          	li	a1,130
    80022b08:	00014617          	auipc	a2,0x14
    80022b0c:	e0060613          	addi	a2,a2,-512 # 80036908 <__func__.0+0x8a20>
    80022b10:	0000b517          	auipc	a0,0xb
    80022b14:	6d050513          	addi	a0,a0,1744 # 8002e1e0 <__func__.0+0x2f8>
    80022b18:	113080ef          	jal	8002b42a <printf>
    80022b1c:	00035797          	auipc	a5,0x35
    80022b20:	4f57c783          	lbu	a5,1269(a5) # 80058011 <excpt+0x1>
    80022b24:	00035497          	auipc	s1,0x35
    80022b28:	4ec48493          	addi	s1,s1,1260 # 80058010 <excpt>
    80022b2c:	0000b597          	auipc	a1,0xb
    80022b30:	68c58593          	addi	a1,a1,1676 # 8002e1b8 <__func__.0+0x2d0>
    80022b34:	cf89                	beqz	a5,80022b4e <stateen_C_test_2+0x8c>
    80022b36:	6498                	ld	a4,8(s1)
    80022b38:	47d9                	li	a5,22
    80022b3a:	0000b597          	auipc	a1,0xb
    80022b3e:	66e58593          	addi	a1,a1,1646 # 8002e1a8 <__func__.0+0x2c0>
    80022b42:	00f70663          	beq	a4,a5,80022b4e <stateen_C_test_2+0x8c>
    80022b46:	0000b597          	auipc	a1,0xb
    80022b4a:	67258593          	addi	a1,a1,1650 # 8002e1b8 <__func__.0+0x2d0>
    80022b4e:	0000b517          	auipc	a0,0xb
    80022b52:	6aa50513          	addi	a0,a0,1706 # 8002e1f8 <__func__.0+0x310>
    80022b56:	0d5080ef          	jal	8002b42a <printf>
    80022b5a:	00035797          	auipc	a5,0x35
    80022b5e:	4b77c783          	lbu	a5,1207(a5) # 80058011 <excpt+0x1>
    80022b62:	c789                	beqz	a5,80022b6c <stateen_C_test_2+0xaa>
    80022b64:	6498                	ld	a4,8(s1)
    80022b66:	47d9                	li	a5,22
    80022b68:	00f70c63          	beq	a4,a5,80022b80 <stateen_C_test_2+0xbe>
    80022b6c:	0000b517          	auipc	a0,0xb
    80022b70:	69450513          	addi	a0,a0,1684 # 8002e200 <__func__.0+0x318>
    80022b74:	0b7080ef          	jal	8002b42a <printf>
    80022b78:	02900513          	li	a0,41
    80022b7c:	59c070ef          	jal	8002a118 <putchar>
    80022b80:	4529                	li	a0,10
    80022b82:	596070ef          	jal	8002a118 <putchar>
    80022b86:	00035417          	auipc	s0,0x35
    80022b8a:	48b44403          	lbu	s0,1163(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80022b8e:	0000b597          	auipc	a1,0xb
    80022b92:	62a58593          	addi	a1,a1,1578 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022b96:	cc11                	beqz	s0,80022bb2 <stateen_C_test_2+0xf0>
    80022b98:	6498                	ld	a4,8(s1)
    80022b9a:	47d9                	li	a5,22
    TEST_END();
    80022b9c:	0000b597          	auipc	a1,0xb
    80022ba0:	60c58593          	addi	a1,a1,1548 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ba4:	00f70763          	beq	a4,a5,80022bb2 <stateen_C_test_2+0xf0>
    80022ba8:	4401                	li	s0,0
    TEST_END();
    80022baa:	0000b597          	auipc	a1,0xb
    80022bae:	60e58593          	addi	a1,a1,1550 # 8002e1b8 <__func__.0+0x2d0>
    80022bb2:	0000b517          	auipc	a0,0xb
    80022bb6:	6ae50513          	addi	a0,a0,1710 # 8002e260 <__func__.0+0x378>
    80022bba:	071080ef          	jal	8002b42a <printf>
    80022bbe:	4511                	li	a0,4
    80022bc0:	b48de0ef          	jal	80000f08 <goto_priv>
    80022bc4:	c61de0ef          	jal	80001824 <reset_state>

}
    80022bc8:	60e2                	ld	ra,24(sp)
    80022bca:	8522                	mv	a0,s0
    80022bcc:	6442                	ld	s0,16(sp)
    80022bce:	64a2                	ld	s1,8(sp)
    80022bd0:	6105                	addi	sp,sp,32
    80022bd2:	8082                	ret

0000000080022bd4 <stateen_C_test_3>:

bool stateen_C_test_3(){
    80022bd4:	1141                	addi	sp,sp,-16

    //当mstateen.C=0,m mode 可访问自定义寄存器

    TEST_START();
    80022bd6:	0000b597          	auipc	a1,0xb
    80022bda:	e1258593          	addi	a1,a1,-494 # 8002d9e8 <__func__.34>
    80022bde:	0000b517          	auipc	a0,0xb
    80022be2:	5ea50513          	addi	a0,a0,1514 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_3(){
    80022be6:	e406                	sd	ra,8(sp)
    80022be8:	e022                	sd	s0,0(sp)
    TEST_START();
    80022bea:	041080ef          	jal	8002b42a <printf>
    80022bee:	4529                	li	a0,10
    80022bf0:	528070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80022bf4:	4511                	li	a0,4
    80022bf6:	b12de0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022bfa:	30c0f073          	csrci	mstateen0,1
    goto_priv(PRIV_M);
    80022bfe:	4511                	li	a0,4
    80022c00:	b08de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022c04:	a08de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    80022c08:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022c0c:	c42de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022c10:	08200593          	li	a1,130
    80022c14:	00014617          	auipc	a2,0x14
    80022c18:	d4460613          	addi	a2,a2,-700 # 80036958 <__func__.0+0x8a70>
    80022c1c:	0000b517          	auipc	a0,0xb
    80022c20:	5c450513          	addi	a0,a0,1476 # 8002e1e0 <__func__.0+0x2f8>
    80022c24:	007080ef          	jal	8002b42a <printf>
    80022c28:	00035797          	auipc	a5,0x35
    80022c2c:	3e97c783          	lbu	a5,1001(a5) # 80058011 <excpt+0x1>
    80022c30:	0000b597          	auipc	a1,0xb
    80022c34:	57858593          	addi	a1,a1,1400 # 8002e1a8 <__func__.0+0x2c0>
    80022c38:	c789                	beqz	a5,80022c42 <stateen_C_test_3+0x6e>
    80022c3a:	0000b597          	auipc	a1,0xb
    80022c3e:	57e58593          	addi	a1,a1,1406 # 8002e1b8 <__func__.0+0x2d0>
    80022c42:	0000b517          	auipc	a0,0xb
    80022c46:	5b650513          	addi	a0,a0,1462 # 8002e1f8 <__func__.0+0x310>
    80022c4a:	7e0080ef          	jal	8002b42a <printf>
    80022c4e:	00035797          	auipc	a5,0x35
    80022c52:	3c37c783          	lbu	a5,963(a5) # 80058011 <excpt+0x1>
    80022c56:	e7a1                	bnez	a5,80022c9e <stateen_C_test_3+0xca>
    80022c58:	4529                	li	a0,10
    80022c5a:	4be070ef          	jal	8002a118 <putchar>
    80022c5e:	00035797          	auipc	a5,0x35
    80022c62:	3b37c783          	lbu	a5,947(a5) # 80058011 <excpt+0x1>
    80022c66:	e795                	bnez	a5,80022c92 <stateen_C_test_3+0xbe>
    80022c68:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80022c6a:	0000b597          	auipc	a1,0xb
    80022c6e:	53e58593          	addi	a1,a1,1342 # 8002e1a8 <__func__.0+0x2c0>
    80022c72:	0000b517          	auipc	a0,0xb
    80022c76:	5ee50513          	addi	a0,a0,1518 # 8002e260 <__func__.0+0x378>
    80022c7a:	7b0080ef          	jal	8002b42a <printf>
    80022c7e:	4511                	li	a0,4
    80022c80:	a88de0ef          	jal	80000f08 <goto_priv>
    80022c84:	ba1de0ef          	jal	80001824 <reset_state>

}
    80022c88:	60a2                	ld	ra,8(sp)
    80022c8a:	8522                	mv	a0,s0
    80022c8c:	6402                	ld	s0,0(sp)
    80022c8e:	0141                	addi	sp,sp,16
    80022c90:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022c92:	4401                	li	s0,0
    TEST_END();
    80022c94:	0000b597          	auipc	a1,0xb
    80022c98:	52458593          	addi	a1,a1,1316 # 8002e1b8 <__func__.0+0x2d0>
    80022c9c:	bfd9                	j	80022c72 <stateen_C_test_3+0x9e>
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022c9e:	0000b517          	auipc	a0,0xb
    80022ca2:	56250513          	addi	a0,a0,1378 # 8002e200 <__func__.0+0x318>
    80022ca6:	784080ef          	jal	8002b42a <printf>
    80022caa:	02900513          	li	a0,41
    80022cae:	46a070ef          	jal	8002a118 <putchar>
    80022cb2:	b75d                	j	80022c58 <stateen_C_test_3+0x84>

0000000080022cb4 <stateen_C_test_4>:

bool stateen_C_test_4(){
    80022cb4:	1101                	addi	sp,sp,-32

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器

    TEST_START();
    80022cb6:	0000b597          	auipc	a1,0xb
    80022cba:	d4a58593          	addi	a1,a1,-694 # 8002da00 <__func__.33>
    80022cbe:	0000b517          	auipc	a0,0xb
    80022cc2:	50a50513          	addi	a0,a0,1290 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_4(){
    80022cc6:	ec06                	sd	ra,24(sp)
    80022cc8:	e822                	sd	s0,16(sp)
    80022cca:	e426                	sd	s1,8(sp)
    TEST_START();
    80022ccc:	75e080ef          	jal	8002b42a <printf>
    80022cd0:	4529                	li	a0,10
    80022cd2:	446070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80022cd6:	4511                	li	a0,4
    80022cd8:	a30de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022cdc:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022ce0:	60c0f073          	csrci	hstateen0,1
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80022ce4:	30c025f3          	csrr	a1,mstateen0
    80022ce8:	00014517          	auipc	a0,0x14
    80022cec:	cb050513          	addi	a0,a0,-848 # 80036998 <__func__.0+0x8ab0>
    80022cf0:	73a080ef          	jal	8002b42a <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80022cf4:	60c025f3          	csrr	a1,hstateen0
    80022cf8:	00014517          	auipc	a0,0x14
    80022cfc:	cb050513          	addi	a0,a0,-848 # 800369a8 <__func__.0+0x8ac0>
    80022d00:	72a080ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    80022d04:	4509                	li	a0,2
    80022d06:	a02de0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022d0a:	902de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C4);
    80022d0e:	5c4027f3          	csrr	a5,0x5c4

    excpt_info();
    80022d12:	b3cde0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022d16:	08200593          	li	a1,130
    80022d1a:	00014617          	auipc	a2,0x14
    80022d1e:	c9e60613          	addi	a2,a2,-866 # 800369b8 <__func__.0+0x8ad0>
    80022d22:	0000b517          	auipc	a0,0xb
    80022d26:	4be50513          	addi	a0,a0,1214 # 8002e1e0 <__func__.0+0x2f8>
    80022d2a:	700080ef          	jal	8002b42a <printf>
    80022d2e:	00035797          	auipc	a5,0x35
    80022d32:	2e37c783          	lbu	a5,739(a5) # 80058011 <excpt+0x1>
    80022d36:	00035497          	auipc	s1,0x35
    80022d3a:	2da48493          	addi	s1,s1,730 # 80058010 <excpt>
    80022d3e:	0000b597          	auipc	a1,0xb
    80022d42:	47a58593          	addi	a1,a1,1146 # 8002e1b8 <__func__.0+0x2d0>
    80022d46:	cf89                	beqz	a5,80022d60 <stateen_C_test_4+0xac>
    80022d48:	6498                	ld	a4,8(s1)
    80022d4a:	47d9                	li	a5,22
    80022d4c:	0000b597          	auipc	a1,0xb
    80022d50:	45c58593          	addi	a1,a1,1116 # 8002e1a8 <__func__.0+0x2c0>
    80022d54:	00f70663          	beq	a4,a5,80022d60 <stateen_C_test_4+0xac>
    80022d58:	0000b597          	auipc	a1,0xb
    80022d5c:	46058593          	addi	a1,a1,1120 # 8002e1b8 <__func__.0+0x2d0>
    80022d60:	0000b517          	auipc	a0,0xb
    80022d64:	49850513          	addi	a0,a0,1176 # 8002e1f8 <__func__.0+0x310>
    80022d68:	6c2080ef          	jal	8002b42a <printf>
    80022d6c:	00035797          	auipc	a5,0x35
    80022d70:	2a57c783          	lbu	a5,677(a5) # 80058011 <excpt+0x1>
    80022d74:	c789                	beqz	a5,80022d7e <stateen_C_test_4+0xca>
    80022d76:	6498                	ld	a4,8(s1)
    80022d78:	47d9                	li	a5,22
    80022d7a:	00f70c63          	beq	a4,a5,80022d92 <stateen_C_test_4+0xde>
    80022d7e:	0000b517          	auipc	a0,0xb
    80022d82:	48250513          	addi	a0,a0,1154 # 8002e200 <__func__.0+0x318>
    80022d86:	6a4080ef          	jal	8002b42a <printf>
    80022d8a:	02900513          	li	a0,41
    80022d8e:	38a070ef          	jal	8002a118 <putchar>
    80022d92:	4529                	li	a0,10
    80022d94:	384070ef          	jal	8002a118 <putchar>
    80022d98:	00035417          	auipc	s0,0x35
    80022d9c:	27944403          	lbu	s0,633(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80022da0:	0000b597          	auipc	a1,0xb
    80022da4:	41858593          	addi	a1,a1,1048 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022da8:	cc11                	beqz	s0,80022dc4 <stateen_C_test_4+0x110>
    80022daa:	6498                	ld	a4,8(s1)
    80022dac:	47d9                	li	a5,22
    TEST_END();
    80022dae:	0000b597          	auipc	a1,0xb
    80022db2:	3fa58593          	addi	a1,a1,1018 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022db6:	00f70763          	beq	a4,a5,80022dc4 <stateen_C_test_4+0x110>
    80022dba:	4401                	li	s0,0
    TEST_END();
    80022dbc:	0000b597          	auipc	a1,0xb
    80022dc0:	3fc58593          	addi	a1,a1,1020 # 8002e1b8 <__func__.0+0x2d0>
    80022dc4:	0000b517          	auipc	a0,0xb
    80022dc8:	49c50513          	addi	a0,a0,1180 # 8002e260 <__func__.0+0x378>
    80022dcc:	65e080ef          	jal	8002b42a <printf>
    80022dd0:	4511                	li	a0,4
    80022dd2:	936de0ef          	jal	80000f08 <goto_priv>
    80022dd6:	a4fde0ef          	jal	80001824 <reset_state>

}
    80022dda:	60e2                	ld	ra,24(sp)
    80022ddc:	8522                	mv	a0,s0
    80022dde:	6442                	ld	s0,16(sp)
    80022de0:	64a2                	ld	s1,8(sp)
    80022de2:	6105                	addi	sp,sp,32
    80022de4:	8082                	ret

0000000080022de6 <stateen_C_test_5>:

bool stateen_C_test_5(){
    80022de6:	1101                	addi	sp,sp,-32

    //当mstateen.C=0,hs mode 不可访问自定义寄存器

    TEST_START();
    80022de8:	0000b597          	auipc	a1,0xb
    80022dec:	c3058593          	addi	a1,a1,-976 # 8002da18 <__func__.32>
    80022df0:	0000b517          	auipc	a0,0xb
    80022df4:	3d850513          	addi	a0,a0,984 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_5(){
    80022df8:	ec06                	sd	ra,24(sp)
    80022dfa:	e822                	sd	s0,16(sp)
    80022dfc:	e426                	sd	s1,8(sp)
    TEST_START();
    80022dfe:	62c080ef          	jal	8002b42a <printf>
    80022e02:	4529                	li	a0,10
    80022e04:	314070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80022e08:	4511                	li	a0,4
    80022e0a:	8fede0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022e0e:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HS);
    80022e12:	450d                	li	a0,3
    80022e14:	8f4de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022e18:	ff5dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    80022e1c:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022e20:	a2ede0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022e24:	08200593          	li	a1,130
    80022e28:	00014617          	auipc	a2,0x14
    80022e2c:	be060613          	addi	a2,a2,-1056 # 80036a08 <__func__.0+0x8b20>
    80022e30:	0000b517          	auipc	a0,0xb
    80022e34:	3b050513          	addi	a0,a0,944 # 8002e1e0 <__func__.0+0x2f8>
    80022e38:	5f2080ef          	jal	8002b42a <printf>
    80022e3c:	00035797          	auipc	a5,0x35
    80022e40:	1d57c783          	lbu	a5,469(a5) # 80058011 <excpt+0x1>
    80022e44:	00035497          	auipc	s1,0x35
    80022e48:	1cc48493          	addi	s1,s1,460 # 80058010 <excpt>
    80022e4c:	0000b597          	auipc	a1,0xb
    80022e50:	36c58593          	addi	a1,a1,876 # 8002e1b8 <__func__.0+0x2d0>
    80022e54:	cf89                	beqz	a5,80022e6e <stateen_C_test_5+0x88>
    80022e56:	6498                	ld	a4,8(s1)
    80022e58:	4789                	li	a5,2
    80022e5a:	0000b597          	auipc	a1,0xb
    80022e5e:	34e58593          	addi	a1,a1,846 # 8002e1a8 <__func__.0+0x2c0>
    80022e62:	00f70663          	beq	a4,a5,80022e6e <stateen_C_test_5+0x88>
    80022e66:	0000b597          	auipc	a1,0xb
    80022e6a:	35258593          	addi	a1,a1,850 # 8002e1b8 <__func__.0+0x2d0>
    80022e6e:	0000b517          	auipc	a0,0xb
    80022e72:	38a50513          	addi	a0,a0,906 # 8002e1f8 <__func__.0+0x310>
    80022e76:	5b4080ef          	jal	8002b42a <printf>
    80022e7a:	00035797          	auipc	a5,0x35
    80022e7e:	1977c783          	lbu	a5,407(a5) # 80058011 <excpt+0x1>
    80022e82:	c789                	beqz	a5,80022e8c <stateen_C_test_5+0xa6>
    80022e84:	6498                	ld	a4,8(s1)
    80022e86:	4789                	li	a5,2
    80022e88:	00f70c63          	beq	a4,a5,80022ea0 <stateen_C_test_5+0xba>
    80022e8c:	0000b517          	auipc	a0,0xb
    80022e90:	37450513          	addi	a0,a0,884 # 8002e200 <__func__.0+0x318>
    80022e94:	596080ef          	jal	8002b42a <printf>
    80022e98:	02900513          	li	a0,41
    80022e9c:	27c070ef          	jal	8002a118 <putchar>
    80022ea0:	4529                	li	a0,10
    80022ea2:	276070ef          	jal	8002a118 <putchar>
    80022ea6:	00035417          	auipc	s0,0x35
    80022eaa:	16b44403          	lbu	s0,363(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022eae:	0000b597          	auipc	a1,0xb
    80022eb2:	30a58593          	addi	a1,a1,778 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022eb6:	cc11                	beqz	s0,80022ed2 <stateen_C_test_5+0xec>
    80022eb8:	6498                	ld	a4,8(s1)
    80022eba:	4789                	li	a5,2
    TEST_END();
    80022ebc:	0000b597          	auipc	a1,0xb
    80022ec0:	2ec58593          	addi	a1,a1,748 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ec4:	00f70763          	beq	a4,a5,80022ed2 <stateen_C_test_5+0xec>
    80022ec8:	4401                	li	s0,0
    TEST_END();
    80022eca:	0000b597          	auipc	a1,0xb
    80022ece:	2ee58593          	addi	a1,a1,750 # 8002e1b8 <__func__.0+0x2d0>
    80022ed2:	0000b517          	auipc	a0,0xb
    80022ed6:	38e50513          	addi	a0,a0,910 # 8002e260 <__func__.0+0x378>
    80022eda:	550080ef          	jal	8002b42a <printf>
    80022ede:	4511                	li	a0,4
    80022ee0:	828de0ef          	jal	80000f08 <goto_priv>
    80022ee4:	941de0ef          	jal	80001824 <reset_state>

}
    80022ee8:	60e2                	ld	ra,24(sp)
    80022eea:	8522                	mv	a0,s0
    80022eec:	6442                	ld	s0,16(sp)
    80022eee:	64a2                	ld	s1,8(sp)
    80022ef0:	6105                	addi	sp,sp,32
    80022ef2:	8082                	ret

0000000080022ef4 <stateen_C_test_6>:


bool stateen_C_test_6(){
    80022ef4:	1141                	addi	sp,sp,-16

    TEST_START();
    80022ef6:	0000b597          	auipc	a1,0xb
    80022efa:	b3a58593          	addi	a1,a1,-1222 # 8002da30 <__func__.31>
    80022efe:	0000b517          	auipc	a0,0xb
    80022f02:	2ca50513          	addi	a0,a0,714 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_6(){
    80022f06:	e406                	sd	ra,8(sp)
    80022f08:	e022                	sd	s0,0(sp)
    TEST_START();
    80022f0a:	520080ef          	jal	8002b42a <printf>
    80022f0e:	4529                	li	a0,10
    80022f10:	208070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80022f14:	4511                	li	a0,4
    80022f16:	ff3dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1,v=0时,可访问自定义寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022f1a:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022f1e:	60c0f073          	csrci	hstateen0,1

    goto_priv(PRIV_HS);
    80022f22:	450d                	li	a0,3
    80022f24:	fe5dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f28:	ee5dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    80022f2c:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022f30:	91ede0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022f34:	08200593          	li	a1,130
    80022f38:	00014617          	auipc	a2,0x14
    80022f3c:	b2060613          	addi	a2,a2,-1248 # 80036a58 <__func__.0+0x8b70>
    80022f40:	0000b517          	auipc	a0,0xb
    80022f44:	2a050513          	addi	a0,a0,672 # 8002e1e0 <__func__.0+0x2f8>
    80022f48:	4e2080ef          	jal	8002b42a <printf>
    80022f4c:	00035797          	auipc	a5,0x35
    80022f50:	0c57c783          	lbu	a5,197(a5) # 80058011 <excpt+0x1>
    80022f54:	0000b597          	auipc	a1,0xb
    80022f58:	25458593          	addi	a1,a1,596 # 8002e1a8 <__func__.0+0x2c0>
    80022f5c:	c789                	beqz	a5,80022f66 <stateen_C_test_6+0x72>
    80022f5e:	0000b597          	auipc	a1,0xb
    80022f62:	25a58593          	addi	a1,a1,602 # 8002e1b8 <__func__.0+0x2d0>
    80022f66:	0000b517          	auipc	a0,0xb
    80022f6a:	29250513          	addi	a0,a0,658 # 8002e1f8 <__func__.0+0x310>
    80022f6e:	4bc080ef          	jal	8002b42a <printf>
    80022f72:	00035797          	auipc	a5,0x35
    80022f76:	09f7c783          	lbu	a5,159(a5) # 80058011 <excpt+0x1>
    80022f7a:	e7e9                	bnez	a5,80023044 <stateen_C_test_6+0x150>
    80022f7c:	4529                	li	a0,10
    80022f7e:	19a070ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

#endif

    goto_priv(PRIV_M);
    80022f82:	4511                	li	a0,4
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022f84:	00035417          	auipc	s0,0x35
    80022f88:	08d44403          	lbu	s0,141(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80022f8c:	f7ddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f90:	e7ddd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    80022f94:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022f98:	8b6de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80022f9c:	08200593          	li	a1,130
    80022fa0:	00014617          	auipc	a2,0x14
    80022fa4:	b0860613          	addi	a2,a2,-1272 # 80036aa8 <__func__.0+0x8bc0>
    80022fa8:	0000b517          	auipc	a0,0xb
    80022fac:	23850513          	addi	a0,a0,568 # 8002e1e0 <__func__.0+0x2f8>
    80022fb0:	47a080ef          	jal	8002b42a <printf>
    80022fb4:	00035797          	auipc	a5,0x35
    80022fb8:	05d7c783          	lbu	a5,93(a5) # 80058011 <excpt+0x1>
    80022fbc:	0000b597          	auipc	a1,0xb
    80022fc0:	1fc58593          	addi	a1,a1,508 # 8002e1b8 <__func__.0+0x2d0>
    80022fc4:	e789                	bnez	a5,80022fce <stateen_C_test_6+0xda>
    80022fc6:	0000b597          	auipc	a1,0xb
    80022fca:	1e258593          	addi	a1,a1,482 # 8002e1a8 <__func__.0+0x2c0>
    80022fce:	0000b517          	auipc	a0,0xb
    80022fd2:	22a50513          	addi	a0,a0,554 # 8002e1f8 <__func__.0+0x310>
    80022fd6:	454080ef          	jal	8002b42a <printf>
    80022fda:	00035797          	auipc	a5,0x35
    80022fde:	0377c783          	lbu	a5,55(a5) # 80058011 <excpt+0x1>
    80022fe2:	e7b1                	bnez	a5,8002302e <stateen_C_test_6+0x13a>
    80022fe4:	4529                	li	a0,10
    80022fe6:	132070ef          	jal	8002a118 <putchar>
    80022fea:	e815                	bnez	s0,8002301e <stateen_C_test_6+0x12a>
    80022fec:	00035797          	auipc	a5,0x35
    80022ff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    80022ff4:	c79d                	beqz	a5,80023022 <stateen_C_test_6+0x12e>
        excpt.triggered == false
    ); 

    TEST_END();
    80022ff6:	0000b597          	auipc	a1,0xb
    80022ffa:	1c258593          	addi	a1,a1,450 # 8002e1b8 <__func__.0+0x2d0>
    80022ffe:	0000b517          	auipc	a0,0xb
    80023002:	26250513          	addi	a0,a0,610 # 8002e260 <__func__.0+0x378>
    80023006:	424080ef          	jal	8002b42a <printf>
    8002300a:	4511                	li	a0,4
    8002300c:	efddd0ef          	jal	80000f08 <goto_priv>
    80023010:	815de0ef          	jal	80001824 <reset_state>

}
    80023014:	60a2                	ld	ra,8(sp)
    80023016:	8522                	mv	a0,s0
    80023018:	6402                	ld	s0,0(sp)
    8002301a:	0141                	addi	sp,sp,16
    8002301c:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    8002301e:	4401                	li	s0,0
    80023020:	bfd9                	j	80022ff6 <stateen_C_test_6+0x102>
    80023022:	4405                	li	s0,1
    TEST_END();
    80023024:	0000b597          	auipc	a1,0xb
    80023028:	18458593          	addi	a1,a1,388 # 8002e1a8 <__func__.0+0x2c0>
    8002302c:	bfc9                	j	80022ffe <stateen_C_test_6+0x10a>
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    8002302e:	0000b517          	auipc	a0,0xb
    80023032:	1d250513          	addi	a0,a0,466 # 8002e200 <__func__.0+0x318>
    80023036:	3f4080ef          	jal	8002b42a <printf>
    8002303a:	02900513          	li	a0,41
    8002303e:	0da070ef          	jal	8002a118 <putchar>
    80023042:	b74d                	j	80022fe4 <stateen_C_test_6+0xf0>
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80023044:	0000b517          	auipc	a0,0xb
    80023048:	1bc50513          	addi	a0,a0,444 # 8002e200 <__func__.0+0x318>
    8002304c:	3de080ef          	jal	8002b42a <printf>
    80023050:	02900513          	li	a0,41
    80023054:	0c4070ef          	jal	8002a118 <putchar>
    80023058:	b715                	j	80022f7c <stateen_C_test_6+0x88>

000000008002305a <stateen_C_test_7>:


bool stateen_C_test_7(){
    8002305a:	1141                	addi	sp,sp,-16

    TEST_START();
    8002305c:	0000b597          	auipc	a1,0xb
    80023060:	9ec58593          	addi	a1,a1,-1556 # 8002da48 <__func__.30>
    80023064:	0000b517          	auipc	a0,0xb
    80023068:	16450513          	addi	a0,a0,356 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_C_test_7(){
    8002306c:	e406                	sd	ra,8(sp)
    8002306e:	e022                	sd	s0,0(sp)
    TEST_START();
    80023070:	3ba080ef          	jal	8002b42a <printf>
    80023074:	4529                	li	a0,10
    80023076:	0a2070ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002307a:	4511                	li	a0,4
    8002307c:	e8ddd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1 hstateen.C=1,v=1 时可访问自定义寄存器(vs,vu自定义寄存器是哪些)
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80023080:	30c0e073          	csrsi	mstateen0,1
    CSRS(CSR_HSTATEEN0 , MSTATEEN_C);
    80023084:	60c0e073          	csrsi	hstateen0,1

    goto_priv(PRIV_VS);
    80023088:	4509                	li	a0,2
    8002308a:	e7fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002308e:	d7fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    80023092:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80023096:	fb9dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002309a:	08200593          	li	a1,130
    8002309e:	00014617          	auipc	a2,0x14
    800230a2:	a5a60613          	addi	a2,a2,-1446 # 80036af8 <__func__.0+0x8c10>
    800230a6:	0000b517          	auipc	a0,0xb
    800230aa:	13a50513          	addi	a0,a0,314 # 8002e1e0 <__func__.0+0x2f8>
    800230ae:	37c080ef          	jal	8002b42a <printf>
    800230b2:	00035797          	auipc	a5,0x35
    800230b6:	f5f7c783          	lbu	a5,-161(a5) # 80058011 <excpt+0x1>
    800230ba:	0000b597          	auipc	a1,0xb
    800230be:	0ee58593          	addi	a1,a1,238 # 8002e1a8 <__func__.0+0x2c0>
    800230c2:	c789                	beqz	a5,800230cc <stateen_C_test_7+0x72>
    800230c4:	0000b597          	auipc	a1,0xb
    800230c8:	0f458593          	addi	a1,a1,244 # 8002e1b8 <__func__.0+0x2d0>
    800230cc:	0000b517          	auipc	a0,0xb
    800230d0:	12c50513          	addi	a0,a0,300 # 8002e1f8 <__func__.0+0x310>
    800230d4:	356080ef          	jal	8002b42a <printf>
    800230d8:	00035797          	auipc	a5,0x35
    800230dc:	f397c783          	lbu	a5,-199(a5) # 80058011 <excpt+0x1>
    800230e0:	e7e9                	bnez	a5,800231aa <stateen_C_test_7+0x150>
    800230e2:	4529                	li	a0,10
    800230e4:	034070ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800230e8:	4501                	li	a0,0
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800230ea:	00035417          	auipc	s0,0x35
    800230ee:	f2744403          	lbu	s0,-217(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VU);
    800230f2:	e17dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800230f6:	d17dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    800230fa:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    800230fe:	f51dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023102:	08200593          	li	a1,130
    80023106:	00014617          	auipc	a2,0x14
    8002310a:	a4260613          	addi	a2,a2,-1470 # 80036b48 <__func__.0+0x8c60>
    8002310e:	0000b517          	auipc	a0,0xb
    80023112:	0d250513          	addi	a0,a0,210 # 8002e1e0 <__func__.0+0x2f8>
    80023116:	314080ef          	jal	8002b42a <printf>
    8002311a:	00035797          	auipc	a5,0x35
    8002311e:	ef77c783          	lbu	a5,-265(a5) # 80058011 <excpt+0x1>
    80023122:	0000b597          	auipc	a1,0xb
    80023126:	09658593          	addi	a1,a1,150 # 8002e1b8 <__func__.0+0x2d0>
    8002312a:	e789                	bnez	a5,80023134 <stateen_C_test_7+0xda>
    8002312c:	0000b597          	auipc	a1,0xb
    80023130:	07c58593          	addi	a1,a1,124 # 8002e1a8 <__func__.0+0x2c0>
    80023134:	0000b517          	auipc	a0,0xb
    80023138:	0c450513          	addi	a0,a0,196 # 8002e1f8 <__func__.0+0x310>
    8002313c:	2ee080ef          	jal	8002b42a <printf>
    80023140:	00035797          	auipc	a5,0x35
    80023144:	ed17c783          	lbu	a5,-303(a5) # 80058011 <excpt+0x1>
    80023148:	e7b1                	bnez	a5,80023194 <stateen_C_test_7+0x13a>
    8002314a:	4529                	li	a0,10
    8002314c:	7cd060ef          	jal	8002a118 <putchar>
    80023150:	e815                	bnez	s0,80023184 <stateen_C_test_7+0x12a>
    80023152:	00035797          	auipc	a5,0x35
    80023156:	ebf7c783          	lbu	a5,-321(a5) # 80058011 <excpt+0x1>
    8002315a:	c79d                	beqz	a5,80023188 <stateen_C_test_7+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    8002315c:	0000b597          	auipc	a1,0xb
    80023160:	05c58593          	addi	a1,a1,92 # 8002e1b8 <__func__.0+0x2d0>
    80023164:	0000b517          	auipc	a0,0xb
    80023168:	0fc50513          	addi	a0,a0,252 # 8002e260 <__func__.0+0x378>
    8002316c:	2be080ef          	jal	8002b42a <printf>
    80023170:	4511                	li	a0,4
    80023172:	d97dd0ef          	jal	80000f08 <goto_priv>
    80023176:	eaede0ef          	jal	80001824 <reset_state>
}
    8002317a:	60a2                	ld	ra,8(sp)
    8002317c:	8522                	mv	a0,s0
    8002317e:	6402                	ld	s0,0(sp)
    80023180:	0141                	addi	sp,sp,16
    80023182:	8082                	ret
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023184:	4401                	li	s0,0
    80023186:	bfd9                	j	8002315c <stateen_C_test_7+0x102>
    80023188:	4405                	li	s0,1
    TEST_END();
    8002318a:	0000b597          	auipc	a1,0xb
    8002318e:	01e58593          	addi	a1,a1,30 # 8002e1a8 <__func__.0+0x2c0>
    80023192:	bfc9                	j	80023164 <stateen_C_test_7+0x10a>
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023194:	0000b517          	auipc	a0,0xb
    80023198:	06c50513          	addi	a0,a0,108 # 8002e200 <__func__.0+0x318>
    8002319c:	28e080ef          	jal	8002b42a <printf>
    800231a0:	02900513          	li	a0,41
    800231a4:	775060ef          	jal	8002a118 <putchar>
    800231a8:	b74d                	j	8002314a <stateen_C_test_7+0xf0>
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800231aa:	0000b517          	auipc	a0,0xb
    800231ae:	05650513          	addi	a0,a0,86 # 8002e200 <__func__.0+0x318>
    800231b2:	278080ef          	jal	8002b42a <printf>
    800231b6:	02900513          	li	a0,41
    800231ba:	75f060ef          	jal	8002a118 <putchar>
    800231be:	b715                	j	800230e2 <stateen_C_test_7+0x88>

00000000800231c0 <stateen_IMSIC_test_1>:

//----



bool stateen_IMSIC_test_1(){
    800231c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800231c2:	0000b597          	auipc	a1,0xb
    800231c6:	89e58593          	addi	a1,a1,-1890 # 8002da60 <__func__.29>
    800231ca:	0000b517          	auipc	a0,0xb
    800231ce:	ffe50513          	addi	a0,a0,-2 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_1(){
    800231d2:	ec06                	sd	ra,24(sp)
    800231d4:	e822                	sd	s0,16(sp)
    800231d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800231d8:	252080ef          	jal	8002b42a <printf>
    800231dc:	4529                	li	a0,10
    800231de:	73b060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800231e2:	4511                	li	a0,4
    800231e4:	d25dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=0,hu mode 不可访问stopei、vstopei寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800231e8:	4785                	li	a5,1
    800231ea:	17ea                	slli	a5,a5,0x3a
    800231ec:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    800231f0:	4505                	li	a0,1
    800231f2:	d17dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800231f6:	c17dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800231fa:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800231fe:	e51dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    80023202:	08200593          	li	a1,130
    80023206:	00014617          	auipc	a2,0x14
    8002320a:	99260613          	addi	a2,a2,-1646 # 80036b98 <__func__.0+0x8cb0>
    8002320e:	0000b517          	auipc	a0,0xb
    80023212:	fd250513          	addi	a0,a0,-46 # 8002e1e0 <__func__.0+0x2f8>
    80023216:	214080ef          	jal	8002b42a <printf>
    8002321a:	00035797          	auipc	a5,0x35
    8002321e:	df77c783          	lbu	a5,-521(a5) # 80058011 <excpt+0x1>
    80023222:	00035497          	auipc	s1,0x35
    80023226:	dee48493          	addi	s1,s1,-530 # 80058010 <excpt>
    8002322a:	0000b597          	auipc	a1,0xb
    8002322e:	f8e58593          	addi	a1,a1,-114 # 8002e1b8 <__func__.0+0x2d0>
    80023232:	cf89                	beqz	a5,8002324c <stateen_IMSIC_test_1+0x8c>
    80023234:	6498                	ld	a4,8(s1)
    80023236:	4789                	li	a5,2
    80023238:	0000b597          	auipc	a1,0xb
    8002323c:	f7058593          	addi	a1,a1,-144 # 8002e1a8 <__func__.0+0x2c0>
    80023240:	00f70663          	beq	a4,a5,8002324c <stateen_IMSIC_test_1+0x8c>
    80023244:	0000b597          	auipc	a1,0xb
    80023248:	f7458593          	addi	a1,a1,-140 # 8002e1b8 <__func__.0+0x2d0>
    8002324c:	0000b517          	auipc	a0,0xb
    80023250:	fac50513          	addi	a0,a0,-84 # 8002e1f8 <__func__.0+0x310>
    80023254:	1d6080ef          	jal	8002b42a <printf>
    80023258:	00035797          	auipc	a5,0x35
    8002325c:	db97c783          	lbu	a5,-583(a5) # 80058011 <excpt+0x1>
    80023260:	c789                	beqz	a5,8002326a <stateen_IMSIC_test_1+0xaa>
    80023262:	6498                	ld	a4,8(s1)
    80023264:	4789                	li	a5,2
    80023266:	00f70c63          	beq	a4,a5,8002327e <stateen_IMSIC_test_1+0xbe>
    8002326a:	0000b517          	auipc	a0,0xb
    8002326e:	f9650513          	addi	a0,a0,-106 # 8002e200 <__func__.0+0x318>
    80023272:	1b8080ef          	jal	8002b42a <printf>
    80023276:	02900513          	li	a0,41
    8002327a:	69f060ef          	jal	8002a118 <putchar>
    8002327e:	4529                	li	a0,10
    80023280:	699060ef          	jal	8002a118 <putchar>
    80023284:	00035797          	auipc	a5,0x35
    80023288:	d8d7c783          	lbu	a5,-627(a5) # 80058011 <excpt+0x1>
    8002328c:	4401                	li	s0,0
    8002328e:	c789                	beqz	a5,80023298 <stateen_IMSIC_test_1+0xd8>
    80023290:	6480                	ld	s0,8(s1)
    80023292:	1479                	addi	s0,s0,-2
    80023294:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80023298:	4505                	li	a0,1
    8002329a:	c6fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002329e:	b6fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800232a2:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800232a6:	da9dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800232aa:	08200593          	li	a1,130
    800232ae:	00014617          	auipc	a2,0x14
    800232b2:	93a60613          	addi	a2,a2,-1734 # 80036be8 <__func__.0+0x8d00>
    800232b6:	0000b517          	auipc	a0,0xb
    800232ba:	f2a50513          	addi	a0,a0,-214 # 8002e1e0 <__func__.0+0x2f8>
    800232be:	16c080ef          	jal	8002b42a <printf>
    800232c2:	00035797          	auipc	a5,0x35
    800232c6:	d4f7c783          	lbu	a5,-689(a5) # 80058011 <excpt+0x1>
    800232ca:	0000b597          	auipc	a1,0xb
    800232ce:	eee58593          	addi	a1,a1,-274 # 8002e1b8 <__func__.0+0x2d0>
    800232d2:	cf89                	beqz	a5,800232ec <stateen_IMSIC_test_1+0x12c>
    800232d4:	6498                	ld	a4,8(s1)
    800232d6:	4789                	li	a5,2
    800232d8:	0000b597          	auipc	a1,0xb
    800232dc:	ed058593          	addi	a1,a1,-304 # 8002e1a8 <__func__.0+0x2c0>
    800232e0:	00f70663          	beq	a4,a5,800232ec <stateen_IMSIC_test_1+0x12c>
    800232e4:	0000b597          	auipc	a1,0xb
    800232e8:	ed458593          	addi	a1,a1,-300 # 8002e1b8 <__func__.0+0x2d0>
    800232ec:	0000b517          	auipc	a0,0xb
    800232f0:	f0c50513          	addi	a0,a0,-244 # 8002e1f8 <__func__.0+0x310>
    800232f4:	136080ef          	jal	8002b42a <printf>
    800232f8:	00035797          	auipc	a5,0x35
    800232fc:	d197c783          	lbu	a5,-743(a5) # 80058011 <excpt+0x1>
    80023300:	c789                	beqz	a5,8002330a <stateen_IMSIC_test_1+0x14a>
    80023302:	6498                	ld	a4,8(s1)
    80023304:	4789                	li	a5,2
    80023306:	00f70c63          	beq	a4,a5,8002331e <stateen_IMSIC_test_1+0x15e>
    8002330a:	0000b517          	auipc	a0,0xb
    8002330e:	ef650513          	addi	a0,a0,-266 # 8002e200 <__func__.0+0x318>
    80023312:	118080ef          	jal	8002b42a <printf>
    80023316:	02900513          	li	a0,41
    8002331a:	5ff060ef          	jal	8002a118 <putchar>
    8002331e:	4529                	li	a0,10
    80023320:	5f9060ef          	jal	8002a118 <putchar>
    80023324:	c015                	beqz	s0,80023348 <stateen_IMSIC_test_1+0x188>
    80023326:	00035417          	auipc	s0,0x35
    8002332a:	ceb44403          	lbu	s0,-789(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8002332e:	0000b597          	auipc	a1,0xb
    80023332:	e8a58593          	addi	a1,a1,-374 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023336:	cc11                	beqz	s0,80023352 <stateen_IMSIC_test_1+0x192>
    80023338:	6498                	ld	a4,8(s1)
    8002333a:	4789                	li	a5,2
    TEST_END();
    8002333c:	0000b597          	auipc	a1,0xb
    80023340:	e6c58593          	addi	a1,a1,-404 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023344:	00f70763          	beq	a4,a5,80023352 <stateen_IMSIC_test_1+0x192>
    80023348:	4401                	li	s0,0
    TEST_END();
    8002334a:	0000b597          	auipc	a1,0xb
    8002334e:	e6e58593          	addi	a1,a1,-402 # 8002e1b8 <__func__.0+0x2d0>
    80023352:	0000b517          	auipc	a0,0xb
    80023356:	f0e50513          	addi	a0,a0,-242 # 8002e260 <__func__.0+0x378>
    8002335a:	0d0080ef          	jal	8002b42a <printf>
    8002335e:	4511                	li	a0,4
    80023360:	ba9dd0ef          	jal	80000f08 <goto_priv>
    80023364:	cc0de0ef          	jal	80001824 <reset_state>

}
    80023368:	60e2                	ld	ra,24(sp)
    8002336a:	8522                	mv	a0,s0
    8002336c:	6442                	ld	s0,16(sp)
    8002336e:	64a2                	ld	s1,8(sp)
    80023370:	6105                	addi	sp,sp,32
    80023372:	8082                	ret

0000000080023374 <stateen_IMSIC_test_2>:

bool stateen_IMSIC_test_2(){
    80023374:	1101                	addi	sp,sp,-32

    TEST_START();
    80023376:	0000a597          	auipc	a1,0xa
    8002337a:	70258593          	addi	a1,a1,1794 # 8002da78 <__func__.28>
    8002337e:	0000b517          	auipc	a0,0xb
    80023382:	e4a50513          	addi	a0,a0,-438 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_2(){
    80023386:	ec06                	sd	ra,24(sp)
    80023388:	e822                	sd	s0,16(sp)
    8002338a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002338c:	09e080ef          	jal	8002b42a <printf>
    80023390:	4529                	li	a0,10
    80023392:	587060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80023396:	4511                	li	a0,4
    80023398:	b71dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    8002339c:	4785                	li	a5,1
    8002339e:	17ea                	slli	a5,a5,0x3a
    800233a0:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800233a4:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时,不可访问stopei、vstopei寄存器
    goto_priv(PRIV_VU);
    800233a8:	4501                	li	a0,0
    800233aa:	b5fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800233ae:	a5fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800233b2:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800233b6:	c99dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800233ba:	08200593          	li	a1,130
    800233be:	00014617          	auipc	a2,0x14
    800233c2:	87a60613          	addi	a2,a2,-1926 # 80036c38 <__func__.0+0x8d50>
    800233c6:	0000b517          	auipc	a0,0xb
    800233ca:	e1a50513          	addi	a0,a0,-486 # 8002e1e0 <__func__.0+0x2f8>
    800233ce:	05c080ef          	jal	8002b42a <printf>
    800233d2:	00035797          	auipc	a5,0x35
    800233d6:	c3f7c783          	lbu	a5,-961(a5) # 80058011 <excpt+0x1>
    800233da:	00035497          	auipc	s1,0x35
    800233de:	c3648493          	addi	s1,s1,-970 # 80058010 <excpt>
    800233e2:	0000b597          	auipc	a1,0xb
    800233e6:	dd658593          	addi	a1,a1,-554 # 8002e1b8 <__func__.0+0x2d0>
    800233ea:	cf89                	beqz	a5,80023404 <stateen_IMSIC_test_2+0x90>
    800233ec:	6498                	ld	a4,8(s1)
    800233ee:	47d9                	li	a5,22
    800233f0:	0000b597          	auipc	a1,0xb
    800233f4:	db858593          	addi	a1,a1,-584 # 8002e1a8 <__func__.0+0x2c0>
    800233f8:	00f70663          	beq	a4,a5,80023404 <stateen_IMSIC_test_2+0x90>
    800233fc:	0000b597          	auipc	a1,0xb
    80023400:	dbc58593          	addi	a1,a1,-580 # 8002e1b8 <__func__.0+0x2d0>
    80023404:	0000b517          	auipc	a0,0xb
    80023408:	df450513          	addi	a0,a0,-524 # 8002e1f8 <__func__.0+0x310>
    8002340c:	01e080ef          	jal	8002b42a <printf>
    80023410:	00035797          	auipc	a5,0x35
    80023414:	c017c783          	lbu	a5,-1023(a5) # 80058011 <excpt+0x1>
    80023418:	c789                	beqz	a5,80023422 <stateen_IMSIC_test_2+0xae>
    8002341a:	6498                	ld	a4,8(s1)
    8002341c:	47d9                	li	a5,22
    8002341e:	00f70c63          	beq	a4,a5,80023436 <stateen_IMSIC_test_2+0xc2>
    80023422:	0000b517          	auipc	a0,0xb
    80023426:	dde50513          	addi	a0,a0,-546 # 8002e200 <__func__.0+0x318>
    8002342a:	000080ef          	jal	8002b42a <printf>
    8002342e:	02900513          	li	a0,41
    80023432:	4e7060ef          	jal	8002a118 <putchar>
    80023436:	4529                	li	a0,10
    80023438:	4e1060ef          	jal	8002a118 <putchar>
    8002343c:	00035797          	auipc	a5,0x35
    80023440:	bd57c783          	lbu	a5,-1067(a5) # 80058011 <excpt+0x1>
    80023444:	4401                	li	s0,0
    80023446:	c789                	beqz	a5,80023450 <stateen_IMSIC_test_2+0xdc>
    80023448:	6480                	ld	s0,8(s1)
    8002344a:	1429                	addi	s0,s0,-22
    8002344c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80023450:	4501                	li	a0,0
    80023452:	ab7dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023456:	9b7dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    8002345a:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002345e:	bf1dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023462:	08200593          	li	a1,130
    80023466:	00014617          	auipc	a2,0x14
    8002346a:	82a60613          	addi	a2,a2,-2006 # 80036c90 <__func__.0+0x8da8>
    8002346e:	0000b517          	auipc	a0,0xb
    80023472:	d7250513          	addi	a0,a0,-654 # 8002e1e0 <__func__.0+0x2f8>
    80023476:	7b5070ef          	jal	8002b42a <printf>
    8002347a:	00035797          	auipc	a5,0x35
    8002347e:	b977c783          	lbu	a5,-1129(a5) # 80058011 <excpt+0x1>
    80023482:	0000b597          	auipc	a1,0xb
    80023486:	d3658593          	addi	a1,a1,-714 # 8002e1b8 <__func__.0+0x2d0>
    8002348a:	cf89                	beqz	a5,800234a4 <stateen_IMSIC_test_2+0x130>
    8002348c:	6498                	ld	a4,8(s1)
    8002348e:	47d9                	li	a5,22
    80023490:	0000b597          	auipc	a1,0xb
    80023494:	d1858593          	addi	a1,a1,-744 # 8002e1a8 <__func__.0+0x2c0>
    80023498:	00f70663          	beq	a4,a5,800234a4 <stateen_IMSIC_test_2+0x130>
    8002349c:	0000b597          	auipc	a1,0xb
    800234a0:	d1c58593          	addi	a1,a1,-740 # 8002e1b8 <__func__.0+0x2d0>
    800234a4:	0000b517          	auipc	a0,0xb
    800234a8:	d5450513          	addi	a0,a0,-684 # 8002e1f8 <__func__.0+0x310>
    800234ac:	77f070ef          	jal	8002b42a <printf>
    800234b0:	00035797          	auipc	a5,0x35
    800234b4:	b617c783          	lbu	a5,-1183(a5) # 80058011 <excpt+0x1>
    800234b8:	c789                	beqz	a5,800234c2 <stateen_IMSIC_test_2+0x14e>
    800234ba:	6498                	ld	a4,8(s1)
    800234bc:	47d9                	li	a5,22
    800234be:	00f70c63          	beq	a4,a5,800234d6 <stateen_IMSIC_test_2+0x162>
    800234c2:	0000b517          	auipc	a0,0xb
    800234c6:	d3e50513          	addi	a0,a0,-706 # 8002e200 <__func__.0+0x318>
    800234ca:	761070ef          	jal	8002b42a <printf>
    800234ce:	02900513          	li	a0,41
    800234d2:	447060ef          	jal	8002a118 <putchar>
    800234d6:	4529                	li	a0,10
    800234d8:	441060ef          	jal	8002a118 <putchar>
    800234dc:	c015                	beqz	s0,80023500 <stateen_IMSIC_test_2+0x18c>
    800234de:	00035417          	auipc	s0,0x35
    800234e2:	b3344403          	lbu	s0,-1229(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800234e6:	0000b597          	auipc	a1,0xb
    800234ea:	cd258593          	addi	a1,a1,-814 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800234ee:	cc11                	beqz	s0,8002350a <stateen_IMSIC_test_2+0x196>
    800234f0:	6498                	ld	a4,8(s1)
    800234f2:	47d9                	li	a5,22
    TEST_END();
    800234f4:	0000b597          	auipc	a1,0xb
    800234f8:	cb458593          	addi	a1,a1,-844 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800234fc:	00f70763          	beq	a4,a5,8002350a <stateen_IMSIC_test_2+0x196>
    80023500:	4401                	li	s0,0
    TEST_END();
    80023502:	0000b597          	auipc	a1,0xb
    80023506:	cb658593          	addi	a1,a1,-842 # 8002e1b8 <__func__.0+0x2d0>
    8002350a:	0000b517          	auipc	a0,0xb
    8002350e:	d5650513          	addi	a0,a0,-682 # 8002e260 <__func__.0+0x378>
    80023512:	719070ef          	jal	8002b42a <printf>
    80023516:	4511                	li	a0,4
    80023518:	9f1dd0ef          	jal	80000f08 <goto_priv>
    8002351c:	b08de0ef          	jal	80001824 <reset_state>

}
    80023520:	60e2                	ld	ra,24(sp)
    80023522:	8522                	mv	a0,s0
    80023524:	6442                	ld	s0,16(sp)
    80023526:	64a2                	ld	s1,8(sp)
    80023528:	6105                	addi	sp,sp,32
    8002352a:	8082                	ret

000000008002352c <stateen_IMSIC_test_3>:

bool stateen_IMSIC_test_3(){
    8002352c:	1141                	addi	sp,sp,-16

    //当mstateen.IMSIC=0,m mode 可访问stopei、vstopei寄存器

    TEST_START();
    8002352e:	0000a597          	auipc	a1,0xa
    80023532:	56258593          	addi	a1,a1,1378 # 8002da90 <__func__.27>
    80023536:	0000b517          	auipc	a0,0xb
    8002353a:	c9250513          	addi	a0,a0,-878 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_3(){
    8002353e:	e406                	sd	ra,8(sp)
    80023540:	e022                	sd	s0,0(sp)
    TEST_START();
    80023542:	6e9070ef          	jal	8002b42a <printf>
    80023546:	4529                	li	a0,10
    80023548:	3d1060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002354c:	4511                	li	a0,4
    8002354e:	9bbdd0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023552:	4785                	li	a5,1
    80023554:	17ea                	slli	a5,a5,0x3a
    80023556:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002355a:	4511                	li	a0,4
    8002355c:	9addd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023560:	8addd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023564:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023568:	ae7dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    8002356c:	08200593          	li	a1,130
    80023570:	00013617          	auipc	a2,0x13
    80023574:	77860613          	addi	a2,a2,1912 # 80036ce8 <__func__.0+0x8e00>
    80023578:	0000b517          	auipc	a0,0xb
    8002357c:	c6850513          	addi	a0,a0,-920 # 8002e1e0 <__func__.0+0x2f8>
    80023580:	6ab070ef          	jal	8002b42a <printf>
    80023584:	00035797          	auipc	a5,0x35
    80023588:	a8d7c783          	lbu	a5,-1395(a5) # 80058011 <excpt+0x1>
    8002358c:	0000b597          	auipc	a1,0xb
    80023590:	c1c58593          	addi	a1,a1,-996 # 8002e1a8 <__func__.0+0x2c0>
    80023594:	c789                	beqz	a5,8002359e <stateen_IMSIC_test_3+0x72>
    80023596:	0000b597          	auipc	a1,0xb
    8002359a:	c2258593          	addi	a1,a1,-990 # 8002e1b8 <__func__.0+0x2d0>
    8002359e:	0000b517          	auipc	a0,0xb
    800235a2:	c5a50513          	addi	a0,a0,-934 # 8002e1f8 <__func__.0+0x310>
    800235a6:	685070ef          	jal	8002b42a <printf>
    800235aa:	00035797          	auipc	a5,0x35
    800235ae:	a677c783          	lbu	a5,-1433(a5) # 80058011 <excpt+0x1>
    800235b2:	e7e9                	bnez	a5,8002367c <stateen_IMSIC_test_3+0x150>
    800235b4:	4529                	li	a0,10
    800235b6:	363060ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800235ba:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800235bc:	00035417          	auipc	s0,0x35
    800235c0:	a5544403          	lbu	s0,-1451(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800235c4:	945dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800235c8:	845dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800235cc:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800235d0:	a7fdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800235d4:	08200593          	li	a1,130
    800235d8:	00013617          	auipc	a2,0x13
    800235dc:	75060613          	addi	a2,a2,1872 # 80036d28 <__func__.0+0x8e40>
    800235e0:	0000b517          	auipc	a0,0xb
    800235e4:	c0050513          	addi	a0,a0,-1024 # 8002e1e0 <__func__.0+0x2f8>
    800235e8:	643070ef          	jal	8002b42a <printf>
    800235ec:	00035797          	auipc	a5,0x35
    800235f0:	a257c783          	lbu	a5,-1499(a5) # 80058011 <excpt+0x1>
    800235f4:	0000b597          	auipc	a1,0xb
    800235f8:	bc458593          	addi	a1,a1,-1084 # 8002e1b8 <__func__.0+0x2d0>
    800235fc:	e789                	bnez	a5,80023606 <stateen_IMSIC_test_3+0xda>
    800235fe:	0000b597          	auipc	a1,0xb
    80023602:	baa58593          	addi	a1,a1,-1110 # 8002e1a8 <__func__.0+0x2c0>
    80023606:	0000b517          	auipc	a0,0xb
    8002360a:	bf250513          	addi	a0,a0,-1038 # 8002e1f8 <__func__.0+0x310>
    8002360e:	61d070ef          	jal	8002b42a <printf>
    80023612:	00035797          	auipc	a5,0x35
    80023616:	9ff7c783          	lbu	a5,-1537(a5) # 80058011 <excpt+0x1>
    8002361a:	e7b1                	bnez	a5,80023666 <stateen_IMSIC_test_3+0x13a>
    8002361c:	4529                	li	a0,10
    8002361e:	2fb060ef          	jal	8002a118 <putchar>
    80023622:	e815                	bnez	s0,80023656 <stateen_IMSIC_test_3+0x12a>
    80023624:	00035797          	auipc	a5,0x35
    80023628:	9ed7c783          	lbu	a5,-1555(a5) # 80058011 <excpt+0x1>
    8002362c:	c79d                	beqz	a5,8002365a <stateen_IMSIC_test_3+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    8002362e:	0000b597          	auipc	a1,0xb
    80023632:	b8a58593          	addi	a1,a1,-1142 # 8002e1b8 <__func__.0+0x2d0>
    80023636:	0000b517          	auipc	a0,0xb
    8002363a:	c2a50513          	addi	a0,a0,-982 # 8002e260 <__func__.0+0x378>
    8002363e:	5ed070ef          	jal	8002b42a <printf>
    80023642:	4511                	li	a0,4
    80023644:	8c5dd0ef          	jal	80000f08 <goto_priv>
    80023648:	9dcde0ef          	jal	80001824 <reset_state>

}
    8002364c:	60a2                	ld	ra,8(sp)
    8002364e:	8522                	mv	a0,s0
    80023650:	6402                	ld	s0,0(sp)
    80023652:	0141                	addi	sp,sp,16
    80023654:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023656:	4401                	li	s0,0
    80023658:	bfd9                	j	8002362e <stateen_IMSIC_test_3+0x102>
    8002365a:	4405                	li	s0,1
    TEST_END();
    8002365c:	0000b597          	auipc	a1,0xb
    80023660:	b4c58593          	addi	a1,a1,-1204 # 8002e1a8 <__func__.0+0x2c0>
    80023664:	bfc9                	j	80023636 <stateen_IMSIC_test_3+0x10a>
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023666:	0000b517          	auipc	a0,0xb
    8002366a:	b9a50513          	addi	a0,a0,-1126 # 8002e200 <__func__.0+0x318>
    8002366e:	5bd070ef          	jal	8002b42a <printf>
    80023672:	02900513          	li	a0,41
    80023676:	2a3060ef          	jal	8002a118 <putchar>
    8002367a:	b74d                	j	8002361c <stateen_IMSIC_test_3+0xf0>
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    8002367c:	0000b517          	auipc	a0,0xb
    80023680:	b8450513          	addi	a0,a0,-1148 # 8002e200 <__func__.0+0x318>
    80023684:	5a7070ef          	jal	8002b42a <printf>
    80023688:	02900513          	li	a0,41
    8002368c:	28d060ef          	jal	8002a118 <putchar>
    80023690:	b715                	j	800235b4 <stateen_IMSIC_test_3+0x88>

0000000080023692 <stateen_IMSIC_test_4>:

bool stateen_IMSIC_test_4(){
    80023692:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时不可访问stopei、vstopei寄存器

    TEST_START();
    80023694:	0000a597          	auipc	a1,0xa
    80023698:	41458593          	addi	a1,a1,1044 # 8002daa8 <__func__.26>
    8002369c:	0000b517          	auipc	a0,0xb
    800236a0:	b2c50513          	addi	a0,a0,-1236 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_4(){
    800236a4:	ec06                	sd	ra,24(sp)
    800236a6:	e822                	sd	s0,16(sp)
    800236a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800236aa:	581070ef          	jal	8002b42a <printf>
    800236ae:	4529                	li	a0,10
    800236b0:	269060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800236b4:	4511                	li	a0,4
    800236b6:	853dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800236ba:	4785                	li	a5,1
    800236bc:	17ea                	slli	a5,a5,0x3a
    800236be:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800236c2:	60c7b073          	csrc	hstateen0,a5

    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800236c6:	30c025f3          	csrr	a1,mstateen0
    800236ca:	00013517          	auipc	a0,0x13
    800236ce:	2ce50513          	addi	a0,a0,718 # 80036998 <__func__.0+0x8ab0>
    800236d2:	559070ef          	jal	8002b42a <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800236d6:	60c025f3          	csrr	a1,hstateen0
    800236da:	00013517          	auipc	a0,0x13
    800236de:	2ce50513          	addi	a0,a0,718 # 800369a8 <__func__.0+0x8ac0>
    800236e2:	549070ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    800236e6:	4509                	li	a0,2
    800236e8:	821dd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800236ec:	f20dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800236f0:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800236f4:	95bdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800236f8:	08200593          	li	a1,130
    800236fc:	00013617          	auipc	a2,0x13
    80023700:	66c60613          	addi	a2,a2,1644 # 80036d68 <__func__.0+0x8e80>
    80023704:	0000b517          	auipc	a0,0xb
    80023708:	adc50513          	addi	a0,a0,-1316 # 8002e1e0 <__func__.0+0x2f8>
    8002370c:	51f070ef          	jal	8002b42a <printf>
    80023710:	00035797          	auipc	a5,0x35
    80023714:	9017c783          	lbu	a5,-1791(a5) # 80058011 <excpt+0x1>
    80023718:	00035497          	auipc	s1,0x35
    8002371c:	8f848493          	addi	s1,s1,-1800 # 80058010 <excpt>
    80023720:	0000b597          	auipc	a1,0xb
    80023724:	a9858593          	addi	a1,a1,-1384 # 8002e1b8 <__func__.0+0x2d0>
    80023728:	cf89                	beqz	a5,80023742 <stateen_IMSIC_test_4+0xb0>
    8002372a:	6498                	ld	a4,8(s1)
    8002372c:	47d9                	li	a5,22
    8002372e:	0000b597          	auipc	a1,0xb
    80023732:	a7a58593          	addi	a1,a1,-1414 # 8002e1a8 <__func__.0+0x2c0>
    80023736:	00f70663          	beq	a4,a5,80023742 <stateen_IMSIC_test_4+0xb0>
    8002373a:	0000b597          	auipc	a1,0xb
    8002373e:	a7e58593          	addi	a1,a1,-1410 # 8002e1b8 <__func__.0+0x2d0>
    80023742:	0000b517          	auipc	a0,0xb
    80023746:	ab650513          	addi	a0,a0,-1354 # 8002e1f8 <__func__.0+0x310>
    8002374a:	4e1070ef          	jal	8002b42a <printf>
    8002374e:	00035797          	auipc	a5,0x35
    80023752:	8c37c783          	lbu	a5,-1853(a5) # 80058011 <excpt+0x1>
    80023756:	c789                	beqz	a5,80023760 <stateen_IMSIC_test_4+0xce>
    80023758:	6498                	ld	a4,8(s1)
    8002375a:	47d9                	li	a5,22
    8002375c:	00f70c63          	beq	a4,a5,80023774 <stateen_IMSIC_test_4+0xe2>
    80023760:	0000b517          	auipc	a0,0xb
    80023764:	aa050513          	addi	a0,a0,-1376 # 8002e200 <__func__.0+0x318>
    80023768:	4c3070ef          	jal	8002b42a <printf>
    8002376c:	02900513          	li	a0,41
    80023770:	1a9060ef          	jal	8002a118 <putchar>
    80023774:	4529                	li	a0,10
    80023776:	1a3060ef          	jal	8002a118 <putchar>
    8002377a:	00035797          	auipc	a5,0x35
    8002377e:	8977c783          	lbu	a5,-1897(a5) # 80058011 <excpt+0x1>
    80023782:	4401                	li	s0,0
    80023784:	c789                	beqz	a5,8002378e <stateen_IMSIC_test_4+0xfc>
    80023786:	6480                	ld	s0,8(s1)
    80023788:	1429                	addi	s0,s0,-22
    8002378a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8002378e:	4509                	li	a0,2
    80023790:	f78dd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023794:	e78dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023798:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002379c:	8b3dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800237a0:	08200593          	li	a1,130
    800237a4:	00013617          	auipc	a2,0x13
    800237a8:	61c60613          	addi	a2,a2,1564 # 80036dc0 <__func__.0+0x8ed8>
    800237ac:	0000b517          	auipc	a0,0xb
    800237b0:	a3450513          	addi	a0,a0,-1484 # 8002e1e0 <__func__.0+0x2f8>
    800237b4:	477070ef          	jal	8002b42a <printf>
    800237b8:	00035797          	auipc	a5,0x35
    800237bc:	8597c783          	lbu	a5,-1959(a5) # 80058011 <excpt+0x1>
    800237c0:	0000b597          	auipc	a1,0xb
    800237c4:	9f858593          	addi	a1,a1,-1544 # 8002e1b8 <__func__.0+0x2d0>
    800237c8:	cf89                	beqz	a5,800237e2 <stateen_IMSIC_test_4+0x150>
    800237ca:	6498                	ld	a4,8(s1)
    800237cc:	47d9                	li	a5,22
    800237ce:	0000b597          	auipc	a1,0xb
    800237d2:	9da58593          	addi	a1,a1,-1574 # 8002e1a8 <__func__.0+0x2c0>
    800237d6:	00f70663          	beq	a4,a5,800237e2 <stateen_IMSIC_test_4+0x150>
    800237da:	0000b597          	auipc	a1,0xb
    800237de:	9de58593          	addi	a1,a1,-1570 # 8002e1b8 <__func__.0+0x2d0>
    800237e2:	0000b517          	auipc	a0,0xb
    800237e6:	a1650513          	addi	a0,a0,-1514 # 8002e1f8 <__func__.0+0x310>
    800237ea:	441070ef          	jal	8002b42a <printf>
    800237ee:	00035797          	auipc	a5,0x35
    800237f2:	8237c783          	lbu	a5,-2013(a5) # 80058011 <excpt+0x1>
    800237f6:	c789                	beqz	a5,80023800 <stateen_IMSIC_test_4+0x16e>
    800237f8:	6498                	ld	a4,8(s1)
    800237fa:	47d9                	li	a5,22
    800237fc:	00f70c63          	beq	a4,a5,80023814 <stateen_IMSIC_test_4+0x182>
    80023800:	0000b517          	auipc	a0,0xb
    80023804:	a0050513          	addi	a0,a0,-1536 # 8002e200 <__func__.0+0x318>
    80023808:	423070ef          	jal	8002b42a <printf>
    8002380c:	02900513          	li	a0,41
    80023810:	109060ef          	jal	8002a118 <putchar>
    80023814:	4529                	li	a0,10
    80023816:	103060ef          	jal	8002a118 <putchar>
    8002381a:	c015                	beqz	s0,8002383e <stateen_IMSIC_test_4+0x1ac>
    8002381c:	00034417          	auipc	s0,0x34
    80023820:	7f544403          	lbu	s0,2037(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80023824:	0000b597          	auipc	a1,0xb
    80023828:	99458593          	addi	a1,a1,-1644 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002382c:	cc11                	beqz	s0,80023848 <stateen_IMSIC_test_4+0x1b6>
    8002382e:	6498                	ld	a4,8(s1)
    80023830:	47d9                	li	a5,22
    TEST_END();
    80023832:	0000b597          	auipc	a1,0xb
    80023836:	97658593          	addi	a1,a1,-1674 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002383a:	00f70763          	beq	a4,a5,80023848 <stateen_IMSIC_test_4+0x1b6>
    8002383e:	4401                	li	s0,0
    TEST_END();
    80023840:	0000b597          	auipc	a1,0xb
    80023844:	97858593          	addi	a1,a1,-1672 # 8002e1b8 <__func__.0+0x2d0>
    80023848:	0000b517          	auipc	a0,0xb
    8002384c:	a1850513          	addi	a0,a0,-1512 # 8002e260 <__func__.0+0x378>
    80023850:	3db070ef          	jal	8002b42a <printf>
    80023854:	4511                	li	a0,4
    80023856:	eb2dd0ef          	jal	80000f08 <goto_priv>
    8002385a:	fcbdd0ef          	jal	80001824 <reset_state>

}
    8002385e:	60e2                	ld	ra,24(sp)
    80023860:	8522                	mv	a0,s0
    80023862:	6442                	ld	s0,16(sp)
    80023864:	64a2                	ld	s1,8(sp)
    80023866:	6105                	addi	sp,sp,32
    80023868:	8082                	ret

000000008002386a <stateen_IMSIC_test_5>:

bool stateen_IMSIC_test_5(){
    8002386a:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=0,hs mode 不可访问stopei、vstopei寄存器

    TEST_START();
    8002386c:	0000a597          	auipc	a1,0xa
    80023870:	25458593          	addi	a1,a1,596 # 8002dac0 <__func__.25>
    80023874:	0000b517          	auipc	a0,0xb
    80023878:	95450513          	addi	a0,a0,-1708 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_5(){
    8002387c:	ec06                	sd	ra,24(sp)
    8002387e:	e822                	sd	s0,16(sp)
    80023880:	e426                	sd	s1,8(sp)
    TEST_START();
    80023882:	3a9070ef          	jal	8002b42a <printf>
    80023886:	4529                	li	a0,10
    80023888:	091060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002388c:	4511                	li	a0,4
    8002388e:	e7add0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023892:	4785                	li	a5,1
    80023894:	17ea                	slli	a5,a5,0x3a
    80023896:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_HS);
    8002389a:	450d                	li	a0,3
    8002389c:	e6cdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800238a0:	d6cdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800238a4:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800238a8:	fa6dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    800238ac:	08200593          	li	a1,130
    800238b0:	00013617          	auipc	a2,0x13
    800238b4:	56860613          	addi	a2,a2,1384 # 80036e18 <__func__.0+0x8f30>
    800238b8:	0000b517          	auipc	a0,0xb
    800238bc:	92850513          	addi	a0,a0,-1752 # 8002e1e0 <__func__.0+0x2f8>
    800238c0:	36b070ef          	jal	8002b42a <printf>
    800238c4:	00034797          	auipc	a5,0x34
    800238c8:	74d7c783          	lbu	a5,1869(a5) # 80058011 <excpt+0x1>
    800238cc:	00034497          	auipc	s1,0x34
    800238d0:	74448493          	addi	s1,s1,1860 # 80058010 <excpt>
    800238d4:	0000b597          	auipc	a1,0xb
    800238d8:	8e458593          	addi	a1,a1,-1820 # 8002e1b8 <__func__.0+0x2d0>
    800238dc:	cf89                	beqz	a5,800238f6 <stateen_IMSIC_test_5+0x8c>
    800238de:	6498                	ld	a4,8(s1)
    800238e0:	4789                	li	a5,2
    800238e2:	0000b597          	auipc	a1,0xb
    800238e6:	8c658593          	addi	a1,a1,-1850 # 8002e1a8 <__func__.0+0x2c0>
    800238ea:	00f70663          	beq	a4,a5,800238f6 <stateen_IMSIC_test_5+0x8c>
    800238ee:	0000b597          	auipc	a1,0xb
    800238f2:	8ca58593          	addi	a1,a1,-1846 # 8002e1b8 <__func__.0+0x2d0>
    800238f6:	0000b517          	auipc	a0,0xb
    800238fa:	90250513          	addi	a0,a0,-1790 # 8002e1f8 <__func__.0+0x310>
    800238fe:	32d070ef          	jal	8002b42a <printf>
    80023902:	00034797          	auipc	a5,0x34
    80023906:	70f7c783          	lbu	a5,1807(a5) # 80058011 <excpt+0x1>
    8002390a:	c789                	beqz	a5,80023914 <stateen_IMSIC_test_5+0xaa>
    8002390c:	6498                	ld	a4,8(s1)
    8002390e:	4789                	li	a5,2
    80023910:	00f70c63          	beq	a4,a5,80023928 <stateen_IMSIC_test_5+0xbe>
    80023914:	0000b517          	auipc	a0,0xb
    80023918:	8ec50513          	addi	a0,a0,-1812 # 8002e200 <__func__.0+0x318>
    8002391c:	30f070ef          	jal	8002b42a <printf>
    80023920:	02900513          	li	a0,41
    80023924:	7f4060ef          	jal	8002a118 <putchar>
    80023928:	4529                	li	a0,10
    8002392a:	7ee060ef          	jal	8002a118 <putchar>
    8002392e:	00034797          	auipc	a5,0x34
    80023932:	6e37c783          	lbu	a5,1763(a5) # 80058011 <excpt+0x1>
    80023936:	4401                	li	s0,0
    80023938:	c789                	beqz	a5,80023942 <stateen_IMSIC_test_5+0xd8>
    8002393a:	6480                	ld	s0,8(s1)
    8002393c:	1479                	addi	s0,s0,-2
    8002393e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80023942:	450d                	li	a0,3
    80023944:	dc4dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023948:	cc4dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    8002394c:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023950:	efedd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023954:	08200593          	li	a1,130
    80023958:	00013617          	auipc	a2,0x13
    8002395c:	51060613          	addi	a2,a2,1296 # 80036e68 <__func__.0+0x8f80>
    80023960:	0000b517          	auipc	a0,0xb
    80023964:	88050513          	addi	a0,a0,-1920 # 8002e1e0 <__func__.0+0x2f8>
    80023968:	2c3070ef          	jal	8002b42a <printf>
    8002396c:	00034797          	auipc	a5,0x34
    80023970:	6a57c783          	lbu	a5,1701(a5) # 80058011 <excpt+0x1>
    80023974:	0000b597          	auipc	a1,0xb
    80023978:	84458593          	addi	a1,a1,-1980 # 8002e1b8 <__func__.0+0x2d0>
    8002397c:	cf89                	beqz	a5,80023996 <stateen_IMSIC_test_5+0x12c>
    8002397e:	6498                	ld	a4,8(s1)
    80023980:	4789                	li	a5,2
    80023982:	0000b597          	auipc	a1,0xb
    80023986:	82658593          	addi	a1,a1,-2010 # 8002e1a8 <__func__.0+0x2c0>
    8002398a:	00f70663          	beq	a4,a5,80023996 <stateen_IMSIC_test_5+0x12c>
    8002398e:	0000b597          	auipc	a1,0xb
    80023992:	82a58593          	addi	a1,a1,-2006 # 8002e1b8 <__func__.0+0x2d0>
    80023996:	0000b517          	auipc	a0,0xb
    8002399a:	86250513          	addi	a0,a0,-1950 # 8002e1f8 <__func__.0+0x310>
    8002399e:	28d070ef          	jal	8002b42a <printf>
    800239a2:	00034797          	auipc	a5,0x34
    800239a6:	66f7c783          	lbu	a5,1647(a5) # 80058011 <excpt+0x1>
    800239aa:	c789                	beqz	a5,800239b4 <stateen_IMSIC_test_5+0x14a>
    800239ac:	6498                	ld	a4,8(s1)
    800239ae:	4789                	li	a5,2
    800239b0:	00f70c63          	beq	a4,a5,800239c8 <stateen_IMSIC_test_5+0x15e>
    800239b4:	0000b517          	auipc	a0,0xb
    800239b8:	84c50513          	addi	a0,a0,-1972 # 8002e200 <__func__.0+0x318>
    800239bc:	26f070ef          	jal	8002b42a <printf>
    800239c0:	02900513          	li	a0,41
    800239c4:	754060ef          	jal	8002a118 <putchar>
    800239c8:	4529                	li	a0,10
    800239ca:	74e060ef          	jal	8002a118 <putchar>
    800239ce:	c015                	beqz	s0,800239f2 <stateen_IMSIC_test_5+0x188>
    800239d0:	00034417          	auipc	s0,0x34
    800239d4:	64144403          	lbu	s0,1601(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800239d8:	0000a597          	auipc	a1,0xa
    800239dc:	7e058593          	addi	a1,a1,2016 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800239e0:	cc11                	beqz	s0,800239fc <stateen_IMSIC_test_5+0x192>
    800239e2:	6498                	ld	a4,8(s1)
    800239e4:	4789                	li	a5,2
    TEST_END();
    800239e6:	0000a597          	auipc	a1,0xa
    800239ea:	7c258593          	addi	a1,a1,1986 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800239ee:	00f70763          	beq	a4,a5,800239fc <stateen_IMSIC_test_5+0x192>
    800239f2:	4401                	li	s0,0
    TEST_END();
    800239f4:	0000a597          	auipc	a1,0xa
    800239f8:	7c458593          	addi	a1,a1,1988 # 8002e1b8 <__func__.0+0x2d0>
    800239fc:	0000b517          	auipc	a0,0xb
    80023a00:	86450513          	addi	a0,a0,-1948 # 8002e260 <__func__.0+0x378>
    80023a04:	227070ef          	jal	8002b42a <printf>
    80023a08:	4511                	li	a0,4
    80023a0a:	cfedd0ef          	jal	80000f08 <goto_priv>
    80023a0e:	e17dd0ef          	jal	80001824 <reset_state>

}
    80023a12:	60e2                	ld	ra,24(sp)
    80023a14:	8522                	mv	a0,s0
    80023a16:	6442                	ld	s0,16(sp)
    80023a18:	64a2                	ld	s1,8(sp)
    80023a1a:	6105                	addi	sp,sp,32
    80023a1c:	8082                	ret

0000000080023a1e <stateen_IMSIC_test_6>:


bool stateen_IMSIC_test_6(){
    80023a1e:	1101                	addi	sp,sp,-32

    TEST_START();
    80023a20:	0000a597          	auipc	a1,0xa
    80023a24:	0b858593          	addi	a1,a1,184 # 8002dad8 <__func__.24>
    80023a28:	0000a517          	auipc	a0,0xa
    80023a2c:	7a050513          	addi	a0,a0,1952 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_6(){
    80023a30:	ec06                	sd	ra,24(sp)
    80023a32:	e822                	sd	s0,16(sp)
    80023a34:	e426                	sd	s1,8(sp)
    TEST_START();
    80023a36:	1f5070ef          	jal	8002b42a <printf>
    80023a3a:	4529                	li	a0,10
    80023a3c:	6dc060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80023a40:	4511                	li	a0,4
    80023a42:	cc6dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1,v=0时,可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023a46:	4785                	li	a5,1
    80023a48:	17ea                	slli	a5,a5,0x3a
    80023a4a:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023a4e:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80023a52:	450d                	li	a0,3
    80023a54:	cb4dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023a58:	bb4dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023a5c:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023a60:	deedd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023a64:	08200593          	li	a1,130
    80023a68:	00013617          	auipc	a2,0x13
    80023a6c:	45060613          	addi	a2,a2,1104 # 80036eb8 <__func__.0+0x8fd0>
    80023a70:	0000a517          	auipc	a0,0xa
    80023a74:	77050513          	addi	a0,a0,1904 # 8002e1e0 <__func__.0+0x2f8>
    80023a78:	1b3070ef          	jal	8002b42a <printf>
    80023a7c:	00034797          	auipc	a5,0x34
    80023a80:	5957c783          	lbu	a5,1429(a5) # 80058011 <excpt+0x1>
    80023a84:	0000a597          	auipc	a1,0xa
    80023a88:	72458593          	addi	a1,a1,1828 # 8002e1a8 <__func__.0+0x2c0>
    80023a8c:	c789                	beqz	a5,80023a96 <stateen_IMSIC_test_6+0x78>
    80023a8e:	0000a597          	auipc	a1,0xa
    80023a92:	72a58593          	addi	a1,a1,1834 # 8002e1b8 <__func__.0+0x2d0>
    80023a96:	0000a517          	auipc	a0,0xa
    80023a9a:	76250513          	addi	a0,a0,1890 # 8002e1f8 <__func__.0+0x310>
    80023a9e:	18d070ef          	jal	8002b42a <printf>
    80023aa2:	00034797          	auipc	a5,0x34
    80023aa6:	56f7c783          	lbu	a5,1391(a5) # 80058011 <excpt+0x1>
    80023aaa:	2c079e63          	bnez	a5,80023d86 <stateen_IMSIC_test_6+0x368>
    80023aae:	4529                	li	a0,10
    80023ab0:	668060ef          	jal	8002a118 <putchar>
    80023ab4:	00034497          	auipc	s1,0x34
    80023ab8:	55d4c483          	lbu	s1,1373(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPEI);
    80023abc:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023ac0:	d8edd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023ac4:	08200593          	li	a1,130
    80023ac8:	00013617          	auipc	a2,0x13
    80023acc:	44860613          	addi	a2,a2,1096 # 80036f10 <__func__.0+0x9028>
    80023ad0:	0000a517          	auipc	a0,0xa
    80023ad4:	71050513          	addi	a0,a0,1808 # 8002e1e0 <__func__.0+0x2f8>
    80023ad8:	153070ef          	jal	8002b42a <printf>
    80023adc:	00034797          	auipc	a5,0x34
    80023ae0:	5357c783          	lbu	a5,1333(a5) # 80058011 <excpt+0x1>
    80023ae4:	0000a597          	auipc	a1,0xa
    80023ae8:	6d458593          	addi	a1,a1,1748 # 8002e1b8 <__func__.0+0x2d0>
    80023aec:	e789                	bnez	a5,80023af6 <stateen_IMSIC_test_6+0xd8>
    80023aee:	0000a597          	auipc	a1,0xa
    80023af2:	6ba58593          	addi	a1,a1,1722 # 8002e1a8 <__func__.0+0x2c0>
    80023af6:	0000a517          	auipc	a0,0xa
    80023afa:	70250513          	addi	a0,a0,1794 # 8002e1f8 <__func__.0+0x310>
    80023afe:	12d070ef          	jal	8002b42a <printf>
    80023b02:	00034797          	auipc	a5,0x34
    80023b06:	50f7c783          	lbu	a5,1295(a5) # 80058011 <excpt+0x1>
    80023b0a:	26079363          	bnez	a5,80023d70 <stateen_IMSIC_test_6+0x352>
    80023b0e:	4529                	li	a0,10
    80023b10:	608060ef          	jal	8002a118 <putchar>
    80023b14:	4401                	li	s0,0
    80023b16:	e499                	bnez	s1,80023b24 <stateen_IMSIC_test_6+0x106>
    80023b18:	00034417          	auipc	s0,0x34
    80023b1c:	4f944403          	lbu	s0,1273(s0) # 80058011 <excpt+0x1>
    80023b20:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80023b24:	4505                	li	a0,1
    80023b26:	be2dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b2a:	ae2dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023b2e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023b32:	d1cdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023b36:	08200593          	li	a1,130
    80023b3a:	00013617          	auipc	a2,0x13
    80023b3e:	42e60613          	addi	a2,a2,1070 # 80036f68 <__func__.0+0x9080>
    80023b42:	0000a517          	auipc	a0,0xa
    80023b46:	69e50513          	addi	a0,a0,1694 # 8002e1e0 <__func__.0+0x2f8>
    80023b4a:	0e1070ef          	jal	8002b42a <printf>
    80023b4e:	00034797          	auipc	a5,0x34
    80023b52:	4c37c783          	lbu	a5,1219(a5) # 80058011 <excpt+0x1>
    80023b56:	0000a597          	auipc	a1,0xa
    80023b5a:	66258593          	addi	a1,a1,1634 # 8002e1b8 <__func__.0+0x2d0>
    80023b5e:	e789                	bnez	a5,80023b68 <stateen_IMSIC_test_6+0x14a>
    80023b60:	0000a597          	auipc	a1,0xa
    80023b64:	64858593          	addi	a1,a1,1608 # 8002e1a8 <__func__.0+0x2c0>
    80023b68:	0000a517          	auipc	a0,0xa
    80023b6c:	69050513          	addi	a0,a0,1680 # 8002e1f8 <__func__.0+0x310>
    80023b70:	0bb070ef          	jal	8002b42a <printf>
    80023b74:	00034797          	auipc	a5,0x34
    80023b78:	49d7c783          	lbu	a5,1181(a5) # 80058011 <excpt+0x1>
    80023b7c:	1c079f63          	bnez	a5,80023d5a <stateen_IMSIC_test_6+0x33c>
    80023b80:	4529                	li	a0,10
    80023b82:	596060ef          	jal	8002a118 <putchar>
    80023b86:	c419                	beqz	s0,80023b94 <stateen_IMSIC_test_6+0x176>
    80023b88:	00034417          	auipc	s0,0x34
    80023b8c:	48944403          	lbu	s0,1161(s0) # 80058011 <excpt+0x1>
    80023b90:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80023b94:	4505                	li	a0,1
    80023b96:	b72dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b9a:	a72dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023b9e:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023ba2:	cacdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023ba6:	08200593          	li	a1,130
    80023baa:	00013617          	auipc	a2,0x13
    80023bae:	42660613          	addi	a2,a2,1062 # 80036fd0 <__func__.0+0x90e8>
    80023bb2:	0000a517          	auipc	a0,0xa
    80023bb6:	62e50513          	addi	a0,a0,1582 # 8002e1e0 <__func__.0+0x2f8>
    80023bba:	071070ef          	jal	8002b42a <printf>
    80023bbe:	00034797          	auipc	a5,0x34
    80023bc2:	4537c783          	lbu	a5,1107(a5) # 80058011 <excpt+0x1>
    80023bc6:	0000a597          	auipc	a1,0xa
    80023bca:	5f258593          	addi	a1,a1,1522 # 8002e1b8 <__func__.0+0x2d0>
    80023bce:	e789                	bnez	a5,80023bd8 <stateen_IMSIC_test_6+0x1ba>
    80023bd0:	0000a597          	auipc	a1,0xa
    80023bd4:	5d858593          	addi	a1,a1,1496 # 8002e1a8 <__func__.0+0x2c0>
    80023bd8:	0000a517          	auipc	a0,0xa
    80023bdc:	62050513          	addi	a0,a0,1568 # 8002e1f8 <__func__.0+0x310>
    80023be0:	04b070ef          	jal	8002b42a <printf>
    80023be4:	00034797          	auipc	a5,0x34
    80023be8:	42d7c783          	lbu	a5,1069(a5) # 80058011 <excpt+0x1>
    80023bec:	14079c63          	bnez	a5,80023d44 <stateen_IMSIC_test_6+0x326>
    80023bf0:	4529                	li	a0,10
    80023bf2:	526060ef          	jal	8002a118 <putchar>
    80023bf6:	c419                	beqz	s0,80023c04 <stateen_IMSIC_test_6+0x1e6>
    80023bf8:	00034417          	auipc	s0,0x34
    80023bfc:	41944403          	lbu	s0,1049(s0) # 80058011 <excpt+0x1>
    80023c00:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80023c04:	4511                	li	a0,4
    80023c06:	b02dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c0a:	a02dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023c0e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023c12:	c3cdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c16:	08200593          	li	a1,130
    80023c1a:	00013617          	auipc	a2,0x13
    80023c1e:	41e60613          	addi	a2,a2,1054 # 80037038 <__func__.0+0x9150>
    80023c22:	0000a517          	auipc	a0,0xa
    80023c26:	5be50513          	addi	a0,a0,1470 # 8002e1e0 <__func__.0+0x2f8>
    80023c2a:	001070ef          	jal	8002b42a <printf>
    80023c2e:	00034797          	auipc	a5,0x34
    80023c32:	3e37c783          	lbu	a5,995(a5) # 80058011 <excpt+0x1>
    80023c36:	0000a597          	auipc	a1,0xa
    80023c3a:	58258593          	addi	a1,a1,1410 # 8002e1b8 <__func__.0+0x2d0>
    80023c3e:	e789                	bnez	a5,80023c48 <stateen_IMSIC_test_6+0x22a>
    80023c40:	0000a597          	auipc	a1,0xa
    80023c44:	56858593          	addi	a1,a1,1384 # 8002e1a8 <__func__.0+0x2c0>
    80023c48:	0000a517          	auipc	a0,0xa
    80023c4c:	5b050513          	addi	a0,a0,1456 # 8002e1f8 <__func__.0+0x310>
    80023c50:	7da070ef          	jal	8002b42a <printf>
    80023c54:	00034797          	auipc	a5,0x34
    80023c58:	3bd7c783          	lbu	a5,957(a5) # 80058011 <excpt+0x1>
    80023c5c:	0c079963          	bnez	a5,80023d2e <stateen_IMSIC_test_6+0x310>
    80023c60:	4529                	li	a0,10
    80023c62:	4b6060ef          	jal	8002a118 <putchar>
    80023c66:	c419                	beqz	s0,80023c74 <stateen_IMSIC_test_6+0x256>
    80023c68:	00034417          	auipc	s0,0x34
    80023c6c:	3a944403          	lbu	s0,937(s0) # 80058011 <excpt+0x1>
    80023c70:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023c74:	4511                	li	a0,4
    80023c76:	a92dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c7a:	992dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023c7e:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023c82:	bccdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c86:	08200593          	li	a1,130
    80023c8a:	00013617          	auipc	a2,0x13
    80023c8e:	40660613          	addi	a2,a2,1030 # 80037090 <__func__.0+0x91a8>
    80023c92:	0000a517          	auipc	a0,0xa
    80023c96:	54e50513          	addi	a0,a0,1358 # 8002e1e0 <__func__.0+0x2f8>
    80023c9a:	790070ef          	jal	8002b42a <printf>
    80023c9e:	00034797          	auipc	a5,0x34
    80023ca2:	3737c783          	lbu	a5,883(a5) # 80058011 <excpt+0x1>
    80023ca6:	0000a597          	auipc	a1,0xa
    80023caa:	51258593          	addi	a1,a1,1298 # 8002e1b8 <__func__.0+0x2d0>
    80023cae:	e789                	bnez	a5,80023cb8 <stateen_IMSIC_test_6+0x29a>
    80023cb0:	0000a597          	auipc	a1,0xa
    80023cb4:	4f858593          	addi	a1,a1,1272 # 8002e1a8 <__func__.0+0x2c0>
    80023cb8:	0000a517          	auipc	a0,0xa
    80023cbc:	54050513          	addi	a0,a0,1344 # 8002e1f8 <__func__.0+0x310>
    80023cc0:	76a070ef          	jal	8002b42a <printf>
    80023cc4:	00034797          	auipc	a5,0x34
    80023cc8:	34d7c783          	lbu	a5,845(a5) # 80058011 <excpt+0x1>
    80023ccc:	e7b1                	bnez	a5,80023d18 <stateen_IMSIC_test_6+0x2fa>
    80023cce:	4529                	li	a0,10
    80023cd0:	448060ef          	jal	8002a118 <putchar>
    80023cd4:	c411                	beqz	s0,80023ce0 <stateen_IMSIC_test_6+0x2c2>
    80023cd6:	00034797          	auipc	a5,0x34
    80023cda:	33b7c783          	lbu	a5,827(a5) # 80058011 <excpt+0x1>
    80023cde:	c79d                	beqz	a5,80023d0c <stateen_IMSIC_test_6+0x2ee>
    80023ce0:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023ce2:	0000a597          	auipc	a1,0xa
    80023ce6:	4d658593          	addi	a1,a1,1238 # 8002e1b8 <__func__.0+0x2d0>
    80023cea:	0000a517          	auipc	a0,0xa
    80023cee:	57650513          	addi	a0,a0,1398 # 8002e260 <__func__.0+0x378>
    80023cf2:	738070ef          	jal	8002b42a <printf>
    80023cf6:	4511                	li	a0,4
    80023cf8:	a10dd0ef          	jal	80000f08 <goto_priv>
    80023cfc:	b29dd0ef          	jal	80001824 <reset_state>

}
    80023d00:	60e2                	ld	ra,24(sp)
    80023d02:	8522                	mv	a0,s0
    80023d04:	6442                	ld	s0,16(sp)
    80023d06:	64a2                	ld	s1,8(sp)
    80023d08:	6105                	addi	sp,sp,32
    80023d0a:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d0c:	4405                	li	s0,1
    TEST_END();
    80023d0e:	0000a597          	auipc	a1,0xa
    80023d12:	49a58593          	addi	a1,a1,1178 # 8002e1a8 <__func__.0+0x2c0>
    80023d16:	bfd1                	j	80023cea <stateen_IMSIC_test_6+0x2cc>
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d18:	0000a517          	auipc	a0,0xa
    80023d1c:	4e850513          	addi	a0,a0,1256 # 8002e200 <__func__.0+0x318>
    80023d20:	70a070ef          	jal	8002b42a <printf>
    80023d24:	02900513          	li	a0,41
    80023d28:	3f0060ef          	jal	8002a118 <putchar>
    80023d2c:	b74d                	j	80023cce <stateen_IMSIC_test_6+0x2b0>
    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d2e:	0000a517          	auipc	a0,0xa
    80023d32:	4d250513          	addi	a0,a0,1234 # 8002e200 <__func__.0+0x318>
    80023d36:	6f4070ef          	jal	8002b42a <printf>
    80023d3a:	02900513          	li	a0,41
    80023d3e:	3da060ef          	jal	8002a118 <putchar>
    80023d42:	bf39                	j	80023c60 <stateen_IMSIC_test_6+0x242>
    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023d44:	0000a517          	auipc	a0,0xa
    80023d48:	4bc50513          	addi	a0,a0,1212 # 8002e200 <__func__.0+0x318>
    80023d4c:	6de070ef          	jal	8002b42a <printf>
    80023d50:	02900513          	li	a0,41
    80023d54:	3c4060ef          	jal	8002a118 <putchar>
    80023d58:	bd61                	j	80023bf0 <stateen_IMSIC_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023d5a:	0000a517          	auipc	a0,0xa
    80023d5e:	4a650513          	addi	a0,a0,1190 # 8002e200 <__func__.0+0x318>
    80023d62:	6c8070ef          	jal	8002b42a <printf>
    80023d66:	02900513          	li	a0,41
    80023d6a:	3ae060ef          	jal	8002a118 <putchar>
    80023d6e:	bd09                	j	80023b80 <stateen_IMSIC_test_6+0x162>
    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023d70:	0000a517          	auipc	a0,0xa
    80023d74:	49050513          	addi	a0,a0,1168 # 8002e200 <__func__.0+0x318>
    80023d78:	6b2070ef          	jal	8002b42a <printf>
    80023d7c:	02900513          	li	a0,41
    80023d80:	398060ef          	jal	8002a118 <putchar>
    80023d84:	b369                	j	80023b0e <stateen_IMSIC_test_6+0xf0>
    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023d86:	0000a517          	auipc	a0,0xa
    80023d8a:	47a50513          	addi	a0,a0,1146 # 8002e200 <__func__.0+0x318>
    80023d8e:	69c070ef          	jal	8002b42a <printf>
    80023d92:	02900513          	li	a0,41
    80023d96:	382060ef          	jal	8002a118 <putchar>
    80023d9a:	bb11                	j	80023aae <stateen_IMSIC_test_6+0x90>

0000000080023d9c <stateen_IMSIC_test_7>:


bool stateen_IMSIC_test_7(){
    80023d9c:	1101                	addi	sp,sp,-32

    TEST_START();
    80023d9e:	0000a597          	auipc	a1,0xa
    80023da2:	d5258593          	addi	a1,a1,-686 # 8002daf0 <__func__.23>
    80023da6:	0000a517          	auipc	a0,0xa
    80023daa:	42250513          	addi	a0,a0,1058 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_7(){
    80023dae:	ec06                	sd	ra,24(sp)
    80023db0:	e822                	sd	s0,16(sp)
    80023db2:	e426                	sd	s1,8(sp)
    TEST_START();
    80023db4:	676070ef          	jal	8002b42a <printf>
    80023db8:	4529                	li	a0,10
    80023dba:	35e060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80023dbe:	4511                	li	a0,4
    80023dc0:	948dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1 hstateen.IMSIC=1,v=1 时可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023dc4:	4785                	li	a5,1
    80023dc6:	17ea                	slli	a5,a5,0x3a
    80023dc8:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023dcc:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80023dd0:	4509                	li	a0,2
    80023dd2:	936dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023dd6:	836dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023dda:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023dde:	a70dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023de2:	08200593          	li	a1,130
    80023de6:	00013617          	auipc	a2,0x13
    80023dea:	30260613          	addi	a2,a2,770 # 800370e8 <__func__.0+0x9200>
    80023dee:	0000a517          	auipc	a0,0xa
    80023df2:	3f250513          	addi	a0,a0,1010 # 8002e1e0 <__func__.0+0x2f8>
    80023df6:	634070ef          	jal	8002b42a <printf>
    80023dfa:	00034797          	auipc	a5,0x34
    80023dfe:	2177c783          	lbu	a5,535(a5) # 80058011 <excpt+0x1>
    80023e02:	0000a597          	auipc	a1,0xa
    80023e06:	3a658593          	addi	a1,a1,934 # 8002e1a8 <__func__.0+0x2c0>
    80023e0a:	c789                	beqz	a5,80023e14 <stateen_IMSIC_test_7+0x78>
    80023e0c:	0000a597          	auipc	a1,0xa
    80023e10:	3ac58593          	addi	a1,a1,940 # 8002e1b8 <__func__.0+0x2d0>
    80023e14:	0000a517          	auipc	a0,0xa
    80023e18:	3e450513          	addi	a0,a0,996 # 8002e1f8 <__func__.0+0x310>
    80023e1c:	60e070ef          	jal	8002b42a <printf>
    80023e20:	00034797          	auipc	a5,0x34
    80023e24:	1f17c783          	lbu	a5,497(a5) # 80058011 <excpt+0x1>
    80023e28:	1c079d63          	bnez	a5,80024002 <stateen_IMSIC_test_7+0x266>
    80023e2c:	4529                	li	a0,10
    80023e2e:	2ea060ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80023e32:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e34:	00034497          	auipc	s1,0x34
    80023e38:	1dd4c483          	lbu	s1,477(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80023e3c:	8ccdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023e40:	fcddc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023e44:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023e48:	a06dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e4c:	08200593          	li	a1,130
    80023e50:	00013617          	auipc	a2,0x13
    80023e54:	2f060613          	addi	a2,a2,752 # 80037140 <__func__.0+0x9258>
    80023e58:	0000a517          	auipc	a0,0xa
    80023e5c:	38850513          	addi	a0,a0,904 # 8002e1e0 <__func__.0+0x2f8>
    80023e60:	5ca070ef          	jal	8002b42a <printf>
    80023e64:	00034797          	auipc	a5,0x34
    80023e68:	1ad7c783          	lbu	a5,429(a5) # 80058011 <excpt+0x1>
    80023e6c:	0000a597          	auipc	a1,0xa
    80023e70:	34c58593          	addi	a1,a1,844 # 8002e1b8 <__func__.0+0x2d0>
    80023e74:	e789                	bnez	a5,80023e7e <stateen_IMSIC_test_7+0xe2>
    80023e76:	0000a597          	auipc	a1,0xa
    80023e7a:	33258593          	addi	a1,a1,818 # 8002e1a8 <__func__.0+0x2c0>
    80023e7e:	0000a517          	auipc	a0,0xa
    80023e82:	37a50513          	addi	a0,a0,890 # 8002e1f8 <__func__.0+0x310>
    80023e86:	5a4070ef          	jal	8002b42a <printf>
    80023e8a:	00034797          	auipc	a5,0x34
    80023e8e:	1877c783          	lbu	a5,391(a5) # 80058011 <excpt+0x1>
    80023e92:	14079d63          	bnez	a5,80023fec <stateen_IMSIC_test_7+0x250>
    80023e96:	4529                	li	a0,10
    80023e98:	280060ef          	jal	8002a118 <putchar>
    80023e9c:	4401                	li	s0,0
    80023e9e:	e499                	bnez	s1,80023eac <stateen_IMSIC_test_7+0x110>
    80023ea0:	00034417          	auipc	s0,0x34
    80023ea4:	17144403          	lbu	s0,369(s0) # 80058011 <excpt+0x1>
    80023ea8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023eac:	4501                	li	a0,0
    80023eae:	85add0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023eb2:	f5bdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023eb6:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023eba:	994dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023ebe:	08200593          	li	a1,130
    80023ec2:	00013617          	auipc	a2,0x13
    80023ec6:	2d660613          	addi	a2,a2,726 # 80037198 <__func__.0+0x92b0>
    80023eca:	0000a517          	auipc	a0,0xa
    80023ece:	31650513          	addi	a0,a0,790 # 8002e1e0 <__func__.0+0x2f8>
    80023ed2:	558070ef          	jal	8002b42a <printf>
    80023ed6:	00034797          	auipc	a5,0x34
    80023eda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    80023ede:	0000a597          	auipc	a1,0xa
    80023ee2:	2da58593          	addi	a1,a1,730 # 8002e1b8 <__func__.0+0x2d0>
    80023ee6:	e789                	bnez	a5,80023ef0 <stateen_IMSIC_test_7+0x154>
    80023ee8:	0000a597          	auipc	a1,0xa
    80023eec:	2c058593          	addi	a1,a1,704 # 8002e1a8 <__func__.0+0x2c0>
    80023ef0:	0000a517          	auipc	a0,0xa
    80023ef4:	30850513          	addi	a0,a0,776 # 8002e1f8 <__func__.0+0x310>
    80023ef8:	532070ef          	jal	8002b42a <printf>
    80023efc:	00034797          	auipc	a5,0x34
    80023f00:	1157c783          	lbu	a5,277(a5) # 80058011 <excpt+0x1>
    80023f04:	0c079963          	bnez	a5,80023fd6 <stateen_IMSIC_test_7+0x23a>
    80023f08:	4529                	li	a0,10
    80023f0a:	20e060ef          	jal	8002a118 <putchar>
    80023f0e:	c419                	beqz	s0,80023f1c <stateen_IMSIC_test_7+0x180>
    80023f10:	00034417          	auipc	s0,0x34
    80023f14:	10144403          	lbu	s0,257(s0) # 80058011 <excpt+0x1>
    80023f18:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80023f1c:	4501                	li	a0,0
    80023f1e:	febdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f22:	eebdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023f26:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023f2a:	924dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f2e:	08200593          	li	a1,130
    80023f32:	00013617          	auipc	a2,0x13
    80023f36:	2be60613          	addi	a2,a2,702 # 800371f0 <__func__.0+0x9308>
    80023f3a:	0000a517          	auipc	a0,0xa
    80023f3e:	2a650513          	addi	a0,a0,678 # 8002e1e0 <__func__.0+0x2f8>
    80023f42:	4e8070ef          	jal	8002b42a <printf>
    80023f46:	00034797          	auipc	a5,0x34
    80023f4a:	0cb7c783          	lbu	a5,203(a5) # 80058011 <excpt+0x1>
    80023f4e:	0000a597          	auipc	a1,0xa
    80023f52:	26a58593          	addi	a1,a1,618 # 8002e1b8 <__func__.0+0x2d0>
    80023f56:	e789                	bnez	a5,80023f60 <stateen_IMSIC_test_7+0x1c4>
    80023f58:	0000a597          	auipc	a1,0xa
    80023f5c:	25058593          	addi	a1,a1,592 # 8002e1a8 <__func__.0+0x2c0>
    80023f60:	0000a517          	auipc	a0,0xa
    80023f64:	29850513          	addi	a0,a0,664 # 8002e1f8 <__func__.0+0x310>
    80023f68:	4c2070ef          	jal	8002b42a <printf>
    80023f6c:	00034797          	auipc	a5,0x34
    80023f70:	0a57c783          	lbu	a5,165(a5) # 80058011 <excpt+0x1>
    80023f74:	e7b1                	bnez	a5,80023fc0 <stateen_IMSIC_test_7+0x224>
    80023f76:	4529                	li	a0,10
    80023f78:	1a0060ef          	jal	8002a118 <putchar>
    80023f7c:	c411                	beqz	s0,80023f88 <stateen_IMSIC_test_7+0x1ec>
    80023f7e:	00034797          	auipc	a5,0x34
    80023f82:	0937c783          	lbu	a5,147(a5) # 80058011 <excpt+0x1>
    80023f86:	c79d                	beqz	a5,80023fb4 <stateen_IMSIC_test_7+0x218>
    80023f88:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023f8a:	0000a597          	auipc	a1,0xa
    80023f8e:	22e58593          	addi	a1,a1,558 # 8002e1b8 <__func__.0+0x2d0>
    80023f92:	0000a517          	auipc	a0,0xa
    80023f96:	2ce50513          	addi	a0,a0,718 # 8002e260 <__func__.0+0x378>
    80023f9a:	490070ef          	jal	8002b42a <printf>
    80023f9e:	4511                	li	a0,4
    80023fa0:	f69dc0ef          	jal	80000f08 <goto_priv>
    80023fa4:	881dd0ef          	jal	80001824 <reset_state>
}
    80023fa8:	60e2                	ld	ra,24(sp)
    80023faa:	8522                	mv	a0,s0
    80023fac:	6442                	ld	s0,16(sp)
    80023fae:	64a2                	ld	s1,8(sp)
    80023fb0:	6105                	addi	sp,sp,32
    80023fb2:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fb4:	4405                	li	s0,1
    TEST_END();
    80023fb6:	0000a597          	auipc	a1,0xa
    80023fba:	1f258593          	addi	a1,a1,498 # 8002e1a8 <__func__.0+0x2c0>
    80023fbe:	bfd1                	j	80023f92 <stateen_IMSIC_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fc0:	0000a517          	auipc	a0,0xa
    80023fc4:	24050513          	addi	a0,a0,576 # 8002e200 <__func__.0+0x318>
    80023fc8:	462070ef          	jal	8002b42a <printf>
    80023fcc:	02900513          	li	a0,41
    80023fd0:	148060ef          	jal	8002a118 <putchar>
    80023fd4:	b74d                	j	80023f76 <stateen_IMSIC_test_7+0x1da>
    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fd6:	0000a517          	auipc	a0,0xa
    80023fda:	22a50513          	addi	a0,a0,554 # 8002e200 <__func__.0+0x318>
    80023fde:	44c070ef          	jal	8002b42a <printf>
    80023fe2:	02900513          	li	a0,41
    80023fe6:	132060ef          	jal	8002a118 <putchar>
    80023fea:	bf39                	j	80023f08 <stateen_IMSIC_test_7+0x16c>
    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fec:	0000a517          	auipc	a0,0xa
    80023ff0:	21450513          	addi	a0,a0,532 # 8002e200 <__func__.0+0x318>
    80023ff4:	436070ef          	jal	8002b42a <printf>
    80023ff8:	02900513          	li	a0,41
    80023ffc:	11c060ef          	jal	8002a118 <putchar>
    80024000:	bd59                	j	80023e96 <stateen_IMSIC_test_7+0xfa>
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024002:	0000a517          	auipc	a0,0xa
    80024006:	1fe50513          	addi	a0,a0,510 # 8002e200 <__func__.0+0x318>
    8002400a:	420070ef          	jal	8002b42a <printf>
    8002400e:	02900513          	li	a0,41
    80024012:	106060ef          	jal	8002a118 <putchar>
    80024016:	bd19                	j	80023e2c <stateen_IMSIC_test_7+0x90>

0000000080024018 <stateen_AIA_test_1>:



//--

bool stateen_AIA_test_1(){
    80024018:	1101                	addi	sp,sp,-32

    TEST_START();
    8002401a:	0000a597          	auipc	a1,0xa
    8002401e:	aee58593          	addi	a1,a1,-1298 # 8002db08 <__func__.22>
    80024022:	0000a517          	auipc	a0,0xa
    80024026:	1a650513          	addi	a0,a0,422 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_1(){
    8002402a:	ec06                	sd	ra,24(sp)
    8002402c:	e822                	sd	s0,16(sp)
    8002402e:	e426                	sd	s1,8(sp)
    TEST_START();
    80024030:	3fa070ef          	jal	8002b42a <printf>
    80024034:	4529                	li	a0,10
    80024036:	0e2060ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002403a:	4511                	li	a0,4
    8002403c:	ecddc0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=0,hu mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024040:	4785                	li	a5,1
    80024042:	17ee                	slli	a5,a5,0x3b
    80024044:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80024048:	4505                	li	a0,1
    8002404a:	ebfdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002404e:	dbfdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024052:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024056:	ff9dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvien register cause to illegal except when mstateen.aia=0",
    8002405a:	08200593          	li	a1,130
    8002405e:	00013617          	auipc	a2,0x13
    80024062:	1ea60613          	addi	a2,a2,490 # 80037248 <__func__.0+0x9360>
    80024066:	0000a517          	auipc	a0,0xa
    8002406a:	17a50513          	addi	a0,a0,378 # 8002e1e0 <__func__.0+0x2f8>
    8002406e:	3bc070ef          	jal	8002b42a <printf>
    80024072:	00034797          	auipc	a5,0x34
    80024076:	f9f7c783          	lbu	a5,-97(a5) # 80058011 <excpt+0x1>
    8002407a:	00034497          	auipc	s1,0x34
    8002407e:	f9648493          	addi	s1,s1,-106 # 80058010 <excpt>
    80024082:	0000a597          	auipc	a1,0xa
    80024086:	13658593          	addi	a1,a1,310 # 8002e1b8 <__func__.0+0x2d0>
    8002408a:	cf89                	beqz	a5,800240a4 <stateen_AIA_test_1+0x8c>
    8002408c:	6498                	ld	a4,8(s1)
    8002408e:	4789                	li	a5,2
    80024090:	0000a597          	auipc	a1,0xa
    80024094:	11858593          	addi	a1,a1,280 # 8002e1a8 <__func__.0+0x2c0>
    80024098:	00f70663          	beq	a4,a5,800240a4 <stateen_AIA_test_1+0x8c>
    8002409c:	0000a597          	auipc	a1,0xa
    800240a0:	11c58593          	addi	a1,a1,284 # 8002e1b8 <__func__.0+0x2d0>
    800240a4:	0000a517          	auipc	a0,0xa
    800240a8:	15450513          	addi	a0,a0,340 # 8002e1f8 <__func__.0+0x310>
    800240ac:	37e070ef          	jal	8002b42a <printf>
    800240b0:	00034797          	auipc	a5,0x34
    800240b4:	f617c783          	lbu	a5,-159(a5) # 80058011 <excpt+0x1>
    800240b8:	c789                	beqz	a5,800240c2 <stateen_AIA_test_1+0xaa>
    800240ba:	6498                	ld	a4,8(s1)
    800240bc:	4789                	li	a5,2
    800240be:	00f70c63          	beq	a4,a5,800240d6 <stateen_AIA_test_1+0xbe>
    800240c2:	0000a517          	auipc	a0,0xa
    800240c6:	13e50513          	addi	a0,a0,318 # 8002e200 <__func__.0+0x318>
    800240ca:	360070ef          	jal	8002b42a <printf>
    800240ce:	02900513          	li	a0,41
    800240d2:	046060ef          	jal	8002a118 <putchar>
    800240d6:	4529                	li	a0,10
    800240d8:	040060ef          	jal	8002a118 <putchar>
    800240dc:	00034797          	auipc	a5,0x34
    800240e0:	f357c783          	lbu	a5,-203(a5) # 80058011 <excpt+0x1>
    800240e4:	4401                	li	s0,0
    800240e6:	c789                	beqz	a5,800240f0 <stateen_AIA_test_1+0xd8>
    800240e8:	6480                	ld	s0,8(s1)
    800240ea:	1479                	addi	s0,s0,-2
    800240ec:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800240f0:	4505                	li	a0,1
    800240f2:	e17dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800240f6:	d17dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800240fa:	608027f3          	csrr	a5,hvien

    excpt_info();
    800240fe:	f51dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024102:	08200593          	li	a1,130
    80024106:	00013617          	auipc	a2,0x13
    8002410a:	19260613          	addi	a2,a2,402 # 80037298 <__func__.0+0x93b0>
    8002410e:	0000a517          	auipc	a0,0xa
    80024112:	0d250513          	addi	a0,a0,210 # 8002e1e0 <__func__.0+0x2f8>
    80024116:	314070ef          	jal	8002b42a <printf>
    8002411a:	00034797          	auipc	a5,0x34
    8002411e:	ef77c783          	lbu	a5,-265(a5) # 80058011 <excpt+0x1>
    80024122:	0000a597          	auipc	a1,0xa
    80024126:	09658593          	addi	a1,a1,150 # 8002e1b8 <__func__.0+0x2d0>
    8002412a:	cf89                	beqz	a5,80024144 <stateen_AIA_test_1+0x12c>
    8002412c:	6498                	ld	a4,8(s1)
    8002412e:	4789                	li	a5,2
    80024130:	0000a597          	auipc	a1,0xa
    80024134:	07858593          	addi	a1,a1,120 # 8002e1a8 <__func__.0+0x2c0>
    80024138:	00f70663          	beq	a4,a5,80024144 <stateen_AIA_test_1+0x12c>
    8002413c:	0000a597          	auipc	a1,0xa
    80024140:	07c58593          	addi	a1,a1,124 # 8002e1b8 <__func__.0+0x2d0>
    80024144:	0000a517          	auipc	a0,0xa
    80024148:	0b450513          	addi	a0,a0,180 # 8002e1f8 <__func__.0+0x310>
    8002414c:	2de070ef          	jal	8002b42a <printf>
    80024150:	00034797          	auipc	a5,0x34
    80024154:	ec17c783          	lbu	a5,-319(a5) # 80058011 <excpt+0x1>
    80024158:	c789                	beqz	a5,80024162 <stateen_AIA_test_1+0x14a>
    8002415a:	6498                	ld	a4,8(s1)
    8002415c:	4789                	li	a5,2
    8002415e:	00f70c63          	beq	a4,a5,80024176 <stateen_AIA_test_1+0x15e>
    80024162:	0000a517          	auipc	a0,0xa
    80024166:	09e50513          	addi	a0,a0,158 # 8002e200 <__func__.0+0x318>
    8002416a:	2c0070ef          	jal	8002b42a <printf>
    8002416e:	02900513          	li	a0,41
    80024172:	7a7050ef          	jal	8002a118 <putchar>
    80024176:	4529                	li	a0,10
    80024178:	7a1050ef          	jal	8002a118 <putchar>
    8002417c:	c801                	beqz	s0,8002418c <stateen_AIA_test_1+0x174>
    8002417e:	00034797          	auipc	a5,0x34
    80024182:	e937c783          	lbu	a5,-365(a5) # 80058011 <excpt+0x1>
    80024186:	4401                	li	s0,0
    80024188:	18079363          	bnez	a5,8002430e <stateen_AIA_test_1+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    8002418c:	4505                	li	a0,1
    8002418e:	d7bdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024192:	c7bdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024196:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002419a:	eb5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    8002419e:	08200593          	li	a1,130
    800241a2:	00013617          	auipc	a2,0x13
    800241a6:	14660613          	addi	a2,a2,326 # 800372e8 <__func__.0+0x9400>
    800241aa:	0000a517          	auipc	a0,0xa
    800241ae:	03650513          	addi	a0,a0,54 # 8002e1e0 <__func__.0+0x2f8>
    800241b2:	278070ef          	jal	8002b42a <printf>
    800241b6:	00034797          	auipc	a5,0x34
    800241ba:	e5b7c783          	lbu	a5,-421(a5) # 80058011 <excpt+0x1>
    800241be:	0000a597          	auipc	a1,0xa
    800241c2:	ffa58593          	addi	a1,a1,-6 # 8002e1b8 <__func__.0+0x2d0>
    800241c6:	cf89                	beqz	a5,800241e0 <stateen_AIA_test_1+0x1c8>
    800241c8:	6498                	ld	a4,8(s1)
    800241ca:	4789                	li	a5,2
    800241cc:	0000a597          	auipc	a1,0xa
    800241d0:	fdc58593          	addi	a1,a1,-36 # 8002e1a8 <__func__.0+0x2c0>
    800241d4:	00f70663          	beq	a4,a5,800241e0 <stateen_AIA_test_1+0x1c8>
    800241d8:	0000a597          	auipc	a1,0xa
    800241dc:	fe058593          	addi	a1,a1,-32 # 8002e1b8 <__func__.0+0x2d0>
    800241e0:	0000a517          	auipc	a0,0xa
    800241e4:	01850513          	addi	a0,a0,24 # 8002e1f8 <__func__.0+0x310>
    800241e8:	242070ef          	jal	8002b42a <printf>
    800241ec:	00034797          	auipc	a5,0x34
    800241f0:	e257c783          	lbu	a5,-475(a5) # 80058011 <excpt+0x1>
    800241f4:	c789                	beqz	a5,800241fe <stateen_AIA_test_1+0x1e6>
    800241f6:	6498                	ld	a4,8(s1)
    800241f8:	4789                	li	a5,2
    800241fa:	00f70c63          	beq	a4,a5,80024212 <stateen_AIA_test_1+0x1fa>
    800241fe:	0000a517          	auipc	a0,0xa
    80024202:	00250513          	addi	a0,a0,2 # 8002e200 <__func__.0+0x318>
    80024206:	224070ef          	jal	8002b42a <printf>
    8002420a:	02900513          	li	a0,41
    8002420e:	70b050ef          	jal	8002a118 <putchar>
    80024212:	4529                	li	a0,10
    80024214:	705050ef          	jal	8002a118 <putchar>
    80024218:	c801                	beqz	s0,80024228 <stateen_AIA_test_1+0x210>
    8002421a:	00034797          	auipc	a5,0x34
    8002421e:	df77c783          	lbu	a5,-521(a5) # 80058011 <excpt+0x1>
    80024222:	4401                	li	s0,0
    80024224:	0e079063          	bnez	a5,80024304 <stateen_AIA_test_1+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024228:	4505                	li	a0,1
    8002422a:	cdfdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002422e:	bdfdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024232:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024236:	e19dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    8002423a:	08200593          	li	a1,130
    8002423e:	00013617          	auipc	a2,0x13
    80024242:	0fa60613          	addi	a2,a2,250 # 80037338 <__func__.0+0x9450>
    80024246:	0000a517          	auipc	a0,0xa
    8002424a:	f9a50513          	addi	a0,a0,-102 # 8002e1e0 <__func__.0+0x2f8>
    8002424e:	1dc070ef          	jal	8002b42a <printf>
    80024252:	00034797          	auipc	a5,0x34
    80024256:	dbf7c783          	lbu	a5,-577(a5) # 80058011 <excpt+0x1>
    8002425a:	0000a597          	auipc	a1,0xa
    8002425e:	f5e58593          	addi	a1,a1,-162 # 8002e1b8 <__func__.0+0x2d0>
    80024262:	cf89                	beqz	a5,8002427c <stateen_AIA_test_1+0x264>
    80024264:	6498                	ld	a4,8(s1)
    80024266:	4789                	li	a5,2
    80024268:	0000a597          	auipc	a1,0xa
    8002426c:	f4058593          	addi	a1,a1,-192 # 8002e1a8 <__func__.0+0x2c0>
    80024270:	00f70663          	beq	a4,a5,8002427c <stateen_AIA_test_1+0x264>
    80024274:	0000a597          	auipc	a1,0xa
    80024278:	f4458593          	addi	a1,a1,-188 # 8002e1b8 <__func__.0+0x2d0>
    8002427c:	0000a517          	auipc	a0,0xa
    80024280:	f7c50513          	addi	a0,a0,-132 # 8002e1f8 <__func__.0+0x310>
    80024284:	1a6070ef          	jal	8002b42a <printf>
    80024288:	00034797          	auipc	a5,0x34
    8002428c:	d897c783          	lbu	a5,-631(a5) # 80058011 <excpt+0x1>
    80024290:	c789                	beqz	a5,8002429a <stateen_AIA_test_1+0x282>
    80024292:	6498                	ld	a4,8(s1)
    80024294:	4789                	li	a5,2
    80024296:	00f70c63          	beq	a4,a5,800242ae <stateen_AIA_test_1+0x296>
    8002429a:	0000a517          	auipc	a0,0xa
    8002429e:	f6650513          	addi	a0,a0,-154 # 8002e200 <__func__.0+0x318>
    800242a2:	188070ef          	jal	8002b42a <printf>
    800242a6:	02900513          	li	a0,41
    800242aa:	66f050ef          	jal	8002a118 <putchar>
    800242ae:	4529                	li	a0,10
    800242b0:	669050ef          	jal	8002a118 <putchar>
    800242b4:	c015                	beqz	s0,800242d8 <stateen_AIA_test_1+0x2c0>
    800242b6:	00034417          	auipc	s0,0x34
    800242ba:	d5b44403          	lbu	s0,-677(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800242be:	0000a597          	auipc	a1,0xa
    800242c2:	efa58593          	addi	a1,a1,-262 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    800242c6:	cc11                	beqz	s0,800242e2 <stateen_AIA_test_1+0x2ca>
    800242c8:	6498                	ld	a4,8(s1)
    800242ca:	4789                	li	a5,2
    TEST_END();
    800242cc:	0000a597          	auipc	a1,0xa
    800242d0:	edc58593          	addi	a1,a1,-292 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    800242d4:	00f70763          	beq	a4,a5,800242e2 <stateen_AIA_test_1+0x2ca>
    800242d8:	4401                	li	s0,0
    TEST_END();
    800242da:	0000a597          	auipc	a1,0xa
    800242de:	ede58593          	addi	a1,a1,-290 # 8002e1b8 <__func__.0+0x2d0>
    800242e2:	0000a517          	auipc	a0,0xa
    800242e6:	f7e50513          	addi	a0,a0,-130 # 8002e260 <__func__.0+0x378>
    800242ea:	140070ef          	jal	8002b42a <printf>
    800242ee:	4511                	li	a0,4
    800242f0:	c19dc0ef          	jal	80000f08 <goto_priv>
    800242f4:	d30dd0ef          	jal	80001824 <reset_state>

}
    800242f8:	60e2                	ld	ra,24(sp)
    800242fa:	8522                	mv	a0,s0
    800242fc:	6442                	ld	s0,16(sp)
    800242fe:	64a2                	ld	s1,8(sp)
    80024300:	6105                	addi	sp,sp,32
    80024302:	8082                	ret
    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024304:	6480                	ld	s0,8(s1)
    80024306:	1479                	addi	s0,s0,-2
    80024308:	00143413          	seqz	s0,s0
    8002430c:	bf31                	j	80024228 <stateen_AIA_test_1+0x210>
    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    8002430e:	6480                	ld	s0,8(s1)
    80024310:	1479                	addi	s0,s0,-2
    80024312:	00143413          	seqz	s0,s0
    80024316:	bd9d                	j	8002418c <stateen_AIA_test_1+0x174>

0000000080024318 <stateen_AIA_test_2>:

bool stateen_AIA_test_2(){
    80024318:	1101                	addi	sp,sp,-32

    TEST_START();
    8002431a:	0000a597          	auipc	a1,0xa
    8002431e:	80658593          	addi	a1,a1,-2042 # 8002db20 <__func__.21>
    80024322:	0000a517          	auipc	a0,0xa
    80024326:	ea650513          	addi	a0,a0,-346 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_2(){
    8002432a:	ec06                	sd	ra,24(sp)
    8002432c:	e822                	sd	s0,16(sp)
    8002432e:	e426                	sd	s1,8(sp)
    TEST_START();
    80024330:	0fa070ef          	jal	8002b42a <printf>
    80024334:	4529                	li	a0,10
    80024336:	5e3050ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002433a:	4511                	li	a0,4
    8002433c:	bcddc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024340:	4785                	li	a5,1
    80024342:	17ee                	slli	a5,a5,0x3b
    80024344:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024348:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时,不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    goto_priv(PRIV_VU);
    8002434c:	4501                	li	a0,0
    8002434e:	bbbdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024352:	abbdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024356:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002435a:	cf5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002435e:	08200593          	li	a1,130
    80024362:	00013617          	auipc	a2,0x13
    80024366:	02660613          	addi	a2,a2,38 # 80037388 <__func__.0+0x94a0>
    8002436a:	0000a517          	auipc	a0,0xa
    8002436e:	e7650513          	addi	a0,a0,-394 # 8002e1e0 <__func__.0+0x2f8>
    80024372:	0b8070ef          	jal	8002b42a <printf>
    80024376:	00034797          	auipc	a5,0x34
    8002437a:	c9b7c783          	lbu	a5,-869(a5) # 80058011 <excpt+0x1>
    8002437e:	00034497          	auipc	s1,0x34
    80024382:	c9248493          	addi	s1,s1,-878 # 80058010 <excpt>
    80024386:	0000a597          	auipc	a1,0xa
    8002438a:	e3258593          	addi	a1,a1,-462 # 8002e1b8 <__func__.0+0x2d0>
    8002438e:	cf89                	beqz	a5,800243a8 <stateen_AIA_test_2+0x90>
    80024390:	6498                	ld	a4,8(s1)
    80024392:	47d9                	li	a5,22
    80024394:	0000a597          	auipc	a1,0xa
    80024398:	e1458593          	addi	a1,a1,-492 # 8002e1a8 <__func__.0+0x2c0>
    8002439c:	00f70663          	beq	a4,a5,800243a8 <stateen_AIA_test_2+0x90>
    800243a0:	0000a597          	auipc	a1,0xa
    800243a4:	e1858593          	addi	a1,a1,-488 # 8002e1b8 <__func__.0+0x2d0>
    800243a8:	0000a517          	auipc	a0,0xa
    800243ac:	e5050513          	addi	a0,a0,-432 # 8002e1f8 <__func__.0+0x310>
    800243b0:	07a070ef          	jal	8002b42a <printf>
    800243b4:	00034797          	auipc	a5,0x34
    800243b8:	c5d7c783          	lbu	a5,-931(a5) # 80058011 <excpt+0x1>
    800243bc:	c789                	beqz	a5,800243c6 <stateen_AIA_test_2+0xae>
    800243be:	6498                	ld	a4,8(s1)
    800243c0:	47d9                	li	a5,22
    800243c2:	00f70c63          	beq	a4,a5,800243da <stateen_AIA_test_2+0xc2>
    800243c6:	0000a517          	auipc	a0,0xa
    800243ca:	e3a50513          	addi	a0,a0,-454 # 8002e200 <__func__.0+0x318>
    800243ce:	05c070ef          	jal	8002b42a <printf>
    800243d2:	02900513          	li	a0,41
    800243d6:	543050ef          	jal	8002a118 <putchar>
    800243da:	4529                	li	a0,10
    800243dc:	53d050ef          	jal	8002a118 <putchar>
    800243e0:	00034797          	auipc	a5,0x34
    800243e4:	c317c783          	lbu	a5,-975(a5) # 80058011 <excpt+0x1>
    800243e8:	4401                	li	s0,0
    800243ea:	c789                	beqz	a5,800243f4 <stateen_AIA_test_2+0xdc>
    800243ec:	6480                	ld	s0,8(s1)
    800243ee:	1429                	addi	s0,s0,-22
    800243f0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800243f4:	4501                	li	a0,0
    800243f6:	b13dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800243fa:	a13dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800243fe:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024402:	c4ddc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024406:	08200593          	li	a1,130
    8002440a:	00013617          	auipc	a2,0x13
    8002440e:	fce60613          	addi	a2,a2,-50 # 800373d8 <__func__.0+0x94f0>
    80024412:	0000a517          	auipc	a0,0xa
    80024416:	dce50513          	addi	a0,a0,-562 # 8002e1e0 <__func__.0+0x2f8>
    8002441a:	010070ef          	jal	8002b42a <printf>
    8002441e:	00034797          	auipc	a5,0x34
    80024422:	bf37c783          	lbu	a5,-1037(a5) # 80058011 <excpt+0x1>
    80024426:	0000a597          	auipc	a1,0xa
    8002442a:	d9258593          	addi	a1,a1,-622 # 8002e1b8 <__func__.0+0x2d0>
    8002442e:	cf89                	beqz	a5,80024448 <stateen_AIA_test_2+0x130>
    80024430:	6498                	ld	a4,8(s1)
    80024432:	47d9                	li	a5,22
    80024434:	0000a597          	auipc	a1,0xa
    80024438:	d7458593          	addi	a1,a1,-652 # 8002e1a8 <__func__.0+0x2c0>
    8002443c:	00f70663          	beq	a4,a5,80024448 <stateen_AIA_test_2+0x130>
    80024440:	0000a597          	auipc	a1,0xa
    80024444:	d7858593          	addi	a1,a1,-648 # 8002e1b8 <__func__.0+0x2d0>
    80024448:	0000a517          	auipc	a0,0xa
    8002444c:	db050513          	addi	a0,a0,-592 # 8002e1f8 <__func__.0+0x310>
    80024450:	7db060ef          	jal	8002b42a <printf>
    80024454:	00034797          	auipc	a5,0x34
    80024458:	bbd7c783          	lbu	a5,-1091(a5) # 80058011 <excpt+0x1>
    8002445c:	c789                	beqz	a5,80024466 <stateen_AIA_test_2+0x14e>
    8002445e:	6498                	ld	a4,8(s1)
    80024460:	47d9                	li	a5,22
    80024462:	00f70c63          	beq	a4,a5,8002447a <stateen_AIA_test_2+0x162>
    80024466:	0000a517          	auipc	a0,0xa
    8002446a:	d9a50513          	addi	a0,a0,-614 # 8002e200 <__func__.0+0x318>
    8002446e:	7bd060ef          	jal	8002b42a <printf>
    80024472:	02900513          	li	a0,41
    80024476:	4a3050ef          	jal	8002a118 <putchar>
    8002447a:	4529                	li	a0,10
    8002447c:	49d050ef          	jal	8002a118 <putchar>
    80024480:	c801                	beqz	s0,80024490 <stateen_AIA_test_2+0x178>
    80024482:	00034797          	auipc	a5,0x34
    80024486:	b8f7c783          	lbu	a5,-1137(a5) # 80058011 <excpt+0x1>
    8002448a:	4401                	li	s0,0
    8002448c:	18079363          	bnez	a5,80024612 <stateen_AIA_test_2+0x2fa>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80024490:	4501                	li	a0,0
    80024492:	a77dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024496:	977dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002449a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002449e:	bb1dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800244a2:	08200593          	li	a1,130
    800244a6:	00013617          	auipc	a2,0x13
    800244aa:	f8a60613          	addi	a2,a2,-118 # 80037430 <__func__.0+0x9548>
    800244ae:	0000a517          	auipc	a0,0xa
    800244b2:	d3250513          	addi	a0,a0,-718 # 8002e1e0 <__func__.0+0x2f8>
    800244b6:	775060ef          	jal	8002b42a <printf>
    800244ba:	00034797          	auipc	a5,0x34
    800244be:	b577c783          	lbu	a5,-1193(a5) # 80058011 <excpt+0x1>
    800244c2:	0000a597          	auipc	a1,0xa
    800244c6:	cf658593          	addi	a1,a1,-778 # 8002e1b8 <__func__.0+0x2d0>
    800244ca:	cf89                	beqz	a5,800244e4 <stateen_AIA_test_2+0x1cc>
    800244cc:	6498                	ld	a4,8(s1)
    800244ce:	47d9                	li	a5,22
    800244d0:	0000a597          	auipc	a1,0xa
    800244d4:	cd858593          	addi	a1,a1,-808 # 8002e1a8 <__func__.0+0x2c0>
    800244d8:	00f70663          	beq	a4,a5,800244e4 <stateen_AIA_test_2+0x1cc>
    800244dc:	0000a597          	auipc	a1,0xa
    800244e0:	cdc58593          	addi	a1,a1,-804 # 8002e1b8 <__func__.0+0x2d0>
    800244e4:	0000a517          	auipc	a0,0xa
    800244e8:	d1450513          	addi	a0,a0,-748 # 8002e1f8 <__func__.0+0x310>
    800244ec:	73f060ef          	jal	8002b42a <printf>
    800244f0:	00034797          	auipc	a5,0x34
    800244f4:	b217c783          	lbu	a5,-1247(a5) # 80058011 <excpt+0x1>
    800244f8:	c789                	beqz	a5,80024502 <stateen_AIA_test_2+0x1ea>
    800244fa:	6498                	ld	a4,8(s1)
    800244fc:	47d9                	li	a5,22
    800244fe:	00f70c63          	beq	a4,a5,80024516 <stateen_AIA_test_2+0x1fe>
    80024502:	0000a517          	auipc	a0,0xa
    80024506:	cfe50513          	addi	a0,a0,-770 # 8002e200 <__func__.0+0x318>
    8002450a:	721060ef          	jal	8002b42a <printf>
    8002450e:	02900513          	li	a0,41
    80024512:	407050ef          	jal	8002a118 <putchar>
    80024516:	4529                	li	a0,10
    80024518:	401050ef          	jal	8002a118 <putchar>
    8002451c:	c801                	beqz	s0,8002452c <stateen_AIA_test_2+0x214>
    8002451e:	00034797          	auipc	a5,0x34
    80024522:	af37c783          	lbu	a5,-1293(a5) # 80058011 <excpt+0x1>
    80024526:	4401                	li	s0,0
    80024528:	0e079063          	bnez	a5,80024608 <stateen_AIA_test_2+0x2f0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002452c:	4501                	li	a0,0
    8002452e:	9dbdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024532:	8dbdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024536:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002453a:	b15dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002453e:	08200593          	li	a1,130
    80024542:	00013617          	auipc	a2,0x13
    80024546:	f3e60613          	addi	a2,a2,-194 # 80037480 <__func__.0+0x9598>
    8002454a:	0000a517          	auipc	a0,0xa
    8002454e:	c9650513          	addi	a0,a0,-874 # 8002e1e0 <__func__.0+0x2f8>
    80024552:	6d9060ef          	jal	8002b42a <printf>
    80024556:	00034797          	auipc	a5,0x34
    8002455a:	abb7c783          	lbu	a5,-1349(a5) # 80058011 <excpt+0x1>
    8002455e:	0000a597          	auipc	a1,0xa
    80024562:	c5a58593          	addi	a1,a1,-934 # 8002e1b8 <__func__.0+0x2d0>
    80024566:	cf89                	beqz	a5,80024580 <stateen_AIA_test_2+0x268>
    80024568:	6498                	ld	a4,8(s1)
    8002456a:	47d9                	li	a5,22
    8002456c:	0000a597          	auipc	a1,0xa
    80024570:	c3c58593          	addi	a1,a1,-964 # 8002e1a8 <__func__.0+0x2c0>
    80024574:	00f70663          	beq	a4,a5,80024580 <stateen_AIA_test_2+0x268>
    80024578:	0000a597          	auipc	a1,0xa
    8002457c:	c4058593          	addi	a1,a1,-960 # 8002e1b8 <__func__.0+0x2d0>
    80024580:	0000a517          	auipc	a0,0xa
    80024584:	c7850513          	addi	a0,a0,-904 # 8002e1f8 <__func__.0+0x310>
    80024588:	6a3060ef          	jal	8002b42a <printf>
    8002458c:	00034797          	auipc	a5,0x34
    80024590:	a857c783          	lbu	a5,-1403(a5) # 80058011 <excpt+0x1>
    80024594:	c789                	beqz	a5,8002459e <stateen_AIA_test_2+0x286>
    80024596:	6498                	ld	a4,8(s1)
    80024598:	47d9                	li	a5,22
    8002459a:	00f70c63          	beq	a4,a5,800245b2 <stateen_AIA_test_2+0x29a>
    8002459e:	0000a517          	auipc	a0,0xa
    800245a2:	c6250513          	addi	a0,a0,-926 # 8002e200 <__func__.0+0x318>
    800245a6:	685060ef          	jal	8002b42a <printf>
    800245aa:	02900513          	li	a0,41
    800245ae:	36b050ef          	jal	8002a118 <putchar>
    800245b2:	4529                	li	a0,10
    800245b4:	365050ef          	jal	8002a118 <putchar>
    800245b8:	c015                	beqz	s0,800245dc <stateen_AIA_test_2+0x2c4>
    800245ba:	00034417          	auipc	s0,0x34
    800245be:	a5744403          	lbu	s0,-1449(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800245c2:	0000a597          	auipc	a1,0xa
    800245c6:	bf658593          	addi	a1,a1,-1034 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245ca:	cc11                	beqz	s0,800245e6 <stateen_AIA_test_2+0x2ce>
    800245cc:	6498                	ld	a4,8(s1)
    800245ce:	47d9                	li	a5,22
    TEST_END();
    800245d0:	0000a597          	auipc	a1,0xa
    800245d4:	bd858593          	addi	a1,a1,-1064 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245d8:	00f70763          	beq	a4,a5,800245e6 <stateen_AIA_test_2+0x2ce>
    800245dc:	4401                	li	s0,0
    TEST_END();
    800245de:	0000a597          	auipc	a1,0xa
    800245e2:	bda58593          	addi	a1,a1,-1062 # 8002e1b8 <__func__.0+0x2d0>
    800245e6:	0000a517          	auipc	a0,0xa
    800245ea:	c7a50513          	addi	a0,a0,-902 # 8002e260 <__func__.0+0x378>
    800245ee:	63d060ef          	jal	8002b42a <printf>
    800245f2:	4511                	li	a0,4
    800245f4:	915dc0ef          	jal	80000f08 <goto_priv>
    800245f8:	a2cdd0ef          	jal	80001824 <reset_state>

}
    800245fc:	60e2                	ld	ra,24(sp)
    800245fe:	8522                	mv	a0,s0
    80024600:	6442                	ld	s0,16(sp)
    80024602:	64a2                	ld	s1,8(sp)
    80024604:	6105                	addi	sp,sp,32
    80024606:	8082                	ret
    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024608:	6480                	ld	s0,8(s1)
    8002460a:	1429                	addi	s0,s0,-22
    8002460c:	00143413          	seqz	s0,s0
    80024610:	bf31                	j	8002452c <stateen_AIA_test_2+0x214>
    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024612:	6480                	ld	s0,8(s1)
    80024614:	1429                	addi	s0,s0,-22
    80024616:	00143413          	seqz	s0,s0
    8002461a:	bd9d                	j	80024490 <stateen_AIA_test_2+0x178>

000000008002461c <stateen_AIA_test_3>:

bool stateen_AIA_test_3(){
    8002461c:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,m mode 可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    8002461e:	00009597          	auipc	a1,0x9
    80024622:	51a58593          	addi	a1,a1,1306 # 8002db38 <__func__.20>
    80024626:	0000a517          	auipc	a0,0xa
    8002462a:	ba250513          	addi	a0,a0,-1118 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_3(){
    8002462e:	ec06                	sd	ra,24(sp)
    80024630:	e822                	sd	s0,16(sp)
    80024632:	e426                	sd	s1,8(sp)
    TEST_START();
    80024634:	5f7060ef          	jal	8002b42a <printf>
    80024638:	4529                	li	a0,10
    8002463a:	2df050ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    8002463e:	4511                	li	a0,4
    80024640:	8c9dc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024644:	4785                	li	a5,1
    80024646:	17ee                	slli	a5,a5,0x3b
    80024648:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002464c:	4511                	li	a0,4
    8002464e:	8bbdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024652:	fbadc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024656:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002465a:	9f5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    8002465e:	08200593          	li	a1,130
    80024662:	00013617          	auipc	a2,0x13
    80024666:	e7660613          	addi	a2,a2,-394 # 800374d8 <__func__.0+0x95f0>
    8002466a:	0000a517          	auipc	a0,0xa
    8002466e:	b7650513          	addi	a0,a0,-1162 # 8002e1e0 <__func__.0+0x2f8>
    80024672:	5b9060ef          	jal	8002b42a <printf>
    80024676:	00034797          	auipc	a5,0x34
    8002467a:	99b7c783          	lbu	a5,-1637(a5) # 80058011 <excpt+0x1>
    8002467e:	0000a597          	auipc	a1,0xa
    80024682:	b2a58593          	addi	a1,a1,-1238 # 8002e1a8 <__func__.0+0x2c0>
    80024686:	c789                	beqz	a5,80024690 <stateen_AIA_test_3+0x74>
    80024688:	0000a597          	auipc	a1,0xa
    8002468c:	b3058593          	addi	a1,a1,-1232 # 8002e1b8 <__func__.0+0x2d0>
    80024690:	0000a517          	auipc	a0,0xa
    80024694:	b6850513          	addi	a0,a0,-1176 # 8002e1f8 <__func__.0+0x310>
    80024698:	593060ef          	jal	8002b42a <printf>
    8002469c:	00034797          	auipc	a5,0x34
    800246a0:	9757c783          	lbu	a5,-1675(a5) # 80058011 <excpt+0x1>
    800246a4:	1c079d63          	bnez	a5,8002487e <stateen_AIA_test_3+0x262>
    800246a8:	4529                	li	a0,10
    800246aa:	26f050ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800246ae:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800246b0:	00034497          	auipc	s1,0x34
    800246b4:	9614c483          	lbu	s1,-1695(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800246b8:	851dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800246bc:	f50dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800246c0:	608027f3          	csrr	a5,hvien

    excpt_info();
    800246c4:	98bdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    800246c8:	08200593          	li	a1,130
    800246cc:	00013617          	auipc	a2,0x13
    800246d0:	e4c60613          	addi	a2,a2,-436 # 80037518 <__func__.0+0x9630>
    800246d4:	0000a517          	auipc	a0,0xa
    800246d8:	b0c50513          	addi	a0,a0,-1268 # 8002e1e0 <__func__.0+0x2f8>
    800246dc:	54f060ef          	jal	8002b42a <printf>
    800246e0:	00034797          	auipc	a5,0x34
    800246e4:	9317c783          	lbu	a5,-1743(a5) # 80058011 <excpt+0x1>
    800246e8:	0000a597          	auipc	a1,0xa
    800246ec:	ad058593          	addi	a1,a1,-1328 # 8002e1b8 <__func__.0+0x2d0>
    800246f0:	e789                	bnez	a5,800246fa <stateen_AIA_test_3+0xde>
    800246f2:	0000a597          	auipc	a1,0xa
    800246f6:	ab658593          	addi	a1,a1,-1354 # 8002e1a8 <__func__.0+0x2c0>
    800246fa:	0000a517          	auipc	a0,0xa
    800246fe:	afe50513          	addi	a0,a0,-1282 # 8002e1f8 <__func__.0+0x310>
    80024702:	529060ef          	jal	8002b42a <printf>
    80024706:	00034797          	auipc	a5,0x34
    8002470a:	90b7c783          	lbu	a5,-1781(a5) # 80058011 <excpt+0x1>
    8002470e:	14079d63          	bnez	a5,80024868 <stateen_AIA_test_3+0x24c>
    80024712:	4529                	li	a0,10
    80024714:	205050ef          	jal	8002a118 <putchar>
    80024718:	4401                	li	s0,0
    8002471a:	e499                	bnez	s1,80024728 <stateen_AIA_test_3+0x10c>
    8002471c:	00034417          	auipc	s0,0x34
    80024720:	8f544403          	lbu	s0,-1803(s0) # 80058011 <excpt+0x1>
    80024724:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024728:	4511                	li	a0,4
    8002472a:	fdedc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002472e:	ededc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024732:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024736:	919dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    8002473a:	08200593          	li	a1,130
    8002473e:	00013617          	auipc	a2,0x13
    80024742:	e1a60613          	addi	a2,a2,-486 # 80037558 <__func__.0+0x9670>
    80024746:	0000a517          	auipc	a0,0xa
    8002474a:	a9a50513          	addi	a0,a0,-1382 # 8002e1e0 <__func__.0+0x2f8>
    8002474e:	4dd060ef          	jal	8002b42a <printf>
    80024752:	00034797          	auipc	a5,0x34
    80024756:	8bf7c783          	lbu	a5,-1857(a5) # 80058011 <excpt+0x1>
    8002475a:	0000a597          	auipc	a1,0xa
    8002475e:	a5e58593          	addi	a1,a1,-1442 # 8002e1b8 <__func__.0+0x2d0>
    80024762:	e789                	bnez	a5,8002476c <stateen_AIA_test_3+0x150>
    80024764:	0000a597          	auipc	a1,0xa
    80024768:	a4458593          	addi	a1,a1,-1468 # 8002e1a8 <__func__.0+0x2c0>
    8002476c:	0000a517          	auipc	a0,0xa
    80024770:	a8c50513          	addi	a0,a0,-1396 # 8002e1f8 <__func__.0+0x310>
    80024774:	4b7060ef          	jal	8002b42a <printf>
    80024778:	00034797          	auipc	a5,0x34
    8002477c:	8997c783          	lbu	a5,-1895(a5) # 80058011 <excpt+0x1>
    80024780:	0c079963          	bnez	a5,80024852 <stateen_AIA_test_3+0x236>
    80024784:	4529                	li	a0,10
    80024786:	193050ef          	jal	8002a118 <putchar>
    8002478a:	c419                	beqz	s0,80024798 <stateen_AIA_test_3+0x17c>
    8002478c:	00034417          	auipc	s0,0x34
    80024790:	88544403          	lbu	s0,-1915(s0) # 80058011 <excpt+0x1>
    80024794:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024798:	4511                	li	a0,4
    8002479a:	f6edc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002479e:	e6edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800247a2:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800247a6:	8a9dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    800247aa:	08200593          	li	a1,130
    800247ae:	00013617          	auipc	a2,0x13
    800247b2:	dea60613          	addi	a2,a2,-534 # 80037598 <__func__.0+0x96b0>
    800247b6:	0000a517          	auipc	a0,0xa
    800247ba:	a2a50513          	addi	a0,a0,-1494 # 8002e1e0 <__func__.0+0x2f8>
    800247be:	46d060ef          	jal	8002b42a <printf>
    800247c2:	00034797          	auipc	a5,0x34
    800247c6:	84f7c783          	lbu	a5,-1969(a5) # 80058011 <excpt+0x1>
    800247ca:	0000a597          	auipc	a1,0xa
    800247ce:	9ee58593          	addi	a1,a1,-1554 # 8002e1b8 <__func__.0+0x2d0>
    800247d2:	e789                	bnez	a5,800247dc <stateen_AIA_test_3+0x1c0>
    800247d4:	0000a597          	auipc	a1,0xa
    800247d8:	9d458593          	addi	a1,a1,-1580 # 8002e1a8 <__func__.0+0x2c0>
    800247dc:	0000a517          	auipc	a0,0xa
    800247e0:	a1c50513          	addi	a0,a0,-1508 # 8002e1f8 <__func__.0+0x310>
    800247e4:	447060ef          	jal	8002b42a <printf>
    800247e8:	00034797          	auipc	a5,0x34
    800247ec:	8297c783          	lbu	a5,-2007(a5) # 80058011 <excpt+0x1>
    800247f0:	e7b1                	bnez	a5,8002483c <stateen_AIA_test_3+0x220>
    800247f2:	4529                	li	a0,10
    800247f4:	125050ef          	jal	8002a118 <putchar>
    800247f8:	c411                	beqz	s0,80024804 <stateen_AIA_test_3+0x1e8>
    800247fa:	00034797          	auipc	a5,0x34
    800247fe:	8177c783          	lbu	a5,-2025(a5) # 80058011 <excpt+0x1>
    80024802:	c79d                	beqz	a5,80024830 <stateen_AIA_test_3+0x214>
    80024804:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80024806:	0000a597          	auipc	a1,0xa
    8002480a:	9b258593          	addi	a1,a1,-1614 # 8002e1b8 <__func__.0+0x2d0>
    8002480e:	0000a517          	auipc	a0,0xa
    80024812:	a5250513          	addi	a0,a0,-1454 # 8002e260 <__func__.0+0x378>
    80024816:	415060ef          	jal	8002b42a <printf>
    8002481a:	4511                	li	a0,4
    8002481c:	eecdc0ef          	jal	80000f08 <goto_priv>
    80024820:	804dd0ef          	jal	80001824 <reset_state>

}
    80024824:	60e2                	ld	ra,24(sp)
    80024826:	8522                	mv	a0,s0
    80024828:	6442                	ld	s0,16(sp)
    8002482a:	64a2                	ld	s1,8(sp)
    8002482c:	6105                	addi	sp,sp,32
    8002482e:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024830:	4405                	li	s0,1
    TEST_END();
    80024832:	0000a597          	auipc	a1,0xa
    80024836:	97658593          	addi	a1,a1,-1674 # 8002e1a8 <__func__.0+0x2c0>
    8002483a:	bfd1                	j	8002480e <stateen_AIA_test_3+0x1f2>
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    8002483c:	0000a517          	auipc	a0,0xa
    80024840:	9c450513          	addi	a0,a0,-1596 # 8002e200 <__func__.0+0x318>
    80024844:	3e7060ef          	jal	8002b42a <printf>
    80024848:	02900513          	li	a0,41
    8002484c:	0cd050ef          	jal	8002a118 <putchar>
    80024850:	b74d                	j	800247f2 <stateen_AIA_test_3+0x1d6>
    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    80024852:	0000a517          	auipc	a0,0xa
    80024856:	9ae50513          	addi	a0,a0,-1618 # 8002e200 <__func__.0+0x318>
    8002485a:	3d1060ef          	jal	8002b42a <printf>
    8002485e:	02900513          	li	a0,41
    80024862:	0b7050ef          	jal	8002a118 <putchar>
    80024866:	bf39                	j	80024784 <stateen_AIA_test_3+0x168>
    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    80024868:	0000a517          	auipc	a0,0xa
    8002486c:	99850513          	addi	a0,a0,-1640 # 8002e200 <__func__.0+0x318>
    80024870:	3bb060ef          	jal	8002b42a <printf>
    80024874:	02900513          	li	a0,41
    80024878:	0a1050ef          	jal	8002a118 <putchar>
    8002487c:	bd59                	j	80024712 <stateen_AIA_test_3+0xf6>
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    8002487e:	0000a517          	auipc	a0,0xa
    80024882:	98250513          	addi	a0,a0,-1662 # 8002e200 <__func__.0+0x318>
    80024886:	3a5060ef          	jal	8002b42a <printf>
    8002488a:	02900513          	li	a0,41
    8002488e:	08b050ef          	jal	8002a118 <putchar>
    80024892:	bd19                	j	800246a8 <stateen_AIA_test_3+0x8c>

0000000080024894 <stateen_AIA_test_4>:


bool stateen_AIA_test_4(){
    80024894:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024896:	00009597          	auipc	a1,0x9
    8002489a:	2ba58593          	addi	a1,a1,698 # 8002db50 <__func__.19>
    8002489e:	0000a517          	auipc	a0,0xa
    800248a2:	92a50513          	addi	a0,a0,-1750 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_4(){
    800248a6:	ec06                	sd	ra,24(sp)
    800248a8:	e822                	sd	s0,16(sp)
    800248aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800248ac:	37f060ef          	jal	8002b42a <printf>
    800248b0:	4529                	li	a0,10
    800248b2:	067050ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800248b6:	4511                	li	a0,4
    800248b8:	e50dc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800248bc:	4785                	li	a5,1
    800248be:	17ee                	slli	a5,a5,0x3b
    800248c0:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800248c4:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800248c8:	30c025f3          	csrr	a1,mstateen0
    800248cc:	00012517          	auipc	a0,0x12
    800248d0:	0cc50513          	addi	a0,a0,204 # 80036998 <__func__.0+0x8ab0>
    800248d4:	357060ef          	jal	8002b42a <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800248d8:	60c025f3          	csrr	a1,hstateen0
    800248dc:	00012517          	auipc	a0,0x12
    800248e0:	0cc50513          	addi	a0,a0,204 # 800369a8 <__func__.0+0x8ac0>
    800248e4:	347060ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    800248e8:	4509                	li	a0,2
    800248ea:	e1edc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800248ee:	d1edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800248f2:	608027f3          	csrr	a5,hvien

    excpt_info();
    800248f6:	f58dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800248fa:	08200593          	li	a1,130
    800248fe:	00013617          	auipc	a2,0x13
    80024902:	cda60613          	addi	a2,a2,-806 # 800375d8 <__func__.0+0x96f0>
    80024906:	0000a517          	auipc	a0,0xa
    8002490a:	8da50513          	addi	a0,a0,-1830 # 8002e1e0 <__func__.0+0x2f8>
    8002490e:	31d060ef          	jal	8002b42a <printf>
    80024912:	00033797          	auipc	a5,0x33
    80024916:	6ff7c783          	lbu	a5,1791(a5) # 80058011 <excpt+0x1>
    8002491a:	00033497          	auipc	s1,0x33
    8002491e:	6f648493          	addi	s1,s1,1782 # 80058010 <excpt>
    80024922:	0000a597          	auipc	a1,0xa
    80024926:	89658593          	addi	a1,a1,-1898 # 8002e1b8 <__func__.0+0x2d0>
    8002492a:	cf89                	beqz	a5,80024944 <stateen_AIA_test_4+0xb0>
    8002492c:	6498                	ld	a4,8(s1)
    8002492e:	47d9                	li	a5,22
    80024930:	0000a597          	auipc	a1,0xa
    80024934:	87858593          	addi	a1,a1,-1928 # 8002e1a8 <__func__.0+0x2c0>
    80024938:	00f70663          	beq	a4,a5,80024944 <stateen_AIA_test_4+0xb0>
    8002493c:	0000a597          	auipc	a1,0xa
    80024940:	87c58593          	addi	a1,a1,-1924 # 8002e1b8 <__func__.0+0x2d0>
    80024944:	0000a517          	auipc	a0,0xa
    80024948:	8b450513          	addi	a0,a0,-1868 # 8002e1f8 <__func__.0+0x310>
    8002494c:	2df060ef          	jal	8002b42a <printf>
    80024950:	00033797          	auipc	a5,0x33
    80024954:	6c17c783          	lbu	a5,1729(a5) # 80058011 <excpt+0x1>
    80024958:	c789                	beqz	a5,80024962 <stateen_AIA_test_4+0xce>
    8002495a:	6498                	ld	a4,8(s1)
    8002495c:	47d9                	li	a5,22
    8002495e:	00f70c63          	beq	a4,a5,80024976 <stateen_AIA_test_4+0xe2>
    80024962:	0000a517          	auipc	a0,0xa
    80024966:	89e50513          	addi	a0,a0,-1890 # 8002e200 <__func__.0+0x318>
    8002496a:	2c1060ef          	jal	8002b42a <printf>
    8002496e:	02900513          	li	a0,41
    80024972:	7a6050ef          	jal	8002a118 <putchar>
    80024976:	4529                	li	a0,10
    80024978:	7a0050ef          	jal	8002a118 <putchar>
    8002497c:	00033797          	auipc	a5,0x33
    80024980:	6957c783          	lbu	a5,1685(a5) # 80058011 <excpt+0x1>
    80024984:	4401                	li	s0,0
    80024986:	c789                	beqz	a5,80024990 <stateen_AIA_test_4+0xfc>
    80024988:	6480                	ld	s0,8(s1)
    8002498a:	1429                	addi	s0,s0,-22
    8002498c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024990:	4509                	li	a0,2
    80024992:	d76dc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024996:	c76dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    8002499a:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002499e:	eb0dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800249a2:	08200593          	li	a1,130
    800249a6:	00013617          	auipc	a2,0x13
    800249aa:	c8260613          	addi	a2,a2,-894 # 80037628 <__func__.0+0x9740>
    800249ae:	0000a517          	auipc	a0,0xa
    800249b2:	83250513          	addi	a0,a0,-1998 # 8002e1e0 <__func__.0+0x2f8>
    800249b6:	275060ef          	jal	8002b42a <printf>
    800249ba:	00033797          	auipc	a5,0x33
    800249be:	6577c783          	lbu	a5,1623(a5) # 80058011 <excpt+0x1>
    800249c2:	00009597          	auipc	a1,0x9
    800249c6:	7f658593          	addi	a1,a1,2038 # 8002e1b8 <__func__.0+0x2d0>
    800249ca:	cf89                	beqz	a5,800249e4 <stateen_AIA_test_4+0x150>
    800249cc:	6498                	ld	a4,8(s1)
    800249ce:	47d9                	li	a5,22
    800249d0:	00009597          	auipc	a1,0x9
    800249d4:	7d858593          	addi	a1,a1,2008 # 8002e1a8 <__func__.0+0x2c0>
    800249d8:	00f70663          	beq	a4,a5,800249e4 <stateen_AIA_test_4+0x150>
    800249dc:	00009597          	auipc	a1,0x9
    800249e0:	7dc58593          	addi	a1,a1,2012 # 8002e1b8 <__func__.0+0x2d0>
    800249e4:	0000a517          	auipc	a0,0xa
    800249e8:	81450513          	addi	a0,a0,-2028 # 8002e1f8 <__func__.0+0x310>
    800249ec:	23f060ef          	jal	8002b42a <printf>
    800249f0:	00033797          	auipc	a5,0x33
    800249f4:	6217c783          	lbu	a5,1569(a5) # 80058011 <excpt+0x1>
    800249f8:	c789                	beqz	a5,80024a02 <stateen_AIA_test_4+0x16e>
    800249fa:	6498                	ld	a4,8(s1)
    800249fc:	47d9                	li	a5,22
    800249fe:	00f70c63          	beq	a4,a5,80024a16 <stateen_AIA_test_4+0x182>
    80024a02:	00009517          	auipc	a0,0x9
    80024a06:	7fe50513          	addi	a0,a0,2046 # 8002e200 <__func__.0+0x318>
    80024a0a:	221060ef          	jal	8002b42a <printf>
    80024a0e:	02900513          	li	a0,41
    80024a12:	706050ef          	jal	8002a118 <putchar>
    80024a16:	4529                	li	a0,10
    80024a18:	700050ef          	jal	8002a118 <putchar>
    80024a1c:	c801                	beqz	s0,80024a2c <stateen_AIA_test_4+0x198>
    80024a1e:	00033797          	auipc	a5,0x33
    80024a22:	5f37c783          	lbu	a5,1523(a5) # 80058011 <excpt+0x1>
    80024a26:	4401                	li	s0,0
    80024a28:	18079363          	bnez	a5,80024bae <stateen_AIA_test_4+0x31a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024a2c:	4509                	li	a0,2
    80024a2e:	cdadc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024a32:	bdadc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024a36:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024a3a:	e14dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024a3e:	08200593          	li	a1,130
    80024a42:	00013617          	auipc	a2,0x13
    80024a46:	c3e60613          	addi	a2,a2,-962 # 80037680 <__func__.0+0x9798>
    80024a4a:	00009517          	auipc	a0,0x9
    80024a4e:	79650513          	addi	a0,a0,1942 # 8002e1e0 <__func__.0+0x2f8>
    80024a52:	1d9060ef          	jal	8002b42a <printf>
    80024a56:	00033797          	auipc	a5,0x33
    80024a5a:	5bb7c783          	lbu	a5,1467(a5) # 80058011 <excpt+0x1>
    80024a5e:	00009597          	auipc	a1,0x9
    80024a62:	75a58593          	addi	a1,a1,1882 # 8002e1b8 <__func__.0+0x2d0>
    80024a66:	cf89                	beqz	a5,80024a80 <stateen_AIA_test_4+0x1ec>
    80024a68:	6498                	ld	a4,8(s1)
    80024a6a:	47d9                	li	a5,22
    80024a6c:	00009597          	auipc	a1,0x9
    80024a70:	73c58593          	addi	a1,a1,1852 # 8002e1a8 <__func__.0+0x2c0>
    80024a74:	00f70663          	beq	a4,a5,80024a80 <stateen_AIA_test_4+0x1ec>
    80024a78:	00009597          	auipc	a1,0x9
    80024a7c:	74058593          	addi	a1,a1,1856 # 8002e1b8 <__func__.0+0x2d0>
    80024a80:	00009517          	auipc	a0,0x9
    80024a84:	77850513          	addi	a0,a0,1912 # 8002e1f8 <__func__.0+0x310>
    80024a88:	1a3060ef          	jal	8002b42a <printf>
    80024a8c:	00033797          	auipc	a5,0x33
    80024a90:	5857c783          	lbu	a5,1413(a5) # 80058011 <excpt+0x1>
    80024a94:	c789                	beqz	a5,80024a9e <stateen_AIA_test_4+0x20a>
    80024a96:	6498                	ld	a4,8(s1)
    80024a98:	47d9                	li	a5,22
    80024a9a:	00f70c63          	beq	a4,a5,80024ab2 <stateen_AIA_test_4+0x21e>
    80024a9e:	00009517          	auipc	a0,0x9
    80024aa2:	76250513          	addi	a0,a0,1890 # 8002e200 <__func__.0+0x318>
    80024aa6:	185060ef          	jal	8002b42a <printf>
    80024aaa:	02900513          	li	a0,41
    80024aae:	66a050ef          	jal	8002a118 <putchar>
    80024ab2:	4529                	li	a0,10
    80024ab4:	664050ef          	jal	8002a118 <putchar>
    80024ab8:	c801                	beqz	s0,80024ac8 <stateen_AIA_test_4+0x234>
    80024aba:	00033797          	auipc	a5,0x33
    80024abe:	5577c783          	lbu	a5,1367(a5) # 80058011 <excpt+0x1>
    80024ac2:	4401                	li	s0,0
    80024ac4:	0e079063          	bnez	a5,80024ba4 <stateen_AIA_test_4+0x310>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024ac8:	4509                	li	a0,2
    80024aca:	c3edc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024ace:	b3edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024ad2:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024ad6:	d78dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ada:	08200593          	li	a1,130
    80024ade:	00013617          	auipc	a2,0x13
    80024ae2:	bf260613          	addi	a2,a2,-1038 # 800376d0 <__func__.0+0x97e8>
    80024ae6:	00009517          	auipc	a0,0x9
    80024aea:	6fa50513          	addi	a0,a0,1786 # 8002e1e0 <__func__.0+0x2f8>
    80024aee:	13d060ef          	jal	8002b42a <printf>
    80024af2:	00033797          	auipc	a5,0x33
    80024af6:	51f7c783          	lbu	a5,1311(a5) # 80058011 <excpt+0x1>
    80024afa:	00009597          	auipc	a1,0x9
    80024afe:	6be58593          	addi	a1,a1,1726 # 8002e1b8 <__func__.0+0x2d0>
    80024b02:	cf89                	beqz	a5,80024b1c <stateen_AIA_test_4+0x288>
    80024b04:	6498                	ld	a4,8(s1)
    80024b06:	47d9                	li	a5,22
    80024b08:	00009597          	auipc	a1,0x9
    80024b0c:	6a058593          	addi	a1,a1,1696 # 8002e1a8 <__func__.0+0x2c0>
    80024b10:	00f70663          	beq	a4,a5,80024b1c <stateen_AIA_test_4+0x288>
    80024b14:	00009597          	auipc	a1,0x9
    80024b18:	6a458593          	addi	a1,a1,1700 # 8002e1b8 <__func__.0+0x2d0>
    80024b1c:	00009517          	auipc	a0,0x9
    80024b20:	6dc50513          	addi	a0,a0,1756 # 8002e1f8 <__func__.0+0x310>
    80024b24:	107060ef          	jal	8002b42a <printf>
    80024b28:	00033797          	auipc	a5,0x33
    80024b2c:	4e97c783          	lbu	a5,1257(a5) # 80058011 <excpt+0x1>
    80024b30:	c789                	beqz	a5,80024b3a <stateen_AIA_test_4+0x2a6>
    80024b32:	6498                	ld	a4,8(s1)
    80024b34:	47d9                	li	a5,22
    80024b36:	00f70c63          	beq	a4,a5,80024b4e <stateen_AIA_test_4+0x2ba>
    80024b3a:	00009517          	auipc	a0,0x9
    80024b3e:	6c650513          	addi	a0,a0,1734 # 8002e200 <__func__.0+0x318>
    80024b42:	0e9060ef          	jal	8002b42a <printf>
    80024b46:	02900513          	li	a0,41
    80024b4a:	5ce050ef          	jal	8002a118 <putchar>
    80024b4e:	4529                	li	a0,10
    80024b50:	5c8050ef          	jal	8002a118 <putchar>
    80024b54:	c015                	beqz	s0,80024b78 <stateen_AIA_test_4+0x2e4>
    80024b56:	00033417          	auipc	s0,0x33
    80024b5a:	4bb44403          	lbu	s0,1211(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80024b5e:	00009597          	auipc	a1,0x9
    80024b62:	65a58593          	addi	a1,a1,1626 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b66:	cc11                	beqz	s0,80024b82 <stateen_AIA_test_4+0x2ee>
    80024b68:	6498                	ld	a4,8(s1)
    80024b6a:	47d9                	li	a5,22
    TEST_END();
    80024b6c:	00009597          	auipc	a1,0x9
    80024b70:	63c58593          	addi	a1,a1,1596 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b74:	00f70763          	beq	a4,a5,80024b82 <stateen_AIA_test_4+0x2ee>
    80024b78:	4401                	li	s0,0
    TEST_END();
    80024b7a:	00009597          	auipc	a1,0x9
    80024b7e:	63e58593          	addi	a1,a1,1598 # 8002e1b8 <__func__.0+0x2d0>
    80024b82:	00009517          	auipc	a0,0x9
    80024b86:	6de50513          	addi	a0,a0,1758 # 8002e260 <__func__.0+0x378>
    80024b8a:	0a1060ef          	jal	8002b42a <printf>
    80024b8e:	4511                	li	a0,4
    80024b90:	b78dc0ef          	jal	80000f08 <goto_priv>
    80024b94:	c91dc0ef          	jal	80001824 <reset_state>

}
    80024b98:	60e2                	ld	ra,24(sp)
    80024b9a:	8522                	mv	a0,s0
    80024b9c:	6442                	ld	s0,16(sp)
    80024b9e:	64a2                	ld	s1,8(sp)
    80024ba0:	6105                	addi	sp,sp,32
    80024ba2:	8082                	ret
    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ba4:	6480                	ld	s0,8(s1)
    80024ba6:	1429                	addi	s0,s0,-22
    80024ba8:	00143413          	seqz	s0,s0
    80024bac:	bf31                	j	80024ac8 <stateen_AIA_test_4+0x234>
    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024bae:	6480                	ld	s0,8(s1)
    80024bb0:	1429                	addi	s0,s0,-22
    80024bb2:	00143413          	seqz	s0,s0
    80024bb6:	bd9d                	j	80024a2c <stateen_AIA_test_4+0x198>

0000000080024bb8 <stateen_AIA_test_5>:

bool stateen_AIA_test_5(){
    80024bb8:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,hs mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024bba:	00009597          	auipc	a1,0x9
    80024bbe:	fae58593          	addi	a1,a1,-82 # 8002db68 <__func__.18>
    80024bc2:	00009517          	auipc	a0,0x9
    80024bc6:	60650513          	addi	a0,a0,1542 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_5(){
    80024bca:	ec06                	sd	ra,24(sp)
    80024bcc:	e822                	sd	s0,16(sp)
    80024bce:	e426                	sd	s1,8(sp)
    TEST_START();
    80024bd0:	05b060ef          	jal	8002b42a <printf>
    80024bd4:	4529                	li	a0,10
    80024bd6:	542050ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80024bda:	4511                	li	a0,4
    80024bdc:	b2cdc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024be0:	4785                	li	a5,1
    80024be2:	17ee                	slli	a5,a5,0x3b
    80024be4:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80024be8:	450d                	li	a0,3
    80024bea:	b1edc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024bee:	a1edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024bf2:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024bf6:	c58dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024bfa:	08200593          	li	a1,130
    80024bfe:	00013617          	auipc	a2,0x13
    80024c02:	b2a60613          	addi	a2,a2,-1238 # 80037728 <__func__.0+0x9840>
    80024c06:	00009517          	auipc	a0,0x9
    80024c0a:	5da50513          	addi	a0,a0,1498 # 8002e1e0 <__func__.0+0x2f8>
    80024c0e:	01d060ef          	jal	8002b42a <printf>
    80024c12:	00033797          	auipc	a5,0x33
    80024c16:	3ff7c783          	lbu	a5,1023(a5) # 80058011 <excpt+0x1>
    80024c1a:	00033497          	auipc	s1,0x33
    80024c1e:	3f648493          	addi	s1,s1,1014 # 80058010 <excpt>
    80024c22:	00009597          	auipc	a1,0x9
    80024c26:	59658593          	addi	a1,a1,1430 # 8002e1b8 <__func__.0+0x2d0>
    80024c2a:	cf89                	beqz	a5,80024c44 <stateen_AIA_test_5+0x8c>
    80024c2c:	6498                	ld	a4,8(s1)
    80024c2e:	4789                	li	a5,2
    80024c30:	00009597          	auipc	a1,0x9
    80024c34:	57858593          	addi	a1,a1,1400 # 8002e1a8 <__func__.0+0x2c0>
    80024c38:	00f70663          	beq	a4,a5,80024c44 <stateen_AIA_test_5+0x8c>
    80024c3c:	00009597          	auipc	a1,0x9
    80024c40:	57c58593          	addi	a1,a1,1404 # 8002e1b8 <__func__.0+0x2d0>
    80024c44:	00009517          	auipc	a0,0x9
    80024c48:	5b450513          	addi	a0,a0,1460 # 8002e1f8 <__func__.0+0x310>
    80024c4c:	7de060ef          	jal	8002b42a <printf>
    80024c50:	00033797          	auipc	a5,0x33
    80024c54:	3c17c783          	lbu	a5,961(a5) # 80058011 <excpt+0x1>
    80024c58:	c789                	beqz	a5,80024c62 <stateen_AIA_test_5+0xaa>
    80024c5a:	6498                	ld	a4,8(s1)
    80024c5c:	4789                	li	a5,2
    80024c5e:	00f70c63          	beq	a4,a5,80024c76 <stateen_AIA_test_5+0xbe>
    80024c62:	00009517          	auipc	a0,0x9
    80024c66:	59e50513          	addi	a0,a0,1438 # 8002e200 <__func__.0+0x318>
    80024c6a:	7c0060ef          	jal	8002b42a <printf>
    80024c6e:	02900513          	li	a0,41
    80024c72:	4a6050ef          	jal	8002a118 <putchar>
    80024c76:	4529                	li	a0,10
    80024c78:	4a0050ef          	jal	8002a118 <putchar>
    80024c7c:	00033797          	auipc	a5,0x33
    80024c80:	3957c783          	lbu	a5,917(a5) # 80058011 <excpt+0x1>
    80024c84:	4401                	li	s0,0
    80024c86:	c789                	beqz	a5,80024c90 <stateen_AIA_test_5+0xd8>
    80024c88:	6480                	ld	s0,8(s1)
    80024c8a:	1479                	addi	s0,s0,-2
    80024c8c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024c90:	450d                	li	a0,3
    80024c92:	a76dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024c96:	976dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024c9a:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024c9e:	bb0dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024ca2:	08200593          	li	a1,130
    80024ca6:	00013617          	auipc	a2,0x13
    80024caa:	ad260613          	addi	a2,a2,-1326 # 80037778 <__func__.0+0x9890>
    80024cae:	00009517          	auipc	a0,0x9
    80024cb2:	53250513          	addi	a0,a0,1330 # 8002e1e0 <__func__.0+0x2f8>
    80024cb6:	774060ef          	jal	8002b42a <printf>
    80024cba:	00033797          	auipc	a5,0x33
    80024cbe:	3577c783          	lbu	a5,855(a5) # 80058011 <excpt+0x1>
    80024cc2:	00009597          	auipc	a1,0x9
    80024cc6:	4f658593          	addi	a1,a1,1270 # 8002e1b8 <__func__.0+0x2d0>
    80024cca:	cf89                	beqz	a5,80024ce4 <stateen_AIA_test_5+0x12c>
    80024ccc:	6498                	ld	a4,8(s1)
    80024cce:	4789                	li	a5,2
    80024cd0:	00009597          	auipc	a1,0x9
    80024cd4:	4d858593          	addi	a1,a1,1240 # 8002e1a8 <__func__.0+0x2c0>
    80024cd8:	00f70663          	beq	a4,a5,80024ce4 <stateen_AIA_test_5+0x12c>
    80024cdc:	00009597          	auipc	a1,0x9
    80024ce0:	4dc58593          	addi	a1,a1,1244 # 8002e1b8 <__func__.0+0x2d0>
    80024ce4:	00009517          	auipc	a0,0x9
    80024ce8:	51450513          	addi	a0,a0,1300 # 8002e1f8 <__func__.0+0x310>
    80024cec:	73e060ef          	jal	8002b42a <printf>
    80024cf0:	00033797          	auipc	a5,0x33
    80024cf4:	3217c783          	lbu	a5,801(a5) # 80058011 <excpt+0x1>
    80024cf8:	c789                	beqz	a5,80024d02 <stateen_AIA_test_5+0x14a>
    80024cfa:	6498                	ld	a4,8(s1)
    80024cfc:	4789                	li	a5,2
    80024cfe:	00f70c63          	beq	a4,a5,80024d16 <stateen_AIA_test_5+0x15e>
    80024d02:	00009517          	auipc	a0,0x9
    80024d06:	4fe50513          	addi	a0,a0,1278 # 8002e200 <__func__.0+0x318>
    80024d0a:	720060ef          	jal	8002b42a <printf>
    80024d0e:	02900513          	li	a0,41
    80024d12:	406050ef          	jal	8002a118 <putchar>
    80024d16:	4529                	li	a0,10
    80024d18:	400050ef          	jal	8002a118 <putchar>
    80024d1c:	c801                	beqz	s0,80024d2c <stateen_AIA_test_5+0x174>
    80024d1e:	00033797          	auipc	a5,0x33
    80024d22:	2f37c783          	lbu	a5,755(a5) # 80058011 <excpt+0x1>
    80024d26:	4401                	li	s0,0
    80024d28:	18079363          	bnez	a5,80024eae <stateen_AIA_test_5+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024d2c:	450d                	li	a0,3
    80024d2e:	9dadc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024d32:	8dadc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024d36:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024d3a:	b14dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024d3e:	08200593          	li	a1,130
    80024d42:	00013617          	auipc	a2,0x13
    80024d46:	a8660613          	addi	a2,a2,-1402 # 800377c8 <__func__.0+0x98e0>
    80024d4a:	00009517          	auipc	a0,0x9
    80024d4e:	49650513          	addi	a0,a0,1174 # 8002e1e0 <__func__.0+0x2f8>
    80024d52:	6d8060ef          	jal	8002b42a <printf>
    80024d56:	00033797          	auipc	a5,0x33
    80024d5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    80024d5e:	00009597          	auipc	a1,0x9
    80024d62:	45a58593          	addi	a1,a1,1114 # 8002e1b8 <__func__.0+0x2d0>
    80024d66:	cf89                	beqz	a5,80024d80 <stateen_AIA_test_5+0x1c8>
    80024d68:	6498                	ld	a4,8(s1)
    80024d6a:	4789                	li	a5,2
    80024d6c:	00009597          	auipc	a1,0x9
    80024d70:	43c58593          	addi	a1,a1,1084 # 8002e1a8 <__func__.0+0x2c0>
    80024d74:	00f70663          	beq	a4,a5,80024d80 <stateen_AIA_test_5+0x1c8>
    80024d78:	00009597          	auipc	a1,0x9
    80024d7c:	44058593          	addi	a1,a1,1088 # 8002e1b8 <__func__.0+0x2d0>
    80024d80:	00009517          	auipc	a0,0x9
    80024d84:	47850513          	addi	a0,a0,1144 # 8002e1f8 <__func__.0+0x310>
    80024d88:	6a2060ef          	jal	8002b42a <printf>
    80024d8c:	00033797          	auipc	a5,0x33
    80024d90:	2857c783          	lbu	a5,645(a5) # 80058011 <excpt+0x1>
    80024d94:	c789                	beqz	a5,80024d9e <stateen_AIA_test_5+0x1e6>
    80024d96:	6498                	ld	a4,8(s1)
    80024d98:	4789                	li	a5,2
    80024d9a:	00f70c63          	beq	a4,a5,80024db2 <stateen_AIA_test_5+0x1fa>
    80024d9e:	00009517          	auipc	a0,0x9
    80024da2:	46250513          	addi	a0,a0,1122 # 8002e200 <__func__.0+0x318>
    80024da6:	684060ef          	jal	8002b42a <printf>
    80024daa:	02900513          	li	a0,41
    80024dae:	36a050ef          	jal	8002a118 <putchar>
    80024db2:	4529                	li	a0,10
    80024db4:	364050ef          	jal	8002a118 <putchar>
    80024db8:	c801                	beqz	s0,80024dc8 <stateen_AIA_test_5+0x210>
    80024dba:	00033797          	auipc	a5,0x33
    80024dbe:	2577c783          	lbu	a5,599(a5) # 80058011 <excpt+0x1>
    80024dc2:	4401                	li	s0,0
    80024dc4:	0e079063          	bnez	a5,80024ea4 <stateen_AIA_test_5+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024dc8:	450d                	li	a0,3
    80024dca:	93edc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024dce:	83edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024dd2:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024dd6:	a78dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024dda:	08200593          	li	a1,130
    80024dde:	00013617          	auipc	a2,0x13
    80024de2:	a3a60613          	addi	a2,a2,-1478 # 80037818 <__func__.0+0x9930>
    80024de6:	00009517          	auipc	a0,0x9
    80024dea:	3fa50513          	addi	a0,a0,1018 # 8002e1e0 <__func__.0+0x2f8>
    80024dee:	63c060ef          	jal	8002b42a <printf>
    80024df2:	00033797          	auipc	a5,0x33
    80024df6:	21f7c783          	lbu	a5,543(a5) # 80058011 <excpt+0x1>
    80024dfa:	00009597          	auipc	a1,0x9
    80024dfe:	3be58593          	addi	a1,a1,958 # 8002e1b8 <__func__.0+0x2d0>
    80024e02:	cf89                	beqz	a5,80024e1c <stateen_AIA_test_5+0x264>
    80024e04:	6498                	ld	a4,8(s1)
    80024e06:	4789                	li	a5,2
    80024e08:	00009597          	auipc	a1,0x9
    80024e0c:	3a058593          	addi	a1,a1,928 # 8002e1a8 <__func__.0+0x2c0>
    80024e10:	00f70663          	beq	a4,a5,80024e1c <stateen_AIA_test_5+0x264>
    80024e14:	00009597          	auipc	a1,0x9
    80024e18:	3a458593          	addi	a1,a1,932 # 8002e1b8 <__func__.0+0x2d0>
    80024e1c:	00009517          	auipc	a0,0x9
    80024e20:	3dc50513          	addi	a0,a0,988 # 8002e1f8 <__func__.0+0x310>
    80024e24:	606060ef          	jal	8002b42a <printf>
    80024e28:	00033797          	auipc	a5,0x33
    80024e2c:	1e97c783          	lbu	a5,489(a5) # 80058011 <excpt+0x1>
    80024e30:	c789                	beqz	a5,80024e3a <stateen_AIA_test_5+0x282>
    80024e32:	6498                	ld	a4,8(s1)
    80024e34:	4789                	li	a5,2
    80024e36:	00f70c63          	beq	a4,a5,80024e4e <stateen_AIA_test_5+0x296>
    80024e3a:	00009517          	auipc	a0,0x9
    80024e3e:	3c650513          	addi	a0,a0,966 # 8002e200 <__func__.0+0x318>
    80024e42:	5e8060ef          	jal	8002b42a <printf>
    80024e46:	02900513          	li	a0,41
    80024e4a:	2ce050ef          	jal	8002a118 <putchar>
    80024e4e:	4529                	li	a0,10
    80024e50:	2c8050ef          	jal	8002a118 <putchar>
    80024e54:	c015                	beqz	s0,80024e78 <stateen_AIA_test_5+0x2c0>
    80024e56:	00033417          	auipc	s0,0x33
    80024e5a:	1bb44403          	lbu	s0,443(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024e5e:	00009597          	auipc	a1,0x9
    80024e62:	35a58593          	addi	a1,a1,858 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024e66:	cc11                	beqz	s0,80024e82 <stateen_AIA_test_5+0x2ca>
    80024e68:	6498                	ld	a4,8(s1)
    80024e6a:	4789                	li	a5,2
    TEST_END();
    80024e6c:	00009597          	auipc	a1,0x9
    80024e70:	33c58593          	addi	a1,a1,828 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024e74:	00f70763          	beq	a4,a5,80024e82 <stateen_AIA_test_5+0x2ca>
    80024e78:	4401                	li	s0,0
    TEST_END();
    80024e7a:	00009597          	auipc	a1,0x9
    80024e7e:	33e58593          	addi	a1,a1,830 # 8002e1b8 <__func__.0+0x2d0>
    80024e82:	00009517          	auipc	a0,0x9
    80024e86:	3de50513          	addi	a0,a0,990 # 8002e260 <__func__.0+0x378>
    80024e8a:	5a0060ef          	jal	8002b42a <printf>
    80024e8e:	4511                	li	a0,4
    80024e90:	878dc0ef          	jal	80000f08 <goto_priv>
    80024e94:	991dc0ef          	jal	80001824 <reset_state>

}
    80024e98:	60e2                	ld	ra,24(sp)
    80024e9a:	8522                	mv	a0,s0
    80024e9c:	6442                	ld	s0,16(sp)
    80024e9e:	64a2                	ld	s1,8(sp)
    80024ea0:	6105                	addi	sp,sp,32
    80024ea2:	8082                	ret
    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024ea4:	6480                	ld	s0,8(s1)
    80024ea6:	1479                	addi	s0,s0,-2
    80024ea8:	00143413          	seqz	s0,s0
    80024eac:	bf31                	j	80024dc8 <stateen_AIA_test_5+0x210>
    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024eae:	6480                	ld	s0,8(s1)
    80024eb0:	1479                	addi	s0,s0,-2
    80024eb2:	00143413          	seqz	s0,s0
    80024eb6:	bd9d                	j	80024d2c <stateen_AIA_test_5+0x174>

0000000080024eb8 <stateen_AIA_test_6>:


bool stateen_AIA_test_6(){
    80024eb8:	1101                	addi	sp,sp,-32

    TEST_START();
    80024eba:	00009597          	auipc	a1,0x9
    80024ebe:	cc658593          	addi	a1,a1,-826 # 8002db80 <__func__.17>
    80024ec2:	00009517          	auipc	a0,0x9
    80024ec6:	30650513          	addi	a0,a0,774 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_6(){
    80024eca:	ec06                	sd	ra,24(sp)
    80024ecc:	e822                	sd	s0,16(sp)
    80024ece:	e426                	sd	s1,8(sp)
    TEST_START();
    80024ed0:	55a060ef          	jal	8002b42a <printf>
    80024ed4:	4529                	li	a0,10
    80024ed6:	242050ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80024eda:	4511                	li	a0,4
    80024edc:	82cdc0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1,v=0时,可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024ee0:	4785                	li	a5,1
    80024ee2:	17ee                	slli	a5,a5,0x3b
    80024ee4:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024ee8:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80024eec:	450d                	li	a0,3
    80024eee:	81adc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024ef2:	f1bdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024ef6:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024efa:	954dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80024efe:	08200593          	li	a1,130
    80024f02:	00013617          	auipc	a2,0x13
    80024f06:	96660613          	addi	a2,a2,-1690 # 80037868 <__func__.0+0x9980>
    80024f0a:	00009517          	auipc	a0,0x9
    80024f0e:	2d650513          	addi	a0,a0,726 # 8002e1e0 <__func__.0+0x2f8>
    80024f12:	518060ef          	jal	8002b42a <printf>
    80024f16:	00033797          	auipc	a5,0x33
    80024f1a:	0fb7c783          	lbu	a5,251(a5) # 80058011 <excpt+0x1>
    80024f1e:	00009597          	auipc	a1,0x9
    80024f22:	28a58593          	addi	a1,a1,650 # 8002e1a8 <__func__.0+0x2c0>
    80024f26:	c789                	beqz	a5,80024f30 <stateen_AIA_test_6+0x78>
    80024f28:	00009597          	auipc	a1,0x9
    80024f2c:	29058593          	addi	a1,a1,656 # 8002e1b8 <__func__.0+0x2d0>
    80024f30:	00009517          	auipc	a0,0x9
    80024f34:	2c850513          	addi	a0,a0,712 # 8002e1f8 <__func__.0+0x310>
    80024f38:	4f2060ef          	jal	8002b42a <printf>
    80024f3c:	00033797          	auipc	a5,0x33
    80024f40:	0d57c783          	lbu	a5,213(a5) # 80058011 <excpt+0x1>
    80024f44:	5e079b63          	bnez	a5,8002553a <stateen_AIA_test_6+0x682>
    80024f48:	4529                	li	a0,10
    80024f4a:	1ce050ef          	jal	8002a118 <putchar>
    80024f4e:	00033497          	auipc	s1,0x33
    80024f52:	0c34c483          	lbu	s1,195(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_HVICTL);
    80024f56:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024f5a:	8f4dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80024f5e:	08200593          	li	a1,130
    80024f62:	00013617          	auipc	a2,0x13
    80024f66:	95660613          	addi	a2,a2,-1706 # 800378b8 <__func__.0+0x99d0>
    80024f6a:	00009517          	auipc	a0,0x9
    80024f6e:	27650513          	addi	a0,a0,630 # 8002e1e0 <__func__.0+0x2f8>
    80024f72:	4b8060ef          	jal	8002b42a <printf>
    80024f76:	00033797          	auipc	a5,0x33
    80024f7a:	09b7c783          	lbu	a5,155(a5) # 80058011 <excpt+0x1>
    80024f7e:	00009597          	auipc	a1,0x9
    80024f82:	23a58593          	addi	a1,a1,570 # 8002e1b8 <__func__.0+0x2d0>
    80024f86:	e789                	bnez	a5,80024f90 <stateen_AIA_test_6+0xd8>
    80024f88:	00009597          	auipc	a1,0x9
    80024f8c:	22058593          	addi	a1,a1,544 # 8002e1a8 <__func__.0+0x2c0>
    80024f90:	00009517          	auipc	a0,0x9
    80024f94:	26850513          	addi	a0,a0,616 # 8002e1f8 <__func__.0+0x310>
    80024f98:	492060ef          	jal	8002b42a <printf>
    80024f9c:	00033797          	auipc	a5,0x33
    80024fa0:	0757c783          	lbu	a5,117(a5) # 80058011 <excpt+0x1>
    80024fa4:	58079063          	bnez	a5,80025524 <stateen_AIA_test_6+0x66c>
    80024fa8:	4529                	li	a0,10
    80024faa:	16e050ef          	jal	8002a118 <putchar>
    80024fae:	4401                	li	s0,0
    80024fb0:	e499                	bnez	s1,80024fbe <stateen_AIA_test_6+0x106>
    80024fb2:	00033417          	auipc	s0,0x33
    80024fb6:	05f44403          	lbu	s0,95(s0) # 80058011 <excpt+0x1>
    80024fba:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80024fbe:	4505                	li	a0,1
    80024fc0:	f49db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024fc4:	e49db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024fc8:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024fcc:	882dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80024fd0:	08200593          	li	a1,130
    80024fd4:	00013617          	auipc	a2,0x13
    80024fd8:	93460613          	addi	a2,a2,-1740 # 80037908 <__func__.0+0x9a20>
    80024fdc:	00009517          	auipc	a0,0x9
    80024fe0:	20450513          	addi	a0,a0,516 # 8002e1e0 <__func__.0+0x2f8>
    80024fe4:	446060ef          	jal	8002b42a <printf>
    80024fe8:	00033797          	auipc	a5,0x33
    80024fec:	0297c783          	lbu	a5,41(a5) # 80058011 <excpt+0x1>
    80024ff0:	00009597          	auipc	a1,0x9
    80024ff4:	1c858593          	addi	a1,a1,456 # 8002e1b8 <__func__.0+0x2d0>
    80024ff8:	e789                	bnez	a5,80025002 <stateen_AIA_test_6+0x14a>
    80024ffa:	00009597          	auipc	a1,0x9
    80024ffe:	1ae58593          	addi	a1,a1,430 # 8002e1a8 <__func__.0+0x2c0>
    80025002:	00009517          	auipc	a0,0x9
    80025006:	1f650513          	addi	a0,a0,502 # 8002e1f8 <__func__.0+0x310>
    8002500a:	420060ef          	jal	8002b42a <printf>
    8002500e:	00033797          	auipc	a5,0x33
    80025012:	0037c783          	lbu	a5,3(a5) # 80058011 <excpt+0x1>
    80025016:	4e079c63          	bnez	a5,8002550e <stateen_AIA_test_6+0x656>
    8002501a:	4529                	li	a0,10
    8002501c:	0fc050ef          	jal	8002a118 <putchar>
    80025020:	c419                	beqz	s0,8002502e <stateen_AIA_test_6+0x176>
    80025022:	00033417          	auipc	s0,0x33
    80025026:	fef44403          	lbu	s0,-17(s0) # 80058011 <excpt+0x1>
    8002502a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    8002502e:	4505                	li	a0,1
    80025030:	ed9db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025034:	dd9db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025038:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002503c:	812dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025040:	08200593          	li	a1,130
    80025044:	00013617          	auipc	a2,0x13
    80025048:	91460613          	addi	a2,a2,-1772 # 80037958 <__func__.0+0x9a70>
    8002504c:	00009517          	auipc	a0,0x9
    80025050:	19450513          	addi	a0,a0,404 # 8002e1e0 <__func__.0+0x2f8>
    80025054:	3d6060ef          	jal	8002b42a <printf>
    80025058:	00033797          	auipc	a5,0x33
    8002505c:	fb97c783          	lbu	a5,-71(a5) # 80058011 <excpt+0x1>
    80025060:	00009597          	auipc	a1,0x9
    80025064:	15858593          	addi	a1,a1,344 # 8002e1b8 <__func__.0+0x2d0>
    80025068:	e789                	bnez	a5,80025072 <stateen_AIA_test_6+0x1ba>
    8002506a:	00009597          	auipc	a1,0x9
    8002506e:	13e58593          	addi	a1,a1,318 # 8002e1a8 <__func__.0+0x2c0>
    80025072:	00009517          	auipc	a0,0x9
    80025076:	18650513          	addi	a0,a0,390 # 8002e1f8 <__func__.0+0x310>
    8002507a:	3b0060ef          	jal	8002b42a <printf>
    8002507e:	00033797          	auipc	a5,0x33
    80025082:	f937c783          	lbu	a5,-109(a5) # 80058011 <excpt+0x1>
    80025086:	46079963          	bnez	a5,800254f8 <stateen_AIA_test_6+0x640>
    8002508a:	4529                	li	a0,10
    8002508c:	08c050ef          	jal	8002a118 <putchar>
    80025090:	c419                	beqz	s0,8002509e <stateen_AIA_test_6+0x1e6>
    80025092:	00033417          	auipc	s0,0x33
    80025096:	f7f44403          	lbu	s0,-129(s0) # 80058011 <excpt+0x1>
    8002509a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    8002509e:	4511                	li	a0,4
    800250a0:	e69db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800250a4:	d69db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800250a8:	608027f3          	csrr	a5,hvien

    excpt_info();
    800250ac:	fa3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800250b0:	08200593          	li	a1,130
    800250b4:	00013617          	auipc	a2,0x13
    800250b8:	8f460613          	addi	a2,a2,-1804 # 800379a8 <__func__.0+0x9ac0>
    800250bc:	00009517          	auipc	a0,0x9
    800250c0:	12450513          	addi	a0,a0,292 # 8002e1e0 <__func__.0+0x2f8>
    800250c4:	366060ef          	jal	8002b42a <printf>
    800250c8:	00033797          	auipc	a5,0x33
    800250cc:	f497c783          	lbu	a5,-183(a5) # 80058011 <excpt+0x1>
    800250d0:	00009597          	auipc	a1,0x9
    800250d4:	0e858593          	addi	a1,a1,232 # 8002e1b8 <__func__.0+0x2d0>
    800250d8:	e789                	bnez	a5,800250e2 <stateen_AIA_test_6+0x22a>
    800250da:	00009597          	auipc	a1,0x9
    800250de:	0ce58593          	addi	a1,a1,206 # 8002e1a8 <__func__.0+0x2c0>
    800250e2:	00009517          	auipc	a0,0x9
    800250e6:	11650513          	addi	a0,a0,278 # 8002e1f8 <__func__.0+0x310>
    800250ea:	340060ef          	jal	8002b42a <printf>
    800250ee:	00033797          	auipc	a5,0x33
    800250f2:	f237c783          	lbu	a5,-221(a5) # 80058011 <excpt+0x1>
    800250f6:	3e079663          	bnez	a5,800254e2 <stateen_AIA_test_6+0x62a>
    800250fa:	4529                	li	a0,10
    800250fc:	01c050ef          	jal	8002a118 <putchar>
    80025100:	c419                	beqz	s0,8002510e <stateen_AIA_test_6+0x256>
    80025102:	00033417          	auipc	s0,0x33
    80025106:	f0f44403          	lbu	s0,-241(s0) # 80058011 <excpt+0x1>
    8002510a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    8002510e:	4511                	li	a0,4
    80025110:	df9db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025114:	cf9db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025118:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002511c:	f33db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025120:	08200593          	li	a1,130
    80025124:	00013617          	auipc	a2,0x13
    80025128:	8d460613          	addi	a2,a2,-1836 # 800379f8 <__func__.0+0x9b10>
    8002512c:	00009517          	auipc	a0,0x9
    80025130:	0b450513          	addi	a0,a0,180 # 8002e1e0 <__func__.0+0x2f8>
    80025134:	2f6060ef          	jal	8002b42a <printf>
    80025138:	00033797          	auipc	a5,0x33
    8002513c:	ed97c783          	lbu	a5,-295(a5) # 80058011 <excpt+0x1>
    80025140:	00009597          	auipc	a1,0x9
    80025144:	07858593          	addi	a1,a1,120 # 8002e1b8 <__func__.0+0x2d0>
    80025148:	e789                	bnez	a5,80025152 <stateen_AIA_test_6+0x29a>
    8002514a:	00009597          	auipc	a1,0x9
    8002514e:	05e58593          	addi	a1,a1,94 # 8002e1a8 <__func__.0+0x2c0>
    80025152:	00009517          	auipc	a0,0x9
    80025156:	0a650513          	addi	a0,a0,166 # 8002e1f8 <__func__.0+0x310>
    8002515a:	2d0060ef          	jal	8002b42a <printf>
    8002515e:	00033797          	auipc	a5,0x33
    80025162:	eb37c783          	lbu	a5,-333(a5) # 80058011 <excpt+0x1>
    80025166:	36079363          	bnez	a5,800254cc <stateen_AIA_test_6+0x614>
    8002516a:	4529                	li	a0,10
    8002516c:	7ad040ef          	jal	8002a118 <putchar>
    80025170:	c419                	beqz	s0,8002517e <stateen_AIA_test_6+0x2c6>
    80025172:	00033417          	auipc	s0,0x33
    80025176:	e9f44403          	lbu	s0,-353(s0) # 80058011 <excpt+0x1>
    8002517a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    8002517e:	450d                	li	a0,3
    80025180:	d89db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025184:	c89db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025188:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002518c:	ec3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    80025190:	08200593          	li	a1,130
    80025194:	00013617          	auipc	a2,0x13
    80025198:	8b460613          	addi	a2,a2,-1868 # 80037a48 <__func__.0+0x9b60>
    8002519c:	00009517          	auipc	a0,0x9
    800251a0:	04450513          	addi	a0,a0,68 # 8002e1e0 <__func__.0+0x2f8>
    800251a4:	286060ef          	jal	8002b42a <printf>
    800251a8:	00033797          	auipc	a5,0x33
    800251ac:	e697c783          	lbu	a5,-407(a5) # 80058011 <excpt+0x1>
    800251b0:	00009597          	auipc	a1,0x9
    800251b4:	00858593          	addi	a1,a1,8 # 8002e1b8 <__func__.0+0x2d0>
    800251b8:	e789                	bnez	a5,800251c2 <stateen_AIA_test_6+0x30a>
    800251ba:	00009597          	auipc	a1,0x9
    800251be:	fee58593          	addi	a1,a1,-18 # 8002e1a8 <__func__.0+0x2c0>
    800251c2:	00009517          	auipc	a0,0x9
    800251c6:	03650513          	addi	a0,a0,54 # 8002e1f8 <__func__.0+0x310>
    800251ca:	260060ef          	jal	8002b42a <printf>
    800251ce:	00033797          	auipc	a5,0x33
    800251d2:	e437c783          	lbu	a5,-445(a5) # 80058011 <excpt+0x1>
    800251d6:	2e079063          	bnez	a5,800254b6 <stateen_AIA_test_6+0x5fe>
    800251da:	4529                	li	a0,10
    800251dc:	73d040ef          	jal	8002a118 <putchar>
    800251e0:	c419                	beqz	s0,800251ee <stateen_AIA_test_6+0x336>
    800251e2:	00033417          	auipc	s0,0x33
    800251e6:	e2f44403          	lbu	s0,-465(s0) # 80058011 <excpt+0x1>
    800251ea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPI);
    800251ee:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800251f2:	e5ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800251f6:	08200593          	li	a1,130
    800251fa:	00013617          	auipc	a2,0x13
    800251fe:	89e60613          	addi	a2,a2,-1890 # 80037a98 <__func__.0+0x9bb0>
    80025202:	00009517          	auipc	a0,0x9
    80025206:	fde50513          	addi	a0,a0,-34 # 8002e1e0 <__func__.0+0x2f8>
    8002520a:	220060ef          	jal	8002b42a <printf>
    8002520e:	00033797          	auipc	a5,0x33
    80025212:	e037c783          	lbu	a5,-509(a5) # 80058011 <excpt+0x1>
    80025216:	00009597          	auipc	a1,0x9
    8002521a:	fa258593          	addi	a1,a1,-94 # 8002e1b8 <__func__.0+0x2d0>
    8002521e:	e789                	bnez	a5,80025228 <stateen_AIA_test_6+0x370>
    80025220:	00009597          	auipc	a1,0x9
    80025224:	f8858593          	addi	a1,a1,-120 # 8002e1a8 <__func__.0+0x2c0>
    80025228:	00009517          	auipc	a0,0x9
    8002522c:	fd050513          	addi	a0,a0,-48 # 8002e1f8 <__func__.0+0x310>
    80025230:	1fa060ef          	jal	8002b42a <printf>
    80025234:	00033797          	auipc	a5,0x33
    80025238:	ddd7c783          	lbu	a5,-547(a5) # 80058011 <excpt+0x1>
    8002523c:	26079263          	bnez	a5,800254a0 <stateen_AIA_test_6+0x5e8>
    80025240:	4529                	li	a0,10
    80025242:	6d7040ef          	jal	8002a118 <putchar>
    80025246:	c419                	beqz	s0,80025254 <stateen_AIA_test_6+0x39c>
    80025248:	00033417          	auipc	s0,0x33
    8002524c:	dc944403          	lbu	s0,-567(s0) # 80058011 <excpt+0x1>
    80025250:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80025254:	4505                	li	a0,1
    80025256:	cb3db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002525a:	bb3db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002525e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025262:	deddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025266:	08200593          	li	a1,130
    8002526a:	00013617          	auipc	a2,0x13
    8002526e:	87e60613          	addi	a2,a2,-1922 # 80037ae8 <__func__.0+0x9c00>
    80025272:	00009517          	auipc	a0,0x9
    80025276:	f6e50513          	addi	a0,a0,-146 # 8002e1e0 <__func__.0+0x2f8>
    8002527a:	1b0060ef          	jal	8002b42a <printf>
    8002527e:	00033797          	auipc	a5,0x33
    80025282:	d937c783          	lbu	a5,-621(a5) # 80058011 <excpt+0x1>
    80025286:	00009597          	auipc	a1,0x9
    8002528a:	f3258593          	addi	a1,a1,-206 # 8002e1b8 <__func__.0+0x2d0>
    8002528e:	e789                	bnez	a5,80025298 <stateen_AIA_test_6+0x3e0>
    80025290:	00009597          	auipc	a1,0x9
    80025294:	f1858593          	addi	a1,a1,-232 # 8002e1a8 <__func__.0+0x2c0>
    80025298:	00009517          	auipc	a0,0x9
    8002529c:	f6050513          	addi	a0,a0,-160 # 8002e1f8 <__func__.0+0x310>
    800252a0:	18a060ef          	jal	8002b42a <printf>
    800252a4:	00033797          	auipc	a5,0x33
    800252a8:	d6d7c783          	lbu	a5,-659(a5) # 80058011 <excpt+0x1>
    800252ac:	1c079f63          	bnez	a5,8002548a <stateen_AIA_test_6+0x5d2>
    800252b0:	4529                	li	a0,10
    800252b2:	667040ef          	jal	8002a118 <putchar>
    800252b6:	c419                	beqz	s0,800252c4 <stateen_AIA_test_6+0x40c>
    800252b8:	00033417          	auipc	s0,0x33
    800252bc:	d5944403          	lbu	s0,-679(s0) # 80058011 <excpt+0x1>
    800252c0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800252c4:	4505                	li	a0,1
    800252c6:	c43db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800252ca:	b43db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800252ce:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800252d2:	d7ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800252d6:	08200593          	li	a1,130
    800252da:	00013617          	auipc	a2,0x13
    800252de:	85e60613          	addi	a2,a2,-1954 # 80037b38 <__func__.0+0x9c50>
    800252e2:	00009517          	auipc	a0,0x9
    800252e6:	efe50513          	addi	a0,a0,-258 # 8002e1e0 <__func__.0+0x2f8>
    800252ea:	140060ef          	jal	8002b42a <printf>
    800252ee:	00033797          	auipc	a5,0x33
    800252f2:	d237c783          	lbu	a5,-733(a5) # 80058011 <excpt+0x1>
    800252f6:	00009597          	auipc	a1,0x9
    800252fa:	ec258593          	addi	a1,a1,-318 # 8002e1b8 <__func__.0+0x2d0>
    800252fe:	e789                	bnez	a5,80025308 <stateen_AIA_test_6+0x450>
    80025300:	00009597          	auipc	a1,0x9
    80025304:	ea858593          	addi	a1,a1,-344 # 8002e1a8 <__func__.0+0x2c0>
    80025308:	00009517          	auipc	a0,0x9
    8002530c:	ef050513          	addi	a0,a0,-272 # 8002e1f8 <__func__.0+0x310>
    80025310:	11a060ef          	jal	8002b42a <printf>
    80025314:	00033797          	auipc	a5,0x33
    80025318:	cfd7c783          	lbu	a5,-771(a5) # 80058011 <excpt+0x1>
    8002531c:	14079c63          	bnez	a5,80025474 <stateen_AIA_test_6+0x5bc>
    80025320:	4529                	li	a0,10
    80025322:	5f7040ef          	jal	8002a118 <putchar>
    80025326:	c419                	beqz	s0,80025334 <stateen_AIA_test_6+0x47c>
    80025328:	00033417          	auipc	s0,0x33
    8002532c:	ce944403          	lbu	s0,-791(s0) # 80058011 <excpt+0x1>
    80025330:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025334:	4511                	li	a0,4
    80025336:	bd3db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002533a:	ad3db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002533e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025342:	d0ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025346:	08200593          	li	a1,130
    8002534a:	00013617          	auipc	a2,0x13
    8002534e:	83e60613          	addi	a2,a2,-1986 # 80037b88 <__func__.0+0x9ca0>
    80025352:	00009517          	auipc	a0,0x9
    80025356:	e8e50513          	addi	a0,a0,-370 # 8002e1e0 <__func__.0+0x2f8>
    8002535a:	0d0060ef          	jal	8002b42a <printf>
    8002535e:	00033797          	auipc	a5,0x33
    80025362:	cb37c783          	lbu	a5,-845(a5) # 80058011 <excpt+0x1>
    80025366:	00009597          	auipc	a1,0x9
    8002536a:	e5258593          	addi	a1,a1,-430 # 8002e1b8 <__func__.0+0x2d0>
    8002536e:	e789                	bnez	a5,80025378 <stateen_AIA_test_6+0x4c0>
    80025370:	00009597          	auipc	a1,0x9
    80025374:	e3858593          	addi	a1,a1,-456 # 8002e1a8 <__func__.0+0x2c0>
    80025378:	00009517          	auipc	a0,0x9
    8002537c:	e8050513          	addi	a0,a0,-384 # 8002e1f8 <__func__.0+0x310>
    80025380:	0aa060ef          	jal	8002b42a <printf>
    80025384:	00033797          	auipc	a5,0x33
    80025388:	c8d7c783          	lbu	a5,-883(a5) # 80058011 <excpt+0x1>
    8002538c:	0c079963          	bnez	a5,8002545e <stateen_AIA_test_6+0x5a6>
    80025390:	4529                	li	a0,10
    80025392:	587040ef          	jal	8002a118 <putchar>
    80025396:	c419                	beqz	s0,800253a4 <stateen_AIA_test_6+0x4ec>
    80025398:	00033417          	auipc	s0,0x33
    8002539c:	c7944403          	lbu	s0,-903(s0) # 80058011 <excpt+0x1>
    800253a0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800253a4:	4511                	li	a0,4
    800253a6:	b63db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800253aa:	a63db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800253ae:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800253b2:	c9ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253b6:	08200593          	li	a1,130
    800253ba:	00013617          	auipc	a2,0x13
    800253be:	81e60613          	addi	a2,a2,-2018 # 80037bd8 <__func__.0+0x9cf0>
    800253c2:	00009517          	auipc	a0,0x9
    800253c6:	e1e50513          	addi	a0,a0,-482 # 8002e1e0 <__func__.0+0x2f8>
    800253ca:	060060ef          	jal	8002b42a <printf>
    800253ce:	00033797          	auipc	a5,0x33
    800253d2:	c437c783          	lbu	a5,-957(a5) # 80058011 <excpt+0x1>
    800253d6:	00009597          	auipc	a1,0x9
    800253da:	de258593          	addi	a1,a1,-542 # 8002e1b8 <__func__.0+0x2d0>
    800253de:	e789                	bnez	a5,800253e8 <stateen_AIA_test_6+0x530>
    800253e0:	00009597          	auipc	a1,0x9
    800253e4:	dc858593          	addi	a1,a1,-568 # 8002e1a8 <__func__.0+0x2c0>
    800253e8:	00009517          	auipc	a0,0x9
    800253ec:	e1050513          	addi	a0,a0,-496 # 8002e1f8 <__func__.0+0x310>
    800253f0:	03a060ef          	jal	8002b42a <printf>
    800253f4:	00033797          	auipc	a5,0x33
    800253f8:	c1d7c783          	lbu	a5,-995(a5) # 80058011 <excpt+0x1>
    800253fc:	e7b1                	bnez	a5,80025448 <stateen_AIA_test_6+0x590>
    800253fe:	4529                	li	a0,10
    80025400:	519040ef          	jal	8002a118 <putchar>
    80025404:	c411                	beqz	s0,80025410 <stateen_AIA_test_6+0x558>
    80025406:	00033797          	auipc	a5,0x33
    8002540a:	c0b7c783          	lbu	a5,-1013(a5) # 80058011 <excpt+0x1>
    8002540e:	c79d                	beqz	a5,8002543c <stateen_AIA_test_6+0x584>
    80025410:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025412:	00009597          	auipc	a1,0x9
    80025416:	da658593          	addi	a1,a1,-602 # 8002e1b8 <__func__.0+0x2d0>
    8002541a:	00009517          	auipc	a0,0x9
    8002541e:	e4650513          	addi	a0,a0,-442 # 8002e260 <__func__.0+0x378>
    80025422:	008060ef          	jal	8002b42a <printf>
    80025426:	4511                	li	a0,4
    80025428:	ae1db0ef          	jal	80000f08 <goto_priv>
    8002542c:	bf8dc0ef          	jal	80001824 <reset_state>

}
    80025430:	60e2                	ld	ra,24(sp)
    80025432:	8522                	mv	a0,s0
    80025434:	6442                	ld	s0,16(sp)
    80025436:	64a2                	ld	s1,8(sp)
    80025438:	6105                	addi	sp,sp,32
    8002543a:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002543c:	4405                	li	s0,1
    TEST_END();
    8002543e:	00009597          	auipc	a1,0x9
    80025442:	d6a58593          	addi	a1,a1,-662 # 8002e1a8 <__func__.0+0x2c0>
    80025446:	bfd1                	j	8002541a <stateen_AIA_test_6+0x562>
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025448:	00009517          	auipc	a0,0x9
    8002544c:	db850513          	addi	a0,a0,-584 # 8002e200 <__func__.0+0x318>
    80025450:	7db050ef          	jal	8002b42a <printf>
    80025454:	02900513          	li	a0,41
    80025458:	4c1040ef          	jal	8002a118 <putchar>
    8002545c:	b74d                	j	800253fe <stateen_AIA_test_6+0x546>
    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002545e:	00009517          	auipc	a0,0x9
    80025462:	da250513          	addi	a0,a0,-606 # 8002e200 <__func__.0+0x318>
    80025466:	7c5050ef          	jal	8002b42a <printf>
    8002546a:	02900513          	li	a0,41
    8002546e:	4ab040ef          	jal	8002a118 <putchar>
    80025472:	bf39                	j	80025390 <stateen_AIA_test_6+0x4d8>
    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025474:	00009517          	auipc	a0,0x9
    80025478:	d8c50513          	addi	a0,a0,-628 # 8002e200 <__func__.0+0x318>
    8002547c:	7af050ef          	jal	8002b42a <printf>
    80025480:	02900513          	li	a0,41
    80025484:	495040ef          	jal	8002a118 <putchar>
    80025488:	bd61                	j	80025320 <stateen_AIA_test_6+0x468>
    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002548a:	00009517          	auipc	a0,0x9
    8002548e:	d7650513          	addi	a0,a0,-650 # 8002e200 <__func__.0+0x318>
    80025492:	799050ef          	jal	8002b42a <printf>
    80025496:	02900513          	li	a0,41
    8002549a:	47f040ef          	jal	8002a118 <putchar>
    8002549e:	bd09                	j	800252b0 <stateen_AIA_test_6+0x3f8>
    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800254a0:	00009517          	auipc	a0,0x9
    800254a4:	d6050513          	addi	a0,a0,-672 # 8002e200 <__func__.0+0x318>
    800254a8:	783050ef          	jal	8002b42a <printf>
    800254ac:	02900513          	li	a0,41
    800254b0:	469040ef          	jal	8002a118 <putchar>
    800254b4:	b371                	j	80025240 <stateen_AIA_test_6+0x388>
    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800254b6:	00009517          	auipc	a0,0x9
    800254ba:	d4a50513          	addi	a0,a0,-694 # 8002e200 <__func__.0+0x318>
    800254be:	76d050ef          	jal	8002b42a <printf>
    800254c2:	02900513          	li	a0,41
    800254c6:	453040ef          	jal	8002a118 <putchar>
    800254ca:	bb01                	j	800251da <stateen_AIA_test_6+0x322>
    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    800254cc:	00009517          	auipc	a0,0x9
    800254d0:	d3450513          	addi	a0,a0,-716 # 8002e200 <__func__.0+0x318>
    800254d4:	757050ef          	jal	8002b42a <printf>
    800254d8:	02900513          	li	a0,41
    800254dc:	43d040ef          	jal	8002a118 <putchar>
    800254e0:	b169                	j	8002516a <stateen_AIA_test_6+0x2b2>
    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800254e2:	00009517          	auipc	a0,0x9
    800254e6:	d1e50513          	addi	a0,a0,-738 # 8002e200 <__func__.0+0x318>
    800254ea:	741050ef          	jal	8002b42a <printf>
    800254ee:	02900513          	li	a0,41
    800254f2:	427040ef          	jal	8002a118 <putchar>
    800254f6:	b111                	j	800250fa <stateen_AIA_test_6+0x242>
    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    800254f8:	00009517          	auipc	a0,0x9
    800254fc:	d0850513          	addi	a0,a0,-760 # 8002e200 <__func__.0+0x318>
    80025500:	72b050ef          	jal	8002b42a <printf>
    80025504:	02900513          	li	a0,41
    80025508:	411040ef          	jal	8002a118 <putchar>
    8002550c:	bebd                	j	8002508a <stateen_AIA_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    8002550e:	00009517          	auipc	a0,0x9
    80025512:	cf250513          	addi	a0,a0,-782 # 8002e200 <__func__.0+0x318>
    80025516:	715050ef          	jal	8002b42a <printf>
    8002551a:	02900513          	li	a0,41
    8002551e:	3fb040ef          	jal	8002a118 <putchar>
    80025522:	bce5                	j	8002501a <stateen_AIA_test_6+0x162>
    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80025524:	00009517          	auipc	a0,0x9
    80025528:	cdc50513          	addi	a0,a0,-804 # 8002e200 <__func__.0+0x318>
    8002552c:	6ff050ef          	jal	8002b42a <printf>
    80025530:	02900513          	li	a0,41
    80025534:	3e5040ef          	jal	8002a118 <putchar>
    80025538:	bc85                	j	80024fa8 <stateen_AIA_test_6+0xf0>
    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    8002553a:	00009517          	auipc	a0,0x9
    8002553e:	cc650513          	addi	a0,a0,-826 # 8002e200 <__func__.0+0x318>
    80025542:	6e9050ef          	jal	8002b42a <printf>
    80025546:	02900513          	li	a0,41
    8002554a:	3cf040ef          	jal	8002a118 <putchar>
    8002554e:	baed                	j	80024f48 <stateen_AIA_test_6+0x90>

0000000080025550 <stateen_AIA_test_7>:


bool stateen_AIA_test_7(){
    80025550:	1101                	addi	sp,sp,-32

    TEST_START();
    80025552:	00008597          	auipc	a1,0x8
    80025556:	64658593          	addi	a1,a1,1606 # 8002db98 <__func__.16>
    8002555a:	00009517          	auipc	a0,0x9
    8002555e:	c6e50513          	addi	a0,a0,-914 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_AIA_test_7(){
    80025562:	ec06                	sd	ra,24(sp)
    80025564:	e822                	sd	s0,16(sp)
    80025566:	e426                	sd	s1,8(sp)
    TEST_START();
    80025568:	6c3050ef          	jal	8002b42a <printf>
    8002556c:	4529                	li	a0,10
    8002556e:	3ab040ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80025572:	4511                	li	a0,4
    80025574:	995db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1 hstateen.AIA=1,v=1 时可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80025578:	4785                	li	a5,1
    8002557a:	17ee                	slli	a5,a5,0x3b
    8002557c:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80025580:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80025584:	4509                	li	a0,2
    80025586:	983db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002558a:	883db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    8002558e:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025592:	abddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025596:	08200593          	li	a1,130
    8002559a:	00012617          	auipc	a2,0x12
    8002559e:	68e60613          	addi	a2,a2,1678 # 80037c28 <__func__.0+0x9d40>
    800255a2:	00009517          	auipc	a0,0x9
    800255a6:	c3e50513          	addi	a0,a0,-962 # 8002e1e0 <__func__.0+0x2f8>
    800255aa:	681050ef          	jal	8002b42a <printf>
    800255ae:	00033797          	auipc	a5,0x33
    800255b2:	a637c783          	lbu	a5,-1437(a5) # 80058011 <excpt+0x1>
    800255b6:	00009597          	auipc	a1,0x9
    800255ba:	bf258593          	addi	a1,a1,-1038 # 8002e1a8 <__func__.0+0x2c0>
    800255be:	c789                	beqz	a5,800255c8 <stateen_AIA_test_7+0x78>
    800255c0:	00009597          	auipc	a1,0x9
    800255c4:	bf858593          	addi	a1,a1,-1032 # 8002e1b8 <__func__.0+0x2d0>
    800255c8:	00009517          	auipc	a0,0x9
    800255cc:	c3050513          	addi	a0,a0,-976 # 8002e1f8 <__func__.0+0x310>
    800255d0:	65b050ef          	jal	8002b42a <printf>
    800255d4:	00033797          	auipc	a5,0x33
    800255d8:	a3d7c783          	lbu	a5,-1475(a5) # 80058011 <excpt+0x1>
    800255dc:	3e079963          	bnez	a5,800259ce <stateen_AIA_test_7+0x47e>
    800255e0:	4529                	li	a0,10
    800255e2:	337040ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800255e6:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800255e8:	00033497          	auipc	s1,0x33
    800255ec:	a294c483          	lbu	s1,-1495(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    800255f0:	919db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800255f4:	819db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800255f8:	608027f3          	csrr	a5,hvien

    excpt_info();
    800255fc:	a53db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025600:	08200593          	li	a1,130
    80025604:	00012617          	auipc	a2,0x12
    80025608:	67460613          	addi	a2,a2,1652 # 80037c78 <__func__.0+0x9d90>
    8002560c:	00009517          	auipc	a0,0x9
    80025610:	bd450513          	addi	a0,a0,-1068 # 8002e1e0 <__func__.0+0x2f8>
    80025614:	617050ef          	jal	8002b42a <printf>
    80025618:	00033797          	auipc	a5,0x33
    8002561c:	9f97c783          	lbu	a5,-1543(a5) # 80058011 <excpt+0x1>
    80025620:	00009597          	auipc	a1,0x9
    80025624:	b9858593          	addi	a1,a1,-1128 # 8002e1b8 <__func__.0+0x2d0>
    80025628:	e789                	bnez	a5,80025632 <stateen_AIA_test_7+0xe2>
    8002562a:	00009597          	auipc	a1,0x9
    8002562e:	b7e58593          	addi	a1,a1,-1154 # 8002e1a8 <__func__.0+0x2c0>
    80025632:	00009517          	auipc	a0,0x9
    80025636:	bc650513          	addi	a0,a0,-1082 # 8002e1f8 <__func__.0+0x310>
    8002563a:	5f1050ef          	jal	8002b42a <printf>
    8002563e:	00033797          	auipc	a5,0x33
    80025642:	9d37c783          	lbu	a5,-1581(a5) # 80058011 <excpt+0x1>
    80025646:	36079963          	bnez	a5,800259b8 <stateen_AIA_test_7+0x468>
    8002564a:	4529                	li	a0,10
    8002564c:	2cd040ef          	jal	8002a118 <putchar>
    80025650:	4401                	li	s0,0
    80025652:	e499                	bnez	s1,80025660 <stateen_AIA_test_7+0x110>
    80025654:	00033417          	auipc	s0,0x33
    80025658:	9bd44403          	lbu	s0,-1603(s0) # 80058011 <excpt+0x1>
    8002565c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80025660:	4501                	li	a0,0
    80025662:	8a7db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025666:	fa6db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    8002566a:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002566e:	9e1db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025672:	08200593          	li	a1,130
    80025676:	00012617          	auipc	a2,0x12
    8002567a:	65260613          	addi	a2,a2,1618 # 80037cc8 <__func__.0+0x9de0>
    8002567e:	00009517          	auipc	a0,0x9
    80025682:	b6250513          	addi	a0,a0,-1182 # 8002e1e0 <__func__.0+0x2f8>
    80025686:	5a5050ef          	jal	8002b42a <printf>
    8002568a:	00033797          	auipc	a5,0x33
    8002568e:	9877c783          	lbu	a5,-1657(a5) # 80058011 <excpt+0x1>
    80025692:	00009597          	auipc	a1,0x9
    80025696:	b2658593          	addi	a1,a1,-1242 # 8002e1b8 <__func__.0+0x2d0>
    8002569a:	e789                	bnez	a5,800256a4 <stateen_AIA_test_7+0x154>
    8002569c:	00009597          	auipc	a1,0x9
    800256a0:	b0c58593          	addi	a1,a1,-1268 # 8002e1a8 <__func__.0+0x2c0>
    800256a4:	00009517          	auipc	a0,0x9
    800256a8:	b5450513          	addi	a0,a0,-1196 # 8002e1f8 <__func__.0+0x310>
    800256ac:	57f050ef          	jal	8002b42a <printf>
    800256b0:	00033797          	auipc	a5,0x33
    800256b4:	9617c783          	lbu	a5,-1695(a5) # 80058011 <excpt+0x1>
    800256b8:	2e079563          	bnez	a5,800259a2 <stateen_AIA_test_7+0x452>
    800256bc:	4529                	li	a0,10
    800256be:	25b040ef          	jal	8002a118 <putchar>
    800256c2:	c419                	beqz	s0,800256d0 <stateen_AIA_test_7+0x180>
    800256c4:	00033417          	auipc	s0,0x33
    800256c8:	94d44403          	lbu	s0,-1715(s0) # 80058011 <excpt+0x1>
    800256cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    800256d0:	4501                	li	a0,0
    800256d2:	837db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800256d6:	f36db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800256da:	608027f3          	csrr	a5,hvien

    excpt_info();
    800256de:	971db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    800256e2:	08200593          	li	a1,130
    800256e6:	00012617          	auipc	a2,0x12
    800256ea:	63260613          	addi	a2,a2,1586 # 80037d18 <__func__.0+0x9e30>
    800256ee:	00009517          	auipc	a0,0x9
    800256f2:	af250513          	addi	a0,a0,-1294 # 8002e1e0 <__func__.0+0x2f8>
    800256f6:	535050ef          	jal	8002b42a <printf>
    800256fa:	00033797          	auipc	a5,0x33
    800256fe:	9177c783          	lbu	a5,-1769(a5) # 80058011 <excpt+0x1>
    80025702:	00009597          	auipc	a1,0x9
    80025706:	ab658593          	addi	a1,a1,-1354 # 8002e1b8 <__func__.0+0x2d0>
    8002570a:	e789                	bnez	a5,80025714 <stateen_AIA_test_7+0x1c4>
    8002570c:	00009597          	auipc	a1,0x9
    80025710:	a9c58593          	addi	a1,a1,-1380 # 8002e1a8 <__func__.0+0x2c0>
    80025714:	00009517          	auipc	a0,0x9
    80025718:	ae450513          	addi	a0,a0,-1308 # 8002e1f8 <__func__.0+0x310>
    8002571c:	50f050ef          	jal	8002b42a <printf>
    80025720:	00033797          	auipc	a5,0x33
    80025724:	8f17c783          	lbu	a5,-1807(a5) # 80058011 <excpt+0x1>
    80025728:	26079263          	bnez	a5,8002598c <stateen_AIA_test_7+0x43c>
    8002572c:	4529                	li	a0,10
    8002572e:	1eb040ef          	jal	8002a118 <putchar>
    80025732:	c419                	beqz	s0,80025740 <stateen_AIA_test_7+0x1f0>
    80025734:	00033417          	auipc	s0,0x33
    80025738:	8dd44403          	lbu	s0,-1827(s0) # 80058011 <excpt+0x1>
    8002573c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025740:	4509                	li	a0,2
    80025742:	fc6db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025746:	ec6db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002574a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002574e:	901db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025752:	08200593          	li	a1,130
    80025756:	00012617          	auipc	a2,0x12
    8002575a:	61260613          	addi	a2,a2,1554 # 80037d68 <__func__.0+0x9e80>
    8002575e:	00009517          	auipc	a0,0x9
    80025762:	a8250513          	addi	a0,a0,-1406 # 8002e1e0 <__func__.0+0x2f8>
    80025766:	4c5050ef          	jal	8002b42a <printf>
    8002576a:	00033797          	auipc	a5,0x33
    8002576e:	8a77c783          	lbu	a5,-1881(a5) # 80058011 <excpt+0x1>
    80025772:	00009597          	auipc	a1,0x9
    80025776:	a4658593          	addi	a1,a1,-1466 # 8002e1b8 <__func__.0+0x2d0>
    8002577a:	e789                	bnez	a5,80025784 <stateen_AIA_test_7+0x234>
    8002577c:	00009597          	auipc	a1,0x9
    80025780:	a2c58593          	addi	a1,a1,-1492 # 8002e1a8 <__func__.0+0x2c0>
    80025784:	00009517          	auipc	a0,0x9
    80025788:	a7450513          	addi	a0,a0,-1420 # 8002e1f8 <__func__.0+0x310>
    8002578c:	49f050ef          	jal	8002b42a <printf>
    80025790:	00033797          	auipc	a5,0x33
    80025794:	8817c783          	lbu	a5,-1919(a5) # 80058011 <excpt+0x1>
    80025798:	1c079f63          	bnez	a5,80025976 <stateen_AIA_test_7+0x426>
    8002579c:	4529                	li	a0,10
    8002579e:	17b040ef          	jal	8002a118 <putchar>
    800257a2:	c419                	beqz	s0,800257b0 <stateen_AIA_test_7+0x260>
    800257a4:	00033417          	auipc	s0,0x33
    800257a8:	86d44403          	lbu	s0,-1939(s0) # 80058011 <excpt+0x1>
    800257ac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800257b0:	4509                	li	a0,2
    800257b2:	f56db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800257b6:	e56db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800257ba:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800257be:	891db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800257c2:	08200593          	li	a1,130
    800257c6:	00012617          	auipc	a2,0x12
    800257ca:	5f260613          	addi	a2,a2,1522 # 80037db8 <__func__.0+0x9ed0>
    800257ce:	00009517          	auipc	a0,0x9
    800257d2:	a1250513          	addi	a0,a0,-1518 # 8002e1e0 <__func__.0+0x2f8>
    800257d6:	455050ef          	jal	8002b42a <printf>
    800257da:	00033797          	auipc	a5,0x33
    800257de:	8377c783          	lbu	a5,-1993(a5) # 80058011 <excpt+0x1>
    800257e2:	00009597          	auipc	a1,0x9
    800257e6:	9d658593          	addi	a1,a1,-1578 # 8002e1b8 <__func__.0+0x2d0>
    800257ea:	e789                	bnez	a5,800257f4 <stateen_AIA_test_7+0x2a4>
    800257ec:	00009597          	auipc	a1,0x9
    800257f0:	9bc58593          	addi	a1,a1,-1604 # 8002e1a8 <__func__.0+0x2c0>
    800257f4:	00009517          	auipc	a0,0x9
    800257f8:	a0450513          	addi	a0,a0,-1532 # 8002e1f8 <__func__.0+0x310>
    800257fc:	42f050ef          	jal	8002b42a <printf>
    80025800:	00033797          	auipc	a5,0x33
    80025804:	8117c783          	lbu	a5,-2031(a5) # 80058011 <excpt+0x1>
    80025808:	14079c63          	bnez	a5,80025960 <stateen_AIA_test_7+0x410>
    8002580c:	4529                	li	a0,10
    8002580e:	10b040ef          	jal	8002a118 <putchar>
    80025812:	c419                	beqz	s0,80025820 <stateen_AIA_test_7+0x2d0>
    80025814:	00032417          	auipc	s0,0x32
    80025818:	7fd44403          	lbu	s0,2045(s0) # 80058011 <excpt+0x1>
    8002581c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80025820:	4501                	li	a0,0
    80025822:	ee6db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025826:	de6db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002582a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002582e:	821db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025832:	08200593          	li	a1,130
    80025836:	00012617          	auipc	a2,0x12
    8002583a:	5d260613          	addi	a2,a2,1490 # 80037e08 <__func__.0+0x9f20>
    8002583e:	00009517          	auipc	a0,0x9
    80025842:	9a250513          	addi	a0,a0,-1630 # 8002e1e0 <__func__.0+0x2f8>
    80025846:	3e5050ef          	jal	8002b42a <printf>
    8002584a:	00032797          	auipc	a5,0x32
    8002584e:	7c77c783          	lbu	a5,1991(a5) # 80058011 <excpt+0x1>
    80025852:	00009597          	auipc	a1,0x9
    80025856:	96658593          	addi	a1,a1,-1690 # 8002e1b8 <__func__.0+0x2d0>
    8002585a:	e789                	bnez	a5,80025864 <stateen_AIA_test_7+0x314>
    8002585c:	00009597          	auipc	a1,0x9
    80025860:	94c58593          	addi	a1,a1,-1716 # 8002e1a8 <__func__.0+0x2c0>
    80025864:	00009517          	auipc	a0,0x9
    80025868:	99450513          	addi	a0,a0,-1644 # 8002e1f8 <__func__.0+0x310>
    8002586c:	3bf050ef          	jal	8002b42a <printf>
    80025870:	00032797          	auipc	a5,0x32
    80025874:	7a17c783          	lbu	a5,1953(a5) # 80058011 <excpt+0x1>
    80025878:	0c079963          	bnez	a5,8002594a <stateen_AIA_test_7+0x3fa>
    8002587c:	4529                	li	a0,10
    8002587e:	09b040ef          	jal	8002a118 <putchar>
    80025882:	c419                	beqz	s0,80025890 <stateen_AIA_test_7+0x340>
    80025884:	00032417          	auipc	s0,0x32
    80025888:	78d44403          	lbu	s0,1933(s0) # 80058011 <excpt+0x1>
    8002588c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80025890:	4501                	li	a0,0
    80025892:	e76db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025896:	d76db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002589a:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002589e:	fb0db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258a2:	08200593          	li	a1,130
    800258a6:	00012617          	auipc	a2,0x12
    800258aa:	5b260613          	addi	a2,a2,1458 # 80037e58 <__func__.0+0x9f70>
    800258ae:	00009517          	auipc	a0,0x9
    800258b2:	93250513          	addi	a0,a0,-1742 # 8002e1e0 <__func__.0+0x2f8>
    800258b6:	375050ef          	jal	8002b42a <printf>
    800258ba:	00032797          	auipc	a5,0x32
    800258be:	7577c783          	lbu	a5,1879(a5) # 80058011 <excpt+0x1>
    800258c2:	00009597          	auipc	a1,0x9
    800258c6:	8f658593          	addi	a1,a1,-1802 # 8002e1b8 <__func__.0+0x2d0>
    800258ca:	e789                	bnez	a5,800258d4 <stateen_AIA_test_7+0x384>
    800258cc:	00009597          	auipc	a1,0x9
    800258d0:	8dc58593          	addi	a1,a1,-1828 # 8002e1a8 <__func__.0+0x2c0>
    800258d4:	00009517          	auipc	a0,0x9
    800258d8:	92450513          	addi	a0,a0,-1756 # 8002e1f8 <__func__.0+0x310>
    800258dc:	34f050ef          	jal	8002b42a <printf>
    800258e0:	00032797          	auipc	a5,0x32
    800258e4:	7317c783          	lbu	a5,1841(a5) # 80058011 <excpt+0x1>
    800258e8:	e7b1                	bnez	a5,80025934 <stateen_AIA_test_7+0x3e4>
    800258ea:	4529                	li	a0,10
    800258ec:	02d040ef          	jal	8002a118 <putchar>
    800258f0:	c411                	beqz	s0,800258fc <stateen_AIA_test_7+0x3ac>
    800258f2:	00032797          	auipc	a5,0x32
    800258f6:	71f7c783          	lbu	a5,1823(a5) # 80058011 <excpt+0x1>
    800258fa:	c79d                	beqz	a5,80025928 <stateen_AIA_test_7+0x3d8>
    800258fc:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800258fe:	00009597          	auipc	a1,0x9
    80025902:	8ba58593          	addi	a1,a1,-1862 # 8002e1b8 <__func__.0+0x2d0>
    80025906:	00009517          	auipc	a0,0x9
    8002590a:	95a50513          	addi	a0,a0,-1702 # 8002e260 <__func__.0+0x378>
    8002590e:	31d050ef          	jal	8002b42a <printf>
    80025912:	4511                	li	a0,4
    80025914:	df4db0ef          	jal	80000f08 <goto_priv>
    80025918:	f0ddb0ef          	jal	80001824 <reset_state>
}
    8002591c:	60e2                	ld	ra,24(sp)
    8002591e:	8522                	mv	a0,s0
    80025920:	6442                	ld	s0,16(sp)
    80025922:	64a2                	ld	s1,8(sp)
    80025924:	6105                	addi	sp,sp,32
    80025926:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025928:	4405                	li	s0,1
    TEST_END();
    8002592a:	00009597          	auipc	a1,0x9
    8002592e:	87e58593          	addi	a1,a1,-1922 # 8002e1a8 <__func__.0+0x2c0>
    80025932:	bfd1                	j	80025906 <stateen_AIA_test_7+0x3b6>
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025934:	00009517          	auipc	a0,0x9
    80025938:	8cc50513          	addi	a0,a0,-1844 # 8002e200 <__func__.0+0x318>
    8002593c:	2ef050ef          	jal	8002b42a <printf>
    80025940:	02900513          	li	a0,41
    80025944:	7d4040ef          	jal	8002a118 <putchar>
    80025948:	b74d                	j	800258ea <stateen_AIA_test_7+0x39a>
    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002594a:	00009517          	auipc	a0,0x9
    8002594e:	8b650513          	addi	a0,a0,-1866 # 8002e200 <__func__.0+0x318>
    80025952:	2d9050ef          	jal	8002b42a <printf>
    80025956:	02900513          	li	a0,41
    8002595a:	7be040ef          	jal	8002a118 <putchar>
    8002595e:	bf39                	j	8002587c <stateen_AIA_test_7+0x32c>
    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025960:	00009517          	auipc	a0,0x9
    80025964:	8a050513          	addi	a0,a0,-1888 # 8002e200 <__func__.0+0x318>
    80025968:	2c3050ef          	jal	8002b42a <printf>
    8002596c:	02900513          	li	a0,41
    80025970:	7a8040ef          	jal	8002a118 <putchar>
    80025974:	bd61                	j	8002580c <stateen_AIA_test_7+0x2bc>
    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025976:	00009517          	auipc	a0,0x9
    8002597a:	88a50513          	addi	a0,a0,-1910 # 8002e200 <__func__.0+0x318>
    8002597e:	2ad050ef          	jal	8002b42a <printf>
    80025982:	02900513          	li	a0,41
    80025986:	792040ef          	jal	8002a118 <putchar>
    8002598a:	bd09                	j	8002579c <stateen_AIA_test_7+0x24c>
    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    8002598c:	00009517          	auipc	a0,0x9
    80025990:	87450513          	addi	a0,a0,-1932 # 8002e200 <__func__.0+0x318>
    80025994:	297050ef          	jal	8002b42a <printf>
    80025998:	02900513          	li	a0,41
    8002599c:	77c040ef          	jal	8002a118 <putchar>
    800259a0:	b371                	j	8002572c <stateen_AIA_test_7+0x1dc>
    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800259a2:	00009517          	auipc	a0,0x9
    800259a6:	85e50513          	addi	a0,a0,-1954 # 8002e200 <__func__.0+0x318>
    800259aa:	281050ef          	jal	8002b42a <printf>
    800259ae:	02900513          	li	a0,41
    800259b2:	766040ef          	jal	8002a118 <putchar>
    800259b6:	b319                	j	800256bc <stateen_AIA_test_7+0x16c>
    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    800259b8:	00009517          	auipc	a0,0x9
    800259bc:	84850513          	addi	a0,a0,-1976 # 8002e200 <__func__.0+0x318>
    800259c0:	26b050ef          	jal	8002b42a <printf>
    800259c4:	02900513          	li	a0,41
    800259c8:	750040ef          	jal	8002a118 <putchar>
    800259cc:	b9bd                	j	8002564a <stateen_AIA_test_7+0xfa>
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800259ce:	00009517          	auipc	a0,0x9
    800259d2:	83250513          	addi	a0,a0,-1998 # 8002e200 <__func__.0+0x318>
    800259d6:	255050ef          	jal	8002b42a <printf>
    800259da:	02900513          	li	a0,41
    800259de:	73a040ef          	jal	8002a118 <putchar>
    800259e2:	befd                	j	800255e0 <stateen_AIA_test_7+0x90>

00000000800259e4 <stateen_CSRIND_test>:



//mstateen.csrind 和 hstateen.csrind 在xiangshan中默认为1，且RO
bool stateen_CSRIND_test(){
    800259e4:	1101                	addi	sp,sp,-32

    TEST_START();
    800259e6:	00008597          	auipc	a1,0x8
    800259ea:	1ca58593          	addi	a1,a1,458 # 8002dbb0 <__func__.15>
    800259ee:	00008517          	auipc	a0,0x8
    800259f2:	7da50513          	addi	a0,a0,2010 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_CSRIND_test(){
    800259f6:	ec06                	sd	ra,24(sp)
    800259f8:	e822                	sd	s0,16(sp)
    800259fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800259fc:	22f050ef          	jal	8002b42a <printf>
    80025a00:	4529                	li	a0,10
    80025a02:	716040ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80025a06:	4511                	li	a0,4
    80025a08:	d00db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.CSRIND=1 hstateen.CSRIND=1,v=1 时可访问iselect，ireg等寄存器

    goto_priv(PRIV_VS);
    80025a0c:	4509                	li	a0,2
    80025a0e:	cfadb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025a12:	bfadb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025a16:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025a1a:	e34db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a1e:	08200593          	li	a1,130
    80025a22:	00012617          	auipc	a2,0x12
    80025a26:	48660613          	addi	a2,a2,1158 # 80037ea8 <__func__.0+0x9fc0>
    80025a2a:	00008517          	auipc	a0,0x8
    80025a2e:	7b650513          	addi	a0,a0,1974 # 8002e1e0 <__func__.0+0x2f8>
    80025a32:	1f9050ef          	jal	8002b42a <printf>
    80025a36:	00032797          	auipc	a5,0x32
    80025a3a:	5db7c783          	lbu	a5,1499(a5) # 80058011 <excpt+0x1>
    80025a3e:	00008597          	auipc	a1,0x8
    80025a42:	76a58593          	addi	a1,a1,1898 # 8002e1a8 <__func__.0+0x2c0>
    80025a46:	c789                	beqz	a5,80025a50 <stateen_CSRIND_test+0x6c>
    80025a48:	00008597          	auipc	a1,0x8
    80025a4c:	77058593          	addi	a1,a1,1904 # 8002e1b8 <__func__.0+0x2d0>
    80025a50:	00008517          	auipc	a0,0x8
    80025a54:	7a850513          	addi	a0,a0,1960 # 8002e1f8 <__func__.0+0x310>
    80025a58:	1d3050ef          	jal	8002b42a <printf>
    80025a5c:	00032797          	auipc	a5,0x32
    80025a60:	5b57c783          	lbu	a5,1461(a5) # 80058011 <excpt+0x1>
    80025a64:	3e079963          	bnez	a5,80025e56 <stateen_CSRIND_test+0x472>
    80025a68:	4529                	li	a0,10
    80025a6a:	6ae040ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025a6e:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a70:	00032497          	auipc	s1,0x32
    80025a74:	5a14c483          	lbu	s1,1441(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025a78:	c90db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025a7c:	b90db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025a80:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025a84:	dcadb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a88:	08200593          	li	a1,130
    80025a8c:	00012617          	auipc	a2,0x12
    80025a90:	47460613          	addi	a2,a2,1140 # 80037f00 <__func__.0+0xa018>
    80025a94:	00008517          	auipc	a0,0x8
    80025a98:	74c50513          	addi	a0,a0,1868 # 8002e1e0 <__func__.0+0x2f8>
    80025a9c:	18f050ef          	jal	8002b42a <printf>
    80025aa0:	00032797          	auipc	a5,0x32
    80025aa4:	5717c783          	lbu	a5,1393(a5) # 80058011 <excpt+0x1>
    80025aa8:	00008597          	auipc	a1,0x8
    80025aac:	71058593          	addi	a1,a1,1808 # 8002e1b8 <__func__.0+0x2d0>
    80025ab0:	e789                	bnez	a5,80025aba <stateen_CSRIND_test+0xd6>
    80025ab2:	00008597          	auipc	a1,0x8
    80025ab6:	6f658593          	addi	a1,a1,1782 # 8002e1a8 <__func__.0+0x2c0>
    80025aba:	00008517          	auipc	a0,0x8
    80025abe:	73e50513          	addi	a0,a0,1854 # 8002e1f8 <__func__.0+0x310>
    80025ac2:	169050ef          	jal	8002b42a <printf>
    80025ac6:	00032797          	auipc	a5,0x32
    80025aca:	54b7c783          	lbu	a5,1355(a5) # 80058011 <excpt+0x1>
    80025ace:	36079963          	bnez	a5,80025e40 <stateen_CSRIND_test+0x45c>
    80025ad2:	4529                	li	a0,10
    80025ad4:	644040ef          	jal	8002a118 <putchar>
    80025ad8:	4401                	li	s0,0
    80025ada:	e499                	bnez	s1,80025ae8 <stateen_CSRIND_test+0x104>
    80025adc:	00032417          	auipc	s0,0x32
    80025ae0:	53544403          	lbu	s0,1333(s0) # 80058011 <excpt+0x1>
    80025ae4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025ae8:	450d                	li	a0,3
    80025aea:	c1edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025aee:	b1edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025af2:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025af6:	d58db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025afa:	08200593          	li	a1,130
    80025afe:	00012617          	auipc	a2,0x12
    80025b02:	45a60613          	addi	a2,a2,1114 # 80037f58 <__func__.0+0xa070>
    80025b06:	00008517          	auipc	a0,0x8
    80025b0a:	6da50513          	addi	a0,a0,1754 # 8002e1e0 <__func__.0+0x2f8>
    80025b0e:	11d050ef          	jal	8002b42a <printf>
    80025b12:	00032797          	auipc	a5,0x32
    80025b16:	4ff7c783          	lbu	a5,1279(a5) # 80058011 <excpt+0x1>
    80025b1a:	00008597          	auipc	a1,0x8
    80025b1e:	69e58593          	addi	a1,a1,1694 # 8002e1b8 <__func__.0+0x2d0>
    80025b22:	e789                	bnez	a5,80025b2c <stateen_CSRIND_test+0x148>
    80025b24:	00008597          	auipc	a1,0x8
    80025b28:	68458593          	addi	a1,a1,1668 # 8002e1a8 <__func__.0+0x2c0>
    80025b2c:	00008517          	auipc	a0,0x8
    80025b30:	6cc50513          	addi	a0,a0,1740 # 8002e1f8 <__func__.0+0x310>
    80025b34:	0f7050ef          	jal	8002b42a <printf>
    80025b38:	00032797          	auipc	a5,0x32
    80025b3c:	4d97c783          	lbu	a5,1241(a5) # 80058011 <excpt+0x1>
    80025b40:	2e079563          	bnez	a5,80025e2a <stateen_CSRIND_test+0x446>
    80025b44:	4529                	li	a0,10
    80025b46:	5d2040ef          	jal	8002a118 <putchar>
    80025b4a:	c419                	beqz	s0,80025b58 <stateen_CSRIND_test+0x174>
    80025b4c:	00032417          	auipc	s0,0x32
    80025b50:	4c544403          	lbu	s0,1221(s0) # 80058011 <excpt+0x1>
    80025b54:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80025b58:	450d                	li	a0,3
    80025b5a:	baedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b5e:	aaedb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025b62:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025b66:	ce8db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b6a:	08200593          	li	a1,130
    80025b6e:	00012617          	auipc	a2,0x12
    80025b72:	44260613          	addi	a2,a2,1090 # 80037fb0 <__func__.0+0xa0c8>
    80025b76:	00008517          	auipc	a0,0x8
    80025b7a:	66a50513          	addi	a0,a0,1642 # 8002e1e0 <__func__.0+0x2f8>
    80025b7e:	0ad050ef          	jal	8002b42a <printf>
    80025b82:	00032797          	auipc	a5,0x32
    80025b86:	48f7c783          	lbu	a5,1167(a5) # 80058011 <excpt+0x1>
    80025b8a:	00008597          	auipc	a1,0x8
    80025b8e:	62e58593          	addi	a1,a1,1582 # 8002e1b8 <__func__.0+0x2d0>
    80025b92:	e789                	bnez	a5,80025b9c <stateen_CSRIND_test+0x1b8>
    80025b94:	00008597          	auipc	a1,0x8
    80025b98:	61458593          	addi	a1,a1,1556 # 8002e1a8 <__func__.0+0x2c0>
    80025b9c:	00008517          	auipc	a0,0x8
    80025ba0:	65c50513          	addi	a0,a0,1628 # 8002e1f8 <__func__.0+0x310>
    80025ba4:	087050ef          	jal	8002b42a <printf>
    80025ba8:	00032797          	auipc	a5,0x32
    80025bac:	4697c783          	lbu	a5,1129(a5) # 80058011 <excpt+0x1>
    80025bb0:	26079263          	bnez	a5,80025e14 <stateen_CSRIND_test+0x430>
    80025bb4:	4529                	li	a0,10
    80025bb6:	562040ef          	jal	8002a118 <putchar>
    80025bba:	c419                	beqz	s0,80025bc8 <stateen_CSRIND_test+0x1e4>
    80025bbc:	00032417          	auipc	s0,0x32
    80025bc0:	45544403          	lbu	s0,1109(s0) # 80058011 <excpt+0x1>
    80025bc4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025bc8:	4505                	li	a0,1
    80025bca:	b3edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025bce:	a3edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025bd2:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025bd6:	c78db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025bda:	08200593          	li	a1,130
    80025bde:	00012617          	auipc	a2,0x12
    80025be2:	42a60613          	addi	a2,a2,1066 # 80038008 <__func__.0+0xa120>
    80025be6:	00008517          	auipc	a0,0x8
    80025bea:	5fa50513          	addi	a0,a0,1530 # 8002e1e0 <__func__.0+0x2f8>
    80025bee:	03d050ef          	jal	8002b42a <printf>
    80025bf2:	00032797          	auipc	a5,0x32
    80025bf6:	41f7c783          	lbu	a5,1055(a5) # 80058011 <excpt+0x1>
    80025bfa:	00008597          	auipc	a1,0x8
    80025bfe:	5be58593          	addi	a1,a1,1470 # 8002e1b8 <__func__.0+0x2d0>
    80025c02:	e789                	bnez	a5,80025c0c <stateen_CSRIND_test+0x228>
    80025c04:	00008597          	auipc	a1,0x8
    80025c08:	5a458593          	addi	a1,a1,1444 # 8002e1a8 <__func__.0+0x2c0>
    80025c0c:	00008517          	auipc	a0,0x8
    80025c10:	5ec50513          	addi	a0,a0,1516 # 8002e1f8 <__func__.0+0x310>
    80025c14:	017050ef          	jal	8002b42a <printf>
    80025c18:	00032797          	auipc	a5,0x32
    80025c1c:	3f97c783          	lbu	a5,1017(a5) # 80058011 <excpt+0x1>
    80025c20:	1c079f63          	bnez	a5,80025dfe <stateen_CSRIND_test+0x41a>
    80025c24:	4529                	li	a0,10
    80025c26:	4f2040ef          	jal	8002a118 <putchar>
    80025c2a:	c419                	beqz	s0,80025c38 <stateen_CSRIND_test+0x254>
    80025c2c:	00032417          	auipc	s0,0x32
    80025c30:	3e544403          	lbu	s0,997(s0) # 80058011 <excpt+0x1>
    80025c34:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025c38:	4505                	li	a0,1
    80025c3a:	acedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c3e:	9cedb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025c42:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025c46:	c08db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c4a:	08200593          	li	a1,130
    80025c4e:	00012617          	auipc	a2,0x12
    80025c52:	41260613          	addi	a2,a2,1042 # 80038060 <__func__.0+0xa178>
    80025c56:	00008517          	auipc	a0,0x8
    80025c5a:	58a50513          	addi	a0,a0,1418 # 8002e1e0 <__func__.0+0x2f8>
    80025c5e:	7cc050ef          	jal	8002b42a <printf>
    80025c62:	00032797          	auipc	a5,0x32
    80025c66:	3af7c783          	lbu	a5,943(a5) # 80058011 <excpt+0x1>
    80025c6a:	00008597          	auipc	a1,0x8
    80025c6e:	54e58593          	addi	a1,a1,1358 # 8002e1b8 <__func__.0+0x2d0>
    80025c72:	e789                	bnez	a5,80025c7c <stateen_CSRIND_test+0x298>
    80025c74:	00008597          	auipc	a1,0x8
    80025c78:	53458593          	addi	a1,a1,1332 # 8002e1a8 <__func__.0+0x2c0>
    80025c7c:	00008517          	auipc	a0,0x8
    80025c80:	57c50513          	addi	a0,a0,1404 # 8002e1f8 <__func__.0+0x310>
    80025c84:	7a6050ef          	jal	8002b42a <printf>
    80025c88:	00032797          	auipc	a5,0x32
    80025c8c:	3897c783          	lbu	a5,905(a5) # 80058011 <excpt+0x1>
    80025c90:	14079c63          	bnez	a5,80025de8 <stateen_CSRIND_test+0x404>
    80025c94:	4529                	li	a0,10
    80025c96:	482040ef          	jal	8002a118 <putchar>
    80025c9a:	c419                	beqz	s0,80025ca8 <stateen_CSRIND_test+0x2c4>
    80025c9c:	00032417          	auipc	s0,0x32
    80025ca0:	37544403          	lbu	s0,885(s0) # 80058011 <excpt+0x1>
    80025ca4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025ca8:	4511                	li	a0,4
    80025caa:	a5edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025cae:	95edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025cb2:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025cb6:	b98db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025cba:	08200593          	li	a1,130
    80025cbe:	00012617          	auipc	a2,0x12
    80025cc2:	3fa60613          	addi	a2,a2,1018 # 800380b8 <__func__.0+0xa1d0>
    80025cc6:	00008517          	auipc	a0,0x8
    80025cca:	51a50513          	addi	a0,a0,1306 # 8002e1e0 <__func__.0+0x2f8>
    80025cce:	75c050ef          	jal	8002b42a <printf>
    80025cd2:	00032797          	auipc	a5,0x32
    80025cd6:	33f7c783          	lbu	a5,831(a5) # 80058011 <excpt+0x1>
    80025cda:	00008597          	auipc	a1,0x8
    80025cde:	4de58593          	addi	a1,a1,1246 # 8002e1b8 <__func__.0+0x2d0>
    80025ce2:	e789                	bnez	a5,80025cec <stateen_CSRIND_test+0x308>
    80025ce4:	00008597          	auipc	a1,0x8
    80025ce8:	4c458593          	addi	a1,a1,1220 # 8002e1a8 <__func__.0+0x2c0>
    80025cec:	00008517          	auipc	a0,0x8
    80025cf0:	50c50513          	addi	a0,a0,1292 # 8002e1f8 <__func__.0+0x310>
    80025cf4:	736050ef          	jal	8002b42a <printf>
    80025cf8:	00032797          	auipc	a5,0x32
    80025cfc:	3197c783          	lbu	a5,793(a5) # 80058011 <excpt+0x1>
    80025d00:	0c079963          	bnez	a5,80025dd2 <stateen_CSRIND_test+0x3ee>
    80025d04:	4529                	li	a0,10
    80025d06:	412040ef          	jal	8002a118 <putchar>
    80025d0a:	c419                	beqz	s0,80025d18 <stateen_CSRIND_test+0x334>
    80025d0c:	00032417          	auipc	s0,0x32
    80025d10:	30544403          	lbu	s0,773(s0) # 80058011 <excpt+0x1>
    80025d14:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025d18:	4511                	li	a0,4
    80025d1a:	9eedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d1e:	8eedb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025d22:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025d26:	b28db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d2a:	08200593          	li	a1,130
    80025d2e:	00012617          	auipc	a2,0x12
    80025d32:	3e260613          	addi	a2,a2,994 # 80038110 <__func__.0+0xa228>
    80025d36:	00008517          	auipc	a0,0x8
    80025d3a:	4aa50513          	addi	a0,a0,1194 # 8002e1e0 <__func__.0+0x2f8>
    80025d3e:	6ec050ef          	jal	8002b42a <printf>
    80025d42:	00032797          	auipc	a5,0x32
    80025d46:	2cf7c783          	lbu	a5,719(a5) # 80058011 <excpt+0x1>
    80025d4a:	00008597          	auipc	a1,0x8
    80025d4e:	46e58593          	addi	a1,a1,1134 # 8002e1b8 <__func__.0+0x2d0>
    80025d52:	e789                	bnez	a5,80025d5c <stateen_CSRIND_test+0x378>
    80025d54:	00008597          	auipc	a1,0x8
    80025d58:	45458593          	addi	a1,a1,1108 # 8002e1a8 <__func__.0+0x2c0>
    80025d5c:	00008517          	auipc	a0,0x8
    80025d60:	49c50513          	addi	a0,a0,1180 # 8002e1f8 <__func__.0+0x310>
    80025d64:	6c6050ef          	jal	8002b42a <printf>
    80025d68:	00032797          	auipc	a5,0x32
    80025d6c:	2a97c783          	lbu	a5,681(a5) # 80058011 <excpt+0x1>
    80025d70:	e7b1                	bnez	a5,80025dbc <stateen_CSRIND_test+0x3d8>
    80025d72:	4529                	li	a0,10
    80025d74:	3a4040ef          	jal	8002a118 <putchar>
    80025d78:	c411                	beqz	s0,80025d84 <stateen_CSRIND_test+0x3a0>
    80025d7a:	00032797          	auipc	a5,0x32
    80025d7e:	2977c783          	lbu	a5,663(a5) # 80058011 <excpt+0x1>
    80025d82:	c79d                	beqz	a5,80025db0 <stateen_CSRIND_test+0x3cc>
    80025d84:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025d86:	00008597          	auipc	a1,0x8
    80025d8a:	43258593          	addi	a1,a1,1074 # 8002e1b8 <__func__.0+0x2d0>
    80025d8e:	00008517          	auipc	a0,0x8
    80025d92:	4d250513          	addi	a0,a0,1234 # 8002e260 <__func__.0+0x378>
    80025d96:	694050ef          	jal	8002b42a <printf>
    80025d9a:	4511                	li	a0,4
    80025d9c:	96cdb0ef          	jal	80000f08 <goto_priv>
    80025da0:	a85db0ef          	jal	80001824 <reset_state>
}
    80025da4:	60e2                	ld	ra,24(sp)
    80025da6:	8522                	mv	a0,s0
    80025da8:	6442                	ld	s0,16(sp)
    80025daa:	64a2                	ld	s1,8(sp)
    80025dac:	6105                	addi	sp,sp,32
    80025dae:	8082                	ret
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025db0:	4405                	li	s0,1
    TEST_END();
    80025db2:	00008597          	auipc	a1,0x8
    80025db6:	3f658593          	addi	a1,a1,1014 # 8002e1a8 <__func__.0+0x2c0>
    80025dba:	bfd1                	j	80025d8e <stateen_CSRIND_test+0x3aa>
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dbc:	00008517          	auipc	a0,0x8
    80025dc0:	44450513          	addi	a0,a0,1092 # 8002e200 <__func__.0+0x318>
    80025dc4:	666050ef          	jal	8002b42a <printf>
    80025dc8:	02900513          	li	a0,41
    80025dcc:	34c040ef          	jal	8002a118 <putchar>
    80025dd0:	b74d                	j	80025d72 <stateen_CSRIND_test+0x38e>
    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dd2:	00008517          	auipc	a0,0x8
    80025dd6:	42e50513          	addi	a0,a0,1070 # 8002e200 <__func__.0+0x318>
    80025dda:	650050ef          	jal	8002b42a <printf>
    80025dde:	02900513          	li	a0,41
    80025de2:	336040ef          	jal	8002a118 <putchar>
    80025de6:	bf39                	j	80025d04 <stateen_CSRIND_test+0x320>
    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025de8:	00008517          	auipc	a0,0x8
    80025dec:	41850513          	addi	a0,a0,1048 # 8002e200 <__func__.0+0x318>
    80025df0:	63a050ef          	jal	8002b42a <printf>
    80025df4:	02900513          	li	a0,41
    80025df8:	320040ef          	jal	8002a118 <putchar>
    80025dfc:	bd61                	j	80025c94 <stateen_CSRIND_test+0x2b0>
    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dfe:	00008517          	auipc	a0,0x8
    80025e02:	40250513          	addi	a0,a0,1026 # 8002e200 <__func__.0+0x318>
    80025e06:	624050ef          	jal	8002b42a <printf>
    80025e0a:	02900513          	li	a0,41
    80025e0e:	30a040ef          	jal	8002a118 <putchar>
    80025e12:	bd09                	j	80025c24 <stateen_CSRIND_test+0x240>
    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e14:	00008517          	auipc	a0,0x8
    80025e18:	3ec50513          	addi	a0,a0,1004 # 8002e200 <__func__.0+0x318>
    80025e1c:	60e050ef          	jal	8002b42a <printf>
    80025e20:	02900513          	li	a0,41
    80025e24:	2f4040ef          	jal	8002a118 <putchar>
    80025e28:	b371                	j	80025bb4 <stateen_CSRIND_test+0x1d0>
    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e2a:	00008517          	auipc	a0,0x8
    80025e2e:	3d650513          	addi	a0,a0,982 # 8002e200 <__func__.0+0x318>
    80025e32:	5f8050ef          	jal	8002b42a <printf>
    80025e36:	02900513          	li	a0,41
    80025e3a:	2de040ef          	jal	8002a118 <putchar>
    80025e3e:	b319                	j	80025b44 <stateen_CSRIND_test+0x160>
    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e40:	00008517          	auipc	a0,0x8
    80025e44:	3c050513          	addi	a0,a0,960 # 8002e200 <__func__.0+0x318>
    80025e48:	5e2050ef          	jal	8002b42a <printf>
    80025e4c:	02900513          	li	a0,41
    80025e50:	2c8040ef          	jal	8002a118 <putchar>
    80025e54:	b9bd                	j	80025ad2 <stateen_CSRIND_test+0xee>
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e56:	00008517          	auipc	a0,0x8
    80025e5a:	3aa50513          	addi	a0,a0,938 # 8002e200 <__func__.0+0x318>
    80025e5e:	5cc050ef          	jal	8002b42a <printf>
    80025e62:	02900513          	li	a0,41
    80025e66:	2b2040ef          	jal	8002a118 <putchar>
    80025e6a:	befd                	j	80025a68 <stateen_CSRIND_test+0x84>

0000000080025e6c <stateen_ENVCFG_test_1>:

// ----------


bool stateen_ENVCFG_test_1(){
    80025e6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80025e6e:	00008597          	auipc	a1,0x8
    80025e72:	d5a58593          	addi	a1,a1,-678 # 8002dbc8 <__func__.14>
    80025e76:	00008517          	auipc	a0,0x8
    80025e7a:	35250513          	addi	a0,a0,850 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_1(){
    80025e7e:	ec06                	sd	ra,24(sp)
    80025e80:	e822                	sd	s0,16(sp)
    80025e82:	e426                	sd	s1,8(sp)
    TEST_START();
    80025e84:	5a6050ef          	jal	8002b42a <printf>
    80025e88:	4529                	li	a0,10
    80025e8a:	28e040ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80025e8e:	4511                	li	a0,4
    80025e90:	878db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=0,hu mode 不可访问Henvcfg和Senvcfg寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025e94:	4785                	li	a5,1
    80025e96:	17fa                	slli	a5,a5,0x3e
    80025e98:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80025e9c:	4505                	li	a0,1
    80025e9e:	86adb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025ea2:	f6bda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025ea6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025eaa:	9a4db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss envcfg register cause to illegal except when mstateen.envcfg=0",
    80025eae:	08200593          	li	a1,130
    80025eb2:	00012617          	auipc	a2,0x12
    80025eb6:	2b660613          	addi	a2,a2,694 # 80038168 <__func__.0+0xa280>
    80025eba:	00008517          	auipc	a0,0x8
    80025ebe:	32650513          	addi	a0,a0,806 # 8002e1e0 <__func__.0+0x2f8>
    80025ec2:	568050ef          	jal	8002b42a <printf>
    80025ec6:	00032797          	auipc	a5,0x32
    80025eca:	14b7c783          	lbu	a5,331(a5) # 80058011 <excpt+0x1>
    80025ece:	00032497          	auipc	s1,0x32
    80025ed2:	14248493          	addi	s1,s1,322 # 80058010 <excpt>
    80025ed6:	00008597          	auipc	a1,0x8
    80025eda:	2e258593          	addi	a1,a1,738 # 8002e1b8 <__func__.0+0x2d0>
    80025ede:	cf89                	beqz	a5,80025ef8 <stateen_ENVCFG_test_1+0x8c>
    80025ee0:	6498                	ld	a4,8(s1)
    80025ee2:	4789                	li	a5,2
    80025ee4:	00008597          	auipc	a1,0x8
    80025ee8:	2c458593          	addi	a1,a1,708 # 8002e1a8 <__func__.0+0x2c0>
    80025eec:	00f70663          	beq	a4,a5,80025ef8 <stateen_ENVCFG_test_1+0x8c>
    80025ef0:	00008597          	auipc	a1,0x8
    80025ef4:	2c858593          	addi	a1,a1,712 # 8002e1b8 <__func__.0+0x2d0>
    80025ef8:	00008517          	auipc	a0,0x8
    80025efc:	30050513          	addi	a0,a0,768 # 8002e1f8 <__func__.0+0x310>
    80025f00:	52a050ef          	jal	8002b42a <printf>
    80025f04:	00032797          	auipc	a5,0x32
    80025f08:	10d7c783          	lbu	a5,269(a5) # 80058011 <excpt+0x1>
    80025f0c:	c789                	beqz	a5,80025f16 <stateen_ENVCFG_test_1+0xaa>
    80025f0e:	6498                	ld	a4,8(s1)
    80025f10:	4789                	li	a5,2
    80025f12:	00f70c63          	beq	a4,a5,80025f2a <stateen_ENVCFG_test_1+0xbe>
    80025f16:	00008517          	auipc	a0,0x8
    80025f1a:	2ea50513          	addi	a0,a0,746 # 8002e200 <__func__.0+0x318>
    80025f1e:	50c050ef          	jal	8002b42a <printf>
    80025f22:	02900513          	li	a0,41
    80025f26:	1f2040ef          	jal	8002a118 <putchar>
    80025f2a:	4529                	li	a0,10
    80025f2c:	1ec040ef          	jal	8002a118 <putchar>
    80025f30:	00032797          	auipc	a5,0x32
    80025f34:	0e17c783          	lbu	a5,225(a5) # 80058011 <excpt+0x1>
    80025f38:	4401                	li	s0,0
    80025f3a:	c789                	beqz	a5,80025f44 <stateen_ENVCFG_test_1+0xd8>
    80025f3c:	6480                	ld	s0,8(s1)
    80025f3e:	1479                	addi	s0,s0,-2
    80025f40:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80025f44:	4505                	li	a0,1
    80025f46:	fc3da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025f4a:	ec3da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80025f4e:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80025f52:	8fcdb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025f56:	08200593          	li	a1,130
    80025f5a:	00012617          	auipc	a2,0x12
    80025f5e:	25e60613          	addi	a2,a2,606 # 800381b8 <__func__.0+0xa2d0>
    80025f62:	00008517          	auipc	a0,0x8
    80025f66:	27e50513          	addi	a0,a0,638 # 8002e1e0 <__func__.0+0x2f8>
    80025f6a:	4c0050ef          	jal	8002b42a <printf>
    80025f6e:	00032797          	auipc	a5,0x32
    80025f72:	0a37c783          	lbu	a5,163(a5) # 80058011 <excpt+0x1>
    80025f76:	00008597          	auipc	a1,0x8
    80025f7a:	24258593          	addi	a1,a1,578 # 8002e1b8 <__func__.0+0x2d0>
    80025f7e:	cf89                	beqz	a5,80025f98 <stateen_ENVCFG_test_1+0x12c>
    80025f80:	6498                	ld	a4,8(s1)
    80025f82:	4789                	li	a5,2
    80025f84:	00008597          	auipc	a1,0x8
    80025f88:	22458593          	addi	a1,a1,548 # 8002e1a8 <__func__.0+0x2c0>
    80025f8c:	00f70663          	beq	a4,a5,80025f98 <stateen_ENVCFG_test_1+0x12c>
    80025f90:	00008597          	auipc	a1,0x8
    80025f94:	22858593          	addi	a1,a1,552 # 8002e1b8 <__func__.0+0x2d0>
    80025f98:	00008517          	auipc	a0,0x8
    80025f9c:	26050513          	addi	a0,a0,608 # 8002e1f8 <__func__.0+0x310>
    80025fa0:	48a050ef          	jal	8002b42a <printf>
    80025fa4:	00032797          	auipc	a5,0x32
    80025fa8:	06d7c783          	lbu	a5,109(a5) # 80058011 <excpt+0x1>
    80025fac:	c789                	beqz	a5,80025fb6 <stateen_ENVCFG_test_1+0x14a>
    80025fae:	6498                	ld	a4,8(s1)
    80025fb0:	4789                	li	a5,2
    80025fb2:	00f70c63          	beq	a4,a5,80025fca <stateen_ENVCFG_test_1+0x15e>
    80025fb6:	00008517          	auipc	a0,0x8
    80025fba:	24a50513          	addi	a0,a0,586 # 8002e200 <__func__.0+0x318>
    80025fbe:	46c050ef          	jal	8002b42a <printf>
    80025fc2:	02900513          	li	a0,41
    80025fc6:	152040ef          	jal	8002a118 <putchar>
    80025fca:	4529                	li	a0,10
    80025fcc:	14c040ef          	jal	8002a118 <putchar>
    80025fd0:	c015                	beqz	s0,80025ff4 <stateen_ENVCFG_test_1+0x188>
    80025fd2:	00032417          	auipc	s0,0x32
    80025fd6:	03f44403          	lbu	s0,63(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80025fda:	00008597          	auipc	a1,0x8
    80025fde:	1de58593          	addi	a1,a1,478 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025fe2:	cc11                	beqz	s0,80025ffe <stateen_ENVCFG_test_1+0x192>
    80025fe4:	6498                	ld	a4,8(s1)
    80025fe6:	4789                	li	a5,2
    TEST_END();
    80025fe8:	00008597          	auipc	a1,0x8
    80025fec:	1c058593          	addi	a1,a1,448 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025ff0:	00f70763          	beq	a4,a5,80025ffe <stateen_ENVCFG_test_1+0x192>
    80025ff4:	4401                	li	s0,0
    TEST_END();
    80025ff6:	00008597          	auipc	a1,0x8
    80025ffa:	1c258593          	addi	a1,a1,450 # 8002e1b8 <__func__.0+0x2d0>
    80025ffe:	00008517          	auipc	a0,0x8
    80026002:	26250513          	addi	a0,a0,610 # 8002e260 <__func__.0+0x378>
    80026006:	424050ef          	jal	8002b42a <printf>
    8002600a:	4511                	li	a0,4
    8002600c:	efdda0ef          	jal	80000f08 <goto_priv>
    80026010:	815db0ef          	jal	80001824 <reset_state>

}
    80026014:	60e2                	ld	ra,24(sp)
    80026016:	8522                	mv	a0,s0
    80026018:	6442                	ld	s0,16(sp)
    8002601a:	64a2                	ld	s1,8(sp)
    8002601c:	6105                	addi	sp,sp,32
    8002601e:	8082                	ret

0000000080026020 <stateen_ENVCFG_test_2>:

bool stateen_ENVCFG_test_2(){
    80026020:	1101                	addi	sp,sp,-32

    TEST_START();
    80026022:	00008597          	auipc	a1,0x8
    80026026:	bbe58593          	addi	a1,a1,-1090 # 8002dbe0 <__func__.13>
    8002602a:	00008517          	auipc	a0,0x8
    8002602e:	19e50513          	addi	a0,a0,414 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_2(){
    80026032:	ec06                	sd	ra,24(sp)
    80026034:	e822                	sd	s0,16(sp)
    80026036:	e426                	sd	s1,8(sp)
    TEST_START();
    80026038:	3f2050ef          	jal	8002b42a <printf>
    8002603c:	4529                	li	a0,10
    8002603e:	0da040ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026042:	4511                	li	a0,4
    80026044:	ec5da0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026048:	4785                	li	a5,1
    8002604a:	17fa                	slli	a5,a5,0x3e
    8002604c:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026050:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时,不可访问Henvcfg和Senvcfg寄存器
    goto_priv(PRIV_VU);
    80026054:	4501                	li	a0,0
    80026056:	eb3da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002605a:	db3da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002605e:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026062:	fedda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026066:	08200593          	li	a1,130
    8002606a:	00012617          	auipc	a2,0x12
    8002606e:	19e60613          	addi	a2,a2,414 # 80038208 <__func__.0+0xa320>
    80026072:	00008517          	auipc	a0,0x8
    80026076:	16e50513          	addi	a0,a0,366 # 8002e1e0 <__func__.0+0x2f8>
    8002607a:	3b0050ef          	jal	8002b42a <printf>
    8002607e:	00032797          	auipc	a5,0x32
    80026082:	f937c783          	lbu	a5,-109(a5) # 80058011 <excpt+0x1>
    80026086:	00032497          	auipc	s1,0x32
    8002608a:	f8a48493          	addi	s1,s1,-118 # 80058010 <excpt>
    8002608e:	00008597          	auipc	a1,0x8
    80026092:	12a58593          	addi	a1,a1,298 # 8002e1b8 <__func__.0+0x2d0>
    80026096:	cf89                	beqz	a5,800260b0 <stateen_ENVCFG_test_2+0x90>
    80026098:	6498                	ld	a4,8(s1)
    8002609a:	47d9                	li	a5,22
    8002609c:	00008597          	auipc	a1,0x8
    800260a0:	10c58593          	addi	a1,a1,268 # 8002e1a8 <__func__.0+0x2c0>
    800260a4:	00f70663          	beq	a4,a5,800260b0 <stateen_ENVCFG_test_2+0x90>
    800260a8:	00008597          	auipc	a1,0x8
    800260ac:	11058593          	addi	a1,a1,272 # 8002e1b8 <__func__.0+0x2d0>
    800260b0:	00008517          	auipc	a0,0x8
    800260b4:	14850513          	addi	a0,a0,328 # 8002e1f8 <__func__.0+0x310>
    800260b8:	372050ef          	jal	8002b42a <printf>
    800260bc:	00032797          	auipc	a5,0x32
    800260c0:	f557c783          	lbu	a5,-171(a5) # 80058011 <excpt+0x1>
    800260c4:	c789                	beqz	a5,800260ce <stateen_ENVCFG_test_2+0xae>
    800260c6:	6498                	ld	a4,8(s1)
    800260c8:	47d9                	li	a5,22
    800260ca:	00f70c63          	beq	a4,a5,800260e2 <stateen_ENVCFG_test_2+0xc2>
    800260ce:	00008517          	auipc	a0,0x8
    800260d2:	13250513          	addi	a0,a0,306 # 8002e200 <__func__.0+0x318>
    800260d6:	354050ef          	jal	8002b42a <printf>
    800260da:	02900513          	li	a0,41
    800260de:	03a040ef          	jal	8002a118 <putchar>
    800260e2:	4529                	li	a0,10
    800260e4:	034040ef          	jal	8002a118 <putchar>
    800260e8:	00032797          	auipc	a5,0x32
    800260ec:	f297c783          	lbu	a5,-215(a5) # 80058011 <excpt+0x1>
    800260f0:	4401                	li	s0,0
    800260f2:	c789                	beqz	a5,800260fc <stateen_ENVCFG_test_2+0xdc>
    800260f4:	6480                	ld	s0,8(s1)
    800260f6:	1429                	addi	s0,s0,-22
    800260f8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800260fc:	4501                	li	a0,0
    800260fe:	e0bda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026102:	d0bda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026106:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002610a:	f45da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002610e:	08200593          	li	a1,130
    80026112:	00012617          	auipc	a2,0x12
    80026116:	14e60613          	addi	a2,a2,334 # 80038260 <__func__.0+0xa378>
    8002611a:	00008517          	auipc	a0,0x8
    8002611e:	0c650513          	addi	a0,a0,198 # 8002e1e0 <__func__.0+0x2f8>
    80026122:	308050ef          	jal	8002b42a <printf>
    80026126:	00032797          	auipc	a5,0x32
    8002612a:	eeb7c783          	lbu	a5,-277(a5) # 80058011 <excpt+0x1>
    8002612e:	00008597          	auipc	a1,0x8
    80026132:	08a58593          	addi	a1,a1,138 # 8002e1b8 <__func__.0+0x2d0>
    80026136:	cf89                	beqz	a5,80026150 <stateen_ENVCFG_test_2+0x130>
    80026138:	6498                	ld	a4,8(s1)
    8002613a:	47d9                	li	a5,22
    8002613c:	00008597          	auipc	a1,0x8
    80026140:	06c58593          	addi	a1,a1,108 # 8002e1a8 <__func__.0+0x2c0>
    80026144:	00f70663          	beq	a4,a5,80026150 <stateen_ENVCFG_test_2+0x130>
    80026148:	00008597          	auipc	a1,0x8
    8002614c:	07058593          	addi	a1,a1,112 # 8002e1b8 <__func__.0+0x2d0>
    80026150:	00008517          	auipc	a0,0x8
    80026154:	0a850513          	addi	a0,a0,168 # 8002e1f8 <__func__.0+0x310>
    80026158:	2d2050ef          	jal	8002b42a <printf>
    8002615c:	00032797          	auipc	a5,0x32
    80026160:	eb57c783          	lbu	a5,-331(a5) # 80058011 <excpt+0x1>
    80026164:	c789                	beqz	a5,8002616e <stateen_ENVCFG_test_2+0x14e>
    80026166:	6498                	ld	a4,8(s1)
    80026168:	47d9                	li	a5,22
    8002616a:	00f70c63          	beq	a4,a5,80026182 <stateen_ENVCFG_test_2+0x162>
    8002616e:	00008517          	auipc	a0,0x8
    80026172:	09250513          	addi	a0,a0,146 # 8002e200 <__func__.0+0x318>
    80026176:	2b4050ef          	jal	8002b42a <printf>
    8002617a:	02900513          	li	a0,41
    8002617e:	79b030ef          	jal	8002a118 <putchar>
    80026182:	4529                	li	a0,10
    80026184:	795030ef          	jal	8002a118 <putchar>
    80026188:	c015                	beqz	s0,800261ac <stateen_ENVCFG_test_2+0x18c>
    8002618a:	00032417          	auipc	s0,0x32
    8002618e:	e8744403          	lbu	s0,-377(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80026192:	00008597          	auipc	a1,0x8
    80026196:	02658593          	addi	a1,a1,38 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002619a:	cc11                	beqz	s0,800261b6 <stateen_ENVCFG_test_2+0x196>
    8002619c:	6498                	ld	a4,8(s1)
    8002619e:	47d9                	li	a5,22
    TEST_END();
    800261a0:	00008597          	auipc	a1,0x8
    800261a4:	00858593          	addi	a1,a1,8 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800261a8:	00f70763          	beq	a4,a5,800261b6 <stateen_ENVCFG_test_2+0x196>
    800261ac:	4401                	li	s0,0
    TEST_END();
    800261ae:	00008597          	auipc	a1,0x8
    800261b2:	00a58593          	addi	a1,a1,10 # 8002e1b8 <__func__.0+0x2d0>
    800261b6:	00008517          	auipc	a0,0x8
    800261ba:	0aa50513          	addi	a0,a0,170 # 8002e260 <__func__.0+0x378>
    800261be:	26c050ef          	jal	8002b42a <printf>
    800261c2:	4511                	li	a0,4
    800261c4:	d45da0ef          	jal	80000f08 <goto_priv>
    800261c8:	e5cdb0ef          	jal	80001824 <reset_state>

}
    800261cc:	60e2                	ld	ra,24(sp)
    800261ce:	8522                	mv	a0,s0
    800261d0:	6442                	ld	s0,16(sp)
    800261d2:	64a2                	ld	s1,8(sp)
    800261d4:	6105                	addi	sp,sp,32
    800261d6:	8082                	ret

00000000800261d8 <stateen_ENVCFG_test_3>:

bool stateen_ENVCFG_test_3(){
    800261d8:	1141                	addi	sp,sp,-16

    //当mstateen.ENVCFG=0,m mode 可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    800261da:	00008597          	auipc	a1,0x8
    800261de:	a1e58593          	addi	a1,a1,-1506 # 8002dbf8 <__func__.12>
    800261e2:	00008517          	auipc	a0,0x8
    800261e6:	fe650513          	addi	a0,a0,-26 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_3(){
    800261ea:	e406                	sd	ra,8(sp)
    800261ec:	e022                	sd	s0,0(sp)
    TEST_START();
    800261ee:	23c050ef          	jal	8002b42a <printf>
    800261f2:	4529                	li	a0,10
    800261f4:	725030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800261f8:	4511                	li	a0,4
    800261fa:	d0fda0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800261fe:	4785                	li	a5,1
    80026200:	17fa                	slli	a5,a5,0x3e
    80026202:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80026206:	4511                	li	a0,4
    80026208:	d01da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002620c:	c01da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026210:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026214:	e3bda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026218:	08200593          	li	a1,130
    8002621c:	00012617          	auipc	a2,0x12
    80026220:	09c60613          	addi	a2,a2,156 # 800382b8 <__func__.0+0xa3d0>
    80026224:	00008517          	auipc	a0,0x8
    80026228:	fbc50513          	addi	a0,a0,-68 # 8002e1e0 <__func__.0+0x2f8>
    8002622c:	1fe050ef          	jal	8002b42a <printf>
    80026230:	00032797          	auipc	a5,0x32
    80026234:	de17c783          	lbu	a5,-543(a5) # 80058011 <excpt+0x1>
    80026238:	00008597          	auipc	a1,0x8
    8002623c:	f7058593          	addi	a1,a1,-144 # 8002e1a8 <__func__.0+0x2c0>
    80026240:	c789                	beqz	a5,8002624a <stateen_ENVCFG_test_3+0x72>
    80026242:	00008597          	auipc	a1,0x8
    80026246:	f7658593          	addi	a1,a1,-138 # 8002e1b8 <__func__.0+0x2d0>
    8002624a:	00008517          	auipc	a0,0x8
    8002624e:	fae50513          	addi	a0,a0,-82 # 8002e1f8 <__func__.0+0x310>
    80026252:	1d8050ef          	jal	8002b42a <printf>
    80026256:	00032797          	auipc	a5,0x32
    8002625a:	dbb7c783          	lbu	a5,-581(a5) # 80058011 <excpt+0x1>
    8002625e:	e7e9                	bnez	a5,80026328 <stateen_ENVCFG_test_3+0x150>
    80026260:	4529                	li	a0,10
    80026262:	6b7030ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026266:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026268:	00032417          	auipc	s0,0x32
    8002626c:	da944403          	lbu	s0,-599(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80026270:	c99da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026274:	b99da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026278:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002627c:	dd3da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    80026280:	08200593          	li	a1,130
    80026284:	00012617          	auipc	a2,0x12
    80026288:	07460613          	addi	a2,a2,116 # 800382f8 <__func__.0+0xa410>
    8002628c:	00008517          	auipc	a0,0x8
    80026290:	f5450513          	addi	a0,a0,-172 # 8002e1e0 <__func__.0+0x2f8>
    80026294:	196050ef          	jal	8002b42a <printf>
    80026298:	00032797          	auipc	a5,0x32
    8002629c:	d797c783          	lbu	a5,-647(a5) # 80058011 <excpt+0x1>
    800262a0:	00008597          	auipc	a1,0x8
    800262a4:	f1858593          	addi	a1,a1,-232 # 8002e1b8 <__func__.0+0x2d0>
    800262a8:	e789                	bnez	a5,800262b2 <stateen_ENVCFG_test_3+0xda>
    800262aa:	00008597          	auipc	a1,0x8
    800262ae:	efe58593          	addi	a1,a1,-258 # 8002e1a8 <__func__.0+0x2c0>
    800262b2:	00008517          	auipc	a0,0x8
    800262b6:	f4650513          	addi	a0,a0,-186 # 8002e1f8 <__func__.0+0x310>
    800262ba:	170050ef          	jal	8002b42a <printf>
    800262be:	00032797          	auipc	a5,0x32
    800262c2:	d537c783          	lbu	a5,-685(a5) # 80058011 <excpt+0x1>
    800262c6:	e7b1                	bnez	a5,80026312 <stateen_ENVCFG_test_3+0x13a>
    800262c8:	4529                	li	a0,10
    800262ca:	64f030ef          	jal	8002a118 <putchar>
    800262ce:	e815                	bnez	s0,80026302 <stateen_ENVCFG_test_3+0x12a>
    800262d0:	00032797          	auipc	a5,0x32
    800262d4:	d417c783          	lbu	a5,-703(a5) # 80058011 <excpt+0x1>
    800262d8:	c79d                	beqz	a5,80026306 <stateen_ENVCFG_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    800262da:	00008597          	auipc	a1,0x8
    800262de:	ede58593          	addi	a1,a1,-290 # 8002e1b8 <__func__.0+0x2d0>
    800262e2:	00008517          	auipc	a0,0x8
    800262e6:	f7e50513          	addi	a0,a0,-130 # 8002e260 <__func__.0+0x378>
    800262ea:	140050ef          	jal	8002b42a <printf>
    800262ee:	4511                	li	a0,4
    800262f0:	c19da0ef          	jal	80000f08 <goto_priv>
    800262f4:	d30db0ef          	jal	80001824 <reset_state>

}
    800262f8:	60a2                	ld	ra,8(sp)
    800262fa:	8522                	mv	a0,s0
    800262fc:	6402                	ld	s0,0(sp)
    800262fe:	0141                	addi	sp,sp,16
    80026300:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    80026302:	4401                	li	s0,0
    80026304:	bfd9                	j	800262da <stateen_ENVCFG_test_3+0x102>
    80026306:	4405                	li	s0,1
    TEST_END();
    80026308:	00008597          	auipc	a1,0x8
    8002630c:	ea058593          	addi	a1,a1,-352 # 8002e1a8 <__func__.0+0x2c0>
    80026310:	bfc9                	j	800262e2 <stateen_ENVCFG_test_3+0x10a>
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    80026312:	00008517          	auipc	a0,0x8
    80026316:	eee50513          	addi	a0,a0,-274 # 8002e200 <__func__.0+0x318>
    8002631a:	110050ef          	jal	8002b42a <printf>
    8002631e:	02900513          	li	a0,41
    80026322:	5f7030ef          	jal	8002a118 <putchar>
    80026326:	b74d                	j	800262c8 <stateen_ENVCFG_test_3+0xf0>
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026328:	00008517          	auipc	a0,0x8
    8002632c:	ed850513          	addi	a0,a0,-296 # 8002e200 <__func__.0+0x318>
    80026330:	0fa050ef          	jal	8002b42a <printf>
    80026334:	02900513          	li	a0,41
    80026338:	5e1030ef          	jal	8002a118 <putchar>
    8002633c:	b715                	j	80026260 <stateen_ENVCFG_test_3+0x88>

000000008002633e <stateen_ENVCFG_test_4>:


bool stateen_ENVCFG_test_4(){
    8002633e:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026340:	00008597          	auipc	a1,0x8
    80026344:	8d058593          	addi	a1,a1,-1840 # 8002dc10 <__func__.11>
    80026348:	00008517          	auipc	a0,0x8
    8002634c:	e8050513          	addi	a0,a0,-384 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_4(){
    80026350:	ec06                	sd	ra,24(sp)
    80026352:	e822                	sd	s0,16(sp)
    80026354:	e426                	sd	s1,8(sp)
    TEST_START();
    80026356:	0d4050ef          	jal	8002b42a <printf>
    8002635a:	4529                	li	a0,10
    8002635c:	5bd030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026360:	4511                	li	a0,4
    80026362:	ba7da0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026366:	4785                	li	a5,1
    80026368:	17fa                	slli	a5,a5,0x3e
    8002636a:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    8002636e:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80026372:	30c025f3          	csrr	a1,mstateen0
    80026376:	00010517          	auipc	a0,0x10
    8002637a:	62250513          	addi	a0,a0,1570 # 80036998 <__func__.0+0x8ab0>
    8002637e:	0ac050ef          	jal	8002b42a <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80026382:	60c025f3          	csrr	a1,hstateen0
    80026386:	00010517          	auipc	a0,0x10
    8002638a:	62250513          	addi	a0,a0,1570 # 800369a8 <__func__.0+0x8ac0>
    8002638e:	09c050ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    80026392:	4509                	li	a0,2
    80026394:	b75da0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80026398:	a75da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002639c:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800263a0:	cafda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800263a4:	08200593          	li	a1,130
    800263a8:	00012617          	auipc	a2,0x12
    800263ac:	f9060613          	addi	a2,a2,-112 # 80038338 <__func__.0+0xa450>
    800263b0:	00008517          	auipc	a0,0x8
    800263b4:	e3050513          	addi	a0,a0,-464 # 8002e1e0 <__func__.0+0x2f8>
    800263b8:	072050ef          	jal	8002b42a <printf>
    800263bc:	00032797          	auipc	a5,0x32
    800263c0:	c557c783          	lbu	a5,-939(a5) # 80058011 <excpt+0x1>
    800263c4:	00032497          	auipc	s1,0x32
    800263c8:	c4c48493          	addi	s1,s1,-948 # 80058010 <excpt>
    800263cc:	00008597          	auipc	a1,0x8
    800263d0:	dec58593          	addi	a1,a1,-532 # 8002e1b8 <__func__.0+0x2d0>
    800263d4:	cf89                	beqz	a5,800263ee <stateen_ENVCFG_test_4+0xb0>
    800263d6:	6498                	ld	a4,8(s1)
    800263d8:	47d9                	li	a5,22
    800263da:	00008597          	auipc	a1,0x8
    800263de:	dce58593          	addi	a1,a1,-562 # 8002e1a8 <__func__.0+0x2c0>
    800263e2:	00f70663          	beq	a4,a5,800263ee <stateen_ENVCFG_test_4+0xb0>
    800263e6:	00008597          	auipc	a1,0x8
    800263ea:	dd258593          	addi	a1,a1,-558 # 8002e1b8 <__func__.0+0x2d0>
    800263ee:	00008517          	auipc	a0,0x8
    800263f2:	e0a50513          	addi	a0,a0,-502 # 8002e1f8 <__func__.0+0x310>
    800263f6:	034050ef          	jal	8002b42a <printf>
    800263fa:	00032797          	auipc	a5,0x32
    800263fe:	c177c783          	lbu	a5,-1001(a5) # 80058011 <excpt+0x1>
    80026402:	c789                	beqz	a5,8002640c <stateen_ENVCFG_test_4+0xce>
    80026404:	6498                	ld	a4,8(s1)
    80026406:	47d9                	li	a5,22
    80026408:	00f70c63          	beq	a4,a5,80026420 <stateen_ENVCFG_test_4+0xe2>
    8002640c:	00008517          	auipc	a0,0x8
    80026410:	df450513          	addi	a0,a0,-524 # 8002e200 <__func__.0+0x318>
    80026414:	016050ef          	jal	8002b42a <printf>
    80026418:	02900513          	li	a0,41
    8002641c:	4fd030ef          	jal	8002a118 <putchar>
    80026420:	4529                	li	a0,10
    80026422:	4f7030ef          	jal	8002a118 <putchar>
    80026426:	00032797          	auipc	a5,0x32
    8002642a:	beb7c783          	lbu	a5,-1045(a5) # 80058011 <excpt+0x1>
    8002642e:	4401                	li	s0,0
    80026430:	c789                	beqz	a5,8002643a <stateen_ENVCFG_test_4+0xfc>
    80026432:	6480                	ld	s0,8(s1)
    80026434:	1429                	addi	s0,s0,-22
    80026436:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8002643a:	4509                	li	a0,2
    8002643c:	acdda0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80026440:	9cdda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026444:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026448:	c07da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002644c:	08200593          	li	a1,130
    80026450:	00012617          	auipc	a2,0x12
    80026454:	f4060613          	addi	a2,a2,-192 # 80038390 <__func__.0+0xa4a8>
    80026458:	00008517          	auipc	a0,0x8
    8002645c:	d8850513          	addi	a0,a0,-632 # 8002e1e0 <__func__.0+0x2f8>
    80026460:	7cb040ef          	jal	8002b42a <printf>
    80026464:	00032797          	auipc	a5,0x32
    80026468:	bad7c783          	lbu	a5,-1107(a5) # 80058011 <excpt+0x1>
    8002646c:	00008597          	auipc	a1,0x8
    80026470:	d4c58593          	addi	a1,a1,-692 # 8002e1b8 <__func__.0+0x2d0>
    80026474:	cf89                	beqz	a5,8002648e <stateen_ENVCFG_test_4+0x150>
    80026476:	6498                	ld	a4,8(s1)
    80026478:	47d9                	li	a5,22
    8002647a:	00008597          	auipc	a1,0x8
    8002647e:	d2e58593          	addi	a1,a1,-722 # 8002e1a8 <__func__.0+0x2c0>
    80026482:	00f70663          	beq	a4,a5,8002648e <stateen_ENVCFG_test_4+0x150>
    80026486:	00008597          	auipc	a1,0x8
    8002648a:	d3258593          	addi	a1,a1,-718 # 8002e1b8 <__func__.0+0x2d0>
    8002648e:	00008517          	auipc	a0,0x8
    80026492:	d6a50513          	addi	a0,a0,-662 # 8002e1f8 <__func__.0+0x310>
    80026496:	795040ef          	jal	8002b42a <printf>
    8002649a:	00032797          	auipc	a5,0x32
    8002649e:	b777c783          	lbu	a5,-1161(a5) # 80058011 <excpt+0x1>
    800264a2:	c789                	beqz	a5,800264ac <stateen_ENVCFG_test_4+0x16e>
    800264a4:	6498                	ld	a4,8(s1)
    800264a6:	47d9                	li	a5,22
    800264a8:	00f70c63          	beq	a4,a5,800264c0 <stateen_ENVCFG_test_4+0x182>
    800264ac:	00008517          	auipc	a0,0x8
    800264b0:	d5450513          	addi	a0,a0,-684 # 8002e200 <__func__.0+0x318>
    800264b4:	777040ef          	jal	8002b42a <printf>
    800264b8:	02900513          	li	a0,41
    800264bc:	45d030ef          	jal	8002a118 <putchar>
    800264c0:	4529                	li	a0,10
    800264c2:	457030ef          	jal	8002a118 <putchar>
    800264c6:	c015                	beqz	s0,800264ea <stateen_ENVCFG_test_4+0x1ac>
    800264c8:	00032417          	auipc	s0,0x32
    800264cc:	b4944403          	lbu	s0,-1207(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    800264d0:	00008597          	auipc	a1,0x8
    800264d4:	ce858593          	addi	a1,a1,-792 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264d8:	cc11                	beqz	s0,800264f4 <stateen_ENVCFG_test_4+0x1b6>
    800264da:	6498                	ld	a4,8(s1)
    800264dc:	47d9                	li	a5,22
    TEST_END();
    800264de:	00008597          	auipc	a1,0x8
    800264e2:	cca58593          	addi	a1,a1,-822 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264e6:	00f70763          	beq	a4,a5,800264f4 <stateen_ENVCFG_test_4+0x1b6>
    800264ea:	4401                	li	s0,0
    TEST_END();
    800264ec:	00008597          	auipc	a1,0x8
    800264f0:	ccc58593          	addi	a1,a1,-820 # 8002e1b8 <__func__.0+0x2d0>
    800264f4:	00008517          	auipc	a0,0x8
    800264f8:	d6c50513          	addi	a0,a0,-660 # 8002e260 <__func__.0+0x378>
    800264fc:	72f040ef          	jal	8002b42a <printf>
    80026500:	4511                	li	a0,4
    80026502:	a07da0ef          	jal	80000f08 <goto_priv>
    80026506:	b1edb0ef          	jal	80001824 <reset_state>

}
    8002650a:	60e2                	ld	ra,24(sp)
    8002650c:	8522                	mv	a0,s0
    8002650e:	6442                	ld	s0,16(sp)
    80026510:	64a2                	ld	s1,8(sp)
    80026512:	6105                	addi	sp,sp,32
    80026514:	8082                	ret

0000000080026516 <stateen_ENVCFG_test_5>:

bool stateen_ENVCFG_test_5(){
    80026516:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=0,hs mode 不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026518:	00007597          	auipc	a1,0x7
    8002651c:	71058593          	addi	a1,a1,1808 # 8002dc28 <__func__.10>
    80026520:	00008517          	auipc	a0,0x8
    80026524:	ca850513          	addi	a0,a0,-856 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_5(){
    80026528:	ec06                	sd	ra,24(sp)
    8002652a:	e822                	sd	s0,16(sp)
    8002652c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002652e:	6fd040ef          	jal	8002b42a <printf>
    80026532:	4529                	li	a0,10
    80026534:	3e5030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026538:	4511                	li	a0,4
    8002653a:	9cfda0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    8002653e:	4785                	li	a5,1
    80026540:	17fa                	slli	a5,a5,0x3e
    80026542:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80026546:	450d                	li	a0,3
    80026548:	9c1da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002654c:	8c1da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026550:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026554:	afbda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register cause to illegal except when mstateen.envcfg=0",
    80026558:	08200593          	li	a1,130
    8002655c:	00012617          	auipc	a2,0x12
    80026560:	e8c60613          	addi	a2,a2,-372 # 800383e8 <__func__.0+0xa500>
    80026564:	00008517          	auipc	a0,0x8
    80026568:	c7c50513          	addi	a0,a0,-900 # 8002e1e0 <__func__.0+0x2f8>
    8002656c:	6bf040ef          	jal	8002b42a <printf>
    80026570:	00032797          	auipc	a5,0x32
    80026574:	aa17c783          	lbu	a5,-1375(a5) # 80058011 <excpt+0x1>
    80026578:	00032497          	auipc	s1,0x32
    8002657c:	a9848493          	addi	s1,s1,-1384 # 80058010 <excpt>
    80026580:	00008597          	auipc	a1,0x8
    80026584:	c3858593          	addi	a1,a1,-968 # 8002e1b8 <__func__.0+0x2d0>
    80026588:	cf89                	beqz	a5,800265a2 <stateen_ENVCFG_test_5+0x8c>
    8002658a:	6498                	ld	a4,8(s1)
    8002658c:	4789                	li	a5,2
    8002658e:	00008597          	auipc	a1,0x8
    80026592:	c1a58593          	addi	a1,a1,-998 # 8002e1a8 <__func__.0+0x2c0>
    80026596:	00f70663          	beq	a4,a5,800265a2 <stateen_ENVCFG_test_5+0x8c>
    8002659a:	00008597          	auipc	a1,0x8
    8002659e:	c1e58593          	addi	a1,a1,-994 # 8002e1b8 <__func__.0+0x2d0>
    800265a2:	00008517          	auipc	a0,0x8
    800265a6:	c5650513          	addi	a0,a0,-938 # 8002e1f8 <__func__.0+0x310>
    800265aa:	681040ef          	jal	8002b42a <printf>
    800265ae:	00032797          	auipc	a5,0x32
    800265b2:	a637c783          	lbu	a5,-1437(a5) # 80058011 <excpt+0x1>
    800265b6:	c789                	beqz	a5,800265c0 <stateen_ENVCFG_test_5+0xaa>
    800265b8:	6498                	ld	a4,8(s1)
    800265ba:	4789                	li	a5,2
    800265bc:	00f70c63          	beq	a4,a5,800265d4 <stateen_ENVCFG_test_5+0xbe>
    800265c0:	00008517          	auipc	a0,0x8
    800265c4:	c4050513          	addi	a0,a0,-960 # 8002e200 <__func__.0+0x318>
    800265c8:	663040ef          	jal	8002b42a <printf>
    800265cc:	02900513          	li	a0,41
    800265d0:	349030ef          	jal	8002a118 <putchar>
    800265d4:	4529                	li	a0,10
    800265d6:	343030ef          	jal	8002a118 <putchar>
    800265da:	00032797          	auipc	a5,0x32
    800265de:	a377c783          	lbu	a5,-1481(a5) # 80058011 <excpt+0x1>
    800265e2:	4401                	li	s0,0
    800265e4:	c789                	beqz	a5,800265ee <stateen_ENVCFG_test_5+0xd8>
    800265e6:	6480                	ld	s0,8(s1)
    800265e8:	1479                	addi	s0,s0,-2
    800265ea:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    800265ee:	450d                	li	a0,3
    800265f0:	919da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800265f4:	819da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    800265f8:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800265fc:	a53da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026600:	08200593          	li	a1,130
    80026604:	00012617          	auipc	a2,0x12
    80026608:	e3460613          	addi	a2,a2,-460 # 80038438 <__func__.0+0xa550>
    8002660c:	00008517          	auipc	a0,0x8
    80026610:	bd450513          	addi	a0,a0,-1068 # 8002e1e0 <__func__.0+0x2f8>
    80026614:	617040ef          	jal	8002b42a <printf>
    80026618:	00032797          	auipc	a5,0x32
    8002661c:	9f97c783          	lbu	a5,-1543(a5) # 80058011 <excpt+0x1>
    80026620:	00008597          	auipc	a1,0x8
    80026624:	b9858593          	addi	a1,a1,-1128 # 8002e1b8 <__func__.0+0x2d0>
    80026628:	cf89                	beqz	a5,80026642 <stateen_ENVCFG_test_5+0x12c>
    8002662a:	6498                	ld	a4,8(s1)
    8002662c:	4789                	li	a5,2
    8002662e:	00008597          	auipc	a1,0x8
    80026632:	b7a58593          	addi	a1,a1,-1158 # 8002e1a8 <__func__.0+0x2c0>
    80026636:	00f70663          	beq	a4,a5,80026642 <stateen_ENVCFG_test_5+0x12c>
    8002663a:	00008597          	auipc	a1,0x8
    8002663e:	b7e58593          	addi	a1,a1,-1154 # 8002e1b8 <__func__.0+0x2d0>
    80026642:	00008517          	auipc	a0,0x8
    80026646:	bb650513          	addi	a0,a0,-1098 # 8002e1f8 <__func__.0+0x310>
    8002664a:	5e1040ef          	jal	8002b42a <printf>
    8002664e:	00032797          	auipc	a5,0x32
    80026652:	9c37c783          	lbu	a5,-1597(a5) # 80058011 <excpt+0x1>
    80026656:	c789                	beqz	a5,80026660 <stateen_ENVCFG_test_5+0x14a>
    80026658:	6498                	ld	a4,8(s1)
    8002665a:	4789                	li	a5,2
    8002665c:	00f70c63          	beq	a4,a5,80026674 <stateen_ENVCFG_test_5+0x15e>
    80026660:	00008517          	auipc	a0,0x8
    80026664:	ba050513          	addi	a0,a0,-1120 # 8002e200 <__func__.0+0x318>
    80026668:	5c3040ef          	jal	8002b42a <printf>
    8002666c:	02900513          	li	a0,41
    80026670:	2a9030ef          	jal	8002a118 <putchar>
    80026674:	4529                	li	a0,10
    80026676:	2a3030ef          	jal	8002a118 <putchar>
    8002667a:	c015                	beqz	s0,8002669e <stateen_ENVCFG_test_5+0x188>
    8002667c:	00032417          	auipc	s0,0x32
    80026680:	99544403          	lbu	s0,-1643(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    80026684:	00008597          	auipc	a1,0x8
    80026688:	b3458593          	addi	a1,a1,-1228 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002668c:	cc11                	beqz	s0,800266a8 <stateen_ENVCFG_test_5+0x192>
    8002668e:	6498                	ld	a4,8(s1)
    80026690:	4789                	li	a5,2
    TEST_END();
    80026692:	00008597          	auipc	a1,0x8
    80026696:	b1658593          	addi	a1,a1,-1258 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002669a:	00f70763          	beq	a4,a5,800266a8 <stateen_ENVCFG_test_5+0x192>
    8002669e:	4401                	li	s0,0
    TEST_END();
    800266a0:	00008597          	auipc	a1,0x8
    800266a4:	b1858593          	addi	a1,a1,-1256 # 8002e1b8 <__func__.0+0x2d0>
    800266a8:	00008517          	auipc	a0,0x8
    800266ac:	bb850513          	addi	a0,a0,-1096 # 8002e260 <__func__.0+0x378>
    800266b0:	57b040ef          	jal	8002b42a <printf>
    800266b4:	4511                	li	a0,4
    800266b6:	853da0ef          	jal	80000f08 <goto_priv>
    800266ba:	96adb0ef          	jal	80001824 <reset_state>

}
    800266be:	60e2                	ld	ra,24(sp)
    800266c0:	8522                	mv	a0,s0
    800266c2:	6442                	ld	s0,16(sp)
    800266c4:	64a2                	ld	s1,8(sp)
    800266c6:	6105                	addi	sp,sp,32
    800266c8:	8082                	ret

00000000800266ca <stateen_ENVCFG_test_6>:


bool stateen_ENVCFG_test_6(){
    800266ca:	1101                	addi	sp,sp,-32

    TEST_START();
    800266cc:	00007597          	auipc	a1,0x7
    800266d0:	57458593          	addi	a1,a1,1396 # 8002dc40 <__func__.9>
    800266d4:	00008517          	auipc	a0,0x8
    800266d8:	af450513          	addi	a0,a0,-1292 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_6(){
    800266dc:	ec06                	sd	ra,24(sp)
    800266de:	e822                	sd	s0,16(sp)
    800266e0:	e426                	sd	s1,8(sp)
    TEST_START();
    800266e2:	549040ef          	jal	8002b42a <printf>
    800266e6:	4529                	li	a0,10
    800266e8:	231030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800266ec:	4511                	li	a0,4
    800266ee:	81bda0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1,v=0时,可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800266f2:	4785                	li	a5,1
    800266f4:	17fa                	slli	a5,a5,0x3e
    800266f6:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    800266fa:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    800266fe:	450d                	li	a0,3
    80026700:	809da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026704:	f08da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026708:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002670c:	943da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026710:	08200593          	li	a1,130
    80026714:	00012617          	auipc	a2,0x12
    80026718:	d7460613          	addi	a2,a2,-652 # 80038488 <__func__.0+0xa5a0>
    8002671c:	00008517          	auipc	a0,0x8
    80026720:	ac450513          	addi	a0,a0,-1340 # 8002e1e0 <__func__.0+0x2f8>
    80026724:	507040ef          	jal	8002b42a <printf>
    80026728:	00032797          	auipc	a5,0x32
    8002672c:	8e97c783          	lbu	a5,-1815(a5) # 80058011 <excpt+0x1>
    80026730:	00008597          	auipc	a1,0x8
    80026734:	a7858593          	addi	a1,a1,-1416 # 8002e1a8 <__func__.0+0x2c0>
    80026738:	c789                	beqz	a5,80026742 <stateen_ENVCFG_test_6+0x78>
    8002673a:	00008597          	auipc	a1,0x8
    8002673e:	a7e58593          	addi	a1,a1,-1410 # 8002e1b8 <__func__.0+0x2d0>
    80026742:	00008517          	auipc	a0,0x8
    80026746:	ab650513          	addi	a0,a0,-1354 # 8002e1f8 <__func__.0+0x310>
    8002674a:	4e1040ef          	jal	8002b42a <printf>
    8002674e:	00032797          	auipc	a5,0x32
    80026752:	8c37c783          	lbu	a5,-1853(a5) # 80058011 <excpt+0x1>
    80026756:	2c079e63          	bnez	a5,80026a32 <stateen_ENVCFG_test_6+0x368>
    8002675a:	4529                	li	a0,10
    8002675c:	1bd030ef          	jal	8002a118 <putchar>
    80026760:	00032497          	auipc	s1,0x32
    80026764:	8b14c483          	lbu	s1,-1871(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SENVCFG);
    80026768:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002676c:	8e3da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026770:	08200593          	li	a1,130
    80026774:	00012617          	auipc	a2,0x12
    80026778:	d6c60613          	addi	a2,a2,-660 # 800384e0 <__func__.0+0xa5f8>
    8002677c:	00008517          	auipc	a0,0x8
    80026780:	a6450513          	addi	a0,a0,-1436 # 8002e1e0 <__func__.0+0x2f8>
    80026784:	4a7040ef          	jal	8002b42a <printf>
    80026788:	00032797          	auipc	a5,0x32
    8002678c:	8897c783          	lbu	a5,-1911(a5) # 80058011 <excpt+0x1>
    80026790:	00008597          	auipc	a1,0x8
    80026794:	a2858593          	addi	a1,a1,-1496 # 8002e1b8 <__func__.0+0x2d0>
    80026798:	e789                	bnez	a5,800267a2 <stateen_ENVCFG_test_6+0xd8>
    8002679a:	00008597          	auipc	a1,0x8
    8002679e:	a0e58593          	addi	a1,a1,-1522 # 8002e1a8 <__func__.0+0x2c0>
    800267a2:	00008517          	auipc	a0,0x8
    800267a6:	a5650513          	addi	a0,a0,-1450 # 8002e1f8 <__func__.0+0x310>
    800267aa:	481040ef          	jal	8002b42a <printf>
    800267ae:	00032797          	auipc	a5,0x32
    800267b2:	8637c783          	lbu	a5,-1949(a5) # 80058011 <excpt+0x1>
    800267b6:	26079363          	bnez	a5,80026a1c <stateen_ENVCFG_test_6+0x352>
    800267ba:	4529                	li	a0,10
    800267bc:	15d030ef          	jal	8002a118 <putchar>
    800267c0:	4401                	li	s0,0
    800267c2:	e499                	bnez	s1,800267d0 <stateen_ENVCFG_test_6+0x106>
    800267c4:	00032417          	auipc	s0,0x32
    800267c8:	84d44403          	lbu	s0,-1971(s0) # 80058011 <excpt+0x1>
    800267cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    800267d0:	4505                	li	a0,1
    800267d2:	f36da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800267d6:	e36da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800267da:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800267de:	871da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800267e2:	08200593          	li	a1,130
    800267e6:	00012617          	auipc	a2,0x12
    800267ea:	d5260613          	addi	a2,a2,-686 # 80038538 <__func__.0+0xa650>
    800267ee:	00008517          	auipc	a0,0x8
    800267f2:	9f250513          	addi	a0,a0,-1550 # 8002e1e0 <__func__.0+0x2f8>
    800267f6:	435040ef          	jal	8002b42a <printf>
    800267fa:	00032797          	auipc	a5,0x32
    800267fe:	8177c783          	lbu	a5,-2025(a5) # 80058011 <excpt+0x1>
    80026802:	00008597          	auipc	a1,0x8
    80026806:	9b658593          	addi	a1,a1,-1610 # 8002e1b8 <__func__.0+0x2d0>
    8002680a:	e789                	bnez	a5,80026814 <stateen_ENVCFG_test_6+0x14a>
    8002680c:	00008597          	auipc	a1,0x8
    80026810:	99c58593          	addi	a1,a1,-1636 # 8002e1a8 <__func__.0+0x2c0>
    80026814:	00008517          	auipc	a0,0x8
    80026818:	9e450513          	addi	a0,a0,-1564 # 8002e1f8 <__func__.0+0x310>
    8002681c:	40f040ef          	jal	8002b42a <printf>
    80026820:	00031797          	auipc	a5,0x31
    80026824:	7f17c783          	lbu	a5,2033(a5) # 80058011 <excpt+0x1>
    80026828:	1c079f63          	bnez	a5,80026a06 <stateen_ENVCFG_test_6+0x33c>
    8002682c:	4529                	li	a0,10
    8002682e:	0eb030ef          	jal	8002a118 <putchar>
    80026832:	c419                	beqz	s0,80026840 <stateen_ENVCFG_test_6+0x176>
    80026834:	00031417          	auipc	s0,0x31
    80026838:	7dd44403          	lbu	s0,2013(s0) # 80058011 <excpt+0x1>
    8002683c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80026840:	4505                	li	a0,1
    80026842:	ec6da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026846:	dc6da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002684a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002684e:	801da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026852:	08200593          	li	a1,130
    80026856:	00012617          	auipc	a2,0x12
    8002685a:	d3a60613          	addi	a2,a2,-710 # 80038590 <__func__.0+0xa6a8>
    8002685e:	00008517          	auipc	a0,0x8
    80026862:	98250513          	addi	a0,a0,-1662 # 8002e1e0 <__func__.0+0x2f8>
    80026866:	3c5040ef          	jal	8002b42a <printf>
    8002686a:	00031797          	auipc	a5,0x31
    8002686e:	7a77c783          	lbu	a5,1959(a5) # 80058011 <excpt+0x1>
    80026872:	00008597          	auipc	a1,0x8
    80026876:	94658593          	addi	a1,a1,-1722 # 8002e1b8 <__func__.0+0x2d0>
    8002687a:	e789                	bnez	a5,80026884 <stateen_ENVCFG_test_6+0x1ba>
    8002687c:	00008597          	auipc	a1,0x8
    80026880:	92c58593          	addi	a1,a1,-1748 # 8002e1a8 <__func__.0+0x2c0>
    80026884:	00008517          	auipc	a0,0x8
    80026888:	97450513          	addi	a0,a0,-1676 # 8002e1f8 <__func__.0+0x310>
    8002688c:	39f040ef          	jal	8002b42a <printf>
    80026890:	00031797          	auipc	a5,0x31
    80026894:	7817c783          	lbu	a5,1921(a5) # 80058011 <excpt+0x1>
    80026898:	14079c63          	bnez	a5,800269f0 <stateen_ENVCFG_test_6+0x326>
    8002689c:	4529                	li	a0,10
    8002689e:	07b030ef          	jal	8002a118 <putchar>
    800268a2:	c419                	beqz	s0,800268b0 <stateen_ENVCFG_test_6+0x1e6>
    800268a4:	00031417          	auipc	s0,0x31
    800268a8:	76d44403          	lbu	s0,1901(s0) # 80058011 <excpt+0x1>
    800268ac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800268b0:	4511                	li	a0,4
    800268b2:	e56da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800268b6:	d56da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800268ba:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800268be:	f90da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800268c2:	08200593          	li	a1,130
    800268c6:	00012617          	auipc	a2,0x12
    800268ca:	d2260613          	addi	a2,a2,-734 # 800385e8 <__func__.0+0xa700>
    800268ce:	00008517          	auipc	a0,0x8
    800268d2:	91250513          	addi	a0,a0,-1774 # 8002e1e0 <__func__.0+0x2f8>
    800268d6:	355040ef          	jal	8002b42a <printf>
    800268da:	00031797          	auipc	a5,0x31
    800268de:	7377c783          	lbu	a5,1847(a5) # 80058011 <excpt+0x1>
    800268e2:	00008597          	auipc	a1,0x8
    800268e6:	8d658593          	addi	a1,a1,-1834 # 8002e1b8 <__func__.0+0x2d0>
    800268ea:	e789                	bnez	a5,800268f4 <stateen_ENVCFG_test_6+0x22a>
    800268ec:	00008597          	auipc	a1,0x8
    800268f0:	8bc58593          	addi	a1,a1,-1860 # 8002e1a8 <__func__.0+0x2c0>
    800268f4:	00008517          	auipc	a0,0x8
    800268f8:	90450513          	addi	a0,a0,-1788 # 8002e1f8 <__func__.0+0x310>
    800268fc:	32f040ef          	jal	8002b42a <printf>
    80026900:	00031797          	auipc	a5,0x31
    80026904:	7117c783          	lbu	a5,1809(a5) # 80058011 <excpt+0x1>
    80026908:	0c079963          	bnez	a5,800269da <stateen_ENVCFG_test_6+0x310>
    8002690c:	4529                	li	a0,10
    8002690e:	00b030ef          	jal	8002a118 <putchar>
    80026912:	c419                	beqz	s0,80026920 <stateen_ENVCFG_test_6+0x256>
    80026914:	00031417          	auipc	s0,0x31
    80026918:	6fd44403          	lbu	s0,1789(s0) # 80058011 <excpt+0x1>
    8002691c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026920:	4511                	li	a0,4
    80026922:	de6da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026926:	ce6da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002692a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002692e:	f20da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026932:	08200593          	li	a1,130
    80026936:	00012617          	auipc	a2,0x12
    8002693a:	d0a60613          	addi	a2,a2,-758 # 80038640 <__func__.0+0xa758>
    8002693e:	00008517          	auipc	a0,0x8
    80026942:	8a250513          	addi	a0,a0,-1886 # 8002e1e0 <__func__.0+0x2f8>
    80026946:	2e5040ef          	jal	8002b42a <printf>
    8002694a:	00031797          	auipc	a5,0x31
    8002694e:	6c77c783          	lbu	a5,1735(a5) # 80058011 <excpt+0x1>
    80026952:	00008597          	auipc	a1,0x8
    80026956:	86658593          	addi	a1,a1,-1946 # 8002e1b8 <__func__.0+0x2d0>
    8002695a:	e789                	bnez	a5,80026964 <stateen_ENVCFG_test_6+0x29a>
    8002695c:	00008597          	auipc	a1,0x8
    80026960:	84c58593          	addi	a1,a1,-1972 # 8002e1a8 <__func__.0+0x2c0>
    80026964:	00008517          	auipc	a0,0x8
    80026968:	89450513          	addi	a0,a0,-1900 # 8002e1f8 <__func__.0+0x310>
    8002696c:	2bf040ef          	jal	8002b42a <printf>
    80026970:	00031797          	auipc	a5,0x31
    80026974:	6a17c783          	lbu	a5,1697(a5) # 80058011 <excpt+0x1>
    80026978:	e7b1                	bnez	a5,800269c4 <stateen_ENVCFG_test_6+0x2fa>
    8002697a:	4529                	li	a0,10
    8002697c:	79c030ef          	jal	8002a118 <putchar>
    80026980:	c411                	beqz	s0,8002698c <stateen_ENVCFG_test_6+0x2c2>
    80026982:	00031797          	auipc	a5,0x31
    80026986:	68f7c783          	lbu	a5,1679(a5) # 80058011 <excpt+0x1>
    8002698a:	c79d                	beqz	a5,800269b8 <stateen_ENVCFG_test_6+0x2ee>
    8002698c:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    8002698e:	00008597          	auipc	a1,0x8
    80026992:	82a58593          	addi	a1,a1,-2006 # 8002e1b8 <__func__.0+0x2d0>
    80026996:	00008517          	auipc	a0,0x8
    8002699a:	8ca50513          	addi	a0,a0,-1846 # 8002e260 <__func__.0+0x378>
    8002699e:	28d040ef          	jal	8002b42a <printf>
    800269a2:	4511                	li	a0,4
    800269a4:	d64da0ef          	jal	80000f08 <goto_priv>
    800269a8:	e7dda0ef          	jal	80001824 <reset_state>

}
    800269ac:	60e2                	ld	ra,24(sp)
    800269ae:	8522                	mv	a0,s0
    800269b0:	6442                	ld	s0,16(sp)
    800269b2:	64a2                	ld	s1,8(sp)
    800269b4:	6105                	addi	sp,sp,32
    800269b6:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269b8:	4405                	li	s0,1
    TEST_END();
    800269ba:	00007597          	auipc	a1,0x7
    800269be:	7ee58593          	addi	a1,a1,2030 # 8002e1a8 <__func__.0+0x2c0>
    800269c2:	bfd1                	j	80026996 <stateen_ENVCFG_test_6+0x2cc>
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269c4:	00008517          	auipc	a0,0x8
    800269c8:	83c50513          	addi	a0,a0,-1988 # 8002e200 <__func__.0+0x318>
    800269cc:	25f040ef          	jal	8002b42a <printf>
    800269d0:	02900513          	li	a0,41
    800269d4:	744030ef          	jal	8002a118 <putchar>
    800269d8:	b74d                	j	8002697a <stateen_ENVCFG_test_6+0x2b0>
    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269da:	00008517          	auipc	a0,0x8
    800269de:	82650513          	addi	a0,a0,-2010 # 8002e200 <__func__.0+0x318>
    800269e2:	249040ef          	jal	8002b42a <printf>
    800269e6:	02900513          	li	a0,41
    800269ea:	72e030ef          	jal	8002a118 <putchar>
    800269ee:	bf39                	j	8002690c <stateen_ENVCFG_test_6+0x242>
    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269f0:	00008517          	auipc	a0,0x8
    800269f4:	81050513          	addi	a0,a0,-2032 # 8002e200 <__func__.0+0x318>
    800269f8:	233040ef          	jal	8002b42a <printf>
    800269fc:	02900513          	li	a0,41
    80026a00:	718030ef          	jal	8002a118 <putchar>
    80026a04:	bd61                	j	8002689c <stateen_ENVCFG_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026a06:	00007517          	auipc	a0,0x7
    80026a0a:	7fa50513          	addi	a0,a0,2042 # 8002e200 <__func__.0+0x318>
    80026a0e:	21d040ef          	jal	8002b42a <printf>
    80026a12:	02900513          	li	a0,41
    80026a16:	702030ef          	jal	8002a118 <putchar>
    80026a1a:	bd09                	j	8002682c <stateen_ENVCFG_test_6+0x162>
    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026a1c:	00007517          	auipc	a0,0x7
    80026a20:	7e450513          	addi	a0,a0,2020 # 8002e200 <__func__.0+0x318>
    80026a24:	207040ef          	jal	8002b42a <printf>
    80026a28:	02900513          	li	a0,41
    80026a2c:	6ec030ef          	jal	8002a118 <putchar>
    80026a30:	b369                	j	800267ba <stateen_ENVCFG_test_6+0xf0>
    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026a32:	00007517          	auipc	a0,0x7
    80026a36:	7ce50513          	addi	a0,a0,1998 # 8002e200 <__func__.0+0x318>
    80026a3a:	1f1040ef          	jal	8002b42a <printf>
    80026a3e:	02900513          	li	a0,41
    80026a42:	6d6030ef          	jal	8002a118 <putchar>
    80026a46:	bb11                	j	8002675a <stateen_ENVCFG_test_6+0x90>

0000000080026a48 <stateen_ENVCFG_test_7>:


bool stateen_ENVCFG_test_7(){
    80026a48:	1101                	addi	sp,sp,-32

    TEST_START();
    80026a4a:	00007597          	auipc	a1,0x7
    80026a4e:	20e58593          	addi	a1,a1,526 # 8002dc58 <__func__.8>
    80026a52:	00007517          	auipc	a0,0x7
    80026a56:	77650513          	addi	a0,a0,1910 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_7(){
    80026a5a:	ec06                	sd	ra,24(sp)
    80026a5c:	e822                	sd	s0,16(sp)
    80026a5e:	e426                	sd	s1,8(sp)
    TEST_START();
    80026a60:	1cb040ef          	jal	8002b42a <printf>
    80026a64:	4529                	li	a0,10
    80026a66:	6b2030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026a6a:	4511                	li	a0,4
    80026a6c:	c9cda0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1 hstateen.ENVCFG=1,v=1 时可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026a70:	4785                	li	a5,1
    80026a72:	17fa                	slli	a5,a5,0x3e
    80026a74:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026a78:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80026a7c:	4509                	li	a0,2
    80026a7e:	c8ada0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026a82:	b8ada0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026a86:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026a8a:	dc4da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026a8e:	08200593          	li	a1,130
    80026a92:	00012617          	auipc	a2,0x12
    80026a96:	c0660613          	addi	a2,a2,-1018 # 80038698 <__func__.0+0xa7b0>
    80026a9a:	00007517          	auipc	a0,0x7
    80026a9e:	74650513          	addi	a0,a0,1862 # 8002e1e0 <__func__.0+0x2f8>
    80026aa2:	189040ef          	jal	8002b42a <printf>
    80026aa6:	00031797          	auipc	a5,0x31
    80026aaa:	56b7c783          	lbu	a5,1387(a5) # 80058011 <excpt+0x1>
    80026aae:	00007597          	auipc	a1,0x7
    80026ab2:	6fa58593          	addi	a1,a1,1786 # 8002e1a8 <__func__.0+0x2c0>
    80026ab6:	c789                	beqz	a5,80026ac0 <stateen_ENVCFG_test_7+0x78>
    80026ab8:	00007597          	auipc	a1,0x7
    80026abc:	70058593          	addi	a1,a1,1792 # 8002e1b8 <__func__.0+0x2d0>
    80026ac0:	00007517          	auipc	a0,0x7
    80026ac4:	73850513          	addi	a0,a0,1848 # 8002e1f8 <__func__.0+0x310>
    80026ac8:	163040ef          	jal	8002b42a <printf>
    80026acc:	00031797          	auipc	a5,0x31
    80026ad0:	5457c783          	lbu	a5,1349(a5) # 80058011 <excpt+0x1>
    80026ad4:	1c079d63          	bnez	a5,80026cae <stateen_ENVCFG_test_7+0x266>
    80026ad8:	4529                	li	a0,10
    80026ada:	63e030ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80026ade:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026ae0:	00031497          	auipc	s1,0x31
    80026ae4:	5314c483          	lbu	s1,1329(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80026ae8:	c20da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026aec:	b20da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026af0:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026af4:	d5ada0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026af8:	08200593          	li	a1,130
    80026afc:	00012617          	auipc	a2,0x12
    80026b00:	bf460613          	addi	a2,a2,-1036 # 800386f0 <__func__.0+0xa808>
    80026b04:	00007517          	auipc	a0,0x7
    80026b08:	6dc50513          	addi	a0,a0,1756 # 8002e1e0 <__func__.0+0x2f8>
    80026b0c:	11f040ef          	jal	8002b42a <printf>
    80026b10:	00031797          	auipc	a5,0x31
    80026b14:	5017c783          	lbu	a5,1281(a5) # 80058011 <excpt+0x1>
    80026b18:	00007597          	auipc	a1,0x7
    80026b1c:	6a058593          	addi	a1,a1,1696 # 8002e1b8 <__func__.0+0x2d0>
    80026b20:	e789                	bnez	a5,80026b2a <stateen_ENVCFG_test_7+0xe2>
    80026b22:	00007597          	auipc	a1,0x7
    80026b26:	68658593          	addi	a1,a1,1670 # 8002e1a8 <__func__.0+0x2c0>
    80026b2a:	00007517          	auipc	a0,0x7
    80026b2e:	6ce50513          	addi	a0,a0,1742 # 8002e1f8 <__func__.0+0x310>
    80026b32:	0f9040ef          	jal	8002b42a <printf>
    80026b36:	00031797          	auipc	a5,0x31
    80026b3a:	4db7c783          	lbu	a5,1243(a5) # 80058011 <excpt+0x1>
    80026b3e:	14079d63          	bnez	a5,80026c98 <stateen_ENVCFG_test_7+0x250>
    80026b42:	4529                	li	a0,10
    80026b44:	5d4030ef          	jal	8002a118 <putchar>
    80026b48:	4401                	li	s0,0
    80026b4a:	e499                	bnez	s1,80026b58 <stateen_ENVCFG_test_7+0x110>
    80026b4c:	00031417          	auipc	s0,0x31
    80026b50:	4c544403          	lbu	s0,1221(s0) # 80058011 <excpt+0x1>
    80026b54:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80026b58:	4501                	li	a0,0
    80026b5a:	baeda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026b5e:	aaeda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026b62:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026b66:	ce8da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026b6a:	08200593          	li	a1,130
    80026b6e:	00012617          	auipc	a2,0x12
    80026b72:	bda60613          	addi	a2,a2,-1062 # 80038748 <__func__.0+0xa860>
    80026b76:	00007517          	auipc	a0,0x7
    80026b7a:	66a50513          	addi	a0,a0,1642 # 8002e1e0 <__func__.0+0x2f8>
    80026b7e:	0ad040ef          	jal	8002b42a <printf>
    80026b82:	00031797          	auipc	a5,0x31
    80026b86:	48f7c783          	lbu	a5,1167(a5) # 80058011 <excpt+0x1>
    80026b8a:	00007597          	auipc	a1,0x7
    80026b8e:	62e58593          	addi	a1,a1,1582 # 8002e1b8 <__func__.0+0x2d0>
    80026b92:	e789                	bnez	a5,80026b9c <stateen_ENVCFG_test_7+0x154>
    80026b94:	00007597          	auipc	a1,0x7
    80026b98:	61458593          	addi	a1,a1,1556 # 8002e1a8 <__func__.0+0x2c0>
    80026b9c:	00007517          	auipc	a0,0x7
    80026ba0:	65c50513          	addi	a0,a0,1628 # 8002e1f8 <__func__.0+0x310>
    80026ba4:	087040ef          	jal	8002b42a <printf>
    80026ba8:	00031797          	auipc	a5,0x31
    80026bac:	4697c783          	lbu	a5,1129(a5) # 80058011 <excpt+0x1>
    80026bb0:	0c079963          	bnez	a5,80026c82 <stateen_ENVCFG_test_7+0x23a>
    80026bb4:	4529                	li	a0,10
    80026bb6:	562030ef          	jal	8002a118 <putchar>
    80026bba:	c419                	beqz	s0,80026bc8 <stateen_ENVCFG_test_7+0x180>
    80026bbc:	00031417          	auipc	s0,0x31
    80026bc0:	45544403          	lbu	s0,1109(s0) # 80058011 <excpt+0x1>
    80026bc4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80026bc8:	4501                	li	a0,0
    80026bca:	b3eda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026bce:	a3eda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026bd2:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026bd6:	c78da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bda:	08200593          	li	a1,130
    80026bde:	00012617          	auipc	a2,0x12
    80026be2:	bc260613          	addi	a2,a2,-1086 # 800387a0 <__func__.0+0xa8b8>
    80026be6:	00007517          	auipc	a0,0x7
    80026bea:	5fa50513          	addi	a0,a0,1530 # 8002e1e0 <__func__.0+0x2f8>
    80026bee:	03d040ef          	jal	8002b42a <printf>
    80026bf2:	00031797          	auipc	a5,0x31
    80026bf6:	41f7c783          	lbu	a5,1055(a5) # 80058011 <excpt+0x1>
    80026bfa:	00007597          	auipc	a1,0x7
    80026bfe:	5be58593          	addi	a1,a1,1470 # 8002e1b8 <__func__.0+0x2d0>
    80026c02:	e789                	bnez	a5,80026c0c <stateen_ENVCFG_test_7+0x1c4>
    80026c04:	00007597          	auipc	a1,0x7
    80026c08:	5a458593          	addi	a1,a1,1444 # 8002e1a8 <__func__.0+0x2c0>
    80026c0c:	00007517          	auipc	a0,0x7
    80026c10:	5ec50513          	addi	a0,a0,1516 # 8002e1f8 <__func__.0+0x310>
    80026c14:	017040ef          	jal	8002b42a <printf>
    80026c18:	00031797          	auipc	a5,0x31
    80026c1c:	3f97c783          	lbu	a5,1017(a5) # 80058011 <excpt+0x1>
    80026c20:	e7b1                	bnez	a5,80026c6c <stateen_ENVCFG_test_7+0x224>
    80026c22:	4529                	li	a0,10
    80026c24:	4f4030ef          	jal	8002a118 <putchar>
    80026c28:	c411                	beqz	s0,80026c34 <stateen_ENVCFG_test_7+0x1ec>
    80026c2a:	00031797          	auipc	a5,0x31
    80026c2e:	3e77c783          	lbu	a5,999(a5) # 80058011 <excpt+0x1>
    80026c32:	c79d                	beqz	a5,80026c60 <stateen_ENVCFG_test_7+0x218>
    80026c34:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80026c36:	00007597          	auipc	a1,0x7
    80026c3a:	58258593          	addi	a1,a1,1410 # 8002e1b8 <__func__.0+0x2d0>
    80026c3e:	00007517          	auipc	a0,0x7
    80026c42:	62250513          	addi	a0,a0,1570 # 8002e260 <__func__.0+0x378>
    80026c46:	7e4040ef          	jal	8002b42a <printf>
    80026c4a:	4511                	li	a0,4
    80026c4c:	abcda0ef          	jal	80000f08 <goto_priv>
    80026c50:	bd5da0ef          	jal	80001824 <reset_state>
}
    80026c54:	60e2                	ld	ra,24(sp)
    80026c56:	8522                	mv	a0,s0
    80026c58:	6442                	ld	s0,16(sp)
    80026c5a:	64a2                	ld	s1,8(sp)
    80026c5c:	6105                	addi	sp,sp,32
    80026c5e:	8082                	ret
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c60:	4405                	li	s0,1
    TEST_END();
    80026c62:	00007597          	auipc	a1,0x7
    80026c66:	54658593          	addi	a1,a1,1350 # 8002e1a8 <__func__.0+0x2c0>
    80026c6a:	bfd1                	j	80026c3e <stateen_ENVCFG_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c6c:	00007517          	auipc	a0,0x7
    80026c70:	59450513          	addi	a0,a0,1428 # 8002e200 <__func__.0+0x318>
    80026c74:	7b6040ef          	jal	8002b42a <printf>
    80026c78:	02900513          	li	a0,41
    80026c7c:	49c030ef          	jal	8002a118 <putchar>
    80026c80:	b74d                	j	80026c22 <stateen_ENVCFG_test_7+0x1da>
    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c82:	00007517          	auipc	a0,0x7
    80026c86:	57e50513          	addi	a0,a0,1406 # 8002e200 <__func__.0+0x318>
    80026c8a:	7a0040ef          	jal	8002b42a <printf>
    80026c8e:	02900513          	li	a0,41
    80026c92:	486030ef          	jal	8002a118 <putchar>
    80026c96:	bf39                	j	80026bb4 <stateen_ENVCFG_test_7+0x16c>
    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c98:	00007517          	auipc	a0,0x7
    80026c9c:	56850513          	addi	a0,a0,1384 # 8002e200 <__func__.0+0x318>
    80026ca0:	78a040ef          	jal	8002b42a <printf>
    80026ca4:	02900513          	li	a0,41
    80026ca8:	470030ef          	jal	8002a118 <putchar>
    80026cac:	bd59                	j	80026b42 <stateen_ENVCFG_test_7+0xfa>
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026cae:	00007517          	auipc	a0,0x7
    80026cb2:	55250513          	addi	a0,a0,1362 # 8002e200 <__func__.0+0x318>
    80026cb6:	774040ef          	jal	8002b42a <printf>
    80026cba:	02900513          	li	a0,41
    80026cbe:	45a030ef          	jal	8002a118 <putchar>
    80026cc2:	bd19                	j	80026ad8 <stateen_ENVCFG_test_7+0x90>

0000000080026cc4 <stateen_SE0_test_1>:
// -------------




bool stateen_SE0_test_1(){
    80026cc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80026cc6:	00007597          	auipc	a1,0x7
    80026cca:	faa58593          	addi	a1,a1,-86 # 8002dc70 <__func__.7>
    80026cce:	00007517          	auipc	a0,0x7
    80026cd2:	4fa50513          	addi	a0,a0,1274 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_1(){
    80026cd6:	ec06                	sd	ra,24(sp)
    80026cd8:	e822                	sd	s0,16(sp)
    80026cda:	e426                	sd	s1,8(sp)
    TEST_START();
    80026cdc:	74e040ef          	jal	8002b42a <printf>
    80026ce0:	4529                	li	a0,10
    80026ce2:	436030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026ce6:	4511                	li	a0,4
    80026ce8:	a20da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=0,hu mode 不可访问Hstateen0和Sstateen0寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026cec:	57fd                	li	a5,-1
    80026cee:	17fe                	slli	a5,a5,0x3f
    80026cf0:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80026cf4:	4505                	li	a0,1
    80026cf6:	a12da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026cfa:	912da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026cfe:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026d02:	b4cda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hstateen0 register cause to illegal except when mstateen.SE0=0",
    80026d06:	08200593          	li	a1,130
    80026d0a:	00012617          	auipc	a2,0x12
    80026d0e:	aee60613          	addi	a2,a2,-1298 # 800387f8 <__func__.0+0xa910>
    80026d12:	00007517          	auipc	a0,0x7
    80026d16:	4ce50513          	addi	a0,a0,1230 # 8002e1e0 <__func__.0+0x2f8>
    80026d1a:	710040ef          	jal	8002b42a <printf>
    80026d1e:	00031797          	auipc	a5,0x31
    80026d22:	2f37c783          	lbu	a5,755(a5) # 80058011 <excpt+0x1>
    80026d26:	00031497          	auipc	s1,0x31
    80026d2a:	2ea48493          	addi	s1,s1,746 # 80058010 <excpt>
    80026d2e:	00007597          	auipc	a1,0x7
    80026d32:	48a58593          	addi	a1,a1,1162 # 8002e1b8 <__func__.0+0x2d0>
    80026d36:	cf89                	beqz	a5,80026d50 <stateen_SE0_test_1+0x8c>
    80026d38:	6498                	ld	a4,8(s1)
    80026d3a:	4789                	li	a5,2
    80026d3c:	00007597          	auipc	a1,0x7
    80026d40:	46c58593          	addi	a1,a1,1132 # 8002e1a8 <__func__.0+0x2c0>
    80026d44:	00f70663          	beq	a4,a5,80026d50 <stateen_SE0_test_1+0x8c>
    80026d48:	00007597          	auipc	a1,0x7
    80026d4c:	47058593          	addi	a1,a1,1136 # 8002e1b8 <__func__.0+0x2d0>
    80026d50:	00007517          	auipc	a0,0x7
    80026d54:	4a850513          	addi	a0,a0,1192 # 8002e1f8 <__func__.0+0x310>
    80026d58:	6d2040ef          	jal	8002b42a <printf>
    80026d5c:	00031797          	auipc	a5,0x31
    80026d60:	2b57c783          	lbu	a5,693(a5) # 80058011 <excpt+0x1>
    80026d64:	c789                	beqz	a5,80026d6e <stateen_SE0_test_1+0xaa>
    80026d66:	6498                	ld	a4,8(s1)
    80026d68:	4789                	li	a5,2
    80026d6a:	00f70c63          	beq	a4,a5,80026d82 <stateen_SE0_test_1+0xbe>
    80026d6e:	00007517          	auipc	a0,0x7
    80026d72:	49250513          	addi	a0,a0,1170 # 8002e200 <__func__.0+0x318>
    80026d76:	6b4040ef          	jal	8002b42a <printf>
    80026d7a:	02900513          	li	a0,41
    80026d7e:	39a030ef          	jal	8002a118 <putchar>
    80026d82:	4529                	li	a0,10
    80026d84:	394030ef          	jal	8002a118 <putchar>
    80026d88:	00031797          	auipc	a5,0x31
    80026d8c:	2897c783          	lbu	a5,649(a5) # 80058011 <excpt+0x1>
    80026d90:	4401                	li	s0,0
    80026d92:	c789                	beqz	a5,80026d9c <stateen_SE0_test_1+0xd8>
    80026d94:	6480                	ld	s0,8(s1)
    80026d96:	1479                	addi	s0,s0,-2
    80026d98:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026d9c:	4505                	li	a0,1
    80026d9e:	96ada0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026da2:	86ada0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026da6:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026daa:	aa4da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026dae:	08200593          	li	a1,130
    80026db2:	00012617          	auipc	a2,0x12
    80026db6:	a9660613          	addi	a2,a2,-1386 # 80038848 <__func__.0+0xa960>
    80026dba:	00007517          	auipc	a0,0x7
    80026dbe:	42650513          	addi	a0,a0,1062 # 8002e1e0 <__func__.0+0x2f8>
    80026dc2:	668040ef          	jal	8002b42a <printf>
    80026dc6:	00031797          	auipc	a5,0x31
    80026dca:	24b7c783          	lbu	a5,587(a5) # 80058011 <excpt+0x1>
    80026dce:	00007597          	auipc	a1,0x7
    80026dd2:	3ea58593          	addi	a1,a1,1002 # 8002e1b8 <__func__.0+0x2d0>
    80026dd6:	cf89                	beqz	a5,80026df0 <stateen_SE0_test_1+0x12c>
    80026dd8:	6498                	ld	a4,8(s1)
    80026dda:	4789                	li	a5,2
    80026ddc:	00007597          	auipc	a1,0x7
    80026de0:	3cc58593          	addi	a1,a1,972 # 8002e1a8 <__func__.0+0x2c0>
    80026de4:	00f70663          	beq	a4,a5,80026df0 <stateen_SE0_test_1+0x12c>
    80026de8:	00007597          	auipc	a1,0x7
    80026dec:	3d058593          	addi	a1,a1,976 # 8002e1b8 <__func__.0+0x2d0>
    80026df0:	00007517          	auipc	a0,0x7
    80026df4:	40850513          	addi	a0,a0,1032 # 8002e1f8 <__func__.0+0x310>
    80026df8:	632040ef          	jal	8002b42a <printf>
    80026dfc:	00031797          	auipc	a5,0x31
    80026e00:	2157c783          	lbu	a5,533(a5) # 80058011 <excpt+0x1>
    80026e04:	c789                	beqz	a5,80026e0e <stateen_SE0_test_1+0x14a>
    80026e06:	6498                	ld	a4,8(s1)
    80026e08:	4789                	li	a5,2
    80026e0a:	00f70c63          	beq	a4,a5,80026e22 <stateen_SE0_test_1+0x15e>
    80026e0e:	00007517          	auipc	a0,0x7
    80026e12:	3f250513          	addi	a0,a0,1010 # 8002e200 <__func__.0+0x318>
    80026e16:	614040ef          	jal	8002b42a <printf>
    80026e1a:	02900513          	li	a0,41
    80026e1e:	2fa030ef          	jal	8002a118 <putchar>
    80026e22:	4529                	li	a0,10
    80026e24:	2f4030ef          	jal	8002a118 <putchar>
    80026e28:	c015                	beqz	s0,80026e4c <stateen_SE0_test_1+0x188>
    80026e2a:	00031417          	auipc	s0,0x31
    80026e2e:	1e744403          	lbu	s0,487(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026e32:	00007597          	auipc	a1,0x7
    80026e36:	38658593          	addi	a1,a1,902 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e3a:	cc11                	beqz	s0,80026e56 <stateen_SE0_test_1+0x192>
    80026e3c:	6498                	ld	a4,8(s1)
    80026e3e:	4789                	li	a5,2
    TEST_END();
    80026e40:	00007597          	auipc	a1,0x7
    80026e44:	36858593          	addi	a1,a1,872 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e48:	00f70763          	beq	a4,a5,80026e56 <stateen_SE0_test_1+0x192>
    80026e4c:	4401                	li	s0,0
    TEST_END();
    80026e4e:	00007597          	auipc	a1,0x7
    80026e52:	36a58593          	addi	a1,a1,874 # 8002e1b8 <__func__.0+0x2d0>
    80026e56:	00007517          	auipc	a0,0x7
    80026e5a:	40a50513          	addi	a0,a0,1034 # 8002e260 <__func__.0+0x378>
    80026e5e:	5cc040ef          	jal	8002b42a <printf>
    80026e62:	4511                	li	a0,4
    80026e64:	8a4da0ef          	jal	80000f08 <goto_priv>
    80026e68:	9bdda0ef          	jal	80001824 <reset_state>

}
    80026e6c:	60e2                	ld	ra,24(sp)
    80026e6e:	8522                	mv	a0,s0
    80026e70:	6442                	ld	s0,16(sp)
    80026e72:	64a2                	ld	s1,8(sp)
    80026e74:	6105                	addi	sp,sp,32
    80026e76:	8082                	ret

0000000080026e78 <stateen_SE0_test_2>:

bool stateen_SE0_test_2(){
    80026e78:	1101                	addi	sp,sp,-32

    TEST_START();
    80026e7a:	00007597          	auipc	a1,0x7
    80026e7e:	e0e58593          	addi	a1,a1,-498 # 8002dc88 <__func__.6>
    80026e82:	00007517          	auipc	a0,0x7
    80026e86:	34650513          	addi	a0,a0,838 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_2(){
    80026e8a:	ec06                	sd	ra,24(sp)
    80026e8c:	e822                	sd	s0,16(sp)
    80026e8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80026e90:	59a040ef          	jal	8002b42a <printf>
    80026e94:	4529                	li	a0,10
    80026e96:	282030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80026e9a:	4511                	li	a0,4
    80026e9c:	86cda0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026ea0:	57fd                	li	a5,-1
    80026ea2:	17fe                	slli	a5,a5,0x3f
    80026ea4:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80026ea8:	60c7a073          	csrs	hstateen0,a5

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时,不可访问Hstateen0和Sstateen0寄存器
    goto_priv(PRIV_VU);
    80026eac:	4501                	li	a0,0
    80026eae:	85ada0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026eb2:	f5bd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026eb6:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026eba:	994da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ebe:	08200593          	li	a1,130
    80026ec2:	00012617          	auipc	a2,0x12
    80026ec6:	9d660613          	addi	a2,a2,-1578 # 80038898 <__func__.0+0xa9b0>
    80026eca:	00007517          	auipc	a0,0x7
    80026ece:	31650513          	addi	a0,a0,790 # 8002e1e0 <__func__.0+0x2f8>
    80026ed2:	558040ef          	jal	8002b42a <printf>
    80026ed6:	00031797          	auipc	a5,0x31
    80026eda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    80026ede:	00031497          	auipc	s1,0x31
    80026ee2:	13248493          	addi	s1,s1,306 # 80058010 <excpt>
    80026ee6:	00007597          	auipc	a1,0x7
    80026eea:	2d258593          	addi	a1,a1,722 # 8002e1b8 <__func__.0+0x2d0>
    80026eee:	cf89                	beqz	a5,80026f08 <stateen_SE0_test_2+0x90>
    80026ef0:	6498                	ld	a4,8(s1)
    80026ef2:	47d9                	li	a5,22
    80026ef4:	00007597          	auipc	a1,0x7
    80026ef8:	2b458593          	addi	a1,a1,692 # 8002e1a8 <__func__.0+0x2c0>
    80026efc:	00f70663          	beq	a4,a5,80026f08 <stateen_SE0_test_2+0x90>
    80026f00:	00007597          	auipc	a1,0x7
    80026f04:	2b858593          	addi	a1,a1,696 # 8002e1b8 <__func__.0+0x2d0>
    80026f08:	00007517          	auipc	a0,0x7
    80026f0c:	2f050513          	addi	a0,a0,752 # 8002e1f8 <__func__.0+0x310>
    80026f10:	51a040ef          	jal	8002b42a <printf>
    80026f14:	00031797          	auipc	a5,0x31
    80026f18:	0fd7c783          	lbu	a5,253(a5) # 80058011 <excpt+0x1>
    80026f1c:	c789                	beqz	a5,80026f26 <stateen_SE0_test_2+0xae>
    80026f1e:	6498                	ld	a4,8(s1)
    80026f20:	47d9                	li	a5,22
    80026f22:	00f70c63          	beq	a4,a5,80026f3a <stateen_SE0_test_2+0xc2>
    80026f26:	00007517          	auipc	a0,0x7
    80026f2a:	2da50513          	addi	a0,a0,730 # 8002e200 <__func__.0+0x318>
    80026f2e:	4fc040ef          	jal	8002b42a <printf>
    80026f32:	02900513          	li	a0,41
    80026f36:	1e2030ef          	jal	8002a118 <putchar>
    80026f3a:	4529                	li	a0,10
    80026f3c:	1dc030ef          	jal	8002a118 <putchar>
    80026f40:	00031797          	auipc	a5,0x31
    80026f44:	0d17c783          	lbu	a5,209(a5) # 80058011 <excpt+0x1>
    80026f48:	4401                	li	s0,0
    80026f4a:	c789                	beqz	a5,80026f54 <stateen_SE0_test_2+0xdc>
    80026f4c:	6480                	ld	s0,8(s1)
    80026f4e:	1429                	addi	s0,s0,-22
    80026f50:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026f54:	4501                	li	a0,0
    80026f56:	fb3d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026f5a:	eb3d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026f5e:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026f62:	8ecda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026f66:	08200593          	li	a1,130
    80026f6a:	00012617          	auipc	a2,0x12
    80026f6e:	98660613          	addi	a2,a2,-1658 # 800388f0 <__func__.0+0xaa08>
    80026f72:	00007517          	auipc	a0,0x7
    80026f76:	26e50513          	addi	a0,a0,622 # 8002e1e0 <__func__.0+0x2f8>
    80026f7a:	4b0040ef          	jal	8002b42a <printf>
    80026f7e:	00031797          	auipc	a5,0x31
    80026f82:	0937c783          	lbu	a5,147(a5) # 80058011 <excpt+0x1>
    80026f86:	00007597          	auipc	a1,0x7
    80026f8a:	23258593          	addi	a1,a1,562 # 8002e1b8 <__func__.0+0x2d0>
    80026f8e:	cf89                	beqz	a5,80026fa8 <stateen_SE0_test_2+0x130>
    80026f90:	6498                	ld	a4,8(s1)
    80026f92:	47d9                	li	a5,22
    80026f94:	00007597          	auipc	a1,0x7
    80026f98:	21458593          	addi	a1,a1,532 # 8002e1a8 <__func__.0+0x2c0>
    80026f9c:	00f70663          	beq	a4,a5,80026fa8 <stateen_SE0_test_2+0x130>
    80026fa0:	00007597          	auipc	a1,0x7
    80026fa4:	21858593          	addi	a1,a1,536 # 8002e1b8 <__func__.0+0x2d0>
    80026fa8:	00007517          	auipc	a0,0x7
    80026fac:	25050513          	addi	a0,a0,592 # 8002e1f8 <__func__.0+0x310>
    80026fb0:	47a040ef          	jal	8002b42a <printf>
    80026fb4:	00031797          	auipc	a5,0x31
    80026fb8:	05d7c783          	lbu	a5,93(a5) # 80058011 <excpt+0x1>
    80026fbc:	c789                	beqz	a5,80026fc6 <stateen_SE0_test_2+0x14e>
    80026fbe:	6498                	ld	a4,8(s1)
    80026fc0:	47d9                	li	a5,22
    80026fc2:	00f70c63          	beq	a4,a5,80026fda <stateen_SE0_test_2+0x162>
    80026fc6:	00007517          	auipc	a0,0x7
    80026fca:	23a50513          	addi	a0,a0,570 # 8002e200 <__func__.0+0x318>
    80026fce:	45c040ef          	jal	8002b42a <printf>
    80026fd2:	02900513          	li	a0,41
    80026fd6:	142030ef          	jal	8002a118 <putchar>
    80026fda:	4529                	li	a0,10
    80026fdc:	13c030ef          	jal	8002a118 <putchar>
    80026fe0:	c015                	beqz	s0,80027004 <stateen_SE0_test_2+0x18c>
    80026fe2:	00031417          	auipc	s0,0x31
    80026fe6:	02f44403          	lbu	s0,47(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80026fea:	00007597          	auipc	a1,0x7
    80026fee:	1ce58593          	addi	a1,a1,462 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ff2:	cc11                	beqz	s0,8002700e <stateen_SE0_test_2+0x196>
    80026ff4:	6498                	ld	a4,8(s1)
    80026ff6:	47d9                	li	a5,22
    TEST_END();
    80026ff8:	00007597          	auipc	a1,0x7
    80026ffc:	1b058593          	addi	a1,a1,432 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027000:	00f70763          	beq	a4,a5,8002700e <stateen_SE0_test_2+0x196>
    80027004:	4401                	li	s0,0
    TEST_END();
    80027006:	00007597          	auipc	a1,0x7
    8002700a:	1b258593          	addi	a1,a1,434 # 8002e1b8 <__func__.0+0x2d0>
    8002700e:	00007517          	auipc	a0,0x7
    80027012:	25250513          	addi	a0,a0,594 # 8002e260 <__func__.0+0x378>
    80027016:	414040ef          	jal	8002b42a <printf>
    8002701a:	4511                	li	a0,4
    8002701c:	eedd90ef          	jal	80000f08 <goto_priv>
    80027020:	805da0ef          	jal	80001824 <reset_state>

}
    80027024:	60e2                	ld	ra,24(sp)
    80027026:	8522                	mv	a0,s0
    80027028:	6442                	ld	s0,16(sp)
    8002702a:	64a2                	ld	s1,8(sp)
    8002702c:	6105                	addi	sp,sp,32
    8002702e:	8082                	ret

0000000080027030 <stateen_SE0_test_3>:

bool stateen_SE0_test_3(){
    80027030:	1141                	addi	sp,sp,-16

    //当mstateen.SE0=0,m mode 可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    80027032:	00007597          	auipc	a1,0x7
    80027036:	c6e58593          	addi	a1,a1,-914 # 8002dca0 <__func__.5>
    8002703a:	00007517          	auipc	a0,0x7
    8002703e:	18e50513          	addi	a0,a0,398 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_3(){
    80027042:	e406                	sd	ra,8(sp)
    80027044:	e022                	sd	s0,0(sp)
    TEST_START();
    80027046:	3e4040ef          	jal	8002b42a <printf>
    8002704a:	4529                	li	a0,10
    8002704c:	0cc030ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80027050:	4511                	li	a0,4
    80027052:	eb7d90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027056:	57fd                	li	a5,-1
    80027058:	17fe                	slli	a5,a5,0x3f
    8002705a:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002705e:	4511                	li	a0,4
    80027060:	ea9d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027064:	da9d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027068:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002706c:	fe3d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    80027070:	08200593          	li	a1,130
    80027074:	00012617          	auipc	a2,0x12
    80027078:	8d460613          	addi	a2,a2,-1836 # 80038948 <__func__.0+0xaa60>
    8002707c:	00007517          	auipc	a0,0x7
    80027080:	16450513          	addi	a0,a0,356 # 8002e1e0 <__func__.0+0x2f8>
    80027084:	3a6040ef          	jal	8002b42a <printf>
    80027088:	00031797          	auipc	a5,0x31
    8002708c:	f897c783          	lbu	a5,-119(a5) # 80058011 <excpt+0x1>
    80027090:	00007597          	auipc	a1,0x7
    80027094:	11858593          	addi	a1,a1,280 # 8002e1a8 <__func__.0+0x2c0>
    80027098:	c789                	beqz	a5,800270a2 <stateen_SE0_test_3+0x72>
    8002709a:	00007597          	auipc	a1,0x7
    8002709e:	11e58593          	addi	a1,a1,286 # 8002e1b8 <__func__.0+0x2d0>
    800270a2:	00007517          	auipc	a0,0x7
    800270a6:	15650513          	addi	a0,a0,342 # 8002e1f8 <__func__.0+0x310>
    800270aa:	380040ef          	jal	8002b42a <printf>
    800270ae:	00031797          	auipc	a5,0x31
    800270b2:	f637c783          	lbu	a5,-157(a5) # 80058011 <excpt+0x1>
    800270b6:	e7e9                	bnez	a5,80027180 <stateen_SE0_test_3+0x150>
    800270b8:	4529                	li	a0,10
    800270ba:	05e030ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800270be:	4511                	li	a0,4
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800270c0:	00031417          	auipc	s0,0x31
    800270c4:	f5144403          	lbu	s0,-175(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800270c8:	e41d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800270cc:	d41d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800270d0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800270d4:	f7bd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800270d8:	08200593          	li	a1,130
    800270dc:	00012617          	auipc	a2,0x12
    800270e0:	8ac60613          	addi	a2,a2,-1876 # 80038988 <__func__.0+0xaaa0>
    800270e4:	00007517          	auipc	a0,0x7
    800270e8:	0fc50513          	addi	a0,a0,252 # 8002e1e0 <__func__.0+0x2f8>
    800270ec:	33e040ef          	jal	8002b42a <printf>
    800270f0:	00031797          	auipc	a5,0x31
    800270f4:	f217c783          	lbu	a5,-223(a5) # 80058011 <excpt+0x1>
    800270f8:	00007597          	auipc	a1,0x7
    800270fc:	0c058593          	addi	a1,a1,192 # 8002e1b8 <__func__.0+0x2d0>
    80027100:	e789                	bnez	a5,8002710a <stateen_SE0_test_3+0xda>
    80027102:	00007597          	auipc	a1,0x7
    80027106:	0a658593          	addi	a1,a1,166 # 8002e1a8 <__func__.0+0x2c0>
    8002710a:	00007517          	auipc	a0,0x7
    8002710e:	0ee50513          	addi	a0,a0,238 # 8002e1f8 <__func__.0+0x310>
    80027112:	318040ef          	jal	8002b42a <printf>
    80027116:	00031797          	auipc	a5,0x31
    8002711a:	efb7c783          	lbu	a5,-261(a5) # 80058011 <excpt+0x1>
    8002711e:	e7b1                	bnez	a5,8002716a <stateen_SE0_test_3+0x13a>
    80027120:	4529                	li	a0,10
    80027122:	7f7020ef          	jal	8002a118 <putchar>
    80027126:	e815                	bnez	s0,8002715a <stateen_SE0_test_3+0x12a>
    80027128:	00031797          	auipc	a5,0x31
    8002712c:	ee97c783          	lbu	a5,-279(a5) # 80058011 <excpt+0x1>
    80027130:	c79d                	beqz	a5,8002715e <stateen_SE0_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    80027132:	00007597          	auipc	a1,0x7
    80027136:	08658593          	addi	a1,a1,134 # 8002e1b8 <__func__.0+0x2d0>
    8002713a:	00007517          	auipc	a0,0x7
    8002713e:	12650513          	addi	a0,a0,294 # 8002e260 <__func__.0+0x378>
    80027142:	2e8040ef          	jal	8002b42a <printf>
    80027146:	4511                	li	a0,4
    80027148:	dc1d90ef          	jal	80000f08 <goto_priv>
    8002714c:	ed8da0ef          	jal	80001824 <reset_state>

}
    80027150:	60a2                	ld	ra,8(sp)
    80027152:	8522                	mv	a0,s0
    80027154:	6402                	ld	s0,0(sp)
    80027156:	0141                	addi	sp,sp,16
    80027158:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    8002715a:	4401                	li	s0,0
    8002715c:	bfd9                	j	80027132 <stateen_SE0_test_3+0x102>
    8002715e:	4405                	li	s0,1
    TEST_END();
    80027160:	00007597          	auipc	a1,0x7
    80027164:	04858593          	addi	a1,a1,72 # 8002e1a8 <__func__.0+0x2c0>
    80027168:	bfc9                	j	8002713a <stateen_SE0_test_3+0x10a>
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    8002716a:	00007517          	auipc	a0,0x7
    8002716e:	09650513          	addi	a0,a0,150 # 8002e200 <__func__.0+0x318>
    80027172:	2b8040ef          	jal	8002b42a <printf>
    80027176:	02900513          	li	a0,41
    8002717a:	79f020ef          	jal	8002a118 <putchar>
    8002717e:	b74d                	j	80027120 <stateen_SE0_test_3+0xf0>
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    80027180:	00007517          	auipc	a0,0x7
    80027184:	08050513          	addi	a0,a0,128 # 8002e200 <__func__.0+0x318>
    80027188:	2a2040ef          	jal	8002b42a <printf>
    8002718c:	02900513          	li	a0,41
    80027190:	789020ef          	jal	8002a118 <putchar>
    80027194:	b715                	j	800270b8 <stateen_SE0_test_3+0x88>

0000000080027196 <stateen_SE0_test_4>:


bool stateen_SE0_test_4(){
    80027196:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    80027198:	00007597          	auipc	a1,0x7
    8002719c:	b2058593          	addi	a1,a1,-1248 # 8002dcb8 <__func__.4>
    800271a0:	00007517          	auipc	a0,0x7
    800271a4:	02850513          	addi	a0,a0,40 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_4(){
    800271a8:	ec06                	sd	ra,24(sp)
    800271aa:	e822                	sd	s0,16(sp)
    800271ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800271ae:	27c040ef          	jal	8002b42a <printf>
    800271b2:	4529                	li	a0,10
    800271b4:	765020ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800271b8:	4511                	li	a0,4
    800271ba:	d4fd90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800271be:	57fd                	li	a5,-1
    800271c0:	17fe                	slli	a5,a5,0x3f
    800271c2:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    800271c6:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800271ca:	30c025f3          	csrr	a1,mstateen0
    800271ce:	0000f517          	auipc	a0,0xf
    800271d2:	7ca50513          	addi	a0,a0,1994 # 80036998 <__func__.0+0x8ab0>
    800271d6:	254040ef          	jal	8002b42a <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800271da:	60c025f3          	csrr	a1,hstateen0
    800271de:	0000f517          	auipc	a0,0xf
    800271e2:	7ca50513          	addi	a0,a0,1994 # 800369a8 <__func__.0+0x8ac0>
    800271e6:	244040ef          	jal	8002b42a <printf>

    goto_priv(PRIV_VS);
    800271ea:	4509                	li	a0,2
    800271ec:	d1dd90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800271f0:	c1dd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800271f4:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800271f8:	e57d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800271fc:	08200593          	li	a1,130
    80027200:	00011617          	auipc	a2,0x11
    80027204:	7c860613          	addi	a2,a2,1992 # 800389c8 <__func__.0+0xaae0>
    80027208:	00007517          	auipc	a0,0x7
    8002720c:	fd850513          	addi	a0,a0,-40 # 8002e1e0 <__func__.0+0x2f8>
    80027210:	21a040ef          	jal	8002b42a <printf>
    80027214:	00031797          	auipc	a5,0x31
    80027218:	dfd7c783          	lbu	a5,-515(a5) # 80058011 <excpt+0x1>
    8002721c:	00031497          	auipc	s1,0x31
    80027220:	df448493          	addi	s1,s1,-524 # 80058010 <excpt>
    80027224:	00007597          	auipc	a1,0x7
    80027228:	f9458593          	addi	a1,a1,-108 # 8002e1b8 <__func__.0+0x2d0>
    8002722c:	cf89                	beqz	a5,80027246 <stateen_SE0_test_4+0xb0>
    8002722e:	6498                	ld	a4,8(s1)
    80027230:	47d9                	li	a5,22
    80027232:	00007597          	auipc	a1,0x7
    80027236:	f7658593          	addi	a1,a1,-138 # 8002e1a8 <__func__.0+0x2c0>
    8002723a:	00f70663          	beq	a4,a5,80027246 <stateen_SE0_test_4+0xb0>
    8002723e:	00007597          	auipc	a1,0x7
    80027242:	f7a58593          	addi	a1,a1,-134 # 8002e1b8 <__func__.0+0x2d0>
    80027246:	00007517          	auipc	a0,0x7
    8002724a:	fb250513          	addi	a0,a0,-78 # 8002e1f8 <__func__.0+0x310>
    8002724e:	1dc040ef          	jal	8002b42a <printf>
    80027252:	00031797          	auipc	a5,0x31
    80027256:	dbf7c783          	lbu	a5,-577(a5) # 80058011 <excpt+0x1>
    8002725a:	c789                	beqz	a5,80027264 <stateen_SE0_test_4+0xce>
    8002725c:	6498                	ld	a4,8(s1)
    8002725e:	47d9                	li	a5,22
    80027260:	00f70c63          	beq	a4,a5,80027278 <stateen_SE0_test_4+0xe2>
    80027264:	00007517          	auipc	a0,0x7
    80027268:	f9c50513          	addi	a0,a0,-100 # 8002e200 <__func__.0+0x318>
    8002726c:	1be040ef          	jal	8002b42a <printf>
    80027270:	02900513          	li	a0,41
    80027274:	6a5020ef          	jal	8002a118 <putchar>
    80027278:	4529                	li	a0,10
    8002727a:	69f020ef          	jal	8002a118 <putchar>
    8002727e:	00031797          	auipc	a5,0x31
    80027282:	d937c783          	lbu	a5,-621(a5) # 80058011 <excpt+0x1>
    80027286:	4401                	li	s0,0
    80027288:	c789                	beqz	a5,80027292 <stateen_SE0_test_4+0xfc>
    8002728a:	6480                	ld	s0,8(s1)
    8002728c:	1429                	addi	s0,s0,-22
    8002728e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80027292:	4509                	li	a0,2
    80027294:	c75d90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80027298:	b75d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002729c:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800272a0:	dafd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800272a4:	08200593          	li	a1,130
    800272a8:	00011617          	auipc	a2,0x11
    800272ac:	77860613          	addi	a2,a2,1912 # 80038a20 <__func__.0+0xab38>
    800272b0:	00007517          	auipc	a0,0x7
    800272b4:	f3050513          	addi	a0,a0,-208 # 8002e1e0 <__func__.0+0x2f8>
    800272b8:	172040ef          	jal	8002b42a <printf>
    800272bc:	00031797          	auipc	a5,0x31
    800272c0:	d557c783          	lbu	a5,-683(a5) # 80058011 <excpt+0x1>
    800272c4:	00007597          	auipc	a1,0x7
    800272c8:	ef458593          	addi	a1,a1,-268 # 8002e1b8 <__func__.0+0x2d0>
    800272cc:	cf89                	beqz	a5,800272e6 <stateen_SE0_test_4+0x150>
    800272ce:	6498                	ld	a4,8(s1)
    800272d0:	47d9                	li	a5,22
    800272d2:	00007597          	auipc	a1,0x7
    800272d6:	ed658593          	addi	a1,a1,-298 # 8002e1a8 <__func__.0+0x2c0>
    800272da:	00f70663          	beq	a4,a5,800272e6 <stateen_SE0_test_4+0x150>
    800272de:	00007597          	auipc	a1,0x7
    800272e2:	eda58593          	addi	a1,a1,-294 # 8002e1b8 <__func__.0+0x2d0>
    800272e6:	00007517          	auipc	a0,0x7
    800272ea:	f1250513          	addi	a0,a0,-238 # 8002e1f8 <__func__.0+0x310>
    800272ee:	13c040ef          	jal	8002b42a <printf>
    800272f2:	00031797          	auipc	a5,0x31
    800272f6:	d1f7c783          	lbu	a5,-737(a5) # 80058011 <excpt+0x1>
    800272fa:	c789                	beqz	a5,80027304 <stateen_SE0_test_4+0x16e>
    800272fc:	6498                	ld	a4,8(s1)
    800272fe:	47d9                	li	a5,22
    80027300:	00f70c63          	beq	a4,a5,80027318 <stateen_SE0_test_4+0x182>
    80027304:	00007517          	auipc	a0,0x7
    80027308:	efc50513          	addi	a0,a0,-260 # 8002e200 <__func__.0+0x318>
    8002730c:	11e040ef          	jal	8002b42a <printf>
    80027310:	02900513          	li	a0,41
    80027314:	605020ef          	jal	8002a118 <putchar>
    80027318:	4529                	li	a0,10
    8002731a:	5ff020ef          	jal	8002a118 <putchar>
    8002731e:	c015                	beqz	s0,80027342 <stateen_SE0_test_4+0x1ac>
    80027320:	00031417          	auipc	s0,0x31
    80027324:	cf144403          	lbu	s0,-783(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80027328:	00007597          	auipc	a1,0x7
    8002732c:	e9058593          	addi	a1,a1,-368 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027330:	cc11                	beqz	s0,8002734c <stateen_SE0_test_4+0x1b6>
    80027332:	6498                	ld	a4,8(s1)
    80027334:	47d9                	li	a5,22
    TEST_END();
    80027336:	00007597          	auipc	a1,0x7
    8002733a:	e7258593          	addi	a1,a1,-398 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002733e:	00f70763          	beq	a4,a5,8002734c <stateen_SE0_test_4+0x1b6>
    80027342:	4401                	li	s0,0
    TEST_END();
    80027344:	00007597          	auipc	a1,0x7
    80027348:	e7458593          	addi	a1,a1,-396 # 8002e1b8 <__func__.0+0x2d0>
    8002734c:	00007517          	auipc	a0,0x7
    80027350:	f1450513          	addi	a0,a0,-236 # 8002e260 <__func__.0+0x378>
    80027354:	0d6040ef          	jal	8002b42a <printf>
    80027358:	4511                	li	a0,4
    8002735a:	bafd90ef          	jal	80000f08 <goto_priv>
    8002735e:	cc6da0ef          	jal	80001824 <reset_state>

}
    80027362:	60e2                	ld	ra,24(sp)
    80027364:	8522                	mv	a0,s0
    80027366:	6442                	ld	s0,16(sp)
    80027368:	64a2                	ld	s1,8(sp)
    8002736a:	6105                	addi	sp,sp,32
    8002736c:	8082                	ret

000000008002736e <stateen_SE0_test_5>:

bool stateen_SE0_test_5(){
    8002736e:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=0,hs mode 不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    80027370:	00007597          	auipc	a1,0x7
    80027374:	96058593          	addi	a1,a1,-1696 # 8002dcd0 <__func__.3>
    80027378:	00007517          	auipc	a0,0x7
    8002737c:	e5050513          	addi	a0,a0,-432 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_5(){
    80027380:	ec06                	sd	ra,24(sp)
    80027382:	e822                	sd	s0,16(sp)
    80027384:	e426                	sd	s1,8(sp)
    TEST_START();
    80027386:	0a4040ef          	jal	8002b42a <printf>
    8002738a:	4529                	li	a0,10
    8002738c:	58d020ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80027390:	4511                	li	a0,4
    80027392:	b77d90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027396:	57fd                	li	a5,-1
    80027398:	17fe                	slli	a5,a5,0x3f
    8002739a:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    8002739e:	450d                	li	a0,3
    800273a0:	b69d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800273a4:	a69d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800273a8:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800273ac:	ca3d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register cause to illegal except when mstateen.SE0=0",
    800273b0:	08200593          	li	a1,130
    800273b4:	00011617          	auipc	a2,0x11
    800273b8:	6c460613          	addi	a2,a2,1732 # 80038a78 <__func__.0+0xab90>
    800273bc:	00007517          	auipc	a0,0x7
    800273c0:	e2450513          	addi	a0,a0,-476 # 8002e1e0 <__func__.0+0x2f8>
    800273c4:	066040ef          	jal	8002b42a <printf>
    800273c8:	00031797          	auipc	a5,0x31
    800273cc:	c497c783          	lbu	a5,-951(a5) # 80058011 <excpt+0x1>
    800273d0:	00031497          	auipc	s1,0x31
    800273d4:	c4048493          	addi	s1,s1,-960 # 80058010 <excpt>
    800273d8:	00007597          	auipc	a1,0x7
    800273dc:	de058593          	addi	a1,a1,-544 # 8002e1b8 <__func__.0+0x2d0>
    800273e0:	cf89                	beqz	a5,800273fa <stateen_SE0_test_5+0x8c>
    800273e2:	6498                	ld	a4,8(s1)
    800273e4:	4789                	li	a5,2
    800273e6:	00007597          	auipc	a1,0x7
    800273ea:	dc258593          	addi	a1,a1,-574 # 8002e1a8 <__func__.0+0x2c0>
    800273ee:	00f70663          	beq	a4,a5,800273fa <stateen_SE0_test_5+0x8c>
    800273f2:	00007597          	auipc	a1,0x7
    800273f6:	dc658593          	addi	a1,a1,-570 # 8002e1b8 <__func__.0+0x2d0>
    800273fa:	00007517          	auipc	a0,0x7
    800273fe:	dfe50513          	addi	a0,a0,-514 # 8002e1f8 <__func__.0+0x310>
    80027402:	028040ef          	jal	8002b42a <printf>
    80027406:	00031797          	auipc	a5,0x31
    8002740a:	c0b7c783          	lbu	a5,-1013(a5) # 80058011 <excpt+0x1>
    8002740e:	c789                	beqz	a5,80027418 <stateen_SE0_test_5+0xaa>
    80027410:	6498                	ld	a4,8(s1)
    80027412:	4789                	li	a5,2
    80027414:	00f70c63          	beq	a4,a5,8002742c <stateen_SE0_test_5+0xbe>
    80027418:	00007517          	auipc	a0,0x7
    8002741c:	de850513          	addi	a0,a0,-536 # 8002e200 <__func__.0+0x318>
    80027420:	00a040ef          	jal	8002b42a <printf>
    80027424:	02900513          	li	a0,41
    80027428:	4f1020ef          	jal	8002a118 <putchar>
    8002742c:	4529                	li	a0,10
    8002742e:	4eb020ef          	jal	8002a118 <putchar>
    80027432:	00031797          	auipc	a5,0x31
    80027436:	bdf7c783          	lbu	a5,-1057(a5) # 80058011 <excpt+0x1>
    8002743a:	4401                	li	s0,0
    8002743c:	c789                	beqz	a5,80027446 <stateen_SE0_test_5+0xd8>
    8002743e:	6480                	ld	s0,8(s1)
    80027440:	1479                	addi	s0,s0,-2
    80027442:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80027446:	450d                	li	a0,3
    80027448:	ac1d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002744c:	9c1d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027450:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027454:	bfbd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027458:	08200593          	li	a1,130
    8002745c:	00011617          	auipc	a2,0x11
    80027460:	66c60613          	addi	a2,a2,1644 # 80038ac8 <__func__.0+0xabe0>
    80027464:	00007517          	auipc	a0,0x7
    80027468:	d7c50513          	addi	a0,a0,-644 # 8002e1e0 <__func__.0+0x2f8>
    8002746c:	7bf030ef          	jal	8002b42a <printf>
    80027470:	00031797          	auipc	a5,0x31
    80027474:	ba17c783          	lbu	a5,-1119(a5) # 80058011 <excpt+0x1>
    80027478:	00007597          	auipc	a1,0x7
    8002747c:	d4058593          	addi	a1,a1,-704 # 8002e1b8 <__func__.0+0x2d0>
    80027480:	cf89                	beqz	a5,8002749a <stateen_SE0_test_5+0x12c>
    80027482:	6498                	ld	a4,8(s1)
    80027484:	4789                	li	a5,2
    80027486:	00007597          	auipc	a1,0x7
    8002748a:	d2258593          	addi	a1,a1,-734 # 8002e1a8 <__func__.0+0x2c0>
    8002748e:	00f70663          	beq	a4,a5,8002749a <stateen_SE0_test_5+0x12c>
    80027492:	00007597          	auipc	a1,0x7
    80027496:	d2658593          	addi	a1,a1,-730 # 8002e1b8 <__func__.0+0x2d0>
    8002749a:	00007517          	auipc	a0,0x7
    8002749e:	d5e50513          	addi	a0,a0,-674 # 8002e1f8 <__func__.0+0x310>
    800274a2:	789030ef          	jal	8002b42a <printf>
    800274a6:	00031797          	auipc	a5,0x31
    800274aa:	b6b7c783          	lbu	a5,-1173(a5) # 80058011 <excpt+0x1>
    800274ae:	c789                	beqz	a5,800274b8 <stateen_SE0_test_5+0x14a>
    800274b0:	6498                	ld	a4,8(s1)
    800274b2:	4789                	li	a5,2
    800274b4:	00f70c63          	beq	a4,a5,800274cc <stateen_SE0_test_5+0x15e>
    800274b8:	00007517          	auipc	a0,0x7
    800274bc:	d4850513          	addi	a0,a0,-696 # 8002e200 <__func__.0+0x318>
    800274c0:	76b030ef          	jal	8002b42a <printf>
    800274c4:	02900513          	li	a0,41
    800274c8:	451020ef          	jal	8002a118 <putchar>
    800274cc:	4529                	li	a0,10
    800274ce:	44b020ef          	jal	8002a118 <putchar>
    800274d2:	c015                	beqz	s0,800274f6 <stateen_SE0_test_5+0x188>
    800274d4:	00031417          	auipc	s0,0x31
    800274d8:	b3d44403          	lbu	s0,-1219(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    800274dc:	00007597          	auipc	a1,0x7
    800274e0:	cdc58593          	addi	a1,a1,-804 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    800274e4:	cc11                	beqz	s0,80027500 <stateen_SE0_test_5+0x192>
    800274e6:	6498                	ld	a4,8(s1)
    800274e8:	4789                	li	a5,2
    TEST_END();
    800274ea:	00007597          	auipc	a1,0x7
    800274ee:	cbe58593          	addi	a1,a1,-834 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    800274f2:	00f70763          	beq	a4,a5,80027500 <stateen_SE0_test_5+0x192>
    800274f6:	4401                	li	s0,0
    TEST_END();
    800274f8:	00007597          	auipc	a1,0x7
    800274fc:	cc058593          	addi	a1,a1,-832 # 8002e1b8 <__func__.0+0x2d0>
    80027500:	00007517          	auipc	a0,0x7
    80027504:	d6050513          	addi	a0,a0,-672 # 8002e260 <__func__.0+0x378>
    80027508:	723030ef          	jal	8002b42a <printf>
    8002750c:	4511                	li	a0,4
    8002750e:	9fbd90ef          	jal	80000f08 <goto_priv>
    80027512:	b12da0ef          	jal	80001824 <reset_state>

}
    80027516:	60e2                	ld	ra,24(sp)
    80027518:	8522                	mv	a0,s0
    8002751a:	6442                	ld	s0,16(sp)
    8002751c:	64a2                	ld	s1,8(sp)
    8002751e:	6105                	addi	sp,sp,32
    80027520:	8082                	ret

0000000080027522 <stateen_SE0_test_6>:


bool stateen_SE0_test_6(){
    80027522:	1101                	addi	sp,sp,-32

    TEST_START();
    80027524:	00006597          	auipc	a1,0x6
    80027528:	7c458593          	addi	a1,a1,1988 # 8002dce8 <__func__.2>
    8002752c:	00007517          	auipc	a0,0x7
    80027530:	c9c50513          	addi	a0,a0,-868 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_6(){
    80027534:	ec06                	sd	ra,24(sp)
    80027536:	e822                	sd	s0,16(sp)
    80027538:	e426                	sd	s1,8(sp)
    TEST_START();
    8002753a:	6f1030ef          	jal	8002b42a <printf>
    8002753e:	4529                	li	a0,10
    80027540:	3d9020ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80027544:	4511                	li	a0,4
    80027546:	9c3d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    8002754a:	57fd                	li	a5,-1
    8002754c:	17fe                	slli	a5,a5,0x3f
    8002754e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027552:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80027556:	450d                	li	a0,3
    80027558:	9b1d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002755c:	8b1d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027560:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027564:	aebd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027568:	08200593          	li	a1,130
    8002756c:	00011617          	auipc	a2,0x11
    80027570:	5ac60613          	addi	a2,a2,1452 # 80038b18 <__func__.0+0xac30>
    80027574:	00007517          	auipc	a0,0x7
    80027578:	c6c50513          	addi	a0,a0,-916 # 8002e1e0 <__func__.0+0x2f8>
    8002757c:	6af030ef          	jal	8002b42a <printf>
    80027580:	00031797          	auipc	a5,0x31
    80027584:	a917c783          	lbu	a5,-1391(a5) # 80058011 <excpt+0x1>
    80027588:	00007597          	auipc	a1,0x7
    8002758c:	c2058593          	addi	a1,a1,-992 # 8002e1a8 <__func__.0+0x2c0>
    80027590:	c789                	beqz	a5,8002759a <stateen_SE0_test_6+0x78>
    80027592:	00007597          	auipc	a1,0x7
    80027596:	c2658593          	addi	a1,a1,-986 # 8002e1b8 <__func__.0+0x2d0>
    8002759a:	00007517          	auipc	a0,0x7
    8002759e:	c5e50513          	addi	a0,a0,-930 # 8002e1f8 <__func__.0+0x310>
    800275a2:	689030ef          	jal	8002b42a <printf>
    800275a6:	00031797          	auipc	a5,0x31
    800275aa:	a6b7c783          	lbu	a5,-1429(a5) # 80058011 <excpt+0x1>
    800275ae:	2c079e63          	bnez	a5,8002788a <stateen_SE0_test_6+0x368>
    800275b2:	4529                	li	a0,10
    800275b4:	365020ef          	jal	8002a118 <putchar>
    800275b8:	00031497          	auipc	s1,0x31
    800275bc:	a594c483          	lbu	s1,-1447(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    800275c0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800275c4:	a8bd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800275c8:	08200593          	li	a1,130
    800275cc:	00011617          	auipc	a2,0x11
    800275d0:	5a460613          	addi	a2,a2,1444 # 80038b70 <__func__.0+0xac88>
    800275d4:	00007517          	auipc	a0,0x7
    800275d8:	c0c50513          	addi	a0,a0,-1012 # 8002e1e0 <__func__.0+0x2f8>
    800275dc:	64f030ef          	jal	8002b42a <printf>
    800275e0:	00031797          	auipc	a5,0x31
    800275e4:	a317c783          	lbu	a5,-1487(a5) # 80058011 <excpt+0x1>
    800275e8:	00007597          	auipc	a1,0x7
    800275ec:	bd058593          	addi	a1,a1,-1072 # 8002e1b8 <__func__.0+0x2d0>
    800275f0:	e789                	bnez	a5,800275fa <stateen_SE0_test_6+0xd8>
    800275f2:	00007597          	auipc	a1,0x7
    800275f6:	bb658593          	addi	a1,a1,-1098 # 8002e1a8 <__func__.0+0x2c0>
    800275fa:	00007517          	auipc	a0,0x7
    800275fe:	bfe50513          	addi	a0,a0,-1026 # 8002e1f8 <__func__.0+0x310>
    80027602:	629030ef          	jal	8002b42a <printf>
    80027606:	00031797          	auipc	a5,0x31
    8002760a:	a0b7c783          	lbu	a5,-1525(a5) # 80058011 <excpt+0x1>
    8002760e:	26079363          	bnez	a5,80027874 <stateen_SE0_test_6+0x352>
    80027612:	4529                	li	a0,10
    80027614:	305020ef          	jal	8002a118 <putchar>
    80027618:	4401                	li	s0,0
    8002761a:	e499                	bnez	s1,80027628 <stateen_SE0_test_6+0x106>
    8002761c:	00031417          	auipc	s0,0x31
    80027620:	9f544403          	lbu	s0,-1547(s0) # 80058011 <excpt+0x1>
    80027624:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027628:	4505                	li	a0,1
    8002762a:	8dfd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002762e:	fded90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027632:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027636:	a19d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002763a:	08200593          	li	a1,130
    8002763e:	00011617          	auipc	a2,0x11
    80027642:	58a60613          	addi	a2,a2,1418 # 80038bc8 <__func__.0+0xace0>
    80027646:	00007517          	auipc	a0,0x7
    8002764a:	b9a50513          	addi	a0,a0,-1126 # 8002e1e0 <__func__.0+0x2f8>
    8002764e:	5dd030ef          	jal	8002b42a <printf>
    80027652:	00031797          	auipc	a5,0x31
    80027656:	9bf7c783          	lbu	a5,-1601(a5) # 80058011 <excpt+0x1>
    8002765a:	00007597          	auipc	a1,0x7
    8002765e:	b5e58593          	addi	a1,a1,-1186 # 8002e1b8 <__func__.0+0x2d0>
    80027662:	e789                	bnez	a5,8002766c <stateen_SE0_test_6+0x14a>
    80027664:	00007597          	auipc	a1,0x7
    80027668:	b4458593          	addi	a1,a1,-1212 # 8002e1a8 <__func__.0+0x2c0>
    8002766c:	00007517          	auipc	a0,0x7
    80027670:	b8c50513          	addi	a0,a0,-1140 # 8002e1f8 <__func__.0+0x310>
    80027674:	5b7030ef          	jal	8002b42a <printf>
    80027678:	00031797          	auipc	a5,0x31
    8002767c:	9997c783          	lbu	a5,-1639(a5) # 80058011 <excpt+0x1>
    80027680:	1c079f63          	bnez	a5,8002785e <stateen_SE0_test_6+0x33c>
    80027684:	4529                	li	a0,10
    80027686:	293020ef          	jal	8002a118 <putchar>
    8002768a:	c419                	beqz	s0,80027698 <stateen_SE0_test_6+0x176>
    8002768c:	00031417          	auipc	s0,0x31
    80027690:	98544403          	lbu	s0,-1659(s0) # 80058011 <excpt+0x1>
    80027694:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027698:	4505                	li	a0,1
    8002769a:	86fd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002769e:	f6ed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800276a2:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800276a6:	9a9d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800276aa:	08200593          	li	a1,130
    800276ae:	00011617          	auipc	a2,0x11
    800276b2:	56a60613          	addi	a2,a2,1386 # 80038c18 <__func__.0+0xad30>
    800276b6:	00007517          	auipc	a0,0x7
    800276ba:	b2a50513          	addi	a0,a0,-1238 # 8002e1e0 <__func__.0+0x2f8>
    800276be:	56d030ef          	jal	8002b42a <printf>
    800276c2:	00031797          	auipc	a5,0x31
    800276c6:	94f7c783          	lbu	a5,-1713(a5) # 80058011 <excpt+0x1>
    800276ca:	00007597          	auipc	a1,0x7
    800276ce:	aee58593          	addi	a1,a1,-1298 # 8002e1b8 <__func__.0+0x2d0>
    800276d2:	e789                	bnez	a5,800276dc <stateen_SE0_test_6+0x1ba>
    800276d4:	00007597          	auipc	a1,0x7
    800276d8:	ad458593          	addi	a1,a1,-1324 # 8002e1a8 <__func__.0+0x2c0>
    800276dc:	00007517          	auipc	a0,0x7
    800276e0:	b1c50513          	addi	a0,a0,-1252 # 8002e1f8 <__func__.0+0x310>
    800276e4:	547030ef          	jal	8002b42a <printf>
    800276e8:	00031797          	auipc	a5,0x31
    800276ec:	9297c783          	lbu	a5,-1751(a5) # 80058011 <excpt+0x1>
    800276f0:	14079c63          	bnez	a5,80027848 <stateen_SE0_test_6+0x326>
    800276f4:	4529                	li	a0,10
    800276f6:	223020ef          	jal	8002a118 <putchar>
    800276fa:	c419                	beqz	s0,80027708 <stateen_SE0_test_6+0x1e6>
    800276fc:	00031417          	auipc	s0,0x31
    80027700:	91544403          	lbu	s0,-1771(s0) # 80058011 <excpt+0x1>
    80027704:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027708:	4511                	li	a0,4
    8002770a:	ffed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002770e:	efed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027712:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027716:	939d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002771a:	08200593          	li	a1,130
    8002771e:	00011617          	auipc	a2,0x11
    80027722:	55260613          	addi	a2,a2,1362 # 80038c70 <__func__.0+0xad88>
    80027726:	00007517          	auipc	a0,0x7
    8002772a:	aba50513          	addi	a0,a0,-1350 # 8002e1e0 <__func__.0+0x2f8>
    8002772e:	4fd030ef          	jal	8002b42a <printf>
    80027732:	00031797          	auipc	a5,0x31
    80027736:	8df7c783          	lbu	a5,-1825(a5) # 80058011 <excpt+0x1>
    8002773a:	00007597          	auipc	a1,0x7
    8002773e:	a7e58593          	addi	a1,a1,-1410 # 8002e1b8 <__func__.0+0x2d0>
    80027742:	e789                	bnez	a5,8002774c <stateen_SE0_test_6+0x22a>
    80027744:	00007597          	auipc	a1,0x7
    80027748:	a6458593          	addi	a1,a1,-1436 # 8002e1a8 <__func__.0+0x2c0>
    8002774c:	00007517          	auipc	a0,0x7
    80027750:	aac50513          	addi	a0,a0,-1364 # 8002e1f8 <__func__.0+0x310>
    80027754:	4d7030ef          	jal	8002b42a <printf>
    80027758:	00031797          	auipc	a5,0x31
    8002775c:	8b97c783          	lbu	a5,-1863(a5) # 80058011 <excpt+0x1>
    80027760:	0c079963          	bnez	a5,80027832 <stateen_SE0_test_6+0x310>
    80027764:	4529                	li	a0,10
    80027766:	1b3020ef          	jal	8002a118 <putchar>
    8002776a:	c419                	beqz	s0,80027778 <stateen_SE0_test_6+0x256>
    8002776c:	00031417          	auipc	s0,0x31
    80027770:	8a544403          	lbu	s0,-1883(s0) # 80058011 <excpt+0x1>
    80027774:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027778:	4511                	li	a0,4
    8002777a:	f8ed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002777e:	e8ed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027782:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027786:	8c9d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002778a:	08200593          	li	a1,130
    8002778e:	00011617          	auipc	a2,0x11
    80027792:	53260613          	addi	a2,a2,1330 # 80038cc0 <__func__.0+0xadd8>
    80027796:	00007517          	auipc	a0,0x7
    8002779a:	a4a50513          	addi	a0,a0,-1462 # 8002e1e0 <__func__.0+0x2f8>
    8002779e:	48d030ef          	jal	8002b42a <printf>
    800277a2:	00031797          	auipc	a5,0x31
    800277a6:	86f7c783          	lbu	a5,-1937(a5) # 80058011 <excpt+0x1>
    800277aa:	00007597          	auipc	a1,0x7
    800277ae:	a0e58593          	addi	a1,a1,-1522 # 8002e1b8 <__func__.0+0x2d0>
    800277b2:	e789                	bnez	a5,800277bc <stateen_SE0_test_6+0x29a>
    800277b4:	00007597          	auipc	a1,0x7
    800277b8:	9f458593          	addi	a1,a1,-1548 # 8002e1a8 <__func__.0+0x2c0>
    800277bc:	00007517          	auipc	a0,0x7
    800277c0:	a3c50513          	addi	a0,a0,-1476 # 8002e1f8 <__func__.0+0x310>
    800277c4:	467030ef          	jal	8002b42a <printf>
    800277c8:	00031797          	auipc	a5,0x31
    800277cc:	8497c783          	lbu	a5,-1975(a5) # 80058011 <excpt+0x1>
    800277d0:	e7b1                	bnez	a5,8002781c <stateen_SE0_test_6+0x2fa>
    800277d2:	4529                	li	a0,10
    800277d4:	145020ef          	jal	8002a118 <putchar>
    800277d8:	c411                	beqz	s0,800277e4 <stateen_SE0_test_6+0x2c2>
    800277da:	00031797          	auipc	a5,0x31
    800277de:	8377c783          	lbu	a5,-1993(a5) # 80058011 <excpt+0x1>
    800277e2:	c79d                	beqz	a5,80027810 <stateen_SE0_test_6+0x2ee>
    800277e4:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    800277e6:	00007597          	auipc	a1,0x7
    800277ea:	9d258593          	addi	a1,a1,-1582 # 8002e1b8 <__func__.0+0x2d0>
    800277ee:	00007517          	auipc	a0,0x7
    800277f2:	a7250513          	addi	a0,a0,-1422 # 8002e260 <__func__.0+0x378>
    800277f6:	435030ef          	jal	8002b42a <printf>
    800277fa:	4511                	li	a0,4
    800277fc:	f0cd90ef          	jal	80000f08 <goto_priv>
    80027800:	824da0ef          	jal	80001824 <reset_state>

}
    80027804:	60e2                	ld	ra,24(sp)
    80027806:	8522                	mv	a0,s0
    80027808:	6442                	ld	s0,16(sp)
    8002780a:	64a2                	ld	s1,8(sp)
    8002780c:	6105                	addi	sp,sp,32
    8002780e:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027810:	4405                	li	s0,1
    TEST_END();
    80027812:	00007597          	auipc	a1,0x7
    80027816:	99658593          	addi	a1,a1,-1642 # 8002e1a8 <__func__.0+0x2c0>
    8002781a:	bfd1                	j	800277ee <stateen_SE0_test_6+0x2cc>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002781c:	00007517          	auipc	a0,0x7
    80027820:	9e450513          	addi	a0,a0,-1564 # 8002e200 <__func__.0+0x318>
    80027824:	407030ef          	jal	8002b42a <printf>
    80027828:	02900513          	li	a0,41
    8002782c:	0ed020ef          	jal	8002a118 <putchar>
    80027830:	b74d                	j	800277d2 <stateen_SE0_test_6+0x2b0>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027832:	00007517          	auipc	a0,0x7
    80027836:	9ce50513          	addi	a0,a0,-1586 # 8002e200 <__func__.0+0x318>
    8002783a:	3f1030ef          	jal	8002b42a <printf>
    8002783e:	02900513          	li	a0,41
    80027842:	0d7020ef          	jal	8002a118 <putchar>
    80027846:	bf39                	j	80027764 <stateen_SE0_test_6+0x242>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027848:	00007517          	auipc	a0,0x7
    8002784c:	9b850513          	addi	a0,a0,-1608 # 8002e200 <__func__.0+0x318>
    80027850:	3db030ef          	jal	8002b42a <printf>
    80027854:	02900513          	li	a0,41
    80027858:	0c1020ef          	jal	8002a118 <putchar>
    8002785c:	bd61                	j	800276f4 <stateen_SE0_test_6+0x1d2>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002785e:	00007517          	auipc	a0,0x7
    80027862:	9a250513          	addi	a0,a0,-1630 # 8002e200 <__func__.0+0x318>
    80027866:	3c5030ef          	jal	8002b42a <printf>
    8002786a:	02900513          	li	a0,41
    8002786e:	0ab020ef          	jal	8002a118 <putchar>
    80027872:	bd09                	j	80027684 <stateen_SE0_test_6+0x162>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027874:	00007517          	auipc	a0,0x7
    80027878:	98c50513          	addi	a0,a0,-1652 # 8002e200 <__func__.0+0x318>
    8002787c:	3af030ef          	jal	8002b42a <printf>
    80027880:	02900513          	li	a0,41
    80027884:	095020ef          	jal	8002a118 <putchar>
    80027888:	b369                	j	80027612 <stateen_SE0_test_6+0xf0>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    8002788a:	00007517          	auipc	a0,0x7
    8002788e:	97650513          	addi	a0,a0,-1674 # 8002e200 <__func__.0+0x318>
    80027892:	399030ef          	jal	8002b42a <printf>
    80027896:	02900513          	li	a0,41
    8002789a:	07f020ef          	jal	8002a118 <putchar>
    8002789e:	bb11                	j	800275b2 <stateen_SE0_test_6+0x90>

00000000800278a0 <stateen_SE0_test_7>:


bool stateen_SE0_test_7(){
    800278a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800278a2:	00006597          	auipc	a1,0x6
    800278a6:	45e58593          	addi	a1,a1,1118 # 8002dd00 <__func__.1>
    800278aa:	00007517          	auipc	a0,0x7
    800278ae:	91e50513          	addi	a0,a0,-1762 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_7(){
    800278b2:	ec06                	sd	ra,24(sp)
    800278b4:	e822                	sd	s0,16(sp)
    800278b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800278b8:	373030ef          	jal	8002b42a <printf>
    800278bc:	4529                	li	a0,10
    800278be:	05b020ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    800278c2:	4511                	li	a0,4
    800278c4:	e44d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1 hstateen.SE0=1,v=1 时可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800278c8:	57fd                	li	a5,-1
    800278ca:	17fe                	slli	a5,a5,0x3f
    800278cc:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    800278d0:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800278d4:	4509                	li	a0,2
    800278d6:	e32d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800278da:	d32d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800278de:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800278e2:	f6cd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800278e6:	08200593          	li	a1,130
    800278ea:	00011617          	auipc	a2,0x11
    800278ee:	42660613          	addi	a2,a2,1062 # 80038d10 <__func__.0+0xae28>
    800278f2:	00007517          	auipc	a0,0x7
    800278f6:	8ee50513          	addi	a0,a0,-1810 # 8002e1e0 <__func__.0+0x2f8>
    800278fa:	331030ef          	jal	8002b42a <printf>
    800278fe:	00030797          	auipc	a5,0x30
    80027902:	7137c783          	lbu	a5,1811(a5) # 80058011 <excpt+0x1>
    80027906:	00007597          	auipc	a1,0x7
    8002790a:	8a258593          	addi	a1,a1,-1886 # 8002e1a8 <__func__.0+0x2c0>
    8002790e:	c789                	beqz	a5,80027918 <stateen_SE0_test_7+0x78>
    80027910:	00007597          	auipc	a1,0x7
    80027914:	8a858593          	addi	a1,a1,-1880 # 8002e1b8 <__func__.0+0x2d0>
    80027918:	00007517          	auipc	a0,0x7
    8002791c:	8e050513          	addi	a0,a0,-1824 # 8002e1f8 <__func__.0+0x310>
    80027920:	30b030ef          	jal	8002b42a <printf>
    80027924:	00030797          	auipc	a5,0x30
    80027928:	6ed7c783          	lbu	a5,1773(a5) # 80058011 <excpt+0x1>
    8002792c:	1c079d63          	bnez	a5,80027b06 <stateen_SE0_test_7+0x266>
    80027930:	4529                	li	a0,10
    80027932:	7e6020ef          	jal	8002a118 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027936:	4509                	li	a0,2
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027938:	00030497          	auipc	s1,0x30
    8002793c:	6d94c483          	lbu	s1,1753(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80027940:	dc8d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027944:	cc8d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027948:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002794c:	f02d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027950:	08200593          	li	a1,130
    80027954:	00011617          	auipc	a2,0x11
    80027958:	40c60613          	addi	a2,a2,1036 # 80038d60 <__func__.0+0xae78>
    8002795c:	00007517          	auipc	a0,0x7
    80027960:	88450513          	addi	a0,a0,-1916 # 8002e1e0 <__func__.0+0x2f8>
    80027964:	2c7030ef          	jal	8002b42a <printf>
    80027968:	00030797          	auipc	a5,0x30
    8002796c:	6a97c783          	lbu	a5,1705(a5) # 80058011 <excpt+0x1>
    80027970:	00007597          	auipc	a1,0x7
    80027974:	84858593          	addi	a1,a1,-1976 # 8002e1b8 <__func__.0+0x2d0>
    80027978:	e789                	bnez	a5,80027982 <stateen_SE0_test_7+0xe2>
    8002797a:	00007597          	auipc	a1,0x7
    8002797e:	82e58593          	addi	a1,a1,-2002 # 8002e1a8 <__func__.0+0x2c0>
    80027982:	00007517          	auipc	a0,0x7
    80027986:	87650513          	addi	a0,a0,-1930 # 8002e1f8 <__func__.0+0x310>
    8002798a:	2a1030ef          	jal	8002b42a <printf>
    8002798e:	00030797          	auipc	a5,0x30
    80027992:	6837c783          	lbu	a5,1667(a5) # 80058011 <excpt+0x1>
    80027996:	14079d63          	bnez	a5,80027af0 <stateen_SE0_test_7+0x250>
    8002799a:	4529                	li	a0,10
    8002799c:	77c020ef          	jal	8002a118 <putchar>
    800279a0:	4401                	li	s0,0
    800279a2:	e499                	bnez	s1,800279b0 <stateen_SE0_test_7+0x110>
    800279a4:	00030417          	auipc	s0,0x30
    800279a8:	66d44403          	lbu	s0,1645(s0) # 80058011 <excpt+0x1>
    800279ac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800279b0:	4501                	li	a0,0
    800279b2:	d56d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800279b6:	c56d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800279ba:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800279be:	e90d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800279c2:	08200593          	li	a1,130
    800279c6:	00011617          	auipc	a2,0x11
    800279ca:	3f260613          	addi	a2,a2,1010 # 80038db8 <__func__.0+0xaed0>
    800279ce:	00007517          	auipc	a0,0x7
    800279d2:	81250513          	addi	a0,a0,-2030 # 8002e1e0 <__func__.0+0x2f8>
    800279d6:	255030ef          	jal	8002b42a <printf>
    800279da:	00030797          	auipc	a5,0x30
    800279de:	6377c783          	lbu	a5,1591(a5) # 80058011 <excpt+0x1>
    800279e2:	00006597          	auipc	a1,0x6
    800279e6:	7d658593          	addi	a1,a1,2006 # 8002e1b8 <__func__.0+0x2d0>
    800279ea:	e789                	bnez	a5,800279f4 <stateen_SE0_test_7+0x154>
    800279ec:	00006597          	auipc	a1,0x6
    800279f0:	7bc58593          	addi	a1,a1,1980 # 8002e1a8 <__func__.0+0x2c0>
    800279f4:	00007517          	auipc	a0,0x7
    800279f8:	80450513          	addi	a0,a0,-2044 # 8002e1f8 <__func__.0+0x310>
    800279fc:	22f030ef          	jal	8002b42a <printf>
    80027a00:	00030797          	auipc	a5,0x30
    80027a04:	6117c783          	lbu	a5,1553(a5) # 80058011 <excpt+0x1>
    80027a08:	0c079963          	bnez	a5,80027ada <stateen_SE0_test_7+0x23a>
    80027a0c:	4529                	li	a0,10
    80027a0e:	70a020ef          	jal	8002a118 <putchar>
    80027a12:	c419                	beqz	s0,80027a20 <stateen_SE0_test_7+0x180>
    80027a14:	00030417          	auipc	s0,0x30
    80027a18:	5fd44403          	lbu	s0,1533(s0) # 80058011 <excpt+0x1>
    80027a1c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80027a20:	4501                	li	a0,0
    80027a22:	ce6d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a26:	be6d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027a2a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027a2e:	e20d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a32:	08200593          	li	a1,130
    80027a36:	00011617          	auipc	a2,0x11
    80027a3a:	3d260613          	addi	a2,a2,978 # 80038e08 <__func__.0+0xaf20>
    80027a3e:	00006517          	auipc	a0,0x6
    80027a42:	7a250513          	addi	a0,a0,1954 # 8002e1e0 <__func__.0+0x2f8>
    80027a46:	1e5030ef          	jal	8002b42a <printf>
    80027a4a:	00030797          	auipc	a5,0x30
    80027a4e:	5c77c783          	lbu	a5,1479(a5) # 80058011 <excpt+0x1>
    80027a52:	00006597          	auipc	a1,0x6
    80027a56:	76658593          	addi	a1,a1,1894 # 8002e1b8 <__func__.0+0x2d0>
    80027a5a:	e789                	bnez	a5,80027a64 <stateen_SE0_test_7+0x1c4>
    80027a5c:	00006597          	auipc	a1,0x6
    80027a60:	74c58593          	addi	a1,a1,1868 # 8002e1a8 <__func__.0+0x2c0>
    80027a64:	00006517          	auipc	a0,0x6
    80027a68:	79450513          	addi	a0,a0,1940 # 8002e1f8 <__func__.0+0x310>
    80027a6c:	1bf030ef          	jal	8002b42a <printf>
    80027a70:	00030797          	auipc	a5,0x30
    80027a74:	5a17c783          	lbu	a5,1441(a5) # 80058011 <excpt+0x1>
    80027a78:	e7b1                	bnez	a5,80027ac4 <stateen_SE0_test_7+0x224>
    80027a7a:	4529                	li	a0,10
    80027a7c:	69c020ef          	jal	8002a118 <putchar>
    80027a80:	c411                	beqz	s0,80027a8c <stateen_SE0_test_7+0x1ec>
    80027a82:	00030797          	auipc	a5,0x30
    80027a86:	58f7c783          	lbu	a5,1423(a5) # 80058011 <excpt+0x1>
    80027a8a:	c79d                	beqz	a5,80027ab8 <stateen_SE0_test_7+0x218>
    80027a8c:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80027a8e:	00006597          	auipc	a1,0x6
    80027a92:	72a58593          	addi	a1,a1,1834 # 8002e1b8 <__func__.0+0x2d0>
    80027a96:	00006517          	auipc	a0,0x6
    80027a9a:	7ca50513          	addi	a0,a0,1994 # 8002e260 <__func__.0+0x378>
    80027a9e:	18d030ef          	jal	8002b42a <printf>
    80027aa2:	4511                	li	a0,4
    80027aa4:	c64d90ef          	jal	80000f08 <goto_priv>
    80027aa8:	d7dd90ef          	jal	80001824 <reset_state>
}
    80027aac:	60e2                	ld	ra,24(sp)
    80027aae:	8522                	mv	a0,s0
    80027ab0:	6442                	ld	s0,16(sp)
    80027ab2:	64a2                	ld	s1,8(sp)
    80027ab4:	6105                	addi	sp,sp,32
    80027ab6:	8082                	ret
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ab8:	4405                	li	s0,1
    TEST_END();
    80027aba:	00006597          	auipc	a1,0x6
    80027abe:	6ee58593          	addi	a1,a1,1774 # 8002e1a8 <__func__.0+0x2c0>
    80027ac2:	bfd1                	j	80027a96 <stateen_SE0_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ac4:	00006517          	auipc	a0,0x6
    80027ac8:	73c50513          	addi	a0,a0,1852 # 8002e200 <__func__.0+0x318>
    80027acc:	15f030ef          	jal	8002b42a <printf>
    80027ad0:	02900513          	li	a0,41
    80027ad4:	644020ef          	jal	8002a118 <putchar>
    80027ad8:	b74d                	j	80027a7a <stateen_SE0_test_7+0x1da>
    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ada:	00006517          	auipc	a0,0x6
    80027ade:	72650513          	addi	a0,a0,1830 # 8002e200 <__func__.0+0x318>
    80027ae2:	149030ef          	jal	8002b42a <printf>
    80027ae6:	02900513          	li	a0,41
    80027aea:	62e020ef          	jal	8002a118 <putchar>
    80027aee:	bf39                	j	80027a0c <stateen_SE0_test_7+0x16c>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027af0:	00006517          	auipc	a0,0x6
    80027af4:	71050513          	addi	a0,a0,1808 # 8002e200 <__func__.0+0x318>
    80027af8:	133030ef          	jal	8002b42a <printf>
    80027afc:	02900513          	li	a0,41
    80027b00:	618020ef          	jal	8002a118 <putchar>
    80027b04:	bd59                	j	8002799a <stateen_SE0_test_7+0xfa>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b06:	00006517          	auipc	a0,0x6
    80027b0a:	6fa50513          	addi	a0,a0,1786 # 8002e200 <__func__.0+0x318>
    80027b0e:	11d030ef          	jal	8002b42a <printf>
    80027b12:	02900513          	li	a0,41
    80027b16:	602020ef          	jal	8002a118 <putchar>
    80027b1a:	bd19                	j	80027930 <stateen_SE0_test_7+0x90>

0000000080027b1c <stateen_SE0_test_8>:




bool stateen_SE0_test_8(){
    80027b1c:	1101                	addi	sp,sp,-32

    TEST_START();
    80027b1e:	00006597          	auipc	a1,0x6
    80027b22:	1fa58593          	addi	a1,a1,506 # 8002dd18 <__func__.0>
    80027b26:	00006517          	auipc	a0,0x6
    80027b2a:	6a250513          	addi	a0,a0,1698 # 8002e1c8 <__func__.0+0x2e0>
bool stateen_SE0_test_8(){
    80027b2e:	ec06                	sd	ra,24(sp)
    80027b30:	e822                	sd	s0,16(sp)
    80027b32:	e426                	sd	s1,8(sp)
    TEST_START();
    80027b34:	0f7030ef          	jal	8002b42a <printf>
    80027b38:	4529                	li	a0,10
    80027b3a:	5de020ef          	jal	8002a118 <putchar>
    
    goto_priv(PRIV_M);
    80027b3e:	4511                	li	a0,4
    80027b40:	bc8d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027b44:	57fd                	li	a5,-1
    80027b46:	17fe                	slli	a5,a5,0x3f
    80027b48:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027b4c:	60c7a073          	csrs	hstateen0,a5
    CSRS(CSR_SSTATEEN0 , MSTATEEN_SE0);
    80027b50:	10c7a073          	csrs	sstateen0,a5

    goto_priv(PRIV_HS);
    80027b54:	450d                	li	a0,3
    80027b56:	bb2d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027b5a:	ab2d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027b5e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027b62:	cecd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027b66:	08200593          	li	a1,130
    80027b6a:	00011617          	auipc	a2,0x11
    80027b6e:	2f660613          	addi	a2,a2,758 # 80038e60 <__func__.0+0xaf78>
    80027b72:	00006517          	auipc	a0,0x6
    80027b76:	66e50513          	addi	a0,a0,1646 # 8002e1e0 <__func__.0+0x2f8>
    80027b7a:	0b1030ef          	jal	8002b42a <printf>
    80027b7e:	00030797          	auipc	a5,0x30
    80027b82:	4937c783          	lbu	a5,1171(a5) # 80058011 <excpt+0x1>
    80027b86:	00006597          	auipc	a1,0x6
    80027b8a:	62258593          	addi	a1,a1,1570 # 8002e1a8 <__func__.0+0x2c0>
    80027b8e:	c789                	beqz	a5,80027b98 <stateen_SE0_test_8+0x7c>
    80027b90:	00006597          	auipc	a1,0x6
    80027b94:	62858593          	addi	a1,a1,1576 # 8002e1b8 <__func__.0+0x2d0>
    80027b98:	00006517          	auipc	a0,0x6
    80027b9c:	66050513          	addi	a0,a0,1632 # 8002e1f8 <__func__.0+0x310>
    80027ba0:	08b030ef          	jal	8002b42a <printf>
    80027ba4:	00030797          	auipc	a5,0x30
    80027ba8:	46d7c783          	lbu	a5,1133(a5) # 80058011 <excpt+0x1>
    80027bac:	4e079a63          	bnez	a5,800280a0 <stateen_SE0_test_8+0x584>
    80027bb0:	4529                	li	a0,10
    80027bb2:	566020ef          	jal	8002a118 <putchar>
    80027bb6:	00030497          	auipc	s1,0x30
    80027bba:	45b4c483          	lbu	s1,1115(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027bbe:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027bc2:	c8cd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027bc6:	08200593          	li	a1,130
    80027bca:	00011617          	auipc	a2,0x11
    80027bce:	2ee60613          	addi	a2,a2,750 # 80038eb8 <__func__.0+0xafd0>
    80027bd2:	00006517          	auipc	a0,0x6
    80027bd6:	60e50513          	addi	a0,a0,1550 # 8002e1e0 <__func__.0+0x2f8>
    80027bda:	051030ef          	jal	8002b42a <printf>
    80027bde:	00030797          	auipc	a5,0x30
    80027be2:	4337c783          	lbu	a5,1075(a5) # 80058011 <excpt+0x1>
    80027be6:	00006597          	auipc	a1,0x6
    80027bea:	5d258593          	addi	a1,a1,1490 # 8002e1b8 <__func__.0+0x2d0>
    80027bee:	e789                	bnez	a5,80027bf8 <stateen_SE0_test_8+0xdc>
    80027bf0:	00006597          	auipc	a1,0x6
    80027bf4:	5b858593          	addi	a1,a1,1464 # 8002e1a8 <__func__.0+0x2c0>
    80027bf8:	00006517          	auipc	a0,0x6
    80027bfc:	60050513          	addi	a0,a0,1536 # 8002e1f8 <__func__.0+0x310>
    80027c00:	02b030ef          	jal	8002b42a <printf>
    80027c04:	00030797          	auipc	a5,0x30
    80027c08:	40d7c783          	lbu	a5,1037(a5) # 80058011 <excpt+0x1>
    80027c0c:	46079f63          	bnez	a5,8002808a <stateen_SE0_test_8+0x56e>
    80027c10:	4529                	li	a0,10
    80027c12:	506020ef          	jal	8002a118 <putchar>
    80027c16:	4401                	li	s0,0
    80027c18:	e499                	bnez	s1,80027c26 <stateen_SE0_test_8+0x10a>
    80027c1a:	00030417          	auipc	s0,0x30
    80027c1e:	3f744403          	lbu	s0,1015(s0) # 80058011 <excpt+0x1>
    80027c22:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027c26:	4505                	li	a0,1
    80027c28:	ae0d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c2c:	9e0d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027c30:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027c34:	c1ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c38:	08200593          	li	a1,130
    80027c3c:	00011617          	auipc	a2,0x11
    80027c40:	2d460613          	addi	a2,a2,724 # 80038f10 <__func__.0+0xb028>
    80027c44:	00006517          	auipc	a0,0x6
    80027c48:	59c50513          	addi	a0,a0,1436 # 8002e1e0 <__func__.0+0x2f8>
    80027c4c:	7de030ef          	jal	8002b42a <printf>
    80027c50:	00030797          	auipc	a5,0x30
    80027c54:	3c17c783          	lbu	a5,961(a5) # 80058011 <excpt+0x1>
    80027c58:	00006597          	auipc	a1,0x6
    80027c5c:	56058593          	addi	a1,a1,1376 # 8002e1b8 <__func__.0+0x2d0>
    80027c60:	e789                	bnez	a5,80027c6a <stateen_SE0_test_8+0x14e>
    80027c62:	00006597          	auipc	a1,0x6
    80027c66:	54658593          	addi	a1,a1,1350 # 8002e1a8 <__func__.0+0x2c0>
    80027c6a:	00006517          	auipc	a0,0x6
    80027c6e:	58e50513          	addi	a0,a0,1422 # 8002e1f8 <__func__.0+0x310>
    80027c72:	7b8030ef          	jal	8002b42a <printf>
    80027c76:	00030797          	auipc	a5,0x30
    80027c7a:	39b7c783          	lbu	a5,923(a5) # 80058011 <excpt+0x1>
    80027c7e:	3e079b63          	bnez	a5,80028074 <stateen_SE0_test_8+0x558>
    80027c82:	4529                	li	a0,10
    80027c84:	494020ef          	jal	8002a118 <putchar>
    80027c88:	c419                	beqz	s0,80027c96 <stateen_SE0_test_8+0x17a>
    80027c8a:	00030417          	auipc	s0,0x30
    80027c8e:	38744403          	lbu	s0,903(s0) # 80058011 <excpt+0x1>
    80027c92:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027c96:	4505                	li	a0,1
    80027c98:	a70d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c9c:	970d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027ca0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027ca4:	baad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ca8:	08200593          	li	a1,130
    80027cac:	00011617          	auipc	a2,0x11
    80027cb0:	2b460613          	addi	a2,a2,692 # 80038f60 <__func__.0+0xb078>
    80027cb4:	00006517          	auipc	a0,0x6
    80027cb8:	52c50513          	addi	a0,a0,1324 # 8002e1e0 <__func__.0+0x2f8>
    80027cbc:	76e030ef          	jal	8002b42a <printf>
    80027cc0:	00030797          	auipc	a5,0x30
    80027cc4:	3517c783          	lbu	a5,849(a5) # 80058011 <excpt+0x1>
    80027cc8:	00006597          	auipc	a1,0x6
    80027ccc:	4f058593          	addi	a1,a1,1264 # 8002e1b8 <__func__.0+0x2d0>
    80027cd0:	e789                	bnez	a5,80027cda <stateen_SE0_test_8+0x1be>
    80027cd2:	00006597          	auipc	a1,0x6
    80027cd6:	4d658593          	addi	a1,a1,1238 # 8002e1a8 <__func__.0+0x2c0>
    80027cda:	00006517          	auipc	a0,0x6
    80027cde:	51e50513          	addi	a0,a0,1310 # 8002e1f8 <__func__.0+0x310>
    80027ce2:	748030ef          	jal	8002b42a <printf>
    80027ce6:	00030797          	auipc	a5,0x30
    80027cea:	32b7c783          	lbu	a5,811(a5) # 80058011 <excpt+0x1>
    80027cee:	36079863          	bnez	a5,8002805e <stateen_SE0_test_8+0x542>
    80027cf2:	4529                	li	a0,10
    80027cf4:	424020ef          	jal	8002a118 <putchar>
    80027cf8:	c419                	beqz	s0,80027d06 <stateen_SE0_test_8+0x1ea>
    80027cfa:	00030417          	auipc	s0,0x30
    80027cfe:	31744403          	lbu	s0,791(s0) # 80058011 <excpt+0x1>
    80027d02:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027d06:	4511                	li	a0,4
    80027d08:	a00d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d0c:	900d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027d10:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027d14:	b3ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d18:	08200593          	li	a1,130
    80027d1c:	00011617          	auipc	a2,0x11
    80027d20:	29c60613          	addi	a2,a2,668 # 80038fb8 <__func__.0+0xb0d0>
    80027d24:	00006517          	auipc	a0,0x6
    80027d28:	4bc50513          	addi	a0,a0,1212 # 8002e1e0 <__func__.0+0x2f8>
    80027d2c:	6fe030ef          	jal	8002b42a <printf>
    80027d30:	00030797          	auipc	a5,0x30
    80027d34:	2e17c783          	lbu	a5,737(a5) # 80058011 <excpt+0x1>
    80027d38:	00006597          	auipc	a1,0x6
    80027d3c:	48058593          	addi	a1,a1,1152 # 8002e1b8 <__func__.0+0x2d0>
    80027d40:	e789                	bnez	a5,80027d4a <stateen_SE0_test_8+0x22e>
    80027d42:	00006597          	auipc	a1,0x6
    80027d46:	46658593          	addi	a1,a1,1126 # 8002e1a8 <__func__.0+0x2c0>
    80027d4a:	00006517          	auipc	a0,0x6
    80027d4e:	4ae50513          	addi	a0,a0,1198 # 8002e1f8 <__func__.0+0x310>
    80027d52:	6d8030ef          	jal	8002b42a <printf>
    80027d56:	00030797          	auipc	a5,0x30
    80027d5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    80027d5e:	2e079563          	bnez	a5,80028048 <stateen_SE0_test_8+0x52c>
    80027d62:	4529                	li	a0,10
    80027d64:	3b4020ef          	jal	8002a118 <putchar>
    80027d68:	c419                	beqz	s0,80027d76 <stateen_SE0_test_8+0x25a>
    80027d6a:	00030417          	auipc	s0,0x30
    80027d6e:	2a744403          	lbu	s0,679(s0) # 80058011 <excpt+0x1>
    80027d72:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027d76:	4511                	li	a0,4
    80027d78:	990d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d7c:	890d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027d80:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027d84:	acad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d88:	08200593          	li	a1,130
    80027d8c:	00011617          	auipc	a2,0x11
    80027d90:	27c60613          	addi	a2,a2,636 # 80039008 <__func__.0+0xb120>
    80027d94:	00006517          	auipc	a0,0x6
    80027d98:	44c50513          	addi	a0,a0,1100 # 8002e1e0 <__func__.0+0x2f8>
    80027d9c:	68e030ef          	jal	8002b42a <printf>
    80027da0:	00030797          	auipc	a5,0x30
    80027da4:	2717c783          	lbu	a5,625(a5) # 80058011 <excpt+0x1>
    80027da8:	00006597          	auipc	a1,0x6
    80027dac:	41058593          	addi	a1,a1,1040 # 8002e1b8 <__func__.0+0x2d0>
    80027db0:	e789                	bnez	a5,80027dba <stateen_SE0_test_8+0x29e>
    80027db2:	00006597          	auipc	a1,0x6
    80027db6:	3f658593          	addi	a1,a1,1014 # 8002e1a8 <__func__.0+0x2c0>
    80027dba:	00006517          	auipc	a0,0x6
    80027dbe:	43e50513          	addi	a0,a0,1086 # 8002e1f8 <__func__.0+0x310>
    80027dc2:	668030ef          	jal	8002b42a <printf>
    80027dc6:	00030797          	auipc	a5,0x30
    80027dca:	24b7c783          	lbu	a5,587(a5) # 80058011 <excpt+0x1>
    80027dce:	26079263          	bnez	a5,80028032 <stateen_SE0_test_8+0x516>
    80027dd2:	4529                	li	a0,10
    80027dd4:	344020ef          	jal	8002a118 <putchar>
    80027dd8:	c419                	beqz	s0,80027de6 <stateen_SE0_test_8+0x2ca>
    80027dda:	00030417          	auipc	s0,0x30
    80027dde:	23744403          	lbu	s0,567(s0) # 80058011 <excpt+0x1>
    80027de2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VS);
    80027de6:	4509                	li	a0,2
    80027de8:	920d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027dec:	820d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027df0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027df4:	a5ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027df8:	08200593          	li	a1,130
    80027dfc:	00011617          	auipc	a2,0x11
    80027e00:	f1460613          	addi	a2,a2,-236 # 80038d10 <__func__.0+0xae28>
    80027e04:	00006517          	auipc	a0,0x6
    80027e08:	3dc50513          	addi	a0,a0,988 # 8002e1e0 <__func__.0+0x2f8>
    80027e0c:	61e030ef          	jal	8002b42a <printf>
    80027e10:	00030797          	auipc	a5,0x30
    80027e14:	2017c783          	lbu	a5,513(a5) # 80058011 <excpt+0x1>
    80027e18:	00006597          	auipc	a1,0x6
    80027e1c:	3a058593          	addi	a1,a1,928 # 8002e1b8 <__func__.0+0x2d0>
    80027e20:	e789                	bnez	a5,80027e2a <stateen_SE0_test_8+0x30e>
    80027e22:	00006597          	auipc	a1,0x6
    80027e26:	38658593          	addi	a1,a1,902 # 8002e1a8 <__func__.0+0x2c0>
    80027e2a:	00006517          	auipc	a0,0x6
    80027e2e:	3ce50513          	addi	a0,a0,974 # 8002e1f8 <__func__.0+0x310>
    80027e32:	5f8030ef          	jal	8002b42a <printf>
    80027e36:	00030797          	auipc	a5,0x30
    80027e3a:	1db7c783          	lbu	a5,475(a5) # 80058011 <excpt+0x1>
    80027e3e:	1c079f63          	bnez	a5,8002801c <stateen_SE0_test_8+0x500>
    80027e42:	4529                	li	a0,10
    80027e44:	2d4020ef          	jal	8002a118 <putchar>
    80027e48:	c419                	beqz	s0,80027e56 <stateen_SE0_test_8+0x33a>
    80027e4a:	00030417          	auipc	s0,0x30
    80027e4e:	1c744403          	lbu	s0,455(s0) # 80058011 <excpt+0x1>
    80027e52:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027e56:	4509                	li	a0,2
    80027e58:	8b0d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e5c:	fb1d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027e60:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027e64:	9ead90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e68:	08200593          	li	a1,130
    80027e6c:	00011617          	auipc	a2,0x11
    80027e70:	ef460613          	addi	a2,a2,-268 # 80038d60 <__func__.0+0xae78>
    80027e74:	00006517          	auipc	a0,0x6
    80027e78:	36c50513          	addi	a0,a0,876 # 8002e1e0 <__func__.0+0x2f8>
    80027e7c:	5ae030ef          	jal	8002b42a <printf>
    80027e80:	00030797          	auipc	a5,0x30
    80027e84:	1917c783          	lbu	a5,401(a5) # 80058011 <excpt+0x1>
    80027e88:	00006597          	auipc	a1,0x6
    80027e8c:	33058593          	addi	a1,a1,816 # 8002e1b8 <__func__.0+0x2d0>
    80027e90:	e789                	bnez	a5,80027e9a <stateen_SE0_test_8+0x37e>
    80027e92:	00006597          	auipc	a1,0x6
    80027e96:	31658593          	addi	a1,a1,790 # 8002e1a8 <__func__.0+0x2c0>
    80027e9a:	00006517          	auipc	a0,0x6
    80027e9e:	35e50513          	addi	a0,a0,862 # 8002e1f8 <__func__.0+0x310>
    80027ea2:	588030ef          	jal	8002b42a <printf>
    80027ea6:	00030797          	auipc	a5,0x30
    80027eaa:	16b7c783          	lbu	a5,363(a5) # 80058011 <excpt+0x1>
    80027eae:	14079c63          	bnez	a5,80028006 <stateen_SE0_test_8+0x4ea>
    80027eb2:	4529                	li	a0,10
    80027eb4:	264020ef          	jal	8002a118 <putchar>
    80027eb8:	c419                	beqz	s0,80027ec6 <stateen_SE0_test_8+0x3aa>
    80027eba:	00030417          	auipc	s0,0x30
    80027ebe:	15744403          	lbu	s0,343(s0) # 80058011 <excpt+0x1>
    80027ec2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80027ec6:	450d                	li	a0,3
    80027ec8:	840d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ecc:	f41d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027ed0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027ed4:	97ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ed8:	08200593          	li	a1,130
    80027edc:	00011617          	auipc	a2,0x11
    80027ee0:	17c60613          	addi	a2,a2,380 # 80039058 <__func__.0+0xb170>
    80027ee4:	00006517          	auipc	a0,0x6
    80027ee8:	2fc50513          	addi	a0,a0,764 # 8002e1e0 <__func__.0+0x2f8>
    80027eec:	53e030ef          	jal	8002b42a <printf>
    80027ef0:	00030797          	auipc	a5,0x30
    80027ef4:	1217c783          	lbu	a5,289(a5) # 80058011 <excpt+0x1>
    80027ef8:	00006597          	auipc	a1,0x6
    80027efc:	2c058593          	addi	a1,a1,704 # 8002e1b8 <__func__.0+0x2d0>
    80027f00:	e789                	bnez	a5,80027f0a <stateen_SE0_test_8+0x3ee>
    80027f02:	00006597          	auipc	a1,0x6
    80027f06:	2a658593          	addi	a1,a1,678 # 8002e1a8 <__func__.0+0x2c0>
    80027f0a:	00006517          	auipc	a0,0x6
    80027f0e:	2ee50513          	addi	a0,a0,750 # 8002e1f8 <__func__.0+0x310>
    80027f12:	518030ef          	jal	8002b42a <printf>
    80027f16:	00030797          	auipc	a5,0x30
    80027f1a:	0fb7c783          	lbu	a5,251(a5) # 80058011 <excpt+0x1>
    80027f1e:	0c079963          	bnez	a5,80027ff0 <stateen_SE0_test_8+0x4d4>
    80027f22:	4529                	li	a0,10
    80027f24:	1f4020ef          	jal	8002a118 <putchar>
    80027f28:	c419                	beqz	s0,80027f36 <stateen_SE0_test_8+0x41a>
    80027f2a:	00030417          	auipc	s0,0x30
    80027f2e:	0e744403          	lbu	s0,231(s0) # 80058011 <excpt+0x1>
    80027f32:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80027f36:	450d                	li	a0,3
    80027f38:	fd1d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f3c:	ed1d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027f40:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027f44:	90ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f48:	08200593          	li	a1,130
    80027f4c:	00011617          	auipc	a2,0x11
    80027f50:	15c60613          	addi	a2,a2,348 # 800390a8 <__func__.0+0xb1c0>
    80027f54:	00006517          	auipc	a0,0x6
    80027f58:	28c50513          	addi	a0,a0,652 # 8002e1e0 <__func__.0+0x2f8>
    80027f5c:	4ce030ef          	jal	8002b42a <printf>
    80027f60:	00030797          	auipc	a5,0x30
    80027f64:	0b17c783          	lbu	a5,177(a5) # 80058011 <excpt+0x1>
    80027f68:	00006597          	auipc	a1,0x6
    80027f6c:	25058593          	addi	a1,a1,592 # 8002e1b8 <__func__.0+0x2d0>
    80027f70:	e789                	bnez	a5,80027f7a <stateen_SE0_test_8+0x45e>
    80027f72:	00006597          	auipc	a1,0x6
    80027f76:	23658593          	addi	a1,a1,566 # 8002e1a8 <__func__.0+0x2c0>
    80027f7a:	00006517          	auipc	a0,0x6
    80027f7e:	27e50513          	addi	a0,a0,638 # 8002e1f8 <__func__.0+0x310>
    80027f82:	4a8030ef          	jal	8002b42a <printf>
    80027f86:	00030797          	auipc	a5,0x30
    80027f8a:	08b7c783          	lbu	a5,139(a5) # 80058011 <excpt+0x1>
    80027f8e:	e7b1                	bnez	a5,80027fda <stateen_SE0_test_8+0x4be>
    80027f90:	4529                	li	a0,10
    80027f92:	186020ef          	jal	8002a118 <putchar>
    80027f96:	c411                	beqz	s0,80027fa2 <stateen_SE0_test_8+0x486>
    80027f98:	00030797          	auipc	a5,0x30
    80027f9c:	0797c783          	lbu	a5,121(a5) # 80058011 <excpt+0x1>
    80027fa0:	c79d                	beqz	a5,80027fce <stateen_SE0_test_8+0x4b2>
    80027fa2:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80027fa4:	00006597          	auipc	a1,0x6
    80027fa8:	21458593          	addi	a1,a1,532 # 8002e1b8 <__func__.0+0x2d0>
    80027fac:	00006517          	auipc	a0,0x6
    80027fb0:	2b450513          	addi	a0,a0,692 # 8002e260 <__func__.0+0x378>
    80027fb4:	476030ef          	jal	8002b42a <printf>
    80027fb8:	4511                	li	a0,4
    80027fba:	f4fd80ef          	jal	80000f08 <goto_priv>
    80027fbe:	867d90ef          	jal	80001824 <reset_state>

    80027fc2:	60e2                	ld	ra,24(sp)
    80027fc4:	8522                	mv	a0,s0
    80027fc6:	6442                	ld	s0,16(sp)
    80027fc8:	64a2                	ld	s1,8(sp)
    80027fca:	6105                	addi	sp,sp,32
    80027fcc:	8082                	ret
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fce:	4405                	li	s0,1
    TEST_END();
    80027fd0:	00006597          	auipc	a1,0x6
    80027fd4:	1d858593          	addi	a1,a1,472 # 8002e1a8 <__func__.0+0x2c0>
    80027fd8:	bfd1                	j	80027fac <stateen_SE0_test_8+0x490>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fda:	00006517          	auipc	a0,0x6
    80027fde:	22650513          	addi	a0,a0,550 # 8002e200 <__func__.0+0x318>
    80027fe2:	448030ef          	jal	8002b42a <printf>
    80027fe6:	02900513          	li	a0,41
    80027fea:	12e020ef          	jal	8002a118 <putchar>
    80027fee:	b74d                	j	80027f90 <stateen_SE0_test_8+0x474>
    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ff0:	00006517          	auipc	a0,0x6
    80027ff4:	21050513          	addi	a0,a0,528 # 8002e200 <__func__.0+0x318>
    80027ff8:	432030ef          	jal	8002b42a <printf>
    80027ffc:	02900513          	li	a0,41
    80028000:	118020ef          	jal	8002a118 <putchar>
    80028004:	bf39                	j	80027f22 <stateen_SE0_test_8+0x406>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028006:	00006517          	auipc	a0,0x6
    8002800a:	1fa50513          	addi	a0,a0,506 # 8002e200 <__func__.0+0x318>
    8002800e:	41c030ef          	jal	8002b42a <printf>
    80028012:	02900513          	li	a0,41
    80028016:	102020ef          	jal	8002a118 <putchar>
    8002801a:	bd61                	j	80027eb2 <stateen_SE0_test_8+0x396>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002801c:	00006517          	auipc	a0,0x6
    80028020:	1e450513          	addi	a0,a0,484 # 8002e200 <__func__.0+0x318>
    80028024:	406030ef          	jal	8002b42a <printf>
    80028028:	02900513          	li	a0,41
    8002802c:	0ec020ef          	jal	8002a118 <putchar>
    80028030:	bd09                	j	80027e42 <stateen_SE0_test_8+0x326>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028032:	00006517          	auipc	a0,0x6
    80028036:	1ce50513          	addi	a0,a0,462 # 8002e200 <__func__.0+0x318>
    8002803a:	3f0030ef          	jal	8002b42a <printf>
    8002803e:	02900513          	li	a0,41
    80028042:	0d6020ef          	jal	8002a118 <putchar>
    80028046:	b371                	j	80027dd2 <stateen_SE0_test_8+0x2b6>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028048:	00006517          	auipc	a0,0x6
    8002804c:	1b850513          	addi	a0,a0,440 # 8002e200 <__func__.0+0x318>
    80028050:	3da030ef          	jal	8002b42a <printf>
    80028054:	02900513          	li	a0,41
    80028058:	0c0020ef          	jal	8002a118 <putchar>
    8002805c:	b319                	j	80027d62 <stateen_SE0_test_8+0x246>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002805e:	00006517          	auipc	a0,0x6
    80028062:	1a250513          	addi	a0,a0,418 # 8002e200 <__func__.0+0x318>
    80028066:	3c4030ef          	jal	8002b42a <printf>
    8002806a:	02900513          	li	a0,41
    8002806e:	0aa020ef          	jal	8002a118 <putchar>
    80028072:	b141                	j	80027cf2 <stateen_SE0_test_8+0x1d6>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028074:	00006517          	auipc	a0,0x6
    80028078:	18c50513          	addi	a0,a0,396 # 8002e200 <__func__.0+0x318>
    8002807c:	3ae030ef          	jal	8002b42a <printf>
    80028080:	02900513          	li	a0,41
    80028084:	094020ef          	jal	8002a118 <putchar>
    80028088:	beed                	j	80027c82 <stateen_SE0_test_8+0x166>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    8002808a:	00006517          	auipc	a0,0x6
    8002808e:	17650513          	addi	a0,a0,374 # 8002e200 <__func__.0+0x318>
    80028092:	398030ef          	jal	8002b42a <printf>
    80028096:	02900513          	li	a0,41
    8002809a:	07e020ef          	jal	8002a118 <putchar>
    8002809e:	be8d                	j	80027c10 <stateen_SE0_test_8+0xf4>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800280a0:	00006517          	auipc	a0,0x6
    800280a4:	16050513          	addi	a0,a0,352 # 8002e200 <__func__.0+0x318>
    800280a8:	382030ef          	jal	8002b42a <printf>
    800280ac:	02900513          	li	a0,41
    800280b0:	068020ef          	jal	8002a118 <putchar>
    800280b4:	bcf5                	j	80027bb0 <stateen_SE0_test_8+0x94>

00000000800280b6 <vec_vle_vse_func>:
#include <rvh_test.h>

bool vec_vle_vse_func(){
    800280b6:	7179                	addi	sp,sp,-48
    TEST_START();
    800280b8:	00006597          	auipc	a1,0x6
    800280bc:	c7858593          	addi	a1,a1,-904 # 8002dd30 <__func__.24>
    800280c0:	00006517          	auipc	a0,0x6
    800280c4:	10850513          	addi	a0,a0,264 # 8002e1c8 <__func__.0+0x2e0>
bool vec_vle_vse_func(){
    800280c8:	f406                	sd	ra,40(sp)
    800280ca:	f022                	sd	s0,32(sp)
    800280cc:	ec26                	sd	s1,24(sp)
    800280ce:	e84a                	sd	s2,16(sp)
    TEST_START();
    800280d0:	35a030ef          	jal	8002b42a <printf>
    800280d4:	4529                	li	a0,10
    800280d6:	042020ef          	jal	8002a118 <putchar>

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=1
    800280da:	20000793          	li	a5,512
    800280de:	3007a073          	csrs	mstatus,a5

    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    800280e2:	00011717          	auipc	a4,0x11
    800280e6:	04673703          	ld	a4,70(a4) # 80039128 <__func__.0+0xb240>
    uint8_t dest8[8] = {0}; 
    800280ea:	e402                	sd	zero,8(sp)
            : "t0", "memory" /* Clobbered registers */ \
        ); \
    }

// 定义具体的加载和存储指令函数（固定使用 v6 寄存器,其它v指令同固定）
LOAD_VECTOR_TO_REGISTER(vle8_to_v6, "vle8.v", uint8_t, 8);
    800280ec:	4421                	li	s0,8
    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    800280ee:	e03a                	sd	a4,0(sp)
    800280f0:	04100493          	li	s1,65
    800280f4:	809472d7          	vsetvl	t0,s0,s1
    800280f8:	02010307          	vle8.v	v6,(sp)

    int vl = 8;  // 向量长度

    // 调用向量加载和存储函数
    vle8_to_v6(src8, vl);
    excpt_info();
    800280fc:	f53d80ef          	jal	8000104e <excpt_info>
LOAD_VECTOR_TO_REGISTER(vle16_to_v6, "vle16.v", uint16_t, 16);
LOAD_VECTOR_TO_REGISTER(vle32_to_v6, "vle32.v", uint32_t, 32);
LOAD_VECTOR_TO_REGISTER(vle64_to_v6, "vle64.v", uint64_t, 64);

STORE_VECTOR_FROM_REGISTER(vse8_from_v6, "vse8.v", uint8_t, 8);
    80028100:	003c                	addi	a5,sp,8
    80028102:	809472d7          	vsetvl	t0,s0,s1
    80028106:	02078327          	vse8.v	v6,(a5)
    vse8_from_v6(dest8, vl);

    
    // 打印结果以验证
    printf("After vle8_v:\n");
    8002810a:	00011517          	auipc	a0,0x11
    8002810e:	ff650513          	addi	a0,a0,-10 # 80039100 <__func__.0+0xb218>
    80028112:	755020ef          	jal	8002b066 <puts>
    for (int i = 0; i < 8; i++) {
    80028116:	0024                	addi	s1,sp,8
    80028118:	4401                	li	s0,0
    8002811a:	4921                	li	s2,8
        printf("dest8[%d] = %u  ", i, dest8[i]);
    8002811c:	0004c603          	lbu	a2,0(s1)
    80028120:	85a2                	mv	a1,s0
    80028122:	00011517          	auipc	a0,0x11
    80028126:	fee50513          	addi	a0,a0,-18 # 80039110 <__func__.0+0xb228>
    for (int i = 0; i < 8; i++) {
    8002812a:	2405                	addiw	s0,s0,1
        printf("dest8[%d] = %u  ", i, dest8[i]);
    8002812c:	2fe030ef          	jal	8002b42a <printf>
    for (int i = 0; i < 8; i++) {
    80028130:	0485                	addi	s1,s1,1
    80028132:	ff2415e3          	bne	s0,s2,8002811c <vec_vle_vse_func+0x66>
    }
    printf("\n");
    80028136:	4529                	li	a0,10
    80028138:	7e1010ef          	jal	8002a118 <putchar>


    TEST_END();
    8002813c:	00006597          	auipc	a1,0x6
    80028140:	06c58593          	addi	a1,a1,108 # 8002e1a8 <__func__.0+0x2c0>
    80028144:	00006517          	auipc	a0,0x6
    80028148:	11c50513          	addi	a0,a0,284 # 8002e260 <__func__.0+0x378>
    8002814c:	2de030ef          	jal	8002b42a <printf>
    80028150:	4511                	li	a0,4
    80028152:	db7d80ef          	jal	80000f08 <goto_priv>
    80028156:	eced90ef          	jal	80001824 <reset_state>
}
    8002815a:	70a2                	ld	ra,40(sp)
    8002815c:	7402                	ld	s0,32(sp)
    8002815e:	64e2                	ld	s1,24(sp)
    80028160:	6942                	ld	s2,16(sp)
    80028162:	4505                	li	a0,1
    80028164:	6145                	addi	sp,sp,48
    80028166:	8082                	ret

0000000080028168 <vec_test_1>:



bool vec_test_1(){
    80028168:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8002816a:	00006597          	auipc	a1,0x6
    8002816e:	bde58593          	addi	a1,a1,-1058 # 8002dd48 <__func__.23>
    80028172:	00006517          	auipc	a0,0x6
    80028176:	05650513          	addi	a0,a0,86 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_1(){
    8002817a:	ec06                	sd	ra,24(sp)
    8002817c:	e822                	sd	s0,16(sp)
    8002817e:	e426                	sd	s1,8(sp)
    TEST_START();
    80028180:	2aa030ef          	jal	8002b42a <printf>
    80028184:	4529                	li	a0,10
    80028186:	793010ef          	jal	8002a118 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    8002818a:	20000713          	li	a4,512
    8002818e:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028192:	40000793          	li	a5,1024
    80028196:	3007b073          	csrc	mstatus,a5

static inline void set_vcpop_conditions(int vl, int sew, int lmull, int v0_init, int v2_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    8002819a:	46a1                	li	a3,8
    8002819c:	4645                	li	a2,17
    8002819e:	80c6f2d7          	vsetvl	t0,a3,a2
    800281a2:	5e00b057          	vmv.v.i	v0,1
    800281a6:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800281aa:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800281ae:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800281b2:	c5bd80ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    800281b6:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    800281ba:	e95d80ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800281be:	08200593          	li	a1,130
    800281c2:	00011617          	auipc	a2,0x11
    800281c6:	f7660613          	addi	a2,a2,-138 # 80039138 <__func__.0+0xb250>
    800281ca:	00006517          	auipc	a0,0x6
    800281ce:	01650513          	addi	a0,a0,22 # 8002e1e0 <__func__.0+0x2f8>
    800281d2:	258030ef          	jal	8002b42a <printf>
    800281d6:	00030797          	auipc	a5,0x30
    800281da:	e3b7c783          	lbu	a5,-453(a5) # 80058011 <excpt+0x1>
    800281de:	00030497          	auipc	s1,0x30
    800281e2:	e3248493          	addi	s1,s1,-462 # 80058010 <excpt>
    800281e6:	00006597          	auipc	a1,0x6
    800281ea:	fd258593          	addi	a1,a1,-46 # 8002e1b8 <__func__.0+0x2d0>
    800281ee:	cf89                	beqz	a5,80028208 <vec_test_1+0xa0>
    800281f0:	6498                	ld	a4,8(s1)
    800281f2:	4789                	li	a5,2
    800281f4:	00006597          	auipc	a1,0x6
    800281f8:	fb458593          	addi	a1,a1,-76 # 8002e1a8 <__func__.0+0x2c0>
    800281fc:	00f70663          	beq	a4,a5,80028208 <vec_test_1+0xa0>
    80028200:	00006597          	auipc	a1,0x6
    80028204:	fb858593          	addi	a1,a1,-72 # 8002e1b8 <__func__.0+0x2d0>
    80028208:	00006517          	auipc	a0,0x6
    8002820c:	ff050513          	addi	a0,a0,-16 # 8002e1f8 <__func__.0+0x310>
    80028210:	21a030ef          	jal	8002b42a <printf>
    80028214:	00030797          	auipc	a5,0x30
    80028218:	dfd7c783          	lbu	a5,-515(a5) # 80058011 <excpt+0x1>
    8002821c:	c789                	beqz	a5,80028226 <vec_test_1+0xbe>
    8002821e:	6498                	ld	a4,8(s1)
    80028220:	4789                	li	a5,2
    80028222:	00f70c63          	beq	a4,a5,8002823a <vec_test_1+0xd2>
    80028226:	00006517          	auipc	a0,0x6
    8002822a:	fda50513          	addi	a0,a0,-38 # 8002e200 <__func__.0+0x318>
    8002822e:	1fc030ef          	jal	8002b42a <printf>
    80028232:	02900513          	li	a0,41
    80028236:	6e3010ef          	jal	8002a118 <putchar>
    8002823a:	4529                	li	a0,10
    8002823c:	6dd010ef          	jal	8002a118 <putchar>
    80028240:	00030417          	auipc	s0,0x30
    80028244:	dd144403          	lbu	s0,-559(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028248:	00006597          	auipc	a1,0x6
    8002824c:	f7058593          	addi	a1,a1,-144 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    80028250:	cc11                	beqz	s0,8002826c <vec_test_1+0x104>
    80028252:	6498                	ld	a4,8(s1)
    80028254:	4789                	li	a5,2
    TEST_END();
    80028256:	00006597          	auipc	a1,0x6
    8002825a:	f5258593          	addi	a1,a1,-174 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    8002825e:	00f70763          	beq	a4,a5,8002826c <vec_test_1+0x104>
    80028262:	4401                	li	s0,0
    TEST_END();
    80028264:	00006597          	auipc	a1,0x6
    80028268:	f5458593          	addi	a1,a1,-172 # 8002e1b8 <__func__.0+0x2d0>
    8002826c:	00006517          	auipc	a0,0x6
    80028270:	ff450513          	addi	a0,a0,-12 # 8002e260 <__func__.0+0x378>
    80028274:	1b6030ef          	jal	8002b42a <printf>
    80028278:	4511                	li	a0,4
    8002827a:	c8fd80ef          	jal	80000f08 <goto_priv>
    8002827e:	da6d90ef          	jal	80001824 <reset_state>
}
    80028282:	60e2                	ld	ra,24(sp)
    80028284:	8522                	mv	a0,s0
    80028286:	6442                	ld	s0,16(sp)
    80028288:	64a2                	ld	s1,8(sp)
    8002828a:	6105                	addi	sp,sp,32
    8002828c:	8082                	ret

000000008002828e <vec_test_2>:

bool vec_test_2(){
    8002828e:	1101                	addi	sp,sp,-32

    TEST_START();
    80028290:	00006597          	auipc	a1,0x6
    80028294:	ac858593          	addi	a1,a1,-1336 # 8002dd58 <__func__.22>
    80028298:	00006517          	auipc	a0,0x6
    8002829c:	f3050513          	addi	a0,a0,-208 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_2(){
    800282a0:	ec06                	sd	ra,24(sp)
    800282a2:	e822                	sd	s0,16(sp)
    800282a4:	e426                	sd	s1,8(sp)
    TEST_START();
    800282a6:	184030ef          	jal	8002b42a <printf>
    800282aa:	4529                	li	a0,10
    800282ac:	66d010ef          	jal	8002a118 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800282b0:	20000793          	li	a5,512
    800282b4:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282b8:	40000793          	li	a5,1024
    800282bc:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800282c0:	b4dd80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTART);
    800282c4:	008027f3          	csrr	a5,vstart
    excpt_info();
    800282c8:	d87d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800282cc:	08200593          	li	a1,130
    800282d0:	00011617          	auipc	a2,0x11
    800282d4:	eb860613          	addi	a2,a2,-328 # 80039188 <__func__.0+0xb2a0>
    800282d8:	00006517          	auipc	a0,0x6
    800282dc:	f0850513          	addi	a0,a0,-248 # 8002e1e0 <__func__.0+0x2f8>
    800282e0:	14a030ef          	jal	8002b42a <printf>
    800282e4:	00030797          	auipc	a5,0x30
    800282e8:	d2d7c783          	lbu	a5,-723(a5) # 80058011 <excpt+0x1>
    800282ec:	00030497          	auipc	s1,0x30
    800282f0:	d2448493          	addi	s1,s1,-732 # 80058010 <excpt>
    800282f4:	00006597          	auipc	a1,0x6
    800282f8:	ec458593          	addi	a1,a1,-316 # 8002e1b8 <__func__.0+0x2d0>
    800282fc:	cf89                	beqz	a5,80028316 <vec_test_2+0x88>
    800282fe:	6498                	ld	a4,8(s1)
    80028300:	4789                	li	a5,2
    80028302:	00006597          	auipc	a1,0x6
    80028306:	ea658593          	addi	a1,a1,-346 # 8002e1a8 <__func__.0+0x2c0>
    8002830a:	00f70663          	beq	a4,a5,80028316 <vec_test_2+0x88>
    8002830e:	00006597          	auipc	a1,0x6
    80028312:	eaa58593          	addi	a1,a1,-342 # 8002e1b8 <__func__.0+0x2d0>
    80028316:	00006517          	auipc	a0,0x6
    8002831a:	ee250513          	addi	a0,a0,-286 # 8002e1f8 <__func__.0+0x310>
    8002831e:	10c030ef          	jal	8002b42a <printf>
    80028322:	00030797          	auipc	a5,0x30
    80028326:	cef7c783          	lbu	a5,-785(a5) # 80058011 <excpt+0x1>
    8002832a:	c789                	beqz	a5,80028334 <vec_test_2+0xa6>
    8002832c:	6498                	ld	a4,8(s1)
    8002832e:	4789                	li	a5,2
    80028330:	00f70c63          	beq	a4,a5,80028348 <vec_test_2+0xba>
    80028334:	00006517          	auipc	a0,0x6
    80028338:	ecc50513          	addi	a0,a0,-308 # 8002e200 <__func__.0+0x318>
    8002833c:	0ee030ef          	jal	8002b42a <printf>
    80028340:	02900513          	li	a0,41
    80028344:	5d5010ef          	jal	8002a118 <putchar>
    80028348:	4529                	li	a0,10
    8002834a:	5cf010ef          	jal	8002a118 <putchar>
    8002834e:	00030417          	auipc	s0,0x30
    80028352:	cc344403          	lbu	s0,-829(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028356:	00006597          	auipc	a1,0x6
    8002835a:	e6258593          	addi	a1,a1,-414 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    8002835e:	cc11                	beqz	s0,8002837a <vec_test_2+0xec>
    80028360:	6498                	ld	a4,8(s1)
    80028362:	4789                	li	a5,2
    TEST_END();
    80028364:	00006597          	auipc	a1,0x6
    80028368:	e4458593          	addi	a1,a1,-444 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    8002836c:	00f70763          	beq	a4,a5,8002837a <vec_test_2+0xec>
    80028370:	4401                	li	s0,0
    TEST_END();
    80028372:	00006597          	auipc	a1,0x6
    80028376:	e4658593          	addi	a1,a1,-442 # 8002e1b8 <__func__.0+0x2d0>
    8002837a:	00006517          	auipc	a0,0x6
    8002837e:	ee650513          	addi	a0,a0,-282 # 8002e260 <__func__.0+0x378>
    80028382:	0a8030ef          	jal	8002b42a <printf>
    80028386:	4511                	li	a0,4
    80028388:	b81d80ef          	jal	80000f08 <goto_priv>
    8002838c:	c98d90ef          	jal	80001824 <reset_state>
}
    80028390:	60e2                	ld	ra,24(sp)
    80028392:	8522                	mv	a0,s0
    80028394:	6442                	ld	s0,16(sp)
    80028396:	64a2                	ld	s1,8(sp)
    80028398:	6105                	addi	sp,sp,32
    8002839a:	8082                	ret

000000008002839c <vec_test_3>:


bool vec_test_3(){             
    8002839c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002839e:	00006597          	auipc	a1,0x6
    800283a2:	9ca58593          	addi	a1,a1,-1590 # 8002dd68 <__func__.21>
    800283a6:	00006517          	auipc	a0,0x6
    800283aa:	e2250513          	addi	a0,a0,-478 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_3(){             
    800283ae:	ec06                	sd	ra,24(sp)
    800283b0:	e822                	sd	s0,16(sp)
    800283b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800283b4:	076030ef          	jal	8002b42a <printf>
    800283b8:	4529                	li	a0,10
    800283ba:	55f010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800283be:	20000713          	li	a4,512
    800283c2:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800283c6:	40000793          	li	a5,1024
    800283ca:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800283ce:	4689                	li	a3,2
    800283d0:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    800283d4:	5e00b057          	vmv.v.i	v0,1
    800283d8:	5e003257          	vmv.v.i	v4,0
    800283dc:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1

    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800283e0:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800283e4:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800283e8:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800283ec:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800283f0:	4509                	li	a0,2
    800283f2:	b17d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800283f6:	a17d80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800283fa:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    800283fe:	c51d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    80028402:	08200593          	li	a1,130
    80028406:	00011617          	auipc	a2,0x11
    8002840a:	dca60613          	addi	a2,a2,-566 # 800391d0 <__func__.0+0xb2e8>
    8002840e:	00006517          	auipc	a0,0x6
    80028412:	dd250513          	addi	a0,a0,-558 # 8002e1e0 <__func__.0+0x2f8>
    80028416:	014030ef          	jal	8002b42a <printf>
    8002841a:	00030797          	auipc	a5,0x30
    8002841e:	bf77c783          	lbu	a5,-1033(a5) # 80058011 <excpt+0x1>
    80028422:	00030497          	auipc	s1,0x30
    80028426:	bee48493          	addi	s1,s1,-1042 # 80058010 <excpt>
    8002842a:	00006597          	auipc	a1,0x6
    8002842e:	d8e58593          	addi	a1,a1,-626 # 8002e1b8 <__func__.0+0x2d0>
    80028432:	cf89                	beqz	a5,8002844c <vec_test_3+0xb0>
    80028434:	6498                	ld	a4,8(s1)
    80028436:	4789                	li	a5,2
    80028438:	00006597          	auipc	a1,0x6
    8002843c:	d7058593          	addi	a1,a1,-656 # 8002e1a8 <__func__.0+0x2c0>
    80028440:	00f70663          	beq	a4,a5,8002844c <vec_test_3+0xb0>
    80028444:	00006597          	auipc	a1,0x6
    80028448:	d7458593          	addi	a1,a1,-652 # 8002e1b8 <__func__.0+0x2d0>
    8002844c:	00006517          	auipc	a0,0x6
    80028450:	dac50513          	addi	a0,a0,-596 # 8002e1f8 <__func__.0+0x310>
    80028454:	7d7020ef          	jal	8002b42a <printf>
    80028458:	00030797          	auipc	a5,0x30
    8002845c:	bb97c783          	lbu	a5,-1095(a5) # 80058011 <excpt+0x1>
    80028460:	c789                	beqz	a5,8002846a <vec_test_3+0xce>
    80028462:	6498                	ld	a4,8(s1)
    80028464:	4789                	li	a5,2
    80028466:	00f70c63          	beq	a4,a5,8002847e <vec_test_3+0xe2>
    8002846a:	00006517          	auipc	a0,0x6
    8002846e:	d9650513          	addi	a0,a0,-618 # 8002e200 <__func__.0+0x318>
    80028472:	7b9020ef          	jal	8002b42a <printf>
    80028476:	02900513          	li	a0,41
    8002847a:	49f010ef          	jal	8002a118 <putchar>
    8002847e:	4529                	li	a0,10
    80028480:	499010ef          	jal	8002a118 <putchar>
    80028484:	00030417          	auipc	s0,0x30
    80028488:	b8d44403          	lbu	s0,-1139(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002848c:	00006597          	auipc	a1,0x6
    80028490:	d2c58593          	addi	a1,a1,-724 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    80028494:	cc11                	beqz	s0,800284b0 <vec_test_3+0x114>
    80028496:	6498                	ld	a4,8(s1)
    80028498:	4789                	li	a5,2
    TEST_END();
    8002849a:	00006597          	auipc	a1,0x6
    8002849e:	d0e58593          	addi	a1,a1,-754 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800284a2:	00f70763          	beq	a4,a5,800284b0 <vec_test_3+0x114>
    800284a6:	4401                	li	s0,0
    TEST_END();
    800284a8:	00006597          	auipc	a1,0x6
    800284ac:	d1058593          	addi	a1,a1,-752 # 8002e1b8 <__func__.0+0x2d0>
    800284b0:	00006517          	auipc	a0,0x6
    800284b4:	db050513          	addi	a0,a0,-592 # 8002e260 <__func__.0+0x378>
    800284b8:	773020ef          	jal	8002b42a <printf>
    800284bc:	4511                	li	a0,4
    800284be:	a4bd80ef          	jal	80000f08 <goto_priv>
    800284c2:	b62d90ef          	jal	80001824 <reset_state>
}
    800284c6:	60e2                	ld	ra,24(sp)
    800284c8:	8522                	mv	a0,s0
    800284ca:	6442                	ld	s0,16(sp)
    800284cc:	64a2                	ld	s1,8(sp)
    800284ce:	6105                	addi	sp,sp,32
    800284d0:	8082                	ret

00000000800284d2 <vec_test_4>:


bool vec_test_4(){
    800284d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800284d4:	00006597          	auipc	a1,0x6
    800284d8:	8a458593          	addi	a1,a1,-1884 # 8002dd78 <__func__.20>
    800284dc:	00006517          	auipc	a0,0x6
    800284e0:	cec50513          	addi	a0,a0,-788 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_4(){
    800284e4:	ec06                	sd	ra,24(sp)
    800284e6:	e822                	sd	s0,16(sp)
    800284e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800284ea:	741020ef          	jal	8002b42a <printf>
    800284ee:	4529                	li	a0,10
    800284f0:	429010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试访问向量 CSR 

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=!0
    800284f4:	20000713          	li	a4,512
    800284f8:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800284fc:	40000793          	li	a5,1024
    80028500:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028504:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028508:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8002850c:	4509                	li	a0,2
    8002850e:	9fbd80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028512:	8fbd80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VTYPE);
    80028516:	c21027f3          	csrr	a5,vtype
    excpt_info();
    8002851a:	b35d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    8002851e:	08200593          	li	a1,130
    80028522:	00011617          	auipc	a2,0x11
    80028526:	d0e60613          	addi	a2,a2,-754 # 80039230 <__func__.0+0xb348>
    8002852a:	00006517          	auipc	a0,0x6
    8002852e:	cb650513          	addi	a0,a0,-842 # 8002e1e0 <__func__.0+0x2f8>
    80028532:	6f9020ef          	jal	8002b42a <printf>
    80028536:	00030797          	auipc	a5,0x30
    8002853a:	adb7c783          	lbu	a5,-1317(a5) # 80058011 <excpt+0x1>
    8002853e:	00030497          	auipc	s1,0x30
    80028542:	ad248493          	addi	s1,s1,-1326 # 80058010 <excpt>
    80028546:	00006597          	auipc	a1,0x6
    8002854a:	c7258593          	addi	a1,a1,-910 # 8002e1b8 <__func__.0+0x2d0>
    8002854e:	cf89                	beqz	a5,80028568 <vec_test_4+0x96>
    80028550:	6498                	ld	a4,8(s1)
    80028552:	4789                	li	a5,2
    80028554:	00006597          	auipc	a1,0x6
    80028558:	c5458593          	addi	a1,a1,-940 # 8002e1a8 <__func__.0+0x2c0>
    8002855c:	00f70663          	beq	a4,a5,80028568 <vec_test_4+0x96>
    80028560:	00006597          	auipc	a1,0x6
    80028564:	c5858593          	addi	a1,a1,-936 # 8002e1b8 <__func__.0+0x2d0>
    80028568:	00006517          	auipc	a0,0x6
    8002856c:	c9050513          	addi	a0,a0,-880 # 8002e1f8 <__func__.0+0x310>
    80028570:	6bb020ef          	jal	8002b42a <printf>
    80028574:	00030797          	auipc	a5,0x30
    80028578:	a9d7c783          	lbu	a5,-1379(a5) # 80058011 <excpt+0x1>
    8002857c:	c789                	beqz	a5,80028586 <vec_test_4+0xb4>
    8002857e:	6498                	ld	a4,8(s1)
    80028580:	4789                	li	a5,2
    80028582:	00f70c63          	beq	a4,a5,8002859a <vec_test_4+0xc8>
    80028586:	00006517          	auipc	a0,0x6
    8002858a:	c7a50513          	addi	a0,a0,-902 # 8002e200 <__func__.0+0x318>
    8002858e:	69d020ef          	jal	8002b42a <printf>
    80028592:	02900513          	li	a0,41
    80028596:	383010ef          	jal	8002a118 <putchar>
    8002859a:	4529                	li	a0,10
    8002859c:	37d010ef          	jal	8002a118 <putchar>
    800285a0:	00030417          	auipc	s0,0x30
    800285a4:	a7144403          	lbu	s0,-1423(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800285a8:	00006597          	auipc	a1,0x6
    800285ac:	c1058593          	addi	a1,a1,-1008 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800285b0:	cc11                	beqz	s0,800285cc <vec_test_4+0xfa>
    800285b2:	6498                	ld	a4,8(s1)
    800285b4:	4789                	li	a5,2
    TEST_END();
    800285b6:	00006597          	auipc	a1,0x6
    800285ba:	bf258593          	addi	a1,a1,-1038 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800285be:	00f70763          	beq	a4,a5,800285cc <vec_test_4+0xfa>
    800285c2:	4401                	li	s0,0
    TEST_END();
    800285c4:	00006597          	auipc	a1,0x6
    800285c8:	bf458593          	addi	a1,a1,-1036 # 8002e1b8 <__func__.0+0x2d0>
    800285cc:	00006517          	auipc	a0,0x6
    800285d0:	c9450513          	addi	a0,a0,-876 # 8002e260 <__func__.0+0x378>
    800285d4:	657020ef          	jal	8002b42a <printf>
    800285d8:	4511                	li	a0,4
    800285da:	92fd80ef          	jal	80000f08 <goto_priv>
    800285de:	a46d90ef          	jal	80001824 <reset_state>
}
    800285e2:	60e2                	ld	ra,24(sp)
    800285e4:	8522                	mv	a0,s0
    800285e6:	6442                	ld	s0,16(sp)
    800285e8:	64a2                	ld	s1,8(sp)
    800285ea:	6105                	addi	sp,sp,32
    800285ec:	8082                	ret

00000000800285ee <vec_test_5>:

bool vec_test_5(){          
    800285ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800285f0:	00005597          	auipc	a1,0x5
    800285f4:	79858593          	addi	a1,a1,1944 # 8002dd88 <__func__.19>
    800285f8:	00006517          	auipc	a0,0x6
    800285fc:	bd050513          	addi	a0,a0,-1072 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_5(){          
    80028600:	ec06                	sd	ra,24(sp)
    80028602:	e426                	sd	s1,8(sp)
    80028604:	e822                	sd	s0,16(sp)
    TEST_START();
    80028606:	625020ef          	jal	8002b42a <printf>
    8002860a:	4529                	li	a0,10
    8002860c:	30d010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028610:	20000493          	li	s1,512
    80028614:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028618:	40000413          	li	s0,1024
    8002861c:	30042073          	csrs	mstatus,s0
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80028620:	fecd80ef          	jal	80000e0c <test_setup_except_function>
// 设置 vfirst.m 执行条件
static inline void set_vfirst_m_conditions(int sew, int lmull, int vl, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028624:	4785                	li	a5,1
    80028626:	4749                	li	a4,18
    80028628:	80e7f2d7          	vsetvl	t0,a5,a4
    8002862c:	5e00b057          	vmv.v.i	v0,1
    80028630:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    80028634:	a1bd80ef          	jal	8000104e <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028638:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002863c:	30043073          	csrc	mstatus,s0
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80028640:	2004a073          	csrs	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028644:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    80028648:	4509                	li	a0,2
    8002864a:	8bfd80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002864e:	fbed80ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    80028652:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80028656:	9f9d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    8002865a:	08200593          	li	a1,130
    8002865e:	00011617          	auipc	a2,0x11
    80028662:	c3260613          	addi	a2,a2,-974 # 80039290 <__func__.0+0xb3a8>
    80028666:	00006517          	auipc	a0,0x6
    8002866a:	b7a50513          	addi	a0,a0,-1158 # 8002e1e0 <__func__.0+0x2f8>
    8002866e:	5bd020ef          	jal	8002b42a <printf>
    80028672:	00030797          	auipc	a5,0x30
    80028676:	99f7c783          	lbu	a5,-1633(a5) # 80058011 <excpt+0x1>
    8002867a:	00030497          	auipc	s1,0x30
    8002867e:	99648493          	addi	s1,s1,-1642 # 80058010 <excpt>
    80028682:	00006597          	auipc	a1,0x6
    80028686:	b3658593          	addi	a1,a1,-1226 # 8002e1b8 <__func__.0+0x2d0>
    8002868a:	cf89                	beqz	a5,800286a4 <vec_test_5+0xb6>
    8002868c:	6498                	ld	a4,8(s1)
    8002868e:	4789                	li	a5,2
    80028690:	00006597          	auipc	a1,0x6
    80028694:	b1858593          	addi	a1,a1,-1256 # 8002e1a8 <__func__.0+0x2c0>
    80028698:	00f70663          	beq	a4,a5,800286a4 <vec_test_5+0xb6>
    8002869c:	00006597          	auipc	a1,0x6
    800286a0:	b1c58593          	addi	a1,a1,-1252 # 8002e1b8 <__func__.0+0x2d0>
    800286a4:	00006517          	auipc	a0,0x6
    800286a8:	b5450513          	addi	a0,a0,-1196 # 8002e1f8 <__func__.0+0x310>
    800286ac:	57f020ef          	jal	8002b42a <printf>
    800286b0:	00030797          	auipc	a5,0x30
    800286b4:	9617c783          	lbu	a5,-1695(a5) # 80058011 <excpt+0x1>
    800286b8:	c789                	beqz	a5,800286c2 <vec_test_5+0xd4>
    800286ba:	6498                	ld	a4,8(s1)
    800286bc:	4789                	li	a5,2
    800286be:	00f70c63          	beq	a4,a5,800286d6 <vec_test_5+0xe8>
    800286c2:	00006517          	auipc	a0,0x6
    800286c6:	b3e50513          	addi	a0,a0,-1218 # 8002e200 <__func__.0+0x318>
    800286ca:	561020ef          	jal	8002b42a <printf>
    800286ce:	02900513          	li	a0,41
    800286d2:	247010ef          	jal	8002a118 <putchar>
    800286d6:	4529                	li	a0,10
    800286d8:	241010ef          	jal	8002a118 <putchar>
    800286dc:	00030417          	auipc	s0,0x30
    800286e0:	93544403          	lbu	s0,-1739(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800286e4:	00006597          	auipc	a1,0x6
    800286e8:	ad458593          	addi	a1,a1,-1324 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    800286ec:	cc11                	beqz	s0,80028708 <vec_test_5+0x11a>
    800286ee:	6498                	ld	a4,8(s1)
    800286f0:	4789                	li	a5,2
    TEST_END();
    800286f2:	00006597          	auipc	a1,0x6
    800286f6:	ab658593          	addi	a1,a1,-1354 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    800286fa:	00f70763          	beq	a4,a5,80028708 <vec_test_5+0x11a>
    800286fe:	4401                	li	s0,0
    TEST_END();
    80028700:	00006597          	auipc	a1,0x6
    80028704:	ab858593          	addi	a1,a1,-1352 # 8002e1b8 <__func__.0+0x2d0>
    80028708:	00006517          	auipc	a0,0x6
    8002870c:	b5850513          	addi	a0,a0,-1192 # 8002e260 <__func__.0+0x378>
    80028710:	51b020ef          	jal	8002b42a <printf>
    80028714:	4511                	li	a0,4
    80028716:	ff2d80ef          	jal	80000f08 <goto_priv>
    8002871a:	90ad90ef          	jal	80001824 <reset_state>
}
    8002871e:	60e2                	ld	ra,24(sp)
    80028720:	8522                	mv	a0,s0
    80028722:	6442                	ld	s0,16(sp)
    80028724:	64a2                	ld	s1,8(sp)
    80028726:	6105                	addi	sp,sp,32
    80028728:	8082                	ret

000000008002872a <vec_test_6>:


bool vec_test_6(){
    8002872a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002872c:	00005597          	auipc	a1,0x5
    80028730:	66c58593          	addi	a1,a1,1644 # 8002dd98 <__func__.18>
    80028734:	00006517          	auipc	a0,0x6
    80028738:	a9450513          	addi	a0,a0,-1388 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_6(){
    8002873c:	ec06                	sd	ra,24(sp)
    8002873e:	e822                	sd	s0,16(sp)
    80028740:	e426                	sd	s1,8(sp)
    TEST_START();
    80028742:	4e9020ef          	jal	8002b42a <printf>
    80028746:	4529                	li	a0,10
    80028748:	1d1010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    8002874c:	20000713          	li	a4,512
    80028750:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028754:	40000793          	li	a5,1024
    80028758:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    8002875c:	20072073          	csrs	vsstatus,a4
    CSRS(CSR_VSSTATUS, 1ULL << 10); 
    80028760:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80028764:	4509                	li	a0,2
    80028766:	fa2d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002876a:	ea2d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXSAT);
    8002876e:	009027f3          	csrr	a5,vxsat
    excpt_info();
    80028772:	8ddd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028776:	08200593          	li	a1,130
    8002877a:	00011617          	auipc	a2,0x11
    8002877e:	b7660613          	addi	a2,a2,-1162 # 800392f0 <__func__.0+0xb408>
    80028782:	00006517          	auipc	a0,0x6
    80028786:	a5e50513          	addi	a0,a0,-1442 # 8002e1e0 <__func__.0+0x2f8>
    8002878a:	4a1020ef          	jal	8002b42a <printf>
    8002878e:	00030797          	auipc	a5,0x30
    80028792:	8837c783          	lbu	a5,-1917(a5) # 80058011 <excpt+0x1>
    80028796:	00030497          	auipc	s1,0x30
    8002879a:	87a48493          	addi	s1,s1,-1926 # 80058010 <excpt>
    8002879e:	00006597          	auipc	a1,0x6
    800287a2:	a1a58593          	addi	a1,a1,-1510 # 8002e1b8 <__func__.0+0x2d0>
    800287a6:	cf89                	beqz	a5,800287c0 <vec_test_6+0x96>
    800287a8:	6498                	ld	a4,8(s1)
    800287aa:	4789                	li	a5,2
    800287ac:	00006597          	auipc	a1,0x6
    800287b0:	9fc58593          	addi	a1,a1,-1540 # 8002e1a8 <__func__.0+0x2c0>
    800287b4:	00f70663          	beq	a4,a5,800287c0 <vec_test_6+0x96>
    800287b8:	00006597          	auipc	a1,0x6
    800287bc:	a0058593          	addi	a1,a1,-1536 # 8002e1b8 <__func__.0+0x2d0>
    800287c0:	00006517          	auipc	a0,0x6
    800287c4:	a3850513          	addi	a0,a0,-1480 # 8002e1f8 <__func__.0+0x310>
    800287c8:	463020ef          	jal	8002b42a <printf>
    800287cc:	00030797          	auipc	a5,0x30
    800287d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    800287d4:	c789                	beqz	a5,800287de <vec_test_6+0xb4>
    800287d6:	6498                	ld	a4,8(s1)
    800287d8:	4789                	li	a5,2
    800287da:	00f70c63          	beq	a4,a5,800287f2 <vec_test_6+0xc8>
    800287de:	00006517          	auipc	a0,0x6
    800287e2:	a2250513          	addi	a0,a0,-1502 # 8002e200 <__func__.0+0x318>
    800287e6:	445020ef          	jal	8002b42a <printf>
    800287ea:	02900513          	li	a0,41
    800287ee:	12b010ef          	jal	8002a118 <putchar>
    800287f2:	4529                	li	a0,10
    800287f4:	125010ef          	jal	8002a118 <putchar>
    800287f8:	00030417          	auipc	s0,0x30
    800287fc:	81944403          	lbu	s0,-2023(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028800:	00006597          	auipc	a1,0x6
    80028804:	9b858593          	addi	a1,a1,-1608 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028808:	cc11                	beqz	s0,80028824 <vec_test_6+0xfa>
    8002880a:	6498                	ld	a4,8(s1)
    8002880c:	4789                	li	a5,2
    TEST_END();
    8002880e:	00006597          	auipc	a1,0x6
    80028812:	99a58593          	addi	a1,a1,-1638 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028816:	00f70763          	beq	a4,a5,80028824 <vec_test_6+0xfa>
    8002881a:	4401                	li	s0,0
    TEST_END();
    8002881c:	00006597          	auipc	a1,0x6
    80028820:	99c58593          	addi	a1,a1,-1636 # 8002e1b8 <__func__.0+0x2d0>
    80028824:	00006517          	auipc	a0,0x6
    80028828:	a3c50513          	addi	a0,a0,-1476 # 8002e260 <__func__.0+0x378>
    8002882c:	3ff020ef          	jal	8002b42a <printf>
    80028830:	4511                	li	a0,4
    80028832:	ed6d80ef          	jal	80000f08 <goto_priv>
    80028836:	fefd80ef          	jal	80001824 <reset_state>
}
    8002883a:	60e2                	ld	ra,24(sp)
    8002883c:	8522                	mv	a0,s0
    8002883e:	6442                	ld	s0,16(sp)
    80028840:	64a2                	ld	s1,8(sp)
    80028842:	6105                	addi	sp,sp,32
    80028844:	8082                	ret

0000000080028846 <vec_test_7>:

bool vec_test_7(){
    80028846:	1101                	addi	sp,sp,-32

    TEST_START();
    80028848:	00005597          	auipc	a1,0x5
    8002884c:	56058593          	addi	a1,a1,1376 # 8002dda8 <__func__.17>
    80028850:	00006517          	auipc	a0,0x6
    80028854:	97850513          	addi	a0,a0,-1672 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_7(){
    80028858:	ec06                	sd	ra,24(sp)
    8002885a:	e822                	sd	s0,16(sp)
    8002885c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002885e:	3cd020ef          	jal	8002b42a <printf>
    80028862:	4529                	li	a0,10
    80028864:	0b5010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028868:	20000713          	li	a4,512
    8002886c:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028870:	40000793          	li	a5,1024
    80028874:	3007a073          	csrs	mstatus,a5
// 设置执行 vmsbf.m 指令条件，包括向量长度、掩码寄存器和源寄存器
static inline void set_vmsbfm_conditions(int vl, int sew, int lmull, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    80028878:	46a1                	li	a3,8
    8002887a:	4645                	li	a2,17
    8002887c:	80c6f2d7          	vsetvl	t0,a3,a2
    80028880:	5e00b057          	vmv.v.i	v0,1
    80028884:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028888:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002888c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028890:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028894:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028898:	4509                	li	a0,2
    8002889a:	e6ed80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002889e:	d6ed80ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vmsbf.m 指令
static inline void execute_vmsbf_m() {
    asm volatile (
    800288a2:	5040a1d7          	vmsbf.m	v3,v4,v0.t

    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800288a6:	fa8d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800288aa:	08200593          	li	a1,130
    800288ae:	00011617          	auipc	a2,0x11
    800288b2:	aa260613          	addi	a2,a2,-1374 # 80039350 <__func__.0+0xb468>
    800288b6:	00006517          	auipc	a0,0x6
    800288ba:	92a50513          	addi	a0,a0,-1750 # 8002e1e0 <__func__.0+0x2f8>
    800288be:	36d020ef          	jal	8002b42a <printf>
    800288c2:	0002f797          	auipc	a5,0x2f
    800288c6:	74f7c783          	lbu	a5,1871(a5) # 80058011 <excpt+0x1>
    800288ca:	0002f497          	auipc	s1,0x2f
    800288ce:	74648493          	addi	s1,s1,1862 # 80058010 <excpt>
    800288d2:	00006597          	auipc	a1,0x6
    800288d6:	8e658593          	addi	a1,a1,-1818 # 8002e1b8 <__func__.0+0x2d0>
    800288da:	cf89                	beqz	a5,800288f4 <vec_test_7+0xae>
    800288dc:	6498                	ld	a4,8(s1)
    800288de:	4789                	li	a5,2
    800288e0:	00006597          	auipc	a1,0x6
    800288e4:	8c858593          	addi	a1,a1,-1848 # 8002e1a8 <__func__.0+0x2c0>
    800288e8:	00f70663          	beq	a4,a5,800288f4 <vec_test_7+0xae>
    800288ec:	00006597          	auipc	a1,0x6
    800288f0:	8cc58593          	addi	a1,a1,-1844 # 8002e1b8 <__func__.0+0x2d0>
    800288f4:	00006517          	auipc	a0,0x6
    800288f8:	90450513          	addi	a0,a0,-1788 # 8002e1f8 <__func__.0+0x310>
    800288fc:	32f020ef          	jal	8002b42a <printf>
    80028900:	0002f797          	auipc	a5,0x2f
    80028904:	7117c783          	lbu	a5,1809(a5) # 80058011 <excpt+0x1>
    80028908:	c789                	beqz	a5,80028912 <vec_test_7+0xcc>
    8002890a:	6498                	ld	a4,8(s1)
    8002890c:	4789                	li	a5,2
    8002890e:	00f70c63          	beq	a4,a5,80028926 <vec_test_7+0xe0>
    80028912:	00006517          	auipc	a0,0x6
    80028916:	8ee50513          	addi	a0,a0,-1810 # 8002e200 <__func__.0+0x318>
    8002891a:	311020ef          	jal	8002b42a <printf>
    8002891e:	02900513          	li	a0,41
    80028922:	7f6010ef          	jal	8002a118 <putchar>
    80028926:	4529                	li	a0,10
    80028928:	7f0010ef          	jal	8002a118 <putchar>
    8002892c:	0002f417          	auipc	s0,0x2f
    80028930:	6e544403          	lbu	s0,1765(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028934:	00006597          	auipc	a1,0x6
    80028938:	88458593          	addi	a1,a1,-1916 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    8002893c:	cc11                	beqz	s0,80028958 <vec_test_7+0x112>
    8002893e:	6498                	ld	a4,8(s1)
    80028940:	4789                	li	a5,2
    TEST_END();
    80028942:	00006597          	auipc	a1,0x6
    80028946:	86658593          	addi	a1,a1,-1946 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    8002894a:	00f70763          	beq	a4,a5,80028958 <vec_test_7+0x112>
    8002894e:	4401                	li	s0,0
    TEST_END();
    80028950:	00006597          	auipc	a1,0x6
    80028954:	86858593          	addi	a1,a1,-1944 # 8002e1b8 <__func__.0+0x2d0>
    80028958:	00006517          	auipc	a0,0x6
    8002895c:	90850513          	addi	a0,a0,-1784 # 8002e260 <__func__.0+0x378>
    80028960:	2cb020ef          	jal	8002b42a <printf>
    80028964:	4511                	li	a0,4
    80028966:	da2d80ef          	jal	80000f08 <goto_priv>
    8002896a:	ebbd80ef          	jal	80001824 <reset_state>
}
    8002896e:	60e2                	ld	ra,24(sp)
    80028970:	8522                	mv	a0,s0
    80028972:	6442                	ld	s0,16(sp)
    80028974:	64a2                	ld	s1,8(sp)
    80028976:	6105                	addi	sp,sp,32
    80028978:	8082                	ret

000000008002897a <vec_test_8>:


bool vec_test_8(){
    8002897a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002897c:	00005597          	auipc	a1,0x5
    80028980:	43c58593          	addi	a1,a1,1084 # 8002ddb8 <__func__.16>
    80028984:	00006517          	auipc	a0,0x6
    80028988:	84450513          	addi	a0,a0,-1980 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_8(){
    8002898c:	ec06                	sd	ra,24(sp)
    8002898e:	e822                	sd	s0,16(sp)
    80028990:	e426                	sd	s1,8(sp)
    TEST_START();
    80028992:	299020ef          	jal	8002b42a <printf>
    80028996:	4529                	li	a0,10
    80028998:	780010ef          	jal	8002a118 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    8002899c:	20000713          	li	a4,512
    800289a0:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800289a4:	40000793          	li	a5,1024
    800289a8:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800289ac:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800289b0:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800289b4:	4509                	li	a0,2
    800289b6:	d52d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800289ba:	c52d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXRM);
    800289be:	00a027f3          	csrr	a5,vxrm
    excpt_info();
    800289c2:	e8cd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289c6:	08200593          	li	a1,130
    800289ca:	00011617          	auipc	a2,0x11
    800289ce:	9e660613          	addi	a2,a2,-1562 # 800393b0 <__func__.0+0xb4c8>
    800289d2:	00006517          	auipc	a0,0x6
    800289d6:	80e50513          	addi	a0,a0,-2034 # 8002e1e0 <__func__.0+0x2f8>
    800289da:	251020ef          	jal	8002b42a <printf>
    800289de:	0002f797          	auipc	a5,0x2f
    800289e2:	6337c783          	lbu	a5,1587(a5) # 80058011 <excpt+0x1>
    800289e6:	0002f497          	auipc	s1,0x2f
    800289ea:	62a48493          	addi	s1,s1,1578 # 80058010 <excpt>
    800289ee:	00005597          	auipc	a1,0x5
    800289f2:	7ca58593          	addi	a1,a1,1994 # 8002e1b8 <__func__.0+0x2d0>
    800289f6:	cf89                	beqz	a5,80028a10 <vec_test_8+0x96>
    800289f8:	6498                	ld	a4,8(s1)
    800289fa:	4789                	li	a5,2
    800289fc:	00005597          	auipc	a1,0x5
    80028a00:	7ac58593          	addi	a1,a1,1964 # 8002e1a8 <__func__.0+0x2c0>
    80028a04:	00f70663          	beq	a4,a5,80028a10 <vec_test_8+0x96>
    80028a08:	00005597          	auipc	a1,0x5
    80028a0c:	7b058593          	addi	a1,a1,1968 # 8002e1b8 <__func__.0+0x2d0>
    80028a10:	00005517          	auipc	a0,0x5
    80028a14:	7e850513          	addi	a0,a0,2024 # 8002e1f8 <__func__.0+0x310>
    80028a18:	213020ef          	jal	8002b42a <printf>
    80028a1c:	0002f797          	auipc	a5,0x2f
    80028a20:	5f57c783          	lbu	a5,1525(a5) # 80058011 <excpt+0x1>
    80028a24:	c789                	beqz	a5,80028a2e <vec_test_8+0xb4>
    80028a26:	6498                	ld	a4,8(s1)
    80028a28:	4789                	li	a5,2
    80028a2a:	00f70c63          	beq	a4,a5,80028a42 <vec_test_8+0xc8>
    80028a2e:	00005517          	auipc	a0,0x5
    80028a32:	7d250513          	addi	a0,a0,2002 # 8002e200 <__func__.0+0x318>
    80028a36:	1f5020ef          	jal	8002b42a <printf>
    80028a3a:	02900513          	li	a0,41
    80028a3e:	6da010ef          	jal	8002a118 <putchar>
    80028a42:	4529                	li	a0,10
    80028a44:	6d4010ef          	jal	8002a118 <putchar>
    80028a48:	0002f417          	auipc	s0,0x2f
    80028a4c:	5c944403          	lbu	s0,1481(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028a50:	00005597          	auipc	a1,0x5
    80028a54:	76858593          	addi	a1,a1,1896 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a58:	cc11                	beqz	s0,80028a74 <vec_test_8+0xfa>
    80028a5a:	6498                	ld	a4,8(s1)
    80028a5c:	4789                	li	a5,2
    TEST_END();
    80028a5e:	00005597          	auipc	a1,0x5
    80028a62:	74a58593          	addi	a1,a1,1866 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a66:	00f70763          	beq	a4,a5,80028a74 <vec_test_8+0xfa>
    80028a6a:	4401                	li	s0,0
    TEST_END();
    80028a6c:	00005597          	auipc	a1,0x5
    80028a70:	74c58593          	addi	a1,a1,1868 # 8002e1b8 <__func__.0+0x2d0>
    80028a74:	00005517          	auipc	a0,0x5
    80028a78:	7ec50513          	addi	a0,a0,2028 # 8002e260 <__func__.0+0x378>
    80028a7c:	1af020ef          	jal	8002b42a <printf>
    80028a80:	4511                	li	a0,4
    80028a82:	c86d80ef          	jal	80000f08 <goto_priv>
    80028a86:	d9fd80ef          	jal	80001824 <reset_state>
}
    80028a8a:	60e2                	ld	ra,24(sp)
    80028a8c:	8522                	mv	a0,s0
    80028a8e:	6442                	ld	s0,16(sp)
    80028a90:	64a2                	ld	s1,8(sp)
    80028a92:	6105                	addi	sp,sp,32
    80028a94:	8082                	ret

0000000080028a96 <vec_test_9>:


bool vec_test_9(){
    80028a96:	1101                	addi	sp,sp,-32

    TEST_START();
    80028a98:	00005597          	auipc	a1,0x5
    80028a9c:	33058593          	addi	a1,a1,816 # 8002ddc8 <__func__.15>
    80028aa0:	00005517          	auipc	a0,0x5
    80028aa4:	72850513          	addi	a0,a0,1832 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_9(){
    80028aa8:	ec06                	sd	ra,24(sp)
    80028aaa:	e822                	sd	s0,16(sp)
    80028aac:	e426                	sd	s1,8(sp)
    TEST_START();
    80028aae:	17d020ef          	jal	8002b42a <printf>
    80028ab2:	4529                	li	a0,10
    80028ab4:	664010ef          	jal	8002a118 <putchar>
    // 如果vstart超出界限，建议实现陷阱
    /*
    向量配置的最大长度 VLMAX。这个值取决于向量长度寄存器（vl）、元素宽度（SEW）、和向量组乘数（LMUL）。
    (该测试用例只是简单弄个大的数来测试)
    */
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028ab8:	20000793          	li	a5,512
    80028abc:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10);      
    80028ac0:	40000793          	li	a5,1024
    80028ac4:	3007b073          	csrc	mstatus,a5
// 设置 vadd 执行条件
static inline void set_vadd_conditions(int sew, int lmull, int vl, int v0_init, int v4_init, int v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028ac8:	47a1                	li	a5,8
    80028aca:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80028ace:	5e00b057          	vmv.v.i	v0,1
    80028ad2:	5e01b257          	vmv.v.i	v4,3
    80028ad6:	5e02b357          	vmv.v.i	v6,5
    int v6_init = 5;    // 初始化 v6 的值为 5

    // 设置 vadd 的执行条件
    set_vadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRW(CSR_VSTART,(uint64_t)-1);
    80028ada:	57fd                	li	a5,-1
    80028adc:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80028ae0:	008025f3          	csrr	a1,vstart
    80028ae4:	00011517          	auipc	a0,0x11
    80028ae8:	92c50513          	addi	a0,a0,-1748 # 80039410 <__func__.0+0xb528>
    80028aec:	13f020ef          	jal	8002b42a <printf>
    TEST_SETUP_EXCEPT();
    80028af0:	b1cd80ef          	jal	80000e0c <test_setup_except_function>



// 执行 vadd.vv 指令
static inline void execute_vadd_vv() {
    asm volatile (
    80028af4:	02430457          	vadd.vv	v8,v4,v6
    
    // 执行 vadd.vv 指令
    execute_vadd_vv();

    excpt_info();
    80028af8:	d56d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028afc:	08200593          	li	a1,130
    80028b00:	00011617          	auipc	a2,0x11
    80028b04:	92060613          	addi	a2,a2,-1760 # 80039420 <__func__.0+0xb538>
    80028b08:	00005517          	auipc	a0,0x5
    80028b0c:	6d850513          	addi	a0,a0,1752 # 8002e1e0 <__func__.0+0x2f8>
    80028b10:	11b020ef          	jal	8002b42a <printf>
    80028b14:	0002f797          	auipc	a5,0x2f
    80028b18:	4fd7c783          	lbu	a5,1277(a5) # 80058011 <excpt+0x1>
    80028b1c:	0002f497          	auipc	s1,0x2f
    80028b20:	4f448493          	addi	s1,s1,1268 # 80058010 <excpt>
    80028b24:	00005597          	auipc	a1,0x5
    80028b28:	69458593          	addi	a1,a1,1684 # 8002e1b8 <__func__.0+0x2d0>
    80028b2c:	cf89                	beqz	a5,80028b46 <vec_test_9+0xb0>
    80028b2e:	6498                	ld	a4,8(s1)
    80028b30:	4789                	li	a5,2
    80028b32:	00005597          	auipc	a1,0x5
    80028b36:	67658593          	addi	a1,a1,1654 # 8002e1a8 <__func__.0+0x2c0>
    80028b3a:	00f70663          	beq	a4,a5,80028b46 <vec_test_9+0xb0>
    80028b3e:	00005597          	auipc	a1,0x5
    80028b42:	67a58593          	addi	a1,a1,1658 # 8002e1b8 <__func__.0+0x2d0>
    80028b46:	00005517          	auipc	a0,0x5
    80028b4a:	6b250513          	addi	a0,a0,1714 # 8002e1f8 <__func__.0+0x310>
    80028b4e:	0dd020ef          	jal	8002b42a <printf>
    80028b52:	0002f797          	auipc	a5,0x2f
    80028b56:	4bf7c783          	lbu	a5,1215(a5) # 80058011 <excpt+0x1>
    80028b5a:	c789                	beqz	a5,80028b64 <vec_test_9+0xce>
    80028b5c:	6498                	ld	a4,8(s1)
    80028b5e:	4789                	li	a5,2
    80028b60:	00f70c63          	beq	a4,a5,80028b78 <vec_test_9+0xe2>
    80028b64:	00005517          	auipc	a0,0x5
    80028b68:	69c50513          	addi	a0,a0,1692 # 8002e200 <__func__.0+0x318>
    80028b6c:	0bf020ef          	jal	8002b42a <printf>
    80028b70:	02900513          	li	a0,41
    80028b74:	5a4010ef          	jal	8002a118 <putchar>
    80028b78:	4529                	li	a0,10
    80028b7a:	59e010ef          	jal	8002a118 <putchar>
    80028b7e:	0002f417          	auipc	s0,0x2f
    80028b82:	49344403          	lbu	s0,1171(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028b86:	00005597          	auipc	a1,0x5
    80028b8a:	63258593          	addi	a1,a1,1586 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b8e:	cc11                	beqz	s0,80028baa <vec_test_9+0x114>
    80028b90:	6498                	ld	a4,8(s1)
    80028b92:	4789                	li	a5,2
    TEST_END();
    80028b94:	00005597          	auipc	a1,0x5
    80028b98:	61458593          	addi	a1,a1,1556 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b9c:	00f70763          	beq	a4,a5,80028baa <vec_test_9+0x114>
    80028ba0:	4401                	li	s0,0
    TEST_END();
    80028ba2:	00005597          	auipc	a1,0x5
    80028ba6:	61658593          	addi	a1,a1,1558 # 8002e1b8 <__func__.0+0x2d0>
    80028baa:	00005517          	auipc	a0,0x5
    80028bae:	6b650513          	addi	a0,a0,1718 # 8002e260 <__func__.0+0x378>
    80028bb2:	079020ef          	jal	8002b42a <printf>
    80028bb6:	4511                	li	a0,4
    80028bb8:	b50d80ef          	jal	80000f08 <goto_priv>
    80028bbc:	c69d80ef          	jal	80001824 <reset_state>
}
    80028bc0:	60e2                	ld	ra,24(sp)
    80028bc2:	8522                	mv	a0,s0
    80028bc4:	6442                	ld	s0,16(sp)
    80028bc6:	64a2                	ld	s1,8(sp)
    80028bc8:	6105                	addi	sp,sp,32
    80028bca:	8082                	ret

0000000080028bcc <vec_test_10>:


bool vec_test_10(){
    80028bcc:	1141                	addi	sp,sp,-16

    TEST_START();
    80028bce:	00005597          	auipc	a1,0x5
    80028bd2:	20a58593          	addi	a1,a1,522 # 8002ddd8 <__func__.14>
    80028bd6:	00005517          	auipc	a0,0x5
    80028bda:	5f250513          	addi	a0,a0,1522 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_10(){
    80028bde:	e406                	sd	ra,8(sp)
    TEST_START();
    80028be0:	04b020ef          	jal	8002b42a <printf>
    80028be4:	4529                	li	a0,10
    80028be6:	532010ef          	jal	8002a118 <putchar>
    //当尝试执行某个向量指令时，如果 vstart 的值是该实现在使用相同 vtype 设置执行该指令时不可能产生的


    TEST_END();
    80028bea:	00005597          	auipc	a1,0x5
    80028bee:	5be58593          	addi	a1,a1,1470 # 8002e1a8 <__func__.0+0x2c0>
    80028bf2:	00005517          	auipc	a0,0x5
    80028bf6:	66e50513          	addi	a0,a0,1646 # 8002e260 <__func__.0+0x378>
    80028bfa:	031020ef          	jal	8002b42a <printf>
    80028bfe:	4511                	li	a0,4
    80028c00:	b08d80ef          	jal	80000f08 <goto_priv>
    80028c04:	c21d80ef          	jal	80001824 <reset_state>

}
    80028c08:	60a2                	ld	ra,8(sp)
    80028c0a:	4505                	li	a0,1
    80028c0c:	0141                	addi	sp,sp,16
    80028c0e:	8082                	ret

0000000080028c10 <vec_test_11>:


bool vec_test_11(){
    80028c10:	1101                	addi	sp,sp,-32

    TEST_START();
    80028c12:	00005597          	auipc	a1,0x5
    80028c16:	1d658593          	addi	a1,a1,470 # 8002dde8 <__func__.13>
    80028c1a:	00005517          	auipc	a0,0x5
    80028c1e:	5ae50513          	addi	a0,a0,1454 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_11(){
    80028c22:	ec06                	sd	ra,24(sp)
    80028c24:	e822                	sd	s0,16(sp)
    80028c26:	e426                	sd	s1,8(sp)
    TEST_START();
    80028c28:	003020ef          	jal	8002b42a <printf>
    80028c2c:	4529                	li	a0,10
    80028c2e:	4ea010ef          	jal	8002a118 <putchar>
    //如果 vill 位被设置位1，执行依赖 vtype 的向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028c32:	20000793          	li	a5,512
    80028c36:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028c3a:	40000793          	li	a5,1024
    80028c3e:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 3;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    printf("vtype=%llx\n",CSRR(CSR_VTYPE));
    80028c42:	c21025f3          	csrr	a1,vtype
    80028c46:	00011517          	auipc	a0,0x11
    80028c4a:	81a50513          	addi	a0,a0,-2022 # 80039460 <__func__.0+0xb578>
    80028c4e:	7dc020ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    80028c52:	9bad80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80028c56:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    execute_vmsbf_m(); 
    excpt_info();
    80028c5a:	bf4d80ef          	jal	8000104e <excpt_info>
    
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028c5e:	08200593          	li	a1,130
    80028c62:	00011617          	auipc	a2,0x11
    80028c66:	80e60613          	addi	a2,a2,-2034 # 80039470 <__func__.0+0xb588>
    80028c6a:	00005517          	auipc	a0,0x5
    80028c6e:	57650513          	addi	a0,a0,1398 # 8002e1e0 <__func__.0+0x2f8>
    80028c72:	7b8020ef          	jal	8002b42a <printf>
    80028c76:	0002f797          	auipc	a5,0x2f
    80028c7a:	39b7c783          	lbu	a5,923(a5) # 80058011 <excpt+0x1>
    80028c7e:	0002f497          	auipc	s1,0x2f
    80028c82:	39248493          	addi	s1,s1,914 # 80058010 <excpt>
    80028c86:	00005597          	auipc	a1,0x5
    80028c8a:	53258593          	addi	a1,a1,1330 # 8002e1b8 <__func__.0+0x2d0>
    80028c8e:	cf89                	beqz	a5,80028ca8 <vec_test_11+0x98>
    80028c90:	6498                	ld	a4,8(s1)
    80028c92:	4789                	li	a5,2
    80028c94:	00005597          	auipc	a1,0x5
    80028c98:	51458593          	addi	a1,a1,1300 # 8002e1a8 <__func__.0+0x2c0>
    80028c9c:	00f70663          	beq	a4,a5,80028ca8 <vec_test_11+0x98>
    80028ca0:	00005597          	auipc	a1,0x5
    80028ca4:	51858593          	addi	a1,a1,1304 # 8002e1b8 <__func__.0+0x2d0>
    80028ca8:	00005517          	auipc	a0,0x5
    80028cac:	55050513          	addi	a0,a0,1360 # 8002e1f8 <__func__.0+0x310>
    80028cb0:	77a020ef          	jal	8002b42a <printf>
    80028cb4:	0002f797          	auipc	a5,0x2f
    80028cb8:	35d7c783          	lbu	a5,861(a5) # 80058011 <excpt+0x1>
    80028cbc:	c789                	beqz	a5,80028cc6 <vec_test_11+0xb6>
    80028cbe:	6498                	ld	a4,8(s1)
    80028cc0:	4789                	li	a5,2
    80028cc2:	00f70c63          	beq	a4,a5,80028cda <vec_test_11+0xca>
    80028cc6:	00005517          	auipc	a0,0x5
    80028cca:	53a50513          	addi	a0,a0,1338 # 8002e200 <__func__.0+0x318>
    80028cce:	75c020ef          	jal	8002b42a <printf>
    80028cd2:	02900513          	li	a0,41
    80028cd6:	442010ef          	jal	8002a118 <putchar>
    80028cda:	4529                	li	a0,10
    80028cdc:	43c010ef          	jal	8002a118 <putchar>
    80028ce0:	0002f417          	auipc	s0,0x2f
    80028ce4:	33144403          	lbu	s0,817(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028ce8:	00005597          	auipc	a1,0x5
    80028cec:	4d058593          	addi	a1,a1,1232 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028cf0:	cc11                	beqz	s0,80028d0c <vec_test_11+0xfc>
    80028cf2:	6498                	ld	a4,8(s1)
    80028cf4:	4789                	li	a5,2
    TEST_END();
    80028cf6:	00005597          	auipc	a1,0x5
    80028cfa:	4b258593          	addi	a1,a1,1202 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028cfe:	00f70763          	beq	a4,a5,80028d0c <vec_test_11+0xfc>
    80028d02:	4401                	li	s0,0
    TEST_END();
    80028d04:	00005597          	auipc	a1,0x5
    80028d08:	4b458593          	addi	a1,a1,1204 # 8002e1b8 <__func__.0+0x2d0>
    80028d0c:	00005517          	auipc	a0,0x5
    80028d10:	55450513          	addi	a0,a0,1364 # 8002e260 <__func__.0+0x378>
    80028d14:	716020ef          	jal	8002b42a <printf>
    80028d18:	4511                	li	a0,4
    80028d1a:	9eed80ef          	jal	80000f08 <goto_priv>
    80028d1e:	b07d80ef          	jal	80001824 <reset_state>

}
    80028d22:	60e2                	ld	ra,24(sp)
    80028d24:	8522                	mv	a0,s0
    80028d26:	6442                	ld	s0,16(sp)
    80028d28:	64a2                	ld	s1,8(sp)
    80028d2a:	6105                	addi	sp,sp,32
    80028d2c:	8082                	ret

0000000080028d2e <vec_test_12>:

bool vec_test_12(){
    80028d2e:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d30:	00005597          	auipc	a1,0x5
    80028d34:	0c858593          	addi	a1,a1,200 # 8002ddf8 <__func__.12>
    80028d38:	00005517          	auipc	a0,0x5
    80028d3c:	49050513          	addi	a0,a0,1168 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_12(){
    80028d40:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d42:	6e8020ef          	jal	8002b42a <printf>
    80028d46:	4529                	li	a0,10
    80028d48:	3d0010ef          	jal	8002a118 <putchar>
    //实现必须提供与所有受支持的 SEW 设置对应的 EEW 向量加载和存储。设置 EEW 宽度不受支持，执行向量加载/存储编码
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028d4c:	20000793          	li	a5,512
    80028d50:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028d54:	40000793          	li	a5,1024
    80028d58:	3007b073          	csrc	mstatus,a5

    // set_vtype_with_invalid_eew();       //环境不支持设置



    TEST_END();
    80028d5c:	00005597          	auipc	a1,0x5
    80028d60:	44c58593          	addi	a1,a1,1100 # 8002e1a8 <__func__.0+0x2c0>
    80028d64:	00005517          	auipc	a0,0x5
    80028d68:	4fc50513          	addi	a0,a0,1276 # 8002e260 <__func__.0+0x378>
    80028d6c:	6be020ef          	jal	8002b42a <printf>
    80028d70:	4511                	li	a0,4
    80028d72:	996d80ef          	jal	80000f08 <goto_priv>
    80028d76:	aafd80ef          	jal	80001824 <reset_state>

}
    80028d7a:	60a2                	ld	ra,8(sp)
    80028d7c:	4505                	li	a0,1
    80028d7e:	0141                	addi	sp,sp,16
    80028d80:	8082                	ret

0000000080028d82 <vec_test_13>:

bool vec_test_13(){
    80028d82:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d84:	00005597          	auipc	a1,0x5
    80028d88:	08458593          	addi	a1,a1,132 # 8002de08 <__func__.11>
    80028d8c:	00005517          	auipc	a0,0x5
    80028d90:	43c50513          	addi	a0,a0,1084 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_13(){
    80028d94:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d96:	694020ef          	jal	8002b42a <printf>
    80028d9a:	4529                	li	a0,10
    80028d9c:	37c010ef          	jal	8002a118 <putchar>
    //设置不支持的 EEW 值，执行 vl<nf>r 指令

    TEST_END();
    80028da0:	00005597          	auipc	a1,0x5
    80028da4:	40858593          	addi	a1,a1,1032 # 8002e1a8 <__func__.0+0x2c0>
    80028da8:	00005517          	auipc	a0,0x5
    80028dac:	4b850513          	addi	a0,a0,1208 # 8002e260 <__func__.0+0x378>
    80028db0:	67a020ef          	jal	8002b42a <printf>
    80028db4:	4511                	li	a0,4
    80028db6:	952d80ef          	jal	80000f08 <goto_priv>
    80028dba:	a6bd80ef          	jal	80001824 <reset_state>

}
    80028dbe:	60a2                	ld	ra,8(sp)
    80028dc0:	4505                	li	a0,1
    80028dc2:	0141                	addi	sp,sp,16
    80028dc4:	8082                	ret

0000000080028dc6 <vec_test_14>:



bool vec_test_14(){
    80028dc6:	1101                	addi	sp,sp,-32

    TEST_START();
    80028dc8:	00005597          	auipc	a1,0x5
    80028dcc:	05058593          	addi	a1,a1,80 # 8002de18 <__func__.10>
    80028dd0:	00005517          	auipc	a0,0x5
    80028dd4:	3f850513          	addi	a0,a0,1016 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_14(){
    80028dd8:	ec06                	sd	ra,24(sp)
    80028dda:	e822                	sd	s0,16(sp)
    80028ddc:	e426                	sd	s1,8(sp)
    TEST_START();
    80028dde:	64c020ef          	jal	8002b42a <printf>
    80028de2:	4529                	li	a0,10
    80028de4:	334010ef          	jal	8002a118 <putchar>
    //浮点单元状态字段 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028de8:	20000793          	li	a5,512
    80028dec:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028df0:	40000793          	li	a5,1024
    80028df4:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028df8:	6709                	lui	a4,0x2
    80028dfa:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028dfe:	6791                	lui	a5,0x4
    80028e00:	3007b073          	csrc	mstatus,a5
// 设置向量浮点加法指令的执行条件
static inline void set_vfadd_conditions(int sew, int lmull, int vl, float v0_init, float v4_init, float v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028e04:	00011617          	auipc	a2,0x11
    80028e08:	a0462787          	flw	fa5,-1532(a2) # 80039808 <__func__.0+0xb920>
    80028e0c:	00011617          	auipc	a2,0x11
    80028e10:	a0062707          	flw	fa4,-1536(a2) # 8003980c <__func__.0+0xb924>
    80028e14:	00011617          	auipc	a2,0x11
    80028e18:	9fc62687          	flw	fa3,-1540(a2) # 80039810 <__func__.0+0xb928>
    80028e1c:	46a1                	li	a3,8
    80028e1e:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028e22:	5e07d057          	vfmv.v.f	v0,fa5
    80028e26:	5e075257          	vfmv.v.f	v4,fa4
    80028e2a:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRC(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs = 0
    80028e2e:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028e32:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028e36:	fd7d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行向量浮点加法指令
static inline void execute_vfadd() {
    asm volatile (
    80028e3a:	02431457          	vfadd.vv	v8,v4,v6
    // 执行 vfadd 指令
    execute_vfadd();

    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028e3e:	08200593          	li	a1,130
    80028e42:	00010617          	auipc	a2,0x10
    80028e46:	66e60613          	addi	a2,a2,1646 # 800394b0 <__func__.0+0xb5c8>
    80028e4a:	00005517          	auipc	a0,0x5
    80028e4e:	39650513          	addi	a0,a0,918 # 8002e1e0 <__func__.0+0x2f8>
    80028e52:	5d8020ef          	jal	8002b42a <printf>
    80028e56:	0002f797          	auipc	a5,0x2f
    80028e5a:	1bb7c783          	lbu	a5,443(a5) # 80058011 <excpt+0x1>
    80028e5e:	0002f497          	auipc	s1,0x2f
    80028e62:	1b248493          	addi	s1,s1,434 # 80058010 <excpt>
    80028e66:	00005597          	auipc	a1,0x5
    80028e6a:	35258593          	addi	a1,a1,850 # 8002e1b8 <__func__.0+0x2d0>
    80028e6e:	cf89                	beqz	a5,80028e88 <vec_test_14+0xc2>
    80028e70:	6498                	ld	a4,8(s1)
    80028e72:	4789                	li	a5,2
    80028e74:	00005597          	auipc	a1,0x5
    80028e78:	33458593          	addi	a1,a1,820 # 8002e1a8 <__func__.0+0x2c0>
    80028e7c:	00f70663          	beq	a4,a5,80028e88 <vec_test_14+0xc2>
    80028e80:	00005597          	auipc	a1,0x5
    80028e84:	33858593          	addi	a1,a1,824 # 8002e1b8 <__func__.0+0x2d0>
    80028e88:	00005517          	auipc	a0,0x5
    80028e8c:	37050513          	addi	a0,a0,880 # 8002e1f8 <__func__.0+0x310>
    80028e90:	59a020ef          	jal	8002b42a <printf>
    80028e94:	0002f797          	auipc	a5,0x2f
    80028e98:	17d7c783          	lbu	a5,381(a5) # 80058011 <excpt+0x1>
    80028e9c:	c789                	beqz	a5,80028ea6 <vec_test_14+0xe0>
    80028e9e:	6498                	ld	a4,8(s1)
    80028ea0:	4789                	li	a5,2
    80028ea2:	00f70c63          	beq	a4,a5,80028eba <vec_test_14+0xf4>
    80028ea6:	00005517          	auipc	a0,0x5
    80028eaa:	35a50513          	addi	a0,a0,858 # 8002e200 <__func__.0+0x318>
    80028eae:	57c020ef          	jal	8002b42a <printf>
    80028eb2:	02900513          	li	a0,41
    80028eb6:	262010ef          	jal	8002a118 <putchar>
    80028eba:	4529                	li	a0,10
    80028ebc:	25c010ef          	jal	8002a118 <putchar>
    80028ec0:	0002f417          	auipc	s0,0x2f
    80028ec4:	15144403          	lbu	s0,337(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028ec8:	00005597          	auipc	a1,0x5
    80028ecc:	2f058593          	addi	a1,a1,752 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028ed0:	cc11                	beqz	s0,80028eec <vec_test_14+0x126>
    80028ed2:	6498                	ld	a4,8(s1)
    80028ed4:	4789                	li	a5,2
    TEST_END();
    80028ed6:	00005597          	auipc	a1,0x5
    80028eda:	2d258593          	addi	a1,a1,722 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028ede:	00f70763          	beq	a4,a5,80028eec <vec_test_14+0x126>
    80028ee2:	4401                	li	s0,0
    TEST_END();
    80028ee4:	00005597          	auipc	a1,0x5
    80028ee8:	2d458593          	addi	a1,a1,724 # 8002e1b8 <__func__.0+0x2d0>
    80028eec:	00005517          	auipc	a0,0x5
    80028ef0:	37450513          	addi	a0,a0,884 # 8002e260 <__func__.0+0x378>
    80028ef4:	536020ef          	jal	8002b42a <printf>
    80028ef8:	4511                	li	a0,4
    80028efa:	80ed80ef          	jal	80000f08 <goto_priv>
    80028efe:	927d80ef          	jal	80001824 <reset_state>

}
    80028f02:	60e2                	ld	ra,24(sp)
    80028f04:	8522                	mv	a0,s0
    80028f06:	6442                	ld	s0,16(sp)
    80028f08:	64a2                	ld	s1,8(sp)
    80028f0a:	6105                	addi	sp,sp,32
    80028f0c:	8082                	ret

0000000080028f0e <vec_test_15>:


bool vec_test_15(){
    80028f0e:	1101                	addi	sp,sp,-32

    TEST_START();
    80028f10:	00005597          	auipc	a1,0x5
    80028f14:	f1858593          	addi	a1,a1,-232 # 8002de28 <__func__.9>
    80028f18:	00005517          	auipc	a0,0x5
    80028f1c:	2b050513          	addi	a0,a0,688 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_15(){
    80028f20:	ec06                	sd	ra,24(sp)
    80028f22:	e822                	sd	s0,16(sp)
    80028f24:	e426                	sd	s1,8(sp)
    TEST_START();
    80028f26:	504020ef          	jal	8002b42a <printf>
    80028f2a:	4529                	li	a0,10
    80028f2c:	1ec010ef          	jal	8002a118 <putchar>
    //如果实现了虚拟化扩展且 V=1，如果 vsstatus.FS 或 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令的操作
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028f30:	20000793          	li	a5,512
    80028f34:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028f38:	40000793          	li	a5,1024
    80028f3c:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f40:	6709                	lui	a4,0x2
    80028f42:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f46:	6791                	lui	a5,0x4
    80028f48:	3007b073          	csrc	mstatus,a5
    asm volatile (
    80028f4c:	00011617          	auipc	a2,0x11
    80028f50:	8bc62787          	flw	fa5,-1860(a2) # 80039808 <__func__.0+0xb920>
    80028f54:	00011617          	auipc	a2,0x11
    80028f58:	8b862707          	flw	fa4,-1864(a2) # 8003980c <__func__.0+0xb924>
    80028f5c:	00011617          	auipc	a2,0x11
    80028f60:	8b462687          	flw	fa3,-1868(a2) # 80039810 <__func__.0+0xb928>
    80028f64:	46a1                	li	a3,8
    80028f66:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028f6a:	5e07d057          	vfmv.v.f	v0,fa5
    80028f6e:	5e075257          	vfmv.v.f	v4,fa4
    80028f72:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f76:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 14); 
    80028f7a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 13);      //设置vsstatus.fs = 0
    80028f7e:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 14); 
    80028f82:	2007b073          	csrc	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80028f86:	e87d70ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vfadd 指令
    goto_priv(PRIV_VU);
    80028f8a:	4501                	li	a0,0
    80028f8c:	f7dd70ef          	jal	80000f08 <goto_priv>
    asm volatile (
    80028f90:	02431457          	vfadd.vv	v8,v4,v6
    execute_vfadd();
    excpt_info();
    80028f94:	8bad80ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80028f98:	08200593          	li	a1,130
    80028f9c:	00010617          	auipc	a2,0x10
    80028fa0:	55460613          	addi	a2,a2,1364 # 800394f0 <__func__.0+0xb608>
    80028fa4:	00005517          	auipc	a0,0x5
    80028fa8:	23c50513          	addi	a0,a0,572 # 8002e1e0 <__func__.0+0x2f8>
    80028fac:	47e020ef          	jal	8002b42a <printf>
    80028fb0:	0002f797          	auipc	a5,0x2f
    80028fb4:	0617c783          	lbu	a5,97(a5) # 80058011 <excpt+0x1>
    80028fb8:	0002f497          	auipc	s1,0x2f
    80028fbc:	05848493          	addi	s1,s1,88 # 80058010 <excpt>
    80028fc0:	00005597          	auipc	a1,0x5
    80028fc4:	1f858593          	addi	a1,a1,504 # 8002e1b8 <__func__.0+0x2d0>
    80028fc8:	cf89                	beqz	a5,80028fe2 <vec_test_15+0xd4>
    80028fca:	6498                	ld	a4,8(s1)
    80028fcc:	4789                	li	a5,2
    80028fce:	00005597          	auipc	a1,0x5
    80028fd2:	1da58593          	addi	a1,a1,474 # 8002e1a8 <__func__.0+0x2c0>
    80028fd6:	00f70663          	beq	a4,a5,80028fe2 <vec_test_15+0xd4>
    80028fda:	00005597          	auipc	a1,0x5
    80028fde:	1de58593          	addi	a1,a1,478 # 8002e1b8 <__func__.0+0x2d0>
    80028fe2:	00005517          	auipc	a0,0x5
    80028fe6:	21650513          	addi	a0,a0,534 # 8002e1f8 <__func__.0+0x310>
    80028fea:	440020ef          	jal	8002b42a <printf>
    80028fee:	0002f797          	auipc	a5,0x2f
    80028ff2:	0237c783          	lbu	a5,35(a5) # 80058011 <excpt+0x1>
    80028ff6:	c789                	beqz	a5,80029000 <vec_test_15+0xf2>
    80028ff8:	6498                	ld	a4,8(s1)
    80028ffa:	4789                	li	a5,2
    80028ffc:	00f70c63          	beq	a4,a5,80029014 <vec_test_15+0x106>
    80029000:	00005517          	auipc	a0,0x5
    80029004:	20050513          	addi	a0,a0,512 # 8002e200 <__func__.0+0x318>
    80029008:	422020ef          	jal	8002b42a <printf>
    8002900c:	02900513          	li	a0,41
    80029010:	108010ef          	jal	8002a118 <putchar>
    80029014:	4529                	li	a0,10
    80029016:	102010ef          	jal	8002a118 <putchar>
    8002901a:	0002f417          	auipc	s0,0x2f
    8002901e:	ff744403          	lbu	s0,-9(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029022:	00005597          	auipc	a1,0x5
    80029026:	19658593          	addi	a1,a1,406 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    8002902a:	cc11                	beqz	s0,80029046 <vec_test_15+0x138>
    8002902c:	6498                	ld	a4,8(s1)
    8002902e:	4789                	li	a5,2
    TEST_END();
    80029030:	00005597          	auipc	a1,0x5
    80029034:	17858593          	addi	a1,a1,376 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029038:	00f70763          	beq	a4,a5,80029046 <vec_test_15+0x138>
    8002903c:	4401                	li	s0,0
    TEST_END();
    8002903e:	00005597          	auipc	a1,0x5
    80029042:	17a58593          	addi	a1,a1,378 # 8002e1b8 <__func__.0+0x2d0>
    80029046:	00005517          	auipc	a0,0x5
    8002904a:	21a50513          	addi	a0,a0,538 # 8002e260 <__func__.0+0x378>
    8002904e:	3dc020ef          	jal	8002b42a <printf>
    80029052:	4511                	li	a0,4
    80029054:	eb5d70ef          	jal	80000f08 <goto_priv>
    80029058:	fccd80ef          	jal	80001824 <reset_state>

}
    8002905c:	60e2                	ld	ra,24(sp)
    8002905e:	8522                	mv	a0,s0
    80029060:	6442                	ld	s0,16(sp)
    80029062:	64a2                	ld	s1,8(sp)
    80029064:	6105                	addi	sp,sp,32
    80029066:	8082                	ret

0000000080029068 <vec_test_16>:





bool vec_test_16(){
    80029068:	1101                	addi	sp,sp,-32

    TEST_START();
    8002906a:	00005597          	auipc	a1,0x5
    8002906e:	dce58593          	addi	a1,a1,-562 # 8002de38 <__func__.8>
    80029072:	00005517          	auipc	a0,0x5
    80029076:	15650513          	addi	a0,a0,342 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_16(){
    8002907a:	ec06                	sd	ra,24(sp)
    8002907c:	e822                	sd	s0,16(sp)
    8002907e:	e426                	sd	s1,8(sp)
    TEST_START();
    80029080:	3aa020ef          	jal	8002b42a <printf>
    80029084:	4529                	li	a0,10
    80029086:	092010ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vector reduction instructions操作


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002908a:	20000793          	li	a5,512
    8002908e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029092:	40000793          	li	a5,1024
    80029096:	3007a073          	csrs	mstatus,a5
    asm volatile (
    8002909a:	4789                	li	a5,2
    8002909c:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    800290a0:	5e00b057          	vmv.v.i	v0,1
    800290a4:	5e003257          	vmv.v.i	v4,0
    800290a8:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1


    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);
    excpt_info();
    800290ac:	fa3d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800290b0:	57fd                	li	a5,-1
    800290b2:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800290b6:	008025f3          	csrr	a1,vstart
    800290ba:	00010517          	auipc	a0,0x10
    800290be:	35650513          	addi	a0,a0,854 # 80039410 <__func__.0+0xb528>
    800290c2:	368020ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    800290c6:	d47d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800290ca:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    800290ce:	f81d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800290d2:	08200593          	li	a1,130
    800290d6:	00010617          	auipc	a2,0x10
    800290da:	46a60613          	addi	a2,a2,1130 # 80039540 <__func__.0+0xb658>
    800290de:	00005517          	auipc	a0,0x5
    800290e2:	10250513          	addi	a0,a0,258 # 8002e1e0 <__func__.0+0x2f8>
    800290e6:	344020ef          	jal	8002b42a <printf>
    800290ea:	0002f797          	auipc	a5,0x2f
    800290ee:	f277c783          	lbu	a5,-217(a5) # 80058011 <excpt+0x1>
    800290f2:	0002f497          	auipc	s1,0x2f
    800290f6:	f1e48493          	addi	s1,s1,-226 # 80058010 <excpt>
    800290fa:	00005597          	auipc	a1,0x5
    800290fe:	0be58593          	addi	a1,a1,190 # 8002e1b8 <__func__.0+0x2d0>
    80029102:	cf89                	beqz	a5,8002911c <vec_test_16+0xb4>
    80029104:	6498                	ld	a4,8(s1)
    80029106:	4789                	li	a5,2
    80029108:	00005597          	auipc	a1,0x5
    8002910c:	0a058593          	addi	a1,a1,160 # 8002e1a8 <__func__.0+0x2c0>
    80029110:	00f70663          	beq	a4,a5,8002911c <vec_test_16+0xb4>
    80029114:	00005597          	auipc	a1,0x5
    80029118:	0a458593          	addi	a1,a1,164 # 8002e1b8 <__func__.0+0x2d0>
    8002911c:	00005517          	auipc	a0,0x5
    80029120:	0dc50513          	addi	a0,a0,220 # 8002e1f8 <__func__.0+0x310>
    80029124:	306020ef          	jal	8002b42a <printf>
    80029128:	0002f797          	auipc	a5,0x2f
    8002912c:	ee97c783          	lbu	a5,-279(a5) # 80058011 <excpt+0x1>
    80029130:	c789                	beqz	a5,8002913a <vec_test_16+0xd2>
    80029132:	6498                	ld	a4,8(s1)
    80029134:	4789                	li	a5,2
    80029136:	00f70c63          	beq	a4,a5,8002914e <vec_test_16+0xe6>
    8002913a:	00005517          	auipc	a0,0x5
    8002913e:	0c650513          	addi	a0,a0,198 # 8002e200 <__func__.0+0x318>
    80029142:	2e8020ef          	jal	8002b42a <printf>
    80029146:	02900513          	li	a0,41
    8002914a:	7cf000ef          	jal	8002a118 <putchar>
    8002914e:	4529                	li	a0,10
    80029150:	7c9000ef          	jal	8002a118 <putchar>
    80029154:	0002f417          	auipc	s0,0x2f
    80029158:	ebd44403          	lbu	s0,-323(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002915c:	00005597          	auipc	a1,0x5
    80029160:	05c58593          	addi	a1,a1,92 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    80029164:	cc11                	beqz	s0,80029180 <vec_test_16+0x118>
    80029166:	6498                	ld	a4,8(s1)
    80029168:	4789                	li	a5,2
    TEST_END();
    8002916a:	00005597          	auipc	a1,0x5
    8002916e:	03e58593          	addi	a1,a1,62 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    80029172:	00f70763          	beq	a4,a5,80029180 <vec_test_16+0x118>
    80029176:	4401                	li	s0,0
    TEST_END();
    80029178:	00005597          	auipc	a1,0x5
    8002917c:	04058593          	addi	a1,a1,64 # 8002e1b8 <__func__.0+0x2d0>
    80029180:	00005517          	auipc	a0,0x5
    80029184:	0e050513          	addi	a0,a0,224 # 8002e260 <__func__.0+0x378>
    80029188:	2a2020ef          	jal	8002b42a <printf>
    8002918c:	4511                	li	a0,4
    8002918e:	d7bd70ef          	jal	80000f08 <goto_priv>
    80029192:	e92d80ef          	jal	80001824 <reset_state>

}
    80029196:	60e2                	ld	ra,24(sp)
    80029198:	8522                	mv	a0,s0
    8002919a:	6442                	ld	s0,16(sp)
    8002919c:	64a2                	ld	s1,8(sp)
    8002919e:	6105                	addi	sp,sp,32
    800291a0:	8082                	ret

00000000800291a2 <vec_test_17>:



bool vec_test_17(){
    800291a2:	1101                	addi	sp,sp,-32

    TEST_START();
    800291a4:	00005597          	auipc	a1,0x5
    800291a8:	ca458593          	addi	a1,a1,-860 # 8002de48 <__func__.7>
    800291ac:	00005517          	auipc	a0,0x5
    800291b0:	01c50513          	addi	a0,a0,28 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_17(){
    800291b4:	ec06                	sd	ra,24(sp)
    800291b6:	e822                	sd	s0,16(sp)
    800291b8:	e426                	sd	s1,8(sp)
    TEST_START();
    800291ba:	270020ef          	jal	8002b42a <printf>
    800291be:	4529                	li	a0,10
    800291c0:	759000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vcpop.m指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800291c4:	20000793          	li	a5,512
    800291c8:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800291cc:	40000793          	li	a5,1024
    800291d0:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800291d4:	47a1                	li	a5,8
    800291d6:	4745                	li	a4,17
    800291d8:	80e7f2d7          	vsetvl	t0,a5,a4
    800291dc:	5e00b057          	vmv.v.i	v0,1
    800291e0:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800291e4:	57fd                	li	a5,-1
    800291e6:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800291ea:	008025f3          	csrr	a1,vstart
    800291ee:	00010517          	auipc	a0,0x10
    800291f2:	22250513          	addi	a0,a0,546 # 80039410 <__func__.0+0xb528>
    800291f6:	234020ef          	jal	8002b42a <printf>

    // 执行 vcpop.m 指令并返回结果
    TEST_SETUP_EXCEPT();
    800291fa:	c13d70ef          	jal	80000e0c <test_setup_except_function>
    uint32_t result = execute_vcpop_v2();
    800291fe:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    80029202:	e4dd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029206:	08200593          	li	a1,130
    8002920a:	00010617          	auipc	a2,0x10
    8002920e:	37660613          	addi	a2,a2,886 # 80039580 <__func__.0+0xb698>
    80029212:	00005517          	auipc	a0,0x5
    80029216:	fce50513          	addi	a0,a0,-50 # 8002e1e0 <__func__.0+0x2f8>
    8002921a:	210020ef          	jal	8002b42a <printf>
    8002921e:	0002f797          	auipc	a5,0x2f
    80029222:	df37c783          	lbu	a5,-525(a5) # 80058011 <excpt+0x1>
    80029226:	0002f497          	auipc	s1,0x2f
    8002922a:	dea48493          	addi	s1,s1,-534 # 80058010 <excpt>
    8002922e:	00005597          	auipc	a1,0x5
    80029232:	f8a58593          	addi	a1,a1,-118 # 8002e1b8 <__func__.0+0x2d0>
    80029236:	cf89                	beqz	a5,80029250 <vec_test_17+0xae>
    80029238:	6498                	ld	a4,8(s1)
    8002923a:	4789                	li	a5,2
    8002923c:	00005597          	auipc	a1,0x5
    80029240:	f6c58593          	addi	a1,a1,-148 # 8002e1a8 <__func__.0+0x2c0>
    80029244:	00f70663          	beq	a4,a5,80029250 <vec_test_17+0xae>
    80029248:	00005597          	auipc	a1,0x5
    8002924c:	f7058593          	addi	a1,a1,-144 # 8002e1b8 <__func__.0+0x2d0>
    80029250:	00005517          	auipc	a0,0x5
    80029254:	fa850513          	addi	a0,a0,-88 # 8002e1f8 <__func__.0+0x310>
    80029258:	1d2020ef          	jal	8002b42a <printf>
    8002925c:	0002f797          	auipc	a5,0x2f
    80029260:	db57c783          	lbu	a5,-587(a5) # 80058011 <excpt+0x1>
    80029264:	c789                	beqz	a5,8002926e <vec_test_17+0xcc>
    80029266:	6498                	ld	a4,8(s1)
    80029268:	4789                	li	a5,2
    8002926a:	00f70c63          	beq	a4,a5,80029282 <vec_test_17+0xe0>
    8002926e:	00005517          	auipc	a0,0x5
    80029272:	f9250513          	addi	a0,a0,-110 # 8002e200 <__func__.0+0x318>
    80029276:	1b4020ef          	jal	8002b42a <printf>
    8002927a:	02900513          	li	a0,41
    8002927e:	69b000ef          	jal	8002a118 <putchar>
    80029282:	4529                	li	a0,10
    80029284:	695000ef          	jal	8002a118 <putchar>
    80029288:	0002f417          	auipc	s0,0x2f
    8002928c:	d8944403          	lbu	s0,-631(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029290:	00005597          	auipc	a1,0x5
    80029294:	f2858593          	addi	a1,a1,-216 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029298:	cc11                	beqz	s0,800292b4 <vec_test_17+0x112>
    8002929a:	6498                	ld	a4,8(s1)
    8002929c:	4789                	li	a5,2
    TEST_END();
    8002929e:	00005597          	auipc	a1,0x5
    800292a2:	f0a58593          	addi	a1,a1,-246 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800292a6:	00f70763          	beq	a4,a5,800292b4 <vec_test_17+0x112>
    800292aa:	4401                	li	s0,0
    TEST_END();
    800292ac:	00005597          	auipc	a1,0x5
    800292b0:	f0c58593          	addi	a1,a1,-244 # 8002e1b8 <__func__.0+0x2d0>
    800292b4:	00005517          	auipc	a0,0x5
    800292b8:	fac50513          	addi	a0,a0,-84 # 8002e260 <__func__.0+0x378>
    800292bc:	16e020ef          	jal	8002b42a <printf>
    800292c0:	4511                	li	a0,4
    800292c2:	c47d70ef          	jal	80000f08 <goto_priv>
    800292c6:	d5ed80ef          	jal	80001824 <reset_state>

}
    800292ca:	60e2                	ld	ra,24(sp)
    800292cc:	8522                	mv	a0,s0
    800292ce:	6442                	ld	s0,16(sp)
    800292d0:	64a2                	ld	s1,8(sp)
    800292d2:	6105                	addi	sp,sp,32
    800292d4:	8082                	ret

00000000800292d6 <vec_test_18>:



bool vec_test_18(){
    800292d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800292d8:	00005597          	auipc	a1,0x5
    800292dc:	b8058593          	addi	a1,a1,-1152 # 8002de58 <__func__.6>
    800292e0:	00005517          	auipc	a0,0x5
    800292e4:	ee850513          	addi	a0,a0,-280 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_18(){
    800292e8:	ec06                	sd	ra,24(sp)
    800292ea:	e822                	sd	s0,16(sp)
    800292ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800292ee:	13c020ef          	jal	8002b42a <printf>
    800292f2:	4529                	li	a0,10
    800292f4:	625000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vfirst指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800292f8:	20000793          	li	a5,512
    800292fc:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029300:	40000793          	li	a5,1024
    80029304:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80029308:	b05d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    8002930c:	4785                	li	a5,1
    8002930e:	4749                	li	a4,18
    80029310:	80e7f2d7          	vsetvl	t0,a5,a4
    80029314:	5e00b057          	vmv.v.i	v0,1
    80029318:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    8002931c:	d33d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029320:	57fd                	li	a5,-1
    80029322:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029326:	008025f3          	csrr	a1,vstart
    8002932a:	00010517          	auipc	a0,0x10
    8002932e:	0e650513          	addi	a0,a0,230 # 80039410 <__func__.0+0xb528>
    80029332:	0f8020ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    80029336:	ad7d70ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    8002933a:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    8002933e:	d11d70ef          	jal	8000104e <excpt_info>


    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029342:	08200593          	li	a1,130
    80029346:	00010617          	auipc	a2,0x10
    8002934a:	27a60613          	addi	a2,a2,634 # 800395c0 <__func__.0+0xb6d8>
    8002934e:	00005517          	auipc	a0,0x5
    80029352:	e9250513          	addi	a0,a0,-366 # 8002e1e0 <__func__.0+0x2f8>
    80029356:	0d4020ef          	jal	8002b42a <printf>
    8002935a:	0002f797          	auipc	a5,0x2f
    8002935e:	cb77c783          	lbu	a5,-841(a5) # 80058011 <excpt+0x1>
    80029362:	0002f497          	auipc	s1,0x2f
    80029366:	cae48493          	addi	s1,s1,-850 # 80058010 <excpt>
    8002936a:	00005597          	auipc	a1,0x5
    8002936e:	e4e58593          	addi	a1,a1,-434 # 8002e1b8 <__func__.0+0x2d0>
    80029372:	cf89                	beqz	a5,8002938c <vec_test_18+0xb6>
    80029374:	6498                	ld	a4,8(s1)
    80029376:	4789                	li	a5,2
    80029378:	00005597          	auipc	a1,0x5
    8002937c:	e3058593          	addi	a1,a1,-464 # 8002e1a8 <__func__.0+0x2c0>
    80029380:	00f70663          	beq	a4,a5,8002938c <vec_test_18+0xb6>
    80029384:	00005597          	auipc	a1,0x5
    80029388:	e3458593          	addi	a1,a1,-460 # 8002e1b8 <__func__.0+0x2d0>
    8002938c:	00005517          	auipc	a0,0x5
    80029390:	e6c50513          	addi	a0,a0,-404 # 8002e1f8 <__func__.0+0x310>
    80029394:	096020ef          	jal	8002b42a <printf>
    80029398:	0002f797          	auipc	a5,0x2f
    8002939c:	c797c783          	lbu	a5,-903(a5) # 80058011 <excpt+0x1>
    800293a0:	c789                	beqz	a5,800293aa <vec_test_18+0xd4>
    800293a2:	6498                	ld	a4,8(s1)
    800293a4:	4789                	li	a5,2
    800293a6:	00f70c63          	beq	a4,a5,800293be <vec_test_18+0xe8>
    800293aa:	00005517          	auipc	a0,0x5
    800293ae:	e5650513          	addi	a0,a0,-426 # 8002e200 <__func__.0+0x318>
    800293b2:	078020ef          	jal	8002b42a <printf>
    800293b6:	02900513          	li	a0,41
    800293ba:	55f000ef          	jal	8002a118 <putchar>
    800293be:	4529                	li	a0,10
    800293c0:	559000ef          	jal	8002a118 <putchar>
    800293c4:	0002f417          	auipc	s0,0x2f
    800293c8:	c4d44403          	lbu	s0,-947(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800293cc:	00005597          	auipc	a1,0x5
    800293d0:	dec58593          	addi	a1,a1,-532 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    800293d4:	cc11                	beqz	s0,800293f0 <vec_test_18+0x11a>
    800293d6:	6498                	ld	a4,8(s1)
    800293d8:	4789                	li	a5,2
    TEST_END();
    800293da:	00005597          	auipc	a1,0x5
    800293de:	dce58593          	addi	a1,a1,-562 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    800293e2:	00f70763          	beq	a4,a5,800293f0 <vec_test_18+0x11a>
    800293e6:	4401                	li	s0,0
    TEST_END();
    800293e8:	00005597          	auipc	a1,0x5
    800293ec:	dd058593          	addi	a1,a1,-560 # 8002e1b8 <__func__.0+0x2d0>
    800293f0:	00005517          	auipc	a0,0x5
    800293f4:	e7050513          	addi	a0,a0,-400 # 8002e260 <__func__.0+0x378>
    800293f8:	032020ef          	jal	8002b42a <printf>
    800293fc:	4511                	li	a0,4
    800293fe:	b0bd70ef          	jal	80000f08 <goto_priv>
    80029402:	c22d80ef          	jal	80001824 <reset_state>

}
    80029406:	60e2                	ld	ra,24(sp)
    80029408:	8522                	mv	a0,s0
    8002940a:	6442                	ld	s0,16(sp)
    8002940c:	64a2                	ld	s1,8(sp)
    8002940e:	6105                	addi	sp,sp,32
    80029410:	8082                	ret

0000000080029412 <vec_test_19>:

bool vec_test_19(){
    80029412:	1101                	addi	sp,sp,-32

    TEST_START();
    80029414:	00005597          	auipc	a1,0x5
    80029418:	a5458593          	addi	a1,a1,-1452 # 8002de68 <__func__.5>
    8002941c:	00005517          	auipc	a0,0x5
    80029420:	dac50513          	addi	a0,a0,-596 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_19(){
    80029424:	ec06                	sd	ra,24(sp)
    80029426:	e822                	sd	s0,16(sp)
    80029428:	e426                	sd	s1,8(sp)
    TEST_START();
    8002942a:	000020ef          	jal	8002b42a <printf>
    8002942e:	4529                	li	a0,10
    80029430:	4e9000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vmsbf指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029434:	20000793          	li	a5,512
    80029438:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002943c:	40000793          	li	a5,1024
    80029440:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80029444:	47a1                	li	a5,8
    80029446:	4745                	li	a4,17
    80029448:	80e7f2d7          	vsetvl	t0,a5,a4
    8002944c:	5e00b057          	vmv.v.i	v0,1
    80029450:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029454:	57fd                	li	a5,-1
    80029456:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002945a:	008025f3          	csrr	a1,vstart
    8002945e:	00010517          	auipc	a0,0x10
    80029462:	fb250513          	addi	a0,a0,-78 # 80039410 <__func__.0+0xb528>
    80029466:	7c5010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    8002946a:	9a3d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    8002946e:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    80029472:	bddd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029476:	08200593          	li	a1,130
    8002947a:	00010617          	auipc	a2,0x10
    8002947e:	18660613          	addi	a2,a2,390 # 80039600 <__func__.0+0xb718>
    80029482:	00005517          	auipc	a0,0x5
    80029486:	d5e50513          	addi	a0,a0,-674 # 8002e1e0 <__func__.0+0x2f8>
    8002948a:	7a1010ef          	jal	8002b42a <printf>
    8002948e:	0002f797          	auipc	a5,0x2f
    80029492:	b837c783          	lbu	a5,-1149(a5) # 80058011 <excpt+0x1>
    80029496:	0002f497          	auipc	s1,0x2f
    8002949a:	b7a48493          	addi	s1,s1,-1158 # 80058010 <excpt>
    8002949e:	00005597          	auipc	a1,0x5
    800294a2:	d1a58593          	addi	a1,a1,-742 # 8002e1b8 <__func__.0+0x2d0>
    800294a6:	cf89                	beqz	a5,800294c0 <vec_test_19+0xae>
    800294a8:	6498                	ld	a4,8(s1)
    800294aa:	4789                	li	a5,2
    800294ac:	00005597          	auipc	a1,0x5
    800294b0:	cfc58593          	addi	a1,a1,-772 # 8002e1a8 <__func__.0+0x2c0>
    800294b4:	00f70663          	beq	a4,a5,800294c0 <vec_test_19+0xae>
    800294b8:	00005597          	auipc	a1,0x5
    800294bc:	d0058593          	addi	a1,a1,-768 # 8002e1b8 <__func__.0+0x2d0>
    800294c0:	00005517          	auipc	a0,0x5
    800294c4:	d3850513          	addi	a0,a0,-712 # 8002e1f8 <__func__.0+0x310>
    800294c8:	763010ef          	jal	8002b42a <printf>
    800294cc:	0002f797          	auipc	a5,0x2f
    800294d0:	b457c783          	lbu	a5,-1211(a5) # 80058011 <excpt+0x1>
    800294d4:	c789                	beqz	a5,800294de <vec_test_19+0xcc>
    800294d6:	6498                	ld	a4,8(s1)
    800294d8:	4789                	li	a5,2
    800294da:	00f70c63          	beq	a4,a5,800294f2 <vec_test_19+0xe0>
    800294de:	00005517          	auipc	a0,0x5
    800294e2:	d2250513          	addi	a0,a0,-734 # 8002e200 <__func__.0+0x318>
    800294e6:	745010ef          	jal	8002b42a <printf>
    800294ea:	02900513          	li	a0,41
    800294ee:	42b000ef          	jal	8002a118 <putchar>
    800294f2:	4529                	li	a0,10
    800294f4:	425000ef          	jal	8002a118 <putchar>
    800294f8:	0002f417          	auipc	s0,0x2f
    800294fc:	b1944403          	lbu	s0,-1255(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029500:	00005597          	auipc	a1,0x5
    80029504:	cb858593          	addi	a1,a1,-840 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029508:	cc11                	beqz	s0,80029524 <vec_test_19+0x112>
    8002950a:	6498                	ld	a4,8(s1)
    8002950c:	4789                	li	a5,2
    TEST_END();
    8002950e:	00005597          	auipc	a1,0x5
    80029512:	c9a58593          	addi	a1,a1,-870 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029516:	00f70763          	beq	a4,a5,80029524 <vec_test_19+0x112>
    8002951a:	4401                	li	s0,0
    TEST_END();
    8002951c:	00005597          	auipc	a1,0x5
    80029520:	c9c58593          	addi	a1,a1,-868 # 8002e1b8 <__func__.0+0x2d0>
    80029524:	00005517          	auipc	a0,0x5
    80029528:	d3c50513          	addi	a0,a0,-708 # 8002e260 <__func__.0+0x378>
    8002952c:	6ff010ef          	jal	8002b42a <printf>
    80029530:	4511                	li	a0,4
    80029532:	9d7d70ef          	jal	80000f08 <goto_priv>
    80029536:	aeed80ef          	jal	80001824 <reset_state>

}
    8002953a:	60e2                	ld	ra,24(sp)
    8002953c:	8522                	mv	a0,s0
    8002953e:	6442                	ld	s0,16(sp)
    80029540:	64a2                	ld	s1,8(sp)
    80029542:	6105                	addi	sp,sp,32
    80029544:	8082                	ret

0000000080029546 <vec_test_20>:

bool vec_test_20(){
    80029546:	1101                	addi	sp,sp,-32

    TEST_START();
    80029548:	00005597          	auipc	a1,0x5
    8002954c:	93058593          	addi	a1,a1,-1744 # 8002de78 <__func__.4>
    80029550:	00005517          	auipc	a0,0x5
    80029554:	c7850513          	addi	a0,a0,-904 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_20(){
    80029558:	ec06                	sd	ra,24(sp)
    8002955a:	e822                	sd	s0,16(sp)
    8002955c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002955e:	6cd010ef          	jal	8002b42a <printf>
    80029562:	4529                	li	a0,10
    80029564:	3b5000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vmsif指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029568:	20000793          	li	a5,512
    8002956c:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029570:	40000793          	li	a5,1024
    80029574:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80029578:	47a1                	li	a5,8
    8002957a:	4745                	li	a4,17
    8002957c:	80e7f2d7          	vsetvl	t0,a5,a4
    80029580:	5e00b057          	vmv.v.i	v0,1
    80029584:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsif.m 的执行条件
    set_vmsifm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029588:	57fd                	li	a5,-1
    8002958a:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002958e:	008025f3          	csrr	a1,vstart
    80029592:	00010517          	auipc	a0,0x10
    80029596:	e7e50513          	addi	a0,a0,-386 # 80039410 <__func__.0+0xb528>
    8002959a:	691010ef          	jal	8002b42a <printf>

    // 执行 vmsif.m 指令
    TEST_SETUP_EXCEPT();
    8002959e:	86fd70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800295a2:	5041a2d7          	vmsif.m	v5,v4,v0.t
    execute_vmsif_m();
    excpt_info();
    800295a6:	aa9d70ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800295aa:	08200593          	li	a1,130
    800295ae:	00010617          	auipc	a2,0x10
    800295b2:	09260613          	addi	a2,a2,146 # 80039640 <__func__.0+0xb758>
    800295b6:	00005517          	auipc	a0,0x5
    800295ba:	c2a50513          	addi	a0,a0,-982 # 8002e1e0 <__func__.0+0x2f8>
    800295be:	66d010ef          	jal	8002b42a <printf>
    800295c2:	0002f797          	auipc	a5,0x2f
    800295c6:	a4f7c783          	lbu	a5,-1457(a5) # 80058011 <excpt+0x1>
    800295ca:	0002f497          	auipc	s1,0x2f
    800295ce:	a4648493          	addi	s1,s1,-1466 # 80058010 <excpt>
    800295d2:	00005597          	auipc	a1,0x5
    800295d6:	be658593          	addi	a1,a1,-1050 # 8002e1b8 <__func__.0+0x2d0>
    800295da:	cf89                	beqz	a5,800295f4 <vec_test_20+0xae>
    800295dc:	6498                	ld	a4,8(s1)
    800295de:	4789                	li	a5,2
    800295e0:	00005597          	auipc	a1,0x5
    800295e4:	bc858593          	addi	a1,a1,-1080 # 8002e1a8 <__func__.0+0x2c0>
    800295e8:	00f70663          	beq	a4,a5,800295f4 <vec_test_20+0xae>
    800295ec:	00005597          	auipc	a1,0x5
    800295f0:	bcc58593          	addi	a1,a1,-1076 # 8002e1b8 <__func__.0+0x2d0>
    800295f4:	00005517          	auipc	a0,0x5
    800295f8:	c0450513          	addi	a0,a0,-1020 # 8002e1f8 <__func__.0+0x310>
    800295fc:	62f010ef          	jal	8002b42a <printf>
    80029600:	0002f797          	auipc	a5,0x2f
    80029604:	a117c783          	lbu	a5,-1519(a5) # 80058011 <excpt+0x1>
    80029608:	c789                	beqz	a5,80029612 <vec_test_20+0xcc>
    8002960a:	6498                	ld	a4,8(s1)
    8002960c:	4789                	li	a5,2
    8002960e:	00f70c63          	beq	a4,a5,80029626 <vec_test_20+0xe0>
    80029612:	00005517          	auipc	a0,0x5
    80029616:	bee50513          	addi	a0,a0,-1042 # 8002e200 <__func__.0+0x318>
    8002961a:	611010ef          	jal	8002b42a <printf>
    8002961e:	02900513          	li	a0,41
    80029622:	2f7000ef          	jal	8002a118 <putchar>
    80029626:	4529                	li	a0,10
    80029628:	2f1000ef          	jal	8002a118 <putchar>
    8002962c:	0002f417          	auipc	s0,0x2f
    80029630:	9e544403          	lbu	s0,-1563(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029634:	00005597          	auipc	a1,0x5
    80029638:	b8458593          	addi	a1,a1,-1148 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002963c:	cc11                	beqz	s0,80029658 <vec_test_20+0x112>
    8002963e:	6498                	ld	a4,8(s1)
    80029640:	4789                	li	a5,2
    TEST_END();
    80029642:	00005597          	auipc	a1,0x5
    80029646:	b6658593          	addi	a1,a1,-1178 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002964a:	00f70763          	beq	a4,a5,80029658 <vec_test_20+0x112>
    8002964e:	4401                	li	s0,0
    TEST_END();
    80029650:	00005597          	auipc	a1,0x5
    80029654:	b6858593          	addi	a1,a1,-1176 # 8002e1b8 <__func__.0+0x2d0>
    80029658:	00005517          	auipc	a0,0x5
    8002965c:	c0850513          	addi	a0,a0,-1016 # 8002e260 <__func__.0+0x378>
    80029660:	5cb010ef          	jal	8002b42a <printf>
    80029664:	4511                	li	a0,4
    80029666:	8a3d70ef          	jal	80000f08 <goto_priv>
    8002966a:	9bad80ef          	jal	80001824 <reset_state>

}
    8002966e:	60e2                	ld	ra,24(sp)
    80029670:	8522                	mv	a0,s0
    80029672:	6442                	ld	s0,16(sp)
    80029674:	64a2                	ld	s1,8(sp)
    80029676:	6105                	addi	sp,sp,32
    80029678:	8082                	ret

000000008002967a <vec_test_21>:

bool vec_test_21(){
    8002967a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002967c:	00005597          	auipc	a1,0x5
    80029680:	80c58593          	addi	a1,a1,-2036 # 8002de88 <__func__.3>
    80029684:	00005517          	auipc	a0,0x5
    80029688:	b4450513          	addi	a0,a0,-1212 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_21(){
    8002968c:	ec06                	sd	ra,24(sp)
    8002968e:	e822                	sd	s0,16(sp)
    80029690:	e426                	sd	s1,8(sp)
    TEST_START();
    80029692:	599010ef          	jal	8002b42a <printf>
    80029696:	4529                	li	a0,10
    80029698:	281000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vmsof指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002969c:	20000793          	li	a5,512
    800296a0:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800296a4:	40000793          	li	a5,1024
    800296a8:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800296ac:	47a1                	li	a5,8
    800296ae:	4745                	li	a4,17
    800296b0:	80e7f2d7          	vsetvl	t0,a5,a4
    800296b4:	5e00b057          	vmv.v.i	v0,1
    800296b8:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsof.m 的执行条件
    set_vmsofm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800296bc:	57fd                	li	a5,-1
    800296be:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800296c2:	008025f3          	csrr	a1,vstart
    800296c6:	00010517          	auipc	a0,0x10
    800296ca:	d4a50513          	addi	a0,a0,-694 # 80039410 <__func__.0+0xb528>
    800296ce:	55d010ef          	jal	8002b42a <printf>

    // 执行 vmsof.m 指令
    TEST_SETUP_EXCEPT();
    800296d2:	f3ad70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800296d6:	504122d7          	vmsof.m	v5,v4,v0.t
    execute_vmsof_m();
    excpt_info();
    800296da:	975d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296de:	08200593          	li	a1,130
    800296e2:	00010617          	auipc	a2,0x10
    800296e6:	f5e60613          	addi	a2,a2,-162 # 80039640 <__func__.0+0xb758>
    800296ea:	00005517          	auipc	a0,0x5
    800296ee:	af650513          	addi	a0,a0,-1290 # 8002e1e0 <__func__.0+0x2f8>
    800296f2:	539010ef          	jal	8002b42a <printf>
    800296f6:	0002f797          	auipc	a5,0x2f
    800296fa:	91b7c783          	lbu	a5,-1765(a5) # 80058011 <excpt+0x1>
    800296fe:	0002f497          	auipc	s1,0x2f
    80029702:	91248493          	addi	s1,s1,-1774 # 80058010 <excpt>
    80029706:	00005597          	auipc	a1,0x5
    8002970a:	ab258593          	addi	a1,a1,-1358 # 8002e1b8 <__func__.0+0x2d0>
    8002970e:	cf89                	beqz	a5,80029728 <vec_test_21+0xae>
    80029710:	6498                	ld	a4,8(s1)
    80029712:	4789                	li	a5,2
    80029714:	00005597          	auipc	a1,0x5
    80029718:	a9458593          	addi	a1,a1,-1388 # 8002e1a8 <__func__.0+0x2c0>
    8002971c:	00f70663          	beq	a4,a5,80029728 <vec_test_21+0xae>
    80029720:	00005597          	auipc	a1,0x5
    80029724:	a9858593          	addi	a1,a1,-1384 # 8002e1b8 <__func__.0+0x2d0>
    80029728:	00005517          	auipc	a0,0x5
    8002972c:	ad050513          	addi	a0,a0,-1328 # 8002e1f8 <__func__.0+0x310>
    80029730:	4fb010ef          	jal	8002b42a <printf>
    80029734:	0002f797          	auipc	a5,0x2f
    80029738:	8dd7c783          	lbu	a5,-1827(a5) # 80058011 <excpt+0x1>
    8002973c:	c789                	beqz	a5,80029746 <vec_test_21+0xcc>
    8002973e:	6498                	ld	a4,8(s1)
    80029740:	4789                	li	a5,2
    80029742:	00f70c63          	beq	a4,a5,8002975a <vec_test_21+0xe0>
    80029746:	00005517          	auipc	a0,0x5
    8002974a:	aba50513          	addi	a0,a0,-1350 # 8002e200 <__func__.0+0x318>
    8002974e:	4dd010ef          	jal	8002b42a <printf>
    80029752:	02900513          	li	a0,41
    80029756:	1c3000ef          	jal	8002a118 <putchar>
    8002975a:	4529                	li	a0,10
    8002975c:	1bd000ef          	jal	8002a118 <putchar>
    80029760:	0002f417          	auipc	s0,0x2f
    80029764:	8b144403          	lbu	s0,-1871(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029768:	00005597          	auipc	a1,0x5
    8002976c:	a5058593          	addi	a1,a1,-1456 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029770:	cc11                	beqz	s0,8002978c <vec_test_21+0x112>
    80029772:	6498                	ld	a4,8(s1)
    80029774:	4789                	li	a5,2
    TEST_END();
    80029776:	00005597          	auipc	a1,0x5
    8002977a:	a3258593          	addi	a1,a1,-1486 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002977e:	00f70763          	beq	a4,a5,8002978c <vec_test_21+0x112>
    80029782:	4401                	li	s0,0
    TEST_END();
    80029784:	00005597          	auipc	a1,0x5
    80029788:	a3458593          	addi	a1,a1,-1484 # 8002e1b8 <__func__.0+0x2d0>
    8002978c:	00005517          	auipc	a0,0x5
    80029790:	ad450513          	addi	a0,a0,-1324 # 8002e260 <__func__.0+0x378>
    80029794:	497010ef          	jal	8002b42a <printf>
    80029798:	4511                	li	a0,4
    8002979a:	f6ed70ef          	jal	80000f08 <goto_priv>
    8002979e:	886d80ef          	jal	80001824 <reset_state>

}
    800297a2:	60e2                	ld	ra,24(sp)
    800297a4:	8522                	mv	a0,s0
    800297a6:	6442                	ld	s0,16(sp)
    800297a8:	64a2                	ld	s1,8(sp)
    800297aa:	6105                	addi	sp,sp,32
    800297ac:	8082                	ret

00000000800297ae <vec_test_22>:

bool vec_test_22(){
    800297ae:	1101                	addi	sp,sp,-32

    TEST_START();
    800297b0:	00004597          	auipc	a1,0x4
    800297b4:	6e858593          	addi	a1,a1,1768 # 8002de98 <__func__.2>
    800297b8:	00005517          	auipc	a0,0x5
    800297bc:	a1050513          	addi	a0,a0,-1520 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_22(){
    800297c0:	ec06                	sd	ra,24(sp)
    800297c2:	e822                	sd	s0,16(sp)
    800297c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800297c6:	465010ef          	jal	8002b42a <printf>
    800297ca:	4529                	li	a0,10
    800297cc:	14d000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行viota.m 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800297d0:	20000793          	li	a5,512
    800297d4:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800297d8:	40000793          	li	a5,1024
    800297dc:	3007a073          	csrs	mstatus,a5
// 设置 viota.m 执行条件
static inline void set_viota_m_conditions(int vl, int sew, int lmull, int v0_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    800297e0:	47a1                	li	a5,8
    800297e2:	4745                	li	a4,17
    800297e4:	80e7f2d7          	vsetvl	t0,a5,a4
    800297e8:	5e00b057          	vmv.v.i	v0,1
    int v0_init = 1;    // 初始化 v0 的值为 1（全1）

    // 设置 viota.m 的执行条件
    set_viota_m_conditions(vl, sew, lmull, v0_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800297ec:	57fd                	li	a5,-1
    800297ee:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800297f2:	008025f3          	csrr	a1,vstart
    800297f6:	00010517          	auipc	a0,0x10
    800297fa:	c1a50513          	addi	a0,a0,-998 # 80039410 <__func__.0+0xb528>
    800297fe:	42d010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    80029802:	e0ad70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 viota.m 指令
static inline void execute_viota_m() {
    asm volatile (
    80029806:	52082357          	viota.m	v6,v0
    // 执行 viota.m 指令
    execute_viota_m();

    excpt_info();
    8002980a:	845d70ef          	jal	8000104e <excpt_info>



    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    8002980e:	08200593          	li	a1,130
    80029812:	00010617          	auipc	a2,0x10
    80029816:	e6e60613          	addi	a2,a2,-402 # 80039680 <__func__.0+0xb798>
    8002981a:	00005517          	auipc	a0,0x5
    8002981e:	9c650513          	addi	a0,a0,-1594 # 8002e1e0 <__func__.0+0x2f8>
    80029822:	409010ef          	jal	8002b42a <printf>
    80029826:	0002e797          	auipc	a5,0x2e
    8002982a:	7eb7c783          	lbu	a5,2027(a5) # 80058011 <excpt+0x1>
    8002982e:	0002e497          	auipc	s1,0x2e
    80029832:	7e248493          	addi	s1,s1,2018 # 80058010 <excpt>
    80029836:	00005597          	auipc	a1,0x5
    8002983a:	98258593          	addi	a1,a1,-1662 # 8002e1b8 <__func__.0+0x2d0>
    8002983e:	cf89                	beqz	a5,80029858 <vec_test_22+0xaa>
    80029840:	6498                	ld	a4,8(s1)
    80029842:	4789                	li	a5,2
    80029844:	00005597          	auipc	a1,0x5
    80029848:	96458593          	addi	a1,a1,-1692 # 8002e1a8 <__func__.0+0x2c0>
    8002984c:	00f70663          	beq	a4,a5,80029858 <vec_test_22+0xaa>
    80029850:	00005597          	auipc	a1,0x5
    80029854:	96858593          	addi	a1,a1,-1688 # 8002e1b8 <__func__.0+0x2d0>
    80029858:	00005517          	auipc	a0,0x5
    8002985c:	9a050513          	addi	a0,a0,-1632 # 8002e1f8 <__func__.0+0x310>
    80029860:	3cb010ef          	jal	8002b42a <printf>
    80029864:	0002e797          	auipc	a5,0x2e
    80029868:	7ad7c783          	lbu	a5,1965(a5) # 80058011 <excpt+0x1>
    8002986c:	c789                	beqz	a5,80029876 <vec_test_22+0xc8>
    8002986e:	6498                	ld	a4,8(s1)
    80029870:	4789                	li	a5,2
    80029872:	00f70c63          	beq	a4,a5,8002988a <vec_test_22+0xdc>
    80029876:	00005517          	auipc	a0,0x5
    8002987a:	98a50513          	addi	a0,a0,-1654 # 8002e200 <__func__.0+0x318>
    8002987e:	3ad010ef          	jal	8002b42a <printf>
    80029882:	02900513          	li	a0,41
    80029886:	093000ef          	jal	8002a118 <putchar>
    8002988a:	4529                	li	a0,10
    8002988c:	08d000ef          	jal	8002a118 <putchar>
    80029890:	0002e417          	auipc	s0,0x2e
    80029894:	78144403          	lbu	s0,1921(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029898:	00005597          	auipc	a1,0x5
    8002989c:	92058593          	addi	a1,a1,-1760 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800298a0:	cc11                	beqz	s0,800298bc <vec_test_22+0x10e>
    800298a2:	6498                	ld	a4,8(s1)
    800298a4:	4789                	li	a5,2
    TEST_END();
    800298a6:	00005597          	auipc	a1,0x5
    800298aa:	90258593          	addi	a1,a1,-1790 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800298ae:	00f70763          	beq	a4,a5,800298bc <vec_test_22+0x10e>
    800298b2:	4401                	li	s0,0
    TEST_END();
    800298b4:	00005597          	auipc	a1,0x5
    800298b8:	90458593          	addi	a1,a1,-1788 # 8002e1b8 <__func__.0+0x2d0>
    800298bc:	00005517          	auipc	a0,0x5
    800298c0:	9a450513          	addi	a0,a0,-1628 # 8002e260 <__func__.0+0x378>
    800298c4:	367010ef          	jal	8002b42a <printf>
    800298c8:	4511                	li	a0,4
    800298ca:	e3ed70ef          	jal	80000f08 <goto_priv>
    800298ce:	f57d70ef          	jal	80001824 <reset_state>

}
    800298d2:	60e2                	ld	ra,24(sp)
    800298d4:	8522                	mv	a0,s0
    800298d6:	6442                	ld	s0,16(sp)
    800298d8:	64a2                	ld	s1,8(sp)
    800298da:	6105                	addi	sp,sp,32
    800298dc:	8082                	ret

00000000800298de <vec_test_23>:



bool vec_test_23(){
    800298de:	1101                	addi	sp,sp,-32

    TEST_START();
    800298e0:	00004597          	auipc	a1,0x4
    800298e4:	5c858593          	addi	a1,a1,1480 # 8002dea8 <__func__.1>
    800298e8:	00005517          	auipc	a0,0x5
    800298ec:	8e050513          	addi	a0,a0,-1824 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_23(){
    800298f0:	ec06                	sd	ra,24(sp)
    800298f2:	e822                	sd	s0,16(sp)
    800298f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800298f6:	335010ef          	jal	8002b42a <printf>
    800298fa:	4529                	li	a0,10
    800298fc:	01d000ef          	jal	8002a118 <putchar>
    //如果 vstart 非零，执行vcompress 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029900:	20000793          	li	a5,512
    80029904:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029908:	40000793          	li	a5,1024
    8002990c:	3007a073          	csrs	mstatus,a5
// 设置 vcompress 执行条件
static inline void set_vcompress_conditions(int vl, int sew, int lmull, int v0_init, int v4_init, int v8_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029910:	47a1                	li	a5,8
    80029912:	4745                	li	a4,17
    80029914:	80e7f2d7          	vsetvl	t0,a5,a4
    80029918:	5e00b057          	vmv.v.i	v0,1
    8002991c:	5e01b257          	vmv.v.i	v4,3
    80029920:	5e003457          	vmv.v.i	v8,0
    int v8_init = 0;    // 初始化 v8 的值为 0

    // 设置 vcompress 的执行条件
    set_vcompress_conditions(vl, sew, lmull, v0_init, v4_init, v8_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029924:	57fd                	li	a5,-1
    80029926:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002992a:	008025f3          	csrr	a1,vstart
    8002992e:	00010517          	auipc	a0,0x10
    80029932:	ae250513          	addi	a0,a0,-1310 # 80039410 <__func__.0+0xb528>
    80029936:	2f5010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    8002993a:	cd2d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vcompress 指令
static inline void execute_vcompress() {
    asm volatile (
    8002993e:	5e402457          	vcompress.vm	v8,v4,v0
    // 执行 vcompress 指令
    execute_vcompress();
    excpt_info();
    80029942:	f0cd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029946:	08200593          	li	a1,130
    8002994a:	00010617          	auipc	a2,0x10
    8002994e:	d7660613          	addi	a2,a2,-650 # 800396c0 <__func__.0+0xb7d8>
    80029952:	00005517          	auipc	a0,0x5
    80029956:	88e50513          	addi	a0,a0,-1906 # 8002e1e0 <__func__.0+0x2f8>
    8002995a:	2d1010ef          	jal	8002b42a <printf>
    8002995e:	0002e797          	auipc	a5,0x2e
    80029962:	6b37c783          	lbu	a5,1715(a5) # 80058011 <excpt+0x1>
    80029966:	0002e497          	auipc	s1,0x2e
    8002996a:	6aa48493          	addi	s1,s1,1706 # 80058010 <excpt>
    8002996e:	00005597          	auipc	a1,0x5
    80029972:	84a58593          	addi	a1,a1,-1974 # 8002e1b8 <__func__.0+0x2d0>
    80029976:	cf89                	beqz	a5,80029990 <vec_test_23+0xb2>
    80029978:	6498                	ld	a4,8(s1)
    8002997a:	4789                	li	a5,2
    8002997c:	00005597          	auipc	a1,0x5
    80029980:	82c58593          	addi	a1,a1,-2004 # 8002e1a8 <__func__.0+0x2c0>
    80029984:	00f70663          	beq	a4,a5,80029990 <vec_test_23+0xb2>
    80029988:	00005597          	auipc	a1,0x5
    8002998c:	83058593          	addi	a1,a1,-2000 # 8002e1b8 <__func__.0+0x2d0>
    80029990:	00005517          	auipc	a0,0x5
    80029994:	86850513          	addi	a0,a0,-1944 # 8002e1f8 <__func__.0+0x310>
    80029998:	293010ef          	jal	8002b42a <printf>
    8002999c:	0002e797          	auipc	a5,0x2e
    800299a0:	6757c783          	lbu	a5,1653(a5) # 80058011 <excpt+0x1>
    800299a4:	c789                	beqz	a5,800299ae <vec_test_23+0xd0>
    800299a6:	6498                	ld	a4,8(s1)
    800299a8:	4789                	li	a5,2
    800299aa:	00f70c63          	beq	a4,a5,800299c2 <vec_test_23+0xe4>
    800299ae:	00005517          	auipc	a0,0x5
    800299b2:	85250513          	addi	a0,a0,-1966 # 8002e200 <__func__.0+0x318>
    800299b6:	275010ef          	jal	8002b42a <printf>
    800299ba:	02900513          	li	a0,41
    800299be:	75a000ef          	jal	8002a118 <putchar>
    800299c2:	4529                	li	a0,10
    800299c4:	754000ef          	jal	8002a118 <putchar>
    800299c8:	0002e417          	auipc	s0,0x2e
    800299cc:	64944403          	lbu	s0,1609(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800299d0:	00004597          	auipc	a1,0x4
    800299d4:	7e858593          	addi	a1,a1,2024 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800299d8:	cc11                	beqz	s0,800299f4 <vec_test_23+0x116>
    800299da:	6498                	ld	a4,8(s1)
    800299dc:	4789                	li	a5,2
    TEST_END();
    800299de:	00004597          	auipc	a1,0x4
    800299e2:	7ca58593          	addi	a1,a1,1994 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800299e6:	00f70763          	beq	a4,a5,800299f4 <vec_test_23+0x116>
    800299ea:	4401                	li	s0,0
    TEST_END();
    800299ec:	00004597          	auipc	a1,0x4
    800299f0:	7cc58593          	addi	a1,a1,1996 # 8002e1b8 <__func__.0+0x2d0>
    800299f4:	00005517          	auipc	a0,0x5
    800299f8:	86c50513          	addi	a0,a0,-1940 # 8002e260 <__func__.0+0x378>
    800299fc:	22f010ef          	jal	8002b42a <printf>
    80029a00:	4511                	li	a0,4
    80029a02:	d06d70ef          	jal	80000f08 <goto_priv>
    80029a06:	e1fd70ef          	jal	80001824 <reset_state>

}
    80029a0a:	60e2                	ld	ra,24(sp)
    80029a0c:	8522                	mv	a0,s0
    80029a0e:	6442                	ld	s0,16(sp)
    80029a10:	64a2                	ld	s1,8(sp)
    80029a12:	6105                	addi	sp,sp,32
    80029a14:	8082                	ret

0000000080029a16 <vec_test_24>:



bool vec_test_24(){
    80029a16:	1101                	addi	sp,sp,-32

    TEST_START();
    80029a18:	00004597          	auipc	a1,0x4
    80029a1c:	4a058593          	addi	a1,a1,1184 # 8002deb8 <__func__.0>
    80029a20:	00004517          	auipc	a0,0x4
    80029a24:	7a850513          	addi	a0,a0,1960 # 8002e1c8 <__func__.0+0x2e0>
bool vec_test_24(){
    80029a28:	ec06                	sd	ra,24(sp)
    80029a2a:	e822                	sd	s0,16(sp)
    80029a2c:	e426                	sd	s1,8(sp)
    TEST_START();
    80029a2e:	1fd010ef          	jal	8002b42a <printf>
    80029a32:	4529                	li	a0,10
    80029a34:	6e4000ef          	jal	8002a118 <putchar>
    //当执行一个向量指令时，如设置 EGS > VLMAX


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029a38:	20000793          	li	a5,512
    80029a3c:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029a40:	40000793          	li	a5,1024
    80029a44:	3007a073          	csrs	mstatus,a5
    int vl = 32;       // 向量长

    // 计算 VLMAX
    int vlen = 128;     // 硬件的向量寄存器长度（128 位）
    int vlmax = (vlen / sew) * lmull;
    printf("Calculated VLMAX: %d elements\n", vlmax);
    80029a48:	10000593          	li	a1,256
    80029a4c:	00010517          	auipc	a0,0x10
    80029a50:	cb450513          	addi	a0,a0,-844 # 80039700 <__func__.0+0xb818>
    80029a54:	1d7010ef          	jal	8002b42a <printf>

    // 设置 EGS > VLMAX 的执行条件
    // set_egs_greater_vlmax_conditions(vl, sew, lmull);

    excpt_info();
    80029a58:	df6d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a5c:	08200593          	li	a1,130
    80029a60:	00010617          	auipc	a2,0x10
    80029a64:	c6060613          	addi	a2,a2,-928 # 800396c0 <__func__.0+0xb7d8>
    80029a68:	00004517          	auipc	a0,0x4
    80029a6c:	77850513          	addi	a0,a0,1912 # 8002e1e0 <__func__.0+0x2f8>
    80029a70:	1bb010ef          	jal	8002b42a <printf>
    80029a74:	0002e797          	auipc	a5,0x2e
    80029a78:	59d7c783          	lbu	a5,1437(a5) # 80058011 <excpt+0x1>
    80029a7c:	0002e497          	auipc	s1,0x2e
    80029a80:	59448493          	addi	s1,s1,1428 # 80058010 <excpt>
    80029a84:	00004597          	auipc	a1,0x4
    80029a88:	73458593          	addi	a1,a1,1844 # 8002e1b8 <__func__.0+0x2d0>
    80029a8c:	cf89                	beqz	a5,80029aa6 <vec_test_24+0x90>
    80029a8e:	6498                	ld	a4,8(s1)
    80029a90:	4789                	li	a5,2
    80029a92:	00004597          	auipc	a1,0x4
    80029a96:	71658593          	addi	a1,a1,1814 # 8002e1a8 <__func__.0+0x2c0>
    80029a9a:	00f70663          	beq	a4,a5,80029aa6 <vec_test_24+0x90>
    80029a9e:	00004597          	auipc	a1,0x4
    80029aa2:	71a58593          	addi	a1,a1,1818 # 8002e1b8 <__func__.0+0x2d0>
    80029aa6:	00004517          	auipc	a0,0x4
    80029aaa:	75250513          	addi	a0,a0,1874 # 8002e1f8 <__func__.0+0x310>
    80029aae:	17d010ef          	jal	8002b42a <printf>
    80029ab2:	0002e797          	auipc	a5,0x2e
    80029ab6:	55f7c783          	lbu	a5,1375(a5) # 80058011 <excpt+0x1>
    80029aba:	c789                	beqz	a5,80029ac4 <vec_test_24+0xae>
    80029abc:	6498                	ld	a4,8(s1)
    80029abe:	4789                	li	a5,2
    80029ac0:	00f70c63          	beq	a4,a5,80029ad8 <vec_test_24+0xc2>
    80029ac4:	00004517          	auipc	a0,0x4
    80029ac8:	73c50513          	addi	a0,a0,1852 # 8002e200 <__func__.0+0x318>
    80029acc:	15f010ef          	jal	8002b42a <printf>
    80029ad0:	02900513          	li	a0,41
    80029ad4:	644000ef          	jal	8002a118 <putchar>
    80029ad8:	4529                	li	a0,10
    80029ada:	63e000ef          	jal	8002a118 <putchar>
    80029ade:	0002e417          	auipc	s0,0x2e
    80029ae2:	53344403          	lbu	s0,1331(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029ae6:	00004597          	auipc	a1,0x4
    80029aea:	6d258593          	addi	a1,a1,1746 # 8002e1b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029aee:	cc11                	beqz	s0,80029b0a <vec_test_24+0xf4>
    80029af0:	6498                	ld	a4,8(s1)
    80029af2:	4789                	li	a5,2
    TEST_END();
    80029af4:	00004597          	auipc	a1,0x4
    80029af8:	6b458593          	addi	a1,a1,1716 # 8002e1a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029afc:	00f70763          	beq	a4,a5,80029b0a <vec_test_24+0xf4>
    80029b00:	4401                	li	s0,0
    TEST_END();
    80029b02:	00004597          	auipc	a1,0x4
    80029b06:	6b658593          	addi	a1,a1,1718 # 8002e1b8 <__func__.0+0x2d0>
    80029b0a:	00004517          	auipc	a0,0x4
    80029b0e:	75650513          	addi	a0,a0,1878 # 8002e260 <__func__.0+0x378>
    80029b12:	119010ef          	jal	8002b42a <printf>
    80029b16:	4511                	li	a0,4
    80029b18:	bf0d70ef          	jal	80000f08 <goto_priv>
    80029b1c:	d09d70ef          	jal	80001824 <reset_state>

}
    80029b20:	60e2                	ld	ra,24(sp)
    80029b22:	8522                	mv	a0,s0
    80029b24:	6442                	ld	s0,16(sp)
    80029b26:	64a2                	ld	s1,8(sp)
    80029b28:	6105                	addi	sp,sp,32
    80029b2a:	8082                	ret

0000000080029b2c <m_test_entry_two_1>:
        CSRC(mip, 1ULL << (binary_to_power_of_two(num))); \
        mode##handler(); \
    }


HANDLE_INTERRUPT(m,1)
    80029b2c:	1141                	addi	sp,sp,-16
    80029b2e:	4605                	li	a2,1
    80029b30:	00010597          	auipc	a1,0x10
    80029b34:	bf058593          	addi	a1,a1,-1040 # 80039720 <__func__.0+0xb838>
    80029b38:	00010517          	auipc	a0,0x10
    80029b3c:	bf050513          	addi	a0,a0,-1040 # 80039728 <__func__.0+0xb840>
    80029b40:	e406                	sd	ra,8(sp)
    80029b42:	0e9010ef          	jal	8002b42a <printf>
    80029b46:	3440f073          	csrci	mip,1
    80029b4a:	60a2                	ld	ra,8(sp)
    80029b4c:	0141                	addi	sp,sp,16
    80029b4e:	d42d706f          	j	80001090 <mhandler>

0000000080029b52 <m_test_entry_two_2>:
HANDLE_INTERRUPT(m,2)
    80029b52:	1141                	addi	sp,sp,-16
    80029b54:	4609                	li	a2,2
    80029b56:	00010597          	auipc	a1,0x10
    80029b5a:	bca58593          	addi	a1,a1,-1078 # 80039720 <__func__.0+0xb838>
    80029b5e:	00010517          	auipc	a0,0x10
    80029b62:	bca50513          	addi	a0,a0,-1078 # 80039728 <__func__.0+0xb840>
    80029b66:	e406                	sd	ra,8(sp)
    80029b68:	0c3010ef          	jal	8002b42a <printf>
    80029b6c:	34417073          	csrci	mip,2
    80029b70:	60a2                	ld	ra,8(sp)
    80029b72:	0141                	addi	sp,sp,16
    80029b74:	d1cd706f          	j	80001090 <mhandler>

0000000080029b78 <m_test_entry_two_3>:
HANDLE_INTERRUPT(m,3)
    80029b78:	1141                	addi	sp,sp,-16
    80029b7a:	460d                	li	a2,3
    80029b7c:	00010597          	auipc	a1,0x10
    80029b80:	ba458593          	addi	a1,a1,-1116 # 80039720 <__func__.0+0xb838>
    80029b84:	00010517          	auipc	a0,0x10
    80029b88:	ba450513          	addi	a0,a0,-1116 # 80039728 <__func__.0+0xb840>
    80029b8c:	e406                	sd	ra,8(sp)
    80029b8e:	09d010ef          	jal	8002b42a <printf>
    80029b92:	34407073          	csrci	mip,0
    80029b96:	60a2                	ld	ra,8(sp)
    80029b98:	0141                	addi	sp,sp,16
    80029b9a:	cf6d706f          	j	80001090 <mhandler>

0000000080029b9e <m_test_entry_two_4>:
HANDLE_INTERRUPT(m,4)
    80029b9e:	1141                	addi	sp,sp,-16
    80029ba0:	4611                	li	a2,4
    80029ba2:	00010597          	auipc	a1,0x10
    80029ba6:	b7e58593          	addi	a1,a1,-1154 # 80039720 <__func__.0+0xb838>
    80029baa:	00010517          	auipc	a0,0x10
    80029bae:	b7e50513          	addi	a0,a0,-1154 # 80039728 <__func__.0+0xb840>
    80029bb2:	e406                	sd	ra,8(sp)
    80029bb4:	077010ef          	jal	8002b42a <printf>
    80029bb8:	34427073          	csrci	mip,4
    80029bbc:	60a2                	ld	ra,8(sp)
    80029bbe:	0141                	addi	sp,sp,16
    80029bc0:	cd0d706f          	j	80001090 <mhandler>

0000000080029bc4 <m_test_entry_two_5>:
HANDLE_INTERRUPT(m,5)
    80029bc4:	1141                	addi	sp,sp,-16
    80029bc6:	4615                	li	a2,5
    80029bc8:	00010597          	auipc	a1,0x10
    80029bcc:	b5858593          	addi	a1,a1,-1192 # 80039720 <__func__.0+0xb838>
    80029bd0:	00010517          	auipc	a0,0x10
    80029bd4:	b5850513          	addi	a0,a0,-1192 # 80039728 <__func__.0+0xb840>
    80029bd8:	e406                	sd	ra,8(sp)
    80029bda:	051010ef          	jal	8002b42a <printf>
    80029bde:	34407073          	csrci	mip,0
    80029be2:	60a2                	ld	ra,8(sp)
    80029be4:	0141                	addi	sp,sp,16
    80029be6:	caad706f          	j	80001090 <mhandler>

0000000080029bea <m_test_entry_two_6>:
HANDLE_INTERRUPT(m,6)
    80029bea:	1141                	addi	sp,sp,-16
    80029bec:	4619                	li	a2,6
    80029bee:	00010597          	auipc	a1,0x10
    80029bf2:	b3258593          	addi	a1,a1,-1230 # 80039720 <__func__.0+0xb838>
    80029bf6:	00010517          	auipc	a0,0x10
    80029bfa:	b3250513          	addi	a0,a0,-1230 # 80039728 <__func__.0+0xb840>
    80029bfe:	e406                	sd	ra,8(sp)
    80029c00:	02b010ef          	jal	8002b42a <printf>
    80029c04:	34407073          	csrci	mip,0
    80029c08:	60a2                	ld	ra,8(sp)
    80029c0a:	0141                	addi	sp,sp,16
    80029c0c:	c84d706f          	j	80001090 <mhandler>

0000000080029c10 <m_test_entry_two_7>:
HANDLE_INTERRUPT(m,7)
    80029c10:	1141                	addi	sp,sp,-16
    80029c12:	461d                	li	a2,7
    80029c14:	00010597          	auipc	a1,0x10
    80029c18:	b0c58593          	addi	a1,a1,-1268 # 80039720 <__func__.0+0xb838>
    80029c1c:	00010517          	auipc	a0,0x10
    80029c20:	b0c50513          	addi	a0,a0,-1268 # 80039728 <__func__.0+0xb840>
    80029c24:	e406                	sd	ra,8(sp)
    80029c26:	005010ef          	jal	8002b42a <printf>
    80029c2a:	34407073          	csrci	mip,0
    80029c2e:	60a2                	ld	ra,8(sp)
    80029c30:	0141                	addi	sp,sp,16
    80029c32:	c5ed706f          	j	80001090 <mhandler>

0000000080029c36 <m_test_entry_two_8>:
HANDLE_INTERRUPT(m,8)
    80029c36:	1141                	addi	sp,sp,-16
    80029c38:	4621                	li	a2,8
    80029c3a:	00010597          	auipc	a1,0x10
    80029c3e:	ae658593          	addi	a1,a1,-1306 # 80039720 <__func__.0+0xb838>
    80029c42:	00010517          	auipc	a0,0x10
    80029c46:	ae650513          	addi	a0,a0,-1306 # 80039728 <__func__.0+0xb840>
    80029c4a:	e406                	sd	ra,8(sp)
    80029c4c:	7de010ef          	jal	8002b42a <printf>
    80029c50:	34447073          	csrci	mip,8
    80029c54:	60a2                	ld	ra,8(sp)
    80029c56:	0141                	addi	sp,sp,16
    80029c58:	c38d706f          	j	80001090 <mhandler>

0000000080029c5c <hs_test_entry_two_1>:

HANDLE_INTERRUPT(hs,1)
    80029c5c:	1141                	addi	sp,sp,-16
    80029c5e:	4605                	li	a2,1
    80029c60:	00010597          	auipc	a1,0x10
    80029c64:	af858593          	addi	a1,a1,-1288 # 80039758 <__func__.0+0xb870>
    80029c68:	00010517          	auipc	a0,0x10
    80029c6c:	ac050513          	addi	a0,a0,-1344 # 80039728 <__func__.0+0xb840>
    80029c70:	e406                	sd	ra,8(sp)
    80029c72:	7b8010ef          	jal	8002b42a <printf>
    80029c76:	3440f073          	csrci	mip,1
    80029c7a:	60a2                	ld	ra,8(sp)
    80029c7c:	0141                	addi	sp,sp,16
    80029c7e:	e44d706f          	j	800012c2 <hshandler>

0000000080029c82 <hs_test_entry_two_2>:
HANDLE_INTERRUPT(hs,2)
    80029c82:	1141                	addi	sp,sp,-16
    80029c84:	4609                	li	a2,2
    80029c86:	00010597          	auipc	a1,0x10
    80029c8a:	ad258593          	addi	a1,a1,-1326 # 80039758 <__func__.0+0xb870>
    80029c8e:	00010517          	auipc	a0,0x10
    80029c92:	a9a50513          	addi	a0,a0,-1382 # 80039728 <__func__.0+0xb840>
    80029c96:	e406                	sd	ra,8(sp)
    80029c98:	792010ef          	jal	8002b42a <printf>
    80029c9c:	34417073          	csrci	mip,2
    80029ca0:	60a2                	ld	ra,8(sp)
    80029ca2:	0141                	addi	sp,sp,16
    80029ca4:	e1ed706f          	j	800012c2 <hshandler>

0000000080029ca8 <hs_test_entry_two_3>:
HANDLE_INTERRUPT(hs,3)
    80029ca8:	1141                	addi	sp,sp,-16
    80029caa:	460d                	li	a2,3
    80029cac:	00010597          	auipc	a1,0x10
    80029cb0:	aac58593          	addi	a1,a1,-1364 # 80039758 <__func__.0+0xb870>
    80029cb4:	00010517          	auipc	a0,0x10
    80029cb8:	a7450513          	addi	a0,a0,-1420 # 80039728 <__func__.0+0xb840>
    80029cbc:	e406                	sd	ra,8(sp)
    80029cbe:	76c010ef          	jal	8002b42a <printf>
    80029cc2:	34407073          	csrci	mip,0
    80029cc6:	60a2                	ld	ra,8(sp)
    80029cc8:	0141                	addi	sp,sp,16
    80029cca:	df8d706f          	j	800012c2 <hshandler>

0000000080029cce <hs_test_entry_two_4>:
HANDLE_INTERRUPT(hs,4)
    80029cce:	1141                	addi	sp,sp,-16
    80029cd0:	4611                	li	a2,4
    80029cd2:	00010597          	auipc	a1,0x10
    80029cd6:	a8658593          	addi	a1,a1,-1402 # 80039758 <__func__.0+0xb870>
    80029cda:	00010517          	auipc	a0,0x10
    80029cde:	a4e50513          	addi	a0,a0,-1458 # 80039728 <__func__.0+0xb840>
    80029ce2:	e406                	sd	ra,8(sp)
    80029ce4:	746010ef          	jal	8002b42a <printf>
    80029ce8:	34427073          	csrci	mip,4
    80029cec:	60a2                	ld	ra,8(sp)
    80029cee:	0141                	addi	sp,sp,16
    80029cf0:	dd2d706f          	j	800012c2 <hshandler>

0000000080029cf4 <hs_test_entry_two_5>:
HANDLE_INTERRUPT(hs,5)
    80029cf4:	1141                	addi	sp,sp,-16
    80029cf6:	4615                	li	a2,5
    80029cf8:	00010597          	auipc	a1,0x10
    80029cfc:	a6058593          	addi	a1,a1,-1440 # 80039758 <__func__.0+0xb870>
    80029d00:	00010517          	auipc	a0,0x10
    80029d04:	a2850513          	addi	a0,a0,-1496 # 80039728 <__func__.0+0xb840>
    80029d08:	e406                	sd	ra,8(sp)
    80029d0a:	720010ef          	jal	8002b42a <printf>
    80029d0e:	34407073          	csrci	mip,0
    80029d12:	60a2                	ld	ra,8(sp)
    80029d14:	0141                	addi	sp,sp,16
    80029d16:	dacd706f          	j	800012c2 <hshandler>

0000000080029d1a <hs_test_entry_two_6>:
HANDLE_INTERRUPT(hs,6)
    80029d1a:	1141                	addi	sp,sp,-16
    80029d1c:	4619                	li	a2,6
    80029d1e:	00010597          	auipc	a1,0x10
    80029d22:	a3a58593          	addi	a1,a1,-1478 # 80039758 <__func__.0+0xb870>
    80029d26:	00010517          	auipc	a0,0x10
    80029d2a:	a0250513          	addi	a0,a0,-1534 # 80039728 <__func__.0+0xb840>
    80029d2e:	e406                	sd	ra,8(sp)
    80029d30:	6fa010ef          	jal	8002b42a <printf>
    80029d34:	34407073          	csrci	mip,0
    80029d38:	60a2                	ld	ra,8(sp)
    80029d3a:	0141                	addi	sp,sp,16
    80029d3c:	d86d706f          	j	800012c2 <hshandler>

0000000080029d40 <hs_test_entry_two_7>:
HANDLE_INTERRUPT(hs,7)
    80029d40:	1141                	addi	sp,sp,-16
    80029d42:	461d                	li	a2,7
    80029d44:	00010597          	auipc	a1,0x10
    80029d48:	a1458593          	addi	a1,a1,-1516 # 80039758 <__func__.0+0xb870>
    80029d4c:	00010517          	auipc	a0,0x10
    80029d50:	9dc50513          	addi	a0,a0,-1572 # 80039728 <__func__.0+0xb840>
    80029d54:	e406                	sd	ra,8(sp)
    80029d56:	6d4010ef          	jal	8002b42a <printf>
    80029d5a:	34407073          	csrci	mip,0
    80029d5e:	60a2                	ld	ra,8(sp)
    80029d60:	0141                	addi	sp,sp,16
    80029d62:	d60d706f          	j	800012c2 <hshandler>

0000000080029d66 <hs_test_entry_two_8>:
HANDLE_INTERRUPT(hs,8)
    80029d66:	1141                	addi	sp,sp,-16
    80029d68:	4621                	li	a2,8
    80029d6a:	00010597          	auipc	a1,0x10
    80029d6e:	9ee58593          	addi	a1,a1,-1554 # 80039758 <__func__.0+0xb870>
    80029d72:	00010517          	auipc	a0,0x10
    80029d76:	9b650513          	addi	a0,a0,-1610 # 80039728 <__func__.0+0xb840>
    80029d7a:	e406                	sd	ra,8(sp)
    80029d7c:	6ae010ef          	jal	8002b42a <printf>
    80029d80:	34447073          	csrci	mip,8
    80029d84:	60a2                	ld	ra,8(sp)
    80029d86:	0141                	addi	sp,sp,16
    80029d88:	d3ad706f          	j	800012c2 <hshandler>

0000000080029d8c <vs_test_entry_two_1>:

HANDLE_INTERRUPT(vs,1)
    80029d8c:	1141                	addi	sp,sp,-16
    80029d8e:	4605                	li	a2,1
    80029d90:	00010597          	auipc	a1,0x10
    80029d94:	9d058593          	addi	a1,a1,-1584 # 80039760 <__func__.0+0xb878>
    80029d98:	00010517          	auipc	a0,0x10
    80029d9c:	99050513          	addi	a0,a0,-1648 # 80039728 <__func__.0+0xb840>
    80029da0:	e406                	sd	ra,8(sp)
    80029da2:	688010ef          	jal	8002b42a <printf>
    80029da6:	3440f073          	csrci	mip,1
    80029daa:	60a2                	ld	ra,8(sp)
    80029dac:	0141                	addi	sp,sp,16
    80029dae:	f46d706f          	j	800014f4 <vshandler>

0000000080029db2 <vs_test_entry_two_2>:
HANDLE_INTERRUPT(vs,2)
    80029db2:	1141                	addi	sp,sp,-16
    80029db4:	4609                	li	a2,2
    80029db6:	00010597          	auipc	a1,0x10
    80029dba:	9aa58593          	addi	a1,a1,-1622 # 80039760 <__func__.0+0xb878>
    80029dbe:	00010517          	auipc	a0,0x10
    80029dc2:	96a50513          	addi	a0,a0,-1686 # 80039728 <__func__.0+0xb840>
    80029dc6:	e406                	sd	ra,8(sp)
    80029dc8:	662010ef          	jal	8002b42a <printf>
    80029dcc:	34417073          	csrci	mip,2
    80029dd0:	60a2                	ld	ra,8(sp)
    80029dd2:	0141                	addi	sp,sp,16
    80029dd4:	f20d706f          	j	800014f4 <vshandler>

0000000080029dd8 <vs_test_entry_two_3>:
HANDLE_INTERRUPT(vs,3)
    80029dd8:	1141                	addi	sp,sp,-16
    80029dda:	460d                	li	a2,3
    80029ddc:	00010597          	auipc	a1,0x10
    80029de0:	98458593          	addi	a1,a1,-1660 # 80039760 <__func__.0+0xb878>
    80029de4:	00010517          	auipc	a0,0x10
    80029de8:	94450513          	addi	a0,a0,-1724 # 80039728 <__func__.0+0xb840>
    80029dec:	e406                	sd	ra,8(sp)
    80029dee:	63c010ef          	jal	8002b42a <printf>
    80029df2:	34407073          	csrci	mip,0
    80029df6:	60a2                	ld	ra,8(sp)
    80029df8:	0141                	addi	sp,sp,16
    80029dfa:	efad706f          	j	800014f4 <vshandler>

0000000080029dfe <vs_test_entry_two_4>:
HANDLE_INTERRUPT(vs,4)
    80029dfe:	1141                	addi	sp,sp,-16
    80029e00:	4611                	li	a2,4
    80029e02:	00010597          	auipc	a1,0x10
    80029e06:	95e58593          	addi	a1,a1,-1698 # 80039760 <__func__.0+0xb878>
    80029e0a:	00010517          	auipc	a0,0x10
    80029e0e:	91e50513          	addi	a0,a0,-1762 # 80039728 <__func__.0+0xb840>
    80029e12:	e406                	sd	ra,8(sp)
    80029e14:	616010ef          	jal	8002b42a <printf>
    80029e18:	34427073          	csrci	mip,4
    80029e1c:	60a2                	ld	ra,8(sp)
    80029e1e:	0141                	addi	sp,sp,16
    80029e20:	ed4d706f          	j	800014f4 <vshandler>

0000000080029e24 <vs_test_entry_two_5>:
HANDLE_INTERRUPT(vs,5)
    80029e24:	1141                	addi	sp,sp,-16
    80029e26:	4615                	li	a2,5
    80029e28:	00010597          	auipc	a1,0x10
    80029e2c:	93858593          	addi	a1,a1,-1736 # 80039760 <__func__.0+0xb878>
    80029e30:	00010517          	auipc	a0,0x10
    80029e34:	8f850513          	addi	a0,a0,-1800 # 80039728 <__func__.0+0xb840>
    80029e38:	e406                	sd	ra,8(sp)
    80029e3a:	5f0010ef          	jal	8002b42a <printf>
    80029e3e:	34407073          	csrci	mip,0
    80029e42:	60a2                	ld	ra,8(sp)
    80029e44:	0141                	addi	sp,sp,16
    80029e46:	eaed706f          	j	800014f4 <vshandler>

0000000080029e4a <vs_test_entry_two_6>:
HANDLE_INTERRUPT(vs,6)
    80029e4a:	1141                	addi	sp,sp,-16
    80029e4c:	4619                	li	a2,6
    80029e4e:	00010597          	auipc	a1,0x10
    80029e52:	91258593          	addi	a1,a1,-1774 # 80039760 <__func__.0+0xb878>
    80029e56:	00010517          	auipc	a0,0x10
    80029e5a:	8d250513          	addi	a0,a0,-1838 # 80039728 <__func__.0+0xb840>
    80029e5e:	e406                	sd	ra,8(sp)
    80029e60:	5ca010ef          	jal	8002b42a <printf>
    80029e64:	34407073          	csrci	mip,0
    80029e68:	60a2                	ld	ra,8(sp)
    80029e6a:	0141                	addi	sp,sp,16
    80029e6c:	e88d706f          	j	800014f4 <vshandler>

0000000080029e70 <vs_test_entry_two_7>:
HANDLE_INTERRUPT(vs,7)
    80029e70:	1141                	addi	sp,sp,-16
    80029e72:	461d                	li	a2,7
    80029e74:	00010597          	auipc	a1,0x10
    80029e78:	8ec58593          	addi	a1,a1,-1812 # 80039760 <__func__.0+0xb878>
    80029e7c:	00010517          	auipc	a0,0x10
    80029e80:	8ac50513          	addi	a0,a0,-1876 # 80039728 <__func__.0+0xb840>
    80029e84:	e406                	sd	ra,8(sp)
    80029e86:	5a4010ef          	jal	8002b42a <printf>
    80029e8a:	34407073          	csrci	mip,0
    80029e8e:	60a2                	ld	ra,8(sp)
    80029e90:	0141                	addi	sp,sp,16
    80029e92:	e62d706f          	j	800014f4 <vshandler>

0000000080029e96 <vs_test_entry_two_8>:
HANDLE_INTERRUPT(vs,8)
    80029e96:	1141                	addi	sp,sp,-16
    80029e98:	4621                	li	a2,8
    80029e9a:	00010597          	auipc	a1,0x10
    80029e9e:	8c658593          	addi	a1,a1,-1850 # 80039760 <__func__.0+0xb878>
    80029ea2:	00010517          	auipc	a0,0x10
    80029ea6:	88650513          	addi	a0,a0,-1914 # 80039728 <__func__.0+0xb840>
    80029eaa:	e406                	sd	ra,8(sp)
    80029eac:	57e010ef          	jal	8002b42a <printf>
    80029eb0:	34447073          	csrci	mip,8
    80029eb4:	60a2                	ld	ra,8(sp)
    80029eb6:	0141                	addi	sp,sp,16
    80029eb8:	e3cd706f          	j	800014f4 <vshandler>

0000000080029ebc <m_test_entry_two_0>:


void m_test_entry_two_0() { 
    80029ebc:	1141                	addi	sp,sp,-16
    printf("进入tvec指向入口(异常)\n"); 
    80029ebe:	00010517          	auipc	a0,0x10
    80029ec2:	8aa50513          	addi	a0,a0,-1878 # 80039768 <__func__.0+0xb880>
void m_test_entry_two_0() { 
    80029ec6:	e406                	sd	ra,8(sp)
    printf("进入tvec指向入口(异常)\n"); 
    80029ec8:	19e010ef          	jal	8002b066 <puts>
    next_instruction(CSRR(CSR_MEPC)) ;
    80029ecc:	341027f3          	csrr	a5,mepc
    mhandler();\
}
    80029ed0:	60a2                	ld	ra,8(sp)
    80029ed2:	0141                	addi	sp,sp,16
    mhandler();\
    80029ed4:	9bcd706f          	j	80001090 <mhandler>

0000000080029ed8 <hs_test_entry_two_0>:
void hs_test_entry_two_0() { 
    80029ed8:	1141                	addi	sp,sp,-16
    printf("进入tvec指向入口(异常)\n"); 
    80029eda:	00010517          	auipc	a0,0x10
    80029ede:	88e50513          	addi	a0,a0,-1906 # 80039768 <__func__.0+0xb880>
void hs_test_entry_two_0() { 
    80029ee2:	e406                	sd	ra,8(sp)
    printf("进入tvec指向入口(异常)\n"); 
    80029ee4:	182010ef          	jal	8002b066 <puts>
    next_instruction(CSRR(CSR_SEPC)) ;
    80029ee8:	141027f3          	csrr	a5,sepc
    hshandler();\
}
    80029eec:	60a2                	ld	ra,8(sp)
    80029eee:	0141                	addi	sp,sp,16
    hshandler();\
    80029ef0:	bd2d706f          	j	800012c2 <hshandler>

0000000080029ef4 <vs_test_entry_two_0>:
void vs_test_entry_two_0() { 
    80029ef4:	1141                	addi	sp,sp,-16
    printf("进入tvec指向入口(异常)\n"); 
    80029ef6:	00010517          	auipc	a0,0x10
    80029efa:	87250513          	addi	a0,a0,-1934 # 80039768 <__func__.0+0xb880>
void vs_test_entry_two_0() { 
    80029efe:	e406                	sd	ra,8(sp)
    printf("进入tvec指向入口(异常)\n"); 
    80029f00:	166010ef          	jal	8002b066 <puts>
    next_instruction(CSRR(CSR_VSEPC)) ;
    80029f04:	241027f3          	csrr	a5,vsepc
    vshandler();\
}
    80029f08:	60a2                	ld	ra,8(sp)
    80029f0a:	0141                	addi	sp,sp,16
    vshandler();\
    80029f0c:	de8d706f          	j	800014f4 <vshandler>

0000000080029f10 <mtvec_test_1>:
extern void m_test_entry();
extern void hs_test_entry();
extern void vs_test_entry();


bool mtvec_test_1() {
    80029f10:	1141                	addi	sp,sp,-16

    TEST_START();
    80029f12:	00004597          	auipc	a1,0x4
    80029f16:	fb658593          	addi	a1,a1,-74 # 8002dec8 <__func__.2>
    80029f1a:	00004517          	auipc	a0,0x4
    80029f1e:	2ae50513          	addi	a0,a0,686 # 8002e1c8 <__func__.0+0x2e0>
bool mtvec_test_1() {
    80029f22:	e406                	sd	ra,8(sp)
    TEST_START();
    80029f24:	506010ef          	jal	8002b42a <printf>
    80029f28:	4529                	li	a0,10
    80029f2a:	1ee000ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80029f2e:	4511                	li	a0,4
    80029f30:	fd9d60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    80029f34:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    80029f38:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    80029f3c:	300025f3          	csrr	a1,mstatus
    80029f40:	00010517          	auipc	a0,0x10
    80029f44:	84850513          	addi	a0,a0,-1976 # 80039788 <__func__.0+0xb8a0>
    80029f48:	4e2010ef          	jal	8002b42a <printf>

    CSRS(mie, 1ULL << 1);
    80029f4c:	30416073          	csrsi	mie,2

    CSRW(CSR_MTVEC,m_test_entry);
    80029f50:	00002797          	auipc	a5,0x2
    80029f54:	87878793          	addi	a5,a5,-1928 # 8002b7c8 <m_test_entry>
    80029f58:	30579073          	csrw	mtvec,a5
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    80029f5c:	305025f3          	csrr	a1,mtvec
    80029f60:	00010517          	auipc	a0,0x10
    80029f64:	83850513          	addi	a0,a0,-1992 # 80039798 <__func__.0+0xb8b0>
    80029f68:	4c2010ef          	jal	8002b42a <printf>
    CSRS(CSR_MTVEC , 1ULL << 0);
    80029f6c:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    80029f70:	305025f3          	csrr	a1,mtvec
    80029f74:	00010517          	auipc	a0,0x10
    80029f78:	82450513          	addi	a0,a0,-2012 # 80039798 <__func__.0+0xb8b0>
    80029f7c:	4ae010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    80029f80:	e8dd60ef          	jal	80000e0c <test_setup_except_function>
    CSRS(mip, 1ULL << 1);
    80029f84:	34416073          	csrsi	mip,2

    TEST_END();
    80029f88:	00004597          	auipc	a1,0x4
    80029f8c:	22058593          	addi	a1,a1,544 # 8002e1a8 <__func__.0+0x2c0>
    80029f90:	00004517          	auipc	a0,0x4
    80029f94:	2d050513          	addi	a0,a0,720 # 8002e260 <__func__.0+0x378>
    80029f98:	492010ef          	jal	8002b42a <printf>
    80029f9c:	4511                	li	a0,4
    80029f9e:	f6bd60ef          	jal	80000f08 <goto_priv>
    80029fa2:	883d70ef          	jal	80001824 <reset_state>
}
    80029fa6:	60a2                	ld	ra,8(sp)
    80029fa8:	4505                	li	a0,1
    80029faa:	0141                	addi	sp,sp,16
    80029fac:	8082                	ret

0000000080029fae <stvec_test_1>:

bool stvec_test_1() {
    80029fae:	1141                	addi	sp,sp,-16

    TEST_START();
    80029fb0:	00004597          	auipc	a1,0x4
    80029fb4:	f2858593          	addi	a1,a1,-216 # 8002ded8 <__func__.1>
    80029fb8:	00004517          	auipc	a0,0x4
    80029fbc:	21050513          	addi	a0,a0,528 # 8002e1c8 <__func__.0+0x2e0>
bool stvec_test_1() {
    80029fc0:	e406                	sd	ra,8(sp)
    TEST_START();
    80029fc2:	468010ef          	jal	8002b42a <printf>
    80029fc6:	4529                	li	a0,10
    80029fc8:	150000ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    80029fcc:	4511                	li	a0,4
    80029fce:	f3bd60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    80029fd2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    80029fd6:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    80029fda:	10016073          	csrsi	sstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    80029fde:	30316073          	csrsi	mideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    80029fe2:	300025f3          	csrr	a1,mstatus
    80029fe6:	0000f517          	auipc	a0,0xf
    80029fea:	7a250513          	addi	a0,a0,1954 # 80039788 <__func__.0+0xb8a0>
    80029fee:	43c010ef          	jal	8002b42a <printf>

    CSRS(mie, 1ULL << 1);
    80029ff2:	30416073          	csrsi	mie,2
    CSRS(sie, 1ULL << 1);
    80029ff6:	10416073          	csrsi	sie,2

    CSRW(CSR_STVEC,hs_test_entry);
    80029ffa:	00002797          	auipc	a5,0x2
    80029ffe:	a5678793          	addi	a5,a5,-1450 # 8002ba50 <hs_test_entry>
    8002a002:	10579073          	csrw	stvec,a5
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002a006:	105025f3          	csrr	a1,stvec
    8002a00a:	0000f517          	auipc	a0,0xf
    8002a00e:	79e50513          	addi	a0,a0,1950 # 800397a8 <__func__.0+0xb8c0>
    8002a012:	418010ef          	jal	8002b42a <printf>
    CSRS(CSR_STVEC , 1ULL << 0);
    8002a016:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002a01a:	105025f3          	csrr	a1,stvec
    8002a01e:	0000f517          	auipc	a0,0xf
    8002a022:	78a50513          	addi	a0,a0,1930 # 800397a8 <__func__.0+0xb8c0>
    8002a026:	404010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    8002a02a:	de3d60ef          	jal	80000e0c <test_setup_except_function>
    CSRS(sip, 1ULL << 1);
    8002a02e:	14416073          	csrsi	sip,2
    
    TEST_END();
    8002a032:	00004597          	auipc	a1,0x4
    8002a036:	17658593          	addi	a1,a1,374 # 8002e1a8 <__func__.0+0x2c0>
    8002a03a:	00004517          	auipc	a0,0x4
    8002a03e:	22650513          	addi	a0,a0,550 # 8002e260 <__func__.0+0x378>
    8002a042:	3e8010ef          	jal	8002b42a <printf>
    8002a046:	4511                	li	a0,4
    8002a048:	ec1d60ef          	jal	80000f08 <goto_priv>
    8002a04c:	fd8d70ef          	jal	80001824 <reset_state>
}
    8002a050:	60a2                	ld	ra,8(sp)
    8002a052:	4505                	li	a0,1
    8002a054:	0141                	addi	sp,sp,16
    8002a056:	8082                	ret

000000008002a058 <vstvec_test_1>:

bool vstvec_test_1() {
    8002a058:	1141                	addi	sp,sp,-16

    TEST_START();
    8002a05a:	00004597          	auipc	a1,0x4
    8002a05e:	e8e58593          	addi	a1,a1,-370 # 8002dee8 <__func__.0>
    8002a062:	00004517          	auipc	a0,0x4
    8002a066:	16650513          	addi	a0,a0,358 # 8002e1c8 <__func__.0+0x2e0>
bool vstvec_test_1() {
    8002a06a:	e406                	sd	ra,8(sp)
    TEST_START();
    8002a06c:	3be010ef          	jal	8002b42a <printf>
    8002a070:	4529                	li	a0,10
    8002a072:	0a6000ef          	jal	8002a118 <putchar>

    goto_priv(PRIV_M);
    8002a076:	4511                	li	a0,4
    8002a078:	e91d60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002a07c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002a080:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002a084:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002a088:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002a08c:	30316073          	csrsi	mideleg,2
    CSRS(CSR_HIDELEG,1ULL << 1);
    8002a090:	60316073          	csrsi	hideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002a094:	300025f3          	csrr	a1,mstatus
    8002a098:	0000f517          	auipc	a0,0xf
    8002a09c:	6f050513          	addi	a0,a0,1776 # 80039788 <__func__.0+0xb8a0>
    8002a0a0:	38a010ef          	jal	8002b42a <printf>

    CSRS(mie, 1ULL << 3);
    8002a0a4:	30446073          	csrsi	mie,8
    CSRS(vsie, 1ULL << 1);
    8002a0a8:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002a0ac:	00002797          	auipc	a5,0x2
    8002a0b0:	c2c78793          	addi	a5,a5,-980 # 8002bcd8 <vs_test_entry>
    8002a0b4:	20579073          	csrw	vstvec,a5
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002a0b8:	205025f3          	csrr	a1,vstvec
    8002a0bc:	0000f517          	auipc	a0,0xf
    8002a0c0:	6fc50513          	addi	a0,a0,1788 # 800397b8 <__func__.0+0xb8d0>
    8002a0c4:	366010ef          	jal	8002b42a <printf>
    CSRS(CSR_STVEC , 1ULL << 0);
    8002a0c8:	1050e073          	csrsi	stvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002a0cc:	205025f3          	csrr	a1,vstvec
    8002a0d0:	0000f517          	auipc	a0,0xf
    8002a0d4:	6e850513          	addi	a0,a0,1768 # 800397b8 <__func__.0+0xb8d0>
    8002a0d8:	352010ef          	jal	8002b42a <printf>

    TEST_SETUP_EXCEPT();
    8002a0dc:	d31d60ef          	jal	80000e0c <test_setup_except_function>
    CSRS(vsip, 1ULL << 1);
    8002a0e0:	24416073          	csrsi	vsip,2
    
    TEST_END();
    8002a0e4:	00004597          	auipc	a1,0x4
    8002a0e8:	0c458593          	addi	a1,a1,196 # 8002e1a8 <__func__.0+0x2c0>
    8002a0ec:	00004517          	auipc	a0,0x4
    8002a0f0:	17450513          	addi	a0,a0,372 # 8002e260 <__func__.0+0x378>
    8002a0f4:	336010ef          	jal	8002b42a <printf>
    8002a0f8:	4511                	li	a0,4
    8002a0fa:	e0fd60ef          	jal	80000f08 <goto_priv>
    8002a0fe:	f26d70ef          	jal	80001824 <reset_state>
}
    8002a102:	60a2                	ld	ra,8(sp)
    8002a104:	4505                	li	a0,1
    8002a106:	0141                	addi	sp,sp,16
    8002a108:	8082                	ret

000000008002a10a <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    8002a10a:	619c                	ld	a5,0(a1)
    8002a10c:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    8002a110:	619c                	ld	a5,0(a1)
    8002a112:	0785                	addi	a5,a5,1
    8002a114:	e19c                	sd	a5,0(a1)
  }
    8002a116:	8082                	ret

000000008002a118 <putchar>:
  buf[buflen++] = ch;
    8002a118:	0002e797          	auipc	a5,0x2e
    8002a11c:	fbc7a783          	lw	a5,-68(a5) # 800580d4 <buflen.2>
    8002a120:	0002e697          	auipc	a3,0x2e
    8002a124:	f6068693          	addi	a3,a3,-160 # 80058080 <buf.1>
{
    8002a128:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    8002a12a:	00f68733          	add	a4,a3,a5
    8002a12e:	2785                	addiw	a5,a5,1
    8002a130:	00a70023          	sb	a0,0(a4) # 2000 <_test_table_size+0x1fff>
    8002a134:	0002e717          	auipc	a4,0x2e
    8002a138:	faf72023          	sw	a5,-96(a4) # 800580d4 <buflen.2>
{
    8002a13c:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    8002a140:	4629                	li	a2,10
{
    8002a142:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    8002a146:	00c50963          	beq	a0,a2,8002a158 <putchar+0x40>
    8002a14a:	04000613          	li	a2,64
    8002a14e:	00c78563          	beq	a5,a2,8002a158 <putchar+0x40>
}
    8002a152:	4501                	li	a0,0
    8002a154:	6165                	addi	sp,sp,112
    8002a156:	8082                	ret
  magic_mem[0] = which;
    8002a158:	04000613          	li	a2,64
    8002a15c:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    8002a15e:	4605                	li	a2,1
    8002a160:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    8002a162:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    8002a164:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    8002a166:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a16a:	00012697          	auipc	a3,0x12
    8002a16e:	ed668693          	addi	a3,a3,-298 # 8003c040 <fromhost>
    8002a172:	00012797          	auipc	a5,0x12
    8002a176:	e8e7b723          	sd	a4,-370(a5) # 8003c000 <tohost>
  while (fromhost == 0)
    8002a17a:	629c                	ld	a5,0(a3)
    8002a17c:	dffd                	beqz	a5,8002a17a <putchar+0x62>
  fromhost = 0;
    8002a17e:	00012797          	auipc	a5,0x12
    8002a182:	ec07b123          	sd	zero,-318(a5) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a186:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a18a:	631c                	ld	a5,0(a4)
}
    8002a18c:	4501                	li	a0,0
    buflen = 0;
    8002a18e:	0002e797          	auipc	a5,0x2e
    8002a192:	f407a323          	sw	zero,-186(a5) # 800580d4 <buflen.2>
}
    8002a196:	6165                	addi	sp,sp,112
    8002a198:	8082                	ret

000000008002a19a <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002a19a:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a19c:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    8002a1a0:	05500e93          	li	t4,85
    8002a1a4:	00004e17          	auipc	t3,0x4
    8002a1a8:	d54e0e13          	addi	t3,t3,-684 # 8002def8 <__func__.0+0x10>
    8002a1ac:	a809                	j	8002a1be <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    8002a1ae:	c729                	beqz	a4,8002a1f8 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    8002a1b0:	6118                	ld	a4,0(a0)
      fmt++;
    8002a1b2:	0585                	addi	a1,a1,1
    **pstr = ch;
    8002a1b4:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002a1b8:	611c                	ld	a5,0(a0)
    8002a1ba:	0785                	addi	a5,a5,1
    8002a1bc:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a1be:	0005c783          	lbu	a5,0(a1)
    8002a1c2:	0007871b          	sext.w	a4,a5
    8002a1c6:	fe6794e3          	bne	a5,t1,8002a1ae <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    8002a1ca:	0015c803          	lbu	a6,1(a1)
    fmt++;
    8002a1ce:	00158893          	addi	a7,a1,1
    precision = -1;
    8002a1d2:	577d                	li	a4,-1
    fmt++;
    8002a1d4:	86c6                	mv	a3,a7
    width = -1;
    8002a1d6:	8fba                	mv	t6,a4
    padc = ' ';
    8002a1d8:	02000293          	li	t0,32
    lflag = 0;
    8002a1dc:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    8002a1de:	fdd8079b          	addiw	a5,a6,-35
    8002a1e2:	0ff7f793          	zext.b	a5,a5
    8002a1e6:	00168593          	addi	a1,a3,1
    8002a1ea:	02fee563          	bltu	t4,a5,8002a214 <vprintfmt.constprop.0+0x7a>
    8002a1ee:	078a                	slli	a5,a5,0x2
    8002a1f0:	97f2                	add	a5,a5,t3
    8002a1f2:	439c                	lw	a5,0(a5)
    8002a1f4:	97f2                	add	a5,a5,t3
    8002a1f6:	8782                	jr	a5
}
    8002a1f8:	6151                	addi	sp,sp,272
    8002a1fa:	8082                	ret
      padc = '0';
    8002a1fc:	82c2                	mv	t0,a6
      goto reswitch;
    8002a1fe:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002a202:	86ae                	mv	a3,a1
    8002a204:	00168593          	addi	a1,a3,1
    8002a208:	fdd8079b          	addiw	a5,a6,-35
    8002a20c:	0ff7f793          	zext.b	a5,a5
    8002a210:	fcfeffe3          	bgeu	t4,a5,8002a1ee <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    8002a214:	611c                	ld	a5,0(a0)
    8002a216:	02500713          	li	a4,37
      fmt = last_fmt;
    8002a21a:	85c6                	mv	a1,a7
    **pstr = ch;
    8002a21c:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002a220:	611c                	ld	a5,0(a0)
    8002a222:	0785                	addi	a5,a5,1
    8002a224:	e11c                	sd	a5,0(a0)
  }
    8002a226:	bf61                	j	8002a1be <vprintfmt.constprop.0+0x24>
    8002a228:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    8002a22a:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    8002a22e:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    8002a232:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    8002a234:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    8002a236:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    8002a23a:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002a23e:	02f46463          	bltu	s0,a5,8002a266 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    8002a242:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    8002a246:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    8002a24a:	9fb9                	addw	a5,a5,a4
    8002a24c:	0017979b          	slliw	a5,a5,0x1
    8002a250:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    8002a254:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    8002a258:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    8002a25a:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    8002a25e:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002a262:	feb470e3          	bgeu	s0,a1,8002a242 <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    8002a266:	6432                	ld	s0,264(sp)
      if (width < 0)
    8002a268:	f60fdbe3          	bgez	t6,8002a1de <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    8002a26c:	8fba                	mv	t6,a4
    8002a26e:	577d                	li	a4,-1
    8002a270:	b7bd                	j	8002a1de <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    8002a272:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002a276:	86ae                	mv	a3,a1
      goto reswitch;
    8002a278:	b79d                	j	8002a1de <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002a27a:	611c                	ld	a5,0(a0)
    8002a27c:	02500713          	li	a4,37
    8002a280:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002a284:	611c                	ld	a5,0(a0)
    8002a286:	0785                	addi	a5,a5,1
    8002a288:	e11c                	sd	a5,0(a0)
  }
    8002a28a:	bf15                	j	8002a1be <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    8002a28c:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    8002a290:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    8002a292:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    8002a294:	0621                	addi	a2,a2,8
      goto process_precision;
    8002a296:	bfc9                	j	8002a268 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    8002a298:	611c                	ld	a5,0(a0)
    8002a29a:	03000693          	li	a3,48
    8002a29e:	07800713          	li	a4,120
    8002a2a2:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002a2a6:	611c                	ld	a5,0(a0)
    8002a2a8:	4841                	li	a6,16
    8002a2aa:	00860693          	addi	a3,a2,8
    8002a2ae:	00178893          	addi	a7,a5,1
    8002a2b2:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    8002a2b6:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    8002a2ba:	611c                	ld	a5,0(a0)
    8002a2bc:	0785                	addi	a5,a5,1
    8002a2be:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    8002a2c0:	6218                	ld	a4,0(a2)
    8002a2c2:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    8002a2c4:	03077f33          	remu	t5,a4,a6
    8002a2c8:	00410893          	addi	a7,sp,4
    8002a2cc:	4685                	li	a3,1
    8002a2ce:	c07a                	sw	t5,0(sp)
    if (num < base)
    8002a2d0:	1b076c63          	bltu	a4,a6,8002a488 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    8002a2d4:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    8002a2d8:	83b6                	mv	t2,a3
    if (num < base)
    8002a2da:	0891                	addi	a7,a7,4
    digs[pos++] = num % base;
    8002a2dc:	2685                	addiw	a3,a3,1
    8002a2de:	03077f33          	remu	t5,a4,a6
    8002a2e2:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    8002a2e6:	ff0777e3          	bgeu	a4,a6,8002a2d4 <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    8002a2ea:	ffff871b          	addiw	a4,t6,-1
    8002a2ee:	fff6881b          	addiw	a6,a3,-1
    8002a2f2:	01f6da63          	bge	a3,t6,8002a306 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    8002a2f6:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002a2fa:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    8002a2fc:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    8002a2fe:	0785                	addi	a5,a5,1
    8002a300:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8002a302:	ff071ae3          	bne	a4,a6,8002a2f6 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    8002a306:	038a                	slli	t2,t2,0x2
    8002a308:	007106b3          	add	a3,sp,t2
    8002a30c:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a310:	4825                	li	a6,9
    8002a312:	a819                	j	8002a328 <vprintfmt.constprop.0+0x18e>
    8002a314:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    8002a318:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002a31c:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    8002a31e:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    8002a320:	0785                	addi	a5,a5,1
    8002a322:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    8002a324:	e8d88de3          	beq	a7,a3,8002a1be <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a328:	4298                	lw	a4,0(a3)
    8002a32a:	fee865e3          	bltu	a6,a4,8002a314 <vprintfmt.constprop.0+0x17a>
    8002a32e:	0307071b          	addiw	a4,a4,48
    8002a332:	b7dd                	j	8002a318 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    8002a334:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8002a336:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002a33a:	01e7c463          	blt	a5,t5,8002a342 <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    8002a33e:	140f0763          	beqz	t5,8002a48c <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    8002a342:	6218                	ld	a4,0(a2)
    **pstr = ch;
    8002a344:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    8002a346:	14074963          	bltz	a4,8002a498 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    8002a34a:	8636                	mv	a2,a3
    8002a34c:	4829                	li	a6,10
    8002a34e:	bf9d                	j	8002a2c4 <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    8002a350:	0016c803          	lbu	a6,1(a3)
      lflag++;
    8002a354:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    8002a356:	86ae                	mv	a3,a1
      goto reswitch;
    8002a358:	b559                	j	8002a1de <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    8002a35a:	4841                	li	a6,16
  if (lflag >= 2)
    8002a35c:	4705                	li	a4,1
    **pstr = ch;
    8002a35e:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    8002a360:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002a364:	f5e74ee3          	blt	a4,t5,8002a2c0 <vprintfmt.constprop.0+0x126>
  else if (lflag)
    8002a368:	f40f1ce3          	bnez	t5,8002a2c0 <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    8002a36c:	00066703          	lwu	a4,0(a2)
    8002a370:	8636                	mv	a2,a3
    8002a372:	bf89                	j	8002a2c4 <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002a374:	6214                	ld	a3,0(a2)
    8002a376:	ca99                	beqz	a3,8002a38c <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    8002a378:	07f05663          	blez	t6,8002a3e4 <vprintfmt.constprop.0+0x24a>
    8002a37c:	02d00793          	li	a5,45
    8002a380:	02f29863          	bne	t0,a5,8002a3b0 <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a384:	0006c783          	lbu	a5,0(a3)
    8002a388:	e3ad                	bnez	a5,8002a3ea <vprintfmt.constprop.0+0x250>
    8002a38a:	a879                	j	8002a428 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    8002a38c:	0000f697          	auipc	a3,0xf
    8002a390:	43c68693          	addi	a3,a3,1084 # 800397c8 <__func__.0+0xb8e0>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a394:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002a398:	05f05963          	blez	t6,8002a3ea <vprintfmt.constprop.0+0x250>
    8002a39c:	02d00813          	li	a6,45
        p = "(null)";
    8002a3a0:	0000f697          	auipc	a3,0xf
    8002a3a4:	42868693          	addi	a3,a3,1064 # 800397c8 <__func__.0+0xb8e0>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3a8:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002a3ac:	03028f63          	beq	t0,a6,8002a3ea <vprintfmt.constprop.0+0x250>
  const char *p = s;
    8002a3b0:	87b6                	mv	a5,a3
  while (n-- && *p)
    8002a3b2:	00e688b3          	add	a7,a3,a4
    8002a3b6:	e709                	bnez	a4,8002a3c0 <vprintfmt.constprop.0+0x226>
    8002a3b8:	a829                	j	8002a3d2 <vprintfmt.constprop.0+0x238>
    p++;
    8002a3ba:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002a3bc:	01178663          	beq	a5,a7,8002a3c8 <vprintfmt.constprop.0+0x22e>
    8002a3c0:	0007c803          	lbu	a6,0(a5)
    8002a3c4:	fe081be3          	bnez	a6,8002a3ba <vprintfmt.constprop.0+0x220>
  return p - s;
    8002a3c8:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a3ca:	40ff8fbb          	subw	t6,t6,a5
    8002a3ce:	01f05b63          	blez	t6,8002a3e4 <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    8002a3d2:	611c                	ld	a5,0(a0)
    8002a3d4:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002a3d8:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a3da:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002a3dc:	0785                	addi	a5,a5,1
    8002a3de:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a3e0:	fe0f9ae3          	bnez	t6,8002a3d4 <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3e4:	0006c783          	lbu	a5,0(a3)
    8002a3e8:	cbb9                	beqz	a5,8002a43e <vprintfmt.constprop.0+0x2a4>
    8002a3ea:	58fd                	li	a7,-1
    8002a3ec:	04075b63          	bgez	a4,8002a442 <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    8002a3f0:	6118                	ld	a4,0(a0)
        p++;
    8002a3f2:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3f6:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002a3f8:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002a3fc:	611c                	ld	a5,0(a0)
    8002a3fe:	8742                	mv	a4,a6
    8002a400:	0785                	addi	a5,a5,1
    8002a402:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a404:	0016c683          	lbu	a3,1(a3)
    8002a408:	ce91                	beqz	a3,8002a424 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002a40a:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002a40e:	611c                	ld	a5,0(a0)
        p++;
    8002a410:	0705                	addi	a4,a4,1
    (*pstr)++;
    8002a412:	0785                	addi	a5,a5,1
    8002a414:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a416:	00074683          	lbu	a3,0(a4)
    8002a41a:	fae5                	bnez	a3,8002a40a <vprintfmt.constprop.0+0x270>
    8002a41c:	40e8083b          	subw	a6,a6,a4
    8002a420:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    8002a424:	01f05d63          	blez	t6,8002a43e <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    8002a428:	611c                	ld	a5,0(a0)
    8002a42a:	02000713          	li	a4,32
    8002a42e:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002a432:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8002a434:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002a436:	0785                	addi	a5,a5,1
    8002a438:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    8002a43a:	fe0f9ae3          	bnez	t6,8002a42e <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    8002a43e:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a440:	bbbd                	j	8002a1be <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a442:	377d                	addiw	a4,a4,-1
    8002a444:	ff1700e3          	beq	a4,a7,8002a424 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002a448:	00053803          	ld	a6,0(a0)
        p++;
    8002a44c:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a44e:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002a450:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    8002a454:	611c                	ld	a5,0(a0)
    8002a456:	0785                	addi	a5,a5,1
    8002a458:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a45a:	0006c783          	lbu	a5,0(a3)
    8002a45e:	f3f5                	bnez	a5,8002a442 <vprintfmt.constprop.0+0x2a8>
    8002a460:	b7d1                	j	8002a424 <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    8002a462:	87fe                	mv	a5,t6
    8002a464:	000fd363          	bgez	t6,8002a46a <vprintfmt.constprop.0+0x2d0>
    8002a468:	4781                	li	a5,0
        ch = *fmt;
    8002a46a:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    8002a46e:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8002a472:	86ae                	mv	a3,a1
      goto reswitch;
    8002a474:	b3ad                	j	8002a1de <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002a476:	611c                	ld	a5,0(a0)
    8002a478:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    8002a47a:	0621                	addi	a2,a2,8
    **pstr = ch;
    8002a47c:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002a480:	611c                	ld	a5,0(a0)
    8002a482:	0785                	addi	a5,a5,1
    8002a484:	e11c                	sd	a5,0(a0)
  }
    8002a486:	bb25                	j	8002a1be <vprintfmt.constprop.0+0x24>
    if (num < base)
    8002a488:	4381                	li	t2,0
    8002a48a:	b585                	j	8002a2ea <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    8002a48c:	4218                	lw	a4,0(a2)
    8002a48e:	bd5d                	j	8002a344 <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    8002a490:	4829                	li	a6,10
    8002a492:	b5e9                	j	8002a35c <vprintfmt.constprop.0+0x1c2>
    8002a494:	4821                	li	a6,8
    8002a496:	b5d9                	j	8002a35c <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    8002a498:	02d00613          	li	a2,45
    8002a49c:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8002a4a0:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8002a4a2:	40e00733          	neg	a4,a4
    8002a4a6:	8636                	mv	a2,a3
    (*pstr)++;
    8002a4a8:	0785                	addi	a5,a5,1
    8002a4aa:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    8002a4ac:	4829                	li	a6,10
    8002a4ae:	bd19                	j	8002a2c4 <vprintfmt.constprop.0+0x12a>

000000008002a4b0 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002a4b0:	b6010113          	addi	sp,sp,-1184
    8002a4b4:	14f10713          	addi	a4,sp,335
    8002a4b8:	fc077713          	andi	a4,a4,-64
    8002a4bc:	45b13023          	sd	s11,1088(sp)
    8002a4c0:	83ae                	mv	t2,a1
    8002a4c2:	48813c23          	sd	s0,1176(sp)
    8002a4c6:	48913823          	sd	s1,1168(sp)
    8002a4ca:	49213423          	sd	s2,1160(sp)
    8002a4ce:	49313023          	sd	s3,1152(sp)
    8002a4d2:	47413c23          	sd	s4,1144(sp)
    8002a4d6:	47513823          	sd	s5,1136(sp)
    8002a4da:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    8002a4de:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a4e2:	02500593          	li	a1,37
  buf[buflen++] = ch;
    8002a4e6:	0002e897          	auipc	a7,0x2e
    8002a4ea:	bee88893          	addi	a7,a7,-1042 # 800580d4 <buflen.2>
    8002a4ee:	0002e697          	auipc	a3,0x2e
    8002a4f2:	b9268693          	addi	a3,a3,-1134 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a4f6:	4829                	li	a6,10
  magic_mem[0] = which;
    8002a4f8:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    8002a4fc:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    8002a4fe:	00012e17          	auipc	t3,0x12
    8002a502:	b02e0e13          	addi	t3,t3,-1278 # 8003c000 <tohost>
    8002a506:	00012797          	auipc	a5,0x12
    8002a50a:	b3a78793          	addi	a5,a5,-1222 # 8003c040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    8002a50e:	00004d97          	auipc	s11,0x4
    8002a512:	b42d8d93          	addi	s11,s11,-1214 # 8002e050 <__func__.0+0x168>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a516:	00054f83          	lbu	t6,0(a0)
    8002a51a:	000f841b          	sext.w	s0,t6
    8002a51e:	06bf8563          	beq	t6,a1,8002a588 <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    8002a522:	cc49                	beqz	s0,8002a5bc <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    8002a524:	0002e317          	auipc	t1,0x2e
    8002a528:	bb032303          	lw	t1,-1104(t1) # 800580d4 <buflen.2>
      fmt++;
    8002a52c:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    8002a52e:	0013029b          	addiw	t0,t1,1
    8002a532:	9336                	add	t1,t1,a3
    8002a534:	0058a023          	sw	t0,0(a7)
    8002a538:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a53c:	01040463          	beq	s0,a6,8002a544 <vprintfmt.constprop.1+0x94>
    8002a540:	fcc29be3          	bne	t0,a2,8002a516 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a544:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    8002a548:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    8002a54c:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    8002a550:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    8002a554:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a558:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    8002a55c:	0007b303          	ld	t1,0(a5)
    8002a560:	fe030ee3          	beqz	t1,8002a55c <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    8002a564:	00012317          	auipc	t1,0x12
    8002a568:	ac033e23          	sd	zero,-1316(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a56c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a570:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    8002a574:	0002e317          	auipc	t1,0x2e
    8002a578:	b6032023          	sw	zero,-1184(t1) # 800580d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002a57c:	00054f83          	lbu	t6,0(a0)
    8002a580:	000f841b          	sext.w	s0,t6
    8002a584:	f8bf9fe3          	bne	t6,a1,8002a522 <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    8002a588:	00154483          	lbu	s1,1(a0)
    fmt++;
    8002a58c:	00150a13          	addi	s4,a0,1
    precision = -1;
    8002a590:	537d                	li	t1,-1
    fmt++;
    8002a592:	8452                	mv	s0,s4
    width = -1;
    8002a594:	8f9a                	mv	t6,t1
    padc = ' ';
    8002a596:	02000a93          	li	s5,32
    lflag = 0;
    8002a59a:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    8002a59c:	05500993          	li	s3,85
    8002a5a0:	fdd4829b          	addiw	t0,s1,-35
    8002a5a4:	0ff2f293          	zext.b	t0,t0
    8002a5a8:	00140513          	addi	a0,s0,1
    8002a5ac:	0459e763          	bltu	s3,t0,8002a5fa <vprintfmt.constprop.1+0x14a>
    8002a5b0:	028a                	slli	t0,t0,0x2
    8002a5b2:	92ee                	add	t0,t0,s11
    8002a5b4:	0002ab03          	lw	s6,0(t0)
    8002a5b8:	9b6e                	add	s6,s6,s11
    8002a5ba:	8b02                	jr	s6
}
    8002a5bc:	49813403          	ld	s0,1176(sp)
    8002a5c0:	49013483          	ld	s1,1168(sp)
    8002a5c4:	48813903          	ld	s2,1160(sp)
    8002a5c8:	48013983          	ld	s3,1152(sp)
    8002a5cc:	47813a03          	ld	s4,1144(sp)
    8002a5d0:	47013a83          	ld	s5,1136(sp)
    8002a5d4:	46813b03          	ld	s6,1128(sp)
    8002a5d8:	44013d83          	ld	s11,1088(sp)
    8002a5dc:	4a010113          	addi	sp,sp,1184
    8002a5e0:	8082                	ret
      padc = '0';
    8002a5e2:	8aa6                	mv	s5,s1
      goto reswitch;
    8002a5e4:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002a5e8:	842a                	mv	s0,a0
    8002a5ea:	00140513          	addi	a0,s0,1
    8002a5ee:	fdd4829b          	addiw	t0,s1,-35
    8002a5f2:	0ff2f293          	zext.b	t0,t0
    8002a5f6:	fa59fde3          	bgeu	s3,t0,8002a5b0 <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    8002a5fa:	0002e317          	auipc	t1,0x2e
    8002a5fe:	ada32303          	lw	t1,-1318(t1) # 800580d4 <buflen.2>
    8002a602:	0002ef97          	auipc	t6,0x2e
    8002a606:	a7ef8f93          	addi	t6,t6,-1410 # 80058080 <buf.1>
    8002a60a:	02500293          	li	t0,37
    8002a60e:	0013051b          	addiw	a0,t1,1
    8002a612:	937e                	add	t1,t1,t6
    8002a614:	00530023          	sb	t0,0(t1)
    8002a618:	0002e417          	auipc	s0,0x2e
    8002a61c:	aaa42e23          	sw	a0,-1348(s0) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a620:	04000313          	li	t1,64
    8002a624:	56650f63          	beq	a0,t1,8002aba2 <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    8002a628:	8552                	mv	a0,s4
    8002a62a:	b5f5                	j	8002a516 <vprintfmt.constprop.1+0x66>
    8002a62c:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    8002a630:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002a634:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    8002a638:	4ba5                	li	s7,9
    8002a63a:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    8002a63e:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002a642:	088befe3          	bltu	s7,s0,8002aee0 <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002a646:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    8002a648:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    8002a64c:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    8002a650:	0065053b          	addw	a0,a0,t1
    8002a654:	0015151b          	slliw	a0,a0,0x1
    8002a658:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    8002a65c:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    8002a660:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    8002a662:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002a666:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002a66a:	fd6bffe3          	bgeu	s7,s6,8002a648 <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    8002a66e:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002a672:	f20fd7e3          	bgez	t6,8002a5a0 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002a676:	8f9a                	mv	t6,t1
    8002a678:	537d                	li	t1,-1
    8002a67a:	b71d                	j	8002a5a0 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8002a67c:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002a680:	842a                	mv	s0,a0
      goto reswitch;
    8002a682:	bf39                	j	8002a5a0 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002a684:	0002ef97          	auipc	t6,0x2e
    8002a688:	a50faf83          	lw	t6,-1456(t6) # 800580d4 <buflen.2>
    8002a68c:	0002e297          	auipc	t0,0x2e
    8002a690:	9f428293          	addi	t0,t0,-1548 # 80058080 <buf.1>
    8002a694:	02500413          	li	s0,37
    8002a698:	001f831b          	addiw	t1,t6,1
    8002a69c:	9f96                	add	t6,t6,t0
    8002a69e:	008f8023          	sb	s0,0(t6)
    8002a6a2:	0002e497          	auipc	s1,0x2e
    8002a6a6:	a264a923          	sw	t1,-1486(s1) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a6aa:	04000f93          	li	t6,64
    8002a6ae:	e7f314e3          	bne	t1,t6,8002a516 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a6b2:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002a6b6:	4f85                	li	t6,1
    8002a6b8:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    8002a6bc:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    8002a6c0:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    8002a6c4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a6c8:	04070313          	addi	t1,a4,64
    8002a6cc:	00012f97          	auipc	t6,0x12
    8002a6d0:	926fba23          	sd	t1,-1740(t6) # 8003c000 <tohost>
  while (fromhost == 0)
    8002a6d4:	00012317          	auipc	t1,0x12
    8002a6d8:	96c30313          	addi	t1,t1,-1684 # 8003c040 <fromhost>
    8002a6dc:	00033f83          	ld	t6,0(t1)
    8002a6e0:	fe0f8ee3          	beqz	t6,8002a6dc <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    8002a6e4:	00012317          	auipc	t1,0x12
    8002a6e8:	94033e23          	sd	zero,-1700(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a6ec:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a6f0:	0002e317          	auipc	t1,0x2e
    8002a6f4:	9e032223          	sw	zero,-1564(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002a6f8:	04073303          	ld	t1,64(a4)
    buflen = 0;
    8002a6fc:	bd29                	j	8002a516 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a6fe:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    8002a702:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    8002a706:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    8002a708:	03a1                	addi	t2,t2,8
      goto process_precision;
    8002a70a:	b7a5                	j	8002a672 <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    8002a70c:	0002e317          	auipc	t1,0x2e
    8002a710:	9c832303          	lw	t1,-1592(t1) # 800580d4 <buflen.2>
    8002a714:	0002e917          	auipc	s2,0x2e
    8002a718:	96c90913          	addi	s2,s2,-1684 # 80058080 <buf.1>
    8002a71c:	47713023          	sd	s7,1120(sp)
    8002a720:	45813c23          	sd	s8,1112(sp)
    8002a724:	45913823          	sd	s9,1104(sp)
    8002a728:	45a13423          	sd	s10,1096(sp)
    8002a72c:	00690433          	add	s0,s2,t1
    8002a730:	0002e997          	auipc	s3,0x2e
    8002a734:	9a498993          	addi	s3,s3,-1628 # 800580d4 <buflen.2>
    8002a738:	0013029b          	addiw	t0,t1,1
    8002a73c:	03000493          	li	s1,48
    8002a740:	00940023          	sb	s1,0(s0)
    8002a744:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a748:	04000413          	li	s0,64
    8002a74c:	62828d63          	beq	t0,s0,8002ad86 <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    8002a750:	2309                	addiw	t1,t1,2
    8002a752:	92ca                	add	t0,t0,s2
    8002a754:	07800493          	li	s1,120
    8002a758:	0069a023          	sw	t1,0(s3)
    8002a75c:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a760:	42831a63          	bne	t1,s0,8002ab94 <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002a764:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002a768:	4285                	li	t0,1
    8002a76a:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    8002a76e:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002a772:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002a776:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a77a:	10070313          	addi	t1,a4,256
    8002a77e:	00012297          	auipc	t0,0x12
    8002a782:	8862b123          	sd	t1,-1918(t0) # 8003c000 <tohost>
  while (fromhost == 0)
    8002a786:	00012317          	auipc	t1,0x12
    8002a78a:	8ba30313          	addi	t1,t1,-1862 # 8003c040 <fromhost>
    8002a78e:	00033283          	ld	t0,0(t1)
    8002a792:	fe028ee3          	beqz	t0,8002a78e <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002a796:	00012317          	auipc	t1,0x12
    8002a79a:	8a033523          	sd	zero,-1878(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a79e:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a7a2:	0002e317          	auipc	t1,0x2e
    8002a7a6:	92032923          	sw	zero,-1742(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002a7aa:	10073303          	ld	t1,256(a4)
  else if (lflag)
    8002a7ae:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002a7b2:	4301                	li	t1,0
    8002a7b4:	4441                	li	s0,16
    8002a7b6:	a6d5                	j	8002ab9a <vprintfmt.constprop.1+0x6ea>
    8002a7b8:	47713023          	sd	s7,1120(sp)
    8002a7bc:	45813c23          	sd	s8,1112(sp)
    8002a7c0:	45913823          	sd	s9,1104(sp)
    8002a7c4:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    8002a7c8:	4305                	li	t1,1
      precision = va_arg(ap, int);
    8002a7ca:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    8002a7ce:	01234463          	blt	t1,s2,8002a7d6 <vprintfmt.constprop.1+0x326>
  else if (lflag)
    8002a7d2:	3a090e63          	beqz	s2,8002ab8e <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    8002a7d6:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    8002a7da:	0002e317          	auipc	t1,0x2e
    8002a7de:	8fa32303          	lw	t1,-1798(t1) # 800580d4 <buflen.2>
    8002a7e2:	0002e997          	auipc	s3,0x2e
    8002a7e6:	8f298993          	addi	s3,s3,-1806 # 800580d4 <buflen.2>
      if ((long long) num < 0) {
    8002a7ea:	5402cd63          	bltz	t0,8002ad44 <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    8002a7ee:	83a2                	mv	t2,s0
    8002a7f0:	0002e917          	auipc	s2,0x2e
    8002a7f4:	89090913          	addi	s2,s2,-1904 # 80058080 <buf.1>
    8002a7f8:	4429                	li	s0,10
    digs[pos++] = num % base;
    8002a7fa:	0282fb33          	remu	s6,t0,s0
    8002a7fe:	01410a13          	addi	s4,sp,20
    8002a802:	4485                	li	s1,1
    8002a804:	c85a                	sw	s6,16(sp)
    if (num < base)
    8002a806:	3682e263          	bltu	t0,s0,8002ab6a <vprintfmt.constprop.1+0x6ba>
    num /= base;
    8002a80a:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    8002a80e:	8ba6                	mv	s7,s1
    if (num < base)
    8002a810:	0a11                	addi	s4,s4,4
    digs[pos++] = num % base;
    8002a812:	2485                	addiw	s1,s1,1
    8002a814:	0282fb33          	remu	s6,t0,s0
    8002a818:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    8002a81c:	fe82f7e3          	bgeu	t0,s0,8002a80a <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    8002a820:	ffff829b          	addiw	t0,t6,-1
    8002a824:	fff48a1b          	addiw	s4,s1,-1
    8002a828:	09f4d463          	bge	s1,t6,8002a8b0 <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a82c:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8002a830:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002a832:	0c070b13          	addi	s6,a4,192
    8002a836:	00011497          	auipc	s1,0x11
    8002a83a:	7ca48493          	addi	s1,s1,1994 # 8003c000 <tohost>
    8002a83e:	00012f97          	auipc	t6,0x12
    8002a842:	802f8f93          	addi	t6,t6,-2046 # 8003c040 <fromhost>
  buf[buflen++] = ch;
    8002a846:	4c89                	li	s9,2
    8002a848:	00130d1b          	addiw	s10,t1,1
    8002a84c:	934a                	add	t1,t1,s2
    8002a84e:	01a9a023          	sw	s10,0(s3)
    8002a852:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a856:	2e8d1863          	bne	s10,s0,8002ab46 <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    8002a85a:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8002a85c:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8002a860:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002a864:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002a866:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a86a:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    8002a86e:	000fb303          	ld	t1,0(t6)
    8002a872:	fe030ee3          	beqz	t1,8002a86e <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002a876:	00011317          	auipc	t1,0x11
    8002a87a:	7c033523          	sd	zero,1994(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a87e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a882:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002a886:	0002e317          	auipc	t1,0x2e
    8002a88a:	84032723          	sw	zero,-1970(t1) # 800580d4 <buflen.2>
  while (width-- > pos)
    8002a88e:	fff2831b          	addiw	t1,t0,-1
    8002a892:	2b430c63          	beq	t1,s4,8002ab4a <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002a896:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    8002a89a:	32f9                	addiw	t0,t0,-2
    8002a89c:	2a5a0963          	beq	s4,t0,8002ab4e <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    8002a8a0:	0199a023          	sw	s9,0(s3)
    8002a8a4:	015900a3          	sb	s5,1(s2)
    8002a8a8:	4309                	li	t1,2
  while (width-- > pos)
    8002a8aa:	32fd                	addiw	t0,t0,-1
    8002a8ac:	f85a1ee3          	bne	s4,t0,8002a848 <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    8002a8b0:	0b8a                	slli	s7,s7,0x2
    8002a8b2:	0800                	addi	s0,sp,16
    8002a8b4:	945e                	add	s0,s0,s7
    8002a8b6:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a8ba:	4a25                	li	s4,9
  magic_mem[0] = which;
    8002a8bc:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002a8c0:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8002a8c2:	08070c13          	addi	s8,a4,128
    8002a8c6:	00011b97          	auipc	s7,0x11
    8002a8ca:	73ab8b93          	addi	s7,s7,1850 # 8003c000 <tohost>
    8002a8ce:	00011297          	auipc	t0,0x11
    8002a8d2:	77228293          	addi	t0,t0,1906 # 8003c040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a8d6:	4b29                	li	s6,10
    8002a8d8:	a831                	j	8002a8f4 <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    8002a8da:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a8dc:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    8002a8e0:	01f30023          	sb	t6,0(t1)
    8002a8e4:	01a9a023          	sw	s10,0(s3)
    8002a8e8:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    8002a8ea:	029d0463          	beq	s10,s1,8002a912 <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    8002a8ee:	1471                	addi	s0,s0,-4
    8002a8f0:	068a8063          	beq	s5,s0,8002a950 <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a8f4:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    8002a8f8:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a8fc:	fdfa7fe3          	bgeu	s4,t6,8002a8da <vprintfmt.constprop.1+0x42a>
    8002a900:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    8002a904:	934a                	add	t1,t1,s2
    8002a906:	01f30023          	sb	t6,0(t1)
    8002a90a:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a90e:	fd6f9de3          	bne	t6,s6,8002a8e8 <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    8002a912:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002a914:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002a918:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    8002a91c:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    8002a920:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a924:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002a928:	0002b303          	ld	t1,0(t0)
    8002a92c:	fe030ee3          	beqz	t1,8002a928 <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    8002a930:	00011317          	auipc	t1,0x11
    8002a934:	70033823          	sd	zero,1808(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002a938:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a93c:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    8002a940:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002a942:	0002d317          	auipc	t1,0x2d
    8002a946:	78032923          	sw	zero,1938(t1) # 800580d4 <buflen.2>
    8002a94a:	4301                	li	t1,0
  while (pos-- > 0)
    8002a94c:	fa8a94e3          	bne	s5,s0,8002a8f4 <vprintfmt.constprop.1+0x444>
    8002a950:	46013b83          	ld	s7,1120(sp)
    8002a954:	45813c03          	ld	s8,1112(sp)
    8002a958:	45013c83          	ld	s9,1104(sp)
    8002a95c:	44813d03          	ld	s10,1096(sp)
    8002a960:	be5d                	j	8002a516 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a962:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002a966:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002a968:	842a                	mv	s0,a0
      goto reswitch;
    8002a96a:	b91d                	j	8002a5a0 <vprintfmt.constprop.1+0xf0>
    8002a96c:	47713023          	sd	s7,1120(sp)
    8002a970:	45813c23          	sd	s8,1112(sp)
    8002a974:	45913823          	sd	s9,1104(sp)
    8002a978:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002a97c:	4441                	li	s0,16
  if (lflag >= 2)
    8002a97e:	4285                	li	t0,1
  buf[buflen++] = ch;
    8002a980:	0002d317          	auipc	t1,0x2d
    8002a984:	75432303          	lw	t1,1876(t1) # 800580d4 <buflen.2>
      precision = va_arg(ap, int);
    8002a988:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    8002a98c:	1d22c363          	blt	t0,s2,8002ab52 <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    8002a990:	3e091263          	bnez	s2,8002ad74 <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002a994:	0003e283          	lwu	t0,0(t2)
    8002a998:	0002d997          	auipc	s3,0x2d
    8002a99c:	73c98993          	addi	s3,s3,1852 # 800580d4 <buflen.2>
    8002a9a0:	83a6                	mv	t2,s1
    8002a9a2:	0002d917          	auipc	s2,0x2d
    8002a9a6:	6de90913          	addi	s2,s2,1758 # 80058080 <buf.1>
    8002a9aa:	bd81                	j	8002a7fa <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002a9ac:	0003b483          	ld	s1,0(t2)
    8002a9b0:	47713023          	sd	s7,1120(sp)
    8002a9b4:	45813c23          	sd	s8,1112(sp)
    8002a9b8:	45913823          	sd	s9,1104(sp)
    8002a9bc:	45a13423          	sd	s10,1096(sp)
    8002a9c0:	42048463          	beqz	s1,8002ade8 <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    8002a9c4:	1bf05563          	blez	t6,8002ab6e <vprintfmt.constprop.1+0x6be>
    8002a9c8:	02d00293          	li	t0,45
    8002a9cc:	445a9063          	bne	s5,t0,8002ae0c <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a9d0:	0004c283          	lbu	t0,0(s1)
    8002a9d4:	0002899b          	sext.w	s3,t0
    8002a9d8:	2c028363          	beqz	t0,8002ac9e <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    8002a9dc:	20070413          	addi	s0,a4,512
    8002a9e0:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a9e2:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    8002a9e4:	0002db97          	auipc	s7,0x2d
    8002a9e8:	6f0b8b93          	addi	s7,s7,1776 # 800580d4 <buflen.2>
    8002a9ec:	0002db17          	auipc	s6,0x2d
    8002a9f0:	694b0b13          	addi	s6,s6,1684 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a9f4:	4ca9                	li	s9,10
  magic_mem[0] = which;
    8002a9f6:	04000c13          	li	s8,64
    8002a9fa:	00011917          	auipc	s2,0x11
    8002a9fe:	64690913          	addi	s2,s2,1606 # 8003c040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002aa02:	04034263          	bltz	t1,8002aa46 <vprintfmt.constprop.1+0x596>
    8002aa06:	fff30a9b          	addiw	s5,t1,-1
    8002aa0a:	29aa8863          	beq	s5,s10,8002ac9a <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    8002aa0e:	0002d417          	auipc	s0,0x2d
    8002aa12:	6c642403          	lw	s0,1734(s0) # 800580d4 <buflen.2>
    8002aa16:	00140a1b          	addiw	s4,s0,1
    8002aa1a:	945a                	add	s0,s0,s6
    8002aa1c:	014ba023          	sw	s4,0(s7)
    8002aa20:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002aa24:	03998f63          	beq	s3,s9,8002aa62 <vprintfmt.constprop.1+0x5b2>
    8002aa28:	038a0d63          	beq	s4,s8,8002aa62 <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002aa2c:	0014c283          	lbu	t0,1(s1)
        p++;
    8002aa30:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002aa32:	3ffd                	addiw	t6,t6,-1
    8002aa34:	0002899b          	sext.w	s3,t0
    8002aa38:	26028163          	beqz	t0,8002ac9a <vprintfmt.constprop.1+0x7ea>
    8002aa3c:	1c034863          	bltz	t1,8002ac0c <vprintfmt.constprop.1+0x75c>
    8002aa40:	8356                	mv	t1,s5
    8002aa42:	fc0352e3          	bgez	t1,8002aa06 <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002aa46:	0002d417          	auipc	s0,0x2d
    8002aa4a:	68e42403          	lw	s0,1678(s0) # 800580d4 <buflen.2>
    8002aa4e:	8a9a                	mv	s5,t1
    8002aa50:	00140a1b          	addiw	s4,s0,1
    8002aa54:	945a                	add	s0,s0,s6
    8002aa56:	014ba023          	sw	s4,0(s7)
    8002aa5a:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002aa5e:	fd9995e3          	bne	s3,s9,8002aa28 <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002aa62:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002aa66:	4405                	li	s0,1
    8002aa68:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    8002aa6c:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002aa70:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002aa74:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002aa78:	62a2                	ld	t0,8(sp)
    8002aa7a:	00011417          	auipc	s0,0x11
    8002aa7e:	58640413          	addi	s0,s0,1414 # 8003c000 <tohost>
    8002aa82:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002aa86:	00093283          	ld	t0,0(s2)
    8002aa8a:	fe028ee3          	beqz	t0,8002aa86 <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    8002aa8e:	00011297          	auipc	t0,0x11
    8002aa92:	5a02b923          	sd	zero,1458(t0) # 8003c040 <fromhost>
  __sync_synchronize();
    8002aa96:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002aa9a:	20073283          	ld	t0,512(a4)
    buflen = 0;
    8002aa9e:	0002d297          	auipc	t0,0x2d
    8002aaa2:	6202ab23          	sw	zero,1590(t0) # 800580d4 <buflen.2>
    8002aaa6:	b759                	j	8002aa2c <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002aaa8:	82fe                	mv	t0,t6
    8002aaaa:	000fd363          	bgez	t6,8002aab0 <vprintfmt.constprop.1+0x600>
    8002aaae:	4281                	li	t0,0
        ch = *fmt;
    8002aab0:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002aab4:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    8002aab8:	842a                	mv	s0,a0
      goto reswitch;
    8002aaba:	b4dd                	j	8002a5a0 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002aabc:	0002d317          	auipc	t1,0x2d
    8002aac0:	61832303          	lw	t1,1560(t1) # 800580d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    8002aac4:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    8002aac8:	0002d917          	auipc	s2,0x2d
    8002aacc:	5b890913          	addi	s2,s2,1464 # 80058080 <buf.1>
    8002aad0:	00130f9b          	addiw	t6,t1,1
    8002aad4:	934a                	add	t1,t1,s2
    8002aad6:	00530023          	sb	t0,0(t1)
    8002aada:	0002d417          	auipc	s0,0x2d
    8002aade:	5ff42d23          	sw	t6,1530(s0) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002aae2:	4329                	li	t1,10
    8002aae4:	00628863          	beq	t0,t1,8002aaf4 <vprintfmt.constprop.1+0x644>
    8002aae8:	04000313          	li	t1,64
    8002aaec:	006f8463          	beq	t6,t1,8002aaf4 <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    8002aaf0:	03a1                	addi	t2,t2,8
    8002aaf2:	b415                	j	8002a516 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002aaf4:	04000313          	li	t1,64
    8002aaf8:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    8002aafc:	4305                	li	t1,1
    8002aafe:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    8002ab02:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    8002ab06:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    8002ab0a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ab0e:	28070313          	addi	t1,a4,640
    8002ab12:	00011f97          	auipc	t6,0x11
    8002ab16:	4e6fb723          	sd	t1,1262(t6) # 8003c000 <tohost>
  while (fromhost == 0)
    8002ab1a:	00011317          	auipc	t1,0x11
    8002ab1e:	52630313          	addi	t1,t1,1318 # 8003c040 <fromhost>
    8002ab22:	00033f83          	ld	t6,0(t1)
    8002ab26:	fe0f8ee3          	beqz	t6,8002ab22 <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    8002ab2a:	00011317          	auipc	t1,0x11
    8002ab2e:	50033b23          	sd	zero,1302(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002ab32:	0330000f          	fence	rw,rw
    buflen = 0;
    8002ab36:	0002d317          	auipc	t1,0x2d
    8002ab3a:	58032f23          	sw	zero,1438(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002ab3e:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002ab42:	03a1                	addi	t2,t2,8
    8002ab44:	bac9                	j	8002a516 <vprintfmt.constprop.1+0x66>
    8002ab46:	836a                	mv	t1,s10
    8002ab48:	b38d                	j	8002a8aa <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    8002ab4a:	4301                	li	t1,0
    8002ab4c:	b395                	j	8002a8b0 <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    8002ab4e:	4305                	li	t1,1
    8002ab50:	b385                	j	8002a8b0 <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002ab52:	0003b283          	ld	t0,0(t2)
    8002ab56:	0002d997          	auipc	s3,0x2d
    8002ab5a:	57e98993          	addi	s3,s3,1406 # 800580d4 <buflen.2>
    8002ab5e:	83a6                	mv	t2,s1
    8002ab60:	0002d917          	auipc	s2,0x2d
    8002ab64:	52090913          	addi	s2,s2,1312 # 80058080 <buf.1>
    8002ab68:	b949                	j	8002a7fa <vprintfmt.constprop.1+0x34a>
    if (num < base)
    8002ab6a:	4b81                	li	s7,0
    8002ab6c:	b955                	j	8002a820 <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ab6e:	0004c283          	lbu	t0,0(s1)
    8002ab72:	0002899b          	sext.w	s3,t0
    8002ab76:	e60293e3          	bnez	t0,8002a9dc <vprintfmt.constprop.1+0x52c>
    8002ab7a:	46013b83          	ld	s7,1120(sp)
    8002ab7e:	45813c03          	ld	s8,1112(sp)
    8002ab82:	45013c83          	ld	s9,1104(sp)
    8002ab86:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    8002ab8a:	03a1                	addi	t2,t2,8
    8002ab8c:	b269                	j	8002a516 <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    8002ab8e:	0003a283          	lw	t0,0(t2)
    8002ab92:	b1a1                	j	8002a7da <vprintfmt.constprop.1+0x32a>
    8002ab94:	4441                	li	s0,16
    8002ab96:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    8002ab9a:	0003b283          	ld	t0,0(t2)
    8002ab9e:	83a6                	mv	t2,s1
    8002aba0:	b9a9                	j	8002a7fa <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002aba2:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002aba4:	4305                	li	t1,1
    8002aba6:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    8002abaa:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    8002abae:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    8002abb0:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002abb4:	00011317          	auipc	t1,0x11
    8002abb8:	48c30313          	addi	t1,t1,1164 # 8003c040 <fromhost>
    8002abbc:	00011517          	auipc	a0,0x11
    8002abc0:	44e53223          	sd	a4,1092(a0) # 8003c000 <tohost>
  while (fromhost == 0)
    8002abc4:	00033503          	ld	a0,0(t1)
    8002abc8:	dd75                	beqz	a0,8002abc4 <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    8002abca:	00011517          	auipc	a0,0x11
    8002abce:	46053b23          	sd	zero,1142(a0) # 8003c040 <fromhost>
  __sync_synchronize();
    8002abd2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002abd6:	6308                	ld	a0,0(a4)
    buflen = 0;
    8002abd8:	0002d517          	auipc	a0,0x2d
    8002abdc:	4e052e23          	sw	zero,1276(a0) # 800580d4 <buflen.2>
      fmt = last_fmt;
    8002abe0:	8552                	mv	a0,s4
    8002abe2:	ba15                	j	8002a516 <vprintfmt.constprop.1+0x66>
    8002abe4:	47713023          	sd	s7,1120(sp)
    8002abe8:	45813c23          	sd	s8,1112(sp)
    8002abec:	45913823          	sd	s9,1104(sp)
    8002abf0:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002abf4:	4429                	li	s0,10
    8002abf6:	b361                	j	8002a97e <vprintfmt.constprop.1+0x4ce>
    8002abf8:	47713023          	sd	s7,1120(sp)
    8002abfc:	45813c23          	sd	s8,1112(sp)
    8002ac00:	45913823          	sd	s9,1104(sp)
    8002ac04:	45a13423          	sd	s10,1096(sp)
    8002ac08:	4421                	li	s0,8
    8002ac0a:	bb95                	j	8002a97e <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ac0c:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    8002ac0e:	4a29                	li	s4,10
    8002ac10:	04000a93          	li	s5,64
    8002ac14:	a801                	j	8002ac24 <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ac16:	00194283          	lbu	t0,1(s2)
        p++;
    8002ac1a:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ac1c:	0002899b          	sext.w	s3,t0
    8002ac20:	06028963          	beqz	t0,8002ac92 <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002ac24:	0002d317          	auipc	t1,0x2d
    8002ac28:	4b032303          	lw	t1,1200(t1) # 800580d4 <buflen.2>
    8002ac2c:	0013041b          	addiw	s0,t1,1
    8002ac30:	935a                	add	t1,t1,s6
    8002ac32:	008ba023          	sw	s0,0(s7)
    8002ac36:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ac3a:	01498463          	beq	s3,s4,8002ac42 <vprintfmt.constprop.1+0x792>
    8002ac3e:	fd541ce3          	bne	s0,s5,8002ac16 <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002ac42:	04000313          	li	t1,64
    8002ac46:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    8002ac4a:	4305                	li	t1,1
    8002ac4c:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    8002ac50:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002ac54:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002ac58:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ac5c:	20070313          	addi	t1,a4,512
    8002ac60:	00011297          	auipc	t0,0x11
    8002ac64:	3a62b023          	sd	t1,928(t0) # 8003c000 <tohost>
  while (fromhost == 0)
    8002ac68:	00011297          	auipc	t0,0x11
    8002ac6c:	3d828293          	addi	t0,t0,984 # 8003c040 <fromhost>
    8002ac70:	0002b303          	ld	t1,0(t0)
    8002ac74:	fe030ee3          	beqz	t1,8002ac70 <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002ac78:	00011317          	auipc	t1,0x11
    8002ac7c:	3c033423          	sd	zero,968(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002ac80:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ac84:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002ac88:	0002d317          	auipc	t1,0x2d
    8002ac8c:	44032623          	sw	zero,1100(t1) # 800580d4 <buflen.2>
    8002ac90:	b759                	j	8002ac16 <vprintfmt.constprop.1+0x766>
    8002ac92:	009f8fbb          	addw	t6,t6,s1
    8002ac96:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    8002ac9a:	eff050e3          	blez	t6,8002ab7a <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002ac9e:	0002d317          	auipc	t1,0x2d
    8002aca2:	43632303          	lw	t1,1078(t1) # 800580d4 <buflen.2>
    8002aca6:	0002d997          	auipc	s3,0x2d
    8002acaa:	42e98993          	addi	s3,s3,1070 # 800580d4 <buflen.2>
    8002acae:	0002d917          	auipc	s2,0x2d
    8002acb2:	3d290913          	addi	s2,s2,978 # 80058080 <buf.1>
    8002acb6:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    8002acba:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002acbe:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    8002acc0:	1c070b93          	addi	s7,a4,448
    8002acc4:	00011b17          	auipc	s6,0x11
    8002acc8:	33cb0b13          	addi	s6,s6,828 # 8003c000 <tohost>
    8002accc:	00011297          	auipc	t0,0x11
    8002acd0:	37428293          	addi	t0,t0,884 # 8003c040 <fromhost>
  buf[buflen++] = ch;
    8002acd4:	4c09                	li	s8,2
    8002acd6:	0013041b          	addiw	s0,t1,1
    8002acda:	934a                	add	t1,t1,s2
    8002acdc:	0089a023          	sw	s0,0(s3)
    8002ace0:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ace4:	04941e63          	bne	s0,s1,8002ad40 <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    8002ace8:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    8002acec:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    8002acf0:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    8002acf4:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    8002acf8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002acfc:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8002ad00:	0002b303          	ld	t1,0(t0)
    8002ad04:	fe030ee3          	beqz	t1,8002ad00 <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    8002ad08:	00011317          	auipc	t1,0x11
    8002ad0c:	32033c23          	sd	zero,824(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002ad10:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ad14:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002ad18:	ffff831b          	addiw	t1,t6,-1
    8002ad1c:	0c030163          	beqz	t1,8002adde <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    8002ad20:	0159a023          	sw	s5,0(s3)
    8002ad24:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002ad28:	3ff9                	addiw	t6,t6,-2
    8002ad2a:	e40f88e3          	beqz	t6,8002ab7a <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002ad2e:	0189a023          	sw	s8,0(s3)
    8002ad32:	014900a3          	sb	s4,1(s2)
    8002ad36:	4309                	li	t1,2
      for (; width > 0; width--)
    8002ad38:	3ffd                	addiw	t6,t6,-1
    8002ad3a:	f80f9ee3          	bnez	t6,8002acd6 <vprintfmt.constprop.1+0x826>
    8002ad3e:	bd35                	j	8002ab7a <vprintfmt.constprop.1+0x6ca>
    8002ad40:	8322                	mv	t1,s0
    8002ad42:	bfdd                	j	8002ad38 <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002ad44:	0002d917          	auipc	s2,0x2d
    8002ad48:	33c90913          	addi	s2,s2,828 # 80058080 <buf.1>
    8002ad4c:	006904b3          	add	s1,s2,t1
    8002ad50:	0013039b          	addiw	t2,t1,1
    8002ad54:	02d00313          	li	t1,45
    8002ad58:	00648023          	sb	t1,0(s1)
    8002ad5c:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ad60:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002ad64:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002ad66:	18938263          	beq	t2,s1,8002aeea <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    8002ad6a:	83a2                	mv	t2,s0
    8002ad6c:	405002b3          	neg	t0,t0
    8002ad70:	4429                	li	s0,10
    8002ad72:	b461                	j	8002a7fa <vprintfmt.constprop.1+0x34a>
    8002ad74:	0002d997          	auipc	s3,0x2d
    8002ad78:	36098993          	addi	s3,s3,864 # 800580d4 <buflen.2>
    8002ad7c:	0002d917          	auipc	s2,0x2d
    8002ad80:	30490913          	addi	s2,s2,772 # 80058080 <buf.1>
    8002ad84:	bd19                	j	8002ab9a <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002ad86:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    8002ad8a:	4305                	li	t1,1
    8002ad8c:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    8002ad90:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002ad94:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002ad98:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ad9c:	14070313          	addi	t1,a4,320
    8002ada0:	00011297          	auipc	t0,0x11
    8002ada4:	2662b023          	sd	t1,608(t0) # 8003c000 <tohost>
  while (fromhost == 0)
    8002ada8:	00011317          	auipc	t1,0x11
    8002adac:	29830313          	addi	t1,t1,664 # 8003c040 <fromhost>
    8002adb0:	00033283          	ld	t0,0(t1)
    8002adb4:	fe028ee3          	beqz	t0,8002adb0 <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    8002adb8:	00011317          	auipc	t1,0x11
    8002adbc:	28033423          	sd	zero,648(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002adc0:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002adc4:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    8002adc8:	07800293          	li	t0,120
    8002adcc:	4305                	li	t1,1
    8002adce:	00590023          	sb	t0,0(s2)
    8002add2:	0069a023          	sw	t1,0(s3)
    8002add6:	00838493          	addi	s1,t2,8
    8002adda:	4441                	li	s0,16
    8002addc:	bb7d                	j	8002ab9a <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    8002adde:	0002d317          	auipc	t1,0x2d
    8002ade2:	2e032b23          	sw	zero,758(t1) # 800580d4 <buflen.2>
    8002ade6:	bb51                	j	8002ab7a <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    8002ade8:	01f05663          	blez	t6,8002adf4 <vprintfmt.constprop.1+0x944>
    8002adec:	02d00293          	li	t0,45
    8002adf0:	005a9a63          	bne	s5,t0,8002ae04 <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002adf4:	02800293          	li	t0,40
    8002adf8:	8996                	mv	s3,t0
        p = "(null)";
    8002adfa:	0000f497          	auipc	s1,0xf
    8002adfe:	9ce48493          	addi	s1,s1,-1586 # 800397c8 <__func__.0+0xb8e0>
    8002ae02:	bee9                	j	8002a9dc <vprintfmt.constprop.1+0x52c>
    8002ae04:	0000f497          	auipc	s1,0xf
    8002ae08:	9c448493          	addi	s1,s1,-1596 # 800397c8 <__func__.0+0xb8e0>
  const char *p = s;
    8002ae0c:	82a6                	mv	t0,s1
  while (n-- && *p)
    8002ae0e:	00648933          	add	s2,s1,t1
    8002ae12:	00031663          	bnez	t1,8002ae1e <vprintfmt.constprop.1+0x96e>
    8002ae16:	a829                	j	8002ae30 <vprintfmt.constprop.1+0x980>
    p++;
    8002ae18:	0285                	addi	t0,t0,1
  while (n-- && *p)
    8002ae1a:	01228563          	beq	t0,s2,8002ae24 <vprintfmt.constprop.1+0x974>
    8002ae1e:	0002c403          	lbu	s0,0(t0)
    8002ae22:	f87d                	bnez	s0,8002ae18 <vprintfmt.constprop.1+0x968>
  return p - s;
    8002ae24:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    8002ae28:	405f8fbb          	subw	t6,t6,t0
    8002ae2c:	d5f051e3          	blez	t6,8002ab6e <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    8002ae30:	0002d297          	auipc	t0,0x2d
    8002ae34:	2a42a283          	lw	t0,676(t0) # 800580d4 <buflen.2>
    8002ae38:	0002d997          	auipc	s3,0x2d
    8002ae3c:	29c98993          	addi	s3,s3,668 # 800580d4 <buflen.2>
    8002ae40:	0002d917          	auipc	s2,0x2d
    8002ae44:	24090913          	addi	s2,s2,576 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002ae48:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    8002ae4c:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8002ae4e:	24070c93          	addi	s9,a4,576
    8002ae52:	00011c17          	auipc	s8,0x11
    8002ae56:	1aec0c13          	addi	s8,s8,430 # 8003c000 <tohost>
    8002ae5a:	00011417          	auipc	s0,0x11
    8002ae5e:	1e640413          	addi	s0,s0,486 # 8003c040 <fromhost>
  buf[buflen++] = ch;
    8002ae62:	4b89                	li	s7,2
    8002ae64:	00128d1b          	addiw	s10,t0,1
    8002ae68:	92ca                	add	t0,t0,s2
    8002ae6a:	01a9a023          	sw	s10,0(s3)
    8002ae6e:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ae72:	074d1563          	bne	s10,s4,8002aedc <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002ae76:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    8002ae7a:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    8002ae7e:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002ae82:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002ae86:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ae8a:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    8002ae8e:	00043283          	ld	t0,0(s0)
    8002ae92:	fe028ee3          	beqz	t0,8002ae8e <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002ae96:	00011297          	auipc	t0,0x11
    8002ae9a:	1a02b523          	sd	zero,426(t0) # 8003c040 <fromhost>
  __sync_synchronize();
    8002ae9e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002aea2:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002aea6:	ffff829b          	addiw	t0,t6,-1
    8002aeaa:	08028763          	beqz	t0,8002af38 <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    8002aeae:	0169a023          	sw	s6,0(s3)
    8002aeb2:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002aeb6:	3ff9                	addiw	t6,t6,-2
    8002aeb8:	000f8a63          	beqz	t6,8002aecc <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    8002aebc:	0179a023          	sw	s7,0(s3)
    8002aec0:	015900a3          	sb	s5,1(s2)
    8002aec4:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002aec6:	3ffd                	addiw	t6,t6,-1
    8002aec8:	f80f9ee3          	bnez	t6,8002ae64 <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002aecc:	0004c283          	lbu	t0,0(s1)
    8002aed0:	0002899b          	sext.w	s3,t0
    8002aed4:	ca0283e3          	beqz	t0,8002ab7a <vprintfmt.constprop.1+0x6ca>
    8002aed8:	4f81                	li	t6,0
    8002aeda:	b609                	j	8002a9dc <vprintfmt.constprop.1+0x52c>
    8002aedc:	82ea                	mv	t0,s10
    8002aede:	b7e5                	j	8002aec6 <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    8002aee0:	46013b83          	ld	s7,1120(sp)
    8002aee4:	842a                	mv	s0,a0
    8002aee6:	f8cff06f          	j	8002a672 <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    8002aeea:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    8002aeee:	4305                	li	t1,1
    8002aef0:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    8002aef4:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    8002aef8:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    8002aefc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002af00:	18070313          	addi	t1,a4,384
    8002af04:	00011397          	auipc	t2,0x11
    8002af08:	0e63be23          	sd	t1,252(t2) # 8003c000 <tohost>
  while (fromhost == 0)
    8002af0c:	00011317          	auipc	t1,0x11
    8002af10:	13430313          	addi	t1,t1,308 # 8003c040 <fromhost>
    8002af14:	00033383          	ld	t2,0(t1)
    8002af18:	fe038ee3          	beqz	t2,8002af14 <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    8002af1c:	00011317          	auipc	t1,0x11
    8002af20:	12033223          	sd	zero,292(t1) # 8003c040 <fromhost>
  __sync_synchronize();
    8002af24:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002af28:	18073303          	ld	t1,384(a4)
    buflen = 0;
    8002af2c:	0002d317          	auipc	t1,0x2d
    8002af30:	1a032423          	sw	zero,424(t1) # 800580d4 <buflen.2>
    8002af34:	4301                	li	t1,0
    8002af36:	bd15                	j	8002ad6a <vprintfmt.constprop.1+0x8ba>
    8002af38:	0002df97          	auipc	t6,0x2d
    8002af3c:	180fae23          	sw	zero,412(t6) # 800580d4 <buflen.2>
    8002af40:	b771                	j	8002aecc <vprintfmt.constprop.1+0xa1c>

000000008002af42 <strlen>:
  while (*p)
    8002af42:	00054783          	lbu	a5,0(a0)
    8002af46:	c78d                	beqz	a5,8002af70 <strlen+0x2e>
    8002af48:	4701                	li	a4,0
    8002af4a:	00150793          	addi	a5,a0,1
    8002af4e:	0c0076d7          	vsetvli	a3,zero,e8,m1,ta,ma
    8002af52:	97ba                	add	a5,a5,a4
    8002af54:	03078087          	vle8ff.v	v1,(a5)
    8002af58:	621030d7          	vmseq.vi	v1,v1,0
    8002af5c:	c2002773          	csrr	a4,vl
    8002af60:	4218a657          	vfirst.m	a2,v1
    8002af64:	fe0645e3          	bltz	a2,8002af4e <strlen+0xc>
    8002af68:	97b2                	add	a5,a5,a2
  return p - s;
    8002af6a:	40a78533          	sub	a0,a5,a0
    8002af6e:	8082                	ret
  while (*p)
    8002af70:	4501                	li	a0,0
}
    8002af72:	8082                	ret

000000008002af74 <strnlen>:
  while (n-- && *p)
    8002af74:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8002af78:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002af7a:	e589                	bnez	a1,8002af84 <strnlen+0x10>
    8002af7c:	a811                	j	8002af90 <strnlen+0x1c>
    p++;
    8002af7e:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002af80:	00d78563          	beq	a5,a3,8002af8a <strnlen+0x16>
    8002af84:	0007c703          	lbu	a4,0(a5)
    8002af88:	fb7d                	bnez	a4,8002af7e <strnlen+0xa>
  return p - s;
    8002af8a:	40a78533          	sub	a0,a5,a0
}
    8002af8e:	8082                	ret
  while (n-- && *p)
    8002af90:	4501                	li	a0,0
    8002af92:	8082                	ret

000000008002af94 <setStats>:
  READ_CTR(mcycle);
    8002af94:	b0002773          	csrr	a4,mcycle
    8002af98:	0002d797          	auipc	a5,0x2d
    8002af9c:	0e878793          	addi	a5,a5,232 # 80058080 <buf.1>
    8002afa0:	c511                	beqz	a0,8002afac <setStats+0x18>
    8002afa2:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002afa4:	b0202773          	csrr	a4,minstret
    8002afa8:	e7b8                	sd	a4,72(a5)
}
    8002afaa:	8082                	ret
  READ_CTR(mcycle);
    8002afac:	63b4                	ld	a3,64(a5)
    8002afae:	8f15                	sub	a4,a4,a3
    8002afb0:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002afb2:	b0202773          	csrr	a4,minstret
    8002afb6:	67b4                	ld	a3,72(a5)
    8002afb8:	8f15                	sub	a4,a4,a3
    8002afba:	e7b8                	sd	a4,72(a5)
}
    8002afbc:	8082                	ret

000000008002afbe <tohost_exit>:
  tohost = (code << 1) | 1;
    8002afbe:	00151793          	slli	a5,a0,0x1
    8002afc2:	0017e793          	ori	a5,a5,1
    8002afc6:	00011717          	auipc	a4,0x11
    8002afca:	02f73d23          	sd	a5,58(a4) # 8003c000 <tohost>
  while (1);
    8002afce:	a001                	j	8002afce <tohost_exit+0x10>

000000008002afd0 <handle_trap>:
  tohost = (code << 1) | 1;
    8002afd0:	6785                	lui	a5,0x1
    8002afd2:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8002afd6:	00011717          	auipc	a4,0x11
    8002afda:	02f73523          	sd	a5,42(a4) # 8003c000 <tohost>
  while (1);
    8002afde:	a001                	j	8002afde <handle_trap+0xe>

000000008002afe0 <exit>:
{
    8002afe0:	1141                	addi	sp,sp,-16
    8002afe2:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8002afe4:	fdbff0ef          	jal	8002afbe <tohost_exit>

000000008002afe8 <abort>:
  tohost = (code << 1) | 1;
    8002afe8:	10d00793          	li	a5,269
    8002afec:	00011717          	auipc	a4,0x11
    8002aff0:	00f73a23          	sd	a5,20(a4) # 8003c000 <tohost>
  while (1);
    8002aff4:	a001                	j	8002aff4 <abort+0xc>

000000008002aff6 <printstr>:
  while (*p)
    8002aff6:	00054783          	lbu	a5,0(a0)
{
    8002affa:	7159                	addi	sp,sp,-112
    8002affc:	03f10693          	addi	a3,sp,63
    8002b000:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002b004:	cfb9                	beqz	a5,8002b062 <printstr+0x6c>
    8002b006:	4701                	li	a4,0
    8002b008:	00150793          	addi	a5,a0,1
    8002b00c:	0c007657          	vsetvli	a2,zero,e8,m1,ta,ma
    8002b010:	97ba                	add	a5,a5,a4
    8002b012:	03078087          	vle8ff.v	v1,(a5)
    8002b016:	621030d7          	vmseq.vi	v1,v1,0
    8002b01a:	c2002773          	csrr	a4,vl
    8002b01e:	4218a5d7          	vfirst.m	a1,v1
    8002b022:	fe05c5e3          	bltz	a1,8002b00c <printstr+0x16>
    8002b026:	97ae                	add	a5,a5,a1
  return p - s;
    8002b028:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002b02a:	04000713          	li	a4,64
    8002b02e:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002b030:	4705                	li	a4,1
    8002b032:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002b034:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8002b036:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002b038:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002b03c:	00011717          	auipc	a4,0x11
    8002b040:	00470713          	addi	a4,a4,4 # 8003c040 <fromhost>
    8002b044:	00011797          	auipc	a5,0x11
    8002b048:	fad7be23          	sd	a3,-68(a5) # 8003c000 <tohost>
  while (fromhost == 0)
    8002b04c:	631c                	ld	a5,0(a4)
    8002b04e:	dffd                	beqz	a5,8002b04c <printstr+0x56>
  fromhost = 0;
    8002b050:	00011797          	auipc	a5,0x11
    8002b054:	fe07b823          	sd	zero,-16(a5) # 8003c040 <fromhost>
  __sync_synchronize();
    8002b058:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002b05c:	629c                	ld	a5,0(a3)
}
    8002b05e:	6165                	addi	sp,sp,112
    8002b060:	8082                	ret
  while (*p)
    8002b062:	4781                	li	a5,0
    8002b064:	b7d9                	j	8002b02a <printstr+0x34>

000000008002b066 <puts>:
    8002b066:	00054783          	lbu	a5,0(a0)
{
    8002b06a:	7171                	addi	sp,sp,-176
    8002b06c:	03f10693          	addi	a3,sp,63
    8002b070:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002b074:	cfdd                	beqz	a5,8002b132 <puts+0xcc>
    8002b076:	4601                	li	a2,0
    8002b078:	00150793          	addi	a5,a0,1
    8002b07c:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002b080:	97b2                	add	a5,a5,a2
    8002b082:	03078087          	vle8ff.v	v1,(a5)
    8002b086:	621030d7          	vmseq.vi	v1,v1,0
    8002b08a:	c2002673          	csrr	a2,vl
    8002b08e:	4218a5d7          	vfirst.m	a1,v1
    8002b092:	fe05c5e3          	bltz	a1,8002b07c <puts+0x16>
    8002b096:	97ae                	add	a5,a5,a1
  return p - s;
    8002b098:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002b09a:	04000713          	li	a4,64
    8002b09e:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8002b0a0:	4705                	li	a4,1
    8002b0a2:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8002b0a4:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8002b0a6:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8002b0a8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002b0ac:	00011617          	auipc	a2,0x11
    8002b0b0:	f5460613          	addi	a2,a2,-172 # 8003c000 <tohost>
    8002b0b4:	04068793          	addi	a5,a3,64
    8002b0b8:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8002b0ba:	00011797          	auipc	a5,0x11
    8002b0be:	f8678793          	addi	a5,a5,-122 # 8003c040 <fromhost>
    8002b0c2:	6398                	ld	a4,0(a5)
    8002b0c4:	df7d                	beqz	a4,8002b0c2 <puts+0x5c>
  fromhost = 0;
    8002b0c6:	00011717          	auipc	a4,0x11
    8002b0ca:	f6073d23          	sd	zero,-134(a4) # 8003c040 <fromhost>
  __sync_synchronize();
    8002b0ce:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002b0d2:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8002b0d4:	04000593          	li	a1,64
    8002b0d8:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8002b0da:	4705                	li	a4,1
    8002b0dc:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8002b0de:	0000e597          	auipc	a1,0xe
    8002b0e2:	6f258593          	addi	a1,a1,1778 # 800397d0 <__func__.0+0xb8e8>
  magic_mem[2] = arg1;
    8002b0e6:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8002b0e8:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8002b0ea:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002b0ee:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8002b0f0:	6398                	ld	a4,0(a5)
    8002b0f2:	df7d                	beqz	a4,8002b0f0 <puts+0x8a>
  fromhost = 0;
    8002b0f4:	00011797          	auipc	a5,0x11
    8002b0f8:	f407b623          	sd	zero,-180(a5) # 8003c040 <fromhost>
  __sync_synchronize();
    8002b0fc:	0330000f          	fence	rw,rw
  while (*p)
    8002b100:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8002b104:	6298                	ld	a4,0(a3)
  while (*p)
    8002b106:	cb85                	beqz	a5,8002b136 <puts+0xd0>
    8002b108:	4681                	li	a3,0
    8002b10a:	00150793          	addi	a5,a0,1
    8002b10e:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002b112:	97b6                	add	a5,a5,a3
    8002b114:	03078087          	vle8ff.v	v1,(a5)
    8002b118:	621030d7          	vmseq.vi	v1,v1,0
    8002b11c:	c20026f3          	csrr	a3,vl
    8002b120:	4218a657          	vfirst.m	a2,v1
    8002b124:	fe0645e3          	bltz	a2,8002b10e <puts+0xa8>
    8002b128:	97b2                	add	a5,a5,a2
  return strlen(s);
    8002b12a:	40a7853b          	subw	a0,a5,a0
}
    8002b12e:	614d                	addi	sp,sp,176
    8002b130:	8082                	ret
  while (*p)
    8002b132:	4781                	li	a5,0
    8002b134:	b79d                	j	8002b09a <puts+0x34>
    8002b136:	4501                	li	a0,0
}
    8002b138:	614d                	addi	sp,sp,176
    8002b13a:	8082                	ret

000000008002b13c <thread_entry>:
  while (cid != 0);
    8002b13c:	e111                	bnez	a0,8002b140 <thread_entry+0x4>
}
    8002b13e:	8082                	ret
  while (cid != 0);
    8002b140:	a001                	j	8002b140 <thread_entry+0x4>

000000008002b142 <printhex>:
  for (i = 0; i < 16; i++)
    8002b142:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002b146:	5208a157          	vid.v	v2
    8002b14a:	5e0540d7          	vmv.v.x	v1,a0
    8002b14e:	96213157          	vsll.vi	v2,v2,2
    8002b152:	03800613          	li	a2,56
    8002b156:	03000793          	li	a5,48
    8002b15a:	a21100d7          	vsrl.vv	v1,v1,v2
    8002b15e:	02000693          	li	a3,32
    8002b162:	02800713          	li	a4,40
    8002b166:	a2164157          	vsrl.vx	v2,v1,a2
    8002b16a:	a217c857          	vsrl.vx	v16,v1,a5
    8002b16e:	a216c457          	vsrl.vx	v8,v1,a3
    8002b172:	a21747d7          	vsrl.vx	v15,v1,a4
    8002b176:	a21433d7          	vsrl.vi	v7,v1,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002b17a:	a2183357          	vsrl.vi	v6,v1,16
    8002b17e:	a21c32d7          	vsrl.vi	v5,v1,24
    8002b182:	0d707057          	vsetvli	zero,zero,e32,mf2,ta,ma
    8002b186:	b22044d7          	vncvt.x.x.w	v9,v2
    8002b18a:	b21046d7          	vncvt.x.x.w	v13,v1
    8002b18e:	b2704657          	vncvt.x.x.w	v12,v7
    8002b192:	b26045d7          	vncvt.x.x.w	v11,v6
    8002b196:	b2504557          	vncvt.x.x.w	v10,v5
    8002b19a:	b2804257          	vncvt.x.x.w	v4,v8
    8002b19e:	b2f041d7          	vncvt.x.x.w	v3,v15
    8002b1a2:	b3004757          	vncvt.x.x.w	v14,v16
    8002b1a6:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1aa:	b29044d7          	vncvt.x.x.w	v9,v9
    8002b1ae:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b1b2:	2627b157          	vand.vi	v2,v2,15
    8002b1b6:	2617b0d7          	vand.vi	v1,v1,15
    8002b1ba:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1be:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002b1c2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b1c6:	2677b3d7          	vand.vi	v7,v7,15
    8002b1ca:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1ce:	b2c04657          	vncvt.x.x.w	v12,v12
    8002b1d2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b1d6:	2667b357          	vand.vi	v6,v6,15
    8002b1da:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1de:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002b1e2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b1e6:	2657b2d7          	vand.vi	v5,v5,15
    8002b1ea:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1ee:	b2a04557          	vncvt.x.x.w	v10,v10
    8002b1f2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b1f6:	2687b457          	vand.vi	v8,v8,15
    8002b1fa:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b1fe:	b2404257          	vncvt.x.x.w	v4,v4
    8002b202:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b206:	26f7b7d7          	vand.vi	v15,v15,15
    8002b20a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b20e:	b23041d7          	vncvt.x.x.w	v3,v3
    8002b212:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b216:	2707b8d7          	vand.vi	v17,v16,15
    8002b21a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002b21e:	b2e04757          	vncvt.x.x.w	v14,v14
    8002b222:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b226:	b29044d7          	vncvt.x.x.w	v9,v9
    8002b22a:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b22e:	7224b057          	vmsleu.vi	v0,v2,9
    8002b232:	05700713          	li	a4,87
    8002b236:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b23a:	5e074157          	vmv.v.x	v2,a4
    8002b23e:	5e07c9d7          	vmv.v.x	v19,a5
    8002b242:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b246:	7214b0d7          	vmsleu.vi	v1,v1,9
    8002b24a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b24e:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002b252:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b256:	7274b3d7          	vmsleu.vi	v7,v7,9
    8002b25a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b25e:	b2c04657          	vncvt.x.x.w	v12,v12
    8002b262:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b266:	7264b357          	vmsleu.vi	v6,v6,9
    8002b26a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b26e:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002b272:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b276:	7254b2d7          	vmsleu.vi	v5,v5,9
    8002b27a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b27e:	b2a04557          	vncvt.x.x.w	v10,v10
    8002b282:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b286:	7284b457          	vmsleu.vi	v8,v8,9
    8002b28a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b28e:	b2404257          	vncvt.x.x.w	v4,v4
    8002b292:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b296:	72f4b7d7          	vmsleu.vi	v15,v15,9
    8002b29a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b29e:	b23041d7          	vncvt.x.x.w	v3,v3
    8002b2a2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002b2a6:	7314b8d7          	vmsleu.vi	v17,v17,9
    8002b2aa:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002b2ae:	9f303957          	vmv1r.v	v18,v19
    8002b2b2:	9f303b57          	vmv1r.v	v22,v19
    8002b2b6:	9f303bd7          	vmv1r.v	v23,v19
    8002b2ba:	9f303857          	vmv1r.v	v16,v19
    8002b2be:	9f303c57          	vmv1r.v	v24,v19
    8002b2c2:	9f303ad7          	vmv1r.v	v21,v19
    8002b2c6:	9f303a57          	vmv1r.v	v20,v19
    8002b2ca:	5c2989d7          	vmerge.vvm	v19,v2,v19,v0
    8002b2ce:	9e103057          	vmv1r.v	v0,v1
    8002b2d2:	b2e04757          	vncvt.x.x.w	v14,v14
    8002b2d6:	2697b4d7          	vand.vi	v9,v9,15
    8002b2da:	5c290957          	vmerge.vvm	v18,v2,v18,v0
    8002b2de:	9e703057          	vmv1r.v	v0,v7
    8002b2e2:	26d7b6d7          	vand.vi	v13,v13,15
    8002b2e6:	26c7b657          	vand.vi	v12,v12,15
    8002b2ea:	5c2b0b57          	vmerge.vvm	v22,v2,v22,v0
    8002b2ee:	9e603057          	vmv1r.v	v0,v6
    8002b2f2:	26b7b5d7          	vand.vi	v11,v11,15
    8002b2f6:	26a7b557          	vand.vi	v10,v10,15
    8002b2fa:	5c2b8bd7          	vmerge.vvm	v23,v2,v23,v0
    8002b2fe:	9e503057          	vmv1r.v	v0,v5
    8002b302:	2647b257          	vand.vi	v4,v4,15
    8002b306:	26e7b2d7          	vand.vi	v5,v14,15
    8002b30a:	5c280857          	vmerge.vvm	v16,v2,v16,v0
    8002b30e:	9e803057          	vmv1r.v	v0,v8
    8002b312:	2637b1d7          	vand.vi	v3,v3,15
    8002b316:	5208a0d7          	vid.v	v1
    8002b31a:	5c2c0c57          	vmerge.vvm	v24,v2,v24,v0
    8002b31e:	9ef03057          	vmv1r.v	v0,v15
    8002b322:	0e10b0d7          	vrsub.vi	v1,v1,1
    8002b326:	02998357          	vadd.vv	v6,v9,v19
    8002b32a:	5c2a8ad7          	vmerge.vvm	v21,v2,v21,v0
    8002b32e:	9f103057          	vmv1r.v	v0,v17
    8002b332:	02cb0657          	vadd.vv	v12,v12,v22
    8002b336:	024c0257          	vadd.vv	v4,v4,v24
    8002b33a:	5c2a0157          	vmerge.vvm	v2,v2,v20,v0
    8002b33e:	023a81d7          	vadd.vv	v3,v3,v21
    8002b342:	02d906d7          	vadd.vv	v13,v13,v18
    8002b346:	025102d7          	vadd.vv	v5,v5,v2
    8002b34a:	02bb85d7          	vadd.vv	v11,v11,v23
    8002b34e:	02a80557          	vadd.vv	v10,v10,v16
    8002b352:	32c08757          	vrgather.vv	v14,v12,v1
    8002b356:	32408457          	vrgather.vv	v8,v4,v1
    8002b35a:	323083d7          	vrgather.vv	v7,v3,v1
    8002b35e:	32b08657          	vrgather.vv	v12,v11,v1
    8002b362:	32a084d7          	vrgather.vv	v9,v10,v1
    8002b366:	32508257          	vrgather.vv	v4,v5,v1
    8002b36a:	326081d7          	vrgather.vv	v3,v6,v1
    8002b36e:	32d08157          	vrgather.vv	v2,v13,v1
{
    8002b372:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002b374:	00a10693          	addi	a3,sp,10
  while (*p)
    8002b378:	3e60b7d7          	vslidedown.vi	v15,v6,1
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002b37c:	01210893          	addi	a7,sp,18
    8002b380:	01010813          	addi	a6,sp,16
    8002b384:	00e10513          	addi	a0,sp,14
    8002b388:	006c                	addi	a1,sp,12
    8002b38a:	0030                	addi	a2,sp,8
    8002b38c:	01610713          	addi	a4,sp,22
    8002b390:	01410313          	addi	t1,sp,20
    8002b394:	02068227          	vse8.v	v4,(a3)
    8002b398:	02030727          	vse8.v	v14,(t1)
    8002b39c:	02088627          	vse8.v	v12,(a7)
    8002b3a0:	020804a7          	vse8.v	v9,(a6)
    8002b3a4:	02050427          	vse8.v	v8,(a0)
    8002b3a8:	020583a7          	vse8.v	v7,(a1)
    8002b3ac:	020601a7          	vse8.v	v3,(a2)
    8002b3b0:	02070127          	vse8.v	v2,(a4)
  while (*p)
    8002b3b4:	42f027d7          	vmv.x.s	a5,v15
{
    8002b3b8:	05f10693          	addi	a3,sp,95
  str[16] = 0;
    8002b3bc:	00010c23          	sb	zero,24(sp)
  while (*p)
    8002b3c0:	0ff7f793          	zext.b	a5,a5
{
    8002b3c4:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002b3c8:	cfb9                	beqz	a5,8002b426 <printhex+0x2e4>
    8002b3ca:	4701                	li	a4,0
    8002b3cc:	00910793          	addi	a5,sp,9
    8002b3d0:	0c0075d7          	vsetvli	a1,zero,e8,m1,ta,ma
    8002b3d4:	97ba                	add	a5,a5,a4
    8002b3d6:	03078087          	vle8ff.v	v1,(a5)
    8002b3da:	621030d7          	vmseq.vi	v1,v1,0
    8002b3de:	c2002773          	csrr	a4,vl
    8002b3e2:	4218a557          	vfirst.m	a0,v1
    8002b3e6:	fe0545e3          	bltz	a0,8002b3d0 <printhex+0x28e>
    8002b3ea:	97aa                	add	a5,a5,a0
  return p - s;
    8002b3ec:	8f91                	sub	a5,a5,a2
  magic_mem[0] = which;
    8002b3ee:	04000713          	li	a4,64
    8002b3f2:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002b3f4:	4705                	li	a4,1
    8002b3f6:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002b3f8:	ea90                	sd	a2,16(a3)
  magic_mem[3] = arg2;
    8002b3fa:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002b3fc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002b400:	00011717          	auipc	a4,0x11
    8002b404:	c4070713          	addi	a4,a4,-960 # 8003c040 <fromhost>
    8002b408:	00011797          	auipc	a5,0x11
    8002b40c:	bed7bc23          	sd	a3,-1032(a5) # 8003c000 <tohost>
  while (fromhost == 0)
    8002b410:	631c                	ld	a5,0(a4)
    8002b412:	dffd                	beqz	a5,8002b410 <printhex+0x2ce>
  fromhost = 0;
    8002b414:	00011797          	auipc	a5,0x11
    8002b418:	c207b623          	sd	zero,-980(a5) # 8003c040 <fromhost>
  __sync_synchronize();
    8002b41c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002b420:	629c                	ld	a5,0(a3)
}
    8002b422:	6149                	addi	sp,sp,144
    8002b424:	8082                	ret
  while (*p)
    8002b426:	4781                	li	a5,0
    8002b428:	b7d9                	j	8002b3ee <printhex+0x2ac>

000000008002b42a <printf>:
{
    8002b42a:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002b42c:	02810313          	addi	t1,sp,40
{
    8002b430:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002b432:	859a                	mv	a1,t1
{
    8002b434:	ec06                	sd	ra,24(sp)
    8002b436:	f832                	sd	a2,48(sp)
    8002b438:	fc36                	sd	a3,56(sp)
    8002b43a:	e0ba                	sd	a4,64(sp)
    8002b43c:	e4be                	sd	a5,72(sp)
    8002b43e:	e8c2                	sd	a6,80(sp)
    8002b440:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002b442:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002b444:	86cff0ef          	jal	8002a4b0 <vprintfmt.constprop.1>
}
    8002b448:	60e2                	ld	ra,24(sp)
    8002b44a:	4501                	li	a0,0
    8002b44c:	6125                	addi	sp,sp,96
    8002b44e:	8082                	ret

000000008002b450 <sprintf>:
{
    8002b450:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002b452:	03010313          	addi	t1,sp,48
{
    8002b456:	f022                	sd	s0,32(sp)
    8002b458:	e42a                	sd	a0,8(sp)
    8002b45a:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8002b45c:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002b45e:	861a                	mv	a2,t1
    8002b460:	0028                	addi	a0,sp,8
{
    8002b462:	f406                	sd	ra,40(sp)
    8002b464:	fc36                	sd	a3,56(sp)
    8002b466:	e0ba                	sd	a4,64(sp)
    8002b468:	e4be                	sd	a5,72(sp)
    8002b46a:	e8c2                	sd	a6,80(sp)
    8002b46c:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002b46e:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002b470:	d2bfe0ef          	jal	8002a19a <vprintfmt.constprop.0>
  *str = 0;
    8002b474:	6522                	ld	a0,8(sp)
    8002b476:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8002b47a:	70a2                	ld	ra,40(sp)
    8002b47c:	9d01                	subw	a0,a0,s0
    8002b47e:	7402                	ld	s0,32(sp)
    8002b480:	6125                	addi	sp,sp,96
    8002b482:	8082                	ret

000000008002b484 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002b484:	00c5e7b3          	or	a5,a1,a2
    8002b488:	8fc9                	or	a5,a5,a0
    8002b48a:	8b9d                	andi	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8002b48c:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002b490:	cb85                	beqz	a5,8002b4c0 <memcpy+0x3c>
    while (d < (char*)(dest + len))
    8002b492:	08d57363          	bgeu	a0,a3,8002b518 <memcpy+0x94>
    8002b496:	00158793          	addi	a5,a1,1
    8002b49a:	c2202773          	csrr	a4,vlenb
    8002b49e:	40f506b3          	sub	a3,a0,a5
    8002b4a2:	1779                	addi	a4,a4,-2
    8002b4a4:	04d77e63          	bgeu	a4,a3,8002b500 <memcpy+0x7c>
    8002b4a8:	872a                	mv	a4,a0
    8002b4aa:	0c0677d7          	vsetvli	a5,a2,e8,m1,ta,ma
      *d++ = *s++;
    8002b4ae:	02058087          	vle8.v	v1,(a1)
    while (d < (char*)(dest + len))
    8002b4b2:	8e1d                	sub	a2,a2,a5
    8002b4b4:	95be                	add	a1,a1,a5
      *d++ = *s++;
    8002b4b6:	020700a7          	vse8.v	v1,(a4)
    while (d < (char*)(dest + len))
    8002b4ba:	973e                	add	a4,a4,a5
    8002b4bc:	f67d                	bnez	a2,8002b4aa <memcpy+0x26>
    8002b4be:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002b4c0:	04d57b63          	bgeu	a0,a3,8002b516 <memcpy+0x92>
    8002b4c4:	167d                	addi	a2,a2,-1
    8002b4c6:	04700793          	li	a5,71
    8002b4ca:	00858713          	addi	a4,a1,8
    8002b4ce:	04c7f663          	bgeu	a5,a2,8002b51a <memcpy+0x96>
    8002b4d2:	c22027f3          	csrr	a5,vlenb
    8002b4d6:	40e50833          	sub	a6,a0,a4
    8002b4da:	17c1                	addi	a5,a5,-16
    8002b4dc:	0307ff63          	bgeu	a5,a6,8002b51a <memcpy+0x96>
    8002b4e0:	820d                	srli	a2,a2,0x3
    8002b4e2:	0605                	addi	a2,a2,1
    8002b4e4:	872a                	mv	a4,a0
    8002b4e6:	0c5677d7          	vsetvli	a5,a2,e8,mf8,ta,ma
      *d++ = *s++;
    8002b4ea:	0205f087          	vle64.v	v1,(a1)
    8002b4ee:	00379693          	slli	a3,a5,0x3
    while (d < (uintptr_t*)(dest + len))
    8002b4f2:	8e1d                	sub	a2,a2,a5
    8002b4f4:	95b6                	add	a1,a1,a3
      *d++ = *s++;
    8002b4f6:	020770a7          	vse64.v	v1,(a4)
    while (d < (uintptr_t*)(dest + len))
    8002b4fa:	9736                	add	a4,a4,a3
    8002b4fc:	f66d                	bnez	a2,8002b4e6 <memcpy+0x62>
    8002b4fe:	8082                	ret
    8002b500:	95b2                	add	a1,a1,a2
    char *d = dest;
    8002b502:	872a                	mv	a4,a0
    8002b504:	a011                	j	8002b508 <memcpy+0x84>
    8002b506:	0785                	addi	a5,a5,1
      *d++ = *s++;
    8002b508:	fff7c683          	lbu	a3,-1(a5)
    8002b50c:	0705                	addi	a4,a4,1
    8002b50e:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8002b512:	fef59ae3          	bne	a1,a5,8002b506 <memcpy+0x82>
  }
  return dest;
}
    8002b516:	8082                	ret
    8002b518:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002b51a:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002b51c:	ff873603          	ld	a2,-8(a4)
    8002b520:	07a1                	addi	a5,a5,8
    8002b522:	0721                	addi	a4,a4,8
    8002b524:	fec7bc23          	sd	a2,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8002b528:	fed7eae3          	bltu	a5,a3,8002b51c <memcpy+0x98>
}
    8002b52c:	8082                	ret

000000008002b52e <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002b52e:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002b530:	00c566b3          	or	a3,a0,a2
{
    8002b534:	e022                	sd	s0,0(sp)
    8002b536:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002b538:	8a9d                	andi	a3,a3,7
{
    8002b53a:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002b53c:	00c50833          	add	a6,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002b540:	ce81                	beqz	a3,8002b558 <memset+0x2a>
    while (d < (char*)(dest + len))
    8002b542:	01057663          	bgeu	a0,a6,8002b54e <memset+0x20>
      *d++ = byte;
    8002b546:	0ff5f593          	zext.b	a1,a1
    8002b54a:	fe5ff0ef          	jal	8002b52e <memset>
  }
  return dest;
}
    8002b54e:	60a2                	ld	ra,8(sp)
    8002b550:	8522                	mv	a0,s0
    8002b552:	6402                	ld	s0,0(sp)
    8002b554:	0141                	addi	sp,sp,16
    8002b556:	8082                	ret
    word |= word << 16 << 16;
    8002b558:	8732                	mv	a4,a2
    8002b55a:	01010637          	lui	a2,0x1010
    8002b55e:	10160613          	addi	a2,a2,257 # 1010101 <STACK_SIZE+0xf10101>
    8002b562:	87aa                	mv	a5,a0
    8002b564:	02061513          	slli	a0,a2,0x20
    uintptr_t word = byte & 0xFF;
    8002b568:	0ff5f593          	zext.b	a1,a1
    8002b56c:	9532                	add	a0,a0,a2
    8002b56e:	02a585b3          	mul	a1,a1,a0
    while (d < (uintptr_t*)(dest + len))
    8002b572:	fd047ee3          	bgeu	s0,a6,8002b54e <memset+0x20>
    8002b576:	177d                	addi	a4,a4,-1
    8002b578:	00375613          	srli	a2,a4,0x3
    8002b57c:	451d                	li	a0,7
    8002b57e:	0605                	addi	a2,a2,1
    8002b580:	02e57463          	bgeu	a0,a4,8002b5a8 <memset+0x7a>
    8002b584:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002b588:	00165713          	srli	a4,a2,0x1
    8002b58c:	5e05c0d7          	vmv.v.x	v1,a1
    8002b590:	0712                	slli	a4,a4,0x4
    8002b592:	9722                	add	a4,a4,s0
      *d++ = word;
    8002b594:	0207f0a7          	vse64.v	v1,(a5)
    while (d < (uintptr_t*)(dest + len))
    8002b598:	07c1                	addi	a5,a5,16
    8002b59a:	fef71de3          	bne	a4,a5,8002b594 <memset+0x66>
    8002b59e:	00167793          	andi	a5,a2,1
    8002b5a2:	d7d5                	beqz	a5,8002b54e <memset+0x20>
    8002b5a4:	ffe67693          	andi	a3,a2,-2
    8002b5a8:	8e15                	sub	a2,a2,a3
    8002b5aa:	0d867057          	vsetvli	zero,a2,e64,m1,ta,ma
      *d++ = word;
    8002b5ae:	5e05c0d7          	vmv.v.x	v1,a1
    8002b5b2:	068e                	slli	a3,a3,0x3
    8002b5b4:	96a2                	add	a3,a3,s0
    8002b5b6:	0206f0a7          	vse64.v	v1,(a3)
}
    8002b5ba:	60a2                	ld	ra,8(sp)
    8002b5bc:	8522                	mv	a0,s0
    8002b5be:	6402                	ld	s0,0(sp)
    8002b5c0:	0141                	addi	sp,sp,16
    8002b5c2:	8082                	ret

000000008002b5c4 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8002b5c4:	00054783          	lbu	a5,0(a0)
    8002b5c8:	0505                	addi	a0,a0,1
    c2 = *s2++;
    8002b5ca:	0585                	addi	a1,a1,1
    8002b5cc:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8002b5d0:	c799                	beqz	a5,8002b5de <strcmp+0x1a>
    8002b5d2:	fee789e3          	beq	a5,a4,8002b5c4 <strcmp>

  return c1 - c2;
    8002b5d6:	0007851b          	sext.w	a0,a5
}
    8002b5da:	9d19                	subw	a0,a0,a4
    8002b5dc:	8082                	ret
    8002b5de:	4501                	li	a0,0
  return c1 - c2;
    8002b5e0:	bfed                	j	8002b5da <strcmp+0x16>

000000008002b5e2 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8002b5e2:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8002b5e4:	0005c703          	lbu	a4,0(a1)
    8002b5e8:	0585                	addi	a1,a1,1
    8002b5ea:	0785                	addi	a5,a5,1
    8002b5ec:	fee78fa3          	sb	a4,-1(a5)
    8002b5f0:	fb75                	bnez	a4,8002b5e4 <strcpy+0x2>
    ;
  return dest;
}
    8002b5f2:	8082                	ret

000000008002b5f4 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8002b5f4:	00054683          	lbu	a3,0(a0)
    8002b5f8:	02000713          	li	a4,32
{
    8002b5fc:	87aa                	mv	a5,a0
  while (*str == ' ')
    8002b5fe:	00e69863          	bne	a3,a4,8002b60e <atol+0x1a>
    8002b602:	8736                	mv	a4,a3
    8002b604:	0017c683          	lbu	a3,1(a5)
    str++;
    8002b608:	0785                	addi	a5,a5,1
  while (*str == ' ')
    8002b60a:	fee68de3          	beq	a3,a4,8002b604 <atol+0x10>

  if (*str == '-' || *str == '+') {
    8002b60e:	02d00713          	li	a4,45
    8002b612:	02e68f63          	beq	a3,a4,8002b650 <atol+0x5c>
    8002b616:	02b00713          	li	a4,43
    8002b61a:	02e68563          	beq	a3,a4,8002b644 <atol+0x50>
  int sign = 0;
    8002b61e:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8002b620:	ce8d                	beqz	a3,8002b65a <atol+0x66>
  int sign = 0;
    8002b622:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8002b624:	0785                	addi	a5,a5,1
    8002b626:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002b62a:	00251713          	slli	a4,a0,0x2
  while (*str) {
    8002b62e:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8002b632:	972a                	add	a4,a4,a0
    8002b634:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    8002b636:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002b63a:	f6ed                	bnez	a3,8002b624 <atol+0x30>
  }

  return sign ? -res : res;
    8002b63c:	c185                	beqz	a1,8002b65c <atol+0x68>
    8002b63e:	40a00533          	neg	a0,a0
    8002b642:	8082                	ret
  while (*str) {
    8002b644:	0017c683          	lbu	a3,1(a5)
    str++;
    8002b648:	0785                	addi	a5,a5,1
  while (*str) {
    8002b64a:	ca81                	beqz	a3,8002b65a <atol+0x66>
    sign = *str == '-';
    8002b64c:	4581                	li	a1,0
    8002b64e:	bfd1                	j	8002b622 <atol+0x2e>
  while (*str) {
    8002b650:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8002b654:	4585                	li	a1,1
    str++;
    8002b656:	97ae                	add	a5,a5,a1
  while (*str) {
    8002b658:	f6e9                	bnez	a3,8002b622 <atol+0x2e>
  return sign ? -res : res;
    8002b65a:	4501                	li	a0,0
}
    8002b65c:	8082                	ret

000000008002b65e <_init>:

void _init(){

    8002b65e:	8082                	ret

000000008002b660 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8002b660:	f0810113          	addi	sp,sp,-248
    8002b664:	e006                	sd	ra,0(sp)
    8002b666:	e80e                	sd	gp,16(sp)
    8002b668:	ec12                	sd	tp,24(sp)
    8002b66a:	f016                	sd	t0,32(sp)
    8002b66c:	f41a                	sd	t1,40(sp)
    8002b66e:	f81e                	sd	t2,48(sp)
    8002b670:	fc22                	sd	s0,56(sp)
    8002b672:	e0a6                	sd	s1,64(sp)
    8002b674:	e4aa                	sd	a0,72(sp)
    8002b676:	e8ae                	sd	a1,80(sp)
    8002b678:	ecb2                	sd	a2,88(sp)
    8002b67a:	f0b6                	sd	a3,96(sp)
    8002b67c:	f4ba                	sd	a4,104(sp)
    8002b67e:	f8be                	sd	a5,112(sp)
    8002b680:	fcc2                	sd	a6,120(sp)
    8002b682:	e146                	sd	a7,128(sp)
    8002b684:	e54a                	sd	s2,136(sp)
    8002b686:	e94e                	sd	s3,144(sp)
    8002b688:	ed52                	sd	s4,152(sp)
    8002b68a:	f156                	sd	s5,160(sp)
    8002b68c:	f55a                	sd	s6,168(sp)
    8002b68e:	f95e                	sd	s7,176(sp)
    8002b690:	fd62                	sd	s8,184(sp)
    8002b692:	e1e6                	sd	s9,192(sp)
    8002b694:	e5ea                	sd	s10,200(sp)
    8002b696:	e9ee                	sd	s11,208(sp)
    8002b698:	edf2                	sd	t3,216(sp)
    8002b69a:	f1f6                	sd	t4,224(sp)
    8002b69c:	f5fa                	sd	t5,232(sp)
    8002b69e:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8002b6a0:	9f1d50ef          	jal	80001090 <mhandler>
    j _return
    8002b6a4:	a849                	j	8002b736 <_return>
    8002b6a6:	0001                	nop

000000008002b6a8 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002b6a8:	f0810113          	addi	sp,sp,-248
    8002b6ac:	e006                	sd	ra,0(sp)
    8002b6ae:	e80e                	sd	gp,16(sp)
    8002b6b0:	ec12                	sd	tp,24(sp)
    8002b6b2:	f016                	sd	t0,32(sp)
    8002b6b4:	f41a                	sd	t1,40(sp)
    8002b6b6:	f81e                	sd	t2,48(sp)
    8002b6b8:	fc22                	sd	s0,56(sp)
    8002b6ba:	e0a6                	sd	s1,64(sp)
    8002b6bc:	e4aa                	sd	a0,72(sp)
    8002b6be:	e8ae                	sd	a1,80(sp)
    8002b6c0:	ecb2                	sd	a2,88(sp)
    8002b6c2:	f0b6                	sd	a3,96(sp)
    8002b6c4:	f4ba                	sd	a4,104(sp)
    8002b6c6:	f8be                	sd	a5,112(sp)
    8002b6c8:	fcc2                	sd	a6,120(sp)
    8002b6ca:	e146                	sd	a7,128(sp)
    8002b6cc:	e54a                	sd	s2,136(sp)
    8002b6ce:	e94e                	sd	s3,144(sp)
    8002b6d0:	ed52                	sd	s4,152(sp)
    8002b6d2:	f156                	sd	s5,160(sp)
    8002b6d4:	f55a                	sd	s6,168(sp)
    8002b6d6:	f95e                	sd	s7,176(sp)
    8002b6d8:	fd62                	sd	s8,184(sp)
    8002b6da:	e1e6                	sd	s9,192(sp)
    8002b6dc:	e5ea                	sd	s10,200(sp)
    8002b6de:	e9ee                	sd	s11,208(sp)
    8002b6e0:	edf2                	sd	t3,216(sp)
    8002b6e2:	f1f6                	sd	t4,224(sp)
    8002b6e4:	f5fa                	sd	t5,232(sp)
    8002b6e6:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8002b6e8:	bdbd50ef          	jal	800012c2 <hshandler>
    j _return
    8002b6ec:	a0a9                	j	8002b736 <_return>
    8002b6ee:	0001                	nop

000000008002b6f0 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8002b6f0:	f0810113          	addi	sp,sp,-248
    8002b6f4:	e006                	sd	ra,0(sp)
    8002b6f6:	e80e                	sd	gp,16(sp)
    8002b6f8:	ec12                	sd	tp,24(sp)
    8002b6fa:	f016                	sd	t0,32(sp)
    8002b6fc:	f41a                	sd	t1,40(sp)
    8002b6fe:	f81e                	sd	t2,48(sp)
    8002b700:	fc22                	sd	s0,56(sp)
    8002b702:	e0a6                	sd	s1,64(sp)
    8002b704:	e4aa                	sd	a0,72(sp)
    8002b706:	e8ae                	sd	a1,80(sp)
    8002b708:	ecb2                	sd	a2,88(sp)
    8002b70a:	f0b6                	sd	a3,96(sp)
    8002b70c:	f4ba                	sd	a4,104(sp)
    8002b70e:	f8be                	sd	a5,112(sp)
    8002b710:	fcc2                	sd	a6,120(sp)
    8002b712:	e146                	sd	a7,128(sp)
    8002b714:	e54a                	sd	s2,136(sp)
    8002b716:	e94e                	sd	s3,144(sp)
    8002b718:	ed52                	sd	s4,152(sp)
    8002b71a:	f156                	sd	s5,160(sp)
    8002b71c:	f55a                	sd	s6,168(sp)
    8002b71e:	f95e                	sd	s7,176(sp)
    8002b720:	fd62                	sd	s8,184(sp)
    8002b722:	e1e6                	sd	s9,192(sp)
    8002b724:	e5ea                	sd	s10,200(sp)
    8002b726:	e9ee                	sd	s11,208(sp)
    8002b728:	edf2                	sd	t3,216(sp)
    8002b72a:	f1f6                	sd	t4,224(sp)
    8002b72c:	f5fa                	sd	t5,232(sp)
    8002b72e:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8002b730:	dc5d50ef          	jal	800014f4 <vshandler>
    j _return
    8002b734:	a009                	j	8002b736 <_return>

000000008002b736 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002b736:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002b738:	04550563          	beq	a0,t0,8002b782 <_return_from_m>

000000008002b73c <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002b73c:	6082                	ld	ra,0(sp)
    8002b73e:	61c2                	ld	gp,16(sp)
    8002b740:	6262                	ld	tp,24(sp)
    8002b742:	7282                	ld	t0,32(sp)
    8002b744:	7322                	ld	t1,40(sp)
    8002b746:	73c2                	ld	t2,48(sp)
    8002b748:	7462                	ld	s0,56(sp)
    8002b74a:	6486                	ld	s1,64(sp)
    8002b74c:	6526                	ld	a0,72(sp)
    8002b74e:	65c6                	ld	a1,80(sp)
    8002b750:	6666                	ld	a2,88(sp)
    8002b752:	7686                	ld	a3,96(sp)
    8002b754:	7726                	ld	a4,104(sp)
    8002b756:	77c6                	ld	a5,112(sp)
    8002b758:	7866                	ld	a6,120(sp)
    8002b75a:	688a                	ld	a7,128(sp)
    8002b75c:	692a                	ld	s2,136(sp)
    8002b75e:	69ca                	ld	s3,144(sp)
    8002b760:	6a6a                	ld	s4,152(sp)
    8002b762:	7a8a                	ld	s5,160(sp)
    8002b764:	7b2a                	ld	s6,168(sp)
    8002b766:	7bca                	ld	s7,176(sp)
    8002b768:	7c6a                	ld	s8,184(sp)
    8002b76a:	6c8e                	ld	s9,192(sp)
    8002b76c:	6d2e                	ld	s10,200(sp)
    8002b76e:	6dce                	ld	s11,208(sp)
    8002b770:	6e6e                	ld	t3,216(sp)
    8002b772:	7e8e                	ld	t4,224(sp)
    8002b774:	7f2e                	ld	t5,232(sp)
    8002b776:	7fce                	ld	t6,240(sp)
    8002b778:	0f810113          	addi	sp,sp,248
    sret
    8002b77c:	10200073          	sret
    j   .
    8002b780:	a001                	j	8002b780 <_return_from_s+0x44>

000000008002b782 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002b782:	6082                	ld	ra,0(sp)
    8002b784:	61c2                	ld	gp,16(sp)
    8002b786:	6262                	ld	tp,24(sp)
    8002b788:	7282                	ld	t0,32(sp)
    8002b78a:	7322                	ld	t1,40(sp)
    8002b78c:	73c2                	ld	t2,48(sp)
    8002b78e:	7462                	ld	s0,56(sp)
    8002b790:	6486                	ld	s1,64(sp)
    8002b792:	6526                	ld	a0,72(sp)
    8002b794:	65c6                	ld	a1,80(sp)
    8002b796:	6666                	ld	a2,88(sp)
    8002b798:	7686                	ld	a3,96(sp)
    8002b79a:	7726                	ld	a4,104(sp)
    8002b79c:	77c6                	ld	a5,112(sp)
    8002b79e:	7866                	ld	a6,120(sp)
    8002b7a0:	688a                	ld	a7,128(sp)
    8002b7a2:	692a                	ld	s2,136(sp)
    8002b7a4:	69ca                	ld	s3,144(sp)
    8002b7a6:	6a6a                	ld	s4,152(sp)
    8002b7a8:	7a8a                	ld	s5,160(sp)
    8002b7aa:	7b2a                	ld	s6,168(sp)
    8002b7ac:	7bca                	ld	s7,176(sp)
    8002b7ae:	7c6a                	ld	s8,184(sp)
    8002b7b0:	6c8e                	ld	s9,192(sp)
    8002b7b2:	6d2e                	ld	s10,200(sp)
    8002b7b4:	6dce                	ld	s11,208(sp)
    8002b7b6:	6e6e                	ld	t3,216(sp)
    8002b7b8:	7e8e                	ld	t4,224(sp)
    8002b7ba:	7f2e                	ld	t5,232(sp)
    8002b7bc:	7fce                	ld	t6,240(sp)
    8002b7be:	0f810113          	addi	sp,sp,248
    mret
    8002b7c2:	30200073          	mret
	...

000000008002b7c8 <m_test_entry>:

.balign 0x4
.global m_test_entry
m_test_entry:
    .balign 4
    j mhandler_0
    8002b7c8:	a809                	j	8002b7da <mhandler_0>
    j mhandler_1
    8002b7ca:	a899                	j	8002b820 <mhandler_1>
    j mhandler_2
    8002b7cc:	a869                	j	8002b866 <mhandler_2>
    j mhandler_3
    8002b7ce:	a8f9                	j	8002b8ac <mhandler_3>
    j mhandler_4
    8002b7d0:	a20d                	j	8002b8f2 <mhandler_4>
    j mhandler_5
    8002b7d2:	a29d                	j	8002b938 <mhandler_5>
    j mhandler_6
    8002b7d4:	a26d                	j	8002b97e <mhandler_6>
    j mhandler_7
    8002b7d6:	a2fd                	j	8002b9c4 <mhandler_7>
    j mhandler_8
    8002b7d8:	ac0d                	j	8002ba0a <mhandler_8>

000000008002b7da <mhandler_0>:

mhandler_0:
    SAVE_CONTEXT
    8002b7da:	f0810113          	addi	sp,sp,-248
    8002b7de:	e006                	sd	ra,0(sp)
    8002b7e0:	e80e                	sd	gp,16(sp)
    8002b7e2:	ec12                	sd	tp,24(sp)
    8002b7e4:	f016                	sd	t0,32(sp)
    8002b7e6:	f41a                	sd	t1,40(sp)
    8002b7e8:	f81e                	sd	t2,48(sp)
    8002b7ea:	fc22                	sd	s0,56(sp)
    8002b7ec:	e0a6                	sd	s1,64(sp)
    8002b7ee:	e4aa                	sd	a0,72(sp)
    8002b7f0:	e8ae                	sd	a1,80(sp)
    8002b7f2:	ecb2                	sd	a2,88(sp)
    8002b7f4:	f0b6                	sd	a3,96(sp)
    8002b7f6:	f4ba                	sd	a4,104(sp)
    8002b7f8:	f8be                	sd	a5,112(sp)
    8002b7fa:	fcc2                	sd	a6,120(sp)
    8002b7fc:	e146                	sd	a7,128(sp)
    8002b7fe:	e54a                	sd	s2,136(sp)
    8002b800:	e94e                	sd	s3,144(sp)
    8002b802:	ed52                	sd	s4,152(sp)
    8002b804:	f156                	sd	s5,160(sp)
    8002b806:	f55a                	sd	s6,168(sp)
    8002b808:	f95e                	sd	s7,176(sp)
    8002b80a:	fd62                	sd	s8,184(sp)
    8002b80c:	e1e6                	sd	s9,192(sp)
    8002b80e:	e5ea                	sd	s10,200(sp)
    8002b810:	e9ee                	sd	s11,208(sp)
    8002b812:	edf2                	sd	t3,216(sp)
    8002b814:	f1f6                	sd	t4,224(sp)
    8002b816:	f5fa                	sd	t5,232(sp)
    8002b818:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_0
    8002b81a:	ea2fe0ef          	jal	80029ebc <m_test_entry_two_0>
    j _return
    8002b81e:	a789                	j	8002bf60 <_return>

000000008002b820 <mhandler_1>:

mhandler_1:
    SAVE_CONTEXT
    8002b820:	f0810113          	addi	sp,sp,-248
    8002b824:	e006                	sd	ra,0(sp)
    8002b826:	e80e                	sd	gp,16(sp)
    8002b828:	ec12                	sd	tp,24(sp)
    8002b82a:	f016                	sd	t0,32(sp)
    8002b82c:	f41a                	sd	t1,40(sp)
    8002b82e:	f81e                	sd	t2,48(sp)
    8002b830:	fc22                	sd	s0,56(sp)
    8002b832:	e0a6                	sd	s1,64(sp)
    8002b834:	e4aa                	sd	a0,72(sp)
    8002b836:	e8ae                	sd	a1,80(sp)
    8002b838:	ecb2                	sd	a2,88(sp)
    8002b83a:	f0b6                	sd	a3,96(sp)
    8002b83c:	f4ba                	sd	a4,104(sp)
    8002b83e:	f8be                	sd	a5,112(sp)
    8002b840:	fcc2                	sd	a6,120(sp)
    8002b842:	e146                	sd	a7,128(sp)
    8002b844:	e54a                	sd	s2,136(sp)
    8002b846:	e94e                	sd	s3,144(sp)
    8002b848:	ed52                	sd	s4,152(sp)
    8002b84a:	f156                	sd	s5,160(sp)
    8002b84c:	f55a                	sd	s6,168(sp)
    8002b84e:	f95e                	sd	s7,176(sp)
    8002b850:	fd62                	sd	s8,184(sp)
    8002b852:	e1e6                	sd	s9,192(sp)
    8002b854:	e5ea                	sd	s10,200(sp)
    8002b856:	e9ee                	sd	s11,208(sp)
    8002b858:	edf2                	sd	t3,216(sp)
    8002b85a:	f1f6                	sd	t4,224(sp)
    8002b85c:	f5fa                	sd	t5,232(sp)
    8002b85e:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_1
    8002b860:	accfe0ef          	jal	80029b2c <m_test_entry_two_1>
    j _return
    8002b864:	adf5                	j	8002bf60 <_return>

000000008002b866 <mhandler_2>:

mhandler_2:
    SAVE_CONTEXT
    8002b866:	f0810113          	addi	sp,sp,-248
    8002b86a:	e006                	sd	ra,0(sp)
    8002b86c:	e80e                	sd	gp,16(sp)
    8002b86e:	ec12                	sd	tp,24(sp)
    8002b870:	f016                	sd	t0,32(sp)
    8002b872:	f41a                	sd	t1,40(sp)
    8002b874:	f81e                	sd	t2,48(sp)
    8002b876:	fc22                	sd	s0,56(sp)
    8002b878:	e0a6                	sd	s1,64(sp)
    8002b87a:	e4aa                	sd	a0,72(sp)
    8002b87c:	e8ae                	sd	a1,80(sp)
    8002b87e:	ecb2                	sd	a2,88(sp)
    8002b880:	f0b6                	sd	a3,96(sp)
    8002b882:	f4ba                	sd	a4,104(sp)
    8002b884:	f8be                	sd	a5,112(sp)
    8002b886:	fcc2                	sd	a6,120(sp)
    8002b888:	e146                	sd	a7,128(sp)
    8002b88a:	e54a                	sd	s2,136(sp)
    8002b88c:	e94e                	sd	s3,144(sp)
    8002b88e:	ed52                	sd	s4,152(sp)
    8002b890:	f156                	sd	s5,160(sp)
    8002b892:	f55a                	sd	s6,168(sp)
    8002b894:	f95e                	sd	s7,176(sp)
    8002b896:	fd62                	sd	s8,184(sp)
    8002b898:	e1e6                	sd	s9,192(sp)
    8002b89a:	e5ea                	sd	s10,200(sp)
    8002b89c:	e9ee                	sd	s11,208(sp)
    8002b89e:	edf2                	sd	t3,216(sp)
    8002b8a0:	f1f6                	sd	t4,224(sp)
    8002b8a2:	f5fa                	sd	t5,232(sp)
    8002b8a4:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_2
    8002b8a6:	aacfe0ef          	jal	80029b52 <m_test_entry_two_2>
    j _return
    8002b8aa:	ad5d                	j	8002bf60 <_return>

000000008002b8ac <mhandler_3>:

mhandler_3:
    SAVE_CONTEXT
    8002b8ac:	f0810113          	addi	sp,sp,-248
    8002b8b0:	e006                	sd	ra,0(sp)
    8002b8b2:	e80e                	sd	gp,16(sp)
    8002b8b4:	ec12                	sd	tp,24(sp)
    8002b8b6:	f016                	sd	t0,32(sp)
    8002b8b8:	f41a                	sd	t1,40(sp)
    8002b8ba:	f81e                	sd	t2,48(sp)
    8002b8bc:	fc22                	sd	s0,56(sp)
    8002b8be:	e0a6                	sd	s1,64(sp)
    8002b8c0:	e4aa                	sd	a0,72(sp)
    8002b8c2:	e8ae                	sd	a1,80(sp)
    8002b8c4:	ecb2                	sd	a2,88(sp)
    8002b8c6:	f0b6                	sd	a3,96(sp)
    8002b8c8:	f4ba                	sd	a4,104(sp)
    8002b8ca:	f8be                	sd	a5,112(sp)
    8002b8cc:	fcc2                	sd	a6,120(sp)
    8002b8ce:	e146                	sd	a7,128(sp)
    8002b8d0:	e54a                	sd	s2,136(sp)
    8002b8d2:	e94e                	sd	s3,144(sp)
    8002b8d4:	ed52                	sd	s4,152(sp)
    8002b8d6:	f156                	sd	s5,160(sp)
    8002b8d8:	f55a                	sd	s6,168(sp)
    8002b8da:	f95e                	sd	s7,176(sp)
    8002b8dc:	fd62                	sd	s8,184(sp)
    8002b8de:	e1e6                	sd	s9,192(sp)
    8002b8e0:	e5ea                	sd	s10,200(sp)
    8002b8e2:	e9ee                	sd	s11,208(sp)
    8002b8e4:	edf2                	sd	t3,216(sp)
    8002b8e6:	f1f6                	sd	t4,224(sp)
    8002b8e8:	f5fa                	sd	t5,232(sp)
    8002b8ea:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_3
    8002b8ec:	a8cfe0ef          	jal	80029b78 <m_test_entry_two_3>
    j _return
    8002b8f0:	ad85                	j	8002bf60 <_return>

000000008002b8f2 <mhandler_4>:

mhandler_4:
    SAVE_CONTEXT
    8002b8f2:	f0810113          	addi	sp,sp,-248
    8002b8f6:	e006                	sd	ra,0(sp)
    8002b8f8:	e80e                	sd	gp,16(sp)
    8002b8fa:	ec12                	sd	tp,24(sp)
    8002b8fc:	f016                	sd	t0,32(sp)
    8002b8fe:	f41a                	sd	t1,40(sp)
    8002b900:	f81e                	sd	t2,48(sp)
    8002b902:	fc22                	sd	s0,56(sp)
    8002b904:	e0a6                	sd	s1,64(sp)
    8002b906:	e4aa                	sd	a0,72(sp)
    8002b908:	e8ae                	sd	a1,80(sp)
    8002b90a:	ecb2                	sd	a2,88(sp)
    8002b90c:	f0b6                	sd	a3,96(sp)
    8002b90e:	f4ba                	sd	a4,104(sp)
    8002b910:	f8be                	sd	a5,112(sp)
    8002b912:	fcc2                	sd	a6,120(sp)
    8002b914:	e146                	sd	a7,128(sp)
    8002b916:	e54a                	sd	s2,136(sp)
    8002b918:	e94e                	sd	s3,144(sp)
    8002b91a:	ed52                	sd	s4,152(sp)
    8002b91c:	f156                	sd	s5,160(sp)
    8002b91e:	f55a                	sd	s6,168(sp)
    8002b920:	f95e                	sd	s7,176(sp)
    8002b922:	fd62                	sd	s8,184(sp)
    8002b924:	e1e6                	sd	s9,192(sp)
    8002b926:	e5ea                	sd	s10,200(sp)
    8002b928:	e9ee                	sd	s11,208(sp)
    8002b92a:	edf2                	sd	t3,216(sp)
    8002b92c:	f1f6                	sd	t4,224(sp)
    8002b92e:	f5fa                	sd	t5,232(sp)
    8002b930:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_4
    8002b932:	a6cfe0ef          	jal	80029b9e <m_test_entry_two_4>
    j _return
    8002b936:	a52d                	j	8002bf60 <_return>

000000008002b938 <mhandler_5>:

mhandler_5:
    SAVE_CONTEXT
    8002b938:	f0810113          	addi	sp,sp,-248
    8002b93c:	e006                	sd	ra,0(sp)
    8002b93e:	e80e                	sd	gp,16(sp)
    8002b940:	ec12                	sd	tp,24(sp)
    8002b942:	f016                	sd	t0,32(sp)
    8002b944:	f41a                	sd	t1,40(sp)
    8002b946:	f81e                	sd	t2,48(sp)
    8002b948:	fc22                	sd	s0,56(sp)
    8002b94a:	e0a6                	sd	s1,64(sp)
    8002b94c:	e4aa                	sd	a0,72(sp)
    8002b94e:	e8ae                	sd	a1,80(sp)
    8002b950:	ecb2                	sd	a2,88(sp)
    8002b952:	f0b6                	sd	a3,96(sp)
    8002b954:	f4ba                	sd	a4,104(sp)
    8002b956:	f8be                	sd	a5,112(sp)
    8002b958:	fcc2                	sd	a6,120(sp)
    8002b95a:	e146                	sd	a7,128(sp)
    8002b95c:	e54a                	sd	s2,136(sp)
    8002b95e:	e94e                	sd	s3,144(sp)
    8002b960:	ed52                	sd	s4,152(sp)
    8002b962:	f156                	sd	s5,160(sp)
    8002b964:	f55a                	sd	s6,168(sp)
    8002b966:	f95e                	sd	s7,176(sp)
    8002b968:	fd62                	sd	s8,184(sp)
    8002b96a:	e1e6                	sd	s9,192(sp)
    8002b96c:	e5ea                	sd	s10,200(sp)
    8002b96e:	e9ee                	sd	s11,208(sp)
    8002b970:	edf2                	sd	t3,216(sp)
    8002b972:	f1f6                	sd	t4,224(sp)
    8002b974:	f5fa                	sd	t5,232(sp)
    8002b976:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_5
    8002b978:	a4cfe0ef          	jal	80029bc4 <m_test_entry_two_5>
    j _return
    8002b97c:	a3d5                	j	8002bf60 <_return>

000000008002b97e <mhandler_6>:

mhandler_6:
    SAVE_CONTEXT
    8002b97e:	f0810113          	addi	sp,sp,-248
    8002b982:	e006                	sd	ra,0(sp)
    8002b984:	e80e                	sd	gp,16(sp)
    8002b986:	ec12                	sd	tp,24(sp)
    8002b988:	f016                	sd	t0,32(sp)
    8002b98a:	f41a                	sd	t1,40(sp)
    8002b98c:	f81e                	sd	t2,48(sp)
    8002b98e:	fc22                	sd	s0,56(sp)
    8002b990:	e0a6                	sd	s1,64(sp)
    8002b992:	e4aa                	sd	a0,72(sp)
    8002b994:	e8ae                	sd	a1,80(sp)
    8002b996:	ecb2                	sd	a2,88(sp)
    8002b998:	f0b6                	sd	a3,96(sp)
    8002b99a:	f4ba                	sd	a4,104(sp)
    8002b99c:	f8be                	sd	a5,112(sp)
    8002b99e:	fcc2                	sd	a6,120(sp)
    8002b9a0:	e146                	sd	a7,128(sp)
    8002b9a2:	e54a                	sd	s2,136(sp)
    8002b9a4:	e94e                	sd	s3,144(sp)
    8002b9a6:	ed52                	sd	s4,152(sp)
    8002b9a8:	f156                	sd	s5,160(sp)
    8002b9aa:	f55a                	sd	s6,168(sp)
    8002b9ac:	f95e                	sd	s7,176(sp)
    8002b9ae:	fd62                	sd	s8,184(sp)
    8002b9b0:	e1e6                	sd	s9,192(sp)
    8002b9b2:	e5ea                	sd	s10,200(sp)
    8002b9b4:	e9ee                	sd	s11,208(sp)
    8002b9b6:	edf2                	sd	t3,216(sp)
    8002b9b8:	f1f6                	sd	t4,224(sp)
    8002b9ba:	f5fa                	sd	t5,232(sp)
    8002b9bc:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_6
    8002b9be:	a2cfe0ef          	jal	80029bea <m_test_entry_two_6>
    j _return
    8002b9c2:	ab79                	j	8002bf60 <_return>

000000008002b9c4 <mhandler_7>:

mhandler_7:
    SAVE_CONTEXT
    8002b9c4:	f0810113          	addi	sp,sp,-248
    8002b9c8:	e006                	sd	ra,0(sp)
    8002b9ca:	e80e                	sd	gp,16(sp)
    8002b9cc:	ec12                	sd	tp,24(sp)
    8002b9ce:	f016                	sd	t0,32(sp)
    8002b9d0:	f41a                	sd	t1,40(sp)
    8002b9d2:	f81e                	sd	t2,48(sp)
    8002b9d4:	fc22                	sd	s0,56(sp)
    8002b9d6:	e0a6                	sd	s1,64(sp)
    8002b9d8:	e4aa                	sd	a0,72(sp)
    8002b9da:	e8ae                	sd	a1,80(sp)
    8002b9dc:	ecb2                	sd	a2,88(sp)
    8002b9de:	f0b6                	sd	a3,96(sp)
    8002b9e0:	f4ba                	sd	a4,104(sp)
    8002b9e2:	f8be                	sd	a5,112(sp)
    8002b9e4:	fcc2                	sd	a6,120(sp)
    8002b9e6:	e146                	sd	a7,128(sp)
    8002b9e8:	e54a                	sd	s2,136(sp)
    8002b9ea:	e94e                	sd	s3,144(sp)
    8002b9ec:	ed52                	sd	s4,152(sp)
    8002b9ee:	f156                	sd	s5,160(sp)
    8002b9f0:	f55a                	sd	s6,168(sp)
    8002b9f2:	f95e                	sd	s7,176(sp)
    8002b9f4:	fd62                	sd	s8,184(sp)
    8002b9f6:	e1e6                	sd	s9,192(sp)
    8002b9f8:	e5ea                	sd	s10,200(sp)
    8002b9fa:	e9ee                	sd	s11,208(sp)
    8002b9fc:	edf2                	sd	t3,216(sp)
    8002b9fe:	f1f6                	sd	t4,224(sp)
    8002ba00:	f5fa                	sd	t5,232(sp)
    8002ba02:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_7
    8002ba04:	a0cfe0ef          	jal	80029c10 <m_test_entry_two_7>
    j _return
    8002ba08:	aba1                	j	8002bf60 <_return>

000000008002ba0a <mhandler_8>:
    
mhandler_8:
    SAVE_CONTEXT
    8002ba0a:	f0810113          	addi	sp,sp,-248
    8002ba0e:	e006                	sd	ra,0(sp)
    8002ba10:	e80e                	sd	gp,16(sp)
    8002ba12:	ec12                	sd	tp,24(sp)
    8002ba14:	f016                	sd	t0,32(sp)
    8002ba16:	f41a                	sd	t1,40(sp)
    8002ba18:	f81e                	sd	t2,48(sp)
    8002ba1a:	fc22                	sd	s0,56(sp)
    8002ba1c:	e0a6                	sd	s1,64(sp)
    8002ba1e:	e4aa                	sd	a0,72(sp)
    8002ba20:	e8ae                	sd	a1,80(sp)
    8002ba22:	ecb2                	sd	a2,88(sp)
    8002ba24:	f0b6                	sd	a3,96(sp)
    8002ba26:	f4ba                	sd	a4,104(sp)
    8002ba28:	f8be                	sd	a5,112(sp)
    8002ba2a:	fcc2                	sd	a6,120(sp)
    8002ba2c:	e146                	sd	a7,128(sp)
    8002ba2e:	e54a                	sd	s2,136(sp)
    8002ba30:	e94e                	sd	s3,144(sp)
    8002ba32:	ed52                	sd	s4,152(sp)
    8002ba34:	f156                	sd	s5,160(sp)
    8002ba36:	f55a                	sd	s6,168(sp)
    8002ba38:	f95e                	sd	s7,176(sp)
    8002ba3a:	fd62                	sd	s8,184(sp)
    8002ba3c:	e1e6                	sd	s9,192(sp)
    8002ba3e:	e5ea                	sd	s10,200(sp)
    8002ba40:	e9ee                	sd	s11,208(sp)
    8002ba42:	edf2                	sd	t3,216(sp)
    8002ba44:	f1f6                	sd	t4,224(sp)
    8002ba46:	f5fa                	sd	t5,232(sp)
    8002ba48:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_8
    8002ba4a:	9ecfe0ef          	jal	80029c36 <m_test_entry_two_8>
    j _return
    8002ba4e:	ab09                	j	8002bf60 <_return>

000000008002ba50 <hs_test_entry>:

.balign 0x4
.global hs_test_entry
hs_test_entry:
    .balign 4
    j hshandler_0
    8002ba50:	a809                	j	8002ba62 <hshandler_0>
    j hshandler_1
    8002ba52:	a899                	j	8002baa8 <hshandler_1>
    j hshandler_2
    8002ba54:	a869                	j	8002baee <hshandler_2>
    j hshandler_3
    8002ba56:	a8f9                	j	8002bb34 <hshandler_3>
    j hshandler_4
    8002ba58:	a20d                	j	8002bb7a <hshandler_4>
    j hshandler_5
    8002ba5a:	a29d                	j	8002bbc0 <hshandler_5>
    j hshandler_6
    8002ba5c:	a26d                	j	8002bc06 <hshandler_6>
    j hshandler_7
    8002ba5e:	a2fd                	j	8002bc4c <hshandler_7>
    j hshandler_8
    8002ba60:	ac0d                	j	8002bc92 <hshandler_8>

000000008002ba62 <hshandler_0>:

hshandler_0:
    SAVE_CONTEXT
    8002ba62:	f0810113          	addi	sp,sp,-248
    8002ba66:	e006                	sd	ra,0(sp)
    8002ba68:	e80e                	sd	gp,16(sp)
    8002ba6a:	ec12                	sd	tp,24(sp)
    8002ba6c:	f016                	sd	t0,32(sp)
    8002ba6e:	f41a                	sd	t1,40(sp)
    8002ba70:	f81e                	sd	t2,48(sp)
    8002ba72:	fc22                	sd	s0,56(sp)
    8002ba74:	e0a6                	sd	s1,64(sp)
    8002ba76:	e4aa                	sd	a0,72(sp)
    8002ba78:	e8ae                	sd	a1,80(sp)
    8002ba7a:	ecb2                	sd	a2,88(sp)
    8002ba7c:	f0b6                	sd	a3,96(sp)
    8002ba7e:	f4ba                	sd	a4,104(sp)
    8002ba80:	f8be                	sd	a5,112(sp)
    8002ba82:	fcc2                	sd	a6,120(sp)
    8002ba84:	e146                	sd	a7,128(sp)
    8002ba86:	e54a                	sd	s2,136(sp)
    8002ba88:	e94e                	sd	s3,144(sp)
    8002ba8a:	ed52                	sd	s4,152(sp)
    8002ba8c:	f156                	sd	s5,160(sp)
    8002ba8e:	f55a                	sd	s6,168(sp)
    8002ba90:	f95e                	sd	s7,176(sp)
    8002ba92:	fd62                	sd	s8,184(sp)
    8002ba94:	e1e6                	sd	s9,192(sp)
    8002ba96:	e5ea                	sd	s10,200(sp)
    8002ba98:	e9ee                	sd	s11,208(sp)
    8002ba9a:	edf2                	sd	t3,216(sp)
    8002ba9c:	f1f6                	sd	t4,224(sp)
    8002ba9e:	f5fa                	sd	t5,232(sp)
    8002baa0:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_0
    8002baa2:	c36fe0ef          	jal	80029ed8 <hs_test_entry_two_0>
    j _return
    8002baa6:	a96d                	j	8002bf60 <_return>

000000008002baa8 <hshandler_1>:

hshandler_1:
    SAVE_CONTEXT
    8002baa8:	f0810113          	addi	sp,sp,-248
    8002baac:	e006                	sd	ra,0(sp)
    8002baae:	e80e                	sd	gp,16(sp)
    8002bab0:	ec12                	sd	tp,24(sp)
    8002bab2:	f016                	sd	t0,32(sp)
    8002bab4:	f41a                	sd	t1,40(sp)
    8002bab6:	f81e                	sd	t2,48(sp)
    8002bab8:	fc22                	sd	s0,56(sp)
    8002baba:	e0a6                	sd	s1,64(sp)
    8002babc:	e4aa                	sd	a0,72(sp)
    8002babe:	e8ae                	sd	a1,80(sp)
    8002bac0:	ecb2                	sd	a2,88(sp)
    8002bac2:	f0b6                	sd	a3,96(sp)
    8002bac4:	f4ba                	sd	a4,104(sp)
    8002bac6:	f8be                	sd	a5,112(sp)
    8002bac8:	fcc2                	sd	a6,120(sp)
    8002baca:	e146                	sd	a7,128(sp)
    8002bacc:	e54a                	sd	s2,136(sp)
    8002bace:	e94e                	sd	s3,144(sp)
    8002bad0:	ed52                	sd	s4,152(sp)
    8002bad2:	f156                	sd	s5,160(sp)
    8002bad4:	f55a                	sd	s6,168(sp)
    8002bad6:	f95e                	sd	s7,176(sp)
    8002bad8:	fd62                	sd	s8,184(sp)
    8002bada:	e1e6                	sd	s9,192(sp)
    8002badc:	e5ea                	sd	s10,200(sp)
    8002bade:	e9ee                	sd	s11,208(sp)
    8002bae0:	edf2                	sd	t3,216(sp)
    8002bae2:	f1f6                	sd	t4,224(sp)
    8002bae4:	f5fa                	sd	t5,232(sp)
    8002bae6:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_1
    8002bae8:	974fe0ef          	jal	80029c5c <hs_test_entry_two_1>
    j _return
    8002baec:	a995                	j	8002bf60 <_return>

000000008002baee <hshandler_2>:

hshandler_2:
    SAVE_CONTEXT
    8002baee:	f0810113          	addi	sp,sp,-248
    8002baf2:	e006                	sd	ra,0(sp)
    8002baf4:	e80e                	sd	gp,16(sp)
    8002baf6:	ec12                	sd	tp,24(sp)
    8002baf8:	f016                	sd	t0,32(sp)
    8002bafa:	f41a                	sd	t1,40(sp)
    8002bafc:	f81e                	sd	t2,48(sp)
    8002bafe:	fc22                	sd	s0,56(sp)
    8002bb00:	e0a6                	sd	s1,64(sp)
    8002bb02:	e4aa                	sd	a0,72(sp)
    8002bb04:	e8ae                	sd	a1,80(sp)
    8002bb06:	ecb2                	sd	a2,88(sp)
    8002bb08:	f0b6                	sd	a3,96(sp)
    8002bb0a:	f4ba                	sd	a4,104(sp)
    8002bb0c:	f8be                	sd	a5,112(sp)
    8002bb0e:	fcc2                	sd	a6,120(sp)
    8002bb10:	e146                	sd	a7,128(sp)
    8002bb12:	e54a                	sd	s2,136(sp)
    8002bb14:	e94e                	sd	s3,144(sp)
    8002bb16:	ed52                	sd	s4,152(sp)
    8002bb18:	f156                	sd	s5,160(sp)
    8002bb1a:	f55a                	sd	s6,168(sp)
    8002bb1c:	f95e                	sd	s7,176(sp)
    8002bb1e:	fd62                	sd	s8,184(sp)
    8002bb20:	e1e6                	sd	s9,192(sp)
    8002bb22:	e5ea                	sd	s10,200(sp)
    8002bb24:	e9ee                	sd	s11,208(sp)
    8002bb26:	edf2                	sd	t3,216(sp)
    8002bb28:	f1f6                	sd	t4,224(sp)
    8002bb2a:	f5fa                	sd	t5,232(sp)
    8002bb2c:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_2
    8002bb2e:	954fe0ef          	jal	80029c82 <hs_test_entry_two_2>
    j _return
    8002bb32:	a13d                	j	8002bf60 <_return>

000000008002bb34 <hshandler_3>:

hshandler_3:
    SAVE_CONTEXT
    8002bb34:	f0810113          	addi	sp,sp,-248
    8002bb38:	e006                	sd	ra,0(sp)
    8002bb3a:	e80e                	sd	gp,16(sp)
    8002bb3c:	ec12                	sd	tp,24(sp)
    8002bb3e:	f016                	sd	t0,32(sp)
    8002bb40:	f41a                	sd	t1,40(sp)
    8002bb42:	f81e                	sd	t2,48(sp)
    8002bb44:	fc22                	sd	s0,56(sp)
    8002bb46:	e0a6                	sd	s1,64(sp)
    8002bb48:	e4aa                	sd	a0,72(sp)
    8002bb4a:	e8ae                	sd	a1,80(sp)
    8002bb4c:	ecb2                	sd	a2,88(sp)
    8002bb4e:	f0b6                	sd	a3,96(sp)
    8002bb50:	f4ba                	sd	a4,104(sp)
    8002bb52:	f8be                	sd	a5,112(sp)
    8002bb54:	fcc2                	sd	a6,120(sp)
    8002bb56:	e146                	sd	a7,128(sp)
    8002bb58:	e54a                	sd	s2,136(sp)
    8002bb5a:	e94e                	sd	s3,144(sp)
    8002bb5c:	ed52                	sd	s4,152(sp)
    8002bb5e:	f156                	sd	s5,160(sp)
    8002bb60:	f55a                	sd	s6,168(sp)
    8002bb62:	f95e                	sd	s7,176(sp)
    8002bb64:	fd62                	sd	s8,184(sp)
    8002bb66:	e1e6                	sd	s9,192(sp)
    8002bb68:	e5ea                	sd	s10,200(sp)
    8002bb6a:	e9ee                	sd	s11,208(sp)
    8002bb6c:	edf2                	sd	t3,216(sp)
    8002bb6e:	f1f6                	sd	t4,224(sp)
    8002bb70:	f5fa                	sd	t5,232(sp)
    8002bb72:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_3
    8002bb74:	934fe0ef          	jal	80029ca8 <hs_test_entry_two_3>
    j _return
    8002bb78:	a6e5                	j	8002bf60 <_return>

000000008002bb7a <hshandler_4>:

hshandler_4:
    SAVE_CONTEXT
    8002bb7a:	f0810113          	addi	sp,sp,-248
    8002bb7e:	e006                	sd	ra,0(sp)
    8002bb80:	e80e                	sd	gp,16(sp)
    8002bb82:	ec12                	sd	tp,24(sp)
    8002bb84:	f016                	sd	t0,32(sp)
    8002bb86:	f41a                	sd	t1,40(sp)
    8002bb88:	f81e                	sd	t2,48(sp)
    8002bb8a:	fc22                	sd	s0,56(sp)
    8002bb8c:	e0a6                	sd	s1,64(sp)
    8002bb8e:	e4aa                	sd	a0,72(sp)
    8002bb90:	e8ae                	sd	a1,80(sp)
    8002bb92:	ecb2                	sd	a2,88(sp)
    8002bb94:	f0b6                	sd	a3,96(sp)
    8002bb96:	f4ba                	sd	a4,104(sp)
    8002bb98:	f8be                	sd	a5,112(sp)
    8002bb9a:	fcc2                	sd	a6,120(sp)
    8002bb9c:	e146                	sd	a7,128(sp)
    8002bb9e:	e54a                	sd	s2,136(sp)
    8002bba0:	e94e                	sd	s3,144(sp)
    8002bba2:	ed52                	sd	s4,152(sp)
    8002bba4:	f156                	sd	s5,160(sp)
    8002bba6:	f55a                	sd	s6,168(sp)
    8002bba8:	f95e                	sd	s7,176(sp)
    8002bbaa:	fd62                	sd	s8,184(sp)
    8002bbac:	e1e6                	sd	s9,192(sp)
    8002bbae:	e5ea                	sd	s10,200(sp)
    8002bbb0:	e9ee                	sd	s11,208(sp)
    8002bbb2:	edf2                	sd	t3,216(sp)
    8002bbb4:	f1f6                	sd	t4,224(sp)
    8002bbb6:	f5fa                	sd	t5,232(sp)
    8002bbb8:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_4
    8002bbba:	914fe0ef          	jal	80029cce <hs_test_entry_two_4>
    j _return
    8002bbbe:	a64d                	j	8002bf60 <_return>

000000008002bbc0 <hshandler_5>:

hshandler_5:
    SAVE_CONTEXT
    8002bbc0:	f0810113          	addi	sp,sp,-248
    8002bbc4:	e006                	sd	ra,0(sp)
    8002bbc6:	e80e                	sd	gp,16(sp)
    8002bbc8:	ec12                	sd	tp,24(sp)
    8002bbca:	f016                	sd	t0,32(sp)
    8002bbcc:	f41a                	sd	t1,40(sp)
    8002bbce:	f81e                	sd	t2,48(sp)
    8002bbd0:	fc22                	sd	s0,56(sp)
    8002bbd2:	e0a6                	sd	s1,64(sp)
    8002bbd4:	e4aa                	sd	a0,72(sp)
    8002bbd6:	e8ae                	sd	a1,80(sp)
    8002bbd8:	ecb2                	sd	a2,88(sp)
    8002bbda:	f0b6                	sd	a3,96(sp)
    8002bbdc:	f4ba                	sd	a4,104(sp)
    8002bbde:	f8be                	sd	a5,112(sp)
    8002bbe0:	fcc2                	sd	a6,120(sp)
    8002bbe2:	e146                	sd	a7,128(sp)
    8002bbe4:	e54a                	sd	s2,136(sp)
    8002bbe6:	e94e                	sd	s3,144(sp)
    8002bbe8:	ed52                	sd	s4,152(sp)
    8002bbea:	f156                	sd	s5,160(sp)
    8002bbec:	f55a                	sd	s6,168(sp)
    8002bbee:	f95e                	sd	s7,176(sp)
    8002bbf0:	fd62                	sd	s8,184(sp)
    8002bbf2:	e1e6                	sd	s9,192(sp)
    8002bbf4:	e5ea                	sd	s10,200(sp)
    8002bbf6:	e9ee                	sd	s11,208(sp)
    8002bbf8:	edf2                	sd	t3,216(sp)
    8002bbfa:	f1f6                	sd	t4,224(sp)
    8002bbfc:	f5fa                	sd	t5,232(sp)
    8002bbfe:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_5
    8002bc00:	8f4fe0ef          	jal	80029cf4 <hs_test_entry_two_5>
    j _return
    8002bc04:	aeb1                	j	8002bf60 <_return>

000000008002bc06 <hshandler_6>:

hshandler_6:
    SAVE_CONTEXT
    8002bc06:	f0810113          	addi	sp,sp,-248
    8002bc0a:	e006                	sd	ra,0(sp)
    8002bc0c:	e80e                	sd	gp,16(sp)
    8002bc0e:	ec12                	sd	tp,24(sp)
    8002bc10:	f016                	sd	t0,32(sp)
    8002bc12:	f41a                	sd	t1,40(sp)
    8002bc14:	f81e                	sd	t2,48(sp)
    8002bc16:	fc22                	sd	s0,56(sp)
    8002bc18:	e0a6                	sd	s1,64(sp)
    8002bc1a:	e4aa                	sd	a0,72(sp)
    8002bc1c:	e8ae                	sd	a1,80(sp)
    8002bc1e:	ecb2                	sd	a2,88(sp)
    8002bc20:	f0b6                	sd	a3,96(sp)
    8002bc22:	f4ba                	sd	a4,104(sp)
    8002bc24:	f8be                	sd	a5,112(sp)
    8002bc26:	fcc2                	sd	a6,120(sp)
    8002bc28:	e146                	sd	a7,128(sp)
    8002bc2a:	e54a                	sd	s2,136(sp)
    8002bc2c:	e94e                	sd	s3,144(sp)
    8002bc2e:	ed52                	sd	s4,152(sp)
    8002bc30:	f156                	sd	s5,160(sp)
    8002bc32:	f55a                	sd	s6,168(sp)
    8002bc34:	f95e                	sd	s7,176(sp)
    8002bc36:	fd62                	sd	s8,184(sp)
    8002bc38:	e1e6                	sd	s9,192(sp)
    8002bc3a:	e5ea                	sd	s10,200(sp)
    8002bc3c:	e9ee                	sd	s11,208(sp)
    8002bc3e:	edf2                	sd	t3,216(sp)
    8002bc40:	f1f6                	sd	t4,224(sp)
    8002bc42:	f5fa                	sd	t5,232(sp)
    8002bc44:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_6
    8002bc46:	8d4fe0ef          	jal	80029d1a <hs_test_entry_two_6>
    j _return
    8002bc4a:	ae19                	j	8002bf60 <_return>

000000008002bc4c <hshandler_7>:

hshandler_7:
    SAVE_CONTEXT
    8002bc4c:	f0810113          	addi	sp,sp,-248
    8002bc50:	e006                	sd	ra,0(sp)
    8002bc52:	e80e                	sd	gp,16(sp)
    8002bc54:	ec12                	sd	tp,24(sp)
    8002bc56:	f016                	sd	t0,32(sp)
    8002bc58:	f41a                	sd	t1,40(sp)
    8002bc5a:	f81e                	sd	t2,48(sp)
    8002bc5c:	fc22                	sd	s0,56(sp)
    8002bc5e:	e0a6                	sd	s1,64(sp)
    8002bc60:	e4aa                	sd	a0,72(sp)
    8002bc62:	e8ae                	sd	a1,80(sp)
    8002bc64:	ecb2                	sd	a2,88(sp)
    8002bc66:	f0b6                	sd	a3,96(sp)
    8002bc68:	f4ba                	sd	a4,104(sp)
    8002bc6a:	f8be                	sd	a5,112(sp)
    8002bc6c:	fcc2                	sd	a6,120(sp)
    8002bc6e:	e146                	sd	a7,128(sp)
    8002bc70:	e54a                	sd	s2,136(sp)
    8002bc72:	e94e                	sd	s3,144(sp)
    8002bc74:	ed52                	sd	s4,152(sp)
    8002bc76:	f156                	sd	s5,160(sp)
    8002bc78:	f55a                	sd	s6,168(sp)
    8002bc7a:	f95e                	sd	s7,176(sp)
    8002bc7c:	fd62                	sd	s8,184(sp)
    8002bc7e:	e1e6                	sd	s9,192(sp)
    8002bc80:	e5ea                	sd	s10,200(sp)
    8002bc82:	e9ee                	sd	s11,208(sp)
    8002bc84:	edf2                	sd	t3,216(sp)
    8002bc86:	f1f6                	sd	t4,224(sp)
    8002bc88:	f5fa                	sd	t5,232(sp)
    8002bc8a:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_7
    8002bc8c:	8b4fe0ef          	jal	80029d40 <hs_test_entry_two_7>
    j _return
    8002bc90:	acc1                	j	8002bf60 <_return>

000000008002bc92 <hshandler_8>:
    
hshandler_8:
    SAVE_CONTEXT
    8002bc92:	f0810113          	addi	sp,sp,-248
    8002bc96:	e006                	sd	ra,0(sp)
    8002bc98:	e80e                	sd	gp,16(sp)
    8002bc9a:	ec12                	sd	tp,24(sp)
    8002bc9c:	f016                	sd	t0,32(sp)
    8002bc9e:	f41a                	sd	t1,40(sp)
    8002bca0:	f81e                	sd	t2,48(sp)
    8002bca2:	fc22                	sd	s0,56(sp)
    8002bca4:	e0a6                	sd	s1,64(sp)
    8002bca6:	e4aa                	sd	a0,72(sp)
    8002bca8:	e8ae                	sd	a1,80(sp)
    8002bcaa:	ecb2                	sd	a2,88(sp)
    8002bcac:	f0b6                	sd	a3,96(sp)
    8002bcae:	f4ba                	sd	a4,104(sp)
    8002bcb0:	f8be                	sd	a5,112(sp)
    8002bcb2:	fcc2                	sd	a6,120(sp)
    8002bcb4:	e146                	sd	a7,128(sp)
    8002bcb6:	e54a                	sd	s2,136(sp)
    8002bcb8:	e94e                	sd	s3,144(sp)
    8002bcba:	ed52                	sd	s4,152(sp)
    8002bcbc:	f156                	sd	s5,160(sp)
    8002bcbe:	f55a                	sd	s6,168(sp)
    8002bcc0:	f95e                	sd	s7,176(sp)
    8002bcc2:	fd62                	sd	s8,184(sp)
    8002bcc4:	e1e6                	sd	s9,192(sp)
    8002bcc6:	e5ea                	sd	s10,200(sp)
    8002bcc8:	e9ee                	sd	s11,208(sp)
    8002bcca:	edf2                	sd	t3,216(sp)
    8002bccc:	f1f6                	sd	t4,224(sp)
    8002bcce:	f5fa                	sd	t5,232(sp)
    8002bcd0:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_8
    8002bcd2:	894fe0ef          	jal	80029d66 <hs_test_entry_two_8>
    j _return
    8002bcd6:	a469                	j	8002bf60 <_return>

000000008002bcd8 <vs_test_entry>:

.balign 0x4
.global vs_test_entry
vs_test_entry:
    .balign 4
    j vshandler_0
    8002bcd8:	a809                	j	8002bcea <vshandler_0>
    j vshandler_1
    8002bcda:	a899                	j	8002bd30 <vshandler_1>
    j vshandler_2
    8002bcdc:	a869                	j	8002bd76 <vshandler_2>
    j vshandler_3
    8002bcde:	a8f9                	j	8002bdbc <vshandler_3>
    j vshandler_4
    8002bce0:	a20d                	j	8002be02 <vshandler_4>
    j vshandler_5
    8002bce2:	a29d                	j	8002be48 <vshandler_5>
    j vshandler_6
    8002bce4:	a26d                	j	8002be8e <vshandler_6>
    j vshandler_7
    8002bce6:	a2fd                	j	8002bed4 <vshandler_7>
    j vshandler_8
    8002bce8:	ac0d                	j	8002bf1a <vshandler_8>

000000008002bcea <vshandler_0>:

vshandler_0:
    SAVE_CONTEXT
    8002bcea:	f0810113          	addi	sp,sp,-248
    8002bcee:	e006                	sd	ra,0(sp)
    8002bcf0:	e80e                	sd	gp,16(sp)
    8002bcf2:	ec12                	sd	tp,24(sp)
    8002bcf4:	f016                	sd	t0,32(sp)
    8002bcf6:	f41a                	sd	t1,40(sp)
    8002bcf8:	f81e                	sd	t2,48(sp)
    8002bcfa:	fc22                	sd	s0,56(sp)
    8002bcfc:	e0a6                	sd	s1,64(sp)
    8002bcfe:	e4aa                	sd	a0,72(sp)
    8002bd00:	e8ae                	sd	a1,80(sp)
    8002bd02:	ecb2                	sd	a2,88(sp)
    8002bd04:	f0b6                	sd	a3,96(sp)
    8002bd06:	f4ba                	sd	a4,104(sp)
    8002bd08:	f8be                	sd	a5,112(sp)
    8002bd0a:	fcc2                	sd	a6,120(sp)
    8002bd0c:	e146                	sd	a7,128(sp)
    8002bd0e:	e54a                	sd	s2,136(sp)
    8002bd10:	e94e                	sd	s3,144(sp)
    8002bd12:	ed52                	sd	s4,152(sp)
    8002bd14:	f156                	sd	s5,160(sp)
    8002bd16:	f55a                	sd	s6,168(sp)
    8002bd18:	f95e                	sd	s7,176(sp)
    8002bd1a:	fd62                	sd	s8,184(sp)
    8002bd1c:	e1e6                	sd	s9,192(sp)
    8002bd1e:	e5ea                	sd	s10,200(sp)
    8002bd20:	e9ee                	sd	s11,208(sp)
    8002bd22:	edf2                	sd	t3,216(sp)
    8002bd24:	f1f6                	sd	t4,224(sp)
    8002bd26:	f5fa                	sd	t5,232(sp)
    8002bd28:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_0
    8002bd2a:	9cafe0ef          	jal	80029ef4 <vs_test_entry_two_0>
    j _return
    8002bd2e:	ac0d                	j	8002bf60 <_return>

000000008002bd30 <vshandler_1>:

vshandler_1:
    SAVE_CONTEXT
    8002bd30:	f0810113          	addi	sp,sp,-248
    8002bd34:	e006                	sd	ra,0(sp)
    8002bd36:	e80e                	sd	gp,16(sp)
    8002bd38:	ec12                	sd	tp,24(sp)
    8002bd3a:	f016                	sd	t0,32(sp)
    8002bd3c:	f41a                	sd	t1,40(sp)
    8002bd3e:	f81e                	sd	t2,48(sp)
    8002bd40:	fc22                	sd	s0,56(sp)
    8002bd42:	e0a6                	sd	s1,64(sp)
    8002bd44:	e4aa                	sd	a0,72(sp)
    8002bd46:	e8ae                	sd	a1,80(sp)
    8002bd48:	ecb2                	sd	a2,88(sp)
    8002bd4a:	f0b6                	sd	a3,96(sp)
    8002bd4c:	f4ba                	sd	a4,104(sp)
    8002bd4e:	f8be                	sd	a5,112(sp)
    8002bd50:	fcc2                	sd	a6,120(sp)
    8002bd52:	e146                	sd	a7,128(sp)
    8002bd54:	e54a                	sd	s2,136(sp)
    8002bd56:	e94e                	sd	s3,144(sp)
    8002bd58:	ed52                	sd	s4,152(sp)
    8002bd5a:	f156                	sd	s5,160(sp)
    8002bd5c:	f55a                	sd	s6,168(sp)
    8002bd5e:	f95e                	sd	s7,176(sp)
    8002bd60:	fd62                	sd	s8,184(sp)
    8002bd62:	e1e6                	sd	s9,192(sp)
    8002bd64:	e5ea                	sd	s10,200(sp)
    8002bd66:	e9ee                	sd	s11,208(sp)
    8002bd68:	edf2                	sd	t3,216(sp)
    8002bd6a:	f1f6                	sd	t4,224(sp)
    8002bd6c:	f5fa                	sd	t5,232(sp)
    8002bd6e:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_1
    8002bd70:	81cfe0ef          	jal	80029d8c <vs_test_entry_two_1>
    j _return
    8002bd74:	a2f5                	j	8002bf60 <_return>

000000008002bd76 <vshandler_2>:

vshandler_2:
    SAVE_CONTEXT
    8002bd76:	f0810113          	addi	sp,sp,-248
    8002bd7a:	e006                	sd	ra,0(sp)
    8002bd7c:	e80e                	sd	gp,16(sp)
    8002bd7e:	ec12                	sd	tp,24(sp)
    8002bd80:	f016                	sd	t0,32(sp)
    8002bd82:	f41a                	sd	t1,40(sp)
    8002bd84:	f81e                	sd	t2,48(sp)
    8002bd86:	fc22                	sd	s0,56(sp)
    8002bd88:	e0a6                	sd	s1,64(sp)
    8002bd8a:	e4aa                	sd	a0,72(sp)
    8002bd8c:	e8ae                	sd	a1,80(sp)
    8002bd8e:	ecb2                	sd	a2,88(sp)
    8002bd90:	f0b6                	sd	a3,96(sp)
    8002bd92:	f4ba                	sd	a4,104(sp)
    8002bd94:	f8be                	sd	a5,112(sp)
    8002bd96:	fcc2                	sd	a6,120(sp)
    8002bd98:	e146                	sd	a7,128(sp)
    8002bd9a:	e54a                	sd	s2,136(sp)
    8002bd9c:	e94e                	sd	s3,144(sp)
    8002bd9e:	ed52                	sd	s4,152(sp)
    8002bda0:	f156                	sd	s5,160(sp)
    8002bda2:	f55a                	sd	s6,168(sp)
    8002bda4:	f95e                	sd	s7,176(sp)
    8002bda6:	fd62                	sd	s8,184(sp)
    8002bda8:	e1e6                	sd	s9,192(sp)
    8002bdaa:	e5ea                	sd	s10,200(sp)
    8002bdac:	e9ee                	sd	s11,208(sp)
    8002bdae:	edf2                	sd	t3,216(sp)
    8002bdb0:	f1f6                	sd	t4,224(sp)
    8002bdb2:	f5fa                	sd	t5,232(sp)
    8002bdb4:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_2
    8002bdb6:	ffdfd0ef          	jal	80029db2 <vs_test_entry_two_2>
    j _return
    8002bdba:	a25d                	j	8002bf60 <_return>

000000008002bdbc <vshandler_3>:

vshandler_3:
    SAVE_CONTEXT
    8002bdbc:	f0810113          	addi	sp,sp,-248
    8002bdc0:	e006                	sd	ra,0(sp)
    8002bdc2:	e80e                	sd	gp,16(sp)
    8002bdc4:	ec12                	sd	tp,24(sp)
    8002bdc6:	f016                	sd	t0,32(sp)
    8002bdc8:	f41a                	sd	t1,40(sp)
    8002bdca:	f81e                	sd	t2,48(sp)
    8002bdcc:	fc22                	sd	s0,56(sp)
    8002bdce:	e0a6                	sd	s1,64(sp)
    8002bdd0:	e4aa                	sd	a0,72(sp)
    8002bdd2:	e8ae                	sd	a1,80(sp)
    8002bdd4:	ecb2                	sd	a2,88(sp)
    8002bdd6:	f0b6                	sd	a3,96(sp)
    8002bdd8:	f4ba                	sd	a4,104(sp)
    8002bdda:	f8be                	sd	a5,112(sp)
    8002bddc:	fcc2                	sd	a6,120(sp)
    8002bdde:	e146                	sd	a7,128(sp)
    8002bde0:	e54a                	sd	s2,136(sp)
    8002bde2:	e94e                	sd	s3,144(sp)
    8002bde4:	ed52                	sd	s4,152(sp)
    8002bde6:	f156                	sd	s5,160(sp)
    8002bde8:	f55a                	sd	s6,168(sp)
    8002bdea:	f95e                	sd	s7,176(sp)
    8002bdec:	fd62                	sd	s8,184(sp)
    8002bdee:	e1e6                	sd	s9,192(sp)
    8002bdf0:	e5ea                	sd	s10,200(sp)
    8002bdf2:	e9ee                	sd	s11,208(sp)
    8002bdf4:	edf2                	sd	t3,216(sp)
    8002bdf6:	f1f6                	sd	t4,224(sp)
    8002bdf8:	f5fa                	sd	t5,232(sp)
    8002bdfa:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_3
    8002bdfc:	fddfd0ef          	jal	80029dd8 <vs_test_entry_two_3>
    j _return
    8002be00:	a285                	j	8002bf60 <_return>

000000008002be02 <vshandler_4>:

vshandler_4:
    SAVE_CONTEXT
    8002be02:	f0810113          	addi	sp,sp,-248
    8002be06:	e006                	sd	ra,0(sp)
    8002be08:	e80e                	sd	gp,16(sp)
    8002be0a:	ec12                	sd	tp,24(sp)
    8002be0c:	f016                	sd	t0,32(sp)
    8002be0e:	f41a                	sd	t1,40(sp)
    8002be10:	f81e                	sd	t2,48(sp)
    8002be12:	fc22                	sd	s0,56(sp)
    8002be14:	e0a6                	sd	s1,64(sp)
    8002be16:	e4aa                	sd	a0,72(sp)
    8002be18:	e8ae                	sd	a1,80(sp)
    8002be1a:	ecb2                	sd	a2,88(sp)
    8002be1c:	f0b6                	sd	a3,96(sp)
    8002be1e:	f4ba                	sd	a4,104(sp)
    8002be20:	f8be                	sd	a5,112(sp)
    8002be22:	fcc2                	sd	a6,120(sp)
    8002be24:	e146                	sd	a7,128(sp)
    8002be26:	e54a                	sd	s2,136(sp)
    8002be28:	e94e                	sd	s3,144(sp)
    8002be2a:	ed52                	sd	s4,152(sp)
    8002be2c:	f156                	sd	s5,160(sp)
    8002be2e:	f55a                	sd	s6,168(sp)
    8002be30:	f95e                	sd	s7,176(sp)
    8002be32:	fd62                	sd	s8,184(sp)
    8002be34:	e1e6                	sd	s9,192(sp)
    8002be36:	e5ea                	sd	s10,200(sp)
    8002be38:	e9ee                	sd	s11,208(sp)
    8002be3a:	edf2                	sd	t3,216(sp)
    8002be3c:	f1f6                	sd	t4,224(sp)
    8002be3e:	f5fa                	sd	t5,232(sp)
    8002be40:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_4
    8002be42:	fbdfd0ef          	jal	80029dfe <vs_test_entry_two_4>
    j _return
    8002be46:	aa29                	j	8002bf60 <_return>

000000008002be48 <vshandler_5>:

vshandler_5:
    SAVE_CONTEXT
    8002be48:	f0810113          	addi	sp,sp,-248
    8002be4c:	e006                	sd	ra,0(sp)
    8002be4e:	e80e                	sd	gp,16(sp)
    8002be50:	ec12                	sd	tp,24(sp)
    8002be52:	f016                	sd	t0,32(sp)
    8002be54:	f41a                	sd	t1,40(sp)
    8002be56:	f81e                	sd	t2,48(sp)
    8002be58:	fc22                	sd	s0,56(sp)
    8002be5a:	e0a6                	sd	s1,64(sp)
    8002be5c:	e4aa                	sd	a0,72(sp)
    8002be5e:	e8ae                	sd	a1,80(sp)
    8002be60:	ecb2                	sd	a2,88(sp)
    8002be62:	f0b6                	sd	a3,96(sp)
    8002be64:	f4ba                	sd	a4,104(sp)
    8002be66:	f8be                	sd	a5,112(sp)
    8002be68:	fcc2                	sd	a6,120(sp)
    8002be6a:	e146                	sd	a7,128(sp)
    8002be6c:	e54a                	sd	s2,136(sp)
    8002be6e:	e94e                	sd	s3,144(sp)
    8002be70:	ed52                	sd	s4,152(sp)
    8002be72:	f156                	sd	s5,160(sp)
    8002be74:	f55a                	sd	s6,168(sp)
    8002be76:	f95e                	sd	s7,176(sp)
    8002be78:	fd62                	sd	s8,184(sp)
    8002be7a:	e1e6                	sd	s9,192(sp)
    8002be7c:	e5ea                	sd	s10,200(sp)
    8002be7e:	e9ee                	sd	s11,208(sp)
    8002be80:	edf2                	sd	t3,216(sp)
    8002be82:	f1f6                	sd	t4,224(sp)
    8002be84:	f5fa                	sd	t5,232(sp)
    8002be86:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_5
    8002be88:	f9dfd0ef          	jal	80029e24 <vs_test_entry_two_5>
    j _return
    8002be8c:	a8d1                	j	8002bf60 <_return>

000000008002be8e <vshandler_6>:

vshandler_6:
    SAVE_CONTEXT
    8002be8e:	f0810113          	addi	sp,sp,-248
    8002be92:	e006                	sd	ra,0(sp)
    8002be94:	e80e                	sd	gp,16(sp)
    8002be96:	ec12                	sd	tp,24(sp)
    8002be98:	f016                	sd	t0,32(sp)
    8002be9a:	f41a                	sd	t1,40(sp)
    8002be9c:	f81e                	sd	t2,48(sp)
    8002be9e:	fc22                	sd	s0,56(sp)
    8002bea0:	e0a6                	sd	s1,64(sp)
    8002bea2:	e4aa                	sd	a0,72(sp)
    8002bea4:	e8ae                	sd	a1,80(sp)
    8002bea6:	ecb2                	sd	a2,88(sp)
    8002bea8:	f0b6                	sd	a3,96(sp)
    8002beaa:	f4ba                	sd	a4,104(sp)
    8002beac:	f8be                	sd	a5,112(sp)
    8002beae:	fcc2                	sd	a6,120(sp)
    8002beb0:	e146                	sd	a7,128(sp)
    8002beb2:	e54a                	sd	s2,136(sp)
    8002beb4:	e94e                	sd	s3,144(sp)
    8002beb6:	ed52                	sd	s4,152(sp)
    8002beb8:	f156                	sd	s5,160(sp)
    8002beba:	f55a                	sd	s6,168(sp)
    8002bebc:	f95e                	sd	s7,176(sp)
    8002bebe:	fd62                	sd	s8,184(sp)
    8002bec0:	e1e6                	sd	s9,192(sp)
    8002bec2:	e5ea                	sd	s10,200(sp)
    8002bec4:	e9ee                	sd	s11,208(sp)
    8002bec6:	edf2                	sd	t3,216(sp)
    8002bec8:	f1f6                	sd	t4,224(sp)
    8002beca:	f5fa                	sd	t5,232(sp)
    8002becc:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_6
    8002bece:	f7dfd0ef          	jal	80029e4a <vs_test_entry_two_6>
    j _return
    8002bed2:	a079                	j	8002bf60 <_return>

000000008002bed4 <vshandler_7>:

vshandler_7:
    SAVE_CONTEXT
    8002bed4:	f0810113          	addi	sp,sp,-248
    8002bed8:	e006                	sd	ra,0(sp)
    8002beda:	e80e                	sd	gp,16(sp)
    8002bedc:	ec12                	sd	tp,24(sp)
    8002bede:	f016                	sd	t0,32(sp)
    8002bee0:	f41a                	sd	t1,40(sp)
    8002bee2:	f81e                	sd	t2,48(sp)
    8002bee4:	fc22                	sd	s0,56(sp)
    8002bee6:	e0a6                	sd	s1,64(sp)
    8002bee8:	e4aa                	sd	a0,72(sp)
    8002beea:	e8ae                	sd	a1,80(sp)
    8002beec:	ecb2                	sd	a2,88(sp)
    8002beee:	f0b6                	sd	a3,96(sp)
    8002bef0:	f4ba                	sd	a4,104(sp)
    8002bef2:	f8be                	sd	a5,112(sp)
    8002bef4:	fcc2                	sd	a6,120(sp)
    8002bef6:	e146                	sd	a7,128(sp)
    8002bef8:	e54a                	sd	s2,136(sp)
    8002befa:	e94e                	sd	s3,144(sp)
    8002befc:	ed52                	sd	s4,152(sp)
    8002befe:	f156                	sd	s5,160(sp)
    8002bf00:	f55a                	sd	s6,168(sp)
    8002bf02:	f95e                	sd	s7,176(sp)
    8002bf04:	fd62                	sd	s8,184(sp)
    8002bf06:	e1e6                	sd	s9,192(sp)
    8002bf08:	e5ea                	sd	s10,200(sp)
    8002bf0a:	e9ee                	sd	s11,208(sp)
    8002bf0c:	edf2                	sd	t3,216(sp)
    8002bf0e:	f1f6                	sd	t4,224(sp)
    8002bf10:	f5fa                	sd	t5,232(sp)
    8002bf12:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_7
    8002bf14:	f5dfd0ef          	jal	80029e70 <vs_test_entry_two_7>
    j _return
    8002bf18:	a0a1                	j	8002bf60 <_return>

000000008002bf1a <vshandler_8>:
    
vshandler_8:
    SAVE_CONTEXT
    8002bf1a:	f0810113          	addi	sp,sp,-248
    8002bf1e:	e006                	sd	ra,0(sp)
    8002bf20:	e80e                	sd	gp,16(sp)
    8002bf22:	ec12                	sd	tp,24(sp)
    8002bf24:	f016                	sd	t0,32(sp)
    8002bf26:	f41a                	sd	t1,40(sp)
    8002bf28:	f81e                	sd	t2,48(sp)
    8002bf2a:	fc22                	sd	s0,56(sp)
    8002bf2c:	e0a6                	sd	s1,64(sp)
    8002bf2e:	e4aa                	sd	a0,72(sp)
    8002bf30:	e8ae                	sd	a1,80(sp)
    8002bf32:	ecb2                	sd	a2,88(sp)
    8002bf34:	f0b6                	sd	a3,96(sp)
    8002bf36:	f4ba                	sd	a4,104(sp)
    8002bf38:	f8be                	sd	a5,112(sp)
    8002bf3a:	fcc2                	sd	a6,120(sp)
    8002bf3c:	e146                	sd	a7,128(sp)
    8002bf3e:	e54a                	sd	s2,136(sp)
    8002bf40:	e94e                	sd	s3,144(sp)
    8002bf42:	ed52                	sd	s4,152(sp)
    8002bf44:	f156                	sd	s5,160(sp)
    8002bf46:	f55a                	sd	s6,168(sp)
    8002bf48:	f95e                	sd	s7,176(sp)
    8002bf4a:	fd62                	sd	s8,184(sp)
    8002bf4c:	e1e6                	sd	s9,192(sp)
    8002bf4e:	e5ea                	sd	s10,200(sp)
    8002bf50:	e9ee                	sd	s11,208(sp)
    8002bf52:	edf2                	sd	t3,216(sp)
    8002bf54:	f1f6                	sd	t4,224(sp)
    8002bf56:	f5fa                	sd	t5,232(sp)
    8002bf58:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_8
    8002bf5a:	f3dfd0ef          	jal	80029e96 <vs_test_entry_two_8>
    j _return
    8002bf5e:	a009                	j	8002bf60 <_return>

000000008002bf60 <_return>:

    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002bf60:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002bf62:	04550563          	beq	a0,t0,8002bfac <_return_from_m>

000000008002bf66 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002bf66:	6082                	ld	ra,0(sp)
    8002bf68:	61c2                	ld	gp,16(sp)
    8002bf6a:	6262                	ld	tp,24(sp)
    8002bf6c:	7282                	ld	t0,32(sp)
    8002bf6e:	7322                	ld	t1,40(sp)
    8002bf70:	73c2                	ld	t2,48(sp)
    8002bf72:	7462                	ld	s0,56(sp)
    8002bf74:	6486                	ld	s1,64(sp)
    8002bf76:	6526                	ld	a0,72(sp)
    8002bf78:	65c6                	ld	a1,80(sp)
    8002bf7a:	6666                	ld	a2,88(sp)
    8002bf7c:	7686                	ld	a3,96(sp)
    8002bf7e:	7726                	ld	a4,104(sp)
    8002bf80:	77c6                	ld	a5,112(sp)
    8002bf82:	7866                	ld	a6,120(sp)
    8002bf84:	688a                	ld	a7,128(sp)
    8002bf86:	692a                	ld	s2,136(sp)
    8002bf88:	69ca                	ld	s3,144(sp)
    8002bf8a:	6a6a                	ld	s4,152(sp)
    8002bf8c:	7a8a                	ld	s5,160(sp)
    8002bf8e:	7b2a                	ld	s6,168(sp)
    8002bf90:	7bca                	ld	s7,176(sp)
    8002bf92:	7c6a                	ld	s8,184(sp)
    8002bf94:	6c8e                	ld	s9,192(sp)
    8002bf96:	6d2e                	ld	s10,200(sp)
    8002bf98:	6dce                	ld	s11,208(sp)
    8002bf9a:	6e6e                	ld	t3,216(sp)
    8002bf9c:	7e8e                	ld	t4,224(sp)
    8002bf9e:	7f2e                	ld	t5,232(sp)
    8002bfa0:	7fce                	ld	t6,240(sp)
    8002bfa2:	0f810113          	addi	sp,sp,248
    sret
    8002bfa6:	10200073          	sret
    j   .
    8002bfaa:	a001                	j	8002bfaa <_return_from_s+0x44>

000000008002bfac <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002bfac:	6082                	ld	ra,0(sp)
    8002bfae:	61c2                	ld	gp,16(sp)
    8002bfb0:	6262                	ld	tp,24(sp)
    8002bfb2:	7282                	ld	t0,32(sp)
    8002bfb4:	7322                	ld	t1,40(sp)
    8002bfb6:	73c2                	ld	t2,48(sp)
    8002bfb8:	7462                	ld	s0,56(sp)
    8002bfba:	6486                	ld	s1,64(sp)
    8002bfbc:	6526                	ld	a0,72(sp)
    8002bfbe:	65c6                	ld	a1,80(sp)
    8002bfc0:	6666                	ld	a2,88(sp)
    8002bfc2:	7686                	ld	a3,96(sp)
    8002bfc4:	7726                	ld	a4,104(sp)
    8002bfc6:	77c6                	ld	a5,112(sp)
    8002bfc8:	7866                	ld	a6,120(sp)
    8002bfca:	688a                	ld	a7,128(sp)
    8002bfcc:	692a                	ld	s2,136(sp)
    8002bfce:	69ca                	ld	s3,144(sp)
    8002bfd0:	6a6a                	ld	s4,152(sp)
    8002bfd2:	7a8a                	ld	s5,160(sp)
    8002bfd4:	7b2a                	ld	s6,168(sp)
    8002bfd6:	7bca                	ld	s7,176(sp)
    8002bfd8:	7c6a                	ld	s8,184(sp)
    8002bfda:	6c8e                	ld	s9,192(sp)
    8002bfdc:	6d2e                	ld	s10,200(sp)
    8002bfde:	6dce                	ld	s11,208(sp)
    8002bfe0:	6e6e                	ld	t3,216(sp)
    8002bfe2:	7e8e                	ld	t4,224(sp)
    8002bfe4:	7f2e                	ld	t5,232(sp)
    8002bfe6:	7fce                	ld	t6,240(sp)
    8002bfe8:	0f810113          	addi	sp,sp,248
    mret
    8002bfec:	30200073          	mret

Disassembly of section .text.startup:

000000008002bff0 <main>:


void main(){
    8002bff0:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8002bff2:	00002517          	auipc	a0,0x2
    8002bff6:	2be50513          	addi	a0,a0,702 # 8002e2b0 <__func__.0+0x3c8>
void main(){
    8002bffa:	ec06                	sd	ra,24(sp)
    8002bffc:	e822                	sd	s0,16(sp)
    8002bffe:	e426                	sd	s1,8(sp)
    8002c000:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8002c002:	c28ff0ef          	jal	8002b42a <printf>
    8002c006:	4529                	li	a0,10
    8002c008:	910fe0ef          	jal	8002a118 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8002c00c:	d00d40ef          	jal	8000050c <check_misa_h>
    8002c010:	c539                	beqz	a0,8002c05e <main+0x6e>
        reset_state();
    8002c012:	813d50ef          	jal	80001824 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8002c016:	00010497          	auipc	s1,0x10
    8002c01a:	81248493          	addi	s1,s1,-2030 # 8003b828 <test_table_size>
    8002c01e:	609c                	ld	a5,0(s1)
    8002c020:	4401                	li	s0,0
    8002c022:	00010917          	auipc	s2,0x10
    8002c026:	80e90913          	addi	s2,s2,-2034 # 8003b830 <test_table>
    8002c02a:	cf91                	beqz	a5,8002c046 <main+0x56>
            reset_state();
    8002c02c:	ff8d50ef          	jal	80001824 <reset_state>
            test_table[i]();
    8002c030:	00093783          	ld	a5,0(s2)
    8002c034:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8002c038:	0405                	addi	s0,s0,1
            test_table[i]();
    8002c03a:	97ba                	add	a5,a5,a4
    8002c03c:	639c                	ld	a5,0(a5)
    8002c03e:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8002c040:	609c                	ld	a5,0(s1)
    8002c042:	fef465e3          	bltu	s0,a5,8002c02c <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8002c046:	00002517          	auipc	a0,0x2
    8002c04a:	2ba50513          	addi	a0,a0,698 # 8002e300 <__func__.0+0x418>
    8002c04e:	bdcff0ef          	jal	8002b42a <printf>
    8002c052:	4529                	li	a0,10
    8002c054:	8c4fe0ef          	jal	8002a118 <putchar>
    exit(0);
    8002c058:	4501                	li	a0,0
    8002c05a:	f87fe0ef          	jal	8002afe0 <exit>
        printf("hypervisor extension is not supported!\n");
    8002c05e:	00002517          	auipc	a0,0x2
    8002c062:	27a50513          	addi	a0,a0,634 # 8002e2d8 <__func__.0+0x3f0>
    8002c066:	800ff0ef          	jal	8002b066 <puts>
    8002c06a:	bff1                	j	8002c046 <main+0x56>
{
    8002c06c:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8002c06e:	0000d517          	auipc	a0,0xd
    8002c072:	76a50513          	addi	a0,a0,1898 # 800397d8 <__func__.0+0xb8f0>
{
    8002c076:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8002c078:	f7ffe0ef          	jal	8002aff6 <printstr>
}
    8002c07c:	60a2                	ld	ra,8(sp)
    8002c07e:	557d                	li	a0,-1
    8002c080:	0141                	addi	sp,sp,16
    8002c082:	8082                	ret
