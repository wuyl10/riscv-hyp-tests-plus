
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	0003c517          	auipc	a0,0x3c
    80000012:	ff250513          	addi	a0,a0,-14 # 8003c000 <hpt>
    la a1, __bss_end
    80000016:	00054597          	auipc	a1,0x54
    8000001a:	0c258593          	addi	a1,a1,194 # 800540d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	05e2b0ef          	jal	8002b08a <_init>
    call main
    80000030:	1c22b0ef          	jal	8002b1f2 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	1d72a0ef          	jal	8002aa0c <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	0002b597          	auipc	a1,0x2b
    80000042:	24a58593          	addi	a1,a1,586 # 8002b288 <__func__.1>
    80000046:	0002d517          	auipc	a0,0x2d
    8000004a:	35250513          	addi	a0,a0,850 # 8002d398 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	5fd2a0ef          	jal	8002ae56 <printf>
    8000005e:	4529                	li	a0,10
    80000060:	2e5290ef          	jal	80029b44 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	0002d617          	auipc	a2,0x2d
    80000074:	33860613          	addi	a2,a2,824 # 8002d3a8 <__func__.0+0x2f0>
    80000078:	08200593          	li	a1,130
    8000007c:	0002d517          	auipc	a0,0x2d
    80000080:	33450513          	addi	a0,a0,820 # 8002d3b0 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	5cf2a0ef          	jal	8002ae56 <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	0002d597          	auipc	a1,0x2d
    80000094:	2f858593          	addi	a1,a1,760 # 8002d388 <__func__.0+0x2d0>
    80000098:	0002d517          	auipc	a0,0x2d
    8000009c:	33050513          	addi	a0,a0,816 # 8002d3c8 <__func__.0+0x310>
    800000a0:	5b72a0ef          	jal	8002ae56 <printf>
    800000a4:	0002d517          	auipc	a0,0x2d
    800000a8:	32c50513          	addi	a0,a0,812 # 8002d3d0 <__func__.0+0x318>
    800000ac:	5ab2a0ef          	jal	8002ae56 <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	0002d517          	auipc	a0,0x2d
    800000ba:	32250513          	addi	a0,a0,802 # 8002d3d8 <__func__.0+0x320>
    800000be:	5992a0ef          	jal	8002ae56 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	27f290ef          	jal	80029b44 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	279290ef          	jal	80029b44 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	0002d617          	auipc	a2,0x2d
    800000e8:	30c60613          	addi	a2,a2,780 # 8002d3f0 <__func__.0+0x338>
    800000ec:	08200593          	li	a1,130
    800000f0:	0002d517          	auipc	a0,0x2d
    800000f4:	2c050513          	addi	a0,a0,704 # 8002d3b0 <__func__.0+0x2f8>
    800000f8:	55f2a0ef          	jal	8002ae56 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	0002d597          	auipc	a1,0x2d
    80000104:	28858593          	addi	a1,a1,648 # 8002d388 <__func__.0+0x2d0>
    80000108:	0002d517          	auipc	a0,0x2d
    8000010c:	2c050513          	addi	a0,a0,704 # 8002d3c8 <__func__.0+0x310>
    80000110:	5472a0ef          	jal	8002ae56 <printf>
    80000114:	0002d517          	auipc	a0,0x2d
    80000118:	2bc50513          	addi	a0,a0,700 # 8002d3d0 <__func__.0+0x318>
    8000011c:	53b2a0ef          	jal	8002ae56 <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	0002d517          	auipc	a0,0x2d
    8000012a:	2b250513          	addi	a0,a0,690 # 8002d3d8 <__func__.0+0x320>
    8000012e:	5292a0ef          	jal	8002ae56 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	20f290ef          	jal	80029b44 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	209290ef          	jal	80029b44 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	0002d617          	auipc	a2,0x2d
    80000158:	2a460613          	addi	a2,a2,676 # 8002d3f8 <__func__.0+0x340>
    8000015c:	08200593          	li	a1,130
    80000160:	0002d517          	auipc	a0,0x2d
    80000164:	25050513          	addi	a0,a0,592 # 8002d3b0 <__func__.0+0x2f8>
    80000168:	4ef2a0ef          	jal	8002ae56 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	0002d597          	auipc	a1,0x2d
    80000174:	21858593          	addi	a1,a1,536 # 8002d388 <__func__.0+0x2d0>
    80000178:	0002d517          	auipc	a0,0x2d
    8000017c:	25050513          	addi	a0,a0,592 # 8002d3c8 <__func__.0+0x310>
    80000180:	4d72a0ef          	jal	8002ae56 <printf>
    80000184:	0002d517          	auipc	a0,0x2d
    80000188:	24c50513          	addi	a0,a0,588 # 8002d3d0 <__func__.0+0x318>
    8000018c:	4cb2a0ef          	jal	8002ae56 <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	0002d517          	auipc	a0,0x2d
    8000019a:	24250513          	addi	a0,a0,578 # 8002d3d8 <__func__.0+0x320>
    8000019e:	4b92a0ef          	jal	8002ae56 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	19f290ef          	jal	80029b44 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	199290ef          	jal	80029b44 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	0002d617          	auipc	a2,0x2d
    800001c8:	23c60613          	addi	a2,a2,572 # 8002d400 <__func__.0+0x348>
    800001cc:	08200593          	li	a1,130
    800001d0:	0002d517          	auipc	a0,0x2d
    800001d4:	1e050513          	addi	a0,a0,480 # 8002d3b0 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	47b2a0ef          	jal	8002ae56 <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	0002d597          	auipc	a1,0x2d
    800001e8:	1a458593          	addi	a1,a1,420 # 8002d388 <__func__.0+0x2d0>
    800001ec:	0002d517          	auipc	a0,0x2d
    800001f0:	1dc50513          	addi	a0,a0,476 # 8002d3c8 <__func__.0+0x310>
    800001f4:	4632a0ef          	jal	8002ae56 <printf>
    800001f8:	0002d517          	auipc	a0,0x2d
    800001fc:	1d850513          	addi	a0,a0,472 # 8002d3d0 <__func__.0+0x318>
    80000200:	4572a0ef          	jal	8002ae56 <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	0002d517          	auipc	a0,0x2d
    8000020e:	1ce50513          	addi	a0,a0,462 # 8002d3d8 <__func__.0+0x320>
    80000212:	4452a0ef          	jal	8002ae56 <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	12b290ef          	jal	80029b44 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	125290ef          	jal	80029b44 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	0002d617          	auipc	a2,0x2d
    8000023c:	1d060613          	addi	a2,a2,464 # 8002d408 <__func__.0+0x350>
    80000240:	08200593          	li	a1,130
    80000244:	0002d517          	auipc	a0,0x2d
    80000248:	16c50513          	addi	a0,a0,364 # 8002d3b0 <__func__.0+0x2f8>
    8000024c:	40b2a0ef          	jal	8002ae56 <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	0002d597          	auipc	a1,0x2d
    80000258:	13458593          	addi	a1,a1,308 # 8002d388 <__func__.0+0x2d0>
    8000025c:	0002d517          	auipc	a0,0x2d
    80000260:	16c50513          	addi	a0,a0,364 # 8002d3c8 <__func__.0+0x310>
    80000264:	3f32a0ef          	jal	8002ae56 <printf>
    80000268:	0002d517          	auipc	a0,0x2d
    8000026c:	16850513          	addi	a0,a0,360 # 8002d3d0 <__func__.0+0x318>
    80000270:	3e72a0ef          	jal	8002ae56 <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	0002d517          	auipc	a0,0x2d
    8000027e:	15e50513          	addi	a0,a0,350 # 8002d3d8 <__func__.0+0x320>
    80000282:	3d52a0ef          	jal	8002ae56 <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	0bb290ef          	jal	80029b44 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	0b5290ef          	jal	80029b44 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	0002d617          	auipc	a2,0x2d
    800002ac:	16860613          	addi	a2,a2,360 # 8002d410 <__func__.0+0x358>
    800002b0:	08200593          	li	a1,130
    800002b4:	0002d517          	auipc	a0,0x2d
    800002b8:	0fc50513          	addi	a0,a0,252 # 8002d3b0 <__func__.0+0x2f8>
    800002bc:	39b2a0ef          	jal	8002ae56 <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	0002d597          	auipc	a1,0x2d
    800002c8:	0c458593          	addi	a1,a1,196 # 8002d388 <__func__.0+0x2d0>
    800002cc:	0002d517          	auipc	a0,0x2d
    800002d0:	0fc50513          	addi	a0,a0,252 # 8002d3c8 <__func__.0+0x310>
    800002d4:	3832a0ef          	jal	8002ae56 <printf>
    800002d8:	0002d517          	auipc	a0,0x2d
    800002dc:	0f850513          	addi	a0,a0,248 # 8002d3d0 <__func__.0+0x318>
    800002e0:	3772a0ef          	jal	8002ae56 <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	0002d517          	auipc	a0,0x2d
    800002ee:	0ee50513          	addi	a0,a0,238 # 8002d3d8 <__func__.0+0x320>
    800002f2:	3652a0ef          	jal	8002ae56 <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	04b290ef          	jal	80029b44 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	045290ef          	jal	80029b44 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	0002d617          	auipc	a2,0x2d
    8000031c:	10060613          	addi	a2,a2,256 # 8002d418 <__func__.0+0x360>
    80000320:	08200593          	li	a1,130
    80000324:	0002d517          	auipc	a0,0x2d
    80000328:	08c50513          	addi	a0,a0,140 # 8002d3b0 <__func__.0+0x2f8>
    8000032c:	32b2a0ef          	jal	8002ae56 <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	0002d597          	auipc	a1,0x2d
    80000338:	05458593          	addi	a1,a1,84 # 8002d388 <__func__.0+0x2d0>
    8000033c:	0002d517          	auipc	a0,0x2d
    80000340:	08c50513          	addi	a0,a0,140 # 8002d3c8 <__func__.0+0x310>
    80000344:	3132a0ef          	jal	8002ae56 <printf>
    80000348:	0002d517          	auipc	a0,0x2d
    8000034c:	08850513          	addi	a0,a0,136 # 8002d3d0 <__func__.0+0x318>
    80000350:	3072a0ef          	jal	8002ae56 <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	0002d517          	auipc	a0,0x2d
    8000035e:	07e50513          	addi	a0,a0,126 # 8002d3d8 <__func__.0+0x320>
    80000362:	2f52a0ef          	jal	8002ae56 <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	7da290ef          	jal	80029b44 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	7d4290ef          	jal	80029b44 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	0002d617          	auipc	a2,0x2d
    8000038c:	0a060613          	addi	a2,a2,160 # 8002d428 <__func__.0+0x370>
    80000390:	08200593          	li	a1,130
    80000394:	0002d517          	auipc	a0,0x2d
    80000398:	01c50513          	addi	a0,a0,28 # 8002d3b0 <__func__.0+0x2f8>
    8000039c:	2bb2a0ef          	jal	8002ae56 <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	0002d597          	auipc	a1,0x2d
    800003a8:	fe458593          	addi	a1,a1,-28 # 8002d388 <__func__.0+0x2d0>
    800003ac:	0002d517          	auipc	a0,0x2d
    800003b0:	01c50513          	addi	a0,a0,28 # 8002d3c8 <__func__.0+0x310>
    800003b4:	2a32a0ef          	jal	8002ae56 <printf>
    800003b8:	0002d517          	auipc	a0,0x2d
    800003bc:	01850513          	addi	a0,a0,24 # 8002d3d0 <__func__.0+0x318>
    800003c0:	2972a0ef          	jal	8002ae56 <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	0002d517          	auipc	a0,0x2d
    800003ce:	00e50513          	addi	a0,a0,14 # 8002d3d8 <__func__.0+0x320>
    800003d2:	2852a0ef          	jal	8002ae56 <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	76a290ef          	jal	80029b44 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	764290ef          	jal	80029b44 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	0002d597          	auipc	a1,0x2d
    800003ee:	f9e58593          	addi	a1,a1,-98 # 8002d388 <__func__.0+0x2d0>
    800003f2:	0002d517          	auipc	a0,0x2d
    800003f6:	03e50513          	addi	a0,a0,62 # 8002d430 <__func__.0+0x378>
    800003fa:	25d2a0ef          	jal	8002ae56 <printf>
    800003fe:	4511                	li	a0,4
    80000400:	309000ef          	jal	80000f08 <goto_priv>
    80000404:	420010ef          	jal	80001824 <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	0002d597          	auipc	a1,0x2d
    8000041e:	f5e58593          	addi	a1,a1,-162 # 8002d378 <__func__.0+0x2c0>
    80000422:	0002d517          	auipc	a0,0x2d
    80000426:	fa650513          	addi	a0,a0,-90 # 8002d3c8 <__func__.0+0x310>
    8000042a:	22d2a0ef          	jal	8002ae56 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	714290ef          	jal	80029b44 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	0002d597          	auipc	a1,0x2d
    8000043a:	f4258593          	addi	a1,a1,-190 # 8002d378 <__func__.0+0x2c0>
    8000043e:	0002d517          	auipc	a0,0x2d
    80000442:	f8a50513          	addi	a0,a0,-118 # 8002d3c8 <__func__.0+0x310>
    80000446:	2112a0ef          	jal	8002ae56 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	6f8290ef          	jal	80029b44 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	0002d597          	auipc	a1,0x2d
    8000045c:	f2058593          	addi	a1,a1,-224 # 8002d378 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	0002d597          	auipc	a1,0x2d
    80000466:	f1658593          	addi	a1,a1,-234 # 8002d378 <__func__.0+0x2c0>
    8000046a:	0002d517          	auipc	a0,0x2d
    8000046e:	f5e50513          	addi	a0,a0,-162 # 8002d3c8 <__func__.0+0x310>
    80000472:	1e52a0ef          	jal	8002ae56 <printf>
    80000476:	4529                	li	a0,10
    80000478:	6cc290ef          	jal	80029b44 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	0002d597          	auipc	a1,0x2d
    80000482:	efa58593          	addi	a1,a1,-262 # 8002d378 <__func__.0+0x2c0>
    80000486:	0002d517          	auipc	a0,0x2d
    8000048a:	f4250513          	addi	a0,a0,-190 # 8002d3c8 <__func__.0+0x310>
    8000048e:	1c92a0ef          	jal	8002ae56 <printf>
    80000492:	4529                	li	a0,10
    80000494:	6b0290ef          	jal	80029b44 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	0002d597          	auipc	a1,0x2d
    8000049e:	ede58593          	addi	a1,a1,-290 # 8002d378 <__func__.0+0x2c0>
    800004a2:	0002d517          	auipc	a0,0x2d
    800004a6:	f2650513          	addi	a0,a0,-218 # 8002d3c8 <__func__.0+0x310>
    800004aa:	1ad2a0ef          	jal	8002ae56 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	694290ef          	jal	80029b44 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	0002d597          	auipc	a1,0x2d
    800004ba:	ec258593          	addi	a1,a1,-318 # 8002d378 <__func__.0+0x2c0>
    800004be:	0002d517          	auipc	a0,0x2d
    800004c2:	f0a50513          	addi	a0,a0,-246 # 8002d3c8 <__func__.0+0x310>
    800004c6:	1912a0ef          	jal	8002ae56 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	678290ef          	jal	80029b44 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	0002d597          	auipc	a1,0x2d
    800004d6:	ea658593          	addi	a1,a1,-346 # 8002d378 <__func__.0+0x2c0>
    800004da:	0002d517          	auipc	a0,0x2d
    800004de:	eee50513          	addi	a0,a0,-274 # 8002d3c8 <__func__.0+0x310>
    800004e2:	1752a0ef          	jal	8002ae56 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	65c290ef          	jal	80029b44 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	0002d597          	auipc	a1,0x2d
    800004f2:	e8a58593          	addi	a1,a1,-374 # 8002d378 <__func__.0+0x2c0>
    800004f6:	0002d517          	auipc	a0,0x2d
    800004fa:	ed250513          	addi	a0,a0,-302 # 8002d3c8 <__func__.0+0x310>
    800004fe:	1592a0ef          	jal	8002ae56 <printf>
    80000502:	4529                	li	a0,10
    80000504:	640290ef          	jal	80029b44 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	0002b597          	auipc	a1,0x2b
    80000512:	d9258593          	addi	a1,a1,-622 # 8002b2a0 <__func__.0>
    80000516:	0002d517          	auipc	a0,0x2d
    8000051a:	e8250513          	addi	a0,a0,-382 # 8002d398 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	1352a0ef          	jal	8002ae56 <printf>
    80000526:	4529                	li	a0,10
    80000528:	61c290ef          	jal	80029b44 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	0002d617          	auipc	a2,0x2d
    80000540:	efc60613          	addi	a2,a2,-260 # 8002d438 <__func__.0+0x380>
    80000544:	08200593          	li	a1,130
    80000548:	0002d517          	auipc	a0,0x2d
    8000054c:	e6850513          	addi	a0,a0,-408 # 8002d3b0 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	1032a0ef          	jal	8002ae56 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	0002d597          	auipc	a1,0x2d
    8000055e:	e1e58593          	addi	a1,a1,-482 # 8002d378 <__func__.0+0x2c0>
    80000562:	0002d517          	auipc	a0,0x2d
    80000566:	e6650513          	addi	a0,a0,-410 # 8002d3c8 <__func__.0+0x310>
    8000056a:	0ed2a0ef          	jal	8002ae56 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	5d4290ef          	jal	80029b44 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	0002d597          	auipc	a1,0x2d
    80000578:	e0458593          	addi	a1,a1,-508 # 8002d378 <__func__.0+0x2c0>
    8000057c:	0002d517          	auipc	a0,0x2d
    80000580:	eb450513          	addi	a0,a0,-332 # 8002d430 <__func__.0+0x378>
    80000584:	0d32a0ef          	jal	8002ae56 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	17f000ef          	jal	80000f08 <goto_priv>
    8000058e:	296010ef          	jal	80001824 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	0002d597          	auipc	a1,0x2d
    800005a0:	dec58593          	addi	a1,a1,-532 # 8002d388 <__func__.0+0x2d0>
    800005a4:	0002d517          	auipc	a0,0x2d
    800005a8:	e2450513          	addi	a0,a0,-476 # 8002d3c8 <__func__.0+0x310>
    800005ac:	0ab2a0ef          	jal	8002ae56 <printf>
    800005b0:	0002d517          	auipc	a0,0x2d
    800005b4:	e2050513          	addi	a0,a0,-480 # 8002d3d0 <__func__.0+0x318>
    800005b8:	09f2a0ef          	jal	8002ae56 <printf>
    800005bc:	0002d517          	auipc	a0,0x2d
    800005c0:	e9c50513          	addi	a0,a0,-356 # 8002d458 <__func__.0+0x3a0>
    800005c4:	0932a0ef          	jal	8002ae56 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	578290ef          	jal	80029b44 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	572290ef          	jal	80029b44 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    hspt[1][4] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800005e4:	00051797          	auipc	a5,0x51
    800005e8:	a1c78793          	addi	a5,a5,-1508 # 80051000 <hspt+0x2000>
    800005ec:	5e07c157          	vmv.v.x	v2,a5
    800005f0:	00052517          	auipc	a0,0x52
    800005f4:	a1050513          	addi	a0,a0,-1520 # 80052000 <hspt+0x3000>
        hspt[1][i] = 
    800005f8:	5208a0d7          	vid.v	v1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005fc:	3e256157          	vslide1down.vx	v2,v2,a0
        PTE_V | (((uintptr_t)&hspt[3][0]) >> 2);
    hspt[2][0] = 
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);

    for(int i = 0; i < 4; i++){
        hspt[3][i] = 
    80000600:	9619b1d7          	vsll.vi	v3,v1,19
        hspt[1][i] = 
    80000604:	961e30d7          	vsll.vi	v1,v1,28
    80000608:	0cf00593          	li	a1,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000060c:	a2213157          	vsrl.vi	v2,v2,2
        hspt[1][i] = 
    80000610:	200007b7          	lui	a5,0x20000
        hspt[3][i] = 
    80000614:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
        hspt[1][i] = 
    80000618:	97ae                	add	a5,a5,a1
        hspt[3][i] = 
    8000061a:	5208a257          	vid.v	v4
    8000061e:	40000637          	lui	a2,0x40000
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000622:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[3][i] = 
    80000626:	40100737          	lui	a4,0x40100
        hspt[1][i] = 
    8000062a:	0215c2d7          	vadd.vx	v5,v1,a1
        hspt[3][i] = 
    8000062e:	0cf70713          	addi	a4,a4,207 # 401000cf <STACK_SIZE+0x400000cf>
        hspt[1][i] = 
    80000632:	0217c0d7          	vadd.vx	v1,v1,a5
        hspt[3][i] = 
    80000636:	0cf60613          	addi	a2,a2,207 # 400000cf <STACK_SIZE+0x3ff000cf>
    8000063a:	02364357          	vadd.vx	v6,v3,a2
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000063e:	2a20b157          	vor.vi	v2,v2,1
        hspt[3][i] = 
    80000642:	023741d7          	vadd.vx	v3,v3,a4
    80000646:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    8000064a:	96463257          	vsll.vi	v4,v4,12
        hspt[1][i] = 
    8000064e:	00050897          	auipc	a7,0x50
    80000652:	9c288893          	addi	a7,a7,-1598 # 80050010 <hspt+0x1010>
    hspt[1][4] = 
    80000656:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[1][i] = 
    8000065a:	0208f0a7          	vse64.v	v1,(a7)
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000065e:	00050797          	auipc	a5,0x50
    80000662:	9a278793          	addi	a5,a5,-1630 # 80050000 <hspt+0x1000>
    hspt[1][4] = 
    80000666:	00050e17          	auipc	t3,0x50
    8000066a:	9bae0e13          	addi	t3,t3,-1606 # 80050020 <hspt+0x1020>
        hspt[3][i] = 
    8000066e:	00052317          	auipc	t1,0x52
    80000672:	9a230313          	addi	t1,t1,-1630 # 80052010 <hspt+0x3010>
    80000676:	02057327          	vse64.v	v6,(a0)
        hspt[1][i] = 
    8000067a:	0207f2a7          	vse64.v	v5,(a5)
    hspt[1][4] = 
    8000067e:	020e7127          	vse64.v	v2,(t3)
        hspt[3][i] = 
    80000682:	020371a7          	vse64.v	v3,(t1)
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    80000686:	00053717          	auipc	a4,0x53
    8000068a:	97a70713          	addi	a4,a4,-1670 # 80053000 <hspt+0x4000>
        hspt[3][i] = 
    8000068e:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    80000692:	0c000813          	li	a6,192
    80000696:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000698:	8389                	srli	a5,a5,0x2
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    8000069a:	00275693          	srli	a3,a4,0x2
    8000069e:	5e084357          	vmv.v.x	v6,a6
        hspt[3][i] = 
    800006a2:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800006a4:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    800006a8:	0016e693          	ori	a3,a3,1
    hspt[0][0] =
    800006ac:	0004f897          	auipc	a7,0x4f
    800006b0:	95488893          	addi	a7,a7,-1708 # 8004f000 <hspt>
        hspt[3][i] = 
    800006b4:	0245c257          	vadd.vx	v4,v4,a1
    hspt[0][0] =
    800006b8:	00f8b023          	sd	a5,0(a7)
        hspt[3][i] = 
    800006bc:	00038597          	auipc	a1,0x38
    800006c0:	29c58593          	addi	a1,a1,668 # 80038958 <test_page_perm_table>
    hspt[2][0] = 
    800006c4:	00051797          	auipc	a5,0x51
    800006c8:	92d7be23          	sd	a3,-1732(a5) # 80051000 <hspt+0x2000>
        hspt[3][i] = 
    800006cc:	1ff00693          	li	a3,511
    800006d0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hspt[4][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800006d4:	2205f107          	vlseg2e64.v	v2,(a1)
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006d8:	a24130d7          	vsrl.vi	v1,v4,2
    800006dc:	00c79513          	slli	a0,a5,0xc
    800006e0:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800006e4:	5e0542d7          	vmv.v.x	v5,a0
    800006e8:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800006ec:	00479813          	slli	a6,a5,0x4
    800006f0:	00379513          	slli	a0,a5,0x3
    800006f4:	8e9d                	sub	a3,a3,a5
    800006f6:	95c2                	add	a1,a1,a6
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006f8:	2a610157          	vor.vv	v2,v6,v2
    800006fc:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000700:	02428257          	vadd.vv	v4,v4,v5
    80000704:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000708:	2a1100d7          	vor.vv	v1,v1,v2
    8000070c:	020770a7          	vse64.v	v1,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000710:	972a                	add	a4,a4,a0
    80000712:	fedd                	bnez	a3,800006d0 <hspt_init+0xf0>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000714:	0003a717          	auipc	a4,0x3a
    80000718:	23473703          	ld	a4,564(a4) # 8003a948 <test_page_perm_table+0x1ff0>
        addr += PAGE_SIZE;
    }


    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    8000071c:	0003a797          	auipc	a5,0x3a
    80000720:	2407a783          	lw	a5,576(a5) # 8003a95c <curr_priv>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000724:	220806b7          	lui	a3,0x22080
    80000728:	cc068693          	addi	a3,a3,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    8000072c:	8f55                	or	a4,a4,a3
    8000072e:	00054697          	auipc	a3,0x54
    80000732:	8ce6b523          	sd	a4,-1846(a3) # 80053ff8 <hspt+0x4ff8>
    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000736:	37f5                	addiw	a5,a5,-3
    80000738:	4705                	li	a4,1
    8000073a:	00f76a63          	bltu	a4,a5,8000074e <hspt_init+0x16e>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x9ULL << 60);
    8000073e:	5765                	li	a4,-7
    80000740:	00c8d793          	srli	a5,a7,0xc
    80000744:	1772                	slli	a4,a4,0x3c
    80000746:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000748:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    8000074c:	8082                	ret
void hspt_init(){
    8000074e:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000750:	0002d517          	auipc	a0,0x2d
    80000754:	d8850513          	addi	a0,a0,-632 # 8002d4d8 <__func__.0+0x420>
void hspt_init(){
    80000758:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000075a:	6fc2a0ef          	jal	8002ae56 <printf>
    8000075e:	18b00613          	li	a2,395
    80000762:	0002b597          	auipc	a1,0x2b
    80000766:	b4e58593          	addi	a1,a1,-1202 # 8002b2b0 <__func__.2>
    8000076a:	0002d517          	auipc	a0,0x2d
    8000076e:	db650513          	addi	a0,a0,-586 # 8002d520 <__func__.0+0x468>
    80000772:	6e42a0ef          	jal	8002ae56 <printf>
    80000776:	4501                	li	a0,0
    80000778:	2942a0ef          	jal	8002aa0c <exit>

000000008000077c <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    vspt[1][4] = 
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000077c:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000780:	0004a797          	auipc	a5,0x4a
    80000784:	88078793          	addi	a5,a5,-1920 # 8004a000 <vspt+0x2000>
    80000788:	5e07c0d7          	vmv.v.x	v1,a5
void vspt_init(){
    8000078c:	1101                	addi	sp,sp,-32
    8000078e:	e822                	sd	s0,16(sp)
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000790:	0004b417          	auipc	s0,0x4b
    80000794:	87040413          	addi	s0,s0,-1936 # 8004b000 <vspt+0x3000>
    80000798:	3e1460d7          	vslide1down.vx	v1,v1,s0
        vspt[1][i] = 
    8000079c:	5208a157          	vid.v	v2
    800007a0:	0cf00713          	li	a4,207
    800007a4:	962e3157          	vsll.vi	v2,v2,28
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007a8:	a21130d7          	vsrl.vi	v1,v1,2
        vspt[1][i] = 
    800007ac:	200007b7          	lui	a5,0x20000
    800007b0:	97ba                	add	a5,a5,a4
    800007b2:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007b6:	2a10b0d7          	vor.vi	v1,v1,1
        vspt[1][i] = 
    800007ba:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007be:	00049717          	auipc	a4,0x49
    800007c2:	84270713          	addi	a4,a4,-1982 # 80049000 <vspt+0x1000>
    vspt[1][5] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    vspt[1][6] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007c6:	0004c517          	auipc	a0,0x4c
    800007ca:	83a50513          	addi	a0,a0,-1990 # 8004c000 <vspt+0x4000>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ce:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007d2:	00255693          	srli	a3,a0,0x2
void vspt_init(){
    800007d6:	e426                	sd	s1,8(sp)
    800007d8:	ec06                	sd	ra,24(sp)
    vspt[1][4] = 
    800007da:	00049897          	auipc	a7,0x49
    800007de:	84688893          	addi	a7,a7,-1978 # 80049020 <vspt+0x1020>
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007e2:	0016e693          	ori	a3,a3,1
        vspt[1][i] = 
    800007e6:	00049817          	auipc	a6,0x49
    800007ea:	82a80813          	addi	a6,a6,-2006 # 80049010 <vspt+0x1010>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ee:	0017e793          	ori	a5,a5,1
    vspt[0][0] = 
    800007f2:	00048497          	auipc	s1,0x48
    800007f6:	80e48493          	addi	s1,s1,-2034 # 80048000 <vspt>
    
    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    800007fa:	6605                	lui	a2,0x1
    800007fc:	4581                	li	a1,0
        vspt[1][i] = 
    800007fe:	020771a7          	vse64.v	v3,(a4)
    80000802:	02087127          	vse64.v	v2,(a6)
    vspt[1][6] = 
    80000806:	fb14                	sd	a3,48(a4)
    vspt[1][4] = 
    80000808:	0208f0a7          	vse64.v	v1,(a7)
    vspt[0][0] = 
    8000080c:	e09c                	sd	a5,0(s1)
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    8000080e:	74c2a0ef          	jal	8002af5a <memset>
    80000812:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000816:	5208a157          	vid.v	v2
    8000081a:	4705                	li	a4,1
    8000081c:	962ab157          	vsll.vi	v2,v2,21
    80000820:	1702                	slli	a4,a4,0x20
    80000822:	0cf00693          	li	a3,207
    80000826:	02274157          	vadd.vx	v2,v2,a4
    8000082a:	5e06c2d7          	vmv.v.x	v5,a3
    8000082e:	8722                	mv	a4,s0
    80000830:	20000693          	li	a3,512
    80000834:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }

    addr = 4 * SUPERPAGE_SIZE(1);                                        
    for(int i = 0; i < 512; i++){
        vspt[3][i] = (addr >> 2) |
    80000838:	a22130d7          	vsrl.vi	v1,v2,2
    8000083c:	01579613          	slli	a2,a5,0x15
    80000840:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000844:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_AD | PTE_RWX;  
    80000848:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    8000084c:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000850:	00379613          	slli	a2,a5,0x3
    80000854:	8e9d                	sub	a3,a3,a5
        vspt[3][i] = (addr >> 2) |
    80000856:	020770a7          	vse64.v	v1,(a4)
    8000085a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000085e:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000862:	9732                	add	a4,a4,a2
    80000864:	fae1                	bnez	a3,80000834 <vspt_init+0xb8>
        addr +=  SUPERPAGE_SIZE(2);
    }  

    vspt[2][0] = 
    80000866:	5208a257          	vid.v	v4
    8000086a:	4605                	li	a2,1
    8000086c:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000870:	0004c717          	auipc	a4,0x4c
    80000874:	79070713          	addi	a4,a4,1936 # 8004d000 <vspt+0x5000>
    vspt[2][0] = 
    80000878:	1602                	slli	a2,a2,0x20
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    8000087a:	00275793          	srli	a5,a4,0x2
    vspt[2][0] = 
    8000087e:	02464257          	vadd.vx	v4,v4,a2
    80000882:	0c000593          	li	a1,192
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000886:	0017e793          	ori	a5,a5,1
    vspt[2][0] = 
    8000088a:	00049317          	auipc	t1,0x49
    8000088e:	77630313          	addi	t1,t1,1910 # 8004a000 <vspt+0x2000>
    80000892:	5e05c3d7          	vmv.v.x	v7,a1
    80000896:	00f33023          	sd	a5,0(t1)
    8000089a:	1ff00693          	li	a3,511
    8000089e:	00038597          	auipc	a1,0x38
    800008a2:	0ba58593          	addi	a1,a1,186 # 80038958 <test_page_perm_table>
    800008a6:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        vspt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800008aa:	2205f107          	vlseg2e64.v	v2,(a1)
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ae:	a24130d7          	vsrl.vi	v1,v4,2
    800008b2:	00c79513          	slli	a0,a5,0xc
    800008b6:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008ba:	5e054357          	vmv.v.x	v6,a0
    800008be:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c2:	00479813          	slli	a6,a5,0x4
    800008c6:	00379513          	slli	a0,a5,0x3
    800008ca:	8e9d                	sub	a3,a3,a5
    800008cc:	95c2                	add	a1,a1,a6
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ce:	2a710157          	vor.vv	v2,v7,v2
    800008d2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008d6:	02430257          	vadd.vv	v4,v4,v6
    800008da:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800008de:	2a208157          	vor.vv	v2,v2,v1
    800008e2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e6:	972a                	add	a4,a4,a0
    800008e8:	fedd                	bnez	a3,800008a6 <vspt_init+0x12a>
        addr +=  PAGE_SIZE;
    }

    vspt[2][1] = 
    800008ea:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    800008ee:	5208a157          	vid.v	v2
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008f2:	0003a697          	auipc	a3,0x3a
    800008f6:	0566b683          	ld	a3,86(a3) # 8003a948 <test_page_perm_table+0x1ff0>
    vspt[2][1] = 
    800008fa:	96263157          	vsll.vi	v2,v2,12
    800008fe:	008015b7          	lui	a1,0x801
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000902:	0004d717          	auipc	a4,0x4d
    80000906:	6fe70713          	addi	a4,a4,1790 # 8004e000 <vspt+0x6000>
    8000090a:	40080637          	lui	a2,0x40080
    vspt[2][1] = 
    8000090e:	05a6                	slli	a1,a1,0x9
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000910:	cc060613          	addi	a2,a2,-832 # 4007fcc0 <STACK_SIZE+0x3ff7fcc0>
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    80000914:	00275793          	srli	a5,a4,0x2
    vspt[2][1] = 
    80000918:	0225c157          	vadd.vx	v2,v2,a1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000091c:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    8000091e:	0017e793          	ori	a5,a5,1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000922:	fed73c23          	sd	a3,-8(a4)
    vspt[2][1] = 
    80000926:	00f33423          	sd	a5,8(t1)
    8000092a:	20000693          	li	a3,512
    8000092e:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = 4 * SUPERPAGE_SIZE(1) + SUPERPAGE_SIZE(2);
    for(int i = 0; i < 512; i++){
        vspt[6][i] = (addr >> 2) | 
    80000932:	a22130d7          	vsrl.vi	v1,v2,2
    80000936:	00c79613          	slli	a2,a5,0xc
    8000093a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000093e:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_AD | PTE_RWX; 
    80000942:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000946:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    8000094a:	00379613          	slli	a2,a5,0x3
    8000094e:	8e9d                	sub	a3,a3,a5
        vspt[6][i] = (addr >> 2) | 
    80000950:	020770a7          	vse64.v	v1,(a4)
    80000954:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000958:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    8000095c:	9732                	add	a4,a4,a2
    8000095e:	fae1                	bnez	a3,8000092e <vspt_init+0x1b2>
        addr +=  PAGE_SIZE;
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    if(curr_priv == PRIV_VS){
    80000960:	0003a717          	auipc	a4,0x3a
    80000964:	ffc72703          	lw	a4,-4(a4) # 8003a95c <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000968:	57e5                	li	a5,-7
    8000096a:	80b1                	srli	s1,s1,0xc
    8000096c:	17f2                	slli	a5,a5,0x3c
    if(curr_priv == PRIV_VS){
    8000096e:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000970:	8cdd                	or	s1,s1,a5
    if(curr_priv == PRIV_VS){
    80000972:	04d70263          	beq	a4,a3,800009b6 <vspt_init+0x23a>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000976:	3775                	addiw	a4,a4,-3
    80000978:	4785                	li	a5,1
    8000097a:	00e7e963          	bltu	a5,a4,8000098c <vspt_init+0x210>
        CSRW(CSR_VSATP, satp);
    8000097e:	28049073          	csrw	vsatp,s1
    } else {
        ERROR("");
    }

}
    80000982:	60e2                	ld	ra,24(sp)
    80000984:	6442                	ld	s0,16(sp)
    80000986:	64a2                	ld	s1,8(sp)
    80000988:	6105                	addi	sp,sp,32
    8000098a:	8082                	ret
        ERROR("");
    8000098c:	0002d517          	auipc	a0,0x2d
    80000990:	ba450513          	addi	a0,a0,-1116 # 8002d530 <__func__.0+0x478>
    80000994:	4c22a0ef          	jal	8002ae56 <printf>
    80000998:	1cf00613          	li	a2,463
    8000099c:	0002b597          	auipc	a1,0x2b
    800009a0:	92458593          	addi	a1,a1,-1756 # 8002b2c0 <__func__.1>
    800009a4:	0002d517          	auipc	a0,0x2d
    800009a8:	b7c50513          	addi	a0,a0,-1156 # 8002d520 <__func__.0+0x468>
    800009ac:	4aa2a0ef          	jal	8002ae56 <printf>
    800009b0:	4501                	li	a0,0
    800009b2:	05a2a0ef          	jal	8002aa0c <exit>
        CSRW(satp, satp);
    800009b6:	18049073          	csrw	satp,s1
}
    800009ba:	60e2                	ld	ra,24(sp)
    800009bc:	6442                	ld	s0,16(sp)
    800009be:	64a2                	ld	s1,8(sp)
    800009c0:	6105                	addi	sp,sp,32
    800009c2:	8082                	ret

00000000800009c4 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[7][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    800009c4:	1101                	addi	sp,sp,-32
    800009c6:	e822                	sd	s0,16(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    800009c8:	00043417          	auipc	s0,0x43
    800009cc:	63840413          	addi	s0,s0,1592 # 80044000 <hpt_root>
    800009d0:	6611                	lui	a2,0x4
    800009d2:	4581                	li	a1,0
    800009d4:	8522                	mv	a0,s0
void hpt_init(){
    800009d6:	ec06                	sd	ra,24(sp)
    800009d8:	e426                	sd	s1,8(sp)
        hpt_root[i] = 0;
    800009da:	5802a0ef          	jal	8002af5a <memset>

    hpt[1][4] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    hpt[0][0] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009de:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800009e2:	0003e797          	auipc	a5,0x3e
    800009e6:	61e78793          	addi	a5,a5,1566 # 8003f000 <hpt+0x3000>
    800009ea:	5e07c0d7          	vmv.v.x	v1,a5
    800009ee:	0003f797          	auipc	a5,0x3f
    800009f2:	61278793          	addi	a5,a5,1554 # 80040000 <hpt+0x4000>
        hpt[1][i] = 
    800009f6:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009fa:	3e17e0d7          	vslide1down.vx	v1,v1,a5
        hpt[1][i] = 
    800009fe:	962e3157          	vsll.vi	v2,v2,28
    80000a02:	0df00713          	li	a4,223
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a06:	a21130d7          	vsrl.vi	v1,v1,2
        hpt[1][i] = 
    80000a0a:	200007b7          	lui	a5,0x20000
    80000a0e:	97ba                	add	a5,a5,a4
    80000a10:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a14:	0003b897          	auipc	a7,0x3b
    80000a18:	5ec88893          	addi	a7,a7,1516 # 8003c000 <hpt>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a1c:	0003c717          	auipc	a4,0x3c
    80000a20:	5e470713          	addi	a4,a4,1508 # 8003d000 <hpt+0x1000>
        hpt[1][i] = 
    80000a24:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a28:	2a10b0d7          	vor.vi	v1,v1,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a2c:	0003d497          	auipc	s1,0x3d
    80000a30:	5d448493          	addi	s1,s1,1492 # 8003e000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a34:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a38:	0028d813          	srli	a6,a7,0x2
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a3c:	0024d693          	srli	a3,s1,0x2
    80000a40:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a44:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a48:	00186813          	ori	a6,a6,1
        hpt[1][i] = 
    80000a4c:	0003c317          	auipc	t1,0x3c
    80000a50:	5c430313          	addi	t1,t1,1476 # 8003d010 <hpt+0x1010>

    hpt[0][1] = 
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a54:	6605                	lui	a2,0x1
    80000a56:	4581                	li	a1,0
    80000a58:	0003e517          	auipc	a0,0x3e
    80000a5c:	5a850513          	addi	a0,a0,1448 # 8003f000 <hpt+0x3000>
        hpt[1][i] = 
    80000a60:	020771a7          	vse64.v	v3,(a4)
    hpt[1][4] = 
    80000a64:	f314                	sd	a3,32(a4)
        hpt[1][i] = 
    80000a66:	02037127          	vse64.v	v2,(t1)
    hpt[0][0] = 
    80000a6a:	0208f0a7          	vse64.v	v1,(a7)
    hpt_root[2047] =
    80000a6e:	00047717          	auipc	a4,0x47
    80000a72:	58f73523          	sd	a5,1418(a4) # 80047ff8 <hpt_root+0x3ff8>
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(1)] =
    80000a76:	01043823          	sd	a6,16(s0)
    hpt_root[0] =
    80000a7a:	e01c                	sd	a5,0(s0)
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a7c:	4de2a0ef          	jal	8002af5a <memset>
    80000a80:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000a84:	5208a157          	vid.v	v2
    80000a88:	4705                	li	a4,1
    80000a8a:	962ab157          	vsll.vi	v2,v2,21
    80000a8e:	077e                	slli	a4,a4,0x1f
    80000a90:	0df00693          	li	a3,223
    80000a94:	0003e517          	auipc	a0,0x3e
    80000a98:	56c50513          	addi	a0,a0,1388 # 8003f000 <hpt+0x3000>
    80000a9c:	02274157          	vadd.vx	v2,v2,a4
    80000aa0:	5e06c2d7          	vmv.v.x	v5,a3
    80000aa4:	04000713          	li	a4,64
    80000aa8:	86aa                	mv	a3,a0
    80000aaa:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
        hpt[3][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000aae:	a22130d7          	vsrl.vi	v1,v2,2
    80000ab2:	01579613          	slli	a2,a5,0x15
    80000ab6:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000aba:	5e0641d7          	vmv.v.x	v3,a2
    80000abe:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000ac2:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ac6:	00379613          	slli	a2,a5,0x3
    80000aca:	8f1d                	sub	a4,a4,a5
        hpt[3][i] = 
    80000acc:	0206f0a7          	vse64.v	v1,(a3)
    80000ad0:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000ad4:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ad8:	96b2                	add	a3,a3,a2
    80000ada:	fb61                	bnez	a4,80000aaa <hpt_init+0xe6>
    80000adc:	5208a157          	vid.v	v2
    80000ae0:	47c5                	li	a5,17
    80000ae2:	962ab157          	vsll.vi	v2,v2,21
    80000ae6:	07ee                	slli	a5,a5,0x1b
    80000ae8:	20000693          	li	a3,512
    80000aec:	0227c157          	vadd.vx	v2,v2,a5
    80000af0:	0003f717          	auipc	a4,0x3f
    80000af4:	51070713          	addi	a4,a4,1296 # 80040000 <hpt+0x4000>
    80000af8:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }    

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[4][i] = (addr >> 2) |
    80000afc:	a22130d7          	vsrl.vi	v1,v2,2
    80000b00:	01579613          	slli	a2,a5,0x15
    80000b04:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b08:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000b0c:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b10:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b14:	00379613          	slli	a2,a5,0x3
    80000b18:	8e9d                	sub	a3,a3,a5
        hpt[4][i] = (addr >> 2) |
    80000b1a:	020770a7          	vse64.v	v1,(a4)
    80000b1e:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b22:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b26:	9732                	add	a4,a4,a2
    80000b28:	fae1                	bnez	a3,80000af8 <hpt_init+0x134>
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][1] = 
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][511] = 
    80000b2a:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b2e:	00040717          	auipc	a4,0x40
    80000b32:	4d270713          	addi	a4,a4,1234 # 80041000 <hpt+0x5000>
    hpt[2][511] = 
    80000b36:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b3a:	00041317          	auipc	t1,0x41
    80000b3e:	4c630313          	addi	t1,t1,1222 # 80042000 <hpt+0x6000>
    80000b42:	0c000813          	li	a6,192
    hpt[2][511] = 
    80000b46:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b48:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b4c:	00235693          	srli	a3,t1,0x2
    80000b50:	5e0843d7          	vmv.v.x	v7,a6
    hpt[2][511] = 
    80000b54:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b56:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b5a:	0016e693          	ori	a3,a3,1
    hpt[2][511] = 
    80000b5e:	0245c257          	vadd.vx	v4,v4,a1
    80000b62:	fed53c23          	sd	a3,-8(a0)
    hpt[2][0] = 
    80000b66:	e09c                	sd	a5,0(s1)
    hpt[2][1] = 
    80000b68:	e49c                	sd	a5,8(s1)
    hpt[2][511] = 
    80000b6a:	1ff00693          	li	a3,511
    80000b6e:	00038597          	auipc	a1,0x38
    80000b72:	df258593          	addi	a1,a1,-526 # 80038960 <test_page_perm_table+0x8>
    80000b76:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hpt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
    80000b7a:	2205f107          	vlseg2e64.v	v2,(a1)
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b7e:	a24130d7          	vsrl.vi	v1,v4,2
    80000b82:	00c79513          	slli	a0,a5,0xc
    80000b86:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000b8a:	5e054357          	vmv.v.x	v6,a0
    80000b8e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000b92:	00479813          	slli	a6,a5,0x4
    80000b96:	00379513          	slli	a0,a5,0x3
    80000b9a:	8e9d                	sub	a3,a3,a5
    80000b9c:	95c2                	add	a1,a1,a6
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b9e:	2a710157          	vor.vv	v2,v7,v2
    80000ba2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000ba6:	02430257          	vadd.vv	v4,v4,v6
    80000baa:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000bae:	2a208157          	vor.vv	v2,v2,v1
    80000bb2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000bb6:	972a                	add	a4,a4,a0
    80000bb8:	fedd                	bnez	a3,80000b76 <hpt_init+0x1b2>
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000bba:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000bbe:	5208a157          	vid.v	v2
    80000bc2:	0003a797          	auipc	a5,0x3a
    80000bc6:	d8e7b783          	ld	a5,-626(a5) # 8003a950 <test_page_perm_table+0x1ff8>
    80000bca:	96263157          	vsll.vi	v2,v2,12
    80000bce:	22080737          	lui	a4,0x22080
    80000bd2:	cc070713          	addi	a4,a4,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    80000bd6:	46c5                	li	a3,17
    80000bd8:	06ee                	slli	a3,a3,0x1b
    80000bda:	8fd9                	or	a5,a5,a4
    80000bdc:	0226c157          	vadd.vx	v2,v2,a3
    80000be0:	fef33c23          	sd	a5,-8(t1)
    80000be4:	20000693          	li	a3,512
    80000be8:	00041717          	auipc	a4,0x41
    80000bec:	41870713          	addi	a4,a4,1048 # 80042000 <hpt+0x6000>
    80000bf0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  PAGE_SIZE;
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[6][i] = (addr >> 2) | 
    80000bf4:	a22130d7          	vsrl.vi	v1,v2,2
    80000bf8:	00c79613          	slli	a2,a5,0xc
    80000bfc:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c00:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000c04:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000c08:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000c0c:	00379613          	slli	a2,a5,0x3
    80000c10:	8e9d                	sub	a3,a3,a5
        hpt[6][i] = (addr >> 2) | 
    80000c12:	020770a7          	vse64.v	v1,(a4)
    80000c16:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c1a:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000c1e:	9732                	add	a4,a4,a2
    80000c20:	fae1                	bnez	a3,80000bf0 <hpt_init+0x22c>
        addr +=  PAGE_SIZE;
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000c22:	0003a797          	auipc	a5,0x3a
    80000c26:	d3a7a783          	lw	a5,-710(a5) # 8003a95c <curr_priv>
    80000c2a:	4705                	li	a4,1
    80000c2c:	37f5                	addiw	a5,a5,-3
    80000c2e:	00f76e63          	bltu	a4,a5,80000c4a <hpt_init+0x286>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x9ULL << 60);
    80000c32:	5765                	li	a4,-7
    80000c34:	00c45793          	srli	a5,s0,0xc
    80000c38:	1772                	slli	a4,a4,0x3c
    80000c3a:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000c3c:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }

}
    80000c40:	60e2                	ld	ra,24(sp)
    80000c42:	6442                	ld	s0,16(sp)
    80000c44:	64a2                	ld	s1,8(sp)
    80000c46:	6105                	addi	sp,sp,32
    80000c48:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000c4a:	0002d517          	auipc	a0,0x2d
    80000c4e:	8fe50513          	addi	a0,a0,-1794 # 8002d548 <__func__.0+0x490>
    80000c52:	2042a0ef          	jal	8002ae56 <printf>
    80000c56:	22200613          	li	a2,546
    80000c5a:	0002a597          	auipc	a1,0x2a
    80000c5e:	67658593          	addi	a1,a1,1654 # 8002b2d0 <__func__.0>
    80000c62:	0002d517          	auipc	a0,0x2d
    80000c66:	8be50513          	addi	a0,a0,-1858 # 8002d520 <__func__.0+0x468>
    80000c6a:	1ec2a0ef          	jal	8002ae56 <printf>
    80000c6e:	4501                	li	a0,0
    80000c70:	59d290ef          	jal	8002aa0c <exit>

0000000080000c74 <page_table_add_vs_AD>:

#endif

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c74:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c78:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c7c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c80:	00038617          	auipc	a2,0x38
    80000c84:	cd860613          	addi	a2,a2,-808 # 80038958 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    80000c88:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8a:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    80000c8c:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8e:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000c90:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000c92:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000c94:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    80000c96:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c98:	40050593          	addi	a1,a0,1024
    80000c9c:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c9e:	8309                	srli	a4,a4,0x2
    80000ca0:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca4:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca6:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca8:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000caa:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cac:	0004e617          	auipc	a2,0x4e
    80000cb0:	35460613          	addi	a2,a2,852 # 8004f000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb4:	00047697          	auipc	a3,0x47
    80000cb8:	34c68693          	addi	a3,a3,844 # 80048000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cbc:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc0:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc4:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc6:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc8:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cca:	e298                	sd	a4,0(a3)
}
    80000ccc:	8082                	ret

0000000080000cce <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000cce:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cd2:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000cd6:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cda:	00038617          	auipc	a2,0x38
    80000cde:	c7e60613          	addi	a2,a2,-898 # 80038958 <test_page_perm_table>
    80000ce2:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000ce4:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000ce6:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000ce8:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000cec:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000cee:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000cf0:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf2:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000cf6:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf8:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfc:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfe:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d00:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d02:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d04:	0004e617          	auipc	a2,0x4e
    80000d08:	2fc60613          	addi	a2,a2,764 # 8004f000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0c:	00047697          	auipc	a3,0x47
    80000d10:	2f468693          	addi	a3,a3,756 # 80048000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d14:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d18:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1c:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1e:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d20:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d22:	e298                	sd	a4,0(a3)
}
    80000d24:	8082                	ret

0000000080000d26 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000d26:	00c5171b          	slliw	a4,a0,0xc
    80000d2a:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d2e:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000d32:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d34:	00038717          	auipc	a4,0x38
    80000d38:	c2470713          	addi	a4,a4,-988 # 80038958 <test_page_perm_table>
    80000d3c:	9736                	add	a4,a4,a3
    80000d3e:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000d40:	1782                	slli	a5,a5,0x20
    80000d42:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d44:	40050513          	addi	a0,a0,1024
    80000d48:	8389                	srli	a5,a5,0x2
    80000d4a:	050e                	slli	a0,a0,0x3
    80000d4c:	0004e717          	auipc	a4,0x4e
    80000d50:	2b470713          	addi	a4,a4,692 # 8004f000 <hspt>
    80000d54:	8fd5                	or	a5,a5,a3
    80000d56:	972a                	add	a4,a4,a0
    80000d58:	e31c                	sd	a5,0(a4)
}
    80000d5a:	8082                	ret

0000000080000d5c <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000d5c:	00c5171b          	slliw	a4,a0,0xc
    80000d60:	880007b7          	lui	a5,0x88000
    80000d64:	00451693          	slli	a3,a0,0x4
    80000d68:	9fb9                	addw	a5,a5,a4
    80000d6a:	00038717          	auipc	a4,0x38
    80000d6e:	bee70713          	addi	a4,a4,-1042 # 80038958 <test_page_perm_table>
    80000d72:	9736                	add	a4,a4,a3
    80000d74:	6714                	ld	a3,8(a4)
    80000d76:	1782                	slli	a5,a5,0x20
    80000d78:	9381                	srli	a5,a5,0x20
    80000d7a:	40050513          	addi	a0,a0,1024
    80000d7e:	8389                	srli	a5,a5,0x2
    80000d80:	050e                	slli	a0,a0,0x3
    80000d82:	0004e717          	auipc	a4,0x4e
    80000d86:	27e70713          	addi	a4,a4,638 # 8004f000 <hspt>
    80000d8a:	8fd5                	or	a5,a5,a3
    80000d8c:	972a                	add	a4,a4,a0
    80000d8e:	e31c                	sd	a5,0(a4)
    80000d90:	8082                	ret

0000000080000d92 <hspt_switch>:
    addr = 0x88000000 + i*0x1000;
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    80000d92:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000d96:	00050797          	auipc	a5,0x50
    80000d9a:	5ca78793          	addi	a5,a5,1482 # 80051360 <hspt+0x2360>
    80000d9e:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hspt[2][SWITCH1];
    80000da2:	5208a0d7          	vid.v	v1
    80000da6:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000daa:	32308157          	vrgather.vv	v2,v3,v1
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000dae:	0207f127          	vse64.v	v2,(a5)
    hspt[2][SWITCH2] = temp;
}
    80000db2:	8082                	ret

0000000080000db4 <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    80000db4:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000db8:	0004a797          	auipc	a5,0x4a
    80000dbc:	5a878793          	addi	a5,a5,1448 # 8004b360 <vspt+0x3360>
    80000dc0:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = vspt[3][SWITCH1];
    80000dc4:	5208a0d7          	vid.v	v1
    80000dc8:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dcc:	32308157          	vrgather.vv	v2,v3,v1
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000dd0:	0207f127          	vse64.v	v2,(a5)
    vspt[3][SWITCH2] = temp;
}
    80000dd4:	8082                	ret

0000000080000dd6 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    80000dd6:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000dda:	0003d797          	auipc	a5,0x3d
    80000dde:	58678793          	addi	a5,a5,1414 # 8003e360 <hpt+0x2360>
    80000de2:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hpt[2][SWITCH1];
    80000de6:	5208a0d7          	vid.v	v1
    80000dea:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dee:	32308157          	vrgather.vv	v2,v3,v1
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000df2:	0207f127          	vse64.v	v2,(a5)
    hpt[2][SWITCH2] = temp;
}
    80000df6:	8082                	ret

0000000080000df8 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000df8:	00053797          	auipc	a5,0x53
    80000dfc:	20878793          	addi	a5,a5,520 # 80054000 <ecall_args>
    80000e00:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000e02:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000e04:	00000073          	ecall
    return ecall_args[0];

}
    80000e08:	6388                	ld	a0,0(a5)
    80000e0a:	8082                	ret

0000000080000e0c <test_setup_except_function>:

//v扩展时防止被编译成向量指令干扰测试环境
#ifdef __riscv_vector
__attribute__((target("arch=rv64imac_zicsr")))
void test_setup_except_function() {
    __sync_synchronize();
    80000e0c:	0330000f          	fence	rw,rw
    excpt.testing = true;
    80000e10:	00053797          	auipc	a5,0x53
    80000e14:	1f078793          	addi	a5,a5,496 # 80054000 <ecall_args>
    80000e18:	4705                	li	a4,1
    excpt.triggered = false;
    excpt.fault_inst = 0;
    80000e1a:	0407b423          	sd	zero,72(a5)
    excpt.testing = true;
    80000e1e:	00e79823          	sh	a4,16(a5)
    __sync_synchronize();
    80000e22:	0330000f          	fence	rw,rw
    DEBUG("setting up exception test");
}
    80000e26:	8082                	ret

0000000080000e28 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000e28:	0003a797          	auipc	a5,0x3a
    80000e2c:	b347a783          	lw	a5,-1228(a5) # 8003a95c <curr_priv>
    80000e30:	470d                	li	a4,3
    80000e32:	06e78963          	beq	a5,a4,80000ea4 <set_prev_priv+0x7c>
    80000e36:	4711                	li	a4,4
    80000e38:	04e78163          	beq	a5,a4,80000e7a <set_prev_priv+0x52>
    80000e3c:	4709                	li	a4,2
    80000e3e:	08e78863          	beq	a5,a4,80000ece <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000e42:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e44:	85aa                	mv	a1,a0
    80000e46:	0002a617          	auipc	a2,0x2a
    80000e4a:	49a60613          	addi	a2,a2,1178 # 8002b2e0 <__func__.6>
    80000e4e:	0002c517          	auipc	a0,0x2c
    80000e52:	73a50513          	addi	a0,a0,1850 # 8002d588 <__func__.0+0x4d0>
void set_prev_priv(int priv){
    80000e56:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e58:	7ff290ef          	jal	8002ae56 <printf>
    80000e5c:	04b00613          	li	a2,75
    80000e60:	0002a597          	auipc	a1,0x2a
    80000e64:	48058593          	addi	a1,a1,1152 # 8002b2e0 <__func__.6>
    80000e68:	0002c517          	auipc	a0,0x2c
    80000e6c:	6b850513          	addi	a0,a0,1720 # 8002d520 <__func__.0+0x468>
    80000e70:	7e7290ef          	jal	8002ae56 <printf>
    80000e74:	4501                	li	a0,0
    80000e76:	397290ef          	jal	8002aa0c <exit>
            uint64_t temp = CSRR(mstatus);
    80000e7a:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e7e:	fc0007b7          	lui	a5,0xfc000
    80000e82:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000e84:	07b6                	slli	a5,a5,0xd
    80000e86:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e8a:	ffe5069b          	addiw	a3,a0,-2
    80000e8e:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e90:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e92:	06d67363          	bgeu	a2,a3,80000ef8 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000e96:	e501                	bnez	a0,80000e9e <set_prev_priv+0x76>
    80000e98:	4705                	li	a4,1
    80000e9a:	171e                	slli	a4,a4,0x27
    80000e9c:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000e9e:	30079073          	csrw	mstatus,a5
        break;
    80000ea2:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ea4:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ea8:	4705                	li	a4,1
    80000eaa:	ffe5069b          	addiw	a3,a0,-2
    80000eae:	02d77763          	bgeu	a4,a3,80000edc <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000eb2:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000eb6:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000eba:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000ebe:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ec2:	e119                	bnez	a0,80000ec8 <set_prev_priv+0xa0>
    80000ec4:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000ec8:	60079073          	csrw	hstatus,a5
        break;
    80000ecc:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ece:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000ed2:	10000793          	li	a5,256
    80000ed6:	1007b073          	csrc	sstatus,a5
        break;
    80000eda:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000edc:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000ee0:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ee4:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ee8:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000eea:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000eee:	fce51de3          	bne	a0,a4,80000ec8 <set_prev_priv+0xa0>
    80000ef2:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ef6:	b7f9                	j	80000ec4 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ef8:	6705                	lui	a4,0x1
    80000efa:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000efe:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000f00:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000f02:	f8d50be3          	beq	a0,a3,80000e98 <set_prev_priv+0x70>
    80000f06:	bf61                	j	80000e9e <set_prev_priv+0x76>

0000000080000f08 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000f08:	1101                	addi	sp,sp,-32
    80000f0a:	e822                	sd	s0,16(sp)
    80000f0c:	ec06                	sd	ra,24(sp)
    80000f0e:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f10:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000f12:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f14:	02a7f963          	bgeu	a5,a0,80000f46 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f18:	0003a797          	auipc	a5,0x3a
    80000f1c:	a407a783          	lw	a5,-1472(a5) # 8003a958 <real_priv>
    80000f20:	0003a497          	auipc	s1,0x3a
    80000f24:	a3c48493          	addi	s1,s1,-1476 # 8003a95c <curr_priv>
    80000f28:	00a78963          	beq	a5,a0,80000f3a <goto_priv+0x32>
    80000f2c:	4791                	li	a5,4
    80000f2e:	0003a497          	auipc	s1,0x3a
    80000f32:	a2e48493          	addi	s1,s1,-1490 # 8003a95c <curr_priv>
    80000f36:	06a7d363          	bge	a5,a0,80000f9c <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000f3a:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000f3c:	60e2                	ld	ra,24(sp)
    80000f3e:	6442                	ld	s0,16(sp)
    80000f40:	64a2                	ld	s1,8(sp)
    80000f42:	6105                	addi	sp,sp,32
    80000f44:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f46:	0003a717          	auipc	a4,0x3a
    80000f4a:	a1672703          	lw	a4,-1514(a4) # 8003a95c <curr_priv>
    80000f4e:	0003a497          	auipc	s1,0x3a
    80000f52:	a0e48493          	addi	s1,s1,-1522 # 8003a95c <curr_priv>
    80000f56:	0ae7f863          	bgeu	a5,a4,80001006 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f5a:	0003a797          	auipc	a5,0x3a
    80000f5e:	9fe7a783          	lw	a5,-1538(a5) # 8003a958 <real_priv>
    80000f62:	fca78ce3          	beq	a5,a0,80000f3a <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000f66:	4789                	li	a5,2
    80000f68:	06f71063          	bne	a4,a5,80000fc8 <goto_priv+0xc0>
    80000f6c:	4785                	li	a5,1
    80000f6e:	04f41d63          	bne	s0,a5,80000fc8 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000f72:	0002c517          	auipc	a0,0x2c
    80000f76:	64650513          	addi	a0,a0,1606 # 8002d5b8 <__func__.0+0x500>
    80000f7a:	6dd290ef          	jal	8002ae56 <printf>
    80000f7e:	05a00613          	li	a2,90
        ERROR("cant lower priv from u");
    80000f82:	0002a597          	auipc	a1,0x2a
    80000f86:	36e58593          	addi	a1,a1,878 # 8002b2f0 <__func__.4>
    80000f8a:	0002c517          	auipc	a0,0x2c
    80000f8e:	59650513          	addi	a0,a0,1430 # 8002d520 <__func__.0+0x468>
    80000f92:	6c5290ef          	jal	8002ae56 <printf>
    80000f96:	4501                	li	a0,0
    80000f98:	275290ef          	jal	8002aa0c <exit>
    if(target_priv > curr_priv){
    80000f9c:	0003a797          	auipc	a5,0x3a
    80000fa0:	9c07a783          	lw	a5,-1600(a5) # 8003a95c <curr_priv>
    80000fa4:	02a7f063          	bgeu	a5,a0,80000fc4 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000fa8:	00053797          	auipc	a5,0x53
    80000fac:	05878793          	addi	a5,a5,88 # 80054000 <ecall_args>
    80000fb0:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000fb2:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000fb4:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000fb6:	00000073          	ecall
}
    80000fba:	60e2                	ld	ra,24(sp)
    80000fbc:	6442                	ld	s0,16(sp)
    80000fbe:	64a2                	ld	s1,8(sp)
    80000fc0:	6105                	addi	sp,sp,32
    80000fc2:	8082                	ret
    if(priv == curr_priv) 
    80000fc4:	f6f50ce3          	beq	a0,a5,80000f3c <goto_priv+0x34>
    set_prev_priv(priv);
    80000fc8:	8522                	mv	a0,s0
    80000fca:	e5fff0ef          	jal	80000e28 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000fce:	0003a797          	auipc	a5,0x3a
    80000fd2:	98e7a783          	lw	a5,-1650(a5) # 8003a95c <curr_priv>
    real_priv = priv;
    80000fd6:	0003a717          	auipc	a4,0x3a
    80000fda:	98872123          	sw	s0,-1662(a4) # 8003a958 <real_priv>
    if(curr_priv == PRIV_M) {
    80000fde:	4711                	li	a4,4
    80000fe0:	04e78e63          	beq	a5,a4,8000103c <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000fe4:	37f9                	addiw	a5,a5,-2
    80000fe6:	4705                	li	a4,1
    80000fe8:	04f76163          	bltu	a4,a5,8000102a <goto_priv+0x122>
        asm volatile(
    80000fec:	00000297          	auipc	t0,0x0
    80000ff0:	01028293          	addi	t0,t0,16 # 80000ffc <goto_priv+0xf4>
    80000ff4:	14129073          	csrw	sepc,t0
    80000ff8:	10200073          	sret
    curr_priv = priv;
    80000ffc:	0003a797          	auipc	a5,0x3a
    80001000:	9687a023          	sw	s0,-1696(a5) # 8003a95c <curr_priv>
    80001004:	bf25                	j	80000f3c <goto_priv+0x34>
        goto_priv(PRIV_M);
    80001006:	4511                	li	a0,4
    80001008:	f01ff0ef          	jal	80000f08 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    8000100c:	0003a797          	auipc	a5,0x3a
    80001010:	94c7a783          	lw	a5,-1716(a5) # 8003a958 <real_priv>
    80001014:	f28783e3          	beq	a5,s0,80000f3a <goto_priv+0x32>
    if(target_priv > curr_priv){
    80001018:	0003a717          	auipc	a4,0x3a
    8000101c:	94472703          	lw	a4,-1724(a4) # 8003a95c <curr_priv>
    80001020:	f88764e3          	bltu	a4,s0,80000fa8 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80001024:	f0870ce3          	beq	a4,s0,80000f3c <goto_priv+0x34>
    80001028:	bf3d                	j	80000f66 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    8000102a:	0002c517          	auipc	a0,0x2c
    8000102e:	5be50513          	addi	a0,a0,1470 # 8002d5e8 <__func__.0+0x530>
    80001032:	625290ef          	jal	8002ae56 <printf>
    80001036:	07200613          	li	a2,114
    8000103a:	b7a1                	j	80000f82 <goto_priv+0x7a>
        asm volatile(
    8000103c:	00000297          	auipc	t0,0x0
    80001040:	01028293          	addi	t0,t0,16 # 8000104c <goto_priv+0x144>
    80001044:	34129073          	csrw	mepc,t0
    80001048:	30200073          	mret
    8000104c:	bf45                	j	80000ffc <goto_priv+0xf4>

000000008000104e <excpt_info>:
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    else return epc + 2;
}

void excpt_info(){
    const char* x = excpt.triggered ? "是" : "否";
    8000104e:	00053797          	auipc	a5,0x53
    80001052:	fc37c783          	lbu	a5,-61(a5) # 80054011 <excpt+0x1>
void excpt_info(){
    80001056:	1141                	addi	sp,sp,-16
    80001058:	e406                	sd	ra,8(sp)
    const char* x = excpt.triggered ? "是" : "否";
    8000105a:	0002c597          	auipc	a1,0x2c
    8000105e:	5b658593          	addi	a1,a1,1462 # 8002d610 <__func__.0+0x558>
    80001062:	e789                	bnez	a5,8000106c <excpt_info+0x1e>
    80001064:	0002c597          	auipc	a1,0x2c
    80001068:	5b458593          	addi	a1,a1,1460 # 8002d618 <__func__.0+0x560>
    printf("异常触发：%s\n",x);
    8000106c:	0002c517          	auipc	a0,0x2c
    80001070:	5b450513          	addi	a0,a0,1460 # 8002d620 <__func__.0+0x568>
    80001074:	5e3290ef          	jal	8002ae56 <printf>
    printf("异常原因：%d\n",excpt.cause);
}
    80001078:	60a2                	ld	ra,8(sp)
    printf("异常原因：%d\n",excpt.cause);
    8000107a:	00053597          	auipc	a1,0x53
    8000107e:	f9e5b583          	ld	a1,-98(a1) # 80054018 <excpt+0x8>
    80001082:	0002c517          	auipc	a0,0x2c
    80001086:	5b650513          	addi	a0,a0,1462 # 8002d638 <__func__.0+0x580>
}
    8000108a:	0141                	addi	sp,sp,16
    printf("异常原因：%d\n",excpt.cause);
    8000108c:	5cb2906f          	j	8002ae56 <printf>

0000000080001090 <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80001090:	715d                	addi	sp,sp,-80
    80001092:	f44e                	sd	s3,40(sp)
    80001094:	e486                	sd	ra,72(sp)
    80001096:	e0a2                	sd	s0,64(sp)
    80001098:	fc26                	sd	s1,56(sp)
    8000109a:	f84a                	sd	s2,48(sp)
    8000109c:	f052                	sd	s4,32(sp)
    8000109e:	ec56                	sd	s5,24(sp)
    800010a0:	e85a                	sd	s6,16(sp)
    800010a2:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    800010a4:	0003a997          	auipc	s3,0x3a
    800010a8:	8b498993          	addi	s3,s3,-1868 # 8003a958 <real_priv>
    800010ac:	4791                	li	a5,4
    800010ae:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    800010b2:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    800010b6:	34102973          	csrr	s2,mepc
    800010ba:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    800010bc:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    800010c0:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    800010c4:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800010c8:	478d                	li	a5,3
    800010ca:	ff848713          	addi	a4,s1,-8
    800010ce:	12e7ef63          	bltu	a5,a4,8000120c <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    800010d2:	00053417          	auipc	s0,0x53
    800010d6:	f2e40413          	addi	s0,s0,-210 # 80054000 <ecall_args>
    800010da:	6018                	ld	a4,0(s0)
    800010dc:	4785                	li	a5,1
    800010de:	1cf70763          	beq	a4,a5,800012ac <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800010e2:	00053797          	auipc	a5,0x53
    800010e6:	f2e7c783          	lbu	a5,-210(a5) # 80054010 <excpt>
    800010ea:	c3cd                	beqz	a5,8000118c <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    800010ec:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    800010ee:	4791                	li	a5,4
    excpt.cause = cause;
    800010f0:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    800010f2:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    800010f6:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    800010fa:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    800010fe:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001102:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80001106:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80001108:	300027f3          	csrr	a5,mstatus
    8000110c:	9399                	srli	a5,a5,0x26
    8000110e:	8ff9                	and	a5,a5,a4
    80001110:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80001114:	300027f3          	csrr	a5,mstatus
    80001118:	939d                	srli	a5,a5,0x27
    8000111a:	8ff9                	and	a5,a5,a4
    8000111c:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001120:	00053797          	auipc	a5,0x53
    80001124:	ee078823          	sb	zero,-272(a5) # 80054010 <excpt>
    if(is_inst_fault(cause)){
    80001128:	47d1                	li	a5,20
    8000112a:	0097ed63          	bltu	a5,s1,80001144 <mhandler+0xb4>
    8000112e:	001017b7          	lui	a5,0x101
    80001132:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001134:	0097d7b3          	srl	a5,a5,s1
    80001138:	8ff9                	and	a5,a5,a4
    8000113a:	c789                	beqz	a5,80001144 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    8000113c:	04843a03          	ld	s4,72(s0)
    80001140:	0e0a0763          	beqz	s4,8000122e <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001144:	0003a797          	auipc	a5,0x3a
    80001148:	8187a783          	lw	a5,-2024(a5) # 8003a95c <curr_priv>
    unsigned temp_priv = real_priv;
    8000114c:	0003a517          	auipc	a0,0x3a
    80001150:	80c52503          	lw	a0,-2036(a0) # 8003a958 <real_priv>
    excpt.fault_inst = 0;
    80001154:	00053717          	auipc	a4,0x53
    80001158:	ee073a23          	sd	zero,-268(a4) # 80054048 <excpt+0x38>
    real_priv = curr_priv;
    8000115c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001160:	478d                	li	a5,3
    80001162:	04f50a63          	beq	a0,a5,800011b6 <mhandler+0x126>
    80001166:	4791                	li	a5,4
    80001168:	0ef50363          	beq	a0,a5,8000124e <mhandler+0x1be>
    8000116c:	4789                	li	a5,2
    8000116e:	06f50263          	beq	a0,a5,800011d2 <mhandler+0x142>
}
    80001172:	60a6                	ld	ra,72(sp)
    80001174:	6406                	ld	s0,64(sp)
    80001176:	1502                	slli	a0,a0,0x20
    80001178:	74e2                	ld	s1,56(sp)
    8000117a:	7942                	ld	s2,48(sp)
    8000117c:	79a2                	ld	s3,40(sp)
    8000117e:	7a02                	ld	s4,32(sp)
    80001180:	6ae2                	ld	s5,24(sp)
    80001182:	6b42                	ld	s6,16(sp)
    80001184:	6ba2                	ld	s7,8(sp)
    80001186:	9101                	srli	a0,a0,0x20
    80001188:	6161                	addi	sp,sp,80
    8000118a:	8082                	ret
        ERROR("untested exception!");
    8000118c:	0002c517          	auipc	a0,0x2c
    80001190:	4c450513          	addi	a0,a0,1220 # 8002d650 <__func__.0+0x598>
    80001194:	4c3290ef          	jal	8002ae56 <printf>
    80001198:	0ec00613          	li	a2,236
            ERROR("instruction fault without return address");
    8000119c:	0002a597          	auipc	a1,0x2a
    800011a0:	16458593          	addi	a1,a1,356 # 8002b300 <__func__.3>
    800011a4:	0002c517          	auipc	a0,0x2c
    800011a8:	37c50513          	addi	a0,a0,892 # 8002d520 <__func__.0+0x468>
    800011ac:	4ab290ef          	jal	8002ae56 <printf>
    800011b0:	4501                	li	a0,0
    800011b2:	05b290ef          	jal	8002aa0c <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011b6:	600026f3          	csrr	a3,hstatus
    800011ba:	00039797          	auipc	a5,0x39
    800011be:	7a27a783          	lw	a5,1954(a5) # 8003a95c <curr_priv>
    800011c2:	0806e713          	ori	a4,a3,128
    800011c6:	9bf5                	andi	a5,a5,-3
    800011c8:	c399                	beqz	a5,800011ce <mhandler+0x13e>
    800011ca:	f7f6f713          	andi	a4,a3,-129
    800011ce:	60071073          	csrw	hstatus,a4
    800011d2:	100027f3          	csrr	a5,sstatus
    800011d6:	00039717          	auipc	a4,0x39
    800011da:	78672703          	lw	a4,1926(a4) # 8003a95c <curr_priv>
    800011de:	4685                	li	a3,1
    800011e0:	edf7f793          	andi	a5,a5,-289
    800011e4:	3779                	addiw	a4,a4,-2
    800011e6:	04e6fd63          	bgeu	a3,a4,80001240 <mhandler+0x1b0>
    800011ea:	10079073          	csrw	sstatus,a5
    800011ee:	f804c2e3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011f2:	000a5783          	lhu	a5,0(s4)
    800011f6:	468d                	li	a3,3
    else return epc + 2;
    800011f8:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fc:	8ff5                	and	a5,a5,a3
    800011fe:	00d79463          	bne	a5,a3,80001206 <mhandler+0x176>
    80001202:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001206:	14171073          	csrw	sepc,a4
    8000120a:	b7a5                	j	80001172 <mhandler+0xe2>
    } else if(!excpt.testing){
    8000120c:	00053797          	auipc	a5,0x53
    80001210:	e047c783          	lbu	a5,-508(a5) # 80054010 <excpt>
    80001214:	dfa5                	beqz	a5,8000118c <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80001216:	0004d763          	bgez	s1,80001224 <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    8000121a:	4785                	li	a5,1
    8000121c:	009797b3          	sll	a5,a5,s1
    80001220:	3447b073          	csrc	mip,a5
    80001224:	00053417          	auipc	s0,0x53
    80001228:	ddc40413          	addi	s0,s0,-548 # 80054000 <ecall_args>
    8000122c:	b5c1                	j	800010ec <mhandler+0x5c>
            ERROR("instruction fault without return address");
    8000122e:	0002c517          	auipc	a0,0x2c
    80001232:	44a50513          	addi	a0,a0,1098 # 8002d678 <__func__.0+0x5c0>
    80001236:	421290ef          	jal	8002ae56 <printf>
    8000123a:	10200613          	li	a2,258
    8000123e:	bfb9                	j	8000119c <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001240:	1007e793          	ori	a5,a5,256
    80001244:	10079073          	csrw	sstatus,a5
    80001248:	fa04d5e3          	bgez	s1,800011f2 <mhandler+0x162>
    8000124c:	b71d                	j	80001172 <mhandler+0xe2>
    8000124e:	30002773          	csrr	a4,mstatus
    80001252:	fc0007b7          	lui	a5,0xfc000
    80001256:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001258:	00039697          	auipc	a3,0x39
    8000125c:	7046a683          	lw	a3,1796(a3) # 8003a95c <curr_priv>
    80001260:	07b6                	slli	a5,a5,0xd
    80001262:	77f78793          	addi	a5,a5,1919
    80001266:	8ff9                	and	a5,a5,a4
    80001268:	04a68663          	beq	a3,a0,800012b4 <mhandler+0x224>
    8000126c:	ffe6871b          	addiw	a4,a3,-2
    80001270:	4605                	li	a2,1
    80001272:	04e66663          	bltu	a2,a4,800012be <mhandler+0x22e>
    80001276:	6705                	lui	a4,0x1
    80001278:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    8000127c:	4609                	li	a2,2
    8000127e:	8fd9                	or	a5,a5,a4
    80001280:	00c69563          	bne	a3,a2,8000128a <mhandler+0x1fa>
    80001284:	4705                	li	a4,1
    80001286:	171e                	slli	a4,a4,0x27
    80001288:	8fd9                	or	a5,a5,a4
    8000128a:	30079073          	csrw	mstatus,a5
    8000128e:	ee04c2e3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001292:	000a5783          	lhu	a5,0(s4)
    80001296:	468d                	li	a3,3
    else return epc + 2;
    80001298:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000129c:	8ff5                	and	a5,a5,a3
    8000129e:	00d79463          	bne	a5,a3,800012a6 <mhandler+0x216>
    800012a2:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012a6:	34171073          	csrw	mepc,a4
    800012aa:	b5e1                	j	80001172 <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    800012ac:	4408                	lw	a0,8(s0)
    800012ae:	c5bff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    800012b2:	bd2d                	j	800010ec <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012b4:	6709                	lui	a4,0x2
    800012b6:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800012ba:	8fd9                	or	a5,a5,a4
    800012bc:	b7f9                	j	8000128a <mhandler+0x1fa>
    800012be:	d2f9                	beqz	a3,80001284 <mhandler+0x1f4>
    800012c0:	b7e9                	j	8000128a <mhandler+0x1fa>

00000000800012c2 <hshandler>:
uint64_t hshandler(){
    800012c2:	715d                	addi	sp,sp,-80
    800012c4:	f44e                	sd	s3,40(sp)
    800012c6:	e486                	sd	ra,72(sp)
    800012c8:	e0a2                	sd	s0,64(sp)
    800012ca:	fc26                	sd	s1,56(sp)
    800012cc:	f84a                	sd	s2,48(sp)
    800012ce:	f052                	sd	s4,32(sp)
    800012d0:	ec56                	sd	s5,24(sp)
    800012d2:	e85a                	sd	s6,16(sp)
    800012d4:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    800012d6:	00039997          	auipc	s3,0x39
    800012da:	68298993          	addi	s3,s3,1666 # 8003a958 <real_priv>
    800012de:	478d                	li	a5,3
    800012e0:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    800012e4:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    800012e8:	14102973          	csrr	s2,sepc
    800012ec:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    800012ee:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    800012f2:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    800012f6:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800012fa:	ff848713          	addi	a4,s1,-8
    800012fe:	02e7ef63          	bltu	a5,a4,8000133c <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80001302:	00053417          	auipc	s0,0x53
    80001306:	cfe40413          	addi	s0,s0,-770 # 80054000 <ecall_args>
    8000130a:	6018                	ld	a4,0(s0)
    8000130c:	4785                	li	a5,1
    8000130e:	14f70063          	beq	a4,a5,8000144e <hshandler+0x18c>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80001312:	0002c517          	auipc	a0,0x2c
    80001316:	3a650513          	addi	a0,a0,934 # 8002d6b8 <__func__.0+0x600>
    8000131a:	33d290ef          	jal	8002ae56 <printf>
    8000131e:	12200613          	li	a2,290
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80001322:	0002a597          	auipc	a1,0x2a
    80001326:	fee58593          	addi	a1,a1,-18 # 8002b310 <__func__.2>
    8000132a:	0002c517          	auipc	a0,0x2c
    8000132e:	1f650513          	addi	a0,a0,502 # 8002d520 <__func__.0+0x468>
    80001332:	325290ef          	jal	8002ae56 <printf>
    80001336:	4501                	li	a0,0
    80001338:	6d4290ef          	jal	8002aa0c <exit>
    } else if(!excpt.testing){
    8000133c:	00053797          	auipc	a5,0x53
    80001340:	cd47c783          	lbu	a5,-812(a5) # 80054010 <excpt>
    80001344:	cfe5                	beqz	a5,8000143c <hshandler+0x17a>
    }
    
    if(cause & (1ULL << 63)){
    80001346:	0004d963          	bgez	s1,80001358 <hshandler+0x96>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    8000134a:	4785                	li	a5,1
    8000134c:	009797b3          	sll	a5,a5,s1
    80001350:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80001354:	6447b073          	csrc	hip,a5
    80001358:	00053417          	auipc	s0,0x53
    8000135c:	ca840413          	addi	s0,s0,-856 # 80054000 <ecall_args>
    }

    excpt.triggered = true;
    80001360:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    80001362:	478d                	li	a5,3
    excpt.cause = cause;
    80001364:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001366:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    8000136a:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    8000136e:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80001372:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001376:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    8000137a:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    8000137c:	600027f3          	csrr	a5,hstatus
    80001380:	8399                	srli	a5,a5,0x6
    80001382:	8ff9                	and	a5,a5,a4
    80001384:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80001388:	600027f3          	csrr	a5,hstatus
    8000138c:	839d                	srli	a5,a5,0x7
    8000138e:	8ff9                	and	a5,a5,a4
    80001390:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001394:	00053797          	auipc	a5,0x53
    80001398:	c6078e23          	sb	zero,-900(a5) # 80054010 <excpt>
    if(is_inst_fault(cause)){
    8000139c:	47d1                	li	a5,20
    8000139e:	0097ed63          	bltu	a5,s1,800013b8 <hshandler+0xf6>
    800013a2:	001017b7          	lui	a5,0x101
    800013a6:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    800013a8:	0097d7b3          	srl	a5,a5,s1
    800013ac:	8ff9                	and	a5,a5,a4
    800013ae:	c789                	beqz	a5,800013b8 <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    800013b0:	04843a03          	ld	s4,72(s0)
    800013b4:	0a0a0163          	beqz	s4,80001456 <hshandler+0x194>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800013b8:	00039797          	auipc	a5,0x39
    800013bc:	5a47a783          	lw	a5,1444(a5) # 8003a95c <curr_priv>
    unsigned temp_priv = real_priv;
    800013c0:	00039517          	auipc	a0,0x39
    800013c4:	59852503          	lw	a0,1432(a0) # 8003a958 <real_priv>
    excpt.fault_inst = 0;
    800013c8:	00053717          	auipc	a4,0x53
    800013cc:	c8073023          	sd	zero,-896(a4) # 80054048 <excpt+0x38>
    real_priv = curr_priv;
    800013d0:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800013d4:	478d                	li	a5,3
    800013d6:	0ef50863          	beq	a0,a5,800014c6 <hshandler+0x204>
    800013da:	4791                	li	a5,4
    800013dc:	08f50663          	beq	a0,a5,80001468 <hshandler+0x1a6>
    800013e0:	4789                	li	a5,2
    800013e2:	04f51063          	bne	a0,a5,80001422 <hshandler+0x160>
    800013e6:	100027f3          	csrr	a5,sstatus
    800013ea:	00039717          	auipc	a4,0x39
    800013ee:	57272703          	lw	a4,1394(a4) # 8003a95c <curr_priv>
    800013f2:	4685                	li	a3,1
    800013f4:	edf7f793          	andi	a5,a5,-289
    800013f8:	3779                	addiw	a4,a4,-2
    800013fa:	00e6e463          	bltu	a3,a4,80001402 <hshandler+0x140>
    800013fe:	1007e793          	ori	a5,a5,256
    80001402:	10079073          	csrw	sstatus,a5
    80001406:	0004ce63          	bltz	s1,80001422 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000140a:	000a5783          	lhu	a5,0(s4)
    8000140e:	468d                	li	a3,3
    else return epc + 2;
    80001410:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001414:	8ff5                	and	a5,a5,a3
    80001416:	00d79463          	bne	a5,a3,8000141e <hshandler+0x15c>
    8000141a:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000141e:	14171073          	csrw	sepc,a4
}
    80001422:	60a6                	ld	ra,72(sp)
    80001424:	6406                	ld	s0,64(sp)
    80001426:	1502                	slli	a0,a0,0x20
    80001428:	74e2                	ld	s1,56(sp)
    8000142a:	7942                	ld	s2,48(sp)
    8000142c:	79a2                	ld	s3,40(sp)
    8000142e:	7a02                	ld	s4,32(sp)
    80001430:	6ae2                	ld	s5,24(sp)
    80001432:	6b42                	ld	s6,16(sp)
    80001434:	6ba2                	ld	s7,8(sp)
    80001436:	9101                	srli	a0,a0,0x20
    80001438:	6161                	addi	sp,sp,80
    8000143a:	8082                	ret
        ERROR("untested exception!");
    8000143c:	0002c517          	auipc	a0,0x2c
    80001440:	21450513          	addi	a0,a0,532 # 8002d650 <__func__.0+0x598>
    80001444:	213290ef          	jal	8002ae56 <printf>
    80001448:	12400613          	li	a2,292
    8000144c:	bdd9                	j	80001322 <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    8000144e:	4408                	lw	a0,8(s0)
    80001450:	ab9ff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    80001454:	b731                	j	80001360 <hshandler+0x9e>
            ERROR("instruction fault without return address");
    80001456:	0002c517          	auipc	a0,0x2c
    8000145a:	22250513          	addi	a0,a0,546 # 8002d678 <__func__.0+0x5c0>
    8000145e:	1f9290ef          	jal	8002ae56 <printf>
    80001462:	13c00613          	li	a2,316
    80001466:	bd75                	j	80001322 <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001468:	30002773          	csrr	a4,mstatus
    8000146c:	fc0007b7          	lui	a5,0xfc000
    80001470:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001472:	00039697          	auipc	a3,0x39
    80001476:	4ea6a683          	lw	a3,1258(a3) # 8003a95c <curr_priv>
    8000147a:	07b6                	slli	a5,a5,0xd
    8000147c:	77f78793          	addi	a5,a5,1919
    80001480:	8ff9                	and	a5,a5,a4
    80001482:	06a68263          	beq	a3,a0,800014e6 <hshandler+0x224>
    80001486:	ffe6871b          	addiw	a4,a3,-2
    8000148a:	4605                	li	a2,1
    8000148c:	06e66263          	bltu	a2,a4,800014f0 <hshandler+0x22e>
    80001490:	6705                	lui	a4,0x1
    80001492:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001496:	4609                	li	a2,2
    80001498:	8fd9                	or	a5,a5,a4
    8000149a:	00c69563          	bne	a3,a2,800014a4 <hshandler+0x1e2>
    8000149e:	4705                	li	a4,1
    800014a0:	171e                	slli	a4,a4,0x27
    800014a2:	8fd9                	or	a5,a5,a4
    800014a4:	30079073          	csrw	mstatus,a5
    800014a8:	f604cde3          	bltz	s1,80001422 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014ac:	000a5783          	lhu	a5,0(s4)
    800014b0:	468d                	li	a3,3
    else return epc + 2;
    800014b2:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014b6:	8ff5                	and	a5,a5,a3
    800014b8:	00d79463          	bne	a5,a3,800014c0 <hshandler+0x1fe>
    800014bc:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014c0:	34171073          	csrw	mepc,a4
    800014c4:	bfb9                	j	80001422 <hshandler+0x160>
    800014c6:	600026f3          	csrr	a3,hstatus
    800014ca:	00039797          	auipc	a5,0x39
    800014ce:	4927a783          	lw	a5,1170(a5) # 8003a95c <curr_priv>
    800014d2:	0806e713          	ori	a4,a3,128
    800014d6:	9bf5                	andi	a5,a5,-3
    800014d8:	e781                	bnez	a5,800014e0 <hshandler+0x21e>
    800014da:	60071073          	csrw	hstatus,a4
    800014de:	b721                	j	800013e6 <hshandler+0x124>
    800014e0:	f7f6f713          	andi	a4,a3,-129
    800014e4:	bfdd                	j	800014da <hshandler+0x218>
    800014e6:	6709                	lui	a4,0x2
    800014e8:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800014ec:	8fd9                	or	a5,a5,a4
    800014ee:	bf5d                	j	800014a4 <hshandler+0x1e2>
    800014f0:	d6dd                	beqz	a3,8000149e <hshandler+0x1dc>
    800014f2:	bf4d                	j	800014a4 <hshandler+0x1e2>

00000000800014f4 <vshandler>:

uint64_t vshandler(){
    800014f4:	7139                	addi	sp,sp,-64
    800014f6:	f04a                	sd	s2,32(sp)
    800014f8:	fc06                	sd	ra,56(sp)
    800014fa:	f822                	sd	s0,48(sp)
    800014fc:	f426                	sd	s1,40(sp)
    800014fe:	ec4e                	sd	s3,24(sp)
    80001500:	e852                	sd	s4,16(sp)
    80001502:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    80001504:	00039917          	auipc	s2,0x39
    80001508:	45490913          	addi	s2,s2,1108 # 8003a958 <real_priv>
    8000150c:	4709                	li	a4,2
    8000150e:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    80001512:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    80001516:	141029f3          	csrr	s3,sepc
    8000151a:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    8000151c:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001520:	478d                	li	a5,3
    80001522:	ff840693          	addi	a3,s0,-8
    80001526:	04d7e663          	bltu	a5,a3,80001572 <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    8000152a:	00053a97          	auipc	s5,0x53
    8000152e:	ad6a8a93          	addi	s5,s5,-1322 # 80054000 <ecall_args>
    80001532:	000ab703          	ld	a4,0(s5)
    80001536:	4785                	li	a5,1
    80001538:	1cf70563          	beq	a4,a5,80001702 <vshandler+0x20e>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    8000153c:	00053797          	auipc	a5,0x53
    80001540:	ad47c783          	lbu	a5,-1324(a5) # 80054010 <excpt>
    80001544:	1c079363          	bnez	a5,8000170a <vshandler+0x216>
        ERROR("untested exception!");
    80001548:	0002c517          	auipc	a0,0x2c
    8000154c:	10850513          	addi	a0,a0,264 # 8002d650 <__func__.0+0x598>
    80001550:	107290ef          	jal	8002ae56 <printf>
    80001554:	15500613          	li	a2,341
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    80001558:	0002a597          	auipc	a1,0x2a
    8000155c:	dc858593          	addi	a1,a1,-568 # 8002b320 <__func__.1>
    80001560:	0002c517          	auipc	a0,0x2c
    80001564:	fc050513          	addi	a0,a0,-64 # 8002d520 <__func__.0+0x468>
    80001568:	0ef290ef          	jal	8002ae56 <printf>
    8000156c:	4501                	li	a0,0
    8000156e:	49e290ef          	jal	8002aa0c <exit>
    } else if(!excpt.testing){
    80001572:	00053697          	auipc	a3,0x53
    80001576:	a9e6c683          	lbu	a3,-1378(a3) # 80054010 <excpt>
    8000157a:	00053797          	auipc	a5,0x53
    8000157e:	a8678793          	addi	a5,a5,-1402 # 80054000 <ecall_args>
    80001582:	d2f9                	beqz	a3,80001548 <vshandler+0x54>
    if(cause & (1ULL << 63)){
    80001584:	0c045463          	bgez	s0,8000164c <vshandler+0x158>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001588:	4685                	li	a3,1
    8000158a:	008696b3          	sll	a3,a3,s0
    8000158e:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    80001592:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001596:	5208a0d7          	vid.v	v1
    8000159a:	00053697          	auipc	a3,0x53
    8000159e:	a7668693          	addi	a3,a3,-1418 # 80054010 <excpt>
    800015a2:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    800015a6:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800015a8:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800015aa:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800015ae:	0347b423          	sd	s4,40(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800015b2:	00039797          	auipc	a5,0x39
    800015b6:	3aa7a783          	lw	a5,938(a5) # 8003a95c <curr_priv>
    unsigned temp_priv = real_priv;
    800015ba:	00039517          	auipc	a0,0x39
    800015be:	39e52503          	lw	a0,926(a0) # 8003a958 <real_priv>
    excpt.fault_inst = 0;
    800015c2:	00053717          	auipc	a4,0x53
    800015c6:	a8073323          	sd	zero,-1402(a4) # 80054048 <excpt+0x38>
    real_priv = curr_priv;
    800015ca:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015ce:	478d                	li	a5,3
    800015d0:	02f50363          	beq	a0,a5,800015f6 <vshandler+0x102>
    800015d4:	4791                	li	a5,4
    800015d6:	0cf50763          	beq	a0,a5,800016a4 <vshandler+0x1b0>
    800015da:	4789                	li	a5,2
    800015dc:	02f50b63          	beq	a0,a5,80001612 <vshandler+0x11e>
}
    800015e0:	70e2                	ld	ra,56(sp)
    800015e2:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015e4:	1502                	slli	a0,a0,0x20
}
    800015e6:	74a2                	ld	s1,40(sp)
    800015e8:	7902                	ld	s2,32(sp)
    800015ea:	69e2                	ld	s3,24(sp)
    800015ec:	6a42                	ld	s4,16(sp)
    800015ee:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015f0:	9101                	srli	a0,a0,0x20
}
    800015f2:	6121                	addi	sp,sp,64
    800015f4:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015f6:	600026f3          	csrr	a3,hstatus
    800015fa:	00039797          	auipc	a5,0x39
    800015fe:	3627a783          	lw	a5,866(a5) # 8003a95c <curr_priv>
    80001602:	0806e713          	ori	a4,a3,128
    80001606:	9bf5                	andi	a5,a5,-3
    80001608:	c399                	beqz	a5,8000160e <vshandler+0x11a>
    8000160a:	f7f6f713          	andi	a4,a3,-129
    8000160e:	60071073          	csrw	hstatus,a4
    80001612:	100027f3          	csrr	a5,sstatus
    80001616:	00039717          	auipc	a4,0x39
    8000161a:	34672703          	lw	a4,838(a4) # 8003a95c <curr_priv>
    8000161e:	4685                	li	a3,1
    80001620:	edf7f793          	andi	a5,a5,-289
    80001624:	3779                	addiw	a4,a4,-2
    80001626:	06e6f863          	bgeu	a3,a4,80001696 <vshandler+0x1a2>
    8000162a:	10079073          	csrw	sstatus,a5
    8000162e:	fa0449e3          	bltz	s0,800015e0 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001632:	0004d783          	lhu	a5,0(s1)
    80001636:	468d                	li	a3,3
    else return epc + 2;
    80001638:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000163c:	8ff5                	and	a5,a5,a3
    8000163e:	00d79463          	bne	a5,a3,80001646 <vshandler+0x152>
    80001642:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001646:	14171073          	csrw	sepc,a4
    8000164a:	bf59                	j	800015e0 <vshandler+0xec>
    excpt.testing = false;
    8000164c:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001650:	5208a0d7          	vid.v	v1
    80001654:	00053697          	auipc	a3,0x53
    80001658:	9bc68693          	addi	a3,a3,-1604 # 80054010 <excpt>
    8000165c:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    80001660:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001662:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001664:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001668:	0347b423          	sd	s4,40(a5)
    if(is_inst_fault(cause)){
    8000166c:	4751                	li	a4,20
    8000166e:	f48762e3          	bltu	a4,s0,800015b2 <vshandler+0xbe>
    80001672:	00101737          	lui	a4,0x101
    80001676:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001678:	00875733          	srl	a4,a4,s0
    8000167c:	8b05                	andi	a4,a4,1
    8000167e:	db15                	beqz	a4,800015b2 <vshandler+0xbe>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001680:	67a4                	ld	s1,72(a5)
    80001682:	f885                	bnez	s1,800015b2 <vshandler+0xbe>
        else ERROR("instruction fault without return address");
    80001684:	0002c517          	auipc	a0,0x2c
    80001688:	ff450513          	addi	a0,a0,-12 # 8002d678 <__func__.0+0x5c0>
    8000168c:	7ca290ef          	jal	8002ae56 <printf>
    80001690:	16400613          	li	a2,356
    80001694:	b5d1                	j	80001558 <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001696:	1007e793          	ori	a5,a5,256
    8000169a:	10079073          	csrw	sstatus,a5
    8000169e:	f8045ae3          	bgez	s0,80001632 <vshandler+0x13e>
    800016a2:	bf3d                	j	800015e0 <vshandler+0xec>
    800016a4:	30002773          	csrr	a4,mstatus
    800016a8:	fc0007b7          	lui	a5,0xfc000
    800016ac:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800016ae:	00039697          	auipc	a3,0x39
    800016b2:	2ae6a683          	lw	a3,686(a3) # 8003a95c <curr_priv>
    800016b6:	07b6                	slli	a5,a5,0xd
    800016b8:	77f78793          	addi	a5,a5,1919
    800016bc:	8ff9                	and	a5,a5,a4
    800016be:	06a68a63          	beq	a3,a0,80001732 <vshandler+0x23e>
    800016c2:	ffe6871b          	addiw	a4,a3,-2
    800016c6:	4605                	li	a2,1
    800016c8:	06e66a63          	bltu	a2,a4,8000173c <vshandler+0x248>
    800016cc:	6705                	lui	a4,0x1
    800016ce:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800016d2:	4609                	li	a2,2
    800016d4:	8fd9                	or	a5,a5,a4
    800016d6:	00c69563          	bne	a3,a2,800016e0 <vshandler+0x1ec>
    800016da:	4705                	li	a4,1
    800016dc:	171e                	slli	a4,a4,0x27
    800016de:	8fd9                	or	a5,a5,a4
    800016e0:	30079073          	csrw	mstatus,a5
    800016e4:	ee044ee3          	bltz	s0,800015e0 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016e8:	0004d783          	lhu	a5,0(s1)
    800016ec:	468d                	li	a3,3
    else return epc + 2;
    800016ee:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016f2:	8ff5                	and	a5,a5,a3
    800016f4:	00d79463          	bne	a5,a3,800016fc <vshandler+0x208>
    800016f8:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800016fc:	34171073          	csrw	mepc,a4
    80001700:	b5c5                	j	800015e0 <vshandler+0xec>
        goto_priv(ecall_args[1]); 
    80001702:	008aa503          	lw	a0,8(s5)
    80001706:	803ff0ef          	jal	80000f08 <goto_priv>
    excpt.testing = false;
    8000170a:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    8000170e:	5208a0d7          	vid.v	v1
    80001712:	00053717          	auipc	a4,0x53
    80001716:	8fe70713          	addi	a4,a4,-1794 # 80054010 <excpt>
    excpt.priv = PRIV_VS;
    8000171a:	4789                	li	a5,2
    excpt.testing = false;
    8000171c:	020700a7          	vse8.v	v1,(a4)
    excpt.cause = cause;
    80001720:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    80001724:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    80001728:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    8000172c:	00faaa23          	sw	a5,20(s5)
    if(is_inst_fault(cause)){
    80001730:	b549                	j	800015b2 <vshandler+0xbe>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001732:	6709                	lui	a4,0x2
    80001734:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001738:	8fd9                	or	a5,a5,a4
    8000173a:	b75d                	j	800016e0 <vshandler+0x1ec>
    8000173c:	ded9                	beqz	a3,800016da <vshandler+0x1e6>
    8000173e:	b74d                	j	800016e0 <vshandler+0x1ec>

0000000080001740 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    80001740:	1141                	addi	sp,sp,-16
    80001742:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    80001744:	00357713          	andi	a4,a0,3
    80001748:	478d                	li	a5,3
    8000174a:	04f70763          	beq	a4,a5,80001798 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    8000174e:	77f9                	lui	a5,0xffffe
    80001750:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    80001752:	8fe9                	and	a5,a5,a0
    80001754:	6711                	lui	a4,0x4
    80001756:	85aa                	mv	a1,a0
    80001758:	08e78963          	beq	a5,a4,800017ea <expand_compressed_instruction+0xaa>
    8000175c:	6719                	lui	a4,0x6
    8000175e:	04e78663          	beq	a5,a4,800017aa <expand_compressed_instruction+0x6a>
    80001762:	6731                	lui	a4,0xc
    80001764:	0ae78b63          	beq	a5,a4,8000181a <expand_compressed_instruction+0xda>
    80001768:	6739                	lui	a4,0xe
    8000176a:	0ae78363          	beq	a5,a4,80001810 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    8000176e:	0002c517          	auipc	a0,0x2c
    80001772:	faa50513          	addi	a0,a0,-86 # 8002d718 <__func__.0+0x660>
    80001776:	6e0290ef          	jal	8002ae56 <printf>
    8000177a:	18300613          	li	a2,387
    8000177e:	0002a597          	auipc	a1,0x2a
    80001782:	bb258593          	addi	a1,a1,-1102 # 8002b330 <__func__.0>
    80001786:	0002c517          	auipc	a0,0x2c
    8000178a:	d9a50513          	addi	a0,a0,-614 # 8002d520 <__func__.0+0x468>
    8000178e:	6c8290ef          	jal	8002ae56 <printf>
    80001792:	4501                	li	a0,0
    80001794:	278290ef          	jal	8002aa0c <exit>
        ERROR("trying to expand non-compressed instruction");
    80001798:	0002c517          	auipc	a0,0x2c
    8000179c:	f4050513          	addi	a0,a0,-192 # 8002d6d8 <__func__.0+0x620>
    800017a0:	6b6290ef          	jal	8002ae56 <printf>
    800017a4:	17000613          	li	a2,368
    800017a8:	bfd9                	j	8000177e <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    800017aa:	668d                	lui	a3,0x3
    800017ac:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800017ae:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017b0:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017b4:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017b8:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017ba:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017bc:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017be:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    800017c0:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017c4:	0606                	slli	a2,a2,0x1
    800017c6:	0196161b          	slliw	a2,a2,0x19
    800017ca:	0e0005b7          	lui	a1,0xe000
    800017ce:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800017d0:	45d1                	li	a1,20
    800017d2:	c111                	beqz	a0,800017d6 <expand_compressed_instruction+0x96>
    800017d4:	459d                	li	a1,7
    }

}
    800017d6:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017d8:	00f7171b          	slliw	a4,a4,0xf
    800017dc:	8ed1                	or	a3,a3,a2
    800017de:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800017e0:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800017e4:	8d59                	or	a0,a0,a4
}
    800017e6:	0141                	addi	sp,sp,16
    800017e8:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    800017ea:	6689                	lui	a3,0x2
    800017ec:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    800017ee:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017f0:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017f4:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800017f8:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800017fc:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800017fe:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001800:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001804:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001806:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001808:	4601                	li	a2,0
    8000180a:	fc0803e3          	beqz	a6,800017d0 <expand_compressed_instruction+0x90>
    8000180e:	bf4d                	j	800017c0 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001810:	668d                	lui	a3,0x3
    80001812:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    80001816:	4501                	li	a0,0
    80001818:	bf61                	j	800017b0 <expand_compressed_instruction+0x70>
    8000181a:	6689                	lui	a3,0x2
    8000181c:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    80001820:	4501                	li	a0,0
    80001822:	b7f9                	j	800017f0 <expand_compressed_instruction+0xb0>

0000000080001824 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    80001824:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    80001826:	4511                	li	a0,4
void reset_state(){
    80001828:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    8000182a:	edeff0ef          	jal	80000f08 <goto_priv>
    CSRW(mstatus, 0ULL);
    8000182e:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001832:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    80001836:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    8000183a:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    8000183e:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    80001842:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    80001846:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    8000184a:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    8000184e:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    80001852:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    80001856:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    8000185a:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    8000185e:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    80001862:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    80001866:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    8000186a:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    8000186e:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    80001872:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    80001876:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    8000187a:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    8000187e:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001882:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    80001886:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    8000188a:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    8000188e:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001892:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    80001896:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    8000189a:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    8000189e:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    800018a2:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    800018a6:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    800018aa:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    800018ae:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    800018b2:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    800018b6:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    800018ba:	00029797          	auipc	a5,0x29
    800018be:	7d278793          	addi	a5,a5,2002 # 8002b08c <mhandler_entry>
    800018c2:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    800018c6:	50000793          	li	a5,1280
    800018ca:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    800018ce:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    800018d2:	57fd                	li	a5,-1
    800018d4:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    800018d8:	00029797          	auipc	a5,0x29
    800018dc:	7fc78793          	addi	a5,a5,2044 # 8002b0d4 <hshandler_entry>
    800018e0:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    800018e4:	10000793          	li	a5,256
    800018e8:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    800018ec:	0002a797          	auipc	a5,0x2a
    800018f0:	83078793          	addi	a5,a5,-2000 # 8002b11c <vshandler_entry>
    800018f4:	20579073          	csrw	vstvec,a5

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800018f8:	20000713          	li	a4,512
    800018fc:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80001900:	40000793          	li	a5,1024
    80001904:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80001908:	20072073          	csrs	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8000190c:	2007b073          	csrc	vsstatus,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    80001910:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001914:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001918:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000191c:	60a2                	ld	ra,8(sp)
    8000191e:	0141                	addi	sp,sp,16
    80001920:	8082                	ret

0000000080001922 <random_m_instruction>:
#include <rvh_test.h>
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){
    int rand1=CSRR(time);
    80001922:	c01027f3          	rdtime	a5
    int rand2=CSRR(cycle);
    80001926:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;
    int num=num0%10;
    8000192a:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;
    8000192e:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    80001930:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    80001934:	02e78733          	mul	a4,a5,a4
    80001938:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)
    8000193c:	4625                	li	a2,9
    int num=num0%10;
    8000193e:	9709                	srai	a4,a4,0x22
    80001940:	9f15                	subw	a4,a4,a3
    80001942:	0027169b          	slliw	a3,a4,0x2
    80001946:	9f35                	addw	a4,a4,a3
    80001948:	0017171b          	slliw	a4,a4,0x1
    8000194c:	9f99                	subw	a5,a5,a4
    switch (num)
    8000194e:	08f66a63          	bltu	a2,a5,800019e2 <random_m_instruction+0xc0>
    80001952:	02079713          	slli	a4,a5,0x20
    80001956:	01e75793          	srli	a5,a4,0x1e
    8000195a:	0002a717          	auipc	a4,0x2a
    8000195e:	9f670713          	addi	a4,a4,-1546 # 8002b350 <__func__.0+0x20>
    80001962:	97ba                	add	a5,a5,a4
    80001964:	439c                	lw	a5,0(a5)
    80001966:	97ba                	add	a5,a5,a4
    80001968:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    8000196a:	0002c517          	auipc	a0,0x2c
    8000196e:	ec650513          	addi	a0,a0,-314 # 8002d830 <__func__.0+0x778>
    80001972:	1202906f          	j	8002aa92 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    80001976:	0002c517          	auipc	a0,0x2c
    8000197a:	ed250513          	addi	a0,a0,-302 # 8002d848 <__func__.0+0x790>
    8000197e:	1142906f          	j	8002aa92 <puts>
        printf("这是0号指令\n");
    80001982:	0002c517          	auipc	a0,0x2c
    80001986:	dee50513          	addi	a0,a0,-530 # 8002d770 <__func__.0+0x6b8>
    8000198a:	1082906f          	j	8002aa92 <puts>
        printf("这是1号指令\n");
    8000198e:	0002c517          	auipc	a0,0x2c
    80001992:	dfa50513          	addi	a0,a0,-518 # 8002d788 <__func__.0+0x6d0>
    80001996:	0fc2906f          	j	8002aa92 <puts>
        printf("这是2号指令\n");
    8000199a:	0002c517          	auipc	a0,0x2c
    8000199e:	e0650513          	addi	a0,a0,-506 # 8002d7a0 <__func__.0+0x6e8>
    800019a2:	0f02906f          	j	8002aa92 <puts>
        printf("这是3号指令\n");
    800019a6:	0002c517          	auipc	a0,0x2c
    800019aa:	e1250513          	addi	a0,a0,-494 # 8002d7b8 <__func__.0+0x700>
    800019ae:	0e42906f          	j	8002aa92 <puts>
        printf("这是4号指令\n");
    800019b2:	0002c517          	auipc	a0,0x2c
    800019b6:	e1e50513          	addi	a0,a0,-482 # 8002d7d0 <__func__.0+0x718>
    800019ba:	0d82906f          	j	8002aa92 <puts>
        printf("这是5号指令\n");
    800019be:	0002c517          	auipc	a0,0x2c
    800019c2:	e2a50513          	addi	a0,a0,-470 # 8002d7e8 <__func__.0+0x730>
    800019c6:	0cc2906f          	j	8002aa92 <puts>
        printf("这是6号指令\n");
    800019ca:	0002c517          	auipc	a0,0x2c
    800019ce:	e3650513          	addi	a0,a0,-458 # 8002d800 <__func__.0+0x748>
    800019d2:	0c02906f          	j	8002aa92 <puts>
        printf("这是7号指令\n");
    800019d6:	0002c517          	auipc	a0,0x2c
    800019da:	e4250513          	addi	a0,a0,-446 # 8002d818 <__func__.0+0x760>
    800019de:	0b42906f          	j	8002aa92 <puts>
    
    
    default:
        break;
    }
    800019e2:	8082                	ret

00000000800019e4 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    800019e4:	7179                	addi	sp,sp,-48

    TEST_START();
    800019e6:	0002a597          	auipc	a1,0x2a
    800019ea:	99258593          	addi	a1,a1,-1646 # 8002b378 <__func__.3>
    800019ee:	0002c517          	auipc	a0,0x2c
    800019f2:	9aa50513          	addi	a0,a0,-1622 # 8002d398 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    800019f6:	f406                	sd	ra,40(sp)
    800019f8:	f022                	sd	s0,32(sp)
    800019fa:	ec26                	sd	s1,24(sp)
    800019fc:	e84a                	sd	s2,16(sp)
    800019fe:	e44e                	sd	s3,8(sp)
    80001a00:	e052                	sd	s4,0(sp)
    TEST_START();
    80001a02:	454290ef          	jal	8002ae56 <printf>
    80001a06:	4529                	li	a0,10
    80001a08:	13c280ef          	jal	80029b44 <putchar>

    CSRW(mideleg, 0);
    80001a0c:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001a10:	547d                	li	s0,-1
    80001a12:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001a16:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001a1a:	244029f3          	csrr	s3,vsip
    80001a1e:	24441073          	csrw	vsip,s0
    80001a22:	244024f3          	csrr	s1,vsip
    80001a26:	0002c617          	auipc	a2,0x2c
    80001a2a:	e3a60613          	addi	a2,a2,-454 # 8002d860 <__func__.0+0x7a8>
    80001a2e:	08200593          	li	a1,130
    80001a32:	0002c517          	auipc	a0,0x2c
    80001a36:	97e50513          	addi	a0,a0,-1666 # 8002d3b0 <__func__.0+0x2f8>
    80001a3a:	4909                	li	s2,2
    80001a3c:	41a290ef          	jal	8002ae56 <printf>
    80001a40:	11248f63          	beq	s1,s2,80001b5e <check_xip_regs_1+0x17a>
    80001a44:	0002c597          	auipc	a1,0x2c
    80001a48:	94458593          	addi	a1,a1,-1724 # 8002d388 <__func__.0+0x2d0>
    80001a4c:	0002c517          	auipc	a0,0x2c
    80001a50:	97c50513          	addi	a0,a0,-1668 # 8002d3c8 <__func__.0+0x310>
    80001a54:	402290ef          	jal	8002ae56 <printf>
    80001a58:	0002c517          	auipc	a0,0x2c
    80001a5c:	97850513          	addi	a0,a0,-1672 # 8002d3d0 <__func__.0+0x318>
    80001a60:	3f6290ef          	jal	8002ae56 <printf>
    80001a64:	86ca                	mv	a3,s2
    80001a66:	8626                	mv	a2,s1
    80001a68:	85a2                	mv	a1,s0
    80001a6a:	0002c517          	auipc	a0,0x2c
    80001a6e:	96e50513          	addi	a0,a0,-1682 # 8002d3d8 <__func__.0+0x320>
    80001a72:	3e4290ef          	jal	8002ae56 <printf>
    80001a76:	02900513          	li	a0,41
    80001a7a:	0ca280ef          	jal	80029b44 <putchar>
    80001a7e:	4529                	li	a0,10
    80001a80:	0c4280ef          	jal	80029b44 <putchar>
    80001a84:	4a01                	li	s4,0
    80001a86:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001a8a:	204029f3          	csrr	s3,vsie
    80001a8e:	54fd                	li	s1,-1
    80001a90:	20449073          	csrw	vsie,s1
    80001a94:	20402973          	csrr	s2,vsie
    80001a98:	6409                	lui	s0,0x2
    80001a9a:	0002c617          	auipc	a2,0x2c
    80001a9e:	dce60613          	addi	a2,a2,-562 # 8002d868 <__func__.0+0x7b0>
    80001aa2:	08200593          	li	a1,130
    80001aa6:	0002c517          	auipc	a0,0x2c
    80001aaa:	90a50513          	addi	a0,a0,-1782 # 8002d3b0 <__func__.0+0x2f8>
    80001aae:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001ab2:	3a4290ef          	jal	8002ae56 <printf>
    80001ab6:	06890d63          	beq	s2,s0,80001b30 <check_xip_regs_1+0x14c>
    80001aba:	0002c597          	auipc	a1,0x2c
    80001abe:	8ce58593          	addi	a1,a1,-1842 # 8002d388 <__func__.0+0x2d0>
    80001ac2:	0002c517          	auipc	a0,0x2c
    80001ac6:	90650513          	addi	a0,a0,-1786 # 8002d3c8 <__func__.0+0x310>
    80001aca:	38c290ef          	jal	8002ae56 <printf>
    80001ace:	0002c517          	auipc	a0,0x2c
    80001ad2:	90250513          	addi	a0,a0,-1790 # 8002d3d0 <__func__.0+0x318>
    80001ad6:	380290ef          	jal	8002ae56 <printf>
    80001ada:	86a2                	mv	a3,s0
    80001adc:	864a                	mv	a2,s2
    80001ade:	85a6                	mv	a1,s1
    80001ae0:	0002c517          	auipc	a0,0x2c
    80001ae4:	8f850513          	addi	a0,a0,-1800 # 8002d3d8 <__func__.0+0x320>
    80001ae8:	36e290ef          	jal	8002ae56 <printf>
    80001aec:	02900513          	li	a0,41
    80001af0:	054280ef          	jal	80029b44 <putchar>
    80001af4:	4529                	li	a0,10
    80001af6:	04e280ef          	jal	80029b44 <putchar>
    80001afa:	20499073          	csrw	vsie,s3
    80001afe:	4401                	li	s0,0
    
    TEST_END();
    80001b00:	0002c597          	auipc	a1,0x2c
    80001b04:	88858593          	addi	a1,a1,-1912 # 8002d388 <__func__.0+0x2d0>
    80001b08:	0002c517          	auipc	a0,0x2c
    80001b0c:	92850513          	addi	a0,a0,-1752 # 8002d430 <__func__.0+0x378>
    80001b10:	346290ef          	jal	8002ae56 <printf>
    80001b14:	4511                	li	a0,4
    80001b16:	bf2ff0ef          	jal	80000f08 <goto_priv>
    80001b1a:	d0bff0ef          	jal	80001824 <reset_state>
}
    80001b1e:	70a2                	ld	ra,40(sp)
    80001b20:	8522                	mv	a0,s0
    80001b22:	7402                	ld	s0,32(sp)
    80001b24:	64e2                	ld	s1,24(sp)
    80001b26:	6942                	ld	s2,16(sp)
    80001b28:	69a2                	ld	s3,8(sp)
    80001b2a:	6a02                	ld	s4,0(sp)
    80001b2c:	6145                	addi	sp,sp,48
    80001b2e:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001b30:	0002c597          	auipc	a1,0x2c
    80001b34:	84858593          	addi	a1,a1,-1976 # 8002d378 <__func__.0+0x2c0>
    80001b38:	0002c517          	auipc	a0,0x2c
    80001b3c:	89050513          	addi	a0,a0,-1904 # 8002d3c8 <__func__.0+0x310>
    80001b40:	316290ef          	jal	8002ae56 <printf>
    80001b44:	4529                	li	a0,10
    80001b46:	7ff270ef          	jal	80029b44 <putchar>
    80001b4a:	fa0a08e3          	beqz	s4,80001afa <check_xip_regs_1+0x116>
    80001b4e:	20499073          	csrw	vsie,s3
    80001b52:	4405                	li	s0,1
    TEST_END();
    80001b54:	0002c597          	auipc	a1,0x2c
    80001b58:	82458593          	addi	a1,a1,-2012 # 8002d378 <__func__.0+0x2c0>
    80001b5c:	b775                	j	80001b08 <check_xip_regs_1+0x124>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001b5e:	0002c597          	auipc	a1,0x2c
    80001b62:	81a58593          	addi	a1,a1,-2022 # 8002d378 <__func__.0+0x2c0>
    80001b66:	0002c517          	auipc	a0,0x2c
    80001b6a:	86250513          	addi	a0,a0,-1950 # 8002d3c8 <__func__.0+0x310>
    80001b6e:	2e8290ef          	jal	8002ae56 <printf>
    80001b72:	4529                	li	a0,10
    80001b74:	7d1270ef          	jal	80029b44 <putchar>
    80001b78:	4a05                	li	s4,1
    80001b7a:	b731                	j	80001a86 <check_xip_regs_1+0xa2>

0000000080001b7c <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001b7c:	1101                	addi	sp,sp,-32

    TEST_START();
    80001b7e:	0002a597          	auipc	a1,0x2a
    80001b82:	81258593          	addi	a1,a1,-2030 # 8002b390 <__func__.2>
    80001b86:	0002c517          	auipc	a0,0x2c
    80001b8a:	81250513          	addi	a0,a0,-2030 # 8002d398 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    80001b8e:	ec06                	sd	ra,24(sp)
    80001b90:	e822                	sd	s0,16(sp)
    80001b92:	e426                	sd	s1,8(sp)
    80001b94:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001b96:	2c0290ef          	jal	8002ae56 <printf>
    80001b9a:	4529                	li	a0,10
    80001b9c:	7a9270ef          	jal	80029b44 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001ba0:	57fd                	li	a5,-1
    80001ba2:	03f79713          	slli	a4,a5,0x3f
    80001ba6:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001baa:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001bae:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001bb2:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001bb6:	64402473          	csrr	s0,hip
    80001bba:	0002c617          	auipc	a2,0x2c
    80001bbe:	cb660613          	addi	a2,a2,-842 # 8002d870 <__func__.0+0x7b8>
    80001bc2:	08200593          	li	a1,130
    80001bc6:	0002b517          	auipc	a0,0x2b
    80001bca:	7ea50513          	addi	a0,a0,2026 # 8002d3b0 <__func__.0+0x2f8>
    80001bce:	4491                	li	s1,4
    80001bd0:	286290ef          	jal	8002ae56 <printf>
    80001bd4:	46940463          	beq	s0,s1,8000203c <check_xip_regs_2+0x4c0>
    80001bd8:	0002b597          	auipc	a1,0x2b
    80001bdc:	7b058593          	addi	a1,a1,1968 # 8002d388 <__func__.0+0x2d0>
    80001be0:	0002b517          	auipc	a0,0x2b
    80001be4:	7e850513          	addi	a0,a0,2024 # 8002d3c8 <__func__.0+0x310>
    80001be8:	26e290ef          	jal	8002ae56 <printf>
    80001bec:	0002b517          	auipc	a0,0x2b
    80001bf0:	7e450513          	addi	a0,a0,2020 # 8002d3d0 <__func__.0+0x318>
    80001bf4:	262290ef          	jal	8002ae56 <printf>
    80001bf8:	8622                	mv	a2,s0
    80001bfa:	86a6                	mv	a3,s1
    80001bfc:	02d00593          	li	a1,45
    80001c00:	0002c517          	auipc	a0,0x2c
    80001c04:	c7850513          	addi	a0,a0,-904 # 8002d878 <__func__.0+0x7c0>
    80001c08:	24e290ef          	jal	8002ae56 <printf>
    80001c0c:	02900513          	li	a0,41
    80001c10:	735270ef          	jal	80029b44 <putchar>
    80001c14:	4529                	li	a0,10
    80001c16:	72f270ef          	jal	80029b44 <putchar>
    80001c1a:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80001c1c:	144024f3          	csrr	s1,sip
    80001c20:	0002c617          	auipc	a2,0x2c
    80001c24:	c7060613          	addi	a2,a2,-912 # 8002d890 <__func__.0+0x7d8>
    80001c28:	08200593          	li	a1,130
    80001c2c:	0002b517          	auipc	a0,0x2b
    80001c30:	78450513          	addi	a0,a0,1924 # 8002d3b0 <__func__.0+0x2f8>
    80001c34:	22200913          	li	s2,546
    80001c38:	21e290ef          	jal	8002ae56 <printf>
    80001c3c:	3b248663          	beq	s1,s2,80001fe8 <check_xip_regs_2+0x46c>
    80001c40:	0002b597          	auipc	a1,0x2b
    80001c44:	74858593          	addi	a1,a1,1864 # 8002d388 <__func__.0+0x2d0>
    80001c48:	0002b517          	auipc	a0,0x2b
    80001c4c:	78050513          	addi	a0,a0,1920 # 8002d3c8 <__func__.0+0x310>
    80001c50:	206290ef          	jal	8002ae56 <printf>
    80001c54:	0002b517          	auipc	a0,0x2b
    80001c58:	77c50513          	addi	a0,a0,1916 # 8002d3d0 <__func__.0+0x318>
    80001c5c:	1fa290ef          	jal	8002ae56 <printf>
    80001c60:	86ca                	mv	a3,s2
    80001c62:	8626                	mv	a2,s1
    80001c64:	02d00593          	li	a1,45
    80001c68:	0002c517          	auipc	a0,0x2c
    80001c6c:	c1050513          	addi	a0,a0,-1008 # 8002d878 <__func__.0+0x7c0>
    80001c70:	1e6290ef          	jal	8002ae56 <printf>
    80001c74:	02900513          	li	a0,41
    80001c78:	6cd270ef          	jal	80029b44 <putchar>
    80001c7c:	4529                	li	a0,10
    80001c7e:	6c7270ef          	jal	80029b44 <putchar>
    80001c82:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001c84:	244024f3          	csrr	s1,vsip
    80001c88:	0002c617          	auipc	a2,0x2c
    80001c8c:	bd860613          	addi	a2,a2,-1064 # 8002d860 <__func__.0+0x7a8>
    80001c90:	08200593          	li	a1,130
    80001c94:	0002b517          	auipc	a0,0x2b
    80001c98:	71c50513          	addi	a0,a0,1820 # 8002d3b0 <__func__.0+0x2f8>
    80001c9c:	4909                	li	s2,2
    80001c9e:	1b8290ef          	jal	8002ae56 <printf>
    80001ca2:	37248f63          	beq	s1,s2,80002020 <check_xip_regs_2+0x4a4>
    80001ca6:	0002b597          	auipc	a1,0x2b
    80001caa:	6e258593          	addi	a1,a1,1762 # 8002d388 <__func__.0+0x2d0>
    80001cae:	0002b517          	auipc	a0,0x2b
    80001cb2:	71a50513          	addi	a0,a0,1818 # 8002d3c8 <__func__.0+0x310>
    80001cb6:	1a0290ef          	jal	8002ae56 <printf>
    80001cba:	0002b517          	auipc	a0,0x2b
    80001cbe:	71650513          	addi	a0,a0,1814 # 8002d3d0 <__func__.0+0x318>
    80001cc2:	194290ef          	jal	8002ae56 <printf>
    80001cc6:	86ca                	mv	a3,s2
    80001cc8:	8626                	mv	a2,s1
    80001cca:	02d00593          	li	a1,45
    80001cce:	0002c517          	auipc	a0,0x2c
    80001cd2:	baa50513          	addi	a0,a0,-1110 # 8002d878 <__func__.0+0x7c0>
    80001cd6:	180290ef          	jal	8002ae56 <printf>
    80001cda:	02900513          	li	a0,41
    80001cde:	667270ef          	jal	80029b44 <putchar>
    80001ce2:	4529                	li	a0,10
    80001ce4:	661270ef          	jal	80029b44 <putchar>
    80001ce8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001cea:	4509                	li	a0,2
    80001cec:	a1cff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001cf0:	144024f3          	csrr	s1,sip
    80001cf4:	0002c617          	auipc	a2,0x2c
    80001cf8:	ba460613          	addi	a2,a2,-1116 # 8002d898 <__func__.0+0x7e0>
    80001cfc:	08200593          	li	a1,130
    80001d00:	0002b517          	auipc	a0,0x2b
    80001d04:	6b050513          	addi	a0,a0,1712 # 8002d3b0 <__func__.0+0x2f8>
    80001d08:	4909                	li	s2,2
    80001d0a:	14c290ef          	jal	8002ae56 <printf>
    80001d0e:	2f248b63          	beq	s1,s2,80002004 <check_xip_regs_2+0x488>
    80001d12:	0002b597          	auipc	a1,0x2b
    80001d16:	67658593          	addi	a1,a1,1654 # 8002d388 <__func__.0+0x2d0>
    80001d1a:	0002b517          	auipc	a0,0x2b
    80001d1e:	6ae50513          	addi	a0,a0,1710 # 8002d3c8 <__func__.0+0x310>
    80001d22:	134290ef          	jal	8002ae56 <printf>
    80001d26:	0002b517          	auipc	a0,0x2b
    80001d2a:	6aa50513          	addi	a0,a0,1706 # 8002d3d0 <__func__.0+0x318>
    80001d2e:	128290ef          	jal	8002ae56 <printf>
    80001d32:	86ca                	mv	a3,s2
    80001d34:	8626                	mv	a2,s1
    80001d36:	02d00593          	li	a1,45
    80001d3a:	0002c517          	auipc	a0,0x2c
    80001d3e:	b3e50513          	addi	a0,a0,-1218 # 8002d878 <__func__.0+0x7c0>
    80001d42:	114290ef          	jal	8002ae56 <printf>
    80001d46:	02900513          	li	a0,41
    80001d4a:	5fb270ef          	jal	80029b44 <putchar>
    80001d4e:	4529                	li	a0,10
    80001d50:	5f5270ef          	jal	80029b44 <putchar>
    80001d54:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001d56:	4511                	li	a0,4
    80001d58:	9b0ff0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001d5c:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001d60:	644024f3          	csrr	s1,hip
    80001d64:	0002c617          	auipc	a2,0x2c
    80001d68:	b0c60613          	addi	a2,a2,-1268 # 8002d870 <__func__.0+0x7b8>
    80001d6c:	08200593          	li	a1,130
    80001d70:	0002b517          	auipc	a0,0x2b
    80001d74:	64050513          	addi	a0,a0,1600 # 8002d3b0 <__func__.0+0x2f8>
    80001d78:	0de290ef          	jal	8002ae56 <printf>
    80001d7c:	1a048663          	beqz	s1,80001f28 <check_xip_regs_2+0x3ac>
    80001d80:	0002b597          	auipc	a1,0x2b
    80001d84:	60858593          	addi	a1,a1,1544 # 8002d388 <__func__.0+0x2d0>
    80001d88:	0002b517          	auipc	a0,0x2b
    80001d8c:	64050513          	addi	a0,a0,1600 # 8002d3c8 <__func__.0+0x310>
    80001d90:	0c6290ef          	jal	8002ae56 <printf>
    80001d94:	0002b517          	auipc	a0,0x2b
    80001d98:	63c50513          	addi	a0,a0,1596 # 8002d3d0 <__func__.0+0x318>
    80001d9c:	0ba290ef          	jal	8002ae56 <printf>
    80001da0:	8626                	mv	a2,s1
    80001da2:	4681                	li	a3,0
    80001da4:	02d00593          	li	a1,45
    80001da8:	0002c517          	auipc	a0,0x2c
    80001dac:	ad050513          	addi	a0,a0,-1328 # 8002d878 <__func__.0+0x7c0>
    80001db0:	0a6290ef          	jal	8002ae56 <printf>
    80001db4:	02900513          	li	a0,41
    80001db8:	58d270ef          	jal	80029b44 <putchar>
    80001dbc:	4529                	li	a0,10
    80001dbe:	587270ef          	jal	80029b44 <putchar>
    80001dc2:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001dc4:	144024f3          	csrr	s1,sip
    80001dc8:	0002c617          	auipc	a2,0x2c
    80001dcc:	ac860613          	addi	a2,a2,-1336 # 8002d890 <__func__.0+0x7d8>
    80001dd0:	08200593          	li	a1,130
    80001dd4:	0002b517          	auipc	a0,0x2b
    80001dd8:	5dc50513          	addi	a0,a0,1500 # 8002d3b0 <__func__.0+0x2f8>
    80001ddc:	07a290ef          	jal	8002ae56 <printf>
    80001de0:	18048163          	beqz	s1,80001f62 <check_xip_regs_2+0x3e6>
    80001de4:	0002b597          	auipc	a1,0x2b
    80001de8:	5a458593          	addi	a1,a1,1444 # 8002d388 <__func__.0+0x2d0>
    80001dec:	0002b517          	auipc	a0,0x2b
    80001df0:	5dc50513          	addi	a0,a0,1500 # 8002d3c8 <__func__.0+0x310>
    80001df4:	062290ef          	jal	8002ae56 <printf>
    80001df8:	0002b517          	auipc	a0,0x2b
    80001dfc:	5d850513          	addi	a0,a0,1496 # 8002d3d0 <__func__.0+0x318>
    80001e00:	056290ef          	jal	8002ae56 <printf>
    80001e04:	8626                	mv	a2,s1
    80001e06:	4681                	li	a3,0
    80001e08:	02d00593          	li	a1,45
    80001e0c:	0002c517          	auipc	a0,0x2c
    80001e10:	a6c50513          	addi	a0,a0,-1428 # 8002d878 <__func__.0+0x7c0>
    80001e14:	042290ef          	jal	8002ae56 <printf>
    80001e18:	02900513          	li	a0,41
    80001e1c:	529270ef          	jal	80029b44 <putchar>
    80001e20:	4529                	li	a0,10
    80001e22:	523270ef          	jal	80029b44 <putchar>
    80001e26:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001e28:	244024f3          	csrr	s1,vsip
    80001e2c:	0002c617          	auipc	a2,0x2c
    80001e30:	a3460613          	addi	a2,a2,-1484 # 8002d860 <__func__.0+0x7a8>
    80001e34:	08200593          	li	a1,130
    80001e38:	0002b517          	auipc	a0,0x2b
    80001e3c:	57850513          	addi	a0,a0,1400 # 8002d3b0 <__func__.0+0x2f8>
    80001e40:	016290ef          	jal	8002ae56 <printf>
    80001e44:	14048c63          	beqz	s1,80001f9c <check_xip_regs_2+0x420>
    80001e48:	0002b597          	auipc	a1,0x2b
    80001e4c:	54058593          	addi	a1,a1,1344 # 8002d388 <__func__.0+0x2d0>
    80001e50:	0002b517          	auipc	a0,0x2b
    80001e54:	57850513          	addi	a0,a0,1400 # 8002d3c8 <__func__.0+0x310>
    80001e58:	7ff280ef          	jal	8002ae56 <printf>
    80001e5c:	0002b517          	auipc	a0,0x2b
    80001e60:	57450513          	addi	a0,a0,1396 # 8002d3d0 <__func__.0+0x318>
    80001e64:	7f3280ef          	jal	8002ae56 <printf>
    80001e68:	8626                	mv	a2,s1
    80001e6a:	4681                	li	a3,0
    80001e6c:	02d00593          	li	a1,45
    80001e70:	0002c517          	auipc	a0,0x2c
    80001e74:	a0850513          	addi	a0,a0,-1528 # 8002d878 <__func__.0+0x7c0>
    80001e78:	7df280ef          	jal	8002ae56 <printf>
    80001e7c:	02900513          	li	a0,41
    80001e80:	4c5270ef          	jal	80029b44 <putchar>
    80001e84:	4529                	li	a0,10
    80001e86:	4bf270ef          	jal	80029b44 <putchar>
    80001e8a:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001e8c:	4509                	li	a0,2
    80001e8e:	87aff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e92:	144024f3          	csrr	s1,sip
    80001e96:	0002c617          	auipc	a2,0x2c
    80001e9a:	a0260613          	addi	a2,a2,-1534 # 8002d898 <__func__.0+0x7e0>
    80001e9e:	08200593          	li	a1,130
    80001ea2:	0002b517          	auipc	a0,0x2b
    80001ea6:	50e50513          	addi	a0,a0,1294 # 8002d3b0 <__func__.0+0x2f8>
    80001eaa:	7ad280ef          	jal	8002ae56 <printf>
    80001eae:	10048563          	beqz	s1,80001fb8 <check_xip_regs_2+0x43c>
    80001eb2:	0002b597          	auipc	a1,0x2b
    80001eb6:	4d658593          	addi	a1,a1,1238 # 8002d388 <__func__.0+0x2d0>
    80001eba:	0002b517          	auipc	a0,0x2b
    80001ebe:	50e50513          	addi	a0,a0,1294 # 8002d3c8 <__func__.0+0x310>
    80001ec2:	795280ef          	jal	8002ae56 <printf>
    80001ec6:	0002b517          	auipc	a0,0x2b
    80001eca:	50a50513          	addi	a0,a0,1290 # 8002d3d0 <__func__.0+0x318>
    80001ece:	789280ef          	jal	8002ae56 <printf>
    80001ed2:	8626                	mv	a2,s1
    80001ed4:	4681                	li	a3,0
    80001ed6:	02d00593          	li	a1,45
    80001eda:	0002c517          	auipc	a0,0x2c
    80001ede:	99e50513          	addi	a0,a0,-1634 # 8002d878 <__func__.0+0x7c0>
    80001ee2:	775280ef          	jal	8002ae56 <printf>
    80001ee6:	02900513          	li	a0,41
    80001eea:	45b270ef          	jal	80029b44 <putchar>
    80001eee:	4529                	li	a0,10
    80001ef0:	455270ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);   
    80001ef4:	4511                	li	a0,4
    80001ef6:	812ff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001efa:	4401                	li	s0,0

    TEST_END();
    80001efc:	0002b597          	auipc	a1,0x2b
    80001f00:	48c58593          	addi	a1,a1,1164 # 8002d388 <__func__.0+0x2d0>
    80001f04:	0002b517          	auipc	a0,0x2b
    80001f08:	52c50513          	addi	a0,a0,1324 # 8002d430 <__func__.0+0x378>
    80001f0c:	74b280ef          	jal	8002ae56 <printf>
    80001f10:	4511                	li	a0,4
    80001f12:	ff7fe0ef          	jal	80000f08 <goto_priv>
    80001f16:	90fff0ef          	jal	80001824 <reset_state>
}
    80001f1a:	60e2                	ld	ra,24(sp)
    80001f1c:	8522                	mv	a0,s0
    80001f1e:	6442                	ld	s0,16(sp)
    80001f20:	64a2                	ld	s1,8(sp)
    80001f22:	6902                	ld	s2,0(sp)
    80001f24:	6105                	addi	sp,sp,32
    80001f26:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f28:	0002b597          	auipc	a1,0x2b
    80001f2c:	45058593          	addi	a1,a1,1104 # 8002d378 <__func__.0+0x2c0>
    80001f30:	0002b517          	auipc	a0,0x2b
    80001f34:	49850513          	addi	a0,a0,1176 # 8002d3c8 <__func__.0+0x310>
    80001f38:	71f280ef          	jal	8002ae56 <printf>
    80001f3c:	4529                	li	a0,10
    80001f3e:	407270ef          	jal	80029b44 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001f42:	144024f3          	csrr	s1,sip
    80001f46:	0002c617          	auipc	a2,0x2c
    80001f4a:	94a60613          	addi	a2,a2,-1718 # 8002d890 <__func__.0+0x7d8>
    80001f4e:	08200593          	li	a1,130
    80001f52:	0002b517          	auipc	a0,0x2b
    80001f56:	45e50513          	addi	a0,a0,1118 # 8002d3b0 <__func__.0+0x2f8>
    80001f5a:	6fd280ef          	jal	8002ae56 <printf>
    80001f5e:	e80493e3          	bnez	s1,80001de4 <check_xip_regs_2+0x268>
    80001f62:	0002b597          	auipc	a1,0x2b
    80001f66:	41658593          	addi	a1,a1,1046 # 8002d378 <__func__.0+0x2c0>
    80001f6a:	0002b517          	auipc	a0,0x2b
    80001f6e:	45e50513          	addi	a0,a0,1118 # 8002d3c8 <__func__.0+0x310>
    80001f72:	6e5280ef          	jal	8002ae56 <printf>
    80001f76:	4529                	li	a0,10
    80001f78:	3cd270ef          	jal	80029b44 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001f7c:	244024f3          	csrr	s1,vsip
    80001f80:	0002c617          	auipc	a2,0x2c
    80001f84:	8e060613          	addi	a2,a2,-1824 # 8002d860 <__func__.0+0x7a8>
    80001f88:	08200593          	li	a1,130
    80001f8c:	0002b517          	auipc	a0,0x2b
    80001f90:	42450513          	addi	a0,a0,1060 # 8002d3b0 <__func__.0+0x2f8>
    80001f94:	6c3280ef          	jal	8002ae56 <printf>
    80001f98:	ea0498e3          	bnez	s1,80001e48 <check_xip_regs_2+0x2cc>
    80001f9c:	0002b597          	auipc	a1,0x2b
    80001fa0:	3dc58593          	addi	a1,a1,988 # 8002d378 <__func__.0+0x2c0>
    80001fa4:	0002b517          	auipc	a0,0x2b
    80001fa8:	42450513          	addi	a0,a0,1060 # 8002d3c8 <__func__.0+0x310>
    80001fac:	6ab280ef          	jal	8002ae56 <printf>
    80001fb0:	4529                	li	a0,10
    80001fb2:	393270ef          	jal	80029b44 <putchar>
    80001fb6:	bdd9                	j	80001e8c <check_xip_regs_2+0x310>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001fb8:	0002b597          	auipc	a1,0x2b
    80001fbc:	3c058593          	addi	a1,a1,960 # 8002d378 <__func__.0+0x2c0>
    80001fc0:	0002b517          	auipc	a0,0x2b
    80001fc4:	40850513          	addi	a0,a0,1032 # 8002d3c8 <__func__.0+0x310>
    80001fc8:	68f280ef          	jal	8002ae56 <printf>
    80001fcc:	4529                	li	a0,10
    80001fce:	377270ef          	jal	80029b44 <putchar>
    80001fd2:	f20401e3          	beqz	s0,80001ef4 <check_xip_regs_2+0x378>
    goto_priv(PRIV_M);   
    80001fd6:	4511                	li	a0,4
    80001fd8:	f31fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001fdc:	4405                	li	s0,1
    TEST_END();
    80001fde:	0002b597          	auipc	a1,0x2b
    80001fe2:	39a58593          	addi	a1,a1,922 # 8002d378 <__func__.0+0x2c0>
    80001fe6:	bf39                	j	80001f04 <check_xip_regs_2+0x388>
    check_csr_rd("sip", sip, 0x222);    
    80001fe8:	0002b597          	auipc	a1,0x2b
    80001fec:	39058593          	addi	a1,a1,912 # 8002d378 <__func__.0+0x2c0>
    80001ff0:	0002b517          	auipc	a0,0x2b
    80001ff4:	3d850513          	addi	a0,a0,984 # 8002d3c8 <__func__.0+0x310>
    80001ff8:	65f280ef          	jal	8002ae56 <printf>
    80001ffc:	4529                	li	a0,10
    80001ffe:	347270ef          	jal	80029b44 <putchar>
    80002002:	b149                	j	80001c84 <check_xip_regs_2+0x108>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80002004:	0002b597          	auipc	a1,0x2b
    80002008:	37458593          	addi	a1,a1,884 # 8002d378 <__func__.0+0x2c0>
    8000200c:	0002b517          	auipc	a0,0x2b
    80002010:	3bc50513          	addi	a0,a0,956 # 8002d3c8 <__func__.0+0x310>
    80002014:	643280ef          	jal	8002ae56 <printf>
    80002018:	4529                	li	a0,10
    8000201a:	32b270ef          	jal	80029b44 <putchar>
    8000201e:	bb25                	j	80001d56 <check_xip_regs_2+0x1da>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80002020:	0002b597          	auipc	a1,0x2b
    80002024:	35858593          	addi	a1,a1,856 # 8002d378 <__func__.0+0x2c0>
    80002028:	0002b517          	auipc	a0,0x2b
    8000202c:	3a050513          	addi	a0,a0,928 # 8002d3c8 <__func__.0+0x310>
    80002030:	627280ef          	jal	8002ae56 <printf>
    80002034:	4529                	li	a0,10
    80002036:	30f270ef          	jal	80029b44 <putchar>
    8000203a:	b945                	j	80001cea <check_xip_regs_2+0x16e>
    check_csr_rd("hip", CSR_HIP, 0x4);
    8000203c:	0002b597          	auipc	a1,0x2b
    80002040:	33c58593          	addi	a1,a1,828 # 8002d378 <__func__.0+0x2c0>
    80002044:	0002b517          	auipc	a0,0x2b
    80002048:	38450513          	addi	a0,a0,900 # 8002d3c8 <__func__.0+0x310>
    8000204c:	60b280ef          	jal	8002ae56 <printf>
    80002050:	4529                	li	a0,10
    80002052:	2f3270ef          	jal	80029b44 <putchar>
    80002056:	4405                	li	s0,1
    80002058:	b6d1                	j	80001c1c <check_xip_regs_2+0xa0>

000000008000205a <check_xip_regs_3>:

bool check_xip_regs_3(){
    8000205a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000205c:	00029597          	auipc	a1,0x29
    80002060:	34c58593          	addi	a1,a1,844 # 8002b3a8 <__func__.1>
    80002064:	0002b517          	auipc	a0,0x2b
    80002068:	33450513          	addi	a0,a0,820 # 8002d398 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    8000206c:	ec06                	sd	ra,24(sp)
    8000206e:	e822                	sd	s0,16(sp)
    80002070:	e426                	sd	s1,8(sp)
    80002072:	e04a                	sd	s2,0(sp)
    TEST_START();
    80002074:	5e3280ef          	jal	8002ae56 <printf>
    80002078:	4529                	li	a0,10
    8000207a:	2cb270ef          	jal	80029b44 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    8000207e:	57fd                	li	a5,-1
    80002080:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80002084:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80002088:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    8000208c:	645025f3          	csrr	a1,hvip
    80002090:	0002c517          	auipc	a0,0x2c
    80002094:	82050513          	addi	a0,a0,-2016 # 8002d8b0 <__func__.0+0x7f8>
    80002098:	5bf280ef          	jal	8002ae56 <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    8000209c:	645024f3          	csrr	s1,hvip
    800020a0:	7479                	lui	s0,0xffffe
    800020a2:	0002c617          	auipc	a2,0x2c
    800020a6:	81e60613          	addi	a2,a2,-2018 # 8002d8c0 <__func__.0+0x808>
    800020aa:	08200593          	li	a1,130
    800020ae:	0002b517          	auipc	a0,0x2b
    800020b2:	30250513          	addi	a0,a0,770 # 8002d3b0 <__func__.0+0x2f8>
    800020b6:	44440413          	addi	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    800020ba:	59d280ef          	jal	8002ae56 <printf>
    800020be:	4a848663          	beq	s1,s0,8000256a <check_xip_regs_3+0x510>
    800020c2:	0002b597          	auipc	a1,0x2b
    800020c6:	2c658593          	addi	a1,a1,710 # 8002d388 <__func__.0+0x2d0>
    800020ca:	0002b517          	auipc	a0,0x2b
    800020ce:	2fe50513          	addi	a0,a0,766 # 8002d3c8 <__func__.0+0x310>
    800020d2:	585280ef          	jal	8002ae56 <printf>
    800020d6:	0002b517          	auipc	a0,0x2b
    800020da:	2fa50513          	addi	a0,a0,762 # 8002d3d0 <__func__.0+0x318>
    800020de:	579280ef          	jal	8002ae56 <printf>
    800020e2:	86a2                	mv	a3,s0
    800020e4:	8626                	mv	a2,s1
    800020e6:	02d00593          	li	a1,45
    800020ea:	0002b517          	auipc	a0,0x2b
    800020ee:	78e50513          	addi	a0,a0,1934 # 8002d878 <__func__.0+0x7c0>
    800020f2:	565280ef          	jal	8002ae56 <printf>
    800020f6:	02900513          	li	a0,41
    800020fa:	24b270ef          	jal	80029b44 <putchar>
    800020fe:	4529                	li	a0,10
    80002100:	245270ef          	jal	80029b44 <putchar>
    80002104:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002106:	644024f3          	csrr	s1,hip
    8000210a:	0002b617          	auipc	a2,0x2b
    8000210e:	76660613          	addi	a2,a2,1894 # 8002d870 <__func__.0+0x7b8>
    80002112:	08200593          	li	a1,130
    80002116:	0002b517          	auipc	a0,0x2b
    8000211a:	29a50513          	addi	a0,a0,666 # 8002d3b0 <__func__.0+0x2f8>
    8000211e:	44400913          	li	s2,1092
    80002122:	535280ef          	jal	8002ae56 <printf>
    80002126:	3f248863          	beq	s1,s2,80002516 <check_xip_regs_3+0x4bc>
    8000212a:	0002b597          	auipc	a1,0x2b
    8000212e:	25e58593          	addi	a1,a1,606 # 8002d388 <__func__.0+0x2d0>
    80002132:	0002b517          	auipc	a0,0x2b
    80002136:	29650513          	addi	a0,a0,662 # 8002d3c8 <__func__.0+0x310>
    8000213a:	51d280ef          	jal	8002ae56 <printf>
    8000213e:	0002b517          	auipc	a0,0x2b
    80002142:	29250513          	addi	a0,a0,658 # 8002d3d0 <__func__.0+0x318>
    80002146:	511280ef          	jal	8002ae56 <printf>
    8000214a:	86ca                	mv	a3,s2
    8000214c:	8626                	mv	a2,s1
    8000214e:	02d00593          	li	a1,45
    80002152:	0002b517          	auipc	a0,0x2b
    80002156:	72650513          	addi	a0,a0,1830 # 8002d878 <__func__.0+0x7c0>
    8000215a:	4fd280ef          	jal	8002ae56 <printf>
    8000215e:	02900513          	li	a0,41
    80002162:	1e3270ef          	jal	80029b44 <putchar>
    80002166:	4529                	li	a0,10
    80002168:	1dd270ef          	jal	80029b44 <putchar>
    8000216c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8000216e:	144024f3          	csrr	s1,sip
    80002172:	0002b617          	auipc	a2,0x2b
    80002176:	71e60613          	addi	a2,a2,1822 # 8002d890 <__func__.0+0x7d8>
    8000217a:	08200593          	li	a1,130
    8000217e:	0002b517          	auipc	a0,0x2b
    80002182:	23250513          	addi	a0,a0,562 # 8002d3b0 <__func__.0+0x2f8>
    80002186:	4d1280ef          	jal	8002ae56 <printf>
    8000218a:	2e048763          	beqz	s1,80002478 <check_xip_regs_3+0x41e>
    8000218e:	0002b597          	auipc	a1,0x2b
    80002192:	1fa58593          	addi	a1,a1,506 # 8002d388 <__func__.0+0x2d0>
    80002196:	0002b517          	auipc	a0,0x2b
    8000219a:	23250513          	addi	a0,a0,562 # 8002d3c8 <__func__.0+0x310>
    8000219e:	4b9280ef          	jal	8002ae56 <printf>
    800021a2:	0002b517          	auipc	a0,0x2b
    800021a6:	22e50513          	addi	a0,a0,558 # 8002d3d0 <__func__.0+0x318>
    800021aa:	4ad280ef          	jal	8002ae56 <printf>
    800021ae:	8626                	mv	a2,s1
    800021b0:	4681                	li	a3,0
    800021b2:	02d00593          	li	a1,45
    800021b6:	0002b517          	auipc	a0,0x2b
    800021ba:	6c250513          	addi	a0,a0,1730 # 8002d878 <__func__.0+0x7c0>
    800021be:	499280ef          	jal	8002ae56 <printf>
    800021c2:	02900513          	li	a0,41
    800021c6:	17f270ef          	jal	80029b44 <putchar>
    800021ca:	4529                	li	a0,10
    800021cc:	179270ef          	jal	80029b44 <putchar>
    800021d0:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    800021d2:	244024f3          	csrr	s1,vsip
    800021d6:	0002b617          	auipc	a2,0x2b
    800021da:	68a60613          	addi	a2,a2,1674 # 8002d860 <__func__.0+0x7a8>
    800021de:	08200593          	li	a1,130
    800021e2:	0002b517          	auipc	a0,0x2b
    800021e6:	1ce50513          	addi	a0,a0,462 # 8002d3b0 <__func__.0+0x2f8>
    800021ea:	22200913          	li	s2,546
    800021ee:	469280ef          	jal	8002ae56 <printf>
    800021f2:	35248e63          	beq	s1,s2,8000254e <check_xip_regs_3+0x4f4>
    800021f6:	0002b597          	auipc	a1,0x2b
    800021fa:	19258593          	addi	a1,a1,402 # 8002d388 <__func__.0+0x2d0>
    800021fe:	0002b517          	auipc	a0,0x2b
    80002202:	1ca50513          	addi	a0,a0,458 # 8002d3c8 <__func__.0+0x310>
    80002206:	451280ef          	jal	8002ae56 <printf>
    8000220a:	0002b517          	auipc	a0,0x2b
    8000220e:	1c650513          	addi	a0,a0,454 # 8002d3d0 <__func__.0+0x318>
    80002212:	445280ef          	jal	8002ae56 <printf>
    80002216:	86ca                	mv	a3,s2
    80002218:	8626                	mv	a2,s1
    8000221a:	02d00593          	li	a1,45
    8000221e:	0002b517          	auipc	a0,0x2b
    80002222:	65a50513          	addi	a0,a0,1626 # 8002d878 <__func__.0+0x7c0>
    80002226:	431280ef          	jal	8002ae56 <printf>
    8000222a:	02900513          	li	a0,41
    8000222e:	117270ef          	jal	80029b44 <putchar>
    80002232:	4529                	li	a0,10
    80002234:	111270ef          	jal	80029b44 <putchar>
    80002238:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000223a:	4509                	li	a0,2
    8000223c:	ccdfe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80002240:	144024f3          	csrr	s1,sip
    80002244:	0002b617          	auipc	a2,0x2b
    80002248:	65460613          	addi	a2,a2,1620 # 8002d898 <__func__.0+0x7e0>
    8000224c:	08200593          	li	a1,130
    80002250:	0002b517          	auipc	a0,0x2b
    80002254:	16050513          	addi	a0,a0,352 # 8002d3b0 <__func__.0+0x2f8>
    80002258:	22200913          	li	s2,546
    8000225c:	3fb280ef          	jal	8002ae56 <printf>
    80002260:	2d248963          	beq	s1,s2,80002532 <check_xip_regs_3+0x4d8>
    80002264:	0002b597          	auipc	a1,0x2b
    80002268:	12458593          	addi	a1,a1,292 # 8002d388 <__func__.0+0x2d0>
    8000226c:	0002b517          	auipc	a0,0x2b
    80002270:	15c50513          	addi	a0,a0,348 # 8002d3c8 <__func__.0+0x310>
    80002274:	3e3280ef          	jal	8002ae56 <printf>
    80002278:	0002b517          	auipc	a0,0x2b
    8000227c:	15850513          	addi	a0,a0,344 # 8002d3d0 <__func__.0+0x318>
    80002280:	3d7280ef          	jal	8002ae56 <printf>
    80002284:	86ca                	mv	a3,s2
    80002286:	8626                	mv	a2,s1
    80002288:	02d00593          	li	a1,45
    8000228c:	0002b517          	auipc	a0,0x2b
    80002290:	5ec50513          	addi	a0,a0,1516 # 8002d878 <__func__.0+0x7c0>
    80002294:	3c3280ef          	jal	8002ae56 <printf>
    80002298:	02900513          	li	a0,41
    8000229c:	0a9270ef          	jal	80029b44 <putchar>
    800022a0:	4529                	li	a0,10
    800022a2:	0a3270ef          	jal	80029b44 <putchar>
    800022a6:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800022a8:	4511                	li	a0,4
    800022aa:	c5ffe0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    800022ae:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800022b2:	644024f3          	csrr	s1,hip
    800022b6:	0002b617          	auipc	a2,0x2b
    800022ba:	5ba60613          	addi	a2,a2,1466 # 8002d870 <__func__.0+0x7b8>
    800022be:	08200593          	li	a1,130
    800022c2:	0002b517          	auipc	a0,0x2b
    800022c6:	0ee50513          	addi	a0,a0,238 # 8002d3b0 <__func__.0+0x2f8>
    800022ca:	38d280ef          	jal	8002ae56 <printf>
    800022ce:	22048663          	beqz	s1,800024fa <check_xip_regs_3+0x4a0>
    800022d2:	0002b597          	auipc	a1,0x2b
    800022d6:	0b658593          	addi	a1,a1,182 # 8002d388 <__func__.0+0x2d0>
    800022da:	0002b517          	auipc	a0,0x2b
    800022de:	0ee50513          	addi	a0,a0,238 # 8002d3c8 <__func__.0+0x310>
    800022e2:	375280ef          	jal	8002ae56 <printf>
    800022e6:	0002b517          	auipc	a0,0x2b
    800022ea:	0ea50513          	addi	a0,a0,234 # 8002d3d0 <__func__.0+0x318>
    800022ee:	369280ef          	jal	8002ae56 <printf>
    800022f2:	8626                	mv	a2,s1
    800022f4:	4681                	li	a3,0
    800022f6:	02d00593          	li	a1,45
    800022fa:	0002b517          	auipc	a0,0x2b
    800022fe:	57e50513          	addi	a0,a0,1406 # 8002d878 <__func__.0+0x7c0>
    80002302:	355280ef          	jal	8002ae56 <printf>
    80002306:	02900513          	li	a0,41
    8000230a:	03b270ef          	jal	80029b44 <putchar>
    8000230e:	4529                	li	a0,10
    80002310:	035270ef          	jal	80029b44 <putchar>
    80002314:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80002316:	144024f3          	csrr	s1,sip
    8000231a:	0002b617          	auipc	a2,0x2b
    8000231e:	57660613          	addi	a2,a2,1398 # 8002d890 <__func__.0+0x7d8>
    80002322:	08200593          	li	a1,130
    80002326:	0002b517          	auipc	a0,0x2b
    8000232a:	08a50513          	addi	a0,a0,138 # 8002d3b0 <__func__.0+0x2f8>
    8000232e:	329280ef          	jal	8002ae56 <printf>
    80002332:	1a048663          	beqz	s1,800024de <check_xip_regs_3+0x484>
    80002336:	0002b597          	auipc	a1,0x2b
    8000233a:	05258593          	addi	a1,a1,82 # 8002d388 <__func__.0+0x2d0>
    8000233e:	0002b517          	auipc	a0,0x2b
    80002342:	08a50513          	addi	a0,a0,138 # 8002d3c8 <__func__.0+0x310>
    80002346:	311280ef          	jal	8002ae56 <printf>
    8000234a:	0002b517          	auipc	a0,0x2b
    8000234e:	08650513          	addi	a0,a0,134 # 8002d3d0 <__func__.0+0x318>
    80002352:	305280ef          	jal	8002ae56 <printf>
    80002356:	8626                	mv	a2,s1
    80002358:	4681                	li	a3,0
    8000235a:	02d00593          	li	a1,45
    8000235e:	0002b517          	auipc	a0,0x2b
    80002362:	51a50513          	addi	a0,a0,1306 # 8002d878 <__func__.0+0x7c0>
    80002366:	2f1280ef          	jal	8002ae56 <printf>
    8000236a:	02900513          	li	a0,41
    8000236e:	7d6270ef          	jal	80029b44 <putchar>
    80002372:	4529                	li	a0,10
    80002374:	7d0270ef          	jal	80029b44 <putchar>
    80002378:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8000237a:	244024f3          	csrr	s1,vsip
    8000237e:	0002b617          	auipc	a2,0x2b
    80002382:	4e260613          	addi	a2,a2,1250 # 8002d860 <__func__.0+0x7a8>
    80002386:	08200593          	li	a1,130
    8000238a:	0002b517          	auipc	a0,0x2b
    8000238e:	02650513          	addi	a0,a0,38 # 8002d3b0 <__func__.0+0x2f8>
    80002392:	2c5280ef          	jal	8002ae56 <printf>
    80002396:	12048663          	beqz	s1,800024c2 <check_xip_regs_3+0x468>
    8000239a:	0002b597          	auipc	a1,0x2b
    8000239e:	fee58593          	addi	a1,a1,-18 # 8002d388 <__func__.0+0x2d0>
    800023a2:	0002b517          	auipc	a0,0x2b
    800023a6:	02650513          	addi	a0,a0,38 # 8002d3c8 <__func__.0+0x310>
    800023aa:	2ad280ef          	jal	8002ae56 <printf>
    800023ae:	0002b517          	auipc	a0,0x2b
    800023b2:	02250513          	addi	a0,a0,34 # 8002d3d0 <__func__.0+0x318>
    800023b6:	2a1280ef          	jal	8002ae56 <printf>
    800023ba:	8626                	mv	a2,s1
    800023bc:	4681                	li	a3,0
    800023be:	02d00593          	li	a1,45
    800023c2:	0002b517          	auipc	a0,0x2b
    800023c6:	4b650513          	addi	a0,a0,1206 # 8002d878 <__func__.0+0x7c0>
    800023ca:	28d280ef          	jal	8002ae56 <printf>
    800023ce:	02900513          	li	a0,41
    800023d2:	772270ef          	jal	80029b44 <putchar>
    800023d6:	4529                	li	a0,10
    800023d8:	76c270ef          	jal	80029b44 <putchar>
    800023dc:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800023de:	4509                	li	a0,2
    800023e0:	b29fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800023e4:	144024f3          	csrr	s1,sip
    800023e8:	0002b617          	auipc	a2,0x2b
    800023ec:	4b060613          	addi	a2,a2,1200 # 8002d898 <__func__.0+0x7e0>
    800023f0:	08200593          	li	a1,130
    800023f4:	0002b517          	auipc	a0,0x2b
    800023f8:	fbc50513          	addi	a0,a0,-68 # 8002d3b0 <__func__.0+0x2f8>
    800023fc:	25b280ef          	jal	8002ae56 <printf>
    80002400:	c8d1                	beqz	s1,80002494 <check_xip_regs_3+0x43a>
    80002402:	0002b597          	auipc	a1,0x2b
    80002406:	f8658593          	addi	a1,a1,-122 # 8002d388 <__func__.0+0x2d0>
    8000240a:	0002b517          	auipc	a0,0x2b
    8000240e:	fbe50513          	addi	a0,a0,-66 # 8002d3c8 <__func__.0+0x310>
    80002412:	245280ef          	jal	8002ae56 <printf>
    80002416:	0002b517          	auipc	a0,0x2b
    8000241a:	fba50513          	addi	a0,a0,-70 # 8002d3d0 <__func__.0+0x318>
    8000241e:	239280ef          	jal	8002ae56 <printf>
    80002422:	8626                	mv	a2,s1
    80002424:	4681                	li	a3,0
    80002426:	02d00593          	li	a1,45
    8000242a:	0002b517          	auipc	a0,0x2b
    8000242e:	44e50513          	addi	a0,a0,1102 # 8002d878 <__func__.0+0x7c0>
    80002432:	225280ef          	jal	8002ae56 <printf>
    80002436:	02900513          	li	a0,41
    8000243a:	70a270ef          	jal	80029b44 <putchar>
    8000243e:	4529                	li	a0,10
    80002440:	704270ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80002444:	4511                	li	a0,4
    80002446:	ac3fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000244a:	4401                	li	s0,0

    TEST_END();
    8000244c:	0002b597          	auipc	a1,0x2b
    80002450:	f3c58593          	addi	a1,a1,-196 # 8002d388 <__func__.0+0x2d0>
    80002454:	0002b517          	auipc	a0,0x2b
    80002458:	fdc50513          	addi	a0,a0,-36 # 8002d430 <__func__.0+0x378>
    8000245c:	1fb280ef          	jal	8002ae56 <printf>
    80002460:	4511                	li	a0,4
    80002462:	aa7fe0ef          	jal	80000f08 <goto_priv>
    80002466:	bbeff0ef          	jal	80001824 <reset_state>
}
    8000246a:	60e2                	ld	ra,24(sp)
    8000246c:	8522                	mv	a0,s0
    8000246e:	6442                	ld	s0,16(sp)
    80002470:	64a2                	ld	s1,8(sp)
    80002472:	6902                	ld	s2,0(sp)
    80002474:	6105                	addi	sp,sp,32
    80002476:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    80002478:	0002b597          	auipc	a1,0x2b
    8000247c:	f0058593          	addi	a1,a1,-256 # 8002d378 <__func__.0+0x2c0>
    80002480:	0002b517          	auipc	a0,0x2b
    80002484:	f4850513          	addi	a0,a0,-184 # 8002d3c8 <__func__.0+0x310>
    80002488:	1cf280ef          	jal	8002ae56 <printf>
    8000248c:	4529                	li	a0,10
    8000248e:	6b6270ef          	jal	80029b44 <putchar>
    80002492:	b381                	j	800021d2 <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002494:	0002b597          	auipc	a1,0x2b
    80002498:	ee458593          	addi	a1,a1,-284 # 8002d378 <__func__.0+0x2c0>
    8000249c:	0002b517          	auipc	a0,0x2b
    800024a0:	f2c50513          	addi	a0,a0,-212 # 8002d3c8 <__func__.0+0x310>
    800024a4:	1b3280ef          	jal	8002ae56 <printf>
    800024a8:	4529                	li	a0,10
    800024aa:	69a270ef          	jal	80029b44 <putchar>
    800024ae:	d859                	beqz	s0,80002444 <check_xip_regs_3+0x3ea>
    goto_priv(PRIV_M);
    800024b0:	4511                	li	a0,4
    800024b2:	a57fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800024b6:	4405                	li	s0,1
    TEST_END();
    800024b8:	0002b597          	auipc	a1,0x2b
    800024bc:	ec058593          	addi	a1,a1,-320 # 8002d378 <__func__.0+0x2c0>
    800024c0:	bf51                	j	80002454 <check_xip_regs_3+0x3fa>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800024c2:	0002b597          	auipc	a1,0x2b
    800024c6:	eb658593          	addi	a1,a1,-330 # 8002d378 <__func__.0+0x2c0>
    800024ca:	0002b517          	auipc	a0,0x2b
    800024ce:	efe50513          	addi	a0,a0,-258 # 8002d3c8 <__func__.0+0x310>
    800024d2:	185280ef          	jal	8002ae56 <printf>
    800024d6:	4529                	li	a0,10
    800024d8:	66c270ef          	jal	80029b44 <putchar>
    800024dc:	b709                	j	800023de <check_xip_regs_3+0x384>
    check_csr_rd("sip", sip, 0x0);
    800024de:	0002b597          	auipc	a1,0x2b
    800024e2:	e9a58593          	addi	a1,a1,-358 # 8002d378 <__func__.0+0x2c0>
    800024e6:	0002b517          	auipc	a0,0x2b
    800024ea:	ee250513          	addi	a0,a0,-286 # 8002d3c8 <__func__.0+0x310>
    800024ee:	169280ef          	jal	8002ae56 <printf>
    800024f2:	4529                	li	a0,10
    800024f4:	650270ef          	jal	80029b44 <putchar>
    800024f8:	b549                	j	8000237a <check_xip_regs_3+0x320>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800024fa:	0002b597          	auipc	a1,0x2b
    800024fe:	e7e58593          	addi	a1,a1,-386 # 8002d378 <__func__.0+0x2c0>
    80002502:	0002b517          	auipc	a0,0x2b
    80002506:	ec650513          	addi	a0,a0,-314 # 8002d3c8 <__func__.0+0x310>
    8000250a:	14d280ef          	jal	8002ae56 <printf>
    8000250e:	4529                	li	a0,10
    80002510:	634270ef          	jal	80029b44 <putchar>
    80002514:	b509                	j	80002316 <check_xip_regs_3+0x2bc>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002516:	0002b597          	auipc	a1,0x2b
    8000251a:	e6258593          	addi	a1,a1,-414 # 8002d378 <__func__.0+0x2c0>
    8000251e:	0002b517          	auipc	a0,0x2b
    80002522:	eaa50513          	addi	a0,a0,-342 # 8002d3c8 <__func__.0+0x310>
    80002526:	131280ef          	jal	8002ae56 <printf>
    8000252a:	4529                	li	a0,10
    8000252c:	618270ef          	jal	80029b44 <putchar>
    80002530:	b93d                	j	8000216e <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80002532:	0002b597          	auipc	a1,0x2b
    80002536:	e4658593          	addi	a1,a1,-442 # 8002d378 <__func__.0+0x2c0>
    8000253a:	0002b517          	auipc	a0,0x2b
    8000253e:	e8e50513          	addi	a0,a0,-370 # 8002d3c8 <__func__.0+0x310>
    80002542:	115280ef          	jal	8002ae56 <printf>
    80002546:	4529                	li	a0,10
    80002548:	5fc270ef          	jal	80029b44 <putchar>
    8000254c:	bbb1                	j	800022a8 <check_xip_regs_3+0x24e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    8000254e:	0002b597          	auipc	a1,0x2b
    80002552:	e2a58593          	addi	a1,a1,-470 # 8002d378 <__func__.0+0x2c0>
    80002556:	0002b517          	auipc	a0,0x2b
    8000255a:	e7250513          	addi	a0,a0,-398 # 8002d3c8 <__func__.0+0x310>
    8000255e:	0f9280ef          	jal	8002ae56 <printf>
    80002562:	4529                	li	a0,10
    80002564:	5e0270ef          	jal	80029b44 <putchar>
    80002568:	b9c9                	j	8000223a <check_xip_regs_3+0x1e0>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    8000256a:	0002b597          	auipc	a1,0x2b
    8000256e:	e0e58593          	addi	a1,a1,-498 # 8002d378 <__func__.0+0x2c0>
    80002572:	0002b517          	auipc	a0,0x2b
    80002576:	e5650513          	addi	a0,a0,-426 # 8002d3c8 <__func__.0+0x310>
    8000257a:	0dd280ef          	jal	8002ae56 <printf>
    8000257e:	4529                	li	a0,10
    80002580:	5c4270ef          	jal	80029b44 <putchar>
    80002584:	4405                	li	s0,1
    80002586:	b641                	j	80002106 <check_xip_regs_3+0xac>

0000000080002588 <interrupt_tests>:

bool interrupt_tests(){
    80002588:	1101                	addi	sp,sp,-32

    TEST_START();
    8000258a:	00029597          	auipc	a1,0x29
    8000258e:	e3658593          	addi	a1,a1,-458 # 8002b3c0 <__func__.0>
    80002592:	0002b517          	auipc	a0,0x2b
    80002596:	e0650513          	addi	a0,a0,-506 # 8002d398 <__func__.0+0x2e0>
bool interrupt_tests(){
    8000259a:	ec06                	sd	ra,24(sp)
    8000259c:	e822                	sd	s0,16(sp)
    8000259e:	e426                	sd	s1,8(sp)
    TEST_START();
    800025a0:	0b7280ef          	jal	8002ae56 <printf>
    800025a4:	4529                	li	a0,10
    800025a6:	59e270ef          	jal	80029b44 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    800025aa:	450d                	li	a0,3
    800025ac:	95dfe0ef          	jal	80000f08 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    800025b0:	02200793          	li	a5,34
    800025b4:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    800025b8:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    800025bc:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800025c0:	84dfe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    800025c4:	4509                	li	a0,2
    800025c6:	943fe0ef          	jal	80000f08 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    800025ca:	08200593          	li	a1,130
    800025ce:	0002b617          	auipc	a2,0x2b
    800025d2:	2fa60613          	addi	a2,a2,762 # 8002d8c8 <__func__.0+0x810>
    800025d6:	0002b517          	auipc	a0,0x2b
    800025da:	dda50513          	addi	a0,a0,-550 # 8002d3b0 <__func__.0+0x2f8>
    800025de:	079280ef          	jal	8002ae56 <printf>
    800025e2:	00052797          	auipc	a5,0x52
    800025e6:	a2f7c783          	lbu	a5,-1489(a5) # 80054011 <excpt+0x1>
    800025ea:	00052417          	auipc	s0,0x52
    800025ee:	a2640413          	addi	s0,s0,-1498 # 80054010 <excpt>
    800025f2:	0002b597          	auipc	a1,0x2b
    800025f6:	d9658593          	addi	a1,a1,-618 # 8002d388 <__func__.0+0x2d0>
    800025fa:	c799                	beqz	a5,80002608 <interrupt_tests+0x80>
    800025fc:	57fd                	li	a5,-1
    800025fe:	6418                	ld	a4,8(s0)
    80002600:	17fe                	slli	a5,a5,0x3f
    80002602:	0789                	addi	a5,a5,2
    80002604:	16f70863          	beq	a4,a5,80002774 <interrupt_tests+0x1ec>
    80002608:	0002b517          	auipc	a0,0x2b
    8000260c:	dc050513          	addi	a0,a0,-576 # 8002d3c8 <__func__.0+0x310>
    80002610:	047280ef          	jal	8002ae56 <printf>
    80002614:	00052797          	auipc	a5,0x52
    80002618:	9fd7c783          	lbu	a5,-1539(a5) # 80054011 <excpt+0x1>
    8000261c:	c799                	beqz	a5,8000262a <interrupt_tests+0xa2>
    8000261e:	57fd                	li	a5,-1
    80002620:	6418                	ld	a4,8(s0)
    80002622:	17fe                	slli	a5,a5,0x3f
    80002624:	0789                	addi	a5,a5,2
    80002626:	12f70f63          	beq	a4,a5,80002764 <interrupt_tests+0x1dc>
    8000262a:	0002b517          	auipc	a0,0x2b
    8000262e:	da650513          	addi	a0,a0,-602 # 8002d3d0 <__func__.0+0x318>
    80002632:	025280ef          	jal	8002ae56 <printf>
    80002636:	02900513          	li	a0,41
    8000263a:	50a270ef          	jal	80029b44 <putchar>
    8000263e:	4529                	li	a0,10
    80002640:	504270ef          	jal	80029b44 <putchar>
    80002644:	00052797          	auipc	a5,0x52
    80002648:	9cd7c783          	lbu	a5,-1587(a5) # 80054011 <excpt+0x1>
    8000264c:	4481                	li	s1,0
    8000264e:	c799                	beqz	a5,8000265c <interrupt_tests+0xd4>
    80002650:	57fd                	li	a5,-1
    80002652:	6418                	ld	a4,8(s0)
    80002654:	17fe                	slli	a5,a5,0x3f
    80002656:	0789                	addi	a5,a5,2
    80002658:	12f70e63          	beq	a4,a5,80002794 <interrupt_tests+0x20c>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    8000265c:	450d                	li	a0,3
    8000265e:	8abfe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    80002662:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    80002666:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    8000266a:	fa2fe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    8000266e:	4509                	li	a0,2
    80002670:	899fe0ef          	jal	80000f08 <goto_priv>
    CSRS(sie, 0x2);
    80002674:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    80002678:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    8000267c:	08200593          	li	a1,130
    80002680:	0002b617          	auipc	a2,0x2b
    80002684:	26860613          	addi	a2,a2,616 # 8002d8e8 <__func__.0+0x830>
    80002688:	0002b517          	auipc	a0,0x2b
    8000268c:	d2850513          	addi	a0,a0,-728 # 8002d3b0 <__func__.0+0x2f8>
    80002690:	7c6280ef          	jal	8002ae56 <printf>
    80002694:	00052797          	auipc	a5,0x52
    80002698:	97d7c783          	lbu	a5,-1667(a5) # 80054011 <excpt+0x1>
    8000269c:	0002b597          	auipc	a1,0x2b
    800026a0:	cec58593          	addi	a1,a1,-788 # 8002d388 <__func__.0+0x2d0>
    800026a4:	c799                	beqz	a5,800026b2 <interrupt_tests+0x12a>
    800026a6:	57fd                	li	a5,-1
    800026a8:	6418                	ld	a4,8(s0)
    800026aa:	17fe                	slli	a5,a5,0x3f
    800026ac:	0785                	addi	a5,a5,1
    800026ae:	0ef70b63          	beq	a4,a5,800027a4 <interrupt_tests+0x21c>
    800026b2:	0002b517          	auipc	a0,0x2b
    800026b6:	d1650513          	addi	a0,a0,-746 # 8002d3c8 <__func__.0+0x310>
    800026ba:	79c280ef          	jal	8002ae56 <printf>
    800026be:	00052797          	auipc	a5,0x52
    800026c2:	9537c783          	lbu	a5,-1709(a5) # 80054011 <excpt+0x1>
    800026c6:	c799                	beqz	a5,800026d4 <interrupt_tests+0x14c>
    800026c8:	57fd                	li	a5,-1
    800026ca:	6418                	ld	a4,8(s0)
    800026cc:	17fe                	slli	a5,a5,0x3f
    800026ce:	0785                	addi	a5,a5,1
    800026d0:	08f70263          	beq	a4,a5,80002754 <interrupt_tests+0x1cc>
    800026d4:	0002b517          	auipc	a0,0x2b
    800026d8:	cfc50513          	addi	a0,a0,-772 # 8002d3d0 <__func__.0+0x318>
    800026dc:	77a280ef          	jal	8002ae56 <printf>
    800026e0:	02900513          	li	a0,41
    800026e4:	460270ef          	jal	80029b44 <putchar>
    800026e8:	4529                	li	a0,10
    800026ea:	45a270ef          	jal	80029b44 <putchar>
    800026ee:	cca9                	beqz	s1,80002748 <interrupt_tests+0x1c0>
    800026f0:	00052497          	auipc	s1,0x52
    800026f4:	9214c483          	lbu	s1,-1759(s1) # 80054011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    800026f8:	0002b597          	auipc	a1,0x2b
    800026fc:	c9058593          	addi	a1,a1,-880 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    80002700:	c881                	beqz	s1,80002710 <interrupt_tests+0x188>
    80002702:	57fd                	li	a5,-1
    80002704:	6418                	ld	a4,8(s0)
    80002706:	17fe                	slli	a5,a5,0x3f
    80002708:	0785                	addi	a5,a5,1
    8000270a:	02f70463          	beq	a4,a5,80002732 <interrupt_tests+0x1aa>
    8000270e:	4481                	li	s1,0
    TEST_END();
    80002710:	0002b517          	auipc	a0,0x2b
    80002714:	d2050513          	addi	a0,a0,-736 # 8002d430 <__func__.0+0x378>
    80002718:	73e280ef          	jal	8002ae56 <printf>
    8000271c:	4511                	li	a0,4
    8000271e:	feafe0ef          	jal	80000f08 <goto_priv>
    80002722:	902ff0ef          	jal	80001824 <reset_state>
}
    80002726:	60e2                	ld	ra,24(sp)
    80002728:	6442                	ld	s0,16(sp)
    8000272a:	8526                	mv	a0,s1
    8000272c:	64a2                	ld	s1,8(sp)
    8000272e:	6105                	addi	sp,sp,32
    80002730:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    80002732:	00052717          	auipc	a4,0x52
    80002736:	8e272703          	lw	a4,-1822(a4) # 80054014 <excpt+0x4>
    8000273a:	4789                	li	a5,2
    TEST_END();
    8000273c:	0002b597          	auipc	a1,0x2b
    80002740:	c3c58593          	addi	a1,a1,-964 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    80002744:	fcf706e3          	beq	a4,a5,80002710 <interrupt_tests+0x188>
    80002748:	4481                	li	s1,0
    TEST_END();
    8000274a:	0002b597          	auipc	a1,0x2b
    8000274e:	c3e58593          	addi	a1,a1,-962 # 8002d388 <__func__.0+0x2d0>
    80002752:	bf7d                	j	80002710 <interrupt_tests+0x188>
    TEST_ASSERT("vs sw irq with delegation", 
    80002754:	00052717          	auipc	a4,0x52
    80002758:	8c072703          	lw	a4,-1856(a4) # 80054014 <excpt+0x4>
    8000275c:	4789                	li	a5,2
    8000275e:	f6f71be3          	bne	a4,a5,800026d4 <interrupt_tests+0x14c>
    80002762:	b759                	j	800026e8 <interrupt_tests+0x160>
    TEST_ASSERT("vs sw irq with no delegation", 
    80002764:	00052717          	auipc	a4,0x52
    80002768:	8b072703          	lw	a4,-1872(a4) # 80054014 <excpt+0x4>
    8000276c:	478d                	li	a5,3
    8000276e:	eaf71ee3          	bne	a4,a5,8000262a <interrupt_tests+0xa2>
    80002772:	b5f1                	j	8000263e <interrupt_tests+0xb6>
    80002774:	00052717          	auipc	a4,0x52
    80002778:	8a072703          	lw	a4,-1888(a4) # 80054014 <excpt+0x4>
    8000277c:	478d                	li	a5,3
    8000277e:	0002b597          	auipc	a1,0x2b
    80002782:	bfa58593          	addi	a1,a1,-1030 # 8002d378 <__func__.0+0x2c0>
    80002786:	e8f701e3          	beq	a4,a5,80002608 <interrupt_tests+0x80>
    8000278a:	0002b597          	auipc	a1,0x2b
    8000278e:	bfe58593          	addi	a1,a1,-1026 # 8002d388 <__func__.0+0x2d0>
    80002792:	bd9d                	j	80002608 <interrupt_tests+0x80>
    80002794:	00052497          	auipc	s1,0x52
    80002798:	8804a483          	lw	s1,-1920(s1) # 80054014 <excpt+0x4>
    8000279c:	14f5                	addi	s1,s1,-3
    8000279e:	0014b493          	seqz	s1,s1
    800027a2:	bd6d                	j	8000265c <interrupt_tests+0xd4>
    TEST_ASSERT("vs sw irq with delegation", 
    800027a4:	00052717          	auipc	a4,0x52
    800027a8:	87072703          	lw	a4,-1936(a4) # 80054014 <excpt+0x4>
    800027ac:	4789                	li	a5,2
    800027ae:	0002b597          	auipc	a1,0x2b
    800027b2:	bca58593          	addi	a1,a1,-1078 # 8002d378 <__func__.0+0x2c0>
    800027b6:	eef70ee3          	beq	a4,a5,800026b2 <interrupt_tests+0x12a>
    800027ba:	0002b597          	auipc	a1,0x2b
    800027be:	bce58593          	addi	a1,a1,-1074 # 8002d388 <__func__.0+0x2d0>
    800027c2:	bdc5                	j	800026b2 <interrupt_tests+0x12a>

00000000800027c4 <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    800027c4:	7139                	addi	sp,sp,-64
    
    TEST_START();
    800027c6:	00029597          	auipc	a1,0x29
    800027ca:	c0a58593          	addi	a1,a1,-1014 # 8002b3d0 <__func__.20>
    800027ce:	0002b517          	auipc	a0,0x2b
    800027d2:	bca50513          	addi	a0,a0,-1078 # 8002d398 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    800027d6:	fc06                	sd	ra,56(sp)
    800027d8:	f822                	sd	s0,48(sp)
    800027da:	f426                	sd	s1,40(sp)
    800027dc:	f04a                	sd	s2,32(sp)
    800027de:	ec4e                	sd	s3,24(sp)
    TEST_START();
    800027e0:	676280ef          	jal	8002ae56 <printf>
    800027e4:	4529                	li	a0,10
    800027e6:	35e270ef          	jal	80029b44 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    800027ea:	2201b737          	lui	a4,0x2201b
    800027ee:	000887b7          	lui	a5,0x88
    800027f2:	070a                	slli	a4,a4,0x2
    800027f4:	44c5                	li	s1,17
    800027f6:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800027fa:	e304                	sd	s1,0(a4)
    800027fc:	07b2                	slli	a5,a5,0xc
    800027fe:	02200913          	li	s2,34
    80002802:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002806:	450d                	li	a0,3
    80002808:	f00fe0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000280c:	dd5fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002810:	9b4fe0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002814:	f69fd0ef          	jal	8000077c <vspt_init>
    return *((volatile uint64_t*) addr);
    80002818:	4001b737          	lui	a4,0x4001b
    8000281c:	070a                	slli	a4,a4,0x2
    8000281e:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002822:	001007b7          	lui	a5,0x100
    80002826:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000282a:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000282c:	0002b617          	auipc	a2,0x2b
    80002830:	0dc60613          	addi	a2,a2,220 # 8002d908 <__func__.0+0x850>
    80002834:	08200593          	li	a1,130
    80002838:	0002b517          	auipc	a0,0x2b
    8000283c:	b7850513          	addi	a0,a0,-1160 # 8002d3b0 <__func__.0+0x2f8>
    80002840:	6380                	ld	s0,0(a5)
    80002842:	614280ef          	jal	8002ae56 <printf>
    80002846:	3a998963          	beq	s3,s1,80002bf8 <two_stage_translation_1+0x434>
    8000284a:	0002b597          	auipc	a1,0x2b
    8000284e:	b3e58593          	addi	a1,a1,-1218 # 8002d388 <__func__.0+0x2d0>
    80002852:	0002b517          	auipc	a0,0x2b
    80002856:	b7650513          	addi	a0,a0,-1162 # 8002d3c8 <__func__.0+0x310>
    8000285a:	5fc280ef          	jal	8002ae56 <printf>
    8000285e:	0002b517          	auipc	a0,0x2b
    80002862:	b7250513          	addi	a0,a0,-1166 # 8002d3d0 <__func__.0+0x318>
    80002866:	5f0280ef          	jal	8002ae56 <printf>
    8000286a:	02900513          	li	a0,41
    8000286e:	2d6270ef          	jal	80029b44 <putchar>
    80002872:	4529                	li	a0,10
    80002874:	2d0270ef          	jal	80029b44 <putchar>
    80002878:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    8000287a:	450d                	li	a0,3
    8000287c:	e8cfe0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002880:	d56fe0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    80002884:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80002888:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    8000288c:	4509                	li	a0,2
    8000288e:	e7afe0ef          	jal	80000f08 <goto_priv>
    80002892:	001007b7          	lui	a5,0x100
    80002896:	4001b737          	lui	a4,0x4001b
    8000289a:	070a                	slli	a4,a4,0x2
    8000289c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800028a0:	07b2                	slli	a5,a5,0xc
    800028a2:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800028a6:	0002b617          	auipc	a2,0x2b
    800028aa:	07a60613          	addi	a2,a2,122 # 8002d920 <__func__.0+0x868>
    800028ae:	08200593          	li	a1,130
    800028b2:	0002b517          	auipc	a0,0x2b
    800028b6:	afe50513          	addi	a0,a0,-1282 # 8002d3b0 <__func__.0+0x2f8>
    800028ba:	6384                	ld	s1,0(a5)
    800028bc:	59a280ef          	jal	8002ae56 <printf>
    800028c0:	02200793          	li	a5,34
    800028c4:	2ef90a63          	beq	s2,a5,80002bb8 <two_stage_translation_1+0x3f4>
    800028c8:	0002b597          	auipc	a1,0x2b
    800028cc:	ac058593          	addi	a1,a1,-1344 # 8002d388 <__func__.0+0x2d0>
    800028d0:	0002b517          	auipc	a0,0x2b
    800028d4:	af850513          	addi	a0,a0,-1288 # 8002d3c8 <__func__.0+0x310>
    800028d8:	57e280ef          	jal	8002ae56 <printf>
    800028dc:	0002b517          	auipc	a0,0x2b
    800028e0:	af450513          	addi	a0,a0,-1292 # 8002d3d0 <__func__.0+0x318>
    800028e4:	572280ef          	jal	8002ae56 <printf>
    800028e8:	02900513          	li	a0,41
    800028ec:	258270ef          	jal	80029b44 <putchar>
    800028f0:	4529                	li	a0,10
    800028f2:	252270ef          	jal	80029b44 <putchar>
    800028f6:	4401                	li	s0,0

    vspt_switch();
    800028f8:	cbcfe0ef          	jal	80000db4 <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    800028fc:	12000073          	sfence.vma
    80002900:	001007b7          	lui	a5,0x100
    80002904:	4001b737          	lui	a4,0x4001b
    80002908:	070a                	slli	a4,a4,0x2
    8000290a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000290e:	07b2                	slli	a5,a5,0xc
    80002910:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002914:	0002b617          	auipc	a2,0x2b
    80002918:	04460613          	addi	a2,a2,68 # 8002d958 <__func__.0+0x8a0>
    8000291c:	08200593          	li	a1,130
    80002920:	0002b517          	auipc	a0,0x2b
    80002924:	a9050513          	addi	a0,a0,-1392 # 8002d3b0 <__func__.0+0x2f8>
    80002928:	6384                	ld	s1,0(a5)
    8000292a:	52c280ef          	jal	8002ae56 <printf>
    8000292e:	47c5                	li	a5,17
    80002930:	32f90063          	beq	s2,a5,80002c50 <two_stage_translation_1+0x48c>
    80002934:	0002b597          	auipc	a1,0x2b
    80002938:	a5458593          	addi	a1,a1,-1452 # 8002d388 <__func__.0+0x2d0>
    8000293c:	0002b517          	auipc	a0,0x2b
    80002940:	a8c50513          	addi	a0,a0,-1396 # 8002d3c8 <__func__.0+0x310>
    80002944:	512280ef          	jal	8002ae56 <printf>
    80002948:	0002b517          	auipc	a0,0x2b
    8000294c:	a8850513          	addi	a0,a0,-1400 # 8002d3d0 <__func__.0+0x318>
    80002950:	506280ef          	jal	8002ae56 <printf>
    80002954:	02900513          	li	a0,41
    80002958:	1ec270ef          	jal	80029b44 <putchar>
    8000295c:	4529                	li	a0,10
    8000295e:	1e6270ef          	jal	80029b44 <putchar>
    80002962:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    80002964:	4511                	li	a0,4
    80002966:	da2fe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    8000296a:	002007b7          	lui	a5,0x200
    8000296e:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002972:	4509                	li	a0,2
    80002974:	d94fe0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002978:	c94fe0ef          	jal	80000e0c <test_setup_except_function>
    8000297c:	001007b7          	lui	a5,0x100
    80002980:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002984:	07b2                	slli	a5,a5,0xc
    80002986:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002988:	08200593          	li	a1,130
    8000298c:	0002b617          	auipc	a2,0x2b
    80002990:	00460613          	addi	a2,a2,4 # 8002d990 <__func__.0+0x8d8>
    80002994:	0002b517          	auipc	a0,0x2b
    80002998:	a1c50513          	addi	a0,a0,-1508 # 8002d3b0 <__func__.0+0x2f8>
    8000299c:	4ba280ef          	jal	8002ae56 <printf>
    800029a0:	00051797          	auipc	a5,0x51
    800029a4:	6717c783          	lbu	a5,1649(a5) # 80054011 <excpt+0x1>
    800029a8:	00051417          	auipc	s0,0x51
    800029ac:	66840413          	addi	s0,s0,1640 # 80054010 <excpt>
    800029b0:	0002b597          	auipc	a1,0x2b
    800029b4:	9d858593          	addi	a1,a1,-1576 # 8002d388 <__func__.0+0x2d0>
    800029b8:	c789                	beqz	a5,800029c2 <two_stage_translation_1+0x1fe>
    800029ba:	6418                	ld	a4,8(s0)
    800029bc:	47d5                	li	a5,21
    800029be:	3ef70963          	beq	a4,a5,80002db0 <two_stage_translation_1+0x5ec>
    800029c2:	0002b517          	auipc	a0,0x2b
    800029c6:	a0650513          	addi	a0,a0,-1530 # 8002d3c8 <__func__.0+0x310>
    800029ca:	48c280ef          	jal	8002ae56 <printf>
    800029ce:	00051797          	auipc	a5,0x51
    800029d2:	6437c783          	lbu	a5,1603(a5) # 80054011 <excpt+0x1>
    800029d6:	c789                	beqz	a5,800029e0 <two_stage_translation_1+0x21c>
    800029d8:	6418                	ld	a4,8(s0)
    800029da:	47d5                	li	a5,21
    800029dc:	2af70c63          	beq	a4,a5,80002c94 <two_stage_translation_1+0x4d0>
    800029e0:	0002b517          	auipc	a0,0x2b
    800029e4:	9f050513          	addi	a0,a0,-1552 # 8002d3d0 <__func__.0+0x318>
    800029e8:	46e280ef          	jal	8002ae56 <printf>
    800029ec:	02900513          	li	a0,41
    800029f0:	154270ef          	jal	80029b44 <putchar>
    800029f4:	4529                	li	a0,10
    800029f6:	14e270ef          	jal	80029b44 <putchar>
    800029fa:	c899                	beqz	s1,80002a10 <two_stage_translation_1+0x24c>
    800029fc:	00051797          	auipc	a5,0x51
    80002a00:	6157c783          	lbu	a5,1557(a5) # 80054011 <excpt+0x1>
    80002a04:	4481                	li	s1,0
    80002a06:	c789                	beqz	a5,80002a10 <two_stage_translation_1+0x24c>
    80002a08:	6418                	ld	a4,8(s0)
    80002a0a:	47d5                	li	a5,21
    80002a0c:	32f70d63          	beq	a4,a5,80002d46 <two_stage_translation_1+0x582>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    80002a10:	bfcfe0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    80002a14:	001007b7          	lui	a5,0x100
    80002a18:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002a1c:	07b2                	slli	a5,a5,0xc
    80002a1e:	00000297          	auipc	t0,0x0
    80002a22:	00c28293          	addi	t0,t0,12 # 80002a2a <two_stage_translation_1+0x266>
    80002a26:	02543c23          	sd	t0,56(s0)
    80002a2a:	8782                	jr	a5
    TEST_ASSERT(
    80002a2c:	08200593          	li	a1,130
    80002a30:	0002b617          	auipc	a2,0x2b
    80002a34:	f9060613          	addi	a2,a2,-112 # 8002d9c0 <__func__.0+0x908>
    80002a38:	0002b517          	auipc	a0,0x2b
    80002a3c:	97850513          	addi	a0,a0,-1672 # 8002d3b0 <__func__.0+0x2f8>
    80002a40:	416280ef          	jal	8002ae56 <printf>
    80002a44:	00051797          	auipc	a5,0x51
    80002a48:	5cd7c783          	lbu	a5,1485(a5) # 80054011 <excpt+0x1>
    80002a4c:	0002b597          	auipc	a1,0x2b
    80002a50:	93c58593          	addi	a1,a1,-1732 # 8002d388 <__func__.0+0x2d0>
    80002a54:	c789                	beqz	a5,80002a5e <two_stage_translation_1+0x29a>
    80002a56:	6418                	ld	a4,8(s0)
    80002a58:	47d1                	li	a5,20
    80002a5a:	3af70e63          	beq	a4,a5,80002e16 <two_stage_translation_1+0x652>
    80002a5e:	0002b517          	auipc	a0,0x2b
    80002a62:	96a50513          	addi	a0,a0,-1686 # 8002d3c8 <__func__.0+0x310>
    80002a66:	3f0280ef          	jal	8002ae56 <printf>
    80002a6a:	00051797          	auipc	a5,0x51
    80002a6e:	5a77c783          	lbu	a5,1447(a5) # 80054011 <excpt+0x1>
    80002a72:	c789                	beqz	a5,80002a7c <two_stage_translation_1+0x2b8>
    80002a74:	6418                	ld	a4,8(s0)
    80002a76:	47d1                	li	a5,20
    80002a78:	24f70963          	beq	a4,a5,80002cca <two_stage_translation_1+0x506>
    80002a7c:	0002b517          	auipc	a0,0x2b
    80002a80:	95450513          	addi	a0,a0,-1708 # 8002d3d0 <__func__.0+0x318>
    80002a84:	3d2280ef          	jal	8002ae56 <printf>
    80002a88:	02900513          	li	a0,41
    80002a8c:	0b8270ef          	jal	80029b44 <putchar>
    80002a90:	4529                	li	a0,10
    80002a92:	0b2270ef          	jal	80029b44 <putchar>
    80002a96:	c899                	beqz	s1,80002aac <two_stage_translation_1+0x2e8>
    80002a98:	00051797          	auipc	a5,0x51
    80002a9c:	5797c783          	lbu	a5,1401(a5) # 80054011 <excpt+0x1>
    80002aa0:	4481                	li	s1,0
    80002aa2:	c789                	beqz	a5,80002aac <two_stage_translation_1+0x2e8>
    80002aa4:	6418                	ld	a4,8(s0)
    80002aa6:	47d1                	li	a5,20
    80002aa8:	26f70a63          	beq	a4,a5,80002d1c <two_stage_translation_1+0x558>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    80002aac:	4511                	li	a0,4
    80002aae:	c5afe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    80002ab2:	002027b7          	lui	a5,0x202
    80002ab6:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002aba:	450d                	li	a0,3
    80002abc:	c4cfe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002ac0:	6789                	lui	a5,0x2
    80002ac2:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    80002ac6:	4509                	li	a0,2
    80002ac8:	c40fe0ef          	jal	80000f08 <goto_priv>
    80002acc:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002ad0:	b3cfe0ef          	jal	80000e0c <test_setup_except_function>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002ad4:	400197b7          	lui	a5,0x40019
    80002ad8:	078a                	slli	a5,a5,0x2
    80002ada:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002adc:	08200593          	li	a1,130
    80002ae0:	0002b617          	auipc	a2,0x2b
    80002ae4:	f2060613          	addi	a2,a2,-224 # 8002da00 <__func__.0+0x948>
    80002ae8:	0002b517          	auipc	a0,0x2b
    80002aec:	8c850513          	addi	a0,a0,-1848 # 8002d3b0 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002af0:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002af2:	364280ef          	jal	8002ae56 <printf>
    80002af6:	00051797          	auipc	a5,0x51
    80002afa:	51b7c783          	lbu	a5,1307(a5) # 80054011 <excpt+0x1>
    80002afe:	0002b597          	auipc	a1,0x2b
    80002b02:	88a58593          	addi	a1,a1,-1910 # 8002d388 <__func__.0+0x2d0>
    80002b06:	c789                	beqz	a5,80002b10 <two_stage_translation_1+0x34c>
    80002b08:	6418                	ld	a4,8(s0)
    80002b0a:	47b5                	li	a5,13
    80002b0c:	2cf70f63          	beq	a4,a5,80002dea <two_stage_translation_1+0x626>
    80002b10:	0002b517          	auipc	a0,0x2b
    80002b14:	8b850513          	addi	a0,a0,-1864 # 8002d3c8 <__func__.0+0x310>
    80002b18:	33e280ef          	jal	8002ae56 <printf>
    80002b1c:	00051797          	auipc	a5,0x51
    80002b20:	4f57c783          	lbu	a5,1269(a5) # 80054011 <excpt+0x1>
    80002b24:	c789                	beqz	a5,80002b2e <two_stage_translation_1+0x36a>
    80002b26:	6418                	ld	a4,8(s0)
    80002b28:	47b5                	li	a5,13
    80002b2a:	1cf70b63          	beq	a4,a5,80002d00 <two_stage_translation_1+0x53c>
    80002b2e:	0002b517          	auipc	a0,0x2b
    80002b32:	8a250513          	addi	a0,a0,-1886 # 8002d3d0 <__func__.0+0x318>
    80002b36:	320280ef          	jal	8002ae56 <printf>
    80002b3a:	02900513          	li	a0,41
    80002b3e:	006270ef          	jal	80029b44 <putchar>
    80002b42:	4529                	li	a0,10
    80002b44:	000270ef          	jal	80029b44 <putchar>
    80002b48:	c0b5                	beqz	s1,80002bac <two_stage_translation_1+0x3e8>
    80002b4a:	00051497          	auipc	s1,0x51
    80002b4e:	4c74c483          	lbu	s1,1223(s1) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002b52:	0002b597          	auipc	a1,0x2b
    80002b56:	83658593          	addi	a1,a1,-1994 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002b5a:	c491                	beqz	s1,80002b66 <two_stage_translation_1+0x3a2>
    80002b5c:	6418                	ld	a4,8(s0)
    80002b5e:	47b5                	li	a5,13
    80002b60:	02f70663          	beq	a4,a5,80002b8c <two_stage_translation_1+0x3c8>
    80002b64:	4481                	li	s1,0
    TEST_END();
    80002b66:	0002b517          	auipc	a0,0x2b
    80002b6a:	8ca50513          	addi	a0,a0,-1846 # 8002d430 <__func__.0+0x378>
    80002b6e:	2e8280ef          	jal	8002ae56 <printf>
    80002b72:	4511                	li	a0,4
    80002b74:	b94fe0ef          	jal	80000f08 <goto_priv>
    80002b78:	cadfe0ef          	jal	80001824 <reset_state>
}
    80002b7c:	70e2                	ld	ra,56(sp)
    80002b7e:	7442                	ld	s0,48(sp)
    80002b80:	7902                	ld	s2,32(sp)
    80002b82:	69e2                	ld	s3,24(sp)
    80002b84:	8526                	mv	a0,s1
    80002b86:	74a2                	ld	s1,40(sp)
    80002b88:	6121                	addi	sp,sp,64
    80002b8a:	8082                	ret
    TEST_ASSERT(
    80002b8c:	00051717          	auipc	a4,0x51
    80002b90:	48872703          	lw	a4,1160(a4) # 80054014 <excpt+0x4>
    80002b94:	4789                	li	a5,2
    80002b96:	fcf717e3          	bne	a4,a5,80002b64 <two_stage_translation_1+0x3a0>
    80002b9a:	00051797          	auipc	a5,0x51
    80002b9e:	4a67c783          	lbu	a5,1190(a5) # 80054040 <excpt+0x30>
    TEST_END();
    80002ba2:	0002a597          	auipc	a1,0x2a
    80002ba6:	7d658593          	addi	a1,a1,2006 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002baa:	dfd5                	beqz	a5,80002b66 <two_stage_translation_1+0x3a2>
    80002bac:	4481                	li	s1,0
    TEST_END();
    80002bae:	0002a597          	auipc	a1,0x2a
    80002bb2:	7da58593          	addi	a1,a1,2010 # 8002d388 <__func__.0+0x2d0>
    80002bb6:	bf45                	j	80002b66 <two_stage_translation_1+0x3a2>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002bb8:	47c5                	li	a5,17
    80002bba:	1cf48b63          	beq	s1,a5,80002d90 <two_stage_translation_1+0x5cc>
    80002bbe:	0002a597          	auipc	a1,0x2a
    80002bc2:	7ca58593          	addi	a1,a1,1994 # 8002d388 <__func__.0+0x2d0>
    80002bc6:	0002b517          	auipc	a0,0x2b
    80002bca:	80250513          	addi	a0,a0,-2046 # 8002d3c8 <__func__.0+0x310>
    80002bce:	288280ef          	jal	8002ae56 <printf>
    80002bd2:	0002a517          	auipc	a0,0x2a
    80002bd6:	7fe50513          	addi	a0,a0,2046 # 8002d3d0 <__func__.0+0x318>
    80002bda:	27c280ef          	jal	8002ae56 <printf>
    80002bde:	02900513          	li	a0,41
    80002be2:	763260ef          	jal	80029b44 <putchar>
    80002be6:	4529                	li	a0,10
    80002be8:	75d260ef          	jal	80029b44 <putchar>
    80002bec:	d00405e3          	beqz	s0,800028f6 <two_stage_translation_1+0x132>
    80002bf0:	14bd                	addi	s1,s1,-17
    80002bf2:	0014b413          	seqz	s0,s1
    80002bf6:	b309                	j	800028f8 <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002bf8:	03240e63          	beq	s0,s2,80002c34 <two_stage_translation_1+0x470>
    80002bfc:	0002a597          	auipc	a1,0x2a
    80002c00:	78c58593          	addi	a1,a1,1932 # 8002d388 <__func__.0+0x2d0>
    80002c04:	0002a517          	auipc	a0,0x2a
    80002c08:	7c450513          	addi	a0,a0,1988 # 8002d3c8 <__func__.0+0x310>
    80002c0c:	24a280ef          	jal	8002ae56 <printf>
    80002c10:	0002a517          	auipc	a0,0x2a
    80002c14:	7c050513          	addi	a0,a0,1984 # 8002d3d0 <__func__.0+0x318>
    80002c18:	23e280ef          	jal	8002ae56 <printf>
    80002c1c:	02900513          	li	a0,41
    80002c20:	725260ef          	jal	80029b44 <putchar>
    80002c24:	4529                	li	a0,10
    80002c26:	71f260ef          	jal	80029b44 <putchar>
    80002c2a:	fde40413          	addi	s0,s0,-34
    80002c2e:	00143413          	seqz	s0,s0
    80002c32:	b1a1                	j	8000287a <two_stage_translation_1+0xb6>
    80002c34:	0002a597          	auipc	a1,0x2a
    80002c38:	74458593          	addi	a1,a1,1860 # 8002d378 <__func__.0+0x2c0>
    80002c3c:	0002a517          	auipc	a0,0x2a
    80002c40:	78c50513          	addi	a0,a0,1932 # 8002d3c8 <__func__.0+0x310>
    80002c44:	212280ef          	jal	8002ae56 <printf>
    80002c48:	4529                	li	a0,10
    80002c4a:	6fb260ef          	jal	80029b44 <putchar>
    80002c4e:	bff1                	j	80002c2a <two_stage_translation_1+0x466>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002c50:	02200793          	li	a5,34
    80002c54:	10f48e63          	beq	s1,a5,80002d70 <two_stage_translation_1+0x5ac>
    80002c58:	0002a597          	auipc	a1,0x2a
    80002c5c:	73058593          	addi	a1,a1,1840 # 8002d388 <__func__.0+0x2d0>
    80002c60:	0002a517          	auipc	a0,0x2a
    80002c64:	76850513          	addi	a0,a0,1896 # 8002d3c8 <__func__.0+0x310>
    80002c68:	1ee280ef          	jal	8002ae56 <printf>
    80002c6c:	0002a517          	auipc	a0,0x2a
    80002c70:	76450513          	addi	a0,a0,1892 # 8002d3d0 <__func__.0+0x318>
    80002c74:	1e2280ef          	jal	8002ae56 <printf>
    80002c78:	02900513          	li	a0,41
    80002c7c:	6c9260ef          	jal	80029b44 <putchar>
    80002c80:	4529                	li	a0,10
    80002c82:	6c3260ef          	jal	80029b44 <putchar>
    80002c86:	cc040ee3          	beqz	s0,80002962 <two_stage_translation_1+0x19e>
    80002c8a:	fde48493          	addi	s1,s1,-34
    80002c8e:	0014b493          	seqz	s1,s1
    80002c92:	b9c9                	j	80002964 <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    80002c94:	7418                	ld	a4,40(s0)
    80002c96:	400197b7          	lui	a5,0x40019
    80002c9a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c9e:	d4f711e3          	bne	a4,a5,800029e0 <two_stage_translation_1+0x21c>
    80002ca2:	00051717          	auipc	a4,0x51
    80002ca6:	37272703          	lw	a4,882(a4) # 80054014 <excpt+0x4>
    80002caa:	478d                	li	a5,3
    80002cac:	d2f71ae3          	bne	a4,a5,800029e0 <two_stage_translation_1+0x21c>
    80002cb0:	00051797          	auipc	a5,0x51
    80002cb4:	3907c783          	lbu	a5,912(a5) # 80054040 <excpt+0x30>
    80002cb8:	d20784e3          	beqz	a5,800029e0 <two_stage_translation_1+0x21c>
    80002cbc:	00051797          	auipc	a5,0x51
    80002cc0:	3857c783          	lbu	a5,901(a5) # 80054041 <excpt+0x31>
    80002cc4:	d20798e3          	bnez	a5,800029f4 <two_stage_translation_1+0x230>
    80002cc8:	bb21                	j	800029e0 <two_stage_translation_1+0x21c>
    TEST_ASSERT(
    80002cca:	7418                	ld	a4,40(s0)
    80002ccc:	400197b7          	lui	a5,0x40019
    80002cd0:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002cd4:	daf714e3          	bne	a4,a5,80002a7c <two_stage_translation_1+0x2b8>
    80002cd8:	00051717          	auipc	a4,0x51
    80002cdc:	33c72703          	lw	a4,828(a4) # 80054014 <excpt+0x4>
    80002ce0:	4791                	li	a5,4
    80002ce2:	d8f71de3          	bne	a4,a5,80002a7c <two_stage_translation_1+0x2b8>
    80002ce6:	00051797          	auipc	a5,0x51
    80002cea:	35a7c783          	lbu	a5,858(a5) # 80054040 <excpt+0x30>
    80002cee:	d80787e3          	beqz	a5,80002a7c <two_stage_translation_1+0x2b8>
    80002cf2:	00051797          	auipc	a5,0x51
    80002cf6:	34f7c783          	lbu	a5,847(a5) # 80054041 <excpt+0x31>
    80002cfa:	d8079be3          	bnez	a5,80002a90 <two_stage_translation_1+0x2cc>
    80002cfe:	bbbd                	j	80002a7c <two_stage_translation_1+0x2b8>
    TEST_ASSERT(
    80002d00:	00051717          	auipc	a4,0x51
    80002d04:	31472703          	lw	a4,788(a4) # 80054014 <excpt+0x4>
    80002d08:	4789                	li	a5,2
    80002d0a:	e2f712e3          	bne	a4,a5,80002b2e <two_stage_translation_1+0x36a>
    80002d0e:	00051797          	auipc	a5,0x51
    80002d12:	3327c783          	lbu	a5,818(a5) # 80054040 <excpt+0x30>
    80002d16:	e20786e3          	beqz	a5,80002b42 <two_stage_translation_1+0x37e>
    80002d1a:	bd11                	j	80002b2e <two_stage_translation_1+0x36a>
    TEST_ASSERT(
    80002d1c:	7418                	ld	a4,40(s0)
    80002d1e:	400197b7          	lui	a5,0x40019
    80002d22:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d26:	d8f713e3          	bne	a4,a5,80002aac <two_stage_translation_1+0x2e8>
    80002d2a:	00051717          	auipc	a4,0x51
    80002d2e:	2ea72703          	lw	a4,746(a4) # 80054014 <excpt+0x4>
    80002d32:	4791                	li	a5,4
    80002d34:	d6f71ce3          	bne	a4,a5,80002aac <two_stage_translation_1+0x2e8>
    80002d38:	03045483          	lhu	s1,48(s0)
    80002d3c:	eff48493          	addi	s1,s1,-257
    80002d40:	0014b493          	seqz	s1,s1
    80002d44:	b3a5                	j	80002aac <two_stage_translation_1+0x2e8>
    TEST_ASSERT(
    80002d46:	7418                	ld	a4,40(s0)
    80002d48:	400197b7          	lui	a5,0x40019
    80002d4c:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d50:	ccf710e3          	bne	a4,a5,80002a10 <two_stage_translation_1+0x24c>
    80002d54:	00051717          	auipc	a4,0x51
    80002d58:	2c072703          	lw	a4,704(a4) # 80054014 <excpt+0x4>
    80002d5c:	478d                	li	a5,3
    80002d5e:	caf719e3          	bne	a4,a5,80002a10 <two_stage_translation_1+0x24c>
    80002d62:	03045483          	lhu	s1,48(s0)
    80002d66:	eff48493          	addi	s1,s1,-257
    80002d6a:	0014b493          	seqz	s1,s1
    80002d6e:	b14d                	j	80002a10 <two_stage_translation_1+0x24c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002d70:	0002a597          	auipc	a1,0x2a
    80002d74:	60858593          	addi	a1,a1,1544 # 8002d378 <__func__.0+0x2c0>
    80002d78:	0002a517          	auipc	a0,0x2a
    80002d7c:	65050513          	addi	a0,a0,1616 # 8002d3c8 <__func__.0+0x310>
    80002d80:	0d6280ef          	jal	8002ae56 <printf>
    80002d84:	4529                	li	a0,10
    80002d86:	5bf260ef          	jal	80029b44 <putchar>
    80002d8a:	bc040ce3          	beqz	s0,80002962 <two_stage_translation_1+0x19e>
    80002d8e:	bdf5                	j	80002c8a <two_stage_translation_1+0x4c6>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002d90:	0002a597          	auipc	a1,0x2a
    80002d94:	5e858593          	addi	a1,a1,1512 # 8002d378 <__func__.0+0x2c0>
    80002d98:	0002a517          	auipc	a0,0x2a
    80002d9c:	63050513          	addi	a0,a0,1584 # 8002d3c8 <__func__.0+0x310>
    80002da0:	0b6280ef          	jal	8002ae56 <printf>
    80002da4:	4529                	li	a0,10
    80002da6:	59f260ef          	jal	80029b44 <putchar>
    80002daa:	b40406e3          	beqz	s0,800028f6 <two_stage_translation_1+0x132>
    80002dae:	b589                	j	80002bf0 <two_stage_translation_1+0x42c>
    TEST_ASSERT(
    80002db0:	7418                	ld	a4,40(s0)
    80002db2:	400197b7          	lui	a5,0x40019
    80002db6:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002dba:	c0f714e3          	bne	a4,a5,800029c2 <two_stage_translation_1+0x1fe>
    80002dbe:	00051717          	auipc	a4,0x51
    80002dc2:	25672703          	lw	a4,598(a4) # 80054014 <excpt+0x4>
    80002dc6:	478d                	li	a5,3
    80002dc8:	bef71de3          	bne	a4,a5,800029c2 <two_stage_translation_1+0x1fe>
    80002dcc:	03045703          	lhu	a4,48(s0)
    80002dd0:	10100793          	li	a5,257
    80002dd4:	0002a597          	auipc	a1,0x2a
    80002dd8:	5a458593          	addi	a1,a1,1444 # 8002d378 <__func__.0+0x2c0>
    80002ddc:	bef703e3          	beq	a4,a5,800029c2 <two_stage_translation_1+0x1fe>
    80002de0:	0002a597          	auipc	a1,0x2a
    80002de4:	5a858593          	addi	a1,a1,1448 # 8002d388 <__func__.0+0x2d0>
    80002de8:	bee9                	j	800029c2 <two_stage_translation_1+0x1fe>
    TEST_ASSERT(
    80002dea:	00051717          	auipc	a4,0x51
    80002dee:	22a72703          	lw	a4,554(a4) # 80054014 <excpt+0x4>
    80002df2:	4789                	li	a5,2
    80002df4:	d0f71ee3          	bne	a4,a5,80002b10 <two_stage_translation_1+0x34c>
    80002df8:	00051797          	auipc	a5,0x51
    80002dfc:	2487c783          	lbu	a5,584(a5) # 80054040 <excpt+0x30>
    80002e00:	0002a597          	auipc	a1,0x2a
    80002e04:	57858593          	addi	a1,a1,1400 # 8002d378 <__func__.0+0x2c0>
    80002e08:	d00784e3          	beqz	a5,80002b10 <two_stage_translation_1+0x34c>
    80002e0c:	0002a597          	auipc	a1,0x2a
    80002e10:	57c58593          	addi	a1,a1,1404 # 8002d388 <__func__.0+0x2d0>
    80002e14:	b9f5                	j	80002b10 <two_stage_translation_1+0x34c>
    TEST_ASSERT(
    80002e16:	7418                	ld	a4,40(s0)
    80002e18:	400197b7          	lui	a5,0x40019
    80002e1c:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002e20:	c2f71fe3          	bne	a4,a5,80002a5e <two_stage_translation_1+0x29a>
    80002e24:	00051717          	auipc	a4,0x51
    80002e28:	1f072703          	lw	a4,496(a4) # 80054014 <excpt+0x4>
    80002e2c:	4791                	li	a5,4
    80002e2e:	c2f718e3          	bne	a4,a5,80002a5e <two_stage_translation_1+0x29a>
    80002e32:	03045703          	lhu	a4,48(s0)
    80002e36:	10100793          	li	a5,257
    80002e3a:	0002a597          	auipc	a1,0x2a
    80002e3e:	53e58593          	addi	a1,a1,1342 # 8002d378 <__func__.0+0x2c0>
    80002e42:	c0f70ee3          	beq	a4,a5,80002a5e <two_stage_translation_1+0x29a>
    80002e46:	0002a597          	auipc	a1,0x2a
    80002e4a:	54258593          	addi	a1,a1,1346 # 8002d388 <__func__.0+0x2d0>
    80002e4e:	b901                	j	80002a5e <two_stage_translation_1+0x29a>

0000000080002e50 <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002e50:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002e52:	00028597          	auipc	a1,0x28
    80002e56:	59658593          	addi	a1,a1,1430 # 8002b3e8 <__func__.17>
    80002e5a:	0002a517          	auipc	a0,0x2a
    80002e5e:	53e50513          	addi	a0,a0,1342 # 8002d398 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002e62:	f406                	sd	ra,40(sp)
    80002e64:	f022                	sd	s0,32(sp)
    80002e66:	ec26                	sd	s1,24(sp)
    80002e68:	e84a                	sd	s2,16(sp)
    80002e6a:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002e6c:	7eb270ef          	jal	8002ae56 <printf>
    80002e70:	4529                	li	a0,10
    80002e72:	4d3260ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80002e76:	4511                	li	a0,4
    80002e78:	890fe0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80002e7c:	2201b737          	lui	a4,0x2201b
    80002e80:	000887b7          	lui	a5,0x88
    80002e84:	070a                	slli	a4,a4,0x2
    80002e86:	44c5                	li	s1,17
    80002e88:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002e8c:	e304                	sd	s1,0(a4)
    80002e8e:	07b2                	slli	a5,a5,0xc
    80002e90:	02200913          	li	s2,34
    80002e94:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002e98:	450d                	li	a0,3
    80002e9a:	86efe0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80002e9e:	f42fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002ea2:	b23fd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002ea6:	8d7fd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80002eaa:	4509                	li	a0,2
    80002eac:	85cfe0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002eb0:	4001b737          	lui	a4,0x4001b
    80002eb4:	070a                	slli	a4,a4,0x2
    80002eb6:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002eba:	001007b7          	lui	a5,0x100
    80002ebe:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002ec2:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002ec4:	0002b617          	auipc	a2,0x2b
    80002ec8:	a4460613          	addi	a2,a2,-1468 # 8002d908 <__func__.0+0x850>
    80002ecc:	08200593          	li	a1,130
    80002ed0:	0002a517          	auipc	a0,0x2a
    80002ed4:	4e050513          	addi	a0,a0,1248 # 8002d3b0 <__func__.0+0x2f8>
    80002ed8:	6380                	ld	s0,0(a5)
    80002eda:	77d270ef          	jal	8002ae56 <printf>
    80002ede:	0c998b63          	beq	s3,s1,80002fb4 <two_stage_translation_2+0x164>
    80002ee2:	0002a597          	auipc	a1,0x2a
    80002ee6:	4a658593          	addi	a1,a1,1190 # 8002d388 <__func__.0+0x2d0>
    80002eea:	0002a517          	auipc	a0,0x2a
    80002eee:	4de50513          	addi	a0,a0,1246 # 8002d3c8 <__func__.0+0x310>
    80002ef2:	765270ef          	jal	8002ae56 <printf>
    80002ef6:	0002a517          	auipc	a0,0x2a
    80002efa:	4da50513          	addi	a0,a0,1242 # 8002d3d0 <__func__.0+0x318>
    80002efe:	759270ef          	jal	8002ae56 <printf>
    80002f02:	02900513          	li	a0,41
    80002f06:	43f260ef          	jal	80029b44 <putchar>
    80002f0a:	4529                	li	a0,10
    80002f0c:	439260ef          	jal	80029b44 <putchar>
    80002f10:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002f12:	450d                	li	a0,3
    80002f14:	ff5fd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002f18:	ebffd0ef          	jal	80000dd6 <hpt_switch>
    goto_priv(PRIV_VS);
    80002f1c:	4509                	li	a0,2
    80002f1e:	febfd0ef          	jal	80000f08 <goto_priv>
    80002f22:	001007b7          	lui	a5,0x100
    80002f26:	4001b737          	lui	a4,0x4001b
    80002f2a:	070a                	slli	a4,a4,0x2
    80002f2c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002f30:	07b2                	slli	a5,a5,0xc
    80002f32:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002f34:	0002b617          	auipc	a2,0x2b
    80002f38:	b0460613          	addi	a2,a2,-1276 # 8002da38 <__func__.0+0x980>
    80002f3c:	08200593          	li	a1,130
    80002f40:	0002a517          	auipc	a0,0x2a
    80002f44:	47050513          	addi	a0,a0,1136 # 8002d3b0 <__func__.0+0x2f8>
    80002f48:	0007b903          	ld	s2,0(a5)
    80002f4c:	70b270ef          	jal	8002ae56 <printf>
    80002f50:	47c5                	li	a5,17
    80002f52:	0af48d63          	beq	s1,a5,8000300c <two_stage_translation_2+0x1bc>
    80002f56:	0002a597          	auipc	a1,0x2a
    80002f5a:	43258593          	addi	a1,a1,1074 # 8002d388 <__func__.0+0x2d0>
    80002f5e:	0002a517          	auipc	a0,0x2a
    80002f62:	46a50513          	addi	a0,a0,1130 # 8002d3c8 <__func__.0+0x310>
    80002f66:	6f1270ef          	jal	8002ae56 <printf>
    80002f6a:	0002a517          	auipc	a0,0x2a
    80002f6e:	46650513          	addi	a0,a0,1126 # 8002d3d0 <__func__.0+0x318>
    80002f72:	6e5270ef          	jal	8002ae56 <printf>
    80002f76:	02900513          	li	a0,41
    80002f7a:	3cb260ef          	jal	80029b44 <putchar>
    80002f7e:	4529                	li	a0,10
    80002f80:	3c5260ef          	jal	80029b44 <putchar>
    80002f84:	4401                	li	s0,0


    TEST_END();
    80002f86:	0002a597          	auipc	a1,0x2a
    80002f8a:	40258593          	addi	a1,a1,1026 # 8002d388 <__func__.0+0x2d0>
    80002f8e:	0002a517          	auipc	a0,0x2a
    80002f92:	4a250513          	addi	a0,a0,1186 # 8002d430 <__func__.0+0x378>
    80002f96:	6c1270ef          	jal	8002ae56 <printf>
    80002f9a:	4511                	li	a0,4
    80002f9c:	f6dfd0ef          	jal	80000f08 <goto_priv>
    80002fa0:	885fe0ef          	jal	80001824 <reset_state>
}
    80002fa4:	70a2                	ld	ra,40(sp)
    80002fa6:	8522                	mv	a0,s0
    80002fa8:	7402                	ld	s0,32(sp)
    80002faa:	64e2                	ld	s1,24(sp)
    80002fac:	6942                	ld	s2,16(sp)
    80002fae:	69a2                	ld	s3,8(sp)
    80002fb0:	6145                	addi	sp,sp,48
    80002fb2:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002fb4:	03240e63          	beq	s0,s2,80002ff0 <two_stage_translation_2+0x1a0>
    80002fb8:	0002a597          	auipc	a1,0x2a
    80002fbc:	3d058593          	addi	a1,a1,976 # 8002d388 <__func__.0+0x2d0>
    80002fc0:	0002a517          	auipc	a0,0x2a
    80002fc4:	40850513          	addi	a0,a0,1032 # 8002d3c8 <__func__.0+0x310>
    80002fc8:	68f270ef          	jal	8002ae56 <printf>
    80002fcc:	0002a517          	auipc	a0,0x2a
    80002fd0:	40450513          	addi	a0,a0,1028 # 8002d3d0 <__func__.0+0x318>
    80002fd4:	683270ef          	jal	8002ae56 <printf>
    80002fd8:	02900513          	li	a0,41
    80002fdc:	369260ef          	jal	80029b44 <putchar>
    80002fe0:	4529                	li	a0,10
    80002fe2:	363260ef          	jal	80029b44 <putchar>
    80002fe6:	fde40413          	addi	s0,s0,-34
    80002fea:	00143413          	seqz	s0,s0
    80002fee:	b715                	j	80002f12 <two_stage_translation_2+0xc2>
    80002ff0:	0002a597          	auipc	a1,0x2a
    80002ff4:	38858593          	addi	a1,a1,904 # 8002d378 <__func__.0+0x2c0>
    80002ff8:	0002a517          	auipc	a0,0x2a
    80002ffc:	3d050513          	addi	a0,a0,976 # 8002d3c8 <__func__.0+0x310>
    80003000:	657270ef          	jal	8002ae56 <printf>
    80003004:	4529                	li	a0,10
    80003006:	33f260ef          	jal	80029b44 <putchar>
    8000300a:	bff1                	j	80002fe6 <two_stage_translation_2+0x196>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    8000300c:	02200793          	li	a5,34
    80003010:	f4f913e3          	bne	s2,a5,80002f56 <two_stage_translation_2+0x106>
    80003014:	0002a597          	auipc	a1,0x2a
    80003018:	36458593          	addi	a1,a1,868 # 8002d378 <__func__.0+0x2c0>
    8000301c:	0002a517          	auipc	a0,0x2a
    80003020:	3ac50513          	addi	a0,a0,940 # 8002d3c8 <__func__.0+0x310>
    80003024:	633270ef          	jal	8002ae56 <printf>
    80003028:	4529                	li	a0,10
    8000302a:	31b260ef          	jal	80029b44 <putchar>
    8000302e:	d839                	beqz	s0,80002f84 <two_stage_translation_2+0x134>
    80003030:	4405                	li	s0,1
    TEST_END();
    80003032:	0002a597          	auipc	a1,0x2a
    80003036:	34658593          	addi	a1,a1,838 # 8002d378 <__func__.0+0x2c0>
    8000303a:	bf91                	j	80002f8e <two_stage_translation_2+0x13e>

000000008000303c <two_stage_translation_3>:

bool two_stage_translation_3(){
    8000303c:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000303e:	00028597          	auipc	a1,0x28
    80003042:	3c258593          	addi	a1,a1,962 # 8002b400 <__func__.16>
    80003046:	0002a517          	auipc	a0,0x2a
    8000304a:	35250513          	addi	a0,a0,850 # 8002d398 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    8000304e:	f406                	sd	ra,40(sp)
    80003050:	f022                	sd	s0,32(sp)
    80003052:	ec26                	sd	s1,24(sp)
    80003054:	e84a                	sd	s2,16(sp)
    80003056:	e44e                	sd	s3,8(sp)
    TEST_START();
    80003058:	5ff270ef          	jal	8002ae56 <printf>
    8000305c:	4529                	li	a0,10
    8000305e:	2e7260ef          	jal	80029b44 <putchar>
    *((volatile uint64_t*) addr) = val;
    80003062:	2201b737          	lui	a4,0x2201b
    80003066:	000887b7          	lui	a5,0x88
    8000306a:	070a                	slli	a4,a4,0x2
    8000306c:	44c5                	li	s1,17
    8000306e:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80003072:	e304                	sd	s1,0(a4)
    80003074:	07b2                	slli	a5,a5,0xc
    80003076:	02200913          	li	s2,34
    8000307a:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000307e:	450d                	li	a0,3
    80003080:	e89fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80003084:	d5cfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80003088:	93dfd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    8000308c:	ef0fd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80003090:	4509                	li	a0,2
    80003092:	e77fd0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    80003096:	4001b737          	lui	a4,0x4001b
    8000309a:	070a                	slli	a4,a4,0x2
    8000309c:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800030a0:	001007b7          	lui	a5,0x100
    800030a4:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800030a8:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800030aa:	0002b617          	auipc	a2,0x2b
    800030ae:	85e60613          	addi	a2,a2,-1954 # 8002d908 <__func__.0+0x850>
    800030b2:	08200593          	li	a1,130
    800030b6:	0002a517          	auipc	a0,0x2a
    800030ba:	2fa50513          	addi	a0,a0,762 # 8002d3b0 <__func__.0+0x2f8>
    800030be:	6380                	ld	s0,0(a5)
    800030c0:	597270ef          	jal	8002ae56 <printf>
    800030c4:	0c998863          	beq	s3,s1,80003194 <two_stage_translation_3+0x158>
    800030c8:	0002a597          	auipc	a1,0x2a
    800030cc:	2c058593          	addi	a1,a1,704 # 8002d388 <__func__.0+0x2d0>
    800030d0:	0002a517          	auipc	a0,0x2a
    800030d4:	2f850513          	addi	a0,a0,760 # 8002d3c8 <__func__.0+0x310>
    800030d8:	57f270ef          	jal	8002ae56 <printf>
    800030dc:	0002a517          	auipc	a0,0x2a
    800030e0:	2f450513          	addi	a0,a0,756 # 8002d3d0 <__func__.0+0x318>
    800030e4:	573270ef          	jal	8002ae56 <printf>
    800030e8:	02900513          	li	a0,41
    800030ec:	259260ef          	jal	80029b44 <putchar>
    800030f0:	4529                	li	a0,10
    800030f2:	253260ef          	jal	80029b44 <putchar>
    800030f6:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    800030f8:	4509                	li	a0,2
    800030fa:	e0ffd0ef          	jal	80000f08 <goto_priv>

    vspt_switch();
    800030fe:	cb7fd0ef          	jal	80000db4 <vspt_switch>
    80003102:	001007b7          	lui	a5,0x100
    80003106:	4001b737          	lui	a4,0x4001b
    8000310a:	070a                	slli	a4,a4,0x2
    8000310c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003110:	07b2                	slli	a5,a5,0xc
    80003112:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80003114:	0002b617          	auipc	a2,0x2b
    80003118:	97460613          	addi	a2,a2,-1676 # 8002da88 <__func__.0+0x9d0>
    8000311c:	08200593          	li	a1,130
    80003120:	0002a517          	auipc	a0,0x2a
    80003124:	29050513          	addi	a0,a0,656 # 8002d3b0 <__func__.0+0x2f8>
    80003128:	0007b903          	ld	s2,0(a5)
    8000312c:	52b270ef          	jal	8002ae56 <printf>
    80003130:	47c5                	li	a5,17
    80003132:	0af48d63          	beq	s1,a5,800031ec <two_stage_translation_3+0x1b0>
    80003136:	0002a597          	auipc	a1,0x2a
    8000313a:	25258593          	addi	a1,a1,594 # 8002d388 <__func__.0+0x2d0>
    8000313e:	0002a517          	auipc	a0,0x2a
    80003142:	28a50513          	addi	a0,a0,650 # 8002d3c8 <__func__.0+0x310>
    80003146:	511270ef          	jal	8002ae56 <printf>
    8000314a:	0002a517          	auipc	a0,0x2a
    8000314e:	28650513          	addi	a0,a0,646 # 8002d3d0 <__func__.0+0x318>
    80003152:	505270ef          	jal	8002ae56 <printf>
    80003156:	02900513          	li	a0,41
    8000315a:	1eb260ef          	jal	80029b44 <putchar>
    8000315e:	4529                	li	a0,10
    80003160:	1e5260ef          	jal	80029b44 <putchar>
    80003164:	4401                	li	s0,0

    TEST_END();
    80003166:	0002a597          	auipc	a1,0x2a
    8000316a:	22258593          	addi	a1,a1,546 # 8002d388 <__func__.0+0x2d0>
    8000316e:	0002a517          	auipc	a0,0x2a
    80003172:	2c250513          	addi	a0,a0,706 # 8002d430 <__func__.0+0x378>
    80003176:	4e1270ef          	jal	8002ae56 <printf>
    8000317a:	4511                	li	a0,4
    8000317c:	d8dfd0ef          	jal	80000f08 <goto_priv>
    80003180:	ea4fe0ef          	jal	80001824 <reset_state>
}
    80003184:	70a2                	ld	ra,40(sp)
    80003186:	8522                	mv	a0,s0
    80003188:	7402                	ld	s0,32(sp)
    8000318a:	64e2                	ld	s1,24(sp)
    8000318c:	6942                	ld	s2,16(sp)
    8000318e:	69a2                	ld	s3,8(sp)
    80003190:	6145                	addi	sp,sp,48
    80003192:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80003194:	03240e63          	beq	s0,s2,800031d0 <two_stage_translation_3+0x194>
    80003198:	0002a597          	auipc	a1,0x2a
    8000319c:	1f058593          	addi	a1,a1,496 # 8002d388 <__func__.0+0x2d0>
    800031a0:	0002a517          	auipc	a0,0x2a
    800031a4:	22850513          	addi	a0,a0,552 # 8002d3c8 <__func__.0+0x310>
    800031a8:	4af270ef          	jal	8002ae56 <printf>
    800031ac:	0002a517          	auipc	a0,0x2a
    800031b0:	22450513          	addi	a0,a0,548 # 8002d3d0 <__func__.0+0x318>
    800031b4:	4a3270ef          	jal	8002ae56 <printf>
    800031b8:	02900513          	li	a0,41
    800031bc:	189260ef          	jal	80029b44 <putchar>
    800031c0:	4529                	li	a0,10
    800031c2:	183260ef          	jal	80029b44 <putchar>
    800031c6:	fde40413          	addi	s0,s0,-34
    800031ca:	00143413          	seqz	s0,s0
    800031ce:	b72d                	j	800030f8 <two_stage_translation_3+0xbc>
    800031d0:	0002a597          	auipc	a1,0x2a
    800031d4:	1a858593          	addi	a1,a1,424 # 8002d378 <__func__.0+0x2c0>
    800031d8:	0002a517          	auipc	a0,0x2a
    800031dc:	1f050513          	addi	a0,a0,496 # 8002d3c8 <__func__.0+0x310>
    800031e0:	477270ef          	jal	8002ae56 <printf>
    800031e4:	4529                	li	a0,10
    800031e6:	15f260ef          	jal	80029b44 <putchar>
    800031ea:	bff1                	j	800031c6 <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    800031ec:	02200793          	li	a5,34
    800031f0:	f4f913e3          	bne	s2,a5,80003136 <two_stage_translation_3+0xfa>
    800031f4:	0002a597          	auipc	a1,0x2a
    800031f8:	18458593          	addi	a1,a1,388 # 8002d378 <__func__.0+0x2c0>
    800031fc:	0002a517          	auipc	a0,0x2a
    80003200:	1cc50513          	addi	a0,a0,460 # 8002d3c8 <__func__.0+0x310>
    80003204:	453270ef          	jal	8002ae56 <printf>
    80003208:	4529                	li	a0,10
    8000320a:	13b260ef          	jal	80029b44 <putchar>
    8000320e:	d839                	beqz	s0,80003164 <two_stage_translation_3+0x128>
    80003210:	4405                	li	s0,1
    TEST_END();
    80003212:	0002a597          	auipc	a1,0x2a
    80003216:	16658593          	addi	a1,a1,358 # 8002d378 <__func__.0+0x2c0>
    8000321a:	bf91                	j	8000316e <two_stage_translation_3+0x132>

000000008000321c <second_stage_only_translation>:

bool second_stage_only_translation(){
    8000321c:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    8000321e:	00028597          	auipc	a1,0x28
    80003222:	1fa58593          	addi	a1,a1,506 # 8002b418 <__func__.15>
    80003226:	0002a517          	auipc	a0,0x2a
    8000322a:	17250513          	addi	a0,a0,370 # 8002d398 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    8000322e:	f406                	sd	ra,40(sp)
    80003230:	f022                	sd	s0,32(sp)
    80003232:	e84a                	sd	s2,16(sp)
    80003234:	ec26                	sd	s1,24(sp)
    80003236:	e44e                	sd	s3,8(sp)
    80003238:	e052                	sd	s4,0(sp)
    TEST_START();
    8000323a:	41d270ef          	jal	8002ae56 <printf>
    8000323e:	4529                	li	a0,10
    80003240:	105260ef          	jal	80029b44 <putchar>
    *((volatile uint64_t*) addr) = val;
    80003244:	2201b737          	lui	a4,0x2201b
    80003248:	000887b7          	lui	a5,0x88
    8000324c:	070a                	slli	a4,a4,0x2
    8000324e:	4445                	li	s0,17
    80003250:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80003254:	e300                	sd	s0,0(a4)
    80003256:	07b2                	slli	a5,a5,0xc
    80003258:	02200913          	li	s2,34
    8000325c:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80003260:	00a007b7          	lui	a5,0xa00
    80003264:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80003268:	450d                	li	a0,3
    8000326a:	c9ffd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000326e:	b72fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80003272:	f52fd0ef          	jal	800009c4 <hpt_init>
    
    goto_priv(PRIV_VS);
    80003276:	4509                	li	a0,2
    80003278:	c91fd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000327c:	b91fd0ef          	jal	80000e0c <test_setup_except_function>
    return *((volatile uint64_t*) addr);
    80003280:	001007b7          	lui	a5,0x100
    80003284:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003288:	4001b737          	lui	a4,0x4001b
    8000328c:	07b2                	slli	a5,a5,0xc
    8000328e:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003290:	0002a617          	auipc	a2,0x2a
    80003294:	67860613          	addi	a2,a2,1656 # 8002d908 <__func__.0+0x850>
    80003298:	08200593          	li	a1,130
    8000329c:	0002a517          	auipc	a0,0x2a
    800032a0:	11450513          	addi	a0,a0,276 # 8002d3b0 <__func__.0+0x2f8>
    800032a4:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800032a8:	0007ba03          	ld	s4,0(a5)
    800032ac:	3ab270ef          	jal	8002ae56 <printf>
    800032b0:	00051797          	auipc	a5,0x51
    800032b4:	d617c783          	lbu	a5,-671(a5) # 80054011 <excpt+0x1>
    800032b8:	00051497          	auipc	s1,0x51
    800032bc:	d5848493          	addi	s1,s1,-680 # 80054010 <excpt>
    800032c0:	ef91                	bnez	a5,800032dc <second_stage_only_translation+0xc0>
    800032c2:	2a898663          	beq	s3,s0,8000356e <second_stage_only_translation+0x352>
    800032c6:	0002a597          	auipc	a1,0x2a
    800032ca:	0c258593          	addi	a1,a1,194 # 8002d388 <__func__.0+0x2d0>
    800032ce:	0002a517          	auipc	a0,0x2a
    800032d2:	0fa50513          	addi	a0,a0,250 # 8002d3c8 <__func__.0+0x310>
    800032d6:	381270ef          	jal	8002ae56 <printf>
    800032da:	a01d                	j	80003300 <second_stage_only_translation+0xe4>
    800032dc:	0002a597          	auipc	a1,0x2a
    800032e0:	0ac58593          	addi	a1,a1,172 # 8002d388 <__func__.0+0x2d0>
    800032e4:	0002a517          	auipc	a0,0x2a
    800032e8:	0e450513          	addi	a0,a0,228 # 8002d3c8 <__func__.0+0x310>
    800032ec:	36b270ef          	jal	8002ae56 <printf>
    800032f0:	00051797          	auipc	a5,0x51
    800032f4:	d217c783          	lbu	a5,-735(a5) # 80054011 <excpt+0x1>
    800032f8:	2a079f63          	bnez	a5,800035b6 <second_stage_only_translation+0x39a>
    800032fc:	32898f63          	beq	s3,s0,8000363a <second_stage_only_translation+0x41e>
    80003300:	0002a517          	auipc	a0,0x2a
    80003304:	0d050513          	addi	a0,a0,208 # 8002d3d0 <__func__.0+0x318>
    80003308:	34f270ef          	jal	8002ae56 <printf>
    8000330c:	02900513          	li	a0,41
    80003310:	035260ef          	jal	80029b44 <putchar>
    80003314:	4529                	li	a0,10
    80003316:	02f260ef          	jal	80029b44 <putchar>
    8000331a:	4401                	li	s0,0

    goto_priv(PRIV_HS);
    8000331c:	450d                	li	a0,3
    8000331e:	bebfd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80003322:	ab5fd0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    80003326:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000332a:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    8000332e:	4509                	li	a0,2
    80003330:	bd9fd0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80003334:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80003338:	ad5fd0ef          	jal	80000e0c <test_setup_except_function>
    8000333c:	001007b7          	lui	a5,0x100
    80003340:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003344:	4001b737          	lui	a4,0x4001b
    80003348:	07b2                	slli	a5,a5,0xc
    8000334a:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000334c:	0002a617          	auipc	a2,0x2a
    80003350:	78c60613          	addi	a2,a2,1932 # 8002dad8 <__func__.0+0xa20>
    80003354:	08200593          	li	a1,130
    80003358:	0002a517          	auipc	a0,0x2a
    8000335c:	05850513          	addi	a0,a0,88 # 8002d3b0 <__func__.0+0x2f8>
    80003360:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80003364:	0007b983          	ld	s3,0(a5)
    80003368:	2ef270ef          	jal	8002ae56 <printf>
    8000336c:	00051797          	auipc	a5,0x51
    80003370:	ca57c783          	lbu	a5,-859(a5) # 80054011 <excpt+0x1>
    80003374:	18079363          	bnez	a5,800034fa <second_stage_only_translation+0x2de>
    80003378:	02200793          	li	a5,34
    8000337c:	28f90b63          	beq	s2,a5,80003612 <second_stage_only_translation+0x3f6>
    80003380:	0002a597          	auipc	a1,0x2a
    80003384:	00858593          	addi	a1,a1,8 # 8002d388 <__func__.0+0x2d0>
    80003388:	0002a517          	auipc	a0,0x2a
    8000338c:	04050513          	addi	a0,a0,64 # 8002d3c8 <__func__.0+0x310>
    80003390:	2c7270ef          	jal	8002ae56 <printf>
    80003394:	0002a517          	auipc	a0,0x2a
    80003398:	03c50513          	addi	a0,a0,60 # 8002d3d0 <__func__.0+0x318>
    8000339c:	2bb270ef          	jal	8002ae56 <printf>
    800033a0:	02900513          	li	a0,41
    800033a4:	7a0260ef          	jal	80029b44 <putchar>
    800033a8:	4529                	li	a0,10
    800033aa:	79a260ef          	jal	80029b44 <putchar>
    800033ae:	c811                	beqz	s0,800033c2 <second_stage_only_translation+0x1a6>
    800033b0:	00051797          	auipc	a5,0x51
    800033b4:	c617c783          	lbu	a5,-927(a5) # 80054011 <excpt+0x1>
    800033b8:	e789                	bnez	a5,800033c2 <second_stage_only_translation+0x1a6>
    800033ba:	02200793          	li	a5,34
    800033be:	18f90063          	beq	s2,a5,8000353e <second_stage_only_translation+0x322>
    800033c2:	4401                	li	s0,0

    TEST_SETUP_EXCEPT();
    800033c4:	a49fd0ef          	jal	80000e0c <test_setup_except_function>
    800033c8:	001007b7          	lui	a5,0x100
    800033cc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800033d0:	07b2                	slli	a5,a5,0xc
    800033d2:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    800033d4:	08200593          	li	a1,130
    800033d8:	0002a617          	auipc	a2,0x2a
    800033dc:	72860613          	addi	a2,a2,1832 # 8002db00 <__func__.0+0xa48>
    800033e0:	0002a517          	auipc	a0,0x2a
    800033e4:	fd050513          	addi	a0,a0,-48 # 8002d3b0 <__func__.0+0x2f8>
    800033e8:	26f270ef          	jal	8002ae56 <printf>
    800033ec:	00051797          	auipc	a5,0x51
    800033f0:	c257c783          	lbu	a5,-987(a5) # 80054011 <excpt+0x1>
    800033f4:	0002a597          	auipc	a1,0x2a
    800033f8:	f9458593          	addi	a1,a1,-108 # 8002d388 <__func__.0+0x2d0>
    800033fc:	c789                	beqz	a5,80003406 <second_stage_only_translation+0x1ea>
    800033fe:	6498                	ld	a4,8(s1)
    80003400:	47d5                	li	a5,21
    80003402:	1ef70863          	beq	a4,a5,800035f2 <second_stage_only_translation+0x3d6>
    80003406:	0002a517          	auipc	a0,0x2a
    8000340a:	fc250513          	addi	a0,a0,-62 # 8002d3c8 <__func__.0+0x310>
    8000340e:	249270ef          	jal	8002ae56 <printf>
    80003412:	00051797          	auipc	a5,0x51
    80003416:	bff7c783          	lbu	a5,-1025(a5) # 80054011 <excpt+0x1>
    8000341a:	c789                	beqz	a5,80003424 <second_stage_only_translation+0x208>
    8000341c:	6498                	ld	a4,8(s1)
    8000341e:	47d5                	li	a5,21
    80003420:	12f70f63          	beq	a4,a5,8000355e <second_stage_only_translation+0x342>
    80003424:	0002a517          	auipc	a0,0x2a
    80003428:	fac50513          	addi	a0,a0,-84 # 8002d3d0 <__func__.0+0x318>
    8000342c:	22b270ef          	jal	8002ae56 <printf>
    80003430:	02900513          	li	a0,41
    80003434:	710260ef          	jal	80029b44 <putchar>
    80003438:	4529                	li	a0,10
    8000343a:	70a260ef          	jal	80029b44 <putchar>
    8000343e:	c819                	beqz	s0,80003454 <second_stage_only_translation+0x238>
    80003440:	00051797          	auipc	a5,0x51
    80003444:	bd17c783          	lbu	a5,-1071(a5) # 80054011 <excpt+0x1>
    80003448:	4401                	li	s0,0
    8000344a:	c789                	beqz	a5,80003454 <second_stage_only_translation+0x238>
    8000344c:	6498                	ld	a4,8(s1)
    8000344e:	47d5                	li	a5,21
    80003450:	18f70963          	beq	a4,a5,800035e2 <second_stage_only_translation+0x3c6>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    80003454:	9b9fd0ef          	jal	80000e0c <test_setup_except_function>
    80003458:	200007b7          	lui	a5,0x20000
    8000345c:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    8000345e:	07b2                	slli	a5,a5,0xc
    80003460:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80003462:	08200593          	li	a1,130
    80003466:	0002a617          	auipc	a2,0x2a
    8000346a:	6c260613          	addi	a2,a2,1730 # 8002db28 <__func__.0+0xa70>
    8000346e:	0002a517          	auipc	a0,0x2a
    80003472:	f4250513          	addi	a0,a0,-190 # 8002d3b0 <__func__.0+0x2f8>
    80003476:	1e1270ef          	jal	8002ae56 <printf>
    8000347a:	00051797          	auipc	a5,0x51
    8000347e:	b977c783          	lbu	a5,-1129(a5) # 80054011 <excpt+0x1>
    80003482:	0002a597          	auipc	a1,0x2a
    80003486:	f0658593          	addi	a1,a1,-250 # 8002d388 <__func__.0+0x2d0>
    8000348a:	e789                	bnez	a5,80003494 <second_stage_only_translation+0x278>
    8000348c:	0002a597          	auipc	a1,0x2a
    80003490:	eec58593          	addi	a1,a1,-276 # 8002d378 <__func__.0+0x2c0>
    80003494:	0002a517          	auipc	a0,0x2a
    80003498:	f3450513          	addi	a0,a0,-204 # 8002d3c8 <__func__.0+0x310>
    8000349c:	1bb270ef          	jal	8002ae56 <printf>
    800034a0:	00051797          	auipc	a5,0x51
    800034a4:	b717c783          	lbu	a5,-1167(a5) # 80054011 <excpt+0x1>
    800034a8:	e3c5                	bnez	a5,80003548 <second_stage_only_translation+0x32c>
    800034aa:	4529                	li	a0,10
    800034ac:	698260ef          	jal	80029b44 <putchar>
    800034b0:	cc1d                	beqz	s0,800034ee <second_stage_only_translation+0x2d2>
    800034b2:	00051797          	auipc	a5,0x51
    800034b6:	b5f7c783          	lbu	a5,-1185(a5) # 80054011 <excpt+0x1>
    800034ba:	eb95                	bnez	a5,800034ee <second_stage_only_translation+0x2d2>
    800034bc:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    800034be:	0002a597          	auipc	a1,0x2a
    800034c2:	eba58593          	addi	a1,a1,-326 # 8002d378 <__func__.0+0x2c0>
    800034c6:	0002a517          	auipc	a0,0x2a
    800034ca:	f6a50513          	addi	a0,a0,-150 # 8002d430 <__func__.0+0x378>
    800034ce:	189270ef          	jal	8002ae56 <printf>
    800034d2:	4511                	li	a0,4
    800034d4:	a35fd0ef          	jal	80000f08 <goto_priv>
    800034d8:	b4cfe0ef          	jal	80001824 <reset_state>
}
    800034dc:	70a2                	ld	ra,40(sp)
    800034de:	8522                	mv	a0,s0
    800034e0:	7402                	ld	s0,32(sp)
    800034e2:	64e2                	ld	s1,24(sp)
    800034e4:	6942                	ld	s2,16(sp)
    800034e6:	69a2                	ld	s3,8(sp)
    800034e8:	6a02                	ld	s4,0(sp)
    800034ea:	6145                	addi	sp,sp,48
    800034ec:	8082                	ret
    TEST_ASSERT(
    800034ee:	4401                	li	s0,0
    TEST_END();
    800034f0:	0002a597          	auipc	a1,0x2a
    800034f4:	e9858593          	addi	a1,a1,-360 # 8002d388 <__func__.0+0x2d0>
    800034f8:	b7f9                	j	800034c6 <second_stage_only_translation+0x2aa>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800034fa:	0002a597          	auipc	a1,0x2a
    800034fe:	e8e58593          	addi	a1,a1,-370 # 8002d388 <__func__.0+0x2d0>
    80003502:	0002a517          	auipc	a0,0x2a
    80003506:	ec650513          	addi	a0,a0,-314 # 8002d3c8 <__func__.0+0x310>
    8000350a:	14d270ef          	jal	8002ae56 <printf>
    8000350e:	00051797          	auipc	a5,0x51
    80003512:	b037c783          	lbu	a5,-1277(a5) # 80054011 <excpt+0x1>
    80003516:	e6079fe3          	bnez	a5,80003394 <second_stage_only_translation+0x178>
    8000351a:	02200793          	li	a5,34
    8000351e:	e6f91be3          	bne	s2,a5,80003394 <second_stage_only_translation+0x178>
    80003522:	47c5                	li	a5,17
    80003524:	e6f998e3          	bne	s3,a5,80003394 <second_stage_only_translation+0x178>
    80003528:	4529                	li	a0,10
    8000352a:	61a260ef          	jal	80029b44 <putchar>
    8000352e:	e8040ae3          	beqz	s0,800033c2 <second_stage_only_translation+0x1a6>
    80003532:	00051797          	auipc	a5,0x51
    80003536:	adf7c783          	lbu	a5,-1313(a5) # 80054011 <excpt+0x1>
    8000353a:	e80794e3          	bnez	a5,800033c2 <second_stage_only_translation+0x1a6>
    8000353e:	fef98413          	addi	s0,s3,-17
    80003542:	00143413          	seqz	s0,s0
    80003546:	bdbd                	j	800033c4 <second_stage_only_translation+0x1a8>
    TEST_ASSERT(
    80003548:	0002a517          	auipc	a0,0x2a
    8000354c:	e8850513          	addi	a0,a0,-376 # 8002d3d0 <__func__.0+0x318>
    80003550:	107270ef          	jal	8002ae56 <printf>
    80003554:	02900513          	li	a0,41
    80003558:	5ec260ef          	jal	80029b44 <putchar>
    8000355c:	b7b9                	j	800034aa <second_stage_only_translation+0x28e>
    TEST_ASSERT(
    8000355e:	00051717          	auipc	a4,0x51
    80003562:	ab672703          	lw	a4,-1354(a4) # 80054014 <excpt+0x4>
    80003566:	478d                	li	a5,3
    80003568:	eaf71ee3          	bne	a4,a5,80003424 <second_stage_only_translation+0x208>
    8000356c:	b5f1                	j	80003438 <second_stage_only_translation+0x21c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    8000356e:	0f2a0263          	beq	s4,s2,80003652 <second_stage_only_translation+0x436>
    80003572:	0002a597          	auipc	a1,0x2a
    80003576:	e1658593          	addi	a1,a1,-490 # 8002d388 <__func__.0+0x2d0>
    8000357a:	0002a517          	auipc	a0,0x2a
    8000357e:	e4e50513          	addi	a0,a0,-434 # 8002d3c8 <__func__.0+0x310>
    80003582:	0d5270ef          	jal	8002ae56 <printf>
    80003586:	0002a517          	auipc	a0,0x2a
    8000358a:	e4a50513          	addi	a0,a0,-438 # 8002d3d0 <__func__.0+0x318>
    8000358e:	0c9270ef          	jal	8002ae56 <printf>
    80003592:	02900513          	li	a0,41
    80003596:	5ae260ef          	jal	80029b44 <putchar>
    8000359a:	4529                	li	a0,10
    8000359c:	5a8260ef          	jal	80029b44 <putchar>
    800035a0:	00051797          	auipc	a5,0x51
    800035a4:	a717c783          	lbu	a5,-1423(a5) # 80054011 <excpt+0x1>
    800035a8:	d60799e3          	bnez	a5,8000331a <second_stage_only_translation+0xfe>
    800035ac:	fdea0413          	addi	s0,s4,-34
    800035b0:	00143413          	seqz	s0,s0
    800035b4:	b3a5                	j	8000331c <second_stage_only_translation+0x100>
    800035b6:	0002a517          	auipc	a0,0x2a
    800035ba:	e1a50513          	addi	a0,a0,-486 # 8002d3d0 <__func__.0+0x318>
    800035be:	099270ef          	jal	8002ae56 <printf>
    800035c2:	02900513          	li	a0,41
    800035c6:	57e260ef          	jal	80029b44 <putchar>
    800035ca:	4529                	li	a0,10
    800035cc:	578260ef          	jal	80029b44 <putchar>
    800035d0:	00051797          	auipc	a5,0x51
    800035d4:	a417c783          	lbu	a5,-1471(a5) # 80054011 <excpt+0x1>
    800035d8:	d40791e3          	bnez	a5,8000331a <second_stage_only_translation+0xfe>
    800035dc:	fc8988e3          	beq	s3,s0,800035ac <second_stage_only_translation+0x390>
    800035e0:	bb2d                	j	8000331a <second_stage_only_translation+0xfe>
    TEST_ASSERT(
    800035e2:	00051417          	auipc	s0,0x51
    800035e6:	a3242403          	lw	s0,-1486(s0) # 80054014 <excpt+0x4>
    800035ea:	1475                	addi	s0,s0,-3
    800035ec:	00143413          	seqz	s0,s0
    800035f0:	b595                	j	80003454 <second_stage_only_translation+0x238>
    800035f2:	00051717          	auipc	a4,0x51
    800035f6:	a2272703          	lw	a4,-1502(a4) # 80054014 <excpt+0x4>
    800035fa:	478d                	li	a5,3
    800035fc:	0002a597          	auipc	a1,0x2a
    80003600:	d7c58593          	addi	a1,a1,-644 # 8002d378 <__func__.0+0x2c0>
    80003604:	e0f701e3          	beq	a4,a5,80003406 <second_stage_only_translation+0x1ea>
    80003608:	0002a597          	auipc	a1,0x2a
    8000360c:	d8058593          	addi	a1,a1,-640 # 8002d388 <__func__.0+0x2d0>
    80003610:	bbdd                	j	80003406 <second_stage_only_translation+0x1ea>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003612:	47c5                	li	a5,17
    80003614:	d6f996e3          	bne	s3,a5,80003380 <second_stage_only_translation+0x164>
    80003618:	0002a597          	auipc	a1,0x2a
    8000361c:	d6058593          	addi	a1,a1,-672 # 8002d378 <__func__.0+0x2c0>
    80003620:	0002a517          	auipc	a0,0x2a
    80003624:	da850513          	addi	a0,a0,-600 # 8002d3c8 <__func__.0+0x310>
    80003628:	02f270ef          	jal	8002ae56 <printf>
    8000362c:	00051797          	auipc	a5,0x51
    80003630:	9e57c783          	lbu	a5,-1563(a5) # 80054011 <excpt+0x1>
    80003634:	ee078ae3          	beqz	a5,80003528 <second_stage_only_translation+0x30c>
    80003638:	bbb1                	j	80003394 <second_stage_only_translation+0x178>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    8000363a:	f52a16e3          	bne	s4,s2,80003586 <second_stage_only_translation+0x36a>
    8000363e:	4529                	li	a0,10
    80003640:	504260ef          	jal	80029b44 <putchar>
    80003644:	00051417          	auipc	s0,0x51
    80003648:	9cd44403          	lbu	s0,-1587(s0) # 80054011 <excpt+0x1>
    8000364c:	00144413          	xori	s0,s0,1
    80003650:	b1f1                	j	8000331c <second_stage_only_translation+0x100>
    80003652:	0002a597          	auipc	a1,0x2a
    80003656:	d2658593          	addi	a1,a1,-730 # 8002d378 <__func__.0+0x2c0>
    8000365a:	0002a517          	auipc	a0,0x2a
    8000365e:	d6e50513          	addi	a0,a0,-658 # 8002d3c8 <__func__.0+0x310>
    80003662:	7f4270ef          	jal	8002ae56 <printf>
    80003666:	00051797          	auipc	a5,0x51
    8000366a:	9ab7c783          	lbu	a5,-1621(a5) # 80054011 <excpt+0x1>
    8000366e:	dbe1                	beqz	a5,8000363e <second_stage_only_translation+0x422>
    80003670:	bf19                	j	80003586 <second_stage_only_translation+0x36a>

0000000080003672 <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    80003672:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    80003674:	00028597          	auipc	a1,0x28
    80003678:	dc458593          	addi	a1,a1,-572 # 8002b438 <__func__.13>
    8000367c:	0002a517          	auipc	a0,0x2a
    80003680:	d1c50513          	addi	a0,a0,-740 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    80003684:	f406                	sd	ra,40(sp)
    80003686:	ec26                	sd	s1,24(sp)
    80003688:	f022                	sd	s0,32(sp)
    8000368a:	e84a                	sd	s2,16(sp)
    8000368c:	e44e                	sd	s3,8(sp)
    8000368e:	e052                	sd	s4,0(sp)
    TEST_START();
    80003690:	7c6270ef          	jal	8002ae56 <printf>
    80003694:	4529                	li	a0,10
    80003696:	4ae260ef          	jal	80029b44 <putchar>
    
    hspt_init();
    8000369a:	f47fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000369e:	b26fd0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800036a2:	8dafd0ef          	jal	8000077c <vspt_init>

    TEST_SETUP_EXCEPT();
    800036a6:	f66fd0ef          	jal	80000e0c <test_setup_except_function>
    if(curr_priv != PRIV_M){
    800036aa:	00037497          	auipc	s1,0x37
    800036ae:	2b24a483          	lw	s1,690(s1) # 8003a95c <curr_priv>
    800036b2:	4791                	li	a5,4
    800036b4:	02f48763          	beq	s1,a5,800036e2 <m_and_hs_using_vs_access_1+0x70>
        ERROR("trying to write as mprv from low privilege");
    800036b8:	0002a517          	auipc	a0,0x2a
    800036bc:	4a850513          	addi	a0,a0,1192 # 8002db60 <__func__.0+0xaa8>
    800036c0:	796270ef          	jal	8002ae56 <printf>
    800036c4:	11100613          	li	a2,273
    800036c8:	00028597          	auipc	a1,0x28
    800036cc:	d9058593          	addi	a1,a1,-624 # 8002b458 <__func__.12>
    800036d0:	0002a517          	auipc	a0,0x2a
    800036d4:	e5050513          	addi	a0,a0,-432 # 8002d520 <__func__.0+0x468>
    800036d8:	77e270ef          	jal	8002ae56 <printf>
    800036dc:	4501                	li	a0,0
    800036de:	32e270ef          	jal	8002aa0c <exit>
    asm volatile(
    800036e2:	01108437          	lui	s0,0x1108
    800036e6:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800036ea:	00100937          	lui	s2,0x100
    set_prev_priv(priv);
    800036ee:	4509                	li	a0,2
    asm volatile(
    800036f0:	0442                	slli	s0,s0,0x10
    800036f2:	06b90913          	addi	s2,s2,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    800036f6:	f32fd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800036fa:	1439                	addi	s0,s0,-18
    800036fc:	0932                	slli	s2,s2,0xc
    800036fe:	000209b7          	lui	s3,0x20
    80003702:	3009a073          	csrs	mstatus,s3
    80003706:	00893023          	sd	s0,0(s2)
    8000370a:	3009b073          	csrc	mstatus,s3
    if(curr_priv != PRIV_M){
    8000370e:	00037797          	auipc	a5,0x37
    80003712:	24e7a783          	lw	a5,590(a5) # 8003a95c <curr_priv>
    80003716:	02978763          	beq	a5,s1,80003744 <m_and_hs_using_vs_access_1+0xd2>
        ERROR("trying to read as mprv from low privilege");
    8000371a:	0002a517          	auipc	a0,0x2a
    8000371e:	48650513          	addi	a0,a0,1158 # 8002dba0 <__func__.0+0xae8>
    80003722:	734270ef          	jal	8002ae56 <printf>
    80003726:	0fe00613          	li	a2,254
    8000372a:	00028597          	auipc	a1,0x28
    8000372e:	d3e58593          	addi	a1,a1,-706 # 8002b468 <__func__.11>
    80003732:	0002a517          	auipc	a0,0x2a
    80003736:	dee50513          	addi	a0,a0,-530 # 8002d520 <__func__.0+0x468>
    8000373a:	71c270ef          	jal	8002ae56 <printf>
    8000373e:	4501                	li	a0,0
    80003740:	2cc270ef          	jal	8002aa0c <exit>
    set_prev_priv(priv);
    80003744:	4509                	li	a0,2
    80003746:	ee2fd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    8000374a:	3009a073          	csrs	mstatus,s3
    8000374e:	00093483          	ld	s1,0(s2)
    80003752:	3009b073          	csrc	mstatus,s3
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    80003756:	0002a617          	auipc	a2,0x2a
    8000375a:	48a60613          	addi	a2,a2,1162 # 8002dbe0 <__func__.0+0xb28>
    8000375e:	08200593          	li	a1,130
    80003762:	0002a517          	auipc	a0,0x2a
    80003766:	c4e50513          	addi	a0,a0,-946 # 8002d3b0 <__func__.0+0x2f8>
    8000376a:	6ec270ef          	jal	8002ae56 <printf>
    8000376e:	00051797          	auipc	a5,0x51
    80003772:	8a37c783          	lbu	a5,-1885(a5) # 80054011 <excpt+0x1>
    80003776:	2a079663          	bnez	a5,80003a22 <m_and_hs_using_vs_access_1+0x3b0>
    8000377a:	44848763          	beq	s1,s0,80003bc8 <m_and_hs_using_vs_access_1+0x556>
    8000377e:	0002a597          	auipc	a1,0x2a
    80003782:	c0a58593          	addi	a1,a1,-1014 # 8002d388 <__func__.0+0x2d0>
    80003786:	0002a517          	auipc	a0,0x2a
    8000378a:	c4250513          	addi	a0,a0,-958 # 8002d3c8 <__func__.0+0x310>
    8000378e:	6c8270ef          	jal	8002ae56 <printf>
    80003792:	0002a517          	auipc	a0,0x2a
    80003796:	c3e50513          	addi	a0,a0,-962 # 8002d3d0 <__func__.0+0x318>
    8000379a:	6bc270ef          	jal	8002ae56 <printf>
    8000379e:	02900513          	li	a0,41
    800037a2:	3a2260ef          	jal	80029b44 <putchar>
    800037a6:	4529                	li	a0,10
    800037a8:	39c260ef          	jal	80029b44 <putchar>
    800037ac:	00051797          	auipc	a5,0x51
    800037b0:	8657c783          	lbu	a5,-1947(a5) # 80054011 <excpt+0x1>
    800037b4:	4901                	li	s2,0
    800037b6:	eb91                	bnez	a5,800037ca <m_and_hs_using_vs_access_1+0x158>
    800037b8:	011087b7          	lui	a5,0x1108
    800037bc:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800037c0:	07c2                	slli	a5,a5,0x10
    800037c2:	17b9                	addi	a5,a5,-18
    800037c4:	8c9d                	sub	s1,s1,a5
    800037c6:	0014b913          	seqz	s2,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    800037ca:	450d                	li	a0,3
    800037cc:	f3cfd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800037d0:	4509                	li	a0,2
    800037d2:	e56fd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800037d6:	e36fd0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    800037da:	37ab74b7          	lui	s1,0x37ab7
    800037de:	001007b7          	lui	a5,0x100
    800037e2:	048a                	slli	s1,s1,0x2
    800037e4:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800037e8:	eef48493          	addi	s1,s1,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800037ec:	07b2                	slli	a5,a5,0xc
    800037ee:	6e97c073          	.insn	4, 0x6e97c073
    asm volatile(
    800037f2:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    800037f6:	0002a617          	auipc	a2,0x2a
    800037fa:	41260613          	addi	a2,a2,1042 # 8002dc08 <__func__.0+0xb50>
    800037fe:	08200593          	li	a1,130
    80003802:	0002a517          	auipc	a0,0x2a
    80003806:	bae50513          	addi	a0,a0,-1106 # 8002d3b0 <__func__.0+0x2f8>
    8000380a:	64c270ef          	jal	8002ae56 <printf>
    8000380e:	00051797          	auipc	a5,0x51
    80003812:	8037c783          	lbu	a5,-2045(a5) # 80054011 <excpt+0x1>
    80003816:	24079263          	bnez	a5,80003a5a <m_and_hs_using_vs_access_1+0x3e8>
    8000381a:	3c940863          	beq	s0,s1,80003bea <m_and_hs_using_vs_access_1+0x578>
    8000381e:	0002a597          	auipc	a1,0x2a
    80003822:	b6a58593          	addi	a1,a1,-1174 # 8002d388 <__func__.0+0x2d0>
    80003826:	0002a517          	auipc	a0,0x2a
    8000382a:	ba250513          	addi	a0,a0,-1118 # 8002d3c8 <__func__.0+0x310>
    8000382e:	628270ef          	jal	8002ae56 <printf>
    80003832:	0002a517          	auipc	a0,0x2a
    80003836:	b9e50513          	addi	a0,a0,-1122 # 8002d3d0 <__func__.0+0x318>
    8000383a:	61c270ef          	jal	8002ae56 <printf>
    8000383e:	02900513          	li	a0,41
    80003842:	302260ef          	jal	80029b44 <putchar>
    80003846:	4529                	li	a0,10
    80003848:	2fc260ef          	jal	80029b44 <putchar>
    8000384c:	32091563          	bnez	s2,80003b76 <m_and_hs_using_vs_access_1+0x504>
    80003850:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    80003852:	dbafd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003856:	001007b7          	lui	a5,0x100
    8000385a:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000385e:	07b2                	slli	a5,a5,0xc
    80003860:	0ff00913          	li	s2,255
    80003864:	6327c073          	.insn	4, 0x6327c073
    asm volatile(
    80003868:	6007c9f3          	.insn	4, 0x6007c9f3
    asm volatile(
    8000386c:	6017c4f3          	.insn	4, 0x6017c4f3
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003870:	0002a617          	auipc	a2,0x2a
    80003874:	3a060613          	addi	a2,a2,928 # 8002dc10 <__func__.0+0xb58>
    80003878:	08200593          	li	a1,130
    8000387c:	0002a517          	auipc	a0,0x2a
    80003880:	b3450513          	addi	a0,a0,-1228 # 8002d3b0 <__func__.0+0x2f8>
    80003884:	5d2270ef          	jal	8002ae56 <printf>
    80003888:	00050797          	auipc	a5,0x50
    8000388c:	7897c783          	lbu	a5,1929(a5) # 80054011 <excpt+0x1>
    80003890:	28079e63          	bnez	a5,80003b2c <m_and_hs_using_vs_access_1+0x4ba>
    80003894:	57fd                	li	a5,-1
    80003896:	30f98763          	beq	s3,a5,80003ba4 <m_and_hs_using_vs_access_1+0x532>
    8000389a:	0002a597          	auipc	a1,0x2a
    8000389e:	aee58593          	addi	a1,a1,-1298 # 8002d388 <__func__.0+0x2d0>
    800038a2:	0002a517          	auipc	a0,0x2a
    800038a6:	b2650513          	addi	a0,a0,-1242 # 8002d3c8 <__func__.0+0x310>
    800038aa:	5ac270ef          	jal	8002ae56 <printf>
    800038ae:	0002a517          	auipc	a0,0x2a
    800038b2:	b2250513          	addi	a0,a0,-1246 # 8002d3d0 <__func__.0+0x318>
    800038b6:	5a0270ef          	jal	8002ae56 <printf>
    800038ba:	02900513          	li	a0,41
    800038be:	286260ef          	jal	80029b44 <putchar>
    800038c2:	4529                	li	a0,10
    800038c4:	280260ef          	jal	80029b44 <putchar>
    800038c8:	c419                	beqz	s0,800038d6 <m_and_hs_using_vs_access_1+0x264>
    800038ca:	00050797          	auipc	a5,0x50
    800038ce:	7477c783          	lbu	a5,1863(a5) # 80054011 <excpt+0x1>
    800038d2:	2c078563          	beqz	a5,80003b9c <m_and_hs_using_vs_access_1+0x52a>
    800038d6:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800038d8:	d34fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800038dc:	001007b7          	lui	a5,0x100
    800038e0:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800038e4:	6941                	lui	s2,0x10
    800038e6:	07b2                	slli	a5,a5,0xc
    800038e8:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    800038ea:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    800038ee:	6407c9f3          	.insn	4, 0x6407c9f3
    asm volatile(
    800038f2:	6417c4f3          	.insn	4, 0x6417c4f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    800038f6:	0002a617          	auipc	a2,0x2a
    800038fa:	33260613          	addi	a2,a2,818 # 8002dc28 <__func__.0+0xb70>
    800038fe:	08200593          	li	a1,130
    80003902:	0002a517          	auipc	a0,0x2a
    80003906:	aae50513          	addi	a0,a0,-1362 # 8002d3b0 <__func__.0+0x2f8>
    8000390a:	54c270ef          	jal	8002ae56 <printf>
    8000390e:	00050797          	auipc	a5,0x50
    80003912:	7037c783          	lbu	a5,1795(a5) # 80054011 <excpt+0x1>
    80003916:	1c079563          	bnez	a5,80003ae0 <m_and_hs_using_vs_access_1+0x46e>
    8000391a:	57fd                	li	a5,-1
    8000391c:	30f98b63          	beq	s3,a5,80003c32 <m_and_hs_using_vs_access_1+0x5c0>
    80003920:	0002a597          	auipc	a1,0x2a
    80003924:	a6858593          	addi	a1,a1,-1432 # 8002d388 <__func__.0+0x2d0>
    80003928:	0002a517          	auipc	a0,0x2a
    8000392c:	aa050513          	addi	a0,a0,-1376 # 8002d3c8 <__func__.0+0x310>
    80003930:	526270ef          	jal	8002ae56 <printf>
    80003934:	0002a517          	auipc	a0,0x2a
    80003938:	a9c50513          	addi	a0,a0,-1380 # 8002d3d0 <__func__.0+0x318>
    8000393c:	51a270ef          	jal	8002ae56 <printf>
    80003940:	02900513          	li	a0,41
    80003944:	200260ef          	jal	80029b44 <putchar>
    80003948:	4529                	li	a0,10
    8000394a:	1fa260ef          	jal	80029b44 <putchar>
    8000394e:	c419                	beqz	s0,8000395c <m_and_hs_using_vs_access_1+0x2ea>
    80003950:	00050797          	auipc	a5,0x50
    80003954:	6c17c783          	lbu	a5,1729(a5) # 80054011 <excpt+0x1>
    80003958:	22078e63          	beqz	a5,80003b94 <m_and_hs_using_vs_access_1+0x522>
    8000395c:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    8000395e:	caefd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003962:	001007b7          	lui	a5,0x100
    80003966:	54fd                	li	s1,-1
    80003968:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000396c:	07b2                	slli	a5,a5,0xc
    8000396e:	0204d993          	srli	s3,s1,0x20
    80003972:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    80003976:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    8000397a:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    8000397e:	0002a617          	auipc	a2,0x2a
    80003982:	2c260613          	addi	a2,a2,706 # 8002dc40 <__func__.0+0xb88>
    80003986:	08200593          	li	a1,130
    8000398a:	0002a517          	auipc	a0,0x2a
    8000398e:	a2650513          	addi	a0,a0,-1498 # 8002d3b0 <__func__.0+0x2f8>
    80003992:	4c4270ef          	jal	8002ae56 <printf>
    80003996:	00050797          	auipc	a5,0x50
    8000399a:	67b7c783          	lbu	a5,1659(a5) # 80054011 <excpt+0x1>
    8000399e:	0e079c63          	bnez	a5,80003a96 <m_and_hs_using_vs_access_1+0x424>
    800039a2:	269a0563          	beq	s4,s1,80003c0c <m_and_hs_using_vs_access_1+0x59a>
    800039a6:	0002a597          	auipc	a1,0x2a
    800039aa:	9e258593          	addi	a1,a1,-1566 # 8002d388 <__func__.0+0x2d0>
    800039ae:	0002a517          	auipc	a0,0x2a
    800039b2:	a1a50513          	addi	a0,a0,-1510 # 8002d3c8 <__func__.0+0x310>
    800039b6:	4a0270ef          	jal	8002ae56 <printf>
    800039ba:	0002a517          	auipc	a0,0x2a
    800039be:	a1650513          	addi	a0,a0,-1514 # 8002d3d0 <__func__.0+0x318>
    800039c2:	494270ef          	jal	8002ae56 <printf>
    800039c6:	02900513          	li	a0,41
    800039ca:	17a260ef          	jal	80029b44 <putchar>
    800039ce:	4529                	li	a0,10
    800039d0:	174260ef          	jal	80029b44 <putchar>
    800039d4:	00090e63          	beqz	s2,800039f0 <m_and_hs_using_vs_access_1+0x37e>
    800039d8:	00050797          	auipc	a5,0x50
    800039dc:	6397c783          	lbu	a5,1593(a5) # 80054011 <excpt+0x1>
    800039e0:	eb81                	bnez	a5,800039f0 <m_and_hs_using_vs_access_1+0x37e>
    800039e2:	57fd                	li	a5,-1
    800039e4:	00fa1663          	bne	s4,a5,800039f0 <m_and_hs_using_vs_access_1+0x37e>
    800039e8:	020a5a13          	srli	s4,s4,0x20
    800039ec:	0f440463          	beq	s0,s4,80003ad4 <m_and_hs_using_vs_access_1+0x462>
    800039f0:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    800039f2:	0002a597          	auipc	a1,0x2a
    800039f6:	99658593          	addi	a1,a1,-1642 # 8002d388 <__func__.0+0x2d0>
    800039fa:	0002a517          	auipc	a0,0x2a
    800039fe:	a3650513          	addi	a0,a0,-1482 # 8002d430 <__func__.0+0x378>
    80003a02:	454270ef          	jal	8002ae56 <printf>
    80003a06:	4511                	li	a0,4
    80003a08:	d00fd0ef          	jal	80000f08 <goto_priv>
    80003a0c:	e19fd0ef          	jal	80001824 <reset_state>
}
    80003a10:	70a2                	ld	ra,40(sp)
    80003a12:	8522                	mv	a0,s0
    80003a14:	7402                	ld	s0,32(sp)
    80003a16:	64e2                	ld	s1,24(sp)
    80003a18:	6942                	ld	s2,16(sp)
    80003a1a:	69a2                	ld	s3,8(sp)
    80003a1c:	6a02                	ld	s4,0(sp)
    80003a1e:	6145                	addi	sp,sp,48
    80003a20:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003a22:	0002a597          	auipc	a1,0x2a
    80003a26:	96658593          	addi	a1,a1,-1690 # 8002d388 <__func__.0+0x2d0>
    80003a2a:	0002a517          	auipc	a0,0x2a
    80003a2e:	99e50513          	addi	a0,a0,-1634 # 8002d3c8 <__func__.0+0x310>
    80003a32:	424270ef          	jal	8002ae56 <printf>
    80003a36:	00050797          	auipc	a5,0x50
    80003a3a:	5db7c783          	lbu	a5,1499(a5) # 80054011 <excpt+0x1>
    80003a3e:	d4079ae3          	bnez	a5,80003792 <m_and_hs_using_vs_access_1+0x120>
    80003a42:	d48498e3          	bne	s1,s0,80003792 <m_and_hs_using_vs_access_1+0x120>
    80003a46:	4529                	li	a0,10
    80003a48:	0fc260ef          	jal	80029b44 <putchar>
    80003a4c:	00050917          	auipc	s2,0x50
    80003a50:	5c594903          	lbu	s2,1477(s2) # 80054011 <excpt+0x1>
    80003a54:	00194913          	xori	s2,s2,1
    80003a58:	bb8d                	j	800037ca <m_and_hs_using_vs_access_1+0x158>
    TEST_ASSERT("hs hlvd",
    80003a5a:	0002a597          	auipc	a1,0x2a
    80003a5e:	92e58593          	addi	a1,a1,-1746 # 8002d388 <__func__.0+0x2d0>
    80003a62:	0002a517          	auipc	a0,0x2a
    80003a66:	96650513          	addi	a0,a0,-1690 # 8002d3c8 <__func__.0+0x310>
    80003a6a:	3ec270ef          	jal	8002ae56 <printf>
    80003a6e:	00050797          	auipc	a5,0x50
    80003a72:	5a37c783          	lbu	a5,1443(a5) # 80054011 <excpt+0x1>
    80003a76:	da079ee3          	bnez	a5,80003832 <m_and_hs_using_vs_access_1+0x1c0>
    80003a7a:	da941ce3          	bne	s0,s1,80003832 <m_and_hs_using_vs_access_1+0x1c0>
    80003a7e:	4529                	li	a0,10
    80003a80:	0c4260ef          	jal	80029b44 <putchar>
    80003a84:	dc0906e3          	beqz	s2,80003850 <m_and_hs_using_vs_access_1+0x1de>
    80003a88:	00050417          	auipc	s0,0x50
    80003a8c:	58944403          	lbu	s0,1417(s0) # 80054011 <excpt+0x1>
    80003a90:	00144413          	xori	s0,s0,1
    80003a94:	bb7d                	j	80003852 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003a96:	0002a597          	auipc	a1,0x2a
    80003a9a:	8f258593          	addi	a1,a1,-1806 # 8002d388 <__func__.0+0x2d0>
    80003a9e:	0002a517          	auipc	a0,0x2a
    80003aa2:	92a50513          	addi	a0,a0,-1750 # 8002d3c8 <__func__.0+0x310>
    80003aa6:	3b0270ef          	jal	8002ae56 <printf>
    80003aaa:	00050797          	auipc	a5,0x50
    80003aae:	5677c783          	lbu	a5,1383(a5) # 80054011 <excpt+0x1>
    80003ab2:	f00794e3          	bnez	a5,800039ba <m_and_hs_using_vs_access_1+0x348>
    80003ab6:	f09a12e3          	bne	s4,s1,800039ba <m_and_hs_using_vs_access_1+0x348>
    80003aba:	f13410e3          	bne	s0,s3,800039ba <m_and_hs_using_vs_access_1+0x348>
    80003abe:	4529                	li	a0,10
    80003ac0:	084260ef          	jal	80029b44 <putchar>
    80003ac4:	f20906e3          	beqz	s2,800039f0 <m_and_hs_using_vs_access_1+0x37e>
    80003ac8:	00050797          	auipc	a5,0x50
    80003acc:	5497c783          	lbu	a5,1353(a5) # 80054011 <excpt+0x1>
    80003ad0:	f20790e3          	bnez	a5,800039f0 <m_and_hs_using_vs_access_1+0x37e>
    80003ad4:	4405                	li	s0,1
    TEST_END();
    80003ad6:	0002a597          	auipc	a1,0x2a
    80003ada:	8a258593          	addi	a1,a1,-1886 # 8002d378 <__func__.0+0x2c0>
    80003ade:	bf31                	j	800039fa <m_and_hs_using_vs_access_1+0x388>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003ae0:	0002a597          	auipc	a1,0x2a
    80003ae4:	8a858593          	addi	a1,a1,-1880 # 8002d388 <__func__.0+0x2d0>
    80003ae8:	0002a517          	auipc	a0,0x2a
    80003aec:	8e050513          	addi	a0,a0,-1824 # 8002d3c8 <__func__.0+0x310>
    80003af0:	366270ef          	jal	8002ae56 <printf>
    80003af4:	00050797          	auipc	a5,0x50
    80003af8:	51d7c783          	lbu	a5,1309(a5) # 80054011 <excpt+0x1>
    80003afc:	e2079ce3          	bnez	a5,80003934 <m_and_hs_using_vs_access_1+0x2c2>
    80003b00:	57fd                	li	a5,-1
    80003b02:	e2f999e3          	bne	s3,a5,80003934 <m_and_hs_using_vs_access_1+0x2c2>
    80003b06:	e32497e3          	bne	s1,s2,80003934 <m_and_hs_using_vs_access_1+0x2c2>
    80003b0a:	4529                	li	a0,10
    80003b0c:	038260ef          	jal	80029b44 <putchar>
    80003b10:	e40406e3          	beqz	s0,8000395c <m_and_hs_using_vs_access_1+0x2ea>
    80003b14:	00050797          	auipc	a5,0x50
    80003b18:	4fd7c783          	lbu	a5,1277(a5) # 80054011 <excpt+0x1>
    80003b1c:	e40790e3          	bnez	a5,8000395c <m_and_hs_using_vs_access_1+0x2ea>
    80003b20:	7941                	lui	s2,0xffff0
    80003b22:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003b24:	9926                	add	s2,s2,s1
    80003b26:	00193913          	seqz	s2,s2
    80003b2a:	bd15                	j	8000395e <m_and_hs_using_vs_access_1+0x2ec>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003b2c:	0002a597          	auipc	a1,0x2a
    80003b30:	85c58593          	addi	a1,a1,-1956 # 8002d388 <__func__.0+0x2d0>
    80003b34:	0002a517          	auipc	a0,0x2a
    80003b38:	89450513          	addi	a0,a0,-1900 # 8002d3c8 <__func__.0+0x310>
    80003b3c:	31a270ef          	jal	8002ae56 <printf>
    80003b40:	00050797          	auipc	a5,0x50
    80003b44:	4d17c783          	lbu	a5,1233(a5) # 80054011 <excpt+0x1>
    80003b48:	d60793e3          	bnez	a5,800038ae <m_and_hs_using_vs_access_1+0x23c>
    80003b4c:	57fd                	li	a5,-1
    80003b4e:	d6f990e3          	bne	s3,a5,800038ae <m_and_hs_using_vs_access_1+0x23c>
    80003b52:	d5249ee3          	bne	s1,s2,800038ae <m_and_hs_using_vs_access_1+0x23c>
    80003b56:	4529                	li	a0,10
    80003b58:	7ed250ef          	jal	80029b44 <putchar>
    80003b5c:	d6040de3          	beqz	s0,800038d6 <m_and_hs_using_vs_access_1+0x264>
    80003b60:	00050797          	auipc	a5,0x50
    80003b64:	4b17c783          	lbu	a5,1201(a5) # 80054011 <excpt+0x1>
    80003b68:	d60797e3          	bnez	a5,800038d6 <m_and_hs_using_vs_access_1+0x264>
    80003b6c:	f0148793          	addi	a5,s1,-255
    80003b70:	0017b413          	seqz	s0,a5
    80003b74:	b395                	j	800038d8 <m_and_hs_using_vs_access_1+0x266>
    TEST_ASSERT("hs hlvd",
    80003b76:	00050797          	auipc	a5,0x50
    80003b7a:	49b7c783          	lbu	a5,1179(a5) # 80054011 <excpt+0x1>
    80003b7e:	cc0799e3          	bnez	a5,80003850 <m_and_hs_using_vs_access_1+0x1de>
    80003b82:	c85497b7          	lui	a5,0xc8549
    80003b86:	078a                	slli	a5,a5,0x2
    80003b88:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003b8c:	943e                	add	s0,s0,a5
    80003b8e:	00143413          	seqz	s0,s0
    80003b92:	b1c1                	j	80003852 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003b94:	57fd                	li	a5,-1
    80003b96:	dcf993e3          	bne	s3,a5,8000395c <m_and_hs_using_vs_access_1+0x2ea>
    80003b9a:	b759                	j	80003b20 <m_and_hs_using_vs_access_1+0x4ae>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003b9c:	57fd                	li	a5,-1
    80003b9e:	d2f99ce3          	bne	s3,a5,800038d6 <m_and_hs_using_vs_access_1+0x264>
    80003ba2:	b7e9                	j	80003b6c <m_and_hs_using_vs_access_1+0x4fa>
    80003ba4:	cf249be3          	bne	s1,s2,8000389a <m_and_hs_using_vs_access_1+0x228>
    80003ba8:	00029597          	auipc	a1,0x29
    80003bac:	7d058593          	addi	a1,a1,2000 # 8002d378 <__func__.0+0x2c0>
    80003bb0:	0002a517          	auipc	a0,0x2a
    80003bb4:	81850513          	addi	a0,a0,-2024 # 8002d3c8 <__func__.0+0x310>
    80003bb8:	29e270ef          	jal	8002ae56 <printf>
    80003bbc:	00050797          	auipc	a5,0x50
    80003bc0:	4557c783          	lbu	a5,1109(a5) # 80054011 <excpt+0x1>
    80003bc4:	dbc9                	beqz	a5,80003b56 <m_and_hs_using_vs_access_1+0x4e4>
    80003bc6:	b1e5                	j	800038ae <m_and_hs_using_vs_access_1+0x23c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003bc8:	00029597          	auipc	a1,0x29
    80003bcc:	7b058593          	addi	a1,a1,1968 # 8002d378 <__func__.0+0x2c0>
    80003bd0:	00029517          	auipc	a0,0x29
    80003bd4:	7f850513          	addi	a0,a0,2040 # 8002d3c8 <__func__.0+0x310>
    80003bd8:	27e270ef          	jal	8002ae56 <printf>
    80003bdc:	00050797          	auipc	a5,0x50
    80003be0:	4357c783          	lbu	a5,1077(a5) # 80054011 <excpt+0x1>
    80003be4:	bc0781e3          	beqz	a5,800037a6 <m_and_hs_using_vs_access_1+0x134>
    80003be8:	b66d                	j	80003792 <m_and_hs_using_vs_access_1+0x120>
    TEST_ASSERT("hs hlvd",
    80003bea:	00029597          	auipc	a1,0x29
    80003bee:	78e58593          	addi	a1,a1,1934 # 8002d378 <__func__.0+0x2c0>
    80003bf2:	00029517          	auipc	a0,0x29
    80003bf6:	7d650513          	addi	a0,a0,2006 # 8002d3c8 <__func__.0+0x310>
    80003bfa:	25c270ef          	jal	8002ae56 <printf>
    80003bfe:	00050797          	auipc	a5,0x50
    80003c02:	4137c783          	lbu	a5,1043(a5) # 80054011 <excpt+0x1>
    80003c06:	e6078ce3          	beqz	a5,80003a7e <m_and_hs_using_vs_access_1+0x40c>
    80003c0a:	b125                	j	80003832 <m_and_hs_using_vs_access_1+0x1c0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003c0c:	d9341de3          	bne	s0,s3,800039a6 <m_and_hs_using_vs_access_1+0x334>
    80003c10:	00029597          	auipc	a1,0x29
    80003c14:	76858593          	addi	a1,a1,1896 # 8002d378 <__func__.0+0x2c0>
    80003c18:	00029517          	auipc	a0,0x29
    80003c1c:	7b050513          	addi	a0,a0,1968 # 8002d3c8 <__func__.0+0x310>
    80003c20:	236270ef          	jal	8002ae56 <printf>
    80003c24:	00050797          	auipc	a5,0x50
    80003c28:	3ed7c783          	lbu	a5,1005(a5) # 80054011 <excpt+0x1>
    80003c2c:	e80789e3          	beqz	a5,80003abe <m_and_hs_using_vs_access_1+0x44c>
    80003c30:	b369                	j	800039ba <m_and_hs_using_vs_access_1+0x348>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003c32:	cf2497e3          	bne	s1,s2,80003920 <m_and_hs_using_vs_access_1+0x2ae>
    80003c36:	00029597          	auipc	a1,0x29
    80003c3a:	74258593          	addi	a1,a1,1858 # 8002d378 <__func__.0+0x2c0>
    80003c3e:	00029517          	auipc	a0,0x29
    80003c42:	78a50513          	addi	a0,a0,1930 # 8002d3c8 <__func__.0+0x310>
    80003c46:	210270ef          	jal	8002ae56 <printf>
    80003c4a:	00050797          	auipc	a5,0x50
    80003c4e:	3c77c783          	lbu	a5,967(a5) # 80054011 <excpt+0x1>
    80003c52:	ea078ce3          	beqz	a5,80003b0a <m_and_hs_using_vs_access_1+0x498>
    80003c56:	b9f9                	j	80003934 <m_and_hs_using_vs_access_1+0x2c2>

0000000080003c58 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003c58:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003c5a:	00028597          	auipc	a1,0x28
    80003c5e:	81e58593          	addi	a1,a1,-2018 # 8002b478 <__func__.10>
    80003c62:	00029517          	auipc	a0,0x29
    80003c66:	73650513          	addi	a0,a0,1846 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    80003c6a:	ec06                	sd	ra,24(sp)
    80003c6c:	e822                	sd	s0,16(sp)
    80003c6e:	e426                	sd	s1,8(sp)
    TEST_START();
    80003c70:	1e6270ef          	jal	8002ae56 <printf>
    80003c74:	4529                	li	a0,10
    80003c76:	6cf250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80003c7a:	967fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003c7e:	d47fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003c82:	afbfc0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80003c86:	450d                	li	a0,3
    80003c88:	a80fd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003c8c:	4509                	li	a0,2
    80003c8e:	99afd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003c92:	97afd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003c96:	200037b7          	lui	a5,0x20003
    80003c9a:	078e                	slli	a5,a5,0x3
    80003c9c:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003ca0:	08200593          	li	a1,130
    80003ca4:	0002a617          	auipc	a2,0x2a
    80003ca8:	fb460613          	addi	a2,a2,-76 # 8002dc58 <__func__.0+0xba0>
    80003cac:	00029517          	auipc	a0,0x29
    80003cb0:	70450513          	addi	a0,a0,1796 # 8002d3b0 <__func__.0+0x2f8>
    80003cb4:	1a2270ef          	jal	8002ae56 <printf>
    80003cb8:	00050797          	auipc	a5,0x50
    80003cbc:	3597c783          	lbu	a5,857(a5) # 80054011 <excpt+0x1>
    80003cc0:	00029597          	auipc	a1,0x29
    80003cc4:	6b858593          	addi	a1,a1,1720 # 8002d378 <__func__.0+0x2c0>
    80003cc8:	c789                	beqz	a5,80003cd2 <m_and_hs_using_vs_access_2+0x7a>
    80003cca:	00029597          	auipc	a1,0x29
    80003cce:	6be58593          	addi	a1,a1,1726 # 8002d388 <__func__.0+0x2d0>
    80003cd2:	00029517          	auipc	a0,0x29
    80003cd6:	6f650513          	addi	a0,a0,1782 # 8002d3c8 <__func__.0+0x310>
    80003cda:	17c270ef          	jal	8002ae56 <printf>
    80003cde:	00050797          	auipc	a5,0x50
    80003ce2:	3337c783          	lbu	a5,819(a5) # 80054011 <excpt+0x1>
    80003ce6:	24079d63          	bnez	a5,80003f40 <m_and_hs_using_vs_access_2+0x2e8>
    80003cea:	4529                	li	a0,10
    80003cec:	659250ef          	jal	80029b44 <putchar>
    80003cf0:	00050497          	auipc	s1,0x50
    80003cf4:	3214c483          	lbu	s1,801(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003cf8:	914fd0ef          	jal	80000e0c <test_setup_except_function>
    80003cfc:	4785                	li	a5,1
    80003cfe:	1782                	slli	a5,a5,0x20
    80003d00:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003d04:	08200593          	li	a1,130
    80003d08:	0002a617          	auipc	a2,0x2a
    80003d0c:	f7860613          	addi	a2,a2,-136 # 8002dc80 <__func__.0+0xbc8>
    80003d10:	00029517          	auipc	a0,0x29
    80003d14:	6a050513          	addi	a0,a0,1696 # 8002d3b0 <__func__.0+0x2f8>
    80003d18:	13e270ef          	jal	8002ae56 <printf>
    80003d1c:	00050797          	auipc	a5,0x50
    80003d20:	2f57c783          	lbu	a5,757(a5) # 80054011 <excpt+0x1>
    80003d24:	00029597          	auipc	a1,0x29
    80003d28:	66458593          	addi	a1,a1,1636 # 8002d388 <__func__.0+0x2d0>
    80003d2c:	e789                	bnez	a5,80003d36 <m_and_hs_using_vs_access_2+0xde>
    80003d2e:	00029597          	auipc	a1,0x29
    80003d32:	64a58593          	addi	a1,a1,1610 # 8002d378 <__func__.0+0x2c0>
    80003d36:	00029517          	auipc	a0,0x29
    80003d3a:	69250513          	addi	a0,a0,1682 # 8002d3c8 <__func__.0+0x310>
    80003d3e:	118270ef          	jal	8002ae56 <printf>
    80003d42:	00050797          	auipc	a5,0x50
    80003d46:	2cf7c783          	lbu	a5,719(a5) # 80054011 <excpt+0x1>
    80003d4a:	1e079063          	bnez	a5,80003f2a <m_and_hs_using_vs_access_2+0x2d2>
    80003d4e:	4529                	li	a0,10
    80003d50:	5f5250ef          	jal	80029b44 <putchar>
    80003d54:	4401                	li	s0,0
    80003d56:	e499                	bnez	s1,80003d64 <m_and_hs_using_vs_access_2+0x10c>
    80003d58:	00050417          	auipc	s0,0x50
    80003d5c:	2b944403          	lbu	s0,697(s0) # 80054011 <excpt+0x1>
    80003d60:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003d64:	8a8fd0ef          	jal	80000e0c <test_setup_except_function>
    80003d68:	001007b7          	lui	a5,0x100
    80003d6c:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003d6e:	07b2                	slli	a5,a5,0xc
    80003d70:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003d74:	08200593          	li	a1,130
    80003d78:	0002a617          	auipc	a2,0x2a
    80003d7c:	f3860613          	addi	a2,a2,-200 # 8002dcb0 <__func__.0+0xbf8>
    80003d80:	00029517          	auipc	a0,0x29
    80003d84:	63050513          	addi	a0,a0,1584 # 8002d3b0 <__func__.0+0x2f8>
    80003d88:	0ce270ef          	jal	8002ae56 <printf>
    80003d8c:	00050797          	auipc	a5,0x50
    80003d90:	2857c783          	lbu	a5,645(a5) # 80054011 <excpt+0x1>
    80003d94:	00050497          	auipc	s1,0x50
    80003d98:	27c48493          	addi	s1,s1,636 # 80054010 <excpt>
    80003d9c:	00029597          	auipc	a1,0x29
    80003da0:	5ec58593          	addi	a1,a1,1516 # 8002d388 <__func__.0+0x2d0>
    80003da4:	c789                	beqz	a5,80003dae <m_and_hs_using_vs_access_2+0x156>
    80003da6:	6498                	ld	a4,8(s1)
    80003da8:	47d5                	li	a5,21
    80003daa:	1cf70b63          	beq	a4,a5,80003f80 <m_and_hs_using_vs_access_2+0x328>
    80003dae:	00029517          	auipc	a0,0x29
    80003db2:	61a50513          	addi	a0,a0,1562 # 8002d3c8 <__func__.0+0x310>
    80003db6:	0a0270ef          	jal	8002ae56 <printf>
    80003dba:	00050797          	auipc	a5,0x50
    80003dbe:	2577c783          	lbu	a5,599(a5) # 80054011 <excpt+0x1>
    80003dc2:	c789                	beqz	a5,80003dcc <m_and_hs_using_vs_access_2+0x174>
    80003dc4:	6498                	ld	a4,8(s1)
    80003dc6:	47d5                	li	a5,21
    80003dc8:	14f70463          	beq	a4,a5,80003f10 <m_and_hs_using_vs_access_2+0x2b8>
    80003dcc:	00029517          	auipc	a0,0x29
    80003dd0:	60450513          	addi	a0,a0,1540 # 8002d3d0 <__func__.0+0x318>
    80003dd4:	082270ef          	jal	8002ae56 <printf>
    80003dd8:	02900513          	li	a0,41
    80003ddc:	569250ef          	jal	80029b44 <putchar>
    80003de0:	4529                	li	a0,10
    80003de2:	563250ef          	jal	80029b44 <putchar>
    80003de6:	c801                	beqz	s0,80003df6 <m_and_hs_using_vs_access_2+0x19e>
    80003de8:	00050797          	auipc	a5,0x50
    80003dec:	2297c783          	lbu	a5,553(a5) # 80054011 <excpt+0x1>
    80003df0:	4401                	li	s0,0
    80003df2:	0e079363          	bnez	a5,80003ed8 <m_and_hs_using_vs_access_2+0x280>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003df6:	816fd0ef          	jal	80000e0c <test_setup_except_function>
    80003dfa:	001007b7          	lui	a5,0x100
    80003dfe:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003e00:	07b2                	slli	a5,a5,0xc
    80003e02:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e06:	08200593          	li	a1,130
    80003e0a:	0002a617          	auipc	a2,0x2a
    80003e0e:	ede60613          	addi	a2,a2,-290 # 8002dce8 <__func__.0+0xc30>
    80003e12:	00029517          	auipc	a0,0x29
    80003e16:	59e50513          	addi	a0,a0,1438 # 8002d3b0 <__func__.0+0x2f8>
    80003e1a:	03c270ef          	jal	8002ae56 <printf>
    80003e1e:	00050797          	auipc	a5,0x50
    80003e22:	1f37c783          	lbu	a5,499(a5) # 80054011 <excpt+0x1>
    80003e26:	00029597          	auipc	a1,0x29
    80003e2a:	56258593          	addi	a1,a1,1378 # 8002d388 <__func__.0+0x2d0>
    80003e2e:	c789                	beqz	a5,80003e38 <m_and_hs_using_vs_access_2+0x1e0>
    80003e30:	6498                	ld	a4,8(s1)
    80003e32:	47b5                	li	a5,13
    80003e34:	12f70163          	beq	a4,a5,80003f56 <m_and_hs_using_vs_access_2+0x2fe>
    80003e38:	00029517          	auipc	a0,0x29
    80003e3c:	59050513          	addi	a0,a0,1424 # 8002d3c8 <__func__.0+0x310>
    80003e40:	016270ef          	jal	8002ae56 <printf>
    80003e44:	00050797          	auipc	a5,0x50
    80003e48:	1cd7c783          	lbu	a5,461(a5) # 80054011 <excpt+0x1>
    80003e4c:	c789                	beqz	a5,80003e56 <m_and_hs_using_vs_access_2+0x1fe>
    80003e4e:	6498                	ld	a4,8(s1)
    80003e50:	47b5                	li	a5,13
    80003e52:	0af70463          	beq	a4,a5,80003efa <m_and_hs_using_vs_access_2+0x2a2>
    80003e56:	00029517          	auipc	a0,0x29
    80003e5a:	57a50513          	addi	a0,a0,1402 # 8002d3d0 <__func__.0+0x318>
    80003e5e:	7f9260ef          	jal	8002ae56 <printf>
    80003e62:	02900513          	li	a0,41
    80003e66:	4df250ef          	jal	80029b44 <putchar>
    80003e6a:	4529                	li	a0,10
    80003e6c:	4d9250ef          	jal	80029b44 <putchar>
    80003e70:	c411                	beqz	s0,80003e7c <m_and_hs_using_vs_access_2+0x224>
    80003e72:	00050797          	auipc	a5,0x50
    80003e76:	19f7c783          	lbu	a5,415(a5) # 80054011 <excpt+0x1>
    80003e7a:	e79d                	bnez	a5,80003ea8 <m_and_hs_using_vs_access_2+0x250>
    80003e7c:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003e7e:	00029597          	auipc	a1,0x29
    80003e82:	50a58593          	addi	a1,a1,1290 # 8002d388 <__func__.0+0x2d0>
    80003e86:	00029517          	auipc	a0,0x29
    80003e8a:	5aa50513          	addi	a0,a0,1450 # 8002d430 <__func__.0+0x378>
    80003e8e:	7c9260ef          	jal	8002ae56 <printf>
    80003e92:	4511                	li	a0,4
    80003e94:	874fd0ef          	jal	80000f08 <goto_priv>
    80003e98:	98dfd0ef          	jal	80001824 <reset_state>
}
    80003e9c:	60e2                	ld	ra,24(sp)
    80003e9e:	8522                	mv	a0,s0
    80003ea0:	6442                	ld	s0,16(sp)
    80003ea2:	64a2                	ld	s1,8(sp)
    80003ea4:	6105                	addi	sp,sp,32
    80003ea6:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ea8:	6498                	ld	a4,8(s1)
    80003eaa:	47b5                	li	a5,13
    80003eac:	4401                	li	s0,0
    TEST_END();
    80003eae:	00029597          	auipc	a1,0x29
    80003eb2:	4da58593          	addi	a1,a1,1242 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003eb6:	fcf718e3          	bne	a4,a5,80003e86 <m_and_hs_using_vs_access_2+0x22e>
    80003eba:	00050417          	auipc	s0,0x50
    80003ebe:	18644403          	lbu	s0,390(s0) # 80054040 <excpt+0x30>
    80003ec2:	d071                	beqz	s0,80003e86 <m_and_hs_using_vs_access_2+0x22e>
    80003ec4:	00050797          	auipc	a5,0x50
    80003ec8:	17d7c783          	lbu	a5,381(a5) # 80054041 <excpt+0x31>
    TEST_END();
    80003ecc:	00029597          	auipc	a1,0x29
    80003ed0:	4ac58593          	addi	a1,a1,1196 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ed4:	dbcd                	beqz	a5,80003e86 <m_and_hs_using_vs_access_2+0x22e>
    80003ed6:	b75d                	j	80003e7c <m_and_hs_using_vs_access_2+0x224>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003ed8:	6498                	ld	a4,8(s1)
    80003eda:	47d5                	li	a5,21
    80003edc:	f0f71de3          	bne	a4,a5,80003df6 <m_and_hs_using_vs_access_2+0x19e>
    80003ee0:	00050797          	auipc	a5,0x50
    80003ee4:	1607c783          	lbu	a5,352(a5) # 80054040 <excpt+0x30>
    80003ee8:	f00787e3          	beqz	a5,80003df6 <m_and_hs_using_vs_access_2+0x19e>
    80003eec:	00050417          	auipc	s0,0x50
    80003ef0:	15544403          	lbu	s0,341(s0) # 80054041 <excpt+0x31>
    80003ef4:	00144413          	xori	s0,s0,1
    80003ef8:	bdfd                	j	80003df6 <m_and_hs_using_vs_access_2+0x19e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003efa:	00050797          	auipc	a5,0x50
    80003efe:	1467c783          	lbu	a5,326(a5) # 80054040 <excpt+0x30>
    80003f02:	dbb1                	beqz	a5,80003e56 <m_and_hs_using_vs_access_2+0x1fe>
    80003f04:	00050797          	auipc	a5,0x50
    80003f08:	13d7c783          	lbu	a5,317(a5) # 80054041 <excpt+0x31>
    80003f0c:	dfb9                	beqz	a5,80003e6a <m_and_hs_using_vs_access_2+0x212>
    80003f0e:	b7a1                	j	80003e56 <m_and_hs_using_vs_access_2+0x1fe>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003f10:	00050797          	auipc	a5,0x50
    80003f14:	1307c783          	lbu	a5,304(a5) # 80054040 <excpt+0x30>
    80003f18:	ea078ae3          	beqz	a5,80003dcc <m_and_hs_using_vs_access_2+0x174>
    80003f1c:	00050797          	auipc	a5,0x50
    80003f20:	1257c783          	lbu	a5,293(a5) # 80054041 <excpt+0x31>
    80003f24:	ea078ee3          	beqz	a5,80003de0 <m_and_hs_using_vs_access_2+0x188>
    80003f28:	b555                	j	80003dcc <m_and_hs_using_vs_access_2+0x174>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003f2a:	00029517          	auipc	a0,0x29
    80003f2e:	4a650513          	addi	a0,a0,1190 # 8002d3d0 <__func__.0+0x318>
    80003f32:	725260ef          	jal	8002ae56 <printf>
    80003f36:	02900513          	li	a0,41
    80003f3a:	40b250ef          	jal	80029b44 <putchar>
    80003f3e:	bd01                	j	80003d4e <m_and_hs_using_vs_access_2+0xf6>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003f40:	00029517          	auipc	a0,0x29
    80003f44:	49050513          	addi	a0,a0,1168 # 8002d3d0 <__func__.0+0x318>
    80003f48:	70f260ef          	jal	8002ae56 <printf>
    80003f4c:	02900513          	li	a0,41
    80003f50:	3f5250ef          	jal	80029b44 <putchar>
    80003f54:	bb59                	j	80003cea <m_and_hs_using_vs_access_2+0x92>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003f56:	00050797          	auipc	a5,0x50
    80003f5a:	0ea7c783          	lbu	a5,234(a5) # 80054040 <excpt+0x30>
    80003f5e:	ec078de3          	beqz	a5,80003e38 <m_and_hs_using_vs_access_2+0x1e0>
    80003f62:	00050797          	auipc	a5,0x50
    80003f66:	0df7c783          	lbu	a5,223(a5) # 80054041 <excpt+0x31>
    80003f6a:	00029597          	auipc	a1,0x29
    80003f6e:	40e58593          	addi	a1,a1,1038 # 8002d378 <__func__.0+0x2c0>
    80003f72:	ec0783e3          	beqz	a5,80003e38 <m_and_hs_using_vs_access_2+0x1e0>
    80003f76:	00029597          	auipc	a1,0x29
    80003f7a:	41258593          	addi	a1,a1,1042 # 8002d388 <__func__.0+0x2d0>
    80003f7e:	bd6d                	j	80003e38 <m_and_hs_using_vs_access_2+0x1e0>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003f80:	00050797          	auipc	a5,0x50
    80003f84:	0c07c783          	lbu	a5,192(a5) # 80054040 <excpt+0x30>
    80003f88:	e20783e3          	beqz	a5,80003dae <m_and_hs_using_vs_access_2+0x156>
    80003f8c:	00050797          	auipc	a5,0x50
    80003f90:	0b57c783          	lbu	a5,181(a5) # 80054041 <excpt+0x31>
    80003f94:	00029597          	auipc	a1,0x29
    80003f98:	3e458593          	addi	a1,a1,996 # 8002d378 <__func__.0+0x2c0>
    80003f9c:	e00789e3          	beqz	a5,80003dae <m_and_hs_using_vs_access_2+0x156>
    80003fa0:	00029597          	auipc	a1,0x29
    80003fa4:	3e858593          	addi	a1,a1,1000 # 8002d388 <__func__.0+0x2d0>
    80003fa8:	b519                	j	80003dae <m_and_hs_using_vs_access_2+0x156>

0000000080003faa <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003faa:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003fac:	00027597          	auipc	a1,0x27
    80003fb0:	4ec58593          	addi	a1,a1,1260 # 8002b498 <__func__.9>
    80003fb4:	00029517          	auipc	a0,0x29
    80003fb8:	3e450513          	addi	a0,a0,996 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003fbc:	ec06                	sd	ra,24(sp)
    80003fbe:	e822                	sd	s0,16(sp)
    80003fc0:	e426                	sd	s1,8(sp)
    80003fc2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003fc4:	693260ef          	jal	8002ae56 <printf>
    80003fc8:	4529                	li	a0,10
    80003fca:	37b250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80003fce:	e12fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003fd2:	9f3fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003fd6:	fa6fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003fda:	4511                	li	a0,4
    80003fdc:	f2dfc0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80003fe0:	00035417          	auipc	s0,0x35
    80003fe4:	94840413          	addi	s0,s0,-1720 # 80038928 <__func__.0+0xb870>

    TEST_SETUP_EXCEPT();
    80003fe8:	e25fc0ef          	jal	80000e0c <test_setup_except_function>
    80003fec:	6018                	ld	a4,0(s0)
    80003fee:	440197b7          	lui	a5,0x44019
    80003ff2:	0786                	slli	a5,a5,0x1
    80003ff4:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003ff6:	00037717          	auipc	a4,0x37
    80003ffa:	96672703          	lw	a4,-1690(a4) # 8003a95c <curr_priv>
    80003ffe:	4791                	li	a5,4
    80004000:	02f70763          	beq	a4,a5,8000402e <m_and_hs_using_vs_access_3+0x84>
        ERROR("trying to read as mprv from low privilege");
    80004004:	0002a517          	auipc	a0,0x2a
    80004008:	b9c50513          	addi	a0,a0,-1124 # 8002dba0 <__func__.0+0xae8>
    8000400c:	64b260ef          	jal	8002ae56 <printf>
    80004010:	0fe00613          	li	a2,254
    80004014:	00027597          	auipc	a1,0x27
    80004018:	45458593          	addi	a1,a1,1108 # 8002b468 <__func__.11>
    8000401c:	00029517          	auipc	a0,0x29
    80004020:	50450513          	addi	a0,a0,1284 # 8002d520 <__func__.0+0x468>
    80004024:	633260ef          	jal	8002ae56 <printf>
    80004028:	4501                	li	a0,0
    8000402a:	1e3260ef          	jal	8002aa0c <exit>
    set_prev_priv(priv);
    8000402e:	4509                	li	a0,2
    80004030:	df9fc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80004034:	000807b7          	lui	a5,0x80
    80004038:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000403a:	07b6                	slli	a5,a5,0xd
    8000403c:	00020737          	lui	a4,0x20
    80004040:	30072073          	csrs	mstatus,a4
    80004044:	6394                	ld	a3,0(a5)
    80004046:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    8000404a:	08200593          	li	a1,130
    8000404e:	0002a617          	auipc	a2,0x2a
    80004052:	cd260613          	addi	a2,a2,-814 # 8002dd20 <__func__.0+0xc68>
    80004056:	00029517          	auipc	a0,0x29
    8000405a:	35a50513          	addi	a0,a0,858 # 8002d3b0 <__func__.0+0x2f8>
    8000405e:	5f9260ef          	jal	8002ae56 <printf>
    80004062:	00050797          	auipc	a5,0x50
    80004066:	faf7c783          	lbu	a5,-81(a5) # 80054011 <excpt+0x1>
    8000406a:	00050917          	auipc	s2,0x50
    8000406e:	fa690913          	addi	s2,s2,-90 # 80054010 <excpt>
    80004072:	00029597          	auipc	a1,0x29
    80004076:	31658593          	addi	a1,a1,790 # 8002d388 <__func__.0+0x2d0>
    8000407a:	cf91                	beqz	a5,80004096 <m_and_hs_using_vs_access_3+0xec>
    8000407c:	00893703          	ld	a4,8(s2)
    80004080:	47b5                	li	a5,13
    80004082:	00029597          	auipc	a1,0x29
    80004086:	2f658593          	addi	a1,a1,758 # 8002d378 <__func__.0+0x2c0>
    8000408a:	00f70663          	beq	a4,a5,80004096 <m_and_hs_using_vs_access_3+0xec>
    8000408e:	00029597          	auipc	a1,0x29
    80004092:	2fa58593          	addi	a1,a1,762 # 8002d388 <__func__.0+0x2d0>
    80004096:	00029517          	auipc	a0,0x29
    8000409a:	33250513          	addi	a0,a0,818 # 8002d3c8 <__func__.0+0x310>
    8000409e:	5b9260ef          	jal	8002ae56 <printf>
    800040a2:	00050797          	auipc	a5,0x50
    800040a6:	f6f7c783          	lbu	a5,-145(a5) # 80054011 <excpt+0x1>
    800040aa:	c791                	beqz	a5,800040b6 <m_and_hs_using_vs_access_3+0x10c>
    800040ac:	00893703          	ld	a4,8(s2)
    800040b0:	47b5                	li	a5,13
    800040b2:	00f70c63          	beq	a4,a5,800040ca <m_and_hs_using_vs_access_3+0x120>
    800040b6:	00029517          	auipc	a0,0x29
    800040ba:	31a50513          	addi	a0,a0,794 # 8002d3d0 <__func__.0+0x318>
    800040be:	599260ef          	jal	8002ae56 <printf>
    800040c2:	02900513          	li	a0,41
    800040c6:	27f250ef          	jal	80029b44 <putchar>
    800040ca:	4529                	li	a0,10
    800040cc:	279250ef          	jal	80029b44 <putchar>
    800040d0:	00050797          	auipc	a5,0x50
    800040d4:	f417c783          	lbu	a5,-191(a5) # 80054011 <excpt+0x1>
    800040d8:	4481                	li	s1,0
    800040da:	c791                	beqz	a5,800040e6 <m_and_hs_using_vs_access_3+0x13c>
    800040dc:	00893483          	ld	s1,8(s2)
    800040e0:	14cd                	addi	s1,s1,-13
    800040e2:	0014b493          	seqz	s1,s1
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    800040e6:	d27fc0ef          	jal	80000e0c <test_setup_except_function>
    800040ea:	6018                	ld	a4,0(s0)
    800040ec:	440197b7          	lui	a5,0x44019
    800040f0:	0786                	slli	a5,a5,0x1
    800040f2:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    800040f4:	00037717          	auipc	a4,0x37
    800040f8:	86872703          	lw	a4,-1944(a4) # 8003a95c <curr_priv>
    800040fc:	4791                	li	a5,4
    800040fe:	f0f713e3          	bne	a4,a5,80004004 <m_and_hs_using_vs_access_3+0x5a>
    set_prev_priv(priv);
    80004102:	4501                	li	a0,0
    80004104:	d25fc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80004108:	000807b7          	lui	a5,0x80
    8000410c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000410e:	07b6                	slli	a5,a5,0xd
    80004110:	00020737          	lui	a4,0x20
    80004114:	30072073          	csrs	mstatus,a4
    80004118:	6394                	ld	a3,0(a5)
    8000411a:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    8000411e:	08200593          	li	a1,130
    80004122:	0002a617          	auipc	a2,0x2a
    80004126:	c2e60613          	addi	a2,a2,-978 # 8002dd50 <__func__.0+0xc98>
    8000412a:	00029517          	auipc	a0,0x29
    8000412e:	28650513          	addi	a0,a0,646 # 8002d3b0 <__func__.0+0x2f8>
    80004132:	525260ef          	jal	8002ae56 <printf>
    80004136:	00050797          	auipc	a5,0x50
    8000413a:	edb7c783          	lbu	a5,-293(a5) # 80054011 <excpt+0x1>
    8000413e:	00029597          	auipc	a1,0x29
    80004142:	24a58593          	addi	a1,a1,586 # 8002d388 <__func__.0+0x2d0>
    80004146:	e789                	bnez	a5,80004150 <m_and_hs_using_vs_access_3+0x1a6>
    80004148:	00029597          	auipc	a1,0x29
    8000414c:	23058593          	addi	a1,a1,560 # 8002d378 <__func__.0+0x2c0>
    80004150:	00029517          	auipc	a0,0x29
    80004154:	27850513          	addi	a0,a0,632 # 8002d3c8 <__func__.0+0x310>
    80004158:	4ff260ef          	jal	8002ae56 <printf>
    8000415c:	00050797          	auipc	a5,0x50
    80004160:	eb57c783          	lbu	a5,-331(a5) # 80054011 <excpt+0x1>
    80004164:	e7b9                	bnez	a5,800041b2 <m_and_hs_using_vs_access_3+0x208>
    80004166:	4529                	li	a0,10
    80004168:	1dd250ef          	jal	80029b44 <putchar>
    8000416c:	c491                	beqz	s1,80004178 <m_and_hs_using_vs_access_3+0x1ce>
    8000416e:	00050797          	auipc	a5,0x50
    80004172:	ea37c783          	lbu	a5,-349(a5) # 80054011 <excpt+0x1>
    80004176:	cb85                	beqz	a5,800041a6 <m_and_hs_using_vs_access_3+0x1fc>
    80004178:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    8000417a:	00029597          	auipc	a1,0x29
    8000417e:	20e58593          	addi	a1,a1,526 # 8002d388 <__func__.0+0x2d0>
    80004182:	00029517          	auipc	a0,0x29
    80004186:	2ae50513          	addi	a0,a0,686 # 8002d430 <__func__.0+0x378>
    8000418a:	4cd260ef          	jal	8002ae56 <printf>
    8000418e:	4511                	li	a0,4
    80004190:	d79fc0ef          	jal	80000f08 <goto_priv>
    80004194:	e90fd0ef          	jal	80001824 <reset_state>
}
    80004198:	60e2                	ld	ra,24(sp)
    8000419a:	8522                	mv	a0,s0
    8000419c:	6442                	ld	s0,16(sp)
    8000419e:	64a2                	ld	s1,8(sp)
    800041a0:	6902                	ld	s2,0(sp)
    800041a2:	6105                	addi	sp,sp,32
    800041a4:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    800041a6:	4405                	li	s0,1
    TEST_END();
    800041a8:	00029597          	auipc	a1,0x29
    800041ac:	1d058593          	addi	a1,a1,464 # 8002d378 <__func__.0+0x2c0>
    800041b0:	bfc9                	j	80004182 <m_and_hs_using_vs_access_3+0x1d8>
    TEST_ASSERT("machine mprv vu access to vu successful",
    800041b2:	00029517          	auipc	a0,0x29
    800041b6:	21e50513          	addi	a0,a0,542 # 8002d3d0 <__func__.0+0x318>
    800041ba:	49d260ef          	jal	8002ae56 <printf>
    800041be:	02900513          	li	a0,41
    800041c2:	183250ef          	jal	80029b44 <putchar>
    800041c6:	b745                	j	80004166 <m_and_hs_using_vs_access_3+0x1bc>

00000000800041c8 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    800041c8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800041ca:	00027597          	auipc	a1,0x27
    800041ce:	2ee58593          	addi	a1,a1,750 # 8002b4b8 <__func__.8>
    800041d2:	00029517          	auipc	a0,0x29
    800041d6:	1c650513          	addi	a0,a0,454 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    800041da:	ec06                	sd	ra,24(sp)
    800041dc:	e822                	sd	s0,16(sp)
    800041de:	e426                	sd	s1,8(sp)
    800041e0:	e04a                	sd	s2,0(sp)
    TEST_START();
    800041e2:	475260ef          	jal	8002ae56 <printf>
    800041e6:	4529                	li	a0,10
    800041e8:	15d250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    800041ec:	bf4fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041f0:	fd4fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800041f4:	d88fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    800041f8:	450d                	li	a0,3
    800041fa:	d0ffc0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    800041fe:	4501                	li	a0,0
    80004200:	c29fc0ef          	jal	80000e28 <set_prev_priv>
    80004204:	00034417          	auipc	s0,0x34
    80004208:	72440413          	addi	s0,s0,1828 # 80038928 <__func__.0+0xb870>
    TEST_SETUP_EXCEPT();
    8000420c:	c01fc0ef          	jal	80000e0c <test_setup_except_function>
    80004210:	6014                	ld	a3,0(s0)
    80004212:	44019737          	lui	a4,0x44019
    asm volatile(
    80004216:	000807b7          	lui	a5,0x80
    8000421a:	0706                	slli	a4,a4,0x1
    8000421c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000421e:	e314                	sd	a3,0(a4)
    80004220:	07b6                	slli	a5,a5,0xd
    80004222:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004226:	08200593          	li	a1,130
    8000422a:	0002a617          	auipc	a2,0x2a
    8000422e:	b4e60613          	addi	a2,a2,-1202 # 8002dd78 <__func__.0+0xcc0>
    80004232:	00029517          	auipc	a0,0x29
    80004236:	17e50513          	addi	a0,a0,382 # 8002d3b0 <__func__.0+0x2f8>
    8000423a:	41d260ef          	jal	8002ae56 <printf>
    8000423e:	00050797          	auipc	a5,0x50
    80004242:	dd37c783          	lbu	a5,-557(a5) # 80054011 <excpt+0x1>
    80004246:	00029597          	auipc	a1,0x29
    8000424a:	13258593          	addi	a1,a1,306 # 8002d378 <__func__.0+0x2c0>
    8000424e:	c789                	beqz	a5,80004258 <m_and_hs_using_vs_access_4+0x90>
    80004250:	00029597          	auipc	a1,0x29
    80004254:	13858593          	addi	a1,a1,312 # 8002d388 <__func__.0+0x2d0>
    80004258:	00029517          	auipc	a0,0x29
    8000425c:	17050513          	addi	a0,a0,368 # 8002d3c8 <__func__.0+0x310>
    80004260:	3f7260ef          	jal	8002ae56 <printf>
    80004264:	00050797          	auipc	a5,0x50
    80004268:	dad7c783          	lbu	a5,-595(a5) # 80054011 <excpt+0x1>
    8000426c:	10079463          	bnez	a5,80004374 <m_and_hs_using_vs_access_4+0x1ac>
    80004270:	4529                	li	a0,10
    80004272:	0d3250ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80004276:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004278:	00050917          	auipc	s2,0x50
    8000427c:	d9994903          	lbu	s2,-615(s2) # 80054011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    80004280:	ba9fc0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80004284:	b89fc0ef          	jal	80000e0c <test_setup_except_function>
    80004288:	6014                	ld	a3,0(s0)
    8000428a:	44019737          	lui	a4,0x44019
    8000428e:	000807b7          	lui	a5,0x80
    80004292:	0706                	slli	a4,a4,0x1
    80004294:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004296:	00050497          	auipc	s1,0x50
    8000429a:	d7a48493          	addi	s1,s1,-646 # 80054010 <excpt>
    8000429e:	e314                	sd	a3,0(a4)
    800042a0:	07b6                	slli	a5,a5,0xd
    800042a2:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800042a6:	08200593          	li	a1,130
    800042aa:	0002a617          	auipc	a2,0x2a
    800042ae:	afe60613          	addi	a2,a2,-1282 # 8002dda8 <__func__.0+0xcf0>
    800042b2:	00029517          	auipc	a0,0x29
    800042b6:	0fe50513          	addi	a0,a0,254 # 8002d3b0 <__func__.0+0x2f8>
    800042ba:	39d260ef          	jal	8002ae56 <printf>
    800042be:	00050797          	auipc	a5,0x50
    800042c2:	d537c783          	lbu	a5,-685(a5) # 80054011 <excpt+0x1>
    800042c6:	00029597          	auipc	a1,0x29
    800042ca:	0c258593          	addi	a1,a1,194 # 8002d388 <__func__.0+0x2d0>
    800042ce:	cf89                	beqz	a5,800042e8 <m_and_hs_using_vs_access_4+0x120>
    800042d0:	6498                	ld	a4,8(s1)
    800042d2:	47b5                	li	a5,13
    800042d4:	00029597          	auipc	a1,0x29
    800042d8:	0a458593          	addi	a1,a1,164 # 8002d378 <__func__.0+0x2c0>
    800042dc:	00f70663          	beq	a4,a5,800042e8 <m_and_hs_using_vs_access_4+0x120>
    800042e0:	00029597          	auipc	a1,0x29
    800042e4:	0a858593          	addi	a1,a1,168 # 8002d388 <__func__.0+0x2d0>
    800042e8:	00029517          	auipc	a0,0x29
    800042ec:	0e050513          	addi	a0,a0,224 # 8002d3c8 <__func__.0+0x310>
    800042f0:	367260ef          	jal	8002ae56 <printf>
    800042f4:	00050797          	auipc	a5,0x50
    800042f8:	d1d7c783          	lbu	a5,-739(a5) # 80054011 <excpt+0x1>
    800042fc:	c789                	beqz	a5,80004306 <m_and_hs_using_vs_access_4+0x13e>
    800042fe:	6498                	ld	a4,8(s1)
    80004300:	47b5                	li	a5,13
    80004302:	00f70c63          	beq	a4,a5,8000431a <m_and_hs_using_vs_access_4+0x152>
    80004306:	00029517          	auipc	a0,0x29
    8000430a:	0ca50513          	addi	a0,a0,202 # 8002d3d0 <__func__.0+0x318>
    8000430e:	349260ef          	jal	8002ae56 <printf>
    80004312:	02900513          	li	a0,41
    80004316:	02f250ef          	jal	80029b44 <putchar>
    8000431a:	4529                	li	a0,10
    8000431c:	029250ef          	jal	80029b44 <putchar>
    80004320:	02091363          	bnez	s2,80004346 <m_and_hs_using_vs_access_4+0x17e>
    80004324:	00050417          	auipc	s0,0x50
    80004328:	ced44403          	lbu	s0,-787(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8000432c:	00029597          	auipc	a1,0x29
    80004330:	05c58593          	addi	a1,a1,92 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004334:	cc11                	beqz	s0,80004350 <m_and_hs_using_vs_access_4+0x188>
    80004336:	6498                	ld	a4,8(s1)
    80004338:	47b5                	li	a5,13
    TEST_END();
    8000433a:	00029597          	auipc	a1,0x29
    8000433e:	03e58593          	addi	a1,a1,62 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004342:	00f70763          	beq	a4,a5,80004350 <m_and_hs_using_vs_access_4+0x188>
    80004346:	4401                	li	s0,0
    TEST_END();
    80004348:	00029597          	auipc	a1,0x29
    8000434c:	04058593          	addi	a1,a1,64 # 8002d388 <__func__.0+0x2d0>
    80004350:	00029517          	auipc	a0,0x29
    80004354:	0e050513          	addi	a0,a0,224 # 8002d430 <__func__.0+0x378>
    80004358:	2ff260ef          	jal	8002ae56 <printf>
    8000435c:	4511                	li	a0,4
    8000435e:	babfc0ef          	jal	80000f08 <goto_priv>
    80004362:	cc2fd0ef          	jal	80001824 <reset_state>
}
    80004366:	60e2                	ld	ra,24(sp)
    80004368:	8522                	mv	a0,s0
    8000436a:	6442                	ld	s0,16(sp)
    8000436c:	64a2                	ld	s1,8(sp)
    8000436e:	6902                	ld	s2,0(sp)
    80004370:	6105                	addi	sp,sp,32
    80004372:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004374:	00029517          	auipc	a0,0x29
    80004378:	05c50513          	addi	a0,a0,92 # 8002d3d0 <__func__.0+0x318>
    8000437c:	2db260ef          	jal	8002ae56 <printf>
    80004380:	02900513          	li	a0,41
    80004384:	7c0250ef          	jal	80029b44 <putchar>
    80004388:	b5e5                	j	80004270 <m_and_hs_using_vs_access_4+0xa8>

000000008000438a <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    8000438a:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000438c:	00027597          	auipc	a1,0x27
    80004390:	14c58593          	addi	a1,a1,332 # 8002b4d8 <__func__.7>
    80004394:	00029517          	auipc	a0,0x29
    80004398:	00450513          	addi	a0,a0,4 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    8000439c:	ec06                	sd	ra,24(sp)
    8000439e:	e822                	sd	s0,16(sp)
    800043a0:	e426                	sd	s1,8(sp)
    TEST_START();
    800043a2:	2b5260ef          	jal	8002ae56 <printf>
    800043a6:	4529                	li	a0,10
    800043a8:	79c250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    800043ac:	a34fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800043b0:	e14fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800043b4:	bc8fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    800043b8:	4511                	li	a0,4
    800043ba:	b4ffc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800043be:	000407b7          	lui	a5,0x40
    800043c2:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800043c6:	a47fc0ef          	jal	80000e0c <test_setup_except_function>
    800043ca:	00034417          	auipc	s0,0x34
    800043ce:	55e43403          	ld	s0,1374(s0) # 80038928 <__func__.0+0xb870>
    800043d2:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    800043d6:	00036717          	auipc	a4,0x36
    800043da:	58672703          	lw	a4,1414(a4) # 8003a95c <curr_priv>
    800043de:	0786                	slli	a5,a5,0x1
    800043e0:	e380                	sd	s0,0(a5)
    800043e2:	4791                	li	a5,4
    800043e4:	02f70763          	beq	a4,a5,80004412 <m_and_hs_using_vs_access_5+0x88>
        ERROR("trying to read as mprv from low privilege");
    800043e8:	00029517          	auipc	a0,0x29
    800043ec:	7b850513          	addi	a0,a0,1976 # 8002dba0 <__func__.0+0xae8>
    800043f0:	267260ef          	jal	8002ae56 <printf>
    800043f4:	0fe00613          	li	a2,254
    800043f8:	00027597          	auipc	a1,0x27
    800043fc:	07058593          	addi	a1,a1,112 # 8002b468 <__func__.11>
    80004400:	00029517          	auipc	a0,0x29
    80004404:	12050513          	addi	a0,a0,288 # 8002d520 <__func__.0+0x468>
    80004408:	24f260ef          	jal	8002ae56 <printf>
    8000440c:	4501                	li	a0,0
    8000440e:	5fe260ef          	jal	8002aa0c <exit>
    set_prev_priv(priv);
    80004412:	4509                	li	a0,2
    80004414:	a15fc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80004418:	000807b7          	lui	a5,0x80
    8000441c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000441e:	07b6                	slli	a5,a5,0xd
    80004420:	00020737          	lui	a4,0x20
    80004424:	30072073          	csrs	mstatus,a4
    80004428:	6384                	ld	s1,0(a5)
    8000442a:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    8000442e:	0002a617          	auipc	a2,0x2a
    80004432:	9b260613          	addi	a2,a2,-1614 # 8002dde0 <__func__.0+0xd28>
    80004436:	08200593          	li	a1,130
    8000443a:	00029517          	auipc	a0,0x29
    8000443e:	f7650513          	addi	a0,a0,-138 # 8002d3b0 <__func__.0+0x2f8>
    80004442:	215260ef          	jal	8002ae56 <printf>
    80004446:	00050797          	auipc	a5,0x50
    8000444a:	bcb7c783          	lbu	a5,-1077(a5) # 80054011 <excpt+0x1>
    8000444e:	c3d1                	beqz	a5,800044d2 <m_and_hs_using_vs_access_5+0x148>
    80004450:	00029597          	auipc	a1,0x29
    80004454:	f3858593          	addi	a1,a1,-200 # 8002d388 <__func__.0+0x2d0>
    80004458:	00029517          	auipc	a0,0x29
    8000445c:	f7050513          	addi	a0,a0,-144 # 8002d3c8 <__func__.0+0x310>
    80004460:	1f7260ef          	jal	8002ae56 <printf>
    80004464:	00050797          	auipc	a5,0x50
    80004468:	bad7c783          	lbu	a5,-1107(a5) # 80054011 <excpt+0x1>
    8000446c:	e399                	bnez	a5,80004472 <m_and_hs_using_vs_access_5+0xe8>
    8000446e:	08848e63          	beq	s1,s0,8000450a <m_and_hs_using_vs_access_5+0x180>
    80004472:	00029517          	auipc	a0,0x29
    80004476:	f5e50513          	addi	a0,a0,-162 # 8002d3d0 <__func__.0+0x318>
    8000447a:	1dd260ef          	jal	8002ae56 <printf>
    8000447e:	02900513          	li	a0,41
    80004482:	6c2250ef          	jal	80029b44 <putchar>
    80004486:	4529                	li	a0,10
    80004488:	6bc250ef          	jal	80029b44 <putchar>
    8000448c:	00050797          	auipc	a5,0x50
    80004490:	b857c783          	lbu	a5,-1147(a5) # 80054011 <excpt+0x1>
    80004494:	eb89                	bnez	a5,800044a6 <m_and_hs_using_vs_access_5+0x11c>
    80004496:	011087b7          	lui	a5,0x1108
    8000449a:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    8000449e:	07c2                	slli	a5,a5,0x10
    800044a0:	17b9                	addi	a5,a5,-18
    800044a2:	06f48c63          	beq	s1,a5,8000451a <m_and_hs_using_vs_access_5+0x190>
    800044a6:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800044a8:	00029597          	auipc	a1,0x29
    800044ac:	ee058593          	addi	a1,a1,-288 # 8002d388 <__func__.0+0x2d0>
    800044b0:	00029517          	auipc	a0,0x29
    800044b4:	f8050513          	addi	a0,a0,-128 # 8002d430 <__func__.0+0x378>
    800044b8:	19f260ef          	jal	8002ae56 <printf>
    800044bc:	4511                	li	a0,4
    800044be:	a4bfc0ef          	jal	80000f08 <goto_priv>
    800044c2:	b62fd0ef          	jal	80001824 <reset_state>
}
    800044c6:	60e2                	ld	ra,24(sp)
    800044c8:	8522                	mv	a0,s0
    800044ca:	6442                	ld	s0,16(sp)
    800044cc:	64a2                	ld	s1,8(sp)
    800044ce:	6105                	addi	sp,sp,32
    800044d0:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    800044d2:	00848d63          	beq	s1,s0,800044ec <m_and_hs_using_vs_access_5+0x162>
    800044d6:	00029597          	auipc	a1,0x29
    800044da:	eb258593          	addi	a1,a1,-334 # 8002d388 <__func__.0+0x2d0>
    800044de:	00029517          	auipc	a0,0x29
    800044e2:	eea50513          	addi	a0,a0,-278 # 8002d3c8 <__func__.0+0x310>
    800044e6:	171260ef          	jal	8002ae56 <printf>
    800044ea:	b761                	j	80004472 <m_and_hs_using_vs_access_5+0xe8>
    800044ec:	00029597          	auipc	a1,0x29
    800044f0:	e8c58593          	addi	a1,a1,-372 # 8002d378 <__func__.0+0x2c0>
    800044f4:	00029517          	auipc	a0,0x29
    800044f8:	ed450513          	addi	a0,a0,-300 # 8002d3c8 <__func__.0+0x310>
    800044fc:	15b260ef          	jal	8002ae56 <printf>
    80004500:	00050797          	auipc	a5,0x50
    80004504:	b117c783          	lbu	a5,-1263(a5) # 80054011 <excpt+0x1>
    80004508:	f7ad                	bnez	a5,80004472 <m_and_hs_using_vs_access_5+0xe8>
    8000450a:	4529                	li	a0,10
    8000450c:	638250ef          	jal	80029b44 <putchar>
    80004510:	00050797          	auipc	a5,0x50
    80004514:	b017c783          	lbu	a5,-1279(a5) # 80054011 <excpt+0x1>
    80004518:	f7d9                	bnez	a5,800044a6 <m_and_hs_using_vs_access_5+0x11c>
    8000451a:	4405                	li	s0,1
    TEST_END();
    8000451c:	00029597          	auipc	a1,0x29
    80004520:	e5c58593          	addi	a1,a1,-420 # 8002d378 <__func__.0+0x2c0>
    80004524:	b771                	j	800044b0 <m_and_hs_using_vs_access_5+0x126>

0000000080004526 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80004526:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004528:	00027597          	auipc	a1,0x27
    8000452c:	fd058593          	addi	a1,a1,-48 # 8002b4f8 <__func__.6>
    80004530:	00029517          	auipc	a0,0x29
    80004534:	e6850513          	addi	a0,a0,-408 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004538:	ec06                	sd	ra,24(sp)
    8000453a:	e822                	sd	s0,16(sp)
    8000453c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000453e:	119260ef          	jal	8002ae56 <printf>
    80004542:	4529                	li	a0,10
    80004544:	600250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80004548:	898fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000454c:	c78fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004550:	a2cfc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80004554:	000407b7          	lui	a5,0x40
    80004558:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    8000455c:	450d                	li	a0,3
    8000455e:	9abfc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004562:	4509                	li	a0,2
    80004564:	8c5fc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004568:	8a5fc0ef          	jal	80000e0c <test_setup_except_function>
    8000456c:	00034497          	auipc	s1,0x34
    80004570:	3bc4b483          	ld	s1,956(s1) # 80038928 <__func__.0+0xb870>
    80004574:	440197b7          	lui	a5,0x44019
    80004578:	00080437          	lui	s0,0x80
    8000457c:	0786                	slli	a5,a5,0x1
    8000457e:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    80004580:	e384                	sd	s1,0(a5)
    80004582:	0436                	slli	s0,s0,0xd
    80004584:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004588:	0002a617          	auipc	a2,0x2a
    8000458c:	8a060613          	addi	a2,a2,-1888 # 8002de28 <__func__.0+0xd70>
    80004590:	08200593          	li	a1,130
    80004594:	00029517          	auipc	a0,0x29
    80004598:	e1c50513          	addi	a0,a0,-484 # 8002d3b0 <__func__.0+0x2f8>
    8000459c:	0bb260ef          	jal	8002ae56 <printf>
    800045a0:	00050797          	auipc	a5,0x50
    800045a4:	a717c783          	lbu	a5,-1423(a5) # 80054011 <excpt+0x1>
    800045a8:	e7a5                	bnez	a5,80004610 <m_and_hs_using_vs_access_6+0xea>
    800045aa:	0c940863          	beq	s0,s1,8000467a <m_and_hs_using_vs_access_6+0x154>
    800045ae:	00029597          	auipc	a1,0x29
    800045b2:	dda58593          	addi	a1,a1,-550 # 8002d388 <__func__.0+0x2d0>
    800045b6:	00029517          	auipc	a0,0x29
    800045ba:	e1250513          	addi	a0,a0,-494 # 8002d3c8 <__func__.0+0x310>
    800045be:	099260ef          	jal	8002ae56 <printf>
    800045c2:	00029517          	auipc	a0,0x29
    800045c6:	e0e50513          	addi	a0,a0,-498 # 8002d3d0 <__func__.0+0x318>
    800045ca:	08d260ef          	jal	8002ae56 <printf>
    800045ce:	02900513          	li	a0,41
    800045d2:	572250ef          	jal	80029b44 <putchar>
    800045d6:	4529                	li	a0,10
    800045d8:	56c250ef          	jal	80029b44 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045dc:	000407b7          	lui	a5,0x40
    800045e0:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045e4:	4401                	li	s0,0

    TEST_END();
    800045e6:	00029597          	auipc	a1,0x29
    800045ea:	da258593          	addi	a1,a1,-606 # 8002d388 <__func__.0+0x2d0>
    800045ee:	00029517          	auipc	a0,0x29
    800045f2:	e4250513          	addi	a0,a0,-446 # 8002d430 <__func__.0+0x378>
    800045f6:	061260ef          	jal	8002ae56 <printf>
    800045fa:	4511                	li	a0,4
    800045fc:	90dfc0ef          	jal	80000f08 <goto_priv>
    80004600:	a24fd0ef          	jal	80001824 <reset_state>
}
    80004604:	60e2                	ld	ra,24(sp)
    80004606:	8522                	mv	a0,s0
    80004608:	6442                	ld	s0,16(sp)
    8000460a:	64a2                	ld	s1,8(sp)
    8000460c:	6105                	addi	sp,sp,32
    8000460e:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004610:	00029597          	auipc	a1,0x29
    80004614:	d7858593          	addi	a1,a1,-648 # 8002d388 <__func__.0+0x2d0>
    80004618:	00029517          	auipc	a0,0x29
    8000461c:	db050513          	addi	a0,a0,-592 # 8002d3c8 <__func__.0+0x310>
    80004620:	037260ef          	jal	8002ae56 <printf>
    80004624:	00050797          	auipc	a5,0x50
    80004628:	9ed7c783          	lbu	a5,-1555(a5) # 80054011 <excpt+0x1>
    8000462c:	e399                	bnez	a5,80004632 <m_and_hs_using_vs_access_6+0x10c>
    8000462e:	06940563          	beq	s0,s1,80004698 <m_and_hs_using_vs_access_6+0x172>
    80004632:	00029517          	auipc	a0,0x29
    80004636:	d9e50513          	addi	a0,a0,-610 # 8002d3d0 <__func__.0+0x318>
    8000463a:	01d260ef          	jal	8002ae56 <printf>
    8000463e:	02900513          	li	a0,41
    80004642:	502250ef          	jal	80029b44 <putchar>
    80004646:	4529                	li	a0,10
    80004648:	4fc250ef          	jal	80029b44 <putchar>
    8000464c:	00050797          	auipc	a5,0x50
    80004650:	9c57c783          	lbu	a5,-1595(a5) # 80054011 <excpt+0x1>
    80004654:	f7c1                	bnez	a5,800045dc <m_and_hs_using_vs_access_6+0xb6>
    80004656:	011087b7          	lui	a5,0x1108
    8000465a:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    8000465e:	07c2                	slli	a5,a5,0x10
    80004660:	17b9                	addi	a5,a5,-18
    80004662:	f6f41de3          	bne	s0,a5,800045dc <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004666:	000407b7          	lui	a5,0x40
    8000466a:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000466e:	4405                	li	s0,1
    TEST_END();
    80004670:	00029597          	auipc	a1,0x29
    80004674:	d0858593          	addi	a1,a1,-760 # 8002d378 <__func__.0+0x2c0>
    80004678:	bf9d                	j	800045ee <m_and_hs_using_vs_access_6+0xc8>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000467a:	00029597          	auipc	a1,0x29
    8000467e:	cfe58593          	addi	a1,a1,-770 # 8002d378 <__func__.0+0x2c0>
    80004682:	00029517          	auipc	a0,0x29
    80004686:	d4650513          	addi	a0,a0,-698 # 8002d3c8 <__func__.0+0x310>
    8000468a:	7cc260ef          	jal	8002ae56 <printf>
    8000468e:	00050797          	auipc	a5,0x50
    80004692:	9837c783          	lbu	a5,-1661(a5) # 80054011 <excpt+0x1>
    80004696:	ffd1                	bnez	a5,80004632 <m_and_hs_using_vs_access_6+0x10c>
    80004698:	4529                	li	a0,10
    8000469a:	4aa250ef          	jal	80029b44 <putchar>
    8000469e:	00050797          	auipc	a5,0x50
    800046a2:	9737c783          	lbu	a5,-1677(a5) # 80054011 <excpt+0x1>
    800046a6:	fb9d                	bnez	a5,800045dc <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800046a8:	000407b7          	lui	a5,0x40
    800046ac:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800046b0:	4405                	li	s0,1
    TEST_END();
    800046b2:	00029597          	auipc	a1,0x29
    800046b6:	cc658593          	addi	a1,a1,-826 # 8002d378 <__func__.0+0x2c0>
    800046ba:	bf15                	j	800045ee <m_and_hs_using_vs_access_6+0xc8>

00000000800046bc <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    800046bc:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800046be:	00027597          	auipc	a1,0x27
    800046c2:	e5a58593          	addi	a1,a1,-422 # 8002b518 <__func__.5>
    800046c6:	00029517          	auipc	a0,0x29
    800046ca:	cd250513          	addi	a0,a0,-814 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    800046ce:	e406                	sd	ra,8(sp)
    800046d0:	e022                	sd	s0,0(sp)
    TEST_START();
    800046d2:	784260ef          	jal	8002ae56 <printf>
    800046d6:	4529                	li	a0,10
    800046d8:	46c250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    800046dc:	f05fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800046e0:	ae4fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800046e4:	898fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    800046e8:	450d                	li	a0,3
    800046ea:	81ffc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800046ee:	4509                	li	a0,2
    800046f0:	f38fc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800046f4:	f18fc0ef          	jal	80000e0c <test_setup_except_function>
    800046f8:	200037b7          	lui	a5,0x20003
    800046fc:	078e                	slli	a5,a5,0x3
    800046fe:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004702:	08200593          	li	a1,130
    80004706:	00029617          	auipc	a2,0x29
    8000470a:	75a60613          	addi	a2,a2,1882 # 8002de60 <__func__.0+0xda8>
    8000470e:	00029517          	auipc	a0,0x29
    80004712:	ca250513          	addi	a0,a0,-862 # 8002d3b0 <__func__.0+0x2f8>
    80004716:	740260ef          	jal	8002ae56 <printf>
    8000471a:	00050797          	auipc	a5,0x50
    8000471e:	8f77c783          	lbu	a5,-1801(a5) # 80054011 <excpt+0x1>
    80004722:	00029597          	auipc	a1,0x29
    80004726:	c5658593          	addi	a1,a1,-938 # 8002d378 <__func__.0+0x2c0>
    8000472a:	e789                	bnez	a5,80004734 <m_and_hs_using_vs_access_7+0x78>
    8000472c:	00029597          	auipc	a1,0x29
    80004730:	c5c58593          	addi	a1,a1,-932 # 8002d388 <__func__.0+0x2d0>
    80004734:	00029517          	auipc	a0,0x29
    80004738:	c9450513          	addi	a0,a0,-876 # 8002d3c8 <__func__.0+0x310>
    8000473c:	71a260ef          	jal	8002ae56 <printf>
    80004740:	00050797          	auipc	a5,0x50
    80004744:	8d17c783          	lbu	a5,-1839(a5) # 80054011 <excpt+0x1>
    80004748:	0c078e63          	beqz	a5,80004824 <m_and_hs_using_vs_access_7+0x168>
    8000474c:	4529                	li	a0,10
    8000474e:	3f6250ef          	jal	80029b44 <putchar>
    80004752:	00050417          	auipc	s0,0x50
    80004756:	8bf44403          	lbu	s0,-1857(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    8000475a:	eb2fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(sstatus, SSTATUS_MXR);
    8000475e:	000807b7          	lui	a5,0x80
    80004762:	1007a073          	csrs	sstatus,a5
    80004766:	200037b7          	lui	a5,0x20003
    8000476a:	078e                	slli	a5,a5,0x3
    8000476c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004770:	08200593          	li	a1,130
    80004774:	00029617          	auipc	a2,0x29
    80004778:	71c60613          	addi	a2,a2,1820 # 8002de90 <__func__.0+0xdd8>
    8000477c:	00029517          	auipc	a0,0x29
    80004780:	c3450513          	addi	a0,a0,-972 # 8002d3b0 <__func__.0+0x2f8>
    80004784:	6d2260ef          	jal	8002ae56 <printf>
    80004788:	00050797          	auipc	a5,0x50
    8000478c:	8897c783          	lbu	a5,-1911(a5) # 80054011 <excpt+0x1>
    80004790:	00029597          	auipc	a1,0x29
    80004794:	bf858593          	addi	a1,a1,-1032 # 8002d388 <__func__.0+0x2d0>
    80004798:	e789                	bnez	a5,800047a2 <m_and_hs_using_vs_access_7+0xe6>
    8000479a:	00029597          	auipc	a1,0x29
    8000479e:	bde58593          	addi	a1,a1,-1058 # 8002d378 <__func__.0+0x2c0>
    800047a2:	00029517          	auipc	a0,0x29
    800047a6:	c2650513          	addi	a0,a0,-986 # 8002d3c8 <__func__.0+0x310>
    800047aa:	6ac260ef          	jal	8002ae56 <printf>
    800047ae:	00050797          	auipc	a5,0x50
    800047b2:	8637c783          	lbu	a5,-1949(a5) # 80054011 <excpt+0x1>
    800047b6:	efa1                	bnez	a5,8000480e <m_and_hs_using_vs_access_7+0x152>
    800047b8:	4529                	li	a0,10
    800047ba:	38a250ef          	jal	80029b44 <putchar>
    800047be:	c411                	beqz	s0,800047ca <m_and_hs_using_vs_access_7+0x10e>
    800047c0:	00050797          	auipc	a5,0x50
    800047c4:	8517c783          	lbu	a5,-1967(a5) # 80054011 <excpt+0x1>
    800047c8:	cb95                	beqz	a5,800047fc <m_and_hs_using_vs_access_7+0x140>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    800047ca:	000807b7          	lui	a5,0x80
    800047ce:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800047d2:	4401                	li	s0,0

        TEST_END();
    800047d4:	00029597          	auipc	a1,0x29
    800047d8:	bb458593          	addi	a1,a1,-1100 # 8002d388 <__func__.0+0x2d0>
    800047dc:	00029517          	auipc	a0,0x29
    800047e0:	c5450513          	addi	a0,a0,-940 # 8002d430 <__func__.0+0x378>
    800047e4:	672260ef          	jal	8002ae56 <printf>
    800047e8:	4511                	li	a0,4
    800047ea:	f1efc0ef          	jal	80000f08 <goto_priv>
    800047ee:	836fd0ef          	jal	80001824 <reset_state>
}
    800047f2:	60a2                	ld	ra,8(sp)
    800047f4:	8522                	mv	a0,s0
    800047f6:	6402                	ld	s0,0(sp)
    800047f8:	0141                	addi	sp,sp,16
    800047fa:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    800047fc:	000807b7          	lui	a5,0x80
    80004800:	1007b073          	csrc	sstatus,a5
        TEST_END();
    80004804:	00029597          	auipc	a1,0x29
    80004808:	b7458593          	addi	a1,a1,-1164 # 8002d378 <__func__.0+0x2c0>
    8000480c:	bfc1                	j	800047dc <m_and_hs_using_vs_access_7+0x120>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000480e:	00029517          	auipc	a0,0x29
    80004812:	bc250513          	addi	a0,a0,-1086 # 8002d3d0 <__func__.0+0x318>
    80004816:	640260ef          	jal	8002ae56 <printf>
    8000481a:	02900513          	li	a0,41
    8000481e:	326250ef          	jal	80029b44 <putchar>
    80004822:	bf59                	j	800047b8 <m_and_hs_using_vs_access_7+0xfc>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004824:	00029517          	auipc	a0,0x29
    80004828:	bac50513          	addi	a0,a0,-1108 # 8002d3d0 <__func__.0+0x318>
    8000482c:	62a260ef          	jal	8002ae56 <printf>
    80004830:	02900513          	li	a0,41
    80004834:	310250ef          	jal	80029b44 <putchar>
    80004838:	bf11                	j	8000474c <m_and_hs_using_vs_access_7+0x90>

000000008000483a <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    8000483a:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000483c:	00027597          	auipc	a1,0x27
    80004840:	cfc58593          	addi	a1,a1,-772 # 8002b538 <__func__.4>
    80004844:	00029517          	auipc	a0,0x29
    80004848:	b5450513          	addi	a0,a0,-1196 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    8000484c:	ec06                	sd	ra,24(sp)
    8000484e:	e822                	sd	s0,16(sp)
    80004850:	e426                	sd	s1,8(sp)
    TEST_START();
    80004852:	604260ef          	jal	8002ae56 <printf>
    80004856:	4529                	li	a0,10
    80004858:	2ec250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    8000485c:	d85fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004860:	964fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004864:	f19fb0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    80004868:	450d                	li	a0,3
    8000486a:	e9efc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000486e:	4509                	li	a0,2
    80004870:	db8fc0ef          	jal	80000e28 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    80004874:	011117b7          	lui	a5,0x1111
    80004878:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    8000487c:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    80004880:	d8cfc0ef          	jal	80000e0c <test_setup_except_function>
    80004884:	001007b7          	lui	a5,0x100
    80004888:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    8000488a:	07b2                	slli	a5,a5,0xc
    8000488c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004890:	08200593          	li	a1,130
    80004894:	00029617          	auipc	a2,0x29
    80004898:	62460613          	addi	a2,a2,1572 # 8002deb8 <__func__.0+0xe00>
    8000489c:	00029517          	auipc	a0,0x29
    800048a0:	b1450513          	addi	a0,a0,-1260 # 8002d3b0 <__func__.0+0x2f8>
    800048a4:	5b2260ef          	jal	8002ae56 <printf>
    800048a8:	0004f797          	auipc	a5,0x4f
    800048ac:	7697c783          	lbu	a5,1897(a5) # 80054011 <excpt+0x1>
    800048b0:	0004f497          	auipc	s1,0x4f
    800048b4:	76048493          	addi	s1,s1,1888 # 80054010 <excpt>
    800048b8:	00029597          	auipc	a1,0x29
    800048bc:	ad058593          	addi	a1,a1,-1328 # 8002d388 <__func__.0+0x2d0>
    800048c0:	cf89                	beqz	a5,800048da <m_and_hs_using_vs_access_8+0xa0>
    800048c2:	6498                	ld	a4,8(s1)
    800048c4:	47b5                	li	a5,13
    800048c6:	00029597          	auipc	a1,0x29
    800048ca:	ab258593          	addi	a1,a1,-1358 # 8002d378 <__func__.0+0x2c0>
    800048ce:	00f70663          	beq	a4,a5,800048da <m_and_hs_using_vs_access_8+0xa0>
    800048d2:	00029597          	auipc	a1,0x29
    800048d6:	ab658593          	addi	a1,a1,-1354 # 8002d388 <__func__.0+0x2d0>
    800048da:	00029517          	auipc	a0,0x29
    800048de:	aee50513          	addi	a0,a0,-1298 # 8002d3c8 <__func__.0+0x310>
    800048e2:	574260ef          	jal	8002ae56 <printf>
    800048e6:	0004f797          	auipc	a5,0x4f
    800048ea:	72b7c783          	lbu	a5,1835(a5) # 80054011 <excpt+0x1>
    800048ee:	c789                	beqz	a5,800048f8 <m_and_hs_using_vs_access_8+0xbe>
    800048f0:	6498                	ld	a4,8(s1)
    800048f2:	47b5                	li	a5,13
    800048f4:	00f70c63          	beq	a4,a5,8000490c <m_and_hs_using_vs_access_8+0xd2>
    800048f8:	00029517          	auipc	a0,0x29
    800048fc:	ad850513          	addi	a0,a0,-1320 # 8002d3d0 <__func__.0+0x318>
    80004900:	556260ef          	jal	8002ae56 <printf>
    80004904:	02900513          	li	a0,41
    80004908:	23c250ef          	jal	80029b44 <putchar>
    8000490c:	4529                	li	a0,10
    8000490e:	236250ef          	jal	80029b44 <putchar>
    80004912:	0004f797          	auipc	a5,0x4f
    80004916:	6ff7c783          	lbu	a5,1791(a5) # 80054011 <excpt+0x1>
    8000491a:	4401                	li	s0,0
    8000491c:	c789                	beqz	a5,80004926 <m_and_hs_using_vs_access_8+0xec>
    8000491e:	6480                	ld	s0,8(s1)
    80004920:	144d                	addi	s0,s0,-13
    80004922:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    80004926:	ce6fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    8000492a:	000807b7          	lui	a5,0x80
    8000492e:	2007a073          	csrs	vsstatus,a5
    80004932:	001007b7          	lui	a5,0x100
    80004936:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004938:	07b2                	slli	a5,a5,0xc
    8000493a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000493e:	08200593          	li	a1,130
    80004942:	00029617          	auipc	a2,0x29
    80004946:	5a660613          	addi	a2,a2,1446 # 8002dee8 <__func__.0+0xe30>
    8000494a:	00029517          	auipc	a0,0x29
    8000494e:	a6650513          	addi	a0,a0,-1434 # 8002d3b0 <__func__.0+0x2f8>
    80004952:	504260ef          	jal	8002ae56 <printf>
    80004956:	0004f797          	auipc	a5,0x4f
    8000495a:	6bb7c783          	lbu	a5,1723(a5) # 80054011 <excpt+0x1>
    8000495e:	00029597          	auipc	a1,0x29
    80004962:	a2a58593          	addi	a1,a1,-1494 # 8002d388 <__func__.0+0x2d0>
    80004966:	e789                	bnez	a5,80004970 <m_and_hs_using_vs_access_8+0x136>
    80004968:	00029597          	auipc	a1,0x29
    8000496c:	a1058593          	addi	a1,a1,-1520 # 8002d378 <__func__.0+0x2c0>
    80004970:	00029517          	auipc	a0,0x29
    80004974:	a5850513          	addi	a0,a0,-1448 # 8002d3c8 <__func__.0+0x310>
    80004978:	4de260ef          	jal	8002ae56 <printf>
    8000497c:	0004f797          	auipc	a5,0x4f
    80004980:	6957c783          	lbu	a5,1685(a5) # 80054011 <excpt+0x1>
    80004984:	e7b1                	bnez	a5,800049d0 <m_and_hs_using_vs_access_8+0x196>
    80004986:	4529                	li	a0,10
    80004988:	1bc250ef          	jal	80029b44 <putchar>
    8000498c:	c411                	beqz	s0,80004998 <m_and_hs_using_vs_access_8+0x15e>
    8000498e:	0004f797          	auipc	a5,0x4f
    80004992:	6837c783          	lbu	a5,1667(a5) # 80054011 <excpt+0x1>
    80004996:	c79d                	beqz	a5,800049c4 <m_and_hs_using_vs_access_8+0x18a>
    80004998:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    8000499a:	00029597          	auipc	a1,0x29
    8000499e:	9ee58593          	addi	a1,a1,-1554 # 8002d388 <__func__.0+0x2d0>
    800049a2:	00029517          	auipc	a0,0x29
    800049a6:	a8e50513          	addi	a0,a0,-1394 # 8002d430 <__func__.0+0x378>
    800049aa:	4ac260ef          	jal	8002ae56 <printf>
    800049ae:	4511                	li	a0,4
    800049b0:	d58fc0ef          	jal	80000f08 <goto_priv>
    800049b4:	e71fc0ef          	jal	80001824 <reset_state>
}
    800049b8:	60e2                	ld	ra,24(sp)
    800049ba:	8522                	mv	a0,s0
    800049bc:	6442                	ld	s0,16(sp)
    800049be:	64a2                	ld	s1,8(sp)
    800049c0:	6105                	addi	sp,sp,32
    800049c2:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800049c4:	4405                	li	s0,1
    TEST_END();
    800049c6:	00029597          	auipc	a1,0x29
    800049ca:	9b258593          	addi	a1,a1,-1614 # 8002d378 <__func__.0+0x2c0>
    800049ce:	bfd1                	j	800049a2 <m_and_hs_using_vs_access_8+0x168>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800049d0:	00029517          	auipc	a0,0x29
    800049d4:	a0050513          	addi	a0,a0,-1536 # 8002d3d0 <__func__.0+0x318>
    800049d8:	47e260ef          	jal	8002ae56 <printf>
    800049dc:	02900513          	li	a0,41
    800049e0:	164250ef          	jal	80029b44 <putchar>
    800049e4:	b74d                	j	80004986 <m_and_hs_using_vs_access_8+0x14c>

00000000800049e6 <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    800049e6:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800049e8:	00027597          	auipc	a1,0x27
    800049ec:	b7058593          	addi	a1,a1,-1168 # 8002b558 <__func__.3>
    800049f0:	00029517          	auipc	a0,0x29
    800049f4:	9a850513          	addi	a0,a0,-1624 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    800049f8:	ec06                	sd	ra,24(sp)
    800049fa:	e822                	sd	s0,16(sp)
    800049fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800049fe:	458260ef          	jal	8002ae56 <printf>
    80004a02:	4529                	li	a0,10
    80004a04:	140250ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80004a08:	bd9fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004a0c:	fb9fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004a10:	d6dfb0ef          	jal	8000077c <vspt_init>
    
    reset_state();
    80004a14:	e11fc0ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HS);
    80004a18:	450d                	li	a0,3
    80004a1a:	ceefc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004a1e:	4509                	li	a0,2
    80004a20:	c08fc0ef          	jal	80000e28 <set_prev_priv>
    hpt_init();
    80004a24:	fa1fb0ef          	jal	800009c4 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004a28:	be4fc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004a2c:	37ab77b7          	lui	a5,0x37ab7
    80004a30:	00100737          	lui	a4,0x100
    80004a34:	078a                	slli	a5,a5,0x2
    80004a36:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004a3a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004a3e:	0732                	slli	a4,a4,0xc
    80004a40:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004a44:	0004f417          	auipc	s0,0x4f
    80004a48:	5cc40413          	addi	s0,s0,1484 # 80054010 <excpt>
    80004a4c:	640c                	ld	a1,8(s0)
    80004a4e:	00029517          	auipc	a0,0x29
    80004a52:	4d250513          	addi	a0,a0,1234 # 8002df20 <__func__.0+0xe68>
    80004a56:	400260ef          	jal	8002ae56 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a5a:	08200593          	li	a1,130
    80004a5e:	00029617          	auipc	a2,0x29
    80004a62:	4ca60613          	addi	a2,a2,1226 # 8002df28 <__func__.0+0xe70>
    80004a66:	00029517          	auipc	a0,0x29
    80004a6a:	94a50513          	addi	a0,a0,-1718 # 8002d3b0 <__func__.0+0x2f8>
    80004a6e:	3e8260ef          	jal	8002ae56 <printf>
    80004a72:	0004f797          	auipc	a5,0x4f
    80004a76:	59f7c783          	lbu	a5,1439(a5) # 80054011 <excpt+0x1>
    80004a7a:	00029597          	auipc	a1,0x29
    80004a7e:	90e58593          	addi	a1,a1,-1778 # 8002d388 <__func__.0+0x2d0>
    80004a82:	c789                	beqz	a5,80004a8c <m_and_hs_using_vs_access_9+0xa6>
    80004a84:	6418                	ld	a4,8(s0)
    80004a86:	47dd                	li	a5,23
    80004a88:	12f70463          	beq	a4,a5,80004bb0 <m_and_hs_using_vs_access_9+0x1ca>
    80004a8c:	00029517          	auipc	a0,0x29
    80004a90:	93c50513          	addi	a0,a0,-1732 # 8002d3c8 <__func__.0+0x310>
    80004a94:	3c2260ef          	jal	8002ae56 <printf>
    80004a98:	0004f797          	auipc	a5,0x4f
    80004a9c:	5797c783          	lbu	a5,1401(a5) # 80054011 <excpt+0x1>
    80004aa0:	c789                	beqz	a5,80004aaa <m_and_hs_using_vs_access_9+0xc4>
    80004aa2:	6418                	ld	a4,8(s0)
    80004aa4:	47dd                	li	a5,23
    80004aa6:	0ef70263          	beq	a4,a5,80004b8a <m_and_hs_using_vs_access_9+0x1a4>
    80004aaa:	00029517          	auipc	a0,0x29
    80004aae:	92650513          	addi	a0,a0,-1754 # 8002d3d0 <__func__.0+0x318>
    80004ab2:	3a4260ef          	jal	8002ae56 <printf>
    80004ab6:	02900513          	li	a0,41
    80004aba:	08a250ef          	jal	80029b44 <putchar>
    80004abe:	4529                	li	a0,10
    80004ac0:	084250ef          	jal	80029b44 <putchar>
    80004ac4:	0004f797          	auipc	a5,0x4f
    80004ac8:	54d7c783          	lbu	a5,1357(a5) # 80054011 <excpt+0x1>
    80004acc:	4481                	li	s1,0
    80004ace:	c789                	beqz	a5,80004ad8 <m_and_hs_using_vs_access_9+0xf2>
    80004ad0:	6418                	ld	a4,8(s0)
    80004ad2:	47dd                	li	a5,23
    80004ad4:	0ef70e63          	beq	a4,a5,80004bd0 <m_and_hs_using_vs_access_9+0x1ea>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004ad8:	b34fc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004adc:	001007b7          	lui	a5,0x100
    80004ae0:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    80004ae4:	07b2                	slli	a5,a5,0xc
    80004ae6:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004aea:	640c                	ld	a1,8(s0)
    80004aec:	00029517          	auipc	a0,0x29
    80004af0:	43450513          	addi	a0,a0,1076 # 8002df20 <__func__.0+0xe68>
    80004af4:	362260ef          	jal	8002ae56 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004af8:	08200593          	li	a1,130
    80004afc:	00029617          	auipc	a2,0x29
    80004b00:	46c60613          	addi	a2,a2,1132 # 8002df68 <__func__.0+0xeb0>
    80004b04:	00029517          	auipc	a0,0x29
    80004b08:	8ac50513          	addi	a0,a0,-1876 # 8002d3b0 <__func__.0+0x2f8>
    80004b0c:	34a260ef          	jal	8002ae56 <printf>
    80004b10:	0004f797          	auipc	a5,0x4f
    80004b14:	5017c783          	lbu	a5,1281(a5) # 80054011 <excpt+0x1>
    80004b18:	00029597          	auipc	a1,0x29
    80004b1c:	87058593          	addi	a1,a1,-1936 # 8002d388 <__func__.0+0x2d0>
    80004b20:	e789                	bnez	a5,80004b2a <m_and_hs_using_vs_access_9+0x144>
    80004b22:	00029597          	auipc	a1,0x29
    80004b26:	85658593          	addi	a1,a1,-1962 # 8002d378 <__func__.0+0x2c0>
    80004b2a:	00029517          	auipc	a0,0x29
    80004b2e:	89e50513          	addi	a0,a0,-1890 # 8002d3c8 <__func__.0+0x310>
    80004b32:	324260ef          	jal	8002ae56 <printf>
    80004b36:	0004f797          	auipc	a5,0x4f
    80004b3a:	4db7c783          	lbu	a5,1243(a5) # 80054011 <excpt+0x1>
    80004b3e:	efb1                	bnez	a5,80004b9a <m_and_hs_using_vs_access_9+0x1b4>
    80004b40:	4529                	li	a0,10
    80004b42:	002250ef          	jal	80029b44 <putchar>
    80004b46:	c491                	beqz	s1,80004b52 <m_and_hs_using_vs_access_9+0x16c>
    80004b48:	0004f797          	auipc	a5,0x4f
    80004b4c:	4c97c783          	lbu	a5,1225(a5) # 80054011 <excpt+0x1>
    80004b50:	c79d                	beqz	a5,80004b7e <m_and_hs_using_vs_access_9+0x198>
    80004b52:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004b54:	00029597          	auipc	a1,0x29
    80004b58:	83458593          	addi	a1,a1,-1996 # 8002d388 <__func__.0+0x2d0>
    80004b5c:	00029517          	auipc	a0,0x29
    80004b60:	8d450513          	addi	a0,a0,-1836 # 8002d430 <__func__.0+0x378>
    80004b64:	2f2260ef          	jal	8002ae56 <printf>
    80004b68:	4511                	li	a0,4
    80004b6a:	b9efc0ef          	jal	80000f08 <goto_priv>
    80004b6e:	cb7fc0ef          	jal	80001824 <reset_state>
}
    80004b72:	60e2                	ld	ra,24(sp)
    80004b74:	8522                	mv	a0,s0
    80004b76:	6442                	ld	s0,16(sp)
    80004b78:	64a2                	ld	s1,8(sp)
    80004b7a:	6105                	addi	sp,sp,32
    80004b7c:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004b7e:	4405                	li	s0,1
    TEST_END();
    80004b80:	00028597          	auipc	a1,0x28
    80004b84:	7f858593          	addi	a1,a1,2040 # 8002d378 <__func__.0+0x2c0>
    80004b88:	bfd1                	j	80004b5c <m_and_hs_using_vs_access_9+0x176>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004b8a:	7418                	ld	a4,40(s0)
    80004b8c:	4001a7b7          	lui	a5,0x4001a
    80004b90:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004b94:	f0f71be3          	bne	a4,a5,80004aaa <m_and_hs_using_vs_access_9+0xc4>
    80004b98:	b71d                	j	80004abe <m_and_hs_using_vs_access_9+0xd8>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004b9a:	00029517          	auipc	a0,0x29
    80004b9e:	83650513          	addi	a0,a0,-1994 # 8002d3d0 <__func__.0+0x318>
    80004ba2:	2b4260ef          	jal	8002ae56 <printf>
    80004ba6:	02900513          	li	a0,41
    80004baa:	79b240ef          	jal	80029b44 <putchar>
    80004bae:	bf49                	j	80004b40 <m_and_hs_using_vs_access_9+0x15a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004bb0:	7418                	ld	a4,40(s0)
    80004bb2:	4001a7b7          	lui	a5,0x4001a
    80004bb6:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004bba:	00028597          	auipc	a1,0x28
    80004bbe:	7be58593          	addi	a1,a1,1982 # 8002d378 <__func__.0+0x2c0>
    80004bc2:	ecf705e3          	beq	a4,a5,80004a8c <m_and_hs_using_vs_access_9+0xa6>
    80004bc6:	00028597          	auipc	a1,0x28
    80004bca:	7c258593          	addi	a1,a1,1986 # 8002d388 <__func__.0+0x2d0>
    80004bce:	bd7d                	j	80004a8c <m_and_hs_using_vs_access_9+0xa6>
    80004bd0:	7404                	ld	s1,40(s0)
    80004bd2:	bffe67b7          	lui	a5,0xbffe6
    80004bd6:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004bda:	94be                	add	s1,s1,a5
    80004bdc:	0014b493          	seqz	s1,s1
    80004be0:	bde5                	j	80004ad8 <m_and_hs_using_vs_access_9+0xf2>

0000000080004be2 <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004be2:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004be4:	00027597          	auipc	a1,0x27
    80004be8:	99458593          	addi	a1,a1,-1644 # 8002b578 <__func__.2>
    80004bec:	00028517          	auipc	a0,0x28
    80004bf0:	7ac50513          	addi	a0,a0,1964 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004bf4:	ec06                	sd	ra,24(sp)
    80004bf6:	e822                	sd	s0,16(sp)
    80004bf8:	e426                	sd	s1,8(sp)
    TEST_START();
    80004bfa:	25c260ef          	jal	8002ae56 <printf>
    80004bfe:	4529                	li	a0,10
    80004c00:	745240ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80004c04:	9ddfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004c08:	dbdfb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004c0c:	b71fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004c10:	450d                	li	a0,3
    80004c12:	af6fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004c16:	4509                	li	a0,2
    80004c18:	a10fc0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004c1c:	9f0fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);
    80004c20:	6785                	lui	a5,0x1
    80004c22:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004c26:	14079073          	csrw	sscratch,a5
    80004c2a:	000807b7          	lui	a5,0x80
    80004c2e:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004c30:	07b6                	slli	a5,a5,0xd
    80004c32:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c36:	08200593          	li	a1,130
    80004c3a:	00029617          	auipc	a2,0x29
    80004c3e:	35660613          	addi	a2,a2,854 # 8002df90 <__func__.0+0xed8>
    80004c42:	00028517          	auipc	a0,0x28
    80004c46:	76e50513          	addi	a0,a0,1902 # 8002d3b0 <__func__.0+0x2f8>
    80004c4a:	20c260ef          	jal	8002ae56 <printf>
    80004c4e:	0004f797          	auipc	a5,0x4f
    80004c52:	3c37c783          	lbu	a5,963(a5) # 80054011 <excpt+0x1>
    80004c56:	00028597          	auipc	a1,0x28
    80004c5a:	72258593          	addi	a1,a1,1826 # 8002d378 <__func__.0+0x2c0>
    80004c5e:	c789                	beqz	a5,80004c68 <m_and_hs_using_vs_access_10+0x86>
    80004c60:	00028597          	auipc	a1,0x28
    80004c64:	72858593          	addi	a1,a1,1832 # 8002d388 <__func__.0+0x2d0>
    80004c68:	00028517          	auipc	a0,0x28
    80004c6c:	76050513          	addi	a0,a0,1888 # 8002d3c8 <__func__.0+0x310>
    80004c70:	1e6260ef          	jal	8002ae56 <printf>
    80004c74:	0004f797          	auipc	a5,0x4f
    80004c78:	39d7c783          	lbu	a5,925(a5) # 80054011 <excpt+0x1>
    80004c7c:	10079663          	bnez	a5,80004d88 <m_and_hs_using_vs_access_10+0x1a6>
    80004c80:	4529                	li	a0,10
    80004c82:	6c3240ef          	jal	80029b44 <putchar>
    80004c86:	0004f417          	auipc	s0,0x4f
    80004c8a:	38b44403          	lbu	s0,907(s0) # 80054011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004c8e:	aeffb0ef          	jal	8000077c <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004c92:	97afc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);      
    80004c96:	6785                	lui	a5,0x1
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c98:	0004f497          	auipc	s1,0x4f
    80004c9c:	37848493          	addi	s1,s1,888 # 80054010 <excpt>
    CSRW(sscratch, 0x911);      
    80004ca0:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004ca4:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004ca8:	37ab77b7          	lui	a5,0x37ab7
    80004cac:	00080737          	lui	a4,0x80
    80004cb0:	078a                	slli	a5,a5,0x2
    80004cb2:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004cb4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004cb8:	0736                	slli	a4,a4,0xd
    80004cba:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004cbe:	08200593          	li	a1,130
    80004cc2:	00029617          	auipc	a2,0x29
    80004cc6:	2fe60613          	addi	a2,a2,766 # 8002dfc0 <__func__.0+0xf08>
    80004cca:	00028517          	auipc	a0,0x28
    80004cce:	6e650513          	addi	a0,a0,1766 # 8002d3b0 <__func__.0+0x2f8>
    80004cd2:	184260ef          	jal	8002ae56 <printf>
    80004cd6:	0004f797          	auipc	a5,0x4f
    80004cda:	33b7c783          	lbu	a5,827(a5) # 80054011 <excpt+0x1>
    80004cde:	00028597          	auipc	a1,0x28
    80004ce2:	6aa58593          	addi	a1,a1,1706 # 8002d388 <__func__.0+0x2d0>
    80004ce6:	cf89                	beqz	a5,80004d00 <m_and_hs_using_vs_access_10+0x11e>
    80004ce8:	6498                	ld	a4,8(s1)
    80004cea:	47bd                	li	a5,15
    80004cec:	00028597          	auipc	a1,0x28
    80004cf0:	68c58593          	addi	a1,a1,1676 # 8002d378 <__func__.0+0x2c0>
    80004cf4:	00f70663          	beq	a4,a5,80004d00 <m_and_hs_using_vs_access_10+0x11e>
    80004cf8:	00028597          	auipc	a1,0x28
    80004cfc:	69058593          	addi	a1,a1,1680 # 8002d388 <__func__.0+0x2d0>
    80004d00:	00028517          	auipc	a0,0x28
    80004d04:	6c850513          	addi	a0,a0,1736 # 8002d3c8 <__func__.0+0x310>
    80004d08:	14e260ef          	jal	8002ae56 <printf>
    80004d0c:	0004f797          	auipc	a5,0x4f
    80004d10:	3057c783          	lbu	a5,773(a5) # 80054011 <excpt+0x1>
    80004d14:	c789                	beqz	a5,80004d1e <m_and_hs_using_vs_access_10+0x13c>
    80004d16:	6498                	ld	a4,8(s1)
    80004d18:	47bd                	li	a5,15
    80004d1a:	00f70c63          	beq	a4,a5,80004d32 <m_and_hs_using_vs_access_10+0x150>
    80004d1e:	00028517          	auipc	a0,0x28
    80004d22:	6b250513          	addi	a0,a0,1714 # 8002d3d0 <__func__.0+0x318>
    80004d26:	130260ef          	jal	8002ae56 <printf>
    80004d2a:	02900513          	li	a0,41
    80004d2e:	617240ef          	jal	80029b44 <putchar>
    80004d32:	4529                	li	a0,10
    80004d34:	611240ef          	jal	80029b44 <putchar>
    80004d38:	e015                	bnez	s0,80004d5c <m_and_hs_using_vs_access_10+0x17a>
    80004d3a:	0004f417          	auipc	s0,0x4f
    80004d3e:	2d744403          	lbu	s0,727(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004d42:	00028597          	auipc	a1,0x28
    80004d46:	64658593          	addi	a1,a1,1606 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004d4a:	cc11                	beqz	s0,80004d66 <m_and_hs_using_vs_access_10+0x184>
    80004d4c:	6498                	ld	a4,8(s1)
    80004d4e:	47bd                	li	a5,15
    TEST_END();
    80004d50:	00028597          	auipc	a1,0x28
    80004d54:	62858593          	addi	a1,a1,1576 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004d58:	00f70763          	beq	a4,a5,80004d66 <m_and_hs_using_vs_access_10+0x184>
    80004d5c:	4401                	li	s0,0
    TEST_END();
    80004d5e:	00028597          	auipc	a1,0x28
    80004d62:	62a58593          	addi	a1,a1,1578 # 8002d388 <__func__.0+0x2d0>
    80004d66:	00028517          	auipc	a0,0x28
    80004d6a:	6ca50513          	addi	a0,a0,1738 # 8002d430 <__func__.0+0x378>
    80004d6e:	0e8260ef          	jal	8002ae56 <printf>
    80004d72:	4511                	li	a0,4
    80004d74:	994fc0ef          	jal	80000f08 <goto_priv>
    80004d78:	aadfc0ef          	jal	80001824 <reset_state>
}
    80004d7c:	60e2                	ld	ra,24(sp)
    80004d7e:	8522                	mv	a0,s0
    80004d80:	6442                	ld	s0,16(sp)
    80004d82:	64a2                	ld	s1,8(sp)
    80004d84:	6105                	addi	sp,sp,32
    80004d86:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004d88:	00028517          	auipc	a0,0x28
    80004d8c:	64850513          	addi	a0,a0,1608 # 8002d3d0 <__func__.0+0x318>
    80004d90:	0c6260ef          	jal	8002ae56 <printf>
    80004d94:	02900513          	li	a0,41
    80004d98:	5ad240ef          	jal	80029b44 <putchar>
    80004d9c:	b5d5                	j	80004c80 <m_and_hs_using_vs_access_10+0x9e>

0000000080004d9e <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004d9e:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004da0:	00026597          	auipc	a1,0x26
    80004da4:	7f858593          	addi	a1,a1,2040 # 8002b598 <__func__.1>
    80004da8:	00028517          	auipc	a0,0x28
    80004dac:	5f050513          	addi	a0,a0,1520 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004db0:	ec06                	sd	ra,24(sp)
    80004db2:	e822                	sd	s0,16(sp)
    80004db4:	e426                	sd	s1,8(sp)
    TEST_START();
    80004db6:	0a0260ef          	jal	8002ae56 <printf>
    80004dba:	4529                	li	a0,10
    80004dbc:	589240ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80004dc0:	821fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004dc4:	c01fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004dc8:	9b5fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004dcc:	450d                	li	a0,3
    80004dce:	93afc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004dd2:	4509                	li	a0,2
    80004dd4:	854fc0ef          	jal	80000e28 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004dd8:	834fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004ddc:	11200793          	li	a5,274
    80004de0:	14079073          	csrw	sscratch,a5
    80004de4:	37ab77b7          	lui	a5,0x37ab7
    80004de8:	00080737          	lui	a4,0x80
    80004dec:	078a                	slli	a5,a5,0x2
    80004dee:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004df2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004df6:	0736                	slli	a4,a4,0xd
    80004df8:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004dfc:	08200593          	li	a1,130
    80004e00:	00029617          	auipc	a2,0x29
    80004e04:	1f860613          	addi	a2,a2,504 # 8002dff8 <__func__.0+0xf40>
    80004e08:	00028517          	auipc	a0,0x28
    80004e0c:	5a850513          	addi	a0,a0,1448 # 8002d3b0 <__func__.0+0x2f8>
    80004e10:	046260ef          	jal	8002ae56 <printf>
    80004e14:	0004f797          	auipc	a5,0x4f
    80004e18:	1fd7c783          	lbu	a5,509(a5) # 80054011 <excpt+0x1>
    80004e1c:	0004f497          	auipc	s1,0x4f
    80004e20:	1f448493          	addi	s1,s1,500 # 80054010 <excpt>
    80004e24:	00028597          	auipc	a1,0x28
    80004e28:	56458593          	addi	a1,a1,1380 # 8002d388 <__func__.0+0x2d0>
    80004e2c:	cf89                	beqz	a5,80004e46 <m_and_hs_using_vs_access_11+0xa8>
    80004e2e:	6498                	ld	a4,8(s1)
    80004e30:	47dd                	li	a5,23
    80004e32:	00028597          	auipc	a1,0x28
    80004e36:	54658593          	addi	a1,a1,1350 # 8002d378 <__func__.0+0x2c0>
    80004e3a:	00f70663          	beq	a4,a5,80004e46 <m_and_hs_using_vs_access_11+0xa8>
    80004e3e:	00028597          	auipc	a1,0x28
    80004e42:	54a58593          	addi	a1,a1,1354 # 8002d388 <__func__.0+0x2d0>
    80004e46:	00028517          	auipc	a0,0x28
    80004e4a:	58250513          	addi	a0,a0,1410 # 8002d3c8 <__func__.0+0x310>
    80004e4e:	008260ef          	jal	8002ae56 <printf>
    80004e52:	0004f797          	auipc	a5,0x4f
    80004e56:	1bf7c783          	lbu	a5,447(a5) # 80054011 <excpt+0x1>
    80004e5a:	c789                	beqz	a5,80004e64 <m_and_hs_using_vs_access_11+0xc6>
    80004e5c:	6498                	ld	a4,8(s1)
    80004e5e:	47dd                	li	a5,23
    80004e60:	00f70c63          	beq	a4,a5,80004e78 <m_and_hs_using_vs_access_11+0xda>
    80004e64:	00028517          	auipc	a0,0x28
    80004e68:	56c50513          	addi	a0,a0,1388 # 8002d3d0 <__func__.0+0x318>
    80004e6c:	7eb250ef          	jal	8002ae56 <printf>
    80004e70:	02900513          	li	a0,41
    80004e74:	4d1240ef          	jal	80029b44 <putchar>
    80004e78:	4529                	li	a0,10
    80004e7a:	4cb240ef          	jal	80029b44 <putchar>
    80004e7e:	0004f417          	auipc	s0,0x4f
    80004e82:	19344403          	lbu	s0,403(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004e86:	00028597          	auipc	a1,0x28
    80004e8a:	50258593          	addi	a1,a1,1282 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004e8e:	cc11                	beqz	s0,80004eaa <m_and_hs_using_vs_access_11+0x10c>
    80004e90:	6498                	ld	a4,8(s1)
    80004e92:	47dd                	li	a5,23
    TEST_END();
    80004e94:	00028597          	auipc	a1,0x28
    80004e98:	4e458593          	addi	a1,a1,1252 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004e9c:	00f70763          	beq	a4,a5,80004eaa <m_and_hs_using_vs_access_11+0x10c>
    80004ea0:	4401                	li	s0,0
    TEST_END();
    80004ea2:	00028597          	auipc	a1,0x28
    80004ea6:	4e658593          	addi	a1,a1,1254 # 8002d388 <__func__.0+0x2d0>
    80004eaa:	00028517          	auipc	a0,0x28
    80004eae:	58650513          	addi	a0,a0,1414 # 8002d430 <__func__.0+0x378>
    80004eb2:	7a5250ef          	jal	8002ae56 <printf>
    80004eb6:	4511                	li	a0,4
    80004eb8:	850fc0ef          	jal	80000f08 <goto_priv>
    80004ebc:	969fc0ef          	jal	80001824 <reset_state>
}
    80004ec0:	60e2                	ld	ra,24(sp)
    80004ec2:	8522                	mv	a0,s0
    80004ec4:	6442                	ld	s0,16(sp)
    80004ec6:	64a2                	ld	s1,8(sp)
    80004ec8:	6105                	addi	sp,sp,32
    80004eca:	8082                	ret

0000000080004ecc <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004ecc:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004ece:	00026597          	auipc	a1,0x26
    80004ed2:	6ea58593          	addi	a1,a1,1770 # 8002b5b8 <__func__.0>
    80004ed6:	00028517          	auipc	a0,0x28
    80004eda:	4c250513          	addi	a0,a0,1218 # 8002d398 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004ede:	e406                	sd	ra,8(sp)
    80004ee0:	e022                	sd	s0,0(sp)
    TEST_START();
    80004ee2:	775250ef          	jal	8002ae56 <printf>
    80004ee6:	4529                	li	a0,10
    80004ee8:	45d240ef          	jal	80029b44 <putchar>
    
    hspt_init();
    80004eec:	ef4fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004ef0:	ad5fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004ef4:	889fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004ef8:	450d                	li	a0,3
    80004efa:	80efc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004efe:	4509                	li	a0,2
    80004f00:	f29fb0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004f04:	f09fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004f08:	11200793          	li	a5,274
    80004f0c:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004f10:	08200593          	li	a1,130
    80004f14:	00029617          	auipc	a2,0x29
    80004f18:	12460613          	addi	a2,a2,292 # 8002e038 <__func__.0+0xf80>
    80004f1c:	00028517          	auipc	a0,0x28
    80004f20:	49450513          	addi	a0,a0,1172 # 8002d3b0 <__func__.0+0x2f8>
    80004f24:	733250ef          	jal	8002ae56 <printf>
    80004f28:	0004f797          	auipc	a5,0x4f
    80004f2c:	0e97c783          	lbu	a5,233(a5) # 80054011 <excpt+0x1>
    80004f30:	00028597          	auipc	a1,0x28
    80004f34:	44858593          	addi	a1,a1,1096 # 8002d378 <__func__.0+0x2c0>
    80004f38:	c789                	beqz	a5,80004f42 <m_and_hs_using_vs_access_12+0x76>
    80004f3a:	00028597          	auipc	a1,0x28
    80004f3e:	44e58593          	addi	a1,a1,1102 # 8002d388 <__func__.0+0x2d0>
    80004f42:	00028517          	auipc	a0,0x28
    80004f46:	48650513          	addi	a0,a0,1158 # 8002d3c8 <__func__.0+0x310>
    80004f4a:	70d250ef          	jal	8002ae56 <printf>
    80004f4e:	0004f797          	auipc	a5,0x4f
    80004f52:	0c37c783          	lbu	a5,195(a5) # 80054011 <excpt+0x1>
    80004f56:	e7a1                	bnez	a5,80004f9e <m_and_hs_using_vs_access_12+0xd2>
    80004f58:	4529                	li	a0,10
    80004f5a:	3eb240ef          	jal	80029b44 <putchar>
    80004f5e:	0004f797          	auipc	a5,0x4f
    80004f62:	0b37c783          	lbu	a5,179(a5) # 80054011 <excpt+0x1>
    80004f66:	e795                	bnez	a5,80004f92 <m_and_hs_using_vs_access_12+0xc6>
    80004f68:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004f6a:	00028597          	auipc	a1,0x28
    80004f6e:	40e58593          	addi	a1,a1,1038 # 8002d378 <__func__.0+0x2c0>
    80004f72:	00028517          	auipc	a0,0x28
    80004f76:	4be50513          	addi	a0,a0,1214 # 8002d430 <__func__.0+0x378>
    80004f7a:	6dd250ef          	jal	8002ae56 <printf>
    80004f7e:	4511                	li	a0,4
    80004f80:	f89fb0ef          	jal	80000f08 <goto_priv>
    80004f84:	8a1fc0ef          	jal	80001824 <reset_state>

}
    80004f88:	60a2                	ld	ra,8(sp)
    80004f8a:	8522                	mv	a0,s0
    80004f8c:	6402                	ld	s0,0(sp)
    80004f8e:	0141                	addi	sp,sp,16
    80004f90:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004f92:	4401                	li	s0,0
    TEST_END();
    80004f94:	00028597          	auipc	a1,0x28
    80004f98:	3f458593          	addi	a1,a1,1012 # 8002d388 <__func__.0+0x2d0>
    80004f9c:	bfd9                	j	80004f72 <m_and_hs_using_vs_access_12+0xa6>
    TEST_ASSERT("CSRW successfull int any condition",
    80004f9e:	00028517          	auipc	a0,0x28
    80004fa2:	43250513          	addi	a0,a0,1074 # 8002d3d0 <__func__.0+0x318>
    80004fa6:	6b1250ef          	jal	8002ae56 <printf>
    80004faa:	02900513          	li	a0,41
    80004fae:	397240ef          	jal	80029b44 <putchar>
    80004fb2:	b75d                	j	80004f58 <m_and_hs_using_vs_access_12+0x8c>

0000000080004fb4 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004fb4:	1101                	addi	sp,sp,-32

    TEST_START();
    80004fb6:	00026597          	auipc	a1,0x26
    80004fba:	62258593          	addi	a1,a1,1570 # 8002b5d8 <__func__.11>
    80004fbe:	00028517          	auipc	a0,0x28
    80004fc2:	3da50513          	addi	a0,a0,986 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004fc6:	ec06                	sd	ra,24(sp)
    80004fc8:	e822                	sd	s0,16(sp)
    80004fca:	e426                	sd	s1,8(sp)
    TEST_START();
    80004fcc:	68b250ef          	jal	8002ae56 <printf>
    80004fd0:	4529                	li	a0,10
    80004fd2:	373240ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_VS);
    80004fd6:	4509                	li	a0,2
    80004fd8:	f31fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004fdc:	e31fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004fe0:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004fe4:	08200593          	li	a1,130
    80004fe8:	00029617          	auipc	a2,0x29
    80004fec:	07860613          	addi	a2,a2,120 # 8002e060 <__func__.0+0xfa8>
    80004ff0:	00028517          	auipc	a0,0x28
    80004ff4:	3c050513          	addi	a0,a0,960 # 8002d3b0 <__func__.0+0x2f8>
    80004ff8:	65f250ef          	jal	8002ae56 <printf>
    80004ffc:	0004f797          	auipc	a5,0x4f
    80005000:	0157c783          	lbu	a5,21(a5) # 80054011 <excpt+0x1>
    80005004:	0004f497          	auipc	s1,0x4f
    80005008:	00c48493          	addi	s1,s1,12 # 80054010 <excpt>
    8000500c:	00028597          	auipc	a1,0x28
    80005010:	37c58593          	addi	a1,a1,892 # 8002d388 <__func__.0+0x2d0>
    80005014:	cf89                	beqz	a5,8000502e <virtual_instruction_1+0x7a>
    80005016:	6498                	ld	a4,8(s1)
    80005018:	47d9                	li	a5,22
    8000501a:	00028597          	auipc	a1,0x28
    8000501e:	35e58593          	addi	a1,a1,862 # 8002d378 <__func__.0+0x2c0>
    80005022:	00f70663          	beq	a4,a5,8000502e <virtual_instruction_1+0x7a>
    80005026:	00028597          	auipc	a1,0x28
    8000502a:	36258593          	addi	a1,a1,866 # 8002d388 <__func__.0+0x2d0>
    8000502e:	00028517          	auipc	a0,0x28
    80005032:	39a50513          	addi	a0,a0,922 # 8002d3c8 <__func__.0+0x310>
    80005036:	621250ef          	jal	8002ae56 <printf>
    8000503a:	0004f797          	auipc	a5,0x4f
    8000503e:	fd77c783          	lbu	a5,-41(a5) # 80054011 <excpt+0x1>
    80005042:	c789                	beqz	a5,8000504c <virtual_instruction_1+0x98>
    80005044:	6498                	ld	a4,8(s1)
    80005046:	47d9                	li	a5,22
    80005048:	00f70c63          	beq	a4,a5,80005060 <virtual_instruction_1+0xac>
    8000504c:	00028517          	auipc	a0,0x28
    80005050:	38450513          	addi	a0,a0,900 # 8002d3d0 <__func__.0+0x318>
    80005054:	603250ef          	jal	8002ae56 <printf>
    80005058:	02900513          	li	a0,41
    8000505c:	2e9240ef          	jal	80029b44 <putchar>
    80005060:	4529                	li	a0,10
    80005062:	2e3240ef          	jal	80029b44 <putchar>
    80005066:	0004f797          	auipc	a5,0x4f
    8000506a:	fab7c783          	lbu	a5,-85(a5) # 80054011 <excpt+0x1>
    8000506e:	4401                	li	s0,0
    80005070:	c789                	beqz	a5,8000507a <virtual_instruction_1+0xc6>
    80005072:	6480                	ld	s0,8(s1)
    80005074:	1429                	addi	s0,s0,-22
    80005076:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    8000507a:	4509                	li	a0,2
    8000507c:	e8dfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005080:	d8dfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005084:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80005088:	08200593          	li	a1,130
    8000508c:	00029617          	auipc	a2,0x29
    80005090:	01460613          	addi	a2,a2,20 # 8002e0a0 <__func__.0+0xfe8>
    80005094:	00028517          	auipc	a0,0x28
    80005098:	31c50513          	addi	a0,a0,796 # 8002d3b0 <__func__.0+0x2f8>
    8000509c:	5bb250ef          	jal	8002ae56 <printf>
    800050a0:	0004f797          	auipc	a5,0x4f
    800050a4:	f717c783          	lbu	a5,-143(a5) # 80054011 <excpt+0x1>
    800050a8:	00028597          	auipc	a1,0x28
    800050ac:	2e058593          	addi	a1,a1,736 # 8002d388 <__func__.0+0x2d0>
    800050b0:	cf89                	beqz	a5,800050ca <virtual_instruction_1+0x116>
    800050b2:	6498                	ld	a4,8(s1)
    800050b4:	47d9                	li	a5,22
    800050b6:	00028597          	auipc	a1,0x28
    800050ba:	2c258593          	addi	a1,a1,706 # 8002d378 <__func__.0+0x2c0>
    800050be:	00f70663          	beq	a4,a5,800050ca <virtual_instruction_1+0x116>
    800050c2:	00028597          	auipc	a1,0x28
    800050c6:	2c658593          	addi	a1,a1,710 # 8002d388 <__func__.0+0x2d0>
    800050ca:	00028517          	auipc	a0,0x28
    800050ce:	2fe50513          	addi	a0,a0,766 # 8002d3c8 <__func__.0+0x310>
    800050d2:	585250ef          	jal	8002ae56 <printf>
    800050d6:	0004f797          	auipc	a5,0x4f
    800050da:	f3b7c783          	lbu	a5,-197(a5) # 80054011 <excpt+0x1>
    800050de:	c789                	beqz	a5,800050e8 <virtual_instruction_1+0x134>
    800050e0:	6498                	ld	a4,8(s1)
    800050e2:	47d9                	li	a5,22
    800050e4:	00f70c63          	beq	a4,a5,800050fc <virtual_instruction_1+0x148>
    800050e8:	00028517          	auipc	a0,0x28
    800050ec:	2e850513          	addi	a0,a0,744 # 8002d3d0 <__func__.0+0x318>
    800050f0:	567250ef          	jal	8002ae56 <printf>
    800050f4:	02900513          	li	a0,41
    800050f8:	24d240ef          	jal	80029b44 <putchar>
    800050fc:	4529                	li	a0,10
    800050fe:	247240ef          	jal	80029b44 <putchar>
    80005102:	c801                	beqz	s0,80005112 <virtual_instruction_1+0x15e>
    80005104:	0004f797          	auipc	a5,0x4f
    80005108:	f0d7c783          	lbu	a5,-243(a5) # 80054011 <excpt+0x1>
    8000510c:	4401                	li	s0,0
    8000510e:	18079663          	bnez	a5,8000529a <virtual_instruction_1+0x2e6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    80005112:	4511                	li	a0,4
    80005114:	df5fb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005118:	001007b7          	lui	a5,0x100
    8000511c:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005120:	4509                	li	a0,2
    80005122:	de7fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005126:	ce7fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000512a:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    8000512e:	08200593          	li	a1,130
    80005132:	00029617          	auipc	a2,0x29
    80005136:	fae60613          	addi	a2,a2,-82 # 8002e0e0 <__func__.0+0x1028>
    8000513a:	00028517          	auipc	a0,0x28
    8000513e:	27650513          	addi	a0,a0,630 # 8002d3b0 <__func__.0+0x2f8>
    80005142:	515250ef          	jal	8002ae56 <printf>
    80005146:	0004f797          	auipc	a5,0x4f
    8000514a:	ecb7c783          	lbu	a5,-309(a5) # 80054011 <excpt+0x1>
    8000514e:	00028597          	auipc	a1,0x28
    80005152:	23a58593          	addi	a1,a1,570 # 8002d388 <__func__.0+0x2d0>
    80005156:	cf89                	beqz	a5,80005170 <virtual_instruction_1+0x1bc>
    80005158:	6498                	ld	a4,8(s1)
    8000515a:	47d9                	li	a5,22
    8000515c:	00028597          	auipc	a1,0x28
    80005160:	21c58593          	addi	a1,a1,540 # 8002d378 <__func__.0+0x2c0>
    80005164:	00f70663          	beq	a4,a5,80005170 <virtual_instruction_1+0x1bc>
    80005168:	00028597          	auipc	a1,0x28
    8000516c:	22058593          	addi	a1,a1,544 # 8002d388 <__func__.0+0x2d0>
    80005170:	00028517          	auipc	a0,0x28
    80005174:	25850513          	addi	a0,a0,600 # 8002d3c8 <__func__.0+0x310>
    80005178:	4df250ef          	jal	8002ae56 <printf>
    8000517c:	0004f797          	auipc	a5,0x4f
    80005180:	e957c783          	lbu	a5,-363(a5) # 80054011 <excpt+0x1>
    80005184:	c789                	beqz	a5,8000518e <virtual_instruction_1+0x1da>
    80005186:	6498                	ld	a4,8(s1)
    80005188:	47d9                	li	a5,22
    8000518a:	00f70c63          	beq	a4,a5,800051a2 <virtual_instruction_1+0x1ee>
    8000518e:	00028517          	auipc	a0,0x28
    80005192:	24250513          	addi	a0,a0,578 # 8002d3d0 <__func__.0+0x318>
    80005196:	4c1250ef          	jal	8002ae56 <printf>
    8000519a:	02900513          	li	a0,41
    8000519e:	1a7240ef          	jal	80029b44 <putchar>
    800051a2:	4529                	li	a0,10
    800051a4:	1a1240ef          	jal	80029b44 <putchar>
    800051a8:	c801                	beqz	s0,800051b8 <virtual_instruction_1+0x204>
    800051aa:	0004f797          	auipc	a5,0x4f
    800051ae:	e677c783          	lbu	a5,-409(a5) # 80054011 <excpt+0x1>
    800051b2:	4401                	li	s0,0
    800051b4:	0c079e63          	bnez	a5,80005290 <virtual_instruction_1+0x2dc>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800051b8:	4509                	li	a0,2
    800051ba:	d4ffb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800051be:	c4ffb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800051c2:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800051c6:	08200593          	li	a1,130
    800051ca:	00029617          	auipc	a2,0x29
    800051ce:	f6660613          	addi	a2,a2,-154 # 8002e130 <__func__.0+0x1078>
    800051d2:	00028517          	auipc	a0,0x28
    800051d6:	1de50513          	addi	a0,a0,478 # 8002d3b0 <__func__.0+0x2f8>
    800051da:	47d250ef          	jal	8002ae56 <printf>
    800051de:	0004f797          	auipc	a5,0x4f
    800051e2:	e337c783          	lbu	a5,-461(a5) # 80054011 <excpt+0x1>
    800051e6:	00028597          	auipc	a1,0x28
    800051ea:	1a258593          	addi	a1,a1,418 # 8002d388 <__func__.0+0x2d0>
    800051ee:	cf89                	beqz	a5,80005208 <virtual_instruction_1+0x254>
    800051f0:	6498                	ld	a4,8(s1)
    800051f2:	47d9                	li	a5,22
    800051f4:	00028597          	auipc	a1,0x28
    800051f8:	18458593          	addi	a1,a1,388 # 8002d378 <__func__.0+0x2c0>
    800051fc:	00f70663          	beq	a4,a5,80005208 <virtual_instruction_1+0x254>
    80005200:	00028597          	auipc	a1,0x28
    80005204:	18858593          	addi	a1,a1,392 # 8002d388 <__func__.0+0x2d0>
    80005208:	00028517          	auipc	a0,0x28
    8000520c:	1c050513          	addi	a0,a0,448 # 8002d3c8 <__func__.0+0x310>
    80005210:	447250ef          	jal	8002ae56 <printf>
    80005214:	0004f797          	auipc	a5,0x4f
    80005218:	dfd7c783          	lbu	a5,-515(a5) # 80054011 <excpt+0x1>
    8000521c:	c789                	beqz	a5,80005226 <virtual_instruction_1+0x272>
    8000521e:	6498                	ld	a4,8(s1)
    80005220:	47d9                	li	a5,22
    80005222:	00f70c63          	beq	a4,a5,8000523a <virtual_instruction_1+0x286>
    80005226:	00028517          	auipc	a0,0x28
    8000522a:	1aa50513          	addi	a0,a0,426 # 8002d3d0 <__func__.0+0x318>
    8000522e:	429250ef          	jal	8002ae56 <printf>
    80005232:	02900513          	li	a0,41
    80005236:	10f240ef          	jal	80029b44 <putchar>
    8000523a:	4529                	li	a0,10
    8000523c:	109240ef          	jal	80029b44 <putchar>
    80005240:	c015                	beqz	s0,80005264 <virtual_instruction_1+0x2b0>
    80005242:	0004f417          	auipc	s0,0x4f
    80005246:	dcf44403          	lbu	s0,-561(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8000524a:	00028597          	auipc	a1,0x28
    8000524e:	13e58593          	addi	a1,a1,318 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005252:	cc11                	beqz	s0,8000526e <virtual_instruction_1+0x2ba>
    80005254:	6498                	ld	a4,8(s1)
    80005256:	47d9                	li	a5,22
    TEST_END();
    80005258:	00028597          	auipc	a1,0x28
    8000525c:	12058593          	addi	a1,a1,288 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005260:	00f70763          	beq	a4,a5,8000526e <virtual_instruction_1+0x2ba>
    80005264:	4401                	li	s0,0
    TEST_END();
    80005266:	00028597          	auipc	a1,0x28
    8000526a:	12258593          	addi	a1,a1,290 # 8002d388 <__func__.0+0x2d0>
    8000526e:	00028517          	auipc	a0,0x28
    80005272:	1c250513          	addi	a0,a0,450 # 8002d430 <__func__.0+0x378>
    80005276:	3e1250ef          	jal	8002ae56 <printf>
    8000527a:	4511                	li	a0,4
    8000527c:	c8dfb0ef          	jal	80000f08 <goto_priv>
    80005280:	da4fc0ef          	jal	80001824 <reset_state>
}
    80005284:	60e2                	ld	ra,24(sp)
    80005286:	8522                	mv	a0,s0
    80005288:	6442                	ld	s0,16(sp)
    8000528a:	64a2                	ld	s1,8(sp)
    8000528c:	6105                	addi	sp,sp,32
    8000528e:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005290:	6480                	ld	s0,8(s1)
    80005292:	1429                	addi	s0,s0,-22
    80005294:	00143413          	seqz	s0,s0
    80005298:	b705                	j	800051b8 <virtual_instruction_1+0x204>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    8000529a:	6480                	ld	s0,8(s1)
    8000529c:	1429                	addi	s0,s0,-22
    8000529e:	00143413          	seqz	s0,s0
    800052a2:	bd85                	j	80005112 <virtual_instruction_1+0x15e>

00000000800052a4 <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800052a4:	7179                	addi	sp,sp,-48

    TEST_START();
    800052a6:	00026597          	auipc	a1,0x26
    800052aa:	34a58593          	addi	a1,a1,842 # 8002b5f0 <__func__.10>
    800052ae:	00028517          	auipc	a0,0x28
    800052b2:	0ea50513          	addi	a0,a0,234 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    800052b6:	f406                	sd	ra,40(sp)
    800052b8:	f022                	sd	s0,32(sp)
    800052ba:	ec26                	sd	s1,24(sp)
    TEST_START();
    800052bc:	39b250ef          	jal	8002ae56 <printf>
    800052c0:	4529                	li	a0,10
    800052c2:	083240ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_VS);
    800052c6:	4509                	li	a0,2
    800052c8:	c41fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800052cc:	b41fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800052d0:	4781                	li	a5,0
    800052d2:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    800052d6:	08200593          	li	a1,130
    800052da:	00029617          	auipc	a2,0x29
    800052de:	ea660613          	addi	a2,a2,-346 # 8002e180 <__func__.0+0x10c8>
    800052e2:	00028517          	auipc	a0,0x28
    800052e6:	0ce50513          	addi	a0,a0,206 # 8002d3b0 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    800052ea:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    800052ec:	36b250ef          	jal	8002ae56 <printf>
    800052f0:	0004f797          	auipc	a5,0x4f
    800052f4:	d217c783          	lbu	a5,-735(a5) # 80054011 <excpt+0x1>
    800052f8:	0004f497          	auipc	s1,0x4f
    800052fc:	d1848493          	addi	s1,s1,-744 # 80054010 <excpt>
    80005300:	00028597          	auipc	a1,0x28
    80005304:	08858593          	addi	a1,a1,136 # 8002d388 <__func__.0+0x2d0>
    80005308:	cf89                	beqz	a5,80005322 <virtual_instruction_2+0x7e>
    8000530a:	6498                	ld	a4,8(s1)
    8000530c:	47d9                	li	a5,22
    8000530e:	00028597          	auipc	a1,0x28
    80005312:	06a58593          	addi	a1,a1,106 # 8002d378 <__func__.0+0x2c0>
    80005316:	00f70663          	beq	a4,a5,80005322 <virtual_instruction_2+0x7e>
    8000531a:	00028597          	auipc	a1,0x28
    8000531e:	06e58593          	addi	a1,a1,110 # 8002d388 <__func__.0+0x2d0>
    80005322:	00028517          	auipc	a0,0x28
    80005326:	0a650513          	addi	a0,a0,166 # 8002d3c8 <__func__.0+0x310>
    8000532a:	32d250ef          	jal	8002ae56 <printf>
    8000532e:	0004f797          	auipc	a5,0x4f
    80005332:	ce37c783          	lbu	a5,-797(a5) # 80054011 <excpt+0x1>
    80005336:	c789                	beqz	a5,80005340 <virtual_instruction_2+0x9c>
    80005338:	6498                	ld	a4,8(s1)
    8000533a:	47d9                	li	a5,22
    8000533c:	00f70c63          	beq	a4,a5,80005354 <virtual_instruction_2+0xb0>
    80005340:	00028517          	auipc	a0,0x28
    80005344:	09050513          	addi	a0,a0,144 # 8002d3d0 <__func__.0+0x318>
    80005348:	30f250ef          	jal	8002ae56 <printf>
    8000534c:	02900513          	li	a0,41
    80005350:	7f4240ef          	jal	80029b44 <putchar>
    80005354:	4529                	li	a0,10
    80005356:	7ee240ef          	jal	80029b44 <putchar>
    8000535a:	0004f797          	auipc	a5,0x4f
    8000535e:	cb77c783          	lbu	a5,-841(a5) # 80054011 <excpt+0x1>
    80005362:	4401                	li	s0,0
    80005364:	c789                	beqz	a5,8000536e <virtual_instruction_2+0xca>
    80005366:	6480                	ld	s0,8(s1)
    80005368:	1429                	addi	s0,s0,-22
    8000536a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8000536e:	4509                	li	a0,2
    80005370:	b99fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005374:	a99fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005378:	37ab77b7          	lui	a5,0x37ab7
    8000537c:	078a                	slli	a5,a5,0x2
    8000537e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005382:	4701                	li	a4,0
    80005384:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005388:	08200593          	li	a1,130
    8000538c:	00029617          	auipc	a2,0x29
    80005390:	e2460613          	addi	a2,a2,-476 # 8002e1b0 <__func__.0+0x10f8>
    80005394:	00028517          	auipc	a0,0x28
    80005398:	01c50513          	addi	a0,a0,28 # 8002d3b0 <__func__.0+0x2f8>
    8000539c:	2bb250ef          	jal	8002ae56 <printf>
    800053a0:	0004f797          	auipc	a5,0x4f
    800053a4:	c717c783          	lbu	a5,-911(a5) # 80054011 <excpt+0x1>
    800053a8:	00028597          	auipc	a1,0x28
    800053ac:	fe058593          	addi	a1,a1,-32 # 8002d388 <__func__.0+0x2d0>
    800053b0:	cf89                	beqz	a5,800053ca <virtual_instruction_2+0x126>
    800053b2:	6498                	ld	a4,8(s1)
    800053b4:	47d9                	li	a5,22
    800053b6:	00028597          	auipc	a1,0x28
    800053ba:	fc258593          	addi	a1,a1,-62 # 8002d378 <__func__.0+0x2c0>
    800053be:	00f70663          	beq	a4,a5,800053ca <virtual_instruction_2+0x126>
    800053c2:	00028597          	auipc	a1,0x28
    800053c6:	fc658593          	addi	a1,a1,-58 # 8002d388 <__func__.0+0x2d0>
    800053ca:	00028517          	auipc	a0,0x28
    800053ce:	ffe50513          	addi	a0,a0,-2 # 8002d3c8 <__func__.0+0x310>
    800053d2:	285250ef          	jal	8002ae56 <printf>
    800053d6:	0004f797          	auipc	a5,0x4f
    800053da:	c3b7c783          	lbu	a5,-965(a5) # 80054011 <excpt+0x1>
    800053de:	c789                	beqz	a5,800053e8 <virtual_instruction_2+0x144>
    800053e0:	6498                	ld	a4,8(s1)
    800053e2:	47d9                	li	a5,22
    800053e4:	00f70c63          	beq	a4,a5,800053fc <virtual_instruction_2+0x158>
    800053e8:	00028517          	auipc	a0,0x28
    800053ec:	fe850513          	addi	a0,a0,-24 # 8002d3d0 <__func__.0+0x318>
    800053f0:	267250ef          	jal	8002ae56 <printf>
    800053f4:	02900513          	li	a0,41
    800053f8:	74c240ef          	jal	80029b44 <putchar>
    800053fc:	4529                	li	a0,10
    800053fe:	746240ef          	jal	80029b44 <putchar>
    80005402:	c015                	beqz	s0,80005426 <virtual_instruction_2+0x182>
    80005404:	0004f417          	auipc	s0,0x4f
    80005408:	c0d44403          	lbu	s0,-1011(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000540c:	00028597          	auipc	a1,0x28
    80005410:	f7c58593          	addi	a1,a1,-132 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005414:	cc11                	beqz	s0,80005430 <virtual_instruction_2+0x18c>
    80005416:	6498                	ld	a4,8(s1)
    80005418:	47d9                	li	a5,22
    TEST_END();
    8000541a:	00028597          	auipc	a1,0x28
    8000541e:	f5e58593          	addi	a1,a1,-162 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005422:	00f70763          	beq	a4,a5,80005430 <virtual_instruction_2+0x18c>
    80005426:	4401                	li	s0,0
    TEST_END();
    80005428:	00028597          	auipc	a1,0x28
    8000542c:	f6058593          	addi	a1,a1,-160 # 8002d388 <__func__.0+0x2d0>
    80005430:	00028517          	auipc	a0,0x28
    80005434:	00050513          	mv	a0,a0
    80005438:	21f250ef          	jal	8002ae56 <printf>
    8000543c:	4511                	li	a0,4
    8000543e:	acbfb0ef          	jal	80000f08 <goto_priv>
    80005442:	be2fc0ef          	jal	80001824 <reset_state>

}
    80005446:	70a2                	ld	ra,40(sp)
    80005448:	8522                	mv	a0,s0
    8000544a:	7402                	ld	s0,32(sp)
    8000544c:	64e2                	ld	s1,24(sp)
    8000544e:	6145                	addi	sp,sp,48
    80005450:	8082                	ret

0000000080005452 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    80005452:	1101                	addi	sp,sp,-32

    TEST_START();
    80005454:	00026597          	auipc	a1,0x26
    80005458:	1b458593          	addi	a1,a1,436 # 8002b608 <__func__.9>
    8000545c:	00028517          	auipc	a0,0x28
    80005460:	f3c50513          	addi	a0,a0,-196 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    80005464:	ec06                	sd	ra,24(sp)
    80005466:	e822                	sd	s0,16(sp)
    80005468:	e426                	sd	s1,8(sp)
    TEST_START();
    8000546a:	1ed250ef          	jal	8002ae56 <printf>
    8000546e:	4529                	li	a0,10
    80005470:	6d4240ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80005474:	4511                	li	a0,4
    80005476:	a93fb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    8000547a:	004007b7          	lui	a5,0x400
    8000547e:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005482:	4509                	li	a0,2
    80005484:	a85fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005488:	985fb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_SRET();
    8000548c:	00000297          	auipc	t0,0x0
    80005490:	01028293          	addi	t0,t0,16 # 8000549c <virtual_instruction_3+0x4a>
    80005494:	14129073          	csrw	sepc,t0
    80005498:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    8000549c:	08200593          	li	a1,130
    800054a0:	00029617          	auipc	a2,0x29
    800054a4:	d4060613          	addi	a2,a2,-704 # 8002e1e0 <__func__.0+0x1128>
    800054a8:	00028517          	auipc	a0,0x28
    800054ac:	f0850513          	addi	a0,a0,-248 # 8002d3b0 <__func__.0+0x2f8>
    800054b0:	1a7250ef          	jal	8002ae56 <printf>
    800054b4:	0004f797          	auipc	a5,0x4f
    800054b8:	b5d7c783          	lbu	a5,-1187(a5) # 80054011 <excpt+0x1>
    800054bc:	0004f497          	auipc	s1,0x4f
    800054c0:	b5448493          	addi	s1,s1,-1196 # 80054010 <excpt>
    800054c4:	00028597          	auipc	a1,0x28
    800054c8:	ec458593          	addi	a1,a1,-316 # 8002d388 <__func__.0+0x2d0>
    800054cc:	cf89                	beqz	a5,800054e6 <virtual_instruction_3+0x94>
    800054ce:	6498                	ld	a4,8(s1)
    800054d0:	47d9                	li	a5,22
    800054d2:	00028597          	auipc	a1,0x28
    800054d6:	ea658593          	addi	a1,a1,-346 # 8002d378 <__func__.0+0x2c0>
    800054da:	00f70663          	beq	a4,a5,800054e6 <virtual_instruction_3+0x94>
    800054de:	00028597          	auipc	a1,0x28
    800054e2:	eaa58593          	addi	a1,a1,-342 # 8002d388 <__func__.0+0x2d0>
    800054e6:	00028517          	auipc	a0,0x28
    800054ea:	ee250513          	addi	a0,a0,-286 # 8002d3c8 <__func__.0+0x310>
    800054ee:	169250ef          	jal	8002ae56 <printf>
    800054f2:	0004f797          	auipc	a5,0x4f
    800054f6:	b1f7c783          	lbu	a5,-1249(a5) # 80054011 <excpt+0x1>
    800054fa:	c789                	beqz	a5,80005504 <virtual_instruction_3+0xb2>
    800054fc:	6498                	ld	a4,8(s1)
    800054fe:	47d9                	li	a5,22
    80005500:	00f70c63          	beq	a4,a5,80005518 <virtual_instruction_3+0xc6>
    80005504:	00028517          	auipc	a0,0x28
    80005508:	ecc50513          	addi	a0,a0,-308 # 8002d3d0 <__func__.0+0x318>
    8000550c:	14b250ef          	jal	8002ae56 <printf>
    80005510:	02900513          	li	a0,41
    80005514:	630240ef          	jal	80029b44 <putchar>
    80005518:	4529                	li	a0,10
    8000551a:	62a240ef          	jal	80029b44 <putchar>
    8000551e:	0004f417          	auipc	s0,0x4f
    80005522:	af344403          	lbu	s0,-1293(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80005526:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005528:	c409                	beqz	s0,80005532 <virtual_instruction_3+0xe0>
    8000552a:	6498                	ld	a4,8(s1)
    8000552c:	47d9                	li	a5,22
    8000552e:	02f70e63          	beq	a4,a5,8000556a <virtual_instruction_3+0x118>
    goto_priv(PRIV_M);
    80005532:	9d7fb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80005536:	004007b7          	lui	a5,0x400
    8000553a:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    8000553e:	4401                	li	s0,0

    TEST_END();
    80005540:	00028597          	auipc	a1,0x28
    80005544:	e4858593          	addi	a1,a1,-440 # 8002d388 <__func__.0+0x2d0>
    80005548:	00028517          	auipc	a0,0x28
    8000554c:	ee850513          	addi	a0,a0,-280 # 8002d430 <__func__.0+0x378>
    80005550:	107250ef          	jal	8002ae56 <printf>
    80005554:	4511                	li	a0,4
    80005556:	9b3fb0ef          	jal	80000f08 <goto_priv>
    8000555a:	acafc0ef          	jal	80001824 <reset_state>
}
    8000555e:	60e2                	ld	ra,24(sp)
    80005560:	8522                	mv	a0,s0
    80005562:	6442                	ld	s0,16(sp)
    80005564:	64a2                	ld	s1,8(sp)
    80005566:	6105                	addi	sp,sp,32
    80005568:	8082                	ret
    goto_priv(PRIV_M);
    8000556a:	99ffb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    8000556e:	004007b7          	lui	a5,0x400
    80005572:	6007b073          	csrc	hstatus,a5
    TEST_END();
    80005576:	00028597          	auipc	a1,0x28
    8000557a:	e0258593          	addi	a1,a1,-510 # 8002d378 <__func__.0+0x2c0>
    8000557e:	b7e9                	j	80005548 <virtual_instruction_3+0xf6>

0000000080005580 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80005580:	1101                	addi	sp,sp,-32

    TEST_START();
    80005582:	00026597          	auipc	a1,0x26
    80005586:	09e58593          	addi	a1,a1,158 # 8002b620 <__func__.8>
    8000558a:	00028517          	auipc	a0,0x28
    8000558e:	e0e50513          	addi	a0,a0,-498 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    80005592:	ec06                	sd	ra,24(sp)
    80005594:	e822                	sd	s0,16(sp)
    80005596:	e426                	sd	s1,8(sp)
    TEST_START();
    80005598:	0bf250ef          	jal	8002ae56 <printf>
    8000559c:	4529                	li	a0,10
    8000559e:	5a6240ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    800055a2:	4511                	li	a0,4
    800055a4:	965fb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    800055a8:	001007b7          	lui	a5,0x100
    800055ac:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800055b0:	4509                	li	a0,2
    800055b2:	957fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800055b6:	857fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    800055ba:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    800055be:	08200593          	li	a1,130
    800055c2:	00029617          	auipc	a2,0x29
    800055c6:	c5e60613          	addi	a2,a2,-930 # 8002e220 <__func__.0+0x1168>
    800055ca:	00028517          	auipc	a0,0x28
    800055ce:	de650513          	addi	a0,a0,-538 # 8002d3b0 <__func__.0+0x2f8>
    800055d2:	085250ef          	jal	8002ae56 <printf>
    800055d6:	0004f797          	auipc	a5,0x4f
    800055da:	a3b7c783          	lbu	a5,-1477(a5) # 80054011 <excpt+0x1>
    800055de:	0004f497          	auipc	s1,0x4f
    800055e2:	a3248493          	addi	s1,s1,-1486 # 80054010 <excpt>
    800055e6:	00028597          	auipc	a1,0x28
    800055ea:	da258593          	addi	a1,a1,-606 # 8002d388 <__func__.0+0x2d0>
    800055ee:	cf89                	beqz	a5,80005608 <virtual_instruction_4+0x88>
    800055f0:	6498                	ld	a4,8(s1)
    800055f2:	47d9                	li	a5,22
    800055f4:	00028597          	auipc	a1,0x28
    800055f8:	d8458593          	addi	a1,a1,-636 # 8002d378 <__func__.0+0x2c0>
    800055fc:	00f70663          	beq	a4,a5,80005608 <virtual_instruction_4+0x88>
    80005600:	00028597          	auipc	a1,0x28
    80005604:	d8858593          	addi	a1,a1,-632 # 8002d388 <__func__.0+0x2d0>
    80005608:	00028517          	auipc	a0,0x28
    8000560c:	dc050513          	addi	a0,a0,-576 # 8002d3c8 <__func__.0+0x310>
    80005610:	047250ef          	jal	8002ae56 <printf>
    80005614:	0004f797          	auipc	a5,0x4f
    80005618:	9fd7c783          	lbu	a5,-1539(a5) # 80054011 <excpt+0x1>
    8000561c:	c789                	beqz	a5,80005626 <virtual_instruction_4+0xa6>
    8000561e:	6498                	ld	a4,8(s1)
    80005620:	47d9                	li	a5,22
    80005622:	00f70c63          	beq	a4,a5,8000563a <virtual_instruction_4+0xba>
    80005626:	00028517          	auipc	a0,0x28
    8000562a:	daa50513          	addi	a0,a0,-598 # 8002d3d0 <__func__.0+0x318>
    8000562e:	029250ef          	jal	8002ae56 <printf>
    80005632:	02900513          	li	a0,41
    80005636:	50e240ef          	jal	80029b44 <putchar>
    8000563a:	4529                	li	a0,10
    8000563c:	508240ef          	jal	80029b44 <putchar>
    80005640:	0004f797          	auipc	a5,0x4f
    80005644:	9d17c783          	lbu	a5,-1583(a5) # 80054011 <excpt+0x1>
    80005648:	4401                	li	s0,0
    8000564a:	c789                	beqz	a5,80005654 <virtual_instruction_4+0xd4>
    8000564c:	6480                	ld	s0,8(s1)
    8000564e:	1429                	addi	s0,s0,-22
    80005650:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    80005654:	fb8fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(satp, 0x0);
    80005658:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000565c:	08200593          	li	a1,130
    80005660:	00029617          	auipc	a2,0x29
    80005664:	c0060613          	addi	a2,a2,-1024 # 8002e260 <__func__.0+0x11a8>
    80005668:	00028517          	auipc	a0,0x28
    8000566c:	d4850513          	addi	a0,a0,-696 # 8002d3b0 <__func__.0+0x2f8>
    80005670:	7e6250ef          	jal	8002ae56 <printf>
    80005674:	0004f797          	auipc	a5,0x4f
    80005678:	99d7c783          	lbu	a5,-1635(a5) # 80054011 <excpt+0x1>
    8000567c:	00028597          	auipc	a1,0x28
    80005680:	d0c58593          	addi	a1,a1,-756 # 8002d388 <__func__.0+0x2d0>
    80005684:	cf89                	beqz	a5,8000569e <virtual_instruction_4+0x11e>
    80005686:	6498                	ld	a4,8(s1)
    80005688:	47d9                	li	a5,22
    8000568a:	00028597          	auipc	a1,0x28
    8000568e:	cee58593          	addi	a1,a1,-786 # 8002d378 <__func__.0+0x2c0>
    80005692:	00f70663          	beq	a4,a5,8000569e <virtual_instruction_4+0x11e>
    80005696:	00028597          	auipc	a1,0x28
    8000569a:	cf258593          	addi	a1,a1,-782 # 8002d388 <__func__.0+0x2d0>
    8000569e:	00028517          	auipc	a0,0x28
    800056a2:	d2a50513          	addi	a0,a0,-726 # 8002d3c8 <__func__.0+0x310>
    800056a6:	7b0250ef          	jal	8002ae56 <printf>
    800056aa:	0004f797          	auipc	a5,0x4f
    800056ae:	9677c783          	lbu	a5,-1689(a5) # 80054011 <excpt+0x1>
    800056b2:	c789                	beqz	a5,800056bc <virtual_instruction_4+0x13c>
    800056b4:	6498                	ld	a4,8(s1)
    800056b6:	47d9                	li	a5,22
    800056b8:	00f70c63          	beq	a4,a5,800056d0 <virtual_instruction_4+0x150>
    800056bc:	00028517          	auipc	a0,0x28
    800056c0:	d1450513          	addi	a0,a0,-748 # 8002d3d0 <__func__.0+0x318>
    800056c4:	792250ef          	jal	8002ae56 <printf>
    800056c8:	02900513          	li	a0,41
    800056cc:	478240ef          	jal	80029b44 <putchar>
    800056d0:	4529                	li	a0,10
    800056d2:	472240ef          	jal	80029b44 <putchar>
    800056d6:	c015                	beqz	s0,800056fa <virtual_instruction_4+0x17a>
    800056d8:	0004f417          	auipc	s0,0x4f
    800056dc:	93944403          	lbu	s0,-1735(s0) # 80054011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    800056e0:	00028597          	auipc	a1,0x28
    800056e4:	ca858593          	addi	a1,a1,-856 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800056e8:	cc11                	beqz	s0,80005704 <virtual_instruction_4+0x184>
    800056ea:	6498                	ld	a4,8(s1)
    800056ec:	47d9                	li	a5,22
    TEST_END();
    800056ee:	00028597          	auipc	a1,0x28
    800056f2:	c8a58593          	addi	a1,a1,-886 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800056f6:	00f70763          	beq	a4,a5,80005704 <virtual_instruction_4+0x184>
    800056fa:	4401                	li	s0,0
    TEST_END();
    800056fc:	00028597          	auipc	a1,0x28
    80005700:	c8c58593          	addi	a1,a1,-884 # 8002d388 <__func__.0+0x2d0>
    80005704:	00028517          	auipc	a0,0x28
    80005708:	d2c50513          	addi	a0,a0,-724 # 8002d430 <__func__.0+0x378>
    8000570c:	74a250ef          	jal	8002ae56 <printf>
    80005710:	4511                	li	a0,4
    80005712:	ff6fb0ef          	jal	80000f08 <goto_priv>
    80005716:	90efc0ef          	jal	80001824 <reset_state>
}
    8000571a:	60e2                	ld	ra,24(sp)
    8000571c:	8522                	mv	a0,s0
    8000571e:	6442                	ld	s0,16(sp)
    80005720:	64a2                	ld	s1,8(sp)
    80005722:	6105                	addi	sp,sp,32
    80005724:	8082                	ret

0000000080005726 <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    80005726:	1101                	addi	sp,sp,-32

    TEST_START();
    80005728:	00026597          	auipc	a1,0x26
    8000572c:	f1058593          	addi	a1,a1,-240 # 8002b638 <__func__.7>
    80005730:	00028517          	auipc	a0,0x28
    80005734:	c6850513          	addi	a0,a0,-920 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    80005738:	ec06                	sd	ra,24(sp)
    8000573a:	e822                	sd	s0,16(sp)
    8000573c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000573e:	718250ef          	jal	8002ae56 <printf>
    80005742:	4529                	li	a0,10
    80005744:	400240ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80005748:	4511                	li	a0,4
    8000574a:	fbefb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000574e:	002007b7          	lui	a5,0x200
    80005752:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80005756:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    8000575a:	4509                	li	a0,2
    8000575c:	facfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005760:	eacfb0ef          	jal	80000e0c <test_setup_except_function>
    asm("wfi");
    80005764:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005768:	08200593          	li	a1,130
    8000576c:	00029617          	auipc	a2,0x29
    80005770:	b3c60613          	addi	a2,a2,-1220 # 8002e2a8 <__func__.0+0x11f0>
    80005774:	00028517          	auipc	a0,0x28
    80005778:	c3c50513          	addi	a0,a0,-964 # 8002d3b0 <__func__.0+0x2f8>
    8000577c:	6da250ef          	jal	8002ae56 <printf>
    80005780:	0004f797          	auipc	a5,0x4f
    80005784:	8917c783          	lbu	a5,-1903(a5) # 80054011 <excpt+0x1>
    80005788:	0004f497          	auipc	s1,0x4f
    8000578c:	88848493          	addi	s1,s1,-1912 # 80054010 <excpt>
    80005790:	00028597          	auipc	a1,0x28
    80005794:	bf858593          	addi	a1,a1,-1032 # 8002d388 <__func__.0+0x2d0>
    80005798:	cf89                	beqz	a5,800057b2 <virtual_instruction_5+0x8c>
    8000579a:	6498                	ld	a4,8(s1)
    8000579c:	47d9                	li	a5,22
    8000579e:	00028597          	auipc	a1,0x28
    800057a2:	bda58593          	addi	a1,a1,-1062 # 8002d378 <__func__.0+0x2c0>
    800057a6:	00f70663          	beq	a4,a5,800057b2 <virtual_instruction_5+0x8c>
    800057aa:	00028597          	auipc	a1,0x28
    800057ae:	bde58593          	addi	a1,a1,-1058 # 8002d388 <__func__.0+0x2d0>
    800057b2:	00028517          	auipc	a0,0x28
    800057b6:	c1650513          	addi	a0,a0,-1002 # 8002d3c8 <__func__.0+0x310>
    800057ba:	69c250ef          	jal	8002ae56 <printf>
    800057be:	0004f797          	auipc	a5,0x4f
    800057c2:	8537c783          	lbu	a5,-1965(a5) # 80054011 <excpt+0x1>
    800057c6:	c789                	beqz	a5,800057d0 <virtual_instruction_5+0xaa>
    800057c8:	6498                	ld	a4,8(s1)
    800057ca:	47d9                	li	a5,22
    800057cc:	00f70c63          	beq	a4,a5,800057e4 <virtual_instruction_5+0xbe>
    800057d0:	00028517          	auipc	a0,0x28
    800057d4:	c0050513          	addi	a0,a0,-1024 # 8002d3d0 <__func__.0+0x318>
    800057d8:	67e250ef          	jal	8002ae56 <printf>
    800057dc:	02900513          	li	a0,41
    800057e0:	364240ef          	jal	80029b44 <putchar>
    800057e4:	4529                	li	a0,10
    800057e6:	35e240ef          	jal	80029b44 <putchar>
    800057ea:	0004f417          	auipc	s0,0x4f
    800057ee:	82744403          	lbu	s0,-2009(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    800057f2:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800057f4:	c409                	beqz	s0,800057fe <virtual_instruction_5+0xd8>
    800057f6:	6498                	ld	a4,8(s1)
    800057f8:	47d9                	li	a5,22
    800057fa:	04f70263          	beq	a4,a5,8000583e <virtual_instruction_5+0x118>
    goto_priv(PRIV_M);
    800057fe:	f0afb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    80005802:	343025f3          	csrr	a1,mtval
    80005806:	00029517          	auipc	a0,0x29
    8000580a:	aea50513          	addi	a0,a0,-1302 # 8002e2f0 <__func__.0+0x1238>
    8000580e:	648250ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005812:	4401                	li	s0,0

    TEST_END();
    80005814:	00028597          	auipc	a1,0x28
    80005818:	b7458593          	addi	a1,a1,-1164 # 8002d388 <__func__.0+0x2d0>
    8000581c:	00028517          	auipc	a0,0x28
    80005820:	c1450513          	addi	a0,a0,-1004 # 8002d430 <__func__.0+0x378>
    80005824:	632250ef          	jal	8002ae56 <printf>
    80005828:	4511                	li	a0,4
    8000582a:	edefb0ef          	jal	80000f08 <goto_priv>
    8000582e:	ff7fb0ef          	jal	80001824 <reset_state>
}
    80005832:	60e2                	ld	ra,24(sp)
    80005834:	8522                	mv	a0,s0
    80005836:	6442                	ld	s0,16(sp)
    80005838:	64a2                	ld	s1,8(sp)
    8000583a:	6105                	addi	sp,sp,32
    8000583c:	8082                	ret
    goto_priv(PRIV_M);
    8000583e:	ecafb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    80005842:	343025f3          	csrr	a1,mtval
    80005846:	00029517          	auipc	a0,0x29
    8000584a:	aaa50513          	addi	a0,a0,-1366 # 8002e2f0 <__func__.0+0x1238>
    8000584e:	608250ef          	jal	8002ae56 <printf>
    TEST_END();
    80005852:	00028597          	auipc	a1,0x28
    80005856:	b2658593          	addi	a1,a1,-1242 # 8002d378 <__func__.0+0x2c0>
    8000585a:	b7c9                	j	8000581c <virtual_instruction_5+0xf6>

000000008000585c <virtual_instruction_6>:


bool virtual_instruction_6() {
    8000585c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000585e:	00026597          	auipc	a1,0x26
    80005862:	df258593          	addi	a1,a1,-526 # 8002b650 <__func__.6>
    80005866:	00028517          	auipc	a0,0x28
    8000586a:	b3250513          	addi	a0,a0,-1230 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    8000586e:	ec06                	sd	ra,24(sp)
    80005870:	e822                	sd	s0,16(sp)
    80005872:	e426                	sd	s1,8(sp)
    TEST_START();
    80005874:	5e2250ef          	jal	8002ae56 <printf>
    80005878:	4529                	li	a0,10
    8000587a:	2ca240ef          	jal	80029b44 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    8000587e:	4501                	li	a0,0
    80005880:	e88fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005884:	d88fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005888:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    8000588c:	08200593          	li	a1,130
    80005890:	00029617          	auipc	a2,0x29
    80005894:	a6860613          	addi	a2,a2,-1432 # 8002e2f8 <__func__.0+0x1240>
    80005898:	00028517          	auipc	a0,0x28
    8000589c:	b1850513          	addi	a0,a0,-1256 # 8002d3b0 <__func__.0+0x2f8>
    800058a0:	5b6250ef          	jal	8002ae56 <printf>
    800058a4:	0004e797          	auipc	a5,0x4e
    800058a8:	76d7c783          	lbu	a5,1901(a5) # 80054011 <excpt+0x1>
    800058ac:	0004e497          	auipc	s1,0x4e
    800058b0:	76448493          	addi	s1,s1,1892 # 80054010 <excpt>
    800058b4:	00028597          	auipc	a1,0x28
    800058b8:	ad458593          	addi	a1,a1,-1324 # 8002d388 <__func__.0+0x2d0>
    800058bc:	cf89                	beqz	a5,800058d6 <virtual_instruction_6+0x7a>
    800058be:	6498                	ld	a4,8(s1)
    800058c0:	47d9                	li	a5,22
    800058c2:	00028597          	auipc	a1,0x28
    800058c6:	ab658593          	addi	a1,a1,-1354 # 8002d378 <__func__.0+0x2c0>
    800058ca:	00f70663          	beq	a4,a5,800058d6 <virtual_instruction_6+0x7a>
    800058ce:	00028597          	auipc	a1,0x28
    800058d2:	aba58593          	addi	a1,a1,-1350 # 8002d388 <__func__.0+0x2d0>
    800058d6:	00028517          	auipc	a0,0x28
    800058da:	af250513          	addi	a0,a0,-1294 # 8002d3c8 <__func__.0+0x310>
    800058de:	578250ef          	jal	8002ae56 <printf>
    800058e2:	0004e797          	auipc	a5,0x4e
    800058e6:	72f7c783          	lbu	a5,1839(a5) # 80054011 <excpt+0x1>
    800058ea:	c789                	beqz	a5,800058f4 <virtual_instruction_6+0x98>
    800058ec:	6498                	ld	a4,8(s1)
    800058ee:	47d9                	li	a5,22
    800058f0:	00f70c63          	beq	a4,a5,80005908 <virtual_instruction_6+0xac>
    800058f4:	00028517          	auipc	a0,0x28
    800058f8:	adc50513          	addi	a0,a0,-1316 # 8002d3d0 <__func__.0+0x318>
    800058fc:	55a250ef          	jal	8002ae56 <printf>
    80005900:	02900513          	li	a0,41
    80005904:	240240ef          	jal	80029b44 <putchar>
    80005908:	4529                	li	a0,10
    8000590a:	23a240ef          	jal	80029b44 <putchar>
    8000590e:	0004e797          	auipc	a5,0x4e
    80005912:	7037c783          	lbu	a5,1795(a5) # 80054011 <excpt+0x1>
    80005916:	4401                	li	s0,0
    80005918:	c789                	beqz	a5,80005922 <virtual_instruction_6+0xc6>
    8000591a:	6480                	ld	s0,8(s1)
    8000591c:	1429                	addi	s0,s0,-22
    8000591e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    80005922:	4501                	li	a0,0
    80005924:	de4fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005928:	ce4fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000592c:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005930:	08200593          	li	a1,130
    80005934:	00029617          	auipc	a2,0x29
    80005938:	a0460613          	addi	a2,a2,-1532 # 8002e338 <__func__.0+0x1280>
    8000593c:	00028517          	auipc	a0,0x28
    80005940:	a7450513          	addi	a0,a0,-1420 # 8002d3b0 <__func__.0+0x2f8>
    80005944:	512250ef          	jal	8002ae56 <printf>
    80005948:	0004e797          	auipc	a5,0x4e
    8000594c:	6c97c783          	lbu	a5,1737(a5) # 80054011 <excpt+0x1>
    80005950:	00028597          	auipc	a1,0x28
    80005954:	a3858593          	addi	a1,a1,-1480 # 8002d388 <__func__.0+0x2d0>
    80005958:	cf89                	beqz	a5,80005972 <virtual_instruction_6+0x116>
    8000595a:	6498                	ld	a4,8(s1)
    8000595c:	47d9                	li	a5,22
    8000595e:	00028597          	auipc	a1,0x28
    80005962:	a1a58593          	addi	a1,a1,-1510 # 8002d378 <__func__.0+0x2c0>
    80005966:	00f70663          	beq	a4,a5,80005972 <virtual_instruction_6+0x116>
    8000596a:	00028597          	auipc	a1,0x28
    8000596e:	a1e58593          	addi	a1,a1,-1506 # 8002d388 <__func__.0+0x2d0>
    80005972:	00028517          	auipc	a0,0x28
    80005976:	a5650513          	addi	a0,a0,-1450 # 8002d3c8 <__func__.0+0x310>
    8000597a:	4dc250ef          	jal	8002ae56 <printf>
    8000597e:	0004e797          	auipc	a5,0x4e
    80005982:	6937c783          	lbu	a5,1683(a5) # 80054011 <excpt+0x1>
    80005986:	c789                	beqz	a5,80005990 <virtual_instruction_6+0x134>
    80005988:	6498                	ld	a4,8(s1)
    8000598a:	47d9                	li	a5,22
    8000598c:	00f70c63          	beq	a4,a5,800059a4 <virtual_instruction_6+0x148>
    80005990:	00028517          	auipc	a0,0x28
    80005994:	a4050513          	addi	a0,a0,-1472 # 8002d3d0 <__func__.0+0x318>
    80005998:	4be250ef          	jal	8002ae56 <printf>
    8000599c:	02900513          	li	a0,41
    800059a0:	1a4240ef          	jal	80029b44 <putchar>
    800059a4:	4529                	li	a0,10
    800059a6:	19e240ef          	jal	80029b44 <putchar>
    800059aa:	c801                	beqz	s0,800059ba <virtual_instruction_6+0x15e>
    800059ac:	0004e797          	auipc	a5,0x4e
    800059b0:	6657c783          	lbu	a5,1637(a5) # 80054011 <excpt+0x1>
    800059b4:	4401                	li	s0,0
    800059b6:	0c079e63          	bnez	a5,80005a92 <virtual_instruction_6+0x236>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    800059ba:	4501                	li	a0,0
    800059bc:	d4cfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800059c0:	c4cfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800059c4:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059c8:	08200593          	li	a1,130
    800059cc:	00029617          	auipc	a2,0x29
    800059d0:	9ac60613          	addi	a2,a2,-1620 # 8002e378 <__func__.0+0x12c0>
    800059d4:	00028517          	auipc	a0,0x28
    800059d8:	9dc50513          	addi	a0,a0,-1572 # 8002d3b0 <__func__.0+0x2f8>
    800059dc:	47a250ef          	jal	8002ae56 <printf>
    800059e0:	0004e797          	auipc	a5,0x4e
    800059e4:	6317c783          	lbu	a5,1585(a5) # 80054011 <excpt+0x1>
    800059e8:	00028597          	auipc	a1,0x28
    800059ec:	9a058593          	addi	a1,a1,-1632 # 8002d388 <__func__.0+0x2d0>
    800059f0:	cf89                	beqz	a5,80005a0a <virtual_instruction_6+0x1ae>
    800059f2:	6498                	ld	a4,8(s1)
    800059f4:	47d9                	li	a5,22
    800059f6:	00028597          	auipc	a1,0x28
    800059fa:	98258593          	addi	a1,a1,-1662 # 8002d378 <__func__.0+0x2c0>
    800059fe:	00f70663          	beq	a4,a5,80005a0a <virtual_instruction_6+0x1ae>
    80005a02:	00028597          	auipc	a1,0x28
    80005a06:	98658593          	addi	a1,a1,-1658 # 8002d388 <__func__.0+0x2d0>
    80005a0a:	00028517          	auipc	a0,0x28
    80005a0e:	9be50513          	addi	a0,a0,-1602 # 8002d3c8 <__func__.0+0x310>
    80005a12:	444250ef          	jal	8002ae56 <printf>
    80005a16:	0004e797          	auipc	a5,0x4e
    80005a1a:	5fb7c783          	lbu	a5,1531(a5) # 80054011 <excpt+0x1>
    80005a1e:	c789                	beqz	a5,80005a28 <virtual_instruction_6+0x1cc>
    80005a20:	6498                	ld	a4,8(s1)
    80005a22:	47d9                	li	a5,22
    80005a24:	00f70c63          	beq	a4,a5,80005a3c <virtual_instruction_6+0x1e0>
    80005a28:	00028517          	auipc	a0,0x28
    80005a2c:	9a850513          	addi	a0,a0,-1624 # 8002d3d0 <__func__.0+0x318>
    80005a30:	426250ef          	jal	8002ae56 <printf>
    80005a34:	02900513          	li	a0,41
    80005a38:	10c240ef          	jal	80029b44 <putchar>
    80005a3c:	4529                	li	a0,10
    80005a3e:	106240ef          	jal	80029b44 <putchar>
    80005a42:	c015                	beqz	s0,80005a66 <virtual_instruction_6+0x20a>
    80005a44:	0004e417          	auipc	s0,0x4e
    80005a48:	5cd44403          	lbu	s0,1485(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005a4c:	00028597          	auipc	a1,0x28
    80005a50:	93c58593          	addi	a1,a1,-1732 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a54:	cc11                	beqz	s0,80005a70 <virtual_instruction_6+0x214>
    80005a56:	6498                	ld	a4,8(s1)
    80005a58:	47d9                	li	a5,22
    TEST_END();
    80005a5a:	00028597          	auipc	a1,0x28
    80005a5e:	91e58593          	addi	a1,a1,-1762 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a62:	00f70763          	beq	a4,a5,80005a70 <virtual_instruction_6+0x214>
    80005a66:	4401                	li	s0,0
    TEST_END();
    80005a68:	00028597          	auipc	a1,0x28
    80005a6c:	92058593          	addi	a1,a1,-1760 # 8002d388 <__func__.0+0x2d0>
    80005a70:	00028517          	auipc	a0,0x28
    80005a74:	9c050513          	addi	a0,a0,-1600 # 8002d430 <__func__.0+0x378>
    80005a78:	3de250ef          	jal	8002ae56 <printf>
    80005a7c:	4511                	li	a0,4
    80005a7e:	c8afb0ef          	jal	80000f08 <goto_priv>
    80005a82:	da3fb0ef          	jal	80001824 <reset_state>
}
    80005a86:	60e2                	ld	ra,24(sp)
    80005a88:	8522                	mv	a0,s0
    80005a8a:	6442                	ld	s0,16(sp)
    80005a8c:	64a2                	ld	s1,8(sp)
    80005a8e:	6105                	addi	sp,sp,32
    80005a90:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005a92:	6480                	ld	s0,8(s1)
    80005a94:	1429                	addi	s0,s0,-22
    80005a96:	00143413          	seqz	s0,s0
    80005a9a:	b705                	j	800059ba <virtual_instruction_6+0x15e>

0000000080005a9c <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005a9c:	1101                	addi	sp,sp,-32

    TEST_START();
    80005a9e:	00026597          	auipc	a1,0x26
    80005aa2:	bca58593          	addi	a1,a1,-1078 # 8002b668 <__func__.5>
    80005aa6:	00028517          	auipc	a0,0x28
    80005aaa:	8f250513          	addi	a0,a0,-1806 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    80005aae:	ec06                	sd	ra,24(sp)
    80005ab0:	e822                	sd	s0,16(sp)
    80005ab2:	e426                	sd	s1,8(sp)
    TEST_START();
    80005ab4:	3a2250ef          	jal	8002ae56 <printf>
    80005ab8:	4529                	li	a0,10
    80005aba:	08a240ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_VU);
    80005abe:	4501                	li	a0,0
    80005ac0:	c48fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ac4:	b48fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005ac8:	4781                	li	a5,0
    80005aca:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005ace:	08200593          	li	a1,130
    80005ad2:	00029617          	auipc	a2,0x29
    80005ad6:	8f660613          	addi	a2,a2,-1802 # 8002e3c8 <__func__.0+0x1310>
    80005ada:	00028517          	auipc	a0,0x28
    80005ade:	8d650513          	addi	a0,a0,-1834 # 8002d3b0 <__func__.0+0x2f8>
    80005ae2:	374250ef          	jal	8002ae56 <printf>
    80005ae6:	0004e797          	auipc	a5,0x4e
    80005aea:	52b7c783          	lbu	a5,1323(a5) # 80054011 <excpt+0x1>
    80005aee:	0004e497          	auipc	s1,0x4e
    80005af2:	52248493          	addi	s1,s1,1314 # 80054010 <excpt>
    80005af6:	00028597          	auipc	a1,0x28
    80005afa:	89258593          	addi	a1,a1,-1902 # 8002d388 <__func__.0+0x2d0>
    80005afe:	cf89                	beqz	a5,80005b18 <virtual_instruction_7+0x7c>
    80005b00:	6498                	ld	a4,8(s1)
    80005b02:	47d9                	li	a5,22
    80005b04:	00028597          	auipc	a1,0x28
    80005b08:	87458593          	addi	a1,a1,-1932 # 8002d378 <__func__.0+0x2c0>
    80005b0c:	00f70663          	beq	a4,a5,80005b18 <virtual_instruction_7+0x7c>
    80005b10:	00028597          	auipc	a1,0x28
    80005b14:	87858593          	addi	a1,a1,-1928 # 8002d388 <__func__.0+0x2d0>
    80005b18:	00028517          	auipc	a0,0x28
    80005b1c:	8b050513          	addi	a0,a0,-1872 # 8002d3c8 <__func__.0+0x310>
    80005b20:	336250ef          	jal	8002ae56 <printf>
    80005b24:	0004e797          	auipc	a5,0x4e
    80005b28:	4ed7c783          	lbu	a5,1261(a5) # 80054011 <excpt+0x1>
    80005b2c:	c789                	beqz	a5,80005b36 <virtual_instruction_7+0x9a>
    80005b2e:	6498                	ld	a4,8(s1)
    80005b30:	47d9                	li	a5,22
    80005b32:	00f70c63          	beq	a4,a5,80005b4a <virtual_instruction_7+0xae>
    80005b36:	00028517          	auipc	a0,0x28
    80005b3a:	89a50513          	addi	a0,a0,-1894 # 8002d3d0 <__func__.0+0x318>
    80005b3e:	318250ef          	jal	8002ae56 <printf>
    80005b42:	02900513          	li	a0,41
    80005b46:	7ff230ef          	jal	80029b44 <putchar>
    80005b4a:	4529                	li	a0,10
    80005b4c:	7f9230ef          	jal	80029b44 <putchar>
    80005b50:	0004e797          	auipc	a5,0x4e
    80005b54:	4c17c783          	lbu	a5,1217(a5) # 80054011 <excpt+0x1>
    80005b58:	4401                	li	s0,0
    80005b5a:	c789                	beqz	a5,80005b64 <virtual_instruction_7+0xc8>
    80005b5c:	6480                	ld	s0,8(s1)
    80005b5e:	1429                	addi	s0,s0,-22
    80005b60:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b64:	4501                	li	a0,0
    80005b66:	ba2fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b6a:	aa2fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005b6e:	4781                	li	a5,0
    80005b70:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005b74:	08200593          	li	a1,130
    80005b78:	00029617          	auipc	a2,0x29
    80005b7c:	88060613          	addi	a2,a2,-1920 # 8002e3f8 <__func__.0+0x1340>
    80005b80:	00028517          	auipc	a0,0x28
    80005b84:	83050513          	addi	a0,a0,-2000 # 8002d3b0 <__func__.0+0x2f8>
    80005b88:	2ce250ef          	jal	8002ae56 <printf>
    80005b8c:	0004e797          	auipc	a5,0x4e
    80005b90:	4857c783          	lbu	a5,1157(a5) # 80054011 <excpt+0x1>
    80005b94:	00027597          	auipc	a1,0x27
    80005b98:	7f458593          	addi	a1,a1,2036 # 8002d388 <__func__.0+0x2d0>
    80005b9c:	cf89                	beqz	a5,80005bb6 <virtual_instruction_7+0x11a>
    80005b9e:	6498                	ld	a4,8(s1)
    80005ba0:	47d9                	li	a5,22
    80005ba2:	00027597          	auipc	a1,0x27
    80005ba6:	7d658593          	addi	a1,a1,2006 # 8002d378 <__func__.0+0x2c0>
    80005baa:	00f70663          	beq	a4,a5,80005bb6 <virtual_instruction_7+0x11a>
    80005bae:	00027597          	auipc	a1,0x27
    80005bb2:	7da58593          	addi	a1,a1,2010 # 8002d388 <__func__.0+0x2d0>
    80005bb6:	00028517          	auipc	a0,0x28
    80005bba:	81250513          	addi	a0,a0,-2030 # 8002d3c8 <__func__.0+0x310>
    80005bbe:	298250ef          	jal	8002ae56 <printf>
    80005bc2:	0004e797          	auipc	a5,0x4e
    80005bc6:	44f7c783          	lbu	a5,1103(a5) # 80054011 <excpt+0x1>
    80005bca:	c789                	beqz	a5,80005bd4 <virtual_instruction_7+0x138>
    80005bcc:	6498                	ld	a4,8(s1)
    80005bce:	47d9                	li	a5,22
    80005bd0:	00f70c63          	beq	a4,a5,80005be8 <virtual_instruction_7+0x14c>
    80005bd4:	00027517          	auipc	a0,0x27
    80005bd8:	7fc50513          	addi	a0,a0,2044 # 8002d3d0 <__func__.0+0x318>
    80005bdc:	27a250ef          	jal	8002ae56 <printf>
    80005be0:	02900513          	li	a0,41
    80005be4:	761230ef          	jal	80029b44 <putchar>
    80005be8:	4529                	li	a0,10
    80005bea:	75b230ef          	jal	80029b44 <putchar>
    80005bee:	c801                	beqz	s0,80005bfe <virtual_instruction_7+0x162>
    80005bf0:	0004e797          	auipc	a5,0x4e
    80005bf4:	4217c783          	lbu	a5,1057(a5) # 80054011 <excpt+0x1>
    80005bf8:	4401                	li	s0,0
    80005bfa:	4c079d63          	bnez	a5,800060d4 <virtual_instruction_7+0x638>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005bfe:	4501                	li	a0,0
    80005c00:	b08fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c04:	a08fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005c08:	4781                	li	a5,0
    80005c0a:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005c0e:	08200593          	li	a1,130
    80005c12:	00029617          	auipc	a2,0x29
    80005c16:	81660613          	addi	a2,a2,-2026 # 8002e428 <__func__.0+0x1370>
    80005c1a:	00027517          	auipc	a0,0x27
    80005c1e:	79650513          	addi	a0,a0,1942 # 8002d3b0 <__func__.0+0x2f8>
    80005c22:	234250ef          	jal	8002ae56 <printf>
    80005c26:	0004e797          	auipc	a5,0x4e
    80005c2a:	3eb7c783          	lbu	a5,1003(a5) # 80054011 <excpt+0x1>
    80005c2e:	00027597          	auipc	a1,0x27
    80005c32:	75a58593          	addi	a1,a1,1882 # 8002d388 <__func__.0+0x2d0>
    80005c36:	cf89                	beqz	a5,80005c50 <virtual_instruction_7+0x1b4>
    80005c38:	6498                	ld	a4,8(s1)
    80005c3a:	47d9                	li	a5,22
    80005c3c:	00027597          	auipc	a1,0x27
    80005c40:	73c58593          	addi	a1,a1,1852 # 8002d378 <__func__.0+0x2c0>
    80005c44:	00f70663          	beq	a4,a5,80005c50 <virtual_instruction_7+0x1b4>
    80005c48:	00027597          	auipc	a1,0x27
    80005c4c:	74058593          	addi	a1,a1,1856 # 8002d388 <__func__.0+0x2d0>
    80005c50:	00027517          	auipc	a0,0x27
    80005c54:	77850513          	addi	a0,a0,1912 # 8002d3c8 <__func__.0+0x310>
    80005c58:	1fe250ef          	jal	8002ae56 <printf>
    80005c5c:	0004e797          	auipc	a5,0x4e
    80005c60:	3b57c783          	lbu	a5,949(a5) # 80054011 <excpt+0x1>
    80005c64:	c789                	beqz	a5,80005c6e <virtual_instruction_7+0x1d2>
    80005c66:	6498                	ld	a4,8(s1)
    80005c68:	47d9                	li	a5,22
    80005c6a:	00f70c63          	beq	a4,a5,80005c82 <virtual_instruction_7+0x1e6>
    80005c6e:	00027517          	auipc	a0,0x27
    80005c72:	76250513          	addi	a0,a0,1890 # 8002d3d0 <__func__.0+0x318>
    80005c76:	1e0250ef          	jal	8002ae56 <printf>
    80005c7a:	02900513          	li	a0,41
    80005c7e:	6c7230ef          	jal	80029b44 <putchar>
    80005c82:	4529                	li	a0,10
    80005c84:	6c1230ef          	jal	80029b44 <putchar>
    80005c88:	c801                	beqz	s0,80005c98 <virtual_instruction_7+0x1fc>
    80005c8a:	0004e797          	auipc	a5,0x4e
    80005c8e:	3877c783          	lbu	a5,903(a5) # 80054011 <excpt+0x1>
    80005c92:	4401                	li	s0,0
    80005c94:	44079a63          	bnez	a5,800060e8 <virtual_instruction_7+0x64c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c98:	4501                	li	a0,0
    80005c9a:	a6efb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c9e:	96efb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005ca2:	4781                	li	a5,0
    80005ca4:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005ca8:	08200593          	li	a1,130
    80005cac:	00028617          	auipc	a2,0x28
    80005cb0:	7ac60613          	addi	a2,a2,1964 # 8002e458 <__func__.0+0x13a0>
    80005cb4:	00027517          	auipc	a0,0x27
    80005cb8:	6fc50513          	addi	a0,a0,1788 # 8002d3b0 <__func__.0+0x2f8>
    80005cbc:	19a250ef          	jal	8002ae56 <printf>
    80005cc0:	0004e797          	auipc	a5,0x4e
    80005cc4:	3517c783          	lbu	a5,849(a5) # 80054011 <excpt+0x1>
    80005cc8:	00027597          	auipc	a1,0x27
    80005ccc:	6c058593          	addi	a1,a1,1728 # 8002d388 <__func__.0+0x2d0>
    80005cd0:	cf89                	beqz	a5,80005cea <virtual_instruction_7+0x24e>
    80005cd2:	6498                	ld	a4,8(s1)
    80005cd4:	47d9                	li	a5,22
    80005cd6:	00027597          	auipc	a1,0x27
    80005cda:	6a258593          	addi	a1,a1,1698 # 8002d378 <__func__.0+0x2c0>
    80005cde:	00f70663          	beq	a4,a5,80005cea <virtual_instruction_7+0x24e>
    80005ce2:	00027597          	auipc	a1,0x27
    80005ce6:	6a658593          	addi	a1,a1,1702 # 8002d388 <__func__.0+0x2d0>
    80005cea:	00027517          	auipc	a0,0x27
    80005cee:	6de50513          	addi	a0,a0,1758 # 8002d3c8 <__func__.0+0x310>
    80005cf2:	164250ef          	jal	8002ae56 <printf>
    80005cf6:	0004e797          	auipc	a5,0x4e
    80005cfa:	31b7c783          	lbu	a5,795(a5) # 80054011 <excpt+0x1>
    80005cfe:	c789                	beqz	a5,80005d08 <virtual_instruction_7+0x26c>
    80005d00:	6498                	ld	a4,8(s1)
    80005d02:	47d9                	li	a5,22
    80005d04:	00f70c63          	beq	a4,a5,80005d1c <virtual_instruction_7+0x280>
    80005d08:	00027517          	auipc	a0,0x27
    80005d0c:	6c850513          	addi	a0,a0,1736 # 8002d3d0 <__func__.0+0x318>
    80005d10:	146250ef          	jal	8002ae56 <printf>
    80005d14:	02900513          	li	a0,41
    80005d18:	62d230ef          	jal	80029b44 <putchar>
    80005d1c:	4529                	li	a0,10
    80005d1e:	627230ef          	jal	80029b44 <putchar>
    80005d22:	c801                	beqz	s0,80005d32 <virtual_instruction_7+0x296>
    80005d24:	0004e797          	auipc	a5,0x4e
    80005d28:	2ed7c783          	lbu	a5,749(a5) # 80054011 <excpt+0x1>
    80005d2c:	4401                	li	s0,0
    80005d2e:	3a079863          	bnez	a5,800060de <virtual_instruction_7+0x642>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d32:	4501                	li	a0,0
    80005d34:	9d4fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d38:	8d4fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005d3c:	4781                	li	a5,0
    80005d3e:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005d42:	08200593          	li	a1,130
    80005d46:	00028617          	auipc	a2,0x28
    80005d4a:	74260613          	addi	a2,a2,1858 # 8002e488 <__func__.0+0x13d0>
    80005d4e:	00027517          	auipc	a0,0x27
    80005d52:	66250513          	addi	a0,a0,1634 # 8002d3b0 <__func__.0+0x2f8>
    80005d56:	100250ef          	jal	8002ae56 <printf>
    80005d5a:	0004e797          	auipc	a5,0x4e
    80005d5e:	2b77c783          	lbu	a5,695(a5) # 80054011 <excpt+0x1>
    80005d62:	00027597          	auipc	a1,0x27
    80005d66:	62658593          	addi	a1,a1,1574 # 8002d388 <__func__.0+0x2d0>
    80005d6a:	cf89                	beqz	a5,80005d84 <virtual_instruction_7+0x2e8>
    80005d6c:	6498                	ld	a4,8(s1)
    80005d6e:	47d9                	li	a5,22
    80005d70:	00027597          	auipc	a1,0x27
    80005d74:	60858593          	addi	a1,a1,1544 # 8002d378 <__func__.0+0x2c0>
    80005d78:	00f70663          	beq	a4,a5,80005d84 <virtual_instruction_7+0x2e8>
    80005d7c:	00027597          	auipc	a1,0x27
    80005d80:	60c58593          	addi	a1,a1,1548 # 8002d388 <__func__.0+0x2d0>
    80005d84:	00027517          	auipc	a0,0x27
    80005d88:	64450513          	addi	a0,a0,1604 # 8002d3c8 <__func__.0+0x310>
    80005d8c:	0ca250ef          	jal	8002ae56 <printf>
    80005d90:	0004e797          	auipc	a5,0x4e
    80005d94:	2817c783          	lbu	a5,641(a5) # 80054011 <excpt+0x1>
    80005d98:	c789                	beqz	a5,80005da2 <virtual_instruction_7+0x306>
    80005d9a:	6498                	ld	a4,8(s1)
    80005d9c:	47d9                	li	a5,22
    80005d9e:	00f70c63          	beq	a4,a5,80005db6 <virtual_instruction_7+0x31a>
    80005da2:	00027517          	auipc	a0,0x27
    80005da6:	62e50513          	addi	a0,a0,1582 # 8002d3d0 <__func__.0+0x318>
    80005daa:	0ac250ef          	jal	8002ae56 <printf>
    80005dae:	02900513          	li	a0,41
    80005db2:	593230ef          	jal	80029b44 <putchar>
    80005db6:	4529                	li	a0,10
    80005db8:	58d230ef          	jal	80029b44 <putchar>
    80005dbc:	c801                	beqz	s0,80005dcc <virtual_instruction_7+0x330>
    80005dbe:	0004e797          	auipc	a5,0x4e
    80005dc2:	2537c783          	lbu	a5,595(a5) # 80054011 <excpt+0x1>
    80005dc6:	4401                	li	s0,0
    80005dc8:	32079a63          	bnez	a5,800060fc <virtual_instruction_7+0x660>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dcc:	4501                	li	a0,0
    80005dce:	93afb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dd2:	83afb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005dd6:	37ab77b7          	lui	a5,0x37ab7
    80005dda:	078a                	slli	a5,a5,0x2
    80005ddc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005de0:	4701                	li	a4,0
    80005de2:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005de6:	648c                	ld	a1,8(s1)
    80005de8:	00028517          	auipc	a0,0x28
    80005dec:	13850513          	addi	a0,a0,312 # 8002df20 <__func__.0+0xe68>
    80005df0:	066250ef          	jal	8002ae56 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005df4:	08200593          	li	a1,130
    80005df8:	00028617          	auipc	a2,0x28
    80005dfc:	6c060613          	addi	a2,a2,1728 # 8002e4b8 <__func__.0+0x1400>
    80005e00:	00027517          	auipc	a0,0x27
    80005e04:	5b050513          	addi	a0,a0,1456 # 8002d3b0 <__func__.0+0x2f8>
    80005e08:	04e250ef          	jal	8002ae56 <printf>
    80005e0c:	0004e797          	auipc	a5,0x4e
    80005e10:	2057c783          	lbu	a5,517(a5) # 80054011 <excpt+0x1>
    80005e14:	00027597          	auipc	a1,0x27
    80005e18:	57458593          	addi	a1,a1,1396 # 8002d388 <__func__.0+0x2d0>
    80005e1c:	cf89                	beqz	a5,80005e36 <virtual_instruction_7+0x39a>
    80005e1e:	6498                	ld	a4,8(s1)
    80005e20:	47d9                	li	a5,22
    80005e22:	00027597          	auipc	a1,0x27
    80005e26:	55658593          	addi	a1,a1,1366 # 8002d378 <__func__.0+0x2c0>
    80005e2a:	00f70663          	beq	a4,a5,80005e36 <virtual_instruction_7+0x39a>
    80005e2e:	00027597          	auipc	a1,0x27
    80005e32:	55a58593          	addi	a1,a1,1370 # 8002d388 <__func__.0+0x2d0>
    80005e36:	00027517          	auipc	a0,0x27
    80005e3a:	59250513          	addi	a0,a0,1426 # 8002d3c8 <__func__.0+0x310>
    80005e3e:	018250ef          	jal	8002ae56 <printf>
    80005e42:	0004e797          	auipc	a5,0x4e
    80005e46:	1cf7c783          	lbu	a5,463(a5) # 80054011 <excpt+0x1>
    80005e4a:	c789                	beqz	a5,80005e54 <virtual_instruction_7+0x3b8>
    80005e4c:	6498                	ld	a4,8(s1)
    80005e4e:	47d9                	li	a5,22
    80005e50:	00f70c63          	beq	a4,a5,80005e68 <virtual_instruction_7+0x3cc>
    80005e54:	00027517          	auipc	a0,0x27
    80005e58:	57c50513          	addi	a0,a0,1404 # 8002d3d0 <__func__.0+0x318>
    80005e5c:	7fb240ef          	jal	8002ae56 <printf>
    80005e60:	02900513          	li	a0,41
    80005e64:	4e1230ef          	jal	80029b44 <putchar>
    80005e68:	4529                	li	a0,10
    80005e6a:	4db230ef          	jal	80029b44 <putchar>
    80005e6e:	c801                	beqz	s0,80005e7e <virtual_instruction_7+0x3e2>
    80005e70:	0004e797          	auipc	a5,0x4e
    80005e74:	1a17c783          	lbu	a5,417(a5) # 80054011 <excpt+0x1>
    80005e78:	4401                	li	s0,0
    80005e7a:	26079c63          	bnez	a5,800060f2 <virtual_instruction_7+0x656>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e7e:	4501                	li	a0,0
    80005e80:	888fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e84:	f89fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005e88:	37ab77b7          	lui	a5,0x37ab7
    80005e8c:	078a                	slli	a5,a5,0x2
    80005e8e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e92:	4701                	li	a4,0
    80005e94:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e98:	648c                	ld	a1,8(s1)
    80005e9a:	00028517          	auipc	a0,0x28
    80005e9e:	08650513          	addi	a0,a0,134 # 8002df20 <__func__.0+0xe68>
    80005ea2:	7b5240ef          	jal	8002ae56 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ea6:	08200593          	li	a1,130
    80005eaa:	00028617          	auipc	a2,0x28
    80005eae:	60e60613          	addi	a2,a2,1550 # 8002e4b8 <__func__.0+0x1400>
    80005eb2:	00027517          	auipc	a0,0x27
    80005eb6:	4fe50513          	addi	a0,a0,1278 # 8002d3b0 <__func__.0+0x2f8>
    80005eba:	79d240ef          	jal	8002ae56 <printf>
    80005ebe:	0004e797          	auipc	a5,0x4e
    80005ec2:	1537c783          	lbu	a5,339(a5) # 80054011 <excpt+0x1>
    80005ec6:	00027597          	auipc	a1,0x27
    80005eca:	4c258593          	addi	a1,a1,1218 # 8002d388 <__func__.0+0x2d0>
    80005ece:	cf89                	beqz	a5,80005ee8 <virtual_instruction_7+0x44c>
    80005ed0:	6498                	ld	a4,8(s1)
    80005ed2:	47d9                	li	a5,22
    80005ed4:	00027597          	auipc	a1,0x27
    80005ed8:	4a458593          	addi	a1,a1,1188 # 8002d378 <__func__.0+0x2c0>
    80005edc:	00f70663          	beq	a4,a5,80005ee8 <virtual_instruction_7+0x44c>
    80005ee0:	00027597          	auipc	a1,0x27
    80005ee4:	4a858593          	addi	a1,a1,1192 # 8002d388 <__func__.0+0x2d0>
    80005ee8:	00027517          	auipc	a0,0x27
    80005eec:	4e050513          	addi	a0,a0,1248 # 8002d3c8 <__func__.0+0x310>
    80005ef0:	767240ef          	jal	8002ae56 <printf>
    80005ef4:	0004e797          	auipc	a5,0x4e
    80005ef8:	11d7c783          	lbu	a5,285(a5) # 80054011 <excpt+0x1>
    80005efc:	c789                	beqz	a5,80005f06 <virtual_instruction_7+0x46a>
    80005efe:	6498                	ld	a4,8(s1)
    80005f00:	47d9                	li	a5,22
    80005f02:	00f70c63          	beq	a4,a5,80005f1a <virtual_instruction_7+0x47e>
    80005f06:	00027517          	auipc	a0,0x27
    80005f0a:	4ca50513          	addi	a0,a0,1226 # 8002d3d0 <__func__.0+0x318>
    80005f0e:	749240ef          	jal	8002ae56 <printf>
    80005f12:	02900513          	li	a0,41
    80005f16:	42f230ef          	jal	80029b44 <putchar>
    80005f1a:	4529                	li	a0,10
    80005f1c:	429230ef          	jal	80029b44 <putchar>
    80005f20:	c801                	beqz	s0,80005f30 <virtual_instruction_7+0x494>
    80005f22:	0004e797          	auipc	a5,0x4e
    80005f26:	0ef7c783          	lbu	a5,239(a5) # 80054011 <excpt+0x1>
    80005f2a:	4401                	li	s0,0
    80005f2c:	1e079263          	bnez	a5,80006110 <virtual_instruction_7+0x674>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f30:	4501                	li	a0,0
    80005f32:	fd7fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f36:	ed7fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005f3a:	37ab77b7          	lui	a5,0x37ab7
    80005f3e:	078a                	slli	a5,a5,0x2
    80005f40:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005f44:	4701                	li	a4,0
    80005f46:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005f4a:	648c                	ld	a1,8(s1)
    80005f4c:	00028517          	auipc	a0,0x28
    80005f50:	fd450513          	addi	a0,a0,-44 # 8002df20 <__func__.0+0xe68>
    80005f54:	703240ef          	jal	8002ae56 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f58:	08200593          	li	a1,130
    80005f5c:	00028617          	auipc	a2,0x28
    80005f60:	55c60613          	addi	a2,a2,1372 # 8002e4b8 <__func__.0+0x1400>
    80005f64:	00027517          	auipc	a0,0x27
    80005f68:	44c50513          	addi	a0,a0,1100 # 8002d3b0 <__func__.0+0x2f8>
    80005f6c:	6eb240ef          	jal	8002ae56 <printf>
    80005f70:	0004e797          	auipc	a5,0x4e
    80005f74:	0a17c783          	lbu	a5,161(a5) # 80054011 <excpt+0x1>
    80005f78:	00027597          	auipc	a1,0x27
    80005f7c:	41058593          	addi	a1,a1,1040 # 8002d388 <__func__.0+0x2d0>
    80005f80:	cf89                	beqz	a5,80005f9a <virtual_instruction_7+0x4fe>
    80005f82:	6498                	ld	a4,8(s1)
    80005f84:	47d9                	li	a5,22
    80005f86:	00027597          	auipc	a1,0x27
    80005f8a:	3f258593          	addi	a1,a1,1010 # 8002d378 <__func__.0+0x2c0>
    80005f8e:	00f70663          	beq	a4,a5,80005f9a <virtual_instruction_7+0x4fe>
    80005f92:	00027597          	auipc	a1,0x27
    80005f96:	3f658593          	addi	a1,a1,1014 # 8002d388 <__func__.0+0x2d0>
    80005f9a:	00027517          	auipc	a0,0x27
    80005f9e:	42e50513          	addi	a0,a0,1070 # 8002d3c8 <__func__.0+0x310>
    80005fa2:	6b5240ef          	jal	8002ae56 <printf>
    80005fa6:	0004e797          	auipc	a5,0x4e
    80005faa:	06b7c783          	lbu	a5,107(a5) # 80054011 <excpt+0x1>
    80005fae:	c789                	beqz	a5,80005fb8 <virtual_instruction_7+0x51c>
    80005fb0:	6498                	ld	a4,8(s1)
    80005fb2:	47d9                	li	a5,22
    80005fb4:	00f70c63          	beq	a4,a5,80005fcc <virtual_instruction_7+0x530>
    80005fb8:	00027517          	auipc	a0,0x27
    80005fbc:	41850513          	addi	a0,a0,1048 # 8002d3d0 <__func__.0+0x318>
    80005fc0:	697240ef          	jal	8002ae56 <printf>
    80005fc4:	02900513          	li	a0,41
    80005fc8:	37d230ef          	jal	80029b44 <putchar>
    80005fcc:	4529                	li	a0,10
    80005fce:	377230ef          	jal	80029b44 <putchar>
    80005fd2:	c801                	beqz	s0,80005fe2 <virtual_instruction_7+0x546>
    80005fd4:	0004e797          	auipc	a5,0x4e
    80005fd8:	03d7c783          	lbu	a5,61(a5) # 80054011 <excpt+0x1>
    80005fdc:	4401                	li	s0,0
    80005fde:	12079463          	bnez	a5,80006106 <virtual_instruction_7+0x66a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005fe2:	4501                	li	a0,0
    80005fe4:	f25fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005fe8:	e25fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005fec:	37ab77b7          	lui	a5,0x37ab7
    80005ff0:	078a                	slli	a5,a5,0x2
    80005ff2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005ff6:	4701                	li	a4,0
    80005ff8:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005ffc:	648c                	ld	a1,8(s1)
    80005ffe:	00028517          	auipc	a0,0x28
    80006002:	f2250513          	addi	a0,a0,-222 # 8002df20 <__func__.0+0xe68>
    80006006:	651240ef          	jal	8002ae56 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000600a:	08200593          	li	a1,130
    8000600e:	00028617          	auipc	a2,0x28
    80006012:	4aa60613          	addi	a2,a2,1194 # 8002e4b8 <__func__.0+0x1400>
    80006016:	00027517          	auipc	a0,0x27
    8000601a:	39a50513          	addi	a0,a0,922 # 8002d3b0 <__func__.0+0x2f8>
    8000601e:	639240ef          	jal	8002ae56 <printf>
    80006022:	0004e797          	auipc	a5,0x4e
    80006026:	fef7c783          	lbu	a5,-17(a5) # 80054011 <excpt+0x1>
    8000602a:	00027597          	auipc	a1,0x27
    8000602e:	35e58593          	addi	a1,a1,862 # 8002d388 <__func__.0+0x2d0>
    80006032:	cf89                	beqz	a5,8000604c <virtual_instruction_7+0x5b0>
    80006034:	6498                	ld	a4,8(s1)
    80006036:	47d9                	li	a5,22
    80006038:	00027597          	auipc	a1,0x27
    8000603c:	34058593          	addi	a1,a1,832 # 8002d378 <__func__.0+0x2c0>
    80006040:	00f70663          	beq	a4,a5,8000604c <virtual_instruction_7+0x5b0>
    80006044:	00027597          	auipc	a1,0x27
    80006048:	34458593          	addi	a1,a1,836 # 8002d388 <__func__.0+0x2d0>
    8000604c:	00027517          	auipc	a0,0x27
    80006050:	37c50513          	addi	a0,a0,892 # 8002d3c8 <__func__.0+0x310>
    80006054:	603240ef          	jal	8002ae56 <printf>
    80006058:	0004e797          	auipc	a5,0x4e
    8000605c:	fb97c783          	lbu	a5,-71(a5) # 80054011 <excpt+0x1>
    80006060:	c789                	beqz	a5,8000606a <virtual_instruction_7+0x5ce>
    80006062:	6498                	ld	a4,8(s1)
    80006064:	47d9                	li	a5,22
    80006066:	00f70c63          	beq	a4,a5,8000607e <virtual_instruction_7+0x5e2>
    8000606a:	00027517          	auipc	a0,0x27
    8000606e:	36650513          	addi	a0,a0,870 # 8002d3d0 <__func__.0+0x318>
    80006072:	5e5240ef          	jal	8002ae56 <printf>
    80006076:	02900513          	li	a0,41
    8000607a:	2cb230ef          	jal	80029b44 <putchar>
    8000607e:	4529                	li	a0,10
    80006080:	2c5230ef          	jal	80029b44 <putchar>
    80006084:	c015                	beqz	s0,800060a8 <virtual_instruction_7+0x60c>
    80006086:	0004e417          	auipc	s0,0x4e
    8000608a:	f8b44403          	lbu	s0,-117(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000608e:	00027597          	auipc	a1,0x27
    80006092:	2fa58593          	addi	a1,a1,762 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006096:	cc11                	beqz	s0,800060b2 <virtual_instruction_7+0x616>
    80006098:	6498                	ld	a4,8(s1)
    8000609a:	47d9                	li	a5,22
    TEST_END();
    8000609c:	00027597          	auipc	a1,0x27
    800060a0:	2dc58593          	addi	a1,a1,732 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800060a4:	00f70763          	beq	a4,a5,800060b2 <virtual_instruction_7+0x616>
    800060a8:	4401                	li	s0,0
    TEST_END();
    800060aa:	00027597          	auipc	a1,0x27
    800060ae:	2de58593          	addi	a1,a1,734 # 8002d388 <__func__.0+0x2d0>
    800060b2:	00027517          	auipc	a0,0x27
    800060b6:	37e50513          	addi	a0,a0,894 # 8002d430 <__func__.0+0x378>
    800060ba:	59d240ef          	jal	8002ae56 <printf>
    800060be:	4511                	li	a0,4
    800060c0:	e49fa0ef          	jal	80000f08 <goto_priv>
    800060c4:	f60fb0ef          	jal	80001824 <reset_state>
}
    800060c8:	60e2                	ld	ra,24(sp)
    800060ca:	8522                	mv	a0,s0
    800060cc:	6442                	ld	s0,16(sp)
    800060ce:	64a2                	ld	s1,8(sp)
    800060d0:	6105                	addi	sp,sp,32
    800060d2:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    800060d4:	6480                	ld	s0,8(s1)
    800060d6:	1429                	addi	s0,s0,-22
    800060d8:	00143413          	seqz	s0,s0
    800060dc:	b60d                	j	80005bfe <virtual_instruction_7+0x162>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    800060de:	6480                	ld	s0,8(s1)
    800060e0:	1429                	addi	s0,s0,-22
    800060e2:	00143413          	seqz	s0,s0
    800060e6:	b1b1                	j	80005d32 <virtual_instruction_7+0x296>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    800060e8:	6480                	ld	s0,8(s1)
    800060ea:	1429                	addi	s0,s0,-22
    800060ec:	00143413          	seqz	s0,s0
    800060f0:	b665                	j	80005c98 <virtual_instruction_7+0x1fc>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800060f2:	6480                	ld	s0,8(s1)
    800060f4:	1429                	addi	s0,s0,-22
    800060f6:	00143413          	seqz	s0,s0
    800060fa:	b351                	j	80005e7e <virtual_instruction_7+0x3e2>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    800060fc:	6480                	ld	s0,8(s1)
    800060fe:	1429                	addi	s0,s0,-22
    80006100:	00143413          	seqz	s0,s0
    80006104:	b1e1                	j	80005dcc <virtual_instruction_7+0x330>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006106:	6480                	ld	s0,8(s1)
    80006108:	1429                	addi	s0,s0,-22
    8000610a:	00143413          	seqz	s0,s0
    8000610e:	bdd1                	j	80005fe2 <virtual_instruction_7+0x546>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006110:	6480                	ld	s0,8(s1)
    80006112:	1429                	addi	s0,s0,-22
    80006114:	00143413          	seqz	s0,s0
    80006118:	bd21                	j	80005f30 <virtual_instruction_7+0x494>

000000008000611a <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    8000611a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000611c:	00025597          	auipc	a1,0x25
    80006120:	56458593          	addi	a1,a1,1380 # 8002b680 <__func__.4>
    80006124:	00027517          	auipc	a0,0x27
    80006128:	27450513          	addi	a0,a0,628 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    8000612c:	ec06                	sd	ra,24(sp)
    8000612e:	e822                	sd	s0,16(sp)
    80006130:	e426                	sd	s1,8(sp)
    TEST_START();
    80006132:	525240ef          	jal	8002ae56 <printf>
    80006136:	4529                	li	a0,10
    80006138:	20d230ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8000613c:	4511                	li	a0,4
    8000613e:	dcbfa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80006142:	004007b7          	lui	a5,0x400
    80006146:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8000614a:	002007b7          	lui	a5,0x200
    8000614e:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80006152:	4501                	li	a0,0
    80006154:	db5fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006158:	cb5fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000615c:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006160:	08200593          	li	a1,130
    80006164:	00028617          	auipc	a2,0x28
    80006168:	38460613          	addi	a2,a2,900 # 8002e4e8 <__func__.0+0x1430>
    8000616c:	00027517          	auipc	a0,0x27
    80006170:	24450513          	addi	a0,a0,580 # 8002d3b0 <__func__.0+0x2f8>
    80006174:	4e3240ef          	jal	8002ae56 <printf>
    80006178:	0004e797          	auipc	a5,0x4e
    8000617c:	e997c783          	lbu	a5,-359(a5) # 80054011 <excpt+0x1>
    80006180:	0004e497          	auipc	s1,0x4e
    80006184:	e9048493          	addi	s1,s1,-368 # 80054010 <excpt>
    80006188:	00027597          	auipc	a1,0x27
    8000618c:	20058593          	addi	a1,a1,512 # 8002d388 <__func__.0+0x2d0>
    80006190:	cf89                	beqz	a5,800061aa <virtual_instruction_8+0x90>
    80006192:	6498                	ld	a4,8(s1)
    80006194:	47d9                	li	a5,22
    80006196:	00027597          	auipc	a1,0x27
    8000619a:	1e258593          	addi	a1,a1,482 # 8002d378 <__func__.0+0x2c0>
    8000619e:	00f70663          	beq	a4,a5,800061aa <virtual_instruction_8+0x90>
    800061a2:	00027597          	auipc	a1,0x27
    800061a6:	1e658593          	addi	a1,a1,486 # 8002d388 <__func__.0+0x2d0>
    800061aa:	00027517          	auipc	a0,0x27
    800061ae:	21e50513          	addi	a0,a0,542 # 8002d3c8 <__func__.0+0x310>
    800061b2:	4a5240ef          	jal	8002ae56 <printf>
    800061b6:	0004e797          	auipc	a5,0x4e
    800061ba:	e5b7c783          	lbu	a5,-421(a5) # 80054011 <excpt+0x1>
    800061be:	c789                	beqz	a5,800061c8 <virtual_instruction_8+0xae>
    800061c0:	6498                	ld	a4,8(s1)
    800061c2:	47d9                	li	a5,22
    800061c4:	00f70c63          	beq	a4,a5,800061dc <virtual_instruction_8+0xc2>
    800061c8:	00027517          	auipc	a0,0x27
    800061cc:	20850513          	addi	a0,a0,520 # 8002d3d0 <__func__.0+0x318>
    800061d0:	487240ef          	jal	8002ae56 <printf>
    800061d4:	02900513          	li	a0,41
    800061d8:	16d230ef          	jal	80029b44 <putchar>
    800061dc:	4529                	li	a0,10
    800061de:	167230ef          	jal	80029b44 <putchar>
    800061e2:	0004e417          	auipc	s0,0x4e
    800061e6:	e2f44403          	lbu	s0,-465(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    800061ea:	00027597          	auipc	a1,0x27
    800061ee:	19e58593          	addi	a1,a1,414 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800061f2:	cc11                	beqz	s0,8000620e <virtual_instruction_8+0xf4>
    800061f4:	6498                	ld	a4,8(s1)
    800061f6:	47d9                	li	a5,22
    TEST_END();
    800061f8:	00027597          	auipc	a1,0x27
    800061fc:	18058593          	addi	a1,a1,384 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006200:	00f70763          	beq	a4,a5,8000620e <virtual_instruction_8+0xf4>
    80006204:	4401                	li	s0,0
    TEST_END();
    80006206:	00027597          	auipc	a1,0x27
    8000620a:	18258593          	addi	a1,a1,386 # 8002d388 <__func__.0+0x2d0>
    8000620e:	00027517          	auipc	a0,0x27
    80006212:	22250513          	addi	a0,a0,546 # 8002d430 <__func__.0+0x378>
    80006216:	441240ef          	jal	8002ae56 <printf>
    8000621a:	4511                	li	a0,4
    8000621c:	cedfa0ef          	jal	80000f08 <goto_priv>
    80006220:	e04fb0ef          	jal	80001824 <reset_state>
}
    80006224:	60e2                	ld	ra,24(sp)
    80006226:	8522                	mv	a0,s0
    80006228:	6442                	ld	s0,16(sp)
    8000622a:	64a2                	ld	s1,8(sp)
    8000622c:	6105                	addi	sp,sp,32
    8000622e:	8082                	ret

0000000080006230 <virtual_instruction_9>:
bool virtual_instruction_9() {
    80006230:	1101                	addi	sp,sp,-32

    TEST_START();
    80006232:	00025597          	auipc	a1,0x25
    80006236:	46658593          	addi	a1,a1,1126 # 8002b698 <__func__.3>
    8000623a:	00027517          	auipc	a0,0x27
    8000623e:	15e50513          	addi	a0,a0,350 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    80006242:	ec06                	sd	ra,24(sp)
    80006244:	e822                	sd	s0,16(sp)
    80006246:	e426                	sd	s1,8(sp)
    TEST_START();
    80006248:	40f240ef          	jal	8002ae56 <printf>
    8000624c:	4529                	li	a0,10
    8000624e:	0f7230ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80006252:	4511                	li	a0,4
    80006254:	cb5fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006258:	002007b7          	lui	a5,0x200
    8000625c:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006260:	4501                	li	a0,0
    80006262:	ca7fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006266:	ba7fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    8000626a:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000626e:	08200593          	li	a1,130
    80006272:	00028617          	auipc	a2,0x28
    80006276:	2be60613          	addi	a2,a2,702 # 8002e530 <__func__.0+0x1478>
    8000627a:	00027517          	auipc	a0,0x27
    8000627e:	13650513          	addi	a0,a0,310 # 8002d3b0 <__func__.0+0x2f8>
    80006282:	3d5240ef          	jal	8002ae56 <printf>
    80006286:	0004e797          	auipc	a5,0x4e
    8000628a:	d8b7c783          	lbu	a5,-629(a5) # 80054011 <excpt+0x1>
    8000628e:	0004e497          	auipc	s1,0x4e
    80006292:	d8248493          	addi	s1,s1,-638 # 80054010 <excpt>
    80006296:	00027597          	auipc	a1,0x27
    8000629a:	0f258593          	addi	a1,a1,242 # 8002d388 <__func__.0+0x2d0>
    8000629e:	cf89                	beqz	a5,800062b8 <virtual_instruction_9+0x88>
    800062a0:	6498                	ld	a4,8(s1)
    800062a2:	47d9                	li	a5,22
    800062a4:	00027597          	auipc	a1,0x27
    800062a8:	0d458593          	addi	a1,a1,212 # 8002d378 <__func__.0+0x2c0>
    800062ac:	00f70663          	beq	a4,a5,800062b8 <virtual_instruction_9+0x88>
    800062b0:	00027597          	auipc	a1,0x27
    800062b4:	0d858593          	addi	a1,a1,216 # 8002d388 <__func__.0+0x2d0>
    800062b8:	00027517          	auipc	a0,0x27
    800062bc:	11050513          	addi	a0,a0,272 # 8002d3c8 <__func__.0+0x310>
    800062c0:	397240ef          	jal	8002ae56 <printf>
    800062c4:	0004e797          	auipc	a5,0x4e
    800062c8:	d4d7c783          	lbu	a5,-691(a5) # 80054011 <excpt+0x1>
    800062cc:	c789                	beqz	a5,800062d6 <virtual_instruction_9+0xa6>
    800062ce:	6498                	ld	a4,8(s1)
    800062d0:	47d9                	li	a5,22
    800062d2:	00f70c63          	beq	a4,a5,800062ea <virtual_instruction_9+0xba>
    800062d6:	00027517          	auipc	a0,0x27
    800062da:	0fa50513          	addi	a0,a0,250 # 8002d3d0 <__func__.0+0x318>
    800062de:	379240ef          	jal	8002ae56 <printf>
    800062e2:	02900513          	li	a0,41
    800062e6:	05f230ef          	jal	80029b44 <putchar>
    800062ea:	4529                	li	a0,10
    800062ec:	059230ef          	jal	80029b44 <putchar>
    800062f0:	0004e417          	auipc	s0,0x4e
    800062f4:	d2144403          	lbu	s0,-735(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800062f8:	00027597          	auipc	a1,0x27
    800062fc:	09058593          	addi	a1,a1,144 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006300:	cc11                	beqz	s0,8000631c <virtual_instruction_9+0xec>
    80006302:	6498                	ld	a4,8(s1)
    80006304:	47d9                	li	a5,22
    TEST_END();
    80006306:	00027597          	auipc	a1,0x27
    8000630a:	07258593          	addi	a1,a1,114 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000630e:	00f70763          	beq	a4,a5,8000631c <virtual_instruction_9+0xec>
    80006312:	4401                	li	s0,0
    TEST_END();
    80006314:	00027597          	auipc	a1,0x27
    80006318:	07458593          	addi	a1,a1,116 # 8002d388 <__func__.0+0x2d0>
    8000631c:	00027517          	auipc	a0,0x27
    80006320:	11450513          	addi	a0,a0,276 # 8002d430 <__func__.0+0x378>
    80006324:	333240ef          	jal	8002ae56 <printf>
    80006328:	4511                	li	a0,4
    8000632a:	bdffa0ef          	jal	80000f08 <goto_priv>
    8000632e:	cf6fb0ef          	jal	80001824 <reset_state>
}
    80006332:	60e2                	ld	ra,24(sp)
    80006334:	8522                	mv	a0,s0
    80006336:	6442                	ld	s0,16(sp)
    80006338:	64a2                	ld	s1,8(sp)
    8000633a:	6105                	addi	sp,sp,32
    8000633c:	8082                	ret

000000008000633e <virtual_instruction_10>:
bool virtual_instruction_10() {
    8000633e:	1101                	addi	sp,sp,-32

    TEST_START();
    80006340:	00025597          	auipc	a1,0x25
    80006344:	37058593          	addi	a1,a1,880 # 8002b6b0 <__func__.2>
    80006348:	00027517          	auipc	a0,0x27
    8000634c:	05050513          	addi	a0,a0,80 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    80006350:	ec06                	sd	ra,24(sp)
    80006352:	e822                	sd	s0,16(sp)
    80006354:	e426                	sd	s1,8(sp)
    TEST_START();
    80006356:	301240ef          	jal	8002ae56 <printf>
    8000635a:	4529                	li	a0,10
    8000635c:	7e8230ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_M);
    80006360:	4511                	li	a0,4
    80006362:	ba7fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80006366:	002007b7          	lui	a5,0x200
    8000636a:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8000636e:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006372:	4501                	li	a0,0
    80006374:	b95fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006378:	a95fa0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    8000637c:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006380:	08200593          	li	a1,130
    80006384:	00028617          	auipc	a2,0x28
    80006388:	1f460613          	addi	a2,a2,500 # 8002e578 <__func__.0+0x14c0>
    8000638c:	00027517          	auipc	a0,0x27
    80006390:	02450513          	addi	a0,a0,36 # 8002d3b0 <__func__.0+0x2f8>
    80006394:	2c3240ef          	jal	8002ae56 <printf>
    80006398:	0004e797          	auipc	a5,0x4e
    8000639c:	c797c783          	lbu	a5,-903(a5) # 80054011 <excpt+0x1>
    800063a0:	0004e497          	auipc	s1,0x4e
    800063a4:	c7048493          	addi	s1,s1,-912 # 80054010 <excpt>
    800063a8:	00027597          	auipc	a1,0x27
    800063ac:	fe058593          	addi	a1,a1,-32 # 8002d388 <__func__.0+0x2d0>
    800063b0:	cf89                	beqz	a5,800063ca <virtual_instruction_10+0x8c>
    800063b2:	6498                	ld	a4,8(s1)
    800063b4:	47d9                	li	a5,22
    800063b6:	00027597          	auipc	a1,0x27
    800063ba:	fc258593          	addi	a1,a1,-62 # 8002d378 <__func__.0+0x2c0>
    800063be:	00f70663          	beq	a4,a5,800063ca <virtual_instruction_10+0x8c>
    800063c2:	00027597          	auipc	a1,0x27
    800063c6:	fc658593          	addi	a1,a1,-58 # 8002d388 <__func__.0+0x2d0>
    800063ca:	00027517          	auipc	a0,0x27
    800063ce:	ffe50513          	addi	a0,a0,-2 # 8002d3c8 <__func__.0+0x310>
    800063d2:	285240ef          	jal	8002ae56 <printf>
    800063d6:	0004e797          	auipc	a5,0x4e
    800063da:	c3b7c783          	lbu	a5,-965(a5) # 80054011 <excpt+0x1>
    800063de:	c789                	beqz	a5,800063e8 <virtual_instruction_10+0xaa>
    800063e0:	6498                	ld	a4,8(s1)
    800063e2:	47d9                	li	a5,22
    800063e4:	00f70c63          	beq	a4,a5,800063fc <virtual_instruction_10+0xbe>
    800063e8:	00027517          	auipc	a0,0x27
    800063ec:	fe850513          	addi	a0,a0,-24 # 8002d3d0 <__func__.0+0x318>
    800063f0:	267240ef          	jal	8002ae56 <printf>
    800063f4:	02900513          	li	a0,41
    800063f8:	74c230ef          	jal	80029b44 <putchar>
    800063fc:	4529                	li	a0,10
    800063fe:	746230ef          	jal	80029b44 <putchar>
    80006402:	0004e417          	auipc	s0,0x4e
    80006406:	c0f44403          	lbu	s0,-1009(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    8000640a:	00027597          	auipc	a1,0x27
    8000640e:	f7e58593          	addi	a1,a1,-130 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006412:	cc11                	beqz	s0,8000642e <virtual_instruction_10+0xf0>
    80006414:	6498                	ld	a4,8(s1)
    80006416:	47d9                	li	a5,22
    TEST_END();
    80006418:	00027597          	auipc	a1,0x27
    8000641c:	f6058593          	addi	a1,a1,-160 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006420:	00f70763          	beq	a4,a5,8000642e <virtual_instruction_10+0xf0>
    80006424:	4401                	li	s0,0
    TEST_END();
    80006426:	00027597          	auipc	a1,0x27
    8000642a:	f6258593          	addi	a1,a1,-158 # 8002d388 <__func__.0+0x2d0>
    8000642e:	00027517          	auipc	a0,0x27
    80006432:	00250513          	addi	a0,a0,2 # 8002d430 <__func__.0+0x378>
    80006436:	221240ef          	jal	8002ae56 <printf>
    8000643a:	4511                	li	a0,4
    8000643c:	acdfa0ef          	jal	80000f08 <goto_priv>
    80006440:	be4fb0ef          	jal	80001824 <reset_state>
}
    80006444:	60e2                	ld	ra,24(sp)
    80006446:	8522                	mv	a0,s0
    80006448:	6442                	ld	s0,16(sp)
    8000644a:	64a2                	ld	s1,8(sp)
    8000644c:	6105                	addi	sp,sp,32
    8000644e:	8082                	ret

0000000080006450 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80006450:	1101                	addi	sp,sp,-32

    TEST_START();    
    80006452:	00025597          	auipc	a1,0x25
    80006456:	27658593          	addi	a1,a1,630 # 8002b6c8 <__func__.1>
    8000645a:	00027517          	auipc	a0,0x27
    8000645e:	f3e50513          	addi	a0,a0,-194 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    80006462:	ec06                	sd	ra,24(sp)
    80006464:	e822                	sd	s0,16(sp)
    80006466:	e426                	sd	s1,8(sp)
    TEST_START();    
    80006468:	1ef240ef          	jal	8002ae56 <printf>
    8000646c:	4529                	li	a0,10
    8000646e:	6d6230ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80006472:	4511                	li	a0,4
    80006474:	a95fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    80006478:	001007b7          	lui	a5,0x100
    8000647c:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006480:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    80006484:	4501                	li	a0,0
    80006486:	a83fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000648a:	983fa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSIE,1ULL << 1);
    8000648e:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006492:	08200593          	li	a1,130
    80006496:	00028617          	auipc	a2,0x28
    8000649a:	12a60613          	addi	a2,a2,298 # 8002e5c0 <__func__.0+0x1508>
    8000649e:	00027517          	auipc	a0,0x27
    800064a2:	f1250513          	addi	a0,a0,-238 # 8002d3b0 <__func__.0+0x2f8>
    800064a6:	1b1240ef          	jal	8002ae56 <printf>
    800064aa:	0004e797          	auipc	a5,0x4e
    800064ae:	b677c783          	lbu	a5,-1177(a5) # 80054011 <excpt+0x1>
    800064b2:	0004e497          	auipc	s1,0x4e
    800064b6:	b5e48493          	addi	s1,s1,-1186 # 80054010 <excpt>
    800064ba:	00027597          	auipc	a1,0x27
    800064be:	ece58593          	addi	a1,a1,-306 # 8002d388 <__func__.0+0x2d0>
    800064c2:	cf89                	beqz	a5,800064dc <virtual_instruction_11+0x8c>
    800064c4:	6498                	ld	a4,8(s1)
    800064c6:	47d9                	li	a5,22
    800064c8:	00027597          	auipc	a1,0x27
    800064cc:	eb058593          	addi	a1,a1,-336 # 8002d378 <__func__.0+0x2c0>
    800064d0:	00f70663          	beq	a4,a5,800064dc <virtual_instruction_11+0x8c>
    800064d4:	00027597          	auipc	a1,0x27
    800064d8:	eb458593          	addi	a1,a1,-332 # 8002d388 <__func__.0+0x2d0>
    800064dc:	00027517          	auipc	a0,0x27
    800064e0:	eec50513          	addi	a0,a0,-276 # 8002d3c8 <__func__.0+0x310>
    800064e4:	173240ef          	jal	8002ae56 <printf>
    800064e8:	0004e797          	auipc	a5,0x4e
    800064ec:	b297c783          	lbu	a5,-1239(a5) # 80054011 <excpt+0x1>
    800064f0:	c789                	beqz	a5,800064fa <virtual_instruction_11+0xaa>
    800064f2:	6498                	ld	a4,8(s1)
    800064f4:	47d9                	li	a5,22
    800064f6:	00f70c63          	beq	a4,a5,8000650e <virtual_instruction_11+0xbe>
    800064fa:	00027517          	auipc	a0,0x27
    800064fe:	ed650513          	addi	a0,a0,-298 # 8002d3d0 <__func__.0+0x318>
    80006502:	155240ef          	jal	8002ae56 <printf>
    80006506:	02900513          	li	a0,41
    8000650a:	63a230ef          	jal	80029b44 <putchar>
    8000650e:	4529                	li	a0,10
    80006510:	634230ef          	jal	80029b44 <putchar>
    80006514:	0004e417          	auipc	s0,0x4e
    80006518:	afd44403          	lbu	s0,-1283(s0) # 80054011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    8000651c:	00027597          	auipc	a1,0x27
    80006520:	e6c58593          	addi	a1,a1,-404 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006524:	cc11                	beqz	s0,80006540 <virtual_instruction_11+0xf0>
    80006526:	6498                	ld	a4,8(s1)
    80006528:	47d9                	li	a5,22
    TEST_END(); 
    8000652a:	00027597          	auipc	a1,0x27
    8000652e:	e4e58593          	addi	a1,a1,-434 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006532:	00f70763          	beq	a4,a5,80006540 <virtual_instruction_11+0xf0>
    80006536:	4401                	li	s0,0
    TEST_END(); 
    80006538:	00027597          	auipc	a1,0x27
    8000653c:	e5058593          	addi	a1,a1,-432 # 8002d388 <__func__.0+0x2d0>
    80006540:	00027517          	auipc	a0,0x27
    80006544:	ef050513          	addi	a0,a0,-272 # 8002d430 <__func__.0+0x378>
    80006548:	10f240ef          	jal	8002ae56 <printf>
    8000654c:	4511                	li	a0,4
    8000654e:	9bbfa0ef          	jal	80000f08 <goto_priv>
    80006552:	ad2fb0ef          	jal	80001824 <reset_state>
}
    80006556:	60e2                	ld	ra,24(sp)
    80006558:	8522                	mv	a0,s0
    8000655a:	6442                	ld	s0,16(sp)
    8000655c:	64a2                	ld	s1,8(sp)
    8000655e:	6105                	addi	sp,sp,32
    80006560:	8082                	ret

0000000080006562 <virtual_instruction_12>:

bool virtual_instruction_12() {
    80006562:	1101                	addi	sp,sp,-32

    TEST_START();
    80006564:	00025597          	auipc	a1,0x25
    80006568:	17c58593          	addi	a1,a1,380 # 8002b6e0 <__func__.0>
    8000656c:	00027517          	auipc	a0,0x27
    80006570:	e2c50513          	addi	a0,a0,-468 # 8002d398 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    80006574:	ec06                	sd	ra,24(sp)
    80006576:	e822                	sd	s0,16(sp)
    80006578:	e426                	sd	s1,8(sp)
    TEST_START();
    8000657a:	0dd240ef          	jal	8002ae56 <printf>
    8000657e:	4529                	li	a0,10
    80006580:	5c4230ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_VU);
    80006584:	4501                	li	a0,0
    80006586:	983fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000658a:	883fa0ef          	jal	80000e0c <test_setup_except_function>

    CSRR(CSR_SATP);
    8000658e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006592:	08200593          	li	a1,130
    80006596:	00028617          	auipc	a2,0x28
    8000659a:	08a60613          	addi	a2,a2,138 # 8002e620 <__func__.0+0x1568>
    8000659e:	00027517          	auipc	a0,0x27
    800065a2:	e1250513          	addi	a0,a0,-494 # 8002d3b0 <__func__.0+0x2f8>
    800065a6:	0b1240ef          	jal	8002ae56 <printf>
    800065aa:	0004e797          	auipc	a5,0x4e
    800065ae:	a677c783          	lbu	a5,-1433(a5) # 80054011 <excpt+0x1>
    800065b2:	0004e497          	auipc	s1,0x4e
    800065b6:	a5e48493          	addi	s1,s1,-1442 # 80054010 <excpt>
    800065ba:	00027597          	auipc	a1,0x27
    800065be:	dce58593          	addi	a1,a1,-562 # 8002d388 <__func__.0+0x2d0>
    800065c2:	cf89                	beqz	a5,800065dc <virtual_instruction_12+0x7a>
    800065c4:	6498                	ld	a4,8(s1)
    800065c6:	47d9                	li	a5,22
    800065c8:	00027597          	auipc	a1,0x27
    800065cc:	db058593          	addi	a1,a1,-592 # 8002d378 <__func__.0+0x2c0>
    800065d0:	00f70663          	beq	a4,a5,800065dc <virtual_instruction_12+0x7a>
    800065d4:	00027597          	auipc	a1,0x27
    800065d8:	db458593          	addi	a1,a1,-588 # 8002d388 <__func__.0+0x2d0>
    800065dc:	00027517          	auipc	a0,0x27
    800065e0:	dec50513          	addi	a0,a0,-532 # 8002d3c8 <__func__.0+0x310>
    800065e4:	073240ef          	jal	8002ae56 <printf>
    800065e8:	0004e797          	auipc	a5,0x4e
    800065ec:	a297c783          	lbu	a5,-1495(a5) # 80054011 <excpt+0x1>
    800065f0:	c789                	beqz	a5,800065fa <virtual_instruction_12+0x98>
    800065f2:	6498                	ld	a4,8(s1)
    800065f4:	47d9                	li	a5,22
    800065f6:	00f70c63          	beq	a4,a5,8000660e <virtual_instruction_12+0xac>
    800065fa:	00027517          	auipc	a0,0x27
    800065fe:	dd650513          	addi	a0,a0,-554 # 8002d3d0 <__func__.0+0x318>
    80006602:	055240ef          	jal	8002ae56 <printf>
    80006606:	02900513          	li	a0,41
    8000660a:	53a230ef          	jal	80029b44 <putchar>
    8000660e:	4529                	li	a0,10
    80006610:	534230ef          	jal	80029b44 <putchar>
    80006614:	0004e417          	auipc	s0,0x4e
    80006618:	9fd44403          	lbu	s0,-1539(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8000661c:	00027597          	auipc	a1,0x27
    80006620:	d6c58593          	addi	a1,a1,-660 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006624:	cc11                	beqz	s0,80006640 <virtual_instruction_12+0xde>
    80006626:	6498                	ld	a4,8(s1)
    80006628:	47d9                	li	a5,22
    TEST_END();
    8000662a:	00027597          	auipc	a1,0x27
    8000662e:	d4e58593          	addi	a1,a1,-690 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006632:	00f70763          	beq	a4,a5,80006640 <virtual_instruction_12+0xde>
    80006636:	4401                	li	s0,0
    TEST_END();
    80006638:	00027597          	auipc	a1,0x27
    8000663c:	d5058593          	addi	a1,a1,-688 # 8002d388 <__func__.0+0x2d0>
    80006640:	00027517          	auipc	a0,0x27
    80006644:	df050513          	addi	a0,a0,-528 # 8002d430 <__func__.0+0x378>
    80006648:	00f240ef          	jal	8002ae56 <printf>
    8000664c:	4511                	li	a0,4
    8000664e:	8bbfa0ef          	jal	80000f08 <goto_priv>
    80006652:	9d2fb0ef          	jal	80001824 <reset_state>
}
    80006656:	60e2                	ld	ra,24(sp)
    80006658:	8522                	mv	a0,s0
    8000665a:	6442                	ld	s0,16(sp)
    8000665c:	64a2                	ld	s1,8(sp)
    8000665e:	6105                	addi	sp,sp,32
    80006660:	8082                	ret

0000000080006662 <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    80006662:	7179                	addi	sp,sp,-48

    TEST_START();
    80006664:	00025597          	auipc	a1,0x25
    80006668:	09458593          	addi	a1,a1,148 # 8002b6f8 <__func__.2>
    8000666c:	00027517          	auipc	a0,0x27
    80006670:	d2c50513          	addi	a0,a0,-724 # 8002d398 <__func__.0+0x2e0>
bool hfence_test() {
    80006674:	f406                	sd	ra,40(sp)
    80006676:	ec26                	sd	s1,24(sp)
    80006678:	f022                	sd	s0,32(sp)
    8000667a:	e84a                	sd	s2,16(sp)
    8000667c:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000667e:	7d8240ef          	jal	8002ae56 <printf>
    80006682:	4529                	li	a0,10
    80006684:	4c0230ef          	jal	80029b44 <putchar>
    80006688:	00032617          	auipc	a2,0x32
    8000668c:	2a863603          	ld	a2,680(a2) # 80038930 <__func__.0+0xb878>
    80006690:	00032697          	auipc	a3,0x32
    80006694:	2a86b683          	ld	a3,680(a3) # 80038938 <__func__.0+0xb880>
    80006698:	2201b737          	lui	a4,0x2201b
    8000669c:	000887b7          	lui	a5,0x88
    800066a0:	070a                	slli	a4,a4,0x2
    800066a2:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800066a6:	e310                	sd	a2,0(a4)
    800066a8:	07b2                	slli	a5,a5,0xc
    800066aa:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800066ac:	450d                	li	a0,3
    800066ae:	85bfa0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800066b2:	4509                	li	a0,2
    asm volatile(
    800066b4:	4001b4b7          	lui	s1,0x4001b
    800066b8:	f70fa0ef          	jal	80000e28 <set_prev_priv>
    800066bc:	048a                	slli	s1,s1,0x2
    hpt_init();
    800066be:	b06fa0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800066c2:	8bafa0ef          	jal	8000077c <vspt_init>
    800066c6:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    800066ca:	eeafa0ef          	jal	80000db4 <vspt_switch>
    800066ce:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    800066d2:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800066d6:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    800066da:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    800066de:	413787b3          	sub	a5,a5,s3
    800066e2:	00f037b3          	snez	a5,a5
    800066e6:	00143413          	seqz	s0,s0
    800066ea:	8c7d                	and	s0,s0,a5
    hpt_switch();
    800066ec:	eeafa0ef          	jal	80000dd6 <hpt_switch>
    800066f0:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    800066f4:	62000073          	.insn	4, 0x62000073
    asm volatile(
    800066f8:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    800066fc:	41390933          	sub	s2,s2,s3
    80006700:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006704:	00028617          	auipc	a2,0x28
    80006708:	f5c60613          	addi	a2,a2,-164 # 8002e660 <__func__.0+0x15a8>
    8000670c:	08200593          	li	a1,130
    80006710:	00027517          	auipc	a0,0x27
    80006714:	ca050513          	addi	a0,a0,-864 # 8002d3b0 <__func__.0+0x2f8>
    80006718:	01247433          	and	s0,s0,s2
    8000671c:	73a240ef          	jal	8002ae56 <printf>
    80006720:	12040863          	beqz	s0,80006850 <hfence_test+0x1ee>
    80006724:	13349663          	bne	s1,s3,80006850 <hfence_test+0x1ee>
    80006728:	00027597          	auipc	a1,0x27
    8000672c:	c5058593          	addi	a1,a1,-944 # 8002d378 <__func__.0+0x2c0>
    80006730:	00027517          	auipc	a0,0x27
    80006734:	c9850513          	addi	a0,a0,-872 # 8002d3c8 <__func__.0+0x310>
    80006738:	71e240ef          	jal	8002ae56 <printf>
    8000673c:	4529                	li	a0,10
    8000673e:	406230ef          	jal	80029b44 <putchar>
    80006742:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006744:	450d                	li	a0,3
    80006746:	4001b437          	lui	s0,0x4001b
    8000674a:	fbefa0ef          	jal	80000f08 <goto_priv>
    8000674e:	040a                	slli	s0,s0,0x2
    80006750:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    80006754:	e82fa0ef          	jal	80000dd6 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80006758:	12000073          	sfence.vma
    asm volatile(
    8000675c:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006760:	00028617          	auipc	a2,0x28
    80006764:	f3060613          	addi	a2,a2,-208 # 8002e690 <__func__.0+0x15d8>
    80006768:	08200593          	li	a1,130
    8000676c:	00027517          	auipc	a0,0x27
    80006770:	c4450513          	addi	a0,a0,-956 # 8002d3b0 <__func__.0+0x2f8>
    80006774:	6e2240ef          	jal	8002ae56 <printf>
    80006778:	13240963          	beq	s0,s2,800068aa <hfence_test+0x248>
    8000677c:	00027597          	auipc	a1,0x27
    80006780:	c0c58593          	addi	a1,a1,-1012 # 8002d388 <__func__.0+0x2d0>
    80006784:	00027517          	auipc	a0,0x27
    80006788:	c4450513          	addi	a0,a0,-956 # 8002d3c8 <__func__.0+0x310>
    8000678c:	6ca240ef          	jal	8002ae56 <printf>
    80006790:	00027517          	auipc	a0,0x27
    80006794:	c4050513          	addi	a0,a0,-960 # 8002d3d0 <__func__.0+0x318>
    80006798:	6be240ef          	jal	8002ae56 <printf>
    8000679c:	02900513          	li	a0,41
    800067a0:	3a4230ef          	jal	80029b44 <putchar>
    800067a4:	4529                	li	a0,10
    800067a6:	39e230ef          	jal	80029b44 <putchar>
    800067aa:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    800067ac:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    800067b0:	450d                	li	a0,3
    800067b2:	040a                	slli	s0,s0,0x2
    800067b4:	f54fa0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800067b8:	e29f90ef          	jal	800005e0 <hspt_init>
    800067bc:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    800067c0:	dd2fa0ef          	jal	80000d92 <hspt_switch>
    goto_priv(PRIV_VS);
    800067c4:	4509                	li	a0,2
    800067c6:	f42fa0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    800067ca:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    800067ce:	450d                	li	a0,3
    800067d0:	f38fa0ef          	jal	80000f08 <goto_priv>
    800067d4:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800067d6:	00028617          	auipc	a2,0x28
    800067da:	ef260613          	addi	a2,a2,-270 # 8002e6c8 <__func__.0+0x1610>
    800067de:	08200593          	li	a1,130
    800067e2:	00027517          	auipc	a0,0x27
    800067e6:	bce50513          	addi	a0,a0,-1074 # 8002d3b0 <__func__.0+0x2f8>
    800067ea:	66c240ef          	jal	8002ae56 <printf>
    800067ee:	09240a63          	beq	s0,s2,80006882 <hfence_test+0x220>
    800067f2:	00027597          	auipc	a1,0x27
    800067f6:	b9658593          	addi	a1,a1,-1130 # 8002d388 <__func__.0+0x2d0>
    800067fa:	00027517          	auipc	a0,0x27
    800067fe:	bce50513          	addi	a0,a0,-1074 # 8002d3c8 <__func__.0+0x310>
    80006802:	654240ef          	jal	8002ae56 <printf>
    80006806:	00027517          	auipc	a0,0x27
    8000680a:	bca50513          	addi	a0,a0,-1078 # 8002d3d0 <__func__.0+0x318>
    8000680e:	648240ef          	jal	8002ae56 <printf>
    80006812:	02900513          	li	a0,41
    80006816:	32e230ef          	jal	80029b44 <putchar>
    8000681a:	4529                	li	a0,10
    8000681c:	328230ef          	jal	80029b44 <putchar>
    80006820:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    80006822:	00027597          	auipc	a1,0x27
    80006826:	b6658593          	addi	a1,a1,-1178 # 8002d388 <__func__.0+0x2d0>
    8000682a:	00027517          	auipc	a0,0x27
    8000682e:	c0650513          	addi	a0,a0,-1018 # 8002d430 <__func__.0+0x378>
    80006832:	624240ef          	jal	8002ae56 <printf>
    80006836:	4511                	li	a0,4
    80006838:	ed0fa0ef          	jal	80000f08 <goto_priv>
    8000683c:	fe9fa0ef          	jal	80001824 <reset_state>
    80006840:	70a2                	ld	ra,40(sp)
    80006842:	8522                	mv	a0,s0
    80006844:	7402                	ld	s0,32(sp)
    80006846:	64e2                	ld	s1,24(sp)
    80006848:	6942                	ld	s2,16(sp)
    8000684a:	69a2                	ld	s3,8(sp)
    8000684c:	6145                	addi	sp,sp,48
    8000684e:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006850:	00027597          	auipc	a1,0x27
    80006854:	b3858593          	addi	a1,a1,-1224 # 8002d388 <__func__.0+0x2d0>
    80006858:	00027517          	auipc	a0,0x27
    8000685c:	b7050513          	addi	a0,a0,-1168 # 8002d3c8 <__func__.0+0x310>
    80006860:	5f6240ef          	jal	8002ae56 <printf>
    80006864:	00027517          	auipc	a0,0x27
    80006868:	b6c50513          	addi	a0,a0,-1172 # 8002d3d0 <__func__.0+0x318>
    8000686c:	5ea240ef          	jal	8002ae56 <printf>
    80006870:	02900513          	li	a0,41
    80006874:	2d0230ef          	jal	80029b44 <putchar>
    80006878:	4529                	li	a0,10
    8000687a:	2ca230ef          	jal	80029b44 <putchar>
    8000687e:	4481                	li	s1,0
    80006880:	b5d1                	j	80006744 <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80006882:	00027597          	auipc	a1,0x27
    80006886:	af658593          	addi	a1,a1,-1290 # 8002d378 <__func__.0+0x2c0>
    8000688a:	00027517          	auipc	a0,0x27
    8000688e:	b3e50513          	addi	a0,a0,-1218 # 8002d3c8 <__func__.0+0x310>
    80006892:	5c4240ef          	jal	8002ae56 <printf>
    80006896:	4529                	li	a0,10
    80006898:	2ac230ef          	jal	80029b44 <putchar>
    8000689c:	d0d1                	beqz	s1,80006820 <hfence_test+0x1be>
    8000689e:	4405                	li	s0,1
    TEST_END();
    800068a0:	00027597          	auipc	a1,0x27
    800068a4:	ad858593          	addi	a1,a1,-1320 # 8002d378 <__func__.0+0x2c0>
    800068a8:	b749                	j	8000682a <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    800068aa:	00027597          	auipc	a1,0x27
    800068ae:	ace58593          	addi	a1,a1,-1330 # 8002d378 <__func__.0+0x2c0>
    800068b2:	00027517          	auipc	a0,0x27
    800068b6:	b1650513          	addi	a0,a0,-1258 # 8002d3c8 <__func__.0+0x310>
    800068ba:	59c240ef          	jal	8002ae56 <printf>
    800068be:	4529                	li	a0,10
    800068c0:	284230ef          	jal	80029b44 <putchar>
    800068c4:	b5e5                	j	800067ac <hfence_test+0x14a>

00000000800068c6 <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    800068c6:	1101                	addi	sp,sp,-32

    TEST_START();
    800068c8:	00025597          	auipc	a1,0x25
    800068cc:	e4058593          	addi	a1,a1,-448 # 8002b708 <__func__.22>
    800068d0:	00027517          	auipc	a0,0x27
    800068d4:	ac850513          	addi	a0,a0,-1336 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    800068d8:	ec06                	sd	ra,24(sp)
    800068da:	e822                	sd	s0,16(sp)
    800068dc:	e426                	sd	s1,8(sp)
    TEST_START();
    800068de:	578240ef          	jal	8002ae56 <printf>
    800068e2:	4529                	li	a0,10
    800068e4:	260230ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    800068e8:	d24fa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800068ec:	4511                	li	a0,4
    800068ee:	e1afa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800068f2:	002007b7          	lui	a5,0x200
    800068f6:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800068fa:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    800068fe:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006902:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006906:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    8000690a:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    8000690e:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    80006912:	4505                	li	a0,1
    80006914:	df4fa0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006918:	08200593          	li	a1,130
    8000691c:	00028617          	auipc	a2,0x28
    80006920:	de460613          	addi	a2,a2,-540 # 8002e700 <__func__.0+0x1648>
    80006924:	00027517          	auipc	a0,0x27
    80006928:	a8c50513          	addi	a0,a0,-1396 # 8002d3b0 <__func__.0+0x2f8>
    8000692c:	52a240ef          	jal	8002ae56 <printf>
    80006930:	0004d797          	auipc	a5,0x4d
    80006934:	6e17c783          	lbu	a5,1761(a5) # 80054011 <excpt+0x1>
    80006938:	0004d497          	auipc	s1,0x4d
    8000693c:	6d848493          	addi	s1,s1,1752 # 80054010 <excpt>
    80006940:	00027597          	auipc	a1,0x27
    80006944:	a4858593          	addi	a1,a1,-1464 # 8002d388 <__func__.0+0x2d0>
    80006948:	cf89                	beqz	a5,80006962 <wfi_exception_tests_1+0x9c>
    8000694a:	6498                	ld	a4,8(s1)
    8000694c:	4789                	li	a5,2
    8000694e:	00027597          	auipc	a1,0x27
    80006952:	a2a58593          	addi	a1,a1,-1494 # 8002d378 <__func__.0+0x2c0>
    80006956:	00f70663          	beq	a4,a5,80006962 <wfi_exception_tests_1+0x9c>
    8000695a:	00027597          	auipc	a1,0x27
    8000695e:	a2e58593          	addi	a1,a1,-1490 # 8002d388 <__func__.0+0x2d0>
    80006962:	00027517          	auipc	a0,0x27
    80006966:	a6650513          	addi	a0,a0,-1434 # 8002d3c8 <__func__.0+0x310>
    8000696a:	4ec240ef          	jal	8002ae56 <printf>
    8000696e:	0004d797          	auipc	a5,0x4d
    80006972:	6a37c783          	lbu	a5,1699(a5) # 80054011 <excpt+0x1>
    80006976:	c789                	beqz	a5,80006980 <wfi_exception_tests_1+0xba>
    80006978:	6498                	ld	a4,8(s1)
    8000697a:	4789                	li	a5,2
    8000697c:	00f70c63          	beq	a4,a5,80006994 <wfi_exception_tests_1+0xce>
    80006980:	00027517          	auipc	a0,0x27
    80006984:	a5050513          	addi	a0,a0,-1456 # 8002d3d0 <__func__.0+0x318>
    80006988:	4ce240ef          	jal	8002ae56 <printf>
    8000698c:	02900513          	li	a0,41
    80006990:	1b4230ef          	jal	80029b44 <putchar>
    80006994:	4529                	li	a0,10
    80006996:	1ae230ef          	jal	80029b44 <putchar>
    8000699a:	0004d417          	auipc	s0,0x4d
    8000699e:	67744403          	lbu	s0,1655(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800069a2:	00027597          	auipc	a1,0x27
    800069a6:	9e658593          	addi	a1,a1,-1562 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069aa:	cc11                	beqz	s0,800069c6 <wfi_exception_tests_1+0x100>
    800069ac:	6498                	ld	a4,8(s1)
    800069ae:	4789                	li	a5,2
    TEST_END();
    800069b0:	00027597          	auipc	a1,0x27
    800069b4:	9c858593          	addi	a1,a1,-1592 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069b8:	00f70763          	beq	a4,a5,800069c6 <wfi_exception_tests_1+0x100>
    800069bc:	4401                	li	s0,0
    TEST_END();
    800069be:	00027597          	auipc	a1,0x27
    800069c2:	9ca58593          	addi	a1,a1,-1590 # 8002d388 <__func__.0+0x2d0>
    800069c6:	00027517          	auipc	a0,0x27
    800069ca:	a6a50513          	addi	a0,a0,-1430 # 8002d430 <__func__.0+0x378>
    800069ce:	488240ef          	jal	8002ae56 <printf>
    800069d2:	4511                	li	a0,4
    800069d4:	d34fa0ef          	jal	80000f08 <goto_priv>
    800069d8:	e4dfa0ef          	jal	80001824 <reset_state>
}
    800069dc:	60e2                	ld	ra,24(sp)
    800069de:	8522                	mv	a0,s0
    800069e0:	6442                	ld	s0,16(sp)
    800069e2:	64a2                	ld	s1,8(sp)
    800069e4:	6105                	addi	sp,sp,32
    800069e6:	8082                	ret

00000000800069e8 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    800069e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800069ea:	00025597          	auipc	a1,0x25
    800069ee:	d3658593          	addi	a1,a1,-714 # 8002b720 <__func__.21>
    800069f2:	00027517          	auipc	a0,0x27
    800069f6:	9a650513          	addi	a0,a0,-1626 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    800069fa:	ec06                	sd	ra,24(sp)
    800069fc:	e822                	sd	s0,16(sp)
    800069fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80006a00:	456240ef          	jal	8002ae56 <printf>
    80006a04:	4529                	li	a0,10
    80006a06:	13e230ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80006a0a:	c02fa0ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006a0e:	4511                	li	a0,4
    80006a10:	cf8fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a14:	002007b7          	lui	a5,0x200
    80006a18:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006a1c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006a20:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006a24:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006a28:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006a2c:	be0fa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_UIE, 0b0100);
    80006a30:	00426073          	csrsi	uie,4
    80006a34:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006a38:	4501                	li	a0,0
    80006a3a:	ccefa0ef          	jal	80000f08 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a3e:	08200593          	li	a1,130
    80006a42:	00028617          	auipc	a2,0x28
    80006a46:	d2e60613          	addi	a2,a2,-722 # 8002e770 <__func__.0+0x16b8>
    80006a4a:	00027517          	auipc	a0,0x27
    80006a4e:	96650513          	addi	a0,a0,-1690 # 8002d3b0 <__func__.0+0x2f8>
    80006a52:	404240ef          	jal	8002ae56 <printf>
    80006a56:	0004d797          	auipc	a5,0x4d
    80006a5a:	5bb7c783          	lbu	a5,1467(a5) # 80054011 <excpt+0x1>
    80006a5e:	0004d497          	auipc	s1,0x4d
    80006a62:	5b248493          	addi	s1,s1,1458 # 80054010 <excpt>
    80006a66:	00027597          	auipc	a1,0x27
    80006a6a:	92258593          	addi	a1,a1,-1758 # 8002d388 <__func__.0+0x2d0>
    80006a6e:	cf89                	beqz	a5,80006a88 <wfi_exception_tests_2+0xa0>
    80006a70:	6498                	ld	a4,8(s1)
    80006a72:	4789                	li	a5,2
    80006a74:	00027597          	auipc	a1,0x27
    80006a78:	90458593          	addi	a1,a1,-1788 # 8002d378 <__func__.0+0x2c0>
    80006a7c:	00f70663          	beq	a4,a5,80006a88 <wfi_exception_tests_2+0xa0>
    80006a80:	00027597          	auipc	a1,0x27
    80006a84:	90858593          	addi	a1,a1,-1784 # 8002d388 <__func__.0+0x2d0>
    80006a88:	00027517          	auipc	a0,0x27
    80006a8c:	94050513          	addi	a0,a0,-1728 # 8002d3c8 <__func__.0+0x310>
    80006a90:	3c6240ef          	jal	8002ae56 <printf>
    80006a94:	0004d797          	auipc	a5,0x4d
    80006a98:	57d7c783          	lbu	a5,1405(a5) # 80054011 <excpt+0x1>
    80006a9c:	c789                	beqz	a5,80006aa6 <wfi_exception_tests_2+0xbe>
    80006a9e:	6498                	ld	a4,8(s1)
    80006aa0:	4789                	li	a5,2
    80006aa2:	00f70c63          	beq	a4,a5,80006aba <wfi_exception_tests_2+0xd2>
    80006aa6:	00027517          	auipc	a0,0x27
    80006aaa:	92a50513          	addi	a0,a0,-1750 # 8002d3d0 <__func__.0+0x318>
    80006aae:	3a8240ef          	jal	8002ae56 <printf>
    80006ab2:	02900513          	li	a0,41
    80006ab6:	08e230ef          	jal	80029b44 <putchar>
    80006aba:	4529                	li	a0,10
    80006abc:	088230ef          	jal	80029b44 <putchar>
    80006ac0:	0004d417          	auipc	s0,0x4d
    80006ac4:	55144403          	lbu	s0,1361(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006ac8:	00027597          	auipc	a1,0x27
    80006acc:	8c058593          	addi	a1,a1,-1856 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ad0:	cc11                	beqz	s0,80006aec <wfi_exception_tests_2+0x104>
    80006ad2:	6498                	ld	a4,8(s1)
    80006ad4:	4789                	li	a5,2
    TEST_END();
    80006ad6:	00027597          	auipc	a1,0x27
    80006ada:	8a258593          	addi	a1,a1,-1886 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ade:	00f70763          	beq	a4,a5,80006aec <wfi_exception_tests_2+0x104>
    80006ae2:	4401                	li	s0,0
    TEST_END();
    80006ae4:	00027597          	auipc	a1,0x27
    80006ae8:	8a458593          	addi	a1,a1,-1884 # 8002d388 <__func__.0+0x2d0>
    80006aec:	00027517          	auipc	a0,0x27
    80006af0:	94450513          	addi	a0,a0,-1724 # 8002d430 <__func__.0+0x378>
    80006af4:	362240ef          	jal	8002ae56 <printf>
    80006af8:	4511                	li	a0,4
    80006afa:	c0efa0ef          	jal	80000f08 <goto_priv>
    80006afe:	d27fa0ef          	jal	80001824 <reset_state>
}
    80006b02:	60e2                	ld	ra,24(sp)
    80006b04:	8522                	mv	a0,s0
    80006b06:	6442                	ld	s0,16(sp)
    80006b08:	64a2                	ld	s1,8(sp)
    80006b0a:	6105                	addi	sp,sp,32
    80006b0c:	8082                	ret

0000000080006b0e <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006b0e:	1141                	addi	sp,sp,-16

    TEST_START();
    80006b10:	00025597          	auipc	a1,0x25
    80006b14:	c2858593          	addi	a1,a1,-984 # 8002b738 <__func__.20>
    80006b18:	00027517          	auipc	a0,0x27
    80006b1c:	88050513          	addi	a0,a0,-1920 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006b20:	e406                	sd	ra,8(sp)
    80006b22:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b24:	332240ef          	jal	8002ae56 <printf>
    80006b28:	4529                	li	a0,10
    80006b2a:	01a230ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80006b2e:	adefa0ef          	jal	80000e0c <test_setup_except_function>
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006b32:	4511                	li	a0,4
    80006b34:	bd4fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b38:	002007b7          	lui	a5,0x200
    80006b3c:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b40:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006b44:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006b48:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006b4c:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006b50:	4511                	li	a0,4
    80006b52:	bb6fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b56:	ab6fa0ef          	jal	80000e0c <test_setup_except_function>
    80006b5a:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b5e:	08200593          	li	a1,130
    80006b62:	00028617          	auipc	a2,0x28
    80006b66:	c7e60613          	addi	a2,a2,-898 # 8002e7e0 <__func__.0+0x1728>
    80006b6a:	00027517          	auipc	a0,0x27
    80006b6e:	84650513          	addi	a0,a0,-1978 # 8002d3b0 <__func__.0+0x2f8>
    80006b72:	2e4240ef          	jal	8002ae56 <printf>
    80006b76:	0004d797          	auipc	a5,0x4d
    80006b7a:	49b7c783          	lbu	a5,1179(a5) # 80054011 <excpt+0x1>
    80006b7e:	00026597          	auipc	a1,0x26
    80006b82:	7fa58593          	addi	a1,a1,2042 # 8002d378 <__func__.0+0x2c0>
    80006b86:	c789                	beqz	a5,80006b90 <wfi_exception_tests_3+0x82>
    80006b88:	00027597          	auipc	a1,0x27
    80006b8c:	80058593          	addi	a1,a1,-2048 # 8002d388 <__func__.0+0x2d0>
    80006b90:	00027517          	auipc	a0,0x27
    80006b94:	83850513          	addi	a0,a0,-1992 # 8002d3c8 <__func__.0+0x310>
    80006b98:	2be240ef          	jal	8002ae56 <printf>
    80006b9c:	0004d797          	auipc	a5,0x4d
    80006ba0:	4757c783          	lbu	a5,1141(a5) # 80054011 <excpt+0x1>
    80006ba4:	e7a1                	bnez	a5,80006bec <wfi_exception_tests_3+0xde>
    80006ba6:	4529                	li	a0,10
    80006ba8:	79d220ef          	jal	80029b44 <putchar>
    80006bac:	0004d797          	auipc	a5,0x4d
    80006bb0:	4657c783          	lbu	a5,1125(a5) # 80054011 <excpt+0x1>
    80006bb4:	e795                	bnez	a5,80006be0 <wfi_exception_tests_3+0xd2>
    80006bb6:	4405                	li	s0,1
        excpt.triggered == false
    );  

   
    TEST_END();
    80006bb8:	00026597          	auipc	a1,0x26
    80006bbc:	7c058593          	addi	a1,a1,1984 # 8002d378 <__func__.0+0x2c0>
    80006bc0:	00027517          	auipc	a0,0x27
    80006bc4:	87050513          	addi	a0,a0,-1936 # 8002d430 <__func__.0+0x378>
    80006bc8:	28e240ef          	jal	8002ae56 <printf>
    80006bcc:	4511                	li	a0,4
    80006bce:	b3afa0ef          	jal	80000f08 <goto_priv>
    80006bd2:	c53fa0ef          	jal	80001824 <reset_state>
}
    80006bd6:	60a2                	ld	ra,8(sp)
    80006bd8:	8522                	mv	a0,s0
    80006bda:	6402                	ld	s0,0(sp)
    80006bdc:	0141                	addi	sp,sp,16
    80006bde:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006be0:	4401                	li	s0,0
    TEST_END();
    80006be2:	00026597          	auipc	a1,0x26
    80006be6:	7a658593          	addi	a1,a1,1958 # 8002d388 <__func__.0+0x2d0>
    80006bea:	bfd9                	j	80006bc0 <wfi_exception_tests_3+0xb2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bec:	00026517          	auipc	a0,0x26
    80006bf0:	7e450513          	addi	a0,a0,2020 # 8002d3d0 <__func__.0+0x318>
    80006bf4:	262240ef          	jal	8002ae56 <printf>
    80006bf8:	02900513          	li	a0,41
    80006bfc:	749220ef          	jal	80029b44 <putchar>
    80006c00:	b75d                	j	80006ba6 <wfi_exception_tests_3+0x98>

0000000080006c02 <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006c02:	1141                	addi	sp,sp,-16

    TEST_START();
    80006c04:	00025597          	auipc	a1,0x25
    80006c08:	b4c58593          	addi	a1,a1,-1204 # 8002b750 <__func__.19>
    80006c0c:	00026517          	auipc	a0,0x26
    80006c10:	78c50513          	addi	a0,a0,1932 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006c14:	e406                	sd	ra,8(sp)
    80006c16:	e022                	sd	s0,0(sp)
    TEST_START();
    80006c18:	23e240ef          	jal	8002ae56 <printf>
    80006c1c:	4529                	li	a0,10
    80006c1e:	727220ef          	jal	80029b44 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006c22:	9eafa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c26:	002007b7          	lui	a5,0x200
    80006c2a:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c2e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006c32:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006c36:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006c3a:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006c3e:	450d                	li	a0,3
    80006c40:	ac8fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c44:	9c8fa0ef          	jal	80000e0c <test_setup_except_function>
    80006c48:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c4c:	08200593          	li	a1,130
    80006c50:	00028617          	auipc	a2,0x28
    80006c54:	c0060613          	addi	a2,a2,-1024 # 8002e850 <__func__.0+0x1798>
    80006c58:	00026517          	auipc	a0,0x26
    80006c5c:	75850513          	addi	a0,a0,1880 # 8002d3b0 <__func__.0+0x2f8>
    80006c60:	1f6240ef          	jal	8002ae56 <printf>
    80006c64:	0004d797          	auipc	a5,0x4d
    80006c68:	3ad7c783          	lbu	a5,941(a5) # 80054011 <excpt+0x1>
    80006c6c:	00026597          	auipc	a1,0x26
    80006c70:	70c58593          	addi	a1,a1,1804 # 8002d378 <__func__.0+0x2c0>
    80006c74:	c789                	beqz	a5,80006c7e <wfi_exception_tests_4+0x7c>
    80006c76:	00026597          	auipc	a1,0x26
    80006c7a:	71258593          	addi	a1,a1,1810 # 8002d388 <__func__.0+0x2d0>
    80006c7e:	00026517          	auipc	a0,0x26
    80006c82:	74a50513          	addi	a0,a0,1866 # 8002d3c8 <__func__.0+0x310>
    80006c86:	1d0240ef          	jal	8002ae56 <printf>
    80006c8a:	0004d797          	auipc	a5,0x4d
    80006c8e:	3877c783          	lbu	a5,903(a5) # 80054011 <excpt+0x1>
    80006c92:	e7a1                	bnez	a5,80006cda <wfi_exception_tests_4+0xd8>
    80006c94:	4529                	li	a0,10
    80006c96:	6af220ef          	jal	80029b44 <putchar>
    80006c9a:	0004d797          	auipc	a5,0x4d
    80006c9e:	3777c783          	lbu	a5,887(a5) # 80054011 <excpt+0x1>
    80006ca2:	e795                	bnez	a5,80006cce <wfi_exception_tests_4+0xcc>
    80006ca4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006ca6:	00026597          	auipc	a1,0x26
    80006caa:	6d258593          	addi	a1,a1,1746 # 8002d378 <__func__.0+0x2c0>
    80006cae:	00026517          	auipc	a0,0x26
    80006cb2:	78250513          	addi	a0,a0,1922 # 8002d430 <__func__.0+0x378>
    80006cb6:	1a0240ef          	jal	8002ae56 <printf>
    80006cba:	4511                	li	a0,4
    80006cbc:	a4cfa0ef          	jal	80000f08 <goto_priv>
    80006cc0:	b65fa0ef          	jal	80001824 <reset_state>
}
    80006cc4:	60a2                	ld	ra,8(sp)
    80006cc6:	8522                	mv	a0,s0
    80006cc8:	6402                	ld	s0,0(sp)
    80006cca:	0141                	addi	sp,sp,16
    80006ccc:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006cce:	4401                	li	s0,0
    TEST_END();
    80006cd0:	00026597          	auipc	a1,0x26
    80006cd4:	6b858593          	addi	a1,a1,1720 # 8002d388 <__func__.0+0x2d0>
    80006cd8:	bfd9                	j	80006cae <wfi_exception_tests_4+0xac>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006cda:	00026517          	auipc	a0,0x26
    80006cde:	6f650513          	addi	a0,a0,1782 # 8002d3d0 <__func__.0+0x318>
    80006ce2:	174240ef          	jal	8002ae56 <printf>
    80006ce6:	02900513          	li	a0,41
    80006cea:	65b220ef          	jal	80029b44 <putchar>
    80006cee:	b75d                	j	80006c94 <wfi_exception_tests_4+0x92>

0000000080006cf0 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006cf0:	1141                	addi	sp,sp,-16

    TEST_START();
    80006cf2:	00025597          	auipc	a1,0x25
    80006cf6:	a7658593          	addi	a1,a1,-1418 # 8002b768 <__func__.18>
    80006cfa:	00026517          	auipc	a0,0x26
    80006cfe:	69e50513          	addi	a0,a0,1694 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006d02:	e406                	sd	ra,8(sp)
    80006d04:	e022                	sd	s0,0(sp)
    TEST_START();
    80006d06:	150240ef          	jal	8002ae56 <printf>
    80006d0a:	4529                	li	a0,10
    80006d0c:	639220ef          	jal	80029b44 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d10:	8fcfa0ef          	jal	80000e0c <test_setup_except_function>

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d14:	002007b7          	lui	a5,0x200
    80006d18:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d1c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d20:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006d24:	4509                	li	a0,2
    80006d26:	9e2fa0ef          	jal	80000f08 <goto_priv>
    goto_priv(PRIV_M); 
    80006d2a:	4511                	li	a0,4
    80006d2c:	9dcfa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006d30:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006d34:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006d38:	4509                	li	a0,2
    80006d3a:	9cefa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d3e:	8cefa0ef          	jal	80000e0c <test_setup_except_function>
    80006d42:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d46:	08200593          	li	a1,130
    80006d4a:	00028617          	auipc	a2,0x28
    80006d4e:	b6e60613          	addi	a2,a2,-1170 # 8002e8b8 <__func__.0+0x1800>
    80006d52:	00026517          	auipc	a0,0x26
    80006d56:	65e50513          	addi	a0,a0,1630 # 8002d3b0 <__func__.0+0x2f8>
    80006d5a:	0fc240ef          	jal	8002ae56 <printf>
    80006d5e:	0004d797          	auipc	a5,0x4d
    80006d62:	2b37c783          	lbu	a5,691(a5) # 80054011 <excpt+0x1>
    80006d66:	00026597          	auipc	a1,0x26
    80006d6a:	61258593          	addi	a1,a1,1554 # 8002d378 <__func__.0+0x2c0>
    80006d6e:	c789                	beqz	a5,80006d78 <wfi_exception_tests_5+0x88>
    80006d70:	00026597          	auipc	a1,0x26
    80006d74:	61858593          	addi	a1,a1,1560 # 8002d388 <__func__.0+0x2d0>
    80006d78:	00026517          	auipc	a0,0x26
    80006d7c:	65050513          	addi	a0,a0,1616 # 8002d3c8 <__func__.0+0x310>
    80006d80:	0d6240ef          	jal	8002ae56 <printf>
    80006d84:	0004d797          	auipc	a5,0x4d
    80006d88:	28d7c783          	lbu	a5,653(a5) # 80054011 <excpt+0x1>
    80006d8c:	e7a1                	bnez	a5,80006dd4 <wfi_exception_tests_5+0xe4>
    80006d8e:	4529                	li	a0,10
    80006d90:	5b5220ef          	jal	80029b44 <putchar>
    80006d94:	0004d797          	auipc	a5,0x4d
    80006d98:	27d7c783          	lbu	a5,637(a5) # 80054011 <excpt+0x1>
    80006d9c:	e795                	bnez	a5,80006dc8 <wfi_exception_tests_5+0xd8>
    80006d9e:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006da0:	00026597          	auipc	a1,0x26
    80006da4:	5d858593          	addi	a1,a1,1496 # 8002d378 <__func__.0+0x2c0>
    80006da8:	00026517          	auipc	a0,0x26
    80006dac:	68850513          	addi	a0,a0,1672 # 8002d430 <__func__.0+0x378>
    80006db0:	0a6240ef          	jal	8002ae56 <printf>
    80006db4:	4511                	li	a0,4
    80006db6:	952fa0ef          	jal	80000f08 <goto_priv>
    80006dba:	a6bfa0ef          	jal	80001824 <reset_state>
}
    80006dbe:	60a2                	ld	ra,8(sp)
    80006dc0:	8522                	mv	a0,s0
    80006dc2:	6402                	ld	s0,0(sp)
    80006dc4:	0141                	addi	sp,sp,16
    80006dc6:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006dc8:	4401                	li	s0,0
    TEST_END();
    80006dca:	00026597          	auipc	a1,0x26
    80006dce:	5be58593          	addi	a1,a1,1470 # 8002d388 <__func__.0+0x2d0>
    80006dd2:	bfd9                	j	80006da8 <wfi_exception_tests_5+0xb8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006dd4:	00026517          	auipc	a0,0x26
    80006dd8:	5fc50513          	addi	a0,a0,1532 # 8002d3d0 <__func__.0+0x318>
    80006ddc:	07a240ef          	jal	8002ae56 <printf>
    80006de0:	02900513          	li	a0,41
    80006de4:	561220ef          	jal	80029b44 <putchar>
    80006de8:	b75d                	j	80006d8e <wfi_exception_tests_5+0x9e>

0000000080006dea <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006dea:	1141                	addi	sp,sp,-16

    TEST_START();
    80006dec:	00025597          	auipc	a1,0x25
    80006df0:	99458593          	addi	a1,a1,-1644 # 8002b780 <__func__.17>
    80006df4:	00026517          	auipc	a0,0x26
    80006df8:	5a450513          	addi	a0,a0,1444 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006dfc:	e406                	sd	ra,8(sp)
    80006dfe:	e022                	sd	s0,0(sp)
    TEST_START();
    80006e00:	056240ef          	jal	8002ae56 <printf>
    80006e04:	4529                	li	a0,10
    80006e06:	53f220ef          	jal	80029b44 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e0a:	802fa0ef          	jal	80000e0c <test_setup_except_function>
    
    goto_priv(PRIV_M);
    80006e0e:	4511                	li	a0,4
    80006e10:	8f8fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e14:	002007b7          	lui	a5,0x200
    80006e18:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006e1c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006e20:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006e24:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006e28:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006e2c:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006e30:	4511                	li	a0,4
    80006e32:	8d6fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e36:	fd7f90ef          	jal	80000e0c <test_setup_except_function>
    80006e3a:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e3e:	08200593          	li	a1,130
    80006e42:	00028617          	auipc	a2,0x28
    80006e46:	ade60613          	addi	a2,a2,-1314 # 8002e920 <__func__.0+0x1868>
    80006e4a:	00026517          	auipc	a0,0x26
    80006e4e:	56650513          	addi	a0,a0,1382 # 8002d3b0 <__func__.0+0x2f8>
    80006e52:	004240ef          	jal	8002ae56 <printf>
    80006e56:	0004d797          	auipc	a5,0x4d
    80006e5a:	1bb7c783          	lbu	a5,443(a5) # 80054011 <excpt+0x1>
    80006e5e:	00026597          	auipc	a1,0x26
    80006e62:	51a58593          	addi	a1,a1,1306 # 8002d378 <__func__.0+0x2c0>
    80006e66:	c789                	beqz	a5,80006e70 <wfi_exception_tests_6+0x86>
    80006e68:	00026597          	auipc	a1,0x26
    80006e6c:	52058593          	addi	a1,a1,1312 # 8002d388 <__func__.0+0x2d0>
    80006e70:	00026517          	auipc	a0,0x26
    80006e74:	55850513          	addi	a0,a0,1368 # 8002d3c8 <__func__.0+0x310>
    80006e78:	7df230ef          	jal	8002ae56 <printf>
    80006e7c:	0004d797          	auipc	a5,0x4d
    80006e80:	1957c783          	lbu	a5,405(a5) # 80054011 <excpt+0x1>
    80006e84:	e7a1                	bnez	a5,80006ecc <wfi_exception_tests_6+0xe2>
    80006e86:	4529                	li	a0,10
    80006e88:	4bd220ef          	jal	80029b44 <putchar>
    80006e8c:	0004d797          	auipc	a5,0x4d
    80006e90:	1857c783          	lbu	a5,389(a5) # 80054011 <excpt+0x1>
    80006e94:	e795                	bnez	a5,80006ec0 <wfi_exception_tests_6+0xd6>
    80006e96:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006e98:	00026597          	auipc	a1,0x26
    80006e9c:	4e058593          	addi	a1,a1,1248 # 8002d378 <__func__.0+0x2c0>
    80006ea0:	00026517          	auipc	a0,0x26
    80006ea4:	59050513          	addi	a0,a0,1424 # 8002d430 <__func__.0+0x378>
    80006ea8:	7af230ef          	jal	8002ae56 <printf>
    80006eac:	4511                	li	a0,4
    80006eae:	85afa0ef          	jal	80000f08 <goto_priv>
    80006eb2:	973fa0ef          	jal	80001824 <reset_state>
}
    80006eb6:	60a2                	ld	ra,8(sp)
    80006eb8:	8522                	mv	a0,s0
    80006eba:	6402                	ld	s0,0(sp)
    80006ebc:	0141                	addi	sp,sp,16
    80006ebe:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ec0:	4401                	li	s0,0
    TEST_END();
    80006ec2:	00026597          	auipc	a1,0x26
    80006ec6:	4c658593          	addi	a1,a1,1222 # 8002d388 <__func__.0+0x2d0>
    80006eca:	bfd9                	j	80006ea0 <wfi_exception_tests_6+0xb6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ecc:	00026517          	auipc	a0,0x26
    80006ed0:	50450513          	addi	a0,a0,1284 # 8002d3d0 <__func__.0+0x318>
    80006ed4:	783230ef          	jal	8002ae56 <printf>
    80006ed8:	02900513          	li	a0,41
    80006edc:	469220ef          	jal	80029b44 <putchar>
    80006ee0:	b75d                	j	80006e86 <wfi_exception_tests_6+0x9c>

0000000080006ee2 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006ee2:	1141                	addi	sp,sp,-16

    TEST_START();
    80006ee4:	00025597          	auipc	a1,0x25
    80006ee8:	8b458593          	addi	a1,a1,-1868 # 8002b798 <__func__.16>
    80006eec:	00026517          	auipc	a0,0x26
    80006ef0:	4ac50513          	addi	a0,a0,1196 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    80006ef4:	e406                	sd	ra,8(sp)
    80006ef6:	e022                	sd	s0,0(sp)
    TEST_START();
    80006ef8:	75f230ef          	jal	8002ae56 <printf>
    80006efc:	4529                	li	a0,10
    80006efe:	447220ef          	jal	80029b44 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006f02:	f0bf90ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006f06:	4511                	li	a0,4
    80006f08:	800fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f0c:	002007b7          	lui	a5,0x200
    80006f10:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006f14:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006f18:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006f1c:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006f20:	4509                	li	a0,2
    80006f22:	fe7f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f26:	ee7f90ef          	jal	80000e0c <test_setup_except_function>
    80006f2a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f2e:	08200593          	li	a1,130
    80006f32:	00028617          	auipc	a2,0x28
    80006f36:	a5e60613          	addi	a2,a2,-1442 # 8002e990 <__func__.0+0x18d8>
    80006f3a:	00026517          	auipc	a0,0x26
    80006f3e:	47650513          	addi	a0,a0,1142 # 8002d3b0 <__func__.0+0x2f8>
    80006f42:	715230ef          	jal	8002ae56 <printf>
    80006f46:	0004d797          	auipc	a5,0x4d
    80006f4a:	0cb7c783          	lbu	a5,203(a5) # 80054011 <excpt+0x1>
    80006f4e:	00026597          	auipc	a1,0x26
    80006f52:	42a58593          	addi	a1,a1,1066 # 8002d378 <__func__.0+0x2c0>
    80006f56:	c789                	beqz	a5,80006f60 <wfi_exception_tests_7+0x7e>
    80006f58:	00026597          	auipc	a1,0x26
    80006f5c:	43058593          	addi	a1,a1,1072 # 8002d388 <__func__.0+0x2d0>
    80006f60:	00026517          	auipc	a0,0x26
    80006f64:	46850513          	addi	a0,a0,1128 # 8002d3c8 <__func__.0+0x310>
    80006f68:	6ef230ef          	jal	8002ae56 <printf>
    80006f6c:	0004d797          	auipc	a5,0x4d
    80006f70:	0a57c783          	lbu	a5,165(a5) # 80054011 <excpt+0x1>
    80006f74:	e7a1                	bnez	a5,80006fbc <wfi_exception_tests_7+0xda>
    80006f76:	4529                	li	a0,10
    80006f78:	3cd220ef          	jal	80029b44 <putchar>
    80006f7c:	0004d797          	auipc	a5,0x4d
    80006f80:	0957c783          	lbu	a5,149(a5) # 80054011 <excpt+0x1>
    80006f84:	e795                	bnez	a5,80006fb0 <wfi_exception_tests_7+0xce>
    80006f86:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006f88:	00026597          	auipc	a1,0x26
    80006f8c:	3f058593          	addi	a1,a1,1008 # 8002d378 <__func__.0+0x2c0>
    80006f90:	00026517          	auipc	a0,0x26
    80006f94:	4a050513          	addi	a0,a0,1184 # 8002d430 <__func__.0+0x378>
    80006f98:	6bf230ef          	jal	8002ae56 <printf>
    80006f9c:	4511                	li	a0,4
    80006f9e:	f6bf90ef          	jal	80000f08 <goto_priv>
    80006fa2:	883fa0ef          	jal	80001824 <reset_state>
}
    80006fa6:	60a2                	ld	ra,8(sp)
    80006fa8:	8522                	mv	a0,s0
    80006faa:	6402                	ld	s0,0(sp)
    80006fac:	0141                	addi	sp,sp,16
    80006fae:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fb0:	4401                	li	s0,0
    TEST_END();
    80006fb2:	00026597          	auipc	a1,0x26
    80006fb6:	3d658593          	addi	a1,a1,982 # 8002d388 <__func__.0+0x2d0>
    80006fba:	bfd9                	j	80006f90 <wfi_exception_tests_7+0xae>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fbc:	00026517          	auipc	a0,0x26
    80006fc0:	41450513          	addi	a0,a0,1044 # 8002d3d0 <__func__.0+0x318>
    80006fc4:	693230ef          	jal	8002ae56 <printf>
    80006fc8:	02900513          	li	a0,41
    80006fcc:	379220ef          	jal	80029b44 <putchar>
    80006fd0:	b75d                	j	80006f76 <wfi_exception_tests_7+0x94>

0000000080006fd2 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006fd2:	1141                	addi	sp,sp,-16

    TEST_START();
    80006fd4:	00024597          	auipc	a1,0x24
    80006fd8:	7dc58593          	addi	a1,a1,2012 # 8002b7b0 <__func__.15>
    80006fdc:	00026517          	auipc	a0,0x26
    80006fe0:	3bc50513          	addi	a0,a0,956 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    80006fe4:	e406                	sd	ra,8(sp)
    80006fe6:	e022                	sd	s0,0(sp)
    TEST_START();
    80006fe8:	66f230ef          	jal	8002ae56 <printf>
    80006fec:	4529                	li	a0,10
    80006fee:	357220ef          	jal	80029b44 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006ff2:	4511                	li	a0,4
    80006ff4:	f15f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006ff8:	002007b7          	lui	a5,0x200
    80006ffc:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80007000:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80007004:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    80007008:	4509                	li	a0,2
    8000700a:	efff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000700e:	dfff90ef          	jal	80000e0c <test_setup_except_function>
    80007012:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007016:	08200593          	li	a1,130
    8000701a:	00028617          	auipc	a2,0x28
    8000701e:	9de60613          	addi	a2,a2,-1570 # 8002e9f8 <__func__.0+0x1940>
    80007022:	00026517          	auipc	a0,0x26
    80007026:	38e50513          	addi	a0,a0,910 # 8002d3b0 <__func__.0+0x2f8>
    8000702a:	62d230ef          	jal	8002ae56 <printf>
    8000702e:	0004d797          	auipc	a5,0x4d
    80007032:	fe37c783          	lbu	a5,-29(a5) # 80054011 <excpt+0x1>
    80007036:	00026597          	auipc	a1,0x26
    8000703a:	34258593          	addi	a1,a1,834 # 8002d378 <__func__.0+0x2c0>
    8000703e:	c789                	beqz	a5,80007048 <wfi_exception_tests_8+0x76>
    80007040:	00026597          	auipc	a1,0x26
    80007044:	34858593          	addi	a1,a1,840 # 8002d388 <__func__.0+0x2d0>
    80007048:	00026517          	auipc	a0,0x26
    8000704c:	38050513          	addi	a0,a0,896 # 8002d3c8 <__func__.0+0x310>
    80007050:	607230ef          	jal	8002ae56 <printf>
    80007054:	0004d797          	auipc	a5,0x4d
    80007058:	fbd7c783          	lbu	a5,-67(a5) # 80054011 <excpt+0x1>
    8000705c:	e7a1                	bnez	a5,800070a4 <wfi_exception_tests_8+0xd2>
    8000705e:	4529                	li	a0,10
    80007060:	2e5220ef          	jal	80029b44 <putchar>
    80007064:	0004d797          	auipc	a5,0x4d
    80007068:	fad7c783          	lbu	a5,-83(a5) # 80054011 <excpt+0x1>
    8000706c:	e795                	bnez	a5,80007098 <wfi_exception_tests_8+0xc6>
    8000706e:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80007070:	00026597          	auipc	a1,0x26
    80007074:	30858593          	addi	a1,a1,776 # 8002d378 <__func__.0+0x2c0>
    80007078:	00026517          	auipc	a0,0x26
    8000707c:	3b850513          	addi	a0,a0,952 # 8002d430 <__func__.0+0x378>
    80007080:	5d7230ef          	jal	8002ae56 <printf>
    80007084:	4511                	li	a0,4
    80007086:	e83f90ef          	jal	80000f08 <goto_priv>
    8000708a:	f9afa0ef          	jal	80001824 <reset_state>
}
    8000708e:	60a2                	ld	ra,8(sp)
    80007090:	8522                	mv	a0,s0
    80007092:	6402                	ld	s0,0(sp)
    80007094:	0141                	addi	sp,sp,16
    80007096:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007098:	4401                	li	s0,0
    TEST_END();
    8000709a:	00026597          	auipc	a1,0x26
    8000709e:	2ee58593          	addi	a1,a1,750 # 8002d388 <__func__.0+0x2d0>
    800070a2:	bfd9                	j	80007078 <wfi_exception_tests_8+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070a4:	00026517          	auipc	a0,0x26
    800070a8:	32c50513          	addi	a0,a0,812 # 8002d3d0 <__func__.0+0x318>
    800070ac:	5ab230ef          	jal	8002ae56 <printf>
    800070b0:	02900513          	li	a0,41
    800070b4:	291220ef          	jal	80029b44 <putchar>
    800070b8:	b75d                	j	8000705e <wfi_exception_tests_8+0x8c>

00000000800070ba <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    800070ba:	1141                	addi	sp,sp,-16

    TEST_START();
    800070bc:	00024597          	auipc	a1,0x24
    800070c0:	70c58593          	addi	a1,a1,1804 # 8002b7c8 <__func__.14>
    800070c4:	00026517          	auipc	a0,0x26
    800070c8:	2d450513          	addi	a0,a0,724 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    800070cc:	e406                	sd	ra,8(sp)
    800070ce:	e022                	sd	s0,0(sp)
    TEST_START();
    800070d0:	587230ef          	jal	8002ae56 <printf>
    800070d4:	4529                	li	a0,10
    800070d6:	26f220ef          	jal	80029b44 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800070da:	4511                	li	a0,4
    800070dc:	e2df90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800070e0:	002007b7          	lui	a5,0x200
    800070e4:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800070e8:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800070ec:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    800070f0:	450d                	li	a0,3
    800070f2:	e17f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800070f6:	d17f90ef          	jal	80000e0c <test_setup_except_function>
    800070fa:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070fe:	08200593          	li	a1,130
    80007102:	00028617          	auipc	a2,0x28
    80007106:	8f660613          	addi	a2,a2,-1802 # 8002e9f8 <__func__.0+0x1940>
    8000710a:	00026517          	auipc	a0,0x26
    8000710e:	2a650513          	addi	a0,a0,678 # 8002d3b0 <__func__.0+0x2f8>
    80007112:	545230ef          	jal	8002ae56 <printf>
    80007116:	0004d797          	auipc	a5,0x4d
    8000711a:	efb7c783          	lbu	a5,-261(a5) # 80054011 <excpt+0x1>
    8000711e:	00026597          	auipc	a1,0x26
    80007122:	25a58593          	addi	a1,a1,602 # 8002d378 <__func__.0+0x2c0>
    80007126:	c789                	beqz	a5,80007130 <wfi_exception_tests_9+0x76>
    80007128:	00026597          	auipc	a1,0x26
    8000712c:	26058593          	addi	a1,a1,608 # 8002d388 <__func__.0+0x2d0>
    80007130:	00026517          	auipc	a0,0x26
    80007134:	29850513          	addi	a0,a0,664 # 8002d3c8 <__func__.0+0x310>
    80007138:	51f230ef          	jal	8002ae56 <printf>
    8000713c:	0004d797          	auipc	a5,0x4d
    80007140:	ed57c783          	lbu	a5,-299(a5) # 80054011 <excpt+0x1>
    80007144:	e7a1                	bnez	a5,8000718c <wfi_exception_tests_9+0xd2>
    80007146:	4529                	li	a0,10
    80007148:	1fd220ef          	jal	80029b44 <putchar>
    8000714c:	0004d797          	auipc	a5,0x4d
    80007150:	ec57c783          	lbu	a5,-315(a5) # 80054011 <excpt+0x1>
    80007154:	e795                	bnez	a5,80007180 <wfi_exception_tests_9+0xc6>
    80007156:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007158:	00026597          	auipc	a1,0x26
    8000715c:	22058593          	addi	a1,a1,544 # 8002d378 <__func__.0+0x2c0>
    80007160:	00026517          	auipc	a0,0x26
    80007164:	2d050513          	addi	a0,a0,720 # 8002d430 <__func__.0+0x378>
    80007168:	4ef230ef          	jal	8002ae56 <printf>
    8000716c:	4511                	li	a0,4
    8000716e:	d9bf90ef          	jal	80000f08 <goto_priv>
    80007172:	eb2fa0ef          	jal	80001824 <reset_state>
}
    80007176:	60a2                	ld	ra,8(sp)
    80007178:	8522                	mv	a0,s0
    8000717a:	6402                	ld	s0,0(sp)
    8000717c:	0141                	addi	sp,sp,16
    8000717e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007180:	4401                	li	s0,0
    TEST_END();
    80007182:	00026597          	auipc	a1,0x26
    80007186:	20658593          	addi	a1,a1,518 # 8002d388 <__func__.0+0x2d0>
    8000718a:	bfd9                	j	80007160 <wfi_exception_tests_9+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000718c:	00026517          	auipc	a0,0x26
    80007190:	24450513          	addi	a0,a0,580 # 8002d3d0 <__func__.0+0x318>
    80007194:	4c3230ef          	jal	8002ae56 <printf>
    80007198:	02900513          	li	a0,41
    8000719c:	1a9220ef          	jal	80029b44 <putchar>
    800071a0:	b75d                	j	80007146 <wfi_exception_tests_9+0x8c>

00000000800071a2 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    800071a2:	1141                	addi	sp,sp,-16

    TEST_START();
    800071a4:	00024597          	auipc	a1,0x24
    800071a8:	63c58593          	addi	a1,a1,1596 # 8002b7e0 <__func__.13>
    800071ac:	00026517          	auipc	a0,0x26
    800071b0:	1ec50513          	addi	a0,a0,492 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    800071b4:	e406                	sd	ra,8(sp)
    800071b6:	e022                	sd	s0,0(sp)
    TEST_START();
    800071b8:	49f230ef          	jal	8002ae56 <printf>
    800071bc:	4529                	li	a0,10
    800071be:	187220ef          	jal	80029b44 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800071c2:	4511                	li	a0,4
    800071c4:	d45f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071c8:	002007b7          	lui	a5,0x200
    800071cc:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    800071d0:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    800071d4:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    800071d8:	4511                	li	a0,4
    800071da:	d2ff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800071de:	c2ff90ef          	jal	80000e0c <test_setup_except_function>
    800071e2:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071e6:	08200593          	li	a1,130
    800071ea:	00028617          	auipc	a2,0x28
    800071ee:	85660613          	addi	a2,a2,-1962 # 8002ea40 <__func__.0+0x1988>
    800071f2:	00026517          	auipc	a0,0x26
    800071f6:	1be50513          	addi	a0,a0,446 # 8002d3b0 <__func__.0+0x2f8>
    800071fa:	45d230ef          	jal	8002ae56 <printf>
    800071fe:	0004d797          	auipc	a5,0x4d
    80007202:	e137c783          	lbu	a5,-493(a5) # 80054011 <excpt+0x1>
    80007206:	00026597          	auipc	a1,0x26
    8000720a:	17258593          	addi	a1,a1,370 # 8002d378 <__func__.0+0x2c0>
    8000720e:	c789                	beqz	a5,80007218 <wfi_exception_tests_10+0x76>
    80007210:	00026597          	auipc	a1,0x26
    80007214:	17858593          	addi	a1,a1,376 # 8002d388 <__func__.0+0x2d0>
    80007218:	00026517          	auipc	a0,0x26
    8000721c:	1b050513          	addi	a0,a0,432 # 8002d3c8 <__func__.0+0x310>
    80007220:	437230ef          	jal	8002ae56 <printf>
    80007224:	0004d797          	auipc	a5,0x4d
    80007228:	ded7c783          	lbu	a5,-531(a5) # 80054011 <excpt+0x1>
    8000722c:	e7a1                	bnez	a5,80007274 <wfi_exception_tests_10+0xd2>
    8000722e:	4529                	li	a0,10
    80007230:	115220ef          	jal	80029b44 <putchar>
    80007234:	0004d797          	auipc	a5,0x4d
    80007238:	ddd7c783          	lbu	a5,-547(a5) # 80054011 <excpt+0x1>
    8000723c:	e795                	bnez	a5,80007268 <wfi_exception_tests_10+0xc6>
    8000723e:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007240:	00026597          	auipc	a1,0x26
    80007244:	13858593          	addi	a1,a1,312 # 8002d378 <__func__.0+0x2c0>
    80007248:	00026517          	auipc	a0,0x26
    8000724c:	1e850513          	addi	a0,a0,488 # 8002d430 <__func__.0+0x378>
    80007250:	407230ef          	jal	8002ae56 <printf>
    80007254:	4511                	li	a0,4
    80007256:	cb3f90ef          	jal	80000f08 <goto_priv>
    8000725a:	dcafa0ef          	jal	80001824 <reset_state>
}
    8000725e:	60a2                	ld	ra,8(sp)
    80007260:	8522                	mv	a0,s0
    80007262:	6402                	ld	s0,0(sp)
    80007264:	0141                	addi	sp,sp,16
    80007266:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007268:	4401                	li	s0,0
    TEST_END();
    8000726a:	00026597          	auipc	a1,0x26
    8000726e:	11e58593          	addi	a1,a1,286 # 8002d388 <__func__.0+0x2d0>
    80007272:	bfd9                	j	80007248 <wfi_exception_tests_10+0xa6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007274:	00026517          	auipc	a0,0x26
    80007278:	15c50513          	addi	a0,a0,348 # 8002d3d0 <__func__.0+0x318>
    8000727c:	3db230ef          	jal	8002ae56 <printf>
    80007280:	02900513          	li	a0,41
    80007284:	0c1220ef          	jal	80029b44 <putchar>
    80007288:	b75d                	j	8000722e <wfi_exception_tests_10+0x8c>

000000008000728a <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    8000728a:	1141                	addi	sp,sp,-16

    TEST_START();
    8000728c:	00024597          	auipc	a1,0x24
    80007290:	56c58593          	addi	a1,a1,1388 # 8002b7f8 <__func__.12>
    80007294:	00026517          	auipc	a0,0x26
    80007298:	10450513          	addi	a0,a0,260 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    8000729c:	e406                	sd	ra,8(sp)
    8000729e:	e022                	sd	s0,0(sp)
    TEST_START();
    800072a0:	3b7230ef          	jal	8002ae56 <printf>
    800072a4:	4529                	li	a0,10
    800072a6:	09f220ef          	jal	80029b44 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800072aa:	4511                	li	a0,4
    800072ac:	c5df90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072b0:	002007b7          	lui	a5,0x200
    800072b4:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800072b8:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    800072bc:	57fd                	li	a5,-1
    800072be:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    800072c2:	4509                	li	a0,2
    800072c4:	c45f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800072c8:	b45f90ef          	jal	80000e0c <test_setup_except_function>
    800072cc:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800072d0:	08200593          	li	a1,130
    800072d4:	00027617          	auipc	a2,0x27
    800072d8:	7b460613          	addi	a2,a2,1972 # 8002ea88 <__func__.0+0x19d0>
    800072dc:	00026517          	auipc	a0,0x26
    800072e0:	0d450513          	addi	a0,a0,212 # 8002d3b0 <__func__.0+0x2f8>
    800072e4:	373230ef          	jal	8002ae56 <printf>
    800072e8:	0004d797          	auipc	a5,0x4d
    800072ec:	d297c783          	lbu	a5,-727(a5) # 80054011 <excpt+0x1>
    800072f0:	00026597          	auipc	a1,0x26
    800072f4:	08858593          	addi	a1,a1,136 # 8002d378 <__func__.0+0x2c0>
    800072f8:	c789                	beqz	a5,80007302 <wfi_exception_tests_11+0x78>
    800072fa:	00026597          	auipc	a1,0x26
    800072fe:	08e58593          	addi	a1,a1,142 # 8002d388 <__func__.0+0x2d0>
    80007302:	00026517          	auipc	a0,0x26
    80007306:	0c650513          	addi	a0,a0,198 # 8002d3c8 <__func__.0+0x310>
    8000730a:	34d230ef          	jal	8002ae56 <printf>
    8000730e:	0004d797          	auipc	a5,0x4d
    80007312:	d037c783          	lbu	a5,-765(a5) # 80054011 <excpt+0x1>
    80007316:	e7a1                	bnez	a5,8000735e <wfi_exception_tests_11+0xd4>
    80007318:	4529                	li	a0,10
    8000731a:	02b220ef          	jal	80029b44 <putchar>
    8000731e:	0004d797          	auipc	a5,0x4d
    80007322:	cf37c783          	lbu	a5,-781(a5) # 80054011 <excpt+0x1>
    80007326:	e795                	bnez	a5,80007352 <wfi_exception_tests_11+0xc8>
    80007328:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000732a:	00026597          	auipc	a1,0x26
    8000732e:	04e58593          	addi	a1,a1,78 # 8002d378 <__func__.0+0x2c0>
    80007332:	00026517          	auipc	a0,0x26
    80007336:	0fe50513          	addi	a0,a0,254 # 8002d430 <__func__.0+0x378>
    8000733a:	31d230ef          	jal	8002ae56 <printf>
    8000733e:	4511                	li	a0,4
    80007340:	bc9f90ef          	jal	80000f08 <goto_priv>
    80007344:	ce0fa0ef          	jal	80001824 <reset_state>
}
    80007348:	60a2                	ld	ra,8(sp)
    8000734a:	8522                	mv	a0,s0
    8000734c:	6402                	ld	s0,0(sp)
    8000734e:	0141                	addi	sp,sp,16
    80007350:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007352:	4401                	li	s0,0
    TEST_END();
    80007354:	00026597          	auipc	a1,0x26
    80007358:	03458593          	addi	a1,a1,52 # 8002d388 <__func__.0+0x2d0>
    8000735c:	bfd9                	j	80007332 <wfi_exception_tests_11+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000735e:	00026517          	auipc	a0,0x26
    80007362:	07250513          	addi	a0,a0,114 # 8002d3d0 <__func__.0+0x318>
    80007366:	2f1230ef          	jal	8002ae56 <printf>
    8000736a:	02900513          	li	a0,41
    8000736e:	7d6220ef          	jal	80029b44 <putchar>
    80007372:	b75d                	j	80007318 <wfi_exception_tests_11+0x8e>

0000000080007374 <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    80007374:	1141                	addi	sp,sp,-16

    TEST_START();
    80007376:	00024597          	auipc	a1,0x24
    8000737a:	49a58593          	addi	a1,a1,1178 # 8002b810 <__func__.11>
    8000737e:	00026517          	auipc	a0,0x26
    80007382:	01a50513          	addi	a0,a0,26 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    80007386:	e406                	sd	ra,8(sp)
    80007388:	e022                	sd	s0,0(sp)
    TEST_START();
    8000738a:	2cd230ef          	jal	8002ae56 <printf>
    8000738e:	4529                	li	a0,10
    80007390:	7b4220ef          	jal	80029b44 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007394:	4511                	li	a0,4
    80007396:	b73f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000739a:	002007b7          	lui	a5,0x200
    8000739e:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800073a2:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    800073a6:	57fd                	li	a5,-1
    800073a8:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800073ac:	450d                	li	a0,3
    800073ae:	b5bf90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800073b2:	a5bf90ef          	jal	80000e0c <test_setup_except_function>
    800073b6:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073ba:	08200593          	li	a1,130
    800073be:	00027617          	auipc	a2,0x27
    800073c2:	6ca60613          	addi	a2,a2,1738 # 8002ea88 <__func__.0+0x19d0>
    800073c6:	00026517          	auipc	a0,0x26
    800073ca:	fea50513          	addi	a0,a0,-22 # 8002d3b0 <__func__.0+0x2f8>
    800073ce:	289230ef          	jal	8002ae56 <printf>
    800073d2:	0004d797          	auipc	a5,0x4d
    800073d6:	c3f7c783          	lbu	a5,-961(a5) # 80054011 <excpt+0x1>
    800073da:	00026597          	auipc	a1,0x26
    800073de:	f9e58593          	addi	a1,a1,-98 # 8002d378 <__func__.0+0x2c0>
    800073e2:	c789                	beqz	a5,800073ec <wfi_exception_tests_12+0x78>
    800073e4:	00026597          	auipc	a1,0x26
    800073e8:	fa458593          	addi	a1,a1,-92 # 8002d388 <__func__.0+0x2d0>
    800073ec:	00026517          	auipc	a0,0x26
    800073f0:	fdc50513          	addi	a0,a0,-36 # 8002d3c8 <__func__.0+0x310>
    800073f4:	263230ef          	jal	8002ae56 <printf>
    800073f8:	0004d797          	auipc	a5,0x4d
    800073fc:	c197c783          	lbu	a5,-999(a5) # 80054011 <excpt+0x1>
    80007400:	e7a1                	bnez	a5,80007448 <wfi_exception_tests_12+0xd4>
    80007402:	4529                	li	a0,10
    80007404:	740220ef          	jal	80029b44 <putchar>
    80007408:	0004d797          	auipc	a5,0x4d
    8000740c:	c097c783          	lbu	a5,-1015(a5) # 80054011 <excpt+0x1>
    80007410:	e795                	bnez	a5,8000743c <wfi_exception_tests_12+0xc8>
    80007412:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007414:	00026597          	auipc	a1,0x26
    80007418:	f6458593          	addi	a1,a1,-156 # 8002d378 <__func__.0+0x2c0>
    8000741c:	00026517          	auipc	a0,0x26
    80007420:	01450513          	addi	a0,a0,20 # 8002d430 <__func__.0+0x378>
    80007424:	233230ef          	jal	8002ae56 <printf>
    80007428:	4511                	li	a0,4
    8000742a:	adff90ef          	jal	80000f08 <goto_priv>
    8000742e:	bf6fa0ef          	jal	80001824 <reset_state>
}
    80007432:	60a2                	ld	ra,8(sp)
    80007434:	8522                	mv	a0,s0
    80007436:	6402                	ld	s0,0(sp)
    80007438:	0141                	addi	sp,sp,16
    8000743a:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000743c:	4401                	li	s0,0
    TEST_END();
    8000743e:	00026597          	auipc	a1,0x26
    80007442:	f4a58593          	addi	a1,a1,-182 # 8002d388 <__func__.0+0x2d0>
    80007446:	bfd9                	j	8000741c <wfi_exception_tests_12+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007448:	00026517          	auipc	a0,0x26
    8000744c:	f8850513          	addi	a0,a0,-120 # 8002d3d0 <__func__.0+0x318>
    80007450:	207230ef          	jal	8002ae56 <printf>
    80007454:	02900513          	li	a0,41
    80007458:	6ec220ef          	jal	80029b44 <putchar>
    8000745c:	b75d                	j	80007402 <wfi_exception_tests_12+0x8e>

000000008000745e <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    8000745e:	1141                	addi	sp,sp,-16

    TEST_START();
    80007460:	00024597          	auipc	a1,0x24
    80007464:	3c858593          	addi	a1,a1,968 # 8002b828 <__func__.10>
    80007468:	00026517          	auipc	a0,0x26
    8000746c:	f3050513          	addi	a0,a0,-208 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    80007470:	e406                	sd	ra,8(sp)
    80007472:	e022                	sd	s0,0(sp)
    TEST_START();
    80007474:	1e3230ef          	jal	8002ae56 <printf>
    80007478:	4529                	li	a0,10
    8000747a:	6ca220ef          	jal	80029b44 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000747e:	4511                	li	a0,4
    80007480:	a89f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007484:	002007b7          	lui	a5,0x200
    80007488:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    8000748c:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80007490:	57fd                	li	a5,-1
    80007492:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    80007496:	4511                	li	a0,4
    80007498:	a71f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000749c:	971f90ef          	jal	80000e0c <test_setup_except_function>
    800074a0:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800074a4:	08200593          	li	a1,130
    800074a8:	00027617          	auipc	a2,0x27
    800074ac:	62860613          	addi	a2,a2,1576 # 8002ead0 <__func__.0+0x1a18>
    800074b0:	00026517          	auipc	a0,0x26
    800074b4:	f0050513          	addi	a0,a0,-256 # 8002d3b0 <__func__.0+0x2f8>
    800074b8:	19f230ef          	jal	8002ae56 <printf>
    800074bc:	0004d797          	auipc	a5,0x4d
    800074c0:	b557c783          	lbu	a5,-1195(a5) # 80054011 <excpt+0x1>
    800074c4:	00026597          	auipc	a1,0x26
    800074c8:	eb458593          	addi	a1,a1,-332 # 8002d378 <__func__.0+0x2c0>
    800074cc:	c789                	beqz	a5,800074d6 <wfi_exception_tests_13+0x78>
    800074ce:	00026597          	auipc	a1,0x26
    800074d2:	eba58593          	addi	a1,a1,-326 # 8002d388 <__func__.0+0x2d0>
    800074d6:	00026517          	auipc	a0,0x26
    800074da:	ef250513          	addi	a0,a0,-270 # 8002d3c8 <__func__.0+0x310>
    800074de:	179230ef          	jal	8002ae56 <printf>
    800074e2:	0004d797          	auipc	a5,0x4d
    800074e6:	b2f7c783          	lbu	a5,-1233(a5) # 80054011 <excpt+0x1>
    800074ea:	e7a1                	bnez	a5,80007532 <wfi_exception_tests_13+0xd4>
    800074ec:	4529                	li	a0,10
    800074ee:	656220ef          	jal	80029b44 <putchar>
    800074f2:	0004d797          	auipc	a5,0x4d
    800074f6:	b1f7c783          	lbu	a5,-1249(a5) # 80054011 <excpt+0x1>
    800074fa:	e795                	bnez	a5,80007526 <wfi_exception_tests_13+0xc8>
    800074fc:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800074fe:	00026597          	auipc	a1,0x26
    80007502:	e7a58593          	addi	a1,a1,-390 # 8002d378 <__func__.0+0x2c0>
    80007506:	00026517          	auipc	a0,0x26
    8000750a:	f2a50513          	addi	a0,a0,-214 # 8002d430 <__func__.0+0x378>
    8000750e:	149230ef          	jal	8002ae56 <printf>
    80007512:	4511                	li	a0,4
    80007514:	9f5f90ef          	jal	80000f08 <goto_priv>
    80007518:	b0cfa0ef          	jal	80001824 <reset_state>
}
    8000751c:	60a2                	ld	ra,8(sp)
    8000751e:	8522                	mv	a0,s0
    80007520:	6402                	ld	s0,0(sp)
    80007522:	0141                	addi	sp,sp,16
    80007524:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007526:	4401                	li	s0,0
    TEST_END();
    80007528:	00026597          	auipc	a1,0x26
    8000752c:	e6058593          	addi	a1,a1,-416 # 8002d388 <__func__.0+0x2d0>
    80007530:	bfd9                	j	80007506 <wfi_exception_tests_13+0xa8>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007532:	00026517          	auipc	a0,0x26
    80007536:	e9e50513          	addi	a0,a0,-354 # 8002d3d0 <__func__.0+0x318>
    8000753a:	11d230ef          	jal	8002ae56 <printf>
    8000753e:	02900513          	li	a0,41
    80007542:	602220ef          	jal	80029b44 <putchar>
    80007546:	b75d                	j	800074ec <wfi_exception_tests_13+0x8e>

0000000080007548 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80007548:	1141                	addi	sp,sp,-16

    TEST_START();
    8000754a:	00024597          	auipc	a1,0x24
    8000754e:	2f658593          	addi	a1,a1,758 # 8002b840 <__func__.9>
    80007552:	00026517          	auipc	a0,0x26
    80007556:	e4650513          	addi	a0,a0,-442 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    8000755a:	e406                	sd	ra,8(sp)
    8000755c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000755e:	0f9230ef          	jal	8002ae56 <printf>
    80007562:	4529                	li	a0,10
    80007564:	5e0220ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80007568:	4511                	li	a0,4
    8000756a:	99ff90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000756e:	002007b7          	lui	a5,0x200
    80007572:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    80007576:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    8000757a:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    8000757e:	4509                	li	a0,2
    80007580:	989f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007584:	889f90ef          	jal	80000e0c <test_setup_except_function>
    80007588:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000758c:	08200593          	li	a1,130
    80007590:	00027617          	auipc	a2,0x27
    80007594:	40060613          	addi	a2,a2,1024 # 8002e990 <__func__.0+0x18d8>
    80007598:	00026517          	auipc	a0,0x26
    8000759c:	e1850513          	addi	a0,a0,-488 # 8002d3b0 <__func__.0+0x2f8>
    800075a0:	0b7230ef          	jal	8002ae56 <printf>
    800075a4:	0004d797          	auipc	a5,0x4d
    800075a8:	a6d7c783          	lbu	a5,-1427(a5) # 80054011 <excpt+0x1>
    800075ac:	00026597          	auipc	a1,0x26
    800075b0:	dcc58593          	addi	a1,a1,-564 # 8002d378 <__func__.0+0x2c0>
    800075b4:	c789                	beqz	a5,800075be <wfi_exception_tests_14+0x76>
    800075b6:	00026597          	auipc	a1,0x26
    800075ba:	dd258593          	addi	a1,a1,-558 # 8002d388 <__func__.0+0x2d0>
    800075be:	00026517          	auipc	a0,0x26
    800075c2:	e0a50513          	addi	a0,a0,-502 # 8002d3c8 <__func__.0+0x310>
    800075c6:	091230ef          	jal	8002ae56 <printf>
    800075ca:	0004d797          	auipc	a5,0x4d
    800075ce:	a477c783          	lbu	a5,-1465(a5) # 80054011 <excpt+0x1>
    800075d2:	e7a1                	bnez	a5,8000761a <wfi_exception_tests_14+0xd2>
    800075d4:	4529                	li	a0,10
    800075d6:	56e220ef          	jal	80029b44 <putchar>
    800075da:	0004d797          	auipc	a5,0x4d
    800075de:	a377c783          	lbu	a5,-1481(a5) # 80054011 <excpt+0x1>
    800075e2:	e795                	bnez	a5,8000760e <wfi_exception_tests_14+0xc6>
    800075e4:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    800075e6:	00026597          	auipc	a1,0x26
    800075ea:	d9258593          	addi	a1,a1,-622 # 8002d378 <__func__.0+0x2c0>
    800075ee:	00026517          	auipc	a0,0x26
    800075f2:	e4250513          	addi	a0,a0,-446 # 8002d430 <__func__.0+0x378>
    800075f6:	061230ef          	jal	8002ae56 <printf>
    800075fa:	4511                	li	a0,4
    800075fc:	90df90ef          	jal	80000f08 <goto_priv>
    80007600:	a24fa0ef          	jal	80001824 <reset_state>
}
    80007604:	60a2                	ld	ra,8(sp)
    80007606:	8522                	mv	a0,s0
    80007608:	6402                	ld	s0,0(sp)
    8000760a:	0141                	addi	sp,sp,16
    8000760c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000760e:	4401                	li	s0,0
    TEST_END();
    80007610:	00026597          	auipc	a1,0x26
    80007614:	d7858593          	addi	a1,a1,-648 # 8002d388 <__func__.0+0x2d0>
    80007618:	bfd9                	j	800075ee <wfi_exception_tests_14+0xa6>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000761a:	00026517          	auipc	a0,0x26
    8000761e:	db650513          	addi	a0,a0,-586 # 8002d3d0 <__func__.0+0x318>
    80007622:	035230ef          	jal	8002ae56 <printf>
    80007626:	02900513          	li	a0,41
    8000762a:	51a220ef          	jal	80029b44 <putchar>
    8000762e:	b75d                	j	800075d4 <wfi_exception_tests_14+0x8c>

0000000080007630 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    80007630:	1101                	addi	sp,sp,-32

    TEST_START();
    80007632:	00024597          	auipc	a1,0x24
    80007636:	22658593          	addi	a1,a1,550 # 8002b858 <__func__.8>
    8000763a:	00026517          	auipc	a0,0x26
    8000763e:	d5e50513          	addi	a0,a0,-674 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    80007642:	ec06                	sd	ra,24(sp)
    80007644:	e822                	sd	s0,16(sp)
    80007646:	e426                	sd	s1,8(sp)
    TEST_START();
    80007648:	00f230ef          	jal	8002ae56 <printf>
    8000764c:	4529                	li	a0,10
    8000764e:	4f6220ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    80007652:	4511                	li	a0,4
    80007654:	8b5f90ef          	jal	80000f08 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    80007658:	002007b7          	lui	a5,0x200
    8000765c:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80007660:	450d                	li	a0,3
    80007662:	8a7f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007666:	fa6f90ef          	jal	80000e0c <test_setup_except_function>
    8000766a:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000766e:	08200593          	li	a1,130
    80007672:	00027617          	auipc	a2,0x27
    80007676:	4a660613          	addi	a2,a2,1190 # 8002eb18 <__func__.0+0x1a60>
    8000767a:	00026517          	auipc	a0,0x26
    8000767e:	d3650513          	addi	a0,a0,-714 # 8002d3b0 <__func__.0+0x2f8>
    80007682:	7d4230ef          	jal	8002ae56 <printf>
    80007686:	0004d797          	auipc	a5,0x4d
    8000768a:	98b7c783          	lbu	a5,-1653(a5) # 80054011 <excpt+0x1>
    8000768e:	0004d497          	auipc	s1,0x4d
    80007692:	98248493          	addi	s1,s1,-1662 # 80054010 <excpt>
    80007696:	00026597          	auipc	a1,0x26
    8000769a:	cf258593          	addi	a1,a1,-782 # 8002d388 <__func__.0+0x2d0>
    8000769e:	cf89                	beqz	a5,800076b8 <wfi_exception_tests_15+0x88>
    800076a0:	6498                	ld	a4,8(s1)
    800076a2:	4789                	li	a5,2
    800076a4:	00026597          	auipc	a1,0x26
    800076a8:	cd458593          	addi	a1,a1,-812 # 8002d378 <__func__.0+0x2c0>
    800076ac:	00f70663          	beq	a4,a5,800076b8 <wfi_exception_tests_15+0x88>
    800076b0:	00026597          	auipc	a1,0x26
    800076b4:	cd858593          	addi	a1,a1,-808 # 8002d388 <__func__.0+0x2d0>
    800076b8:	00026517          	auipc	a0,0x26
    800076bc:	d1050513          	addi	a0,a0,-752 # 8002d3c8 <__func__.0+0x310>
    800076c0:	796230ef          	jal	8002ae56 <printf>
    800076c4:	0004d797          	auipc	a5,0x4d
    800076c8:	94d7c783          	lbu	a5,-1715(a5) # 80054011 <excpt+0x1>
    800076cc:	c789                	beqz	a5,800076d6 <wfi_exception_tests_15+0xa6>
    800076ce:	6498                	ld	a4,8(s1)
    800076d0:	4789                	li	a5,2
    800076d2:	00f70c63          	beq	a4,a5,800076ea <wfi_exception_tests_15+0xba>
    800076d6:	00026517          	auipc	a0,0x26
    800076da:	cfa50513          	addi	a0,a0,-774 # 8002d3d0 <__func__.0+0x318>
    800076de:	778230ef          	jal	8002ae56 <printf>
    800076e2:	02900513          	li	a0,41
    800076e6:	45e220ef          	jal	80029b44 <putchar>
    800076ea:	4529                	li	a0,10
    800076ec:	458220ef          	jal	80029b44 <putchar>
    800076f0:	0004d417          	auipc	s0,0x4d
    800076f4:	92144403          	lbu	s0,-1759(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800076f8:	00026597          	auipc	a1,0x26
    800076fc:	c9058593          	addi	a1,a1,-880 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007700:	cc11                	beqz	s0,8000771c <wfi_exception_tests_15+0xec>
    80007702:	6498                	ld	a4,8(s1)
    80007704:	4789                	li	a5,2
    TEST_END();
    80007706:	00026597          	auipc	a1,0x26
    8000770a:	c7258593          	addi	a1,a1,-910 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000770e:	00f70763          	beq	a4,a5,8000771c <wfi_exception_tests_15+0xec>
    80007712:	4401                	li	s0,0
    TEST_END();
    80007714:	00026597          	auipc	a1,0x26
    80007718:	c7458593          	addi	a1,a1,-908 # 8002d388 <__func__.0+0x2d0>
    8000771c:	00026517          	auipc	a0,0x26
    80007720:	d1450513          	addi	a0,a0,-748 # 8002d430 <__func__.0+0x378>
    80007724:	732230ef          	jal	8002ae56 <printf>
    80007728:	4511                	li	a0,4
    8000772a:	fdef90ef          	jal	80000f08 <goto_priv>
    8000772e:	8f6fa0ef          	jal	80001824 <reset_state>
}
    80007732:	60e2                	ld	ra,24(sp)
    80007734:	8522                	mv	a0,s0
    80007736:	6442                	ld	s0,16(sp)
    80007738:	64a2                	ld	s1,8(sp)
    8000773a:	6105                	addi	sp,sp,32
    8000773c:	8082                	ret

000000008000773e <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    8000773e:	1101                	addi	sp,sp,-32

    TEST_START();
    80007740:	00024597          	auipc	a1,0x24
    80007744:	13058593          	addi	a1,a1,304 # 8002b870 <__func__.7>
    80007748:	00026517          	auipc	a0,0x26
    8000774c:	c5050513          	addi	a0,a0,-944 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    80007750:	ec06                	sd	ra,24(sp)
    80007752:	e822                	sd	s0,16(sp)
    80007754:	e426                	sd	s1,8(sp)
    TEST_START();
    80007756:	700230ef          	jal	8002ae56 <printf>
    8000775a:	4529                	li	a0,10
    8000775c:	3e8220ef          	jal	80029b44 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    80007760:	002007b7          	lui	a5,0x200
    80007764:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80007768:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    8000776c:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    80007770:	4509                	li	a0,2
    80007772:	f96f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007776:	e96f90ef          	jal	80000e0c <test_setup_except_function>
    8000777a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    8000777e:	08200593          	li	a1,130
    80007782:	00027617          	auipc	a2,0x27
    80007786:	3de60613          	addi	a2,a2,990 # 8002eb60 <__func__.0+0x1aa8>
    8000778a:	00026517          	auipc	a0,0x26
    8000778e:	c2650513          	addi	a0,a0,-986 # 8002d3b0 <__func__.0+0x2f8>
    80007792:	6c4230ef          	jal	8002ae56 <printf>
    80007796:	0004d797          	auipc	a5,0x4d
    8000779a:	87b7c783          	lbu	a5,-1925(a5) # 80054011 <excpt+0x1>
    8000779e:	0004d497          	auipc	s1,0x4d
    800077a2:	87248493          	addi	s1,s1,-1934 # 80054010 <excpt>
    800077a6:	00026597          	auipc	a1,0x26
    800077aa:	be258593          	addi	a1,a1,-1054 # 8002d388 <__func__.0+0x2d0>
    800077ae:	cf89                	beqz	a5,800077c8 <wfi_exception_tests_16+0x8a>
    800077b0:	6498                	ld	a4,8(s1)
    800077b2:	4789                	li	a5,2
    800077b4:	00026597          	auipc	a1,0x26
    800077b8:	bc458593          	addi	a1,a1,-1084 # 8002d378 <__func__.0+0x2c0>
    800077bc:	00f70663          	beq	a4,a5,800077c8 <wfi_exception_tests_16+0x8a>
    800077c0:	00026597          	auipc	a1,0x26
    800077c4:	bc858593          	addi	a1,a1,-1080 # 8002d388 <__func__.0+0x2d0>
    800077c8:	00026517          	auipc	a0,0x26
    800077cc:	c0050513          	addi	a0,a0,-1024 # 8002d3c8 <__func__.0+0x310>
    800077d0:	686230ef          	jal	8002ae56 <printf>
    800077d4:	0004d797          	auipc	a5,0x4d
    800077d8:	83d7c783          	lbu	a5,-1987(a5) # 80054011 <excpt+0x1>
    800077dc:	c789                	beqz	a5,800077e6 <wfi_exception_tests_16+0xa8>
    800077de:	6498                	ld	a4,8(s1)
    800077e0:	4789                	li	a5,2
    800077e2:	00f70c63          	beq	a4,a5,800077fa <wfi_exception_tests_16+0xbc>
    800077e6:	00026517          	auipc	a0,0x26
    800077ea:	bea50513          	addi	a0,a0,-1046 # 8002d3d0 <__func__.0+0x318>
    800077ee:	668230ef          	jal	8002ae56 <printf>
    800077f2:	02900513          	li	a0,41
    800077f6:	34e220ef          	jal	80029b44 <putchar>
    800077fa:	4529                	li	a0,10
    800077fc:	348220ef          	jal	80029b44 <putchar>
    80007800:	0004d417          	auipc	s0,0x4d
    80007804:	81144403          	lbu	s0,-2031(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007808:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    8000780a:	c409                	beqz	s0,80007814 <wfi_exception_tests_16+0xd6>
    8000780c:	6498                	ld	a4,8(s1)
    8000780e:	4789                	li	a5,2
    80007810:	02f70e63          	beq	a4,a5,8000784c <wfi_exception_tests_16+0x10e>
    goto_priv(PRIV_M);
    80007814:	ef4f90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007818:	002007b7          	lui	a5,0x200
    8000781c:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007820:	4401                	li	s0,0
    TEST_END();
    80007822:	00026597          	auipc	a1,0x26
    80007826:	b6658593          	addi	a1,a1,-1178 # 8002d388 <__func__.0+0x2d0>
    8000782a:	00026517          	auipc	a0,0x26
    8000782e:	c0650513          	addi	a0,a0,-1018 # 8002d430 <__func__.0+0x378>
    80007832:	624230ef          	jal	8002ae56 <printf>
    80007836:	4511                	li	a0,4
    80007838:	ed0f90ef          	jal	80000f08 <goto_priv>
    8000783c:	fe9f90ef          	jal	80001824 <reset_state>
}
    80007840:	60e2                	ld	ra,24(sp)
    80007842:	8522                	mv	a0,s0
    80007844:	6442                	ld	s0,16(sp)
    80007846:	64a2                	ld	s1,8(sp)
    80007848:	6105                	addi	sp,sp,32
    8000784a:	8082                	ret
    goto_priv(PRIV_M);
    8000784c:	ebcf90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007850:	002007b7          	lui	a5,0x200
    80007854:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80007858:	00026597          	auipc	a1,0x26
    8000785c:	b2058593          	addi	a1,a1,-1248 # 8002d378 <__func__.0+0x2c0>
    80007860:	b7e9                	j	8000782a <wfi_exception_tests_16+0xec>

0000000080007862 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007862:	1141                	addi	sp,sp,-16

    TEST_START();
    80007864:	00024597          	auipc	a1,0x24
    80007868:	02458593          	addi	a1,a1,36 # 8002b888 <__func__.6>
    8000786c:	00026517          	auipc	a0,0x26
    80007870:	b2c50513          	addi	a0,a0,-1236 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    80007874:	e406                	sd	ra,8(sp)
    80007876:	e022                	sd	s0,0(sp)
    TEST_START();
    80007878:	5de230ef          	jal	8002ae56 <printf>
    8000787c:	4529                	li	a0,10
    8000787e:	2c6220ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80007882:	4511                	li	a0,4
    80007884:	e84f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007888:	002007b7          	lui	a5,0x200
    8000788c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007890:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80007894:	4509                	li	a0,2
    80007896:	e72f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000789a:	d72f90ef          	jal	80000e0c <test_setup_except_function>
    8000789e:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800078a2:	08200593          	li	a1,130
    800078a6:	00027617          	auipc	a2,0x27
    800078aa:	30260613          	addi	a2,a2,770 # 8002eba8 <__func__.0+0x1af0>
    800078ae:	00026517          	auipc	a0,0x26
    800078b2:	b0250513          	addi	a0,a0,-1278 # 8002d3b0 <__func__.0+0x2f8>
    800078b6:	5a0230ef          	jal	8002ae56 <printf>
    800078ba:	0004c797          	auipc	a5,0x4c
    800078be:	7577c783          	lbu	a5,1879(a5) # 80054011 <excpt+0x1>
    800078c2:	00026597          	auipc	a1,0x26
    800078c6:	ab658593          	addi	a1,a1,-1354 # 8002d378 <__func__.0+0x2c0>
    800078ca:	c789                	beqz	a5,800078d4 <wfi_exception_tests_17+0x72>
    800078cc:	00026597          	auipc	a1,0x26
    800078d0:	abc58593          	addi	a1,a1,-1348 # 8002d388 <__func__.0+0x2d0>
    800078d4:	00026517          	auipc	a0,0x26
    800078d8:	af450513          	addi	a0,a0,-1292 # 8002d3c8 <__func__.0+0x310>
    800078dc:	57a230ef          	jal	8002ae56 <printf>
    800078e0:	0004c797          	auipc	a5,0x4c
    800078e4:	7317c783          	lbu	a5,1841(a5) # 80054011 <excpt+0x1>
    800078e8:	e7a1                	bnez	a5,80007930 <wfi_exception_tests_17+0xce>
    800078ea:	4529                	li	a0,10
    800078ec:	258220ef          	jal	80029b44 <putchar>
    800078f0:	0004c797          	auipc	a5,0x4c
    800078f4:	7217c783          	lbu	a5,1825(a5) # 80054011 <excpt+0x1>
    800078f8:	e795                	bnez	a5,80007924 <wfi_exception_tests_17+0xc2>
    800078fa:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800078fc:	00026597          	auipc	a1,0x26
    80007900:	a7c58593          	addi	a1,a1,-1412 # 8002d378 <__func__.0+0x2c0>
    80007904:	00026517          	auipc	a0,0x26
    80007908:	b2c50513          	addi	a0,a0,-1236 # 8002d430 <__func__.0+0x378>
    8000790c:	54a230ef          	jal	8002ae56 <printf>
    80007910:	4511                	li	a0,4
    80007912:	df6f90ef          	jal	80000f08 <goto_priv>
    80007916:	f0ff90ef          	jal	80001824 <reset_state>
}
    8000791a:	60a2                	ld	ra,8(sp)
    8000791c:	8522                	mv	a0,s0
    8000791e:	6402                	ld	s0,0(sp)
    80007920:	0141                	addi	sp,sp,16
    80007922:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007924:	4401                	li	s0,0
    TEST_END();
    80007926:	00026597          	auipc	a1,0x26
    8000792a:	a6258593          	addi	a1,a1,-1438 # 8002d388 <__func__.0+0x2d0>
    8000792e:	bfd9                	j	80007904 <wfi_exception_tests_17+0xa2>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007930:	00026517          	auipc	a0,0x26
    80007934:	aa050513          	addi	a0,a0,-1376 # 8002d3d0 <__func__.0+0x318>
    80007938:	51e230ef          	jal	8002ae56 <printf>
    8000793c:	02900513          	li	a0,41
    80007940:	204220ef          	jal	80029b44 <putchar>
    80007944:	b75d                	j	800078ea <wfi_exception_tests_17+0x88>

0000000080007946 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007946:	1101                	addi	sp,sp,-32

    TEST_START();
    80007948:	00024597          	auipc	a1,0x24
    8000794c:	f5858593          	addi	a1,a1,-168 # 8002b8a0 <__func__.5>
    80007950:	00026517          	auipc	a0,0x26
    80007954:	a4850513          	addi	a0,a0,-1464 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    80007958:	ec06                	sd	ra,24(sp)
    8000795a:	e822                	sd	s0,16(sp)
    8000795c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000795e:	4f8230ef          	jal	8002ae56 <printf>
    80007962:	4529                	li	a0,10
    80007964:	1e0220ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80007968:	4511                	li	a0,4
    8000796a:	d9ef90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    8000796e:	002007b7          	lui	a5,0x200
    80007972:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007976:	4509                	li	a0,2
    80007978:	d90f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000797c:	c90f90ef          	jal	80000e0c <test_setup_except_function>
    80007980:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007984:	08200593          	li	a1,130
    80007988:	00027617          	auipc	a2,0x27
    8000798c:	26860613          	addi	a2,a2,616 # 8002ebf0 <__func__.0+0x1b38>
    80007990:	00026517          	auipc	a0,0x26
    80007994:	a2050513          	addi	a0,a0,-1504 # 8002d3b0 <__func__.0+0x2f8>
    80007998:	4be230ef          	jal	8002ae56 <printf>
    8000799c:	0004c797          	auipc	a5,0x4c
    800079a0:	6757c783          	lbu	a5,1653(a5) # 80054011 <excpt+0x1>
    800079a4:	0004c497          	auipc	s1,0x4c
    800079a8:	66c48493          	addi	s1,s1,1644 # 80054010 <excpt>
    800079ac:	00026597          	auipc	a1,0x26
    800079b0:	9dc58593          	addi	a1,a1,-1572 # 8002d388 <__func__.0+0x2d0>
    800079b4:	cf89                	beqz	a5,800079ce <wfi_exception_tests_18+0x88>
    800079b6:	6498                	ld	a4,8(s1)
    800079b8:	47d9                	li	a5,22
    800079ba:	00026597          	auipc	a1,0x26
    800079be:	9be58593          	addi	a1,a1,-1602 # 8002d378 <__func__.0+0x2c0>
    800079c2:	00f70663          	beq	a4,a5,800079ce <wfi_exception_tests_18+0x88>
    800079c6:	00026597          	auipc	a1,0x26
    800079ca:	9c258593          	addi	a1,a1,-1598 # 8002d388 <__func__.0+0x2d0>
    800079ce:	00026517          	auipc	a0,0x26
    800079d2:	9fa50513          	addi	a0,a0,-1542 # 8002d3c8 <__func__.0+0x310>
    800079d6:	480230ef          	jal	8002ae56 <printf>
    800079da:	0004c797          	auipc	a5,0x4c
    800079de:	6377c783          	lbu	a5,1591(a5) # 80054011 <excpt+0x1>
    800079e2:	c789                	beqz	a5,800079ec <wfi_exception_tests_18+0xa6>
    800079e4:	6498                	ld	a4,8(s1)
    800079e6:	47d9                	li	a5,22
    800079e8:	00f70c63          	beq	a4,a5,80007a00 <wfi_exception_tests_18+0xba>
    800079ec:	00026517          	auipc	a0,0x26
    800079f0:	9e450513          	addi	a0,a0,-1564 # 8002d3d0 <__func__.0+0x318>
    800079f4:	462230ef          	jal	8002ae56 <printf>
    800079f8:	02900513          	li	a0,41
    800079fc:	148220ef          	jal	80029b44 <putchar>
    80007a00:	4529                	li	a0,10
    80007a02:	142220ef          	jal	80029b44 <putchar>
    80007a06:	0004c417          	auipc	s0,0x4c
    80007a0a:	60b44403          	lbu	s0,1547(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007a0e:	00026597          	auipc	a1,0x26
    80007a12:	97a58593          	addi	a1,a1,-1670 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007a16:	cc11                	beqz	s0,80007a32 <wfi_exception_tests_18+0xec>
    80007a18:	6498                	ld	a4,8(s1)
    80007a1a:	47d9                	li	a5,22
    TEST_END();
    80007a1c:	00026597          	auipc	a1,0x26
    80007a20:	95c58593          	addi	a1,a1,-1700 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007a24:	00f70763          	beq	a4,a5,80007a32 <wfi_exception_tests_18+0xec>
    80007a28:	4401                	li	s0,0
    TEST_END();
    80007a2a:	00026597          	auipc	a1,0x26
    80007a2e:	95e58593          	addi	a1,a1,-1698 # 8002d388 <__func__.0+0x2d0>
    80007a32:	00026517          	auipc	a0,0x26
    80007a36:	9fe50513          	addi	a0,a0,-1538 # 8002d430 <__func__.0+0x378>
    80007a3a:	41c230ef          	jal	8002ae56 <printf>
    80007a3e:	4511                	li	a0,4
    80007a40:	cc8f90ef          	jal	80000f08 <goto_priv>
    80007a44:	de1f90ef          	jal	80001824 <reset_state>
}
    80007a48:	60e2                	ld	ra,24(sp)
    80007a4a:	8522                	mv	a0,s0
    80007a4c:	6442                	ld	s0,16(sp)
    80007a4e:	64a2                	ld	s1,8(sp)
    80007a50:	6105                	addi	sp,sp,32
    80007a52:	8082                	ret

0000000080007a54 <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007a54:	1101                	addi	sp,sp,-32

    TEST_START();
    80007a56:	00024597          	auipc	a1,0x24
    80007a5a:	e6258593          	addi	a1,a1,-414 # 8002b8b8 <__func__.4>
    80007a5e:	00026517          	auipc	a0,0x26
    80007a62:	93a50513          	addi	a0,a0,-1734 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    80007a66:	ec06                	sd	ra,24(sp)
    80007a68:	e822                	sd	s0,16(sp)
    80007a6a:	e426                	sd	s1,8(sp)
    TEST_START();
    80007a6c:	3ea230ef          	jal	8002ae56 <printf>
    80007a70:	4529                	li	a0,10
    80007a72:	0d2220ef          	jal	80029b44 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007a76:	4511                	li	a0,4
    80007a78:	c90f90ef          	jal	80000f08 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007a7c:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007a80:	002007b7          	lui	a5,0x200
    80007a84:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007a88:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007a8c:	4509                	li	a0,2
    80007a8e:	c7af90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a92:	b7af90ef          	jal	80000e0c <test_setup_except_function>
    80007a96:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007a9a:	0004c417          	auipc	s0,0x4c
    80007a9e:	57640413          	addi	s0,s0,1398 # 80054010 <excpt>
    80007aa2:	640c                	ld	a1,8(s0)
    80007aa4:	00026517          	auipc	a0,0x26
    80007aa8:	47c50513          	addi	a0,a0,1148 # 8002df20 <__func__.0+0xe68>
    80007aac:	3aa230ef          	jal	8002ae56 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007ab0:	08200593          	li	a1,130
    80007ab4:	00027617          	auipc	a2,0x27
    80007ab8:	18460613          	addi	a2,a2,388 # 8002ec38 <__func__.0+0x1b80>
    80007abc:	00026517          	auipc	a0,0x26
    80007ac0:	8f450513          	addi	a0,a0,-1804 # 8002d3b0 <__func__.0+0x2f8>
    80007ac4:	392230ef          	jal	8002ae56 <printf>
    80007ac8:	0004c797          	auipc	a5,0x4c
    80007acc:	5497c783          	lbu	a5,1353(a5) # 80054011 <excpt+0x1>
    80007ad0:	00026597          	auipc	a1,0x26
    80007ad4:	8b858593          	addi	a1,a1,-1864 # 8002d388 <__func__.0+0x2d0>
    80007ad8:	cf89                	beqz	a5,80007af2 <wfi_exception_tests_19+0x9e>
    80007ada:	6418                	ld	a4,8(s0)
    80007adc:	47d9                	li	a5,22
    80007ade:	00026597          	auipc	a1,0x26
    80007ae2:	89a58593          	addi	a1,a1,-1894 # 8002d378 <__func__.0+0x2c0>
    80007ae6:	00f70663          	beq	a4,a5,80007af2 <wfi_exception_tests_19+0x9e>
    80007aea:	00026597          	auipc	a1,0x26
    80007aee:	89e58593          	addi	a1,a1,-1890 # 8002d388 <__func__.0+0x2d0>
    80007af2:	00026517          	auipc	a0,0x26
    80007af6:	8d650513          	addi	a0,a0,-1834 # 8002d3c8 <__func__.0+0x310>
    80007afa:	35c230ef          	jal	8002ae56 <printf>
    80007afe:	0004c797          	auipc	a5,0x4c
    80007b02:	5137c783          	lbu	a5,1299(a5) # 80054011 <excpt+0x1>
    80007b06:	c789                	beqz	a5,80007b10 <wfi_exception_tests_19+0xbc>
    80007b08:	6418                	ld	a4,8(s0)
    80007b0a:	47d9                	li	a5,22
    80007b0c:	00f70c63          	beq	a4,a5,80007b24 <wfi_exception_tests_19+0xd0>
    80007b10:	00026517          	auipc	a0,0x26
    80007b14:	8c050513          	addi	a0,a0,-1856 # 8002d3d0 <__func__.0+0x318>
    80007b18:	33e230ef          	jal	8002ae56 <printf>
    80007b1c:	02900513          	li	a0,41
    80007b20:	024220ef          	jal	80029b44 <putchar>
    80007b24:	4529                	li	a0,10
    80007b26:	01e220ef          	jal	80029b44 <putchar>
    80007b2a:	0004c497          	auipc	s1,0x4c
    80007b2e:	4e74c483          	lbu	s1,1255(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007b32:	00026597          	auipc	a1,0x26
    80007b36:	85658593          	addi	a1,a1,-1962 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007b3a:	cc91                	beqz	s1,80007b56 <wfi_exception_tests_19+0x102>
    80007b3c:	6418                	ld	a4,8(s0)
    80007b3e:	47d9                	li	a5,22
    TEST_END();
    80007b40:	00026597          	auipc	a1,0x26
    80007b44:	83858593          	addi	a1,a1,-1992 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007b48:	00f70763          	beq	a4,a5,80007b56 <wfi_exception_tests_19+0x102>
    80007b4c:	4481                	li	s1,0
    TEST_END();
    80007b4e:	00026597          	auipc	a1,0x26
    80007b52:	83a58593          	addi	a1,a1,-1990 # 8002d388 <__func__.0+0x2d0>
    80007b56:	00026517          	auipc	a0,0x26
    80007b5a:	8da50513          	addi	a0,a0,-1830 # 8002d430 <__func__.0+0x378>
    80007b5e:	2f8230ef          	jal	8002ae56 <printf>
    80007b62:	4511                	li	a0,4
    80007b64:	ba4f90ef          	jal	80000f08 <goto_priv>
    80007b68:	cbdf90ef          	jal	80001824 <reset_state>
}
    80007b6c:	60e2                	ld	ra,24(sp)
    80007b6e:	6442                	ld	s0,16(sp)
    80007b70:	8526                	mv	a0,s1
    80007b72:	64a2                	ld	s1,8(sp)
    80007b74:	6105                	addi	sp,sp,32
    80007b76:	8082                	ret

0000000080007b78 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007b78:	1141                	addi	sp,sp,-16

    TEST_START();
    80007b7a:	00024597          	auipc	a1,0x24
    80007b7e:	d5658593          	addi	a1,a1,-682 # 8002b8d0 <__func__.3>
    80007b82:	00026517          	auipc	a0,0x26
    80007b86:	81650513          	addi	a0,a0,-2026 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007b8a:	e406                	sd	ra,8(sp)
    80007b8c:	e022                	sd	s0,0(sp)
    TEST_START();
    80007b8e:	2c8230ef          	jal	8002ae56 <printf>
    80007b92:	4529                	li	a0,10
    80007b94:	7b1210ef          	jal	80029b44 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007b98:	a74f90ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007b9c:	4511                	li	a0,4
    80007b9e:	b6af90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007ba2:	002007b7          	lui	a5,0x200
    80007ba6:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007baa:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007bae:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007bb2:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007bb6:	450d                	li	a0,3
    80007bb8:	b50f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007bbc:	a50f90ef          	jal	80000e0c <test_setup_except_function>
    80007bc0:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007bc4:	08200593          	li	a1,130
    80007bc8:	00027617          	auipc	a2,0x27
    80007bcc:	0b860613          	addi	a2,a2,184 # 8002ec80 <__func__.0+0x1bc8>
    80007bd0:	00025517          	auipc	a0,0x25
    80007bd4:	7e050513          	addi	a0,a0,2016 # 8002d3b0 <__func__.0+0x2f8>
    80007bd8:	27e230ef          	jal	8002ae56 <printf>
    80007bdc:	0004c797          	auipc	a5,0x4c
    80007be0:	4357c783          	lbu	a5,1077(a5) # 80054011 <excpt+0x1>
    80007be4:	00025597          	auipc	a1,0x25
    80007be8:	79458593          	addi	a1,a1,1940 # 8002d378 <__func__.0+0x2c0>
    80007bec:	c789                	beqz	a5,80007bf6 <wfi_exception_tests_20+0x7e>
    80007bee:	00025597          	auipc	a1,0x25
    80007bf2:	79a58593          	addi	a1,a1,1946 # 8002d388 <__func__.0+0x2d0>
    80007bf6:	00025517          	auipc	a0,0x25
    80007bfa:	7d250513          	addi	a0,a0,2002 # 8002d3c8 <__func__.0+0x310>
    80007bfe:	258230ef          	jal	8002ae56 <printf>
    80007c02:	0004c797          	auipc	a5,0x4c
    80007c06:	40f7c783          	lbu	a5,1039(a5) # 80054011 <excpt+0x1>
    80007c0a:	e7a1                	bnez	a5,80007c52 <wfi_exception_tests_20+0xda>
    80007c0c:	4529                	li	a0,10
    80007c0e:	737210ef          	jal	80029b44 <putchar>
    80007c12:	0004c797          	auipc	a5,0x4c
    80007c16:	3ff7c783          	lbu	a5,1023(a5) # 80054011 <excpt+0x1>
    80007c1a:	e795                	bnez	a5,80007c46 <wfi_exception_tests_20+0xce>
    80007c1c:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007c1e:	00025597          	auipc	a1,0x25
    80007c22:	75a58593          	addi	a1,a1,1882 # 8002d378 <__func__.0+0x2c0>
    80007c26:	00026517          	auipc	a0,0x26
    80007c2a:	80a50513          	addi	a0,a0,-2038 # 8002d430 <__func__.0+0x378>
    80007c2e:	228230ef          	jal	8002ae56 <printf>
    80007c32:	4511                	li	a0,4
    80007c34:	ad4f90ef          	jal	80000f08 <goto_priv>
    80007c38:	bedf90ef          	jal	80001824 <reset_state>
}
    80007c3c:	60a2                	ld	ra,8(sp)
    80007c3e:	8522                	mv	a0,s0
    80007c40:	6402                	ld	s0,0(sp)
    80007c42:	0141                	addi	sp,sp,16
    80007c44:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007c46:	4401                	li	s0,0
    TEST_END();
    80007c48:	00025597          	auipc	a1,0x25
    80007c4c:	74058593          	addi	a1,a1,1856 # 8002d388 <__func__.0+0x2d0>
    80007c50:	bfd9                	j	80007c26 <wfi_exception_tests_20+0xae>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007c52:	00025517          	auipc	a0,0x25
    80007c56:	77e50513          	addi	a0,a0,1918 # 8002d3d0 <__func__.0+0x318>
    80007c5a:	1fc230ef          	jal	8002ae56 <printf>
    80007c5e:	02900513          	li	a0,41
    80007c62:	6e3210ef          	jal	80029b44 <putchar>
    80007c66:	b75d                	j	80007c0c <wfi_exception_tests_20+0x94>

0000000080007c68 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007c68:	1101                	addi	sp,sp,-32

    TEST_START();
    80007c6a:	00024597          	auipc	a1,0x24
    80007c6e:	c7e58593          	addi	a1,a1,-898 # 8002b8e8 <__func__.2>
    80007c72:	00025517          	auipc	a0,0x25
    80007c76:	72650513          	addi	a0,a0,1830 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007c7a:	ec06                	sd	ra,24(sp)
    80007c7c:	e822                	sd	s0,16(sp)
    80007c7e:	e426                	sd	s1,8(sp)
    TEST_START();
    80007c80:	1d6230ef          	jal	8002ae56 <printf>
    80007c84:	4529                	li	a0,10
    80007c86:	6bf210ef          	jal	80029b44 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007c8a:	982f90ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007c8e:	4511                	li	a0,4
    80007c90:	a78f90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007c94:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007c98:	002007b7          	lui	a5,0x200
    80007c9c:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007ca0:	4505                	li	a0,1
    80007ca2:	a66f90ef          	jal	80000f08 <goto_priv>
    80007ca6:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007caa:	08200593          	li	a1,130
    80007cae:	00027617          	auipc	a2,0x27
    80007cb2:	03a60613          	addi	a2,a2,58 # 8002ece8 <__func__.0+0x1c30>
    80007cb6:	00025517          	auipc	a0,0x25
    80007cba:	6fa50513          	addi	a0,a0,1786 # 8002d3b0 <__func__.0+0x2f8>
    80007cbe:	198230ef          	jal	8002ae56 <printf>
    80007cc2:	0004c797          	auipc	a5,0x4c
    80007cc6:	34f7c783          	lbu	a5,847(a5) # 80054011 <excpt+0x1>
    80007cca:	0004c497          	auipc	s1,0x4c
    80007cce:	34648493          	addi	s1,s1,838 # 80054010 <excpt>
    80007cd2:	00025597          	auipc	a1,0x25
    80007cd6:	6b658593          	addi	a1,a1,1718 # 8002d388 <__func__.0+0x2d0>
    80007cda:	cf89                	beqz	a5,80007cf4 <wfi_exception_tests_21+0x8c>
    80007cdc:	6498                	ld	a4,8(s1)
    80007cde:	4789                	li	a5,2
    80007ce0:	00025597          	auipc	a1,0x25
    80007ce4:	69858593          	addi	a1,a1,1688 # 8002d378 <__func__.0+0x2c0>
    80007ce8:	00f70663          	beq	a4,a5,80007cf4 <wfi_exception_tests_21+0x8c>
    80007cec:	00025597          	auipc	a1,0x25
    80007cf0:	69c58593          	addi	a1,a1,1692 # 8002d388 <__func__.0+0x2d0>
    80007cf4:	00025517          	auipc	a0,0x25
    80007cf8:	6d450513          	addi	a0,a0,1748 # 8002d3c8 <__func__.0+0x310>
    80007cfc:	15a230ef          	jal	8002ae56 <printf>
    80007d00:	0004c797          	auipc	a5,0x4c
    80007d04:	3117c783          	lbu	a5,785(a5) # 80054011 <excpt+0x1>
    80007d08:	c789                	beqz	a5,80007d12 <wfi_exception_tests_21+0xaa>
    80007d0a:	6498                	ld	a4,8(s1)
    80007d0c:	4789                	li	a5,2
    80007d0e:	00f70c63          	beq	a4,a5,80007d26 <wfi_exception_tests_21+0xbe>
    80007d12:	00025517          	auipc	a0,0x25
    80007d16:	6be50513          	addi	a0,a0,1726 # 8002d3d0 <__func__.0+0x318>
    80007d1a:	13c230ef          	jal	8002ae56 <printf>
    80007d1e:	02900513          	li	a0,41
    80007d22:	623210ef          	jal	80029b44 <putchar>
    80007d26:	4529                	li	a0,10
    80007d28:	61d210ef          	jal	80029b44 <putchar>
    80007d2c:	0004c417          	auipc	s0,0x4c
    80007d30:	2e544403          	lbu	s0,741(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007d34:	00025597          	auipc	a1,0x25
    80007d38:	65458593          	addi	a1,a1,1620 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d3c:	cc11                	beqz	s0,80007d58 <wfi_exception_tests_21+0xf0>
    80007d3e:	6498                	ld	a4,8(s1)
    80007d40:	4789                	li	a5,2
    TEST_END();
    80007d42:	00025597          	auipc	a1,0x25
    80007d46:	63658593          	addi	a1,a1,1590 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d4a:	00f70763          	beq	a4,a5,80007d58 <wfi_exception_tests_21+0xf0>
    80007d4e:	4401                	li	s0,0
    TEST_END();
    80007d50:	00025597          	auipc	a1,0x25
    80007d54:	63858593          	addi	a1,a1,1592 # 8002d388 <__func__.0+0x2d0>
    80007d58:	00025517          	auipc	a0,0x25
    80007d5c:	6d850513          	addi	a0,a0,1752 # 8002d430 <__func__.0+0x378>
    80007d60:	0f6230ef          	jal	8002ae56 <printf>
    80007d64:	4511                	li	a0,4
    80007d66:	9a2f90ef          	jal	80000f08 <goto_priv>
    80007d6a:	abbf90ef          	jal	80001824 <reset_state>
}
    80007d6e:	60e2                	ld	ra,24(sp)
    80007d70:	8522                	mv	a0,s0
    80007d72:	6442                	ld	s0,16(sp)
    80007d74:	64a2                	ld	s1,8(sp)
    80007d76:	6105                	addi	sp,sp,32
    80007d78:	8082                	ret

0000000080007d7a <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007d7a:	1101                	addi	sp,sp,-32

    TEST_START();
    80007d7c:	00024597          	auipc	a1,0x24
    80007d80:	b8458593          	addi	a1,a1,-1148 # 8002b900 <__func__.1>
    80007d84:	00025517          	auipc	a0,0x25
    80007d88:	61450513          	addi	a0,a0,1556 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    80007d8c:	ec06                	sd	ra,24(sp)
    80007d8e:	e822                	sd	s0,16(sp)
    80007d90:	e426                	sd	s1,8(sp)
    TEST_START();
    80007d92:	0c4230ef          	jal	8002ae56 <printf>
    80007d96:	4529                	li	a0,10
    80007d98:	5ad210ef          	jal	80029b44 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007d9c:	870f90ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007da0:	4511                	li	a0,4
    80007da2:	966f90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0);
    80007da6:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007daa:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007dae:	002007b7          	lui	a5,0x200
    80007db2:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007db6:	4505                	li	a0,1
    80007db8:	950f90ef          	jal	80000f08 <goto_priv>
    80007dbc:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007dc0:	08200593          	li	a1,130
    80007dc4:	00027617          	auipc	a2,0x27
    80007dc8:	f2460613          	addi	a2,a2,-220 # 8002ece8 <__func__.0+0x1c30>
    80007dcc:	00025517          	auipc	a0,0x25
    80007dd0:	5e450513          	addi	a0,a0,1508 # 8002d3b0 <__func__.0+0x2f8>
    80007dd4:	082230ef          	jal	8002ae56 <printf>
    80007dd8:	0004c797          	auipc	a5,0x4c
    80007ddc:	2397c783          	lbu	a5,569(a5) # 80054011 <excpt+0x1>
    80007de0:	0004c497          	auipc	s1,0x4c
    80007de4:	23048493          	addi	s1,s1,560 # 80054010 <excpt>
    80007de8:	00025597          	auipc	a1,0x25
    80007dec:	5a058593          	addi	a1,a1,1440 # 8002d388 <__func__.0+0x2d0>
    80007df0:	cf89                	beqz	a5,80007e0a <wfi_exception_tests_22+0x90>
    80007df2:	6498                	ld	a4,8(s1)
    80007df4:	4789                	li	a5,2
    80007df6:	00025597          	auipc	a1,0x25
    80007dfa:	58258593          	addi	a1,a1,1410 # 8002d378 <__func__.0+0x2c0>
    80007dfe:	00f70663          	beq	a4,a5,80007e0a <wfi_exception_tests_22+0x90>
    80007e02:	00025597          	auipc	a1,0x25
    80007e06:	58658593          	addi	a1,a1,1414 # 8002d388 <__func__.0+0x2d0>
    80007e0a:	00025517          	auipc	a0,0x25
    80007e0e:	5be50513          	addi	a0,a0,1470 # 8002d3c8 <__func__.0+0x310>
    80007e12:	044230ef          	jal	8002ae56 <printf>
    80007e16:	0004c797          	auipc	a5,0x4c
    80007e1a:	1fb7c783          	lbu	a5,507(a5) # 80054011 <excpt+0x1>
    80007e1e:	c789                	beqz	a5,80007e28 <wfi_exception_tests_22+0xae>
    80007e20:	6498                	ld	a4,8(s1)
    80007e22:	4789                	li	a5,2
    80007e24:	00f70c63          	beq	a4,a5,80007e3c <wfi_exception_tests_22+0xc2>
    80007e28:	00025517          	auipc	a0,0x25
    80007e2c:	5a850513          	addi	a0,a0,1448 # 8002d3d0 <__func__.0+0x318>
    80007e30:	026230ef          	jal	8002ae56 <printf>
    80007e34:	02900513          	li	a0,41
    80007e38:	50d210ef          	jal	80029b44 <putchar>
    80007e3c:	4529                	li	a0,10
    80007e3e:	507210ef          	jal	80029b44 <putchar>
    80007e42:	0004c417          	auipc	s0,0x4c
    80007e46:	1cf44403          	lbu	s0,463(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007e4a:	00025597          	auipc	a1,0x25
    80007e4e:	53e58593          	addi	a1,a1,1342 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e52:	cc11                	beqz	s0,80007e6e <wfi_exception_tests_22+0xf4>
    80007e54:	6498                	ld	a4,8(s1)
    80007e56:	4789                	li	a5,2
    TEST_END();
    80007e58:	00025597          	auipc	a1,0x25
    80007e5c:	52058593          	addi	a1,a1,1312 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e60:	00f70763          	beq	a4,a5,80007e6e <wfi_exception_tests_22+0xf4>
    80007e64:	4401                	li	s0,0
    TEST_END();
    80007e66:	00025597          	auipc	a1,0x25
    80007e6a:	52258593          	addi	a1,a1,1314 # 8002d388 <__func__.0+0x2d0>
    80007e6e:	00025517          	auipc	a0,0x25
    80007e72:	5c250513          	addi	a0,a0,1474 # 8002d430 <__func__.0+0x378>
    80007e76:	7e1220ef          	jal	8002ae56 <printf>
    80007e7a:	4511                	li	a0,4
    80007e7c:	88cf90ef          	jal	80000f08 <goto_priv>
    80007e80:	9a5f90ef          	jal	80001824 <reset_state>
}
    80007e84:	60e2                	ld	ra,24(sp)
    80007e86:	8522                	mv	a0,s0
    80007e88:	6442                	ld	s0,16(sp)
    80007e8a:	64a2                	ld	s1,8(sp)
    80007e8c:	6105                	addi	sp,sp,32
    80007e8e:	8082                	ret

0000000080007e90 <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    80007e90:	1141                	addi	sp,sp,-16

    TEST_START();
    80007e92:	00024597          	auipc	a1,0x24
    80007e96:	a8658593          	addi	a1,a1,-1402 # 8002b918 <__func__.0>
    80007e9a:	00025517          	auipc	a0,0x25
    80007e9e:	4fe50513          	addi	a0,a0,1278 # 8002d398 <__func__.0+0x2e0>
bool wfi_exception_tests_23() {
    80007ea2:	e406                	sd	ra,8(sp)
    TEST_START();
    80007ea4:	7b3220ef          	jal	8002ae56 <printf>
    80007ea8:	4529                	li	a0,10
    80007eaa:	49b210ef          	jal	80029b44 <putchar>



    TEST_END();
    80007eae:	00025597          	auipc	a1,0x25
    80007eb2:	4ca58593          	addi	a1,a1,1226 # 8002d378 <__func__.0+0x2c0>
    80007eb6:	00025517          	auipc	a0,0x25
    80007eba:	57a50513          	addi	a0,a0,1402 # 8002d430 <__func__.0+0x378>
    80007ebe:	799220ef          	jal	8002ae56 <printf>
    80007ec2:	4511                	li	a0,4
    80007ec4:	844f90ef          	jal	80000f08 <goto_priv>
    80007ec8:	95df90ef          	jal	80001824 <reset_state>
}
    80007ecc:	60a2                	ld	ra,8(sp)
    80007ece:	4505                	li	a0,1
    80007ed0:	0141                	addi	sp,sp,16
    80007ed2:	8082                	ret

0000000080007ed4 <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80007ed4:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80007ed6:	00024597          	auipc	a1,0x24
    80007eda:	a5a58593          	addi	a1,a1,-1446 # 8002b930 <__func__.3>
    80007ede:	00025517          	auipc	a0,0x25
    80007ee2:	4ba50513          	addi	a0,a0,1210 # 8002d398 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    80007ee6:	f406                	sd	ra,40(sp)
    80007ee8:	f022                	sd	s0,32(sp)
    80007eea:	ec26                	sd	s1,24(sp)
    80007eec:	e84a                	sd	s2,16(sp)
    80007eee:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007ef0:	767220ef          	jal	8002ae56 <printf>
    80007ef4:	4529                	li	a0,10
    80007ef6:	44f210ef          	jal	80029b44 <putchar>

    hspt_init();        
    80007efa:	ee6f80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80007efe:	450d                	li	a0,3
    80007f00:	808f90ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007f04:	f09f80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007f08:	400197b7          	lui	a5,0x40019
    80007f0c:	078a                	slli	a5,a5,0x2
    80007f0e:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80007f12:	00027617          	auipc	a2,0x27
    80007f16:	e1e60613          	addi	a2,a2,-482 # 8002ed30 <__func__.0+0x1c78>
    80007f1a:	08200593          	li	a1,130
    80007f1e:	00025517          	auipc	a0,0x25
    80007f22:	49250513          	addi	a0,a0,1170 # 8002d3b0 <__func__.0+0x2f8>
    80007f26:	731220ef          	jal	8002ae56 <printf>
    80007f2a:	0004c797          	auipc	a5,0x4c
    80007f2e:	0e77c783          	lbu	a5,231(a5) # 80054011 <excpt+0x1>
    80007f32:	0004c417          	auipc	s0,0x4c
    80007f36:	0de40413          	addi	s0,s0,222 # 80054010 <excpt>
    80007f3a:	e399                	bnez	a5,80007f40 <tinst_tests_pf+0x6c>
    80007f3c:	6000106f          	j	8000953c <tinst_tests_pf+0x1668>
    80007f40:	6418                	ld	a4,8(s0)
    80007f42:	47b5                	li	a5,13
    80007f44:	00025597          	auipc	a1,0x25
    80007f48:	44458593          	addi	a1,a1,1092 # 8002d388 <__func__.0+0x2d0>
    80007f4c:	00f71463          	bne	a4,a5,80007f54 <tinst_tests_pf+0x80>
    80007f50:	5a40106f          	j	800094f4 <tinst_tests_pf+0x1620>
    80007f54:	00025517          	auipc	a0,0x25
    80007f58:	47450513          	addi	a0,a0,1140 # 8002d3c8 <__func__.0+0x310>
    80007f5c:	6fb220ef          	jal	8002ae56 <printf>
    80007f60:	0004c797          	auipc	a5,0x4c
    80007f64:	0b17c783          	lbu	a5,177(a5) # 80054011 <excpt+0x1>
    80007f68:	c799                	beqz	a5,80007f76 <tinst_tests_pf+0xa2>
    80007f6a:	6418                	ld	a4,8(s0)
    80007f6c:	47b5                	li	a5,13
    80007f6e:	00f71463          	bne	a4,a5,80007f76 <tinst_tests_pf+0xa2>
    80007f72:	6260106f          	j	80009598 <tinst_tests_pf+0x16c4>
    80007f76:	00025517          	auipc	a0,0x25
    80007f7a:	45a50513          	addi	a0,a0,1114 # 8002d3d0 <__func__.0+0x318>
    80007f7e:	6d9220ef          	jal	8002ae56 <printf>
    80007f82:	02900513          	li	a0,41
    80007f86:	3bf210ef          	jal	80029b44 <putchar>
    80007f8a:	4529                	li	a0,10
    80007f8c:	3b9210ef          	jal	80029b44 <putchar>
    80007f90:	0004c797          	auipc	a5,0x4c
    80007f94:	0817c783          	lbu	a5,129(a5) # 80054011 <excpt+0x1>
    80007f98:	c399                	beqz	a5,80007f9e <tinst_tests_pf+0xca>
    80007f9a:	5ae0106f          	j	80009548 <tinst_tests_pf+0x1674>
    80007f9e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007fa0:	e6df80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007fa4:	400197b7          	lui	a5,0x40019
    80007fa8:	078a                	slli	a5,a5,0x2
    80007faa:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80007fae:	00027617          	auipc	a2,0x27
    80007fb2:	e0260613          	addi	a2,a2,-510 # 8002edb0 <__func__.0+0x1cf8>
    80007fb6:	08200593          	li	a1,130
    80007fba:	00025517          	auipc	a0,0x25
    80007fbe:	3f650513          	addi	a0,a0,1014 # 8002d3b0 <__func__.0+0x2f8>
    80007fc2:	695220ef          	jal	8002ae56 <printf>
    80007fc6:	0004c797          	auipc	a5,0x4c
    80007fca:	04b7c783          	lbu	a5,75(a5) # 80054011 <excpt+0x1>
    80007fce:	e399                	bnez	a5,80007fd4 <tinst_tests_pf+0x100>
    80007fd0:	64c0106f          	j	8000961c <tinst_tests_pf+0x1748>
    80007fd4:	6418                	ld	a4,8(s0)
    80007fd6:	47b5                	li	a5,13
    80007fd8:	00025597          	auipc	a1,0x25
    80007fdc:	3b058593          	addi	a1,a1,944 # 8002d388 <__func__.0+0x2d0>
    80007fe0:	00f71463          	bne	a4,a5,80007fe8 <tinst_tests_pf+0x114>
    80007fe4:	5f00106f          	j	800095d4 <tinst_tests_pf+0x1700>
    80007fe8:	00025517          	auipc	a0,0x25
    80007fec:	3e050513          	addi	a0,a0,992 # 8002d3c8 <__func__.0+0x310>
    80007ff0:	667220ef          	jal	8002ae56 <printf>
    80007ff4:	0004c797          	auipc	a5,0x4c
    80007ff8:	01d7c783          	lbu	a5,29(a5) # 80054011 <excpt+0x1>
    80007ffc:	c799                	beqz	a5,8000800a <tinst_tests_pf+0x136>
    80007ffe:	6418                	ld	a4,8(s0)
    80008000:	47b5                	li	a5,13
    80008002:	00f71463          	bne	a4,a5,8000800a <tinst_tests_pf+0x136>
    80008006:	23d0106f          	j	80009a42 <tinst_tests_pf+0x1b6e>
    8000800a:	00025517          	auipc	a0,0x25
    8000800e:	3c650513          	addi	a0,a0,966 # 8002d3d0 <__func__.0+0x318>
    80008012:	645220ef          	jal	8002ae56 <printf>
    80008016:	02900513          	li	a0,41
    8000801a:	32b210ef          	jal	80029b44 <putchar>
    8000801e:	4529                	li	a0,10
    80008020:	325210ef          	jal	80029b44 <putchar>
    80008024:	00090e63          	beqz	s2,80008040 <tinst_tests_pf+0x16c>
    80008028:	0004c797          	auipc	a5,0x4c
    8000802c:	fe97c783          	lbu	a5,-23(a5) # 80054011 <excpt+0x1>
    80008030:	c799                	beqz	a5,8000803e <tinst_tests_pf+0x16a>
    80008032:	6418                	ld	a4,8(s0)
    80008034:	47b5                	li	a5,13
    80008036:	00f71463          	bne	a4,a5,8000803e <tinst_tests_pf+0x16a>
    8000803a:	64d0106f          	j	80009e86 <tinst_tests_pf+0x1fb2>
    8000803e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008040:	dcdf80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80008044:	400197b7          	lui	a5,0x40019
    80008048:	078a                	slli	a5,a5,0x2
    8000804a:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000804e:	00027617          	auipc	a2,0x27
    80008052:	da260613          	addi	a2,a2,-606 # 8002edf0 <__func__.0+0x1d38>
    80008056:	08200593          	li	a1,130
    8000805a:	00025517          	auipc	a0,0x25
    8000805e:	35650513          	addi	a0,a0,854 # 8002d3b0 <__func__.0+0x2f8>
    80008062:	5f5220ef          	jal	8002ae56 <printf>
    80008066:	0004c797          	auipc	a5,0x4c
    8000806a:	fab7c783          	lbu	a5,-85(a5) # 80054011 <excpt+0x1>
    8000806e:	e399                	bnez	a5,80008074 <tinst_tests_pf+0x1a0>
    80008070:	6000106f          	j	80009670 <tinst_tests_pf+0x179c>
    80008074:	6418                	ld	a4,8(s0)
    80008076:	47b5                	li	a5,13
    80008078:	00025597          	auipc	a1,0x25
    8000807c:	31058593          	addi	a1,a1,784 # 8002d388 <__func__.0+0x2d0>
    80008080:	00f71463          	bne	a4,a5,80008088 <tinst_tests_pf+0x1b4>
    80008084:	5a40106f          	j	80009628 <tinst_tests_pf+0x1754>
    80008088:	00025517          	auipc	a0,0x25
    8000808c:	34050513          	addi	a0,a0,832 # 8002d3c8 <__func__.0+0x310>
    80008090:	5c7220ef          	jal	8002ae56 <printf>
    80008094:	0004c797          	auipc	a5,0x4c
    80008098:	f7d7c783          	lbu	a5,-131(a5) # 80054011 <excpt+0x1>
    8000809c:	c799                	beqz	a5,800080aa <tinst_tests_pf+0x1d6>
    8000809e:	6418                	ld	a4,8(s0)
    800080a0:	47b5                	li	a5,13
    800080a2:	00f71463          	bne	a4,a5,800080aa <tinst_tests_pf+0x1d6>
    800080a6:	6990106f          	j	80009f3e <tinst_tests_pf+0x206a>
    800080aa:	00025517          	auipc	a0,0x25
    800080ae:	32650513          	addi	a0,a0,806 # 8002d3d0 <__func__.0+0x318>
    800080b2:	5a5220ef          	jal	8002ae56 <printf>
    800080b6:	02900513          	li	a0,41
    800080ba:	28b210ef          	jal	80029b44 <putchar>
    800080be:	4529                	li	a0,10
    800080c0:	285210ef          	jal	80029b44 <putchar>
    800080c4:	00090e63          	beqz	s2,800080e0 <tinst_tests_pf+0x20c>
    800080c8:	0004c797          	auipc	a5,0x4c
    800080cc:	f497c783          	lbu	a5,-183(a5) # 80054011 <excpt+0x1>
    800080d0:	c799                	beqz	a5,800080de <tinst_tests_pf+0x20a>
    800080d2:	6418                	ld	a4,8(s0)
    800080d4:	47b5                	li	a5,13
    800080d6:	00f71463          	bne	a4,a5,800080de <tinst_tests_pf+0x20a>
    800080da:	5eb0106f          	j	80009ec4 <tinst_tests_pf+0x1ff0>
    800080de:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080e0:	d2df80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    800080e4:	400197b7          	lui	a5,0x40019
    800080e8:	078a                	slli	a5,a5,0x2
    800080ea:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800080ee:	00027617          	auipc	a2,0x27
    800080f2:	d4260613          	addi	a2,a2,-702 # 8002ee30 <__func__.0+0x1d78>
    800080f6:	08200593          	li	a1,130
    800080fa:	00025517          	auipc	a0,0x25
    800080fe:	2b650513          	addi	a0,a0,694 # 8002d3b0 <__func__.0+0x2f8>
    80008102:	555220ef          	jal	8002ae56 <printf>
    80008106:	0004c797          	auipc	a5,0x4c
    8000810a:	f0b7c783          	lbu	a5,-245(a5) # 80054011 <excpt+0x1>
    8000810e:	e399                	bnez	a5,80008114 <tinst_tests_pf+0x240>
    80008110:	5b40106f          	j	800096c4 <tinst_tests_pf+0x17f0>
    80008114:	6418                	ld	a4,8(s0)
    80008116:	47b5                	li	a5,13
    80008118:	00025597          	auipc	a1,0x25
    8000811c:	27058593          	addi	a1,a1,624 # 8002d388 <__func__.0+0x2d0>
    80008120:	00f71463          	bne	a4,a5,80008128 <tinst_tests_pf+0x254>
    80008124:	5580106f          	j	8000967c <tinst_tests_pf+0x17a8>
    80008128:	00025517          	auipc	a0,0x25
    8000812c:	2a050513          	addi	a0,a0,672 # 8002d3c8 <__func__.0+0x310>
    80008130:	527220ef          	jal	8002ae56 <printf>
    80008134:	0004c797          	auipc	a5,0x4c
    80008138:	edd7c783          	lbu	a5,-291(a5) # 80054011 <excpt+0x1>
    8000813c:	c799                	beqz	a5,8000814a <tinst_tests_pf+0x276>
    8000813e:	6418                	ld	a4,8(s0)
    80008140:	47b5                	li	a5,13
    80008142:	00f71463          	bne	a4,a5,8000814a <tinst_tests_pf+0x276>
    80008146:	6990106f          	j	80009fde <tinst_tests_pf+0x210a>
    8000814a:	00025517          	auipc	a0,0x25
    8000814e:	28650513          	addi	a0,a0,646 # 8002d3d0 <__func__.0+0x318>
    80008152:	505220ef          	jal	8002ae56 <printf>
    80008156:	02900513          	li	a0,41
    8000815a:	1eb210ef          	jal	80029b44 <putchar>
    8000815e:	4529                	li	a0,10
    80008160:	1e5210ef          	jal	80029b44 <putchar>
    80008164:	00090e63          	beqz	s2,80008180 <tinst_tests_pf+0x2ac>
    80008168:	0004c797          	auipc	a5,0x4c
    8000816c:	ea97c783          	lbu	a5,-343(a5) # 80054011 <excpt+0x1>
    80008170:	c799                	beqz	a5,8000817e <tinst_tests_pf+0x2aa>
    80008172:	6418                	ld	a4,8(s0)
    80008174:	47b5                	li	a5,13
    80008176:	00f71463          	bne	a4,a5,8000817e <tinst_tests_pf+0x2aa>
    8000817a:	5890106f          	j	80009f02 <tinst_tests_pf+0x202e>
    8000817e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008180:	c8df80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80008184:	400197b7          	lui	a5,0x40019
    80008188:	078a                	slli	a5,a5,0x2
    8000818a:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000818e:	00027617          	auipc	a2,0x27
    80008192:	ce260613          	addi	a2,a2,-798 # 8002ee70 <__func__.0+0x1db8>
    80008196:	08200593          	li	a1,130
    8000819a:	00025517          	auipc	a0,0x25
    8000819e:	21650513          	addi	a0,a0,534 # 8002d3b0 <__func__.0+0x2f8>
    800081a2:	4b5220ef          	jal	8002ae56 <printf>
    800081a6:	0004c797          	auipc	a5,0x4c
    800081aa:	e6b7c783          	lbu	a5,-405(a5) # 80054011 <excpt+0x1>
    800081ae:	e399                	bnez	a5,800081b4 <tinst_tests_pf+0x2e0>
    800081b0:	5680106f          	j	80009718 <tinst_tests_pf+0x1844>
    800081b4:	6418                	ld	a4,8(s0)
    800081b6:	47b5                	li	a5,13
    800081b8:	00025597          	auipc	a1,0x25
    800081bc:	1d058593          	addi	a1,a1,464 # 8002d388 <__func__.0+0x2d0>
    800081c0:	00f71463          	bne	a4,a5,800081c8 <tinst_tests_pf+0x2f4>
    800081c4:	50c0106f          	j	800096d0 <tinst_tests_pf+0x17fc>
    800081c8:	00025517          	auipc	a0,0x25
    800081cc:	20050513          	addi	a0,a0,512 # 8002d3c8 <__func__.0+0x310>
    800081d0:	487220ef          	jal	8002ae56 <printf>
    800081d4:	0004c797          	auipc	a5,0x4c
    800081d8:	e3d7c783          	lbu	a5,-451(a5) # 80054011 <excpt+0x1>
    800081dc:	c799                	beqz	a5,800081ea <tinst_tests_pf+0x316>
    800081de:	6418                	ld	a4,8(s0)
    800081e0:	47b5                	li	a5,13
    800081e2:	00f71463          	bne	a4,a5,800081ea <tinst_tests_pf+0x316>
    800081e6:	68b0106f          	j	8000a070 <tinst_tests_pf+0x219c>
    800081ea:	00025517          	auipc	a0,0x25
    800081ee:	1e650513          	addi	a0,a0,486 # 8002d3d0 <__func__.0+0x318>
    800081f2:	465220ef          	jal	8002ae56 <printf>
    800081f6:	02900513          	li	a0,41
    800081fa:	14b210ef          	jal	80029b44 <putchar>
    800081fe:	4529                	li	a0,10
    80008200:	145210ef          	jal	80029b44 <putchar>
    80008204:	00090a63          	beqz	s2,80008218 <tinst_tests_pf+0x344>
    80008208:	0004c797          	auipc	a5,0x4c
    8000820c:	e097c783          	lbu	a5,-503(a5) # 80054011 <excpt+0x1>
    80008210:	c399                	beqz	a5,80008216 <tinst_tests_pf+0x342>
    80008212:	06d0106f          	j	80009a7e <tinst_tests_pf+0x1baa>
    80008216:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008218:	bf5f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000821c:	400197b7          	lui	a5,0x40019
    80008220:	078a                	slli	a5,a5,0x2
    80008222:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008226:	00027617          	auipc	a2,0x27
    8000822a:	c8a60613          	addi	a2,a2,-886 # 8002eeb0 <__func__.0+0x1df8>
    8000822e:	08200593          	li	a1,130
    80008232:	00025517          	auipc	a0,0x25
    80008236:	17e50513          	addi	a0,a0,382 # 8002d3b0 <__func__.0+0x2f8>
    8000823a:	41d220ef          	jal	8002ae56 <printf>
    8000823e:	0004c797          	auipc	a5,0x4c
    80008242:	dd37c783          	lbu	a5,-557(a5) # 80054011 <excpt+0x1>
    80008246:	e399                	bnez	a5,8000824c <tinst_tests_pf+0x378>
    80008248:	5240106f          	j	8000976c <tinst_tests_pf+0x1898>
    8000824c:	6418                	ld	a4,8(s0)
    8000824e:	47b5                	li	a5,13
    80008250:	00025597          	auipc	a1,0x25
    80008254:	13858593          	addi	a1,a1,312 # 8002d388 <__func__.0+0x2d0>
    80008258:	00f71463          	bne	a4,a5,80008260 <tinst_tests_pf+0x38c>
    8000825c:	4c80106f          	j	80009724 <tinst_tests_pf+0x1850>
    80008260:	00025517          	auipc	a0,0x25
    80008264:	16850513          	addi	a0,a0,360 # 8002d3c8 <__func__.0+0x310>
    80008268:	3ef220ef          	jal	8002ae56 <printf>
    8000826c:	0004c797          	auipc	a5,0x4c
    80008270:	da57c783          	lbu	a5,-603(a5) # 80054011 <excpt+0x1>
    80008274:	c799                	beqz	a5,80008282 <tinst_tests_pf+0x3ae>
    80008276:	6418                	ld	a4,8(s0)
    80008278:	47b5                	li	a5,13
    8000827a:	00f71463          	bne	a4,a5,80008282 <tinst_tests_pf+0x3ae>
    8000827e:	6890106f          	j	8000a106 <tinst_tests_pf+0x2232>
    80008282:	00025517          	auipc	a0,0x25
    80008286:	14e50513          	addi	a0,a0,334 # 8002d3d0 <__func__.0+0x318>
    8000828a:	3cd220ef          	jal	8002ae56 <printf>
    8000828e:	02900513          	li	a0,41
    80008292:	0b3210ef          	jal	80029b44 <putchar>
    80008296:	4529                	li	a0,10
    80008298:	0ad210ef          	jal	80029b44 <putchar>
    8000829c:	00090a63          	beqz	s2,800082b0 <tinst_tests_pf+0x3dc>
    800082a0:	0004c797          	auipc	a5,0x4c
    800082a4:	d717c783          	lbu	a5,-655(a5) # 80054011 <excpt+0x1>
    800082a8:	c399                	beqz	a5,800082ae <tinst_tests_pf+0x3da>
    800082aa:	0850106f          	j	80009b2e <tinst_tests_pf+0x1c5a>
    800082ae:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800082b0:	b5df80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800082b4:	400197b7          	lui	a5,0x40019
    800082b8:	078a                	slli	a5,a5,0x2
    800082ba:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800082be:	00027617          	auipc	a2,0x27
    800082c2:	c3260613          	addi	a2,a2,-974 # 8002eef0 <__func__.0+0x1e38>
    800082c6:	08200593          	li	a1,130
    800082ca:	00025517          	auipc	a0,0x25
    800082ce:	0e650513          	addi	a0,a0,230 # 8002d3b0 <__func__.0+0x2f8>
    800082d2:	385220ef          	jal	8002ae56 <printf>
    800082d6:	0004c797          	auipc	a5,0x4c
    800082da:	d3b7c783          	lbu	a5,-709(a5) # 80054011 <excpt+0x1>
    800082de:	e399                	bnez	a5,800082e4 <tinst_tests_pf+0x410>
    800082e0:	4e00106f          	j	800097c0 <tinst_tests_pf+0x18ec>
    800082e4:	6418                	ld	a4,8(s0)
    800082e6:	47b5                	li	a5,13
    800082e8:	00025597          	auipc	a1,0x25
    800082ec:	0a058593          	addi	a1,a1,160 # 8002d388 <__func__.0+0x2d0>
    800082f0:	00f71463          	bne	a4,a5,800082f8 <tinst_tests_pf+0x424>
    800082f4:	4840106f          	j	80009778 <tinst_tests_pf+0x18a4>
    800082f8:	00025517          	auipc	a0,0x25
    800082fc:	0d050513          	addi	a0,a0,208 # 8002d3c8 <__func__.0+0x310>
    80008300:	357220ef          	jal	8002ae56 <printf>
    80008304:	0004c797          	auipc	a5,0x4c
    80008308:	d0d7c783          	lbu	a5,-755(a5) # 80054011 <excpt+0x1>
    8000830c:	c799                	beqz	a5,8000831a <tinst_tests_pf+0x446>
    8000830e:	6418                	ld	a4,8(s0)
    80008310:	47b5                	li	a5,13
    80008312:	00f71463          	bne	a4,a5,8000831a <tinst_tests_pf+0x446>
    80008316:	6870106f          	j	8000a19c <tinst_tests_pf+0x22c8>
    8000831a:	00025517          	auipc	a0,0x25
    8000831e:	0b650513          	addi	a0,a0,182 # 8002d3d0 <__func__.0+0x318>
    80008322:	335220ef          	jal	8002ae56 <printf>
    80008326:	02900513          	li	a0,41
    8000832a:	01b210ef          	jal	80029b44 <putchar>
    8000832e:	4529                	li	a0,10
    80008330:	015210ef          	jal	80029b44 <putchar>
    80008334:	00090a63          	beqz	s2,80008348 <tinst_tests_pf+0x474>
    80008338:	0004c797          	auipc	a5,0x4c
    8000833c:	cd97c783          	lbu	a5,-807(a5) # 80054011 <excpt+0x1>
    80008340:	c399                	beqz	a5,80008346 <tinst_tests_pf+0x472>
    80008342:	0370106f          	j	80009b78 <tinst_tests_pf+0x1ca4>
    80008346:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80008348:	ac5f80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000834c:	400197b7          	lui	a5,0x40019
    80008350:	078a                	slli	a5,a5,0x2
    80008352:	573d                	li	a4,-17
    80008354:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008358:	00027617          	auipc	a2,0x27
    8000835c:	bd860613          	addi	a2,a2,-1064 # 8002ef30 <__func__.0+0x1e78>
    80008360:	08200593          	li	a1,130
    80008364:	00025517          	auipc	a0,0x25
    80008368:	04c50513          	addi	a0,a0,76 # 8002d3b0 <__func__.0+0x2f8>
    8000836c:	2eb220ef          	jal	8002ae56 <printf>
    80008370:	0004c797          	auipc	a5,0x4c
    80008374:	ca17c783          	lbu	a5,-863(a5) # 80054011 <excpt+0x1>
    80008378:	e399                	bnez	a5,8000837e <tinst_tests_pf+0x4aa>
    8000837a:	4a00106f          	j	8000981a <tinst_tests_pf+0x1946>
    8000837e:	6418                	ld	a4,8(s0)
    80008380:	47bd                	li	a5,15
    80008382:	00025597          	auipc	a1,0x25
    80008386:	00658593          	addi	a1,a1,6 # 8002d388 <__func__.0+0x2d0>
    8000838a:	00f71463          	bne	a4,a5,80008392 <tinst_tests_pf+0x4be>
    8000838e:	43e0106f          	j	800097cc <tinst_tests_pf+0x18f8>
    80008392:	00025517          	auipc	a0,0x25
    80008396:	03650513          	addi	a0,a0,54 # 8002d3c8 <__func__.0+0x310>
    8000839a:	2bd220ef          	jal	8002ae56 <printf>
    8000839e:	0004c797          	auipc	a5,0x4c
    800083a2:	c737c783          	lbu	a5,-909(a5) # 80054011 <excpt+0x1>
    800083a6:	c799                	beqz	a5,800083b4 <tinst_tests_pf+0x4e0>
    800083a8:	6418                	ld	a4,8(s0)
    800083aa:	47bd                	li	a5,15
    800083ac:	00f71463          	bne	a4,a5,800083b4 <tinst_tests_pf+0x4e0>
    800083b0:	6830106f          	j	8000a232 <tinst_tests_pf+0x235e>
    800083b4:	00025517          	auipc	a0,0x25
    800083b8:	01c50513          	addi	a0,a0,28 # 8002d3d0 <__func__.0+0x318>
    800083bc:	29b220ef          	jal	8002ae56 <printf>
    800083c0:	02900513          	li	a0,41
    800083c4:	780210ef          	jal	80029b44 <putchar>
    800083c8:	4529                	li	a0,10
    800083ca:	77a210ef          	jal	80029b44 <putchar>
    800083ce:	00090a63          	beqz	s2,800083e2 <tinst_tests_pf+0x50e>
    800083d2:	0004c797          	auipc	a5,0x4c
    800083d6:	c3f7c783          	lbu	a5,-961(a5) # 80054011 <excpt+0x1>
    800083da:	c399                	beqz	a5,800083e0 <tinst_tests_pf+0x50c>
    800083dc:	7e60106f          	j	80009bc2 <tinst_tests_pf+0x1cee>
    800083e0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800083e2:	a2bf80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800083e6:	77f1                	lui	a5,0xffffc
    800083e8:	40019737          	lui	a4,0x40019
    800083ec:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800083f0:	070a                	slli	a4,a4,0x2
    800083f2:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800083f6:	00027617          	auipc	a2,0x27
    800083fa:	b7a60613          	addi	a2,a2,-1158 # 8002ef70 <__func__.0+0x1eb8>
    800083fe:	08200593          	li	a1,130
    80008402:	00025517          	auipc	a0,0x25
    80008406:	fae50513          	addi	a0,a0,-82 # 8002d3b0 <__func__.0+0x2f8>
    8000840a:	24d220ef          	jal	8002ae56 <printf>
    8000840e:	0004c797          	auipc	a5,0x4c
    80008412:	c037c783          	lbu	a5,-1021(a5) # 80054011 <excpt+0x1>
    80008416:	e399                	bnez	a5,8000841c <tinst_tests_pf+0x548>
    80008418:	45c0106f          	j	80009874 <tinst_tests_pf+0x19a0>
    8000841c:	6418                	ld	a4,8(s0)
    8000841e:	47bd                	li	a5,15
    80008420:	00025597          	auipc	a1,0x25
    80008424:	f6858593          	addi	a1,a1,-152 # 8002d388 <__func__.0+0x2d0>
    80008428:	00f71463          	bne	a4,a5,80008430 <tinst_tests_pf+0x55c>
    8000842c:	3fa0106f          	j	80009826 <tinst_tests_pf+0x1952>
    80008430:	00025517          	auipc	a0,0x25
    80008434:	f9850513          	addi	a0,a0,-104 # 8002d3c8 <__func__.0+0x310>
    80008438:	21f220ef          	jal	8002ae56 <printf>
    8000843c:	0004c797          	auipc	a5,0x4c
    80008440:	bd57c783          	lbu	a5,-1067(a5) # 80054011 <excpt+0x1>
    80008444:	c799                	beqz	a5,80008452 <tinst_tests_pf+0x57e>
    80008446:	6418                	ld	a4,8(s0)
    80008448:	47bd                	li	a5,15
    8000844a:	00f71463          	bne	a4,a5,80008452 <tinst_tests_pf+0x57e>
    8000844e:	6810106f          	j	8000a2ce <tinst_tests_pf+0x23fa>
    80008452:	00025517          	auipc	a0,0x25
    80008456:	f7e50513          	addi	a0,a0,-130 # 8002d3d0 <__func__.0+0x318>
    8000845a:	1fd220ef          	jal	8002ae56 <printf>
    8000845e:	02900513          	li	a0,41
    80008462:	6e2210ef          	jal	80029b44 <putchar>
    80008466:	4529                	li	a0,10
    80008468:	6dc210ef          	jal	80029b44 <putchar>
    8000846c:	00090a63          	beqz	s2,80008480 <tinst_tests_pf+0x5ac>
    80008470:	0004c797          	auipc	a5,0x4c
    80008474:	ba17c783          	lbu	a5,-1119(a5) # 80054011 <excpt+0x1>
    80008478:	c399                	beqz	a5,8000847e <tinst_tests_pf+0x5aa>
    8000847a:	7960106f          	j	80009c10 <tinst_tests_pf+0x1d3c>
    8000847e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008480:	98df80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80008484:	deadc7b7          	lui	a5,0xdeadc
    80008488:	40019737          	lui	a4,0x40019
    8000848c:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80008490:	070a                	slli	a4,a4,0x2
    80008492:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008496:	00027617          	auipc	a2,0x27
    8000849a:	b1a60613          	addi	a2,a2,-1254 # 8002efb0 <__func__.0+0x1ef8>
    8000849e:	08200593          	li	a1,130
    800084a2:	00025517          	auipc	a0,0x25
    800084a6:	f0e50513          	addi	a0,a0,-242 # 8002d3b0 <__func__.0+0x2f8>
    800084aa:	1ad220ef          	jal	8002ae56 <printf>
    800084ae:	0004c797          	auipc	a5,0x4c
    800084b2:	b637c783          	lbu	a5,-1181(a5) # 80054011 <excpt+0x1>
    800084b6:	e399                	bnez	a5,800084bc <tinst_tests_pf+0x5e8>
    800084b8:	4160106f          	j	800098ce <tinst_tests_pf+0x19fa>
    800084bc:	6418                	ld	a4,8(s0)
    800084be:	47bd                	li	a5,15
    800084c0:	00025597          	auipc	a1,0x25
    800084c4:	ec858593          	addi	a1,a1,-312 # 8002d388 <__func__.0+0x2d0>
    800084c8:	00f71463          	bne	a4,a5,800084d0 <tinst_tests_pf+0x5fc>
    800084cc:	3b40106f          	j	80009880 <tinst_tests_pf+0x19ac>
    800084d0:	00025517          	auipc	a0,0x25
    800084d4:	ef850513          	addi	a0,a0,-264 # 8002d3c8 <__func__.0+0x310>
    800084d8:	17f220ef          	jal	8002ae56 <printf>
    800084dc:	0004c797          	auipc	a5,0x4c
    800084e0:	b357c783          	lbu	a5,-1227(a5) # 80054011 <excpt+0x1>
    800084e4:	c799                	beqz	a5,800084f2 <tinst_tests_pf+0x61e>
    800084e6:	6418                	ld	a4,8(s0)
    800084e8:	47bd                	li	a5,15
    800084ea:	00f71463          	bne	a4,a5,800084f2 <tinst_tests_pf+0x61e>
    800084ee:	67d0106f          	j	8000a36a <tinst_tests_pf+0x2496>
    800084f2:	00025517          	auipc	a0,0x25
    800084f6:	ede50513          	addi	a0,a0,-290 # 8002d3d0 <__func__.0+0x318>
    800084fa:	15d220ef          	jal	8002ae56 <printf>
    800084fe:	02900513          	li	a0,41
    80008502:	642210ef          	jal	80029b44 <putchar>
    80008506:	4529                	li	a0,10
    80008508:	63c210ef          	jal	80029b44 <putchar>
    8000850c:	00090a63          	beqz	s2,80008520 <tinst_tests_pf+0x64c>
    80008510:	0004c797          	auipc	a5,0x4c
    80008514:	b017c783          	lbu	a5,-1279(a5) # 80054011 <excpt+0x1>
    80008518:	c399                	beqz	a5,8000851e <tinst_tests_pf+0x64a>
    8000851a:	7440106f          	j	80009c5e <tinst_tests_pf+0x1d8a>
    8000851e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008520:	8edf80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80008524:	37ab77b7          	lui	a5,0x37ab7
    80008528:	078a                	slli	a5,a5,0x2
    8000852a:	40019737          	lui	a4,0x40019
    8000852e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80008532:	070a                	slli	a4,a4,0x2
    80008534:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008538:	00027617          	auipc	a2,0x27
    8000853c:	ab860613          	addi	a2,a2,-1352 # 8002eff0 <__func__.0+0x1f38>
    80008540:	08200593          	li	a1,130
    80008544:	00025517          	auipc	a0,0x25
    80008548:	e6c50513          	addi	a0,a0,-404 # 8002d3b0 <__func__.0+0x2f8>
    8000854c:	10b220ef          	jal	8002ae56 <printf>
    80008550:	0004c797          	auipc	a5,0x4c
    80008554:	ac17c783          	lbu	a5,-1343(a5) # 80054011 <excpt+0x1>
    80008558:	e399                	bnez	a5,8000855e <tinst_tests_pf+0x68a>
    8000855a:	3ce0106f          	j	80009928 <tinst_tests_pf+0x1a54>
    8000855e:	6418                	ld	a4,8(s0)
    80008560:	47bd                	li	a5,15
    80008562:	00025597          	auipc	a1,0x25
    80008566:	e2658593          	addi	a1,a1,-474 # 8002d388 <__func__.0+0x2d0>
    8000856a:	00f71463          	bne	a4,a5,80008572 <tinst_tests_pf+0x69e>
    8000856e:	36c0106f          	j	800098da <tinst_tests_pf+0x1a06>
    80008572:	00025517          	auipc	a0,0x25
    80008576:	e5650513          	addi	a0,a0,-426 # 8002d3c8 <__func__.0+0x310>
    8000857a:	0dd220ef          	jal	8002ae56 <printf>
    8000857e:	0004c797          	auipc	a5,0x4c
    80008582:	a937c783          	lbu	a5,-1389(a5) # 80054011 <excpt+0x1>
    80008586:	c799                	beqz	a5,80008594 <tinst_tests_pf+0x6c0>
    80008588:	6418                	ld	a4,8(s0)
    8000858a:	47bd                	li	a5,15
    8000858c:	00f71463          	bne	a4,a5,80008594 <tinst_tests_pf+0x6c0>
    80008590:	6770106f          	j	8000a406 <tinst_tests_pf+0x2532>
    80008594:	00025517          	auipc	a0,0x25
    80008598:	e3c50513          	addi	a0,a0,-452 # 8002d3d0 <__func__.0+0x318>
    8000859c:	0bb220ef          	jal	8002ae56 <printf>
    800085a0:	02900513          	li	a0,41
    800085a4:	5a0210ef          	jal	80029b44 <putchar>
    800085a8:	4529                	li	a0,10
    800085aa:	59a210ef          	jal	80029b44 <putchar>
    800085ae:	00090a63          	beqz	s2,800085c2 <tinst_tests_pf+0x6ee>
    800085b2:	0004c797          	auipc	a5,0x4c
    800085b6:	a5f7c783          	lbu	a5,-1441(a5) # 80054011 <excpt+0x1>
    800085ba:	c399                	beqz	a5,800085c0 <tinst_tests_pf+0x6ec>
    800085bc:	6f00106f          	j	80009cac <tinst_tests_pf+0x1dd8>
    800085c0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800085c2:	84bf80ef          	jal	80000e0c <test_setup_except_function>
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800085c6:	40019537          	lui	a0,0x40019
    800085ca:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800085cc:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800085ce:	00027617          	auipc	a2,0x27
    800085d2:	a6260613          	addi	a2,a2,-1438 # 8002f030 <__func__.0+0x1f78>
    800085d6:	08200593          	li	a1,130
    800085da:	00025517          	auipc	a0,0x25
    800085de:	dd650513          	addi	a0,a0,-554 # 8002d3b0 <__func__.0+0x2f8>
    800085e2:	075220ef          	jal	8002ae56 <printf>
    800085e6:	0004c797          	auipc	a5,0x4c
    800085ea:	a2b7c783          	lbu	a5,-1493(a5) # 80054011 <excpt+0x1>
    800085ee:	c799                	beqz	a5,800085fc <tinst_tests_pf+0x728>
    800085f0:	6418                	ld	a4,8(s0)
    800085f2:	47b5                	li	a5,13
    800085f4:	00f71463          	bne	a4,a5,800085fc <tinst_tests_pf+0x728>
    800085f8:	7fe0106f          	j	80009df6 <tinst_tests_pf+0x1f22>
    800085fc:	00025597          	auipc	a1,0x25
    80008600:	d8c58593          	addi	a1,a1,-628 # 8002d388 <__func__.0+0x2d0>
    80008604:	00025517          	auipc	a0,0x25
    80008608:	dc450513          	addi	a0,a0,-572 # 8002d3c8 <__func__.0+0x310>
    8000860c:	04b220ef          	jal	8002ae56 <printf>
    80008610:	0004c797          	auipc	a5,0x4c
    80008614:	a017c783          	lbu	a5,-1535(a5) # 80054011 <excpt+0x1>
    80008618:	c799                	beqz	a5,80008626 <tinst_tests_pf+0x752>
    8000861a:	6418                	ld	a4,8(s0)
    8000861c:	47b5                	li	a5,13
    8000861e:	00f71463          	bne	a4,a5,80008626 <tinst_tests_pf+0x752>
    80008622:	6810106f          	j	8000a4a2 <tinst_tests_pf+0x25ce>
    80008626:	00025517          	auipc	a0,0x25
    8000862a:	daa50513          	addi	a0,a0,-598 # 8002d3d0 <__func__.0+0x318>
    8000862e:	029220ef          	jal	8002ae56 <printf>
    80008632:	02900513          	li	a0,41
    80008636:	50e210ef          	jal	80029b44 <putchar>
    8000863a:	4529                	li	a0,10
    8000863c:	508210ef          	jal	80029b44 <putchar>
    80008640:	00090a63          	beqz	s2,80008654 <tinst_tests_pf+0x780>
    80008644:	0004c797          	auipc	a5,0x4c
    80008648:	9cd7c783          	lbu	a5,-1587(a5) # 80054011 <excpt+0x1>
    8000864c:	c399                	beqz	a5,80008652 <tinst_tests_pf+0x77e>
    8000864e:	6ac0106f          	j	80009cfa <tinst_tests_pf+0x1e26>
    80008652:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008654:	fb8f80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008658:	40019537          	lui	a0,0x40019
    8000865c:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    8000865e:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008660:	00027617          	auipc	a2,0x27
    80008664:	a1060613          	addi	a2,a2,-1520 # 8002f070 <__func__.0+0x1fb8>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80008668:	84ae                	mv	s1,a1
    8000866a:	00025517          	auipc	a0,0x25
    8000866e:	d4650513          	addi	a0,a0,-698 # 8002d3b0 <__func__.0+0x2f8>
    80008672:	08200593          	li	a1,130
    80008676:	7e0220ef          	jal	8002ae56 <printf>
    8000867a:	0004c797          	auipc	a5,0x4c
    8000867e:	9977c783          	lbu	a5,-1641(a5) # 80054011 <excpt+0x1>
    80008682:	c799                	beqz	a5,80008690 <tinst_tests_pf+0x7bc>
    80008684:	6418                	ld	a4,8(s0)
    80008686:	47b5                	li	a5,13
    80008688:	00f71463          	bne	a4,a5,80008690 <tinst_tests_pf+0x7bc>
    8000868c:	7be0106f          	j	80009e4a <tinst_tests_pf+0x1f76>
    80008690:	00025597          	auipc	a1,0x25
    80008694:	cf858593          	addi	a1,a1,-776 # 8002d388 <__func__.0+0x2d0>
    80008698:	00025517          	auipc	a0,0x25
    8000869c:	d3050513          	addi	a0,a0,-720 # 8002d3c8 <__func__.0+0x310>
    800086a0:	7b6220ef          	jal	8002ae56 <printf>
    800086a4:	0004c797          	auipc	a5,0x4c
    800086a8:	96d7c783          	lbu	a5,-1683(a5) # 80054011 <excpt+0x1>
    800086ac:	c799                	beqz	a5,800086ba <tinst_tests_pf+0x7e6>
    800086ae:	6418                	ld	a4,8(s0)
    800086b0:	47b5                	li	a5,13
    800086b2:	00f71463          	bne	a4,a5,800086ba <tinst_tests_pf+0x7e6>
    800086b6:	6730106f          	j	8000a528 <tinst_tests_pf+0x2654>
    800086ba:	00025517          	auipc	a0,0x25
    800086be:	d1650513          	addi	a0,a0,-746 # 8002d3d0 <__func__.0+0x318>
    800086c2:	794220ef          	jal	8002ae56 <printf>
    800086c6:	02900513          	li	a0,41
    800086ca:	47a210ef          	jal	80029b44 <putchar>
    800086ce:	4529                	li	a0,10
    800086d0:	474210ef          	jal	80029b44 <putchar>
    800086d4:	00090a63          	beqz	s2,800086e8 <tinst_tests_pf+0x814>
    800086d8:	0004c797          	auipc	a5,0x4c
    800086dc:	9397c783          	lbu	a5,-1735(a5) # 80054011 <excpt+0x1>
    800086e0:	c399                	beqz	a5,800086e6 <tinst_tests_pf+0x812>
    800086e2:	6520106f          	j	80009d34 <tinst_tests_pf+0x1e60>
    800086e6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800086e8:	f24f80ef          	jal	80000e0c <test_setup_except_function>
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800086ec:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    800086f0:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    800086f2:	050a                	slli	a0,a0,0x2
    asm volatile(
    800086f4:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800086f6:	00027617          	auipc	a2,0x27
    800086fa:	93a60613          	addi	a2,a2,-1734 # 8002f030 <__func__.0+0x1f78>
    800086fe:	08200593          	li	a1,130
    80008702:	00025517          	auipc	a0,0x25
    80008706:	cae50513          	addi	a0,a0,-850 # 8002d3b0 <__func__.0+0x2f8>
    8000870a:	74c220ef          	jal	8002ae56 <printf>
    8000870e:	0004c797          	auipc	a5,0x4c
    80008712:	9037c783          	lbu	a5,-1789(a5) # 80054011 <excpt+0x1>
    80008716:	c799                	beqz	a5,80008724 <tinst_tests_pf+0x850>
    80008718:	6418                	ld	a4,8(s0)
    8000871a:	47bd                	li	a5,15
    8000871c:	00f71463          	bne	a4,a5,80008724 <tinst_tests_pf+0x850>
    80008720:	73e0106f          	j	80009e5e <tinst_tests_pf+0x1f8a>
    80008724:	00025597          	auipc	a1,0x25
    80008728:	c6458593          	addi	a1,a1,-924 # 8002d388 <__func__.0+0x2d0>
    8000872c:	00025517          	auipc	a0,0x25
    80008730:	c9c50513          	addi	a0,a0,-868 # 8002d3c8 <__func__.0+0x310>
    80008734:	722220ef          	jal	8002ae56 <printf>
    80008738:	0004c797          	auipc	a5,0x4c
    8000873c:	8d97c783          	lbu	a5,-1831(a5) # 80054011 <excpt+0x1>
    80008740:	c799                	beqz	a5,8000874e <tinst_tests_pf+0x87a>
    80008742:	6418                	ld	a4,8(s0)
    80008744:	47bd                	li	a5,15
    80008746:	00f71463          	bne	a4,a5,8000874e <tinst_tests_pf+0x87a>
    8000874a:	6690106f          	j	8000a5b2 <tinst_tests_pf+0x26de>
    8000874e:	00025517          	auipc	a0,0x25
    80008752:	c8250513          	addi	a0,a0,-894 # 8002d3d0 <__func__.0+0x318>
    80008756:	700220ef          	jal	8002ae56 <printf>
    8000875a:	02900513          	li	a0,41
    8000875e:	3e6210ef          	jal	80029b44 <putchar>
    80008762:	4529                	li	a0,10
    80008764:	3e0210ef          	jal	80029b44 <putchar>
    80008768:	00090e63          	beqz	s2,80008784 <tinst_tests_pf+0x8b0>
    8000876c:	0004c797          	auipc	a5,0x4c
    80008770:	8a57c783          	lbu	a5,-1883(a5) # 80054011 <excpt+0x1>
    80008774:	c799                	beqz	a5,80008782 <tinst_tests_pf+0x8ae>
    80008776:	6418                	ld	a4,8(s0)
    80008778:	47bd                	li	a5,15
    8000877a:	00f71463          	bne	a4,a5,80008782 <tinst_tests_pf+0x8ae>
    8000877e:	4920206f          	j	8000ac10 <tinst_tests_pf+0x2d3c>
    80008782:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008784:	e88f80ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008788:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    8000878c:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000878e:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008790:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80008792:	00027617          	auipc	a2,0x27
    80008796:	91e60613          	addi	a2,a2,-1762 # 8002f0b0 <__func__.0+0x1ff8>
    8000879a:	08200593          	li	a1,130
    8000879e:	00025517          	auipc	a0,0x25
    800087a2:	c1250513          	addi	a0,a0,-1006 # 8002d3b0 <__func__.0+0x2f8>
    800087a6:	6b0220ef          	jal	8002ae56 <printf>
    800087aa:	0004c797          	auipc	a5,0x4c
    800087ae:	8677c783          	lbu	a5,-1945(a5) # 80054011 <excpt+0x1>
    800087b2:	c799                	beqz	a5,800087c0 <tinst_tests_pf+0x8ec>
    800087b4:	6418                	ld	a4,8(s0)
    800087b6:	47bd                	li	a5,15
    800087b8:	00f71463          	bne	a4,a5,800087c0 <tinst_tests_pf+0x8ec>
    800087bc:	6b60106f          	j	80009e72 <tinst_tests_pf+0x1f9e>
    800087c0:	00025597          	auipc	a1,0x25
    800087c4:	bc858593          	addi	a1,a1,-1080 # 8002d388 <__func__.0+0x2d0>
    800087c8:	00025517          	auipc	a0,0x25
    800087cc:	c0050513          	addi	a0,a0,-1024 # 8002d3c8 <__func__.0+0x310>
    800087d0:	686220ef          	jal	8002ae56 <printf>
    800087d4:	0004c797          	auipc	a5,0x4c
    800087d8:	83d7c783          	lbu	a5,-1987(a5) # 80054011 <excpt+0x1>
    800087dc:	c799                	beqz	a5,800087ea <tinst_tests_pf+0x916>
    800087de:	6418                	ld	a4,8(s0)
    800087e0:	47bd                	li	a5,15
    800087e2:	00f71463          	bne	a4,a5,800087ea <tinst_tests_pf+0x916>
    800087e6:	65b0106f          	j	8000a640 <tinst_tests_pf+0x276c>
    800087ea:	00025517          	auipc	a0,0x25
    800087ee:	be650513          	addi	a0,a0,-1050 # 8002d3d0 <__func__.0+0x318>
    800087f2:	664220ef          	jal	8002ae56 <printf>
    800087f6:	02900513          	li	a0,41
    800087fa:	34a210ef          	jal	80029b44 <putchar>
    800087fe:	4529                	li	a0,10
    80008800:	344210ef          	jal	80029b44 <putchar>
    80008804:	00090e63          	beqz	s2,80008820 <tinst_tests_pf+0x94c>
    80008808:	0004c797          	auipc	a5,0x4c
    8000880c:	8097c783          	lbu	a5,-2039(a5) # 80054011 <excpt+0x1>
    80008810:	c799                	beqz	a5,8000881e <tinst_tests_pf+0x94a>
    80008812:	6418                	ld	a4,8(s0)
    80008814:	47bd                	li	a5,15
    80008816:	00f71463          	bne	a4,a5,8000881e <tinst_tests_pf+0x94a>
    8000881a:	42c0206f          	j	8000ac46 <tinst_tests_pf+0x2d72>
    8000881e:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008820:	decf80ef          	jal	80000e0c <test_setup_except_function>
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008824:	400197b7          	lui	a5,0x40019
    80008828:	078a                	slli	a5,a5,0x2
    8000882a:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000882e:	00027617          	auipc	a2,0x27
    80008832:	8c260613          	addi	a2,a2,-1854 # 8002f0f0 <__func__.0+0x2038>
    80008836:	08200593          	li	a1,130
    8000883a:	00025517          	auipc	a0,0x25
    8000883e:	b7650513          	addi	a0,a0,-1162 # 8002d3b0 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    80008842:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008846:	610220ef          	jal	8002ae56 <printf>
    8000884a:	0004b797          	auipc	a5,0x4b
    8000884e:	7c77c783          	lbu	a5,1991(a5) # 80054011 <excpt+0x1>
    value = lr_w(vaddr_f);
    80008852:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008854:	e399                	bnez	a5,8000885a <tinst_tests_pf+0x986>
    80008856:	12c0106f          	j	80009982 <tinst_tests_pf+0x1aae>
    8000885a:	6418                	ld	a4,8(s0)
    8000885c:	47b5                	li	a5,13
    8000885e:	00025597          	auipc	a1,0x25
    80008862:	b2a58593          	addi	a1,a1,-1238 # 8002d388 <__func__.0+0x2d0>
    80008866:	00f71463          	bne	a4,a5,8000886e <tinst_tests_pf+0x99a>
    8000886a:	0ca0106f          	j	80009934 <tinst_tests_pf+0x1a60>
    8000886e:	00025517          	auipc	a0,0x25
    80008872:	b5a50513          	addi	a0,a0,-1190 # 8002d3c8 <__func__.0+0x310>
    80008876:	5e0220ef          	jal	8002ae56 <printf>
    8000887a:	0004b797          	auipc	a5,0x4b
    8000887e:	7977c783          	lbu	a5,1943(a5) # 80054011 <excpt+0x1>
    80008882:	c799                	beqz	a5,80008890 <tinst_tests_pf+0x9bc>
    80008884:	6418                	ld	a4,8(s0)
    80008886:	47b5                	li	a5,13
    80008888:	00f71463          	bne	a4,a5,80008890 <tinst_tests_pf+0x9bc>
    8000888c:	4e60106f          	j	80009d72 <tinst_tests_pf+0x1e9e>
    80008890:	00025517          	auipc	a0,0x25
    80008894:	b4050513          	addi	a0,a0,-1216 # 8002d3d0 <__func__.0+0x318>
    80008898:	5be220ef          	jal	8002ae56 <printf>
    8000889c:	02900513          	li	a0,41
    800088a0:	2a4210ef          	jal	80029b44 <putchar>
    800088a4:	4529                	li	a0,10
    800088a6:	29e210ef          	jal	80029b44 <putchar>
    800088aa:	00090e63          	beqz	s2,800088c6 <tinst_tests_pf+0x9f2>
    800088ae:	0004b797          	auipc	a5,0x4b
    800088b2:	7637c783          	lbu	a5,1891(a5) # 80054011 <excpt+0x1>
    800088b6:	c799                	beqz	a5,800088c4 <tinst_tests_pf+0x9f0>
    800088b8:	6418                	ld	a4,8(s0)
    800088ba:	47b5                	li	a5,13
    800088bc:	00f71463          	bne	a4,a5,800088c4 <tinst_tests_pf+0x9f0>
    800088c0:	3b80206f          	j	8000ac78 <tinst_tests_pf+0x2da4>
    800088c4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800088c6:	d46f80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    800088ca:	40019737          	lui	a4,0x40019
    800088ce:	87a6                	mv	a5,s1
    800088d0:	070a                	slli	a4,a4,0x2
    800088d2:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800088d6:	00027617          	auipc	a2,0x27
    800088da:	85a60613          	addi	a2,a2,-1958 # 8002f130 <__func__.0+0x2078>
    800088de:	08200593          	li	a1,130
    800088e2:	00025517          	auipc	a0,0x25
    800088e6:	ace50513          	addi	a0,a0,-1330 # 8002d3b0 <__func__.0+0x2f8>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    800088ea:	0007849b          	sext.w	s1,a5
    800088ee:	568220ef          	jal	8002ae56 <printf>
    800088f2:	0004b797          	auipc	a5,0x4b
    800088f6:	71f7c783          	lbu	a5,1823(a5) # 80054011 <excpt+0x1>
    800088fa:	e399                	bnez	a5,80008900 <tinst_tests_pf+0xa2c>
    800088fc:	0e00106f          	j	800099dc <tinst_tests_pf+0x1b08>
    80008900:	6418                	ld	a4,8(s0)
    80008902:	47bd                	li	a5,15
    80008904:	00025597          	auipc	a1,0x25
    80008908:	a8458593          	addi	a1,a1,-1404 # 8002d388 <__func__.0+0x2d0>
    8000890c:	00f71463          	bne	a4,a5,80008914 <tinst_tests_pf+0xa40>
    80008910:	07e0106f          	j	8000998e <tinst_tests_pf+0x1aba>
    80008914:	00025517          	auipc	a0,0x25
    80008918:	ab450513          	addi	a0,a0,-1356 # 8002d3c8 <__func__.0+0x310>
    8000891c:	53a220ef          	jal	8002ae56 <printf>
    80008920:	0004b797          	auipc	a5,0x4b
    80008924:	6f17c783          	lbu	a5,1777(a5) # 80054011 <excpt+0x1>
    80008928:	c799                	beqz	a5,80008936 <tinst_tests_pf+0xa62>
    8000892a:	6418                	ld	a4,8(s0)
    8000892c:	47bd                	li	a5,15
    8000892e:	00f71463          	bne	a4,a5,80008936 <tinst_tests_pf+0xa62>
    80008932:	4820106f          	j	80009db4 <tinst_tests_pf+0x1ee0>
    80008936:	00025517          	auipc	a0,0x25
    8000893a:	a9a50513          	addi	a0,a0,-1382 # 8002d3d0 <__func__.0+0x318>
    8000893e:	518220ef          	jal	8002ae56 <printf>
    80008942:	02900513          	li	a0,41
    80008946:	1fe210ef          	jal	80029b44 <putchar>
    8000894a:	4529                	li	a0,10
    8000894c:	1f8210ef          	jal	80029b44 <putchar>
    80008950:	00090e63          	beqz	s2,8000896c <tinst_tests_pf+0xa98>
    80008954:	0004b797          	auipc	a5,0x4b
    80008958:	6bd7c783          	lbu	a5,1725(a5) # 80054011 <excpt+0x1>
    8000895c:	c799                	beqz	a5,8000896a <tinst_tests_pf+0xa96>
    8000895e:	6418                	ld	a4,8(s0)
    80008960:	47bd                	li	a5,15
    80008962:	00f71463          	bne	a4,a5,8000896a <tinst_tests_pf+0xa96>
    80008966:	3540206f          	j	8000acba <tinst_tests_pf+0x2de6>
    8000896a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000896c:	ca0f80ef          	jal	80000e0c <test_setup_except_function>
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008970:	400197b7          	lui	a5,0x40019
    80008974:	078a                	slli	a5,a5,0x2
    80008976:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000897a:	00026617          	auipc	a2,0x26
    8000897e:	7f660613          	addi	a2,a2,2038 # 8002f170 <__func__.0+0x20b8>
    80008982:	08200593          	li	a1,130
    80008986:	00025517          	auipc	a0,0x25
    8000898a:	a2a50513          	addi	a0,a0,-1494 # 8002d3b0 <__func__.0+0x2f8>
    8000898e:	4c8220ef          	jal	8002ae56 <printf>
    80008992:	0004b797          	auipc	a5,0x4b
    80008996:	67f7c783          	lbu	a5,1663(a5) # 80054011 <excpt+0x1>
    8000899a:	e399                	bnez	a5,800089a0 <tinst_tests_pf+0xacc>
    8000899c:	09a0106f          	j	80009a36 <tinst_tests_pf+0x1b62>
    800089a0:	6418                	ld	a4,8(s0)
    800089a2:	47bd                	li	a5,15
    800089a4:	00025597          	auipc	a1,0x25
    800089a8:	9e458593          	addi	a1,a1,-1564 # 8002d388 <__func__.0+0x2d0>
    800089ac:	00f71463          	bne	a4,a5,800089b4 <tinst_tests_pf+0xae0>
    800089b0:	0380106f          	j	800099e8 <tinst_tests_pf+0x1b14>
    800089b4:	00025517          	auipc	a0,0x25
    800089b8:	a1450513          	addi	a0,a0,-1516 # 8002d3c8 <__func__.0+0x310>
    800089bc:	49a220ef          	jal	8002ae56 <printf>
    800089c0:	0004b797          	auipc	a5,0x4b
    800089c4:	6517c783          	lbu	a5,1617(a5) # 80054011 <excpt+0x1>
    800089c8:	c799                	beqz	a5,800089d6 <tinst_tests_pf+0xb02>
    800089ca:	6418                	ld	a4,8(s0)
    800089cc:	47bd                	li	a5,15
    800089ce:	00f71463          	bne	a4,a5,800089d6 <tinst_tests_pf+0xb02>
    800089d2:	4360106f          	j	80009e08 <tinst_tests_pf+0x1f34>
    800089d6:	00025517          	auipc	a0,0x25
    800089da:	9fa50513          	addi	a0,a0,-1542 # 8002d3d0 <__func__.0+0x318>
    800089de:	478220ef          	jal	8002ae56 <printf>
    800089e2:	02900513          	li	a0,41
    800089e6:	15e210ef          	jal	80029b44 <putchar>
    800089ea:	4529                	li	a0,10
    800089ec:	158210ef          	jal	80029b44 <putchar>
    800089f0:	00090e63          	beqz	s2,80008a0c <tinst_tests_pf+0xb38>
    800089f4:	0004b797          	auipc	a5,0x4b
    800089f8:	61d7c783          	lbu	a5,1565(a5) # 80054011 <excpt+0x1>
    800089fc:	c799                	beqz	a5,80008a0a <tinst_tests_pf+0xb36>
    800089fe:	6418                	ld	a4,8(s0)
    80008a00:	47bd                	li	a5,15
    80008a02:	00f71463          	bne	a4,a5,80008a0a <tinst_tests_pf+0xb36>
    80008a06:	2f60206f          	j	8000acfc <tinst_tests_pf+0x2e28>
    80008a0a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a0c:	c00f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008a10:	400197b7          	lui	a5,0x40019
    80008a14:	078a                	slli	a5,a5,0x2
    80008a16:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008a1a:	00026617          	auipc	a2,0x26
    80008a1e:	79660613          	addi	a2,a2,1942 # 8002f1b0 <__func__.0+0x20f8>
    80008a22:	08200593          	li	a1,130
    80008a26:	00025517          	auipc	a0,0x25
    80008a2a:	98a50513          	addi	a0,a0,-1654 # 8002d3b0 <__func__.0+0x2f8>
    80008a2e:	428220ef          	jal	8002ae56 <printf>
    80008a32:	0004b797          	auipc	a5,0x4b
    80008a36:	5df7c783          	lbu	a5,1503(a5) # 80054011 <excpt+0x1>
    80008a3a:	c399                	beqz	a5,80008a40 <tinst_tests_pf+0xb6c>
    80008a3c:	08c0106f          	j	80009ac8 <tinst_tests_pf+0x1bf4>
    80008a40:	00025597          	auipc	a1,0x25
    80008a44:	94858593          	addi	a1,a1,-1720 # 8002d388 <__func__.0+0x2d0>
    80008a48:	00025517          	auipc	a0,0x25
    80008a4c:	98050513          	addi	a0,a0,-1664 # 8002d3c8 <__func__.0+0x310>
    80008a50:	406220ef          	jal	8002ae56 <printf>
    80008a54:	0004b797          	auipc	a5,0x4b
    80008a58:	5bd7c783          	lbu	a5,1469(a5) # 80054011 <excpt+0x1>
    80008a5c:	c799                	beqz	a5,80008a6a <tinst_tests_pf+0xb96>
    80008a5e:	6418                	ld	a4,8(s0)
    80008a60:	47bd                	li	a5,15
    80008a62:	00f71463          	bne	a4,a5,80008a6a <tinst_tests_pf+0xb96>
    80008a66:	5730106f          	j	8000a7d8 <tinst_tests_pf+0x2904>
    80008a6a:	00025517          	auipc	a0,0x25
    80008a6e:	96650513          	addi	a0,a0,-1690 # 8002d3d0 <__func__.0+0x318>
    80008a72:	3e4220ef          	jal	8002ae56 <printf>
    80008a76:	02900513          	li	a0,41
    80008a7a:	0ca210ef          	jal	80029b44 <putchar>
    80008a7e:	4529                	li	a0,10
    80008a80:	0c4210ef          	jal	80029b44 <putchar>
    80008a84:	00090e63          	beqz	s2,80008aa0 <tinst_tests_pf+0xbcc>
    80008a88:	0004b797          	auipc	a5,0x4b
    80008a8c:	5897c783          	lbu	a5,1417(a5) # 80054011 <excpt+0x1>
    80008a90:	c799                	beqz	a5,80008a9e <tinst_tests_pf+0xbca>
    80008a92:	6418                	ld	a4,8(s0)
    80008a94:	47bd                	li	a5,15
    80008a96:	00f71463          	bne	a4,a5,80008a9e <tinst_tests_pf+0xbca>
    80008a9a:	2a40206f          	j	8000ad3e <tinst_tests_pf+0x2e6a>
    80008a9e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008aa0:	b6cf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008aa4:	400197b7          	lui	a5,0x40019
    80008aa8:	078a                	slli	a5,a5,0x2
    80008aaa:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008aae:	00026617          	auipc	a2,0x26
    80008ab2:	74260613          	addi	a2,a2,1858 # 8002f1f0 <__func__.0+0x2138>
    80008ab6:	08200593          	li	a1,130
    80008aba:	00025517          	auipc	a0,0x25
    80008abe:	8f650513          	addi	a0,a0,-1802 # 8002d3b0 <__func__.0+0x2f8>
    80008ac2:	394220ef          	jal	8002ae56 <printf>
    80008ac6:	0004b797          	auipc	a5,0x4b
    80008aca:	54b7c783          	lbu	a5,1355(a5) # 80054011 <excpt+0x1>
    80008ace:	e399                	bnez	a5,80008ad4 <tinst_tests_pf+0xc00>
    80008ad0:	5020106f          	j	80009fd2 <tinst_tests_pf+0x20fe>
    80008ad4:	6418                	ld	a4,8(s0)
    80008ad6:	47bd                	li	a5,15
    80008ad8:	00025597          	auipc	a1,0x25
    80008adc:	8b058593          	addi	a1,a1,-1872 # 8002d388 <__func__.0+0x2d0>
    80008ae0:	00f71463          	bne	a4,a5,80008ae8 <tinst_tests_pf+0xc14>
    80008ae4:	4a20106f          	j	80009f86 <tinst_tests_pf+0x20b2>
    80008ae8:	00025517          	auipc	a0,0x25
    80008aec:	8e050513          	addi	a0,a0,-1824 # 8002d3c8 <__func__.0+0x310>
    80008af0:	366220ef          	jal	8002ae56 <printf>
    80008af4:	0004b797          	auipc	a5,0x4b
    80008af8:	51d7c783          	lbu	a5,1309(a5) # 80054011 <excpt+0x1>
    80008afc:	c799                	beqz	a5,80008b0a <tinst_tests_pf+0xc36>
    80008afe:	6418                	ld	a4,8(s0)
    80008b00:	47bd                	li	a5,15
    80008b02:	00f71463          	bne	a4,a5,80008b0a <tinst_tests_pf+0xc36>
    80008b06:	5150106f          	j	8000a81a <tinst_tests_pf+0x2946>
    80008b0a:	00025517          	auipc	a0,0x25
    80008b0e:	8c650513          	addi	a0,a0,-1850 # 8002d3d0 <__func__.0+0x318>
    80008b12:	344220ef          	jal	8002ae56 <printf>
    80008b16:	02900513          	li	a0,41
    80008b1a:	02a210ef          	jal	80029b44 <putchar>
    80008b1e:	4529                	li	a0,10
    80008b20:	024210ef          	jal	80029b44 <putchar>
    80008b24:	00090e63          	beqz	s2,80008b40 <tinst_tests_pf+0xc6c>
    80008b28:	0004b797          	auipc	a5,0x4b
    80008b2c:	4e97c783          	lbu	a5,1257(a5) # 80054011 <excpt+0x1>
    80008b30:	c799                	beqz	a5,80008b3e <tinst_tests_pf+0xc6a>
    80008b32:	6418                	ld	a4,8(s0)
    80008b34:	47bd                	li	a5,15
    80008b36:	00f71463          	bne	a4,a5,80008b3e <tinst_tests_pf+0xc6a>
    80008b3a:	29e0206f          	j	8000add8 <tinst_tests_pf+0x2f04>
    80008b3e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b40:	accf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008b44:	400197b7          	lui	a5,0x40019
    80008b48:	078a                	slli	a5,a5,0x2
    80008b4a:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008b4e:	00026617          	auipc	a2,0x26
    80008b52:	6e260613          	addi	a2,a2,1762 # 8002f230 <__func__.0+0x2178>
    80008b56:	08200593          	li	a1,130
    80008b5a:	00025517          	auipc	a0,0x25
    80008b5e:	85650513          	addi	a0,a0,-1962 # 8002d3b0 <__func__.0+0x2f8>
    80008b62:	2f4220ef          	jal	8002ae56 <printf>
    80008b66:	0004b797          	auipc	a5,0x4b
    80008b6a:	4ab7c783          	lbu	a5,1195(a5) # 80054011 <excpt+0x1>
    80008b6e:	e399                	bnez	a5,80008b74 <tinst_tests_pf+0xca0>
    80008b70:	4f40106f          	j	8000a064 <tinst_tests_pf+0x2190>
    80008b74:	6418                	ld	a4,8(s0)
    80008b76:	47bd                	li	a5,15
    80008b78:	00025597          	auipc	a1,0x25
    80008b7c:	81058593          	addi	a1,a1,-2032 # 8002d388 <__func__.0+0x2d0>
    80008b80:	00f71463          	bne	a4,a5,80008b88 <tinst_tests_pf+0xcb4>
    80008b84:	4940106f          	j	8000a018 <tinst_tests_pf+0x2144>
    80008b88:	00025517          	auipc	a0,0x25
    80008b8c:	84050513          	addi	a0,a0,-1984 # 8002d3c8 <__func__.0+0x310>
    80008b90:	2c6220ef          	jal	8002ae56 <printf>
    80008b94:	0004b797          	auipc	a5,0x4b
    80008b98:	47d7c783          	lbu	a5,1149(a5) # 80054011 <excpt+0x1>
    80008b9c:	c799                	beqz	a5,80008baa <tinst_tests_pf+0xcd6>
    80008b9e:	6418                	ld	a4,8(s0)
    80008ba0:	47bd                	li	a5,15
    80008ba2:	00f71463          	bne	a4,a5,80008baa <tinst_tests_pf+0xcd6>
    80008ba6:	4b70106f          	j	8000a85c <tinst_tests_pf+0x2988>
    80008baa:	00025517          	auipc	a0,0x25
    80008bae:	82650513          	addi	a0,a0,-2010 # 8002d3d0 <__func__.0+0x318>
    80008bb2:	2a4220ef          	jal	8002ae56 <printf>
    80008bb6:	02900513          	li	a0,41
    80008bba:	78b200ef          	jal	80029b44 <putchar>
    80008bbe:	4529                	li	a0,10
    80008bc0:	785200ef          	jal	80029b44 <putchar>
    80008bc4:	00090e63          	beqz	s2,80008be0 <tinst_tests_pf+0xd0c>
    80008bc8:	0004b797          	auipc	a5,0x4b
    80008bcc:	4497c783          	lbu	a5,1097(a5) # 80054011 <excpt+0x1>
    80008bd0:	c799                	beqz	a5,80008bde <tinst_tests_pf+0xd0a>
    80008bd2:	6418                	ld	a4,8(s0)
    80008bd4:	47bd                	li	a5,15
    80008bd6:	00f71463          	bne	a4,a5,80008bde <tinst_tests_pf+0xd0a>
    80008bda:	2700206f          	j	8000ae4a <tinst_tests_pf+0x2f76>
    80008bde:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008be0:	a2cf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008be4:	400197b7          	lui	a5,0x40019
    80008be8:	078a                	slli	a5,a5,0x2
    80008bea:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008bee:	00026617          	auipc	a2,0x26
    80008bf2:	68260613          	addi	a2,a2,1666 # 8002f270 <__func__.0+0x21b8>
    80008bf6:	08200593          	li	a1,130
    80008bfa:	00024517          	auipc	a0,0x24
    80008bfe:	7b650513          	addi	a0,a0,1974 # 8002d3b0 <__func__.0+0x2f8>
    80008c02:	254220ef          	jal	8002ae56 <printf>
    80008c06:	0004b797          	auipc	a5,0x4b
    80008c0a:	40b7c783          	lbu	a5,1035(a5) # 80054011 <excpt+0x1>
    80008c0e:	e399                	bnez	a5,80008c14 <tinst_tests_pf+0xd40>
    80008c10:	4ea0106f          	j	8000a0fa <tinst_tests_pf+0x2226>
    80008c14:	6418                	ld	a4,8(s0)
    80008c16:	47bd                	li	a5,15
    80008c18:	00024597          	auipc	a1,0x24
    80008c1c:	77058593          	addi	a1,a1,1904 # 8002d388 <__func__.0+0x2d0>
    80008c20:	00f71463          	bne	a4,a5,80008c28 <tinst_tests_pf+0xd54>
    80008c24:	4880106f          	j	8000a0ac <tinst_tests_pf+0x21d8>
    80008c28:	00024517          	auipc	a0,0x24
    80008c2c:	7a050513          	addi	a0,a0,1952 # 8002d3c8 <__func__.0+0x310>
    80008c30:	226220ef          	jal	8002ae56 <printf>
    80008c34:	0004b797          	auipc	a5,0x4b
    80008c38:	3dd7c783          	lbu	a5,989(a5) # 80054011 <excpt+0x1>
    80008c3c:	c799                	beqz	a5,80008c4a <tinst_tests_pf+0xd76>
    80008c3e:	6418                	ld	a4,8(s0)
    80008c40:	47bd                	li	a5,15
    80008c42:	00f71463          	bne	a4,a5,80008c4a <tinst_tests_pf+0xd76>
    80008c46:	4590106f          	j	8000a89e <tinst_tests_pf+0x29ca>
    80008c4a:	00024517          	auipc	a0,0x24
    80008c4e:	78650513          	addi	a0,a0,1926 # 8002d3d0 <__func__.0+0x318>
    80008c52:	204220ef          	jal	8002ae56 <printf>
    80008c56:	02900513          	li	a0,41
    80008c5a:	6eb200ef          	jal	80029b44 <putchar>
    80008c5e:	4529                	li	a0,10
    80008c60:	6e5200ef          	jal	80029b44 <putchar>
    80008c64:	00090e63          	beqz	s2,80008c80 <tinst_tests_pf+0xdac>
    80008c68:	0004b797          	auipc	a5,0x4b
    80008c6c:	3a97c783          	lbu	a5,937(a5) # 80054011 <excpt+0x1>
    80008c70:	c799                	beqz	a5,80008c7e <tinst_tests_pf+0xdaa>
    80008c72:	6418                	ld	a4,8(s0)
    80008c74:	47bd                	li	a5,15
    80008c76:	00f71463          	bne	a4,a5,80008c7e <tinst_tests_pf+0xdaa>
    80008c7a:	2420206f          	j	8000aebc <tinst_tests_pf+0x2fe8>
    80008c7e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c80:	98cf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008c84:	400197b7          	lui	a5,0x40019
    80008c88:	078a                	slli	a5,a5,0x2
    80008c8a:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008c8e:	00026617          	auipc	a2,0x26
    80008c92:	62260613          	addi	a2,a2,1570 # 8002f2b0 <__func__.0+0x21f8>
    80008c96:	08200593          	li	a1,130
    80008c9a:	00024517          	auipc	a0,0x24
    80008c9e:	71650513          	addi	a0,a0,1814 # 8002d3b0 <__func__.0+0x2f8>
    80008ca2:	1b4220ef          	jal	8002ae56 <printf>
    80008ca6:	0004b797          	auipc	a5,0x4b
    80008caa:	36b7c783          	lbu	a5,875(a5) # 80054011 <excpt+0x1>
    80008cae:	e399                	bnez	a5,80008cb4 <tinst_tests_pf+0xde0>
    80008cb0:	4e00106f          	j	8000a190 <tinst_tests_pf+0x22bc>
    80008cb4:	6418                	ld	a4,8(s0)
    80008cb6:	47bd                	li	a5,15
    80008cb8:	00024597          	auipc	a1,0x24
    80008cbc:	6d058593          	addi	a1,a1,1744 # 8002d388 <__func__.0+0x2d0>
    80008cc0:	00f71463          	bne	a4,a5,80008cc8 <tinst_tests_pf+0xdf4>
    80008cc4:	47e0106f          	j	8000a142 <tinst_tests_pf+0x226e>
    80008cc8:	00024517          	auipc	a0,0x24
    80008ccc:	70050513          	addi	a0,a0,1792 # 8002d3c8 <__func__.0+0x310>
    80008cd0:	186220ef          	jal	8002ae56 <printf>
    80008cd4:	0004b797          	auipc	a5,0x4b
    80008cd8:	33d7c783          	lbu	a5,829(a5) # 80054011 <excpt+0x1>
    80008cdc:	c799                	beqz	a5,80008cea <tinst_tests_pf+0xe16>
    80008cde:	6418                	ld	a4,8(s0)
    80008ce0:	47bd                	li	a5,15
    80008ce2:	00f71463          	bne	a4,a5,80008cea <tinst_tests_pf+0xe16>
    80008ce6:	3fb0106f          	j	8000a8e0 <tinst_tests_pf+0x2a0c>
    80008cea:	00024517          	auipc	a0,0x24
    80008cee:	6e650513          	addi	a0,a0,1766 # 8002d3d0 <__func__.0+0x318>
    80008cf2:	164220ef          	jal	8002ae56 <printf>
    80008cf6:	02900513          	li	a0,41
    80008cfa:	64b200ef          	jal	80029b44 <putchar>
    80008cfe:	4529                	li	a0,10
    80008d00:	645200ef          	jal	80029b44 <putchar>
    80008d04:	00090e63          	beqz	s2,80008d20 <tinst_tests_pf+0xe4c>
    80008d08:	0004b797          	auipc	a5,0x4b
    80008d0c:	3097c783          	lbu	a5,777(a5) # 80054011 <excpt+0x1>
    80008d10:	c799                	beqz	a5,80008d1e <tinst_tests_pf+0xe4a>
    80008d12:	6418                	ld	a4,8(s0)
    80008d14:	47bd                	li	a5,15
    80008d16:	00f71463          	bne	a4,a5,80008d1e <tinst_tests_pf+0xe4a>
    80008d1a:	1e40206f          	j	8000aefe <tinst_tests_pf+0x302a>
    80008d1e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d20:	8ecf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008d24:	400197b7          	lui	a5,0x40019
    80008d28:	078a                	slli	a5,a5,0x2
    80008d2a:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008d2e:	00026617          	auipc	a2,0x26
    80008d32:	5c260613          	addi	a2,a2,1474 # 8002f2f0 <__func__.0+0x2238>
    80008d36:	08200593          	li	a1,130
    80008d3a:	00024517          	auipc	a0,0x24
    80008d3e:	67650513          	addi	a0,a0,1654 # 8002d3b0 <__func__.0+0x2f8>
    80008d42:	114220ef          	jal	8002ae56 <printf>
    80008d46:	0004b797          	auipc	a5,0x4b
    80008d4a:	2cb7c783          	lbu	a5,715(a5) # 80054011 <excpt+0x1>
    80008d4e:	e399                	bnez	a5,80008d54 <tinst_tests_pf+0xe80>
    80008d50:	4d60106f          	j	8000a226 <tinst_tests_pf+0x2352>
    80008d54:	6418                	ld	a4,8(s0)
    80008d56:	47bd                	li	a5,15
    80008d58:	00024597          	auipc	a1,0x24
    80008d5c:	63058593          	addi	a1,a1,1584 # 8002d388 <__func__.0+0x2d0>
    80008d60:	00f71463          	bne	a4,a5,80008d68 <tinst_tests_pf+0xe94>
    80008d64:	4740106f          	j	8000a1d8 <tinst_tests_pf+0x2304>
    80008d68:	00024517          	auipc	a0,0x24
    80008d6c:	66050513          	addi	a0,a0,1632 # 8002d3c8 <__func__.0+0x310>
    80008d70:	0e6220ef          	jal	8002ae56 <printf>
    80008d74:	0004b797          	auipc	a5,0x4b
    80008d78:	29d7c783          	lbu	a5,669(a5) # 80054011 <excpt+0x1>
    80008d7c:	c799                	beqz	a5,80008d8a <tinst_tests_pf+0xeb6>
    80008d7e:	6418                	ld	a4,8(s0)
    80008d80:	47bd                	li	a5,15
    80008d82:	00f71463          	bne	a4,a5,80008d8a <tinst_tests_pf+0xeb6>
    80008d86:	39d0106f          	j	8000a922 <tinst_tests_pf+0x2a4e>
    80008d8a:	00024517          	auipc	a0,0x24
    80008d8e:	64650513          	addi	a0,a0,1606 # 8002d3d0 <__func__.0+0x318>
    80008d92:	0c4220ef          	jal	8002ae56 <printf>
    80008d96:	02900513          	li	a0,41
    80008d9a:	5ab200ef          	jal	80029b44 <putchar>
    80008d9e:	4529                	li	a0,10
    80008da0:	5a5200ef          	jal	80029b44 <putchar>
    80008da4:	00090e63          	beqz	s2,80008dc0 <tinst_tests_pf+0xeec>
    80008da8:	0004b797          	auipc	a5,0x4b
    80008dac:	2697c783          	lbu	a5,617(a5) # 80054011 <excpt+0x1>
    80008db0:	c799                	beqz	a5,80008dbe <tinst_tests_pf+0xeea>
    80008db2:	6418                	ld	a4,8(s0)
    80008db4:	47bd                	li	a5,15
    80008db6:	00f71463          	bne	a4,a5,80008dbe <tinst_tests_pf+0xeea>
    80008dba:	1860206f          	j	8000af40 <tinst_tests_pf+0x306c>
    80008dbe:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008dc0:	84cf80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    80008dc4:	400197b7          	lui	a5,0x40019
    80008dc8:	078a                	slli	a5,a5,0x2
    80008dca:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008dce:	00026617          	auipc	a2,0x26
    80008dd2:	56260613          	addi	a2,a2,1378 # 8002f330 <__func__.0+0x2278>
    80008dd6:	08200593          	li	a1,130
    80008dda:	00024517          	auipc	a0,0x24
    80008dde:	5d650513          	addi	a0,a0,1494 # 8002d3b0 <__func__.0+0x2f8>
    80008de2:	074220ef          	jal	8002ae56 <printf>
    80008de6:	0004b797          	auipc	a5,0x4b
    80008dea:	22b7c783          	lbu	a5,555(a5) # 80054011 <excpt+0x1>
    80008dee:	e399                	bnez	a5,80008df4 <tinst_tests_pf+0xf20>
    80008df0:	4d20106f          	j	8000a2c2 <tinst_tests_pf+0x23ee>
    80008df4:	6418                	ld	a4,8(s0)
    80008df6:	47bd                	li	a5,15
    80008df8:	00024597          	auipc	a1,0x24
    80008dfc:	59058593          	addi	a1,a1,1424 # 8002d388 <__func__.0+0x2d0>
    80008e00:	00f71463          	bne	a4,a5,80008e08 <tinst_tests_pf+0xf34>
    80008e04:	4700106f          	j	8000a274 <tinst_tests_pf+0x23a0>
    80008e08:	00024517          	auipc	a0,0x24
    80008e0c:	5c050513          	addi	a0,a0,1472 # 8002d3c8 <__func__.0+0x310>
    80008e10:	046220ef          	jal	8002ae56 <printf>
    80008e14:	0004b797          	auipc	a5,0x4b
    80008e18:	1fd7c783          	lbu	a5,509(a5) # 80054011 <excpt+0x1>
    80008e1c:	c799                	beqz	a5,80008e2a <tinst_tests_pf+0xf56>
    80008e1e:	6418                	ld	a4,8(s0)
    80008e20:	47bd                	li	a5,15
    80008e22:	00f71463          	bne	a4,a5,80008e2a <tinst_tests_pf+0xf56>
    80008e26:	33f0106f          	j	8000a964 <tinst_tests_pf+0x2a90>
    80008e2a:	00024517          	auipc	a0,0x24
    80008e2e:	5a650513          	addi	a0,a0,1446 # 8002d3d0 <__func__.0+0x318>
    80008e32:	024220ef          	jal	8002ae56 <printf>
    80008e36:	02900513          	li	a0,41
    80008e3a:	50b200ef          	jal	80029b44 <putchar>
    80008e3e:	4529                	li	a0,10
    80008e40:	505200ef          	jal	80029b44 <putchar>
    80008e44:	00090e63          	beqz	s2,80008e60 <tinst_tests_pf+0xf8c>
    80008e48:	0004b797          	auipc	a5,0x4b
    80008e4c:	1c97c783          	lbu	a5,457(a5) # 80054011 <excpt+0x1>
    80008e50:	c799                	beqz	a5,80008e5e <tinst_tests_pf+0xf8a>
    80008e52:	6418                	ld	a4,8(s0)
    80008e54:	47bd                	li	a5,15
    80008e56:	00f71463          	bne	a4,a5,80008e5e <tinst_tests_pf+0xf8a>
    80008e5a:	12a0206f          	j	8000af84 <tinst_tests_pf+0x30b0>
    80008e5e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e60:	fadf70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008e64:	400197b7          	lui	a5,0x40019
    80008e68:	078a                	slli	a5,a5,0x2
    80008e6a:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008e6e:	00026617          	auipc	a2,0x26
    80008e72:	50260613          	addi	a2,a2,1282 # 8002f370 <__func__.0+0x22b8>
    80008e76:	08200593          	li	a1,130
    80008e7a:	00024517          	auipc	a0,0x24
    80008e7e:	53650513          	addi	a0,a0,1334 # 8002d3b0 <__func__.0+0x2f8>
    80008e82:	7d5210ef          	jal	8002ae56 <printf>
    80008e86:	0004b797          	auipc	a5,0x4b
    80008e8a:	18b7c783          	lbu	a5,395(a5) # 80054011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80008e8e:	1482                	slli	s1,s1,0x20
    80008e90:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008e92:	e399                	bnez	a5,80008e98 <tinst_tests_pf+0xfc4>
    80008e94:	4ca0106f          	j	8000a35e <tinst_tests_pf+0x248a>
    80008e98:	6418                	ld	a4,8(s0)
    80008e9a:	47bd                	li	a5,15
    80008e9c:	00024597          	auipc	a1,0x24
    80008ea0:	4ec58593          	addi	a1,a1,1260 # 8002d388 <__func__.0+0x2d0>
    80008ea4:	00f71463          	bne	a4,a5,80008eac <tinst_tests_pf+0xfd8>
    80008ea8:	4680106f          	j	8000a310 <tinst_tests_pf+0x243c>
    80008eac:	00024517          	auipc	a0,0x24
    80008eb0:	51c50513          	addi	a0,a0,1308 # 8002d3c8 <__func__.0+0x310>
    80008eb4:	7a3210ef          	jal	8002ae56 <printf>
    80008eb8:	0004b797          	auipc	a5,0x4b
    80008ebc:	1597c783          	lbu	a5,345(a5) # 80054011 <excpt+0x1>
    80008ec0:	c799                	beqz	a5,80008ece <tinst_tests_pf+0xffa>
    80008ec2:	6418                	ld	a4,8(s0)
    80008ec4:	47bd                	li	a5,15
    80008ec6:	00f71463          	bne	a4,a5,80008ece <tinst_tests_pf+0xffa>
    80008eca:	2dd0106f          	j	8000a9a6 <tinst_tests_pf+0x2ad2>
    80008ece:	00024517          	auipc	a0,0x24
    80008ed2:	50250513          	addi	a0,a0,1282 # 8002d3d0 <__func__.0+0x318>
    80008ed6:	781210ef          	jal	8002ae56 <printf>
    80008eda:	02900513          	li	a0,41
    80008ede:	467200ef          	jal	80029b44 <putchar>
    80008ee2:	4529                	li	a0,10
    80008ee4:	461200ef          	jal	80029b44 <putchar>
    80008ee8:	00090e63          	beqz	s2,80008f04 <tinst_tests_pf+0x1030>
    80008eec:	0004b797          	auipc	a5,0x4b
    80008ef0:	1257c783          	lbu	a5,293(a5) # 80054011 <excpt+0x1>
    80008ef4:	c799                	beqz	a5,80008f02 <tinst_tests_pf+0x102e>
    80008ef6:	6418                	ld	a4,8(s0)
    80008ef8:	47bd                	li	a5,15
    80008efa:	00f71463          	bne	a4,a5,80008f02 <tinst_tests_pf+0x102e>
    80008efe:	0ca0206f          	j	8000afc8 <tinst_tests_pf+0x30f4>
    80008f02:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f04:	f09f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80008f08:	400197b7          	lui	a5,0x40019
    80008f0c:	078a                	slli	a5,a5,0x2
    80008f0e:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008f12:	00026617          	auipc	a2,0x26
    80008f16:	49e60613          	addi	a2,a2,1182 # 8002f3b0 <__func__.0+0x22f8>
    80008f1a:	08200593          	li	a1,130
    80008f1e:	00024517          	auipc	a0,0x24
    80008f22:	49250513          	addi	a0,a0,1170 # 8002d3b0 <__func__.0+0x2f8>
    80008f26:	731210ef          	jal	8002ae56 <printf>
    80008f2a:	0004b797          	auipc	a5,0x4b
    80008f2e:	0e77c783          	lbu	a5,231(a5) # 80054011 <excpt+0x1>
    80008f32:	e399                	bnez	a5,80008f38 <tinst_tests_pf+0x1064>
    80008f34:	4c60106f          	j	8000a3fa <tinst_tests_pf+0x2526>
    80008f38:	6418                	ld	a4,8(s0)
    80008f3a:	47bd                	li	a5,15
    80008f3c:	00024597          	auipc	a1,0x24
    80008f40:	44c58593          	addi	a1,a1,1100 # 8002d388 <__func__.0+0x2d0>
    80008f44:	00f71463          	bne	a4,a5,80008f4c <tinst_tests_pf+0x1078>
    80008f48:	4640106f          	j	8000a3ac <tinst_tests_pf+0x24d8>
    80008f4c:	00024517          	auipc	a0,0x24
    80008f50:	47c50513          	addi	a0,a0,1148 # 8002d3c8 <__func__.0+0x310>
    80008f54:	703210ef          	jal	8002ae56 <printf>
    80008f58:	0004b797          	auipc	a5,0x4b
    80008f5c:	0b97c783          	lbu	a5,185(a5) # 80054011 <excpt+0x1>
    80008f60:	c799                	beqz	a5,80008f6e <tinst_tests_pf+0x109a>
    80008f62:	6418                	ld	a4,8(s0)
    80008f64:	47bd                	li	a5,15
    80008f66:	00f71463          	bne	a4,a5,80008f6e <tinst_tests_pf+0x109a>
    80008f6a:	27f0106f          	j	8000a9e8 <tinst_tests_pf+0x2b14>
    80008f6e:	00024517          	auipc	a0,0x24
    80008f72:	46250513          	addi	a0,a0,1122 # 8002d3d0 <__func__.0+0x318>
    80008f76:	6e1210ef          	jal	8002ae56 <printf>
    80008f7a:	02900513          	li	a0,41
    80008f7e:	3c7200ef          	jal	80029b44 <putchar>
    80008f82:	4529                	li	a0,10
    80008f84:	3c1200ef          	jal	80029b44 <putchar>
    80008f88:	00090e63          	beqz	s2,80008fa4 <tinst_tests_pf+0x10d0>
    80008f8c:	0004b797          	auipc	a5,0x4b
    80008f90:	0857c783          	lbu	a5,133(a5) # 80054011 <excpt+0x1>
    80008f94:	c799                	beqz	a5,80008fa2 <tinst_tests_pf+0x10ce>
    80008f96:	6418                	ld	a4,8(s0)
    80008f98:	47bd                	li	a5,15
    80008f9a:	00f71463          	bne	a4,a5,80008fa2 <tinst_tests_pf+0x10ce>
    80008f9e:	06e0206f          	j	8000b00c <tinst_tests_pf+0x3138>
    80008fa2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008fa4:	e69f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80008fa8:	400197b7          	lui	a5,0x40019
    80008fac:	078a                	slli	a5,a5,0x2
    80008fae:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80008fb2:	00026617          	auipc	a2,0x26
    80008fb6:	43e60613          	addi	a2,a2,1086 # 8002f3f0 <__func__.0+0x2338>
    80008fba:	08200593          	li	a1,130
    80008fbe:	00024517          	auipc	a0,0x24
    80008fc2:	3f250513          	addi	a0,a0,1010 # 8002d3b0 <__func__.0+0x2f8>
    80008fc6:	691210ef          	jal	8002ae56 <printf>
    80008fca:	0004b797          	auipc	a5,0x4b
    80008fce:	0477c783          	lbu	a5,71(a5) # 80054011 <excpt+0x1>
    80008fd2:	e399                	bnez	a5,80008fd8 <tinst_tests_pf+0x1104>
    80008fd4:	4c20106f          	j	8000a496 <tinst_tests_pf+0x25c2>
    80008fd8:	6418                	ld	a4,8(s0)
    80008fda:	47bd                	li	a5,15
    80008fdc:	00024597          	auipc	a1,0x24
    80008fe0:	3ac58593          	addi	a1,a1,940 # 8002d388 <__func__.0+0x2d0>
    80008fe4:	00f71463          	bne	a4,a5,80008fec <tinst_tests_pf+0x1118>
    80008fe8:	4600106f          	j	8000a448 <tinst_tests_pf+0x2574>
    80008fec:	00024517          	auipc	a0,0x24
    80008ff0:	3dc50513          	addi	a0,a0,988 # 8002d3c8 <__func__.0+0x310>
    80008ff4:	663210ef          	jal	8002ae56 <printf>
    80008ff8:	0004b797          	auipc	a5,0x4b
    80008ffc:	0197c783          	lbu	a5,25(a5) # 80054011 <excpt+0x1>
    80009000:	c799                	beqz	a5,8000900e <tinst_tests_pf+0x113a>
    80009002:	6418                	ld	a4,8(s0)
    80009004:	47bd                	li	a5,15
    80009006:	00f71463          	bne	a4,a5,8000900e <tinst_tests_pf+0x113a>
    8000900a:	2210106f          	j	8000aa2a <tinst_tests_pf+0x2b56>
    8000900e:	00024517          	auipc	a0,0x24
    80009012:	3c250513          	addi	a0,a0,962 # 8002d3d0 <__func__.0+0x318>
    80009016:	641210ef          	jal	8002ae56 <printf>
    8000901a:	02900513          	li	a0,41
    8000901e:	327200ef          	jal	80029b44 <putchar>
    80009022:	4529                	li	a0,10
    80009024:	321200ef          	jal	80029b44 <putchar>
    80009028:	00090e63          	beqz	s2,80009044 <tinst_tests_pf+0x1170>
    8000902c:	0004b797          	auipc	a5,0x4b
    80009030:	fe57c783          	lbu	a5,-27(a5) # 80054011 <excpt+0x1>
    80009034:	c799                	beqz	a5,80009042 <tinst_tests_pf+0x116e>
    80009036:	6418                	ld	a4,8(s0)
    80009038:	47bd                	li	a5,15
    8000903a:	00f71463          	bne	a4,a5,80009042 <tinst_tests_pf+0x116e>
    8000903e:	0120206f          	j	8000b050 <tinst_tests_pf+0x317c>
    80009042:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009044:	dc9f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80009048:	400197b7          	lui	a5,0x40019
    8000904c:	078a                	slli	a5,a5,0x2
    8000904e:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009052:	00026617          	auipc	a2,0x26
    80009056:	3de60613          	addi	a2,a2,990 # 8002f430 <__func__.0+0x2378>
    8000905a:	08200593          	li	a1,130
    8000905e:	00024517          	auipc	a0,0x24
    80009062:	35250513          	addi	a0,a0,850 # 8002d3b0 <__func__.0+0x2f8>
    80009066:	5f1210ef          	jal	8002ae56 <printf>
    8000906a:	0004b797          	auipc	a5,0x4b
    8000906e:	fa77c783          	lbu	a5,-89(a5) # 80054011 <excpt+0x1>
    80009072:	e399                	bnez	a5,80009078 <tinst_tests_pf+0x11a4>
    80009074:	4a80106f          	j	8000a51c <tinst_tests_pf+0x2648>
    80009078:	6418                	ld	a4,8(s0)
    8000907a:	47bd                	li	a5,15
    8000907c:	00024597          	auipc	a1,0x24
    80009080:	30c58593          	addi	a1,a1,780 # 8002d388 <__func__.0+0x2d0>
    80009084:	00f71463          	bne	a4,a5,8000908c <tinst_tests_pf+0x11b8>
    80009088:	4460106f          	j	8000a4ce <tinst_tests_pf+0x25fa>
    8000908c:	00024517          	auipc	a0,0x24
    80009090:	33c50513          	addi	a0,a0,828 # 8002d3c8 <__func__.0+0x310>
    80009094:	5c3210ef          	jal	8002ae56 <printf>
    80009098:	0004b797          	auipc	a5,0x4b
    8000909c:	f797c783          	lbu	a5,-135(a5) # 80054011 <excpt+0x1>
    800090a0:	c799                	beqz	a5,800090ae <tinst_tests_pf+0x11da>
    800090a2:	6418                	ld	a4,8(s0)
    800090a4:	47bd                	li	a5,15
    800090a6:	00f71463          	bne	a4,a5,800090ae <tinst_tests_pf+0x11da>
    800090aa:	1c30106f          	j	8000aa6c <tinst_tests_pf+0x2b98>
    800090ae:	00024517          	auipc	a0,0x24
    800090b2:	32250513          	addi	a0,a0,802 # 8002d3d0 <__func__.0+0x318>
    800090b6:	5a1210ef          	jal	8002ae56 <printf>
    800090ba:	02900513          	li	a0,41
    800090be:	287200ef          	jal	80029b44 <putchar>
    800090c2:	4529                	li	a0,10
    800090c4:	281200ef          	jal	80029b44 <putchar>
    800090c8:	00090e63          	beqz	s2,800090e4 <tinst_tests_pf+0x1210>
    800090cc:	0004b797          	auipc	a5,0x4b
    800090d0:	f457c783          	lbu	a5,-187(a5) # 80054011 <excpt+0x1>
    800090d4:	c799                	beqz	a5,800090e2 <tinst_tests_pf+0x120e>
    800090d6:	6418                	ld	a4,8(s0)
    800090d8:	47bd                	li	a5,15
    800090da:	00f71463          	bne	a4,a5,800090e2 <tinst_tests_pf+0x120e>
    800090de:	7b70106f          	j	8000b094 <tinst_tests_pf+0x31c0>
    800090e2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090e4:	d29f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    800090e8:	400197b7          	lui	a5,0x40019
    800090ec:	078a                	slli	a5,a5,0x2
    800090ee:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    800090f2:	00026617          	auipc	a2,0x26
    800090f6:	37e60613          	addi	a2,a2,894 # 8002f470 <__func__.0+0x23b8>
    800090fa:	08200593          	li	a1,130
    800090fe:	00024517          	auipc	a0,0x24
    80009102:	2b250513          	addi	a0,a0,690 # 8002d3b0 <__func__.0+0x2f8>
    80009106:	551210ef          	jal	8002ae56 <printf>
    8000910a:	0004b797          	auipc	a5,0x4b
    8000910e:	f077c783          	lbu	a5,-249(a5) # 80054011 <excpt+0x1>
    80009112:	e399                	bnez	a5,80009118 <tinst_tests_pf+0x1244>
    80009114:	4920106f          	j	8000a5a6 <tinst_tests_pf+0x26d2>
    80009118:	6418                	ld	a4,8(s0)
    8000911a:	47bd                	li	a5,15
    8000911c:	00024597          	auipc	a1,0x24
    80009120:	26c58593          	addi	a1,a1,620 # 8002d388 <__func__.0+0x2d0>
    80009124:	00f71463          	bne	a4,a5,8000912c <tinst_tests_pf+0x1258>
    80009128:	4300106f          	j	8000a558 <tinst_tests_pf+0x2684>
    8000912c:	00024517          	auipc	a0,0x24
    80009130:	29c50513          	addi	a0,a0,668 # 8002d3c8 <__func__.0+0x310>
    80009134:	523210ef          	jal	8002ae56 <printf>
    80009138:	0004b797          	auipc	a5,0x4b
    8000913c:	ed97c783          	lbu	a5,-295(a5) # 80054011 <excpt+0x1>
    80009140:	c799                	beqz	a5,8000914e <tinst_tests_pf+0x127a>
    80009142:	6418                	ld	a4,8(s0)
    80009144:	47bd                	li	a5,15
    80009146:	00f71463          	bne	a4,a5,8000914e <tinst_tests_pf+0x127a>
    8000914a:	7d30106f          	j	8000b11c <tinst_tests_pf+0x3248>
    8000914e:	00024517          	auipc	a0,0x24
    80009152:	28250513          	addi	a0,a0,642 # 8002d3d0 <__func__.0+0x318>
    80009156:	501210ef          	jal	8002ae56 <printf>
    8000915a:	02900513          	li	a0,41
    8000915e:	1e7200ef          	jal	80029b44 <putchar>
    80009162:	4529                	li	a0,10
    80009164:	1e1200ef          	jal	80029b44 <putchar>
    80009168:	00090e63          	beqz	s2,80009184 <tinst_tests_pf+0x12b0>
    8000916c:	0004b797          	auipc	a5,0x4b
    80009170:	ea57c783          	lbu	a5,-347(a5) # 80054011 <excpt+0x1>
    80009174:	c799                	beqz	a5,80009182 <tinst_tests_pf+0x12ae>
    80009176:	6418                	ld	a4,8(s0)
    80009178:	47bd                	li	a5,15
    8000917a:	00f71463          	bne	a4,a5,80009182 <tinst_tests_pf+0x12ae>
    8000917e:	75b0106f          	j	8000b0d8 <tinst_tests_pf+0x3204>
    80009182:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009184:	c89f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80009188:	400197b7          	lui	a5,0x40019
    8000918c:	078a                	slli	a5,a5,0x2
    8000918e:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80009192:	00026617          	auipc	a2,0x26
    80009196:	31e60613          	addi	a2,a2,798 # 8002f4b0 <__func__.0+0x23f8>
    8000919a:	08200593          	li	a1,130
    8000919e:	00024517          	auipc	a0,0x24
    800091a2:	21250513          	addi	a0,a0,530 # 8002d3b0 <__func__.0+0x2f8>
    800091a6:	4b1210ef          	jal	8002ae56 <printf>
    800091aa:	0004b797          	auipc	a5,0x4b
    800091ae:	e677c783          	lbu	a5,-409(a5) # 80054011 <excpt+0x1>
    800091b2:	e399                	bnez	a5,800091b8 <tinst_tests_pf+0x12e4>
    800091b4:	4800106f          	j	8000a634 <tinst_tests_pf+0x2760>
    800091b8:	6418                	ld	a4,8(s0)
    800091ba:	47bd                	li	a5,15
    800091bc:	00024597          	auipc	a1,0x24
    800091c0:	1cc58593          	addi	a1,a1,460 # 8002d388 <__func__.0+0x2d0>
    800091c4:	00f71463          	bne	a4,a5,800091cc <tinst_tests_pf+0x12f8>
    800091c8:	41e0106f          	j	8000a5e6 <tinst_tests_pf+0x2712>
    800091cc:	00024517          	auipc	a0,0x24
    800091d0:	1fc50513          	addi	a0,a0,508 # 8002d3c8 <__func__.0+0x310>
    800091d4:	483210ef          	jal	8002ae56 <printf>
    800091d8:	0004b797          	auipc	a5,0x4b
    800091dc:	e397c783          	lbu	a5,-455(a5) # 80054011 <excpt+0x1>
    800091e0:	c799                	beqz	a5,800091ee <tinst_tests_pf+0x131a>
    800091e2:	6418                	ld	a4,8(s0)
    800091e4:	47bd                	li	a5,15
    800091e6:	00f71463          	bne	a4,a5,800091ee <tinst_tests_pf+0x131a>
    800091ea:	7770106f          	j	8000b160 <tinst_tests_pf+0x328c>
    800091ee:	00024517          	auipc	a0,0x24
    800091f2:	1e250513          	addi	a0,a0,482 # 8002d3d0 <__func__.0+0x318>
    800091f6:	461210ef          	jal	8002ae56 <printf>
    800091fa:	02900513          	li	a0,41
    800091fe:	147200ef          	jal	80029b44 <putchar>
    80009202:	4529                	li	a0,10
    80009204:	141200ef          	jal	80029b44 <putchar>
    80009208:	00090a63          	beqz	s2,8000921c <tinst_tests_pf+0x1348>
    8000920c:	0004b797          	auipc	a5,0x4b
    80009210:	e057c783          	lbu	a5,-507(a5) # 80054011 <excpt+0x1>
    80009214:	c399                	beqz	a5,8000921a <tinst_tests_pf+0x1346>
    80009216:	0990106f          	j	8000aaae <tinst_tests_pf+0x2bda>
    8000921a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000921c:	bf1f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80009220:	400197b7          	lui	a5,0x40019
    80009224:	078a                	slli	a5,a5,0x2
    80009226:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000922a:	00026617          	auipc	a2,0x26
    8000922e:	2c660613          	addi	a2,a2,710 # 8002f4f0 <__func__.0+0x2438>
    80009232:	08200593          	li	a1,130
    80009236:	00024517          	auipc	a0,0x24
    8000923a:	17a50513          	addi	a0,a0,378 # 8002d3b0 <__func__.0+0x2f8>
    8000923e:	419210ef          	jal	8002ae56 <printf>
    80009242:	0004b797          	auipc	a5,0x4b
    80009246:	dcf7c783          	lbu	a5,-561(a5) # 80054011 <excpt+0x1>
    8000924a:	e399                	bnez	a5,80009250 <tinst_tests_pf+0x137c>
    8000924c:	4720106f          	j	8000a6be <tinst_tests_pf+0x27ea>
    80009250:	6418                	ld	a4,8(s0)
    80009252:	47bd                	li	a5,15
    80009254:	00024597          	auipc	a1,0x24
    80009258:	13458593          	addi	a1,a1,308 # 8002d388 <__func__.0+0x2d0>
    8000925c:	00f71463          	bne	a4,a5,80009264 <tinst_tests_pf+0x1390>
    80009260:	4100106f          	j	8000a670 <tinst_tests_pf+0x279c>
    80009264:	00024517          	auipc	a0,0x24
    80009268:	16450513          	addi	a0,a0,356 # 8002d3c8 <__func__.0+0x310>
    8000926c:	3eb210ef          	jal	8002ae56 <printf>
    80009270:	0004b797          	auipc	a5,0x4b
    80009274:	da17c783          	lbu	a5,-607(a5) # 80054011 <excpt+0x1>
    80009278:	c799                	beqz	a5,80009286 <tinst_tests_pf+0x13b2>
    8000927a:	6418                	ld	a4,8(s0)
    8000927c:	47bd                	li	a5,15
    8000927e:	00f71463          	bne	a4,a5,80009286 <tinst_tests_pf+0x13b2>
    80009282:	7230106f          	j	8000b1a4 <tinst_tests_pf+0x32d0>
    80009286:	00024517          	auipc	a0,0x24
    8000928a:	14a50513          	addi	a0,a0,330 # 8002d3d0 <__func__.0+0x318>
    8000928e:	3c9210ef          	jal	8002ae56 <printf>
    80009292:	02900513          	li	a0,41
    80009296:	0af200ef          	jal	80029b44 <putchar>
    8000929a:	4529                	li	a0,10
    8000929c:	0a9200ef          	jal	80029b44 <putchar>
    800092a0:	00090a63          	beqz	s2,800092b4 <tinst_tests_pf+0x13e0>
    800092a4:	0004b797          	auipc	a5,0x4b
    800092a8:	d6d7c783          	lbu	a5,-659(a5) # 80054011 <excpt+0x1>
    800092ac:	c399                	beqz	a5,800092b2 <tinst_tests_pf+0x13de>
    800092ae:	04f0106f          	j	8000aafc <tinst_tests_pf+0x2c28>
    800092b2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800092b4:	b59f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800092b8:	400197b7          	lui	a5,0x40019
    800092bc:	078a                	slli	a5,a5,0x2
    800092be:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    800092c2:	00026617          	auipc	a2,0x26
    800092c6:	26e60613          	addi	a2,a2,622 # 8002f530 <__func__.0+0x2478>
    800092ca:	08200593          	li	a1,130
    800092ce:	00024517          	auipc	a0,0x24
    800092d2:	0e250513          	addi	a0,a0,226 # 8002d3b0 <__func__.0+0x2f8>
    800092d6:	381210ef          	jal	8002ae56 <printf>
    800092da:	0004b797          	auipc	a5,0x4b
    800092de:	d377c783          	lbu	a5,-713(a5) # 80054011 <excpt+0x1>
    800092e2:	e399                	bnez	a5,800092e8 <tinst_tests_pf+0x1414>
    800092e4:	4340106f          	j	8000a718 <tinst_tests_pf+0x2844>
    800092e8:	6418                	ld	a4,8(s0)
    800092ea:	47bd                	li	a5,15
    800092ec:	00024597          	auipc	a1,0x24
    800092f0:	09c58593          	addi	a1,a1,156 # 8002d388 <__func__.0+0x2d0>
    800092f4:	00f71463          	bne	a4,a5,800092fc <tinst_tests_pf+0x1428>
    800092f8:	3d20106f          	j	8000a6ca <tinst_tests_pf+0x27f6>
    800092fc:	00024517          	auipc	a0,0x24
    80009300:	0cc50513          	addi	a0,a0,204 # 8002d3c8 <__func__.0+0x310>
    80009304:	353210ef          	jal	8002ae56 <printf>
    80009308:	0004b797          	auipc	a5,0x4b
    8000930c:	d097c783          	lbu	a5,-759(a5) # 80054011 <excpt+0x1>
    80009310:	c799                	beqz	a5,8000931e <tinst_tests_pf+0x144a>
    80009312:	6418                	ld	a4,8(s0)
    80009314:	47bd                	li	a5,15
    80009316:	00f71463          	bne	a4,a5,8000931e <tinst_tests_pf+0x144a>
    8000931a:	6cf0106f          	j	8000b1e8 <tinst_tests_pf+0x3314>
    8000931e:	00024517          	auipc	a0,0x24
    80009322:	0b250513          	addi	a0,a0,178 # 8002d3d0 <__func__.0+0x318>
    80009326:	331210ef          	jal	8002ae56 <printf>
    8000932a:	02900513          	li	a0,41
    8000932e:	017200ef          	jal	80029b44 <putchar>
    80009332:	4529                	li	a0,10
    80009334:	011200ef          	jal	80029b44 <putchar>
    80009338:	00090a63          	beqz	s2,8000934c <tinst_tests_pf+0x1478>
    8000933c:	0004b797          	auipc	a5,0x4b
    80009340:	cd57c783          	lbu	a5,-811(a5) # 80054011 <excpt+0x1>
    80009344:	c399                	beqz	a5,8000934a <tinst_tests_pf+0x1476>
    80009346:	02f0106f          	j	8000ab74 <tinst_tests_pf+0x2ca0>
    8000934a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000934c:	ac1f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80009350:	400197b7          	lui	a5,0x40019
    80009354:	078a                	slli	a5,a5,0x2
    80009356:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000935a:	00026617          	auipc	a2,0x26
    8000935e:	21660613          	addi	a2,a2,534 # 8002f570 <__func__.0+0x24b8>
    80009362:	08200593          	li	a1,130
    80009366:	00024517          	auipc	a0,0x24
    8000936a:	04a50513          	addi	a0,a0,74 # 8002d3b0 <__func__.0+0x2f8>
    8000936e:	2e9210ef          	jal	8002ae56 <printf>
    80009372:	0004b797          	auipc	a5,0x4b
    80009376:	c9f7c783          	lbu	a5,-865(a5) # 80054011 <excpt+0x1>
    8000937a:	e399                	bnez	a5,80009380 <tinst_tests_pf+0x14ac>
    8000937c:	3f60106f          	j	8000a772 <tinst_tests_pf+0x289e>
    80009380:	6418                	ld	a4,8(s0)
    80009382:	47bd                	li	a5,15
    80009384:	00024597          	auipc	a1,0x24
    80009388:	00458593          	addi	a1,a1,4 # 8002d388 <__func__.0+0x2d0>
    8000938c:	00f71463          	bne	a4,a5,80009394 <tinst_tests_pf+0x14c0>
    80009390:	3940106f          	j	8000a724 <tinst_tests_pf+0x2850>
    80009394:	00024517          	auipc	a0,0x24
    80009398:	03450513          	addi	a0,a0,52 # 8002d3c8 <__func__.0+0x310>
    8000939c:	2bb210ef          	jal	8002ae56 <printf>
    800093a0:	0004b797          	auipc	a5,0x4b
    800093a4:	c717c783          	lbu	a5,-911(a5) # 80054011 <excpt+0x1>
    800093a8:	c799                	beqz	a5,800093b6 <tinst_tests_pf+0x14e2>
    800093aa:	6418                	ld	a4,8(s0)
    800093ac:	47bd                	li	a5,15
    800093ae:	00f71463          	bne	a4,a5,800093b6 <tinst_tests_pf+0x14e2>
    800093b2:	67b0106f          	j	8000b22c <tinst_tests_pf+0x3358>
    800093b6:	00024517          	auipc	a0,0x24
    800093ba:	01a50513          	addi	a0,a0,26 # 8002d3d0 <__func__.0+0x318>
    800093be:	299210ef          	jal	8002ae56 <printf>
    800093c2:	02900513          	li	a0,41
    800093c6:	77e200ef          	jal	80029b44 <putchar>
    800093ca:	4529                	li	a0,10
    800093cc:	778200ef          	jal	80029b44 <putchar>
    800093d0:	00090a63          	beqz	s2,800093e4 <tinst_tests_pf+0x1510>
    800093d4:	0004b797          	auipc	a5,0x4b
    800093d8:	c3d7c783          	lbu	a5,-963(a5) # 80054011 <excpt+0x1>
    800093dc:	c399                	beqz	a5,800093e2 <tinst_tests_pf+0x150e>
    800093de:	7e40106f          	j	8000abc2 <tinst_tests_pf+0x2cee>
    800093e2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800093e4:	a29f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    800093e8:	400197b7          	lui	a5,0x40019
    800093ec:	078a                	slli	a5,a5,0x2
    800093ee:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800093f2:	00026617          	auipc	a2,0x26
    800093f6:	1be60613          	addi	a2,a2,446 # 8002f5b0 <__func__.0+0x24f8>
    800093fa:	08200593          	li	a1,130
    800093fe:	00024517          	auipc	a0,0x24
    80009402:	fb250513          	addi	a0,a0,-78 # 8002d3b0 <__func__.0+0x2f8>
    80009406:	251210ef          	jal	8002ae56 <printf>
    8000940a:	0004b797          	auipc	a5,0x4b
    8000940e:	c077c783          	lbu	a5,-1017(a5) # 80054011 <excpt+0x1>
    80009412:	e399                	bnez	a5,80009418 <tinst_tests_pf+0x1544>
    80009414:	3b80106f          	j	8000a7cc <tinst_tests_pf+0x28f8>
    80009418:	6418                	ld	a4,8(s0)
    8000941a:	47bd                	li	a5,15
    8000941c:	00024597          	auipc	a1,0x24
    80009420:	f6c58593          	addi	a1,a1,-148 # 8002d388 <__func__.0+0x2d0>
    80009424:	00f71463          	bne	a4,a5,8000942c <tinst_tests_pf+0x1558>
    80009428:	3560106f          	j	8000a77e <tinst_tests_pf+0x28aa>
    8000942c:	00024517          	auipc	a0,0x24
    80009430:	f9c50513          	addi	a0,a0,-100 # 8002d3c8 <__func__.0+0x310>
    80009434:	223210ef          	jal	8002ae56 <printf>
    80009438:	0004b797          	auipc	a5,0x4b
    8000943c:	bd97c783          	lbu	a5,-1063(a5) # 80054011 <excpt+0x1>
    80009440:	c799                	beqz	a5,8000944e <tinst_tests_pf+0x157a>
    80009442:	6418                	ld	a4,8(s0)
    80009444:	47bd                	li	a5,15
    80009446:	00f71463          	bne	a4,a5,8000944e <tinst_tests_pf+0x157a>
    8000944a:	6270106f          	j	8000b270 <tinst_tests_pf+0x339c>
    8000944e:	00024517          	auipc	a0,0x24
    80009452:	f8250513          	addi	a0,a0,-126 # 8002d3d0 <__func__.0+0x318>
    80009456:	201210ef          	jal	8002ae56 <printf>
    8000945a:	02900513          	li	a0,41
    8000945e:	6e6200ef          	jal	80029b44 <putchar>
    80009462:	4529                	li	a0,10
    80009464:	6e0200ef          	jal	80029b44 <putchar>
    80009468:	04090e63          	beqz	s2,800094c4 <tinst_tests_pf+0x15f0>
    8000946c:	0004b497          	auipc	s1,0x4b
    80009470:	ba54c483          	lbu	s1,-1115(s1) # 80054011 <excpt+0x1>
    80009474:	c8a9                	beqz	s1,800094c6 <tinst_tests_pf+0x15f2>
    80009476:	6418                	ld	a4,8(s0)
    80009478:	47bd                	li	a5,15
    8000947a:	04f71563          	bne	a4,a5,800094c4 <tinst_tests_pf+0x15f0>
    8000947e:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80009480:	00024597          	auipc	a1,0x24
    80009484:	ef858593          	addi	a1,a1,-264 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009488:	c3b9                	beqz	a5,800094ce <tinst_tests_pf+0x15fa>
    8000948a:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    8000948c:	0016f713          	andi	a4,a3,1
    80009490:	2c0710e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    80009494:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009498:	460d                	li	a2,3
    8000949a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000949e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800094a0:	00c59763          	bne	a1,a2,800094ae <tinst_tests_pf+0x15da>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094a4:	0026d683          	lhu	a3,2(a3)
    800094a8:	0106969b          	slliw	a3,a3,0x10
    800094ac:	8f55                	or	a4,a4,a3
    800094ae:	1ffe16b7          	lui	a3,0x1ffe1
    800094b2:	068e                	slli	a3,a3,0x3
    800094b4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800094b6:	8f75                	and	a4,a4,a3
    TEST_END();
    800094b8:	00024597          	auipc	a1,0x24
    800094bc:	ec058593          	addi	a1,a1,-320 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800094c0:	00e78763          	beq	a5,a4,800094ce <tinst_tests_pf+0x15fa>
    800094c4:	4481                	li	s1,0
    TEST_END();
    800094c6:	00024597          	auipc	a1,0x24
    800094ca:	ec258593          	addi	a1,a1,-318 # 8002d388 <__func__.0+0x2d0>
    800094ce:	00024517          	auipc	a0,0x24
    800094d2:	f6250513          	addi	a0,a0,-158 # 8002d430 <__func__.0+0x378>
    800094d6:	181210ef          	jal	8002ae56 <printf>
    800094da:	4511                	li	a0,4
    800094dc:	a2df70ef          	jal	80000f08 <goto_priv>
    800094e0:	b44f80ef          	jal	80001824 <reset_state>
}
    800094e4:	70a2                	ld	ra,40(sp)
    800094e6:	7402                	ld	s0,32(sp)
    800094e8:	6942                	ld	s2,16(sp)
    800094ea:	69a2                	ld	s3,8(sp)
    800094ec:	8526                	mv	a0,s1
    800094ee:	64e2                	ld	s1,24(sp)
    800094f0:	6145                	addi	sp,sp,48
    800094f2:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    800094f4:	701c                	ld	a5,32(s0)
    800094f6:	00024597          	auipc	a1,0x24
    800094fa:	e8258593          	addi	a1,a1,-382 # 8002d378 <__func__.0+0x2c0>
    800094fe:	e399                	bnez	a5,80009504 <tinst_tests_pf+0x1630>
    80009500:	a55fe06f          	j	80007f54 <tinst_tests_pf+0x80>
    80009504:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009506:	0016f713          	andi	a4,a3,1
    8000950a:	240713e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000950e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009512:	460d                	li	a2,3
    80009514:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009518:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000951a:	00c59763          	bne	a1,a2,80009528 <tinst_tests_pf+0x1654>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000951e:	0026d683          	lhu	a3,2(a3)
    80009522:	0106969b          	slliw	a3,a3,0x10
    80009526:	8f55                	or	a4,a4,a3
    80009528:	1746                	slli	a4,a4,0x31
    8000952a:	9345                	srli	a4,a4,0x31
    8000952c:	00024597          	auipc	a1,0x24
    80009530:	e4c58593          	addi	a1,a1,-436 # 8002d378 <__func__.0+0x2c0>
    80009534:	00e79463          	bne	a5,a4,8000953c <tinst_tests_pf+0x1668>
    80009538:	a1dfe06f          	j	80007f54 <tinst_tests_pf+0x80>
    8000953c:	00024597          	auipc	a1,0x24
    80009540:	e4c58593          	addi	a1,a1,-436 # 8002d388 <__func__.0+0x2d0>
    80009544:	a11fe06f          	j	80007f54 <tinst_tests_pf+0x80>
    80009548:	6418                	ld	a4,8(s0)
    8000954a:	47b5                	li	a5,13
    8000954c:	4901                	li	s2,0
    8000954e:	00f70463          	beq	a4,a5,80009556 <tinst_tests_pf+0x1682>
    80009552:	a4ffe06f          	j	80007fa0 <tinst_tests_pf+0xcc>
    80009556:	7018                	ld	a4,32(s0)
    80009558:	4905                	li	s2,1
    8000955a:	e319                	bnez	a4,80009560 <tinst_tests_pf+0x168c>
    8000955c:	a45fe06f          	j	80007fa0 <tinst_tests_pf+0xcc>
    80009560:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009562:	0126f7b3          	and	a5,a3,s2
    80009566:	1e0795e3          	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000956a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000956e:	460d                	li	a2,3
    80009570:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009574:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009576:	00c59763          	bne	a1,a2,80009584 <tinst_tests_pf+0x16b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000957a:	0026d683          	lhu	a3,2(a3)
    8000957e:	0106969b          	slliw	a3,a3,0x10
    80009582:	8fd5                	or	a5,a5,a3
    80009584:	03179913          	slli	s2,a5,0x31
    80009588:	03195913          	srli	s2,s2,0x31
    8000958c:	40e90933          	sub	s2,s2,a4
    80009590:	00193913          	seqz	s2,s2
    80009594:	a0dfe06f          	j	80007fa0 <tinst_tests_pf+0xcc>
    80009598:	701c                	ld	a5,32(s0)
    8000959a:	e399                	bnez	a5,800095a0 <tinst_tests_pf+0x16cc>
    8000959c:	9effe06f          	j	80007f8a <tinst_tests_pf+0xb6>
    800095a0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095a2:	0016f713          	andi	a4,a3,1
    800095a6:	1a0715e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095ae:	460d                	li	a2,3
    800095b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095b6:	00c59763          	bne	a1,a2,800095c4 <tinst_tests_pf+0x16f0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095ba:	0026d683          	lhu	a3,2(a3)
    800095be:	0106969b          	slliw	a3,a3,0x10
    800095c2:	8f55                	or	a4,a4,a3
    800095c4:	1746                	slli	a4,a4,0x31
    800095c6:	9345                	srli	a4,a4,0x31
    800095c8:	00e78463          	beq	a5,a4,800095d0 <tinst_tests_pf+0x16fc>
    800095cc:	9abfe06f          	j	80007f76 <tinst_tests_pf+0xa2>
    800095d0:	9bbfe06f          	j	80007f8a <tinst_tests_pf+0xb6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    800095d4:	701c                	ld	a5,32(s0)
    800095d6:	00024597          	auipc	a1,0x24
    800095da:	da258593          	addi	a1,a1,-606 # 8002d378 <__func__.0+0x2c0>
    800095de:	e399                	bnez	a5,800095e4 <tinst_tests_pf+0x1710>
    800095e0:	a09fe06f          	j	80007fe8 <tinst_tests_pf+0x114>
    800095e4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095e6:	0016f713          	andi	a4,a3,1
    800095ea:	160713e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095ee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095f2:	460d                	li	a2,3
    800095f4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095f8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095fa:	00c59763          	bne	a1,a2,80009608 <tinst_tests_pf+0x1734>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095fe:	0026d683          	lhu	a3,2(a3)
    80009602:	0106969b          	slliw	a3,a3,0x10
    80009606:	8f55                	or	a4,a4,a3
    80009608:	1746                	slli	a4,a4,0x31
    8000960a:	9345                	srli	a4,a4,0x31
    8000960c:	00024597          	auipc	a1,0x24
    80009610:	d6c58593          	addi	a1,a1,-660 # 8002d378 <__func__.0+0x2c0>
    80009614:	00e79463          	bne	a5,a4,8000961c <tinst_tests_pf+0x1748>
    80009618:	9d1fe06f          	j	80007fe8 <tinst_tests_pf+0x114>
    8000961c:	00024597          	auipc	a1,0x24
    80009620:	d6c58593          	addi	a1,a1,-660 # 8002d388 <__func__.0+0x2d0>
    80009624:	9c5fe06f          	j	80007fe8 <tinst_tests_pf+0x114>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009628:	701c                	ld	a5,32(s0)
    8000962a:	00024597          	auipc	a1,0x24
    8000962e:	d4e58593          	addi	a1,a1,-690 # 8002d378 <__func__.0+0x2c0>
    80009632:	e399                	bnez	a5,80009638 <tinst_tests_pf+0x1764>
    80009634:	a55fe06f          	j	80008088 <tinst_tests_pf+0x1b4>
    80009638:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000963a:	0016f713          	andi	a4,a3,1
    8000963e:	100719e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009642:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009646:	460d                	li	a2,3
    80009648:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000964c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000964e:	00c59763          	bne	a1,a2,8000965c <tinst_tests_pf+0x1788>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009652:	0026d683          	lhu	a3,2(a3)
    80009656:	0106969b          	slliw	a3,a3,0x10
    8000965a:	8f55                	or	a4,a4,a3
    8000965c:	1746                	slli	a4,a4,0x31
    8000965e:	9345                	srli	a4,a4,0x31
    80009660:	00024597          	auipc	a1,0x24
    80009664:	d1858593          	addi	a1,a1,-744 # 8002d378 <__func__.0+0x2c0>
    80009668:	00e79463          	bne	a5,a4,80009670 <tinst_tests_pf+0x179c>
    8000966c:	a1dfe06f          	j	80008088 <tinst_tests_pf+0x1b4>
    80009670:	00024597          	auipc	a1,0x24
    80009674:	d1858593          	addi	a1,a1,-744 # 8002d388 <__func__.0+0x2d0>
    80009678:	a11fe06f          	j	80008088 <tinst_tests_pf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000967c:	701c                	ld	a5,32(s0)
    8000967e:	00024597          	auipc	a1,0x24
    80009682:	cfa58593          	addi	a1,a1,-774 # 8002d378 <__func__.0+0x2c0>
    80009686:	e399                	bnez	a5,8000968c <tinst_tests_pf+0x17b8>
    80009688:	aa1fe06f          	j	80008128 <tinst_tests_pf+0x254>
    8000968c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000968e:	0016f713          	andi	a4,a3,1
    80009692:	0a071fe3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009696:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000969a:	460d                	li	a2,3
    8000969c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096a2:	00c59763          	bne	a1,a2,800096b0 <tinst_tests_pf+0x17dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096a6:	0026d683          	lhu	a3,2(a3)
    800096aa:	0106969b          	slliw	a3,a3,0x10
    800096ae:	8f55                	or	a4,a4,a3
    800096b0:	1746                	slli	a4,a4,0x31
    800096b2:	9345                	srli	a4,a4,0x31
    800096b4:	00024597          	auipc	a1,0x24
    800096b8:	cc458593          	addi	a1,a1,-828 # 8002d378 <__func__.0+0x2c0>
    800096bc:	00e79463          	bne	a5,a4,800096c4 <tinst_tests_pf+0x17f0>
    800096c0:	a69fe06f          	j	80008128 <tinst_tests_pf+0x254>
    800096c4:	00024597          	auipc	a1,0x24
    800096c8:	cc458593          	addi	a1,a1,-828 # 8002d388 <__func__.0+0x2d0>
    800096cc:	a5dfe06f          	j	80008128 <tinst_tests_pf+0x254>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800096d0:	701c                	ld	a5,32(s0)
    800096d2:	00024597          	auipc	a1,0x24
    800096d6:	ca658593          	addi	a1,a1,-858 # 8002d378 <__func__.0+0x2c0>
    800096da:	e399                	bnez	a5,800096e0 <tinst_tests_pf+0x180c>
    800096dc:	aedfe06f          	j	800081c8 <tinst_tests_pf+0x2f4>
    800096e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096e2:	0016f713          	andi	a4,a3,1
    800096e6:	060715e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800096ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096ee:	460d                	li	a2,3
    800096f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096f6:	00c59763          	bne	a1,a2,80009704 <tinst_tests_pf+0x1830>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096fa:	0026d683          	lhu	a3,2(a3)
    800096fe:	0106969b          	slliw	a3,a3,0x10
    80009702:	8f55                	or	a4,a4,a3
    80009704:	1746                	slli	a4,a4,0x31
    80009706:	9345                	srli	a4,a4,0x31
    80009708:	00024597          	auipc	a1,0x24
    8000970c:	c7058593          	addi	a1,a1,-912 # 8002d378 <__func__.0+0x2c0>
    80009710:	00e79463          	bne	a5,a4,80009718 <tinst_tests_pf+0x1844>
    80009714:	ab5fe06f          	j	800081c8 <tinst_tests_pf+0x2f4>
    80009718:	00024597          	auipc	a1,0x24
    8000971c:	c7058593          	addi	a1,a1,-912 # 8002d388 <__func__.0+0x2d0>
    80009720:	aa9fe06f          	j	800081c8 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009724:	701c                	ld	a5,32(s0)
    80009726:	00024597          	auipc	a1,0x24
    8000972a:	c5258593          	addi	a1,a1,-942 # 8002d378 <__func__.0+0x2c0>
    8000972e:	e399                	bnez	a5,80009734 <tinst_tests_pf+0x1860>
    80009730:	b31fe06f          	j	80008260 <tinst_tests_pf+0x38c>
    80009734:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009736:	0016f713          	andi	a4,a3,1
    8000973a:	00071be3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000973e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009742:	460d                	li	a2,3
    80009744:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009748:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000974a:	00c59763          	bne	a1,a2,80009758 <tinst_tests_pf+0x1884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000974e:	0026d683          	lhu	a3,2(a3)
    80009752:	0106969b          	slliw	a3,a3,0x10
    80009756:	8f55                	or	a4,a4,a3
    80009758:	1746                	slli	a4,a4,0x31
    8000975a:	9345                	srli	a4,a4,0x31
    8000975c:	00024597          	auipc	a1,0x24
    80009760:	c1c58593          	addi	a1,a1,-996 # 8002d378 <__func__.0+0x2c0>
    80009764:	00e79463          	bne	a5,a4,8000976c <tinst_tests_pf+0x1898>
    80009768:	af9fe06f          	j	80008260 <tinst_tests_pf+0x38c>
    8000976c:	00024597          	auipc	a1,0x24
    80009770:	c1c58593          	addi	a1,a1,-996 # 8002d388 <__func__.0+0x2d0>
    80009774:	aedfe06f          	j	80008260 <tinst_tests_pf+0x38c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009778:	701c                	ld	a5,32(s0)
    8000977a:	00024597          	auipc	a1,0x24
    8000977e:	bfe58593          	addi	a1,a1,-1026 # 8002d378 <__func__.0+0x2c0>
    80009782:	e399                	bnez	a5,80009788 <tinst_tests_pf+0x18b4>
    80009784:	b75fe06f          	j	800082f8 <tinst_tests_pf+0x424>
    80009788:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000978a:	0016f713          	andi	a4,a3,1
    8000978e:	7c071163          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009792:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009796:	460d                	li	a2,3
    80009798:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000979c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000979e:	00c59763          	bne	a1,a2,800097ac <tinst_tests_pf+0x18d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097a2:	0026d683          	lhu	a3,2(a3)
    800097a6:	0106969b          	slliw	a3,a3,0x10
    800097aa:	8f55                	or	a4,a4,a3
    800097ac:	1746                	slli	a4,a4,0x31
    800097ae:	9345                	srli	a4,a4,0x31
    800097b0:	00024597          	auipc	a1,0x24
    800097b4:	bc858593          	addi	a1,a1,-1080 # 8002d378 <__func__.0+0x2c0>
    800097b8:	00e79463          	bne	a5,a4,800097c0 <tinst_tests_pf+0x18ec>
    800097bc:	b3dfe06f          	j	800082f8 <tinst_tests_pf+0x424>
    800097c0:	00024597          	auipc	a1,0x24
    800097c4:	bc858593          	addi	a1,a1,-1080 # 8002d388 <__func__.0+0x2d0>
    800097c8:	b31fe06f          	j	800082f8 <tinst_tests_pf+0x424>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800097cc:	701c                	ld	a5,32(s0)
    800097ce:	00024597          	auipc	a1,0x24
    800097d2:	baa58593          	addi	a1,a1,-1110 # 8002d378 <__func__.0+0x2c0>
    800097d6:	e399                	bnez	a5,800097dc <tinst_tests_pf+0x1908>
    800097d8:	bbbfe06f          	j	80008392 <tinst_tests_pf+0x4be>
    800097dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097de:	0016f713          	andi	a4,a3,1
    800097e2:	76071763          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800097e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097ea:	460d                	li	a2,3
    800097ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800097f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800097f2:	00c59763          	bne	a1,a2,80009800 <tinst_tests_pf+0x192c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097f6:	0026d683          	lhu	a3,2(a3)
    800097fa:	0106969b          	slliw	a3,a3,0x10
    800097fe:	8f55                	or	a4,a4,a3
    80009800:	01f076b7          	lui	a3,0x1f07
    80009804:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009808:	8f75                	and	a4,a4,a3
    8000980a:	00024597          	auipc	a1,0x24
    8000980e:	b6e58593          	addi	a1,a1,-1170 # 8002d378 <__func__.0+0x2c0>
    80009812:	00e79463          	bne	a5,a4,8000981a <tinst_tests_pf+0x1946>
    80009816:	b7dfe06f          	j	80008392 <tinst_tests_pf+0x4be>
    8000981a:	00024597          	auipc	a1,0x24
    8000981e:	b6e58593          	addi	a1,a1,-1170 # 8002d388 <__func__.0+0x2d0>
    80009822:	b71fe06f          	j	80008392 <tinst_tests_pf+0x4be>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009826:	701c                	ld	a5,32(s0)
    80009828:	00024597          	auipc	a1,0x24
    8000982c:	b5058593          	addi	a1,a1,-1200 # 8002d378 <__func__.0+0x2c0>
    80009830:	e399                	bnez	a5,80009836 <tinst_tests_pf+0x1962>
    80009832:	bfffe06f          	j	80008430 <tinst_tests_pf+0x55c>
    80009836:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009838:	0016f713          	andi	a4,a3,1
    8000983c:	70071a63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009840:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009844:	460d                	li	a2,3
    80009846:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000984a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000984c:	00c59763          	bne	a1,a2,8000985a <tinst_tests_pf+0x1986>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009850:	0026d683          	lhu	a3,2(a3)
    80009854:	0106969b          	slliw	a3,a3,0x10
    80009858:	8f55                	or	a4,a4,a3
    8000985a:	01f076b7          	lui	a3,0x1f07
    8000985e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009862:	8f75                	and	a4,a4,a3
    80009864:	00024597          	auipc	a1,0x24
    80009868:	b1458593          	addi	a1,a1,-1260 # 8002d378 <__func__.0+0x2c0>
    8000986c:	00e79463          	bne	a5,a4,80009874 <tinst_tests_pf+0x19a0>
    80009870:	bc1fe06f          	j	80008430 <tinst_tests_pf+0x55c>
    80009874:	00024597          	auipc	a1,0x24
    80009878:	b1458593          	addi	a1,a1,-1260 # 8002d388 <__func__.0+0x2d0>
    8000987c:	bb5fe06f          	j	80008430 <tinst_tests_pf+0x55c>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009880:	701c                	ld	a5,32(s0)
    80009882:	00024597          	auipc	a1,0x24
    80009886:	af658593          	addi	a1,a1,-1290 # 8002d378 <__func__.0+0x2c0>
    8000988a:	e399                	bnez	a5,80009890 <tinst_tests_pf+0x19bc>
    8000988c:	c45fe06f          	j	800084d0 <tinst_tests_pf+0x5fc>
    80009890:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009892:	0016f713          	andi	a4,a3,1
    80009896:	6a071d63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000989a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000989e:	460d                	li	a2,3
    800098a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098a6:	00c59763          	bne	a1,a2,800098b4 <tinst_tests_pf+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098aa:	0026d683          	lhu	a3,2(a3)
    800098ae:	0106969b          	slliw	a3,a3,0x10
    800098b2:	8f55                	or	a4,a4,a3
    800098b4:	01f076b7          	lui	a3,0x1f07
    800098b8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800098bc:	8f75                	and	a4,a4,a3
    800098be:	00024597          	auipc	a1,0x24
    800098c2:	aba58593          	addi	a1,a1,-1350 # 8002d378 <__func__.0+0x2c0>
    800098c6:	00e79463          	bne	a5,a4,800098ce <tinst_tests_pf+0x19fa>
    800098ca:	c07fe06f          	j	800084d0 <tinst_tests_pf+0x5fc>
    800098ce:	00024597          	auipc	a1,0x24
    800098d2:	aba58593          	addi	a1,a1,-1350 # 8002d388 <__func__.0+0x2d0>
    800098d6:	bfbfe06f          	j	800084d0 <tinst_tests_pf+0x5fc>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    800098da:	701c                	ld	a5,32(s0)
    800098dc:	00024597          	auipc	a1,0x24
    800098e0:	a9c58593          	addi	a1,a1,-1380 # 8002d378 <__func__.0+0x2c0>
    800098e4:	e399                	bnez	a5,800098ea <tinst_tests_pf+0x1a16>
    800098e6:	c8dfe06f          	j	80008572 <tinst_tests_pf+0x69e>
    800098ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098ec:	0016f713          	andi	a4,a3,1
    800098f0:	66071063          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800098f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098f8:	460d                	li	a2,3
    800098fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009900:	00c59763          	bne	a1,a2,8000990e <tinst_tests_pf+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009904:	0026d683          	lhu	a3,2(a3)
    80009908:	0106969b          	slliw	a3,a3,0x10
    8000990c:	8f55                	or	a4,a4,a3
    8000990e:	01f076b7          	lui	a3,0x1f07
    80009912:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009916:	8f75                	and	a4,a4,a3
    80009918:	00024597          	auipc	a1,0x24
    8000991c:	a6058593          	addi	a1,a1,-1440 # 8002d378 <__func__.0+0x2c0>
    80009920:	00e79463          	bne	a5,a4,80009928 <tinst_tests_pf+0x1a54>
    80009924:	c4ffe06f          	j	80008572 <tinst_tests_pf+0x69e>
    80009928:	00024597          	auipc	a1,0x24
    8000992c:	a6058593          	addi	a1,a1,-1440 # 8002d388 <__func__.0+0x2d0>
    80009930:	c43fe06f          	j	80008572 <tinst_tests_pf+0x69e>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009934:	701c                	ld	a5,32(s0)
    80009936:	00024597          	auipc	a1,0x24
    8000993a:	a4258593          	addi	a1,a1,-1470 # 8002d378 <__func__.0+0x2c0>
    8000993e:	e399                	bnez	a5,80009944 <tinst_tests_pf+0x1a70>
    80009940:	f2ffe06f          	j	8000886e <tinst_tests_pf+0x99a>
    80009944:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009946:	0016f713          	andi	a4,a3,1
    8000994a:	60071363          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000994e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009952:	460d                	li	a2,3
    80009954:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009958:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000995a:	00c59763          	bne	a1,a2,80009968 <tinst_tests_pf+0x1a94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000995e:	0026d683          	lhu	a3,2(a3)
    80009962:	0106969b          	slliw	a3,a3,0x10
    80009966:	8f55                	or	a4,a4,a3
    80009968:	1ffe16b7          	lui	a3,0x1ffe1
    8000996c:	068e                	slli	a3,a3,0x3
    8000996e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009970:	8f75                	and	a4,a4,a3
    80009972:	00024597          	auipc	a1,0x24
    80009976:	a0658593          	addi	a1,a1,-1530 # 8002d378 <__func__.0+0x2c0>
    8000997a:	00e79463          	bne	a5,a4,80009982 <tinst_tests_pf+0x1aae>
    8000997e:	ef1fe06f          	j	8000886e <tinst_tests_pf+0x99a>
    80009982:	00024597          	auipc	a1,0x24
    80009986:	a0658593          	addi	a1,a1,-1530 # 8002d388 <__func__.0+0x2d0>
    8000998a:	ee5fe06f          	j	8000886e <tinst_tests_pf+0x99a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000998e:	701c                	ld	a5,32(s0)
    80009990:	00024597          	auipc	a1,0x24
    80009994:	9e858593          	addi	a1,a1,-1560 # 8002d378 <__func__.0+0x2c0>
    80009998:	e399                	bnez	a5,8000999e <tinst_tests_pf+0x1aca>
    8000999a:	f7bfe06f          	j	80008914 <tinst_tests_pf+0xa40>
    8000999e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099a0:	0016f713          	andi	a4,a3,1
    800099a4:	5a071663          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099ac:	460d                	li	a2,3
    800099ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099b4:	00c59763          	bne	a1,a2,800099c2 <tinst_tests_pf+0x1aee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099b8:	0026d683          	lhu	a3,2(a3)
    800099bc:	0106969b          	slliw	a3,a3,0x10
    800099c0:	8f55                	or	a4,a4,a3
    800099c2:	1ffe16b7          	lui	a3,0x1ffe1
    800099c6:	068e                	slli	a3,a3,0x3
    800099c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800099ca:	8f75                	and	a4,a4,a3
    800099cc:	00024597          	auipc	a1,0x24
    800099d0:	9ac58593          	addi	a1,a1,-1620 # 8002d378 <__func__.0+0x2c0>
    800099d4:	00e79463          	bne	a5,a4,800099dc <tinst_tests_pf+0x1b08>
    800099d8:	f3dfe06f          	j	80008914 <tinst_tests_pf+0xa40>
    800099dc:	00024597          	auipc	a1,0x24
    800099e0:	9ac58593          	addi	a1,a1,-1620 # 8002d388 <__func__.0+0x2d0>
    800099e4:	f31fe06f          	j	80008914 <tinst_tests_pf+0xa40>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    800099e8:	701c                	ld	a5,32(s0)
    800099ea:	00024597          	auipc	a1,0x24
    800099ee:	98e58593          	addi	a1,a1,-1650 # 8002d378 <__func__.0+0x2c0>
    800099f2:	e399                	bnez	a5,800099f8 <tinst_tests_pf+0x1b24>
    800099f4:	fc1fe06f          	j	800089b4 <tinst_tests_pf+0xae0>
    800099f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099fa:	0016f713          	andi	a4,a3,1
    800099fe:	54071963          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a02:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a06:	460d                	li	a2,3
    80009a08:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a0c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a0e:	00c59763          	bne	a1,a2,80009a1c <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a12:	0026d683          	lhu	a3,2(a3)
    80009a16:	0106969b          	slliw	a3,a3,0x10
    80009a1a:	8f55                	or	a4,a4,a3
    80009a1c:	1ffe16b7          	lui	a3,0x1ffe1
    80009a20:	068e                	slli	a3,a3,0x3
    80009a22:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a24:	8f75                	and	a4,a4,a3
    80009a26:	00024597          	auipc	a1,0x24
    80009a2a:	95258593          	addi	a1,a1,-1710 # 8002d378 <__func__.0+0x2c0>
    80009a2e:	00e79463          	bne	a5,a4,80009a36 <tinst_tests_pf+0x1b62>
    80009a32:	f83fe06f          	j	800089b4 <tinst_tests_pf+0xae0>
    80009a36:	00024597          	auipc	a1,0x24
    80009a3a:	95258593          	addi	a1,a1,-1710 # 8002d388 <__func__.0+0x2d0>
    80009a3e:	f77fe06f          	j	800089b4 <tinst_tests_pf+0xae0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009a42:	701c                	ld	a5,32(s0)
    80009a44:	e399                	bnez	a5,80009a4a <tinst_tests_pf+0x1b76>
    80009a46:	dd8fe06f          	j	8000801e <tinst_tests_pf+0x14a>
    80009a4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a4c:	0016f713          	andi	a4,a3,1
    80009a50:	50071063          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a58:	460d                	li	a2,3
    80009a5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a60:	00c59763          	bne	a1,a2,80009a6e <tinst_tests_pf+0x1b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a64:	0026d683          	lhu	a3,2(a3)
    80009a68:	0106969b          	slliw	a3,a3,0x10
    80009a6c:	8f55                	or	a4,a4,a3
    80009a6e:	1746                	slli	a4,a4,0x31
    80009a70:	9345                	srli	a4,a4,0x31
    80009a72:	00e78463          	beq	a5,a4,80009a7a <tinst_tests_pf+0x1ba6>
    80009a76:	d94fe06f          	j	8000800a <tinst_tests_pf+0x136>
    80009a7a:	da4fe06f          	j	8000801e <tinst_tests_pf+0x14a>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009a7e:	6418                	ld	a4,8(s0)
    80009a80:	47b5                	li	a5,13
    80009a82:	00f70463          	beq	a4,a5,80009a8a <tinst_tests_pf+0x1bb6>
    80009a86:	f90fe06f          	j	80008216 <tinst_tests_pf+0x342>
    80009a8a:	7018                	ld	a4,32(s0)
    80009a8c:	e319                	bnez	a4,80009a92 <tinst_tests_pf+0x1bbe>
    80009a8e:	f8afe06f          	j	80008218 <tinst_tests_pf+0x344>
    80009a92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a94:	0016f793          	andi	a5,a3,1
    80009a98:	4a079c63          	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a9c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009aa0:	460d                	li	a2,3
    80009aa2:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009aa6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009aa8:	00c59763          	bne	a1,a2,80009ab6 <tinst_tests_pf+0x1be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aac:	0026d683          	lhu	a3,2(a3)
    80009ab0:	0106969b          	slliw	a3,a3,0x10
    80009ab4:	8fd5                	or	a5,a5,a3
    80009ab6:	17c6                	slli	a5,a5,0x31
    80009ab8:	0317d913          	srli	s2,a5,0x31
    80009abc:	40e90933          	sub	s2,s2,a4
    80009ac0:	00193913          	seqz	s2,s2
    80009ac4:	f54fe06f          	j	80008218 <tinst_tests_pf+0x344>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009ac8:	6418                	ld	a4,8(s0)
    80009aca:	47bd                	li	a5,15
    80009acc:	00024597          	auipc	a1,0x24
    80009ad0:	8bc58593          	addi	a1,a1,-1860 # 8002d388 <__func__.0+0x2d0>
    80009ad4:	00f70463          	beq	a4,a5,80009adc <tinst_tests_pf+0x1c08>
    80009ad8:	f71fe06f          	j	80008a48 <tinst_tests_pf+0xb74>
    80009adc:	701c                	ld	a5,32(s0)
    80009ade:	00024597          	auipc	a1,0x24
    80009ae2:	89a58593          	addi	a1,a1,-1894 # 8002d378 <__func__.0+0x2c0>
    80009ae6:	e399                	bnez	a5,80009aec <tinst_tests_pf+0x1c18>
    80009ae8:	f61fe06f          	j	80008a48 <tinst_tests_pf+0xb74>
    80009aec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009aee:	0016f713          	andi	a4,a3,1
    80009af2:	44071f63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009af6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009afa:	460d                	li	a2,3
    80009afc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b02:	00c59763          	bne	a1,a2,80009b10 <tinst_tests_pf+0x1c3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b06:	0026d683          	lhu	a3,2(a3)
    80009b0a:	0106969b          	slliw	a3,a3,0x10
    80009b0e:	8f55                	or	a4,a4,a3
    80009b10:	1ffe16b7          	lui	a3,0x1ffe1
    80009b14:	068e                	slli	a3,a3,0x3
    80009b16:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009b18:	8f75                	and	a4,a4,a3
    80009b1a:	00024597          	auipc	a1,0x24
    80009b1e:	85e58593          	addi	a1,a1,-1954 # 8002d378 <__func__.0+0x2c0>
    80009b22:	00e78463          	beq	a5,a4,80009b2a <tinst_tests_pf+0x1c56>
    80009b26:	f1bfe06f          	j	80008a40 <tinst_tests_pf+0xb6c>
    80009b2a:	f1ffe06f          	j	80008a48 <tinst_tests_pf+0xb74>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009b2e:	6418                	ld	a4,8(s0)
    80009b30:	47b5                	li	a5,13
    80009b32:	00f70463          	beq	a4,a5,80009b3a <tinst_tests_pf+0x1c66>
    80009b36:	f78fe06f          	j	800082ae <tinst_tests_pf+0x3da>
    80009b3a:	7018                	ld	a4,32(s0)
    80009b3c:	e319                	bnez	a4,80009b42 <tinst_tests_pf+0x1c6e>
    80009b3e:	f72fe06f          	j	800082b0 <tinst_tests_pf+0x3dc>
    80009b42:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b44:	0016f793          	andi	a5,a3,1
    80009b48:	40079463          	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b4c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b50:	460d                	li	a2,3
    80009b52:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009b56:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b58:	00c59763          	bne	a1,a2,80009b66 <tinst_tests_pf+0x1c92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b5c:	0026d683          	lhu	a3,2(a3)
    80009b60:	0106969b          	slliw	a3,a3,0x10
    80009b64:	8fd5                	or	a5,a5,a3
    80009b66:	17c6                	slli	a5,a5,0x31
    80009b68:	0317d913          	srli	s2,a5,0x31
    80009b6c:	40e90933          	sub	s2,s2,a4
    80009b70:	00193913          	seqz	s2,s2
    80009b74:	f3cfe06f          	j	800082b0 <tinst_tests_pf+0x3dc>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009b78:	6418                	ld	a4,8(s0)
    80009b7a:	47b5                	li	a5,13
    80009b7c:	00f70463          	beq	a4,a5,80009b84 <tinst_tests_pf+0x1cb0>
    80009b80:	fc6fe06f          	j	80008346 <tinst_tests_pf+0x472>
    80009b84:	7018                	ld	a4,32(s0)
    80009b86:	e319                	bnez	a4,80009b8c <tinst_tests_pf+0x1cb8>
    80009b88:	fc0fe06f          	j	80008348 <tinst_tests_pf+0x474>
    80009b8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b8e:	0016f793          	andi	a5,a3,1
    80009b92:	3a079f63          	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b96:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b9a:	460d                	li	a2,3
    80009b9c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009ba0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ba2:	00c59763          	bne	a1,a2,80009bb0 <tinst_tests_pf+0x1cdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ba6:	0026d683          	lhu	a3,2(a3)
    80009baa:	0106969b          	slliw	a3,a3,0x10
    80009bae:	8fd5                	or	a5,a5,a3
    80009bb0:	17c6                	slli	a5,a5,0x31
    80009bb2:	0317d913          	srli	s2,a5,0x31
    80009bb6:	40e90933          	sub	s2,s2,a4
    80009bba:	00193913          	seqz	s2,s2
    80009bbe:	f8afe06f          	j	80008348 <tinst_tests_pf+0x474>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009bc2:	6418                	ld	a4,8(s0)
    80009bc4:	47bd                	li	a5,15
    80009bc6:	00f70463          	beq	a4,a5,80009bce <tinst_tests_pf+0x1cfa>
    80009bca:	817fe06f          	j	800083e0 <tinst_tests_pf+0x50c>
    80009bce:	701c                	ld	a5,32(s0)
    80009bd0:	e399                	bnez	a5,80009bd6 <tinst_tests_pf+0x1d02>
    80009bd2:	811fe06f          	j	800083e2 <tinst_tests_pf+0x50e>
    80009bd6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bd8:	0016f713          	andi	a4,a3,1
    80009bdc:	36071a63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009be0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009be4:	460d                	li	a2,3
    80009be6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bec:	00c59763          	bne	a1,a2,80009bfa <tinst_tests_pf+0x1d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bf0:	0026d683          	lhu	a3,2(a3)
    80009bf4:	0106969b          	slliw	a3,a3,0x10
    80009bf8:	8f55                	or	a4,a4,a3
    80009bfa:	01f076b7          	lui	a3,0x1f07
    80009bfe:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c02:	8f75                	and	a4,a4,a3
    80009c04:	40f70933          	sub	s2,a4,a5
    80009c08:	00193913          	seqz	s2,s2
    80009c0c:	fd6fe06f          	j	800083e2 <tinst_tests_pf+0x50e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009c10:	6418                	ld	a4,8(s0)
    80009c12:	47bd                	li	a5,15
    80009c14:	00f70463          	beq	a4,a5,80009c1c <tinst_tests_pf+0x1d48>
    80009c18:	867fe06f          	j	8000847e <tinst_tests_pf+0x5aa>
    80009c1c:	701c                	ld	a5,32(s0)
    80009c1e:	e399                	bnez	a5,80009c24 <tinst_tests_pf+0x1d50>
    80009c20:	861fe06f          	j	80008480 <tinst_tests_pf+0x5ac>
    80009c24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c26:	0016f713          	andi	a4,a3,1
    80009c2a:	32071363          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c32:	460d                	li	a2,3
    80009c34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c3a:	00c59763          	bne	a1,a2,80009c48 <tinst_tests_pf+0x1d74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c3e:	0026d683          	lhu	a3,2(a3)
    80009c42:	0106969b          	slliw	a3,a3,0x10
    80009c46:	8f55                	or	a4,a4,a3
    80009c48:	01f076b7          	lui	a3,0x1f07
    80009c4c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c50:	8f75                	and	a4,a4,a3
    80009c52:	40f70933          	sub	s2,a4,a5
    80009c56:	00193913          	seqz	s2,s2
    80009c5a:	827fe06f          	j	80008480 <tinst_tests_pf+0x5ac>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009c5e:	6418                	ld	a4,8(s0)
    80009c60:	47bd                	li	a5,15
    80009c62:	00f70463          	beq	a4,a5,80009c6a <tinst_tests_pf+0x1d96>
    80009c66:	8b9fe06f          	j	8000851e <tinst_tests_pf+0x64a>
    80009c6a:	701c                	ld	a5,32(s0)
    80009c6c:	e399                	bnez	a5,80009c72 <tinst_tests_pf+0x1d9e>
    80009c6e:	8b3fe06f          	j	80008520 <tinst_tests_pf+0x64c>
    80009c72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c74:	0016f713          	andi	a4,a3,1
    80009c78:	2c071c63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c7c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c80:	460d                	li	a2,3
    80009c82:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c86:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c88:	00c59763          	bne	a1,a2,80009c96 <tinst_tests_pf+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c8c:	0026d683          	lhu	a3,2(a3)
    80009c90:	0106969b          	slliw	a3,a3,0x10
    80009c94:	8f55                	or	a4,a4,a3
    80009c96:	01f076b7          	lui	a3,0x1f07
    80009c9a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c9e:	8f75                	and	a4,a4,a3
    80009ca0:	40f70933          	sub	s2,a4,a5
    80009ca4:	00193913          	seqz	s2,s2
    80009ca8:	879fe06f          	j	80008520 <tinst_tests_pf+0x64c>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009cac:	6418                	ld	a4,8(s0)
    80009cae:	47bd                	li	a5,15
    80009cb0:	00f70463          	beq	a4,a5,80009cb8 <tinst_tests_pf+0x1de4>
    80009cb4:	90dfe06f          	j	800085c0 <tinst_tests_pf+0x6ec>
    80009cb8:	701c                	ld	a5,32(s0)
    80009cba:	e399                	bnez	a5,80009cc0 <tinst_tests_pf+0x1dec>
    80009cbc:	907fe06f          	j	800085c2 <tinst_tests_pf+0x6ee>
    80009cc0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cc2:	0016f713          	andi	a4,a3,1
    80009cc6:	28071563          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009cca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cce:	460d                	li	a2,3
    80009cd0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cd4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cd6:	00c59763          	bne	a1,a2,80009ce4 <tinst_tests_pf+0x1e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cda:	0026d683          	lhu	a3,2(a3)
    80009cde:	0106969b          	slliw	a3,a3,0x10
    80009ce2:	8f55                	or	a4,a4,a3
    80009ce4:	01f076b7          	lui	a3,0x1f07
    80009ce8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009cec:	8f75                	and	a4,a4,a3
    80009cee:	40f70933          	sub	s2,a4,a5
    80009cf2:	00193913          	seqz	s2,s2
    80009cf6:	8cdfe06f          	j	800085c2 <tinst_tests_pf+0x6ee>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009cfa:	6418                	ld	a4,8(s0)
    80009cfc:	47b5                	li	a5,13
    80009cfe:	00f70463          	beq	a4,a5,80009d06 <tinst_tests_pf+0x1e32>
    80009d02:	951fe06f          	j	80008652 <tinst_tests_pf+0x77e>
    80009d06:	7004                	ld	s1,32(s0)
    80009d08:	e099                	bnez	s1,80009d0e <tinst_tests_pf+0x1e3a>
    80009d0a:	94bfe06f          	j	80008654 <tinst_tests_pf+0x780>
    80009d0e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009d10:	0017f713          	andi	a4,a5,1
    80009d14:	22071e63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d18:	0007d503          	lhu	a0,0(a5)
    80009d1c:	a25f70ef          	jal	80001740 <expand_compressed_instruction>
    80009d20:	67a1                	lui	a5,0x8
    80009d22:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009d24:	00f57933          	and	s2,a0,a5
    80009d28:	40990933          	sub	s2,s2,s1
    80009d2c:	00193913          	seqz	s2,s2
    80009d30:	925fe06f          	j	80008654 <tinst_tests_pf+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009d34:	6418                	ld	a4,8(s0)
    80009d36:	47b5                	li	a5,13
    80009d38:	00f70463          	beq	a4,a5,80009d40 <tinst_tests_pf+0x1e6c>
    80009d3c:	9abfe06f          	j	800086e6 <tinst_tests_pf+0x812>
    80009d40:	02043983          	ld	s3,32(s0)
    80009d44:	00099463          	bnez	s3,80009d4c <tinst_tests_pf+0x1e78>
    80009d48:	9a1fe06f          	j	800086e8 <tinst_tests_pf+0x814>
    80009d4c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009d4e:	0017f713          	andi	a4,a5,1
    80009d52:	1e071f63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d56:	0007d503          	lhu	a0,0(a5)
    80009d5a:	9e7f70ef          	jal	80001740 <expand_compressed_instruction>
    80009d5e:	67a1                	lui	a5,0x8
    80009d60:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009d62:	00f57933          	and	s2,a0,a5
    80009d66:	41390933          	sub	s2,s2,s3
    80009d6a:	00193913          	seqz	s2,s2
    80009d6e:	97bfe06f          	j	800086e8 <tinst_tests_pf+0x814>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009d72:	701c                	ld	a5,32(s0)
    80009d74:	e399                	bnez	a5,80009d7a <tinst_tests_pf+0x1ea6>
    80009d76:	b2ffe06f          	j	800088a4 <tinst_tests_pf+0x9d0>
    80009d7a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d7c:	0016f713          	andi	a4,a3,1
    80009d80:	1c071863          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d84:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d88:	460d                	li	a2,3
    80009d8a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d8e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d90:	00c59763          	bne	a1,a2,80009d9e <tinst_tests_pf+0x1eca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d94:	0026d683          	lhu	a3,2(a3)
    80009d98:	0106969b          	slliw	a3,a3,0x10
    80009d9c:	8f55                	or	a4,a4,a3
    80009d9e:	1ffe16b7          	lui	a3,0x1ffe1
    80009da2:	068e                	slli	a3,a3,0x3
    80009da4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009da6:	8f75                	and	a4,a4,a3
    80009da8:	00e78463          	beq	a5,a4,80009db0 <tinst_tests_pf+0x1edc>
    80009dac:	ae5fe06f          	j	80008890 <tinst_tests_pf+0x9bc>
    80009db0:	af5fe06f          	j	800088a4 <tinst_tests_pf+0x9d0>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009db4:	701c                	ld	a5,32(s0)
    80009db6:	e399                	bnez	a5,80009dbc <tinst_tests_pf+0x1ee8>
    80009db8:	b93fe06f          	j	8000894a <tinst_tests_pf+0xa76>
    80009dbc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009dbe:	0016f713          	andi	a4,a3,1
    80009dc2:	18071763          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009dc6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009dca:	460d                	li	a2,3
    80009dcc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009dd0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009dd2:	00c59763          	bne	a1,a2,80009de0 <tinst_tests_pf+0x1f0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dd6:	0026d683          	lhu	a3,2(a3)
    80009dda:	0106969b          	slliw	a3,a3,0x10
    80009dde:	8f55                	or	a4,a4,a3
    80009de0:	1ffe16b7          	lui	a3,0x1ffe1
    80009de4:	068e                	slli	a3,a3,0x3
    80009de6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009de8:	8f75                	and	a4,a4,a3
    80009dea:	00e78463          	beq	a5,a4,80009df2 <tinst_tests_pf+0x1f1e>
    80009dee:	b49fe06f          	j	80008936 <tinst_tests_pf+0xa62>
    80009df2:	b59fe06f          	j	8000894a <tinst_tests_pf+0xa76>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009df6:	7004                	ld	s1,32(s0)
    80009df8:	780494e3          	bnez	s1,8000ad80 <tinst_tests_pf+0x2eac>
    80009dfc:	00023597          	auipc	a1,0x23
    80009e00:	57c58593          	addi	a1,a1,1404 # 8002d378 <__func__.0+0x2c0>
    80009e04:	801fe06f          	j	80008604 <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009e08:	701c                	ld	a5,32(s0)
    80009e0a:	e399                	bnez	a5,80009e10 <tinst_tests_pf+0x1f3c>
    80009e0c:	bdffe06f          	j	800089ea <tinst_tests_pf+0xb16>
    80009e10:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e12:	0016f713          	andi	a4,a3,1
    80009e16:	12071d63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e1a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e1e:	460d                	li	a2,3
    80009e20:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e24:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e26:	00c59763          	bne	a1,a2,80009e34 <tinst_tests_pf+0x1f60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e2a:	0026d683          	lhu	a3,2(a3)
    80009e2e:	0106969b          	slliw	a3,a3,0x10
    80009e32:	8f55                	or	a4,a4,a3
    80009e34:	1ffe16b7          	lui	a3,0x1ffe1
    80009e38:	068e                	slli	a3,a3,0x3
    80009e3a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009e3c:	8f75                	and	a4,a4,a3
    80009e3e:	00e78463          	beq	a5,a4,80009e46 <tinst_tests_pf+0x1f72>
    80009e42:	b95fe06f          	j	800089d6 <tinst_tests_pf+0xb02>
    80009e46:	ba5fe06f          	j	800089ea <tinst_tests_pf+0xb16>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009e4a:	02043983          	ld	s3,32(s0)
    80009e4e:	74099fe3          	bnez	s3,8000adac <tinst_tests_pf+0x2ed8>
    80009e52:	00023597          	auipc	a1,0x23
    80009e56:	52658593          	addi	a1,a1,1318 # 8002d378 <__func__.0+0x2c0>
    80009e5a:	83ffe06f          	j	80008698 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009e5e:	02043983          	ld	s3,32(s0)
    80009e62:	7a099ce3          	bnez	s3,8000ae1a <tinst_tests_pf+0x2f46>
    80009e66:	00023597          	auipc	a1,0x23
    80009e6a:	51258593          	addi	a1,a1,1298 # 8002d378 <__func__.0+0x2c0>
    80009e6e:	8bffe06f          	j	8000872c <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009e72:	7004                	ld	s1,32(s0)
    80009e74:	c099                	beqz	s1,80009e7a <tinst_tests_pf+0x1fa6>
    80009e76:	0160106f          	j	8000ae8c <tinst_tests_pf+0x2fb8>
    80009e7a:	00023597          	auipc	a1,0x23
    80009e7e:	4fe58593          	addi	a1,a1,1278 # 8002d378 <__func__.0+0x2c0>
    80009e82:	947fe06f          	j	800087c8 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009e86:	7018                	ld	a4,32(s0)
    80009e88:	e319                	bnez	a4,80009e8e <tinst_tests_pf+0x1fba>
    80009e8a:	9b6fe06f          	j	80008040 <tinst_tests_pf+0x16c>
    80009e8e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e90:	0016f793          	andi	a5,a3,1
    80009e94:	efd5                	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e96:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e9a:	460d                	li	a2,3
    80009e9c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009ea0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ea2:	00c59763          	bne	a1,a2,80009eb0 <tinst_tests_pf+0x1fdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ea6:	0026d683          	lhu	a3,2(a3)
    80009eaa:	0106969b          	slliw	a3,a3,0x10
    80009eae:	8fd5                	or	a5,a5,a3
    80009eb0:	03179913          	slli	s2,a5,0x31
    80009eb4:	03195913          	srli	s2,s2,0x31
    80009eb8:	40e90933          	sub	s2,s2,a4
    80009ebc:	00193913          	seqz	s2,s2
    80009ec0:	980fe06f          	j	80008040 <tinst_tests_pf+0x16c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009ec4:	7018                	ld	a4,32(s0)
    80009ec6:	e319                	bnez	a4,80009ecc <tinst_tests_pf+0x1ff8>
    80009ec8:	a18fe06f          	j	800080e0 <tinst_tests_pf+0x20c>
    80009ecc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ece:	0016f793          	andi	a5,a3,1
    80009ed2:	efbd                	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ed4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ed8:	460d                	li	a2,3
    80009eda:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009ede:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ee0:	00c59763          	bne	a1,a2,80009eee <tinst_tests_pf+0x201a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ee4:	0026d683          	lhu	a3,2(a3)
    80009ee8:	0106969b          	slliw	a3,a3,0x10
    80009eec:	8fd5                	or	a5,a5,a3
    80009eee:	03179913          	slli	s2,a5,0x31
    80009ef2:	03195913          	srli	s2,s2,0x31
    80009ef6:	40e90933          	sub	s2,s2,a4
    80009efa:	00193913          	seqz	s2,s2
    80009efe:	9e2fe06f          	j	800080e0 <tinst_tests_pf+0x20c>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009f02:	7018                	ld	a4,32(s0)
    80009f04:	e319                	bnez	a4,80009f0a <tinst_tests_pf+0x2036>
    80009f06:	a7afe06f          	j	80008180 <tinst_tests_pf+0x2ac>
    80009f0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f0c:	0016f793          	andi	a5,a3,1
    80009f10:	e3a1                	bnez	a5,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f12:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f16:	460d                	li	a2,3
    80009f18:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009f1c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f1e:	00c59763          	bne	a1,a2,80009f2c <tinst_tests_pf+0x2058>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f22:	0026d683          	lhu	a3,2(a3)
    80009f26:	0106969b          	slliw	a3,a3,0x10
    80009f2a:	8fd5                	or	a5,a5,a3
    80009f2c:	17c6                	slli	a5,a5,0x31
    80009f2e:	0317d913          	srli	s2,a5,0x31
    80009f32:	40e90933          	sub	s2,s2,a4
    80009f36:	00193913          	seqz	s2,s2
    80009f3a:	a46fe06f          	j	80008180 <tinst_tests_pf+0x2ac>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009f3e:	701c                	ld	a5,32(s0)
    80009f40:	e399                	bnez	a5,80009f46 <tinst_tests_pf+0x2072>
    80009f42:	97cfe06f          	j	800080be <tinst_tests_pf+0x1ea>
    80009f46:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f48:	0016f713          	andi	a4,a3,1
    80009f4c:	3e070fe3          	beqz	a4,8000ab4a <tinst_tests_pf+0x2c76>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    80009f50:	12300613          	li	a2,291
    80009f54:	00022597          	auipc	a1,0x22
    80009f58:	9ec58593          	addi	a1,a1,-1556 # 8002b940 <__func__.1>
    80009f5c:	00025517          	auipc	a0,0x25
    80009f60:	e1450513          	addi	a0,a0,-492 # 8002ed70 <__func__.0+0x1cb8>
    80009f64:	6f3200ef          	jal	8002ae56 <printf>
    80009f68:	12300613          	li	a2,291
    80009f6c:	00022597          	auipc	a1,0x22
    80009f70:	9d458593          	addi	a1,a1,-1580 # 8002b940 <__func__.1>
    80009f74:	00023517          	auipc	a0,0x23
    80009f78:	5ac50513          	addi	a0,a0,1452 # 8002d520 <__func__.0+0x468>
    80009f7c:	6db200ef          	jal	8002ae56 <printf>
    80009f80:	4501                	li	a0,0
    80009f82:	28b200ef          	jal	8002aa0c <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009f86:	701c                	ld	a5,32(s0)
    80009f88:	00023597          	auipc	a1,0x23
    80009f8c:	3f058593          	addi	a1,a1,1008 # 8002d378 <__func__.0+0x2c0>
    80009f90:	e399                	bnez	a5,80009f96 <tinst_tests_pf+0x20c2>
    80009f92:	b57fe06f          	j	80008ae8 <tinst_tests_pf+0xc14>
    80009f96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f98:	0016f713          	andi	a4,a3,1
    80009f9c:	fb55                	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fa2:	460d                	li	a2,3
    80009fa4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fa8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009faa:	00c59763          	bne	a1,a2,80009fb8 <tinst_tests_pf+0x20e4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fae:	0026d683          	lhu	a3,2(a3)
    80009fb2:	0106969b          	slliw	a3,a3,0x10
    80009fb6:	8f55                	or	a4,a4,a3
    80009fb8:	1ffe16b7          	lui	a3,0x1ffe1
    80009fbc:	068e                	slli	a3,a3,0x3
    80009fbe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009fc0:	8f75                	and	a4,a4,a3
    80009fc2:	00023597          	auipc	a1,0x23
    80009fc6:	3b658593          	addi	a1,a1,950 # 8002d378 <__func__.0+0x2c0>
    80009fca:	00e79463          	bne	a5,a4,80009fd2 <tinst_tests_pf+0x20fe>
    80009fce:	b1bfe06f          	j	80008ae8 <tinst_tests_pf+0xc14>
    80009fd2:	00023597          	auipc	a1,0x23
    80009fd6:	3b658593          	addi	a1,a1,950 # 8002d388 <__func__.0+0x2d0>
    80009fda:	b0ffe06f          	j	80008ae8 <tinst_tests_pf+0xc14>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009fde:	701c                	ld	a5,32(s0)
    80009fe0:	e399                	bnez	a5,80009fe6 <tinst_tests_pf+0x2112>
    80009fe2:	97cfe06f          	j	8000815e <tinst_tests_pf+0x28a>
    80009fe6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fe8:	0016f713          	andi	a4,a3,1
    80009fec:	f335                	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009fee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ff2:	460d                	li	a2,3
    80009ff4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ff8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ffa:	00c59763          	bne	a1,a2,8000a008 <tinst_tests_pf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ffe:	0026d683          	lhu	a3,2(a3)
    8000a002:	0106969b          	slliw	a3,a3,0x10
    8000a006:	8f55                	or	a4,a4,a3
    8000a008:	1746                	slli	a4,a4,0x31
    8000a00a:	9345                	srli	a4,a4,0x31
    8000a00c:	00e78463          	beq	a5,a4,8000a014 <tinst_tests_pf+0x2140>
    8000a010:	93afe06f          	j	8000814a <tinst_tests_pf+0x276>
    8000a014:	94afe06f          	j	8000815e <tinst_tests_pf+0x28a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a018:	701c                	ld	a5,32(s0)
    8000a01a:	00023597          	auipc	a1,0x23
    8000a01e:	35e58593          	addi	a1,a1,862 # 8002d378 <__func__.0+0x2c0>
    8000a022:	e399                	bnez	a5,8000a028 <tinst_tests_pf+0x2154>
    8000a024:	b65fe06f          	j	80008b88 <tinst_tests_pf+0xcb4>
    8000a028:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a02a:	0016f713          	andi	a4,a3,1
    8000a02e:	f30d                	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a030:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a034:	460d                	li	a2,3
    8000a036:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a03a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a03c:	00c59763          	bne	a1,a2,8000a04a <tinst_tests_pf+0x2176>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a040:	0026d683          	lhu	a3,2(a3)
    8000a044:	0106969b          	slliw	a3,a3,0x10
    8000a048:	8f55                	or	a4,a4,a3
    8000a04a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a04e:	068e                	slli	a3,a3,0x3
    8000a050:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a052:	8f75                	and	a4,a4,a3
    8000a054:	00023597          	auipc	a1,0x23
    8000a058:	32458593          	addi	a1,a1,804 # 8002d378 <__func__.0+0x2c0>
    8000a05c:	00e79463          	bne	a5,a4,8000a064 <tinst_tests_pf+0x2190>
    8000a060:	b29fe06f          	j	80008b88 <tinst_tests_pf+0xcb4>
    8000a064:	00023597          	auipc	a1,0x23
    8000a068:	32458593          	addi	a1,a1,804 # 8002d388 <__func__.0+0x2d0>
    8000a06c:	b1dfe06f          	j	80008b88 <tinst_tests_pf+0xcb4>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a070:	701c                	ld	a5,32(s0)
    8000a072:	e399                	bnez	a5,8000a078 <tinst_tests_pf+0x21a4>
    8000a074:	98afe06f          	j	800081fe <tinst_tests_pf+0x32a>
    8000a078:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a07a:	0016f713          	andi	a4,a3,1
    8000a07e:	ec0719e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a082:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a086:	460d                	li	a2,3
    8000a088:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a08c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a08e:	00c59763          	bne	a1,a2,8000a09c <tinst_tests_pf+0x21c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a092:	0026d683          	lhu	a3,2(a3)
    8000a096:	0106969b          	slliw	a3,a3,0x10
    8000a09a:	8f55                	or	a4,a4,a3
    8000a09c:	1746                	slli	a4,a4,0x31
    8000a09e:	9345                	srli	a4,a4,0x31
    8000a0a0:	00e78463          	beq	a5,a4,8000a0a8 <tinst_tests_pf+0x21d4>
    8000a0a4:	946fe06f          	j	800081ea <tinst_tests_pf+0x316>
    8000a0a8:	956fe06f          	j	800081fe <tinst_tests_pf+0x32a>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a0ac:	701c                	ld	a5,32(s0)
    8000a0ae:	00023597          	auipc	a1,0x23
    8000a0b2:	2ca58593          	addi	a1,a1,714 # 8002d378 <__func__.0+0x2c0>
    8000a0b6:	e399                	bnez	a5,8000a0bc <tinst_tests_pf+0x21e8>
    8000a0b8:	b71fe06f          	j	80008c28 <tinst_tests_pf+0xd54>
    8000a0bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0be:	0016f713          	andi	a4,a3,1
    8000a0c2:	e80717e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0ca:	460d                	li	a2,3
    8000a0cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0d2:	00c59763          	bne	a1,a2,8000a0e0 <tinst_tests_pf+0x220c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0d6:	0026d683          	lhu	a3,2(a3)
    8000a0da:	0106969b          	slliw	a3,a3,0x10
    8000a0de:	8f55                	or	a4,a4,a3
    8000a0e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0e4:	068e                	slli	a3,a3,0x3
    8000a0e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0e8:	8f75                	and	a4,a4,a3
    8000a0ea:	00023597          	auipc	a1,0x23
    8000a0ee:	28e58593          	addi	a1,a1,654 # 8002d378 <__func__.0+0x2c0>
    8000a0f2:	00e79463          	bne	a5,a4,8000a0fa <tinst_tests_pf+0x2226>
    8000a0f6:	b33fe06f          	j	80008c28 <tinst_tests_pf+0xd54>
    8000a0fa:	00023597          	auipc	a1,0x23
    8000a0fe:	28e58593          	addi	a1,a1,654 # 8002d388 <__func__.0+0x2d0>
    8000a102:	b27fe06f          	j	80008c28 <tinst_tests_pf+0xd54>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a106:	701c                	ld	a5,32(s0)
    8000a108:	e399                	bnez	a5,8000a10e <tinst_tests_pf+0x223a>
    8000a10a:	98cfe06f          	j	80008296 <tinst_tests_pf+0x3c2>
    8000a10e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a110:	0016f713          	andi	a4,a3,1
    8000a114:	e2071ee3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a118:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a11c:	460d                	li	a2,3
    8000a11e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a122:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a124:	00c59763          	bne	a1,a2,8000a132 <tinst_tests_pf+0x225e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a128:	0026d683          	lhu	a3,2(a3)
    8000a12c:	0106969b          	slliw	a3,a3,0x10
    8000a130:	8f55                	or	a4,a4,a3
    8000a132:	1746                	slli	a4,a4,0x31
    8000a134:	9345                	srli	a4,a4,0x31
    8000a136:	00e78463          	beq	a5,a4,8000a13e <tinst_tests_pf+0x226a>
    8000a13a:	948fe06f          	j	80008282 <tinst_tests_pf+0x3ae>
    8000a13e:	958fe06f          	j	80008296 <tinst_tests_pf+0x3c2>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a142:	701c                	ld	a5,32(s0)
    8000a144:	00023597          	auipc	a1,0x23
    8000a148:	23458593          	addi	a1,a1,564 # 8002d378 <__func__.0+0x2c0>
    8000a14c:	e399                	bnez	a5,8000a152 <tinst_tests_pf+0x227e>
    8000a14e:	b7bfe06f          	j	80008cc8 <tinst_tests_pf+0xdf4>
    8000a152:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a154:	0016f713          	andi	a4,a3,1
    8000a158:	de071ce3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a15c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a160:	460d                	li	a2,3
    8000a162:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a166:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a168:	00c59763          	bne	a1,a2,8000a176 <tinst_tests_pf+0x22a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a16c:	0026d683          	lhu	a3,2(a3)
    8000a170:	0106969b          	slliw	a3,a3,0x10
    8000a174:	8f55                	or	a4,a4,a3
    8000a176:	1ffe16b7          	lui	a3,0x1ffe1
    8000a17a:	068e                	slli	a3,a3,0x3
    8000a17c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a17e:	8f75                	and	a4,a4,a3
    8000a180:	00023597          	auipc	a1,0x23
    8000a184:	1f858593          	addi	a1,a1,504 # 8002d378 <__func__.0+0x2c0>
    8000a188:	00e79463          	bne	a5,a4,8000a190 <tinst_tests_pf+0x22bc>
    8000a18c:	b3dfe06f          	j	80008cc8 <tinst_tests_pf+0xdf4>
    8000a190:	00023597          	auipc	a1,0x23
    8000a194:	1f858593          	addi	a1,a1,504 # 8002d388 <__func__.0+0x2d0>
    8000a198:	b31fe06f          	j	80008cc8 <tinst_tests_pf+0xdf4>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a19c:	701c                	ld	a5,32(s0)
    8000a19e:	e399                	bnez	a5,8000a1a4 <tinst_tests_pf+0x22d0>
    8000a1a0:	98efe06f          	j	8000832e <tinst_tests_pf+0x45a>
    8000a1a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1a6:	0016f713          	andi	a4,a3,1
    8000a1aa:	da0713e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1ae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1b2:	460d                	li	a2,3
    8000a1b4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1b8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1ba:	00c59763          	bne	a1,a2,8000a1c8 <tinst_tests_pf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1be:	0026d683          	lhu	a3,2(a3)
    8000a1c2:	0106969b          	slliw	a3,a3,0x10
    8000a1c6:	8f55                	or	a4,a4,a3
    8000a1c8:	1746                	slli	a4,a4,0x31
    8000a1ca:	9345                	srli	a4,a4,0x31
    8000a1cc:	00e78463          	beq	a5,a4,8000a1d4 <tinst_tests_pf+0x2300>
    8000a1d0:	94afe06f          	j	8000831a <tinst_tests_pf+0x446>
    8000a1d4:	95afe06f          	j	8000832e <tinst_tests_pf+0x45a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a1d8:	701c                	ld	a5,32(s0)
    8000a1da:	00023597          	auipc	a1,0x23
    8000a1de:	19e58593          	addi	a1,a1,414 # 8002d378 <__func__.0+0x2c0>
    8000a1e2:	e399                	bnez	a5,8000a1e8 <tinst_tests_pf+0x2314>
    8000a1e4:	b85fe06f          	j	80008d68 <tinst_tests_pf+0xe94>
    8000a1e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1ea:	0016f713          	andi	a4,a3,1
    8000a1ee:	d60711e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1f6:	460d                	li	a2,3
    8000a1f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1fe:	00c59763          	bne	a1,a2,8000a20c <tinst_tests_pf+0x2338>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a202:	0026d683          	lhu	a3,2(a3)
    8000a206:	0106969b          	slliw	a3,a3,0x10
    8000a20a:	8f55                	or	a4,a4,a3
    8000a20c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a210:	068e                	slli	a3,a3,0x3
    8000a212:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a214:	8f75                	and	a4,a4,a3
    8000a216:	00023597          	auipc	a1,0x23
    8000a21a:	16258593          	addi	a1,a1,354 # 8002d378 <__func__.0+0x2c0>
    8000a21e:	00e79463          	bne	a5,a4,8000a226 <tinst_tests_pf+0x2352>
    8000a222:	b47fe06f          	j	80008d68 <tinst_tests_pf+0xe94>
    8000a226:	00023597          	auipc	a1,0x23
    8000a22a:	16258593          	addi	a1,a1,354 # 8002d388 <__func__.0+0x2d0>
    8000a22e:	b3bfe06f          	j	80008d68 <tinst_tests_pf+0xe94>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a232:	701c                	ld	a5,32(s0)
    8000a234:	e399                	bnez	a5,8000a23a <tinst_tests_pf+0x2366>
    8000a236:	992fe06f          	j	800083c8 <tinst_tests_pf+0x4f4>
    8000a23a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a23c:	0016f713          	andi	a4,a3,1
    8000a240:	d00718e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a244:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a248:	460d                	li	a2,3
    8000a24a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a24e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a250:	00c59763          	bne	a1,a2,8000a25e <tinst_tests_pf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a254:	0026d683          	lhu	a3,2(a3)
    8000a258:	0106969b          	slliw	a3,a3,0x10
    8000a25c:	8f55                	or	a4,a4,a3
    8000a25e:	01f076b7          	lui	a3,0x1f07
    8000a262:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a266:	8f75                	and	a4,a4,a3
    8000a268:	00e78463          	beq	a5,a4,8000a270 <tinst_tests_pf+0x239c>
    8000a26c:	948fe06f          	j	800083b4 <tinst_tests_pf+0x4e0>
    8000a270:	958fe06f          	j	800083c8 <tinst_tests_pf+0x4f4>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a274:	701c                	ld	a5,32(s0)
    8000a276:	00023597          	auipc	a1,0x23
    8000a27a:	10258593          	addi	a1,a1,258 # 8002d378 <__func__.0+0x2c0>
    8000a27e:	e399                	bnez	a5,8000a284 <tinst_tests_pf+0x23b0>
    8000a280:	b89fe06f          	j	80008e08 <tinst_tests_pf+0xf34>
    8000a284:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a286:	0016f713          	andi	a4,a3,1
    8000a28a:	cc0713e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a28e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a292:	460d                	li	a2,3
    8000a294:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a298:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a29a:	00c59763          	bne	a1,a2,8000a2a8 <tinst_tests_pf+0x23d4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a29e:	0026d683          	lhu	a3,2(a3)
    8000a2a2:	0106969b          	slliw	a3,a3,0x10
    8000a2a6:	8f55                	or	a4,a4,a3
    8000a2a8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a2ac:	068e                	slli	a3,a3,0x3
    8000a2ae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a2b0:	8f75                	and	a4,a4,a3
    8000a2b2:	00023597          	auipc	a1,0x23
    8000a2b6:	0c658593          	addi	a1,a1,198 # 8002d378 <__func__.0+0x2c0>
    8000a2ba:	00e79463          	bne	a5,a4,8000a2c2 <tinst_tests_pf+0x23ee>
    8000a2be:	b4bfe06f          	j	80008e08 <tinst_tests_pf+0xf34>
    8000a2c2:	00023597          	auipc	a1,0x23
    8000a2c6:	0c658593          	addi	a1,a1,198 # 8002d388 <__func__.0+0x2d0>
    8000a2ca:	b3ffe06f          	j	80008e08 <tinst_tests_pf+0xf34>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a2ce:	701c                	ld	a5,32(s0)
    8000a2d0:	e399                	bnez	a5,8000a2d6 <tinst_tests_pf+0x2402>
    8000a2d2:	994fe06f          	j	80008466 <tinst_tests_pf+0x592>
    8000a2d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2d8:	0016f713          	andi	a4,a3,1
    8000a2dc:	c6071ae3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a2e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2e4:	460d                	li	a2,3
    8000a2e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2ec:	00c59763          	bne	a1,a2,8000a2fa <tinst_tests_pf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2f0:	0026d683          	lhu	a3,2(a3)
    8000a2f4:	0106969b          	slliw	a3,a3,0x10
    8000a2f8:	8f55                	or	a4,a4,a3
    8000a2fa:	01f076b7          	lui	a3,0x1f07
    8000a2fe:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a302:	8f75                	and	a4,a4,a3
    8000a304:	00e78463          	beq	a5,a4,8000a30c <tinst_tests_pf+0x2438>
    8000a308:	94afe06f          	j	80008452 <tinst_tests_pf+0x57e>
    8000a30c:	95afe06f          	j	80008466 <tinst_tests_pf+0x592>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a310:	701c                	ld	a5,32(s0)
    8000a312:	00023597          	auipc	a1,0x23
    8000a316:	06658593          	addi	a1,a1,102 # 8002d378 <__func__.0+0x2c0>
    8000a31a:	e399                	bnez	a5,8000a320 <tinst_tests_pf+0x244c>
    8000a31c:	b91fe06f          	j	80008eac <tinst_tests_pf+0xfd8>
    8000a320:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a322:	0016f713          	andi	a4,a3,1
    8000a326:	c20715e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a32a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a32e:	460d                	li	a2,3
    8000a330:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a334:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a336:	00c59763          	bne	a1,a2,8000a344 <tinst_tests_pf+0x2470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a33a:	0026d683          	lhu	a3,2(a3)
    8000a33e:	0106969b          	slliw	a3,a3,0x10
    8000a342:	8f55                	or	a4,a4,a3
    8000a344:	1ffe16b7          	lui	a3,0x1ffe1
    8000a348:	068e                	slli	a3,a3,0x3
    8000a34a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a34c:	8f75                	and	a4,a4,a3
    8000a34e:	00023597          	auipc	a1,0x23
    8000a352:	02a58593          	addi	a1,a1,42 # 8002d378 <__func__.0+0x2c0>
    8000a356:	00e79463          	bne	a5,a4,8000a35e <tinst_tests_pf+0x248a>
    8000a35a:	b53fe06f          	j	80008eac <tinst_tests_pf+0xfd8>
    8000a35e:	00023597          	auipc	a1,0x23
    8000a362:	02a58593          	addi	a1,a1,42 # 8002d388 <__func__.0+0x2d0>
    8000a366:	b47fe06f          	j	80008eac <tinst_tests_pf+0xfd8>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a36a:	701c                	ld	a5,32(s0)
    8000a36c:	e399                	bnez	a5,8000a372 <tinst_tests_pf+0x249e>
    8000a36e:	998fe06f          	j	80008506 <tinst_tests_pf+0x632>
    8000a372:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a374:	0016f713          	andi	a4,a3,1
    8000a378:	bc071ce3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a37c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a380:	460d                	li	a2,3
    8000a382:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a386:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a388:	00c59763          	bne	a1,a2,8000a396 <tinst_tests_pf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a38c:	0026d683          	lhu	a3,2(a3)
    8000a390:	0106969b          	slliw	a3,a3,0x10
    8000a394:	8f55                	or	a4,a4,a3
    8000a396:	01f076b7          	lui	a3,0x1f07
    8000a39a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a39e:	8f75                	and	a4,a4,a3
    8000a3a0:	00e78463          	beq	a5,a4,8000a3a8 <tinst_tests_pf+0x24d4>
    8000a3a4:	94efe06f          	j	800084f2 <tinst_tests_pf+0x61e>
    8000a3a8:	95efe06f          	j	80008506 <tinst_tests_pf+0x632>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a3ac:	701c                	ld	a5,32(s0)
    8000a3ae:	00023597          	auipc	a1,0x23
    8000a3b2:	fca58593          	addi	a1,a1,-54 # 8002d378 <__func__.0+0x2c0>
    8000a3b6:	e399                	bnez	a5,8000a3bc <tinst_tests_pf+0x24e8>
    8000a3b8:	b95fe06f          	j	80008f4c <tinst_tests_pf+0x1078>
    8000a3bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3be:	0016f713          	andi	a4,a3,1
    8000a3c2:	b80717e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3ca:	460d                	li	a2,3
    8000a3cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3d2:	00c59763          	bne	a1,a2,8000a3e0 <tinst_tests_pf+0x250c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3d6:	0026d683          	lhu	a3,2(a3)
    8000a3da:	0106969b          	slliw	a3,a3,0x10
    8000a3de:	8f55                	or	a4,a4,a3
    8000a3e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3e4:	068e                	slli	a3,a3,0x3
    8000a3e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3e8:	8f75                	and	a4,a4,a3
    8000a3ea:	00023597          	auipc	a1,0x23
    8000a3ee:	f8e58593          	addi	a1,a1,-114 # 8002d378 <__func__.0+0x2c0>
    8000a3f2:	00e79463          	bne	a5,a4,8000a3fa <tinst_tests_pf+0x2526>
    8000a3f6:	b57fe06f          	j	80008f4c <tinst_tests_pf+0x1078>
    8000a3fa:	00023597          	auipc	a1,0x23
    8000a3fe:	f8e58593          	addi	a1,a1,-114 # 8002d388 <__func__.0+0x2d0>
    8000a402:	b4bfe06f          	j	80008f4c <tinst_tests_pf+0x1078>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a406:	701c                	ld	a5,32(s0)
    8000a408:	e399                	bnez	a5,8000a40e <tinst_tests_pf+0x253a>
    8000a40a:	99efe06f          	j	800085a8 <tinst_tests_pf+0x6d4>
    8000a40e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a410:	0016f713          	andi	a4,a3,1
    8000a414:	b2071ee3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a418:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a41c:	460d                	li	a2,3
    8000a41e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a422:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a424:	00c59763          	bne	a1,a2,8000a432 <tinst_tests_pf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a428:	0026d683          	lhu	a3,2(a3)
    8000a42c:	0106969b          	slliw	a3,a3,0x10
    8000a430:	8f55                	or	a4,a4,a3
    8000a432:	01f076b7          	lui	a3,0x1f07
    8000a436:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a43a:	8f75                	and	a4,a4,a3
    8000a43c:	00e78463          	beq	a5,a4,8000a444 <tinst_tests_pf+0x2570>
    8000a440:	954fe06f          	j	80008594 <tinst_tests_pf+0x6c0>
    8000a444:	964fe06f          	j	800085a8 <tinst_tests_pf+0x6d4>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a448:	701c                	ld	a5,32(s0)
    8000a44a:	00023597          	auipc	a1,0x23
    8000a44e:	f2e58593          	addi	a1,a1,-210 # 8002d378 <__func__.0+0x2c0>
    8000a452:	e399                	bnez	a5,8000a458 <tinst_tests_pf+0x2584>
    8000a454:	b99fe06f          	j	80008fec <tinst_tests_pf+0x1118>
    8000a458:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a45a:	0016f713          	andi	a4,a3,1
    8000a45e:	ae0719e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a462:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a466:	460d                	li	a2,3
    8000a468:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a46c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a46e:	00c59763          	bne	a1,a2,8000a47c <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a472:	0026d683          	lhu	a3,2(a3)
    8000a476:	0106969b          	slliw	a3,a3,0x10
    8000a47a:	8f55                	or	a4,a4,a3
    8000a47c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a480:	068e                	slli	a3,a3,0x3
    8000a482:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a484:	8f75                	and	a4,a4,a3
    8000a486:	00023597          	auipc	a1,0x23
    8000a48a:	ef258593          	addi	a1,a1,-270 # 8002d378 <__func__.0+0x2c0>
    8000a48e:	00e79463          	bne	a5,a4,8000a496 <tinst_tests_pf+0x25c2>
    8000a492:	b5bfe06f          	j	80008fec <tinst_tests_pf+0x1118>
    8000a496:	00023597          	auipc	a1,0x23
    8000a49a:	ef258593          	addi	a1,a1,-270 # 8002d388 <__func__.0+0x2d0>
    8000a49e:	b4ffe06f          	j	80008fec <tinst_tests_pf+0x1118>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a4a2:	7004                	ld	s1,32(s0)
    8000a4a4:	e099                	bnez	s1,8000a4aa <tinst_tests_pf+0x25d6>
    8000a4a6:	994fe06f          	j	8000863a <tinst_tests_pf+0x766>
    8000a4aa:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a4ac:	0017f713          	andi	a4,a5,1
    8000a4b0:	aa0710e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4b4:	0007d503          	lhu	a0,0(a5)
    8000a4b8:	a88f70ef          	jal	80001740 <expand_compressed_instruction>
    8000a4bc:	67a1                	lui	a5,0x8
    8000a4be:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a4c0:	8d7d                	and	a0,a0,a5
    8000a4c2:	00a48463          	beq	s1,a0,8000a4ca <tinst_tests_pf+0x25f6>
    8000a4c6:	960fe06f          	j	80008626 <tinst_tests_pf+0x752>
    8000a4ca:	970fe06f          	j	8000863a <tinst_tests_pf+0x766>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a4ce:	701c                	ld	a5,32(s0)
    8000a4d0:	00023597          	auipc	a1,0x23
    8000a4d4:	ea858593          	addi	a1,a1,-344 # 8002d378 <__func__.0+0x2c0>
    8000a4d8:	e399                	bnez	a5,8000a4de <tinst_tests_pf+0x260a>
    8000a4da:	bb3fe06f          	j	8000908c <tinst_tests_pf+0x11b8>
    8000a4de:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4e0:	0016f713          	andi	a4,a3,1
    8000a4e4:	a60716e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4e8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4ec:	460d                	li	a2,3
    8000a4ee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4f2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4f4:	00c59763          	bne	a1,a2,8000a502 <tinst_tests_pf+0x262e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4f8:	0026d683          	lhu	a3,2(a3)
    8000a4fc:	0106969b          	slliw	a3,a3,0x10
    8000a500:	8f55                	or	a4,a4,a3
    8000a502:	1ffe16b7          	lui	a3,0x1ffe1
    8000a506:	068e                	slli	a3,a3,0x3
    8000a508:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a50a:	8f75                	and	a4,a4,a3
    8000a50c:	00023597          	auipc	a1,0x23
    8000a510:	e6c58593          	addi	a1,a1,-404 # 8002d378 <__func__.0+0x2c0>
    8000a514:	00e79463          	bne	a5,a4,8000a51c <tinst_tests_pf+0x2648>
    8000a518:	b75fe06f          	j	8000908c <tinst_tests_pf+0x11b8>
    8000a51c:	00023597          	auipc	a1,0x23
    8000a520:	e6c58593          	addi	a1,a1,-404 # 8002d388 <__func__.0+0x2d0>
    8000a524:	b69fe06f          	j	8000908c <tinst_tests_pf+0x11b8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a528:	02043983          	ld	s3,32(s0)
    8000a52c:	00099463          	bnez	s3,8000a534 <tinst_tests_pf+0x2660>
    8000a530:	99efe06f          	j	800086ce <tinst_tests_pf+0x7fa>
    8000a534:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a536:	0017f713          	andi	a4,a5,1
    8000a53a:	a0071be3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a53e:	0007d503          	lhu	a0,0(a5)
    8000a542:	9fef70ef          	jal	80001740 <expand_compressed_instruction>
    8000a546:	67a1                	lui	a5,0x8
    8000a548:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a54a:	8d7d                	and	a0,a0,a5
    8000a54c:	00a98463          	beq	s3,a0,8000a554 <tinst_tests_pf+0x2680>
    8000a550:	96afe06f          	j	800086ba <tinst_tests_pf+0x7e6>
    8000a554:	97afe06f          	j	800086ce <tinst_tests_pf+0x7fa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a558:	701c                	ld	a5,32(s0)
    8000a55a:	00023597          	auipc	a1,0x23
    8000a55e:	e1e58593          	addi	a1,a1,-482 # 8002d378 <__func__.0+0x2c0>
    8000a562:	e399                	bnez	a5,8000a568 <tinst_tests_pf+0x2694>
    8000a564:	bc9fe06f          	j	8000912c <tinst_tests_pf+0x1258>
    8000a568:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a56a:	0016f713          	andi	a4,a3,1
    8000a56e:	9e0711e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a572:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a576:	460d                	li	a2,3
    8000a578:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a57c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a57e:	00c59763          	bne	a1,a2,8000a58c <tinst_tests_pf+0x26b8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a582:	0026d683          	lhu	a3,2(a3)
    8000a586:	0106969b          	slliw	a3,a3,0x10
    8000a58a:	8f55                	or	a4,a4,a3
    8000a58c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a590:	068e                	slli	a3,a3,0x3
    8000a592:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a594:	8f75                	and	a4,a4,a3
    8000a596:	00023597          	auipc	a1,0x23
    8000a59a:	de258593          	addi	a1,a1,-542 # 8002d378 <__func__.0+0x2c0>
    8000a59e:	00e79463          	bne	a5,a4,8000a5a6 <tinst_tests_pf+0x26d2>
    8000a5a2:	b8bfe06f          	j	8000912c <tinst_tests_pf+0x1258>
    8000a5a6:	00023597          	auipc	a1,0x23
    8000a5aa:	de258593          	addi	a1,a1,-542 # 8002d388 <__func__.0+0x2d0>
    8000a5ae:	b7ffe06f          	j	8000912c <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a5b2:	02043983          	ld	s3,32(s0)
    8000a5b6:	00099463          	bnez	s3,8000a5be <tinst_tests_pf+0x26ea>
    8000a5ba:	9a8fe06f          	j	80008762 <tinst_tests_pf+0x88e>
    8000a5be:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a5c0:	0017f713          	andi	a4,a5,1
    8000a5c4:	980716e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5c8:	0007d503          	lhu	a0,0(a5)
    8000a5cc:	974f70ef          	jal	80001740 <expand_compressed_instruction>
    8000a5d0:	01f077b7          	lui	a5,0x1f07
    8000a5d4:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a5d8:	8d7d                	and	a0,a0,a5
    8000a5da:	00a98463          	beq	s3,a0,8000a5e2 <tinst_tests_pf+0x270e>
    8000a5de:	970fe06f          	j	8000874e <tinst_tests_pf+0x87a>
    8000a5e2:	980fe06f          	j	80008762 <tinst_tests_pf+0x88e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a5e6:	701c                	ld	a5,32(s0)
    8000a5e8:	00023597          	auipc	a1,0x23
    8000a5ec:	d9058593          	addi	a1,a1,-624 # 8002d378 <__func__.0+0x2c0>
    8000a5f0:	e399                	bnez	a5,8000a5f6 <tinst_tests_pf+0x2722>
    8000a5f2:	bdbfe06f          	j	800091cc <tinst_tests_pf+0x12f8>
    8000a5f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5f8:	0016f713          	andi	a4,a3,1
    8000a5fc:	94071ae3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a600:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a604:	460d                	li	a2,3
    8000a606:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a60a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a60c:	00c59763          	bne	a1,a2,8000a61a <tinst_tests_pf+0x2746>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a610:	0026d683          	lhu	a3,2(a3)
    8000a614:	0106969b          	slliw	a3,a3,0x10
    8000a618:	8f55                	or	a4,a4,a3
    8000a61a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a61e:	068e                	slli	a3,a3,0x3
    8000a620:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a622:	8f75                	and	a4,a4,a3
    8000a624:	00023597          	auipc	a1,0x23
    8000a628:	d5458593          	addi	a1,a1,-684 # 8002d378 <__func__.0+0x2c0>
    8000a62c:	00e79463          	bne	a5,a4,8000a634 <tinst_tests_pf+0x2760>
    8000a630:	b9dfe06f          	j	800091cc <tinst_tests_pf+0x12f8>
    8000a634:	00023597          	auipc	a1,0x23
    8000a638:	d5458593          	addi	a1,a1,-684 # 8002d388 <__func__.0+0x2d0>
    8000a63c:	b91fe06f          	j	800091cc <tinst_tests_pf+0x12f8>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a640:	7004                	ld	s1,32(s0)
    8000a642:	e099                	bnez	s1,8000a648 <tinst_tests_pf+0x2774>
    8000a644:	9bafe06f          	j	800087fe <tinst_tests_pf+0x92a>
    8000a648:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a64a:	0017f713          	andi	a4,a5,1
    8000a64e:	900711e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a652:	0007d503          	lhu	a0,0(a5)
    8000a656:	8eaf70ef          	jal	80001740 <expand_compressed_instruction>
    8000a65a:	01f077b7          	lui	a5,0x1f07
    8000a65e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a662:	8d7d                	and	a0,a0,a5
    8000a664:	00a48463          	beq	s1,a0,8000a66c <tinst_tests_pf+0x2798>
    8000a668:	982fe06f          	j	800087ea <tinst_tests_pf+0x916>
    8000a66c:	992fe06f          	j	800087fe <tinst_tests_pf+0x92a>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a670:	701c                	ld	a5,32(s0)
    8000a672:	00023597          	auipc	a1,0x23
    8000a676:	d0658593          	addi	a1,a1,-762 # 8002d378 <__func__.0+0x2c0>
    8000a67a:	e399                	bnez	a5,8000a680 <tinst_tests_pf+0x27ac>
    8000a67c:	be9fe06f          	j	80009264 <tinst_tests_pf+0x1390>
    8000a680:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a682:	0016f713          	andi	a4,a3,1
    8000a686:	8c0715e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a68a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a68e:	460d                	li	a2,3
    8000a690:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a694:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a696:	00c59763          	bne	a1,a2,8000a6a4 <tinst_tests_pf+0x27d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a69a:	0026d683          	lhu	a3,2(a3)
    8000a69e:	0106969b          	slliw	a3,a3,0x10
    8000a6a2:	8f55                	or	a4,a4,a3
    8000a6a4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6a8:	068e                	slli	a3,a3,0x3
    8000a6aa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6ac:	8f75                	and	a4,a4,a3
    8000a6ae:	00023597          	auipc	a1,0x23
    8000a6b2:	cca58593          	addi	a1,a1,-822 # 8002d378 <__func__.0+0x2c0>
    8000a6b6:	00e79463          	bne	a5,a4,8000a6be <tinst_tests_pf+0x27ea>
    8000a6ba:	babfe06f          	j	80009264 <tinst_tests_pf+0x1390>
    8000a6be:	00023597          	auipc	a1,0x23
    8000a6c2:	cca58593          	addi	a1,a1,-822 # 8002d388 <__func__.0+0x2d0>
    8000a6c6:	b9ffe06f          	j	80009264 <tinst_tests_pf+0x1390>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a6ca:	701c                	ld	a5,32(s0)
    8000a6cc:	00023597          	auipc	a1,0x23
    8000a6d0:	cac58593          	addi	a1,a1,-852 # 8002d378 <__func__.0+0x2c0>
    8000a6d4:	e399                	bnez	a5,8000a6da <tinst_tests_pf+0x2806>
    8000a6d6:	c27fe06f          	j	800092fc <tinst_tests_pf+0x1428>
    8000a6da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6dc:	0016f713          	andi	a4,a3,1
    8000a6e0:	860718e3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6e8:	460d                	li	a2,3
    8000a6ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6f0:	00c59763          	bne	a1,a2,8000a6fe <tinst_tests_pf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6f4:	0026d683          	lhu	a3,2(a3)
    8000a6f8:	0106969b          	slliw	a3,a3,0x10
    8000a6fc:	8f55                	or	a4,a4,a3
    8000a6fe:	1ffe16b7          	lui	a3,0x1ffe1
    8000a702:	068e                	slli	a3,a3,0x3
    8000a704:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a706:	8f75                	and	a4,a4,a3
    8000a708:	00023597          	auipc	a1,0x23
    8000a70c:	c7058593          	addi	a1,a1,-912 # 8002d378 <__func__.0+0x2c0>
    8000a710:	00e79463          	bne	a5,a4,8000a718 <tinst_tests_pf+0x2844>
    8000a714:	be9fe06f          	j	800092fc <tinst_tests_pf+0x1428>
    8000a718:	00023597          	auipc	a1,0x23
    8000a71c:	c7058593          	addi	a1,a1,-912 # 8002d388 <__func__.0+0x2d0>
    8000a720:	bddfe06f          	j	800092fc <tinst_tests_pf+0x1428>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a724:	701c                	ld	a5,32(s0)
    8000a726:	00023597          	auipc	a1,0x23
    8000a72a:	c5258593          	addi	a1,a1,-942 # 8002d378 <__func__.0+0x2c0>
    8000a72e:	e399                	bnez	a5,8000a734 <tinst_tests_pf+0x2860>
    8000a730:	c65fe06f          	j	80009394 <tinst_tests_pf+0x14c0>
    8000a734:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a736:	0016f713          	andi	a4,a3,1
    8000a73a:	80071be3          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a73e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a742:	460d                	li	a2,3
    8000a744:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a748:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a74a:	00c59763          	bne	a1,a2,8000a758 <tinst_tests_pf+0x2884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a74e:	0026d683          	lhu	a3,2(a3)
    8000a752:	0106969b          	slliw	a3,a3,0x10
    8000a756:	8f55                	or	a4,a4,a3
    8000a758:	1ffe16b7          	lui	a3,0x1ffe1
    8000a75c:	068e                	slli	a3,a3,0x3
    8000a75e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a760:	8f75                	and	a4,a4,a3
    8000a762:	00023597          	auipc	a1,0x23
    8000a766:	c1658593          	addi	a1,a1,-1002 # 8002d378 <__func__.0+0x2c0>
    8000a76a:	00e79463          	bne	a5,a4,8000a772 <tinst_tests_pf+0x289e>
    8000a76e:	c27fe06f          	j	80009394 <tinst_tests_pf+0x14c0>
    8000a772:	00023597          	auipc	a1,0x23
    8000a776:	c1658593          	addi	a1,a1,-1002 # 8002d388 <__func__.0+0x2d0>
    8000a77a:	c1bfe06f          	j	80009394 <tinst_tests_pf+0x14c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a77e:	701c                	ld	a5,32(s0)
    8000a780:	00023597          	auipc	a1,0x23
    8000a784:	bf858593          	addi	a1,a1,-1032 # 8002d378 <__func__.0+0x2c0>
    8000a788:	e399                	bnez	a5,8000a78e <tinst_tests_pf+0x28ba>
    8000a78a:	ca3fe06f          	j	8000942c <tinst_tests_pf+0x1558>
    8000a78e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a790:	0016f713          	andi	a4,a3,1
    8000a794:	fa071e63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a798:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a79c:	460d                	li	a2,3
    8000a79e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7a4:	00c59763          	bne	a1,a2,8000a7b2 <tinst_tests_pf+0x28de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7a8:	0026d683          	lhu	a3,2(a3)
    8000a7ac:	0106969b          	slliw	a3,a3,0x10
    8000a7b0:	8f55                	or	a4,a4,a3
    8000a7b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7b6:	068e                	slli	a3,a3,0x3
    8000a7b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7ba:	8f75                	and	a4,a4,a3
    8000a7bc:	00023597          	auipc	a1,0x23
    8000a7c0:	bbc58593          	addi	a1,a1,-1092 # 8002d378 <__func__.0+0x2c0>
    8000a7c4:	00e79463          	bne	a5,a4,8000a7cc <tinst_tests_pf+0x28f8>
    8000a7c8:	c65fe06f          	j	8000942c <tinst_tests_pf+0x1558>
    8000a7cc:	00023597          	auipc	a1,0x23
    8000a7d0:	bbc58593          	addi	a1,a1,-1092 # 8002d388 <__func__.0+0x2d0>
    8000a7d4:	c59fe06f          	j	8000942c <tinst_tests_pf+0x1558>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a7d8:	701c                	ld	a5,32(s0)
    8000a7da:	e399                	bnez	a5,8000a7e0 <tinst_tests_pf+0x290c>
    8000a7dc:	aa2fe06f          	j	80008a7e <tinst_tests_pf+0xbaa>
    8000a7e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7e2:	0016f713          	andi	a4,a3,1
    8000a7e6:	f6071563          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7ee:	460d                	li	a2,3
    8000a7f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7f6:	00c59763          	bne	a1,a2,8000a804 <tinst_tests_pf+0x2930>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7fa:	0026d683          	lhu	a3,2(a3)
    8000a7fe:	0106969b          	slliw	a3,a3,0x10
    8000a802:	8f55                	or	a4,a4,a3
    8000a804:	1ffe16b7          	lui	a3,0x1ffe1
    8000a808:	068e                	slli	a3,a3,0x3
    8000a80a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a80c:	8f75                	and	a4,a4,a3
    8000a80e:	00e78463          	beq	a5,a4,8000a816 <tinst_tests_pf+0x2942>
    8000a812:	a58fe06f          	j	80008a6a <tinst_tests_pf+0xb96>
    8000a816:	a68fe06f          	j	80008a7e <tinst_tests_pf+0xbaa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a81a:	701c                	ld	a5,32(s0)
    8000a81c:	e399                	bnez	a5,8000a822 <tinst_tests_pf+0x294e>
    8000a81e:	b00fe06f          	j	80008b1e <tinst_tests_pf+0xc4a>
    8000a822:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a824:	0016f713          	andi	a4,a3,1
    8000a828:	f2071463          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a82c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a830:	460d                	li	a2,3
    8000a832:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a836:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a838:	00c59763          	bne	a1,a2,8000a846 <tinst_tests_pf+0x2972>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a83c:	0026d683          	lhu	a3,2(a3)
    8000a840:	0106969b          	slliw	a3,a3,0x10
    8000a844:	8f55                	or	a4,a4,a3
    8000a846:	1ffe16b7          	lui	a3,0x1ffe1
    8000a84a:	068e                	slli	a3,a3,0x3
    8000a84c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a84e:	8f75                	and	a4,a4,a3
    8000a850:	00e78463          	beq	a5,a4,8000a858 <tinst_tests_pf+0x2984>
    8000a854:	ab6fe06f          	j	80008b0a <tinst_tests_pf+0xc36>
    8000a858:	ac6fe06f          	j	80008b1e <tinst_tests_pf+0xc4a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a85c:	701c                	ld	a5,32(s0)
    8000a85e:	e399                	bnez	a5,8000a864 <tinst_tests_pf+0x2990>
    8000a860:	b5efe06f          	j	80008bbe <tinst_tests_pf+0xcea>
    8000a864:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a866:	0016f713          	andi	a4,a3,1
    8000a86a:	ee071363          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a86e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a872:	460d                	li	a2,3
    8000a874:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a878:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a87a:	00c59763          	bne	a1,a2,8000a888 <tinst_tests_pf+0x29b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a87e:	0026d683          	lhu	a3,2(a3)
    8000a882:	0106969b          	slliw	a3,a3,0x10
    8000a886:	8f55                	or	a4,a4,a3
    8000a888:	1ffe16b7          	lui	a3,0x1ffe1
    8000a88c:	068e                	slli	a3,a3,0x3
    8000a88e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a890:	8f75                	and	a4,a4,a3
    8000a892:	00e78463          	beq	a5,a4,8000a89a <tinst_tests_pf+0x29c6>
    8000a896:	b14fe06f          	j	80008baa <tinst_tests_pf+0xcd6>
    8000a89a:	b24fe06f          	j	80008bbe <tinst_tests_pf+0xcea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a89e:	701c                	ld	a5,32(s0)
    8000a8a0:	e399                	bnez	a5,8000a8a6 <tinst_tests_pf+0x29d2>
    8000a8a2:	bbcfe06f          	j	80008c5e <tinst_tests_pf+0xd8a>
    8000a8a6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8a8:	0016f713          	andi	a4,a3,1
    8000a8ac:	ea071263          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8b4:	460d                	li	a2,3
    8000a8b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8bc:	00c59763          	bne	a1,a2,8000a8ca <tinst_tests_pf+0x29f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8c0:	0026d683          	lhu	a3,2(a3)
    8000a8c4:	0106969b          	slliw	a3,a3,0x10
    8000a8c8:	8f55                	or	a4,a4,a3
    8000a8ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8ce:	068e                	slli	a3,a3,0x3
    8000a8d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8d2:	8f75                	and	a4,a4,a3
    8000a8d4:	00e78463          	beq	a5,a4,8000a8dc <tinst_tests_pf+0x2a08>
    8000a8d8:	b72fe06f          	j	80008c4a <tinst_tests_pf+0xd76>
    8000a8dc:	b82fe06f          	j	80008c5e <tinst_tests_pf+0xd8a>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a8e0:	701c                	ld	a5,32(s0)
    8000a8e2:	e399                	bnez	a5,8000a8e8 <tinst_tests_pf+0x2a14>
    8000a8e4:	c1afe06f          	j	80008cfe <tinst_tests_pf+0xe2a>
    8000a8e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8ea:	0016f713          	andi	a4,a3,1
    8000a8ee:	e6071163          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8f6:	460d                	li	a2,3
    8000a8f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8fe:	00c59763          	bne	a1,a2,8000a90c <tinst_tests_pf+0x2a38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a902:	0026d683          	lhu	a3,2(a3)
    8000a906:	0106969b          	slliw	a3,a3,0x10
    8000a90a:	8f55                	or	a4,a4,a3
    8000a90c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a910:	068e                	slli	a3,a3,0x3
    8000a912:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a914:	8f75                	and	a4,a4,a3
    8000a916:	00e78463          	beq	a5,a4,8000a91e <tinst_tests_pf+0x2a4a>
    8000a91a:	bd0fe06f          	j	80008cea <tinst_tests_pf+0xe16>
    8000a91e:	be0fe06f          	j	80008cfe <tinst_tests_pf+0xe2a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a922:	701c                	ld	a5,32(s0)
    8000a924:	e399                	bnez	a5,8000a92a <tinst_tests_pf+0x2a56>
    8000a926:	c78fe06f          	j	80008d9e <tinst_tests_pf+0xeca>
    8000a92a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a92c:	0016f713          	andi	a4,a3,1
    8000a930:	e2071063          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a934:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a938:	460d                	li	a2,3
    8000a93a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a93e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a940:	00c59763          	bne	a1,a2,8000a94e <tinst_tests_pf+0x2a7a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a944:	0026d683          	lhu	a3,2(a3)
    8000a948:	0106969b          	slliw	a3,a3,0x10
    8000a94c:	8f55                	or	a4,a4,a3
    8000a94e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a952:	068e                	slli	a3,a3,0x3
    8000a954:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a956:	8f75                	and	a4,a4,a3
    8000a958:	00e78463          	beq	a5,a4,8000a960 <tinst_tests_pf+0x2a8c>
    8000a95c:	c2efe06f          	j	80008d8a <tinst_tests_pf+0xeb6>
    8000a960:	c3efe06f          	j	80008d9e <tinst_tests_pf+0xeca>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a964:	701c                	ld	a5,32(s0)
    8000a966:	e399                	bnez	a5,8000a96c <tinst_tests_pf+0x2a98>
    8000a968:	cd6fe06f          	j	80008e3e <tinst_tests_pf+0xf6a>
    8000a96c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a96e:	0016f713          	andi	a4,a3,1
    8000a972:	dc071f63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a976:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a97a:	460d                	li	a2,3
    8000a97c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a980:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a982:	00c59763          	bne	a1,a2,8000a990 <tinst_tests_pf+0x2abc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a986:	0026d683          	lhu	a3,2(a3)
    8000a98a:	0106969b          	slliw	a3,a3,0x10
    8000a98e:	8f55                	or	a4,a4,a3
    8000a990:	1ffe16b7          	lui	a3,0x1ffe1
    8000a994:	068e                	slli	a3,a3,0x3
    8000a996:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a998:	8f75                	and	a4,a4,a3
    8000a99a:	00e78463          	beq	a5,a4,8000a9a2 <tinst_tests_pf+0x2ace>
    8000a99e:	c8cfe06f          	j	80008e2a <tinst_tests_pf+0xf56>
    8000a9a2:	c9cfe06f          	j	80008e3e <tinst_tests_pf+0xf6a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a9a6:	701c                	ld	a5,32(s0)
    8000a9a8:	e399                	bnez	a5,8000a9ae <tinst_tests_pf+0x2ada>
    8000a9aa:	d38fe06f          	j	80008ee2 <tinst_tests_pf+0x100e>
    8000a9ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9b0:	0016f713          	andi	a4,a3,1
    8000a9b4:	d8071e63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9bc:	460d                	li	a2,3
    8000a9be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9c4:	00c59763          	bne	a1,a2,8000a9d2 <tinst_tests_pf+0x2afe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9c8:	0026d683          	lhu	a3,2(a3)
    8000a9cc:	0106969b          	slliw	a3,a3,0x10
    8000a9d0:	8f55                	or	a4,a4,a3
    8000a9d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9d6:	068e                	slli	a3,a3,0x3
    8000a9d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9da:	8f75                	and	a4,a4,a3
    8000a9dc:	00e78463          	beq	a5,a4,8000a9e4 <tinst_tests_pf+0x2b10>
    8000a9e0:	ceefe06f          	j	80008ece <tinst_tests_pf+0xffa>
    8000a9e4:	cfefe06f          	j	80008ee2 <tinst_tests_pf+0x100e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a9e8:	701c                	ld	a5,32(s0)
    8000a9ea:	e399                	bnez	a5,8000a9f0 <tinst_tests_pf+0x2b1c>
    8000a9ec:	d96fe06f          	j	80008f82 <tinst_tests_pf+0x10ae>
    8000a9f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9f2:	0016f713          	andi	a4,a3,1
    8000a9f6:	d4071d63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9fa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9fe:	460d                	li	a2,3
    8000aa00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa06:	00c59763          	bne	a1,a2,8000aa14 <tinst_tests_pf+0x2b40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa0a:	0026d683          	lhu	a3,2(a3)
    8000aa0e:	0106969b          	slliw	a3,a3,0x10
    8000aa12:	8f55                	or	a4,a4,a3
    8000aa14:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa18:	068e                	slli	a3,a3,0x3
    8000aa1a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa1c:	8f75                	and	a4,a4,a3
    8000aa1e:	00e78463          	beq	a5,a4,8000aa26 <tinst_tests_pf+0x2b52>
    8000aa22:	d4cfe06f          	j	80008f6e <tinst_tests_pf+0x109a>
    8000aa26:	d5cfe06f          	j	80008f82 <tinst_tests_pf+0x10ae>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000aa2a:	701c                	ld	a5,32(s0)
    8000aa2c:	e399                	bnez	a5,8000aa32 <tinst_tests_pf+0x2b5e>
    8000aa2e:	df4fe06f          	j	80009022 <tinst_tests_pf+0x114e>
    8000aa32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa34:	0016f713          	andi	a4,a3,1
    8000aa38:	d0071c63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa40:	460d                	li	a2,3
    8000aa42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa48:	00c59763          	bne	a1,a2,8000aa56 <tinst_tests_pf+0x2b82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa4c:	0026d683          	lhu	a3,2(a3)
    8000aa50:	0106969b          	slliw	a3,a3,0x10
    8000aa54:	8f55                	or	a4,a4,a3
    8000aa56:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa5a:	068e                	slli	a3,a3,0x3
    8000aa5c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa5e:	8f75                	and	a4,a4,a3
    8000aa60:	00e78463          	beq	a5,a4,8000aa68 <tinst_tests_pf+0x2b94>
    8000aa64:	daafe06f          	j	8000900e <tinst_tests_pf+0x113a>
    8000aa68:	dbafe06f          	j	80009022 <tinst_tests_pf+0x114e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000aa6c:	701c                	ld	a5,32(s0)
    8000aa6e:	e399                	bnez	a5,8000aa74 <tinst_tests_pf+0x2ba0>
    8000aa70:	e52fe06f          	j	800090c2 <tinst_tests_pf+0x11ee>
    8000aa74:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa76:	0016f713          	andi	a4,a3,1
    8000aa7a:	cc071b63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa7e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa82:	460d                	li	a2,3
    8000aa84:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa88:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa8a:	00c59763          	bne	a1,a2,8000aa98 <tinst_tests_pf+0x2bc4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa8e:	0026d683          	lhu	a3,2(a3)
    8000aa92:	0106969b          	slliw	a3,a3,0x10
    8000aa96:	8f55                	or	a4,a4,a3
    8000aa98:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa9c:	068e                	slli	a3,a3,0x3
    8000aa9e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aaa0:	8f75                	and	a4,a4,a3
    8000aaa2:	00e78463          	beq	a5,a4,8000aaaa <tinst_tests_pf+0x2bd6>
    8000aaa6:	e08fe06f          	j	800090ae <tinst_tests_pf+0x11da>
    8000aaaa:	e18fe06f          	j	800090c2 <tinst_tests_pf+0x11ee>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000aaae:	6418                	ld	a4,8(s0)
    8000aab0:	47bd                	li	a5,15
    8000aab2:	00f70463          	beq	a4,a5,8000aaba <tinst_tests_pf+0x2be6>
    8000aab6:	f64fe06f          	j	8000921a <tinst_tests_pf+0x1346>
    8000aaba:	701c                	ld	a5,32(s0)
    8000aabc:	e399                	bnez	a5,8000aac2 <tinst_tests_pf+0x2bee>
    8000aabe:	f5efe06f          	j	8000921c <tinst_tests_pf+0x1348>
    8000aac2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aac4:	0016f713          	andi	a4,a3,1
    8000aac8:	c8071463          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aacc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aad0:	460d                	li	a2,3
    8000aad2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aad6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aad8:	00c59763          	bne	a1,a2,8000aae6 <tinst_tests_pf+0x2c12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aadc:	0026d683          	lhu	a3,2(a3)
    8000aae0:	0106969b          	slliw	a3,a3,0x10
    8000aae4:	8f55                	or	a4,a4,a3
    8000aae6:	1ffe16b7          	lui	a3,0x1ffe1
    8000aaea:	068e                	slli	a3,a3,0x3
    8000aaec:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aaee:	8f75                	and	a4,a4,a3
    8000aaf0:	40f70933          	sub	s2,a4,a5
    8000aaf4:	00193913          	seqz	s2,s2
    8000aaf8:	f24fe06f          	j	8000921c <tinst_tests_pf+0x1348>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aafc:	6418                	ld	a4,8(s0)
    8000aafe:	47bd                	li	a5,15
    8000ab00:	00f70463          	beq	a4,a5,8000ab08 <tinst_tests_pf+0x2c34>
    8000ab04:	faefe06f          	j	800092b2 <tinst_tests_pf+0x13de>
    8000ab08:	701c                	ld	a5,32(s0)
    8000ab0a:	e399                	bnez	a5,8000ab10 <tinst_tests_pf+0x2c3c>
    8000ab0c:	fa8fe06f          	j	800092b4 <tinst_tests_pf+0x13e0>
    8000ab10:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab12:	0016f713          	andi	a4,a3,1
    8000ab16:	c2071d63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab1a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab1e:	460d                	li	a2,3
    8000ab20:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab24:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab26:	00c59763          	bne	a1,a2,8000ab34 <tinst_tests_pf+0x2c60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab2a:	0026d683          	lhu	a3,2(a3)
    8000ab2e:	0106969b          	slliw	a3,a3,0x10
    8000ab32:	8f55                	or	a4,a4,a3
    8000ab34:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab38:	068e                	slli	a3,a3,0x3
    8000ab3a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab3c:	8f75                	and	a4,a4,a3
    8000ab3e:	40f70933          	sub	s2,a4,a5
    8000ab42:	00193913          	seqz	s2,s2
    8000ab46:	f6efe06f          	j	800092b4 <tinst_tests_pf+0x13e0>
    instruction = *((uint16_t*)addr);
    8000ab4a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab4e:	460d                	li	a2,3
    8000ab50:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab54:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab56:	00c59763          	bne	a1,a2,8000ab64 <tinst_tests_pf+0x2c90>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab5a:	0026d683          	lhu	a3,2(a3)
    8000ab5e:	0106969b          	slliw	a3,a3,0x10
    8000ab62:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000ab64:	1746                	slli	a4,a4,0x31
    8000ab66:	9345                	srli	a4,a4,0x31
    8000ab68:	00e78463          	beq	a5,a4,8000ab70 <tinst_tests_pf+0x2c9c>
    8000ab6c:	d3efd06f          	j	800080aa <tinst_tests_pf+0x1d6>
    8000ab70:	d4efd06f          	j	800080be <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ab74:	6418                	ld	a4,8(s0)
    8000ab76:	47bd                	li	a5,15
    8000ab78:	00f70463          	beq	a4,a5,8000ab80 <tinst_tests_pf+0x2cac>
    8000ab7c:	fcefe06f          	j	8000934a <tinst_tests_pf+0x1476>
    8000ab80:	701c                	ld	a5,32(s0)
    8000ab82:	e399                	bnez	a5,8000ab88 <tinst_tests_pf+0x2cb4>
    8000ab84:	fc8fe06f          	j	8000934c <tinst_tests_pf+0x1478>
    8000ab88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab8a:	0016f713          	andi	a4,a3,1
    8000ab8e:	bc071163          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab96:	460d                	li	a2,3
    8000ab98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab9e:	00c59763          	bne	a1,a2,8000abac <tinst_tests_pf+0x2cd8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aba2:	0026d683          	lhu	a3,2(a3)
    8000aba6:	0106969b          	slliw	a3,a3,0x10
    8000abaa:	8f55                	or	a4,a4,a3
    8000abac:	1ffe16b7          	lui	a3,0x1ffe1
    8000abb0:	068e                	slli	a3,a3,0x3
    8000abb2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abb4:	8f75                	and	a4,a4,a3
    8000abb6:	40f70933          	sub	s2,a4,a5
    8000abba:	00193913          	seqz	s2,s2
    8000abbe:	f8efe06f          	j	8000934c <tinst_tests_pf+0x1478>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000abc2:	6418                	ld	a4,8(s0)
    8000abc4:	47bd                	li	a5,15
    8000abc6:	00f70463          	beq	a4,a5,8000abce <tinst_tests_pf+0x2cfa>
    8000abca:	819fe06f          	j	800093e2 <tinst_tests_pf+0x150e>
    8000abce:	701c                	ld	a5,32(s0)
    8000abd0:	e399                	bnez	a5,8000abd6 <tinst_tests_pf+0x2d02>
    8000abd2:	813fe06f          	j	800093e4 <tinst_tests_pf+0x1510>
    8000abd6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abd8:	0016f713          	andi	a4,a3,1
    8000abdc:	b6071a63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000abe0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abe4:	460d                	li	a2,3
    8000abe6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abec:	00c59763          	bne	a1,a2,8000abfa <tinst_tests_pf+0x2d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abf0:	0026d683          	lhu	a3,2(a3)
    8000abf4:	0106969b          	slliw	a3,a3,0x10
    8000abf8:	8f55                	or	a4,a4,a3
    8000abfa:	1ffe16b7          	lui	a3,0x1ffe1
    8000abfe:	068e                	slli	a3,a3,0x3
    8000ac00:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac02:	8f75                	and	a4,a4,a3
    8000ac04:	40f70933          	sub	s2,a4,a5
    8000ac08:	00193913          	seqz	s2,s2
    8000ac0c:	fd8fe06f          	j	800093e4 <tinst_tests_pf+0x1510>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ac10:	02043983          	ld	s3,32(s0)
    8000ac14:	00099463          	bnez	s3,8000ac1c <tinst_tests_pf+0x2d48>
    8000ac18:	b6dfd06f          	j	80008784 <tinst_tests_pf+0x8b0>
    8000ac1c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ac1e:	0017f713          	andi	a4,a5,1
    8000ac22:	b2071763          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac26:	0007d503          	lhu	a0,0(a5)
    8000ac2a:	b17f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ac2e:	01f077b7          	lui	a5,0x1f07
    8000ac32:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ac36:	00f57933          	and	s2,a0,a5
    8000ac3a:	41390933          	sub	s2,s2,s3
    8000ac3e:	00193913          	seqz	s2,s2
    8000ac42:	b43fd06f          	j	80008784 <tinst_tests_pf+0x8b0>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ac46:	7004                	ld	s1,32(s0)
    8000ac48:	e099                	bnez	s1,8000ac4e <tinst_tests_pf+0x2d7a>
    8000ac4a:	bd7fd06f          	j	80008820 <tinst_tests_pf+0x94c>
    8000ac4e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ac50:	0017f713          	andi	a4,a5,1
    8000ac54:	ae071e63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac58:	0007d503          	lhu	a0,0(a5)
    8000ac5c:	ae5f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ac60:	01f077b7          	lui	a5,0x1f07
    8000ac64:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ac68:	00f57933          	and	s2,a0,a5
    8000ac6c:	40990933          	sub	s2,s2,s1
    8000ac70:	00193913          	seqz	s2,s2
    8000ac74:	badfd06f          	j	80008820 <tinst_tests_pf+0x94c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000ac78:	701c                	ld	a5,32(s0)
    8000ac7a:	e399                	bnez	a5,8000ac80 <tinst_tests_pf+0x2dac>
    8000ac7c:	c4bfd06f          	j	800088c6 <tinst_tests_pf+0x9f2>
    8000ac80:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac82:	0016f713          	andi	a4,a3,1
    8000ac86:	ac071563          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac8a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac8e:	460d                	li	a2,3
    8000ac90:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac94:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac96:	00c59763          	bne	a1,a2,8000aca4 <tinst_tests_pf+0x2dd0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac9a:	0026d683          	lhu	a3,2(a3)
    8000ac9e:	0106969b          	slliw	a3,a3,0x10
    8000aca2:	8f55                	or	a4,a4,a3
    8000aca4:	1ffe16b7          	lui	a3,0x1ffe1
    8000aca8:	068e                	slli	a3,a3,0x3
    8000acaa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acac:	8f75                	and	a4,a4,a3
    8000acae:	40f70933          	sub	s2,a4,a5
    8000acb2:	00193913          	seqz	s2,s2
    8000acb6:	c11fd06f          	j	800088c6 <tinst_tests_pf+0x9f2>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000acba:	701c                	ld	a5,32(s0)
    8000acbc:	e399                	bnez	a5,8000acc2 <tinst_tests_pf+0x2dee>
    8000acbe:	caffd06f          	j	8000896c <tinst_tests_pf+0xa98>
    8000acc2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acc4:	0016f713          	andi	a4,a3,1
    8000acc8:	a8071463          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000accc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000acd0:	460d                	li	a2,3
    8000acd2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000acd6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000acd8:	00c59763          	bne	a1,a2,8000ace6 <tinst_tests_pf+0x2e12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acdc:	0026d683          	lhu	a3,2(a3)
    8000ace0:	0106969b          	slliw	a3,a3,0x10
    8000ace4:	8f55                	or	a4,a4,a3
    8000ace6:	1ffe16b7          	lui	a3,0x1ffe1
    8000acea:	068e                	slli	a3,a3,0x3
    8000acec:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acee:	8f75                	and	a4,a4,a3
    8000acf0:	40f70933          	sub	s2,a4,a5
    8000acf4:	00193913          	seqz	s2,s2
    8000acf8:	c75fd06f          	j	8000896c <tinst_tests_pf+0xa98>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000acfc:	701c                	ld	a5,32(s0)
    8000acfe:	e399                	bnez	a5,8000ad04 <tinst_tests_pf+0x2e30>
    8000ad00:	d0dfd06f          	j	80008a0c <tinst_tests_pf+0xb38>
    8000ad04:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad06:	0016f713          	andi	a4,a3,1
    8000ad0a:	a4071363          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad12:	460d                	li	a2,3
    8000ad14:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad1a:	00c59763          	bne	a1,a2,8000ad28 <tinst_tests_pf+0x2e54>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad1e:	0026d683          	lhu	a3,2(a3)
    8000ad22:	0106969b          	slliw	a3,a3,0x10
    8000ad26:	8f55                	or	a4,a4,a3
    8000ad28:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad2c:	068e                	slli	a3,a3,0x3
    8000ad2e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad30:	8f75                	and	a4,a4,a3
    8000ad32:	40f70933          	sub	s2,a4,a5
    8000ad36:	00193913          	seqz	s2,s2
    8000ad3a:	cd3fd06f          	j	80008a0c <tinst_tests_pf+0xb38>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ad3e:	701c                	ld	a5,32(s0)
    8000ad40:	e399                	bnez	a5,8000ad46 <tinst_tests_pf+0x2e72>
    8000ad42:	d5ffd06f          	j	80008aa0 <tinst_tests_pf+0xbcc>
    8000ad46:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad48:	0016f713          	andi	a4,a3,1
    8000ad4c:	a0071263          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad50:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad54:	460d                	li	a2,3
    8000ad56:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad5a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad5c:	00c59763          	bne	a1,a2,8000ad6a <tinst_tests_pf+0x2e96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad60:	0026d683          	lhu	a3,2(a3)
    8000ad64:	0106969b          	slliw	a3,a3,0x10
    8000ad68:	8f55                	or	a4,a4,a3
    8000ad6a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad6e:	068e                	slli	a3,a3,0x3
    8000ad70:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad72:	8f75                	and	a4,a4,a3
    8000ad74:	40f70933          	sub	s2,a4,a5
    8000ad78:	00193913          	seqz	s2,s2
    8000ad7c:	d25fd06f          	j	80008aa0 <tinst_tests_pf+0xbcc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ad80:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ad82:	0017f713          	andi	a4,a5,1
    8000ad86:	9c071563          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad8a:	0007d503          	lhu	a0,0(a5)
    8000ad8e:	9b3f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ad92:	67a1                	lui	a5,0x8
    8000ad94:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ad96:	8d7d                	and	a0,a0,a5
    8000ad98:	00a48463          	beq	s1,a0,8000ada0 <tinst_tests_pf+0x2ecc>
    8000ad9c:	861fd06f          	j	800085fc <tinst_tests_pf+0x728>
    8000ada0:	00022597          	auipc	a1,0x22
    8000ada4:	5d858593          	addi	a1,a1,1496 # 8002d378 <__func__.0+0x2c0>
    8000ada8:	85dfd06f          	j	80008604 <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000adac:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000adae:	0017f713          	andi	a4,a5,1
    8000adb2:	98071f63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adb6:	0007d503          	lhu	a0,0(a5)
    8000adba:	987f60ef          	jal	80001740 <expand_compressed_instruction>
    8000adbe:	67a1                	lui	a5,0x8
    8000adc0:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000adc2:	8d7d                	and	a0,a0,a5
    8000adc4:	00a98463          	beq	s3,a0,8000adcc <tinst_tests_pf+0x2ef8>
    8000adc8:	8c9fd06f          	j	80008690 <tinst_tests_pf+0x7bc>
    8000adcc:	00022597          	auipc	a1,0x22
    8000add0:	5ac58593          	addi	a1,a1,1452 # 8002d378 <__func__.0+0x2c0>
    8000add4:	8c5fd06f          	j	80008698 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000add8:	701c                	ld	a5,32(s0)
    8000adda:	e399                	bnez	a5,8000ade0 <tinst_tests_pf+0x2f0c>
    8000addc:	d65fd06f          	j	80008b40 <tinst_tests_pf+0xc6c>
    8000ade0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ade2:	0016f713          	andi	a4,a3,1
    8000ade6:	96071563          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adee:	460d                	li	a2,3
    8000adf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adf6:	00c59763          	bne	a1,a2,8000ae04 <tinst_tests_pf+0x2f30>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adfa:	0026d683          	lhu	a3,2(a3)
    8000adfe:	0106969b          	slliw	a3,a3,0x10
    8000ae02:	8f55                	or	a4,a4,a3
    8000ae04:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae08:	068e                	slli	a3,a3,0x3
    8000ae0a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae0c:	8f75                	and	a4,a4,a3
    8000ae0e:	40f70933          	sub	s2,a4,a5
    8000ae12:	00193913          	seqz	s2,s2
    8000ae16:	d2bfd06f          	j	80008b40 <tinst_tests_pf+0xc6c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ae1a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae1c:	0017f713          	andi	a4,a5,1
    8000ae20:	92071863          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae24:	0007d503          	lhu	a0,0(a5)
    8000ae28:	919f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ae2c:	01f077b7          	lui	a5,0x1f07
    8000ae30:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ae34:	8d7d                	and	a0,a0,a5
    8000ae36:	00a98463          	beq	s3,a0,8000ae3e <tinst_tests_pf+0x2f6a>
    8000ae3a:	8ebfd06f          	j	80008724 <tinst_tests_pf+0x850>
    8000ae3e:	00022597          	auipc	a1,0x22
    8000ae42:	53a58593          	addi	a1,a1,1338 # 8002d378 <__func__.0+0x2c0>
    8000ae46:	8e7fd06f          	j	8000872c <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ae4a:	701c                	ld	a5,32(s0)
    8000ae4c:	e399                	bnez	a5,8000ae52 <tinst_tests_pf+0x2f7e>
    8000ae4e:	d93fd06f          	j	80008be0 <tinst_tests_pf+0xd0c>
    8000ae52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae54:	0016f713          	andi	a4,a3,1
    8000ae58:	8e071c63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae5c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae60:	460d                	li	a2,3
    8000ae62:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae66:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae68:	00c59763          	bne	a1,a2,8000ae76 <tinst_tests_pf+0x2fa2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae6c:	0026d683          	lhu	a3,2(a3)
    8000ae70:	0106969b          	slliw	a3,a3,0x10
    8000ae74:	8f55                	or	a4,a4,a3
    8000ae76:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae7a:	068e                	slli	a3,a3,0x3
    8000ae7c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae7e:	8f75                	and	a4,a4,a3
    8000ae80:	40f70933          	sub	s2,a4,a5
    8000ae84:	00193913          	seqz	s2,s2
    8000ae88:	d59fd06f          	j	80008be0 <tinst_tests_pf+0xd0c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ae8c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae8e:	0017f713          	andi	a4,a5,1
    8000ae92:	8a071f63          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae96:	0007d503          	lhu	a0,0(a5)
    8000ae9a:	8a7f60ef          	jal	80001740 <expand_compressed_instruction>
    8000ae9e:	01f077b7          	lui	a5,0x1f07
    8000aea2:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000aea6:	8d7d                	and	a0,a0,a5
    8000aea8:	00a48463          	beq	s1,a0,8000aeb0 <tinst_tests_pf+0x2fdc>
    8000aeac:	915fd06f          	j	800087c0 <tinst_tests_pf+0x8ec>
    8000aeb0:	00022597          	auipc	a1,0x22
    8000aeb4:	4c858593          	addi	a1,a1,1224 # 8002d378 <__func__.0+0x2c0>
    8000aeb8:	911fd06f          	j	800087c8 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000aebc:	701c                	ld	a5,32(s0)
    8000aebe:	e399                	bnez	a5,8000aec4 <tinst_tests_pf+0x2ff0>
    8000aec0:	dc1fd06f          	j	80008c80 <tinst_tests_pf+0xdac>
    8000aec4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aec6:	0016f713          	andi	a4,a3,1
    8000aeca:	88071363          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aece:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aed2:	460d                	li	a2,3
    8000aed4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aed8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeda:	00c59763          	bne	a1,a2,8000aee8 <tinst_tests_pf+0x3014>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aede:	0026d683          	lhu	a3,2(a3)
    8000aee2:	0106969b          	slliw	a3,a3,0x10
    8000aee6:	8f55                	or	a4,a4,a3
    8000aee8:	1ffe16b7          	lui	a3,0x1ffe1
    8000aeec:	068e                	slli	a3,a3,0x3
    8000aeee:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aef0:	8f75                	and	a4,a4,a3
    8000aef2:	40f70933          	sub	s2,a4,a5
    8000aef6:	00193913          	seqz	s2,s2
    8000aefa:	d87fd06f          	j	80008c80 <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000aefe:	701c                	ld	a5,32(s0)
    8000af00:	e399                	bnez	a5,8000af06 <tinst_tests_pf+0x3032>
    8000af02:	e1ffd06f          	j	80008d20 <tinst_tests_pf+0xe4c>
    8000af06:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af08:	0016f713          	andi	a4,a3,1
    8000af0c:	84071263          	bnez	a4,80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af10:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af14:	460d                	li	a2,3
    8000af16:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af1a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af1c:	00c59763          	bne	a1,a2,8000af2a <tinst_tests_pf+0x3056>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af20:	0026d683          	lhu	a3,2(a3)
    8000af24:	0106969b          	slliw	a3,a3,0x10
    8000af28:	8f55                	or	a4,a4,a3
    8000af2a:	1ffe16b7          	lui	a3,0x1ffe1
    8000af2e:	068e                	slli	a3,a3,0x3
    8000af30:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af32:	8f75                	and	a4,a4,a3
    8000af34:	40f70933          	sub	s2,a4,a5
    8000af38:	00193913          	seqz	s2,s2
    8000af3c:	de5fd06f          	j	80008d20 <tinst_tests_pf+0xe4c>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000af40:	701c                	ld	a5,32(s0)
    8000af42:	e399                	bnez	a5,8000af48 <tinst_tests_pf+0x3074>
    8000af44:	e7dfd06f          	j	80008dc0 <tinst_tests_pf+0xeec>
    8000af48:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af4a:	0016f713          	andi	a4,a3,1
    8000af4e:	c319                	beqz	a4,8000af54 <tinst_tests_pf+0x3080>
    8000af50:	800ff06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af58:	460d                	li	a2,3
    8000af5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af60:	00c59763          	bne	a1,a2,8000af6e <tinst_tests_pf+0x309a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af64:	0026d683          	lhu	a3,2(a3)
    8000af68:	0106969b          	slliw	a3,a3,0x10
    8000af6c:	8f55                	or	a4,a4,a3
    8000af6e:	1ffe16b7          	lui	a3,0x1ffe1
    8000af72:	068e                	slli	a3,a3,0x3
    8000af74:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af76:	8f75                	and	a4,a4,a3
    8000af78:	40f70933          	sub	s2,a4,a5
    8000af7c:	00193913          	seqz	s2,s2
    8000af80:	e41fd06f          	j	80008dc0 <tinst_tests_pf+0xeec>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000af84:	701c                	ld	a5,32(s0)
    8000af86:	e399                	bnez	a5,8000af8c <tinst_tests_pf+0x30b8>
    8000af88:	ed9fd06f          	j	80008e60 <tinst_tests_pf+0xf8c>
    8000af8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af8e:	0016f713          	andi	a4,a3,1
    8000af92:	c319                	beqz	a4,8000af98 <tinst_tests_pf+0x30c4>
    8000af94:	fbdfe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af98:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af9c:	460d                	li	a2,3
    8000af9e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afa2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afa4:	00c59763          	bne	a1,a2,8000afb2 <tinst_tests_pf+0x30de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afa8:	0026d683          	lhu	a3,2(a3)
    8000afac:	0106969b          	slliw	a3,a3,0x10
    8000afb0:	8f55                	or	a4,a4,a3
    8000afb2:	1ffe16b7          	lui	a3,0x1ffe1
    8000afb6:	068e                	slli	a3,a3,0x3
    8000afb8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afba:	8f75                	and	a4,a4,a3
    8000afbc:	40f70933          	sub	s2,a4,a5
    8000afc0:	00193913          	seqz	s2,s2
    8000afc4:	e9dfd06f          	j	80008e60 <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000afc8:	701c                	ld	a5,32(s0)
    8000afca:	e399                	bnez	a5,8000afd0 <tinst_tests_pf+0x30fc>
    8000afcc:	f39fd06f          	j	80008f04 <tinst_tests_pf+0x1030>
    8000afd0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afd2:	0016f713          	andi	a4,a3,1
    8000afd6:	c319                	beqz	a4,8000afdc <tinst_tests_pf+0x3108>
    8000afd8:	f79fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000afdc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afe0:	460d                	li	a2,3
    8000afe2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afe6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afe8:	00c59763          	bne	a1,a2,8000aff6 <tinst_tests_pf+0x3122>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afec:	0026d683          	lhu	a3,2(a3)
    8000aff0:	0106969b          	slliw	a3,a3,0x10
    8000aff4:	8f55                	or	a4,a4,a3
    8000aff6:	1ffe16b7          	lui	a3,0x1ffe1
    8000affa:	068e                	slli	a3,a3,0x3
    8000affc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000affe:	8f75                	and	a4,a4,a3
    8000b000:	40f70933          	sub	s2,a4,a5
    8000b004:	00193913          	seqz	s2,s2
    8000b008:	efdfd06f          	j	80008f04 <tinst_tests_pf+0x1030>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b00c:	701c                	ld	a5,32(s0)
    8000b00e:	e399                	bnez	a5,8000b014 <tinst_tests_pf+0x3140>
    8000b010:	f95fd06f          	j	80008fa4 <tinst_tests_pf+0x10d0>
    8000b014:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b016:	0016f713          	andi	a4,a3,1
    8000b01a:	c319                	beqz	a4,8000b020 <tinst_tests_pf+0x314c>
    8000b01c:	f35fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b020:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b024:	460d                	li	a2,3
    8000b026:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b02a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b02c:	00c59763          	bne	a1,a2,8000b03a <tinst_tests_pf+0x3166>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b030:	0026d683          	lhu	a3,2(a3)
    8000b034:	0106969b          	slliw	a3,a3,0x10
    8000b038:	8f55                	or	a4,a4,a3
    8000b03a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b03e:	068e                	slli	a3,a3,0x3
    8000b040:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b042:	8f75                	and	a4,a4,a3
    8000b044:	40f70933          	sub	s2,a4,a5
    8000b048:	00193913          	seqz	s2,s2
    8000b04c:	f59fd06f          	j	80008fa4 <tinst_tests_pf+0x10d0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b050:	701c                	ld	a5,32(s0)
    8000b052:	e399                	bnez	a5,8000b058 <tinst_tests_pf+0x3184>
    8000b054:	ff1fd06f          	j	80009044 <tinst_tests_pf+0x1170>
    8000b058:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b05a:	0016f713          	andi	a4,a3,1
    8000b05e:	c319                	beqz	a4,8000b064 <tinst_tests_pf+0x3190>
    8000b060:	ef1fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b064:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b068:	460d                	li	a2,3
    8000b06a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b06e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b070:	00c59763          	bne	a1,a2,8000b07e <tinst_tests_pf+0x31aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b074:	0026d683          	lhu	a3,2(a3)
    8000b078:	0106969b          	slliw	a3,a3,0x10
    8000b07c:	8f55                	or	a4,a4,a3
    8000b07e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b082:	068e                	slli	a3,a3,0x3
    8000b084:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b086:	8f75                	and	a4,a4,a3
    8000b088:	40f70933          	sub	s2,a4,a5
    8000b08c:	00193913          	seqz	s2,s2
    8000b090:	fb5fd06f          	j	80009044 <tinst_tests_pf+0x1170>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b094:	701c                	ld	a5,32(s0)
    8000b096:	e399                	bnez	a5,8000b09c <tinst_tests_pf+0x31c8>
    8000b098:	84cfe06f          	j	800090e4 <tinst_tests_pf+0x1210>
    8000b09c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b09e:	0016f713          	andi	a4,a3,1
    8000b0a2:	c319                	beqz	a4,8000b0a8 <tinst_tests_pf+0x31d4>
    8000b0a4:	eadfe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0ac:	460d                	li	a2,3
    8000b0ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0b4:	00c59763          	bne	a1,a2,8000b0c2 <tinst_tests_pf+0x31ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0b8:	0026d683          	lhu	a3,2(a3)
    8000b0bc:	0106969b          	slliw	a3,a3,0x10
    8000b0c0:	8f55                	or	a4,a4,a3
    8000b0c2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0c6:	068e                	slli	a3,a3,0x3
    8000b0c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0ca:	8f75                	and	a4,a4,a3
    8000b0cc:	40f70933          	sub	s2,a4,a5
    8000b0d0:	00193913          	seqz	s2,s2
    8000b0d4:	810fe06f          	j	800090e4 <tinst_tests_pf+0x1210>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b0d8:	701c                	ld	a5,32(s0)
    8000b0da:	e399                	bnez	a5,8000b0e0 <tinst_tests_pf+0x320c>
    8000b0dc:	8a8fe06f          	j	80009184 <tinst_tests_pf+0x12b0>
    8000b0e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0e2:	0016f713          	andi	a4,a3,1
    8000b0e6:	c319                	beqz	a4,8000b0ec <tinst_tests_pf+0x3218>
    8000b0e8:	e69fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0ec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0f0:	460d                	li	a2,3
    8000b0f2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0f6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0f8:	00c59763          	bne	a1,a2,8000b106 <tinst_tests_pf+0x3232>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0fc:	0026d683          	lhu	a3,2(a3)
    8000b100:	0106969b          	slliw	a3,a3,0x10
    8000b104:	8f55                	or	a4,a4,a3
    8000b106:	1ffe16b7          	lui	a3,0x1ffe1
    8000b10a:	068e                	slli	a3,a3,0x3
    8000b10c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b10e:	8f75                	and	a4,a4,a3
    8000b110:	40f70933          	sub	s2,a4,a5
    8000b114:	00193913          	seqz	s2,s2
    8000b118:	86cfe06f          	j	80009184 <tinst_tests_pf+0x12b0>
    8000b11c:	701c                	ld	a5,32(s0)
    8000b11e:	e399                	bnez	a5,8000b124 <tinst_tests_pf+0x3250>
    8000b120:	842fe06f          	j	80009162 <tinst_tests_pf+0x128e>
    8000b124:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b126:	0016f713          	andi	a4,a3,1
    8000b12a:	c319                	beqz	a4,8000b130 <tinst_tests_pf+0x325c>
    8000b12c:	e25fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b130:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b134:	460d                	li	a2,3
    8000b136:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b13a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b13c:	00c59763          	bne	a1,a2,8000b14a <tinst_tests_pf+0x3276>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b140:	0026d683          	lhu	a3,2(a3)
    8000b144:	0106969b          	slliw	a3,a3,0x10
    8000b148:	8f55                	or	a4,a4,a3
    8000b14a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b14e:	068e                	slli	a3,a3,0x3
    8000b150:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b152:	8f75                	and	a4,a4,a3
    8000b154:	00e78463          	beq	a5,a4,8000b15c <tinst_tests_pf+0x3288>
    8000b158:	ff7fd06f          	j	8000914e <tinst_tests_pf+0x127a>
    8000b15c:	806fe06f          	j	80009162 <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b160:	701c                	ld	a5,32(s0)
    8000b162:	e399                	bnez	a5,8000b168 <tinst_tests_pf+0x3294>
    8000b164:	89efe06f          	j	80009202 <tinst_tests_pf+0x132e>
    8000b168:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b16a:	0016f713          	andi	a4,a3,1
    8000b16e:	c319                	beqz	a4,8000b174 <tinst_tests_pf+0x32a0>
    8000b170:	de1fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b174:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b178:	460d                	li	a2,3
    8000b17a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b17e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b180:	00c59763          	bne	a1,a2,8000b18e <tinst_tests_pf+0x32ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b184:	0026d683          	lhu	a3,2(a3)
    8000b188:	0106969b          	slliw	a3,a3,0x10
    8000b18c:	8f55                	or	a4,a4,a3
    8000b18e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b192:	068e                	slli	a3,a3,0x3
    8000b194:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b196:	8f75                	and	a4,a4,a3
    8000b198:	00e78463          	beq	a5,a4,8000b1a0 <tinst_tests_pf+0x32cc>
    8000b19c:	852fe06f          	j	800091ee <tinst_tests_pf+0x131a>
    8000b1a0:	862fe06f          	j	80009202 <tinst_tests_pf+0x132e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b1a4:	701c                	ld	a5,32(s0)
    8000b1a6:	e399                	bnez	a5,8000b1ac <tinst_tests_pf+0x32d8>
    8000b1a8:	8f2fe06f          	j	8000929a <tinst_tests_pf+0x13c6>
    8000b1ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1ae:	0016f713          	andi	a4,a3,1
    8000b1b2:	c319                	beqz	a4,8000b1b8 <tinst_tests_pf+0x32e4>
    8000b1b4:	d9dfe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1bc:	460d                	li	a2,3
    8000b1be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1c4:	00c59763          	bne	a1,a2,8000b1d2 <tinst_tests_pf+0x32fe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1c8:	0026d683          	lhu	a3,2(a3)
    8000b1cc:	0106969b          	slliw	a3,a3,0x10
    8000b1d0:	8f55                	or	a4,a4,a3
    8000b1d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1d6:	068e                	slli	a3,a3,0x3
    8000b1d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1da:	8f75                	and	a4,a4,a3
    8000b1dc:	00e78463          	beq	a5,a4,8000b1e4 <tinst_tests_pf+0x3310>
    8000b1e0:	8a6fe06f          	j	80009286 <tinst_tests_pf+0x13b2>
    8000b1e4:	8b6fe06f          	j	8000929a <tinst_tests_pf+0x13c6>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b1e8:	701c                	ld	a5,32(s0)
    8000b1ea:	e399                	bnez	a5,8000b1f0 <tinst_tests_pf+0x331c>
    8000b1ec:	946fe06f          	j	80009332 <tinst_tests_pf+0x145e>
    8000b1f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1f2:	0016f713          	andi	a4,a3,1
    8000b1f6:	c319                	beqz	a4,8000b1fc <tinst_tests_pf+0x3328>
    8000b1f8:	d59fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b200:	460d                	li	a2,3
    8000b202:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b206:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b208:	00c59763          	bne	a1,a2,8000b216 <tinst_tests_pf+0x3342>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b20c:	0026d683          	lhu	a3,2(a3)
    8000b210:	0106969b          	slliw	a3,a3,0x10
    8000b214:	8f55                	or	a4,a4,a3
    8000b216:	1ffe16b7          	lui	a3,0x1ffe1
    8000b21a:	068e                	slli	a3,a3,0x3
    8000b21c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b21e:	8f75                	and	a4,a4,a3
    8000b220:	00e78463          	beq	a5,a4,8000b228 <tinst_tests_pf+0x3354>
    8000b224:	8fafe06f          	j	8000931e <tinst_tests_pf+0x144a>
    8000b228:	90afe06f          	j	80009332 <tinst_tests_pf+0x145e>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b22c:	701c                	ld	a5,32(s0)
    8000b22e:	e399                	bnez	a5,8000b234 <tinst_tests_pf+0x3360>
    8000b230:	99afe06f          	j	800093ca <tinst_tests_pf+0x14f6>
    8000b234:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b236:	0016f713          	andi	a4,a3,1
    8000b23a:	c319                	beqz	a4,8000b240 <tinst_tests_pf+0x336c>
    8000b23c:	d15fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b240:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b244:	460d                	li	a2,3
    8000b246:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b24a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b24c:	00c59763          	bne	a1,a2,8000b25a <tinst_tests_pf+0x3386>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b250:	0026d683          	lhu	a3,2(a3)
    8000b254:	0106969b          	slliw	a3,a3,0x10
    8000b258:	8f55                	or	a4,a4,a3
    8000b25a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b25e:	068e                	slli	a3,a3,0x3
    8000b260:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b262:	8f75                	and	a4,a4,a3
    8000b264:	00e78463          	beq	a5,a4,8000b26c <tinst_tests_pf+0x3398>
    8000b268:	94efe06f          	j	800093b6 <tinst_tests_pf+0x14e2>
    8000b26c:	95efe06f          	j	800093ca <tinst_tests_pf+0x14f6>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b270:	701c                	ld	a5,32(s0)
    8000b272:	e399                	bnez	a5,8000b278 <tinst_tests_pf+0x33a4>
    8000b274:	9eefe06f          	j	80009462 <tinst_tests_pf+0x158e>
    8000b278:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b27a:	0016f713          	andi	a4,a3,1
    8000b27e:	c319                	beqz	a4,8000b284 <tinst_tests_pf+0x33b0>
    8000b280:	cd1fe06f          	j	80009f50 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b284:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b288:	460d                	li	a2,3
    8000b28a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b28e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b290:	00c59763          	bne	a1,a2,8000b29e <tinst_tests_pf+0x33ca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b294:	0026d683          	lhu	a3,2(a3)
    8000b298:	0106969b          	slliw	a3,a3,0x10
    8000b29c:	8f55                	or	a4,a4,a3
    8000b29e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b2a2:	068e                	slli	a3,a3,0x3
    8000b2a4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b2a6:	8f75                	and	a4,a4,a3
    8000b2a8:	00e78463          	beq	a5,a4,8000b2b0 <tinst_tests_pf+0x33dc>
    8000b2ac:	9a2fe06f          	j	8000944e <tinst_tests_pf+0x157a>
    8000b2b0:	9b2fe06f          	j	80009462 <tinst_tests_pf+0x158e>

000000008000b2b4 <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b2b4:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b2b6:	00020597          	auipc	a1,0x20
    8000b2ba:	6a258593          	addi	a1,a1,1698 # 8002b958 <__func__.0>
    8000b2be:	00022517          	auipc	a0,0x22
    8000b2c2:	0da50513          	addi	a0,a0,218 # 8002d398 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b2c6:	f406                	sd	ra,40(sp)
    8000b2c8:	f022                	sd	s0,32(sp)
    8000b2ca:	ec26                	sd	s1,24(sp)
    8000b2cc:	e84a                	sd	s2,16(sp)
    8000b2ce:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b2d0:	3871f0ef          	jal	8002ae56 <printf>
    8000b2d4:	4529                	li	a0,10
    8000b2d6:	06f1e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8000b2da:	450d                	li	a0,3
    8000b2dc:	c2df50ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000b2e0:	b00f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b2e4:	ee0f50ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000b2e8:	c94f50ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);   
    8000b2ec:	4509                	li	a0,2
    8000b2ee:	c1bf50ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b2f2:	001005b7          	lui	a1,0x100
    8000b2f6:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b2fa:	05b2                	slli	a1,a1,0xc
    8000b2fc:	00028517          	auipc	a0,0x28
    8000b300:	6c450513          	addi	a0,a0,1732 # 800339c0 <__func__.0+0x6908>
    8000b304:	3531f0ef          	jal	8002ae56 <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b308:	b05f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b30c:	001007b7          	lui	a5,0x100
    8000b310:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b314:	07b2                	slli	a5,a5,0xc
    8000b316:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b31a:	00049417          	auipc	s0,0x49
    8000b31e:	cf640413          	addi	s0,s0,-778 # 80054010 <excpt>
    8000b322:	700c                	ld	a1,32(s0)
    8000b324:	00028517          	auipc	a0,0x28
    8000b328:	69c50513          	addi	a0,a0,1692 # 800339c0 <__func__.0+0x6908>
    8000b32c:	32b1f0ef          	jal	8002ae56 <printf>
    printf("%llx\n",excpt.triggered);
    8000b330:	00049597          	auipc	a1,0x49
    8000b334:	ce15c583          	lbu	a1,-799(a1) # 80054011 <excpt+0x1>
    8000b338:	00028517          	auipc	a0,0x28
    8000b33c:	68850513          	addi	a0,a0,1672 # 800339c0 <__func__.0+0x6908>
    8000b340:	3171f0ef          	jal	8002ae56 <printf>
    printf("%llx\n",excpt.cause);
    8000b344:	640c                	ld	a1,8(s0)
    8000b346:	00028517          	auipc	a0,0x28
    8000b34a:	67a50513          	addi	a0,a0,1658 # 800339c0 <__func__.0+0x6908>
    8000b34e:	3091f0ef          	jal	8002ae56 <printf>
    printf("%llx\n",excpt.tval2);
    8000b352:	740c                	ld	a1,40(s0)
    8000b354:	00028517          	auipc	a0,0x28
    8000b358:	66c50513          	addi	a0,a0,1644 # 800339c0 <__func__.0+0x6908>
    8000b35c:	2fb1f0ef          	jal	8002ae56 <printf>
    printf("%llx\n",excpt.tval);
    8000b360:	6c0c                	ld	a1,24(s0)
    8000b362:	00028517          	auipc	a0,0x28
    8000b366:	65e50513          	addi	a0,a0,1630 # 800339c0 <__func__.0+0x6908>
    8000b36a:	2ed1f0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b36e:	08200593          	li	a1,130
    8000b372:	00024617          	auipc	a2,0x24
    8000b376:	27e60613          	addi	a2,a2,638 # 8002f5f0 <__func__.0+0x2538>
    8000b37a:	00022517          	auipc	a0,0x22
    8000b37e:	03650513          	addi	a0,a0,54 # 8002d3b0 <__func__.0+0x2f8>
    8000b382:	2d51f0ef          	jal	8002ae56 <printf>
    8000b386:	00049797          	auipc	a5,0x49
    8000b38a:	c8b7c783          	lbu	a5,-885(a5) # 80054011 <excpt+0x1>
    8000b38e:	00022597          	auipc	a1,0x22
    8000b392:	ffa58593          	addi	a1,a1,-6 # 8002d388 <__func__.0+0x2d0>
    8000b396:	cf89                	beqz	a5,8000b3b0 <tinst_tests_gpf+0xfc>
    8000b398:	6418                	ld	a4,8(s0)
    8000b39a:	47d5                	li	a5,21
    8000b39c:	00022597          	auipc	a1,0x22
    8000b3a0:	fdc58593          	addi	a1,a1,-36 # 8002d378 <__func__.0+0x2c0>
    8000b3a4:	00f70663          	beq	a4,a5,8000b3b0 <tinst_tests_gpf+0xfc>
    8000b3a8:	00022597          	auipc	a1,0x22
    8000b3ac:	fe058593          	addi	a1,a1,-32 # 8002d388 <__func__.0+0x2d0>
    8000b3b0:	00022517          	auipc	a0,0x22
    8000b3b4:	01850513          	addi	a0,a0,24 # 8002d3c8 <__func__.0+0x310>
    8000b3b8:	29f1f0ef          	jal	8002ae56 <printf>
    8000b3bc:	00049797          	auipc	a5,0x49
    8000b3c0:	c557c783          	lbu	a5,-939(a5) # 80054011 <excpt+0x1>
    8000b3c4:	c789                	beqz	a5,8000b3ce <tinst_tests_gpf+0x11a>
    8000b3c6:	6418                	ld	a4,8(s0)
    8000b3c8:	47d5                	li	a5,21
    8000b3ca:	00f70c63          	beq	a4,a5,8000b3e2 <tinst_tests_gpf+0x12e>
    8000b3ce:	00022517          	auipc	a0,0x22
    8000b3d2:	00250513          	addi	a0,a0,2 # 8002d3d0 <__func__.0+0x318>
    8000b3d6:	2811f0ef          	jal	8002ae56 <printf>
    8000b3da:	02900513          	li	a0,41
    8000b3de:	7661e0ef          	jal	80029b44 <putchar>
    8000b3e2:	4529                	li	a0,10
    8000b3e4:	7601e0ef          	jal	80029b44 <putchar>
    8000b3e8:	00049797          	auipc	a5,0x49
    8000b3ec:	c297c783          	lbu	a5,-983(a5) # 80054011 <excpt+0x1>
    8000b3f0:	4481                	li	s1,0
    8000b3f2:	c789                	beqz	a5,8000b3fc <tinst_tests_gpf+0x148>
    8000b3f4:	6404                	ld	s1,8(s0)
    8000b3f6:	14ad                	addi	s1,s1,-21
    8000b3f8:	0014b493          	seqz	s1,s1
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF 
    );

    TEST_SETUP_EXCEPT();
    8000b3fc:	a11f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b400:	001007b7          	lui	a5,0x100
    8000b404:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b408:	07b2                	slli	a5,a5,0xc
    8000b40a:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b40e:	00024617          	auipc	a2,0x24
    8000b412:	22260613          	addi	a2,a2,546 # 8002f630 <__func__.0+0x2578>
    8000b416:	08200593          	li	a1,130
    8000b41a:	00022517          	auipc	a0,0x22
    8000b41e:	f9650513          	addi	a0,a0,-106 # 8002d3b0 <__func__.0+0x2f8>
    8000b422:	2351f0ef          	jal	8002ae56 <printf>
    8000b426:	00049797          	auipc	a5,0x49
    8000b42a:	beb7c783          	lbu	a5,-1045(a5) # 80054011 <excpt+0x1>
    8000b42e:	e399                	bnez	a5,8000b434 <tinst_tests_gpf+0x180>
    8000b430:	59a0106f          	j	8000c9ca <tinst_tests_gpf+0x1716>
    8000b434:	6418                	ld	a4,8(s0)
    8000b436:	47d5                	li	a5,21
    8000b438:	00022597          	auipc	a1,0x22
    8000b43c:	f5058593          	addi	a1,a1,-176 # 8002d388 <__func__.0+0x2d0>
    8000b440:	00f71463          	bne	a4,a5,8000b448 <tinst_tests_gpf+0x194>
    8000b444:	53e0106f          	j	8000c982 <tinst_tests_gpf+0x16ce>
    8000b448:	00022517          	auipc	a0,0x22
    8000b44c:	f8050513          	addi	a0,a0,-128 # 8002d3c8 <__func__.0+0x310>
    8000b450:	2071f0ef          	jal	8002ae56 <printf>
    8000b454:	00049797          	auipc	a5,0x49
    8000b458:	bbd7c783          	lbu	a5,-1091(a5) # 80054011 <excpt+0x1>
    8000b45c:	c799                	beqz	a5,8000b46a <tinst_tests_gpf+0x1b6>
    8000b45e:	6418                	ld	a4,8(s0)
    8000b460:	47d5                	li	a5,21
    8000b462:	00f71463          	bne	a4,a5,8000b46a <tinst_tests_gpf+0x1b6>
    8000b466:	5d00106f          	j	8000ca36 <tinst_tests_gpf+0x1782>
    8000b46a:	00022517          	auipc	a0,0x22
    8000b46e:	f6650513          	addi	a0,a0,-154 # 8002d3d0 <__func__.0+0x318>
    8000b472:	1e51f0ef          	jal	8002ae56 <printf>
    8000b476:	02900513          	li	a0,41
    8000b47a:	6ca1e0ef          	jal	80029b44 <putchar>
    8000b47e:	4529                	li	a0,10
    8000b480:	6c41e0ef          	jal	80029b44 <putchar>
    8000b484:	cc89                	beqz	s1,8000b49e <tinst_tests_gpf+0x1ea>
    8000b486:	00049797          	auipc	a5,0x49
    8000b48a:	b8b7c783          	lbu	a5,-1141(a5) # 80054011 <excpt+0x1>
    8000b48e:	c799                	beqz	a5,8000b49c <tinst_tests_gpf+0x1e8>
    8000b490:	6418                	ld	a4,8(s0)
    8000b492:	47d5                	li	a5,21
    8000b494:	00f71463          	bne	a4,a5,8000b49c <tinst_tests_gpf+0x1e8>
    8000b498:	71d0106f          	j	8000d3b4 <tinst_tests_gpf+0x2100>
    8000b49c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b49e:	96ff50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000b4a2:	001007b7          	lui	a5,0x100
    8000b4a6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b4aa:	07b2                	slli	a5,a5,0xc
    8000b4ac:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000b4b0:	00024617          	auipc	a2,0x24
    8000b4b4:	1c060613          	addi	a2,a2,448 # 8002f670 <__func__.0+0x25b8>
    8000b4b8:	08200593          	li	a1,130
    8000b4bc:	00022517          	auipc	a0,0x22
    8000b4c0:	ef450513          	addi	a0,a0,-268 # 8002d3b0 <__func__.0+0x2f8>
    8000b4c4:	1931f0ef          	jal	8002ae56 <printf>
    8000b4c8:	00049797          	auipc	a5,0x49
    8000b4cc:	b497c783          	lbu	a5,-1207(a5) # 80054011 <excpt+0x1>
    8000b4d0:	c399                	beqz	a5,8000b4d6 <tinst_tests_gpf+0x222>
    8000b4d2:	5040106f          	j	8000c9d6 <tinst_tests_gpf+0x1722>
    8000b4d6:	00022597          	auipc	a1,0x22
    8000b4da:	eb258593          	addi	a1,a1,-334 # 8002d388 <__func__.0+0x2d0>
    8000b4de:	00022517          	auipc	a0,0x22
    8000b4e2:	eea50513          	addi	a0,a0,-278 # 8002d3c8 <__func__.0+0x310>
    8000b4e6:	1711f0ef          	jal	8002ae56 <printf>
    8000b4ea:	00049797          	auipc	a5,0x49
    8000b4ee:	b277c783          	lbu	a5,-1241(a5) # 80054011 <excpt+0x1>
    8000b4f2:	c799                	beqz	a5,8000b500 <tinst_tests_gpf+0x24c>
    8000b4f4:	6418                	ld	a4,8(s0)
    8000b4f6:	47d5                	li	a5,21
    8000b4f8:	00f71463          	bne	a4,a5,8000b500 <tinst_tests_gpf+0x24c>
    8000b4fc:	1970106f          	j	8000ce92 <tinst_tests_gpf+0x1bde>
    8000b500:	00022517          	auipc	a0,0x22
    8000b504:	ed050513          	addi	a0,a0,-304 # 8002d3d0 <__func__.0+0x318>
    8000b508:	14f1f0ef          	jal	8002ae56 <printf>
    8000b50c:	02900513          	li	a0,41
    8000b510:	6341e0ef          	jal	80029b44 <putchar>
    8000b514:	4529                	li	a0,10
    8000b516:	62e1e0ef          	jal	80029b44 <putchar>
    8000b51a:	cc89                	beqz	s1,8000b534 <tinst_tests_gpf+0x280>
    8000b51c:	00049797          	auipc	a5,0x49
    8000b520:	af57c783          	lbu	a5,-1291(a5) # 80054011 <excpt+0x1>
    8000b524:	c799                	beqz	a5,8000b532 <tinst_tests_gpf+0x27e>
    8000b526:	6418                	ld	a4,8(s0)
    8000b528:	47d5                	li	a5,21
    8000b52a:	00f71463          	bne	a4,a5,8000b532 <tinst_tests_gpf+0x27e>
    8000b52e:	6c10106f          	j	8000d3ee <tinst_tests_gpf+0x213a>
    8000b532:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b534:	8d9f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000b538:	001007b7          	lui	a5,0x100
    8000b53c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b540:	07b2                	slli	a5,a5,0xc
    8000b542:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000b546:	00024617          	auipc	a2,0x24
    8000b54a:	16a60613          	addi	a2,a2,362 # 8002f6b0 <__func__.0+0x25f8>
    8000b54e:	08200593          	li	a1,130
    8000b552:	00022517          	auipc	a0,0x22
    8000b556:	e5e50513          	addi	a0,a0,-418 # 8002d3b0 <__func__.0+0x2f8>
    8000b55a:	0fd1f0ef          	jal	8002ae56 <printf>
    8000b55e:	00049797          	auipc	a5,0x49
    8000b562:	ab37c783          	lbu	a5,-1357(a5) # 80054011 <excpt+0x1>
    8000b566:	e399                	bnez	a5,8000b56c <tinst_tests_gpf+0x2b8>
    8000b568:	5520106f          	j	8000caba <tinst_tests_gpf+0x1806>
    8000b56c:	6418                	ld	a4,8(s0)
    8000b56e:	47d5                	li	a5,21
    8000b570:	00022597          	auipc	a1,0x22
    8000b574:	e1858593          	addi	a1,a1,-488 # 8002d388 <__func__.0+0x2d0>
    8000b578:	00f71463          	bne	a4,a5,8000b580 <tinst_tests_gpf+0x2cc>
    8000b57c:	4f60106f          	j	8000ca72 <tinst_tests_gpf+0x17be>
    8000b580:	00022517          	auipc	a0,0x22
    8000b584:	e4850513          	addi	a0,a0,-440 # 8002d3c8 <__func__.0+0x310>
    8000b588:	0cf1f0ef          	jal	8002ae56 <printf>
    8000b58c:	00049797          	auipc	a5,0x49
    8000b590:	a857c783          	lbu	a5,-1403(a5) # 80054011 <excpt+0x1>
    8000b594:	c799                	beqz	a5,8000b5a2 <tinst_tests_gpf+0x2ee>
    8000b596:	6418                	ld	a4,8(s0)
    8000b598:	47d5                	li	a5,21
    8000b59a:	00f71463          	bne	a4,a5,8000b5a2 <tinst_tests_gpf+0x2ee>
    8000b59e:	1310106f          	j	8000cece <tinst_tests_gpf+0x1c1a>
    8000b5a2:	00022517          	auipc	a0,0x22
    8000b5a6:	e2e50513          	addi	a0,a0,-466 # 8002d3d0 <__func__.0+0x318>
    8000b5aa:	0ad1f0ef          	jal	8002ae56 <printf>
    8000b5ae:	02900513          	li	a0,41
    8000b5b2:	5921e0ef          	jal	80029b44 <putchar>
    8000b5b6:	4529                	li	a0,10
    8000b5b8:	58c1e0ef          	jal	80029b44 <putchar>
    8000b5bc:	cc89                	beqz	s1,8000b5d6 <tinst_tests_gpf+0x322>
    8000b5be:	00049797          	auipc	a5,0x49
    8000b5c2:	a537c783          	lbu	a5,-1453(a5) # 80054011 <excpt+0x1>
    8000b5c6:	c799                	beqz	a5,8000b5d4 <tinst_tests_gpf+0x320>
    8000b5c8:	6418                	ld	a4,8(s0)
    8000b5ca:	47d5                	li	a5,21
    8000b5cc:	00f71463          	bne	a4,a5,8000b5d4 <tinst_tests_gpf+0x320>
    8000b5d0:	6590106f          	j	8000d428 <tinst_tests_gpf+0x2174>
    8000b5d4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b5d6:	837f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000b5da:	001007b7          	lui	a5,0x100
    8000b5de:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b5e2:	07b2                	slli	a5,a5,0xc
    8000b5e4:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000b5e8:	00024617          	auipc	a2,0x24
    8000b5ec:	10860613          	addi	a2,a2,264 # 8002f6f0 <__func__.0+0x2638>
    8000b5f0:	08200593          	li	a1,130
    8000b5f4:	00022517          	auipc	a0,0x22
    8000b5f8:	dbc50513          	addi	a0,a0,-580 # 8002d3b0 <__func__.0+0x2f8>
    8000b5fc:	05b1f0ef          	jal	8002ae56 <printf>
    8000b600:	00049797          	auipc	a5,0x49
    8000b604:	a117c783          	lbu	a5,-1519(a5) # 80054011 <excpt+0x1>
    8000b608:	e399                	bnez	a5,8000b60e <tinst_tests_gpf+0x35a>
    8000b60a:	5040106f          	j	8000cb0e <tinst_tests_gpf+0x185a>
    8000b60e:	6418                	ld	a4,8(s0)
    8000b610:	47d5                	li	a5,21
    8000b612:	00022597          	auipc	a1,0x22
    8000b616:	d7658593          	addi	a1,a1,-650 # 8002d388 <__func__.0+0x2d0>
    8000b61a:	00f71463          	bne	a4,a5,8000b622 <tinst_tests_gpf+0x36e>
    8000b61e:	4a80106f          	j	8000cac6 <tinst_tests_gpf+0x1812>
    8000b622:	00022517          	auipc	a0,0x22
    8000b626:	da650513          	addi	a0,a0,-602 # 8002d3c8 <__func__.0+0x310>
    8000b62a:	02d1f0ef          	jal	8002ae56 <printf>
    8000b62e:	00049797          	auipc	a5,0x49
    8000b632:	9e37c783          	lbu	a5,-1565(a5) # 80054011 <excpt+0x1>
    8000b636:	c799                	beqz	a5,8000b644 <tinst_tests_gpf+0x390>
    8000b638:	6418                	ld	a4,8(s0)
    8000b63a:	47d5                	li	a5,21
    8000b63c:	00f71463          	bne	a4,a5,8000b644 <tinst_tests_gpf+0x390>
    8000b640:	65d0106f          	j	8000d49c <tinst_tests_gpf+0x21e8>
    8000b644:	00022517          	auipc	a0,0x22
    8000b648:	d8c50513          	addi	a0,a0,-628 # 8002d3d0 <__func__.0+0x318>
    8000b64c:	00b1f0ef          	jal	8002ae56 <printf>
    8000b650:	02900513          	li	a0,41
    8000b654:	4f01e0ef          	jal	80029b44 <putchar>
    8000b658:	4529                	li	a0,10
    8000b65a:	4ea1e0ef          	jal	80029b44 <putchar>
    8000b65e:	cc89                	beqz	s1,8000b678 <tinst_tests_gpf+0x3c4>
    8000b660:	00049797          	auipc	a5,0x49
    8000b664:	9b17c783          	lbu	a5,-1615(a5) # 80054011 <excpt+0x1>
    8000b668:	c799                	beqz	a5,8000b676 <tinst_tests_gpf+0x3c2>
    8000b66a:	6418                	ld	a4,8(s0)
    8000b66c:	47d5                	li	a5,21
    8000b66e:	00f71463          	bne	a4,a5,8000b676 <tinst_tests_gpf+0x3c2>
    8000b672:	5f10106f          	j	8000d462 <tinst_tests_gpf+0x21ae>
    8000b676:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b678:	f94f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000b67c:	001007b7          	lui	a5,0x100
    8000b680:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b684:	07b2                	slli	a5,a5,0xc
    8000b686:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000b68a:	00024617          	auipc	a2,0x24
    8000b68e:	0a660613          	addi	a2,a2,166 # 8002f730 <__func__.0+0x2678>
    8000b692:	08200593          	li	a1,130
    8000b696:	00022517          	auipc	a0,0x22
    8000b69a:	d1a50513          	addi	a0,a0,-742 # 8002d3b0 <__func__.0+0x2f8>
    8000b69e:	7b81f0ef          	jal	8002ae56 <printf>
    8000b6a2:	00049797          	auipc	a5,0x49
    8000b6a6:	96f7c783          	lbu	a5,-1681(a5) # 80054011 <excpt+0x1>
    8000b6aa:	e399                	bnez	a5,8000b6b0 <tinst_tests_gpf+0x3fc>
    8000b6ac:	4b60106f          	j	8000cb62 <tinst_tests_gpf+0x18ae>
    8000b6b0:	6418                	ld	a4,8(s0)
    8000b6b2:	47d5                	li	a5,21
    8000b6b4:	00022597          	auipc	a1,0x22
    8000b6b8:	cd458593          	addi	a1,a1,-812 # 8002d388 <__func__.0+0x2d0>
    8000b6bc:	00f71463          	bne	a4,a5,8000b6c4 <tinst_tests_gpf+0x410>
    8000b6c0:	45a0106f          	j	8000cb1a <tinst_tests_gpf+0x1866>
    8000b6c4:	00022517          	auipc	a0,0x22
    8000b6c8:	d0450513          	addi	a0,a0,-764 # 8002d3c8 <__func__.0+0x310>
    8000b6cc:	78a1f0ef          	jal	8002ae56 <printf>
    8000b6d0:	00049797          	auipc	a5,0x49
    8000b6d4:	9417c783          	lbu	a5,-1727(a5) # 80054011 <excpt+0x1>
    8000b6d8:	c799                	beqz	a5,8000b6e6 <tinst_tests_gpf+0x432>
    8000b6da:	6418                	ld	a4,8(s0)
    8000b6dc:	47d5                	li	a5,21
    8000b6de:	00f71463          	bne	a4,a5,8000b6e6 <tinst_tests_gpf+0x432>
    8000b6e2:	65b0106f          	j	8000d53c <tinst_tests_gpf+0x2288>
    8000b6e6:	00022517          	auipc	a0,0x22
    8000b6ea:	cea50513          	addi	a0,a0,-790 # 8002d3d0 <__func__.0+0x318>
    8000b6ee:	7681f0ef          	jal	8002ae56 <printf>
    8000b6f2:	02900513          	li	a0,41
    8000b6f6:	44e1e0ef          	jal	80029b44 <putchar>
    8000b6fa:	4529                	li	a0,10
    8000b6fc:	4481e0ef          	jal	80029b44 <putchar>
    8000b700:	c889                	beqz	s1,8000b712 <tinst_tests_gpf+0x45e>
    8000b702:	00049797          	auipc	a5,0x49
    8000b706:	90f7c783          	lbu	a5,-1777(a5) # 80054011 <excpt+0x1>
    8000b70a:	c399                	beqz	a5,8000b710 <tinst_tests_gpf+0x45c>
    8000b70c:	7fe0106f          	j	8000cf0a <tinst_tests_gpf+0x1c56>
    8000b710:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b712:	efaf50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000b716:	001007b7          	lui	a5,0x100
    8000b71a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b71e:	07b2                	slli	a5,a5,0xc
    8000b720:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000b724:	00024617          	auipc	a2,0x24
    8000b728:	04c60613          	addi	a2,a2,76 # 8002f770 <__func__.0+0x26b8>
    8000b72c:	08200593          	li	a1,130
    8000b730:	00022517          	auipc	a0,0x22
    8000b734:	c8050513          	addi	a0,a0,-896 # 8002d3b0 <__func__.0+0x2f8>
    8000b738:	71e1f0ef          	jal	8002ae56 <printf>
    8000b73c:	00049797          	auipc	a5,0x49
    8000b740:	8d57c783          	lbu	a5,-1835(a5) # 80054011 <excpt+0x1>
    8000b744:	e399                	bnez	a5,8000b74a <tinst_tests_gpf+0x496>
    8000b746:	4700106f          	j	8000cbb6 <tinst_tests_gpf+0x1902>
    8000b74a:	6418                	ld	a4,8(s0)
    8000b74c:	47d5                	li	a5,21
    8000b74e:	00022597          	auipc	a1,0x22
    8000b752:	c3a58593          	addi	a1,a1,-966 # 8002d388 <__func__.0+0x2d0>
    8000b756:	00f71463          	bne	a4,a5,8000b75e <tinst_tests_gpf+0x4aa>
    8000b75a:	4140106f          	j	8000cb6e <tinst_tests_gpf+0x18ba>
    8000b75e:	00022517          	auipc	a0,0x22
    8000b762:	c6a50513          	addi	a0,a0,-918 # 8002d3c8 <__func__.0+0x310>
    8000b766:	6f01f0ef          	jal	8002ae56 <printf>
    8000b76a:	00049797          	auipc	a5,0x49
    8000b76e:	8a77c783          	lbu	a5,-1881(a5) # 80054011 <excpt+0x1>
    8000b772:	c799                	beqz	a5,8000b780 <tinst_tests_gpf+0x4cc>
    8000b774:	6418                	ld	a4,8(s0)
    8000b776:	47d5                	li	a5,21
    8000b778:	00f71463          	bne	a4,a5,8000b780 <tinst_tests_gpf+0x4cc>
    8000b77c:	6530106f          	j	8000d5ce <tinst_tests_gpf+0x231a>
    8000b780:	00022517          	auipc	a0,0x22
    8000b784:	c5050513          	addi	a0,a0,-944 # 8002d3d0 <__func__.0+0x318>
    8000b788:	6ce1f0ef          	jal	8002ae56 <printf>
    8000b78c:	02900513          	li	a0,41
    8000b790:	3b41e0ef          	jal	80029b44 <putchar>
    8000b794:	4529                	li	a0,10
    8000b796:	3ae1e0ef          	jal	80029b44 <putchar>
    8000b79a:	c889                	beqz	s1,8000b7ac <tinst_tests_gpf+0x4f8>
    8000b79c:	00049797          	auipc	a5,0x49
    8000b7a0:	8757c783          	lbu	a5,-1931(a5) # 80054011 <excpt+0x1>
    8000b7a4:	c399                	beqz	a5,8000b7aa <tinst_tests_gpf+0x4f6>
    8000b7a6:	0130106f          	j	8000cfb8 <tinst_tests_gpf+0x1d04>
    8000b7aa:	4481                	li	s1,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000b7ac:	e60f50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000b7b0:	001007b7          	lui	a5,0x100
    8000b7b4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b7b8:	07b2                	slli	a5,a5,0xc
    8000b7ba:	573d                	li	a4,-17
    8000b7bc:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000b7c0:	00024617          	auipc	a2,0x24
    8000b7c4:	ff060613          	addi	a2,a2,-16 # 8002f7b0 <__func__.0+0x26f8>
    8000b7c8:	08200593          	li	a1,130
    8000b7cc:	00022517          	auipc	a0,0x22
    8000b7d0:	be450513          	addi	a0,a0,-1052 # 8002d3b0 <__func__.0+0x2f8>
    8000b7d4:	6821f0ef          	jal	8002ae56 <printf>
    8000b7d8:	00049797          	auipc	a5,0x49
    8000b7dc:	8397c783          	lbu	a5,-1991(a5) # 80054011 <excpt+0x1>
    8000b7e0:	e399                	bnez	a5,8000b7e6 <tinst_tests_gpf+0x532>
    8000b7e2:	42e0106f          	j	8000cc10 <tinst_tests_gpf+0x195c>
    8000b7e6:	6418                	ld	a4,8(s0)
    8000b7e8:	47dd                	li	a5,23
    8000b7ea:	00022597          	auipc	a1,0x22
    8000b7ee:	b9e58593          	addi	a1,a1,-1122 # 8002d388 <__func__.0+0x2d0>
    8000b7f2:	00f71463          	bne	a4,a5,8000b7fa <tinst_tests_gpf+0x546>
    8000b7f6:	3cc0106f          	j	8000cbc2 <tinst_tests_gpf+0x190e>
    8000b7fa:	00022517          	auipc	a0,0x22
    8000b7fe:	bce50513          	addi	a0,a0,-1074 # 8002d3c8 <__func__.0+0x310>
    8000b802:	6541f0ef          	jal	8002ae56 <printf>
    8000b806:	00049797          	auipc	a5,0x49
    8000b80a:	80b7c783          	lbu	a5,-2037(a5) # 80054011 <excpt+0x1>
    8000b80e:	c799                	beqz	a5,8000b81c <tinst_tests_gpf+0x568>
    8000b810:	6418                	ld	a4,8(s0)
    8000b812:	47dd                	li	a5,23
    8000b814:	00f71463          	bne	a4,a5,8000b81c <tinst_tests_gpf+0x568>
    8000b818:	64d0106f          	j	8000d664 <tinst_tests_gpf+0x23b0>
    8000b81c:	00022517          	auipc	a0,0x22
    8000b820:	bb450513          	addi	a0,a0,-1100 # 8002d3d0 <__func__.0+0x318>
    8000b824:	6321f0ef          	jal	8002ae56 <printf>
    8000b828:	02900513          	li	a0,41
    8000b82c:	3181e0ef          	jal	80029b44 <putchar>
    8000b830:	4529                	li	a0,10
    8000b832:	3121e0ef          	jal	80029b44 <putchar>
    8000b836:	c889                	beqz	s1,8000b848 <tinst_tests_gpf+0x594>
    8000b838:	00048797          	auipc	a5,0x48
    8000b83c:	7d97c783          	lbu	a5,2009(a5) # 80054011 <excpt+0x1>
    8000b840:	c399                	beqz	a5,8000b846 <tinst_tests_gpf+0x592>
    8000b842:	0250106f          	j	8000d066 <tinst_tests_gpf+0x1db2>
    8000b846:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b848:	dc4f50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000b84c:	001007b7          	lui	a5,0x100
    8000b850:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b854:	7771                	lui	a4,0xffffc
    8000b856:	07b2                	slli	a5,a5,0xc
    8000b858:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000b85c:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000b860:	00024617          	auipc	a2,0x24
    8000b864:	f9060613          	addi	a2,a2,-112 # 8002f7f0 <__func__.0+0x2738>
    8000b868:	08200593          	li	a1,130
    8000b86c:	00022517          	auipc	a0,0x22
    8000b870:	b4450513          	addi	a0,a0,-1212 # 8002d3b0 <__func__.0+0x2f8>
    8000b874:	5e21f0ef          	jal	8002ae56 <printf>
    8000b878:	00048797          	auipc	a5,0x48
    8000b87c:	7997c783          	lbu	a5,1945(a5) # 80054011 <excpt+0x1>
    8000b880:	e399                	bnez	a5,8000b886 <tinst_tests_gpf+0x5d2>
    8000b882:	3e80106f          	j	8000cc6a <tinst_tests_gpf+0x19b6>
    8000b886:	6418                	ld	a4,8(s0)
    8000b888:	47dd                	li	a5,23
    8000b88a:	00022597          	auipc	a1,0x22
    8000b88e:	afe58593          	addi	a1,a1,-1282 # 8002d388 <__func__.0+0x2d0>
    8000b892:	00f71463          	bne	a4,a5,8000b89a <tinst_tests_gpf+0x5e6>
    8000b896:	3860106f          	j	8000cc1c <tinst_tests_gpf+0x1968>
    8000b89a:	00022517          	auipc	a0,0x22
    8000b89e:	b2e50513          	addi	a0,a0,-1234 # 8002d3c8 <__func__.0+0x310>
    8000b8a2:	5b41f0ef          	jal	8002ae56 <printf>
    8000b8a6:	00048797          	auipc	a5,0x48
    8000b8aa:	76b7c783          	lbu	a5,1899(a5) # 80054011 <excpt+0x1>
    8000b8ae:	c799                	beqz	a5,8000b8bc <tinst_tests_gpf+0x608>
    8000b8b0:	6418                	ld	a4,8(s0)
    8000b8b2:	47dd                	li	a5,23
    8000b8b4:	00f71463          	bne	a4,a5,8000b8bc <tinst_tests_gpf+0x608>
    8000b8b8:	6490106f          	j	8000d700 <tinst_tests_gpf+0x244c>
    8000b8bc:	00022517          	auipc	a0,0x22
    8000b8c0:	b1450513          	addi	a0,a0,-1260 # 8002d3d0 <__func__.0+0x318>
    8000b8c4:	5921f0ef          	jal	8002ae56 <printf>
    8000b8c8:	02900513          	li	a0,41
    8000b8cc:	2781e0ef          	jal	80029b44 <putchar>
    8000b8d0:	4529                	li	a0,10
    8000b8d2:	2721e0ef          	jal	80029b44 <putchar>
    8000b8d6:	c889                	beqz	s1,8000b8e8 <tinst_tests_gpf+0x634>
    8000b8d8:	00048797          	auipc	a5,0x48
    8000b8dc:	7397c783          	lbu	a5,1849(a5) # 80054011 <excpt+0x1>
    8000b8e0:	c399                	beqz	a5,8000b8e6 <tinst_tests_gpf+0x632>
    8000b8e2:	7d20106f          	j	8000d0b4 <tinst_tests_gpf+0x1e00>
    8000b8e6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b8e8:	d24f50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000b8ec:	001007b7          	lui	a5,0x100
    8000b8f0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b8f4:	deadc737          	lui	a4,0xdeadc
    8000b8f8:	07b2                	slli	a5,a5,0xc
    8000b8fa:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000b8fe:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000b902:	00024617          	auipc	a2,0x24
    8000b906:	f2e60613          	addi	a2,a2,-210 # 8002f830 <__func__.0+0x2778>
    8000b90a:	08200593          	li	a1,130
    8000b90e:	00022517          	auipc	a0,0x22
    8000b912:	aa250513          	addi	a0,a0,-1374 # 8002d3b0 <__func__.0+0x2f8>
    8000b916:	5401f0ef          	jal	8002ae56 <printf>
    8000b91a:	00048797          	auipc	a5,0x48
    8000b91e:	6f77c783          	lbu	a5,1783(a5) # 80054011 <excpt+0x1>
    8000b922:	e399                	bnez	a5,8000b928 <tinst_tests_gpf+0x674>
    8000b924:	3a00106f          	j	8000ccc4 <tinst_tests_gpf+0x1a10>
    8000b928:	6418                	ld	a4,8(s0)
    8000b92a:	47dd                	li	a5,23
    8000b92c:	00022597          	auipc	a1,0x22
    8000b930:	a5c58593          	addi	a1,a1,-1444 # 8002d388 <__func__.0+0x2d0>
    8000b934:	00f71463          	bne	a4,a5,8000b93c <tinst_tests_gpf+0x688>
    8000b938:	33e0106f          	j	8000cc76 <tinst_tests_gpf+0x19c2>
    8000b93c:	00022517          	auipc	a0,0x22
    8000b940:	a8c50513          	addi	a0,a0,-1396 # 8002d3c8 <__func__.0+0x310>
    8000b944:	5121f0ef          	jal	8002ae56 <printf>
    8000b948:	00048797          	auipc	a5,0x48
    8000b94c:	6c97c783          	lbu	a5,1737(a5) # 80054011 <excpt+0x1>
    8000b950:	c799                	beqz	a5,8000b95e <tinst_tests_gpf+0x6aa>
    8000b952:	6418                	ld	a4,8(s0)
    8000b954:	47dd                	li	a5,23
    8000b956:	00f71463          	bne	a4,a5,8000b95e <tinst_tests_gpf+0x6aa>
    8000b95a:	6430106f          	j	8000d79c <tinst_tests_gpf+0x24e8>
    8000b95e:	00022517          	auipc	a0,0x22
    8000b962:	a7250513          	addi	a0,a0,-1422 # 8002d3d0 <__func__.0+0x318>
    8000b966:	4f01f0ef          	jal	8002ae56 <printf>
    8000b96a:	02900513          	li	a0,41
    8000b96e:	1d61e0ef          	jal	80029b44 <putchar>
    8000b972:	4529                	li	a0,10
    8000b974:	1d01e0ef          	jal	80029b44 <putchar>
    8000b978:	c889                	beqz	s1,8000b98a <tinst_tests_gpf+0x6d6>
    8000b97a:	00048797          	auipc	a5,0x48
    8000b97e:	6977c783          	lbu	a5,1687(a5) # 80054011 <excpt+0x1>
    8000b982:	c399                	beqz	a5,8000b988 <tinst_tests_gpf+0x6d4>
    8000b984:	77e0106f          	j	8000d102 <tinst_tests_gpf+0x1e4e>
    8000b988:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b98a:	c82f50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000b98e:	37ab77b7          	lui	a5,0x37ab7
    8000b992:	00100737          	lui	a4,0x100
    8000b996:	078a                	slli	a5,a5,0x2
    8000b998:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000b99c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000b9a0:	0732                	slli	a4,a4,0xc
    8000b9a2:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000b9a6:	00024617          	auipc	a2,0x24
    8000b9aa:	eca60613          	addi	a2,a2,-310 # 8002f870 <__func__.0+0x27b8>
    8000b9ae:	08200593          	li	a1,130
    8000b9b2:	00022517          	auipc	a0,0x22
    8000b9b6:	9fe50513          	addi	a0,a0,-1538 # 8002d3b0 <__func__.0+0x2f8>
    8000b9ba:	49c1f0ef          	jal	8002ae56 <printf>
    8000b9be:	00048797          	auipc	a5,0x48
    8000b9c2:	6537c783          	lbu	a5,1619(a5) # 80054011 <excpt+0x1>
    8000b9c6:	e399                	bnez	a5,8000b9cc <tinst_tests_gpf+0x718>
    8000b9c8:	3560106f          	j	8000cd1e <tinst_tests_gpf+0x1a6a>
    8000b9cc:	6418                	ld	a4,8(s0)
    8000b9ce:	47dd                	li	a5,23
    8000b9d0:	00022597          	auipc	a1,0x22
    8000b9d4:	9b858593          	addi	a1,a1,-1608 # 8002d388 <__func__.0+0x2d0>
    8000b9d8:	00f71463          	bne	a4,a5,8000b9e0 <tinst_tests_gpf+0x72c>
    8000b9dc:	2f40106f          	j	8000ccd0 <tinst_tests_gpf+0x1a1c>
    8000b9e0:	00022517          	auipc	a0,0x22
    8000b9e4:	9e850513          	addi	a0,a0,-1560 # 8002d3c8 <__func__.0+0x310>
    8000b9e8:	46e1f0ef          	jal	8002ae56 <printf>
    8000b9ec:	00048797          	auipc	a5,0x48
    8000b9f0:	6257c783          	lbu	a5,1573(a5) # 80054011 <excpt+0x1>
    8000b9f4:	c799                	beqz	a5,8000ba02 <tinst_tests_gpf+0x74e>
    8000b9f6:	6418                	ld	a4,8(s0)
    8000b9f8:	47dd                	li	a5,23
    8000b9fa:	00f71463          	bne	a4,a5,8000ba02 <tinst_tests_gpf+0x74e>
    8000b9fe:	63b0106f          	j	8000d838 <tinst_tests_gpf+0x2584>
    8000ba02:	00022517          	auipc	a0,0x22
    8000ba06:	9ce50513          	addi	a0,a0,-1586 # 8002d3d0 <__func__.0+0x318>
    8000ba0a:	44c1f0ef          	jal	8002ae56 <printf>
    8000ba0e:	02900513          	li	a0,41
    8000ba12:	1321e0ef          	jal	80029b44 <putchar>
    8000ba16:	4529                	li	a0,10
    8000ba18:	12c1e0ef          	jal	80029b44 <putchar>
    8000ba1c:	c889                	beqz	s1,8000ba2e <tinst_tests_gpf+0x77a>
    8000ba1e:	00048797          	auipc	a5,0x48
    8000ba22:	5f37c783          	lbu	a5,1523(a5) # 80054011 <excpt+0x1>
    8000ba26:	c399                	beqz	a5,8000ba2c <tinst_tests_gpf+0x778>
    8000ba28:	7280106f          	j	8000d150 <tinst_tests_gpf+0x1e9c>
    8000ba2c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000ba2e:	bdef50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000ba32:	00100537          	lui	a0,0x100
    8000ba36:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000ba3a:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000ba3c:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000ba3e:	00024617          	auipc	a2,0x24
    8000ba42:	e7260613          	addi	a2,a2,-398 # 8002f8b0 <__func__.0+0x27f8>
    8000ba46:	08200593          	li	a1,130
    8000ba4a:	00022517          	auipc	a0,0x22
    8000ba4e:	96650513          	addi	a0,a0,-1690 # 8002d3b0 <__func__.0+0x2f8>
    8000ba52:	4041f0ef          	jal	8002ae56 <printf>
    8000ba56:	00048797          	auipc	a5,0x48
    8000ba5a:	5bb7c783          	lbu	a5,1467(a5) # 80054011 <excpt+0x1>
    8000ba5e:	c799                	beqz	a5,8000ba6c <tinst_tests_gpf+0x7b8>
    8000ba60:	6418                	ld	a4,8(s0)
    8000ba62:	47d5                	li	a5,21
    8000ba64:	00f71463          	bne	a4,a5,8000ba6c <tinst_tests_gpf+0x7b8>
    8000ba68:	0370106f          	j	8000d29e <tinst_tests_gpf+0x1fea>
    8000ba6c:	00022597          	auipc	a1,0x22
    8000ba70:	91c58593          	addi	a1,a1,-1764 # 8002d388 <__func__.0+0x2d0>
    8000ba74:	00022517          	auipc	a0,0x22
    8000ba78:	95450513          	addi	a0,a0,-1708 # 8002d3c8 <__func__.0+0x310>
    8000ba7c:	3da1f0ef          	jal	8002ae56 <printf>
    8000ba80:	00048797          	auipc	a5,0x48
    8000ba84:	5917c783          	lbu	a5,1425(a5) # 80054011 <excpt+0x1>
    8000ba88:	c799                	beqz	a5,8000ba96 <tinst_tests_gpf+0x7e2>
    8000ba8a:	6418                	ld	a4,8(s0)
    8000ba8c:	47d5                	li	a5,21
    8000ba8e:	00f71463          	bne	a4,a5,8000ba96 <tinst_tests_gpf+0x7e2>
    8000ba92:	6430106f          	j	8000d8d4 <tinst_tests_gpf+0x2620>
    8000ba96:	00022517          	auipc	a0,0x22
    8000ba9a:	93a50513          	addi	a0,a0,-1734 # 8002d3d0 <__func__.0+0x318>
    8000ba9e:	3b81f0ef          	jal	8002ae56 <printf>
    8000baa2:	02900513          	li	a0,41
    8000baa6:	09e1e0ef          	jal	80029b44 <putchar>
    8000baaa:	4529                	li	a0,10
    8000baac:	0981e0ef          	jal	80029b44 <putchar>
    8000bab0:	c889                	beqz	s1,8000bac2 <tinst_tests_gpf+0x80e>
    8000bab2:	00048797          	auipc	a5,0x48
    8000bab6:	55f7c783          	lbu	a5,1375(a5) # 80054011 <excpt+0x1>
    8000baba:	c399                	beqz	a5,8000bac0 <tinst_tests_gpf+0x80c>
    8000babc:	6e20106f          	j	8000d19e <tinst_tests_gpf+0x1eea>
    8000bac0:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bac2:	b4af50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bac6:	00100537          	lui	a0,0x100
    8000baca:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bace:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bad0:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000bad2:	00024617          	auipc	a2,0x24
    8000bad6:	e1e60613          	addi	a2,a2,-482 # 8002f8f0 <__func__.0+0x2838>
    return value;
    8000bada:	892e                	mv	s2,a1
    8000badc:	00022517          	auipc	a0,0x22
    8000bae0:	8d450513          	addi	a0,a0,-1836 # 8002d3b0 <__func__.0+0x2f8>
    8000bae4:	08200593          	li	a1,130
    8000bae8:	36e1f0ef          	jal	8002ae56 <printf>
    8000baec:	00048797          	auipc	a5,0x48
    8000baf0:	5257c783          	lbu	a5,1317(a5) # 80054011 <excpt+0x1>
    8000baf4:	c799                	beqz	a5,8000bb02 <tinst_tests_gpf+0x84e>
    8000baf6:	6418                	ld	a4,8(s0)
    8000baf8:	47d5                	li	a5,21
    8000bafa:	00f71463          	bne	a4,a5,8000bb02 <tinst_tests_gpf+0x84e>
    8000bafe:	7f60106f          	j	8000d2f4 <tinst_tests_gpf+0x2040>
    8000bb02:	00022597          	auipc	a1,0x22
    8000bb06:	88658593          	addi	a1,a1,-1914 # 8002d388 <__func__.0+0x2d0>
    8000bb0a:	00022517          	auipc	a0,0x22
    8000bb0e:	8be50513          	addi	a0,a0,-1858 # 8002d3c8 <__func__.0+0x310>
    8000bb12:	3441f0ef          	jal	8002ae56 <printf>
    8000bb16:	00048797          	auipc	a5,0x48
    8000bb1a:	4fb7c783          	lbu	a5,1275(a5) # 80054011 <excpt+0x1>
    8000bb1e:	c799                	beqz	a5,8000bb2c <tinst_tests_gpf+0x878>
    8000bb20:	6418                	ld	a4,8(s0)
    8000bb22:	47d5                	li	a5,21
    8000bb24:	00f71463          	bne	a4,a5,8000bb2c <tinst_tests_gpf+0x878>
    8000bb28:	6370106f          	j	8000d95e <tinst_tests_gpf+0x26aa>
    8000bb2c:	00022517          	auipc	a0,0x22
    8000bb30:	8a450513          	addi	a0,a0,-1884 # 8002d3d0 <__func__.0+0x318>
    8000bb34:	3221f0ef          	jal	8002ae56 <printf>
    8000bb38:	02900513          	li	a0,41
    8000bb3c:	0081e0ef          	jal	80029b44 <putchar>
    8000bb40:	4529                	li	a0,10
    8000bb42:	0021e0ef          	jal	80029b44 <putchar>
    8000bb46:	c889                	beqz	s1,8000bb58 <tinst_tests_gpf+0x8a4>
    8000bb48:	00048797          	auipc	a5,0x48
    8000bb4c:	4c97c783          	lbu	a5,1225(a5) # 80054011 <excpt+0x1>
    8000bb50:	c399                	beqz	a5,8000bb56 <tinst_tests_gpf+0x8a2>
    8000bb52:	68a0106f          	j	8000d1dc <tinst_tests_gpf+0x1f28>
    8000bb56:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bb58:	ab4f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bb5c:	00100537          	lui	a0,0x100
    8000bb60:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bb64:	0532                	slli	a0,a0,0xc
    register uint64_t _value asm("a1") = value;
    8000bb66:	85ca                	mv	a1,s2
    asm volatile(
    8000bb68:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bb6a:	00024617          	auipc	a2,0x24
    8000bb6e:	d4660613          	addi	a2,a2,-698 # 8002f8b0 <__func__.0+0x27f8>
    8000bb72:	08200593          	li	a1,130
    8000bb76:	00022517          	auipc	a0,0x22
    8000bb7a:	83a50513          	addi	a0,a0,-1990 # 8002d3b0 <__func__.0+0x2f8>
    8000bb7e:	2d81f0ef          	jal	8002ae56 <printf>
    8000bb82:	00048797          	auipc	a5,0x48
    8000bb86:	48f7c783          	lbu	a5,1167(a5) # 80054011 <excpt+0x1>
    8000bb8a:	c799                	beqz	a5,8000bb98 <tinst_tests_gpf+0x8e4>
    8000bb8c:	6418                	ld	a4,8(s0)
    8000bb8e:	47dd                	li	a5,23
    8000bb90:	00f71463          	bne	a4,a5,8000bb98 <tinst_tests_gpf+0x8e4>
    8000bb94:	7b60106f          	j	8000d34a <tinst_tests_gpf+0x2096>
    8000bb98:	00021597          	auipc	a1,0x21
    8000bb9c:	7f058593          	addi	a1,a1,2032 # 8002d388 <__func__.0+0x2d0>
    8000bba0:	00022517          	auipc	a0,0x22
    8000bba4:	82850513          	addi	a0,a0,-2008 # 8002d3c8 <__func__.0+0x310>
    8000bba8:	2ae1f0ef          	jal	8002ae56 <printf>
    8000bbac:	00048797          	auipc	a5,0x48
    8000bbb0:	4657c783          	lbu	a5,1125(a5) # 80054011 <excpt+0x1>
    8000bbb4:	c799                	beqz	a5,8000bbc2 <tinst_tests_gpf+0x90e>
    8000bbb6:	6418                	ld	a4,8(s0)
    8000bbb8:	47dd                	li	a5,23
    8000bbba:	00f71463          	bne	a4,a5,8000bbc2 <tinst_tests_gpf+0x90e>
    8000bbbe:	62b0106f          	j	8000d9e8 <tinst_tests_gpf+0x2734>
    8000bbc2:	00022517          	auipc	a0,0x22
    8000bbc6:	80e50513          	addi	a0,a0,-2034 # 8002d3d0 <__func__.0+0x318>
    8000bbca:	28c1f0ef          	jal	8002ae56 <printf>
    8000bbce:	02900513          	li	a0,41
    8000bbd2:	7731d0ef          	jal	80029b44 <putchar>
    8000bbd6:	4529                	li	a0,10
    8000bbd8:	76d1d0ef          	jal	80029b44 <putchar>
    8000bbdc:	c889                	beqz	s1,8000bbee <tinst_tests_gpf+0x93a>
    8000bbde:	00048797          	auipc	a5,0x48
    8000bbe2:	4337c783          	lbu	a5,1075(a5) # 80054011 <excpt+0x1>
    8000bbe6:	c399                	beqz	a5,8000bbec <tinst_tests_gpf+0x938>
    8000bbe8:	6320106f          	j	8000d21a <tinst_tests_gpf+0x1f66>
    8000bbec:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bbee:	a1ef50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bbf2:	00100537          	lui	a0,0x100
    8000bbf6:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000bbfa:	85ca                	mv	a1,s2
    register uint64_t _addr asm("a0") = addr;
    8000bbfc:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bbfe:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000bc00:	00024617          	auipc	a2,0x24
    8000bc04:	d3060613          	addi	a2,a2,-720 # 8002f930 <__func__.0+0x2878>
    8000bc08:	08200593          	li	a1,130
    8000bc0c:	00021517          	auipc	a0,0x21
    8000bc10:	7a450513          	addi	a0,a0,1956 # 8002d3b0 <__func__.0+0x2f8>
    8000bc14:	2421f0ef          	jal	8002ae56 <printf>
    8000bc18:	00048797          	auipc	a5,0x48
    8000bc1c:	3f97c783          	lbu	a5,1017(a5) # 80054011 <excpt+0x1>
    8000bc20:	c799                	beqz	a5,8000bc2e <tinst_tests_gpf+0x97a>
    8000bc22:	6418                	ld	a4,8(s0)
    8000bc24:	47dd                	li	a5,23
    8000bc26:	00f71463          	bne	a4,a5,8000bc2e <tinst_tests_gpf+0x97a>
    8000bc2a:	7760106f          	j	8000d3a0 <tinst_tests_gpf+0x20ec>
    8000bc2e:	00021597          	auipc	a1,0x21
    8000bc32:	75a58593          	addi	a1,a1,1882 # 8002d388 <__func__.0+0x2d0>
    8000bc36:	00021517          	auipc	a0,0x21
    8000bc3a:	79250513          	addi	a0,a0,1938 # 8002d3c8 <__func__.0+0x310>
    8000bc3e:	2181f0ef          	jal	8002ae56 <printf>
    8000bc42:	00048797          	auipc	a5,0x48
    8000bc46:	3cf7c783          	lbu	a5,975(a5) # 80054011 <excpt+0x1>
    8000bc4a:	c799                	beqz	a5,8000bc58 <tinst_tests_gpf+0x9a4>
    8000bc4c:	6418                	ld	a4,8(s0)
    8000bc4e:	47dd                	li	a5,23
    8000bc50:	00f71463          	bne	a4,a5,8000bc58 <tinst_tests_gpf+0x9a4>
    8000bc54:	6230106f          	j	8000da76 <tinst_tests_gpf+0x27c2>
    8000bc58:	00021517          	auipc	a0,0x21
    8000bc5c:	77850513          	addi	a0,a0,1912 # 8002d3d0 <__func__.0+0x318>
    8000bc60:	1f61f0ef          	jal	8002ae56 <printf>
    8000bc64:	02900513          	li	a0,41
    8000bc68:	6dd1d0ef          	jal	80029b44 <putchar>
    8000bc6c:	4529                	li	a0,10
    8000bc6e:	6d71d0ef          	jal	80029b44 <putchar>
    8000bc72:	cc89                	beqz	s1,8000bc8c <tinst_tests_gpf+0x9d8>
    8000bc74:	00048797          	auipc	a5,0x48
    8000bc78:	39d7c783          	lbu	a5,925(a5) # 80054011 <excpt+0x1>
    8000bc7c:	c799                	beqz	a5,8000bc8a <tinst_tests_gpf+0x9d6>
    8000bc7e:	6418                	ld	a4,8(s0)
    8000bc80:	47dd                	li	a5,23
    8000bc82:	00f71463          	bne	a4,a5,8000bc8a <tinst_tests_gpf+0x9d6>
    8000bc86:	3760206f          	j	8000dffc <tinst_tests_gpf+0x2d48>
    8000bc8a:	4481                	li	s1,0
    asm volatile(
    8000bc8c:	00100937          	lui	s2,0x100
    8000bc90:	06590913          	addi	s2,s2,101 # 100065 <STACK_SIZE+0x65>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bc94:	978f50ef          	jal	80000e0c <test_setup_except_function>
    8000bc98:	0932                	slli	s2,s2,0xc
    8000bc9a:	1009292f          	lr.w	s2,(s2)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bc9e:	00024617          	auipc	a2,0x24
    8000bca2:	cd260613          	addi	a2,a2,-814 # 8002f970 <__func__.0+0x28b8>
    8000bca6:	08200593          	li	a1,130
    8000bcaa:	00021517          	auipc	a0,0x21
    8000bcae:	70650513          	addi	a0,a0,1798 # 8002d3b0 <__func__.0+0x2f8>
    8000bcb2:	1a41f0ef          	jal	8002ae56 <printf>
    8000bcb6:	00048797          	auipc	a5,0x48
    8000bcba:	35b7c783          	lbu	a5,859(a5) # 80054011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000bcbe:	1902                	slli	s2,s2,0x20
    8000bcc0:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bcc4:	e399                	bnez	a5,8000bcca <tinst_tests_gpf+0xa16>
    8000bcc6:	0b20106f          	j	8000cd78 <tinst_tests_gpf+0x1ac4>
    8000bcca:	6418                	ld	a4,8(s0)
    8000bccc:	47d5                	li	a5,21
    8000bcce:	00021597          	auipc	a1,0x21
    8000bcd2:	6ba58593          	addi	a1,a1,1722 # 8002d388 <__func__.0+0x2d0>
    8000bcd6:	00f71463          	bne	a4,a5,8000bcde <tinst_tests_gpf+0xa2a>
    8000bcda:	0500106f          	j	8000cd2a <tinst_tests_gpf+0x1a76>
    8000bcde:	00021517          	auipc	a0,0x21
    8000bce2:	6ea50513          	addi	a0,a0,1770 # 8002d3c8 <__func__.0+0x310>
    8000bce6:	1701f0ef          	jal	8002ae56 <printf>
    8000bcea:	00048797          	auipc	a5,0x48
    8000bcee:	3277c783          	lbu	a5,807(a5) # 80054011 <excpt+0x1>
    8000bcf2:	c799                	beqz	a5,8000bd00 <tinst_tests_gpf+0xa4c>
    8000bcf4:	6418                	ld	a4,8(s0)
    8000bcf6:	47d5                	li	a5,21
    8000bcf8:	00f71463          	bne	a4,a5,8000bd00 <tinst_tests_gpf+0xa4c>
    8000bcfc:	6090106f          	j	8000db04 <tinst_tests_gpf+0x2850>
    8000bd00:	00021517          	auipc	a0,0x21
    8000bd04:	6d050513          	addi	a0,a0,1744 # 8002d3d0 <__func__.0+0x318>
    8000bd08:	14e1f0ef          	jal	8002ae56 <printf>
    8000bd0c:	02900513          	li	a0,41
    8000bd10:	6351d0ef          	jal	80029b44 <putchar>
    8000bd14:	4529                	li	a0,10
    8000bd16:	62f1d0ef          	jal	80029b44 <putchar>
    8000bd1a:	cc89                	beqz	s1,8000bd34 <tinst_tests_gpf+0xa80>
    8000bd1c:	00048797          	auipc	a5,0x48
    8000bd20:	2f57c783          	lbu	a5,757(a5) # 80054011 <excpt+0x1>
    8000bd24:	c799                	beqz	a5,8000bd32 <tinst_tests_gpf+0xa7e>
    8000bd26:	6418                	ld	a4,8(s0)
    8000bd28:	47d5                	li	a5,21
    8000bd2a:	00f71463          	bne	a4,a5,8000bd32 <tinst_tests_gpf+0xa7e>
    8000bd2e:	3040206f          	j	8000e032 <tinst_tests_gpf+0x2d7e>
    8000bd32:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bd34:	8d8f50ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000bd38:	001007b7          	lui	a5,0x100
    8000bd3c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bd40:	07b2                	slli	a5,a5,0xc
    8000bd42:	1927a92f          	sc.w	s2,s2,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000bd46:	00024617          	auipc	a2,0x24
    8000bd4a:	c6a60613          	addi	a2,a2,-918 # 8002f9b0 <__func__.0+0x28f8>
    8000bd4e:	08200593          	li	a1,130
    8000bd52:	00021517          	auipc	a0,0x21
    8000bd56:	65e50513          	addi	a0,a0,1630 # 8002d3b0 <__func__.0+0x2f8>
    8000bd5a:	0fc1f0ef          	jal	8002ae56 <printf>
    8000bd5e:	00048797          	auipc	a5,0x48
    8000bd62:	2b37c783          	lbu	a5,691(a5) # 80054011 <excpt+0x1>
    return value;
    8000bd66:	2901                	sext.w	s2,s2
    8000bd68:	e399                	bnez	a5,8000bd6e <tinst_tests_gpf+0xaba>
    8000bd6a:	0680106f          	j	8000cdd2 <tinst_tests_gpf+0x1b1e>
    8000bd6e:	6418                	ld	a4,8(s0)
    8000bd70:	47dd                	li	a5,23
    8000bd72:	00021597          	auipc	a1,0x21
    8000bd76:	61658593          	addi	a1,a1,1558 # 8002d388 <__func__.0+0x2d0>
    8000bd7a:	00f71463          	bne	a4,a5,8000bd82 <tinst_tests_gpf+0xace>
    8000bd7e:	0060106f          	j	8000cd84 <tinst_tests_gpf+0x1ad0>
    8000bd82:	00021517          	auipc	a0,0x21
    8000bd86:	64650513          	addi	a0,a0,1606 # 8002d3c8 <__func__.0+0x310>
    8000bd8a:	0cc1f0ef          	jal	8002ae56 <printf>
    8000bd8e:	00048797          	auipc	a5,0x48
    8000bd92:	2837c783          	lbu	a5,643(a5) # 80054011 <excpt+0x1>
    8000bd96:	c799                	beqz	a5,8000bda4 <tinst_tests_gpf+0xaf0>
    8000bd98:	6418                	ld	a4,8(s0)
    8000bd9a:	47dd                	li	a5,23
    8000bd9c:	00f71463          	bne	a4,a5,8000bda4 <tinst_tests_gpf+0xaf0>
    8000bda0:	4bc0106f          	j	8000d25c <tinst_tests_gpf+0x1fa8>
    8000bda4:	00021517          	auipc	a0,0x21
    8000bda8:	62c50513          	addi	a0,a0,1580 # 8002d3d0 <__func__.0+0x318>
    8000bdac:	0aa1f0ef          	jal	8002ae56 <printf>
    8000bdb0:	02900513          	li	a0,41
    8000bdb4:	5911d0ef          	jal	80029b44 <putchar>
    8000bdb8:	4529                	li	a0,10
    8000bdba:	58b1d0ef          	jal	80029b44 <putchar>
    8000bdbe:	cc89                	beqz	s1,8000bdd8 <tinst_tests_gpf+0xb24>
    8000bdc0:	00048797          	auipc	a5,0x48
    8000bdc4:	2517c783          	lbu	a5,593(a5) # 80054011 <excpt+0x1>
    8000bdc8:	c799                	beqz	a5,8000bdd6 <tinst_tests_gpf+0xb22>
    8000bdca:	6418                	ld	a4,8(s0)
    8000bdcc:	47dd                	li	a5,23
    8000bdce:	00f71463          	bne	a4,a5,8000bdd6 <tinst_tests_gpf+0xb22>
    8000bdd2:	2a20206f          	j	8000e074 <tinst_tests_gpf+0x2dc0>
    8000bdd6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bdd8:	834f50ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000bddc:	001007b7          	lui	a5,0x100
    8000bde0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bde4:	07b2                	slli	a5,a5,0xc
    8000bde6:	0927a92f          	amoswap.w	s2,s2,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000bdea:	00024617          	auipc	a2,0x24
    8000bdee:	c0660613          	addi	a2,a2,-1018 # 8002f9f0 <__func__.0+0x2938>
    8000bdf2:	08200593          	li	a1,130
    8000bdf6:	00021517          	auipc	a0,0x21
    8000bdfa:	5ba50513          	addi	a0,a0,1466 # 8002d3b0 <__func__.0+0x2f8>
    8000bdfe:	0581f0ef          	jal	8002ae56 <printf>
    8000be02:	00048797          	auipc	a5,0x48
    8000be06:	20f7c783          	lbu	a5,527(a5) # 80054011 <excpt+0x1>
    8000be0a:	e399                	bnez	a5,8000be10 <tinst_tests_gpf+0xb5c>
    8000be0c:	0200106f          	j	8000ce2c <tinst_tests_gpf+0x1b78>
    8000be10:	6418                	ld	a4,8(s0)
    8000be12:	47dd                	li	a5,23
    8000be14:	00021597          	auipc	a1,0x21
    8000be18:	57458593          	addi	a1,a1,1396 # 8002d388 <__func__.0+0x2d0>
    8000be1c:	00f71463          	bne	a4,a5,8000be24 <tinst_tests_gpf+0xb70>
    8000be20:	7bf0006f          	j	8000cdde <tinst_tests_gpf+0x1b2a>
    8000be24:	00021517          	auipc	a0,0x21
    8000be28:	5a450513          	addi	a0,a0,1444 # 8002d3c8 <__func__.0+0x310>
    8000be2c:	02a1f0ef          	jal	8002ae56 <printf>
    8000be30:	00048797          	auipc	a5,0x48
    8000be34:	1e17c783          	lbu	a5,481(a5) # 80054011 <excpt+0x1>
    8000be38:	c799                	beqz	a5,8000be46 <tinst_tests_gpf+0xb92>
    8000be3a:	6418                	ld	a4,8(s0)
    8000be3c:	47dd                	li	a5,23
    8000be3e:	00f71463          	bne	a4,a5,8000be46 <tinst_tests_gpf+0xb92>
    8000be42:	4700106f          	j	8000d2b2 <tinst_tests_gpf+0x1ffe>
    8000be46:	00021517          	auipc	a0,0x21
    8000be4a:	58a50513          	addi	a0,a0,1418 # 8002d3d0 <__func__.0+0x318>
    8000be4e:	0081f0ef          	jal	8002ae56 <printf>
    8000be52:	02900513          	li	a0,41
    8000be56:	4ef1d0ef          	jal	80029b44 <putchar>
    8000be5a:	4529                	li	a0,10
    8000be5c:	4e91d0ef          	jal	80029b44 <putchar>
    8000be60:	cc89                	beqz	s1,8000be7a <tinst_tests_gpf+0xbc6>
    8000be62:	00048797          	auipc	a5,0x48
    8000be66:	1af7c783          	lbu	a5,431(a5) # 80054011 <excpt+0x1>
    8000be6a:	c799                	beqz	a5,8000be78 <tinst_tests_gpf+0xbc4>
    8000be6c:	6418                	ld	a4,8(s0)
    8000be6e:	47dd                	li	a5,23
    8000be70:	00f71463          	bne	a4,a5,8000be78 <tinst_tests_gpf+0xbc4>
    8000be74:	2420206f          	j	8000e0b6 <tinst_tests_gpf+0x2e02>
    8000be78:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000be7a:	f93f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000be7e:	001007b7          	lui	a5,0x100
    8000be82:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be86:	07b2                	slli	a5,a5,0xc
    8000be88:	0127a92f          	amoadd.w	s2,s2,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000be8c:	00024617          	auipc	a2,0x24
    8000be90:	bac60613          	addi	a2,a2,-1108 # 8002fa38 <__func__.0+0x2980>
    8000be94:	08200593          	li	a1,130
    8000be98:	00021517          	auipc	a0,0x21
    8000be9c:	51850513          	addi	a0,a0,1304 # 8002d3b0 <__func__.0+0x2f8>
    8000bea0:	7b71e0ef          	jal	8002ae56 <printf>
    8000bea4:	00048797          	auipc	a5,0x48
    8000bea8:	16d7c783          	lbu	a5,365(a5) # 80054011 <excpt+0x1>
    8000beac:	e399                	bnez	a5,8000beb2 <tinst_tests_gpf+0xbfe>
    8000beae:	7d90006f          	j	8000ce86 <tinst_tests_gpf+0x1bd2>
    8000beb2:	6418                	ld	a4,8(s0)
    8000beb4:	47dd                	li	a5,23
    8000beb6:	00021597          	auipc	a1,0x21
    8000beba:	4d258593          	addi	a1,a1,1234 # 8002d388 <__func__.0+0x2d0>
    8000bebe:	00f71463          	bne	a4,a5,8000bec6 <tinst_tests_gpf+0xc12>
    8000bec2:	7770006f          	j	8000ce38 <tinst_tests_gpf+0x1b84>
    8000bec6:	00021517          	auipc	a0,0x21
    8000beca:	50250513          	addi	a0,a0,1282 # 8002d3c8 <__func__.0+0x310>
    8000bece:	7891e0ef          	jal	8002ae56 <printf>
    8000bed2:	00048797          	auipc	a5,0x48
    8000bed6:	13f7c783          	lbu	a5,319(a5) # 80054011 <excpt+0x1>
    8000beda:	c799                	beqz	a5,8000bee8 <tinst_tests_gpf+0xc34>
    8000bedc:	6418                	ld	a4,8(s0)
    8000bede:	47dd                	li	a5,23
    8000bee0:	00f71463          	bne	a4,a5,8000bee8 <tinst_tests_gpf+0xc34>
    8000bee4:	4240106f          	j	8000d308 <tinst_tests_gpf+0x2054>
    8000bee8:	00021517          	auipc	a0,0x21
    8000beec:	4e850513          	addi	a0,a0,1256 # 8002d3d0 <__func__.0+0x318>
    8000bef0:	7671e0ef          	jal	8002ae56 <printf>
    8000bef4:	02900513          	li	a0,41
    8000bef8:	44d1d0ef          	jal	80029b44 <putchar>
    8000befc:	4529                	li	a0,10
    8000befe:	4471d0ef          	jal	80029b44 <putchar>
    8000bf02:	cc89                	beqz	s1,8000bf1c <tinst_tests_gpf+0xc68>
    8000bf04:	00048797          	auipc	a5,0x48
    8000bf08:	10d7c783          	lbu	a5,269(a5) # 80054011 <excpt+0x1>
    8000bf0c:	c799                	beqz	a5,8000bf1a <tinst_tests_gpf+0xc66>
    8000bf0e:	6418                	ld	a4,8(s0)
    8000bf10:	47dd                	li	a5,23
    8000bf12:	00f71463          	bne	a4,a5,8000bf1a <tinst_tests_gpf+0xc66>
    8000bf16:	20e0206f          	j	8000e124 <tinst_tests_gpf+0x2e70>
    8000bf1a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf1c:	ef1f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000bf20:	001007b7          	lui	a5,0x100
    8000bf24:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf28:	07b2                	slli	a5,a5,0xc
    8000bf2a:	2127a92f          	amoxor.w	s2,s2,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000bf2e:	00024617          	auipc	a2,0x24
    8000bf32:	b4a60613          	addi	a2,a2,-1206 # 8002fa78 <__func__.0+0x29c0>
    8000bf36:	08200593          	li	a1,130
    8000bf3a:	00021517          	auipc	a0,0x21
    8000bf3e:	47650513          	addi	a0,a0,1142 # 8002d3b0 <__func__.0+0x2f8>
    8000bf42:	7151e0ef          	jal	8002ae56 <printf>
    8000bf46:	00048797          	auipc	a5,0x48
    8000bf4a:	0cb7c783          	lbu	a5,203(a5) # 80054011 <excpt+0x1>
    8000bf4e:	c399                	beqz	a5,8000bf54 <tinst_tests_gpf+0xca0>
    8000bf50:	0020106f          	j	8000cf52 <tinst_tests_gpf+0x1c9e>
    8000bf54:	00021597          	auipc	a1,0x21
    8000bf58:	43458593          	addi	a1,a1,1076 # 8002d388 <__func__.0+0x2d0>
    8000bf5c:	00021517          	auipc	a0,0x21
    8000bf60:	46c50513          	addi	a0,a0,1132 # 8002d3c8 <__func__.0+0x310>
    8000bf64:	6f31e0ef          	jal	8002ae56 <printf>
    8000bf68:	00048797          	auipc	a5,0x48
    8000bf6c:	0a97c783          	lbu	a5,169(a5) # 80054011 <excpt+0x1>
    8000bf70:	c799                	beqz	a5,8000bf7e <tinst_tests_gpf+0xcca>
    8000bf72:	6418                	ld	a4,8(s0)
    8000bf74:	47dd                	li	a5,23
    8000bf76:	00f71463          	bne	a4,a5,8000bf7e <tinst_tests_gpf+0xcca>
    8000bf7a:	3e40106f          	j	8000d35e <tinst_tests_gpf+0x20aa>
    8000bf7e:	00021517          	auipc	a0,0x21
    8000bf82:	45250513          	addi	a0,a0,1106 # 8002d3d0 <__func__.0+0x318>
    8000bf86:	6d11e0ef          	jal	8002ae56 <printf>
    8000bf8a:	02900513          	li	a0,41
    8000bf8e:	3b71d0ef          	jal	80029b44 <putchar>
    8000bf92:	4529                	li	a0,10
    8000bf94:	3b11d0ef          	jal	80029b44 <putchar>
    8000bf98:	cc89                	beqz	s1,8000bfb2 <tinst_tests_gpf+0xcfe>
    8000bf9a:	00048797          	auipc	a5,0x48
    8000bf9e:	0777c783          	lbu	a5,119(a5) # 80054011 <excpt+0x1>
    8000bfa2:	c799                	beqz	a5,8000bfb0 <tinst_tests_gpf+0xcfc>
    8000bfa4:	6418                	ld	a4,8(s0)
    8000bfa6:	47dd                	li	a5,23
    8000bfa8:	00f71463          	bne	a4,a5,8000bfb0 <tinst_tests_gpf+0xcfc>
    8000bfac:	1e60206f          	j	8000e192 <tinst_tests_gpf+0x2ede>
    8000bfb0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bfb2:	e5bf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000bfb6:	001007b7          	lui	a5,0x100
    8000bfba:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bfbe:	07b2                	slli	a5,a5,0xc
    8000bfc0:	6127a92f          	amoand.w	s2,s2,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000bfc4:	00024617          	auipc	a2,0x24
    8000bfc8:	af460613          	addi	a2,a2,-1292 # 8002fab8 <__func__.0+0x2a00>
    8000bfcc:	08200593          	li	a1,130
    8000bfd0:	00021517          	auipc	a0,0x21
    8000bfd4:	3e050513          	addi	a0,a0,992 # 8002d3b0 <__func__.0+0x2f8>
    8000bfd8:	67f1e0ef          	jal	8002ae56 <printf>
    8000bfdc:	00048797          	auipc	a5,0x48
    8000bfe0:	0357c783          	lbu	a5,53(a5) # 80054011 <excpt+0x1>
    8000bfe4:	c399                	beqz	a5,8000bfea <tinst_tests_gpf+0xd36>
    8000bfe6:	01a0106f          	j	8000d000 <tinst_tests_gpf+0x1d4c>
    8000bfea:	00021597          	auipc	a1,0x21
    8000bfee:	39e58593          	addi	a1,a1,926 # 8002d388 <__func__.0+0x2d0>
    8000bff2:	00021517          	auipc	a0,0x21
    8000bff6:	3d650513          	addi	a0,a0,982 # 8002d3c8 <__func__.0+0x310>
    8000bffa:	65d1e0ef          	jal	8002ae56 <printf>
    8000bffe:	00048797          	auipc	a5,0x48
    8000c002:	0137c783          	lbu	a5,19(a5) # 80054011 <excpt+0x1>
    8000c006:	c799                	beqz	a5,8000c014 <tinst_tests_gpf+0xd60>
    8000c008:	6418                	ld	a4,8(s0)
    8000c00a:	47dd                	li	a5,23
    8000c00c:	00f71463          	bne	a4,a5,8000c014 <tinst_tests_gpf+0xd60>
    8000c010:	4450106f          	j	8000dc54 <tinst_tests_gpf+0x29a0>
    8000c014:	00021517          	auipc	a0,0x21
    8000c018:	3bc50513          	addi	a0,a0,956 # 8002d3d0 <__func__.0+0x318>
    8000c01c:	63b1e0ef          	jal	8002ae56 <printf>
    8000c020:	02900513          	li	a0,41
    8000c024:	3211d0ef          	jal	80029b44 <putchar>
    8000c028:	4529                	li	a0,10
    8000c02a:	31b1d0ef          	jal	80029b44 <putchar>
    8000c02e:	cc89                	beqz	s1,8000c048 <tinst_tests_gpf+0xd94>
    8000c030:	00048797          	auipc	a5,0x48
    8000c034:	fe17c783          	lbu	a5,-31(a5) # 80054011 <excpt+0x1>
    8000c038:	c799                	beqz	a5,8000c046 <tinst_tests_gpf+0xd92>
    8000c03a:	6418                	ld	a4,8(s0)
    8000c03c:	47dd                	li	a5,23
    8000c03e:	00f71463          	bne	a4,a5,8000c046 <tinst_tests_gpf+0xd92>
    8000c042:	1920206f          	j	8000e1d4 <tinst_tests_gpf+0x2f20>
    8000c046:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c048:	dc5f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000c04c:	001007b7          	lui	a5,0x100
    8000c050:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c054:	07b2                	slli	a5,a5,0xc
    8000c056:	4127a92f          	amoor.w	s2,s2,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000c05a:	00024617          	auipc	a2,0x24
    8000c05e:	a9e60613          	addi	a2,a2,-1378 # 8002faf8 <__func__.0+0x2a40>
    8000c062:	08200593          	li	a1,130
    8000c066:	00021517          	auipc	a0,0x21
    8000c06a:	34a50513          	addi	a0,a0,842 # 8002d3b0 <__func__.0+0x2f8>
    8000c06e:	5e91e0ef          	jal	8002ae56 <printf>
    8000c072:	00048797          	auipc	a5,0x48
    8000c076:	f9f7c783          	lbu	a5,-97(a5) # 80054011 <excpt+0x1>
    8000c07a:	e399                	bnez	a5,8000c080 <tinst_tests_gpf+0xdcc>
    8000c07c:	4b40106f          	j	8000d530 <tinst_tests_gpf+0x227c>
    8000c080:	6418                	ld	a4,8(s0)
    8000c082:	47dd                	li	a5,23
    8000c084:	00021597          	auipc	a1,0x21
    8000c088:	30458593          	addi	a1,a1,772 # 8002d388 <__func__.0+0x2d0>
    8000c08c:	00f71463          	bne	a4,a5,8000c094 <tinst_tests_gpf+0xde0>
    8000c090:	4540106f          	j	8000d4e4 <tinst_tests_gpf+0x2230>
    8000c094:	00021517          	auipc	a0,0x21
    8000c098:	33450513          	addi	a0,a0,820 # 8002d3c8 <__func__.0+0x310>
    8000c09c:	5bb1e0ef          	jal	8002ae56 <printf>
    8000c0a0:	00048797          	auipc	a5,0x48
    8000c0a4:	f717c783          	lbu	a5,-143(a5) # 80054011 <excpt+0x1>
    8000c0a8:	c799                	beqz	a5,8000c0b6 <tinst_tests_gpf+0xe02>
    8000c0aa:	6418                	ld	a4,8(s0)
    8000c0ac:	47dd                	li	a5,23
    8000c0ae:	00f71463          	bne	a4,a5,8000c0b6 <tinst_tests_gpf+0xe02>
    8000c0b2:	3e50106f          	j	8000dc96 <tinst_tests_gpf+0x29e2>
    8000c0b6:	00021517          	auipc	a0,0x21
    8000c0ba:	31a50513          	addi	a0,a0,794 # 8002d3d0 <__func__.0+0x318>
    8000c0be:	5991e0ef          	jal	8002ae56 <printf>
    8000c0c2:	02900513          	li	a0,41
    8000c0c6:	27f1d0ef          	jal	80029b44 <putchar>
    8000c0ca:	4529                	li	a0,10
    8000c0cc:	2791d0ef          	jal	80029b44 <putchar>
    8000c0d0:	cc89                	beqz	s1,8000c0ea <tinst_tests_gpf+0xe36>
    8000c0d2:	00048797          	auipc	a5,0x48
    8000c0d6:	f3f7c783          	lbu	a5,-193(a5) # 80054011 <excpt+0x1>
    8000c0da:	c799                	beqz	a5,8000c0e8 <tinst_tests_gpf+0xe34>
    8000c0dc:	6418                	ld	a4,8(s0)
    8000c0de:	47dd                	li	a5,23
    8000c0e0:	00f71463          	bne	a4,a5,8000c0e8 <tinst_tests_gpf+0xe34>
    8000c0e4:	1620206f          	j	8000e246 <tinst_tests_gpf+0x2f92>
    8000c0e8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c0ea:	d23f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c0ee:	001007b7          	lui	a5,0x100
    8000c0f2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c0f6:	07b2                	slli	a5,a5,0xc
    8000c0f8:	8127a92f          	amomin.w	s2,s2,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c0fc:	00024617          	auipc	a2,0x24
    8000c100:	a3c60613          	addi	a2,a2,-1476 # 8002fb38 <__func__.0+0x2a80>
    8000c104:	08200593          	li	a1,130
    8000c108:	00021517          	auipc	a0,0x21
    8000c10c:	2a850513          	addi	a0,a0,680 # 8002d3b0 <__func__.0+0x2f8>
    8000c110:	5471e0ef          	jal	8002ae56 <printf>
    8000c114:	00048797          	auipc	a5,0x48
    8000c118:	efd7c783          	lbu	a5,-259(a5) # 80054011 <excpt+0x1>
    8000c11c:	e399                	bnez	a5,8000c122 <tinst_tests_gpf+0xe6e>
    8000c11e:	4a40106f          	j	8000d5c2 <tinst_tests_gpf+0x230e>
    8000c122:	6418                	ld	a4,8(s0)
    8000c124:	47dd                	li	a5,23
    8000c126:	00021597          	auipc	a1,0x21
    8000c12a:	26258593          	addi	a1,a1,610 # 8002d388 <__func__.0+0x2d0>
    8000c12e:	00f71463          	bne	a4,a5,8000c136 <tinst_tests_gpf+0xe82>
    8000c132:	4440106f          	j	8000d576 <tinst_tests_gpf+0x22c2>
    8000c136:	00021517          	auipc	a0,0x21
    8000c13a:	29250513          	addi	a0,a0,658 # 8002d3c8 <__func__.0+0x310>
    8000c13e:	5191e0ef          	jal	8002ae56 <printf>
    8000c142:	00048797          	auipc	a5,0x48
    8000c146:	ecf7c783          	lbu	a5,-305(a5) # 80054011 <excpt+0x1>
    8000c14a:	c799                	beqz	a5,8000c158 <tinst_tests_gpf+0xea4>
    8000c14c:	6418                	ld	a4,8(s0)
    8000c14e:	47dd                	li	a5,23
    8000c150:	00f71463          	bne	a4,a5,8000c158 <tinst_tests_gpf+0xea4>
    8000c154:	3850106f          	j	8000dcd8 <tinst_tests_gpf+0x2a24>
    8000c158:	00021517          	auipc	a0,0x21
    8000c15c:	27850513          	addi	a0,a0,632 # 8002d3d0 <__func__.0+0x318>
    8000c160:	4f71e0ef          	jal	8002ae56 <printf>
    8000c164:	02900513          	li	a0,41
    8000c168:	1dd1d0ef          	jal	80029b44 <putchar>
    8000c16c:	4529                	li	a0,10
    8000c16e:	1d71d0ef          	jal	80029b44 <putchar>
    8000c172:	cc89                	beqz	s1,8000c18c <tinst_tests_gpf+0xed8>
    8000c174:	00048797          	auipc	a5,0x48
    8000c178:	e9d7c783          	lbu	a5,-355(a5) # 80054011 <excpt+0x1>
    8000c17c:	c799                	beqz	a5,8000c18a <tinst_tests_gpf+0xed6>
    8000c17e:	6418                	ld	a4,8(s0)
    8000c180:	47dd                	li	a5,23
    8000c182:	00f71463          	bne	a4,a5,8000c18a <tinst_tests_gpf+0xed6>
    8000c186:	1320206f          	j	8000e2b8 <tinst_tests_gpf+0x3004>
    8000c18a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c18c:	c81f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c190:	001007b7          	lui	a5,0x100
    8000c194:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c198:	07b2                	slli	a5,a5,0xc
    8000c19a:	a127a92f          	amomax.w	s2,s2,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c19e:	00024617          	auipc	a2,0x24
    8000c1a2:	9da60613          	addi	a2,a2,-1574 # 8002fb78 <__func__.0+0x2ac0>
    8000c1a6:	08200593          	li	a1,130
    8000c1aa:	00021517          	auipc	a0,0x21
    8000c1ae:	20650513          	addi	a0,a0,518 # 8002d3b0 <__func__.0+0x2f8>
    8000c1b2:	4a51e0ef          	jal	8002ae56 <printf>
    8000c1b6:	00048797          	auipc	a5,0x48
    8000c1ba:	e5b7c783          	lbu	a5,-421(a5) # 80054011 <excpt+0x1>
    8000c1be:	e399                	bnez	a5,8000c1c4 <tinst_tests_gpf+0xf10>
    8000c1c0:	4980106f          	j	8000d658 <tinst_tests_gpf+0x23a4>
    8000c1c4:	6418                	ld	a4,8(s0)
    8000c1c6:	47dd                	li	a5,23
    8000c1c8:	00021597          	auipc	a1,0x21
    8000c1cc:	1c058593          	addi	a1,a1,448 # 8002d388 <__func__.0+0x2d0>
    8000c1d0:	00f71463          	bne	a4,a5,8000c1d8 <tinst_tests_gpf+0xf24>
    8000c1d4:	4360106f          	j	8000d60a <tinst_tests_gpf+0x2356>
    8000c1d8:	00021517          	auipc	a0,0x21
    8000c1dc:	1f050513          	addi	a0,a0,496 # 8002d3c8 <__func__.0+0x310>
    8000c1e0:	4771e0ef          	jal	8002ae56 <printf>
    8000c1e4:	00048797          	auipc	a5,0x48
    8000c1e8:	e2d7c783          	lbu	a5,-467(a5) # 80054011 <excpt+0x1>
    8000c1ec:	c799                	beqz	a5,8000c1fa <tinst_tests_gpf+0xf46>
    8000c1ee:	6418                	ld	a4,8(s0)
    8000c1f0:	47dd                	li	a5,23
    8000c1f2:	00f71463          	bne	a4,a5,8000c1fa <tinst_tests_gpf+0xf46>
    8000c1f6:	3250106f          	j	8000dd1a <tinst_tests_gpf+0x2a66>
    8000c1fa:	00021517          	auipc	a0,0x21
    8000c1fe:	1d650513          	addi	a0,a0,470 # 8002d3d0 <__func__.0+0x318>
    8000c202:	4551e0ef          	jal	8002ae56 <printf>
    8000c206:	02900513          	li	a0,41
    8000c20a:	13b1d0ef          	jal	80029b44 <putchar>
    8000c20e:	4529                	li	a0,10
    8000c210:	1351d0ef          	jal	80029b44 <putchar>
    8000c214:	cc89                	beqz	s1,8000c22e <tinst_tests_gpf+0xf7a>
    8000c216:	00048797          	auipc	a5,0x48
    8000c21a:	dfb7c783          	lbu	a5,-517(a5) # 80054011 <excpt+0x1>
    8000c21e:	c799                	beqz	a5,8000c22c <tinst_tests_gpf+0xf78>
    8000c220:	6418                	ld	a4,8(s0)
    8000c222:	47dd                	li	a5,23
    8000c224:	00f71463          	bne	a4,a5,8000c22c <tinst_tests_gpf+0xf78>
    8000c228:	0d20206f          	j	8000e2fa <tinst_tests_gpf+0x3046>
    8000c22c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c22e:	bdff40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c232:	001007b7          	lui	a5,0x100
    8000c236:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c23a:	07b2                	slli	a5,a5,0xc
    8000c23c:	c127a92f          	amominu.w	s2,s2,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c240:	00024617          	auipc	a2,0x24
    8000c244:	97860613          	addi	a2,a2,-1672 # 8002fbb8 <__func__.0+0x2b00>
    8000c248:	08200593          	li	a1,130
    8000c24c:	00021517          	auipc	a0,0x21
    8000c250:	16450513          	addi	a0,a0,356 # 8002d3b0 <__func__.0+0x2f8>
    8000c254:	4031e0ef          	jal	8002ae56 <printf>
    8000c258:	00048797          	auipc	a5,0x48
    8000c25c:	db97c783          	lbu	a5,-583(a5) # 80054011 <excpt+0x1>
    8000c260:	e399                	bnez	a5,8000c266 <tinst_tests_gpf+0xfb2>
    8000c262:	4920106f          	j	8000d6f4 <tinst_tests_gpf+0x2440>
    8000c266:	6418                	ld	a4,8(s0)
    8000c268:	47dd                	li	a5,23
    8000c26a:	00021597          	auipc	a1,0x21
    8000c26e:	11e58593          	addi	a1,a1,286 # 8002d388 <__func__.0+0x2d0>
    8000c272:	00f71463          	bne	a4,a5,8000c27a <tinst_tests_gpf+0xfc6>
    8000c276:	4300106f          	j	8000d6a6 <tinst_tests_gpf+0x23f2>
    8000c27a:	00021517          	auipc	a0,0x21
    8000c27e:	14e50513          	addi	a0,a0,334 # 8002d3c8 <__func__.0+0x310>
    8000c282:	3d51e0ef          	jal	8002ae56 <printf>
    8000c286:	00048797          	auipc	a5,0x48
    8000c28a:	d8b7c783          	lbu	a5,-629(a5) # 80054011 <excpt+0x1>
    8000c28e:	c799                	beqz	a5,8000c29c <tinst_tests_gpf+0xfe8>
    8000c290:	6418                	ld	a4,8(s0)
    8000c292:	47dd                	li	a5,23
    8000c294:	00f71463          	bne	a4,a5,8000c29c <tinst_tests_gpf+0xfe8>
    8000c298:	2c50106f          	j	8000dd5c <tinst_tests_gpf+0x2aa8>
    8000c29c:	00021517          	auipc	a0,0x21
    8000c2a0:	13450513          	addi	a0,a0,308 # 8002d3d0 <__func__.0+0x318>
    8000c2a4:	3b31e0ef          	jal	8002ae56 <printf>
    8000c2a8:	02900513          	li	a0,41
    8000c2ac:	0991d0ef          	jal	80029b44 <putchar>
    8000c2b0:	4529                	li	a0,10
    8000c2b2:	0931d0ef          	jal	80029b44 <putchar>
    8000c2b6:	cc89                	beqz	s1,8000c2d0 <tinst_tests_gpf+0x101c>
    8000c2b8:	00048797          	auipc	a5,0x48
    8000c2bc:	d597c783          	lbu	a5,-679(a5) # 80054011 <excpt+0x1>
    8000c2c0:	c799                	beqz	a5,8000c2ce <tinst_tests_gpf+0x101a>
    8000c2c2:	6418                	ld	a4,8(s0)
    8000c2c4:	47dd                	li	a5,23
    8000c2c6:	00f71463          	bne	a4,a5,8000c2ce <tinst_tests_gpf+0x101a>
    8000c2ca:	0720206f          	j	8000e33c <tinst_tests_gpf+0x3088>
    8000c2ce:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c2d0:	b3df40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000c2d4:	001007b7          	lui	a5,0x100
    8000c2d8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c2dc:	07b2                	slli	a5,a5,0xc
    8000c2de:	e127a92f          	amomaxu.w	s2,s2,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c2e2:	00024617          	auipc	a2,0x24
    8000c2e6:	91e60613          	addi	a2,a2,-1762 # 8002fc00 <__func__.0+0x2b48>
    8000c2ea:	08200593          	li	a1,130
    8000c2ee:	00021517          	auipc	a0,0x21
    8000c2f2:	0c250513          	addi	a0,a0,194 # 8002d3b0 <__func__.0+0x2f8>
    8000c2f6:	3611e0ef          	jal	8002ae56 <printf>
    8000c2fa:	00048797          	auipc	a5,0x48
    8000c2fe:	d177c783          	lbu	a5,-745(a5) # 80054011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000c302:	1902                	slli	s2,s2,0x20
    8000c304:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c308:	e399                	bnez	a5,8000c30e <tinst_tests_gpf+0x105a>
    8000c30a:	4860106f          	j	8000d790 <tinst_tests_gpf+0x24dc>
    8000c30e:	6418                	ld	a4,8(s0)
    8000c310:	47dd                	li	a5,23
    8000c312:	00021597          	auipc	a1,0x21
    8000c316:	07658593          	addi	a1,a1,118 # 8002d388 <__func__.0+0x2d0>
    8000c31a:	00f71463          	bne	a4,a5,8000c322 <tinst_tests_gpf+0x106e>
    8000c31e:	4240106f          	j	8000d742 <tinst_tests_gpf+0x248e>
    8000c322:	00021517          	auipc	a0,0x21
    8000c326:	0a650513          	addi	a0,a0,166 # 8002d3c8 <__func__.0+0x310>
    8000c32a:	32d1e0ef          	jal	8002ae56 <printf>
    8000c32e:	00048797          	auipc	a5,0x48
    8000c332:	ce37c783          	lbu	a5,-797(a5) # 80054011 <excpt+0x1>
    8000c336:	c799                	beqz	a5,8000c344 <tinst_tests_gpf+0x1090>
    8000c338:	6418                	ld	a4,8(s0)
    8000c33a:	47dd                	li	a5,23
    8000c33c:	00f71463          	bne	a4,a5,8000c344 <tinst_tests_gpf+0x1090>
    8000c340:	25f0106f          	j	8000dd9e <tinst_tests_gpf+0x2aea>
    8000c344:	00021517          	auipc	a0,0x21
    8000c348:	08c50513          	addi	a0,a0,140 # 8002d3d0 <__func__.0+0x318>
    8000c34c:	30b1e0ef          	jal	8002ae56 <printf>
    8000c350:	02900513          	li	a0,41
    8000c354:	7f01d0ef          	jal	80029b44 <putchar>
    8000c358:	4529                	li	a0,10
    8000c35a:	7ea1d0ef          	jal	80029b44 <putchar>
    8000c35e:	cc89                	beqz	s1,8000c378 <tinst_tests_gpf+0x10c4>
    8000c360:	00048797          	auipc	a5,0x48
    8000c364:	cb17c783          	lbu	a5,-847(a5) # 80054011 <excpt+0x1>
    8000c368:	c799                	beqz	a5,8000c376 <tinst_tests_gpf+0x10c2>
    8000c36a:	6418                	ld	a4,8(s0)
    8000c36c:	47dd                	li	a5,23
    8000c36e:	00f71463          	bne	a4,a5,8000c376 <tinst_tests_gpf+0x10c2>
    8000c372:	00c0206f          	j	8000e37e <tinst_tests_gpf+0x30ca>
    8000c376:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c378:	a95f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000c37c:	001007b7          	lui	a5,0x100
    8000c380:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c384:	07b2                	slli	a5,a5,0xc
    8000c386:	0927b92f          	amoswap.d	s2,s2,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000c38a:	00024617          	auipc	a2,0x24
    8000c38e:	8be60613          	addi	a2,a2,-1858 # 8002fc48 <__func__.0+0x2b90>
    8000c392:	08200593          	li	a1,130
    8000c396:	00021517          	auipc	a0,0x21
    8000c39a:	01a50513          	addi	a0,a0,26 # 8002d3b0 <__func__.0+0x2f8>
    8000c39e:	2b91e0ef          	jal	8002ae56 <printf>
    8000c3a2:	00048797          	auipc	a5,0x48
    8000c3a6:	c6f7c783          	lbu	a5,-913(a5) # 80054011 <excpt+0x1>
    8000c3aa:	e399                	bnez	a5,8000c3b0 <tinst_tests_gpf+0x10fc>
    8000c3ac:	4800106f          	j	8000d82c <tinst_tests_gpf+0x2578>
    8000c3b0:	6418                	ld	a4,8(s0)
    8000c3b2:	47dd                	li	a5,23
    8000c3b4:	00021597          	auipc	a1,0x21
    8000c3b8:	fd458593          	addi	a1,a1,-44 # 8002d388 <__func__.0+0x2d0>
    8000c3bc:	00f71463          	bne	a4,a5,8000c3c4 <tinst_tests_gpf+0x1110>
    8000c3c0:	41e0106f          	j	8000d7de <tinst_tests_gpf+0x252a>
    8000c3c4:	00021517          	auipc	a0,0x21
    8000c3c8:	00450513          	addi	a0,a0,4 # 8002d3c8 <__func__.0+0x310>
    8000c3cc:	28b1e0ef          	jal	8002ae56 <printf>
    8000c3d0:	00048797          	auipc	a5,0x48
    8000c3d4:	c417c783          	lbu	a5,-959(a5) # 80054011 <excpt+0x1>
    8000c3d8:	c799                	beqz	a5,8000c3e6 <tinst_tests_gpf+0x1132>
    8000c3da:	6418                	ld	a4,8(s0)
    8000c3dc:	47dd                	li	a5,23
    8000c3de:	00f71463          	bne	a4,a5,8000c3e6 <tinst_tests_gpf+0x1132>
    8000c3e2:	1ff0106f          	j	8000dde0 <tinst_tests_gpf+0x2b2c>
    8000c3e6:	00021517          	auipc	a0,0x21
    8000c3ea:	fea50513          	addi	a0,a0,-22 # 8002d3d0 <__func__.0+0x318>
    8000c3ee:	2691e0ef          	jal	8002ae56 <printf>
    8000c3f2:	02900513          	li	a0,41
    8000c3f6:	74e1d0ef          	jal	80029b44 <putchar>
    8000c3fa:	4529                	li	a0,10
    8000c3fc:	7481d0ef          	jal	80029b44 <putchar>
    8000c400:	cc89                	beqz	s1,8000c41a <tinst_tests_gpf+0x1166>
    8000c402:	00048797          	auipc	a5,0x48
    8000c406:	c0f7c783          	lbu	a5,-1009(a5) # 80054011 <excpt+0x1>
    8000c40a:	c799                	beqz	a5,8000c418 <tinst_tests_gpf+0x1164>
    8000c40c:	6418                	ld	a4,8(s0)
    8000c40e:	47dd                	li	a5,23
    8000c410:	00f71463          	bne	a4,a5,8000c418 <tinst_tests_gpf+0x1164>
    8000c414:	7ad0106f          	j	8000e3c0 <tinst_tests_gpf+0x310c>
    8000c418:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c41a:	9f3f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000c41e:	001007b7          	lui	a5,0x100
    8000c422:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c426:	07b2                	slli	a5,a5,0xc
    8000c428:	0127b92f          	amoadd.d	s2,s2,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000c42c:	00024617          	auipc	a2,0x24
    8000c430:	86460613          	addi	a2,a2,-1948 # 8002fc90 <__func__.0+0x2bd8>
    8000c434:	08200593          	li	a1,130
    8000c438:	00021517          	auipc	a0,0x21
    8000c43c:	f7850513          	addi	a0,a0,-136 # 8002d3b0 <__func__.0+0x2f8>
    8000c440:	2171e0ef          	jal	8002ae56 <printf>
    8000c444:	00048797          	auipc	a5,0x48
    8000c448:	bcd7c783          	lbu	a5,-1075(a5) # 80054011 <excpt+0x1>
    8000c44c:	e399                	bnez	a5,8000c452 <tinst_tests_gpf+0x119e>
    8000c44e:	47a0106f          	j	8000d8c8 <tinst_tests_gpf+0x2614>
    8000c452:	6418                	ld	a4,8(s0)
    8000c454:	47dd                	li	a5,23
    8000c456:	00021597          	auipc	a1,0x21
    8000c45a:	f3258593          	addi	a1,a1,-206 # 8002d388 <__func__.0+0x2d0>
    8000c45e:	00f71463          	bne	a4,a5,8000c466 <tinst_tests_gpf+0x11b2>
    8000c462:	4180106f          	j	8000d87a <tinst_tests_gpf+0x25c6>
    8000c466:	00021517          	auipc	a0,0x21
    8000c46a:	f6250513          	addi	a0,a0,-158 # 8002d3c8 <__func__.0+0x310>
    8000c46e:	1e91e0ef          	jal	8002ae56 <printf>
    8000c472:	00048797          	auipc	a5,0x48
    8000c476:	b9f7c783          	lbu	a5,-1121(a5) # 80054011 <excpt+0x1>
    8000c47a:	c799                	beqz	a5,8000c488 <tinst_tests_gpf+0x11d4>
    8000c47c:	6418                	ld	a4,8(s0)
    8000c47e:	47dd                	li	a5,23
    8000c480:	00f71463          	bne	a4,a5,8000c488 <tinst_tests_gpf+0x11d4>
    8000c484:	19f0106f          	j	8000de22 <tinst_tests_gpf+0x2b6e>
    8000c488:	00021517          	auipc	a0,0x21
    8000c48c:	f4850513          	addi	a0,a0,-184 # 8002d3d0 <__func__.0+0x318>
    8000c490:	1c71e0ef          	jal	8002ae56 <printf>
    8000c494:	02900513          	li	a0,41
    8000c498:	6ac1d0ef          	jal	80029b44 <putchar>
    8000c49c:	4529                	li	a0,10
    8000c49e:	6a61d0ef          	jal	80029b44 <putchar>
    8000c4a2:	cc89                	beqz	s1,8000c4bc <tinst_tests_gpf+0x1208>
    8000c4a4:	00048797          	auipc	a5,0x48
    8000c4a8:	b6d7c783          	lbu	a5,-1171(a5) # 80054011 <excpt+0x1>
    8000c4ac:	c799                	beqz	a5,8000c4ba <tinst_tests_gpf+0x1206>
    8000c4ae:	6418                	ld	a4,8(s0)
    8000c4b0:	47dd                	li	a5,23
    8000c4b2:	00f71463          	bne	a4,a5,8000c4ba <tinst_tests_gpf+0x1206>
    8000c4b6:	74d0106f          	j	8000e402 <tinst_tests_gpf+0x314e>
    8000c4ba:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4bc:	951f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000c4c0:	001007b7          	lui	a5,0x100
    8000c4c4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4c8:	07b2                	slli	a5,a5,0xc
    8000c4ca:	2127b92f          	amoxor.d	s2,s2,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000c4ce:	00024617          	auipc	a2,0x24
    8000c4d2:	80260613          	addi	a2,a2,-2046 # 8002fcd0 <__func__.0+0x2c18>
    8000c4d6:	08200593          	li	a1,130
    8000c4da:	00021517          	auipc	a0,0x21
    8000c4de:	ed650513          	addi	a0,a0,-298 # 8002d3b0 <__func__.0+0x2f8>
    8000c4e2:	1751e0ef          	jal	8002ae56 <printf>
    8000c4e6:	00048797          	auipc	a5,0x48
    8000c4ea:	b2b7c783          	lbu	a5,-1237(a5) # 80054011 <excpt+0x1>
    8000c4ee:	e399                	bnez	a5,8000c4f4 <tinst_tests_gpf+0x1240>
    8000c4f0:	4620106f          	j	8000d952 <tinst_tests_gpf+0x269e>
    8000c4f4:	6418                	ld	a4,8(s0)
    8000c4f6:	47dd                	li	a5,23
    8000c4f8:	00021597          	auipc	a1,0x21
    8000c4fc:	e9058593          	addi	a1,a1,-368 # 8002d388 <__func__.0+0x2d0>
    8000c500:	00f71463          	bne	a4,a5,8000c508 <tinst_tests_gpf+0x1254>
    8000c504:	4000106f          	j	8000d904 <tinst_tests_gpf+0x2650>
    8000c508:	00021517          	auipc	a0,0x21
    8000c50c:	ec050513          	addi	a0,a0,-320 # 8002d3c8 <__func__.0+0x310>
    8000c510:	1471e0ef          	jal	8002ae56 <printf>
    8000c514:	00048797          	auipc	a5,0x48
    8000c518:	afd7c783          	lbu	a5,-1283(a5) # 80054011 <excpt+0x1>
    8000c51c:	c799                	beqz	a5,8000c52a <tinst_tests_gpf+0x1276>
    8000c51e:	6418                	ld	a4,8(s0)
    8000c520:	47dd                	li	a5,23
    8000c522:	00f71463          	bne	a4,a5,8000c52a <tinst_tests_gpf+0x1276>
    8000c526:	13f0106f          	j	8000de64 <tinst_tests_gpf+0x2bb0>
    8000c52a:	00021517          	auipc	a0,0x21
    8000c52e:	ea650513          	addi	a0,a0,-346 # 8002d3d0 <__func__.0+0x318>
    8000c532:	1251e0ef          	jal	8002ae56 <printf>
    8000c536:	02900513          	li	a0,41
    8000c53a:	60a1d0ef          	jal	80029b44 <putchar>
    8000c53e:	4529                	li	a0,10
    8000c540:	6041d0ef          	jal	80029b44 <putchar>
    8000c544:	cc89                	beqz	s1,8000c55e <tinst_tests_gpf+0x12aa>
    8000c546:	00048797          	auipc	a5,0x48
    8000c54a:	acb7c783          	lbu	a5,-1333(a5) # 80054011 <excpt+0x1>
    8000c54e:	c799                	beqz	a5,8000c55c <tinst_tests_gpf+0x12a8>
    8000c550:	6418                	ld	a4,8(s0)
    8000c552:	47dd                	li	a5,23
    8000c554:	00f71463          	bne	a4,a5,8000c55c <tinst_tests_gpf+0x12a8>
    8000c558:	6ed0106f          	j	8000e444 <tinst_tests_gpf+0x3190>
    8000c55c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c55e:	8aff40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000c562:	001007b7          	lui	a5,0x100
    8000c566:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c56a:	07b2                	slli	a5,a5,0xc
    8000c56c:	6127b92f          	amoand.d	s2,s2,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000c570:	00023617          	auipc	a2,0x23
    8000c574:	7a060613          	addi	a2,a2,1952 # 8002fd10 <__func__.0+0x2c58>
    8000c578:	08200593          	li	a1,130
    8000c57c:	00021517          	auipc	a0,0x21
    8000c580:	e3450513          	addi	a0,a0,-460 # 8002d3b0 <__func__.0+0x2f8>
    8000c584:	0d31e0ef          	jal	8002ae56 <printf>
    8000c588:	00048797          	auipc	a5,0x48
    8000c58c:	a897c783          	lbu	a5,-1399(a5) # 80054011 <excpt+0x1>
    8000c590:	e399                	bnez	a5,8000c596 <tinst_tests_gpf+0x12e2>
    8000c592:	44a0106f          	j	8000d9dc <tinst_tests_gpf+0x2728>
    8000c596:	6418                	ld	a4,8(s0)
    8000c598:	47dd                	li	a5,23
    8000c59a:	00021597          	auipc	a1,0x21
    8000c59e:	dee58593          	addi	a1,a1,-530 # 8002d388 <__func__.0+0x2d0>
    8000c5a2:	00f71463          	bne	a4,a5,8000c5aa <tinst_tests_gpf+0x12f6>
    8000c5a6:	3e80106f          	j	8000d98e <tinst_tests_gpf+0x26da>
    8000c5aa:	00021517          	auipc	a0,0x21
    8000c5ae:	e1e50513          	addi	a0,a0,-482 # 8002d3c8 <__func__.0+0x310>
    8000c5b2:	0a51e0ef          	jal	8002ae56 <printf>
    8000c5b6:	00048797          	auipc	a5,0x48
    8000c5ba:	a5b7c783          	lbu	a5,-1445(a5) # 80054011 <excpt+0x1>
    8000c5be:	c799                	beqz	a5,8000c5cc <tinst_tests_gpf+0x1318>
    8000c5c0:	6418                	ld	a4,8(s0)
    8000c5c2:	47dd                	li	a5,23
    8000c5c4:	00f71463          	bne	a4,a5,8000c5cc <tinst_tests_gpf+0x1318>
    8000c5c8:	0df0106f          	j	8000dea6 <tinst_tests_gpf+0x2bf2>
    8000c5cc:	00021517          	auipc	a0,0x21
    8000c5d0:	e0450513          	addi	a0,a0,-508 # 8002d3d0 <__func__.0+0x318>
    8000c5d4:	0831e0ef          	jal	8002ae56 <printf>
    8000c5d8:	02900513          	li	a0,41
    8000c5dc:	5681d0ef          	jal	80029b44 <putchar>
    8000c5e0:	4529                	li	a0,10
    8000c5e2:	5621d0ef          	jal	80029b44 <putchar>
    8000c5e6:	cc89                	beqz	s1,8000c600 <tinst_tests_gpf+0x134c>
    8000c5e8:	00048797          	auipc	a5,0x48
    8000c5ec:	a297c783          	lbu	a5,-1495(a5) # 80054011 <excpt+0x1>
    8000c5f0:	c799                	beqz	a5,8000c5fe <tinst_tests_gpf+0x134a>
    8000c5f2:	6418                	ld	a4,8(s0)
    8000c5f4:	47dd                	li	a5,23
    8000c5f6:	00f71463          	bne	a4,a5,8000c5fe <tinst_tests_gpf+0x134a>
    8000c5fa:	68d0106f          	j	8000e486 <tinst_tests_gpf+0x31d2>
    8000c5fe:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c600:	80df40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000c604:	001007b7          	lui	a5,0x100
    8000c608:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c60c:	07b2                	slli	a5,a5,0xc
    8000c60e:	4127b92f          	amoor.d	s2,s2,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000c612:	00023617          	auipc	a2,0x23
    8000c616:	73e60613          	addi	a2,a2,1854 # 8002fd50 <__func__.0+0x2c98>
    8000c61a:	08200593          	li	a1,130
    8000c61e:	00021517          	auipc	a0,0x21
    8000c622:	d9250513          	addi	a0,a0,-622 # 8002d3b0 <__func__.0+0x2f8>
    8000c626:	0311e0ef          	jal	8002ae56 <printf>
    8000c62a:	00048797          	auipc	a5,0x48
    8000c62e:	9e77c783          	lbu	a5,-1561(a5) # 80054011 <excpt+0x1>
    8000c632:	e399                	bnez	a5,8000c638 <tinst_tests_gpf+0x1384>
    8000c634:	4360106f          	j	8000da6a <tinst_tests_gpf+0x27b6>
    8000c638:	6418                	ld	a4,8(s0)
    8000c63a:	47dd                	li	a5,23
    8000c63c:	00021597          	auipc	a1,0x21
    8000c640:	d4c58593          	addi	a1,a1,-692 # 8002d388 <__func__.0+0x2d0>
    8000c644:	00f71463          	bne	a4,a5,8000c64c <tinst_tests_gpf+0x1398>
    8000c648:	3d40106f          	j	8000da1c <tinst_tests_gpf+0x2768>
    8000c64c:	00021517          	auipc	a0,0x21
    8000c650:	d7c50513          	addi	a0,a0,-644 # 8002d3c8 <__func__.0+0x310>
    8000c654:	0031e0ef          	jal	8002ae56 <printf>
    8000c658:	00048797          	auipc	a5,0x48
    8000c65c:	9b97c783          	lbu	a5,-1607(a5) # 80054011 <excpt+0x1>
    8000c660:	c799                	beqz	a5,8000c66e <tinst_tests_gpf+0x13ba>
    8000c662:	6418                	ld	a4,8(s0)
    8000c664:	47dd                	li	a5,23
    8000c666:	00f71463          	bne	a4,a5,8000c66e <tinst_tests_gpf+0x13ba>
    8000c66a:	6a50106f          	j	8000e50e <tinst_tests_gpf+0x325a>
    8000c66e:	00021517          	auipc	a0,0x21
    8000c672:	d6250513          	addi	a0,a0,-670 # 8002d3d0 <__func__.0+0x318>
    8000c676:	7e01e0ef          	jal	8002ae56 <printf>
    8000c67a:	02900513          	li	a0,41
    8000c67e:	4c61d0ef          	jal	80029b44 <putchar>
    8000c682:	4529                	li	a0,10
    8000c684:	4c01d0ef          	jal	80029b44 <putchar>
    8000c688:	cc89                	beqz	s1,8000c6a2 <tinst_tests_gpf+0x13ee>
    8000c68a:	00048797          	auipc	a5,0x48
    8000c68e:	9877c783          	lbu	a5,-1657(a5) # 80054011 <excpt+0x1>
    8000c692:	c799                	beqz	a5,8000c6a0 <tinst_tests_gpf+0x13ec>
    8000c694:	6418                	ld	a4,8(s0)
    8000c696:	47dd                	li	a5,23
    8000c698:	00f71463          	bne	a4,a5,8000c6a0 <tinst_tests_gpf+0x13ec>
    8000c69c:	62f0106f          	j	8000e4ca <tinst_tests_gpf+0x3216>
    8000c6a0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c6a2:	f6af40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000c6a6:	001007b7          	lui	a5,0x100
    8000c6aa:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c6ae:	07b2                	slli	a5,a5,0xc
    8000c6b0:	8127b92f          	amomin.d	s2,s2,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000c6b4:	00023617          	auipc	a2,0x23
    8000c6b8:	6dc60613          	addi	a2,a2,1756 # 8002fd90 <__func__.0+0x2cd8>
    8000c6bc:	08200593          	li	a1,130
    8000c6c0:	00021517          	auipc	a0,0x21
    8000c6c4:	cf050513          	addi	a0,a0,-784 # 8002d3b0 <__func__.0+0x2f8>
    8000c6c8:	78e1e0ef          	jal	8002ae56 <printf>
    8000c6cc:	00048797          	auipc	a5,0x48
    8000c6d0:	9457c783          	lbu	a5,-1723(a5) # 80054011 <excpt+0x1>
    8000c6d4:	e399                	bnez	a5,8000c6da <tinst_tests_gpf+0x1426>
    8000c6d6:	4220106f          	j	8000daf8 <tinst_tests_gpf+0x2844>
    8000c6da:	6418                	ld	a4,8(s0)
    8000c6dc:	47dd                	li	a5,23
    8000c6de:	00021597          	auipc	a1,0x21
    8000c6e2:	caa58593          	addi	a1,a1,-854 # 8002d388 <__func__.0+0x2d0>
    8000c6e6:	00f71463          	bne	a4,a5,8000c6ee <tinst_tests_gpf+0x143a>
    8000c6ea:	3c00106f          	j	8000daaa <tinst_tests_gpf+0x27f6>
    8000c6ee:	00021517          	auipc	a0,0x21
    8000c6f2:	cda50513          	addi	a0,a0,-806 # 8002d3c8 <__func__.0+0x310>
    8000c6f6:	7601e0ef          	jal	8002ae56 <printf>
    8000c6fa:	00048797          	auipc	a5,0x48
    8000c6fe:	9177c783          	lbu	a5,-1769(a5) # 80054011 <excpt+0x1>
    8000c702:	c799                	beqz	a5,8000c710 <tinst_tests_gpf+0x145c>
    8000c704:	6418                	ld	a4,8(s0)
    8000c706:	47dd                	li	a5,23
    8000c708:	00f71463          	bne	a4,a5,8000c710 <tinst_tests_gpf+0x145c>
    8000c70c:	6470106f          	j	8000e552 <tinst_tests_gpf+0x329e>
    8000c710:	00021517          	auipc	a0,0x21
    8000c714:	cc050513          	addi	a0,a0,-832 # 8002d3d0 <__func__.0+0x318>
    8000c718:	73e1e0ef          	jal	8002ae56 <printf>
    8000c71c:	02900513          	li	a0,41
    8000c720:	4241d0ef          	jal	80029b44 <putchar>
    8000c724:	4529                	li	a0,10
    8000c726:	41e1d0ef          	jal	80029b44 <putchar>
    8000c72a:	c889                	beqz	s1,8000c73c <tinst_tests_gpf+0x1488>
    8000c72c:	00048797          	auipc	a5,0x48
    8000c730:	8e57c783          	lbu	a5,-1819(a5) # 80054011 <excpt+0x1>
    8000c734:	c399                	beqz	a5,8000c73a <tinst_tests_gpf+0x1486>
    8000c736:	7b20106f          	j	8000dee8 <tinst_tests_gpf+0x2c34>
    8000c73a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c73c:	ed0f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000c740:	001007b7          	lui	a5,0x100
    8000c744:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c748:	07b2                	slli	a5,a5,0xc
    8000c74a:	a127b92f          	amomax.d	s2,s2,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000c74e:	00023617          	auipc	a2,0x23
    8000c752:	68260613          	addi	a2,a2,1666 # 8002fdd0 <__func__.0+0x2d18>
    8000c756:	08200593          	li	a1,130
    8000c75a:	00021517          	auipc	a0,0x21
    8000c75e:	c5650513          	addi	a0,a0,-938 # 8002d3b0 <__func__.0+0x2f8>
    8000c762:	6f41e0ef          	jal	8002ae56 <printf>
    8000c766:	00048797          	auipc	a5,0x48
    8000c76a:	8ab7c783          	lbu	a5,-1877(a5) # 80054011 <excpt+0x1>
    8000c76e:	e399                	bnez	a5,8000c774 <tinst_tests_gpf+0x14c0>
    8000c770:	4240106f          	j	8000db94 <tinst_tests_gpf+0x28e0>
    8000c774:	6418                	ld	a4,8(s0)
    8000c776:	47dd                	li	a5,23
    8000c778:	00021597          	auipc	a1,0x21
    8000c77c:	c1058593          	addi	a1,a1,-1008 # 8002d388 <__func__.0+0x2d0>
    8000c780:	00f71463          	bne	a4,a5,8000c788 <tinst_tests_gpf+0x14d4>
    8000c784:	3c20106f          	j	8000db46 <tinst_tests_gpf+0x2892>
    8000c788:	00021517          	auipc	a0,0x21
    8000c78c:	c4050513          	addi	a0,a0,-960 # 8002d3c8 <__func__.0+0x310>
    8000c790:	6c61e0ef          	jal	8002ae56 <printf>
    8000c794:	00048797          	auipc	a5,0x48
    8000c798:	87d7c783          	lbu	a5,-1923(a5) # 80054011 <excpt+0x1>
    8000c79c:	c799                	beqz	a5,8000c7aa <tinst_tests_gpf+0x14f6>
    8000c79e:	6418                	ld	a4,8(s0)
    8000c7a0:	47dd                	li	a5,23
    8000c7a2:	00f71463          	bne	a4,a5,8000c7aa <tinst_tests_gpf+0x14f6>
    8000c7a6:	5f10106f          	j	8000e596 <tinst_tests_gpf+0x32e2>
    8000c7aa:	00021517          	auipc	a0,0x21
    8000c7ae:	c2650513          	addi	a0,a0,-986 # 8002d3d0 <__func__.0+0x318>
    8000c7b2:	6a41e0ef          	jal	8002ae56 <printf>
    8000c7b6:	02900513          	li	a0,41
    8000c7ba:	38a1d0ef          	jal	80029b44 <putchar>
    8000c7be:	4529                	li	a0,10
    8000c7c0:	3841d0ef          	jal	80029b44 <putchar>
    8000c7c4:	c889                	beqz	s1,8000c7d6 <tinst_tests_gpf+0x1522>
    8000c7c6:	00048797          	auipc	a5,0x48
    8000c7ca:	84b7c783          	lbu	a5,-1973(a5) # 80054011 <excpt+0x1>
    8000c7ce:	c399                	beqz	a5,8000c7d4 <tinst_tests_gpf+0x1520>
    8000c7d0:	7660106f          	j	8000df36 <tinst_tests_gpf+0x2c82>
    8000c7d4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7d6:	e36f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000c7da:	001007b7          	lui	a5,0x100
    8000c7de:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7e2:	07b2                	slli	a5,a5,0xc
    8000c7e4:	c127b92f          	amominu.d	s2,s2,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000c7e8:	00023617          	auipc	a2,0x23
    8000c7ec:	62860613          	addi	a2,a2,1576 # 8002fe10 <__func__.0+0x2d58>
    8000c7f0:	08200593          	li	a1,130
    8000c7f4:	00021517          	auipc	a0,0x21
    8000c7f8:	bbc50513          	addi	a0,a0,-1092 # 8002d3b0 <__func__.0+0x2f8>
    8000c7fc:	65a1e0ef          	jal	8002ae56 <printf>
    8000c800:	00048797          	auipc	a5,0x48
    8000c804:	8117c783          	lbu	a5,-2031(a5) # 80054011 <excpt+0x1>
    8000c808:	e399                	bnez	a5,8000c80e <tinst_tests_gpf+0x155a>
    8000c80a:	3e40106f          	j	8000dbee <tinst_tests_gpf+0x293a>
    8000c80e:	6418                	ld	a4,8(s0)
    8000c810:	47dd                	li	a5,23
    8000c812:	00021597          	auipc	a1,0x21
    8000c816:	b7658593          	addi	a1,a1,-1162 # 8002d388 <__func__.0+0x2d0>
    8000c81a:	00f71463          	bne	a4,a5,8000c822 <tinst_tests_gpf+0x156e>
    8000c81e:	3820106f          	j	8000dba0 <tinst_tests_gpf+0x28ec>
    8000c822:	00021517          	auipc	a0,0x21
    8000c826:	ba650513          	addi	a0,a0,-1114 # 8002d3c8 <__func__.0+0x310>
    8000c82a:	62c1e0ef          	jal	8002ae56 <printf>
    8000c82e:	00047797          	auipc	a5,0x47
    8000c832:	7e37c783          	lbu	a5,2019(a5) # 80054011 <excpt+0x1>
    8000c836:	c799                	beqz	a5,8000c844 <tinst_tests_gpf+0x1590>
    8000c838:	6418                	ld	a4,8(s0)
    8000c83a:	47dd                	li	a5,23
    8000c83c:	00f71463          	bne	a4,a5,8000c844 <tinst_tests_gpf+0x1590>
    8000c840:	59b0106f          	j	8000e5da <tinst_tests_gpf+0x3326>
    8000c844:	00021517          	auipc	a0,0x21
    8000c848:	b8c50513          	addi	a0,a0,-1140 # 8002d3d0 <__func__.0+0x318>
    8000c84c:	60a1e0ef          	jal	8002ae56 <printf>
    8000c850:	02900513          	li	a0,41
    8000c854:	2f01d0ef          	jal	80029b44 <putchar>
    8000c858:	4529                	li	a0,10
    8000c85a:	2ea1d0ef          	jal	80029b44 <putchar>
    8000c85e:	c889                	beqz	s1,8000c870 <tinst_tests_gpf+0x15bc>
    8000c860:	00047797          	auipc	a5,0x47
    8000c864:	7b17c783          	lbu	a5,1969(a5) # 80054011 <excpt+0x1>
    8000c868:	c399                	beqz	a5,8000c86e <tinst_tests_gpf+0x15ba>
    8000c86a:	71a0106f          	j	8000df84 <tinst_tests_gpf+0x2cd0>
    8000c86e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c870:	d9cf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000c874:	001007b7          	lui	a5,0x100
    8000c878:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c87c:	07b2                	slli	a5,a5,0xc
    8000c87e:	e127b92f          	amomaxu.d	s2,s2,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c882:	00023617          	auipc	a2,0x23
    8000c886:	5d660613          	addi	a2,a2,1494 # 8002fe58 <__func__.0+0x2da0>
    8000c88a:	08200593          	li	a1,130
    8000c88e:	00021517          	auipc	a0,0x21
    8000c892:	b2250513          	addi	a0,a0,-1246 # 8002d3b0 <__func__.0+0x2f8>
    8000c896:	5c01e0ef          	jal	8002ae56 <printf>
    8000c89a:	00047797          	auipc	a5,0x47
    8000c89e:	7777c783          	lbu	a5,1911(a5) # 80054011 <excpt+0x1>
    8000c8a2:	e399                	bnez	a5,8000c8a8 <tinst_tests_gpf+0x15f4>
    8000c8a4:	3a40106f          	j	8000dc48 <tinst_tests_gpf+0x2994>
    8000c8a8:	6418                	ld	a4,8(s0)
    8000c8aa:	47dd                	li	a5,23
    8000c8ac:	00021597          	auipc	a1,0x21
    8000c8b0:	adc58593          	addi	a1,a1,-1316 # 8002d388 <__func__.0+0x2d0>
    8000c8b4:	00f71463          	bne	a4,a5,8000c8bc <tinst_tests_gpf+0x1608>
    8000c8b8:	3420106f          	j	8000dbfa <tinst_tests_gpf+0x2946>
    8000c8bc:	00021517          	auipc	a0,0x21
    8000c8c0:	b0c50513          	addi	a0,a0,-1268 # 8002d3c8 <__func__.0+0x310>
    8000c8c4:	5921e0ef          	jal	8002ae56 <printf>
    8000c8c8:	00047797          	auipc	a5,0x47
    8000c8cc:	7497c783          	lbu	a5,1865(a5) # 80054011 <excpt+0x1>
    8000c8d0:	c799                	beqz	a5,8000c8de <tinst_tests_gpf+0x162a>
    8000c8d2:	6418                	ld	a4,8(s0)
    8000c8d4:	47dd                	li	a5,23
    8000c8d6:	00f71463          	bne	a4,a5,8000c8de <tinst_tests_gpf+0x162a>
    8000c8da:	5450106f          	j	8000e61e <tinst_tests_gpf+0x336a>
    8000c8de:	00021517          	auipc	a0,0x21
    8000c8e2:	af250513          	addi	a0,a0,-1294 # 8002d3d0 <__func__.0+0x318>
    8000c8e6:	5701e0ef          	jal	8002ae56 <printf>
    8000c8ea:	02900513          	li	a0,41
    8000c8ee:	2561d0ef          	jal	80029b44 <putchar>
    8000c8f2:	4529                	li	a0,10
    8000c8f4:	2501d0ef          	jal	80029b44 <putchar>
    8000c8f8:	cca9                	beqz	s1,8000c952 <tinst_tests_gpf+0x169e>
    8000c8fa:	00047497          	auipc	s1,0x47
    8000c8fe:	7174c483          	lbu	s1,1815(s1) # 80054011 <excpt+0x1>
    8000c902:	c8a9                	beqz	s1,8000c954 <tinst_tests_gpf+0x16a0>
    8000c904:	6418                	ld	a4,8(s0)
    8000c906:	47dd                	li	a5,23
    8000c908:	04f71563          	bne	a4,a5,8000c952 <tinst_tests_gpf+0x169e>
    8000c90c:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000c90e:	00021597          	auipc	a1,0x21
    8000c912:	a6a58593          	addi	a1,a1,-1430 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c916:	c3b9                	beqz	a5,8000c95c <tinst_tests_gpf+0x16a8>
    8000c918:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c91a:	0016f713          	andi	a4,a3,1
    8000c91e:	380718e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c922:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c926:	460d                	li	a2,3
    8000c928:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c92c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c92e:	00c59763          	bne	a1,a2,8000c93c <tinst_tests_gpf+0x1688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c932:	0026d683          	lhu	a3,2(a3)
    8000c936:	0106969b          	slliw	a3,a3,0x10
    8000c93a:	8f55                	or	a4,a4,a3
    8000c93c:	1ffe16b7          	lui	a3,0x1ffe1
    8000c940:	068e                	slli	a3,a3,0x3
    8000c942:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000c944:	8f75                	and	a4,a4,a3
    TEST_END();
    8000c946:	00021597          	auipc	a1,0x21
    8000c94a:	a3258593          	addi	a1,a1,-1486 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c94e:	00e78763          	beq	a5,a4,8000c95c <tinst_tests_gpf+0x16a8>
    8000c952:	4481                	li	s1,0
    TEST_END();
    8000c954:	00021597          	auipc	a1,0x21
    8000c958:	a3458593          	addi	a1,a1,-1484 # 8002d388 <__func__.0+0x2d0>
    8000c95c:	00021517          	auipc	a0,0x21
    8000c960:	ad450513          	addi	a0,a0,-1324 # 8002d430 <__func__.0+0x378>
    8000c964:	4f21e0ef          	jal	8002ae56 <printf>
    8000c968:	4511                	li	a0,4
    8000c96a:	d9ef40ef          	jal	80000f08 <goto_priv>
    8000c96e:	eb7f40ef          	jal	80001824 <reset_state>
}
    8000c972:	70a2                	ld	ra,40(sp)
    8000c974:	7402                	ld	s0,32(sp)
    8000c976:	6942                	ld	s2,16(sp)
    8000c978:	69a2                	ld	s3,8(sp)
    8000c97a:	8526                	mv	a0,s1
    8000c97c:	64e2                	ld	s1,24(sp)
    8000c97e:	6145                	addi	sp,sp,48
    8000c980:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c982:	701c                	ld	a5,32(s0)
    8000c984:	00021597          	auipc	a1,0x21
    8000c988:	9f458593          	addi	a1,a1,-1548 # 8002d378 <__func__.0+0x2c0>
    8000c98c:	e399                	bnez	a5,8000c992 <tinst_tests_gpf+0x16de>
    8000c98e:	abbfe06f          	j	8000b448 <tinst_tests_gpf+0x194>
    8000c992:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c994:	0016f713          	andi	a4,a3,1
    8000c998:	30071be3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c99c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c9a0:	460d                	li	a2,3
    8000c9a2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c9a6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9a8:	00c59763          	bne	a1,a2,8000c9b6 <tinst_tests_gpf+0x1702>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9ac:	0026d683          	lhu	a3,2(a3)
    8000c9b0:	0106969b          	slliw	a3,a3,0x10
    8000c9b4:	8f55                	or	a4,a4,a3
    8000c9b6:	1746                	slli	a4,a4,0x31
    8000c9b8:	9345                	srli	a4,a4,0x31
    8000c9ba:	00021597          	auipc	a1,0x21
    8000c9be:	9be58593          	addi	a1,a1,-1602 # 8002d378 <__func__.0+0x2c0>
    8000c9c2:	00e79463          	bne	a5,a4,8000c9ca <tinst_tests_gpf+0x1716>
    8000c9c6:	a83fe06f          	j	8000b448 <tinst_tests_gpf+0x194>
    8000c9ca:	00021597          	auipc	a1,0x21
    8000c9ce:	9be58593          	addi	a1,a1,-1602 # 8002d388 <__func__.0+0x2d0>
    8000c9d2:	a77fe06f          	j	8000b448 <tinst_tests_gpf+0x194>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000c9d6:	6418                	ld	a4,8(s0)
    8000c9d8:	47d5                	li	a5,21
    8000c9da:	00021597          	auipc	a1,0x21
    8000c9de:	9ae58593          	addi	a1,a1,-1618 # 8002d388 <__func__.0+0x2d0>
    8000c9e2:	00f70463          	beq	a4,a5,8000c9ea <tinst_tests_gpf+0x1736>
    8000c9e6:	af9fe06f          	j	8000b4de <tinst_tests_gpf+0x22a>
    8000c9ea:	701c                	ld	a5,32(s0)
    8000c9ec:	00021597          	auipc	a1,0x21
    8000c9f0:	98c58593          	addi	a1,a1,-1652 # 8002d378 <__func__.0+0x2c0>
    8000c9f4:	e399                	bnez	a5,8000c9fa <tinst_tests_gpf+0x1746>
    8000c9f6:	ae9fe06f          	j	8000b4de <tinst_tests_gpf+0x22a>
    8000c9fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c9fc:	0016f713          	andi	a4,a3,1
    8000ca00:	2a0717e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca04:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca08:	460d                	li	a2,3
    8000ca0a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca0e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca10:	00c59763          	bne	a1,a2,8000ca1e <tinst_tests_gpf+0x176a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca14:	0026d683          	lhu	a3,2(a3)
    8000ca18:	0106969b          	slliw	a3,a3,0x10
    8000ca1c:	8f55                	or	a4,a4,a3
    8000ca1e:	1746                	slli	a4,a4,0x31
    8000ca20:	9345                	srli	a4,a4,0x31
    8000ca22:	00021597          	auipc	a1,0x21
    8000ca26:	95658593          	addi	a1,a1,-1706 # 8002d378 <__func__.0+0x2c0>
    8000ca2a:	00e78463          	beq	a5,a4,8000ca32 <tinst_tests_gpf+0x177e>
    8000ca2e:	aa9fe06f          	j	8000b4d6 <tinst_tests_gpf+0x222>
    8000ca32:	aadfe06f          	j	8000b4de <tinst_tests_gpf+0x22a>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000ca36:	701c                	ld	a5,32(s0)
    8000ca38:	e399                	bnez	a5,8000ca3e <tinst_tests_gpf+0x178a>
    8000ca3a:	a45fe06f          	j	8000b47e <tinst_tests_gpf+0x1ca>
    8000ca3e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca40:	0016f713          	andi	a4,a3,1
    8000ca44:	260715e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca48:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca4c:	460d                	li	a2,3
    8000ca4e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca52:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca54:	00c59763          	bne	a1,a2,8000ca62 <tinst_tests_gpf+0x17ae>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca58:	0026d683          	lhu	a3,2(a3)
    8000ca5c:	0106969b          	slliw	a3,a3,0x10
    8000ca60:	8f55                	or	a4,a4,a3
    8000ca62:	1746                	slli	a4,a4,0x31
    8000ca64:	9345                	srli	a4,a4,0x31
    8000ca66:	00e78463          	beq	a5,a4,8000ca6e <tinst_tests_gpf+0x17ba>
    8000ca6a:	a01fe06f          	j	8000b46a <tinst_tests_gpf+0x1b6>
    8000ca6e:	a11fe06f          	j	8000b47e <tinst_tests_gpf+0x1ca>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000ca72:	701c                	ld	a5,32(s0)
    8000ca74:	00021597          	auipc	a1,0x21
    8000ca78:	90458593          	addi	a1,a1,-1788 # 8002d378 <__func__.0+0x2c0>
    8000ca7c:	e399                	bnez	a5,8000ca82 <tinst_tests_gpf+0x17ce>
    8000ca7e:	b03fe06f          	j	8000b580 <tinst_tests_gpf+0x2cc>
    8000ca82:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca84:	0016f713          	andi	a4,a3,1
    8000ca88:	220713e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca8c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca90:	460d                	li	a2,3
    8000ca92:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca96:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca98:	00c59763          	bne	a1,a2,8000caa6 <tinst_tests_gpf+0x17f2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca9c:	0026d683          	lhu	a3,2(a3)
    8000caa0:	0106969b          	slliw	a3,a3,0x10
    8000caa4:	8f55                	or	a4,a4,a3
    8000caa6:	1746                	slli	a4,a4,0x31
    8000caa8:	9345                	srli	a4,a4,0x31
    8000caaa:	00021597          	auipc	a1,0x21
    8000caae:	8ce58593          	addi	a1,a1,-1842 # 8002d378 <__func__.0+0x2c0>
    8000cab2:	00e79463          	bne	a5,a4,8000caba <tinst_tests_gpf+0x1806>
    8000cab6:	acbfe06f          	j	8000b580 <tinst_tests_gpf+0x2cc>
    8000caba:	00021597          	auipc	a1,0x21
    8000cabe:	8ce58593          	addi	a1,a1,-1842 # 8002d388 <__func__.0+0x2d0>
    8000cac2:	abffe06f          	j	8000b580 <tinst_tests_gpf+0x2cc>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000cac6:	701c                	ld	a5,32(s0)
    8000cac8:	00021597          	auipc	a1,0x21
    8000cacc:	8b058593          	addi	a1,a1,-1872 # 8002d378 <__func__.0+0x2c0>
    8000cad0:	e399                	bnez	a5,8000cad6 <tinst_tests_gpf+0x1822>
    8000cad2:	b51fe06f          	j	8000b622 <tinst_tests_gpf+0x36e>
    8000cad6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cad8:	0016f713          	andi	a4,a3,1
    8000cadc:	1c0719e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cae0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cae4:	460d                	li	a2,3
    8000cae6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000caea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000caec:	00c59763          	bne	a1,a2,8000cafa <tinst_tests_gpf+0x1846>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000caf0:	0026d683          	lhu	a3,2(a3)
    8000caf4:	0106969b          	slliw	a3,a3,0x10
    8000caf8:	8f55                	or	a4,a4,a3
    8000cafa:	1746                	slli	a4,a4,0x31
    8000cafc:	9345                	srli	a4,a4,0x31
    8000cafe:	00021597          	auipc	a1,0x21
    8000cb02:	87a58593          	addi	a1,a1,-1926 # 8002d378 <__func__.0+0x2c0>
    8000cb06:	00e79463          	bne	a5,a4,8000cb0e <tinst_tests_gpf+0x185a>
    8000cb0a:	b19fe06f          	j	8000b622 <tinst_tests_gpf+0x36e>
    8000cb0e:	00021597          	auipc	a1,0x21
    8000cb12:	87a58593          	addi	a1,a1,-1926 # 8002d388 <__func__.0+0x2d0>
    8000cb16:	b0dfe06f          	j	8000b622 <tinst_tests_gpf+0x36e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cb1a:	701c                	ld	a5,32(s0)
    8000cb1c:	00021597          	auipc	a1,0x21
    8000cb20:	85c58593          	addi	a1,a1,-1956 # 8002d378 <__func__.0+0x2c0>
    8000cb24:	e399                	bnez	a5,8000cb2a <tinst_tests_gpf+0x1876>
    8000cb26:	b9ffe06f          	j	8000b6c4 <tinst_tests_gpf+0x410>
    8000cb2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb2c:	0016f713          	andi	a4,a3,1
    8000cb30:	16071fe3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb38:	460d                	li	a2,3
    8000cb3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb40:	00c59763          	bne	a1,a2,8000cb4e <tinst_tests_gpf+0x189a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb44:	0026d683          	lhu	a3,2(a3)
    8000cb48:	0106969b          	slliw	a3,a3,0x10
    8000cb4c:	8f55                	or	a4,a4,a3
    8000cb4e:	1746                	slli	a4,a4,0x31
    8000cb50:	9345                	srli	a4,a4,0x31
    8000cb52:	00021597          	auipc	a1,0x21
    8000cb56:	82658593          	addi	a1,a1,-2010 # 8002d378 <__func__.0+0x2c0>
    8000cb5a:	00e79463          	bne	a5,a4,8000cb62 <tinst_tests_gpf+0x18ae>
    8000cb5e:	b67fe06f          	j	8000b6c4 <tinst_tests_gpf+0x410>
    8000cb62:	00021597          	auipc	a1,0x21
    8000cb66:	82658593          	addi	a1,a1,-2010 # 8002d388 <__func__.0+0x2d0>
    8000cb6a:	b5bfe06f          	j	8000b6c4 <tinst_tests_gpf+0x410>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cb6e:	701c                	ld	a5,32(s0)
    8000cb70:	00021597          	auipc	a1,0x21
    8000cb74:	80858593          	addi	a1,a1,-2040 # 8002d378 <__func__.0+0x2c0>
    8000cb78:	e399                	bnez	a5,8000cb7e <tinst_tests_gpf+0x18ca>
    8000cb7a:	be5fe06f          	j	8000b75e <tinst_tests_gpf+0x4aa>
    8000cb7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb80:	0016f713          	andi	a4,a3,1
    8000cb84:	120715e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb8c:	460d                	li	a2,3
    8000cb8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb94:	00c59763          	bne	a1,a2,8000cba2 <tinst_tests_gpf+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb98:	0026d683          	lhu	a3,2(a3)
    8000cb9c:	0106969b          	slliw	a3,a3,0x10
    8000cba0:	8f55                	or	a4,a4,a3
    8000cba2:	1746                	slli	a4,a4,0x31
    8000cba4:	9345                	srli	a4,a4,0x31
    8000cba6:	00020597          	auipc	a1,0x20
    8000cbaa:	7d258593          	addi	a1,a1,2002 # 8002d378 <__func__.0+0x2c0>
    8000cbae:	00e79463          	bne	a5,a4,8000cbb6 <tinst_tests_gpf+0x1902>
    8000cbb2:	badfe06f          	j	8000b75e <tinst_tests_gpf+0x4aa>
    8000cbb6:	00020597          	auipc	a1,0x20
    8000cbba:	7d258593          	addi	a1,a1,2002 # 8002d388 <__func__.0+0x2d0>
    8000cbbe:	ba1fe06f          	j	8000b75e <tinst_tests_gpf+0x4aa>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cbc2:	701c                	ld	a5,32(s0)
    8000cbc4:	00020597          	auipc	a1,0x20
    8000cbc8:	7b458593          	addi	a1,a1,1972 # 8002d378 <__func__.0+0x2c0>
    8000cbcc:	e399                	bnez	a5,8000cbd2 <tinst_tests_gpf+0x191e>
    8000cbce:	c2dfe06f          	j	8000b7fa <tinst_tests_gpf+0x546>
    8000cbd2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cbd4:	0016f713          	andi	a4,a3,1
    8000cbd8:	0c071be3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cbdc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cbe0:	460d                	li	a2,3
    8000cbe2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cbe6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cbe8:	00c59763          	bne	a1,a2,8000cbf6 <tinst_tests_gpf+0x1942>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cbec:	0026d683          	lhu	a3,2(a3)
    8000cbf0:	0106969b          	slliw	a3,a3,0x10
    8000cbf4:	8f55                	or	a4,a4,a3
    8000cbf6:	01f076b7          	lui	a3,0x1f07
    8000cbfa:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cbfe:	8f75                	and	a4,a4,a3
    8000cc00:	00020597          	auipc	a1,0x20
    8000cc04:	77858593          	addi	a1,a1,1912 # 8002d378 <__func__.0+0x2c0>
    8000cc08:	00e79463          	bne	a5,a4,8000cc10 <tinst_tests_gpf+0x195c>
    8000cc0c:	beffe06f          	j	8000b7fa <tinst_tests_gpf+0x546>
    8000cc10:	00020597          	auipc	a1,0x20
    8000cc14:	77858593          	addi	a1,a1,1912 # 8002d388 <__func__.0+0x2d0>
    8000cc18:	be3fe06f          	j	8000b7fa <tinst_tests_gpf+0x546>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000cc1c:	701c                	ld	a5,32(s0)
    8000cc1e:	00020597          	auipc	a1,0x20
    8000cc22:	75a58593          	addi	a1,a1,1882 # 8002d378 <__func__.0+0x2c0>
    8000cc26:	e399                	bnez	a5,8000cc2c <tinst_tests_gpf+0x1978>
    8000cc28:	c73fe06f          	j	8000b89a <tinst_tests_gpf+0x5e6>
    8000cc2c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc2e:	0016f713          	andi	a4,a3,1
    8000cc32:	06071ee3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc36:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc3a:	460d                	li	a2,3
    8000cc3c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc40:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc42:	00c59763          	bne	a1,a2,8000cc50 <tinst_tests_gpf+0x199c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc46:	0026d683          	lhu	a3,2(a3)
    8000cc4a:	0106969b          	slliw	a3,a3,0x10
    8000cc4e:	8f55                	or	a4,a4,a3
    8000cc50:	01f076b7          	lui	a3,0x1f07
    8000cc54:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cc58:	8f75                	and	a4,a4,a3
    8000cc5a:	00020597          	auipc	a1,0x20
    8000cc5e:	71e58593          	addi	a1,a1,1822 # 8002d378 <__func__.0+0x2c0>
    8000cc62:	00e79463          	bne	a5,a4,8000cc6a <tinst_tests_gpf+0x19b6>
    8000cc66:	c35fe06f          	j	8000b89a <tinst_tests_gpf+0x5e6>
    8000cc6a:	00020597          	auipc	a1,0x20
    8000cc6e:	71e58593          	addi	a1,a1,1822 # 8002d388 <__func__.0+0x2d0>
    8000cc72:	c29fe06f          	j	8000b89a <tinst_tests_gpf+0x5e6>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000cc76:	701c                	ld	a5,32(s0)
    8000cc78:	00020597          	auipc	a1,0x20
    8000cc7c:	70058593          	addi	a1,a1,1792 # 8002d378 <__func__.0+0x2c0>
    8000cc80:	e399                	bnez	a5,8000cc86 <tinst_tests_gpf+0x19d2>
    8000cc82:	cbbfe06f          	j	8000b93c <tinst_tests_gpf+0x688>
    8000cc86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc88:	0016f713          	andi	a4,a3,1
    8000cc8c:	020711e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc94:	460d                	li	a2,3
    8000cc96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc9c:	00c59763          	bne	a1,a2,8000ccaa <tinst_tests_gpf+0x19f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cca0:	0026d683          	lhu	a3,2(a3)
    8000cca4:	0106969b          	slliw	a3,a3,0x10
    8000cca8:	8f55                	or	a4,a4,a3
    8000ccaa:	01f076b7          	lui	a3,0x1f07
    8000ccae:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000ccb2:	8f75                	and	a4,a4,a3
    8000ccb4:	00020597          	auipc	a1,0x20
    8000ccb8:	6c458593          	addi	a1,a1,1732 # 8002d378 <__func__.0+0x2c0>
    8000ccbc:	00e79463          	bne	a5,a4,8000ccc4 <tinst_tests_gpf+0x1a10>
    8000ccc0:	c7dfe06f          	j	8000b93c <tinst_tests_gpf+0x688>
    8000ccc4:	00020597          	auipc	a1,0x20
    8000ccc8:	6c458593          	addi	a1,a1,1732 # 8002d388 <__func__.0+0x2d0>
    8000cccc:	c71fe06f          	j	8000b93c <tinst_tests_gpf+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000ccd0:	701c                	ld	a5,32(s0)
    8000ccd2:	00020597          	auipc	a1,0x20
    8000ccd6:	6a658593          	addi	a1,a1,1702 # 8002d378 <__func__.0+0x2c0>
    8000ccda:	e399                	bnez	a5,8000cce0 <tinst_tests_gpf+0x1a2c>
    8000ccdc:	d05fe06f          	j	8000b9e0 <tinst_tests_gpf+0x72c>
    8000cce0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cce2:	0016f713          	andi	a4,a3,1
    8000cce6:	7c071463          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ccea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ccee:	460d                	li	a2,3
    8000ccf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ccf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ccf6:	00c59763          	bne	a1,a2,8000cd04 <tinst_tests_gpf+0x1a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ccfa:	0026d683          	lhu	a3,2(a3)
    8000ccfe:	0106969b          	slliw	a3,a3,0x10
    8000cd02:	8f55                	or	a4,a4,a3
    8000cd04:	01f076b7          	lui	a3,0x1f07
    8000cd08:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cd0c:	8f75                	and	a4,a4,a3
    8000cd0e:	00020597          	auipc	a1,0x20
    8000cd12:	66a58593          	addi	a1,a1,1642 # 8002d378 <__func__.0+0x2c0>
    8000cd16:	00e79463          	bne	a5,a4,8000cd1e <tinst_tests_gpf+0x1a6a>
    8000cd1a:	cc7fe06f          	j	8000b9e0 <tinst_tests_gpf+0x72c>
    8000cd1e:	00020597          	auipc	a1,0x20
    8000cd22:	66a58593          	addi	a1,a1,1642 # 8002d388 <__func__.0+0x2d0>
    8000cd26:	cbbfe06f          	j	8000b9e0 <tinst_tests_gpf+0x72c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000cd2a:	701c                	ld	a5,32(s0)
    8000cd2c:	00020597          	auipc	a1,0x20
    8000cd30:	64c58593          	addi	a1,a1,1612 # 8002d378 <__func__.0+0x2c0>
    8000cd34:	e399                	bnez	a5,8000cd3a <tinst_tests_gpf+0x1a86>
    8000cd36:	fa9fe06f          	j	8000bcde <tinst_tests_gpf+0xa2a>
    8000cd3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd3c:	0016f713          	andi	a4,a3,1
    8000cd40:	76071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd44:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd48:	460d                	li	a2,3
    8000cd4a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd4e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd50:	00c59763          	bne	a1,a2,8000cd5e <tinst_tests_gpf+0x1aaa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cd54:	0026d683          	lhu	a3,2(a3)
    8000cd58:	0106969b          	slliw	a3,a3,0x10
    8000cd5c:	8f55                	or	a4,a4,a3
    8000cd5e:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd62:	068e                	slli	a3,a3,0x3
    8000cd64:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd66:	8f75                	and	a4,a4,a3
    8000cd68:	00020597          	auipc	a1,0x20
    8000cd6c:	61058593          	addi	a1,a1,1552 # 8002d378 <__func__.0+0x2c0>
    8000cd70:	00e79463          	bne	a5,a4,8000cd78 <tinst_tests_gpf+0x1ac4>
    8000cd74:	f6bfe06f          	j	8000bcde <tinst_tests_gpf+0xa2a>
    8000cd78:	00020597          	auipc	a1,0x20
    8000cd7c:	61058593          	addi	a1,a1,1552 # 8002d388 <__func__.0+0x2d0>
    8000cd80:	f5ffe06f          	j	8000bcde <tinst_tests_gpf+0xa2a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000cd84:	701c                	ld	a5,32(s0)
    8000cd86:	00020597          	auipc	a1,0x20
    8000cd8a:	5f258593          	addi	a1,a1,1522 # 8002d378 <__func__.0+0x2c0>
    8000cd8e:	e399                	bnez	a5,8000cd94 <tinst_tests_gpf+0x1ae0>
    8000cd90:	ff3fe06f          	j	8000bd82 <tinst_tests_gpf+0xace>
    8000cd94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd96:	0016f713          	andi	a4,a3,1
    8000cd9a:	70071a63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cda2:	460d                	li	a2,3
    8000cda4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cda8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdaa:	00c59763          	bne	a1,a2,8000cdb8 <tinst_tests_gpf+0x1b04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cdae:	0026d683          	lhu	a3,2(a3)
    8000cdb2:	0106969b          	slliw	a3,a3,0x10
    8000cdb6:	8f55                	or	a4,a4,a3
    8000cdb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000cdbc:	068e                	slli	a3,a3,0x3
    8000cdbe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cdc0:	8f75                	and	a4,a4,a3
    8000cdc2:	00020597          	auipc	a1,0x20
    8000cdc6:	5b658593          	addi	a1,a1,1462 # 8002d378 <__func__.0+0x2c0>
    8000cdca:	00e79463          	bne	a5,a4,8000cdd2 <tinst_tests_gpf+0x1b1e>
    8000cdce:	fb5fe06f          	j	8000bd82 <tinst_tests_gpf+0xace>
    8000cdd2:	00020597          	auipc	a1,0x20
    8000cdd6:	5b658593          	addi	a1,a1,1462 # 8002d388 <__func__.0+0x2d0>
    8000cdda:	fa9fe06f          	j	8000bd82 <tinst_tests_gpf+0xace>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000cdde:	701c                	ld	a5,32(s0)
    8000cde0:	00020597          	auipc	a1,0x20
    8000cde4:	59858593          	addi	a1,a1,1432 # 8002d378 <__func__.0+0x2c0>
    8000cde8:	e399                	bnez	a5,8000cdee <tinst_tests_gpf+0x1b3a>
    8000cdea:	83aff06f          	j	8000be24 <tinst_tests_gpf+0xb70>
    8000cdee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cdf0:	0016f713          	andi	a4,a3,1
    8000cdf4:	6a071d63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cdf8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cdfc:	460d                	li	a2,3
    8000cdfe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce02:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce04:	00c59763          	bne	a1,a2,8000ce12 <tinst_tests_gpf+0x1b5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce08:	0026d683          	lhu	a3,2(a3)
    8000ce0c:	0106969b          	slliw	a3,a3,0x10
    8000ce10:	8f55                	or	a4,a4,a3
    8000ce12:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce16:	068e                	slli	a3,a3,0x3
    8000ce18:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce1a:	8f75                	and	a4,a4,a3
    8000ce1c:	00020597          	auipc	a1,0x20
    8000ce20:	55c58593          	addi	a1,a1,1372 # 8002d378 <__func__.0+0x2c0>
    8000ce24:	00e79463          	bne	a5,a4,8000ce2c <tinst_tests_gpf+0x1b78>
    8000ce28:	ffdfe06f          	j	8000be24 <tinst_tests_gpf+0xb70>
    8000ce2c:	00020597          	auipc	a1,0x20
    8000ce30:	55c58593          	addi	a1,a1,1372 # 8002d388 <__func__.0+0x2d0>
    8000ce34:	ff1fe06f          	j	8000be24 <tinst_tests_gpf+0xb70>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000ce38:	701c                	ld	a5,32(s0)
    8000ce3a:	00020597          	auipc	a1,0x20
    8000ce3e:	53e58593          	addi	a1,a1,1342 # 8002d378 <__func__.0+0x2c0>
    8000ce42:	e399                	bnez	a5,8000ce48 <tinst_tests_gpf+0x1b94>
    8000ce44:	882ff06f          	j	8000bec6 <tinst_tests_gpf+0xc12>
    8000ce48:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce4a:	0016f713          	andi	a4,a3,1
    8000ce4e:	66071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce52:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce56:	460d                	li	a2,3
    8000ce58:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce5c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce5e:	00c59763          	bne	a1,a2,8000ce6c <tinst_tests_gpf+0x1bb8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce62:	0026d683          	lhu	a3,2(a3)
    8000ce66:	0106969b          	slliw	a3,a3,0x10
    8000ce6a:	8f55                	or	a4,a4,a3
    8000ce6c:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce70:	068e                	slli	a3,a3,0x3
    8000ce72:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce74:	8f75                	and	a4,a4,a3
    8000ce76:	00020597          	auipc	a1,0x20
    8000ce7a:	50258593          	addi	a1,a1,1282 # 8002d378 <__func__.0+0x2c0>
    8000ce7e:	00e79463          	bne	a5,a4,8000ce86 <tinst_tests_gpf+0x1bd2>
    8000ce82:	844ff06f          	j	8000bec6 <tinst_tests_gpf+0xc12>
    8000ce86:	00020597          	auipc	a1,0x20
    8000ce8a:	50258593          	addi	a1,a1,1282 # 8002d388 <__func__.0+0x2d0>
    8000ce8e:	838ff06f          	j	8000bec6 <tinst_tests_gpf+0xc12>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000ce92:	701c                	ld	a5,32(s0)
    8000ce94:	e399                	bnez	a5,8000ce9a <tinst_tests_gpf+0x1be6>
    8000ce96:	e7efe06f          	j	8000b514 <tinst_tests_gpf+0x260>
    8000ce9a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce9c:	0016f713          	andi	a4,a3,1
    8000cea0:	60071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cea4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cea8:	460d                	li	a2,3
    8000ceaa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ceae:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ceb0:	00c59763          	bne	a1,a2,8000cebe <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ceb4:	0026d683          	lhu	a3,2(a3)
    8000ceb8:	0106969b          	slliw	a3,a3,0x10
    8000cebc:	8f55                	or	a4,a4,a3
    8000cebe:	1746                	slli	a4,a4,0x31
    8000cec0:	9345                	srli	a4,a4,0x31
    8000cec2:	00e78463          	beq	a5,a4,8000ceca <tinst_tests_gpf+0x1c16>
    8000cec6:	e3afe06f          	j	8000b500 <tinst_tests_gpf+0x24c>
    8000ceca:	e4afe06f          	j	8000b514 <tinst_tests_gpf+0x260>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000cece:	701c                	ld	a5,32(s0)
    8000ced0:	e399                	bnez	a5,8000ced6 <tinst_tests_gpf+0x1c22>
    8000ced2:	ee4fe06f          	j	8000b5b6 <tinst_tests_gpf+0x302>
    8000ced6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ced8:	0016f713          	andi	a4,a3,1
    8000cedc:	5c071963          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cee0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cee4:	460d                	li	a2,3
    8000cee6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ceea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ceec:	00c59763          	bne	a1,a2,8000cefa <tinst_tests_gpf+0x1c46>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cef0:	0026d683          	lhu	a3,2(a3)
    8000cef4:	0106969b          	slliw	a3,a3,0x10
    8000cef8:	8f55                	or	a4,a4,a3
    8000cefa:	1746                	slli	a4,a4,0x31
    8000cefc:	9345                	srli	a4,a4,0x31
    8000cefe:	00e78463          	beq	a5,a4,8000cf06 <tinst_tests_gpf+0x1c52>
    8000cf02:	ea0fe06f          	j	8000b5a2 <tinst_tests_gpf+0x2ee>
    8000cf06:	eb0fe06f          	j	8000b5b6 <tinst_tests_gpf+0x302>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cf0a:	6418                	ld	a4,8(s0)
    8000cf0c:	47d5                	li	a5,21
    8000cf0e:	00f70463          	beq	a4,a5,8000cf16 <tinst_tests_gpf+0x1c62>
    8000cf12:	ffefe06f          	j	8000b710 <tinst_tests_gpf+0x45c>
    8000cf16:	7018                	ld	a4,32(s0)
    8000cf18:	e319                	bnez	a4,8000cf1e <tinst_tests_gpf+0x1c6a>
    8000cf1a:	ff8fe06f          	j	8000b712 <tinst_tests_gpf+0x45e>
    8000cf1e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf20:	0016f793          	andi	a5,a3,1
    8000cf24:	58079563          	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf28:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf2c:	460d                	li	a2,3
    8000cf2e:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cf32:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cf34:	00c59763          	bne	a1,a2,8000cf42 <tinst_tests_gpf+0x1c8e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf38:	0026d683          	lhu	a3,2(a3)
    8000cf3c:	0106969b          	slliw	a3,a3,0x10
    8000cf40:	8fd5                	or	a5,a5,a3
    8000cf42:	17c6                	slli	a5,a5,0x31
    8000cf44:	0317d493          	srli	s1,a5,0x31
    8000cf48:	8c99                	sub	s1,s1,a4
    8000cf4a:	0014b493          	seqz	s1,s1
    8000cf4e:	fc4fe06f          	j	8000b712 <tinst_tests_gpf+0x45e>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000cf52:	6418                	ld	a4,8(s0)
    8000cf54:	47dd                	li	a5,23
    8000cf56:	00020597          	auipc	a1,0x20
    8000cf5a:	43258593          	addi	a1,a1,1074 # 8002d388 <__func__.0+0x2d0>
    8000cf5e:	00f70463          	beq	a4,a5,8000cf66 <tinst_tests_gpf+0x1cb2>
    8000cf62:	ffbfe06f          	j	8000bf5c <tinst_tests_gpf+0xca8>
    8000cf66:	701c                	ld	a5,32(s0)
    8000cf68:	00020597          	auipc	a1,0x20
    8000cf6c:	41058593          	addi	a1,a1,1040 # 8002d378 <__func__.0+0x2c0>
    8000cf70:	e399                	bnez	a5,8000cf76 <tinst_tests_gpf+0x1cc2>
    8000cf72:	febfe06f          	j	8000bf5c <tinst_tests_gpf+0xca8>
    8000cf76:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf78:	0016f713          	andi	a4,a3,1
    8000cf7c:	52071963          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf80:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf84:	460d                	li	a2,3
    8000cf86:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf8a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf8c:	00c59763          	bne	a1,a2,8000cf9a <tinst_tests_gpf+0x1ce6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf90:	0026d683          	lhu	a3,2(a3)
    8000cf94:	0106969b          	slliw	a3,a3,0x10
    8000cf98:	8f55                	or	a4,a4,a3
    8000cf9a:	1ffe16b7          	lui	a3,0x1ffe1
    8000cf9e:	068e                	slli	a3,a3,0x3
    8000cfa0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cfa2:	8f75                	and	a4,a4,a3
    8000cfa4:	00020597          	auipc	a1,0x20
    8000cfa8:	3d458593          	addi	a1,a1,980 # 8002d378 <__func__.0+0x2c0>
    8000cfac:	00e78463          	beq	a5,a4,8000cfb4 <tinst_tests_gpf+0x1d00>
    8000cfb0:	fa5fe06f          	j	8000bf54 <tinst_tests_gpf+0xca0>
    8000cfb4:	fa9fe06f          	j	8000bf5c <tinst_tests_gpf+0xca8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cfb8:	6418                	ld	a4,8(s0)
    8000cfba:	47d5                	li	a5,21
    8000cfbc:	00f70463          	beq	a4,a5,8000cfc4 <tinst_tests_gpf+0x1d10>
    8000cfc0:	feafe06f          	j	8000b7aa <tinst_tests_gpf+0x4f6>
    8000cfc4:	7018                	ld	a4,32(s0)
    8000cfc6:	e319                	bnez	a4,8000cfcc <tinst_tests_gpf+0x1d18>
    8000cfc8:	fe4fe06f          	j	8000b7ac <tinst_tests_gpf+0x4f8>
    8000cfcc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cfce:	0016f793          	andi	a5,a3,1
    8000cfd2:	4c079e63          	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cfd6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cfda:	460d                	li	a2,3
    8000cfdc:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cfe0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cfe2:	00c59763          	bne	a1,a2,8000cff0 <tinst_tests_gpf+0x1d3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cfe6:	0026d683          	lhu	a3,2(a3)
    8000cfea:	0106969b          	slliw	a3,a3,0x10
    8000cfee:	8fd5                	or	a5,a5,a3
    8000cff0:	17c6                	slli	a5,a5,0x31
    8000cff2:	0317d493          	srli	s1,a5,0x31
    8000cff6:	8c99                	sub	s1,s1,a4
    8000cff8:	0014b493          	seqz	s1,s1
    8000cffc:	fb0fe06f          	j	8000b7ac <tinst_tests_gpf+0x4f8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000d000:	6418                	ld	a4,8(s0)
    8000d002:	47dd                	li	a5,23
    8000d004:	00020597          	auipc	a1,0x20
    8000d008:	38458593          	addi	a1,a1,900 # 8002d388 <__func__.0+0x2d0>
    8000d00c:	00f70463          	beq	a4,a5,8000d014 <tinst_tests_gpf+0x1d60>
    8000d010:	fe3fe06f          	j	8000bff2 <tinst_tests_gpf+0xd3e>
    8000d014:	701c                	ld	a5,32(s0)
    8000d016:	00020597          	auipc	a1,0x20
    8000d01a:	36258593          	addi	a1,a1,866 # 8002d378 <__func__.0+0x2c0>
    8000d01e:	e399                	bnez	a5,8000d024 <tinst_tests_gpf+0x1d70>
    8000d020:	fd3fe06f          	j	8000bff2 <tinst_tests_gpf+0xd3e>
    8000d024:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d026:	0016f713          	andi	a4,a3,1
    8000d02a:	48071263          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d02e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d032:	460d                	li	a2,3
    8000d034:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d038:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d03a:	00c59763          	bne	a1,a2,8000d048 <tinst_tests_gpf+0x1d94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d03e:	0026d683          	lhu	a3,2(a3)
    8000d042:	0106969b          	slliw	a3,a3,0x10
    8000d046:	8f55                	or	a4,a4,a3
    8000d048:	1ffe16b7          	lui	a3,0x1ffe1
    8000d04c:	068e                	slli	a3,a3,0x3
    8000d04e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d050:	8f75                	and	a4,a4,a3
    8000d052:	00020597          	auipc	a1,0x20
    8000d056:	32658593          	addi	a1,a1,806 # 8002d378 <__func__.0+0x2c0>
    8000d05a:	00e78463          	beq	a5,a4,8000d062 <tinst_tests_gpf+0x1dae>
    8000d05e:	f8dfe06f          	j	8000bfea <tinst_tests_gpf+0xd36>
    8000d062:	f91fe06f          	j	8000bff2 <tinst_tests_gpf+0xd3e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d066:	6418                	ld	a4,8(s0)
    8000d068:	47dd                	li	a5,23
    8000d06a:	00f70463          	beq	a4,a5,8000d072 <tinst_tests_gpf+0x1dbe>
    8000d06e:	fd8fe06f          	j	8000b846 <tinst_tests_gpf+0x592>
    8000d072:	701c                	ld	a5,32(s0)
    8000d074:	e399                	bnez	a5,8000d07a <tinst_tests_gpf+0x1dc6>
    8000d076:	fd2fe06f          	j	8000b848 <tinst_tests_gpf+0x594>
    8000d07a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d07c:	0016f713          	andi	a4,a3,1
    8000d080:	42071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d084:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d088:	460d                	li	a2,3
    8000d08a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d08e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d090:	00c59763          	bne	a1,a2,8000d09e <tinst_tests_gpf+0x1dea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d094:	0026d683          	lhu	a3,2(a3)
    8000d098:	0106969b          	slliw	a3,a3,0x10
    8000d09c:	8f55                	or	a4,a4,a3
    8000d09e:	01f076b7          	lui	a3,0x1f07
    8000d0a2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d0a6:	8f75                	and	a4,a4,a3
    8000d0a8:	40f704b3          	sub	s1,a4,a5
    8000d0ac:	0014b493          	seqz	s1,s1
    8000d0b0:	f98fe06f          	j	8000b848 <tinst_tests_gpf+0x594>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d0b4:	6418                	ld	a4,8(s0)
    8000d0b6:	47dd                	li	a5,23
    8000d0b8:	00f70463          	beq	a4,a5,8000d0c0 <tinst_tests_gpf+0x1e0c>
    8000d0bc:	82bfe06f          	j	8000b8e6 <tinst_tests_gpf+0x632>
    8000d0c0:	701c                	ld	a5,32(s0)
    8000d0c2:	e399                	bnez	a5,8000d0c8 <tinst_tests_gpf+0x1e14>
    8000d0c4:	825fe06f          	j	8000b8e8 <tinst_tests_gpf+0x634>
    8000d0c8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d0ca:	0016f713          	andi	a4,a3,1
    8000d0ce:	3e071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d0d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d0d6:	460d                	li	a2,3
    8000d0d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d0dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d0de:	00c59763          	bne	a1,a2,8000d0ec <tinst_tests_gpf+0x1e38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d0e2:	0026d683          	lhu	a3,2(a3)
    8000d0e6:	0106969b          	slliw	a3,a3,0x10
    8000d0ea:	8f55                	or	a4,a4,a3
    8000d0ec:	01f076b7          	lui	a3,0x1f07
    8000d0f0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d0f4:	8f75                	and	a4,a4,a3
    8000d0f6:	40f704b3          	sub	s1,a4,a5
    8000d0fa:	0014b493          	seqz	s1,s1
    8000d0fe:	feafe06f          	j	8000b8e8 <tinst_tests_gpf+0x634>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d102:	6418                	ld	a4,8(s0)
    8000d104:	47dd                	li	a5,23
    8000d106:	00f70463          	beq	a4,a5,8000d10e <tinst_tests_gpf+0x1e5a>
    8000d10a:	87ffe06f          	j	8000b988 <tinst_tests_gpf+0x6d4>
    8000d10e:	701c                	ld	a5,32(s0)
    8000d110:	e399                	bnez	a5,8000d116 <tinst_tests_gpf+0x1e62>
    8000d112:	879fe06f          	j	8000b98a <tinst_tests_gpf+0x6d6>
    8000d116:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d118:	0016f713          	andi	a4,a3,1
    8000d11c:	38071963          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d120:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d124:	460d                	li	a2,3
    8000d126:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d12a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d12c:	00c59763          	bne	a1,a2,8000d13a <tinst_tests_gpf+0x1e86>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d130:	0026d683          	lhu	a3,2(a3)
    8000d134:	0106969b          	slliw	a3,a3,0x10
    8000d138:	8f55                	or	a4,a4,a3
    8000d13a:	01f076b7          	lui	a3,0x1f07
    8000d13e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d142:	8f75                	and	a4,a4,a3
    8000d144:	40f704b3          	sub	s1,a4,a5
    8000d148:	0014b493          	seqz	s1,s1
    8000d14c:	83ffe06f          	j	8000b98a <tinst_tests_gpf+0x6d6>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d150:	6418                	ld	a4,8(s0)
    8000d152:	47dd                	li	a5,23
    8000d154:	00f70463          	beq	a4,a5,8000d15c <tinst_tests_gpf+0x1ea8>
    8000d158:	8d5fe06f          	j	8000ba2c <tinst_tests_gpf+0x778>
    8000d15c:	701c                	ld	a5,32(s0)
    8000d15e:	e399                	bnez	a5,8000d164 <tinst_tests_gpf+0x1eb0>
    8000d160:	8cffe06f          	j	8000ba2e <tinst_tests_gpf+0x77a>
    8000d164:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d166:	0016f713          	andi	a4,a3,1
    8000d16a:	34071263          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d16e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d172:	460d                	li	a2,3
    8000d174:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d178:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d17a:	00c59763          	bne	a1,a2,8000d188 <tinst_tests_gpf+0x1ed4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d17e:	0026d683          	lhu	a3,2(a3)
    8000d182:	0106969b          	slliw	a3,a3,0x10
    8000d186:	8f55                	or	a4,a4,a3
    8000d188:	01f076b7          	lui	a3,0x1f07
    8000d18c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d190:	8f75                	and	a4,a4,a3
    8000d192:	40f704b3          	sub	s1,a4,a5
    8000d196:	0014b493          	seqz	s1,s1
    8000d19a:	895fe06f          	j	8000ba2e <tinst_tests_gpf+0x77a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d19e:	6418                	ld	a4,8(s0)
    8000d1a0:	47d5                	li	a5,21
    8000d1a2:	00f70463          	beq	a4,a5,8000d1aa <tinst_tests_gpf+0x1ef6>
    8000d1a6:	91bfe06f          	j	8000bac0 <tinst_tests_gpf+0x80c>
    8000d1aa:	02043903          	ld	s2,32(s0)
    8000d1ae:	00091463          	bnez	s2,8000d1b6 <tinst_tests_gpf+0x1f02>
    8000d1b2:	911fe06f          	j	8000bac2 <tinst_tests_gpf+0x80e>
    8000d1b6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d1b8:	0017f713          	andi	a4,a5,1
    8000d1bc:	2e071963          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1c0:	0007d503          	lhu	a0,0(a5)
    8000d1c4:	d7cf40ef          	jal	80001740 <expand_compressed_instruction>
    8000d1c8:	67a1                	lui	a5,0x8
    8000d1ca:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d1cc:	00f574b3          	and	s1,a0,a5
    8000d1d0:	412484b3          	sub	s1,s1,s2
    8000d1d4:	0014b493          	seqz	s1,s1
    8000d1d8:	8ebfe06f          	j	8000bac2 <tinst_tests_gpf+0x80e>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d1dc:	6418                	ld	a4,8(s0)
    8000d1de:	47d5                	li	a5,21
    8000d1e0:	00f70463          	beq	a4,a5,8000d1e8 <tinst_tests_gpf+0x1f34>
    8000d1e4:	973fe06f          	j	8000bb56 <tinst_tests_gpf+0x8a2>
    8000d1e8:	02043983          	ld	s3,32(s0)
    8000d1ec:	00099463          	bnez	s3,8000d1f4 <tinst_tests_gpf+0x1f40>
    8000d1f0:	969fe06f          	j	8000bb58 <tinst_tests_gpf+0x8a4>
    8000d1f4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d1f6:	0017f713          	andi	a4,a5,1
    8000d1fa:	2a071a63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1fe:	0007d503          	lhu	a0,0(a5)
    8000d202:	d3ef40ef          	jal	80001740 <expand_compressed_instruction>
    8000d206:	67a1                	lui	a5,0x8
    8000d208:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d20a:	00f574b3          	and	s1,a0,a5
    8000d20e:	413484b3          	sub	s1,s1,s3
    8000d212:	0014b493          	seqz	s1,s1
    8000d216:	943fe06f          	j	8000bb58 <tinst_tests_gpf+0x8a4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d21a:	6418                	ld	a4,8(s0)
    8000d21c:	47dd                	li	a5,23
    8000d21e:	00f70463          	beq	a4,a5,8000d226 <tinst_tests_gpf+0x1f72>
    8000d222:	9cbfe06f          	j	8000bbec <tinst_tests_gpf+0x938>
    8000d226:	02043983          	ld	s3,32(s0)
    8000d22a:	00099463          	bnez	s3,8000d232 <tinst_tests_gpf+0x1f7e>
    8000d22e:	9c1fe06f          	j	8000bbee <tinst_tests_gpf+0x93a>
    8000d232:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d234:	0017f713          	andi	a4,a5,1
    8000d238:	26071b63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d23c:	0007d503          	lhu	a0,0(a5)
    8000d240:	d00f40ef          	jal	80001740 <expand_compressed_instruction>
    8000d244:	01f077b7          	lui	a5,0x1f07
    8000d248:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d24c:	00f574b3          	and	s1,a0,a5
    8000d250:	413484b3          	sub	s1,s1,s3
    8000d254:	0014b493          	seqz	s1,s1
    8000d258:	997fe06f          	j	8000bbee <tinst_tests_gpf+0x93a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d25c:	701c                	ld	a5,32(s0)
    8000d25e:	e399                	bnez	a5,8000d264 <tinst_tests_gpf+0x1fb0>
    8000d260:	b59fe06f          	j	8000bdb8 <tinst_tests_gpf+0xb04>
    8000d264:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d266:	0016f713          	andi	a4,a3,1
    8000d26a:	24071263          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d26e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d272:	460d                	li	a2,3
    8000d274:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d278:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d27a:	00c59763          	bne	a1,a2,8000d288 <tinst_tests_gpf+0x1fd4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d27e:	0026d683          	lhu	a3,2(a3)
    8000d282:	0106969b          	slliw	a3,a3,0x10
    8000d286:	8f55                	or	a4,a4,a3
    8000d288:	1ffe16b7          	lui	a3,0x1ffe1
    8000d28c:	068e                	slli	a3,a3,0x3
    8000d28e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d290:	8f75                	and	a4,a4,a3
    8000d292:	00e78463          	beq	a5,a4,8000d29a <tinst_tests_gpf+0x1fe6>
    8000d296:	b0ffe06f          	j	8000bda4 <tinst_tests_gpf+0xaf0>
    8000d29a:	b1ffe06f          	j	8000bdb8 <tinst_tests_gpf+0xb04>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d29e:	02043903          	ld	s2,32(s0)
    8000d2a2:	64091be3          	bnez	s2,8000e0f8 <tinst_tests_gpf+0x2e44>
    8000d2a6:	00020597          	auipc	a1,0x20
    8000d2aa:	0d258593          	addi	a1,a1,210 # 8002d378 <__func__.0+0x2c0>
    8000d2ae:	fc6fe06f          	j	8000ba74 <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d2b2:	701c                	ld	a5,32(s0)
    8000d2b4:	e399                	bnez	a5,8000d2ba <tinst_tests_gpf+0x2006>
    8000d2b6:	ba5fe06f          	j	8000be5a <tinst_tests_gpf+0xba6>
    8000d2ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2bc:	0016f713          	andi	a4,a3,1
    8000d2c0:	1e071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2c8:	460d                	li	a2,3
    8000d2ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2d0:	00c59763          	bne	a1,a2,8000d2de <tinst_tests_gpf+0x202a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2d4:	0026d683          	lhu	a3,2(a3)
    8000d2d8:	0106969b          	slliw	a3,a3,0x10
    8000d2dc:	8f55                	or	a4,a4,a3
    8000d2de:	1ffe16b7          	lui	a3,0x1ffe1
    8000d2e2:	068e                	slli	a3,a3,0x3
    8000d2e4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d2e6:	8f75                	and	a4,a4,a3
    8000d2e8:	00e78463          	beq	a5,a4,8000d2f0 <tinst_tests_gpf+0x203c>
    8000d2ec:	b5bfe06f          	j	8000be46 <tinst_tests_gpf+0xb92>
    8000d2f0:	b6bfe06f          	j	8000be5a <tinst_tests_gpf+0xba6>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d2f4:	02043983          	ld	s3,32(s0)
    8000d2f8:	660997e3          	bnez	s3,8000e166 <tinst_tests_gpf+0x2eb2>
    8000d2fc:	00020597          	auipc	a1,0x20
    8000d300:	07c58593          	addi	a1,a1,124 # 8002d378 <__func__.0+0x2c0>
    8000d304:	807fe06f          	j	8000bb0a <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d308:	701c                	ld	a5,32(s0)
    8000d30a:	e399                	bnez	a5,8000d310 <tinst_tests_gpf+0x205c>
    8000d30c:	bf1fe06f          	j	8000befc <tinst_tests_gpf+0xc48>
    8000d310:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d312:	0016f713          	andi	a4,a3,1
    8000d316:	18071c63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d31a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d31e:	460d                	li	a2,3
    8000d320:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d324:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d326:	00c59763          	bne	a1,a2,8000d334 <tinst_tests_gpf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d32a:	0026d683          	lhu	a3,2(a3)
    8000d32e:	0106969b          	slliw	a3,a3,0x10
    8000d332:	8f55                	or	a4,a4,a3
    8000d334:	1ffe16b7          	lui	a3,0x1ffe1
    8000d338:	068e                	slli	a3,a3,0x3
    8000d33a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d33c:	8f75                	and	a4,a4,a3
    8000d33e:	00e78463          	beq	a5,a4,8000d346 <tinst_tests_gpf+0x2092>
    8000d342:	ba7fe06f          	j	8000bee8 <tinst_tests_gpf+0xc34>
    8000d346:	bb7fe06f          	j	8000befc <tinst_tests_gpf+0xc48>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d34a:	02043983          	ld	s3,32(s0)
    8000d34e:	6c0994e3          	bnez	s3,8000e216 <tinst_tests_gpf+0x2f62>
    8000d352:	00020597          	auipc	a1,0x20
    8000d356:	02658593          	addi	a1,a1,38 # 8002d378 <__func__.0+0x2c0>
    8000d35a:	847fe06f          	j	8000bba0 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d35e:	701c                	ld	a5,32(s0)
    8000d360:	e399                	bnez	a5,8000d366 <tinst_tests_gpf+0x20b2>
    8000d362:	c31fe06f          	j	8000bf92 <tinst_tests_gpf+0xcde>
    8000d366:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d368:	0016f713          	andi	a4,a3,1
    8000d36c:	14071163          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d370:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d374:	460d                	li	a2,3
    8000d376:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d37a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d37c:	00c59763          	bne	a1,a2,8000d38a <tinst_tests_gpf+0x20d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d380:	0026d683          	lhu	a3,2(a3)
    8000d384:	0106969b          	slliw	a3,a3,0x10
    8000d388:	8f55                	or	a4,a4,a3
    8000d38a:	1ffe16b7          	lui	a3,0x1ffe1
    8000d38e:	068e                	slli	a3,a3,0x3
    8000d390:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d392:	8f75                	and	a4,a4,a3
    8000d394:	00e78463          	beq	a5,a4,8000d39c <tinst_tests_gpf+0x20e8>
    8000d398:	be7fe06f          	j	8000bf7e <tinst_tests_gpf+0xcca>
    8000d39c:	bf7fe06f          	j	8000bf92 <tinst_tests_gpf+0xcde>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d3a0:	02043903          	ld	s2,32(s0)
    8000d3a4:	6e0912e3          	bnez	s2,8000e288 <tinst_tests_gpf+0x2fd4>
    8000d3a8:	00020597          	auipc	a1,0x20
    8000d3ac:	fd058593          	addi	a1,a1,-48 # 8002d378 <__func__.0+0x2c0>
    8000d3b0:	887fe06f          	j	8000bc36 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d3b4:	7018                	ld	a4,32(s0)
    8000d3b6:	e319                	bnez	a4,8000d3bc <tinst_tests_gpf+0x2108>
    8000d3b8:	8e6fe06f          	j	8000b49e <tinst_tests_gpf+0x1ea>
    8000d3bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3be:	0016f793          	andi	a5,a3,1
    8000d3c2:	e7f5                	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3c4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3c8:	460d                	li	a2,3
    8000d3ca:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d3ce:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d3d0:	00c59763          	bne	a1,a2,8000d3de <tinst_tests_gpf+0x212a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3d4:	0026d683          	lhu	a3,2(a3)
    8000d3d8:	0106969b          	slliw	a3,a3,0x10
    8000d3dc:	8fd5                	or	a5,a5,a3
    8000d3de:	03179493          	slli	s1,a5,0x31
    8000d3e2:	90c5                	srli	s1,s1,0x31
    8000d3e4:	8c99                	sub	s1,s1,a4
    8000d3e6:	0014b493          	seqz	s1,s1
    8000d3ea:	8b4fe06f          	j	8000b49e <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d3ee:	7018                	ld	a4,32(s0)
    8000d3f0:	e319                	bnez	a4,8000d3f6 <tinst_tests_gpf+0x2142>
    8000d3f2:	942fe06f          	j	8000b534 <tinst_tests_gpf+0x280>
    8000d3f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f8:	0016f793          	andi	a5,a3,1
    8000d3fc:	ebcd                	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3fe:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d402:	460d                	li	a2,3
    8000d404:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d408:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d40a:	00c59763          	bne	a1,a2,8000d418 <tinst_tests_gpf+0x2164>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d40e:	0026d683          	lhu	a3,2(a3)
    8000d412:	0106969b          	slliw	a3,a3,0x10
    8000d416:	8fd5                	or	a5,a5,a3
    8000d418:	03179493          	slli	s1,a5,0x31
    8000d41c:	90c5                	srli	s1,s1,0x31
    8000d41e:	8c99                	sub	s1,s1,a4
    8000d420:	0014b493          	seqz	s1,s1
    8000d424:	910fe06f          	j	8000b534 <tinst_tests_gpf+0x280>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d428:	7018                	ld	a4,32(s0)
    8000d42a:	e319                	bnez	a4,8000d430 <tinst_tests_gpf+0x217c>
    8000d42c:	9aafe06f          	j	8000b5d6 <tinst_tests_gpf+0x322>
    8000d430:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d432:	0016f793          	andi	a5,a3,1
    8000d436:	efa5                	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d438:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d43c:	460d                	li	a2,3
    8000d43e:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d442:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d444:	00c59763          	bne	a1,a2,8000d452 <tinst_tests_gpf+0x219e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d448:	0026d683          	lhu	a3,2(a3)
    8000d44c:	0106969b          	slliw	a3,a3,0x10
    8000d450:	8fd5                	or	a5,a5,a3
    8000d452:	03179493          	slli	s1,a5,0x31
    8000d456:	90c5                	srli	s1,s1,0x31
    8000d458:	8c99                	sub	s1,s1,a4
    8000d45a:	0014b493          	seqz	s1,s1
    8000d45e:	978fe06f          	j	8000b5d6 <tinst_tests_gpf+0x322>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d462:	7018                	ld	a4,32(s0)
    8000d464:	e319                	bnez	a4,8000d46a <tinst_tests_gpf+0x21b6>
    8000d466:	a12fe06f          	j	8000b678 <tinst_tests_gpf+0x3c4>
    8000d46a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d46c:	0016f793          	andi	a5,a3,1
    8000d470:	ef9d                	bnez	a5,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d472:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d476:	460d                	li	a2,3
    8000d478:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d47c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d47e:	00c59763          	bne	a1,a2,8000d48c <tinst_tests_gpf+0x21d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d482:	0026d683          	lhu	a3,2(a3)
    8000d486:	0106969b          	slliw	a3,a3,0x10
    8000d48a:	8fd5                	or	a5,a5,a3
    8000d48c:	17c6                	slli	a5,a5,0x31
    8000d48e:	0317d493          	srli	s1,a5,0x31
    8000d492:	8c99                	sub	s1,s1,a4
    8000d494:	0014b493          	seqz	s1,s1
    8000d498:	9e0fe06f          	j	8000b678 <tinst_tests_gpf+0x3c4>
    8000d49c:	701c                	ld	a5,32(s0)
    8000d49e:	e399                	bnez	a5,8000d4a4 <tinst_tests_gpf+0x21f0>
    8000d4a0:	9b8fe06f          	j	8000b658 <tinst_tests_gpf+0x3a4>
    8000d4a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4a6:	0016f713          	andi	a4,a3,1
    8000d4aa:	320704e3          	beqz	a4,8000dfd2 <tinst_tests_gpf+0x2d1e>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000d4ae:	12300613          	li	a2,291
    8000d4b2:	0001e597          	auipc	a1,0x1e
    8000d4b6:	48e58593          	addi	a1,a1,1166 # 8002b940 <__func__.1>
    8000d4ba:	00022517          	auipc	a0,0x22
    8000d4be:	8b650513          	addi	a0,a0,-1866 # 8002ed70 <__func__.0+0x1cb8>
    8000d4c2:	1951d0ef          	jal	8002ae56 <printf>
    8000d4c6:	12300613          	li	a2,291
    8000d4ca:	0001e597          	auipc	a1,0x1e
    8000d4ce:	47658593          	addi	a1,a1,1142 # 8002b940 <__func__.1>
    8000d4d2:	00020517          	auipc	a0,0x20
    8000d4d6:	04e50513          	addi	a0,a0,78 # 8002d520 <__func__.0+0x468>
    8000d4da:	17d1d0ef          	jal	8002ae56 <printf>
    8000d4de:	4501                	li	a0,0
    8000d4e0:	52c1d0ef          	jal	8002aa0c <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000d4e4:	701c                	ld	a5,32(s0)
    8000d4e6:	00020597          	auipc	a1,0x20
    8000d4ea:	e9258593          	addi	a1,a1,-366 # 8002d378 <__func__.0+0x2c0>
    8000d4ee:	e399                	bnez	a5,8000d4f4 <tinst_tests_gpf+0x2240>
    8000d4f0:	ba5fe06f          	j	8000c094 <tinst_tests_gpf+0xde0>
    8000d4f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4f6:	0016f713          	andi	a4,a3,1
    8000d4fa:	fb55                	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d500:	460d                	li	a2,3
    8000d502:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d506:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d508:	00c59763          	bne	a1,a2,8000d516 <tinst_tests_gpf+0x2262>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d50c:	0026d683          	lhu	a3,2(a3)
    8000d510:	0106969b          	slliw	a3,a3,0x10
    8000d514:	8f55                	or	a4,a4,a3
    8000d516:	1ffe16b7          	lui	a3,0x1ffe1
    8000d51a:	068e                	slli	a3,a3,0x3
    8000d51c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d51e:	8f75                	and	a4,a4,a3
    8000d520:	00020597          	auipc	a1,0x20
    8000d524:	e5858593          	addi	a1,a1,-424 # 8002d378 <__func__.0+0x2c0>
    8000d528:	00e79463          	bne	a5,a4,8000d530 <tinst_tests_gpf+0x227c>
    8000d52c:	b69fe06f          	j	8000c094 <tinst_tests_gpf+0xde0>
    8000d530:	00020597          	auipc	a1,0x20
    8000d534:	e5858593          	addi	a1,a1,-424 # 8002d388 <__func__.0+0x2d0>
    8000d538:	b5dfe06f          	j	8000c094 <tinst_tests_gpf+0xde0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d53c:	701c                	ld	a5,32(s0)
    8000d53e:	e399                	bnez	a5,8000d544 <tinst_tests_gpf+0x2290>
    8000d540:	9bafe06f          	j	8000b6fa <tinst_tests_gpf+0x446>
    8000d544:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d546:	0016f713          	andi	a4,a3,1
    8000d54a:	f335                	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d54c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d550:	460d                	li	a2,3
    8000d552:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d556:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d558:	00c59763          	bne	a1,a2,8000d566 <tinst_tests_gpf+0x22b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d55c:	0026d683          	lhu	a3,2(a3)
    8000d560:	0106969b          	slliw	a3,a3,0x10
    8000d564:	8f55                	or	a4,a4,a3
    8000d566:	1746                	slli	a4,a4,0x31
    8000d568:	9345                	srli	a4,a4,0x31
    8000d56a:	00e78463          	beq	a5,a4,8000d572 <tinst_tests_gpf+0x22be>
    8000d56e:	978fe06f          	j	8000b6e6 <tinst_tests_gpf+0x432>
    8000d572:	988fe06f          	j	8000b6fa <tinst_tests_gpf+0x446>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000d576:	701c                	ld	a5,32(s0)
    8000d578:	00020597          	auipc	a1,0x20
    8000d57c:	e0058593          	addi	a1,a1,-512 # 8002d378 <__func__.0+0x2c0>
    8000d580:	e399                	bnez	a5,8000d586 <tinst_tests_gpf+0x22d2>
    8000d582:	bb5fe06f          	j	8000c136 <tinst_tests_gpf+0xe82>
    8000d586:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d588:	0016f713          	andi	a4,a3,1
    8000d58c:	f30d                	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d58e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d592:	460d                	li	a2,3
    8000d594:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d598:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d59a:	00c59763          	bne	a1,a2,8000d5a8 <tinst_tests_gpf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d59e:	0026d683          	lhu	a3,2(a3)
    8000d5a2:	0106969b          	slliw	a3,a3,0x10
    8000d5a6:	8f55                	or	a4,a4,a3
    8000d5a8:	1ffe16b7          	lui	a3,0x1ffe1
    8000d5ac:	068e                	slli	a3,a3,0x3
    8000d5ae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d5b0:	8f75                	and	a4,a4,a3
    8000d5b2:	00020597          	auipc	a1,0x20
    8000d5b6:	dc658593          	addi	a1,a1,-570 # 8002d378 <__func__.0+0x2c0>
    8000d5ba:	00e79463          	bne	a5,a4,8000d5c2 <tinst_tests_gpf+0x230e>
    8000d5be:	b79fe06f          	j	8000c136 <tinst_tests_gpf+0xe82>
    8000d5c2:	00020597          	auipc	a1,0x20
    8000d5c6:	dc658593          	addi	a1,a1,-570 # 8002d388 <__func__.0+0x2d0>
    8000d5ca:	b6dfe06f          	j	8000c136 <tinst_tests_gpf+0xe82>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d5ce:	701c                	ld	a5,32(s0)
    8000d5d0:	e399                	bnez	a5,8000d5d6 <tinst_tests_gpf+0x2322>
    8000d5d2:	9c2fe06f          	j	8000b794 <tinst_tests_gpf+0x4e0>
    8000d5d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5d8:	0016f713          	andi	a4,a3,1
    8000d5dc:	ec0719e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5e4:	460d                	li	a2,3
    8000d5e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5ec:	00c59763          	bne	a1,a2,8000d5fa <tinst_tests_gpf+0x2346>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5f0:	0026d683          	lhu	a3,2(a3)
    8000d5f4:	0106969b          	slliw	a3,a3,0x10
    8000d5f8:	8f55                	or	a4,a4,a3
    8000d5fa:	1746                	slli	a4,a4,0x31
    8000d5fc:	9345                	srli	a4,a4,0x31
    8000d5fe:	00e78463          	beq	a5,a4,8000d606 <tinst_tests_gpf+0x2352>
    8000d602:	97efe06f          	j	8000b780 <tinst_tests_gpf+0x4cc>
    8000d606:	98efe06f          	j	8000b794 <tinst_tests_gpf+0x4e0>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000d60a:	701c                	ld	a5,32(s0)
    8000d60c:	00020597          	auipc	a1,0x20
    8000d610:	d6c58593          	addi	a1,a1,-660 # 8002d378 <__func__.0+0x2c0>
    8000d614:	e399                	bnez	a5,8000d61a <tinst_tests_gpf+0x2366>
    8000d616:	bc3fe06f          	j	8000c1d8 <tinst_tests_gpf+0xf24>
    8000d61a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d61c:	0016f713          	andi	a4,a3,1
    8000d620:	e80717e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d624:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d628:	460d                	li	a2,3
    8000d62a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d62e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d630:	00c59763          	bne	a1,a2,8000d63e <tinst_tests_gpf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d634:	0026d683          	lhu	a3,2(a3)
    8000d638:	0106969b          	slliw	a3,a3,0x10
    8000d63c:	8f55                	or	a4,a4,a3
    8000d63e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d642:	068e                	slli	a3,a3,0x3
    8000d644:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d646:	8f75                	and	a4,a4,a3
    8000d648:	00020597          	auipc	a1,0x20
    8000d64c:	d3058593          	addi	a1,a1,-720 # 8002d378 <__func__.0+0x2c0>
    8000d650:	00e79463          	bne	a5,a4,8000d658 <tinst_tests_gpf+0x23a4>
    8000d654:	b85fe06f          	j	8000c1d8 <tinst_tests_gpf+0xf24>
    8000d658:	00020597          	auipc	a1,0x20
    8000d65c:	d3058593          	addi	a1,a1,-720 # 8002d388 <__func__.0+0x2d0>
    8000d660:	b79fe06f          	j	8000c1d8 <tinst_tests_gpf+0xf24>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d664:	701c                	ld	a5,32(s0)
    8000d666:	e399                	bnez	a5,8000d66c <tinst_tests_gpf+0x23b8>
    8000d668:	9c8fe06f          	j	8000b830 <tinst_tests_gpf+0x57c>
    8000d66c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d66e:	0016f713          	andi	a4,a3,1
    8000d672:	e2071ee3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d676:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d67a:	460d                	li	a2,3
    8000d67c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d680:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d682:	00c59763          	bne	a1,a2,8000d690 <tinst_tests_gpf+0x23dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d686:	0026d683          	lhu	a3,2(a3)
    8000d68a:	0106969b          	slliw	a3,a3,0x10
    8000d68e:	8f55                	or	a4,a4,a3
    8000d690:	01f076b7          	lui	a3,0x1f07
    8000d694:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d698:	8f75                	and	a4,a4,a3
    8000d69a:	00e78463          	beq	a5,a4,8000d6a2 <tinst_tests_gpf+0x23ee>
    8000d69e:	97efe06f          	j	8000b81c <tinst_tests_gpf+0x568>
    8000d6a2:	98efe06f          	j	8000b830 <tinst_tests_gpf+0x57c>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000d6a6:	701c                	ld	a5,32(s0)
    8000d6a8:	00020597          	auipc	a1,0x20
    8000d6ac:	cd058593          	addi	a1,a1,-816 # 8002d378 <__func__.0+0x2c0>
    8000d6b0:	e399                	bnez	a5,8000d6b6 <tinst_tests_gpf+0x2402>
    8000d6b2:	bc9fe06f          	j	8000c27a <tinst_tests_gpf+0xfc6>
    8000d6b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6b8:	0016f713          	andi	a4,a3,1
    8000d6bc:	de0719e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6c4:	460d                	li	a2,3
    8000d6c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6cc:	00c59763          	bne	a1,a2,8000d6da <tinst_tests_gpf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6d0:	0026d683          	lhu	a3,2(a3)
    8000d6d4:	0106969b          	slliw	a3,a3,0x10
    8000d6d8:	8f55                	or	a4,a4,a3
    8000d6da:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6de:	068e                	slli	a3,a3,0x3
    8000d6e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6e2:	8f75                	and	a4,a4,a3
    8000d6e4:	00020597          	auipc	a1,0x20
    8000d6e8:	c9458593          	addi	a1,a1,-876 # 8002d378 <__func__.0+0x2c0>
    8000d6ec:	00e79463          	bne	a5,a4,8000d6f4 <tinst_tests_gpf+0x2440>
    8000d6f0:	b8bfe06f          	j	8000c27a <tinst_tests_gpf+0xfc6>
    8000d6f4:	00020597          	auipc	a1,0x20
    8000d6f8:	c9458593          	addi	a1,a1,-876 # 8002d388 <__func__.0+0x2d0>
    8000d6fc:	b7ffe06f          	j	8000c27a <tinst_tests_gpf+0xfc6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d700:	701c                	ld	a5,32(s0)
    8000d702:	e399                	bnez	a5,8000d708 <tinst_tests_gpf+0x2454>
    8000d704:	9ccfe06f          	j	8000b8d0 <tinst_tests_gpf+0x61c>
    8000d708:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d70a:	0016f713          	andi	a4,a3,1
    8000d70e:	da0710e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d712:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d716:	460d                	li	a2,3
    8000d718:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d71c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d71e:	00c59763          	bne	a1,a2,8000d72c <tinst_tests_gpf+0x2478>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d722:	0026d683          	lhu	a3,2(a3)
    8000d726:	0106969b          	slliw	a3,a3,0x10
    8000d72a:	8f55                	or	a4,a4,a3
    8000d72c:	01f076b7          	lui	a3,0x1f07
    8000d730:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d734:	8f75                	and	a4,a4,a3
    8000d736:	00e78463          	beq	a5,a4,8000d73e <tinst_tests_gpf+0x248a>
    8000d73a:	982fe06f          	j	8000b8bc <tinst_tests_gpf+0x608>
    8000d73e:	992fe06f          	j	8000b8d0 <tinst_tests_gpf+0x61c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000d742:	701c                	ld	a5,32(s0)
    8000d744:	00020597          	auipc	a1,0x20
    8000d748:	c3458593          	addi	a1,a1,-972 # 8002d378 <__func__.0+0x2c0>
    8000d74c:	e399                	bnez	a5,8000d752 <tinst_tests_gpf+0x249e>
    8000d74e:	bd5fe06f          	j	8000c322 <tinst_tests_gpf+0x106e>
    8000d752:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d754:	0016f713          	andi	a4,a3,1
    8000d758:	d4071be3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d75c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d760:	460d                	li	a2,3
    8000d762:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d766:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d768:	00c59763          	bne	a1,a2,8000d776 <tinst_tests_gpf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d76c:	0026d683          	lhu	a3,2(a3)
    8000d770:	0106969b          	slliw	a3,a3,0x10
    8000d774:	8f55                	or	a4,a4,a3
    8000d776:	1ffe16b7          	lui	a3,0x1ffe1
    8000d77a:	068e                	slli	a3,a3,0x3
    8000d77c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d77e:	8f75                	and	a4,a4,a3
    8000d780:	00020597          	auipc	a1,0x20
    8000d784:	bf858593          	addi	a1,a1,-1032 # 8002d378 <__func__.0+0x2c0>
    8000d788:	00e79463          	bne	a5,a4,8000d790 <tinst_tests_gpf+0x24dc>
    8000d78c:	b97fe06f          	j	8000c322 <tinst_tests_gpf+0x106e>
    8000d790:	00020597          	auipc	a1,0x20
    8000d794:	bf858593          	addi	a1,a1,-1032 # 8002d388 <__func__.0+0x2d0>
    8000d798:	b8bfe06f          	j	8000c322 <tinst_tests_gpf+0x106e>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d79c:	701c                	ld	a5,32(s0)
    8000d79e:	e399                	bnez	a5,8000d7a4 <tinst_tests_gpf+0x24f0>
    8000d7a0:	9d2fe06f          	j	8000b972 <tinst_tests_gpf+0x6be>
    8000d7a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7a6:	0016f713          	andi	a4,a3,1
    8000d7aa:	d00712e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7ae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7b2:	460d                	li	a2,3
    8000d7b4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7b8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7ba:	00c59763          	bne	a1,a2,8000d7c8 <tinst_tests_gpf+0x2514>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7be:	0026d683          	lhu	a3,2(a3)
    8000d7c2:	0106969b          	slliw	a3,a3,0x10
    8000d7c6:	8f55                	or	a4,a4,a3
    8000d7c8:	01f076b7          	lui	a3,0x1f07
    8000d7cc:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d7d0:	8f75                	and	a4,a4,a3
    8000d7d2:	00e78463          	beq	a5,a4,8000d7da <tinst_tests_gpf+0x2526>
    8000d7d6:	988fe06f          	j	8000b95e <tinst_tests_gpf+0x6aa>
    8000d7da:	998fe06f          	j	8000b972 <tinst_tests_gpf+0x6be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000d7de:	701c                	ld	a5,32(s0)
    8000d7e0:	00020597          	auipc	a1,0x20
    8000d7e4:	b9858593          	addi	a1,a1,-1128 # 8002d378 <__func__.0+0x2c0>
    8000d7e8:	e399                	bnez	a5,8000d7ee <tinst_tests_gpf+0x253a>
    8000d7ea:	bdbfe06f          	j	8000c3c4 <tinst_tests_gpf+0x1110>
    8000d7ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7f0:	0016f713          	andi	a4,a3,1
    8000d7f4:	ca071de3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7fc:	460d                	li	a2,3
    8000d7fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d802:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d804:	00c59763          	bne	a1,a2,8000d812 <tinst_tests_gpf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d808:	0026d683          	lhu	a3,2(a3)
    8000d80c:	0106969b          	slliw	a3,a3,0x10
    8000d810:	8f55                	or	a4,a4,a3
    8000d812:	1ffe16b7          	lui	a3,0x1ffe1
    8000d816:	068e                	slli	a3,a3,0x3
    8000d818:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d81a:	8f75                	and	a4,a4,a3
    8000d81c:	00020597          	auipc	a1,0x20
    8000d820:	b5c58593          	addi	a1,a1,-1188 # 8002d378 <__func__.0+0x2c0>
    8000d824:	00e79463          	bne	a5,a4,8000d82c <tinst_tests_gpf+0x2578>
    8000d828:	b9dfe06f          	j	8000c3c4 <tinst_tests_gpf+0x1110>
    8000d82c:	00020597          	auipc	a1,0x20
    8000d830:	b5c58593          	addi	a1,a1,-1188 # 8002d388 <__func__.0+0x2d0>
    8000d834:	b91fe06f          	j	8000c3c4 <tinst_tests_gpf+0x1110>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d838:	701c                	ld	a5,32(s0)
    8000d83a:	e399                	bnez	a5,8000d840 <tinst_tests_gpf+0x258c>
    8000d83c:	9dafe06f          	j	8000ba16 <tinst_tests_gpf+0x762>
    8000d840:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d842:	0016f713          	andi	a4,a3,1
    8000d846:	c60714e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d84a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d84e:	460d                	li	a2,3
    8000d850:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d854:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d856:	00c59763          	bne	a1,a2,8000d864 <tinst_tests_gpf+0x25b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d85a:	0026d683          	lhu	a3,2(a3)
    8000d85e:	0106969b          	slliw	a3,a3,0x10
    8000d862:	8f55                	or	a4,a4,a3
    8000d864:	01f076b7          	lui	a3,0x1f07
    8000d868:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d86c:	8f75                	and	a4,a4,a3
    8000d86e:	00e78463          	beq	a5,a4,8000d876 <tinst_tests_gpf+0x25c2>
    8000d872:	990fe06f          	j	8000ba02 <tinst_tests_gpf+0x74e>
    8000d876:	9a0fe06f          	j	8000ba16 <tinst_tests_gpf+0x762>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000d87a:	701c                	ld	a5,32(s0)
    8000d87c:	00020597          	auipc	a1,0x20
    8000d880:	afc58593          	addi	a1,a1,-1284 # 8002d378 <__func__.0+0x2c0>
    8000d884:	e399                	bnez	a5,8000d88a <tinst_tests_gpf+0x25d6>
    8000d886:	be1fe06f          	j	8000c466 <tinst_tests_gpf+0x11b2>
    8000d88a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d88c:	0016f713          	andi	a4,a3,1
    8000d890:	c0071fe3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d894:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d898:	460d                	li	a2,3
    8000d89a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d89e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8a0:	00c59763          	bne	a1,a2,8000d8ae <tinst_tests_gpf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d8a4:	0026d683          	lhu	a3,2(a3)
    8000d8a8:	0106969b          	slliw	a3,a3,0x10
    8000d8ac:	8f55                	or	a4,a4,a3
    8000d8ae:	1ffe16b7          	lui	a3,0x1ffe1
    8000d8b2:	068e                	slli	a3,a3,0x3
    8000d8b4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d8b6:	8f75                	and	a4,a4,a3
    8000d8b8:	00020597          	auipc	a1,0x20
    8000d8bc:	ac058593          	addi	a1,a1,-1344 # 8002d378 <__func__.0+0x2c0>
    8000d8c0:	00e79463          	bne	a5,a4,8000d8c8 <tinst_tests_gpf+0x2614>
    8000d8c4:	ba3fe06f          	j	8000c466 <tinst_tests_gpf+0x11b2>
    8000d8c8:	00020597          	auipc	a1,0x20
    8000d8cc:	ac058593          	addi	a1,a1,-1344 # 8002d388 <__func__.0+0x2d0>
    8000d8d0:	b97fe06f          	j	8000c466 <tinst_tests_gpf+0x11b2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d8d4:	02043903          	ld	s2,32(s0)
    8000d8d8:	00091463          	bnez	s2,8000d8e0 <tinst_tests_gpf+0x262c>
    8000d8dc:	9cefe06f          	j	8000baaa <tinst_tests_gpf+0x7f6>
    8000d8e0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d8e2:	0017f713          	andi	a4,a5,1
    8000d8e6:	bc0714e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8ea:	0007d503          	lhu	a0,0(a5)
    8000d8ee:	e53f30ef          	jal	80001740 <expand_compressed_instruction>
    8000d8f2:	67a1                	lui	a5,0x8
    8000d8f4:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d8f6:	8d7d                	and	a0,a0,a5
    8000d8f8:	00a90463          	beq	s2,a0,8000d900 <tinst_tests_gpf+0x264c>
    8000d8fc:	99afe06f          	j	8000ba96 <tinst_tests_gpf+0x7e2>
    8000d900:	9aafe06f          	j	8000baaa <tinst_tests_gpf+0x7f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000d904:	701c                	ld	a5,32(s0)
    8000d906:	00020597          	auipc	a1,0x20
    8000d90a:	a7258593          	addi	a1,a1,-1422 # 8002d378 <__func__.0+0x2c0>
    8000d90e:	e399                	bnez	a5,8000d914 <tinst_tests_gpf+0x2660>
    8000d910:	bf9fe06f          	j	8000c508 <tinst_tests_gpf+0x1254>
    8000d914:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d916:	0016f713          	andi	a4,a3,1
    8000d91a:	b8071ae3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d91e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d922:	460d                	li	a2,3
    8000d924:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d928:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d92a:	00c59763          	bne	a1,a2,8000d938 <tinst_tests_gpf+0x2684>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d92e:	0026d683          	lhu	a3,2(a3)
    8000d932:	0106969b          	slliw	a3,a3,0x10
    8000d936:	8f55                	or	a4,a4,a3
    8000d938:	1ffe16b7          	lui	a3,0x1ffe1
    8000d93c:	068e                	slli	a3,a3,0x3
    8000d93e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d940:	8f75                	and	a4,a4,a3
    8000d942:	00020597          	auipc	a1,0x20
    8000d946:	a3658593          	addi	a1,a1,-1482 # 8002d378 <__func__.0+0x2c0>
    8000d94a:	00e79463          	bne	a5,a4,8000d952 <tinst_tests_gpf+0x269e>
    8000d94e:	bbbfe06f          	j	8000c508 <tinst_tests_gpf+0x1254>
    8000d952:	00020597          	auipc	a1,0x20
    8000d956:	a3658593          	addi	a1,a1,-1482 # 8002d388 <__func__.0+0x2d0>
    8000d95a:	baffe06f          	j	8000c508 <tinst_tests_gpf+0x1254>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d95e:	02043983          	ld	s3,32(s0)
    8000d962:	00099463          	bnez	s3,8000d96a <tinst_tests_gpf+0x26b6>
    8000d966:	9dafe06f          	j	8000bb40 <tinst_tests_gpf+0x88c>
    8000d96a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d96c:	0017f713          	andi	a4,a5,1
    8000d970:	b2071fe3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d974:	0007d503          	lhu	a0,0(a5)
    8000d978:	dc9f30ef          	jal	80001740 <expand_compressed_instruction>
    8000d97c:	67a1                	lui	a5,0x8
    8000d97e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d980:	8d7d                	and	a0,a0,a5
    8000d982:	00a98463          	beq	s3,a0,8000d98a <tinst_tests_gpf+0x26d6>
    8000d986:	9a6fe06f          	j	8000bb2c <tinst_tests_gpf+0x878>
    8000d98a:	9b6fe06f          	j	8000bb40 <tinst_tests_gpf+0x88c>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000d98e:	701c                	ld	a5,32(s0)
    8000d990:	00020597          	auipc	a1,0x20
    8000d994:	9e858593          	addi	a1,a1,-1560 # 8002d378 <__func__.0+0x2c0>
    8000d998:	e399                	bnez	a5,8000d99e <tinst_tests_gpf+0x26ea>
    8000d99a:	c11fe06f          	j	8000c5aa <tinst_tests_gpf+0x12f6>
    8000d99e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d9a0:	0016f713          	andi	a4,a3,1
    8000d9a4:	b00715e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d9ac:	460d                	li	a2,3
    8000d9ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d9b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d9b4:	00c59763          	bne	a1,a2,8000d9c2 <tinst_tests_gpf+0x270e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d9b8:	0026d683          	lhu	a3,2(a3)
    8000d9bc:	0106969b          	slliw	a3,a3,0x10
    8000d9c0:	8f55                	or	a4,a4,a3
    8000d9c2:	1ffe16b7          	lui	a3,0x1ffe1
    8000d9c6:	068e                	slli	a3,a3,0x3
    8000d9c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d9ca:	8f75                	and	a4,a4,a3
    8000d9cc:	00020597          	auipc	a1,0x20
    8000d9d0:	9ac58593          	addi	a1,a1,-1620 # 8002d378 <__func__.0+0x2c0>
    8000d9d4:	00e79463          	bne	a5,a4,8000d9dc <tinst_tests_gpf+0x2728>
    8000d9d8:	bd3fe06f          	j	8000c5aa <tinst_tests_gpf+0x12f6>
    8000d9dc:	00020597          	auipc	a1,0x20
    8000d9e0:	9ac58593          	addi	a1,a1,-1620 # 8002d388 <__func__.0+0x2d0>
    8000d9e4:	bc7fe06f          	j	8000c5aa <tinst_tests_gpf+0x12f6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d9e8:	02043983          	ld	s3,32(s0)
    8000d9ec:	00099463          	bnez	s3,8000d9f4 <tinst_tests_gpf+0x2740>
    8000d9f0:	9e6fe06f          	j	8000bbd6 <tinst_tests_gpf+0x922>
    8000d9f4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d9f6:	0017f713          	andi	a4,a5,1
    8000d9fa:	aa071ae3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9fe:	0007d503          	lhu	a0,0(a5)
    8000da02:	d3ff30ef          	jal	80001740 <expand_compressed_instruction>
    8000da06:	01f077b7          	lui	a5,0x1f07
    8000da0a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000da0e:	8d7d                	and	a0,a0,a5
    8000da10:	00a98463          	beq	s3,a0,8000da18 <tinst_tests_gpf+0x2764>
    8000da14:	9aefe06f          	j	8000bbc2 <tinst_tests_gpf+0x90e>
    8000da18:	9befe06f          	j	8000bbd6 <tinst_tests_gpf+0x922>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000da1c:	701c                	ld	a5,32(s0)
    8000da1e:	00020597          	auipc	a1,0x20
    8000da22:	95a58593          	addi	a1,a1,-1702 # 8002d378 <__func__.0+0x2c0>
    8000da26:	e399                	bnez	a5,8000da2c <tinst_tests_gpf+0x2778>
    8000da28:	c25fe06f          	j	8000c64c <tinst_tests_gpf+0x1398>
    8000da2c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da2e:	0016f713          	andi	a4,a3,1
    8000da32:	a6071ee3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da36:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da3a:	460d                	li	a2,3
    8000da3c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da40:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da42:	00c59763          	bne	a1,a2,8000da50 <tinst_tests_gpf+0x279c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da46:	0026d683          	lhu	a3,2(a3)
    8000da4a:	0106969b          	slliw	a3,a3,0x10
    8000da4e:	8f55                	or	a4,a4,a3
    8000da50:	1ffe16b7          	lui	a3,0x1ffe1
    8000da54:	068e                	slli	a3,a3,0x3
    8000da56:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da58:	8f75                	and	a4,a4,a3
    8000da5a:	00020597          	auipc	a1,0x20
    8000da5e:	91e58593          	addi	a1,a1,-1762 # 8002d378 <__func__.0+0x2c0>
    8000da62:	00e79463          	bne	a5,a4,8000da6a <tinst_tests_gpf+0x27b6>
    8000da66:	be7fe06f          	j	8000c64c <tinst_tests_gpf+0x1398>
    8000da6a:	00020597          	auipc	a1,0x20
    8000da6e:	91e58593          	addi	a1,a1,-1762 # 8002d388 <__func__.0+0x2d0>
    8000da72:	bdbfe06f          	j	8000c64c <tinst_tests_gpf+0x1398>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000da76:	02043903          	ld	s2,32(s0)
    8000da7a:	00091463          	bnez	s2,8000da82 <tinst_tests_gpf+0x27ce>
    8000da7e:	9eefe06f          	j	8000bc6c <tinst_tests_gpf+0x9b8>
    8000da82:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da84:	0017f713          	andi	a4,a5,1
    8000da88:	a20713e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da8c:	0007d503          	lhu	a0,0(a5)
    8000da90:	cb1f30ef          	jal	80001740 <expand_compressed_instruction>
    8000da94:	01f077b7          	lui	a5,0x1f07
    8000da98:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000da9c:	8d7d                	and	a0,a0,a5
    8000da9e:	00a90463          	beq	s2,a0,8000daa6 <tinst_tests_gpf+0x27f2>
    8000daa2:	9b6fe06f          	j	8000bc58 <tinst_tests_gpf+0x9a4>
    8000daa6:	9c6fe06f          	j	8000bc6c <tinst_tests_gpf+0x9b8>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000daaa:	701c                	ld	a5,32(s0)
    8000daac:	00020597          	auipc	a1,0x20
    8000dab0:	8cc58593          	addi	a1,a1,-1844 # 8002d378 <__func__.0+0x2c0>
    8000dab4:	e399                	bnez	a5,8000daba <tinst_tests_gpf+0x2806>
    8000dab6:	c39fe06f          	j	8000c6ee <tinst_tests_gpf+0x143a>
    8000daba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dabc:	0016f713          	andi	a4,a3,1
    8000dac0:	9e0717e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dac4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dac8:	460d                	li	a2,3
    8000daca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dace:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dad0:	00c59763          	bne	a1,a2,8000dade <tinst_tests_gpf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dad4:	0026d683          	lhu	a3,2(a3)
    8000dad8:	0106969b          	slliw	a3,a3,0x10
    8000dadc:	8f55                	or	a4,a4,a3
    8000dade:	1ffe16b7          	lui	a3,0x1ffe1
    8000dae2:	068e                	slli	a3,a3,0x3
    8000dae4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dae6:	8f75                	and	a4,a4,a3
    8000dae8:	00020597          	auipc	a1,0x20
    8000daec:	89058593          	addi	a1,a1,-1904 # 8002d378 <__func__.0+0x2c0>
    8000daf0:	00e79463          	bne	a5,a4,8000daf8 <tinst_tests_gpf+0x2844>
    8000daf4:	bfbfe06f          	j	8000c6ee <tinst_tests_gpf+0x143a>
    8000daf8:	00020597          	auipc	a1,0x20
    8000dafc:	89058593          	addi	a1,a1,-1904 # 8002d388 <__func__.0+0x2d0>
    8000db00:	beffe06f          	j	8000c6ee <tinst_tests_gpf+0x143a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000db04:	701c                	ld	a5,32(s0)
    8000db06:	e399                	bnez	a5,8000db0c <tinst_tests_gpf+0x2858>
    8000db08:	a0cfe06f          	j	8000bd14 <tinst_tests_gpf+0xa60>
    8000db0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db0e:	0016f713          	andi	a4,a3,1
    8000db12:	98071ee3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db1a:	460d                	li	a2,3
    8000db1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db22:	00c59763          	bne	a1,a2,8000db30 <tinst_tests_gpf+0x287c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db26:	0026d683          	lhu	a3,2(a3)
    8000db2a:	0106969b          	slliw	a3,a3,0x10
    8000db2e:	8f55                	or	a4,a4,a3
    8000db30:	1ffe16b7          	lui	a3,0x1ffe1
    8000db34:	068e                	slli	a3,a3,0x3
    8000db36:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db38:	8f75                	and	a4,a4,a3
    8000db3a:	00e78463          	beq	a5,a4,8000db42 <tinst_tests_gpf+0x288e>
    8000db3e:	9c2fe06f          	j	8000bd00 <tinst_tests_gpf+0xa4c>
    8000db42:	9d2fe06f          	j	8000bd14 <tinst_tests_gpf+0xa60>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000db46:	701c                	ld	a5,32(s0)
    8000db48:	00020597          	auipc	a1,0x20
    8000db4c:	83058593          	addi	a1,a1,-2000 # 8002d378 <__func__.0+0x2c0>
    8000db50:	e399                	bnez	a5,8000db56 <tinst_tests_gpf+0x28a2>
    8000db52:	c37fe06f          	j	8000c788 <tinst_tests_gpf+0x14d4>
    8000db56:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db58:	0016f713          	andi	a4,a3,1
    8000db5c:	940719e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db60:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db64:	460d                	li	a2,3
    8000db66:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db6a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db6c:	00c59763          	bne	a1,a2,8000db7a <tinst_tests_gpf+0x28c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db70:	0026d683          	lhu	a3,2(a3)
    8000db74:	0106969b          	slliw	a3,a3,0x10
    8000db78:	8f55                	or	a4,a4,a3
    8000db7a:	1ffe16b7          	lui	a3,0x1ffe1
    8000db7e:	068e                	slli	a3,a3,0x3
    8000db80:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db82:	8f75                	and	a4,a4,a3
    8000db84:	0001f597          	auipc	a1,0x1f
    8000db88:	7f458593          	addi	a1,a1,2036 # 8002d378 <__func__.0+0x2c0>
    8000db8c:	00e79463          	bne	a5,a4,8000db94 <tinst_tests_gpf+0x28e0>
    8000db90:	bf9fe06f          	j	8000c788 <tinst_tests_gpf+0x14d4>
    8000db94:	0001f597          	auipc	a1,0x1f
    8000db98:	7f458593          	addi	a1,a1,2036 # 8002d388 <__func__.0+0x2d0>
    8000db9c:	bedfe06f          	j	8000c788 <tinst_tests_gpf+0x14d4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000dba0:	701c                	ld	a5,32(s0)
    8000dba2:	0001f597          	auipc	a1,0x1f
    8000dba6:	7d658593          	addi	a1,a1,2006 # 8002d378 <__func__.0+0x2c0>
    8000dbaa:	e399                	bnez	a5,8000dbb0 <tinst_tests_gpf+0x28fc>
    8000dbac:	c77fe06f          	j	8000c822 <tinst_tests_gpf+0x156e>
    8000dbb0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbb2:	0016f713          	andi	a4,a3,1
    8000dbb6:	8e071ce3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbbe:	460d                	li	a2,3
    8000dbc0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbc4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbc6:	00c59763          	bne	a1,a2,8000dbd4 <tinst_tests_gpf+0x2920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbca:	0026d683          	lhu	a3,2(a3)
    8000dbce:	0106969b          	slliw	a3,a3,0x10
    8000dbd2:	8f55                	or	a4,a4,a3
    8000dbd4:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbd8:	068e                	slli	a3,a3,0x3
    8000dbda:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbdc:	8f75                	and	a4,a4,a3
    8000dbde:	0001f597          	auipc	a1,0x1f
    8000dbe2:	79a58593          	addi	a1,a1,1946 # 8002d378 <__func__.0+0x2c0>
    8000dbe6:	00e79463          	bne	a5,a4,8000dbee <tinst_tests_gpf+0x293a>
    8000dbea:	c39fe06f          	j	8000c822 <tinst_tests_gpf+0x156e>
    8000dbee:	0001f597          	auipc	a1,0x1f
    8000dbf2:	79a58593          	addi	a1,a1,1946 # 8002d388 <__func__.0+0x2d0>
    8000dbf6:	c2dfe06f          	j	8000c822 <tinst_tests_gpf+0x156e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000dbfa:	701c                	ld	a5,32(s0)
    8000dbfc:	0001f597          	auipc	a1,0x1f
    8000dc00:	77c58593          	addi	a1,a1,1916 # 8002d378 <__func__.0+0x2c0>
    8000dc04:	e399                	bnez	a5,8000dc0a <tinst_tests_gpf+0x2956>
    8000dc06:	cb7fe06f          	j	8000c8bc <tinst_tests_gpf+0x1608>
    8000dc0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc0c:	0016f713          	andi	a4,a3,1
    8000dc10:	88071fe3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc14:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc18:	460d                	li	a2,3
    8000dc1a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc1e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc20:	00c59763          	bne	a1,a2,8000dc2e <tinst_tests_gpf+0x297a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc24:	0026d683          	lhu	a3,2(a3)
    8000dc28:	0106969b          	slliw	a3,a3,0x10
    8000dc2c:	8f55                	or	a4,a4,a3
    8000dc2e:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc32:	068e                	slli	a3,a3,0x3
    8000dc34:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc36:	8f75                	and	a4,a4,a3
    8000dc38:	0001f597          	auipc	a1,0x1f
    8000dc3c:	74058593          	addi	a1,a1,1856 # 8002d378 <__func__.0+0x2c0>
    8000dc40:	00e79463          	bne	a5,a4,8000dc48 <tinst_tests_gpf+0x2994>
    8000dc44:	c79fe06f          	j	8000c8bc <tinst_tests_gpf+0x1608>
    8000dc48:	0001f597          	auipc	a1,0x1f
    8000dc4c:	74058593          	addi	a1,a1,1856 # 8002d388 <__func__.0+0x2d0>
    8000dc50:	c6dfe06f          	j	8000c8bc <tinst_tests_gpf+0x1608>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000dc54:	701c                	ld	a5,32(s0)
    8000dc56:	e399                	bnez	a5,8000dc5c <tinst_tests_gpf+0x29a8>
    8000dc58:	bd0fe06f          	j	8000c028 <tinst_tests_gpf+0xd74>
    8000dc5c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc5e:	0016f713          	andi	a4,a3,1
    8000dc62:	840716e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc66:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc6a:	460d                	li	a2,3
    8000dc6c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc70:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc72:	00c59763          	bne	a1,a2,8000dc80 <tinst_tests_gpf+0x29cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc76:	0026d683          	lhu	a3,2(a3)
    8000dc7a:	0106969b          	slliw	a3,a3,0x10
    8000dc7e:	8f55                	or	a4,a4,a3
    8000dc80:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc84:	068e                	slli	a3,a3,0x3
    8000dc86:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc88:	8f75                	and	a4,a4,a3
    8000dc8a:	00e78463          	beq	a5,a4,8000dc92 <tinst_tests_gpf+0x29de>
    8000dc8e:	b86fe06f          	j	8000c014 <tinst_tests_gpf+0xd60>
    8000dc92:	b96fe06f          	j	8000c028 <tinst_tests_gpf+0xd74>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dc96:	701c                	ld	a5,32(s0)
    8000dc98:	e399                	bnez	a5,8000dc9e <tinst_tests_gpf+0x29ea>
    8000dc9a:	c30fe06f          	j	8000c0ca <tinst_tests_gpf+0xe16>
    8000dc9e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dca0:	0016f713          	andi	a4,a3,1
    8000dca4:	800715e3          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dca8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcac:	460d                	li	a2,3
    8000dcae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcb2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcb4:	00c59763          	bne	a1,a2,8000dcc2 <tinst_tests_gpf+0x2a0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcb8:	0026d683          	lhu	a3,2(a3)
    8000dcbc:	0106969b          	slliw	a3,a3,0x10
    8000dcc0:	8f55                	or	a4,a4,a3
    8000dcc2:	1ffe16b7          	lui	a3,0x1ffe1
    8000dcc6:	068e                	slli	a3,a3,0x3
    8000dcc8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dcca:	8f75                	and	a4,a4,a3
    8000dccc:	00e78463          	beq	a5,a4,8000dcd4 <tinst_tests_gpf+0x2a20>
    8000dcd0:	be6fe06f          	j	8000c0b6 <tinst_tests_gpf+0xe02>
    8000dcd4:	bf6fe06f          	j	8000c0ca <tinst_tests_gpf+0xe16>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000dcd8:	701c                	ld	a5,32(s0)
    8000dcda:	e399                	bnez	a5,8000dce0 <tinst_tests_gpf+0x2a2c>
    8000dcdc:	c90fe06f          	j	8000c16c <tinst_tests_gpf+0xeb8>
    8000dce0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dce2:	0016f713          	andi	a4,a3,1
    8000dce6:	fc071463          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcee:	460d                	li	a2,3
    8000dcf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcf6:	00c59763          	bne	a1,a2,8000dd04 <tinst_tests_gpf+0x2a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcfa:	0026d683          	lhu	a3,2(a3)
    8000dcfe:	0106969b          	slliw	a3,a3,0x10
    8000dd02:	8f55                	or	a4,a4,a3
    8000dd04:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd08:	068e                	slli	a3,a3,0x3
    8000dd0a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd0c:	8f75                	and	a4,a4,a3
    8000dd0e:	00e78463          	beq	a5,a4,8000dd16 <tinst_tests_gpf+0x2a62>
    8000dd12:	c46fe06f          	j	8000c158 <tinst_tests_gpf+0xea4>
    8000dd16:	c56fe06f          	j	8000c16c <tinst_tests_gpf+0xeb8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000dd1a:	701c                	ld	a5,32(s0)
    8000dd1c:	e399                	bnez	a5,8000dd22 <tinst_tests_gpf+0x2a6e>
    8000dd1e:	cf0fe06f          	j	8000c20e <tinst_tests_gpf+0xf5a>
    8000dd22:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd24:	0016f713          	andi	a4,a3,1
    8000dd28:	f8071363          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd2c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd30:	460d                	li	a2,3
    8000dd32:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd36:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd38:	00c59763          	bne	a1,a2,8000dd46 <tinst_tests_gpf+0x2a92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd3c:	0026d683          	lhu	a3,2(a3)
    8000dd40:	0106969b          	slliw	a3,a3,0x10
    8000dd44:	8f55                	or	a4,a4,a3
    8000dd46:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd4a:	068e                	slli	a3,a3,0x3
    8000dd4c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd4e:	8f75                	and	a4,a4,a3
    8000dd50:	00e78463          	beq	a5,a4,8000dd58 <tinst_tests_gpf+0x2aa4>
    8000dd54:	ca6fe06f          	j	8000c1fa <tinst_tests_gpf+0xf46>
    8000dd58:	cb6fe06f          	j	8000c20e <tinst_tests_gpf+0xf5a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000dd5c:	701c                	ld	a5,32(s0)
    8000dd5e:	e399                	bnez	a5,8000dd64 <tinst_tests_gpf+0x2ab0>
    8000dd60:	d50fe06f          	j	8000c2b0 <tinst_tests_gpf+0xffc>
    8000dd64:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd66:	0016f713          	andi	a4,a3,1
    8000dd6a:	f4071263          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd6e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd72:	460d                	li	a2,3
    8000dd74:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd78:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd7a:	00c59763          	bne	a1,a2,8000dd88 <tinst_tests_gpf+0x2ad4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd7e:	0026d683          	lhu	a3,2(a3)
    8000dd82:	0106969b          	slliw	a3,a3,0x10
    8000dd86:	8f55                	or	a4,a4,a3
    8000dd88:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd8c:	068e                	slli	a3,a3,0x3
    8000dd8e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd90:	8f75                	and	a4,a4,a3
    8000dd92:	00e78463          	beq	a5,a4,8000dd9a <tinst_tests_gpf+0x2ae6>
    8000dd96:	d06fe06f          	j	8000c29c <tinst_tests_gpf+0xfe8>
    8000dd9a:	d16fe06f          	j	8000c2b0 <tinst_tests_gpf+0xffc>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dd9e:	701c                	ld	a5,32(s0)
    8000dda0:	e399                	bnez	a5,8000dda6 <tinst_tests_gpf+0x2af2>
    8000dda2:	db6fe06f          	j	8000c358 <tinst_tests_gpf+0x10a4>
    8000dda6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dda8:	0016f713          	andi	a4,a3,1
    8000ddac:	f0071163          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddb0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddb4:	460d                	li	a2,3
    8000ddb6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddbc:	00c59763          	bne	a1,a2,8000ddca <tinst_tests_gpf+0x2b16>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddc0:	0026d683          	lhu	a3,2(a3)
    8000ddc4:	0106969b          	slliw	a3,a3,0x10
    8000ddc8:	8f55                	or	a4,a4,a3
    8000ddca:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddce:	068e                	slli	a3,a3,0x3
    8000ddd0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ddd2:	8f75                	and	a4,a4,a3
    8000ddd4:	00e78463          	beq	a5,a4,8000dddc <tinst_tests_gpf+0x2b28>
    8000ddd8:	d6cfe06f          	j	8000c344 <tinst_tests_gpf+0x1090>
    8000dddc:	d7cfe06f          	j	8000c358 <tinst_tests_gpf+0x10a4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000dde0:	701c                	ld	a5,32(s0)
    8000dde2:	e399                	bnez	a5,8000dde8 <tinst_tests_gpf+0x2b34>
    8000dde4:	e16fe06f          	j	8000c3fa <tinst_tests_gpf+0x1146>
    8000dde8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddea:	0016f713          	andi	a4,a3,1
    8000ddee:	ec071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddf2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddf6:	460d                	li	a2,3
    8000ddf8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddfc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddfe:	00c59763          	bne	a1,a2,8000de0c <tinst_tests_gpf+0x2b58>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de02:	0026d683          	lhu	a3,2(a3)
    8000de06:	0106969b          	slliw	a3,a3,0x10
    8000de0a:	8f55                	or	a4,a4,a3
    8000de0c:	1ffe16b7          	lui	a3,0x1ffe1
    8000de10:	068e                	slli	a3,a3,0x3
    8000de12:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de14:	8f75                	and	a4,a4,a3
    8000de16:	00e78463          	beq	a5,a4,8000de1e <tinst_tests_gpf+0x2b6a>
    8000de1a:	dccfe06f          	j	8000c3e6 <tinst_tests_gpf+0x1132>
    8000de1e:	ddcfe06f          	j	8000c3fa <tinst_tests_gpf+0x1146>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000de22:	701c                	ld	a5,32(s0)
    8000de24:	e399                	bnez	a5,8000de2a <tinst_tests_gpf+0x2b76>
    8000de26:	e76fe06f          	j	8000c49c <tinst_tests_gpf+0x11e8>
    8000de2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de2c:	0016f713          	andi	a4,a3,1
    8000de30:	e6071f63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de38:	460d                	li	a2,3
    8000de3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de40:	00c59763          	bne	a1,a2,8000de4e <tinst_tests_gpf+0x2b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de44:	0026d683          	lhu	a3,2(a3)
    8000de48:	0106969b          	slliw	a3,a3,0x10
    8000de4c:	8f55                	or	a4,a4,a3
    8000de4e:	1ffe16b7          	lui	a3,0x1ffe1
    8000de52:	068e                	slli	a3,a3,0x3
    8000de54:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de56:	8f75                	and	a4,a4,a3
    8000de58:	00e78463          	beq	a5,a4,8000de60 <tinst_tests_gpf+0x2bac>
    8000de5c:	e2cfe06f          	j	8000c488 <tinst_tests_gpf+0x11d4>
    8000de60:	e3cfe06f          	j	8000c49c <tinst_tests_gpf+0x11e8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000de64:	701c                	ld	a5,32(s0)
    8000de66:	e399                	bnez	a5,8000de6c <tinst_tests_gpf+0x2bb8>
    8000de68:	ed6fe06f          	j	8000c53e <tinst_tests_gpf+0x128a>
    8000de6c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de6e:	0016f713          	andi	a4,a3,1
    8000de72:	e2071e63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de76:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de7a:	460d                	li	a2,3
    8000de7c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de80:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de82:	00c59763          	bne	a1,a2,8000de90 <tinst_tests_gpf+0x2bdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de86:	0026d683          	lhu	a3,2(a3)
    8000de8a:	0106969b          	slliw	a3,a3,0x10
    8000de8e:	8f55                	or	a4,a4,a3
    8000de90:	1ffe16b7          	lui	a3,0x1ffe1
    8000de94:	068e                	slli	a3,a3,0x3
    8000de96:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de98:	8f75                	and	a4,a4,a3
    8000de9a:	00e78463          	beq	a5,a4,8000dea2 <tinst_tests_gpf+0x2bee>
    8000de9e:	e8cfe06f          	j	8000c52a <tinst_tests_gpf+0x1276>
    8000dea2:	e9cfe06f          	j	8000c53e <tinst_tests_gpf+0x128a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000dea6:	701c                	ld	a5,32(s0)
    8000dea8:	e399                	bnez	a5,8000deae <tinst_tests_gpf+0x2bfa>
    8000deaa:	f36fe06f          	j	8000c5e0 <tinst_tests_gpf+0x132c>
    8000deae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000deb0:	0016f713          	andi	a4,a3,1
    8000deb4:	de071d63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000deb8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000debc:	460d                	li	a2,3
    8000debe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dec2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dec4:	00c59763          	bne	a1,a2,8000ded2 <tinst_tests_gpf+0x2c1e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dec8:	0026d683          	lhu	a3,2(a3)
    8000decc:	0106969b          	slliw	a3,a3,0x10
    8000ded0:	8f55                	or	a4,a4,a3
    8000ded2:	1ffe16b7          	lui	a3,0x1ffe1
    8000ded6:	068e                	slli	a3,a3,0x3
    8000ded8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000deda:	8f75                	and	a4,a4,a3
    8000dedc:	00e78463          	beq	a5,a4,8000dee4 <tinst_tests_gpf+0x2c30>
    8000dee0:	eecfe06f          	j	8000c5cc <tinst_tests_gpf+0x1318>
    8000dee4:	efcfe06f          	j	8000c5e0 <tinst_tests_gpf+0x132c>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000dee8:	6418                	ld	a4,8(s0)
    8000deea:	47dd                	li	a5,23
    8000deec:	00f70463          	beq	a4,a5,8000def4 <tinst_tests_gpf+0x2c40>
    8000def0:	84bfe06f          	j	8000c73a <tinst_tests_gpf+0x1486>
    8000def4:	701c                	ld	a5,32(s0)
    8000def6:	e399                	bnez	a5,8000defc <tinst_tests_gpf+0x2c48>
    8000def8:	845fe06f          	j	8000c73c <tinst_tests_gpf+0x1488>
    8000defc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000defe:	0016f713          	andi	a4,a3,1
    8000df02:	da071663          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df06:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df0a:	460d                	li	a2,3
    8000df0c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df10:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df12:	00c59763          	bne	a1,a2,8000df20 <tinst_tests_gpf+0x2c6c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df16:	0026d683          	lhu	a3,2(a3)
    8000df1a:	0106969b          	slliw	a3,a3,0x10
    8000df1e:	8f55                	or	a4,a4,a3
    8000df20:	1ffe16b7          	lui	a3,0x1ffe1
    8000df24:	068e                	slli	a3,a3,0x3
    8000df26:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df28:	8f75                	and	a4,a4,a3
    8000df2a:	40f704b3          	sub	s1,a4,a5
    8000df2e:	0014b493          	seqz	s1,s1
    8000df32:	80bfe06f          	j	8000c73c <tinst_tests_gpf+0x1488>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000df36:	6418                	ld	a4,8(s0)
    8000df38:	47dd                	li	a5,23
    8000df3a:	00f70463          	beq	a4,a5,8000df42 <tinst_tests_gpf+0x2c8e>
    8000df3e:	897fe06f          	j	8000c7d4 <tinst_tests_gpf+0x1520>
    8000df42:	701c                	ld	a5,32(s0)
    8000df44:	e399                	bnez	a5,8000df4a <tinst_tests_gpf+0x2c96>
    8000df46:	891fe06f          	j	8000c7d6 <tinst_tests_gpf+0x1522>
    8000df4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df4c:	0016f713          	andi	a4,a3,1
    8000df50:	d4071f63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df58:	460d                	li	a2,3
    8000df5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df60:	00c59763          	bne	a1,a2,8000df6e <tinst_tests_gpf+0x2cba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df64:	0026d683          	lhu	a3,2(a3)
    8000df68:	0106969b          	slliw	a3,a3,0x10
    8000df6c:	8f55                	or	a4,a4,a3
    8000df6e:	1ffe16b7          	lui	a3,0x1ffe1
    8000df72:	068e                	slli	a3,a3,0x3
    8000df74:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df76:	8f75                	and	a4,a4,a3
    8000df78:	40f704b3          	sub	s1,a4,a5
    8000df7c:	0014b493          	seqz	s1,s1
    8000df80:	857fe06f          	j	8000c7d6 <tinst_tests_gpf+0x1522>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000df84:	6418                	ld	a4,8(s0)
    8000df86:	47dd                	li	a5,23
    8000df88:	00f70463          	beq	a4,a5,8000df90 <tinst_tests_gpf+0x2cdc>
    8000df8c:	8e3fe06f          	j	8000c86e <tinst_tests_gpf+0x15ba>
    8000df90:	701c                	ld	a5,32(s0)
    8000df92:	e399                	bnez	a5,8000df98 <tinst_tests_gpf+0x2ce4>
    8000df94:	8ddfe06f          	j	8000c870 <tinst_tests_gpf+0x15bc>
    8000df98:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df9a:	0016f713          	andi	a4,a3,1
    8000df9e:	d0071863          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dfa2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfa6:	460d                	li	a2,3
    8000dfa8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfae:	00c59763          	bne	a1,a2,8000dfbc <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfb2:	0026d683          	lhu	a3,2(a3)
    8000dfb6:	0106969b          	slliw	a3,a3,0x10
    8000dfba:	8f55                	or	a4,a4,a3
    8000dfbc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfc0:	068e                	slli	a3,a3,0x3
    8000dfc2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfc4:	8f75                	and	a4,a4,a3
    8000dfc6:	40f704b3          	sub	s1,a4,a5
    8000dfca:	0014b493          	seqz	s1,s1
    8000dfce:	8a3fe06f          	j	8000c870 <tinst_tests_gpf+0x15bc>
    instruction = *((uint16_t*)addr);
    8000dfd2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfd6:	460d                	li	a2,3
    8000dfd8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfdc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfde:	00c59763          	bne	a1,a2,8000dfec <tinst_tests_gpf+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfe2:	0026d683          	lhu	a3,2(a3)
    8000dfe6:	0106969b          	slliw	a3,a3,0x10
    8000dfea:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000dfec:	1746                	slli	a4,a4,0x31
    8000dfee:	9345                	srli	a4,a4,0x31
    8000dff0:	00e78463          	beq	a5,a4,8000dff8 <tinst_tests_gpf+0x2d44>
    8000dff4:	e50fd06f          	j	8000b644 <tinst_tests_gpf+0x390>
    8000dff8:	e60fd06f          	j	8000b658 <tinst_tests_gpf+0x3a4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000dffc:	02043903          	ld	s2,32(s0)
    8000e000:	00091463          	bnez	s2,8000e008 <tinst_tests_gpf+0x2d54>
    8000e004:	c89fd06f          	j	8000bc8c <tinst_tests_gpf+0x9d8>
    8000e008:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e00a:	0017f713          	andi	a4,a5,1
    8000e00e:	ca071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e012:	0007d503          	lhu	a0,0(a5)
    8000e016:	f2af30ef          	jal	80001740 <expand_compressed_instruction>
    8000e01a:	01f077b7          	lui	a5,0x1f07
    8000e01e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e022:	00f574b3          	and	s1,a0,a5
    8000e026:	412484b3          	sub	s1,s1,s2
    8000e02a:	0014b493          	seqz	s1,s1
    8000e02e:	c5ffd06f          	j	8000bc8c <tinst_tests_gpf+0x9d8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e032:	701c                	ld	a5,32(s0)
    8000e034:	e399                	bnez	a5,8000e03a <tinst_tests_gpf+0x2d86>
    8000e036:	cfffd06f          	j	8000bd34 <tinst_tests_gpf+0xa80>
    8000e03a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e03c:	0016f713          	andi	a4,a3,1
    8000e040:	c6071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e044:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e048:	460d                	li	a2,3
    8000e04a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e04e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e050:	00c59763          	bne	a1,a2,8000e05e <tinst_tests_gpf+0x2daa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e054:	0026d683          	lhu	a3,2(a3)
    8000e058:	0106969b          	slliw	a3,a3,0x10
    8000e05c:	8f55                	or	a4,a4,a3
    8000e05e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e062:	068e                	slli	a3,a3,0x3
    8000e064:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e066:	8f75                	and	a4,a4,a3
    8000e068:	40f704b3          	sub	s1,a4,a5
    8000e06c:	0014b493          	seqz	s1,s1
    8000e070:	cc5fd06f          	j	8000bd34 <tinst_tests_gpf+0xa80>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000e074:	701c                	ld	a5,32(s0)
    8000e076:	e399                	bnez	a5,8000e07c <tinst_tests_gpf+0x2dc8>
    8000e078:	d61fd06f          	j	8000bdd8 <tinst_tests_gpf+0xb24>
    8000e07c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e07e:	0016f713          	andi	a4,a3,1
    8000e082:	c2071663          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e086:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e08a:	460d                	li	a2,3
    8000e08c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e090:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e092:	00c59763          	bne	a1,a2,8000e0a0 <tinst_tests_gpf+0x2dec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e096:	0026d683          	lhu	a3,2(a3)
    8000e09a:	0106969b          	slliw	a3,a3,0x10
    8000e09e:	8f55                	or	a4,a4,a3
    8000e0a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e0a4:	068e                	slli	a3,a3,0x3
    8000e0a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0a8:	8f75                	and	a4,a4,a3
    8000e0aa:	40f704b3          	sub	s1,a4,a5
    8000e0ae:	0014b493          	seqz	s1,s1
    8000e0b2:	d27fd06f          	j	8000bdd8 <tinst_tests_gpf+0xb24>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e0b6:	701c                	ld	a5,32(s0)
    8000e0b8:	e399                	bnez	a5,8000e0be <tinst_tests_gpf+0x2e0a>
    8000e0ba:	dc1fd06f          	j	8000be7a <tinst_tests_gpf+0xbc6>
    8000e0be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0c0:	0016f713          	andi	a4,a3,1
    8000e0c4:	be071563          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0cc:	460d                	li	a2,3
    8000e0ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0d4:	00c59763          	bne	a1,a2,8000e0e2 <tinst_tests_gpf+0x2e2e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0d8:	0026d683          	lhu	a3,2(a3)
    8000e0dc:	0106969b          	slliw	a3,a3,0x10
    8000e0e0:	8f55                	or	a4,a4,a3
    8000e0e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e0e6:	068e                	slli	a3,a3,0x3
    8000e0e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0ea:	8f75                	and	a4,a4,a3
    8000e0ec:	40f704b3          	sub	s1,a4,a5
    8000e0f0:	0014b493          	seqz	s1,s1
    8000e0f4:	d87fd06f          	j	8000be7a <tinst_tests_gpf+0xbc6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e0f8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e0fa:	0017f713          	andi	a4,a5,1
    8000e0fe:	ba071863          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e102:	0007d503          	lhu	a0,0(a5)
    8000e106:	e3af30ef          	jal	80001740 <expand_compressed_instruction>
    8000e10a:	67a1                	lui	a5,0x8
    8000e10c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e10e:	8d7d                	and	a0,a0,a5
    8000e110:	00a90463          	beq	s2,a0,8000e118 <tinst_tests_gpf+0x2e64>
    8000e114:	959fd06f          	j	8000ba6c <tinst_tests_gpf+0x7b8>
    8000e118:	0001f597          	auipc	a1,0x1f
    8000e11c:	26058593          	addi	a1,a1,608 # 8002d378 <__func__.0+0x2c0>
    8000e120:	955fd06f          	j	8000ba74 <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e124:	701c                	ld	a5,32(s0)
    8000e126:	e399                	bnez	a5,8000e12c <tinst_tests_gpf+0x2e78>
    8000e128:	df5fd06f          	j	8000bf1c <tinst_tests_gpf+0xc68>
    8000e12c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e12e:	0016f713          	andi	a4,a3,1
    8000e132:	b6071e63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e136:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e13a:	460d                	li	a2,3
    8000e13c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e140:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e142:	00c59763          	bne	a1,a2,8000e150 <tinst_tests_gpf+0x2e9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e146:	0026d683          	lhu	a3,2(a3)
    8000e14a:	0106969b          	slliw	a3,a3,0x10
    8000e14e:	8f55                	or	a4,a4,a3
    8000e150:	1ffe16b7          	lui	a3,0x1ffe1
    8000e154:	068e                	slli	a3,a3,0x3
    8000e156:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e158:	8f75                	and	a4,a4,a3
    8000e15a:	40f704b3          	sub	s1,a4,a5
    8000e15e:	0014b493          	seqz	s1,s1
    8000e162:	dbbfd06f          	j	8000bf1c <tinst_tests_gpf+0xc68>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e166:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e168:	0017f713          	andi	a4,a5,1
    8000e16c:	b4071163          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e170:	0007d503          	lhu	a0,0(a5)
    8000e174:	dccf30ef          	jal	80001740 <expand_compressed_instruction>
    8000e178:	67a1                	lui	a5,0x8
    8000e17a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e17c:	8d7d                	and	a0,a0,a5
    8000e17e:	00a98463          	beq	s3,a0,8000e186 <tinst_tests_gpf+0x2ed2>
    8000e182:	981fd06f          	j	8000bb02 <tinst_tests_gpf+0x84e>
    8000e186:	0001f597          	auipc	a1,0x1f
    8000e18a:	1f258593          	addi	a1,a1,498 # 8002d378 <__func__.0+0x2c0>
    8000e18e:	97dfd06f          	j	8000bb0a <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e192:	701c                	ld	a5,32(s0)
    8000e194:	e399                	bnez	a5,8000e19a <tinst_tests_gpf+0x2ee6>
    8000e196:	e1dfd06f          	j	8000bfb2 <tinst_tests_gpf+0xcfe>
    8000e19a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e19c:	0016f713          	andi	a4,a3,1
    8000e1a0:	b0071763          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1a4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1a8:	460d                	li	a2,3
    8000e1aa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1ae:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1b0:	00c59763          	bne	a1,a2,8000e1be <tinst_tests_gpf+0x2f0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1b4:	0026d683          	lhu	a3,2(a3)
    8000e1b8:	0106969b          	slliw	a3,a3,0x10
    8000e1bc:	8f55                	or	a4,a4,a3
    8000e1be:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1c2:	068e                	slli	a3,a3,0x3
    8000e1c4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1c6:	8f75                	and	a4,a4,a3
    8000e1c8:	40f704b3          	sub	s1,a4,a5
    8000e1cc:	0014b493          	seqz	s1,s1
    8000e1d0:	de3fd06f          	j	8000bfb2 <tinst_tests_gpf+0xcfe>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e1d4:	701c                	ld	a5,32(s0)
    8000e1d6:	e399                	bnez	a5,8000e1dc <tinst_tests_gpf+0x2f28>
    8000e1d8:	e71fd06f          	j	8000c048 <tinst_tests_gpf+0xd94>
    8000e1dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e1de:	0016f713          	andi	a4,a3,1
    8000e1e2:	ac071663          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1ea:	460d                	li	a2,3
    8000e1ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1f2:	00c59763          	bne	a1,a2,8000e200 <tinst_tests_gpf+0x2f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1f6:	0026d683          	lhu	a3,2(a3)
    8000e1fa:	0106969b          	slliw	a3,a3,0x10
    8000e1fe:	8f55                	or	a4,a4,a3
    8000e200:	1ffe16b7          	lui	a3,0x1ffe1
    8000e204:	068e                	slli	a3,a3,0x3
    8000e206:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e208:	8f75                	and	a4,a4,a3
    8000e20a:	40f704b3          	sub	s1,a4,a5
    8000e20e:	0014b493          	seqz	s1,s1
    8000e212:	e37fd06f          	j	8000c048 <tinst_tests_gpf+0xd94>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e216:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e218:	0017f713          	andi	a4,a5,1
    8000e21c:	a8071963          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e220:	0007d503          	lhu	a0,0(a5)
    8000e224:	d1cf30ef          	jal	80001740 <expand_compressed_instruction>
    8000e228:	01f077b7          	lui	a5,0x1f07
    8000e22c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e230:	8d7d                	and	a0,a0,a5
    8000e232:	00a98463          	beq	s3,a0,8000e23a <tinst_tests_gpf+0x2f86>
    8000e236:	963fd06f          	j	8000bb98 <tinst_tests_gpf+0x8e4>
    8000e23a:	0001f597          	auipc	a1,0x1f
    8000e23e:	13e58593          	addi	a1,a1,318 # 8002d378 <__func__.0+0x2c0>
    8000e242:	95ffd06f          	j	8000bba0 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e246:	701c                	ld	a5,32(s0)
    8000e248:	e399                	bnez	a5,8000e24e <tinst_tests_gpf+0x2f9a>
    8000e24a:	ea1fd06f          	j	8000c0ea <tinst_tests_gpf+0xe36>
    8000e24e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e250:	0016f713          	andi	a4,a3,1
    8000e254:	a4071d63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e258:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e25c:	460d                	li	a2,3
    8000e25e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e262:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e264:	00c59763          	bne	a1,a2,8000e272 <tinst_tests_gpf+0x2fbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e268:	0026d683          	lhu	a3,2(a3)
    8000e26c:	0106969b          	slliw	a3,a3,0x10
    8000e270:	8f55                	or	a4,a4,a3
    8000e272:	1ffe16b7          	lui	a3,0x1ffe1
    8000e276:	068e                	slli	a3,a3,0x3
    8000e278:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e27a:	8f75                	and	a4,a4,a3
    8000e27c:	40f704b3          	sub	s1,a4,a5
    8000e280:	0014b493          	seqz	s1,s1
    8000e284:	e67fd06f          	j	8000c0ea <tinst_tests_gpf+0xe36>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e288:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e28a:	0017f713          	andi	a4,a5,1
    8000e28e:	a2071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e292:	0007d503          	lhu	a0,0(a5)
    8000e296:	caaf30ef          	jal	80001740 <expand_compressed_instruction>
    8000e29a:	01f077b7          	lui	a5,0x1f07
    8000e29e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e2a2:	8d7d                	and	a0,a0,a5
    8000e2a4:	00a90463          	beq	s2,a0,8000e2ac <tinst_tests_gpf+0x2ff8>
    8000e2a8:	987fd06f          	j	8000bc2e <tinst_tests_gpf+0x97a>
    8000e2ac:	0001f597          	auipc	a1,0x1f
    8000e2b0:	0cc58593          	addi	a1,a1,204 # 8002d378 <__func__.0+0x2c0>
    8000e2b4:	983fd06f          	j	8000bc36 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e2b8:	701c                	ld	a5,32(s0)
    8000e2ba:	e399                	bnez	a5,8000e2c0 <tinst_tests_gpf+0x300c>
    8000e2bc:	ed1fd06f          	j	8000c18c <tinst_tests_gpf+0xed8>
    8000e2c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2c2:	0016f713          	andi	a4,a3,1
    8000e2c6:	9e071463          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2ce:	460d                	li	a2,3
    8000e2d0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2d6:	00c59763          	bne	a1,a2,8000e2e4 <tinst_tests_gpf+0x3030>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2da:	0026d683          	lhu	a3,2(a3)
    8000e2de:	0106969b          	slliw	a3,a3,0x10
    8000e2e2:	8f55                	or	a4,a4,a3
    8000e2e4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2e8:	068e                	slli	a3,a3,0x3
    8000e2ea:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2ec:	8f75                	and	a4,a4,a3
    8000e2ee:	40f704b3          	sub	s1,a4,a5
    8000e2f2:	0014b493          	seqz	s1,s1
    8000e2f6:	e97fd06f          	j	8000c18c <tinst_tests_gpf+0xed8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e2fa:	701c                	ld	a5,32(s0)
    8000e2fc:	e399                	bnez	a5,8000e302 <tinst_tests_gpf+0x304e>
    8000e2fe:	f31fd06f          	j	8000c22e <tinst_tests_gpf+0xf7a>
    8000e302:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e304:	0016f713          	andi	a4,a3,1
    8000e308:	9a071363          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e30c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e310:	460d                	li	a2,3
    8000e312:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e316:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e318:	00c59763          	bne	a1,a2,8000e326 <tinst_tests_gpf+0x3072>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e31c:	0026d683          	lhu	a3,2(a3)
    8000e320:	0106969b          	slliw	a3,a3,0x10
    8000e324:	8f55                	or	a4,a4,a3
    8000e326:	1ffe16b7          	lui	a3,0x1ffe1
    8000e32a:	068e                	slli	a3,a3,0x3
    8000e32c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e32e:	8f75                	and	a4,a4,a3
    8000e330:	40f704b3          	sub	s1,a4,a5
    8000e334:	0014b493          	seqz	s1,s1
    8000e338:	ef7fd06f          	j	8000c22e <tinst_tests_gpf+0xf7a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e33c:	701c                	ld	a5,32(s0)
    8000e33e:	e399                	bnez	a5,8000e344 <tinst_tests_gpf+0x3090>
    8000e340:	f91fd06f          	j	8000c2d0 <tinst_tests_gpf+0x101c>
    8000e344:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e346:	0016f713          	andi	a4,a3,1
    8000e34a:	96071263          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e34e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e352:	460d                	li	a2,3
    8000e354:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e358:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e35a:	00c59763          	bne	a1,a2,8000e368 <tinst_tests_gpf+0x30b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e35e:	0026d683          	lhu	a3,2(a3)
    8000e362:	0106969b          	slliw	a3,a3,0x10
    8000e366:	8f55                	or	a4,a4,a3
    8000e368:	1ffe16b7          	lui	a3,0x1ffe1
    8000e36c:	068e                	slli	a3,a3,0x3
    8000e36e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e370:	8f75                	and	a4,a4,a3
    8000e372:	40f704b3          	sub	s1,a4,a5
    8000e376:	0014b493          	seqz	s1,s1
    8000e37a:	f57fd06f          	j	8000c2d0 <tinst_tests_gpf+0x101c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e37e:	701c                	ld	a5,32(s0)
    8000e380:	e399                	bnez	a5,8000e386 <tinst_tests_gpf+0x30d2>
    8000e382:	ff7fd06f          	j	8000c378 <tinst_tests_gpf+0x10c4>
    8000e386:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e388:	0016f713          	andi	a4,a3,1
    8000e38c:	92071163          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e390:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e394:	460d                	li	a2,3
    8000e396:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e39a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e39c:	00c59763          	bne	a1,a2,8000e3aa <tinst_tests_gpf+0x30f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3a0:	0026d683          	lhu	a3,2(a3)
    8000e3a4:	0106969b          	slliw	a3,a3,0x10
    8000e3a8:	8f55                	or	a4,a4,a3
    8000e3aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3ae:	068e                	slli	a3,a3,0x3
    8000e3b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3b2:	8f75                	and	a4,a4,a3
    8000e3b4:	40f704b3          	sub	s1,a4,a5
    8000e3b8:	0014b493          	seqz	s1,s1
    8000e3bc:	fbdfd06f          	j	8000c378 <tinst_tests_gpf+0x10c4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e3c0:	701c                	ld	a5,32(s0)
    8000e3c2:	e399                	bnez	a5,8000e3c8 <tinst_tests_gpf+0x3114>
    8000e3c4:	856fe06f          	j	8000c41a <tinst_tests_gpf+0x1166>
    8000e3c8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3ca:	0016f713          	andi	a4,a3,1
    8000e3ce:	8e071063          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3d6:	460d                	li	a2,3
    8000e3d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3de:	00c59763          	bne	a1,a2,8000e3ec <tinst_tests_gpf+0x3138>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3e2:	0026d683          	lhu	a3,2(a3)
    8000e3e6:	0106969b          	slliw	a3,a3,0x10
    8000e3ea:	8f55                	or	a4,a4,a3
    8000e3ec:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3f0:	068e                	slli	a3,a3,0x3
    8000e3f2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3f4:	8f75                	and	a4,a4,a3
    8000e3f6:	40f704b3          	sub	s1,a4,a5
    8000e3fa:	0014b493          	seqz	s1,s1
    8000e3fe:	81cfe06f          	j	8000c41a <tinst_tests_gpf+0x1166>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e402:	701c                	ld	a5,32(s0)
    8000e404:	e399                	bnez	a5,8000e40a <tinst_tests_gpf+0x3156>
    8000e406:	8b6fe06f          	j	8000c4bc <tinst_tests_gpf+0x1208>
    8000e40a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e40c:	0016f713          	andi	a4,a3,1
    8000e410:	88071f63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e414:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e418:	460d                	li	a2,3
    8000e41a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e41e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e420:	00c59763          	bne	a1,a2,8000e42e <tinst_tests_gpf+0x317a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e424:	0026d683          	lhu	a3,2(a3)
    8000e428:	0106969b          	slliw	a3,a3,0x10
    8000e42c:	8f55                	or	a4,a4,a3
    8000e42e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e432:	068e                	slli	a3,a3,0x3
    8000e434:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e436:	8f75                	and	a4,a4,a3
    8000e438:	40f704b3          	sub	s1,a4,a5
    8000e43c:	0014b493          	seqz	s1,s1
    8000e440:	87cfe06f          	j	8000c4bc <tinst_tests_gpf+0x1208>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e444:	701c                	ld	a5,32(s0)
    8000e446:	e399                	bnez	a5,8000e44c <tinst_tests_gpf+0x3198>
    8000e448:	916fe06f          	j	8000c55e <tinst_tests_gpf+0x12aa>
    8000e44c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e44e:	0016f713          	andi	a4,a3,1
    8000e452:	84071e63          	bnez	a4,8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e456:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e45a:	460d                	li	a2,3
    8000e45c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e460:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e462:	00c59763          	bne	a1,a2,8000e470 <tinst_tests_gpf+0x31bc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e466:	0026d683          	lhu	a3,2(a3)
    8000e46a:	0106969b          	slliw	a3,a3,0x10
    8000e46e:	8f55                	or	a4,a4,a3
    8000e470:	1ffe16b7          	lui	a3,0x1ffe1
    8000e474:	068e                	slli	a3,a3,0x3
    8000e476:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e478:	8f75                	and	a4,a4,a3
    8000e47a:	40f704b3          	sub	s1,a4,a5
    8000e47e:	0014b493          	seqz	s1,s1
    8000e482:	8dcfe06f          	j	8000c55e <tinst_tests_gpf+0x12aa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e486:	701c                	ld	a5,32(s0)
    8000e488:	e399                	bnez	a5,8000e48e <tinst_tests_gpf+0x31da>
    8000e48a:	976fe06f          	j	8000c600 <tinst_tests_gpf+0x134c>
    8000e48e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e490:	0016f713          	andi	a4,a3,1
    8000e494:	c319                	beqz	a4,8000e49a <tinst_tests_gpf+0x31e6>
    8000e496:	818ff06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e49a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e49e:	460d                	li	a2,3
    8000e4a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4a6:	00c59763          	bne	a1,a2,8000e4b4 <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4aa:	0026d683          	lhu	a3,2(a3)
    8000e4ae:	0106969b          	slliw	a3,a3,0x10
    8000e4b2:	8f55                	or	a4,a4,a3
    8000e4b4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4b8:	068e                	slli	a3,a3,0x3
    8000e4ba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4bc:	8f75                	and	a4,a4,a3
    8000e4be:	40f704b3          	sub	s1,a4,a5
    8000e4c2:	0014b493          	seqz	s1,s1
    8000e4c6:	93afe06f          	j	8000c600 <tinst_tests_gpf+0x134c>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e4ca:	701c                	ld	a5,32(s0)
    8000e4cc:	e399                	bnez	a5,8000e4d2 <tinst_tests_gpf+0x321e>
    8000e4ce:	9d4fe06f          	j	8000c6a2 <tinst_tests_gpf+0x13ee>
    8000e4d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4d4:	0016f713          	andi	a4,a3,1
    8000e4d8:	c319                	beqz	a4,8000e4de <tinst_tests_gpf+0x322a>
    8000e4da:	fd5fe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4e2:	460d                	li	a2,3
    8000e4e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4ea:	00c59763          	bne	a1,a2,8000e4f8 <tinst_tests_gpf+0x3244>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4ee:	0026d683          	lhu	a3,2(a3)
    8000e4f2:	0106969b          	slliw	a3,a3,0x10
    8000e4f6:	8f55                	or	a4,a4,a3
    8000e4f8:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4fc:	068e                	slli	a3,a3,0x3
    8000e4fe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e500:	8f75                	and	a4,a4,a3
    8000e502:	40f704b3          	sub	s1,a4,a5
    8000e506:	0014b493          	seqz	s1,s1
    8000e50a:	998fe06f          	j	8000c6a2 <tinst_tests_gpf+0x13ee>
    8000e50e:	701c                	ld	a5,32(s0)
    8000e510:	e399                	bnez	a5,8000e516 <tinst_tests_gpf+0x3262>
    8000e512:	970fe06f          	j	8000c682 <tinst_tests_gpf+0x13ce>
    8000e516:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e518:	0016f713          	andi	a4,a3,1
    8000e51c:	c319                	beqz	a4,8000e522 <tinst_tests_gpf+0x326e>
    8000e51e:	f91fe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e522:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e526:	460d                	li	a2,3
    8000e528:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e52c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e52e:	00c59763          	bne	a1,a2,8000e53c <tinst_tests_gpf+0x3288>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e532:	0026d683          	lhu	a3,2(a3)
    8000e536:	0106969b          	slliw	a3,a3,0x10
    8000e53a:	8f55                	or	a4,a4,a3
    8000e53c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e540:	068e                	slli	a3,a3,0x3
    8000e542:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e544:	8f75                	and	a4,a4,a3
    8000e546:	00e78463          	beq	a5,a4,8000e54e <tinst_tests_gpf+0x329a>
    8000e54a:	924fe06f          	j	8000c66e <tinst_tests_gpf+0x13ba>
    8000e54e:	934fe06f          	j	8000c682 <tinst_tests_gpf+0x13ce>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e552:	701c                	ld	a5,32(s0)
    8000e554:	e399                	bnez	a5,8000e55a <tinst_tests_gpf+0x32a6>
    8000e556:	9cefe06f          	j	8000c724 <tinst_tests_gpf+0x1470>
    8000e55a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e55c:	0016f713          	andi	a4,a3,1
    8000e560:	c319                	beqz	a4,8000e566 <tinst_tests_gpf+0x32b2>
    8000e562:	f4dfe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e566:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e56a:	460d                	li	a2,3
    8000e56c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e570:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e572:	00c59763          	bne	a1,a2,8000e580 <tinst_tests_gpf+0x32cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e576:	0026d683          	lhu	a3,2(a3)
    8000e57a:	0106969b          	slliw	a3,a3,0x10
    8000e57e:	8f55                	or	a4,a4,a3
    8000e580:	1ffe16b7          	lui	a3,0x1ffe1
    8000e584:	068e                	slli	a3,a3,0x3
    8000e586:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e588:	8f75                	and	a4,a4,a3
    8000e58a:	00e78463          	beq	a5,a4,8000e592 <tinst_tests_gpf+0x32de>
    8000e58e:	982fe06f          	j	8000c710 <tinst_tests_gpf+0x145c>
    8000e592:	992fe06f          	j	8000c724 <tinst_tests_gpf+0x1470>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e596:	701c                	ld	a5,32(s0)
    8000e598:	e399                	bnez	a5,8000e59e <tinst_tests_gpf+0x32ea>
    8000e59a:	a24fe06f          	j	8000c7be <tinst_tests_gpf+0x150a>
    8000e59e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5a0:	0016f713          	andi	a4,a3,1
    8000e5a4:	c319                	beqz	a4,8000e5aa <tinst_tests_gpf+0x32f6>
    8000e5a6:	f09fe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e5aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5ae:	460d                	li	a2,3
    8000e5b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5b6:	00c59763          	bne	a1,a2,8000e5c4 <tinst_tests_gpf+0x3310>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5ba:	0026d683          	lhu	a3,2(a3)
    8000e5be:	0106969b          	slliw	a3,a3,0x10
    8000e5c2:	8f55                	or	a4,a4,a3
    8000e5c4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5c8:	068e                	slli	a3,a3,0x3
    8000e5ca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5cc:	8f75                	and	a4,a4,a3
    8000e5ce:	00e78463          	beq	a5,a4,8000e5d6 <tinst_tests_gpf+0x3322>
    8000e5d2:	9d8fe06f          	j	8000c7aa <tinst_tests_gpf+0x14f6>
    8000e5d6:	9e8fe06f          	j	8000c7be <tinst_tests_gpf+0x150a>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e5da:	701c                	ld	a5,32(s0)
    8000e5dc:	e399                	bnez	a5,8000e5e2 <tinst_tests_gpf+0x332e>
    8000e5de:	a7afe06f          	j	8000c858 <tinst_tests_gpf+0x15a4>
    8000e5e2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5e4:	0016f713          	andi	a4,a3,1
    8000e5e8:	c319                	beqz	a4,8000e5ee <tinst_tests_gpf+0x333a>
    8000e5ea:	ec5fe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e5ee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5f2:	460d                	li	a2,3
    8000e5f4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5f8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5fa:	00c59763          	bne	a1,a2,8000e608 <tinst_tests_gpf+0x3354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5fe:	0026d683          	lhu	a3,2(a3)
    8000e602:	0106969b          	slliw	a3,a3,0x10
    8000e606:	8f55                	or	a4,a4,a3
    8000e608:	1ffe16b7          	lui	a3,0x1ffe1
    8000e60c:	068e                	slli	a3,a3,0x3
    8000e60e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e610:	8f75                	and	a4,a4,a3
    8000e612:	00e78463          	beq	a5,a4,8000e61a <tinst_tests_gpf+0x3366>
    8000e616:	a2efe06f          	j	8000c844 <tinst_tests_gpf+0x1590>
    8000e61a:	a3efe06f          	j	8000c858 <tinst_tests_gpf+0x15a4>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e61e:	701c                	ld	a5,32(s0)
    8000e620:	e399                	bnez	a5,8000e626 <tinst_tests_gpf+0x3372>
    8000e622:	ad0fe06f          	j	8000c8f2 <tinst_tests_gpf+0x163e>
    8000e626:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e628:	0016f713          	andi	a4,a3,1
    8000e62c:	c319                	beqz	a4,8000e632 <tinst_tests_gpf+0x337e>
    8000e62e:	e81fe06f          	j	8000d4ae <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e632:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e636:	460d                	li	a2,3
    8000e638:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e63c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e63e:	00c59763          	bne	a1,a2,8000e64c <tinst_tests_gpf+0x3398>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e642:	0026d683          	lhu	a3,2(a3)
    8000e646:	0106969b          	slliw	a3,a3,0x10
    8000e64a:	8f55                	or	a4,a4,a3
    8000e64c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e650:	068e                	slli	a3,a3,0x3
    8000e652:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e654:	8f75                	and	a4,a4,a3
    8000e656:	00e78463          	beq	a5,a4,8000e65e <tinst_tests_gpf+0x33aa>
    8000e65a:	a84fe06f          	j	8000c8de <tinst_tests_gpf+0x162a>
    8000e65e:	a94fe06f          	j	8000c8f2 <tinst_tests_gpf+0x163e>

000000008000e662 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000e662:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e664:	0001d597          	auipc	a1,0x1d
    8000e668:	30458593          	addi	a1,a1,772 # 8002b968 <__func__.16>
    8000e66c:	0001f517          	auipc	a0,0x1f
    8000e670:	d2c50513          	addi	a0,a0,-724 # 8002d398 <__func__.0+0x2e0>
bool priv_change_1(){
    8000e674:	ec06                	sd	ra,24(sp)
    8000e676:	e822                	sd	s0,16(sp)
    8000e678:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e67a:	7dc1c0ef          	jal	8002ae56 <printf>
    8000e67e:	4529                	li	a0,10
    8000e680:	4c41b0ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    8000e684:	450d                	li	a0,3
    8000e686:	883f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e68a:	f57f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e68e:	b36f20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e692:	8eaf20ef          	jal	8000077c <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000e696:	4511                	li	a0,4
    8000e698:	871f20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000e69c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000e6a0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e6a4:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000e6a8:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000e6ac:	4509                	li	a0,2
    8000e6ae:	85bf20ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e6b2:	f5af20ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000e6b6:	400197b7          	lui	a5,0x40019
    8000e6ba:	078a                	slli	a5,a5,0x2
    8000e6bc:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6c0:	08200593          	li	a1,130
    8000e6c4:	00021617          	auipc	a2,0x21
    8000e6c8:	7dc60613          	addi	a2,a2,2012 # 8002fea0 <__func__.0+0x2de8>
    8000e6cc:	0001f517          	auipc	a0,0x1f
    8000e6d0:	ce450513          	addi	a0,a0,-796 # 8002d3b0 <__func__.0+0x2f8>
    8000e6d4:	7821c0ef          	jal	8002ae56 <printf>
    8000e6d8:	00046797          	auipc	a5,0x46
    8000e6dc:	9397c783          	lbu	a5,-1735(a5) # 80054011 <excpt+0x1>
    8000e6e0:	00046497          	auipc	s1,0x46
    8000e6e4:	93048493          	addi	s1,s1,-1744 # 80054010 <excpt>
    8000e6e8:	0001f597          	auipc	a1,0x1f
    8000e6ec:	ca058593          	addi	a1,a1,-864 # 8002d388 <__func__.0+0x2d0>
    8000e6f0:	c789                	beqz	a5,8000e6fa <priv_change_1+0x98>
    8000e6f2:	6498                	ld	a4,8(s1)
    8000e6f4:	47b5                	li	a5,13
    8000e6f6:	0cf70463          	beq	a4,a5,8000e7be <priv_change_1+0x15c>
    8000e6fa:	0001f517          	auipc	a0,0x1f
    8000e6fe:	cce50513          	addi	a0,a0,-818 # 8002d3c8 <__func__.0+0x310>
    8000e702:	7541c0ef          	jal	8002ae56 <printf>
    8000e706:	00046797          	auipc	a5,0x46
    8000e70a:	90b7c783          	lbu	a5,-1781(a5) # 80054011 <excpt+0x1>
    8000e70e:	c789                	beqz	a5,8000e718 <priv_change_1+0xb6>
    8000e710:	6498                	ld	a4,8(s1)
    8000e712:	47b5                	li	a5,13
    8000e714:	04f70e63          	beq	a4,a5,8000e770 <priv_change_1+0x10e>
    8000e718:	0001f517          	auipc	a0,0x1f
    8000e71c:	cb850513          	addi	a0,a0,-840 # 8002d3d0 <__func__.0+0x318>
    8000e720:	7361c0ef          	jal	8002ae56 <printf>
    8000e724:	02900513          	li	a0,41
    8000e728:	41c1b0ef          	jal	80029b44 <putchar>
    8000e72c:	4529                	li	a0,10
    8000e72e:	4161b0ef          	jal	80029b44 <putchar>
    8000e732:	00046417          	auipc	s0,0x46
    8000e736:	8df44403          	lbu	s0,-1825(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000e73a:	0001f597          	auipc	a1,0x1f
    8000e73e:	c4e58593          	addi	a1,a1,-946 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e742:	c411                	beqz	s0,8000e74e <priv_change_1+0xec>
    8000e744:	6498                	ld	a4,8(s1)
    8000e746:	47b5                	li	a5,13
    8000e748:	04f70363          	beq	a4,a5,8000e78e <priv_change_1+0x12c>
    8000e74c:	4401                	li	s0,0
    TEST_END();
    8000e74e:	0001f517          	auipc	a0,0x1f
    8000e752:	ce250513          	addi	a0,a0,-798 # 8002d430 <__func__.0+0x378>
    8000e756:	7001c0ef          	jal	8002ae56 <printf>
    8000e75a:	4511                	li	a0,4
    8000e75c:	facf20ef          	jal	80000f08 <goto_priv>
    8000e760:	8c4f30ef          	jal	80001824 <reset_state>
}
    8000e764:	60e2                	ld	ra,24(sp)
    8000e766:	8522                	mv	a0,s0
    8000e768:	6442                	ld	s0,16(sp)
    8000e76a:	64a2                	ld	s1,8(sp)
    8000e76c:	6105                	addi	sp,sp,32
    8000e76e:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e770:	00046717          	auipc	a4,0x46
    8000e774:	8a472703          	lw	a4,-1884(a4) # 80054014 <excpt+0x4>
    8000e778:	4791                	li	a5,4
    8000e77a:	f8f71fe3          	bne	a4,a5,8000e718 <priv_change_1+0xb6>
    8000e77e:	0002c717          	auipc	a4,0x2c
    8000e782:	1de72703          	lw	a4,478(a4) # 8003a95c <curr_priv>
    8000e786:	4789                	li	a5,2
    8000e788:	f8f718e3          	bne	a4,a5,8000e718 <priv_change_1+0xb6>
    8000e78c:	b745                	j	8000e72c <priv_change_1+0xca>
    8000e78e:	00046717          	auipc	a4,0x46
    8000e792:	88672703          	lw	a4,-1914(a4) # 80054014 <excpt+0x4>
    8000e796:	4791                	li	a5,4
    8000e798:	faf71ae3          	bne	a4,a5,8000e74c <priv_change_1+0xea>
    8000e79c:	0002c717          	auipc	a4,0x2c
    8000e7a0:	1c072703          	lw	a4,448(a4) # 8003a95c <curr_priv>
    8000e7a4:	4789                	li	a5,2
    TEST_END();
    8000e7a6:	0001f597          	auipc	a1,0x1f
    8000e7aa:	bd258593          	addi	a1,a1,-1070 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e7ae:	faf700e3          	beq	a4,a5,8000e74e <priv_change_1+0xec>
    8000e7b2:	4401                	li	s0,0
    TEST_END();
    8000e7b4:	0001f597          	auipc	a1,0x1f
    8000e7b8:	bd458593          	addi	a1,a1,-1068 # 8002d388 <__func__.0+0x2d0>
    8000e7bc:	bf49                	j	8000e74e <priv_change_1+0xec>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e7be:	00046717          	auipc	a4,0x46
    8000e7c2:	85672703          	lw	a4,-1962(a4) # 80054014 <excpt+0x4>
    8000e7c6:	4791                	li	a5,4
    8000e7c8:	f2f719e3          	bne	a4,a5,8000e6fa <priv_change_1+0x98>
    8000e7cc:	0002c717          	auipc	a4,0x2c
    8000e7d0:	19072703          	lw	a4,400(a4) # 8003a95c <curr_priv>
    8000e7d4:	4789                	li	a5,2
    8000e7d6:	0001f597          	auipc	a1,0x1f
    8000e7da:	ba258593          	addi	a1,a1,-1118 # 8002d378 <__func__.0+0x2c0>
    8000e7de:	f0f70ee3          	beq	a4,a5,8000e6fa <priv_change_1+0x98>
    8000e7e2:	0001f597          	auipc	a1,0x1f
    8000e7e6:	ba658593          	addi	a1,a1,-1114 # 8002d388 <__func__.0+0x2d0>
    8000e7ea:	bf01                	j	8000e6fa <priv_change_1+0x98>

000000008000e7ec <priv_change_2>:

bool priv_change_2(){
    8000e7ec:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e7ee:	0001d597          	auipc	a1,0x1d
    8000e7f2:	18a58593          	addi	a1,a1,394 # 8002b978 <__func__.14>
    8000e7f6:	0001f517          	auipc	a0,0x1f
    8000e7fa:	ba250513          	addi	a0,a0,-1118 # 8002d398 <__func__.0+0x2e0>
bool priv_change_2(){
    8000e7fe:	ec06                	sd	ra,24(sp)
    8000e800:	e822                	sd	s0,16(sp)
    8000e802:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e804:	6521c0ef          	jal	8002ae56 <printf>
    8000e808:	4529                	li	a0,10
    8000e80a:	33a1b0ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    8000e80e:	450d                	li	a0,3
    8000e810:	ef8f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e814:	dcdf10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e818:	9acf20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e81c:	f61f10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000e820:	4511                	li	a0,4
    8000e822:	ee6f20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000e826:	6789                	lui	a5,0x2
    8000e828:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000e82c:	4509                	li	a0,2
    8000e82e:	edaf20ef          	jal	80000f08 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000e832:	ddaf20ef          	jal	80000e0c <test_setup_except_function>
    8000e836:	400197b7          	lui	a5,0x40019
    8000e83a:	078a                	slli	a5,a5,0x2
    8000e83c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e840:	08200593          	li	a1,130
    8000e844:	00021617          	auipc	a2,0x21
    8000e848:	6cc60613          	addi	a2,a2,1740 # 8002ff10 <__func__.0+0x2e58>
    8000e84c:	0001f517          	auipc	a0,0x1f
    8000e850:	b6450513          	addi	a0,a0,-1180 # 8002d3b0 <__func__.0+0x2f8>
    8000e854:	6021c0ef          	jal	8002ae56 <printf>
    8000e858:	00045797          	auipc	a5,0x45
    8000e85c:	7b97c783          	lbu	a5,1977(a5) # 80054011 <excpt+0x1>
    8000e860:	00045497          	auipc	s1,0x45
    8000e864:	7b048493          	addi	s1,s1,1968 # 80054010 <excpt>
    8000e868:	0001f597          	auipc	a1,0x1f
    8000e86c:	b2058593          	addi	a1,a1,-1248 # 8002d388 <__func__.0+0x2d0>
    8000e870:	c789                	beqz	a5,8000e87a <priv_change_2+0x8e>
    8000e872:	6498                	ld	a4,8(s1)
    8000e874:	47b5                	li	a5,13
    8000e876:	0cf70463          	beq	a4,a5,8000e93e <priv_change_2+0x152>
    8000e87a:	0001f517          	auipc	a0,0x1f
    8000e87e:	b4e50513          	addi	a0,a0,-1202 # 8002d3c8 <__func__.0+0x310>
    8000e882:	5d41c0ef          	jal	8002ae56 <printf>
    8000e886:	00045797          	auipc	a5,0x45
    8000e88a:	78b7c783          	lbu	a5,1931(a5) # 80054011 <excpt+0x1>
    8000e88e:	c789                	beqz	a5,8000e898 <priv_change_2+0xac>
    8000e890:	6498                	ld	a4,8(s1)
    8000e892:	47b5                	li	a5,13
    8000e894:	04f70e63          	beq	a4,a5,8000e8f0 <priv_change_2+0x104>
    8000e898:	0001f517          	auipc	a0,0x1f
    8000e89c:	b3850513          	addi	a0,a0,-1224 # 8002d3d0 <__func__.0+0x318>
    8000e8a0:	5b61c0ef          	jal	8002ae56 <printf>
    8000e8a4:	02900513          	li	a0,41
    8000e8a8:	29c1b0ef          	jal	80029b44 <putchar>
    8000e8ac:	4529                	li	a0,10
    8000e8ae:	2961b0ef          	jal	80029b44 <putchar>
    8000e8b2:	00045417          	auipc	s0,0x45
    8000e8b6:	75f44403          	lbu	s0,1887(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000e8ba:	0001f597          	auipc	a1,0x1f
    8000e8be:	ace58593          	addi	a1,a1,-1330 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e8c2:	c411                	beqz	s0,8000e8ce <priv_change_2+0xe2>
    8000e8c4:	6498                	ld	a4,8(s1)
    8000e8c6:	47b5                	li	a5,13
    8000e8c8:	04f70363          	beq	a4,a5,8000e90e <priv_change_2+0x122>
    8000e8cc:	4401                	li	s0,0
    TEST_END();
    8000e8ce:	0001f517          	auipc	a0,0x1f
    8000e8d2:	b6250513          	addi	a0,a0,-1182 # 8002d430 <__func__.0+0x378>
    8000e8d6:	5801c0ef          	jal	8002ae56 <printf>
    8000e8da:	4511                	li	a0,4
    8000e8dc:	e2cf20ef          	jal	80000f08 <goto_priv>
    8000e8e0:	f45f20ef          	jal	80001824 <reset_state>
}
    8000e8e4:	60e2                	ld	ra,24(sp)
    8000e8e6:	8522                	mv	a0,s0
    8000e8e8:	6442                	ld	s0,16(sp)
    8000e8ea:	64a2                	ld	s1,8(sp)
    8000e8ec:	6105                	addi	sp,sp,32
    8000e8ee:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e8f0:	00045717          	auipc	a4,0x45
    8000e8f4:	72472703          	lw	a4,1828(a4) # 80054014 <excpt+0x4>
    8000e8f8:	4791                	li	a5,4
    8000e8fa:	f8f71fe3          	bne	a4,a5,8000e898 <priv_change_2+0xac>
    8000e8fe:	0002c717          	auipc	a4,0x2c
    8000e902:	05e72703          	lw	a4,94(a4) # 8003a95c <curr_priv>
    8000e906:	4789                	li	a5,2
    8000e908:	f8f718e3          	bne	a4,a5,8000e898 <priv_change_2+0xac>
    8000e90c:	b745                	j	8000e8ac <priv_change_2+0xc0>
    8000e90e:	00045717          	auipc	a4,0x45
    8000e912:	70672703          	lw	a4,1798(a4) # 80054014 <excpt+0x4>
    8000e916:	4791                	li	a5,4
    8000e918:	faf71ae3          	bne	a4,a5,8000e8cc <priv_change_2+0xe0>
    8000e91c:	0002c717          	auipc	a4,0x2c
    8000e920:	04072703          	lw	a4,64(a4) # 8003a95c <curr_priv>
    8000e924:	4789                	li	a5,2
    TEST_END();
    8000e926:	0001f597          	auipc	a1,0x1f
    8000e92a:	a5258593          	addi	a1,a1,-1454 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e92e:	faf700e3          	beq	a4,a5,8000e8ce <priv_change_2+0xe2>
    8000e932:	4401                	li	s0,0
    TEST_END();
    8000e934:	0001f597          	auipc	a1,0x1f
    8000e938:	a5458593          	addi	a1,a1,-1452 # 8002d388 <__func__.0+0x2d0>
    8000e93c:	bf49                	j	8000e8ce <priv_change_2+0xe2>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e93e:	00045717          	auipc	a4,0x45
    8000e942:	6d672703          	lw	a4,1750(a4) # 80054014 <excpt+0x4>
    8000e946:	4791                	li	a5,4
    8000e948:	f2f719e3          	bne	a4,a5,8000e87a <priv_change_2+0x8e>
    8000e94c:	0002c717          	auipc	a4,0x2c
    8000e950:	01072703          	lw	a4,16(a4) # 8003a95c <curr_priv>
    8000e954:	4789                	li	a5,2
    8000e956:	0001f597          	auipc	a1,0x1f
    8000e95a:	a2258593          	addi	a1,a1,-1502 # 8002d378 <__func__.0+0x2c0>
    8000e95e:	f0f70ee3          	beq	a4,a5,8000e87a <priv_change_2+0x8e>
    8000e962:	0001f597          	auipc	a1,0x1f
    8000e966:	a2658593          	addi	a1,a1,-1498 # 8002d388 <__func__.0+0x2d0>
    8000e96a:	bf01                	j	8000e87a <priv_change_2+0x8e>

000000008000e96c <priv_change_3>:


bool priv_change_3(){
    8000e96c:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000e96e:	0001d597          	auipc	a1,0x1d
    8000e972:	01a58593          	addi	a1,a1,26 # 8002b988 <__func__.13>
    8000e976:	0001f517          	auipc	a0,0x1f
    8000e97a:	a2250513          	addi	a0,a0,-1502 # 8002d398 <__func__.0+0x2e0>
bool priv_change_3(){
    8000e97e:	e406                	sd	ra,8(sp)
    8000e980:	e022                	sd	s0,0(sp)
    TEST_START();
    8000e982:	4d41c0ef          	jal	8002ae56 <printf>
    8000e986:	4529                	li	a0,10
    8000e988:	1bc1b0ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    8000e98c:	450d                	li	a0,3
    8000e98e:	d7af20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e992:	c4ff10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e996:	82ef20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e99a:	de3f10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000e99e:	c6ef20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8000e9a2:	4511                	li	a0,4
    8000e9a4:	d64f20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000e9a8:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000e9ac:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000e9b0:	450d                	li	a0,3
    8000e9b2:	d56f20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e9b6:	c56f20ef          	jal	80000e0c <test_setup_except_function>
    8000e9ba:	400197b7          	lui	a5,0x40019
    8000e9be:	078a                	slli	a5,a5,0x2
    8000e9c0:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9c4:	08200593          	li	a1,130
    8000e9c8:	00021617          	auipc	a2,0x21
    8000e9cc:	58860613          	addi	a2,a2,1416 # 8002ff50 <__func__.0+0x2e98>
    8000e9d0:	0001f517          	auipc	a0,0x1f
    8000e9d4:	9e050513          	addi	a0,a0,-1568 # 8002d3b0 <__func__.0+0x2f8>
    8000e9d8:	47e1c0ef          	jal	8002ae56 <printf>
    8000e9dc:	00045797          	auipc	a5,0x45
    8000e9e0:	6357c783          	lbu	a5,1589(a5) # 80054011 <excpt+0x1>
    8000e9e4:	0001f597          	auipc	a1,0x1f
    8000e9e8:	9a458593          	addi	a1,a1,-1628 # 8002d388 <__func__.0+0x2d0>
    8000e9ec:	cb81                	beqz	a5,8000e9fc <priv_change_3+0x90>
    8000e9ee:	0002c717          	auipc	a4,0x2c
    8000e9f2:	f6e72703          	lw	a4,-146(a4) # 8003a95c <curr_priv>
    8000e9f6:	478d                	li	a5,3
    8000e9f8:	0af70b63          	beq	a4,a5,8000eaae <priv_change_3+0x142>
    8000e9fc:	0001f517          	auipc	a0,0x1f
    8000ea00:	9cc50513          	addi	a0,a0,-1588 # 8002d3c8 <__func__.0+0x310>
    8000ea04:	4521c0ef          	jal	8002ae56 <printf>
    8000ea08:	00045797          	auipc	a5,0x45
    8000ea0c:	6097c783          	lbu	a5,1545(a5) # 80054011 <excpt+0x1>
    8000ea10:	cb81                	beqz	a5,8000ea20 <priv_change_3+0xb4>
    8000ea12:	0002c717          	auipc	a4,0x2c
    8000ea16:	f4a72703          	lw	a4,-182(a4) # 8003a95c <curr_priv>
    8000ea1a:	478d                	li	a5,3
    8000ea1c:	06f70063          	beq	a4,a5,8000ea7c <priv_change_3+0x110>
    8000ea20:	0001f517          	auipc	a0,0x1f
    8000ea24:	9b050513          	addi	a0,a0,-1616 # 8002d3d0 <__func__.0+0x318>
    8000ea28:	42e1c0ef          	jal	8002ae56 <printf>
    8000ea2c:	02900513          	li	a0,41
    8000ea30:	1141b0ef          	jal	80029b44 <putchar>
    8000ea34:	4529                	li	a0,10
    8000ea36:	10e1b0ef          	jal	80029b44 <putchar>
    8000ea3a:	00045417          	auipc	s0,0x45
    8000ea3e:	5d744403          	lbu	s0,1495(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000ea42:	0001f597          	auipc	a1,0x1f
    8000ea46:	94658593          	addi	a1,a1,-1722 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea4a:	c809                	beqz	s0,8000ea5c <priv_change_3+0xf0>
    8000ea4c:	0002c717          	auipc	a4,0x2c
    8000ea50:	f1072703          	lw	a4,-240(a4) # 8003a95c <curr_priv>
    8000ea54:	478d                	li	a5,3
    8000ea56:	02f70b63          	beq	a4,a5,8000ea8c <priv_change_3+0x120>
    8000ea5a:	4401                	li	s0,0
    TEST_END();
    8000ea5c:	0001f517          	auipc	a0,0x1f
    8000ea60:	9d450513          	addi	a0,a0,-1580 # 8002d430 <__func__.0+0x378>
    8000ea64:	3f21c0ef          	jal	8002ae56 <printf>
    8000ea68:	4511                	li	a0,4
    8000ea6a:	c9ef20ef          	jal	80000f08 <goto_priv>
    8000ea6e:	db7f20ef          	jal	80001824 <reset_state>
}
    8000ea72:	60a2                	ld	ra,8(sp)
    8000ea74:	8522                	mv	a0,s0
    8000ea76:	6402                	ld	s0,0(sp)
    8000ea78:	0141                	addi	sp,sp,16
    8000ea7a:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea7c:	00045717          	auipc	a4,0x45
    8000ea80:	59872703          	lw	a4,1432(a4) # 80054014 <excpt+0x4>
    8000ea84:	4791                	li	a5,4
    8000ea86:	f8f71de3          	bne	a4,a5,8000ea20 <priv_change_3+0xb4>
    8000ea8a:	b76d                	j	8000ea34 <priv_change_3+0xc8>
    8000ea8c:	00045717          	auipc	a4,0x45
    8000ea90:	58872703          	lw	a4,1416(a4) # 80054014 <excpt+0x4>
    8000ea94:	4791                	li	a5,4
    TEST_END();
    8000ea96:	0001f597          	auipc	a1,0x1f
    8000ea9a:	8e258593          	addi	a1,a1,-1822 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea9e:	faf70fe3          	beq	a4,a5,8000ea5c <priv_change_3+0xf0>
    8000eaa2:	4401                	li	s0,0
    TEST_END();
    8000eaa4:	0001f597          	auipc	a1,0x1f
    8000eaa8:	8e458593          	addi	a1,a1,-1820 # 8002d388 <__func__.0+0x2d0>
    8000eaac:	bf45                	j	8000ea5c <priv_change_3+0xf0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eaae:	00045717          	auipc	a4,0x45
    8000eab2:	56672703          	lw	a4,1382(a4) # 80054014 <excpt+0x4>
    8000eab6:	4791                	li	a5,4
    8000eab8:	0001f597          	auipc	a1,0x1f
    8000eabc:	8c058593          	addi	a1,a1,-1856 # 8002d378 <__func__.0+0x2c0>
    8000eac0:	f2f70ee3          	beq	a4,a5,8000e9fc <priv_change_3+0x90>
    8000eac4:	0001f597          	auipc	a1,0x1f
    8000eac8:	8c458593          	addi	a1,a1,-1852 # 8002d388 <__func__.0+0x2d0>
    8000eacc:	bf05                	j	8000e9fc <priv_change_3+0x90>

000000008000eace <priv_change_4>:

bool priv_change_4(){
    8000eace:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000ead0:	0001d597          	auipc	a1,0x1d
    8000ead4:	ec858593          	addi	a1,a1,-312 # 8002b998 <__func__.12>
    8000ead8:	0001f517          	auipc	a0,0x1f
    8000eadc:	8c050513          	addi	a0,a0,-1856 # 8002d398 <__func__.0+0x2e0>
bool priv_change_4(){
    8000eae0:	ec06                	sd	ra,24(sp)
    8000eae2:	e822                	sd	s0,16(sp)
    8000eae4:	e426                	sd	s1,8(sp)
    TEST_START();
    8000eae6:	3701c0ef          	jal	8002ae56 <printf>
    8000eaea:	4529                	li	a0,10
    8000eaec:	0581b0ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    8000eaf0:	450d                	li	a0,3
    8000eaf2:	c16f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000eaf6:	aebf10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000eafa:	ecbf10ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000eafe:	c7ff10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000eb02:	4511                	li	a0,4
    8000eb04:	c04f20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000eb08:	6789                	lui	a5,0x2
    8000eb0a:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000eb0e:	450d                	li	a0,3
    8000eb10:	bf8f20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000eb14:	af8f20ef          	jal	80000e0c <test_setup_except_function>
    8000eb18:	400197b7          	lui	a5,0x40019
    8000eb1c:	078a                	slli	a5,a5,0x2
    8000eb1e:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb22:	08200593          	li	a1,130
    8000eb26:	00021617          	auipc	a2,0x21
    8000eb2a:	49a60613          	addi	a2,a2,1178 # 8002ffc0 <__func__.0+0x2f08>
    8000eb2e:	0001f517          	auipc	a0,0x1f
    8000eb32:	88250513          	addi	a0,a0,-1918 # 8002d3b0 <__func__.0+0x2f8>
    8000eb36:	3201c0ef          	jal	8002ae56 <printf>
    8000eb3a:	00045797          	auipc	a5,0x45
    8000eb3e:	4d77c783          	lbu	a5,1239(a5) # 80054011 <excpt+0x1>
    8000eb42:	00045497          	auipc	s1,0x45
    8000eb46:	4ce48493          	addi	s1,s1,1230 # 80054010 <excpt>
    8000eb4a:	0001f597          	auipc	a1,0x1f
    8000eb4e:	83e58593          	addi	a1,a1,-1986 # 8002d388 <__func__.0+0x2d0>
    8000eb52:	c789                	beqz	a5,8000eb5c <priv_change_4+0x8e>
    8000eb54:	6498                	ld	a4,8(s1)
    8000eb56:	47b5                	li	a5,13
    8000eb58:	0af70663          	beq	a4,a5,8000ec04 <priv_change_4+0x136>
    8000eb5c:	0001f517          	auipc	a0,0x1f
    8000eb60:	86c50513          	addi	a0,a0,-1940 # 8002d3c8 <__func__.0+0x310>
    8000eb64:	2f21c0ef          	jal	8002ae56 <printf>
    8000eb68:	00045797          	auipc	a5,0x45
    8000eb6c:	4a97c783          	lbu	a5,1193(a5) # 80054011 <excpt+0x1>
    8000eb70:	c789                	beqz	a5,8000eb7a <priv_change_4+0xac>
    8000eb72:	6498                	ld	a4,8(s1)
    8000eb74:	47b5                	li	a5,13
    8000eb76:	04f70e63          	beq	a4,a5,8000ebd2 <priv_change_4+0x104>
    8000eb7a:	0001f517          	auipc	a0,0x1f
    8000eb7e:	85650513          	addi	a0,a0,-1962 # 8002d3d0 <__func__.0+0x318>
    8000eb82:	2d41c0ef          	jal	8002ae56 <printf>
    8000eb86:	02900513          	li	a0,41
    8000eb8a:	7bb1a0ef          	jal	80029b44 <putchar>
    8000eb8e:	4529                	li	a0,10
    8000eb90:	7b51a0ef          	jal	80029b44 <putchar>
    8000eb94:	00045417          	auipc	s0,0x45
    8000eb98:	47d44403          	lbu	s0,1149(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000eb9c:	0001e597          	auipc	a1,0x1e
    8000eba0:	7ec58593          	addi	a1,a1,2028 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eba4:	c411                	beqz	s0,8000ebb0 <priv_change_4+0xe2>
    8000eba6:	6498                	ld	a4,8(s1)
    8000eba8:	47b5                	li	a5,13
    8000ebaa:	02f70c63          	beq	a4,a5,8000ebe2 <priv_change_4+0x114>
    8000ebae:	4401                	li	s0,0
    TEST_END();
    8000ebb0:	0001f517          	auipc	a0,0x1f
    8000ebb4:	88050513          	addi	a0,a0,-1920 # 8002d430 <__func__.0+0x378>
    8000ebb8:	29e1c0ef          	jal	8002ae56 <printf>
    8000ebbc:	4511                	li	a0,4
    8000ebbe:	b4af20ef          	jal	80000f08 <goto_priv>
    8000ebc2:	c63f20ef          	jal	80001824 <reset_state>
}
    8000ebc6:	60e2                	ld	ra,24(sp)
    8000ebc8:	8522                	mv	a0,s0
    8000ebca:	6442                	ld	s0,16(sp)
    8000ebcc:	64a2                	ld	s1,8(sp)
    8000ebce:	6105                	addi	sp,sp,32
    8000ebd0:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebd2:	00045717          	auipc	a4,0x45
    8000ebd6:	44272703          	lw	a4,1090(a4) # 80054014 <excpt+0x4>
    8000ebda:	4791                	li	a5,4
    8000ebdc:	f8f71fe3          	bne	a4,a5,8000eb7a <priv_change_4+0xac>
    8000ebe0:	b77d                	j	8000eb8e <priv_change_4+0xc0>
    8000ebe2:	00045717          	auipc	a4,0x45
    8000ebe6:	43272703          	lw	a4,1074(a4) # 80054014 <excpt+0x4>
    8000ebea:	4791                	li	a5,4
    TEST_END();
    8000ebec:	0001e597          	auipc	a1,0x1e
    8000ebf0:	78c58593          	addi	a1,a1,1932 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebf4:	faf70ee3          	beq	a4,a5,8000ebb0 <priv_change_4+0xe2>
    8000ebf8:	4401                	li	s0,0
    TEST_END();
    8000ebfa:	0001e597          	auipc	a1,0x1e
    8000ebfe:	78e58593          	addi	a1,a1,1934 # 8002d388 <__func__.0+0x2d0>
    8000ec02:	b77d                	j	8000ebb0 <priv_change_4+0xe2>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ec04:	00045717          	auipc	a4,0x45
    8000ec08:	41072703          	lw	a4,1040(a4) # 80054014 <excpt+0x4>
    8000ec0c:	4791                	li	a5,4
    8000ec0e:	0001e597          	auipc	a1,0x1e
    8000ec12:	76a58593          	addi	a1,a1,1898 # 8002d378 <__func__.0+0x2c0>
    8000ec16:	f4f703e3          	beq	a4,a5,8000eb5c <priv_change_4+0x8e>
    8000ec1a:	0001e597          	auipc	a1,0x1e
    8000ec1e:	76e58593          	addi	a1,a1,1902 # 8002d388 <__func__.0+0x2d0>
    8000ec22:	bf2d                	j	8000eb5c <priv_change_4+0x8e>

000000008000ec24 <priv_change_5>:

bool priv_change_5(){
    8000ec24:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ec26:	0001d597          	auipc	a1,0x1d
    8000ec2a:	d8258593          	addi	a1,a1,-638 # 8002b9a8 <__func__.11>
    8000ec2e:	0001e517          	auipc	a0,0x1e
    8000ec32:	76a50513          	addi	a0,a0,1898 # 8002d398 <__func__.0+0x2e0>
bool priv_change_5(){
    8000ec36:	e406                	sd	ra,8(sp)
    8000ec38:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ec3a:	21c1c0ef          	jal	8002ae56 <printf>
    8000ec3e:	4529                	li	a0,10
    8000ec40:	7051a0ef          	jal	80029b44 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000ec44:	4511                	li	a0,4
    8000ec46:	ac2f20ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000ec4a:	bdbf20ef          	jal	80001824 <reset_state>
    CSRW(medeleg, 0); 
    8000ec4e:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000ec52:	9baf20ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000ec56:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec5a:	08200593          	li	a1,130
    8000ec5e:	00021617          	auipc	a2,0x21
    8000ec62:	3a260613          	addi	a2,a2,930 # 80030000 <__func__.0+0x2f48>
    8000ec66:	0001e517          	auipc	a0,0x1e
    8000ec6a:	74a50513          	addi	a0,a0,1866 # 8002d3b0 <__func__.0+0x2f8>
    8000ec6e:	1e81c0ef          	jal	8002ae56 <printf>
    8000ec72:	00045417          	auipc	s0,0x45
    8000ec76:	39e40413          	addi	s0,s0,926 # 80054010 <excpt>
    8000ec7a:	6014                	ld	a3,0(s0)
    8000ec7c:	f0001737          	lui	a4,0xf0001
    8000ec80:	0712                	slli	a4,a4,0x4
    8000ec82:	4785                	li	a5,1
    8000ec84:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ec88:	178a                	slli	a5,a5,0x22
    8000ec8a:	8f75                	and	a4,a4,a3
    8000ec8c:	10078793          	addi	a5,a5,256
    8000ec90:	0001e597          	auipc	a1,0x1e
    8000ec94:	6e858593          	addi	a1,a1,1768 # 8002d378 <__func__.0+0x2c0>
    8000ec98:	00f70663          	beq	a4,a5,8000eca4 <priv_change_5+0x80>
    8000ec9c:	0001e597          	auipc	a1,0x1e
    8000eca0:	6ec58593          	addi	a1,a1,1772 # 8002d388 <__func__.0+0x2d0>
    8000eca4:	0001e517          	auipc	a0,0x1e
    8000eca8:	72450513          	addi	a0,a0,1828 # 8002d3c8 <__func__.0+0x310>
    8000ecac:	1aa1c0ef          	jal	8002ae56 <printf>
    8000ecb0:	00045797          	auipc	a5,0x45
    8000ecb4:	3617c783          	lbu	a5,865(a5) # 80054011 <excpt+0x1>
    8000ecb8:	cb81                	beqz	a5,8000ecc8 <priv_change_5+0xa4>
    8000ecba:	00045717          	auipc	a4,0x45
    8000ecbe:	35a72703          	lw	a4,858(a4) # 80054014 <excpt+0x4>
    8000ecc2:	4791                	li	a5,4
    8000ecc4:	00f70c63          	beq	a4,a5,8000ecdc <priv_change_5+0xb8>
    8000ecc8:	0001e517          	auipc	a0,0x1e
    8000eccc:	70850513          	addi	a0,a0,1800 # 8002d3d0 <__func__.0+0x318>
    8000ecd0:	1861c0ef          	jal	8002ae56 <printf>
    8000ecd4:	02900513          	li	a0,41
    8000ecd8:	66d1a0ef          	jal	80029b44 <putchar>
    8000ecdc:	4529                	li	a0,10
    8000ecde:	6671a0ef          	jal	80029b44 <putchar>
    8000ece2:	6014                	ld	a3,0(s0)
    8000ece4:	f0001737          	lui	a4,0xf0001
    8000ece8:	0712                	slli	a4,a4,0x4
    8000ecea:	4785                	li	a5,1
    8000ecec:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ecf0:	178a                	slli	a5,a5,0x22
    8000ecf2:	8f75                	and	a4,a4,a3
    8000ecf4:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000ecf8:	00021517          	auipc	a0,0x21
    8000ecfc:	34050513          	addi	a0,a0,832 # 80030038 <__func__.0+0x2f80>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed00:	02f70963          	beq	a4,a5,8000ed32 <priv_change_5+0x10e>
    printf("niuh");
    8000ed04:	1521c0ef          	jal	8002ae56 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed08:	4401                	li	s0,0

    TEST_END();
    8000ed0a:	0001e597          	auipc	a1,0x1e
    8000ed0e:	67e58593          	addi	a1,a1,1662 # 8002d388 <__func__.0+0x2d0>
    8000ed12:	0001e517          	auipc	a0,0x1e
    8000ed16:	71e50513          	addi	a0,a0,1822 # 8002d430 <__func__.0+0x378>
    8000ed1a:	13c1c0ef          	jal	8002ae56 <printf>
    8000ed1e:	4511                	li	a0,4
    8000ed20:	9e8f20ef          	jal	80000f08 <goto_priv>
    8000ed24:	b01f20ef          	jal	80001824 <reset_state>
}
    8000ed28:	60a2                	ld	ra,8(sp)
    8000ed2a:	8522                	mv	a0,s0
    8000ed2c:	6402                	ld	s0,0(sp)
    8000ed2e:	0141                	addi	sp,sp,16
    8000ed30:	8082                	ret
    printf("niuh");
    8000ed32:	1241c0ef          	jal	8002ae56 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed36:	4405                	li	s0,1
    TEST_END();
    8000ed38:	0001e597          	auipc	a1,0x1e
    8000ed3c:	64058593          	addi	a1,a1,1600 # 8002d378 <__func__.0+0x2c0>
    8000ed40:	bfc9                	j	8000ed12 <priv_change_5+0xee>

000000008000ed42 <priv_change_6>:

bool priv_change_6(){
    8000ed42:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ed44:	0001d597          	auipc	a1,0x1d
    8000ed48:	c7458593          	addi	a1,a1,-908 # 8002b9b8 <__func__.10>
    8000ed4c:	0001e517          	auipc	a0,0x1e
    8000ed50:	64c50513          	addi	a0,a0,1612 # 8002d398 <__func__.0+0x2e0>
bool priv_change_6(){
    8000ed54:	e406                	sd	ra,8(sp)
    8000ed56:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ed58:	0fe1c0ef          	jal	8002ae56 <printf>
    8000ed5c:	4529                	li	a0,10
    8000ed5e:	5e71a0ef          	jal	80029b44 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ed62:	4511                	li	a0,4
    8000ed64:	9a4f20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);         
    8000ed68:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000ed6c:	4505                	li	a0,1
    8000ed6e:	99af20ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000ed72:	89af20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ed76:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ed7a:	08200593          	li	a1,130
    8000ed7e:	00021617          	auipc	a2,0x21
    8000ed82:	2c260613          	addi	a2,a2,706 # 80030040 <__func__.0+0x2f88>
    8000ed86:	0001e517          	auipc	a0,0x1e
    8000ed8a:	62a50513          	addi	a0,a0,1578 # 8002d3b0 <__func__.0+0x2f8>
    8000ed8e:	0c81c0ef          	jal	8002ae56 <printf>
    8000ed92:	00045417          	auipc	s0,0x45
    8000ed96:	27e40413          	addi	s0,s0,638 # 80054010 <excpt>
    8000ed9a:	6014                	ld	a3,0(s0)
    8000ed9c:	f0001737          	lui	a4,0xf0001
    8000eda0:	0712                	slli	a4,a4,0x4
    8000eda2:	4785                	li	a5,1
    8000eda4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eda8:	178a                	slli	a5,a5,0x22
    8000edaa:	8f75                	and	a4,a4,a3
    8000edac:	10078793          	addi	a5,a5,256
    8000edb0:	0001e597          	auipc	a1,0x1e
    8000edb4:	5c858593          	addi	a1,a1,1480 # 8002d378 <__func__.0+0x2c0>
    8000edb8:	00f70663          	beq	a4,a5,8000edc4 <priv_change_6+0x82>
    8000edbc:	0001e597          	auipc	a1,0x1e
    8000edc0:	5cc58593          	addi	a1,a1,1484 # 8002d388 <__func__.0+0x2d0>
    8000edc4:	0001e517          	auipc	a0,0x1e
    8000edc8:	60450513          	addi	a0,a0,1540 # 8002d3c8 <__func__.0+0x310>
    8000edcc:	08a1c0ef          	jal	8002ae56 <printf>
    8000edd0:	00045797          	auipc	a5,0x45
    8000edd4:	2417c783          	lbu	a5,577(a5) # 80054011 <excpt+0x1>
    8000edd8:	cb81                	beqz	a5,8000ede8 <priv_change_6+0xa6>
    8000edda:	00045717          	auipc	a4,0x45
    8000edde:	23a72703          	lw	a4,570(a4) # 80054014 <excpt+0x4>
    8000ede2:	4791                	li	a5,4
    8000ede4:	00f70c63          	beq	a4,a5,8000edfc <priv_change_6+0xba>
    8000ede8:	0001e517          	auipc	a0,0x1e
    8000edec:	5e850513          	addi	a0,a0,1512 # 8002d3d0 <__func__.0+0x318>
    8000edf0:	0661c0ef          	jal	8002ae56 <printf>
    8000edf4:	02900513          	li	a0,41
    8000edf8:	54d1a0ef          	jal	80029b44 <putchar>
    8000edfc:	4529                	li	a0,10
    8000edfe:	5471a0ef          	jal	80029b44 <putchar>
    8000ee02:	6014                	ld	a3,0(s0)
    8000ee04:	f0001737          	lui	a4,0xf0001
    8000ee08:	0712                	slli	a4,a4,0x4
    8000ee0a:	4785                	li	a5,1
    8000ee0c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee10:	178a                	slli	a5,a5,0x22
    8000ee12:	8f75                	and	a4,a4,a3
    8000ee14:	10078793          	addi	a5,a5,256
    8000ee18:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000ee1a:	0001e597          	auipc	a1,0x1e
    8000ee1e:	56e58593          	addi	a1,a1,1390 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ee22:	00f71763          	bne	a4,a5,8000ee30 <priv_change_6+0xee>
    8000ee26:	4405                	li	s0,1
    TEST_END();
    8000ee28:	0001e597          	auipc	a1,0x1e
    8000ee2c:	55058593          	addi	a1,a1,1360 # 8002d378 <__func__.0+0x2c0>
    8000ee30:	0001e517          	auipc	a0,0x1e
    8000ee34:	60050513          	addi	a0,a0,1536 # 8002d430 <__func__.0+0x378>
    8000ee38:	01e1c0ef          	jal	8002ae56 <printf>
    8000ee3c:	4511                	li	a0,4
    8000ee3e:	8caf20ef          	jal	80000f08 <goto_priv>
    8000ee42:	9e3f20ef          	jal	80001824 <reset_state>
}
    8000ee46:	60a2                	ld	ra,8(sp)
    8000ee48:	8522                	mv	a0,s0
    8000ee4a:	6402                	ld	s0,0(sp)
    8000ee4c:	0141                	addi	sp,sp,16
    8000ee4e:	8082                	ret

000000008000ee50 <priv_change_7>:

bool priv_change_7(){
    8000ee50:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ee52:	0001d597          	auipc	a1,0x1d
    8000ee56:	b7658593          	addi	a1,a1,-1162 # 8002b9c8 <__func__.9>
    8000ee5a:	0001e517          	auipc	a0,0x1e
    8000ee5e:	53e50513          	addi	a0,a0,1342 # 8002d398 <__func__.0+0x2e0>
bool priv_change_7(){
    8000ee62:	e406                	sd	ra,8(sp)
    8000ee64:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ee66:	7f11b0ef          	jal	8002ae56 <printf>
    8000ee6a:	4529                	li	a0,10
    8000ee6c:	4d91a0ef          	jal	80029b44 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ee70:	4511                	li	a0,4
    8000ee72:	896f20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);      
    8000ee76:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000ee7a:	4501                	li	a0,0
    8000ee7c:	88cf20ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000ee80:	f8df10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ee84:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ee88:	08200593          	li	a1,130
    8000ee8c:	00021617          	auipc	a2,0x21
    8000ee90:	1f460613          	addi	a2,a2,500 # 80030080 <__func__.0+0x2fc8>
    8000ee94:	0001e517          	auipc	a0,0x1e
    8000ee98:	51c50513          	addi	a0,a0,1308 # 8002d3b0 <__func__.0+0x2f8>
    8000ee9c:	7bb1b0ef          	jal	8002ae56 <printf>
    8000eea0:	00045417          	auipc	s0,0x45
    8000eea4:	17040413          	addi	s0,s0,368 # 80054010 <excpt>
    8000eea8:	6014                	ld	a3,0(s0)
    8000eeaa:	f0001737          	lui	a4,0xf0001
    8000eeae:	0712                	slli	a4,a4,0x4
    8000eeb0:	4785                	li	a5,1
    8000eeb2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eeb6:	178a                	slli	a5,a5,0x22
    8000eeb8:	8f75                	and	a4,a4,a3
    8000eeba:	10078793          	addi	a5,a5,256
    8000eebe:	0001e597          	auipc	a1,0x1e
    8000eec2:	4ba58593          	addi	a1,a1,1210 # 8002d378 <__func__.0+0x2c0>
    8000eec6:	00f70663          	beq	a4,a5,8000eed2 <priv_change_7+0x82>
    8000eeca:	0001e597          	auipc	a1,0x1e
    8000eece:	4be58593          	addi	a1,a1,1214 # 8002d388 <__func__.0+0x2d0>
    8000eed2:	0001e517          	auipc	a0,0x1e
    8000eed6:	4f650513          	addi	a0,a0,1270 # 8002d3c8 <__func__.0+0x310>
    8000eeda:	77d1b0ef          	jal	8002ae56 <printf>
    8000eede:	00045797          	auipc	a5,0x45
    8000eee2:	1337c783          	lbu	a5,307(a5) # 80054011 <excpt+0x1>
    8000eee6:	cb81                	beqz	a5,8000eef6 <priv_change_7+0xa6>
    8000eee8:	00045717          	auipc	a4,0x45
    8000eeec:	12c72703          	lw	a4,300(a4) # 80054014 <excpt+0x4>
    8000eef0:	4791                	li	a5,4
    8000eef2:	00f70c63          	beq	a4,a5,8000ef0a <priv_change_7+0xba>
    8000eef6:	0001e517          	auipc	a0,0x1e
    8000eefa:	4da50513          	addi	a0,a0,1242 # 8002d3d0 <__func__.0+0x318>
    8000eefe:	7591b0ef          	jal	8002ae56 <printf>
    8000ef02:	02900513          	li	a0,41
    8000ef06:	43f1a0ef          	jal	80029b44 <putchar>
    8000ef0a:	4529                	li	a0,10
    8000ef0c:	4391a0ef          	jal	80029b44 <putchar>
    8000ef10:	6014                	ld	a3,0(s0)
    8000ef12:	f0001737          	lui	a4,0xf0001
    8000ef16:	0712                	slli	a4,a4,0x4
    8000ef18:	4785                	li	a5,1
    8000ef1a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef1e:	178a                	slli	a5,a5,0x22
    8000ef20:	8f75                	and	a4,a4,a3
    8000ef22:	10078793          	addi	a5,a5,256
    8000ef26:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000ef28:	0001e597          	auipc	a1,0x1e
    8000ef2c:	46058593          	addi	a1,a1,1120 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ef30:	00f71763          	bne	a4,a5,8000ef3e <priv_change_7+0xee>
    8000ef34:	4405                	li	s0,1
    TEST_END();
    8000ef36:	0001e597          	auipc	a1,0x1e
    8000ef3a:	44258593          	addi	a1,a1,1090 # 8002d378 <__func__.0+0x2c0>
    8000ef3e:	0001e517          	auipc	a0,0x1e
    8000ef42:	4f250513          	addi	a0,a0,1266 # 8002d430 <__func__.0+0x378>
    8000ef46:	7111b0ef          	jal	8002ae56 <printf>
    8000ef4a:	4511                	li	a0,4
    8000ef4c:	fbdf10ef          	jal	80000f08 <goto_priv>
    8000ef50:	8d5f20ef          	jal	80001824 <reset_state>
}
    8000ef54:	60a2                	ld	ra,8(sp)
    8000ef56:	8522                	mv	a0,s0
    8000ef58:	6402                	ld	s0,0(sp)
    8000ef5a:	0141                	addi	sp,sp,16
    8000ef5c:	8082                	ret

000000008000ef5e <priv_change_8>:

bool priv_change_8(){
    8000ef5e:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ef60:	0001d597          	auipc	a1,0x1d
    8000ef64:	a7858593          	addi	a1,a1,-1416 # 8002b9d8 <__func__.8>
    8000ef68:	0001e517          	auipc	a0,0x1e
    8000ef6c:	43050513          	addi	a0,a0,1072 # 8002d398 <__func__.0+0x2e0>
bool priv_change_8(){
    8000ef70:	e406                	sd	ra,8(sp)
    8000ef72:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ef74:	6e31b0ef          	jal	8002ae56 <printf>
    8000ef78:	4529                	li	a0,10
    8000ef7a:	3cb1a0ef          	jal	80029b44 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000ef7e:	4511                	li	a0,4
    8000ef80:	f89f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000ef84:	8a1f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,0);
    8000ef88:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000ef8c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000ef90:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ef94:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000ef98:	4501                	li	a0,0
    8000ef9a:	f6ff10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000ef9e:	e6ff10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000efa2:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000efa6:	08200593          	li	a1,130
    8000efaa:	00021617          	auipc	a2,0x21
    8000efae:	11660613          	addi	a2,a2,278 # 800300c0 <__func__.0+0x3008>
    8000efb2:	0001e517          	auipc	a0,0x1e
    8000efb6:	3fe50513          	addi	a0,a0,1022 # 8002d3b0 <__func__.0+0x2f8>
    8000efba:	69d1b0ef          	jal	8002ae56 <printf>
    8000efbe:	00045417          	auipc	s0,0x45
    8000efc2:	05240413          	addi	s0,s0,82 # 80054010 <excpt>
    8000efc6:	6014                	ld	a3,0(s0)
    8000efc8:	f0001737          	lui	a4,0xf0001
    8000efcc:	0712                	slli	a4,a4,0x4
    8000efce:	4785                	li	a5,1
    8000efd0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000efd4:	178a                	slli	a5,a5,0x22
    8000efd6:	8f75                	and	a4,a4,a3
    8000efd8:	10078793          	addi	a5,a5,256
    8000efdc:	0001e597          	auipc	a1,0x1e
    8000efe0:	3ac58593          	addi	a1,a1,940 # 8002d388 <__func__.0+0x2d0>
    8000efe4:	08f70963          	beq	a4,a5,8000f076 <priv_change_8+0x118>
    8000efe8:	0001e517          	auipc	a0,0x1e
    8000efec:	3e050513          	addi	a0,a0,992 # 8002d3c8 <__func__.0+0x310>
    8000eff0:	6671b0ef          	jal	8002ae56 <printf>
    8000eff4:	00045797          	auipc	a5,0x45
    8000eff8:	01d7c783          	lbu	a5,29(a5) # 80054011 <excpt+0x1>
    8000effc:	cb81                	beqz	a5,8000f00c <priv_change_8+0xae>
    8000effe:	00045717          	auipc	a4,0x45
    8000f002:	01672703          	lw	a4,22(a4) # 80054014 <excpt+0x4>
    8000f006:	4791                	li	a5,4
    8000f008:	06f70163          	beq	a4,a5,8000f06a <priv_change_8+0x10c>
    8000f00c:	0001e517          	auipc	a0,0x1e
    8000f010:	3c450513          	addi	a0,a0,964 # 8002d3d0 <__func__.0+0x318>
    8000f014:	6431b0ef          	jal	8002ae56 <printf>
    8000f018:	02900513          	li	a0,41
    8000f01c:	3291a0ef          	jal	80029b44 <putchar>
    8000f020:	4529                	li	a0,10
    8000f022:	3231a0ef          	jal	80029b44 <putchar>
    8000f026:	6014                	ld	a3,0(s0)
    8000f028:	f0001737          	lui	a4,0xf0001
    8000f02c:	0712                	slli	a4,a4,0x4
    8000f02e:	4785                	li	a5,1
    8000f030:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f034:	178a                	slli	a5,a5,0x22
    8000f036:	8f75                	and	a4,a4,a3
    8000f038:	10078793          	addi	a5,a5,256
    8000f03c:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000f03e:	0001e597          	auipc	a1,0x1e
    8000f042:	34a58593          	addi	a1,a1,842 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f046:	04f70663          	beq	a4,a5,8000f092 <priv_change_8+0x134>
    TEST_END();
    8000f04a:	0001e517          	auipc	a0,0x1e
    8000f04e:	3e650513          	addi	a0,a0,998 # 8002d430 <__func__.0+0x378>
    8000f052:	6051b0ef          	jal	8002ae56 <printf>
    8000f056:	4511                	li	a0,4
    8000f058:	eb1f10ef          	jal	80000f08 <goto_priv>
    8000f05c:	fc8f20ef          	jal	80001824 <reset_state>
}
    8000f060:	60a2                	ld	ra,8(sp)
    8000f062:	8522                	mv	a0,s0
    8000f064:	6402                	ld	s0,0(sp)
    8000f066:	0141                	addi	sp,sp,16
    8000f068:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f06a:	0002c797          	auipc	a5,0x2c
    8000f06e:	8f27a783          	lw	a5,-1806(a5) # 8003a95c <curr_priv>
    8000f072:	d7dd                	beqz	a5,8000f020 <priv_change_8+0xc2>
    8000f074:	bf61                	j	8000f00c <priv_change_8+0xae>
    8000f076:	0002c797          	auipc	a5,0x2c
    8000f07a:	8e67a783          	lw	a5,-1818(a5) # 8003a95c <curr_priv>
    8000f07e:	0001e597          	auipc	a1,0x1e
    8000f082:	2fa58593          	addi	a1,a1,762 # 8002d378 <__func__.0+0x2c0>
    8000f086:	d3ad                	beqz	a5,8000efe8 <priv_change_8+0x8a>
    8000f088:	0001e597          	auipc	a1,0x1e
    8000f08c:	30058593          	addi	a1,a1,768 # 8002d388 <__func__.0+0x2d0>
    8000f090:	bfa1                	j	8000efe8 <priv_change_8+0x8a>
    8000f092:	0002c797          	auipc	a5,0x2c
    8000f096:	8ca7a783          	lw	a5,-1846(a5) # 8003a95c <curr_priv>
    8000f09a:	fbc5                	bnez	a5,8000f04a <priv_change_8+0xec>
    8000f09c:	4405                	li	s0,1
    TEST_END();
    8000f09e:	0001e597          	auipc	a1,0x1e
    8000f0a2:	2da58593          	addi	a1,a1,730 # 8002d378 <__func__.0+0x2c0>
    8000f0a6:	b755                	j	8000f04a <priv_change_8+0xec>

000000008000f0a8 <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000f0a8:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f0aa:	0001d597          	auipc	a1,0x1d
    8000f0ae:	93e58593          	addi	a1,a1,-1730 # 8002b9e8 <__func__.7>
    8000f0b2:	0001e517          	auipc	a0,0x1e
    8000f0b6:	2e650513          	addi	a0,a0,742 # 8002d398 <__func__.0+0x2e0>
bool priv_change_9(){
    8000f0ba:	e406                	sd	ra,8(sp)
    8000f0bc:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f0be:	5991b0ef          	jal	8002ae56 <printf>
    8000f0c2:	4529                	li	a0,10
    8000f0c4:	2811a0ef          	jal	80029b44 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f0c8:	4511                	li	a0,4
    8000f0ca:	e3ff10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f0ce:	57fd                	li	a5,-1
    8000f0d0:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f0d4:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f0d8:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f0dc:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f0e0:	4501                	li	a0,0
    8000f0e2:	e27f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f0e6:	d27f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f0ea:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0ee:	08200593          	li	a1,130
    8000f0f2:	00021617          	auipc	a2,0x21
    8000f0f6:	03e60613          	addi	a2,a2,62 # 80030130 <__func__.0+0x3078>
    8000f0fa:	0001e517          	auipc	a0,0x1e
    8000f0fe:	2b650513          	addi	a0,a0,694 # 8002d3b0 <__func__.0+0x2f8>
    8000f102:	5551b0ef          	jal	8002ae56 <printf>
    8000f106:	00045417          	auipc	s0,0x45
    8000f10a:	f0a40413          	addi	s0,s0,-246 # 80054010 <excpt>
    8000f10e:	6014                	ld	a3,0(s0)
    8000f110:	f0001737          	lui	a4,0xf0001
    8000f114:	0712                	slli	a4,a4,0x4
    8000f116:	4785                	li	a5,1
    8000f118:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f11c:	1786                	slli	a5,a5,0x21
    8000f11e:	8f75                	and	a4,a4,a3
    8000f120:	10078793          	addi	a5,a5,256
    8000f124:	0001e597          	auipc	a1,0x1e
    8000f128:	26458593          	addi	a1,a1,612 # 8002d388 <__func__.0+0x2d0>
    8000f12c:	08f70263          	beq	a4,a5,8000f1b0 <priv_change_9+0x108>
    8000f130:	0001e517          	auipc	a0,0x1e
    8000f134:	29850513          	addi	a0,a0,664 # 8002d3c8 <__func__.0+0x310>
    8000f138:	51f1b0ef          	jal	8002ae56 <printf>
    8000f13c:	00045797          	auipc	a5,0x45
    8000f140:	ed57c783          	lbu	a5,-299(a5) # 80054011 <excpt+0x1>
    8000f144:	cb81                	beqz	a5,8000f154 <priv_change_9+0xac>
    8000f146:	00045717          	auipc	a4,0x45
    8000f14a:	ece72703          	lw	a4,-306(a4) # 80054014 <excpt+0x4>
    8000f14e:	4789                	li	a5,2
    8000f150:	04f70a63          	beq	a4,a5,8000f1a4 <priv_change_9+0xfc>
    8000f154:	0001e517          	auipc	a0,0x1e
    8000f158:	27c50513          	addi	a0,a0,636 # 8002d3d0 <__func__.0+0x318>
    8000f15c:	4fb1b0ef          	jal	8002ae56 <printf>
    8000f160:	02900513          	li	a0,41
    8000f164:	1e11a0ef          	jal	80029b44 <putchar>
    8000f168:	4529                	li	a0,10
    8000f16a:	1db1a0ef          	jal	80029b44 <putchar>
    8000f16e:	6014                	ld	a3,0(s0)
    8000f170:	f0001737          	lui	a4,0xf0001
    8000f174:	0712                	slli	a4,a4,0x4
    8000f176:	4785                	li	a5,1
    8000f178:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f17c:	1786                	slli	a5,a5,0x21
    8000f17e:	8f75                	and	a4,a4,a3
    8000f180:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f184:	0001e597          	auipc	a1,0x1e
    8000f188:	20458593          	addi	a1,a1,516 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f18c:	04f70063          	beq	a4,a5,8000f1cc <priv_change_9+0x124>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f190:	0001e517          	auipc	a0,0x1e
    8000f194:	2a050513          	addi	a0,a0,672 # 8002d430 <__func__.0+0x378>
    8000f198:	4bf1b0ef          	jal	8002ae56 <printf>
    }
}
    8000f19c:	60a2                	ld	ra,8(sp)
    8000f19e:	6402                	ld	s0,0(sp)
    8000f1a0:	0141                	addi	sp,sp,16
    8000f1a2:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f1a4:	0002b797          	auipc	a5,0x2b
    8000f1a8:	7b87a783          	lw	a5,1976(a5) # 8003a95c <curr_priv>
    8000f1ac:	dfd5                	beqz	a5,8000f168 <priv_change_9+0xc0>
    8000f1ae:	b75d                	j	8000f154 <priv_change_9+0xac>
    8000f1b0:	0002b797          	auipc	a5,0x2b
    8000f1b4:	7ac7a783          	lw	a5,1964(a5) # 8003a95c <curr_priv>
    8000f1b8:	0001e597          	auipc	a1,0x1e
    8000f1bc:	1c058593          	addi	a1,a1,448 # 8002d378 <__func__.0+0x2c0>
    8000f1c0:	dba5                	beqz	a5,8000f130 <priv_change_9+0x88>
    8000f1c2:	0001e597          	auipc	a1,0x1e
    8000f1c6:	1c658593          	addi	a1,a1,454 # 8002d388 <__func__.0+0x2d0>
    8000f1ca:	b79d                	j	8000f130 <priv_change_9+0x88>
    8000f1cc:	0002b797          	auipc	a5,0x2b
    8000f1d0:	7907a783          	lw	a5,1936(a5) # 8003a95c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f1d4:	0001e597          	auipc	a1,0x1e
    8000f1d8:	1a458593          	addi	a1,a1,420 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f1dc:	dbd5                	beqz	a5,8000f190 <priv_change_9+0xe8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f1de:	0001e597          	auipc	a1,0x1e
    8000f1e2:	1aa58593          	addi	a1,a1,426 # 8002d388 <__func__.0+0x2d0>
    8000f1e6:	0001e517          	auipc	a0,0x1e
    8000f1ea:	24a50513          	addi	a0,a0,586 # 8002d430 <__func__.0+0x378>
    8000f1ee:	4691b0ef          	jal	8002ae56 <printf>
}
    8000f1f2:	60a2                	ld	ra,8(sp)
    8000f1f4:	6402                	ld	s0,0(sp)
    8000f1f6:	0141                	addi	sp,sp,16
    8000f1f8:	8082                	ret

000000008000f1fa <priv_change_10>:


bool priv_change_10(){
    8000f1fa:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f1fc:	0001c597          	auipc	a1,0x1c
    8000f200:	7fc58593          	addi	a1,a1,2044 # 8002b9f8 <__func__.6>
    8000f204:	0001e517          	auipc	a0,0x1e
    8000f208:	19450513          	addi	a0,a0,404 # 8002d398 <__func__.0+0x2e0>
bool priv_change_10(){
    8000f20c:	e406                	sd	ra,8(sp)
    8000f20e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f210:	4471b0ef          	jal	8002ae56 <printf>
    8000f214:	4529                	li	a0,10
    8000f216:	12f1a0ef          	jal	80029b44 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000f21a:	4511                	li	a0,4
    8000f21c:	cedf10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f220:	e04f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f224:	57fd                	li	a5,-1
    8000f226:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f22a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f22e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f232:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000f236:	4505                	li	a0,1
    8000f238:	cd1f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f23c:	bd1f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f240:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f244:	08200593          	li	a1,130
    8000f248:	00021617          	auipc	a2,0x21
    8000f24c:	f5860613          	addi	a2,a2,-168 # 800301a0 <__func__.0+0x30e8>
    8000f250:	0001e517          	auipc	a0,0x1e
    8000f254:	16050513          	addi	a0,a0,352 # 8002d3b0 <__func__.0+0x2f8>
    8000f258:	3ff1b0ef          	jal	8002ae56 <printf>
    8000f25c:	00045417          	auipc	s0,0x45
    8000f260:	db440413          	addi	s0,s0,-588 # 80054010 <excpt>
    8000f264:	6014                	ld	a3,0(s0)
    8000f266:	f0001737          	lui	a4,0xf0001
    8000f26a:	0712                	slli	a4,a4,0x4
    8000f26c:	478d                	li	a5,3
    8000f26e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f272:	1782                	slli	a5,a5,0x20
    8000f274:	8f75                	and	a4,a4,a3
    8000f276:	10078793          	addi	a5,a5,256
    8000f27a:	0001e597          	auipc	a1,0x1e
    8000f27e:	10e58593          	addi	a1,a1,270 # 8002d388 <__func__.0+0x2d0>
    8000f282:	08f70463          	beq	a4,a5,8000f30a <priv_change_10+0x110>
    8000f286:	0001e517          	auipc	a0,0x1e
    8000f28a:	14250513          	addi	a0,a0,322 # 8002d3c8 <__func__.0+0x310>
    8000f28e:	3c91b0ef          	jal	8002ae56 <printf>
    8000f292:	00045797          	auipc	a5,0x45
    8000f296:	d7f7c783          	lbu	a5,-641(a5) # 80054011 <excpt+0x1>
    8000f29a:	cb81                	beqz	a5,8000f2aa <priv_change_10+0xb0>
    8000f29c:	00045717          	auipc	a4,0x45
    8000f2a0:	d7872703          	lw	a4,-648(a4) # 80054014 <excpt+0x4>
    8000f2a4:	478d                	li	a5,3
    8000f2a6:	04f70a63          	beq	a4,a5,8000f2fa <priv_change_10+0x100>
    8000f2aa:	0001e517          	auipc	a0,0x1e
    8000f2ae:	12650513          	addi	a0,a0,294 # 8002d3d0 <__func__.0+0x318>
    8000f2b2:	3a51b0ef          	jal	8002ae56 <printf>
    8000f2b6:	02900513          	li	a0,41
    8000f2ba:	08b1a0ef          	jal	80029b44 <putchar>
    8000f2be:	4529                	li	a0,10
    8000f2c0:	0851a0ef          	jal	80029b44 <putchar>
    8000f2c4:	6014                	ld	a3,0(s0)
    8000f2c6:	f0001737          	lui	a4,0xf0001
    8000f2ca:	0712                	slli	a4,a4,0x4
    8000f2cc:	478d                	li	a5,3
    8000f2ce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f2d2:	1782                	slli	a5,a5,0x20
    8000f2d4:	8f75                	and	a4,a4,a3
    8000f2d6:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f2da:	0001e597          	auipc	a1,0x1e
    8000f2de:	0ae58593          	addi	a1,a1,174 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f2e2:	04f70463          	beq	a4,a5,8000f32a <priv_change_10+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f2e6:	0001e517          	auipc	a0,0x1e
    8000f2ea:	14a50513          	addi	a0,a0,330 # 8002d430 <__func__.0+0x378>
    8000f2ee:	3691b0ef          	jal	8002ae56 <printf>
    }
}
    8000f2f2:	60a2                	ld	ra,8(sp)
    8000f2f4:	6402                	ld	s0,0(sp)
    8000f2f6:	0141                	addi	sp,sp,16
    8000f2f8:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f2fa:	0002b717          	auipc	a4,0x2b
    8000f2fe:	66272703          	lw	a4,1634(a4) # 8003a95c <curr_priv>
    8000f302:	4785                	li	a5,1
    8000f304:	faf713e3          	bne	a4,a5,8000f2aa <priv_change_10+0xb0>
    8000f308:	bf5d                	j	8000f2be <priv_change_10+0xc4>
    8000f30a:	0002b717          	auipc	a4,0x2b
    8000f30e:	65272703          	lw	a4,1618(a4) # 8003a95c <curr_priv>
    8000f312:	4785                	li	a5,1
    8000f314:	0001e597          	auipc	a1,0x1e
    8000f318:	06458593          	addi	a1,a1,100 # 8002d378 <__func__.0+0x2c0>
    8000f31c:	f6f705e3          	beq	a4,a5,8000f286 <priv_change_10+0x8c>
    8000f320:	0001e597          	auipc	a1,0x1e
    8000f324:	06858593          	addi	a1,a1,104 # 8002d388 <__func__.0+0x2d0>
    8000f328:	bfb9                	j	8000f286 <priv_change_10+0x8c>
    8000f32a:	0002b717          	auipc	a4,0x2b
    8000f32e:	63272703          	lw	a4,1586(a4) # 8003a95c <curr_priv>
    8000f332:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f334:	0001e597          	auipc	a1,0x1e
    8000f338:	04458593          	addi	a1,a1,68 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f33c:	faf705e3          	beq	a4,a5,8000f2e6 <priv_change_10+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f340:	0001e597          	auipc	a1,0x1e
    8000f344:	04858593          	addi	a1,a1,72 # 8002d388 <__func__.0+0x2d0>
    8000f348:	0001e517          	auipc	a0,0x1e
    8000f34c:	0e850513          	addi	a0,a0,232 # 8002d430 <__func__.0+0x378>
    8000f350:	3071b0ef          	jal	8002ae56 <printf>
}
    8000f354:	60a2                	ld	ra,8(sp)
    8000f356:	6402                	ld	s0,0(sp)
    8000f358:	0141                	addi	sp,sp,16
    8000f35a:	8082                	ret

000000008000f35c <priv_change_11>:


bool priv_change_11(){
    8000f35c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f35e:	0001c597          	auipc	a1,0x1c
    8000f362:	6aa58593          	addi	a1,a1,1706 # 8002ba08 <__func__.5>
    8000f366:	0001e517          	auipc	a0,0x1e
    8000f36a:	03250513          	addi	a0,a0,50 # 8002d398 <__func__.0+0x2e0>
bool priv_change_11(){
    8000f36e:	e406                	sd	ra,8(sp)
    8000f370:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f372:	2e51b0ef          	jal	8002ae56 <printf>
    8000f376:	4529                	li	a0,10
    8000f378:	7cc1a0ef          	jal	80029b44 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000f37c:	4511                	li	a0,4
    8000f37e:	b8bf10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f382:	ca2f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f386:	57fd                	li	a5,-1
    8000f388:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f38c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f390:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f394:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000f398:	4509                	li	a0,2
    8000f39a:	b6ff10ef          	jal	80000f08 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000f39e:	a6ff10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f3a2:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f3a6:	08200593          	li	a1,130
    8000f3aa:	00021617          	auipc	a2,0x21
    8000f3ae:	e6660613          	addi	a2,a2,-410 # 80030210 <__func__.0+0x3158>
    8000f3b2:	0001e517          	auipc	a0,0x1e
    8000f3b6:	ffe50513          	addi	a0,a0,-2 # 8002d3b0 <__func__.0+0x2f8>
    8000f3ba:	29d1b0ef          	jal	8002ae56 <printf>
    8000f3be:	00045417          	auipc	s0,0x45
    8000f3c2:	c5240413          	addi	s0,s0,-942 # 80054010 <excpt>
    8000f3c6:	6014                	ld	a3,0(s0)
    8000f3c8:	f0001737          	lui	a4,0xf0001
    8000f3cc:	0712                	slli	a4,a4,0x4
    8000f3ce:	4785                	li	a5,1
    8000f3d0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f3d4:	1786                	slli	a5,a5,0x21
    8000f3d6:	8f75                	and	a4,a4,a3
    8000f3d8:	10078793          	addi	a5,a5,256
    8000f3dc:	0001e597          	auipc	a1,0x1e
    8000f3e0:	f9c58593          	addi	a1,a1,-100 # 8002d378 <__func__.0+0x2c0>
    8000f3e4:	00f70663          	beq	a4,a5,8000f3f0 <priv_change_11+0x94>
    8000f3e8:	0001e597          	auipc	a1,0x1e
    8000f3ec:	fa058593          	addi	a1,a1,-96 # 8002d388 <__func__.0+0x2d0>
    8000f3f0:	0001e517          	auipc	a0,0x1e
    8000f3f4:	fd850513          	addi	a0,a0,-40 # 8002d3c8 <__func__.0+0x310>
    8000f3f8:	25f1b0ef          	jal	8002ae56 <printf>
    8000f3fc:	00045797          	auipc	a5,0x45
    8000f400:	c157c783          	lbu	a5,-1003(a5) # 80054011 <excpt+0x1>
    8000f404:	cb81                	beqz	a5,8000f414 <priv_change_11+0xb8>
    8000f406:	00045717          	auipc	a4,0x45
    8000f40a:	c0e72703          	lw	a4,-1010(a4) # 80054014 <excpt+0x4>
    8000f40e:	4789                	li	a5,2
    8000f410:	00f70c63          	beq	a4,a5,8000f428 <priv_change_11+0xcc>
    8000f414:	0001e517          	auipc	a0,0x1e
    8000f418:	fbc50513          	addi	a0,a0,-68 # 8002d3d0 <__func__.0+0x318>
    8000f41c:	23b1b0ef          	jal	8002ae56 <printf>
    8000f420:	02900513          	li	a0,41
    8000f424:	7201a0ef          	jal	80029b44 <putchar>
    8000f428:	4529                	li	a0,10
    8000f42a:	71a1a0ef          	jal	80029b44 <putchar>
    8000f42e:	6014                	ld	a3,0(s0)
    8000f430:	f0001737          	lui	a4,0xf0001
    8000f434:	0712                	slli	a4,a4,0x4
    8000f436:	4785                	li	a5,1
    8000f438:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f43c:	1786                	slli	a5,a5,0x21
    8000f43e:	8f75                	and	a4,a4,a3
    8000f440:	10078793          	addi	a5,a5,256
        excpt.priv==PRIV_VS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f444:	0001e597          	auipc	a1,0x1e
    8000f448:	f4458593          	addi	a1,a1,-188 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f44c:	00f71663          	bne	a4,a5,8000f458 <priv_change_11+0xfc>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f450:	0001e597          	auipc	a1,0x1e
    8000f454:	f2858593          	addi	a1,a1,-216 # 8002d378 <__func__.0+0x2c0>
    8000f458:	0001e517          	auipc	a0,0x1e
    8000f45c:	fd850513          	addi	a0,a0,-40 # 8002d430 <__func__.0+0x378>
    8000f460:	1f71b0ef          	jal	8002ae56 <printf>
    }
}
    8000f464:	60a2                	ld	ra,8(sp)
    8000f466:	6402                	ld	s0,0(sp)
    8000f468:	0141                	addi	sp,sp,16
    8000f46a:	8082                	ret

000000008000f46c <priv_change_12>:



bool priv_change_12(){
    8000f46c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f46e:	0001c597          	auipc	a1,0x1c
    8000f472:	5aa58593          	addi	a1,a1,1450 # 8002ba18 <__func__.4>
    8000f476:	0001e517          	auipc	a0,0x1e
    8000f47a:	f2250513          	addi	a0,a0,-222 # 8002d398 <__func__.0+0x2e0>
bool priv_change_12(){
    8000f47e:	e406                	sd	ra,8(sp)
    8000f480:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f482:	1d51b0ef          	jal	8002ae56 <printf>
    8000f486:	4529                	li	a0,10
    8000f488:	6bc1a0ef          	jal	80029b44 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000f48c:	4511                	li	a0,4
    8000f48e:	a7bf10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f492:	57fd                	li	a5,-1
    8000f494:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f498:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f49c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f4a0:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000f4a4:	450d                	li	a0,3
    8000f4a6:	a63f10ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f4aa:	963f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f4ae:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f4b2:	08200593          	li	a1,130
    8000f4b6:	00021617          	auipc	a2,0x21
    8000f4ba:	db260613          	addi	a2,a2,-590 # 80030268 <__func__.0+0x31b0>
    8000f4be:	0001e517          	auipc	a0,0x1e
    8000f4c2:	ef250513          	addi	a0,a0,-270 # 8002d3b0 <__func__.0+0x2f8>
    8000f4c6:	1911b0ef          	jal	8002ae56 <printf>
    8000f4ca:	00045417          	auipc	s0,0x45
    8000f4ce:	b4640413          	addi	s0,s0,-1210 # 80054010 <excpt>
    8000f4d2:	6014                	ld	a3,0(s0)
    8000f4d4:	f0001737          	lui	a4,0xf0001
    8000f4d8:	0712                	slli	a4,a4,0x4
    8000f4da:	478d                	li	a5,3
    8000f4dc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f4e0:	1782                	slli	a5,a5,0x20
    8000f4e2:	8f75                	and	a4,a4,a3
    8000f4e4:	10078793          	addi	a5,a5,256
    8000f4e8:	0001e597          	auipc	a1,0x1e
    8000f4ec:	e9058593          	addi	a1,a1,-368 # 8002d378 <__func__.0+0x2c0>
    8000f4f0:	00f70663          	beq	a4,a5,8000f4fc <priv_change_12+0x90>
    8000f4f4:	0001e597          	auipc	a1,0x1e
    8000f4f8:	e9458593          	addi	a1,a1,-364 # 8002d388 <__func__.0+0x2d0>
    8000f4fc:	0001e517          	auipc	a0,0x1e
    8000f500:	ecc50513          	addi	a0,a0,-308 # 8002d3c8 <__func__.0+0x310>
    8000f504:	1531b0ef          	jal	8002ae56 <printf>
    8000f508:	00045797          	auipc	a5,0x45
    8000f50c:	b097c783          	lbu	a5,-1271(a5) # 80054011 <excpt+0x1>
    8000f510:	cb81                	beqz	a5,8000f520 <priv_change_12+0xb4>
    8000f512:	00045717          	auipc	a4,0x45
    8000f516:	b0272703          	lw	a4,-1278(a4) # 80054014 <excpt+0x4>
    8000f51a:	478d                	li	a5,3
    8000f51c:	00f70c63          	beq	a4,a5,8000f534 <priv_change_12+0xc8>
    8000f520:	0001e517          	auipc	a0,0x1e
    8000f524:	eb050513          	addi	a0,a0,-336 # 8002d3d0 <__func__.0+0x318>
    8000f528:	12f1b0ef          	jal	8002ae56 <printf>
    8000f52c:	02900513          	li	a0,41
    8000f530:	6141a0ef          	jal	80029b44 <putchar>
    8000f534:	4529                	li	a0,10
    8000f536:	60e1a0ef          	jal	80029b44 <putchar>
    8000f53a:	6014                	ld	a3,0(s0)
    8000f53c:	f0001737          	lui	a4,0xf0001
    8000f540:	0712                	slli	a4,a4,0x4
    8000f542:	478d                	li	a5,3
    8000f544:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f548:	1782                	slli	a5,a5,0x20
    8000f54a:	8f75                	and	a4,a4,a3
    8000f54c:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f550:	0001e597          	auipc	a1,0x1e
    8000f554:	e3858593          	addi	a1,a1,-456 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f558:	00f71663          	bne	a4,a5,8000f564 <priv_change_12+0xf8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f55c:	0001e597          	auipc	a1,0x1e
    8000f560:	e1c58593          	addi	a1,a1,-484 # 8002d378 <__func__.0+0x2c0>
    8000f564:	0001e517          	auipc	a0,0x1e
    8000f568:	ecc50513          	addi	a0,a0,-308 # 8002d430 <__func__.0+0x378>
    8000f56c:	0eb1b0ef          	jal	8002ae56 <printf>
    }

}
    8000f570:	60a2                	ld	ra,8(sp)
    8000f572:	6402                	ld	s0,0(sp)
    8000f574:	0141                	addi	sp,sp,16
    8000f576:	8082                	ret

000000008000f578 <priv_change_13>:

bool priv_change_13(){
    8000f578:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f57a:	0001c597          	auipc	a1,0x1c
    8000f57e:	4ae58593          	addi	a1,a1,1198 # 8002ba28 <__func__.3>
    8000f582:	0001e517          	auipc	a0,0x1e
    8000f586:	e1650513          	addi	a0,a0,-490 # 8002d398 <__func__.0+0x2e0>
bool priv_change_13(){
    8000f58a:	e406                	sd	ra,8(sp)
    8000f58c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f58e:	0c91b0ef          	jal	8002ae56 <printf>
    8000f592:	4529                	li	a0,10
    8000f594:	5b01a0ef          	jal	80029b44 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f598:	4511                	li	a0,4
    8000f59a:	96ff10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f59e:	a86f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f5a2:	57fd                	li	a5,-1
    8000f5a4:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f5a8:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f5ac:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f5b0:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000f5b4:	859f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VU);      
    8000f5b8:	4501                	li	a0,0
    8000f5ba:	94ff10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f5be:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5c2:	08200593          	li	a1,130
    8000f5c6:	00021617          	auipc	a2,0x21
    8000f5ca:	cfa60613          	addi	a2,a2,-774 # 800302c0 <__func__.0+0x3208>
    8000f5ce:	0001e517          	auipc	a0,0x1e
    8000f5d2:	de250513          	addi	a0,a0,-542 # 8002d3b0 <__func__.0+0x2f8>
    8000f5d6:	0811b0ef          	jal	8002ae56 <printf>
    8000f5da:	00045417          	auipc	s0,0x45
    8000f5de:	a3640413          	addi	s0,s0,-1482 # 80054010 <excpt>
    8000f5e2:	6014                	ld	a3,0(s0)
    8000f5e4:	f0001737          	lui	a4,0xf0001
    8000f5e8:	0712                	slli	a4,a4,0x4
    8000f5ea:	478d                	li	a5,3
    8000f5ec:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5f0:	1782                	slli	a5,a5,0x20
    8000f5f2:	8f75                	and	a4,a4,a3
    8000f5f4:	10078793          	addi	a5,a5,256
    8000f5f8:	0001e597          	auipc	a1,0x1e
    8000f5fc:	d9058593          	addi	a1,a1,-624 # 8002d388 <__func__.0+0x2d0>
    8000f600:	08f70263          	beq	a4,a5,8000f684 <priv_change_13+0x10c>
    8000f604:	0001e517          	auipc	a0,0x1e
    8000f608:	dc450513          	addi	a0,a0,-572 # 8002d3c8 <__func__.0+0x310>
    8000f60c:	04b1b0ef          	jal	8002ae56 <printf>
    8000f610:	00045797          	auipc	a5,0x45
    8000f614:	a017c783          	lbu	a5,-1535(a5) # 80054011 <excpt+0x1>
    8000f618:	cb81                	beqz	a5,8000f628 <priv_change_13+0xb0>
    8000f61a:	00045717          	auipc	a4,0x45
    8000f61e:	9fa72703          	lw	a4,-1542(a4) # 80054014 <excpt+0x4>
    8000f622:	478d                	li	a5,3
    8000f624:	04f70a63          	beq	a4,a5,8000f678 <priv_change_13+0x100>
    8000f628:	0001e517          	auipc	a0,0x1e
    8000f62c:	da850513          	addi	a0,a0,-600 # 8002d3d0 <__func__.0+0x318>
    8000f630:	0271b0ef          	jal	8002ae56 <printf>
    8000f634:	02900513          	li	a0,41
    8000f638:	50c1a0ef          	jal	80029b44 <putchar>
    8000f63c:	4529                	li	a0,10
    8000f63e:	5061a0ef          	jal	80029b44 <putchar>
    8000f642:	6014                	ld	a3,0(s0)
    8000f644:	f0001737          	lui	a4,0xf0001
    8000f648:	0712                	slli	a4,a4,0x4
    8000f64a:	478d                	li	a5,3
    8000f64c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f650:	1782                	slli	a5,a5,0x20
    8000f652:	8f75                	and	a4,a4,a3
    8000f654:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f658:	0001e597          	auipc	a1,0x1e
    8000f65c:	d3058593          	addi	a1,a1,-720 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f660:	04f70063          	beq	a4,a5,8000f6a0 <priv_change_13+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f664:	0001e517          	auipc	a0,0x1e
    8000f668:	dcc50513          	addi	a0,a0,-564 # 8002d430 <__func__.0+0x378>
    8000f66c:	7ea1b0ef          	jal	8002ae56 <printf>
    }
}
    8000f670:	60a2                	ld	ra,8(sp)
    8000f672:	6402                	ld	s0,0(sp)
    8000f674:	0141                	addi	sp,sp,16
    8000f676:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f678:	0002b797          	auipc	a5,0x2b
    8000f67c:	2e47a783          	lw	a5,740(a5) # 8003a95c <curr_priv>
    8000f680:	dfd5                	beqz	a5,8000f63c <priv_change_13+0xc4>
    8000f682:	b75d                	j	8000f628 <priv_change_13+0xb0>
    8000f684:	0002b797          	auipc	a5,0x2b
    8000f688:	2d87a783          	lw	a5,728(a5) # 8003a95c <curr_priv>
    8000f68c:	0001e597          	auipc	a1,0x1e
    8000f690:	cec58593          	addi	a1,a1,-788 # 8002d378 <__func__.0+0x2c0>
    8000f694:	dba5                	beqz	a5,8000f604 <priv_change_13+0x8c>
    8000f696:	0001e597          	auipc	a1,0x1e
    8000f69a:	cf258593          	addi	a1,a1,-782 # 8002d388 <__func__.0+0x2d0>
    8000f69e:	b79d                	j	8000f604 <priv_change_13+0x8c>
    8000f6a0:	0002b797          	auipc	a5,0x2b
    8000f6a4:	2bc7a783          	lw	a5,700(a5) # 8003a95c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6a8:	0001e597          	auipc	a1,0x1e
    8000f6ac:	cd058593          	addi	a1,a1,-816 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f6b0:	dbd5                	beqz	a5,8000f664 <priv_change_13+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6b2:	0001e597          	auipc	a1,0x1e
    8000f6b6:	cd658593          	addi	a1,a1,-810 # 8002d388 <__func__.0+0x2d0>
    8000f6ba:	0001e517          	auipc	a0,0x1e
    8000f6be:	d7650513          	addi	a0,a0,-650 # 8002d430 <__func__.0+0x378>
    8000f6c2:	7941b0ef          	jal	8002ae56 <printf>
}
    8000f6c6:	60a2                	ld	ra,8(sp)
    8000f6c8:	6402                	ld	s0,0(sp)
    8000f6ca:	0141                	addi	sp,sp,16
    8000f6cc:	8082                	ret

000000008000f6ce <priv_change_14>:

bool priv_change_14(){
    8000f6ce:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f6d0:	0001c597          	auipc	a1,0x1c
    8000f6d4:	36858593          	addi	a1,a1,872 # 8002ba38 <__func__.2>
    8000f6d8:	0001e517          	auipc	a0,0x1e
    8000f6dc:	cc050513          	addi	a0,a0,-832 # 8002d398 <__func__.0+0x2e0>
bool priv_change_14(){
    8000f6e0:	e406                	sd	ra,8(sp)
    8000f6e2:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f6e4:	7721b0ef          	jal	8002ae56 <printf>
    8000f6e8:	4529                	li	a0,10
    8000f6ea:	45a1a0ef          	jal	80029b44 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000f6ee:	4511                	li	a0,4
    8000f6f0:	819f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f6f4:	930f20ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f6f8:	57fd                	li	a5,-1
    8000f6fa:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f6fe:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f702:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f706:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000f70a:	4501                	li	a0,0
    8000f70c:	ffcf10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000f710:	efcf10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f714:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f718:	08200593          	li	a1,130
    8000f71c:	00021617          	auipc	a2,0x21
    8000f720:	c1460613          	addi	a2,a2,-1004 # 80030330 <__func__.0+0x3278>
    8000f724:	0001e517          	auipc	a0,0x1e
    8000f728:	c8c50513          	addi	a0,a0,-884 # 8002d3b0 <__func__.0+0x2f8>
    8000f72c:	72a1b0ef          	jal	8002ae56 <printf>
    8000f730:	00045417          	auipc	s0,0x45
    8000f734:	8e040413          	addi	s0,s0,-1824 # 80054010 <excpt>
    8000f738:	6014                	ld	a3,0(s0)
    8000f73a:	f0001737          	lui	a4,0xf0001
    8000f73e:	0712                	slli	a4,a4,0x4
    8000f740:	478d                	li	a5,3
    8000f742:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f746:	1782                	slli	a5,a5,0x20
    8000f748:	8f75                	and	a4,a4,a3
    8000f74a:	10078793          	addi	a5,a5,256
    8000f74e:	0001e597          	auipc	a1,0x1e
    8000f752:	c3a58593          	addi	a1,a1,-966 # 8002d388 <__func__.0+0x2d0>
    8000f756:	08f70263          	beq	a4,a5,8000f7da <priv_change_14+0x10c>
    8000f75a:	0001e517          	auipc	a0,0x1e
    8000f75e:	c6e50513          	addi	a0,a0,-914 # 8002d3c8 <__func__.0+0x310>
    8000f762:	6f41b0ef          	jal	8002ae56 <printf>
    8000f766:	00045797          	auipc	a5,0x45
    8000f76a:	8ab7c783          	lbu	a5,-1877(a5) # 80054011 <excpt+0x1>
    8000f76e:	cb81                	beqz	a5,8000f77e <priv_change_14+0xb0>
    8000f770:	00045717          	auipc	a4,0x45
    8000f774:	8a472703          	lw	a4,-1884(a4) # 80054014 <excpt+0x4>
    8000f778:	478d                	li	a5,3
    8000f77a:	04f70a63          	beq	a4,a5,8000f7ce <priv_change_14+0x100>
    8000f77e:	0001e517          	auipc	a0,0x1e
    8000f782:	c5250513          	addi	a0,a0,-942 # 8002d3d0 <__func__.0+0x318>
    8000f786:	6d01b0ef          	jal	8002ae56 <printf>
    8000f78a:	02900513          	li	a0,41
    8000f78e:	3b61a0ef          	jal	80029b44 <putchar>
    8000f792:	4529                	li	a0,10
    8000f794:	3b01a0ef          	jal	80029b44 <putchar>
    8000f798:	6014                	ld	a3,0(s0)
    8000f79a:	f0001737          	lui	a4,0xf0001
    8000f79e:	0712                	slli	a4,a4,0x4
    8000f7a0:	478d                	li	a5,3
    8000f7a2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f7a6:	1782                	slli	a5,a5,0x20
    8000f7a8:	8f75                	and	a4,a4,a3
    8000f7aa:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7ae:	0001e597          	auipc	a1,0x1e
    8000f7b2:	bda58593          	addi	a1,a1,-1062 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7b6:	04f70063          	beq	a4,a5,8000f7f6 <priv_change_14+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7ba:	0001e517          	auipc	a0,0x1e
    8000f7be:	c7650513          	addi	a0,a0,-906 # 8002d430 <__func__.0+0x378>
    8000f7c2:	6941b0ef          	jal	8002ae56 <printf>
    }

}
    8000f7c6:	60a2                	ld	ra,8(sp)
    8000f7c8:	6402                	ld	s0,0(sp)
    8000f7ca:	0141                	addi	sp,sp,16
    8000f7cc:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7ce:	0002b797          	auipc	a5,0x2b
    8000f7d2:	18e7a783          	lw	a5,398(a5) # 8003a95c <curr_priv>
    8000f7d6:	dfd5                	beqz	a5,8000f792 <priv_change_14+0xc4>
    8000f7d8:	b75d                	j	8000f77e <priv_change_14+0xb0>
    8000f7da:	0002b797          	auipc	a5,0x2b
    8000f7de:	1827a783          	lw	a5,386(a5) # 8003a95c <curr_priv>
    8000f7e2:	0001e597          	auipc	a1,0x1e
    8000f7e6:	b9658593          	addi	a1,a1,-1130 # 8002d378 <__func__.0+0x2c0>
    8000f7ea:	dba5                	beqz	a5,8000f75a <priv_change_14+0x8c>
    8000f7ec:	0001e597          	auipc	a1,0x1e
    8000f7f0:	b9c58593          	addi	a1,a1,-1124 # 8002d388 <__func__.0+0x2d0>
    8000f7f4:	b79d                	j	8000f75a <priv_change_14+0x8c>
    8000f7f6:	0002b797          	auipc	a5,0x2b
    8000f7fa:	1667a783          	lw	a5,358(a5) # 8003a95c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f7fe:	0001e597          	auipc	a1,0x1e
    8000f802:	b7a58593          	addi	a1,a1,-1158 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f806:	dbd5                	beqz	a5,8000f7ba <priv_change_14+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f808:	0001e597          	auipc	a1,0x1e
    8000f80c:	b8058593          	addi	a1,a1,-1152 # 8002d388 <__func__.0+0x2d0>
    8000f810:	0001e517          	auipc	a0,0x1e
    8000f814:	c2050513          	addi	a0,a0,-992 # 8002d430 <__func__.0+0x378>
    8000f818:	63e1b0ef          	jal	8002ae56 <printf>
}
    8000f81c:	60a2                	ld	ra,8(sp)
    8000f81e:	6402                	ld	s0,0(sp)
    8000f820:	0141                	addi	sp,sp,16
    8000f822:	8082                	ret

000000008000f824 <priv_change_15>:

bool priv_change_15(){
    8000f824:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f826:	0001c597          	auipc	a1,0x1c
    8000f82a:	22258593          	addi	a1,a1,546 # 8002ba48 <__func__.1>
    8000f82e:	0001e517          	auipc	a0,0x1e
    8000f832:	b6a50513          	addi	a0,a0,-1174 # 8002d398 <__func__.0+0x2e0>
bool priv_change_15(){
    8000f836:	e406                	sd	ra,8(sp)
    8000f838:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f83a:	61c1b0ef          	jal	8002ae56 <printf>
    8000f83e:	4529                	li	a0,10
    8000f840:	3041a0ef          	jal	80029b44 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f844:	4511                	li	a0,4
    8000f846:	ec2f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f84a:	fdbf10ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f84e:	57fd                	li	a5,-1
    8000f850:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f854:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f858:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f85c:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000f860:	dacf10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f864:	4509                	li	a0,2
    8000f866:	ea2f10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f86a:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f86e:	08200593          	li	a1,130
    8000f872:	00021617          	auipc	a2,0x21
    8000f876:	b2e60613          	addi	a2,a2,-1234 # 800303a0 <__func__.0+0x32e8>
    8000f87a:	0001e517          	auipc	a0,0x1e
    8000f87e:	b3650513          	addi	a0,a0,-1226 # 8002d3b0 <__func__.0+0x2f8>
    8000f882:	5d41b0ef          	jal	8002ae56 <printf>
    8000f886:	00044417          	auipc	s0,0x44
    8000f88a:	78a40413          	addi	s0,s0,1930 # 80054010 <excpt>
    8000f88e:	6014                	ld	a3,0(s0)
    8000f890:	f0001737          	lui	a4,0xf0001
    8000f894:	0712                	slli	a4,a4,0x4
    8000f896:	478d                	li	a5,3
    8000f898:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f89c:	1782                	slli	a5,a5,0x20
    8000f89e:	8f75                	and	a4,a4,a3
    8000f8a0:	10078793          	addi	a5,a5,256
    8000f8a4:	0001e597          	auipc	a1,0x1e
    8000f8a8:	ae458593          	addi	a1,a1,-1308 # 8002d388 <__func__.0+0x2d0>
    8000f8ac:	08f70463          	beq	a4,a5,8000f934 <priv_change_15+0x110>
    8000f8b0:	0001e517          	auipc	a0,0x1e
    8000f8b4:	b1850513          	addi	a0,a0,-1256 # 8002d3c8 <__func__.0+0x310>
    8000f8b8:	59e1b0ef          	jal	8002ae56 <printf>
    8000f8bc:	00044797          	auipc	a5,0x44
    8000f8c0:	7557c783          	lbu	a5,1877(a5) # 80054011 <excpt+0x1>
    8000f8c4:	cb81                	beqz	a5,8000f8d4 <priv_change_15+0xb0>
    8000f8c6:	00044717          	auipc	a4,0x44
    8000f8ca:	74e72703          	lw	a4,1870(a4) # 80054014 <excpt+0x4>
    8000f8ce:	478d                	li	a5,3
    8000f8d0:	04f70a63          	beq	a4,a5,8000f924 <priv_change_15+0x100>
    8000f8d4:	0001e517          	auipc	a0,0x1e
    8000f8d8:	afc50513          	addi	a0,a0,-1284 # 8002d3d0 <__func__.0+0x318>
    8000f8dc:	57a1b0ef          	jal	8002ae56 <printf>
    8000f8e0:	02900513          	li	a0,41
    8000f8e4:	2601a0ef          	jal	80029b44 <putchar>
    8000f8e8:	4529                	li	a0,10
    8000f8ea:	25a1a0ef          	jal	80029b44 <putchar>
    8000f8ee:	6014                	ld	a3,0(s0)
    8000f8f0:	f0001737          	lui	a4,0xf0001
    8000f8f4:	0712                	slli	a4,a4,0x4
    8000f8f6:	478d                	li	a5,3
    8000f8f8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f8fc:	1782                	slli	a5,a5,0x20
    8000f8fe:	8f75                	and	a4,a4,a3
    8000f900:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f904:	0001e597          	auipc	a1,0x1e
    8000f908:	a8458593          	addi	a1,a1,-1404 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f90c:	04f70463          	beq	a4,a5,8000f954 <priv_change_15+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f910:	0001e517          	auipc	a0,0x1e
    8000f914:	b2050513          	addi	a0,a0,-1248 # 8002d430 <__func__.0+0x378>
    8000f918:	53e1b0ef          	jal	8002ae56 <printf>
    }

}
    8000f91c:	60a2                	ld	ra,8(sp)
    8000f91e:	6402                	ld	s0,0(sp)
    8000f920:	0141                	addi	sp,sp,16
    8000f922:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f924:	0002b717          	auipc	a4,0x2b
    8000f928:	03872703          	lw	a4,56(a4) # 8003a95c <curr_priv>
    8000f92c:	4789                	li	a5,2
    8000f92e:	faf713e3          	bne	a4,a5,8000f8d4 <priv_change_15+0xb0>
    8000f932:	bf5d                	j	8000f8e8 <priv_change_15+0xc4>
    8000f934:	0002b717          	auipc	a4,0x2b
    8000f938:	02872703          	lw	a4,40(a4) # 8003a95c <curr_priv>
    8000f93c:	4789                	li	a5,2
    8000f93e:	0001e597          	auipc	a1,0x1e
    8000f942:	a3a58593          	addi	a1,a1,-1478 # 8002d378 <__func__.0+0x2c0>
    8000f946:	f6f705e3          	beq	a4,a5,8000f8b0 <priv_change_15+0x8c>
    8000f94a:	0001e597          	auipc	a1,0x1e
    8000f94e:	a3e58593          	addi	a1,a1,-1474 # 8002d388 <__func__.0+0x2d0>
    8000f952:	bfb9                	j	8000f8b0 <priv_change_15+0x8c>
    8000f954:	0002b717          	auipc	a4,0x2b
    8000f958:	00872703          	lw	a4,8(a4) # 8003a95c <curr_priv>
    8000f95c:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f95e:	0001e597          	auipc	a1,0x1e
    8000f962:	a1a58593          	addi	a1,a1,-1510 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f966:	faf705e3          	beq	a4,a5,8000f910 <priv_change_15+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f96a:	0001e597          	auipc	a1,0x1e
    8000f96e:	a1e58593          	addi	a1,a1,-1506 # 8002d388 <__func__.0+0x2d0>
    8000f972:	0001e517          	auipc	a0,0x1e
    8000f976:	abe50513          	addi	a0,a0,-1346 # 8002d430 <__func__.0+0x378>
    8000f97a:	4dc1b0ef          	jal	8002ae56 <printf>
}
    8000f97e:	60a2                	ld	ra,8(sp)
    8000f980:	6402                	ld	s0,0(sp)
    8000f982:	0141                	addi	sp,sp,16
    8000f984:	8082                	ret

000000008000f986 <priv_change_16>:

bool priv_change_16(){
    8000f986:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f988:	0001c597          	auipc	a1,0x1c
    8000f98c:	0d058593          	addi	a1,a1,208 # 8002ba58 <__func__.0>
    8000f990:	0001e517          	auipc	a0,0x1e
    8000f994:	a0850513          	addi	a0,a0,-1528 # 8002d398 <__func__.0+0x2e0>
bool priv_change_16(){
    8000f998:	e406                	sd	ra,8(sp)
    8000f99a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f99c:	4ba1b0ef          	jal	8002ae56 <printf>
    8000f9a0:	4529                	li	a0,10
    8000f9a2:	1a21a0ef          	jal	80029b44 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f9a6:	4511                	li	a0,4
    8000f9a8:	d60f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f9ac:	e79f10ef          	jal	80001824 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f9b0:	57fd                	li	a5,-1
    8000f9b2:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f9b6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f9ba:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f9be:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    8000f9c2:	c4af10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f9c6:	4509                	li	a0,2
    8000f9c8:	d40f10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f9cc:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9d0:	08200593          	li	a1,130
    8000f9d4:	00021617          	auipc	a2,0x21
    8000f9d8:	a3c60613          	addi	a2,a2,-1476 # 80030410 <__func__.0+0x3358>
    8000f9dc:	0001e517          	auipc	a0,0x1e
    8000f9e0:	9d450513          	addi	a0,a0,-1580 # 8002d3b0 <__func__.0+0x2f8>
    8000f9e4:	4721b0ef          	jal	8002ae56 <printf>
    8000f9e8:	00044417          	auipc	s0,0x44
    8000f9ec:	62840413          	addi	s0,s0,1576 # 80054010 <excpt>
    8000f9f0:	6014                	ld	a3,0(s0)
    8000f9f2:	f0001737          	lui	a4,0xf0001
    8000f9f6:	0712                	slli	a4,a4,0x4
    8000f9f8:	4785                	li	a5,1
    8000f9fa:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f9fe:	1786                	slli	a5,a5,0x21
    8000fa00:	8f75                	and	a4,a4,a3
    8000fa02:	10078793          	addi	a5,a5,256
    8000fa06:	0001e597          	auipc	a1,0x1e
    8000fa0a:	98258593          	addi	a1,a1,-1662 # 8002d388 <__func__.0+0x2d0>
    8000fa0e:	08f70363          	beq	a4,a5,8000fa94 <priv_change_16+0x10e>
    8000fa12:	0001e517          	auipc	a0,0x1e
    8000fa16:	9b650513          	addi	a0,a0,-1610 # 8002d3c8 <__func__.0+0x310>
    8000fa1a:	43c1b0ef          	jal	8002ae56 <printf>
    8000fa1e:	00044797          	auipc	a5,0x44
    8000fa22:	5f37c783          	lbu	a5,1523(a5) # 80054011 <excpt+0x1>
    8000fa26:	cb81                	beqz	a5,8000fa36 <priv_change_16+0xb0>
    8000fa28:	00044797          	auipc	a5,0x44
    8000fa2c:	5ec7a783          	lw	a5,1516(a5) # 80054014 <excpt+0x4>
    8000fa30:	4709                	li	a4,2
    8000fa32:	04e78a63          	beq	a5,a4,8000fa86 <priv_change_16+0x100>
    8000fa36:	0001e517          	auipc	a0,0x1e
    8000fa3a:	99a50513          	addi	a0,a0,-1638 # 8002d3d0 <__func__.0+0x318>
    8000fa3e:	4181b0ef          	jal	8002ae56 <printf>
    8000fa42:	02900513          	li	a0,41
    8000fa46:	0fe1a0ef          	jal	80029b44 <putchar>
    8000fa4a:	4529                	li	a0,10
    8000fa4c:	0f81a0ef          	jal	80029b44 <putchar>
    8000fa50:	6014                	ld	a3,0(s0)
    8000fa52:	f0001737          	lui	a4,0xf0001
    8000fa56:	0712                	slli	a4,a4,0x4
    8000fa58:	4785                	li	a5,1
    8000fa5a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fa5e:	1786                	slli	a5,a5,0x21
    8000fa60:	8f75                	and	a4,a4,a3
    8000fa62:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa66:	0001e597          	auipc	a1,0x1e
    8000fa6a:	92258593          	addi	a1,a1,-1758 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa6e:	04f70363          	beq	a4,a5,8000fab4 <priv_change_16+0x12e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa72:	0001e517          	auipc	a0,0x1e
    8000fa76:	9be50513          	addi	a0,a0,-1602 # 8002d430 <__func__.0+0x378>
    8000fa7a:	3dc1b0ef          	jal	8002ae56 <printf>
    }

}
    8000fa7e:	60a2                	ld	ra,8(sp)
    8000fa80:	6402                	ld	s0,0(sp)
    8000fa82:	0141                	addi	sp,sp,16
    8000fa84:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa86:	0002b717          	auipc	a4,0x2b
    8000fa8a:	ed672703          	lw	a4,-298(a4) # 8003a95c <curr_priv>
    8000fa8e:	faf714e3          	bne	a4,a5,8000fa36 <priv_change_16+0xb0>
    8000fa92:	bf65                	j	8000fa4a <priv_change_16+0xc4>
    8000fa94:	0002b717          	auipc	a4,0x2b
    8000fa98:	ec872703          	lw	a4,-312(a4) # 8003a95c <curr_priv>
    8000fa9c:	4789                	li	a5,2
    8000fa9e:	0001e597          	auipc	a1,0x1e
    8000faa2:	8da58593          	addi	a1,a1,-1830 # 8002d378 <__func__.0+0x2c0>
    8000faa6:	f6f706e3          	beq	a4,a5,8000fa12 <priv_change_16+0x8c>
    8000faaa:	0001e597          	auipc	a1,0x1e
    8000faae:	8de58593          	addi	a1,a1,-1826 # 8002d388 <__func__.0+0x2d0>
    8000fab2:	b785                	j	8000fa12 <priv_change_16+0x8c>
    8000fab4:	0002b717          	auipc	a4,0x2b
    8000fab8:	ea872703          	lw	a4,-344(a4) # 8003a95c <curr_priv>
    8000fabc:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fabe:	0001e597          	auipc	a1,0x1e
    8000fac2:	8ba58593          	addi	a1,a1,-1862 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fac6:	faf706e3          	beq	a4,a5,8000fa72 <priv_change_16+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000faca:	0001e597          	auipc	a1,0x1e
    8000face:	8be58593          	addi	a1,a1,-1858 # 8002d388 <__func__.0+0x2d0>
    8000fad2:	0001e517          	auipc	a0,0x1e
    8000fad6:	95e50513          	addi	a0,a0,-1698 # 8002d430 <__func__.0+0x378>
    8000fada:	37c1b0ef          	jal	8002ae56 <printf>
}
    8000fade:	60a2                	ld	ra,8(sp)
    8000fae0:	6402                	ld	s0,0(sp)
    8000fae2:	0141                	addi	sp,sp,16
    8000fae4:	8082                	ret

000000008000fae6 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000fae6:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fae8:	0001c597          	auipc	a1,0x1c
    8000faec:	f8058593          	addi	a1,a1,-128 # 8002ba68 <__func__.1>
    8000faf0:	0001e517          	auipc	a0,0x1e
    8000faf4:	8a850513          	addi	a0,a0,-1880 # 8002d398 <__func__.0+0x2e0>
bool addr_unaligned() {
    8000faf8:	ec06                	sd	ra,24(sp)
    8000fafa:	e822                	sd	s0,16(sp)
    8000fafc:	e426                	sd	s1,8(sp)
    8000fafe:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000fb00:	3561b0ef          	jal	8002ae56 <printf>
    8000fb04:	4529                	li	a0,10
    8000fb06:	03e1a0ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    8000fb0a:	b02f10ef          	jal	80000e0c <test_setup_except_function>
    
    
    hspt_init();        
    8000fb0e:	ad3f00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000fb12:	450d                	li	a0,3
    8000fb14:	bf4f10ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fb18:	af4f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000fb1c:	001007b7          	lui	a5,0x100
    8000fb20:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb24:	07b2                	slli	a5,a5,0xc
    8000fb26:	0785                	addi	a5,a5,1
    8000fb28:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fb2c:	08200593          	li	a1,130
    8000fb30:	00021617          	auipc	a2,0x21
    8000fb34:	95060613          	addi	a2,a2,-1712 # 80030480 <__func__.0+0x33c8>
    8000fb38:	0001e517          	auipc	a0,0x1e
    8000fb3c:	87850513          	addi	a0,a0,-1928 # 8002d3b0 <__func__.0+0x2f8>
    8000fb40:	3161b0ef          	jal	8002ae56 <printf>
    8000fb44:	00044797          	auipc	a5,0x44
    8000fb48:	4cd7c783          	lbu	a5,1229(a5) # 80054011 <excpt+0x1>
    8000fb4c:	0001e597          	auipc	a1,0x1e
    8000fb50:	82c58593          	addi	a1,a1,-2004 # 8002d378 <__func__.0+0x2c0>
    8000fb54:	c789                	beqz	a5,8000fb5e <addr_unaligned+0x78>
    8000fb56:	0001e597          	auipc	a1,0x1e
    8000fb5a:	83258593          	addi	a1,a1,-1998 # 8002d388 <__func__.0+0x2d0>
    8000fb5e:	0001e517          	auipc	a0,0x1e
    8000fb62:	86a50513          	addi	a0,a0,-1942 # 8002d3c8 <__func__.0+0x310>
    8000fb66:	2f01b0ef          	jal	8002ae56 <printf>
    8000fb6a:	00044797          	auipc	a5,0x44
    8000fb6e:	4a77c783          	lbu	a5,1191(a5) # 80054011 <excpt+0x1>
    8000fb72:	4c079c63          	bnez	a5,8001004a <addr_unaligned+0x564>
    8000fb76:	4529                	li	a0,10
    8000fb78:	7cd190ef          	jal	80029b44 <putchar>
    8000fb7c:	00044497          	auipc	s1,0x44
    8000fb80:	4954c483          	lbu	s1,1173(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fb84:	a88f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000fb88:	001007b7          	lui	a5,0x100
    8000fb8c:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb90:	07b2                	slli	a5,a5,0xc
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fb92:	00044917          	auipc	s2,0x44
    8000fb96:	47e90913          	addi	s2,s2,1150 # 80054010 <excpt>
    8000fb9a:	0785                	addi	a5,a5,1
    8000fb9c:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000fba0:	08200593          	li	a1,130
    8000fba4:	00021617          	auipc	a2,0x21
    8000fba8:	90c60613          	addi	a2,a2,-1780 # 800304b0 <__func__.0+0x33f8>
    8000fbac:	0001e517          	auipc	a0,0x1e
    8000fbb0:	80450513          	addi	a0,a0,-2044 # 8002d3b0 <__func__.0+0x2f8>
    8000fbb4:	2a21b0ef          	jal	8002ae56 <printf>
    8000fbb8:	00044797          	auipc	a5,0x44
    8000fbbc:	4597c783          	lbu	a5,1113(a5) # 80054011 <excpt+0x1>
    8000fbc0:	0001d597          	auipc	a1,0x1d
    8000fbc4:	7c858593          	addi	a1,a1,1992 # 8002d388 <__func__.0+0x2d0>
    8000fbc8:	cf91                	beqz	a5,8000fbe4 <addr_unaligned+0xfe>
    8000fbca:	00893703          	ld	a4,8(s2)
    8000fbce:	4791                	li	a5,4
    8000fbd0:	0001d597          	auipc	a1,0x1d
    8000fbd4:	7a858593          	addi	a1,a1,1960 # 8002d378 <__func__.0+0x2c0>
    8000fbd8:	00f70663          	beq	a4,a5,8000fbe4 <addr_unaligned+0xfe>
    8000fbdc:	0001d597          	auipc	a1,0x1d
    8000fbe0:	7ac58593          	addi	a1,a1,1964 # 8002d388 <__func__.0+0x2d0>
    8000fbe4:	0001d517          	auipc	a0,0x1d
    8000fbe8:	7e450513          	addi	a0,a0,2020 # 8002d3c8 <__func__.0+0x310>
    8000fbec:	26a1b0ef          	jal	8002ae56 <printf>
    8000fbf0:	00044797          	auipc	a5,0x44
    8000fbf4:	4217c783          	lbu	a5,1057(a5) # 80054011 <excpt+0x1>
    8000fbf8:	c791                	beqz	a5,8000fc04 <addr_unaligned+0x11e>
    8000fbfa:	00893703          	ld	a4,8(s2)
    8000fbfe:	4791                	li	a5,4
    8000fc00:	00f70c63          	beq	a4,a5,8000fc18 <addr_unaligned+0x132>
    8000fc04:	0001d517          	auipc	a0,0x1d
    8000fc08:	7cc50513          	addi	a0,a0,1996 # 8002d3d0 <__func__.0+0x318>
    8000fc0c:	24a1b0ef          	jal	8002ae56 <printf>
    8000fc10:	02900513          	li	a0,41
    8000fc14:	731190ef          	jal	80029b44 <putchar>
    8000fc18:	4529                	li	a0,10
    8000fc1a:	72b190ef          	jal	80029b44 <putchar>
    8000fc1e:	4401                	li	s0,0
    8000fc20:	e499                	bnez	s1,8000fc2e <addr_unaligned+0x148>
    8000fc22:	00044797          	auipc	a5,0x44
    8000fc26:	3ef7c783          	lbu	a5,1007(a5) # 80054011 <excpt+0x1>
    8000fc2a:	3e079863          	bnez	a5,8001001a <addr_unaligned+0x534>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fc2e:	9def10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000fc32:	001007b7          	lui	a5,0x100
    8000fc36:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fc3a:	07b2                	slli	a5,a5,0xc
    8000fc3c:	0785                	addi	a5,a5,1
    8000fc3e:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000fc42:	08200593          	li	a1,130
    8000fc46:	00021617          	auipc	a2,0x21
    8000fc4a:	8a260613          	addi	a2,a2,-1886 # 800304e8 <__func__.0+0x3430>
    8000fc4e:	0001d517          	auipc	a0,0x1d
    8000fc52:	76250513          	addi	a0,a0,1890 # 8002d3b0 <__func__.0+0x2f8>
    8000fc56:	2001b0ef          	jal	8002ae56 <printf>
    8000fc5a:	00044797          	auipc	a5,0x44
    8000fc5e:	3b77c783          	lbu	a5,951(a5) # 80054011 <excpt+0x1>
    8000fc62:	0001d597          	auipc	a1,0x1d
    8000fc66:	72658593          	addi	a1,a1,1830 # 8002d388 <__func__.0+0x2d0>
    8000fc6a:	cf91                	beqz	a5,8000fc86 <addr_unaligned+0x1a0>
    8000fc6c:	00893703          	ld	a4,8(s2)
    8000fc70:	4791                	li	a5,4
    8000fc72:	0001d597          	auipc	a1,0x1d
    8000fc76:	70658593          	addi	a1,a1,1798 # 8002d378 <__func__.0+0x2c0>
    8000fc7a:	00f70663          	beq	a4,a5,8000fc86 <addr_unaligned+0x1a0>
    8000fc7e:	0001d597          	auipc	a1,0x1d
    8000fc82:	70a58593          	addi	a1,a1,1802 # 8002d388 <__func__.0+0x2d0>
    8000fc86:	0001d517          	auipc	a0,0x1d
    8000fc8a:	74250513          	addi	a0,a0,1858 # 8002d3c8 <__func__.0+0x310>
    8000fc8e:	1c81b0ef          	jal	8002ae56 <printf>
    8000fc92:	00044797          	auipc	a5,0x44
    8000fc96:	37f7c783          	lbu	a5,895(a5) # 80054011 <excpt+0x1>
    8000fc9a:	c791                	beqz	a5,8000fca6 <addr_unaligned+0x1c0>
    8000fc9c:	00893703          	ld	a4,8(s2)
    8000fca0:	4791                	li	a5,4
    8000fca2:	00f70c63          	beq	a4,a5,8000fcba <addr_unaligned+0x1d4>
    8000fca6:	0001d517          	auipc	a0,0x1d
    8000fcaa:	72a50513          	addi	a0,a0,1834 # 8002d3d0 <__func__.0+0x318>
    8000fcae:	1a81b0ef          	jal	8002ae56 <printf>
    8000fcb2:	02900513          	li	a0,41
    8000fcb6:	68f190ef          	jal	80029b44 <putchar>
    8000fcba:	4529                	li	a0,10
    8000fcbc:	689190ef          	jal	80029b44 <putchar>
    8000fcc0:	c801                	beqz	s0,8000fcd0 <addr_unaligned+0x1ea>
    8000fcc2:	00044797          	auipc	a5,0x44
    8000fcc6:	34f7c783          	lbu	a5,847(a5) # 80054011 <excpt+0x1>
    8000fcca:	4401                	li	s0,0
    8000fccc:	34079163          	bnez	a5,8001000e <addr_unaligned+0x528>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000fcd0:	001004b7          	lui	s1,0x100
    8000fcd4:	04b48493          	addi	s1,s1,75 # 10004b <STACK_SIZE+0x4b>
    8000fcd8:	04b2                	slli	s1,s1,0xc
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fcda:	932f10ef          	jal	80000e0c <test_setup_except_function>
    8000fcde:	0485                	addi	s1,s1,1
    8000fce0:	0004b483          	ld	s1,0(s1)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000fce4:	08200593          	li	a1,130
    8000fce8:	00021617          	auipc	a2,0x21
    8000fcec:	83860613          	addi	a2,a2,-1992 # 80030520 <__func__.0+0x3468>
    8000fcf0:	0001d517          	auipc	a0,0x1d
    8000fcf4:	6c050513          	addi	a0,a0,1728 # 8002d3b0 <__func__.0+0x2f8>
    8000fcf8:	15e1b0ef          	jal	8002ae56 <printf>
    8000fcfc:	00044797          	auipc	a5,0x44
    8000fd00:	3157c783          	lbu	a5,789(a5) # 80054011 <excpt+0x1>
    8000fd04:	0001d597          	auipc	a1,0x1d
    8000fd08:	68458593          	addi	a1,a1,1668 # 8002d388 <__func__.0+0x2d0>
    8000fd0c:	cf91                	beqz	a5,8000fd28 <addr_unaligned+0x242>
    8000fd0e:	00893703          	ld	a4,8(s2)
    8000fd12:	4791                	li	a5,4
    8000fd14:	0001d597          	auipc	a1,0x1d
    8000fd18:	66458593          	addi	a1,a1,1636 # 8002d378 <__func__.0+0x2c0>
    8000fd1c:	00f70663          	beq	a4,a5,8000fd28 <addr_unaligned+0x242>
    8000fd20:	0001d597          	auipc	a1,0x1d
    8000fd24:	66858593          	addi	a1,a1,1640 # 8002d388 <__func__.0+0x2d0>
    8000fd28:	0001d517          	auipc	a0,0x1d
    8000fd2c:	6a050513          	addi	a0,a0,1696 # 8002d3c8 <__func__.0+0x310>
    8000fd30:	1261b0ef          	jal	8002ae56 <printf>
    8000fd34:	00044797          	auipc	a5,0x44
    8000fd38:	2dd7c783          	lbu	a5,733(a5) # 80054011 <excpt+0x1>
    8000fd3c:	c791                	beqz	a5,8000fd48 <addr_unaligned+0x262>
    8000fd3e:	00893703          	ld	a4,8(s2)
    8000fd42:	4791                	li	a5,4
    8000fd44:	00f70c63          	beq	a4,a5,8000fd5c <addr_unaligned+0x276>
    8000fd48:	0001d517          	auipc	a0,0x1d
    8000fd4c:	68850513          	addi	a0,a0,1672 # 8002d3d0 <__func__.0+0x318>
    8000fd50:	1061b0ef          	jal	8002ae56 <printf>
    8000fd54:	02900513          	li	a0,41
    8000fd58:	5ed190ef          	jal	80029b44 <putchar>
    8000fd5c:	4529                	li	a0,10
    8000fd5e:	5e7190ef          	jal	80029b44 <putchar>
    8000fd62:	c801                	beqz	s0,8000fd72 <addr_unaligned+0x28c>
    8000fd64:	00044797          	auipc	a5,0x44
    8000fd68:	2ad7c783          	lbu	a5,685(a5) # 80054011 <excpt+0x1>
    8000fd6c:	4401                	li	s0,0
    8000fd6e:	2c079863          	bnez	a5,8001003e <addr_unaligned+0x558>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fd72:	89af10ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000fd76:	001007b7          	lui	a5,0x100
    8000fd7a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fd7e:	07b2                	slli	a5,a5,0xc
    8000fd80:	0785                	addi	a5,a5,1
    8000fd82:	00978023          	sb	s1,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000fd86:	08200593          	li	a1,130
    8000fd8a:	00020617          	auipc	a2,0x20
    8000fd8e:	7ce60613          	addi	a2,a2,1998 # 80030558 <__func__.0+0x34a0>
    8000fd92:	0001d517          	auipc	a0,0x1d
    8000fd96:	61e50513          	addi	a0,a0,1566 # 8002d3b0 <__func__.0+0x2f8>
    8000fd9a:	0bc1b0ef          	jal	8002ae56 <printf>
    8000fd9e:	00044797          	auipc	a5,0x44
    8000fda2:	2737c783          	lbu	a5,627(a5) # 80054011 <excpt+0x1>
    8000fda6:	0001d597          	auipc	a1,0x1d
    8000fdaa:	5e258593          	addi	a1,a1,1506 # 8002d388 <__func__.0+0x2d0>
    8000fdae:	e789                	bnez	a5,8000fdb8 <addr_unaligned+0x2d2>
    8000fdb0:	0001d597          	auipc	a1,0x1d
    8000fdb4:	5c858593          	addi	a1,a1,1480 # 8002d378 <__func__.0+0x2c0>
    8000fdb8:	0001d517          	auipc	a0,0x1d
    8000fdbc:	61050513          	addi	a0,a0,1552 # 8002d3c8 <__func__.0+0x310>
    8000fdc0:	0961b0ef          	jal	8002ae56 <printf>
    8000fdc4:	00044797          	auipc	a5,0x44
    8000fdc8:	24d7c783          	lbu	a5,589(a5) # 80054011 <excpt+0x1>
    8000fdcc:	28079a63          	bnez	a5,80010060 <addr_unaligned+0x57a>
    8000fdd0:	4529                	li	a0,10
    8000fdd2:	573190ef          	jal	80029b44 <putchar>
    8000fdd6:	c419                	beqz	s0,8000fde4 <addr_unaligned+0x2fe>
    8000fdd8:	00044417          	auipc	s0,0x44
    8000fddc:	23944403          	lbu	s0,569(s0) # 80054011 <excpt+0x1>
    8000fde0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fde4:	828f10ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000fde8:	001007b7          	lui	a5,0x100
    8000fdec:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fdf0:	07b2                	slli	a5,a5,0xc
    8000fdf2:	0785                	addi	a5,a5,1
    8000fdf4:	00979023          	sh	s1,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000fdf8:	08200593          	li	a1,130
    8000fdfc:	00020617          	auipc	a2,0x20
    8000fe00:	78c60613          	addi	a2,a2,1932 # 80030588 <__func__.0+0x34d0>
    8000fe04:	0001d517          	auipc	a0,0x1d
    8000fe08:	5ac50513          	addi	a0,a0,1452 # 8002d3b0 <__func__.0+0x2f8>
    8000fe0c:	04a1b0ef          	jal	8002ae56 <printf>
    8000fe10:	00044797          	auipc	a5,0x44
    8000fe14:	2017c783          	lbu	a5,513(a5) # 80054011 <excpt+0x1>
    8000fe18:	0001d597          	auipc	a1,0x1d
    8000fe1c:	57058593          	addi	a1,a1,1392 # 8002d388 <__func__.0+0x2d0>
    8000fe20:	cf91                	beqz	a5,8000fe3c <addr_unaligned+0x356>
    8000fe22:	00893703          	ld	a4,8(s2)
    8000fe26:	4799                	li	a5,6
    8000fe28:	0001d597          	auipc	a1,0x1d
    8000fe2c:	55058593          	addi	a1,a1,1360 # 8002d378 <__func__.0+0x2c0>
    8000fe30:	00f70663          	beq	a4,a5,8000fe3c <addr_unaligned+0x356>
    8000fe34:	0001d597          	auipc	a1,0x1d
    8000fe38:	55458593          	addi	a1,a1,1364 # 8002d388 <__func__.0+0x2d0>
    8000fe3c:	0001d517          	auipc	a0,0x1d
    8000fe40:	58c50513          	addi	a0,a0,1420 # 8002d3c8 <__func__.0+0x310>
    8000fe44:	0121b0ef          	jal	8002ae56 <printf>
    8000fe48:	00044797          	auipc	a5,0x44
    8000fe4c:	1c97c783          	lbu	a5,457(a5) # 80054011 <excpt+0x1>
    8000fe50:	c791                	beqz	a5,8000fe5c <addr_unaligned+0x376>
    8000fe52:	00893703          	ld	a4,8(s2)
    8000fe56:	4799                	li	a5,6
    8000fe58:	00f70c63          	beq	a4,a5,8000fe70 <addr_unaligned+0x38a>
    8000fe5c:	0001d517          	auipc	a0,0x1d
    8000fe60:	57450513          	addi	a0,a0,1396 # 8002d3d0 <__func__.0+0x318>
    8000fe64:	7f31a0ef          	jal	8002ae56 <printf>
    8000fe68:	02900513          	li	a0,41
    8000fe6c:	4d9190ef          	jal	80029b44 <putchar>
    8000fe70:	4529                	li	a0,10
    8000fe72:	4d3190ef          	jal	80029b44 <putchar>
    8000fe76:	c801                	beqz	s0,8000fe86 <addr_unaligned+0x3a0>
    8000fe78:	00044797          	auipc	a5,0x44
    8000fe7c:	1997c783          	lbu	a5,409(a5) # 80054011 <excpt+0x1>
    8000fe80:	4401                	li	s0,0
    8000fe82:	1a079863          	bnez	a5,80010032 <addr_unaligned+0x54c>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fe86:	f87f00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000fe8a:	001007b7          	lui	a5,0x100
    8000fe8e:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe92:	07b2                	slli	a5,a5,0xc
    8000fe94:	0785                	addi	a5,a5,1
    8000fe96:	0097a023          	sw	s1,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000fe9a:	08200593          	li	a1,130
    8000fe9e:	00020617          	auipc	a2,0x20
    8000fea2:	72260613          	addi	a2,a2,1826 # 800305c0 <__func__.0+0x3508>
    8000fea6:	0001d517          	auipc	a0,0x1d
    8000feaa:	50a50513          	addi	a0,a0,1290 # 8002d3b0 <__func__.0+0x2f8>
    8000feae:	7a91a0ef          	jal	8002ae56 <printf>
    8000feb2:	00044797          	auipc	a5,0x44
    8000feb6:	15f7c783          	lbu	a5,351(a5) # 80054011 <excpt+0x1>
    8000feba:	0001d597          	auipc	a1,0x1d
    8000febe:	4ce58593          	addi	a1,a1,1230 # 8002d388 <__func__.0+0x2d0>
    8000fec2:	cf91                	beqz	a5,8000fede <addr_unaligned+0x3f8>
    8000fec4:	00893703          	ld	a4,8(s2)
    8000fec8:	4799                	li	a5,6
    8000feca:	0001d597          	auipc	a1,0x1d
    8000fece:	4ae58593          	addi	a1,a1,1198 # 8002d378 <__func__.0+0x2c0>
    8000fed2:	00f70663          	beq	a4,a5,8000fede <addr_unaligned+0x3f8>
    8000fed6:	0001d597          	auipc	a1,0x1d
    8000feda:	4b258593          	addi	a1,a1,1202 # 8002d388 <__func__.0+0x2d0>
    8000fede:	0001d517          	auipc	a0,0x1d
    8000fee2:	4ea50513          	addi	a0,a0,1258 # 8002d3c8 <__func__.0+0x310>
    8000fee6:	7711a0ef          	jal	8002ae56 <printf>
    8000feea:	00044797          	auipc	a5,0x44
    8000feee:	1277c783          	lbu	a5,295(a5) # 80054011 <excpt+0x1>
    8000fef2:	c791                	beqz	a5,8000fefe <addr_unaligned+0x418>
    8000fef4:	00893703          	ld	a4,8(s2)
    8000fef8:	4799                	li	a5,6
    8000fefa:	00f70c63          	beq	a4,a5,8000ff12 <addr_unaligned+0x42c>
    8000fefe:	0001d517          	auipc	a0,0x1d
    8000ff02:	4d250513          	addi	a0,a0,1234 # 8002d3d0 <__func__.0+0x318>
    8000ff06:	7511a0ef          	jal	8002ae56 <printf>
    8000ff0a:	02900513          	li	a0,41
    8000ff0e:	437190ef          	jal	80029b44 <putchar>
    8000ff12:	4529                	li	a0,10
    8000ff14:	431190ef          	jal	80029b44 <putchar>
    8000ff18:	c801                	beqz	s0,8000ff28 <addr_unaligned+0x442>
    8000ff1a:	00044797          	auipc	a5,0x44
    8000ff1e:	0f77c783          	lbu	a5,247(a5) # 80054011 <excpt+0x1>
    8000ff22:	4401                	li	s0,0
    8000ff24:	10079163          	bnez	a5,80010026 <addr_unaligned+0x540>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000ff28:	ee5f00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000ff2c:	001007b7          	lui	a5,0x100
    8000ff30:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000ff34:	07b2                	slli	a5,a5,0xc
    8000ff36:	0785                	addi	a5,a5,1
    8000ff38:	0097b023          	sd	s1,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff3c:	08200593          	li	a1,130
    8000ff40:	00020617          	auipc	a2,0x20
    8000ff44:	6b860613          	addi	a2,a2,1720 # 800305f8 <__func__.0+0x3540>
    8000ff48:	0001d517          	auipc	a0,0x1d
    8000ff4c:	46850513          	addi	a0,a0,1128 # 8002d3b0 <__func__.0+0x2f8>
    8000ff50:	7071a0ef          	jal	8002ae56 <printf>
    8000ff54:	00044797          	auipc	a5,0x44
    8000ff58:	0bd7c783          	lbu	a5,189(a5) # 80054011 <excpt+0x1>
    8000ff5c:	0001d597          	auipc	a1,0x1d
    8000ff60:	42c58593          	addi	a1,a1,1068 # 8002d388 <__func__.0+0x2d0>
    8000ff64:	cf91                	beqz	a5,8000ff80 <addr_unaligned+0x49a>
    8000ff66:	00893703          	ld	a4,8(s2)
    8000ff6a:	4799                	li	a5,6
    8000ff6c:	0001d597          	auipc	a1,0x1d
    8000ff70:	40c58593          	addi	a1,a1,1036 # 8002d378 <__func__.0+0x2c0>
    8000ff74:	00f70663          	beq	a4,a5,8000ff80 <addr_unaligned+0x49a>
    8000ff78:	0001d597          	auipc	a1,0x1d
    8000ff7c:	41058593          	addi	a1,a1,1040 # 8002d388 <__func__.0+0x2d0>
    8000ff80:	0001d517          	auipc	a0,0x1d
    8000ff84:	44850513          	addi	a0,a0,1096 # 8002d3c8 <__func__.0+0x310>
    8000ff88:	6cf1a0ef          	jal	8002ae56 <printf>
    8000ff8c:	00044797          	auipc	a5,0x44
    8000ff90:	0857c783          	lbu	a5,133(a5) # 80054011 <excpt+0x1>
    8000ff94:	c791                	beqz	a5,8000ffa0 <addr_unaligned+0x4ba>
    8000ff96:	00893703          	ld	a4,8(s2)
    8000ff9a:	4799                	li	a5,6
    8000ff9c:	00f70c63          	beq	a4,a5,8000ffb4 <addr_unaligned+0x4ce>
    8000ffa0:	0001d517          	auipc	a0,0x1d
    8000ffa4:	43050513          	addi	a0,a0,1072 # 8002d3d0 <__func__.0+0x318>
    8000ffa8:	6af1a0ef          	jal	8002ae56 <printf>
    8000ffac:	02900513          	li	a0,41
    8000ffb0:	395190ef          	jal	80029b44 <putchar>
    8000ffb4:	4529                	li	a0,10
    8000ffb6:	38f190ef          	jal	80029b44 <putchar>
    8000ffba:	c01d                	beqz	s0,8000ffe0 <addr_unaligned+0x4fa>
    8000ffbc:	00044417          	auipc	s0,0x44
    8000ffc0:	05544403          	lbu	s0,85(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000ffc4:	0001d597          	auipc	a1,0x1d
    8000ffc8:	3c458593          	addi	a1,a1,964 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ffcc:	cc19                	beqz	s0,8000ffea <addr_unaligned+0x504>
    8000ffce:	00893703          	ld	a4,8(s2)
    8000ffd2:	4799                	li	a5,6
    TEST_END();
    8000ffd4:	0001d597          	auipc	a1,0x1d
    8000ffd8:	3a458593          	addi	a1,a1,932 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ffdc:	00f70763          	beq	a4,a5,8000ffea <addr_unaligned+0x504>
    8000ffe0:	4401                	li	s0,0
    TEST_END();
    8000ffe2:	0001d597          	auipc	a1,0x1d
    8000ffe6:	3a658593          	addi	a1,a1,934 # 8002d388 <__func__.0+0x2d0>
    8000ffea:	0001d517          	auipc	a0,0x1d
    8000ffee:	44650513          	addi	a0,a0,1094 # 8002d430 <__func__.0+0x378>
    8000fff2:	6651a0ef          	jal	8002ae56 <printf>
    8000fff6:	4511                	li	a0,4
    8000fff8:	f11f00ef          	jal	80000f08 <goto_priv>
    8000fffc:	829f10ef          	jal	80001824 <reset_state>

    80010000:	60e2                	ld	ra,24(sp)
    80010002:	8522                	mv	a0,s0
    80010004:	6442                	ld	s0,16(sp)
    80010006:	64a2                	ld	s1,8(sp)
    80010008:	6902                	ld	s2,0(sp)
    8001000a:	6105                	addi	sp,sp,32
    8001000c:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8001000e:	00893403          	ld	s0,8(s2)
    80010012:	1471                	addi	s0,s0,-4
    80010014:	00143413          	seqz	s0,s0
    80010018:	b965                	j	8000fcd0 <addr_unaligned+0x1ea>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8001001a:	00893403          	ld	s0,8(s2)
    8001001e:	1471                	addi	s0,s0,-4
    80010020:	00143413          	seqz	s0,s0
    80010024:	b129                	j	8000fc2e <addr_unaligned+0x148>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    80010026:	00893403          	ld	s0,8(s2)
    8001002a:	1469                	addi	s0,s0,-6
    8001002c:	00143413          	seqz	s0,s0
    80010030:	bde5                	j	8000ff28 <addr_unaligned+0x442>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    80010032:	00893403          	ld	s0,8(s2)
    80010036:	1469                	addi	s0,s0,-6
    80010038:	00143413          	seqz	s0,s0
    8001003c:	b5a9                	j	8000fe86 <addr_unaligned+0x3a0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8001003e:	00893403          	ld	s0,8(s2)
    80010042:	1471                	addi	s0,s0,-4
    80010044:	00143413          	seqz	s0,s0
    80010048:	b32d                	j	8000fd72 <addr_unaligned+0x28c>
    TEST_ASSERT("load byte address is not aligned successful",         
    8001004a:	0001d517          	auipc	a0,0x1d
    8001004e:	38650513          	addi	a0,a0,902 # 8002d3d0 <__func__.0+0x318>
    80010052:	6051a0ef          	jal	8002ae56 <printf>
    80010056:	02900513          	li	a0,41
    8001005a:	2eb190ef          	jal	80029b44 <putchar>
    8001005e:	be21                	j	8000fb76 <addr_unaligned+0x90>
    TEST_ASSERT("store byte address is not aligned successful",         
    80010060:	0001d517          	auipc	a0,0x1d
    80010064:	37050513          	addi	a0,a0,880 # 8002d3d0 <__func__.0+0x318>
    80010068:	5ef1a0ef          	jal	8002ae56 <printf>
    8001006c:	02900513          	li	a0,41
    80010070:	2d5190ef          	jal	80029b44 <putchar>
    80010074:	bbb1                	j	8000fdd0 <addr_unaligned+0x2ea>

0000000080010076 <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    80010076:	1101                	addi	sp,sp,-32

    TEST_START();
    80010078:	0001c597          	auipc	a1,0x1c
    8001007c:	a0058593          	addi	a1,a1,-1536 # 8002ba78 <__func__.14>
    80010080:	0001d517          	auipc	a0,0x1d
    80010084:	31850513          	addi	a0,a0,792 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_1() {
    80010088:	ec06                	sd	ra,24(sp)
    8001008a:	e822                	sd	s0,16(sp)
    8001008c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001008e:	5c91a0ef          	jal	8002ae56 <printf>
    80010092:	4529                	li	a0,10
    80010094:	2b1190ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80010098:	d75f00ef          	jal	80000e0c <test_setup_except_function>
    // ); 
    // printf("%d",excpt.triggered);
    // printf("%d",excpt.cause);

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    8001009c:	4511                	li	a0,4
    8001009e:	e6bf00ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    800100a2:	6785                	lui	a5,0x1
    800100a4:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    800100a6:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    800100aa:	08200593          	li	a1,130
    800100ae:	00020617          	auipc	a2,0x20
    800100b2:	58a60613          	addi	a2,a2,1418 # 80030638 <__func__.0+0x3580>
    800100b6:	0001d517          	auipc	a0,0x1d
    800100ba:	2fa50513          	addi	a0,a0,762 # 8002d3b0 <__func__.0+0x2f8>
    800100be:	5991a0ef          	jal	8002ae56 <printf>
    800100c2:	00044797          	auipc	a5,0x44
    800100c6:	f4f7c783          	lbu	a5,-177(a5) # 80054011 <excpt+0x1>
    800100ca:	00044497          	auipc	s1,0x44
    800100ce:	f4648493          	addi	s1,s1,-186 # 80054010 <excpt>
    800100d2:	0001d597          	auipc	a1,0x1d
    800100d6:	2b658593          	addi	a1,a1,694 # 8002d388 <__func__.0+0x2d0>
    800100da:	cf89                	beqz	a5,800100f4 <illegal_except_1+0x7e>
    800100dc:	6498                	ld	a4,8(s1)
    800100de:	4789                	li	a5,2
    800100e0:	0001d597          	auipc	a1,0x1d
    800100e4:	29858593          	addi	a1,a1,664 # 8002d378 <__func__.0+0x2c0>
    800100e8:	00f70663          	beq	a4,a5,800100f4 <illegal_except_1+0x7e>
    800100ec:	0001d597          	auipc	a1,0x1d
    800100f0:	29c58593          	addi	a1,a1,668 # 8002d388 <__func__.0+0x2d0>
    800100f4:	0001d517          	auipc	a0,0x1d
    800100f8:	2d450513          	addi	a0,a0,724 # 8002d3c8 <__func__.0+0x310>
    800100fc:	55b1a0ef          	jal	8002ae56 <printf>
    80010100:	00044797          	auipc	a5,0x44
    80010104:	f117c783          	lbu	a5,-239(a5) # 80054011 <excpt+0x1>
    80010108:	c789                	beqz	a5,80010112 <illegal_except_1+0x9c>
    8001010a:	6498                	ld	a4,8(s1)
    8001010c:	4789                	li	a5,2
    8001010e:	00f70c63          	beq	a4,a5,80010126 <illegal_except_1+0xb0>
    80010112:	0001d517          	auipc	a0,0x1d
    80010116:	2be50513          	addi	a0,a0,702 # 8002d3d0 <__func__.0+0x318>
    8001011a:	53d1a0ef          	jal	8002ae56 <printf>
    8001011e:	02900513          	li	a0,41
    80010122:	223190ef          	jal	80029b44 <putchar>
    80010126:	4529                	li	a0,10
    80010128:	21d190ef          	jal	80029b44 <putchar>
    8001012c:	00044797          	auipc	a5,0x44
    80010130:	ee57c783          	lbu	a5,-283(a5) # 80054011 <excpt+0x1>
    80010134:	4401                	li	s0,0
    80010136:	c789                	beqz	a5,80010140 <illegal_except_1+0xca>
    80010138:	6480                	ld	s0,8(s1)
    8001013a:	1479                	addi	s0,s0,-2
    8001013c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    80010140:	450d                	li	a0,3
    80010142:	dc7f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010146:	cc7f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIE);
    8001014a:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8001014e:	08200593          	li	a1,130
    80010152:	00020617          	auipc	a2,0x20
    80010156:	52e60613          	addi	a2,a2,1326 # 80030680 <__func__.0+0x35c8>
    8001015a:	0001d517          	auipc	a0,0x1d
    8001015e:	25650513          	addi	a0,a0,598 # 8002d3b0 <__func__.0+0x2f8>
    80010162:	4f51a0ef          	jal	8002ae56 <printf>
    80010166:	00044797          	auipc	a5,0x44
    8001016a:	eab7c783          	lbu	a5,-341(a5) # 80054011 <excpt+0x1>
    8001016e:	0001d597          	auipc	a1,0x1d
    80010172:	21a58593          	addi	a1,a1,538 # 8002d388 <__func__.0+0x2d0>
    80010176:	cf89                	beqz	a5,80010190 <illegal_except_1+0x11a>
    80010178:	6498                	ld	a4,8(s1)
    8001017a:	4789                	li	a5,2
    8001017c:	0001d597          	auipc	a1,0x1d
    80010180:	1fc58593          	addi	a1,a1,508 # 8002d378 <__func__.0+0x2c0>
    80010184:	00f70663          	beq	a4,a5,80010190 <illegal_except_1+0x11a>
    80010188:	0001d597          	auipc	a1,0x1d
    8001018c:	20058593          	addi	a1,a1,512 # 8002d388 <__func__.0+0x2d0>
    80010190:	0001d517          	auipc	a0,0x1d
    80010194:	23850513          	addi	a0,a0,568 # 8002d3c8 <__func__.0+0x310>
    80010198:	4bf1a0ef          	jal	8002ae56 <printf>
    8001019c:	00044797          	auipc	a5,0x44
    800101a0:	e757c783          	lbu	a5,-395(a5) # 80054011 <excpt+0x1>
    800101a4:	c789                	beqz	a5,800101ae <illegal_except_1+0x138>
    800101a6:	6498                	ld	a4,8(s1)
    800101a8:	4789                	li	a5,2
    800101aa:	00f70c63          	beq	a4,a5,800101c2 <illegal_except_1+0x14c>
    800101ae:	0001d517          	auipc	a0,0x1d
    800101b2:	22250513          	addi	a0,a0,546 # 8002d3d0 <__func__.0+0x318>
    800101b6:	4a11a0ef          	jal	8002ae56 <printf>
    800101ba:	02900513          	li	a0,41
    800101be:	187190ef          	jal	80029b44 <putchar>
    800101c2:	4529                	li	a0,10
    800101c4:	181190ef          	jal	80029b44 <putchar>
    800101c8:	c015                	beqz	s0,800101ec <illegal_except_1+0x176>
    800101ca:	00044417          	auipc	s0,0x44
    800101ce:	e4744403          	lbu	s0,-441(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800101d2:	0001d597          	auipc	a1,0x1d
    800101d6:	1b658593          	addi	a1,a1,438 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800101da:	cc11                	beqz	s0,800101f6 <illegal_except_1+0x180>
    800101dc:	6498                	ld	a4,8(s1)
    800101de:	4789                	li	a5,2
    TEST_END();
    800101e0:	0001d597          	auipc	a1,0x1d
    800101e4:	19858593          	addi	a1,a1,408 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800101e8:	00f70763          	beq	a4,a5,800101f6 <illegal_except_1+0x180>
    800101ec:	4401                	li	s0,0
    TEST_END();
    800101ee:	0001d597          	auipc	a1,0x1d
    800101f2:	19a58593          	addi	a1,a1,410 # 8002d388 <__func__.0+0x2d0>
    800101f6:	0001d517          	auipc	a0,0x1d
    800101fa:	23a50513          	addi	a0,a0,570 # 8002d430 <__func__.0+0x378>
    800101fe:	4591a0ef          	jal	8002ae56 <printf>
    80010202:	4511                	li	a0,4
    80010204:	d05f00ef          	jal	80000f08 <goto_priv>
    80010208:	e1cf10ef          	jal	80001824 <reset_state>

}
    8001020c:	60e2                	ld	ra,24(sp)
    8001020e:	8522                	mv	a0,s0
    80010210:	6442                	ld	s0,16(sp)
    80010212:	64a2                	ld	s1,8(sp)
    80010214:	6105                	addi	sp,sp,32
    80010216:	8082                	ret

0000000080010218 <illegal_except_2>:

bool illegal_except_2() {
    80010218:	1101                	addi	sp,sp,-32

    TEST_START();
    8001021a:	0001c597          	auipc	a1,0x1c
    8001021e:	87658593          	addi	a1,a1,-1930 # 8002ba90 <__func__.13>
    80010222:	0001d517          	auipc	a0,0x1d
    80010226:	17650513          	addi	a0,a0,374 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_2() {
    8001022a:	ec06                	sd	ra,24(sp)
    8001022c:	e822                	sd	s0,16(sp)
    8001022e:	e426                	sd	s1,8(sp)
    TEST_START();
    80010230:	4271a0ef          	jal	8002ae56 <printf>
    80010234:	4529                	li	a0,10
    80010236:	10f190ef          	jal	80029b44 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    8001023a:	4511                	li	a0,4
    8001023c:	ccdf00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010240:	001007b7          	lui	a5,0x100
    80010244:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    80010248:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    8001024c:	450d                	li	a0,3
    8001024e:	cbbf00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010252:	bbbf00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    80010256:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001025a:	08200593          	li	a1,130
    8001025e:	00020617          	auipc	a2,0x20
    80010262:	47a60613          	addi	a2,a2,1146 # 800306d8 <__func__.0+0x3620>
    80010266:	0001d517          	auipc	a0,0x1d
    8001026a:	14a50513          	addi	a0,a0,330 # 8002d3b0 <__func__.0+0x2f8>
    8001026e:	3e91a0ef          	jal	8002ae56 <printf>
    80010272:	00044797          	auipc	a5,0x44
    80010276:	d9f7c783          	lbu	a5,-609(a5) # 80054011 <excpt+0x1>
    8001027a:	00044497          	auipc	s1,0x44
    8001027e:	d9648493          	addi	s1,s1,-618 # 80054010 <excpt>
    80010282:	0001d597          	auipc	a1,0x1d
    80010286:	10658593          	addi	a1,a1,262 # 8002d388 <__func__.0+0x2d0>
    8001028a:	cf89                	beqz	a5,800102a4 <illegal_except_2+0x8c>
    8001028c:	6498                	ld	a4,8(s1)
    8001028e:	4789                	li	a5,2
    80010290:	0001d597          	auipc	a1,0x1d
    80010294:	0e858593          	addi	a1,a1,232 # 8002d378 <__func__.0+0x2c0>
    80010298:	00f70663          	beq	a4,a5,800102a4 <illegal_except_2+0x8c>
    8001029c:	0001d597          	auipc	a1,0x1d
    800102a0:	0ec58593          	addi	a1,a1,236 # 8002d388 <__func__.0+0x2d0>
    800102a4:	0001d517          	auipc	a0,0x1d
    800102a8:	12450513          	addi	a0,a0,292 # 8002d3c8 <__func__.0+0x310>
    800102ac:	3ab1a0ef          	jal	8002ae56 <printf>
    800102b0:	00044797          	auipc	a5,0x44
    800102b4:	d617c783          	lbu	a5,-671(a5) # 80054011 <excpt+0x1>
    800102b8:	c789                	beqz	a5,800102c2 <illegal_except_2+0xaa>
    800102ba:	6498                	ld	a4,8(s1)
    800102bc:	4789                	li	a5,2
    800102be:	00f70c63          	beq	a4,a5,800102d6 <illegal_except_2+0xbe>
    800102c2:	0001d517          	auipc	a0,0x1d
    800102c6:	10e50513          	addi	a0,a0,270 # 8002d3d0 <__func__.0+0x318>
    800102ca:	38d1a0ef          	jal	8002ae56 <printf>
    800102ce:	02900513          	li	a0,41
    800102d2:	073190ef          	jal	80029b44 <putchar>
    800102d6:	4529                	li	a0,10
    800102d8:	06d190ef          	jal	80029b44 <putchar>
    800102dc:	00044417          	auipc	s0,0x44
    800102e0:	d3544403          	lbu	s0,-715(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800102e4:	0001d597          	auipc	a1,0x1d
    800102e8:	0a458593          	addi	a1,a1,164 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800102ec:	cc11                	beqz	s0,80010308 <illegal_except_2+0xf0>
    800102ee:	6498                	ld	a4,8(s1)
    800102f0:	4789                	li	a5,2
    TEST_END();
    800102f2:	0001d597          	auipc	a1,0x1d
    800102f6:	08658593          	addi	a1,a1,134 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800102fa:	00f70763          	beq	a4,a5,80010308 <illegal_except_2+0xf0>
    800102fe:	4401                	li	s0,0
    TEST_END();
    80010300:	0001d597          	auipc	a1,0x1d
    80010304:	08858593          	addi	a1,a1,136 # 8002d388 <__func__.0+0x2d0>
    80010308:	0001d517          	auipc	a0,0x1d
    8001030c:	12850513          	addi	a0,a0,296 # 8002d430 <__func__.0+0x378>
    80010310:	3471a0ef          	jal	8002ae56 <printf>
    80010314:	4511                	li	a0,4
    80010316:	bf3f00ef          	jal	80000f08 <goto_priv>
    8001031a:	d0af10ef          	jal	80001824 <reset_state>

}
    8001031e:	60e2                	ld	ra,24(sp)
    80010320:	8522                	mv	a0,s0
    80010322:	6442                	ld	s0,16(sp)
    80010324:	64a2                	ld	s1,8(sp)
    80010326:	6105                	addi	sp,sp,32
    80010328:	8082                	ret

000000008001032a <illegal_except_3>:

bool illegal_except_3() {
    8001032a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001032c:	0001b597          	auipc	a1,0x1b
    80010330:	77c58593          	addi	a1,a1,1916 # 8002baa8 <__func__.12>
    80010334:	0001d517          	auipc	a0,0x1d
    80010338:	06450513          	addi	a0,a0,100 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_3() {
    8001033c:	ec06                	sd	ra,24(sp)
    8001033e:	e822                	sd	s0,16(sp)
    80010340:	e426                	sd	s1,8(sp)
    TEST_START();
    80010342:	3151a0ef          	jal	8002ae56 <printf>
    80010346:	4529                	li	a0,10
    80010348:	7fc190ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    8001034c:	ac1f00ef          	jal	80000e0c <test_setup_except_function>

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010350:	342025f3          	csrr	a1,mcause
    80010354:	00023517          	auipc	a0,0x23
    80010358:	66c50513          	addi	a0,a0,1644 # 800339c0 <__func__.0+0x6908>
    8001035c:	2fb1a0ef          	jal	8002ae56 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    80010360:	57fd                	li	a5,-1
    80010362:	83f1                	srli	a5,a5,0x1c
    80010364:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010368:	342025f3          	csrr	a1,mcause
    8001036c:	00023517          	auipc	a0,0x23
    80010370:	65450513          	addi	a0,a0,1620 # 800339c0 <__func__.0+0x6908>
    80010374:	2e31a0ef          	jal	8002ae56 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010378:	08200593          	li	a1,130
    8001037c:	00020617          	auipc	a2,0x20
    80010380:	3bc60613          	addi	a2,a2,956 # 80030738 <__func__.0+0x3680>
    80010384:	0001d517          	auipc	a0,0x1d
    80010388:	02c50513          	addi	a0,a0,44 # 8002d3b0 <__func__.0+0x2f8>
    8001038c:	2cb1a0ef          	jal	8002ae56 <printf>
    80010390:	00044797          	auipc	a5,0x44
    80010394:	c817c783          	lbu	a5,-895(a5) # 80054011 <excpt+0x1>
    80010398:	00044497          	auipc	s1,0x44
    8001039c:	c7848493          	addi	s1,s1,-904 # 80054010 <excpt>
    800103a0:	0001d597          	auipc	a1,0x1d
    800103a4:	fe858593          	addi	a1,a1,-24 # 8002d388 <__func__.0+0x2d0>
    800103a8:	cf89                	beqz	a5,800103c2 <illegal_except_3+0x98>
    800103aa:	6498                	ld	a4,8(s1)
    800103ac:	4789                	li	a5,2
    800103ae:	0001d597          	auipc	a1,0x1d
    800103b2:	fca58593          	addi	a1,a1,-54 # 8002d378 <__func__.0+0x2c0>
    800103b6:	00f70663          	beq	a4,a5,800103c2 <illegal_except_3+0x98>
    800103ba:	0001d597          	auipc	a1,0x1d
    800103be:	fce58593          	addi	a1,a1,-50 # 8002d388 <__func__.0+0x2d0>
    800103c2:	0001d517          	auipc	a0,0x1d
    800103c6:	00650513          	addi	a0,a0,6 # 8002d3c8 <__func__.0+0x310>
    800103ca:	28d1a0ef          	jal	8002ae56 <printf>
    800103ce:	00044797          	auipc	a5,0x44
    800103d2:	c437c783          	lbu	a5,-957(a5) # 80054011 <excpt+0x1>
    800103d6:	c789                	beqz	a5,800103e0 <illegal_except_3+0xb6>
    800103d8:	6498                	ld	a4,8(s1)
    800103da:	4789                	li	a5,2
    800103dc:	00f70c63          	beq	a4,a5,800103f4 <illegal_except_3+0xca>
    800103e0:	0001d517          	auipc	a0,0x1d
    800103e4:	ff050513          	addi	a0,a0,-16 # 8002d3d0 <__func__.0+0x318>
    800103e8:	26f1a0ef          	jal	8002ae56 <printf>
    800103ec:	02900513          	li	a0,41
    800103f0:	754190ef          	jal	80029b44 <putchar>
    800103f4:	4529                	li	a0,10
    800103f6:	74e190ef          	jal	80029b44 <putchar>
    800103fa:	00044417          	auipc	s0,0x44
    800103fe:	c1744403          	lbu	s0,-1001(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80010402:	0001d597          	auipc	a1,0x1d
    80010406:	f8658593          	addi	a1,a1,-122 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8001040a:	cc11                	beqz	s0,80010426 <illegal_except_3+0xfc>
    8001040c:	6498                	ld	a4,8(s1)
    8001040e:	4789                	li	a5,2
    TEST_END();
    80010410:	0001d597          	auipc	a1,0x1d
    80010414:	f6858593          	addi	a1,a1,-152 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010418:	00f70763          	beq	a4,a5,80010426 <illegal_except_3+0xfc>
    8001041c:	4401                	li	s0,0
    TEST_END();
    8001041e:	0001d597          	auipc	a1,0x1d
    80010422:	f6a58593          	addi	a1,a1,-150 # 8002d388 <__func__.0+0x2d0>
    80010426:	0001d517          	auipc	a0,0x1d
    8001042a:	00a50513          	addi	a0,a0,10 # 8002d430 <__func__.0+0x378>
    8001042e:	2291a0ef          	jal	8002ae56 <printf>
    80010432:	4511                	li	a0,4
    80010434:	ad5f00ef          	jal	80000f08 <goto_priv>
    80010438:	becf10ef          	jal	80001824 <reset_state>
}
    8001043c:	60e2                	ld	ra,24(sp)
    8001043e:	8522                	mv	a0,s0
    80010440:	6442                	ld	s0,16(sp)
    80010442:	64a2                	ld	s1,8(sp)
    80010444:	6105                	addi	sp,sp,32
    80010446:	8082                	ret

0000000080010448 <illegal_except_4>:



bool illegal_except_4() {
    80010448:	1101                	addi	sp,sp,-32

    TEST_START();
    8001044a:	0001b597          	auipc	a1,0x1b
    8001044e:	67658593          	addi	a1,a1,1654 # 8002bac0 <__func__.11>
    80010452:	0001d517          	auipc	a0,0x1d
    80010456:	f4650513          	addi	a0,a0,-186 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_4() {
    8001045a:	ec06                	sd	ra,24(sp)
    8001045c:	e822                	sd	s0,16(sp)
    8001045e:	e426                	sd	s1,8(sp)
    80010460:	e04a                	sd	s2,0(sp)
    TEST_START();
    80010462:	1f51a0ef          	jal	8002ae56 <printf>
    80010466:	4529                	li	a0,10
    80010468:	6dc190ef          	jal	80029b44 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    8001046c:	4511                	li	a0,4
    8001046e:	a9bf00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010472:	99bf00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    80010476:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    8001047a:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    8001047e:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    80010482:	08200593          	li	a1,130
    80010486:	00020617          	auipc	a2,0x20
    8001048a:	2f260613          	addi	a2,a2,754 # 80030778 <__func__.0+0x36c0>
    8001048e:	0001d517          	auipc	a0,0x1d
    80010492:	f2250513          	addi	a0,a0,-222 # 8002d3b0 <__func__.0+0x2f8>
    80010496:	1c11a0ef          	jal	8002ae56 <printf>
    8001049a:	00044797          	auipc	a5,0x44
    8001049e:	b777c783          	lbu	a5,-1161(a5) # 80054011 <excpt+0x1>
    800104a2:	0001d597          	auipc	a1,0x1d
    800104a6:	ed658593          	addi	a1,a1,-298 # 8002d378 <__func__.0+0x2c0>
    800104aa:	c789                	beqz	a5,800104b4 <illegal_except_4+0x6c>
    800104ac:	0001d597          	auipc	a1,0x1d
    800104b0:	edc58593          	addi	a1,a1,-292 # 8002d388 <__func__.0+0x2d0>
    800104b4:	0001d517          	auipc	a0,0x1d
    800104b8:	f1450513          	addi	a0,a0,-236 # 8002d3c8 <__func__.0+0x310>
    800104bc:	19b1a0ef          	jal	8002ae56 <printf>
    800104c0:	00044797          	auipc	a5,0x44
    800104c4:	b517c783          	lbu	a5,-1199(a5) # 80054011 <excpt+0x1>
    800104c8:	18079e63          	bnez	a5,80010664 <illegal_except_4+0x21c>
    800104cc:	4529                	li	a0,10
    800104ce:	676190ef          	jal	80029b44 <putchar>
    800104d2:	00044917          	auipc	s2,0x44
    800104d6:	b3f94903          	lbu	s2,-1217(s2) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    800104da:	b4af10ef          	jal	80001824 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    800104de:	450d                	li	a0,3
    800104e0:	a29f00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode access any csr successful",
    800104e4:	00044417          	auipc	s0,0x44
    800104e8:	b2c40413          	addi	s0,s0,-1236 # 80054010 <excpt>
    TEST_SETUP_EXCEPT();
    800104ec:	921f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    800104f0:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    800104f4:	08200593          	li	a1,130
    800104f8:	00020617          	auipc	a2,0x20
    800104fc:	2a860613          	addi	a2,a2,680 # 800307a0 <__func__.0+0x36e8>
    80010500:	0001d517          	auipc	a0,0x1d
    80010504:	eb050513          	addi	a0,a0,-336 # 8002d3b0 <__func__.0+0x2f8>
    80010508:	14f1a0ef          	jal	8002ae56 <printf>
    8001050c:	00044797          	auipc	a5,0x44
    80010510:	b057c783          	lbu	a5,-1275(a5) # 80054011 <excpt+0x1>
    80010514:	0001d597          	auipc	a1,0x1d
    80010518:	e7458593          	addi	a1,a1,-396 # 8002d388 <__func__.0+0x2d0>
    8001051c:	cf89                	beqz	a5,80010536 <illegal_except_4+0xee>
    8001051e:	6418                	ld	a4,8(s0)
    80010520:	4789                	li	a5,2
    80010522:	0001d597          	auipc	a1,0x1d
    80010526:	e5658593          	addi	a1,a1,-426 # 8002d378 <__func__.0+0x2c0>
    8001052a:	00f70663          	beq	a4,a5,80010536 <illegal_except_4+0xee>
    8001052e:	0001d597          	auipc	a1,0x1d
    80010532:	e5a58593          	addi	a1,a1,-422 # 8002d388 <__func__.0+0x2d0>
    80010536:	0001d517          	auipc	a0,0x1d
    8001053a:	e9250513          	addi	a0,a0,-366 # 8002d3c8 <__func__.0+0x310>
    8001053e:	1191a0ef          	jal	8002ae56 <printf>
    80010542:	00044797          	auipc	a5,0x44
    80010546:	acf7c783          	lbu	a5,-1329(a5) # 80054011 <excpt+0x1>
    8001054a:	c789                	beqz	a5,80010554 <illegal_except_4+0x10c>
    8001054c:	6418                	ld	a4,8(s0)
    8001054e:	4789                	li	a5,2
    80010550:	00f70c63          	beq	a4,a5,80010568 <illegal_except_4+0x120>
    80010554:	0001d517          	auipc	a0,0x1d
    80010558:	e7c50513          	addi	a0,a0,-388 # 8002d3d0 <__func__.0+0x318>
    8001055c:	0fb1a0ef          	jal	8002ae56 <printf>
    80010560:	02900513          	li	a0,41
    80010564:	5e0190ef          	jal	80029b44 <putchar>
    80010568:	4529                	li	a0,10
    8001056a:	5da190ef          	jal	80029b44 <putchar>
    8001056e:	4481                	li	s1,0
    80010570:	00091863          	bnez	s2,80010580 <illegal_except_4+0x138>
    80010574:	00044797          	auipc	a5,0x44
    80010578:	a9d7c783          	lbu	a5,-1379(a5) # 80054011 <excpt+0x1>
    8001057c:	0c079f63          	bnez	a5,8001065a <illegal_except_4+0x212>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    80010580:	4509                	li	a0,2
    80010582:	987f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010586:	887f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIDELEG);
    8001058a:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8001058e:	08200593          	li	a1,130
    80010592:	00020617          	auipc	a2,0x20
    80010596:	24660613          	addi	a2,a2,582 # 800307d8 <__func__.0+0x3720>
    8001059a:	0001d517          	auipc	a0,0x1d
    8001059e:	e1650513          	addi	a0,a0,-490 # 8002d3b0 <__func__.0+0x2f8>
    800105a2:	0b51a0ef          	jal	8002ae56 <printf>
    800105a6:	00044797          	auipc	a5,0x44
    800105aa:	a6b7c783          	lbu	a5,-1429(a5) # 80054011 <excpt+0x1>
    800105ae:	0001d597          	auipc	a1,0x1d
    800105b2:	dda58593          	addi	a1,a1,-550 # 8002d388 <__func__.0+0x2d0>
    800105b6:	cf89                	beqz	a5,800105d0 <illegal_except_4+0x188>
    800105b8:	6418                	ld	a4,8(s0)
    800105ba:	4789                	li	a5,2
    800105bc:	0001d597          	auipc	a1,0x1d
    800105c0:	dbc58593          	addi	a1,a1,-580 # 8002d378 <__func__.0+0x2c0>
    800105c4:	00f70663          	beq	a4,a5,800105d0 <illegal_except_4+0x188>
    800105c8:	0001d597          	auipc	a1,0x1d
    800105cc:	dc058593          	addi	a1,a1,-576 # 8002d388 <__func__.0+0x2d0>
    800105d0:	0001d517          	auipc	a0,0x1d
    800105d4:	df850513          	addi	a0,a0,-520 # 8002d3c8 <__func__.0+0x310>
    800105d8:	07f1a0ef          	jal	8002ae56 <printf>
    800105dc:	00044797          	auipc	a5,0x44
    800105e0:	a357c783          	lbu	a5,-1483(a5) # 80054011 <excpt+0x1>
    800105e4:	c789                	beqz	a5,800105ee <illegal_except_4+0x1a6>
    800105e6:	6418                	ld	a4,8(s0)
    800105e8:	4789                	li	a5,2
    800105ea:	00f70c63          	beq	a4,a5,80010602 <illegal_except_4+0x1ba>
    800105ee:	0001d517          	auipc	a0,0x1d
    800105f2:	de250513          	addi	a0,a0,-542 # 8002d3d0 <__func__.0+0x318>
    800105f6:	0611a0ef          	jal	8002ae56 <printf>
    800105fa:	02900513          	li	a0,41
    800105fe:	546190ef          	jal	80029b44 <putchar>
    80010602:	4529                	li	a0,10
    80010604:	540190ef          	jal	80029b44 <putchar>
    80010608:	c095                	beqz	s1,8001062c <illegal_except_4+0x1e4>
    8001060a:	00044497          	auipc	s1,0x44
    8001060e:	a074c483          	lbu	s1,-1529(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    80010612:	0001d597          	auipc	a1,0x1d
    80010616:	d7658593          	addi	a1,a1,-650 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8001061a:	cc91                	beqz	s1,80010636 <illegal_except_4+0x1ee>
    8001061c:	6418                	ld	a4,8(s0)
    8001061e:	4789                	li	a5,2
    TEST_END();
    80010620:	0001d597          	auipc	a1,0x1d
    80010624:	d5858593          	addi	a1,a1,-680 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010628:	00f70763          	beq	a4,a5,80010636 <illegal_except_4+0x1ee>
    8001062c:	4481                	li	s1,0
    TEST_END();
    8001062e:	0001d597          	auipc	a1,0x1d
    80010632:	d5a58593          	addi	a1,a1,-678 # 8002d388 <__func__.0+0x2d0>
    80010636:	0001d517          	auipc	a0,0x1d
    8001063a:	dfa50513          	addi	a0,a0,-518 # 8002d430 <__func__.0+0x378>
    8001063e:	0191a0ef          	jal	8002ae56 <printf>
    80010642:	4511                	li	a0,4
    80010644:	8c5f00ef          	jal	80000f08 <goto_priv>
    80010648:	9dcf10ef          	jal	80001824 <reset_state>
}
    8001064c:	60e2                	ld	ra,24(sp)
    8001064e:	6442                	ld	s0,16(sp)
    80010650:	6902                	ld	s2,0(sp)
    80010652:	8526                	mv	a0,s1
    80010654:	64a2                	ld	s1,8(sp)
    80010656:	6105                	addi	sp,sp,32
    80010658:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8001065a:	6404                	ld	s1,8(s0)
    8001065c:	14f9                	addi	s1,s1,-2
    8001065e:	0014b493          	seqz	s1,s1
    80010662:	bf39                	j	80010580 <illegal_except_4+0x138>
    TEST_ASSERT("m mode access any csr successful",
    80010664:	0001d517          	auipc	a0,0x1d
    80010668:	d6c50513          	addi	a0,a0,-660 # 8002d3d0 <__func__.0+0x318>
    8001066c:	7ea1a0ef          	jal	8002ae56 <printf>
    80010670:	02900513          	li	a0,41
    80010674:	4d0190ef          	jal	80029b44 <putchar>
    80010678:	bd91                	j	800104cc <illegal_except_4+0x84>

000000008001067a <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    8001067a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001067c:	0001b597          	auipc	a1,0x1b
    80010680:	45c58593          	addi	a1,a1,1116 # 8002bad8 <__func__.10>
    80010684:	0001d517          	auipc	a0,0x1d
    80010688:	d1450513          	addi	a0,a0,-748 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_5() {
    8001068c:	ec06                	sd	ra,24(sp)
    8001068e:	e822                	sd	s0,16(sp)
    80010690:	e426                	sd	s1,8(sp)
    TEST_START();
    80010692:	7c41a0ef          	jal	8002ae56 <printf>
    80010696:	4529                	li	a0,10
    80010698:	4ac190ef          	jal	80029b44 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    8001069c:	4511                	li	a0,4
    8001069e:	86bf00ef          	jal	80000f08 <goto_priv>
    CSRW(satp, 0x0);
    800106a2:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800106a6:	001007b7          	lui	a5,0x100
    800106aa:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800106ae:	450d                	li	a0,3
    800106b0:	859f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800106b4:	f58f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    800106b8:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800106bc:	08200593          	li	a1,130
    800106c0:	00020617          	auipc	a2,0x20
    800106c4:	01860613          	addi	a2,a2,24 # 800306d8 <__func__.0+0x3620>
    800106c8:	0001d517          	auipc	a0,0x1d
    800106cc:	ce850513          	addi	a0,a0,-792 # 8002d3b0 <__func__.0+0x2f8>
    800106d0:	7861a0ef          	jal	8002ae56 <printf>
    800106d4:	00044797          	auipc	a5,0x44
    800106d8:	93d7c783          	lbu	a5,-1731(a5) # 80054011 <excpt+0x1>
    800106dc:	00044497          	auipc	s1,0x44
    800106e0:	93448493          	addi	s1,s1,-1740 # 80054010 <excpt>
    800106e4:	0001d597          	auipc	a1,0x1d
    800106e8:	ca458593          	addi	a1,a1,-860 # 8002d388 <__func__.0+0x2d0>
    800106ec:	cf89                	beqz	a5,80010706 <illegal_except_5+0x8c>
    800106ee:	6498                	ld	a4,8(s1)
    800106f0:	4789                	li	a5,2
    800106f2:	0001d597          	auipc	a1,0x1d
    800106f6:	c8658593          	addi	a1,a1,-890 # 8002d378 <__func__.0+0x2c0>
    800106fa:	00f70663          	beq	a4,a5,80010706 <illegal_except_5+0x8c>
    800106fe:	0001d597          	auipc	a1,0x1d
    80010702:	c8a58593          	addi	a1,a1,-886 # 8002d388 <__func__.0+0x2d0>
    80010706:	0001d517          	auipc	a0,0x1d
    8001070a:	cc250513          	addi	a0,a0,-830 # 8002d3c8 <__func__.0+0x310>
    8001070e:	7481a0ef          	jal	8002ae56 <printf>
    80010712:	00044797          	auipc	a5,0x44
    80010716:	8ff7c783          	lbu	a5,-1793(a5) # 80054011 <excpt+0x1>
    8001071a:	c789                	beqz	a5,80010724 <illegal_except_5+0xaa>
    8001071c:	6498                	ld	a4,8(s1)
    8001071e:	4789                	li	a5,2
    80010720:	00f70c63          	beq	a4,a5,80010738 <illegal_except_5+0xbe>
    80010724:	0001d517          	auipc	a0,0x1d
    80010728:	cac50513          	addi	a0,a0,-852 # 8002d3d0 <__func__.0+0x318>
    8001072c:	72a1a0ef          	jal	8002ae56 <printf>
    80010730:	02900513          	li	a0,41
    80010734:	410190ef          	jal	80029b44 <putchar>
    80010738:	4529                	li	a0,10
    8001073a:	40a190ef          	jal	80029b44 <putchar>
    8001073e:	00044417          	auipc	s0,0x44
    80010742:	8d344403          	lbu	s0,-1837(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010746:	0001d597          	auipc	a1,0x1d
    8001074a:	c4258593          	addi	a1,a1,-958 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001074e:	cc11                	beqz	s0,8001076a <illegal_except_5+0xf0>
    80010750:	6498                	ld	a4,8(s1)
    80010752:	4789                	li	a5,2
    TEST_END();
    80010754:	0001d597          	auipc	a1,0x1d
    80010758:	c2458593          	addi	a1,a1,-988 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001075c:	00f70763          	beq	a4,a5,8001076a <illegal_except_5+0xf0>
    80010760:	4401                	li	s0,0
    TEST_END();
    80010762:	0001d597          	auipc	a1,0x1d
    80010766:	c2658593          	addi	a1,a1,-986 # 8002d388 <__func__.0+0x2d0>
    8001076a:	0001d517          	auipc	a0,0x1d
    8001076e:	cc650513          	addi	a0,a0,-826 # 8002d430 <__func__.0+0x378>
    80010772:	6e41a0ef          	jal	8002ae56 <printf>
    80010776:	4511                	li	a0,4
    80010778:	f90f00ef          	jal	80000f08 <goto_priv>
    8001077c:	8a8f10ef          	jal	80001824 <reset_state>
}
    80010780:	60e2                	ld	ra,24(sp)
    80010782:	8522                	mv	a0,s0
    80010784:	6442                	ld	s0,16(sp)
    80010786:	64a2                	ld	s1,8(sp)
    80010788:	6105                	addi	sp,sp,32
    8001078a:	8082                	ret

000000008001078c <illegal_except_6>:

bool illegal_except_6() {
    8001078c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001078e:	0001b597          	auipc	a1,0x1b
    80010792:	36258593          	addi	a1,a1,866 # 8002baf0 <__func__.9>
    80010796:	0001d517          	auipc	a0,0x1d
    8001079a:	c0250513          	addi	a0,a0,-1022 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_6() {
    8001079e:	ec06                	sd	ra,24(sp)
    800107a0:	e822                	sd	s0,16(sp)
    800107a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800107a4:	6b21a0ef          	jal	8002ae56 <printf>
    800107a8:	4529                	li	a0,10
    800107aa:	39a190ef          	jal	80029b44 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    800107ae:	4511                	li	a0,4
    800107b0:	f58f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800107b4:	001007b7          	lui	a5,0x100
    800107b8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800107bc:	450d                	li	a0,3
    800107be:	f4af00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800107c2:	e4af00ef          	jal	80000e0c <test_setup_except_function>
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    800107c6:	57fd                	li	a5,-1
    800107c8:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107cc:	08200593          	li	a1,130
    800107d0:	00020617          	auipc	a2,0x20
    800107d4:	04060613          	addi	a2,a2,64 # 80030810 <__func__.0+0x3758>
    800107d8:	0001d517          	auipc	a0,0x1d
    800107dc:	bd850513          	addi	a0,a0,-1064 # 8002d3b0 <__func__.0+0x2f8>
    800107e0:	6761a0ef          	jal	8002ae56 <printf>
    800107e4:	00044797          	auipc	a5,0x44
    800107e8:	82d7c783          	lbu	a5,-2003(a5) # 80054011 <excpt+0x1>
    800107ec:	00044497          	auipc	s1,0x44
    800107f0:	82448493          	addi	s1,s1,-2012 # 80054010 <excpt>
    800107f4:	0001d597          	auipc	a1,0x1d
    800107f8:	b9458593          	addi	a1,a1,-1132 # 8002d388 <__func__.0+0x2d0>
    800107fc:	cf89                	beqz	a5,80010816 <illegal_except_6+0x8a>
    800107fe:	6498                	ld	a4,8(s1)
    80010800:	4789                	li	a5,2
    80010802:	0001d597          	auipc	a1,0x1d
    80010806:	b7658593          	addi	a1,a1,-1162 # 8002d378 <__func__.0+0x2c0>
    8001080a:	00f70663          	beq	a4,a5,80010816 <illegal_except_6+0x8a>
    8001080e:	0001d597          	auipc	a1,0x1d
    80010812:	b7a58593          	addi	a1,a1,-1158 # 8002d388 <__func__.0+0x2d0>
    80010816:	0001d517          	auipc	a0,0x1d
    8001081a:	bb250513          	addi	a0,a0,-1102 # 8002d3c8 <__func__.0+0x310>
    8001081e:	6381a0ef          	jal	8002ae56 <printf>
    80010822:	00043797          	auipc	a5,0x43
    80010826:	7ef7c783          	lbu	a5,2031(a5) # 80054011 <excpt+0x1>
    8001082a:	c789                	beqz	a5,80010834 <illegal_except_6+0xa8>
    8001082c:	6498                	ld	a4,8(s1)
    8001082e:	4789                	li	a5,2
    80010830:	00f70c63          	beq	a4,a5,80010848 <illegal_except_6+0xbc>
    80010834:	0001d517          	auipc	a0,0x1d
    80010838:	b9c50513          	addi	a0,a0,-1124 # 8002d3d0 <__func__.0+0x318>
    8001083c:	61a1a0ef          	jal	8002ae56 <printf>
    80010840:	02900513          	li	a0,41
    80010844:	300190ef          	jal	80029b44 <putchar>
    80010848:	4529                	li	a0,10
    8001084a:	2fa190ef          	jal	80029b44 <putchar>
    8001084e:	00043417          	auipc	s0,0x43
    80010852:	7c344403          	lbu	s0,1987(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010856:	0001d597          	auipc	a1,0x1d
    8001085a:	b3258593          	addi	a1,a1,-1230 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8001085e:	cc11                	beqz	s0,8001087a <illegal_except_6+0xee>
    80010860:	6498                	ld	a4,8(s1)
    80010862:	4789                	li	a5,2
    TEST_END();
    80010864:	0001d597          	auipc	a1,0x1d
    80010868:	b1458593          	addi	a1,a1,-1260 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8001086c:	00f70763          	beq	a4,a5,8001087a <illegal_except_6+0xee>
    80010870:	4401                	li	s0,0
    TEST_END();
    80010872:	0001d597          	auipc	a1,0x1d
    80010876:	b1658593          	addi	a1,a1,-1258 # 8002d388 <__func__.0+0x2d0>
    8001087a:	0001d517          	auipc	a0,0x1d
    8001087e:	bb650513          	addi	a0,a0,-1098 # 8002d430 <__func__.0+0x378>
    80010882:	5d41a0ef          	jal	8002ae56 <printf>
    80010886:	4511                	li	a0,4
    80010888:	e80f00ef          	jal	80000f08 <goto_priv>
    8001088c:	f99f00ef          	jal	80001824 <reset_state>
}
    80010890:	60e2                	ld	ra,24(sp)
    80010892:	8522                	mv	a0,s0
    80010894:	6442                	ld	s0,16(sp)
    80010896:	64a2                	ld	s1,8(sp)
    80010898:	6105                	addi	sp,sp,32
    8001089a:	8082                	ret

000000008001089c <illegal_except_7>:

bool illegal_except_7() {
    8001089c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001089e:	0001b597          	auipc	a1,0x1b
    800108a2:	26a58593          	addi	a1,a1,618 # 8002bb08 <__func__.8>
    800108a6:	0001d517          	auipc	a0,0x1d
    800108aa:	af250513          	addi	a0,a0,-1294 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_7() {
    800108ae:	ec06                	sd	ra,24(sp)
    800108b0:	e822                	sd	s0,16(sp)
    800108b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800108b4:	5a21a0ef          	jal	8002ae56 <printf>
    800108b8:	4529                	li	a0,10
    800108ba:	28a190ef          	jal	80029b44 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    800108be:	4511                	li	a0,4
    800108c0:	e48f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    800108c4:	001007b7          	lui	a5,0x100
    800108c8:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    800108cc:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    800108d0:	450d                	li	a0,3
    800108d2:	e36f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800108d6:	d36f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800108da:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    800108de:	08200593          	li	a1,130
    800108e2:	00020617          	auipc	a2,0x20
    800108e6:	f9660613          	addi	a2,a2,-106 # 80030878 <__func__.0+0x37c0>
    800108ea:	0001d517          	auipc	a0,0x1d
    800108ee:	ac650513          	addi	a0,a0,-1338 # 8002d3b0 <__func__.0+0x2f8>
    800108f2:	5641a0ef          	jal	8002ae56 <printf>
    800108f6:	00043797          	auipc	a5,0x43
    800108fa:	71b7c783          	lbu	a5,1819(a5) # 80054011 <excpt+0x1>
    800108fe:	00043497          	auipc	s1,0x43
    80010902:	71248493          	addi	s1,s1,1810 # 80054010 <excpt>
    80010906:	0001d597          	auipc	a1,0x1d
    8001090a:	a8258593          	addi	a1,a1,-1406 # 8002d388 <__func__.0+0x2d0>
    8001090e:	cf89                	beqz	a5,80010928 <illegal_except_7+0x8c>
    80010910:	6498                	ld	a4,8(s1)
    80010912:	4789                	li	a5,2
    80010914:	0001d597          	auipc	a1,0x1d
    80010918:	a6458593          	addi	a1,a1,-1436 # 8002d378 <__func__.0+0x2c0>
    8001091c:	00f70663          	beq	a4,a5,80010928 <illegal_except_7+0x8c>
    80010920:	0001d597          	auipc	a1,0x1d
    80010924:	a6858593          	addi	a1,a1,-1432 # 8002d388 <__func__.0+0x2d0>
    80010928:	0001d517          	auipc	a0,0x1d
    8001092c:	aa050513          	addi	a0,a0,-1376 # 8002d3c8 <__func__.0+0x310>
    80010930:	5261a0ef          	jal	8002ae56 <printf>
    80010934:	00043797          	auipc	a5,0x43
    80010938:	6dd7c783          	lbu	a5,1757(a5) # 80054011 <excpt+0x1>
    8001093c:	c789                	beqz	a5,80010946 <illegal_except_7+0xaa>
    8001093e:	6498                	ld	a4,8(s1)
    80010940:	4789                	li	a5,2
    80010942:	00f70c63          	beq	a4,a5,8001095a <illegal_except_7+0xbe>
    80010946:	0001d517          	auipc	a0,0x1d
    8001094a:	a8a50513          	addi	a0,a0,-1398 # 8002d3d0 <__func__.0+0x318>
    8001094e:	5081a0ef          	jal	8002ae56 <printf>
    80010952:	02900513          	li	a0,41
    80010956:	1ee190ef          	jal	80029b44 <putchar>
    8001095a:	4529                	li	a0,10
    8001095c:	1e8190ef          	jal	80029b44 <putchar>
    80010960:	00043797          	auipc	a5,0x43
    80010964:	6b17c783          	lbu	a5,1713(a5) # 80054011 <excpt+0x1>
    80010968:	4401                	li	s0,0
    8001096a:	c789                	beqz	a5,80010974 <illegal_except_7+0xd8>
    8001096c:	6480                	ld	s0,8(s1)
    8001096e:	1479                	addi	s0,s0,-2
    80010970:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80010974:	450d                	li	a0,3
    80010976:	d92f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001097a:	c92f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001097e:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010982:	08200593          	li	a1,130
    80010986:	00020617          	auipc	a2,0x20
    8001098a:	f2260613          	addi	a2,a2,-222 # 800308a8 <__func__.0+0x37f0>
    8001098e:	0001d517          	auipc	a0,0x1d
    80010992:	a2250513          	addi	a0,a0,-1502 # 8002d3b0 <__func__.0+0x2f8>
    80010996:	4c01a0ef          	jal	8002ae56 <printf>
    8001099a:	00043797          	auipc	a5,0x43
    8001099e:	6777c783          	lbu	a5,1655(a5) # 80054011 <excpt+0x1>
    800109a2:	0001d597          	auipc	a1,0x1d
    800109a6:	9e658593          	addi	a1,a1,-1562 # 8002d388 <__func__.0+0x2d0>
    800109aa:	cf89                	beqz	a5,800109c4 <illegal_except_7+0x128>
    800109ac:	6498                	ld	a4,8(s1)
    800109ae:	4789                	li	a5,2
    800109b0:	0001d597          	auipc	a1,0x1d
    800109b4:	9c858593          	addi	a1,a1,-1592 # 8002d378 <__func__.0+0x2c0>
    800109b8:	00f70663          	beq	a4,a5,800109c4 <illegal_except_7+0x128>
    800109bc:	0001d597          	auipc	a1,0x1d
    800109c0:	9cc58593          	addi	a1,a1,-1588 # 8002d388 <__func__.0+0x2d0>
    800109c4:	0001d517          	auipc	a0,0x1d
    800109c8:	a0450513          	addi	a0,a0,-1532 # 8002d3c8 <__func__.0+0x310>
    800109cc:	48a1a0ef          	jal	8002ae56 <printf>
    800109d0:	00043797          	auipc	a5,0x43
    800109d4:	6417c783          	lbu	a5,1601(a5) # 80054011 <excpt+0x1>
    800109d8:	c789                	beqz	a5,800109e2 <illegal_except_7+0x146>
    800109da:	6498                	ld	a4,8(s1)
    800109dc:	4789                	li	a5,2
    800109de:	00f70c63          	beq	a4,a5,800109f6 <illegal_except_7+0x15a>
    800109e2:	0001d517          	auipc	a0,0x1d
    800109e6:	9ee50513          	addi	a0,a0,-1554 # 8002d3d0 <__func__.0+0x318>
    800109ea:	46c1a0ef          	jal	8002ae56 <printf>
    800109ee:	02900513          	li	a0,41
    800109f2:	152190ef          	jal	80029b44 <putchar>
    800109f6:	4529                	li	a0,10
    800109f8:	14c190ef          	jal	80029b44 <putchar>
    800109fc:	c015                	beqz	s0,80010a20 <illegal_except_7+0x184>
    800109fe:	00043417          	auipc	s0,0x43
    80010a02:	61344403          	lbu	s0,1555(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010a06:	0001d597          	auipc	a1,0x1d
    80010a0a:	98258593          	addi	a1,a1,-1662 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010a0e:	cc11                	beqz	s0,80010a2a <illegal_except_7+0x18e>
    80010a10:	6498                	ld	a4,8(s1)
    80010a12:	4789                	li	a5,2
    TEST_END();
    80010a14:	0001d597          	auipc	a1,0x1d
    80010a18:	96458593          	addi	a1,a1,-1692 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010a1c:	00f70763          	beq	a4,a5,80010a2a <illegal_except_7+0x18e>
    80010a20:	4401                	li	s0,0
    TEST_END();
    80010a22:	0001d597          	auipc	a1,0x1d
    80010a26:	96658593          	addi	a1,a1,-1690 # 8002d388 <__func__.0+0x2d0>
    80010a2a:	0001d517          	auipc	a0,0x1d
    80010a2e:	a0650513          	addi	a0,a0,-1530 # 8002d430 <__func__.0+0x378>
    80010a32:	4241a0ef          	jal	8002ae56 <printf>
    80010a36:	4511                	li	a0,4
    80010a38:	cd0f00ef          	jal	80000f08 <goto_priv>
    80010a3c:	de9f00ef          	jal	80001824 <reset_state>
}
    80010a40:	60e2                	ld	ra,24(sp)
    80010a42:	8522                	mv	a0,s0
    80010a44:	6442                	ld	s0,16(sp)
    80010a46:	64a2                	ld	s1,8(sp)
    80010a48:	6105                	addi	sp,sp,32
    80010a4a:	8082                	ret

0000000080010a4c <illegal_except_8>:


bool illegal_except_8() {
    80010a4c:	1141                	addi	sp,sp,-16

    TEST_START();
    80010a4e:	0001b597          	auipc	a1,0x1b
    80010a52:	0d258593          	addi	a1,a1,210 # 8002bb20 <__func__.7>
    80010a56:	0001d517          	auipc	a0,0x1d
    80010a5a:	94250513          	addi	a0,a0,-1726 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_8() {
    80010a5e:	e406                	sd	ra,8(sp)
    80010a60:	e022                	sd	s0,0(sp)
    TEST_START();
    80010a62:	3f41a0ef          	jal	8002ae56 <printf>
    80010a66:	4529                	li	a0,10
    80010a68:	0dc190ef          	jal	80029b44 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010a6c:	4511                	li	a0,4
    80010a6e:	c9af00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010a72:	b9af00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010a76:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a7a:	08200593          	li	a1,130
    80010a7e:	00020617          	auipc	a2,0x20
    80010a82:	e5a60613          	addi	a2,a2,-422 # 800308d8 <__func__.0+0x3820>
    80010a86:	0001d517          	auipc	a0,0x1d
    80010a8a:	92a50513          	addi	a0,a0,-1750 # 8002d3b0 <__func__.0+0x2f8>
    80010a8e:	3c81a0ef          	jal	8002ae56 <printf>
    80010a92:	00043797          	auipc	a5,0x43
    80010a96:	57f7c783          	lbu	a5,1407(a5) # 80054011 <excpt+0x1>
    80010a9a:	0001d597          	auipc	a1,0x1d
    80010a9e:	8de58593          	addi	a1,a1,-1826 # 8002d378 <__func__.0+0x2c0>
    80010aa2:	c789                	beqz	a5,80010aac <illegal_except_8+0x60>
    80010aa4:	0001d597          	auipc	a1,0x1d
    80010aa8:	8e458593          	addi	a1,a1,-1820 # 8002d388 <__func__.0+0x2d0>
    80010aac:	0001d517          	auipc	a0,0x1d
    80010ab0:	91c50513          	addi	a0,a0,-1764 # 8002d3c8 <__func__.0+0x310>
    80010ab4:	3a21a0ef          	jal	8002ae56 <printf>
    80010ab8:	00043797          	auipc	a5,0x43
    80010abc:	5597c783          	lbu	a5,1369(a5) # 80054011 <excpt+0x1>
    80010ac0:	e7a1                	bnez	a5,80010b08 <illegal_except_8+0xbc>
    80010ac2:	4529                	li	a0,10
    80010ac4:	080190ef          	jal	80029b44 <putchar>
    80010ac8:	00043797          	auipc	a5,0x43
    80010acc:	5497c783          	lbu	a5,1353(a5) # 80054011 <excpt+0x1>
    80010ad0:	e795                	bnez	a5,80010afc <illegal_except_8+0xb0>
    80010ad2:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80010ad4:	0001d597          	auipc	a1,0x1d
    80010ad8:	8a458593          	addi	a1,a1,-1884 # 8002d378 <__func__.0+0x2c0>
    80010adc:	0001d517          	auipc	a0,0x1d
    80010ae0:	95450513          	addi	a0,a0,-1708 # 8002d430 <__func__.0+0x378>
    80010ae4:	3721a0ef          	jal	8002ae56 <printf>
    80010ae8:	4511                	li	a0,4
    80010aea:	c1ef00ef          	jal	80000f08 <goto_priv>
    80010aee:	d37f00ef          	jal	80001824 <reset_state>
}
    80010af2:	60a2                	ld	ra,8(sp)
    80010af4:	8522                	mv	a0,s0
    80010af6:	6402                	ld	s0,0(sp)
    80010af8:	0141                	addi	sp,sp,16
    80010afa:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80010afc:	4401                	li	s0,0
    TEST_END();
    80010afe:	0001d597          	auipc	a1,0x1d
    80010b02:	88a58593          	addi	a1,a1,-1910 # 8002d388 <__func__.0+0x2d0>
    80010b06:	bfd9                	j	80010adc <illegal_except_8+0x90>
    TEST_ASSERT("m mode hfence.gvma successful",
    80010b08:	0001d517          	auipc	a0,0x1d
    80010b0c:	8c850513          	addi	a0,a0,-1848 # 8002d3d0 <__func__.0+0x318>
    80010b10:	3461a0ef          	jal	8002ae56 <printf>
    80010b14:	02900513          	li	a0,41
    80010b18:	02c190ef          	jal	80029b44 <putchar>
    80010b1c:	b75d                	j	80010ac2 <illegal_except_8+0x76>

0000000080010b1e <illegal_except_9>:

bool illegal_except_9() {
    80010b1e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010b20:	0001b597          	auipc	a1,0x1b
    80010b24:	01858593          	addi	a1,a1,24 # 8002bb38 <__func__.6>
    80010b28:	0001d517          	auipc	a0,0x1d
    80010b2c:	87050513          	addi	a0,a0,-1936 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_9() {
    80010b30:	ec06                	sd	ra,24(sp)
    80010b32:	e822                	sd	s0,16(sp)
    80010b34:	e426                	sd	s1,8(sp)
    TEST_START();
    80010b36:	3201a0ef          	jal	8002ae56 <printf>
    80010b3a:	4529                	li	a0,10
    80010b3c:	008190ef          	jal	80029b44 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010b40:	4511                	li	a0,4
    80010b42:	bc6f00ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80010b46:	001007b7          	lui	a5,0x100
    80010b4a:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80010b4e:	450d                	li	a0,3
    80010b50:	bb8f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b54:	ab8f00ef          	jal	80000e0c <test_setup_except_function>
    80010b58:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010b5c:	08200593          	li	a1,130
    80010b60:	00020617          	auipc	a2,0x20
    80010b64:	d9860613          	addi	a2,a2,-616 # 800308f8 <__func__.0+0x3840>
    80010b68:	0001d517          	auipc	a0,0x1d
    80010b6c:	84850513          	addi	a0,a0,-1976 # 8002d3b0 <__func__.0+0x2f8>
    80010b70:	2e61a0ef          	jal	8002ae56 <printf>
    80010b74:	00043797          	auipc	a5,0x43
    80010b78:	49d7c783          	lbu	a5,1181(a5) # 80054011 <excpt+0x1>
    80010b7c:	0001c597          	auipc	a1,0x1c
    80010b80:	7fc58593          	addi	a1,a1,2044 # 8002d378 <__func__.0+0x2c0>
    80010b84:	c789                	beqz	a5,80010b8e <illegal_except_9+0x70>
    80010b86:	0001d597          	auipc	a1,0x1d
    80010b8a:	80258593          	addi	a1,a1,-2046 # 8002d388 <__func__.0+0x2d0>
    80010b8e:	0001d517          	auipc	a0,0x1d
    80010b92:	83a50513          	addi	a0,a0,-1990 # 8002d3c8 <__func__.0+0x310>
    80010b96:	2c01a0ef          	jal	8002ae56 <printf>
    80010b9a:	00043797          	auipc	a5,0x43
    80010b9e:	4777c783          	lbu	a5,1143(a5) # 80054011 <excpt+0x1>
    80010ba2:	10079063          	bnez	a5,80010ca2 <illegal_except_9+0x184>
    80010ba6:	4529                	li	a0,10
    80010ba8:	79d180ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010bac:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010bae:	00043417          	auipc	s0,0x43
    80010bb2:	46344403          	lbu	s0,1123(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    80010bb6:	b52f00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010bba:	00043497          	auipc	s1,0x43
    80010bbe:	45648493          	addi	s1,s1,1110 # 80054010 <excpt>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010bc2:	001007b7          	lui	a5,0x100
    80010bc6:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010bca:	450d                	li	a0,3
    80010bcc:	b3cf00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010bd0:	a3cf00ef          	jal	80000e0c <test_setup_except_function>
    80010bd4:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010bd8:	08200593          	li	a1,130
    80010bdc:	00020617          	auipc	a2,0x20
    80010be0:	d5460613          	addi	a2,a2,-684 # 80030930 <__func__.0+0x3878>
    80010be4:	0001c517          	auipc	a0,0x1c
    80010be8:	7cc50513          	addi	a0,a0,1996 # 8002d3b0 <__func__.0+0x2f8>
    80010bec:	26a1a0ef          	jal	8002ae56 <printf>
    80010bf0:	00043797          	auipc	a5,0x43
    80010bf4:	4217c783          	lbu	a5,1057(a5) # 80054011 <excpt+0x1>
    80010bf8:	0001c597          	auipc	a1,0x1c
    80010bfc:	79058593          	addi	a1,a1,1936 # 8002d388 <__func__.0+0x2d0>
    80010c00:	cf89                	beqz	a5,80010c1a <illegal_except_9+0xfc>
    80010c02:	6498                	ld	a4,8(s1)
    80010c04:	4789                	li	a5,2
    80010c06:	0001c597          	auipc	a1,0x1c
    80010c0a:	77258593          	addi	a1,a1,1906 # 8002d378 <__func__.0+0x2c0>
    80010c0e:	00f70663          	beq	a4,a5,80010c1a <illegal_except_9+0xfc>
    80010c12:	0001c597          	auipc	a1,0x1c
    80010c16:	77658593          	addi	a1,a1,1910 # 8002d388 <__func__.0+0x2d0>
    80010c1a:	0001c517          	auipc	a0,0x1c
    80010c1e:	7ae50513          	addi	a0,a0,1966 # 8002d3c8 <__func__.0+0x310>
    80010c22:	2341a0ef          	jal	8002ae56 <printf>
    80010c26:	00043797          	auipc	a5,0x43
    80010c2a:	3eb7c783          	lbu	a5,1003(a5) # 80054011 <excpt+0x1>
    80010c2e:	c789                	beqz	a5,80010c38 <illegal_except_9+0x11a>
    80010c30:	6498                	ld	a4,8(s1)
    80010c32:	4789                	li	a5,2
    80010c34:	00f70c63          	beq	a4,a5,80010c4c <illegal_except_9+0x12e>
    80010c38:	0001c517          	auipc	a0,0x1c
    80010c3c:	79850513          	addi	a0,a0,1944 # 8002d3d0 <__func__.0+0x318>
    80010c40:	2161a0ef          	jal	8002ae56 <printf>
    80010c44:	02900513          	li	a0,41
    80010c48:	6fd180ef          	jal	80029b44 <putchar>
    80010c4c:	4529                	li	a0,10
    80010c4e:	6f7180ef          	jal	80029b44 <putchar>
    80010c52:	e015                	bnez	s0,80010c76 <illegal_except_9+0x158>
    80010c54:	00043417          	auipc	s0,0x43
    80010c58:	3bd44403          	lbu	s0,957(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010c5c:	0001c597          	auipc	a1,0x1c
    80010c60:	72c58593          	addi	a1,a1,1836 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010c64:	cc11                	beqz	s0,80010c80 <illegal_except_9+0x162>
    80010c66:	6498                	ld	a4,8(s1)
    80010c68:	4789                	li	a5,2
    TEST_END();
    80010c6a:	0001c597          	auipc	a1,0x1c
    80010c6e:	70e58593          	addi	a1,a1,1806 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010c72:	00f70763          	beq	a4,a5,80010c80 <illegal_except_9+0x162>
    80010c76:	4401                	li	s0,0
    TEST_END();
    80010c78:	0001c597          	auipc	a1,0x1c
    80010c7c:	71058593          	addi	a1,a1,1808 # 8002d388 <__func__.0+0x2d0>
    80010c80:	0001c517          	auipc	a0,0x1c
    80010c84:	7b050513          	addi	a0,a0,1968 # 8002d430 <__func__.0+0x378>
    80010c88:	1ce1a0ef          	jal	8002ae56 <printf>
    80010c8c:	4511                	li	a0,4
    80010c8e:	a7af00ef          	jal	80000f08 <goto_priv>
    80010c92:	b93f00ef          	jal	80001824 <reset_state>
}
    80010c96:	60e2                	ld	ra,24(sp)
    80010c98:	8522                	mv	a0,s0
    80010c9a:	6442                	ld	s0,16(sp)
    80010c9c:	64a2                	ld	s1,8(sp)
    80010c9e:	6105                	addi	sp,sp,32
    80010ca0:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010ca2:	0001c517          	auipc	a0,0x1c
    80010ca6:	72e50513          	addi	a0,a0,1838 # 8002d3d0 <__func__.0+0x318>
    80010caa:	1ac1a0ef          	jal	8002ae56 <printf>
    80010cae:	02900513          	li	a0,41
    80010cb2:	693180ef          	jal	80029b44 <putchar>
    80010cb6:	bdc5                	j	80010ba6 <illegal_except_9+0x88>

0000000080010cb8 <illegal_except_10>:

bool illegal_except_10() {
    80010cb8:	1101                	addi	sp,sp,-32

    TEST_START();
    80010cba:	0001b597          	auipc	a1,0x1b
    80010cbe:	e9658593          	addi	a1,a1,-362 # 8002bb50 <__func__.5>
    80010cc2:	0001c517          	auipc	a0,0x1c
    80010cc6:	6d650513          	addi	a0,a0,1750 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_10() {
    80010cca:	ec06                	sd	ra,24(sp)
    80010ccc:	e822                	sd	s0,16(sp)
    80010cce:	e426                	sd	s1,8(sp)
    TEST_START();
    80010cd0:	1861a0ef          	jal	8002ae56 <printf>
    80010cd4:	4529                	li	a0,10
    80010cd6:	66f180ef          	jal	80029b44 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80010cda:	4511                	li	a0,4
    80010cdc:	a2cf00ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010ce0:	b45f00ef          	jal	80001824 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010ce4:	001007b7          	lui	a5,0x100
    80010ce8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010cec:	450d                	li	a0,3
    80010cee:	a1af00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010cf2:	91af00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010cf6:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    80010cfa:	08200593          	li	a1,130
    80010cfe:	00020617          	auipc	a2,0x20
    80010d02:	c6a60613          	addi	a2,a2,-918 # 80030968 <__func__.0+0x38b0>
    80010d06:	0001c517          	auipc	a0,0x1c
    80010d0a:	6aa50513          	addi	a0,a0,1706 # 8002d3b0 <__func__.0+0x2f8>
    80010d0e:	1481a0ef          	jal	8002ae56 <printf>
    80010d12:	00043797          	auipc	a5,0x43
    80010d16:	2ff7c783          	lbu	a5,767(a5) # 80054011 <excpt+0x1>
    80010d1a:	00043497          	auipc	s1,0x43
    80010d1e:	2f648493          	addi	s1,s1,758 # 80054010 <excpt>
    80010d22:	0001c597          	auipc	a1,0x1c
    80010d26:	66658593          	addi	a1,a1,1638 # 8002d388 <__func__.0+0x2d0>
    80010d2a:	cf89                	beqz	a5,80010d44 <illegal_except_10+0x8c>
    80010d2c:	6498                	ld	a4,8(s1)
    80010d2e:	4789                	li	a5,2
    80010d30:	0001c597          	auipc	a1,0x1c
    80010d34:	64858593          	addi	a1,a1,1608 # 8002d378 <__func__.0+0x2c0>
    80010d38:	00f70663          	beq	a4,a5,80010d44 <illegal_except_10+0x8c>
    80010d3c:	0001c597          	auipc	a1,0x1c
    80010d40:	64c58593          	addi	a1,a1,1612 # 8002d388 <__func__.0+0x2d0>
    80010d44:	0001c517          	auipc	a0,0x1c
    80010d48:	68450513          	addi	a0,a0,1668 # 8002d3c8 <__func__.0+0x310>
    80010d4c:	10a1a0ef          	jal	8002ae56 <printf>
    80010d50:	00043797          	auipc	a5,0x43
    80010d54:	2c17c783          	lbu	a5,705(a5) # 80054011 <excpt+0x1>
    80010d58:	c789                	beqz	a5,80010d62 <illegal_except_10+0xaa>
    80010d5a:	6498                	ld	a4,8(s1)
    80010d5c:	4789                	li	a5,2
    80010d5e:	00f70c63          	beq	a4,a5,80010d76 <illegal_except_10+0xbe>
    80010d62:	0001c517          	auipc	a0,0x1c
    80010d66:	66e50513          	addi	a0,a0,1646 # 8002d3d0 <__func__.0+0x318>
    80010d6a:	0ec1a0ef          	jal	8002ae56 <printf>
    80010d6e:	02900513          	li	a0,41
    80010d72:	5d3180ef          	jal	80029b44 <putchar>
    80010d76:	4529                	li	a0,10
    80010d78:	5cd180ef          	jal	80029b44 <putchar>
    80010d7c:	00043797          	auipc	a5,0x43
    80010d80:	2957c783          	lbu	a5,661(a5) # 80054011 <excpt+0x1>
    80010d84:	4401                	li	s0,0
    80010d86:	c789                	beqz	a5,80010d90 <illegal_except_10+0xd8>
    80010d88:	6480                	ld	s0,8(s1)
    80010d8a:	1479                	addi	s0,s0,-2
    80010d8c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    80010d90:	4511                	li	a0,4
    80010d92:	976f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010d96:	001007b7          	lui	a5,0x100
    80010d9a:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010d9e:	450d                	li	a0,3
    80010da0:	968f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010da4:	868f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010da8:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010dac:	08200593          	li	a1,130
    80010db0:	00020617          	auipc	a2,0x20
    80010db4:	bf060613          	addi	a2,a2,-1040 # 800309a0 <__func__.0+0x38e8>
    80010db8:	0001c517          	auipc	a0,0x1c
    80010dbc:	5f850513          	addi	a0,a0,1528 # 8002d3b0 <__func__.0+0x2f8>
    80010dc0:	0961a0ef          	jal	8002ae56 <printf>
    80010dc4:	00043797          	auipc	a5,0x43
    80010dc8:	24d7c783          	lbu	a5,589(a5) # 80054011 <excpt+0x1>
    80010dcc:	0001c597          	auipc	a1,0x1c
    80010dd0:	5bc58593          	addi	a1,a1,1468 # 8002d388 <__func__.0+0x2d0>
    80010dd4:	cf89                	beqz	a5,80010dee <illegal_except_10+0x136>
    80010dd6:	6498                	ld	a4,8(s1)
    80010dd8:	4789                	li	a5,2
    80010dda:	0001c597          	auipc	a1,0x1c
    80010dde:	59e58593          	addi	a1,a1,1438 # 8002d378 <__func__.0+0x2c0>
    80010de2:	00f70663          	beq	a4,a5,80010dee <illegal_except_10+0x136>
    80010de6:	0001c597          	auipc	a1,0x1c
    80010dea:	5a258593          	addi	a1,a1,1442 # 8002d388 <__func__.0+0x2d0>
    80010dee:	0001c517          	auipc	a0,0x1c
    80010df2:	5da50513          	addi	a0,a0,1498 # 8002d3c8 <__func__.0+0x310>
    80010df6:	0601a0ef          	jal	8002ae56 <printf>
    80010dfa:	00043797          	auipc	a5,0x43
    80010dfe:	2177c783          	lbu	a5,535(a5) # 80054011 <excpt+0x1>
    80010e02:	c789                	beqz	a5,80010e0c <illegal_except_10+0x154>
    80010e04:	6498                	ld	a4,8(s1)
    80010e06:	4789                	li	a5,2
    80010e08:	00f70c63          	beq	a4,a5,80010e20 <illegal_except_10+0x168>
    80010e0c:	0001c517          	auipc	a0,0x1c
    80010e10:	5c450513          	addi	a0,a0,1476 # 8002d3d0 <__func__.0+0x318>
    80010e14:	0421a0ef          	jal	8002ae56 <printf>
    80010e18:	02900513          	li	a0,41
    80010e1c:	529180ef          	jal	80029b44 <putchar>
    80010e20:	4529                	li	a0,10
    80010e22:	523180ef          	jal	80029b44 <putchar>
    80010e26:	c015                	beqz	s0,80010e4a <illegal_except_10+0x192>
    80010e28:	00043417          	auipc	s0,0x43
    80010e2c:	1e944403          	lbu	s0,489(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010e30:	0001c597          	auipc	a1,0x1c
    80010e34:	55858593          	addi	a1,a1,1368 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010e38:	cc11                	beqz	s0,80010e54 <illegal_except_10+0x19c>
    80010e3a:	6498                	ld	a4,8(s1)
    80010e3c:	4789                	li	a5,2
    TEST_END();
    80010e3e:	0001c597          	auipc	a1,0x1c
    80010e42:	53a58593          	addi	a1,a1,1338 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010e46:	00f70763          	beq	a4,a5,80010e54 <illegal_except_10+0x19c>
    80010e4a:	4401                	li	s0,0
    TEST_END();
    80010e4c:	0001c597          	auipc	a1,0x1c
    80010e50:	53c58593          	addi	a1,a1,1340 # 8002d388 <__func__.0+0x2d0>
    80010e54:	0001c517          	auipc	a0,0x1c
    80010e58:	5dc50513          	addi	a0,a0,1500 # 8002d430 <__func__.0+0x378>
    80010e5c:	7fb190ef          	jal	8002ae56 <printf>
    80010e60:	4511                	li	a0,4
    80010e62:	8a6f00ef          	jal	80000f08 <goto_priv>
    80010e66:	9bff00ef          	jal	80001824 <reset_state>
}
    80010e6a:	60e2                	ld	ra,24(sp)
    80010e6c:	8522                	mv	a0,s0
    80010e6e:	6442                	ld	s0,16(sp)
    80010e70:	64a2                	ld	s1,8(sp)
    80010e72:	6105                	addi	sp,sp,32
    80010e74:	8082                	ret

0000000080010e76 <illegal_except_11>:

bool illegal_except_11() {
    80010e76:	1101                	addi	sp,sp,-32

    TEST_START();
    80010e78:	0001b597          	auipc	a1,0x1b
    80010e7c:	cf058593          	addi	a1,a1,-784 # 8002bb68 <__func__.4>
    80010e80:	0001c517          	auipc	a0,0x1c
    80010e84:	51850513          	addi	a0,a0,1304 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_11() {
    80010e88:	ec06                	sd	ra,24(sp)
    80010e8a:	e822                	sd	s0,16(sp)
    80010e8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80010e8e:	7c9190ef          	jal	8002ae56 <printf>
    80010e92:	4529                	li	a0,10
    80010e94:	4b1180ef          	jal	80029b44 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80010e98:	f75ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010e9c:	4511                	li	a0,4
    80010e9e:	86af00ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010ea2:	983f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80010ea6:	4505                	li	a0,1
    80010ea8:	860f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010eac:	f61ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010eb0:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80010eb4:	08200593          	li	a1,130
    80010eb8:	00020617          	auipc	a2,0x20
    80010ebc:	b2060613          	addi	a2,a2,-1248 # 800309d8 <__func__.0+0x3920>
    80010ec0:	0001c517          	auipc	a0,0x1c
    80010ec4:	4f050513          	addi	a0,a0,1264 # 8002d3b0 <__func__.0+0x2f8>
    80010ec8:	78f190ef          	jal	8002ae56 <printf>
    80010ecc:	00043797          	auipc	a5,0x43
    80010ed0:	1457c783          	lbu	a5,325(a5) # 80054011 <excpt+0x1>
    80010ed4:	00043497          	auipc	s1,0x43
    80010ed8:	13c48493          	addi	s1,s1,316 # 80054010 <excpt>
    80010edc:	0001c597          	auipc	a1,0x1c
    80010ee0:	4ac58593          	addi	a1,a1,1196 # 8002d388 <__func__.0+0x2d0>
    80010ee4:	cf89                	beqz	a5,80010efe <illegal_except_11+0x88>
    80010ee6:	6498                	ld	a4,8(s1)
    80010ee8:	4789                	li	a5,2
    80010eea:	0001c597          	auipc	a1,0x1c
    80010eee:	48e58593          	addi	a1,a1,1166 # 8002d378 <__func__.0+0x2c0>
    80010ef2:	00f70663          	beq	a4,a5,80010efe <illegal_except_11+0x88>
    80010ef6:	0001c597          	auipc	a1,0x1c
    80010efa:	49258593          	addi	a1,a1,1170 # 8002d388 <__func__.0+0x2d0>
    80010efe:	0001c517          	auipc	a0,0x1c
    80010f02:	4ca50513          	addi	a0,a0,1226 # 8002d3c8 <__func__.0+0x310>
    80010f06:	751190ef          	jal	8002ae56 <printf>
    80010f0a:	00043797          	auipc	a5,0x43
    80010f0e:	1077c783          	lbu	a5,263(a5) # 80054011 <excpt+0x1>
    80010f12:	c789                	beqz	a5,80010f1c <illegal_except_11+0xa6>
    80010f14:	6498                	ld	a4,8(s1)
    80010f16:	4789                	li	a5,2
    80010f18:	00f70c63          	beq	a4,a5,80010f30 <illegal_except_11+0xba>
    80010f1c:	0001c517          	auipc	a0,0x1c
    80010f20:	4b450513          	addi	a0,a0,1204 # 8002d3d0 <__func__.0+0x318>
    80010f24:	733190ef          	jal	8002ae56 <printf>
    80010f28:	02900513          	li	a0,41
    80010f2c:	419180ef          	jal	80029b44 <putchar>
    80010f30:	4529                	li	a0,10
    80010f32:	413180ef          	jal	80029b44 <putchar>
    80010f36:	00043797          	auipc	a5,0x43
    80010f3a:	0db7c783          	lbu	a5,219(a5) # 80054011 <excpt+0x1>
    80010f3e:	4401                	li	s0,0
    80010f40:	c789                	beqz	a5,80010f4a <illegal_except_11+0xd4>
    80010f42:	6480                	ld	s0,8(s1)
    80010f44:	1479                	addi	s0,s0,-2
    80010f46:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80010f4a:	ec3ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010f4e:	4511                	li	a0,4
    80010f50:	fb9ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010f54:	8d1f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80010f58:	4505                	li	a0,1
    80010f5a:	fafef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010f5e:	eafef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010f62:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f66:	08200593          	li	a1,130
    80010f6a:	00020617          	auipc	a2,0x20
    80010f6e:	aae60613          	addi	a2,a2,-1362 # 80030a18 <__func__.0+0x3960>
    80010f72:	0001c517          	auipc	a0,0x1c
    80010f76:	43e50513          	addi	a0,a0,1086 # 8002d3b0 <__func__.0+0x2f8>
    80010f7a:	6dd190ef          	jal	8002ae56 <printf>
    80010f7e:	00043797          	auipc	a5,0x43
    80010f82:	0937c783          	lbu	a5,147(a5) # 80054011 <excpt+0x1>
    80010f86:	0001c597          	auipc	a1,0x1c
    80010f8a:	40258593          	addi	a1,a1,1026 # 8002d388 <__func__.0+0x2d0>
    80010f8e:	cf89                	beqz	a5,80010fa8 <illegal_except_11+0x132>
    80010f90:	6498                	ld	a4,8(s1)
    80010f92:	4789                	li	a5,2
    80010f94:	0001c597          	auipc	a1,0x1c
    80010f98:	3e458593          	addi	a1,a1,996 # 8002d378 <__func__.0+0x2c0>
    80010f9c:	00f70663          	beq	a4,a5,80010fa8 <illegal_except_11+0x132>
    80010fa0:	0001c597          	auipc	a1,0x1c
    80010fa4:	3e858593          	addi	a1,a1,1000 # 8002d388 <__func__.0+0x2d0>
    80010fa8:	0001c517          	auipc	a0,0x1c
    80010fac:	42050513          	addi	a0,a0,1056 # 8002d3c8 <__func__.0+0x310>
    80010fb0:	6a7190ef          	jal	8002ae56 <printf>
    80010fb4:	00043797          	auipc	a5,0x43
    80010fb8:	05d7c783          	lbu	a5,93(a5) # 80054011 <excpt+0x1>
    80010fbc:	c789                	beqz	a5,80010fc6 <illegal_except_11+0x150>
    80010fbe:	6498                	ld	a4,8(s1)
    80010fc0:	4789                	li	a5,2
    80010fc2:	00f70c63          	beq	a4,a5,80010fda <illegal_except_11+0x164>
    80010fc6:	0001c517          	auipc	a0,0x1c
    80010fca:	40a50513          	addi	a0,a0,1034 # 8002d3d0 <__func__.0+0x318>
    80010fce:	689190ef          	jal	8002ae56 <printf>
    80010fd2:	02900513          	li	a0,41
    80010fd6:	36f180ef          	jal	80029b44 <putchar>
    80010fda:	4529                	li	a0,10
    80010fdc:	369180ef          	jal	80029b44 <putchar>
    80010fe0:	c015                	beqz	s0,80011004 <illegal_except_11+0x18e>
    80010fe2:	00043417          	auipc	s0,0x43
    80010fe6:	02f44403          	lbu	s0,47(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010fea:	0001c597          	auipc	a1,0x1c
    80010fee:	39e58593          	addi	a1,a1,926 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010ff2:	cc11                	beqz	s0,8001100e <illegal_except_11+0x198>
    80010ff4:	6498                	ld	a4,8(s1)
    80010ff6:	4789                	li	a5,2
    TEST_END();
    80010ff8:	0001c597          	auipc	a1,0x1c
    80010ffc:	38058593          	addi	a1,a1,896 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80011000:	00f70763          	beq	a4,a5,8001100e <illegal_except_11+0x198>
    80011004:	4401                	li	s0,0
    TEST_END();
    80011006:	0001c597          	auipc	a1,0x1c
    8001100a:	38258593          	addi	a1,a1,898 # 8002d388 <__func__.0+0x2d0>
    8001100e:	0001c517          	auipc	a0,0x1c
    80011012:	42250513          	addi	a0,a0,1058 # 8002d430 <__func__.0+0x378>
    80011016:	641190ef          	jal	8002ae56 <printf>
    8001101a:	4511                	li	a0,4
    8001101c:	eedef0ef          	jal	80000f08 <goto_priv>
    80011020:	805f00ef          	jal	80001824 <reset_state>
}
    80011024:	60e2                	ld	ra,24(sp)
    80011026:	8522                	mv	a0,s0
    80011028:	6442                	ld	s0,16(sp)
    8001102a:	64a2                	ld	s1,8(sp)
    8001102c:	6105                	addi	sp,sp,32
    8001102e:	8082                	ret

0000000080011030 <illegal_except_12>:

bool illegal_except_12() {
    80011030:	1101                	addi	sp,sp,-32

    TEST_START();
    80011032:	0001b597          	auipc	a1,0x1b
    80011036:	b4e58593          	addi	a1,a1,-1202 # 8002bb80 <__func__.3>
    8001103a:	0001c517          	auipc	a0,0x1c
    8001103e:	35e50513          	addi	a0,a0,862 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_12() {
    80011042:	ec06                	sd	ra,24(sp)
    80011044:	e822                	sd	s0,16(sp)
    80011046:	e426                	sd	s1,8(sp)
    TEST_START();
    80011048:	60f190ef          	jal	8002ae56 <printf>
    8001104c:	4529                	li	a0,10
    8001104e:	2f7180ef          	jal	80029b44 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    80011052:	dbbef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011056:	4511                	li	a0,4
    80011058:	eb1ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    8001105c:	fc8f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80011060:	4505                	li	a0,1
    80011062:	ea7ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011066:	da7ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001106a:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8001106e:	08200593          	li	a1,130
    80011072:	00020617          	auipc	a2,0x20
    80011076:	9e660613          	addi	a2,a2,-1562 # 80030a58 <__func__.0+0x39a0>
    8001107a:	0001c517          	auipc	a0,0x1c
    8001107e:	33650513          	addi	a0,a0,822 # 8002d3b0 <__func__.0+0x2f8>
    80011082:	5d5190ef          	jal	8002ae56 <printf>
    80011086:	00043797          	auipc	a5,0x43
    8001108a:	f8b7c783          	lbu	a5,-117(a5) # 80054011 <excpt+0x1>
    8001108e:	00043497          	auipc	s1,0x43
    80011092:	f8248493          	addi	s1,s1,-126 # 80054010 <excpt>
    80011096:	0001c597          	auipc	a1,0x1c
    8001109a:	2f258593          	addi	a1,a1,754 # 8002d388 <__func__.0+0x2d0>
    8001109e:	cf89                	beqz	a5,800110b8 <illegal_except_12+0x88>
    800110a0:	6498                	ld	a4,8(s1)
    800110a2:	4789                	li	a5,2
    800110a4:	0001c597          	auipc	a1,0x1c
    800110a8:	2d458593          	addi	a1,a1,724 # 8002d378 <__func__.0+0x2c0>
    800110ac:	00f70663          	beq	a4,a5,800110b8 <illegal_except_12+0x88>
    800110b0:	0001c597          	auipc	a1,0x1c
    800110b4:	2d858593          	addi	a1,a1,728 # 8002d388 <__func__.0+0x2d0>
    800110b8:	0001c517          	auipc	a0,0x1c
    800110bc:	31050513          	addi	a0,a0,784 # 8002d3c8 <__func__.0+0x310>
    800110c0:	597190ef          	jal	8002ae56 <printf>
    800110c4:	00043797          	auipc	a5,0x43
    800110c8:	f4d7c783          	lbu	a5,-179(a5) # 80054011 <excpt+0x1>
    800110cc:	c789                	beqz	a5,800110d6 <illegal_except_12+0xa6>
    800110ce:	6498                	ld	a4,8(s1)
    800110d0:	4789                	li	a5,2
    800110d2:	00f70c63          	beq	a4,a5,800110ea <illegal_except_12+0xba>
    800110d6:	0001c517          	auipc	a0,0x1c
    800110da:	2fa50513          	addi	a0,a0,762 # 8002d3d0 <__func__.0+0x318>
    800110de:	579190ef          	jal	8002ae56 <printf>
    800110e2:	02900513          	li	a0,41
    800110e6:	25f180ef          	jal	80029b44 <putchar>
    800110ea:	4529                	li	a0,10
    800110ec:	259180ef          	jal	80029b44 <putchar>
    800110f0:	00043797          	auipc	a5,0x43
    800110f4:	f217c783          	lbu	a5,-223(a5) # 80054011 <excpt+0x1>
    800110f8:	4401                	li	s0,0
    800110fa:	c789                	beqz	a5,80011104 <illegal_except_12+0xd4>
    800110fc:	6480                	ld	s0,8(s1)
    800110fe:	1479                	addi	s0,s0,-2
    80011100:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011104:	d09ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011108:	4511                	li	a0,4
    8001110a:	dffef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    8001110e:	f16f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    80011112:	4505                	li	a0,1
    80011114:	df5ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011118:	cf5ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001111c:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011120:	08200593          	li	a1,130
    80011124:	00020617          	auipc	a2,0x20
    80011128:	97460613          	addi	a2,a2,-1676 # 80030a98 <__func__.0+0x39e0>
    8001112c:	0001c517          	auipc	a0,0x1c
    80011130:	28450513          	addi	a0,a0,644 # 8002d3b0 <__func__.0+0x2f8>
    80011134:	523190ef          	jal	8002ae56 <printf>
    80011138:	00043797          	auipc	a5,0x43
    8001113c:	ed97c783          	lbu	a5,-295(a5) # 80054011 <excpt+0x1>
    80011140:	0001c597          	auipc	a1,0x1c
    80011144:	24858593          	addi	a1,a1,584 # 8002d388 <__func__.0+0x2d0>
    80011148:	cf89                	beqz	a5,80011162 <illegal_except_12+0x132>
    8001114a:	6498                	ld	a4,8(s1)
    8001114c:	4789                	li	a5,2
    8001114e:	0001c597          	auipc	a1,0x1c
    80011152:	22a58593          	addi	a1,a1,554 # 8002d378 <__func__.0+0x2c0>
    80011156:	00f70663          	beq	a4,a5,80011162 <illegal_except_12+0x132>
    8001115a:	0001c597          	auipc	a1,0x1c
    8001115e:	22e58593          	addi	a1,a1,558 # 8002d388 <__func__.0+0x2d0>
    80011162:	0001c517          	auipc	a0,0x1c
    80011166:	26650513          	addi	a0,a0,614 # 8002d3c8 <__func__.0+0x310>
    8001116a:	4ed190ef          	jal	8002ae56 <printf>
    8001116e:	00043797          	auipc	a5,0x43
    80011172:	ea37c783          	lbu	a5,-349(a5) # 80054011 <excpt+0x1>
    80011176:	c789                	beqz	a5,80011180 <illegal_except_12+0x150>
    80011178:	6498                	ld	a4,8(s1)
    8001117a:	4789                	li	a5,2
    8001117c:	00f70c63          	beq	a4,a5,80011194 <illegal_except_12+0x164>
    80011180:	0001c517          	auipc	a0,0x1c
    80011184:	25050513          	addi	a0,a0,592 # 8002d3d0 <__func__.0+0x318>
    80011188:	4cf190ef          	jal	8002ae56 <printf>
    8001118c:	02900513          	li	a0,41
    80011190:	1b5180ef          	jal	80029b44 <putchar>
    80011194:	4529                	li	a0,10
    80011196:	1af180ef          	jal	80029b44 <putchar>
    8001119a:	c801                	beqz	s0,800111aa <illegal_except_12+0x17a>
    8001119c:	00043797          	auipc	a5,0x43
    800111a0:	e757c783          	lbu	a5,-395(a5) # 80054011 <excpt+0x1>
    800111a4:	4401                	li	s0,0
    800111a6:	0e079563          	bnez	a5,80011290 <illegal_except_12+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    800111aa:	c63ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800111ae:	4511                	li	a0,4
    800111b0:	d59ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    800111b4:	e70f00ef          	jal	80001824 <reset_state>
    goto_priv(PRIV_HU);
    800111b8:	4505                	li	a0,1
    800111ba:	d4fef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800111be:	c4fef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800111c2:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111c6:	08200593          	li	a1,130
    800111ca:	00020617          	auipc	a2,0x20
    800111ce:	90e60613          	addi	a2,a2,-1778 # 80030ad8 <__func__.0+0x3a20>
    800111d2:	0001c517          	auipc	a0,0x1c
    800111d6:	1de50513          	addi	a0,a0,478 # 8002d3b0 <__func__.0+0x2f8>
    800111da:	47d190ef          	jal	8002ae56 <printf>
    800111de:	00043797          	auipc	a5,0x43
    800111e2:	e337c783          	lbu	a5,-461(a5) # 80054011 <excpt+0x1>
    800111e6:	0001c597          	auipc	a1,0x1c
    800111ea:	1a258593          	addi	a1,a1,418 # 8002d388 <__func__.0+0x2d0>
    800111ee:	cf89                	beqz	a5,80011208 <illegal_except_12+0x1d8>
    800111f0:	6498                	ld	a4,8(s1)
    800111f2:	4789                	li	a5,2
    800111f4:	0001c597          	auipc	a1,0x1c
    800111f8:	18458593          	addi	a1,a1,388 # 8002d378 <__func__.0+0x2c0>
    800111fc:	00f70663          	beq	a4,a5,80011208 <illegal_except_12+0x1d8>
    80011200:	0001c597          	auipc	a1,0x1c
    80011204:	18858593          	addi	a1,a1,392 # 8002d388 <__func__.0+0x2d0>
    80011208:	0001c517          	auipc	a0,0x1c
    8001120c:	1c050513          	addi	a0,a0,448 # 8002d3c8 <__func__.0+0x310>
    80011210:	447190ef          	jal	8002ae56 <printf>
    80011214:	00043797          	auipc	a5,0x43
    80011218:	dfd7c783          	lbu	a5,-515(a5) # 80054011 <excpt+0x1>
    8001121c:	c789                	beqz	a5,80011226 <illegal_except_12+0x1f6>
    8001121e:	6498                	ld	a4,8(s1)
    80011220:	4789                	li	a5,2
    80011222:	00f70c63          	beq	a4,a5,8001123a <illegal_except_12+0x20a>
    80011226:	0001c517          	auipc	a0,0x1c
    8001122a:	1aa50513          	addi	a0,a0,426 # 8002d3d0 <__func__.0+0x318>
    8001122e:	429190ef          	jal	8002ae56 <printf>
    80011232:	02900513          	li	a0,41
    80011236:	10f180ef          	jal	80029b44 <putchar>
    8001123a:	4529                	li	a0,10
    8001123c:	109180ef          	jal	80029b44 <putchar>
    80011240:	c015                	beqz	s0,80011264 <illegal_except_12+0x234>
    80011242:	00043417          	auipc	s0,0x43
    80011246:	dcf44403          	lbu	s0,-561(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001124a:	0001c597          	auipc	a1,0x1c
    8001124e:	13e58593          	addi	a1,a1,318 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011252:	cc11                	beqz	s0,8001126e <illegal_except_12+0x23e>
    80011254:	6498                	ld	a4,8(s1)
    80011256:	4789                	li	a5,2
    TEST_END();
    80011258:	0001c597          	auipc	a1,0x1c
    8001125c:	12058593          	addi	a1,a1,288 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011260:	00f70763          	beq	a4,a5,8001126e <illegal_except_12+0x23e>
    80011264:	4401                	li	s0,0
    TEST_END();
    80011266:	0001c597          	auipc	a1,0x1c
    8001126a:	12258593          	addi	a1,a1,290 # 8002d388 <__func__.0+0x2d0>
    8001126e:	0001c517          	auipc	a0,0x1c
    80011272:	1c250513          	addi	a0,a0,450 # 8002d430 <__func__.0+0x378>
    80011276:	3e1190ef          	jal	8002ae56 <printf>
    8001127a:	4511                	li	a0,4
    8001127c:	c8def0ef          	jal	80000f08 <goto_priv>
    80011280:	da4f00ef          	jal	80001824 <reset_state>
}
    80011284:	60e2                	ld	ra,24(sp)
    80011286:	8522                	mv	a0,s0
    80011288:	6442                	ld	s0,16(sp)
    8001128a:	64a2                	ld	s1,8(sp)
    8001128c:	6105                	addi	sp,sp,32
    8001128e:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011290:	6480                	ld	s0,8(s1)
    80011292:	1479                	addi	s0,s0,-2
    80011294:	00143413          	seqz	s0,s0
    80011298:	bf09                	j	800111aa <illegal_except_12+0x17a>

000000008001129a <illegal_except_13>:


bool illegal_except_13() {
    8001129a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001129c:	0001b597          	auipc	a1,0x1b
    800112a0:	8fc58593          	addi	a1,a1,-1796 # 8002bb98 <__func__.2>
    800112a4:	0001c517          	auipc	a0,0x1c
    800112a8:	0f450513          	addi	a0,a0,244 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_13() {
    800112ac:	ec06                	sd	ra,24(sp)
    800112ae:	e822                	sd	s0,16(sp)
    800112b0:	e426                	sd	s1,8(sp)
    TEST_START();
    800112b2:	3a5190ef          	jal	8002ae56 <printf>
    800112b6:	4529                	li	a0,10
    800112b8:	08d180ef          	jal	80029b44 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    800112bc:	b51ef0ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    800112c0:	450d                	li	a0,3
    800112c2:	c47ef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    800112c6:	18005073          	csrwi	satp,0
    asm volatile(
    800112ca:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    800112ce:	00043597          	auipc	a1,0x43
    800112d2:	d435c583          	lbu	a1,-701(a1) # 80054011 <excpt+0x1>
    800112d6:	00020517          	auipc	a0,0x20
    800112da:	84250513          	addi	a0,a0,-1982 # 80030b18 <__func__.0+0x3a60>
    800112de:	00043497          	auipc	s1,0x43
    800112e2:	d3248493          	addi	s1,s1,-718 # 80054010 <excpt>
    800112e6:	371190ef          	jal	8002ae56 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112ea:	08200593          	li	a1,130
    800112ee:	00020617          	auipc	a2,0x20
    800112f2:	83260613          	addi	a2,a2,-1998 # 80030b20 <__func__.0+0x3a68>
    800112f6:	0001c517          	auipc	a0,0x1c
    800112fa:	0ba50513          	addi	a0,a0,186 # 8002d3b0 <__func__.0+0x2f8>
    800112fe:	359190ef          	jal	8002ae56 <printf>
    80011302:	00043797          	auipc	a5,0x43
    80011306:	d0f7c783          	lbu	a5,-753(a5) # 80054011 <excpt+0x1>
    8001130a:	0001c597          	auipc	a1,0x1c
    8001130e:	07e58593          	addi	a1,a1,126 # 8002d388 <__func__.0+0x2d0>
    80011312:	cf89                	beqz	a5,8001132c <illegal_except_13+0x92>
    80011314:	6498                	ld	a4,8(s1)
    80011316:	4789                	li	a5,2
    80011318:	0001c597          	auipc	a1,0x1c
    8001131c:	06058593          	addi	a1,a1,96 # 8002d378 <__func__.0+0x2c0>
    80011320:	00f70663          	beq	a4,a5,8001132c <illegal_except_13+0x92>
    80011324:	0001c597          	auipc	a1,0x1c
    80011328:	06458593          	addi	a1,a1,100 # 8002d388 <__func__.0+0x2d0>
    8001132c:	0001c517          	auipc	a0,0x1c
    80011330:	09c50513          	addi	a0,a0,156 # 8002d3c8 <__func__.0+0x310>
    80011334:	323190ef          	jal	8002ae56 <printf>
    80011338:	00043797          	auipc	a5,0x43
    8001133c:	cd97c783          	lbu	a5,-807(a5) # 80054011 <excpt+0x1>
    80011340:	c789                	beqz	a5,8001134a <illegal_except_13+0xb0>
    80011342:	6498                	ld	a4,8(s1)
    80011344:	4789                	li	a5,2
    80011346:	00f70c63          	beq	a4,a5,8001135e <illegal_except_13+0xc4>
    8001134a:	0001c517          	auipc	a0,0x1c
    8001134e:	08650513          	addi	a0,a0,134 # 8002d3d0 <__func__.0+0x318>
    80011352:	305190ef          	jal	8002ae56 <printf>
    80011356:	02900513          	li	a0,41
    8001135a:	7ea180ef          	jal	80029b44 <putchar>
    8001135e:	4529                	li	a0,10
    80011360:	7e4180ef          	jal	80029b44 <putchar>
    80011364:	00043417          	auipc	s0,0x43
    80011368:	cad44403          	lbu	s0,-851(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001136c:	0001c597          	auipc	a1,0x1c
    80011370:	01c58593          	addi	a1,a1,28 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011374:	cc11                	beqz	s0,80011390 <illegal_except_13+0xf6>
    80011376:	6498                	ld	a4,8(s1)
    80011378:	4789                	li	a5,2
    TEST_END();
    8001137a:	0001c597          	auipc	a1,0x1c
    8001137e:	ffe58593          	addi	a1,a1,-2 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011382:	00f70763          	beq	a4,a5,80011390 <illegal_except_13+0xf6>
    80011386:	4401                	li	s0,0
    TEST_END();
    80011388:	0001c597          	auipc	a1,0x1c
    8001138c:	00058593          	mv	a1,a1
    80011390:	0001c517          	auipc	a0,0x1c
    80011394:	0a050513          	addi	a0,a0,160 # 8002d430 <__func__.0+0x378>
    80011398:	2bf190ef          	jal	8002ae56 <printf>
    8001139c:	4511                	li	a0,4
    8001139e:	b6bef0ef          	jal	80000f08 <goto_priv>
    800113a2:	c82f00ef          	jal	80001824 <reset_state>
}
    800113a6:	60e2                	ld	ra,24(sp)
    800113a8:	8522                	mv	a0,s0
    800113aa:	6442                	ld	s0,16(sp)
    800113ac:	64a2                	ld	s1,8(sp)
    800113ae:	6105                	addi	sp,sp,32
    800113b0:	8082                	ret

00000000800113b2 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    800113b2:	1101                	addi	sp,sp,-32

    TEST_START();
    800113b4:	0001a597          	auipc	a1,0x1a
    800113b8:	7fc58593          	addi	a1,a1,2044 # 8002bbb0 <__func__.1>
    800113bc:	0001c517          	auipc	a0,0x1c
    800113c0:	fdc50513          	addi	a0,a0,-36 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_14() {
    800113c4:	ec06                	sd	ra,24(sp)
    800113c6:	e822                	sd	s0,16(sp)
    800113c8:	e426                	sd	s1,8(sp)
    TEST_START();
    800113ca:	28d190ef          	jal	8002ae56 <printf>
    800113ce:	4529                	li	a0,10
    800113d0:	774180ef          	jal	80029b44 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    800113d4:	a39ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800113d8:	4511                	li	a0,4
    800113da:	b2fef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    800113de:	004007b7          	lui	a5,0x400
    800113e2:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800113e6:	450d                	li	a0,3
    800113e8:	b21ef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    800113ec:	4501                	li	a0,0
    800113ee:	a3bef0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800113f2:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800113f6:	08200593          	li	a1,130
    800113fa:	0001f617          	auipc	a2,0x1f
    800113fe:	77660613          	addi	a2,a2,1910 # 80030b70 <__func__.0+0x3ab8>
    80011402:	0001c517          	auipc	a0,0x1c
    80011406:	fae50513          	addi	a0,a0,-82 # 8002d3b0 <__func__.0+0x2f8>
    8001140a:	24d190ef          	jal	8002ae56 <printf>
    8001140e:	00043797          	auipc	a5,0x43
    80011412:	c037c783          	lbu	a5,-1021(a5) # 80054011 <excpt+0x1>
    80011416:	00043497          	auipc	s1,0x43
    8001141a:	bfa48493          	addi	s1,s1,-1030 # 80054010 <excpt>
    8001141e:	0001c597          	auipc	a1,0x1c
    80011422:	f6a58593          	addi	a1,a1,-150 # 8002d388 <__func__.0+0x2d0>
    80011426:	cf89                	beqz	a5,80011440 <illegal_except_14+0x8e>
    80011428:	6498                	ld	a4,8(s1)
    8001142a:	4789                	li	a5,2
    8001142c:	0001c597          	auipc	a1,0x1c
    80011430:	f4c58593          	addi	a1,a1,-180 # 8002d378 <__func__.0+0x2c0>
    80011434:	00f70663          	beq	a4,a5,80011440 <illegal_except_14+0x8e>
    80011438:	0001c597          	auipc	a1,0x1c
    8001143c:	f5058593          	addi	a1,a1,-176 # 8002d388 <__func__.0+0x2d0>
    80011440:	0001c517          	auipc	a0,0x1c
    80011444:	f8850513          	addi	a0,a0,-120 # 8002d3c8 <__func__.0+0x310>
    80011448:	20f190ef          	jal	8002ae56 <printf>
    8001144c:	00043797          	auipc	a5,0x43
    80011450:	bc57c783          	lbu	a5,-1083(a5) # 80054011 <excpt+0x1>
    80011454:	c789                	beqz	a5,8001145e <illegal_except_14+0xac>
    80011456:	6498                	ld	a4,8(s1)
    80011458:	4789                	li	a5,2
    8001145a:	00f70c63          	beq	a4,a5,80011472 <illegal_except_14+0xc0>
    8001145e:	0001c517          	auipc	a0,0x1c
    80011462:	f7250513          	addi	a0,a0,-142 # 8002d3d0 <__func__.0+0x318>
    80011466:	1f1190ef          	jal	8002ae56 <printf>
    8001146a:	02900513          	li	a0,41
    8001146e:	6d6180ef          	jal	80029b44 <putchar>
    80011472:	4529                	li	a0,10
    80011474:	6d0180ef          	jal	80029b44 <putchar>
    80011478:	00043417          	auipc	s0,0x43
    8001147c:	b9944403          	lbu	s0,-1127(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011480:	0001c597          	auipc	a1,0x1c
    80011484:	f0858593          	addi	a1,a1,-248 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011488:	cc11                	beqz	s0,800114a4 <illegal_except_14+0xf2>
    8001148a:	6498                	ld	a4,8(s1)
    8001148c:	4789                	li	a5,2
    TEST_END();
    8001148e:	0001c597          	auipc	a1,0x1c
    80011492:	eea58593          	addi	a1,a1,-278 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011496:	00f70763          	beq	a4,a5,800114a4 <illegal_except_14+0xf2>
    8001149a:	4401                	li	s0,0
    TEST_END();
    8001149c:	0001c597          	auipc	a1,0x1c
    800114a0:	eec58593          	addi	a1,a1,-276 # 8002d388 <__func__.0+0x2d0>
    800114a4:	0001c517          	auipc	a0,0x1c
    800114a8:	f8c50513          	addi	a0,a0,-116 # 8002d430 <__func__.0+0x378>
    800114ac:	1ab190ef          	jal	8002ae56 <printf>
    800114b0:	4511                	li	a0,4
    800114b2:	a57ef0ef          	jal	80000f08 <goto_priv>
    800114b6:	b6ef00ef          	jal	80001824 <reset_state>

}
    800114ba:	60e2                	ld	ra,24(sp)
    800114bc:	8522                	mv	a0,s0
    800114be:	6442                	ld	s0,16(sp)
    800114c0:	64a2                	ld	s1,8(sp)
    800114c2:	6105                	addi	sp,sp,32
    800114c4:	8082                	ret

00000000800114c6 <illegal_except_15>:

bool illegal_except_15() {
    800114c6:	1141                	addi	sp,sp,-16

    TEST_START();
    800114c8:	0001a597          	auipc	a1,0x1a
    800114cc:	70058593          	addi	a1,a1,1792 # 8002bbc8 <__func__.0>
    800114d0:	0001c517          	auipc	a0,0x1c
    800114d4:	ec850513          	addi	a0,a0,-312 # 8002d398 <__func__.0+0x2e0>
bool illegal_except_15() {
    800114d8:	e406                	sd	ra,8(sp)
    800114da:	e022                	sd	s0,0(sp)
    TEST_START();
    800114dc:	17b190ef          	jal	8002ae56 <printf>
    800114e0:	4529                	li	a0,10
    800114e2:	662180ef          	jal	80029b44 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    800114e6:	927ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800114ea:	4511                	li	a0,4
    800114ec:	a1def0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    800114f0:	004007b7          	lui	a5,0x400
    800114f4:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800114f8:	450d                	li	a0,3
    800114fa:	a0fef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800114fe:	4509                	li	a0,2
    80011500:	929ef0ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    80011504:	00000297          	auipc	t0,0x0
    80011508:	01028293          	addi	t0,t0,16 # 80011514 <illegal_except_15+0x4e>
    8001150c:	14129073          	csrw	sepc,t0
    80011510:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    80011514:	08200593          	li	a1,130
    80011518:	0001f617          	auipc	a2,0x1f
    8001151c:	68860613          	addi	a2,a2,1672 # 80030ba0 <__func__.0+0x3ae8>
    80011520:	0001c517          	auipc	a0,0x1c
    80011524:	e9050513          	addi	a0,a0,-368 # 8002d3b0 <__func__.0+0x2f8>
    80011528:	12f190ef          	jal	8002ae56 <printf>
    8001152c:	00043797          	auipc	a5,0x43
    80011530:	ae57c783          	lbu	a5,-1307(a5) # 80054011 <excpt+0x1>
    80011534:	0001c597          	auipc	a1,0x1c
    80011538:	e4458593          	addi	a1,a1,-444 # 8002d378 <__func__.0+0x2c0>
    8001153c:	c789                	beqz	a5,80011546 <illegal_except_15+0x80>
    8001153e:	0001c597          	auipc	a1,0x1c
    80011542:	e4a58593          	addi	a1,a1,-438 # 8002d388 <__func__.0+0x2d0>
    80011546:	0001c517          	auipc	a0,0x1c
    8001154a:	e8250513          	addi	a0,a0,-382 # 8002d3c8 <__func__.0+0x310>
    8001154e:	109190ef          	jal	8002ae56 <printf>
    80011552:	00043797          	auipc	a5,0x43
    80011556:	abf7c783          	lbu	a5,-1345(a5) # 80054011 <excpt+0x1>
    8001155a:	e7a1                	bnez	a5,800115a2 <illegal_except_15+0xdc>
    8001155c:	4529                	li	a0,10
    8001155e:	5e6180ef          	jal	80029b44 <putchar>
    80011562:	00043797          	auipc	a5,0x43
    80011566:	aaf7c783          	lbu	a5,-1361(a5) # 80054011 <excpt+0x1>
    8001156a:	e795                	bnez	a5,80011596 <illegal_except_15+0xd0>
    8001156c:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8001156e:	0001c597          	auipc	a1,0x1c
    80011572:	e0a58593          	addi	a1,a1,-502 # 8002d378 <__func__.0+0x2c0>
    80011576:	0001c517          	auipc	a0,0x1c
    8001157a:	eba50513          	addi	a0,a0,-326 # 8002d430 <__func__.0+0x378>
    8001157e:	0d9190ef          	jal	8002ae56 <printf>
    80011582:	4511                	li	a0,4
    80011584:	985ef0ef          	jal	80000f08 <goto_priv>
    80011588:	a9cf00ef          	jal	80001824 <reset_state>

}
    8001158c:	60a2                	ld	ra,8(sp)
    8001158e:	8522                	mv	a0,s0
    80011590:	6402                	ld	s0,0(sp)
    80011592:	0141                	addi	sp,sp,16
    80011594:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    80011596:	4401                	li	s0,0
    TEST_END();
    80011598:	0001c597          	auipc	a1,0x1c
    8001159c:	df058593          	addi	a1,a1,-528 # 8002d388 <__func__.0+0x2d0>
    800115a0:	bfd9                	j	80011576 <illegal_except_15+0xb0>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800115a2:	0001c517          	auipc	a0,0x1c
    800115a6:	e2e50513          	addi	a0,a0,-466 # 8002d3d0 <__func__.0+0x318>
    800115aa:	0ad190ef          	jal	8002ae56 <printf>
    800115ae:	02900513          	li	a0,41
    800115b2:	592180ef          	jal	80029b44 <putchar>
    800115b6:	b75d                	j	8001155c <illegal_except_15+0x96>

00000000800115b8 <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    800115b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800115ba:	0001a597          	auipc	a1,0x1a
    800115be:	62658593          	addi	a1,a1,1574 # 8002bbe0 <__func__.2>
    800115c2:	0001c517          	auipc	a0,0x1c
    800115c6:	dd650513          	addi	a0,a0,-554 # 8002d398 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    800115ca:	ec06                	sd	ra,24(sp)
    800115cc:	e822                	sd	s0,16(sp)
    800115ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800115d0:	087190ef          	jal	8002ae56 <printf>
    800115d4:	4529                	li	a0,10
    800115d6:	56e180ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    800115da:	833ef0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    800115de:	4511                	li	a0,4
    800115e0:	929ef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    800115e4:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800115e8:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    800115ec:	6785                	lui	a5,0x1
    800115ee:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800115f2:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    800115f6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800115fa:	4511                	li	a0,4
    800115fc:	90def0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011600:	08200593          	li	a1,130
    80011604:	0001f617          	auipc	a2,0x1f
    80011608:	5cc60613          	addi	a2,a2,1484 # 80030bd0 <__func__.0+0x3b18>
    8001160c:	0001c517          	auipc	a0,0x1c
    80011610:	da450513          	addi	a0,a0,-604 # 8002d3b0 <__func__.0+0x2f8>
    80011614:	043190ef          	jal	8002ae56 <printf>
    80011618:	00043797          	auipc	a5,0x43
    8001161c:	9f97c783          	lbu	a5,-1543(a5) # 80054011 <excpt+0x1>
    80011620:	00043497          	auipc	s1,0x43
    80011624:	9f048493          	addi	s1,s1,-1552 # 80054010 <excpt>
    80011628:	0001c597          	auipc	a1,0x1c
    8001162c:	d6058593          	addi	a1,a1,-672 # 8002d388 <__func__.0+0x2d0>
    80011630:	cf99                	beqz	a5,8001164e <external_interrupt_MEI+0x96>
    80011632:	57fd                	li	a5,-1
    80011634:	6498                	ld	a4,8(s1)
    80011636:	17fe                	slli	a5,a5,0x3f
    80011638:	07ad                	addi	a5,a5,11
    8001163a:	0001c597          	auipc	a1,0x1c
    8001163e:	d3e58593          	addi	a1,a1,-706 # 8002d378 <__func__.0+0x2c0>
    80011642:	00f70663          	beq	a4,a5,8001164e <external_interrupt_MEI+0x96>
    80011646:	0001c597          	auipc	a1,0x1c
    8001164a:	d4258593          	addi	a1,a1,-702 # 8002d388 <__func__.0+0x2d0>
    8001164e:	0001c517          	auipc	a0,0x1c
    80011652:	d7a50513          	addi	a0,a0,-646 # 8002d3c8 <__func__.0+0x310>
    80011656:	001190ef          	jal	8002ae56 <printf>
    8001165a:	00043797          	auipc	a5,0x43
    8001165e:	9b77c783          	lbu	a5,-1609(a5) # 80054011 <excpt+0x1>
    80011662:	c799                	beqz	a5,80011670 <external_interrupt_MEI+0xb8>
    80011664:	57fd                	li	a5,-1
    80011666:	6498                	ld	a4,8(s1)
    80011668:	17fe                	slli	a5,a5,0x3f
    8001166a:	07ad                	addi	a5,a5,11
    8001166c:	00f70c63          	beq	a4,a5,80011684 <external_interrupt_MEI+0xcc>
    80011670:	0001c517          	auipc	a0,0x1c
    80011674:	d6050513          	addi	a0,a0,-672 # 8002d3d0 <__func__.0+0x318>
    80011678:	7de190ef          	jal	8002ae56 <printf>
    8001167c:	02900513          	li	a0,41
    80011680:	4c4180ef          	jal	80029b44 <putchar>
    80011684:	4529                	li	a0,10
    80011686:	4be180ef          	jal	80029b44 <putchar>
    8001168a:	00043797          	auipc	a5,0x43
    8001168e:	9877c783          	lbu	a5,-1657(a5) # 80054011 <excpt+0x1>
    80011692:	4401                	li	s0,0
    80011694:	c799                	beqz	a5,800116a2 <external_interrupt_MEI+0xea>
    80011696:	6480                	ld	s0,8(s1)
    80011698:	57ad                	li	a5,-21
    8001169a:	8385                	srli	a5,a5,0x1
    8001169c:	943e                	add	s0,s0,a5
    8001169e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    800116a2:	f6aef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800116a6:	4511                	li	a0,4
    800116a8:	861ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800116ac:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800116b0:	6785                	lui	a5,0x1
    800116b2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800116b6:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800116ba:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800116be:	4511                	li	a0,4
    800116c0:	849ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    800116c4:	08200593          	li	a1,130
    800116c8:	0001f617          	auipc	a2,0x1f
    800116cc:	56860613          	addi	a2,a2,1384 # 80030c30 <__func__.0+0x3b78>
    800116d0:	0001c517          	auipc	a0,0x1c
    800116d4:	ce050513          	addi	a0,a0,-800 # 8002d3b0 <__func__.0+0x2f8>
    800116d8:	77e190ef          	jal	8002ae56 <printf>
    800116dc:	00043797          	auipc	a5,0x43
    800116e0:	9357c783          	lbu	a5,-1739(a5) # 80054011 <excpt+0x1>
    800116e4:	0001c597          	auipc	a1,0x1c
    800116e8:	ca458593          	addi	a1,a1,-860 # 8002d388 <__func__.0+0x2d0>
    800116ec:	e789                	bnez	a5,800116f6 <external_interrupt_MEI+0x13e>
    800116ee:	0001c597          	auipc	a1,0x1c
    800116f2:	c8a58593          	addi	a1,a1,-886 # 8002d378 <__func__.0+0x2c0>
    800116f6:	0001c517          	auipc	a0,0x1c
    800116fa:	cd250513          	addi	a0,a0,-814 # 8002d3c8 <__func__.0+0x310>
    800116fe:	758190ef          	jal	8002ae56 <printf>
    80011702:	00043797          	auipc	a5,0x43
    80011706:	90f7c783          	lbu	a5,-1777(a5) # 80054011 <excpt+0x1>
    8001170a:	180796e3          	bnez	a5,80012096 <external_interrupt_MEI+0xade>
    8001170e:	4529                	li	a0,10
    80011710:	434180ef          	jal	80029b44 <putchar>
    80011714:	c419                	beqz	s0,80011722 <external_interrupt_MEI+0x16a>
    80011716:	00043417          	auipc	s0,0x43
    8001171a:	8fb44403          	lbu	s0,-1797(s0) # 80054011 <excpt+0x1>
    8001171e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    80011722:	eeaef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011726:	4511                	li	a0,4
    80011728:	fe0ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001172c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011730:	6785                	lui	a5,0x1
    80011732:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011736:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8001173a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8001173e:	4511                	li	a0,4
    80011740:	fc8ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011744:	08200593          	li	a1,130
    80011748:	0001f617          	auipc	a2,0x1f
    8001174c:	54060613          	addi	a2,a2,1344 # 80030c88 <__func__.0+0x3bd0>
    80011750:	0001c517          	auipc	a0,0x1c
    80011754:	c6050513          	addi	a0,a0,-928 # 8002d3b0 <__func__.0+0x2f8>
    80011758:	6fe190ef          	jal	8002ae56 <printf>
    8001175c:	00043797          	auipc	a5,0x43
    80011760:	8b57c783          	lbu	a5,-1867(a5) # 80054011 <excpt+0x1>
    80011764:	0001c597          	auipc	a1,0x1c
    80011768:	c2458593          	addi	a1,a1,-988 # 8002d388 <__func__.0+0x2d0>
    8001176c:	cf99                	beqz	a5,8001178a <external_interrupt_MEI+0x1d2>
    8001176e:	57fd                	li	a5,-1
    80011770:	6498                	ld	a4,8(s1)
    80011772:	17fe                	slli	a5,a5,0x3f
    80011774:	07ad                	addi	a5,a5,11
    80011776:	0001c597          	auipc	a1,0x1c
    8001177a:	c0258593          	addi	a1,a1,-1022 # 8002d378 <__func__.0+0x2c0>
    8001177e:	00f70663          	beq	a4,a5,8001178a <external_interrupt_MEI+0x1d2>
    80011782:	0001c597          	auipc	a1,0x1c
    80011786:	c0658593          	addi	a1,a1,-1018 # 8002d388 <__func__.0+0x2d0>
    8001178a:	0001c517          	auipc	a0,0x1c
    8001178e:	c3e50513          	addi	a0,a0,-962 # 8002d3c8 <__func__.0+0x310>
    80011792:	6c4190ef          	jal	8002ae56 <printf>
    80011796:	00043797          	auipc	a5,0x43
    8001179a:	87b7c783          	lbu	a5,-1925(a5) # 80054011 <excpt+0x1>
    8001179e:	c799                	beqz	a5,800117ac <external_interrupt_MEI+0x1f4>
    800117a0:	57fd                	li	a5,-1
    800117a2:	6498                	ld	a4,8(s1)
    800117a4:	17fe                	slli	a5,a5,0x3f
    800117a6:	07ad                	addi	a5,a5,11
    800117a8:	00f70c63          	beq	a4,a5,800117c0 <external_interrupt_MEI+0x208>
    800117ac:	0001c517          	auipc	a0,0x1c
    800117b0:	c2450513          	addi	a0,a0,-988 # 8002d3d0 <__func__.0+0x318>
    800117b4:	6a2190ef          	jal	8002ae56 <printf>
    800117b8:	02900513          	li	a0,41
    800117bc:	388180ef          	jal	80029b44 <putchar>
    800117c0:	4529                	li	a0,10
    800117c2:	382180ef          	jal	80029b44 <putchar>
    800117c6:	c801                	beqz	s0,800117d6 <external_interrupt_MEI+0x21e>
    800117c8:	00043797          	auipc	a5,0x43
    800117cc:	8497c783          	lbu	a5,-1975(a5) # 80054011 <excpt+0x1>
    800117d0:	4401                	li	s0,0
    800117d2:	020792e3          	bnez	a5,80011ff6 <external_interrupt_MEI+0xa3e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    800117d6:	e36ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800117da:	4511                	li	a0,4
    800117dc:	f2cef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800117e0:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800117e4:	6785                	lui	a5,0x1
    800117e6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800117ea:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800117ee:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800117f2:	4511                	li	a0,4
    800117f4:	f14ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    800117f8:	08200593          	li	a1,130
    800117fc:	0001f617          	auipc	a2,0x1f
    80011800:	4ec60613          	addi	a2,a2,1260 # 80030ce8 <__func__.0+0x3c30>
    80011804:	0001c517          	auipc	a0,0x1c
    80011808:	bac50513          	addi	a0,a0,-1108 # 8002d3b0 <__func__.0+0x2f8>
    8001180c:	64a190ef          	jal	8002ae56 <printf>
    80011810:	00043797          	auipc	a5,0x43
    80011814:	8017c783          	lbu	a5,-2047(a5) # 80054011 <excpt+0x1>
    80011818:	0001c597          	auipc	a1,0x1c
    8001181c:	b7058593          	addi	a1,a1,-1168 # 8002d388 <__func__.0+0x2d0>
    80011820:	e789                	bnez	a5,8001182a <external_interrupt_MEI+0x272>
    80011822:	0001c597          	auipc	a1,0x1c
    80011826:	b5658593          	addi	a1,a1,-1194 # 8002d378 <__func__.0+0x2c0>
    8001182a:	0001c517          	auipc	a0,0x1c
    8001182e:	b9e50513          	addi	a0,a0,-1122 # 8002d3c8 <__func__.0+0x310>
    80011832:	624190ef          	jal	8002ae56 <printf>
    80011836:	00042797          	auipc	a5,0x42
    8001183a:	7db7c783          	lbu	a5,2011(a5) # 80054011 <excpt+0x1>
    8001183e:	0c0796e3          	bnez	a5,8001210a <external_interrupt_MEI+0xb52>
    80011842:	4529                	li	a0,10
    80011844:	300180ef          	jal	80029b44 <putchar>
    80011848:	c419                	beqz	s0,80011856 <external_interrupt_MEI+0x29e>
    8001184a:	00042417          	auipc	s0,0x42
    8001184e:	7c744403          	lbu	s0,1991(s0) # 80054011 <excpt+0x1>
    80011852:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    80011856:	db6ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001185a:	4511                	li	a0,4
    8001185c:	eacef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80011860:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011864:	6785                	lui	a5,0x1
    80011866:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001186a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8001186e:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011872:	4511                	li	a0,4
    80011874:	e94ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80011878:	08200593          	li	a1,130
    8001187c:	0001f617          	auipc	a2,0x1f
    80011880:	4c460613          	addi	a2,a2,1220 # 80030d40 <__func__.0+0x3c88>
    80011884:	0001c517          	auipc	a0,0x1c
    80011888:	b2c50513          	addi	a0,a0,-1236 # 8002d3b0 <__func__.0+0x2f8>
    8001188c:	5ca190ef          	jal	8002ae56 <printf>
    80011890:	00042797          	auipc	a5,0x42
    80011894:	7817c783          	lbu	a5,1921(a5) # 80054011 <excpt+0x1>
    80011898:	0001c597          	auipc	a1,0x1c
    8001189c:	af058593          	addi	a1,a1,-1296 # 8002d388 <__func__.0+0x2d0>
    800118a0:	e789                	bnez	a5,800118aa <external_interrupt_MEI+0x2f2>
    800118a2:	0001c597          	auipc	a1,0x1c
    800118a6:	ad658593          	addi	a1,a1,-1322 # 8002d378 <__func__.0+0x2c0>
    800118aa:	0001c517          	auipc	a0,0x1c
    800118ae:	b1e50513          	addi	a0,a0,-1250 # 8002d3c8 <__func__.0+0x310>
    800118b2:	5a4190ef          	jal	8002ae56 <printf>
    800118b6:	00042797          	auipc	a5,0x42
    800118ba:	75b7c783          	lbu	a5,1883(a5) # 80054011 <excpt+0x1>
    800118be:	02079ae3          	bnez	a5,800120f2 <external_interrupt_MEI+0xb3a>
    800118c2:	4529                	li	a0,10
    800118c4:	280180ef          	jal	80029b44 <putchar>
    800118c8:	c419                	beqz	s0,800118d6 <external_interrupt_MEI+0x31e>
    800118ca:	00042417          	auipc	s0,0x42
    800118ce:	74744403          	lbu	s0,1863(s0) # 80054011 <excpt+0x1>
    800118d2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800118d6:	d36ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800118da:	4511                	li	a0,4
    800118dc:	e2cef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800118e0:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800118e4:	6785                	lui	a5,0x1
    800118e6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800118ea:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800118ee:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800118f2:	4511                	li	a0,4
    800118f4:	e14ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    800118f8:	08200593          	li	a1,130
    800118fc:	0001f617          	auipc	a2,0x1f
    80011900:	49c60613          	addi	a2,a2,1180 # 80030d98 <__func__.0+0x3ce0>
    80011904:	0001c517          	auipc	a0,0x1c
    80011908:	aac50513          	addi	a0,a0,-1364 # 8002d3b0 <__func__.0+0x2f8>
    8001190c:	54a190ef          	jal	8002ae56 <printf>
    80011910:	00042797          	auipc	a5,0x42
    80011914:	7017c783          	lbu	a5,1793(a5) # 80054011 <excpt+0x1>
    80011918:	0001c597          	auipc	a1,0x1c
    8001191c:	a7058593          	addi	a1,a1,-1424 # 8002d388 <__func__.0+0x2d0>
    80011920:	e789                	bnez	a5,8001192a <external_interrupt_MEI+0x372>
    80011922:	0001c597          	auipc	a1,0x1c
    80011926:	a5658593          	addi	a1,a1,-1450 # 8002d378 <__func__.0+0x2c0>
    8001192a:	0001c517          	auipc	a0,0x1c
    8001192e:	a9e50513          	addi	a0,a0,-1378 # 8002d3c8 <__func__.0+0x310>
    80011932:	524190ef          	jal	8002ae56 <printf>
    80011936:	00042797          	auipc	a5,0x42
    8001193a:	6db7c783          	lbu	a5,1755(a5) # 80054011 <excpt+0x1>
    8001193e:	78079e63          	bnez	a5,800120da <external_interrupt_MEI+0xb22>
    80011942:	4529                	li	a0,10
    80011944:	200180ef          	jal	80029b44 <putchar>
    80011948:	c419                	beqz	s0,80011956 <external_interrupt_MEI+0x39e>
    8001194a:	00042417          	auipc	s0,0x42
    8001194e:	6c744403          	lbu	s0,1735(s0) # 80054011 <excpt+0x1>
    80011952:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011956:	cb6ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001195a:	4511                	li	a0,4
    8001195c:	dacef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011960:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011964:	6785                	lui	a5,0x1
    80011966:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001196a:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8001196e:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    80011972:	450d                	li	a0,3
    80011974:	d94ef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011978:	08200593          	li	a1,130
    8001197c:	0001f617          	auipc	a2,0x1f
    80011980:	47460613          	addi	a2,a2,1140 # 80030df0 <__func__.0+0x3d38>
    80011984:	0001c517          	auipc	a0,0x1c
    80011988:	a2c50513          	addi	a0,a0,-1492 # 8002d3b0 <__func__.0+0x2f8>
    8001198c:	4ca190ef          	jal	8002ae56 <printf>
    80011990:	6094                	ld	a3,0(s1)
    80011992:	f0001737          	lui	a4,0xf0001
    80011996:	0712                	slli	a4,a4,0x4
    80011998:	4785                	li	a5,1
    8001199a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8001199e:	178a                	slli	a5,a5,0x22
    800119a0:	8f75                	and	a4,a4,a3
    800119a2:	10078793          	addi	a5,a5,256
    800119a6:	0001c597          	auipc	a1,0x1c
    800119aa:	9e258593          	addi	a1,a1,-1566 # 8002d388 <__func__.0+0x2d0>
    800119ae:	00f71663          	bne	a4,a5,800119ba <external_interrupt_MEI+0x402>
    800119b2:	0001c597          	auipc	a1,0x1c
    800119b6:	9c658593          	addi	a1,a1,-1594 # 8002d378 <__func__.0+0x2c0>
    800119ba:	0001c517          	auipc	a0,0x1c
    800119be:	a0e50513          	addi	a0,a0,-1522 # 8002d3c8 <__func__.0+0x310>
    800119c2:	494190ef          	jal	8002ae56 <printf>
    800119c6:	00042797          	auipc	a5,0x42
    800119ca:	64b7c783          	lbu	a5,1611(a5) # 80054011 <excpt+0x1>
    800119ce:	cb81                	beqz	a5,800119de <external_interrupt_MEI+0x426>
    800119d0:	00042717          	auipc	a4,0x42
    800119d4:	64472703          	lw	a4,1604(a4) # 80054014 <excpt+0x4>
    800119d8:	4791                	li	a5,4
    800119da:	00f70c63          	beq	a4,a5,800119f2 <external_interrupt_MEI+0x43a>
    800119de:	0001c517          	auipc	a0,0x1c
    800119e2:	9f250513          	addi	a0,a0,-1550 # 8002d3d0 <__func__.0+0x318>
    800119e6:	470190ef          	jal	8002ae56 <printf>
    800119ea:	02900513          	li	a0,41
    800119ee:	156180ef          	jal	80029b44 <putchar>
    800119f2:	4529                	li	a0,10
    800119f4:	150180ef          	jal	80029b44 <putchar>
    800119f8:	cc19                	beqz	s0,80011a16 <external_interrupt_MEI+0x45e>
    800119fa:	6080                	ld	s0,0(s1)
    800119fc:	f0001737          	lui	a4,0xf0001
    80011a00:	0712                	slli	a4,a4,0x4
    80011a02:	57fd                	li	a5,-1
    80011a04:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a08:	178a                	slli	a5,a5,0x22
    80011a0a:	8c79                	and	s0,s0,a4
    80011a0c:	f0078793          	addi	a5,a5,-256
    80011a10:	943e                	add	s0,s0,a5
    80011a12:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011a16:	bf6ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011a1a:	4511                	li	a0,4
    80011a1c:	cecef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011a20:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011a24:	6785                	lui	a5,0x1
    80011a26:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011a2a:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011a2e:	577d                	li	a4,-1
    80011a30:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011a34:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011a38:	450d                	li	a0,3
    80011a3a:	cceef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011a3e:	08200593          	li	a1,130
    80011a42:	0001f617          	auipc	a2,0x1f
    80011a46:	40660613          	addi	a2,a2,1030 # 80030e48 <__func__.0+0x3d90>
    80011a4a:	0001c517          	auipc	a0,0x1c
    80011a4e:	96650513          	addi	a0,a0,-1690 # 8002d3b0 <__func__.0+0x2f8>
    80011a52:	404190ef          	jal	8002ae56 <printf>
    80011a56:	6094                	ld	a3,0(s1)
    80011a58:	f0001737          	lui	a4,0xf0001
    80011a5c:	0712                	slli	a4,a4,0x4
    80011a5e:	478d                	li	a5,3
    80011a60:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a64:	1782                	slli	a5,a5,0x20
    80011a66:	8f75                	and	a4,a4,a3
    80011a68:	10078793          	addi	a5,a5,256
    80011a6c:	0001c597          	auipc	a1,0x1c
    80011a70:	91c58593          	addi	a1,a1,-1764 # 8002d388 <__func__.0+0x2d0>
    80011a74:	00f71663          	bne	a4,a5,80011a80 <external_interrupt_MEI+0x4c8>
    80011a78:	0001c597          	auipc	a1,0x1c
    80011a7c:	90058593          	addi	a1,a1,-1792 # 8002d378 <__func__.0+0x2c0>
    80011a80:	0001c517          	auipc	a0,0x1c
    80011a84:	94850513          	addi	a0,a0,-1720 # 8002d3c8 <__func__.0+0x310>
    80011a88:	3ce190ef          	jal	8002ae56 <printf>
    80011a8c:	00042797          	auipc	a5,0x42
    80011a90:	5857c783          	lbu	a5,1413(a5) # 80054011 <excpt+0x1>
    80011a94:	cb81                	beqz	a5,80011aa4 <external_interrupt_MEI+0x4ec>
    80011a96:	00042717          	auipc	a4,0x42
    80011a9a:	57e72703          	lw	a4,1406(a4) # 80054014 <excpt+0x4>
    80011a9e:	478d                	li	a5,3
    80011aa0:	00f70c63          	beq	a4,a5,80011ab8 <external_interrupt_MEI+0x500>
    80011aa4:	0001c517          	auipc	a0,0x1c
    80011aa8:	92c50513          	addi	a0,a0,-1748 # 8002d3d0 <__func__.0+0x318>
    80011aac:	3aa190ef          	jal	8002ae56 <printf>
    80011ab0:	02900513          	li	a0,41
    80011ab4:	090180ef          	jal	80029b44 <putchar>
    80011ab8:	4529                	li	a0,10
    80011aba:	08a180ef          	jal	80029b44 <putchar>
    80011abe:	cc19                	beqz	s0,80011adc <external_interrupt_MEI+0x524>
    80011ac0:	6080                	ld	s0,0(s1)
    80011ac2:	f0001737          	lui	a4,0xf0001
    80011ac6:	0712                	slli	a4,a4,0x4
    80011ac8:	57f5                	li	a5,-3
    80011aca:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011ace:	1782                	slli	a5,a5,0x20
    80011ad0:	8c79                	and	s0,s0,a4
    80011ad2:	f0078793          	addi	a5,a5,-256
    80011ad6:	943e                	add	s0,s0,a5
    80011ad8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011adc:	b30ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ae0:	4511                	li	a0,4
    80011ae2:	c26ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ae6:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011aea:	6785                	lui	a5,0x1
    80011aec:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011af0:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011af4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011af8:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011afc:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011b00:	450d                	li	a0,3
    80011b02:	c06ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011b06:	08200593          	li	a1,130
    80011b0a:	0001f617          	auipc	a2,0x1f
    80011b0e:	39660613          	addi	a2,a2,918 # 80030ea0 <__func__.0+0x3de8>
    80011b12:	0001c517          	auipc	a0,0x1c
    80011b16:	89e50513          	addi	a0,a0,-1890 # 8002d3b0 <__func__.0+0x2f8>
    80011b1a:	33c190ef          	jal	8002ae56 <printf>
    80011b1e:	00042797          	auipc	a5,0x42
    80011b22:	4f37c783          	lbu	a5,1267(a5) # 80054011 <excpt+0x1>
    80011b26:	0001c597          	auipc	a1,0x1c
    80011b2a:	86258593          	addi	a1,a1,-1950 # 8002d388 <__func__.0+0x2d0>
    80011b2e:	e789                	bnez	a5,80011b38 <external_interrupt_MEI+0x580>
    80011b30:	0001c597          	auipc	a1,0x1c
    80011b34:	84858593          	addi	a1,a1,-1976 # 8002d378 <__func__.0+0x2c0>
    80011b38:	0001c517          	auipc	a0,0x1c
    80011b3c:	89050513          	addi	a0,a0,-1904 # 8002d3c8 <__func__.0+0x310>
    80011b40:	316190ef          	jal	8002ae56 <printf>
    80011b44:	00042797          	auipc	a5,0x42
    80011b48:	4cd7c783          	lbu	a5,1229(a5) # 80054011 <excpt+0x1>
    80011b4c:	56079c63          	bnez	a5,800120c4 <external_interrupt_MEI+0xb0c>
    80011b50:	4529                	li	a0,10
    80011b52:	7f3170ef          	jal	80029b44 <putchar>
    80011b56:	c419                	beqz	s0,80011b64 <external_interrupt_MEI+0x5ac>
    80011b58:	00042417          	auipc	s0,0x42
    80011b5c:	4b944403          	lbu	s0,1209(s0) # 80054011 <excpt+0x1>
    80011b60:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011b64:	aa8ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011b68:	4511                	li	a0,4
    80011b6a:	b9eef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011b6e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011b72:	6785                	lui	a5,0x1
    80011b74:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011b78:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011b7c:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011b80:	450d                	li	a0,3
    80011b82:	b86ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011b86:	08200593          	li	a1,130
    80011b8a:	0001f617          	auipc	a2,0x1f
    80011b8e:	36e60613          	addi	a2,a2,878 # 80030ef8 <__func__.0+0x3e40>
    80011b92:	0001c517          	auipc	a0,0x1c
    80011b96:	81e50513          	addi	a0,a0,-2018 # 8002d3b0 <__func__.0+0x2f8>
    80011b9a:	2bc190ef          	jal	8002ae56 <printf>
    80011b9e:	00042797          	auipc	a5,0x42
    80011ba2:	4737c783          	lbu	a5,1139(a5) # 80054011 <excpt+0x1>
    80011ba6:	0001b597          	auipc	a1,0x1b
    80011baa:	7e258593          	addi	a1,a1,2018 # 8002d388 <__func__.0+0x2d0>
    80011bae:	c799                	beqz	a5,80011bbc <external_interrupt_MEI+0x604>
    80011bb0:	57fd                	li	a5,-1
    80011bb2:	6498                	ld	a4,8(s1)
    80011bb4:	17fe                	slli	a5,a5,0x3f
    80011bb6:	07ad                	addi	a5,a5,11
    80011bb8:	56f70563          	beq	a4,a5,80012122 <external_interrupt_MEI+0xb6a>
    80011bbc:	0001c517          	auipc	a0,0x1c
    80011bc0:	80c50513          	addi	a0,a0,-2036 # 8002d3c8 <__func__.0+0x310>
    80011bc4:	292190ef          	jal	8002ae56 <printf>
    80011bc8:	00042797          	auipc	a5,0x42
    80011bcc:	4497c783          	lbu	a5,1097(a5) # 80054011 <excpt+0x1>
    80011bd0:	c799                	beqz	a5,80011bde <external_interrupt_MEI+0x626>
    80011bd2:	57fd                	li	a5,-1
    80011bd4:	6498                	ld	a4,8(s1)
    80011bd6:	17fe                	slli	a5,a5,0x3f
    80011bd8:	07ad                	addi	a5,a5,11
    80011bda:	48f70063          	beq	a4,a5,8001205a <external_interrupt_MEI+0xaa2>
    80011bde:	0001b517          	auipc	a0,0x1b
    80011be2:	7f250513          	addi	a0,a0,2034 # 8002d3d0 <__func__.0+0x318>
    80011be6:	270190ef          	jal	8002ae56 <printf>
    80011bea:	02900513          	li	a0,41
    80011bee:	757170ef          	jal	80029b44 <putchar>
    80011bf2:	4529                	li	a0,10
    80011bf4:	751170ef          	jal	80029b44 <putchar>
    80011bf8:	c801                	beqz	s0,80011c08 <external_interrupt_MEI+0x650>
    80011bfa:	00042797          	auipc	a5,0x42
    80011bfe:	4177c783          	lbu	a5,1047(a5) # 80054011 <excpt+0x1>
    80011c02:	4401                	li	s0,0
    80011c04:	42079563          	bnez	a5,8001202e <external_interrupt_MEI+0xa76>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011c08:	a04ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c0c:	4511                	li	a0,4
    80011c0e:	afaef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011c12:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011c16:	6785                	lui	a5,0x1
    80011c18:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011c1c:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011c20:	577d                	li	a4,-1
    80011c22:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80011c26:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80011c2a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011c2e:	450d                	li	a0,3
    80011c30:	ad8ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011c34:	08200593          	li	a1,130
    80011c38:	0001f617          	auipc	a2,0x1f
    80011c3c:	31860613          	addi	a2,a2,792 # 80030f50 <__func__.0+0x3e98>
    80011c40:	0001b517          	auipc	a0,0x1b
    80011c44:	77050513          	addi	a0,a0,1904 # 8002d3b0 <__func__.0+0x2f8>
    80011c48:	20e190ef          	jal	8002ae56 <printf>
    80011c4c:	00042797          	auipc	a5,0x42
    80011c50:	3c57c783          	lbu	a5,965(a5) # 80054011 <excpt+0x1>
    80011c54:	0001b597          	auipc	a1,0x1b
    80011c58:	73458593          	addi	a1,a1,1844 # 8002d388 <__func__.0+0x2d0>
    80011c5c:	e789                	bnez	a5,80011c66 <external_interrupt_MEI+0x6ae>
    80011c5e:	0001b597          	auipc	a1,0x1b
    80011c62:	71a58593          	addi	a1,a1,1818 # 8002d378 <__func__.0+0x2c0>
    80011c66:	0001b517          	auipc	a0,0x1b
    80011c6a:	76250513          	addi	a0,a0,1890 # 8002d3c8 <__func__.0+0x310>
    80011c6e:	1e8190ef          	jal	8002ae56 <printf>
    80011c72:	00042797          	auipc	a5,0x42
    80011c76:	39f7c783          	lbu	a5,927(a5) # 80054011 <excpt+0x1>
    80011c7a:	3e079863          	bnez	a5,8001206a <external_interrupt_MEI+0xab2>
    80011c7e:	4529                	li	a0,10
    80011c80:	6c5170ef          	jal	80029b44 <putchar>
    80011c84:	c419                	beqz	s0,80011c92 <external_interrupt_MEI+0x6da>
    80011c86:	00042417          	auipc	s0,0x42
    80011c8a:	38b44403          	lbu	s0,907(s0) # 80054011 <excpt+0x1>
    80011c8e:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011c92:	97aef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c96:	4511                	li	a0,4
    80011c98:	a70ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011c9c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ca0:	6785                	lui	a5,0x1
    80011ca2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ca6:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011caa:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80011cae:	4509                	li	a0,2
    80011cb0:	a58ef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011cb4:	08200593          	li	a1,130
    80011cb8:	0001f617          	auipc	a2,0x1f
    80011cbc:	2e860613          	addi	a2,a2,744 # 80030fa0 <__func__.0+0x3ee8>
    80011cc0:	0001b517          	auipc	a0,0x1b
    80011cc4:	6f050513          	addi	a0,a0,1776 # 8002d3b0 <__func__.0+0x2f8>
    80011cc8:	18e190ef          	jal	8002ae56 <printf>
    80011ccc:	6094                	ld	a3,0(s1)
    80011cce:	f0001737          	lui	a4,0xf0001
    80011cd2:	0712                	slli	a4,a4,0x4
    80011cd4:	4785                	li	a5,1
    80011cd6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011cda:	178a                	slli	a5,a5,0x22
    80011cdc:	8f75                	and	a4,a4,a3
    80011cde:	10078793          	addi	a5,a5,256
    80011ce2:	0001b597          	auipc	a1,0x1b
    80011ce6:	6a658593          	addi	a1,a1,1702 # 8002d388 <__func__.0+0x2d0>
    80011cea:	00f71663          	bne	a4,a5,80011cf6 <external_interrupt_MEI+0x73e>
    80011cee:	0001b597          	auipc	a1,0x1b
    80011cf2:	68a58593          	addi	a1,a1,1674 # 8002d378 <__func__.0+0x2c0>
    80011cf6:	0001b517          	auipc	a0,0x1b
    80011cfa:	6d250513          	addi	a0,a0,1746 # 8002d3c8 <__func__.0+0x310>
    80011cfe:	158190ef          	jal	8002ae56 <printf>
    80011d02:	00042797          	auipc	a5,0x42
    80011d06:	30f7c783          	lbu	a5,783(a5) # 80054011 <excpt+0x1>
    80011d0a:	cb81                	beqz	a5,80011d1a <external_interrupt_MEI+0x762>
    80011d0c:	00042717          	auipc	a4,0x42
    80011d10:	30872703          	lw	a4,776(a4) # 80054014 <excpt+0x4>
    80011d14:	4791                	li	a5,4
    80011d16:	00f70c63          	beq	a4,a5,80011d2e <external_interrupt_MEI+0x776>
    80011d1a:	0001b517          	auipc	a0,0x1b
    80011d1e:	6b650513          	addi	a0,a0,1718 # 8002d3d0 <__func__.0+0x318>
    80011d22:	134190ef          	jal	8002ae56 <printf>
    80011d26:	02900513          	li	a0,41
    80011d2a:	61b170ef          	jal	80029b44 <putchar>
    80011d2e:	4529                	li	a0,10
    80011d30:	615170ef          	jal	80029b44 <putchar>
    80011d34:	cc19                	beqz	s0,80011d52 <external_interrupt_MEI+0x79a>
    80011d36:	6080                	ld	s0,0(s1)
    80011d38:	f0001737          	lui	a4,0xf0001
    80011d3c:	0712                	slli	a4,a4,0x4
    80011d3e:	57fd                	li	a5,-1
    80011d40:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d44:	178a                	slli	a5,a5,0x22
    80011d46:	8c79                	and	s0,s0,a4
    80011d48:	f0078793          	addi	a5,a5,-256
    80011d4c:	943e                	add	s0,s0,a5
    80011d4e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011d52:	8baef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011d56:	4511                	li	a0,4
    80011d58:	9b0ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011d5c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011d60:	6785                	lui	a5,0x1
    80011d62:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011d66:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011d6a:	577d                	li	a4,-1
    80011d6c:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011d70:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011d74:	4509                	li	a0,2
    80011d76:	992ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011d7a:	08200593          	li	a1,130
    80011d7e:	0001f617          	auipc	a2,0x1f
    80011d82:	28260613          	addi	a2,a2,642 # 80031000 <__func__.0+0x3f48>
    80011d86:	0001b517          	auipc	a0,0x1b
    80011d8a:	62a50513          	addi	a0,a0,1578 # 8002d3b0 <__func__.0+0x2f8>
    80011d8e:	0c8190ef          	jal	8002ae56 <printf>
    80011d92:	6094                	ld	a3,0(s1)
    80011d94:	f0001737          	lui	a4,0xf0001
    80011d98:	0712                	slli	a4,a4,0x4
    80011d9a:	4785                	li	a5,1
    80011d9c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011da0:	1786                	slli	a5,a5,0x21
    80011da2:	8f75                	and	a4,a4,a3
    80011da4:	10078793          	addi	a5,a5,256
    80011da8:	0001b597          	auipc	a1,0x1b
    80011dac:	5e058593          	addi	a1,a1,1504 # 8002d388 <__func__.0+0x2d0>
    80011db0:	00f71663          	bne	a4,a5,80011dbc <external_interrupt_MEI+0x804>
    80011db4:	0001b597          	auipc	a1,0x1b
    80011db8:	5c458593          	addi	a1,a1,1476 # 8002d378 <__func__.0+0x2c0>
    80011dbc:	0001b517          	auipc	a0,0x1b
    80011dc0:	60c50513          	addi	a0,a0,1548 # 8002d3c8 <__func__.0+0x310>
    80011dc4:	092190ef          	jal	8002ae56 <printf>
    80011dc8:	00042797          	auipc	a5,0x42
    80011dcc:	2497c783          	lbu	a5,585(a5) # 80054011 <excpt+0x1>
    80011dd0:	cb81                	beqz	a5,80011de0 <external_interrupt_MEI+0x828>
    80011dd2:	00042717          	auipc	a4,0x42
    80011dd6:	24272703          	lw	a4,578(a4) # 80054014 <excpt+0x4>
    80011dda:	4789                	li	a5,2
    80011ddc:	00f70c63          	beq	a4,a5,80011df4 <external_interrupt_MEI+0x83c>
    80011de0:	0001b517          	auipc	a0,0x1b
    80011de4:	5f050513          	addi	a0,a0,1520 # 8002d3d0 <__func__.0+0x318>
    80011de8:	06e190ef          	jal	8002ae56 <printf>
    80011dec:	02900513          	li	a0,41
    80011df0:	555170ef          	jal	80029b44 <putchar>
    80011df4:	4529                	li	a0,10
    80011df6:	54f170ef          	jal	80029b44 <putchar>
    80011dfa:	cc19                	beqz	s0,80011e18 <external_interrupt_MEI+0x860>
    80011dfc:	6080                	ld	s0,0(s1)
    80011dfe:	f0001737          	lui	a4,0xf0001
    80011e02:	0712                	slli	a4,a4,0x4
    80011e04:	57fd                	li	a5,-1
    80011e06:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011e0a:	1786                	slli	a5,a5,0x21
    80011e0c:	8c79                	and	s0,s0,a4
    80011e0e:	f0078793          	addi	a5,a5,-256
    80011e12:	943e                	add	s0,s0,a5
    80011e14:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011e18:	ff5ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011e1c:	4511                	li	a0,4
    80011e1e:	8eaef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011e22:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011e26:	6785                	lui	a5,0x1
    80011e28:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011e2c:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011e30:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011e34:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011e38:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011e3c:	4509                	li	a0,2
    80011e3e:	8caef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011e42:	08200593          	li	a1,130
    80011e46:	0001f617          	auipc	a2,0x1f
    80011e4a:	21a60613          	addi	a2,a2,538 # 80031060 <__func__.0+0x3fa8>
    80011e4e:	0001b517          	auipc	a0,0x1b
    80011e52:	56250513          	addi	a0,a0,1378 # 8002d3b0 <__func__.0+0x2f8>
    80011e56:	000190ef          	jal	8002ae56 <printf>
    80011e5a:	00042797          	auipc	a5,0x42
    80011e5e:	1b77c783          	lbu	a5,439(a5) # 80054011 <excpt+0x1>
    80011e62:	0001b597          	auipc	a1,0x1b
    80011e66:	52658593          	addi	a1,a1,1318 # 8002d388 <__func__.0+0x2d0>
    80011e6a:	e789                	bnez	a5,80011e74 <external_interrupt_MEI+0x8bc>
    80011e6c:	0001b597          	auipc	a1,0x1b
    80011e70:	50c58593          	addi	a1,a1,1292 # 8002d378 <__func__.0+0x2c0>
    80011e74:	0001b517          	auipc	a0,0x1b
    80011e78:	55450513          	addi	a0,a0,1364 # 8002d3c8 <__func__.0+0x310>
    80011e7c:	7db180ef          	jal	8002ae56 <printf>
    80011e80:	00042797          	auipc	a5,0x42
    80011e84:	1917c783          	lbu	a5,401(a5) # 80054011 <excpt+0x1>
    80011e88:	1e079c63          	bnez	a5,80012080 <external_interrupt_MEI+0xac8>
    80011e8c:	4529                	li	a0,10
    80011e8e:	4b7170ef          	jal	80029b44 <putchar>
    80011e92:	c419                	beqz	s0,80011ea0 <external_interrupt_MEI+0x8e8>
    80011e94:	00042417          	auipc	s0,0x42
    80011e98:	17d44403          	lbu	s0,381(s0) # 80054011 <excpt+0x1>
    80011e9c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011ea0:	f6dee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ea4:	4511                	li	a0,4
    80011ea6:	862ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011eaa:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011eae:	6785                	lui	a5,0x1
    80011eb0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011eb4:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011eb8:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011ebc:	4509                	li	a0,2
    80011ebe:	84aef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011ec2:	08200593          	li	a1,130
    80011ec6:	0001f617          	auipc	a2,0x1f
    80011eca:	1fa60613          	addi	a2,a2,506 # 800310c0 <__func__.0+0x4008>
    80011ece:	0001b517          	auipc	a0,0x1b
    80011ed2:	4e250513          	addi	a0,a0,1250 # 8002d3b0 <__func__.0+0x2f8>
    80011ed6:	781180ef          	jal	8002ae56 <printf>
    80011eda:	00042797          	auipc	a5,0x42
    80011ede:	1377c783          	lbu	a5,311(a5) # 80054011 <excpt+0x1>
    80011ee2:	0001b597          	auipc	a1,0x1b
    80011ee6:	4a658593          	addi	a1,a1,1190 # 8002d388 <__func__.0+0x2d0>
    80011eea:	c799                	beqz	a5,80011ef8 <external_interrupt_MEI+0x940>
    80011eec:	57fd                	li	a5,-1
    80011eee:	6498                	ld	a4,8(s1)
    80011ef0:	17fe                	slli	a5,a5,0x3f
    80011ef2:	07ad                	addi	a5,a5,11
    80011ef4:	24f70763          	beq	a4,a5,80012142 <external_interrupt_MEI+0xb8a>
    80011ef8:	0001b517          	auipc	a0,0x1b
    80011efc:	4d050513          	addi	a0,a0,1232 # 8002d3c8 <__func__.0+0x310>
    80011f00:	757180ef          	jal	8002ae56 <printf>
    80011f04:	00042797          	auipc	a5,0x42
    80011f08:	10d7c783          	lbu	a5,269(a5) # 80054011 <excpt+0x1>
    80011f0c:	c799                	beqz	a5,80011f1a <external_interrupt_MEI+0x962>
    80011f0e:	57fd                	li	a5,-1
    80011f10:	6498                	ld	a4,8(s1)
    80011f12:	17fe                	slli	a5,a5,0x3f
    80011f14:	07ad                	addi	a5,a5,11
    80011f16:	12f70a63          	beq	a4,a5,8001204a <external_interrupt_MEI+0xa92>
    80011f1a:	0001b517          	auipc	a0,0x1b
    80011f1e:	4b650513          	addi	a0,a0,1206 # 8002d3d0 <__func__.0+0x318>
    80011f22:	735180ef          	jal	8002ae56 <printf>
    80011f26:	02900513          	li	a0,41
    80011f2a:	41b170ef          	jal	80029b44 <putchar>
    80011f2e:	4529                	li	a0,10
    80011f30:	415170ef          	jal	80029b44 <putchar>
    80011f34:	c419                	beqz	s0,80011f42 <external_interrupt_MEI+0x98a>
    80011f36:	00042797          	auipc	a5,0x42
    80011f3a:	0db7c783          	lbu	a5,219(a5) # 80054011 <excpt+0x1>
    80011f3e:	4401                	li	s0,0
    80011f40:	ebe9                	bnez	a5,80012012 <external_interrupt_MEI+0xa5a>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011f42:	ecbee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011f46:	4511                	li	a0,4
    80011f48:	fc1ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011f4c:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011f50:	6785                	lui	a5,0x1
    80011f52:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011f56:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011f5a:	577d                	li	a4,-1
    80011f5c:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80011f60:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80011f64:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011f68:	4509                	li	a0,2
    80011f6a:	f9fee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011f6e:	08200593          	li	a1,130
    80011f72:	0001f617          	auipc	a2,0x1f
    80011f76:	1ae60613          	addi	a2,a2,430 # 80031120 <__func__.0+0x4068>
    80011f7a:	0001b517          	auipc	a0,0x1b
    80011f7e:	43650513          	addi	a0,a0,1078 # 8002d3b0 <__func__.0+0x2f8>
    80011f82:	6d5180ef          	jal	8002ae56 <printf>
    80011f86:	00042797          	auipc	a5,0x42
    80011f8a:	08b7c783          	lbu	a5,139(a5) # 80054011 <excpt+0x1>
    80011f8e:	0001b597          	auipc	a1,0x1b
    80011f92:	3fa58593          	addi	a1,a1,1018 # 8002d388 <__func__.0+0x2d0>
    80011f96:	e789                	bnez	a5,80011fa0 <external_interrupt_MEI+0x9e8>
    80011f98:	0001b597          	auipc	a1,0x1b
    80011f9c:	3e058593          	addi	a1,a1,992 # 8002d378 <__func__.0+0x2c0>
    80011fa0:	0001b517          	auipc	a0,0x1b
    80011fa4:	42850513          	addi	a0,a0,1064 # 8002d3c8 <__func__.0+0x310>
    80011fa8:	6af180ef          	jal	8002ae56 <printf>
    80011fac:	00042797          	auipc	a5,0x42
    80011fb0:	0657c783          	lbu	a5,101(a5) # 80054011 <excpt+0x1>
    80011fb4:	0e079d63          	bnez	a5,800120ae <external_interrupt_MEI+0xaf6>
    80011fb8:	4529                	li	a0,10
    80011fba:	38b170ef          	jal	80029b44 <putchar>
    80011fbe:	c411                	beqz	s0,80011fca <external_interrupt_MEI+0xa12>
    80011fc0:	00042797          	auipc	a5,0x42
    80011fc4:	0517c783          	lbu	a5,81(a5) # 80054011 <excpt+0x1>
    80011fc8:	cf9d                	beqz	a5,80012006 <external_interrupt_MEI+0xa4e>
    80011fca:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80011fcc:	0001b597          	auipc	a1,0x1b
    80011fd0:	3bc58593          	addi	a1,a1,956 # 8002d388 <__func__.0+0x2d0>
    80011fd4:	0001b517          	auipc	a0,0x1b
    80011fd8:	45c50513          	addi	a0,a0,1116 # 8002d430 <__func__.0+0x378>
    80011fdc:	67b180ef          	jal	8002ae56 <printf>
    80011fe0:	4511                	li	a0,4
    80011fe2:	f27ee0ef          	jal	80000f08 <goto_priv>
    80011fe6:	83fef0ef          	jal	80001824 <reset_state>
}
    80011fea:	60e2                	ld	ra,24(sp)
    80011fec:	8522                	mv	a0,s0
    80011fee:	6442                	ld	s0,16(sp)
    80011ff0:	64a2                	ld	s1,8(sp)
    80011ff2:	6105                	addi	sp,sp,32
    80011ff4:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011ff6:	6480                	ld	s0,8(s1)
    80011ff8:	57ad                	li	a5,-21
    80011ffa:	8385                	srli	a5,a5,0x1
    80011ffc:	943e                	add	s0,s0,a5
    80011ffe:	00143413          	seqz	s0,s0
    80012002:	fd4ff06f          	j	800117d6 <external_interrupt_MEI+0x21e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012006:	4405                	li	s0,1
    TEST_END();
    80012008:	0001b597          	auipc	a1,0x1b
    8001200c:	37058593          	addi	a1,a1,880 # 8002d378 <__func__.0+0x2c0>
    80012010:	b7d1                	j	80011fd4 <external_interrupt_MEI+0xa1c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012012:	57fd                	li	a5,-1
    80012014:	6498                	ld	a4,8(s1)
    80012016:	17fe                	slli	a5,a5,0x3f
    80012018:	07ad                	addi	a5,a5,11
    8001201a:	f2f714e3          	bne	a4,a5,80011f42 <external_interrupt_MEI+0x98a>
    8001201e:	00042417          	auipc	s0,0x42
    80012022:	ff642403          	lw	s0,-10(s0) # 80054014 <excpt+0x4>
    80012026:	1479                	addi	s0,s0,-2
    80012028:	00143413          	seqz	s0,s0
    8001202c:	bf19                	j	80011f42 <external_interrupt_MEI+0x98a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001202e:	57fd                	li	a5,-1
    80012030:	6498                	ld	a4,8(s1)
    80012032:	17fe                	slli	a5,a5,0x3f
    80012034:	07ad                	addi	a5,a5,11
    80012036:	bcf719e3          	bne	a4,a5,80011c08 <external_interrupt_MEI+0x650>
    8001203a:	00042417          	auipc	s0,0x42
    8001203e:	fda42403          	lw	s0,-38(s0) # 80054014 <excpt+0x4>
    80012042:	1475                	addi	s0,s0,-3
    80012044:	00143413          	seqz	s0,s0
    80012048:	b6c1                	j	80011c08 <external_interrupt_MEI+0x650>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001204a:	00042717          	auipc	a4,0x42
    8001204e:	fca72703          	lw	a4,-54(a4) # 80054014 <excpt+0x4>
    80012052:	4789                	li	a5,2
    80012054:	ecf713e3          	bne	a4,a5,80011f1a <external_interrupt_MEI+0x962>
    80012058:	bdd9                	j	80011f2e <external_interrupt_MEI+0x976>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8001205a:	00042717          	auipc	a4,0x42
    8001205e:	fba72703          	lw	a4,-70(a4) # 80054014 <excpt+0x4>
    80012062:	478d                	li	a5,3
    80012064:	b6f71de3          	bne	a4,a5,80011bde <external_interrupt_MEI+0x626>
    80012068:	b669                	j	80011bf2 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8001206a:	0001b517          	auipc	a0,0x1b
    8001206e:	36650513          	addi	a0,a0,870 # 8002d3d0 <__func__.0+0x318>
    80012072:	5e5180ef          	jal	8002ae56 <printf>
    80012076:	02900513          	li	a0,41
    8001207a:	2cb170ef          	jal	80029b44 <putchar>
    8001207e:	b101                	j	80011c7e <external_interrupt_MEI+0x6c6>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012080:	0001b517          	auipc	a0,0x1b
    80012084:	35050513          	addi	a0,a0,848 # 8002d3d0 <__func__.0+0x318>
    80012088:	5cf180ef          	jal	8002ae56 <printf>
    8001208c:	02900513          	li	a0,41
    80012090:	2b5170ef          	jal	80029b44 <putchar>
    80012094:	bbe5                	j	80011e8c <external_interrupt_MEI+0x8d4>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    80012096:	0001b517          	auipc	a0,0x1b
    8001209a:	33a50513          	addi	a0,a0,826 # 8002d3d0 <__func__.0+0x318>
    8001209e:	5b9180ef          	jal	8002ae56 <printf>
    800120a2:	02900513          	li	a0,41
    800120a6:	29f170ef          	jal	80029b44 <putchar>
    800120aa:	e64ff06f          	j	8001170e <external_interrupt_MEI+0x156>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    800120ae:	0001b517          	auipc	a0,0x1b
    800120b2:	32250513          	addi	a0,a0,802 # 8002d3d0 <__func__.0+0x318>
    800120b6:	5a1180ef          	jal	8002ae56 <printf>
    800120ba:	02900513          	li	a0,41
    800120be:	287170ef          	jal	80029b44 <putchar>
    800120c2:	bddd                	j	80011fb8 <external_interrupt_MEI+0xa00>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    800120c4:	0001b517          	auipc	a0,0x1b
    800120c8:	30c50513          	addi	a0,a0,780 # 8002d3d0 <__func__.0+0x318>
    800120cc:	58b180ef          	jal	8002ae56 <printf>
    800120d0:	02900513          	li	a0,41
    800120d4:	271170ef          	jal	80029b44 <putchar>
    800120d8:	bca5                	j	80011b50 <external_interrupt_MEI+0x598>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    800120da:	0001b517          	auipc	a0,0x1b
    800120de:	2f650513          	addi	a0,a0,758 # 8002d3d0 <__func__.0+0x318>
    800120e2:	575180ef          	jal	8002ae56 <printf>
    800120e6:	02900513          	li	a0,41
    800120ea:	25b170ef          	jal	80029b44 <putchar>
    800120ee:	855ff06f          	j	80011942 <external_interrupt_MEI+0x38a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    800120f2:	0001b517          	auipc	a0,0x1b
    800120f6:	2de50513          	addi	a0,a0,734 # 8002d3d0 <__func__.0+0x318>
    800120fa:	55d180ef          	jal	8002ae56 <printf>
    800120fe:	02900513          	li	a0,41
    80012102:	243170ef          	jal	80029b44 <putchar>
    80012106:	fbcff06f          	j	800118c2 <external_interrupt_MEI+0x30a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8001210a:	0001b517          	auipc	a0,0x1b
    8001210e:	2c650513          	addi	a0,a0,710 # 8002d3d0 <__func__.0+0x318>
    80012112:	545180ef          	jal	8002ae56 <printf>
    80012116:	02900513          	li	a0,41
    8001211a:	22b170ef          	jal	80029b44 <putchar>
    8001211e:	f24ff06f          	j	80011842 <external_interrupt_MEI+0x28a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012122:	00042717          	auipc	a4,0x42
    80012126:	ef272703          	lw	a4,-270(a4) # 80054014 <excpt+0x4>
    8001212a:	478d                	li	a5,3
    8001212c:	0001b597          	auipc	a1,0x1b
    80012130:	24c58593          	addi	a1,a1,588 # 8002d378 <__func__.0+0x2c0>
    80012134:	a8f704e3          	beq	a4,a5,80011bbc <external_interrupt_MEI+0x604>
    80012138:	0001b597          	auipc	a1,0x1b
    8001213c:	25058593          	addi	a1,a1,592 # 8002d388 <__func__.0+0x2d0>
    80012140:	bcb5                	j	80011bbc <external_interrupt_MEI+0x604>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012142:	00042717          	auipc	a4,0x42
    80012146:	ed272703          	lw	a4,-302(a4) # 80054014 <excpt+0x4>
    8001214a:	4789                	li	a5,2
    8001214c:	0001b597          	auipc	a1,0x1b
    80012150:	22c58593          	addi	a1,a1,556 # 8002d378 <__func__.0+0x2c0>
    80012154:	daf702e3          	beq	a4,a5,80011ef8 <external_interrupt_MEI+0x940>
    80012158:	0001b597          	auipc	a1,0x1b
    8001215c:	23058593          	addi	a1,a1,560 # 8002d388 <__func__.0+0x2d0>
    80012160:	bb61                	j	80011ef8 <external_interrupt_MEI+0x940>

0000000080012162 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    80012162:	1101                	addi	sp,sp,-32

    TEST_START();
    80012164:	0001a597          	auipc	a1,0x1a
    80012168:	a9458593          	addi	a1,a1,-1388 # 8002bbf8 <__func__.1>
    8001216c:	0001b517          	auipc	a0,0x1b
    80012170:	22c50513          	addi	a0,a0,556 # 8002d398 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    80012174:	ec06                	sd	ra,24(sp)
    80012176:	e822                	sd	s0,16(sp)
    80012178:	e426                	sd	s1,8(sp)
    TEST_START();
    8001217a:	4dd180ef          	jal	8002ae56 <printf>
    8001217e:	4529                	li	a0,10
    80012180:	1c5170ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80012184:	c89ee0ef          	jal	80000e0c <test_setup_except_function>

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    80012188:	450d                	li	a0,3
    8001218a:	d7fee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    8001218e:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012192:	20000793          	li	a5,512
    80012196:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001219a:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8001219e:	450d                	li	a0,3
    800121a0:	d69ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800121a4:	08200593          	li	a1,130
    800121a8:	0001f617          	auipc	a2,0x1f
    800121ac:	fd860613          	addi	a2,a2,-40 # 80031180 <__func__.0+0x40c8>
    800121b0:	0001b517          	auipc	a0,0x1b
    800121b4:	20050513          	addi	a0,a0,512 # 8002d3b0 <__func__.0+0x2f8>
    800121b8:	49f180ef          	jal	8002ae56 <printf>
    800121bc:	00042797          	auipc	a5,0x42
    800121c0:	e557c783          	lbu	a5,-427(a5) # 80054011 <excpt+0x1>
    800121c4:	00042497          	auipc	s1,0x42
    800121c8:	e4c48493          	addi	s1,s1,-436 # 80054010 <excpt>
    800121cc:	0001b597          	auipc	a1,0x1b
    800121d0:	1bc58593          	addi	a1,a1,444 # 8002d388 <__func__.0+0x2d0>
    800121d4:	c799                	beqz	a5,800121e2 <external_interrupt_SEI+0x80>
    800121d6:	57fd                	li	a5,-1
    800121d8:	6498                	ld	a4,8(s1)
    800121da:	17fe                	slli	a5,a5,0x3f
    800121dc:	07a5                	addi	a5,a5,9
    800121de:	74f70763          	beq	a4,a5,8001292c <external_interrupt_SEI+0x7ca>
    800121e2:	0001b517          	auipc	a0,0x1b
    800121e6:	1e650513          	addi	a0,a0,486 # 8002d3c8 <__func__.0+0x310>
    800121ea:	46d180ef          	jal	8002ae56 <printf>
    800121ee:	00042797          	auipc	a5,0x42
    800121f2:	e237c783          	lbu	a5,-477(a5) # 80054011 <excpt+0x1>
    800121f6:	c799                	beqz	a5,80012204 <external_interrupt_SEI+0xa2>
    800121f8:	57fd                	li	a5,-1
    800121fa:	6498                	ld	a4,8(s1)
    800121fc:	17fe                	slli	a5,a5,0x3f
    800121fe:	07a5                	addi	a5,a5,9
    80012200:	5ef70f63          	beq	a4,a5,800127fe <external_interrupt_SEI+0x69c>
    80012204:	0001b517          	auipc	a0,0x1b
    80012208:	1cc50513          	addi	a0,a0,460 # 8002d3d0 <__func__.0+0x318>
    8001220c:	44b180ef          	jal	8002ae56 <printf>
    80012210:	02900513          	li	a0,41
    80012214:	131170ef          	jal	80029b44 <putchar>
    80012218:	4529                	li	a0,10
    8001221a:	12b170ef          	jal	80029b44 <putchar>
    8001221e:	00042797          	auipc	a5,0x42
    80012222:	df37c783          	lbu	a5,-525(a5) # 80054011 <excpt+0x1>
    80012226:	4401                	li	s0,0
    80012228:	c799                	beqz	a5,80012236 <external_interrupt_SEI+0xd4>
    8001222a:	57fd                	li	a5,-1
    8001222c:	6498                	ld	a4,8(s1)
    8001222e:	17fe                	slli	a5,a5,0x3f
    80012230:	07a5                	addi	a5,a5,9
    80012232:	6af70563          	beq	a4,a5,800128dc <external_interrupt_SEI+0x77a>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    80012236:	bd7ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8001223a:	450d                	li	a0,3
    8001223c:	ccdee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012240:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012244:	20000793          	li	a5,512
    80012248:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001224c:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012250:	450d                	li	a0,3
    80012252:	cb7ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012256:	08200593          	li	a1,130
    8001225a:	0001f617          	auipc	a2,0x1f
    8001225e:	f8660613          	addi	a2,a2,-122 # 800311e0 <__func__.0+0x4128>
    80012262:	0001b517          	auipc	a0,0x1b
    80012266:	14e50513          	addi	a0,a0,334 # 8002d3b0 <__func__.0+0x2f8>
    8001226a:	3ed180ef          	jal	8002ae56 <printf>
    8001226e:	00042797          	auipc	a5,0x42
    80012272:	da37c783          	lbu	a5,-605(a5) # 80054011 <excpt+0x1>
    80012276:	0001b597          	auipc	a1,0x1b
    8001227a:	11258593          	addi	a1,a1,274 # 8002d388 <__func__.0+0x2d0>
    8001227e:	e789                	bnez	a5,80012288 <external_interrupt_SEI+0x126>
    80012280:	0001b597          	auipc	a1,0x1b
    80012284:	0f858593          	addi	a1,a1,248 # 8002d378 <__func__.0+0x2c0>
    80012288:	0001b517          	auipc	a0,0x1b
    8001228c:	14050513          	addi	a0,a0,320 # 8002d3c8 <__func__.0+0x310>
    80012290:	3c7180ef          	jal	8002ae56 <printf>
    80012294:	00042797          	auipc	a5,0x42
    80012298:	d7d7c783          	lbu	a5,-643(a5) # 80054011 <excpt+0x1>
    8001229c:	5a079f63          	bnez	a5,8001285a <external_interrupt_SEI+0x6f8>
    800122a0:	4529                	li	a0,10
    800122a2:	0a3170ef          	jal	80029b44 <putchar>
    800122a6:	c419                	beqz	s0,800122b4 <external_interrupt_SEI+0x152>
    800122a8:	00042417          	auipc	s0,0x42
    800122ac:	d6944403          	lbu	s0,-663(s0) # 80054011 <excpt+0x1>
    800122b0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    800122b4:	b59ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800122b8:	4511                	li	a0,4
    800122ba:	c4fee0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    800122be:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800122c2:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800122c6:	20000793          	li	a5,512
    800122ca:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800122ce:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800122d2:	450d                	li	a0,3
    800122d4:	c35ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800122d8:	08200593          	li	a1,130
    800122dc:	0001f617          	auipc	a2,0x1f
    800122e0:	f5460613          	addi	a2,a2,-172 # 80031230 <__func__.0+0x4178>
    800122e4:	0001b517          	auipc	a0,0x1b
    800122e8:	0cc50513          	addi	a0,a0,204 # 8002d3b0 <__func__.0+0x2f8>
    800122ec:	36b180ef          	jal	8002ae56 <printf>
    800122f0:	00042797          	auipc	a5,0x42
    800122f4:	d217c783          	lbu	a5,-735(a5) # 80054011 <excpt+0x1>
    800122f8:	0001b597          	auipc	a1,0x1b
    800122fc:	09058593          	addi	a1,a1,144 # 8002d388 <__func__.0+0x2d0>
    80012300:	c799                	beqz	a5,8001230e <external_interrupt_SEI+0x1ac>
    80012302:	57fd                	li	a5,-1
    80012304:	6498                	ld	a4,8(s1)
    80012306:	17fe                	slli	a5,a5,0x3f
    80012308:	07a5                	addi	a5,a5,9
    8001230a:	5ef70163          	beq	a4,a5,800128ec <external_interrupt_SEI+0x78a>
    8001230e:	0001b517          	auipc	a0,0x1b
    80012312:	0ba50513          	addi	a0,a0,186 # 8002d3c8 <__func__.0+0x310>
    80012316:	341180ef          	jal	8002ae56 <printf>
    8001231a:	00042797          	auipc	a5,0x42
    8001231e:	cf77c783          	lbu	a5,-777(a5) # 80054011 <excpt+0x1>
    80012322:	c799                	beqz	a5,80012330 <external_interrupt_SEI+0x1ce>
    80012324:	57fd                	li	a5,-1
    80012326:	6498                	ld	a4,8(s1)
    80012328:	17fe                	slli	a5,a5,0x3f
    8001232a:	07a5                	addi	a5,a5,9
    8001232c:	4cf70163          	beq	a4,a5,800127ee <external_interrupt_SEI+0x68c>
    80012330:	0001b517          	auipc	a0,0x1b
    80012334:	0a050513          	addi	a0,a0,160 # 8002d3d0 <__func__.0+0x318>
    80012338:	31f180ef          	jal	8002ae56 <printf>
    8001233c:	02900513          	li	a0,41
    80012340:	005170ef          	jal	80029b44 <putchar>
    80012344:	4529                	li	a0,10
    80012346:	7fe170ef          	jal	80029b44 <putchar>
    8001234a:	c801                	beqz	s0,8001235a <external_interrupt_SEI+0x1f8>
    8001234c:	00042797          	auipc	a5,0x42
    80012350:	cc57c783          	lbu	a5,-827(a5) # 80054011 <excpt+0x1>
    80012354:	4401                	li	s0,0
    80012356:	46079663          	bnez	a5,800127c2 <external_interrupt_SEI+0x660>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8001235a:	ab3ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001235e:	4511                	li	a0,4
    80012360:	ba9ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    80012364:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012368:	20000793          	li	a5,512
    8001236c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012370:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012374:	450d                	li	a0,3
    80012376:	b93ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8001237a:	08200593          	li	a1,130
    8001237e:	0001f617          	auipc	a2,0x1f
    80012382:	f1260613          	addi	a2,a2,-238 # 80031290 <__func__.0+0x41d8>
    80012386:	0001b517          	auipc	a0,0x1b
    8001238a:	02a50513          	addi	a0,a0,42 # 8002d3b0 <__func__.0+0x2f8>
    8001238e:	2c9180ef          	jal	8002ae56 <printf>
    80012392:	00042797          	auipc	a5,0x42
    80012396:	c7f7c783          	lbu	a5,-897(a5) # 80054011 <excpt+0x1>
    8001239a:	0001b597          	auipc	a1,0x1b
    8001239e:	fee58593          	addi	a1,a1,-18 # 8002d388 <__func__.0+0x2d0>
    800123a2:	e789                	bnez	a5,800123ac <external_interrupt_SEI+0x24a>
    800123a4:	0001b597          	auipc	a1,0x1b
    800123a8:	fd458593          	addi	a1,a1,-44 # 8002d378 <__func__.0+0x2c0>
    800123ac:	0001b517          	auipc	a0,0x1b
    800123b0:	01c50513          	addi	a0,a0,28 # 8002d3c8 <__func__.0+0x310>
    800123b4:	2a3180ef          	jal	8002ae56 <printf>
    800123b8:	00042797          	auipc	a5,0x42
    800123bc:	c597c783          	lbu	a5,-935(a5) # 80054011 <excpt+0x1>
    800123c0:	48079263          	bnez	a5,80012844 <external_interrupt_SEI+0x6e2>
    800123c4:	4529                	li	a0,10
    800123c6:	77e170ef          	jal	80029b44 <putchar>
    800123ca:	c419                	beqz	s0,800123d8 <external_interrupt_SEI+0x276>
    800123cc:	00042417          	auipc	s0,0x42
    800123d0:	c4544403          	lbu	s0,-955(s0) # 80054011 <excpt+0x1>
    800123d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    800123d8:	a35ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800123dc:	4511                	li	a0,4
    800123de:	b2bee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    800123e2:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800123e6:	20000793          	li	a5,512
    800123ea:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800123ee:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800123f2:	450d                	li	a0,3
    800123f4:	b15ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    800123f8:	08200593          	li	a1,130
    800123fc:	0001f617          	auipc	a2,0x1f
    80012400:	ee460613          	addi	a2,a2,-284 # 800312e0 <__func__.0+0x4228>
    80012404:	0001b517          	auipc	a0,0x1b
    80012408:	fac50513          	addi	a0,a0,-84 # 8002d3b0 <__func__.0+0x2f8>
    8001240c:	24b180ef          	jal	8002ae56 <printf>
    80012410:	00042797          	auipc	a5,0x42
    80012414:	c017c783          	lbu	a5,-1023(a5) # 80054011 <excpt+0x1>
    80012418:	0001b597          	auipc	a1,0x1b
    8001241c:	f7058593          	addi	a1,a1,-144 # 8002d388 <__func__.0+0x2d0>
    80012420:	e789                	bnez	a5,8001242a <external_interrupt_SEI+0x2c8>
    80012422:	0001b597          	auipc	a1,0x1b
    80012426:	f5658593          	addi	a1,a1,-170 # 8002d378 <__func__.0+0x2c0>
    8001242a:	0001b517          	auipc	a0,0x1b
    8001242e:	f9e50513          	addi	a0,a0,-98 # 8002d3c8 <__func__.0+0x310>
    80012432:	225180ef          	jal	8002ae56 <printf>
    80012436:	00042797          	auipc	a5,0x42
    8001243a:	bdb7c783          	lbu	a5,-1061(a5) # 80054011 <excpt+0x1>
    8001243e:	3e079863          	bnez	a5,8001282e <external_interrupt_SEI+0x6cc>
    80012442:	4529                	li	a0,10
    80012444:	700170ef          	jal	80029b44 <putchar>
    80012448:	c419                	beqz	s0,80012456 <external_interrupt_SEI+0x2f4>
    8001244a:	00042417          	auipc	s0,0x42
    8001244e:	bc744403          	lbu	s0,-1081(s0) # 80054011 <excpt+0x1>
    80012452:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    80012456:	9b7ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001245a:	4511                	li	a0,4
    8001245c:	aadee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012460:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012464:	20000793          	li	a5,512
    80012468:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001246c:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012470:	4509                	li	a0,2
    80012472:	a97ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012476:	08200593          	li	a1,130
    8001247a:	0001f617          	auipc	a2,0x1f
    8001247e:	eb660613          	addi	a2,a2,-330 # 80031330 <__func__.0+0x4278>
    80012482:	0001b517          	auipc	a0,0x1b
    80012486:	f2e50513          	addi	a0,a0,-210 # 8002d3b0 <__func__.0+0x2f8>
    8001248a:	1cd180ef          	jal	8002ae56 <printf>
    8001248e:	00042797          	auipc	a5,0x42
    80012492:	b837c783          	lbu	a5,-1149(a5) # 80054011 <excpt+0x1>
    80012496:	0001b597          	auipc	a1,0x1b
    8001249a:	ef258593          	addi	a1,a1,-270 # 8002d388 <__func__.0+0x2d0>
    8001249e:	c799                	beqz	a5,800124ac <external_interrupt_SEI+0x34a>
    800124a0:	57fd                	li	a5,-1
    800124a2:	6498                	ld	a4,8(s1)
    800124a4:	17fe                	slli	a5,a5,0x3f
    800124a6:	07a5                	addi	a5,a5,9
    800124a8:	40f70a63          	beq	a4,a5,800128bc <external_interrupt_SEI+0x75a>
    800124ac:	0001b517          	auipc	a0,0x1b
    800124b0:	f1c50513          	addi	a0,a0,-228 # 8002d3c8 <__func__.0+0x310>
    800124b4:	1a3180ef          	jal	8002ae56 <printf>
    800124b8:	00042797          	auipc	a5,0x42
    800124bc:	b597c783          	lbu	a5,-1191(a5) # 80054011 <excpt+0x1>
    800124c0:	c799                	beqz	a5,800124ce <external_interrupt_SEI+0x36c>
    800124c2:	57fd                	li	a5,-1
    800124c4:	6498                	ld	a4,8(s1)
    800124c6:	17fe                	slli	a5,a5,0x3f
    800124c8:	07a5                	addi	a5,a5,9
    800124ca:	30f70a63          	beq	a4,a5,800127de <external_interrupt_SEI+0x67c>
    800124ce:	0001b517          	auipc	a0,0x1b
    800124d2:	f0250513          	addi	a0,a0,-254 # 8002d3d0 <__func__.0+0x318>
    800124d6:	181180ef          	jal	8002ae56 <printf>
    800124da:	02900513          	li	a0,41
    800124de:	666170ef          	jal	80029b44 <putchar>
    800124e2:	4529                	li	a0,10
    800124e4:	660170ef          	jal	80029b44 <putchar>
    800124e8:	c801                	beqz	s0,800124f8 <external_interrupt_SEI+0x396>
    800124ea:	00042797          	auipc	a5,0x42
    800124ee:	b277c783          	lbu	a5,-1241(a5) # 80054011 <excpt+0x1>
    800124f2:	4401                	li	s0,0
    800124f4:	2a079963          	bnez	a5,800127a6 <external_interrupt_SEI+0x644>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    800124f8:	915ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800124fc:	4511                	li	a0,4
    800124fe:	a0bee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012502:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012506:	20000793          	li	a5,512
    8001250a:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001250e:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012512:	4509                	li	a0,2
    80012514:	9f5ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012518:	08200593          	li	a1,130
    8001251c:	0001f617          	auipc	a2,0x1f
    80012520:	e6c60613          	addi	a2,a2,-404 # 80031388 <__func__.0+0x42d0>
    80012524:	0001b517          	auipc	a0,0x1b
    80012528:	e8c50513          	addi	a0,a0,-372 # 8002d3b0 <__func__.0+0x2f8>
    8001252c:	12b180ef          	jal	8002ae56 <printf>
    80012530:	00042797          	auipc	a5,0x42
    80012534:	ae17c783          	lbu	a5,-1311(a5) # 80054011 <excpt+0x1>
    80012538:	0001b597          	auipc	a1,0x1b
    8001253c:	e5058593          	addi	a1,a1,-432 # 8002d388 <__func__.0+0x2d0>
    80012540:	c799                	beqz	a5,8001254e <external_interrupt_SEI+0x3ec>
    80012542:	57fd                	li	a5,-1
    80012544:	6498                	ld	a4,8(s1)
    80012546:	17fe                	slli	a5,a5,0x3f
    80012548:	07a5                	addi	a5,a5,9
    8001254a:	34f70963          	beq	a4,a5,8001289c <external_interrupt_SEI+0x73a>
    8001254e:	0001b517          	auipc	a0,0x1b
    80012552:	e7a50513          	addi	a0,a0,-390 # 8002d3c8 <__func__.0+0x310>
    80012556:	101180ef          	jal	8002ae56 <printf>
    8001255a:	00042797          	auipc	a5,0x42
    8001255e:	ab77c783          	lbu	a5,-1353(a5) # 80054011 <excpt+0x1>
    80012562:	c799                	beqz	a5,80012570 <external_interrupt_SEI+0x40e>
    80012564:	57fd                	li	a5,-1
    80012566:	6498                	ld	a4,8(s1)
    80012568:	17fe                	slli	a5,a5,0x3f
    8001256a:	07a5                	addi	a5,a5,9
    8001256c:	2af70963          	beq	a4,a5,8001281e <external_interrupt_SEI+0x6bc>
    80012570:	0001b517          	auipc	a0,0x1b
    80012574:	e6050513          	addi	a0,a0,-416 # 8002d3d0 <__func__.0+0x318>
    80012578:	0df180ef          	jal	8002ae56 <printf>
    8001257c:	02900513          	li	a0,41
    80012580:	5c4170ef          	jal	80029b44 <putchar>
    80012584:	4529                	li	a0,10
    80012586:	5be170ef          	jal	80029b44 <putchar>
    8001258a:	c801                	beqz	s0,8001259a <external_interrupt_SEI+0x438>
    8001258c:	00042797          	auipc	a5,0x42
    80012590:	a857c783          	lbu	a5,-1403(a5) # 80054011 <excpt+0x1>
    80012594:	4401                	li	s0,0
    80012596:	1e079a63          	bnez	a5,8001278a <external_interrupt_SEI+0x628>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    8001259a:	873ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001259e:	4511                	li	a0,4
    800125a0:	969ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800125a4:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800125a8:	20000793          	li	a5,512
    800125ac:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800125b0:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800125b4:	4509                	li	a0,2
    800125b6:	953ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800125ba:	08200593          	li	a1,130
    800125be:	0001f617          	auipc	a2,0x1f
    800125c2:	e2260613          	addi	a2,a2,-478 # 800313e0 <__func__.0+0x4328>
    800125c6:	0001b517          	auipc	a0,0x1b
    800125ca:	dea50513          	addi	a0,a0,-534 # 8002d3b0 <__func__.0+0x2f8>
    800125ce:	089180ef          	jal	8002ae56 <printf>
    800125d2:	00042797          	auipc	a5,0x42
    800125d6:	a3f7c783          	lbu	a5,-1473(a5) # 80054011 <excpt+0x1>
    800125da:	0001b597          	auipc	a1,0x1b
    800125de:	dae58593          	addi	a1,a1,-594 # 8002d388 <__func__.0+0x2d0>
    800125e2:	c799                	beqz	a5,800125f0 <external_interrupt_SEI+0x48e>
    800125e4:	57fd                	li	a5,-1
    800125e6:	6498                	ld	a4,8(s1)
    800125e8:	17fe                	slli	a5,a5,0x3f
    800125ea:	07a5                	addi	a5,a5,9
    800125ec:	32f70063          	beq	a4,a5,8001290c <external_interrupt_SEI+0x7aa>
    800125f0:	0001b517          	auipc	a0,0x1b
    800125f4:	dd850513          	addi	a0,a0,-552 # 8002d3c8 <__func__.0+0x310>
    800125f8:	05f180ef          	jal	8002ae56 <printf>
    800125fc:	00042797          	auipc	a5,0x42
    80012600:	a157c783          	lbu	a5,-1515(a5) # 80054011 <excpt+0x1>
    80012604:	c799                	beqz	a5,80012612 <external_interrupt_SEI+0x4b0>
    80012606:	57fd                	li	a5,-1
    80012608:	6498                	ld	a4,8(s1)
    8001260a:	17fe                	slli	a5,a5,0x3f
    8001260c:	07a5                	addi	a5,a5,9
    8001260e:	20f70063          	beq	a4,a5,8001280e <external_interrupt_SEI+0x6ac>
    80012612:	0001b517          	auipc	a0,0x1b
    80012616:	dbe50513          	addi	a0,a0,-578 # 8002d3d0 <__func__.0+0x318>
    8001261a:	03d180ef          	jal	8002ae56 <printf>
    8001261e:	02900513          	li	a0,41
    80012622:	522170ef          	jal	80029b44 <putchar>
    80012626:	4529                	li	a0,10
    80012628:	51c170ef          	jal	80029b44 <putchar>
    8001262c:	c801                	beqz	s0,8001263c <external_interrupt_SEI+0x4da>
    8001262e:	00042797          	auipc	a5,0x42
    80012632:	9e37c783          	lbu	a5,-1565(a5) # 80054011 <excpt+0x1>
    80012636:	4401                	li	s0,0
    80012638:	12079b63          	bnez	a5,8001276e <external_interrupt_SEI+0x60c>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8001263c:	fd0ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012640:	4511                	li	a0,4
    80012642:	8c7ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012646:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001264a:	20000793          	li	a5,512
    8001264e:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012652:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    80012656:	4509                	li	a0,2
    80012658:	8b1ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001265c:	08200593          	li	a1,130
    80012660:	0001f617          	auipc	a2,0x1f
    80012664:	dd860613          	addi	a2,a2,-552 # 80031438 <__func__.0+0x4380>
    80012668:	0001b517          	auipc	a0,0x1b
    8001266c:	d4850513          	addi	a0,a0,-696 # 8002d3b0 <__func__.0+0x2f8>
    80012670:	7e6180ef          	jal	8002ae56 <printf>
    80012674:	00042797          	auipc	a5,0x42
    80012678:	99d7c783          	lbu	a5,-1635(a5) # 80054011 <excpt+0x1>
    8001267c:	0001b597          	auipc	a1,0x1b
    80012680:	d0c58593          	addi	a1,a1,-756 # 8002d388 <__func__.0+0x2d0>
    80012684:	e789                	bnez	a5,8001268e <external_interrupt_SEI+0x52c>
    80012686:	0001b597          	auipc	a1,0x1b
    8001268a:	cf258593          	addi	a1,a1,-782 # 8002d378 <__func__.0+0x2c0>
    8001268e:	0001b517          	auipc	a0,0x1b
    80012692:	d3a50513          	addi	a0,a0,-710 # 8002d3c8 <__func__.0+0x310>
    80012696:	7c0180ef          	jal	8002ae56 <printf>
    8001269a:	00042797          	auipc	a5,0x42
    8001269e:	9777c783          	lbu	a5,-1673(a5) # 80054011 <excpt+0x1>
    800126a2:	1e079263          	bnez	a5,80012886 <external_interrupt_SEI+0x724>
    800126a6:	4529                	li	a0,10
    800126a8:	49c170ef          	jal	80029b44 <putchar>
    800126ac:	c419                	beqz	s0,800126ba <external_interrupt_SEI+0x558>
    800126ae:	00042417          	auipc	s0,0x42
    800126b2:	96344403          	lbu	s0,-1693(s0) # 80054011 <excpt+0x1>
    800126b6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    800126ba:	f52ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800126be:	4511                	li	a0,4
    800126c0:	849ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    800126c4:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800126c8:	20000793          	li	a5,512
    800126cc:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800126d0:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800126d4:	4509                	li	a0,2
    800126d6:	833ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800126da:	08200593          	li	a1,130
    800126de:	0001f617          	auipc	a2,0x1f
    800126e2:	d5a60613          	addi	a2,a2,-678 # 80031438 <__func__.0+0x4380>
    800126e6:	0001b517          	auipc	a0,0x1b
    800126ea:	cca50513          	addi	a0,a0,-822 # 8002d3b0 <__func__.0+0x2f8>
    800126ee:	768180ef          	jal	8002ae56 <printf>
    800126f2:	00042797          	auipc	a5,0x42
    800126f6:	91f7c783          	lbu	a5,-1761(a5) # 80054011 <excpt+0x1>
    800126fa:	0001b597          	auipc	a1,0x1b
    800126fe:	c8e58593          	addi	a1,a1,-882 # 8002d388 <__func__.0+0x2d0>
    80012702:	e789                	bnez	a5,8001270c <external_interrupt_SEI+0x5aa>
    80012704:	0001b597          	auipc	a1,0x1b
    80012708:	c7458593          	addi	a1,a1,-908 # 8002d378 <__func__.0+0x2c0>
    8001270c:	0001b517          	auipc	a0,0x1b
    80012710:	cbc50513          	addi	a0,a0,-836 # 8002d3c8 <__func__.0+0x310>
    80012714:	742180ef          	jal	8002ae56 <printf>
    80012718:	00042797          	auipc	a5,0x42
    8001271c:	8f97c783          	lbu	a5,-1799(a5) # 80054011 <excpt+0x1>
    80012720:	14079863          	bnez	a5,80012870 <external_interrupt_SEI+0x70e>
    80012724:	4529                	li	a0,10
    80012726:	41e170ef          	jal	80029b44 <putchar>
    8001272a:	c411                	beqz	s0,80012736 <external_interrupt_SEI+0x5d4>
    8001272c:	00042797          	auipc	a5,0x42
    80012730:	8e57c783          	lbu	a5,-1819(a5) # 80054011 <excpt+0x1>
    80012734:	c79d                	beqz	a5,80012762 <external_interrupt_SEI+0x600>
    80012736:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80012738:	0001b597          	auipc	a1,0x1b
    8001273c:	c5058593          	addi	a1,a1,-944 # 8002d388 <__func__.0+0x2d0>
    80012740:	0001b517          	auipc	a0,0x1b
    80012744:	cf050513          	addi	a0,a0,-784 # 8002d430 <__func__.0+0x378>
    80012748:	70e180ef          	jal	8002ae56 <printf>
    8001274c:	4511                	li	a0,4
    8001274e:	fbaee0ef          	jal	80000f08 <goto_priv>
    80012752:	8d2ef0ef          	jal	80001824 <reset_state>
}
    80012756:	60e2                	ld	ra,24(sp)
    80012758:	8522                	mv	a0,s0
    8001275a:	6442                	ld	s0,16(sp)
    8001275c:	64a2                	ld	s1,8(sp)
    8001275e:	6105                	addi	sp,sp,32
    80012760:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012762:	4405                	li	s0,1
    TEST_END();
    80012764:	0001b597          	auipc	a1,0x1b
    80012768:	c1458593          	addi	a1,a1,-1004 # 8002d378 <__func__.0+0x2c0>
    8001276c:	bfd1                	j	80012740 <external_interrupt_SEI+0x5de>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001276e:	57fd                	li	a5,-1
    80012770:	6498                	ld	a4,8(s1)
    80012772:	17fe                	slli	a5,a5,0x3f
    80012774:	07a5                	addi	a5,a5,9
    80012776:	ecf713e3          	bne	a4,a5,8001263c <external_interrupt_SEI+0x4da>
    8001277a:	00042417          	auipc	s0,0x42
    8001277e:	89a42403          	lw	s0,-1894(s0) # 80054014 <excpt+0x4>
    80012782:	1471                	addi	s0,s0,-4
    80012784:	00143413          	seqz	s0,s0
    80012788:	bd55                	j	8001263c <external_interrupt_SEI+0x4da>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001278a:	57fd                	li	a5,-1
    8001278c:	6498                	ld	a4,8(s1)
    8001278e:	17fe                	slli	a5,a5,0x3f
    80012790:	07a5                	addi	a5,a5,9
    80012792:	e0f714e3          	bne	a4,a5,8001259a <external_interrupt_SEI+0x438>
    80012796:	00042417          	auipc	s0,0x42
    8001279a:	87e42403          	lw	s0,-1922(s0) # 80054014 <excpt+0x4>
    8001279e:	1471                	addi	s0,s0,-4
    800127a0:	00143413          	seqz	s0,s0
    800127a4:	bbdd                	j	8001259a <external_interrupt_SEI+0x438>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800127a6:	57fd                	li	a5,-1
    800127a8:	6498                	ld	a4,8(s1)
    800127aa:	17fe                	slli	a5,a5,0x3f
    800127ac:	07a5                	addi	a5,a5,9
    800127ae:	d4f715e3          	bne	a4,a5,800124f8 <external_interrupt_SEI+0x396>
    800127b2:	00042417          	auipc	s0,0x42
    800127b6:	86242403          	lw	s0,-1950(s0) # 80054014 <excpt+0x4>
    800127ba:	1471                	addi	s0,s0,-4
    800127bc:	00143413          	seqz	s0,s0
    800127c0:	bb25                	j	800124f8 <external_interrupt_SEI+0x396>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800127c2:	57fd                	li	a5,-1
    800127c4:	6498                	ld	a4,8(s1)
    800127c6:	17fe                	slli	a5,a5,0x3f
    800127c8:	07a5                	addi	a5,a5,9
    800127ca:	b8f718e3          	bne	a4,a5,8001235a <external_interrupt_SEI+0x1f8>
    800127ce:	00042417          	auipc	s0,0x42
    800127d2:	84642403          	lw	s0,-1978(s0) # 80054014 <excpt+0x4>
    800127d6:	1471                	addi	s0,s0,-4
    800127d8:	00143413          	seqz	s0,s0
    800127dc:	bebd                	j	8001235a <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800127de:	00042717          	auipc	a4,0x42
    800127e2:	83672703          	lw	a4,-1994(a4) # 80054014 <excpt+0x4>
    800127e6:	4791                	li	a5,4
    800127e8:	cef713e3          	bne	a4,a5,800124ce <external_interrupt_SEI+0x36c>
    800127ec:	b9dd                	j	800124e2 <external_interrupt_SEI+0x380>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800127ee:	00042717          	auipc	a4,0x42
    800127f2:	82672703          	lw	a4,-2010(a4) # 80054014 <excpt+0x4>
    800127f6:	4791                	li	a5,4
    800127f8:	b2f71ce3          	bne	a4,a5,80012330 <external_interrupt_SEI+0x1ce>
    800127fc:	b6a1                	j	80012344 <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800127fe:	00042717          	auipc	a4,0x42
    80012802:	81672703          	lw	a4,-2026(a4) # 80054014 <excpt+0x4>
    80012806:	4791                	li	a5,4
    80012808:	9ef71ee3          	bne	a4,a5,80012204 <external_interrupt_SEI+0xa2>
    8001280c:	b431                	j	80012218 <external_interrupt_SEI+0xb6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001280e:	00042717          	auipc	a4,0x42
    80012812:	80672703          	lw	a4,-2042(a4) # 80054014 <excpt+0x4>
    80012816:	4791                	li	a5,4
    80012818:	def71de3          	bne	a4,a5,80012612 <external_interrupt_SEI+0x4b0>
    8001281c:	b529                	j	80012626 <external_interrupt_SEI+0x4c4>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001281e:	00041717          	auipc	a4,0x41
    80012822:	7f672703          	lw	a4,2038(a4) # 80054014 <excpt+0x4>
    80012826:	4791                	li	a5,4
    80012828:	d4f714e3          	bne	a4,a5,80012570 <external_interrupt_SEI+0x40e>
    8001282c:	bba1                	j	80012584 <external_interrupt_SEI+0x422>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8001282e:	0001b517          	auipc	a0,0x1b
    80012832:	ba250513          	addi	a0,a0,-1118 # 8002d3d0 <__func__.0+0x318>
    80012836:	620180ef          	jal	8002ae56 <printf>
    8001283a:	02900513          	li	a0,41
    8001283e:	306170ef          	jal	80029b44 <putchar>
    80012842:	b101                	j	80012442 <external_interrupt_SEI+0x2e0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80012844:	0001b517          	auipc	a0,0x1b
    80012848:	b8c50513          	addi	a0,a0,-1140 # 8002d3d0 <__func__.0+0x318>
    8001284c:	60a180ef          	jal	8002ae56 <printf>
    80012850:	02900513          	li	a0,41
    80012854:	2f0170ef          	jal	80029b44 <putchar>
    80012858:	b6b5                	j	800123c4 <external_interrupt_SEI+0x262>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001285a:	0001b517          	auipc	a0,0x1b
    8001285e:	b7650513          	addi	a0,a0,-1162 # 8002d3d0 <__func__.0+0x318>
    80012862:	5f4180ef          	jal	8002ae56 <printf>
    80012866:	02900513          	li	a0,41
    8001286a:	2da170ef          	jal	80029b44 <putchar>
    8001286e:	bc0d                	j	800122a0 <external_interrupt_SEI+0x13e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012870:	0001b517          	auipc	a0,0x1b
    80012874:	b6050513          	addi	a0,a0,-1184 # 8002d3d0 <__func__.0+0x318>
    80012878:	5de180ef          	jal	8002ae56 <printf>
    8001287c:	02900513          	li	a0,41
    80012880:	2c4170ef          	jal	80029b44 <putchar>
    80012884:	b545                	j	80012724 <external_interrupt_SEI+0x5c2>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012886:	0001b517          	auipc	a0,0x1b
    8001288a:	b4a50513          	addi	a0,a0,-1206 # 8002d3d0 <__func__.0+0x318>
    8001288e:	5c8180ef          	jal	8002ae56 <printf>
    80012892:	02900513          	li	a0,41
    80012896:	2ae170ef          	jal	80029b44 <putchar>
    8001289a:	b531                	j	800126a6 <external_interrupt_SEI+0x544>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001289c:	00041717          	auipc	a4,0x41
    800128a0:	77872703          	lw	a4,1912(a4) # 80054014 <excpt+0x4>
    800128a4:	4791                	li	a5,4
    800128a6:	0001b597          	auipc	a1,0x1b
    800128aa:	ad258593          	addi	a1,a1,-1326 # 8002d378 <__func__.0+0x2c0>
    800128ae:	caf700e3          	beq	a4,a5,8001254e <external_interrupt_SEI+0x3ec>
    800128b2:	0001b597          	auipc	a1,0x1b
    800128b6:	ad658593          	addi	a1,a1,-1322 # 8002d388 <__func__.0+0x2d0>
    800128ba:	b951                	j	8001254e <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128bc:	00041717          	auipc	a4,0x41
    800128c0:	75872703          	lw	a4,1880(a4) # 80054014 <excpt+0x4>
    800128c4:	4791                	li	a5,4
    800128c6:	0001b597          	auipc	a1,0x1b
    800128ca:	ab258593          	addi	a1,a1,-1358 # 8002d378 <__func__.0+0x2c0>
    800128ce:	bcf70fe3          	beq	a4,a5,800124ac <external_interrupt_SEI+0x34a>
    800128d2:	0001b597          	auipc	a1,0x1b
    800128d6:	ab658593          	addi	a1,a1,-1354 # 8002d388 <__func__.0+0x2d0>
    800128da:	bec9                	j	800124ac <external_interrupt_SEI+0x34a>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128dc:	00041417          	auipc	s0,0x41
    800128e0:	73842403          	lw	s0,1848(s0) # 80054014 <excpt+0x4>
    800128e4:	1471                	addi	s0,s0,-4
    800128e6:	00143413          	seqz	s0,s0
    800128ea:	b2b1                	j	80012236 <external_interrupt_SEI+0xd4>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800128ec:	00041717          	auipc	a4,0x41
    800128f0:	72872703          	lw	a4,1832(a4) # 80054014 <excpt+0x4>
    800128f4:	4791                	li	a5,4
    800128f6:	0001b597          	auipc	a1,0x1b
    800128fa:	a8258593          	addi	a1,a1,-1406 # 8002d378 <__func__.0+0x2c0>
    800128fe:	a0f708e3          	beq	a4,a5,8001230e <external_interrupt_SEI+0x1ac>
    80012902:	0001b597          	auipc	a1,0x1b
    80012906:	a8658593          	addi	a1,a1,-1402 # 8002d388 <__func__.0+0x2d0>
    8001290a:	b411                	j	8001230e <external_interrupt_SEI+0x1ac>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001290c:	00041717          	auipc	a4,0x41
    80012910:	70872703          	lw	a4,1800(a4) # 80054014 <excpt+0x4>
    80012914:	4791                	li	a5,4
    80012916:	0001b597          	auipc	a1,0x1b
    8001291a:	a6258593          	addi	a1,a1,-1438 # 8002d378 <__func__.0+0x2c0>
    8001291e:	ccf709e3          	beq	a4,a5,800125f0 <external_interrupt_SEI+0x48e>
    80012922:	0001b597          	auipc	a1,0x1b
    80012926:	a6658593          	addi	a1,a1,-1434 # 8002d388 <__func__.0+0x2d0>
    8001292a:	b1d9                	j	800125f0 <external_interrupt_SEI+0x48e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001292c:	00041717          	auipc	a4,0x41
    80012930:	6e872703          	lw	a4,1768(a4) # 80054014 <excpt+0x4>
    80012934:	4791                	li	a5,4
    80012936:	0001b597          	auipc	a1,0x1b
    8001293a:	a4258593          	addi	a1,a1,-1470 # 8002d378 <__func__.0+0x2c0>
    8001293e:	8af702e3          	beq	a4,a5,800121e2 <external_interrupt_SEI+0x80>
    80012942:	0001b597          	auipc	a1,0x1b
    80012946:	a4658593          	addi	a1,a1,-1466 # 8002d388 <__func__.0+0x2d0>
    8001294a:	899ff06f          	j	800121e2 <external_interrupt_SEI+0x80>

000000008001294e <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8001294e:	1101                	addi	sp,sp,-32

    TEST_START();
    80012950:	00019597          	auipc	a1,0x19
    80012954:	2c058593          	addi	a1,a1,704 # 8002bc10 <__func__.0>
    80012958:	0001b517          	auipc	a0,0x1b
    8001295c:	a4050513          	addi	a0,a0,-1472 # 8002d398 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    80012960:	ec06                	sd	ra,24(sp)
    80012962:	e822                	sd	s0,16(sp)
    80012964:	e426                	sd	s1,8(sp)
    TEST_START();
    80012966:	4f0180ef          	jal	8002ae56 <printf>
    8001296a:	4529                	li	a0,10
    8001296c:	1d8170ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80012970:	c9cee0ef          	jal	80000e0c <test_setup_except_function>

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    80012974:	4511                	li	a0,4
    80012976:	d92ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001297a:	40000793          	li	a5,1024
    8001297e:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    80012982:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012986:	4509                	li	a0,2
    80012988:	d80ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8001298c:	08200593          	li	a1,130
    80012990:	0001f617          	auipc	a2,0x1f
    80012994:	af860613          	addi	a2,a2,-1288 # 80031488 <__func__.0+0x43d0>
    80012998:	0001b517          	auipc	a0,0x1b
    8001299c:	a1850513          	addi	a0,a0,-1512 # 8002d3b0 <__func__.0+0x2f8>
    800129a0:	4b6180ef          	jal	8002ae56 <printf>
    800129a4:	00041797          	auipc	a5,0x41
    800129a8:	66d7c783          	lbu	a5,1645(a5) # 80054011 <excpt+0x1>
    800129ac:	00041497          	auipc	s1,0x41
    800129b0:	66448493          	addi	s1,s1,1636 # 80054010 <excpt>
    800129b4:	0001b597          	auipc	a1,0x1b
    800129b8:	9d458593          	addi	a1,a1,-1580 # 8002d388 <__func__.0+0x2d0>
    800129bc:	c799                	beqz	a5,800129ca <external_interrupt_VSEI+0x7c>
    800129be:	57fd                	li	a5,-1
    800129c0:	6498                	ld	a4,8(s1)
    800129c2:	17fe                	slli	a5,a5,0x3f
    800129c4:	07a9                	addi	a5,a5,10
    800129c6:	62f70463          	beq	a4,a5,80012fee <external_interrupt_VSEI+0x6a0>
    800129ca:	0001b517          	auipc	a0,0x1b
    800129ce:	9fe50513          	addi	a0,a0,-1538 # 8002d3c8 <__func__.0+0x310>
    800129d2:	484180ef          	jal	8002ae56 <printf>
    800129d6:	00041797          	auipc	a5,0x41
    800129da:	63b7c783          	lbu	a5,1595(a5) # 80054011 <excpt+0x1>
    800129de:	c799                	beqz	a5,800129ec <external_interrupt_VSEI+0x9e>
    800129e0:	57fd                	li	a5,-1
    800129e2:	6498                	ld	a4,8(s1)
    800129e4:	17fe                	slli	a5,a5,0x3f
    800129e6:	07a9                	addi	a5,a5,10
    800129e8:	54f70563          	beq	a4,a5,80012f32 <external_interrupt_VSEI+0x5e4>
    800129ec:	0001b517          	auipc	a0,0x1b
    800129f0:	9e450513          	addi	a0,a0,-1564 # 8002d3d0 <__func__.0+0x318>
    800129f4:	462180ef          	jal	8002ae56 <printf>
    800129f8:	02900513          	li	a0,41
    800129fc:	148170ef          	jal	80029b44 <putchar>
    80012a00:	4529                	li	a0,10
    80012a02:	142170ef          	jal	80029b44 <putchar>
    80012a06:	00041797          	auipc	a5,0x41
    80012a0a:	60b7c783          	lbu	a5,1547(a5) # 80054011 <excpt+0x1>
    80012a0e:	4401                	li	s0,0
    80012a10:	c799                	beqz	a5,80012a1e <external_interrupt_VSEI+0xd0>
    80012a12:	57fd                	li	a5,-1
    80012a14:	6498                	ld	a4,8(s1)
    80012a16:	17fe                	slli	a5,a5,0x3f
    80012a18:	07a9                	addi	a5,a5,10
    80012a1a:	5af70263          	beq	a4,a5,80012fbe <external_interrupt_VSEI+0x670>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    80012a1e:	beeee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012a22:	4511                	li	a0,4
    80012a24:	ce4ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012a28:	40000793          	li	a5,1024
    80012a2c:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012a30:	577d                	li	a4,-1
    80012a32:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012a36:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012a3a:	4509                	li	a0,2
    80012a3c:	cccee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012a40:	08200593          	li	a1,130
    80012a44:	0001f617          	auipc	a2,0x1f
    80012a48:	a9460613          	addi	a2,a2,-1388 # 800314d8 <__func__.0+0x4420>
    80012a4c:	0001b517          	auipc	a0,0x1b
    80012a50:	96450513          	addi	a0,a0,-1692 # 8002d3b0 <__func__.0+0x2f8>
    80012a54:	402180ef          	jal	8002ae56 <printf>
    80012a58:	00041797          	auipc	a5,0x41
    80012a5c:	5b97c783          	lbu	a5,1465(a5) # 80054011 <excpt+0x1>
    80012a60:	0001b597          	auipc	a1,0x1b
    80012a64:	92858593          	addi	a1,a1,-1752 # 8002d388 <__func__.0+0x2d0>
    80012a68:	c799                	beqz	a5,80012a76 <external_interrupt_VSEI+0x128>
    80012a6a:	57fd                	li	a5,-1
    80012a6c:	6498                	ld	a4,8(s1)
    80012a6e:	17fe                	slli	a5,a5,0x3f
    80012a70:	07a9                	addi	a5,a5,10
    80012a72:	54f70e63          	beq	a4,a5,80012fce <external_interrupt_VSEI+0x680>
    80012a76:	0001b517          	auipc	a0,0x1b
    80012a7a:	95250513          	addi	a0,a0,-1710 # 8002d3c8 <__func__.0+0x310>
    80012a7e:	3d8180ef          	jal	8002ae56 <printf>
    80012a82:	00041797          	auipc	a5,0x41
    80012a86:	58f7c783          	lbu	a5,1423(a5) # 80054011 <excpt+0x1>
    80012a8a:	c799                	beqz	a5,80012a98 <external_interrupt_VSEI+0x14a>
    80012a8c:	57fd                	li	a5,-1
    80012a8e:	6498                	ld	a4,8(s1)
    80012a90:	17fe                	slli	a5,a5,0x3f
    80012a92:	07a9                	addi	a5,a5,10
    80012a94:	46f70f63          	beq	a4,a5,80012f12 <external_interrupt_VSEI+0x5c4>
    80012a98:	0001b517          	auipc	a0,0x1b
    80012a9c:	93850513          	addi	a0,a0,-1736 # 8002d3d0 <__func__.0+0x318>
    80012aa0:	3b6180ef          	jal	8002ae56 <printf>
    80012aa4:	02900513          	li	a0,41
    80012aa8:	09c170ef          	jal	80029b44 <putchar>
    80012aac:	4529                	li	a0,10
    80012aae:	096170ef          	jal	80029b44 <putchar>
    80012ab2:	c801                	beqz	s0,80012ac2 <external_interrupt_VSEI+0x174>
    80012ab4:	00041797          	auipc	a5,0x41
    80012ab8:	55d7c783          	lbu	a5,1373(a5) # 80054011 <excpt+0x1>
    80012abc:	4401                	li	s0,0
    80012abe:	42079c63          	bnez	a5,80012ef6 <external_interrupt_VSEI+0x5a8>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012ac2:	b4aee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012ac6:	4511                	li	a0,4
    80012ac8:	c40ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012acc:	40000793          	li	a5,1024
    80012ad0:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012ad4:	577d                	li	a4,-1
    80012ad6:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80012ada:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012ade:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012ae2:	4509                	li	a0,2
    80012ae4:	c24ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012ae8:	08200593          	li	a1,130
    80012aec:	0001f617          	auipc	a2,0x1f
    80012af0:	a4c60613          	addi	a2,a2,-1460 # 80031538 <__func__.0+0x4480>
    80012af4:	0001b517          	auipc	a0,0x1b
    80012af8:	8bc50513          	addi	a0,a0,-1860 # 8002d3b0 <__func__.0+0x2f8>
    80012afc:	35a180ef          	jal	8002ae56 <printf>
    80012b00:	00041797          	auipc	a5,0x41
    80012b04:	5117c783          	lbu	a5,1297(a5) # 80054011 <excpt+0x1>
    80012b08:	0001b597          	auipc	a1,0x1b
    80012b0c:	88058593          	addi	a1,a1,-1920 # 8002d388 <__func__.0+0x2d0>
    80012b10:	c799                	beqz	a5,80012b1e <external_interrupt_VSEI+0x1d0>
    80012b12:	57fd                	li	a5,-1
    80012b14:	6498                	ld	a4,8(s1)
    80012b16:	17fe                	slli	a5,a5,0x3f
    80012b18:	07a9                	addi	a5,a5,10
    80012b1a:	4ef70a63          	beq	a4,a5,8001300e <external_interrupt_VSEI+0x6c0>
    80012b1e:	0001b517          	auipc	a0,0x1b
    80012b22:	8aa50513          	addi	a0,a0,-1878 # 8002d3c8 <__func__.0+0x310>
    80012b26:	330180ef          	jal	8002ae56 <printf>
    80012b2a:	00041797          	auipc	a5,0x41
    80012b2e:	4e77c783          	lbu	a5,1255(a5) # 80054011 <excpt+0x1>
    80012b32:	c799                	beqz	a5,80012b40 <external_interrupt_VSEI+0x1f2>
    80012b34:	57fd                	li	a5,-1
    80012b36:	6498                	ld	a4,8(s1)
    80012b38:	17fe                	slli	a5,a5,0x3f
    80012b3a:	07a9                	addi	a5,a5,10
    80012b3c:	3ef70363          	beq	a4,a5,80012f22 <external_interrupt_VSEI+0x5d4>
    80012b40:	0001b517          	auipc	a0,0x1b
    80012b44:	89050513          	addi	a0,a0,-1904 # 8002d3d0 <__func__.0+0x318>
    80012b48:	30e180ef          	jal	8002ae56 <printf>
    80012b4c:	02900513          	li	a0,41
    80012b50:	7f5160ef          	jal	80029b44 <putchar>
    80012b54:	4529                	li	a0,10
    80012b56:	7ef160ef          	jal	80029b44 <putchar>
    80012b5a:	c801                	beqz	s0,80012b6a <external_interrupt_VSEI+0x21c>
    80012b5c:	00041797          	auipc	a5,0x41
    80012b60:	4b57c783          	lbu	a5,1205(a5) # 80054011 <excpt+0x1>
    80012b64:	4401                	li	s0,0
    80012b66:	36079a63          	bnez	a5,80012eda <external_interrupt_VSEI+0x58c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012b6a:	aa2ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012b6e:	4511                	li	a0,4
    80012b70:	b98ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012b74:	40000793          	li	a5,1024
    80012b78:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012b7c:	577d                	li	a4,-1
    80012b7e:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80012b82:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012b86:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012b8a:	4509                	li	a0,2
    80012b8c:	b7cee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012b90:	08200593          	li	a1,130
    80012b94:	0001f617          	auipc	a2,0x1f
    80012b98:	a1460613          	addi	a2,a2,-1516 # 800315a8 <__func__.0+0x44f0>
    80012b9c:	0001b517          	auipc	a0,0x1b
    80012ba0:	81450513          	addi	a0,a0,-2028 # 8002d3b0 <__func__.0+0x2f8>
    80012ba4:	2b2180ef          	jal	8002ae56 <printf>
    80012ba8:	00041797          	auipc	a5,0x41
    80012bac:	4697c783          	lbu	a5,1129(a5) # 80054011 <excpt+0x1>
    80012bb0:	0001a597          	auipc	a1,0x1a
    80012bb4:	7d858593          	addi	a1,a1,2008 # 8002d388 <__func__.0+0x2d0>
    80012bb8:	e789                	bnez	a5,80012bc2 <external_interrupt_VSEI+0x274>
    80012bba:	0001a597          	auipc	a1,0x1a
    80012bbe:	7be58593          	addi	a1,a1,1982 # 8002d378 <__func__.0+0x2c0>
    80012bc2:	0001b517          	auipc	a0,0x1b
    80012bc6:	80650513          	addi	a0,a0,-2042 # 8002d3c8 <__func__.0+0x310>
    80012bca:	28c180ef          	jal	8002ae56 <printf>
    80012bce:	00041797          	auipc	a5,0x41
    80012bd2:	4437c783          	lbu	a5,1091(a5) # 80054011 <excpt+0x1>
    80012bd6:	3a079963          	bnez	a5,80012f88 <external_interrupt_VSEI+0x63a>
    80012bda:	4529                	li	a0,10
    80012bdc:	769160ef          	jal	80029b44 <putchar>
    80012be0:	c419                	beqz	s0,80012bee <external_interrupt_VSEI+0x2a0>
    80012be2:	00041417          	auipc	s0,0x41
    80012be6:	42f44403          	lbu	s0,1071(s0) # 80054011 <excpt+0x1>
    80012bea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80012bee:	a1eee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012bf2:	4511                	li	a0,4
    80012bf4:	b14ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012bf8:	40000793          	li	a5,1024
    80012bfc:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012c00:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012c04:	4509                	li	a0,2
    80012c06:	b02ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012c0a:	08200593          	li	a1,130
    80012c0e:	0001f617          	auipc	a2,0x1f
    80012c12:	9da60613          	addi	a2,a2,-1574 # 800315e8 <__func__.0+0x4530>
    80012c16:	0001a517          	auipc	a0,0x1a
    80012c1a:	79a50513          	addi	a0,a0,1946 # 8002d3b0 <__func__.0+0x2f8>
    80012c1e:	238180ef          	jal	8002ae56 <printf>
    80012c22:	00041797          	auipc	a5,0x41
    80012c26:	3ef7c783          	lbu	a5,1007(a5) # 80054011 <excpt+0x1>
    80012c2a:	0001a597          	auipc	a1,0x1a
    80012c2e:	75e58593          	addi	a1,a1,1886 # 8002d388 <__func__.0+0x2d0>
    80012c32:	e799                	bnez	a5,80012c40 <external_interrupt_VSEI+0x2f2>
    80012c34:	57fd                	li	a5,-1
    80012c36:	6498                	ld	a4,8(s1)
    80012c38:	17fe                	slli	a5,a5,0x3f
    80012c3a:	07a9                	addi	a5,a5,10
    80012c3c:	40f70963          	beq	a4,a5,8001304e <external_interrupt_VSEI+0x700>
    80012c40:	0001a517          	auipc	a0,0x1a
    80012c44:	78850513          	addi	a0,a0,1928 # 8002d3c8 <__func__.0+0x310>
    80012c48:	20e180ef          	jal	8002ae56 <printf>
    80012c4c:	00041797          	auipc	a5,0x41
    80012c50:	3c57c783          	lbu	a5,965(a5) # 80054011 <excpt+0x1>
    80012c54:	e799                	bnez	a5,80012c62 <external_interrupt_VSEI+0x314>
    80012c56:	57fd                	li	a5,-1
    80012c58:	6498                	ld	a4,8(s1)
    80012c5a:	17fe                	slli	a5,a5,0x3f
    80012c5c:	07a9                	addi	a5,a5,10
    80012c5e:	2ef70263          	beq	a4,a5,80012f42 <external_interrupt_VSEI+0x5f4>
    80012c62:	0001a517          	auipc	a0,0x1a
    80012c66:	76e50513          	addi	a0,a0,1902 # 8002d3d0 <__func__.0+0x318>
    80012c6a:	1ec180ef          	jal	8002ae56 <printf>
    80012c6e:	02900513          	li	a0,41
    80012c72:	6d3160ef          	jal	80029b44 <putchar>
    80012c76:	4529                	li	a0,10
    80012c78:	6cd160ef          	jal	80029b44 <putchar>
    80012c7c:	c801                	beqz	s0,80012c8c <external_interrupt_VSEI+0x33e>
    80012c7e:	00041797          	auipc	a5,0x41
    80012c82:	3937c783          	lbu	a5,915(a5) # 80054011 <excpt+0x1>
    80012c86:	4401                	li	s0,0
    80012c88:	22078b63          	beqz	a5,80012ebe <external_interrupt_VSEI+0x570>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80012c8c:	980ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c90:	4511                	li	a0,4
    80012c92:	a76ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012c96:	40000793          	li	a5,1024
    80012c9a:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012c9e:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012ca2:	57fd                	li	a5,-1
    80012ca4:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80012ca8:	4509                	li	a0,2
    80012caa:	a5eee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012cae:	08200593          	li	a1,130
    80012cb2:	0001f617          	auipc	a2,0x1f
    80012cb6:	98660613          	addi	a2,a2,-1658 # 80031638 <__func__.0+0x4580>
    80012cba:	0001a517          	auipc	a0,0x1a
    80012cbe:	6f650513          	addi	a0,a0,1782 # 8002d3b0 <__func__.0+0x2f8>
    80012cc2:	194180ef          	jal	8002ae56 <printf>
    80012cc6:	00041797          	auipc	a5,0x41
    80012cca:	34b7c783          	lbu	a5,843(a5) # 80054011 <excpt+0x1>
    80012cce:	0001a597          	auipc	a1,0x1a
    80012cd2:	6ba58593          	addi	a1,a1,1722 # 8002d388 <__func__.0+0x2d0>
    80012cd6:	e799                	bnez	a5,80012ce4 <external_interrupt_VSEI+0x396>
    80012cd8:	57fd                	li	a5,-1
    80012cda:	6498                	ld	a4,8(s1)
    80012cdc:	17fe                	slli	a5,a5,0x3f
    80012cde:	07a9                	addi	a5,a5,10
    80012ce0:	2af70f63          	beq	a4,a5,80012f9e <external_interrupt_VSEI+0x650>
    80012ce4:	0001a517          	auipc	a0,0x1a
    80012ce8:	6e450513          	addi	a0,a0,1764 # 8002d3c8 <__func__.0+0x310>
    80012cec:	16a180ef          	jal	8002ae56 <printf>
    80012cf0:	00041797          	auipc	a5,0x41
    80012cf4:	3217c783          	lbu	a5,801(a5) # 80054011 <excpt+0x1>
    80012cf8:	e799                	bnez	a5,80012d06 <external_interrupt_VSEI+0x3b8>
    80012cfa:	57fd                	li	a5,-1
    80012cfc:	6498                	ld	a4,8(s1)
    80012cfe:	17fe                	slli	a5,a5,0x3f
    80012d00:	07a9                	addi	a5,a5,10
    80012d02:	26f70063          	beq	a4,a5,80012f62 <external_interrupt_VSEI+0x614>
    80012d06:	0001a517          	auipc	a0,0x1a
    80012d0a:	6ca50513          	addi	a0,a0,1738 # 8002d3d0 <__func__.0+0x318>
    80012d0e:	148180ef          	jal	8002ae56 <printf>
    80012d12:	02900513          	li	a0,41
    80012d16:	62f160ef          	jal	80029b44 <putchar>
    80012d1a:	4529                	li	a0,10
    80012d1c:	629160ef          	jal	80029b44 <putchar>
    80012d20:	c801                	beqz	s0,80012d30 <external_interrupt_VSEI+0x3e2>
    80012d22:	00041797          	auipc	a5,0x41
    80012d26:	2ef7c783          	lbu	a5,751(a5) # 80054011 <excpt+0x1>
    80012d2a:	4401                	li	s0,0
    80012d2c:	16078b63          	beqz	a5,80012ea2 <external_interrupt_VSEI+0x554>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012d30:	8dcee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012d34:	4511                	li	a0,4
    80012d36:	9d2ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012d3a:	40000793          	li	a5,1024
    80012d3e:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012d42:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012d46:	57fd                	li	a5,-1
    80012d48:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012d4c:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80012d50:	4509                	li	a0,2
    80012d52:	9b6ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012d56:	08200593          	li	a1,130
    80012d5a:	0001f617          	auipc	a2,0x1f
    80012d5e:	93e60613          	addi	a2,a2,-1730 # 80031698 <__func__.0+0x45e0>
    80012d62:	0001a517          	auipc	a0,0x1a
    80012d66:	64e50513          	addi	a0,a0,1614 # 8002d3b0 <__func__.0+0x2f8>
    80012d6a:	0ec180ef          	jal	8002ae56 <printf>
    80012d6e:	00041797          	auipc	a5,0x41
    80012d72:	2a37c783          	lbu	a5,675(a5) # 80054011 <excpt+0x1>
    80012d76:	0001a597          	auipc	a1,0x1a
    80012d7a:	61258593          	addi	a1,a1,1554 # 8002d388 <__func__.0+0x2d0>
    80012d7e:	e799                	bnez	a5,80012d8c <external_interrupt_VSEI+0x43e>
    80012d80:	57fd                	li	a5,-1
    80012d82:	6498                	ld	a4,8(s1)
    80012d84:	17fe                	slli	a5,a5,0x3f
    80012d86:	07a9                	addi	a5,a5,10
    80012d88:	2af70363          	beq	a4,a5,8001302e <external_interrupt_VSEI+0x6e0>
    80012d8c:	0001a517          	auipc	a0,0x1a
    80012d90:	63c50513          	addi	a0,a0,1596 # 8002d3c8 <__func__.0+0x310>
    80012d94:	0c2180ef          	jal	8002ae56 <printf>
    80012d98:	00041797          	auipc	a5,0x41
    80012d9c:	2797c783          	lbu	a5,633(a5) # 80054011 <excpt+0x1>
    80012da0:	e799                	bnez	a5,80012dae <external_interrupt_VSEI+0x460>
    80012da2:	57fd                	li	a5,-1
    80012da4:	6498                	ld	a4,8(s1)
    80012da6:	17fe                	slli	a5,a5,0x3f
    80012da8:	07a9                	addi	a5,a5,10
    80012daa:	1af70463          	beq	a4,a5,80012f52 <external_interrupt_VSEI+0x604>
    80012dae:	0001a517          	auipc	a0,0x1a
    80012db2:	62250513          	addi	a0,a0,1570 # 8002d3d0 <__func__.0+0x318>
    80012db6:	0a0180ef          	jal	8002ae56 <printf>
    80012dba:	02900513          	li	a0,41
    80012dbe:	587160ef          	jal	80029b44 <putchar>
    80012dc2:	4529                	li	a0,10
    80012dc4:	581160ef          	jal	80029b44 <putchar>
    80012dc8:	c419                	beqz	s0,80012dd6 <external_interrupt_VSEI+0x488>
    80012dca:	00041797          	auipc	a5,0x41
    80012dce:	2477c783          	lbu	a5,583(a5) # 80054011 <excpt+0x1>
    80012dd2:	4401                	li	s0,0
    80012dd4:	cbcd                	beqz	a5,80012e86 <external_interrupt_VSEI+0x538>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012dd6:	836ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012dda:	4511                	li	a0,4
    80012ddc:	92cee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012de0:	40000793          	li	a5,1024
    80012de4:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012de8:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012dec:	4509                	li	a0,2
    80012dee:	91aee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012df2:	08200593          	li	a1,130
    80012df6:	0001f617          	auipc	a2,0x1f
    80012dfa:	91260613          	addi	a2,a2,-1774 # 80031708 <__func__.0+0x4650>
    80012dfe:	0001a517          	auipc	a0,0x1a
    80012e02:	5b250513          	addi	a0,a0,1458 # 8002d3b0 <__func__.0+0x2f8>
    80012e06:	050180ef          	jal	8002ae56 <printf>
    80012e0a:	00041797          	auipc	a5,0x41
    80012e0e:	2077c783          	lbu	a5,519(a5) # 80054011 <excpt+0x1>
    80012e12:	0001a597          	auipc	a1,0x1a
    80012e16:	57658593          	addi	a1,a1,1398 # 8002d388 <__func__.0+0x2d0>
    80012e1a:	e789                	bnez	a5,80012e24 <external_interrupt_VSEI+0x4d6>
    80012e1c:	0001a597          	auipc	a1,0x1a
    80012e20:	55c58593          	addi	a1,a1,1372 # 8002d378 <__func__.0+0x2c0>
    80012e24:	0001a517          	auipc	a0,0x1a
    80012e28:	5a450513          	addi	a0,a0,1444 # 8002d3c8 <__func__.0+0x310>
    80012e2c:	02a180ef          	jal	8002ae56 <printf>
    80012e30:	00041797          	auipc	a5,0x41
    80012e34:	1e17c783          	lbu	a5,481(a5) # 80054011 <excpt+0x1>
    80012e38:	12079d63          	bnez	a5,80012f72 <external_interrupt_VSEI+0x624>
    80012e3c:	4529                	li	a0,10
    80012e3e:	507160ef          	jal	80029b44 <putchar>
    80012e42:	c411                	beqz	s0,80012e4e <external_interrupt_VSEI+0x500>
    80012e44:	00041797          	auipc	a5,0x41
    80012e48:	1cd7c783          	lbu	a5,461(a5) # 80054011 <excpt+0x1>
    80012e4c:	c79d                	beqz	a5,80012e7a <external_interrupt_VSEI+0x52c>
    80012e4e:	4401                	li	s0,0





    TEST_END();
    80012e50:	0001a597          	auipc	a1,0x1a
    80012e54:	53858593          	addi	a1,a1,1336 # 8002d388 <__func__.0+0x2d0>
    80012e58:	0001a517          	auipc	a0,0x1a
    80012e5c:	5d850513          	addi	a0,a0,1496 # 8002d430 <__func__.0+0x378>
    80012e60:	7f7170ef          	jal	8002ae56 <printf>
    80012e64:	4511                	li	a0,4
    80012e66:	8a2ee0ef          	jal	80000f08 <goto_priv>
    80012e6a:	9bbee0ef          	jal	80001824 <reset_state>
}
    80012e6e:	60e2                	ld	ra,24(sp)
    80012e70:	8522                	mv	a0,s0
    80012e72:	6442                	ld	s0,16(sp)
    80012e74:	64a2                	ld	s1,8(sp)
    80012e76:	6105                	addi	sp,sp,32
    80012e78:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012e7a:	4405                	li	s0,1
    TEST_END();
    80012e7c:	0001a597          	auipc	a1,0x1a
    80012e80:	4fc58593          	addi	a1,a1,1276 # 8002d378 <__func__.0+0x2c0>
    80012e84:	bfd1                	j	80012e58 <external_interrupt_VSEI+0x50a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012e86:	57fd                	li	a5,-1
    80012e88:	6498                	ld	a4,8(s1)
    80012e8a:	17fe                	slli	a5,a5,0x3f
    80012e8c:	07a9                	addi	a5,a5,10
    80012e8e:	f4f714e3          	bne	a4,a5,80012dd6 <external_interrupt_VSEI+0x488>
    80012e92:	00041417          	auipc	s0,0x41
    80012e96:	18242403          	lw	s0,386(s0) # 80054014 <excpt+0x4>
    80012e9a:	1479                	addi	s0,s0,-2
    80012e9c:	00143413          	seqz	s0,s0
    80012ea0:	bf1d                	j	80012dd6 <external_interrupt_VSEI+0x488>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012ea2:	57fd                	li	a5,-1
    80012ea4:	6498                	ld	a4,8(s1)
    80012ea6:	17fe                	slli	a5,a5,0x3f
    80012ea8:	07a9                	addi	a5,a5,10
    80012eaa:	e8f713e3          	bne	a4,a5,80012d30 <external_interrupt_VSEI+0x3e2>
    80012eae:	00041417          	auipc	s0,0x41
    80012eb2:	16642403          	lw	s0,358(s0) # 80054014 <excpt+0x4>
    80012eb6:	1475                	addi	s0,s0,-3
    80012eb8:	00143413          	seqz	s0,s0
    80012ebc:	bd95                	j	80012d30 <external_interrupt_VSEI+0x3e2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012ebe:	57fd                	li	a5,-1
    80012ec0:	6498                	ld	a4,8(s1)
    80012ec2:	17fe                	slli	a5,a5,0x3f
    80012ec4:	07a9                	addi	a5,a5,10
    80012ec6:	dcf713e3          	bne	a4,a5,80012c8c <external_interrupt_VSEI+0x33e>
    80012eca:	00041417          	auipc	s0,0x41
    80012ece:	14a42403          	lw	s0,330(s0) # 80054014 <excpt+0x4>
    80012ed2:	1471                	addi	s0,s0,-4
    80012ed4:	00143413          	seqz	s0,s0
    80012ed8:	bb55                	j	80012c8c <external_interrupt_VSEI+0x33e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012eda:	57fd                	li	a5,-1
    80012edc:	6498                	ld	a4,8(s1)
    80012ede:	17fe                	slli	a5,a5,0x3f
    80012ee0:	07a9                	addi	a5,a5,10
    80012ee2:	c8f714e3          	bne	a4,a5,80012b6a <external_interrupt_VSEI+0x21c>
    80012ee6:	00041417          	auipc	s0,0x41
    80012eea:	12e42403          	lw	s0,302(s0) # 80054014 <excpt+0x4>
    80012eee:	1479                	addi	s0,s0,-2
    80012ef0:	00143413          	seqz	s0,s0
    80012ef4:	b99d                	j	80012b6a <external_interrupt_VSEI+0x21c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012ef6:	57fd                	li	a5,-1
    80012ef8:	6498                	ld	a4,8(s1)
    80012efa:	17fe                	slli	a5,a5,0x3f
    80012efc:	07a9                	addi	a5,a5,10
    80012efe:	bcf712e3          	bne	a4,a5,80012ac2 <external_interrupt_VSEI+0x174>
    80012f02:	00041417          	auipc	s0,0x41
    80012f06:	11242403          	lw	s0,274(s0) # 80054014 <excpt+0x4>
    80012f0a:	1475                	addi	s0,s0,-3
    80012f0c:	00143413          	seqz	s0,s0
    80012f10:	be4d                	j	80012ac2 <external_interrupt_VSEI+0x174>
    80012f12:	00041717          	auipc	a4,0x41
    80012f16:	10272703          	lw	a4,258(a4) # 80054014 <excpt+0x4>
    80012f1a:	478d                	li	a5,3
    80012f1c:	b6f71ee3          	bne	a4,a5,80012a98 <external_interrupt_VSEI+0x14a>
    80012f20:	b671                	j	80012aac <external_interrupt_VSEI+0x15e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012f22:	00041717          	auipc	a4,0x41
    80012f26:	0f272703          	lw	a4,242(a4) # 80054014 <excpt+0x4>
    80012f2a:	4789                	li	a5,2
    80012f2c:	c0f71ae3          	bne	a4,a5,80012b40 <external_interrupt_VSEI+0x1f2>
    80012f30:	b115                	j	80012b54 <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f32:	00041717          	auipc	a4,0x41
    80012f36:	0e272703          	lw	a4,226(a4) # 80054014 <excpt+0x4>
    80012f3a:	4791                	li	a5,4
    80012f3c:	aaf718e3          	bne	a4,a5,800129ec <external_interrupt_VSEI+0x9e>
    80012f40:	b4c1                	j	80012a00 <external_interrupt_VSEI+0xb2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012f42:	00041717          	auipc	a4,0x41
    80012f46:	0d272703          	lw	a4,210(a4) # 80054014 <excpt+0x4>
    80012f4a:	4791                	li	a5,4
    80012f4c:	d0f71be3          	bne	a4,a5,80012c62 <external_interrupt_VSEI+0x314>
    80012f50:	b31d                	j	80012c76 <external_interrupt_VSEI+0x328>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012f52:	00041717          	auipc	a4,0x41
    80012f56:	0c272703          	lw	a4,194(a4) # 80054014 <excpt+0x4>
    80012f5a:	4789                	li	a5,2
    80012f5c:	e4f719e3          	bne	a4,a5,80012dae <external_interrupt_VSEI+0x460>
    80012f60:	b58d                	j	80012dc2 <external_interrupt_VSEI+0x474>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f62:	00041717          	auipc	a4,0x41
    80012f66:	0b272703          	lw	a4,178(a4) # 80054014 <excpt+0x4>
    80012f6a:	478d                	li	a5,3
    80012f6c:	d8f71de3          	bne	a4,a5,80012d06 <external_interrupt_VSEI+0x3b8>
    80012f70:	b36d                	j	80012d1a <external_interrupt_VSEI+0x3cc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012f72:	0001a517          	auipc	a0,0x1a
    80012f76:	45e50513          	addi	a0,a0,1118 # 8002d3d0 <__func__.0+0x318>
    80012f7a:	6dd170ef          	jal	8002ae56 <printf>
    80012f7e:	02900513          	li	a0,41
    80012f82:	3c3160ef          	jal	80029b44 <putchar>
    80012f86:	bd5d                	j	80012e3c <external_interrupt_VSEI+0x4ee>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012f88:	0001a517          	auipc	a0,0x1a
    80012f8c:	44850513          	addi	a0,a0,1096 # 8002d3d0 <__func__.0+0x318>
    80012f90:	6c7170ef          	jal	8002ae56 <printf>
    80012f94:	02900513          	li	a0,41
    80012f98:	3ad160ef          	jal	80029b44 <putchar>
    80012f9c:	b93d                	j	80012bda <external_interrupt_VSEI+0x28c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f9e:	00041717          	auipc	a4,0x41
    80012fa2:	07672703          	lw	a4,118(a4) # 80054014 <excpt+0x4>
    80012fa6:	478d                	li	a5,3
    80012fa8:	0001a597          	auipc	a1,0x1a
    80012fac:	3d058593          	addi	a1,a1,976 # 8002d378 <__func__.0+0x2c0>
    80012fb0:	d2f70ae3          	beq	a4,a5,80012ce4 <external_interrupt_VSEI+0x396>
    80012fb4:	0001a597          	auipc	a1,0x1a
    80012fb8:	3d458593          	addi	a1,a1,980 # 8002d388 <__func__.0+0x2d0>
    80012fbc:	b325                	j	80012ce4 <external_interrupt_VSEI+0x396>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012fbe:	00041417          	auipc	s0,0x41
    80012fc2:	05642403          	lw	s0,86(s0) # 80054014 <excpt+0x4>
    80012fc6:	1471                	addi	s0,s0,-4
    80012fc8:	00143413          	seqz	s0,s0
    80012fcc:	bc89                	j	80012a1e <external_interrupt_VSEI+0xd0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012fce:	00041717          	auipc	a4,0x41
    80012fd2:	04672703          	lw	a4,70(a4) # 80054014 <excpt+0x4>
    80012fd6:	478d                	li	a5,3
    80012fd8:	0001a597          	auipc	a1,0x1a
    80012fdc:	3a058593          	addi	a1,a1,928 # 8002d378 <__func__.0+0x2c0>
    80012fe0:	a8f70be3          	beq	a4,a5,80012a76 <external_interrupt_VSEI+0x128>
    80012fe4:	0001a597          	auipc	a1,0x1a
    80012fe8:	3a458593          	addi	a1,a1,932 # 8002d388 <__func__.0+0x2d0>
    80012fec:	b469                	j	80012a76 <external_interrupt_VSEI+0x128>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012fee:	00041717          	auipc	a4,0x41
    80012ff2:	02672703          	lw	a4,38(a4) # 80054014 <excpt+0x4>
    80012ff6:	4791                	li	a5,4
    80012ff8:	0001a597          	auipc	a1,0x1a
    80012ffc:	38058593          	addi	a1,a1,896 # 8002d378 <__func__.0+0x2c0>
    80013000:	9cf705e3          	beq	a4,a5,800129ca <external_interrupt_VSEI+0x7c>
    80013004:	0001a597          	auipc	a1,0x1a
    80013008:	38458593          	addi	a1,a1,900 # 8002d388 <__func__.0+0x2d0>
    8001300c:	ba7d                	j	800129ca <external_interrupt_VSEI+0x7c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8001300e:	00041717          	auipc	a4,0x41
    80013012:	00672703          	lw	a4,6(a4) # 80054014 <excpt+0x4>
    80013016:	4789                	li	a5,2
    80013018:	0001a597          	auipc	a1,0x1a
    8001301c:	36058593          	addi	a1,a1,864 # 8002d378 <__func__.0+0x2c0>
    80013020:	aef70fe3          	beq	a4,a5,80012b1e <external_interrupt_VSEI+0x1d0>
    80013024:	0001a597          	auipc	a1,0x1a
    80013028:	36458593          	addi	a1,a1,868 # 8002d388 <__func__.0+0x2d0>
    8001302c:	bccd                	j	80012b1e <external_interrupt_VSEI+0x1d0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8001302e:	00041717          	auipc	a4,0x41
    80013032:	fe672703          	lw	a4,-26(a4) # 80054014 <excpt+0x4>
    80013036:	4789                	li	a5,2
    80013038:	0001a597          	auipc	a1,0x1a
    8001303c:	34058593          	addi	a1,a1,832 # 8002d378 <__func__.0+0x2c0>
    80013040:	d4f706e3          	beq	a4,a5,80012d8c <external_interrupt_VSEI+0x43e>
    80013044:	0001a597          	auipc	a1,0x1a
    80013048:	34458593          	addi	a1,a1,836 # 8002d388 <__func__.0+0x2d0>
    8001304c:	b381                	j	80012d8c <external_interrupt_VSEI+0x43e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8001304e:	00041717          	auipc	a4,0x41
    80013052:	fc672703          	lw	a4,-58(a4) # 80054014 <excpt+0x4>
    80013056:	4791                	li	a5,4
    80013058:	0001a597          	auipc	a1,0x1a
    8001305c:	32058593          	addi	a1,a1,800 # 8002d378 <__func__.0+0x2c0>
    80013060:	bef700e3          	beq	a4,a5,80012c40 <external_interrupt_VSEI+0x2f2>
    80013064:	0001a597          	auipc	a1,0x1a
    80013068:	32458593          	addi	a1,a1,804 # 8002d388 <__func__.0+0x2d0>
    8001306c:	bed1                	j	80012c40 <external_interrupt_VSEI+0x2f2>

000000008001306e <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    8001306e:	1101                	addi	sp,sp,-32

    TEST_START();
    80013070:	00019597          	auipc	a1,0x19
    80013074:	bb858593          	addi	a1,a1,-1096 # 8002bc28 <__func__.2>
    80013078:	0001a517          	auipc	a0,0x1a
    8001307c:	32050513          	addi	a0,a0,800 # 8002d398 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    80013080:	ec06                	sd	ra,24(sp)
    80013082:	e822                	sd	s0,16(sp)
    80013084:	e426                	sd	s1,8(sp)
    TEST_START();
    80013086:	5d1170ef          	jal	8002ae56 <printf>
    8001308a:	4529                	li	a0,10
    8001308c:	2b9160ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80013090:	d7ded0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    80013094:	4511                	li	a0,4
    80013096:	e73ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001309a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001309e:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    800130a2:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    800130a6:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800130aa:	4511                	li	a0,4
    800130ac:	e5ded0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800130b0:	08200593          	li	a1,130
    800130b4:	0001e617          	auipc	a2,0x1e
    800130b8:	6a460613          	addi	a2,a2,1700 # 80031758 <__func__.0+0x46a0>
    800130bc:	0001a517          	auipc	a0,0x1a
    800130c0:	2f450513          	addi	a0,a0,756 # 8002d3b0 <__func__.0+0x2f8>
    800130c4:	593170ef          	jal	8002ae56 <printf>
    800130c8:	00041797          	auipc	a5,0x41
    800130cc:	f497c783          	lbu	a5,-183(a5) # 80054011 <excpt+0x1>
    800130d0:	00041497          	auipc	s1,0x41
    800130d4:	f4048493          	addi	s1,s1,-192 # 80054010 <excpt>
    800130d8:	0001a597          	auipc	a1,0x1a
    800130dc:	2b058593          	addi	a1,a1,688 # 8002d388 <__func__.0+0x2d0>
    800130e0:	c799                	beqz	a5,800130ee <software_interrupt_msi+0x80>
    800130e2:	57fd                	li	a5,-1
    800130e4:	6498                	ld	a4,8(s1)
    800130e6:	17fe                	slli	a5,a5,0x3f
    800130e8:	0789                	addi	a5,a5,2
    800130ea:	4ef702e3          	beq	a4,a5,80013dce <software_interrupt_msi+0xd60>
    800130ee:	0001a517          	auipc	a0,0x1a
    800130f2:	2da50513          	addi	a0,a0,730 # 8002d3c8 <__func__.0+0x310>
    800130f6:	561170ef          	jal	8002ae56 <printf>
    800130fa:	00041797          	auipc	a5,0x41
    800130fe:	f177c783          	lbu	a5,-233(a5) # 80054011 <excpt+0x1>
    80013102:	c799                	beqz	a5,80013110 <software_interrupt_msi+0xa2>
    80013104:	57fd                	li	a5,-1
    80013106:	6498                	ld	a4,8(s1)
    80013108:	17fe                	slli	a5,a5,0x3f
    8001310a:	0789                	addi	a5,a5,2
    8001310c:	34f700e3          	beq	a4,a5,80013c4c <software_interrupt_msi+0xbde>
    80013110:	0001a517          	auipc	a0,0x1a
    80013114:	2c050513          	addi	a0,a0,704 # 8002d3d0 <__func__.0+0x318>
    80013118:	53f170ef          	jal	8002ae56 <printf>
    8001311c:	02900513          	li	a0,41
    80013120:	225160ef          	jal	80029b44 <putchar>
    80013124:	4529                	li	a0,10
    80013126:	21f160ef          	jal	80029b44 <putchar>
    8001312a:	00041797          	auipc	a5,0x41
    8001312e:	ee77c783          	lbu	a5,-281(a5) # 80054011 <excpt+0x1>
    80013132:	4401                	li	s0,0
    80013134:	c799                	beqz	a5,80013142 <software_interrupt_msi+0xd4>
    80013136:	57fd                	li	a5,-1
    80013138:	6498                	ld	a4,8(s1)
    8001313a:	17fe                	slli	a5,a5,0x3f
    8001313c:	0789                	addi	a5,a5,2
    8001313e:	56f70ce3          	beq	a4,a5,80013eb6 <software_interrupt_msi+0xe48>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013142:	ccbed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013146:	4511                	li	a0,4
    80013148:	dc1ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001314c:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013150:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013154:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013158:	4511                	li	a0,4
    8001315a:	dafed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    8001315e:	08200593          	li	a1,130
    80013162:	0001e617          	auipc	a2,0x1e
    80013166:	65660613          	addi	a2,a2,1622 # 800317b8 <__func__.0+0x4700>
    8001316a:	0001a517          	auipc	a0,0x1a
    8001316e:	24650513          	addi	a0,a0,582 # 8002d3b0 <__func__.0+0x2f8>
    80013172:	4e5170ef          	jal	8002ae56 <printf>
    80013176:	00041797          	auipc	a5,0x41
    8001317a:	e9b7c783          	lbu	a5,-357(a5) # 80054011 <excpt+0x1>
    8001317e:	0001a597          	auipc	a1,0x1a
    80013182:	20a58593          	addi	a1,a1,522 # 8002d388 <__func__.0+0x2d0>
    80013186:	e789                	bnez	a5,80013190 <software_interrupt_msi+0x122>
    80013188:	0001a597          	auipc	a1,0x1a
    8001318c:	1f058593          	addi	a1,a1,496 # 8002d378 <__func__.0+0x2c0>
    80013190:	0001a517          	auipc	a0,0x1a
    80013194:	23850513          	addi	a0,a0,568 # 8002d3c8 <__func__.0+0x310>
    80013198:	4bf170ef          	jal	8002ae56 <printf>
    8001319c:	00041797          	auipc	a5,0x41
    800131a0:	e757c783          	lbu	a5,-395(a5) # 80054011 <excpt+0x1>
    800131a4:	320797e3          	bnez	a5,80013cd2 <software_interrupt_msi+0xc64>
    800131a8:	4529                	li	a0,10
    800131aa:	19b160ef          	jal	80029b44 <putchar>
    800131ae:	c419                	beqz	s0,800131bc <software_interrupt_msi+0x14e>
    800131b0:	00041417          	auipc	s0,0x41
    800131b4:	e6144403          	lbu	s0,-415(s0) # 80054011 <excpt+0x1>
    800131b8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    800131bc:	c51ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800131c0:	4511                	li	a0,4
    800131c2:	d47ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800131c6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800131ca:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800131ce:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800131d2:	4511                	li	a0,4
    800131d4:	d35ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    800131d8:	08200593          	li	a1,130
    800131dc:	0001e617          	auipc	a2,0x1e
    800131e0:	63460613          	addi	a2,a2,1588 # 80031810 <__func__.0+0x4758>
    800131e4:	0001a517          	auipc	a0,0x1a
    800131e8:	1cc50513          	addi	a0,a0,460 # 8002d3b0 <__func__.0+0x2f8>
    800131ec:	46b170ef          	jal	8002ae56 <printf>
    800131f0:	00041797          	auipc	a5,0x41
    800131f4:	e217c783          	lbu	a5,-479(a5) # 80054011 <excpt+0x1>
    800131f8:	0001a597          	auipc	a1,0x1a
    800131fc:	19058593          	addi	a1,a1,400 # 8002d388 <__func__.0+0x2d0>
    80013200:	cf99                	beqz	a5,8001321e <software_interrupt_msi+0x1b0>
    80013202:	57fd                	li	a5,-1
    80013204:	6498                	ld	a4,8(s1)
    80013206:	17fe                	slli	a5,a5,0x3f
    80013208:	0789                	addi	a5,a5,2
    8001320a:	0001a597          	auipc	a1,0x1a
    8001320e:	16e58593          	addi	a1,a1,366 # 8002d378 <__func__.0+0x2c0>
    80013212:	00f70663          	beq	a4,a5,8001321e <software_interrupt_msi+0x1b0>
    80013216:	0001a597          	auipc	a1,0x1a
    8001321a:	17258593          	addi	a1,a1,370 # 8002d388 <__func__.0+0x2d0>
    8001321e:	0001a517          	auipc	a0,0x1a
    80013222:	1aa50513          	addi	a0,a0,426 # 8002d3c8 <__func__.0+0x310>
    80013226:	431170ef          	jal	8002ae56 <printf>
    8001322a:	00041797          	auipc	a5,0x41
    8001322e:	de77c783          	lbu	a5,-537(a5) # 80054011 <excpt+0x1>
    80013232:	c799                	beqz	a5,80013240 <software_interrupt_msi+0x1d2>
    80013234:	57fd                	li	a5,-1
    80013236:	6498                	ld	a4,8(s1)
    80013238:	17fe                	slli	a5,a5,0x3f
    8001323a:	0789                	addi	a5,a5,2
    8001323c:	00f70c63          	beq	a4,a5,80013254 <software_interrupt_msi+0x1e6>
    80013240:	0001a517          	auipc	a0,0x1a
    80013244:	19050513          	addi	a0,a0,400 # 8002d3d0 <__func__.0+0x318>
    80013248:	40f170ef          	jal	8002ae56 <printf>
    8001324c:	02900513          	li	a0,41
    80013250:	0f5160ef          	jal	80029b44 <putchar>
    80013254:	4529                	li	a0,10
    80013256:	0ef160ef          	jal	80029b44 <putchar>
    8001325a:	c801                	beqz	s0,8001326a <software_interrupt_msi+0x1fc>
    8001325c:	00041797          	auipc	a5,0x41
    80013260:	db57c783          	lbu	a5,-587(a5) # 80054011 <excpt+0x1>
    80013264:	4401                	li	s0,0
    80013266:	1c0793e3          	bnez	a5,80013c2c <software_interrupt_msi+0xbbe>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8001326a:	ba3ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001326e:	4511                	li	a0,4
    80013270:	c99ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013274:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013278:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001327c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013280:	4511                	li	a0,4
    80013282:	c87ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013286:	08200593          	li	a1,130
    8001328a:	0001e617          	auipc	a2,0x1e
    8001328e:	5e660613          	addi	a2,a2,1510 # 80031870 <__func__.0+0x47b8>
    80013292:	0001a517          	auipc	a0,0x1a
    80013296:	11e50513          	addi	a0,a0,286 # 8002d3b0 <__func__.0+0x2f8>
    8001329a:	3bd170ef          	jal	8002ae56 <printf>
    8001329e:	00041797          	auipc	a5,0x41
    800132a2:	d737c783          	lbu	a5,-653(a5) # 80054011 <excpt+0x1>
    800132a6:	0001a597          	auipc	a1,0x1a
    800132aa:	0e258593          	addi	a1,a1,226 # 8002d388 <__func__.0+0x2d0>
    800132ae:	e789                	bnez	a5,800132b8 <software_interrupt_msi+0x24a>
    800132b0:	0001a597          	auipc	a1,0x1a
    800132b4:	0c858593          	addi	a1,a1,200 # 8002d378 <__func__.0+0x2c0>
    800132b8:	0001a517          	auipc	a0,0x1a
    800132bc:	11050513          	addi	a0,a0,272 # 8002d3c8 <__func__.0+0x310>
    800132c0:	397170ef          	jal	8002ae56 <printf>
    800132c4:	00041797          	auipc	a5,0x41
    800132c8:	d4d7c783          	lbu	a5,-691(a5) # 80054011 <excpt+0x1>
    800132cc:	22079ae3          	bnez	a5,80013d00 <software_interrupt_msi+0xc92>
    800132d0:	4529                	li	a0,10
    800132d2:	073160ef          	jal	80029b44 <putchar>
    800132d6:	c419                	beqz	s0,800132e4 <software_interrupt_msi+0x276>
    800132d8:	00041417          	auipc	s0,0x41
    800132dc:	d3944403          	lbu	s0,-711(s0) # 80054011 <excpt+0x1>
    800132e0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800132e4:	b29ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800132e8:	4511                	li	a0,4
    800132ea:	c1fed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800132ee:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800132f2:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800132f6:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800132fa:	4511                	li	a0,4
    800132fc:	c0ded0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013300:	08200593          	li	a1,130
    80013304:	0001e617          	auipc	a2,0x1e
    80013308:	5bc60613          	addi	a2,a2,1468 # 800318c0 <__func__.0+0x4808>
    8001330c:	0001a517          	auipc	a0,0x1a
    80013310:	0a450513          	addi	a0,a0,164 # 8002d3b0 <__func__.0+0x2f8>
    80013314:	343170ef          	jal	8002ae56 <printf>
    80013318:	00041797          	auipc	a5,0x41
    8001331c:	cf97c783          	lbu	a5,-775(a5) # 80054011 <excpt+0x1>
    80013320:	0001a597          	auipc	a1,0x1a
    80013324:	06858593          	addi	a1,a1,104 # 8002d388 <__func__.0+0x2d0>
    80013328:	e789                	bnez	a5,80013332 <software_interrupt_msi+0x2c4>
    8001332a:	0001a597          	auipc	a1,0x1a
    8001332e:	04e58593          	addi	a1,a1,78 # 8002d378 <__func__.0+0x2c0>
    80013332:	0001a517          	auipc	a0,0x1a
    80013336:	09650513          	addi	a0,a0,150 # 8002d3c8 <__func__.0+0x310>
    8001333a:	31d170ef          	jal	8002ae56 <printf>
    8001333e:	00041797          	auipc	a5,0x41
    80013342:	cd37c783          	lbu	a5,-813(a5) # 80054011 <excpt+0x1>
    80013346:	220797e3          	bnez	a5,80013d74 <software_interrupt_msi+0xd06>
    8001334a:	4529                	li	a0,10
    8001334c:	7f8160ef          	jal	80029b44 <putchar>
    80013350:	c419                	beqz	s0,8001335e <software_interrupt_msi+0x2f0>
    80013352:	00041417          	auipc	s0,0x41
    80013356:	cbf44403          	lbu	s0,-833(s0) # 80054011 <excpt+0x1>
    8001335a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001335e:	aafed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013362:	4511                	li	a0,4
    80013364:	ba5ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013368:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001336c:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013370:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013374:	4511                	li	a0,4
    80013376:	b93ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    8001337a:	08200593          	li	a1,130
    8001337e:	0001e617          	auipc	a2,0x1e
    80013382:	59260613          	addi	a2,a2,1426 # 80031910 <__func__.0+0x4858>
    80013386:	0001a517          	auipc	a0,0x1a
    8001338a:	02a50513          	addi	a0,a0,42 # 8002d3b0 <__func__.0+0x2f8>
    8001338e:	2c9170ef          	jal	8002ae56 <printf>
    80013392:	00041797          	auipc	a5,0x41
    80013396:	c7f7c783          	lbu	a5,-897(a5) # 80054011 <excpt+0x1>
    8001339a:	0001a597          	auipc	a1,0x1a
    8001339e:	fee58593          	addi	a1,a1,-18 # 8002d388 <__func__.0+0x2d0>
    800133a2:	e789                	bnez	a5,800133ac <software_interrupt_msi+0x33e>
    800133a4:	0001a597          	auipc	a1,0x1a
    800133a8:	fd458593          	addi	a1,a1,-44 # 8002d378 <__func__.0+0x2c0>
    800133ac:	0001a517          	auipc	a0,0x1a
    800133b0:	01c50513          	addi	a0,a0,28 # 8002d3c8 <__func__.0+0x310>
    800133b4:	2a3170ef          	jal	8002ae56 <printf>
    800133b8:	00041797          	auipc	a5,0x41
    800133bc:	c597c783          	lbu	a5,-935(a5) # 80054011 <excpt+0x1>
    800133c0:	18079ee3          	bnez	a5,80013d5c <software_interrupt_msi+0xcee>
    800133c4:	4529                	li	a0,10
    800133c6:	77e160ef          	jal	80029b44 <putchar>
    800133ca:	c419                	beqz	s0,800133d8 <software_interrupt_msi+0x36a>
    800133cc:	00041417          	auipc	s0,0x41
    800133d0:	c4544403          	lbu	s0,-955(s0) # 80054011 <excpt+0x1>
    800133d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    800133d8:	a35ed0ef          	jal	80000e0c <test_setup_except_function>
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    800133dc:	4511                	li	a0,4
    800133de:	b2bed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800133e2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800133e6:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800133ea:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800133ee:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800133f2:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800133f6:	450d                	li	a0,3
    800133f8:	b11ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800133fc:	08200593          	li	a1,130
    80013400:	0001e617          	auipc	a2,0x1e
    80013404:	56060613          	addi	a2,a2,1376 # 80031960 <__func__.0+0x48a8>
    80013408:	0001a517          	auipc	a0,0x1a
    8001340c:	fa850513          	addi	a0,a0,-88 # 8002d3b0 <__func__.0+0x2f8>
    80013410:	247170ef          	jal	8002ae56 <printf>
    80013414:	00041797          	auipc	a5,0x41
    80013418:	bfd7c783          	lbu	a5,-1027(a5) # 80054011 <excpt+0x1>
    8001341c:	0001a597          	auipc	a1,0x1a
    80013420:	f6c58593          	addi	a1,a1,-148 # 8002d388 <__func__.0+0x2d0>
    80013424:	c799                	beqz	a5,80013432 <software_interrupt_msi+0x3c4>
    80013426:	57fd                	li	a5,-1
    80013428:	6498                	ld	a4,8(s1)
    8001342a:	17fe                	slli	a5,a5,0x3f
    8001342c:	0789                	addi	a5,a5,2
    8001342e:	20f702e3          	beq	a4,a5,80013e32 <software_interrupt_msi+0xdc4>
    80013432:	0001a517          	auipc	a0,0x1a
    80013436:	f9650513          	addi	a0,a0,-106 # 8002d3c8 <__func__.0+0x310>
    8001343a:	21d170ef          	jal	8002ae56 <printf>
    8001343e:	00041797          	auipc	a5,0x41
    80013442:	bd37c783          	lbu	a5,-1069(a5) # 80054011 <excpt+0x1>
    80013446:	c799                	beqz	a5,80013454 <software_interrupt_msi+0x3e6>
    80013448:	57fd                	li	a5,-1
    8001344a:	6498                	ld	a4,8(s1)
    8001344c:	17fe                	slli	a5,a5,0x3f
    8001344e:	0789                	addi	a5,a5,2
    80013450:	04f700e3          	beq	a4,a5,80013c90 <software_interrupt_msi+0xc22>
    80013454:	0001a517          	auipc	a0,0x1a
    80013458:	f7c50513          	addi	a0,a0,-132 # 8002d3d0 <__func__.0+0x318>
    8001345c:	1fb170ef          	jal	8002ae56 <printf>
    80013460:	02900513          	li	a0,41
    80013464:	6e0160ef          	jal	80029b44 <putchar>
    80013468:	4529                	li	a0,10
    8001346a:	6da160ef          	jal	80029b44 <putchar>
    8001346e:	c801                	beqz	s0,8001347e <software_interrupt_msi+0x410>
    80013470:	00041797          	auipc	a5,0x41
    80013474:	ba17c783          	lbu	a5,-1119(a5) # 80054011 <excpt+0x1>
    80013478:	4401                	li	s0,0
    8001347a:	78079a63          	bnez	a5,80013c0e <software_interrupt_msi+0xba0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8001347e:	98fed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013482:	4511                	li	a0,4
    80013484:	a85ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013488:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001348c:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013490:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013494:	57fd                	li	a5,-1
    80013496:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8001349a:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001349e:	450d                	li	a0,3
    800134a0:	a69ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800134a4:	08200593          	li	a1,130
    800134a8:	0001e617          	auipc	a2,0x1e
    800134ac:	51860613          	addi	a2,a2,1304 # 800319c0 <__func__.0+0x4908>
    800134b0:	0001a517          	auipc	a0,0x1a
    800134b4:	f0050513          	addi	a0,a0,-256 # 8002d3b0 <__func__.0+0x2f8>
    800134b8:	19f170ef          	jal	8002ae56 <printf>
    800134bc:	00041797          	auipc	a5,0x41
    800134c0:	b557c783          	lbu	a5,-1195(a5) # 80054011 <excpt+0x1>
    800134c4:	0001a597          	auipc	a1,0x1a
    800134c8:	ec458593          	addi	a1,a1,-316 # 8002d388 <__func__.0+0x2d0>
    800134cc:	c799                	beqz	a5,800134da <software_interrupt_msi+0x46c>
    800134ce:	57fd                	li	a5,-1
    800134d0:	6498                	ld	a4,8(s1)
    800134d2:	17fe                	slli	a5,a5,0x3f
    800134d4:	0789                	addi	a5,a5,2
    800134d6:	16f70fe3          	beq	a4,a5,80013e54 <software_interrupt_msi+0xde6>
    800134da:	0001a517          	auipc	a0,0x1a
    800134de:	eee50513          	addi	a0,a0,-274 # 8002d3c8 <__func__.0+0x310>
    800134e2:	175170ef          	jal	8002ae56 <printf>
    800134e6:	00041797          	auipc	a5,0x41
    800134ea:	b2b7c783          	lbu	a5,-1237(a5) # 80054011 <excpt+0x1>
    800134ee:	c799                	beqz	a5,800134fc <software_interrupt_msi+0x48e>
    800134f0:	57fd                	li	a5,-1
    800134f2:	6498                	ld	a4,8(s1)
    800134f4:	17fe                	slli	a5,a5,0x3f
    800134f6:	0789                	addi	a5,a5,2
    800134f8:	78f70363          	beq	a4,a5,80013c7e <software_interrupt_msi+0xc10>
    800134fc:	0001a517          	auipc	a0,0x1a
    80013500:	ed450513          	addi	a0,a0,-300 # 8002d3d0 <__func__.0+0x318>
    80013504:	153170ef          	jal	8002ae56 <printf>
    80013508:	02900513          	li	a0,41
    8001350c:	638160ef          	jal	80029b44 <putchar>
    80013510:	4529                	li	a0,10
    80013512:	632160ef          	jal	80029b44 <putchar>
    80013516:	c801                	beqz	s0,80013526 <software_interrupt_msi+0x4b8>
    80013518:	00041797          	auipc	a5,0x41
    8001351c:	af97c783          	lbu	a5,-1287(a5) # 80054011 <excpt+0x1>
    80013520:	4401                	li	s0,0
    80013522:	6c079763          	bnez	a5,80013bf0 <software_interrupt_msi+0xb82>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80013526:	8e7ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001352a:	4511                	li	a0,4
    8001352c:	9dded0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013530:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013534:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013538:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001353c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013540:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013544:	450d                	li	a0,3
    80013546:	9c3ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8001354a:	08200593          	li	a1,130
    8001354e:	0001e617          	auipc	a2,0x1e
    80013552:	4e260613          	addi	a2,a2,1250 # 80031a30 <__func__.0+0x4978>
    80013556:	0001a517          	auipc	a0,0x1a
    8001355a:	e5a50513          	addi	a0,a0,-422 # 8002d3b0 <__func__.0+0x2f8>
    8001355e:	0f9170ef          	jal	8002ae56 <printf>
    80013562:	00041797          	auipc	a5,0x41
    80013566:	aaf7c783          	lbu	a5,-1361(a5) # 80054011 <excpt+0x1>
    8001356a:	0001a597          	auipc	a1,0x1a
    8001356e:	e1e58593          	addi	a1,a1,-482 # 8002d388 <__func__.0+0x2d0>
    80013572:	e789                	bnez	a5,8001357c <software_interrupt_msi+0x50e>
    80013574:	0001a597          	auipc	a1,0x1a
    80013578:	e0458593          	addi	a1,a1,-508 # 8002d378 <__func__.0+0x2c0>
    8001357c:	0001a517          	auipc	a0,0x1a
    80013580:	e4c50513          	addi	a0,a0,-436 # 8002d3c8 <__func__.0+0x310>
    80013584:	0d3170ef          	jal	8002ae56 <printf>
    80013588:	00041797          	auipc	a5,0x41
    8001358c:	a897c783          	lbu	a5,-1399(a5) # 80054011 <excpt+0x1>
    80013590:	7a079a63          	bnez	a5,80013d44 <software_interrupt_msi+0xcd6>
    80013594:	4529                	li	a0,10
    80013596:	5ae160ef          	jal	80029b44 <putchar>
    8001359a:	c419                	beqz	s0,800135a8 <software_interrupt_msi+0x53a>
    8001359c:	00041417          	auipc	s0,0x41
    800135a0:	a7544403          	lbu	s0,-1419(s0) # 80054011 <excpt+0x1>
    800135a4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800135a8:	865ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800135ac:	4511                	li	a0,4
    800135ae:	95bed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800135b2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800135b6:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800135ba:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800135be:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800135c2:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800135c6:	450d                	li	a0,3
    800135c8:	941ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800135cc:	08200593          	li	a1,130
    800135d0:	0001e617          	auipc	a2,0x1e
    800135d4:	4c860613          	addi	a2,a2,1224 # 80031a98 <__func__.0+0x49e0>
    800135d8:	0001a517          	auipc	a0,0x1a
    800135dc:	dd850513          	addi	a0,a0,-552 # 8002d3b0 <__func__.0+0x2f8>
    800135e0:	077170ef          	jal	8002ae56 <printf>
    800135e4:	00041797          	auipc	a5,0x41
    800135e8:	a2d7c783          	lbu	a5,-1491(a5) # 80054011 <excpt+0x1>
    800135ec:	0001a597          	auipc	a1,0x1a
    800135f0:	d9c58593          	addi	a1,a1,-612 # 8002d388 <__func__.0+0x2d0>
    800135f4:	c799                	beqz	a5,80013602 <software_interrupt_msi+0x594>
    800135f6:	57fd                	li	a5,-1
    800135f8:	6498                	ld	a4,8(s1)
    800135fa:	17fe                	slli	a5,a5,0x3f
    800135fc:	0789                	addi	a5,a5,2
    800135fe:	7ef70963          	beq	a4,a5,80013df0 <software_interrupt_msi+0xd82>
    80013602:	0001a517          	auipc	a0,0x1a
    80013606:	dc650513          	addi	a0,a0,-570 # 8002d3c8 <__func__.0+0x310>
    8001360a:	04d170ef          	jal	8002ae56 <printf>
    8001360e:	00041797          	auipc	a5,0x41
    80013612:	a037c783          	lbu	a5,-1533(a5) # 80054011 <excpt+0x1>
    80013616:	c799                	beqz	a5,80013624 <software_interrupt_msi+0x5b6>
    80013618:	57fd                	li	a5,-1
    8001361a:	6498                	ld	a4,8(s1)
    8001361c:	17fe                	slli	a5,a5,0x3f
    8001361e:	0789                	addi	a5,a5,2
    80013620:	68f70963          	beq	a4,a5,80013cb2 <software_interrupt_msi+0xc44>
    80013624:	0001a517          	auipc	a0,0x1a
    80013628:	dac50513          	addi	a0,a0,-596 # 8002d3d0 <__func__.0+0x318>
    8001362c:	02b170ef          	jal	8002ae56 <printf>
    80013630:	02900513          	li	a0,41
    80013634:	510160ef          	jal	80029b44 <putchar>
    80013638:	4529                	li	a0,10
    8001363a:	50a160ef          	jal	80029b44 <putchar>
    8001363e:	c801                	beqz	s0,8001364e <software_interrupt_msi+0x5e0>
    80013640:	00041797          	auipc	a5,0x41
    80013644:	9d17c783          	lbu	a5,-1583(a5) # 80054011 <excpt+0x1>
    80013648:	4401                	li	s0,0
    8001364a:	58079563          	bnez	a5,80013bd4 <software_interrupt_msi+0xb66>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001364e:	fbeed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013652:	4511                	li	a0,4
    80013654:	8b5ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013658:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001365c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013660:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80013664:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80013668:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001366c:	450d                	li	a0,3
    8001366e:	89bed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013672:	08200593          	li	a1,130
    80013676:	0001e617          	auipc	a2,0x1e
    8001367a:	49260613          	addi	a2,a2,1170 # 80031b08 <__func__.0+0x4a50>
    8001367e:	0001a517          	auipc	a0,0x1a
    80013682:	d3250513          	addi	a0,a0,-718 # 8002d3b0 <__func__.0+0x2f8>
    80013686:	7d0170ef          	jal	8002ae56 <printf>
    8001368a:	00041797          	auipc	a5,0x41
    8001368e:	9877c783          	lbu	a5,-1657(a5) # 80054011 <excpt+0x1>
    80013692:	0001a597          	auipc	a1,0x1a
    80013696:	cf658593          	addi	a1,a1,-778 # 8002d388 <__func__.0+0x2d0>
    8001369a:	c799                	beqz	a5,800136a8 <software_interrupt_msi+0x63a>
    8001369c:	57fd                	li	a5,-1
    8001369e:	6498                	ld	a4,8(s1)
    800136a0:	17fe                	slli	a5,a5,0x3f
    800136a2:	0789                	addi	a5,a5,2
    800136a4:	6ef70463          	beq	a4,a5,80013d8c <software_interrupt_msi+0xd1e>
    800136a8:	0001a517          	auipc	a0,0x1a
    800136ac:	d2050513          	addi	a0,a0,-736 # 8002d3c8 <__func__.0+0x310>
    800136b0:	7a6170ef          	jal	8002ae56 <printf>
    800136b4:	00041797          	auipc	a5,0x41
    800136b8:	95d7c783          	lbu	a5,-1699(a5) # 80054011 <excpt+0x1>
    800136bc:	c799                	beqz	a5,800136ca <software_interrupt_msi+0x65c>
    800136be:	57fd                	li	a5,-1
    800136c0:	6498                	ld	a4,8(s1)
    800136c2:	17fe                	slli	a5,a5,0x3f
    800136c4:	0789                	addi	a5,a5,2
    800136c6:	5ef70e63          	beq	a4,a5,80013cc2 <software_interrupt_msi+0xc54>
    800136ca:	0001a517          	auipc	a0,0x1a
    800136ce:	d0650513          	addi	a0,a0,-762 # 8002d3d0 <__func__.0+0x318>
    800136d2:	784170ef          	jal	8002ae56 <printf>
    800136d6:	02900513          	li	a0,41
    800136da:	46a160ef          	jal	80029b44 <putchar>
    800136de:	4529                	li	a0,10
    800136e0:	464160ef          	jal	80029b44 <putchar>
    800136e4:	c801                	beqz	s0,800136f4 <software_interrupt_msi+0x686>
    800136e6:	00041797          	auipc	a5,0x41
    800136ea:	92b7c783          	lbu	a5,-1749(a5) # 80054011 <excpt+0x1>
    800136ee:	4401                	li	s0,0
    800136f0:	4c079463          	bnez	a5,80013bb8 <software_interrupt_msi+0xb4a>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800136f4:	f18ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800136f8:	4511                	li	a0,4
    800136fa:	80fed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800136fe:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013702:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013706:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    8001370a:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001370e:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013712:	450d                	li	a0,3
    80013714:	ff4ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013718:	08200593          	li	a1,130
    8001371c:	0001e617          	auipc	a2,0x1e
    80013720:	45c60613          	addi	a2,a2,1116 # 80031b78 <__func__.0+0x4ac0>
    80013724:	0001a517          	auipc	a0,0x1a
    80013728:	c8c50513          	addi	a0,a0,-884 # 8002d3b0 <__func__.0+0x2f8>
    8001372c:	72a170ef          	jal	8002ae56 <printf>
    80013730:	00041797          	auipc	a5,0x41
    80013734:	8e17c783          	lbu	a5,-1823(a5) # 80054011 <excpt+0x1>
    80013738:	0001a597          	auipc	a1,0x1a
    8001373c:	c5058593          	addi	a1,a1,-944 # 8002d388 <__func__.0+0x2d0>
    80013740:	e789                	bnez	a5,8001374a <software_interrupt_msi+0x6dc>
    80013742:	0001a597          	auipc	a1,0x1a
    80013746:	c3658593          	addi	a1,a1,-970 # 8002d378 <__func__.0+0x2c0>
    8001374a:	0001a517          	auipc	a0,0x1a
    8001374e:	c7e50513          	addi	a0,a0,-898 # 8002d3c8 <__func__.0+0x310>
    80013752:	704170ef          	jal	8002ae56 <printf>
    80013756:	00041797          	auipc	a5,0x41
    8001375a:	8bb7c783          	lbu	a5,-1861(a5) # 80054011 <excpt+0x1>
    8001375e:	5c079863          	bnez	a5,80013d2e <software_interrupt_msi+0xcc0>
    80013762:	4529                	li	a0,10
    80013764:	3e0160ef          	jal	80029b44 <putchar>
    80013768:	c419                	beqz	s0,80013776 <software_interrupt_msi+0x708>
    8001376a:	00041417          	auipc	s0,0x41
    8001376e:	8a744403          	lbu	s0,-1881(s0) # 80054011 <excpt+0x1>
    80013772:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    80013776:	e96ed0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8001377a:	4511                	li	a0,4
    8001377c:	f8ced0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013780:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013784:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013788:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001378c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013790:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013794:	4509                	li	a0,2
    80013796:	f72ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001379a:	08200593          	li	a1,130
    8001379e:	0001e617          	auipc	a2,0x1e
    800137a2:	43a60613          	addi	a2,a2,1082 # 80031bd8 <__func__.0+0x4b20>
    800137a6:	0001a517          	auipc	a0,0x1a
    800137aa:	c0a50513          	addi	a0,a0,-1014 # 8002d3b0 <__func__.0+0x2f8>
    800137ae:	6a8170ef          	jal	8002ae56 <printf>
    800137b2:	00041797          	auipc	a5,0x41
    800137b6:	85f7c783          	lbu	a5,-1953(a5) # 80054011 <excpt+0x1>
    800137ba:	0001a597          	auipc	a1,0x1a
    800137be:	bce58593          	addi	a1,a1,-1074 # 8002d388 <__func__.0+0x2d0>
    800137c2:	c799                	beqz	a5,800137d0 <software_interrupt_msi+0x762>
    800137c4:	57fd                	li	a5,-1
    800137c6:	6498                	ld	a4,8(s1)
    800137c8:	17fe                	slli	a5,a5,0x3f
    800137ca:	0789                	addi	a5,a5,2
    800137cc:	64f70363          	beq	a4,a5,80013e12 <software_interrupt_msi+0xda4>
    800137d0:	0001a517          	auipc	a0,0x1a
    800137d4:	bf850513          	addi	a0,a0,-1032 # 8002d3c8 <__func__.0+0x310>
    800137d8:	67e170ef          	jal	8002ae56 <printf>
    800137dc:	00041797          	auipc	a5,0x41
    800137e0:	8357c783          	lbu	a5,-1995(a5) # 80054011 <excpt+0x1>
    800137e4:	c799                	beqz	a5,800137f2 <software_interrupt_msi+0x784>
    800137e6:	57fd                	li	a5,-1
    800137e8:	6498                	ld	a4,8(s1)
    800137ea:	17fe                	slli	a5,a5,0x3f
    800137ec:	0789                	addi	a5,a5,2
    800137ee:	4af70a63          	beq	a4,a5,80013ca2 <software_interrupt_msi+0xc34>
    800137f2:	0001a517          	auipc	a0,0x1a
    800137f6:	bde50513          	addi	a0,a0,-1058 # 8002d3d0 <__func__.0+0x318>
    800137fa:	65c170ef          	jal	8002ae56 <printf>
    800137fe:	02900513          	li	a0,41
    80013802:	342160ef          	jal	80029b44 <putchar>
    80013806:	4529                	li	a0,10
    80013808:	33c160ef          	jal	80029b44 <putchar>
    8001380c:	c801                	beqz	s0,8001381c <software_interrupt_msi+0x7ae>
    8001380e:	00041797          	auipc	a5,0x41
    80013812:	8037c783          	lbu	a5,-2045(a5) # 80054011 <excpt+0x1>
    80013816:	4401                	li	s0,0
    80013818:	38079263          	bnez	a5,80013b9c <software_interrupt_msi+0xb2e>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8001381c:	df0ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013820:	4511                	li	a0,4
    80013822:	ee6ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013826:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001382a:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001382e:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013832:	57fd                	li	a5,-1
    80013834:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013838:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001383c:	4509                	li	a0,2
    8001383e:	ecaed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013842:	08200593          	li	a1,130
    80013846:	0001e617          	auipc	a2,0x1e
    8001384a:	3f260613          	addi	a2,a2,1010 # 80031c38 <__func__.0+0x4b80>
    8001384e:	0001a517          	auipc	a0,0x1a
    80013852:	b6250513          	addi	a0,a0,-1182 # 8002d3b0 <__func__.0+0x2f8>
    80013856:	600170ef          	jal	8002ae56 <printf>
    8001385a:	00040797          	auipc	a5,0x40
    8001385e:	7b77c783          	lbu	a5,1975(a5) # 80054011 <excpt+0x1>
    80013862:	0001a597          	auipc	a1,0x1a
    80013866:	b2658593          	addi	a1,a1,-1242 # 8002d388 <__func__.0+0x2d0>
    8001386a:	c799                	beqz	a5,80013878 <software_interrupt_msi+0x80a>
    8001386c:	57fd                	li	a5,-1
    8001386e:	6498                	ld	a4,8(s1)
    80013870:	17fe                	slli	a5,a5,0x3f
    80013872:	0789                	addi	a5,a5,2
    80013874:	62f70163          	beq	a4,a5,80013e96 <software_interrupt_msi+0xe28>
    80013878:	0001a517          	auipc	a0,0x1a
    8001387c:	b5050513          	addi	a0,a0,-1200 # 8002d3c8 <__func__.0+0x310>
    80013880:	5d6170ef          	jal	8002ae56 <printf>
    80013884:	00040797          	auipc	a5,0x40
    80013888:	78d7c783          	lbu	a5,1933(a5) # 80054011 <excpt+0x1>
    8001388c:	c799                	beqz	a5,8001389a <software_interrupt_msi+0x82c>
    8001388e:	57fd                	li	a5,-1
    80013890:	6498                	ld	a4,8(s1)
    80013892:	17fe                	slli	a5,a5,0x3f
    80013894:	0789                	addi	a5,a5,2
    80013896:	3cf70463          	beq	a4,a5,80013c5e <software_interrupt_msi+0xbf0>
    8001389a:	0001a517          	auipc	a0,0x1a
    8001389e:	b3650513          	addi	a0,a0,-1226 # 8002d3d0 <__func__.0+0x318>
    800138a2:	5b4170ef          	jal	8002ae56 <printf>
    800138a6:	02900513          	li	a0,41
    800138aa:	29a160ef          	jal	80029b44 <putchar>
    800138ae:	4529                	li	a0,10
    800138b0:	294160ef          	jal	80029b44 <putchar>
    800138b4:	c801                	beqz	s0,800138c4 <software_interrupt_msi+0x856>
    800138b6:	00040797          	auipc	a5,0x40
    800138ba:	75b7c783          	lbu	a5,1883(a5) # 80054011 <excpt+0x1>
    800138be:	4401                	li	s0,0
    800138c0:	2c079063          	bnez	a5,80013b80 <software_interrupt_msi+0xb12>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    800138c4:	d48ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800138c8:	4511                	li	a0,4
    800138ca:	e3eed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800138ce:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800138d2:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800138d6:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800138da:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800138de:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800138e2:	4509                	li	a0,2
    800138e4:	e24ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800138e8:	08200593          	li	a1,130
    800138ec:	0001e617          	auipc	a2,0x1e
    800138f0:	3bc60613          	addi	a2,a2,956 # 80031ca8 <__func__.0+0x4bf0>
    800138f4:	0001a517          	auipc	a0,0x1a
    800138f8:	abc50513          	addi	a0,a0,-1348 # 8002d3b0 <__func__.0+0x2f8>
    800138fc:	55a170ef          	jal	8002ae56 <printf>
    80013900:	00040797          	auipc	a5,0x40
    80013904:	7117c783          	lbu	a5,1809(a5) # 80054011 <excpt+0x1>
    80013908:	0001a597          	auipc	a1,0x1a
    8001390c:	a8058593          	addi	a1,a1,-1408 # 8002d388 <__func__.0+0x2d0>
    80013910:	e789                	bnez	a5,8001391a <software_interrupt_msi+0x8ac>
    80013912:	0001a597          	auipc	a1,0x1a
    80013916:	a6658593          	addi	a1,a1,-1434 # 8002d378 <__func__.0+0x2c0>
    8001391a:	0001a517          	auipc	a0,0x1a
    8001391e:	aae50513          	addi	a0,a0,-1362 # 8002d3c8 <__func__.0+0x310>
    80013922:	534170ef          	jal	8002ae56 <printf>
    80013926:	00040797          	auipc	a5,0x40
    8001392a:	6eb7c783          	lbu	a5,1771(a5) # 80054011 <excpt+0x1>
    8001392e:	3a079e63          	bnez	a5,80013cea <software_interrupt_msi+0xc7c>
    80013932:	4529                	li	a0,10
    80013934:	210160ef          	jal	80029b44 <putchar>
    80013938:	c419                	beqz	s0,80013946 <software_interrupt_msi+0x8d8>
    8001393a:	00040417          	auipc	s0,0x40
    8001393e:	6d744403          	lbu	s0,1751(s0) # 80054011 <excpt+0x1>
    80013942:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80013946:	cc6ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001394a:	4511                	li	a0,4
    8001394c:	dbced0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013950:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013954:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013958:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    8001395c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013960:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013964:	4509                	li	a0,2
    80013966:	da2ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8001396a:	08200593          	li	a1,130
    8001396e:	0001e617          	auipc	a2,0x1e
    80013972:	3a260613          	addi	a2,a2,930 # 80031d10 <__func__.0+0x4c58>
    80013976:	0001a517          	auipc	a0,0x1a
    8001397a:	a3a50513          	addi	a0,a0,-1478 # 8002d3b0 <__func__.0+0x2f8>
    8001397e:	4d8170ef          	jal	8002ae56 <printf>
    80013982:	00040797          	auipc	a5,0x40
    80013986:	68f7c783          	lbu	a5,1679(a5) # 80054011 <excpt+0x1>
    8001398a:	0001a597          	auipc	a1,0x1a
    8001398e:	9fe58593          	addi	a1,a1,-1538 # 8002d388 <__func__.0+0x2d0>
    80013992:	c799                	beqz	a5,800139a0 <software_interrupt_msi+0x932>
    80013994:	57fd                	li	a5,-1
    80013996:	6498                	ld	a4,8(s1)
    80013998:	17fe                	slli	a5,a5,0x3f
    8001399a:	0789                	addi	a5,a5,2
    8001399c:	40f70963          	beq	a4,a5,80013dae <software_interrupt_msi+0xd40>
    800139a0:	0001a517          	auipc	a0,0x1a
    800139a4:	a2850513          	addi	a0,a0,-1496 # 8002d3c8 <__func__.0+0x310>
    800139a8:	4ae170ef          	jal	8002ae56 <printf>
    800139ac:	00040797          	auipc	a5,0x40
    800139b0:	6657c783          	lbu	a5,1637(a5) # 80054011 <excpt+0x1>
    800139b4:	c799                	beqz	a5,800139c2 <software_interrupt_msi+0x954>
    800139b6:	57fd                	li	a5,-1
    800139b8:	6498                	ld	a4,8(s1)
    800139ba:	17fe                	slli	a5,a5,0x3f
    800139bc:	0789                	addi	a5,a5,2
    800139be:	26f70f63          	beq	a4,a5,80013c3c <software_interrupt_msi+0xbce>
    800139c2:	0001a517          	auipc	a0,0x1a
    800139c6:	a0e50513          	addi	a0,a0,-1522 # 8002d3d0 <__func__.0+0x318>
    800139ca:	48c170ef          	jal	8002ae56 <printf>
    800139ce:	02900513          	li	a0,41
    800139d2:	172160ef          	jal	80029b44 <putchar>
    800139d6:	4529                	li	a0,10
    800139d8:	16c160ef          	jal	80029b44 <putchar>
    800139dc:	c801                	beqz	s0,800139ec <software_interrupt_msi+0x97e>
    800139de:	00040797          	auipc	a5,0x40
    800139e2:	6337c783          	lbu	a5,1587(a5) # 80054011 <excpt+0x1>
    800139e6:	4401                	li	s0,0
    800139e8:	16079e63          	bnez	a5,80013b64 <software_interrupt_msi+0xaf6>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800139ec:	c20ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800139f0:	4511                	li	a0,4
    800139f2:	d16ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800139f6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800139fa:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800139fe:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80013a02:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80013a06:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013a0a:	4509                	li	a0,2
    80013a0c:	cfced0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013a10:	08200593          	li	a1,130
    80013a14:	0001e617          	auipc	a2,0x1e
    80013a18:	36c60613          	addi	a2,a2,876 # 80031d80 <__func__.0+0x4cc8>
    80013a1c:	0001a517          	auipc	a0,0x1a
    80013a20:	99450513          	addi	a0,a0,-1644 # 8002d3b0 <__func__.0+0x2f8>
    80013a24:	432170ef          	jal	8002ae56 <printf>
    80013a28:	00040797          	auipc	a5,0x40
    80013a2c:	5e97c783          	lbu	a5,1513(a5) # 80054011 <excpt+0x1>
    80013a30:	0001a597          	auipc	a1,0x1a
    80013a34:	95858593          	addi	a1,a1,-1704 # 8002d388 <__func__.0+0x2d0>
    80013a38:	c799                	beqz	a5,80013a46 <software_interrupt_msi+0x9d8>
    80013a3a:	57fd                	li	a5,-1
    80013a3c:	6498                	ld	a4,8(s1)
    80013a3e:	17fe                	slli	a5,a5,0x3f
    80013a40:	0789                	addi	a5,a5,2
    80013a42:	42f70a63          	beq	a4,a5,80013e76 <software_interrupt_msi+0xe08>
    80013a46:	0001a517          	auipc	a0,0x1a
    80013a4a:	98250513          	addi	a0,a0,-1662 # 8002d3c8 <__func__.0+0x310>
    80013a4e:	408170ef          	jal	8002ae56 <printf>
    80013a52:	00040797          	auipc	a5,0x40
    80013a56:	5bf7c783          	lbu	a5,1471(a5) # 80054011 <excpt+0x1>
    80013a5a:	c799                	beqz	a5,80013a68 <software_interrupt_msi+0x9fa>
    80013a5c:	57fd                	li	a5,-1
    80013a5e:	6498                	ld	a4,8(s1)
    80013a60:	17fe                	slli	a5,a5,0x3f
    80013a62:	0789                	addi	a5,a5,2
    80013a64:	20f70563          	beq	a4,a5,80013c6e <software_interrupt_msi+0xc00>
    80013a68:	0001a517          	auipc	a0,0x1a
    80013a6c:	96850513          	addi	a0,a0,-1688 # 8002d3d0 <__func__.0+0x318>
    80013a70:	3e6170ef          	jal	8002ae56 <printf>
    80013a74:	02900513          	li	a0,41
    80013a78:	0cc160ef          	jal	80029b44 <putchar>
    80013a7c:	4529                	li	a0,10
    80013a7e:	0c6160ef          	jal	80029b44 <putchar>
    80013a82:	c419                	beqz	s0,80013a90 <software_interrupt_msi+0xa22>
    80013a84:	00040797          	auipc	a5,0x40
    80013a88:	58d7c783          	lbu	a5,1421(a5) # 80054011 <excpt+0x1>
    80013a8c:	4401                	li	s0,0
    80013a8e:	efcd                	bnez	a5,80013b48 <software_interrupt_msi+0xada>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80013a90:	b7ced0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013a94:	4511                	li	a0,4
    80013a96:	c72ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80013a9a:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013a9e:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013aa2:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013aa6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013aaa:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013aae:	4509                	li	a0,2
    80013ab0:	c58ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013ab4:	08200593          	li	a1,130
    80013ab8:	0001e617          	auipc	a2,0x1e
    80013abc:	33860613          	addi	a2,a2,824 # 80031df0 <__func__.0+0x4d38>
    80013ac0:	0001a517          	auipc	a0,0x1a
    80013ac4:	8f050513          	addi	a0,a0,-1808 # 8002d3b0 <__func__.0+0x2f8>
    80013ac8:	38e170ef          	jal	8002ae56 <printf>
    80013acc:	00040797          	auipc	a5,0x40
    80013ad0:	5457c783          	lbu	a5,1349(a5) # 80054011 <excpt+0x1>
    80013ad4:	0001a597          	auipc	a1,0x1a
    80013ad8:	8b458593          	addi	a1,a1,-1868 # 8002d388 <__func__.0+0x2d0>
    80013adc:	e789                	bnez	a5,80013ae6 <software_interrupt_msi+0xa78>
    80013ade:	0001a597          	auipc	a1,0x1a
    80013ae2:	89a58593          	addi	a1,a1,-1894 # 8002d378 <__func__.0+0x2c0>
    80013ae6:	0001a517          	auipc	a0,0x1a
    80013aea:	8e250513          	addi	a0,a0,-1822 # 8002d3c8 <__func__.0+0x310>
    80013aee:	368170ef          	jal	8002ae56 <printf>
    80013af2:	00040797          	auipc	a5,0x40
    80013af6:	51f7c783          	lbu	a5,1311(a5) # 80054011 <excpt+0x1>
    80013afa:	20079f63          	bnez	a5,80013d18 <software_interrupt_msi+0xcaa>
    80013afe:	4529                	li	a0,10
    80013b00:	044160ef          	jal	80029b44 <putchar>
    80013b04:	c411                	beqz	s0,80013b10 <software_interrupt_msi+0xaa2>
    80013b06:	00040797          	auipc	a5,0x40
    80013b0a:	50b7c783          	lbu	a5,1291(a5) # 80054011 <excpt+0x1>
    80013b0e:	c79d                	beqz	a5,80013b3c <software_interrupt_msi+0xace>
    80013b10:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013b12:	0001a597          	auipc	a1,0x1a
    80013b16:	87658593          	addi	a1,a1,-1930 # 8002d388 <__func__.0+0x2d0>
    80013b1a:	0001a517          	auipc	a0,0x1a
    80013b1e:	91650513          	addi	a0,a0,-1770 # 8002d430 <__func__.0+0x378>
    80013b22:	334170ef          	jal	8002ae56 <printf>
    80013b26:	4511                	li	a0,4
    80013b28:	be0ed0ef          	jal	80000f08 <goto_priv>
    80013b2c:	cf9ed0ef          	jal	80001824 <reset_state>
}
    80013b30:	60e2                	ld	ra,24(sp)
    80013b32:	8522                	mv	a0,s0
    80013b34:	6442                	ld	s0,16(sp)
    80013b36:	64a2                	ld	s1,8(sp)
    80013b38:	6105                	addi	sp,sp,32
    80013b3a:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013b3c:	4405                	li	s0,1
    TEST_END();
    80013b3e:	0001a597          	auipc	a1,0x1a
    80013b42:	83a58593          	addi	a1,a1,-1990 # 8002d378 <__func__.0+0x2c0>
    80013b46:	bfd1                	j	80013b1a <software_interrupt_msi+0xaac>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013b48:	57fd                	li	a5,-1
    80013b4a:	6498                	ld	a4,8(s1)
    80013b4c:	17fe                	slli	a5,a5,0x3f
    80013b4e:	0789                	addi	a5,a5,2
    80013b50:	f4f710e3          	bne	a4,a5,80013a90 <software_interrupt_msi+0xa22>
    80013b54:	00040417          	auipc	s0,0x40
    80013b58:	4c042403          	lw	s0,1216(s0) # 80054014 <excpt+0x4>
    80013b5c:	1475                	addi	s0,s0,-3
    80013b5e:	00143413          	seqz	s0,s0
    80013b62:	b73d                	j	80013a90 <software_interrupt_msi+0xa22>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013b64:	57fd                	li	a5,-1
    80013b66:	6498                	ld	a4,8(s1)
    80013b68:	17fe                	slli	a5,a5,0x3f
    80013b6a:	0789                	addi	a5,a5,2
    80013b6c:	e8f710e3          	bne	a4,a5,800139ec <software_interrupt_msi+0x97e>
    80013b70:	00040417          	auipc	s0,0x40
    80013b74:	4a442403          	lw	s0,1188(s0) # 80054014 <excpt+0x4>
    80013b78:	1471                	addi	s0,s0,-4
    80013b7a:	00143413          	seqz	s0,s0
    80013b7e:	b5bd                	j	800139ec <software_interrupt_msi+0x97e>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013b80:	57fd                	li	a5,-1
    80013b82:	6498                	ld	a4,8(s1)
    80013b84:	17fe                	slli	a5,a5,0x3f
    80013b86:	0789                	addi	a5,a5,2
    80013b88:	d2f71ee3          	bne	a4,a5,800138c4 <software_interrupt_msi+0x856>
    80013b8c:	00040417          	auipc	s0,0x40
    80013b90:	48842403          	lw	s0,1160(s0) # 80054014 <excpt+0x4>
    80013b94:	1475                	addi	s0,s0,-3
    80013b96:	00143413          	seqz	s0,s0
    80013b9a:	b32d                	j	800138c4 <software_interrupt_msi+0x856>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b9c:	57fd                	li	a5,-1
    80013b9e:	6498                	ld	a4,8(s1)
    80013ba0:	17fe                	slli	a5,a5,0x3f
    80013ba2:	0789                	addi	a5,a5,2
    80013ba4:	c6f71ce3          	bne	a4,a5,8001381c <software_interrupt_msi+0x7ae>
    80013ba8:	00040417          	auipc	s0,0x40
    80013bac:	46c42403          	lw	s0,1132(s0) # 80054014 <excpt+0x4>
    80013bb0:	1471                	addi	s0,s0,-4
    80013bb2:	00143413          	seqz	s0,s0
    80013bb6:	b19d                	j	8001381c <software_interrupt_msi+0x7ae>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013bb8:	57fd                	li	a5,-1
    80013bba:	6498                	ld	a4,8(s1)
    80013bbc:	17fe                	slli	a5,a5,0x3f
    80013bbe:	0789                	addi	a5,a5,2
    80013bc0:	b2f71ae3          	bne	a4,a5,800136f4 <software_interrupt_msi+0x686>
    80013bc4:	00040417          	auipc	s0,0x40
    80013bc8:	45042403          	lw	s0,1104(s0) # 80054014 <excpt+0x4>
    80013bcc:	1475                	addi	s0,s0,-3
    80013bce:	00143413          	seqz	s0,s0
    80013bd2:	b60d                	j	800136f4 <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013bd4:	57fd                	li	a5,-1
    80013bd6:	6498                	ld	a4,8(s1)
    80013bd8:	17fe                	slli	a5,a5,0x3f
    80013bda:	0789                	addi	a5,a5,2
    80013bdc:	a6f719e3          	bne	a4,a5,8001364e <software_interrupt_msi+0x5e0>
    80013be0:	00040417          	auipc	s0,0x40
    80013be4:	43442403          	lw	s0,1076(s0) # 80054014 <excpt+0x4>
    80013be8:	1471                	addi	s0,s0,-4
    80013bea:	00143413          	seqz	s0,s0
    80013bee:	b485                	j	8001364e <software_interrupt_msi+0x5e0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013bf0:	57fd                	li	a5,-1
    80013bf2:	6498                	ld	a4,8(s1)
    80013bf4:	17fe                	slli	a5,a5,0x3f
    80013bf6:	0789                	addi	a5,a5,2
    80013bf8:	92f717e3          	bne	a4,a5,80013526 <software_interrupt_msi+0x4b8>
    80013bfc:	00040417          	auipc	s0,0x40
    80013c00:	41842403          	lw	s0,1048(s0) # 80054014 <excpt+0x4>
    80013c04:	1475                	addi	s0,s0,-3
    80013c06:	00143413          	seqz	s0,s0
    80013c0a:	91dff06f          	j	80013526 <software_interrupt_msi+0x4b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c0e:	57fd                	li	a5,-1
    80013c10:	6498                	ld	a4,8(s1)
    80013c12:	17fe                	slli	a5,a5,0x3f
    80013c14:	0789                	addi	a5,a5,2
    80013c16:	86f714e3          	bne	a4,a5,8001347e <software_interrupt_msi+0x410>
    80013c1a:	00040417          	auipc	s0,0x40
    80013c1e:	3fa42403          	lw	s0,1018(s0) # 80054014 <excpt+0x4>
    80013c22:	1471                	addi	s0,s0,-4
    80013c24:	00143413          	seqz	s0,s0
    80013c28:	857ff06f          	j	8001347e <software_interrupt_msi+0x410>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013c2c:	6480                	ld	s0,8(s1)
    80013c2e:	57f5                	li	a5,-3
    80013c30:	8385                	srli	a5,a5,0x1
    80013c32:	943e                	add	s0,s0,a5
    80013c34:	00143413          	seqz	s0,s0
    80013c38:	e32ff06f          	j	8001326a <software_interrupt_msi+0x1fc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c3c:	00040717          	auipc	a4,0x40
    80013c40:	3d872703          	lw	a4,984(a4) # 80054014 <excpt+0x4>
    80013c44:	4791                	li	a5,4
    80013c46:	d6f71ee3          	bne	a4,a5,800139c2 <software_interrupt_msi+0x954>
    80013c4a:	b371                	j	800139d6 <software_interrupt_msi+0x968>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c4c:	00040717          	auipc	a4,0x40
    80013c50:	3c872703          	lw	a4,968(a4) # 80054014 <excpt+0x4>
    80013c54:	4791                	li	a5,4
    80013c56:	caf71d63          	bne	a4,a5,80013110 <software_interrupt_msi+0xa2>
    80013c5a:	ccaff06f          	j	80013124 <software_interrupt_msi+0xb6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c5e:	00040717          	auipc	a4,0x40
    80013c62:	3b672703          	lw	a4,950(a4) # 80054014 <excpt+0x4>
    80013c66:	478d                	li	a5,3
    80013c68:	c2f719e3          	bne	a4,a5,8001389a <software_interrupt_msi+0x82c>
    80013c6c:	b189                	j	800138ae <software_interrupt_msi+0x840>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013c6e:	00040717          	auipc	a4,0x40
    80013c72:	3a672703          	lw	a4,934(a4) # 80054014 <excpt+0x4>
    80013c76:	478d                	li	a5,3
    80013c78:	def718e3          	bne	a4,a5,80013a68 <software_interrupt_msi+0x9fa>
    80013c7c:	b501                	j	80013a7c <software_interrupt_msi+0xa0e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c7e:	00040717          	auipc	a4,0x40
    80013c82:	39672703          	lw	a4,918(a4) # 80054014 <excpt+0x4>
    80013c86:	478d                	li	a5,3
    80013c88:	86f71ae3          	bne	a4,a5,800134fc <software_interrupt_msi+0x48e>
    80013c8c:	885ff06f          	j	80013510 <software_interrupt_msi+0x4a2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c90:	00040717          	auipc	a4,0x40
    80013c94:	38472703          	lw	a4,900(a4) # 80054014 <excpt+0x4>
    80013c98:	4791                	li	a5,4
    80013c9a:	faf71d63          	bne	a4,a5,80013454 <software_interrupt_msi+0x3e6>
    80013c9e:	fcaff06f          	j	80013468 <software_interrupt_msi+0x3fa>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013ca2:	00040717          	auipc	a4,0x40
    80013ca6:	37272703          	lw	a4,882(a4) # 80054014 <excpt+0x4>
    80013caa:	4791                	li	a5,4
    80013cac:	b4f713e3          	bne	a4,a5,800137f2 <software_interrupt_msi+0x784>
    80013cb0:	be99                	j	80013806 <software_interrupt_msi+0x798>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013cb2:	00040717          	auipc	a4,0x40
    80013cb6:	36272703          	lw	a4,866(a4) # 80054014 <excpt+0x4>
    80013cba:	4791                	li	a5,4
    80013cbc:	96f714e3          	bne	a4,a5,80013624 <software_interrupt_msi+0x5b6>
    80013cc0:	baa5                	j	80013638 <software_interrupt_msi+0x5ca>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013cc2:	00040717          	auipc	a4,0x40
    80013cc6:	35272703          	lw	a4,850(a4) # 80054014 <excpt+0x4>
    80013cca:	478d                	li	a5,3
    80013ccc:	9ef71fe3          	bne	a4,a5,800136ca <software_interrupt_msi+0x65c>
    80013cd0:	b439                	j	800136de <software_interrupt_msi+0x670>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013cd2:	00019517          	auipc	a0,0x19
    80013cd6:	6fe50513          	addi	a0,a0,1790 # 8002d3d0 <__func__.0+0x318>
    80013cda:	17c170ef          	jal	8002ae56 <printf>
    80013cde:	02900513          	li	a0,41
    80013ce2:	663150ef          	jal	80029b44 <putchar>
    80013ce6:	cc2ff06f          	j	800131a8 <software_interrupt_msi+0x13a>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013cea:	00019517          	auipc	a0,0x19
    80013cee:	6e650513          	addi	a0,a0,1766 # 8002d3d0 <__func__.0+0x318>
    80013cf2:	164170ef          	jal	8002ae56 <printf>
    80013cf6:	02900513          	li	a0,41
    80013cfa:	64b150ef          	jal	80029b44 <putchar>
    80013cfe:	b915                	j	80013932 <software_interrupt_msi+0x8c4>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013d00:	00019517          	auipc	a0,0x19
    80013d04:	6d050513          	addi	a0,a0,1744 # 8002d3d0 <__func__.0+0x318>
    80013d08:	14e170ef          	jal	8002ae56 <printf>
    80013d0c:	02900513          	li	a0,41
    80013d10:	635150ef          	jal	80029b44 <putchar>
    80013d14:	dbcff06f          	j	800132d0 <software_interrupt_msi+0x262>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013d18:	00019517          	auipc	a0,0x19
    80013d1c:	6b850513          	addi	a0,a0,1720 # 8002d3d0 <__func__.0+0x318>
    80013d20:	136170ef          	jal	8002ae56 <printf>
    80013d24:	02900513          	li	a0,41
    80013d28:	61d150ef          	jal	80029b44 <putchar>
    80013d2c:	bbc9                	j	80013afe <software_interrupt_msi+0xa90>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013d2e:	00019517          	auipc	a0,0x19
    80013d32:	6a250513          	addi	a0,a0,1698 # 8002d3d0 <__func__.0+0x318>
    80013d36:	120170ef          	jal	8002ae56 <printf>
    80013d3a:	02900513          	li	a0,41
    80013d3e:	607150ef          	jal	80029b44 <putchar>
    80013d42:	b405                	j	80013762 <software_interrupt_msi+0x6f4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013d44:	00019517          	auipc	a0,0x19
    80013d48:	68c50513          	addi	a0,a0,1676 # 8002d3d0 <__func__.0+0x318>
    80013d4c:	10a170ef          	jal	8002ae56 <printf>
    80013d50:	02900513          	li	a0,41
    80013d54:	5f1150ef          	jal	80029b44 <putchar>
    80013d58:	83dff06f          	j	80013594 <software_interrupt_msi+0x526>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013d5c:	00019517          	auipc	a0,0x19
    80013d60:	67450513          	addi	a0,a0,1652 # 8002d3d0 <__func__.0+0x318>
    80013d64:	0f2170ef          	jal	8002ae56 <printf>
    80013d68:	02900513          	li	a0,41
    80013d6c:	5d9150ef          	jal	80029b44 <putchar>
    80013d70:	e54ff06f          	j	800133c4 <software_interrupt_msi+0x356>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013d74:	00019517          	auipc	a0,0x19
    80013d78:	65c50513          	addi	a0,a0,1628 # 8002d3d0 <__func__.0+0x318>
    80013d7c:	0da170ef          	jal	8002ae56 <printf>
    80013d80:	02900513          	li	a0,41
    80013d84:	5c1150ef          	jal	80029b44 <putchar>
    80013d88:	dc2ff06f          	j	8001334a <software_interrupt_msi+0x2dc>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013d8c:	00040717          	auipc	a4,0x40
    80013d90:	28872703          	lw	a4,648(a4) # 80054014 <excpt+0x4>
    80013d94:	478d                	li	a5,3
    80013d96:	00019597          	auipc	a1,0x19
    80013d9a:	5e258593          	addi	a1,a1,1506 # 8002d378 <__func__.0+0x2c0>
    80013d9e:	90f705e3          	beq	a4,a5,800136a8 <software_interrupt_msi+0x63a>
    80013da2:	00019597          	auipc	a1,0x19
    80013da6:	5e658593          	addi	a1,a1,1510 # 8002d388 <__func__.0+0x2d0>
    80013daa:	8ffff06f          	j	800136a8 <software_interrupt_msi+0x63a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013dae:	00040717          	auipc	a4,0x40
    80013db2:	26672703          	lw	a4,614(a4) # 80054014 <excpt+0x4>
    80013db6:	4791                	li	a5,4
    80013db8:	00019597          	auipc	a1,0x19
    80013dbc:	5c058593          	addi	a1,a1,1472 # 8002d378 <__func__.0+0x2c0>
    80013dc0:	bef700e3          	beq	a4,a5,800139a0 <software_interrupt_msi+0x932>
    80013dc4:	00019597          	auipc	a1,0x19
    80013dc8:	5c458593          	addi	a1,a1,1476 # 8002d388 <__func__.0+0x2d0>
    80013dcc:	bed1                	j	800139a0 <software_interrupt_msi+0x932>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013dce:	00040717          	auipc	a4,0x40
    80013dd2:	24672703          	lw	a4,582(a4) # 80054014 <excpt+0x4>
    80013dd6:	4791                	li	a5,4
    80013dd8:	00019597          	auipc	a1,0x19
    80013ddc:	5a058593          	addi	a1,a1,1440 # 8002d378 <__func__.0+0x2c0>
    80013de0:	b0f70763          	beq	a4,a5,800130ee <software_interrupt_msi+0x80>
    80013de4:	00019597          	auipc	a1,0x19
    80013de8:	5a458593          	addi	a1,a1,1444 # 8002d388 <__func__.0+0x2d0>
    80013dec:	b02ff06f          	j	800130ee <software_interrupt_msi+0x80>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013df0:	00040717          	auipc	a4,0x40
    80013df4:	22472703          	lw	a4,548(a4) # 80054014 <excpt+0x4>
    80013df8:	4791                	li	a5,4
    80013dfa:	00019597          	auipc	a1,0x19
    80013dfe:	57e58593          	addi	a1,a1,1406 # 8002d378 <__func__.0+0x2c0>
    80013e02:	80f700e3          	beq	a4,a5,80013602 <software_interrupt_msi+0x594>
    80013e06:	00019597          	auipc	a1,0x19
    80013e0a:	58258593          	addi	a1,a1,1410 # 8002d388 <__func__.0+0x2d0>
    80013e0e:	ff4ff06f          	j	80013602 <software_interrupt_msi+0x594>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e12:	00040717          	auipc	a4,0x40
    80013e16:	20272703          	lw	a4,514(a4) # 80054014 <excpt+0x4>
    80013e1a:	4791                	li	a5,4
    80013e1c:	00019597          	auipc	a1,0x19
    80013e20:	55c58593          	addi	a1,a1,1372 # 8002d378 <__func__.0+0x2c0>
    80013e24:	9af706e3          	beq	a4,a5,800137d0 <software_interrupt_msi+0x762>
    80013e28:	00019597          	auipc	a1,0x19
    80013e2c:	56058593          	addi	a1,a1,1376 # 8002d388 <__func__.0+0x2d0>
    80013e30:	b245                	j	800137d0 <software_interrupt_msi+0x762>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e32:	00040717          	auipc	a4,0x40
    80013e36:	1e272703          	lw	a4,482(a4) # 80054014 <excpt+0x4>
    80013e3a:	4791                	li	a5,4
    80013e3c:	00019597          	auipc	a1,0x19
    80013e40:	53c58593          	addi	a1,a1,1340 # 8002d378 <__func__.0+0x2c0>
    80013e44:	def70763          	beq	a4,a5,80013432 <software_interrupt_msi+0x3c4>
    80013e48:	00019597          	auipc	a1,0x19
    80013e4c:	54058593          	addi	a1,a1,1344 # 8002d388 <__func__.0+0x2d0>
    80013e50:	de2ff06f          	j	80013432 <software_interrupt_msi+0x3c4>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013e54:	00040717          	auipc	a4,0x40
    80013e58:	1c072703          	lw	a4,448(a4) # 80054014 <excpt+0x4>
    80013e5c:	478d                	li	a5,3
    80013e5e:	00019597          	auipc	a1,0x19
    80013e62:	51a58593          	addi	a1,a1,1306 # 8002d378 <__func__.0+0x2c0>
    80013e66:	e6f70a63          	beq	a4,a5,800134da <software_interrupt_msi+0x46c>
    80013e6a:	00019597          	auipc	a1,0x19
    80013e6e:	51e58593          	addi	a1,a1,1310 # 8002d388 <__func__.0+0x2d0>
    80013e72:	e68ff06f          	j	800134da <software_interrupt_msi+0x46c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013e76:	00040717          	auipc	a4,0x40
    80013e7a:	19e72703          	lw	a4,414(a4) # 80054014 <excpt+0x4>
    80013e7e:	478d                	li	a5,3
    80013e80:	00019597          	auipc	a1,0x19
    80013e84:	4f858593          	addi	a1,a1,1272 # 8002d378 <__func__.0+0x2c0>
    80013e88:	baf70fe3          	beq	a4,a5,80013a46 <software_interrupt_msi+0x9d8>
    80013e8c:	00019597          	auipc	a1,0x19
    80013e90:	4fc58593          	addi	a1,a1,1276 # 8002d388 <__func__.0+0x2d0>
    80013e94:	be4d                	j	80013a46 <software_interrupt_msi+0x9d8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013e96:	00040717          	auipc	a4,0x40
    80013e9a:	17e72703          	lw	a4,382(a4) # 80054014 <excpt+0x4>
    80013e9e:	478d                	li	a5,3
    80013ea0:	00019597          	auipc	a1,0x19
    80013ea4:	4d858593          	addi	a1,a1,1240 # 8002d378 <__func__.0+0x2c0>
    80013ea8:	9cf708e3          	beq	a4,a5,80013878 <software_interrupt_msi+0x80a>
    80013eac:	00019597          	auipc	a1,0x19
    80013eb0:	4dc58593          	addi	a1,a1,1244 # 8002d388 <__func__.0+0x2d0>
    80013eb4:	b2d1                	j	80013878 <software_interrupt_msi+0x80a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013eb6:	00040417          	auipc	s0,0x40
    80013eba:	15e42403          	lw	s0,350(s0) # 80054014 <excpt+0x4>
    80013ebe:	1471                	addi	s0,s0,-4
    80013ec0:	00143413          	seqz	s0,s0
    80013ec4:	a7eff06f          	j	80013142 <software_interrupt_msi+0xd4>

0000000080013ec8 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80013ec8:	1101                	addi	sp,sp,-32

    TEST_START();
    80013eca:	00018597          	auipc	a1,0x18
    80013ece:	d7658593          	addi	a1,a1,-650 # 8002bc40 <__func__.1>
    80013ed2:	00019517          	auipc	a0,0x19
    80013ed6:	4c650513          	addi	a0,a0,1222 # 8002d398 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80013eda:	ec06                	sd	ra,24(sp)
    80013edc:	e822                	sd	s0,16(sp)
    80013ede:	e426                	sd	s1,8(sp)
    TEST_START();
    80013ee0:	777160ef          	jal	8002ae56 <printf>
    80013ee4:	4529                	li	a0,10
    80013ee6:	45f150ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80013eea:	f23ec0ef          	jal	80000e0c <test_setup_except_function>

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80013eee:	4511                	li	a0,4
    80013ef0:	818ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80013ef4:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80013ef8:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80013efc:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013f00:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013f04:	450d                	li	a0,3
    80013f06:	802ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80013f0a:	08200593          	li	a1,130
    80013f0e:	0001e617          	auipc	a2,0x1e
    80013f12:	f4260613          	addi	a2,a2,-190 # 80031e50 <__func__.0+0x4d98>
    80013f16:	00019517          	auipc	a0,0x19
    80013f1a:	49a50513          	addi	a0,a0,1178 # 8002d3b0 <__func__.0+0x2f8>
    80013f1e:	739160ef          	jal	8002ae56 <printf>
    80013f22:	00040797          	auipc	a5,0x40
    80013f26:	0ef7c783          	lbu	a5,239(a5) # 80054011 <excpt+0x1>
    80013f2a:	00040497          	auipc	s1,0x40
    80013f2e:	0e648493          	addi	s1,s1,230 # 80054010 <excpt>
    80013f32:	00019597          	auipc	a1,0x19
    80013f36:	45658593          	addi	a1,a1,1110 # 8002d388 <__func__.0+0x2d0>
    80013f3a:	c799                	beqz	a5,80013f48 <software_interrupt_ssi+0x80>
    80013f3c:	57fd                	li	a5,-1
    80013f3e:	6498                	ld	a4,8(s1)
    80013f40:	17fe                	slli	a5,a5,0x3f
    80013f42:	0785                	addi	a5,a5,1
    80013f44:	26f706e3          	beq	a4,a5,800149b0 <software_interrupt_ssi+0xae8>
    80013f48:	00019517          	auipc	a0,0x19
    80013f4c:	48050513          	addi	a0,a0,1152 # 8002d3c8 <__func__.0+0x310>
    80013f50:	707160ef          	jal	8002ae56 <printf>
    80013f54:	00040797          	auipc	a5,0x40
    80013f58:	0bd7c783          	lbu	a5,189(a5) # 80054011 <excpt+0x1>
    80013f5c:	c799                	beqz	a5,80013f6a <software_interrupt_ssi+0xa2>
    80013f5e:	57fd                	li	a5,-1
    80013f60:	6498                	ld	a4,8(s1)
    80013f62:	17fe                	slli	a5,a5,0x3f
    80013f64:	0785                	addi	a5,a5,1
    80013f66:	08f70de3          	beq	a4,a5,80014800 <software_interrupt_ssi+0x938>
    80013f6a:	00019517          	auipc	a0,0x19
    80013f6e:	46650513          	addi	a0,a0,1126 # 8002d3d0 <__func__.0+0x318>
    80013f72:	6e5160ef          	jal	8002ae56 <printf>
    80013f76:	02900513          	li	a0,41
    80013f7a:	3cb150ef          	jal	80029b44 <putchar>
    80013f7e:	4529                	li	a0,10
    80013f80:	3c5150ef          	jal	80029b44 <putchar>
    80013f84:	00040797          	auipc	a5,0x40
    80013f88:	08d7c783          	lbu	a5,141(a5) # 80054011 <excpt+0x1>
    80013f8c:	4401                	li	s0,0
    80013f8e:	c799                	beqz	a5,80013f9c <software_interrupt_ssi+0xd4>
    80013f90:	57fd                	li	a5,-1
    80013f92:	6498                	ld	a4,8(s1)
    80013f94:	17fe                	slli	a5,a5,0x3f
    80013f96:	0785                	addi	a5,a5,1
    80013f98:	18f701e3          	beq	a4,a5,8001491a <software_interrupt_ssi+0xa52>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80013f9c:	e71ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013fa0:	4511                	li	a0,4
    80013fa2:	f67ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013fa6:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80013faa:	57fd                	li	a5,-1
    80013fac:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80013fb0:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013fb4:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013fb8:	450d                	li	a0,3
    80013fba:	f4fec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80013fbe:	08200593          	li	a1,130
    80013fc2:	0001e617          	auipc	a2,0x1e
    80013fc6:	efe60613          	addi	a2,a2,-258 # 80031ec0 <__func__.0+0x4e08>
    80013fca:	00019517          	auipc	a0,0x19
    80013fce:	3e650513          	addi	a0,a0,998 # 8002d3b0 <__func__.0+0x2f8>
    80013fd2:	685160ef          	jal	8002ae56 <printf>
    80013fd6:	00040797          	auipc	a5,0x40
    80013fda:	03b7c783          	lbu	a5,59(a5) # 80054011 <excpt+0x1>
    80013fde:	00019597          	auipc	a1,0x19
    80013fe2:	3aa58593          	addi	a1,a1,938 # 8002d388 <__func__.0+0x2d0>
    80013fe6:	c799                	beqz	a5,80013ff4 <software_interrupt_ssi+0x12c>
    80013fe8:	57fd                	li	a5,-1
    80013fea:	6498                	ld	a4,8(s1)
    80013fec:	17fe                	slli	a5,a5,0x3f
    80013fee:	0785                	addi	a5,a5,1
    80013ff0:	12f70ee3          	beq	a4,a5,8001492c <software_interrupt_ssi+0xa64>
    80013ff4:	00019517          	auipc	a0,0x19
    80013ff8:	3d450513          	addi	a0,a0,980 # 8002d3c8 <__func__.0+0x310>
    80013ffc:	65b160ef          	jal	8002ae56 <printf>
    80014000:	00040797          	auipc	a5,0x40
    80014004:	0117c783          	lbu	a5,17(a5) # 80054011 <excpt+0x1>
    80014008:	c799                	beqz	a5,80014016 <software_interrupt_ssi+0x14e>
    8001400a:	57fd                	li	a5,-1
    8001400c:	6498                	ld	a4,8(s1)
    8001400e:	17fe                	slli	a5,a5,0x3f
    80014010:	0785                	addi	a5,a5,1
    80014012:	7cf70e63          	beq	a4,a5,800147ee <software_interrupt_ssi+0x926>
    80014016:	00019517          	auipc	a0,0x19
    8001401a:	3ba50513          	addi	a0,a0,954 # 8002d3d0 <__func__.0+0x318>
    8001401e:	639160ef          	jal	8002ae56 <printf>
    80014022:	02900513          	li	a0,41
    80014026:	31f150ef          	jal	80029b44 <putchar>
    8001402a:	4529                	li	a0,10
    8001402c:	319150ef          	jal	80029b44 <putchar>
    80014030:	c801                	beqz	s0,80014040 <software_interrupt_ssi+0x178>
    80014032:	00040797          	auipc	a5,0x40
    80014036:	fdf7c783          	lbu	a5,-33(a5) # 80054011 <excpt+0x1>
    8001403a:	4401                	li	s0,0
    8001403c:	78079a63          	bnez	a5,800147d0 <software_interrupt_ssi+0x908>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014040:	dcdec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014044:	4511                	li	a0,4
    80014046:	ec3ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001404a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001404e:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80014052:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80014056:	450d                	li	a0,3
    80014058:	eb1ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001405c:	08200593          	li	a1,130
    80014060:	0001e617          	auipc	a2,0x1e
    80014064:	ed060613          	addi	a2,a2,-304 # 80031f30 <__func__.0+0x4e78>
    80014068:	00019517          	auipc	a0,0x19
    8001406c:	34850513          	addi	a0,a0,840 # 8002d3b0 <__func__.0+0x2f8>
    80014070:	5e7160ef          	jal	8002ae56 <printf>
    80014074:	00040797          	auipc	a5,0x40
    80014078:	f9d7c783          	lbu	a5,-99(a5) # 80054011 <excpt+0x1>
    8001407c:	00019597          	auipc	a1,0x19
    80014080:	30c58593          	addi	a1,a1,780 # 8002d388 <__func__.0+0x2d0>
    80014084:	e789                	bnez	a5,8001408e <software_interrupt_ssi+0x1c6>
    80014086:	00019597          	auipc	a1,0x19
    8001408a:	2f258593          	addi	a1,a1,754 # 8002d378 <__func__.0+0x2c0>
    8001408e:	00019517          	auipc	a0,0x19
    80014092:	33a50513          	addi	a0,a0,826 # 8002d3c8 <__func__.0+0x310>
    80014096:	5c1160ef          	jal	8002ae56 <printf>
    8001409a:	00040797          	auipc	a5,0x40
    8001409e:	f777c783          	lbu	a5,-137(a5) # 80054011 <excpt+0x1>
    800140a2:	7e079463          	bnez	a5,8001488a <software_interrupt_ssi+0x9c2>
    800140a6:	4529                	li	a0,10
    800140a8:	29d150ef          	jal	80029b44 <putchar>
    800140ac:	c419                	beqz	s0,800140ba <software_interrupt_ssi+0x1f2>
    800140ae:	00040417          	auipc	s0,0x40
    800140b2:	f6344403          	lbu	s0,-157(s0) # 80054011 <excpt+0x1>
    800140b6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800140ba:	d53ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800140be:	4511                	li	a0,4
    800140c0:	e49ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800140c4:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800140c8:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800140cc:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800140d0:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800140d4:	450d                	li	a0,3
    800140d6:	e33ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800140da:	08200593          	li	a1,130
    800140de:	0001e617          	auipc	a2,0x1e
    800140e2:	eaa60613          	addi	a2,a2,-342 # 80031f88 <__func__.0+0x4ed0>
    800140e6:	00019517          	auipc	a0,0x19
    800140ea:	2ca50513          	addi	a0,a0,714 # 8002d3b0 <__func__.0+0x2f8>
    800140ee:	569160ef          	jal	8002ae56 <printf>
    800140f2:	00040797          	auipc	a5,0x40
    800140f6:	f1f7c783          	lbu	a5,-225(a5) # 80054011 <excpt+0x1>
    800140fa:	00019597          	auipc	a1,0x19
    800140fe:	28e58593          	addi	a1,a1,654 # 8002d388 <__func__.0+0x2d0>
    80014102:	c799                	beqz	a5,80014110 <software_interrupt_ssi+0x248>
    80014104:	57fd                	li	a5,-1
    80014106:	6498                	ld	a4,8(s1)
    80014108:	17fe                	slli	a5,a5,0x3f
    8001410a:	0785                	addi	a5,a5,1
    8001410c:	04f701e3          	beq	a4,a5,8001494e <software_interrupt_ssi+0xa86>
    80014110:	00019517          	auipc	a0,0x19
    80014114:	2b850513          	addi	a0,a0,696 # 8002d3c8 <__func__.0+0x310>
    80014118:	53f160ef          	jal	8002ae56 <printf>
    8001411c:	00040797          	auipc	a5,0x40
    80014120:	ef57c783          	lbu	a5,-267(a5) # 80054011 <excpt+0x1>
    80014124:	c799                	beqz	a5,80014132 <software_interrupt_ssi+0x26a>
    80014126:	57fd                	li	a5,-1
    80014128:	6498                	ld	a4,8(s1)
    8001412a:	17fe                	slli	a5,a5,0x3f
    8001412c:	0785                	addi	a5,a5,1
    8001412e:	70f70a63          	beq	a4,a5,80014842 <software_interrupt_ssi+0x97a>
    80014132:	00019517          	auipc	a0,0x19
    80014136:	29e50513          	addi	a0,a0,670 # 8002d3d0 <__func__.0+0x318>
    8001413a:	51d160ef          	jal	8002ae56 <printf>
    8001413e:	02900513          	li	a0,41
    80014142:	203150ef          	jal	80029b44 <putchar>
    80014146:	4529                	li	a0,10
    80014148:	1fd150ef          	jal	80029b44 <putchar>
    8001414c:	c801                	beqz	s0,8001415c <software_interrupt_ssi+0x294>
    8001414e:	00040797          	auipc	a5,0x40
    80014152:	ec37c783          	lbu	a5,-317(a5) # 80054011 <excpt+0x1>
    80014156:	4401                	li	s0,0
    80014158:	64079e63          	bnez	a5,800147b4 <software_interrupt_ssi+0x8ec>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    8001415c:	cb1ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014160:	4511                	li	a0,4
    80014162:	da7ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014166:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001416a:	57fd                	li	a5,-1
    8001416c:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014170:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014174:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014178:	450d                	li	a0,3
    8001417a:	d8fec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001417e:	08200593          	li	a1,130
    80014182:	0001e617          	auipc	a2,0x1e
    80014186:	e7660613          	addi	a2,a2,-394 # 80031ff8 <__func__.0+0x4f40>
    8001418a:	00019517          	auipc	a0,0x19
    8001418e:	22650513          	addi	a0,a0,550 # 8002d3b0 <__func__.0+0x2f8>
    80014192:	4c5160ef          	jal	8002ae56 <printf>
    80014196:	00040797          	auipc	a5,0x40
    8001419a:	e7b7c783          	lbu	a5,-389(a5) # 80054011 <excpt+0x1>
    8001419e:	00019597          	auipc	a1,0x19
    800141a2:	1ea58593          	addi	a1,a1,490 # 8002d388 <__func__.0+0x2d0>
    800141a6:	c799                	beqz	a5,800141b4 <software_interrupt_ssi+0x2ec>
    800141a8:	57fd                	li	a5,-1
    800141aa:	6498                	ld	a4,8(s1)
    800141ac:	17fe                	slli	a5,a5,0x3f
    800141ae:	0785                	addi	a5,a5,1
    800141b0:	02f701e3          	beq	a4,a5,800149d2 <software_interrupt_ssi+0xb0a>
    800141b4:	00019517          	auipc	a0,0x19
    800141b8:	21450513          	addi	a0,a0,532 # 8002d3c8 <__func__.0+0x310>
    800141bc:	49b160ef          	jal	8002ae56 <printf>
    800141c0:	00040797          	auipc	a5,0x40
    800141c4:	e517c783          	lbu	a5,-431(a5) # 80054011 <excpt+0x1>
    800141c8:	c799                	beqz	a5,800141d6 <software_interrupt_ssi+0x30e>
    800141ca:	57fd                	li	a5,-1
    800141cc:	6498                	ld	a4,8(s1)
    800141ce:	17fe                	slli	a5,a5,0x3f
    800141d0:	0785                	addi	a5,a5,1
    800141d2:	68f70163          	beq	a4,a5,80014854 <software_interrupt_ssi+0x98c>
    800141d6:	00019517          	auipc	a0,0x19
    800141da:	1fa50513          	addi	a0,a0,506 # 8002d3d0 <__func__.0+0x318>
    800141de:	479160ef          	jal	8002ae56 <printf>
    800141e2:	02900513          	li	a0,41
    800141e6:	15f150ef          	jal	80029b44 <putchar>
    800141ea:	4529                	li	a0,10
    800141ec:	159150ef          	jal	80029b44 <putchar>
    800141f0:	c801                	beqz	s0,80014200 <software_interrupt_ssi+0x338>
    800141f2:	00040797          	auipc	a5,0x40
    800141f6:	e1f7c783          	lbu	a5,-481(a5) # 80054011 <excpt+0x1>
    800141fa:	4401                	li	s0,0
    800141fc:	58079e63          	bnez	a5,80014798 <software_interrupt_ssi+0x8d0>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014200:	c0dec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014204:	4511                	li	a0,4
    80014206:	d03ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001420a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001420e:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014212:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014216:	450d                	li	a0,3
    80014218:	cf1ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001421c:	08200593          	li	a1,130
    80014220:	0001e617          	auipc	a2,0x1e
    80014224:	e3860613          	addi	a2,a2,-456 # 80032058 <__func__.0+0x4fa0>
    80014228:	00019517          	auipc	a0,0x19
    8001422c:	18850513          	addi	a0,a0,392 # 8002d3b0 <__func__.0+0x2f8>
    80014230:	427160ef          	jal	8002ae56 <printf>
    80014234:	00040797          	auipc	a5,0x40
    80014238:	ddd7c783          	lbu	a5,-547(a5) # 80054011 <excpt+0x1>
    8001423c:	00019597          	auipc	a1,0x19
    80014240:	14c58593          	addi	a1,a1,332 # 8002d388 <__func__.0+0x2d0>
    80014244:	e789                	bnez	a5,8001424e <software_interrupt_ssi+0x386>
    80014246:	00019597          	auipc	a1,0x19
    8001424a:	13258593          	addi	a1,a1,306 # 8002d378 <__func__.0+0x2c0>
    8001424e:	00019517          	auipc	a0,0x19
    80014252:	17a50513          	addi	a0,a0,378 # 8002d3c8 <__func__.0+0x310>
    80014256:	401160ef          	jal	8002ae56 <printf>
    8001425a:	00040797          	auipc	a5,0x40
    8001425e:	db77c783          	lbu	a5,-585(a5) # 80054011 <excpt+0x1>
    80014262:	64079b63          	bnez	a5,800148b8 <software_interrupt_ssi+0x9f0>
    80014266:	4529                	li	a0,10
    80014268:	0dd150ef          	jal	80029b44 <putchar>
    8001426c:	c419                	beqz	s0,8001427a <software_interrupt_ssi+0x3b2>
    8001426e:	00040417          	auipc	s0,0x40
    80014272:	da344403          	lbu	s0,-605(s0) # 80054011 <excpt+0x1>
    80014276:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001427a:	b93ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001427e:	4511                	li	a0,4
    80014280:	c89ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014284:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014288:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001428c:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014290:	450d                	li	a0,3
    80014292:	c77ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014296:	08200593          	li	a1,130
    8001429a:	0001e617          	auipc	a2,0x1e
    8001429e:	e0e60613          	addi	a2,a2,-498 # 800320a8 <__func__.0+0x4ff0>
    800142a2:	00019517          	auipc	a0,0x19
    800142a6:	10e50513          	addi	a0,a0,270 # 8002d3b0 <__func__.0+0x2f8>
    800142aa:	3ad160ef          	jal	8002ae56 <printf>
    800142ae:	00040797          	auipc	a5,0x40
    800142b2:	d637c783          	lbu	a5,-669(a5) # 80054011 <excpt+0x1>
    800142b6:	00019597          	auipc	a1,0x19
    800142ba:	0d258593          	addi	a1,a1,210 # 8002d388 <__func__.0+0x2d0>
    800142be:	e789                	bnez	a5,800142c8 <software_interrupt_ssi+0x400>
    800142c0:	00019597          	auipc	a1,0x19
    800142c4:	0b858593          	addi	a1,a1,184 # 8002d378 <__func__.0+0x2c0>
    800142c8:	00019517          	auipc	a0,0x19
    800142cc:	10050513          	addi	a0,a0,256 # 8002d3c8 <__func__.0+0x310>
    800142d0:	387160ef          	jal	8002ae56 <printf>
    800142d4:	00040797          	auipc	a5,0x40
    800142d8:	d3d7c783          	lbu	a5,-707(a5) # 80054011 <excpt+0x1>
    800142dc:	5c079363          	bnez	a5,800148a2 <software_interrupt_ssi+0x9da>
    800142e0:	4529                	li	a0,10
    800142e2:	063150ef          	jal	80029b44 <putchar>
    800142e6:	c419                	beqz	s0,800142f4 <software_interrupt_ssi+0x42c>
    800142e8:	00040417          	auipc	s0,0x40
    800142ec:	d2944403          	lbu	s0,-727(s0) # 80054011 <excpt+0x1>
    800142f0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    800142f4:	b19ec0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    800142f8:	b15ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800142fc:	4511                	li	a0,4
    800142fe:	c0bec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80014302:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80014306:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    8001430a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001430e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80014312:	4509                	li	a0,2
    80014314:	bf5ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014318:	08200593          	li	a1,130
    8001431c:	0001e617          	auipc	a2,0x1e
    80014320:	ddc60613          	addi	a2,a2,-548 # 800320f8 <__func__.0+0x5040>
    80014324:	00019517          	auipc	a0,0x19
    80014328:	08c50513          	addi	a0,a0,140 # 8002d3b0 <__func__.0+0x2f8>
    8001432c:	32b160ef          	jal	8002ae56 <printf>
    80014330:	00040797          	auipc	a5,0x40
    80014334:	ce17c783          	lbu	a5,-799(a5) # 80054011 <excpt+0x1>
    80014338:	00019597          	auipc	a1,0x19
    8001433c:	05058593          	addi	a1,a1,80 # 8002d388 <__func__.0+0x2d0>
    80014340:	c799                	beqz	a5,8001434e <software_interrupt_ssi+0x486>
    80014342:	57fd                	li	a5,-1
    80014344:	6498                	ld	a4,8(s1)
    80014346:	17fe                	slli	a5,a5,0x3f
    80014348:	0785                	addi	a5,a5,1
    8001434a:	6af70563          	beq	a4,a5,800149f4 <software_interrupt_ssi+0xb2c>
    8001434e:	00019517          	auipc	a0,0x19
    80014352:	07a50513          	addi	a0,a0,122 # 8002d3c8 <__func__.0+0x310>
    80014356:	301160ef          	jal	8002ae56 <printf>
    8001435a:	00040797          	auipc	a5,0x40
    8001435e:	cb77c783          	lbu	a5,-841(a5) # 80054011 <excpt+0x1>
    80014362:	c799                	beqz	a5,80014370 <software_interrupt_ssi+0x4a8>
    80014364:	57fd                	li	a5,-1
    80014366:	6498                	ld	a4,8(s1)
    80014368:	17fe                	slli	a5,a5,0x3f
    8001436a:	0785                	addi	a5,a5,1
    8001436c:	4af70363          	beq	a4,a5,80014812 <software_interrupt_ssi+0x94a>
    80014370:	00019517          	auipc	a0,0x19
    80014374:	06050513          	addi	a0,a0,96 # 8002d3d0 <__func__.0+0x318>
    80014378:	2df160ef          	jal	8002ae56 <printf>
    8001437c:	02900513          	li	a0,41
    80014380:	7c4150ef          	jal	80029b44 <putchar>
    80014384:	4529                	li	a0,10
    80014386:	7be150ef          	jal	80029b44 <putchar>
    8001438a:	c801                	beqz	s0,8001439a <software_interrupt_ssi+0x4d2>
    8001438c:	00040797          	auipc	a5,0x40
    80014390:	c857c783          	lbu	a5,-891(a5) # 80054011 <excpt+0x1>
    80014394:	4401                	li	s0,0
    80014396:	3e079363          	bnez	a5,8001477c <software_interrupt_ssi+0x8b4>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    8001439a:	a73ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001439e:	4511                	li	a0,4
    800143a0:	b69ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800143a4:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800143a8:	57fd                	li	a5,-1
    800143aa:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800143ae:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800143b2:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800143b6:	4509                	li	a0,2
    800143b8:	b51ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800143bc:	08200593          	li	a1,130
    800143c0:	0001e617          	auipc	a2,0x1e
    800143c4:	da860613          	addi	a2,a2,-600 # 80032168 <__func__.0+0x50b0>
    800143c8:	00019517          	auipc	a0,0x19
    800143cc:	fe850513          	addi	a0,a0,-24 # 8002d3b0 <__func__.0+0x2f8>
    800143d0:	287160ef          	jal	8002ae56 <printf>
    800143d4:	00040797          	auipc	a5,0x40
    800143d8:	c3d7c783          	lbu	a5,-963(a5) # 80054011 <excpt+0x1>
    800143dc:	00019597          	auipc	a1,0x19
    800143e0:	fac58593          	addi	a1,a1,-84 # 8002d388 <__func__.0+0x2d0>
    800143e4:	c799                	beqz	a5,800143f2 <software_interrupt_ssi+0x52a>
    800143e6:	57fd                	li	a5,-1
    800143e8:	6498                	ld	a4,8(s1)
    800143ea:	17fe                	slli	a5,a5,0x3f
    800143ec:	0785                	addi	a5,a5,1
    800143ee:	5af70163          	beq	a4,a5,80014990 <software_interrupt_ssi+0xac8>
    800143f2:	00019517          	auipc	a0,0x19
    800143f6:	fd650513          	addi	a0,a0,-42 # 8002d3c8 <__func__.0+0x310>
    800143fa:	25d160ef          	jal	8002ae56 <printf>
    800143fe:	00040797          	auipc	a5,0x40
    80014402:	c137c783          	lbu	a5,-1005(a5) # 80054011 <excpt+0x1>
    80014406:	c799                	beqz	a5,80014414 <software_interrupt_ssi+0x54c>
    80014408:	57fd                	li	a5,-1
    8001440a:	6498                	ld	a4,8(s1)
    8001440c:	17fe                	slli	a5,a5,0x3f
    8001440e:	0785                	addi	a5,a5,1
    80014410:	40f70963          	beq	a4,a5,80014822 <software_interrupt_ssi+0x95a>
    80014414:	00019517          	auipc	a0,0x19
    80014418:	fbc50513          	addi	a0,a0,-68 # 8002d3d0 <__func__.0+0x318>
    8001441c:	23b160ef          	jal	8002ae56 <printf>
    80014420:	02900513          	li	a0,41
    80014424:	720150ef          	jal	80029b44 <putchar>
    80014428:	4529                	li	a0,10
    8001442a:	71a150ef          	jal	80029b44 <putchar>
    8001442e:	c801                	beqz	s0,8001443e <software_interrupt_ssi+0x576>
    80014430:	00040797          	auipc	a5,0x40
    80014434:	be17c783          	lbu	a5,-1055(a5) # 80054011 <excpt+0x1>
    80014438:	4401                	li	s0,0
    8001443a:	32079363          	bnez	a5,80014760 <software_interrupt_ssi+0x898>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001443e:	9cfec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014442:	4511                	li	a0,4
    80014444:	ac5ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014448:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001444c:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80014450:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80014454:	4509                	li	a0,2
    80014456:	ab3ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001445a:	08200593          	li	a1,130
    8001445e:	0001e617          	auipc	a2,0x1e
    80014462:	d7a60613          	addi	a2,a2,-646 # 800321d8 <__func__.0+0x5120>
    80014466:	00019517          	auipc	a0,0x19
    8001446a:	f4a50513          	addi	a0,a0,-182 # 8002d3b0 <__func__.0+0x2f8>
    8001446e:	1e9160ef          	jal	8002ae56 <printf>
    80014472:	00040797          	auipc	a5,0x40
    80014476:	b9f7c783          	lbu	a5,-1121(a5) # 80054011 <excpt+0x1>
    8001447a:	00019597          	auipc	a1,0x19
    8001447e:	f0e58593          	addi	a1,a1,-242 # 8002d388 <__func__.0+0x2d0>
    80014482:	e789                	bnez	a5,8001448c <software_interrupt_ssi+0x5c4>
    80014484:	00019597          	auipc	a1,0x19
    80014488:	ef458593          	addi	a1,a1,-268 # 8002d378 <__func__.0+0x2c0>
    8001448c:	00019517          	auipc	a0,0x19
    80014490:	f3c50513          	addi	a0,a0,-196 # 8002d3c8 <__func__.0+0x310>
    80014494:	1c3160ef          	jal	8002ae56 <printf>
    80014498:	00040797          	auipc	a5,0x40
    8001449c:	b797c783          	lbu	a5,-1159(a5) # 80054011 <excpt+0x1>
    800144a0:	3c079a63          	bnez	a5,80014874 <software_interrupt_ssi+0x9ac>
    800144a4:	4529                	li	a0,10
    800144a6:	69e150ef          	jal	80029b44 <putchar>
    800144aa:	c419                	beqz	s0,800144b8 <software_interrupt_ssi+0x5f0>
    800144ac:	00040417          	auipc	s0,0x40
    800144b0:	b6544403          	lbu	s0,-1179(s0) # 80054011 <excpt+0x1>
    800144b4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800144b8:	955ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800144bc:	4511                	li	a0,4
    800144be:	a4bec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800144c2:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800144c6:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800144ca:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800144ce:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800144d2:	4509                	li	a0,2
    800144d4:	a35ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800144d8:	08200593          	li	a1,130
    800144dc:	0001e617          	auipc	a2,0x1e
    800144e0:	d5460613          	addi	a2,a2,-684 # 80032230 <__func__.0+0x5178>
    800144e4:	00019517          	auipc	a0,0x19
    800144e8:	ecc50513          	addi	a0,a0,-308 # 8002d3b0 <__func__.0+0x2f8>
    800144ec:	16b160ef          	jal	8002ae56 <printf>
    800144f0:	00040797          	auipc	a5,0x40
    800144f4:	b217c783          	lbu	a5,-1247(a5) # 80054011 <excpt+0x1>
    800144f8:	00019597          	auipc	a1,0x19
    800144fc:	e9058593          	addi	a1,a1,-368 # 8002d388 <__func__.0+0x2d0>
    80014500:	c799                	beqz	a5,8001450e <software_interrupt_ssi+0x646>
    80014502:	57fd                	li	a5,-1
    80014504:	6498                	ld	a4,8(s1)
    80014506:	17fe                	slli	a5,a5,0x3f
    80014508:	0785                	addi	a5,a5,1
    8001450a:	3ef70863          	beq	a4,a5,800148fa <software_interrupt_ssi+0xa32>
    8001450e:	00019517          	auipc	a0,0x19
    80014512:	eba50513          	addi	a0,a0,-326 # 8002d3c8 <__func__.0+0x310>
    80014516:	141160ef          	jal	8002ae56 <printf>
    8001451a:	00040797          	auipc	a5,0x40
    8001451e:	af77c783          	lbu	a5,-1289(a5) # 80054011 <excpt+0x1>
    80014522:	c799                	beqz	a5,80014530 <software_interrupt_ssi+0x668>
    80014524:	57fd                	li	a5,-1
    80014526:	6498                	ld	a4,8(s1)
    80014528:	17fe                	slli	a5,a5,0x3f
    8001452a:	0785                	addi	a5,a5,1
    8001452c:	32f70c63          	beq	a4,a5,80014864 <software_interrupt_ssi+0x99c>
    80014530:	00019517          	auipc	a0,0x19
    80014534:	ea050513          	addi	a0,a0,-352 # 8002d3d0 <__func__.0+0x318>
    80014538:	11f160ef          	jal	8002ae56 <printf>
    8001453c:	02900513          	li	a0,41
    80014540:	604150ef          	jal	80029b44 <putchar>
    80014544:	4529                	li	a0,10
    80014546:	5fe150ef          	jal	80029b44 <putchar>
    8001454a:	c801                	beqz	s0,8001455a <software_interrupt_ssi+0x692>
    8001454c:	00040797          	auipc	a5,0x40
    80014550:	ac57c783          	lbu	a5,-1339(a5) # 80054011 <excpt+0x1>
    80014554:	4401                	li	s0,0
    80014556:	1e079763          	bnez	a5,80014744 <software_interrupt_ssi+0x87c>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    8001455a:	8b3ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001455e:	4511                	li	a0,4
    80014560:	9a9ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014564:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014568:	57fd                	li	a5,-1
    8001456a:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    8001456e:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014572:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014576:	4509                	li	a0,2
    80014578:	991ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001457c:	08200593          	li	a1,130
    80014580:	0001e617          	auipc	a2,0x1e
    80014584:	d2060613          	addi	a2,a2,-736 # 800322a0 <__func__.0+0x51e8>
    80014588:	00019517          	auipc	a0,0x19
    8001458c:	e2850513          	addi	a0,a0,-472 # 8002d3b0 <__func__.0+0x2f8>
    80014590:	0c7160ef          	jal	8002ae56 <printf>
    80014594:	00040797          	auipc	a5,0x40
    80014598:	a7d7c783          	lbu	a5,-1411(a5) # 80054011 <excpt+0x1>
    8001459c:	00019597          	auipc	a1,0x19
    800145a0:	dec58593          	addi	a1,a1,-532 # 8002d388 <__func__.0+0x2d0>
    800145a4:	c799                	beqz	a5,800145b2 <software_interrupt_ssi+0x6ea>
    800145a6:	57fd                	li	a5,-1
    800145a8:	6498                	ld	a4,8(s1)
    800145aa:	17fe                	slli	a5,a5,0x3f
    800145ac:	0785                	addi	a5,a5,1
    800145ae:	3cf70163          	beq	a4,a5,80014970 <software_interrupt_ssi+0xaa8>
    800145b2:	00019517          	auipc	a0,0x19
    800145b6:	e1650513          	addi	a0,a0,-490 # 8002d3c8 <__func__.0+0x310>
    800145ba:	09d160ef          	jal	8002ae56 <printf>
    800145be:	00040797          	auipc	a5,0x40
    800145c2:	a537c783          	lbu	a5,-1453(a5) # 80054011 <excpt+0x1>
    800145c6:	c799                	beqz	a5,800145d4 <software_interrupt_ssi+0x70c>
    800145c8:	57fd                	li	a5,-1
    800145ca:	6498                	ld	a4,8(s1)
    800145cc:	17fe                	slli	a5,a5,0x3f
    800145ce:	0785                	addi	a5,a5,1
    800145d0:	26f70163          	beq	a4,a5,80014832 <software_interrupt_ssi+0x96a>
    800145d4:	00019517          	auipc	a0,0x19
    800145d8:	dfc50513          	addi	a0,a0,-516 # 8002d3d0 <__func__.0+0x318>
    800145dc:	07b160ef          	jal	8002ae56 <printf>
    800145e0:	02900513          	li	a0,41
    800145e4:	560150ef          	jal	80029b44 <putchar>
    800145e8:	4529                	li	a0,10
    800145ea:	55a150ef          	jal	80029b44 <putchar>
    800145ee:	c801                	beqz	s0,800145fe <software_interrupt_ssi+0x736>
    800145f0:	00040797          	auipc	a5,0x40
    800145f4:	a217c783          	lbu	a5,-1503(a5) # 80054011 <excpt+0x1>
    800145f8:	4401                	li	s0,0
    800145fa:	12079763          	bnez	a5,80014728 <software_interrupt_ssi+0x860>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800145fe:	80fec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014602:	4511                	li	a0,4
    80014604:	905ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014608:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001460c:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014610:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014614:	4509                	li	a0,2
    80014616:	8f3ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001461a:	08200593          	li	a1,130
    8001461e:	0001e617          	auipc	a2,0x1e
    80014622:	ce260613          	addi	a2,a2,-798 # 80032300 <__func__.0+0x5248>
    80014626:	00019517          	auipc	a0,0x19
    8001462a:	d8a50513          	addi	a0,a0,-630 # 8002d3b0 <__func__.0+0x2f8>
    8001462e:	029160ef          	jal	8002ae56 <printf>
    80014632:	00040797          	auipc	a5,0x40
    80014636:	9df7c783          	lbu	a5,-1569(a5) # 80054011 <excpt+0x1>
    8001463a:	00019597          	auipc	a1,0x19
    8001463e:	d4e58593          	addi	a1,a1,-690 # 8002d388 <__func__.0+0x2d0>
    80014642:	e789                	bnez	a5,8001464c <software_interrupt_ssi+0x784>
    80014644:	00019597          	auipc	a1,0x19
    80014648:	d3458593          	addi	a1,a1,-716 # 8002d378 <__func__.0+0x2c0>
    8001464c:	00019517          	auipc	a0,0x19
    80014650:	d7c50513          	addi	a0,a0,-644 # 8002d3c8 <__func__.0+0x310>
    80014654:	003160ef          	jal	8002ae56 <printf>
    80014658:	00040797          	auipc	a5,0x40
    8001465c:	9b97c783          	lbu	a5,-1607(a5) # 80054011 <excpt+0x1>
    80014660:	28079263          	bnez	a5,800148e4 <software_interrupt_ssi+0xa1c>
    80014664:	4529                	li	a0,10
    80014666:	4de150ef          	jal	80029b44 <putchar>
    8001466a:	c419                	beqz	s0,80014678 <software_interrupt_ssi+0x7b0>
    8001466c:	00040417          	auipc	s0,0x40
    80014670:	9a544403          	lbu	s0,-1627(s0) # 80054011 <excpt+0x1>
    80014674:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014678:	f94ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001467c:	4511                	li	a0,4
    8001467e:	88bec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014682:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014686:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001468a:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001468e:	4509                	li	a0,2
    80014690:	879ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014694:	08200593          	li	a1,130
    80014698:	0001e617          	auipc	a2,0x1e
    8001469c:	cb860613          	addi	a2,a2,-840 # 80032350 <__func__.0+0x5298>
    800146a0:	00019517          	auipc	a0,0x19
    800146a4:	d1050513          	addi	a0,a0,-752 # 8002d3b0 <__func__.0+0x2f8>
    800146a8:	7ae160ef          	jal	8002ae56 <printf>
    800146ac:	00040797          	auipc	a5,0x40
    800146b0:	9657c783          	lbu	a5,-1691(a5) # 80054011 <excpt+0x1>
    800146b4:	00019597          	auipc	a1,0x19
    800146b8:	cd458593          	addi	a1,a1,-812 # 8002d388 <__func__.0+0x2d0>
    800146bc:	e789                	bnez	a5,800146c6 <software_interrupt_ssi+0x7fe>
    800146be:	00019597          	auipc	a1,0x19
    800146c2:	cba58593          	addi	a1,a1,-838 # 8002d378 <__func__.0+0x2c0>
    800146c6:	00019517          	auipc	a0,0x19
    800146ca:	d0250513          	addi	a0,a0,-766 # 8002d3c8 <__func__.0+0x310>
    800146ce:	788160ef          	jal	8002ae56 <printf>
    800146d2:	00040797          	auipc	a5,0x40
    800146d6:	93f7c783          	lbu	a5,-1729(a5) # 80054011 <excpt+0x1>
    800146da:	1e079a63          	bnez	a5,800148ce <software_interrupt_ssi+0xa06>
    800146de:	4529                	li	a0,10
    800146e0:	464150ef          	jal	80029b44 <putchar>
    800146e4:	c411                	beqz	s0,800146f0 <software_interrupt_ssi+0x828>
    800146e6:	00040797          	auipc	a5,0x40
    800146ea:	92b7c783          	lbu	a5,-1749(a5) # 80054011 <excpt+0x1>
    800146ee:	c79d                	beqz	a5,8001471c <software_interrupt_ssi+0x854>
    800146f0:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800146f2:	00019597          	auipc	a1,0x19
    800146f6:	c9658593          	addi	a1,a1,-874 # 8002d388 <__func__.0+0x2d0>
    800146fa:	00019517          	auipc	a0,0x19
    800146fe:	d3650513          	addi	a0,a0,-714 # 8002d430 <__func__.0+0x378>
    80014702:	754160ef          	jal	8002ae56 <printf>
    80014706:	4511                	li	a0,4
    80014708:	801ec0ef          	jal	80000f08 <goto_priv>
    8001470c:	918ed0ef          	jal	80001824 <reset_state>
}
    80014710:	60e2                	ld	ra,24(sp)
    80014712:	8522                	mv	a0,s0
    80014714:	6442                	ld	s0,16(sp)
    80014716:	64a2                	ld	s1,8(sp)
    80014718:	6105                	addi	sp,sp,32
    8001471a:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001471c:	4405                	li	s0,1
    TEST_END();
    8001471e:	00019597          	auipc	a1,0x19
    80014722:	c5a58593          	addi	a1,a1,-934 # 8002d378 <__func__.0+0x2c0>
    80014726:	bfd1                	j	800146fa <software_interrupt_ssi+0x832>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014728:	57fd                	li	a5,-1
    8001472a:	6498                	ld	a4,8(s1)
    8001472c:	17fe                	slli	a5,a5,0x3f
    8001472e:	0785                	addi	a5,a5,1
    80014730:	ecf717e3          	bne	a4,a5,800145fe <software_interrupt_ssi+0x736>
    80014734:	00040417          	auipc	s0,0x40
    80014738:	8e042403          	lw	s0,-1824(s0) # 80054014 <excpt+0x4>
    8001473c:	1475                	addi	s0,s0,-3
    8001473e:	00143413          	seqz	s0,s0
    80014742:	bd75                	j	800145fe <software_interrupt_ssi+0x736>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014744:	57fd                	li	a5,-1
    80014746:	6498                	ld	a4,8(s1)
    80014748:	17fe                	slli	a5,a5,0x3f
    8001474a:	0785                	addi	a5,a5,1
    8001474c:	e0f717e3          	bne	a4,a5,8001455a <software_interrupt_ssi+0x692>
    80014750:	00040417          	auipc	s0,0x40
    80014754:	8c442403          	lw	s0,-1852(s0) # 80054014 <excpt+0x4>
    80014758:	1471                	addi	s0,s0,-4
    8001475a:	00143413          	seqz	s0,s0
    8001475e:	bbf5                	j	8001455a <software_interrupt_ssi+0x692>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014760:	57fd                	li	a5,-1
    80014762:	6498                	ld	a4,8(s1)
    80014764:	17fe                	slli	a5,a5,0x3f
    80014766:	0785                	addi	a5,a5,1
    80014768:	ccf71be3          	bne	a4,a5,8001443e <software_interrupt_ssi+0x576>
    8001476c:	00040417          	auipc	s0,0x40
    80014770:	8a842403          	lw	s0,-1880(s0) # 80054014 <excpt+0x4>
    80014774:	1475                	addi	s0,s0,-3
    80014776:	00143413          	seqz	s0,s0
    8001477a:	b1d1                	j	8001443e <software_interrupt_ssi+0x576>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001477c:	57fd                	li	a5,-1
    8001477e:	6498                	ld	a4,8(s1)
    80014780:	17fe                	slli	a5,a5,0x3f
    80014782:	0785                	addi	a5,a5,1
    80014784:	c0f71be3          	bne	a4,a5,8001439a <software_interrupt_ssi+0x4d2>
    80014788:	00040417          	auipc	s0,0x40
    8001478c:	88c42403          	lw	s0,-1908(s0) # 80054014 <excpt+0x4>
    80014790:	1471                	addi	s0,s0,-4
    80014792:	00143413          	seqz	s0,s0
    80014796:	b111                	j	8001439a <software_interrupt_ssi+0x4d2>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014798:	57fd                	li	a5,-1
    8001479a:	6498                	ld	a4,8(s1)
    8001479c:	17fe                	slli	a5,a5,0x3f
    8001479e:	0785                	addi	a5,a5,1
    800147a0:	a6f710e3          	bne	a4,a5,80014200 <software_interrupt_ssi+0x338>
    800147a4:	00040417          	auipc	s0,0x40
    800147a8:	87042403          	lw	s0,-1936(s0) # 80054014 <excpt+0x4>
    800147ac:	1475                	addi	s0,s0,-3
    800147ae:	00143413          	seqz	s0,s0
    800147b2:	b4b9                	j	80014200 <software_interrupt_ssi+0x338>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147b4:	57fd                	li	a5,-1
    800147b6:	6498                	ld	a4,8(s1)
    800147b8:	17fe                	slli	a5,a5,0x3f
    800147ba:	0785                	addi	a5,a5,1
    800147bc:	9af710e3          	bne	a4,a5,8001415c <software_interrupt_ssi+0x294>
    800147c0:	00040417          	auipc	s0,0x40
    800147c4:	85442403          	lw	s0,-1964(s0) # 80054014 <excpt+0x4>
    800147c8:	1471                	addi	s0,s0,-4
    800147ca:	00143413          	seqz	s0,s0
    800147ce:	b279                	j	8001415c <software_interrupt_ssi+0x294>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800147d0:	57fd                	li	a5,-1
    800147d2:	6498                	ld	a4,8(s1)
    800147d4:	17fe                	slli	a5,a5,0x3f
    800147d6:	0785                	addi	a5,a5,1
    800147d8:	86f714e3          	bne	a4,a5,80014040 <software_interrupt_ssi+0x178>
    800147dc:	00040417          	auipc	s0,0x40
    800147e0:	83842403          	lw	s0,-1992(s0) # 80054014 <excpt+0x4>
    800147e4:	1475                	addi	s0,s0,-3
    800147e6:	00143413          	seqz	s0,s0
    800147ea:	857ff06f          	j	80014040 <software_interrupt_ssi+0x178>
    800147ee:	00040717          	auipc	a4,0x40
    800147f2:	82672703          	lw	a4,-2010(a4) # 80054014 <excpt+0x4>
    800147f6:	478d                	li	a5,3
    800147f8:	80f71fe3          	bne	a4,a5,80014016 <software_interrupt_ssi+0x14e>
    800147fc:	82fff06f          	j	8001402a <software_interrupt_ssi+0x162>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014800:	00040717          	auipc	a4,0x40
    80014804:	81472703          	lw	a4,-2028(a4) # 80054014 <excpt+0x4>
    80014808:	4791                	li	a5,4
    8001480a:	f6f71063          	bne	a4,a5,80013f6a <software_interrupt_ssi+0xa2>
    8001480e:	f70ff06f          	j	80013f7e <software_interrupt_ssi+0xb6>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014812:	00040717          	auipc	a4,0x40
    80014816:	80272703          	lw	a4,-2046(a4) # 80054014 <excpt+0x4>
    8001481a:	4791                	li	a5,4
    8001481c:	b4f71ae3          	bne	a4,a5,80014370 <software_interrupt_ssi+0x4a8>
    80014820:	b695                	j	80014384 <software_interrupt_ssi+0x4bc>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014822:	0003f717          	auipc	a4,0x3f
    80014826:	7f272703          	lw	a4,2034(a4) # 80054014 <excpt+0x4>
    8001482a:	478d                	li	a5,3
    8001482c:	bef714e3          	bne	a4,a5,80014414 <software_interrupt_ssi+0x54c>
    80014830:	bee5                	j	80014428 <software_interrupt_ssi+0x560>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014832:	0003f717          	auipc	a4,0x3f
    80014836:	7e272703          	lw	a4,2018(a4) # 80054014 <excpt+0x4>
    8001483a:	478d                	li	a5,3
    8001483c:	d8f71ce3          	bne	a4,a5,800145d4 <software_interrupt_ssi+0x70c>
    80014840:	b365                	j	800145e8 <software_interrupt_ssi+0x720>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014842:	0003f717          	auipc	a4,0x3f
    80014846:	7d272703          	lw	a4,2002(a4) # 80054014 <excpt+0x4>
    8001484a:	4791                	li	a5,4
    8001484c:	8ef713e3          	bne	a4,a5,80014132 <software_interrupt_ssi+0x26a>
    80014850:	8f7ff06f          	j	80014146 <software_interrupt_ssi+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014854:	0003f717          	auipc	a4,0x3f
    80014858:	7c072703          	lw	a4,1984(a4) # 80054014 <excpt+0x4>
    8001485c:	478d                	li	a5,3
    8001485e:	96f71ce3          	bne	a4,a5,800141d6 <software_interrupt_ssi+0x30e>
    80014862:	b261                	j	800141ea <software_interrupt_ssi+0x322>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014864:	0003f717          	auipc	a4,0x3f
    80014868:	7b072703          	lw	a4,1968(a4) # 80054014 <excpt+0x4>
    8001486c:	4791                	li	a5,4
    8001486e:	ccf711e3          	bne	a4,a5,80014530 <software_interrupt_ssi+0x668>
    80014872:	b9c9                	j	80014544 <software_interrupt_ssi+0x67c>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014874:	00019517          	auipc	a0,0x19
    80014878:	b5c50513          	addi	a0,a0,-1188 # 8002d3d0 <__func__.0+0x318>
    8001487c:	5da160ef          	jal	8002ae56 <printf>
    80014880:	02900513          	li	a0,41
    80014884:	2c0150ef          	jal	80029b44 <putchar>
    80014888:	b931                	j	800144a4 <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001488a:	00019517          	auipc	a0,0x19
    8001488e:	b4650513          	addi	a0,a0,-1210 # 8002d3d0 <__func__.0+0x318>
    80014892:	5c4160ef          	jal	8002ae56 <printf>
    80014896:	02900513          	li	a0,41
    8001489a:	2aa150ef          	jal	80029b44 <putchar>
    8001489e:	809ff06f          	j	800140a6 <software_interrupt_ssi+0x1de>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800148a2:	00019517          	auipc	a0,0x19
    800148a6:	b2e50513          	addi	a0,a0,-1234 # 8002d3d0 <__func__.0+0x318>
    800148aa:	5ac160ef          	jal	8002ae56 <printf>
    800148ae:	02900513          	li	a0,41
    800148b2:	292150ef          	jal	80029b44 <putchar>
    800148b6:	b42d                	j	800142e0 <software_interrupt_ssi+0x418>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800148b8:	00019517          	auipc	a0,0x19
    800148bc:	b1850513          	addi	a0,a0,-1256 # 8002d3d0 <__func__.0+0x318>
    800148c0:	596160ef          	jal	8002ae56 <printf>
    800148c4:	02900513          	li	a0,41
    800148c8:	27c150ef          	jal	80029b44 <putchar>
    800148cc:	ba69                	j	80014266 <software_interrupt_ssi+0x39e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800148ce:	00019517          	auipc	a0,0x19
    800148d2:	b0250513          	addi	a0,a0,-1278 # 8002d3d0 <__func__.0+0x318>
    800148d6:	580160ef          	jal	8002ae56 <printf>
    800148da:	02900513          	li	a0,41
    800148de:	266150ef          	jal	80029b44 <putchar>
    800148e2:	bbf5                	j	800146de <software_interrupt_ssi+0x816>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800148e4:	00019517          	auipc	a0,0x19
    800148e8:	aec50513          	addi	a0,a0,-1300 # 8002d3d0 <__func__.0+0x318>
    800148ec:	56a160ef          	jal	8002ae56 <printf>
    800148f0:	02900513          	li	a0,41
    800148f4:	250150ef          	jal	80029b44 <putchar>
    800148f8:	b3b5                	j	80014664 <software_interrupt_ssi+0x79c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800148fa:	0003f717          	auipc	a4,0x3f
    800148fe:	71a72703          	lw	a4,1818(a4) # 80054014 <excpt+0x4>
    80014902:	4791                	li	a5,4
    80014904:	00019597          	auipc	a1,0x19
    80014908:	a7458593          	addi	a1,a1,-1420 # 8002d378 <__func__.0+0x2c0>
    8001490c:	c0f701e3          	beq	a4,a5,8001450e <software_interrupt_ssi+0x646>
    80014910:	00019597          	auipc	a1,0x19
    80014914:	a7858593          	addi	a1,a1,-1416 # 8002d388 <__func__.0+0x2d0>
    80014918:	bedd                	j	8001450e <software_interrupt_ssi+0x646>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001491a:	0003f417          	auipc	s0,0x3f
    8001491e:	6fa42403          	lw	s0,1786(s0) # 80054014 <excpt+0x4>
    80014922:	1471                	addi	s0,s0,-4
    80014924:	00143413          	seqz	s0,s0
    80014928:	e74ff06f          	j	80013f9c <software_interrupt_ssi+0xd4>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001492c:	0003f717          	auipc	a4,0x3f
    80014930:	6e872703          	lw	a4,1768(a4) # 80054014 <excpt+0x4>
    80014934:	478d                	li	a5,3
    80014936:	00019597          	auipc	a1,0x19
    8001493a:	a4258593          	addi	a1,a1,-1470 # 8002d378 <__func__.0+0x2c0>
    8001493e:	eaf70b63          	beq	a4,a5,80013ff4 <software_interrupt_ssi+0x12c>
    80014942:	00019597          	auipc	a1,0x19
    80014946:	a4658593          	addi	a1,a1,-1466 # 8002d388 <__func__.0+0x2d0>
    8001494a:	eaaff06f          	j	80013ff4 <software_interrupt_ssi+0x12c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001494e:	0003f717          	auipc	a4,0x3f
    80014952:	6c672703          	lw	a4,1734(a4) # 80054014 <excpt+0x4>
    80014956:	4791                	li	a5,4
    80014958:	00019597          	auipc	a1,0x19
    8001495c:	a2058593          	addi	a1,a1,-1504 # 8002d378 <__func__.0+0x2c0>
    80014960:	faf70863          	beq	a4,a5,80014110 <software_interrupt_ssi+0x248>
    80014964:	00019597          	auipc	a1,0x19
    80014968:	a2458593          	addi	a1,a1,-1500 # 8002d388 <__func__.0+0x2d0>
    8001496c:	fa4ff06f          	j	80014110 <software_interrupt_ssi+0x248>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014970:	0003f717          	auipc	a4,0x3f
    80014974:	6a472703          	lw	a4,1700(a4) # 80054014 <excpt+0x4>
    80014978:	478d                	li	a5,3
    8001497a:	00019597          	auipc	a1,0x19
    8001497e:	9fe58593          	addi	a1,a1,-1538 # 8002d378 <__func__.0+0x2c0>
    80014982:	c2f708e3          	beq	a4,a5,800145b2 <software_interrupt_ssi+0x6ea>
    80014986:	00019597          	auipc	a1,0x19
    8001498a:	a0258593          	addi	a1,a1,-1534 # 8002d388 <__func__.0+0x2d0>
    8001498e:	b115                	j	800145b2 <software_interrupt_ssi+0x6ea>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014990:	0003f717          	auipc	a4,0x3f
    80014994:	68472703          	lw	a4,1668(a4) # 80054014 <excpt+0x4>
    80014998:	478d                	li	a5,3
    8001499a:	00019597          	auipc	a1,0x19
    8001499e:	9de58593          	addi	a1,a1,-1570 # 8002d378 <__func__.0+0x2c0>
    800149a2:	a4f708e3          	beq	a4,a5,800143f2 <software_interrupt_ssi+0x52a>
    800149a6:	00019597          	auipc	a1,0x19
    800149aa:	9e258593          	addi	a1,a1,-1566 # 8002d388 <__func__.0+0x2d0>
    800149ae:	b491                	j	800143f2 <software_interrupt_ssi+0x52a>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800149b0:	0003f717          	auipc	a4,0x3f
    800149b4:	66472703          	lw	a4,1636(a4) # 80054014 <excpt+0x4>
    800149b8:	4791                	li	a5,4
    800149ba:	00019597          	auipc	a1,0x19
    800149be:	9be58593          	addi	a1,a1,-1602 # 8002d378 <__func__.0+0x2c0>
    800149c2:	d8f70363          	beq	a4,a5,80013f48 <software_interrupt_ssi+0x80>
    800149c6:	00019597          	auipc	a1,0x19
    800149ca:	9c258593          	addi	a1,a1,-1598 # 8002d388 <__func__.0+0x2d0>
    800149ce:	d7aff06f          	j	80013f48 <software_interrupt_ssi+0x80>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800149d2:	0003f717          	auipc	a4,0x3f
    800149d6:	64272703          	lw	a4,1602(a4) # 80054014 <excpt+0x4>
    800149da:	478d                	li	a5,3
    800149dc:	00019597          	auipc	a1,0x19
    800149e0:	99c58593          	addi	a1,a1,-1636 # 8002d378 <__func__.0+0x2c0>
    800149e4:	fcf70863          	beq	a4,a5,800141b4 <software_interrupt_ssi+0x2ec>
    800149e8:	00019597          	auipc	a1,0x19
    800149ec:	9a058593          	addi	a1,a1,-1632 # 8002d388 <__func__.0+0x2d0>
    800149f0:	fc4ff06f          	j	800141b4 <software_interrupt_ssi+0x2ec>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800149f4:	0003f717          	auipc	a4,0x3f
    800149f8:	62072703          	lw	a4,1568(a4) # 80054014 <excpt+0x4>
    800149fc:	4791                	li	a5,4
    800149fe:	00019597          	auipc	a1,0x19
    80014a02:	97a58593          	addi	a1,a1,-1670 # 8002d378 <__func__.0+0x2c0>
    80014a06:	94f704e3          	beq	a4,a5,8001434e <software_interrupt_ssi+0x486>
    80014a0a:	00019597          	auipc	a1,0x19
    80014a0e:	97e58593          	addi	a1,a1,-1666 # 8002d388 <__func__.0+0x2d0>
    80014a12:	ba35                	j	8001434e <software_interrupt_ssi+0x486>

0000000080014a14 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80014a14:	1141                	addi	sp,sp,-16

    TEST_START();
    80014a16:	00017597          	auipc	a1,0x17
    80014a1a:	24258593          	addi	a1,a1,578 # 8002bc58 <__func__.0>
    80014a1e:	00019517          	auipc	a0,0x19
    80014a22:	97a50513          	addi	a0,a0,-1670 # 8002d398 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    80014a26:	e406                	sd	ra,8(sp)
    TEST_START();
    80014a28:	42e160ef          	jal	8002ae56 <printf>
    80014a2c:	4529                	li	a0,10
    80014a2e:	116150ef          	jal	80029b44 <putchar>

    TEST_SETUP_EXCEPT();
    80014a32:	bdaec0ef          	jal	80000e0c <test_setup_except_function>

    TEST_END();
    80014a36:	00019597          	auipc	a1,0x19
    80014a3a:	94258593          	addi	a1,a1,-1726 # 8002d378 <__func__.0+0x2c0>
    80014a3e:	00019517          	auipc	a0,0x19
    80014a42:	9f250513          	addi	a0,a0,-1550 # 8002d430 <__func__.0+0x378>
    80014a46:	410160ef          	jal	8002ae56 <printf>
    80014a4a:	4511                	li	a0,4
    80014a4c:	cbcec0ef          	jal	80000f08 <goto_priv>
    80014a50:	dd5ec0ef          	jal	80001824 <reset_state>


    80014a54:	60a2                	ld	ra,8(sp)
    80014a56:	4505                	li	a0,1
    80014a58:	0141                	addi	sp,sp,16
    80014a5a:	8082                	ret

0000000080014a5c <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80014a5c:	1101                	addi	sp,sp,-32

    TEST_START();
    80014a5e:	00017597          	auipc	a1,0x17
    80014a62:	21258593          	addi	a1,a1,530 # 8002bc70 <__func__.26>
    80014a66:	00019517          	auipc	a0,0x19
    80014a6a:	93250513          	addi	a0,a0,-1742 # 8002d398 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    80014a6e:	ec06                	sd	ra,24(sp)
    80014a70:	e822                	sd	s0,16(sp)
    80014a72:	e426                	sd	s1,8(sp)
    TEST_START();
    80014a74:	3e2160ef          	jal	8002ae56 <printf>
    80014a78:	4529                	li	a0,10
    80014a7a:	0ca150ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80014a7e:	450d                	li	a0,3
    80014a80:	c88ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014a84:	b5deb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014a88:	f3deb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014a8c:	cf1eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80014a90:	450d                	li	a0,3
    80014a92:	c76ec0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a96:	4509                	li	a0,2
    80014a98:	b90ec0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014a9c:	b70ec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014aa0:	400197b7          	lui	a5,0x40019
    80014aa4:	078a                	slli	a5,a5,0x2
    80014aa6:	0003f417          	auipc	s0,0x3f
    80014aaa:	56a40413          	addi	s0,s0,1386 # 80054010 <excpt>
    80014aae:	00000297          	auipc	t0,0x0
    80014ab2:	00c28293          	addi	t0,t0,12 # 80014aba <instruction_page_fault_1+0x5e>
    80014ab6:	02543c23          	sd	t0,56(s0)
    80014aba:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80014abc:	08200593          	li	a1,130
    80014ac0:	0001e617          	auipc	a2,0x1e
    80014ac4:	8e060613          	addi	a2,a2,-1824 # 800323a0 <__func__.0+0x52e8>
    80014ac8:	00019517          	auipc	a0,0x19
    80014acc:	8e850513          	addi	a0,a0,-1816 # 8002d3b0 <__func__.0+0x2f8>
    80014ad0:	386160ef          	jal	8002ae56 <printf>
    80014ad4:	0003f797          	auipc	a5,0x3f
    80014ad8:	53d7c783          	lbu	a5,1341(a5) # 80054011 <excpt+0x1>
    80014adc:	00019597          	auipc	a1,0x19
    80014ae0:	8ac58593          	addi	a1,a1,-1876 # 8002d388 <__func__.0+0x2d0>
    80014ae4:	cf89                	beqz	a5,80014afe <instruction_page_fault_1+0xa2>
    80014ae6:	6418                	ld	a4,8(s0)
    80014ae8:	47b1                	li	a5,12
    80014aea:	00019597          	auipc	a1,0x19
    80014aee:	88e58593          	addi	a1,a1,-1906 # 8002d378 <__func__.0+0x2c0>
    80014af2:	00f70663          	beq	a4,a5,80014afe <instruction_page_fault_1+0xa2>
    80014af6:	00019597          	auipc	a1,0x19
    80014afa:	89258593          	addi	a1,a1,-1902 # 8002d388 <__func__.0+0x2d0>
    80014afe:	00019517          	auipc	a0,0x19
    80014b02:	8ca50513          	addi	a0,a0,-1846 # 8002d3c8 <__func__.0+0x310>
    80014b06:	350160ef          	jal	8002ae56 <printf>
    80014b0a:	0003f797          	auipc	a5,0x3f
    80014b0e:	5077c783          	lbu	a5,1287(a5) # 80054011 <excpt+0x1>
    80014b12:	c789                	beqz	a5,80014b1c <instruction_page_fault_1+0xc0>
    80014b14:	6418                	ld	a4,8(s0)
    80014b16:	47b1                	li	a5,12
    80014b18:	00f70c63          	beq	a4,a5,80014b30 <instruction_page_fault_1+0xd4>
    80014b1c:	00019517          	auipc	a0,0x19
    80014b20:	8b450513          	addi	a0,a0,-1868 # 8002d3d0 <__func__.0+0x318>
    80014b24:	332160ef          	jal	8002ae56 <printf>
    80014b28:	02900513          	li	a0,41
    80014b2c:	018150ef          	jal	80029b44 <putchar>
    80014b30:	4529                	li	a0,10
    80014b32:	012150ef          	jal	80029b44 <putchar>
    80014b36:	0003f797          	auipc	a5,0x3f
    80014b3a:	4db7c783          	lbu	a5,1243(a5) # 80054011 <excpt+0x1>
    80014b3e:	4481                	li	s1,0
    80014b40:	c789                	beqz	a5,80014b4a <instruction_page_fault_1+0xee>
    80014b42:	6404                	ld	s1,8(s0)
    80014b44:	14d1                	addi	s1,s1,-12
    80014b46:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014b4a:	ac2ec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014b4e:	001007b7          	lui	a5,0x100
    80014b52:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014b56:	07b2                	slli	a5,a5,0xc
    80014b58:	00000297          	auipc	t0,0x0
    80014b5c:	00c28293          	addi	t0,t0,12 # 80014b64 <instruction_page_fault_1+0x108>
    80014b60:	02543c23          	sd	t0,56(s0)
    80014b64:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b66:	08200593          	li	a1,130
    80014b6a:	0001e617          	auipc	a2,0x1e
    80014b6e:	86e60613          	addi	a2,a2,-1938 # 800323d8 <__func__.0+0x5320>
    80014b72:	00019517          	auipc	a0,0x19
    80014b76:	83e50513          	addi	a0,a0,-1986 # 8002d3b0 <__func__.0+0x2f8>
    80014b7a:	2dc160ef          	jal	8002ae56 <printf>
    80014b7e:	0003f797          	auipc	a5,0x3f
    80014b82:	4937c783          	lbu	a5,1171(a5) # 80054011 <excpt+0x1>
    80014b86:	00019597          	auipc	a1,0x19
    80014b8a:	80258593          	addi	a1,a1,-2046 # 8002d388 <__func__.0+0x2d0>
    80014b8e:	cf89                	beqz	a5,80014ba8 <instruction_page_fault_1+0x14c>
    80014b90:	6418                	ld	a4,8(s0)
    80014b92:	47b1                	li	a5,12
    80014b94:	00018597          	auipc	a1,0x18
    80014b98:	7e458593          	addi	a1,a1,2020 # 8002d378 <__func__.0+0x2c0>
    80014b9c:	00f70663          	beq	a4,a5,80014ba8 <instruction_page_fault_1+0x14c>
    80014ba0:	00018597          	auipc	a1,0x18
    80014ba4:	7e858593          	addi	a1,a1,2024 # 8002d388 <__func__.0+0x2d0>
    80014ba8:	00019517          	auipc	a0,0x19
    80014bac:	82050513          	addi	a0,a0,-2016 # 8002d3c8 <__func__.0+0x310>
    80014bb0:	2a6160ef          	jal	8002ae56 <printf>
    80014bb4:	0003f797          	auipc	a5,0x3f
    80014bb8:	45d7c783          	lbu	a5,1117(a5) # 80054011 <excpt+0x1>
    80014bbc:	c789                	beqz	a5,80014bc6 <instruction_page_fault_1+0x16a>
    80014bbe:	6418                	ld	a4,8(s0)
    80014bc0:	47b1                	li	a5,12
    80014bc2:	00f70c63          	beq	a4,a5,80014bda <instruction_page_fault_1+0x17e>
    80014bc6:	00019517          	auipc	a0,0x19
    80014bca:	80a50513          	addi	a0,a0,-2038 # 8002d3d0 <__func__.0+0x318>
    80014bce:	288160ef          	jal	8002ae56 <printf>
    80014bd2:	02900513          	li	a0,41
    80014bd6:	76f140ef          	jal	80029b44 <putchar>
    80014bda:	4529                	li	a0,10
    80014bdc:	769140ef          	jal	80029b44 <putchar>
    80014be0:	c095                	beqz	s1,80014c04 <instruction_page_fault_1+0x1a8>
    80014be2:	0003f497          	auipc	s1,0x3f
    80014be6:	42f4c483          	lbu	s1,1071(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014bea:	00018597          	auipc	a1,0x18
    80014bee:	79e58593          	addi	a1,a1,1950 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014bf2:	cc91                	beqz	s1,80014c0e <instruction_page_fault_1+0x1b2>
    80014bf4:	6418                	ld	a4,8(s0)
    80014bf6:	47b1                	li	a5,12
    TEST_END();
    80014bf8:	00018597          	auipc	a1,0x18
    80014bfc:	78058593          	addi	a1,a1,1920 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014c00:	00f70763          	beq	a4,a5,80014c0e <instruction_page_fault_1+0x1b2>
    80014c04:	4481                	li	s1,0
    TEST_END();
    80014c06:	00018597          	auipc	a1,0x18
    80014c0a:	78258593          	addi	a1,a1,1922 # 8002d388 <__func__.0+0x2d0>
    80014c0e:	00019517          	auipc	a0,0x19
    80014c12:	82250513          	addi	a0,a0,-2014 # 8002d430 <__func__.0+0x378>
    80014c16:	240160ef          	jal	8002ae56 <printf>
    80014c1a:	4511                	li	a0,4
    80014c1c:	aecec0ef          	jal	80000f08 <goto_priv>
    80014c20:	c05ec0ef          	jal	80001824 <reset_state>
}
    80014c24:	60e2                	ld	ra,24(sp)
    80014c26:	6442                	ld	s0,16(sp)
    80014c28:	8526                	mv	a0,s1
    80014c2a:	64a2                	ld	s1,8(sp)
    80014c2c:	6105                	addi	sp,sp,32
    80014c2e:	8082                	ret

0000000080014c30 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80014c30:	1101                	addi	sp,sp,-32

    TEST_START();
    80014c32:	00017597          	auipc	a1,0x17
    80014c36:	05e58593          	addi	a1,a1,94 # 8002bc90 <__func__.24>
    80014c3a:	00018517          	auipc	a0,0x18
    80014c3e:	75e50513          	addi	a0,a0,1886 # 8002d398 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80014c42:	ec06                	sd	ra,24(sp)
    80014c44:	e822                	sd	s0,16(sp)
    80014c46:	e426                	sd	s1,8(sp)
    TEST_START();
    80014c48:	20e160ef          	jal	8002ae56 <printf>
    80014c4c:	4529                	li	a0,10
    80014c4e:	6f7140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80014c52:	450d                	li	a0,3
    80014c54:	ab4ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014c58:	989eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014c5c:	d69eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014c60:	b1deb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_HS);
    80014c64:	450d                	li	a0,3
    80014c66:	aa2ec0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014c6a:	9a2ec0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014c6e:	000807b7          	lui	a5,0x80
    80014c72:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014c74:	07b6                	slli	a5,a5,0xd
    80014c76:	0003f417          	auipc	s0,0x3f
    80014c7a:	39a40413          	addi	s0,s0,922 # 80054010 <excpt>
    80014c7e:	00000297          	auipc	t0,0x0
    80014c82:	00c28293          	addi	t0,t0,12 # 80014c8a <instruction_page_fault_2+0x5a>
    80014c86:	02543c23          	sd	t0,56(s0)
    80014c8a:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c8c:	08200593          	li	a1,130
    80014c90:	0001d617          	auipc	a2,0x1d
    80014c94:	78060613          	addi	a2,a2,1920 # 80032410 <__func__.0+0x5358>
    80014c98:	00018517          	auipc	a0,0x18
    80014c9c:	71850513          	addi	a0,a0,1816 # 8002d3b0 <__func__.0+0x2f8>
    80014ca0:	1b6160ef          	jal	8002ae56 <printf>
    80014ca4:	0003f797          	auipc	a5,0x3f
    80014ca8:	36d7c783          	lbu	a5,877(a5) # 80054011 <excpt+0x1>
    80014cac:	00018597          	auipc	a1,0x18
    80014cb0:	6dc58593          	addi	a1,a1,1756 # 8002d388 <__func__.0+0x2d0>
    80014cb4:	cf89                	beqz	a5,80014cce <instruction_page_fault_2+0x9e>
    80014cb6:	6418                	ld	a4,8(s0)
    80014cb8:	47b1                	li	a5,12
    80014cba:	00018597          	auipc	a1,0x18
    80014cbe:	6be58593          	addi	a1,a1,1726 # 8002d378 <__func__.0+0x2c0>
    80014cc2:	00f70663          	beq	a4,a5,80014cce <instruction_page_fault_2+0x9e>
    80014cc6:	00018597          	auipc	a1,0x18
    80014cca:	6c258593          	addi	a1,a1,1730 # 8002d388 <__func__.0+0x2d0>
    80014cce:	00018517          	auipc	a0,0x18
    80014cd2:	6fa50513          	addi	a0,a0,1786 # 8002d3c8 <__func__.0+0x310>
    80014cd6:	180160ef          	jal	8002ae56 <printf>
    80014cda:	0003f797          	auipc	a5,0x3f
    80014cde:	3377c783          	lbu	a5,823(a5) # 80054011 <excpt+0x1>
    80014ce2:	c789                	beqz	a5,80014cec <instruction_page_fault_2+0xbc>
    80014ce4:	6418                	ld	a4,8(s0)
    80014ce6:	47b1                	li	a5,12
    80014ce8:	00f70c63          	beq	a4,a5,80014d00 <instruction_page_fault_2+0xd0>
    80014cec:	00018517          	auipc	a0,0x18
    80014cf0:	6e450513          	addi	a0,a0,1764 # 8002d3d0 <__func__.0+0x318>
    80014cf4:	162160ef          	jal	8002ae56 <printf>
    80014cf8:	02900513          	li	a0,41
    80014cfc:	649140ef          	jal	80029b44 <putchar>
    80014d00:	4529                	li	a0,10
    80014d02:	643140ef          	jal	80029b44 <putchar>
    80014d06:	0003f497          	auipc	s1,0x3f
    80014d0a:	30b4c483          	lbu	s1,779(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014d0e:	00018597          	auipc	a1,0x18
    80014d12:	67a58593          	addi	a1,a1,1658 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014d16:	cc91                	beqz	s1,80014d32 <instruction_page_fault_2+0x102>
    80014d18:	6418                	ld	a4,8(s0)
    80014d1a:	47b1                	li	a5,12
    TEST_END();
    80014d1c:	00018597          	auipc	a1,0x18
    80014d20:	65c58593          	addi	a1,a1,1628 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014d24:	00f70763          	beq	a4,a5,80014d32 <instruction_page_fault_2+0x102>
    80014d28:	4481                	li	s1,0
    TEST_END();
    80014d2a:	00018597          	auipc	a1,0x18
    80014d2e:	65e58593          	addi	a1,a1,1630 # 8002d388 <__func__.0+0x2d0>
    80014d32:	00018517          	auipc	a0,0x18
    80014d36:	6fe50513          	addi	a0,a0,1790 # 8002d430 <__func__.0+0x378>
    80014d3a:	11c160ef          	jal	8002ae56 <printf>
    80014d3e:	4511                	li	a0,4
    80014d40:	9c8ec0ef          	jal	80000f08 <goto_priv>
    80014d44:	ae1ec0ef          	jal	80001824 <reset_state>
}
    80014d48:	60e2                	ld	ra,24(sp)
    80014d4a:	6442                	ld	s0,16(sp)
    80014d4c:	8526                	mv	a0,s1
    80014d4e:	64a2                	ld	s1,8(sp)
    80014d50:	6105                	addi	sp,sp,32
    80014d52:	8082                	ret

0000000080014d54 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80014d54:	1101                	addi	sp,sp,-32

    TEST_START();
    80014d56:	00017597          	auipc	a1,0x17
    80014d5a:	f5a58593          	addi	a1,a1,-166 # 8002bcb0 <__func__.23>
    80014d5e:	00018517          	auipc	a0,0x18
    80014d62:	63a50513          	addi	a0,a0,1594 # 8002d398 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80014d66:	ec06                	sd	ra,24(sp)
    80014d68:	e822                	sd	s0,16(sp)
    80014d6a:	e426                	sd	s1,8(sp)
    TEST_START();
    80014d6c:	0ea160ef          	jal	8002ae56 <printf>
    80014d70:	4529                	li	a0,10
    80014d72:	5d3140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80014d76:	450d                	li	a0,3
    80014d78:	990ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014d7c:	865eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014d80:	c45eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014d84:	9f9eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80014d88:	4509                	li	a0,2
    80014d8a:	97eec0ef          	jal	80000f08 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014d8e:	87eec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014d92:	400197b7          	lui	a5,0x40019
    80014d96:	078a                	slli	a5,a5,0x2
    80014d98:	0003f417          	auipc	s0,0x3f
    80014d9c:	27840413          	addi	s0,s0,632 # 80054010 <excpt>
    80014da0:	00000297          	auipc	t0,0x0
    80014da4:	00c28293          	addi	t0,t0,12 # 80014dac <instruction_page_fault_3+0x58>
    80014da8:	02543c23          	sd	t0,56(s0)
    80014dac:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80014dae:	08200593          	li	a1,130
    80014db2:	0001d617          	auipc	a2,0x1d
    80014db6:	69660613          	addi	a2,a2,1686 # 80032448 <__func__.0+0x5390>
    80014dba:	00018517          	auipc	a0,0x18
    80014dbe:	5f650513          	addi	a0,a0,1526 # 8002d3b0 <__func__.0+0x2f8>
    80014dc2:	094160ef          	jal	8002ae56 <printf>
    80014dc6:	0003f797          	auipc	a5,0x3f
    80014dca:	24b7c783          	lbu	a5,587(a5) # 80054011 <excpt+0x1>
    80014dce:	00018597          	auipc	a1,0x18
    80014dd2:	5ba58593          	addi	a1,a1,1466 # 8002d388 <__func__.0+0x2d0>
    80014dd6:	cf89                	beqz	a5,80014df0 <instruction_page_fault_3+0x9c>
    80014dd8:	6418                	ld	a4,8(s0)
    80014dda:	47b1                	li	a5,12
    80014ddc:	00018597          	auipc	a1,0x18
    80014de0:	59c58593          	addi	a1,a1,1436 # 8002d378 <__func__.0+0x2c0>
    80014de4:	00f70663          	beq	a4,a5,80014df0 <instruction_page_fault_3+0x9c>
    80014de8:	00018597          	auipc	a1,0x18
    80014dec:	5a058593          	addi	a1,a1,1440 # 8002d388 <__func__.0+0x2d0>
    80014df0:	00018517          	auipc	a0,0x18
    80014df4:	5d850513          	addi	a0,a0,1496 # 8002d3c8 <__func__.0+0x310>
    80014df8:	05e160ef          	jal	8002ae56 <printf>
    80014dfc:	0003f797          	auipc	a5,0x3f
    80014e00:	2157c783          	lbu	a5,533(a5) # 80054011 <excpt+0x1>
    80014e04:	c789                	beqz	a5,80014e0e <instruction_page_fault_3+0xba>
    80014e06:	6418                	ld	a4,8(s0)
    80014e08:	47b1                	li	a5,12
    80014e0a:	00f70c63          	beq	a4,a5,80014e22 <instruction_page_fault_3+0xce>
    80014e0e:	00018517          	auipc	a0,0x18
    80014e12:	5c250513          	addi	a0,a0,1474 # 8002d3d0 <__func__.0+0x318>
    80014e16:	040160ef          	jal	8002ae56 <printf>
    80014e1a:	02900513          	li	a0,41
    80014e1e:	527140ef          	jal	80029b44 <putchar>
    80014e22:	4529                	li	a0,10
    80014e24:	521140ef          	jal	80029b44 <putchar>
    80014e28:	0003f797          	auipc	a5,0x3f
    80014e2c:	1e97c783          	lbu	a5,489(a5) # 80054011 <excpt+0x1>
    80014e30:	4481                	li	s1,0
    80014e32:	c789                	beqz	a5,80014e3c <instruction_page_fault_3+0xe8>
    80014e34:	6404                	ld	s1,8(s0)
    80014e36:	14d1                	addi	s1,s1,-12
    80014e38:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014e3c:	fd1eb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014e40:	001007b7          	lui	a5,0x100
    80014e44:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014e48:	07b2                	slli	a5,a5,0xc
    80014e4a:	00000297          	auipc	t0,0x0
    80014e4e:	00c28293          	addi	t0,t0,12 # 80014e56 <instruction_page_fault_3+0x102>
    80014e52:	02543c23          	sd	t0,56(s0)
    80014e56:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e58:	08200593          	li	a1,130
    80014e5c:	0001d617          	auipc	a2,0x1d
    80014e60:	62460613          	addi	a2,a2,1572 # 80032480 <__func__.0+0x53c8>
    80014e64:	00018517          	auipc	a0,0x18
    80014e68:	54c50513          	addi	a0,a0,1356 # 8002d3b0 <__func__.0+0x2f8>
    80014e6c:	7eb150ef          	jal	8002ae56 <printf>
    80014e70:	0003f797          	auipc	a5,0x3f
    80014e74:	1a17c783          	lbu	a5,417(a5) # 80054011 <excpt+0x1>
    80014e78:	00018597          	auipc	a1,0x18
    80014e7c:	51058593          	addi	a1,a1,1296 # 8002d388 <__func__.0+0x2d0>
    80014e80:	cf89                	beqz	a5,80014e9a <instruction_page_fault_3+0x146>
    80014e82:	6418                	ld	a4,8(s0)
    80014e84:	47b1                	li	a5,12
    80014e86:	00018597          	auipc	a1,0x18
    80014e8a:	4f258593          	addi	a1,a1,1266 # 8002d378 <__func__.0+0x2c0>
    80014e8e:	00f70663          	beq	a4,a5,80014e9a <instruction_page_fault_3+0x146>
    80014e92:	00018597          	auipc	a1,0x18
    80014e96:	4f658593          	addi	a1,a1,1270 # 8002d388 <__func__.0+0x2d0>
    80014e9a:	00018517          	auipc	a0,0x18
    80014e9e:	52e50513          	addi	a0,a0,1326 # 8002d3c8 <__func__.0+0x310>
    80014ea2:	7b5150ef          	jal	8002ae56 <printf>
    80014ea6:	0003f797          	auipc	a5,0x3f
    80014eaa:	16b7c783          	lbu	a5,363(a5) # 80054011 <excpt+0x1>
    80014eae:	c789                	beqz	a5,80014eb8 <instruction_page_fault_3+0x164>
    80014eb0:	6418                	ld	a4,8(s0)
    80014eb2:	47b1                	li	a5,12
    80014eb4:	00f70c63          	beq	a4,a5,80014ecc <instruction_page_fault_3+0x178>
    80014eb8:	00018517          	auipc	a0,0x18
    80014ebc:	51850513          	addi	a0,a0,1304 # 8002d3d0 <__func__.0+0x318>
    80014ec0:	797150ef          	jal	8002ae56 <printf>
    80014ec4:	02900513          	li	a0,41
    80014ec8:	47d140ef          	jal	80029b44 <putchar>
    80014ecc:	4529                	li	a0,10
    80014ece:	477140ef          	jal	80029b44 <putchar>
    80014ed2:	c095                	beqz	s1,80014ef6 <instruction_page_fault_3+0x1a2>
    80014ed4:	0003f497          	auipc	s1,0x3f
    80014ed8:	13d4c483          	lbu	s1,317(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014edc:	00018597          	auipc	a1,0x18
    80014ee0:	4ac58593          	addi	a1,a1,1196 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014ee4:	cc91                	beqz	s1,80014f00 <instruction_page_fault_3+0x1ac>
    80014ee6:	6418                	ld	a4,8(s0)
    80014ee8:	47b1                	li	a5,12
    TEST_END();
    80014eea:	00018597          	auipc	a1,0x18
    80014eee:	48e58593          	addi	a1,a1,1166 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014ef2:	00f70763          	beq	a4,a5,80014f00 <instruction_page_fault_3+0x1ac>
    80014ef6:	4481                	li	s1,0
    TEST_END();
    80014ef8:	00018597          	auipc	a1,0x18
    80014efc:	49058593          	addi	a1,a1,1168 # 8002d388 <__func__.0+0x2d0>
    80014f00:	00018517          	auipc	a0,0x18
    80014f04:	53050513          	addi	a0,a0,1328 # 8002d430 <__func__.0+0x378>
    80014f08:	74f150ef          	jal	8002ae56 <printf>
    80014f0c:	4511                	li	a0,4
    80014f0e:	ffbeb0ef          	jal	80000f08 <goto_priv>
    80014f12:	913ec0ef          	jal	80001824 <reset_state>
}
    80014f16:	60e2                	ld	ra,24(sp)
    80014f18:	6442                	ld	s0,16(sp)
    80014f1a:	8526                	mv	a0,s1
    80014f1c:	64a2                	ld	s1,8(sp)
    80014f1e:	6105                	addi	sp,sp,32
    80014f20:	8082                	ret

0000000080014f22 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80014f22:	1101                	addi	sp,sp,-32

    TEST_START();
    80014f24:	00017597          	auipc	a1,0x17
    80014f28:	dac58593          	addi	a1,a1,-596 # 8002bcd0 <__func__.22>
    80014f2c:	00018517          	auipc	a0,0x18
    80014f30:	46c50513          	addi	a0,a0,1132 # 8002d398 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    80014f34:	ec06                	sd	ra,24(sp)
    80014f36:	e822                	sd	s0,16(sp)
    80014f38:	e426                	sd	s1,8(sp)
    TEST_START();
    80014f3a:	71d150ef          	jal	8002ae56 <printf>
    80014f3e:	4529                	li	a0,10
    80014f40:	405140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80014f44:	450d                	li	a0,3
    80014f46:	fc3eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014f4a:	e96eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014f4e:	a77eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014f52:	82beb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_VS);
    80014f56:	4509                	li	a0,2
    80014f58:	fb1eb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014f5c:	eb1eb0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014f60:	000807b7          	lui	a5,0x80
    80014f64:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014f66:	07b6                	slli	a5,a5,0xd
    80014f68:	0003f417          	auipc	s0,0x3f
    80014f6c:	0a840413          	addi	s0,s0,168 # 80054010 <excpt>
    80014f70:	00000297          	auipc	t0,0x0
    80014f74:	00c28293          	addi	t0,t0,12 # 80014f7c <instruction_page_fault_4+0x5a>
    80014f78:	02543c23          	sd	t0,56(s0)
    80014f7c:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f7e:	08200593          	li	a1,130
    80014f82:	0001d617          	auipc	a2,0x1d
    80014f86:	53660613          	addi	a2,a2,1334 # 800324b8 <__func__.0+0x5400>
    80014f8a:	00018517          	auipc	a0,0x18
    80014f8e:	42650513          	addi	a0,a0,1062 # 8002d3b0 <__func__.0+0x2f8>
    80014f92:	6c5150ef          	jal	8002ae56 <printf>
    80014f96:	0003f797          	auipc	a5,0x3f
    80014f9a:	07b7c783          	lbu	a5,123(a5) # 80054011 <excpt+0x1>
    80014f9e:	00018597          	auipc	a1,0x18
    80014fa2:	3ea58593          	addi	a1,a1,1002 # 8002d388 <__func__.0+0x2d0>
    80014fa6:	cf89                	beqz	a5,80014fc0 <instruction_page_fault_4+0x9e>
    80014fa8:	6418                	ld	a4,8(s0)
    80014faa:	47b1                	li	a5,12
    80014fac:	00018597          	auipc	a1,0x18
    80014fb0:	3cc58593          	addi	a1,a1,972 # 8002d378 <__func__.0+0x2c0>
    80014fb4:	00f70663          	beq	a4,a5,80014fc0 <instruction_page_fault_4+0x9e>
    80014fb8:	00018597          	auipc	a1,0x18
    80014fbc:	3d058593          	addi	a1,a1,976 # 8002d388 <__func__.0+0x2d0>
    80014fc0:	00018517          	auipc	a0,0x18
    80014fc4:	40850513          	addi	a0,a0,1032 # 8002d3c8 <__func__.0+0x310>
    80014fc8:	68f150ef          	jal	8002ae56 <printf>
    80014fcc:	0003f797          	auipc	a5,0x3f
    80014fd0:	0457c783          	lbu	a5,69(a5) # 80054011 <excpt+0x1>
    80014fd4:	c789                	beqz	a5,80014fde <instruction_page_fault_4+0xbc>
    80014fd6:	6418                	ld	a4,8(s0)
    80014fd8:	47b1                	li	a5,12
    80014fda:	00f70c63          	beq	a4,a5,80014ff2 <instruction_page_fault_4+0xd0>
    80014fde:	00018517          	auipc	a0,0x18
    80014fe2:	3f250513          	addi	a0,a0,1010 # 8002d3d0 <__func__.0+0x318>
    80014fe6:	671150ef          	jal	8002ae56 <printf>
    80014fea:	02900513          	li	a0,41
    80014fee:	357140ef          	jal	80029b44 <putchar>
    80014ff2:	4529                	li	a0,10
    80014ff4:	351140ef          	jal	80029b44 <putchar>
    80014ff8:	0003f497          	auipc	s1,0x3f
    80014ffc:	0194c483          	lbu	s1,25(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015000:	00018597          	auipc	a1,0x18
    80015004:	38858593          	addi	a1,a1,904 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015008:	cc91                	beqz	s1,80015024 <instruction_page_fault_4+0x102>
    8001500a:	6418                	ld	a4,8(s0)
    8001500c:	47b1                	li	a5,12
    TEST_END();
    8001500e:	00018597          	auipc	a1,0x18
    80015012:	36a58593          	addi	a1,a1,874 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015016:	00f70763          	beq	a4,a5,80015024 <instruction_page_fault_4+0x102>
    8001501a:	4481                	li	s1,0
    TEST_END();
    8001501c:	00018597          	auipc	a1,0x18
    80015020:	36c58593          	addi	a1,a1,876 # 8002d388 <__func__.0+0x2d0>
    80015024:	00018517          	auipc	a0,0x18
    80015028:	40c50513          	addi	a0,a0,1036 # 8002d430 <__func__.0+0x378>
    8001502c:	62b150ef          	jal	8002ae56 <printf>
    80015030:	4511                	li	a0,4
    80015032:	ed7eb0ef          	jal	80000f08 <goto_priv>
    80015036:	feeec0ef          	jal	80001824 <reset_state>
}
    8001503a:	60e2                	ld	ra,24(sp)
    8001503c:	6442                	ld	s0,16(sp)
    8001503e:	8526                	mv	a0,s1
    80015040:	64a2                	ld	s1,8(sp)
    80015042:	6105                	addi	sp,sp,32
    80015044:	8082                	ret

0000000080015046 <load_page_fault_1>:

bool load_page_fault_1(){
    80015046:	1101                	addi	sp,sp,-32

    TEST_START();
    80015048:	00017597          	auipc	a1,0x17
    8001504c:	ca858593          	addi	a1,a1,-856 # 8002bcf0 <__func__.21>
    80015050:	00018517          	auipc	a0,0x18
    80015054:	34850513          	addi	a0,a0,840 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_1(){
    80015058:	ec06                	sd	ra,24(sp)
    8001505a:	e822                	sd	s0,16(sp)
    8001505c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001505e:	5f9150ef          	jal	8002ae56 <printf>
    80015062:	4529                	li	a0,10
    80015064:	2e1140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS); 
    80015068:	450d                	li	a0,3
    8001506a:	e9feb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001506e:	d72eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015072:	953eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015076:	f06eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001507a:	450d                	li	a0,3
    8001507c:	e8deb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015080:	4509                	li	a0,2
    80015082:	da7eb0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015086:	d87eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001508a:	400197b7          	lui	a5,0x40019
    8001508e:	078a                	slli	a5,a5,0x2
    80015090:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    80015094:	08200593          	li	a1,130
    80015098:	0001d617          	auipc	a2,0x1d
    8001509c:	45860613          	addi	a2,a2,1112 # 800324f0 <__func__.0+0x5438>
    800150a0:	00018517          	auipc	a0,0x18
    800150a4:	31050513          	addi	a0,a0,784 # 8002d3b0 <__func__.0+0x2f8>
    800150a8:	5af150ef          	jal	8002ae56 <printf>
    800150ac:	0003f797          	auipc	a5,0x3f
    800150b0:	f657c783          	lbu	a5,-155(a5) # 80054011 <excpt+0x1>
    800150b4:	0003f497          	auipc	s1,0x3f
    800150b8:	f5c48493          	addi	s1,s1,-164 # 80054010 <excpt>
    800150bc:	00018597          	auipc	a1,0x18
    800150c0:	2cc58593          	addi	a1,a1,716 # 8002d388 <__func__.0+0x2d0>
    800150c4:	cf89                	beqz	a5,800150de <load_page_fault_1+0x98>
    800150c6:	6498                	ld	a4,8(s1)
    800150c8:	47b5                	li	a5,13
    800150ca:	00018597          	auipc	a1,0x18
    800150ce:	2ae58593          	addi	a1,a1,686 # 8002d378 <__func__.0+0x2c0>
    800150d2:	00f70663          	beq	a4,a5,800150de <load_page_fault_1+0x98>
    800150d6:	00018597          	auipc	a1,0x18
    800150da:	2b258593          	addi	a1,a1,690 # 8002d388 <__func__.0+0x2d0>
    800150de:	00018517          	auipc	a0,0x18
    800150e2:	2ea50513          	addi	a0,a0,746 # 8002d3c8 <__func__.0+0x310>
    800150e6:	571150ef          	jal	8002ae56 <printf>
    800150ea:	0003f797          	auipc	a5,0x3f
    800150ee:	f277c783          	lbu	a5,-217(a5) # 80054011 <excpt+0x1>
    800150f2:	c789                	beqz	a5,800150fc <load_page_fault_1+0xb6>
    800150f4:	6498                	ld	a4,8(s1)
    800150f6:	47b5                	li	a5,13
    800150f8:	00f70c63          	beq	a4,a5,80015110 <load_page_fault_1+0xca>
    800150fc:	00018517          	auipc	a0,0x18
    80015100:	2d450513          	addi	a0,a0,724 # 8002d3d0 <__func__.0+0x318>
    80015104:	553150ef          	jal	8002ae56 <printf>
    80015108:	02900513          	li	a0,41
    8001510c:	239140ef          	jal	80029b44 <putchar>
    80015110:	4529                	li	a0,10
    80015112:	233140ef          	jal	80029b44 <putchar>
    80015116:	0003f797          	auipc	a5,0x3f
    8001511a:	efb7c783          	lbu	a5,-261(a5) # 80054011 <excpt+0x1>
    8001511e:	4401                	li	s0,0
    80015120:	c789                	beqz	a5,8001512a <load_page_fault_1+0xe4>
    80015122:	6480                	ld	s0,8(s1)
    80015124:	144d                	addi	s0,s0,-13
    80015126:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001512a:	ce3eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001512e:	000807b7          	lui	a5,0x80
    80015132:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80015136:	001007b7          	lui	a5,0x100
    8001513a:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001513e:	07b2                	slli	a5,a5,0xc
    80015140:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80015144:	08200593          	li	a1,130
    80015148:	0001d617          	auipc	a2,0x1d
    8001514c:	3d060613          	addi	a2,a2,976 # 80032518 <__func__.0+0x5460>
    80015150:	00018517          	auipc	a0,0x18
    80015154:	26050513          	addi	a0,a0,608 # 8002d3b0 <__func__.0+0x2f8>
    80015158:	4ff150ef          	jal	8002ae56 <printf>
    8001515c:	0003f797          	auipc	a5,0x3f
    80015160:	eb57c783          	lbu	a5,-331(a5) # 80054011 <excpt+0x1>
    80015164:	00018597          	auipc	a1,0x18
    80015168:	22458593          	addi	a1,a1,548 # 8002d388 <__func__.0+0x2d0>
    8001516c:	cf89                	beqz	a5,80015186 <load_page_fault_1+0x140>
    8001516e:	6498                	ld	a4,8(s1)
    80015170:	47b5                	li	a5,13
    80015172:	00018597          	auipc	a1,0x18
    80015176:	20658593          	addi	a1,a1,518 # 8002d378 <__func__.0+0x2c0>
    8001517a:	00f70663          	beq	a4,a5,80015186 <load_page_fault_1+0x140>
    8001517e:	00018597          	auipc	a1,0x18
    80015182:	20a58593          	addi	a1,a1,522 # 8002d388 <__func__.0+0x2d0>
    80015186:	00018517          	auipc	a0,0x18
    8001518a:	24250513          	addi	a0,a0,578 # 8002d3c8 <__func__.0+0x310>
    8001518e:	4c9150ef          	jal	8002ae56 <printf>
    80015192:	0003f797          	auipc	a5,0x3f
    80015196:	e7f7c783          	lbu	a5,-385(a5) # 80054011 <excpt+0x1>
    8001519a:	c789                	beqz	a5,800151a4 <load_page_fault_1+0x15e>
    8001519c:	6498                	ld	a4,8(s1)
    8001519e:	47b5                	li	a5,13
    800151a0:	00f70c63          	beq	a4,a5,800151b8 <load_page_fault_1+0x172>
    800151a4:	00018517          	auipc	a0,0x18
    800151a8:	22c50513          	addi	a0,a0,556 # 8002d3d0 <__func__.0+0x318>
    800151ac:	4ab150ef          	jal	8002ae56 <printf>
    800151b0:	02900513          	li	a0,41
    800151b4:	191140ef          	jal	80029b44 <putchar>
    800151b8:	4529                	li	a0,10
    800151ba:	18b140ef          	jal	80029b44 <putchar>
    800151be:	c801                	beqz	s0,800151ce <load_page_fault_1+0x188>
    800151c0:	0003f797          	auipc	a5,0x3f
    800151c4:	e517c783          	lbu	a5,-431(a5) # 80054011 <excpt+0x1>
    800151c8:	4401                	li	s0,0
    800151ca:	0c079e63          	bnez	a5,800152a6 <load_page_fault_1+0x260>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    800151ce:	450d                	li	a0,3
    800151d0:	d39eb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800151d4:	c39eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800151d8:	000807b7          	lui	a5,0x80
    800151dc:	1007a073          	csrs	sstatus,a5
    800151e0:	001007b7          	lui	a5,0x100
    800151e4:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800151e6:	07b2                	slli	a5,a5,0xc
    800151e8:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800151ec:	08200593          	li	a1,130
    800151f0:	0001d617          	auipc	a2,0x1d
    800151f4:	36860613          	addi	a2,a2,872 # 80032558 <__func__.0+0x54a0>
    800151f8:	00018517          	auipc	a0,0x18
    800151fc:	1b850513          	addi	a0,a0,440 # 8002d3b0 <__func__.0+0x2f8>
    80015200:	457150ef          	jal	8002ae56 <printf>
    80015204:	0003f797          	auipc	a5,0x3f
    80015208:	e0d7c783          	lbu	a5,-499(a5) # 80054011 <excpt+0x1>
    8001520c:	00018597          	auipc	a1,0x18
    80015210:	17c58593          	addi	a1,a1,380 # 8002d388 <__func__.0+0x2d0>
    80015214:	cf89                	beqz	a5,8001522e <load_page_fault_1+0x1e8>
    80015216:	6498                	ld	a4,8(s1)
    80015218:	47b5                	li	a5,13
    8001521a:	00018597          	auipc	a1,0x18
    8001521e:	15e58593          	addi	a1,a1,350 # 8002d378 <__func__.0+0x2c0>
    80015222:	00f70663          	beq	a4,a5,8001522e <load_page_fault_1+0x1e8>
    80015226:	00018597          	auipc	a1,0x18
    8001522a:	16258593          	addi	a1,a1,354 # 8002d388 <__func__.0+0x2d0>
    8001522e:	00018517          	auipc	a0,0x18
    80015232:	19a50513          	addi	a0,a0,410 # 8002d3c8 <__func__.0+0x310>
    80015236:	421150ef          	jal	8002ae56 <printf>
    8001523a:	0003f797          	auipc	a5,0x3f
    8001523e:	dd77c783          	lbu	a5,-553(a5) # 80054011 <excpt+0x1>
    80015242:	c789                	beqz	a5,8001524c <load_page_fault_1+0x206>
    80015244:	6498                	ld	a4,8(s1)
    80015246:	47b5                	li	a5,13
    80015248:	00f70c63          	beq	a4,a5,80015260 <load_page_fault_1+0x21a>
    8001524c:	00018517          	auipc	a0,0x18
    80015250:	18450513          	addi	a0,a0,388 # 8002d3d0 <__func__.0+0x318>
    80015254:	403150ef          	jal	8002ae56 <printf>
    80015258:	02900513          	li	a0,41
    8001525c:	0e9140ef          	jal	80029b44 <putchar>
    80015260:	4529                	li	a0,10
    80015262:	0e3140ef          	jal	80029b44 <putchar>
    80015266:	c411                	beqz	s0,80015272 <load_page_fault_1+0x22c>
    80015268:	0003f417          	auipc	s0,0x3f
    8001526c:	da944403          	lbu	s0,-599(s0) # 80054011 <excpt+0x1>
    80015270:	e021                	bnez	s0,800152b0 <load_page_fault_1+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015272:	000807b7          	lui	a5,0x80
    80015276:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001527a:	4401                	li	s0,0

    TEST_END();
    8001527c:	00018597          	auipc	a1,0x18
    80015280:	10c58593          	addi	a1,a1,268 # 8002d388 <__func__.0+0x2d0>
    80015284:	00018517          	auipc	a0,0x18
    80015288:	1ac50513          	addi	a0,a0,428 # 8002d430 <__func__.0+0x378>
    8001528c:	3cb150ef          	jal	8002ae56 <printf>
    80015290:	4511                	li	a0,4
    80015292:	c77eb0ef          	jal	80000f08 <goto_priv>
    80015296:	d8eec0ef          	jal	80001824 <reset_state>

}
    8001529a:	60e2                	ld	ra,24(sp)
    8001529c:	8522                	mv	a0,s0
    8001529e:	6442                	ld	s0,16(sp)
    800152a0:	64a2                	ld	s1,8(sp)
    800152a2:	6105                	addi	sp,sp,32
    800152a4:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800152a6:	6480                	ld	s0,8(s1)
    800152a8:	144d                	addi	s0,s0,-13
    800152aa:	00143413          	seqz	s0,s0
    800152ae:	b705                	j	800151ce <load_page_fault_1+0x188>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800152b0:	6498                	ld	a4,8(s1)
    800152b2:	47b5                	li	a5,13
    800152b4:	faf71fe3          	bne	a4,a5,80015272 <load_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800152b8:	000807b7          	lui	a5,0x80
    800152bc:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800152c0:	00018597          	auipc	a1,0x18
    800152c4:	0b858593          	addi	a1,a1,184 # 8002d378 <__func__.0+0x2c0>
    800152c8:	bf75                	j	80015284 <load_page_fault_1+0x23e>

00000000800152ca <load_page_fault_2>:

bool load_page_fault_2(){
    800152ca:	1101                	addi	sp,sp,-32

    TEST_START();
    800152cc:	00017597          	auipc	a1,0x17
    800152d0:	a3c58593          	addi	a1,a1,-1476 # 8002bd08 <__func__.20>
    800152d4:	00018517          	auipc	a0,0x18
    800152d8:	0c450513          	addi	a0,a0,196 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_2(){
    800152dc:	ec06                	sd	ra,24(sp)
    800152de:	e822                	sd	s0,16(sp)
    800152e0:	e426                	sd	s1,8(sp)
    TEST_START();
    800152e2:	375150ef          	jal	8002ae56 <printf>
    800152e6:	4529                	li	a0,10
    800152e8:	05d140ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    800152ec:	450d                	li	a0,3
    800152ee:	c1beb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800152f2:	aeeeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800152f6:	eceeb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800152fa:	c82eb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800152fe:	4511                	li	a0,4
    80015300:	c09eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015304:	000407b7          	lui	a5,0x40
    80015308:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001530c:	450d                	li	a0,3
    8001530e:	bfbeb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015312:	4509                	li	a0,2
    80015314:	b15eb0ef          	jal	80000e28 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015318:	af5eb0ef          	jal	80000e0c <test_setup_except_function>
    8001531c:	000807b7          	lui	a5,0x80
    80015320:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015322:	07b6                	slli	a5,a5,0xd
    80015324:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015328:	08200593          	li	a1,130
    8001532c:	0001d617          	auipc	a2,0x1d
    80015330:	27460613          	addi	a2,a2,628 # 800325a0 <__func__.0+0x54e8>
    80015334:	00018517          	auipc	a0,0x18
    80015338:	07c50513          	addi	a0,a0,124 # 8002d3b0 <__func__.0+0x2f8>
    8001533c:	31b150ef          	jal	8002ae56 <printf>
    80015340:	0003f797          	auipc	a5,0x3f
    80015344:	cd17c783          	lbu	a5,-815(a5) # 80054011 <excpt+0x1>
    80015348:	0003f497          	auipc	s1,0x3f
    8001534c:	cc848493          	addi	s1,s1,-824 # 80054010 <excpt>
    80015350:	00018597          	auipc	a1,0x18
    80015354:	03858593          	addi	a1,a1,56 # 8002d388 <__func__.0+0x2d0>
    80015358:	cf89                	beqz	a5,80015372 <load_page_fault_2+0xa8>
    8001535a:	6498                	ld	a4,8(s1)
    8001535c:	47b5                	li	a5,13
    8001535e:	00018597          	auipc	a1,0x18
    80015362:	01a58593          	addi	a1,a1,26 # 8002d378 <__func__.0+0x2c0>
    80015366:	00f70663          	beq	a4,a5,80015372 <load_page_fault_2+0xa8>
    8001536a:	00018597          	auipc	a1,0x18
    8001536e:	01e58593          	addi	a1,a1,30 # 8002d388 <__func__.0+0x2d0>
    80015372:	00018517          	auipc	a0,0x18
    80015376:	05650513          	addi	a0,a0,86 # 8002d3c8 <__func__.0+0x310>
    8001537a:	2dd150ef          	jal	8002ae56 <printf>
    8001537e:	0003f797          	auipc	a5,0x3f
    80015382:	c937c783          	lbu	a5,-877(a5) # 80054011 <excpt+0x1>
    80015386:	c789                	beqz	a5,80015390 <load_page_fault_2+0xc6>
    80015388:	6498                	ld	a4,8(s1)
    8001538a:	47b5                	li	a5,13
    8001538c:	00f70c63          	beq	a4,a5,800153a4 <load_page_fault_2+0xda>
    80015390:	00018517          	auipc	a0,0x18
    80015394:	04050513          	addi	a0,a0,64 # 8002d3d0 <__func__.0+0x318>
    80015398:	2bf150ef          	jal	8002ae56 <printf>
    8001539c:	02900513          	li	a0,41
    800153a0:	7a4140ef          	jal	80029b44 <putchar>
    800153a4:	4529                	li	a0,10
    800153a6:	79e140ef          	jal	80029b44 <putchar>
    800153aa:	0003f417          	auipc	s0,0x3f
    800153ae:	c6744403          	lbu	s0,-921(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800153b2:	00018597          	auipc	a1,0x18
    800153b6:	fd658593          	addi	a1,a1,-42 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800153ba:	cc11                	beqz	s0,800153d6 <load_page_fault_2+0x10c>
    800153bc:	6498                	ld	a4,8(s1)
    800153be:	47b5                	li	a5,13
    TEST_END();
    800153c0:	00018597          	auipc	a1,0x18
    800153c4:	fb858593          	addi	a1,a1,-72 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800153c8:	00f70763          	beq	a4,a5,800153d6 <load_page_fault_2+0x10c>
    800153cc:	4401                	li	s0,0
    TEST_END();
    800153ce:	00018597          	auipc	a1,0x18
    800153d2:	fba58593          	addi	a1,a1,-70 # 8002d388 <__func__.0+0x2d0>
    800153d6:	00018517          	auipc	a0,0x18
    800153da:	05a50513          	addi	a0,a0,90 # 8002d430 <__func__.0+0x378>
    800153de:	279150ef          	jal	8002ae56 <printf>
    800153e2:	4511                	li	a0,4
    800153e4:	b25eb0ef          	jal	80000f08 <goto_priv>
    800153e8:	c3cec0ef          	jal	80001824 <reset_state>
}
    800153ec:	60e2                	ld	ra,24(sp)
    800153ee:	8522                	mv	a0,s0
    800153f0:	6442                	ld	s0,16(sp)
    800153f2:	64a2                	ld	s1,8(sp)
    800153f4:	6105                	addi	sp,sp,32
    800153f6:	8082                	ret

00000000800153f8 <load_page_fault_3>:

bool load_page_fault_3(){
    800153f8:	1141                	addi	sp,sp,-16

    TEST_START();
    800153fa:	00017597          	auipc	a1,0x17
    800153fe:	92658593          	addi	a1,a1,-1754 # 8002bd20 <__func__.19>
    80015402:	00018517          	auipc	a0,0x18
    80015406:	f9650513          	addi	a0,a0,-106 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_3(){
    8001540a:	e406                	sd	ra,8(sp)
    8001540c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001540e:	249150ef          	jal	8002ae56 <printf>
    80015412:	4529                	li	a0,10
    80015414:	730140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80015418:	450d                	li	a0,3
    8001541a:	aefeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001541e:	9c2eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015422:	da2eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015426:	b56eb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    8001542a:	4511                	li	a0,4
    8001542c:	addeb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015430:	000407b7          	lui	a5,0x40
    80015434:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015438:	450d                	li	a0,3
    8001543a:	acfeb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001543e:	4509                	li	a0,2
    80015440:	9e9eb0ef          	jal	80000e28 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015444:	9c9eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015448:	000807b7          	lui	a5,0x80
    8001544c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001544e:	07b6                	slli	a5,a5,0xd
    80015450:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015454:	08200593          	li	a1,130
    80015458:	0001d617          	auipc	a2,0x1d
    8001545c:	18860613          	addi	a2,a2,392 # 800325e0 <__func__.0+0x5528>
    80015460:	00018517          	auipc	a0,0x18
    80015464:	f5050513          	addi	a0,a0,-176 # 8002d3b0 <__func__.0+0x2f8>
    80015468:	1ef150ef          	jal	8002ae56 <printf>
    8001546c:	0003f797          	auipc	a5,0x3f
    80015470:	ba57c783          	lbu	a5,-1115(a5) # 80054011 <excpt+0x1>
    80015474:	00018597          	auipc	a1,0x18
    80015478:	f0458593          	addi	a1,a1,-252 # 8002d378 <__func__.0+0x2c0>
    8001547c:	c789                	beqz	a5,80015486 <load_page_fault_3+0x8e>
    8001547e:	00018597          	auipc	a1,0x18
    80015482:	f0a58593          	addi	a1,a1,-246 # 8002d388 <__func__.0+0x2d0>
    80015486:	00018517          	auipc	a0,0x18
    8001548a:	f4250513          	addi	a0,a0,-190 # 8002d3c8 <__func__.0+0x310>
    8001548e:	1c9150ef          	jal	8002ae56 <printf>
    80015492:	0003f797          	auipc	a5,0x3f
    80015496:	b7f7c783          	lbu	a5,-1153(a5) # 80054011 <excpt+0x1>
    8001549a:	e7a1                	bnez	a5,800154e2 <load_page_fault_3+0xea>
    8001549c:	4529                	li	a0,10
    8001549e:	6a6140ef          	jal	80029b44 <putchar>
    800154a2:	0003f797          	auipc	a5,0x3f
    800154a6:	b6f7c783          	lbu	a5,-1169(a5) # 80054011 <excpt+0x1>
    800154aa:	e795                	bnez	a5,800154d6 <load_page_fault_3+0xde>
    800154ac:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800154ae:	00018597          	auipc	a1,0x18
    800154b2:	eca58593          	addi	a1,a1,-310 # 8002d378 <__func__.0+0x2c0>
    800154b6:	00018517          	auipc	a0,0x18
    800154ba:	f7a50513          	addi	a0,a0,-134 # 8002d430 <__func__.0+0x378>
    800154be:	199150ef          	jal	8002ae56 <printf>
    800154c2:	4511                	li	a0,4
    800154c4:	a45eb0ef          	jal	80000f08 <goto_priv>
    800154c8:	b5cec0ef          	jal	80001824 <reset_state>
}
    800154cc:	60a2                	ld	ra,8(sp)
    800154ce:	8522                	mv	a0,s0
    800154d0:	6402                	ld	s0,0(sp)
    800154d2:	0141                	addi	sp,sp,16
    800154d4:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800154d6:	4401                	li	s0,0
    TEST_END();
    800154d8:	00018597          	auipc	a1,0x18
    800154dc:	eb058593          	addi	a1,a1,-336 # 8002d388 <__func__.0+0x2d0>
    800154e0:	bfd9                	j	800154b6 <load_page_fault_3+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800154e2:	00018517          	auipc	a0,0x18
    800154e6:	eee50513          	addi	a0,a0,-274 # 8002d3d0 <__func__.0+0x318>
    800154ea:	16d150ef          	jal	8002ae56 <printf>
    800154ee:	02900513          	li	a0,41
    800154f2:	652140ef          	jal	80029b44 <putchar>
    800154f6:	b75d                	j	8001549c <load_page_fault_3+0xa4>

00000000800154f8 <load_page_fault_4>:


bool load_page_fault_4(){
    800154f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800154fa:	00017597          	auipc	a1,0x17
    800154fe:	83e58593          	addi	a1,a1,-1986 # 8002bd38 <__func__.18>
    80015502:	00018517          	auipc	a0,0x18
    80015506:	e9650513          	addi	a0,a0,-362 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_4(){
    8001550a:	ec06                	sd	ra,24(sp)
    8001550c:	e822                	sd	s0,16(sp)
    8001550e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015510:	147150ef          	jal	8002ae56 <printf>
    80015514:	4529                	li	a0,10
    80015516:	62e140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS); 
    8001551a:	450d                	li	a0,3
    8001551c:	9edeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015520:	8c0eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015524:	ca0eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015528:	a54eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001552c:	4509                	li	a0,2
    8001552e:	9dbeb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015532:	8dbeb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80015536:	400197b7          	lui	a5,0x40019
    8001553a:	078a                	slli	a5,a5,0x2
    8001553c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    80015540:	08200593          	li	a1,130
    80015544:	0001d617          	auipc	a2,0x1d
    80015548:	0d460613          	addi	a2,a2,212 # 80032618 <__func__.0+0x5560>
    8001554c:	00018517          	auipc	a0,0x18
    80015550:	e6450513          	addi	a0,a0,-412 # 8002d3b0 <__func__.0+0x2f8>
    80015554:	103150ef          	jal	8002ae56 <printf>
    80015558:	0003f797          	auipc	a5,0x3f
    8001555c:	ab97c783          	lbu	a5,-1351(a5) # 80054011 <excpt+0x1>
    80015560:	0003f497          	auipc	s1,0x3f
    80015564:	ab048493          	addi	s1,s1,-1360 # 80054010 <excpt>
    80015568:	00018597          	auipc	a1,0x18
    8001556c:	e2058593          	addi	a1,a1,-480 # 8002d388 <__func__.0+0x2d0>
    80015570:	cf89                	beqz	a5,8001558a <load_page_fault_4+0x92>
    80015572:	6498                	ld	a4,8(s1)
    80015574:	47b5                	li	a5,13
    80015576:	00018597          	auipc	a1,0x18
    8001557a:	e0258593          	addi	a1,a1,-510 # 8002d378 <__func__.0+0x2c0>
    8001557e:	00f70663          	beq	a4,a5,8001558a <load_page_fault_4+0x92>
    80015582:	00018597          	auipc	a1,0x18
    80015586:	e0658593          	addi	a1,a1,-506 # 8002d388 <__func__.0+0x2d0>
    8001558a:	00018517          	auipc	a0,0x18
    8001558e:	e3e50513          	addi	a0,a0,-450 # 8002d3c8 <__func__.0+0x310>
    80015592:	0c5150ef          	jal	8002ae56 <printf>
    80015596:	0003f797          	auipc	a5,0x3f
    8001559a:	a7b7c783          	lbu	a5,-1413(a5) # 80054011 <excpt+0x1>
    8001559e:	c789                	beqz	a5,800155a8 <load_page_fault_4+0xb0>
    800155a0:	6498                	ld	a4,8(s1)
    800155a2:	47b5                	li	a5,13
    800155a4:	00f70c63          	beq	a4,a5,800155bc <load_page_fault_4+0xc4>
    800155a8:	00018517          	auipc	a0,0x18
    800155ac:	e2850513          	addi	a0,a0,-472 # 8002d3d0 <__func__.0+0x318>
    800155b0:	0a7150ef          	jal	8002ae56 <printf>
    800155b4:	02900513          	li	a0,41
    800155b8:	58c140ef          	jal	80029b44 <putchar>
    800155bc:	4529                	li	a0,10
    800155be:	586140ef          	jal	80029b44 <putchar>
    800155c2:	0003f797          	auipc	a5,0x3f
    800155c6:	a4f7c783          	lbu	a5,-1457(a5) # 80054011 <excpt+0x1>
    800155ca:	4401                	li	s0,0
    800155cc:	c789                	beqz	a5,800155d6 <load_page_fault_4+0xde>
    800155ce:	6480                	ld	s0,8(s1)
    800155d0:	144d                	addi	s0,s0,-13
    800155d2:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800155d6:	837eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800155da:	000807b7          	lui	a5,0x80
    800155de:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800155e2:	001007b7          	lui	a5,0x100
    800155e6:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800155ea:	07b2                	slli	a5,a5,0xc
    800155ec:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800155f0:	08200593          	li	a1,130
    800155f4:	0001d617          	auipc	a2,0x1d
    800155f8:	04c60613          	addi	a2,a2,76 # 80032640 <__func__.0+0x5588>
    800155fc:	00018517          	auipc	a0,0x18
    80015600:	db450513          	addi	a0,a0,-588 # 8002d3b0 <__func__.0+0x2f8>
    80015604:	053150ef          	jal	8002ae56 <printf>
    80015608:	0003f797          	auipc	a5,0x3f
    8001560c:	a097c783          	lbu	a5,-1527(a5) # 80054011 <excpt+0x1>
    80015610:	00018597          	auipc	a1,0x18
    80015614:	d7858593          	addi	a1,a1,-648 # 8002d388 <__func__.0+0x2d0>
    80015618:	cf89                	beqz	a5,80015632 <load_page_fault_4+0x13a>
    8001561a:	6498                	ld	a4,8(s1)
    8001561c:	47b5                	li	a5,13
    8001561e:	00018597          	auipc	a1,0x18
    80015622:	d5a58593          	addi	a1,a1,-678 # 8002d378 <__func__.0+0x2c0>
    80015626:	00f70663          	beq	a4,a5,80015632 <load_page_fault_4+0x13a>
    8001562a:	00018597          	auipc	a1,0x18
    8001562e:	d5e58593          	addi	a1,a1,-674 # 8002d388 <__func__.0+0x2d0>
    80015632:	00018517          	auipc	a0,0x18
    80015636:	d9650513          	addi	a0,a0,-618 # 8002d3c8 <__func__.0+0x310>
    8001563a:	01d150ef          	jal	8002ae56 <printf>
    8001563e:	0003f797          	auipc	a5,0x3f
    80015642:	9d37c783          	lbu	a5,-1581(a5) # 80054011 <excpt+0x1>
    80015646:	c789                	beqz	a5,80015650 <load_page_fault_4+0x158>
    80015648:	6498                	ld	a4,8(s1)
    8001564a:	47b5                	li	a5,13
    8001564c:	00f70c63          	beq	a4,a5,80015664 <load_page_fault_4+0x16c>
    80015650:	00018517          	auipc	a0,0x18
    80015654:	d8050513          	addi	a0,a0,-640 # 8002d3d0 <__func__.0+0x318>
    80015658:	7fe150ef          	jal	8002ae56 <printf>
    8001565c:	02900513          	li	a0,41
    80015660:	4e4140ef          	jal	80029b44 <putchar>
    80015664:	4529                	li	a0,10
    80015666:	4de140ef          	jal	80029b44 <putchar>
    8001566a:	c801                	beqz	s0,8001567a <load_page_fault_4+0x182>
    8001566c:	0003f797          	auipc	a5,0x3f
    80015670:	9a57c783          	lbu	a5,-1627(a5) # 80054011 <excpt+0x1>
    80015674:	4401                	li	s0,0
    80015676:	0c079e63          	bnez	a5,80015752 <load_page_fault_4+0x25a>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    8001567a:	4509                	li	a0,2
    8001567c:	88deb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80015680:	f8ceb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015684:	000807b7          	lui	a5,0x80
    80015688:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8001568c:	001007b7          	lui	a5,0x100
    80015690:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80015692:	07b2                	slli	a5,a5,0xc
    80015694:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015698:	08200593          	li	a1,130
    8001569c:	0001d617          	auipc	a2,0x1d
    800156a0:	fdc60613          	addi	a2,a2,-36 # 80032678 <__func__.0+0x55c0>
    800156a4:	00018517          	auipc	a0,0x18
    800156a8:	d0c50513          	addi	a0,a0,-756 # 8002d3b0 <__func__.0+0x2f8>
    800156ac:	7aa150ef          	jal	8002ae56 <printf>
    800156b0:	0003f797          	auipc	a5,0x3f
    800156b4:	9617c783          	lbu	a5,-1695(a5) # 80054011 <excpt+0x1>
    800156b8:	00018597          	auipc	a1,0x18
    800156bc:	cd058593          	addi	a1,a1,-816 # 8002d388 <__func__.0+0x2d0>
    800156c0:	cf89                	beqz	a5,800156da <load_page_fault_4+0x1e2>
    800156c2:	6498                	ld	a4,8(s1)
    800156c4:	47b5                	li	a5,13
    800156c6:	00018597          	auipc	a1,0x18
    800156ca:	cb258593          	addi	a1,a1,-846 # 8002d378 <__func__.0+0x2c0>
    800156ce:	00f70663          	beq	a4,a5,800156da <load_page_fault_4+0x1e2>
    800156d2:	00018597          	auipc	a1,0x18
    800156d6:	cb658593          	addi	a1,a1,-842 # 8002d388 <__func__.0+0x2d0>
    800156da:	00018517          	auipc	a0,0x18
    800156de:	cee50513          	addi	a0,a0,-786 # 8002d3c8 <__func__.0+0x310>
    800156e2:	774150ef          	jal	8002ae56 <printf>
    800156e6:	0003f797          	auipc	a5,0x3f
    800156ea:	92b7c783          	lbu	a5,-1749(a5) # 80054011 <excpt+0x1>
    800156ee:	c789                	beqz	a5,800156f8 <load_page_fault_4+0x200>
    800156f0:	6498                	ld	a4,8(s1)
    800156f2:	47b5                	li	a5,13
    800156f4:	00f70c63          	beq	a4,a5,8001570c <load_page_fault_4+0x214>
    800156f8:	00018517          	auipc	a0,0x18
    800156fc:	cd850513          	addi	a0,a0,-808 # 8002d3d0 <__func__.0+0x318>
    80015700:	756150ef          	jal	8002ae56 <printf>
    80015704:	02900513          	li	a0,41
    80015708:	43c140ef          	jal	80029b44 <putchar>
    8001570c:	4529                	li	a0,10
    8001570e:	436140ef          	jal	80029b44 <putchar>
    80015712:	c411                	beqz	s0,8001571e <load_page_fault_4+0x226>
    80015714:	0003f417          	auipc	s0,0x3f
    80015718:	8fd44403          	lbu	s0,-1795(s0) # 80054011 <excpt+0x1>
    8001571c:	e021                	bnez	s0,8001575c <load_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001571e:	000807b7          	lui	a5,0x80
    80015722:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015726:	4401                	li	s0,0

    TEST_END();
    80015728:	00018597          	auipc	a1,0x18
    8001572c:	c6058593          	addi	a1,a1,-928 # 8002d388 <__func__.0+0x2d0>
    80015730:	00018517          	auipc	a0,0x18
    80015734:	d0050513          	addi	a0,a0,-768 # 8002d430 <__func__.0+0x378>
    80015738:	71e150ef          	jal	8002ae56 <printf>
    8001573c:	4511                	li	a0,4
    8001573e:	fcaeb0ef          	jal	80000f08 <goto_priv>
    80015742:	8e2ec0ef          	jal	80001824 <reset_state>

}
    80015746:	60e2                	ld	ra,24(sp)
    80015748:	8522                	mv	a0,s0
    8001574a:	6442                	ld	s0,16(sp)
    8001574c:	64a2                	ld	s1,8(sp)
    8001574e:	6105                	addi	sp,sp,32
    80015750:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80015752:	6480                	ld	s0,8(s1)
    80015754:	144d                	addi	s0,s0,-13
    80015756:	00143413          	seqz	s0,s0
    8001575a:	b705                	j	8001567a <load_page_fault_4+0x182>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001575c:	6498                	ld	a4,8(s1)
    8001575e:	47b5                	li	a5,13
    80015760:	faf71fe3          	bne	a4,a5,8001571e <load_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015764:	000807b7          	lui	a5,0x80
    80015768:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001576c:	00018597          	auipc	a1,0x18
    80015770:	c0c58593          	addi	a1,a1,-1012 # 8002d378 <__func__.0+0x2c0>
    80015774:	bf75                	j	80015730 <load_page_fault_4+0x238>

0000000080015776 <load_page_fault_5>:

bool load_page_fault_5(){
    80015776:	1101                	addi	sp,sp,-32

    TEST_START();
    80015778:	00016597          	auipc	a1,0x16
    8001577c:	5d858593          	addi	a1,a1,1496 # 8002bd50 <__func__.17>
    80015780:	00018517          	auipc	a0,0x18
    80015784:	c1850513          	addi	a0,a0,-1000 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_5(){
    80015788:	ec06                	sd	ra,24(sp)
    8001578a:	e822                	sd	s0,16(sp)
    8001578c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001578e:	6c8150ef          	jal	8002ae56 <printf>
    80015792:	4529                	li	a0,10
    80015794:	3b0140ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    80015798:	450d                	li	a0,3
    8001579a:	f6eeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001579e:	e43ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800157a2:	a22eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800157a6:	fd7ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800157aa:	4511                	li	a0,4
    800157ac:	f5ceb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800157b0:	000407b7          	lui	a5,0x40
    800157b4:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800157b8:	4509                	li	a0,2
    800157ba:	f4eeb0ef          	jal	80000f08 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800157be:	e4eeb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    800157c2:	000807b7          	lui	a5,0x80
    800157c6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800157c8:	07b6                	slli	a5,a5,0xd
    800157ca:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157ce:	08200593          	li	a1,130
    800157d2:	0001d617          	auipc	a2,0x1d
    800157d6:	eee60613          	addi	a2,a2,-274 # 800326c0 <__func__.0+0x5608>
    800157da:	00018517          	auipc	a0,0x18
    800157de:	bd650513          	addi	a0,a0,-1066 # 8002d3b0 <__func__.0+0x2f8>
    800157e2:	674150ef          	jal	8002ae56 <printf>
    800157e6:	0003f797          	auipc	a5,0x3f
    800157ea:	82b7c783          	lbu	a5,-2005(a5) # 80054011 <excpt+0x1>
    800157ee:	0003f497          	auipc	s1,0x3f
    800157f2:	82248493          	addi	s1,s1,-2014 # 80054010 <excpt>
    800157f6:	00018597          	auipc	a1,0x18
    800157fa:	b9258593          	addi	a1,a1,-1134 # 8002d388 <__func__.0+0x2d0>
    800157fe:	cf89                	beqz	a5,80015818 <load_page_fault_5+0xa2>
    80015800:	6498                	ld	a4,8(s1)
    80015802:	47b5                	li	a5,13
    80015804:	00018597          	auipc	a1,0x18
    80015808:	b7458593          	addi	a1,a1,-1164 # 8002d378 <__func__.0+0x2c0>
    8001580c:	00f70663          	beq	a4,a5,80015818 <load_page_fault_5+0xa2>
    80015810:	00018597          	auipc	a1,0x18
    80015814:	b7858593          	addi	a1,a1,-1160 # 8002d388 <__func__.0+0x2d0>
    80015818:	00018517          	auipc	a0,0x18
    8001581c:	bb050513          	addi	a0,a0,-1104 # 8002d3c8 <__func__.0+0x310>
    80015820:	636150ef          	jal	8002ae56 <printf>
    80015824:	0003e797          	auipc	a5,0x3e
    80015828:	7ed7c783          	lbu	a5,2029(a5) # 80054011 <excpt+0x1>
    8001582c:	c789                	beqz	a5,80015836 <load_page_fault_5+0xc0>
    8001582e:	6498                	ld	a4,8(s1)
    80015830:	47b5                	li	a5,13
    80015832:	00f70c63          	beq	a4,a5,8001584a <load_page_fault_5+0xd4>
    80015836:	00018517          	auipc	a0,0x18
    8001583a:	b9a50513          	addi	a0,a0,-1126 # 8002d3d0 <__func__.0+0x318>
    8001583e:	618150ef          	jal	8002ae56 <printf>
    80015842:	02900513          	li	a0,41
    80015846:	2fe140ef          	jal	80029b44 <putchar>
    8001584a:	4529                	li	a0,10
    8001584c:	2f8140ef          	jal	80029b44 <putchar>
    80015850:	0003e417          	auipc	s0,0x3e
    80015854:	7c144403          	lbu	s0,1985(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015858:	00018597          	auipc	a1,0x18
    8001585c:	b3058593          	addi	a1,a1,-1232 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015860:	cc11                	beqz	s0,8001587c <load_page_fault_5+0x106>
    80015862:	6498                	ld	a4,8(s1)
    80015864:	47b5                	li	a5,13
    TEST_END();
    80015866:	00018597          	auipc	a1,0x18
    8001586a:	b1258593          	addi	a1,a1,-1262 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    8001586e:	00f70763          	beq	a4,a5,8001587c <load_page_fault_5+0x106>
    80015872:	4401                	li	s0,0
    TEST_END();
    80015874:	00018597          	auipc	a1,0x18
    80015878:	b1458593          	addi	a1,a1,-1260 # 8002d388 <__func__.0+0x2d0>
    8001587c:	00018517          	auipc	a0,0x18
    80015880:	bb450513          	addi	a0,a0,-1100 # 8002d430 <__func__.0+0x378>
    80015884:	5d2150ef          	jal	8002ae56 <printf>
    80015888:	4511                	li	a0,4
    8001588a:	e7eeb0ef          	jal	80000f08 <goto_priv>
    8001588e:	f97eb0ef          	jal	80001824 <reset_state>
}
    80015892:	60e2                	ld	ra,24(sp)
    80015894:	8522                	mv	a0,s0
    80015896:	6442                	ld	s0,16(sp)
    80015898:	64a2                	ld	s1,8(sp)
    8001589a:	6105                	addi	sp,sp,32
    8001589c:	8082                	ret

000000008001589e <load_page_fault_6>:

bool load_page_fault_6(){
    8001589e:	1141                	addi	sp,sp,-16

    TEST_START();
    800158a0:	00016597          	auipc	a1,0x16
    800158a4:	4c858593          	addi	a1,a1,1224 # 8002bd68 <__func__.16>
    800158a8:	00018517          	auipc	a0,0x18
    800158ac:	af050513          	addi	a0,a0,-1296 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_6(){
    800158b0:	e406                	sd	ra,8(sp)
    800158b2:	e022                	sd	s0,0(sp)
    TEST_START();
    800158b4:	5a2150ef          	jal	8002ae56 <printf>
    800158b8:	4529                	li	a0,10
    800158ba:	28a140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800158be:	450d                	li	a0,3
    800158c0:	e48eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800158c4:	d1dea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800158c8:	8fceb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800158cc:	eb1ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800158d0:	4511                	li	a0,4
    800158d2:	e36eb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800158d6:	000407b7          	lui	a5,0x40
    800158da:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    800158de:	4509                	li	a0,2
    800158e0:	e28eb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800158e4:	d28eb0ef          	jal	80000e0c <test_setup_except_function>
    800158e8:	000807b7          	lui	a5,0x80
    800158ec:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800158ee:	07b6                	slli	a5,a5,0xd
    800158f0:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158f4:	08200593          	li	a1,130
    800158f8:	0001d617          	auipc	a2,0x1d
    800158fc:	e0860613          	addi	a2,a2,-504 # 80032700 <__func__.0+0x5648>
    80015900:	00018517          	auipc	a0,0x18
    80015904:	ab050513          	addi	a0,a0,-1360 # 8002d3b0 <__func__.0+0x2f8>
    80015908:	54e150ef          	jal	8002ae56 <printf>
    8001590c:	0003e797          	auipc	a5,0x3e
    80015910:	7057c783          	lbu	a5,1797(a5) # 80054011 <excpt+0x1>
    80015914:	00018597          	auipc	a1,0x18
    80015918:	a6458593          	addi	a1,a1,-1436 # 8002d378 <__func__.0+0x2c0>
    8001591c:	c789                	beqz	a5,80015926 <load_page_fault_6+0x88>
    8001591e:	00018597          	auipc	a1,0x18
    80015922:	a6a58593          	addi	a1,a1,-1430 # 8002d388 <__func__.0+0x2d0>
    80015926:	00018517          	auipc	a0,0x18
    8001592a:	aa250513          	addi	a0,a0,-1374 # 8002d3c8 <__func__.0+0x310>
    8001592e:	528150ef          	jal	8002ae56 <printf>
    80015932:	0003e797          	auipc	a5,0x3e
    80015936:	6df7c783          	lbu	a5,1759(a5) # 80054011 <excpt+0x1>
    8001593a:	e7a1                	bnez	a5,80015982 <load_page_fault_6+0xe4>
    8001593c:	4529                	li	a0,10
    8001593e:	206140ef          	jal	80029b44 <putchar>
    80015942:	0003e797          	auipc	a5,0x3e
    80015946:	6cf7c783          	lbu	a5,1743(a5) # 80054011 <excpt+0x1>
    8001594a:	e795                	bnez	a5,80015976 <load_page_fault_6+0xd8>
    8001594c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001594e:	00018597          	auipc	a1,0x18
    80015952:	a2a58593          	addi	a1,a1,-1494 # 8002d378 <__func__.0+0x2c0>
    80015956:	00018517          	auipc	a0,0x18
    8001595a:	ada50513          	addi	a0,a0,-1318 # 8002d430 <__func__.0+0x378>
    8001595e:	4f8150ef          	jal	8002ae56 <printf>
    80015962:	4511                	li	a0,4
    80015964:	da4eb0ef          	jal	80000f08 <goto_priv>
    80015968:	ebdeb0ef          	jal	80001824 <reset_state>
}
    8001596c:	60a2                	ld	ra,8(sp)
    8001596e:	8522                	mv	a0,s0
    80015970:	6402                	ld	s0,0(sp)
    80015972:	0141                	addi	sp,sp,16
    80015974:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80015976:	4401                	li	s0,0
    TEST_END();
    80015978:	00018597          	auipc	a1,0x18
    8001597c:	a1058593          	addi	a1,a1,-1520 # 8002d388 <__func__.0+0x2d0>
    80015980:	bfd9                	j	80015956 <load_page_fault_6+0xb8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80015982:	00018517          	auipc	a0,0x18
    80015986:	a4e50513          	addi	a0,a0,-1458 # 8002d3d0 <__func__.0+0x318>
    8001598a:	4cc150ef          	jal	8002ae56 <printf>
    8001598e:	02900513          	li	a0,41
    80015992:	1b2140ef          	jal	80029b44 <putchar>
    80015996:	b75d                	j	8001593c <load_page_fault_6+0x9e>

0000000080015998 <load_page_fault_7>:


bool load_page_fault_7(){
    80015998:	1101                	addi	sp,sp,-32

    TEST_START();
    8001599a:	00016597          	auipc	a1,0x16
    8001599e:	3e658593          	addi	a1,a1,998 # 8002bd80 <__func__.15>
    800159a2:	00018517          	auipc	a0,0x18
    800159a6:	9f650513          	addi	a0,a0,-1546 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_7(){
    800159aa:	ec06                	sd	ra,24(sp)
    800159ac:	e822                	sd	s0,16(sp)
    800159ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800159b0:	4a6150ef          	jal	8002ae56 <printf>
    800159b4:	4529                	li	a0,10
    800159b6:	18e140ef          	jal	80029b44 <putchar>


    goto_priv(PRIV_HS);
    800159ba:	450d                	li	a0,3
    800159bc:	d4ceb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800159c0:	c21ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800159c4:	800eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800159c8:	db5ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800159cc:	4511                	li	a0,4
    800159ce:	d3aeb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800159d2:	000407b7          	lui	a5,0x40
    800159d6:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800159da:	450d                	li	a0,3
    800159dc:	d2ceb0ef          	jal	80000f08 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800159e0:	c2ceb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800159e4:	000807b7          	lui	a5,0x80
    800159e8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800159ea:	07b6                	slli	a5,a5,0xd
    800159ec:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800159f0:	08200593          	li	a1,130
    800159f4:	0001d617          	auipc	a2,0x1d
    800159f8:	d4460613          	addi	a2,a2,-700 # 80032738 <__func__.0+0x5680>
    800159fc:	00018517          	auipc	a0,0x18
    80015a00:	9b450513          	addi	a0,a0,-1612 # 8002d3b0 <__func__.0+0x2f8>
    80015a04:	452150ef          	jal	8002ae56 <printf>
    80015a08:	0003e797          	auipc	a5,0x3e
    80015a0c:	6097c783          	lbu	a5,1545(a5) # 80054011 <excpt+0x1>
    80015a10:	0003e497          	auipc	s1,0x3e
    80015a14:	60048493          	addi	s1,s1,1536 # 80054010 <excpt>
    80015a18:	00018597          	auipc	a1,0x18
    80015a1c:	97058593          	addi	a1,a1,-1680 # 8002d388 <__func__.0+0x2d0>
    80015a20:	cf89                	beqz	a5,80015a3a <load_page_fault_7+0xa2>
    80015a22:	6498                	ld	a4,8(s1)
    80015a24:	47b5                	li	a5,13
    80015a26:	00018597          	auipc	a1,0x18
    80015a2a:	95258593          	addi	a1,a1,-1710 # 8002d378 <__func__.0+0x2c0>
    80015a2e:	00f70663          	beq	a4,a5,80015a3a <load_page_fault_7+0xa2>
    80015a32:	00018597          	auipc	a1,0x18
    80015a36:	95658593          	addi	a1,a1,-1706 # 8002d388 <__func__.0+0x2d0>
    80015a3a:	00018517          	auipc	a0,0x18
    80015a3e:	98e50513          	addi	a0,a0,-1650 # 8002d3c8 <__func__.0+0x310>
    80015a42:	414150ef          	jal	8002ae56 <printf>
    80015a46:	0003e797          	auipc	a5,0x3e
    80015a4a:	5cb7c783          	lbu	a5,1483(a5) # 80054011 <excpt+0x1>
    80015a4e:	c789                	beqz	a5,80015a58 <load_page_fault_7+0xc0>
    80015a50:	6498                	ld	a4,8(s1)
    80015a52:	47b5                	li	a5,13
    80015a54:	00f70c63          	beq	a4,a5,80015a6c <load_page_fault_7+0xd4>
    80015a58:	00018517          	auipc	a0,0x18
    80015a5c:	97850513          	addi	a0,a0,-1672 # 8002d3d0 <__func__.0+0x318>
    80015a60:	3f6150ef          	jal	8002ae56 <printf>
    80015a64:	02900513          	li	a0,41
    80015a68:	0dc140ef          	jal	80029b44 <putchar>
    80015a6c:	4529                	li	a0,10
    80015a6e:	0d6140ef          	jal	80029b44 <putchar>
    80015a72:	0003e417          	auipc	s0,0x3e
    80015a76:	59f44403          	lbu	s0,1439(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015a7a:	00018597          	auipc	a1,0x18
    80015a7e:	90e58593          	addi	a1,a1,-1778 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a82:	cc11                	beqz	s0,80015a9e <load_page_fault_7+0x106>
    80015a84:	6498                	ld	a4,8(s1)
    80015a86:	47b5                	li	a5,13
    TEST_END();
    80015a88:	00018597          	auipc	a1,0x18
    80015a8c:	8f058593          	addi	a1,a1,-1808 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a90:	00f70763          	beq	a4,a5,80015a9e <load_page_fault_7+0x106>
    80015a94:	4401                	li	s0,0
    TEST_END();
    80015a96:	00018597          	auipc	a1,0x18
    80015a9a:	8f258593          	addi	a1,a1,-1806 # 8002d388 <__func__.0+0x2d0>
    80015a9e:	00018517          	auipc	a0,0x18
    80015aa2:	99250513          	addi	a0,a0,-1646 # 8002d430 <__func__.0+0x378>
    80015aa6:	3b0150ef          	jal	8002ae56 <printf>
    80015aaa:	4511                	li	a0,4
    80015aac:	c5ceb0ef          	jal	80000f08 <goto_priv>
    80015ab0:	d75eb0ef          	jal	80001824 <reset_state>
}
    80015ab4:	60e2                	ld	ra,24(sp)
    80015ab6:	8522                	mv	a0,s0
    80015ab8:	6442                	ld	s0,16(sp)
    80015aba:	64a2                	ld	s1,8(sp)
    80015abc:	6105                	addi	sp,sp,32
    80015abe:	8082                	ret

0000000080015ac0 <load_page_fault_8>:

bool load_page_fault_8(){
    80015ac0:	1141                	addi	sp,sp,-16

    TEST_START();
    80015ac2:	00016597          	auipc	a1,0x16
    80015ac6:	2d658593          	addi	a1,a1,726 # 8002bd98 <__func__.14>
    80015aca:	00018517          	auipc	a0,0x18
    80015ace:	8ce50513          	addi	a0,a0,-1842 # 8002d398 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80015ad2:	e406                	sd	ra,8(sp)
    80015ad4:	e022                	sd	s0,0(sp)
    TEST_START();
    80015ad6:	380150ef          	jal	8002ae56 <printf>
    80015ada:	4529                	li	a0,10
    80015adc:	068140ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80015ae0:	450d                	li	a0,3
    80015ae2:	c26eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015ae6:	afbea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015aea:	edbea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015aee:	c8fea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015af2:	4511                	li	a0,4
    80015af4:	c14eb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015af8:	000407b7          	lui	a5,0x40
    80015afc:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015b00:	450d                	li	a0,3
    80015b02:	c06eb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015b06:	b06eb0ef          	jal	80000e0c <test_setup_except_function>
    80015b0a:	000807b7          	lui	a5,0x80
    80015b0e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015b10:	07b6                	slli	a5,a5,0xd
    80015b12:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b16:	08200593          	li	a1,130
    80015b1a:	0001d617          	auipc	a2,0x1d
    80015b1e:	c5660613          	addi	a2,a2,-938 # 80032770 <__func__.0+0x56b8>
    80015b22:	00018517          	auipc	a0,0x18
    80015b26:	88e50513          	addi	a0,a0,-1906 # 8002d3b0 <__func__.0+0x2f8>
    80015b2a:	32c150ef          	jal	8002ae56 <printf>
    80015b2e:	0003e797          	auipc	a5,0x3e
    80015b32:	4e37c783          	lbu	a5,1251(a5) # 80054011 <excpt+0x1>
    80015b36:	00018597          	auipc	a1,0x18
    80015b3a:	84258593          	addi	a1,a1,-1982 # 8002d378 <__func__.0+0x2c0>
    80015b3e:	c789                	beqz	a5,80015b48 <load_page_fault_8+0x88>
    80015b40:	00018597          	auipc	a1,0x18
    80015b44:	84858593          	addi	a1,a1,-1976 # 8002d388 <__func__.0+0x2d0>
    80015b48:	00018517          	auipc	a0,0x18
    80015b4c:	88050513          	addi	a0,a0,-1920 # 8002d3c8 <__func__.0+0x310>
    80015b50:	306150ef          	jal	8002ae56 <printf>
    80015b54:	0003e797          	auipc	a5,0x3e
    80015b58:	4bd7c783          	lbu	a5,1213(a5) # 80054011 <excpt+0x1>
    80015b5c:	e7a1                	bnez	a5,80015ba4 <load_page_fault_8+0xe4>
    80015b5e:	4529                	li	a0,10
    80015b60:	7e5130ef          	jal	80029b44 <putchar>
    80015b64:	0003e797          	auipc	a5,0x3e
    80015b68:	4ad7c783          	lbu	a5,1197(a5) # 80054011 <excpt+0x1>
    80015b6c:	e795                	bnez	a5,80015b98 <load_page_fault_8+0xd8>
    80015b6e:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015b70:	00018597          	auipc	a1,0x18
    80015b74:	80858593          	addi	a1,a1,-2040 # 8002d378 <__func__.0+0x2c0>
    80015b78:	00018517          	auipc	a0,0x18
    80015b7c:	8b850513          	addi	a0,a0,-1864 # 8002d430 <__func__.0+0x378>
    80015b80:	2d6150ef          	jal	8002ae56 <printf>
    80015b84:	4511                	li	a0,4
    80015b86:	b82eb0ef          	jal	80000f08 <goto_priv>
    80015b8a:	c9beb0ef          	jal	80001824 <reset_state>
}
    80015b8e:	60a2                	ld	ra,8(sp)
    80015b90:	8522                	mv	a0,s0
    80015b92:	6402                	ld	s0,0(sp)
    80015b94:	0141                	addi	sp,sp,16
    80015b96:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b98:	4401                	li	s0,0
    TEST_END();
    80015b9a:	00017597          	auipc	a1,0x17
    80015b9e:	7ee58593          	addi	a1,a1,2030 # 8002d388 <__func__.0+0x2d0>
    80015ba2:	bfd9                	j	80015b78 <load_page_fault_8+0xb8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015ba4:	00018517          	auipc	a0,0x18
    80015ba8:	82c50513          	addi	a0,a0,-2004 # 8002d3d0 <__func__.0+0x318>
    80015bac:	2aa150ef          	jal	8002ae56 <printf>
    80015bb0:	02900513          	li	a0,41
    80015bb4:	791130ef          	jal	80029b44 <putchar>
    80015bb8:	b75d                	j	80015b5e <load_page_fault_8+0x9e>

0000000080015bba <store_page_fault_1>:





bool store_page_fault_1(){
    80015bba:	1101                	addi	sp,sp,-32

    TEST_START();
    80015bbc:	00016597          	auipc	a1,0x16
    80015bc0:	1f458593          	addi	a1,a1,500 # 8002bdb0 <__func__.13>
    80015bc4:	00017517          	auipc	a0,0x17
    80015bc8:	7d450513          	addi	a0,a0,2004 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80015bcc:	ec06                	sd	ra,24(sp)
    80015bce:	e822                	sd	s0,16(sp)
    80015bd0:	e426                	sd	s1,8(sp)
    TEST_START();
    80015bd2:	284150ef          	jal	8002ae56 <printf>
    80015bd6:	4529                	li	a0,10
    80015bd8:	76d130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80015bdc:	450d                	li	a0,3
    80015bde:	b2aeb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015be2:	9ffea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015be6:	ddfea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015bea:	b93ea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015bee:	450d                	li	a0,3
    80015bf0:	b18eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015bf4:	4509                	li	a0,2
    80015bf6:	a32eb0ef          	jal	80000e28 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015bfa:	a12eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015bfe:	37ab77b7          	lui	a5,0x37ab7
    80015c02:	078a                	slli	a5,a5,0x2
    80015c04:	40019737          	lui	a4,0x40019
    80015c08:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015c0c:	070a                	slli	a4,a4,0x2
    80015c0e:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80015c12:	08200593          	li	a1,130
    80015c16:	0001d617          	auipc	a2,0x1d
    80015c1a:	b9260613          	addi	a2,a2,-1134 # 800327a8 <__func__.0+0x56f0>
    80015c1e:	00017517          	auipc	a0,0x17
    80015c22:	79250513          	addi	a0,a0,1938 # 8002d3b0 <__func__.0+0x2f8>
    80015c26:	230150ef          	jal	8002ae56 <printf>
    80015c2a:	0003e797          	auipc	a5,0x3e
    80015c2e:	3e77c783          	lbu	a5,999(a5) # 80054011 <excpt+0x1>
    80015c32:	0003e497          	auipc	s1,0x3e
    80015c36:	3de48493          	addi	s1,s1,990 # 80054010 <excpt>
    80015c3a:	00017597          	auipc	a1,0x17
    80015c3e:	74e58593          	addi	a1,a1,1870 # 8002d388 <__func__.0+0x2d0>
    80015c42:	cf89                	beqz	a5,80015c5c <store_page_fault_1+0xa2>
    80015c44:	6498                	ld	a4,8(s1)
    80015c46:	47bd                	li	a5,15
    80015c48:	00017597          	auipc	a1,0x17
    80015c4c:	73058593          	addi	a1,a1,1840 # 8002d378 <__func__.0+0x2c0>
    80015c50:	00f70663          	beq	a4,a5,80015c5c <store_page_fault_1+0xa2>
    80015c54:	00017597          	auipc	a1,0x17
    80015c58:	73458593          	addi	a1,a1,1844 # 8002d388 <__func__.0+0x2d0>
    80015c5c:	00017517          	auipc	a0,0x17
    80015c60:	76c50513          	addi	a0,a0,1900 # 8002d3c8 <__func__.0+0x310>
    80015c64:	1f2150ef          	jal	8002ae56 <printf>
    80015c68:	0003e797          	auipc	a5,0x3e
    80015c6c:	3a97c783          	lbu	a5,937(a5) # 80054011 <excpt+0x1>
    80015c70:	c789                	beqz	a5,80015c7a <store_page_fault_1+0xc0>
    80015c72:	6498                	ld	a4,8(s1)
    80015c74:	47bd                	li	a5,15
    80015c76:	00f70c63          	beq	a4,a5,80015c8e <store_page_fault_1+0xd4>
    80015c7a:	00017517          	auipc	a0,0x17
    80015c7e:	75650513          	addi	a0,a0,1878 # 8002d3d0 <__func__.0+0x318>
    80015c82:	1d4150ef          	jal	8002ae56 <printf>
    80015c86:	02900513          	li	a0,41
    80015c8a:	6bb130ef          	jal	80029b44 <putchar>
    80015c8e:	4529                	li	a0,10
    80015c90:	6b5130ef          	jal	80029b44 <putchar>
    80015c94:	0003e797          	auipc	a5,0x3e
    80015c98:	37d7c783          	lbu	a5,893(a5) # 80054011 <excpt+0x1>
    80015c9c:	4401                	li	s0,0
    80015c9e:	c789                	beqz	a5,80015ca8 <store_page_fault_1+0xee>
    80015ca0:	6480                	ld	s0,8(s1)
    80015ca2:	1445                	addi	s0,s0,-15
    80015ca4:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80015ca8:	964eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015cac:	37ab77b7          	lui	a5,0x37ab7
    80015cb0:	00100737          	lui	a4,0x100
    80015cb4:	078a                	slli	a5,a5,0x2
    80015cb6:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80015cba:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cbe:	0732                	slli	a4,a4,0xc
    80015cc0:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015cc4:	08200593          	li	a1,130
    80015cc8:	0001d617          	auipc	a2,0x1d
    80015ccc:	b0860613          	addi	a2,a2,-1272 # 800327d0 <__func__.0+0x5718>
    80015cd0:	00017517          	auipc	a0,0x17
    80015cd4:	6e050513          	addi	a0,a0,1760 # 8002d3b0 <__func__.0+0x2f8>
    80015cd8:	17e150ef          	jal	8002ae56 <printf>
    80015cdc:	0003e797          	auipc	a5,0x3e
    80015ce0:	3357c783          	lbu	a5,821(a5) # 80054011 <excpt+0x1>
    80015ce4:	00017597          	auipc	a1,0x17
    80015ce8:	6a458593          	addi	a1,a1,1700 # 8002d388 <__func__.0+0x2d0>
    80015cec:	cf89                	beqz	a5,80015d06 <store_page_fault_1+0x14c>
    80015cee:	6498                	ld	a4,8(s1)
    80015cf0:	47bd                	li	a5,15
    80015cf2:	00017597          	auipc	a1,0x17
    80015cf6:	68658593          	addi	a1,a1,1670 # 8002d378 <__func__.0+0x2c0>
    80015cfa:	00f70663          	beq	a4,a5,80015d06 <store_page_fault_1+0x14c>
    80015cfe:	00017597          	auipc	a1,0x17
    80015d02:	68a58593          	addi	a1,a1,1674 # 8002d388 <__func__.0+0x2d0>
    80015d06:	00017517          	auipc	a0,0x17
    80015d0a:	6c250513          	addi	a0,a0,1730 # 8002d3c8 <__func__.0+0x310>
    80015d0e:	148150ef          	jal	8002ae56 <printf>
    80015d12:	0003e797          	auipc	a5,0x3e
    80015d16:	2ff7c783          	lbu	a5,767(a5) # 80054011 <excpt+0x1>
    80015d1a:	c789                	beqz	a5,80015d24 <store_page_fault_1+0x16a>
    80015d1c:	6498                	ld	a4,8(s1)
    80015d1e:	47bd                	li	a5,15
    80015d20:	00f70c63          	beq	a4,a5,80015d38 <store_page_fault_1+0x17e>
    80015d24:	00017517          	auipc	a0,0x17
    80015d28:	6ac50513          	addi	a0,a0,1708 # 8002d3d0 <__func__.0+0x318>
    80015d2c:	12a150ef          	jal	8002ae56 <printf>
    80015d30:	02900513          	li	a0,41
    80015d34:	611130ef          	jal	80029b44 <putchar>
    80015d38:	4529                	li	a0,10
    80015d3a:	60b130ef          	jal	80029b44 <putchar>
    80015d3e:	c419                	beqz	s0,80015d4c <store_page_fault_1+0x192>
    80015d40:	0003e797          	auipc	a5,0x3e
    80015d44:	2d17c783          	lbu	a5,721(a5) # 80054011 <excpt+0x1>
    80015d48:	4401                	li	s0,0
    80015d4a:	e7dd                	bnez	a5,80015df8 <store_page_fault_1+0x23e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80015d4c:	8c0eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015d50:	37ab77b7          	lui	a5,0x37ab7
    80015d54:	00080737          	lui	a4,0x80
    80015d58:	078a                	slli	a5,a5,0x2
    80015d5a:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80015d5c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015d60:	0736                	slli	a4,a4,0xd
    80015d62:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d66:	08200593          	li	a1,130
    80015d6a:	0001d617          	auipc	a2,0x1d
    80015d6e:	a9660613          	addi	a2,a2,-1386 # 80032800 <__func__.0+0x5748>
    80015d72:	00017517          	auipc	a0,0x17
    80015d76:	63e50513          	addi	a0,a0,1598 # 8002d3b0 <__func__.0+0x2f8>
    80015d7a:	0dc150ef          	jal	8002ae56 <printf>
    80015d7e:	0003e797          	auipc	a5,0x3e
    80015d82:	2937c783          	lbu	a5,659(a5) # 80054011 <excpt+0x1>
    80015d86:	00017597          	auipc	a1,0x17
    80015d8a:	60258593          	addi	a1,a1,1538 # 8002d388 <__func__.0+0x2d0>
    80015d8e:	e789                	bnez	a5,80015d98 <store_page_fault_1+0x1de>
    80015d90:	00017597          	auipc	a1,0x17
    80015d94:	5e858593          	addi	a1,a1,1512 # 8002d378 <__func__.0+0x2c0>
    80015d98:	00017517          	auipc	a0,0x17
    80015d9c:	63050513          	addi	a0,a0,1584 # 8002d3c8 <__func__.0+0x310>
    80015da0:	0b6150ef          	jal	8002ae56 <printf>
    80015da4:	0003e797          	auipc	a5,0x3e
    80015da8:	26d7c783          	lbu	a5,621(a5) # 80054011 <excpt+0x1>
    80015dac:	ebb9                	bnez	a5,80015e02 <store_page_fault_1+0x248>
    80015dae:	4529                	li	a0,10
    80015db0:	595130ef          	jal	80029b44 <putchar>
    80015db4:	c411                	beqz	s0,80015dc0 <store_page_fault_1+0x206>
    80015db6:	0003e797          	auipc	a5,0x3e
    80015dba:	25b7c783          	lbu	a5,603(a5) # 80054011 <excpt+0x1>
    80015dbe:	c79d                	beqz	a5,80015dec <store_page_fault_1+0x232>
    80015dc0:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015dc2:	00017597          	auipc	a1,0x17
    80015dc6:	5c658593          	addi	a1,a1,1478 # 8002d388 <__func__.0+0x2d0>
    80015dca:	00017517          	auipc	a0,0x17
    80015dce:	66650513          	addi	a0,a0,1638 # 8002d430 <__func__.0+0x378>
    80015dd2:	084150ef          	jal	8002ae56 <printf>
    80015dd6:	4511                	li	a0,4
    80015dd8:	930eb0ef          	jal	80000f08 <goto_priv>
    80015ddc:	a49eb0ef          	jal	80001824 <reset_state>
}
    80015de0:	60e2                	ld	ra,24(sp)
    80015de2:	8522                	mv	a0,s0
    80015de4:	6442                	ld	s0,16(sp)
    80015de6:	64a2                	ld	s1,8(sp)
    80015de8:	6105                	addi	sp,sp,32
    80015dea:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015dec:	4405                	li	s0,1
    TEST_END();
    80015dee:	00017597          	auipc	a1,0x17
    80015df2:	58a58593          	addi	a1,a1,1418 # 8002d378 <__func__.0+0x2c0>
    80015df6:	bfd1                	j	80015dca <store_page_fault_1+0x210>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015df8:	6480                	ld	s0,8(s1)
    80015dfa:	1445                	addi	s0,s0,-15
    80015dfc:	00143413          	seqz	s0,s0
    80015e00:	b7b1                	j	80015d4c <store_page_fault_1+0x192>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015e02:	00017517          	auipc	a0,0x17
    80015e06:	5ce50513          	addi	a0,a0,1486 # 8002d3d0 <__func__.0+0x318>
    80015e0a:	04c150ef          	jal	8002ae56 <printf>
    80015e0e:	02900513          	li	a0,41
    80015e12:	533130ef          	jal	80029b44 <putchar>
    80015e16:	bf61                	j	80015dae <store_page_fault_1+0x1f4>

0000000080015e18 <store_page_fault_2>:

bool store_page_fault_2(){
    80015e18:	1101                	addi	sp,sp,-32

    TEST_START();
    80015e1a:	00016597          	auipc	a1,0x16
    80015e1e:	fae58593          	addi	a1,a1,-82 # 8002bdc8 <__func__.12>
    80015e22:	00017517          	auipc	a0,0x17
    80015e26:	57650513          	addi	a0,a0,1398 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_2(){
    80015e2a:	ec06                	sd	ra,24(sp)
    80015e2c:	e822                	sd	s0,16(sp)
    80015e2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e30:	026150ef          	jal	8002ae56 <printf>
    80015e34:	4529                	li	a0,10
    80015e36:	50f130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80015e3a:	450d                	li	a0,3
    80015e3c:	8cceb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015e40:	fa0ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e44:	b81ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015e48:	935ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015e4c:	4511                	li	a0,4
    80015e4e:	8baeb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015e52:	000407b7          	lui	a5,0x40
    80015e56:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015e5a:	450d                	li	a0,3
    80015e5c:	8aceb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015e60:	4509                	li	a0,2
    80015e62:	fc7ea0ef          	jal	80000e28 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015e66:	fa7ea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015e6a:	37ab77b7          	lui	a5,0x37ab7
    80015e6e:	00080737          	lui	a4,0x80
    80015e72:	078a                	slli	a5,a5,0x2
    80015e74:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015e76:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015e7a:	0736                	slli	a4,a4,0xd
    80015e7c:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e80:	08200593          	li	a1,130
    80015e84:	0001d617          	auipc	a2,0x1d
    80015e88:	9a460613          	addi	a2,a2,-1628 # 80032828 <__func__.0+0x5770>
    80015e8c:	00017517          	auipc	a0,0x17
    80015e90:	52450513          	addi	a0,a0,1316 # 8002d3b0 <__func__.0+0x2f8>
    80015e94:	7c3140ef          	jal	8002ae56 <printf>
    80015e98:	0003e797          	auipc	a5,0x3e
    80015e9c:	1797c783          	lbu	a5,377(a5) # 80054011 <excpt+0x1>
    80015ea0:	0003e497          	auipc	s1,0x3e
    80015ea4:	17048493          	addi	s1,s1,368 # 80054010 <excpt>
    80015ea8:	00017597          	auipc	a1,0x17
    80015eac:	4e058593          	addi	a1,a1,1248 # 8002d388 <__func__.0+0x2d0>
    80015eb0:	cf89                	beqz	a5,80015eca <store_page_fault_2+0xb2>
    80015eb2:	6498                	ld	a4,8(s1)
    80015eb4:	47bd                	li	a5,15
    80015eb6:	00017597          	auipc	a1,0x17
    80015eba:	4c258593          	addi	a1,a1,1218 # 8002d378 <__func__.0+0x2c0>
    80015ebe:	00f70663          	beq	a4,a5,80015eca <store_page_fault_2+0xb2>
    80015ec2:	00017597          	auipc	a1,0x17
    80015ec6:	4c658593          	addi	a1,a1,1222 # 8002d388 <__func__.0+0x2d0>
    80015eca:	00017517          	auipc	a0,0x17
    80015ece:	4fe50513          	addi	a0,a0,1278 # 8002d3c8 <__func__.0+0x310>
    80015ed2:	785140ef          	jal	8002ae56 <printf>
    80015ed6:	0003e797          	auipc	a5,0x3e
    80015eda:	13b7c783          	lbu	a5,315(a5) # 80054011 <excpt+0x1>
    80015ede:	c789                	beqz	a5,80015ee8 <store_page_fault_2+0xd0>
    80015ee0:	6498                	ld	a4,8(s1)
    80015ee2:	47bd                	li	a5,15
    80015ee4:	00f70c63          	beq	a4,a5,80015efc <store_page_fault_2+0xe4>
    80015ee8:	00017517          	auipc	a0,0x17
    80015eec:	4e850513          	addi	a0,a0,1256 # 8002d3d0 <__func__.0+0x318>
    80015ef0:	767140ef          	jal	8002ae56 <printf>
    80015ef4:	02900513          	li	a0,41
    80015ef8:	44d130ef          	jal	80029b44 <putchar>
    80015efc:	4529                	li	a0,10
    80015efe:	447130ef          	jal	80029b44 <putchar>
    80015f02:	0003e417          	auipc	s0,0x3e
    80015f06:	10f44403          	lbu	s0,271(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80015f0a:	00017597          	auipc	a1,0x17
    80015f0e:	47e58593          	addi	a1,a1,1150 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015f12:	cc11                	beqz	s0,80015f2e <store_page_fault_2+0x116>
    80015f14:	6498                	ld	a4,8(s1)
    80015f16:	47bd                	li	a5,15
    TEST_END();
    80015f18:	00017597          	auipc	a1,0x17
    80015f1c:	46058593          	addi	a1,a1,1120 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015f20:	00f70763          	beq	a4,a5,80015f2e <store_page_fault_2+0x116>
    80015f24:	4401                	li	s0,0
    TEST_END();
    80015f26:	00017597          	auipc	a1,0x17
    80015f2a:	46258593          	addi	a1,a1,1122 # 8002d388 <__func__.0+0x2d0>
    80015f2e:	00017517          	auipc	a0,0x17
    80015f32:	50250513          	addi	a0,a0,1282 # 8002d430 <__func__.0+0x378>
    80015f36:	721140ef          	jal	8002ae56 <printf>
    80015f3a:	4511                	li	a0,4
    80015f3c:	fcdea0ef          	jal	80000f08 <goto_priv>
    80015f40:	8e5eb0ef          	jal	80001824 <reset_state>
}
    80015f44:	60e2                	ld	ra,24(sp)
    80015f46:	8522                	mv	a0,s0
    80015f48:	6442                	ld	s0,16(sp)
    80015f4a:	64a2                	ld	s1,8(sp)
    80015f4c:	6105                	addi	sp,sp,32
    80015f4e:	8082                	ret

0000000080015f50 <store_page_fault_3>:

bool store_page_fault_3(){
    80015f50:	1141                	addi	sp,sp,-16

    TEST_START();
    80015f52:	00016597          	auipc	a1,0x16
    80015f56:	e8e58593          	addi	a1,a1,-370 # 8002bde0 <__func__.11>
    80015f5a:	00017517          	auipc	a0,0x17
    80015f5e:	43e50513          	addi	a0,a0,1086 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80015f62:	e406                	sd	ra,8(sp)
    80015f64:	e022                	sd	s0,0(sp)
    TEST_START();
    80015f66:	6f1140ef          	jal	8002ae56 <printf>
    80015f6a:	4529                	li	a0,10
    80015f6c:	3d9130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80015f70:	450d                	li	a0,3
    80015f72:	f97ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015f76:	e6aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015f7a:	a4bea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015f7e:	ffeea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80015f82:	4511                	li	a0,4
    80015f84:	f85ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015f88:	000407b7          	lui	a5,0x40
    80015f8c:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80015f90:	450d                	li	a0,3
    80015f92:	f77ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015f96:	4509                	li	a0,2
    80015f98:	e91ea0ef          	jal	80000e28 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015f9c:	e71ea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015fa0:	37ab77b7          	lui	a5,0x37ab7
    80015fa4:	00080737          	lui	a4,0x80
    80015fa8:	078a                	slli	a5,a5,0x2
    80015faa:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015fac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015fb0:	0736                	slli	a4,a4,0xd
    80015fb2:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015fb6:	08200593          	li	a1,130
    80015fba:	0001d617          	auipc	a2,0x1d
    80015fbe:	8ae60613          	addi	a2,a2,-1874 # 80032868 <__func__.0+0x57b0>
    80015fc2:	00017517          	auipc	a0,0x17
    80015fc6:	3ee50513          	addi	a0,a0,1006 # 8002d3b0 <__func__.0+0x2f8>
    80015fca:	68d140ef          	jal	8002ae56 <printf>
    80015fce:	0003e797          	auipc	a5,0x3e
    80015fd2:	0437c783          	lbu	a5,67(a5) # 80054011 <excpt+0x1>
    80015fd6:	00017597          	auipc	a1,0x17
    80015fda:	3a258593          	addi	a1,a1,930 # 8002d378 <__func__.0+0x2c0>
    80015fde:	c789                	beqz	a5,80015fe8 <store_page_fault_3+0x98>
    80015fe0:	00017597          	auipc	a1,0x17
    80015fe4:	3a858593          	addi	a1,a1,936 # 8002d388 <__func__.0+0x2d0>
    80015fe8:	00017517          	auipc	a0,0x17
    80015fec:	3e050513          	addi	a0,a0,992 # 8002d3c8 <__func__.0+0x310>
    80015ff0:	667140ef          	jal	8002ae56 <printf>
    80015ff4:	0003e797          	auipc	a5,0x3e
    80015ff8:	01d7c783          	lbu	a5,29(a5) # 80054011 <excpt+0x1>
    80015ffc:	e7a1                	bnez	a5,80016044 <store_page_fault_3+0xf4>
    80015ffe:	4529                	li	a0,10
    80016000:	345130ef          	jal	80029b44 <putchar>
    80016004:	0003e797          	auipc	a5,0x3e
    80016008:	00d7c783          	lbu	a5,13(a5) # 80054011 <excpt+0x1>
    8001600c:	e795                	bnez	a5,80016038 <store_page_fault_3+0xe8>
    8001600e:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016010:	00017597          	auipc	a1,0x17
    80016014:	36858593          	addi	a1,a1,872 # 8002d378 <__func__.0+0x2c0>
    80016018:	00017517          	auipc	a0,0x17
    8001601c:	41850513          	addi	a0,a0,1048 # 8002d430 <__func__.0+0x378>
    80016020:	637140ef          	jal	8002ae56 <printf>
    80016024:	4511                	li	a0,4
    80016026:	ee3ea0ef          	jal	80000f08 <goto_priv>
    8001602a:	ffaeb0ef          	jal	80001824 <reset_state>
}
    8001602e:	60a2                	ld	ra,8(sp)
    80016030:	8522                	mv	a0,s0
    80016032:	6402                	ld	s0,0(sp)
    80016034:	0141                	addi	sp,sp,16
    80016036:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80016038:	4401                	li	s0,0
    TEST_END();
    8001603a:	00017597          	auipc	a1,0x17
    8001603e:	34e58593          	addi	a1,a1,846 # 8002d388 <__func__.0+0x2d0>
    80016042:	bfd9                	j	80016018 <store_page_fault_3+0xc8>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80016044:	00017517          	auipc	a0,0x17
    80016048:	38c50513          	addi	a0,a0,908 # 8002d3d0 <__func__.0+0x318>
    8001604c:	60b140ef          	jal	8002ae56 <printf>
    80016050:	02900513          	li	a0,41
    80016054:	2f1130ef          	jal	80029b44 <putchar>
    80016058:	b75d                	j	80015ffe <store_page_fault_3+0xae>

000000008001605a <store_page_fault_4>:


bool store_page_fault_4(){
    8001605a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001605c:	00016597          	auipc	a1,0x16
    80016060:	d9c58593          	addi	a1,a1,-612 # 8002bdf8 <__func__.10>
    80016064:	00017517          	auipc	a0,0x17
    80016068:	33450513          	addi	a0,a0,820 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_4(){
    8001606c:	ec06                	sd	ra,24(sp)
    8001606e:	e822                	sd	s0,16(sp)
    80016070:	e426                	sd	s1,8(sp)
    TEST_START();
    80016072:	5e5140ef          	jal	8002ae56 <printf>
    80016076:	4529                	li	a0,10
    80016078:	2cd130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001607c:	450d                	li	a0,3
    8001607e:	e8bea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016082:	d5eea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016086:	93fea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001608a:	ef2ea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001608e:	4509                	li	a0,2
    80016090:	e79ea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016094:	d79ea0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016098:	37ab77b7          	lui	a5,0x37ab7
    8001609c:	078a                	slli	a5,a5,0x2
    8001609e:	40019737          	lui	a4,0x40019
    800160a2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800160a6:	070a                	slli	a4,a4,0x2
    800160a8:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800160ac:	08200593          	li	a1,130
    800160b0:	0001c617          	auipc	a2,0x1c
    800160b4:	7f060613          	addi	a2,a2,2032 # 800328a0 <__func__.0+0x57e8>
    800160b8:	00017517          	auipc	a0,0x17
    800160bc:	2f850513          	addi	a0,a0,760 # 8002d3b0 <__func__.0+0x2f8>
    800160c0:	597140ef          	jal	8002ae56 <printf>
    800160c4:	0003e797          	auipc	a5,0x3e
    800160c8:	f4d7c783          	lbu	a5,-179(a5) # 80054011 <excpt+0x1>
    800160cc:	0003e497          	auipc	s1,0x3e
    800160d0:	f4448493          	addi	s1,s1,-188 # 80054010 <excpt>
    800160d4:	00017597          	auipc	a1,0x17
    800160d8:	2b458593          	addi	a1,a1,692 # 8002d388 <__func__.0+0x2d0>
    800160dc:	cf89                	beqz	a5,800160f6 <store_page_fault_4+0x9c>
    800160de:	6498                	ld	a4,8(s1)
    800160e0:	47bd                	li	a5,15
    800160e2:	00017597          	auipc	a1,0x17
    800160e6:	29658593          	addi	a1,a1,662 # 8002d378 <__func__.0+0x2c0>
    800160ea:	00f70663          	beq	a4,a5,800160f6 <store_page_fault_4+0x9c>
    800160ee:	00017597          	auipc	a1,0x17
    800160f2:	29a58593          	addi	a1,a1,666 # 8002d388 <__func__.0+0x2d0>
    800160f6:	00017517          	auipc	a0,0x17
    800160fa:	2d250513          	addi	a0,a0,722 # 8002d3c8 <__func__.0+0x310>
    800160fe:	559140ef          	jal	8002ae56 <printf>
    80016102:	0003e797          	auipc	a5,0x3e
    80016106:	f0f7c783          	lbu	a5,-241(a5) # 80054011 <excpt+0x1>
    8001610a:	c789                	beqz	a5,80016114 <store_page_fault_4+0xba>
    8001610c:	6498                	ld	a4,8(s1)
    8001610e:	47bd                	li	a5,15
    80016110:	00f70c63          	beq	a4,a5,80016128 <store_page_fault_4+0xce>
    80016114:	00017517          	auipc	a0,0x17
    80016118:	2bc50513          	addi	a0,a0,700 # 8002d3d0 <__func__.0+0x318>
    8001611c:	53b140ef          	jal	8002ae56 <printf>
    80016120:	02900513          	li	a0,41
    80016124:	221130ef          	jal	80029b44 <putchar>
    80016128:	4529                	li	a0,10
    8001612a:	21b130ef          	jal	80029b44 <putchar>
    8001612e:	0003e797          	auipc	a5,0x3e
    80016132:	ee37c783          	lbu	a5,-285(a5) # 80054011 <excpt+0x1>
    80016136:	4401                	li	s0,0
    80016138:	c789                	beqz	a5,80016142 <store_page_fault_4+0xe8>
    8001613a:	6480                	ld	s0,8(s1)
    8001613c:	1445                	addi	s0,s0,-15
    8001613e:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016142:	ccbea0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016146:	000807b7          	lui	a5,0x80
    8001614a:	1007b073          	csrc	sstatus,a5
    8001614e:	37ab77b7          	lui	a5,0x37ab7
    80016152:	00100737          	lui	a4,0x100
    80016156:	078a                	slli	a5,a5,0x2
    80016158:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    8001615c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016160:	0732                	slli	a4,a4,0xc
    80016162:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80016166:	08200593          	li	a1,130
    8001616a:	0001c617          	auipc	a2,0x1c
    8001616e:	75e60613          	addi	a2,a2,1886 # 800328c8 <__func__.0+0x5810>
    80016172:	00017517          	auipc	a0,0x17
    80016176:	23e50513          	addi	a0,a0,574 # 8002d3b0 <__func__.0+0x2f8>
    8001617a:	4dd140ef          	jal	8002ae56 <printf>
    8001617e:	0003e797          	auipc	a5,0x3e
    80016182:	e937c783          	lbu	a5,-365(a5) # 80054011 <excpt+0x1>
    80016186:	00017597          	auipc	a1,0x17
    8001618a:	20258593          	addi	a1,a1,514 # 8002d388 <__func__.0+0x2d0>
    8001618e:	cf89                	beqz	a5,800161a8 <store_page_fault_4+0x14e>
    80016190:	6498                	ld	a4,8(s1)
    80016192:	47bd                	li	a5,15
    80016194:	00017597          	auipc	a1,0x17
    80016198:	1e458593          	addi	a1,a1,484 # 8002d378 <__func__.0+0x2c0>
    8001619c:	00f70663          	beq	a4,a5,800161a8 <store_page_fault_4+0x14e>
    800161a0:	00017597          	auipc	a1,0x17
    800161a4:	1e858593          	addi	a1,a1,488 # 8002d388 <__func__.0+0x2d0>
    800161a8:	00017517          	auipc	a0,0x17
    800161ac:	22050513          	addi	a0,a0,544 # 8002d3c8 <__func__.0+0x310>
    800161b0:	4a7140ef          	jal	8002ae56 <printf>
    800161b4:	0003e797          	auipc	a5,0x3e
    800161b8:	e5d7c783          	lbu	a5,-419(a5) # 80054011 <excpt+0x1>
    800161bc:	c789                	beqz	a5,800161c6 <store_page_fault_4+0x16c>
    800161be:	6498                	ld	a4,8(s1)
    800161c0:	47bd                	li	a5,15
    800161c2:	00f70c63          	beq	a4,a5,800161da <store_page_fault_4+0x180>
    800161c6:	00017517          	auipc	a0,0x17
    800161ca:	20a50513          	addi	a0,a0,522 # 8002d3d0 <__func__.0+0x318>
    800161ce:	489140ef          	jal	8002ae56 <printf>
    800161d2:	02900513          	li	a0,41
    800161d6:	16f130ef          	jal	80029b44 <putchar>
    800161da:	4529                	li	a0,10
    800161dc:	169130ef          	jal	80029b44 <putchar>
    800161e0:	c419                	beqz	s0,800161ee <store_page_fault_4+0x194>
    800161e2:	0003e797          	auipc	a5,0x3e
    800161e6:	e2f7c783          	lbu	a5,-465(a5) # 80054011 <excpt+0x1>
    800161ea:	4401                	li	s0,0
    800161ec:	e7dd                	bnez	a5,8001629a <store_page_fault_4+0x240>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800161ee:	c1fea0ef          	jal	80000e0c <test_setup_except_function>
    800161f2:	37ab77b7          	lui	a5,0x37ab7
    800161f6:	00080737          	lui	a4,0x80
    800161fa:	078a                	slli	a5,a5,0x2
    800161fc:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    800161fe:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016202:	0736                	slli	a4,a4,0xd
    80016204:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016208:	08200593          	li	a1,130
    8001620c:	0001c617          	auipc	a2,0x1c
    80016210:	6e460613          	addi	a2,a2,1764 # 800328f0 <__func__.0+0x5838>
    80016214:	00017517          	auipc	a0,0x17
    80016218:	19c50513          	addi	a0,a0,412 # 8002d3b0 <__func__.0+0x2f8>
    8001621c:	43b140ef          	jal	8002ae56 <printf>
    80016220:	0003e797          	auipc	a5,0x3e
    80016224:	df17c783          	lbu	a5,-527(a5) # 80054011 <excpt+0x1>
    80016228:	00017597          	auipc	a1,0x17
    8001622c:	16058593          	addi	a1,a1,352 # 8002d388 <__func__.0+0x2d0>
    80016230:	e789                	bnez	a5,8001623a <store_page_fault_4+0x1e0>
    80016232:	00017597          	auipc	a1,0x17
    80016236:	14658593          	addi	a1,a1,326 # 8002d378 <__func__.0+0x2c0>
    8001623a:	00017517          	auipc	a0,0x17
    8001623e:	18e50513          	addi	a0,a0,398 # 8002d3c8 <__func__.0+0x310>
    80016242:	415140ef          	jal	8002ae56 <printf>
    80016246:	0003e797          	auipc	a5,0x3e
    8001624a:	dcb7c783          	lbu	a5,-565(a5) # 80054011 <excpt+0x1>
    8001624e:	ebb9                	bnez	a5,800162a4 <store_page_fault_4+0x24a>
    80016250:	4529                	li	a0,10
    80016252:	0f3130ef          	jal	80029b44 <putchar>
    80016256:	c411                	beqz	s0,80016262 <store_page_fault_4+0x208>
    80016258:	0003e797          	auipc	a5,0x3e
    8001625c:	db97c783          	lbu	a5,-583(a5) # 80054011 <excpt+0x1>
    80016260:	c79d                	beqz	a5,8001628e <store_page_fault_4+0x234>
    80016262:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016264:	00017597          	auipc	a1,0x17
    80016268:	12458593          	addi	a1,a1,292 # 8002d388 <__func__.0+0x2d0>
    8001626c:	00017517          	auipc	a0,0x17
    80016270:	1c450513          	addi	a0,a0,452 # 8002d430 <__func__.0+0x378>
    80016274:	3e3140ef          	jal	8002ae56 <printf>
    80016278:	4511                	li	a0,4
    8001627a:	c8fea0ef          	jal	80000f08 <goto_priv>
    8001627e:	da6eb0ef          	jal	80001824 <reset_state>
}
    80016282:	60e2                	ld	ra,24(sp)
    80016284:	8522                	mv	a0,s0
    80016286:	6442                	ld	s0,16(sp)
    80016288:	64a2                	ld	s1,8(sp)
    8001628a:	6105                	addi	sp,sp,32
    8001628c:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    8001628e:	4405                	li	s0,1
    TEST_END();
    80016290:	00017597          	auipc	a1,0x17
    80016294:	0e858593          	addi	a1,a1,232 # 8002d378 <__func__.0+0x2c0>
    80016298:	bfd1                	j	8001626c <store_page_fault_4+0x212>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    8001629a:	6480                	ld	s0,8(s1)
    8001629c:	1445                	addi	s0,s0,-15
    8001629e:	00143413          	seqz	s0,s0
    800162a2:	b7b1                	j	800161ee <store_page_fault_4+0x194>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800162a4:	00017517          	auipc	a0,0x17
    800162a8:	12c50513          	addi	a0,a0,300 # 8002d3d0 <__func__.0+0x318>
    800162ac:	3ab140ef          	jal	8002ae56 <printf>
    800162b0:	02900513          	li	a0,41
    800162b4:	091130ef          	jal	80029b44 <putchar>
    800162b8:	bf61                	j	80016250 <store_page_fault_4+0x1f6>

00000000800162ba <store_page_fault_5>:

bool store_page_fault_5(){
    800162ba:	1101                	addi	sp,sp,-32

    TEST_START();
    800162bc:	00016597          	auipc	a1,0x16
    800162c0:	b5458593          	addi	a1,a1,-1196 # 8002be10 <__func__.9>
    800162c4:	00017517          	auipc	a0,0x17
    800162c8:	0d450513          	addi	a0,a0,212 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_5(){
    800162cc:	ec06                	sd	ra,24(sp)
    800162ce:	e822                	sd	s0,16(sp)
    800162d0:	e426                	sd	s1,8(sp)
    TEST_START();
    800162d2:	385140ef          	jal	8002ae56 <printf>
    800162d6:	4529                	li	a0,10
    800162d8:	06d130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800162dc:	450d                	li	a0,3
    800162de:	c2bea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800162e2:	afeea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800162e6:	edeea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800162ea:	c92ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800162ee:	4511                	li	a0,4
    800162f0:	c19ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800162f4:	000407b7          	lui	a5,0x40
    800162f8:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800162fc:	4509                	li	a0,2
    800162fe:	c0bea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016302:	b0bea0ef          	jal	80000e0c <test_setup_except_function>
    80016306:	37ab77b7          	lui	a5,0x37ab7
    8001630a:	00080737          	lui	a4,0x80
    8001630e:	078a                	slli	a5,a5,0x2
    80016310:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016312:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016316:	0736                	slli	a4,a4,0xd
    80016318:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    8001631c:	08200593          	li	a1,130
    80016320:	0001c617          	auipc	a2,0x1c
    80016324:	5f860613          	addi	a2,a2,1528 # 80032918 <__func__.0+0x5860>
    80016328:	00017517          	auipc	a0,0x17
    8001632c:	08850513          	addi	a0,a0,136 # 8002d3b0 <__func__.0+0x2f8>
    80016330:	327140ef          	jal	8002ae56 <printf>
    80016334:	0003e797          	auipc	a5,0x3e
    80016338:	cdd7c783          	lbu	a5,-803(a5) # 80054011 <excpt+0x1>
    8001633c:	0003e497          	auipc	s1,0x3e
    80016340:	cd448493          	addi	s1,s1,-812 # 80054010 <excpt>
    80016344:	00017597          	auipc	a1,0x17
    80016348:	04458593          	addi	a1,a1,68 # 8002d388 <__func__.0+0x2d0>
    8001634c:	cf89                	beqz	a5,80016366 <store_page_fault_5+0xac>
    8001634e:	6498                	ld	a4,8(s1)
    80016350:	47bd                	li	a5,15
    80016352:	00017597          	auipc	a1,0x17
    80016356:	02658593          	addi	a1,a1,38 # 8002d378 <__func__.0+0x2c0>
    8001635a:	00f70663          	beq	a4,a5,80016366 <store_page_fault_5+0xac>
    8001635e:	00017597          	auipc	a1,0x17
    80016362:	02a58593          	addi	a1,a1,42 # 8002d388 <__func__.0+0x2d0>
    80016366:	00017517          	auipc	a0,0x17
    8001636a:	06250513          	addi	a0,a0,98 # 8002d3c8 <__func__.0+0x310>
    8001636e:	2e9140ef          	jal	8002ae56 <printf>
    80016372:	0003e797          	auipc	a5,0x3e
    80016376:	c9f7c783          	lbu	a5,-865(a5) # 80054011 <excpt+0x1>
    8001637a:	c789                	beqz	a5,80016384 <store_page_fault_5+0xca>
    8001637c:	6498                	ld	a4,8(s1)
    8001637e:	47bd                	li	a5,15
    80016380:	00f70c63          	beq	a4,a5,80016398 <store_page_fault_5+0xde>
    80016384:	00017517          	auipc	a0,0x17
    80016388:	04c50513          	addi	a0,a0,76 # 8002d3d0 <__func__.0+0x318>
    8001638c:	2cb140ef          	jal	8002ae56 <printf>
    80016390:	02900513          	li	a0,41
    80016394:	7b0130ef          	jal	80029b44 <putchar>
    80016398:	4529                	li	a0,10
    8001639a:	7aa130ef          	jal	80029b44 <putchar>
    8001639e:	0003e417          	auipc	s0,0x3e
    800163a2:	c7344403          	lbu	s0,-909(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800163a6:	00017597          	auipc	a1,0x17
    800163aa:	fe258593          	addi	a1,a1,-30 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800163ae:	cc11                	beqz	s0,800163ca <store_page_fault_5+0x110>
    800163b0:	6498                	ld	a4,8(s1)
    800163b2:	47bd                	li	a5,15
    TEST_END();
    800163b4:	00017597          	auipc	a1,0x17
    800163b8:	fc458593          	addi	a1,a1,-60 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800163bc:	00f70763          	beq	a4,a5,800163ca <store_page_fault_5+0x110>
    800163c0:	4401                	li	s0,0
    TEST_END();
    800163c2:	00017597          	auipc	a1,0x17
    800163c6:	fc658593          	addi	a1,a1,-58 # 8002d388 <__func__.0+0x2d0>
    800163ca:	00017517          	auipc	a0,0x17
    800163ce:	06650513          	addi	a0,a0,102 # 8002d430 <__func__.0+0x378>
    800163d2:	285140ef          	jal	8002ae56 <printf>
    800163d6:	4511                	li	a0,4
    800163d8:	b31ea0ef          	jal	80000f08 <goto_priv>
    800163dc:	c48eb0ef          	jal	80001824 <reset_state>
}
    800163e0:	60e2                	ld	ra,24(sp)
    800163e2:	8522                	mv	a0,s0
    800163e4:	6442                	ld	s0,16(sp)
    800163e6:	64a2                	ld	s1,8(sp)
    800163e8:	6105                	addi	sp,sp,32
    800163ea:	8082                	ret

00000000800163ec <store_page_fault_6>:

bool store_page_fault_6(){
    800163ec:	1141                	addi	sp,sp,-16

    TEST_START();
    800163ee:	00016597          	auipc	a1,0x16
    800163f2:	a3a58593          	addi	a1,a1,-1478 # 8002be28 <__func__.8>
    800163f6:	00017517          	auipc	a0,0x17
    800163fa:	fa250513          	addi	a0,a0,-94 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_6(){
    800163fe:	e406                	sd	ra,8(sp)
    80016400:	e022                	sd	s0,0(sp)
    TEST_START();
    80016402:	255140ef          	jal	8002ae56 <printf>
    80016406:	4529                	li	a0,10
    80016408:	73c130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001640c:	450d                	li	a0,3
    8001640e:	afbea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016412:	9ceea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016416:	daeea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001641a:	b62ea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001641e:	4511                	li	a0,4
    80016420:	ae9ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016424:	000407b7          	lui	a5,0x40
    80016428:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8001642c:	4509                	li	a0,2
    8001642e:	adbea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016432:	9dbea0ef          	jal	80000e0c <test_setup_except_function>
    80016436:	37ab77b7          	lui	a5,0x37ab7
    8001643a:	00080737          	lui	a4,0x80
    8001643e:	078a                	slli	a5,a5,0x2
    80016440:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016442:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016446:	0736                	slli	a4,a4,0xd
    80016448:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001644c:	08200593          	li	a1,130
    80016450:	0001c617          	auipc	a2,0x1c
    80016454:	50060613          	addi	a2,a2,1280 # 80032950 <__func__.0+0x5898>
    80016458:	00017517          	auipc	a0,0x17
    8001645c:	f5850513          	addi	a0,a0,-168 # 8002d3b0 <__func__.0+0x2f8>
    80016460:	1f7140ef          	jal	8002ae56 <printf>
    80016464:	0003e797          	auipc	a5,0x3e
    80016468:	bad7c783          	lbu	a5,-1107(a5) # 80054011 <excpt+0x1>
    8001646c:	00017597          	auipc	a1,0x17
    80016470:	f0c58593          	addi	a1,a1,-244 # 8002d378 <__func__.0+0x2c0>
    80016474:	c789                	beqz	a5,8001647e <store_page_fault_6+0x92>
    80016476:	00017597          	auipc	a1,0x17
    8001647a:	f1258593          	addi	a1,a1,-238 # 8002d388 <__func__.0+0x2d0>
    8001647e:	00017517          	auipc	a0,0x17
    80016482:	f4a50513          	addi	a0,a0,-182 # 8002d3c8 <__func__.0+0x310>
    80016486:	1d1140ef          	jal	8002ae56 <printf>
    8001648a:	0003e797          	auipc	a5,0x3e
    8001648e:	b877c783          	lbu	a5,-1145(a5) # 80054011 <excpt+0x1>
    80016492:	e7a1                	bnez	a5,800164da <store_page_fault_6+0xee>
    80016494:	4529                	li	a0,10
    80016496:	6ae130ef          	jal	80029b44 <putchar>
    8001649a:	0003e797          	auipc	a5,0x3e
    8001649e:	b777c783          	lbu	a5,-1161(a5) # 80054011 <excpt+0x1>
    800164a2:	e795                	bnez	a5,800164ce <store_page_fault_6+0xe2>
    800164a4:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800164a6:	00017597          	auipc	a1,0x17
    800164aa:	ed258593          	addi	a1,a1,-302 # 8002d378 <__func__.0+0x2c0>
    800164ae:	00017517          	auipc	a0,0x17
    800164b2:	f8250513          	addi	a0,a0,-126 # 8002d430 <__func__.0+0x378>
    800164b6:	1a1140ef          	jal	8002ae56 <printf>
    800164ba:	4511                	li	a0,4
    800164bc:	a4dea0ef          	jal	80000f08 <goto_priv>
    800164c0:	b64eb0ef          	jal	80001824 <reset_state>
}
    800164c4:	60a2                	ld	ra,8(sp)
    800164c6:	8522                	mv	a0,s0
    800164c8:	6402                	ld	s0,0(sp)
    800164ca:	0141                	addi	sp,sp,16
    800164cc:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800164ce:	4401                	li	s0,0
    TEST_END();
    800164d0:	00017597          	auipc	a1,0x17
    800164d4:	eb858593          	addi	a1,a1,-328 # 8002d388 <__func__.0+0x2d0>
    800164d8:	bfd9                	j	800164ae <store_page_fault_6+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800164da:	00017517          	auipc	a0,0x17
    800164de:	ef650513          	addi	a0,a0,-266 # 8002d3d0 <__func__.0+0x318>
    800164e2:	175140ef          	jal	8002ae56 <printf>
    800164e6:	02900513          	li	a0,41
    800164ea:	65a130ef          	jal	80029b44 <putchar>
    800164ee:	b75d                	j	80016494 <store_page_fault_6+0xa8>

00000000800164f0 <store_page_fault_7>:

bool store_page_fault_7(){
    800164f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800164f2:	00016597          	auipc	a1,0x16
    800164f6:	94e58593          	addi	a1,a1,-1714 # 8002be40 <__func__.7>
    800164fa:	00017517          	auipc	a0,0x17
    800164fe:	e9e50513          	addi	a0,a0,-354 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_7(){
    80016502:	ec06                	sd	ra,24(sp)
    80016504:	e822                	sd	s0,16(sp)
    80016506:	e426                	sd	s1,8(sp)
    TEST_START();
    80016508:	14f140ef          	jal	8002ae56 <printf>
    8001650c:	4529                	li	a0,10
    8001650e:	636130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016512:	450d                	li	a0,3
    80016514:	9f5ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016518:	8c8ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001651c:	ca8ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016520:	a5cea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016524:	4511                	li	a0,4
    80016526:	9e3ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001652a:	000407b7          	lui	a5,0x40
    8001652e:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016532:	450d                	li	a0,3
    80016534:	9d5ea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016538:	8d5ea0ef          	jal	80000e0c <test_setup_except_function>
    8001653c:	37ab77b7          	lui	a5,0x37ab7
    80016540:	00080737          	lui	a4,0x80
    80016544:	078a                	slli	a5,a5,0x2
    80016546:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016548:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001654c:	0736                	slli	a4,a4,0xd
    8001654e:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80016552:	08200593          	li	a1,130
    80016556:	0001c617          	auipc	a2,0x1c
    8001655a:	43260613          	addi	a2,a2,1074 # 80032988 <__func__.0+0x58d0>
    8001655e:	00017517          	auipc	a0,0x17
    80016562:	e5250513          	addi	a0,a0,-430 # 8002d3b0 <__func__.0+0x2f8>
    80016566:	0f1140ef          	jal	8002ae56 <printf>
    8001656a:	0003e797          	auipc	a5,0x3e
    8001656e:	aa77c783          	lbu	a5,-1369(a5) # 80054011 <excpt+0x1>
    80016572:	0003e497          	auipc	s1,0x3e
    80016576:	a9e48493          	addi	s1,s1,-1378 # 80054010 <excpt>
    8001657a:	00017597          	auipc	a1,0x17
    8001657e:	e0e58593          	addi	a1,a1,-498 # 8002d388 <__func__.0+0x2d0>
    80016582:	cf89                	beqz	a5,8001659c <store_page_fault_7+0xac>
    80016584:	6498                	ld	a4,8(s1)
    80016586:	47bd                	li	a5,15
    80016588:	00017597          	auipc	a1,0x17
    8001658c:	df058593          	addi	a1,a1,-528 # 8002d378 <__func__.0+0x2c0>
    80016590:	00f70663          	beq	a4,a5,8001659c <store_page_fault_7+0xac>
    80016594:	00017597          	auipc	a1,0x17
    80016598:	df458593          	addi	a1,a1,-524 # 8002d388 <__func__.0+0x2d0>
    8001659c:	00017517          	auipc	a0,0x17
    800165a0:	e2c50513          	addi	a0,a0,-468 # 8002d3c8 <__func__.0+0x310>
    800165a4:	0b3140ef          	jal	8002ae56 <printf>
    800165a8:	0003e797          	auipc	a5,0x3e
    800165ac:	a697c783          	lbu	a5,-1431(a5) # 80054011 <excpt+0x1>
    800165b0:	c789                	beqz	a5,800165ba <store_page_fault_7+0xca>
    800165b2:	6498                	ld	a4,8(s1)
    800165b4:	47bd                	li	a5,15
    800165b6:	00f70c63          	beq	a4,a5,800165ce <store_page_fault_7+0xde>
    800165ba:	00017517          	auipc	a0,0x17
    800165be:	e1650513          	addi	a0,a0,-490 # 8002d3d0 <__func__.0+0x318>
    800165c2:	095140ef          	jal	8002ae56 <printf>
    800165c6:	02900513          	li	a0,41
    800165ca:	57a130ef          	jal	80029b44 <putchar>
    800165ce:	4529                	li	a0,10
    800165d0:	574130ef          	jal	80029b44 <putchar>
    800165d4:	0003e417          	auipc	s0,0x3e
    800165d8:	a3d44403          	lbu	s0,-1475(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800165dc:	00017597          	auipc	a1,0x17
    800165e0:	dac58593          	addi	a1,a1,-596 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800165e4:	cc11                	beqz	s0,80016600 <store_page_fault_7+0x110>
    800165e6:	6498                	ld	a4,8(s1)
    800165e8:	47bd                	li	a5,15
    TEST_END();
    800165ea:	00017597          	auipc	a1,0x17
    800165ee:	d8e58593          	addi	a1,a1,-626 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800165f2:	00f70763          	beq	a4,a5,80016600 <store_page_fault_7+0x110>
    800165f6:	4401                	li	s0,0
    TEST_END();
    800165f8:	00017597          	auipc	a1,0x17
    800165fc:	d9058593          	addi	a1,a1,-624 # 8002d388 <__func__.0+0x2d0>
    80016600:	00017517          	auipc	a0,0x17
    80016604:	e3050513          	addi	a0,a0,-464 # 8002d430 <__func__.0+0x378>
    80016608:	04f140ef          	jal	8002ae56 <printf>
    8001660c:	4511                	li	a0,4
    8001660e:	8fbea0ef          	jal	80000f08 <goto_priv>
    80016612:	a12eb0ef          	jal	80001824 <reset_state>
}
    80016616:	60e2                	ld	ra,24(sp)
    80016618:	8522                	mv	a0,s0
    8001661a:	6442                	ld	s0,16(sp)
    8001661c:	64a2                	ld	s1,8(sp)
    8001661e:	6105                	addi	sp,sp,32
    80016620:	8082                	ret

0000000080016622 <store_page_fault_8>:

bool store_page_fault_8(){
    80016622:	1141                	addi	sp,sp,-16

    TEST_START();
    80016624:	00016597          	auipc	a1,0x16
    80016628:	83458593          	addi	a1,a1,-1996 # 8002be58 <__func__.6>
    8001662c:	00017517          	auipc	a0,0x17
    80016630:	d6c50513          	addi	a0,a0,-660 # 8002d398 <__func__.0+0x2e0>
bool store_page_fault_8(){
    80016634:	e406                	sd	ra,8(sp)
    80016636:	e022                	sd	s0,0(sp)
    TEST_START();
    80016638:	01f140ef          	jal	8002ae56 <printf>
    8001663c:	4529                	li	a0,10
    8001663e:	506130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016642:	450d                	li	a0,3
    80016644:	8c5ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016648:	f99e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001664c:	b78ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016650:	92cea0ef          	jal	8000077c <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016654:	4511                	li	a0,4
    80016656:	8b3ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    8001665a:	000407b7          	lui	a5,0x40
    8001665e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80016662:	450d                	li	a0,3
    80016664:	8a5ea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016668:	fa4ea0ef          	jal	80000e0c <test_setup_except_function>
    8001666c:	37ab77b7          	lui	a5,0x37ab7
    80016670:	00080737          	lui	a4,0x80
    80016674:	078a                	slli	a5,a5,0x2
    80016676:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016678:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001667c:	0736                	slli	a4,a4,0xd
    8001667e:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016682:	08200593          	li	a1,130
    80016686:	0001c617          	auipc	a2,0x1c
    8001668a:	33a60613          	addi	a2,a2,826 # 800329c0 <__func__.0+0x5908>
    8001668e:	00017517          	auipc	a0,0x17
    80016692:	d2250513          	addi	a0,a0,-734 # 8002d3b0 <__func__.0+0x2f8>
    80016696:	7c0140ef          	jal	8002ae56 <printf>
    8001669a:	0003e797          	auipc	a5,0x3e
    8001669e:	9777c783          	lbu	a5,-1673(a5) # 80054011 <excpt+0x1>
    800166a2:	00017597          	auipc	a1,0x17
    800166a6:	cd658593          	addi	a1,a1,-810 # 8002d378 <__func__.0+0x2c0>
    800166aa:	c789                	beqz	a5,800166b4 <store_page_fault_8+0x92>
    800166ac:	00017597          	auipc	a1,0x17
    800166b0:	cdc58593          	addi	a1,a1,-804 # 8002d388 <__func__.0+0x2d0>
    800166b4:	00017517          	auipc	a0,0x17
    800166b8:	d1450513          	addi	a0,a0,-748 # 8002d3c8 <__func__.0+0x310>
    800166bc:	79a140ef          	jal	8002ae56 <printf>
    800166c0:	0003e797          	auipc	a5,0x3e
    800166c4:	9517c783          	lbu	a5,-1711(a5) # 80054011 <excpt+0x1>
    800166c8:	e7a1                	bnez	a5,80016710 <store_page_fault_8+0xee>
    800166ca:	4529                	li	a0,10
    800166cc:	478130ef          	jal	80029b44 <putchar>
    800166d0:	0003e797          	auipc	a5,0x3e
    800166d4:	9417c783          	lbu	a5,-1727(a5) # 80054011 <excpt+0x1>
    800166d8:	e795                	bnez	a5,80016704 <store_page_fault_8+0xe2>
    800166da:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800166dc:	00017597          	auipc	a1,0x17
    800166e0:	c9c58593          	addi	a1,a1,-868 # 8002d378 <__func__.0+0x2c0>
    800166e4:	00017517          	auipc	a0,0x17
    800166e8:	d4c50513          	addi	a0,a0,-692 # 8002d430 <__func__.0+0x378>
    800166ec:	76a140ef          	jal	8002ae56 <printf>
    800166f0:	4511                	li	a0,4
    800166f2:	817ea0ef          	jal	80000f08 <goto_priv>
    800166f6:	92eeb0ef          	jal	80001824 <reset_state>
}
    800166fa:	60a2                	ld	ra,8(sp)
    800166fc:	8522                	mv	a0,s0
    800166fe:	6402                	ld	s0,0(sp)
    80016700:	0141                	addi	sp,sp,16
    80016702:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016704:	4401                	li	s0,0
    TEST_END();
    80016706:	00017597          	auipc	a1,0x17
    8001670a:	c8258593          	addi	a1,a1,-894 # 8002d388 <__func__.0+0x2d0>
    8001670e:	bfd9                	j	800166e4 <store_page_fault_8+0xc2>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016710:	00017517          	auipc	a0,0x17
    80016714:	cc050513          	addi	a0,a0,-832 # 8002d3d0 <__func__.0+0x318>
    80016718:	73e140ef          	jal	8002ae56 <printf>
    8001671c:	02900513          	li	a0,41
    80016720:	424130ef          	jal	80029b44 <putchar>
    80016724:	b75d                	j	800166ca <store_page_fault_8+0xa8>

0000000080016726 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80016726:	1101                	addi	sp,sp,-32

    TEST_START();
    80016728:	00015597          	auipc	a1,0x15
    8001672c:	74858593          	addi	a1,a1,1864 # 8002be70 <__func__.5>
    80016730:	00017517          	auipc	a0,0x17
    80016734:	c6850513          	addi	a0,a0,-920 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    80016738:	ec06                	sd	ra,24(sp)
    8001673a:	e822                	sd	s0,16(sp)
    8001673c:	e426                	sd	s1,8(sp)
    8001673e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016740:	716140ef          	jal	8002ae56 <printf>
    80016744:	4529                	li	a0,10
    80016746:	3fe130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001674a:	450d                	li	a0,3
    8001674c:	fbcea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016750:	e91e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016754:	a70ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016758:	824ea0ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    8001675c:	450d                	li	a0,3
    8001675e:	faaea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016762:	4509                	li	a0,2
    80016764:	ec4ea0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016768:	ea4ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001676c:	deadc7b7          	lui	a5,0xdeadc
    80016770:	40019737          	lui	a4,0x40019
    80016774:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016778:	070a                	slli	a4,a4,0x2
    8001677a:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001677e:	08200593          	li	a1,130
    80016782:	0001c617          	auipc	a2,0x1c
    80016786:	27660613          	addi	a2,a2,630 # 800329f8 <__func__.0+0x5940>
    8001678a:	00017517          	auipc	a0,0x17
    8001678e:	c2650513          	addi	a0,a0,-986 # 8002d3b0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80016792:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016796:	6c0140ef          	jal	8002ae56 <printf>
    8001679a:	0003e797          	auipc	a5,0x3e
    8001679e:	8777c783          	lbu	a5,-1929(a5) # 80054011 <excpt+0x1>
    value = amoadd_w(addr,value);
    800167a2:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800167a4:	0003e917          	auipc	s2,0x3e
    800167a8:	86c90913          	addi	s2,s2,-1940 # 80054010 <excpt>
    800167ac:	00017597          	auipc	a1,0x17
    800167b0:	bdc58593          	addi	a1,a1,-1060 # 8002d388 <__func__.0+0x2d0>
    800167b4:	cf91                	beqz	a5,800167d0 <amo_page_fault_1+0xaa>
    800167b6:	00893703          	ld	a4,8(s2)
    800167ba:	47bd                	li	a5,15
    800167bc:	00017597          	auipc	a1,0x17
    800167c0:	bbc58593          	addi	a1,a1,-1092 # 8002d378 <__func__.0+0x2c0>
    800167c4:	00f70663          	beq	a4,a5,800167d0 <amo_page_fault_1+0xaa>
    800167c8:	00017597          	auipc	a1,0x17
    800167cc:	bc058593          	addi	a1,a1,-1088 # 8002d388 <__func__.0+0x2d0>
    800167d0:	00017517          	auipc	a0,0x17
    800167d4:	bf850513          	addi	a0,a0,-1032 # 8002d3c8 <__func__.0+0x310>
    800167d8:	67e140ef          	jal	8002ae56 <printf>
    800167dc:	0003e797          	auipc	a5,0x3e
    800167e0:	8357c783          	lbu	a5,-1995(a5) # 80054011 <excpt+0x1>
    800167e4:	c791                	beqz	a5,800167f0 <amo_page_fault_1+0xca>
    800167e6:	00893703          	ld	a4,8(s2)
    800167ea:	47bd                	li	a5,15
    800167ec:	00f70c63          	beq	a4,a5,80016804 <amo_page_fault_1+0xde>
    800167f0:	00017517          	auipc	a0,0x17
    800167f4:	be050513          	addi	a0,a0,-1056 # 8002d3d0 <__func__.0+0x318>
    800167f8:	65e140ef          	jal	8002ae56 <printf>
    800167fc:	02900513          	li	a0,41
    80016800:	344130ef          	jal	80029b44 <putchar>
    80016804:	4529                	li	a0,10
    80016806:	33e130ef          	jal	80029b44 <putchar>
    8001680a:	0003e797          	auipc	a5,0x3e
    8001680e:	8077c783          	lbu	a5,-2041(a5) # 80054011 <excpt+0x1>
    80016812:	4481                	li	s1,0
    80016814:	c791                	beqz	a5,80016820 <amo_page_fault_1+0xfa>
    80016816:	00893483          	ld	s1,8(s2)
    8001681a:	14c5                	addi	s1,s1,-15
    8001681c:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016820:	decea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016824:	001007b7          	lui	a5,0x100
    80016828:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    8001682c:	07b2                	slli	a5,a5,0xc
    8001682e:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80016832:	08200593          	li	a1,130
    80016836:	0001c617          	auipc	a2,0x1c
    8001683a:	1fa60613          	addi	a2,a2,506 # 80032a30 <__func__.0+0x5978>
    8001683e:	00017517          	auipc	a0,0x17
    80016842:	b7250513          	addi	a0,a0,-1166 # 8002d3b0 <__func__.0+0x2f8>
    80016846:	610140ef          	jal	8002ae56 <printf>
    8001684a:	0003d797          	auipc	a5,0x3d
    8001684e:	7c77c783          	lbu	a5,1991(a5) # 80054011 <excpt+0x1>
    80016852:	00017597          	auipc	a1,0x17
    80016856:	b3658593          	addi	a1,a1,-1226 # 8002d388 <__func__.0+0x2d0>
    8001685a:	cf91                	beqz	a5,80016876 <amo_page_fault_1+0x150>
    8001685c:	00893703          	ld	a4,8(s2)
    80016860:	47bd                	li	a5,15
    80016862:	00017597          	auipc	a1,0x17
    80016866:	b1658593          	addi	a1,a1,-1258 # 8002d378 <__func__.0+0x2c0>
    8001686a:	00f70663          	beq	a4,a5,80016876 <amo_page_fault_1+0x150>
    8001686e:	00017597          	auipc	a1,0x17
    80016872:	b1a58593          	addi	a1,a1,-1254 # 8002d388 <__func__.0+0x2d0>
    80016876:	00017517          	auipc	a0,0x17
    8001687a:	b5250513          	addi	a0,a0,-1198 # 8002d3c8 <__func__.0+0x310>
    8001687e:	5d8140ef          	jal	8002ae56 <printf>
    80016882:	0003d797          	auipc	a5,0x3d
    80016886:	78f7c783          	lbu	a5,1935(a5) # 80054011 <excpt+0x1>
    8001688a:	c791                	beqz	a5,80016896 <amo_page_fault_1+0x170>
    8001688c:	00893703          	ld	a4,8(s2)
    80016890:	47bd                	li	a5,15
    80016892:	00f70c63          	beq	a4,a5,800168aa <amo_page_fault_1+0x184>
    80016896:	00017517          	auipc	a0,0x17
    8001689a:	b3a50513          	addi	a0,a0,-1222 # 8002d3d0 <__func__.0+0x318>
    8001689e:	5b8140ef          	jal	8002ae56 <printf>
    800168a2:	02900513          	li	a0,41
    800168a6:	29e130ef          	jal	80029b44 <putchar>
    800168aa:	4529                	li	a0,10
    800168ac:	298130ef          	jal	80029b44 <putchar>
    800168b0:	c499                	beqz	s1,800168be <amo_page_fault_1+0x198>
    800168b2:	0003d797          	auipc	a5,0x3d
    800168b6:	75f7c783          	lbu	a5,1887(a5) # 80054011 <excpt+0x1>
    800168ba:	4481                	li	s1,0
    800168bc:	e3cd                	bnez	a5,8001695e <amo_page_fault_1+0x238>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800168be:	d4eea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800168c2:	4785                	li	a5,1
    800168c4:	1782                	slli	a5,a5,0x20
    800168c6:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168ca:	08200593          	li	a1,130
    800168ce:	0001c617          	auipc	a2,0x1c
    800168d2:	19a60613          	addi	a2,a2,410 # 80032a68 <__func__.0+0x59b0>
    800168d6:	00017517          	auipc	a0,0x17
    800168da:	ada50513          	addi	a0,a0,-1318 # 8002d3b0 <__func__.0+0x2f8>
    800168de:	578140ef          	jal	8002ae56 <printf>
    800168e2:	0003d797          	auipc	a5,0x3d
    800168e6:	72f7c783          	lbu	a5,1839(a5) # 80054011 <excpt+0x1>
    800168ea:	00017597          	auipc	a1,0x17
    800168ee:	a9e58593          	addi	a1,a1,-1378 # 8002d388 <__func__.0+0x2d0>
    800168f2:	e789                	bnez	a5,800168fc <amo_page_fault_1+0x1d6>
    800168f4:	00017597          	auipc	a1,0x17
    800168f8:	a8458593          	addi	a1,a1,-1404 # 8002d378 <__func__.0+0x2c0>
    800168fc:	00017517          	auipc	a0,0x17
    80016900:	acc50513          	addi	a0,a0,-1332 # 8002d3c8 <__func__.0+0x310>
    80016904:	552140ef          	jal	8002ae56 <printf>
    80016908:	0003d797          	auipc	a5,0x3d
    8001690c:	7097c783          	lbu	a5,1801(a5) # 80054011 <excpt+0x1>
    80016910:	efa9                	bnez	a5,8001696a <amo_page_fault_1+0x244>
    80016912:	4529                	li	a0,10
    80016914:	230130ef          	jal	80029b44 <putchar>
    80016918:	c491                	beqz	s1,80016924 <amo_page_fault_1+0x1fe>
    8001691a:	0003d797          	auipc	a5,0x3d
    8001691e:	6f77c783          	lbu	a5,1783(a5) # 80054011 <excpt+0x1>
    80016922:	cb85                	beqz	a5,80016952 <amo_page_fault_1+0x22c>
    80016924:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016926:	00017597          	auipc	a1,0x17
    8001692a:	a6258593          	addi	a1,a1,-1438 # 8002d388 <__func__.0+0x2d0>
    8001692e:	00017517          	auipc	a0,0x17
    80016932:	b0250513          	addi	a0,a0,-1278 # 8002d430 <__func__.0+0x378>
    80016936:	520140ef          	jal	8002ae56 <printf>
    8001693a:	4511                	li	a0,4
    8001693c:	dccea0ef          	jal	80000f08 <goto_priv>
    80016940:	ee5ea0ef          	jal	80001824 <reset_state>
}
    80016944:	60e2                	ld	ra,24(sp)
    80016946:	8522                	mv	a0,s0
    80016948:	6442                	ld	s0,16(sp)
    8001694a:	64a2                	ld	s1,8(sp)
    8001694c:	6902                	ld	s2,0(sp)
    8001694e:	6105                	addi	sp,sp,32
    80016950:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016952:	4405                	li	s0,1
    TEST_END();
    80016954:	00017597          	auipc	a1,0x17
    80016958:	a2458593          	addi	a1,a1,-1500 # 8002d378 <__func__.0+0x2c0>
    8001695c:	bfc9                	j	8001692e <amo_page_fault_1+0x208>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    8001695e:	00893483          	ld	s1,8(s2)
    80016962:	14c5                	addi	s1,s1,-15
    80016964:	0014b493          	seqz	s1,s1
    80016968:	bf99                	j	800168be <amo_page_fault_1+0x198>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    8001696a:	00017517          	auipc	a0,0x17
    8001696e:	a6650513          	addi	a0,a0,-1434 # 8002d3d0 <__func__.0+0x318>
    80016972:	4e4140ef          	jal	8002ae56 <printf>
    80016976:	02900513          	li	a0,41
    8001697a:	1ca130ef          	jal	80029b44 <putchar>
    8001697e:	bf51                	j	80016912 <amo_page_fault_1+0x1ec>

0000000080016980 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80016980:	1101                	addi	sp,sp,-32

    TEST_START();
    80016982:	00015597          	auipc	a1,0x15
    80016986:	50658593          	addi	a1,a1,1286 # 8002be88 <__func__.4>
    8001698a:	00017517          	auipc	a0,0x17
    8001698e:	a0e50513          	addi	a0,a0,-1522 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    80016992:	ec06                	sd	ra,24(sp)
    80016994:	e822                	sd	s0,16(sp)
    80016996:	e426                	sd	s1,8(sp)
    TEST_START();
    80016998:	4be140ef          	jal	8002ae56 <printf>
    8001699c:	4529                	li	a0,10
    8001699e:	1a6130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800169a2:	450d                	li	a0,3
    800169a4:	d64ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800169a8:	c39e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800169ac:	818ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800169b0:	dcde90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800169b4:	4511                	li	a0,4
    800169b6:	d52ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800169ba:	000407b7          	lui	a5,0x40
    800169be:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800169c2:	450d                	li	a0,3
    800169c4:	d44ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);    
    800169c8:	4509                	li	a0,2
    800169ca:	c5eea0ef          	jal	80000e28 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    800169ce:	c3eea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800169d2:	000807b7          	lui	a5,0x80
    800169d6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800169d8:	4701                	li	a4,0
    800169da:	07b6                	slli	a5,a5,0xd
    800169dc:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169e0:	08200593          	li	a1,130
    800169e4:	0001c617          	auipc	a2,0x1c
    800169e8:	0bc60613          	addi	a2,a2,188 # 80032aa0 <__func__.0+0x59e8>
    800169ec:	00017517          	auipc	a0,0x17
    800169f0:	9c450513          	addi	a0,a0,-1596 # 8002d3b0 <__func__.0+0x2f8>
    800169f4:	462140ef          	jal	8002ae56 <printf>
    800169f8:	0003d797          	auipc	a5,0x3d
    800169fc:	6197c783          	lbu	a5,1561(a5) # 80054011 <excpt+0x1>
    80016a00:	0003d497          	auipc	s1,0x3d
    80016a04:	61048493          	addi	s1,s1,1552 # 80054010 <excpt>
    80016a08:	00017597          	auipc	a1,0x17
    80016a0c:	98058593          	addi	a1,a1,-1664 # 8002d388 <__func__.0+0x2d0>
    80016a10:	cf89                	beqz	a5,80016a2a <amo_page_fault_2+0xaa>
    80016a12:	6498                	ld	a4,8(s1)
    80016a14:	47bd                	li	a5,15
    80016a16:	00017597          	auipc	a1,0x17
    80016a1a:	96258593          	addi	a1,a1,-1694 # 8002d378 <__func__.0+0x2c0>
    80016a1e:	00f70663          	beq	a4,a5,80016a2a <amo_page_fault_2+0xaa>
    80016a22:	00017597          	auipc	a1,0x17
    80016a26:	96658593          	addi	a1,a1,-1690 # 8002d388 <__func__.0+0x2d0>
    80016a2a:	00017517          	auipc	a0,0x17
    80016a2e:	99e50513          	addi	a0,a0,-1634 # 8002d3c8 <__func__.0+0x310>
    80016a32:	424140ef          	jal	8002ae56 <printf>
    80016a36:	0003d797          	auipc	a5,0x3d
    80016a3a:	5db7c783          	lbu	a5,1499(a5) # 80054011 <excpt+0x1>
    80016a3e:	c789                	beqz	a5,80016a48 <amo_page_fault_2+0xc8>
    80016a40:	6498                	ld	a4,8(s1)
    80016a42:	47bd                	li	a5,15
    80016a44:	00f70c63          	beq	a4,a5,80016a5c <amo_page_fault_2+0xdc>
    80016a48:	00017517          	auipc	a0,0x17
    80016a4c:	98850513          	addi	a0,a0,-1656 # 8002d3d0 <__func__.0+0x318>
    80016a50:	406140ef          	jal	8002ae56 <printf>
    80016a54:	02900513          	li	a0,41
    80016a58:	0ec130ef          	jal	80029b44 <putchar>
    80016a5c:	4529                	li	a0,10
    80016a5e:	0e6130ef          	jal	80029b44 <putchar>
    80016a62:	0003d417          	auipc	s0,0x3d
    80016a66:	5af44403          	lbu	s0,1455(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016a6a:	00017597          	auipc	a1,0x17
    80016a6e:	91e58593          	addi	a1,a1,-1762 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016a72:	cc11                	beqz	s0,80016a8e <amo_page_fault_2+0x10e>
    80016a74:	6498                	ld	a4,8(s1)
    80016a76:	47bd                	li	a5,15
    TEST_END();
    80016a78:	00017597          	auipc	a1,0x17
    80016a7c:	90058593          	addi	a1,a1,-1792 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016a80:	00f70763          	beq	a4,a5,80016a8e <amo_page_fault_2+0x10e>
    80016a84:	4401                	li	s0,0
    TEST_END();
    80016a86:	00017597          	auipc	a1,0x17
    80016a8a:	90258593          	addi	a1,a1,-1790 # 8002d388 <__func__.0+0x2d0>
    80016a8e:	00017517          	auipc	a0,0x17
    80016a92:	9a250513          	addi	a0,a0,-1630 # 8002d430 <__func__.0+0x378>
    80016a96:	3c0140ef          	jal	8002ae56 <printf>
    80016a9a:	4511                	li	a0,4
    80016a9c:	c6cea0ef          	jal	80000f08 <goto_priv>
    80016aa0:	d85ea0ef          	jal	80001824 <reset_state>
}
    80016aa4:	60e2                	ld	ra,24(sp)
    80016aa6:	8522                	mv	a0,s0
    80016aa8:	6442                	ld	s0,16(sp)
    80016aaa:	64a2                	ld	s1,8(sp)
    80016aac:	6105                	addi	sp,sp,32
    80016aae:	8082                	ret

0000000080016ab0 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80016ab0:	1141                	addi	sp,sp,-16

    TEST_START();
    80016ab2:	00015597          	auipc	a1,0x15
    80016ab6:	3ee58593          	addi	a1,a1,1006 # 8002bea0 <__func__.3>
    80016aba:	00017517          	auipc	a0,0x17
    80016abe:	8de50513          	addi	a0,a0,-1826 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80016ac2:	e406                	sd	ra,8(sp)
    80016ac4:	e022                	sd	s0,0(sp)
    TEST_START();
    80016ac6:	390140ef          	jal	8002ae56 <printf>
    80016aca:	4529                	li	a0,10
    80016acc:	078130ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016ad0:	450d                	li	a0,3
    80016ad2:	c36ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016ad6:	b0be90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016ada:	eebe90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016ade:	c9fe90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016ae2:	4511                	li	a0,4
    80016ae4:	c24ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016ae8:	000407b7          	lui	a5,0x40
    80016aec:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80016af0:	450d                	li	a0,3
    80016af2:	c16ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80016af6:	4509                	li	a0,2
    80016af8:	b30ea0ef          	jal	80000e28 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80016afc:	b10ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016b00:	000807b7          	lui	a5,0x80
    80016b04:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016b06:	4701                	li	a4,0
    80016b08:	07b6                	slli	a5,a5,0xd
    80016b0a:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b0e:	08200593          	li	a1,130
    80016b12:	0001c617          	auipc	a2,0x1c
    80016b16:	fd660613          	addi	a2,a2,-42 # 80032ae8 <__func__.0+0x5a30>
    80016b1a:	00017517          	auipc	a0,0x17
    80016b1e:	89650513          	addi	a0,a0,-1898 # 8002d3b0 <__func__.0+0x2f8>
    80016b22:	334140ef          	jal	8002ae56 <printf>
    80016b26:	0003d797          	auipc	a5,0x3d
    80016b2a:	4eb7c783          	lbu	a5,1259(a5) # 80054011 <excpt+0x1>
    80016b2e:	00017597          	auipc	a1,0x17
    80016b32:	84a58593          	addi	a1,a1,-1974 # 8002d378 <__func__.0+0x2c0>
    80016b36:	c789                	beqz	a5,80016b40 <amo_page_fault_3+0x90>
    80016b38:	00017597          	auipc	a1,0x17
    80016b3c:	85058593          	addi	a1,a1,-1968 # 8002d388 <__func__.0+0x2d0>
    80016b40:	00017517          	auipc	a0,0x17
    80016b44:	88850513          	addi	a0,a0,-1912 # 8002d3c8 <__func__.0+0x310>
    80016b48:	30e140ef          	jal	8002ae56 <printf>
    80016b4c:	0003d797          	auipc	a5,0x3d
    80016b50:	4c57c783          	lbu	a5,1221(a5) # 80054011 <excpt+0x1>
    80016b54:	e7a1                	bnez	a5,80016b9c <amo_page_fault_3+0xec>
    80016b56:	4529                	li	a0,10
    80016b58:	7ed120ef          	jal	80029b44 <putchar>
    80016b5c:	0003d797          	auipc	a5,0x3d
    80016b60:	4b57c783          	lbu	a5,1205(a5) # 80054011 <excpt+0x1>
    80016b64:	e795                	bnez	a5,80016b90 <amo_page_fault_3+0xe0>
    80016b66:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016b68:	00017597          	auipc	a1,0x17
    80016b6c:	81058593          	addi	a1,a1,-2032 # 8002d378 <__func__.0+0x2c0>
    80016b70:	00017517          	auipc	a0,0x17
    80016b74:	8c050513          	addi	a0,a0,-1856 # 8002d430 <__func__.0+0x378>
    80016b78:	2de140ef          	jal	8002ae56 <printf>
    80016b7c:	4511                	li	a0,4
    80016b7e:	b8aea0ef          	jal	80000f08 <goto_priv>
    80016b82:	ca3ea0ef          	jal	80001824 <reset_state>
}
    80016b86:	60a2                	ld	ra,8(sp)
    80016b88:	8522                	mv	a0,s0
    80016b8a:	6402                	ld	s0,0(sp)
    80016b8c:	0141                	addi	sp,sp,16
    80016b8e:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b90:	4401                	li	s0,0
    TEST_END();
    80016b92:	00016597          	auipc	a1,0x16
    80016b96:	7f658593          	addi	a1,a1,2038 # 8002d388 <__func__.0+0x2d0>
    80016b9a:	bfd9                	j	80016b70 <amo_page_fault_3+0xc0>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b9c:	00017517          	auipc	a0,0x17
    80016ba0:	83450513          	addi	a0,a0,-1996 # 8002d3d0 <__func__.0+0x318>
    80016ba4:	2b2140ef          	jal	8002ae56 <printf>
    80016ba8:	02900513          	li	a0,41
    80016bac:	799120ef          	jal	80029b44 <putchar>
    80016bb0:	b75d                	j	80016b56 <amo_page_fault_3+0xa6>

0000000080016bb2 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80016bb2:	1101                	addi	sp,sp,-32

    TEST_START();
    80016bb4:	00015597          	auipc	a1,0x15
    80016bb8:	30458593          	addi	a1,a1,772 # 8002beb8 <__func__.2>
    80016bbc:	00016517          	auipc	a0,0x16
    80016bc0:	7dc50513          	addi	a0,a0,2012 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    80016bc4:	ec06                	sd	ra,24(sp)
    80016bc6:	e822                	sd	s0,16(sp)
    80016bc8:	e426                	sd	s1,8(sp)
    80016bca:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016bcc:	28a140ef          	jal	8002ae56 <printf>
    80016bd0:	4529                	li	a0,10
    80016bd2:	773120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016bd6:	450d                	li	a0,3
    80016bd8:	b30ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016bdc:	a05e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016be0:	de5e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016be4:	b99e90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016be8:	4509                	li	a0,2
    80016bea:	b1eea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016bee:	a1eea0ef          	jal	80000e0c <test_setup_except_function>
    80016bf2:	deadc7b7          	lui	a5,0xdeadc
    80016bf6:	40019737          	lui	a4,0x40019
    80016bfa:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016bfe:	070a                	slli	a4,a4,0x2
    80016c00:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016c04:	08200593          	li	a1,130
    80016c08:	0001c617          	auipc	a2,0x1c
    80016c0c:	f2860613          	addi	a2,a2,-216 # 80032b30 <__func__.0+0x5a78>
    80016c10:	00016517          	auipc	a0,0x16
    80016c14:	7a050513          	addi	a0,a0,1952 # 8002d3b0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80016c18:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016c1c:	23a140ef          	jal	8002ae56 <printf>
    80016c20:	0003d797          	auipc	a5,0x3d
    80016c24:	3f17c783          	lbu	a5,1009(a5) # 80054011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016c28:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016c2a:	0003d917          	auipc	s2,0x3d
    80016c2e:	3e690913          	addi	s2,s2,998 # 80054010 <excpt>
    80016c32:	00016597          	auipc	a1,0x16
    80016c36:	75658593          	addi	a1,a1,1878 # 8002d388 <__func__.0+0x2d0>
    80016c3a:	cf91                	beqz	a5,80016c56 <amo_page_fault_4+0xa4>
    80016c3c:	00893703          	ld	a4,8(s2)
    80016c40:	47bd                	li	a5,15
    80016c42:	00016597          	auipc	a1,0x16
    80016c46:	73658593          	addi	a1,a1,1846 # 8002d378 <__func__.0+0x2c0>
    80016c4a:	00f70663          	beq	a4,a5,80016c56 <amo_page_fault_4+0xa4>
    80016c4e:	00016597          	auipc	a1,0x16
    80016c52:	73a58593          	addi	a1,a1,1850 # 8002d388 <__func__.0+0x2d0>
    80016c56:	00016517          	auipc	a0,0x16
    80016c5a:	77250513          	addi	a0,a0,1906 # 8002d3c8 <__func__.0+0x310>
    80016c5e:	1f8140ef          	jal	8002ae56 <printf>
    80016c62:	0003d797          	auipc	a5,0x3d
    80016c66:	3af7c783          	lbu	a5,943(a5) # 80054011 <excpt+0x1>
    80016c6a:	c791                	beqz	a5,80016c76 <amo_page_fault_4+0xc4>
    80016c6c:	00893703          	ld	a4,8(s2)
    80016c70:	47bd                	li	a5,15
    80016c72:	00f70c63          	beq	a4,a5,80016c8a <amo_page_fault_4+0xd8>
    80016c76:	00016517          	auipc	a0,0x16
    80016c7a:	75a50513          	addi	a0,a0,1882 # 8002d3d0 <__func__.0+0x318>
    80016c7e:	1d8140ef          	jal	8002ae56 <printf>
    80016c82:	02900513          	li	a0,41
    80016c86:	6bf120ef          	jal	80029b44 <putchar>
    80016c8a:	4529                	li	a0,10
    80016c8c:	6b9120ef          	jal	80029b44 <putchar>
    80016c90:	0003d797          	auipc	a5,0x3d
    80016c94:	3817c783          	lbu	a5,897(a5) # 80054011 <excpt+0x1>
    80016c98:	4481                	li	s1,0
    80016c9a:	c791                	beqz	a5,80016ca6 <amo_page_fault_4+0xf4>
    80016c9c:	00893483          	ld	s1,8(s2)
    80016ca0:	14c5                	addi	s1,s1,-15
    80016ca2:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016ca6:	966ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016caa:	000807b7          	lui	a5,0x80
    80016cae:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80016cb0:	07b6                	slli	a5,a5,0xd
    80016cb2:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016cb6:	08200593          	li	a1,130
    80016cba:	0001c617          	auipc	a2,0x1c
    80016cbe:	eae60613          	addi	a2,a2,-338 # 80032b68 <__func__.0+0x5ab0>
    80016cc2:	00016517          	auipc	a0,0x16
    80016cc6:	6ee50513          	addi	a0,a0,1774 # 8002d3b0 <__func__.0+0x2f8>
    80016cca:	18c140ef          	jal	8002ae56 <printf>
    80016cce:	0003d797          	auipc	a5,0x3d
    80016cd2:	3437c783          	lbu	a5,835(a5) # 80054011 <excpt+0x1>
    80016cd6:	00016597          	auipc	a1,0x16
    80016cda:	6b258593          	addi	a1,a1,1714 # 8002d388 <__func__.0+0x2d0>
    80016cde:	cf91                	beqz	a5,80016cfa <amo_page_fault_4+0x148>
    80016ce0:	00893703          	ld	a4,8(s2)
    80016ce4:	47bd                	li	a5,15
    80016ce6:	00016597          	auipc	a1,0x16
    80016cea:	69258593          	addi	a1,a1,1682 # 8002d378 <__func__.0+0x2c0>
    80016cee:	00f70663          	beq	a4,a5,80016cfa <amo_page_fault_4+0x148>
    80016cf2:	00016597          	auipc	a1,0x16
    80016cf6:	69658593          	addi	a1,a1,1686 # 8002d388 <__func__.0+0x2d0>
    80016cfa:	00016517          	auipc	a0,0x16
    80016cfe:	6ce50513          	addi	a0,a0,1742 # 8002d3c8 <__func__.0+0x310>
    80016d02:	154140ef          	jal	8002ae56 <printf>
    80016d06:	0003d797          	auipc	a5,0x3d
    80016d0a:	30b7c783          	lbu	a5,779(a5) # 80054011 <excpt+0x1>
    80016d0e:	c791                	beqz	a5,80016d1a <amo_page_fault_4+0x168>
    80016d10:	00893703          	ld	a4,8(s2)
    80016d14:	47bd                	li	a5,15
    80016d16:	00f70c63          	beq	a4,a5,80016d2e <amo_page_fault_4+0x17c>
    80016d1a:	00016517          	auipc	a0,0x16
    80016d1e:	6b650513          	addi	a0,a0,1718 # 8002d3d0 <__func__.0+0x318>
    80016d22:	134140ef          	jal	8002ae56 <printf>
    80016d26:	02900513          	li	a0,41
    80016d2a:	61b120ef          	jal	80029b44 <putchar>
    80016d2e:	4529                	li	a0,10
    80016d30:	615120ef          	jal	80029b44 <putchar>
    80016d34:	c499                	beqz	s1,80016d42 <amo_page_fault_4+0x190>
    80016d36:	0003d797          	auipc	a5,0x3d
    80016d3a:	2db7c783          	lbu	a5,731(a5) # 80054011 <excpt+0x1>
    80016d3e:	4481                	li	s1,0
    80016d40:	e3cd                	bnez	a5,80016de2 <amo_page_fault_4+0x230>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016d42:	8caea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016d46:	4785                	li	a5,1
    80016d48:	1782                	slli	a5,a5,0x20
    80016d4a:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d4e:	08200593          	li	a1,130
    80016d52:	0001c617          	auipc	a2,0x1c
    80016d56:	e4660613          	addi	a2,a2,-442 # 80032b98 <__func__.0+0x5ae0>
    80016d5a:	00016517          	auipc	a0,0x16
    80016d5e:	65650513          	addi	a0,a0,1622 # 8002d3b0 <__func__.0+0x2f8>
    80016d62:	0f4140ef          	jal	8002ae56 <printf>
    80016d66:	0003d797          	auipc	a5,0x3d
    80016d6a:	2ab7c783          	lbu	a5,683(a5) # 80054011 <excpt+0x1>
    80016d6e:	00016597          	auipc	a1,0x16
    80016d72:	61a58593          	addi	a1,a1,1562 # 8002d388 <__func__.0+0x2d0>
    80016d76:	e789                	bnez	a5,80016d80 <amo_page_fault_4+0x1ce>
    80016d78:	00016597          	auipc	a1,0x16
    80016d7c:	60058593          	addi	a1,a1,1536 # 8002d378 <__func__.0+0x2c0>
    80016d80:	00016517          	auipc	a0,0x16
    80016d84:	64850513          	addi	a0,a0,1608 # 8002d3c8 <__func__.0+0x310>
    80016d88:	0ce140ef          	jal	8002ae56 <printf>
    80016d8c:	0003d797          	auipc	a5,0x3d
    80016d90:	2857c783          	lbu	a5,645(a5) # 80054011 <excpt+0x1>
    80016d94:	efa9                	bnez	a5,80016dee <amo_page_fault_4+0x23c>
    80016d96:	4529                	li	a0,10
    80016d98:	5ad120ef          	jal	80029b44 <putchar>
    80016d9c:	c491                	beqz	s1,80016da8 <amo_page_fault_4+0x1f6>
    80016d9e:	0003d797          	auipc	a5,0x3d
    80016da2:	2737c783          	lbu	a5,627(a5) # 80054011 <excpt+0x1>
    80016da6:	cb85                	beqz	a5,80016dd6 <amo_page_fault_4+0x224>
    80016da8:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016daa:	00016597          	auipc	a1,0x16
    80016dae:	5de58593          	addi	a1,a1,1502 # 8002d388 <__func__.0+0x2d0>
    80016db2:	00016517          	auipc	a0,0x16
    80016db6:	67e50513          	addi	a0,a0,1662 # 8002d430 <__func__.0+0x378>
    80016dba:	09c140ef          	jal	8002ae56 <printf>
    80016dbe:	4511                	li	a0,4
    80016dc0:	948ea0ef          	jal	80000f08 <goto_priv>
    80016dc4:	a61ea0ef          	jal	80001824 <reset_state>
}
    80016dc8:	60e2                	ld	ra,24(sp)
    80016dca:	8522                	mv	a0,s0
    80016dcc:	6442                	ld	s0,16(sp)
    80016dce:	64a2                	ld	s1,8(sp)
    80016dd0:	6902                	ld	s2,0(sp)
    80016dd2:	6105                	addi	sp,sp,32
    80016dd4:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016dd6:	4405                	li	s0,1
    TEST_END();
    80016dd8:	00016597          	auipc	a1,0x16
    80016ddc:	5a058593          	addi	a1,a1,1440 # 8002d378 <__func__.0+0x2c0>
    80016de0:	bfc9                	j	80016db2 <amo_page_fault_4+0x200>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016de2:	00893483          	ld	s1,8(s2)
    80016de6:	14c5                	addi	s1,s1,-15
    80016de8:	0014b493          	seqz	s1,s1
    80016dec:	bf99                	j	80016d42 <amo_page_fault_4+0x190>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016dee:	00016517          	auipc	a0,0x16
    80016df2:	5e250513          	addi	a0,a0,1506 # 8002d3d0 <__func__.0+0x318>
    80016df6:	060140ef          	jal	8002ae56 <printf>
    80016dfa:	02900513          	li	a0,41
    80016dfe:	547120ef          	jal	80029b44 <putchar>
    80016e02:	bf51                	j	80016d96 <amo_page_fault_4+0x1e4>

0000000080016e04 <amo_page_fault_5>:

bool amo_page_fault_5(){
    80016e04:	1101                	addi	sp,sp,-32

    TEST_START();
    80016e06:	00015597          	auipc	a1,0x15
    80016e0a:	0ca58593          	addi	a1,a1,202 # 8002bed0 <__func__.1>
    80016e0e:	00016517          	auipc	a0,0x16
    80016e12:	58a50513          	addi	a0,a0,1418 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    80016e16:	ec06                	sd	ra,24(sp)
    80016e18:	e822                	sd	s0,16(sp)
    80016e1a:	e426                	sd	s1,8(sp)
    TEST_START();
    80016e1c:	03a140ef          	jal	8002ae56 <printf>
    80016e20:	4529                	li	a0,10
    80016e22:	523120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016e26:	450d                	li	a0,3
    80016e28:	8e0ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016e2c:	fb4e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016e30:	b95e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016e34:	949e90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016e38:	4511                	li	a0,4
    80016e3a:	8ceea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016e3e:	000407b7          	lui	a5,0x40
    80016e42:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016e46:	4509                	li	a0,2
    80016e48:	8c0ea0ef          	jal	80000f08 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016e4c:	fc1e90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016e50:	000807b7          	lui	a5,0x80
    80016e54:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016e56:	4701                	li	a4,0
    80016e58:	07b6                	slli	a5,a5,0xd
    80016e5a:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e5e:	08200593          	li	a1,130
    80016e62:	0001c617          	auipc	a2,0x1c
    80016e66:	d6e60613          	addi	a2,a2,-658 # 80032bd0 <__func__.0+0x5b18>
    80016e6a:	00016517          	auipc	a0,0x16
    80016e6e:	54650513          	addi	a0,a0,1350 # 8002d3b0 <__func__.0+0x2f8>
    80016e72:	7e5130ef          	jal	8002ae56 <printf>
    80016e76:	0003d797          	auipc	a5,0x3d
    80016e7a:	19b7c783          	lbu	a5,411(a5) # 80054011 <excpt+0x1>
    80016e7e:	0003d497          	auipc	s1,0x3d
    80016e82:	19248493          	addi	s1,s1,402 # 80054010 <excpt>
    80016e86:	00016597          	auipc	a1,0x16
    80016e8a:	50258593          	addi	a1,a1,1282 # 8002d388 <__func__.0+0x2d0>
    80016e8e:	cf89                	beqz	a5,80016ea8 <amo_page_fault_5+0xa4>
    80016e90:	6498                	ld	a4,8(s1)
    80016e92:	47bd                	li	a5,15
    80016e94:	00016597          	auipc	a1,0x16
    80016e98:	4e458593          	addi	a1,a1,1252 # 8002d378 <__func__.0+0x2c0>
    80016e9c:	00f70663          	beq	a4,a5,80016ea8 <amo_page_fault_5+0xa4>
    80016ea0:	00016597          	auipc	a1,0x16
    80016ea4:	4e858593          	addi	a1,a1,1256 # 8002d388 <__func__.0+0x2d0>
    80016ea8:	00016517          	auipc	a0,0x16
    80016eac:	52050513          	addi	a0,a0,1312 # 8002d3c8 <__func__.0+0x310>
    80016eb0:	7a7130ef          	jal	8002ae56 <printf>
    80016eb4:	0003d797          	auipc	a5,0x3d
    80016eb8:	15d7c783          	lbu	a5,349(a5) # 80054011 <excpt+0x1>
    80016ebc:	c789                	beqz	a5,80016ec6 <amo_page_fault_5+0xc2>
    80016ebe:	6498                	ld	a4,8(s1)
    80016ec0:	47bd                	li	a5,15
    80016ec2:	00f70c63          	beq	a4,a5,80016eda <amo_page_fault_5+0xd6>
    80016ec6:	00016517          	auipc	a0,0x16
    80016eca:	50a50513          	addi	a0,a0,1290 # 8002d3d0 <__func__.0+0x318>
    80016ece:	789130ef          	jal	8002ae56 <printf>
    80016ed2:	02900513          	li	a0,41
    80016ed6:	46f120ef          	jal	80029b44 <putchar>
    80016eda:	4529                	li	a0,10
    80016edc:	469120ef          	jal	80029b44 <putchar>
    80016ee0:	0003d417          	auipc	s0,0x3d
    80016ee4:	13144403          	lbu	s0,305(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016ee8:	00016597          	auipc	a1,0x16
    80016eec:	4a058593          	addi	a1,a1,1184 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016ef0:	cc11                	beqz	s0,80016f0c <amo_page_fault_5+0x108>
    80016ef2:	6498                	ld	a4,8(s1)
    80016ef4:	47bd                	li	a5,15
    TEST_END();
    80016ef6:	00016597          	auipc	a1,0x16
    80016efa:	48258593          	addi	a1,a1,1154 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016efe:	00f70763          	beq	a4,a5,80016f0c <amo_page_fault_5+0x108>
    80016f02:	4401                	li	s0,0
    TEST_END();
    80016f04:	00016597          	auipc	a1,0x16
    80016f08:	48458593          	addi	a1,a1,1156 # 8002d388 <__func__.0+0x2d0>
    80016f0c:	00016517          	auipc	a0,0x16
    80016f10:	52450513          	addi	a0,a0,1316 # 8002d430 <__func__.0+0x378>
    80016f14:	743130ef          	jal	8002ae56 <printf>
    80016f18:	4511                	li	a0,4
    80016f1a:	fefe90ef          	jal	80000f08 <goto_priv>
    80016f1e:	907ea0ef          	jal	80001824 <reset_state>
}
    80016f22:	60e2                	ld	ra,24(sp)
    80016f24:	8522                	mv	a0,s0
    80016f26:	6442                	ld	s0,16(sp)
    80016f28:	64a2                	ld	s1,8(sp)
    80016f2a:	6105                	addi	sp,sp,32
    80016f2c:	8082                	ret

0000000080016f2e <amo_page_fault_6>:

bool amo_page_fault_6(){
    80016f2e:	1141                	addi	sp,sp,-16

    TEST_START();
    80016f30:	00015597          	auipc	a1,0x15
    80016f34:	fb858593          	addi	a1,a1,-72 # 8002bee8 <__func__.0>
    80016f38:	00016517          	auipc	a0,0x16
    80016f3c:	46050513          	addi	a0,a0,1120 # 8002d398 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    80016f40:	e406                	sd	ra,8(sp)
    80016f42:	e022                	sd	s0,0(sp)
    TEST_START();
    80016f44:	713130ef          	jal	8002ae56 <printf>
    80016f48:	4529                	li	a0,10
    80016f4a:	3fb120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80016f4e:	450d                	li	a0,3
    80016f50:	fb9e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016f54:	e8ce90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016f58:	a6de90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016f5c:	821e90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016f60:	4511                	li	a0,4
    80016f62:	fa7e90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016f66:	000407b7          	lui	a5,0x40
    80016f6a:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80016f6e:	4509                	li	a0,2
    80016f70:	f99e90ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80016f74:	e99e90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016f78:	000807b7          	lui	a5,0x80
    80016f7c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016f7e:	4701                	li	a4,0
    80016f80:	07b6                	slli	a5,a5,0xd
    80016f82:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f86:	08200593          	li	a1,130
    80016f8a:	0001c617          	auipc	a2,0x1c
    80016f8e:	c9660613          	addi	a2,a2,-874 # 80032c20 <__func__.0+0x5b68>
    80016f92:	00016517          	auipc	a0,0x16
    80016f96:	41e50513          	addi	a0,a0,1054 # 8002d3b0 <__func__.0+0x2f8>
    80016f9a:	6bd130ef          	jal	8002ae56 <printf>
    80016f9e:	0003d797          	auipc	a5,0x3d
    80016fa2:	0737c783          	lbu	a5,115(a5) # 80054011 <excpt+0x1>
    80016fa6:	00016597          	auipc	a1,0x16
    80016faa:	3d258593          	addi	a1,a1,978 # 8002d378 <__func__.0+0x2c0>
    80016fae:	c789                	beqz	a5,80016fb8 <amo_page_fault_6+0x8a>
    80016fb0:	00016597          	auipc	a1,0x16
    80016fb4:	3d858593          	addi	a1,a1,984 # 8002d388 <__func__.0+0x2d0>
    80016fb8:	00016517          	auipc	a0,0x16
    80016fbc:	41050513          	addi	a0,a0,1040 # 8002d3c8 <__func__.0+0x310>
    80016fc0:	697130ef          	jal	8002ae56 <printf>
    80016fc4:	0003d797          	auipc	a5,0x3d
    80016fc8:	04d7c783          	lbu	a5,77(a5) # 80054011 <excpt+0x1>
    80016fcc:	e7a1                	bnez	a5,80017014 <amo_page_fault_6+0xe6>
    80016fce:	4529                	li	a0,10
    80016fd0:	375120ef          	jal	80029b44 <putchar>
    80016fd4:	0003d797          	auipc	a5,0x3d
    80016fd8:	03d7c783          	lbu	a5,61(a5) # 80054011 <excpt+0x1>
    80016fdc:	e795                	bnez	a5,80017008 <amo_page_fault_6+0xda>
    80016fde:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016fe0:	00016597          	auipc	a1,0x16
    80016fe4:	39858593          	addi	a1,a1,920 # 8002d378 <__func__.0+0x2c0>
    80016fe8:	00016517          	auipc	a0,0x16
    80016fec:	44850513          	addi	a0,a0,1096 # 8002d430 <__func__.0+0x378>
    80016ff0:	667130ef          	jal	8002ae56 <printf>
    80016ff4:	4511                	li	a0,4
    80016ff6:	f13e90ef          	jal	80000f08 <goto_priv>
    80016ffa:	82bea0ef          	jal	80001824 <reset_state>
}
    80016ffe:	60a2                	ld	ra,8(sp)
    80017000:	8522                	mv	a0,s0
    80017002:	6402                	ld	s0,0(sp)
    80017004:	0141                	addi	sp,sp,16
    80017006:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80017008:	4401                	li	s0,0
    TEST_END();
    8001700a:	00016597          	auipc	a1,0x16
    8001700e:	37e58593          	addi	a1,a1,894 # 8002d388 <__func__.0+0x2d0>
    80017012:	bfd9                	j	80016fe8 <amo_page_fault_6+0xba>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80017014:	00016517          	auipc	a0,0x16
    80017018:	3bc50513          	addi	a0,a0,956 # 8002d3d0 <__func__.0+0x318>
    8001701c:	63b130ef          	jal	8002ae56 <printf>
    80017020:	02900513          	li	a0,41
    80017024:	321120ef          	jal	80029b44 <putchar>
    80017028:	b75d                	j	80016fce <amo_page_fault_6+0xa0>

000000008001702a <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    8001702a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001702c:	00015597          	auipc	a1,0x15
    80017030:	ed458593          	addi	a1,a1,-300 # 8002bf00 <__func__.37>
    80017034:	00016517          	auipc	a0,0x16
    80017038:	36450513          	addi	a0,a0,868 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    8001703c:	ec06                	sd	ra,24(sp)
    8001703e:	e822                	sd	s0,16(sp)
    80017040:	e426                	sd	s1,8(sp)
    TEST_START();
    80017042:	615130ef          	jal	8002ae56 <printf>
    80017046:	4529                	li	a0,10
    80017048:	2fd120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001704c:	450d                	li	a0,3
    8001704e:	ebbe90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017052:	d8ee90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017056:	96fe90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001705a:	f22e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001705e:	450d                	li	a0,3
    80017060:	ea9e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017064:	4509                	li	a0,2
    80017066:	dc3e90ef          	jal	80000e28 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001706a:	da3e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001706e:	001007b7          	lui	a5,0x100
    80017072:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017076:	07b2                	slli	a5,a5,0xc
    80017078:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    8001707c:	08200593          	li	a1,130
    80017080:	0001c617          	auipc	a2,0x1c
    80017084:	be860613          	addi	a2,a2,-1048 # 80032c68 <__func__.0+0x5bb0>
    80017088:	00016517          	auipc	a0,0x16
    8001708c:	32850513          	addi	a0,a0,808 # 8002d3b0 <__func__.0+0x2f8>
    80017090:	5c7130ef          	jal	8002ae56 <printf>
    80017094:	0003d797          	auipc	a5,0x3d
    80017098:	f7d7c783          	lbu	a5,-131(a5) # 80054011 <excpt+0x1>
    8001709c:	0003d497          	auipc	s1,0x3d
    800170a0:	f7448493          	addi	s1,s1,-140 # 80054010 <excpt>
    800170a4:	00016597          	auipc	a1,0x16
    800170a8:	2e458593          	addi	a1,a1,740 # 8002d388 <__func__.0+0x2d0>
    800170ac:	cf89                	beqz	a5,800170c6 <load_guest_page_fault_1+0x9c>
    800170ae:	6498                	ld	a4,8(s1)
    800170b0:	47d5                	li	a5,21
    800170b2:	00016597          	auipc	a1,0x16
    800170b6:	2c658593          	addi	a1,a1,710 # 8002d378 <__func__.0+0x2c0>
    800170ba:	00f70663          	beq	a4,a5,800170c6 <load_guest_page_fault_1+0x9c>
    800170be:	00016597          	auipc	a1,0x16
    800170c2:	2ca58593          	addi	a1,a1,714 # 8002d388 <__func__.0+0x2d0>
    800170c6:	00016517          	auipc	a0,0x16
    800170ca:	30250513          	addi	a0,a0,770 # 8002d3c8 <__func__.0+0x310>
    800170ce:	589130ef          	jal	8002ae56 <printf>
    800170d2:	0003d797          	auipc	a5,0x3d
    800170d6:	f3f7c783          	lbu	a5,-193(a5) # 80054011 <excpt+0x1>
    800170da:	c789                	beqz	a5,800170e4 <load_guest_page_fault_1+0xba>
    800170dc:	6498                	ld	a4,8(s1)
    800170de:	47d5                	li	a5,21
    800170e0:	00f70c63          	beq	a4,a5,800170f8 <load_guest_page_fault_1+0xce>
    800170e4:	00016517          	auipc	a0,0x16
    800170e8:	2ec50513          	addi	a0,a0,748 # 8002d3d0 <__func__.0+0x318>
    800170ec:	56b130ef          	jal	8002ae56 <printf>
    800170f0:	02900513          	li	a0,41
    800170f4:	251120ef          	jal	80029b44 <putchar>
    800170f8:	4529                	li	a0,10
    800170fa:	24b120ef          	jal	80029b44 <putchar>
    800170fe:	0003d797          	auipc	a5,0x3d
    80017102:	f137c783          	lbu	a5,-237(a5) # 80054011 <excpt+0x1>
    80017106:	4401                	li	s0,0
    80017108:	c789                	beqz	a5,80017112 <load_guest_page_fault_1+0xe8>
    8001710a:	6480                	ld	s0,8(s1)
    8001710c:	142d                	addi	s0,s0,-21
    8001710e:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80017112:	cfbe90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017116:	001007b7          	lui	a5,0x100
    8001711a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001711e:	07b2                	slli	a5,a5,0xc
    80017120:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017124:	08200593          	li	a1,130
    80017128:	0001c617          	auipc	a2,0x1c
    8001712c:	b9060613          	addi	a2,a2,-1136 # 80032cb8 <__func__.0+0x5c00>
    80017130:	00016517          	auipc	a0,0x16
    80017134:	28050513          	addi	a0,a0,640 # 8002d3b0 <__func__.0+0x2f8>
    80017138:	51f130ef          	jal	8002ae56 <printf>
    8001713c:	0003d797          	auipc	a5,0x3d
    80017140:	ed57c783          	lbu	a5,-299(a5) # 80054011 <excpt+0x1>
    80017144:	00016597          	auipc	a1,0x16
    80017148:	24458593          	addi	a1,a1,580 # 8002d388 <__func__.0+0x2d0>
    8001714c:	cf89                	beqz	a5,80017166 <load_guest_page_fault_1+0x13c>
    8001714e:	6498                	ld	a4,8(s1)
    80017150:	47d5                	li	a5,21
    80017152:	00016597          	auipc	a1,0x16
    80017156:	22658593          	addi	a1,a1,550 # 8002d378 <__func__.0+0x2c0>
    8001715a:	00f70663          	beq	a4,a5,80017166 <load_guest_page_fault_1+0x13c>
    8001715e:	00016597          	auipc	a1,0x16
    80017162:	22a58593          	addi	a1,a1,554 # 8002d388 <__func__.0+0x2d0>
    80017166:	00016517          	auipc	a0,0x16
    8001716a:	26250513          	addi	a0,a0,610 # 8002d3c8 <__func__.0+0x310>
    8001716e:	4e9130ef          	jal	8002ae56 <printf>
    80017172:	0003d797          	auipc	a5,0x3d
    80017176:	e9f7c783          	lbu	a5,-353(a5) # 80054011 <excpt+0x1>
    8001717a:	c789                	beqz	a5,80017184 <load_guest_page_fault_1+0x15a>
    8001717c:	6498                	ld	a4,8(s1)
    8001717e:	47d5                	li	a5,21
    80017180:	00f70c63          	beq	a4,a5,80017198 <load_guest_page_fault_1+0x16e>
    80017184:	00016517          	auipc	a0,0x16
    80017188:	24c50513          	addi	a0,a0,588 # 8002d3d0 <__func__.0+0x318>
    8001718c:	4cb130ef          	jal	8002ae56 <printf>
    80017190:	02900513          	li	a0,41
    80017194:	1b1120ef          	jal	80029b44 <putchar>
    80017198:	4529                	li	a0,10
    8001719a:	1ab120ef          	jal	80029b44 <putchar>
    8001719e:	c015                	beqz	s0,800171c2 <load_guest_page_fault_1+0x198>
    800171a0:	0003d417          	auipc	s0,0x3d
    800171a4:	e7144403          	lbu	s0,-399(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800171a8:	00016597          	auipc	a1,0x16
    800171ac:	1e058593          	addi	a1,a1,480 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800171b0:	cc11                	beqz	s0,800171cc <load_guest_page_fault_1+0x1a2>
    800171b2:	6498                	ld	a4,8(s1)
    800171b4:	47d5                	li	a5,21
    TEST_END();
    800171b6:	00016597          	auipc	a1,0x16
    800171ba:	1c258593          	addi	a1,a1,450 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800171be:	00f70763          	beq	a4,a5,800171cc <load_guest_page_fault_1+0x1a2>
    800171c2:	4401                	li	s0,0
    TEST_END();
    800171c4:	00016597          	auipc	a1,0x16
    800171c8:	1c458593          	addi	a1,a1,452 # 8002d388 <__func__.0+0x2d0>
    800171cc:	00016517          	auipc	a0,0x16
    800171d0:	26450513          	addi	a0,a0,612 # 8002d430 <__func__.0+0x378>
    800171d4:	483130ef          	jal	8002ae56 <printf>
    800171d8:	4511                	li	a0,4
    800171da:	d2fe90ef          	jal	80000f08 <goto_priv>
    800171de:	e46ea0ef          	jal	80001824 <reset_state>
}
    800171e2:	60e2                	ld	ra,24(sp)
    800171e4:	8522                	mv	a0,s0
    800171e6:	6442                	ld	s0,16(sp)
    800171e8:	64a2                	ld	s1,8(sp)
    800171ea:	6105                	addi	sp,sp,32
    800171ec:	8082                	ret

00000000800171ee <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    800171ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800171f0:	00015597          	auipc	a1,0x15
    800171f4:	d2858593          	addi	a1,a1,-728 # 8002bf18 <__func__.35>
    800171f8:	00016517          	auipc	a0,0x16
    800171fc:	1a050513          	addi	a0,a0,416 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    80017200:	ec06                	sd	ra,24(sp)
    80017202:	e822                	sd	s0,16(sp)
    80017204:	e426                	sd	s1,8(sp)
    TEST_START();
    80017206:	451130ef          	jal	8002ae56 <printf>
    8001720a:	4529                	li	a0,10
    8001720c:	139120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017210:	450d                	li	a0,3
    80017212:	cf7e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017216:	bcae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001721a:	faae90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001721e:	d5ee90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80017222:	450d                	li	a0,3
    80017224:	ce5e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017228:	4509                	li	a0,2
    8001722a:	bffe90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001722e:	bdfe90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017232:	000807b7          	lui	a5,0x80
    80017236:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001723a:	001007b7          	lui	a5,0x100
    8001723e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017242:	07b2                	slli	a5,a5,0xc
    80017244:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017248:	08200593          	li	a1,130
    8001724c:	0001c617          	auipc	a2,0x1c
    80017250:	acc60613          	addi	a2,a2,-1332 # 80032d18 <__func__.0+0x5c60>
    80017254:	00016517          	auipc	a0,0x16
    80017258:	15c50513          	addi	a0,a0,348 # 8002d3b0 <__func__.0+0x2f8>
    8001725c:	3fb130ef          	jal	8002ae56 <printf>
    80017260:	0003d797          	auipc	a5,0x3d
    80017264:	db17c783          	lbu	a5,-591(a5) # 80054011 <excpt+0x1>
    80017268:	0003d497          	auipc	s1,0x3d
    8001726c:	da848493          	addi	s1,s1,-600 # 80054010 <excpt>
    80017270:	00016597          	auipc	a1,0x16
    80017274:	11858593          	addi	a1,a1,280 # 8002d388 <__func__.0+0x2d0>
    80017278:	cf89                	beqz	a5,80017292 <load_guest_page_fault_2+0xa4>
    8001727a:	6498                	ld	a4,8(s1)
    8001727c:	47d5                	li	a5,21
    8001727e:	00016597          	auipc	a1,0x16
    80017282:	0fa58593          	addi	a1,a1,250 # 8002d378 <__func__.0+0x2c0>
    80017286:	00f70663          	beq	a4,a5,80017292 <load_guest_page_fault_2+0xa4>
    8001728a:	00016597          	auipc	a1,0x16
    8001728e:	0fe58593          	addi	a1,a1,254 # 8002d388 <__func__.0+0x2d0>
    80017292:	00016517          	auipc	a0,0x16
    80017296:	13650513          	addi	a0,a0,310 # 8002d3c8 <__func__.0+0x310>
    8001729a:	3bd130ef          	jal	8002ae56 <printf>
    8001729e:	0003d797          	auipc	a5,0x3d
    800172a2:	d737c783          	lbu	a5,-653(a5) # 80054011 <excpt+0x1>
    800172a6:	c789                	beqz	a5,800172b0 <load_guest_page_fault_2+0xc2>
    800172a8:	6498                	ld	a4,8(s1)
    800172aa:	47d5                	li	a5,21
    800172ac:	00f70c63          	beq	a4,a5,800172c4 <load_guest_page_fault_2+0xd6>
    800172b0:	00016517          	auipc	a0,0x16
    800172b4:	12050513          	addi	a0,a0,288 # 8002d3d0 <__func__.0+0x318>
    800172b8:	39f130ef          	jal	8002ae56 <printf>
    800172bc:	02900513          	li	a0,41
    800172c0:	085120ef          	jal	80029b44 <putchar>
    800172c4:	4529                	li	a0,10
    800172c6:	07f120ef          	jal	80029b44 <putchar>
    800172ca:	0003d417          	auipc	s0,0x3d
    800172ce:	d4744403          	lbu	s0,-697(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800172d2:	00016597          	auipc	a1,0x16
    800172d6:	0b658593          	addi	a1,a1,182 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800172da:	cc11                	beqz	s0,800172f6 <load_guest_page_fault_2+0x108>
    800172dc:	6498                	ld	a4,8(s1)
    800172de:	47d5                	li	a5,21
    TEST_END();
    800172e0:	00016597          	auipc	a1,0x16
    800172e4:	09858593          	addi	a1,a1,152 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800172e8:	00f70763          	beq	a4,a5,800172f6 <load_guest_page_fault_2+0x108>
    800172ec:	4401                	li	s0,0
    TEST_END();
    800172ee:	00016597          	auipc	a1,0x16
    800172f2:	09a58593          	addi	a1,a1,154 # 8002d388 <__func__.0+0x2d0>
    800172f6:	00016517          	auipc	a0,0x16
    800172fa:	13a50513          	addi	a0,a0,314 # 8002d430 <__func__.0+0x378>
    800172fe:	359130ef          	jal	8002ae56 <printf>
    80017302:	4511                	li	a0,4
    80017304:	c05e90ef          	jal	80000f08 <goto_priv>
    80017308:	d1cea0ef          	jal	80001824 <reset_state>
}
    8001730c:	60e2                	ld	ra,24(sp)
    8001730e:	8522                	mv	a0,s0
    80017310:	6442                	ld	s0,16(sp)
    80017312:	64a2                	ld	s1,8(sp)
    80017314:	6105                	addi	sp,sp,32
    80017316:	8082                	ret

0000000080017318 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80017318:	1101                	addi	sp,sp,-32

    TEST_START();
    8001731a:	00015597          	auipc	a1,0x15
    8001731e:	c1658593          	addi	a1,a1,-1002 # 8002bf30 <__func__.34>
    80017322:	00016517          	auipc	a0,0x16
    80017326:	07650513          	addi	a0,a0,118 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    8001732a:	ec06                	sd	ra,24(sp)
    8001732c:	e822                	sd	s0,16(sp)
    8001732e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017330:	327130ef          	jal	8002ae56 <printf>
    80017334:	4529                	li	a0,10
    80017336:	00f120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001733a:	450d                	li	a0,3
    8001733c:	bcde90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017340:	aa0e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017344:	e80e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017348:	c34e90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001734c:	450d                	li	a0,3
    8001734e:	bbbe90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017352:	4509                	li	a0,2
    80017354:	ad5e90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017358:	ab5e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001735c:	000807b7          	lui	a5,0x80
    80017360:	1007a073          	csrs	sstatus,a5
    80017364:	001007b7          	lui	a5,0x100
    80017368:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001736c:	07b2                	slli	a5,a5,0xc
    8001736e:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017372:	08200593          	li	a1,130
    80017376:	0001c617          	auipc	a2,0x1c
    8001737a:	a0260613          	addi	a2,a2,-1534 # 80032d78 <__func__.0+0x5cc0>
    8001737e:	00016517          	auipc	a0,0x16
    80017382:	03250513          	addi	a0,a0,50 # 8002d3b0 <__func__.0+0x2f8>
    80017386:	2d1130ef          	jal	8002ae56 <printf>
    8001738a:	0003d797          	auipc	a5,0x3d
    8001738e:	c877c783          	lbu	a5,-889(a5) # 80054011 <excpt+0x1>
    80017392:	0003d497          	auipc	s1,0x3d
    80017396:	c7e48493          	addi	s1,s1,-898 # 80054010 <excpt>
    8001739a:	00016597          	auipc	a1,0x16
    8001739e:	fee58593          	addi	a1,a1,-18 # 8002d388 <__func__.0+0x2d0>
    800173a2:	cf89                	beqz	a5,800173bc <load_guest_page_fault_3+0xa4>
    800173a4:	6498                	ld	a4,8(s1)
    800173a6:	47d5                	li	a5,21
    800173a8:	00016597          	auipc	a1,0x16
    800173ac:	fd058593          	addi	a1,a1,-48 # 8002d378 <__func__.0+0x2c0>
    800173b0:	00f70663          	beq	a4,a5,800173bc <load_guest_page_fault_3+0xa4>
    800173b4:	00016597          	auipc	a1,0x16
    800173b8:	fd458593          	addi	a1,a1,-44 # 8002d388 <__func__.0+0x2d0>
    800173bc:	00016517          	auipc	a0,0x16
    800173c0:	00c50513          	addi	a0,a0,12 # 8002d3c8 <__func__.0+0x310>
    800173c4:	293130ef          	jal	8002ae56 <printf>
    800173c8:	0003d797          	auipc	a5,0x3d
    800173cc:	c497c783          	lbu	a5,-951(a5) # 80054011 <excpt+0x1>
    800173d0:	c789                	beqz	a5,800173da <load_guest_page_fault_3+0xc2>
    800173d2:	6498                	ld	a4,8(s1)
    800173d4:	47d5                	li	a5,21
    800173d6:	00f70c63          	beq	a4,a5,800173ee <load_guest_page_fault_3+0xd6>
    800173da:	00016517          	auipc	a0,0x16
    800173de:	ff650513          	addi	a0,a0,-10 # 8002d3d0 <__func__.0+0x318>
    800173e2:	275130ef          	jal	8002ae56 <printf>
    800173e6:	02900513          	li	a0,41
    800173ea:	75a120ef          	jal	80029b44 <putchar>
    800173ee:	4529                	li	a0,10
    800173f0:	754120ef          	jal	80029b44 <putchar>
    800173f4:	0003d417          	auipc	s0,0x3d
    800173f8:	c1d44403          	lbu	s0,-995(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800173fc:	00016597          	auipc	a1,0x16
    80017400:	f8c58593          	addi	a1,a1,-116 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017404:	cc11                	beqz	s0,80017420 <load_guest_page_fault_3+0x108>
    80017406:	6498                	ld	a4,8(s1)
    80017408:	47d5                	li	a5,21
    TEST_END();
    8001740a:	00016597          	auipc	a1,0x16
    8001740e:	f6e58593          	addi	a1,a1,-146 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017412:	00f70763          	beq	a4,a5,80017420 <load_guest_page_fault_3+0x108>
    80017416:	4401                	li	s0,0
    TEST_END();
    80017418:	00016597          	auipc	a1,0x16
    8001741c:	f7058593          	addi	a1,a1,-144 # 8002d388 <__func__.0+0x2d0>
    80017420:	00016517          	auipc	a0,0x16
    80017424:	01050513          	addi	a0,a0,16 # 8002d430 <__func__.0+0x378>
    80017428:	22f130ef          	jal	8002ae56 <printf>
    8001742c:	4511                	li	a0,4
    8001742e:	adbe90ef          	jal	80000f08 <goto_priv>
    80017432:	bf2ea0ef          	jal	80001824 <reset_state>
}
    80017436:	60e2                	ld	ra,24(sp)
    80017438:	8522                	mv	a0,s0
    8001743a:	6442                	ld	s0,16(sp)
    8001743c:	64a2                	ld	s1,8(sp)
    8001743e:	6105                	addi	sp,sp,32
    80017440:	8082                	ret

0000000080017442 <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    80017442:	1101                	addi	sp,sp,-32

    TEST_START();
    80017444:	00015597          	auipc	a1,0x15
    80017448:	b0458593          	addi	a1,a1,-1276 # 8002bf48 <__func__.33>
    8001744c:	00016517          	auipc	a0,0x16
    80017450:	f4c50513          	addi	a0,a0,-180 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    80017454:	ec06                	sd	ra,24(sp)
    80017456:	e822                	sd	s0,16(sp)
    80017458:	e426                	sd	s1,8(sp)
    TEST_START();
    8001745a:	1fd130ef          	jal	8002ae56 <printf>
    8001745e:	4529                	li	a0,10
    80017460:	6e4120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017464:	450d                	li	a0,3
    80017466:	aa3e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001746a:	976e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001746e:	d56e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017472:	b0ae90ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017476:	4511                	li	a0,4
    80017478:	a91e90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001747c:	000407b7          	lui	a5,0x40
    80017480:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    80017484:	450d                	li	a0,3
    80017486:	a83e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001748a:	4509                	li	a0,2
    8001748c:	99de90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017490:	97de90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017494:	000807b7          	lui	a5,0x80
    80017498:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001749a:	07b6                	slli	a5,a5,0xd
    8001749c:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800174a0:	08200593          	li	a1,130
    800174a4:	0001c617          	auipc	a2,0x1c
    800174a8:	94460613          	addi	a2,a2,-1724 # 80032de8 <__func__.0+0x5d30>
    800174ac:	00016517          	auipc	a0,0x16
    800174b0:	f0450513          	addi	a0,a0,-252 # 8002d3b0 <__func__.0+0x2f8>
    800174b4:	1a3130ef          	jal	8002ae56 <printf>
    800174b8:	0003d797          	auipc	a5,0x3d
    800174bc:	b597c783          	lbu	a5,-1191(a5) # 80054011 <excpt+0x1>
    800174c0:	0003d497          	auipc	s1,0x3d
    800174c4:	b5048493          	addi	s1,s1,-1200 # 80054010 <excpt>
    800174c8:	00016597          	auipc	a1,0x16
    800174cc:	ec058593          	addi	a1,a1,-320 # 8002d388 <__func__.0+0x2d0>
    800174d0:	cf89                	beqz	a5,800174ea <load_guest_page_fault_4+0xa8>
    800174d2:	6498                	ld	a4,8(s1)
    800174d4:	47b5                	li	a5,13
    800174d6:	00016597          	auipc	a1,0x16
    800174da:	ea258593          	addi	a1,a1,-350 # 8002d378 <__func__.0+0x2c0>
    800174de:	00f70663          	beq	a4,a5,800174ea <load_guest_page_fault_4+0xa8>
    800174e2:	00016597          	auipc	a1,0x16
    800174e6:	ea658593          	addi	a1,a1,-346 # 8002d388 <__func__.0+0x2d0>
    800174ea:	00016517          	auipc	a0,0x16
    800174ee:	ede50513          	addi	a0,a0,-290 # 8002d3c8 <__func__.0+0x310>
    800174f2:	165130ef          	jal	8002ae56 <printf>
    800174f6:	0003d797          	auipc	a5,0x3d
    800174fa:	b1b7c783          	lbu	a5,-1253(a5) # 80054011 <excpt+0x1>
    800174fe:	c789                	beqz	a5,80017508 <load_guest_page_fault_4+0xc6>
    80017500:	6498                	ld	a4,8(s1)
    80017502:	47b5                	li	a5,13
    80017504:	00f70c63          	beq	a4,a5,8001751c <load_guest_page_fault_4+0xda>
    80017508:	00016517          	auipc	a0,0x16
    8001750c:	ec850513          	addi	a0,a0,-312 # 8002d3d0 <__func__.0+0x318>
    80017510:	147130ef          	jal	8002ae56 <printf>
    80017514:	02900513          	li	a0,41
    80017518:	62c120ef          	jal	80029b44 <putchar>
    8001751c:	4529                	li	a0,10
    8001751e:	626120ef          	jal	80029b44 <putchar>
    80017522:	0003d417          	auipc	s0,0x3d
    80017526:	aef44403          	lbu	s0,-1297(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001752a:	00016597          	auipc	a1,0x16
    8001752e:	e5e58593          	addi	a1,a1,-418 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017532:	cc11                	beqz	s0,8001754e <load_guest_page_fault_4+0x10c>
    80017534:	6498                	ld	a4,8(s1)
    80017536:	47b5                	li	a5,13
    TEST_END();
    80017538:	00016597          	auipc	a1,0x16
    8001753c:	e4058593          	addi	a1,a1,-448 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017540:	00f70763          	beq	a4,a5,8001754e <load_guest_page_fault_4+0x10c>
    80017544:	4401                	li	s0,0
    TEST_END();
    80017546:	00016597          	auipc	a1,0x16
    8001754a:	e4258593          	addi	a1,a1,-446 # 8002d388 <__func__.0+0x2d0>
    8001754e:	00016517          	auipc	a0,0x16
    80017552:	ee250513          	addi	a0,a0,-286 # 8002d430 <__func__.0+0x378>
    80017556:	101130ef          	jal	8002ae56 <printf>
    8001755a:	4511                	li	a0,4
    8001755c:	9ade90ef          	jal	80000f08 <goto_priv>
    80017560:	ac4ea0ef          	jal	80001824 <reset_state>
}
    80017564:	60e2                	ld	ra,24(sp)
    80017566:	8522                	mv	a0,s0
    80017568:	6442                	ld	s0,16(sp)
    8001756a:	64a2                	ld	s1,8(sp)
    8001756c:	6105                	addi	sp,sp,32
    8001756e:	8082                	ret

0000000080017570 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80017570:	1141                	addi	sp,sp,-16

    TEST_START();
    80017572:	00015597          	auipc	a1,0x15
    80017576:	9ee58593          	addi	a1,a1,-1554 # 8002bf60 <__func__.32>
    8001757a:	00016517          	auipc	a0,0x16
    8001757e:	e1e50513          	addi	a0,a0,-482 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    80017582:	e406                	sd	ra,8(sp)
    80017584:	e022                	sd	s0,0(sp)
    TEST_START();
    80017586:	0d1130ef          	jal	8002ae56 <printf>
    8001758a:	4529                	li	a0,10
    8001758c:	5b8120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017590:	450d                	li	a0,3
    80017592:	977e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017596:	84ae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001759a:	c2ae90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001759e:	9dee90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800175a2:	4511                	li	a0,4
    800175a4:	965e90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800175a8:	000407b7          	lui	a5,0x40
    800175ac:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800175b0:	450d                	li	a0,3
    800175b2:	957e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800175b6:	4509                	li	a0,2
    800175b8:	871e90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800175bc:	851e90ef          	jal	80000e0c <test_setup_except_function>
    800175c0:	000807b7          	lui	a5,0x80
    800175c4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800175c6:	07b6                	slli	a5,a5,0xd
    800175c8:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800175cc:	08200593          	li	a1,130
    800175d0:	0001b617          	auipc	a2,0x1b
    800175d4:	01060613          	addi	a2,a2,16 # 800325e0 <__func__.0+0x5528>
    800175d8:	00016517          	auipc	a0,0x16
    800175dc:	dd850513          	addi	a0,a0,-552 # 8002d3b0 <__func__.0+0x2f8>
    800175e0:	077130ef          	jal	8002ae56 <printf>
    800175e4:	0003d797          	auipc	a5,0x3d
    800175e8:	a2d7c783          	lbu	a5,-1491(a5) # 80054011 <excpt+0x1>
    800175ec:	00016597          	auipc	a1,0x16
    800175f0:	d8c58593          	addi	a1,a1,-628 # 8002d378 <__func__.0+0x2c0>
    800175f4:	c789                	beqz	a5,800175fe <load_guest_page_fault_5+0x8e>
    800175f6:	00016597          	auipc	a1,0x16
    800175fa:	d9258593          	addi	a1,a1,-622 # 8002d388 <__func__.0+0x2d0>
    800175fe:	00016517          	auipc	a0,0x16
    80017602:	dca50513          	addi	a0,a0,-566 # 8002d3c8 <__func__.0+0x310>
    80017606:	051130ef          	jal	8002ae56 <printf>
    8001760a:	0003d797          	auipc	a5,0x3d
    8001760e:	a077c783          	lbu	a5,-1529(a5) # 80054011 <excpt+0x1>
    80017612:	e7a1                	bnez	a5,8001765a <load_guest_page_fault_5+0xea>
    80017614:	4529                	li	a0,10
    80017616:	52e120ef          	jal	80029b44 <putchar>
    8001761a:	0003d797          	auipc	a5,0x3d
    8001761e:	9f77c783          	lbu	a5,-1545(a5) # 80054011 <excpt+0x1>
    80017622:	e795                	bnez	a5,8001764e <load_guest_page_fault_5+0xde>
    80017624:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017626:	00016597          	auipc	a1,0x16
    8001762a:	d5258593          	addi	a1,a1,-686 # 8002d378 <__func__.0+0x2c0>
    8001762e:	00016517          	auipc	a0,0x16
    80017632:	e0250513          	addi	a0,a0,-510 # 8002d430 <__func__.0+0x378>
    80017636:	021130ef          	jal	8002ae56 <printf>
    8001763a:	4511                	li	a0,4
    8001763c:	8cde90ef          	jal	80000f08 <goto_priv>
    80017640:	9e4ea0ef          	jal	80001824 <reset_state>
}
    80017644:	60a2                	ld	ra,8(sp)
    80017646:	8522                	mv	a0,s0
    80017648:	6402                	ld	s0,0(sp)
    8001764a:	0141                	addi	sp,sp,16
    8001764c:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001764e:	4401                	li	s0,0
    TEST_END();
    80017650:	00016597          	auipc	a1,0x16
    80017654:	d3858593          	addi	a1,a1,-712 # 8002d388 <__func__.0+0x2d0>
    80017658:	bfd9                	j	8001762e <load_guest_page_fault_5+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001765a:	00016517          	auipc	a0,0x16
    8001765e:	d7650513          	addi	a0,a0,-650 # 8002d3d0 <__func__.0+0x318>
    80017662:	7f4130ef          	jal	8002ae56 <printf>
    80017666:	02900513          	li	a0,41
    8001766a:	4da120ef          	jal	80029b44 <putchar>
    8001766e:	b75d                	j	80017614 <load_guest_page_fault_5+0xa4>

0000000080017670 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80017670:	1101                	addi	sp,sp,-32

    TEST_START();
    80017672:	00015597          	auipc	a1,0x15
    80017676:	90658593          	addi	a1,a1,-1786 # 8002bf78 <__func__.31>
    8001767a:	00016517          	auipc	a0,0x16
    8001767e:	d1e50513          	addi	a0,a0,-738 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    80017682:	ec06                	sd	ra,24(sp)
    80017684:	e822                	sd	s0,16(sp)
    80017686:	e426                	sd	s1,8(sp)
    TEST_START();
    80017688:	7ce130ef          	jal	8002ae56 <printf>
    8001768c:	4529                	li	a0,10
    8001768e:	4b6120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017692:	450d                	li	a0,3
    80017694:	875e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017698:	f49e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001769c:	b28e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800176a0:	8dce90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800176a4:	4509                	li	a0,2
    800176a6:	863e90ef          	jal	80000f08 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800176aa:	f62e90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800176ae:	001007b7          	lui	a5,0x100
    800176b2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800176b6:	07b2                	slli	a5,a5,0xc
    800176b8:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    800176bc:	08200593          	li	a1,130
    800176c0:	0001b617          	auipc	a2,0x1b
    800176c4:	76860613          	addi	a2,a2,1896 # 80032e28 <__func__.0+0x5d70>
    800176c8:	00016517          	auipc	a0,0x16
    800176cc:	ce850513          	addi	a0,a0,-792 # 8002d3b0 <__func__.0+0x2f8>
    800176d0:	786130ef          	jal	8002ae56 <printf>
    800176d4:	0003d797          	auipc	a5,0x3d
    800176d8:	93d7c783          	lbu	a5,-1731(a5) # 80054011 <excpt+0x1>
    800176dc:	0003d497          	auipc	s1,0x3d
    800176e0:	93448493          	addi	s1,s1,-1740 # 80054010 <excpt>
    800176e4:	00016597          	auipc	a1,0x16
    800176e8:	ca458593          	addi	a1,a1,-860 # 8002d388 <__func__.0+0x2d0>
    800176ec:	cf89                	beqz	a5,80017706 <load_guest_page_fault_6+0x96>
    800176ee:	6498                	ld	a4,8(s1)
    800176f0:	47d5                	li	a5,21
    800176f2:	00016597          	auipc	a1,0x16
    800176f6:	c8658593          	addi	a1,a1,-890 # 8002d378 <__func__.0+0x2c0>
    800176fa:	00f70663          	beq	a4,a5,80017706 <load_guest_page_fault_6+0x96>
    800176fe:	00016597          	auipc	a1,0x16
    80017702:	c8a58593          	addi	a1,a1,-886 # 8002d388 <__func__.0+0x2d0>
    80017706:	00016517          	auipc	a0,0x16
    8001770a:	cc250513          	addi	a0,a0,-830 # 8002d3c8 <__func__.0+0x310>
    8001770e:	748130ef          	jal	8002ae56 <printf>
    80017712:	0003d797          	auipc	a5,0x3d
    80017716:	8ff7c783          	lbu	a5,-1793(a5) # 80054011 <excpt+0x1>
    8001771a:	c789                	beqz	a5,80017724 <load_guest_page_fault_6+0xb4>
    8001771c:	6498                	ld	a4,8(s1)
    8001771e:	47d5                	li	a5,21
    80017720:	00f70c63          	beq	a4,a5,80017738 <load_guest_page_fault_6+0xc8>
    80017724:	00016517          	auipc	a0,0x16
    80017728:	cac50513          	addi	a0,a0,-852 # 8002d3d0 <__func__.0+0x318>
    8001772c:	72a130ef          	jal	8002ae56 <printf>
    80017730:	02900513          	li	a0,41
    80017734:	410120ef          	jal	80029b44 <putchar>
    80017738:	4529                	li	a0,10
    8001773a:	40a120ef          	jal	80029b44 <putchar>
    8001773e:	0003d797          	auipc	a5,0x3d
    80017742:	8d37c783          	lbu	a5,-1837(a5) # 80054011 <excpt+0x1>
    80017746:	4401                	li	s0,0
    80017748:	c789                	beqz	a5,80017752 <load_guest_page_fault_6+0xe2>
    8001774a:	6480                	ld	s0,8(s1)
    8001774c:	142d                	addi	s0,s0,-21
    8001774e:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80017752:	ebae90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80017756:	001007b7          	lui	a5,0x100
    8001775a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001775e:	07b2                	slli	a5,a5,0xc
    80017760:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017764:	08200593          	li	a1,130
    80017768:	0001b617          	auipc	a2,0x1b
    8001776c:	71060613          	addi	a2,a2,1808 # 80032e78 <__func__.0+0x5dc0>
    80017770:	00016517          	auipc	a0,0x16
    80017774:	c4050513          	addi	a0,a0,-960 # 8002d3b0 <__func__.0+0x2f8>
    80017778:	6de130ef          	jal	8002ae56 <printf>
    8001777c:	0003d797          	auipc	a5,0x3d
    80017780:	8957c783          	lbu	a5,-1899(a5) # 80054011 <excpt+0x1>
    80017784:	00016597          	auipc	a1,0x16
    80017788:	c0458593          	addi	a1,a1,-1020 # 8002d388 <__func__.0+0x2d0>
    8001778c:	cf89                	beqz	a5,800177a6 <load_guest_page_fault_6+0x136>
    8001778e:	6498                	ld	a4,8(s1)
    80017790:	47d5                	li	a5,21
    80017792:	00016597          	auipc	a1,0x16
    80017796:	be658593          	addi	a1,a1,-1050 # 8002d378 <__func__.0+0x2c0>
    8001779a:	00f70663          	beq	a4,a5,800177a6 <load_guest_page_fault_6+0x136>
    8001779e:	00016597          	auipc	a1,0x16
    800177a2:	bea58593          	addi	a1,a1,-1046 # 8002d388 <__func__.0+0x2d0>
    800177a6:	00016517          	auipc	a0,0x16
    800177aa:	c2250513          	addi	a0,a0,-990 # 8002d3c8 <__func__.0+0x310>
    800177ae:	6a8130ef          	jal	8002ae56 <printf>
    800177b2:	0003d797          	auipc	a5,0x3d
    800177b6:	85f7c783          	lbu	a5,-1953(a5) # 80054011 <excpt+0x1>
    800177ba:	c789                	beqz	a5,800177c4 <load_guest_page_fault_6+0x154>
    800177bc:	6498                	ld	a4,8(s1)
    800177be:	47d5                	li	a5,21
    800177c0:	00f70c63          	beq	a4,a5,800177d8 <load_guest_page_fault_6+0x168>
    800177c4:	00016517          	auipc	a0,0x16
    800177c8:	c0c50513          	addi	a0,a0,-1012 # 8002d3d0 <__func__.0+0x318>
    800177cc:	68a130ef          	jal	8002ae56 <printf>
    800177d0:	02900513          	li	a0,41
    800177d4:	370120ef          	jal	80029b44 <putchar>
    800177d8:	4529                	li	a0,10
    800177da:	36a120ef          	jal	80029b44 <putchar>
    800177de:	c015                	beqz	s0,80017802 <load_guest_page_fault_6+0x192>
    800177e0:	0003d417          	auipc	s0,0x3d
    800177e4:	83144403          	lbu	s0,-1999(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800177e8:	00016597          	auipc	a1,0x16
    800177ec:	ba058593          	addi	a1,a1,-1120 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800177f0:	cc11                	beqz	s0,8001780c <load_guest_page_fault_6+0x19c>
    800177f2:	6498                	ld	a4,8(s1)
    800177f4:	47d5                	li	a5,21
    TEST_END();
    800177f6:	00016597          	auipc	a1,0x16
    800177fa:	b8258593          	addi	a1,a1,-1150 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800177fe:	00f70763          	beq	a4,a5,8001780c <load_guest_page_fault_6+0x19c>
    80017802:	4401                	li	s0,0
    TEST_END();
    80017804:	00016597          	auipc	a1,0x16
    80017808:	b8458593          	addi	a1,a1,-1148 # 8002d388 <__func__.0+0x2d0>
    8001780c:	00016517          	auipc	a0,0x16
    80017810:	c2450513          	addi	a0,a0,-988 # 8002d430 <__func__.0+0x378>
    80017814:	642130ef          	jal	8002ae56 <printf>
    80017818:	4511                	li	a0,4
    8001781a:	eeee90ef          	jal	80000f08 <goto_priv>
    8001781e:	806ea0ef          	jal	80001824 <reset_state>
}
    80017822:	60e2                	ld	ra,24(sp)
    80017824:	8522                	mv	a0,s0
    80017826:	6442                	ld	s0,16(sp)
    80017828:	64a2                	ld	s1,8(sp)
    8001782a:	6105                	addi	sp,sp,32
    8001782c:	8082                	ret

000000008001782e <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    8001782e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017830:	00014597          	auipc	a1,0x14
    80017834:	76058593          	addi	a1,a1,1888 # 8002bf90 <__func__.30>
    80017838:	00016517          	auipc	a0,0x16
    8001783c:	b6050513          	addi	a0,a0,-1184 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    80017840:	ec06                	sd	ra,24(sp)
    80017842:	e822                	sd	s0,16(sp)
    80017844:	e426                	sd	s1,8(sp)
    TEST_START();
    80017846:	610130ef          	jal	8002ae56 <printf>
    8001784a:	4529                	li	a0,10
    8001784c:	2f8120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017850:	450d                	li	a0,3
    80017852:	eb6e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017856:	d8be80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001785a:	96ae90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001785e:	f1fe80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017862:	4509                	li	a0,2
    80017864:	ea4e90ef          	jal	80000f08 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017868:	da4e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001786c:	000807b7          	lui	a5,0x80
    80017870:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80017874:	001007b7          	lui	a5,0x100
    80017878:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001787c:	07b2                	slli	a5,a5,0xc
    8001787e:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017882:	08200593          	li	a1,130
    80017886:	0001b617          	auipc	a2,0x1b
    8001788a:	64a60613          	addi	a2,a2,1610 # 80032ed0 <__func__.0+0x5e18>
    8001788e:	00016517          	auipc	a0,0x16
    80017892:	b2250513          	addi	a0,a0,-1246 # 8002d3b0 <__func__.0+0x2f8>
    80017896:	5c0130ef          	jal	8002ae56 <printf>
    8001789a:	0003c797          	auipc	a5,0x3c
    8001789e:	7777c783          	lbu	a5,1911(a5) # 80054011 <excpt+0x1>
    800178a2:	0003c497          	auipc	s1,0x3c
    800178a6:	76e48493          	addi	s1,s1,1902 # 80054010 <excpt>
    800178aa:	00016597          	auipc	a1,0x16
    800178ae:	ade58593          	addi	a1,a1,-1314 # 8002d388 <__func__.0+0x2d0>
    800178b2:	cf89                	beqz	a5,800178cc <load_guest_page_fault_7+0x9e>
    800178b4:	6498                	ld	a4,8(s1)
    800178b6:	47d5                	li	a5,21
    800178b8:	00016597          	auipc	a1,0x16
    800178bc:	ac058593          	addi	a1,a1,-1344 # 8002d378 <__func__.0+0x2c0>
    800178c0:	00f70663          	beq	a4,a5,800178cc <load_guest_page_fault_7+0x9e>
    800178c4:	00016597          	auipc	a1,0x16
    800178c8:	ac458593          	addi	a1,a1,-1340 # 8002d388 <__func__.0+0x2d0>
    800178cc:	00016517          	auipc	a0,0x16
    800178d0:	afc50513          	addi	a0,a0,-1284 # 8002d3c8 <__func__.0+0x310>
    800178d4:	582130ef          	jal	8002ae56 <printf>
    800178d8:	0003c797          	auipc	a5,0x3c
    800178dc:	7397c783          	lbu	a5,1849(a5) # 80054011 <excpt+0x1>
    800178e0:	c789                	beqz	a5,800178ea <load_guest_page_fault_7+0xbc>
    800178e2:	6498                	ld	a4,8(s1)
    800178e4:	47d5                	li	a5,21
    800178e6:	00f70c63          	beq	a4,a5,800178fe <load_guest_page_fault_7+0xd0>
    800178ea:	00016517          	auipc	a0,0x16
    800178ee:	ae650513          	addi	a0,a0,-1306 # 8002d3d0 <__func__.0+0x318>
    800178f2:	564130ef          	jal	8002ae56 <printf>
    800178f6:	02900513          	li	a0,41
    800178fa:	24a120ef          	jal	80029b44 <putchar>
    800178fe:	4529                	li	a0,10
    80017900:	244120ef          	jal	80029b44 <putchar>
    80017904:	0003c417          	auipc	s0,0x3c
    80017908:	70d44403          	lbu	s0,1805(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001790c:	00016597          	auipc	a1,0x16
    80017910:	a7c58593          	addi	a1,a1,-1412 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017914:	cc11                	beqz	s0,80017930 <load_guest_page_fault_7+0x102>
    80017916:	6498                	ld	a4,8(s1)
    80017918:	47d5                	li	a5,21
    TEST_END();
    8001791a:	00016597          	auipc	a1,0x16
    8001791e:	a5e58593          	addi	a1,a1,-1442 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017922:	00f70763          	beq	a4,a5,80017930 <load_guest_page_fault_7+0x102>
    80017926:	4401                	li	s0,0
    TEST_END();
    80017928:	00016597          	auipc	a1,0x16
    8001792c:	a6058593          	addi	a1,a1,-1440 # 8002d388 <__func__.0+0x2d0>
    80017930:	00016517          	auipc	a0,0x16
    80017934:	b0050513          	addi	a0,a0,-1280 # 8002d430 <__func__.0+0x378>
    80017938:	51e130ef          	jal	8002ae56 <printf>
    8001793c:	4511                	li	a0,4
    8001793e:	dcae90ef          	jal	80000f08 <goto_priv>
    80017942:	ee3e90ef          	jal	80001824 <reset_state>
}
    80017946:	60e2                	ld	ra,24(sp)
    80017948:	8522                	mv	a0,s0
    8001794a:	6442                	ld	s0,16(sp)
    8001794c:	64a2                	ld	s1,8(sp)
    8001794e:	6105                	addi	sp,sp,32
    80017950:	8082                	ret

0000000080017952 <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    80017952:	1101                	addi	sp,sp,-32

    TEST_START();
    80017954:	00014597          	auipc	a1,0x14
    80017958:	65458593          	addi	a1,a1,1620 # 8002bfa8 <__func__.29>
    8001795c:	00016517          	auipc	a0,0x16
    80017960:	a3c50513          	addi	a0,a0,-1476 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    80017964:	ec06                	sd	ra,24(sp)
    80017966:	e822                	sd	s0,16(sp)
    80017968:	e426                	sd	s1,8(sp)
    TEST_START();
    8001796a:	4ec130ef          	jal	8002ae56 <printf>
    8001796e:	4529                	li	a0,10
    80017970:	1d4120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017974:	450d                	li	a0,3
    80017976:	d92e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001797a:	c67e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001797e:	846e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017982:	dfbe80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017986:	4509                	li	a0,2
    80017988:	d80e90ef          	jal	80000f08 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001798c:	c80e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017990:	000807b7          	lui	a5,0x80
    80017994:	1007a073          	csrs	sstatus,a5
    80017998:	001007b7          	lui	a5,0x100
    8001799c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800179a0:	07b2                	slli	a5,a5,0xc
    800179a2:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800179a6:	08200593          	li	a1,130
    800179aa:	0001b617          	auipc	a2,0x1b
    800179ae:	58660613          	addi	a2,a2,1414 # 80032f30 <__func__.0+0x5e78>
    800179b2:	00016517          	auipc	a0,0x16
    800179b6:	9fe50513          	addi	a0,a0,-1538 # 8002d3b0 <__func__.0+0x2f8>
    800179ba:	49c130ef          	jal	8002ae56 <printf>
    800179be:	0003c797          	auipc	a5,0x3c
    800179c2:	6537c783          	lbu	a5,1619(a5) # 80054011 <excpt+0x1>
    800179c6:	0003c497          	auipc	s1,0x3c
    800179ca:	64a48493          	addi	s1,s1,1610 # 80054010 <excpt>
    800179ce:	00016597          	auipc	a1,0x16
    800179d2:	9ba58593          	addi	a1,a1,-1606 # 8002d388 <__func__.0+0x2d0>
    800179d6:	cf89                	beqz	a5,800179f0 <load_guest_page_fault_8+0x9e>
    800179d8:	6498                	ld	a4,8(s1)
    800179da:	47d5                	li	a5,21
    800179dc:	00016597          	auipc	a1,0x16
    800179e0:	99c58593          	addi	a1,a1,-1636 # 8002d378 <__func__.0+0x2c0>
    800179e4:	00f70663          	beq	a4,a5,800179f0 <load_guest_page_fault_8+0x9e>
    800179e8:	00016597          	auipc	a1,0x16
    800179ec:	9a058593          	addi	a1,a1,-1632 # 8002d388 <__func__.0+0x2d0>
    800179f0:	00016517          	auipc	a0,0x16
    800179f4:	9d850513          	addi	a0,a0,-1576 # 8002d3c8 <__func__.0+0x310>
    800179f8:	45e130ef          	jal	8002ae56 <printf>
    800179fc:	0003c797          	auipc	a5,0x3c
    80017a00:	6157c783          	lbu	a5,1557(a5) # 80054011 <excpt+0x1>
    80017a04:	c789                	beqz	a5,80017a0e <load_guest_page_fault_8+0xbc>
    80017a06:	6498                	ld	a4,8(s1)
    80017a08:	47d5                	li	a5,21
    80017a0a:	00f70c63          	beq	a4,a5,80017a22 <load_guest_page_fault_8+0xd0>
    80017a0e:	00016517          	auipc	a0,0x16
    80017a12:	9c250513          	addi	a0,a0,-1598 # 8002d3d0 <__func__.0+0x318>
    80017a16:	440130ef          	jal	8002ae56 <printf>
    80017a1a:	02900513          	li	a0,41
    80017a1e:	126120ef          	jal	80029b44 <putchar>
    80017a22:	4529                	li	a0,10
    80017a24:	120120ef          	jal	80029b44 <putchar>
    80017a28:	0003c417          	auipc	s0,0x3c
    80017a2c:	5e944403          	lbu	s0,1513(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017a30:	00016597          	auipc	a1,0x16
    80017a34:	95858593          	addi	a1,a1,-1704 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017a38:	cc11                	beqz	s0,80017a54 <load_guest_page_fault_8+0x102>
    80017a3a:	6498                	ld	a4,8(s1)
    80017a3c:	47d5                	li	a5,21
    TEST_END();
    80017a3e:	00016597          	auipc	a1,0x16
    80017a42:	93a58593          	addi	a1,a1,-1734 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017a46:	00f70763          	beq	a4,a5,80017a54 <load_guest_page_fault_8+0x102>
    80017a4a:	4401                	li	s0,0
    TEST_END();
    80017a4c:	00016597          	auipc	a1,0x16
    80017a50:	93c58593          	addi	a1,a1,-1732 # 8002d388 <__func__.0+0x2d0>
    80017a54:	00016517          	auipc	a0,0x16
    80017a58:	9dc50513          	addi	a0,a0,-1572 # 8002d430 <__func__.0+0x378>
    80017a5c:	3fa130ef          	jal	8002ae56 <printf>
    80017a60:	4511                	li	a0,4
    80017a62:	ca6e90ef          	jal	80000f08 <goto_priv>
    80017a66:	dbfe90ef          	jal	80001824 <reset_state>
}
    80017a6a:	60e2                	ld	ra,24(sp)
    80017a6c:	8522                	mv	a0,s0
    80017a6e:	6442                	ld	s0,16(sp)
    80017a70:	64a2                	ld	s1,8(sp)
    80017a72:	6105                	addi	sp,sp,32
    80017a74:	8082                	ret

0000000080017a76 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80017a76:	1101                	addi	sp,sp,-32

    TEST_START();
    80017a78:	00014597          	auipc	a1,0x14
    80017a7c:	54858593          	addi	a1,a1,1352 # 8002bfc0 <__func__.28>
    80017a80:	00016517          	auipc	a0,0x16
    80017a84:	91850513          	addi	a0,a0,-1768 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    80017a88:	ec06                	sd	ra,24(sp)
    80017a8a:	e822                	sd	s0,16(sp)
    80017a8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a8e:	3c8130ef          	jal	8002ae56 <printf>
    80017a92:	4529                	li	a0,10
    80017a94:	0b0120ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017a98:	450d                	li	a0,3
    80017a9a:	c6ee90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017a9e:	b43e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017aa2:	f23e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017aa6:	cd7e80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017aaa:	4511                	li	a0,4
    80017aac:	c5ce90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017ab0:	000407b7          	lui	a5,0x40
    80017ab4:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80017ab8:	4509                	li	a0,2
    80017aba:	c4ee90ef          	jal	80000f08 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017abe:	b4ee90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017ac2:	000807b7          	lui	a5,0x80
    80017ac6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017ac8:	07b6                	slli	a5,a5,0xd
    80017aca:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017ace:	08200593          	li	a1,130
    80017ad2:	0001b617          	auipc	a2,0x1b
    80017ad6:	4ce60613          	addi	a2,a2,1230 # 80032fa0 <__func__.0+0x5ee8>
    80017ada:	00016517          	auipc	a0,0x16
    80017ade:	8d650513          	addi	a0,a0,-1834 # 8002d3b0 <__func__.0+0x2f8>
    80017ae2:	374130ef          	jal	8002ae56 <printf>
    80017ae6:	0003c797          	auipc	a5,0x3c
    80017aea:	52b7c783          	lbu	a5,1323(a5) # 80054011 <excpt+0x1>
    80017aee:	0003c497          	auipc	s1,0x3c
    80017af2:	52248493          	addi	s1,s1,1314 # 80054010 <excpt>
    80017af6:	00016597          	auipc	a1,0x16
    80017afa:	89258593          	addi	a1,a1,-1902 # 8002d388 <__func__.0+0x2d0>
    80017afe:	cf89                	beqz	a5,80017b18 <load_guest_page_fault_9+0xa2>
    80017b00:	6498                	ld	a4,8(s1)
    80017b02:	47b5                	li	a5,13
    80017b04:	00016597          	auipc	a1,0x16
    80017b08:	87458593          	addi	a1,a1,-1932 # 8002d378 <__func__.0+0x2c0>
    80017b0c:	00f70663          	beq	a4,a5,80017b18 <load_guest_page_fault_9+0xa2>
    80017b10:	00016597          	auipc	a1,0x16
    80017b14:	87858593          	addi	a1,a1,-1928 # 8002d388 <__func__.0+0x2d0>
    80017b18:	00016517          	auipc	a0,0x16
    80017b1c:	8b050513          	addi	a0,a0,-1872 # 8002d3c8 <__func__.0+0x310>
    80017b20:	336130ef          	jal	8002ae56 <printf>
    80017b24:	0003c797          	auipc	a5,0x3c
    80017b28:	4ed7c783          	lbu	a5,1261(a5) # 80054011 <excpt+0x1>
    80017b2c:	c789                	beqz	a5,80017b36 <load_guest_page_fault_9+0xc0>
    80017b2e:	6498                	ld	a4,8(s1)
    80017b30:	47b5                	li	a5,13
    80017b32:	00f70c63          	beq	a4,a5,80017b4a <load_guest_page_fault_9+0xd4>
    80017b36:	00016517          	auipc	a0,0x16
    80017b3a:	89a50513          	addi	a0,a0,-1894 # 8002d3d0 <__func__.0+0x318>
    80017b3e:	318130ef          	jal	8002ae56 <printf>
    80017b42:	02900513          	li	a0,41
    80017b46:	7ff110ef          	jal	80029b44 <putchar>
    80017b4a:	4529                	li	a0,10
    80017b4c:	7f9110ef          	jal	80029b44 <putchar>
    80017b50:	0003c417          	auipc	s0,0x3c
    80017b54:	4c144403          	lbu	s0,1217(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017b58:	00016597          	auipc	a1,0x16
    80017b5c:	83058593          	addi	a1,a1,-2000 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017b60:	cc11                	beqz	s0,80017b7c <load_guest_page_fault_9+0x106>
    80017b62:	6498                	ld	a4,8(s1)
    80017b64:	47b5                	li	a5,13
    TEST_END();
    80017b66:	00016597          	auipc	a1,0x16
    80017b6a:	81258593          	addi	a1,a1,-2030 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017b6e:	00f70763          	beq	a4,a5,80017b7c <load_guest_page_fault_9+0x106>
    80017b72:	4401                	li	s0,0
    TEST_END();
    80017b74:	00016597          	auipc	a1,0x16
    80017b78:	81458593          	addi	a1,a1,-2028 # 8002d388 <__func__.0+0x2d0>
    80017b7c:	00016517          	auipc	a0,0x16
    80017b80:	8b450513          	addi	a0,a0,-1868 # 8002d430 <__func__.0+0x378>
    80017b84:	2d2130ef          	jal	8002ae56 <printf>
    80017b88:	4511                	li	a0,4
    80017b8a:	b7ee90ef          	jal	80000f08 <goto_priv>
    80017b8e:	c97e90ef          	jal	80001824 <reset_state>
}
    80017b92:	60e2                	ld	ra,24(sp)
    80017b94:	8522                	mv	a0,s0
    80017b96:	6442                	ld	s0,16(sp)
    80017b98:	64a2                	ld	s1,8(sp)
    80017b9a:	6105                	addi	sp,sp,32
    80017b9c:	8082                	ret

0000000080017b9e <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80017b9e:	1141                	addi	sp,sp,-16

    TEST_START();
    80017ba0:	00014597          	auipc	a1,0x14
    80017ba4:	43858593          	addi	a1,a1,1080 # 8002bfd8 <__func__.27>
    80017ba8:	00015517          	auipc	a0,0x15
    80017bac:	7f050513          	addi	a0,a0,2032 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80017bb0:	e406                	sd	ra,8(sp)
    80017bb2:	e022                	sd	s0,0(sp)
    TEST_START();
    80017bb4:	2a2130ef          	jal	8002ae56 <printf>
    80017bb8:	4529                	li	a0,10
    80017bba:	78b110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017bbe:	450d                	li	a0,3
    80017bc0:	b48e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017bc4:	a1de80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017bc8:	dfde80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017bcc:	bb1e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017bd0:	4511                	li	a0,4
    80017bd2:	b36e90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017bd6:	000407b7          	lui	a5,0x40
    80017bda:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017bde:	4509                	li	a0,2
    80017be0:	b28e90ef          	jal	80000f08 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017be4:	a28e90ef          	jal	80000e0c <test_setup_except_function>
    80017be8:	000807b7          	lui	a5,0x80
    80017bec:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017bee:	07b6                	slli	a5,a5,0xd
    80017bf0:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bf4:	08200593          	li	a1,130
    80017bf8:	0001b617          	auipc	a2,0x1b
    80017bfc:	3e060613          	addi	a2,a2,992 # 80032fd8 <__func__.0+0x5f20>
    80017c00:	00015517          	auipc	a0,0x15
    80017c04:	7b050513          	addi	a0,a0,1968 # 8002d3b0 <__func__.0+0x2f8>
    80017c08:	24e130ef          	jal	8002ae56 <printf>
    80017c0c:	0003c797          	auipc	a5,0x3c
    80017c10:	4057c783          	lbu	a5,1029(a5) # 80054011 <excpt+0x1>
    80017c14:	00015597          	auipc	a1,0x15
    80017c18:	76458593          	addi	a1,a1,1892 # 8002d378 <__func__.0+0x2c0>
    80017c1c:	c789                	beqz	a5,80017c26 <load_guest_page_fault_10+0x88>
    80017c1e:	00015597          	auipc	a1,0x15
    80017c22:	76a58593          	addi	a1,a1,1898 # 8002d388 <__func__.0+0x2d0>
    80017c26:	00015517          	auipc	a0,0x15
    80017c2a:	7a250513          	addi	a0,a0,1954 # 8002d3c8 <__func__.0+0x310>
    80017c2e:	228130ef          	jal	8002ae56 <printf>
    80017c32:	0003c797          	auipc	a5,0x3c
    80017c36:	3df7c783          	lbu	a5,991(a5) # 80054011 <excpt+0x1>
    80017c3a:	e7a1                	bnez	a5,80017c82 <load_guest_page_fault_10+0xe4>
    80017c3c:	4529                	li	a0,10
    80017c3e:	707110ef          	jal	80029b44 <putchar>
    80017c42:	0003c797          	auipc	a5,0x3c
    80017c46:	3cf7c783          	lbu	a5,975(a5) # 80054011 <excpt+0x1>
    80017c4a:	e795                	bnez	a5,80017c76 <load_guest_page_fault_10+0xd8>
    80017c4c:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017c4e:	00015597          	auipc	a1,0x15
    80017c52:	72a58593          	addi	a1,a1,1834 # 8002d378 <__func__.0+0x2c0>
    80017c56:	00015517          	auipc	a0,0x15
    80017c5a:	7da50513          	addi	a0,a0,2010 # 8002d430 <__func__.0+0x378>
    80017c5e:	1f8130ef          	jal	8002ae56 <printf>
    80017c62:	4511                	li	a0,4
    80017c64:	aa4e90ef          	jal	80000f08 <goto_priv>
    80017c68:	bbde90ef          	jal	80001824 <reset_state>
}
    80017c6c:	60a2                	ld	ra,8(sp)
    80017c6e:	8522                	mv	a0,s0
    80017c70:	6402                	ld	s0,0(sp)
    80017c72:	0141                	addi	sp,sp,16
    80017c74:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017c76:	4401                	li	s0,0
    TEST_END();
    80017c78:	00015597          	auipc	a1,0x15
    80017c7c:	71058593          	addi	a1,a1,1808 # 8002d388 <__func__.0+0x2d0>
    80017c80:	bfd9                	j	80017c56 <load_guest_page_fault_10+0xb8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017c82:	00015517          	auipc	a0,0x15
    80017c86:	74e50513          	addi	a0,a0,1870 # 8002d3d0 <__func__.0+0x318>
    80017c8a:	1cc130ef          	jal	8002ae56 <printf>
    80017c8e:	02900513          	li	a0,41
    80017c92:	6b3110ef          	jal	80029b44 <putchar>
    80017c96:	b75d                	j	80017c3c <load_guest_page_fault_10+0x9e>

0000000080017c98 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80017c98:	1101                	addi	sp,sp,-32

    TEST_START();
    80017c9a:	00014597          	auipc	a1,0x14
    80017c9e:	35e58593          	addi	a1,a1,862 # 8002bff8 <__func__.26>
    80017ca2:	00015517          	auipc	a0,0x15
    80017ca6:	6f650513          	addi	a0,a0,1782 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80017caa:	ec06                	sd	ra,24(sp)
    80017cac:	e822                	sd	s0,16(sp)
    80017cae:	e426                	sd	s1,8(sp)
    TEST_START();
    80017cb0:	1a6130ef          	jal	8002ae56 <printf>
    80017cb4:	4529                	li	a0,10
    80017cb6:	68f110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017cba:	450d                	li	a0,3
    80017cbc:	a4ce90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017cc0:	921e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017cc4:	d01e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017cc8:	ab5e80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017ccc:	4511                	li	a0,4
    80017cce:	a3ae90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017cd2:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017cd6:	450d                	li	a0,3
    80017cd8:	a30e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017cdc:	4509                	li	a0,2
    80017cde:	94ae90ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017ce2:	92ae90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017ce6:	400197b7          	lui	a5,0x40019
    80017cea:	078a                	slli	a5,a5,0x2
    80017cec:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017cf0:	08200593          	li	a1,130
    80017cf4:	0001b617          	auipc	a2,0x1b
    80017cf8:	f7460613          	addi	a2,a2,-140 # 80032c68 <__func__.0+0x5bb0>
    80017cfc:	00015517          	auipc	a0,0x15
    80017d00:	6b450513          	addi	a0,a0,1716 # 8002d3b0 <__func__.0+0x2f8>
    80017d04:	152130ef          	jal	8002ae56 <printf>
    80017d08:	0003c797          	auipc	a5,0x3c
    80017d0c:	3097c783          	lbu	a5,777(a5) # 80054011 <excpt+0x1>
    80017d10:	0003c497          	auipc	s1,0x3c
    80017d14:	30048493          	addi	s1,s1,768 # 80054010 <excpt>
    80017d18:	00015597          	auipc	a1,0x15
    80017d1c:	67058593          	addi	a1,a1,1648 # 8002d388 <__func__.0+0x2d0>
    80017d20:	cf89                	beqz	a5,80017d3a <load_guest_page_fault_11+0xa2>
    80017d22:	6498                	ld	a4,8(s1)
    80017d24:	47d5                	li	a5,21
    80017d26:	00015597          	auipc	a1,0x15
    80017d2a:	65258593          	addi	a1,a1,1618 # 8002d378 <__func__.0+0x2c0>
    80017d2e:	00f70663          	beq	a4,a5,80017d3a <load_guest_page_fault_11+0xa2>
    80017d32:	00015597          	auipc	a1,0x15
    80017d36:	65658593          	addi	a1,a1,1622 # 8002d388 <__func__.0+0x2d0>
    80017d3a:	00015517          	auipc	a0,0x15
    80017d3e:	68e50513          	addi	a0,a0,1678 # 8002d3c8 <__func__.0+0x310>
    80017d42:	114130ef          	jal	8002ae56 <printf>
    80017d46:	0003c797          	auipc	a5,0x3c
    80017d4a:	2cb7c783          	lbu	a5,715(a5) # 80054011 <excpt+0x1>
    80017d4e:	c789                	beqz	a5,80017d58 <load_guest_page_fault_11+0xc0>
    80017d50:	6498                	ld	a4,8(s1)
    80017d52:	47d5                	li	a5,21
    80017d54:	00f70c63          	beq	a4,a5,80017d6c <load_guest_page_fault_11+0xd4>
    80017d58:	00015517          	auipc	a0,0x15
    80017d5c:	67850513          	addi	a0,a0,1656 # 8002d3d0 <__func__.0+0x318>
    80017d60:	0f6130ef          	jal	8002ae56 <printf>
    80017d64:	02900513          	li	a0,41
    80017d68:	5dd110ef          	jal	80029b44 <putchar>
    80017d6c:	4529                	li	a0,10
    80017d6e:	5d7110ef          	jal	80029b44 <putchar>
    80017d72:	0003c417          	auipc	s0,0x3c
    80017d76:	29f44403          	lbu	s0,671(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80017d7a:	00015597          	auipc	a1,0x15
    80017d7e:	60e58593          	addi	a1,a1,1550 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d82:	cc11                	beqz	s0,80017d9e <load_guest_page_fault_11+0x106>
    80017d84:	6498                	ld	a4,8(s1)
    80017d86:	47d5                	li	a5,21
    TEST_END();
    80017d88:	00015597          	auipc	a1,0x15
    80017d8c:	5f058593          	addi	a1,a1,1520 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d90:	00f70763          	beq	a4,a5,80017d9e <load_guest_page_fault_11+0x106>
    80017d94:	4401                	li	s0,0
    TEST_END();
    80017d96:	00015597          	auipc	a1,0x15
    80017d9a:	5f258593          	addi	a1,a1,1522 # 8002d388 <__func__.0+0x2d0>
    80017d9e:	00015517          	auipc	a0,0x15
    80017da2:	69250513          	addi	a0,a0,1682 # 8002d430 <__func__.0+0x378>
    80017da6:	0b0130ef          	jal	8002ae56 <printf>
    80017daa:	4511                	li	a0,4
    80017dac:	95ce90ef          	jal	80000f08 <goto_priv>
    80017db0:	a75e90ef          	jal	80001824 <reset_state>
}
    80017db4:	60e2                	ld	ra,24(sp)
    80017db6:	8522                	mv	a0,s0
    80017db8:	6442                	ld	s0,16(sp)
    80017dba:	64a2                	ld	s1,8(sp)
    80017dbc:	6105                	addi	sp,sp,32
    80017dbe:	8082                	ret

0000000080017dc0 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80017dc0:	1101                	addi	sp,sp,-32

    TEST_START();
    80017dc2:	00014597          	auipc	a1,0x14
    80017dc6:	25658593          	addi	a1,a1,598 # 8002c018 <__func__.25>
    80017dca:	00015517          	auipc	a0,0x15
    80017dce:	5ce50513          	addi	a0,a0,1486 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    80017dd2:	ec06                	sd	ra,24(sp)
    80017dd4:	e822                	sd	s0,16(sp)
    80017dd6:	e426                	sd	s1,8(sp)
    TEST_START();
    80017dd8:	07e130ef          	jal	8002ae56 <printf>
    80017ddc:	4529                	li	a0,10
    80017dde:	567110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017de2:	450d                	li	a0,3
    80017de4:	924e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017de8:	ff8e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017dec:	bd9e80ef          	jal	800009c4 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017df0:	4511                	li	a0,4
    80017df2:	916e90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017df6:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017dfa:	450d                	li	a0,3
    80017dfc:	90ce90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017e00:	4509                	li	a0,2
    80017e02:	826e90ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017e06:	806e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017e0a:	000807b7          	lui	a5,0x80
    80017e0e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017e12:	2000d5b7          	lui	a1,0x2000d
    80017e16:	058e                	slli	a1,a1,0x3
    80017e18:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    80017e1c:	0001c517          	auipc	a0,0x1c
    80017e20:	ba450513          	addi	a0,a0,-1116 # 800339c0 <__func__.0+0x6908>
    80017e24:	032130ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    80017e28:	0003c417          	auipc	s0,0x3c
    80017e2c:	1e840413          	addi	s0,s0,488 # 80054010 <excpt>
    80017e30:	640c                	ld	a1,8(s0)
    80017e32:	00016517          	auipc	a0,0x16
    80017e36:	0ee50513          	addi	a0,a0,238 # 8002df20 <__func__.0+0xe68>
    80017e3a:	01c130ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.triggered);
    80017e3e:	0003c597          	auipc	a1,0x3c
    80017e42:	1d35c583          	lbu	a1,467(a1) # 80054011 <excpt+0x1>
    80017e46:	00016517          	auipc	a0,0x16
    80017e4a:	0da50513          	addi	a0,a0,218 # 8002df20 <__func__.0+0xe68>
    80017e4e:	008130ef          	jal	8002ae56 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e52:	08200593          	li	a1,130
    80017e56:	0001b617          	auipc	a2,0x1b
    80017e5a:	ec260613          	addi	a2,a2,-318 # 80032d18 <__func__.0+0x5c60>
    80017e5e:	00015517          	auipc	a0,0x15
    80017e62:	55250513          	addi	a0,a0,1362 # 8002d3b0 <__func__.0+0x2f8>
    80017e66:	7f1120ef          	jal	8002ae56 <printf>
    80017e6a:	0003c797          	auipc	a5,0x3c
    80017e6e:	1a77c783          	lbu	a5,423(a5) # 80054011 <excpt+0x1>
    80017e72:	00015597          	auipc	a1,0x15
    80017e76:	51658593          	addi	a1,a1,1302 # 8002d388 <__func__.0+0x2d0>
    80017e7a:	cf89                	beqz	a5,80017e94 <load_guest_page_fault_12+0xd4>
    80017e7c:	6418                	ld	a4,8(s0)
    80017e7e:	47d5                	li	a5,21
    80017e80:	00015597          	auipc	a1,0x15
    80017e84:	4f858593          	addi	a1,a1,1272 # 8002d378 <__func__.0+0x2c0>
    80017e88:	00f70663          	beq	a4,a5,80017e94 <load_guest_page_fault_12+0xd4>
    80017e8c:	00015597          	auipc	a1,0x15
    80017e90:	4fc58593          	addi	a1,a1,1276 # 8002d388 <__func__.0+0x2d0>
    80017e94:	00015517          	auipc	a0,0x15
    80017e98:	53450513          	addi	a0,a0,1332 # 8002d3c8 <__func__.0+0x310>
    80017e9c:	7bb120ef          	jal	8002ae56 <printf>
    80017ea0:	0003c797          	auipc	a5,0x3c
    80017ea4:	1717c783          	lbu	a5,369(a5) # 80054011 <excpt+0x1>
    80017ea8:	c789                	beqz	a5,80017eb2 <load_guest_page_fault_12+0xf2>
    80017eaa:	6418                	ld	a4,8(s0)
    80017eac:	47d5                	li	a5,21
    80017eae:	00f70c63          	beq	a4,a5,80017ec6 <load_guest_page_fault_12+0x106>
    80017eb2:	00015517          	auipc	a0,0x15
    80017eb6:	51e50513          	addi	a0,a0,1310 # 8002d3d0 <__func__.0+0x318>
    80017eba:	79d120ef          	jal	8002ae56 <printf>
    80017ebe:	02900513          	li	a0,41
    80017ec2:	483110ef          	jal	80029b44 <putchar>
    80017ec6:	4529                	li	a0,10
    80017ec8:	47d110ef          	jal	80029b44 <putchar>
    80017ecc:	0003c497          	auipc	s1,0x3c
    80017ed0:	1454c483          	lbu	s1,325(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017ed4:	00015597          	auipc	a1,0x15
    80017ed8:	4b458593          	addi	a1,a1,1204 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017edc:	cc91                	beqz	s1,80017ef8 <load_guest_page_fault_12+0x138>
    80017ede:	6418                	ld	a4,8(s0)
    80017ee0:	47d5                	li	a5,21
    TEST_END();
    80017ee2:	00015597          	auipc	a1,0x15
    80017ee6:	49658593          	addi	a1,a1,1174 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017eea:	00f70763          	beq	a4,a5,80017ef8 <load_guest_page_fault_12+0x138>
    80017eee:	4481                	li	s1,0
    TEST_END();
    80017ef0:	00015597          	auipc	a1,0x15
    80017ef4:	49858593          	addi	a1,a1,1176 # 8002d388 <__func__.0+0x2d0>
    80017ef8:	00015517          	auipc	a0,0x15
    80017efc:	53850513          	addi	a0,a0,1336 # 8002d430 <__func__.0+0x378>
    80017f00:	757120ef          	jal	8002ae56 <printf>
    80017f04:	4511                	li	a0,4
    80017f06:	802e90ef          	jal	80000f08 <goto_priv>
    80017f0a:	91be90ef          	jal	80001824 <reset_state>
}
    80017f0e:	60e2                	ld	ra,24(sp)
    80017f10:	6442                	ld	s0,16(sp)
    80017f12:	8526                	mv	a0,s1
    80017f14:	64a2                	ld	s1,8(sp)
    80017f16:	6105                	addi	sp,sp,32
    80017f18:	8082                	ret

0000000080017f1a <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80017f1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80017f1c:	00014597          	auipc	a1,0x14
    80017f20:	11c58593          	addi	a1,a1,284 # 8002c038 <__func__.24>
    80017f24:	00015517          	auipc	a0,0x15
    80017f28:	47450513          	addi	a0,a0,1140 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80017f2c:	ec06                	sd	ra,24(sp)
    80017f2e:	e822                	sd	s0,16(sp)
    80017f30:	e426                	sd	s1,8(sp)
    TEST_START();
    80017f32:	725120ef          	jal	8002ae56 <printf>
    80017f36:	4529                	li	a0,10
    80017f38:	40d110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80017f3c:	450d                	li	a0,3
    80017f3e:	fcbe80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017f42:	e9ee80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017f46:	a7fe80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017f4a:	833e80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017f4e:	4511                	li	a0,4
    80017f50:	fb9e80ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017f54:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017f58:	450d                	li	a0,3
    80017f5a:	fafe80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017f5e:	4509                	li	a0,2
    80017f60:	ec9e80ef          	jal	80000e28 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017f64:	ea9e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017f68:	000807b7          	lui	a5,0x80
    80017f6c:	1007a073          	csrs	sstatus,a5
    80017f70:	400197b7          	lui	a5,0x40019
    80017f74:	078a                	slli	a5,a5,0x2
    80017f76:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f7a:	08200593          	li	a1,130
    80017f7e:	0001b617          	auipc	a2,0x1b
    80017f82:	dfa60613          	addi	a2,a2,-518 # 80032d78 <__func__.0+0x5cc0>
    80017f86:	00015517          	auipc	a0,0x15
    80017f8a:	42a50513          	addi	a0,a0,1066 # 8002d3b0 <__func__.0+0x2f8>
    80017f8e:	6c9120ef          	jal	8002ae56 <printf>
    80017f92:	0003c797          	auipc	a5,0x3c
    80017f96:	07f7c783          	lbu	a5,127(a5) # 80054011 <excpt+0x1>
    80017f9a:	0003c497          	auipc	s1,0x3c
    80017f9e:	07648493          	addi	s1,s1,118 # 80054010 <excpt>
    80017fa2:	00015597          	auipc	a1,0x15
    80017fa6:	3e658593          	addi	a1,a1,998 # 8002d388 <__func__.0+0x2d0>
    80017faa:	cf89                	beqz	a5,80017fc4 <load_guest_page_fault_13+0xaa>
    80017fac:	6498                	ld	a4,8(s1)
    80017fae:	47d5                	li	a5,21
    80017fb0:	00015597          	auipc	a1,0x15
    80017fb4:	3c858593          	addi	a1,a1,968 # 8002d378 <__func__.0+0x2c0>
    80017fb8:	00f70663          	beq	a4,a5,80017fc4 <load_guest_page_fault_13+0xaa>
    80017fbc:	00015597          	auipc	a1,0x15
    80017fc0:	3cc58593          	addi	a1,a1,972 # 8002d388 <__func__.0+0x2d0>
    80017fc4:	00015517          	auipc	a0,0x15
    80017fc8:	40450513          	addi	a0,a0,1028 # 8002d3c8 <__func__.0+0x310>
    80017fcc:	68b120ef          	jal	8002ae56 <printf>
    80017fd0:	0003c797          	auipc	a5,0x3c
    80017fd4:	0417c783          	lbu	a5,65(a5) # 80054011 <excpt+0x1>
    80017fd8:	c789                	beqz	a5,80017fe2 <load_guest_page_fault_13+0xc8>
    80017fda:	6498                	ld	a4,8(s1)
    80017fdc:	47d5                	li	a5,21
    80017fde:	00f70c63          	beq	a4,a5,80017ff6 <load_guest_page_fault_13+0xdc>
    80017fe2:	00015517          	auipc	a0,0x15
    80017fe6:	3ee50513          	addi	a0,a0,1006 # 8002d3d0 <__func__.0+0x318>
    80017fea:	66d120ef          	jal	8002ae56 <printf>
    80017fee:	02900513          	li	a0,41
    80017ff2:	353110ef          	jal	80029b44 <putchar>
    80017ff6:	4529                	li	a0,10
    80017ff8:	34d110ef          	jal	80029b44 <putchar>
    80017ffc:	0003c417          	auipc	s0,0x3c
    80018000:	01544403          	lbu	s0,21(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80018004:	00015597          	auipc	a1,0x15
    80018008:	38458593          	addi	a1,a1,900 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001800c:	cc11                	beqz	s0,80018028 <load_guest_page_fault_13+0x10e>
    8001800e:	6498                	ld	a4,8(s1)
    80018010:	47d5                	li	a5,21
    TEST_END();
    80018012:	00015597          	auipc	a1,0x15
    80018016:	36658593          	addi	a1,a1,870 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001801a:	00f70763          	beq	a4,a5,80018028 <load_guest_page_fault_13+0x10e>
    8001801e:	4401                	li	s0,0
    TEST_END();
    80018020:	00015597          	auipc	a1,0x15
    80018024:	36858593          	addi	a1,a1,872 # 8002d388 <__func__.0+0x2d0>
    80018028:	00015517          	auipc	a0,0x15
    8001802c:	40850513          	addi	a0,a0,1032 # 8002d430 <__func__.0+0x378>
    80018030:	627120ef          	jal	8002ae56 <printf>
    80018034:	4511                	li	a0,4
    80018036:	ed3e80ef          	jal	80000f08 <goto_priv>
    8001803a:	feae90ef          	jal	80001824 <reset_state>
}
    8001803e:	60e2                	ld	ra,24(sp)
    80018040:	8522                	mv	a0,s0
    80018042:	6442                	ld	s0,16(sp)
    80018044:	64a2                	ld	s1,8(sp)
    80018046:	6105                	addi	sp,sp,32
    80018048:	8082                	ret

000000008001804a <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    8001804a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001804c:	00014597          	auipc	a1,0x14
    80018050:	00c58593          	addi	a1,a1,12 # 8002c058 <__func__.23>
    80018054:	00015517          	auipc	a0,0x15
    80018058:	34450513          	addi	a0,a0,836 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    8001805c:	ec06                	sd	ra,24(sp)
    8001805e:	e822                	sd	s0,16(sp)
    80018060:	e426                	sd	s1,8(sp)
    TEST_START();
    80018062:	5f5120ef          	jal	8002ae56 <printf>
    80018066:	4529                	li	a0,10
    80018068:	2dd110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001806c:	450d                	li	a0,3
    8001806e:	e9be80ef          	jal	80000f08 <goto_priv>
    hpt_init();
    80018072:	953e80ef          	jal	800009c4 <hpt_init>
    hspt_init();
    80018076:	d6ae80ef          	jal	800005e0 <hspt_init>
    vspt_init();
    8001807a:	f02e80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    8001807e:	4511                	li	a0,4
    80018080:	e89e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018084:	000407b7          	lui	a5,0x40
    80018088:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    8001808c:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80018090:	450d                	li	a0,3
    80018092:	e77e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018096:	4509                	li	a0,2
    80018098:	d91e80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001809c:	d71e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800180a0:	001007b7          	lui	a5,0x100
    800180a4:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    800180a8:	07b2                	slli	a5,a5,0xc
    800180aa:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800180ae:	0003c417          	auipc	s0,0x3c
    800180b2:	f6240413          	addi	s0,s0,-158 # 80054010 <excpt>
    800180b6:	640c                	ld	a1,8(s0)
    800180b8:	00016517          	auipc	a0,0x16
    800180bc:	e6850513          	addi	a0,a0,-408 # 8002df20 <__func__.0+0xe68>
    800180c0:	597120ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.triggered);
    800180c4:	0003c597          	auipc	a1,0x3c
    800180c8:	f4d5c583          	lbu	a1,-179(a1) # 80054011 <excpt+0x1>
    800180cc:	00016517          	auipc	a0,0x16
    800180d0:	e5450513          	addi	a0,a0,-428 # 8002df20 <__func__.0+0xe68>
    800180d4:	583120ef          	jal	8002ae56 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180d8:	08200593          	li	a1,130
    800180dc:	0001b617          	auipc	a2,0x1b
    800180e0:	f3460613          	addi	a2,a2,-204 # 80033010 <__func__.0+0x5f58>
    800180e4:	00015517          	auipc	a0,0x15
    800180e8:	2cc50513          	addi	a0,a0,716 # 8002d3b0 <__func__.0+0x2f8>
    800180ec:	56b120ef          	jal	8002ae56 <printf>
    800180f0:	0003c797          	auipc	a5,0x3c
    800180f4:	f217c783          	lbu	a5,-223(a5) # 80054011 <excpt+0x1>
    800180f8:	00015597          	auipc	a1,0x15
    800180fc:	29058593          	addi	a1,a1,656 # 8002d388 <__func__.0+0x2d0>
    80018100:	cf89                	beqz	a5,8001811a <load_guest_page_fault_14+0xd0>
    80018102:	6418                	ld	a4,8(s0)
    80018104:	47d5                	li	a5,21
    80018106:	00015597          	auipc	a1,0x15
    8001810a:	27258593          	addi	a1,a1,626 # 8002d378 <__func__.0+0x2c0>
    8001810e:	00f70663          	beq	a4,a5,8001811a <load_guest_page_fault_14+0xd0>
    80018112:	00015597          	auipc	a1,0x15
    80018116:	27658593          	addi	a1,a1,630 # 8002d388 <__func__.0+0x2d0>
    8001811a:	00015517          	auipc	a0,0x15
    8001811e:	2ae50513          	addi	a0,a0,686 # 8002d3c8 <__func__.0+0x310>
    80018122:	535120ef          	jal	8002ae56 <printf>
    80018126:	0003c797          	auipc	a5,0x3c
    8001812a:	eeb7c783          	lbu	a5,-277(a5) # 80054011 <excpt+0x1>
    8001812e:	c789                	beqz	a5,80018138 <load_guest_page_fault_14+0xee>
    80018130:	6418                	ld	a4,8(s0)
    80018132:	47d5                	li	a5,21
    80018134:	00f70c63          	beq	a4,a5,8001814c <load_guest_page_fault_14+0x102>
    80018138:	00015517          	auipc	a0,0x15
    8001813c:	29850513          	addi	a0,a0,664 # 8002d3d0 <__func__.0+0x318>
    80018140:	517120ef          	jal	8002ae56 <printf>
    80018144:	02900513          	li	a0,41
    80018148:	1fd110ef          	jal	80029b44 <putchar>
    8001814c:	4529                	li	a0,10
    8001814e:	1f7110ef          	jal	80029b44 <putchar>
    80018152:	0003c497          	auipc	s1,0x3c
    80018156:	ebf4c483          	lbu	s1,-321(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001815a:	00015597          	auipc	a1,0x15
    8001815e:	22e58593          	addi	a1,a1,558 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018162:	cc91                	beqz	s1,8001817e <load_guest_page_fault_14+0x134>
    80018164:	6418                	ld	a4,8(s0)
    80018166:	47d5                	li	a5,21
    TEST_END();
    80018168:	00015597          	auipc	a1,0x15
    8001816c:	21058593          	addi	a1,a1,528 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018170:	00f70763          	beq	a4,a5,8001817e <load_guest_page_fault_14+0x134>
    80018174:	4481                	li	s1,0
    TEST_END();
    80018176:	00015597          	auipc	a1,0x15
    8001817a:	21258593          	addi	a1,a1,530 # 8002d388 <__func__.0+0x2d0>
    8001817e:	00015517          	auipc	a0,0x15
    80018182:	2b250513          	addi	a0,a0,690 # 8002d430 <__func__.0+0x378>
    80018186:	4d1120ef          	jal	8002ae56 <printf>
    8001818a:	4511                	li	a0,4
    8001818c:	d7de80ef          	jal	80000f08 <goto_priv>
    80018190:	e94e90ef          	jal	80001824 <reset_state>
}
    80018194:	60e2                	ld	ra,24(sp)
    80018196:	6442                	ld	s0,16(sp)
    80018198:	8526                	mv	a0,s1
    8001819a:	64a2                	ld	s1,8(sp)
    8001819c:	6105                	addi	sp,sp,32
    8001819e:	8082                	ret

00000000800181a0 <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    800181a0:	1141                	addi	sp,sp,-16

    TEST_START();
    800181a2:	00014597          	auipc	a1,0x14
    800181a6:	ed658593          	addi	a1,a1,-298 # 8002c078 <__func__.22>
    800181aa:	00015517          	auipc	a0,0x15
    800181ae:	1ee50513          	addi	a0,a0,494 # 8002d398 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    800181b2:	e406                	sd	ra,8(sp)
    800181b4:	e022                	sd	s0,0(sp)
    TEST_START();
    800181b6:	4a1120ef          	jal	8002ae56 <printf>
    800181ba:	4529                	li	a0,10
    800181bc:	189110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800181c0:	450d                	li	a0,3
    800181c2:	d47e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800181c6:	c1ae80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800181ca:	ffae80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800181ce:	daee80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800181d2:	4511                	li	a0,4
    800181d4:	d35e80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800181d8:	000407b7          	lui	a5,0x40
    800181dc:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    800181e0:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800181e4:	450d                	li	a0,3
    800181e6:	d23e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800181ea:	4509                	li	a0,2
    800181ec:	c3de80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800181f0:	c1de80ef          	jal	80000e0c <test_setup_except_function>
    800181f4:	000807b7          	lui	a5,0x80
    800181f8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800181fa:	07b6                	slli	a5,a5,0xd
    800181fc:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018200:	08200593          	li	a1,130
    80018204:	0001a617          	auipc	a2,0x1a
    80018208:	3dc60613          	addi	a2,a2,988 # 800325e0 <__func__.0+0x5528>
    8001820c:	00015517          	auipc	a0,0x15
    80018210:	1a450513          	addi	a0,a0,420 # 8002d3b0 <__func__.0+0x2f8>
    80018214:	443120ef          	jal	8002ae56 <printf>
    80018218:	0003c797          	auipc	a5,0x3c
    8001821c:	df97c783          	lbu	a5,-519(a5) # 80054011 <excpt+0x1>
    80018220:	00015597          	auipc	a1,0x15
    80018224:	15858593          	addi	a1,a1,344 # 8002d378 <__func__.0+0x2c0>
    80018228:	c789                	beqz	a5,80018232 <load_guest_page_fault_15+0x92>
    8001822a:	00015597          	auipc	a1,0x15
    8001822e:	15e58593          	addi	a1,a1,350 # 8002d388 <__func__.0+0x2d0>
    80018232:	00015517          	auipc	a0,0x15
    80018236:	19650513          	addi	a0,a0,406 # 8002d3c8 <__func__.0+0x310>
    8001823a:	41d120ef          	jal	8002ae56 <printf>
    8001823e:	0003c797          	auipc	a5,0x3c
    80018242:	dd37c783          	lbu	a5,-557(a5) # 80054011 <excpt+0x1>
    80018246:	e7a1                	bnez	a5,8001828e <load_guest_page_fault_15+0xee>
    80018248:	4529                	li	a0,10
    8001824a:	0fb110ef          	jal	80029b44 <putchar>
    8001824e:	0003c797          	auipc	a5,0x3c
    80018252:	dc37c783          	lbu	a5,-573(a5) # 80054011 <excpt+0x1>
    80018256:	e795                	bnez	a5,80018282 <load_guest_page_fault_15+0xe2>
    80018258:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001825a:	00015597          	auipc	a1,0x15
    8001825e:	11e58593          	addi	a1,a1,286 # 8002d378 <__func__.0+0x2c0>
    80018262:	00015517          	auipc	a0,0x15
    80018266:	1ce50513          	addi	a0,a0,462 # 8002d430 <__func__.0+0x378>
    8001826a:	3ed120ef          	jal	8002ae56 <printf>
    8001826e:	4511                	li	a0,4
    80018270:	c99e80ef          	jal	80000f08 <goto_priv>
    80018274:	db0e90ef          	jal	80001824 <reset_state>
}
    80018278:	60a2                	ld	ra,8(sp)
    8001827a:	8522                	mv	a0,s0
    8001827c:	6402                	ld	s0,0(sp)
    8001827e:	0141                	addi	sp,sp,16
    80018280:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018282:	4401                	li	s0,0
    TEST_END();
    80018284:	00015597          	auipc	a1,0x15
    80018288:	10458593          	addi	a1,a1,260 # 8002d388 <__func__.0+0x2d0>
    8001828c:	bfd9                	j	80018262 <load_guest_page_fault_15+0xc2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001828e:	00015517          	auipc	a0,0x15
    80018292:	14250513          	addi	a0,a0,322 # 8002d3d0 <__func__.0+0x318>
    80018296:	3c1120ef          	jal	8002ae56 <printf>
    8001829a:	02900513          	li	a0,41
    8001829e:	0a7110ef          	jal	80029b44 <putchar>
    800182a2:	b75d                	j	80018248 <load_guest_page_fault_15+0xa8>

00000000800182a4 <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    800182a4:	1101                	addi	sp,sp,-32

    TEST_START();
    800182a6:	00014597          	auipc	a1,0x14
    800182aa:	df258593          	addi	a1,a1,-526 # 8002c098 <__func__.21>
    800182ae:	00015517          	auipc	a0,0x15
    800182b2:	0ea50513          	addi	a0,a0,234 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    800182b6:	ec06                	sd	ra,24(sp)
    800182b8:	e822                	sd	s0,16(sp)
    800182ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800182bc:	39b120ef          	jal	8002ae56 <printf>
    800182c0:	4529                	li	a0,10
    800182c2:	083110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800182c6:	450d                	li	a0,3
    800182c8:	c41e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800182cc:	b14e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800182d0:	ef4e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800182d4:	ca8e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800182d8:	450d                	li	a0,3
    800182da:	c2fe80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800182de:	4509                	li	a0,2
    800182e0:	b49e80ef          	jal	80000e28 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800182e4:	b29e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800182e8:	37ab77b7          	lui	a5,0x37ab7
    800182ec:	00100737          	lui	a4,0x100
    800182f0:	078a                	slli	a5,a5,0x2
    800182f2:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800182f6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800182fa:	0732                	slli	a4,a4,0xc
    800182fc:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    80018300:	08200593          	li	a1,130
    80018304:	0001b617          	auipc	a2,0x1b
    80018308:	d4c60613          	addi	a2,a2,-692 # 80033050 <__func__.0+0x5f98>
    8001830c:	00015517          	auipc	a0,0x15
    80018310:	0a450513          	addi	a0,a0,164 # 8002d3b0 <__func__.0+0x2f8>
    80018314:	343120ef          	jal	8002ae56 <printf>
    80018318:	0003c797          	auipc	a5,0x3c
    8001831c:	cf97c783          	lbu	a5,-775(a5) # 80054011 <excpt+0x1>
    80018320:	0003c497          	auipc	s1,0x3c
    80018324:	cf048493          	addi	s1,s1,-784 # 80054010 <excpt>
    80018328:	00015597          	auipc	a1,0x15
    8001832c:	06058593          	addi	a1,a1,96 # 8002d388 <__func__.0+0x2d0>
    80018330:	cf89                	beqz	a5,8001834a <store_guest_page_fault_1+0xa6>
    80018332:	6498                	ld	a4,8(s1)
    80018334:	47dd                	li	a5,23
    80018336:	00015597          	auipc	a1,0x15
    8001833a:	04258593          	addi	a1,a1,66 # 8002d378 <__func__.0+0x2c0>
    8001833e:	00f70663          	beq	a4,a5,8001834a <store_guest_page_fault_1+0xa6>
    80018342:	00015597          	auipc	a1,0x15
    80018346:	04658593          	addi	a1,a1,70 # 8002d388 <__func__.0+0x2d0>
    8001834a:	00015517          	auipc	a0,0x15
    8001834e:	07e50513          	addi	a0,a0,126 # 8002d3c8 <__func__.0+0x310>
    80018352:	305120ef          	jal	8002ae56 <printf>
    80018356:	0003c797          	auipc	a5,0x3c
    8001835a:	cbb7c783          	lbu	a5,-837(a5) # 80054011 <excpt+0x1>
    8001835e:	c789                	beqz	a5,80018368 <store_guest_page_fault_1+0xc4>
    80018360:	6498                	ld	a4,8(s1)
    80018362:	47dd                	li	a5,23
    80018364:	00f70c63          	beq	a4,a5,8001837c <store_guest_page_fault_1+0xd8>
    80018368:	00015517          	auipc	a0,0x15
    8001836c:	06850513          	addi	a0,a0,104 # 8002d3d0 <__func__.0+0x318>
    80018370:	2e7120ef          	jal	8002ae56 <printf>
    80018374:	02900513          	li	a0,41
    80018378:	7cc110ef          	jal	80029b44 <putchar>
    8001837c:	4529                	li	a0,10
    8001837e:	7c6110ef          	jal	80029b44 <putchar>
    80018382:	0003c797          	auipc	a5,0x3c
    80018386:	c8f7c783          	lbu	a5,-881(a5) # 80054011 <excpt+0x1>
    8001838a:	4401                	li	s0,0
    8001838c:	c789                	beqz	a5,80018396 <store_guest_page_fault_1+0xf2>
    8001838e:	6480                	ld	s0,8(s1)
    80018390:	1425                	addi	s0,s0,-23
    80018392:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018396:	a77e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001839a:	001007b7          	lui	a5,0x100
    8001839e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800183a2:	6731                	lui	a4,0xc
    800183a4:	07b2                	slli	a5,a5,0xc
    800183a6:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    800183aa:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800183ae:	08200593          	li	a1,130
    800183b2:	0001b617          	auipc	a2,0x1b
    800183b6:	cee60613          	addi	a2,a2,-786 # 800330a0 <__func__.0+0x5fe8>
    800183ba:	00015517          	auipc	a0,0x15
    800183be:	ff650513          	addi	a0,a0,-10 # 8002d3b0 <__func__.0+0x2f8>
    800183c2:	295120ef          	jal	8002ae56 <printf>
    800183c6:	0003c797          	auipc	a5,0x3c
    800183ca:	c4b7c783          	lbu	a5,-949(a5) # 80054011 <excpt+0x1>
    800183ce:	00015597          	auipc	a1,0x15
    800183d2:	fba58593          	addi	a1,a1,-70 # 8002d388 <__func__.0+0x2d0>
    800183d6:	cf89                	beqz	a5,800183f0 <store_guest_page_fault_1+0x14c>
    800183d8:	6498                	ld	a4,8(s1)
    800183da:	47dd                	li	a5,23
    800183dc:	00015597          	auipc	a1,0x15
    800183e0:	f9c58593          	addi	a1,a1,-100 # 8002d378 <__func__.0+0x2c0>
    800183e4:	00f70663          	beq	a4,a5,800183f0 <store_guest_page_fault_1+0x14c>
    800183e8:	00015597          	auipc	a1,0x15
    800183ec:	fa058593          	addi	a1,a1,-96 # 8002d388 <__func__.0+0x2d0>
    800183f0:	00015517          	auipc	a0,0x15
    800183f4:	fd850513          	addi	a0,a0,-40 # 8002d3c8 <__func__.0+0x310>
    800183f8:	25f120ef          	jal	8002ae56 <printf>
    800183fc:	0003c797          	auipc	a5,0x3c
    80018400:	c157c783          	lbu	a5,-1003(a5) # 80054011 <excpt+0x1>
    80018404:	c789                	beqz	a5,8001840e <store_guest_page_fault_1+0x16a>
    80018406:	6498                	ld	a4,8(s1)
    80018408:	47dd                	li	a5,23
    8001840a:	00f70c63          	beq	a4,a5,80018422 <store_guest_page_fault_1+0x17e>
    8001840e:	00015517          	auipc	a0,0x15
    80018412:	fc250513          	addi	a0,a0,-62 # 8002d3d0 <__func__.0+0x318>
    80018416:	241120ef          	jal	8002ae56 <printf>
    8001841a:	02900513          	li	a0,41
    8001841e:	726110ef          	jal	80029b44 <putchar>
    80018422:	4529                	li	a0,10
    80018424:	720110ef          	jal	80029b44 <putchar>
    80018428:	c015                	beqz	s0,8001844c <store_guest_page_fault_1+0x1a8>
    8001842a:	0003c417          	auipc	s0,0x3c
    8001842e:	be744403          	lbu	s0,-1049(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018432:	00015597          	auipc	a1,0x15
    80018436:	f5658593          	addi	a1,a1,-170 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001843a:	cc11                	beqz	s0,80018456 <store_guest_page_fault_1+0x1b2>
    8001843c:	6498                	ld	a4,8(s1)
    8001843e:	47dd                	li	a5,23
    TEST_END();
    80018440:	00015597          	auipc	a1,0x15
    80018444:	f3858593          	addi	a1,a1,-200 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018448:	00f70763          	beq	a4,a5,80018456 <store_guest_page_fault_1+0x1b2>
    8001844c:	4401                	li	s0,0
    TEST_END();
    8001844e:	00015597          	auipc	a1,0x15
    80018452:	f3a58593          	addi	a1,a1,-198 # 8002d388 <__func__.0+0x2d0>
    80018456:	00015517          	auipc	a0,0x15
    8001845a:	fda50513          	addi	a0,a0,-38 # 8002d430 <__func__.0+0x378>
    8001845e:	1f9120ef          	jal	8002ae56 <printf>
    80018462:	4511                	li	a0,4
    80018464:	aa5e80ef          	jal	80000f08 <goto_priv>
    80018468:	bbce90ef          	jal	80001824 <reset_state>

}
    8001846c:	60e2                	ld	ra,24(sp)
    8001846e:	8522                	mv	a0,s0
    80018470:	6442                	ld	s0,16(sp)
    80018472:	64a2                	ld	s1,8(sp)
    80018474:	6105                	addi	sp,sp,32
    80018476:	8082                	ret

0000000080018478 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    80018478:	1101                	addi	sp,sp,-32

    TEST_START();
    8001847a:	00014597          	auipc	a1,0x14
    8001847e:	c3e58593          	addi	a1,a1,-962 # 8002c0b8 <__func__.20>
    80018482:	00015517          	auipc	a0,0x15
    80018486:	f1650513          	addi	a0,a0,-234 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    8001848a:	ec06                	sd	ra,24(sp)
    8001848c:	e822                	sd	s0,16(sp)
    8001848e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018490:	1c7120ef          	jal	8002ae56 <printf>
    80018494:	4529                	li	a0,10
    80018496:	6ae110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001849a:	450d                	li	a0,3
    8001849c:	a6de80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800184a0:	940e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800184a4:	d20e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800184a8:	ad4e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800184ac:	450d                	li	a0,3
    800184ae:	a5be80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800184b2:	4509                	li	a0,2
    800184b4:	975e80ef          	jal	80000e28 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800184b8:	955e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800184bc:	000807b7          	lui	a5,0x80
    800184c0:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800184c4:	37ab77b7          	lui	a5,0x37ab7
    800184c8:	00100737          	lui	a4,0x100
    800184cc:	078a                	slli	a5,a5,0x2
    800184ce:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800184d2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800184d6:	0732                	slli	a4,a4,0xc
    800184d8:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184dc:	08200593          	li	a1,130
    800184e0:	0001b617          	auipc	a2,0x1b
    800184e4:	c2060613          	addi	a2,a2,-992 # 80033100 <__func__.0+0x6048>
    800184e8:	00015517          	auipc	a0,0x15
    800184ec:	ec850513          	addi	a0,a0,-312 # 8002d3b0 <__func__.0+0x2f8>
    800184f0:	167120ef          	jal	8002ae56 <printf>
    800184f4:	0003c797          	auipc	a5,0x3c
    800184f8:	b1d7c783          	lbu	a5,-1251(a5) # 80054011 <excpt+0x1>
    800184fc:	0003c497          	auipc	s1,0x3c
    80018500:	b1448493          	addi	s1,s1,-1260 # 80054010 <excpt>
    80018504:	00015597          	auipc	a1,0x15
    80018508:	e8458593          	addi	a1,a1,-380 # 8002d388 <__func__.0+0x2d0>
    8001850c:	cf89                	beqz	a5,80018526 <store_guest_page_fault_2+0xae>
    8001850e:	6498                	ld	a4,8(s1)
    80018510:	47dd                	li	a5,23
    80018512:	00015597          	auipc	a1,0x15
    80018516:	e6658593          	addi	a1,a1,-410 # 8002d378 <__func__.0+0x2c0>
    8001851a:	00f70663          	beq	a4,a5,80018526 <store_guest_page_fault_2+0xae>
    8001851e:	00015597          	auipc	a1,0x15
    80018522:	e6a58593          	addi	a1,a1,-406 # 8002d388 <__func__.0+0x2d0>
    80018526:	00015517          	auipc	a0,0x15
    8001852a:	ea250513          	addi	a0,a0,-350 # 8002d3c8 <__func__.0+0x310>
    8001852e:	129120ef          	jal	8002ae56 <printf>
    80018532:	0003c797          	auipc	a5,0x3c
    80018536:	adf7c783          	lbu	a5,-1313(a5) # 80054011 <excpt+0x1>
    8001853a:	c789                	beqz	a5,80018544 <store_guest_page_fault_2+0xcc>
    8001853c:	6498                	ld	a4,8(s1)
    8001853e:	47dd                	li	a5,23
    80018540:	00f70c63          	beq	a4,a5,80018558 <store_guest_page_fault_2+0xe0>
    80018544:	00015517          	auipc	a0,0x15
    80018548:	e8c50513          	addi	a0,a0,-372 # 8002d3d0 <__func__.0+0x318>
    8001854c:	10b120ef          	jal	8002ae56 <printf>
    80018550:	02900513          	li	a0,41
    80018554:	5f0110ef          	jal	80029b44 <putchar>
    80018558:	4529                	li	a0,10
    8001855a:	5ea110ef          	jal	80029b44 <putchar>
    8001855e:	0003c417          	auipc	s0,0x3c
    80018562:	ab344403          	lbu	s0,-1357(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018566:	00015597          	auipc	a1,0x15
    8001856a:	e2258593          	addi	a1,a1,-478 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001856e:	cc11                	beqz	s0,8001858a <store_guest_page_fault_2+0x112>
    80018570:	6498                	ld	a4,8(s1)
    80018572:	47dd                	li	a5,23
    TEST_END();
    80018574:	00015597          	auipc	a1,0x15
    80018578:	e0458593          	addi	a1,a1,-508 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001857c:	00f70763          	beq	a4,a5,8001858a <store_guest_page_fault_2+0x112>
    80018580:	4401                	li	s0,0
    TEST_END();
    80018582:	00015597          	auipc	a1,0x15
    80018586:	e0658593          	addi	a1,a1,-506 # 8002d388 <__func__.0+0x2d0>
    8001858a:	00015517          	auipc	a0,0x15
    8001858e:	ea650513          	addi	a0,a0,-346 # 8002d430 <__func__.0+0x378>
    80018592:	0c5120ef          	jal	8002ae56 <printf>
    80018596:	4511                	li	a0,4
    80018598:	971e80ef          	jal	80000f08 <goto_priv>
    8001859c:	a88e90ef          	jal	80001824 <reset_state>
}
    800185a0:	60e2                	ld	ra,24(sp)
    800185a2:	8522                	mv	a0,s0
    800185a4:	6442                	ld	s0,16(sp)
    800185a6:	64a2                	ld	s1,8(sp)
    800185a8:	6105                	addi	sp,sp,32
    800185aa:	8082                	ret

00000000800185ac <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    800185ac:	1101                	addi	sp,sp,-32

    TEST_START();
    800185ae:	00014597          	auipc	a1,0x14
    800185b2:	b2a58593          	addi	a1,a1,-1238 # 8002c0d8 <__func__.19>
    800185b6:	00015517          	auipc	a0,0x15
    800185ba:	de250513          	addi	a0,a0,-542 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    800185be:	ec06                	sd	ra,24(sp)
    800185c0:	e822                	sd	s0,16(sp)
    800185c2:	e426                	sd	s1,8(sp)
    TEST_START();
    800185c4:	093120ef          	jal	8002ae56 <printf>
    800185c8:	4529                	li	a0,10
    800185ca:	57a110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800185ce:	450d                	li	a0,3
    800185d0:	939e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800185d4:	80ce80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800185d8:	bece80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800185dc:	9a0e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800185e0:	450d                	li	a0,3
    800185e2:	927e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800185e6:	4509                	li	a0,2
    800185e8:	841e80ef          	jal	80000e28 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800185ec:	821e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800185f0:	000807b7          	lui	a5,0x80
    800185f4:	1007a073          	csrs	sstatus,a5
    800185f8:	37ab77b7          	lui	a5,0x37ab7
    800185fc:	00100737          	lui	a4,0x100
    80018600:	078a                	slli	a5,a5,0x2
    80018602:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018606:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001860a:	0732                	slli	a4,a4,0xc
    8001860c:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018610:	08200593          	li	a1,130
    80018614:	0001b617          	auipc	a2,0x1b
    80018618:	b4c60613          	addi	a2,a2,-1204 # 80033160 <__func__.0+0x60a8>
    8001861c:	00015517          	auipc	a0,0x15
    80018620:	d9450513          	addi	a0,a0,-620 # 8002d3b0 <__func__.0+0x2f8>
    80018624:	033120ef          	jal	8002ae56 <printf>
    80018628:	0003c797          	auipc	a5,0x3c
    8001862c:	9e97c783          	lbu	a5,-1559(a5) # 80054011 <excpt+0x1>
    80018630:	0003c497          	auipc	s1,0x3c
    80018634:	9e048493          	addi	s1,s1,-1568 # 80054010 <excpt>
    80018638:	00015597          	auipc	a1,0x15
    8001863c:	d5058593          	addi	a1,a1,-688 # 8002d388 <__func__.0+0x2d0>
    80018640:	cf89                	beqz	a5,8001865a <store_guest_page_fault_3+0xae>
    80018642:	6498                	ld	a4,8(s1)
    80018644:	47dd                	li	a5,23
    80018646:	00015597          	auipc	a1,0x15
    8001864a:	d3258593          	addi	a1,a1,-718 # 8002d378 <__func__.0+0x2c0>
    8001864e:	00f70663          	beq	a4,a5,8001865a <store_guest_page_fault_3+0xae>
    80018652:	00015597          	auipc	a1,0x15
    80018656:	d3658593          	addi	a1,a1,-714 # 8002d388 <__func__.0+0x2d0>
    8001865a:	00015517          	auipc	a0,0x15
    8001865e:	d6e50513          	addi	a0,a0,-658 # 8002d3c8 <__func__.0+0x310>
    80018662:	7f4120ef          	jal	8002ae56 <printf>
    80018666:	0003c797          	auipc	a5,0x3c
    8001866a:	9ab7c783          	lbu	a5,-1621(a5) # 80054011 <excpt+0x1>
    8001866e:	c789                	beqz	a5,80018678 <store_guest_page_fault_3+0xcc>
    80018670:	6498                	ld	a4,8(s1)
    80018672:	47dd                	li	a5,23
    80018674:	00f70c63          	beq	a4,a5,8001868c <store_guest_page_fault_3+0xe0>
    80018678:	00015517          	auipc	a0,0x15
    8001867c:	d5850513          	addi	a0,a0,-680 # 8002d3d0 <__func__.0+0x318>
    80018680:	7d6120ef          	jal	8002ae56 <printf>
    80018684:	02900513          	li	a0,41
    80018688:	4bc110ef          	jal	80029b44 <putchar>
    8001868c:	4529                	li	a0,10
    8001868e:	4b6110ef          	jal	80029b44 <putchar>
    80018692:	0003c417          	auipc	s0,0x3c
    80018696:	97f44403          	lbu	s0,-1665(s0) # 80054011 <excpt+0x1>
    8001869a:	c409                	beqz	s0,800186a4 <store_guest_page_fault_3+0xf8>
    8001869c:	6498                	ld	a4,8(s1)
    8001869e:	47dd                	li	a5,23
    800186a0:	02f70c63          	beq	a4,a5,800186d8 <store_guest_page_fault_3+0x12c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800186a4:	000807b7          	lui	a5,0x80
    800186a8:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800186ac:	4401                	li	s0,0

    TEST_END();
    800186ae:	00015597          	auipc	a1,0x15
    800186b2:	cda58593          	addi	a1,a1,-806 # 8002d388 <__func__.0+0x2d0>
    800186b6:	00015517          	auipc	a0,0x15
    800186ba:	d7a50513          	addi	a0,a0,-646 # 8002d430 <__func__.0+0x378>
    800186be:	798120ef          	jal	8002ae56 <printf>
    800186c2:	4511                	li	a0,4
    800186c4:	845e80ef          	jal	80000f08 <goto_priv>
    800186c8:	95ce90ef          	jal	80001824 <reset_state>
}
    800186cc:	60e2                	ld	ra,24(sp)
    800186ce:	8522                	mv	a0,s0
    800186d0:	6442                	ld	s0,16(sp)
    800186d2:	64a2                	ld	s1,8(sp)
    800186d4:	6105                	addi	sp,sp,32
    800186d6:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800186d8:	000807b7          	lui	a5,0x80
    800186dc:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800186e0:	00015597          	auipc	a1,0x15
    800186e4:	c9858593          	addi	a1,a1,-872 # 8002d378 <__func__.0+0x2c0>
    800186e8:	b7f9                	j	800186b6 <store_guest_page_fault_3+0x10a>

00000000800186ea <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    800186ea:	1101                	addi	sp,sp,-32

    TEST_START();
    800186ec:	00014597          	auipc	a1,0x14
    800186f0:	a0c58593          	addi	a1,a1,-1524 # 8002c0f8 <__func__.18>
    800186f4:	00015517          	auipc	a0,0x15
    800186f8:	ca450513          	addi	a0,a0,-860 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    800186fc:	ec06                	sd	ra,24(sp)
    800186fe:	e822                	sd	s0,16(sp)
    80018700:	e426                	sd	s1,8(sp)
    TEST_START();
    80018702:	754120ef          	jal	8002ae56 <printf>
    80018706:	4529                	li	a0,10
    80018708:	43c110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001870c:	450d                	li	a0,3
    8001870e:	ffae80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018712:	ecfe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018716:	aaee80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001871a:	862e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001871e:	4511                	li	a0,4
    80018720:	fe8e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018724:	000407b7          	lui	a5,0x40
    80018728:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001872c:	450d                	li	a0,3
    8001872e:	fdae80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018732:	4509                	li	a0,2
    80018734:	ef4e80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018738:	ed4e80ef          	jal	80000e0c <test_setup_except_function>
    8001873c:	37ab77b7          	lui	a5,0x37ab7
    80018740:	00080737          	lui	a4,0x80
    80018744:	078a                	slli	a5,a5,0x2
    80018746:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018748:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001874c:	0736                	slli	a4,a4,0xd
    8001874e:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80018752:	08200593          	li	a1,130
    80018756:	0001b617          	auipc	a2,0x1b
    8001875a:	a7a60613          	addi	a2,a2,-1414 # 800331d0 <__func__.0+0x6118>
    8001875e:	00015517          	auipc	a0,0x15
    80018762:	c5250513          	addi	a0,a0,-942 # 8002d3b0 <__func__.0+0x2f8>
    80018766:	6f0120ef          	jal	8002ae56 <printf>
    8001876a:	0003c797          	auipc	a5,0x3c
    8001876e:	8a77c783          	lbu	a5,-1881(a5) # 80054011 <excpt+0x1>
    80018772:	0003c497          	auipc	s1,0x3c
    80018776:	89e48493          	addi	s1,s1,-1890 # 80054010 <excpt>
    8001877a:	00015597          	auipc	a1,0x15
    8001877e:	c0e58593          	addi	a1,a1,-1010 # 8002d388 <__func__.0+0x2d0>
    80018782:	cf89                	beqz	a5,8001879c <store_guest_page_fault_4+0xb2>
    80018784:	6498                	ld	a4,8(s1)
    80018786:	47bd                	li	a5,15
    80018788:	00015597          	auipc	a1,0x15
    8001878c:	bf058593          	addi	a1,a1,-1040 # 8002d378 <__func__.0+0x2c0>
    80018790:	00f70663          	beq	a4,a5,8001879c <store_guest_page_fault_4+0xb2>
    80018794:	00015597          	auipc	a1,0x15
    80018798:	bf458593          	addi	a1,a1,-1036 # 8002d388 <__func__.0+0x2d0>
    8001879c:	00015517          	auipc	a0,0x15
    800187a0:	c2c50513          	addi	a0,a0,-980 # 8002d3c8 <__func__.0+0x310>
    800187a4:	6b2120ef          	jal	8002ae56 <printf>
    800187a8:	0003c797          	auipc	a5,0x3c
    800187ac:	8697c783          	lbu	a5,-1943(a5) # 80054011 <excpt+0x1>
    800187b0:	c789                	beqz	a5,800187ba <store_guest_page_fault_4+0xd0>
    800187b2:	6498                	ld	a4,8(s1)
    800187b4:	47bd                	li	a5,15
    800187b6:	00f70c63          	beq	a4,a5,800187ce <store_guest_page_fault_4+0xe4>
    800187ba:	00015517          	auipc	a0,0x15
    800187be:	c1650513          	addi	a0,a0,-1002 # 8002d3d0 <__func__.0+0x318>
    800187c2:	694120ef          	jal	8002ae56 <printf>
    800187c6:	02900513          	li	a0,41
    800187ca:	37a110ef          	jal	80029b44 <putchar>
    800187ce:	4529                	li	a0,10
    800187d0:	374110ef          	jal	80029b44 <putchar>
    800187d4:	0003c417          	auipc	s0,0x3c
    800187d8:	83d44403          	lbu	s0,-1987(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800187dc:	00015597          	auipc	a1,0x15
    800187e0:	bac58593          	addi	a1,a1,-1108 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800187e4:	cc11                	beqz	s0,80018800 <store_guest_page_fault_4+0x116>
    800187e6:	6498                	ld	a4,8(s1)
    800187e8:	47bd                	li	a5,15
    TEST_END();
    800187ea:	00015597          	auipc	a1,0x15
    800187ee:	b8e58593          	addi	a1,a1,-1138 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800187f2:	00f70763          	beq	a4,a5,80018800 <store_guest_page_fault_4+0x116>
    800187f6:	4401                	li	s0,0
    TEST_END();
    800187f8:	00015597          	auipc	a1,0x15
    800187fc:	b9058593          	addi	a1,a1,-1136 # 8002d388 <__func__.0+0x2d0>
    80018800:	00015517          	auipc	a0,0x15
    80018804:	c3050513          	addi	a0,a0,-976 # 8002d430 <__func__.0+0x378>
    80018808:	64e120ef          	jal	8002ae56 <printf>
    8001880c:	4511                	li	a0,4
    8001880e:	efae80ef          	jal	80000f08 <goto_priv>
    80018812:	812e90ef          	jal	80001824 <reset_state>
}
    80018816:	60e2                	ld	ra,24(sp)
    80018818:	8522                	mv	a0,s0
    8001881a:	6442                	ld	s0,16(sp)
    8001881c:	64a2                	ld	s1,8(sp)
    8001881e:	6105                	addi	sp,sp,32
    80018820:	8082                	ret

0000000080018822 <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    80018822:	1141                	addi	sp,sp,-16

    TEST_START();
    80018824:	00014597          	auipc	a1,0x14
    80018828:	8f458593          	addi	a1,a1,-1804 # 8002c118 <__func__.17>
    8001882c:	00015517          	auipc	a0,0x15
    80018830:	b6c50513          	addi	a0,a0,-1172 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    80018834:	e406                	sd	ra,8(sp)
    80018836:	e022                	sd	s0,0(sp)
    TEST_START();
    80018838:	61e120ef          	jal	8002ae56 <printf>
    8001883c:	4529                	li	a0,10
    8001883e:	306110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018842:	450d                	li	a0,3
    80018844:	ec4e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018848:	d99e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001884c:	978e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018850:	f2de70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80018854:	4511                	li	a0,4
    80018856:	eb2e80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001885a:	000407b7          	lui	a5,0x40
    8001885e:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018862:	450d                	li	a0,3
    80018864:	ea4e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018868:	4509                	li	a0,2
    8001886a:	dbee80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001886e:	d9ee80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018872:	37ab77b7          	lui	a5,0x37ab7
    80018876:	00080737          	lui	a4,0x80
    8001887a:	078a                	slli	a5,a5,0x2
    8001887c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001887e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018882:	0736                	slli	a4,a4,0xd
    80018884:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018888:	08200593          	li	a1,130
    8001888c:	0001b617          	auipc	a2,0x1b
    80018890:	98460613          	addi	a2,a2,-1660 # 80033210 <__func__.0+0x6158>
    80018894:	00015517          	auipc	a0,0x15
    80018898:	b1c50513          	addi	a0,a0,-1252 # 8002d3b0 <__func__.0+0x2f8>
    8001889c:	5ba120ef          	jal	8002ae56 <printf>
    800188a0:	0003b797          	auipc	a5,0x3b
    800188a4:	7717c783          	lbu	a5,1905(a5) # 80054011 <excpt+0x1>
    800188a8:	00015597          	auipc	a1,0x15
    800188ac:	ad058593          	addi	a1,a1,-1328 # 8002d378 <__func__.0+0x2c0>
    800188b0:	c789                	beqz	a5,800188ba <store_guest_page_fault_5+0x98>
    800188b2:	00015597          	auipc	a1,0x15
    800188b6:	ad658593          	addi	a1,a1,-1322 # 8002d388 <__func__.0+0x2d0>
    800188ba:	00015517          	auipc	a0,0x15
    800188be:	b0e50513          	addi	a0,a0,-1266 # 8002d3c8 <__func__.0+0x310>
    800188c2:	594120ef          	jal	8002ae56 <printf>
    800188c6:	0003b797          	auipc	a5,0x3b
    800188ca:	74b7c783          	lbu	a5,1867(a5) # 80054011 <excpt+0x1>
    800188ce:	e7a1                	bnez	a5,80018916 <store_guest_page_fault_5+0xf4>
    800188d0:	4529                	li	a0,10
    800188d2:	272110ef          	jal	80029b44 <putchar>
    800188d6:	0003b797          	auipc	a5,0x3b
    800188da:	73b7c783          	lbu	a5,1851(a5) # 80054011 <excpt+0x1>
    800188de:	e795                	bnez	a5,8001890a <store_guest_page_fault_5+0xe8>
    800188e0:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800188e2:	00015597          	auipc	a1,0x15
    800188e6:	a9658593          	addi	a1,a1,-1386 # 8002d378 <__func__.0+0x2c0>
    800188ea:	00015517          	auipc	a0,0x15
    800188ee:	b4650513          	addi	a0,a0,-1210 # 8002d430 <__func__.0+0x378>
    800188f2:	564120ef          	jal	8002ae56 <printf>
    800188f6:	4511                	li	a0,4
    800188f8:	e10e80ef          	jal	80000f08 <goto_priv>
    800188fc:	f29e80ef          	jal	80001824 <reset_state>
}
    80018900:	60a2                	ld	ra,8(sp)
    80018902:	8522                	mv	a0,s0
    80018904:	6402                	ld	s0,0(sp)
    80018906:	0141                	addi	sp,sp,16
    80018908:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    8001890a:	4401                	li	s0,0
    TEST_END();
    8001890c:	00015597          	auipc	a1,0x15
    80018910:	a7c58593          	addi	a1,a1,-1412 # 8002d388 <__func__.0+0x2d0>
    80018914:	bfd9                	j	800188ea <store_guest_page_fault_5+0xc8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018916:	00015517          	auipc	a0,0x15
    8001891a:	aba50513          	addi	a0,a0,-1350 # 8002d3d0 <__func__.0+0x318>
    8001891e:	538120ef          	jal	8002ae56 <printf>
    80018922:	02900513          	li	a0,41
    80018926:	21e110ef          	jal	80029b44 <putchar>
    8001892a:	b75d                	j	800188d0 <store_guest_page_fault_5+0xae>

000000008001892c <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    8001892c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001892e:	00014597          	auipc	a1,0x14
    80018932:	80a58593          	addi	a1,a1,-2038 # 8002c138 <__func__.16>
    80018936:	00015517          	auipc	a0,0x15
    8001893a:	a6250513          	addi	a0,a0,-1438 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    8001893e:	ec06                	sd	ra,24(sp)
    80018940:	e822                	sd	s0,16(sp)
    80018942:	e426                	sd	s1,8(sp)
    TEST_START();
    80018944:	512120ef          	jal	8002ae56 <printf>
    80018948:	4529                	li	a0,10
    8001894a:	1fa110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001894e:	450d                	li	a0,3
    80018950:	db8e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018954:	c8de70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018958:	86ce80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001895c:	e21e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018960:	4509                	li	a0,2
    80018962:	da6e80ef          	jal	80000f08 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018966:	ca6e80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001896a:	37ab77b7          	lui	a5,0x37ab7
    8001896e:	00100737          	lui	a4,0x100
    80018972:	078a                	slli	a5,a5,0x2
    80018974:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018978:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001897c:	0732                	slli	a4,a4,0xc
    8001897e:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    80018982:	08200593          	li	a1,130
    80018986:	0001b617          	auipc	a2,0x1b
    8001898a:	8c260613          	addi	a2,a2,-1854 # 80033248 <__func__.0+0x6190>
    8001898e:	00015517          	auipc	a0,0x15
    80018992:	a2250513          	addi	a0,a0,-1502 # 8002d3b0 <__func__.0+0x2f8>
    80018996:	4c0120ef          	jal	8002ae56 <printf>
    8001899a:	0003b797          	auipc	a5,0x3b
    8001899e:	6777c783          	lbu	a5,1655(a5) # 80054011 <excpt+0x1>
    800189a2:	0003b497          	auipc	s1,0x3b
    800189a6:	66e48493          	addi	s1,s1,1646 # 80054010 <excpt>
    800189aa:	00015597          	auipc	a1,0x15
    800189ae:	9de58593          	addi	a1,a1,-1570 # 8002d388 <__func__.0+0x2d0>
    800189b2:	cf89                	beqz	a5,800189cc <store_guest_page_fault_6+0xa0>
    800189b4:	6498                	ld	a4,8(s1)
    800189b6:	47dd                	li	a5,23
    800189b8:	00015597          	auipc	a1,0x15
    800189bc:	9c058593          	addi	a1,a1,-1600 # 8002d378 <__func__.0+0x2c0>
    800189c0:	00f70663          	beq	a4,a5,800189cc <store_guest_page_fault_6+0xa0>
    800189c4:	00015597          	auipc	a1,0x15
    800189c8:	9c458593          	addi	a1,a1,-1596 # 8002d388 <__func__.0+0x2d0>
    800189cc:	00015517          	auipc	a0,0x15
    800189d0:	9fc50513          	addi	a0,a0,-1540 # 8002d3c8 <__func__.0+0x310>
    800189d4:	482120ef          	jal	8002ae56 <printf>
    800189d8:	0003b797          	auipc	a5,0x3b
    800189dc:	6397c783          	lbu	a5,1593(a5) # 80054011 <excpt+0x1>
    800189e0:	c789                	beqz	a5,800189ea <store_guest_page_fault_6+0xbe>
    800189e2:	6498                	ld	a4,8(s1)
    800189e4:	47dd                	li	a5,23
    800189e6:	00f70c63          	beq	a4,a5,800189fe <store_guest_page_fault_6+0xd2>
    800189ea:	00015517          	auipc	a0,0x15
    800189ee:	9e650513          	addi	a0,a0,-1562 # 8002d3d0 <__func__.0+0x318>
    800189f2:	464120ef          	jal	8002ae56 <printf>
    800189f6:	02900513          	li	a0,41
    800189fa:	14a110ef          	jal	80029b44 <putchar>
    800189fe:	4529                	li	a0,10
    80018a00:	144110ef          	jal	80029b44 <putchar>
    80018a04:	0003b797          	auipc	a5,0x3b
    80018a08:	60d7c783          	lbu	a5,1549(a5) # 80054011 <excpt+0x1>
    80018a0c:	4401                	li	s0,0
    80018a0e:	c789                	beqz	a5,80018a18 <store_guest_page_fault_6+0xec>
    80018a10:	6480                	ld	s0,8(s1)
    80018a12:	1425                	addi	s0,s0,-23
    80018a14:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018a18:	bf4e80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018a1c:	001007b7          	lui	a5,0x100
    80018a20:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018a24:	7771                	lui	a4,0xffffc
    80018a26:	07b2                	slli	a5,a5,0xc
    80018a28:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018a2c:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a30:	08200593          	li	a1,130
    80018a34:	0001b617          	auipc	a2,0x1b
    80018a38:	86460613          	addi	a2,a2,-1948 # 80033298 <__func__.0+0x61e0>
    80018a3c:	00015517          	auipc	a0,0x15
    80018a40:	97450513          	addi	a0,a0,-1676 # 8002d3b0 <__func__.0+0x2f8>
    80018a44:	412120ef          	jal	8002ae56 <printf>
    80018a48:	0003b797          	auipc	a5,0x3b
    80018a4c:	5c97c783          	lbu	a5,1481(a5) # 80054011 <excpt+0x1>
    80018a50:	00015597          	auipc	a1,0x15
    80018a54:	93858593          	addi	a1,a1,-1736 # 8002d388 <__func__.0+0x2d0>
    80018a58:	cf89                	beqz	a5,80018a72 <store_guest_page_fault_6+0x146>
    80018a5a:	6498                	ld	a4,8(s1)
    80018a5c:	47dd                	li	a5,23
    80018a5e:	00015597          	auipc	a1,0x15
    80018a62:	91a58593          	addi	a1,a1,-1766 # 8002d378 <__func__.0+0x2c0>
    80018a66:	00f70663          	beq	a4,a5,80018a72 <store_guest_page_fault_6+0x146>
    80018a6a:	00015597          	auipc	a1,0x15
    80018a6e:	91e58593          	addi	a1,a1,-1762 # 8002d388 <__func__.0+0x2d0>
    80018a72:	00015517          	auipc	a0,0x15
    80018a76:	95650513          	addi	a0,a0,-1706 # 8002d3c8 <__func__.0+0x310>
    80018a7a:	3dc120ef          	jal	8002ae56 <printf>
    80018a7e:	0003b797          	auipc	a5,0x3b
    80018a82:	5937c783          	lbu	a5,1427(a5) # 80054011 <excpt+0x1>
    80018a86:	c789                	beqz	a5,80018a90 <store_guest_page_fault_6+0x164>
    80018a88:	6498                	ld	a4,8(s1)
    80018a8a:	47dd                	li	a5,23
    80018a8c:	00f70c63          	beq	a4,a5,80018aa4 <store_guest_page_fault_6+0x178>
    80018a90:	00015517          	auipc	a0,0x15
    80018a94:	94050513          	addi	a0,a0,-1728 # 8002d3d0 <__func__.0+0x318>
    80018a98:	3be120ef          	jal	8002ae56 <printf>
    80018a9c:	02900513          	li	a0,41
    80018aa0:	0a4110ef          	jal	80029b44 <putchar>
    80018aa4:	4529                	li	a0,10
    80018aa6:	09e110ef          	jal	80029b44 <putchar>
    80018aaa:	c015                	beqz	s0,80018ace <store_guest_page_fault_6+0x1a2>
    80018aac:	0003b417          	auipc	s0,0x3b
    80018ab0:	56544403          	lbu	s0,1381(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018ab4:	00015597          	auipc	a1,0x15
    80018ab8:	8d458593          	addi	a1,a1,-1836 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018abc:	cc11                	beqz	s0,80018ad8 <store_guest_page_fault_6+0x1ac>
    80018abe:	6498                	ld	a4,8(s1)
    80018ac0:	47dd                	li	a5,23
    TEST_END();
    80018ac2:	00015597          	auipc	a1,0x15
    80018ac6:	8b658593          	addi	a1,a1,-1866 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018aca:	00f70763          	beq	a4,a5,80018ad8 <store_guest_page_fault_6+0x1ac>
    80018ace:	4401                	li	s0,0
    TEST_END();
    80018ad0:	00015597          	auipc	a1,0x15
    80018ad4:	8b858593          	addi	a1,a1,-1864 # 8002d388 <__func__.0+0x2d0>
    80018ad8:	00015517          	auipc	a0,0x15
    80018adc:	95850513          	addi	a0,a0,-1704 # 8002d430 <__func__.0+0x378>
    80018ae0:	376120ef          	jal	8002ae56 <printf>
    80018ae4:	4511                	li	a0,4
    80018ae6:	c22e80ef          	jal	80000f08 <goto_priv>
    80018aea:	d3be80ef          	jal	80001824 <reset_state>

}
    80018aee:	60e2                	ld	ra,24(sp)
    80018af0:	8522                	mv	a0,s0
    80018af2:	6442                	ld	s0,16(sp)
    80018af4:	64a2                	ld	s1,8(sp)
    80018af6:	6105                	addi	sp,sp,32
    80018af8:	8082                	ret

0000000080018afa <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80018afa:	1101                	addi	sp,sp,-32

    TEST_START();
    80018afc:	00013597          	auipc	a1,0x13
    80018b00:	65c58593          	addi	a1,a1,1628 # 8002c158 <__func__.15>
    80018b04:	00015517          	auipc	a0,0x15
    80018b08:	89450513          	addi	a0,a0,-1900 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    80018b0c:	ec06                	sd	ra,24(sp)
    80018b0e:	e822                	sd	s0,16(sp)
    80018b10:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b12:	344120ef          	jal	8002ae56 <printf>
    80018b16:	4529                	li	a0,10
    80018b18:	02c110ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018b1c:	450d                	li	a0,3
    80018b1e:	beae80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018b22:	abfe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018b26:	e9fe70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018b2a:	c53e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018b2e:	4509                	li	a0,2
    80018b30:	bd8e80ef          	jal	80000f08 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018b34:	ad8e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018b38:	000807b7          	lui	a5,0x80
    80018b3c:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018b40:	37ab77b7          	lui	a5,0x37ab7
    80018b44:	00100737          	lui	a4,0x100
    80018b48:	078a                	slli	a5,a5,0x2
    80018b4a:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018b4e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018b52:	0732                	slli	a4,a4,0xc
    80018b54:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b58:	08200593          	li	a1,130
    80018b5c:	0001a617          	auipc	a2,0x1a
    80018b60:	79460613          	addi	a2,a2,1940 # 800332f0 <__func__.0+0x6238>
    80018b64:	00015517          	auipc	a0,0x15
    80018b68:	84c50513          	addi	a0,a0,-1972 # 8002d3b0 <__func__.0+0x2f8>
    80018b6c:	2ea120ef          	jal	8002ae56 <printf>
    80018b70:	0003b797          	auipc	a5,0x3b
    80018b74:	4a17c783          	lbu	a5,1185(a5) # 80054011 <excpt+0x1>
    80018b78:	0003b497          	auipc	s1,0x3b
    80018b7c:	49848493          	addi	s1,s1,1176 # 80054010 <excpt>
    80018b80:	00015597          	auipc	a1,0x15
    80018b84:	80858593          	addi	a1,a1,-2040 # 8002d388 <__func__.0+0x2d0>
    80018b88:	cf89                	beqz	a5,80018ba2 <store_guest_page_fault_7+0xa8>
    80018b8a:	6498                	ld	a4,8(s1)
    80018b8c:	47dd                	li	a5,23
    80018b8e:	00014597          	auipc	a1,0x14
    80018b92:	7ea58593          	addi	a1,a1,2026 # 8002d378 <__func__.0+0x2c0>
    80018b96:	00f70663          	beq	a4,a5,80018ba2 <store_guest_page_fault_7+0xa8>
    80018b9a:	00014597          	auipc	a1,0x14
    80018b9e:	7ee58593          	addi	a1,a1,2030 # 8002d388 <__func__.0+0x2d0>
    80018ba2:	00015517          	auipc	a0,0x15
    80018ba6:	82650513          	addi	a0,a0,-2010 # 8002d3c8 <__func__.0+0x310>
    80018baa:	2ac120ef          	jal	8002ae56 <printf>
    80018bae:	0003b797          	auipc	a5,0x3b
    80018bb2:	4637c783          	lbu	a5,1123(a5) # 80054011 <excpt+0x1>
    80018bb6:	c789                	beqz	a5,80018bc0 <store_guest_page_fault_7+0xc6>
    80018bb8:	6498                	ld	a4,8(s1)
    80018bba:	47dd                	li	a5,23
    80018bbc:	00f70c63          	beq	a4,a5,80018bd4 <store_guest_page_fault_7+0xda>
    80018bc0:	00015517          	auipc	a0,0x15
    80018bc4:	81050513          	addi	a0,a0,-2032 # 8002d3d0 <__func__.0+0x318>
    80018bc8:	28e120ef          	jal	8002ae56 <printf>
    80018bcc:	02900513          	li	a0,41
    80018bd0:	775100ef          	jal	80029b44 <putchar>
    80018bd4:	4529                	li	a0,10
    80018bd6:	76f100ef          	jal	80029b44 <putchar>
    80018bda:	0003b417          	auipc	s0,0x3b
    80018bde:	43744403          	lbu	s0,1079(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018be2:	00014597          	auipc	a1,0x14
    80018be6:	7a658593          	addi	a1,a1,1958 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018bea:	cc11                	beqz	s0,80018c06 <store_guest_page_fault_7+0x10c>
    80018bec:	6498                	ld	a4,8(s1)
    80018bee:	47dd                	li	a5,23
    TEST_END();
    80018bf0:	00014597          	auipc	a1,0x14
    80018bf4:	78858593          	addi	a1,a1,1928 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018bf8:	00f70763          	beq	a4,a5,80018c06 <store_guest_page_fault_7+0x10c>
    80018bfc:	4401                	li	s0,0
    TEST_END();
    80018bfe:	00014597          	auipc	a1,0x14
    80018c02:	78a58593          	addi	a1,a1,1930 # 8002d388 <__func__.0+0x2d0>
    80018c06:	00015517          	auipc	a0,0x15
    80018c0a:	82a50513          	addi	a0,a0,-2006 # 8002d430 <__func__.0+0x378>
    80018c0e:	248120ef          	jal	8002ae56 <printf>
    80018c12:	4511                	li	a0,4
    80018c14:	af4e80ef          	jal	80000f08 <goto_priv>
    80018c18:	c0de80ef          	jal	80001824 <reset_state>
}
    80018c1c:	60e2                	ld	ra,24(sp)
    80018c1e:	8522                	mv	a0,s0
    80018c20:	6442                	ld	s0,16(sp)
    80018c22:	64a2                	ld	s1,8(sp)
    80018c24:	6105                	addi	sp,sp,32
    80018c26:	8082                	ret

0000000080018c28 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80018c28:	1101                	addi	sp,sp,-32

    TEST_START();
    80018c2a:	00013597          	auipc	a1,0x13
    80018c2e:	54e58593          	addi	a1,a1,1358 # 8002c178 <__func__.14>
    80018c32:	00014517          	auipc	a0,0x14
    80018c36:	76650513          	addi	a0,a0,1894 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    80018c3a:	ec06                	sd	ra,24(sp)
    80018c3c:	e822                	sd	s0,16(sp)
    80018c3e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018c40:	216120ef          	jal	8002ae56 <printf>
    80018c44:	4529                	li	a0,10
    80018c46:	6ff100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018c4a:	450d                	li	a0,3
    80018c4c:	abce80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018c50:	991e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018c54:	d71e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018c58:	b25e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018c5c:	4509                	li	a0,2
    80018c5e:	aaae80ef          	jal	80000f08 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018c62:	9aae80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018c66:	000807b7          	lui	a5,0x80
    80018c6a:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018c6e:	001007b7          	lui	a5,0x100
    80018c72:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018c76:	7771                	lui	a4,0xffffc
    80018c78:	07b2                	slli	a5,a5,0xc
    80018c7a:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018c7e:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018c82:	08200593          	li	a1,130
    80018c86:	0001a617          	auipc	a2,0x1a
    80018c8a:	6ca60613          	addi	a2,a2,1738 # 80033350 <__func__.0+0x6298>
    80018c8e:	00014517          	auipc	a0,0x14
    80018c92:	72250513          	addi	a0,a0,1826 # 8002d3b0 <__func__.0+0x2f8>
    80018c96:	1c0120ef          	jal	8002ae56 <printf>
    80018c9a:	0003b797          	auipc	a5,0x3b
    80018c9e:	3777c783          	lbu	a5,887(a5) # 80054011 <excpt+0x1>
    80018ca2:	0003b497          	auipc	s1,0x3b
    80018ca6:	36e48493          	addi	s1,s1,878 # 80054010 <excpt>
    80018caa:	00014597          	auipc	a1,0x14
    80018cae:	6de58593          	addi	a1,a1,1758 # 8002d388 <__func__.0+0x2d0>
    80018cb2:	cf89                	beqz	a5,80018ccc <store_guest_page_fault_8+0xa4>
    80018cb4:	6498                	ld	a4,8(s1)
    80018cb6:	47dd                	li	a5,23
    80018cb8:	00014597          	auipc	a1,0x14
    80018cbc:	6c058593          	addi	a1,a1,1728 # 8002d378 <__func__.0+0x2c0>
    80018cc0:	00f70663          	beq	a4,a5,80018ccc <store_guest_page_fault_8+0xa4>
    80018cc4:	00014597          	auipc	a1,0x14
    80018cc8:	6c458593          	addi	a1,a1,1732 # 8002d388 <__func__.0+0x2d0>
    80018ccc:	00014517          	auipc	a0,0x14
    80018cd0:	6fc50513          	addi	a0,a0,1788 # 8002d3c8 <__func__.0+0x310>
    80018cd4:	182120ef          	jal	8002ae56 <printf>
    80018cd8:	0003b797          	auipc	a5,0x3b
    80018cdc:	3397c783          	lbu	a5,825(a5) # 80054011 <excpt+0x1>
    80018ce0:	c789                	beqz	a5,80018cea <store_guest_page_fault_8+0xc2>
    80018ce2:	6498                	ld	a4,8(s1)
    80018ce4:	47dd                	li	a5,23
    80018ce6:	00f70c63          	beq	a4,a5,80018cfe <store_guest_page_fault_8+0xd6>
    80018cea:	00014517          	auipc	a0,0x14
    80018cee:	6e650513          	addi	a0,a0,1766 # 8002d3d0 <__func__.0+0x318>
    80018cf2:	164120ef          	jal	8002ae56 <printf>
    80018cf6:	02900513          	li	a0,41
    80018cfa:	64b100ef          	jal	80029b44 <putchar>
    80018cfe:	4529                	li	a0,10
    80018d00:	645100ef          	jal	80029b44 <putchar>
    80018d04:	0003b417          	auipc	s0,0x3b
    80018d08:	30d44403          	lbu	s0,781(s0) # 80054011 <excpt+0x1>
    80018d0c:	c409                	beqz	s0,80018d16 <store_guest_page_fault_8+0xee>
    80018d0e:	6498                	ld	a4,8(s1)
    80018d10:	47dd                	li	a5,23
    80018d12:	02f70c63          	beq	a4,a5,80018d4a <store_guest_page_fault_8+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018d16:	000807b7          	lui	a5,0x80
    80018d1a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018d1e:	4401                	li	s0,0

    TEST_END();
    80018d20:	00014597          	auipc	a1,0x14
    80018d24:	66858593          	addi	a1,a1,1640 # 8002d388 <__func__.0+0x2d0>
    80018d28:	00014517          	auipc	a0,0x14
    80018d2c:	70850513          	addi	a0,a0,1800 # 8002d430 <__func__.0+0x378>
    80018d30:	126120ef          	jal	8002ae56 <printf>
    80018d34:	4511                	li	a0,4
    80018d36:	9d2e80ef          	jal	80000f08 <goto_priv>
    80018d3a:	aebe80ef          	jal	80001824 <reset_state>
}
    80018d3e:	60e2                	ld	ra,24(sp)
    80018d40:	8522                	mv	a0,s0
    80018d42:	6442                	ld	s0,16(sp)
    80018d44:	64a2                	ld	s1,8(sp)
    80018d46:	6105                	addi	sp,sp,32
    80018d48:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018d4a:	000807b7          	lui	a5,0x80
    80018d4e:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018d52:	00014597          	auipc	a1,0x14
    80018d56:	62658593          	addi	a1,a1,1574 # 8002d378 <__func__.0+0x2c0>
    80018d5a:	b7f9                	j	80018d28 <store_guest_page_fault_8+0x100>

0000000080018d5c <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    80018d5c:	1101                	addi	sp,sp,-32

    TEST_START();
    80018d5e:	00013597          	auipc	a1,0x13
    80018d62:	43a58593          	addi	a1,a1,1082 # 8002c198 <__func__.13>
    80018d66:	00014517          	auipc	a0,0x14
    80018d6a:	63250513          	addi	a0,a0,1586 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    80018d6e:	ec06                	sd	ra,24(sp)
    80018d70:	e822                	sd	s0,16(sp)
    80018d72:	e426                	sd	s1,8(sp)
    TEST_START();
    80018d74:	0e2120ef          	jal	8002ae56 <printf>
    80018d78:	4529                	li	a0,10
    80018d7a:	5cb100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018d7e:	450d                	li	a0,3
    80018d80:	988e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018d84:	85de70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018d88:	c3de70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018d8c:	9f1e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018d90:	4511                	li	a0,4
    80018d92:	976e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018d96:	000407b7          	lui	a5,0x40
    80018d9a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018d9e:	4509                	li	a0,2
    80018da0:	968e80ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018da4:	868e80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018da8:	37ab77b7          	lui	a5,0x37ab7
    80018dac:	00080737          	lui	a4,0x80
    80018db0:	078a                	slli	a5,a5,0x2
    80018db2:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018db4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018db8:	0736                	slli	a4,a4,0xd
    80018dba:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018dbe:	08200593          	li	a1,130
    80018dc2:	0001a617          	auipc	a2,0x1a
    80018dc6:	5fe60613          	addi	a2,a2,1534 # 800333c0 <__func__.0+0x6308>
    80018dca:	00014517          	auipc	a0,0x14
    80018dce:	5e650513          	addi	a0,a0,1510 # 8002d3b0 <__func__.0+0x2f8>
    80018dd2:	084120ef          	jal	8002ae56 <printf>
    80018dd6:	0003b797          	auipc	a5,0x3b
    80018dda:	23b7c783          	lbu	a5,571(a5) # 80054011 <excpt+0x1>
    80018dde:	0003b497          	auipc	s1,0x3b
    80018de2:	23248493          	addi	s1,s1,562 # 80054010 <excpt>
    80018de6:	00014597          	auipc	a1,0x14
    80018dea:	5a258593          	addi	a1,a1,1442 # 8002d388 <__func__.0+0x2d0>
    80018dee:	cf89                	beqz	a5,80018e08 <store_guest_page_fault_9+0xac>
    80018df0:	6498                	ld	a4,8(s1)
    80018df2:	47bd                	li	a5,15
    80018df4:	00014597          	auipc	a1,0x14
    80018df8:	58458593          	addi	a1,a1,1412 # 8002d378 <__func__.0+0x2c0>
    80018dfc:	00f70663          	beq	a4,a5,80018e08 <store_guest_page_fault_9+0xac>
    80018e00:	00014597          	auipc	a1,0x14
    80018e04:	58858593          	addi	a1,a1,1416 # 8002d388 <__func__.0+0x2d0>
    80018e08:	00014517          	auipc	a0,0x14
    80018e0c:	5c050513          	addi	a0,a0,1472 # 8002d3c8 <__func__.0+0x310>
    80018e10:	046120ef          	jal	8002ae56 <printf>
    80018e14:	0003b797          	auipc	a5,0x3b
    80018e18:	1fd7c783          	lbu	a5,509(a5) # 80054011 <excpt+0x1>
    80018e1c:	c789                	beqz	a5,80018e26 <store_guest_page_fault_9+0xca>
    80018e1e:	6498                	ld	a4,8(s1)
    80018e20:	47bd                	li	a5,15
    80018e22:	00f70c63          	beq	a4,a5,80018e3a <store_guest_page_fault_9+0xde>
    80018e26:	00014517          	auipc	a0,0x14
    80018e2a:	5aa50513          	addi	a0,a0,1450 # 8002d3d0 <__func__.0+0x318>
    80018e2e:	028120ef          	jal	8002ae56 <printf>
    80018e32:	02900513          	li	a0,41
    80018e36:	50f100ef          	jal	80029b44 <putchar>
    80018e3a:	4529                	li	a0,10
    80018e3c:	509100ef          	jal	80029b44 <putchar>
    80018e40:	0003b417          	auipc	s0,0x3b
    80018e44:	1d144403          	lbu	s0,465(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018e48:	00014597          	auipc	a1,0x14
    80018e4c:	54058593          	addi	a1,a1,1344 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018e50:	cc11                	beqz	s0,80018e6c <store_guest_page_fault_9+0x110>
    80018e52:	6498                	ld	a4,8(s1)
    80018e54:	47bd                	li	a5,15
    TEST_END();
    80018e56:	00014597          	auipc	a1,0x14
    80018e5a:	52258593          	addi	a1,a1,1314 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018e5e:	00f70763          	beq	a4,a5,80018e6c <store_guest_page_fault_9+0x110>
    80018e62:	4401                	li	s0,0
    TEST_END();
    80018e64:	00014597          	auipc	a1,0x14
    80018e68:	52458593          	addi	a1,a1,1316 # 8002d388 <__func__.0+0x2d0>
    80018e6c:	00014517          	auipc	a0,0x14
    80018e70:	5c450513          	addi	a0,a0,1476 # 8002d430 <__func__.0+0x378>
    80018e74:	7e3110ef          	jal	8002ae56 <printf>
    80018e78:	4511                	li	a0,4
    80018e7a:	88ee80ef          	jal	80000f08 <goto_priv>
    80018e7e:	9a7e80ef          	jal	80001824 <reset_state>
}
    80018e82:	60e2                	ld	ra,24(sp)
    80018e84:	8522                	mv	a0,s0
    80018e86:	6442                	ld	s0,16(sp)
    80018e88:	64a2                	ld	s1,8(sp)
    80018e8a:	6105                	addi	sp,sp,32
    80018e8c:	8082                	ret

0000000080018e8e <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80018e8e:	1141                	addi	sp,sp,-16

    TEST_START();
    80018e90:	00013597          	auipc	a1,0x13
    80018e94:	32858593          	addi	a1,a1,808 # 8002c1b8 <__func__.12>
    80018e98:	00014517          	auipc	a0,0x14
    80018e9c:	50050513          	addi	a0,a0,1280 # 8002d398 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    80018ea0:	e406                	sd	ra,8(sp)
    80018ea2:	e022                	sd	s0,0(sp)
    TEST_START();
    80018ea4:	7b3110ef          	jal	8002ae56 <printf>
    80018ea8:	4529                	li	a0,10
    80018eaa:	49b100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018eae:	450d                	li	a0,3
    80018eb0:	858e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018eb4:	f2ce70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018eb8:	b0de70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018ebc:	8c1e70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80018ec0:	4511                	li	a0,4
    80018ec2:	846e80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018ec6:	000407b7          	lui	a5,0x40
    80018eca:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018ece:	4509                	li	a0,2
    80018ed0:	838e80ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018ed4:	f39e70ef          	jal	80000e0c <test_setup_except_function>
    80018ed8:	37ab77b7          	lui	a5,0x37ab7
    80018edc:	00080737          	lui	a4,0x80
    80018ee0:	078a                	slli	a5,a5,0x2
    80018ee2:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018ee4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018ee8:	0736                	slli	a4,a4,0xd
    80018eea:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018eee:	08200593          	li	a1,130
    80018ef2:	0001a617          	auipc	a2,0x1a
    80018ef6:	a5e60613          	addi	a2,a2,-1442 # 80032950 <__func__.0+0x5898>
    80018efa:	00014517          	auipc	a0,0x14
    80018efe:	4b650513          	addi	a0,a0,1206 # 8002d3b0 <__func__.0+0x2f8>
    80018f02:	755110ef          	jal	8002ae56 <printf>
    80018f06:	0003b797          	auipc	a5,0x3b
    80018f0a:	10b7c783          	lbu	a5,267(a5) # 80054011 <excpt+0x1>
    80018f0e:	00014597          	auipc	a1,0x14
    80018f12:	46a58593          	addi	a1,a1,1130 # 8002d378 <__func__.0+0x2c0>
    80018f16:	c789                	beqz	a5,80018f20 <store_guest_page_fault_10+0x92>
    80018f18:	00014597          	auipc	a1,0x14
    80018f1c:	47058593          	addi	a1,a1,1136 # 8002d388 <__func__.0+0x2d0>
    80018f20:	00014517          	auipc	a0,0x14
    80018f24:	4a850513          	addi	a0,a0,1192 # 8002d3c8 <__func__.0+0x310>
    80018f28:	72f110ef          	jal	8002ae56 <printf>
    80018f2c:	0003b797          	auipc	a5,0x3b
    80018f30:	0e57c783          	lbu	a5,229(a5) # 80054011 <excpt+0x1>
    80018f34:	e7a1                	bnez	a5,80018f7c <store_guest_page_fault_10+0xee>
    80018f36:	4529                	li	a0,10
    80018f38:	40d100ef          	jal	80029b44 <putchar>
    80018f3c:	0003b797          	auipc	a5,0x3b
    80018f40:	0d57c783          	lbu	a5,213(a5) # 80054011 <excpt+0x1>
    80018f44:	e795                	bnez	a5,80018f70 <store_guest_page_fault_10+0xe2>
    80018f46:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018f48:	00014597          	auipc	a1,0x14
    80018f4c:	43058593          	addi	a1,a1,1072 # 8002d378 <__func__.0+0x2c0>
    80018f50:	00014517          	auipc	a0,0x14
    80018f54:	4e050513          	addi	a0,a0,1248 # 8002d430 <__func__.0+0x378>
    80018f58:	6ff110ef          	jal	8002ae56 <printf>
    80018f5c:	4511                	li	a0,4
    80018f5e:	fabe70ef          	jal	80000f08 <goto_priv>
    80018f62:	8c3e80ef          	jal	80001824 <reset_state>
}
    80018f66:	60a2                	ld	ra,8(sp)
    80018f68:	8522                	mv	a0,s0
    80018f6a:	6402                	ld	s0,0(sp)
    80018f6c:	0141                	addi	sp,sp,16
    80018f6e:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018f70:	4401                	li	s0,0
    TEST_END();
    80018f72:	00014597          	auipc	a1,0x14
    80018f76:	41658593          	addi	a1,a1,1046 # 8002d388 <__func__.0+0x2d0>
    80018f7a:	bfd9                	j	80018f50 <store_guest_page_fault_10+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018f7c:	00014517          	auipc	a0,0x14
    80018f80:	45450513          	addi	a0,a0,1108 # 8002d3d0 <__func__.0+0x318>
    80018f84:	6d3110ef          	jal	8002ae56 <printf>
    80018f88:	02900513          	li	a0,41
    80018f8c:	3b9100ef          	jal	80029b44 <putchar>
    80018f90:	b75d                	j	80018f36 <store_guest_page_fault_10+0xa8>

0000000080018f92 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80018f92:	1101                	addi	sp,sp,-32

    TEST_START();
    80018f94:	00013597          	auipc	a1,0x13
    80018f98:	24458593          	addi	a1,a1,580 # 8002c1d8 <__func__.11>
    80018f9c:	00014517          	auipc	a0,0x14
    80018fa0:	3fc50513          	addi	a0,a0,1020 # 8002d398 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    80018fa4:	ec06                	sd	ra,24(sp)
    80018fa6:	e822                	sd	s0,16(sp)
    80018fa8:	e426                	sd	s1,8(sp)
    80018faa:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018fac:	6ab110ef          	jal	8002ae56 <printf>
    80018fb0:	4529                	li	a0,10
    80018fb2:	393100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80018fb6:	450d                	li	a0,3
    80018fb8:	f51e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018fbc:	e24e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018fc0:	a05e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018fc4:	fb8e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80018fc8:	4509                	li	a0,2
    80018fca:	f3fe70ef          	jal	80000f08 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018fce:	e3fe70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80018fd2:	00100737          	lui	a4,0x100
    80018fd6:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018fda:	4785                	li	a5,1
    80018fdc:	0732                	slli	a4,a4,0xc
    80018fde:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018fe2:	08200593          	li	a1,130
    80018fe6:	0001a617          	auipc	a2,0x1a
    80018fea:	41260613          	addi	a2,a2,1042 # 800333f8 <__func__.0+0x6340>
    80018fee:	00014517          	auipc	a0,0x14
    80018ff2:	3c250513          	addi	a0,a0,962 # 8002d3b0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80018ff6:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018ffa:	65d110ef          	jal	8002ae56 <printf>
    80018ffe:	0003b797          	auipc	a5,0x3b
    80019002:	0137c783          	lbu	a5,19(a5) # 80054011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80019006:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80019008:	0003b917          	auipc	s2,0x3b
    8001900c:	00890913          	addi	s2,s2,8 # 80054010 <excpt>
    80019010:	00014597          	auipc	a1,0x14
    80019014:	37858593          	addi	a1,a1,888 # 8002d388 <__func__.0+0x2d0>
    80019018:	cf91                	beqz	a5,80019034 <amo_guest_page_fault_1+0xa2>
    8001901a:	00893703          	ld	a4,8(s2)
    8001901e:	47dd                	li	a5,23
    80019020:	00014597          	auipc	a1,0x14
    80019024:	35858593          	addi	a1,a1,856 # 8002d378 <__func__.0+0x2c0>
    80019028:	00f70663          	beq	a4,a5,80019034 <amo_guest_page_fault_1+0xa2>
    8001902c:	00014597          	auipc	a1,0x14
    80019030:	35c58593          	addi	a1,a1,860 # 8002d388 <__func__.0+0x2d0>
    80019034:	00014517          	auipc	a0,0x14
    80019038:	39450513          	addi	a0,a0,916 # 8002d3c8 <__func__.0+0x310>
    8001903c:	61b110ef          	jal	8002ae56 <printf>
    80019040:	0003b797          	auipc	a5,0x3b
    80019044:	fd17c783          	lbu	a5,-47(a5) # 80054011 <excpt+0x1>
    80019048:	c791                	beqz	a5,80019054 <amo_guest_page_fault_1+0xc2>
    8001904a:	00893703          	ld	a4,8(s2)
    8001904e:	47dd                	li	a5,23
    80019050:	00f70c63          	beq	a4,a5,80019068 <amo_guest_page_fault_1+0xd6>
    80019054:	00014517          	auipc	a0,0x14
    80019058:	37c50513          	addi	a0,a0,892 # 8002d3d0 <__func__.0+0x318>
    8001905c:	5fb110ef          	jal	8002ae56 <printf>
    80019060:	02900513          	li	a0,41
    80019064:	2e1100ef          	jal	80029b44 <putchar>
    80019068:	4529                	li	a0,10
    8001906a:	2db100ef          	jal	80029b44 <putchar>
    8001906e:	0003b797          	auipc	a5,0x3b
    80019072:	fa37c783          	lbu	a5,-93(a5) # 80054011 <excpt+0x1>
    80019076:	4481                	li	s1,0
    80019078:	c791                	beqz	a5,80019084 <amo_guest_page_fault_1+0xf2>
    8001907a:	00893483          	ld	s1,8(s2)
    8001907e:	14a5                	addi	s1,s1,-23
    80019080:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80019084:	d89e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80019088:	001007b7          	lui	a5,0x100
    8001908c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019090:	8722                	mv	a4,s0
    80019092:	07b2                	slli	a5,a5,0xc
    80019094:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019098:	08200593          	li	a1,130
    8001909c:	0001a617          	auipc	a2,0x1a
    800190a0:	3ac60613          	addi	a2,a2,940 # 80033448 <__func__.0+0x6390>
    800190a4:	00014517          	auipc	a0,0x14
    800190a8:	30c50513          	addi	a0,a0,780 # 8002d3b0 <__func__.0+0x2f8>
    800190ac:	5ab110ef          	jal	8002ae56 <printf>
    800190b0:	0003b797          	auipc	a5,0x3b
    800190b4:	f617c783          	lbu	a5,-159(a5) # 80054011 <excpt+0x1>
    800190b8:	00014597          	auipc	a1,0x14
    800190bc:	2d058593          	addi	a1,a1,720 # 8002d388 <__func__.0+0x2d0>
    800190c0:	cf91                	beqz	a5,800190dc <amo_guest_page_fault_1+0x14a>
    800190c2:	00893703          	ld	a4,8(s2)
    800190c6:	47dd                	li	a5,23
    800190c8:	00014597          	auipc	a1,0x14
    800190cc:	2b058593          	addi	a1,a1,688 # 8002d378 <__func__.0+0x2c0>
    800190d0:	00f70663          	beq	a4,a5,800190dc <amo_guest_page_fault_1+0x14a>
    800190d4:	00014597          	auipc	a1,0x14
    800190d8:	2b458593          	addi	a1,a1,692 # 8002d388 <__func__.0+0x2d0>
    800190dc:	00014517          	auipc	a0,0x14
    800190e0:	2ec50513          	addi	a0,a0,748 # 8002d3c8 <__func__.0+0x310>
    800190e4:	573110ef          	jal	8002ae56 <printf>
    800190e8:	0003b797          	auipc	a5,0x3b
    800190ec:	f297c783          	lbu	a5,-215(a5) # 80054011 <excpt+0x1>
    800190f0:	c791                	beqz	a5,800190fc <amo_guest_page_fault_1+0x16a>
    800190f2:	00893703          	ld	a4,8(s2)
    800190f6:	47dd                	li	a5,23
    800190f8:	00f70c63          	beq	a4,a5,80019110 <amo_guest_page_fault_1+0x17e>
    800190fc:	00014517          	auipc	a0,0x14
    80019100:	2d450513          	addi	a0,a0,724 # 8002d3d0 <__func__.0+0x318>
    80019104:	553110ef          	jal	8002ae56 <printf>
    80019108:	02900513          	li	a0,41
    8001910c:	239100ef          	jal	80029b44 <putchar>
    80019110:	4529                	li	a0,10
    80019112:	233100ef          	jal	80029b44 <putchar>
    80019116:	c09d                	beqz	s1,8001913c <amo_guest_page_fault_1+0x1aa>
    80019118:	0003b417          	auipc	s0,0x3b
    8001911c:	ef944403          	lbu	s0,-263(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019120:	00014597          	auipc	a1,0x14
    80019124:	26858593          	addi	a1,a1,616 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019128:	cc19                	beqz	s0,80019146 <amo_guest_page_fault_1+0x1b4>
    8001912a:	00893703          	ld	a4,8(s2)
    8001912e:	47dd                	li	a5,23
    TEST_END();
    80019130:	00014597          	auipc	a1,0x14
    80019134:	24858593          	addi	a1,a1,584 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019138:	00f70763          	beq	a4,a5,80019146 <amo_guest_page_fault_1+0x1b4>
    8001913c:	4401                	li	s0,0
    TEST_END();
    8001913e:	00014597          	auipc	a1,0x14
    80019142:	24a58593          	addi	a1,a1,586 # 8002d388 <__func__.0+0x2d0>
    80019146:	00014517          	auipc	a0,0x14
    8001914a:	2ea50513          	addi	a0,a0,746 # 8002d430 <__func__.0+0x378>
    8001914e:	509110ef          	jal	8002ae56 <printf>
    80019152:	4511                	li	a0,4
    80019154:	db5e70ef          	jal	80000f08 <goto_priv>
    80019158:	ecce80ef          	jal	80001824 <reset_state>
}
    8001915c:	60e2                	ld	ra,24(sp)
    8001915e:	8522                	mv	a0,s0
    80019160:	6442                	ld	s0,16(sp)
    80019162:	64a2                	ld	s1,8(sp)
    80019164:	6902                	ld	s2,0(sp)
    80019166:	6105                	addi	sp,sp,32
    80019168:	8082                	ret

000000008001916a <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    8001916a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001916c:	00013597          	auipc	a1,0x13
    80019170:	08458593          	addi	a1,a1,132 # 8002c1f0 <__func__.10>
    80019174:	00014517          	auipc	a0,0x14
    80019178:	22450513          	addi	a0,a0,548 # 8002d398 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    8001917c:	ec06                	sd	ra,24(sp)
    8001917e:	e822                	sd	s0,16(sp)
    80019180:	e426                	sd	s1,8(sp)
    TEST_START();
    80019182:	4d5110ef          	jal	8002ae56 <printf>
    80019186:	4529                	li	a0,10
    80019188:	1bd100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001918c:	450d                	li	a0,3
    8001918e:	d7be70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019192:	c4ee70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019196:	82fe70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001919a:	de2e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001919e:	4509                	li	a0,2
    800191a0:	d69e70ef          	jal	80000f08 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800191a4:	c69e70ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800191a8:	000807b7          	lui	a5,0x80
    800191ac:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    800191b0:	37ab77b7          	lui	a5,0x37ab7
    800191b4:	00100737          	lui	a4,0x100
    800191b8:	078a                	slli	a5,a5,0x2
    800191ba:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800191be:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800191c2:	0732                	slli	a4,a4,0xc
    800191c4:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191c8:	08200593          	li	a1,130
    800191cc:	0001a617          	auipc	a2,0x1a
    800191d0:	2dc60613          	addi	a2,a2,732 # 800334a8 <__func__.0+0x63f0>
    800191d4:	00014517          	auipc	a0,0x14
    800191d8:	1dc50513          	addi	a0,a0,476 # 8002d3b0 <__func__.0+0x2f8>
    800191dc:	47b110ef          	jal	8002ae56 <printf>
    800191e0:	0003b797          	auipc	a5,0x3b
    800191e4:	e317c783          	lbu	a5,-463(a5) # 80054011 <excpt+0x1>
    800191e8:	0003b497          	auipc	s1,0x3b
    800191ec:	e2848493          	addi	s1,s1,-472 # 80054010 <excpt>
    800191f0:	00014597          	auipc	a1,0x14
    800191f4:	19858593          	addi	a1,a1,408 # 8002d388 <__func__.0+0x2d0>
    800191f8:	cf89                	beqz	a5,80019212 <amo_guest_page_fault_2+0xa8>
    800191fa:	6498                	ld	a4,8(s1)
    800191fc:	47dd                	li	a5,23
    800191fe:	00014597          	auipc	a1,0x14
    80019202:	17a58593          	addi	a1,a1,378 # 8002d378 <__func__.0+0x2c0>
    80019206:	00f70663          	beq	a4,a5,80019212 <amo_guest_page_fault_2+0xa8>
    8001920a:	00014597          	auipc	a1,0x14
    8001920e:	17e58593          	addi	a1,a1,382 # 8002d388 <__func__.0+0x2d0>
    80019212:	00014517          	auipc	a0,0x14
    80019216:	1b650513          	addi	a0,a0,438 # 8002d3c8 <__func__.0+0x310>
    8001921a:	43d110ef          	jal	8002ae56 <printf>
    8001921e:	0003b797          	auipc	a5,0x3b
    80019222:	df37c783          	lbu	a5,-525(a5) # 80054011 <excpt+0x1>
    80019226:	c789                	beqz	a5,80019230 <amo_guest_page_fault_2+0xc6>
    80019228:	6498                	ld	a4,8(s1)
    8001922a:	47dd                	li	a5,23
    8001922c:	00f70c63          	beq	a4,a5,80019244 <amo_guest_page_fault_2+0xda>
    80019230:	00014517          	auipc	a0,0x14
    80019234:	1a050513          	addi	a0,a0,416 # 8002d3d0 <__func__.0+0x318>
    80019238:	41f110ef          	jal	8002ae56 <printf>
    8001923c:	02900513          	li	a0,41
    80019240:	105100ef          	jal	80029b44 <putchar>
    80019244:	4529                	li	a0,10
    80019246:	0ff100ef          	jal	80029b44 <putchar>
    8001924a:	0003b417          	auipc	s0,0x3b
    8001924e:	dc744403          	lbu	s0,-569(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019252:	00014597          	auipc	a1,0x14
    80019256:	13658593          	addi	a1,a1,310 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001925a:	cc11                	beqz	s0,80019276 <amo_guest_page_fault_2+0x10c>
    8001925c:	6498                	ld	a4,8(s1)
    8001925e:	47dd                	li	a5,23
    TEST_END();
    80019260:	00014597          	auipc	a1,0x14
    80019264:	11858593          	addi	a1,a1,280 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019268:	00f70763          	beq	a4,a5,80019276 <amo_guest_page_fault_2+0x10c>
    8001926c:	4401                	li	s0,0
    TEST_END();
    8001926e:	00014597          	auipc	a1,0x14
    80019272:	11a58593          	addi	a1,a1,282 # 8002d388 <__func__.0+0x2d0>
    80019276:	00014517          	auipc	a0,0x14
    8001927a:	1ba50513          	addi	a0,a0,442 # 8002d430 <__func__.0+0x378>
    8001927e:	3d9110ef          	jal	8002ae56 <printf>
    80019282:	4511                	li	a0,4
    80019284:	c85e70ef          	jal	80000f08 <goto_priv>
    80019288:	d9ce80ef          	jal	80001824 <reset_state>
}
    8001928c:	60e2                	ld	ra,24(sp)
    8001928e:	8522                	mv	a0,s0
    80019290:	6442                	ld	s0,16(sp)
    80019292:	64a2                	ld	s1,8(sp)
    80019294:	6105                	addi	sp,sp,32
    80019296:	8082                	ret

0000000080019298 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80019298:	1101                	addi	sp,sp,-32

    TEST_START();
    8001929a:	00013597          	auipc	a1,0x13
    8001929e:	f6e58593          	addi	a1,a1,-146 # 8002c208 <__func__.9>
    800192a2:	00014517          	auipc	a0,0x14
    800192a6:	0f650513          	addi	a0,a0,246 # 8002d398 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    800192aa:	ec06                	sd	ra,24(sp)
    800192ac:	e822                	sd	s0,16(sp)
    800192ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800192b0:	3a7110ef          	jal	8002ae56 <printf>
    800192b4:	4529                	li	a0,10
    800192b6:	08f100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800192ba:	450d                	li	a0,3
    800192bc:	c4de70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800192c0:	b20e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800192c4:	f00e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800192c8:	cb4e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    800192cc:	4509                	li	a0,2
    800192ce:	c3be70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800192d2:	b3be70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800192d6:	000807b7          	lui	a5,0x80
    800192da:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800192de:	37ab77b7          	lui	a5,0x37ab7
    800192e2:	00100737          	lui	a4,0x100
    800192e6:	078a                	slli	a5,a5,0x2
    800192e8:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800192ec:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800192f0:	0732                	slli	a4,a4,0xc
    800192f2:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800192f6:	08200593          	li	a1,130
    800192fa:	0001a617          	auipc	a2,0x1a
    800192fe:	21660613          	addi	a2,a2,534 # 80033510 <__func__.0+0x6458>
    80019302:	00014517          	auipc	a0,0x14
    80019306:	0ae50513          	addi	a0,a0,174 # 8002d3b0 <__func__.0+0x2f8>
    8001930a:	34d110ef          	jal	8002ae56 <printf>
    8001930e:	0003b797          	auipc	a5,0x3b
    80019312:	d037c783          	lbu	a5,-765(a5) # 80054011 <excpt+0x1>
    80019316:	0003b497          	auipc	s1,0x3b
    8001931a:	cfa48493          	addi	s1,s1,-774 # 80054010 <excpt>
    8001931e:	00014597          	auipc	a1,0x14
    80019322:	06a58593          	addi	a1,a1,106 # 8002d388 <__func__.0+0x2d0>
    80019326:	cf89                	beqz	a5,80019340 <amo_guest_page_fault_3+0xa8>
    80019328:	6498                	ld	a4,8(s1)
    8001932a:	47dd                	li	a5,23
    8001932c:	00014597          	auipc	a1,0x14
    80019330:	04c58593          	addi	a1,a1,76 # 8002d378 <__func__.0+0x2c0>
    80019334:	00f70663          	beq	a4,a5,80019340 <amo_guest_page_fault_3+0xa8>
    80019338:	00014597          	auipc	a1,0x14
    8001933c:	05058593          	addi	a1,a1,80 # 8002d388 <__func__.0+0x2d0>
    80019340:	00014517          	auipc	a0,0x14
    80019344:	08850513          	addi	a0,a0,136 # 8002d3c8 <__func__.0+0x310>
    80019348:	30f110ef          	jal	8002ae56 <printf>
    8001934c:	0003b797          	auipc	a5,0x3b
    80019350:	cc57c783          	lbu	a5,-827(a5) # 80054011 <excpt+0x1>
    80019354:	c789                	beqz	a5,8001935e <amo_guest_page_fault_3+0xc6>
    80019356:	6498                	ld	a4,8(s1)
    80019358:	47dd                	li	a5,23
    8001935a:	00f70c63          	beq	a4,a5,80019372 <amo_guest_page_fault_3+0xda>
    8001935e:	00014517          	auipc	a0,0x14
    80019362:	07250513          	addi	a0,a0,114 # 8002d3d0 <__func__.0+0x318>
    80019366:	2f1110ef          	jal	8002ae56 <printf>
    8001936a:	02900513          	li	a0,41
    8001936e:	7d6100ef          	jal	80029b44 <putchar>
    80019372:	4529                	li	a0,10
    80019374:	7d0100ef          	jal	80029b44 <putchar>
    80019378:	0003b417          	auipc	s0,0x3b
    8001937c:	c9944403          	lbu	s0,-871(s0) # 80054011 <excpt+0x1>
    80019380:	c409                	beqz	s0,8001938a <amo_guest_page_fault_3+0xf2>
    80019382:	6498                	ld	a4,8(s1)
    80019384:	47dd                	li	a5,23
    80019386:	02f70c63          	beq	a4,a5,800193be <amo_guest_page_fault_3+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001938a:	000807b7          	lui	a5,0x80
    8001938e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019392:	4401                	li	s0,0

    TEST_END();
    80019394:	00014597          	auipc	a1,0x14
    80019398:	ff458593          	addi	a1,a1,-12 # 8002d388 <__func__.0+0x2d0>
    8001939c:	00014517          	auipc	a0,0x14
    800193a0:	09450513          	addi	a0,a0,148 # 8002d430 <__func__.0+0x378>
    800193a4:	2b3110ef          	jal	8002ae56 <printf>
    800193a8:	4511                	li	a0,4
    800193aa:	b5fe70ef          	jal	80000f08 <goto_priv>
    800193ae:	c76e80ef          	jal	80001824 <reset_state>
}
    800193b2:	60e2                	ld	ra,24(sp)
    800193b4:	8522                	mv	a0,s0
    800193b6:	6442                	ld	s0,16(sp)
    800193b8:	64a2                	ld	s1,8(sp)
    800193ba:	6105                	addi	sp,sp,32
    800193bc:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800193be:	000807b7          	lui	a5,0x80
    800193c2:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800193c6:	00014597          	auipc	a1,0x14
    800193ca:	fb258593          	addi	a1,a1,-78 # 8002d378 <__func__.0+0x2c0>
    800193ce:	b7f9                	j	8001939c <amo_guest_page_fault_3+0x104>

00000000800193d0 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    800193d0:	1101                	addi	sp,sp,-32

    TEST_START();
    800193d2:	00013597          	auipc	a1,0x13
    800193d6:	e4e58593          	addi	a1,a1,-434 # 8002c220 <__func__.8>
    800193da:	00014517          	auipc	a0,0x14
    800193de:	fbe50513          	addi	a0,a0,-66 # 8002d398 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    800193e2:	ec06                	sd	ra,24(sp)
    800193e4:	e822                	sd	s0,16(sp)
    800193e6:	e426                	sd	s1,8(sp)
    TEST_START();
    800193e8:	26f110ef          	jal	8002ae56 <printf>
    800193ec:	4529                	li	a0,10
    800193ee:	756100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    800193f2:	450d                	li	a0,3
    800193f4:	b15e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800193f8:	9e8e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800193fc:	dc8e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019400:	b7ce70ef          	jal	8000077c <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    80019404:	4511                	li	a0,4
    80019406:	b03e70ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001940a:	000407b7          	lui	a5,0x40
    8001940e:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80019412:	450d                	li	a0,3
    80019414:	af5e70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019418:	9f5e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001941c:	37ab77b7          	lui	a5,0x37ab7
    80019420:	00080737          	lui	a4,0x80
    80019424:	078a                	slli	a5,a5,0x2
    80019426:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80019428:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001942c:	0736                	slli	a4,a4,0xd
    8001942e:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80019432:	08200593          	li	a1,130
    80019436:	0001a617          	auipc	a2,0x1a
    8001943a:	14a60613          	addi	a2,a2,330 # 80033580 <__func__.0+0x64c8>
    8001943e:	00014517          	auipc	a0,0x14
    80019442:	f7250513          	addi	a0,a0,-142 # 8002d3b0 <__func__.0+0x2f8>
    80019446:	211110ef          	jal	8002ae56 <printf>
    8001944a:	0003b797          	auipc	a5,0x3b
    8001944e:	bc77c783          	lbu	a5,-1081(a5) # 80054011 <excpt+0x1>
    80019452:	0003b497          	auipc	s1,0x3b
    80019456:	bbe48493          	addi	s1,s1,-1090 # 80054010 <excpt>
    8001945a:	00014597          	auipc	a1,0x14
    8001945e:	f2e58593          	addi	a1,a1,-210 # 8002d388 <__func__.0+0x2d0>
    80019462:	cf89                	beqz	a5,8001947c <amo_guest_page_fault_4+0xac>
    80019464:	6498                	ld	a4,8(s1)
    80019466:	47bd                	li	a5,15
    80019468:	00014597          	auipc	a1,0x14
    8001946c:	f1058593          	addi	a1,a1,-240 # 8002d378 <__func__.0+0x2c0>
    80019470:	00f70663          	beq	a4,a5,8001947c <amo_guest_page_fault_4+0xac>
    80019474:	00014597          	auipc	a1,0x14
    80019478:	f1458593          	addi	a1,a1,-236 # 8002d388 <__func__.0+0x2d0>
    8001947c:	00014517          	auipc	a0,0x14
    80019480:	f4c50513          	addi	a0,a0,-180 # 8002d3c8 <__func__.0+0x310>
    80019484:	1d3110ef          	jal	8002ae56 <printf>
    80019488:	0003b797          	auipc	a5,0x3b
    8001948c:	b897c783          	lbu	a5,-1143(a5) # 80054011 <excpt+0x1>
    80019490:	c789                	beqz	a5,8001949a <amo_guest_page_fault_4+0xca>
    80019492:	6498                	ld	a4,8(s1)
    80019494:	47bd                	li	a5,15
    80019496:	00f70c63          	beq	a4,a5,800194ae <amo_guest_page_fault_4+0xde>
    8001949a:	00014517          	auipc	a0,0x14
    8001949e:	f3650513          	addi	a0,a0,-202 # 8002d3d0 <__func__.0+0x318>
    800194a2:	1b5110ef          	jal	8002ae56 <printf>
    800194a6:	02900513          	li	a0,41
    800194aa:	69a100ef          	jal	80029b44 <putchar>
    800194ae:	4529                	li	a0,10
    800194b0:	694100ef          	jal	80029b44 <putchar>
    800194b4:	0003b417          	auipc	s0,0x3b
    800194b8:	b5d44403          	lbu	s0,-1187(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800194bc:	00014597          	auipc	a1,0x14
    800194c0:	ecc58593          	addi	a1,a1,-308 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800194c4:	cc11                	beqz	s0,800194e0 <amo_guest_page_fault_4+0x110>
    800194c6:	6498                	ld	a4,8(s1)
    800194c8:	47bd                	li	a5,15
    TEST_END();
    800194ca:	00014597          	auipc	a1,0x14
    800194ce:	eae58593          	addi	a1,a1,-338 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800194d2:	00f70763          	beq	a4,a5,800194e0 <amo_guest_page_fault_4+0x110>
    800194d6:	4401                	li	s0,0
    TEST_END();
    800194d8:	00014597          	auipc	a1,0x14
    800194dc:	eb058593          	addi	a1,a1,-336 # 8002d388 <__func__.0+0x2d0>
    800194e0:	00014517          	auipc	a0,0x14
    800194e4:	f5050513          	addi	a0,a0,-176 # 8002d430 <__func__.0+0x378>
    800194e8:	16f110ef          	jal	8002ae56 <printf>
    800194ec:	4511                	li	a0,4
    800194ee:	a1be70ef          	jal	80000f08 <goto_priv>
    800194f2:	b32e80ef          	jal	80001824 <reset_state>
}
    800194f6:	60e2                	ld	ra,24(sp)
    800194f8:	8522                	mv	a0,s0
    800194fa:	6442                	ld	s0,16(sp)
    800194fc:	64a2                	ld	s1,8(sp)
    800194fe:	6105                	addi	sp,sp,32
    80019500:	8082                	ret

0000000080019502 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    80019502:	1141                	addi	sp,sp,-16

    TEST_START();
    80019504:	00013597          	auipc	a1,0x13
    80019508:	d3458593          	addi	a1,a1,-716 # 8002c238 <__func__.7>
    8001950c:	00014517          	auipc	a0,0x14
    80019510:	e8c50513          	addi	a0,a0,-372 # 8002d398 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    80019514:	e406                	sd	ra,8(sp)
    80019516:	e022                	sd	s0,0(sp)
    TEST_START();
    80019518:	13f110ef          	jal	8002ae56 <printf>
    8001951c:	4529                	li	a0,10
    8001951e:	626100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80019522:	450d                	li	a0,3
    80019524:	9e5e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019528:	8b8e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001952c:	c98e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019530:	a4ce70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    80019534:	4511                	li	a0,4
    80019536:	9d3e70ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    8001953a:	000407b7          	lui	a5,0x40
    8001953e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80019542:	450d                	li	a0,3
    80019544:	9c5e70ef          	jal	80000f08 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019548:	8c5e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8001954c:	37ab77b7          	lui	a5,0x37ab7
    80019550:	00080737          	lui	a4,0x80
    80019554:	078a                	slli	a5,a5,0x2
    80019556:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80019558:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001955c:	0736                	slli	a4,a4,0xd
    8001955e:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80019562:	08200593          	li	a1,130
    80019566:	0001a617          	auipc	a2,0x1a
    8001956a:	05a60613          	addi	a2,a2,90 # 800335c0 <__func__.0+0x6508>
    8001956e:	00014517          	auipc	a0,0x14
    80019572:	e4250513          	addi	a0,a0,-446 # 8002d3b0 <__func__.0+0x2f8>
    80019576:	0e1110ef          	jal	8002ae56 <printf>
    8001957a:	0003b797          	auipc	a5,0x3b
    8001957e:	a977c783          	lbu	a5,-1385(a5) # 80054011 <excpt+0x1>
    80019582:	00014597          	auipc	a1,0x14
    80019586:	df658593          	addi	a1,a1,-522 # 8002d378 <__func__.0+0x2c0>
    8001958a:	c789                	beqz	a5,80019594 <amo_guest_page_fault_5+0x92>
    8001958c:	00014597          	auipc	a1,0x14
    80019590:	dfc58593          	addi	a1,a1,-516 # 8002d388 <__func__.0+0x2d0>
    80019594:	00014517          	auipc	a0,0x14
    80019598:	e3450513          	addi	a0,a0,-460 # 8002d3c8 <__func__.0+0x310>
    8001959c:	0bb110ef          	jal	8002ae56 <printf>
    800195a0:	0003b797          	auipc	a5,0x3b
    800195a4:	a717c783          	lbu	a5,-1423(a5) # 80054011 <excpt+0x1>
    800195a8:	e7a1                	bnez	a5,800195f0 <amo_guest_page_fault_5+0xee>
    800195aa:	4529                	li	a0,10
    800195ac:	598100ef          	jal	80029b44 <putchar>
    800195b0:	0003b797          	auipc	a5,0x3b
    800195b4:	a617c783          	lbu	a5,-1439(a5) # 80054011 <excpt+0x1>
    800195b8:	e795                	bnez	a5,800195e4 <amo_guest_page_fault_5+0xe2>
    800195ba:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800195bc:	00014597          	auipc	a1,0x14
    800195c0:	dbc58593          	addi	a1,a1,-580 # 8002d378 <__func__.0+0x2c0>
    800195c4:	00014517          	auipc	a0,0x14
    800195c8:	e6c50513          	addi	a0,a0,-404 # 8002d430 <__func__.0+0x378>
    800195cc:	08b110ef          	jal	8002ae56 <printf>
    800195d0:	4511                	li	a0,4
    800195d2:	937e70ef          	jal	80000f08 <goto_priv>
    800195d6:	a4ee80ef          	jal	80001824 <reset_state>
}
    800195da:	60a2                	ld	ra,8(sp)
    800195dc:	8522                	mv	a0,s0
    800195de:	6402                	ld	s0,0(sp)
    800195e0:	0141                	addi	sp,sp,16
    800195e2:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800195e4:	4401                	li	s0,0
    TEST_END();
    800195e6:	00014597          	auipc	a1,0x14
    800195ea:	da258593          	addi	a1,a1,-606 # 8002d388 <__func__.0+0x2d0>
    800195ee:	bfd9                	j	800195c4 <amo_guest_page_fault_5+0xc2>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800195f0:	00014517          	auipc	a0,0x14
    800195f4:	de050513          	addi	a0,a0,-544 # 8002d3d0 <__func__.0+0x318>
    800195f8:	05f110ef          	jal	8002ae56 <printf>
    800195fc:	02900513          	li	a0,41
    80019600:	544100ef          	jal	80029b44 <putchar>
    80019604:	b75d                	j	800195aa <amo_guest_page_fault_5+0xa8>

0000000080019606 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80019606:	1101                	addi	sp,sp,-32

    TEST_START();
    80019608:	00013597          	auipc	a1,0x13
    8001960c:	c4858593          	addi	a1,a1,-952 # 8002c250 <__func__.6>
    80019610:	00014517          	auipc	a0,0x14
    80019614:	d8850513          	addi	a0,a0,-632 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    80019618:	ec06                	sd	ra,24(sp)
    8001961a:	e822                	sd	s0,16(sp)
    8001961c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001961e:	039110ef          	jal	8002ae56 <printf>
    80019622:	4529                	li	a0,10
    80019624:	520100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80019628:	450d                	li	a0,3
    8001962a:	8dfe70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001962e:	fb3e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019632:	b92e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019636:	946e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001963a:	4509                	li	a0,2
    8001963c:	8cde70ef          	jal	80000f08 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    80019640:	fcce70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019644:	001007b7          	lui	a5,0x100
    80019648:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001964c:	07b2                	slli	a5,a5,0xc
    8001964e:	0003b417          	auipc	s0,0x3b
    80019652:	9c240413          	addi	s0,s0,-1598 # 80054010 <excpt>
    80019656:	00000297          	auipc	t0,0x0
    8001965a:	00c28293          	addi	t0,t0,12 # 80019662 <instruction_guest_page_fault_1+0x5c>
    8001965e:	02543c23          	sd	t0,56(s0)
    80019662:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80019664:	08200593          	li	a1,130
    80019668:	0001a617          	auipc	a2,0x1a
    8001966c:	f9860613          	addi	a2,a2,-104 # 80033600 <__func__.0+0x6548>
    80019670:	00014517          	auipc	a0,0x14
    80019674:	d4050513          	addi	a0,a0,-704 # 8002d3b0 <__func__.0+0x2f8>
    80019678:	7de110ef          	jal	8002ae56 <printf>
    8001967c:	0003b797          	auipc	a5,0x3b
    80019680:	9957c783          	lbu	a5,-1643(a5) # 80054011 <excpt+0x1>
    80019684:	00014597          	auipc	a1,0x14
    80019688:	d0458593          	addi	a1,a1,-764 # 8002d388 <__func__.0+0x2d0>
    8001968c:	cf89                	beqz	a5,800196a6 <instruction_guest_page_fault_1+0xa0>
    8001968e:	6418                	ld	a4,8(s0)
    80019690:	47d1                	li	a5,20
    80019692:	00014597          	auipc	a1,0x14
    80019696:	ce658593          	addi	a1,a1,-794 # 8002d378 <__func__.0+0x2c0>
    8001969a:	00f70663          	beq	a4,a5,800196a6 <instruction_guest_page_fault_1+0xa0>
    8001969e:	00014597          	auipc	a1,0x14
    800196a2:	cea58593          	addi	a1,a1,-790 # 8002d388 <__func__.0+0x2d0>
    800196a6:	00014517          	auipc	a0,0x14
    800196aa:	d2250513          	addi	a0,a0,-734 # 8002d3c8 <__func__.0+0x310>
    800196ae:	7a8110ef          	jal	8002ae56 <printf>
    800196b2:	0003b797          	auipc	a5,0x3b
    800196b6:	95f7c783          	lbu	a5,-1697(a5) # 80054011 <excpt+0x1>
    800196ba:	c789                	beqz	a5,800196c4 <instruction_guest_page_fault_1+0xbe>
    800196bc:	6418                	ld	a4,8(s0)
    800196be:	47d1                	li	a5,20
    800196c0:	00f70c63          	beq	a4,a5,800196d8 <instruction_guest_page_fault_1+0xd2>
    800196c4:	00014517          	auipc	a0,0x14
    800196c8:	d0c50513          	addi	a0,a0,-756 # 8002d3d0 <__func__.0+0x318>
    800196cc:	78a110ef          	jal	8002ae56 <printf>
    800196d0:	02900513          	li	a0,41
    800196d4:	470100ef          	jal	80029b44 <putchar>
    800196d8:	4529                	li	a0,10
    800196da:	46a100ef          	jal	80029b44 <putchar>
    800196de:	0003b497          	auipc	s1,0x3b
    800196e2:	9334c483          	lbu	s1,-1741(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800196e6:	00014597          	auipc	a1,0x14
    800196ea:	ca258593          	addi	a1,a1,-862 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800196ee:	cc91                	beqz	s1,8001970a <instruction_guest_page_fault_1+0x104>
    800196f0:	6418                	ld	a4,8(s0)
    800196f2:	47d1                	li	a5,20
    TEST_END();
    800196f4:	00014597          	auipc	a1,0x14
    800196f8:	c8458593          	addi	a1,a1,-892 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800196fc:	00f70763          	beq	a4,a5,8001970a <instruction_guest_page_fault_1+0x104>
    80019700:	4481                	li	s1,0
    TEST_END();
    80019702:	00014597          	auipc	a1,0x14
    80019706:	c8658593          	addi	a1,a1,-890 # 8002d388 <__func__.0+0x2d0>
    8001970a:	00014517          	auipc	a0,0x14
    8001970e:	d2650513          	addi	a0,a0,-730 # 8002d430 <__func__.0+0x378>
    80019712:	744110ef          	jal	8002ae56 <printf>
    80019716:	4511                	li	a0,4
    80019718:	ff0e70ef          	jal	80000f08 <goto_priv>
    8001971c:	908e80ef          	jal	80001824 <reset_state>

}
    80019720:	60e2                	ld	ra,24(sp)
    80019722:	6442                	ld	s0,16(sp)
    80019724:	8526                	mv	a0,s1
    80019726:	64a2                	ld	s1,8(sp)
    80019728:	6105                	addi	sp,sp,32
    8001972a:	8082                	ret

000000008001972c <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    8001972c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001972e:	00013597          	auipc	a1,0x13
    80019732:	b4258593          	addi	a1,a1,-1214 # 8002c270 <__func__.5>
    80019736:	00014517          	auipc	a0,0x14
    8001973a:	c6250513          	addi	a0,a0,-926 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    8001973e:	ec06                	sd	ra,24(sp)
    80019740:	e822                	sd	s0,16(sp)
    80019742:	e426                	sd	s1,8(sp)
    TEST_START();
    80019744:	712110ef          	jal	8002ae56 <printf>
    80019748:	4529                	li	a0,10
    8001974a:	3fa100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001974e:	450d                	li	a0,3
    80019750:	fb8e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019754:	e8de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019758:	a6ce70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001975c:	820e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019760:	4509                	li	a0,2
    80019762:	fa6e70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019766:	ea6e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    8001976a:	400137b7          	lui	a5,0x40013
    8001976e:	078a                	slli	a5,a5,0x2
    80019770:	0003b417          	auipc	s0,0x3b
    80019774:	8a040413          	addi	s0,s0,-1888 # 80054010 <excpt>
    80019778:	00000297          	auipc	t0,0x0
    8001977c:	00c28293          	addi	t0,t0,12 # 80019784 <instruction_guest_page_fault_2+0x58>
    80019780:	02543c23          	sd	t0,56(s0)
    80019784:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019786:	08200593          	li	a1,130
    8001978a:	0001a617          	auipc	a2,0x1a
    8001978e:	ed660613          	addi	a2,a2,-298 # 80033660 <__func__.0+0x65a8>
    80019792:	00014517          	auipc	a0,0x14
    80019796:	c1e50513          	addi	a0,a0,-994 # 8002d3b0 <__func__.0+0x2f8>
    8001979a:	6bc110ef          	jal	8002ae56 <printf>
    8001979e:	0003b797          	auipc	a5,0x3b
    800197a2:	8737c783          	lbu	a5,-1933(a5) # 80054011 <excpt+0x1>
    800197a6:	00014597          	auipc	a1,0x14
    800197aa:	be258593          	addi	a1,a1,-1054 # 8002d388 <__func__.0+0x2d0>
    800197ae:	cf89                	beqz	a5,800197c8 <instruction_guest_page_fault_2+0x9c>
    800197b0:	6418                	ld	a4,8(s0)
    800197b2:	47d1                	li	a5,20
    800197b4:	00014597          	auipc	a1,0x14
    800197b8:	bc458593          	addi	a1,a1,-1084 # 8002d378 <__func__.0+0x2c0>
    800197bc:	00f70663          	beq	a4,a5,800197c8 <instruction_guest_page_fault_2+0x9c>
    800197c0:	00014597          	auipc	a1,0x14
    800197c4:	bc858593          	addi	a1,a1,-1080 # 8002d388 <__func__.0+0x2d0>
    800197c8:	00014517          	auipc	a0,0x14
    800197cc:	c0050513          	addi	a0,a0,-1024 # 8002d3c8 <__func__.0+0x310>
    800197d0:	686110ef          	jal	8002ae56 <printf>
    800197d4:	0003b797          	auipc	a5,0x3b
    800197d8:	83d7c783          	lbu	a5,-1987(a5) # 80054011 <excpt+0x1>
    800197dc:	c789                	beqz	a5,800197e6 <instruction_guest_page_fault_2+0xba>
    800197de:	6418                	ld	a4,8(s0)
    800197e0:	47d1                	li	a5,20
    800197e2:	00f70c63          	beq	a4,a5,800197fa <instruction_guest_page_fault_2+0xce>
    800197e6:	00014517          	auipc	a0,0x14
    800197ea:	bea50513          	addi	a0,a0,-1046 # 8002d3d0 <__func__.0+0x318>
    800197ee:	668110ef          	jal	8002ae56 <printf>
    800197f2:	02900513          	li	a0,41
    800197f6:	34e100ef          	jal	80029b44 <putchar>
    800197fa:	4529                	li	a0,10
    800197fc:	348100ef          	jal	80029b44 <putchar>
    80019800:	0003b497          	auipc	s1,0x3b
    80019804:	8114c483          	lbu	s1,-2031(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019808:	00014597          	auipc	a1,0x14
    8001980c:	b8058593          	addi	a1,a1,-1152 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019810:	cc91                	beqz	s1,8001982c <instruction_guest_page_fault_2+0x100>
    80019812:	6418                	ld	a4,8(s0)
    80019814:	47d1                	li	a5,20
    TEST_END();
    80019816:	00014597          	auipc	a1,0x14
    8001981a:	b6258593          	addi	a1,a1,-1182 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001981e:	00f70763          	beq	a4,a5,8001982c <instruction_guest_page_fault_2+0x100>
    80019822:	4481                	li	s1,0
    TEST_END();
    80019824:	00014597          	auipc	a1,0x14
    80019828:	b6458593          	addi	a1,a1,-1180 # 8002d388 <__func__.0+0x2d0>
    8001982c:	00014517          	auipc	a0,0x14
    80019830:	c0450513          	addi	a0,a0,-1020 # 8002d430 <__func__.0+0x378>
    80019834:	622110ef          	jal	8002ae56 <printf>
    80019838:	4511                	li	a0,4
    8001983a:	ecee70ef          	jal	80000f08 <goto_priv>
    8001983e:	fe7e70ef          	jal	80001824 <reset_state>
}
    80019842:	60e2                	ld	ra,24(sp)
    80019844:	6442                	ld	s0,16(sp)
    80019846:	8526                	mv	a0,s1
    80019848:	64a2                	ld	s1,8(sp)
    8001984a:	6105                	addi	sp,sp,32
    8001984c:	8082                	ret

000000008001984e <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    8001984e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019850:	00013597          	auipc	a1,0x13
    80019854:	a4058593          	addi	a1,a1,-1472 # 8002c290 <__func__.4>
    80019858:	00014517          	auipc	a0,0x14
    8001985c:	b4050513          	addi	a0,a0,-1216 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    80019860:	ec06                	sd	ra,24(sp)
    80019862:	e822                	sd	s0,16(sp)
    80019864:	e426                	sd	s1,8(sp)
    TEST_START();
    80019866:	5f0110ef          	jal	8002ae56 <printf>
    8001986a:	4529                	li	a0,10
    8001986c:	2d8100ef          	jal	80029b44 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    80019870:	000407b7          	lui	a5,0x40
    80019874:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80019878:	450d                	li	a0,3
    8001987a:	e8ee70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001987e:	d63e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019882:	942e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019886:	ef7e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001988a:	4509                	li	a0,2
    8001988c:	e7ce70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019890:	d7ce70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    80019894:	000807b7          	lui	a5,0x80
    80019898:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001989a:	07b6                	slli	a5,a5,0xd
    8001989c:	0003a417          	auipc	s0,0x3a
    800198a0:	77440413          	addi	s0,s0,1908 # 80054010 <excpt>
    800198a4:	00000297          	auipc	t0,0x0
    800198a8:	00c28293          	addi	t0,t0,12 # 800198b0 <instruction_guest_page_fault_3+0x62>
    800198ac:	02543c23          	sd	t0,56(s0)
    800198b0:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800198b2:	08200593          	li	a1,130
    800198b6:	0001a617          	auipc	a2,0x1a
    800198ba:	e0a60613          	addi	a2,a2,-502 # 800336c0 <__func__.0+0x6608>
    800198be:	00014517          	auipc	a0,0x14
    800198c2:	af250513          	addi	a0,a0,-1294 # 8002d3b0 <__func__.0+0x2f8>
    800198c6:	590110ef          	jal	8002ae56 <printf>
    800198ca:	0003a797          	auipc	a5,0x3a
    800198ce:	7477c783          	lbu	a5,1863(a5) # 80054011 <excpt+0x1>
    800198d2:	00014597          	auipc	a1,0x14
    800198d6:	ab658593          	addi	a1,a1,-1354 # 8002d388 <__func__.0+0x2d0>
    800198da:	cf89                	beqz	a5,800198f4 <instruction_guest_page_fault_3+0xa6>
    800198dc:	6418                	ld	a4,8(s0)
    800198de:	47b1                	li	a5,12
    800198e0:	00014597          	auipc	a1,0x14
    800198e4:	a9858593          	addi	a1,a1,-1384 # 8002d378 <__func__.0+0x2c0>
    800198e8:	00f70663          	beq	a4,a5,800198f4 <instruction_guest_page_fault_3+0xa6>
    800198ec:	00014597          	auipc	a1,0x14
    800198f0:	a9c58593          	addi	a1,a1,-1380 # 8002d388 <__func__.0+0x2d0>
    800198f4:	00014517          	auipc	a0,0x14
    800198f8:	ad450513          	addi	a0,a0,-1324 # 8002d3c8 <__func__.0+0x310>
    800198fc:	55a110ef          	jal	8002ae56 <printf>
    80019900:	0003a797          	auipc	a5,0x3a
    80019904:	7117c783          	lbu	a5,1809(a5) # 80054011 <excpt+0x1>
    80019908:	c789                	beqz	a5,80019912 <instruction_guest_page_fault_3+0xc4>
    8001990a:	6418                	ld	a4,8(s0)
    8001990c:	47b1                	li	a5,12
    8001990e:	00f70c63          	beq	a4,a5,80019926 <instruction_guest_page_fault_3+0xd8>
    80019912:	00014517          	auipc	a0,0x14
    80019916:	abe50513          	addi	a0,a0,-1346 # 8002d3d0 <__func__.0+0x318>
    8001991a:	53c110ef          	jal	8002ae56 <printf>
    8001991e:	02900513          	li	a0,41
    80019922:	222100ef          	jal	80029b44 <putchar>
    80019926:	4529                	li	a0,10
    80019928:	21c100ef          	jal	80029b44 <putchar>
    8001992c:	0003a497          	auipc	s1,0x3a
    80019930:	6e54c483          	lbu	s1,1765(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80019934:	00014597          	auipc	a1,0x14
    80019938:	a5458593          	addi	a1,a1,-1452 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001993c:	cc91                	beqz	s1,80019958 <instruction_guest_page_fault_3+0x10a>
    8001993e:	6418                	ld	a4,8(s0)
    80019940:	47b1                	li	a5,12
    TEST_END();
    80019942:	00014597          	auipc	a1,0x14
    80019946:	a3658593          	addi	a1,a1,-1482 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001994a:	00f70763          	beq	a4,a5,80019958 <instruction_guest_page_fault_3+0x10a>
    8001994e:	4481                	li	s1,0
    TEST_END();
    80019950:	00014597          	auipc	a1,0x14
    80019954:	a3858593          	addi	a1,a1,-1480 # 8002d388 <__func__.0+0x2d0>
    80019958:	00014517          	auipc	a0,0x14
    8001995c:	ad850513          	addi	a0,a0,-1320 # 8002d430 <__func__.0+0x378>
    80019960:	4f6110ef          	jal	8002ae56 <printf>
    80019964:	4511                	li	a0,4
    80019966:	da2e70ef          	jal	80000f08 <goto_priv>
    8001996a:	ebbe70ef          	jal	80001824 <reset_state>
}
    8001996e:	60e2                	ld	ra,24(sp)
    80019970:	6442                	ld	s0,16(sp)
    80019972:	8526                	mv	a0,s1
    80019974:	64a2                	ld	s1,8(sp)
    80019976:	6105                	addi	sp,sp,32
    80019978:	8082                	ret

000000008001997a <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    8001997a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001997c:	00013597          	auipc	a1,0x13
    80019980:	93458593          	addi	a1,a1,-1740 # 8002c2b0 <__func__.3>
    80019984:	00014517          	auipc	a0,0x14
    80019988:	a1450513          	addi	a0,a0,-1516 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    8001998c:	ec06                	sd	ra,24(sp)
    8001998e:	e822                	sd	s0,16(sp)
    80019990:	e426                	sd	s1,8(sp)
    TEST_START();
    80019992:	4c4110ef          	jal	8002ae56 <printf>
    80019996:	4529                	li	a0,10
    80019998:	1ac100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001999c:	450d                	li	a0,3
    8001999e:	d6ae70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800199a2:	c3fe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800199a6:	81ee70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800199aa:	dd3e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    800199ae:	4511                	li	a0,4
    800199b0:	d58e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800199b4:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    800199b8:	4509                	li	a0,2
    800199ba:	d4ee70ef          	jal	80000f08 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    800199be:	c4ee70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(addr); 
    800199c2:	000807b7          	lui	a5,0x80
    800199c6:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    800199c8:	07b6                	slli	a5,a5,0xd
    800199ca:	0003a417          	auipc	s0,0x3a
    800199ce:	64640413          	addi	s0,s0,1606 # 80054010 <excpt>
    800199d2:	00000297          	auipc	t0,0x0
    800199d6:	00c28293          	addi	t0,t0,12 # 800199de <instruction_guest_page_fault_4+0x64>
    800199da:	02543c23          	sd	t0,56(s0)
    800199de:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    800199e0:	640c                	ld	a1,8(s0)
    800199e2:	00014517          	auipc	a0,0x14
    800199e6:	53e50513          	addi	a0,a0,1342 # 8002df20 <__func__.0+0xe68>
    800199ea:	46c110ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.triggered);
    800199ee:	0003a597          	auipc	a1,0x3a
    800199f2:	6235c583          	lbu	a1,1571(a1) # 80054011 <excpt+0x1>
    800199f6:	00014517          	auipc	a0,0x14
    800199fa:	52a50513          	addi	a0,a0,1322 # 8002df20 <__func__.0+0xe68>
    800199fe:	458110ef          	jal	8002ae56 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a02:	08200593          	li	a1,130
    80019a06:	0001a617          	auipc	a2,0x1a
    80019a0a:	d0260613          	addi	a2,a2,-766 # 80033708 <__func__.0+0x6650>
    80019a0e:	00014517          	auipc	a0,0x14
    80019a12:	9a250513          	addi	a0,a0,-1630 # 8002d3b0 <__func__.0+0x2f8>
    80019a16:	440110ef          	jal	8002ae56 <printf>
    80019a1a:	0003a797          	auipc	a5,0x3a
    80019a1e:	5f77c783          	lbu	a5,1527(a5) # 80054011 <excpt+0x1>
    80019a22:	00014597          	auipc	a1,0x14
    80019a26:	96658593          	addi	a1,a1,-1690 # 8002d388 <__func__.0+0x2d0>
    80019a2a:	cf89                	beqz	a5,80019a44 <instruction_guest_page_fault_4+0xca>
    80019a2c:	6418                	ld	a4,8(s0)
    80019a2e:	47d1                	li	a5,20
    80019a30:	00014597          	auipc	a1,0x14
    80019a34:	94858593          	addi	a1,a1,-1720 # 8002d378 <__func__.0+0x2c0>
    80019a38:	00f70663          	beq	a4,a5,80019a44 <instruction_guest_page_fault_4+0xca>
    80019a3c:	00014597          	auipc	a1,0x14
    80019a40:	94c58593          	addi	a1,a1,-1716 # 8002d388 <__func__.0+0x2d0>
    80019a44:	00014517          	auipc	a0,0x14
    80019a48:	98450513          	addi	a0,a0,-1660 # 8002d3c8 <__func__.0+0x310>
    80019a4c:	40a110ef          	jal	8002ae56 <printf>
    80019a50:	0003a797          	auipc	a5,0x3a
    80019a54:	5c17c783          	lbu	a5,1473(a5) # 80054011 <excpt+0x1>
    80019a58:	c789                	beqz	a5,80019a62 <instruction_guest_page_fault_4+0xe8>
    80019a5a:	6418                	ld	a4,8(s0)
    80019a5c:	47d1                	li	a5,20
    80019a5e:	00f70c63          	beq	a4,a5,80019a76 <instruction_guest_page_fault_4+0xfc>
    80019a62:	00014517          	auipc	a0,0x14
    80019a66:	96e50513          	addi	a0,a0,-1682 # 8002d3d0 <__func__.0+0x318>
    80019a6a:	3ec110ef          	jal	8002ae56 <printf>
    80019a6e:	02900513          	li	a0,41
    80019a72:	0d2100ef          	jal	80029b44 <putchar>
    80019a76:	4529                	li	a0,10
    80019a78:	0cc100ef          	jal	80029b44 <putchar>
    80019a7c:	0003a497          	auipc	s1,0x3a
    80019a80:	5954c483          	lbu	s1,1429(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019a84:	00014597          	auipc	a1,0x14
    80019a88:	90458593          	addi	a1,a1,-1788 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a8c:	cc91                	beqz	s1,80019aa8 <instruction_guest_page_fault_4+0x12e>
    80019a8e:	6418                	ld	a4,8(s0)
    80019a90:	47d1                	li	a5,20
    TEST_END();
    80019a92:	00014597          	auipc	a1,0x14
    80019a96:	8e658593          	addi	a1,a1,-1818 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a9a:	00f70763          	beq	a4,a5,80019aa8 <instruction_guest_page_fault_4+0x12e>
    80019a9e:	4481                	li	s1,0
    TEST_END();
    80019aa0:	00014597          	auipc	a1,0x14
    80019aa4:	8e858593          	addi	a1,a1,-1816 # 8002d388 <__func__.0+0x2d0>
    80019aa8:	00014517          	auipc	a0,0x14
    80019aac:	98850513          	addi	a0,a0,-1656 # 8002d430 <__func__.0+0x378>
    80019ab0:	3a6110ef          	jal	8002ae56 <printf>
    80019ab4:	4511                	li	a0,4
    80019ab6:	c52e70ef          	jal	80000f08 <goto_priv>
    80019aba:	d6be70ef          	jal	80001824 <reset_state>
}
    80019abe:	60e2                	ld	ra,24(sp)
    80019ac0:	6442                	ld	s0,16(sp)
    80019ac2:	8526                	mv	a0,s1
    80019ac4:	64a2                	ld	s1,8(sp)
    80019ac6:	6105                	addi	sp,sp,32
    80019ac8:	8082                	ret

0000000080019aca <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80019aca:	1101                	addi	sp,sp,-32

    TEST_START();
    80019acc:	00013597          	auipc	a1,0x13
    80019ad0:	80458593          	addi	a1,a1,-2044 # 8002c2d0 <__func__.2>
    80019ad4:	00014517          	auipc	a0,0x14
    80019ad8:	8c450513          	addi	a0,a0,-1852 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    80019adc:	ec06                	sd	ra,24(sp)
    80019ade:	e822                	sd	s0,16(sp)
    80019ae0:	e426                	sd	s1,8(sp)
    TEST_START();
    80019ae2:	374110ef          	jal	8002ae56 <printf>
    80019ae6:	4529                	li	a0,10
    80019ae8:	05c100ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80019aec:	450d                	li	a0,3
    80019aee:	c1ae70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019af2:	aefe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019af6:	ecfe60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019afa:	c83e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80019afe:	4511                	li	a0,4
    80019b00:	c08e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019b04:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80019b08:	4509                	li	a0,2
    80019b0a:	bfee70ef          	jal	80000f08 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80019b0e:	afee70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019b12:	400197b7          	lui	a5,0x40019
    80019b16:	078a                	slli	a5,a5,0x2
    80019b18:	0003a417          	auipc	s0,0x3a
    80019b1c:	4f840413          	addi	s0,s0,1272 # 80054010 <excpt>
    80019b20:	00000297          	auipc	t0,0x0
    80019b24:	00c28293          	addi	t0,t0,12 # 80019b2c <instruction_guest_page_fault_5+0x62>
    80019b28:	02543c23          	sd	t0,56(s0)
    80019b2c:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b2e:	08200593          	li	a1,130
    80019b32:	0001a617          	auipc	a2,0x1a
    80019b36:	c3660613          	addi	a2,a2,-970 # 80033768 <__func__.0+0x66b0>
    80019b3a:	00014517          	auipc	a0,0x14
    80019b3e:	87650513          	addi	a0,a0,-1930 # 8002d3b0 <__func__.0+0x2f8>
    80019b42:	314110ef          	jal	8002ae56 <printf>
    80019b46:	0003a797          	auipc	a5,0x3a
    80019b4a:	4cb7c783          	lbu	a5,1227(a5) # 80054011 <excpt+0x1>
    80019b4e:	00014597          	auipc	a1,0x14
    80019b52:	83a58593          	addi	a1,a1,-1990 # 8002d388 <__func__.0+0x2d0>
    80019b56:	cf89                	beqz	a5,80019b70 <instruction_guest_page_fault_5+0xa6>
    80019b58:	6418                	ld	a4,8(s0)
    80019b5a:	47d1                	li	a5,20
    80019b5c:	00014597          	auipc	a1,0x14
    80019b60:	81c58593          	addi	a1,a1,-2020 # 8002d378 <__func__.0+0x2c0>
    80019b64:	00f70663          	beq	a4,a5,80019b70 <instruction_guest_page_fault_5+0xa6>
    80019b68:	00014597          	auipc	a1,0x14
    80019b6c:	82058593          	addi	a1,a1,-2016 # 8002d388 <__func__.0+0x2d0>
    80019b70:	00014517          	auipc	a0,0x14
    80019b74:	85850513          	addi	a0,a0,-1960 # 8002d3c8 <__func__.0+0x310>
    80019b78:	2de110ef          	jal	8002ae56 <printf>
    80019b7c:	0003a797          	auipc	a5,0x3a
    80019b80:	4957c783          	lbu	a5,1173(a5) # 80054011 <excpt+0x1>
    80019b84:	c789                	beqz	a5,80019b8e <instruction_guest_page_fault_5+0xc4>
    80019b86:	6418                	ld	a4,8(s0)
    80019b88:	47d1                	li	a5,20
    80019b8a:	00f70c63          	beq	a4,a5,80019ba2 <instruction_guest_page_fault_5+0xd8>
    80019b8e:	00014517          	auipc	a0,0x14
    80019b92:	84250513          	addi	a0,a0,-1982 # 8002d3d0 <__func__.0+0x318>
    80019b96:	2c0110ef          	jal	8002ae56 <printf>
    80019b9a:	02900513          	li	a0,41
    80019b9e:	7a70f0ef          	jal	80029b44 <putchar>
    80019ba2:	4529                	li	a0,10
    80019ba4:	7a10f0ef          	jal	80029b44 <putchar>
    80019ba8:	0003a497          	auipc	s1,0x3a
    80019bac:	4694c483          	lbu	s1,1129(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019bb0:	00013597          	auipc	a1,0x13
    80019bb4:	7d858593          	addi	a1,a1,2008 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019bb8:	cc91                	beqz	s1,80019bd4 <instruction_guest_page_fault_5+0x10a>
    80019bba:	6418                	ld	a4,8(s0)
    80019bbc:	47d1                	li	a5,20
    TEST_END();
    80019bbe:	00013597          	auipc	a1,0x13
    80019bc2:	7ba58593          	addi	a1,a1,1978 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019bc6:	00f70763          	beq	a4,a5,80019bd4 <instruction_guest_page_fault_5+0x10a>
    80019bca:	4481                	li	s1,0
    TEST_END();
    80019bcc:	00013597          	auipc	a1,0x13
    80019bd0:	7bc58593          	addi	a1,a1,1980 # 8002d388 <__func__.0+0x2d0>
    80019bd4:	00014517          	auipc	a0,0x14
    80019bd8:	85c50513          	addi	a0,a0,-1956 # 8002d430 <__func__.0+0x378>
    80019bdc:	27a110ef          	jal	8002ae56 <printf>
    80019be0:	4511                	li	a0,4
    80019be2:	b26e70ef          	jal	80000f08 <goto_priv>
    80019be6:	c3fe70ef          	jal	80001824 <reset_state>

}
    80019bea:	60e2                	ld	ra,24(sp)
    80019bec:	6442                	ld	s0,16(sp)
    80019bee:	8526                	mv	a0,s1
    80019bf0:	64a2                	ld	s1,8(sp)
    80019bf2:	6105                	addi	sp,sp,32
    80019bf4:	8082                	ret

0000000080019bf6 <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80019bf6:	1141                	addi	sp,sp,-16

    TEST_START();
    80019bf8:	00012597          	auipc	a1,0x12
    80019bfc:	6f858593          	addi	a1,a1,1784 # 8002c2f0 <__func__.1>
    80019c00:	00013517          	auipc	a0,0x13
    80019c04:	79850513          	addi	a0,a0,1944 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    80019c08:	e406                	sd	ra,8(sp)
    80019c0a:	e022                	sd	s0,0(sp)
    TEST_START();
    80019c0c:	24a110ef          	jal	8002ae56 <printf>
    80019c10:	4529                	li	a0,10
    80019c12:	7330f0ef          	jal	80029b44 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80019c16:	450d                	li	a0,3
    80019c18:	af0e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019c1c:	9c5e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c20:	da5e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019c24:	b59e60ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    80019c28:	4509                	li	a0,2
    80019c2a:	adee70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019c2e:	9dee70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019c32:	4785                	li	a5,1
    80019c34:	1782                	slli	a5,a5,0x20
    80019c36:	0003a717          	auipc	a4,0x3a
    80019c3a:	3da70713          	addi	a4,a4,986 # 80054010 <excpt>
    80019c3e:	00000297          	auipc	t0,0x0
    80019c42:	00c28293          	addi	t0,t0,12 # 80019c4a <instruction_guest_page_fault_6+0x54>
    80019c46:	02573c23          	sd	t0,56(a4)
    80019c4a:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c4c:	08200593          	li	a1,130
    80019c50:	0001a617          	auipc	a2,0x1a
    80019c54:	b8060613          	addi	a2,a2,-1152 # 800337d0 <__func__.0+0x6718>
    80019c58:	00013517          	auipc	a0,0x13
    80019c5c:	75850513          	addi	a0,a0,1880 # 8002d3b0 <__func__.0+0x2f8>
    80019c60:	1f6110ef          	jal	8002ae56 <printf>
    80019c64:	0003a797          	auipc	a5,0x3a
    80019c68:	3ad7c783          	lbu	a5,941(a5) # 80054011 <excpt+0x1>
    80019c6c:	00013597          	auipc	a1,0x13
    80019c70:	70c58593          	addi	a1,a1,1804 # 8002d378 <__func__.0+0x2c0>
    80019c74:	c789                	beqz	a5,80019c7e <instruction_guest_page_fault_6+0x88>
    80019c76:	00013597          	auipc	a1,0x13
    80019c7a:	71258593          	addi	a1,a1,1810 # 8002d388 <__func__.0+0x2d0>
    80019c7e:	00013517          	auipc	a0,0x13
    80019c82:	74a50513          	addi	a0,a0,1866 # 8002d3c8 <__func__.0+0x310>
    80019c86:	1d0110ef          	jal	8002ae56 <printf>
    80019c8a:	0003a797          	auipc	a5,0x3a
    80019c8e:	3877c783          	lbu	a5,903(a5) # 80054011 <excpt+0x1>
    80019c92:	e7a1                	bnez	a5,80019cda <instruction_guest_page_fault_6+0xe4>
    80019c94:	4529                	li	a0,10
    80019c96:	6af0f0ef          	jal	80029b44 <putchar>
    80019c9a:	0003a797          	auipc	a5,0x3a
    80019c9e:	3777c783          	lbu	a5,887(a5) # 80054011 <excpt+0x1>
    80019ca2:	e795                	bnez	a5,80019cce <instruction_guest_page_fault_6+0xd8>
    80019ca4:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019ca6:	00013597          	auipc	a1,0x13
    80019caa:	6d258593          	addi	a1,a1,1746 # 8002d378 <__func__.0+0x2c0>
    80019cae:	00013517          	auipc	a0,0x13
    80019cb2:	78250513          	addi	a0,a0,1922 # 8002d430 <__func__.0+0x378>
    80019cb6:	1a0110ef          	jal	8002ae56 <printf>
    80019cba:	4511                	li	a0,4
    80019cbc:	a4ce70ef          	jal	80000f08 <goto_priv>
    80019cc0:	b65e70ef          	jal	80001824 <reset_state>
}
    80019cc4:	60a2                	ld	ra,8(sp)
    80019cc6:	8522                	mv	a0,s0
    80019cc8:	6402                	ld	s0,0(sp)
    80019cca:	0141                	addi	sp,sp,16
    80019ccc:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019cce:	4401                	li	s0,0
    TEST_END();
    80019cd0:	00013597          	auipc	a1,0x13
    80019cd4:	6b858593          	addi	a1,a1,1720 # 8002d388 <__func__.0+0x2d0>
    80019cd8:	bfd9                	j	80019cae <instruction_guest_page_fault_6+0xb8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019cda:	00013517          	auipc	a0,0x13
    80019cde:	6f650513          	addi	a0,a0,1782 # 8002d3d0 <__func__.0+0x318>
    80019ce2:	174110ef          	jal	8002ae56 <printf>
    80019ce6:	02900513          	li	a0,41
    80019cea:	65b0f0ef          	jal	80029b44 <putchar>
    80019cee:	b75d                	j	80019c94 <instruction_guest_page_fault_6+0x9e>

0000000080019cf0 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80019cf0:	1101                	addi	sp,sp,-32

    TEST_START();
    80019cf2:	00012597          	auipc	a1,0x12
    80019cf6:	61e58593          	addi	a1,a1,1566 # 8002c310 <__func__.0>
    80019cfa:	00013517          	auipc	a0,0x13
    80019cfe:	69e50513          	addi	a0,a0,1694 # 8002d398 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    80019d02:	ec06                	sd	ra,24(sp)
    80019d04:	e822                	sd	s0,16(sp)
    80019d06:	e426                	sd	s1,8(sp)
    TEST_START();
    80019d08:	14e110ef          	jal	8002ae56 <printf>
    80019d0c:	4529                	li	a0,10
    80019d0e:	6370f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    80019d12:	450d                	li	a0,3
    80019d14:	9f4e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019d18:	8c9e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019d1c:	ca9e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019d20:	a5de60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019d24:	4509                	li	a0,2
    80019d26:	9e2e70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019d2a:	8e2e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019d2e:	400137b7          	lui	a5,0x40013
    80019d32:	078a                	slli	a5,a5,0x2
    80019d34:	0003a417          	auipc	s0,0x3a
    80019d38:	2dc40413          	addi	s0,s0,732 # 80054010 <excpt>
    80019d3c:	00000297          	auipc	t0,0x0
    80019d40:	00c28293          	addi	t0,t0,12 # 80019d48 <instruction_guest_page_fault_7+0x58>
    80019d44:	02543c23          	sd	t0,56(s0)
    80019d48:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019d4a:	08200593          	li	a1,130
    80019d4e:	0001a617          	auipc	a2,0x1a
    80019d52:	aba60613          	addi	a2,a2,-1350 # 80033808 <__func__.0+0x6750>
    80019d56:	00013517          	auipc	a0,0x13
    80019d5a:	65a50513          	addi	a0,a0,1626 # 8002d3b0 <__func__.0+0x2f8>
    80019d5e:	0f8110ef          	jal	8002ae56 <printf>
    80019d62:	0003a797          	auipc	a5,0x3a
    80019d66:	2af7c783          	lbu	a5,687(a5) # 80054011 <excpt+0x1>
    80019d6a:	00013597          	auipc	a1,0x13
    80019d6e:	61e58593          	addi	a1,a1,1566 # 8002d388 <__func__.0+0x2d0>
    80019d72:	cf89                	beqz	a5,80019d8c <instruction_guest_page_fault_7+0x9c>
    80019d74:	6418                	ld	a4,8(s0)
    80019d76:	47d1                	li	a5,20
    80019d78:	00013597          	auipc	a1,0x13
    80019d7c:	60058593          	addi	a1,a1,1536 # 8002d378 <__func__.0+0x2c0>
    80019d80:	00f70663          	beq	a4,a5,80019d8c <instruction_guest_page_fault_7+0x9c>
    80019d84:	00013597          	auipc	a1,0x13
    80019d88:	60458593          	addi	a1,a1,1540 # 8002d388 <__func__.0+0x2d0>
    80019d8c:	00013517          	auipc	a0,0x13
    80019d90:	63c50513          	addi	a0,a0,1596 # 8002d3c8 <__func__.0+0x310>
    80019d94:	0c2110ef          	jal	8002ae56 <printf>
    80019d98:	0003a797          	auipc	a5,0x3a
    80019d9c:	2797c783          	lbu	a5,633(a5) # 80054011 <excpt+0x1>
    80019da0:	c789                	beqz	a5,80019daa <instruction_guest_page_fault_7+0xba>
    80019da2:	6418                	ld	a4,8(s0)
    80019da4:	47d1                	li	a5,20
    80019da6:	00f70c63          	beq	a4,a5,80019dbe <instruction_guest_page_fault_7+0xce>
    80019daa:	00013517          	auipc	a0,0x13
    80019dae:	62650513          	addi	a0,a0,1574 # 8002d3d0 <__func__.0+0x318>
    80019db2:	0a4110ef          	jal	8002ae56 <printf>
    80019db6:	02900513          	li	a0,41
    80019dba:	58b0f0ef          	jal	80029b44 <putchar>
    80019dbe:	4529                	li	a0,10
    80019dc0:	5850f0ef          	jal	80029b44 <putchar>
    80019dc4:	0003a797          	auipc	a5,0x3a
    80019dc8:	24d7c783          	lbu	a5,589(a5) # 80054011 <excpt+0x1>
    80019dcc:	4481                	li	s1,0
    80019dce:	c789                	beqz	a5,80019dd8 <instruction_guest_page_fault_7+0xe8>
    80019dd0:	6404                	ld	s1,8(s0)
    80019dd2:	14b1                	addi	s1,s1,-20
    80019dd4:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80019dd8:	834e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019ddc:	400137b7          	lui	a5,0x40013
    80019de0:	078a                	slli	a5,a5,0x2
    80019de2:	00000297          	auipc	t0,0x0
    80019de6:	00c28293          	addi	t0,t0,12 # 80019dee <instruction_guest_page_fault_7+0xfe>
    80019dea:	02543c23          	sd	t0,56(s0)
    80019dee:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019df0:	08200593          	li	a1,130
    80019df4:	0001a617          	auipc	a2,0x1a
    80019df8:	a7c60613          	addi	a2,a2,-1412 # 80033870 <__func__.0+0x67b8>
    80019dfc:	00013517          	auipc	a0,0x13
    80019e00:	5b450513          	addi	a0,a0,1460 # 8002d3b0 <__func__.0+0x2f8>
    80019e04:	052110ef          	jal	8002ae56 <printf>
    80019e08:	0003a797          	auipc	a5,0x3a
    80019e0c:	2097c783          	lbu	a5,521(a5) # 80054011 <excpt+0x1>
    80019e10:	00013597          	auipc	a1,0x13
    80019e14:	57858593          	addi	a1,a1,1400 # 8002d388 <__func__.0+0x2d0>
    80019e18:	cf89                	beqz	a5,80019e32 <instruction_guest_page_fault_7+0x142>
    80019e1a:	6418                	ld	a4,8(s0)
    80019e1c:	47d1                	li	a5,20
    80019e1e:	00013597          	auipc	a1,0x13
    80019e22:	55a58593          	addi	a1,a1,1370 # 8002d378 <__func__.0+0x2c0>
    80019e26:	00f70663          	beq	a4,a5,80019e32 <instruction_guest_page_fault_7+0x142>
    80019e2a:	00013597          	auipc	a1,0x13
    80019e2e:	55e58593          	addi	a1,a1,1374 # 8002d388 <__func__.0+0x2d0>
    80019e32:	00013517          	auipc	a0,0x13
    80019e36:	59650513          	addi	a0,a0,1430 # 8002d3c8 <__func__.0+0x310>
    80019e3a:	01c110ef          	jal	8002ae56 <printf>
    80019e3e:	0003a797          	auipc	a5,0x3a
    80019e42:	1d37c783          	lbu	a5,467(a5) # 80054011 <excpt+0x1>
    80019e46:	c789                	beqz	a5,80019e50 <instruction_guest_page_fault_7+0x160>
    80019e48:	6418                	ld	a4,8(s0)
    80019e4a:	47d1                	li	a5,20
    80019e4c:	00f70c63          	beq	a4,a5,80019e64 <instruction_guest_page_fault_7+0x174>
    80019e50:	00013517          	auipc	a0,0x13
    80019e54:	58050513          	addi	a0,a0,1408 # 8002d3d0 <__func__.0+0x318>
    80019e58:	7ff100ef          	jal	8002ae56 <printf>
    80019e5c:	02900513          	li	a0,41
    80019e60:	4e50f0ef          	jal	80029b44 <putchar>
    80019e64:	4529                	li	a0,10
    80019e66:	4df0f0ef          	jal	80029b44 <putchar>
    80019e6a:	c095                	beqz	s1,80019e8e <instruction_guest_page_fault_7+0x19e>
    80019e6c:	0003a497          	auipc	s1,0x3a
    80019e70:	1a54c483          	lbu	s1,421(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019e74:	00013597          	auipc	a1,0x13
    80019e78:	51458593          	addi	a1,a1,1300 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e7c:	cc91                	beqz	s1,80019e98 <instruction_guest_page_fault_7+0x1a8>
    80019e7e:	6418                	ld	a4,8(s0)
    80019e80:	47d1                	li	a5,20
    TEST_END();
    80019e82:	00013597          	auipc	a1,0x13
    80019e86:	4f658593          	addi	a1,a1,1270 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e8a:	00f70763          	beq	a4,a5,80019e98 <instruction_guest_page_fault_7+0x1a8>
    80019e8e:	4481                	li	s1,0
    TEST_END();
    80019e90:	00013597          	auipc	a1,0x13
    80019e94:	4f858593          	addi	a1,a1,1272 # 8002d388 <__func__.0+0x2d0>
    80019e98:	00013517          	auipc	a0,0x13
    80019e9c:	59850513          	addi	a0,a0,1432 # 8002d430 <__func__.0+0x378>
    80019ea0:	7b7100ef          	jal	8002ae56 <printf>
    80019ea4:	4511                	li	a0,4
    80019ea6:	862e70ef          	jal	80000f08 <goto_priv>
    80019eaa:	97be70ef          	jal	80001824 <reset_state>
    80019eae:	60e2                	ld	ra,24(sp)
    80019eb0:	6442                	ld	s0,16(sp)
    80019eb2:	8526                	mv	a0,s1
    80019eb4:	64a2                	ld	s1,8(sp)
    80019eb6:	6105                	addi	sp,sp,32
    80019eb8:	8082                	ret

0000000080019eba <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80019eba:	1101                	addi	sp,sp,-32

    TEST_START();
    80019ebc:	00012597          	auipc	a1,0x12
    80019ec0:	47458593          	addi	a1,a1,1140 # 8002c330 <__func__.39>
    80019ec4:	00013517          	auipc	a0,0x13
    80019ec8:	4d450513          	addi	a0,a0,1236 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_1(){
    80019ecc:	ec06                	sd	ra,24(sp)
    80019ece:	e822                	sd	s0,16(sp)
    80019ed0:	e426                	sd	s1,8(sp)
    TEST_START();
    80019ed2:	785100ef          	jal	8002ae56 <printf>
    80019ed6:	4529                	li	a0,10
    80019ed8:	46d0f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80019edc:	4511                	li	a0,4
    80019ede:	82ae70ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019ee2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80019ee6:	10000793          	li	a5,256
    80019eea:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019eee:	20000793          	li	a5,512
    80019ef2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019ef6:	40000793          	li	a5,1024
    80019efa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019efe:	6785                	lui	a5,0x1
    80019f00:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019f04:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019f08:	4785                	li	a5,1
    80019f0a:	07fe                	slli	a5,a5,0x1f
    80019f0c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019f10:	08100793          	li	a5,129
    80019f14:	07e2                	slli	a5,a5,0x18
    80019f16:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019f1a:	67a1                	lui	a5,0x8
    80019f1c:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80019f20:	eede60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80019f24:	4785                	li	a5,1
    80019f26:	1786                	slli	a5,a5,0x21
    80019f28:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    80019f2c:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f30:	08200593          	li	a1,130
    80019f34:	0001a617          	auipc	a2,0x1a
    80019f38:	9a460613          	addi	a2,a2,-1628 # 800338d8 <__func__.0+0x6820>
    80019f3c:	00013517          	auipc	a0,0x13
    80019f40:	47450513          	addi	a0,a0,1140 # 8002d3b0 <__func__.0+0x2f8>
    80019f44:	713100ef          	jal	8002ae56 <printf>
    80019f48:	0003a797          	auipc	a5,0x3a
    80019f4c:	0c97c783          	lbu	a5,201(a5) # 80054011 <excpt+0x1>
    80019f50:	0003a497          	auipc	s1,0x3a
    80019f54:	0c048493          	addi	s1,s1,192 # 80054010 <excpt>
    80019f58:	00013597          	auipc	a1,0x13
    80019f5c:	43058593          	addi	a1,a1,1072 # 8002d388 <__func__.0+0x2d0>
    80019f60:	cf89                	beqz	a5,80019f7a <load_access_fault_1+0xc0>
    80019f62:	6498                	ld	a4,8(s1)
    80019f64:	4795                	li	a5,5
    80019f66:	00013597          	auipc	a1,0x13
    80019f6a:	41258593          	addi	a1,a1,1042 # 8002d378 <__func__.0+0x2c0>
    80019f6e:	00f70663          	beq	a4,a5,80019f7a <load_access_fault_1+0xc0>
    80019f72:	00013597          	auipc	a1,0x13
    80019f76:	41658593          	addi	a1,a1,1046 # 8002d388 <__func__.0+0x2d0>
    80019f7a:	00013517          	auipc	a0,0x13
    80019f7e:	44e50513          	addi	a0,a0,1102 # 8002d3c8 <__func__.0+0x310>
    80019f82:	6d5100ef          	jal	8002ae56 <printf>
    80019f86:	0003a797          	auipc	a5,0x3a
    80019f8a:	08b7c783          	lbu	a5,139(a5) # 80054011 <excpt+0x1>
    80019f8e:	c789                	beqz	a5,80019f98 <load_access_fault_1+0xde>
    80019f90:	6498                	ld	a4,8(s1)
    80019f92:	4795                	li	a5,5
    80019f94:	00f70c63          	beq	a4,a5,80019fac <load_access_fault_1+0xf2>
    80019f98:	00013517          	auipc	a0,0x13
    80019f9c:	43850513          	addi	a0,a0,1080 # 8002d3d0 <__func__.0+0x318>
    80019fa0:	6b7100ef          	jal	8002ae56 <printf>
    80019fa4:	02900513          	li	a0,41
    80019fa8:	39d0f0ef          	jal	80029b44 <putchar>
    80019fac:	4529                	li	a0,10
    80019fae:	3970f0ef          	jal	80029b44 <putchar>
    80019fb2:	0003a417          	auipc	s0,0x3a
    80019fb6:	05f44403          	lbu	s0,95(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80019fba:	00013597          	auipc	a1,0x13
    80019fbe:	3ce58593          	addi	a1,a1,974 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019fc2:	cc11                	beqz	s0,80019fde <load_access_fault_1+0x124>
    80019fc4:	6498                	ld	a4,8(s1)
    80019fc6:	4795                	li	a5,5
    TEST_END();
    80019fc8:	00013597          	auipc	a1,0x13
    80019fcc:	3b058593          	addi	a1,a1,944 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019fd0:	00f70763          	beq	a4,a5,80019fde <load_access_fault_1+0x124>
    80019fd4:	4401                	li	s0,0
    TEST_END();
    80019fd6:	00013597          	auipc	a1,0x13
    80019fda:	3b258593          	addi	a1,a1,946 # 8002d388 <__func__.0+0x2d0>
    80019fde:	00013517          	auipc	a0,0x13
    80019fe2:	45250513          	addi	a0,a0,1106 # 8002d430 <__func__.0+0x378>
    80019fe6:	671100ef          	jal	8002ae56 <printf>
    80019fea:	4511                	li	a0,4
    80019fec:	f1de60ef          	jal	80000f08 <goto_priv>
    80019ff0:	835e70ef          	jal	80001824 <reset_state>
}
    80019ff4:	60e2                	ld	ra,24(sp)
    80019ff6:	8522                	mv	a0,s0
    80019ff8:	6442                	ld	s0,16(sp)
    80019ffa:	64a2                	ld	s1,8(sp)
    80019ffc:	6105                	addi	sp,sp,32
    80019ffe:	8082                	ret

000000008001a000 <load_access_fault_2>:

bool load_access_fault_2(){
    8001a000:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a002:	00012597          	auipc	a1,0x12
    8001a006:	34658593          	addi	a1,a1,838 # 8002c348 <__func__.38>
    8001a00a:	00013517          	auipc	a0,0x13
    8001a00e:	38e50513          	addi	a0,a0,910 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_2(){
    8001a012:	ec06                	sd	ra,24(sp)
    8001a014:	e822                	sd	s0,16(sp)
    8001a016:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a018:	63f100ef          	jal	8002ae56 <printf>
    8001a01c:	4529                	li	a0,10
    8001a01e:	3270f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a022:	4511                	li	a0,4
    8001a024:	ee5e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a028:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a02c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a030:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a034:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a038:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a03c:	10000793          	li	a5,256
    8001a040:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a044:	20000793          	li	a5,512
    8001a048:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a04c:	40000793          	li	a5,1024
    8001a050:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a054:	6785                	lui	a5,0x1
    8001a056:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a05a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    8001a05e:	47c5                	li	a5,17
    8001a060:	07ee                	slli	a5,a5,0x1b
    8001a062:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    8001a066:	08900793          	li	a5,137
    8001a06a:	07e2                	slli	a5,a5,0x18
    8001a06c:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    8001a070:	08000793          	li	a5,128
    8001a074:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    8001a078:	67a1                	lui	a5,0x8
    8001a07a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001a07e:	450d                	li	a0,3
    8001a080:	e89e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a084:	d89e60ef          	jal	80000e0c <test_setup_except_function>
    8001a088:	008817b7          	lui	a5,0x881
    8001a08c:	07aa                	slli	a5,a5,0xa
    8001a08e:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a092:	08200593          	li	a1,130
    8001a096:	0001a617          	auipc	a2,0x1a
    8001a09a:	87a60613          	addi	a2,a2,-1926 # 80033910 <__func__.0+0x6858>
    8001a09e:	00013517          	auipc	a0,0x13
    8001a0a2:	31250513          	addi	a0,a0,786 # 8002d3b0 <__func__.0+0x2f8>
    8001a0a6:	5b1100ef          	jal	8002ae56 <printf>
    8001a0aa:	0003a797          	auipc	a5,0x3a
    8001a0ae:	f677c783          	lbu	a5,-153(a5) # 80054011 <excpt+0x1>
    8001a0b2:	0003a497          	auipc	s1,0x3a
    8001a0b6:	f5e48493          	addi	s1,s1,-162 # 80054010 <excpt>
    8001a0ba:	00013597          	auipc	a1,0x13
    8001a0be:	2ce58593          	addi	a1,a1,718 # 8002d388 <__func__.0+0x2d0>
    8001a0c2:	cf89                	beqz	a5,8001a0dc <load_access_fault_2+0xdc>
    8001a0c4:	6498                	ld	a4,8(s1)
    8001a0c6:	4795                	li	a5,5
    8001a0c8:	00013597          	auipc	a1,0x13
    8001a0cc:	2b058593          	addi	a1,a1,688 # 8002d378 <__func__.0+0x2c0>
    8001a0d0:	00f70663          	beq	a4,a5,8001a0dc <load_access_fault_2+0xdc>
    8001a0d4:	00013597          	auipc	a1,0x13
    8001a0d8:	2b458593          	addi	a1,a1,692 # 8002d388 <__func__.0+0x2d0>
    8001a0dc:	00013517          	auipc	a0,0x13
    8001a0e0:	2ec50513          	addi	a0,a0,748 # 8002d3c8 <__func__.0+0x310>
    8001a0e4:	573100ef          	jal	8002ae56 <printf>
    8001a0e8:	0003a797          	auipc	a5,0x3a
    8001a0ec:	f297c783          	lbu	a5,-215(a5) # 80054011 <excpt+0x1>
    8001a0f0:	c789                	beqz	a5,8001a0fa <load_access_fault_2+0xfa>
    8001a0f2:	6498                	ld	a4,8(s1)
    8001a0f4:	4795                	li	a5,5
    8001a0f6:	00f70c63          	beq	a4,a5,8001a10e <load_access_fault_2+0x10e>
    8001a0fa:	00013517          	auipc	a0,0x13
    8001a0fe:	2d650513          	addi	a0,a0,726 # 8002d3d0 <__func__.0+0x318>
    8001a102:	555100ef          	jal	8002ae56 <printf>
    8001a106:	02900513          	li	a0,41
    8001a10a:	23b0f0ef          	jal	80029b44 <putchar>
    8001a10e:	4529                	li	a0,10
    8001a110:	2350f0ef          	jal	80029b44 <putchar>
    8001a114:	0003a417          	auipc	s0,0x3a
    8001a118:	efd44403          	lbu	s0,-259(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a11c:	00013597          	auipc	a1,0x13
    8001a120:	26c58593          	addi	a1,a1,620 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a124:	cc11                	beqz	s0,8001a140 <load_access_fault_2+0x140>
    8001a126:	6498                	ld	a4,8(s1)
    8001a128:	4795                	li	a5,5
    TEST_END();
    8001a12a:	00013597          	auipc	a1,0x13
    8001a12e:	24e58593          	addi	a1,a1,590 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a132:	00f70763          	beq	a4,a5,8001a140 <load_access_fault_2+0x140>
    8001a136:	4401                	li	s0,0
    TEST_END();
    8001a138:	00013597          	auipc	a1,0x13
    8001a13c:	25058593          	addi	a1,a1,592 # 8002d388 <__func__.0+0x2d0>
    8001a140:	00013517          	auipc	a0,0x13
    8001a144:	2f050513          	addi	a0,a0,752 # 8002d430 <__func__.0+0x378>
    8001a148:	50f100ef          	jal	8002ae56 <printf>
    8001a14c:	4511                	li	a0,4
    8001a14e:	dbbe60ef          	jal	80000f08 <goto_priv>
    8001a152:	ed2e70ef          	jal	80001824 <reset_state>
}
    8001a156:	60e2                	ld	ra,24(sp)
    8001a158:	8522                	mv	a0,s0
    8001a15a:	6442                	ld	s0,16(sp)
    8001a15c:	64a2                	ld	s1,8(sp)
    8001a15e:	6105                	addi	sp,sp,32
    8001a160:	8082                	ret

000000008001a162 <load_access_fault_3>:


bool load_access_fault_3(){
    8001a162:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a164:	00012597          	auipc	a1,0x12
    8001a168:	1fc58593          	addi	a1,a1,508 # 8002c360 <__func__.37>
    8001a16c:	00013517          	auipc	a0,0x13
    8001a170:	22c50513          	addi	a0,a0,556 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001a174:	ec06                	sd	ra,24(sp)
    8001a176:	e822                	sd	s0,16(sp)
    8001a178:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a17a:	4dd100ef          	jal	8002ae56 <printf>
    8001a17e:	4529                	li	a0,10
    8001a180:	1c50f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a184:	4511                	li	a0,4
    8001a186:	d83e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a18a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a18e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a192:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a196:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a19a:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a19e:	10000793          	li	a5,256
    8001a1a2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a1a6:	20000793          	li	a5,512
    8001a1aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a1ae:	40000793          	li	a5,1024
    8001a1b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a1b6:	6785                	lui	a5,0x1
    8001a1b8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a1bc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a1c0:	4785                	li	a5,1
    8001a1c2:	07fe                	slli	a5,a5,0x1f
    8001a1c4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a1c8:	08100793          	li	a5,129
    8001a1cc:	07e2                	slli	a5,a5,0x18
    8001a1ce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a1d2:	08000793          	li	a5,128
    8001a1d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a1da:	67a1                	lui	a5,0x8
    8001a1dc:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a1e0:	4505                	li	a0,1
    8001a1e2:	d27e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a1e6:	c27e60ef          	jal	80000e0c <test_setup_except_function>
    8001a1ea:	4785                	li	a5,1
    8001a1ec:	1786                	slli	a5,a5,0x21
    8001a1ee:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a1f2:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1f6:	08200593          	li	a1,130
    8001a1fa:	00019617          	auipc	a2,0x19
    8001a1fe:	74e60613          	addi	a2,a2,1870 # 80033948 <__func__.0+0x6890>
    8001a202:	00013517          	auipc	a0,0x13
    8001a206:	1ae50513          	addi	a0,a0,430 # 8002d3b0 <__func__.0+0x2f8>
    8001a20a:	44d100ef          	jal	8002ae56 <printf>
    8001a20e:	0003a797          	auipc	a5,0x3a
    8001a212:	e037c783          	lbu	a5,-509(a5) # 80054011 <excpt+0x1>
    8001a216:	0003a497          	auipc	s1,0x3a
    8001a21a:	dfa48493          	addi	s1,s1,-518 # 80054010 <excpt>
    8001a21e:	00013597          	auipc	a1,0x13
    8001a222:	16a58593          	addi	a1,a1,362 # 8002d388 <__func__.0+0x2d0>
    8001a226:	cf89                	beqz	a5,8001a240 <load_access_fault_3+0xde>
    8001a228:	6498                	ld	a4,8(s1)
    8001a22a:	4795                	li	a5,5
    8001a22c:	00013597          	auipc	a1,0x13
    8001a230:	14c58593          	addi	a1,a1,332 # 8002d378 <__func__.0+0x2c0>
    8001a234:	00f70663          	beq	a4,a5,8001a240 <load_access_fault_3+0xde>
    8001a238:	00013597          	auipc	a1,0x13
    8001a23c:	15058593          	addi	a1,a1,336 # 8002d388 <__func__.0+0x2d0>
    8001a240:	00013517          	auipc	a0,0x13
    8001a244:	18850513          	addi	a0,a0,392 # 8002d3c8 <__func__.0+0x310>
    8001a248:	40f100ef          	jal	8002ae56 <printf>
    8001a24c:	0003a797          	auipc	a5,0x3a
    8001a250:	dc57c783          	lbu	a5,-571(a5) # 80054011 <excpt+0x1>
    8001a254:	c789                	beqz	a5,8001a25e <load_access_fault_3+0xfc>
    8001a256:	6498                	ld	a4,8(s1)
    8001a258:	4795                	li	a5,5
    8001a25a:	00f70c63          	beq	a4,a5,8001a272 <load_access_fault_3+0x110>
    8001a25e:	00013517          	auipc	a0,0x13
    8001a262:	17250513          	addi	a0,a0,370 # 8002d3d0 <__func__.0+0x318>
    8001a266:	3f1100ef          	jal	8002ae56 <printf>
    8001a26a:	02900513          	li	a0,41
    8001a26e:	0d70f0ef          	jal	80029b44 <putchar>
    8001a272:	4529                	li	a0,10
    8001a274:	0d10f0ef          	jal	80029b44 <putchar>
    8001a278:	0003a417          	auipc	s0,0x3a
    8001a27c:	d9944403          	lbu	s0,-615(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a280:	00013597          	auipc	a1,0x13
    8001a284:	10858593          	addi	a1,a1,264 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a288:	cc11                	beqz	s0,8001a2a4 <load_access_fault_3+0x142>
    8001a28a:	6498                	ld	a4,8(s1)
    8001a28c:	4795                	li	a5,5
    TEST_END();
    8001a28e:	00013597          	auipc	a1,0x13
    8001a292:	0ea58593          	addi	a1,a1,234 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a296:	00f70763          	beq	a4,a5,8001a2a4 <load_access_fault_3+0x142>
    8001a29a:	4401                	li	s0,0
    TEST_END();
    8001a29c:	00013597          	auipc	a1,0x13
    8001a2a0:	0ec58593          	addi	a1,a1,236 # 8002d388 <__func__.0+0x2d0>
    8001a2a4:	00013517          	auipc	a0,0x13
    8001a2a8:	18c50513          	addi	a0,a0,396 # 8002d430 <__func__.0+0x378>
    8001a2ac:	3ab100ef          	jal	8002ae56 <printf>
    8001a2b0:	4511                	li	a0,4
    8001a2b2:	c57e60ef          	jal	80000f08 <goto_priv>
    8001a2b6:	d6ee70ef          	jal	80001824 <reset_state>
}
    8001a2ba:	60e2                	ld	ra,24(sp)
    8001a2bc:	8522                	mv	a0,s0
    8001a2be:	6442                	ld	s0,16(sp)
    8001a2c0:	64a2                	ld	s1,8(sp)
    8001a2c2:	6105                	addi	sp,sp,32
    8001a2c4:	8082                	ret

000000008001a2c6 <load_access_fault_4>:

bool load_access_fault_4(){
    8001a2c6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a2c8:	00012597          	auipc	a1,0x12
    8001a2cc:	0b058593          	addi	a1,a1,176 # 8002c378 <__func__.36>
    8001a2d0:	00013517          	auipc	a0,0x13
    8001a2d4:	0c850513          	addi	a0,a0,200 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001a2d8:	ec06                	sd	ra,24(sp)
    8001a2da:	e822                	sd	s0,16(sp)
    8001a2dc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a2de:	379100ef          	jal	8002ae56 <printf>
    8001a2e2:	4529                	li	a0,10
    8001a2e4:	0610f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a2e8:	4511                	li	a0,4
    8001a2ea:	c1fe60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a2ee:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a2f2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a2f6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a2fa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a2fe:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a302:	10000793          	li	a5,256
    8001a306:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a30a:	20000793          	li	a5,512
    8001a30e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a312:	40000793          	li	a5,1024
    8001a316:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a31a:	6785                	lui	a5,0x1
    8001a31c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a320:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a324:	4785                	li	a5,1
    8001a326:	07fe                	slli	a5,a5,0x1f
    8001a328:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a32c:	08100793          	li	a5,129
    8001a330:	07e2                	slli	a5,a5,0x18
    8001a332:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a336:	08000793          	li	a5,128
    8001a33a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a33e:	67a1                	lui	a5,0x8
    8001a340:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a344:	4501                	li	a0,0
    8001a346:	bc3e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a34a:	ac3e60ef          	jal	80000e0c <test_setup_except_function>
    8001a34e:	4785                	li	a5,1
    8001a350:	1786                	slli	a5,a5,0x21
    8001a352:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a356:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a35a:	08200593          	li	a1,130
    8001a35e:	00019617          	auipc	a2,0x19
    8001a362:	62260613          	addi	a2,a2,1570 # 80033980 <__func__.0+0x68c8>
    8001a366:	00013517          	auipc	a0,0x13
    8001a36a:	04a50513          	addi	a0,a0,74 # 8002d3b0 <__func__.0+0x2f8>
    8001a36e:	2e9100ef          	jal	8002ae56 <printf>
    8001a372:	0003a797          	auipc	a5,0x3a
    8001a376:	c9f7c783          	lbu	a5,-865(a5) # 80054011 <excpt+0x1>
    8001a37a:	0003a497          	auipc	s1,0x3a
    8001a37e:	c9648493          	addi	s1,s1,-874 # 80054010 <excpt>
    8001a382:	00013597          	auipc	a1,0x13
    8001a386:	00658593          	addi	a1,a1,6 # 8002d388 <__func__.0+0x2d0>
    8001a38a:	cf89                	beqz	a5,8001a3a4 <load_access_fault_4+0xde>
    8001a38c:	6498                	ld	a4,8(s1)
    8001a38e:	4795                	li	a5,5
    8001a390:	00013597          	auipc	a1,0x13
    8001a394:	fe858593          	addi	a1,a1,-24 # 8002d378 <__func__.0+0x2c0>
    8001a398:	00f70663          	beq	a4,a5,8001a3a4 <load_access_fault_4+0xde>
    8001a39c:	00013597          	auipc	a1,0x13
    8001a3a0:	fec58593          	addi	a1,a1,-20 # 8002d388 <__func__.0+0x2d0>
    8001a3a4:	00013517          	auipc	a0,0x13
    8001a3a8:	02450513          	addi	a0,a0,36 # 8002d3c8 <__func__.0+0x310>
    8001a3ac:	2ab100ef          	jal	8002ae56 <printf>
    8001a3b0:	0003a797          	auipc	a5,0x3a
    8001a3b4:	c617c783          	lbu	a5,-927(a5) # 80054011 <excpt+0x1>
    8001a3b8:	c789                	beqz	a5,8001a3c2 <load_access_fault_4+0xfc>
    8001a3ba:	6498                	ld	a4,8(s1)
    8001a3bc:	4795                	li	a5,5
    8001a3be:	00f70c63          	beq	a4,a5,8001a3d6 <load_access_fault_4+0x110>
    8001a3c2:	00013517          	auipc	a0,0x13
    8001a3c6:	00e50513          	addi	a0,a0,14 # 8002d3d0 <__func__.0+0x318>
    8001a3ca:	28d100ef          	jal	8002ae56 <printf>
    8001a3ce:	02900513          	li	a0,41
    8001a3d2:	7720f0ef          	jal	80029b44 <putchar>
    8001a3d6:	4529                	li	a0,10
    8001a3d8:	76c0f0ef          	jal	80029b44 <putchar>
    8001a3dc:	0003a417          	auipc	s0,0x3a
    8001a3e0:	c3544403          	lbu	s0,-971(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a3e4:	00013597          	auipc	a1,0x13
    8001a3e8:	fa458593          	addi	a1,a1,-92 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a3ec:	cc11                	beqz	s0,8001a408 <load_access_fault_4+0x142>
    8001a3ee:	6498                	ld	a4,8(s1)
    8001a3f0:	4795                	li	a5,5
    TEST_END();
    8001a3f2:	00013597          	auipc	a1,0x13
    8001a3f6:	f8658593          	addi	a1,a1,-122 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a3fa:	00f70763          	beq	a4,a5,8001a408 <load_access_fault_4+0x142>
    8001a3fe:	4401                	li	s0,0
    TEST_END();
    8001a400:	00013597          	auipc	a1,0x13
    8001a404:	f8858593          	addi	a1,a1,-120 # 8002d388 <__func__.0+0x2d0>
    8001a408:	00013517          	auipc	a0,0x13
    8001a40c:	02850513          	addi	a0,a0,40 # 8002d430 <__func__.0+0x378>
    8001a410:	247100ef          	jal	8002ae56 <printf>
    8001a414:	4511                	li	a0,4
    8001a416:	af3e60ef          	jal	80000f08 <goto_priv>
    8001a41a:	c0ae70ef          	jal	80001824 <reset_state>
}
    8001a41e:	60e2                	ld	ra,24(sp)
    8001a420:	8522                	mv	a0,s0
    8001a422:	6442                	ld	s0,16(sp)
    8001a424:	64a2                	ld	s1,8(sp)
    8001a426:	6105                	addi	sp,sp,32
    8001a428:	8082                	ret

000000008001a42a <load_access_fault_5>:

bool load_access_fault_5(){
    8001a42a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a42c:	00012597          	auipc	a1,0x12
    8001a430:	f6458593          	addi	a1,a1,-156 # 8002c390 <__func__.35>
    8001a434:	00013517          	auipc	a0,0x13
    8001a438:	f6450513          	addi	a0,a0,-156 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001a43c:	e406                	sd	ra,8(sp)
    8001a43e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a440:	217100ef          	jal	8002ae56 <printf>
    8001a444:	4529                	li	a0,10
    8001a446:	6fe0f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a44a:	4511                	li	a0,4
    8001a44c:	abde60ef          	jal	80000f08 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001a450:	3a0025f3          	csrr	a1,pmpcfg0
    8001a454:	00019517          	auipc	a0,0x19
    8001a458:	56450513          	addi	a0,a0,1380 # 800339b8 <__func__.0+0x6900>
    8001a45c:	1fb100ef          	jal	8002ae56 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a460:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a464:	10000793          	li	a5,256
    8001a468:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a46c:	20000793          	li	a5,512
    8001a470:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a474:	40000793          	li	a5,1024
    8001a478:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a47c:	6785                	lui	a5,0x1
    8001a47e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a482:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a486:	4785                	li	a5,1
    8001a488:	07fe                	slli	a5,a5,0x1f
    8001a48a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a48e:	08100793          	li	a5,129
    8001a492:	07e2                	slli	a5,a5,0x18
    8001a494:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a498:	67a1                	lui	a5,0x8
    8001a49a:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a49e:	96fe60ef          	jal	80000e0c <test_setup_except_function>
    8001a4a2:	4785                	li	a5,1
    8001a4a4:	1786                	slli	a5,a5,0x21
    8001a4a6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a4aa:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001a4ae:	0003a597          	auipc	a1,0x3a
    8001a4b2:	b635c583          	lbu	a1,-1181(a1) # 80054011 <excpt+0x1>
    8001a4b6:	00014517          	auipc	a0,0x14
    8001a4ba:	a6a50513          	addi	a0,a0,-1430 # 8002df20 <__func__.0+0xe68>
    8001a4be:	199100ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001a4c2:	0003a597          	auipc	a1,0x3a
    8001a4c6:	b565b583          	ld	a1,-1194(a1) # 80054018 <excpt+0x8>
    8001a4ca:	00014517          	auipc	a0,0x14
    8001a4ce:	a5650513          	addi	a0,a0,-1450 # 8002df20 <__func__.0+0xe68>
    8001a4d2:	185100ef          	jal	8002ae56 <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4d6:	08200593          	li	a1,130
    8001a4da:	00019617          	auipc	a2,0x19
    8001a4de:	4ee60613          	addi	a2,a2,1262 # 800339c8 <__func__.0+0x6910>
    8001a4e2:	00013517          	auipc	a0,0x13
    8001a4e6:	ece50513          	addi	a0,a0,-306 # 8002d3b0 <__func__.0+0x2f8>
    8001a4ea:	16d100ef          	jal	8002ae56 <printf>
    8001a4ee:	0003a797          	auipc	a5,0x3a
    8001a4f2:	b237c783          	lbu	a5,-1245(a5) # 80054011 <excpt+0x1>
    8001a4f6:	00013597          	auipc	a1,0x13
    8001a4fa:	e8258593          	addi	a1,a1,-382 # 8002d378 <__func__.0+0x2c0>
    8001a4fe:	c789                	beqz	a5,8001a508 <load_access_fault_5+0xde>
    8001a500:	00013597          	auipc	a1,0x13
    8001a504:	e8858593          	addi	a1,a1,-376 # 8002d388 <__func__.0+0x2d0>
    8001a508:	00013517          	auipc	a0,0x13
    8001a50c:	ec050513          	addi	a0,a0,-320 # 8002d3c8 <__func__.0+0x310>
    8001a510:	147100ef          	jal	8002ae56 <printf>
    8001a514:	0003a797          	auipc	a5,0x3a
    8001a518:	afd7c783          	lbu	a5,-1283(a5) # 80054011 <excpt+0x1>
    8001a51c:	e7a1                	bnez	a5,8001a564 <load_access_fault_5+0x13a>
    8001a51e:	4529                	li	a0,10
    8001a520:	6240f0ef          	jal	80029b44 <putchar>
    8001a524:	0003a797          	auipc	a5,0x3a
    8001a528:	aed7c783          	lbu	a5,-1299(a5) # 80054011 <excpt+0x1>
    8001a52c:	e795                	bnez	a5,8001a558 <load_access_fault_5+0x12e>
    8001a52e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001a530:	00013597          	auipc	a1,0x13
    8001a534:	e4858593          	addi	a1,a1,-440 # 8002d378 <__func__.0+0x2c0>
    8001a538:	00013517          	auipc	a0,0x13
    8001a53c:	ef850513          	addi	a0,a0,-264 # 8002d430 <__func__.0+0x378>
    8001a540:	117100ef          	jal	8002ae56 <printf>
    8001a544:	4511                	li	a0,4
    8001a546:	9c3e60ef          	jal	80000f08 <goto_priv>
    8001a54a:	adae70ef          	jal	80001824 <reset_state>
}
    8001a54e:	60a2                	ld	ra,8(sp)
    8001a550:	8522                	mv	a0,s0
    8001a552:	6402                	ld	s0,0(sp)
    8001a554:	0141                	addi	sp,sp,16
    8001a556:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a558:	4401                	li	s0,0
    TEST_END();
    8001a55a:	00013597          	auipc	a1,0x13
    8001a55e:	e2e58593          	addi	a1,a1,-466 # 8002d388 <__func__.0+0x2d0>
    8001a562:	bfd9                	j	8001a538 <load_access_fault_5+0x10e>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a564:	00013517          	auipc	a0,0x13
    8001a568:	e6c50513          	addi	a0,a0,-404 # 8002d3d0 <__func__.0+0x318>
    8001a56c:	0eb100ef          	jal	8002ae56 <printf>
    8001a570:	02900513          	li	a0,41
    8001a574:	5d00f0ef          	jal	80029b44 <putchar>
    8001a578:	b75d                	j	8001a51e <load_access_fault_5+0xf4>

000000008001a57a <load_access_fault_6>:


bool load_access_fault_6(){
    8001a57a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a57c:	00012597          	auipc	a1,0x12
    8001a580:	e2c58593          	addi	a1,a1,-468 # 8002c3a8 <__func__.34>
    8001a584:	00013517          	auipc	a0,0x13
    8001a588:	e1450513          	addi	a0,a0,-492 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001a58c:	ec06                	sd	ra,24(sp)
    8001a58e:	e822                	sd	s0,16(sp)
    8001a590:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a592:	0c5100ef          	jal	8002ae56 <printf>
    8001a596:	4529                	li	a0,10
    8001a598:	5ac0f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a59c:	4511                	li	a0,4
    8001a59e:	96be60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a5a2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a5a6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a5aa:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a5ae:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a5b2:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a5b6:	10000793          	li	a5,256
    8001a5ba:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a5be:	20000793          	li	a5,512
    8001a5c2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a5c6:	40000793          	li	a5,1024
    8001a5ca:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a5ce:	6785                	lui	a5,0x1
    8001a5d0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a5d4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a5d8:	4785                	li	a5,1
    8001a5da:	07fe                	slli	a5,a5,0x1f
    8001a5dc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a5e0:	08100793          	li	a5,129
    8001a5e4:	07e2                	slli	a5,a5,0x18
    8001a5e6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001a5ea:	08000793          	li	a5,128
    8001a5ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001a5f2:	67a1                	lui	a5,0x8
    8001a5f4:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001a5f8:	3b0025f3          	csrr	a1,pmpaddr0
    8001a5fc:	00019517          	auipc	a0,0x19
    8001a600:	3c450513          	addi	a0,a0,964 # 800339c0 <__func__.0+0x6908>
    8001a604:	053100ef          	jal	8002ae56 <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001a608:	3b1025f3          	csrr	a1,pmpaddr1
    8001a60c:	00019517          	auipc	a0,0x19
    8001a610:	3b450513          	addi	a0,a0,948 # 800339c0 <__func__.0+0x6908>
    8001a614:	043100ef          	jal	8002ae56 <printf>
    goto_priv(PRIV_HS);
    8001a618:	450d                	li	a0,3
    8001a61a:	8efe60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a61e:	feee60ef          	jal	80000e0c <test_setup_except_function>
    8001a622:	4785                	li	a5,1
    8001a624:	1786                	slli	a5,a5,0x21
    8001a626:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a62a:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a62e:	08200593          	li	a1,130
    8001a632:	00019617          	auipc	a2,0x19
    8001a636:	3ce60613          	addi	a2,a2,974 # 80033a00 <__func__.0+0x6948>
    8001a63a:	00013517          	auipc	a0,0x13
    8001a63e:	d7650513          	addi	a0,a0,-650 # 8002d3b0 <__func__.0+0x2f8>
    8001a642:	015100ef          	jal	8002ae56 <printf>
    8001a646:	0003a797          	auipc	a5,0x3a
    8001a64a:	9cb7c783          	lbu	a5,-1589(a5) # 80054011 <excpt+0x1>
    8001a64e:	0003a497          	auipc	s1,0x3a
    8001a652:	9c248493          	addi	s1,s1,-1598 # 80054010 <excpt>
    8001a656:	00013597          	auipc	a1,0x13
    8001a65a:	d3258593          	addi	a1,a1,-718 # 8002d388 <__func__.0+0x2d0>
    8001a65e:	cf89                	beqz	a5,8001a678 <load_access_fault_6+0xfe>
    8001a660:	6498                	ld	a4,8(s1)
    8001a662:	4795                	li	a5,5
    8001a664:	00013597          	auipc	a1,0x13
    8001a668:	d1458593          	addi	a1,a1,-748 # 8002d378 <__func__.0+0x2c0>
    8001a66c:	00f70663          	beq	a4,a5,8001a678 <load_access_fault_6+0xfe>
    8001a670:	00013597          	auipc	a1,0x13
    8001a674:	d1858593          	addi	a1,a1,-744 # 8002d388 <__func__.0+0x2d0>
    8001a678:	00013517          	auipc	a0,0x13
    8001a67c:	d5050513          	addi	a0,a0,-688 # 8002d3c8 <__func__.0+0x310>
    8001a680:	7d6100ef          	jal	8002ae56 <printf>
    8001a684:	0003a797          	auipc	a5,0x3a
    8001a688:	98d7c783          	lbu	a5,-1651(a5) # 80054011 <excpt+0x1>
    8001a68c:	c789                	beqz	a5,8001a696 <load_access_fault_6+0x11c>
    8001a68e:	6498                	ld	a4,8(s1)
    8001a690:	4795                	li	a5,5
    8001a692:	00f70c63          	beq	a4,a5,8001a6aa <load_access_fault_6+0x130>
    8001a696:	00013517          	auipc	a0,0x13
    8001a69a:	d3a50513          	addi	a0,a0,-710 # 8002d3d0 <__func__.0+0x318>
    8001a69e:	7b8100ef          	jal	8002ae56 <printf>
    8001a6a2:	02900513          	li	a0,41
    8001a6a6:	49e0f0ef          	jal	80029b44 <putchar>
    8001a6aa:	4529                	li	a0,10
    8001a6ac:	4980f0ef          	jal	80029b44 <putchar>
    8001a6b0:	0003a417          	auipc	s0,0x3a
    8001a6b4:	96144403          	lbu	s0,-1695(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a6b8:	00013597          	auipc	a1,0x13
    8001a6bc:	cd058593          	addi	a1,a1,-816 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6c0:	cc11                	beqz	s0,8001a6dc <load_access_fault_6+0x162>
    8001a6c2:	6498                	ld	a4,8(s1)
    8001a6c4:	4795                	li	a5,5
    TEST_END();
    8001a6c6:	00013597          	auipc	a1,0x13
    8001a6ca:	cb258593          	addi	a1,a1,-846 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6ce:	00f70763          	beq	a4,a5,8001a6dc <load_access_fault_6+0x162>
    8001a6d2:	4401                	li	s0,0
    TEST_END();
    8001a6d4:	00013597          	auipc	a1,0x13
    8001a6d8:	cb458593          	addi	a1,a1,-844 # 8002d388 <__func__.0+0x2d0>
    8001a6dc:	00013517          	auipc	a0,0x13
    8001a6e0:	d5450513          	addi	a0,a0,-684 # 8002d430 <__func__.0+0x378>
    8001a6e4:	772100ef          	jal	8002ae56 <printf>
    8001a6e8:	4511                	li	a0,4
    8001a6ea:	81fe60ef          	jal	80000f08 <goto_priv>
    8001a6ee:	936e70ef          	jal	80001824 <reset_state>
}
    8001a6f2:	60e2                	ld	ra,24(sp)
    8001a6f4:	8522                	mv	a0,s0
    8001a6f6:	6442                	ld	s0,16(sp)
    8001a6f8:	64a2                	ld	s1,8(sp)
    8001a6fa:	6105                	addi	sp,sp,32
    8001a6fc:	8082                	ret

000000008001a6fe <load_access_fault_7>:


bool load_access_fault_7(){
    8001a6fe:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a700:	00012597          	auipc	a1,0x12
    8001a704:	cc058593          	addi	a1,a1,-832 # 8002c3c0 <__func__.33>
    8001a708:	00013517          	auipc	a0,0x13
    8001a70c:	c9050513          	addi	a0,a0,-880 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001a710:	ec06                	sd	ra,24(sp)
    8001a712:	e822                	sd	s0,16(sp)
    8001a714:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a716:	740100ef          	jal	8002ae56 <printf>
    8001a71a:	4529                	li	a0,10
    8001a71c:	4280f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a720:	4511                	li	a0,4
    8001a722:	fe6e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a726:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a72a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a72e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a732:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a736:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a73a:	10000793          	li	a5,256
    8001a73e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a742:	20000793          	li	a5,512
    8001a746:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a74a:	40000793          	li	a5,1024
    8001a74e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a752:	6785                	lui	a5,0x1
    8001a754:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a758:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a75c:	4785                	li	a5,1
    8001a75e:	07fe                	slli	a5,a5,0x1f
    8001a760:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a764:	08100793          	li	a5,129
    8001a768:	07e2                	slli	a5,a5,0x18
    8001a76a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a76e:	08000793          	li	a5,128
    8001a772:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a776:	67a1                	lui	a5,0x8
    8001a778:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a77c:	4505                	li	a0,1
    8001a77e:	f8ae60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a782:	e8ae60ef          	jal	80000e0c <test_setup_except_function>
    8001a786:	4785                	li	a5,1
    8001a788:	1786                	slli	a5,a5,0x21
    8001a78a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a78e:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a792:	08200593          	li	a1,130
    8001a796:	00019617          	auipc	a2,0x19
    8001a79a:	2a260613          	addi	a2,a2,674 # 80033a38 <__func__.0+0x6980>
    8001a79e:	00013517          	auipc	a0,0x13
    8001a7a2:	c1250513          	addi	a0,a0,-1006 # 8002d3b0 <__func__.0+0x2f8>
    8001a7a6:	6b0100ef          	jal	8002ae56 <printf>
    8001a7aa:	0003a797          	auipc	a5,0x3a
    8001a7ae:	8677c783          	lbu	a5,-1945(a5) # 80054011 <excpt+0x1>
    8001a7b2:	0003a497          	auipc	s1,0x3a
    8001a7b6:	85e48493          	addi	s1,s1,-1954 # 80054010 <excpt>
    8001a7ba:	00013597          	auipc	a1,0x13
    8001a7be:	bce58593          	addi	a1,a1,-1074 # 8002d388 <__func__.0+0x2d0>
    8001a7c2:	cf89                	beqz	a5,8001a7dc <load_access_fault_7+0xde>
    8001a7c4:	6498                	ld	a4,8(s1)
    8001a7c6:	4795                	li	a5,5
    8001a7c8:	00013597          	auipc	a1,0x13
    8001a7cc:	bb058593          	addi	a1,a1,-1104 # 8002d378 <__func__.0+0x2c0>
    8001a7d0:	00f70663          	beq	a4,a5,8001a7dc <load_access_fault_7+0xde>
    8001a7d4:	00013597          	auipc	a1,0x13
    8001a7d8:	bb458593          	addi	a1,a1,-1100 # 8002d388 <__func__.0+0x2d0>
    8001a7dc:	00013517          	auipc	a0,0x13
    8001a7e0:	bec50513          	addi	a0,a0,-1044 # 8002d3c8 <__func__.0+0x310>
    8001a7e4:	672100ef          	jal	8002ae56 <printf>
    8001a7e8:	0003a797          	auipc	a5,0x3a
    8001a7ec:	8297c783          	lbu	a5,-2007(a5) # 80054011 <excpt+0x1>
    8001a7f0:	c789                	beqz	a5,8001a7fa <load_access_fault_7+0xfc>
    8001a7f2:	6498                	ld	a4,8(s1)
    8001a7f4:	4795                	li	a5,5
    8001a7f6:	00f70c63          	beq	a4,a5,8001a80e <load_access_fault_7+0x110>
    8001a7fa:	00013517          	auipc	a0,0x13
    8001a7fe:	bd650513          	addi	a0,a0,-1066 # 8002d3d0 <__func__.0+0x318>
    8001a802:	654100ef          	jal	8002ae56 <printf>
    8001a806:	02900513          	li	a0,41
    8001a80a:	33a0f0ef          	jal	80029b44 <putchar>
    8001a80e:	4529                	li	a0,10
    8001a810:	3340f0ef          	jal	80029b44 <putchar>
    8001a814:	00039417          	auipc	s0,0x39
    8001a818:	7fd44403          	lbu	s0,2045(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a81c:	00013597          	auipc	a1,0x13
    8001a820:	b6c58593          	addi	a1,a1,-1172 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a824:	cc11                	beqz	s0,8001a840 <load_access_fault_7+0x142>
    8001a826:	6498                	ld	a4,8(s1)
    8001a828:	4795                	li	a5,5
    TEST_END();
    8001a82a:	00013597          	auipc	a1,0x13
    8001a82e:	b4e58593          	addi	a1,a1,-1202 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a832:	00f70763          	beq	a4,a5,8001a840 <load_access_fault_7+0x142>
    8001a836:	4401                	li	s0,0
    TEST_END();
    8001a838:	00013597          	auipc	a1,0x13
    8001a83c:	b5058593          	addi	a1,a1,-1200 # 8002d388 <__func__.0+0x2d0>
    8001a840:	00013517          	auipc	a0,0x13
    8001a844:	bf050513          	addi	a0,a0,-1040 # 8002d430 <__func__.0+0x378>
    8001a848:	60e100ef          	jal	8002ae56 <printf>
    8001a84c:	4511                	li	a0,4
    8001a84e:	ebae60ef          	jal	80000f08 <goto_priv>
    8001a852:	fd3e60ef          	jal	80001824 <reset_state>
}
    8001a856:	60e2                	ld	ra,24(sp)
    8001a858:	8522                	mv	a0,s0
    8001a85a:	6442                	ld	s0,16(sp)
    8001a85c:	64a2                	ld	s1,8(sp)
    8001a85e:	6105                	addi	sp,sp,32
    8001a860:	8082                	ret

000000008001a862 <load_access_fault_8>:

bool load_access_fault_8(){
    8001a862:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a864:	00012597          	auipc	a1,0x12
    8001a868:	b7458593          	addi	a1,a1,-1164 # 8002c3d8 <__func__.32>
    8001a86c:	00013517          	auipc	a0,0x13
    8001a870:	b2c50513          	addi	a0,a0,-1236 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001a874:	ec06                	sd	ra,24(sp)
    8001a876:	e822                	sd	s0,16(sp)
    8001a878:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a87a:	5dc100ef          	jal	8002ae56 <printf>
    8001a87e:	4529                	li	a0,10
    8001a880:	2c40f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a884:	4511                	li	a0,4
    8001a886:	e82e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a88a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a88e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a892:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a896:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a89a:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a89e:	10000793          	li	a5,256
    8001a8a2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a8a6:	20000793          	li	a5,512
    8001a8aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a8ae:	40000793          	li	a5,1024
    8001a8b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a8b6:	6785                	lui	a5,0x1
    8001a8b8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a8bc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a8c0:	4785                	li	a5,1
    8001a8c2:	07fe                	slli	a5,a5,0x1f
    8001a8c4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a8c8:	08100793          	li	a5,129
    8001a8cc:	07e2                	slli	a5,a5,0x18
    8001a8ce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a8d2:	08000793          	li	a5,128
    8001a8d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a8da:	67a1                	lui	a5,0x8
    8001a8dc:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a8e0:	4501                	li	a0,0
    8001a8e2:	e26e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a8e6:	d26e60ef          	jal	80000e0c <test_setup_except_function>
    8001a8ea:	4785                	li	a5,1
    8001a8ec:	1786                	slli	a5,a5,0x21
    8001a8ee:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a8f2:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8f6:	08200593          	li	a1,130
    8001a8fa:	00019617          	auipc	a2,0x19
    8001a8fe:	17660613          	addi	a2,a2,374 # 80033a70 <__func__.0+0x69b8>
    8001a902:	00013517          	auipc	a0,0x13
    8001a906:	aae50513          	addi	a0,a0,-1362 # 8002d3b0 <__func__.0+0x2f8>
    8001a90a:	54c100ef          	jal	8002ae56 <printf>
    8001a90e:	00039797          	auipc	a5,0x39
    8001a912:	7037c783          	lbu	a5,1795(a5) # 80054011 <excpt+0x1>
    8001a916:	00039497          	auipc	s1,0x39
    8001a91a:	6fa48493          	addi	s1,s1,1786 # 80054010 <excpt>
    8001a91e:	00013597          	auipc	a1,0x13
    8001a922:	a6a58593          	addi	a1,a1,-1430 # 8002d388 <__func__.0+0x2d0>
    8001a926:	cf89                	beqz	a5,8001a940 <load_access_fault_8+0xde>
    8001a928:	6498                	ld	a4,8(s1)
    8001a92a:	4795                	li	a5,5
    8001a92c:	00013597          	auipc	a1,0x13
    8001a930:	a4c58593          	addi	a1,a1,-1460 # 8002d378 <__func__.0+0x2c0>
    8001a934:	00f70663          	beq	a4,a5,8001a940 <load_access_fault_8+0xde>
    8001a938:	00013597          	auipc	a1,0x13
    8001a93c:	a5058593          	addi	a1,a1,-1456 # 8002d388 <__func__.0+0x2d0>
    8001a940:	00013517          	auipc	a0,0x13
    8001a944:	a8850513          	addi	a0,a0,-1400 # 8002d3c8 <__func__.0+0x310>
    8001a948:	50e100ef          	jal	8002ae56 <printf>
    8001a94c:	00039797          	auipc	a5,0x39
    8001a950:	6c57c783          	lbu	a5,1733(a5) # 80054011 <excpt+0x1>
    8001a954:	c789                	beqz	a5,8001a95e <load_access_fault_8+0xfc>
    8001a956:	6498                	ld	a4,8(s1)
    8001a958:	4795                	li	a5,5
    8001a95a:	00f70c63          	beq	a4,a5,8001a972 <load_access_fault_8+0x110>
    8001a95e:	00013517          	auipc	a0,0x13
    8001a962:	a7250513          	addi	a0,a0,-1422 # 8002d3d0 <__func__.0+0x318>
    8001a966:	4f0100ef          	jal	8002ae56 <printf>
    8001a96a:	02900513          	li	a0,41
    8001a96e:	1d60f0ef          	jal	80029b44 <putchar>
    8001a972:	4529                	li	a0,10
    8001a974:	1d00f0ef          	jal	80029b44 <putchar>
    8001a978:	00039417          	auipc	s0,0x39
    8001a97c:	69944403          	lbu	s0,1689(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a980:	00013597          	auipc	a1,0x13
    8001a984:	a0858593          	addi	a1,a1,-1528 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a988:	cc11                	beqz	s0,8001a9a4 <load_access_fault_8+0x142>
    8001a98a:	6498                	ld	a4,8(s1)
    8001a98c:	4795                	li	a5,5
    TEST_END();
    8001a98e:	00013597          	auipc	a1,0x13
    8001a992:	9ea58593          	addi	a1,a1,-1558 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a996:	00f70763          	beq	a4,a5,8001a9a4 <load_access_fault_8+0x142>
    8001a99a:	4401                	li	s0,0
    TEST_END();
    8001a99c:	00013597          	auipc	a1,0x13
    8001a9a0:	9ec58593          	addi	a1,a1,-1556 # 8002d388 <__func__.0+0x2d0>
    8001a9a4:	00013517          	auipc	a0,0x13
    8001a9a8:	a8c50513          	addi	a0,a0,-1396 # 8002d430 <__func__.0+0x378>
    8001a9ac:	4aa100ef          	jal	8002ae56 <printf>
    8001a9b0:	4511                	li	a0,4
    8001a9b2:	d56e60ef          	jal	80000f08 <goto_priv>
    8001a9b6:	e6fe60ef          	jal	80001824 <reset_state>
}
    8001a9ba:	60e2                	ld	ra,24(sp)
    8001a9bc:	8522                	mv	a0,s0
    8001a9be:	6442                	ld	s0,16(sp)
    8001a9c0:	64a2                	ld	s1,8(sp)
    8001a9c2:	6105                	addi	sp,sp,32
    8001a9c4:	8082                	ret

000000008001a9c6 <load_access_fault_9>:

bool load_access_fault_9(){
    8001a9c6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a9c8:	00012597          	auipc	a1,0x12
    8001a9cc:	a2858593          	addi	a1,a1,-1496 # 8002c3f0 <__func__.31>
    8001a9d0:	00013517          	auipc	a0,0x13
    8001a9d4:	9c850513          	addi	a0,a0,-1592 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001a9d8:	ec06                	sd	ra,24(sp)
    8001a9da:	e822                	sd	s0,16(sp)
    8001a9dc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a9de:	478100ef          	jal	8002ae56 <printf>
    8001a9e2:	4529                	li	a0,10
    8001a9e4:	1600f0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001a9e8:	4511                	li	a0,4
    8001a9ea:	d1ee60ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a9ee:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a9f2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a9f6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a9fa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a9fe:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001aa02:	10000793          	li	a5,256
    8001aa06:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001aa0a:	20000793          	li	a5,512
    8001aa0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001aa12:	40000793          	li	a5,1024
    8001aa16:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001aa1a:	6785                	lui	a5,0x1
    8001aa1c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001aa20:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001aa24:	4785                	li	a5,1
    8001aa26:	07fe                	slli	a5,a5,0x1f
    8001aa28:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001aa2c:	08100793          	li	a5,129
    8001aa30:	07e2                	slli	a5,a5,0x18
    8001aa32:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001aa36:	08000793          	li	a5,128
    8001aa3a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001aa3e:	67a1                	lui	a5,0x8
    8001aa40:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001aa44:	4501                	li	a0,0
    8001aa46:	cc2e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aa4a:	bc2e60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001aa4e:	4785                	li	a5,1
    8001aa50:	178e                	slli	a5,a5,0x23
    8001aa52:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001aa54:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa58:	08200593          	li	a1,130
    8001aa5c:	00019617          	auipc	a2,0x19
    8001aa60:	04c60613          	addi	a2,a2,76 # 80033aa8 <__func__.0+0x69f0>
    8001aa64:	00013517          	auipc	a0,0x13
    8001aa68:	94c50513          	addi	a0,a0,-1716 # 8002d3b0 <__func__.0+0x2f8>
    8001aa6c:	3ea100ef          	jal	8002ae56 <printf>
    8001aa70:	00039797          	auipc	a5,0x39
    8001aa74:	5a17c783          	lbu	a5,1441(a5) # 80054011 <excpt+0x1>
    8001aa78:	00039497          	auipc	s1,0x39
    8001aa7c:	59848493          	addi	s1,s1,1432 # 80054010 <excpt>
    8001aa80:	00013597          	auipc	a1,0x13
    8001aa84:	90858593          	addi	a1,a1,-1784 # 8002d388 <__func__.0+0x2d0>
    8001aa88:	cf89                	beqz	a5,8001aaa2 <load_access_fault_9+0xdc>
    8001aa8a:	6498                	ld	a4,8(s1)
    8001aa8c:	4795                	li	a5,5
    8001aa8e:	00013597          	auipc	a1,0x13
    8001aa92:	8ea58593          	addi	a1,a1,-1814 # 8002d378 <__func__.0+0x2c0>
    8001aa96:	00f70663          	beq	a4,a5,8001aaa2 <load_access_fault_9+0xdc>
    8001aa9a:	00013597          	auipc	a1,0x13
    8001aa9e:	8ee58593          	addi	a1,a1,-1810 # 8002d388 <__func__.0+0x2d0>
    8001aaa2:	00013517          	auipc	a0,0x13
    8001aaa6:	92650513          	addi	a0,a0,-1754 # 8002d3c8 <__func__.0+0x310>
    8001aaaa:	3ac100ef          	jal	8002ae56 <printf>
    8001aaae:	00039797          	auipc	a5,0x39
    8001aab2:	5637c783          	lbu	a5,1379(a5) # 80054011 <excpt+0x1>
    8001aab6:	c789                	beqz	a5,8001aac0 <load_access_fault_9+0xfa>
    8001aab8:	6498                	ld	a4,8(s1)
    8001aaba:	4795                	li	a5,5
    8001aabc:	00f70c63          	beq	a4,a5,8001aad4 <load_access_fault_9+0x10e>
    8001aac0:	00013517          	auipc	a0,0x13
    8001aac4:	91050513          	addi	a0,a0,-1776 # 8002d3d0 <__func__.0+0x318>
    8001aac8:	38e100ef          	jal	8002ae56 <printf>
    8001aacc:	02900513          	li	a0,41
    8001aad0:	0740f0ef          	jal	80029b44 <putchar>
    8001aad4:	4529                	li	a0,10
    8001aad6:	06e0f0ef          	jal	80029b44 <putchar>
    8001aada:	00039417          	auipc	s0,0x39
    8001aade:	53744403          	lbu	s0,1335(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aae2:	00013597          	auipc	a1,0x13
    8001aae6:	8a658593          	addi	a1,a1,-1882 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aaea:	cc11                	beqz	s0,8001ab06 <load_access_fault_9+0x140>
    8001aaec:	6498                	ld	a4,8(s1)
    8001aaee:	4795                	li	a5,5
    TEST_END();
    8001aaf0:	00013597          	auipc	a1,0x13
    8001aaf4:	88858593          	addi	a1,a1,-1912 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aaf8:	00f70763          	beq	a4,a5,8001ab06 <load_access_fault_9+0x140>
    8001aafc:	4401                	li	s0,0
    TEST_END();
    8001aafe:	00013597          	auipc	a1,0x13
    8001ab02:	88a58593          	addi	a1,a1,-1910 # 8002d388 <__func__.0+0x2d0>
    8001ab06:	00013517          	auipc	a0,0x13
    8001ab0a:	92a50513          	addi	a0,a0,-1750 # 8002d430 <__func__.0+0x378>
    8001ab0e:	348100ef          	jal	8002ae56 <printf>
    8001ab12:	4511                	li	a0,4
    8001ab14:	bf4e60ef          	jal	80000f08 <goto_priv>
    8001ab18:	d0de60ef          	jal	80001824 <reset_state>
}
    8001ab1c:	60e2                	ld	ra,24(sp)
    8001ab1e:	8522                	mv	a0,s0
    8001ab20:	6442                	ld	s0,16(sp)
    8001ab22:	64a2                	ld	s1,8(sp)
    8001ab24:	6105                	addi	sp,sp,32
    8001ab26:	8082                	ret

000000008001ab28 <load_access_fault_10>:

bool load_access_fault_10(){
    8001ab28:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ab2a:	00012597          	auipc	a1,0x12
    8001ab2e:	8de58593          	addi	a1,a1,-1826 # 8002c408 <__func__.30>
    8001ab32:	00013517          	auipc	a0,0x13
    8001ab36:	86650513          	addi	a0,a0,-1946 # 8002d398 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001ab3a:	ec06                	sd	ra,24(sp)
    8001ab3c:	e822                	sd	s0,16(sp)
    8001ab3e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ab40:	316100ef          	jal	8002ae56 <printf>
    8001ab44:	4529                	li	a0,10
    8001ab46:	7ff0e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001ab4a:	4511                	li	a0,4
    8001ab4c:	bbce60ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ab50:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ab54:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ab58:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ab5c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ab60:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ab64:	4785                	li	a5,1
    8001ab66:	07fe                	slli	a5,a5,0x1f
    8001ab68:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ab6c:	08000793          	li	a5,128
    8001ab70:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001ab74:	3a0025f3          	csrr	a1,pmpcfg0
    8001ab78:	00019517          	auipc	a0,0x19
    8001ab7c:	fa050513          	addi	a0,a0,-96 # 80033b18 <__func__.0+0x6a60>
    8001ab80:	2d6100ef          	jal	8002ae56 <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001ab84:	3a2025f3          	csrr	a1,pmpcfg2
    8001ab88:	00019517          	auipc	a0,0x19
    8001ab8c:	fa050513          	addi	a0,a0,-96 # 80033b28 <__func__.0+0x6a70>
    8001ab90:	2c6100ef          	jal	8002ae56 <printf>


    goto_priv(PRIV_HS);
    8001ab94:	450d                	li	a0,3
    8001ab96:	b72e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ab9a:	a72e60ef          	jal	80000e0c <test_setup_except_function>
    8001ab9e:	08f00793          	li	a5,143
    8001aba2:	07ea                	slli	a5,a5,0x1a
    8001aba4:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001aba8:	00039597          	auipc	a1,0x39
    8001abac:	4695c583          	lbu	a1,1129(a1) # 80054011 <excpt+0x1>
    8001abb0:	00013517          	auipc	a0,0x13
    8001abb4:	37050513          	addi	a0,a0,880 # 8002df20 <__func__.0+0xe68>
    8001abb8:	00039417          	auipc	s0,0x39
    8001abbc:	45840413          	addi	s0,s0,1112 # 80054010 <excpt>
    8001abc0:	296100ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001abc4:	640c                	ld	a1,8(s0)
    8001abc6:	00013517          	auipc	a0,0x13
    8001abca:	35a50513          	addi	a0,a0,858 # 8002df20 <__func__.0+0xe68>
    8001abce:	288100ef          	jal	8002ae56 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abd2:	08200593          	li	a1,130
    8001abd6:	00019617          	auipc	a2,0x19
    8001abda:	f6260613          	addi	a2,a2,-158 # 80033b38 <__func__.0+0x6a80>
    8001abde:	00012517          	auipc	a0,0x12
    8001abe2:	7d250513          	addi	a0,a0,2002 # 8002d3b0 <__func__.0+0x2f8>
    8001abe6:	270100ef          	jal	8002ae56 <printf>
    8001abea:	00039797          	auipc	a5,0x39
    8001abee:	4277c783          	lbu	a5,1063(a5) # 80054011 <excpt+0x1>
    8001abf2:	00012597          	auipc	a1,0x12
    8001abf6:	79658593          	addi	a1,a1,1942 # 8002d388 <__func__.0+0x2d0>
    8001abfa:	cf89                	beqz	a5,8001ac14 <load_access_fault_10+0xec>
    8001abfc:	6418                	ld	a4,8(s0)
    8001abfe:	4795                	li	a5,5
    8001ac00:	00012597          	auipc	a1,0x12
    8001ac04:	77858593          	addi	a1,a1,1912 # 8002d378 <__func__.0+0x2c0>
    8001ac08:	00f70663          	beq	a4,a5,8001ac14 <load_access_fault_10+0xec>
    8001ac0c:	00012597          	auipc	a1,0x12
    8001ac10:	77c58593          	addi	a1,a1,1916 # 8002d388 <__func__.0+0x2d0>
    8001ac14:	00012517          	auipc	a0,0x12
    8001ac18:	7b450513          	addi	a0,a0,1972 # 8002d3c8 <__func__.0+0x310>
    8001ac1c:	23a100ef          	jal	8002ae56 <printf>
    8001ac20:	00039797          	auipc	a5,0x39
    8001ac24:	3f17c783          	lbu	a5,1009(a5) # 80054011 <excpt+0x1>
    8001ac28:	c789                	beqz	a5,8001ac32 <load_access_fault_10+0x10a>
    8001ac2a:	6418                	ld	a4,8(s0)
    8001ac2c:	4795                	li	a5,5
    8001ac2e:	00f70c63          	beq	a4,a5,8001ac46 <load_access_fault_10+0x11e>
    8001ac32:	00012517          	auipc	a0,0x12
    8001ac36:	79e50513          	addi	a0,a0,1950 # 8002d3d0 <__func__.0+0x318>
    8001ac3a:	21c100ef          	jal	8002ae56 <printf>
    8001ac3e:	02900513          	li	a0,41
    8001ac42:	7030e0ef          	jal	80029b44 <putchar>
    8001ac46:	4529                	li	a0,10
    8001ac48:	6fd0e0ef          	jal	80029b44 <putchar>
    8001ac4c:	00039497          	auipc	s1,0x39
    8001ac50:	3c54c483          	lbu	s1,965(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001ac54:	00012597          	auipc	a1,0x12
    8001ac58:	73458593          	addi	a1,a1,1844 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ac5c:	cc91                	beqz	s1,8001ac78 <load_access_fault_10+0x150>
    8001ac5e:	6418                	ld	a4,8(s0)
    8001ac60:	4795                	li	a5,5
    TEST_END();
    8001ac62:	00012597          	auipc	a1,0x12
    8001ac66:	71658593          	addi	a1,a1,1814 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ac6a:	00f70763          	beq	a4,a5,8001ac78 <load_access_fault_10+0x150>
    8001ac6e:	4481                	li	s1,0
    TEST_END();
    8001ac70:	00012597          	auipc	a1,0x12
    8001ac74:	71858593          	addi	a1,a1,1816 # 8002d388 <__func__.0+0x2d0>
    8001ac78:	00012517          	auipc	a0,0x12
    8001ac7c:	7b850513          	addi	a0,a0,1976 # 8002d430 <__func__.0+0x378>
    8001ac80:	1d6100ef          	jal	8002ae56 <printf>
    8001ac84:	4511                	li	a0,4
    8001ac86:	a82e60ef          	jal	80000f08 <goto_priv>
    8001ac8a:	b9be60ef          	jal	80001824 <reset_state>
}
    8001ac8e:	60e2                	ld	ra,24(sp)
    8001ac90:	6442                	ld	s0,16(sp)
    8001ac92:	8526                	mv	a0,s1
    8001ac94:	64a2                	ld	s1,8(sp)
    8001ac96:	6105                	addi	sp,sp,32
    8001ac98:	8082                	ret

000000008001ac9a <store_access_fault_1>:


bool store_access_fault_1(){
    8001ac9a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ac9c:	00011597          	auipc	a1,0x11
    8001aca0:	78458593          	addi	a1,a1,1924 # 8002c420 <__func__.29>
    8001aca4:	00012517          	auipc	a0,0x12
    8001aca8:	6f450513          	addi	a0,a0,1780 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001acac:	ec06                	sd	ra,24(sp)
    8001acae:	e822                	sd	s0,16(sp)
    8001acb0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001acb2:	1a4100ef          	jal	8002ae56 <printf>
    8001acb6:	4529                	li	a0,10
    8001acb8:	68d0e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001acbc:	4511                	li	a0,4
    8001acbe:	a4ae60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001acc2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001acc6:	10000793          	li	a5,256
    8001acca:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001acce:	20000793          	li	a5,512
    8001acd2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001acd6:	40000793          	li	a5,1024
    8001acda:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001acde:	6785                	lui	a5,0x1
    8001ace0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ace4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ace8:	4785                	li	a5,1
    8001acea:	07fe                	slli	a5,a5,0x1f
    8001acec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001acf0:	08100793          	li	a5,129
    8001acf4:	07e2                	slli	a5,a5,0x18
    8001acf6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001acfa:	67a1                	lui	a5,0x8
    8001acfc:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001ad00:	12000073          	sfence.vma
    asm volatile(
    8001ad04:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001ad08:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001ad0c:	900e60ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001ad10:	4785                	li	a5,1
    8001ad12:	1786                	slli	a5,a5,0x21
    8001ad14:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ad18:	4701                	li	a4,0
    8001ad1a:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001ad1e:	00039597          	auipc	a1,0x39
    8001ad22:	2f35c583          	lbu	a1,755(a1) # 80054011 <excpt+0x1>
    8001ad26:	00013517          	auipc	a0,0x13
    8001ad2a:	1fa50513          	addi	a0,a0,506 # 8002df20 <__func__.0+0xe68>
    8001ad2e:	00039417          	auipc	s0,0x39
    8001ad32:	2e240413          	addi	s0,s0,738 # 80054010 <excpt>
    8001ad36:	120100ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001ad3a:	640c                	ld	a1,8(s0)
    8001ad3c:	00013517          	auipc	a0,0x13
    8001ad40:	1e450513          	addi	a0,a0,484 # 8002df20 <__func__.0+0xe68>
    8001ad44:	112100ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad48:	08200593          	li	a1,130
    8001ad4c:	00019617          	auipc	a2,0x19
    8001ad50:	e4c60613          	addi	a2,a2,-436 # 80033b98 <__func__.0+0x6ae0>
    8001ad54:	00012517          	auipc	a0,0x12
    8001ad58:	65c50513          	addi	a0,a0,1628 # 8002d3b0 <__func__.0+0x2f8>
    8001ad5c:	0fa100ef          	jal	8002ae56 <printf>
    8001ad60:	00039797          	auipc	a5,0x39
    8001ad64:	2b17c783          	lbu	a5,689(a5) # 80054011 <excpt+0x1>
    8001ad68:	00012597          	auipc	a1,0x12
    8001ad6c:	62058593          	addi	a1,a1,1568 # 8002d388 <__func__.0+0x2d0>
    8001ad70:	cf89                	beqz	a5,8001ad8a <store_access_fault_1+0xf0>
    8001ad72:	6418                	ld	a4,8(s0)
    8001ad74:	479d                	li	a5,7
    8001ad76:	00012597          	auipc	a1,0x12
    8001ad7a:	60258593          	addi	a1,a1,1538 # 8002d378 <__func__.0+0x2c0>
    8001ad7e:	00f70663          	beq	a4,a5,8001ad8a <store_access_fault_1+0xf0>
    8001ad82:	00012597          	auipc	a1,0x12
    8001ad86:	60658593          	addi	a1,a1,1542 # 8002d388 <__func__.0+0x2d0>
    8001ad8a:	00012517          	auipc	a0,0x12
    8001ad8e:	63e50513          	addi	a0,a0,1598 # 8002d3c8 <__func__.0+0x310>
    8001ad92:	0c4100ef          	jal	8002ae56 <printf>
    8001ad96:	00039797          	auipc	a5,0x39
    8001ad9a:	27b7c783          	lbu	a5,635(a5) # 80054011 <excpt+0x1>
    8001ad9e:	c789                	beqz	a5,8001ada8 <store_access_fault_1+0x10e>
    8001ada0:	6418                	ld	a4,8(s0)
    8001ada2:	479d                	li	a5,7
    8001ada4:	00f70c63          	beq	a4,a5,8001adbc <store_access_fault_1+0x122>
    8001ada8:	00012517          	auipc	a0,0x12
    8001adac:	62850513          	addi	a0,a0,1576 # 8002d3d0 <__func__.0+0x318>
    8001adb0:	0a6100ef          	jal	8002ae56 <printf>
    8001adb4:	02900513          	li	a0,41
    8001adb8:	58d0e0ef          	jal	80029b44 <putchar>
    8001adbc:	4529                	li	a0,10
    8001adbe:	5870e0ef          	jal	80029b44 <putchar>
    8001adc2:	00039497          	auipc	s1,0x39
    8001adc6:	24f4c483          	lbu	s1,591(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001adca:	00012597          	auipc	a1,0x12
    8001adce:	5be58593          	addi	a1,a1,1470 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001add2:	cc91                	beqz	s1,8001adee <store_access_fault_1+0x154>
    8001add4:	6418                	ld	a4,8(s0)
    8001add6:	479d                	li	a5,7
    TEST_END();
    8001add8:	00012597          	auipc	a1,0x12
    8001addc:	5a058593          	addi	a1,a1,1440 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ade0:	00f70763          	beq	a4,a5,8001adee <store_access_fault_1+0x154>
    8001ade4:	4481                	li	s1,0
    TEST_END();
    8001ade6:	00012597          	auipc	a1,0x12
    8001adea:	5a258593          	addi	a1,a1,1442 # 8002d388 <__func__.0+0x2d0>
    8001adee:	00012517          	auipc	a0,0x12
    8001adf2:	64250513          	addi	a0,a0,1602 # 8002d430 <__func__.0+0x378>
    8001adf6:	060100ef          	jal	8002ae56 <printf>
    8001adfa:	4511                	li	a0,4
    8001adfc:	90ce60ef          	jal	80000f08 <goto_priv>
    8001ae00:	a25e60ef          	jal	80001824 <reset_state>
}
    8001ae04:	60e2                	ld	ra,24(sp)
    8001ae06:	6442                	ld	s0,16(sp)
    8001ae08:	8526                	mv	a0,s1
    8001ae0a:	64a2                	ld	s1,8(sp)
    8001ae0c:	6105                	addi	sp,sp,32
    8001ae0e:	8082                	ret

000000008001ae10 <store_access_fault_2>:

bool store_access_fault_2(){
    8001ae10:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ae12:	00011597          	auipc	a1,0x11
    8001ae16:	62658593          	addi	a1,a1,1574 # 8002c438 <__func__.28>
    8001ae1a:	00012517          	auipc	a0,0x12
    8001ae1e:	57e50513          	addi	a0,a0,1406 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001ae22:	ec06                	sd	ra,24(sp)
    8001ae24:	e822                	sd	s0,16(sp)
    8001ae26:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ae28:	02e100ef          	jal	8002ae56 <printf>
    8001ae2c:	4529                	li	a0,10
    8001ae2e:	5170e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001ae32:	4511                	li	a0,4
    8001ae34:	8d4e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ae38:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ae3c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ae40:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ae44:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ae48:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ae4c:	10000793          	li	a5,256
    8001ae50:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ae54:	20000793          	li	a5,512
    8001ae58:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ae5c:	40000793          	li	a5,1024
    8001ae60:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ae64:	6785                	lui	a5,0x1
    8001ae66:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ae6a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ae6e:	4785                	li	a5,1
    8001ae70:	07fe                	slli	a5,a5,0x1f
    8001ae72:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ae76:	08100793          	li	a5,129
    8001ae7a:	07e2                	slli	a5,a5,0x18
    8001ae7c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ae80:	08000793          	li	a5,128
    8001ae84:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ae88:	67a1                	lui	a5,0x8
    8001ae8a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ae8e:	450d                	li	a0,3
    8001ae90:	878e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ae94:	f79e50ef          	jal	80000e0c <test_setup_except_function>
    8001ae98:	4785                	li	a5,1
    8001ae9a:	1786                	slli	a5,a5,0x21
    8001ae9c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001aea0:	4701                	li	a4,0
    8001aea2:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001aea6:	08200593          	li	a1,130
    8001aeaa:	00019617          	auipc	a2,0x19
    8001aeae:	d2660613          	addi	a2,a2,-730 # 80033bd0 <__func__.0+0x6b18>
    8001aeb2:	00012517          	auipc	a0,0x12
    8001aeb6:	4fe50513          	addi	a0,a0,1278 # 8002d3b0 <__func__.0+0x2f8>
    8001aeba:	79d0f0ef          	jal	8002ae56 <printf>
    8001aebe:	00039797          	auipc	a5,0x39
    8001aec2:	1537c783          	lbu	a5,339(a5) # 80054011 <excpt+0x1>
    8001aec6:	00039497          	auipc	s1,0x39
    8001aeca:	14a48493          	addi	s1,s1,330 # 80054010 <excpt>
    8001aece:	00012597          	auipc	a1,0x12
    8001aed2:	4ba58593          	addi	a1,a1,1210 # 8002d388 <__func__.0+0x2d0>
    8001aed6:	cf89                	beqz	a5,8001aef0 <store_access_fault_2+0xe0>
    8001aed8:	6498                	ld	a4,8(s1)
    8001aeda:	479d                	li	a5,7
    8001aedc:	00012597          	auipc	a1,0x12
    8001aee0:	49c58593          	addi	a1,a1,1180 # 8002d378 <__func__.0+0x2c0>
    8001aee4:	00f70663          	beq	a4,a5,8001aef0 <store_access_fault_2+0xe0>
    8001aee8:	00012597          	auipc	a1,0x12
    8001aeec:	4a058593          	addi	a1,a1,1184 # 8002d388 <__func__.0+0x2d0>
    8001aef0:	00012517          	auipc	a0,0x12
    8001aef4:	4d850513          	addi	a0,a0,1240 # 8002d3c8 <__func__.0+0x310>
    8001aef8:	75f0f0ef          	jal	8002ae56 <printf>
    8001aefc:	00039797          	auipc	a5,0x39
    8001af00:	1157c783          	lbu	a5,277(a5) # 80054011 <excpt+0x1>
    8001af04:	c789                	beqz	a5,8001af0e <store_access_fault_2+0xfe>
    8001af06:	6498                	ld	a4,8(s1)
    8001af08:	479d                	li	a5,7
    8001af0a:	00f70c63          	beq	a4,a5,8001af22 <store_access_fault_2+0x112>
    8001af0e:	00012517          	auipc	a0,0x12
    8001af12:	4c250513          	addi	a0,a0,1218 # 8002d3d0 <__func__.0+0x318>
    8001af16:	7410f0ef          	jal	8002ae56 <printf>
    8001af1a:	02900513          	li	a0,41
    8001af1e:	4270e0ef          	jal	80029b44 <putchar>
    8001af22:	4529                	li	a0,10
    8001af24:	4210e0ef          	jal	80029b44 <putchar>
    8001af28:	00039417          	auipc	s0,0x39
    8001af2c:	0e944403          	lbu	s0,233(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001af30:	00012597          	auipc	a1,0x12
    8001af34:	45858593          	addi	a1,a1,1112 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af38:	cc11                	beqz	s0,8001af54 <store_access_fault_2+0x144>
    8001af3a:	6498                	ld	a4,8(s1)
    8001af3c:	479d                	li	a5,7
    TEST_END();
    8001af3e:	00012597          	auipc	a1,0x12
    8001af42:	43a58593          	addi	a1,a1,1082 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af46:	00f70763          	beq	a4,a5,8001af54 <store_access_fault_2+0x144>
    8001af4a:	4401                	li	s0,0
    TEST_END();
    8001af4c:	00012597          	auipc	a1,0x12
    8001af50:	43c58593          	addi	a1,a1,1084 # 8002d388 <__func__.0+0x2d0>
    8001af54:	00012517          	auipc	a0,0x12
    8001af58:	4dc50513          	addi	a0,a0,1244 # 8002d430 <__func__.0+0x378>
    8001af5c:	6fb0f0ef          	jal	8002ae56 <printf>
    8001af60:	4511                	li	a0,4
    8001af62:	fa7e50ef          	jal	80000f08 <goto_priv>
    8001af66:	8bfe60ef          	jal	80001824 <reset_state>
}
    8001af6a:	60e2                	ld	ra,24(sp)
    8001af6c:	8522                	mv	a0,s0
    8001af6e:	6442                	ld	s0,16(sp)
    8001af70:	64a2                	ld	s1,8(sp)
    8001af72:	6105                	addi	sp,sp,32
    8001af74:	8082                	ret

000000008001af76 <store_access_fault_3>:


bool store_access_fault_3(){
    8001af76:	1101                	addi	sp,sp,-32

    TEST_START();
    8001af78:	00011597          	auipc	a1,0x11
    8001af7c:	4d858593          	addi	a1,a1,1240 # 8002c450 <__func__.27>
    8001af80:	00012517          	auipc	a0,0x12
    8001af84:	41850513          	addi	a0,a0,1048 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001af88:	ec06                	sd	ra,24(sp)
    8001af8a:	e822                	sd	s0,16(sp)
    8001af8c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001af8e:	6c90f0ef          	jal	8002ae56 <printf>
    8001af92:	4529                	li	a0,10
    8001af94:	3b10e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001af98:	4511                	li	a0,4
    8001af9a:	f6fe50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001af9e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001afa2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001afa6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001afaa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001afae:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001afb2:	10000793          	li	a5,256
    8001afb6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001afba:	20000793          	li	a5,512
    8001afbe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001afc2:	40000793          	li	a5,1024
    8001afc6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001afca:	6785                	lui	a5,0x1
    8001afcc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001afd0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001afd4:	4785                	li	a5,1
    8001afd6:	07fe                	slli	a5,a5,0x1f
    8001afd8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001afdc:	08100793          	li	a5,129
    8001afe0:	07e2                	slli	a5,a5,0x18
    8001afe2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001afe6:	08000793          	li	a5,128
    8001afea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001afee:	67a1                	lui	a5,0x8
    8001aff0:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001aff4:	4505                	li	a0,1
    8001aff6:	f13e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001affa:	e13e50ef          	jal	80000e0c <test_setup_except_function>
    8001affe:	4785                	li	a5,1
    8001b000:	1786                	slli	a5,a5,0x21
    8001b002:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b006:	4701                	li	a4,0
    8001b008:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b00c:	08200593          	li	a1,130
    8001b010:	00019617          	auipc	a2,0x19
    8001b014:	bf860613          	addi	a2,a2,-1032 # 80033c08 <__func__.0+0x6b50>
    8001b018:	00012517          	auipc	a0,0x12
    8001b01c:	39850513          	addi	a0,a0,920 # 8002d3b0 <__func__.0+0x2f8>
    8001b020:	6370f0ef          	jal	8002ae56 <printf>
    8001b024:	00039797          	auipc	a5,0x39
    8001b028:	fed7c783          	lbu	a5,-19(a5) # 80054011 <excpt+0x1>
    8001b02c:	00039497          	auipc	s1,0x39
    8001b030:	fe448493          	addi	s1,s1,-28 # 80054010 <excpt>
    8001b034:	00012597          	auipc	a1,0x12
    8001b038:	35458593          	addi	a1,a1,852 # 8002d388 <__func__.0+0x2d0>
    8001b03c:	cf89                	beqz	a5,8001b056 <store_access_fault_3+0xe0>
    8001b03e:	6498                	ld	a4,8(s1)
    8001b040:	479d                	li	a5,7
    8001b042:	00012597          	auipc	a1,0x12
    8001b046:	33658593          	addi	a1,a1,822 # 8002d378 <__func__.0+0x2c0>
    8001b04a:	00f70663          	beq	a4,a5,8001b056 <store_access_fault_3+0xe0>
    8001b04e:	00012597          	auipc	a1,0x12
    8001b052:	33a58593          	addi	a1,a1,826 # 8002d388 <__func__.0+0x2d0>
    8001b056:	00012517          	auipc	a0,0x12
    8001b05a:	37250513          	addi	a0,a0,882 # 8002d3c8 <__func__.0+0x310>
    8001b05e:	5f90f0ef          	jal	8002ae56 <printf>
    8001b062:	00039797          	auipc	a5,0x39
    8001b066:	faf7c783          	lbu	a5,-81(a5) # 80054011 <excpt+0x1>
    8001b06a:	c789                	beqz	a5,8001b074 <store_access_fault_3+0xfe>
    8001b06c:	6498                	ld	a4,8(s1)
    8001b06e:	479d                	li	a5,7
    8001b070:	00f70c63          	beq	a4,a5,8001b088 <store_access_fault_3+0x112>
    8001b074:	00012517          	auipc	a0,0x12
    8001b078:	35c50513          	addi	a0,a0,860 # 8002d3d0 <__func__.0+0x318>
    8001b07c:	5db0f0ef          	jal	8002ae56 <printf>
    8001b080:	02900513          	li	a0,41
    8001b084:	2c10e0ef          	jal	80029b44 <putchar>
    8001b088:	4529                	li	a0,10
    8001b08a:	2bb0e0ef          	jal	80029b44 <putchar>
    8001b08e:	00039417          	auipc	s0,0x39
    8001b092:	f8344403          	lbu	s0,-125(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b096:	00012597          	auipc	a1,0x12
    8001b09a:	2f258593          	addi	a1,a1,754 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b09e:	cc11                	beqz	s0,8001b0ba <store_access_fault_3+0x144>
    8001b0a0:	6498                	ld	a4,8(s1)
    8001b0a2:	479d                	li	a5,7
    TEST_END();
    8001b0a4:	00012597          	auipc	a1,0x12
    8001b0a8:	2d458593          	addi	a1,a1,724 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b0ac:	00f70763          	beq	a4,a5,8001b0ba <store_access_fault_3+0x144>
    8001b0b0:	4401                	li	s0,0
    TEST_END();
    8001b0b2:	00012597          	auipc	a1,0x12
    8001b0b6:	2d658593          	addi	a1,a1,726 # 8002d388 <__func__.0+0x2d0>
    8001b0ba:	00012517          	auipc	a0,0x12
    8001b0be:	37650513          	addi	a0,a0,886 # 8002d430 <__func__.0+0x378>
    8001b0c2:	5950f0ef          	jal	8002ae56 <printf>
    8001b0c6:	4511                	li	a0,4
    8001b0c8:	e41e50ef          	jal	80000f08 <goto_priv>
    8001b0cc:	f58e60ef          	jal	80001824 <reset_state>
}
    8001b0d0:	60e2                	ld	ra,24(sp)
    8001b0d2:	8522                	mv	a0,s0
    8001b0d4:	6442                	ld	s0,16(sp)
    8001b0d6:	64a2                	ld	s1,8(sp)
    8001b0d8:	6105                	addi	sp,sp,32
    8001b0da:	8082                	ret

000000008001b0dc <store_access_fault_4>:

bool store_access_fault_4(){
    8001b0dc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b0de:	00011597          	auipc	a1,0x11
    8001b0e2:	38a58593          	addi	a1,a1,906 # 8002c468 <__func__.26>
    8001b0e6:	00012517          	auipc	a0,0x12
    8001b0ea:	2b250513          	addi	a0,a0,690 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001b0ee:	ec06                	sd	ra,24(sp)
    8001b0f0:	e822                	sd	s0,16(sp)
    8001b0f2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b0f4:	5630f0ef          	jal	8002ae56 <printf>
    8001b0f8:	4529                	li	a0,10
    8001b0fa:	24b0e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b0fe:	4511                	li	a0,4
    8001b100:	e09e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b104:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b108:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b10c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b110:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b114:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b118:	10000793          	li	a5,256
    8001b11c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b120:	20000793          	li	a5,512
    8001b124:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b128:	40000793          	li	a5,1024
    8001b12c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b130:	6785                	lui	a5,0x1
    8001b132:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b136:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b13a:	4785                	li	a5,1
    8001b13c:	07fe                	slli	a5,a5,0x1f
    8001b13e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b142:	08100793          	li	a5,129
    8001b146:	07e2                	slli	a5,a5,0x18
    8001b148:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b14c:	08000793          	li	a5,128
    8001b150:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b154:	67a1                	lui	a5,0x8
    8001b156:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b15a:	4501                	li	a0,0
    8001b15c:	dade50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b160:	cade50ef          	jal	80000e0c <test_setup_except_function>
    8001b164:	4785                	li	a5,1
    8001b166:	1786                	slli	a5,a5,0x21
    8001b168:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b16c:	4701                	li	a4,0
    8001b16e:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b172:	08200593          	li	a1,130
    8001b176:	00019617          	auipc	a2,0x19
    8001b17a:	aca60613          	addi	a2,a2,-1334 # 80033c40 <__func__.0+0x6b88>
    8001b17e:	00012517          	auipc	a0,0x12
    8001b182:	23250513          	addi	a0,a0,562 # 8002d3b0 <__func__.0+0x2f8>
    8001b186:	4d10f0ef          	jal	8002ae56 <printf>
    8001b18a:	00039797          	auipc	a5,0x39
    8001b18e:	e877c783          	lbu	a5,-377(a5) # 80054011 <excpt+0x1>
    8001b192:	00039497          	auipc	s1,0x39
    8001b196:	e7e48493          	addi	s1,s1,-386 # 80054010 <excpt>
    8001b19a:	00012597          	auipc	a1,0x12
    8001b19e:	1ee58593          	addi	a1,a1,494 # 8002d388 <__func__.0+0x2d0>
    8001b1a2:	cf89                	beqz	a5,8001b1bc <store_access_fault_4+0xe0>
    8001b1a4:	6498                	ld	a4,8(s1)
    8001b1a6:	479d                	li	a5,7
    8001b1a8:	00012597          	auipc	a1,0x12
    8001b1ac:	1d058593          	addi	a1,a1,464 # 8002d378 <__func__.0+0x2c0>
    8001b1b0:	00f70663          	beq	a4,a5,8001b1bc <store_access_fault_4+0xe0>
    8001b1b4:	00012597          	auipc	a1,0x12
    8001b1b8:	1d458593          	addi	a1,a1,468 # 8002d388 <__func__.0+0x2d0>
    8001b1bc:	00012517          	auipc	a0,0x12
    8001b1c0:	20c50513          	addi	a0,a0,524 # 8002d3c8 <__func__.0+0x310>
    8001b1c4:	4930f0ef          	jal	8002ae56 <printf>
    8001b1c8:	00039797          	auipc	a5,0x39
    8001b1cc:	e497c783          	lbu	a5,-439(a5) # 80054011 <excpt+0x1>
    8001b1d0:	c789                	beqz	a5,8001b1da <store_access_fault_4+0xfe>
    8001b1d2:	6498                	ld	a4,8(s1)
    8001b1d4:	479d                	li	a5,7
    8001b1d6:	00f70c63          	beq	a4,a5,8001b1ee <store_access_fault_4+0x112>
    8001b1da:	00012517          	auipc	a0,0x12
    8001b1de:	1f650513          	addi	a0,a0,502 # 8002d3d0 <__func__.0+0x318>
    8001b1e2:	4750f0ef          	jal	8002ae56 <printf>
    8001b1e6:	02900513          	li	a0,41
    8001b1ea:	15b0e0ef          	jal	80029b44 <putchar>
    8001b1ee:	4529                	li	a0,10
    8001b1f0:	1550e0ef          	jal	80029b44 <putchar>
    8001b1f4:	00039417          	auipc	s0,0x39
    8001b1f8:	e1d44403          	lbu	s0,-483(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b1fc:	00012597          	auipc	a1,0x12
    8001b200:	18c58593          	addi	a1,a1,396 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b204:	cc11                	beqz	s0,8001b220 <store_access_fault_4+0x144>
    8001b206:	6498                	ld	a4,8(s1)
    8001b208:	479d                	li	a5,7
    TEST_END();
    8001b20a:	00012597          	auipc	a1,0x12
    8001b20e:	16e58593          	addi	a1,a1,366 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b212:	00f70763          	beq	a4,a5,8001b220 <store_access_fault_4+0x144>
    8001b216:	4401                	li	s0,0
    TEST_END();
    8001b218:	00012597          	auipc	a1,0x12
    8001b21c:	17058593          	addi	a1,a1,368 # 8002d388 <__func__.0+0x2d0>
    8001b220:	00012517          	auipc	a0,0x12
    8001b224:	21050513          	addi	a0,a0,528 # 8002d430 <__func__.0+0x378>
    8001b228:	42f0f0ef          	jal	8002ae56 <printf>
    8001b22c:	4511                	li	a0,4
    8001b22e:	cdbe50ef          	jal	80000f08 <goto_priv>
    8001b232:	df2e60ef          	jal	80001824 <reset_state>
}
    8001b236:	60e2                	ld	ra,24(sp)
    8001b238:	8522                	mv	a0,s0
    8001b23a:	6442                	ld	s0,16(sp)
    8001b23c:	64a2                	ld	s1,8(sp)
    8001b23e:	6105                	addi	sp,sp,32
    8001b240:	8082                	ret

000000008001b242 <store_access_fault_5>:

bool store_access_fault_5(){
    8001b242:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b244:	00011597          	auipc	a1,0x11
    8001b248:	23c58593          	addi	a1,a1,572 # 8002c480 <__func__.25>
    8001b24c:	00012517          	auipc	a0,0x12
    8001b250:	14c50513          	addi	a0,a0,332 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001b254:	e406                	sd	ra,8(sp)
    8001b256:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b258:	3ff0f0ef          	jal	8002ae56 <printf>
    8001b25c:	4529                	li	a0,10
    8001b25e:	0e70e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b262:	4511                	li	a0,4
    8001b264:	ca5e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b268:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b26c:	10000793          	li	a5,256
    8001b270:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b274:	20000793          	li	a5,512
    8001b278:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b27c:	40000793          	li	a5,1024
    8001b280:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b284:	6785                	lui	a5,0x1
    8001b286:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b28a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b28e:	4785                	li	a5,1
    8001b290:	07fe                	slli	a5,a5,0x1f
    8001b292:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b296:	08100793          	li	a5,129
    8001b29a:	07e2                	slli	a5,a5,0x18
    8001b29c:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b2a0:	67a1                	lui	a5,0x8
    8001b2a2:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b2a6:	b67e50ef          	jal	80000e0c <test_setup_except_function>
    8001b2aa:	4785                	li	a5,1
    8001b2ac:	1786                	slli	a5,a5,0x21
    8001b2ae:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b2b2:	4701                	li	a4,0
    8001b2b4:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001b2b8:	00039597          	auipc	a1,0x39
    8001b2bc:	d595c583          	lbu	a1,-679(a1) # 80054011 <excpt+0x1>
    8001b2c0:	00013517          	auipc	a0,0x13
    8001b2c4:	c6050513          	addi	a0,a0,-928 # 8002df20 <__func__.0+0xe68>
    8001b2c8:	38f0f0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001b2cc:	00039597          	auipc	a1,0x39
    8001b2d0:	d4c5b583          	ld	a1,-692(a1) # 80054018 <excpt+0x8>
    8001b2d4:	00013517          	auipc	a0,0x13
    8001b2d8:	c4c50513          	addi	a0,a0,-948 # 8002df20 <__func__.0+0xe68>
    8001b2dc:	37b0f0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2e0:	08200593          	li	a1,130
    8001b2e4:	00019617          	auipc	a2,0x19
    8001b2e8:	99460613          	addi	a2,a2,-1644 # 80033c78 <__func__.0+0x6bc0>
    8001b2ec:	00012517          	auipc	a0,0x12
    8001b2f0:	0c450513          	addi	a0,a0,196 # 8002d3b0 <__func__.0+0x2f8>
    8001b2f4:	3630f0ef          	jal	8002ae56 <printf>
    8001b2f8:	00039797          	auipc	a5,0x39
    8001b2fc:	d197c783          	lbu	a5,-743(a5) # 80054011 <excpt+0x1>
    8001b300:	00012597          	auipc	a1,0x12
    8001b304:	07858593          	addi	a1,a1,120 # 8002d378 <__func__.0+0x2c0>
    8001b308:	c789                	beqz	a5,8001b312 <store_access_fault_5+0xd0>
    8001b30a:	00012597          	auipc	a1,0x12
    8001b30e:	07e58593          	addi	a1,a1,126 # 8002d388 <__func__.0+0x2d0>
    8001b312:	00012517          	auipc	a0,0x12
    8001b316:	0b650513          	addi	a0,a0,182 # 8002d3c8 <__func__.0+0x310>
    8001b31a:	33d0f0ef          	jal	8002ae56 <printf>
    8001b31e:	00039797          	auipc	a5,0x39
    8001b322:	cf37c783          	lbu	a5,-781(a5) # 80054011 <excpt+0x1>
    8001b326:	e7a1                	bnez	a5,8001b36e <store_access_fault_5+0x12c>
    8001b328:	4529                	li	a0,10
    8001b32a:	01b0e0ef          	jal	80029b44 <putchar>
    8001b32e:	00039797          	auipc	a5,0x39
    8001b332:	ce37c783          	lbu	a5,-797(a5) # 80054011 <excpt+0x1>
    8001b336:	e795                	bnez	a5,8001b362 <store_access_fault_5+0x120>
    8001b338:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b33a:	00012597          	auipc	a1,0x12
    8001b33e:	03e58593          	addi	a1,a1,62 # 8002d378 <__func__.0+0x2c0>
    8001b342:	00012517          	auipc	a0,0x12
    8001b346:	0ee50513          	addi	a0,a0,238 # 8002d430 <__func__.0+0x378>
    8001b34a:	30d0f0ef          	jal	8002ae56 <printf>
    8001b34e:	4511                	li	a0,4
    8001b350:	bb9e50ef          	jal	80000f08 <goto_priv>
    8001b354:	cd0e60ef          	jal	80001824 <reset_state>
}
    8001b358:	60a2                	ld	ra,8(sp)
    8001b35a:	8522                	mv	a0,s0
    8001b35c:	6402                	ld	s0,0(sp)
    8001b35e:	0141                	addi	sp,sp,16
    8001b360:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b362:	4401                	li	s0,0
    TEST_END();
    8001b364:	00012597          	auipc	a1,0x12
    8001b368:	02458593          	addi	a1,a1,36 # 8002d388 <__func__.0+0x2d0>
    8001b36c:	bfd9                	j	8001b342 <store_access_fault_5+0x100>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b36e:	00012517          	auipc	a0,0x12
    8001b372:	06250513          	addi	a0,a0,98 # 8002d3d0 <__func__.0+0x318>
    8001b376:	2e10f0ef          	jal	8002ae56 <printf>
    8001b37a:	02900513          	li	a0,41
    8001b37e:	7c60e0ef          	jal	80029b44 <putchar>
    8001b382:	b75d                	j	8001b328 <store_access_fault_5+0xe6>

000000008001b384 <store_access_fault_6>:


bool store_access_fault_6(){
    8001b384:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b386:	00011597          	auipc	a1,0x11
    8001b38a:	11258593          	addi	a1,a1,274 # 8002c498 <__func__.24>
    8001b38e:	00012517          	auipc	a0,0x12
    8001b392:	00a50513          	addi	a0,a0,10 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001b396:	ec06                	sd	ra,24(sp)
    8001b398:	e822                	sd	s0,16(sp)
    8001b39a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b39c:	2bb0f0ef          	jal	8002ae56 <printf>
    8001b3a0:	4529                	li	a0,10
    8001b3a2:	7a20e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b3a6:	4511                	li	a0,4
    8001b3a8:	b61e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b3ac:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b3b0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b3b4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b3b8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b3bc:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b3c0:	10000793          	li	a5,256
    8001b3c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b3c8:	20000793          	li	a5,512
    8001b3cc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b3d0:	40000793          	li	a5,1024
    8001b3d4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b3d8:	6785                	lui	a5,0x1
    8001b3da:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b3de:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b3e2:	4785                	li	a5,1
    8001b3e4:	07fe                	slli	a5,a5,0x1f
    8001b3e6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b3ea:	08100793          	li	a5,129
    8001b3ee:	07e2                	slli	a5,a5,0x18
    8001b3f0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b3f4:	08000793          	li	a5,128
    8001b3f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b3fc:	67a1                	lui	a5,0x8
    8001b3fe:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b402:	450d                	li	a0,3
    8001b404:	b05e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b408:	a05e50ef          	jal	80000e0c <test_setup_except_function>
    8001b40c:	4785                	li	a5,1
    8001b40e:	1786                	slli	a5,a5,0x21
    8001b410:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b414:	4701                	li	a4,0
    8001b416:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b41a:	08200593          	li	a1,130
    8001b41e:	00019617          	auipc	a2,0x19
    8001b422:	89260613          	addi	a2,a2,-1902 # 80033cb0 <__func__.0+0x6bf8>
    8001b426:	00012517          	auipc	a0,0x12
    8001b42a:	f8a50513          	addi	a0,a0,-118 # 8002d3b0 <__func__.0+0x2f8>
    8001b42e:	2290f0ef          	jal	8002ae56 <printf>
    8001b432:	00039797          	auipc	a5,0x39
    8001b436:	bdf7c783          	lbu	a5,-1057(a5) # 80054011 <excpt+0x1>
    8001b43a:	00039497          	auipc	s1,0x39
    8001b43e:	bd648493          	addi	s1,s1,-1066 # 80054010 <excpt>
    8001b442:	00012597          	auipc	a1,0x12
    8001b446:	f4658593          	addi	a1,a1,-186 # 8002d388 <__func__.0+0x2d0>
    8001b44a:	cf89                	beqz	a5,8001b464 <store_access_fault_6+0xe0>
    8001b44c:	6498                	ld	a4,8(s1)
    8001b44e:	479d                	li	a5,7
    8001b450:	00012597          	auipc	a1,0x12
    8001b454:	f2858593          	addi	a1,a1,-216 # 8002d378 <__func__.0+0x2c0>
    8001b458:	00f70663          	beq	a4,a5,8001b464 <store_access_fault_6+0xe0>
    8001b45c:	00012597          	auipc	a1,0x12
    8001b460:	f2c58593          	addi	a1,a1,-212 # 8002d388 <__func__.0+0x2d0>
    8001b464:	00012517          	auipc	a0,0x12
    8001b468:	f6450513          	addi	a0,a0,-156 # 8002d3c8 <__func__.0+0x310>
    8001b46c:	1eb0f0ef          	jal	8002ae56 <printf>
    8001b470:	00039797          	auipc	a5,0x39
    8001b474:	ba17c783          	lbu	a5,-1119(a5) # 80054011 <excpt+0x1>
    8001b478:	c789                	beqz	a5,8001b482 <store_access_fault_6+0xfe>
    8001b47a:	6498                	ld	a4,8(s1)
    8001b47c:	479d                	li	a5,7
    8001b47e:	00f70c63          	beq	a4,a5,8001b496 <store_access_fault_6+0x112>
    8001b482:	00012517          	auipc	a0,0x12
    8001b486:	f4e50513          	addi	a0,a0,-178 # 8002d3d0 <__func__.0+0x318>
    8001b48a:	1cd0f0ef          	jal	8002ae56 <printf>
    8001b48e:	02900513          	li	a0,41
    8001b492:	6b20e0ef          	jal	80029b44 <putchar>
    8001b496:	4529                	li	a0,10
    8001b498:	6ac0e0ef          	jal	80029b44 <putchar>
    8001b49c:	00039417          	auipc	s0,0x39
    8001b4a0:	b7544403          	lbu	s0,-1163(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b4a4:	00012597          	auipc	a1,0x12
    8001b4a8:	ee458593          	addi	a1,a1,-284 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4ac:	cc11                	beqz	s0,8001b4c8 <store_access_fault_6+0x144>
    8001b4ae:	6498                	ld	a4,8(s1)
    8001b4b0:	479d                	li	a5,7
    TEST_END();
    8001b4b2:	00012597          	auipc	a1,0x12
    8001b4b6:	ec658593          	addi	a1,a1,-314 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4ba:	00f70763          	beq	a4,a5,8001b4c8 <store_access_fault_6+0x144>
    8001b4be:	4401                	li	s0,0
    TEST_END();
    8001b4c0:	00012597          	auipc	a1,0x12
    8001b4c4:	ec858593          	addi	a1,a1,-312 # 8002d388 <__func__.0+0x2d0>
    8001b4c8:	00012517          	auipc	a0,0x12
    8001b4cc:	f6850513          	addi	a0,a0,-152 # 8002d430 <__func__.0+0x378>
    8001b4d0:	1870f0ef          	jal	8002ae56 <printf>
    8001b4d4:	4511                	li	a0,4
    8001b4d6:	a33e50ef          	jal	80000f08 <goto_priv>
    8001b4da:	b4ae60ef          	jal	80001824 <reset_state>
}
    8001b4de:	60e2                	ld	ra,24(sp)
    8001b4e0:	8522                	mv	a0,s0
    8001b4e2:	6442                	ld	s0,16(sp)
    8001b4e4:	64a2                	ld	s1,8(sp)
    8001b4e6:	6105                	addi	sp,sp,32
    8001b4e8:	8082                	ret

000000008001b4ea <store_access_fault_7>:


bool store_access_fault_7(){
    8001b4ea:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b4ec:	00011597          	auipc	a1,0x11
    8001b4f0:	fc458593          	addi	a1,a1,-60 # 8002c4b0 <__func__.23>
    8001b4f4:	00012517          	auipc	a0,0x12
    8001b4f8:	ea450513          	addi	a0,a0,-348 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001b4fc:	ec06                	sd	ra,24(sp)
    8001b4fe:	e822                	sd	s0,16(sp)
    8001b500:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b502:	1550f0ef          	jal	8002ae56 <printf>
    8001b506:	4529                	li	a0,10
    8001b508:	63c0e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b50c:	4511                	li	a0,4
    8001b50e:	9fbe50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b512:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b516:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b51a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b51e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b522:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b526:	10000793          	li	a5,256
    8001b52a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b52e:	20000793          	li	a5,512
    8001b532:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b536:	40000793          	li	a5,1024
    8001b53a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b53e:	6785                	lui	a5,0x1
    8001b540:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b544:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b548:	4785                	li	a5,1
    8001b54a:	07fe                	slli	a5,a5,0x1f
    8001b54c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b550:	08100793          	li	a5,129
    8001b554:	07e2                	slli	a5,a5,0x18
    8001b556:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b55a:	08000793          	li	a5,128
    8001b55e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b562:	67a1                	lui	a5,0x8
    8001b564:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b568:	4505                	li	a0,1
    8001b56a:	99fe50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b56e:	89fe50ef          	jal	80000e0c <test_setup_except_function>
    8001b572:	4785                	li	a5,1
    8001b574:	1786                	slli	a5,a5,0x21
    8001b576:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b57a:	4701                	li	a4,0
    8001b57c:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b580:	08200593          	li	a1,130
    8001b584:	00018617          	auipc	a2,0x18
    8001b588:	76460613          	addi	a2,a2,1892 # 80033ce8 <__func__.0+0x6c30>
    8001b58c:	00012517          	auipc	a0,0x12
    8001b590:	e2450513          	addi	a0,a0,-476 # 8002d3b0 <__func__.0+0x2f8>
    8001b594:	0c30f0ef          	jal	8002ae56 <printf>
    8001b598:	00039797          	auipc	a5,0x39
    8001b59c:	a797c783          	lbu	a5,-1415(a5) # 80054011 <excpt+0x1>
    8001b5a0:	00039497          	auipc	s1,0x39
    8001b5a4:	a7048493          	addi	s1,s1,-1424 # 80054010 <excpt>
    8001b5a8:	00012597          	auipc	a1,0x12
    8001b5ac:	de058593          	addi	a1,a1,-544 # 8002d388 <__func__.0+0x2d0>
    8001b5b0:	cf89                	beqz	a5,8001b5ca <store_access_fault_7+0xe0>
    8001b5b2:	6498                	ld	a4,8(s1)
    8001b5b4:	479d                	li	a5,7
    8001b5b6:	00012597          	auipc	a1,0x12
    8001b5ba:	dc258593          	addi	a1,a1,-574 # 8002d378 <__func__.0+0x2c0>
    8001b5be:	00f70663          	beq	a4,a5,8001b5ca <store_access_fault_7+0xe0>
    8001b5c2:	00012597          	auipc	a1,0x12
    8001b5c6:	dc658593          	addi	a1,a1,-570 # 8002d388 <__func__.0+0x2d0>
    8001b5ca:	00012517          	auipc	a0,0x12
    8001b5ce:	dfe50513          	addi	a0,a0,-514 # 8002d3c8 <__func__.0+0x310>
    8001b5d2:	0850f0ef          	jal	8002ae56 <printf>
    8001b5d6:	00039797          	auipc	a5,0x39
    8001b5da:	a3b7c783          	lbu	a5,-1477(a5) # 80054011 <excpt+0x1>
    8001b5de:	c789                	beqz	a5,8001b5e8 <store_access_fault_7+0xfe>
    8001b5e0:	6498                	ld	a4,8(s1)
    8001b5e2:	479d                	li	a5,7
    8001b5e4:	00f70c63          	beq	a4,a5,8001b5fc <store_access_fault_7+0x112>
    8001b5e8:	00012517          	auipc	a0,0x12
    8001b5ec:	de850513          	addi	a0,a0,-536 # 8002d3d0 <__func__.0+0x318>
    8001b5f0:	0670f0ef          	jal	8002ae56 <printf>
    8001b5f4:	02900513          	li	a0,41
    8001b5f8:	54c0e0ef          	jal	80029b44 <putchar>
    8001b5fc:	4529                	li	a0,10
    8001b5fe:	5460e0ef          	jal	80029b44 <putchar>
    8001b602:	00039417          	auipc	s0,0x39
    8001b606:	a0f44403          	lbu	s0,-1521(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b60a:	00012597          	auipc	a1,0x12
    8001b60e:	d7e58593          	addi	a1,a1,-642 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b612:	cc11                	beqz	s0,8001b62e <store_access_fault_7+0x144>
    8001b614:	6498                	ld	a4,8(s1)
    8001b616:	479d                	li	a5,7
    TEST_END();
    8001b618:	00012597          	auipc	a1,0x12
    8001b61c:	d6058593          	addi	a1,a1,-672 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b620:	00f70763          	beq	a4,a5,8001b62e <store_access_fault_7+0x144>
    8001b624:	4401                	li	s0,0
    TEST_END();
    8001b626:	00012597          	auipc	a1,0x12
    8001b62a:	d6258593          	addi	a1,a1,-670 # 8002d388 <__func__.0+0x2d0>
    8001b62e:	00012517          	auipc	a0,0x12
    8001b632:	e0250513          	addi	a0,a0,-510 # 8002d430 <__func__.0+0x378>
    8001b636:	0210f0ef          	jal	8002ae56 <printf>
    8001b63a:	4511                	li	a0,4
    8001b63c:	8cde50ef          	jal	80000f08 <goto_priv>
    8001b640:	9e4e60ef          	jal	80001824 <reset_state>
}
    8001b644:	60e2                	ld	ra,24(sp)
    8001b646:	8522                	mv	a0,s0
    8001b648:	6442                	ld	s0,16(sp)
    8001b64a:	64a2                	ld	s1,8(sp)
    8001b64c:	6105                	addi	sp,sp,32
    8001b64e:	8082                	ret

000000008001b650 <store_access_fault_8>:

bool store_access_fault_8(){
    8001b650:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b652:	00011597          	auipc	a1,0x11
    8001b656:	e7658593          	addi	a1,a1,-394 # 8002c4c8 <__func__.22>
    8001b65a:	00012517          	auipc	a0,0x12
    8001b65e:	d3e50513          	addi	a0,a0,-706 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001b662:	ec06                	sd	ra,24(sp)
    8001b664:	e822                	sd	s0,16(sp)
    8001b666:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b668:	7ee0f0ef          	jal	8002ae56 <printf>
    8001b66c:	4529                	li	a0,10
    8001b66e:	4d60e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b672:	4511                	li	a0,4
    8001b674:	895e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b678:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b67c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b680:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b684:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b688:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b68c:	10000793          	li	a5,256
    8001b690:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b694:	20000793          	li	a5,512
    8001b698:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b69c:	40000793          	li	a5,1024
    8001b6a0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b6a4:	6785                	lui	a5,0x1
    8001b6a6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b6aa:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b6ae:	4785                	li	a5,1
    8001b6b0:	07fe                	slli	a5,a5,0x1f
    8001b6b2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b6b6:	08100793          	li	a5,129
    8001b6ba:	07e2                	slli	a5,a5,0x18
    8001b6bc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b6c0:	08000793          	li	a5,128
    8001b6c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b6c8:	67a1                	lui	a5,0x8
    8001b6ca:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b6ce:	4501                	li	a0,0
    8001b6d0:	839e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b6d4:	f38e50ef          	jal	80000e0c <test_setup_except_function>
    8001b6d8:	4785                	li	a5,1
    8001b6da:	1786                	slli	a5,a5,0x21
    8001b6dc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b6e0:	4701                	li	a4,0
    8001b6e2:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6e6:	08200593          	li	a1,130
    8001b6ea:	00018617          	auipc	a2,0x18
    8001b6ee:	63660613          	addi	a2,a2,1590 # 80033d20 <__func__.0+0x6c68>
    8001b6f2:	00012517          	auipc	a0,0x12
    8001b6f6:	cbe50513          	addi	a0,a0,-834 # 8002d3b0 <__func__.0+0x2f8>
    8001b6fa:	75c0f0ef          	jal	8002ae56 <printf>
    8001b6fe:	00039797          	auipc	a5,0x39
    8001b702:	9137c783          	lbu	a5,-1773(a5) # 80054011 <excpt+0x1>
    8001b706:	00039497          	auipc	s1,0x39
    8001b70a:	90a48493          	addi	s1,s1,-1782 # 80054010 <excpt>
    8001b70e:	00012597          	auipc	a1,0x12
    8001b712:	c7a58593          	addi	a1,a1,-902 # 8002d388 <__func__.0+0x2d0>
    8001b716:	cf89                	beqz	a5,8001b730 <store_access_fault_8+0xe0>
    8001b718:	6498                	ld	a4,8(s1)
    8001b71a:	479d                	li	a5,7
    8001b71c:	00012597          	auipc	a1,0x12
    8001b720:	c5c58593          	addi	a1,a1,-932 # 8002d378 <__func__.0+0x2c0>
    8001b724:	00f70663          	beq	a4,a5,8001b730 <store_access_fault_8+0xe0>
    8001b728:	00012597          	auipc	a1,0x12
    8001b72c:	c6058593          	addi	a1,a1,-928 # 8002d388 <__func__.0+0x2d0>
    8001b730:	00012517          	auipc	a0,0x12
    8001b734:	c9850513          	addi	a0,a0,-872 # 8002d3c8 <__func__.0+0x310>
    8001b738:	71e0f0ef          	jal	8002ae56 <printf>
    8001b73c:	00039797          	auipc	a5,0x39
    8001b740:	8d57c783          	lbu	a5,-1835(a5) # 80054011 <excpt+0x1>
    8001b744:	c789                	beqz	a5,8001b74e <store_access_fault_8+0xfe>
    8001b746:	6498                	ld	a4,8(s1)
    8001b748:	479d                	li	a5,7
    8001b74a:	00f70c63          	beq	a4,a5,8001b762 <store_access_fault_8+0x112>
    8001b74e:	00012517          	auipc	a0,0x12
    8001b752:	c8250513          	addi	a0,a0,-894 # 8002d3d0 <__func__.0+0x318>
    8001b756:	7000f0ef          	jal	8002ae56 <printf>
    8001b75a:	02900513          	li	a0,41
    8001b75e:	3e60e0ef          	jal	80029b44 <putchar>
    8001b762:	4529                	li	a0,10
    8001b764:	3e00e0ef          	jal	80029b44 <putchar>
    8001b768:	00039417          	auipc	s0,0x39
    8001b76c:	8a944403          	lbu	s0,-1879(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b770:	00012597          	auipc	a1,0x12
    8001b774:	c1858593          	addi	a1,a1,-1000 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b778:	cc11                	beqz	s0,8001b794 <store_access_fault_8+0x144>
    8001b77a:	6498                	ld	a4,8(s1)
    8001b77c:	479d                	li	a5,7
    TEST_END();
    8001b77e:	00012597          	auipc	a1,0x12
    8001b782:	bfa58593          	addi	a1,a1,-1030 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b786:	00f70763          	beq	a4,a5,8001b794 <store_access_fault_8+0x144>
    8001b78a:	4401                	li	s0,0
    TEST_END();
    8001b78c:	00012597          	auipc	a1,0x12
    8001b790:	bfc58593          	addi	a1,a1,-1028 # 8002d388 <__func__.0+0x2d0>
    8001b794:	00012517          	auipc	a0,0x12
    8001b798:	c9c50513          	addi	a0,a0,-868 # 8002d430 <__func__.0+0x378>
    8001b79c:	6ba0f0ef          	jal	8002ae56 <printf>
    8001b7a0:	4511                	li	a0,4
    8001b7a2:	f66e50ef          	jal	80000f08 <goto_priv>
    8001b7a6:	87ee60ef          	jal	80001824 <reset_state>
}
    8001b7aa:	60e2                	ld	ra,24(sp)
    8001b7ac:	8522                	mv	a0,s0
    8001b7ae:	6442                	ld	s0,16(sp)
    8001b7b0:	64a2                	ld	s1,8(sp)
    8001b7b2:	6105                	addi	sp,sp,32
    8001b7b4:	8082                	ret

000000008001b7b6 <store_access_fault_9>:

bool store_access_fault_9(){
    8001b7b6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b7b8:	00011597          	auipc	a1,0x11
    8001b7bc:	d2858593          	addi	a1,a1,-728 # 8002c4e0 <__func__.21>
    8001b7c0:	00012517          	auipc	a0,0x12
    8001b7c4:	bd850513          	addi	a0,a0,-1064 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001b7c8:	ec06                	sd	ra,24(sp)
    8001b7ca:	e822                	sd	s0,16(sp)
    8001b7cc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b7ce:	6880f0ef          	jal	8002ae56 <printf>
    8001b7d2:	4529                	li	a0,10
    8001b7d4:	3700e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b7d8:	4511                	li	a0,4
    8001b7da:	f2ee50ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b7de:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b7e2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b7e6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b7ea:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b7ee:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b7f2:	10000793          	li	a5,256
    8001b7f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b7fa:	20000793          	li	a5,512
    8001b7fe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b802:	40000793          	li	a5,1024
    8001b806:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b80a:	6785                	lui	a5,0x1
    8001b80c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b810:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b814:	4785                	li	a5,1
    8001b816:	07fe                	slli	a5,a5,0x1f
    8001b818:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b81c:	08100793          	li	a5,129
    8001b820:	07e2                	slli	a5,a5,0x18
    8001b822:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b826:	08000793          	li	a5,128
    8001b82a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b82e:	67a1                	lui	a5,0x8
    8001b830:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b834:	4501                	li	a0,0
    8001b836:	ed2e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b83a:	dd2e50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001b83e:	37ab77b7          	lui	a5,0x37ab7
    8001b842:	4705                	li	a4,1
    8001b844:	078a                	slli	a5,a5,0x2
    8001b846:	170e                	slli	a4,a4,0x23
    8001b848:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b84c:	1761                	addi	a4,a4,-8
    8001b84e:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b852:	08200593          	li	a1,130
    8001b856:	00018617          	auipc	a2,0x18
    8001b85a:	50260613          	addi	a2,a2,1282 # 80033d58 <__func__.0+0x6ca0>
    8001b85e:	00012517          	auipc	a0,0x12
    8001b862:	b5250513          	addi	a0,a0,-1198 # 8002d3b0 <__func__.0+0x2f8>
    8001b866:	5f00f0ef          	jal	8002ae56 <printf>
    8001b86a:	00038797          	auipc	a5,0x38
    8001b86e:	7a77c783          	lbu	a5,1959(a5) # 80054011 <excpt+0x1>
    8001b872:	00038497          	auipc	s1,0x38
    8001b876:	79e48493          	addi	s1,s1,1950 # 80054010 <excpt>
    8001b87a:	00012597          	auipc	a1,0x12
    8001b87e:	b0e58593          	addi	a1,a1,-1266 # 8002d388 <__func__.0+0x2d0>
    8001b882:	cf89                	beqz	a5,8001b89c <store_access_fault_9+0xe6>
    8001b884:	6498                	ld	a4,8(s1)
    8001b886:	479d                	li	a5,7
    8001b888:	00012597          	auipc	a1,0x12
    8001b88c:	af058593          	addi	a1,a1,-1296 # 8002d378 <__func__.0+0x2c0>
    8001b890:	00f70663          	beq	a4,a5,8001b89c <store_access_fault_9+0xe6>
    8001b894:	00012597          	auipc	a1,0x12
    8001b898:	af458593          	addi	a1,a1,-1292 # 8002d388 <__func__.0+0x2d0>
    8001b89c:	00012517          	auipc	a0,0x12
    8001b8a0:	b2c50513          	addi	a0,a0,-1236 # 8002d3c8 <__func__.0+0x310>
    8001b8a4:	5b20f0ef          	jal	8002ae56 <printf>
    8001b8a8:	00038797          	auipc	a5,0x38
    8001b8ac:	7697c783          	lbu	a5,1897(a5) # 80054011 <excpt+0x1>
    8001b8b0:	c789                	beqz	a5,8001b8ba <store_access_fault_9+0x104>
    8001b8b2:	6498                	ld	a4,8(s1)
    8001b8b4:	479d                	li	a5,7
    8001b8b6:	00f70c63          	beq	a4,a5,8001b8ce <store_access_fault_9+0x118>
    8001b8ba:	00012517          	auipc	a0,0x12
    8001b8be:	b1650513          	addi	a0,a0,-1258 # 8002d3d0 <__func__.0+0x318>
    8001b8c2:	5940f0ef          	jal	8002ae56 <printf>
    8001b8c6:	02900513          	li	a0,41
    8001b8ca:	27a0e0ef          	jal	80029b44 <putchar>
    8001b8ce:	4529                	li	a0,10
    8001b8d0:	2740e0ef          	jal	80029b44 <putchar>
    8001b8d4:	00038417          	auipc	s0,0x38
    8001b8d8:	73d44403          	lbu	s0,1853(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b8dc:	00012597          	auipc	a1,0x12
    8001b8e0:	aac58593          	addi	a1,a1,-1364 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b8e4:	cc11                	beqz	s0,8001b900 <store_access_fault_9+0x14a>
    8001b8e6:	6498                	ld	a4,8(s1)
    8001b8e8:	479d                	li	a5,7
    TEST_END();
    8001b8ea:	00012597          	auipc	a1,0x12
    8001b8ee:	a8e58593          	addi	a1,a1,-1394 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b8f2:	00f70763          	beq	a4,a5,8001b900 <store_access_fault_9+0x14a>
    8001b8f6:	4401                	li	s0,0
    TEST_END();
    8001b8f8:	00012597          	auipc	a1,0x12
    8001b8fc:	a9058593          	addi	a1,a1,-1392 # 8002d388 <__func__.0+0x2d0>
    8001b900:	00012517          	auipc	a0,0x12
    8001b904:	b3050513          	addi	a0,a0,-1232 # 8002d430 <__func__.0+0x378>
    8001b908:	54e0f0ef          	jal	8002ae56 <printf>
    8001b90c:	4511                	li	a0,4
    8001b90e:	dfae50ef          	jal	80000f08 <goto_priv>
    8001b912:	f13e50ef          	jal	80001824 <reset_state>
}
    8001b916:	60e2                	ld	ra,24(sp)
    8001b918:	8522                	mv	a0,s0
    8001b91a:	6442                	ld	s0,16(sp)
    8001b91c:	64a2                	ld	s1,8(sp)
    8001b91e:	6105                	addi	sp,sp,32
    8001b920:	8082                	ret

000000008001b922 <store_access_fault_10>:


bool store_access_fault_10(){
    8001b922:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b924:	00011597          	auipc	a1,0x11
    8001b928:	bd458593          	addi	a1,a1,-1068 # 8002c4f8 <__func__.20>
    8001b92c:	00012517          	auipc	a0,0x12
    8001b930:	a6c50513          	addi	a0,a0,-1428 # 8002d398 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001b934:	ec06                	sd	ra,24(sp)
    8001b936:	e822                	sd	s0,16(sp)
    8001b938:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b93a:	51c0f0ef          	jal	8002ae56 <printf>
    8001b93e:	4529                	li	a0,10
    8001b940:	2040e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001b944:	4511                	li	a0,4
    8001b946:	dc2e50ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b94a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b94e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b952:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b956:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b95a:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b95e:	4785                	li	a5,1
    8001b960:	07fe                	slli	a5,a5,0x1f
    8001b962:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b966:	08000793          	li	a5,128
    8001b96a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b96e:	450d                	li	a0,3
    8001b970:	d98e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b974:	c98e50ef          	jal	80000e0c <test_setup_except_function>
    8001b978:	37ab77b7          	lui	a5,0x37ab7
    8001b97c:	078a                	slli	a5,a5,0x2
    8001b97e:	00803737          	lui	a4,0x803
    8001b982:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b986:	072a                	slli	a4,a4,0xa
    8001b988:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b98c:	08200593          	li	a1,130
    8001b990:	00018617          	auipc	a2,0x18
    8001b994:	43860613          	addi	a2,a2,1080 # 80033dc8 <__func__.0+0x6d10>
    8001b998:	00012517          	auipc	a0,0x12
    8001b99c:	a1850513          	addi	a0,a0,-1512 # 8002d3b0 <__func__.0+0x2f8>
    8001b9a0:	4b60f0ef          	jal	8002ae56 <printf>
    8001b9a4:	00038797          	auipc	a5,0x38
    8001b9a8:	66d7c783          	lbu	a5,1645(a5) # 80054011 <excpt+0x1>
    8001b9ac:	00038497          	auipc	s1,0x38
    8001b9b0:	66448493          	addi	s1,s1,1636 # 80054010 <excpt>
    8001b9b4:	00012597          	auipc	a1,0x12
    8001b9b8:	9d458593          	addi	a1,a1,-1580 # 8002d388 <__func__.0+0x2d0>
    8001b9bc:	cf89                	beqz	a5,8001b9d6 <store_access_fault_10+0xb4>
    8001b9be:	6498                	ld	a4,8(s1)
    8001b9c0:	479d                	li	a5,7
    8001b9c2:	00012597          	auipc	a1,0x12
    8001b9c6:	9b658593          	addi	a1,a1,-1610 # 8002d378 <__func__.0+0x2c0>
    8001b9ca:	00f70663          	beq	a4,a5,8001b9d6 <store_access_fault_10+0xb4>
    8001b9ce:	00012597          	auipc	a1,0x12
    8001b9d2:	9ba58593          	addi	a1,a1,-1606 # 8002d388 <__func__.0+0x2d0>
    8001b9d6:	00012517          	auipc	a0,0x12
    8001b9da:	9f250513          	addi	a0,a0,-1550 # 8002d3c8 <__func__.0+0x310>
    8001b9de:	4780f0ef          	jal	8002ae56 <printf>
    8001b9e2:	00038797          	auipc	a5,0x38
    8001b9e6:	62f7c783          	lbu	a5,1583(a5) # 80054011 <excpt+0x1>
    8001b9ea:	c789                	beqz	a5,8001b9f4 <store_access_fault_10+0xd2>
    8001b9ec:	6498                	ld	a4,8(s1)
    8001b9ee:	479d                	li	a5,7
    8001b9f0:	00f70c63          	beq	a4,a5,8001ba08 <store_access_fault_10+0xe6>
    8001b9f4:	00012517          	auipc	a0,0x12
    8001b9f8:	9dc50513          	addi	a0,a0,-1572 # 8002d3d0 <__func__.0+0x318>
    8001b9fc:	45a0f0ef          	jal	8002ae56 <printf>
    8001ba00:	02900513          	li	a0,41
    8001ba04:	1400e0ef          	jal	80029b44 <putchar>
    8001ba08:	4529                	li	a0,10
    8001ba0a:	13a0e0ef          	jal	80029b44 <putchar>
    8001ba0e:	00038417          	auipc	s0,0x38
    8001ba12:	60344403          	lbu	s0,1539(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ba16:	00012597          	auipc	a1,0x12
    8001ba1a:	97258593          	addi	a1,a1,-1678 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001ba1e:	cc11                	beqz	s0,8001ba3a <store_access_fault_10+0x118>
    8001ba20:	6498                	ld	a4,8(s1)
    8001ba22:	479d                	li	a5,7
    TEST_END();
    8001ba24:	00012597          	auipc	a1,0x12
    8001ba28:	95458593          	addi	a1,a1,-1708 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001ba2c:	00f70763          	beq	a4,a5,8001ba3a <store_access_fault_10+0x118>
    8001ba30:	4401                	li	s0,0
    TEST_END();
    8001ba32:	00012597          	auipc	a1,0x12
    8001ba36:	95658593          	addi	a1,a1,-1706 # 8002d388 <__func__.0+0x2d0>
    8001ba3a:	00012517          	auipc	a0,0x12
    8001ba3e:	9f650513          	addi	a0,a0,-1546 # 8002d430 <__func__.0+0x378>
    8001ba42:	4140f0ef          	jal	8002ae56 <printf>
    8001ba46:	4511                	li	a0,4
    8001ba48:	cc0e50ef          	jal	80000f08 <goto_priv>
    8001ba4c:	dd9e50ef          	jal	80001824 <reset_state>
}
    8001ba50:	60e2                	ld	ra,24(sp)
    8001ba52:	8522                	mv	a0,s0
    8001ba54:	6442                	ld	s0,16(sp)
    8001ba56:	64a2                	ld	s1,8(sp)
    8001ba58:	6105                	addi	sp,sp,32
    8001ba5a:	8082                	ret

000000008001ba5c <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001ba5c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ba5e:	00011597          	auipc	a1,0x11
    8001ba62:	ab258593          	addi	a1,a1,-1358 # 8002c510 <__func__.19>
    8001ba66:	00012517          	auipc	a0,0x12
    8001ba6a:	93250513          	addi	a0,a0,-1742 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001ba6e:	ec06                	sd	ra,24(sp)
    8001ba70:	e822                	sd	s0,16(sp)
    8001ba72:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ba74:	3e20f0ef          	jal	8002ae56 <printf>
    8001ba78:	4529                	li	a0,10
    8001ba7a:	0ca0e0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001ba7e:	4511                	li	a0,4
    8001ba80:	c88e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ba84:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ba88:	10000793          	li	a5,256
    8001ba8c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ba90:	20000793          	li	a5,512
    8001ba94:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ba98:	40000793          	li	a5,1024
    8001ba9c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001baa0:	6785                	lui	a5,0x1
    8001baa2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001baa6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001baaa:	4785                	li	a5,1
    8001baac:	07fe                	slli	a5,a5,0x1f
    8001baae:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bab2:	08100793          	li	a5,129
    8001bab6:	07e2                	slli	a5,a5,0x18
    8001bab8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001babc:	67a1                	lui	a5,0x8
    8001babe:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001bac2:	b4ae50ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001bac6:	37ab77b7          	lui	a5,0x37ab7
    8001baca:	4705                	li	a4,1
    8001bacc:	078a                	slli	a5,a5,0x2
    8001bace:	1706                	slli	a4,a4,0x21
    8001bad0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bad4:	40070713          	addi	a4,a4,1024
    8001bad8:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001badc:	00038597          	auipc	a1,0x38
    8001bae0:	5355c583          	lbu	a1,1333(a1) # 80054011 <excpt+0x1>
    8001bae4:	00012517          	auipc	a0,0x12
    8001bae8:	43c50513          	addi	a0,a0,1084 # 8002df20 <__func__.0+0xe68>
    8001baec:	00038417          	auipc	s0,0x38
    8001baf0:	52440413          	addi	s0,s0,1316 # 80054010 <excpt>
    8001baf4:	3620f0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001baf8:	640c                	ld	a1,8(s0)
    8001bafa:	00012517          	auipc	a0,0x12
    8001bafe:	42650513          	addi	a0,a0,1062 # 8002df20 <__func__.0+0xe68>
    8001bb02:	3540f0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb06:	08200593          	li	a1,130
    8001bb0a:	00018617          	auipc	a2,0x18
    8001bb0e:	31e60613          	addi	a2,a2,798 # 80033e28 <__func__.0+0x6d70>
    8001bb12:	00012517          	auipc	a0,0x12
    8001bb16:	89e50513          	addi	a0,a0,-1890 # 8002d3b0 <__func__.0+0x2f8>
    8001bb1a:	33c0f0ef          	jal	8002ae56 <printf>
    8001bb1e:	00038797          	auipc	a5,0x38
    8001bb22:	4f37c783          	lbu	a5,1267(a5) # 80054011 <excpt+0x1>
    8001bb26:	00012597          	auipc	a1,0x12
    8001bb2a:	86258593          	addi	a1,a1,-1950 # 8002d388 <__func__.0+0x2d0>
    8001bb2e:	cf89                	beqz	a5,8001bb48 <amo_access_fault_1+0xec>
    8001bb30:	6418                	ld	a4,8(s0)
    8001bb32:	479d                	li	a5,7
    8001bb34:	00012597          	auipc	a1,0x12
    8001bb38:	84458593          	addi	a1,a1,-1980 # 8002d378 <__func__.0+0x2c0>
    8001bb3c:	00f70663          	beq	a4,a5,8001bb48 <amo_access_fault_1+0xec>
    8001bb40:	00012597          	auipc	a1,0x12
    8001bb44:	84858593          	addi	a1,a1,-1976 # 8002d388 <__func__.0+0x2d0>
    8001bb48:	00012517          	auipc	a0,0x12
    8001bb4c:	88050513          	addi	a0,a0,-1920 # 8002d3c8 <__func__.0+0x310>
    8001bb50:	3060f0ef          	jal	8002ae56 <printf>
    8001bb54:	00038797          	auipc	a5,0x38
    8001bb58:	4bd7c783          	lbu	a5,1213(a5) # 80054011 <excpt+0x1>
    8001bb5c:	c789                	beqz	a5,8001bb66 <amo_access_fault_1+0x10a>
    8001bb5e:	6418                	ld	a4,8(s0)
    8001bb60:	479d                	li	a5,7
    8001bb62:	00f70c63          	beq	a4,a5,8001bb7a <amo_access_fault_1+0x11e>
    8001bb66:	00012517          	auipc	a0,0x12
    8001bb6a:	86a50513          	addi	a0,a0,-1942 # 8002d3d0 <__func__.0+0x318>
    8001bb6e:	2e80f0ef          	jal	8002ae56 <printf>
    8001bb72:	02900513          	li	a0,41
    8001bb76:	7cf0d0ef          	jal	80029b44 <putchar>
    8001bb7a:	4529                	li	a0,10
    8001bb7c:	7c90d0ef          	jal	80029b44 <putchar>
    8001bb80:	00038497          	auipc	s1,0x38
    8001bb84:	4914c483          	lbu	s1,1169(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bb88:	00012597          	auipc	a1,0x12
    8001bb8c:	80058593          	addi	a1,a1,-2048 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb90:	cc91                	beqz	s1,8001bbac <amo_access_fault_1+0x150>
    8001bb92:	6418                	ld	a4,8(s0)
    8001bb94:	479d                	li	a5,7
    TEST_END();
    8001bb96:	00011597          	auipc	a1,0x11
    8001bb9a:	7e258593          	addi	a1,a1,2018 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb9e:	00f70763          	beq	a4,a5,8001bbac <amo_access_fault_1+0x150>
    8001bba2:	4481                	li	s1,0
    TEST_END();
    8001bba4:	00011597          	auipc	a1,0x11
    8001bba8:	7e458593          	addi	a1,a1,2020 # 8002d388 <__func__.0+0x2d0>
    8001bbac:	00012517          	auipc	a0,0x12
    8001bbb0:	88450513          	addi	a0,a0,-1916 # 8002d430 <__func__.0+0x378>
    8001bbb4:	2a20f0ef          	jal	8002ae56 <printf>
    8001bbb8:	4511                	li	a0,4
    8001bbba:	b4ee50ef          	jal	80000f08 <goto_priv>
    8001bbbe:	c67e50ef          	jal	80001824 <reset_state>
}
    8001bbc2:	60e2                	ld	ra,24(sp)
    8001bbc4:	6442                	ld	s0,16(sp)
    8001bbc6:	8526                	mv	a0,s1
    8001bbc8:	64a2                	ld	s1,8(sp)
    8001bbca:	6105                	addi	sp,sp,32
    8001bbcc:	8082                	ret

000000008001bbce <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001bbce:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bbd0:	00011597          	auipc	a1,0x11
    8001bbd4:	95858593          	addi	a1,a1,-1704 # 8002c528 <__func__.18>
    8001bbd8:	00011517          	auipc	a0,0x11
    8001bbdc:	7c050513          	addi	a0,a0,1984 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001bbe0:	ec06                	sd	ra,24(sp)
    8001bbe2:	e822                	sd	s0,16(sp)
    8001bbe4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bbe6:	2700f0ef          	jal	8002ae56 <printf>
    8001bbea:	4529                	li	a0,10
    8001bbec:	7590d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001bbf0:	4511                	li	a0,4
    8001bbf2:	b16e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bbf6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bbfa:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bbfe:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bc02:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bc06:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bc0a:	10000793          	li	a5,256
    8001bc0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bc12:	20000793          	li	a5,512
    8001bc16:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bc1a:	40000793          	li	a5,1024
    8001bc1e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bc22:	6785                	lui	a5,0x1
    8001bc24:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bc28:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bc2c:	4785                	li	a5,1
    8001bc2e:	07fe                	slli	a5,a5,0x1f
    8001bc30:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bc34:	08100793          	li	a5,129
    8001bc38:	07e2                	slli	a5,a5,0x18
    8001bc3a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bc3e:	08000793          	li	a5,128
    8001bc42:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bc46:	67a1                	lui	a5,0x8
    8001bc48:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001bc4c:	450d                	li	a0,3
    8001bc4e:	abae50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bc52:	9bae50ef          	jal	80000e0c <test_setup_except_function>
    8001bc56:	37ab77b7          	lui	a5,0x37ab7
    8001bc5a:	4705                	li	a4,1
    8001bc5c:	078a                	slli	a5,a5,0x2
    8001bc5e:	1706                	slli	a4,a4,0x21
    8001bc60:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bc64:	40070713          	addi	a4,a4,1024
    8001bc68:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc6c:	08200593          	li	a1,130
    8001bc70:	00018617          	auipc	a2,0x18
    8001bc74:	1f860613          	addi	a2,a2,504 # 80033e68 <__func__.0+0x6db0>
    8001bc78:	00011517          	auipc	a0,0x11
    8001bc7c:	73850513          	addi	a0,a0,1848 # 8002d3b0 <__func__.0+0x2f8>
    8001bc80:	1d60f0ef          	jal	8002ae56 <printf>
    8001bc84:	00038797          	auipc	a5,0x38
    8001bc88:	38d7c783          	lbu	a5,909(a5) # 80054011 <excpt+0x1>
    8001bc8c:	00038497          	auipc	s1,0x38
    8001bc90:	38448493          	addi	s1,s1,900 # 80054010 <excpt>
    8001bc94:	00011597          	auipc	a1,0x11
    8001bc98:	6f458593          	addi	a1,a1,1780 # 8002d388 <__func__.0+0x2d0>
    8001bc9c:	cf89                	beqz	a5,8001bcb6 <amo_access_fault_2+0xe8>
    8001bc9e:	6498                	ld	a4,8(s1)
    8001bca0:	479d                	li	a5,7
    8001bca2:	00011597          	auipc	a1,0x11
    8001bca6:	6d658593          	addi	a1,a1,1750 # 8002d378 <__func__.0+0x2c0>
    8001bcaa:	00f70663          	beq	a4,a5,8001bcb6 <amo_access_fault_2+0xe8>
    8001bcae:	00011597          	auipc	a1,0x11
    8001bcb2:	6da58593          	addi	a1,a1,1754 # 8002d388 <__func__.0+0x2d0>
    8001bcb6:	00011517          	auipc	a0,0x11
    8001bcba:	71250513          	addi	a0,a0,1810 # 8002d3c8 <__func__.0+0x310>
    8001bcbe:	1980f0ef          	jal	8002ae56 <printf>
    8001bcc2:	00038797          	auipc	a5,0x38
    8001bcc6:	34f7c783          	lbu	a5,847(a5) # 80054011 <excpt+0x1>
    8001bcca:	c789                	beqz	a5,8001bcd4 <amo_access_fault_2+0x106>
    8001bccc:	6498                	ld	a4,8(s1)
    8001bcce:	479d                	li	a5,7
    8001bcd0:	00f70c63          	beq	a4,a5,8001bce8 <amo_access_fault_2+0x11a>
    8001bcd4:	00011517          	auipc	a0,0x11
    8001bcd8:	6fc50513          	addi	a0,a0,1788 # 8002d3d0 <__func__.0+0x318>
    8001bcdc:	17a0f0ef          	jal	8002ae56 <printf>
    8001bce0:	02900513          	li	a0,41
    8001bce4:	6610d0ef          	jal	80029b44 <putchar>
    8001bce8:	4529                	li	a0,10
    8001bcea:	65b0d0ef          	jal	80029b44 <putchar>
    8001bcee:	00038417          	auipc	s0,0x38
    8001bcf2:	32344403          	lbu	s0,803(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bcf6:	00011597          	auipc	a1,0x11
    8001bcfa:	69258593          	addi	a1,a1,1682 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bcfe:	cc11                	beqz	s0,8001bd1a <amo_access_fault_2+0x14c>
    8001bd00:	6498                	ld	a4,8(s1)
    8001bd02:	479d                	li	a5,7
    TEST_END();
    8001bd04:	00011597          	auipc	a1,0x11
    8001bd08:	67458593          	addi	a1,a1,1652 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bd0c:	00f70763          	beq	a4,a5,8001bd1a <amo_access_fault_2+0x14c>
    8001bd10:	4401                	li	s0,0
    TEST_END();
    8001bd12:	00011597          	auipc	a1,0x11
    8001bd16:	67658593          	addi	a1,a1,1654 # 8002d388 <__func__.0+0x2d0>
    8001bd1a:	00011517          	auipc	a0,0x11
    8001bd1e:	71650513          	addi	a0,a0,1814 # 8002d430 <__func__.0+0x378>
    8001bd22:	1340f0ef          	jal	8002ae56 <printf>
    8001bd26:	4511                	li	a0,4
    8001bd28:	9e0e50ef          	jal	80000f08 <goto_priv>
    8001bd2c:	af9e50ef          	jal	80001824 <reset_state>
}
    8001bd30:	60e2                	ld	ra,24(sp)
    8001bd32:	8522                	mv	a0,s0
    8001bd34:	6442                	ld	s0,16(sp)
    8001bd36:	64a2                	ld	s1,8(sp)
    8001bd38:	6105                	addi	sp,sp,32
    8001bd3a:	8082                	ret

000000008001bd3c <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001bd3c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bd3e:	00011597          	auipc	a1,0x11
    8001bd42:	80258593          	addi	a1,a1,-2046 # 8002c540 <__func__.17>
    8001bd46:	00011517          	auipc	a0,0x11
    8001bd4a:	65250513          	addi	a0,a0,1618 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001bd4e:	ec06                	sd	ra,24(sp)
    8001bd50:	e822                	sd	s0,16(sp)
    8001bd52:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bd54:	1020f0ef          	jal	8002ae56 <printf>
    8001bd58:	4529                	li	a0,10
    8001bd5a:	5eb0d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001bd5e:	4511                	li	a0,4
    8001bd60:	9a8e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bd64:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bd68:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bd6c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bd70:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bd74:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bd78:	10000793          	li	a5,256
    8001bd7c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bd80:	20000793          	li	a5,512
    8001bd84:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bd88:	40000793          	li	a5,1024
    8001bd8c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bd90:	6785                	lui	a5,0x1
    8001bd92:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bd96:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bd9a:	4785                	li	a5,1
    8001bd9c:	07fe                	slli	a5,a5,0x1f
    8001bd9e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bda2:	08100793          	li	a5,129
    8001bda6:	07e2                	slli	a5,a5,0x18
    8001bda8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bdac:	08000793          	li	a5,128
    8001bdb0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bdb4:	67a1                	lui	a5,0x8
    8001bdb6:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001bdba:	4505                	li	a0,1
    8001bdbc:	94ce50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bdc0:	84ce50ef          	jal	80000e0c <test_setup_except_function>
    8001bdc4:	37ab77b7          	lui	a5,0x37ab7
    8001bdc8:	4705                	li	a4,1
    8001bdca:	078a                	slli	a5,a5,0x2
    8001bdcc:	1706                	slli	a4,a4,0x21
    8001bdce:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bdd2:	40070713          	addi	a4,a4,1024
    8001bdd6:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdda:	08200593          	li	a1,130
    8001bdde:	00018617          	auipc	a2,0x18
    8001bde2:	0ca60613          	addi	a2,a2,202 # 80033ea8 <__func__.0+0x6df0>
    8001bde6:	00011517          	auipc	a0,0x11
    8001bdea:	5ca50513          	addi	a0,a0,1482 # 8002d3b0 <__func__.0+0x2f8>
    8001bdee:	0680f0ef          	jal	8002ae56 <printf>
    8001bdf2:	00038797          	auipc	a5,0x38
    8001bdf6:	21f7c783          	lbu	a5,543(a5) # 80054011 <excpt+0x1>
    8001bdfa:	00038497          	auipc	s1,0x38
    8001bdfe:	21648493          	addi	s1,s1,534 # 80054010 <excpt>
    8001be02:	00011597          	auipc	a1,0x11
    8001be06:	58658593          	addi	a1,a1,1414 # 8002d388 <__func__.0+0x2d0>
    8001be0a:	cf89                	beqz	a5,8001be24 <amo_access_fault_3+0xe8>
    8001be0c:	6498                	ld	a4,8(s1)
    8001be0e:	479d                	li	a5,7
    8001be10:	00011597          	auipc	a1,0x11
    8001be14:	56858593          	addi	a1,a1,1384 # 8002d378 <__func__.0+0x2c0>
    8001be18:	00f70663          	beq	a4,a5,8001be24 <amo_access_fault_3+0xe8>
    8001be1c:	00011597          	auipc	a1,0x11
    8001be20:	56c58593          	addi	a1,a1,1388 # 8002d388 <__func__.0+0x2d0>
    8001be24:	00011517          	auipc	a0,0x11
    8001be28:	5a450513          	addi	a0,a0,1444 # 8002d3c8 <__func__.0+0x310>
    8001be2c:	02a0f0ef          	jal	8002ae56 <printf>
    8001be30:	00038797          	auipc	a5,0x38
    8001be34:	1e17c783          	lbu	a5,481(a5) # 80054011 <excpt+0x1>
    8001be38:	c789                	beqz	a5,8001be42 <amo_access_fault_3+0x106>
    8001be3a:	6498                	ld	a4,8(s1)
    8001be3c:	479d                	li	a5,7
    8001be3e:	00f70c63          	beq	a4,a5,8001be56 <amo_access_fault_3+0x11a>
    8001be42:	00011517          	auipc	a0,0x11
    8001be46:	58e50513          	addi	a0,a0,1422 # 8002d3d0 <__func__.0+0x318>
    8001be4a:	00c0f0ef          	jal	8002ae56 <printf>
    8001be4e:	02900513          	li	a0,41
    8001be52:	4f30d0ef          	jal	80029b44 <putchar>
    8001be56:	4529                	li	a0,10
    8001be58:	4ed0d0ef          	jal	80029b44 <putchar>
    8001be5c:	00038417          	auipc	s0,0x38
    8001be60:	1b544403          	lbu	s0,437(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001be64:	00011597          	auipc	a1,0x11
    8001be68:	52458593          	addi	a1,a1,1316 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be6c:	cc11                	beqz	s0,8001be88 <amo_access_fault_3+0x14c>
    8001be6e:	6498                	ld	a4,8(s1)
    8001be70:	479d                	li	a5,7
    TEST_END();
    8001be72:	00011597          	auipc	a1,0x11
    8001be76:	50658593          	addi	a1,a1,1286 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be7a:	00f70763          	beq	a4,a5,8001be88 <amo_access_fault_3+0x14c>
    8001be7e:	4401                	li	s0,0
    TEST_END();
    8001be80:	00011597          	auipc	a1,0x11
    8001be84:	50858593          	addi	a1,a1,1288 # 8002d388 <__func__.0+0x2d0>
    8001be88:	00011517          	auipc	a0,0x11
    8001be8c:	5a850513          	addi	a0,a0,1448 # 8002d430 <__func__.0+0x378>
    8001be90:	7c70e0ef          	jal	8002ae56 <printf>
    8001be94:	4511                	li	a0,4
    8001be96:	872e50ef          	jal	80000f08 <goto_priv>
    8001be9a:	98be50ef          	jal	80001824 <reset_state>
}
    8001be9e:	60e2                	ld	ra,24(sp)
    8001bea0:	8522                	mv	a0,s0
    8001bea2:	6442                	ld	s0,16(sp)
    8001bea4:	64a2                	ld	s1,8(sp)
    8001bea6:	6105                	addi	sp,sp,32
    8001bea8:	8082                	ret

000000008001beaa <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001beaa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001beac:	00010597          	auipc	a1,0x10
    8001beb0:	6ac58593          	addi	a1,a1,1708 # 8002c558 <__func__.16>
    8001beb4:	00011517          	auipc	a0,0x11
    8001beb8:	4e450513          	addi	a0,a0,1252 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001bebc:	ec06                	sd	ra,24(sp)
    8001bebe:	e822                	sd	s0,16(sp)
    8001bec0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bec2:	7950e0ef          	jal	8002ae56 <printf>
    8001bec6:	4529                	li	a0,10
    8001bec8:	47d0d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001becc:	4511                	li	a0,4
    8001bece:	83ae50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bed2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bed6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001beda:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bede:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bee2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bee6:	10000793          	li	a5,256
    8001beea:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001beee:	20000793          	li	a5,512
    8001bef2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bef6:	40000793          	li	a5,1024
    8001befa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001befe:	6785                	lui	a5,0x1
    8001bf00:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bf04:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bf08:	4785                	li	a5,1
    8001bf0a:	07fe                	slli	a5,a5,0x1f
    8001bf0c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bf10:	08100793          	li	a5,129
    8001bf14:	07e2                	slli	a5,a5,0x18
    8001bf16:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bf1a:	08000793          	li	a5,128
    8001bf1e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bf22:	67a1                	lui	a5,0x8
    8001bf24:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bf28:	4501                	li	a0,0
    8001bf2a:	fdfe40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bf2e:	edfe40ef          	jal	80000e0c <test_setup_except_function>
    8001bf32:	37ab77b7          	lui	a5,0x37ab7
    8001bf36:	4705                	li	a4,1
    8001bf38:	078a                	slli	a5,a5,0x2
    8001bf3a:	1706                	slli	a4,a4,0x21
    8001bf3c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bf40:	40070713          	addi	a4,a4,1024
    8001bf44:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf48:	08200593          	li	a1,130
    8001bf4c:	00018617          	auipc	a2,0x18
    8001bf50:	f9c60613          	addi	a2,a2,-100 # 80033ee8 <__func__.0+0x6e30>
    8001bf54:	00011517          	auipc	a0,0x11
    8001bf58:	45c50513          	addi	a0,a0,1116 # 8002d3b0 <__func__.0+0x2f8>
    8001bf5c:	6fb0e0ef          	jal	8002ae56 <printf>
    8001bf60:	00038797          	auipc	a5,0x38
    8001bf64:	0b17c783          	lbu	a5,177(a5) # 80054011 <excpt+0x1>
    8001bf68:	00038497          	auipc	s1,0x38
    8001bf6c:	0a848493          	addi	s1,s1,168 # 80054010 <excpt>
    8001bf70:	00011597          	auipc	a1,0x11
    8001bf74:	41858593          	addi	a1,a1,1048 # 8002d388 <__func__.0+0x2d0>
    8001bf78:	cf89                	beqz	a5,8001bf92 <amo_access_fault_4+0xe8>
    8001bf7a:	6498                	ld	a4,8(s1)
    8001bf7c:	479d                	li	a5,7
    8001bf7e:	00011597          	auipc	a1,0x11
    8001bf82:	3fa58593          	addi	a1,a1,1018 # 8002d378 <__func__.0+0x2c0>
    8001bf86:	00f70663          	beq	a4,a5,8001bf92 <amo_access_fault_4+0xe8>
    8001bf8a:	00011597          	auipc	a1,0x11
    8001bf8e:	3fe58593          	addi	a1,a1,1022 # 8002d388 <__func__.0+0x2d0>
    8001bf92:	00011517          	auipc	a0,0x11
    8001bf96:	43650513          	addi	a0,a0,1078 # 8002d3c8 <__func__.0+0x310>
    8001bf9a:	6bd0e0ef          	jal	8002ae56 <printf>
    8001bf9e:	00038797          	auipc	a5,0x38
    8001bfa2:	0737c783          	lbu	a5,115(a5) # 80054011 <excpt+0x1>
    8001bfa6:	c789                	beqz	a5,8001bfb0 <amo_access_fault_4+0x106>
    8001bfa8:	6498                	ld	a4,8(s1)
    8001bfaa:	479d                	li	a5,7
    8001bfac:	00f70c63          	beq	a4,a5,8001bfc4 <amo_access_fault_4+0x11a>
    8001bfb0:	00011517          	auipc	a0,0x11
    8001bfb4:	42050513          	addi	a0,a0,1056 # 8002d3d0 <__func__.0+0x318>
    8001bfb8:	69f0e0ef          	jal	8002ae56 <printf>
    8001bfbc:	02900513          	li	a0,41
    8001bfc0:	3850d0ef          	jal	80029b44 <putchar>
    8001bfc4:	4529                	li	a0,10
    8001bfc6:	37f0d0ef          	jal	80029b44 <putchar>
    8001bfca:	00038417          	auipc	s0,0x38
    8001bfce:	04744403          	lbu	s0,71(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bfd2:	00011597          	auipc	a1,0x11
    8001bfd6:	3b658593          	addi	a1,a1,950 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bfda:	cc11                	beqz	s0,8001bff6 <amo_access_fault_4+0x14c>
    8001bfdc:	6498                	ld	a4,8(s1)
    8001bfde:	479d                	li	a5,7
    TEST_END();
    8001bfe0:	00011597          	auipc	a1,0x11
    8001bfe4:	39858593          	addi	a1,a1,920 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bfe8:	00f70763          	beq	a4,a5,8001bff6 <amo_access_fault_4+0x14c>
    8001bfec:	4401                	li	s0,0
    TEST_END();
    8001bfee:	00011597          	auipc	a1,0x11
    8001bff2:	39a58593          	addi	a1,a1,922 # 8002d388 <__func__.0+0x2d0>
    8001bff6:	00011517          	auipc	a0,0x11
    8001bffa:	43a50513          	addi	a0,a0,1082 # 8002d430 <__func__.0+0x378>
    8001bffe:	6590e0ef          	jal	8002ae56 <printf>
    8001c002:	4511                	li	a0,4
    8001c004:	f05e40ef          	jal	80000f08 <goto_priv>
    8001c008:	81de50ef          	jal	80001824 <reset_state>
}
    8001c00c:	60e2                	ld	ra,24(sp)
    8001c00e:	8522                	mv	a0,s0
    8001c010:	6442                	ld	s0,16(sp)
    8001c012:	64a2                	ld	s1,8(sp)
    8001c014:	6105                	addi	sp,sp,32
    8001c016:	8082                	ret

000000008001c018 <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001c018:	1141                	addi	sp,sp,-16

    TEST_START();
    8001c01a:	00010597          	auipc	a1,0x10
    8001c01e:	55658593          	addi	a1,a1,1366 # 8002c570 <__func__.15>
    8001c022:	00011517          	auipc	a0,0x11
    8001c026:	37650513          	addi	a0,a0,886 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001c02a:	e406                	sd	ra,8(sp)
    8001c02c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001c02e:	6290e0ef          	jal	8002ae56 <printf>
    8001c032:	4529                	li	a0,10
    8001c034:	3110d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c038:	4511                	li	a0,4
    8001c03a:	ecfe40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c03e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c042:	10000793          	li	a5,256
    8001c046:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c04a:	20000793          	li	a5,512
    8001c04e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c052:	40000793          	li	a5,1024
    8001c056:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c05a:	6785                	lui	a5,0x1
    8001c05c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c060:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c064:	4785                	li	a5,1
    8001c066:	07fe                	slli	a5,a5,0x1f
    8001c068:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c06c:	08100793          	li	a5,129
    8001c070:	07e2                	slli	a5,a5,0x18
    8001c072:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c076:	67a1                	lui	a5,0x8
    8001c078:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c07c:	d91e40ef          	jal	80000e0c <test_setup_except_function>
    8001c080:	37ab77b7          	lui	a5,0x37ab7
    8001c084:	4705                	li	a4,1
    8001c086:	078a                	slli	a5,a5,0x2
    8001c088:	1706                	slli	a4,a4,0x21
    8001c08a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c08e:	40070713          	addi	a4,a4,1024
    8001c092:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001c096:	00038597          	auipc	a1,0x38
    8001c09a:	f7b5c583          	lbu	a1,-133(a1) # 80054011 <excpt+0x1>
    8001c09e:	00012517          	auipc	a0,0x12
    8001c0a2:	e8250513          	addi	a0,a0,-382 # 8002df20 <__func__.0+0xe68>
    8001c0a6:	5b10e0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001c0aa:	00038597          	auipc	a1,0x38
    8001c0ae:	f6e5b583          	ld	a1,-146(a1) # 80054018 <excpt+0x8>
    8001c0b2:	00012517          	auipc	a0,0x12
    8001c0b6:	e6e50513          	addi	a0,a0,-402 # 8002df20 <__func__.0+0xe68>
    8001c0ba:	59d0e0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c0be:	08200593          	li	a1,130
    8001c0c2:	00018617          	auipc	a2,0x18
    8001c0c6:	e6660613          	addi	a2,a2,-410 # 80033f28 <__func__.0+0x6e70>
    8001c0ca:	00011517          	auipc	a0,0x11
    8001c0ce:	2e650513          	addi	a0,a0,742 # 8002d3b0 <__func__.0+0x2f8>
    8001c0d2:	5850e0ef          	jal	8002ae56 <printf>
    8001c0d6:	00038797          	auipc	a5,0x38
    8001c0da:	f3b7c783          	lbu	a5,-197(a5) # 80054011 <excpt+0x1>
    8001c0de:	00011597          	auipc	a1,0x11
    8001c0e2:	29a58593          	addi	a1,a1,666 # 8002d378 <__func__.0+0x2c0>
    8001c0e6:	c789                	beqz	a5,8001c0f0 <amo_access_fault_5+0xd8>
    8001c0e8:	00011597          	auipc	a1,0x11
    8001c0ec:	2a058593          	addi	a1,a1,672 # 8002d388 <__func__.0+0x2d0>
    8001c0f0:	00011517          	auipc	a0,0x11
    8001c0f4:	2d850513          	addi	a0,a0,728 # 8002d3c8 <__func__.0+0x310>
    8001c0f8:	55f0e0ef          	jal	8002ae56 <printf>
    8001c0fc:	00038797          	auipc	a5,0x38
    8001c100:	f157c783          	lbu	a5,-235(a5) # 80054011 <excpt+0x1>
    8001c104:	e7a1                	bnez	a5,8001c14c <amo_access_fault_5+0x134>
    8001c106:	4529                	li	a0,10
    8001c108:	23d0d0ef          	jal	80029b44 <putchar>
    8001c10c:	00038797          	auipc	a5,0x38
    8001c110:	f057c783          	lbu	a5,-251(a5) # 80054011 <excpt+0x1>
    8001c114:	e795                	bnez	a5,8001c140 <amo_access_fault_5+0x128>
    8001c116:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c118:	00011597          	auipc	a1,0x11
    8001c11c:	26058593          	addi	a1,a1,608 # 8002d378 <__func__.0+0x2c0>
    8001c120:	00011517          	auipc	a0,0x11
    8001c124:	31050513          	addi	a0,a0,784 # 8002d430 <__func__.0+0x378>
    8001c128:	52f0e0ef          	jal	8002ae56 <printf>
    8001c12c:	4511                	li	a0,4
    8001c12e:	ddbe40ef          	jal	80000f08 <goto_priv>
    8001c132:	ef2e50ef          	jal	80001824 <reset_state>
}
    8001c136:	60a2                	ld	ra,8(sp)
    8001c138:	8522                	mv	a0,s0
    8001c13a:	6402                	ld	s0,0(sp)
    8001c13c:	0141                	addi	sp,sp,16
    8001c13e:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c140:	4401                	li	s0,0
    TEST_END();
    8001c142:	00011597          	auipc	a1,0x11
    8001c146:	24658593          	addi	a1,a1,582 # 8002d388 <__func__.0+0x2d0>
    8001c14a:	bfd9                	j	8001c120 <amo_access_fault_5+0x108>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c14c:	00011517          	auipc	a0,0x11
    8001c150:	28450513          	addi	a0,a0,644 # 8002d3d0 <__func__.0+0x318>
    8001c154:	5030e0ef          	jal	8002ae56 <printf>
    8001c158:	02900513          	li	a0,41
    8001c15c:	1e90d0ef          	jal	80029b44 <putchar>
    8001c160:	b75d                	j	8001c106 <amo_access_fault_5+0xee>

000000008001c162 <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001c162:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c164:	00010597          	auipc	a1,0x10
    8001c168:	42458593          	addi	a1,a1,1060 # 8002c588 <__func__.14>
    8001c16c:	00011517          	auipc	a0,0x11
    8001c170:	22c50513          	addi	a0,a0,556 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001c174:	ec06                	sd	ra,24(sp)
    8001c176:	e822                	sd	s0,16(sp)
    8001c178:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c17a:	4dd0e0ef          	jal	8002ae56 <printf>
    8001c17e:	4529                	li	a0,10
    8001c180:	1c50d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c184:	4511                	li	a0,4
    8001c186:	d83e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c18a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c18e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c192:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c196:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c19a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c19e:	10000793          	li	a5,256
    8001c1a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c1a6:	20000793          	li	a5,512
    8001c1aa:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c1ae:	40000793          	li	a5,1024
    8001c1b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c1b6:	6785                	lui	a5,0x1
    8001c1b8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c1bc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c1c0:	4785                	li	a5,1
    8001c1c2:	07fe                	slli	a5,a5,0x1f
    8001c1c4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c1c8:	08100793          	li	a5,129
    8001c1cc:	07e2                	slli	a5,a5,0x18
    8001c1ce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c1d2:	08000793          	li	a5,128
    8001c1d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c1da:	67a1                	lui	a5,0x8
    8001c1dc:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c1e0:	450d                	li	a0,3
    8001c1e2:	d27e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c1e6:	c27e40ef          	jal	80000e0c <test_setup_except_function>
    8001c1ea:	37ab77b7          	lui	a5,0x37ab7
    8001c1ee:	4705                	li	a4,1
    8001c1f0:	078a                	slli	a5,a5,0x2
    8001c1f2:	1706                	slli	a4,a4,0x21
    8001c1f4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c1f8:	40070713          	addi	a4,a4,1024
    8001c1fc:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c200:	08200593          	li	a1,130
    8001c204:	00018617          	auipc	a2,0x18
    8001c208:	d6460613          	addi	a2,a2,-668 # 80033f68 <__func__.0+0x6eb0>
    8001c20c:	00011517          	auipc	a0,0x11
    8001c210:	1a450513          	addi	a0,a0,420 # 8002d3b0 <__func__.0+0x2f8>
    8001c214:	4430e0ef          	jal	8002ae56 <printf>
    8001c218:	00038797          	auipc	a5,0x38
    8001c21c:	df97c783          	lbu	a5,-519(a5) # 80054011 <excpt+0x1>
    8001c220:	00038497          	auipc	s1,0x38
    8001c224:	df048493          	addi	s1,s1,-528 # 80054010 <excpt>
    8001c228:	00011597          	auipc	a1,0x11
    8001c22c:	16058593          	addi	a1,a1,352 # 8002d388 <__func__.0+0x2d0>
    8001c230:	cf89                	beqz	a5,8001c24a <amo_access_fault_6+0xe8>
    8001c232:	6498                	ld	a4,8(s1)
    8001c234:	479d                	li	a5,7
    8001c236:	00011597          	auipc	a1,0x11
    8001c23a:	14258593          	addi	a1,a1,322 # 8002d378 <__func__.0+0x2c0>
    8001c23e:	00f70663          	beq	a4,a5,8001c24a <amo_access_fault_6+0xe8>
    8001c242:	00011597          	auipc	a1,0x11
    8001c246:	14658593          	addi	a1,a1,326 # 8002d388 <__func__.0+0x2d0>
    8001c24a:	00011517          	auipc	a0,0x11
    8001c24e:	17e50513          	addi	a0,a0,382 # 8002d3c8 <__func__.0+0x310>
    8001c252:	4050e0ef          	jal	8002ae56 <printf>
    8001c256:	00038797          	auipc	a5,0x38
    8001c25a:	dbb7c783          	lbu	a5,-581(a5) # 80054011 <excpt+0x1>
    8001c25e:	c789                	beqz	a5,8001c268 <amo_access_fault_6+0x106>
    8001c260:	6498                	ld	a4,8(s1)
    8001c262:	479d                	li	a5,7
    8001c264:	00f70c63          	beq	a4,a5,8001c27c <amo_access_fault_6+0x11a>
    8001c268:	00011517          	auipc	a0,0x11
    8001c26c:	16850513          	addi	a0,a0,360 # 8002d3d0 <__func__.0+0x318>
    8001c270:	3e70e0ef          	jal	8002ae56 <printf>
    8001c274:	02900513          	li	a0,41
    8001c278:	0cd0d0ef          	jal	80029b44 <putchar>
    8001c27c:	4529                	li	a0,10
    8001c27e:	0c70d0ef          	jal	80029b44 <putchar>
    8001c282:	00038417          	auipc	s0,0x38
    8001c286:	d8f44403          	lbu	s0,-625(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c28a:	00011597          	auipc	a1,0x11
    8001c28e:	0fe58593          	addi	a1,a1,254 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c292:	cc11                	beqz	s0,8001c2ae <amo_access_fault_6+0x14c>
    8001c294:	6498                	ld	a4,8(s1)
    8001c296:	479d                	li	a5,7
    TEST_END();
    8001c298:	00011597          	auipc	a1,0x11
    8001c29c:	0e058593          	addi	a1,a1,224 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c2a0:	00f70763          	beq	a4,a5,8001c2ae <amo_access_fault_6+0x14c>
    8001c2a4:	4401                	li	s0,0
    TEST_END();
    8001c2a6:	00011597          	auipc	a1,0x11
    8001c2aa:	0e258593          	addi	a1,a1,226 # 8002d388 <__func__.0+0x2d0>
    8001c2ae:	00011517          	auipc	a0,0x11
    8001c2b2:	18250513          	addi	a0,a0,386 # 8002d430 <__func__.0+0x378>
    8001c2b6:	3a10e0ef          	jal	8002ae56 <printf>
    8001c2ba:	4511                	li	a0,4
    8001c2bc:	c4de40ef          	jal	80000f08 <goto_priv>
    8001c2c0:	d64e50ef          	jal	80001824 <reset_state>
}
    8001c2c4:	60e2                	ld	ra,24(sp)
    8001c2c6:	8522                	mv	a0,s0
    8001c2c8:	6442                	ld	s0,16(sp)
    8001c2ca:	64a2                	ld	s1,8(sp)
    8001c2cc:	6105                	addi	sp,sp,32
    8001c2ce:	8082                	ret

000000008001c2d0 <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001c2d0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c2d2:	00010597          	auipc	a1,0x10
    8001c2d6:	2ce58593          	addi	a1,a1,718 # 8002c5a0 <__func__.13>
    8001c2da:	00011517          	auipc	a0,0x11
    8001c2de:	0be50513          	addi	a0,a0,190 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001c2e2:	ec06                	sd	ra,24(sp)
    8001c2e4:	e822                	sd	s0,16(sp)
    8001c2e6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c2e8:	36f0e0ef          	jal	8002ae56 <printf>
    8001c2ec:	4529                	li	a0,10
    8001c2ee:	0570d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c2f2:	4511                	li	a0,4
    8001c2f4:	c15e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c2f8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c2fc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c300:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c304:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c308:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c30c:	10000793          	li	a5,256
    8001c310:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c314:	20000793          	li	a5,512
    8001c318:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c31c:	40000793          	li	a5,1024
    8001c320:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c324:	6785                	lui	a5,0x1
    8001c326:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c32a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c32e:	4785                	li	a5,1
    8001c330:	07fe                	slli	a5,a5,0x1f
    8001c332:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c336:	08100793          	li	a5,129
    8001c33a:	07e2                	slli	a5,a5,0x18
    8001c33c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c340:	08000793          	li	a5,128
    8001c344:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c348:	67a1                	lui	a5,0x8
    8001c34a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c34e:	4505                	li	a0,1
    8001c350:	bb9e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c354:	ab9e40ef          	jal	80000e0c <test_setup_except_function>
    8001c358:	37ab77b7          	lui	a5,0x37ab7
    8001c35c:	4705                	li	a4,1
    8001c35e:	078a                	slli	a5,a5,0x2
    8001c360:	1706                	slli	a4,a4,0x21
    8001c362:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c366:	40070713          	addi	a4,a4,1024
    8001c36a:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c36e:	08200593          	li	a1,130
    8001c372:	00018617          	auipc	a2,0x18
    8001c376:	c3660613          	addi	a2,a2,-970 # 80033fa8 <__func__.0+0x6ef0>
    8001c37a:	00011517          	auipc	a0,0x11
    8001c37e:	03650513          	addi	a0,a0,54 # 8002d3b0 <__func__.0+0x2f8>
    8001c382:	2d50e0ef          	jal	8002ae56 <printf>
    8001c386:	00038797          	auipc	a5,0x38
    8001c38a:	c8b7c783          	lbu	a5,-885(a5) # 80054011 <excpt+0x1>
    8001c38e:	00038497          	auipc	s1,0x38
    8001c392:	c8248493          	addi	s1,s1,-894 # 80054010 <excpt>
    8001c396:	00011597          	auipc	a1,0x11
    8001c39a:	ff258593          	addi	a1,a1,-14 # 8002d388 <__func__.0+0x2d0>
    8001c39e:	cf89                	beqz	a5,8001c3b8 <amo_access_fault_7+0xe8>
    8001c3a0:	6498                	ld	a4,8(s1)
    8001c3a2:	479d                	li	a5,7
    8001c3a4:	00011597          	auipc	a1,0x11
    8001c3a8:	fd458593          	addi	a1,a1,-44 # 8002d378 <__func__.0+0x2c0>
    8001c3ac:	00f70663          	beq	a4,a5,8001c3b8 <amo_access_fault_7+0xe8>
    8001c3b0:	00011597          	auipc	a1,0x11
    8001c3b4:	fd858593          	addi	a1,a1,-40 # 8002d388 <__func__.0+0x2d0>
    8001c3b8:	00011517          	auipc	a0,0x11
    8001c3bc:	01050513          	addi	a0,a0,16 # 8002d3c8 <__func__.0+0x310>
    8001c3c0:	2970e0ef          	jal	8002ae56 <printf>
    8001c3c4:	00038797          	auipc	a5,0x38
    8001c3c8:	c4d7c783          	lbu	a5,-947(a5) # 80054011 <excpt+0x1>
    8001c3cc:	c789                	beqz	a5,8001c3d6 <amo_access_fault_7+0x106>
    8001c3ce:	6498                	ld	a4,8(s1)
    8001c3d0:	479d                	li	a5,7
    8001c3d2:	00f70c63          	beq	a4,a5,8001c3ea <amo_access_fault_7+0x11a>
    8001c3d6:	00011517          	auipc	a0,0x11
    8001c3da:	ffa50513          	addi	a0,a0,-6 # 8002d3d0 <__func__.0+0x318>
    8001c3de:	2790e0ef          	jal	8002ae56 <printf>
    8001c3e2:	02900513          	li	a0,41
    8001c3e6:	75e0d0ef          	jal	80029b44 <putchar>
    8001c3ea:	4529                	li	a0,10
    8001c3ec:	7580d0ef          	jal	80029b44 <putchar>
    8001c3f0:	00038417          	auipc	s0,0x38
    8001c3f4:	c2144403          	lbu	s0,-991(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c3f8:	00011597          	auipc	a1,0x11
    8001c3fc:	f9058593          	addi	a1,a1,-112 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c400:	cc11                	beqz	s0,8001c41c <amo_access_fault_7+0x14c>
    8001c402:	6498                	ld	a4,8(s1)
    8001c404:	479d                	li	a5,7
    TEST_END();
    8001c406:	00011597          	auipc	a1,0x11
    8001c40a:	f7258593          	addi	a1,a1,-142 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c40e:	00f70763          	beq	a4,a5,8001c41c <amo_access_fault_7+0x14c>
    8001c412:	4401                	li	s0,0
    TEST_END();
    8001c414:	00011597          	auipc	a1,0x11
    8001c418:	f7458593          	addi	a1,a1,-140 # 8002d388 <__func__.0+0x2d0>
    8001c41c:	00011517          	auipc	a0,0x11
    8001c420:	01450513          	addi	a0,a0,20 # 8002d430 <__func__.0+0x378>
    8001c424:	2330e0ef          	jal	8002ae56 <printf>
    8001c428:	4511                	li	a0,4
    8001c42a:	adfe40ef          	jal	80000f08 <goto_priv>
    8001c42e:	bf6e50ef          	jal	80001824 <reset_state>
}
    8001c432:	60e2                	ld	ra,24(sp)
    8001c434:	8522                	mv	a0,s0
    8001c436:	6442                	ld	s0,16(sp)
    8001c438:	64a2                	ld	s1,8(sp)
    8001c43a:	6105                	addi	sp,sp,32
    8001c43c:	8082                	ret

000000008001c43e <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001c43e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c440:	00010597          	auipc	a1,0x10
    8001c444:	17858593          	addi	a1,a1,376 # 8002c5b8 <__func__.12>
    8001c448:	00011517          	auipc	a0,0x11
    8001c44c:	f5050513          	addi	a0,a0,-176 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001c450:	ec06                	sd	ra,24(sp)
    8001c452:	e822                	sd	s0,16(sp)
    8001c454:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c456:	2010e0ef          	jal	8002ae56 <printf>
    8001c45a:	4529                	li	a0,10
    8001c45c:	6e80d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c460:	4511                	li	a0,4
    8001c462:	aa7e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c466:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c46a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c46e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c472:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c476:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c47a:	10000793          	li	a5,256
    8001c47e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c482:	20000793          	li	a5,512
    8001c486:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c48a:	40000793          	li	a5,1024
    8001c48e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c492:	6785                	lui	a5,0x1
    8001c494:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c498:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c49c:	4785                	li	a5,1
    8001c49e:	07fe                	slli	a5,a5,0x1f
    8001c4a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c4a4:	08100793          	li	a5,129
    8001c4a8:	07e2                	slli	a5,a5,0x18
    8001c4aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c4ae:	08000793          	li	a5,128
    8001c4b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c4b6:	67a1                	lui	a5,0x8
    8001c4b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c4bc:	4501                	li	a0,0
    8001c4be:	a4be40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c4c2:	94be40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001c4c6:	37ab77b7          	lui	a5,0x37ab7
    8001c4ca:	4705                	li	a4,1
    8001c4cc:	078a                	slli	a5,a5,0x2
    8001c4ce:	1706                	slli	a4,a4,0x21
    8001c4d0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c4d4:	40070713          	addi	a4,a4,1024
    8001c4d8:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4dc:	08200593          	li	a1,130
    8001c4e0:	00018617          	auipc	a2,0x18
    8001c4e4:	b0860613          	addi	a2,a2,-1272 # 80033fe8 <__func__.0+0x6f30>
    8001c4e8:	00011517          	auipc	a0,0x11
    8001c4ec:	ec850513          	addi	a0,a0,-312 # 8002d3b0 <__func__.0+0x2f8>
    8001c4f0:	1670e0ef          	jal	8002ae56 <printf>
    8001c4f4:	00038797          	auipc	a5,0x38
    8001c4f8:	b1d7c783          	lbu	a5,-1251(a5) # 80054011 <excpt+0x1>
    8001c4fc:	00038497          	auipc	s1,0x38
    8001c500:	b1448493          	addi	s1,s1,-1260 # 80054010 <excpt>
    8001c504:	00011597          	auipc	a1,0x11
    8001c508:	e8458593          	addi	a1,a1,-380 # 8002d388 <__func__.0+0x2d0>
    8001c50c:	cf89                	beqz	a5,8001c526 <amo_access_fault_8+0xe8>
    8001c50e:	6498                	ld	a4,8(s1)
    8001c510:	479d                	li	a5,7
    8001c512:	00011597          	auipc	a1,0x11
    8001c516:	e6658593          	addi	a1,a1,-410 # 8002d378 <__func__.0+0x2c0>
    8001c51a:	00f70663          	beq	a4,a5,8001c526 <amo_access_fault_8+0xe8>
    8001c51e:	00011597          	auipc	a1,0x11
    8001c522:	e6a58593          	addi	a1,a1,-406 # 8002d388 <__func__.0+0x2d0>
    8001c526:	00011517          	auipc	a0,0x11
    8001c52a:	ea250513          	addi	a0,a0,-350 # 8002d3c8 <__func__.0+0x310>
    8001c52e:	1290e0ef          	jal	8002ae56 <printf>
    8001c532:	00038797          	auipc	a5,0x38
    8001c536:	adf7c783          	lbu	a5,-1313(a5) # 80054011 <excpt+0x1>
    8001c53a:	c789                	beqz	a5,8001c544 <amo_access_fault_8+0x106>
    8001c53c:	6498                	ld	a4,8(s1)
    8001c53e:	479d                	li	a5,7
    8001c540:	00f70c63          	beq	a4,a5,8001c558 <amo_access_fault_8+0x11a>
    8001c544:	00011517          	auipc	a0,0x11
    8001c548:	e8c50513          	addi	a0,a0,-372 # 8002d3d0 <__func__.0+0x318>
    8001c54c:	10b0e0ef          	jal	8002ae56 <printf>
    8001c550:	02900513          	li	a0,41
    8001c554:	5f00d0ef          	jal	80029b44 <putchar>
    8001c558:	4529                	li	a0,10
    8001c55a:	5ea0d0ef          	jal	80029b44 <putchar>
    8001c55e:	00038417          	auipc	s0,0x38
    8001c562:	ab344403          	lbu	s0,-1357(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c566:	00011597          	auipc	a1,0x11
    8001c56a:	e2258593          	addi	a1,a1,-478 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c56e:	cc11                	beqz	s0,8001c58a <amo_access_fault_8+0x14c>
    8001c570:	6498                	ld	a4,8(s1)
    8001c572:	479d                	li	a5,7
    TEST_END();
    8001c574:	00011597          	auipc	a1,0x11
    8001c578:	e0458593          	addi	a1,a1,-508 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c57c:	00f70763          	beq	a4,a5,8001c58a <amo_access_fault_8+0x14c>
    8001c580:	4401                	li	s0,0
    TEST_END();
    8001c582:	00011597          	auipc	a1,0x11
    8001c586:	e0658593          	addi	a1,a1,-506 # 8002d388 <__func__.0+0x2d0>
    8001c58a:	00011517          	auipc	a0,0x11
    8001c58e:	ea650513          	addi	a0,a0,-346 # 8002d430 <__func__.0+0x378>
    8001c592:	0c50e0ef          	jal	8002ae56 <printf>
    8001c596:	4511                	li	a0,4
    8001c598:	971e40ef          	jal	80000f08 <goto_priv>
    8001c59c:	a88e50ef          	jal	80001824 <reset_state>
}
    8001c5a0:	60e2                	ld	ra,24(sp)
    8001c5a2:	8522                	mv	a0,s0
    8001c5a4:	6442                	ld	s0,16(sp)
    8001c5a6:	64a2                	ld	s1,8(sp)
    8001c5a8:	6105                	addi	sp,sp,32
    8001c5aa:	8082                	ret

000000008001c5ac <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001c5ac:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c5ae:	00010597          	auipc	a1,0x10
    8001c5b2:	02258593          	addi	a1,a1,34 # 8002c5d0 <__func__.11>
    8001c5b6:	00011517          	auipc	a0,0x11
    8001c5ba:	de250513          	addi	a0,a0,-542 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001c5be:	ec06                	sd	ra,24(sp)
    8001c5c0:	e822                	sd	s0,16(sp)
    8001c5c2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c5c4:	0930e0ef          	jal	8002ae56 <printf>
    8001c5c8:	4529                	li	a0,10
    8001c5ca:	57a0d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c5ce:	4511                	li	a0,4
    8001c5d0:	939e40ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c5d4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c5d8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c5dc:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c5e0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c5e4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c5e8:	10000793          	li	a5,256
    8001c5ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c5f0:	20000793          	li	a5,512
    8001c5f4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c5f8:	40000793          	li	a5,1024
    8001c5fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c600:	6785                	lui	a5,0x1
    8001c602:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c606:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c60a:	4785                	li	a5,1
    8001c60c:	07fe                	slli	a5,a5,0x1f
    8001c60e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c612:	08100793          	li	a5,129
    8001c616:	07e2                	slli	a5,a5,0x18
    8001c618:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c61c:	08000793          	li	a5,128
    8001c620:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c624:	67a1                	lui	a5,0x8
    8001c626:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c62a:	4501                	li	a0,0
    8001c62c:	8dde40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c630:	fdce40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001c634:	37ab77b7          	lui	a5,0x37ab7
    8001c638:	4705                	li	a4,1
    8001c63a:	078a                	slli	a5,a5,0x2
    8001c63c:	170e                	slli	a4,a4,0x23
    8001c63e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c642:	1761                	addi	a4,a4,-8
    8001c644:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c648:	08200593          	li	a1,130
    8001c64c:	00018617          	auipc	a2,0x18
    8001c650:	9dc60613          	addi	a2,a2,-1572 # 80034028 <__func__.0+0x6f70>
    8001c654:	00011517          	auipc	a0,0x11
    8001c658:	d5c50513          	addi	a0,a0,-676 # 8002d3b0 <__func__.0+0x2f8>
    8001c65c:	7fa0e0ef          	jal	8002ae56 <printf>
    8001c660:	00038797          	auipc	a5,0x38
    8001c664:	9b17c783          	lbu	a5,-1615(a5) # 80054011 <excpt+0x1>
    8001c668:	00038497          	auipc	s1,0x38
    8001c66c:	9a848493          	addi	s1,s1,-1624 # 80054010 <excpt>
    8001c670:	00011597          	auipc	a1,0x11
    8001c674:	d1858593          	addi	a1,a1,-744 # 8002d388 <__func__.0+0x2d0>
    8001c678:	cf89                	beqz	a5,8001c692 <amo_access_fault_9+0xe6>
    8001c67a:	6498                	ld	a4,8(s1)
    8001c67c:	479d                	li	a5,7
    8001c67e:	00011597          	auipc	a1,0x11
    8001c682:	cfa58593          	addi	a1,a1,-774 # 8002d378 <__func__.0+0x2c0>
    8001c686:	00f70663          	beq	a4,a5,8001c692 <amo_access_fault_9+0xe6>
    8001c68a:	00011597          	auipc	a1,0x11
    8001c68e:	cfe58593          	addi	a1,a1,-770 # 8002d388 <__func__.0+0x2d0>
    8001c692:	00011517          	auipc	a0,0x11
    8001c696:	d3650513          	addi	a0,a0,-714 # 8002d3c8 <__func__.0+0x310>
    8001c69a:	7bc0e0ef          	jal	8002ae56 <printf>
    8001c69e:	00038797          	auipc	a5,0x38
    8001c6a2:	9737c783          	lbu	a5,-1677(a5) # 80054011 <excpt+0x1>
    8001c6a6:	c789                	beqz	a5,8001c6b0 <amo_access_fault_9+0x104>
    8001c6a8:	6498                	ld	a4,8(s1)
    8001c6aa:	479d                	li	a5,7
    8001c6ac:	00f70c63          	beq	a4,a5,8001c6c4 <amo_access_fault_9+0x118>
    8001c6b0:	00011517          	auipc	a0,0x11
    8001c6b4:	d2050513          	addi	a0,a0,-736 # 8002d3d0 <__func__.0+0x318>
    8001c6b8:	79e0e0ef          	jal	8002ae56 <printf>
    8001c6bc:	02900513          	li	a0,41
    8001c6c0:	4840d0ef          	jal	80029b44 <putchar>
    8001c6c4:	4529                	li	a0,10
    8001c6c6:	47e0d0ef          	jal	80029b44 <putchar>
    8001c6ca:	00038417          	auipc	s0,0x38
    8001c6ce:	94744403          	lbu	s0,-1721(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c6d2:	00011597          	auipc	a1,0x11
    8001c6d6:	cb658593          	addi	a1,a1,-842 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c6da:	cc11                	beqz	s0,8001c6f6 <amo_access_fault_9+0x14a>
    8001c6dc:	6498                	ld	a4,8(s1)
    8001c6de:	479d                	li	a5,7
    TEST_END();
    8001c6e0:	00011597          	auipc	a1,0x11
    8001c6e4:	c9858593          	addi	a1,a1,-872 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c6e8:	00f70763          	beq	a4,a5,8001c6f6 <amo_access_fault_9+0x14a>
    8001c6ec:	4401                	li	s0,0
    TEST_END();
    8001c6ee:	00011597          	auipc	a1,0x11
    8001c6f2:	c9a58593          	addi	a1,a1,-870 # 8002d388 <__func__.0+0x2d0>
    8001c6f6:	00011517          	auipc	a0,0x11
    8001c6fa:	d3a50513          	addi	a0,a0,-710 # 8002d430 <__func__.0+0x378>
    8001c6fe:	7580e0ef          	jal	8002ae56 <printf>
    8001c702:	4511                	li	a0,4
    8001c704:	805e40ef          	jal	80000f08 <goto_priv>
    8001c708:	91ce50ef          	jal	80001824 <reset_state>
}
    8001c70c:	60e2                	ld	ra,24(sp)
    8001c70e:	8522                	mv	a0,s0
    8001c710:	6442                	ld	s0,16(sp)
    8001c712:	64a2                	ld	s1,8(sp)
    8001c714:	6105                	addi	sp,sp,32
    8001c716:	8082                	ret

000000008001c718 <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001c718:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c71a:	00010597          	auipc	a1,0x10
    8001c71e:	ece58593          	addi	a1,a1,-306 # 8002c5e8 <__func__.10>
    8001c722:	00011517          	auipc	a0,0x11
    8001c726:	c7650513          	addi	a0,a0,-906 # 8002d398 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001c72a:	ec06                	sd	ra,24(sp)
    8001c72c:	e822                	sd	s0,16(sp)
    8001c72e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c730:	7260e0ef          	jal	8002ae56 <printf>
    8001c734:	4529                	li	a0,10
    8001c736:	40e0d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c73a:	4511                	li	a0,4
    8001c73c:	fcce40ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c740:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c744:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c748:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c74c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c750:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c754:	4785                	li	a5,1
    8001c756:	07fe                	slli	a5,a5,0x1f
    8001c758:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c75c:	08000793          	li	a5,128
    8001c760:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c764:	450d                	li	a0,3
    8001c766:	fa2e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c76a:	ea2e40ef          	jal	80000e0c <test_setup_except_function>
    8001c76e:	37ab77b7          	lui	a5,0x37ab7
    8001c772:	078a                	slli	a5,a5,0x2
    8001c774:	4705                	li	a4,1
    8001c776:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c77a:	1706                	slli	a4,a4,0x21
    8001c77c:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c780:	08200593          	li	a1,130
    8001c784:	00018617          	auipc	a2,0x18
    8001c788:	91c60613          	addi	a2,a2,-1764 # 800340a0 <__func__.0+0x6fe8>
    8001c78c:	00011517          	auipc	a0,0x11
    8001c790:	c2450513          	addi	a0,a0,-988 # 8002d3b0 <__func__.0+0x2f8>
    8001c794:	6c20e0ef          	jal	8002ae56 <printf>
    8001c798:	00038797          	auipc	a5,0x38
    8001c79c:	8797c783          	lbu	a5,-1927(a5) # 80054011 <excpt+0x1>
    8001c7a0:	00038497          	auipc	s1,0x38
    8001c7a4:	87048493          	addi	s1,s1,-1936 # 80054010 <excpt>
    8001c7a8:	00011597          	auipc	a1,0x11
    8001c7ac:	be058593          	addi	a1,a1,-1056 # 8002d388 <__func__.0+0x2d0>
    8001c7b0:	cf89                	beqz	a5,8001c7ca <amo_access_fault_10+0xb2>
    8001c7b2:	6498                	ld	a4,8(s1)
    8001c7b4:	479d                	li	a5,7
    8001c7b6:	00011597          	auipc	a1,0x11
    8001c7ba:	bc258593          	addi	a1,a1,-1086 # 8002d378 <__func__.0+0x2c0>
    8001c7be:	00f70663          	beq	a4,a5,8001c7ca <amo_access_fault_10+0xb2>
    8001c7c2:	00011597          	auipc	a1,0x11
    8001c7c6:	bc658593          	addi	a1,a1,-1082 # 8002d388 <__func__.0+0x2d0>
    8001c7ca:	00011517          	auipc	a0,0x11
    8001c7ce:	bfe50513          	addi	a0,a0,-1026 # 8002d3c8 <__func__.0+0x310>
    8001c7d2:	6840e0ef          	jal	8002ae56 <printf>
    8001c7d6:	00038797          	auipc	a5,0x38
    8001c7da:	83b7c783          	lbu	a5,-1989(a5) # 80054011 <excpt+0x1>
    8001c7de:	c789                	beqz	a5,8001c7e8 <amo_access_fault_10+0xd0>
    8001c7e0:	6498                	ld	a4,8(s1)
    8001c7e2:	479d                	li	a5,7
    8001c7e4:	00f70c63          	beq	a4,a5,8001c7fc <amo_access_fault_10+0xe4>
    8001c7e8:	00011517          	auipc	a0,0x11
    8001c7ec:	be850513          	addi	a0,a0,-1048 # 8002d3d0 <__func__.0+0x318>
    8001c7f0:	6660e0ef          	jal	8002ae56 <printf>
    8001c7f4:	02900513          	li	a0,41
    8001c7f8:	34c0d0ef          	jal	80029b44 <putchar>
    8001c7fc:	4529                	li	a0,10
    8001c7fe:	3460d0ef          	jal	80029b44 <putchar>
    8001c802:	00038417          	auipc	s0,0x38
    8001c806:	80f44403          	lbu	s0,-2033(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c80a:	00011597          	auipc	a1,0x11
    8001c80e:	b7e58593          	addi	a1,a1,-1154 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c812:	cc11                	beqz	s0,8001c82e <amo_access_fault_10+0x116>
    8001c814:	6498                	ld	a4,8(s1)
    8001c816:	479d                	li	a5,7
    TEST_END();
    8001c818:	00011597          	auipc	a1,0x11
    8001c81c:	b6058593          	addi	a1,a1,-1184 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c820:	00f70763          	beq	a4,a5,8001c82e <amo_access_fault_10+0x116>
    8001c824:	4401                	li	s0,0
    TEST_END();
    8001c826:	00011597          	auipc	a1,0x11
    8001c82a:	b6258593          	addi	a1,a1,-1182 # 8002d388 <__func__.0+0x2d0>
    8001c82e:	00011517          	auipc	a0,0x11
    8001c832:	c0250513          	addi	a0,a0,-1022 # 8002d430 <__func__.0+0x378>
    8001c836:	6200e0ef          	jal	8002ae56 <printf>
    8001c83a:	4511                	li	a0,4
    8001c83c:	ecce40ef          	jal	80000f08 <goto_priv>
    8001c840:	fe5e40ef          	jal	80001824 <reset_state>
}
    8001c844:	60e2                	ld	ra,24(sp)
    8001c846:	8522                	mv	a0,s0
    8001c848:	6442                	ld	s0,16(sp)
    8001c84a:	64a2                	ld	s1,8(sp)
    8001c84c:	6105                	addi	sp,sp,32
    8001c84e:	8082                	ret

000000008001c850 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001c850:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c852:	00010597          	auipc	a1,0x10
    8001c856:	dae58593          	addi	a1,a1,-594 # 8002c600 <__func__.9>
    8001c85a:	00011517          	auipc	a0,0x11
    8001c85e:	b3e50513          	addi	a0,a0,-1218 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001c862:	ec06                	sd	ra,24(sp)
    8001c864:	e822                	sd	s0,16(sp)
    8001c866:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c868:	5ee0e0ef          	jal	8002ae56 <printf>
    8001c86c:	4529                	li	a0,10
    8001c86e:	2d60d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c872:	4511                	li	a0,4
    8001c874:	e94e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c878:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c87c:	10000793          	li	a5,256
    8001c880:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c884:	20000793          	li	a5,512
    8001c888:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c88c:	40000793          	li	a5,1024
    8001c890:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c894:	6785                	lui	a5,0x1
    8001c896:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c89a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c89e:	4785                	li	a5,1
    8001c8a0:	07fe                	slli	a5,a5,0x1f
    8001c8a2:	4485                	li	s1,1
    8001c8a4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c8a8:	08100793          	li	a5,129
    8001c8ac:	07e2                	slli	a5,a5,0x18
    8001c8ae:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c8b2:	67a1                	lui	a5,0x8
    8001c8b4:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c8b8:	d54e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c8bc:	02149793          	slli	a5,s1,0x21
    8001c8c0:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c8c4:	00037417          	auipc	s0,0x37
    8001c8c8:	74c40413          	addi	s0,s0,1868 # 80054010 <excpt>
    8001c8cc:	00000297          	auipc	t0,0x0
    8001c8d0:	00c28293          	addi	t0,t0,12 # 8001c8d8 <instruction_access_fault_1+0x88>
    8001c8d4:	02543c23          	sd	t0,56(s0)
    8001c8d8:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001c8da:	00037597          	auipc	a1,0x37
    8001c8de:	7375c583          	lbu	a1,1847(a1) # 80054011 <excpt+0x1>
    8001c8e2:	00011517          	auipc	a0,0x11
    8001c8e6:	63e50513          	addi	a0,a0,1598 # 8002df20 <__func__.0+0xe68>
    8001c8ea:	56c0e0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001c8ee:	640c                	ld	a1,8(s0)
    8001c8f0:	00011517          	auipc	a0,0x11
    8001c8f4:	63050513          	addi	a0,a0,1584 # 8002df20 <__func__.0+0xe68>
    8001c8f8:	55e0e0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c8fc:	08200593          	li	a1,130
    8001c900:	00018617          	auipc	a2,0x18
    8001c904:	81060613          	addi	a2,a2,-2032 # 80034110 <__func__.0+0x7058>
    8001c908:	00011517          	auipc	a0,0x11
    8001c90c:	aa850513          	addi	a0,a0,-1368 # 8002d3b0 <__func__.0+0x2f8>
    8001c910:	5460e0ef          	jal	8002ae56 <printf>
    8001c914:	00037797          	auipc	a5,0x37
    8001c918:	6fd7c783          	lbu	a5,1789(a5) # 80054011 <excpt+0x1>
    8001c91c:	00011597          	auipc	a1,0x11
    8001c920:	a6c58593          	addi	a1,a1,-1428 # 8002d388 <__func__.0+0x2d0>
    8001c924:	cf81                	beqz	a5,8001c93c <instruction_access_fault_1+0xec>
    8001c926:	641c                	ld	a5,8(s0)
    8001c928:	00011597          	auipc	a1,0x11
    8001c92c:	a5058593          	addi	a1,a1,-1456 # 8002d378 <__func__.0+0x2c0>
    8001c930:	00978663          	beq	a5,s1,8001c93c <instruction_access_fault_1+0xec>
    8001c934:	00011597          	auipc	a1,0x11
    8001c938:	a5458593          	addi	a1,a1,-1452 # 8002d388 <__func__.0+0x2d0>
    8001c93c:	00011517          	auipc	a0,0x11
    8001c940:	a8c50513          	addi	a0,a0,-1396 # 8002d3c8 <__func__.0+0x310>
    8001c944:	5120e0ef          	jal	8002ae56 <printf>
    8001c948:	00037797          	auipc	a5,0x37
    8001c94c:	6c97c783          	lbu	a5,1737(a5) # 80054011 <excpt+0x1>
    8001c950:	c789                	beqz	a5,8001c95a <instruction_access_fault_1+0x10a>
    8001c952:	6418                	ld	a4,8(s0)
    8001c954:	4785                	li	a5,1
    8001c956:	00f70c63          	beq	a4,a5,8001c96e <instruction_access_fault_1+0x11e>
    8001c95a:	00011517          	auipc	a0,0x11
    8001c95e:	a7650513          	addi	a0,a0,-1418 # 8002d3d0 <__func__.0+0x318>
    8001c962:	4f40e0ef          	jal	8002ae56 <printf>
    8001c966:	02900513          	li	a0,41
    8001c96a:	1da0d0ef          	jal	80029b44 <putchar>
    8001c96e:	4529                	li	a0,10
    8001c970:	1d40d0ef          	jal	80029b44 <putchar>
    8001c974:	00037497          	auipc	s1,0x37
    8001c978:	69d4c483          	lbu	s1,1693(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001c97c:	00011597          	auipc	a1,0x11
    8001c980:	a0c58593          	addi	a1,a1,-1524 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c984:	cc91                	beqz	s1,8001c9a0 <instruction_access_fault_1+0x150>
    8001c986:	6418                	ld	a4,8(s0)
    8001c988:	4785                	li	a5,1
    TEST_END();
    8001c98a:	00011597          	auipc	a1,0x11
    8001c98e:	9ee58593          	addi	a1,a1,-1554 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c992:	00f70763          	beq	a4,a5,8001c9a0 <instruction_access_fault_1+0x150>
    8001c996:	4481                	li	s1,0
    TEST_END();
    8001c998:	00011597          	auipc	a1,0x11
    8001c99c:	9f058593          	addi	a1,a1,-1552 # 8002d388 <__func__.0+0x2d0>
    8001c9a0:	00011517          	auipc	a0,0x11
    8001c9a4:	a9050513          	addi	a0,a0,-1392 # 8002d430 <__func__.0+0x378>
    8001c9a8:	4ae0e0ef          	jal	8002ae56 <printf>
    8001c9ac:	4511                	li	a0,4
    8001c9ae:	d5ae40ef          	jal	80000f08 <goto_priv>
    8001c9b2:	e73e40ef          	jal	80001824 <reset_state>
}
    8001c9b6:	60e2                	ld	ra,24(sp)
    8001c9b8:	6442                	ld	s0,16(sp)
    8001c9ba:	8526                	mv	a0,s1
    8001c9bc:	64a2                	ld	s1,8(sp)
    8001c9be:	6105                	addi	sp,sp,32
    8001c9c0:	8082                	ret

000000008001c9c2 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001c9c2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c9c4:	00010597          	auipc	a1,0x10
    8001c9c8:	c5c58593          	addi	a1,a1,-932 # 8002c620 <__func__.8>
    8001c9cc:	00011517          	auipc	a0,0x11
    8001c9d0:	9cc50513          	addi	a0,a0,-1588 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001c9d4:	ec06                	sd	ra,24(sp)
    8001c9d6:	e822                	sd	s0,16(sp)
    8001c9d8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c9da:	47c0e0ef          	jal	8002ae56 <printf>
    8001c9de:	4529                	li	a0,10
    8001c9e0:	1640d0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001c9e4:	4511                	li	a0,4
    8001c9e6:	d22e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c9ea:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c9ee:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c9f2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c9f6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c9fa:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c9fe:	10000793          	li	a5,256
    8001ca02:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ca06:	20000793          	li	a5,512
    8001ca0a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ca0e:	40000793          	li	a5,1024
    8001ca12:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ca16:	6785                	lui	a5,0x1
    8001ca18:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ca1c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ca20:	4785                	li	a5,1
    8001ca22:	07fe                	slli	a5,a5,0x1f
    8001ca24:	4485                	li	s1,1
    8001ca26:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ca2a:	08100793          	li	a5,129
    8001ca2e:	07e2                	slli	a5,a5,0x18
    8001ca30:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ca34:	08000793          	li	a5,128
    8001ca38:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ca3c:	67a1                	lui	a5,0x8
    8001ca3e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ca42:	450d                	li	a0,3
    8001ca44:	cc4e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ca48:	bc4e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ca4c:	02149793          	slli	a5,s1,0x21
    8001ca50:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ca54:	00037417          	auipc	s0,0x37
    8001ca58:	5bc40413          	addi	s0,s0,1468 # 80054010 <excpt>
    8001ca5c:	00000297          	auipc	t0,0x0
    8001ca60:	00c28293          	addi	t0,t0,12 # 8001ca68 <instruction_access_fault_2+0xa6>
    8001ca64:	02543c23          	sd	t0,56(s0)
    8001ca68:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca6a:	08200593          	li	a1,130
    8001ca6e:	00017617          	auipc	a2,0x17
    8001ca72:	6ea60613          	addi	a2,a2,1770 # 80034158 <__func__.0+0x70a0>
    8001ca76:	00011517          	auipc	a0,0x11
    8001ca7a:	93a50513          	addi	a0,a0,-1734 # 8002d3b0 <__func__.0+0x2f8>
    8001ca7e:	3d80e0ef          	jal	8002ae56 <printf>
    8001ca82:	00037797          	auipc	a5,0x37
    8001ca86:	58f7c783          	lbu	a5,1423(a5) # 80054011 <excpt+0x1>
    8001ca8a:	00011597          	auipc	a1,0x11
    8001ca8e:	8fe58593          	addi	a1,a1,-1794 # 8002d388 <__func__.0+0x2d0>
    8001ca92:	cf81                	beqz	a5,8001caaa <instruction_access_fault_2+0xe8>
    8001ca94:	641c                	ld	a5,8(s0)
    8001ca96:	00011597          	auipc	a1,0x11
    8001ca9a:	8e258593          	addi	a1,a1,-1822 # 8002d378 <__func__.0+0x2c0>
    8001ca9e:	00978663          	beq	a5,s1,8001caaa <instruction_access_fault_2+0xe8>
    8001caa2:	00011597          	auipc	a1,0x11
    8001caa6:	8e658593          	addi	a1,a1,-1818 # 8002d388 <__func__.0+0x2d0>
    8001caaa:	00011517          	auipc	a0,0x11
    8001caae:	91e50513          	addi	a0,a0,-1762 # 8002d3c8 <__func__.0+0x310>
    8001cab2:	3a40e0ef          	jal	8002ae56 <printf>
    8001cab6:	00037797          	auipc	a5,0x37
    8001caba:	55b7c783          	lbu	a5,1371(a5) # 80054011 <excpt+0x1>
    8001cabe:	c789                	beqz	a5,8001cac8 <instruction_access_fault_2+0x106>
    8001cac0:	6418                	ld	a4,8(s0)
    8001cac2:	4785                	li	a5,1
    8001cac4:	00f70c63          	beq	a4,a5,8001cadc <instruction_access_fault_2+0x11a>
    8001cac8:	00011517          	auipc	a0,0x11
    8001cacc:	90850513          	addi	a0,a0,-1784 # 8002d3d0 <__func__.0+0x318>
    8001cad0:	3860e0ef          	jal	8002ae56 <printf>
    8001cad4:	02900513          	li	a0,41
    8001cad8:	06c0d0ef          	jal	80029b44 <putchar>
    8001cadc:	4529                	li	a0,10
    8001cade:	0660d0ef          	jal	80029b44 <putchar>
    8001cae2:	00037497          	auipc	s1,0x37
    8001cae6:	52f4c483          	lbu	s1,1327(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001caea:	00011597          	auipc	a1,0x11
    8001caee:	89e58593          	addi	a1,a1,-1890 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001caf2:	cc91                	beqz	s1,8001cb0e <instruction_access_fault_2+0x14c>
    8001caf4:	6418                	ld	a4,8(s0)
    8001caf6:	4785                	li	a5,1
    TEST_END();
    8001caf8:	00011597          	auipc	a1,0x11
    8001cafc:	88058593          	addi	a1,a1,-1920 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cb00:	00f70763          	beq	a4,a5,8001cb0e <instruction_access_fault_2+0x14c>
    8001cb04:	4481                	li	s1,0
    TEST_END();
    8001cb06:	00011597          	auipc	a1,0x11
    8001cb0a:	88258593          	addi	a1,a1,-1918 # 8002d388 <__func__.0+0x2d0>
    8001cb0e:	00011517          	auipc	a0,0x11
    8001cb12:	92250513          	addi	a0,a0,-1758 # 8002d430 <__func__.0+0x378>
    8001cb16:	3400e0ef          	jal	8002ae56 <printf>
    8001cb1a:	4511                	li	a0,4
    8001cb1c:	bece40ef          	jal	80000f08 <goto_priv>
    8001cb20:	d05e40ef          	jal	80001824 <reset_state>
}
    8001cb24:	60e2                	ld	ra,24(sp)
    8001cb26:	6442                	ld	s0,16(sp)
    8001cb28:	8526                	mv	a0,s1
    8001cb2a:	64a2                	ld	s1,8(sp)
    8001cb2c:	6105                	addi	sp,sp,32
    8001cb2e:	8082                	ret

000000008001cb30 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001cb30:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cb32:	00010597          	auipc	a1,0x10
    8001cb36:	b0e58593          	addi	a1,a1,-1266 # 8002c640 <__func__.7>
    8001cb3a:	00011517          	auipc	a0,0x11
    8001cb3e:	85e50513          	addi	a0,a0,-1954 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001cb42:	ec06                	sd	ra,24(sp)
    8001cb44:	e822                	sd	s0,16(sp)
    8001cb46:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cb48:	30e0e0ef          	jal	8002ae56 <printf>
    8001cb4c:	4529                	li	a0,10
    8001cb4e:	7f70c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001cb52:	4511                	li	a0,4
    8001cb54:	bb4e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cb58:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cb5c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cb60:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cb64:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cb68:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cb6c:	10000793          	li	a5,256
    8001cb70:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cb74:	20000793          	li	a5,512
    8001cb78:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cb7c:	40000793          	li	a5,1024
    8001cb80:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cb84:	6785                	lui	a5,0x1
    8001cb86:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cb8a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cb8e:	4785                	li	a5,1
    8001cb90:	07fe                	slli	a5,a5,0x1f
    8001cb92:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cb96:	08100793          	li	a5,129
    8001cb9a:	07e2                	slli	a5,a5,0x18
    8001cb9c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cba0:	08000793          	li	a5,128
    8001cba4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cba8:	67a1                	lui	a5,0x8
    8001cbaa:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cbae:	4505                	li	a0,1
    8001cbb0:	b58e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cbb4:	a58e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cbb8:	4785                	li	a5,1
    8001cbba:	1786                	slli	a5,a5,0x21
    8001cbbc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cbc0:	00037417          	auipc	s0,0x37
    8001cbc4:	45040413          	addi	s0,s0,1104 # 80054010 <excpt>
    8001cbc8:	00000297          	auipc	t0,0x0
    8001cbcc:	00c28293          	addi	t0,t0,12 # 8001cbd4 <instruction_access_fault_3+0xa4>
    8001cbd0:	02543c23          	sd	t0,56(s0)
    8001cbd4:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbd6:	08200593          	li	a1,130
    8001cbda:	00017617          	auipc	a2,0x17
    8001cbde:	5c660613          	addi	a2,a2,1478 # 800341a0 <__func__.0+0x70e8>
    8001cbe2:	00010517          	auipc	a0,0x10
    8001cbe6:	7ce50513          	addi	a0,a0,1998 # 8002d3b0 <__func__.0+0x2f8>
    8001cbea:	26c0e0ef          	jal	8002ae56 <printf>
    8001cbee:	00037797          	auipc	a5,0x37
    8001cbf2:	4237c783          	lbu	a5,1059(a5) # 80054011 <excpt+0x1>
    8001cbf6:	00010597          	auipc	a1,0x10
    8001cbfa:	79258593          	addi	a1,a1,1938 # 8002d388 <__func__.0+0x2d0>
    8001cbfe:	cf89                	beqz	a5,8001cc18 <instruction_access_fault_3+0xe8>
    8001cc00:	641c                	ld	a5,8(s0)
    8001cc02:	4705                	li	a4,1
    8001cc04:	00010597          	auipc	a1,0x10
    8001cc08:	77458593          	addi	a1,a1,1908 # 8002d378 <__func__.0+0x2c0>
    8001cc0c:	00e78663          	beq	a5,a4,8001cc18 <instruction_access_fault_3+0xe8>
    8001cc10:	00010597          	auipc	a1,0x10
    8001cc14:	77858593          	addi	a1,a1,1912 # 8002d388 <__func__.0+0x2d0>
    8001cc18:	00010517          	auipc	a0,0x10
    8001cc1c:	7b050513          	addi	a0,a0,1968 # 8002d3c8 <__func__.0+0x310>
    8001cc20:	2360e0ef          	jal	8002ae56 <printf>
    8001cc24:	00037797          	auipc	a5,0x37
    8001cc28:	3ed7c783          	lbu	a5,1005(a5) # 80054011 <excpt+0x1>
    8001cc2c:	c789                	beqz	a5,8001cc36 <instruction_access_fault_3+0x106>
    8001cc2e:	6418                	ld	a4,8(s0)
    8001cc30:	4785                	li	a5,1
    8001cc32:	00f70c63          	beq	a4,a5,8001cc4a <instruction_access_fault_3+0x11a>
    8001cc36:	00010517          	auipc	a0,0x10
    8001cc3a:	79a50513          	addi	a0,a0,1946 # 8002d3d0 <__func__.0+0x318>
    8001cc3e:	2180e0ef          	jal	8002ae56 <printf>
    8001cc42:	02900513          	li	a0,41
    8001cc46:	6ff0c0ef          	jal	80029b44 <putchar>
    8001cc4a:	4529                	li	a0,10
    8001cc4c:	6f90c0ef          	jal	80029b44 <putchar>
    8001cc50:	00037497          	auipc	s1,0x37
    8001cc54:	3c14c483          	lbu	s1,961(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cc58:	00010597          	auipc	a1,0x10
    8001cc5c:	73058593          	addi	a1,a1,1840 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc60:	cc91                	beqz	s1,8001cc7c <instruction_access_fault_3+0x14c>
    8001cc62:	6418                	ld	a4,8(s0)
    8001cc64:	4785                	li	a5,1
    TEST_END();
    8001cc66:	00010597          	auipc	a1,0x10
    8001cc6a:	71258593          	addi	a1,a1,1810 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc6e:	00f70763          	beq	a4,a5,8001cc7c <instruction_access_fault_3+0x14c>
    8001cc72:	4481                	li	s1,0
    TEST_END();
    8001cc74:	00010597          	auipc	a1,0x10
    8001cc78:	71458593          	addi	a1,a1,1812 # 8002d388 <__func__.0+0x2d0>
    8001cc7c:	00010517          	auipc	a0,0x10
    8001cc80:	7b450513          	addi	a0,a0,1972 # 8002d430 <__func__.0+0x378>
    8001cc84:	1d20e0ef          	jal	8002ae56 <printf>
    8001cc88:	4511                	li	a0,4
    8001cc8a:	a7ee40ef          	jal	80000f08 <goto_priv>
    8001cc8e:	b97e40ef          	jal	80001824 <reset_state>
}
    8001cc92:	60e2                	ld	ra,24(sp)
    8001cc94:	6442                	ld	s0,16(sp)
    8001cc96:	8526                	mv	a0,s1
    8001cc98:	64a2                	ld	s1,8(sp)
    8001cc9a:	6105                	addi	sp,sp,32
    8001cc9c:	8082                	ret

000000008001cc9e <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001cc9e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cca0:	00010597          	auipc	a1,0x10
    8001cca4:	9c058593          	addi	a1,a1,-1600 # 8002c660 <__func__.6>
    8001cca8:	00010517          	auipc	a0,0x10
    8001ccac:	6f050513          	addi	a0,a0,1776 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001ccb0:	ec06                	sd	ra,24(sp)
    8001ccb2:	e822                	sd	s0,16(sp)
    8001ccb4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ccb6:	1a00e0ef          	jal	8002ae56 <printf>
    8001ccba:	4529                	li	a0,10
    8001ccbc:	6890c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001ccc0:	4511                	li	a0,4
    8001ccc2:	a46e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ccc6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ccca:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ccce:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ccd2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ccd6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ccda:	10000793          	li	a5,256
    8001ccde:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cce2:	20000793          	li	a5,512
    8001cce6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ccea:	40000793          	li	a5,1024
    8001ccee:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ccf2:	6785                	lui	a5,0x1
    8001ccf4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ccf8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ccfc:	4785                	li	a5,1
    8001ccfe:	07fe                	slli	a5,a5,0x1f
    8001cd00:	4485                	li	s1,1
    8001cd02:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cd06:	08100793          	li	a5,129
    8001cd0a:	07e2                	slli	a5,a5,0x18
    8001cd0c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cd10:	08000793          	li	a5,128
    8001cd14:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cd18:	67a1                	lui	a5,0x8
    8001cd1a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cd1e:	4501                	li	a0,0
    8001cd20:	9e8e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cd24:	8e8e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cd28:	02149793          	slli	a5,s1,0x21
    8001cd2c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cd30:	00037417          	auipc	s0,0x37
    8001cd34:	2e040413          	addi	s0,s0,736 # 80054010 <excpt>
    8001cd38:	00000297          	auipc	t0,0x0
    8001cd3c:	00c28293          	addi	t0,t0,12 # 8001cd44 <instruction_access_fault_4+0xa6>
    8001cd40:	02543c23          	sd	t0,56(s0)
    8001cd44:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd46:	08200593          	li	a1,130
    8001cd4a:	00017617          	auipc	a2,0x17
    8001cd4e:	49e60613          	addi	a2,a2,1182 # 800341e8 <__func__.0+0x7130>
    8001cd52:	00010517          	auipc	a0,0x10
    8001cd56:	65e50513          	addi	a0,a0,1630 # 8002d3b0 <__func__.0+0x2f8>
    8001cd5a:	0fc0e0ef          	jal	8002ae56 <printf>
    8001cd5e:	00037797          	auipc	a5,0x37
    8001cd62:	2b37c783          	lbu	a5,691(a5) # 80054011 <excpt+0x1>
    8001cd66:	00010597          	auipc	a1,0x10
    8001cd6a:	62258593          	addi	a1,a1,1570 # 8002d388 <__func__.0+0x2d0>
    8001cd6e:	cf81                	beqz	a5,8001cd86 <instruction_access_fault_4+0xe8>
    8001cd70:	641c                	ld	a5,8(s0)
    8001cd72:	00010597          	auipc	a1,0x10
    8001cd76:	60658593          	addi	a1,a1,1542 # 8002d378 <__func__.0+0x2c0>
    8001cd7a:	00978663          	beq	a5,s1,8001cd86 <instruction_access_fault_4+0xe8>
    8001cd7e:	00010597          	auipc	a1,0x10
    8001cd82:	60a58593          	addi	a1,a1,1546 # 8002d388 <__func__.0+0x2d0>
    8001cd86:	00010517          	auipc	a0,0x10
    8001cd8a:	64250513          	addi	a0,a0,1602 # 8002d3c8 <__func__.0+0x310>
    8001cd8e:	0c80e0ef          	jal	8002ae56 <printf>
    8001cd92:	00037797          	auipc	a5,0x37
    8001cd96:	27f7c783          	lbu	a5,639(a5) # 80054011 <excpt+0x1>
    8001cd9a:	c789                	beqz	a5,8001cda4 <instruction_access_fault_4+0x106>
    8001cd9c:	6418                	ld	a4,8(s0)
    8001cd9e:	4785                	li	a5,1
    8001cda0:	00f70c63          	beq	a4,a5,8001cdb8 <instruction_access_fault_4+0x11a>
    8001cda4:	00010517          	auipc	a0,0x10
    8001cda8:	62c50513          	addi	a0,a0,1580 # 8002d3d0 <__func__.0+0x318>
    8001cdac:	0aa0e0ef          	jal	8002ae56 <printf>
    8001cdb0:	02900513          	li	a0,41
    8001cdb4:	5910c0ef          	jal	80029b44 <putchar>
    8001cdb8:	4529                	li	a0,10
    8001cdba:	58b0c0ef          	jal	80029b44 <putchar>
    8001cdbe:	00037497          	auipc	s1,0x37
    8001cdc2:	2534c483          	lbu	s1,595(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cdc6:	00010597          	auipc	a1,0x10
    8001cdca:	5c258593          	addi	a1,a1,1474 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cdce:	cc91                	beqz	s1,8001cdea <instruction_access_fault_4+0x14c>
    8001cdd0:	6418                	ld	a4,8(s0)
    8001cdd2:	4785                	li	a5,1
    TEST_END();
    8001cdd4:	00010597          	auipc	a1,0x10
    8001cdd8:	5a458593          	addi	a1,a1,1444 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cddc:	00f70763          	beq	a4,a5,8001cdea <instruction_access_fault_4+0x14c>
    8001cde0:	4481                	li	s1,0
    TEST_END();
    8001cde2:	00010597          	auipc	a1,0x10
    8001cde6:	5a658593          	addi	a1,a1,1446 # 8002d388 <__func__.0+0x2d0>
    8001cdea:	00010517          	auipc	a0,0x10
    8001cdee:	64650513          	addi	a0,a0,1606 # 8002d430 <__func__.0+0x378>
    8001cdf2:	0640e0ef          	jal	8002ae56 <printf>
    8001cdf6:	4511                	li	a0,4
    8001cdf8:	910e40ef          	jal	80000f08 <goto_priv>
    8001cdfc:	a29e40ef          	jal	80001824 <reset_state>
}
    8001ce00:	60e2                	ld	ra,24(sp)
    8001ce02:	6442                	ld	s0,16(sp)
    8001ce04:	8526                	mv	a0,s1
    8001ce06:	64a2                	ld	s1,8(sp)
    8001ce08:	6105                	addi	sp,sp,32
    8001ce0a:	8082                	ret

000000008001ce0c <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001ce0c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ce0e:	00010597          	auipc	a1,0x10
    8001ce12:	87258593          	addi	a1,a1,-1934 # 8002c680 <__func__.5>
    8001ce16:	00010517          	auipc	a0,0x10
    8001ce1a:	58250513          	addi	a0,a0,1410 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001ce1e:	e406                	sd	ra,8(sp)
    8001ce20:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ce22:	0340e0ef          	jal	8002ae56 <printf>
    8001ce26:	4529                	li	a0,10
    8001ce28:	51d0c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001ce2c:	4511                	li	a0,4
    8001ce2e:	8dae40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ce32:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ce36:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ce3a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ce3e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ce42:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ce46:	10000793          	li	a5,256
    8001ce4a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ce4e:	20000793          	li	a5,512
    8001ce52:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ce56:	40000793          	li	a5,1024
    8001ce5a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ce5e:	6785                	lui	a5,0x1
    8001ce60:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ce64:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001ce68:	4785                	li	a5,1
    8001ce6a:	07fe                	slli	a5,a5,0x1f
    8001ce6c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001ce70:	08100793          	li	a5,129
    8001ce74:	07e2                	slli	a5,a5,0x18
    8001ce76:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ce7a:	67a1                	lui	a5,0x8
    8001ce7c:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001ce80:	f8de30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ce84:	4785                	li	a5,1
    8001ce86:	1786                	slli	a5,a5,0x21
    8001ce88:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ce8c:	00037417          	auipc	s0,0x37
    8001ce90:	18440413          	addi	s0,s0,388 # 80054010 <excpt>
    8001ce94:	00000297          	auipc	t0,0x0
    8001ce98:	00c28293          	addi	t0,t0,12 # 8001cea0 <instruction_access_fault_5+0x94>
    8001ce9c:	02543c23          	sd	t0,56(s0)
    8001cea0:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001cea2:	00037597          	auipc	a1,0x37
    8001cea6:	16f5c583          	lbu	a1,367(a1) # 80054011 <excpt+0x1>
    8001ceaa:	00011517          	auipc	a0,0x11
    8001ceae:	07650513          	addi	a0,a0,118 # 8002df20 <__func__.0+0xe68>
    8001ceb2:	7a50d0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001ceb6:	640c                	ld	a1,8(s0)
    8001ceb8:	00011517          	auipc	a0,0x11
    8001cebc:	06850513          	addi	a0,a0,104 # 8002df20 <__func__.0+0xe68>
    8001cec0:	7970d0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cec4:	08200593          	li	a1,130
    8001cec8:	00017617          	auipc	a2,0x17
    8001cecc:	36860613          	addi	a2,a2,872 # 80034230 <__func__.0+0x7178>
    8001ced0:	00010517          	auipc	a0,0x10
    8001ced4:	4e050513          	addi	a0,a0,1248 # 8002d3b0 <__func__.0+0x2f8>
    8001ced8:	77f0d0ef          	jal	8002ae56 <printf>
    8001cedc:	00037797          	auipc	a5,0x37
    8001cee0:	1357c783          	lbu	a5,309(a5) # 80054011 <excpt+0x1>
    8001cee4:	00010597          	auipc	a1,0x10
    8001cee8:	49458593          	addi	a1,a1,1172 # 8002d378 <__func__.0+0x2c0>
    8001ceec:	c789                	beqz	a5,8001cef6 <instruction_access_fault_5+0xea>
    8001ceee:	00010597          	auipc	a1,0x10
    8001cef2:	49a58593          	addi	a1,a1,1178 # 8002d388 <__func__.0+0x2d0>
    8001cef6:	00010517          	auipc	a0,0x10
    8001cefa:	4d250513          	addi	a0,a0,1234 # 8002d3c8 <__func__.0+0x310>
    8001cefe:	7590d0ef          	jal	8002ae56 <printf>
    8001cf02:	00037797          	auipc	a5,0x37
    8001cf06:	10f7c783          	lbu	a5,271(a5) # 80054011 <excpt+0x1>
    8001cf0a:	e7a1                	bnez	a5,8001cf52 <instruction_access_fault_5+0x146>
    8001cf0c:	4529                	li	a0,10
    8001cf0e:	4370c0ef          	jal	80029b44 <putchar>
    8001cf12:	00037797          	auipc	a5,0x37
    8001cf16:	0ff7c783          	lbu	a5,255(a5) # 80054011 <excpt+0x1>
    8001cf1a:	e795                	bnez	a5,8001cf46 <instruction_access_fault_5+0x13a>
    8001cf1c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001cf1e:	00010597          	auipc	a1,0x10
    8001cf22:	45a58593          	addi	a1,a1,1114 # 8002d378 <__func__.0+0x2c0>
    8001cf26:	00010517          	auipc	a0,0x10
    8001cf2a:	50a50513          	addi	a0,a0,1290 # 8002d430 <__func__.0+0x378>
    8001cf2e:	7290d0ef          	jal	8002ae56 <printf>
    8001cf32:	4511                	li	a0,4
    8001cf34:	fd5e30ef          	jal	80000f08 <goto_priv>
    8001cf38:	8ede40ef          	jal	80001824 <reset_state>
}
    8001cf3c:	60a2                	ld	ra,8(sp)
    8001cf3e:	8522                	mv	a0,s0
    8001cf40:	6402                	ld	s0,0(sp)
    8001cf42:	0141                	addi	sp,sp,16
    8001cf44:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cf46:	4401                	li	s0,0
    TEST_END();
    8001cf48:	00010597          	auipc	a1,0x10
    8001cf4c:	44058593          	addi	a1,a1,1088 # 8002d388 <__func__.0+0x2d0>
    8001cf50:	bfd9                	j	8001cf26 <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cf52:	00010517          	auipc	a0,0x10
    8001cf56:	47e50513          	addi	a0,a0,1150 # 8002d3d0 <__func__.0+0x318>
    8001cf5a:	6fd0d0ef          	jal	8002ae56 <printf>
    8001cf5e:	02900513          	li	a0,41
    8001cf62:	3e30c0ef          	jal	80029b44 <putchar>
    8001cf66:	b75d                	j	8001cf0c <instruction_access_fault_5+0x100>

000000008001cf68 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001cf68:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cf6a:	0000f597          	auipc	a1,0xf
    8001cf6e:	73658593          	addi	a1,a1,1846 # 8002c6a0 <__func__.4>
    8001cf72:	00010517          	auipc	a0,0x10
    8001cf76:	42650513          	addi	a0,a0,1062 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001cf7a:	ec06                	sd	ra,24(sp)
    8001cf7c:	e822                	sd	s0,16(sp)
    8001cf7e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cf80:	6d70d0ef          	jal	8002ae56 <printf>
    8001cf84:	4529                	li	a0,10
    8001cf86:	3bf0c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001cf8a:	4511                	li	a0,4
    8001cf8c:	f7de30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cf90:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cf94:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cf98:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cf9c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cfa0:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cfa4:	10000793          	li	a5,256
    8001cfa8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cfac:	20000793          	li	a5,512
    8001cfb0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cfb4:	40000793          	li	a5,1024
    8001cfb8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cfbc:	6785                	lui	a5,0x1
    8001cfbe:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cfc2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cfc6:	4785                	li	a5,1
    8001cfc8:	07fe                	slli	a5,a5,0x1f
    8001cfca:	4485                	li	s1,1
    8001cfcc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cfd0:	08100793          	li	a5,129
    8001cfd4:	07e2                	slli	a5,a5,0x18
    8001cfd6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cfda:	08000793          	li	a5,128
    8001cfde:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cfe2:	67a1                	lui	a5,0x8
    8001cfe4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cfe8:	450d                	li	a0,3
    8001cfea:	f1fe30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cfee:	e1fe30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cff2:	02149793          	slli	a5,s1,0x21
    8001cff6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cffa:	00037417          	auipc	s0,0x37
    8001cffe:	01640413          	addi	s0,s0,22 # 80054010 <excpt>
    8001d002:	00000297          	auipc	t0,0x0
    8001d006:	00c28293          	addi	t0,t0,12 # 8001d00e <instruction_access_fault_6+0xa6>
    8001d00a:	02543c23          	sd	t0,56(s0)
    8001d00e:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d010:	08200593          	li	a1,130
    8001d014:	00017617          	auipc	a2,0x17
    8001d018:	26460613          	addi	a2,a2,612 # 80034278 <__func__.0+0x71c0>
    8001d01c:	00010517          	auipc	a0,0x10
    8001d020:	39450513          	addi	a0,a0,916 # 8002d3b0 <__func__.0+0x2f8>
    8001d024:	6330d0ef          	jal	8002ae56 <printf>
    8001d028:	00037797          	auipc	a5,0x37
    8001d02c:	fe97c783          	lbu	a5,-23(a5) # 80054011 <excpt+0x1>
    8001d030:	00010597          	auipc	a1,0x10
    8001d034:	35858593          	addi	a1,a1,856 # 8002d388 <__func__.0+0x2d0>
    8001d038:	cf81                	beqz	a5,8001d050 <instruction_access_fault_6+0xe8>
    8001d03a:	641c                	ld	a5,8(s0)
    8001d03c:	00010597          	auipc	a1,0x10
    8001d040:	33c58593          	addi	a1,a1,828 # 8002d378 <__func__.0+0x2c0>
    8001d044:	00978663          	beq	a5,s1,8001d050 <instruction_access_fault_6+0xe8>
    8001d048:	00010597          	auipc	a1,0x10
    8001d04c:	34058593          	addi	a1,a1,832 # 8002d388 <__func__.0+0x2d0>
    8001d050:	00010517          	auipc	a0,0x10
    8001d054:	37850513          	addi	a0,a0,888 # 8002d3c8 <__func__.0+0x310>
    8001d058:	5ff0d0ef          	jal	8002ae56 <printf>
    8001d05c:	00037797          	auipc	a5,0x37
    8001d060:	fb57c783          	lbu	a5,-75(a5) # 80054011 <excpt+0x1>
    8001d064:	c789                	beqz	a5,8001d06e <instruction_access_fault_6+0x106>
    8001d066:	6418                	ld	a4,8(s0)
    8001d068:	4785                	li	a5,1
    8001d06a:	00f70c63          	beq	a4,a5,8001d082 <instruction_access_fault_6+0x11a>
    8001d06e:	00010517          	auipc	a0,0x10
    8001d072:	36250513          	addi	a0,a0,866 # 8002d3d0 <__func__.0+0x318>
    8001d076:	5e10d0ef          	jal	8002ae56 <printf>
    8001d07a:	02900513          	li	a0,41
    8001d07e:	2c70c0ef          	jal	80029b44 <putchar>
    8001d082:	4529                	li	a0,10
    8001d084:	2c10c0ef          	jal	80029b44 <putchar>
    8001d088:	00037497          	auipc	s1,0x37
    8001d08c:	f894c483          	lbu	s1,-119(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d090:	00010597          	auipc	a1,0x10
    8001d094:	2f858593          	addi	a1,a1,760 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d098:	cc91                	beqz	s1,8001d0b4 <instruction_access_fault_6+0x14c>
    8001d09a:	6418                	ld	a4,8(s0)
    8001d09c:	4785                	li	a5,1
    TEST_END();
    8001d09e:	00010597          	auipc	a1,0x10
    8001d0a2:	2da58593          	addi	a1,a1,730 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d0a6:	00f70763          	beq	a4,a5,8001d0b4 <instruction_access_fault_6+0x14c>
    8001d0aa:	4481                	li	s1,0
    TEST_END();
    8001d0ac:	00010597          	auipc	a1,0x10
    8001d0b0:	2dc58593          	addi	a1,a1,732 # 8002d388 <__func__.0+0x2d0>
    8001d0b4:	00010517          	auipc	a0,0x10
    8001d0b8:	37c50513          	addi	a0,a0,892 # 8002d430 <__func__.0+0x378>
    8001d0bc:	59b0d0ef          	jal	8002ae56 <printf>
    8001d0c0:	4511                	li	a0,4
    8001d0c2:	e47e30ef          	jal	80000f08 <goto_priv>
    8001d0c6:	f5ee40ef          	jal	80001824 <reset_state>
}
    8001d0ca:	60e2                	ld	ra,24(sp)
    8001d0cc:	6442                	ld	s0,16(sp)
    8001d0ce:	8526                	mv	a0,s1
    8001d0d0:	64a2                	ld	s1,8(sp)
    8001d0d2:	6105                	addi	sp,sp,32
    8001d0d4:	8082                	ret

000000008001d0d6 <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001d0d6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d0d8:	0000f597          	auipc	a1,0xf
    8001d0dc:	5e858593          	addi	a1,a1,1512 # 8002c6c0 <__func__.3>
    8001d0e0:	00010517          	auipc	a0,0x10
    8001d0e4:	2b850513          	addi	a0,a0,696 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001d0e8:	ec06                	sd	ra,24(sp)
    8001d0ea:	e822                	sd	s0,16(sp)
    8001d0ec:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d0ee:	5690d0ef          	jal	8002ae56 <printf>
    8001d0f2:	4529                	li	a0,10
    8001d0f4:	2510c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001d0f8:	4511                	li	a0,4
    8001d0fa:	e0fe30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d0fe:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d102:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d106:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d10a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d10e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d112:	10000793          	li	a5,256
    8001d116:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d11a:	20000793          	li	a5,512
    8001d11e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d122:	40000793          	li	a5,1024
    8001d126:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d12a:	6785                	lui	a5,0x1
    8001d12c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d130:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d134:	4785                	li	a5,1
    8001d136:	07fe                	slli	a5,a5,0x1f
    8001d138:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d13c:	08100793          	li	a5,129
    8001d140:	07e2                	slli	a5,a5,0x18
    8001d142:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d146:	08000793          	li	a5,128
    8001d14a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d14e:	67a1                	lui	a5,0x8
    8001d150:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001d154:	4505                	li	a0,1
    8001d156:	db3e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d15a:	cb3e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d15e:	4785                	li	a5,1
    8001d160:	1786                	slli	a5,a5,0x21
    8001d162:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d166:	00037417          	auipc	s0,0x37
    8001d16a:	eaa40413          	addi	s0,s0,-342 # 80054010 <excpt>
    8001d16e:	00000297          	auipc	t0,0x0
    8001d172:	00c28293          	addi	t0,t0,12 # 8001d17a <instruction_access_fault_7+0xa4>
    8001d176:	02543c23          	sd	t0,56(s0)
    8001d17a:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d17c:	08200593          	li	a1,130
    8001d180:	00017617          	auipc	a2,0x17
    8001d184:	14060613          	addi	a2,a2,320 # 800342c0 <__func__.0+0x7208>
    8001d188:	00010517          	auipc	a0,0x10
    8001d18c:	22850513          	addi	a0,a0,552 # 8002d3b0 <__func__.0+0x2f8>
    8001d190:	4c70d0ef          	jal	8002ae56 <printf>
    8001d194:	00037797          	auipc	a5,0x37
    8001d198:	e7d7c783          	lbu	a5,-387(a5) # 80054011 <excpt+0x1>
    8001d19c:	00010597          	auipc	a1,0x10
    8001d1a0:	1ec58593          	addi	a1,a1,492 # 8002d388 <__func__.0+0x2d0>
    8001d1a4:	cf89                	beqz	a5,8001d1be <instruction_access_fault_7+0xe8>
    8001d1a6:	641c                	ld	a5,8(s0)
    8001d1a8:	4705                	li	a4,1
    8001d1aa:	00010597          	auipc	a1,0x10
    8001d1ae:	1ce58593          	addi	a1,a1,462 # 8002d378 <__func__.0+0x2c0>
    8001d1b2:	00e78663          	beq	a5,a4,8001d1be <instruction_access_fault_7+0xe8>
    8001d1b6:	00010597          	auipc	a1,0x10
    8001d1ba:	1d258593          	addi	a1,a1,466 # 8002d388 <__func__.0+0x2d0>
    8001d1be:	00010517          	auipc	a0,0x10
    8001d1c2:	20a50513          	addi	a0,a0,522 # 8002d3c8 <__func__.0+0x310>
    8001d1c6:	4910d0ef          	jal	8002ae56 <printf>
    8001d1ca:	00037797          	auipc	a5,0x37
    8001d1ce:	e477c783          	lbu	a5,-441(a5) # 80054011 <excpt+0x1>
    8001d1d2:	c789                	beqz	a5,8001d1dc <instruction_access_fault_7+0x106>
    8001d1d4:	6418                	ld	a4,8(s0)
    8001d1d6:	4785                	li	a5,1
    8001d1d8:	00f70c63          	beq	a4,a5,8001d1f0 <instruction_access_fault_7+0x11a>
    8001d1dc:	00010517          	auipc	a0,0x10
    8001d1e0:	1f450513          	addi	a0,a0,500 # 8002d3d0 <__func__.0+0x318>
    8001d1e4:	4730d0ef          	jal	8002ae56 <printf>
    8001d1e8:	02900513          	li	a0,41
    8001d1ec:	1590c0ef          	jal	80029b44 <putchar>
    8001d1f0:	4529                	li	a0,10
    8001d1f2:	1530c0ef          	jal	80029b44 <putchar>
    8001d1f6:	00037497          	auipc	s1,0x37
    8001d1fa:	e1b4c483          	lbu	s1,-485(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001d1fe:	00010597          	auipc	a1,0x10
    8001d202:	18a58593          	addi	a1,a1,394 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d206:	cc91                	beqz	s1,8001d222 <instruction_access_fault_7+0x14c>
    8001d208:	6418                	ld	a4,8(s0)
    8001d20a:	4785                	li	a5,1
    TEST_END();
    8001d20c:	00010597          	auipc	a1,0x10
    8001d210:	16c58593          	addi	a1,a1,364 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d214:	00f70763          	beq	a4,a5,8001d222 <instruction_access_fault_7+0x14c>
    8001d218:	4481                	li	s1,0
    TEST_END();
    8001d21a:	00010597          	auipc	a1,0x10
    8001d21e:	16e58593          	addi	a1,a1,366 # 8002d388 <__func__.0+0x2d0>
    8001d222:	00010517          	auipc	a0,0x10
    8001d226:	20e50513          	addi	a0,a0,526 # 8002d430 <__func__.0+0x378>
    8001d22a:	42d0d0ef          	jal	8002ae56 <printf>
    8001d22e:	4511                	li	a0,4
    8001d230:	cd9e30ef          	jal	80000f08 <goto_priv>
    8001d234:	df0e40ef          	jal	80001824 <reset_state>
}
    8001d238:	60e2                	ld	ra,24(sp)
    8001d23a:	6442                	ld	s0,16(sp)
    8001d23c:	8526                	mv	a0,s1
    8001d23e:	64a2                	ld	s1,8(sp)
    8001d240:	6105                	addi	sp,sp,32
    8001d242:	8082                	ret

000000008001d244 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001d244:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d246:	0000f597          	auipc	a1,0xf
    8001d24a:	49a58593          	addi	a1,a1,1178 # 8002c6e0 <__func__.2>
    8001d24e:	00010517          	auipc	a0,0x10
    8001d252:	14a50513          	addi	a0,a0,330 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001d256:	ec06                	sd	ra,24(sp)
    8001d258:	e822                	sd	s0,16(sp)
    8001d25a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d25c:	3fb0d0ef          	jal	8002ae56 <printf>
    8001d260:	4529                	li	a0,10
    8001d262:	0e30c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001d266:	4511                	li	a0,4
    8001d268:	ca1e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d26c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d270:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d274:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d278:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d27c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d280:	10000793          	li	a5,256
    8001d284:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d288:	20000793          	li	a5,512
    8001d28c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d290:	40000793          	li	a5,1024
    8001d294:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d298:	6785                	lui	a5,0x1
    8001d29a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d29e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d2a2:	4785                	li	a5,1
    8001d2a4:	07fe                	slli	a5,a5,0x1f
    8001d2a6:	4485                	li	s1,1
    8001d2a8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d2ac:	08100793          	li	a5,129
    8001d2b0:	07e2                	slli	a5,a5,0x18
    8001d2b2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d2b6:	08000793          	li	a5,128
    8001d2ba:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d2be:	67a1                	lui	a5,0x8
    8001d2c0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d2c4:	4501                	li	a0,0
    8001d2c6:	c43e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d2ca:	b43e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d2ce:	02149793          	slli	a5,s1,0x21
    8001d2d2:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d2d6:	00037417          	auipc	s0,0x37
    8001d2da:	d3a40413          	addi	s0,s0,-710 # 80054010 <excpt>
    8001d2de:	00000297          	auipc	t0,0x0
    8001d2e2:	00c28293          	addi	t0,t0,12 # 8001d2ea <instruction_access_fault_8+0xa6>
    8001d2e6:	02543c23          	sd	t0,56(s0)
    8001d2ea:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2ec:	08200593          	li	a1,130
    8001d2f0:	00017617          	auipc	a2,0x17
    8001d2f4:	01860613          	addi	a2,a2,24 # 80034308 <__func__.0+0x7250>
    8001d2f8:	00010517          	auipc	a0,0x10
    8001d2fc:	0b850513          	addi	a0,a0,184 # 8002d3b0 <__func__.0+0x2f8>
    8001d300:	3570d0ef          	jal	8002ae56 <printf>
    8001d304:	00037797          	auipc	a5,0x37
    8001d308:	d0d7c783          	lbu	a5,-755(a5) # 80054011 <excpt+0x1>
    8001d30c:	00010597          	auipc	a1,0x10
    8001d310:	07c58593          	addi	a1,a1,124 # 8002d388 <__func__.0+0x2d0>
    8001d314:	cf81                	beqz	a5,8001d32c <instruction_access_fault_8+0xe8>
    8001d316:	641c                	ld	a5,8(s0)
    8001d318:	00010597          	auipc	a1,0x10
    8001d31c:	06058593          	addi	a1,a1,96 # 8002d378 <__func__.0+0x2c0>
    8001d320:	00978663          	beq	a5,s1,8001d32c <instruction_access_fault_8+0xe8>
    8001d324:	00010597          	auipc	a1,0x10
    8001d328:	06458593          	addi	a1,a1,100 # 8002d388 <__func__.0+0x2d0>
    8001d32c:	00010517          	auipc	a0,0x10
    8001d330:	09c50513          	addi	a0,a0,156 # 8002d3c8 <__func__.0+0x310>
    8001d334:	3230d0ef          	jal	8002ae56 <printf>
    8001d338:	00037797          	auipc	a5,0x37
    8001d33c:	cd97c783          	lbu	a5,-807(a5) # 80054011 <excpt+0x1>
    8001d340:	c789                	beqz	a5,8001d34a <instruction_access_fault_8+0x106>
    8001d342:	6418                	ld	a4,8(s0)
    8001d344:	4785                	li	a5,1
    8001d346:	00f70c63          	beq	a4,a5,8001d35e <instruction_access_fault_8+0x11a>
    8001d34a:	00010517          	auipc	a0,0x10
    8001d34e:	08650513          	addi	a0,a0,134 # 8002d3d0 <__func__.0+0x318>
    8001d352:	3050d0ef          	jal	8002ae56 <printf>
    8001d356:	02900513          	li	a0,41
    8001d35a:	7ea0c0ef          	jal	80029b44 <putchar>
    8001d35e:	4529                	li	a0,10
    8001d360:	7e40c0ef          	jal	80029b44 <putchar>
    8001d364:	00037497          	auipc	s1,0x37
    8001d368:	cad4c483          	lbu	s1,-851(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d36c:	00010597          	auipc	a1,0x10
    8001d370:	01c58593          	addi	a1,a1,28 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d374:	cc91                	beqz	s1,8001d390 <instruction_access_fault_8+0x14c>
    8001d376:	6418                	ld	a4,8(s0)
    8001d378:	4785                	li	a5,1
    TEST_END();
    8001d37a:	00010597          	auipc	a1,0x10
    8001d37e:	ffe58593          	addi	a1,a1,-2 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d382:	00f70763          	beq	a4,a5,8001d390 <instruction_access_fault_8+0x14c>
    8001d386:	4481                	li	s1,0
    TEST_END();
    8001d388:	00010597          	auipc	a1,0x10
    8001d38c:	00058593          	mv	a1,a1
    8001d390:	00010517          	auipc	a0,0x10
    8001d394:	0a050513          	addi	a0,a0,160 # 8002d430 <__func__.0+0x378>
    8001d398:	2bf0d0ef          	jal	8002ae56 <printf>
    8001d39c:	4511                	li	a0,4
    8001d39e:	b6be30ef          	jal	80000f08 <goto_priv>
    8001d3a2:	c82e40ef          	jal	80001824 <reset_state>
}
    8001d3a6:	60e2                	ld	ra,24(sp)
    8001d3a8:	6442                	ld	s0,16(sp)
    8001d3aa:	8526                	mv	a0,s1
    8001d3ac:	64a2                	ld	s1,8(sp)
    8001d3ae:	6105                	addi	sp,sp,32
    8001d3b0:	8082                	ret

000000008001d3b2 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001d3b2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d3b4:	0000f597          	auipc	a1,0xf
    8001d3b8:	34c58593          	addi	a1,a1,844 # 8002c700 <__func__.1>
    8001d3bc:	00010517          	auipc	a0,0x10
    8001d3c0:	fdc50513          	addi	a0,a0,-36 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001d3c4:	ec06                	sd	ra,24(sp)
    8001d3c6:	e822                	sd	s0,16(sp)
    8001d3c8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d3ca:	28d0d0ef          	jal	8002ae56 <printf>
    8001d3ce:	4529                	li	a0,10
    8001d3d0:	7740c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001d3d4:	4511                	li	a0,4
    8001d3d6:	b33e30ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d3da:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d3de:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d3e2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d3e6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d3ea:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d3ee:	10000793          	li	a5,256
    8001d3f2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d3f6:	20000793          	li	a5,512
    8001d3fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d3fe:	40000793          	li	a5,1024
    8001d402:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d406:	6785                	lui	a5,0x1
    8001d408:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d40c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d410:	4785                	li	a5,1
    8001d412:	07fe                	slli	a5,a5,0x1f
    8001d414:	4485                	li	s1,1
    8001d416:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d41a:	08100793          	li	a5,129
    8001d41e:	07e2                	slli	a5,a5,0x18
    8001d420:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d424:	08000793          	li	a5,128
    8001d428:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d42c:	67a1                	lui	a5,0x8
    8001d42e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d432:	4501                	li	a0,0
    8001d434:	ad5e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d438:	9d5e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001d43c:	02349793          	slli	a5,s1,0x23
    8001d440:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001d442:	00037417          	auipc	s0,0x37
    8001d446:	bce40413          	addi	s0,s0,-1074 # 80054010 <excpt>
    8001d44a:	00000297          	auipc	t0,0x0
    8001d44e:	00c28293          	addi	t0,t0,12 # 8001d456 <instruction_access_fault_9+0xa4>
    8001d452:	02543c23          	sd	t0,56(s0)
    8001d456:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d458:	08200593          	li	a1,130
    8001d45c:	00017617          	auipc	a2,0x17
    8001d460:	ee460613          	addi	a2,a2,-284 # 80034340 <__func__.0+0x7288>
    8001d464:	00010517          	auipc	a0,0x10
    8001d468:	f4c50513          	addi	a0,a0,-180 # 8002d3b0 <__func__.0+0x2f8>
    8001d46c:	1eb0d0ef          	jal	8002ae56 <printf>
    8001d470:	00037797          	auipc	a5,0x37
    8001d474:	ba17c783          	lbu	a5,-1119(a5) # 80054011 <excpt+0x1>
    8001d478:	00010597          	auipc	a1,0x10
    8001d47c:	f1058593          	addi	a1,a1,-240 # 8002d388 <__func__.0+0x2d0>
    8001d480:	cf81                	beqz	a5,8001d498 <instruction_access_fault_9+0xe6>
    8001d482:	641c                	ld	a5,8(s0)
    8001d484:	00010597          	auipc	a1,0x10
    8001d488:	ef458593          	addi	a1,a1,-268 # 8002d378 <__func__.0+0x2c0>
    8001d48c:	00978663          	beq	a5,s1,8001d498 <instruction_access_fault_9+0xe6>
    8001d490:	00010597          	auipc	a1,0x10
    8001d494:	ef858593          	addi	a1,a1,-264 # 8002d388 <__func__.0+0x2d0>
    8001d498:	00010517          	auipc	a0,0x10
    8001d49c:	f3050513          	addi	a0,a0,-208 # 8002d3c8 <__func__.0+0x310>
    8001d4a0:	1b70d0ef          	jal	8002ae56 <printf>
    8001d4a4:	00037797          	auipc	a5,0x37
    8001d4a8:	b6d7c783          	lbu	a5,-1171(a5) # 80054011 <excpt+0x1>
    8001d4ac:	c789                	beqz	a5,8001d4b6 <instruction_access_fault_9+0x104>
    8001d4ae:	6418                	ld	a4,8(s0)
    8001d4b0:	4785                	li	a5,1
    8001d4b2:	00f70c63          	beq	a4,a5,8001d4ca <instruction_access_fault_9+0x118>
    8001d4b6:	00010517          	auipc	a0,0x10
    8001d4ba:	f1a50513          	addi	a0,a0,-230 # 8002d3d0 <__func__.0+0x318>
    8001d4be:	1990d0ef          	jal	8002ae56 <printf>
    8001d4c2:	02900513          	li	a0,41
    8001d4c6:	67e0c0ef          	jal	80029b44 <putchar>
    8001d4ca:	4529                	li	a0,10
    8001d4cc:	6780c0ef          	jal	80029b44 <putchar>
    8001d4d0:	00037497          	auipc	s1,0x37
    8001d4d4:	b414c483          	lbu	s1,-1215(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d4d8:	00010597          	auipc	a1,0x10
    8001d4dc:	eb058593          	addi	a1,a1,-336 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d4e0:	cc91                	beqz	s1,8001d4fc <instruction_access_fault_9+0x14a>
    8001d4e2:	6418                	ld	a4,8(s0)
    8001d4e4:	4785                	li	a5,1
    TEST_END();
    8001d4e6:	00010597          	auipc	a1,0x10
    8001d4ea:	e9258593          	addi	a1,a1,-366 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d4ee:	00f70763          	beq	a4,a5,8001d4fc <instruction_access_fault_9+0x14a>
    8001d4f2:	4481                	li	s1,0
    TEST_END();
    8001d4f4:	00010597          	auipc	a1,0x10
    8001d4f8:	e9458593          	addi	a1,a1,-364 # 8002d388 <__func__.0+0x2d0>
    8001d4fc:	00010517          	auipc	a0,0x10
    8001d500:	f3450513          	addi	a0,a0,-204 # 8002d430 <__func__.0+0x378>
    8001d504:	1530d0ef          	jal	8002ae56 <printf>
    8001d508:	4511                	li	a0,4
    8001d50a:	9ffe30ef          	jal	80000f08 <goto_priv>
    8001d50e:	b16e40ef          	jal	80001824 <reset_state>
}
    8001d512:	60e2                	ld	ra,24(sp)
    8001d514:	6442                	ld	s0,16(sp)
    8001d516:	8526                	mv	a0,s1
    8001d518:	64a2                	ld	s1,8(sp)
    8001d51a:	6105                	addi	sp,sp,32
    8001d51c:	8082                	ret

000000008001d51e <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001d51e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d520:	0000f597          	auipc	a1,0xf
    8001d524:	20058593          	addi	a1,a1,512 # 8002c720 <__func__.0>
    8001d528:	00010517          	auipc	a0,0x10
    8001d52c:	e7050513          	addi	a0,a0,-400 # 8002d398 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001d530:	ec06                	sd	ra,24(sp)
    8001d532:	e822                	sd	s0,16(sp)
    8001d534:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d536:	1210d0ef          	jal	8002ae56 <printf>
    8001d53a:	4529                	li	a0,10
    8001d53c:	6080c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    8001d540:	4511                	li	a0,4
    8001d542:	9c7e30ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d546:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d54a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d54e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d552:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d556:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001d55a:	47a5                	li	a5,9
    8001d55c:	07f2                	slli	a5,a5,0x1c
    8001d55e:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d562:	08000793          	li	a5,128
    8001d566:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001d56a:	3a0025f3          	csrr	a1,pmpcfg0
    8001d56e:	00016517          	auipc	a0,0x16
    8001d572:	44a50513          	addi	a0,a0,1098 # 800339b8 <__func__.0+0x6900>
    8001d576:	0e10d0ef          	jal	8002ae56 <printf>
    8001d57a:	3a2025f3          	csrr	a1,pmpcfg2
    8001d57e:	00017517          	auipc	a0,0x17
    8001d582:	e3250513          	addi	a0,a0,-462 # 800343b0 <__func__.0+0x72f8>
    8001d586:	0d10d0ef          	jal	8002ae56 <printf>
    goto_priv(PRIV_HS);
    8001d58a:	450d                	li	a0,3
    8001d58c:	97de30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d590:	87de30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001d594:	09f00793          	li	a5,159
    8001d598:	07ea                	slli	a5,a5,0x1a
    8001d59a:	00037417          	auipc	s0,0x37
    8001d59e:	a7640413          	addi	s0,s0,-1418 # 80054010 <excpt>
    8001d5a2:	00000297          	auipc	t0,0x0
    8001d5a6:	00c28293          	addi	t0,t0,12 # 8001d5ae <instruction_access_fault_10+0x90>
    8001d5aa:	02543c23          	sd	t0,56(s0)
    8001d5ae:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d5b0:	08200593          	li	a1,130
    8001d5b4:	00017617          	auipc	a2,0x17
    8001d5b8:	e0c60613          	addi	a2,a2,-500 # 800343c0 <__func__.0+0x7308>
    8001d5bc:	00010517          	auipc	a0,0x10
    8001d5c0:	df450513          	addi	a0,a0,-524 # 8002d3b0 <__func__.0+0x2f8>
    8001d5c4:	0930d0ef          	jal	8002ae56 <printf>
    8001d5c8:	00037797          	auipc	a5,0x37
    8001d5cc:	a497c783          	lbu	a5,-1463(a5) # 80054011 <excpt+0x1>
    8001d5d0:	00010597          	auipc	a1,0x10
    8001d5d4:	db858593          	addi	a1,a1,-584 # 8002d388 <__func__.0+0x2d0>
    8001d5d8:	cf89                	beqz	a5,8001d5f2 <instruction_access_fault_10+0xd4>
    8001d5da:	6418                	ld	a4,8(s0)
    8001d5dc:	4785                	li	a5,1
    8001d5de:	00010597          	auipc	a1,0x10
    8001d5e2:	d9a58593          	addi	a1,a1,-614 # 8002d378 <__func__.0+0x2c0>
    8001d5e6:	00f70663          	beq	a4,a5,8001d5f2 <instruction_access_fault_10+0xd4>
    8001d5ea:	00010597          	auipc	a1,0x10
    8001d5ee:	d9e58593          	addi	a1,a1,-610 # 8002d388 <__func__.0+0x2d0>
    8001d5f2:	00010517          	auipc	a0,0x10
    8001d5f6:	dd650513          	addi	a0,a0,-554 # 8002d3c8 <__func__.0+0x310>
    8001d5fa:	05d0d0ef          	jal	8002ae56 <printf>
    8001d5fe:	00037797          	auipc	a5,0x37
    8001d602:	a137c783          	lbu	a5,-1517(a5) # 80054011 <excpt+0x1>
    8001d606:	c789                	beqz	a5,8001d610 <instruction_access_fault_10+0xf2>
    8001d608:	6418                	ld	a4,8(s0)
    8001d60a:	4785                	li	a5,1
    8001d60c:	00f70c63          	beq	a4,a5,8001d624 <instruction_access_fault_10+0x106>
    8001d610:	00010517          	auipc	a0,0x10
    8001d614:	dc050513          	addi	a0,a0,-576 # 8002d3d0 <__func__.0+0x318>
    8001d618:	03f0d0ef          	jal	8002ae56 <printf>
    8001d61c:	02900513          	li	a0,41
    8001d620:	5240c0ef          	jal	80029b44 <putchar>
    8001d624:	4529                	li	a0,10
    8001d626:	51e0c0ef          	jal	80029b44 <putchar>
    8001d62a:	00037497          	auipc	s1,0x37
    8001d62e:	9e74c483          	lbu	s1,-1561(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d632:	00010597          	auipc	a1,0x10
    8001d636:	d5658593          	addi	a1,a1,-682 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d63a:	cc91                	beqz	s1,8001d656 <instruction_access_fault_10+0x138>
    8001d63c:	6418                	ld	a4,8(s0)
    8001d63e:	4785                	li	a5,1
    TEST_END();
    8001d640:	00010597          	auipc	a1,0x10
    8001d644:	d3858593          	addi	a1,a1,-712 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d648:	00f70763          	beq	a4,a5,8001d656 <instruction_access_fault_10+0x138>
    8001d64c:	4481                	li	s1,0
    TEST_END();
    8001d64e:	00010597          	auipc	a1,0x10
    8001d652:	d3a58593          	addi	a1,a1,-710 # 8002d388 <__func__.0+0x2d0>
    8001d656:	00010517          	auipc	a0,0x10
    8001d65a:	dda50513          	addi	a0,a0,-550 # 8002d430 <__func__.0+0x378>
    8001d65e:	7f80d0ef          	jal	8002ae56 <printf>
    8001d662:	4511                	li	a0,4
    8001d664:	8a5e30ef          	jal	80000f08 <goto_priv>
    8001d668:	9bce40ef          	jal	80001824 <reset_state>
    8001d66c:	60e2                	ld	ra,24(sp)
    8001d66e:	6442                	ld	s0,16(sp)
    8001d670:	8526                	mv	a0,s1
    8001d672:	64a2                	ld	s1,8(sp)
    8001d674:	6105                	addi	sp,sp,32
    8001d676:	8082                	ret

000000008001d678 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001d678:	1101                	addi	sp,sp,-32

TEST_START();
    8001d67a:	0000f597          	auipc	a1,0xf
    8001d67e:	0c658593          	addi	a1,a1,198 # 8002c740 <__func__.9>
    8001d682:	00010517          	auipc	a0,0x10
    8001d686:	d1650513          	addi	a0,a0,-746 # 8002d398 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001d68a:	ec06                	sd	ra,24(sp)
    8001d68c:	e822                	sd	s0,16(sp)
    8001d68e:	e426                	sd	s1,8(sp)
TEST_START();
    8001d690:	7c60d0ef          	jal	8002ae56 <printf>
    8001d694:	4529                	li	a0,10
    8001d696:	4ae0c0ef          	jal	80029b44 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001d69a:	450d                	li	a0,3
    8001d69c:	86de30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d6a0:	f41e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d6a4:	b20e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d6a8:	8d4e30ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d6ac:	4511                	li	a0,4
    8001d6ae:	85be30ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001d6b2:	000407b7          	lui	a5,0x40
    8001d6b6:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d6ba:	f52e30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d6be:	450d                	li	a0,3
    8001d6c0:	849e30ef          	jal	80000f08 <goto_priv>
    asm volatile(
    8001d6c4:	000807b7          	lui	a5,0x80
    8001d6c8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d6ca:	07b6                	slli	a5,a5,0xd
    8001d6cc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d6d0:	08200593          	li	a1,130
    8001d6d4:	00017617          	auipc	a2,0x17
    8001d6d8:	d4c60613          	addi	a2,a2,-692 # 80034420 <__func__.0+0x7368>
    8001d6dc:	00010517          	auipc	a0,0x10
    8001d6e0:	cd450513          	addi	a0,a0,-812 # 8002d3b0 <__func__.0+0x2f8>
    8001d6e4:	7720d0ef          	jal	8002ae56 <printf>
    8001d6e8:	00037797          	auipc	a5,0x37
    8001d6ec:	9297c783          	lbu	a5,-1751(a5) # 80054011 <excpt+0x1>
    8001d6f0:	00037497          	auipc	s1,0x37
    8001d6f4:	92048493          	addi	s1,s1,-1760 # 80054010 <excpt>
    8001d6f8:	00010597          	auipc	a1,0x10
    8001d6fc:	c9058593          	addi	a1,a1,-880 # 8002d388 <__func__.0+0x2d0>
    8001d700:	cf89                	beqz	a5,8001d71a <mstatus_csr_tests_1+0xa2>
    8001d702:	6498                	ld	a4,8(s1)
    8001d704:	47b5                	li	a5,13
    8001d706:	00010597          	auipc	a1,0x10
    8001d70a:	c7258593          	addi	a1,a1,-910 # 8002d378 <__func__.0+0x2c0>
    8001d70e:	00f70663          	beq	a4,a5,8001d71a <mstatus_csr_tests_1+0xa2>
    8001d712:	00010597          	auipc	a1,0x10
    8001d716:	c7658593          	addi	a1,a1,-906 # 8002d388 <__func__.0+0x2d0>
    8001d71a:	00010517          	auipc	a0,0x10
    8001d71e:	cae50513          	addi	a0,a0,-850 # 8002d3c8 <__func__.0+0x310>
    8001d722:	7340d0ef          	jal	8002ae56 <printf>
    8001d726:	00037797          	auipc	a5,0x37
    8001d72a:	8eb7c783          	lbu	a5,-1813(a5) # 80054011 <excpt+0x1>
    8001d72e:	c789                	beqz	a5,8001d738 <mstatus_csr_tests_1+0xc0>
    8001d730:	6498                	ld	a4,8(s1)
    8001d732:	47b5                	li	a5,13
    8001d734:	00f70c63          	beq	a4,a5,8001d74c <mstatus_csr_tests_1+0xd4>
    8001d738:	00010517          	auipc	a0,0x10
    8001d73c:	c9850513          	addi	a0,a0,-872 # 8002d3d0 <__func__.0+0x318>
    8001d740:	7160d0ef          	jal	8002ae56 <printf>
    8001d744:	02900513          	li	a0,41
    8001d748:	3fc0c0ef          	jal	80029b44 <putchar>
    8001d74c:	4529                	li	a0,10
    8001d74e:	3f60c0ef          	jal	80029b44 <putchar>
    8001d752:	00037417          	auipc	s0,0x37
    8001d756:	8bf44403          	lbu	s0,-1857(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001d75a:	00010597          	auipc	a1,0x10
    8001d75e:	c2e58593          	addi	a1,a1,-978 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d762:	cc11                	beqz	s0,8001d77e <mstatus_csr_tests_1+0x106>
    8001d764:	6498                	ld	a4,8(s1)
    8001d766:	47b5                	li	a5,13
    TEST_END();
    8001d768:	00010597          	auipc	a1,0x10
    8001d76c:	c1058593          	addi	a1,a1,-1008 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d770:	00f70763          	beq	a4,a5,8001d77e <mstatus_csr_tests_1+0x106>
    8001d774:	4401                	li	s0,0
    TEST_END();
    8001d776:	00010597          	auipc	a1,0x10
    8001d77a:	c1258593          	addi	a1,a1,-1006 # 8002d388 <__func__.0+0x2d0>
    8001d77e:	00010517          	auipc	a0,0x10
    8001d782:	cb250513          	addi	a0,a0,-846 # 8002d430 <__func__.0+0x378>
    8001d786:	6d00d0ef          	jal	8002ae56 <printf>
    8001d78a:	4511                	li	a0,4
    8001d78c:	f7ce30ef          	jal	80000f08 <goto_priv>
    8001d790:	894e40ef          	jal	80001824 <reset_state>
}
    8001d794:	60e2                	ld	ra,24(sp)
    8001d796:	8522                	mv	a0,s0
    8001d798:	6442                	ld	s0,16(sp)
    8001d79a:	64a2                	ld	s1,8(sp)
    8001d79c:	6105                	addi	sp,sp,32
    8001d79e:	8082                	ret

000000008001d7a0 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001d7a0:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d7a2:	0000f597          	auipc	a1,0xf
    8001d7a6:	fb658593          	addi	a1,a1,-74 # 8002c758 <__func__.7>
    8001d7aa:	00010517          	auipc	a0,0x10
    8001d7ae:	bee50513          	addi	a0,a0,-1042 # 8002d398 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001d7b2:	e406                	sd	ra,8(sp)
    8001d7b4:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d7b6:	6a00d0ef          	jal	8002ae56 <printf>
    8001d7ba:	4529                	li	a0,10
    8001d7bc:	3880c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001d7c0:	450d                	li	a0,3
    8001d7c2:	f46e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d7c6:	e1be20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d7ca:	9fae30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d7ce:	fafe20ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d7d2:	4511                	li	a0,4
    8001d7d4:	f34e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001d7d8:	000407b7          	lui	a5,0x40
    8001d7dc:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d7e0:	e2ce30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d7e4:	450d                	li	a0,3
    8001d7e6:	f22e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d7ea:	4509                	li	a0,2
    8001d7ec:	e3ce30ef          	jal	80000e28 <set_prev_priv>
    8001d7f0:	000807b7          	lui	a5,0x80
    8001d7f4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d7f6:	07b6                	slli	a5,a5,0xd
    8001d7f8:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001d7fc:	00037597          	auipc	a1,0x37
    8001d800:	8155c583          	lbu	a1,-2027(a1) # 80054011 <excpt+0x1>
    8001d804:	00010517          	auipc	a0,0x10
    8001d808:	71c50513          	addi	a0,a0,1820 # 8002df20 <__func__.0+0xe68>
    8001d80c:	64a0d0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001d810:	00037597          	auipc	a1,0x37
    8001d814:	8085b583          	ld	a1,-2040(a1) # 80054018 <excpt+0x8>
    8001d818:	00010517          	auipc	a0,0x10
    8001d81c:	70850513          	addi	a0,a0,1800 # 8002df20 <__func__.0+0xe68>
    8001d820:	6360d0ef          	jal	8002ae56 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d824:	08200593          	li	a1,130
    8001d828:	00017617          	auipc	a2,0x17
    8001d82c:	c3060613          	addi	a2,a2,-976 # 80034458 <__func__.0+0x73a0>
    8001d830:	00010517          	auipc	a0,0x10
    8001d834:	b8050513          	addi	a0,a0,-1152 # 8002d3b0 <__func__.0+0x2f8>
    8001d838:	61e0d0ef          	jal	8002ae56 <printf>
    8001d83c:	00036797          	auipc	a5,0x36
    8001d840:	7d57c783          	lbu	a5,2005(a5) # 80054011 <excpt+0x1>
    8001d844:	00010597          	auipc	a1,0x10
    8001d848:	b3458593          	addi	a1,a1,-1228 # 8002d378 <__func__.0+0x2c0>
    8001d84c:	c789                	beqz	a5,8001d856 <mstatus_csr_tests_2+0xb6>
    8001d84e:	00010597          	auipc	a1,0x10
    8001d852:	b3a58593          	addi	a1,a1,-1222 # 8002d388 <__func__.0+0x2d0>
    8001d856:	00010517          	auipc	a0,0x10
    8001d85a:	b7250513          	addi	a0,a0,-1166 # 8002d3c8 <__func__.0+0x310>
    8001d85e:	5f80d0ef          	jal	8002ae56 <printf>
    8001d862:	00036797          	auipc	a5,0x36
    8001d866:	7af7c783          	lbu	a5,1967(a5) # 80054011 <excpt+0x1>
    8001d86a:	e7a1                	bnez	a5,8001d8b2 <mstatus_csr_tests_2+0x112>
    8001d86c:	4529                	li	a0,10
    8001d86e:	2d60c0ef          	jal	80029b44 <putchar>
    8001d872:	00036797          	auipc	a5,0x36
    8001d876:	79f7c783          	lbu	a5,1951(a5) # 80054011 <excpt+0x1>
    8001d87a:	e795                	bnez	a5,8001d8a6 <mstatus_csr_tests_2+0x106>
    8001d87c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d87e:	00010597          	auipc	a1,0x10
    8001d882:	afa58593          	addi	a1,a1,-1286 # 8002d378 <__func__.0+0x2c0>
    8001d886:	00010517          	auipc	a0,0x10
    8001d88a:	baa50513          	addi	a0,a0,-1110 # 8002d430 <__func__.0+0x378>
    8001d88e:	5c80d0ef          	jal	8002ae56 <printf>
    8001d892:	4511                	li	a0,4
    8001d894:	e74e30ef          	jal	80000f08 <goto_priv>
    8001d898:	f8de30ef          	jal	80001824 <reset_state>
}
    8001d89c:	60a2                	ld	ra,8(sp)
    8001d89e:	8522                	mv	a0,s0
    8001d8a0:	6402                	ld	s0,0(sp)
    8001d8a2:	0141                	addi	sp,sp,16
    8001d8a4:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d8a6:	4401                	li	s0,0
    TEST_END();
    8001d8a8:	00010597          	auipc	a1,0x10
    8001d8ac:	ae058593          	addi	a1,a1,-1312 # 8002d388 <__func__.0+0x2d0>
    8001d8b0:	bfd9                	j	8001d886 <mstatus_csr_tests_2+0xe6>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d8b2:	00010517          	auipc	a0,0x10
    8001d8b6:	b1e50513          	addi	a0,a0,-1250 # 8002d3d0 <__func__.0+0x318>
    8001d8ba:	59c0d0ef          	jal	8002ae56 <printf>
    8001d8be:	02900513          	li	a0,41
    8001d8c2:	2820c0ef          	jal	80029b44 <putchar>
    8001d8c6:	b75d                	j	8001d86c <mstatus_csr_tests_2+0xcc>

000000008001d8c8 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001d8c8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d8ca:	0000f597          	auipc	a1,0xf
    8001d8ce:	ea658593          	addi	a1,a1,-346 # 8002c770 <__func__.6>
    8001d8d2:	00010517          	auipc	a0,0x10
    8001d8d6:	ac650513          	addi	a0,a0,-1338 # 8002d398 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001d8da:	ec06                	sd	ra,24(sp)
    8001d8dc:	e822                	sd	s0,16(sp)
    8001d8de:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d8e0:	5760d0ef          	jal	8002ae56 <printf>
    8001d8e4:	4529                	li	a0,10
    8001d8e6:	25e0c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001d8ea:	450d                	li	a0,3
    8001d8ec:	e1ce30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d8f0:	cf1e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d8f4:	8d0e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d8f8:	e85e20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001d8fc:	4511                	li	a0,4
    8001d8fe:	e0ae30ef          	jal	80000f08 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001d902:	000807b7          	lui	a5,0x80
    8001d906:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001d90a:	450d                	li	a0,3
    8001d90c:	dfce30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d910:	4509                	li	a0,2
    8001d912:	d16e30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d916:	cf6e30ef          	jal	80000e0c <test_setup_except_function>
    8001d91a:	001007b7          	lui	a5,0x100
    8001d91e:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001d922:	07b2                	slli	a5,a5,0xc
    8001d924:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001d928:	00036597          	auipc	a1,0x36
    8001d92c:	6e95c583          	lbu	a1,1769(a1) # 80054011 <excpt+0x1>
    8001d930:	00010517          	auipc	a0,0x10
    8001d934:	5f050513          	addi	a0,a0,1520 # 8002df20 <__func__.0+0xe68>
    8001d938:	00036417          	auipc	s0,0x36
    8001d93c:	6d840413          	addi	s0,s0,1752 # 80054010 <excpt>
    8001d940:	5160d0ef          	jal	8002ae56 <printf>
    printf("%d\n",excpt.cause);
    8001d944:	640c                	ld	a1,8(s0)
    8001d946:	00010517          	auipc	a0,0x10
    8001d94a:	5da50513          	addi	a0,a0,1498 # 8002df20 <__func__.0+0xe68>
    8001d94e:	5080d0ef          	jal	8002ae56 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d952:	08200593          	li	a1,130
    8001d956:	00017617          	auipc	a2,0x17
    8001d95a:	b3a60613          	addi	a2,a2,-1222 # 80034490 <__func__.0+0x73d8>
    8001d95e:	00010517          	auipc	a0,0x10
    8001d962:	a5250513          	addi	a0,a0,-1454 # 8002d3b0 <__func__.0+0x2f8>
    8001d966:	4f00d0ef          	jal	8002ae56 <printf>
    8001d96a:	00036797          	auipc	a5,0x36
    8001d96e:	6a77c783          	lbu	a5,1703(a5) # 80054011 <excpt+0x1>
    8001d972:	00010597          	auipc	a1,0x10
    8001d976:	a1658593          	addi	a1,a1,-1514 # 8002d388 <__func__.0+0x2d0>
    8001d97a:	cf89                	beqz	a5,8001d994 <mstatus_csr_tests_3+0xcc>
    8001d97c:	6418                	ld	a4,8(s0)
    8001d97e:	47b5                	li	a5,13
    8001d980:	00010597          	auipc	a1,0x10
    8001d984:	9f858593          	addi	a1,a1,-1544 # 8002d378 <__func__.0+0x2c0>
    8001d988:	00f70663          	beq	a4,a5,8001d994 <mstatus_csr_tests_3+0xcc>
    8001d98c:	00010597          	auipc	a1,0x10
    8001d990:	9fc58593          	addi	a1,a1,-1540 # 8002d388 <__func__.0+0x2d0>
    8001d994:	00010517          	auipc	a0,0x10
    8001d998:	a3450513          	addi	a0,a0,-1484 # 8002d3c8 <__func__.0+0x310>
    8001d99c:	4ba0d0ef          	jal	8002ae56 <printf>
    8001d9a0:	00036797          	auipc	a5,0x36
    8001d9a4:	6717c783          	lbu	a5,1649(a5) # 80054011 <excpt+0x1>
    8001d9a8:	c789                	beqz	a5,8001d9b2 <mstatus_csr_tests_3+0xea>
    8001d9aa:	6418                	ld	a4,8(s0)
    8001d9ac:	47b5                	li	a5,13
    8001d9ae:	00f70c63          	beq	a4,a5,8001d9c6 <mstatus_csr_tests_3+0xfe>
    8001d9b2:	00010517          	auipc	a0,0x10
    8001d9b6:	a1e50513          	addi	a0,a0,-1506 # 8002d3d0 <__func__.0+0x318>
    8001d9ba:	49c0d0ef          	jal	8002ae56 <printf>
    8001d9be:	02900513          	li	a0,41
    8001d9c2:	1820c0ef          	jal	80029b44 <putchar>
    8001d9c6:	4529                	li	a0,10
    8001d9c8:	17c0c0ef          	jal	80029b44 <putchar>
    8001d9cc:	00036497          	auipc	s1,0x36
    8001d9d0:	6454c483          	lbu	s1,1605(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001d9d4:	00010597          	auipc	a1,0x10
    8001d9d8:	9b458593          	addi	a1,a1,-1612 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9dc:	cc91                	beqz	s1,8001d9f8 <mstatus_csr_tests_3+0x130>
    8001d9de:	6418                	ld	a4,8(s0)
    8001d9e0:	47b5                	li	a5,13
    TEST_END();
    8001d9e2:	00010597          	auipc	a1,0x10
    8001d9e6:	99658593          	addi	a1,a1,-1642 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9ea:	00f70763          	beq	a4,a5,8001d9f8 <mstatus_csr_tests_3+0x130>
    8001d9ee:	4481                	li	s1,0
    TEST_END();
    8001d9f0:	00010597          	auipc	a1,0x10
    8001d9f4:	99858593          	addi	a1,a1,-1640 # 8002d388 <__func__.0+0x2d0>
    8001d9f8:	00010517          	auipc	a0,0x10
    8001d9fc:	a3850513          	addi	a0,a0,-1480 # 8002d430 <__func__.0+0x378>
    8001da00:	4560d0ef          	jal	8002ae56 <printf>
    8001da04:	4511                	li	a0,4
    8001da06:	d02e30ef          	jal	80000f08 <goto_priv>
    8001da0a:	e1be30ef          	jal	80001824 <reset_state>
}
    8001da0e:	60e2                	ld	ra,24(sp)
    8001da10:	6442                	ld	s0,16(sp)
    8001da12:	8526                	mv	a0,s1
    8001da14:	64a2                	ld	s1,8(sp)
    8001da16:	6105                	addi	sp,sp,32
    8001da18:	8082                	ret

000000008001da1a <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001da1a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001da1c:	0000f597          	auipc	a1,0xf
    8001da20:	d6c58593          	addi	a1,a1,-660 # 8002c788 <__func__.5>
    8001da24:	00010517          	auipc	a0,0x10
    8001da28:	97450513          	addi	a0,a0,-1676 # 8002d398 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001da2c:	ec06                	sd	ra,24(sp)
    8001da2e:	e822                	sd	s0,16(sp)
    8001da30:	e426                	sd	s1,8(sp)
    TEST_START();
    8001da32:	4240d0ef          	jal	8002ae56 <printf>
    8001da36:	4529                	li	a0,10
    8001da38:	10c0c0ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_HS);
    8001da3c:	450d                	li	a0,3
    8001da3e:	ccae30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001da42:	b9fe20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001da46:	f7fe20ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001da4a:	d33e20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001da4e:	4511                	li	a0,4
    8001da50:	cb8e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001da54:	000807b7          	lui	a5,0x80
    8001da58:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001da5c:	450d                	li	a0,3
    8001da5e:	caae30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001da62:	4509                	li	a0,2
    8001da64:	bc4e30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001da68:	ba4e30ef          	jal	80000e0c <test_setup_except_function>
    8001da6c:	001007b7          	lui	a5,0x100
    8001da70:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001da72:	07b2                	slli	a5,a5,0xc
    8001da74:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001da78:	08200593          	li	a1,130
    8001da7c:	00017617          	auipc	a2,0x17
    8001da80:	a4c60613          	addi	a2,a2,-1460 # 800344c8 <__func__.0+0x7410>
    8001da84:	00010517          	auipc	a0,0x10
    8001da88:	92c50513          	addi	a0,a0,-1748 # 8002d3b0 <__func__.0+0x2f8>
    8001da8c:	3ca0d0ef          	jal	8002ae56 <printf>
    8001da90:	00036797          	auipc	a5,0x36
    8001da94:	5817c783          	lbu	a5,1409(a5) # 80054011 <excpt+0x1>
    8001da98:	00036497          	auipc	s1,0x36
    8001da9c:	57848493          	addi	s1,s1,1400 # 80054010 <excpt>
    8001daa0:	00010597          	auipc	a1,0x10
    8001daa4:	8e858593          	addi	a1,a1,-1816 # 8002d388 <__func__.0+0x2d0>
    8001daa8:	cf89                	beqz	a5,8001dac2 <mstatus_csr_tests_4+0xa8>
    8001daaa:	6498                	ld	a4,8(s1)
    8001daac:	47b5                	li	a5,13
    8001daae:	00010597          	auipc	a1,0x10
    8001dab2:	8ca58593          	addi	a1,a1,-1846 # 8002d378 <__func__.0+0x2c0>
    8001dab6:	00f70663          	beq	a4,a5,8001dac2 <mstatus_csr_tests_4+0xa8>
    8001daba:	00010597          	auipc	a1,0x10
    8001dabe:	8ce58593          	addi	a1,a1,-1842 # 8002d388 <__func__.0+0x2d0>
    8001dac2:	00010517          	auipc	a0,0x10
    8001dac6:	90650513          	addi	a0,a0,-1786 # 8002d3c8 <__func__.0+0x310>
    8001daca:	38c0d0ef          	jal	8002ae56 <printf>
    8001dace:	00036797          	auipc	a5,0x36
    8001dad2:	5437c783          	lbu	a5,1347(a5) # 80054011 <excpt+0x1>
    8001dad6:	c789                	beqz	a5,8001dae0 <mstatus_csr_tests_4+0xc6>
    8001dad8:	6498                	ld	a4,8(s1)
    8001dada:	47b5                	li	a5,13
    8001dadc:	00f70c63          	beq	a4,a5,8001daf4 <mstatus_csr_tests_4+0xda>
    8001dae0:	00010517          	auipc	a0,0x10
    8001dae4:	8f050513          	addi	a0,a0,-1808 # 8002d3d0 <__func__.0+0x318>
    8001dae8:	36e0d0ef          	jal	8002ae56 <printf>
    8001daec:	02900513          	li	a0,41
    8001daf0:	0540c0ef          	jal	80029b44 <putchar>
    8001daf4:	4529                	li	a0,10
    8001daf6:	04e0c0ef          	jal	80029b44 <putchar>
    8001dafa:	00036417          	auipc	s0,0x36
    8001dafe:	51744403          	lbu	s0,1303(s0) # 80054011 <excpt+0x1>
    8001db02:	c409                	beqz	s0,8001db0c <mstatus_csr_tests_4+0xf2>
    8001db04:	6498                	ld	a4,8(s1)
    8001db06:	47b5                	li	a5,13
    8001db08:	02f70c63          	beq	a4,a5,8001db40 <mstatus_csr_tests_4+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001db0c:	000807b7          	lui	a5,0x80
    8001db10:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001db14:	4401                	li	s0,0


TEST_END();
    8001db16:	00010597          	auipc	a1,0x10
    8001db1a:	87258593          	addi	a1,a1,-1934 # 8002d388 <__func__.0+0x2d0>
    8001db1e:	00010517          	auipc	a0,0x10
    8001db22:	91250513          	addi	a0,a0,-1774 # 8002d430 <__func__.0+0x378>
    8001db26:	3300d0ef          	jal	8002ae56 <printf>
    8001db2a:	4511                	li	a0,4
    8001db2c:	bdce30ef          	jal	80000f08 <goto_priv>
    8001db30:	cf5e30ef          	jal	80001824 <reset_state>

}
    8001db34:	60e2                	ld	ra,24(sp)
    8001db36:	8522                	mv	a0,s0
    8001db38:	6442                	ld	s0,16(sp)
    8001db3a:	64a2                	ld	s1,8(sp)
    8001db3c:	6105                	addi	sp,sp,32
    8001db3e:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001db40:	000807b7          	lui	a5,0x80
    8001db44:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001db48:	00010597          	auipc	a1,0x10
    8001db4c:	83058593          	addi	a1,a1,-2000 # 8002d378 <__func__.0+0x2c0>
    8001db50:	b7f9                	j	8001db1e <mstatus_csr_tests_4+0x104>

000000008001db52 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001db52:	1101                	addi	sp,sp,-32

    TEST_START();
    8001db54:	0000f597          	auipc	a1,0xf
    8001db58:	c4c58593          	addi	a1,a1,-948 # 8002c7a0 <__func__.4>
    8001db5c:	00010517          	auipc	a0,0x10
    8001db60:	83c50513          	addi	a0,a0,-1988 # 8002d398 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001db64:	ec06                	sd	ra,24(sp)
    8001db66:	e822                	sd	s0,16(sp)
    8001db68:	e426                	sd	s1,8(sp)
    TEST_START();
    8001db6a:	2ec0d0ef          	jal	8002ae56 <printf>
    8001db6e:	4529                	li	a0,10
    8001db70:	7d50b0ef          	jal	80029b44 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001db74:	a98e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001db78:	4511                	li	a0,4
    8001db7a:	b8ee30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001db7e:	004007b7          	lui	a5,0x400
    8001db82:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001db86:	450d                	li	a0,3
    8001db88:	b80e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001db8c:	4501                	li	a0,0
    8001db8e:	a9ae30ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    8001db92:	00000297          	auipc	t0,0x0
    8001db96:	01028293          	addi	t0,t0,16 # 8001dba2 <mstatus_csr_tests_5+0x50>
    8001db9a:	14129073          	csrw	sepc,t0
    8001db9e:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dba2:	08200593          	li	a1,130
    8001dba6:	00013617          	auipc	a2,0x13
    8001dbaa:	fca60613          	addi	a2,a2,-54 # 80030b70 <__func__.0+0x3ab8>
    8001dbae:	00010517          	auipc	a0,0x10
    8001dbb2:	80250513          	addi	a0,a0,-2046 # 8002d3b0 <__func__.0+0x2f8>
    8001dbb6:	2a00d0ef          	jal	8002ae56 <printf>
    8001dbba:	00036797          	auipc	a5,0x36
    8001dbbe:	4577c783          	lbu	a5,1111(a5) # 80054011 <excpt+0x1>
    8001dbc2:	00036497          	auipc	s1,0x36
    8001dbc6:	44e48493          	addi	s1,s1,1102 # 80054010 <excpt>
    8001dbca:	0000f597          	auipc	a1,0xf
    8001dbce:	7be58593          	addi	a1,a1,1982 # 8002d388 <__func__.0+0x2d0>
    8001dbd2:	cf89                	beqz	a5,8001dbec <mstatus_csr_tests_5+0x9a>
    8001dbd4:	6498                	ld	a4,8(s1)
    8001dbd6:	4789                	li	a5,2
    8001dbd8:	0000f597          	auipc	a1,0xf
    8001dbdc:	7a058593          	addi	a1,a1,1952 # 8002d378 <__func__.0+0x2c0>
    8001dbe0:	00f70663          	beq	a4,a5,8001dbec <mstatus_csr_tests_5+0x9a>
    8001dbe4:	0000f597          	auipc	a1,0xf
    8001dbe8:	7a458593          	addi	a1,a1,1956 # 8002d388 <__func__.0+0x2d0>
    8001dbec:	0000f517          	auipc	a0,0xf
    8001dbf0:	7dc50513          	addi	a0,a0,2012 # 8002d3c8 <__func__.0+0x310>
    8001dbf4:	2620d0ef          	jal	8002ae56 <printf>
    8001dbf8:	00036797          	auipc	a5,0x36
    8001dbfc:	4197c783          	lbu	a5,1049(a5) # 80054011 <excpt+0x1>
    8001dc00:	c789                	beqz	a5,8001dc0a <mstatus_csr_tests_5+0xb8>
    8001dc02:	6498                	ld	a4,8(s1)
    8001dc04:	4789                	li	a5,2
    8001dc06:	00f70c63          	beq	a4,a5,8001dc1e <mstatus_csr_tests_5+0xcc>
    8001dc0a:	0000f517          	auipc	a0,0xf
    8001dc0e:	7c650513          	addi	a0,a0,1990 # 8002d3d0 <__func__.0+0x318>
    8001dc12:	2440d0ef          	jal	8002ae56 <printf>
    8001dc16:	02900513          	li	a0,41
    8001dc1a:	72b0b0ef          	jal	80029b44 <putchar>
    8001dc1e:	4529                	li	a0,10
    8001dc20:	7250b0ef          	jal	80029b44 <putchar>
    8001dc24:	00036417          	auipc	s0,0x36
    8001dc28:	3ed44403          	lbu	s0,1005(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001dc2c:	0000f597          	auipc	a1,0xf
    8001dc30:	75c58593          	addi	a1,a1,1884 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc34:	cc11                	beqz	s0,8001dc50 <mstatus_csr_tests_5+0xfe>
    8001dc36:	6498                	ld	a4,8(s1)
    8001dc38:	4789                	li	a5,2
    TEST_END();
    8001dc3a:	0000f597          	auipc	a1,0xf
    8001dc3e:	73e58593          	addi	a1,a1,1854 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc42:	00f70763          	beq	a4,a5,8001dc50 <mstatus_csr_tests_5+0xfe>
    8001dc46:	4401                	li	s0,0
    TEST_END();
    8001dc48:	0000f597          	auipc	a1,0xf
    8001dc4c:	74058593          	addi	a1,a1,1856 # 8002d388 <__func__.0+0x2d0>
    8001dc50:	0000f517          	auipc	a0,0xf
    8001dc54:	7e050513          	addi	a0,a0,2016 # 8002d430 <__func__.0+0x378>
    8001dc58:	1fe0d0ef          	jal	8002ae56 <printf>
    8001dc5c:	4511                	li	a0,4
    8001dc5e:	aaae30ef          	jal	80000f08 <goto_priv>
    8001dc62:	bc3e30ef          	jal	80001824 <reset_state>

}
    8001dc66:	60e2                	ld	ra,24(sp)
    8001dc68:	8522                	mv	a0,s0
    8001dc6a:	6442                	ld	s0,16(sp)
    8001dc6c:	64a2                	ld	s1,8(sp)
    8001dc6e:	6105                	addi	sp,sp,32
    8001dc70:	8082                	ret

000000008001dc72 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001dc72:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dc74:	0000f597          	auipc	a1,0xf
    8001dc78:	b4458593          	addi	a1,a1,-1212 # 8002c7b8 <__func__.3>
    8001dc7c:	0000f517          	auipc	a0,0xf
    8001dc80:	71c50513          	addi	a0,a0,1820 # 8002d398 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001dc84:	e406                	sd	ra,8(sp)
    8001dc86:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dc88:	1ce0d0ef          	jal	8002ae56 <printf>
    8001dc8c:	4529                	li	a0,10
    8001dc8e:	6b70b0ef          	jal	80029b44 <putchar>
    TEST_SETUP_EXCEPT();
    8001dc92:	97ae30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dc96:	4511                	li	a0,4
    8001dc98:	a70e30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001dc9c:	57fd                	li	a5,-1
    8001dc9e:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001dca2:	602025f3          	csrr	a1,hedeleg
    8001dca6:	00016517          	auipc	a0,0x16
    8001dcaa:	d1a50513          	addi	a0,a0,-742 # 800339c0 <__func__.0+0x6908>
    8001dcae:	1a80d0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("hedeleg right",
    8001dcb2:	00017617          	auipc	a2,0x17
    8001dcb6:	85e60613          	addi	a2,a2,-1954 # 80034510 <__func__.0+0x7458>
    8001dcba:	08200593          	li	a1,130
    8001dcbe:	0000f517          	auipc	a0,0xf
    8001dcc2:	6f250513          	addi	a0,a0,1778 # 8002d3b0 <__func__.0+0x2f8>
    8001dcc6:	1900d0ef          	jal	8002ae56 <printf>
    8001dcca:	60202773          	csrr	a4,hedeleg
    8001dcce:	67ad                	lui	a5,0xb
    8001dcd0:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dcd4:	0000f597          	auipc	a1,0xf
    8001dcd8:	6a458593          	addi	a1,a1,1700 # 8002d378 <__func__.0+0x2c0>
    8001dcdc:	00f70663          	beq	a4,a5,8001dce8 <hedeleg_csr_tests_1+0x76>
    8001dce0:	0000f597          	auipc	a1,0xf
    8001dce4:	6a858593          	addi	a1,a1,1704 # 8002d388 <__func__.0+0x2d0>
    8001dce8:	0000f517          	auipc	a0,0xf
    8001dcec:	6e050513          	addi	a0,a0,1760 # 8002d3c8 <__func__.0+0x310>
    8001dcf0:	1660d0ef          	jal	8002ae56 <printf>
    8001dcf4:	60202773          	csrr	a4,hedeleg
    8001dcf8:	67ad                	lui	a5,0xb
    8001dcfa:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dcfe:	00f70c63          	beq	a4,a5,8001dd16 <hedeleg_csr_tests_1+0xa4>
    8001dd02:	0000f517          	auipc	a0,0xf
    8001dd06:	6ce50513          	addi	a0,a0,1742 # 8002d3d0 <__func__.0+0x318>
    8001dd0a:	14c0d0ef          	jal	8002ae56 <printf>
    8001dd0e:	02900513          	li	a0,41
    8001dd12:	6330b0ef          	jal	80029b44 <putchar>
    8001dd16:	4529                	li	a0,10
    8001dd18:	62d0b0ef          	jal	80029b44 <putchar>
    8001dd1c:	60202773          	csrr	a4,hedeleg
    8001dd20:	67ad                	lui	a5,0xb
    8001dd22:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd26:	02f70763          	beq	a4,a5,8001dd54 <hedeleg_csr_tests_1+0xe2>
    8001dd2a:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001dd2c:	0000f597          	auipc	a1,0xf
    8001dd30:	65c58593          	addi	a1,a1,1628 # 8002d388 <__func__.0+0x2d0>
    8001dd34:	0000f517          	auipc	a0,0xf
    8001dd38:	6fc50513          	addi	a0,a0,1788 # 8002d430 <__func__.0+0x378>
    8001dd3c:	11a0d0ef          	jal	8002ae56 <printf>
    8001dd40:	4511                	li	a0,4
    8001dd42:	9c6e30ef          	jal	80000f08 <goto_priv>
    8001dd46:	adfe30ef          	jal	80001824 <reset_state>

}
    8001dd4a:	60a2                	ld	ra,8(sp)
    8001dd4c:	8522                	mv	a0,s0
    8001dd4e:	6402                	ld	s0,0(sp)
    8001dd50:	0141                	addi	sp,sp,16
    8001dd52:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001dd54:	4405                	li	s0,1
    TEST_END();
    8001dd56:	0000f597          	auipc	a1,0xf
    8001dd5a:	62258593          	addi	a1,a1,1570 # 8002d378 <__func__.0+0x2c0>
    8001dd5e:	bfd9                	j	8001dd34 <hedeleg_csr_tests_1+0xc2>

000000008001dd60 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001dd60:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dd62:	0000f597          	auipc	a1,0xf
    8001dd66:	a6e58593          	addi	a1,a1,-1426 # 8002c7d0 <__func__.2>
    8001dd6a:	0000f517          	auipc	a0,0xf
    8001dd6e:	62e50513          	addi	a0,a0,1582 # 8002d398 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001dd72:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dd74:	0e20d0ef          	jal	8002ae56 <printf>
    8001dd78:	4529                	li	a0,10
    8001dd7a:	5cb0b0ef          	jal	80029b44 <putchar>
    TEST_SETUP_EXCEPT();
    8001dd7e:	88ee30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dd82:	4511                	li	a0,4
    8001dd84:	984e30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001dd88:	57fd                	li	a5,-1
    8001dd8a:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001dd8e:	323025f3          	csrr	a1,mhpmevent3
    8001dd92:	00016517          	auipc	a0,0x16
    8001dd96:	c2e50513          	addi	a0,a0,-978 # 800339c0 <__func__.0+0x6908>
    8001dd9a:	0bc0d0ef          	jal	8002ae56 <printf>

    TEST_END();
    8001dd9e:	0000f597          	auipc	a1,0xf
    8001dda2:	5da58593          	addi	a1,a1,1498 # 8002d378 <__func__.0+0x2c0>
    8001dda6:	0000f517          	auipc	a0,0xf
    8001ddaa:	68a50513          	addi	a0,a0,1674 # 8002d430 <__func__.0+0x378>
    8001ddae:	0a80d0ef          	jal	8002ae56 <printf>
    8001ddb2:	4511                	li	a0,4
    8001ddb4:	954e30ef          	jal	80000f08 <goto_priv>
    8001ddb8:	a6de30ef          	jal	80001824 <reset_state>

}
    8001ddbc:	60a2                	ld	ra,8(sp)
    8001ddbe:	4505                	li	a0,1
    8001ddc0:	0141                	addi	sp,sp,16
    8001ddc2:	8082                	ret

000000008001ddc4 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001ddc4:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ddc6:	0000f597          	auipc	a1,0xf
    8001ddca:	a2258593          	addi	a1,a1,-1502 # 8002c7e8 <__func__.1>
    8001ddce:	0000f517          	auipc	a0,0xf
    8001ddd2:	5ca50513          	addi	a0,a0,1482 # 8002d398 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001ddd6:	e406                	sd	ra,8(sp)
    8001ddd8:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ddda:	07c0d0ef          	jal	8002ae56 <printf>
    8001ddde:	4529                	li	a0,10
    8001dde0:	5650b0ef          	jal	80029b44 <putchar>
    TEST_SETUP_EXCEPT();
    8001dde4:	828e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dde8:	4511                	li	a0,4
    8001ddea:	91ee30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001ddee:	57fd                	li	a5,-1
    8001ddf0:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001ddf4:	7a0025f3          	csrr	a1,tselect
    8001ddf8:	00016517          	auipc	a0,0x16
    8001ddfc:	bc850513          	addi	a0,a0,-1080 # 800339c0 <__func__.0+0x6908>
    8001de00:	0560d0ef          	jal	8002ae56 <printf>

    TEST_ASSERT("tselect right",
    8001de04:	00016617          	auipc	a2,0x16
    8001de08:	71c60613          	addi	a2,a2,1820 # 80034520 <__func__.0+0x7468>
    8001de0c:	08200593          	li	a1,130
    8001de10:	0000f517          	auipc	a0,0xf
    8001de14:	5a050513          	addi	a0,a0,1440 # 8002d3b0 <__func__.0+0x2f8>
    8001de18:	03e0d0ef          	jal	8002ae56 <printf>
    8001de1c:	60202773          	csrr	a4,hedeleg
    8001de20:	67ad                	lui	a5,0xb
    8001de22:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de26:	0000f597          	auipc	a1,0xf
    8001de2a:	55258593          	addi	a1,a1,1362 # 8002d378 <__func__.0+0x2c0>
    8001de2e:	00f70663          	beq	a4,a5,8001de3a <tselect_csr_tests_1+0x76>
    8001de32:	0000f597          	auipc	a1,0xf
    8001de36:	55658593          	addi	a1,a1,1366 # 8002d388 <__func__.0+0x2d0>
    8001de3a:	0000f517          	auipc	a0,0xf
    8001de3e:	58e50513          	addi	a0,a0,1422 # 8002d3c8 <__func__.0+0x310>
    8001de42:	0140d0ef          	jal	8002ae56 <printf>
    8001de46:	60202773          	csrr	a4,hedeleg
    8001de4a:	67ad                	lui	a5,0xb
    8001de4c:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de50:	00f70c63          	beq	a4,a5,8001de68 <tselect_csr_tests_1+0xa4>
    8001de54:	0000f517          	auipc	a0,0xf
    8001de58:	57c50513          	addi	a0,a0,1404 # 8002d3d0 <__func__.0+0x318>
    8001de5c:	7fb0c0ef          	jal	8002ae56 <printf>
    8001de60:	02900513          	li	a0,41
    8001de64:	4e10b0ef          	jal	80029b44 <putchar>
    8001de68:	4529                	li	a0,10
    8001de6a:	4db0b0ef          	jal	80029b44 <putchar>
    8001de6e:	60202773          	csrr	a4,hedeleg
    8001de72:	67ad                	lui	a5,0xb
    8001de74:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001de78:	02f70763          	beq	a4,a5,8001dea6 <tselect_csr_tests_1+0xe2>
    8001de7c:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001de7e:	0000f597          	auipc	a1,0xf
    8001de82:	50a58593          	addi	a1,a1,1290 # 8002d388 <__func__.0+0x2d0>
    8001de86:	0000f517          	auipc	a0,0xf
    8001de8a:	5aa50513          	addi	a0,a0,1450 # 8002d430 <__func__.0+0x378>
    8001de8e:	7c90c0ef          	jal	8002ae56 <printf>
    8001de92:	4511                	li	a0,4
    8001de94:	874e30ef          	jal	80000f08 <goto_priv>
    8001de98:	98de30ef          	jal	80001824 <reset_state>

}
    8001de9c:	60a2                	ld	ra,8(sp)
    8001de9e:	8522                	mv	a0,s0
    8001dea0:	6402                	ld	s0,0(sp)
    8001dea2:	0141                	addi	sp,sp,16
    8001dea4:	8082                	ret
    TEST_ASSERT("tselect right",
    8001dea6:	4405                	li	s0,1
    TEST_END();
    8001dea8:	0000f597          	auipc	a1,0xf
    8001deac:	4d058593          	addi	a1,a1,1232 # 8002d378 <__func__.0+0x2c0>
    8001deb0:	bfd9                	j	8001de86 <tselect_csr_tests_1+0xc2>

000000008001deb2 <random_instruction_tests>:


bool random_instruction_tests(){
    8001deb2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001deb4:	0000f597          	auipc	a1,0xf
    8001deb8:	94c58593          	addi	a1,a1,-1716 # 8002c800 <__func__.0>
    8001debc:	0000f517          	auipc	a0,0xf
    8001dec0:	4dc50513          	addi	a0,a0,1244 # 8002d398 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001dec4:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dec6:	7910c0ef          	jal	8002ae56 <printf>
    8001deca:	4529                	li	a0,10
    8001decc:	4790b0ef          	jal	80029b44 <putchar>
    TEST_SETUP_EXCEPT();
    8001ded0:	f3de20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001ded4:	4511                	li	a0,4
    8001ded6:	832e30ef          	jal	80000f08 <goto_priv>

    for (int i = 0; i < 5; i++)
    {
        random_m_instruction();
    8001deda:	a49e30ef          	jal	80001922 <random_m_instruction>
    8001dede:	a45e30ef          	jal	80001922 <random_m_instruction>
    8001dee2:	a41e30ef          	jal	80001922 <random_m_instruction>
    8001dee6:	a3de30ef          	jal	80001922 <random_m_instruction>
    8001deea:	a39e30ef          	jal	80001922 <random_m_instruction>
    }
    

    TEST_END();
    8001deee:	0000f597          	auipc	a1,0xf
    8001def2:	48a58593          	addi	a1,a1,1162 # 8002d378 <__func__.0+0x2c0>
    8001def6:	0000f517          	auipc	a0,0xf
    8001defa:	53a50513          	addi	a0,a0,1338 # 8002d430 <__func__.0+0x378>
    8001defe:	7590c0ef          	jal	8002ae56 <printf>
    8001df02:	4511                	li	a0,4
    8001df04:	804e30ef          	jal	80000f08 <goto_priv>
    8001df08:	91de30ef          	jal	80001824 <reset_state>

    8001df0c:	60a2                	ld	ra,8(sp)
    8001df0e:	4505                	li	a0,1
    8001df10:	0141                	addi	sp,sp,16
    8001df12:	8082                	ret

000000008001df14 <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001df14:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001df16:	0000f597          	auipc	a1,0xf
    8001df1a:	90a58593          	addi	a1,a1,-1782 # 8002c820 <__func__.50>
    8001df1e:	0000f517          	auipc	a0,0xf
    8001df22:	47a50513          	addi	a0,a0,1146 # 8002d398 <__func__.0+0x2e0>
bool time_test_1() {
    8001df26:	ec06                	sd	ra,24(sp)
    8001df28:	e822                	sd	s0,16(sp)
    8001df2a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001df2c:	72b0c0ef          	jal	8002ae56 <printf>
    8001df30:	4529                	li	a0,10
    8001df32:	4130b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001df36:	4511                	li	a0,4
    8001df38:	fd1e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001df3c:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001df40:	4509                	li	a0,2
    8001df42:	fc7e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001df46:	ec7e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001df4a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001df4e:	08200593          	li	a1,130
    8001df52:	00016617          	auipc	a2,0x16
    8001df56:	5de60613          	addi	a2,a2,1502 # 80034530 <__func__.0+0x7478>
    8001df5a:	0000f517          	auipc	a0,0xf
    8001df5e:	45650513          	addi	a0,a0,1110 # 8002d3b0 <__func__.0+0x2f8>
    8001df62:	6f50c0ef          	jal	8002ae56 <printf>
    8001df66:	00036797          	auipc	a5,0x36
    8001df6a:	0ab7c783          	lbu	a5,171(a5) # 80054011 <excpt+0x1>
    8001df6e:	00036497          	auipc	s1,0x36
    8001df72:	0a248493          	addi	s1,s1,162 # 80054010 <excpt>
    8001df76:	0000f597          	auipc	a1,0xf
    8001df7a:	41258593          	addi	a1,a1,1042 # 8002d388 <__func__.0+0x2d0>
    8001df7e:	cf89                	beqz	a5,8001df98 <time_test_1+0x84>
    8001df80:	6498                	ld	a4,8(s1)
    8001df82:	4789                	li	a5,2
    8001df84:	0000f597          	auipc	a1,0xf
    8001df88:	3f458593          	addi	a1,a1,1012 # 8002d378 <__func__.0+0x2c0>
    8001df8c:	00f70663          	beq	a4,a5,8001df98 <time_test_1+0x84>
    8001df90:	0000f597          	auipc	a1,0xf
    8001df94:	3f858593          	addi	a1,a1,1016 # 8002d388 <__func__.0+0x2d0>
    8001df98:	0000f517          	auipc	a0,0xf
    8001df9c:	43050513          	addi	a0,a0,1072 # 8002d3c8 <__func__.0+0x310>
    8001dfa0:	6b70c0ef          	jal	8002ae56 <printf>
    8001dfa4:	00036797          	auipc	a5,0x36
    8001dfa8:	06d7c783          	lbu	a5,109(a5) # 80054011 <excpt+0x1>
    8001dfac:	c789                	beqz	a5,8001dfb6 <time_test_1+0xa2>
    8001dfae:	6498                	ld	a4,8(s1)
    8001dfb0:	4789                	li	a5,2
    8001dfb2:	00f70c63          	beq	a4,a5,8001dfca <time_test_1+0xb6>
    8001dfb6:	0000f517          	auipc	a0,0xf
    8001dfba:	41a50513          	addi	a0,a0,1050 # 8002d3d0 <__func__.0+0x318>
    8001dfbe:	6990c0ef          	jal	8002ae56 <printf>
    8001dfc2:	02900513          	li	a0,41
    8001dfc6:	37f0b0ef          	jal	80029b44 <putchar>
    8001dfca:	4529                	li	a0,10
    8001dfcc:	3790b0ef          	jal	80029b44 <putchar>
    8001dfd0:	00036797          	auipc	a5,0x36
    8001dfd4:	0417c783          	lbu	a5,65(a5) # 80054011 <excpt+0x1>
    8001dfd8:	4401                	li	s0,0
    8001dfda:	c789                	beqz	a5,8001dfe4 <time_test_1+0xd0>
    8001dfdc:	6480                	ld	s0,8(s1)
    8001dfde:	1479                	addi	s0,s0,-2
    8001dfe0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001dfe4:	450d                	li	a0,3
    8001dfe6:	f23e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dfea:	e23e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001dfee:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001dff2:	08200593          	li	a1,130
    8001dff6:	00016617          	auipc	a2,0x16
    8001dffa:	58a60613          	addi	a2,a2,1418 # 80034580 <__func__.0+0x74c8>
    8001dffe:	0000f517          	auipc	a0,0xf
    8001e002:	3b250513          	addi	a0,a0,946 # 8002d3b0 <__func__.0+0x2f8>
    8001e006:	6510c0ef          	jal	8002ae56 <printf>
    8001e00a:	00036797          	auipc	a5,0x36
    8001e00e:	0077c783          	lbu	a5,7(a5) # 80054011 <excpt+0x1>
    8001e012:	0000f597          	auipc	a1,0xf
    8001e016:	37658593          	addi	a1,a1,886 # 8002d388 <__func__.0+0x2d0>
    8001e01a:	cf89                	beqz	a5,8001e034 <time_test_1+0x120>
    8001e01c:	6498                	ld	a4,8(s1)
    8001e01e:	4789                	li	a5,2
    8001e020:	0000f597          	auipc	a1,0xf
    8001e024:	35858593          	addi	a1,a1,856 # 8002d378 <__func__.0+0x2c0>
    8001e028:	00f70663          	beq	a4,a5,8001e034 <time_test_1+0x120>
    8001e02c:	0000f597          	auipc	a1,0xf
    8001e030:	35c58593          	addi	a1,a1,860 # 8002d388 <__func__.0+0x2d0>
    8001e034:	0000f517          	auipc	a0,0xf
    8001e038:	39450513          	addi	a0,a0,916 # 8002d3c8 <__func__.0+0x310>
    8001e03c:	61b0c0ef          	jal	8002ae56 <printf>
    8001e040:	00036797          	auipc	a5,0x36
    8001e044:	fd17c783          	lbu	a5,-47(a5) # 80054011 <excpt+0x1>
    8001e048:	c789                	beqz	a5,8001e052 <time_test_1+0x13e>
    8001e04a:	6498                	ld	a4,8(s1)
    8001e04c:	4789                	li	a5,2
    8001e04e:	00f70c63          	beq	a4,a5,8001e066 <time_test_1+0x152>
    8001e052:	0000f517          	auipc	a0,0xf
    8001e056:	37e50513          	addi	a0,a0,894 # 8002d3d0 <__func__.0+0x318>
    8001e05a:	5fd0c0ef          	jal	8002ae56 <printf>
    8001e05e:	02900513          	li	a0,41
    8001e062:	2e30b0ef          	jal	80029b44 <putchar>
    8001e066:	4529                	li	a0,10
    8001e068:	2dd0b0ef          	jal	80029b44 <putchar>
    8001e06c:	c801                	beqz	s0,8001e07c <time_test_1+0x168>
    8001e06e:	00036797          	auipc	a5,0x36
    8001e072:	fa37c783          	lbu	a5,-93(a5) # 80054011 <excpt+0x1>
    8001e076:	4401                	li	s0,0
    8001e078:	16079f63          	bnez	a5,8001e1f6 <time_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001e07c:	4501                	li	a0,0
    8001e07e:	e8be20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e082:	d8be20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e086:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e08a:	08200593          	li	a1,130
    8001e08e:	00016617          	auipc	a2,0x16
    8001e092:	54260613          	addi	a2,a2,1346 # 800345d0 <__func__.0+0x7518>
    8001e096:	0000f517          	auipc	a0,0xf
    8001e09a:	31a50513          	addi	a0,a0,794 # 8002d3b0 <__func__.0+0x2f8>
    8001e09e:	5b90c0ef          	jal	8002ae56 <printf>
    8001e0a2:	00036797          	auipc	a5,0x36
    8001e0a6:	f6f7c783          	lbu	a5,-145(a5) # 80054011 <excpt+0x1>
    8001e0aa:	0000f597          	auipc	a1,0xf
    8001e0ae:	2de58593          	addi	a1,a1,734 # 8002d388 <__func__.0+0x2d0>
    8001e0b2:	cf89                	beqz	a5,8001e0cc <time_test_1+0x1b8>
    8001e0b4:	6498                	ld	a4,8(s1)
    8001e0b6:	4789                	li	a5,2
    8001e0b8:	0000f597          	auipc	a1,0xf
    8001e0bc:	2c058593          	addi	a1,a1,704 # 8002d378 <__func__.0+0x2c0>
    8001e0c0:	00f70663          	beq	a4,a5,8001e0cc <time_test_1+0x1b8>
    8001e0c4:	0000f597          	auipc	a1,0xf
    8001e0c8:	2c458593          	addi	a1,a1,708 # 8002d388 <__func__.0+0x2d0>
    8001e0cc:	0000f517          	auipc	a0,0xf
    8001e0d0:	2fc50513          	addi	a0,a0,764 # 8002d3c8 <__func__.0+0x310>
    8001e0d4:	5830c0ef          	jal	8002ae56 <printf>
    8001e0d8:	00036797          	auipc	a5,0x36
    8001e0dc:	f397c783          	lbu	a5,-199(a5) # 80054011 <excpt+0x1>
    8001e0e0:	c789                	beqz	a5,8001e0ea <time_test_1+0x1d6>
    8001e0e2:	6498                	ld	a4,8(s1)
    8001e0e4:	4789                	li	a5,2
    8001e0e6:	00f70c63          	beq	a4,a5,8001e0fe <time_test_1+0x1ea>
    8001e0ea:	0000f517          	auipc	a0,0xf
    8001e0ee:	2e650513          	addi	a0,a0,742 # 8002d3d0 <__func__.0+0x318>
    8001e0f2:	5650c0ef          	jal	8002ae56 <printf>
    8001e0f6:	02900513          	li	a0,41
    8001e0fa:	24b0b0ef          	jal	80029b44 <putchar>
    8001e0fe:	4529                	li	a0,10
    8001e100:	2450b0ef          	jal	80029b44 <putchar>
    8001e104:	c801                	beqz	s0,8001e114 <time_test_1+0x200>
    8001e106:	00036797          	auipc	a5,0x36
    8001e10a:	f0b7c783          	lbu	a5,-245(a5) # 80054011 <excpt+0x1>
    8001e10e:	4401                	li	s0,0
    8001e110:	0c079e63          	bnez	a5,8001e1ec <time_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001e114:	4505                	li	a0,1
    8001e116:	df3e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e11a:	cf3e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e11e:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e122:	08200593          	li	a1,130
    8001e126:	00016617          	auipc	a2,0x16
    8001e12a:	4fa60613          	addi	a2,a2,1274 # 80034620 <__func__.0+0x7568>
    8001e12e:	0000f517          	auipc	a0,0xf
    8001e132:	28250513          	addi	a0,a0,642 # 8002d3b0 <__func__.0+0x2f8>
    8001e136:	5210c0ef          	jal	8002ae56 <printf>
    8001e13a:	00036797          	auipc	a5,0x36
    8001e13e:	ed77c783          	lbu	a5,-297(a5) # 80054011 <excpt+0x1>
    8001e142:	0000f597          	auipc	a1,0xf
    8001e146:	24658593          	addi	a1,a1,582 # 8002d388 <__func__.0+0x2d0>
    8001e14a:	cf89                	beqz	a5,8001e164 <time_test_1+0x250>
    8001e14c:	6498                	ld	a4,8(s1)
    8001e14e:	4789                	li	a5,2
    8001e150:	0000f597          	auipc	a1,0xf
    8001e154:	22858593          	addi	a1,a1,552 # 8002d378 <__func__.0+0x2c0>
    8001e158:	00f70663          	beq	a4,a5,8001e164 <time_test_1+0x250>
    8001e15c:	0000f597          	auipc	a1,0xf
    8001e160:	22c58593          	addi	a1,a1,556 # 8002d388 <__func__.0+0x2d0>
    8001e164:	0000f517          	auipc	a0,0xf
    8001e168:	26450513          	addi	a0,a0,612 # 8002d3c8 <__func__.0+0x310>
    8001e16c:	4eb0c0ef          	jal	8002ae56 <printf>
    8001e170:	00036797          	auipc	a5,0x36
    8001e174:	ea17c783          	lbu	a5,-351(a5) # 80054011 <excpt+0x1>
    8001e178:	c789                	beqz	a5,8001e182 <time_test_1+0x26e>
    8001e17a:	6498                	ld	a4,8(s1)
    8001e17c:	4789                	li	a5,2
    8001e17e:	00f70c63          	beq	a4,a5,8001e196 <time_test_1+0x282>
    8001e182:	0000f517          	auipc	a0,0xf
    8001e186:	24e50513          	addi	a0,a0,590 # 8002d3d0 <__func__.0+0x318>
    8001e18a:	4cd0c0ef          	jal	8002ae56 <printf>
    8001e18e:	02900513          	li	a0,41
    8001e192:	1b30b0ef          	jal	80029b44 <putchar>
    8001e196:	4529                	li	a0,10
    8001e198:	1ad0b0ef          	jal	80029b44 <putchar>
    8001e19c:	c015                	beqz	s0,8001e1c0 <time_test_1+0x2ac>
    8001e19e:	00036417          	auipc	s0,0x36
    8001e1a2:	e7344403          	lbu	s0,-397(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e1a6:	0000f597          	auipc	a1,0xf
    8001e1aa:	1e258593          	addi	a1,a1,482 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1ae:	cc11                	beqz	s0,8001e1ca <time_test_1+0x2b6>
    8001e1b0:	6498                	ld	a4,8(s1)
    8001e1b2:	4789                	li	a5,2
    TEST_END(); 
    8001e1b4:	0000f597          	auipc	a1,0xf
    8001e1b8:	1c458593          	addi	a1,a1,452 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1bc:	00f70763          	beq	a4,a5,8001e1ca <time_test_1+0x2b6>
    8001e1c0:	4401                	li	s0,0
    TEST_END(); 
    8001e1c2:	0000f597          	auipc	a1,0xf
    8001e1c6:	1c658593          	addi	a1,a1,454 # 8002d388 <__func__.0+0x2d0>
    8001e1ca:	0000f517          	auipc	a0,0xf
    8001e1ce:	26650513          	addi	a0,a0,614 # 8002d430 <__func__.0+0x378>
    8001e1d2:	4850c0ef          	jal	8002ae56 <printf>
    8001e1d6:	4511                	li	a0,4
    8001e1d8:	d31e20ef          	jal	80000f08 <goto_priv>
    8001e1dc:	e48e30ef          	jal	80001824 <reset_state>
}
    8001e1e0:	60e2                	ld	ra,24(sp)
    8001e1e2:	8522                	mv	a0,s0
    8001e1e4:	6442                	ld	s0,16(sp)
    8001e1e6:	64a2                	ld	s1,8(sp)
    8001e1e8:	6105                	addi	sp,sp,32
    8001e1ea:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1ec:	6480                	ld	s0,8(s1)
    8001e1ee:	1479                	addi	s0,s0,-2
    8001e1f0:	00143413          	seqz	s0,s0
    8001e1f4:	b705                	j	8001e114 <time_test_1+0x200>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1f6:	6480                	ld	s0,8(s1)
    8001e1f8:	1479                	addi	s0,s0,-2
    8001e1fa:	00143413          	seqz	s0,s0
    8001e1fe:	bdbd                	j	8001e07c <time_test_1+0x168>

000000008001e200 <time_test_2>:

bool time_test_2() {
    8001e200:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e202:	0000e597          	auipc	a1,0xe
    8001e206:	62e58593          	addi	a1,a1,1582 # 8002c830 <__func__.49>
    8001e20a:	0000f517          	auipc	a0,0xf
    8001e20e:	18e50513          	addi	a0,a0,398 # 8002d398 <__func__.0+0x2e0>
bool time_test_2() {
    8001e212:	e406                	sd	ra,8(sp)
    8001e214:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e216:	4410c0ef          	jal	8002ae56 <printf>
    8001e21a:	4529                	li	a0,10
    8001e21c:	1290b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e220:	4511                	li	a0,4
    8001e222:	ce7e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e226:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001e22a:	450d                	li	a0,3
    8001e22c:	cdde20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e230:	bdde20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e234:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e238:	08200593          	li	a1,130
    8001e23c:	00016617          	auipc	a2,0x16
    8001e240:	43460613          	addi	a2,a2,1076 # 80034670 <__func__.0+0x75b8>
    8001e244:	0000f517          	auipc	a0,0xf
    8001e248:	16c50513          	addi	a0,a0,364 # 8002d3b0 <__func__.0+0x2f8>
    8001e24c:	40b0c0ef          	jal	8002ae56 <printf>
    8001e250:	00036797          	auipc	a5,0x36
    8001e254:	dc17c783          	lbu	a5,-575(a5) # 80054011 <excpt+0x1>
    8001e258:	0000f597          	auipc	a1,0xf
    8001e25c:	12058593          	addi	a1,a1,288 # 8002d378 <__func__.0+0x2c0>
    8001e260:	c789                	beqz	a5,8001e26a <time_test_2+0x6a>
    8001e262:	0000f597          	auipc	a1,0xf
    8001e266:	12658593          	addi	a1,a1,294 # 8002d388 <__func__.0+0x2d0>
    8001e26a:	0000f517          	auipc	a0,0xf
    8001e26e:	15e50513          	addi	a0,a0,350 # 8002d3c8 <__func__.0+0x310>
    8001e272:	3e50c0ef          	jal	8002ae56 <printf>
    8001e276:	00036797          	auipc	a5,0x36
    8001e27a:	d9b7c783          	lbu	a5,-613(a5) # 80054011 <excpt+0x1>
    8001e27e:	e7a1                	bnez	a5,8001e2c6 <time_test_2+0xc6>
    8001e280:	4529                	li	a0,10
    8001e282:	0c30b0ef          	jal	80029b44 <putchar>
    8001e286:	00036797          	auipc	a5,0x36
    8001e28a:	d8b7c783          	lbu	a5,-629(a5) # 80054011 <excpt+0x1>
    8001e28e:	e795                	bnez	a5,8001e2ba <time_test_2+0xba>
    8001e290:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001e292:	0000f597          	auipc	a1,0xf
    8001e296:	0e658593          	addi	a1,a1,230 # 8002d378 <__func__.0+0x2c0>
    8001e29a:	0000f517          	auipc	a0,0xf
    8001e29e:	19650513          	addi	a0,a0,406 # 8002d430 <__func__.0+0x378>
    8001e2a2:	3b50c0ef          	jal	8002ae56 <printf>
    8001e2a6:	4511                	li	a0,4
    8001e2a8:	c61e20ef          	jal	80000f08 <goto_priv>
    8001e2ac:	d78e30ef          	jal	80001824 <reset_state>
}
    8001e2b0:	60a2                	ld	ra,8(sp)
    8001e2b2:	8522                	mv	a0,s0
    8001e2b4:	6402                	ld	s0,0(sp)
    8001e2b6:	0141                	addi	sp,sp,16
    8001e2b8:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e2ba:	4401                	li	s0,0
    TEST_END(); 
    8001e2bc:	0000f597          	auipc	a1,0xf
    8001e2c0:	0cc58593          	addi	a1,a1,204 # 8002d388 <__func__.0+0x2d0>
    8001e2c4:	bfd9                	j	8001e29a <time_test_2+0x9a>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e2c6:	0000f517          	auipc	a0,0xf
    8001e2ca:	10a50513          	addi	a0,a0,266 # 8002d3d0 <__func__.0+0x318>
    8001e2ce:	3890c0ef          	jal	8002ae56 <printf>
    8001e2d2:	02900513          	li	a0,41
    8001e2d6:	06f0b0ef          	jal	80029b44 <putchar>
    8001e2da:	b75d                	j	8001e280 <time_test_2+0x80>

000000008001e2dc <time_test_3>:

bool time_test_3() {
    8001e2dc:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e2de:	0000e597          	auipc	a1,0xe
    8001e2e2:	56258593          	addi	a1,a1,1378 # 8002c840 <__func__.48>
    8001e2e6:	0000f517          	auipc	a0,0xf
    8001e2ea:	0b250513          	addi	a0,a0,178 # 8002d398 <__func__.0+0x2e0>
bool time_test_3() {
    8001e2ee:	ec06                	sd	ra,24(sp)
    8001e2f0:	e822                	sd	s0,16(sp)
    8001e2f2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e2f4:	3630c0ef          	jal	8002ae56 <printf>
    8001e2f8:	4529                	li	a0,10
    8001e2fa:	04b0b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e2fe:	4511                	li	a0,4
    8001e300:	c09e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e304:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e308:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e30c:	4505                	li	a0,1
    8001e30e:	bfbe20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e312:	afbe20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e316:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e31a:	08200593          	li	a1,130
    8001e31e:	00016617          	auipc	a2,0x16
    8001e322:	38a60613          	addi	a2,a2,906 # 800346a8 <__func__.0+0x75f0>
    8001e326:	0000f517          	auipc	a0,0xf
    8001e32a:	08a50513          	addi	a0,a0,138 # 8002d3b0 <__func__.0+0x2f8>
    8001e32e:	3290c0ef          	jal	8002ae56 <printf>
    8001e332:	00036797          	auipc	a5,0x36
    8001e336:	cdf7c783          	lbu	a5,-801(a5) # 80054011 <excpt+0x1>
    8001e33a:	00036497          	auipc	s1,0x36
    8001e33e:	cd648493          	addi	s1,s1,-810 # 80054010 <excpt>
    8001e342:	0000f597          	auipc	a1,0xf
    8001e346:	04658593          	addi	a1,a1,70 # 8002d388 <__func__.0+0x2d0>
    8001e34a:	cf89                	beqz	a5,8001e364 <time_test_3+0x88>
    8001e34c:	6498                	ld	a4,8(s1)
    8001e34e:	4789                	li	a5,2
    8001e350:	0000f597          	auipc	a1,0xf
    8001e354:	02858593          	addi	a1,a1,40 # 8002d378 <__func__.0+0x2c0>
    8001e358:	00f70663          	beq	a4,a5,8001e364 <time_test_3+0x88>
    8001e35c:	0000f597          	auipc	a1,0xf
    8001e360:	02c58593          	addi	a1,a1,44 # 8002d388 <__func__.0+0x2d0>
    8001e364:	0000f517          	auipc	a0,0xf
    8001e368:	06450513          	addi	a0,a0,100 # 8002d3c8 <__func__.0+0x310>
    8001e36c:	2eb0c0ef          	jal	8002ae56 <printf>
    8001e370:	00036797          	auipc	a5,0x36
    8001e374:	ca17c783          	lbu	a5,-863(a5) # 80054011 <excpt+0x1>
    8001e378:	c789                	beqz	a5,8001e382 <time_test_3+0xa6>
    8001e37a:	6498                	ld	a4,8(s1)
    8001e37c:	4789                	li	a5,2
    8001e37e:	00f70c63          	beq	a4,a5,8001e396 <time_test_3+0xba>
    8001e382:	0000f517          	auipc	a0,0xf
    8001e386:	04e50513          	addi	a0,a0,78 # 8002d3d0 <__func__.0+0x318>
    8001e38a:	2cd0c0ef          	jal	8002ae56 <printf>
    8001e38e:	02900513          	li	a0,41
    8001e392:	7b20b0ef          	jal	80029b44 <putchar>
    8001e396:	4529                	li	a0,10
    8001e398:	7ac0b0ef          	jal	80029b44 <putchar>
    8001e39c:	00036417          	auipc	s0,0x36
    8001e3a0:	c7544403          	lbu	s0,-907(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e3a4:	0000f597          	auipc	a1,0xf
    8001e3a8:	fe458593          	addi	a1,a1,-28 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e3ac:	cc11                	beqz	s0,8001e3c8 <time_test_3+0xec>
    8001e3ae:	6498                	ld	a4,8(s1)
    8001e3b0:	4789                	li	a5,2
    TEST_END(); 
    8001e3b2:	0000f597          	auipc	a1,0xf
    8001e3b6:	fc658593          	addi	a1,a1,-58 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e3ba:	00f70763          	beq	a4,a5,8001e3c8 <time_test_3+0xec>
    8001e3be:	4401                	li	s0,0
    TEST_END(); 
    8001e3c0:	0000f597          	auipc	a1,0xf
    8001e3c4:	fc858593          	addi	a1,a1,-56 # 8002d388 <__func__.0+0x2d0>
    8001e3c8:	0000f517          	auipc	a0,0xf
    8001e3cc:	06850513          	addi	a0,a0,104 # 8002d430 <__func__.0+0x378>
    8001e3d0:	2870c0ef          	jal	8002ae56 <printf>
    8001e3d4:	4511                	li	a0,4
    8001e3d6:	b33e20ef          	jal	80000f08 <goto_priv>
    8001e3da:	c4ae30ef          	jal	80001824 <reset_state>
}
    8001e3de:	60e2                	ld	ra,24(sp)
    8001e3e0:	8522                	mv	a0,s0
    8001e3e2:	6442                	ld	s0,16(sp)
    8001e3e4:	64a2                	ld	s1,8(sp)
    8001e3e6:	6105                	addi	sp,sp,32
    8001e3e8:	8082                	ret

000000008001e3ea <time_test_4>:

bool time_test_4() {
    8001e3ea:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e3ec:	0000e597          	auipc	a1,0xe
    8001e3f0:	46458593          	addi	a1,a1,1124 # 8002c850 <__func__.47>
    8001e3f4:	0000f517          	auipc	a0,0xf
    8001e3f8:	fa450513          	addi	a0,a0,-92 # 8002d398 <__func__.0+0x2e0>
bool time_test_4() {
    8001e3fc:	e406                	sd	ra,8(sp)
    8001e3fe:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e400:	2570c0ef          	jal	8002ae56 <printf>
    8001e404:	4529                	li	a0,10
    8001e406:	73e0b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e40a:	4511                	li	a0,4
    8001e40c:	afde20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e410:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e414:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e418:	4505                	li	a0,1
    8001e41a:	aefe20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e41e:	9efe20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e422:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e426:	08200593          	li	a1,130
    8001e42a:	00016617          	auipc	a2,0x16
    8001e42e:	2ce60613          	addi	a2,a2,718 # 800346f8 <__func__.0+0x7640>
    8001e432:	0000f517          	auipc	a0,0xf
    8001e436:	f7e50513          	addi	a0,a0,-130 # 8002d3b0 <__func__.0+0x2f8>
    8001e43a:	21d0c0ef          	jal	8002ae56 <printf>
    8001e43e:	00036797          	auipc	a5,0x36
    8001e442:	bd37c783          	lbu	a5,-1069(a5) # 80054011 <excpt+0x1>
    8001e446:	0000f597          	auipc	a1,0xf
    8001e44a:	f3258593          	addi	a1,a1,-206 # 8002d378 <__func__.0+0x2c0>
    8001e44e:	c789                	beqz	a5,8001e458 <time_test_4+0x6e>
    8001e450:	0000f597          	auipc	a1,0xf
    8001e454:	f3858593          	addi	a1,a1,-200 # 8002d388 <__func__.0+0x2d0>
    8001e458:	0000f517          	auipc	a0,0xf
    8001e45c:	f7050513          	addi	a0,a0,-144 # 8002d3c8 <__func__.0+0x310>
    8001e460:	1f70c0ef          	jal	8002ae56 <printf>
    8001e464:	00036797          	auipc	a5,0x36
    8001e468:	bad7c783          	lbu	a5,-1107(a5) # 80054011 <excpt+0x1>
    8001e46c:	e7a1                	bnez	a5,8001e4b4 <time_test_4+0xca>
    8001e46e:	4529                	li	a0,10
    8001e470:	6d40b0ef          	jal	80029b44 <putchar>
    8001e474:	00036797          	auipc	a5,0x36
    8001e478:	b9d7c783          	lbu	a5,-1123(a5) # 80054011 <excpt+0x1>
    8001e47c:	e795                	bnez	a5,8001e4a8 <time_test_4+0xbe>
    8001e47e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e480:	0000f597          	auipc	a1,0xf
    8001e484:	ef858593          	addi	a1,a1,-264 # 8002d378 <__func__.0+0x2c0>
    8001e488:	0000f517          	auipc	a0,0xf
    8001e48c:	fa850513          	addi	a0,a0,-88 # 8002d430 <__func__.0+0x378>
    8001e490:	1c70c0ef          	jal	8002ae56 <printf>
    8001e494:	4511                	li	a0,4
    8001e496:	a73e20ef          	jal	80000f08 <goto_priv>
    8001e49a:	b8ae30ef          	jal	80001824 <reset_state>
}
    8001e49e:	60a2                	ld	ra,8(sp)
    8001e4a0:	8522                	mv	a0,s0
    8001e4a2:	6402                	ld	s0,0(sp)
    8001e4a4:	0141                	addi	sp,sp,16
    8001e4a6:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e4a8:	4401                	li	s0,0
    TEST_END(); 
    8001e4aa:	0000f597          	auipc	a1,0xf
    8001e4ae:	ede58593          	addi	a1,a1,-290 # 8002d388 <__func__.0+0x2d0>
    8001e4b2:	bfd9                	j	8001e488 <time_test_4+0x9e>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e4b4:	0000f517          	auipc	a0,0xf
    8001e4b8:	f1c50513          	addi	a0,a0,-228 # 8002d3d0 <__func__.0+0x318>
    8001e4bc:	19b0c0ef          	jal	8002ae56 <printf>
    8001e4c0:	02900513          	li	a0,41
    8001e4c4:	6800b0ef          	jal	80029b44 <putchar>
    8001e4c8:	b75d                	j	8001e46e <time_test_4+0x84>

000000008001e4ca <time_test_5>:

bool time_test_5() {
    8001e4ca:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e4cc:	0000e597          	auipc	a1,0xe
    8001e4d0:	39458593          	addi	a1,a1,916 # 8002c860 <__func__.46>
    8001e4d4:	0000f517          	auipc	a0,0xf
    8001e4d8:	ec450513          	addi	a0,a0,-316 # 8002d398 <__func__.0+0x2e0>
bool time_test_5() {
    8001e4dc:	ec06                	sd	ra,24(sp)
    8001e4de:	e822                	sd	s0,16(sp)
    8001e4e0:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e4e2:	1750c0ef          	jal	8002ae56 <printf>
    8001e4e6:	4529                	li	a0,10
    8001e4e8:	65c0b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e4ec:	4511                	li	a0,4
    8001e4ee:	a1be20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e4f2:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e4f6:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e4fa:	4509                	li	a0,2
    8001e4fc:	a0de20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e500:	90de20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e504:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e508:	08200593          	li	a1,130
    8001e50c:	00016617          	auipc	a2,0x16
    8001e510:	23460613          	addi	a2,a2,564 # 80034740 <__func__.0+0x7688>
    8001e514:	0000f517          	auipc	a0,0xf
    8001e518:	e9c50513          	addi	a0,a0,-356 # 8002d3b0 <__func__.0+0x2f8>
    8001e51c:	13b0c0ef          	jal	8002ae56 <printf>
    8001e520:	00036797          	auipc	a5,0x36
    8001e524:	af17c783          	lbu	a5,-1295(a5) # 80054011 <excpt+0x1>
    8001e528:	00036497          	auipc	s1,0x36
    8001e52c:	ae848493          	addi	s1,s1,-1304 # 80054010 <excpt>
    8001e530:	0000f597          	auipc	a1,0xf
    8001e534:	e5858593          	addi	a1,a1,-424 # 8002d388 <__func__.0+0x2d0>
    8001e538:	cf89                	beqz	a5,8001e552 <time_test_5+0x88>
    8001e53a:	6498                	ld	a4,8(s1)
    8001e53c:	47d9                	li	a5,22
    8001e53e:	0000f597          	auipc	a1,0xf
    8001e542:	e3a58593          	addi	a1,a1,-454 # 8002d378 <__func__.0+0x2c0>
    8001e546:	00f70663          	beq	a4,a5,8001e552 <time_test_5+0x88>
    8001e54a:	0000f597          	auipc	a1,0xf
    8001e54e:	e3e58593          	addi	a1,a1,-450 # 8002d388 <__func__.0+0x2d0>
    8001e552:	0000f517          	auipc	a0,0xf
    8001e556:	e7650513          	addi	a0,a0,-394 # 8002d3c8 <__func__.0+0x310>
    8001e55a:	0fd0c0ef          	jal	8002ae56 <printf>
    8001e55e:	00036797          	auipc	a5,0x36
    8001e562:	ab37c783          	lbu	a5,-1357(a5) # 80054011 <excpt+0x1>
    8001e566:	c789                	beqz	a5,8001e570 <time_test_5+0xa6>
    8001e568:	6498                	ld	a4,8(s1)
    8001e56a:	47d9                	li	a5,22
    8001e56c:	00f70c63          	beq	a4,a5,8001e584 <time_test_5+0xba>
    8001e570:	0000f517          	auipc	a0,0xf
    8001e574:	e6050513          	addi	a0,a0,-416 # 8002d3d0 <__func__.0+0x318>
    8001e578:	0df0c0ef          	jal	8002ae56 <printf>
    8001e57c:	02900513          	li	a0,41
    8001e580:	5c40b0ef          	jal	80029b44 <putchar>
    8001e584:	4529                	li	a0,10
    8001e586:	5be0b0ef          	jal	80029b44 <putchar>
    8001e58a:	00036417          	auipc	s0,0x36
    8001e58e:	a8744403          	lbu	s0,-1401(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e592:	0000f597          	auipc	a1,0xf
    8001e596:	df658593          	addi	a1,a1,-522 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e59a:	cc11                	beqz	s0,8001e5b6 <time_test_5+0xec>
    8001e59c:	6498                	ld	a4,8(s1)
    8001e59e:	47d9                	li	a5,22
    TEST_END(); 
    8001e5a0:	0000f597          	auipc	a1,0xf
    8001e5a4:	dd858593          	addi	a1,a1,-552 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e5a8:	00f70763          	beq	a4,a5,8001e5b6 <time_test_5+0xec>
    8001e5ac:	4401                	li	s0,0
    TEST_END(); 
    8001e5ae:	0000f597          	auipc	a1,0xf
    8001e5b2:	dda58593          	addi	a1,a1,-550 # 8002d388 <__func__.0+0x2d0>
    8001e5b6:	0000f517          	auipc	a0,0xf
    8001e5ba:	e7a50513          	addi	a0,a0,-390 # 8002d430 <__func__.0+0x378>
    8001e5be:	0990c0ef          	jal	8002ae56 <printf>
    8001e5c2:	4511                	li	a0,4
    8001e5c4:	945e20ef          	jal	80000f08 <goto_priv>
    8001e5c8:	a5ce30ef          	jal	80001824 <reset_state>
}
    8001e5cc:	60e2                	ld	ra,24(sp)
    8001e5ce:	8522                	mv	a0,s0
    8001e5d0:	6442                	ld	s0,16(sp)
    8001e5d2:	64a2                	ld	s1,8(sp)
    8001e5d4:	6105                	addi	sp,sp,32
    8001e5d6:	8082                	ret

000000008001e5d8 <time_test_6>:

bool time_test_6() {
    8001e5d8:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e5da:	0000e597          	auipc	a1,0xe
    8001e5de:	29658593          	addi	a1,a1,662 # 8002c870 <__func__.45>
    8001e5e2:	0000f517          	auipc	a0,0xf
    8001e5e6:	db650513          	addi	a0,a0,-586 # 8002d398 <__func__.0+0x2e0>
bool time_test_6() {
    8001e5ea:	e406                	sd	ra,8(sp)
    8001e5ec:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e5ee:	0690c0ef          	jal	8002ae56 <printf>
    8001e5f2:	4529                	li	a0,10
    8001e5f4:	5500b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e5f8:	4511                	li	a0,4
    8001e5fa:	90fe20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e5fe:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e602:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e606:	4509                	li	a0,2
    8001e608:	901e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e60c:	801e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e610:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e614:	08200593          	li	a1,130
    8001e618:	00016617          	auipc	a2,0x16
    8001e61c:	18860613          	addi	a2,a2,392 # 800347a0 <__func__.0+0x76e8>
    8001e620:	0000f517          	auipc	a0,0xf
    8001e624:	d9050513          	addi	a0,a0,-624 # 8002d3b0 <__func__.0+0x2f8>
    8001e628:	02f0c0ef          	jal	8002ae56 <printf>
    8001e62c:	00036797          	auipc	a5,0x36
    8001e630:	9e57c783          	lbu	a5,-1563(a5) # 80054011 <excpt+0x1>
    8001e634:	0000f597          	auipc	a1,0xf
    8001e638:	d4458593          	addi	a1,a1,-700 # 8002d378 <__func__.0+0x2c0>
    8001e63c:	c789                	beqz	a5,8001e646 <time_test_6+0x6e>
    8001e63e:	0000f597          	auipc	a1,0xf
    8001e642:	d4a58593          	addi	a1,a1,-694 # 8002d388 <__func__.0+0x2d0>
    8001e646:	0000f517          	auipc	a0,0xf
    8001e64a:	d8250513          	addi	a0,a0,-638 # 8002d3c8 <__func__.0+0x310>
    8001e64e:	0090c0ef          	jal	8002ae56 <printf>
    8001e652:	00036797          	auipc	a5,0x36
    8001e656:	9bf7c783          	lbu	a5,-1601(a5) # 80054011 <excpt+0x1>
    8001e65a:	e7a1                	bnez	a5,8001e6a2 <time_test_6+0xca>
    8001e65c:	4529                	li	a0,10
    8001e65e:	4e60b0ef          	jal	80029b44 <putchar>
    8001e662:	00036797          	auipc	a5,0x36
    8001e666:	9af7c783          	lbu	a5,-1617(a5) # 80054011 <excpt+0x1>
    8001e66a:	e795                	bnez	a5,8001e696 <time_test_6+0xbe>
    8001e66c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e66e:	0000f597          	auipc	a1,0xf
    8001e672:	d0a58593          	addi	a1,a1,-758 # 8002d378 <__func__.0+0x2c0>
    8001e676:	0000f517          	auipc	a0,0xf
    8001e67a:	dba50513          	addi	a0,a0,-582 # 8002d430 <__func__.0+0x378>
    8001e67e:	7d80c0ef          	jal	8002ae56 <printf>
    8001e682:	4511                	li	a0,4
    8001e684:	885e20ef          	jal	80000f08 <goto_priv>
    8001e688:	99ce30ef          	jal	80001824 <reset_state>
}
    8001e68c:	60a2                	ld	ra,8(sp)
    8001e68e:	8522                	mv	a0,s0
    8001e690:	6402                	ld	s0,0(sp)
    8001e692:	0141                	addi	sp,sp,16
    8001e694:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e696:	4401                	li	s0,0
    TEST_END(); 
    8001e698:	0000f597          	auipc	a1,0xf
    8001e69c:	cf058593          	addi	a1,a1,-784 # 8002d388 <__func__.0+0x2d0>
    8001e6a0:	bfd9                	j	8001e676 <time_test_6+0x9e>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e6a2:	0000f517          	auipc	a0,0xf
    8001e6a6:	d2e50513          	addi	a0,a0,-722 # 8002d3d0 <__func__.0+0x318>
    8001e6aa:	7ac0c0ef          	jal	8002ae56 <printf>
    8001e6ae:	02900513          	li	a0,41
    8001e6b2:	4920b0ef          	jal	80029b44 <putchar>
    8001e6b6:	b75d                	j	8001e65c <time_test_6+0x84>

000000008001e6b8 <time_test_7>:

bool time_test_7() {
    8001e6b8:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e6ba:	0000e597          	auipc	a1,0xe
    8001e6be:	1c658593          	addi	a1,a1,454 # 8002c880 <__func__.44>
    8001e6c2:	0000f517          	auipc	a0,0xf
    8001e6c6:	cd650513          	addi	a0,a0,-810 # 8002d398 <__func__.0+0x2e0>
bool time_test_7() {
    8001e6ca:	e406                	sd	ra,8(sp)
    8001e6cc:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e6ce:	7880c0ef          	jal	8002ae56 <printf>
    8001e6d2:	4529                	li	a0,10
    8001e6d4:	4700b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e6d8:	4511                	li	a0,4
    8001e6da:	82fe20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e6de:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e6e2:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e6e6:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e6ea:	4501                	li	a0,0
    8001e6ec:	81de20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e6f0:	f1ce20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e6f4:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e6f8:	08200593          	li	a1,130
    8001e6fc:	00016617          	auipc	a2,0x16
    8001e700:	0ec60613          	addi	a2,a2,236 # 800347e8 <__func__.0+0x7730>
    8001e704:	0000f517          	auipc	a0,0xf
    8001e708:	cac50513          	addi	a0,a0,-852 # 8002d3b0 <__func__.0+0x2f8>
    8001e70c:	74a0c0ef          	jal	8002ae56 <printf>
    8001e710:	00036797          	auipc	a5,0x36
    8001e714:	9017c783          	lbu	a5,-1791(a5) # 80054011 <excpt+0x1>
    8001e718:	0000f597          	auipc	a1,0xf
    8001e71c:	c6058593          	addi	a1,a1,-928 # 8002d378 <__func__.0+0x2c0>
    8001e720:	c789                	beqz	a5,8001e72a <time_test_7+0x72>
    8001e722:	0000f597          	auipc	a1,0xf
    8001e726:	c6658593          	addi	a1,a1,-922 # 8002d388 <__func__.0+0x2d0>
    8001e72a:	0000f517          	auipc	a0,0xf
    8001e72e:	c9e50513          	addi	a0,a0,-866 # 8002d3c8 <__func__.0+0x310>
    8001e732:	7240c0ef          	jal	8002ae56 <printf>
    8001e736:	00036797          	auipc	a5,0x36
    8001e73a:	8db7c783          	lbu	a5,-1829(a5) # 80054011 <excpt+0x1>
    8001e73e:	e7a1                	bnez	a5,8001e786 <time_test_7+0xce>
    8001e740:	4529                	li	a0,10
    8001e742:	4020b0ef          	jal	80029b44 <putchar>
    8001e746:	00036797          	auipc	a5,0x36
    8001e74a:	8cb7c783          	lbu	a5,-1845(a5) # 80054011 <excpt+0x1>
    8001e74e:	e795                	bnez	a5,8001e77a <time_test_7+0xc2>
    8001e750:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e752:	0000f597          	auipc	a1,0xf
    8001e756:	c2658593          	addi	a1,a1,-986 # 8002d378 <__func__.0+0x2c0>
    8001e75a:	0000f517          	auipc	a0,0xf
    8001e75e:	cd650513          	addi	a0,a0,-810 # 8002d430 <__func__.0+0x378>
    8001e762:	6f40c0ef          	jal	8002ae56 <printf>
    8001e766:	4511                	li	a0,4
    8001e768:	fa0e20ef          	jal	80000f08 <goto_priv>
    8001e76c:	8b8e30ef          	jal	80001824 <reset_state>
}
    8001e770:	60a2                	ld	ra,8(sp)
    8001e772:	8522                	mv	a0,s0
    8001e774:	6402                	ld	s0,0(sp)
    8001e776:	0141                	addi	sp,sp,16
    8001e778:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e77a:	4401                	li	s0,0
    TEST_END(); 
    8001e77c:	0000f597          	auipc	a1,0xf
    8001e780:	c0c58593          	addi	a1,a1,-1012 # 8002d388 <__func__.0+0x2d0>
    8001e784:	bfd9                	j	8001e75a <time_test_7+0xa2>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e786:	0000f517          	auipc	a0,0xf
    8001e78a:	c4a50513          	addi	a0,a0,-950 # 8002d3d0 <__func__.0+0x318>
    8001e78e:	6c80c0ef          	jal	8002ae56 <printf>
    8001e792:	02900513          	li	a0,41
    8001e796:	3ae0b0ef          	jal	80029b44 <putchar>
    8001e79a:	b75d                	j	8001e740 <time_test_7+0x88>

000000008001e79c <time_test_8>:

bool time_test_8() {
    8001e79c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e79e:	0000e597          	auipc	a1,0xe
    8001e7a2:	0f258593          	addi	a1,a1,242 # 8002c890 <__func__.43>
    8001e7a6:	0000f517          	auipc	a0,0xf
    8001e7aa:	bf250513          	addi	a0,a0,-1038 # 8002d398 <__func__.0+0x2e0>
bool time_test_8() {
    8001e7ae:	ec06                	sd	ra,24(sp)
    8001e7b0:	e822                	sd	s0,16(sp)
    8001e7b2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e7b4:	6a20c0ef          	jal	8002ae56 <printf>
    8001e7b8:	4529                	li	a0,10
    8001e7ba:	38a0b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e7be:	4511                	li	a0,4
    8001e7c0:	f48e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e7c4:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e7c8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e7cc:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e7d0:	4501                	li	a0,0
    8001e7d2:	f36e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e7d6:	e36e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e7da:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e7de:	08200593          	li	a1,130
    8001e7e2:	00016617          	auipc	a2,0x16
    8001e7e6:	05e60613          	addi	a2,a2,94 # 80034840 <__func__.0+0x7788>
    8001e7ea:	0000f517          	auipc	a0,0xf
    8001e7ee:	bc650513          	addi	a0,a0,-1082 # 8002d3b0 <__func__.0+0x2f8>
    8001e7f2:	6640c0ef          	jal	8002ae56 <printf>
    8001e7f6:	00036797          	auipc	a5,0x36
    8001e7fa:	81b7c783          	lbu	a5,-2021(a5) # 80054011 <excpt+0x1>
    8001e7fe:	00036497          	auipc	s1,0x36
    8001e802:	81248493          	addi	s1,s1,-2030 # 80054010 <excpt>
    8001e806:	0000f597          	auipc	a1,0xf
    8001e80a:	b8258593          	addi	a1,a1,-1150 # 8002d388 <__func__.0+0x2d0>
    8001e80e:	cf89                	beqz	a5,8001e828 <time_test_8+0x8c>
    8001e810:	6498                	ld	a4,8(s1)
    8001e812:	47d9                	li	a5,22
    8001e814:	0000f597          	auipc	a1,0xf
    8001e818:	b6458593          	addi	a1,a1,-1180 # 8002d378 <__func__.0+0x2c0>
    8001e81c:	00f70663          	beq	a4,a5,8001e828 <time_test_8+0x8c>
    8001e820:	0000f597          	auipc	a1,0xf
    8001e824:	b6858593          	addi	a1,a1,-1176 # 8002d388 <__func__.0+0x2d0>
    8001e828:	0000f517          	auipc	a0,0xf
    8001e82c:	ba050513          	addi	a0,a0,-1120 # 8002d3c8 <__func__.0+0x310>
    8001e830:	6260c0ef          	jal	8002ae56 <printf>
    8001e834:	00035797          	auipc	a5,0x35
    8001e838:	7dd7c783          	lbu	a5,2013(a5) # 80054011 <excpt+0x1>
    8001e83c:	c789                	beqz	a5,8001e846 <time_test_8+0xaa>
    8001e83e:	6498                	ld	a4,8(s1)
    8001e840:	47d9                	li	a5,22
    8001e842:	00f70c63          	beq	a4,a5,8001e85a <time_test_8+0xbe>
    8001e846:	0000f517          	auipc	a0,0xf
    8001e84a:	b8a50513          	addi	a0,a0,-1142 # 8002d3d0 <__func__.0+0x318>
    8001e84e:	6080c0ef          	jal	8002ae56 <printf>
    8001e852:	02900513          	li	a0,41
    8001e856:	2ee0b0ef          	jal	80029b44 <putchar>
    8001e85a:	4529                	li	a0,10
    8001e85c:	2e80b0ef          	jal	80029b44 <putchar>
    8001e860:	00035417          	auipc	s0,0x35
    8001e864:	7b144403          	lbu	s0,1969(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e868:	0000f597          	auipc	a1,0xf
    8001e86c:	b2058593          	addi	a1,a1,-1248 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e870:	cc11                	beqz	s0,8001e88c <time_test_8+0xf0>
    8001e872:	6498                	ld	a4,8(s1)
    8001e874:	47d9                	li	a5,22
    TEST_END(); 
    8001e876:	0000f597          	auipc	a1,0xf
    8001e87a:	b0258593          	addi	a1,a1,-1278 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e87e:	00f70763          	beq	a4,a5,8001e88c <time_test_8+0xf0>
    8001e882:	4401                	li	s0,0
    TEST_END(); 
    8001e884:	0000f597          	auipc	a1,0xf
    8001e888:	b0458593          	addi	a1,a1,-1276 # 8002d388 <__func__.0+0x2d0>
    8001e88c:	0000f517          	auipc	a0,0xf
    8001e890:	ba450513          	addi	a0,a0,-1116 # 8002d430 <__func__.0+0x378>
    8001e894:	5c20c0ef          	jal	8002ae56 <printf>
    8001e898:	4511                	li	a0,4
    8001e89a:	e6ee20ef          	jal	80000f08 <goto_priv>
    8001e89e:	f87e20ef          	jal	80001824 <reset_state>
}
    8001e8a2:	60e2                	ld	ra,24(sp)
    8001e8a4:	8522                	mv	a0,s0
    8001e8a6:	6442                	ld	s0,16(sp)
    8001e8a8:	64a2                	ld	s1,8(sp)
    8001e8aa:	6105                	addi	sp,sp,32
    8001e8ac:	8082                	ret

000000008001e8ae <time_test_9>:

bool time_test_9() {
    8001e8ae:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e8b0:	0000e597          	auipc	a1,0xe
    8001e8b4:	ff058593          	addi	a1,a1,-16 # 8002c8a0 <__func__.42>
    8001e8b8:	0000f517          	auipc	a0,0xf
    8001e8bc:	ae050513          	addi	a0,a0,-1312 # 8002d398 <__func__.0+0x2e0>
bool time_test_9() {
    8001e8c0:	ec06                	sd	ra,24(sp)
    8001e8c2:	e822                	sd	s0,16(sp)
    8001e8c4:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e8c6:	5900c0ef          	jal	8002ae56 <printf>
    8001e8ca:	4529                	li	a0,10
    8001e8cc:	2780b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e8d0:	4511                	li	a0,4
    8001e8d2:	e36e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e8d6:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e8da:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e8de:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8001e8e2:	4505                	li	a0,1
    8001e8e4:	e24e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e8e8:	d24e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e8ec:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e8f0:	08200593          	li	a1,130
    8001e8f4:	00016617          	auipc	a2,0x16
    8001e8f8:	fbc60613          	addi	a2,a2,-68 # 800348b0 <__func__.0+0x77f8>
    8001e8fc:	0000f517          	auipc	a0,0xf
    8001e900:	ab450513          	addi	a0,a0,-1356 # 8002d3b0 <__func__.0+0x2f8>
    8001e904:	5520c0ef          	jal	8002ae56 <printf>
    8001e908:	00035797          	auipc	a5,0x35
    8001e90c:	7097c783          	lbu	a5,1801(a5) # 80054011 <excpt+0x1>
    8001e910:	00035497          	auipc	s1,0x35
    8001e914:	70048493          	addi	s1,s1,1792 # 80054010 <excpt>
    8001e918:	0000f597          	auipc	a1,0xf
    8001e91c:	a7058593          	addi	a1,a1,-1424 # 8002d388 <__func__.0+0x2d0>
    8001e920:	cf89                	beqz	a5,8001e93a <time_test_9+0x8c>
    8001e922:	6498                	ld	a4,8(s1)
    8001e924:	4789                	li	a5,2
    8001e926:	0000f597          	auipc	a1,0xf
    8001e92a:	a5258593          	addi	a1,a1,-1454 # 8002d378 <__func__.0+0x2c0>
    8001e92e:	00f70663          	beq	a4,a5,8001e93a <time_test_9+0x8c>
    8001e932:	0000f597          	auipc	a1,0xf
    8001e936:	a5658593          	addi	a1,a1,-1450 # 8002d388 <__func__.0+0x2d0>
    8001e93a:	0000f517          	auipc	a0,0xf
    8001e93e:	a8e50513          	addi	a0,a0,-1394 # 8002d3c8 <__func__.0+0x310>
    8001e942:	5140c0ef          	jal	8002ae56 <printf>
    8001e946:	00035797          	auipc	a5,0x35
    8001e94a:	6cb7c783          	lbu	a5,1739(a5) # 80054011 <excpt+0x1>
    8001e94e:	c789                	beqz	a5,8001e958 <time_test_9+0xaa>
    8001e950:	6498                	ld	a4,8(s1)
    8001e952:	4789                	li	a5,2
    8001e954:	00f70c63          	beq	a4,a5,8001e96c <time_test_9+0xbe>
    8001e958:	0000f517          	auipc	a0,0xf
    8001e95c:	a7850513          	addi	a0,a0,-1416 # 8002d3d0 <__func__.0+0x318>
    8001e960:	4f60c0ef          	jal	8002ae56 <printf>
    8001e964:	02900513          	li	a0,41
    8001e968:	1dc0b0ef          	jal	80029b44 <putchar>
    8001e96c:	4529                	li	a0,10
    8001e96e:	1d60b0ef          	jal	80029b44 <putchar>
    8001e972:	00035417          	auipc	s0,0x35
    8001e976:	69f44403          	lbu	s0,1695(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e97a:	0000f597          	auipc	a1,0xf
    8001e97e:	a0e58593          	addi	a1,a1,-1522 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e982:	cc11                	beqz	s0,8001e99e <time_test_9+0xf0>
    8001e984:	6498                	ld	a4,8(s1)
    8001e986:	4789                	li	a5,2
    TEST_END(); 
    8001e988:	0000f597          	auipc	a1,0xf
    8001e98c:	9f058593          	addi	a1,a1,-1552 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e990:	00f70763          	beq	a4,a5,8001e99e <time_test_9+0xf0>
    8001e994:	4401                	li	s0,0
    TEST_END(); 
    8001e996:	0000f597          	auipc	a1,0xf
    8001e99a:	9f258593          	addi	a1,a1,-1550 # 8002d388 <__func__.0+0x2d0>
    8001e99e:	0000f517          	auipc	a0,0xf
    8001e9a2:	a9250513          	addi	a0,a0,-1390 # 8002d430 <__func__.0+0x378>
    8001e9a6:	4b00c0ef          	jal	8002ae56 <printf>
    8001e9aa:	4511                	li	a0,4
    8001e9ac:	d5ce20ef          	jal	80000f08 <goto_priv>
    8001e9b0:	e75e20ef          	jal	80001824 <reset_state>
}
    8001e9b4:	60e2                	ld	ra,24(sp)
    8001e9b6:	8522                	mv	a0,s0
    8001e9b8:	6442                	ld	s0,16(sp)
    8001e9ba:	64a2                	ld	s1,8(sp)
    8001e9bc:	6105                	addi	sp,sp,32
    8001e9be:	8082                	ret

000000008001e9c0 <time_test_10>:

bool time_test_10() {
    8001e9c0:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e9c2:	0000e597          	auipc	a1,0xe
    8001e9c6:	eee58593          	addi	a1,a1,-274 # 8002c8b0 <__func__.41>
    8001e9ca:	0000f517          	auipc	a0,0xf
    8001e9ce:	9ce50513          	addi	a0,a0,-1586 # 8002d398 <__func__.0+0x2e0>
bool time_test_10() {
    8001e9d2:	e406                	sd	ra,8(sp)
    8001e9d4:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e9d6:	4800c0ef          	jal	8002ae56 <printf>
    8001e9da:	4529                	li	a0,10
    8001e9dc:	1680b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001e9e0:	4511                	li	a0,4
    8001e9e2:	d26e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e9e6:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e9ea:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e9ee:	4509                	li	a0,2
    8001e9f0:	d18e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e9f4:	c18e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e9f8:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001e9fc:	08200593          	li	a1,130
    8001ea00:	00016617          	auipc	a2,0x16
    8001ea04:	f2060613          	addi	a2,a2,-224 # 80034920 <__func__.0+0x7868>
    8001ea08:	0000f517          	auipc	a0,0xf
    8001ea0c:	9a850513          	addi	a0,a0,-1624 # 8002d3b0 <__func__.0+0x2f8>
    8001ea10:	4460c0ef          	jal	8002ae56 <printf>
    8001ea14:	00035797          	auipc	a5,0x35
    8001ea18:	5fd7c783          	lbu	a5,1533(a5) # 80054011 <excpt+0x1>
    8001ea1c:	0000f597          	auipc	a1,0xf
    8001ea20:	95c58593          	addi	a1,a1,-1700 # 8002d378 <__func__.0+0x2c0>
    8001ea24:	c789                	beqz	a5,8001ea2e <time_test_10+0x6e>
    8001ea26:	0000f597          	auipc	a1,0xf
    8001ea2a:	96258593          	addi	a1,a1,-1694 # 8002d388 <__func__.0+0x2d0>
    8001ea2e:	0000f517          	auipc	a0,0xf
    8001ea32:	99a50513          	addi	a0,a0,-1638 # 8002d3c8 <__func__.0+0x310>
    8001ea36:	4200c0ef          	jal	8002ae56 <printf>
    8001ea3a:	00035797          	auipc	a5,0x35
    8001ea3e:	5d77c783          	lbu	a5,1495(a5) # 80054011 <excpt+0x1>
    8001ea42:	e7a1                	bnez	a5,8001ea8a <time_test_10+0xca>
    8001ea44:	4529                	li	a0,10
    8001ea46:	0fe0b0ef          	jal	80029b44 <putchar>
    8001ea4a:	00035797          	auipc	a5,0x35
    8001ea4e:	5c77c783          	lbu	a5,1479(a5) # 80054011 <excpt+0x1>
    8001ea52:	e795                	bnez	a5,8001ea7e <time_test_10+0xbe>
    8001ea54:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001ea56:	0000f597          	auipc	a1,0xf
    8001ea5a:	92258593          	addi	a1,a1,-1758 # 8002d378 <__func__.0+0x2c0>
    8001ea5e:	0000f517          	auipc	a0,0xf
    8001ea62:	9d250513          	addi	a0,a0,-1582 # 8002d430 <__func__.0+0x378>
    8001ea66:	3f00c0ef          	jal	8002ae56 <printf>
    8001ea6a:	4511                	li	a0,4
    8001ea6c:	c9ce20ef          	jal	80000f08 <goto_priv>
    8001ea70:	db5e20ef          	jal	80001824 <reset_state>
}
    8001ea74:	60a2                	ld	ra,8(sp)
    8001ea76:	8522                	mv	a0,s0
    8001ea78:	6402                	ld	s0,0(sp)
    8001ea7a:	0141                	addi	sp,sp,16
    8001ea7c:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ea7e:	4401                	li	s0,0
    TEST_END(); 
    8001ea80:	0000f597          	auipc	a1,0xf
    8001ea84:	90858593          	addi	a1,a1,-1784 # 8002d388 <__func__.0+0x2d0>
    8001ea88:	bfd9                	j	8001ea5e <time_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ea8a:	0000f517          	auipc	a0,0xf
    8001ea8e:	94650513          	addi	a0,a0,-1722 # 8002d3d0 <__func__.0+0x318>
    8001ea92:	3c40c0ef          	jal	8002ae56 <printf>
    8001ea96:	02900513          	li	a0,41
    8001ea9a:	0aa0b0ef          	jal	80029b44 <putchar>
    8001ea9e:	b75d                	j	8001ea44 <time_test_10+0x84>

000000008001eaa0 <cycle_test_1>:


bool cycle_test_1() {
    8001eaa0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001eaa2:	0000e597          	auipc	a1,0xe
    8001eaa6:	e1e58593          	addi	a1,a1,-482 # 8002c8c0 <__func__.40>
    8001eaaa:	0000f517          	auipc	a0,0xf
    8001eaae:	8ee50513          	addi	a0,a0,-1810 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_1() {
    8001eab2:	ec06                	sd	ra,24(sp)
    8001eab4:	e822                	sd	s0,16(sp)
    8001eab6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001eab8:	39e0c0ef          	jal	8002ae56 <printf>
    8001eabc:	4529                	li	a0,10
    8001eabe:	0860b0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001eac2:	4511                	li	a0,4
    8001eac4:	c44e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001eac8:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001eacc:	4509                	li	a0,2
    8001eace:	c3ae20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ead2:	b3ae20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ead6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eada:	08200593          	li	a1,130
    8001eade:	00016617          	auipc	a2,0x16
    8001eae2:	e9260613          	addi	a2,a2,-366 # 80034970 <__func__.0+0x78b8>
    8001eae6:	0000f517          	auipc	a0,0xf
    8001eaea:	8ca50513          	addi	a0,a0,-1846 # 8002d3b0 <__func__.0+0x2f8>
    8001eaee:	3680c0ef          	jal	8002ae56 <printf>
    8001eaf2:	00035797          	auipc	a5,0x35
    8001eaf6:	51f7c783          	lbu	a5,1311(a5) # 80054011 <excpt+0x1>
    8001eafa:	00035497          	auipc	s1,0x35
    8001eafe:	51648493          	addi	s1,s1,1302 # 80054010 <excpt>
    8001eb02:	0000f597          	auipc	a1,0xf
    8001eb06:	88658593          	addi	a1,a1,-1914 # 8002d388 <__func__.0+0x2d0>
    8001eb0a:	cf89                	beqz	a5,8001eb24 <cycle_test_1+0x84>
    8001eb0c:	6498                	ld	a4,8(s1)
    8001eb0e:	4789                	li	a5,2
    8001eb10:	0000f597          	auipc	a1,0xf
    8001eb14:	86858593          	addi	a1,a1,-1944 # 8002d378 <__func__.0+0x2c0>
    8001eb18:	00f70663          	beq	a4,a5,8001eb24 <cycle_test_1+0x84>
    8001eb1c:	0000f597          	auipc	a1,0xf
    8001eb20:	86c58593          	addi	a1,a1,-1940 # 8002d388 <__func__.0+0x2d0>
    8001eb24:	0000f517          	auipc	a0,0xf
    8001eb28:	8a450513          	addi	a0,a0,-1884 # 8002d3c8 <__func__.0+0x310>
    8001eb2c:	32a0c0ef          	jal	8002ae56 <printf>
    8001eb30:	00035797          	auipc	a5,0x35
    8001eb34:	4e17c783          	lbu	a5,1249(a5) # 80054011 <excpt+0x1>
    8001eb38:	c789                	beqz	a5,8001eb42 <cycle_test_1+0xa2>
    8001eb3a:	6498                	ld	a4,8(s1)
    8001eb3c:	4789                	li	a5,2
    8001eb3e:	00f70c63          	beq	a4,a5,8001eb56 <cycle_test_1+0xb6>
    8001eb42:	0000f517          	auipc	a0,0xf
    8001eb46:	88e50513          	addi	a0,a0,-1906 # 8002d3d0 <__func__.0+0x318>
    8001eb4a:	30c0c0ef          	jal	8002ae56 <printf>
    8001eb4e:	02900513          	li	a0,41
    8001eb52:	7f30a0ef          	jal	80029b44 <putchar>
    8001eb56:	4529                	li	a0,10
    8001eb58:	7ed0a0ef          	jal	80029b44 <putchar>
    8001eb5c:	00035797          	auipc	a5,0x35
    8001eb60:	4b57c783          	lbu	a5,1205(a5) # 80054011 <excpt+0x1>
    8001eb64:	4401                	li	s0,0
    8001eb66:	c789                	beqz	a5,8001eb70 <cycle_test_1+0xd0>
    8001eb68:	6480                	ld	s0,8(s1)
    8001eb6a:	1479                	addi	s0,s0,-2
    8001eb6c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001eb70:	450d                	li	a0,3
    8001eb72:	b96e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb76:	a96e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eb7a:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eb7e:	08200593          	li	a1,130
    8001eb82:	00016617          	auipc	a2,0x16
    8001eb86:	e3e60613          	addi	a2,a2,-450 # 800349c0 <__func__.0+0x7908>
    8001eb8a:	0000f517          	auipc	a0,0xf
    8001eb8e:	82650513          	addi	a0,a0,-2010 # 8002d3b0 <__func__.0+0x2f8>
    8001eb92:	2c40c0ef          	jal	8002ae56 <printf>
    8001eb96:	00035797          	auipc	a5,0x35
    8001eb9a:	47b7c783          	lbu	a5,1147(a5) # 80054011 <excpt+0x1>
    8001eb9e:	0000e597          	auipc	a1,0xe
    8001eba2:	7ea58593          	addi	a1,a1,2026 # 8002d388 <__func__.0+0x2d0>
    8001eba6:	cf89                	beqz	a5,8001ebc0 <cycle_test_1+0x120>
    8001eba8:	6498                	ld	a4,8(s1)
    8001ebaa:	4789                	li	a5,2
    8001ebac:	0000e597          	auipc	a1,0xe
    8001ebb0:	7cc58593          	addi	a1,a1,1996 # 8002d378 <__func__.0+0x2c0>
    8001ebb4:	00f70663          	beq	a4,a5,8001ebc0 <cycle_test_1+0x120>
    8001ebb8:	0000e597          	auipc	a1,0xe
    8001ebbc:	7d058593          	addi	a1,a1,2000 # 8002d388 <__func__.0+0x2d0>
    8001ebc0:	0000f517          	auipc	a0,0xf
    8001ebc4:	80850513          	addi	a0,a0,-2040 # 8002d3c8 <__func__.0+0x310>
    8001ebc8:	28e0c0ef          	jal	8002ae56 <printf>
    8001ebcc:	00035797          	auipc	a5,0x35
    8001ebd0:	4457c783          	lbu	a5,1093(a5) # 80054011 <excpt+0x1>
    8001ebd4:	c789                	beqz	a5,8001ebde <cycle_test_1+0x13e>
    8001ebd6:	6498                	ld	a4,8(s1)
    8001ebd8:	4789                	li	a5,2
    8001ebda:	00f70c63          	beq	a4,a5,8001ebf2 <cycle_test_1+0x152>
    8001ebde:	0000e517          	auipc	a0,0xe
    8001ebe2:	7f250513          	addi	a0,a0,2034 # 8002d3d0 <__func__.0+0x318>
    8001ebe6:	2700c0ef          	jal	8002ae56 <printf>
    8001ebea:	02900513          	li	a0,41
    8001ebee:	7570a0ef          	jal	80029b44 <putchar>
    8001ebf2:	4529                	li	a0,10
    8001ebf4:	7510a0ef          	jal	80029b44 <putchar>
    8001ebf8:	c801                	beqz	s0,8001ec08 <cycle_test_1+0x168>
    8001ebfa:	00035797          	auipc	a5,0x35
    8001ebfe:	4177c783          	lbu	a5,1047(a5) # 80054011 <excpt+0x1>
    8001ec02:	4401                	li	s0,0
    8001ec04:	16079f63          	bnez	a5,8001ed82 <cycle_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001ec08:	4501                	li	a0,0
    8001ec0a:	afee20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec0e:	9fee20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ec12:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec16:	08200593          	li	a1,130
    8001ec1a:	00016617          	auipc	a2,0x16
    8001ec1e:	df660613          	addi	a2,a2,-522 # 80034a10 <__func__.0+0x7958>
    8001ec22:	0000e517          	auipc	a0,0xe
    8001ec26:	78e50513          	addi	a0,a0,1934 # 8002d3b0 <__func__.0+0x2f8>
    8001ec2a:	22c0c0ef          	jal	8002ae56 <printf>
    8001ec2e:	00035797          	auipc	a5,0x35
    8001ec32:	3e37c783          	lbu	a5,995(a5) # 80054011 <excpt+0x1>
    8001ec36:	0000e597          	auipc	a1,0xe
    8001ec3a:	75258593          	addi	a1,a1,1874 # 8002d388 <__func__.0+0x2d0>
    8001ec3e:	cf89                	beqz	a5,8001ec58 <cycle_test_1+0x1b8>
    8001ec40:	6498                	ld	a4,8(s1)
    8001ec42:	4789                	li	a5,2
    8001ec44:	0000e597          	auipc	a1,0xe
    8001ec48:	73458593          	addi	a1,a1,1844 # 8002d378 <__func__.0+0x2c0>
    8001ec4c:	00f70663          	beq	a4,a5,8001ec58 <cycle_test_1+0x1b8>
    8001ec50:	0000e597          	auipc	a1,0xe
    8001ec54:	73858593          	addi	a1,a1,1848 # 8002d388 <__func__.0+0x2d0>
    8001ec58:	0000e517          	auipc	a0,0xe
    8001ec5c:	77050513          	addi	a0,a0,1904 # 8002d3c8 <__func__.0+0x310>
    8001ec60:	1f60c0ef          	jal	8002ae56 <printf>
    8001ec64:	00035797          	auipc	a5,0x35
    8001ec68:	3ad7c783          	lbu	a5,941(a5) # 80054011 <excpt+0x1>
    8001ec6c:	c789                	beqz	a5,8001ec76 <cycle_test_1+0x1d6>
    8001ec6e:	6498                	ld	a4,8(s1)
    8001ec70:	4789                	li	a5,2
    8001ec72:	00f70c63          	beq	a4,a5,8001ec8a <cycle_test_1+0x1ea>
    8001ec76:	0000e517          	auipc	a0,0xe
    8001ec7a:	75a50513          	addi	a0,a0,1882 # 8002d3d0 <__func__.0+0x318>
    8001ec7e:	1d80c0ef          	jal	8002ae56 <printf>
    8001ec82:	02900513          	li	a0,41
    8001ec86:	6bf0a0ef          	jal	80029b44 <putchar>
    8001ec8a:	4529                	li	a0,10
    8001ec8c:	6b90a0ef          	jal	80029b44 <putchar>
    8001ec90:	c801                	beqz	s0,8001eca0 <cycle_test_1+0x200>
    8001ec92:	00035797          	auipc	a5,0x35
    8001ec96:	37f7c783          	lbu	a5,895(a5) # 80054011 <excpt+0x1>
    8001ec9a:	4401                	li	s0,0
    8001ec9c:	0c079e63          	bnez	a5,8001ed78 <cycle_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001eca0:	4505                	li	a0,1
    8001eca2:	a66e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eca6:	966e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ecaa:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ecae:	08200593          	li	a1,130
    8001ecb2:	00016617          	auipc	a2,0x16
    8001ecb6:	dae60613          	addi	a2,a2,-594 # 80034a60 <__func__.0+0x79a8>
    8001ecba:	0000e517          	auipc	a0,0xe
    8001ecbe:	6f650513          	addi	a0,a0,1782 # 8002d3b0 <__func__.0+0x2f8>
    8001ecc2:	1940c0ef          	jal	8002ae56 <printf>
    8001ecc6:	00035797          	auipc	a5,0x35
    8001ecca:	34b7c783          	lbu	a5,843(a5) # 80054011 <excpt+0x1>
    8001ecce:	0000e597          	auipc	a1,0xe
    8001ecd2:	6ba58593          	addi	a1,a1,1722 # 8002d388 <__func__.0+0x2d0>
    8001ecd6:	cf89                	beqz	a5,8001ecf0 <cycle_test_1+0x250>
    8001ecd8:	6498                	ld	a4,8(s1)
    8001ecda:	4789                	li	a5,2
    8001ecdc:	0000e597          	auipc	a1,0xe
    8001ece0:	69c58593          	addi	a1,a1,1692 # 8002d378 <__func__.0+0x2c0>
    8001ece4:	00f70663          	beq	a4,a5,8001ecf0 <cycle_test_1+0x250>
    8001ece8:	0000e597          	auipc	a1,0xe
    8001ecec:	6a058593          	addi	a1,a1,1696 # 8002d388 <__func__.0+0x2d0>
    8001ecf0:	0000e517          	auipc	a0,0xe
    8001ecf4:	6d850513          	addi	a0,a0,1752 # 8002d3c8 <__func__.0+0x310>
    8001ecf8:	15e0c0ef          	jal	8002ae56 <printf>
    8001ecfc:	00035797          	auipc	a5,0x35
    8001ed00:	3157c783          	lbu	a5,789(a5) # 80054011 <excpt+0x1>
    8001ed04:	c789                	beqz	a5,8001ed0e <cycle_test_1+0x26e>
    8001ed06:	6498                	ld	a4,8(s1)
    8001ed08:	4789                	li	a5,2
    8001ed0a:	00f70c63          	beq	a4,a5,8001ed22 <cycle_test_1+0x282>
    8001ed0e:	0000e517          	auipc	a0,0xe
    8001ed12:	6c250513          	addi	a0,a0,1730 # 8002d3d0 <__func__.0+0x318>
    8001ed16:	1400c0ef          	jal	8002ae56 <printf>
    8001ed1a:	02900513          	li	a0,41
    8001ed1e:	6270a0ef          	jal	80029b44 <putchar>
    8001ed22:	4529                	li	a0,10
    8001ed24:	6210a0ef          	jal	80029b44 <putchar>
    8001ed28:	c015                	beqz	s0,8001ed4c <cycle_test_1+0x2ac>
    8001ed2a:	00035417          	auipc	s0,0x35
    8001ed2e:	2e744403          	lbu	s0,743(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ed32:	0000e597          	auipc	a1,0xe
    8001ed36:	65658593          	addi	a1,a1,1622 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed3a:	cc11                	beqz	s0,8001ed56 <cycle_test_1+0x2b6>
    8001ed3c:	6498                	ld	a4,8(s1)
    8001ed3e:	4789                	li	a5,2
    TEST_END(); 
    8001ed40:	0000e597          	auipc	a1,0xe
    8001ed44:	63858593          	addi	a1,a1,1592 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed48:	00f70763          	beq	a4,a5,8001ed56 <cycle_test_1+0x2b6>
    8001ed4c:	4401                	li	s0,0
    TEST_END(); 
    8001ed4e:	0000e597          	auipc	a1,0xe
    8001ed52:	63a58593          	addi	a1,a1,1594 # 8002d388 <__func__.0+0x2d0>
    8001ed56:	0000e517          	auipc	a0,0xe
    8001ed5a:	6da50513          	addi	a0,a0,1754 # 8002d430 <__func__.0+0x378>
    8001ed5e:	0f80c0ef          	jal	8002ae56 <printf>
    8001ed62:	4511                	li	a0,4
    8001ed64:	9a4e20ef          	jal	80000f08 <goto_priv>
    8001ed68:	abde20ef          	jal	80001824 <reset_state>
}
    8001ed6c:	60e2                	ld	ra,24(sp)
    8001ed6e:	8522                	mv	a0,s0
    8001ed70:	6442                	ld	s0,16(sp)
    8001ed72:	64a2                	ld	s1,8(sp)
    8001ed74:	6105                	addi	sp,sp,32
    8001ed76:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed78:	6480                	ld	s0,8(s1)
    8001ed7a:	1479                	addi	s0,s0,-2
    8001ed7c:	00143413          	seqz	s0,s0
    8001ed80:	b705                	j	8001eca0 <cycle_test_1+0x200>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed82:	6480                	ld	s0,8(s1)
    8001ed84:	1479                	addi	s0,s0,-2
    8001ed86:	00143413          	seqz	s0,s0
    8001ed8a:	bdbd                	j	8001ec08 <cycle_test_1+0x168>

000000008001ed8c <cycle_test_2>:

bool cycle_test_2() {
    8001ed8c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ed8e:	0000e597          	auipc	a1,0xe
    8001ed92:	b4258593          	addi	a1,a1,-1214 # 8002c8d0 <__func__.39>
    8001ed96:	0000e517          	auipc	a0,0xe
    8001ed9a:	60250513          	addi	a0,a0,1538 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_2() {
    8001ed9e:	e406                	sd	ra,8(sp)
    8001eda0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eda2:	0b40c0ef          	jal	8002ae56 <printf>
    8001eda6:	4529                	li	a0,10
    8001eda8:	59d0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001edac:	4511                	li	a0,4
    8001edae:	95ae20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001edb2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001edb6:	450d                	li	a0,3
    8001edb8:	950e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001edbc:	850e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001edc0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001edc4:	08200593          	li	a1,130
    8001edc8:	00016617          	auipc	a2,0x16
    8001edcc:	ce860613          	addi	a2,a2,-792 # 80034ab0 <__func__.0+0x79f8>
    8001edd0:	0000e517          	auipc	a0,0xe
    8001edd4:	5e050513          	addi	a0,a0,1504 # 8002d3b0 <__func__.0+0x2f8>
    8001edd8:	07e0c0ef          	jal	8002ae56 <printf>
    8001eddc:	00035797          	auipc	a5,0x35
    8001ede0:	2357c783          	lbu	a5,565(a5) # 80054011 <excpt+0x1>
    8001ede4:	0000e597          	auipc	a1,0xe
    8001ede8:	59458593          	addi	a1,a1,1428 # 8002d378 <__func__.0+0x2c0>
    8001edec:	c789                	beqz	a5,8001edf6 <cycle_test_2+0x6a>
    8001edee:	0000e597          	auipc	a1,0xe
    8001edf2:	59a58593          	addi	a1,a1,1434 # 8002d388 <__func__.0+0x2d0>
    8001edf6:	0000e517          	auipc	a0,0xe
    8001edfa:	5d250513          	addi	a0,a0,1490 # 8002d3c8 <__func__.0+0x310>
    8001edfe:	0580c0ef          	jal	8002ae56 <printf>
    8001ee02:	00035797          	auipc	a5,0x35
    8001ee06:	20f7c783          	lbu	a5,527(a5) # 80054011 <excpt+0x1>
    8001ee0a:	e7a1                	bnez	a5,8001ee52 <cycle_test_2+0xc6>
    8001ee0c:	4529                	li	a0,10
    8001ee0e:	5370a0ef          	jal	80029b44 <putchar>
    8001ee12:	00035797          	auipc	a5,0x35
    8001ee16:	1ff7c783          	lbu	a5,511(a5) # 80054011 <excpt+0x1>
    8001ee1a:	e795                	bnez	a5,8001ee46 <cycle_test_2+0xba>
    8001ee1c:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001ee1e:	0000e597          	auipc	a1,0xe
    8001ee22:	55a58593          	addi	a1,a1,1370 # 8002d378 <__func__.0+0x2c0>
    8001ee26:	0000e517          	auipc	a0,0xe
    8001ee2a:	60a50513          	addi	a0,a0,1546 # 8002d430 <__func__.0+0x378>
    8001ee2e:	0280c0ef          	jal	8002ae56 <printf>
    8001ee32:	4511                	li	a0,4
    8001ee34:	8d4e20ef          	jal	80000f08 <goto_priv>
    8001ee38:	9ede20ef          	jal	80001824 <reset_state>
}
    8001ee3c:	60a2                	ld	ra,8(sp)
    8001ee3e:	8522                	mv	a0,s0
    8001ee40:	6402                	ld	s0,0(sp)
    8001ee42:	0141                	addi	sp,sp,16
    8001ee44:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ee46:	4401                	li	s0,0
    TEST_END(); 
    8001ee48:	0000e597          	auipc	a1,0xe
    8001ee4c:	54058593          	addi	a1,a1,1344 # 8002d388 <__func__.0+0x2d0>
    8001ee50:	bfd9                	j	8001ee26 <cycle_test_2+0x9a>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ee52:	0000e517          	auipc	a0,0xe
    8001ee56:	57e50513          	addi	a0,a0,1406 # 8002d3d0 <__func__.0+0x318>
    8001ee5a:	7fd0b0ef          	jal	8002ae56 <printf>
    8001ee5e:	02900513          	li	a0,41
    8001ee62:	4e30a0ef          	jal	80029b44 <putchar>
    8001ee66:	b75d                	j	8001ee0c <cycle_test_2+0x80>

000000008001ee68 <cycle_test_3>:

bool cycle_test_3() {
    8001ee68:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ee6a:	0000e597          	auipc	a1,0xe
    8001ee6e:	a7658593          	addi	a1,a1,-1418 # 8002c8e0 <__func__.38>
    8001ee72:	0000e517          	auipc	a0,0xe
    8001ee76:	52650513          	addi	a0,a0,1318 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_3() {
    8001ee7a:	ec06                	sd	ra,24(sp)
    8001ee7c:	e822                	sd	s0,16(sp)
    8001ee7e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ee80:	7d70b0ef          	jal	8002ae56 <printf>
    8001ee84:	4529                	li	a0,10
    8001ee86:	4bf0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001ee8a:	4511                	li	a0,4
    8001ee8c:	87ce20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001ee90:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001ee94:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001ee98:	4505                	li	a0,1
    8001ee9a:	86ee20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ee9e:	f6fe10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eea2:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001eea6:	08200593          	li	a1,130
    8001eeaa:	00016617          	auipc	a2,0x16
    8001eeae:	c3e60613          	addi	a2,a2,-962 # 80034ae8 <__func__.0+0x7a30>
    8001eeb2:	0000e517          	auipc	a0,0xe
    8001eeb6:	4fe50513          	addi	a0,a0,1278 # 8002d3b0 <__func__.0+0x2f8>
    8001eeba:	79d0b0ef          	jal	8002ae56 <printf>
    8001eebe:	00035797          	auipc	a5,0x35
    8001eec2:	1537c783          	lbu	a5,339(a5) # 80054011 <excpt+0x1>
    8001eec6:	00035497          	auipc	s1,0x35
    8001eeca:	14a48493          	addi	s1,s1,330 # 80054010 <excpt>
    8001eece:	0000e597          	auipc	a1,0xe
    8001eed2:	4ba58593          	addi	a1,a1,1210 # 8002d388 <__func__.0+0x2d0>
    8001eed6:	cf89                	beqz	a5,8001eef0 <cycle_test_3+0x88>
    8001eed8:	6498                	ld	a4,8(s1)
    8001eeda:	4789                	li	a5,2
    8001eedc:	0000e597          	auipc	a1,0xe
    8001eee0:	49c58593          	addi	a1,a1,1180 # 8002d378 <__func__.0+0x2c0>
    8001eee4:	00f70663          	beq	a4,a5,8001eef0 <cycle_test_3+0x88>
    8001eee8:	0000e597          	auipc	a1,0xe
    8001eeec:	4a058593          	addi	a1,a1,1184 # 8002d388 <__func__.0+0x2d0>
    8001eef0:	0000e517          	auipc	a0,0xe
    8001eef4:	4d850513          	addi	a0,a0,1240 # 8002d3c8 <__func__.0+0x310>
    8001eef8:	75f0b0ef          	jal	8002ae56 <printf>
    8001eefc:	00035797          	auipc	a5,0x35
    8001ef00:	1157c783          	lbu	a5,277(a5) # 80054011 <excpt+0x1>
    8001ef04:	c789                	beqz	a5,8001ef0e <cycle_test_3+0xa6>
    8001ef06:	6498                	ld	a4,8(s1)
    8001ef08:	4789                	li	a5,2
    8001ef0a:	00f70c63          	beq	a4,a5,8001ef22 <cycle_test_3+0xba>
    8001ef0e:	0000e517          	auipc	a0,0xe
    8001ef12:	4c250513          	addi	a0,a0,1218 # 8002d3d0 <__func__.0+0x318>
    8001ef16:	7410b0ef          	jal	8002ae56 <printf>
    8001ef1a:	02900513          	li	a0,41
    8001ef1e:	4270a0ef          	jal	80029b44 <putchar>
    8001ef22:	4529                	li	a0,10
    8001ef24:	4210a0ef          	jal	80029b44 <putchar>
    8001ef28:	00035417          	auipc	s0,0x35
    8001ef2c:	0e944403          	lbu	s0,233(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ef30:	0000e597          	auipc	a1,0xe
    8001ef34:	45858593          	addi	a1,a1,1112 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ef38:	cc11                	beqz	s0,8001ef54 <cycle_test_3+0xec>
    8001ef3a:	6498                	ld	a4,8(s1)
    8001ef3c:	4789                	li	a5,2
    TEST_END(); 
    8001ef3e:	0000e597          	auipc	a1,0xe
    8001ef42:	43a58593          	addi	a1,a1,1082 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ef46:	00f70763          	beq	a4,a5,8001ef54 <cycle_test_3+0xec>
    8001ef4a:	4401                	li	s0,0
    TEST_END(); 
    8001ef4c:	0000e597          	auipc	a1,0xe
    8001ef50:	43c58593          	addi	a1,a1,1084 # 8002d388 <__func__.0+0x2d0>
    8001ef54:	0000e517          	auipc	a0,0xe
    8001ef58:	4dc50513          	addi	a0,a0,1244 # 8002d430 <__func__.0+0x378>
    8001ef5c:	6fb0b0ef          	jal	8002ae56 <printf>
    8001ef60:	4511                	li	a0,4
    8001ef62:	fa7e10ef          	jal	80000f08 <goto_priv>
    8001ef66:	8bfe20ef          	jal	80001824 <reset_state>
}
    8001ef6a:	60e2                	ld	ra,24(sp)
    8001ef6c:	8522                	mv	a0,s0
    8001ef6e:	6442                	ld	s0,16(sp)
    8001ef70:	64a2                	ld	s1,8(sp)
    8001ef72:	6105                	addi	sp,sp,32
    8001ef74:	8082                	ret

000000008001ef76 <cycle_test_4>:

bool cycle_test_4() {
    8001ef76:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ef78:	0000e597          	auipc	a1,0xe
    8001ef7c:	97858593          	addi	a1,a1,-1672 # 8002c8f0 <__func__.37>
    8001ef80:	0000e517          	auipc	a0,0xe
    8001ef84:	41850513          	addi	a0,a0,1048 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_4() {
    8001ef88:	e406                	sd	ra,8(sp)
    8001ef8a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ef8c:	6cb0b0ef          	jal	8002ae56 <printf>
    8001ef90:	4529                	li	a0,10
    8001ef92:	3b30a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001ef96:	4511                	li	a0,4
    8001ef98:	f71e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001ef9c:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001efa0:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001efa4:	4505                	li	a0,1
    8001efa6:	f63e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001efaa:	e63e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001efae:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001efb2:	08200593          	li	a1,130
    8001efb6:	00016617          	auipc	a2,0x16
    8001efba:	b8260613          	addi	a2,a2,-1150 # 80034b38 <__func__.0+0x7a80>
    8001efbe:	0000e517          	auipc	a0,0xe
    8001efc2:	3f250513          	addi	a0,a0,1010 # 8002d3b0 <__func__.0+0x2f8>
    8001efc6:	6910b0ef          	jal	8002ae56 <printf>
    8001efca:	00035797          	auipc	a5,0x35
    8001efce:	0477c783          	lbu	a5,71(a5) # 80054011 <excpt+0x1>
    8001efd2:	0000e597          	auipc	a1,0xe
    8001efd6:	3a658593          	addi	a1,a1,934 # 8002d378 <__func__.0+0x2c0>
    8001efda:	c789                	beqz	a5,8001efe4 <cycle_test_4+0x6e>
    8001efdc:	0000e597          	auipc	a1,0xe
    8001efe0:	3ac58593          	addi	a1,a1,940 # 8002d388 <__func__.0+0x2d0>
    8001efe4:	0000e517          	auipc	a0,0xe
    8001efe8:	3e450513          	addi	a0,a0,996 # 8002d3c8 <__func__.0+0x310>
    8001efec:	66b0b0ef          	jal	8002ae56 <printf>
    8001eff0:	00035797          	auipc	a5,0x35
    8001eff4:	0217c783          	lbu	a5,33(a5) # 80054011 <excpt+0x1>
    8001eff8:	e7a1                	bnez	a5,8001f040 <cycle_test_4+0xca>
    8001effa:	4529                	li	a0,10
    8001effc:	3490a0ef          	jal	80029b44 <putchar>
    8001f000:	00035797          	auipc	a5,0x35
    8001f004:	0117c783          	lbu	a5,17(a5) # 80054011 <excpt+0x1>
    8001f008:	e795                	bnez	a5,8001f034 <cycle_test_4+0xbe>
    8001f00a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f00c:	0000e597          	auipc	a1,0xe
    8001f010:	36c58593          	addi	a1,a1,876 # 8002d378 <__func__.0+0x2c0>
    8001f014:	0000e517          	auipc	a0,0xe
    8001f018:	41c50513          	addi	a0,a0,1052 # 8002d430 <__func__.0+0x378>
    8001f01c:	63b0b0ef          	jal	8002ae56 <printf>
    8001f020:	4511                	li	a0,4
    8001f022:	ee7e10ef          	jal	80000f08 <goto_priv>
    8001f026:	ffee20ef          	jal	80001824 <reset_state>
}
    8001f02a:	60a2                	ld	ra,8(sp)
    8001f02c:	8522                	mv	a0,s0
    8001f02e:	6402                	ld	s0,0(sp)
    8001f030:	0141                	addi	sp,sp,16
    8001f032:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f034:	4401                	li	s0,0
    TEST_END(); 
    8001f036:	0000e597          	auipc	a1,0xe
    8001f03a:	35258593          	addi	a1,a1,850 # 8002d388 <__func__.0+0x2d0>
    8001f03e:	bfd9                	j	8001f014 <cycle_test_4+0x9e>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f040:	0000e517          	auipc	a0,0xe
    8001f044:	39050513          	addi	a0,a0,912 # 8002d3d0 <__func__.0+0x318>
    8001f048:	60f0b0ef          	jal	8002ae56 <printf>
    8001f04c:	02900513          	li	a0,41
    8001f050:	2f50a0ef          	jal	80029b44 <putchar>
    8001f054:	b75d                	j	8001effa <cycle_test_4+0x84>

000000008001f056 <cycle_test_5>:

bool cycle_test_5() {
    8001f056:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f058:	0000e597          	auipc	a1,0xe
    8001f05c:	8a858593          	addi	a1,a1,-1880 # 8002c900 <__func__.36>
    8001f060:	0000e517          	auipc	a0,0xe
    8001f064:	33850513          	addi	a0,a0,824 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_5() {
    8001f068:	ec06                	sd	ra,24(sp)
    8001f06a:	e822                	sd	s0,16(sp)
    8001f06c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f06e:	5e90b0ef          	jal	8002ae56 <printf>
    8001f072:	4529                	li	a0,10
    8001f074:	2d10a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f078:	4511                	li	a0,4
    8001f07a:	e8fe10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f07e:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f082:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f086:	4509                	li	a0,2
    8001f088:	e81e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f08c:	d81e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f090:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f094:	08200593          	li	a1,130
    8001f098:	00016617          	auipc	a2,0x16
    8001f09c:	ae860613          	addi	a2,a2,-1304 # 80034b80 <__func__.0+0x7ac8>
    8001f0a0:	0000e517          	auipc	a0,0xe
    8001f0a4:	31050513          	addi	a0,a0,784 # 8002d3b0 <__func__.0+0x2f8>
    8001f0a8:	5af0b0ef          	jal	8002ae56 <printf>
    8001f0ac:	00035797          	auipc	a5,0x35
    8001f0b0:	f657c783          	lbu	a5,-155(a5) # 80054011 <excpt+0x1>
    8001f0b4:	00035497          	auipc	s1,0x35
    8001f0b8:	f5c48493          	addi	s1,s1,-164 # 80054010 <excpt>
    8001f0bc:	0000e597          	auipc	a1,0xe
    8001f0c0:	2cc58593          	addi	a1,a1,716 # 8002d388 <__func__.0+0x2d0>
    8001f0c4:	cf89                	beqz	a5,8001f0de <cycle_test_5+0x88>
    8001f0c6:	6498                	ld	a4,8(s1)
    8001f0c8:	47d9                	li	a5,22
    8001f0ca:	0000e597          	auipc	a1,0xe
    8001f0ce:	2ae58593          	addi	a1,a1,686 # 8002d378 <__func__.0+0x2c0>
    8001f0d2:	00f70663          	beq	a4,a5,8001f0de <cycle_test_5+0x88>
    8001f0d6:	0000e597          	auipc	a1,0xe
    8001f0da:	2b258593          	addi	a1,a1,690 # 8002d388 <__func__.0+0x2d0>
    8001f0de:	0000e517          	auipc	a0,0xe
    8001f0e2:	2ea50513          	addi	a0,a0,746 # 8002d3c8 <__func__.0+0x310>
    8001f0e6:	5710b0ef          	jal	8002ae56 <printf>
    8001f0ea:	00035797          	auipc	a5,0x35
    8001f0ee:	f277c783          	lbu	a5,-217(a5) # 80054011 <excpt+0x1>
    8001f0f2:	c789                	beqz	a5,8001f0fc <cycle_test_5+0xa6>
    8001f0f4:	6498                	ld	a4,8(s1)
    8001f0f6:	47d9                	li	a5,22
    8001f0f8:	00f70c63          	beq	a4,a5,8001f110 <cycle_test_5+0xba>
    8001f0fc:	0000e517          	auipc	a0,0xe
    8001f100:	2d450513          	addi	a0,a0,724 # 8002d3d0 <__func__.0+0x318>
    8001f104:	5530b0ef          	jal	8002ae56 <printf>
    8001f108:	02900513          	li	a0,41
    8001f10c:	2390a0ef          	jal	80029b44 <putchar>
    8001f110:	4529                	li	a0,10
    8001f112:	2330a0ef          	jal	80029b44 <putchar>
    8001f116:	00035417          	auipc	s0,0x35
    8001f11a:	efb44403          	lbu	s0,-261(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f11e:	0000e597          	auipc	a1,0xe
    8001f122:	26a58593          	addi	a1,a1,618 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f126:	cc11                	beqz	s0,8001f142 <cycle_test_5+0xec>
    8001f128:	6498                	ld	a4,8(s1)
    8001f12a:	47d9                	li	a5,22
    TEST_END(); 
    8001f12c:	0000e597          	auipc	a1,0xe
    8001f130:	24c58593          	addi	a1,a1,588 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f134:	00f70763          	beq	a4,a5,8001f142 <cycle_test_5+0xec>
    8001f138:	4401                	li	s0,0
    TEST_END(); 
    8001f13a:	0000e597          	auipc	a1,0xe
    8001f13e:	24e58593          	addi	a1,a1,590 # 8002d388 <__func__.0+0x2d0>
    8001f142:	0000e517          	auipc	a0,0xe
    8001f146:	2ee50513          	addi	a0,a0,750 # 8002d430 <__func__.0+0x378>
    8001f14a:	50d0b0ef          	jal	8002ae56 <printf>
    8001f14e:	4511                	li	a0,4
    8001f150:	db9e10ef          	jal	80000f08 <goto_priv>
    8001f154:	ed0e20ef          	jal	80001824 <reset_state>
}
    8001f158:	60e2                	ld	ra,24(sp)
    8001f15a:	8522                	mv	a0,s0
    8001f15c:	6442                	ld	s0,16(sp)
    8001f15e:	64a2                	ld	s1,8(sp)
    8001f160:	6105                	addi	sp,sp,32
    8001f162:	8082                	ret

000000008001f164 <cycle_test_6>:

bool cycle_test_6() {
    8001f164:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f166:	0000d597          	auipc	a1,0xd
    8001f16a:	7aa58593          	addi	a1,a1,1962 # 8002c910 <__func__.35>
    8001f16e:	0000e517          	auipc	a0,0xe
    8001f172:	22a50513          	addi	a0,a0,554 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_6() {
    8001f176:	e406                	sd	ra,8(sp)
    8001f178:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f17a:	4dd0b0ef          	jal	8002ae56 <printf>
    8001f17e:	4529                	li	a0,10
    8001f180:	1c50a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f184:	4511                	li	a0,4
    8001f186:	d83e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f18a:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f18e:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f192:	4509                	li	a0,2
    8001f194:	d75e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f198:	c75e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f19c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f1a0:	08200593          	li	a1,130
    8001f1a4:	00016617          	auipc	a2,0x16
    8001f1a8:	a3c60613          	addi	a2,a2,-1476 # 80034be0 <__func__.0+0x7b28>
    8001f1ac:	0000e517          	auipc	a0,0xe
    8001f1b0:	20450513          	addi	a0,a0,516 # 8002d3b0 <__func__.0+0x2f8>
    8001f1b4:	4a30b0ef          	jal	8002ae56 <printf>
    8001f1b8:	00035797          	auipc	a5,0x35
    8001f1bc:	e597c783          	lbu	a5,-423(a5) # 80054011 <excpt+0x1>
    8001f1c0:	0000e597          	auipc	a1,0xe
    8001f1c4:	1b858593          	addi	a1,a1,440 # 8002d378 <__func__.0+0x2c0>
    8001f1c8:	c789                	beqz	a5,8001f1d2 <cycle_test_6+0x6e>
    8001f1ca:	0000e597          	auipc	a1,0xe
    8001f1ce:	1be58593          	addi	a1,a1,446 # 8002d388 <__func__.0+0x2d0>
    8001f1d2:	0000e517          	auipc	a0,0xe
    8001f1d6:	1f650513          	addi	a0,a0,502 # 8002d3c8 <__func__.0+0x310>
    8001f1da:	47d0b0ef          	jal	8002ae56 <printf>
    8001f1de:	00035797          	auipc	a5,0x35
    8001f1e2:	e337c783          	lbu	a5,-461(a5) # 80054011 <excpt+0x1>
    8001f1e6:	e7a1                	bnez	a5,8001f22e <cycle_test_6+0xca>
    8001f1e8:	4529                	li	a0,10
    8001f1ea:	15b0a0ef          	jal	80029b44 <putchar>
    8001f1ee:	00035797          	auipc	a5,0x35
    8001f1f2:	e237c783          	lbu	a5,-477(a5) # 80054011 <excpt+0x1>
    8001f1f6:	e795                	bnez	a5,8001f222 <cycle_test_6+0xbe>
    8001f1f8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f1fa:	0000e597          	auipc	a1,0xe
    8001f1fe:	17e58593          	addi	a1,a1,382 # 8002d378 <__func__.0+0x2c0>
    8001f202:	0000e517          	auipc	a0,0xe
    8001f206:	22e50513          	addi	a0,a0,558 # 8002d430 <__func__.0+0x378>
    8001f20a:	44d0b0ef          	jal	8002ae56 <printf>
    8001f20e:	4511                	li	a0,4
    8001f210:	cf9e10ef          	jal	80000f08 <goto_priv>
    8001f214:	e10e20ef          	jal	80001824 <reset_state>
}
    8001f218:	60a2                	ld	ra,8(sp)
    8001f21a:	8522                	mv	a0,s0
    8001f21c:	6402                	ld	s0,0(sp)
    8001f21e:	0141                	addi	sp,sp,16
    8001f220:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f222:	4401                	li	s0,0
    TEST_END(); 
    8001f224:	0000e597          	auipc	a1,0xe
    8001f228:	16458593          	addi	a1,a1,356 # 8002d388 <__func__.0+0x2d0>
    8001f22c:	bfd9                	j	8001f202 <cycle_test_6+0x9e>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f22e:	0000e517          	auipc	a0,0xe
    8001f232:	1a250513          	addi	a0,a0,418 # 8002d3d0 <__func__.0+0x318>
    8001f236:	4210b0ef          	jal	8002ae56 <printf>
    8001f23a:	02900513          	li	a0,41
    8001f23e:	1070a0ef          	jal	80029b44 <putchar>
    8001f242:	b75d                	j	8001f1e8 <cycle_test_6+0x84>

000000008001f244 <cycle_test_7>:

bool cycle_test_7() {
    8001f244:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f246:	0000d597          	auipc	a1,0xd
    8001f24a:	6da58593          	addi	a1,a1,1754 # 8002c920 <__func__.34>
    8001f24e:	0000e517          	auipc	a0,0xe
    8001f252:	14a50513          	addi	a0,a0,330 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_7() {
    8001f256:	e406                	sd	ra,8(sp)
    8001f258:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f25a:	3fd0b0ef          	jal	8002ae56 <printf>
    8001f25e:	4529                	li	a0,10
    8001f260:	0e50a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f264:	4511                	li	a0,4
    8001f266:	ca3e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f26a:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f26e:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f272:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f276:	4501                	li	a0,0
    8001f278:	c91e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f27c:	b91e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f280:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f284:	08200593          	li	a1,130
    8001f288:	00016617          	auipc	a2,0x16
    8001f28c:	9a060613          	addi	a2,a2,-1632 # 80034c28 <__func__.0+0x7b70>
    8001f290:	0000e517          	auipc	a0,0xe
    8001f294:	12050513          	addi	a0,a0,288 # 8002d3b0 <__func__.0+0x2f8>
    8001f298:	3bf0b0ef          	jal	8002ae56 <printf>
    8001f29c:	00035797          	auipc	a5,0x35
    8001f2a0:	d757c783          	lbu	a5,-651(a5) # 80054011 <excpt+0x1>
    8001f2a4:	0000e597          	auipc	a1,0xe
    8001f2a8:	0d458593          	addi	a1,a1,212 # 8002d378 <__func__.0+0x2c0>
    8001f2ac:	c789                	beqz	a5,8001f2b6 <cycle_test_7+0x72>
    8001f2ae:	0000e597          	auipc	a1,0xe
    8001f2b2:	0da58593          	addi	a1,a1,218 # 8002d388 <__func__.0+0x2d0>
    8001f2b6:	0000e517          	auipc	a0,0xe
    8001f2ba:	11250513          	addi	a0,a0,274 # 8002d3c8 <__func__.0+0x310>
    8001f2be:	3990b0ef          	jal	8002ae56 <printf>
    8001f2c2:	00035797          	auipc	a5,0x35
    8001f2c6:	d4f7c783          	lbu	a5,-689(a5) # 80054011 <excpt+0x1>
    8001f2ca:	e7a1                	bnez	a5,8001f312 <cycle_test_7+0xce>
    8001f2cc:	4529                	li	a0,10
    8001f2ce:	0770a0ef          	jal	80029b44 <putchar>
    8001f2d2:	00035797          	auipc	a5,0x35
    8001f2d6:	d3f7c783          	lbu	a5,-705(a5) # 80054011 <excpt+0x1>
    8001f2da:	e795                	bnez	a5,8001f306 <cycle_test_7+0xc2>
    8001f2dc:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f2de:	0000e597          	auipc	a1,0xe
    8001f2e2:	09a58593          	addi	a1,a1,154 # 8002d378 <__func__.0+0x2c0>
    8001f2e6:	0000e517          	auipc	a0,0xe
    8001f2ea:	14a50513          	addi	a0,a0,330 # 8002d430 <__func__.0+0x378>
    8001f2ee:	3690b0ef          	jal	8002ae56 <printf>
    8001f2f2:	4511                	li	a0,4
    8001f2f4:	c15e10ef          	jal	80000f08 <goto_priv>
    8001f2f8:	d2ce20ef          	jal	80001824 <reset_state>
}
    8001f2fc:	60a2                	ld	ra,8(sp)
    8001f2fe:	8522                	mv	a0,s0
    8001f300:	6402                	ld	s0,0(sp)
    8001f302:	0141                	addi	sp,sp,16
    8001f304:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f306:	4401                	li	s0,0
    TEST_END(); 
    8001f308:	0000e597          	auipc	a1,0xe
    8001f30c:	08058593          	addi	a1,a1,128 # 8002d388 <__func__.0+0x2d0>
    8001f310:	bfd9                	j	8001f2e6 <cycle_test_7+0xa2>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f312:	0000e517          	auipc	a0,0xe
    8001f316:	0be50513          	addi	a0,a0,190 # 8002d3d0 <__func__.0+0x318>
    8001f31a:	33d0b0ef          	jal	8002ae56 <printf>
    8001f31e:	02900513          	li	a0,41
    8001f322:	0230a0ef          	jal	80029b44 <putchar>
    8001f326:	b75d                	j	8001f2cc <cycle_test_7+0x88>

000000008001f328 <cycle_test_8>:

bool cycle_test_8() {
    8001f328:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f32a:	0000d597          	auipc	a1,0xd
    8001f32e:	60658593          	addi	a1,a1,1542 # 8002c930 <__func__.33>
    8001f332:	0000e517          	auipc	a0,0xe
    8001f336:	06650513          	addi	a0,a0,102 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_8() {
    8001f33a:	ec06                	sd	ra,24(sp)
    8001f33c:	e822                	sd	s0,16(sp)
    8001f33e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f340:	3170b0ef          	jal	8002ae56 <printf>
    8001f344:	4529                	li	a0,10
    8001f346:	7fe0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f34a:	4511                	li	a0,4
    8001f34c:	bbde10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f350:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f354:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f358:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f35c:	4501                	li	a0,0
    8001f35e:	babe10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f362:	aabe10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f366:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f36a:	08200593          	li	a1,130
    8001f36e:	00016617          	auipc	a2,0x16
    8001f372:	91260613          	addi	a2,a2,-1774 # 80034c80 <__func__.0+0x7bc8>
    8001f376:	0000e517          	auipc	a0,0xe
    8001f37a:	03a50513          	addi	a0,a0,58 # 8002d3b0 <__func__.0+0x2f8>
    8001f37e:	2d90b0ef          	jal	8002ae56 <printf>
    8001f382:	00035797          	auipc	a5,0x35
    8001f386:	c8f7c783          	lbu	a5,-881(a5) # 80054011 <excpt+0x1>
    8001f38a:	00035497          	auipc	s1,0x35
    8001f38e:	c8648493          	addi	s1,s1,-890 # 80054010 <excpt>
    8001f392:	0000e597          	auipc	a1,0xe
    8001f396:	ff658593          	addi	a1,a1,-10 # 8002d388 <__func__.0+0x2d0>
    8001f39a:	cf89                	beqz	a5,8001f3b4 <cycle_test_8+0x8c>
    8001f39c:	6498                	ld	a4,8(s1)
    8001f39e:	47d9                	li	a5,22
    8001f3a0:	0000e597          	auipc	a1,0xe
    8001f3a4:	fd858593          	addi	a1,a1,-40 # 8002d378 <__func__.0+0x2c0>
    8001f3a8:	00f70663          	beq	a4,a5,8001f3b4 <cycle_test_8+0x8c>
    8001f3ac:	0000e597          	auipc	a1,0xe
    8001f3b0:	fdc58593          	addi	a1,a1,-36 # 8002d388 <__func__.0+0x2d0>
    8001f3b4:	0000e517          	auipc	a0,0xe
    8001f3b8:	01450513          	addi	a0,a0,20 # 8002d3c8 <__func__.0+0x310>
    8001f3bc:	29b0b0ef          	jal	8002ae56 <printf>
    8001f3c0:	00035797          	auipc	a5,0x35
    8001f3c4:	c517c783          	lbu	a5,-943(a5) # 80054011 <excpt+0x1>
    8001f3c8:	c789                	beqz	a5,8001f3d2 <cycle_test_8+0xaa>
    8001f3ca:	6498                	ld	a4,8(s1)
    8001f3cc:	47d9                	li	a5,22
    8001f3ce:	00f70c63          	beq	a4,a5,8001f3e6 <cycle_test_8+0xbe>
    8001f3d2:	0000e517          	auipc	a0,0xe
    8001f3d6:	ffe50513          	addi	a0,a0,-2 # 8002d3d0 <__func__.0+0x318>
    8001f3da:	27d0b0ef          	jal	8002ae56 <printf>
    8001f3de:	02900513          	li	a0,41
    8001f3e2:	7620a0ef          	jal	80029b44 <putchar>
    8001f3e6:	4529                	li	a0,10
    8001f3e8:	75c0a0ef          	jal	80029b44 <putchar>
    8001f3ec:	00035417          	auipc	s0,0x35
    8001f3f0:	c2544403          	lbu	s0,-987(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f3f4:	0000e597          	auipc	a1,0xe
    8001f3f8:	f9458593          	addi	a1,a1,-108 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f3fc:	cc11                	beqz	s0,8001f418 <cycle_test_8+0xf0>
    8001f3fe:	6498                	ld	a4,8(s1)
    8001f400:	47d9                	li	a5,22
    TEST_END(); 
    8001f402:	0000e597          	auipc	a1,0xe
    8001f406:	f7658593          	addi	a1,a1,-138 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f40a:	00f70763          	beq	a4,a5,8001f418 <cycle_test_8+0xf0>
    8001f40e:	4401                	li	s0,0
    TEST_END(); 
    8001f410:	0000e597          	auipc	a1,0xe
    8001f414:	f7858593          	addi	a1,a1,-136 # 8002d388 <__func__.0+0x2d0>
    8001f418:	0000e517          	auipc	a0,0xe
    8001f41c:	01850513          	addi	a0,a0,24 # 8002d430 <__func__.0+0x378>
    8001f420:	2370b0ef          	jal	8002ae56 <printf>
    8001f424:	4511                	li	a0,4
    8001f426:	ae3e10ef          	jal	80000f08 <goto_priv>
    8001f42a:	bfae20ef          	jal	80001824 <reset_state>
}
    8001f42e:	60e2                	ld	ra,24(sp)
    8001f430:	8522                	mv	a0,s0
    8001f432:	6442                	ld	s0,16(sp)
    8001f434:	64a2                	ld	s1,8(sp)
    8001f436:	6105                	addi	sp,sp,32
    8001f438:	8082                	ret

000000008001f43a <cycle_test_9>:

bool cycle_test_9() {
    8001f43a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f43c:	0000d597          	auipc	a1,0xd
    8001f440:	50458593          	addi	a1,a1,1284 # 8002c940 <__func__.32>
    8001f444:	0000e517          	auipc	a0,0xe
    8001f448:	f5450513          	addi	a0,a0,-172 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_9() {
    8001f44c:	ec06                	sd	ra,24(sp)
    8001f44e:	e822                	sd	s0,16(sp)
    8001f450:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f452:	2050b0ef          	jal	8002ae56 <printf>
    8001f456:	4529                	li	a0,10
    8001f458:	6ec0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f45c:	4511                	li	a0,4
    8001f45e:	aabe10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f462:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f466:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    8001f46a:	4505                	li	a0,1
    8001f46c:	a9de10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f470:	99de10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f474:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f478:	08200593          	li	a1,130
    8001f47c:	00016617          	auipc	a2,0x16
    8001f480:	87460613          	addi	a2,a2,-1932 # 80034cf0 <__func__.0+0x7c38>
    8001f484:	0000e517          	auipc	a0,0xe
    8001f488:	f2c50513          	addi	a0,a0,-212 # 8002d3b0 <__func__.0+0x2f8>
    8001f48c:	1cb0b0ef          	jal	8002ae56 <printf>
    8001f490:	00035797          	auipc	a5,0x35
    8001f494:	b817c783          	lbu	a5,-1151(a5) # 80054011 <excpt+0x1>
    8001f498:	00035497          	auipc	s1,0x35
    8001f49c:	b7848493          	addi	s1,s1,-1160 # 80054010 <excpt>
    8001f4a0:	0000e597          	auipc	a1,0xe
    8001f4a4:	ee858593          	addi	a1,a1,-280 # 8002d388 <__func__.0+0x2d0>
    8001f4a8:	cf89                	beqz	a5,8001f4c2 <cycle_test_9+0x88>
    8001f4aa:	6498                	ld	a4,8(s1)
    8001f4ac:	4789                	li	a5,2
    8001f4ae:	0000e597          	auipc	a1,0xe
    8001f4b2:	eca58593          	addi	a1,a1,-310 # 8002d378 <__func__.0+0x2c0>
    8001f4b6:	00f70663          	beq	a4,a5,8001f4c2 <cycle_test_9+0x88>
    8001f4ba:	0000e597          	auipc	a1,0xe
    8001f4be:	ece58593          	addi	a1,a1,-306 # 8002d388 <__func__.0+0x2d0>
    8001f4c2:	0000e517          	auipc	a0,0xe
    8001f4c6:	f0650513          	addi	a0,a0,-250 # 8002d3c8 <__func__.0+0x310>
    8001f4ca:	18d0b0ef          	jal	8002ae56 <printf>
    8001f4ce:	00035797          	auipc	a5,0x35
    8001f4d2:	b437c783          	lbu	a5,-1213(a5) # 80054011 <excpt+0x1>
    8001f4d6:	c789                	beqz	a5,8001f4e0 <cycle_test_9+0xa6>
    8001f4d8:	6498                	ld	a4,8(s1)
    8001f4da:	4789                	li	a5,2
    8001f4dc:	00f70c63          	beq	a4,a5,8001f4f4 <cycle_test_9+0xba>
    8001f4e0:	0000e517          	auipc	a0,0xe
    8001f4e4:	ef050513          	addi	a0,a0,-272 # 8002d3d0 <__func__.0+0x318>
    8001f4e8:	16f0b0ef          	jal	8002ae56 <printf>
    8001f4ec:	02900513          	li	a0,41
    8001f4f0:	6540a0ef          	jal	80029b44 <putchar>
    8001f4f4:	4529                	li	a0,10
    8001f4f6:	64e0a0ef          	jal	80029b44 <putchar>
    8001f4fa:	00035417          	auipc	s0,0x35
    8001f4fe:	b1744403          	lbu	s0,-1257(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f502:	0000e597          	auipc	a1,0xe
    8001f506:	e8658593          	addi	a1,a1,-378 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f50a:	cc11                	beqz	s0,8001f526 <cycle_test_9+0xec>
    8001f50c:	6498                	ld	a4,8(s1)
    8001f50e:	4789                	li	a5,2
    TEST_END(); 
    8001f510:	0000e597          	auipc	a1,0xe
    8001f514:	e6858593          	addi	a1,a1,-408 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f518:	00f70763          	beq	a4,a5,8001f526 <cycle_test_9+0xec>
    8001f51c:	4401                	li	s0,0
    TEST_END(); 
    8001f51e:	0000e597          	auipc	a1,0xe
    8001f522:	e6a58593          	addi	a1,a1,-406 # 8002d388 <__func__.0+0x2d0>
    8001f526:	0000e517          	auipc	a0,0xe
    8001f52a:	f0a50513          	addi	a0,a0,-246 # 8002d430 <__func__.0+0x378>
    8001f52e:	1290b0ef          	jal	8002ae56 <printf>
    8001f532:	4511                	li	a0,4
    8001f534:	9d5e10ef          	jal	80000f08 <goto_priv>
    8001f538:	aece20ef          	jal	80001824 <reset_state>
}
    8001f53c:	60e2                	ld	ra,24(sp)
    8001f53e:	8522                	mv	a0,s0
    8001f540:	6442                	ld	s0,16(sp)
    8001f542:	64a2                	ld	s1,8(sp)
    8001f544:	6105                	addi	sp,sp,32
    8001f546:	8082                	ret

000000008001f548 <cycle_test_10>:

bool cycle_test_10() {
    8001f548:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f54a:	0000d597          	auipc	a1,0xd
    8001f54e:	40658593          	addi	a1,a1,1030 # 8002c950 <__func__.31>
    8001f552:	0000e517          	auipc	a0,0xe
    8001f556:	e4650513          	addi	a0,a0,-442 # 8002d398 <__func__.0+0x2e0>
bool cycle_test_10() {
    8001f55a:	e406                	sd	ra,8(sp)
    8001f55c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f55e:	0f90b0ef          	jal	8002ae56 <printf>
    8001f562:	4529                	li	a0,10
    8001f564:	5e00a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f568:	4511                	li	a0,4
    8001f56a:	99fe10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f56e:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f572:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f576:	4509                	li	a0,2
    8001f578:	991e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f57c:	891e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f580:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f584:	08200593          	li	a1,130
    8001f588:	00015617          	auipc	a2,0x15
    8001f58c:	7c860613          	addi	a2,a2,1992 # 80034d50 <__func__.0+0x7c98>
    8001f590:	0000e517          	auipc	a0,0xe
    8001f594:	e2050513          	addi	a0,a0,-480 # 8002d3b0 <__func__.0+0x2f8>
    8001f598:	0bf0b0ef          	jal	8002ae56 <printf>
    8001f59c:	00035797          	auipc	a5,0x35
    8001f5a0:	a757c783          	lbu	a5,-1419(a5) # 80054011 <excpt+0x1>
    8001f5a4:	0000e597          	auipc	a1,0xe
    8001f5a8:	dd458593          	addi	a1,a1,-556 # 8002d378 <__func__.0+0x2c0>
    8001f5ac:	c789                	beqz	a5,8001f5b6 <cycle_test_10+0x6e>
    8001f5ae:	0000e597          	auipc	a1,0xe
    8001f5b2:	dda58593          	addi	a1,a1,-550 # 8002d388 <__func__.0+0x2d0>
    8001f5b6:	0000e517          	auipc	a0,0xe
    8001f5ba:	e1250513          	addi	a0,a0,-494 # 8002d3c8 <__func__.0+0x310>
    8001f5be:	0990b0ef          	jal	8002ae56 <printf>
    8001f5c2:	00035797          	auipc	a5,0x35
    8001f5c6:	a4f7c783          	lbu	a5,-1457(a5) # 80054011 <excpt+0x1>
    8001f5ca:	e7a1                	bnez	a5,8001f612 <cycle_test_10+0xca>
    8001f5cc:	4529                	li	a0,10
    8001f5ce:	5760a0ef          	jal	80029b44 <putchar>
    8001f5d2:	00035797          	auipc	a5,0x35
    8001f5d6:	a3f7c783          	lbu	a5,-1473(a5) # 80054011 <excpt+0x1>
    8001f5da:	e795                	bnez	a5,8001f606 <cycle_test_10+0xbe>
    8001f5dc:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f5de:	0000e597          	auipc	a1,0xe
    8001f5e2:	d9a58593          	addi	a1,a1,-614 # 8002d378 <__func__.0+0x2c0>
    8001f5e6:	0000e517          	auipc	a0,0xe
    8001f5ea:	e4a50513          	addi	a0,a0,-438 # 8002d430 <__func__.0+0x378>
    8001f5ee:	0690b0ef          	jal	8002ae56 <printf>
    8001f5f2:	4511                	li	a0,4
    8001f5f4:	915e10ef          	jal	80000f08 <goto_priv>
    8001f5f8:	a2ce20ef          	jal	80001824 <reset_state>
}
    8001f5fc:	60a2                	ld	ra,8(sp)
    8001f5fe:	8522                	mv	a0,s0
    8001f600:	6402                	ld	s0,0(sp)
    8001f602:	0141                	addi	sp,sp,16
    8001f604:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f606:	4401                	li	s0,0
    TEST_END(); 
    8001f608:	0000e597          	auipc	a1,0xe
    8001f60c:	d8058593          	addi	a1,a1,-640 # 8002d388 <__func__.0+0x2d0>
    8001f610:	bfd9                	j	8001f5e6 <cycle_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f612:	0000e517          	auipc	a0,0xe
    8001f616:	dbe50513          	addi	a0,a0,-578 # 8002d3d0 <__func__.0+0x318>
    8001f61a:	03d0b0ef          	jal	8002ae56 <printf>
    8001f61e:	02900513          	li	a0,41
    8001f622:	5220a0ef          	jal	80029b44 <putchar>
    8001f626:	b75d                	j	8001f5cc <cycle_test_10+0x84>

000000008001f628 <instret_test_1>:


bool instret_test_1() {
    8001f628:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f62a:	0000d597          	auipc	a1,0xd
    8001f62e:	33658593          	addi	a1,a1,822 # 8002c960 <__func__.30>
    8001f632:	0000e517          	auipc	a0,0xe
    8001f636:	d6650513          	addi	a0,a0,-666 # 8002d398 <__func__.0+0x2e0>
bool instret_test_1() {
    8001f63a:	ec06                	sd	ra,24(sp)
    8001f63c:	e822                	sd	s0,16(sp)
    8001f63e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f640:	0170b0ef          	jal	8002ae56 <printf>
    8001f644:	4529                	li	a0,10
    8001f646:	4fe0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f64a:	4511                	li	a0,4
    8001f64c:	8bde10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f650:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001f654:	4509                	li	a0,2
    8001f656:	8b3e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f65a:	fb2e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f65e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f662:	08200593          	li	a1,130
    8001f666:	00015617          	auipc	a2,0x15
    8001f66a:	73a60613          	addi	a2,a2,1850 # 80034da0 <__func__.0+0x7ce8>
    8001f66e:	0000e517          	auipc	a0,0xe
    8001f672:	d4250513          	addi	a0,a0,-702 # 8002d3b0 <__func__.0+0x2f8>
    8001f676:	7e00b0ef          	jal	8002ae56 <printf>
    8001f67a:	00035797          	auipc	a5,0x35
    8001f67e:	9977c783          	lbu	a5,-1641(a5) # 80054011 <excpt+0x1>
    8001f682:	00035497          	auipc	s1,0x35
    8001f686:	98e48493          	addi	s1,s1,-1650 # 80054010 <excpt>
    8001f68a:	0000e597          	auipc	a1,0xe
    8001f68e:	cfe58593          	addi	a1,a1,-770 # 8002d388 <__func__.0+0x2d0>
    8001f692:	cf89                	beqz	a5,8001f6ac <instret_test_1+0x84>
    8001f694:	6498                	ld	a4,8(s1)
    8001f696:	4789                	li	a5,2
    8001f698:	0000e597          	auipc	a1,0xe
    8001f69c:	ce058593          	addi	a1,a1,-800 # 8002d378 <__func__.0+0x2c0>
    8001f6a0:	00f70663          	beq	a4,a5,8001f6ac <instret_test_1+0x84>
    8001f6a4:	0000e597          	auipc	a1,0xe
    8001f6a8:	ce458593          	addi	a1,a1,-796 # 8002d388 <__func__.0+0x2d0>
    8001f6ac:	0000e517          	auipc	a0,0xe
    8001f6b0:	d1c50513          	addi	a0,a0,-740 # 8002d3c8 <__func__.0+0x310>
    8001f6b4:	7a20b0ef          	jal	8002ae56 <printf>
    8001f6b8:	00035797          	auipc	a5,0x35
    8001f6bc:	9597c783          	lbu	a5,-1703(a5) # 80054011 <excpt+0x1>
    8001f6c0:	c789                	beqz	a5,8001f6ca <instret_test_1+0xa2>
    8001f6c2:	6498                	ld	a4,8(s1)
    8001f6c4:	4789                	li	a5,2
    8001f6c6:	00f70c63          	beq	a4,a5,8001f6de <instret_test_1+0xb6>
    8001f6ca:	0000e517          	auipc	a0,0xe
    8001f6ce:	d0650513          	addi	a0,a0,-762 # 8002d3d0 <__func__.0+0x318>
    8001f6d2:	7840b0ef          	jal	8002ae56 <printf>
    8001f6d6:	02900513          	li	a0,41
    8001f6da:	46a0a0ef          	jal	80029b44 <putchar>
    8001f6de:	4529                	li	a0,10
    8001f6e0:	4640a0ef          	jal	80029b44 <putchar>
    8001f6e4:	00035797          	auipc	a5,0x35
    8001f6e8:	92d7c783          	lbu	a5,-1747(a5) # 80054011 <excpt+0x1>
    8001f6ec:	4401                	li	s0,0
    8001f6ee:	c789                	beqz	a5,8001f6f8 <instret_test_1+0xd0>
    8001f6f0:	6480                	ld	s0,8(s1)
    8001f6f2:	1479                	addi	s0,s0,-2
    8001f6f4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f6f8:	450d                	li	a0,3
    8001f6fa:	80fe10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f6fe:	f0ee10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f702:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f706:	08200593          	li	a1,130
    8001f70a:	00015617          	auipc	a2,0x15
    8001f70e:	6e660613          	addi	a2,a2,1766 # 80034df0 <__func__.0+0x7d38>
    8001f712:	0000e517          	auipc	a0,0xe
    8001f716:	c9e50513          	addi	a0,a0,-866 # 8002d3b0 <__func__.0+0x2f8>
    8001f71a:	73c0b0ef          	jal	8002ae56 <printf>
    8001f71e:	00035797          	auipc	a5,0x35
    8001f722:	8f37c783          	lbu	a5,-1805(a5) # 80054011 <excpt+0x1>
    8001f726:	0000e597          	auipc	a1,0xe
    8001f72a:	c6258593          	addi	a1,a1,-926 # 8002d388 <__func__.0+0x2d0>
    8001f72e:	cf89                	beqz	a5,8001f748 <instret_test_1+0x120>
    8001f730:	6498                	ld	a4,8(s1)
    8001f732:	4789                	li	a5,2
    8001f734:	0000e597          	auipc	a1,0xe
    8001f738:	c4458593          	addi	a1,a1,-956 # 8002d378 <__func__.0+0x2c0>
    8001f73c:	00f70663          	beq	a4,a5,8001f748 <instret_test_1+0x120>
    8001f740:	0000e597          	auipc	a1,0xe
    8001f744:	c4858593          	addi	a1,a1,-952 # 8002d388 <__func__.0+0x2d0>
    8001f748:	0000e517          	auipc	a0,0xe
    8001f74c:	c8050513          	addi	a0,a0,-896 # 8002d3c8 <__func__.0+0x310>
    8001f750:	7060b0ef          	jal	8002ae56 <printf>
    8001f754:	00035797          	auipc	a5,0x35
    8001f758:	8bd7c783          	lbu	a5,-1859(a5) # 80054011 <excpt+0x1>
    8001f75c:	c789                	beqz	a5,8001f766 <instret_test_1+0x13e>
    8001f75e:	6498                	ld	a4,8(s1)
    8001f760:	4789                	li	a5,2
    8001f762:	00f70c63          	beq	a4,a5,8001f77a <instret_test_1+0x152>
    8001f766:	0000e517          	auipc	a0,0xe
    8001f76a:	c6a50513          	addi	a0,a0,-918 # 8002d3d0 <__func__.0+0x318>
    8001f76e:	6e80b0ef          	jal	8002ae56 <printf>
    8001f772:	02900513          	li	a0,41
    8001f776:	3ce0a0ef          	jal	80029b44 <putchar>
    8001f77a:	4529                	li	a0,10
    8001f77c:	3c80a0ef          	jal	80029b44 <putchar>
    8001f780:	c801                	beqz	s0,8001f790 <instret_test_1+0x168>
    8001f782:	00035797          	auipc	a5,0x35
    8001f786:	88f7c783          	lbu	a5,-1905(a5) # 80054011 <excpt+0x1>
    8001f78a:	4401                	li	s0,0
    8001f78c:	16079f63          	bnez	a5,8001f90a <instret_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f790:	4501                	li	a0,0
    8001f792:	f76e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f796:	e76e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f79a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f79e:	08200593          	li	a1,130
    8001f7a2:	00015617          	auipc	a2,0x15
    8001f7a6:	69e60613          	addi	a2,a2,1694 # 80034e40 <__func__.0+0x7d88>
    8001f7aa:	0000e517          	auipc	a0,0xe
    8001f7ae:	c0650513          	addi	a0,a0,-1018 # 8002d3b0 <__func__.0+0x2f8>
    8001f7b2:	6a40b0ef          	jal	8002ae56 <printf>
    8001f7b6:	00035797          	auipc	a5,0x35
    8001f7ba:	85b7c783          	lbu	a5,-1957(a5) # 80054011 <excpt+0x1>
    8001f7be:	0000e597          	auipc	a1,0xe
    8001f7c2:	bca58593          	addi	a1,a1,-1078 # 8002d388 <__func__.0+0x2d0>
    8001f7c6:	cf89                	beqz	a5,8001f7e0 <instret_test_1+0x1b8>
    8001f7c8:	6498                	ld	a4,8(s1)
    8001f7ca:	4789                	li	a5,2
    8001f7cc:	0000e597          	auipc	a1,0xe
    8001f7d0:	bac58593          	addi	a1,a1,-1108 # 8002d378 <__func__.0+0x2c0>
    8001f7d4:	00f70663          	beq	a4,a5,8001f7e0 <instret_test_1+0x1b8>
    8001f7d8:	0000e597          	auipc	a1,0xe
    8001f7dc:	bb058593          	addi	a1,a1,-1104 # 8002d388 <__func__.0+0x2d0>
    8001f7e0:	0000e517          	auipc	a0,0xe
    8001f7e4:	be850513          	addi	a0,a0,-1048 # 8002d3c8 <__func__.0+0x310>
    8001f7e8:	66e0b0ef          	jal	8002ae56 <printf>
    8001f7ec:	00035797          	auipc	a5,0x35
    8001f7f0:	8257c783          	lbu	a5,-2011(a5) # 80054011 <excpt+0x1>
    8001f7f4:	c789                	beqz	a5,8001f7fe <instret_test_1+0x1d6>
    8001f7f6:	6498                	ld	a4,8(s1)
    8001f7f8:	4789                	li	a5,2
    8001f7fa:	00f70c63          	beq	a4,a5,8001f812 <instret_test_1+0x1ea>
    8001f7fe:	0000e517          	auipc	a0,0xe
    8001f802:	bd250513          	addi	a0,a0,-1070 # 8002d3d0 <__func__.0+0x318>
    8001f806:	6500b0ef          	jal	8002ae56 <printf>
    8001f80a:	02900513          	li	a0,41
    8001f80e:	3360a0ef          	jal	80029b44 <putchar>
    8001f812:	4529                	li	a0,10
    8001f814:	3300a0ef          	jal	80029b44 <putchar>
    8001f818:	c801                	beqz	s0,8001f828 <instret_test_1+0x200>
    8001f81a:	00034797          	auipc	a5,0x34
    8001f81e:	7f77c783          	lbu	a5,2039(a5) # 80054011 <excpt+0x1>
    8001f822:	4401                	li	s0,0
    8001f824:	0c079e63          	bnez	a5,8001f900 <instret_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f828:	4505                	li	a0,1
    8001f82a:	edee10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f82e:	ddee10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f832:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f836:	08200593          	li	a1,130
    8001f83a:	00015617          	auipc	a2,0x15
    8001f83e:	65660613          	addi	a2,a2,1622 # 80034e90 <__func__.0+0x7dd8>
    8001f842:	0000e517          	auipc	a0,0xe
    8001f846:	b6e50513          	addi	a0,a0,-1170 # 8002d3b0 <__func__.0+0x2f8>
    8001f84a:	60c0b0ef          	jal	8002ae56 <printf>
    8001f84e:	00034797          	auipc	a5,0x34
    8001f852:	7c37c783          	lbu	a5,1987(a5) # 80054011 <excpt+0x1>
    8001f856:	0000e597          	auipc	a1,0xe
    8001f85a:	b3258593          	addi	a1,a1,-1230 # 8002d388 <__func__.0+0x2d0>
    8001f85e:	cf89                	beqz	a5,8001f878 <instret_test_1+0x250>
    8001f860:	6498                	ld	a4,8(s1)
    8001f862:	4789                	li	a5,2
    8001f864:	0000e597          	auipc	a1,0xe
    8001f868:	b1458593          	addi	a1,a1,-1260 # 8002d378 <__func__.0+0x2c0>
    8001f86c:	00f70663          	beq	a4,a5,8001f878 <instret_test_1+0x250>
    8001f870:	0000e597          	auipc	a1,0xe
    8001f874:	b1858593          	addi	a1,a1,-1256 # 8002d388 <__func__.0+0x2d0>
    8001f878:	0000e517          	auipc	a0,0xe
    8001f87c:	b5050513          	addi	a0,a0,-1200 # 8002d3c8 <__func__.0+0x310>
    8001f880:	5d60b0ef          	jal	8002ae56 <printf>
    8001f884:	00034797          	auipc	a5,0x34
    8001f888:	78d7c783          	lbu	a5,1933(a5) # 80054011 <excpt+0x1>
    8001f88c:	c789                	beqz	a5,8001f896 <instret_test_1+0x26e>
    8001f88e:	6498                	ld	a4,8(s1)
    8001f890:	4789                	li	a5,2
    8001f892:	00f70c63          	beq	a4,a5,8001f8aa <instret_test_1+0x282>
    8001f896:	0000e517          	auipc	a0,0xe
    8001f89a:	b3a50513          	addi	a0,a0,-1222 # 8002d3d0 <__func__.0+0x318>
    8001f89e:	5b80b0ef          	jal	8002ae56 <printf>
    8001f8a2:	02900513          	li	a0,41
    8001f8a6:	29e0a0ef          	jal	80029b44 <putchar>
    8001f8aa:	4529                	li	a0,10
    8001f8ac:	2980a0ef          	jal	80029b44 <putchar>
    8001f8b0:	c015                	beqz	s0,8001f8d4 <instret_test_1+0x2ac>
    8001f8b2:	00034417          	auipc	s0,0x34
    8001f8b6:	75f44403          	lbu	s0,1887(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f8ba:	0000e597          	auipc	a1,0xe
    8001f8be:	ace58593          	addi	a1,a1,-1330 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8c2:	cc11                	beqz	s0,8001f8de <instret_test_1+0x2b6>
    8001f8c4:	6498                	ld	a4,8(s1)
    8001f8c6:	4789                	li	a5,2
    TEST_END(); 
    8001f8c8:	0000e597          	auipc	a1,0xe
    8001f8cc:	ab058593          	addi	a1,a1,-1360 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8d0:	00f70763          	beq	a4,a5,8001f8de <instret_test_1+0x2b6>
    8001f8d4:	4401                	li	s0,0
    TEST_END(); 
    8001f8d6:	0000e597          	auipc	a1,0xe
    8001f8da:	ab258593          	addi	a1,a1,-1358 # 8002d388 <__func__.0+0x2d0>
    8001f8de:	0000e517          	auipc	a0,0xe
    8001f8e2:	b5250513          	addi	a0,a0,-1198 # 8002d430 <__func__.0+0x378>
    8001f8e6:	5700b0ef          	jal	8002ae56 <printf>
    8001f8ea:	4511                	li	a0,4
    8001f8ec:	e1ce10ef          	jal	80000f08 <goto_priv>
    8001f8f0:	f35e10ef          	jal	80001824 <reset_state>
}
    8001f8f4:	60e2                	ld	ra,24(sp)
    8001f8f6:	8522                	mv	a0,s0
    8001f8f8:	6442                	ld	s0,16(sp)
    8001f8fa:	64a2                	ld	s1,8(sp)
    8001f8fc:	6105                	addi	sp,sp,32
    8001f8fe:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f900:	6480                	ld	s0,8(s1)
    8001f902:	1479                	addi	s0,s0,-2
    8001f904:	00143413          	seqz	s0,s0
    8001f908:	b705                	j	8001f828 <instret_test_1+0x200>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f90a:	6480                	ld	s0,8(s1)
    8001f90c:	1479                	addi	s0,s0,-2
    8001f90e:	00143413          	seqz	s0,s0
    8001f912:	bdbd                	j	8001f790 <instret_test_1+0x168>

000000008001f914 <instret_test_2>:

bool instret_test_2() {
    8001f914:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f916:	0000d597          	auipc	a1,0xd
    8001f91a:	05a58593          	addi	a1,a1,90 # 8002c970 <__func__.29>
    8001f91e:	0000e517          	auipc	a0,0xe
    8001f922:	a7a50513          	addi	a0,a0,-1414 # 8002d398 <__func__.0+0x2e0>
bool instret_test_2() {
    8001f926:	e406                	sd	ra,8(sp)
    8001f928:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f92a:	52c0b0ef          	jal	8002ae56 <printf>
    8001f92e:	4529                	li	a0,10
    8001f930:	2140a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001f934:	4511                	li	a0,4
    8001f936:	dd2e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f93a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001f93e:	450d                	li	a0,3
    8001f940:	dc8e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f944:	cc8e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f948:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f94c:	08200593          	li	a1,130
    8001f950:	00015617          	auipc	a2,0x15
    8001f954:	59060613          	addi	a2,a2,1424 # 80034ee0 <__func__.0+0x7e28>
    8001f958:	0000e517          	auipc	a0,0xe
    8001f95c:	a5850513          	addi	a0,a0,-1448 # 8002d3b0 <__func__.0+0x2f8>
    8001f960:	4f60b0ef          	jal	8002ae56 <printf>
    8001f964:	00034797          	auipc	a5,0x34
    8001f968:	6ad7c783          	lbu	a5,1709(a5) # 80054011 <excpt+0x1>
    8001f96c:	0000e597          	auipc	a1,0xe
    8001f970:	a0c58593          	addi	a1,a1,-1524 # 8002d378 <__func__.0+0x2c0>
    8001f974:	c789                	beqz	a5,8001f97e <instret_test_2+0x6a>
    8001f976:	0000e597          	auipc	a1,0xe
    8001f97a:	a1258593          	addi	a1,a1,-1518 # 8002d388 <__func__.0+0x2d0>
    8001f97e:	0000e517          	auipc	a0,0xe
    8001f982:	a4a50513          	addi	a0,a0,-1462 # 8002d3c8 <__func__.0+0x310>
    8001f986:	4d00b0ef          	jal	8002ae56 <printf>
    8001f98a:	00034797          	auipc	a5,0x34
    8001f98e:	6877c783          	lbu	a5,1671(a5) # 80054011 <excpt+0x1>
    8001f992:	e7a1                	bnez	a5,8001f9da <instret_test_2+0xc6>
    8001f994:	4529                	li	a0,10
    8001f996:	1ae0a0ef          	jal	80029b44 <putchar>
    8001f99a:	00034797          	auipc	a5,0x34
    8001f99e:	6777c783          	lbu	a5,1655(a5) # 80054011 <excpt+0x1>
    8001f9a2:	e795                	bnez	a5,8001f9ce <instret_test_2+0xba>
    8001f9a4:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001f9a6:	0000e597          	auipc	a1,0xe
    8001f9aa:	9d258593          	addi	a1,a1,-1582 # 8002d378 <__func__.0+0x2c0>
    8001f9ae:	0000e517          	auipc	a0,0xe
    8001f9b2:	a8250513          	addi	a0,a0,-1406 # 8002d430 <__func__.0+0x378>
    8001f9b6:	4a00b0ef          	jal	8002ae56 <printf>
    8001f9ba:	4511                	li	a0,4
    8001f9bc:	d4ce10ef          	jal	80000f08 <goto_priv>
    8001f9c0:	e65e10ef          	jal	80001824 <reset_state>
}
    8001f9c4:	60a2                	ld	ra,8(sp)
    8001f9c6:	8522                	mv	a0,s0
    8001f9c8:	6402                	ld	s0,0(sp)
    8001f9ca:	0141                	addi	sp,sp,16
    8001f9cc:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f9ce:	4401                	li	s0,0
    TEST_END(); 
    8001f9d0:	0000e597          	auipc	a1,0xe
    8001f9d4:	9b858593          	addi	a1,a1,-1608 # 8002d388 <__func__.0+0x2d0>
    8001f9d8:	bfd9                	j	8001f9ae <instret_test_2+0x9a>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f9da:	0000e517          	auipc	a0,0xe
    8001f9de:	9f650513          	addi	a0,a0,-1546 # 8002d3d0 <__func__.0+0x318>
    8001f9e2:	4740b0ef          	jal	8002ae56 <printf>
    8001f9e6:	02900513          	li	a0,41
    8001f9ea:	15a0a0ef          	jal	80029b44 <putchar>
    8001f9ee:	b75d                	j	8001f994 <instret_test_2+0x80>

000000008001f9f0 <instret_test_3>:

bool instret_test_3() {
    8001f9f0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f9f2:	0000d597          	auipc	a1,0xd
    8001f9f6:	f8e58593          	addi	a1,a1,-114 # 8002c980 <__func__.28>
    8001f9fa:	0000e517          	auipc	a0,0xe
    8001f9fe:	99e50513          	addi	a0,a0,-1634 # 8002d398 <__func__.0+0x2e0>
bool instret_test_3() {
    8001fa02:	ec06                	sd	ra,24(sp)
    8001fa04:	e822                	sd	s0,16(sp)
    8001fa06:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fa08:	44e0b0ef          	jal	8002ae56 <printf>
    8001fa0c:	4529                	li	a0,10
    8001fa0e:	1360a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fa12:	4511                	li	a0,4
    8001fa14:	cf4e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fa18:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fa1c:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fa20:	4505                	li	a0,1
    8001fa22:	ce6e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa26:	be6e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fa2a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fa2e:	08200593          	li	a1,130
    8001fa32:	00015617          	auipc	a2,0x15
    8001fa36:	4e660613          	addi	a2,a2,1254 # 80034f18 <__func__.0+0x7e60>
    8001fa3a:	0000e517          	auipc	a0,0xe
    8001fa3e:	97650513          	addi	a0,a0,-1674 # 8002d3b0 <__func__.0+0x2f8>
    8001fa42:	4140b0ef          	jal	8002ae56 <printf>
    8001fa46:	00034797          	auipc	a5,0x34
    8001fa4a:	5cb7c783          	lbu	a5,1483(a5) # 80054011 <excpt+0x1>
    8001fa4e:	00034497          	auipc	s1,0x34
    8001fa52:	5c248493          	addi	s1,s1,1474 # 80054010 <excpt>
    8001fa56:	0000e597          	auipc	a1,0xe
    8001fa5a:	93258593          	addi	a1,a1,-1742 # 8002d388 <__func__.0+0x2d0>
    8001fa5e:	cf89                	beqz	a5,8001fa78 <instret_test_3+0x88>
    8001fa60:	6498                	ld	a4,8(s1)
    8001fa62:	4789                	li	a5,2
    8001fa64:	0000e597          	auipc	a1,0xe
    8001fa68:	91458593          	addi	a1,a1,-1772 # 8002d378 <__func__.0+0x2c0>
    8001fa6c:	00f70663          	beq	a4,a5,8001fa78 <instret_test_3+0x88>
    8001fa70:	0000e597          	auipc	a1,0xe
    8001fa74:	91858593          	addi	a1,a1,-1768 # 8002d388 <__func__.0+0x2d0>
    8001fa78:	0000e517          	auipc	a0,0xe
    8001fa7c:	95050513          	addi	a0,a0,-1712 # 8002d3c8 <__func__.0+0x310>
    8001fa80:	3d60b0ef          	jal	8002ae56 <printf>
    8001fa84:	00034797          	auipc	a5,0x34
    8001fa88:	58d7c783          	lbu	a5,1421(a5) # 80054011 <excpt+0x1>
    8001fa8c:	c789                	beqz	a5,8001fa96 <instret_test_3+0xa6>
    8001fa8e:	6498                	ld	a4,8(s1)
    8001fa90:	4789                	li	a5,2
    8001fa92:	00f70c63          	beq	a4,a5,8001faaa <instret_test_3+0xba>
    8001fa96:	0000e517          	auipc	a0,0xe
    8001fa9a:	93a50513          	addi	a0,a0,-1734 # 8002d3d0 <__func__.0+0x318>
    8001fa9e:	3b80b0ef          	jal	8002ae56 <printf>
    8001faa2:	02900513          	li	a0,41
    8001faa6:	09e0a0ef          	jal	80029b44 <putchar>
    8001faaa:	4529                	li	a0,10
    8001faac:	0980a0ef          	jal	80029b44 <putchar>
    8001fab0:	00034417          	auipc	s0,0x34
    8001fab4:	56144403          	lbu	s0,1377(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fab8:	0000e597          	auipc	a1,0xe
    8001fabc:	8d058593          	addi	a1,a1,-1840 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fac0:	cc11                	beqz	s0,8001fadc <instret_test_3+0xec>
    8001fac2:	6498                	ld	a4,8(s1)
    8001fac4:	4789                	li	a5,2
    TEST_END(); 
    8001fac6:	0000e597          	auipc	a1,0xe
    8001faca:	8b258593          	addi	a1,a1,-1870 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001face:	00f70763          	beq	a4,a5,8001fadc <instret_test_3+0xec>
    8001fad2:	4401                	li	s0,0
    TEST_END(); 
    8001fad4:	0000e597          	auipc	a1,0xe
    8001fad8:	8b458593          	addi	a1,a1,-1868 # 8002d388 <__func__.0+0x2d0>
    8001fadc:	0000e517          	auipc	a0,0xe
    8001fae0:	95450513          	addi	a0,a0,-1708 # 8002d430 <__func__.0+0x378>
    8001fae4:	3720b0ef          	jal	8002ae56 <printf>
    8001fae8:	4511                	li	a0,4
    8001faea:	c1ee10ef          	jal	80000f08 <goto_priv>
    8001faee:	d37e10ef          	jal	80001824 <reset_state>
}
    8001faf2:	60e2                	ld	ra,24(sp)
    8001faf4:	8522                	mv	a0,s0
    8001faf6:	6442                	ld	s0,16(sp)
    8001faf8:	64a2                	ld	s1,8(sp)
    8001fafa:	6105                	addi	sp,sp,32
    8001fafc:	8082                	ret

000000008001fafe <instret_test_4>:

bool instret_test_4() {
    8001fafe:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fb00:	0000d597          	auipc	a1,0xd
    8001fb04:	e9058593          	addi	a1,a1,-368 # 8002c990 <__func__.27>
    8001fb08:	0000e517          	auipc	a0,0xe
    8001fb0c:	89050513          	addi	a0,a0,-1904 # 8002d398 <__func__.0+0x2e0>
bool instret_test_4() {
    8001fb10:	e406                	sd	ra,8(sp)
    8001fb12:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fb14:	3420b0ef          	jal	8002ae56 <printf>
    8001fb18:	4529                	li	a0,10
    8001fb1a:	02a0a0ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fb1e:	4511                	li	a0,4
    8001fb20:	be8e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fb24:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fb28:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fb2c:	4505                	li	a0,1
    8001fb2e:	bdae10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb32:	adae10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fb36:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fb3a:	08200593          	li	a1,130
    8001fb3e:	00015617          	auipc	a2,0x15
    8001fb42:	42a60613          	addi	a2,a2,1066 # 80034f68 <__func__.0+0x7eb0>
    8001fb46:	0000e517          	auipc	a0,0xe
    8001fb4a:	86a50513          	addi	a0,a0,-1942 # 8002d3b0 <__func__.0+0x2f8>
    8001fb4e:	3080b0ef          	jal	8002ae56 <printf>
    8001fb52:	00034797          	auipc	a5,0x34
    8001fb56:	4bf7c783          	lbu	a5,1215(a5) # 80054011 <excpt+0x1>
    8001fb5a:	0000e597          	auipc	a1,0xe
    8001fb5e:	81e58593          	addi	a1,a1,-2018 # 8002d378 <__func__.0+0x2c0>
    8001fb62:	c789                	beqz	a5,8001fb6c <instret_test_4+0x6e>
    8001fb64:	0000e597          	auipc	a1,0xe
    8001fb68:	82458593          	addi	a1,a1,-2012 # 8002d388 <__func__.0+0x2d0>
    8001fb6c:	0000e517          	auipc	a0,0xe
    8001fb70:	85c50513          	addi	a0,a0,-1956 # 8002d3c8 <__func__.0+0x310>
    8001fb74:	2e20b0ef          	jal	8002ae56 <printf>
    8001fb78:	00034797          	auipc	a5,0x34
    8001fb7c:	4997c783          	lbu	a5,1177(a5) # 80054011 <excpt+0x1>
    8001fb80:	e7a1                	bnez	a5,8001fbc8 <instret_test_4+0xca>
    8001fb82:	4529                	li	a0,10
    8001fb84:	7c1090ef          	jal	80029b44 <putchar>
    8001fb88:	00034797          	auipc	a5,0x34
    8001fb8c:	4897c783          	lbu	a5,1161(a5) # 80054011 <excpt+0x1>
    8001fb90:	e795                	bnez	a5,8001fbbc <instret_test_4+0xbe>
    8001fb92:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fb94:	0000d597          	auipc	a1,0xd
    8001fb98:	7e458593          	addi	a1,a1,2020 # 8002d378 <__func__.0+0x2c0>
    8001fb9c:	0000e517          	auipc	a0,0xe
    8001fba0:	89450513          	addi	a0,a0,-1900 # 8002d430 <__func__.0+0x378>
    8001fba4:	2b20b0ef          	jal	8002ae56 <printf>
    8001fba8:	4511                	li	a0,4
    8001fbaa:	b5ee10ef          	jal	80000f08 <goto_priv>
    8001fbae:	c77e10ef          	jal	80001824 <reset_state>
}
    8001fbb2:	60a2                	ld	ra,8(sp)
    8001fbb4:	8522                	mv	a0,s0
    8001fbb6:	6402                	ld	s0,0(sp)
    8001fbb8:	0141                	addi	sp,sp,16
    8001fbba:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fbbc:	4401                	li	s0,0
    TEST_END(); 
    8001fbbe:	0000d597          	auipc	a1,0xd
    8001fbc2:	7ca58593          	addi	a1,a1,1994 # 8002d388 <__func__.0+0x2d0>
    8001fbc6:	bfd9                	j	8001fb9c <instret_test_4+0x9e>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fbc8:	0000e517          	auipc	a0,0xe
    8001fbcc:	80850513          	addi	a0,a0,-2040 # 8002d3d0 <__func__.0+0x318>
    8001fbd0:	2860b0ef          	jal	8002ae56 <printf>
    8001fbd4:	02900513          	li	a0,41
    8001fbd8:	76d090ef          	jal	80029b44 <putchar>
    8001fbdc:	b75d                	j	8001fb82 <instret_test_4+0x84>

000000008001fbde <instret_test_5>:

bool instret_test_5() {
    8001fbde:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fbe0:	0000d597          	auipc	a1,0xd
    8001fbe4:	dc058593          	addi	a1,a1,-576 # 8002c9a0 <__func__.26>
    8001fbe8:	0000d517          	auipc	a0,0xd
    8001fbec:	7b050513          	addi	a0,a0,1968 # 8002d398 <__func__.0+0x2e0>
bool instret_test_5() {
    8001fbf0:	ec06                	sd	ra,24(sp)
    8001fbf2:	e822                	sd	s0,16(sp)
    8001fbf4:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fbf6:	2600b0ef          	jal	8002ae56 <printf>
    8001fbfa:	4529                	li	a0,10
    8001fbfc:	749090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fc00:	4511                	li	a0,4
    8001fc02:	b06e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fc06:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fc0a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fc0e:	4509                	li	a0,2
    8001fc10:	af8e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc14:	9f8e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fc18:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fc1c:	08200593          	li	a1,130
    8001fc20:	00015617          	auipc	a2,0x15
    8001fc24:	39060613          	addi	a2,a2,912 # 80034fb0 <__func__.0+0x7ef8>
    8001fc28:	0000d517          	auipc	a0,0xd
    8001fc2c:	78850513          	addi	a0,a0,1928 # 8002d3b0 <__func__.0+0x2f8>
    8001fc30:	2260b0ef          	jal	8002ae56 <printf>
    8001fc34:	00034797          	auipc	a5,0x34
    8001fc38:	3dd7c783          	lbu	a5,989(a5) # 80054011 <excpt+0x1>
    8001fc3c:	00034497          	auipc	s1,0x34
    8001fc40:	3d448493          	addi	s1,s1,980 # 80054010 <excpt>
    8001fc44:	0000d597          	auipc	a1,0xd
    8001fc48:	74458593          	addi	a1,a1,1860 # 8002d388 <__func__.0+0x2d0>
    8001fc4c:	cf89                	beqz	a5,8001fc66 <instret_test_5+0x88>
    8001fc4e:	6498                	ld	a4,8(s1)
    8001fc50:	47d9                	li	a5,22
    8001fc52:	0000d597          	auipc	a1,0xd
    8001fc56:	72658593          	addi	a1,a1,1830 # 8002d378 <__func__.0+0x2c0>
    8001fc5a:	00f70663          	beq	a4,a5,8001fc66 <instret_test_5+0x88>
    8001fc5e:	0000d597          	auipc	a1,0xd
    8001fc62:	72a58593          	addi	a1,a1,1834 # 8002d388 <__func__.0+0x2d0>
    8001fc66:	0000d517          	auipc	a0,0xd
    8001fc6a:	76250513          	addi	a0,a0,1890 # 8002d3c8 <__func__.0+0x310>
    8001fc6e:	1e80b0ef          	jal	8002ae56 <printf>
    8001fc72:	00034797          	auipc	a5,0x34
    8001fc76:	39f7c783          	lbu	a5,927(a5) # 80054011 <excpt+0x1>
    8001fc7a:	c789                	beqz	a5,8001fc84 <instret_test_5+0xa6>
    8001fc7c:	6498                	ld	a4,8(s1)
    8001fc7e:	47d9                	li	a5,22
    8001fc80:	00f70c63          	beq	a4,a5,8001fc98 <instret_test_5+0xba>
    8001fc84:	0000d517          	auipc	a0,0xd
    8001fc88:	74c50513          	addi	a0,a0,1868 # 8002d3d0 <__func__.0+0x318>
    8001fc8c:	1ca0b0ef          	jal	8002ae56 <printf>
    8001fc90:	02900513          	li	a0,41
    8001fc94:	6b1090ef          	jal	80029b44 <putchar>
    8001fc98:	4529                	li	a0,10
    8001fc9a:	6ab090ef          	jal	80029b44 <putchar>
    8001fc9e:	00034417          	auipc	s0,0x34
    8001fca2:	37344403          	lbu	s0,883(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fca6:	0000d597          	auipc	a1,0xd
    8001fcaa:	6e258593          	addi	a1,a1,1762 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fcae:	cc11                	beqz	s0,8001fcca <instret_test_5+0xec>
    8001fcb0:	6498                	ld	a4,8(s1)
    8001fcb2:	47d9                	li	a5,22
    TEST_END(); 
    8001fcb4:	0000d597          	auipc	a1,0xd
    8001fcb8:	6c458593          	addi	a1,a1,1732 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fcbc:	00f70763          	beq	a4,a5,8001fcca <instret_test_5+0xec>
    8001fcc0:	4401                	li	s0,0
    TEST_END(); 
    8001fcc2:	0000d597          	auipc	a1,0xd
    8001fcc6:	6c658593          	addi	a1,a1,1734 # 8002d388 <__func__.0+0x2d0>
    8001fcca:	0000d517          	auipc	a0,0xd
    8001fcce:	76650513          	addi	a0,a0,1894 # 8002d430 <__func__.0+0x378>
    8001fcd2:	1840b0ef          	jal	8002ae56 <printf>
    8001fcd6:	4511                	li	a0,4
    8001fcd8:	a30e10ef          	jal	80000f08 <goto_priv>
    8001fcdc:	b49e10ef          	jal	80001824 <reset_state>
}
    8001fce0:	60e2                	ld	ra,24(sp)
    8001fce2:	8522                	mv	a0,s0
    8001fce4:	6442                	ld	s0,16(sp)
    8001fce6:	64a2                	ld	s1,8(sp)
    8001fce8:	6105                	addi	sp,sp,32
    8001fcea:	8082                	ret

000000008001fcec <instret_test_6>:

bool instret_test_6() {
    8001fcec:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fcee:	0000d597          	auipc	a1,0xd
    8001fcf2:	cc258593          	addi	a1,a1,-830 # 8002c9b0 <__func__.25>
    8001fcf6:	0000d517          	auipc	a0,0xd
    8001fcfa:	6a250513          	addi	a0,a0,1698 # 8002d398 <__func__.0+0x2e0>
bool instret_test_6() {
    8001fcfe:	e406                	sd	ra,8(sp)
    8001fd00:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fd02:	1540b0ef          	jal	8002ae56 <printf>
    8001fd06:	4529                	li	a0,10
    8001fd08:	63d090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fd0c:	4511                	li	a0,4
    8001fd0e:	9fae10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fd12:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fd16:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fd1a:	4509                	li	a0,2
    8001fd1c:	9ece10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd20:	8ece10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fd24:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fd28:	08200593          	li	a1,130
    8001fd2c:	00015617          	auipc	a2,0x15
    8001fd30:	2e460613          	addi	a2,a2,740 # 80035010 <__func__.0+0x7f58>
    8001fd34:	0000d517          	auipc	a0,0xd
    8001fd38:	67c50513          	addi	a0,a0,1660 # 8002d3b0 <__func__.0+0x2f8>
    8001fd3c:	11a0b0ef          	jal	8002ae56 <printf>
    8001fd40:	00034797          	auipc	a5,0x34
    8001fd44:	2d17c783          	lbu	a5,721(a5) # 80054011 <excpt+0x1>
    8001fd48:	0000d597          	auipc	a1,0xd
    8001fd4c:	63058593          	addi	a1,a1,1584 # 8002d378 <__func__.0+0x2c0>
    8001fd50:	c789                	beqz	a5,8001fd5a <instret_test_6+0x6e>
    8001fd52:	0000d597          	auipc	a1,0xd
    8001fd56:	63658593          	addi	a1,a1,1590 # 8002d388 <__func__.0+0x2d0>
    8001fd5a:	0000d517          	auipc	a0,0xd
    8001fd5e:	66e50513          	addi	a0,a0,1646 # 8002d3c8 <__func__.0+0x310>
    8001fd62:	0f40b0ef          	jal	8002ae56 <printf>
    8001fd66:	00034797          	auipc	a5,0x34
    8001fd6a:	2ab7c783          	lbu	a5,683(a5) # 80054011 <excpt+0x1>
    8001fd6e:	e7a1                	bnez	a5,8001fdb6 <instret_test_6+0xca>
    8001fd70:	4529                	li	a0,10
    8001fd72:	5d3090ef          	jal	80029b44 <putchar>
    8001fd76:	00034797          	auipc	a5,0x34
    8001fd7a:	29b7c783          	lbu	a5,667(a5) # 80054011 <excpt+0x1>
    8001fd7e:	e795                	bnez	a5,8001fdaa <instret_test_6+0xbe>
    8001fd80:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fd82:	0000d597          	auipc	a1,0xd
    8001fd86:	5f658593          	addi	a1,a1,1526 # 8002d378 <__func__.0+0x2c0>
    8001fd8a:	0000d517          	auipc	a0,0xd
    8001fd8e:	6a650513          	addi	a0,a0,1702 # 8002d430 <__func__.0+0x378>
    8001fd92:	0c40b0ef          	jal	8002ae56 <printf>
    8001fd96:	4511                	li	a0,4
    8001fd98:	970e10ef          	jal	80000f08 <goto_priv>
    8001fd9c:	a89e10ef          	jal	80001824 <reset_state>
}
    8001fda0:	60a2                	ld	ra,8(sp)
    8001fda2:	8522                	mv	a0,s0
    8001fda4:	6402                	ld	s0,0(sp)
    8001fda6:	0141                	addi	sp,sp,16
    8001fda8:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fdaa:	4401                	li	s0,0
    TEST_END(); 
    8001fdac:	0000d597          	auipc	a1,0xd
    8001fdb0:	5dc58593          	addi	a1,a1,1500 # 8002d388 <__func__.0+0x2d0>
    8001fdb4:	bfd9                	j	8001fd8a <instret_test_6+0x9e>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fdb6:	0000d517          	auipc	a0,0xd
    8001fdba:	61a50513          	addi	a0,a0,1562 # 8002d3d0 <__func__.0+0x318>
    8001fdbe:	0980b0ef          	jal	8002ae56 <printf>
    8001fdc2:	02900513          	li	a0,41
    8001fdc6:	57f090ef          	jal	80029b44 <putchar>
    8001fdca:	b75d                	j	8001fd70 <instret_test_6+0x84>

000000008001fdcc <instret_test_7>:

bool instret_test_7() {
    8001fdcc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fdce:	0000d597          	auipc	a1,0xd
    8001fdd2:	bf258593          	addi	a1,a1,-1038 # 8002c9c0 <__func__.24>
    8001fdd6:	0000d517          	auipc	a0,0xd
    8001fdda:	5c250513          	addi	a0,a0,1474 # 8002d398 <__func__.0+0x2e0>
bool instret_test_7() {
    8001fdde:	e406                	sd	ra,8(sp)
    8001fde0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fde2:	0740b0ef          	jal	8002ae56 <printf>
    8001fde6:	4529                	li	a0,10
    8001fde8:	55d090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fdec:	4511                	li	a0,4
    8001fdee:	91ae10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fdf2:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fdf6:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fdfa:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001fdfe:	4501                	li	a0,0
    8001fe00:	908e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe04:	808e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fe08:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe0c:	08200593          	li	a1,130
    8001fe10:	00015617          	auipc	a2,0x15
    8001fe14:	24860613          	addi	a2,a2,584 # 80035058 <__func__.0+0x7fa0>
    8001fe18:	0000d517          	auipc	a0,0xd
    8001fe1c:	59850513          	addi	a0,a0,1432 # 8002d3b0 <__func__.0+0x2f8>
    8001fe20:	0360b0ef          	jal	8002ae56 <printf>
    8001fe24:	00034797          	auipc	a5,0x34
    8001fe28:	1ed7c783          	lbu	a5,493(a5) # 80054011 <excpt+0x1>
    8001fe2c:	0000d597          	auipc	a1,0xd
    8001fe30:	54c58593          	addi	a1,a1,1356 # 8002d378 <__func__.0+0x2c0>
    8001fe34:	c789                	beqz	a5,8001fe3e <instret_test_7+0x72>
    8001fe36:	0000d597          	auipc	a1,0xd
    8001fe3a:	55258593          	addi	a1,a1,1362 # 8002d388 <__func__.0+0x2d0>
    8001fe3e:	0000d517          	auipc	a0,0xd
    8001fe42:	58a50513          	addi	a0,a0,1418 # 8002d3c8 <__func__.0+0x310>
    8001fe46:	0100b0ef          	jal	8002ae56 <printf>
    8001fe4a:	00034797          	auipc	a5,0x34
    8001fe4e:	1c77c783          	lbu	a5,455(a5) # 80054011 <excpt+0x1>
    8001fe52:	e7a1                	bnez	a5,8001fe9a <instret_test_7+0xce>
    8001fe54:	4529                	li	a0,10
    8001fe56:	4ef090ef          	jal	80029b44 <putchar>
    8001fe5a:	00034797          	auipc	a5,0x34
    8001fe5e:	1b77c783          	lbu	a5,439(a5) # 80054011 <excpt+0x1>
    8001fe62:	e795                	bnez	a5,8001fe8e <instret_test_7+0xc2>
    8001fe64:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fe66:	0000d597          	auipc	a1,0xd
    8001fe6a:	51258593          	addi	a1,a1,1298 # 8002d378 <__func__.0+0x2c0>
    8001fe6e:	0000d517          	auipc	a0,0xd
    8001fe72:	5c250513          	addi	a0,a0,1474 # 8002d430 <__func__.0+0x378>
    8001fe76:	7e10a0ef          	jal	8002ae56 <printf>
    8001fe7a:	4511                	li	a0,4
    8001fe7c:	88ce10ef          	jal	80000f08 <goto_priv>
    8001fe80:	9a5e10ef          	jal	80001824 <reset_state>
}
    8001fe84:	60a2                	ld	ra,8(sp)
    8001fe86:	8522                	mv	a0,s0
    8001fe88:	6402                	ld	s0,0(sp)
    8001fe8a:	0141                	addi	sp,sp,16
    8001fe8c:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe8e:	4401                	li	s0,0
    TEST_END(); 
    8001fe90:	0000d597          	auipc	a1,0xd
    8001fe94:	4f858593          	addi	a1,a1,1272 # 8002d388 <__func__.0+0x2d0>
    8001fe98:	bfd9                	j	8001fe6e <instret_test_7+0xa2>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fe9a:	0000d517          	auipc	a0,0xd
    8001fe9e:	53650513          	addi	a0,a0,1334 # 8002d3d0 <__func__.0+0x318>
    8001fea2:	7b50a0ef          	jal	8002ae56 <printf>
    8001fea6:	02900513          	li	a0,41
    8001feaa:	49b090ef          	jal	80029b44 <putchar>
    8001feae:	b75d                	j	8001fe54 <instret_test_7+0x88>

000000008001feb0 <instret_test_8>:

bool instret_test_8() {
    8001feb0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001feb2:	0000d597          	auipc	a1,0xd
    8001feb6:	b1e58593          	addi	a1,a1,-1250 # 8002c9d0 <__func__.23>
    8001feba:	0000d517          	auipc	a0,0xd
    8001febe:	4de50513          	addi	a0,a0,1246 # 8002d398 <__func__.0+0x2e0>
bool instret_test_8() {
    8001fec2:	ec06                	sd	ra,24(sp)
    8001fec4:	e822                	sd	s0,16(sp)
    8001fec6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fec8:	78f0a0ef          	jal	8002ae56 <printf>
    8001fecc:	4529                	li	a0,10
    8001fece:	477090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001fed2:	4511                	li	a0,4
    8001fed4:	834e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fed8:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fedc:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fee0:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001fee4:	4501                	li	a0,0
    8001fee6:	822e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001feea:	f23e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001feee:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001fef2:	08200593          	li	a1,130
    8001fef6:	00015617          	auipc	a2,0x15
    8001fefa:	1ba60613          	addi	a2,a2,442 # 800350b0 <__func__.0+0x7ff8>
    8001fefe:	0000d517          	auipc	a0,0xd
    8001ff02:	4b250513          	addi	a0,a0,1202 # 8002d3b0 <__func__.0+0x2f8>
    8001ff06:	7510a0ef          	jal	8002ae56 <printf>
    8001ff0a:	00034797          	auipc	a5,0x34
    8001ff0e:	1077c783          	lbu	a5,263(a5) # 80054011 <excpt+0x1>
    8001ff12:	00034497          	auipc	s1,0x34
    8001ff16:	0fe48493          	addi	s1,s1,254 # 80054010 <excpt>
    8001ff1a:	0000d597          	auipc	a1,0xd
    8001ff1e:	46e58593          	addi	a1,a1,1134 # 8002d388 <__func__.0+0x2d0>
    8001ff22:	cf89                	beqz	a5,8001ff3c <instret_test_8+0x8c>
    8001ff24:	6498                	ld	a4,8(s1)
    8001ff26:	47d9                	li	a5,22
    8001ff28:	0000d597          	auipc	a1,0xd
    8001ff2c:	45058593          	addi	a1,a1,1104 # 8002d378 <__func__.0+0x2c0>
    8001ff30:	00f70663          	beq	a4,a5,8001ff3c <instret_test_8+0x8c>
    8001ff34:	0000d597          	auipc	a1,0xd
    8001ff38:	45458593          	addi	a1,a1,1108 # 8002d388 <__func__.0+0x2d0>
    8001ff3c:	0000d517          	auipc	a0,0xd
    8001ff40:	48c50513          	addi	a0,a0,1164 # 8002d3c8 <__func__.0+0x310>
    8001ff44:	7130a0ef          	jal	8002ae56 <printf>
    8001ff48:	00034797          	auipc	a5,0x34
    8001ff4c:	0c97c783          	lbu	a5,201(a5) # 80054011 <excpt+0x1>
    8001ff50:	c789                	beqz	a5,8001ff5a <instret_test_8+0xaa>
    8001ff52:	6498                	ld	a4,8(s1)
    8001ff54:	47d9                	li	a5,22
    8001ff56:	00f70c63          	beq	a4,a5,8001ff6e <instret_test_8+0xbe>
    8001ff5a:	0000d517          	auipc	a0,0xd
    8001ff5e:	47650513          	addi	a0,a0,1142 # 8002d3d0 <__func__.0+0x318>
    8001ff62:	6f50a0ef          	jal	8002ae56 <printf>
    8001ff66:	02900513          	li	a0,41
    8001ff6a:	3db090ef          	jal	80029b44 <putchar>
    8001ff6e:	4529                	li	a0,10
    8001ff70:	3d5090ef          	jal	80029b44 <putchar>
    8001ff74:	00034417          	auipc	s0,0x34
    8001ff78:	09d44403          	lbu	s0,157(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001ff7c:	0000d597          	auipc	a1,0xd
    8001ff80:	40c58593          	addi	a1,a1,1036 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001ff84:	cc11                	beqz	s0,8001ffa0 <instret_test_8+0xf0>
    8001ff86:	6498                	ld	a4,8(s1)
    8001ff88:	47d9                	li	a5,22
    TEST_END(); 
    8001ff8a:	0000d597          	auipc	a1,0xd
    8001ff8e:	3ee58593          	addi	a1,a1,1006 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001ff92:	00f70763          	beq	a4,a5,8001ffa0 <instret_test_8+0xf0>
    8001ff96:	4401                	li	s0,0
    TEST_END(); 
    8001ff98:	0000d597          	auipc	a1,0xd
    8001ff9c:	3f058593          	addi	a1,a1,1008 # 8002d388 <__func__.0+0x2d0>
    8001ffa0:	0000d517          	auipc	a0,0xd
    8001ffa4:	49050513          	addi	a0,a0,1168 # 8002d430 <__func__.0+0x378>
    8001ffa8:	6af0a0ef          	jal	8002ae56 <printf>
    8001ffac:	4511                	li	a0,4
    8001ffae:	f5be00ef          	jal	80000f08 <goto_priv>
    8001ffb2:	873e10ef          	jal	80001824 <reset_state>
}
    8001ffb6:	60e2                	ld	ra,24(sp)
    8001ffb8:	8522                	mv	a0,s0
    8001ffba:	6442                	ld	s0,16(sp)
    8001ffbc:	64a2                	ld	s1,8(sp)
    8001ffbe:	6105                	addi	sp,sp,32
    8001ffc0:	8082                	ret

000000008001ffc2 <instret_test_9>:

bool instret_test_9() {
    8001ffc2:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ffc4:	0000d597          	auipc	a1,0xd
    8001ffc8:	a1c58593          	addi	a1,a1,-1508 # 8002c9e0 <__func__.22>
    8001ffcc:	0000d517          	auipc	a0,0xd
    8001ffd0:	3cc50513          	addi	a0,a0,972 # 8002d398 <__func__.0+0x2e0>
bool instret_test_9() {
    8001ffd4:	ec06                	sd	ra,24(sp)
    8001ffd6:	e822                	sd	s0,16(sp)
    8001ffd8:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ffda:	67d0a0ef          	jal	8002ae56 <printf>
    8001ffde:	4529                	li	a0,10
    8001ffe0:	365090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    8001ffe4:	4511                	li	a0,4
    8001ffe6:	f23e00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001ffea:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001ffee:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    8001fff2:	4505                	li	a0,1
    8001fff4:	f15e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fff8:	e15e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fffc:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020000:	08200593          	li	a1,130
    80020004:	00015617          	auipc	a2,0x15
    80020008:	11c60613          	addi	a2,a2,284 # 80035120 <__func__.0+0x8068>
    8002000c:	0000d517          	auipc	a0,0xd
    80020010:	3a450513          	addi	a0,a0,932 # 8002d3b0 <__func__.0+0x2f8>
    80020014:	6430a0ef          	jal	8002ae56 <printf>
    80020018:	00034797          	auipc	a5,0x34
    8002001c:	ff97c783          	lbu	a5,-7(a5) # 80054011 <excpt+0x1>
    80020020:	00034497          	auipc	s1,0x34
    80020024:	ff048493          	addi	s1,s1,-16 # 80054010 <excpt>
    80020028:	0000d597          	auipc	a1,0xd
    8002002c:	36058593          	addi	a1,a1,864 # 8002d388 <__func__.0+0x2d0>
    80020030:	cf89                	beqz	a5,8002004a <instret_test_9+0x88>
    80020032:	6498                	ld	a4,8(s1)
    80020034:	4789                	li	a5,2
    80020036:	0000d597          	auipc	a1,0xd
    8002003a:	34258593          	addi	a1,a1,834 # 8002d378 <__func__.0+0x2c0>
    8002003e:	00f70663          	beq	a4,a5,8002004a <instret_test_9+0x88>
    80020042:	0000d597          	auipc	a1,0xd
    80020046:	34658593          	addi	a1,a1,838 # 8002d388 <__func__.0+0x2d0>
    8002004a:	0000d517          	auipc	a0,0xd
    8002004e:	37e50513          	addi	a0,a0,894 # 8002d3c8 <__func__.0+0x310>
    80020052:	6050a0ef          	jal	8002ae56 <printf>
    80020056:	00034797          	auipc	a5,0x34
    8002005a:	fbb7c783          	lbu	a5,-69(a5) # 80054011 <excpt+0x1>
    8002005e:	c789                	beqz	a5,80020068 <instret_test_9+0xa6>
    80020060:	6498                	ld	a4,8(s1)
    80020062:	4789                	li	a5,2
    80020064:	00f70c63          	beq	a4,a5,8002007c <instret_test_9+0xba>
    80020068:	0000d517          	auipc	a0,0xd
    8002006c:	36850513          	addi	a0,a0,872 # 8002d3d0 <__func__.0+0x318>
    80020070:	5e70a0ef          	jal	8002ae56 <printf>
    80020074:	02900513          	li	a0,41
    80020078:	2cd090ef          	jal	80029b44 <putchar>
    8002007c:	4529                	li	a0,10
    8002007e:	2c7090ef          	jal	80029b44 <putchar>
    80020082:	00034417          	auipc	s0,0x34
    80020086:	f8f44403          	lbu	s0,-113(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002008a:	0000d597          	auipc	a1,0xd
    8002008e:	2fe58593          	addi	a1,a1,766 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020092:	cc11                	beqz	s0,800200ae <instret_test_9+0xec>
    80020094:	6498                	ld	a4,8(s1)
    80020096:	4789                	li	a5,2
    TEST_END(); 
    80020098:	0000d597          	auipc	a1,0xd
    8002009c:	2e058593          	addi	a1,a1,736 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    800200a0:	00f70763          	beq	a4,a5,800200ae <instret_test_9+0xec>
    800200a4:	4401                	li	s0,0
    TEST_END(); 
    800200a6:	0000d597          	auipc	a1,0xd
    800200aa:	2e258593          	addi	a1,a1,738 # 8002d388 <__func__.0+0x2d0>
    800200ae:	0000d517          	auipc	a0,0xd
    800200b2:	38250513          	addi	a0,a0,898 # 8002d430 <__func__.0+0x378>
    800200b6:	5a10a0ef          	jal	8002ae56 <printf>
    800200ba:	4511                	li	a0,4
    800200bc:	e4de00ef          	jal	80000f08 <goto_priv>
    800200c0:	f64e10ef          	jal	80001824 <reset_state>
}
    800200c4:	60e2                	ld	ra,24(sp)
    800200c6:	8522                	mv	a0,s0
    800200c8:	6442                	ld	s0,16(sp)
    800200ca:	64a2                	ld	s1,8(sp)
    800200cc:	6105                	addi	sp,sp,32
    800200ce:	8082                	ret

00000000800200d0 <instret_test_10>:

bool instret_test_10() {
    800200d0:	1141                	addi	sp,sp,-16

    TEST_START();    
    800200d2:	0000d597          	auipc	a1,0xd
    800200d6:	91e58593          	addi	a1,a1,-1762 # 8002c9f0 <__func__.21>
    800200da:	0000d517          	auipc	a0,0xd
    800200de:	2be50513          	addi	a0,a0,702 # 8002d398 <__func__.0+0x2e0>
bool instret_test_10() {
    800200e2:	e406                	sd	ra,8(sp)
    800200e4:	e022                	sd	s0,0(sp)
    TEST_START();    
    800200e6:	5710a0ef          	jal	8002ae56 <printf>
    800200ea:	4529                	li	a0,10
    800200ec:	259090ef          	jal	80029b44 <putchar>
    goto_priv(PRIV_M);
    800200f0:	4511                	li	a0,4
    800200f2:	e17e00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    800200f6:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    800200fa:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    800200fe:	4509                	li	a0,2
    80020100:	e09e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020104:	d09e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    80020108:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002010c:	08200593          	li	a1,130
    80020110:	00015617          	auipc	a2,0x15
    80020114:	07060613          	addi	a2,a2,112 # 80035180 <__func__.0+0x80c8>
    80020118:	0000d517          	auipc	a0,0xd
    8002011c:	29850513          	addi	a0,a0,664 # 8002d3b0 <__func__.0+0x2f8>
    80020120:	5370a0ef          	jal	8002ae56 <printf>
    80020124:	00034797          	auipc	a5,0x34
    80020128:	eed7c783          	lbu	a5,-275(a5) # 80054011 <excpt+0x1>
    8002012c:	0000d597          	auipc	a1,0xd
    80020130:	24c58593          	addi	a1,a1,588 # 8002d378 <__func__.0+0x2c0>
    80020134:	c789                	beqz	a5,8002013e <instret_test_10+0x6e>
    80020136:	0000d597          	auipc	a1,0xd
    8002013a:	25258593          	addi	a1,a1,594 # 8002d388 <__func__.0+0x2d0>
    8002013e:	0000d517          	auipc	a0,0xd
    80020142:	28a50513          	addi	a0,a0,650 # 8002d3c8 <__func__.0+0x310>
    80020146:	5110a0ef          	jal	8002ae56 <printf>
    8002014a:	00034797          	auipc	a5,0x34
    8002014e:	ec77c783          	lbu	a5,-313(a5) # 80054011 <excpt+0x1>
    80020152:	e7a1                	bnez	a5,8002019a <instret_test_10+0xca>
    80020154:	4529                	li	a0,10
    80020156:	1ef090ef          	jal	80029b44 <putchar>
    8002015a:	00034797          	auipc	a5,0x34
    8002015e:	eb77c783          	lbu	a5,-329(a5) # 80054011 <excpt+0x1>
    80020162:	e795                	bnez	a5,8002018e <instret_test_10+0xbe>
    80020164:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020166:	0000d597          	auipc	a1,0xd
    8002016a:	21258593          	addi	a1,a1,530 # 8002d378 <__func__.0+0x2c0>
    8002016e:	0000d517          	auipc	a0,0xd
    80020172:	2c250513          	addi	a0,a0,706 # 8002d430 <__func__.0+0x378>
    80020176:	4e10a0ef          	jal	8002ae56 <printf>
    8002017a:	4511                	li	a0,4
    8002017c:	d8de00ef          	jal	80000f08 <goto_priv>
    80020180:	ea4e10ef          	jal	80001824 <reset_state>
}
    80020184:	60a2                	ld	ra,8(sp)
    80020186:	8522                	mv	a0,s0
    80020188:	6402                	ld	s0,0(sp)
    8002018a:	0141                	addi	sp,sp,16
    8002018c:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002018e:	4401                	li	s0,0
    TEST_END(); 
    80020190:	0000d597          	auipc	a1,0xd
    80020194:	1f858593          	addi	a1,a1,504 # 8002d388 <__func__.0+0x2d0>
    80020198:	bfd9                	j	8002016e <instret_test_10+0x9e>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002019a:	0000d517          	auipc	a0,0xd
    8002019e:	23650513          	addi	a0,a0,566 # 8002d3d0 <__func__.0+0x318>
    800201a2:	4b50a0ef          	jal	8002ae56 <printf>
    800201a6:	02900513          	li	a0,41
    800201aa:	19b090ef          	jal	80029b44 <putchar>
    800201ae:	b75d                	j	80020154 <instret_test_10+0x84>

00000000800201b0 <timecmp_test_1>:


bool timecmp_test_1() {
    800201b0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800201b2:	0000d597          	auipc	a1,0xd
    800201b6:	84e58593          	addi	a1,a1,-1970 # 8002ca00 <__func__.20>
    800201ba:	0000d517          	auipc	a0,0xd
    800201be:	1de50513          	addi	a0,a0,478 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_1() {
    800201c2:	ec06                	sd	ra,24(sp)
    800201c4:	e822                	sd	s0,16(sp)
    800201c6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800201c8:	48f0a0ef          	jal	8002ae56 <printf>
    800201cc:	4529                	li	a0,10
    800201ce:	177090ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800201d2:	57fd                	li	a5,-1
    800201d4:	17fe                	slli	a5,a5,0x3f
    800201d6:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800201da:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800201de:	450d                	li	a0,3
    800201e0:	d29e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800201e4:	c29e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800201e8:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800201ec:	08200593          	li	a1,130
    800201f0:	00015617          	auipc	a2,0x15
    800201f4:	fe060613          	addi	a2,a2,-32 # 800351d0 <__func__.0+0x8118>
    800201f8:	0000d517          	auipc	a0,0xd
    800201fc:	1b850513          	addi	a0,a0,440 # 8002d3b0 <__func__.0+0x2f8>
    80020200:	4570a0ef          	jal	8002ae56 <printf>
    80020204:	00034797          	auipc	a5,0x34
    80020208:	e0d7c783          	lbu	a5,-499(a5) # 80054011 <excpt+0x1>
    8002020c:	00034497          	auipc	s1,0x34
    80020210:	e0448493          	addi	s1,s1,-508 # 80054010 <excpt>
    80020214:	0000d597          	auipc	a1,0xd
    80020218:	17458593          	addi	a1,a1,372 # 8002d388 <__func__.0+0x2d0>
    8002021c:	cf89                	beqz	a5,80020236 <timecmp_test_1+0x86>
    8002021e:	6498                	ld	a4,8(s1)
    80020220:	4789                	li	a5,2
    80020222:	0000d597          	auipc	a1,0xd
    80020226:	15658593          	addi	a1,a1,342 # 8002d378 <__func__.0+0x2c0>
    8002022a:	00f70663          	beq	a4,a5,80020236 <timecmp_test_1+0x86>
    8002022e:	0000d597          	auipc	a1,0xd
    80020232:	15a58593          	addi	a1,a1,346 # 8002d388 <__func__.0+0x2d0>
    80020236:	0000d517          	auipc	a0,0xd
    8002023a:	19250513          	addi	a0,a0,402 # 8002d3c8 <__func__.0+0x310>
    8002023e:	4190a0ef          	jal	8002ae56 <printf>
    80020242:	00034797          	auipc	a5,0x34
    80020246:	dcf7c783          	lbu	a5,-561(a5) # 80054011 <excpt+0x1>
    8002024a:	c789                	beqz	a5,80020254 <timecmp_test_1+0xa4>
    8002024c:	6498                	ld	a4,8(s1)
    8002024e:	4789                	li	a5,2
    80020250:	00f70c63          	beq	a4,a5,80020268 <timecmp_test_1+0xb8>
    80020254:	0000d517          	auipc	a0,0xd
    80020258:	17c50513          	addi	a0,a0,380 # 8002d3d0 <__func__.0+0x318>
    8002025c:	3fb0a0ef          	jal	8002ae56 <printf>
    80020260:	02900513          	li	a0,41
    80020264:	0e1090ef          	jal	80029b44 <putchar>
    80020268:	4529                	li	a0,10
    8002026a:	0db090ef          	jal	80029b44 <putchar>
    8002026e:	00034797          	auipc	a5,0x34
    80020272:	da37c783          	lbu	a5,-605(a5) # 80054011 <excpt+0x1>
    80020276:	4401                	li	s0,0
    80020278:	c789                	beqz	a5,80020282 <timecmp_test_1+0xd2>
    8002027a:	6480                	ld	s0,8(s1)
    8002027c:	1479                	addi	s0,s0,-2
    8002027e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    80020282:	4505                	li	a0,1
    80020284:	c85e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020288:	b85e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002028c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020290:	08200593          	li	a1,130
    80020294:	00015617          	auipc	a2,0x15
    80020298:	fa460613          	addi	a2,a2,-92 # 80035238 <__func__.0+0x8180>
    8002029c:	0000d517          	auipc	a0,0xd
    800202a0:	11450513          	addi	a0,a0,276 # 8002d3b0 <__func__.0+0x2f8>
    800202a4:	3b30a0ef          	jal	8002ae56 <printf>
    800202a8:	00034797          	auipc	a5,0x34
    800202ac:	d697c783          	lbu	a5,-663(a5) # 80054011 <excpt+0x1>
    800202b0:	0000d597          	auipc	a1,0xd
    800202b4:	0d858593          	addi	a1,a1,216 # 8002d388 <__func__.0+0x2d0>
    800202b8:	cf89                	beqz	a5,800202d2 <timecmp_test_1+0x122>
    800202ba:	6498                	ld	a4,8(s1)
    800202bc:	4789                	li	a5,2
    800202be:	0000d597          	auipc	a1,0xd
    800202c2:	0ba58593          	addi	a1,a1,186 # 8002d378 <__func__.0+0x2c0>
    800202c6:	00f70663          	beq	a4,a5,800202d2 <timecmp_test_1+0x122>
    800202ca:	0000d597          	auipc	a1,0xd
    800202ce:	0be58593          	addi	a1,a1,190 # 8002d388 <__func__.0+0x2d0>
    800202d2:	0000d517          	auipc	a0,0xd
    800202d6:	0f650513          	addi	a0,a0,246 # 8002d3c8 <__func__.0+0x310>
    800202da:	37d0a0ef          	jal	8002ae56 <printf>
    800202de:	00034797          	auipc	a5,0x34
    800202e2:	d337c783          	lbu	a5,-717(a5) # 80054011 <excpt+0x1>
    800202e6:	c789                	beqz	a5,800202f0 <timecmp_test_1+0x140>
    800202e8:	6498                	ld	a4,8(s1)
    800202ea:	4789                	li	a5,2
    800202ec:	00f70c63          	beq	a4,a5,80020304 <timecmp_test_1+0x154>
    800202f0:	0000d517          	auipc	a0,0xd
    800202f4:	0e050513          	addi	a0,a0,224 # 8002d3d0 <__func__.0+0x318>
    800202f8:	35f0a0ef          	jal	8002ae56 <printf>
    800202fc:	02900513          	li	a0,41
    80020300:	045090ef          	jal	80029b44 <putchar>
    80020304:	4529                	li	a0,10
    80020306:	03f090ef          	jal	80029b44 <putchar>
    8002030a:	c015                	beqz	s0,8002032e <timecmp_test_1+0x17e>
    8002030c:	00034417          	auipc	s0,0x34
    80020310:	d0544403          	lbu	s0,-763(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020314:	0000d597          	auipc	a1,0xd
    80020318:	07458593          	addi	a1,a1,116 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002031c:	cc11                	beqz	s0,80020338 <timecmp_test_1+0x188>
    8002031e:	6498                	ld	a4,8(s1)
    80020320:	4789                	li	a5,2
    TEST_END(); 
    80020322:	0000d597          	auipc	a1,0xd
    80020326:	05658593          	addi	a1,a1,86 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002032a:	00f70763          	beq	a4,a5,80020338 <timecmp_test_1+0x188>
    8002032e:	4401                	li	s0,0
    TEST_END(); 
    80020330:	0000d597          	auipc	a1,0xd
    80020334:	05858593          	addi	a1,a1,88 # 8002d388 <__func__.0+0x2d0>
    80020338:	0000d517          	auipc	a0,0xd
    8002033c:	0f850513          	addi	a0,a0,248 # 8002d430 <__func__.0+0x378>
    80020340:	3170a0ef          	jal	8002ae56 <printf>
    80020344:	4511                	li	a0,4
    80020346:	bc3e00ef          	jal	80000f08 <goto_priv>
    8002034a:	cdae10ef          	jal	80001824 <reset_state>
}
    8002034e:	60e2                	ld	ra,24(sp)
    80020350:	8522                	mv	a0,s0
    80020352:	6442                	ld	s0,16(sp)
    80020354:	64a2                	ld	s1,8(sp)
    80020356:	6105                	addi	sp,sp,32
    80020358:	8082                	ret

000000008002035a <timecmp_test_2>:

bool timecmp_test_2() {
    8002035a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002035c:	0000c597          	auipc	a1,0xc
    80020360:	6b458593          	addi	a1,a1,1716 # 8002ca10 <__func__.19>
    80020364:	0000d517          	auipc	a0,0xd
    80020368:	03450513          	addi	a0,a0,52 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_2() {
    8002036c:	ec06                	sd	ra,24(sp)
    8002036e:	e822                	sd	s0,16(sp)
    80020370:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020372:	2e50a0ef          	jal	8002ae56 <printf>
    80020376:	4529                	li	a0,10
    80020378:	7cc090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002037c:	57fd                	li	a5,-1
    8002037e:	17fe                	slli	a5,a5,0x3f
    80020380:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    80020384:	450d                	li	a0,3
    80020386:	b83e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002038a:	a83e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002038e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020392:	08200593          	li	a1,130
    80020396:	00015617          	auipc	a2,0x15
    8002039a:	f0a60613          	addi	a2,a2,-246 # 800352a0 <__func__.0+0x81e8>
    8002039e:	0000d517          	auipc	a0,0xd
    800203a2:	01250513          	addi	a0,a0,18 # 8002d3b0 <__func__.0+0x2f8>
    800203a6:	2b10a0ef          	jal	8002ae56 <printf>
    800203aa:	00034797          	auipc	a5,0x34
    800203ae:	c677c783          	lbu	a5,-921(a5) # 80054011 <excpt+0x1>
    800203b2:	00034497          	auipc	s1,0x34
    800203b6:	c5e48493          	addi	s1,s1,-930 # 80054010 <excpt>
    800203ba:	0000d597          	auipc	a1,0xd
    800203be:	fce58593          	addi	a1,a1,-50 # 8002d388 <__func__.0+0x2d0>
    800203c2:	cf89                	beqz	a5,800203dc <timecmp_test_2+0x82>
    800203c4:	6498                	ld	a4,8(s1)
    800203c6:	4789                	li	a5,2
    800203c8:	0000d597          	auipc	a1,0xd
    800203cc:	fb058593          	addi	a1,a1,-80 # 8002d378 <__func__.0+0x2c0>
    800203d0:	00f70663          	beq	a4,a5,800203dc <timecmp_test_2+0x82>
    800203d4:	0000d597          	auipc	a1,0xd
    800203d8:	fb458593          	addi	a1,a1,-76 # 8002d388 <__func__.0+0x2d0>
    800203dc:	0000d517          	auipc	a0,0xd
    800203e0:	fec50513          	addi	a0,a0,-20 # 8002d3c8 <__func__.0+0x310>
    800203e4:	2730a0ef          	jal	8002ae56 <printf>
    800203e8:	00034797          	auipc	a5,0x34
    800203ec:	c297c783          	lbu	a5,-983(a5) # 80054011 <excpt+0x1>
    800203f0:	c789                	beqz	a5,800203fa <timecmp_test_2+0xa0>
    800203f2:	6498                	ld	a4,8(s1)
    800203f4:	4789                	li	a5,2
    800203f6:	00f70c63          	beq	a4,a5,8002040e <timecmp_test_2+0xb4>
    800203fa:	0000d517          	auipc	a0,0xd
    800203fe:	fd650513          	addi	a0,a0,-42 # 8002d3d0 <__func__.0+0x318>
    80020402:	2550a0ef          	jal	8002ae56 <printf>
    80020406:	02900513          	li	a0,41
    8002040a:	73a090ef          	jal	80029b44 <putchar>
    8002040e:	4529                	li	a0,10
    80020410:	734090ef          	jal	80029b44 <putchar>
    80020414:	00034417          	auipc	s0,0x34
    80020418:	bfd44403          	lbu	s0,-1027(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002041c:	0000d597          	auipc	a1,0xd
    80020420:	f6c58593          	addi	a1,a1,-148 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020424:	cc11                	beqz	s0,80020440 <timecmp_test_2+0xe6>
    80020426:	6498                	ld	a4,8(s1)
    80020428:	4789                	li	a5,2
    TEST_END(); 
    8002042a:	0000d597          	auipc	a1,0xd
    8002042e:	f4e58593          	addi	a1,a1,-178 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020432:	00f70763          	beq	a4,a5,80020440 <timecmp_test_2+0xe6>
    80020436:	4401                	li	s0,0
    TEST_END(); 
    80020438:	0000d597          	auipc	a1,0xd
    8002043c:	f5058593          	addi	a1,a1,-176 # 8002d388 <__func__.0+0x2d0>
    80020440:	0000d517          	auipc	a0,0xd
    80020444:	ff050513          	addi	a0,a0,-16 # 8002d430 <__func__.0+0x378>
    80020448:	20f0a0ef          	jal	8002ae56 <printf>
    8002044c:	4511                	li	a0,4
    8002044e:	abbe00ef          	jal	80000f08 <goto_priv>
    80020452:	bd2e10ef          	jal	80001824 <reset_state>
}
    80020456:	60e2                	ld	ra,24(sp)
    80020458:	8522                	mv	a0,s0
    8002045a:	6442                	ld	s0,16(sp)
    8002045c:	64a2                	ld	s1,8(sp)
    8002045e:	6105                	addi	sp,sp,32
    80020460:	8082                	ret

0000000080020462 <timecmp_test_3>:

bool timecmp_test_3() {
    80020462:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020464:	0000c597          	auipc	a1,0xc
    80020468:	5bc58593          	addi	a1,a1,1468 # 8002ca20 <__func__.18>
    8002046c:	0000d517          	auipc	a0,0xd
    80020470:	f2c50513          	addi	a0,a0,-212 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_3() {
    80020474:	ec06                	sd	ra,24(sp)
    80020476:	e822                	sd	s0,16(sp)
    80020478:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002047a:	1dd0a0ef          	jal	8002ae56 <printf>
    8002047e:	4529                	li	a0,10
    80020480:	6c4090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020484:	57fd                	li	a5,-1
    80020486:	17fe                	slli	a5,a5,0x3f
    80020488:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    8002048c:	4509                	li	a0,2
    8002048e:	a7be00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020492:	97be00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020496:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002049a:	08200593          	li	a1,130
    8002049e:	00015617          	auipc	a2,0x15
    800204a2:	e5a60613          	addi	a2,a2,-422 # 800352f8 <__func__.0+0x8240>
    800204a6:	0000d517          	auipc	a0,0xd
    800204aa:	f0a50513          	addi	a0,a0,-246 # 8002d3b0 <__func__.0+0x2f8>
    800204ae:	1a90a0ef          	jal	8002ae56 <printf>
    800204b2:	00034797          	auipc	a5,0x34
    800204b6:	b5f7c783          	lbu	a5,-1185(a5) # 80054011 <excpt+0x1>
    800204ba:	00034497          	auipc	s1,0x34
    800204be:	b5648493          	addi	s1,s1,-1194 # 80054010 <excpt>
    800204c2:	0000d597          	auipc	a1,0xd
    800204c6:	ec658593          	addi	a1,a1,-314 # 8002d388 <__func__.0+0x2d0>
    800204ca:	cf89                	beqz	a5,800204e4 <timecmp_test_3+0x82>
    800204cc:	6498                	ld	a4,8(s1)
    800204ce:	4789                	li	a5,2
    800204d0:	0000d597          	auipc	a1,0xd
    800204d4:	ea858593          	addi	a1,a1,-344 # 8002d378 <__func__.0+0x2c0>
    800204d8:	00f70663          	beq	a4,a5,800204e4 <timecmp_test_3+0x82>
    800204dc:	0000d597          	auipc	a1,0xd
    800204e0:	eac58593          	addi	a1,a1,-340 # 8002d388 <__func__.0+0x2d0>
    800204e4:	0000d517          	auipc	a0,0xd
    800204e8:	ee450513          	addi	a0,a0,-284 # 8002d3c8 <__func__.0+0x310>
    800204ec:	16b0a0ef          	jal	8002ae56 <printf>
    800204f0:	00034797          	auipc	a5,0x34
    800204f4:	b217c783          	lbu	a5,-1247(a5) # 80054011 <excpt+0x1>
    800204f8:	c789                	beqz	a5,80020502 <timecmp_test_3+0xa0>
    800204fa:	6498                	ld	a4,8(s1)
    800204fc:	4789                	li	a5,2
    800204fe:	00f70c63          	beq	a4,a5,80020516 <timecmp_test_3+0xb4>
    80020502:	0000d517          	auipc	a0,0xd
    80020506:	ece50513          	addi	a0,a0,-306 # 8002d3d0 <__func__.0+0x318>
    8002050a:	14d0a0ef          	jal	8002ae56 <printf>
    8002050e:	02900513          	li	a0,41
    80020512:	632090ef          	jal	80029b44 <putchar>
    80020516:	4529                	li	a0,10
    80020518:	62c090ef          	jal	80029b44 <putchar>
    8002051c:	00034417          	auipc	s0,0x34
    80020520:	af544403          	lbu	s0,-1291(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020524:	0000d597          	auipc	a1,0xd
    80020528:	e6458593          	addi	a1,a1,-412 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002052c:	cc11                	beqz	s0,80020548 <timecmp_test_3+0xe6>
    8002052e:	6498                	ld	a4,8(s1)
    80020530:	4789                	li	a5,2
    TEST_END(); 
    80020532:	0000d597          	auipc	a1,0xd
    80020536:	e4658593          	addi	a1,a1,-442 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002053a:	00f70763          	beq	a4,a5,80020548 <timecmp_test_3+0xe6>
    8002053e:	4401                	li	s0,0
    TEST_END(); 
    80020540:	0000d597          	auipc	a1,0xd
    80020544:	e4858593          	addi	a1,a1,-440 # 8002d388 <__func__.0+0x2d0>
    80020548:	0000d517          	auipc	a0,0xd
    8002054c:	ee850513          	addi	a0,a0,-280 # 8002d430 <__func__.0+0x378>
    80020550:	1070a0ef          	jal	8002ae56 <printf>
    80020554:	4511                	li	a0,4
    80020556:	9b3e00ef          	jal	80000f08 <goto_priv>
    8002055a:	acae10ef          	jal	80001824 <reset_state>
}
    8002055e:	60e2                	ld	ra,24(sp)
    80020560:	8522                	mv	a0,s0
    80020562:	6442                	ld	s0,16(sp)
    80020564:	64a2                	ld	s1,8(sp)
    80020566:	6105                	addi	sp,sp,32
    80020568:	8082                	ret

000000008002056a <timecmp_test_4>:

bool timecmp_test_4() {
    8002056a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002056c:	0000c597          	auipc	a1,0xc
    80020570:	4c458593          	addi	a1,a1,1220 # 8002ca30 <__func__.17>
    80020574:	0000d517          	auipc	a0,0xd
    80020578:	e2450513          	addi	a0,a0,-476 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_4() {
    8002057c:	ec06                	sd	ra,24(sp)
    8002057e:	e822                	sd	s0,16(sp)
    80020580:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020582:	0d50a0ef          	jal	8002ae56 <printf>
    80020586:	4529                	li	a0,10
    80020588:	5bc090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002058c:	57fd                	li	a5,-1
    8002058e:	17fe                	slli	a5,a5,0x3f
    80020590:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    80020594:	4505                	li	a0,1
    80020596:	973e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002059a:	873e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002059e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800205a2:	08200593          	li	a1,130
    800205a6:	00015617          	auipc	a2,0x15
    800205aa:	daa60613          	addi	a2,a2,-598 # 80035350 <__func__.0+0x8298>
    800205ae:	0000d517          	auipc	a0,0xd
    800205b2:	e0250513          	addi	a0,a0,-510 # 8002d3b0 <__func__.0+0x2f8>
    800205b6:	0a10a0ef          	jal	8002ae56 <printf>
    800205ba:	00034797          	auipc	a5,0x34
    800205be:	a577c783          	lbu	a5,-1449(a5) # 80054011 <excpt+0x1>
    800205c2:	00034497          	auipc	s1,0x34
    800205c6:	a4e48493          	addi	s1,s1,-1458 # 80054010 <excpt>
    800205ca:	0000d597          	auipc	a1,0xd
    800205ce:	dbe58593          	addi	a1,a1,-578 # 8002d388 <__func__.0+0x2d0>
    800205d2:	cf89                	beqz	a5,800205ec <timecmp_test_4+0x82>
    800205d4:	6498                	ld	a4,8(s1)
    800205d6:	4789                	li	a5,2
    800205d8:	0000d597          	auipc	a1,0xd
    800205dc:	da058593          	addi	a1,a1,-608 # 8002d378 <__func__.0+0x2c0>
    800205e0:	00f70663          	beq	a4,a5,800205ec <timecmp_test_4+0x82>
    800205e4:	0000d597          	auipc	a1,0xd
    800205e8:	da458593          	addi	a1,a1,-604 # 8002d388 <__func__.0+0x2d0>
    800205ec:	0000d517          	auipc	a0,0xd
    800205f0:	ddc50513          	addi	a0,a0,-548 # 8002d3c8 <__func__.0+0x310>
    800205f4:	0630a0ef          	jal	8002ae56 <printf>
    800205f8:	00034797          	auipc	a5,0x34
    800205fc:	a197c783          	lbu	a5,-1511(a5) # 80054011 <excpt+0x1>
    80020600:	c789                	beqz	a5,8002060a <timecmp_test_4+0xa0>
    80020602:	6498                	ld	a4,8(s1)
    80020604:	4789                	li	a5,2
    80020606:	00f70c63          	beq	a4,a5,8002061e <timecmp_test_4+0xb4>
    8002060a:	0000d517          	auipc	a0,0xd
    8002060e:	dc650513          	addi	a0,a0,-570 # 8002d3d0 <__func__.0+0x318>
    80020612:	0450a0ef          	jal	8002ae56 <printf>
    80020616:	02900513          	li	a0,41
    8002061a:	52a090ef          	jal	80029b44 <putchar>
    8002061e:	4529                	li	a0,10
    80020620:	524090ef          	jal	80029b44 <putchar>
    80020624:	00034417          	auipc	s0,0x34
    80020628:	9ed44403          	lbu	s0,-1555(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002062c:	0000d597          	auipc	a1,0xd
    80020630:	d5c58593          	addi	a1,a1,-676 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020634:	cc11                	beqz	s0,80020650 <timecmp_test_4+0xe6>
    80020636:	6498                	ld	a4,8(s1)
    80020638:	4789                	li	a5,2
    TEST_END(); 
    8002063a:	0000d597          	auipc	a1,0xd
    8002063e:	d3e58593          	addi	a1,a1,-706 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020642:	00f70763          	beq	a4,a5,80020650 <timecmp_test_4+0xe6>
    80020646:	4401                	li	s0,0
    TEST_END(); 
    80020648:	0000d597          	auipc	a1,0xd
    8002064c:	d4058593          	addi	a1,a1,-704 # 8002d388 <__func__.0+0x2d0>
    80020650:	0000d517          	auipc	a0,0xd
    80020654:	de050513          	addi	a0,a0,-544 # 8002d430 <__func__.0+0x378>
    80020658:	7fe0a0ef          	jal	8002ae56 <printf>
    8002065c:	4511                	li	a0,4
    8002065e:	8abe00ef          	jal	80000f08 <goto_priv>
    80020662:	9c2e10ef          	jal	80001824 <reset_state>
}
    80020666:	60e2                	ld	ra,24(sp)
    80020668:	8522                	mv	a0,s0
    8002066a:	6442                	ld	s0,16(sp)
    8002066c:	64a2                	ld	s1,8(sp)
    8002066e:	6105                	addi	sp,sp,32
    80020670:	8082                	ret

0000000080020672 <timecmp_test_5>:

bool timecmp_test_5() {
    80020672:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020674:	0000c597          	auipc	a1,0xc
    80020678:	3cc58593          	addi	a1,a1,972 # 8002ca40 <__func__.16>
    8002067c:	0000d517          	auipc	a0,0xd
    80020680:	d1c50513          	addi	a0,a0,-740 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_5() {
    80020684:	ec06                	sd	ra,24(sp)
    80020686:	e822                	sd	s0,16(sp)
    80020688:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002068a:	7cc0a0ef          	jal	8002ae56 <printf>
    8002068e:	4529                	li	a0,10
    80020690:	4b4090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020694:	57fd                	li	a5,-1
    80020696:	17fe                	slli	a5,a5,0x3f
    80020698:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    8002069c:	4501                	li	a0,0
    8002069e:	86be00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800206a2:	f6ae00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800206a6:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800206aa:	08200593          	li	a1,130
    800206ae:	00015617          	auipc	a2,0x15
    800206b2:	cfa60613          	addi	a2,a2,-774 # 800353a8 <__func__.0+0x82f0>
    800206b6:	0000d517          	auipc	a0,0xd
    800206ba:	cfa50513          	addi	a0,a0,-774 # 8002d3b0 <__func__.0+0x2f8>
    800206be:	7980a0ef          	jal	8002ae56 <printf>
    800206c2:	00034797          	auipc	a5,0x34
    800206c6:	94f7c783          	lbu	a5,-1713(a5) # 80054011 <excpt+0x1>
    800206ca:	00034497          	auipc	s1,0x34
    800206ce:	94648493          	addi	s1,s1,-1722 # 80054010 <excpt>
    800206d2:	0000d597          	auipc	a1,0xd
    800206d6:	cb658593          	addi	a1,a1,-842 # 8002d388 <__func__.0+0x2d0>
    800206da:	cf89                	beqz	a5,800206f4 <timecmp_test_5+0x82>
    800206dc:	6498                	ld	a4,8(s1)
    800206de:	4789                	li	a5,2
    800206e0:	0000d597          	auipc	a1,0xd
    800206e4:	c9858593          	addi	a1,a1,-872 # 8002d378 <__func__.0+0x2c0>
    800206e8:	00f70663          	beq	a4,a5,800206f4 <timecmp_test_5+0x82>
    800206ec:	0000d597          	auipc	a1,0xd
    800206f0:	c9c58593          	addi	a1,a1,-868 # 8002d388 <__func__.0+0x2d0>
    800206f4:	0000d517          	auipc	a0,0xd
    800206f8:	cd450513          	addi	a0,a0,-812 # 8002d3c8 <__func__.0+0x310>
    800206fc:	75a0a0ef          	jal	8002ae56 <printf>
    80020700:	00034797          	auipc	a5,0x34
    80020704:	9117c783          	lbu	a5,-1775(a5) # 80054011 <excpt+0x1>
    80020708:	c789                	beqz	a5,80020712 <timecmp_test_5+0xa0>
    8002070a:	6498                	ld	a4,8(s1)
    8002070c:	4789                	li	a5,2
    8002070e:	00f70c63          	beq	a4,a5,80020726 <timecmp_test_5+0xb4>
    80020712:	0000d517          	auipc	a0,0xd
    80020716:	cbe50513          	addi	a0,a0,-834 # 8002d3d0 <__func__.0+0x318>
    8002071a:	73c0a0ef          	jal	8002ae56 <printf>
    8002071e:	02900513          	li	a0,41
    80020722:	422090ef          	jal	80029b44 <putchar>
    80020726:	4529                	li	a0,10
    80020728:	41c090ef          	jal	80029b44 <putchar>
    8002072c:	00034417          	auipc	s0,0x34
    80020730:	8e544403          	lbu	s0,-1819(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020734:	0000d597          	auipc	a1,0xd
    80020738:	c5458593          	addi	a1,a1,-940 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002073c:	cc11                	beqz	s0,80020758 <timecmp_test_5+0xe6>
    8002073e:	6498                	ld	a4,8(s1)
    80020740:	4789                	li	a5,2
    TEST_END(); 
    80020742:	0000d597          	auipc	a1,0xd
    80020746:	c3658593          	addi	a1,a1,-970 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002074a:	00f70763          	beq	a4,a5,80020758 <timecmp_test_5+0xe6>
    8002074e:	4401                	li	s0,0
    TEST_END(); 
    80020750:	0000d597          	auipc	a1,0xd
    80020754:	c3858593          	addi	a1,a1,-968 # 8002d388 <__func__.0+0x2d0>
    80020758:	0000d517          	auipc	a0,0xd
    8002075c:	cd850513          	addi	a0,a0,-808 # 8002d430 <__func__.0+0x378>
    80020760:	6f60a0ef          	jal	8002ae56 <printf>
    80020764:	4511                	li	a0,4
    80020766:	fa2e00ef          	jal	80000f08 <goto_priv>
    8002076a:	8bae10ef          	jal	80001824 <reset_state>
}
    8002076e:	60e2                	ld	ra,24(sp)
    80020770:	8522                	mv	a0,s0
    80020772:	6442                	ld	s0,16(sp)
    80020774:	64a2                	ld	s1,8(sp)
    80020776:	6105                	addi	sp,sp,32
    80020778:	8082                	ret

000000008002077a <timecmp_test_6>:

bool timecmp_test_6() {
    8002077a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002077c:	0000c597          	auipc	a1,0xc
    80020780:	2d458593          	addi	a1,a1,724 # 8002ca50 <__func__.15>
    80020784:	0000d517          	auipc	a0,0xd
    80020788:	c1450513          	addi	a0,a0,-1004 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_6() {
    8002078c:	ec06                	sd	ra,24(sp)
    8002078e:	e822                	sd	s0,16(sp)
    80020790:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020792:	6c40a0ef          	jal	8002ae56 <printf>
    80020796:	4529                	li	a0,10
    80020798:	3ac090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002079c:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800207a0:	450d                	li	a0,3
    800207a2:	f66e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800207a6:	e66e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800207aa:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800207ae:	08200593          	li	a1,130
    800207b2:	00015617          	auipc	a2,0x15
    800207b6:	c4e60613          	addi	a2,a2,-946 # 80035400 <__func__.0+0x8348>
    800207ba:	0000d517          	auipc	a0,0xd
    800207be:	bf650513          	addi	a0,a0,-1034 # 8002d3b0 <__func__.0+0x2f8>
    800207c2:	6940a0ef          	jal	8002ae56 <printf>
    800207c6:	00034797          	auipc	a5,0x34
    800207ca:	84b7c783          	lbu	a5,-1973(a5) # 80054011 <excpt+0x1>
    800207ce:	00034497          	auipc	s1,0x34
    800207d2:	84248493          	addi	s1,s1,-1982 # 80054010 <excpt>
    800207d6:	0000d597          	auipc	a1,0xd
    800207da:	bb258593          	addi	a1,a1,-1102 # 8002d388 <__func__.0+0x2d0>
    800207de:	cf89                	beqz	a5,800207f8 <timecmp_test_6+0x7e>
    800207e0:	6498                	ld	a4,8(s1)
    800207e2:	4789                	li	a5,2
    800207e4:	0000d597          	auipc	a1,0xd
    800207e8:	b9458593          	addi	a1,a1,-1132 # 8002d378 <__func__.0+0x2c0>
    800207ec:	00f70663          	beq	a4,a5,800207f8 <timecmp_test_6+0x7e>
    800207f0:	0000d597          	auipc	a1,0xd
    800207f4:	b9858593          	addi	a1,a1,-1128 # 8002d388 <__func__.0+0x2d0>
    800207f8:	0000d517          	auipc	a0,0xd
    800207fc:	bd050513          	addi	a0,a0,-1072 # 8002d3c8 <__func__.0+0x310>
    80020800:	6560a0ef          	jal	8002ae56 <printf>
    80020804:	00034797          	auipc	a5,0x34
    80020808:	80d7c783          	lbu	a5,-2035(a5) # 80054011 <excpt+0x1>
    8002080c:	c789                	beqz	a5,80020816 <timecmp_test_6+0x9c>
    8002080e:	6498                	ld	a4,8(s1)
    80020810:	4789                	li	a5,2
    80020812:	00f70c63          	beq	a4,a5,8002082a <timecmp_test_6+0xb0>
    80020816:	0000d517          	auipc	a0,0xd
    8002081a:	bba50513          	addi	a0,a0,-1094 # 8002d3d0 <__func__.0+0x318>
    8002081e:	6380a0ef          	jal	8002ae56 <printf>
    80020822:	02900513          	li	a0,41
    80020826:	31e090ef          	jal	80029b44 <putchar>
    8002082a:	4529                	li	a0,10
    8002082c:	318090ef          	jal	80029b44 <putchar>
    80020830:	00033417          	auipc	s0,0x33
    80020834:	7e144403          	lbu	s0,2017(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020838:	0000d597          	auipc	a1,0xd
    8002083c:	b5058593          	addi	a1,a1,-1200 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020840:	cc11                	beqz	s0,8002085c <timecmp_test_6+0xe2>
    80020842:	6498                	ld	a4,8(s1)
    80020844:	4789                	li	a5,2
    TEST_END(); 
    80020846:	0000d597          	auipc	a1,0xd
    8002084a:	b3258593          	addi	a1,a1,-1230 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002084e:	00f70763          	beq	a4,a5,8002085c <timecmp_test_6+0xe2>
    80020852:	4401                	li	s0,0
    TEST_END(); 
    80020854:	0000d597          	auipc	a1,0xd
    80020858:	b3458593          	addi	a1,a1,-1228 # 8002d388 <__func__.0+0x2d0>
    8002085c:	0000d517          	auipc	a0,0xd
    80020860:	bd450513          	addi	a0,a0,-1068 # 8002d430 <__func__.0+0x378>
    80020864:	5f20a0ef          	jal	8002ae56 <printf>
    80020868:	4511                	li	a0,4
    8002086a:	e9ee00ef          	jal	80000f08 <goto_priv>
    8002086e:	fb7e00ef          	jal	80001824 <reset_state>
}
    80020872:	60e2                	ld	ra,24(sp)
    80020874:	8522                	mv	a0,s0
    80020876:	6442                	ld	s0,16(sp)
    80020878:	64a2                	ld	s1,8(sp)
    8002087a:	6105                	addi	sp,sp,32
    8002087c:	8082                	ret

000000008002087e <timecmp_test_7>:

bool timecmp_test_7() {
    8002087e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020880:	0000c597          	auipc	a1,0xc
    80020884:	1e058593          	addi	a1,a1,480 # 8002ca60 <__func__.14>
    80020888:	0000d517          	auipc	a0,0xd
    8002088c:	b1050513          	addi	a0,a0,-1264 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_7() {
    80020890:	ec06                	sd	ra,24(sp)
    80020892:	e822                	sd	s0,16(sp)
    80020894:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020896:	5c00a0ef          	jal	8002ae56 <printf>
    8002089a:	4529                	li	a0,10
    8002089c:	2a8090ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800208a0:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    800208a4:	4509                	li	a0,2
    800208a6:	e62e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208aa:	d62e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800208ae:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800208b2:	08200593          	li	a1,130
    800208b6:	00015617          	auipc	a2,0x15
    800208ba:	ba260613          	addi	a2,a2,-1118 # 80035458 <__func__.0+0x83a0>
    800208be:	0000d517          	auipc	a0,0xd
    800208c2:	af250513          	addi	a0,a0,-1294 # 8002d3b0 <__func__.0+0x2f8>
    800208c6:	5900a0ef          	jal	8002ae56 <printf>
    800208ca:	00033797          	auipc	a5,0x33
    800208ce:	7477c783          	lbu	a5,1863(a5) # 80054011 <excpt+0x1>
    800208d2:	00033497          	auipc	s1,0x33
    800208d6:	73e48493          	addi	s1,s1,1854 # 80054010 <excpt>
    800208da:	0000d597          	auipc	a1,0xd
    800208de:	aae58593          	addi	a1,a1,-1362 # 8002d388 <__func__.0+0x2d0>
    800208e2:	cf89                	beqz	a5,800208fc <timecmp_test_7+0x7e>
    800208e4:	6498                	ld	a4,8(s1)
    800208e6:	4789                	li	a5,2
    800208e8:	0000d597          	auipc	a1,0xd
    800208ec:	a9058593          	addi	a1,a1,-1392 # 8002d378 <__func__.0+0x2c0>
    800208f0:	00f70663          	beq	a4,a5,800208fc <timecmp_test_7+0x7e>
    800208f4:	0000d597          	auipc	a1,0xd
    800208f8:	a9458593          	addi	a1,a1,-1388 # 8002d388 <__func__.0+0x2d0>
    800208fc:	0000d517          	auipc	a0,0xd
    80020900:	acc50513          	addi	a0,a0,-1332 # 8002d3c8 <__func__.0+0x310>
    80020904:	5520a0ef          	jal	8002ae56 <printf>
    80020908:	00033797          	auipc	a5,0x33
    8002090c:	7097c783          	lbu	a5,1801(a5) # 80054011 <excpt+0x1>
    80020910:	c789                	beqz	a5,8002091a <timecmp_test_7+0x9c>
    80020912:	6498                	ld	a4,8(s1)
    80020914:	4789                	li	a5,2
    80020916:	00f70c63          	beq	a4,a5,8002092e <timecmp_test_7+0xb0>
    8002091a:	0000d517          	auipc	a0,0xd
    8002091e:	ab650513          	addi	a0,a0,-1354 # 8002d3d0 <__func__.0+0x318>
    80020922:	5340a0ef          	jal	8002ae56 <printf>
    80020926:	02900513          	li	a0,41
    8002092a:	21a090ef          	jal	80029b44 <putchar>
    8002092e:	4529                	li	a0,10
    80020930:	214090ef          	jal	80029b44 <putchar>
    80020934:	00033417          	auipc	s0,0x33
    80020938:	6dd44403          	lbu	s0,1757(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002093c:	0000d597          	auipc	a1,0xd
    80020940:	a4c58593          	addi	a1,a1,-1460 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020944:	cc11                	beqz	s0,80020960 <timecmp_test_7+0xe2>
    80020946:	6498                	ld	a4,8(s1)
    80020948:	4789                	li	a5,2
    TEST_END(); 
    8002094a:	0000d597          	auipc	a1,0xd
    8002094e:	a2e58593          	addi	a1,a1,-1490 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020952:	00f70763          	beq	a4,a5,80020960 <timecmp_test_7+0xe2>
    80020956:	4401                	li	s0,0
    TEST_END(); 
    80020958:	0000d597          	auipc	a1,0xd
    8002095c:	a3058593          	addi	a1,a1,-1488 # 8002d388 <__func__.0+0x2d0>
    80020960:	0000d517          	auipc	a0,0xd
    80020964:	ad050513          	addi	a0,a0,-1328 # 8002d430 <__func__.0+0x378>
    80020968:	4ee0a0ef          	jal	8002ae56 <printf>
    8002096c:	4511                	li	a0,4
    8002096e:	d9ae00ef          	jal	80000f08 <goto_priv>
    80020972:	eb3e00ef          	jal	80001824 <reset_state>
}
    80020976:	60e2                	ld	ra,24(sp)
    80020978:	8522                	mv	a0,s0
    8002097a:	6442                	ld	s0,16(sp)
    8002097c:	64a2                	ld	s1,8(sp)
    8002097e:	6105                	addi	sp,sp,32
    80020980:	8082                	ret

0000000080020982 <timecmp_test_8>:

bool timecmp_test_8() {
    80020982:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020984:	0000c597          	auipc	a1,0xc
    80020988:	0ec58593          	addi	a1,a1,236 # 8002ca70 <__func__.13>
    8002098c:	0000d517          	auipc	a0,0xd
    80020990:	a0c50513          	addi	a0,a0,-1524 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_8() {
    80020994:	ec06                	sd	ra,24(sp)
    80020996:	e822                	sd	s0,16(sp)
    80020998:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002099a:	4bc0a0ef          	jal	8002ae56 <printf>
    8002099e:	4529                	li	a0,10
    800209a0:	1a4090ef          	jal	80029b44 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800209a4:	57fd                	li	a5,-1
    800209a6:	17fe                	slli	a5,a5,0x3f
    800209a8:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    800209ac:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800209b0:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800209b4:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    800209b8:	4509                	li	a0,2
    800209ba:	d4ee00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800209be:	c4ee00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800209c2:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    800209c6:	08200593          	li	a1,130
    800209ca:	00015617          	auipc	a2,0x15
    800209ce:	ae660613          	addi	a2,a2,-1306 # 800354b0 <__func__.0+0x83f8>
    800209d2:	0000d517          	auipc	a0,0xd
    800209d6:	9de50513          	addi	a0,a0,-1570 # 8002d3b0 <__func__.0+0x2f8>
    800209da:	47c0a0ef          	jal	8002ae56 <printf>
    800209de:	00033797          	auipc	a5,0x33
    800209e2:	6337c783          	lbu	a5,1587(a5) # 80054011 <excpt+0x1>
    800209e6:	00033497          	auipc	s1,0x33
    800209ea:	62a48493          	addi	s1,s1,1578 # 80054010 <excpt>
    800209ee:	0000d597          	auipc	a1,0xd
    800209f2:	99a58593          	addi	a1,a1,-1638 # 8002d388 <__func__.0+0x2d0>
    800209f6:	cf89                	beqz	a5,80020a10 <timecmp_test_8+0x8e>
    800209f8:	6498                	ld	a4,8(s1)
    800209fa:	47d9                	li	a5,22
    800209fc:	0000d597          	auipc	a1,0xd
    80020a00:	97c58593          	addi	a1,a1,-1668 # 8002d378 <__func__.0+0x2c0>
    80020a04:	00f70663          	beq	a4,a5,80020a10 <timecmp_test_8+0x8e>
    80020a08:	0000d597          	auipc	a1,0xd
    80020a0c:	98058593          	addi	a1,a1,-1664 # 8002d388 <__func__.0+0x2d0>
    80020a10:	0000d517          	auipc	a0,0xd
    80020a14:	9b850513          	addi	a0,a0,-1608 # 8002d3c8 <__func__.0+0x310>
    80020a18:	43e0a0ef          	jal	8002ae56 <printf>
    80020a1c:	00033797          	auipc	a5,0x33
    80020a20:	5f57c783          	lbu	a5,1525(a5) # 80054011 <excpt+0x1>
    80020a24:	c789                	beqz	a5,80020a2e <timecmp_test_8+0xac>
    80020a26:	6498                	ld	a4,8(s1)
    80020a28:	47d9                	li	a5,22
    80020a2a:	00f70c63          	beq	a4,a5,80020a42 <timecmp_test_8+0xc0>
    80020a2e:	0000d517          	auipc	a0,0xd
    80020a32:	9a250513          	addi	a0,a0,-1630 # 8002d3d0 <__func__.0+0x318>
    80020a36:	4200a0ef          	jal	8002ae56 <printf>
    80020a3a:	02900513          	li	a0,41
    80020a3e:	106090ef          	jal	80029b44 <putchar>
    80020a42:	4529                	li	a0,10
    80020a44:	100090ef          	jal	80029b44 <putchar>
    80020a48:	00033417          	auipc	s0,0x33
    80020a4c:	5c944403          	lbu	s0,1481(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020a50:	0000d597          	auipc	a1,0xd
    80020a54:	93858593          	addi	a1,a1,-1736 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020a58:	cc11                	beqz	s0,80020a74 <timecmp_test_8+0xf2>
    80020a5a:	6498                	ld	a4,8(s1)
    80020a5c:	47d9                	li	a5,22
    TEST_END(); 
    80020a5e:	0000d597          	auipc	a1,0xd
    80020a62:	91a58593          	addi	a1,a1,-1766 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020a66:	00f70763          	beq	a4,a5,80020a74 <timecmp_test_8+0xf2>
    80020a6a:	4401                	li	s0,0
    TEST_END(); 
    80020a6c:	0000d597          	auipc	a1,0xd
    80020a70:	91c58593          	addi	a1,a1,-1764 # 8002d388 <__func__.0+0x2d0>
    80020a74:	0000d517          	auipc	a0,0xd
    80020a78:	9bc50513          	addi	a0,a0,-1604 # 8002d430 <__func__.0+0x378>
    80020a7c:	3da0a0ef          	jal	8002ae56 <printf>
    80020a80:	4511                	li	a0,4
    80020a82:	c86e00ef          	jal	80000f08 <goto_priv>
    80020a86:	d9fe00ef          	jal	80001824 <reset_state>
}
    80020a8a:	60e2                	ld	ra,24(sp)
    80020a8c:	8522                	mv	a0,s0
    80020a8e:	6442                	ld	s0,16(sp)
    80020a90:	64a2                	ld	s1,8(sp)
    80020a92:	6105                	addi	sp,sp,32
    80020a94:	8082                	ret

0000000080020a96 <timecmp_test_9>:

bool timecmp_test_9() {
    80020a96:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020a98:	0000c597          	auipc	a1,0xc
    80020a9c:	fe858593          	addi	a1,a1,-24 # 8002ca80 <__func__.12>
    80020aa0:	0000d517          	auipc	a0,0xd
    80020aa4:	8f850513          	addi	a0,a0,-1800 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_9() {
    80020aa8:	ec06                	sd	ra,24(sp)
    80020aaa:	e822                	sd	s0,16(sp)
    80020aac:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020aae:	3a80a0ef          	jal	8002ae56 <printf>
    80020ab2:	4529                	li	a0,10
    80020ab4:	090090ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020ab8:	57fd                	li	a5,-1
    80020aba:	17fe                	slli	a5,a5,0x3f
    80020abc:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020ac0:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020ac4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020ac8:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020acc:	4509                	li	a0,2
    80020ace:	c3ae00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ad2:	b3ae00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020ad6:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020ada:	08200593          	li	a1,130
    80020ade:	00015617          	auipc	a2,0x15
    80020ae2:	a5260613          	addi	a2,a2,-1454 # 80035530 <__func__.0+0x8478>
    80020ae6:	0000d517          	auipc	a0,0xd
    80020aea:	8ca50513          	addi	a0,a0,-1846 # 8002d3b0 <__func__.0+0x2f8>
    80020aee:	3680a0ef          	jal	8002ae56 <printf>
    80020af2:	00033797          	auipc	a5,0x33
    80020af6:	51f7c783          	lbu	a5,1311(a5) # 80054011 <excpt+0x1>
    80020afa:	00033497          	auipc	s1,0x33
    80020afe:	51648493          	addi	s1,s1,1302 # 80054010 <excpt>
    80020b02:	0000d597          	auipc	a1,0xd
    80020b06:	88658593          	addi	a1,a1,-1914 # 8002d388 <__func__.0+0x2d0>
    80020b0a:	cf89                	beqz	a5,80020b24 <timecmp_test_9+0x8e>
    80020b0c:	6498                	ld	a4,8(s1)
    80020b0e:	47d9                	li	a5,22
    80020b10:	0000d597          	auipc	a1,0xd
    80020b14:	86858593          	addi	a1,a1,-1944 # 8002d378 <__func__.0+0x2c0>
    80020b18:	00f70663          	beq	a4,a5,80020b24 <timecmp_test_9+0x8e>
    80020b1c:	0000d597          	auipc	a1,0xd
    80020b20:	86c58593          	addi	a1,a1,-1940 # 8002d388 <__func__.0+0x2d0>
    80020b24:	0000d517          	auipc	a0,0xd
    80020b28:	8a450513          	addi	a0,a0,-1884 # 8002d3c8 <__func__.0+0x310>
    80020b2c:	32a0a0ef          	jal	8002ae56 <printf>
    80020b30:	00033797          	auipc	a5,0x33
    80020b34:	4e17c783          	lbu	a5,1249(a5) # 80054011 <excpt+0x1>
    80020b38:	c789                	beqz	a5,80020b42 <timecmp_test_9+0xac>
    80020b3a:	6498                	ld	a4,8(s1)
    80020b3c:	47d9                	li	a5,22
    80020b3e:	00f70c63          	beq	a4,a5,80020b56 <timecmp_test_9+0xc0>
    80020b42:	0000d517          	auipc	a0,0xd
    80020b46:	88e50513          	addi	a0,a0,-1906 # 8002d3d0 <__func__.0+0x318>
    80020b4a:	30c0a0ef          	jal	8002ae56 <printf>
    80020b4e:	02900513          	li	a0,41
    80020b52:	7f3080ef          	jal	80029b44 <putchar>
    80020b56:	4529                	li	a0,10
    80020b58:	7ed080ef          	jal	80029b44 <putchar>
    80020b5c:	00033417          	auipc	s0,0x33
    80020b60:	4b544403          	lbu	s0,1205(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020b64:	0000d597          	auipc	a1,0xd
    80020b68:	82458593          	addi	a1,a1,-2012 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020b6c:	cc11                	beqz	s0,80020b88 <timecmp_test_9+0xf2>
    80020b6e:	6498                	ld	a4,8(s1)
    80020b70:	47d9                	li	a5,22
    TEST_END(); 
    80020b72:	0000d597          	auipc	a1,0xd
    80020b76:	80658593          	addi	a1,a1,-2042 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020b7a:	00f70763          	beq	a4,a5,80020b88 <timecmp_test_9+0xf2>
    80020b7e:	4401                	li	s0,0
    TEST_END(); 
    80020b80:	0000d597          	auipc	a1,0xd
    80020b84:	80858593          	addi	a1,a1,-2040 # 8002d388 <__func__.0+0x2d0>
    80020b88:	0000d517          	auipc	a0,0xd
    80020b8c:	8a850513          	addi	a0,a0,-1880 # 8002d430 <__func__.0+0x378>
    80020b90:	2c60a0ef          	jal	8002ae56 <printf>
    80020b94:	4511                	li	a0,4
    80020b96:	b72e00ef          	jal	80000f08 <goto_priv>
    80020b9a:	c8be00ef          	jal	80001824 <reset_state>
}
    80020b9e:	60e2                	ld	ra,24(sp)
    80020ba0:	8522                	mv	a0,s0
    80020ba2:	6442                	ld	s0,16(sp)
    80020ba4:	64a2                	ld	s1,8(sp)
    80020ba6:	6105                	addi	sp,sp,32
    80020ba8:	8082                	ret

0000000080020baa <timecmp_test_10>:

bool timecmp_test_10() {
    80020baa:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020bac:	0000c597          	auipc	a1,0xc
    80020bb0:	ee458593          	addi	a1,a1,-284 # 8002ca90 <__func__.11>
    80020bb4:	0000c517          	auipc	a0,0xc
    80020bb8:	7e450513          	addi	a0,a0,2020 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_10() {
    80020bbc:	e406                	sd	ra,8(sp)
    80020bbe:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020bc0:	2960a0ef          	jal	8002ae56 <printf>
    80020bc4:	4529                	li	a0,10
    80020bc6:	77f080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020bca:	57fd                	li	a5,-1
    80020bcc:	17fe                	slli	a5,a5,0x3f
    80020bce:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020bd2:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020bd6:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020bda:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020bde:	4509                	li	a0,2
    80020be0:	b28e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020be4:	a28e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020be8:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020bec:	08200593          	li	a1,130
    80020bf0:	00015617          	auipc	a2,0x15
    80020bf4:	9c060613          	addi	a2,a2,-1600 # 800355b0 <__func__.0+0x84f8>
    80020bf8:	0000c517          	auipc	a0,0xc
    80020bfc:	7b850513          	addi	a0,a0,1976 # 8002d3b0 <__func__.0+0x2f8>
    80020c00:	2560a0ef          	jal	8002ae56 <printf>
    80020c04:	00033797          	auipc	a5,0x33
    80020c08:	40d7c783          	lbu	a5,1037(a5) # 80054011 <excpt+0x1>
    80020c0c:	0000c597          	auipc	a1,0xc
    80020c10:	76c58593          	addi	a1,a1,1900 # 8002d378 <__func__.0+0x2c0>
    80020c14:	c789                	beqz	a5,80020c1e <timecmp_test_10+0x74>
    80020c16:	0000c597          	auipc	a1,0xc
    80020c1a:	77258593          	addi	a1,a1,1906 # 8002d388 <__func__.0+0x2d0>
    80020c1e:	0000c517          	auipc	a0,0xc
    80020c22:	7aa50513          	addi	a0,a0,1962 # 8002d3c8 <__func__.0+0x310>
    80020c26:	2300a0ef          	jal	8002ae56 <printf>
    80020c2a:	00033797          	auipc	a5,0x33
    80020c2e:	3e77c783          	lbu	a5,999(a5) # 80054011 <excpt+0x1>
    80020c32:	e7a1                	bnez	a5,80020c7a <timecmp_test_10+0xd0>
    80020c34:	4529                	li	a0,10
    80020c36:	70f080ef          	jal	80029b44 <putchar>
    80020c3a:	00033797          	auipc	a5,0x33
    80020c3e:	3d77c783          	lbu	a5,983(a5) # 80054011 <excpt+0x1>
    80020c42:	e795                	bnez	a5,80020c6e <timecmp_test_10+0xc4>
    80020c44:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020c46:	0000c597          	auipc	a1,0xc
    80020c4a:	73258593          	addi	a1,a1,1842 # 8002d378 <__func__.0+0x2c0>
    80020c4e:	0000c517          	auipc	a0,0xc
    80020c52:	7e250513          	addi	a0,a0,2018 # 8002d430 <__func__.0+0x378>
    80020c56:	2000a0ef          	jal	8002ae56 <printf>
    80020c5a:	4511                	li	a0,4
    80020c5c:	aace00ef          	jal	80000f08 <goto_priv>
    80020c60:	bc5e00ef          	jal	80001824 <reset_state>
}
    80020c64:	60a2                	ld	ra,8(sp)
    80020c66:	8522                	mv	a0,s0
    80020c68:	6402                	ld	s0,0(sp)
    80020c6a:	0141                	addi	sp,sp,16
    80020c6c:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020c6e:	4401                	li	s0,0
    TEST_END(); 
    80020c70:	0000c597          	auipc	a1,0xc
    80020c74:	71858593          	addi	a1,a1,1816 # 8002d388 <__func__.0+0x2d0>
    80020c78:	bfd9                	j	80020c4e <timecmp_test_10+0xa4>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020c7a:	0000c517          	auipc	a0,0xc
    80020c7e:	75650513          	addi	a0,a0,1878 # 8002d3d0 <__func__.0+0x318>
    80020c82:	1d40a0ef          	jal	8002ae56 <printf>
    80020c86:	02900513          	li	a0,41
    80020c8a:	6bb080ef          	jal	80029b44 <putchar>
    80020c8e:	b75d                	j	80020c34 <timecmp_test_10+0x8a>

0000000080020c90 <timecmp_test_11>:

bool timecmp_test_11() {
    80020c90:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020c92:	0000c597          	auipc	a1,0xc
    80020c96:	e0e58593          	addi	a1,a1,-498 # 8002caa0 <__func__.10>
    80020c9a:	0000c517          	auipc	a0,0xc
    80020c9e:	6fe50513          	addi	a0,a0,1790 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80020ca2:	e406                	sd	ra,8(sp)
    80020ca4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020ca6:	1b00a0ef          	jal	8002ae56 <printf>
    80020caa:	4529                	li	a0,10
    80020cac:	699080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020cb0:	57fd                	li	a5,-1
    80020cb2:	17fe                	slli	a5,a5,0x3f
    80020cb4:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020cb8:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020cbc:	450d                	li	a0,3
    80020cbe:	a4ae00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020cc2:	94ae00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020cc6:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80020cca:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020cce:	08200593          	li	a1,130
    80020cd2:	00015617          	auipc	a2,0x15
    80020cd6:	94660613          	addi	a2,a2,-1722 # 80035618 <__func__.0+0x8560>
    80020cda:	0000c517          	auipc	a0,0xc
    80020cde:	6d650513          	addi	a0,a0,1750 # 8002d3b0 <__func__.0+0x2f8>
    80020ce2:	1740a0ef          	jal	8002ae56 <printf>
    80020ce6:	00033797          	auipc	a5,0x33
    80020cea:	32b7c783          	lbu	a5,811(a5) # 80054011 <excpt+0x1>
    80020cee:	0000c597          	auipc	a1,0xc
    80020cf2:	68a58593          	addi	a1,a1,1674 # 8002d378 <__func__.0+0x2c0>
    80020cf6:	c789                	beqz	a5,80020d00 <timecmp_test_11+0x70>
    80020cf8:	0000c597          	auipc	a1,0xc
    80020cfc:	69058593          	addi	a1,a1,1680 # 8002d388 <__func__.0+0x2d0>
    80020d00:	0000c517          	auipc	a0,0xc
    80020d04:	6c850513          	addi	a0,a0,1736 # 8002d3c8 <__func__.0+0x310>
    80020d08:	14e0a0ef          	jal	8002ae56 <printf>
    80020d0c:	00033797          	auipc	a5,0x33
    80020d10:	3057c783          	lbu	a5,773(a5) # 80054011 <excpt+0x1>
    80020d14:	e7a1                	bnez	a5,80020d5c <timecmp_test_11+0xcc>
    80020d16:	4529                	li	a0,10
    80020d18:	62d080ef          	jal	80029b44 <putchar>
    80020d1c:	00033797          	auipc	a5,0x33
    80020d20:	2f57c783          	lbu	a5,757(a5) # 80054011 <excpt+0x1>
    80020d24:	e795                	bnez	a5,80020d50 <timecmp_test_11+0xc0>
    80020d26:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d28:	0000c597          	auipc	a1,0xc
    80020d2c:	65058593          	addi	a1,a1,1616 # 8002d378 <__func__.0+0x2c0>
    80020d30:	0000c517          	auipc	a0,0xc
    80020d34:	70050513          	addi	a0,a0,1792 # 8002d430 <__func__.0+0x378>
    80020d38:	11e0a0ef          	jal	8002ae56 <printf>
    80020d3c:	4511                	li	a0,4
    80020d3e:	9cae00ef          	jal	80000f08 <goto_priv>
    80020d42:	ae3e00ef          	jal	80001824 <reset_state>
}
    80020d46:	60a2                	ld	ra,8(sp)
    80020d48:	8522                	mv	a0,s0
    80020d4a:	6402                	ld	s0,0(sp)
    80020d4c:	0141                	addi	sp,sp,16
    80020d4e:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020d50:	4401                	li	s0,0
    TEST_END(); 
    80020d52:	0000c597          	auipc	a1,0xc
    80020d56:	63658593          	addi	a1,a1,1590 # 8002d388 <__func__.0+0x2d0>
    80020d5a:	bfd9                	j	80020d30 <timecmp_test_11+0xa0>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020d5c:	0000c517          	auipc	a0,0xc
    80020d60:	67450513          	addi	a0,a0,1652 # 8002d3d0 <__func__.0+0x318>
    80020d64:	0f20a0ef          	jal	8002ae56 <printf>
    80020d68:	02900513          	li	a0,41
    80020d6c:	5d9080ef          	jal	80029b44 <putchar>
    80020d70:	b75d                	j	80020d16 <timecmp_test_11+0x86>

0000000080020d72 <timecmp_test_12>:

bool timecmp_test_12() {
    80020d72:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020d74:	0000c597          	auipc	a1,0xc
    80020d78:	d3c58593          	addi	a1,a1,-708 # 8002cab0 <__func__.9>
    80020d7c:	0000c517          	auipc	a0,0xc
    80020d80:	61c50513          	addi	a0,a0,1564 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_12() {
    80020d84:	e406                	sd	ra,8(sp)
    80020d86:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020d88:	0ce0a0ef          	jal	8002ae56 <printf>
    80020d8c:	4529                	li	a0,10
    80020d8e:	5b7080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020d92:	57fd                	li	a5,-1
    80020d94:	17fe                	slli	a5,a5,0x3f
    80020d96:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020d9a:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020d9e:	450d                	li	a0,3
    80020da0:	968e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020da4:	868e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020da8:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020dac:	08200593          	li	a1,130
    80020db0:	00015617          	auipc	a2,0x15
    80020db4:	8b860613          	addi	a2,a2,-1864 # 80035668 <__func__.0+0x85b0>
    80020db8:	0000c517          	auipc	a0,0xc
    80020dbc:	5f850513          	addi	a0,a0,1528 # 8002d3b0 <__func__.0+0x2f8>
    80020dc0:	0960a0ef          	jal	8002ae56 <printf>
    80020dc4:	00033797          	auipc	a5,0x33
    80020dc8:	24d7c783          	lbu	a5,589(a5) # 80054011 <excpt+0x1>
    80020dcc:	0000c597          	auipc	a1,0xc
    80020dd0:	5ac58593          	addi	a1,a1,1452 # 8002d378 <__func__.0+0x2c0>
    80020dd4:	c789                	beqz	a5,80020dde <timecmp_test_12+0x6c>
    80020dd6:	0000c597          	auipc	a1,0xc
    80020dda:	5b258593          	addi	a1,a1,1458 # 8002d388 <__func__.0+0x2d0>
    80020dde:	0000c517          	auipc	a0,0xc
    80020de2:	5ea50513          	addi	a0,a0,1514 # 8002d3c8 <__func__.0+0x310>
    80020de6:	0700a0ef          	jal	8002ae56 <printf>
    80020dea:	00033797          	auipc	a5,0x33
    80020dee:	2277c783          	lbu	a5,551(a5) # 80054011 <excpt+0x1>
    80020df2:	e7a1                	bnez	a5,80020e3a <timecmp_test_12+0xc8>
    80020df4:	4529                	li	a0,10
    80020df6:	54f080ef          	jal	80029b44 <putchar>
    80020dfa:	00033797          	auipc	a5,0x33
    80020dfe:	2177c783          	lbu	a5,535(a5) # 80054011 <excpt+0x1>
    80020e02:	e795                	bnez	a5,80020e2e <timecmp_test_12+0xbc>
    80020e04:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020e06:	0000c597          	auipc	a1,0xc
    80020e0a:	57258593          	addi	a1,a1,1394 # 8002d378 <__func__.0+0x2c0>
    80020e0e:	0000c517          	auipc	a0,0xc
    80020e12:	62250513          	addi	a0,a0,1570 # 8002d430 <__func__.0+0x378>
    80020e16:	0400a0ef          	jal	8002ae56 <printf>
    80020e1a:	4511                	li	a0,4
    80020e1c:	8ece00ef          	jal	80000f08 <goto_priv>
    80020e20:	a05e00ef          	jal	80001824 <reset_state>
}
    80020e24:	60a2                	ld	ra,8(sp)
    80020e26:	8522                	mv	a0,s0
    80020e28:	6402                	ld	s0,0(sp)
    80020e2a:	0141                	addi	sp,sp,16
    80020e2c:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020e2e:	4401                	li	s0,0
    TEST_END(); 
    80020e30:	0000c597          	auipc	a1,0xc
    80020e34:	55858593          	addi	a1,a1,1368 # 8002d388 <__func__.0+0x2d0>
    80020e38:	bfd9                	j	80020e0e <timecmp_test_12+0x9c>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020e3a:	0000c517          	auipc	a0,0xc
    80020e3e:	59650513          	addi	a0,a0,1430 # 8002d3d0 <__func__.0+0x318>
    80020e42:	0140a0ef          	jal	8002ae56 <printf>
    80020e46:	02900513          	li	a0,41
    80020e4a:	4fb080ef          	jal	80029b44 <putchar>
    80020e4e:	b75d                	j	80020df4 <timecmp_test_12+0x82>

0000000080020e50 <timecmp_test_13>:

bool timecmp_test_13() {
    80020e50:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020e52:	0000c597          	auipc	a1,0xc
    80020e56:	c6e58593          	addi	a1,a1,-914 # 8002cac0 <__func__.8>
    80020e5a:	0000c517          	auipc	a0,0xc
    80020e5e:	53e50513          	addi	a0,a0,1342 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80020e62:	ec06                	sd	ra,24(sp)
    80020e64:	e822                	sd	s0,16(sp)
    80020e66:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020e68:	7ef090ef          	jal	8002ae56 <printf>
    80020e6c:	4529                	li	a0,10
    80020e6e:	4d7080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020e72:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020e76:	57fd                	li	a5,-1
    80020e78:	17fe                	slli	a5,a5,0x3f
    80020e7a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020e7e:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020e82:	30a025f3          	csrr	a1,0x30a
    80020e86:	00013517          	auipc	a0,0x13
    80020e8a:	b3a50513          	addi	a0,a0,-1222 # 800339c0 <__func__.0+0x6908>
    80020e8e:	7c9090ef          	jal	8002ae56 <printf>
    80020e92:	60a025f3          	csrr	a1,henvcfg
    80020e96:	00013517          	auipc	a0,0x13
    80020e9a:	b2a50513          	addi	a0,a0,-1238 # 800339c0 <__func__.0+0x6908>
    80020e9e:	7b9090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VU);
    80020ea2:	4501                	li	a0,0
    80020ea4:	864e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ea8:	f65df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020eac:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020eb0:	00033597          	auipc	a1,0x33
    80020eb4:	1615c583          	lbu	a1,353(a1) # 80054011 <excpt+0x1>
    80020eb8:	00015517          	auipc	a0,0x15
    80020ebc:	80050513          	addi	a0,a0,-2048 # 800356b8 <__func__.0+0x8600>
    80020ec0:	00033417          	auipc	s0,0x33
    80020ec4:	15040413          	addi	s0,s0,336 # 80054010 <excpt>
    80020ec8:	78f090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    80020ecc:	640c                	ld	a1,8(s0)
    80020ece:	00014517          	auipc	a0,0x14
    80020ed2:	7fa50513          	addi	a0,a0,2042 # 800356c8 <__func__.0+0x8610>
    80020ed6:	781090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020eda:	08200593          	li	a1,130
    80020ede:	00014617          	auipc	a2,0x14
    80020ee2:	7fa60613          	addi	a2,a2,2042 # 800356d8 <__func__.0+0x8620>
    80020ee6:	0000c517          	auipc	a0,0xc
    80020eea:	4ca50513          	addi	a0,a0,1226 # 8002d3b0 <__func__.0+0x2f8>
    80020eee:	769090ef          	jal	8002ae56 <printf>
    80020ef2:	00033797          	auipc	a5,0x33
    80020ef6:	11f7c783          	lbu	a5,287(a5) # 80054011 <excpt+0x1>
    80020efa:	0000c597          	auipc	a1,0xc
    80020efe:	48e58593          	addi	a1,a1,1166 # 8002d388 <__func__.0+0x2d0>
    80020f02:	cf89                	beqz	a5,80020f1c <timecmp_test_13+0xcc>
    80020f04:	6418                	ld	a4,8(s0)
    80020f06:	47d9                	li	a5,22
    80020f08:	0000c597          	auipc	a1,0xc
    80020f0c:	47058593          	addi	a1,a1,1136 # 8002d378 <__func__.0+0x2c0>
    80020f10:	00f70663          	beq	a4,a5,80020f1c <timecmp_test_13+0xcc>
    80020f14:	0000c597          	auipc	a1,0xc
    80020f18:	47458593          	addi	a1,a1,1140 # 8002d388 <__func__.0+0x2d0>
    80020f1c:	0000c517          	auipc	a0,0xc
    80020f20:	4ac50513          	addi	a0,a0,1196 # 8002d3c8 <__func__.0+0x310>
    80020f24:	733090ef          	jal	8002ae56 <printf>
    80020f28:	00033797          	auipc	a5,0x33
    80020f2c:	0e97c783          	lbu	a5,233(a5) # 80054011 <excpt+0x1>
    80020f30:	c789                	beqz	a5,80020f3a <timecmp_test_13+0xea>
    80020f32:	6418                	ld	a4,8(s0)
    80020f34:	47d9                	li	a5,22
    80020f36:	00f70c63          	beq	a4,a5,80020f4e <timecmp_test_13+0xfe>
    80020f3a:	0000c517          	auipc	a0,0xc
    80020f3e:	49650513          	addi	a0,a0,1174 # 8002d3d0 <__func__.0+0x318>
    80020f42:	715090ef          	jal	8002ae56 <printf>
    80020f46:	02900513          	li	a0,41
    80020f4a:	3fb080ef          	jal	80029b44 <putchar>
    80020f4e:	4529                	li	a0,10
    80020f50:	3f5080ef          	jal	80029b44 <putchar>
    80020f54:	00033497          	auipc	s1,0x33
    80020f58:	0bd4c483          	lbu	s1,189(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020f5c:	0000c597          	auipc	a1,0xc
    80020f60:	42c58593          	addi	a1,a1,1068 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020f64:	cc91                	beqz	s1,80020f80 <timecmp_test_13+0x130>
    80020f66:	6418                	ld	a4,8(s0)
    80020f68:	47d9                	li	a5,22
    TEST_END(); 
    80020f6a:	0000c597          	auipc	a1,0xc
    80020f6e:	40e58593          	addi	a1,a1,1038 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020f72:	00f70763          	beq	a4,a5,80020f80 <timecmp_test_13+0x130>
    80020f76:	4481                	li	s1,0
    TEST_END(); 
    80020f78:	0000c597          	auipc	a1,0xc
    80020f7c:	41058593          	addi	a1,a1,1040 # 8002d388 <__func__.0+0x2d0>
    80020f80:	0000c517          	auipc	a0,0xc
    80020f84:	4b050513          	addi	a0,a0,1200 # 8002d430 <__func__.0+0x378>
    80020f88:	6cf090ef          	jal	8002ae56 <printf>
    80020f8c:	4511                	li	a0,4
    80020f8e:	f7bdf0ef          	jal	80000f08 <goto_priv>
    80020f92:	893e00ef          	jal	80001824 <reset_state>
}
    80020f96:	60e2                	ld	ra,24(sp)
    80020f98:	6442                	ld	s0,16(sp)
    80020f9a:	8526                	mv	a0,s1
    80020f9c:	64a2                	ld	s1,8(sp)
    80020f9e:	6105                	addi	sp,sp,32
    80020fa0:	8082                	ret

0000000080020fa2 <timecmp_test_14>:

bool timecmp_test_14() {
    80020fa2:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020fa4:	0000c597          	auipc	a1,0xc
    80020fa8:	b2c58593          	addi	a1,a1,-1236 # 8002cad0 <__func__.7>
    80020fac:	0000c517          	auipc	a0,0xc
    80020fb0:	3ec50513          	addi	a0,a0,1004 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_14() {
    80020fb4:	ec06                	sd	ra,24(sp)
    80020fb6:	e822                	sd	s0,16(sp)
    80020fb8:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020fba:	69d090ef          	jal	8002ae56 <printf>
    80020fbe:	4529                	li	a0,10
    80020fc0:	385080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020fc4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020fc8:	57fd                	li	a5,-1
    80020fca:	17fe                	slli	a5,a5,0x3f
    80020fcc:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020fd0:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020fd4:	30a025f3          	csrr	a1,0x30a
    80020fd8:	00013517          	auipc	a0,0x13
    80020fdc:	9e850513          	addi	a0,a0,-1560 # 800339c0 <__func__.0+0x6908>
    80020fe0:	677090ef          	jal	8002ae56 <printf>
    80020fe4:	60a025f3          	csrr	a1,henvcfg
    80020fe8:	00013517          	auipc	a0,0x13
    80020fec:	9d850513          	addi	a0,a0,-1576 # 800339c0 <__func__.0+0x6908>
    80020ff0:	667090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    80020ff4:	4509                	li	a0,2
    80020ff6:	f13df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ffa:	e13df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020ffe:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021002:	00033597          	auipc	a1,0x33
    80021006:	00f5c583          	lbu	a1,15(a1) # 80054011 <excpt+0x1>
    8002100a:	00014517          	auipc	a0,0x14
    8002100e:	6ae50513          	addi	a0,a0,1710 # 800356b8 <__func__.0+0x8600>
    80021012:	00033417          	auipc	s0,0x33
    80021016:	ffe40413          	addi	s0,s0,-2 # 80054010 <excpt>
    8002101a:	63d090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    8002101e:	640c                	ld	a1,8(s0)
    80021020:	00014517          	auipc	a0,0x14
    80021024:	6a850513          	addi	a0,a0,1704 # 800356c8 <__func__.0+0x8610>
    80021028:	62f090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002102c:	08200593          	li	a1,130
    80021030:	00014617          	auipc	a2,0x14
    80021034:	71860613          	addi	a2,a2,1816 # 80035748 <__func__.0+0x8690>
    80021038:	0000c517          	auipc	a0,0xc
    8002103c:	37850513          	addi	a0,a0,888 # 8002d3b0 <__func__.0+0x2f8>
    80021040:	617090ef          	jal	8002ae56 <printf>
    80021044:	00033797          	auipc	a5,0x33
    80021048:	fcd7c783          	lbu	a5,-51(a5) # 80054011 <excpt+0x1>
    8002104c:	0000c597          	auipc	a1,0xc
    80021050:	33c58593          	addi	a1,a1,828 # 8002d388 <__func__.0+0x2d0>
    80021054:	cf89                	beqz	a5,8002106e <timecmp_test_14+0xcc>
    80021056:	6418                	ld	a4,8(s0)
    80021058:	47d9                	li	a5,22
    8002105a:	0000c597          	auipc	a1,0xc
    8002105e:	31e58593          	addi	a1,a1,798 # 8002d378 <__func__.0+0x2c0>
    80021062:	00f70663          	beq	a4,a5,8002106e <timecmp_test_14+0xcc>
    80021066:	0000c597          	auipc	a1,0xc
    8002106a:	32258593          	addi	a1,a1,802 # 8002d388 <__func__.0+0x2d0>
    8002106e:	0000c517          	auipc	a0,0xc
    80021072:	35a50513          	addi	a0,a0,858 # 8002d3c8 <__func__.0+0x310>
    80021076:	5e1090ef          	jal	8002ae56 <printf>
    8002107a:	00033797          	auipc	a5,0x33
    8002107e:	f977c783          	lbu	a5,-105(a5) # 80054011 <excpt+0x1>
    80021082:	c789                	beqz	a5,8002108c <timecmp_test_14+0xea>
    80021084:	6418                	ld	a4,8(s0)
    80021086:	47d9                	li	a5,22
    80021088:	00f70c63          	beq	a4,a5,800210a0 <timecmp_test_14+0xfe>
    8002108c:	0000c517          	auipc	a0,0xc
    80021090:	34450513          	addi	a0,a0,836 # 8002d3d0 <__func__.0+0x318>
    80021094:	5c3090ef          	jal	8002ae56 <printf>
    80021098:	02900513          	li	a0,41
    8002109c:	2a9080ef          	jal	80029b44 <putchar>
    800210a0:	4529                	li	a0,10
    800210a2:	2a3080ef          	jal	80029b44 <putchar>
    800210a6:	00033497          	auipc	s1,0x33
    800210aa:	f6b4c483          	lbu	s1,-149(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800210ae:	0000c597          	auipc	a1,0xc
    800210b2:	2da58593          	addi	a1,a1,730 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210b6:	cc91                	beqz	s1,800210d2 <timecmp_test_14+0x130>
    800210b8:	6418                	ld	a4,8(s0)
    800210ba:	47d9                	li	a5,22
    TEST_END(); 
    800210bc:	0000c597          	auipc	a1,0xc
    800210c0:	2bc58593          	addi	a1,a1,700 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210c4:	00f70763          	beq	a4,a5,800210d2 <timecmp_test_14+0x130>
    800210c8:	4481                	li	s1,0
    TEST_END(); 
    800210ca:	0000c597          	auipc	a1,0xc
    800210ce:	2be58593          	addi	a1,a1,702 # 8002d388 <__func__.0+0x2d0>
    800210d2:	0000c517          	auipc	a0,0xc
    800210d6:	35e50513          	addi	a0,a0,862 # 8002d430 <__func__.0+0x378>
    800210da:	57d090ef          	jal	8002ae56 <printf>
    800210de:	4511                	li	a0,4
    800210e0:	e29df0ef          	jal	80000f08 <goto_priv>
    800210e4:	f40e00ef          	jal	80001824 <reset_state>
}
    800210e8:	60e2                	ld	ra,24(sp)
    800210ea:	6442                	ld	s0,16(sp)
    800210ec:	8526                	mv	a0,s1
    800210ee:	64a2                	ld	s1,8(sp)
    800210f0:	6105                	addi	sp,sp,32
    800210f2:	8082                	ret

00000000800210f4 <timecmp_test_15>:


bool timecmp_test_15() {
    800210f4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800210f6:	0000c597          	auipc	a1,0xc
    800210fa:	9ea58593          	addi	a1,a1,-1558 # 8002cae0 <__func__.6>
    800210fe:	0000c517          	auipc	a0,0xc
    80021102:	29a50513          	addi	a0,a0,666 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_15() {
    80021106:	ec06                	sd	ra,24(sp)
    80021108:	e822                	sd	s0,16(sp)
    8002110a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002110c:	54b090ef          	jal	8002ae56 <printf>
    80021110:	4529                	li	a0,10
    80021112:	233080ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021116:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002111a:	57fd                	li	a5,-1
    8002111c:	17fe                	slli	a5,a5,0x3f
    8002111e:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021122:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021126:	30a025f3          	csrr	a1,0x30a
    8002112a:	00013517          	auipc	a0,0x13
    8002112e:	89650513          	addi	a0,a0,-1898 # 800339c0 <__func__.0+0x6908>
    80021132:	525090ef          	jal	8002ae56 <printf>
    80021136:	60a025f3          	csrr	a1,henvcfg
    8002113a:	00013517          	auipc	a0,0x13
    8002113e:	88650513          	addi	a0,a0,-1914 # 800339c0 <__func__.0+0x6908>
    80021142:	515090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VU);
    80021146:	4501                	li	a0,0
    80021148:	dc1df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002114c:	cc1df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021150:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021154:	00033597          	auipc	a1,0x33
    80021158:	ebd5c583          	lbu	a1,-323(a1) # 80054011 <excpt+0x1>
    8002115c:	00014517          	auipc	a0,0x14
    80021160:	55c50513          	addi	a0,a0,1372 # 800356b8 <__func__.0+0x8600>
    80021164:	00033417          	auipc	s0,0x33
    80021168:	eac40413          	addi	s0,s0,-340 # 80054010 <excpt>
    8002116c:	4eb090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    80021170:	640c                	ld	a1,8(s0)
    80021172:	00014517          	auipc	a0,0x14
    80021176:	55650513          	addi	a0,a0,1366 # 800356c8 <__func__.0+0x8610>
    8002117a:	4dd090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002117e:	08200593          	li	a1,130
    80021182:	00014617          	auipc	a2,0x14
    80021186:	63660613          	addi	a2,a2,1590 # 800357b8 <__func__.0+0x8700>
    8002118a:	0000c517          	auipc	a0,0xc
    8002118e:	22650513          	addi	a0,a0,550 # 8002d3b0 <__func__.0+0x2f8>
    80021192:	4c5090ef          	jal	8002ae56 <printf>
    80021196:	00033797          	auipc	a5,0x33
    8002119a:	e7b7c783          	lbu	a5,-389(a5) # 80054011 <excpt+0x1>
    8002119e:	0000c597          	auipc	a1,0xc
    800211a2:	1ea58593          	addi	a1,a1,490 # 8002d388 <__func__.0+0x2d0>
    800211a6:	cf89                	beqz	a5,800211c0 <timecmp_test_15+0xcc>
    800211a8:	6418                	ld	a4,8(s0)
    800211aa:	4789                	li	a5,2
    800211ac:	0000c597          	auipc	a1,0xc
    800211b0:	1cc58593          	addi	a1,a1,460 # 8002d378 <__func__.0+0x2c0>
    800211b4:	00f70663          	beq	a4,a5,800211c0 <timecmp_test_15+0xcc>
    800211b8:	0000c597          	auipc	a1,0xc
    800211bc:	1d058593          	addi	a1,a1,464 # 8002d388 <__func__.0+0x2d0>
    800211c0:	0000c517          	auipc	a0,0xc
    800211c4:	20850513          	addi	a0,a0,520 # 8002d3c8 <__func__.0+0x310>
    800211c8:	48f090ef          	jal	8002ae56 <printf>
    800211cc:	00033797          	auipc	a5,0x33
    800211d0:	e457c783          	lbu	a5,-443(a5) # 80054011 <excpt+0x1>
    800211d4:	c789                	beqz	a5,800211de <timecmp_test_15+0xea>
    800211d6:	6418                	ld	a4,8(s0)
    800211d8:	4789                	li	a5,2
    800211da:	00f70c63          	beq	a4,a5,800211f2 <timecmp_test_15+0xfe>
    800211de:	0000c517          	auipc	a0,0xc
    800211e2:	1f250513          	addi	a0,a0,498 # 8002d3d0 <__func__.0+0x318>
    800211e6:	471090ef          	jal	8002ae56 <printf>
    800211ea:	02900513          	li	a0,41
    800211ee:	157080ef          	jal	80029b44 <putchar>
    800211f2:	4529                	li	a0,10
    800211f4:	151080ef          	jal	80029b44 <putchar>
    800211f8:	00033497          	auipc	s1,0x33
    800211fc:	e194c483          	lbu	s1,-487(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021200:	0000c597          	auipc	a1,0xc
    80021204:	18858593          	addi	a1,a1,392 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021208:	cc91                	beqz	s1,80021224 <timecmp_test_15+0x130>
    8002120a:	6418                	ld	a4,8(s0)
    8002120c:	4789                	li	a5,2
    TEST_END(); 
    8002120e:	0000c597          	auipc	a1,0xc
    80021212:	16a58593          	addi	a1,a1,362 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021216:	00f70763          	beq	a4,a5,80021224 <timecmp_test_15+0x130>
    8002121a:	4481                	li	s1,0
    TEST_END(); 
    8002121c:	0000c597          	auipc	a1,0xc
    80021220:	16c58593          	addi	a1,a1,364 # 8002d388 <__func__.0+0x2d0>
    80021224:	0000c517          	auipc	a0,0xc
    80021228:	20c50513          	addi	a0,a0,524 # 8002d430 <__func__.0+0x378>
    8002122c:	42b090ef          	jal	8002ae56 <printf>
    80021230:	4511                	li	a0,4
    80021232:	cd7df0ef          	jal	80000f08 <goto_priv>
    80021236:	deee00ef          	jal	80001824 <reset_state>
}
    8002123a:	60e2                	ld	ra,24(sp)
    8002123c:	6442                	ld	s0,16(sp)
    8002123e:	8526                	mv	a0,s1
    80021240:	64a2                	ld	s1,8(sp)
    80021242:	6105                	addi	sp,sp,32
    80021244:	8082                	ret

0000000080021246 <timecmp_test_16>:

bool timecmp_test_16() {
    80021246:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021248:	0000c597          	auipc	a1,0xc
    8002124c:	8a858593          	addi	a1,a1,-1880 # 8002caf0 <__func__.5>
    80021250:	0000c517          	auipc	a0,0xc
    80021254:	14850513          	addi	a0,a0,328 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_16() {
    80021258:	ec06                	sd	ra,24(sp)
    8002125a:	e822                	sd	s0,16(sp)
    8002125c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002125e:	3f9090ef          	jal	8002ae56 <printf>
    80021262:	4529                	li	a0,10
    80021264:	0e1080ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021268:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002126c:	57fd                	li	a5,-1
    8002126e:	17fe                	slli	a5,a5,0x3f
    80021270:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021274:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021278:	30a025f3          	csrr	a1,0x30a
    8002127c:	00012517          	auipc	a0,0x12
    80021280:	74450513          	addi	a0,a0,1860 # 800339c0 <__func__.0+0x6908>
    80021284:	3d3090ef          	jal	8002ae56 <printf>
    80021288:	60a025f3          	csrr	a1,henvcfg
    8002128c:	00012517          	auipc	a0,0x12
    80021290:	73450513          	addi	a0,a0,1844 # 800339c0 <__func__.0+0x6908>
    80021294:	3c3090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    80021298:	4509                	li	a0,2
    8002129a:	c6fdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002129e:	b6fdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800212a2:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800212a6:	00033597          	auipc	a1,0x33
    800212aa:	d6b5c583          	lbu	a1,-661(a1) # 80054011 <excpt+0x1>
    800212ae:	00014517          	auipc	a0,0x14
    800212b2:	40a50513          	addi	a0,a0,1034 # 800356b8 <__func__.0+0x8600>
    800212b6:	00033417          	auipc	s0,0x33
    800212ba:	d5a40413          	addi	s0,s0,-678 # 80054010 <excpt>
    800212be:	399090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    800212c2:	640c                	ld	a1,8(s0)
    800212c4:	00014517          	auipc	a0,0x14
    800212c8:	40450513          	addi	a0,a0,1028 # 800356c8 <__func__.0+0x8610>
    800212cc:	38b090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212d0:	08200593          	li	a1,130
    800212d4:	00014617          	auipc	a2,0x14
    800212d8:	55460613          	addi	a2,a2,1364 # 80035828 <__func__.0+0x8770>
    800212dc:	0000c517          	auipc	a0,0xc
    800212e0:	0d450513          	addi	a0,a0,212 # 8002d3b0 <__func__.0+0x2f8>
    800212e4:	373090ef          	jal	8002ae56 <printf>
    800212e8:	00033797          	auipc	a5,0x33
    800212ec:	d297c783          	lbu	a5,-727(a5) # 80054011 <excpt+0x1>
    800212f0:	0000c597          	auipc	a1,0xc
    800212f4:	09858593          	addi	a1,a1,152 # 8002d388 <__func__.0+0x2d0>
    800212f8:	cf89                	beqz	a5,80021312 <timecmp_test_16+0xcc>
    800212fa:	6418                	ld	a4,8(s0)
    800212fc:	4789                	li	a5,2
    800212fe:	0000c597          	auipc	a1,0xc
    80021302:	07a58593          	addi	a1,a1,122 # 8002d378 <__func__.0+0x2c0>
    80021306:	00f70663          	beq	a4,a5,80021312 <timecmp_test_16+0xcc>
    8002130a:	0000c597          	auipc	a1,0xc
    8002130e:	07e58593          	addi	a1,a1,126 # 8002d388 <__func__.0+0x2d0>
    80021312:	0000c517          	auipc	a0,0xc
    80021316:	0b650513          	addi	a0,a0,182 # 8002d3c8 <__func__.0+0x310>
    8002131a:	33d090ef          	jal	8002ae56 <printf>
    8002131e:	00033797          	auipc	a5,0x33
    80021322:	cf37c783          	lbu	a5,-781(a5) # 80054011 <excpt+0x1>
    80021326:	c789                	beqz	a5,80021330 <timecmp_test_16+0xea>
    80021328:	6418                	ld	a4,8(s0)
    8002132a:	4789                	li	a5,2
    8002132c:	00f70c63          	beq	a4,a5,80021344 <timecmp_test_16+0xfe>
    80021330:	0000c517          	auipc	a0,0xc
    80021334:	0a050513          	addi	a0,a0,160 # 8002d3d0 <__func__.0+0x318>
    80021338:	31f090ef          	jal	8002ae56 <printf>
    8002133c:	02900513          	li	a0,41
    80021340:	005080ef          	jal	80029b44 <putchar>
    80021344:	4529                	li	a0,10
    80021346:	7fe080ef          	jal	80029b44 <putchar>
    8002134a:	00033497          	auipc	s1,0x33
    8002134e:	cc74c483          	lbu	s1,-825(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021352:	0000c597          	auipc	a1,0xc
    80021356:	03658593          	addi	a1,a1,54 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002135a:	cc91                	beqz	s1,80021376 <timecmp_test_16+0x130>
    8002135c:	6418                	ld	a4,8(s0)
    8002135e:	4789                	li	a5,2
    TEST_END(); 
    80021360:	0000c597          	auipc	a1,0xc
    80021364:	01858593          	addi	a1,a1,24 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021368:	00f70763          	beq	a4,a5,80021376 <timecmp_test_16+0x130>
    8002136c:	4481                	li	s1,0
    TEST_END(); 
    8002136e:	0000c597          	auipc	a1,0xc
    80021372:	01a58593          	addi	a1,a1,26 # 8002d388 <__func__.0+0x2d0>
    80021376:	0000c517          	auipc	a0,0xc
    8002137a:	0ba50513          	addi	a0,a0,186 # 8002d430 <__func__.0+0x378>
    8002137e:	2d9090ef          	jal	8002ae56 <printf>
    80021382:	4511                	li	a0,4
    80021384:	b85df0ef          	jal	80000f08 <goto_priv>
    80021388:	c9ce00ef          	jal	80001824 <reset_state>
}
    8002138c:	60e2                	ld	ra,24(sp)
    8002138e:	6442                	ld	s0,16(sp)
    80021390:	8526                	mv	a0,s1
    80021392:	64a2                	ld	s1,8(sp)
    80021394:	6105                	addi	sp,sp,32
    80021396:	8082                	ret

0000000080021398 <timecmp_test_17>:

bool timecmp_test_17() {
    80021398:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002139a:	0000b597          	auipc	a1,0xb
    8002139e:	76658593          	addi	a1,a1,1894 # 8002cb00 <__func__.4>
    800213a2:	0000c517          	auipc	a0,0xc
    800213a6:	ff650513          	addi	a0,a0,-10 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_17() {
    800213aa:	ec06                	sd	ra,24(sp)
    800213ac:	e822                	sd	s0,16(sp)
    800213ae:	e426                	sd	s1,8(sp)
    TEST_START();    
    800213b0:	2a7090ef          	jal	8002ae56 <printf>
    800213b4:	4529                	li	a0,10
    800213b6:	78e080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800213ba:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800213be:	57fd                	li	a5,-1
    800213c0:	17fe                	slli	a5,a5,0x3f
    800213c2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800213c6:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800213ca:	30a025f3          	csrr	a1,0x30a
    800213ce:	00012517          	auipc	a0,0x12
    800213d2:	5f250513          	addi	a0,a0,1522 # 800339c0 <__func__.0+0x6908>
    800213d6:	281090ef          	jal	8002ae56 <printf>
    800213da:	60a025f3          	csrr	a1,henvcfg
    800213de:	00012517          	auipc	a0,0x12
    800213e2:	5e250513          	addi	a0,a0,1506 # 800339c0 <__func__.0+0x6908>
    800213e6:	271090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VU);
    800213ea:	4501                	li	a0,0
    800213ec:	b1ddf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800213f0:	a1ddf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800213f4:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800213f8:	00033597          	auipc	a1,0x33
    800213fc:	c195c583          	lbu	a1,-999(a1) # 80054011 <excpt+0x1>
    80021400:	00014517          	auipc	a0,0x14
    80021404:	2b850513          	addi	a0,a0,696 # 800356b8 <__func__.0+0x8600>
    80021408:	00033417          	auipc	s0,0x33
    8002140c:	c0840413          	addi	s0,s0,-1016 # 80054010 <excpt>
    80021410:	247090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    80021414:	640c                	ld	a1,8(s0)
    80021416:	00014517          	auipc	a0,0x14
    8002141a:	2b250513          	addi	a0,a0,690 # 800356c8 <__func__.0+0x8610>
    8002141e:	239090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021422:	08200593          	li	a1,130
    80021426:	00014617          	auipc	a2,0x14
    8002142a:	2b260613          	addi	a2,a2,690 # 800356d8 <__func__.0+0x8620>
    8002142e:	0000c517          	auipc	a0,0xc
    80021432:	f8250513          	addi	a0,a0,-126 # 8002d3b0 <__func__.0+0x2f8>
    80021436:	221090ef          	jal	8002ae56 <printf>
    8002143a:	00033797          	auipc	a5,0x33
    8002143e:	bd77c783          	lbu	a5,-1065(a5) # 80054011 <excpt+0x1>
    80021442:	0000c597          	auipc	a1,0xc
    80021446:	f4658593          	addi	a1,a1,-186 # 8002d388 <__func__.0+0x2d0>
    8002144a:	cf89                	beqz	a5,80021464 <timecmp_test_17+0xcc>
    8002144c:	6418                	ld	a4,8(s0)
    8002144e:	47d9                	li	a5,22
    80021450:	0000c597          	auipc	a1,0xc
    80021454:	f2858593          	addi	a1,a1,-216 # 8002d378 <__func__.0+0x2c0>
    80021458:	00f70663          	beq	a4,a5,80021464 <timecmp_test_17+0xcc>
    8002145c:	0000c597          	auipc	a1,0xc
    80021460:	f2c58593          	addi	a1,a1,-212 # 8002d388 <__func__.0+0x2d0>
    80021464:	0000c517          	auipc	a0,0xc
    80021468:	f6450513          	addi	a0,a0,-156 # 8002d3c8 <__func__.0+0x310>
    8002146c:	1eb090ef          	jal	8002ae56 <printf>
    80021470:	00033797          	auipc	a5,0x33
    80021474:	ba17c783          	lbu	a5,-1119(a5) # 80054011 <excpt+0x1>
    80021478:	c789                	beqz	a5,80021482 <timecmp_test_17+0xea>
    8002147a:	6418                	ld	a4,8(s0)
    8002147c:	47d9                	li	a5,22
    8002147e:	00f70c63          	beq	a4,a5,80021496 <timecmp_test_17+0xfe>
    80021482:	0000c517          	auipc	a0,0xc
    80021486:	f4e50513          	addi	a0,a0,-178 # 8002d3d0 <__func__.0+0x318>
    8002148a:	1cd090ef          	jal	8002ae56 <printf>
    8002148e:	02900513          	li	a0,41
    80021492:	6b2080ef          	jal	80029b44 <putchar>
    80021496:	4529                	li	a0,10
    80021498:	6ac080ef          	jal	80029b44 <putchar>
    8002149c:	00033497          	auipc	s1,0x33
    800214a0:	b754c483          	lbu	s1,-1163(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800214a4:	0000c597          	auipc	a1,0xc
    800214a8:	ee458593          	addi	a1,a1,-284 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800214ac:	cc91                	beqz	s1,800214c8 <timecmp_test_17+0x130>
    800214ae:	6418                	ld	a4,8(s0)
    800214b0:	47d9                	li	a5,22
    TEST_END(); 
    800214b2:	0000c597          	auipc	a1,0xc
    800214b6:	ec658593          	addi	a1,a1,-314 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800214ba:	00f70763          	beq	a4,a5,800214c8 <timecmp_test_17+0x130>
    800214be:	4481                	li	s1,0
    TEST_END(); 
    800214c0:	0000c597          	auipc	a1,0xc
    800214c4:	ec858593          	addi	a1,a1,-312 # 8002d388 <__func__.0+0x2d0>
    800214c8:	0000c517          	auipc	a0,0xc
    800214cc:	f6850513          	addi	a0,a0,-152 # 8002d430 <__func__.0+0x378>
    800214d0:	187090ef          	jal	8002ae56 <printf>
    800214d4:	4511                	li	a0,4
    800214d6:	a33df0ef          	jal	80000f08 <goto_priv>
    800214da:	b4ae00ef          	jal	80001824 <reset_state>
}
    800214de:	60e2                	ld	ra,24(sp)
    800214e0:	6442                	ld	s0,16(sp)
    800214e2:	8526                	mv	a0,s1
    800214e4:	64a2                	ld	s1,8(sp)
    800214e6:	6105                	addi	sp,sp,32
    800214e8:	8082                	ret

00000000800214ea <timecmp_test_18>:

bool timecmp_test_18() {
    800214ea:	1101                	addi	sp,sp,-32

    TEST_START();    
    800214ec:	0000b597          	auipc	a1,0xb
    800214f0:	62458593          	addi	a1,a1,1572 # 8002cb10 <__func__.3>
    800214f4:	0000c517          	auipc	a0,0xc
    800214f8:	ea450513          	addi	a0,a0,-348 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_18() {
    800214fc:	ec06                	sd	ra,24(sp)
    800214fe:	e822                	sd	s0,16(sp)
    80021500:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021502:	155090ef          	jal	8002ae56 <printf>
    80021506:	4529                	li	a0,10
    80021508:	63c080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002150c:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021510:	57fd                	li	a5,-1
    80021512:	17fe                	slli	a5,a5,0x3f
    80021514:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021518:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002151c:	30a025f3          	csrr	a1,0x30a
    80021520:	00012517          	auipc	a0,0x12
    80021524:	4a050513          	addi	a0,a0,1184 # 800339c0 <__func__.0+0x6908>
    80021528:	12f090ef          	jal	8002ae56 <printf>
    8002152c:	60a025f3          	csrr	a1,henvcfg
    80021530:	00012517          	auipc	a0,0x12
    80021534:	49050513          	addi	a0,a0,1168 # 800339c0 <__func__.0+0x6908>
    80021538:	11f090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    8002153c:	4509                	li	a0,2
    8002153e:	9cbdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021542:	8cbdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021546:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002154a:	00033597          	auipc	a1,0x33
    8002154e:	ac75c583          	lbu	a1,-1337(a1) # 80054011 <excpt+0x1>
    80021552:	00014517          	auipc	a0,0x14
    80021556:	16650513          	addi	a0,a0,358 # 800356b8 <__func__.0+0x8600>
    8002155a:	00033417          	auipc	s0,0x33
    8002155e:	ab640413          	addi	s0,s0,-1354 # 80054010 <excpt>
    80021562:	0f5090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    80021566:	640c                	ld	a1,8(s0)
    80021568:	00014517          	auipc	a0,0x14
    8002156c:	16050513          	addi	a0,a0,352 # 800356c8 <__func__.0+0x8610>
    80021570:	0e7090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021574:	08200593          	li	a1,130
    80021578:	00014617          	auipc	a2,0x14
    8002157c:	1d060613          	addi	a2,a2,464 # 80035748 <__func__.0+0x8690>
    80021580:	0000c517          	auipc	a0,0xc
    80021584:	e3050513          	addi	a0,a0,-464 # 8002d3b0 <__func__.0+0x2f8>
    80021588:	0cf090ef          	jal	8002ae56 <printf>
    8002158c:	00033797          	auipc	a5,0x33
    80021590:	a857c783          	lbu	a5,-1403(a5) # 80054011 <excpt+0x1>
    80021594:	0000c597          	auipc	a1,0xc
    80021598:	df458593          	addi	a1,a1,-524 # 8002d388 <__func__.0+0x2d0>
    8002159c:	cf89                	beqz	a5,800215b6 <timecmp_test_18+0xcc>
    8002159e:	6418                	ld	a4,8(s0)
    800215a0:	47d9                	li	a5,22
    800215a2:	0000c597          	auipc	a1,0xc
    800215a6:	dd658593          	addi	a1,a1,-554 # 8002d378 <__func__.0+0x2c0>
    800215aa:	00f70663          	beq	a4,a5,800215b6 <timecmp_test_18+0xcc>
    800215ae:	0000c597          	auipc	a1,0xc
    800215b2:	dda58593          	addi	a1,a1,-550 # 8002d388 <__func__.0+0x2d0>
    800215b6:	0000c517          	auipc	a0,0xc
    800215ba:	e1250513          	addi	a0,a0,-494 # 8002d3c8 <__func__.0+0x310>
    800215be:	099090ef          	jal	8002ae56 <printf>
    800215c2:	00033797          	auipc	a5,0x33
    800215c6:	a4f7c783          	lbu	a5,-1457(a5) # 80054011 <excpt+0x1>
    800215ca:	c789                	beqz	a5,800215d4 <timecmp_test_18+0xea>
    800215cc:	6418                	ld	a4,8(s0)
    800215ce:	47d9                	li	a5,22
    800215d0:	00f70c63          	beq	a4,a5,800215e8 <timecmp_test_18+0xfe>
    800215d4:	0000c517          	auipc	a0,0xc
    800215d8:	dfc50513          	addi	a0,a0,-516 # 8002d3d0 <__func__.0+0x318>
    800215dc:	07b090ef          	jal	8002ae56 <printf>
    800215e0:	02900513          	li	a0,41
    800215e4:	560080ef          	jal	80029b44 <putchar>
    800215e8:	4529                	li	a0,10
    800215ea:	55a080ef          	jal	80029b44 <putchar>
    800215ee:	00033497          	auipc	s1,0x33
    800215f2:	a234c483          	lbu	s1,-1501(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800215f6:	0000c597          	auipc	a1,0xc
    800215fa:	d9258593          	addi	a1,a1,-622 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215fe:	cc91                	beqz	s1,8002161a <timecmp_test_18+0x130>
    80021600:	6418                	ld	a4,8(s0)
    80021602:	47d9                	li	a5,22
    TEST_END(); 
    80021604:	0000c597          	auipc	a1,0xc
    80021608:	d7458593          	addi	a1,a1,-652 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002160c:	00f70763          	beq	a4,a5,8002161a <timecmp_test_18+0x130>
    80021610:	4481                	li	s1,0
    TEST_END(); 
    80021612:	0000c597          	auipc	a1,0xc
    80021616:	d7658593          	addi	a1,a1,-650 # 8002d388 <__func__.0+0x2d0>
    8002161a:	0000c517          	auipc	a0,0xc
    8002161e:	e1650513          	addi	a0,a0,-490 # 8002d430 <__func__.0+0x378>
    80021622:	035090ef          	jal	8002ae56 <printf>
    80021626:	4511                	li	a0,4
    80021628:	8e1df0ef          	jal	80000f08 <goto_priv>
    8002162c:	9f8e00ef          	jal	80001824 <reset_state>
}
    80021630:	60e2                	ld	ra,24(sp)
    80021632:	6442                	ld	s0,16(sp)
    80021634:	8526                	mv	a0,s1
    80021636:	64a2                	ld	s1,8(sp)
    80021638:	6105                	addi	sp,sp,32
    8002163a:	8082                	ret

000000008002163c <timecmp_test_19>:


bool timecmp_test_19() {
    8002163c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002163e:	0000b597          	auipc	a1,0xb
    80021642:	4e258593          	addi	a1,a1,1250 # 8002cb20 <__func__.2>
    80021646:	0000c517          	auipc	a0,0xc
    8002164a:	d5250513          	addi	a0,a0,-686 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_19() {
    8002164e:	ec06                	sd	ra,24(sp)
    80021650:	e822                	sd	s0,16(sp)
    80021652:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021654:	003090ef          	jal	8002ae56 <printf>
    80021658:	4529                	li	a0,10
    8002165a:	4ea080ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002165e:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021662:	57fd                	li	a5,-1
    80021664:	17fe                	slli	a5,a5,0x3f
    80021666:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002166a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002166e:	30a025f3          	csrr	a1,0x30a
    80021672:	00012517          	auipc	a0,0x12
    80021676:	34e50513          	addi	a0,a0,846 # 800339c0 <__func__.0+0x6908>
    8002167a:	7dc090ef          	jal	8002ae56 <printf>
    8002167e:	60a025f3          	csrr	a1,henvcfg
    80021682:	00012517          	auipc	a0,0x12
    80021686:	33e50513          	addi	a0,a0,830 # 800339c0 <__func__.0+0x6908>
    8002168a:	7cc090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VU);
    8002168e:	4501                	li	a0,0
    80021690:	879df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021694:	f78df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021698:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002169c:	00033597          	auipc	a1,0x33
    800216a0:	9755c583          	lbu	a1,-1675(a1) # 80054011 <excpt+0x1>
    800216a4:	00014517          	auipc	a0,0x14
    800216a8:	01450513          	addi	a0,a0,20 # 800356b8 <__func__.0+0x8600>
    800216ac:	00033417          	auipc	s0,0x33
    800216b0:	96440413          	addi	s0,s0,-1692 # 80054010 <excpt>
    800216b4:	7a2090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    800216b8:	640c                	ld	a1,8(s0)
    800216ba:	00014517          	auipc	a0,0x14
    800216be:	00e50513          	addi	a0,a0,14 # 800356c8 <__func__.0+0x8610>
    800216c2:	794090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800216c6:	08200593          	li	a1,130
    800216ca:	00014617          	auipc	a2,0x14
    800216ce:	0ee60613          	addi	a2,a2,238 # 800357b8 <__func__.0+0x8700>
    800216d2:	0000c517          	auipc	a0,0xc
    800216d6:	cde50513          	addi	a0,a0,-802 # 8002d3b0 <__func__.0+0x2f8>
    800216da:	77c090ef          	jal	8002ae56 <printf>
    800216de:	00033797          	auipc	a5,0x33
    800216e2:	9337c783          	lbu	a5,-1741(a5) # 80054011 <excpt+0x1>
    800216e6:	0000c597          	auipc	a1,0xc
    800216ea:	ca258593          	addi	a1,a1,-862 # 8002d388 <__func__.0+0x2d0>
    800216ee:	cf89                	beqz	a5,80021708 <timecmp_test_19+0xcc>
    800216f0:	6418                	ld	a4,8(s0)
    800216f2:	4789                	li	a5,2
    800216f4:	0000c597          	auipc	a1,0xc
    800216f8:	c8458593          	addi	a1,a1,-892 # 8002d378 <__func__.0+0x2c0>
    800216fc:	00f70663          	beq	a4,a5,80021708 <timecmp_test_19+0xcc>
    80021700:	0000c597          	auipc	a1,0xc
    80021704:	c8858593          	addi	a1,a1,-888 # 8002d388 <__func__.0+0x2d0>
    80021708:	0000c517          	auipc	a0,0xc
    8002170c:	cc050513          	addi	a0,a0,-832 # 8002d3c8 <__func__.0+0x310>
    80021710:	746090ef          	jal	8002ae56 <printf>
    80021714:	00033797          	auipc	a5,0x33
    80021718:	8fd7c783          	lbu	a5,-1795(a5) # 80054011 <excpt+0x1>
    8002171c:	c789                	beqz	a5,80021726 <timecmp_test_19+0xea>
    8002171e:	6418                	ld	a4,8(s0)
    80021720:	4789                	li	a5,2
    80021722:	00f70c63          	beq	a4,a5,8002173a <timecmp_test_19+0xfe>
    80021726:	0000c517          	auipc	a0,0xc
    8002172a:	caa50513          	addi	a0,a0,-854 # 8002d3d0 <__func__.0+0x318>
    8002172e:	728090ef          	jal	8002ae56 <printf>
    80021732:	02900513          	li	a0,41
    80021736:	40e080ef          	jal	80029b44 <putchar>
    8002173a:	4529                	li	a0,10
    8002173c:	408080ef          	jal	80029b44 <putchar>
    80021740:	00033497          	auipc	s1,0x33
    80021744:	8d14c483          	lbu	s1,-1839(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021748:	0000c597          	auipc	a1,0xc
    8002174c:	c4058593          	addi	a1,a1,-960 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021750:	cc91                	beqz	s1,8002176c <timecmp_test_19+0x130>
    80021752:	6418                	ld	a4,8(s0)
    80021754:	4789                	li	a5,2
    TEST_END(); 
    80021756:	0000c597          	auipc	a1,0xc
    8002175a:	c2258593          	addi	a1,a1,-990 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002175e:	00f70763          	beq	a4,a5,8002176c <timecmp_test_19+0x130>
    80021762:	4481                	li	s1,0
    TEST_END(); 
    80021764:	0000c597          	auipc	a1,0xc
    80021768:	c2458593          	addi	a1,a1,-988 # 8002d388 <__func__.0+0x2d0>
    8002176c:	0000c517          	auipc	a0,0xc
    80021770:	cc450513          	addi	a0,a0,-828 # 8002d430 <__func__.0+0x378>
    80021774:	6e2090ef          	jal	8002ae56 <printf>
    80021778:	4511                	li	a0,4
    8002177a:	f8edf0ef          	jal	80000f08 <goto_priv>
    8002177e:	8a6e00ef          	jal	80001824 <reset_state>
}
    80021782:	60e2                	ld	ra,24(sp)
    80021784:	6442                	ld	s0,16(sp)
    80021786:	8526                	mv	a0,s1
    80021788:	64a2                	ld	s1,8(sp)
    8002178a:	6105                	addi	sp,sp,32
    8002178c:	8082                	ret

000000008002178e <timecmp_test_20>:

bool timecmp_test_20() {
    8002178e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021790:	0000b597          	auipc	a1,0xb
    80021794:	3a058593          	addi	a1,a1,928 # 8002cb30 <__func__.1>
    80021798:	0000c517          	auipc	a0,0xc
    8002179c:	c0050513          	addi	a0,a0,-1024 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_20() {
    800217a0:	ec06                	sd	ra,24(sp)
    800217a2:	e822                	sd	s0,16(sp)
    800217a4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800217a6:	6b0090ef          	jal	8002ae56 <printf>
    800217aa:	4529                	li	a0,10
    800217ac:	398080ef          	jal	80029b44 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800217b0:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800217b4:	57fd                	li	a5,-1
    800217b6:	17fe                	slli	a5,a5,0x3f
    800217b8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800217bc:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800217c0:	30a025f3          	csrr	a1,0x30a
    800217c4:	00012517          	auipc	a0,0x12
    800217c8:	1fc50513          	addi	a0,a0,508 # 800339c0 <__func__.0+0x6908>
    800217cc:	68a090ef          	jal	8002ae56 <printf>
    800217d0:	60a025f3          	csrr	a1,henvcfg
    800217d4:	00012517          	auipc	a0,0x12
    800217d8:	1ec50513          	addi	a0,a0,492 # 800339c0 <__func__.0+0x6908>
    800217dc:	67a090ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    800217e0:	4509                	li	a0,2
    800217e2:	f26df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800217e6:	e26df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800217ea:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800217ee:	00033597          	auipc	a1,0x33
    800217f2:	8235c583          	lbu	a1,-2013(a1) # 80054011 <excpt+0x1>
    800217f6:	00014517          	auipc	a0,0x14
    800217fa:	ec250513          	addi	a0,a0,-318 # 800356b8 <__func__.0+0x8600>
    800217fe:	00033417          	auipc	s0,0x33
    80021802:	81240413          	addi	s0,s0,-2030 # 80054010 <excpt>
    80021806:	650090ef          	jal	8002ae56 <printf>
    printf("cause=%d\n",excpt.cause);
    8002180a:	640c                	ld	a1,8(s0)
    8002180c:	00014517          	auipc	a0,0x14
    80021810:	ebc50513          	addi	a0,a0,-324 # 800356c8 <__func__.0+0x8610>
    80021814:	642090ef          	jal	8002ae56 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021818:	08200593          	li	a1,130
    8002181c:	00014617          	auipc	a2,0x14
    80021820:	00c60613          	addi	a2,a2,12 # 80035828 <__func__.0+0x8770>
    80021824:	0000c517          	auipc	a0,0xc
    80021828:	b8c50513          	addi	a0,a0,-1140 # 8002d3b0 <__func__.0+0x2f8>
    8002182c:	62a090ef          	jal	8002ae56 <printf>
    80021830:	00032797          	auipc	a5,0x32
    80021834:	7e17c783          	lbu	a5,2017(a5) # 80054011 <excpt+0x1>
    80021838:	0000c597          	auipc	a1,0xc
    8002183c:	b5058593          	addi	a1,a1,-1200 # 8002d388 <__func__.0+0x2d0>
    80021840:	cf89                	beqz	a5,8002185a <timecmp_test_20+0xcc>
    80021842:	6418                	ld	a4,8(s0)
    80021844:	4789                	li	a5,2
    80021846:	0000c597          	auipc	a1,0xc
    8002184a:	b3258593          	addi	a1,a1,-1230 # 8002d378 <__func__.0+0x2c0>
    8002184e:	00f70663          	beq	a4,a5,8002185a <timecmp_test_20+0xcc>
    80021852:	0000c597          	auipc	a1,0xc
    80021856:	b3658593          	addi	a1,a1,-1226 # 8002d388 <__func__.0+0x2d0>
    8002185a:	0000c517          	auipc	a0,0xc
    8002185e:	b6e50513          	addi	a0,a0,-1170 # 8002d3c8 <__func__.0+0x310>
    80021862:	5f4090ef          	jal	8002ae56 <printf>
    80021866:	00032797          	auipc	a5,0x32
    8002186a:	7ab7c783          	lbu	a5,1963(a5) # 80054011 <excpt+0x1>
    8002186e:	c789                	beqz	a5,80021878 <timecmp_test_20+0xea>
    80021870:	6418                	ld	a4,8(s0)
    80021872:	4789                	li	a5,2
    80021874:	00f70c63          	beq	a4,a5,8002188c <timecmp_test_20+0xfe>
    80021878:	0000c517          	auipc	a0,0xc
    8002187c:	b5850513          	addi	a0,a0,-1192 # 8002d3d0 <__func__.0+0x318>
    80021880:	5d6090ef          	jal	8002ae56 <printf>
    80021884:	02900513          	li	a0,41
    80021888:	2bc080ef          	jal	80029b44 <putchar>
    8002188c:	4529                	li	a0,10
    8002188e:	2b6080ef          	jal	80029b44 <putchar>
    80021892:	00032497          	auipc	s1,0x32
    80021896:	77f4c483          	lbu	s1,1919(s1) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002189a:	0000c597          	auipc	a1,0xc
    8002189e:	aee58593          	addi	a1,a1,-1298 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800218a2:	cc91                	beqz	s1,800218be <timecmp_test_20+0x130>
    800218a4:	6418                	ld	a4,8(s0)
    800218a6:	4789                	li	a5,2
    TEST_END(); 
    800218a8:	0000c597          	auipc	a1,0xc
    800218ac:	ad058593          	addi	a1,a1,-1328 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800218b0:	00f70763          	beq	a4,a5,800218be <timecmp_test_20+0x130>
    800218b4:	4481                	li	s1,0
    TEST_END(); 
    800218b6:	0000c597          	auipc	a1,0xc
    800218ba:	ad258593          	addi	a1,a1,-1326 # 8002d388 <__func__.0+0x2d0>
    800218be:	0000c517          	auipc	a0,0xc
    800218c2:	b7250513          	addi	a0,a0,-1166 # 8002d430 <__func__.0+0x378>
    800218c6:	590090ef          	jal	8002ae56 <printf>
    800218ca:	4511                	li	a0,4
    800218cc:	e3cdf0ef          	jal	80000f08 <goto_priv>
    800218d0:	f55df0ef          	jal	80001824 <reset_state>
}
    800218d4:	60e2                	ld	ra,24(sp)
    800218d6:	6442                	ld	s0,16(sp)
    800218d8:	8526                	mv	a0,s1
    800218da:	64a2                	ld	s1,8(sp)
    800218dc:	6105                	addi	sp,sp,32
    800218de:	8082                	ret

00000000800218e0 <timecmp_test_21>:

bool timecmp_test_21() {
    800218e0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800218e2:	0000b597          	auipc	a1,0xb
    800218e6:	25e58593          	addi	a1,a1,606 # 8002cb40 <__func__.0>
    800218ea:	0000c517          	auipc	a0,0xc
    800218ee:	aae50513          	addi	a0,a0,-1362 # 8002d398 <__func__.0+0x2e0>
bool timecmp_test_21() {
    800218f2:	ec06                	sd	ra,24(sp)
    800218f4:	e822                	sd	s0,16(sp)
    800218f6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800218f8:	55e090ef          	jal	8002ae56 <printf>
    800218fc:	4529                	li	a0,10
    800218fe:	246080ef          	jal	80029b44 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021902:	57fd                	li	a5,-1
    80021904:	17fe                	slli	a5,a5,0x3f
    80021906:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002190a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8002190e:	4509                	li	a0,2
    80021910:	df8df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021914:	cf8df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021918:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002191c:	08200593          	li	a1,130
    80021920:	00014617          	auipc	a2,0x14
    80021924:	f7860613          	addi	a2,a2,-136 # 80035898 <__func__.0+0x87e0>
    80021928:	0000c517          	auipc	a0,0xc
    8002192c:	a8850513          	addi	a0,a0,-1400 # 8002d3b0 <__func__.0+0x2f8>
    80021930:	526090ef          	jal	8002ae56 <printf>
    80021934:	00032797          	auipc	a5,0x32
    80021938:	6dd7c783          	lbu	a5,1757(a5) # 80054011 <excpt+0x1>
    8002193c:	00032497          	auipc	s1,0x32
    80021940:	6d448493          	addi	s1,s1,1748 # 80054010 <excpt>
    80021944:	0000c597          	auipc	a1,0xc
    80021948:	a4458593          	addi	a1,a1,-1468 # 8002d388 <__func__.0+0x2d0>
    8002194c:	cf89                	beqz	a5,80021966 <timecmp_test_21+0x86>
    8002194e:	6498                	ld	a4,8(s1)
    80021950:	4789                	li	a5,2
    80021952:	0000c597          	auipc	a1,0xc
    80021956:	a2658593          	addi	a1,a1,-1498 # 8002d378 <__func__.0+0x2c0>
    8002195a:	00f70663          	beq	a4,a5,80021966 <timecmp_test_21+0x86>
    8002195e:	0000c597          	auipc	a1,0xc
    80021962:	a2a58593          	addi	a1,a1,-1494 # 8002d388 <__func__.0+0x2d0>
    80021966:	0000c517          	auipc	a0,0xc
    8002196a:	a6250513          	addi	a0,a0,-1438 # 8002d3c8 <__func__.0+0x310>
    8002196e:	4e8090ef          	jal	8002ae56 <printf>
    80021972:	00032797          	auipc	a5,0x32
    80021976:	69f7c783          	lbu	a5,1695(a5) # 80054011 <excpt+0x1>
    8002197a:	c789                	beqz	a5,80021984 <timecmp_test_21+0xa4>
    8002197c:	6498                	ld	a4,8(s1)
    8002197e:	4789                	li	a5,2
    80021980:	00f70c63          	beq	a4,a5,80021998 <timecmp_test_21+0xb8>
    80021984:	0000c517          	auipc	a0,0xc
    80021988:	a4c50513          	addi	a0,a0,-1460 # 8002d3d0 <__func__.0+0x318>
    8002198c:	4ca090ef          	jal	8002ae56 <printf>
    80021990:	02900513          	li	a0,41
    80021994:	1b0080ef          	jal	80029b44 <putchar>
    80021998:	4529                	li	a0,10
    8002199a:	1aa080ef          	jal	80029b44 <putchar>
    8002199e:	00032797          	auipc	a5,0x32
    800219a2:	6737c783          	lbu	a5,1651(a5) # 80054011 <excpt+0x1>
    800219a6:	4401                	li	s0,0
    800219a8:	c789                	beqz	a5,800219b2 <timecmp_test_21+0xd2>
    800219aa:	6480                	ld	s0,8(s1)
    800219ac:	1479                	addi	s0,s0,-2
    800219ae:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    800219b2:	4501                	li	a0,0
    800219b4:	d54df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800219b8:	c54df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800219bc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800219c0:	08200593          	li	a1,130
    800219c4:	00014617          	auipc	a2,0x14
    800219c8:	f3c60613          	addi	a2,a2,-196 # 80035900 <__func__.0+0x8848>
    800219cc:	0000c517          	auipc	a0,0xc
    800219d0:	9e450513          	addi	a0,a0,-1564 # 8002d3b0 <__func__.0+0x2f8>
    800219d4:	482090ef          	jal	8002ae56 <printf>
    800219d8:	00032797          	auipc	a5,0x32
    800219dc:	6397c783          	lbu	a5,1593(a5) # 80054011 <excpt+0x1>
    800219e0:	0000c597          	auipc	a1,0xc
    800219e4:	9a858593          	addi	a1,a1,-1624 # 8002d388 <__func__.0+0x2d0>
    800219e8:	cf89                	beqz	a5,80021a02 <timecmp_test_21+0x122>
    800219ea:	6498                	ld	a4,8(s1)
    800219ec:	4789                	li	a5,2
    800219ee:	0000c597          	auipc	a1,0xc
    800219f2:	98a58593          	addi	a1,a1,-1654 # 8002d378 <__func__.0+0x2c0>
    800219f6:	00f70663          	beq	a4,a5,80021a02 <timecmp_test_21+0x122>
    800219fa:	0000c597          	auipc	a1,0xc
    800219fe:	98e58593          	addi	a1,a1,-1650 # 8002d388 <__func__.0+0x2d0>
    80021a02:	0000c517          	auipc	a0,0xc
    80021a06:	9c650513          	addi	a0,a0,-1594 # 8002d3c8 <__func__.0+0x310>
    80021a0a:	44c090ef          	jal	8002ae56 <printf>
    80021a0e:	00032797          	auipc	a5,0x32
    80021a12:	6037c783          	lbu	a5,1539(a5) # 80054011 <excpt+0x1>
    80021a16:	c789                	beqz	a5,80021a20 <timecmp_test_21+0x140>
    80021a18:	6498                	ld	a4,8(s1)
    80021a1a:	4789                	li	a5,2
    80021a1c:	00f70c63          	beq	a4,a5,80021a34 <timecmp_test_21+0x154>
    80021a20:	0000c517          	auipc	a0,0xc
    80021a24:	9b050513          	addi	a0,a0,-1616 # 8002d3d0 <__func__.0+0x318>
    80021a28:	42e090ef          	jal	8002ae56 <printf>
    80021a2c:	02900513          	li	a0,41
    80021a30:	114080ef          	jal	80029b44 <putchar>
    80021a34:	4529                	li	a0,10
    80021a36:	10e080ef          	jal	80029b44 <putchar>
    80021a3a:	c015                	beqz	s0,80021a5e <timecmp_test_21+0x17e>
    80021a3c:	00032417          	auipc	s0,0x32
    80021a40:	5d544403          	lbu	s0,1493(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021a44:	0000c597          	auipc	a1,0xc
    80021a48:	94458593          	addi	a1,a1,-1724 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a4c:	cc11                	beqz	s0,80021a68 <timecmp_test_21+0x188>
    80021a4e:	6498                	ld	a4,8(s1)
    80021a50:	4789                	li	a5,2
    TEST_END(); 
    80021a52:	0000c597          	auipc	a1,0xc
    80021a56:	92658593          	addi	a1,a1,-1754 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a5a:	00f70763          	beq	a4,a5,80021a68 <timecmp_test_21+0x188>
    80021a5e:	4401                	li	s0,0
    TEST_END(); 
    80021a60:	0000c597          	auipc	a1,0xc
    80021a64:	92858593          	addi	a1,a1,-1752 # 8002d388 <__func__.0+0x2d0>
    80021a68:	0000c517          	auipc	a0,0xc
    80021a6c:	9c850513          	addi	a0,a0,-1592 # 8002d430 <__func__.0+0x378>
    80021a70:	3e6090ef          	jal	8002ae56 <printf>
    80021a74:	4511                	li	a0,4
    80021a76:	c92df0ef          	jal	80000f08 <goto_priv>
    80021a7a:	dabdf0ef          	jal	80001824 <reset_state>
    80021a7e:	60e2                	ld	ra,24(sp)
    80021a80:	8522                	mv	a0,s0
    80021a82:	6442                	ld	s0,16(sp)
    80021a84:	64a2                	ld	s1,8(sp)
    80021a86:	6105                	addi	sp,sp,32
    80021a88:	8082                	ret

0000000080021a8a <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80021a8a:	7179                	addi	sp,sp,-48

    TEST_START();
    80021a8c:	0000b597          	auipc	a1,0xb
    80021a90:	0c458593          	addi	a1,a1,196 # 8002cb50 <__func__.2>
    80021a94:	0000c517          	auipc	a0,0xc
    80021a98:	90450513          	addi	a0,a0,-1788 # 8002d398 <__func__.0+0x2e0>
bool mix_instruction_1(){
    80021a9c:	f406                	sd	ra,40(sp)
    80021a9e:	f022                	sd	s0,32(sp)
    80021aa0:	ec26                	sd	s1,24(sp)
    80021aa2:	e84a                	sd	s2,16(sp)
    80021aa4:	e44e                	sd	s3,8(sp)
    TEST_START();
    80021aa6:	3b0090ef          	jal	8002ae56 <printf>
    80021aaa:	4529                	li	a0,10
    80021aac:	098080ef          	jal	80029b44 <putchar>

    goto_priv(PRIV_M);
    80021ab0:	4511                	li	a0,4
    80021ab2:	c56df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021ab6:	57fd                	li	a5,-1
    80021ab8:	17fe                	slli	a5,a5,0x3f
    80021aba:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021abe:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021ac2:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80021ac6:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80021aca:	4509                	li	a0,2
    80021acc:	c3cdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021ad0:	b3cdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80021ad4:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80021ad8:	08200593          	li	a1,130
    80021adc:	00014617          	auipc	a2,0x14
    80021ae0:	e8c60613          	addi	a2,a2,-372 # 80035968 <__func__.0+0x88b0>
    80021ae4:	0000c517          	auipc	a0,0xc
    80021ae8:	8cc50513          	addi	a0,a0,-1844 # 8002d3b0 <__func__.0+0x2f8>
    80021aec:	36a090ef          	jal	8002ae56 <printf>
    80021af0:	00032797          	auipc	a5,0x32
    80021af4:	5217c783          	lbu	a5,1313(a5) # 80054011 <excpt+0x1>
    80021af8:	00032497          	auipc	s1,0x32
    80021afc:	51848493          	addi	s1,s1,1304 # 80054010 <excpt>
    80021b00:	0000c597          	auipc	a1,0xc
    80021b04:	88858593          	addi	a1,a1,-1912 # 8002d388 <__func__.0+0x2d0>
    80021b08:	cf89                	beqz	a5,80021b22 <mix_instruction_1+0x98>
    80021b0a:	6498                	ld	a4,8(s1)
    80021b0c:	47d9                	li	a5,22
    80021b0e:	0000c597          	auipc	a1,0xc
    80021b12:	86a58593          	addi	a1,a1,-1942 # 8002d378 <__func__.0+0x2c0>
    80021b16:	00f70663          	beq	a4,a5,80021b22 <mix_instruction_1+0x98>
    80021b1a:	0000c597          	auipc	a1,0xc
    80021b1e:	86e58593          	addi	a1,a1,-1938 # 8002d388 <__func__.0+0x2d0>
    80021b22:	0000c517          	auipc	a0,0xc
    80021b26:	8a650513          	addi	a0,a0,-1882 # 8002d3c8 <__func__.0+0x310>
    80021b2a:	32c090ef          	jal	8002ae56 <printf>
    80021b2e:	00032797          	auipc	a5,0x32
    80021b32:	4e37c783          	lbu	a5,1251(a5) # 80054011 <excpt+0x1>
    80021b36:	c789                	beqz	a5,80021b40 <mix_instruction_1+0xb6>
    80021b38:	6498                	ld	a4,8(s1)
    80021b3a:	47d9                	li	a5,22
    80021b3c:	00f70c63          	beq	a4,a5,80021b54 <mix_instruction_1+0xca>
    80021b40:	0000c517          	auipc	a0,0xc
    80021b44:	89050513          	addi	a0,a0,-1904 # 8002d3d0 <__func__.0+0x318>
    80021b48:	30e090ef          	jal	8002ae56 <printf>
    80021b4c:	02900513          	li	a0,41
    80021b50:	7f5070ef          	jal	80029b44 <putchar>
    80021b54:	4529                	li	a0,10
    80021b56:	7ef070ef          	jal	80029b44 <putchar>
    80021b5a:	00032797          	auipc	a5,0x32
    80021b5e:	4b77c783          	lbu	a5,1207(a5) # 80054011 <excpt+0x1>
    80021b62:	4401                	li	s0,0
    80021b64:	c789                	beqz	a5,80021b6e <mix_instruction_1+0xe4>
    80021b66:	6480                	ld	s0,8(s1)
    80021b68:	1429                	addi	s0,s0,-22
    80021b6a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021b6e:	4511                	li	a0,4
    80021b70:	b98df0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021b74:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021b78:	450d                	li	a0,3
    80021b7a:	b8edf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021b7e:	a8edf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    80021b82:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80021b86:	08200593          	li	a1,130
    80021b8a:	00013617          	auipc	a2,0x13
    80021b8e:	9f660613          	addi	a2,a2,-1546 # 80034580 <__func__.0+0x74c8>
    80021b92:	0000c517          	auipc	a0,0xc
    80021b96:	81e50513          	addi	a0,a0,-2018 # 8002d3b0 <__func__.0+0x2f8>
    80021b9a:	2bc090ef          	jal	8002ae56 <printf>
    80021b9e:	00032797          	auipc	a5,0x32
    80021ba2:	4737c783          	lbu	a5,1139(a5) # 80054011 <excpt+0x1>
    80021ba6:	0000b597          	auipc	a1,0xb
    80021baa:	7e258593          	addi	a1,a1,2018 # 8002d388 <__func__.0+0x2d0>
    80021bae:	cf89                	beqz	a5,80021bc8 <mix_instruction_1+0x13e>
    80021bb0:	6498                	ld	a4,8(s1)
    80021bb2:	4789                	li	a5,2
    80021bb4:	0000b597          	auipc	a1,0xb
    80021bb8:	7c458593          	addi	a1,a1,1988 # 8002d378 <__func__.0+0x2c0>
    80021bbc:	00f70663          	beq	a4,a5,80021bc8 <mix_instruction_1+0x13e>
    80021bc0:	0000b597          	auipc	a1,0xb
    80021bc4:	7c858593          	addi	a1,a1,1992 # 8002d388 <__func__.0+0x2d0>
    80021bc8:	0000c517          	auipc	a0,0xc
    80021bcc:	80050513          	addi	a0,a0,-2048 # 8002d3c8 <__func__.0+0x310>
    80021bd0:	286090ef          	jal	8002ae56 <printf>
    80021bd4:	00032797          	auipc	a5,0x32
    80021bd8:	43d7c783          	lbu	a5,1085(a5) # 80054011 <excpt+0x1>
    80021bdc:	c789                	beqz	a5,80021be6 <mix_instruction_1+0x15c>
    80021bde:	6498                	ld	a4,8(s1)
    80021be0:	4789                	li	a5,2
    80021be2:	00f70c63          	beq	a4,a5,80021bfa <mix_instruction_1+0x170>
    80021be6:	0000b517          	auipc	a0,0xb
    80021bea:	7ea50513          	addi	a0,a0,2026 # 8002d3d0 <__func__.0+0x318>
    80021bee:	268090ef          	jal	8002ae56 <printf>
    80021bf2:	02900513          	li	a0,41
    80021bf6:	74f070ef          	jal	80029b44 <putchar>
    80021bfa:	4529                	li	a0,10
    80021bfc:	749070ef          	jal	80029b44 <putchar>
    80021c00:	c801                	beqz	s0,80021c10 <mix_instruction_1+0x186>
    80021c02:	00032797          	auipc	a5,0x32
    80021c06:	40f7c783          	lbu	a5,1039(a5) # 80054011 <excpt+0x1>
    80021c0a:	4401                	li	s0,0
    80021c0c:	040794e3          	bnez	a5,80022454 <mix_instruction_1+0x9ca>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021c10:	4511                	li	a0,4
    80021c12:	af6df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80021c16:	004007b7          	lui	a5,0x400
    80021c1a:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80021c1e:	002007b7          	lui	a5,0x200
    80021c22:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80021c26:	4501                	li	a0,0
    80021c28:	ae0df0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80021c2c:	9e0df0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80021c30:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80021c34:	08200593          	li	a1,130
    80021c38:	0000d617          	auipc	a2,0xd
    80021c3c:	8b060613          	addi	a2,a2,-1872 # 8002e4e8 <__func__.0+0x1430>
    80021c40:	0000b517          	auipc	a0,0xb
    80021c44:	77050513          	addi	a0,a0,1904 # 8002d3b0 <__func__.0+0x2f8>
    80021c48:	20e090ef          	jal	8002ae56 <printf>
    80021c4c:	00032797          	auipc	a5,0x32
    80021c50:	3c57c783          	lbu	a5,965(a5) # 80054011 <excpt+0x1>
    80021c54:	0000b597          	auipc	a1,0xb
    80021c58:	73458593          	addi	a1,a1,1844 # 8002d388 <__func__.0+0x2d0>
    80021c5c:	cf89                	beqz	a5,80021c76 <mix_instruction_1+0x1ec>
    80021c5e:	6498                	ld	a4,8(s1)
    80021c60:	47d9                	li	a5,22
    80021c62:	0000b597          	auipc	a1,0xb
    80021c66:	71658593          	addi	a1,a1,1814 # 8002d378 <__func__.0+0x2c0>
    80021c6a:	00f70663          	beq	a4,a5,80021c76 <mix_instruction_1+0x1ec>
    80021c6e:	0000b597          	auipc	a1,0xb
    80021c72:	71a58593          	addi	a1,a1,1818 # 8002d388 <__func__.0+0x2d0>
    80021c76:	0000b517          	auipc	a0,0xb
    80021c7a:	75250513          	addi	a0,a0,1874 # 8002d3c8 <__func__.0+0x310>
    80021c7e:	1d8090ef          	jal	8002ae56 <printf>
    80021c82:	00032797          	auipc	a5,0x32
    80021c86:	38f7c783          	lbu	a5,911(a5) # 80054011 <excpt+0x1>
    80021c8a:	c789                	beqz	a5,80021c94 <mix_instruction_1+0x20a>
    80021c8c:	6498                	ld	a4,8(s1)
    80021c8e:	47d9                	li	a5,22
    80021c90:	00f70c63          	beq	a4,a5,80021ca8 <mix_instruction_1+0x21e>
    80021c94:	0000b517          	auipc	a0,0xb
    80021c98:	73c50513          	addi	a0,a0,1852 # 8002d3d0 <__func__.0+0x318>
    80021c9c:	1ba090ef          	jal	8002ae56 <printf>
    80021ca0:	02900513          	li	a0,41
    80021ca4:	6a1070ef          	jal	80029b44 <putchar>
    80021ca8:	4529                	li	a0,10
    80021caa:	69b070ef          	jal	80029b44 <putchar>
    80021cae:	c801                	beqz	s0,80021cbe <mix_instruction_1+0x234>
    80021cb0:	00032797          	auipc	a5,0x32
    80021cb4:	3617c783          	lbu	a5,865(a5) # 80054011 <excpt+0x1>
    80021cb8:	4401                	li	s0,0
    80021cba:	78079763          	bnez	a5,80022448 <mix_instruction_1+0x9be>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021cbe:	4511                	li	a0,4
    80021cc0:	a48df0ef          	jal	80000f08 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80021cc4:	91dde0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80021cc8:	cfdde0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80021ccc:	ab1de0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80021cd0:	450d                	li	a0,3
    80021cd2:	a36df0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    80021cd6:	4501                	li	a0,0
    80021cd8:	950df0ef          	jal	80000e28 <set_prev_priv>
    *((volatile uint64_t*) addr) = val;
    80021cdc:	00017917          	auipc	s2,0x17
    80021ce0:	c4c90913          	addi	s2,s2,-948 # 80038928 <__func__.0+0xb870>
    TEST_SETUP_EXCEPT();
    80021ce4:	928df0ef          	jal	80000e0c <test_setup_except_function>
    80021ce8:	00093683          	ld	a3,0(s2)
    80021cec:	44019737          	lui	a4,0x44019
    asm volatile(
    80021cf0:	000807b7          	lui	a5,0x80
    80021cf4:	0706                	slli	a4,a4,0x1
    80021cf6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021cf8:	e314                	sd	a3,0(a4)
    80021cfa:	07b6                	slli	a5,a5,0xd
    80021cfc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80021d00:	08200593          	li	a1,130
    80021d04:	0000c617          	auipc	a2,0xc
    80021d08:	07460613          	addi	a2,a2,116 # 8002dd78 <__func__.0+0xcc0>
    80021d0c:	0000b517          	auipc	a0,0xb
    80021d10:	6a450513          	addi	a0,a0,1700 # 8002d3b0 <__func__.0+0x2f8>
    80021d14:	142090ef          	jal	8002ae56 <printf>
    80021d18:	00032797          	auipc	a5,0x32
    80021d1c:	2f97c783          	lbu	a5,761(a5) # 80054011 <excpt+0x1>
    80021d20:	0000b597          	auipc	a1,0xb
    80021d24:	66858593          	addi	a1,a1,1640 # 8002d388 <__func__.0+0x2d0>
    80021d28:	e789                	bnez	a5,80021d32 <mix_instruction_1+0x2a8>
    80021d2a:	0000b597          	auipc	a1,0xb
    80021d2e:	64e58593          	addi	a1,a1,1614 # 8002d378 <__func__.0+0x2c0>
    80021d32:	0000b517          	auipc	a0,0xb
    80021d36:	69650513          	addi	a0,a0,1686 # 8002d3c8 <__func__.0+0x310>
    80021d3a:	11c090ef          	jal	8002ae56 <printf>
    80021d3e:	00032797          	auipc	a5,0x32
    80021d42:	2d37c783          	lbu	a5,723(a5) # 80054011 <excpt+0x1>
    80021d46:	76079563          	bnez	a5,800224b0 <mix_instruction_1+0xa26>
    80021d4a:	4529                	li	a0,10
    80021d4c:	5f9070ef          	jal	80029b44 <putchar>
    80021d50:	c419                	beqz	s0,80021d5e <mix_instruction_1+0x2d4>
    80021d52:	00032417          	auipc	s0,0x32
    80021d56:	2bf44403          	lbu	s0,703(s0) # 80054011 <excpt+0x1>
    80021d5a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80021d5e:	4509                	li	a0,2
    80021d60:	8c8df0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80021d64:	8a8df0ef          	jal	80000e0c <test_setup_except_function>
    80021d68:	00093683          	ld	a3,0(s2)
    80021d6c:	44019737          	lui	a4,0x44019
    80021d70:	000807b7          	lui	a5,0x80
    80021d74:	0706                	slli	a4,a4,0x1
    80021d76:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021d78:	e314                	sd	a3,0(a4)
    80021d7a:	07b6                	slli	a5,a5,0xd
    80021d7c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80021d80:	08200593          	li	a1,130
    80021d84:	0000c617          	auipc	a2,0xc
    80021d88:	02460613          	addi	a2,a2,36 # 8002dda8 <__func__.0+0xcf0>
    80021d8c:	0000b517          	auipc	a0,0xb
    80021d90:	62450513          	addi	a0,a0,1572 # 8002d3b0 <__func__.0+0x2f8>
    80021d94:	0c2090ef          	jal	8002ae56 <printf>
    80021d98:	00032797          	auipc	a5,0x32
    80021d9c:	2797c783          	lbu	a5,633(a5) # 80054011 <excpt+0x1>
    80021da0:	0000b597          	auipc	a1,0xb
    80021da4:	5e858593          	addi	a1,a1,1512 # 8002d388 <__func__.0+0x2d0>
    80021da8:	cf89                	beqz	a5,80021dc2 <mix_instruction_1+0x338>
    80021daa:	6498                	ld	a4,8(s1)
    80021dac:	47b5                	li	a5,13
    80021dae:	0000b597          	auipc	a1,0xb
    80021db2:	5ca58593          	addi	a1,a1,1482 # 8002d378 <__func__.0+0x2c0>
    80021db6:	00f70663          	beq	a4,a5,80021dc2 <mix_instruction_1+0x338>
    80021dba:	0000b597          	auipc	a1,0xb
    80021dbe:	5ce58593          	addi	a1,a1,1486 # 8002d388 <__func__.0+0x2d0>
    80021dc2:	0000b517          	auipc	a0,0xb
    80021dc6:	60650513          	addi	a0,a0,1542 # 8002d3c8 <__func__.0+0x310>
    80021dca:	08c090ef          	jal	8002ae56 <printf>
    80021dce:	00032797          	auipc	a5,0x32
    80021dd2:	2437c783          	lbu	a5,579(a5) # 80054011 <excpt+0x1>
    80021dd6:	c789                	beqz	a5,80021de0 <mix_instruction_1+0x356>
    80021dd8:	6498                	ld	a4,8(s1)
    80021dda:	47b5                	li	a5,13
    80021ddc:	00f70c63          	beq	a4,a5,80021df4 <mix_instruction_1+0x36a>
    80021de0:	0000b517          	auipc	a0,0xb
    80021de4:	5f050513          	addi	a0,a0,1520 # 8002d3d0 <__func__.0+0x318>
    80021de8:	06e090ef          	jal	8002ae56 <printf>
    80021dec:	02900513          	li	a0,41
    80021df0:	555070ef          	jal	80029b44 <putchar>
    80021df4:	4529                	li	a0,10
    80021df6:	54f070ef          	jal	80029b44 <putchar>
    80021dfa:	c801                	beqz	s0,80021e0a <mix_instruction_1+0x380>
    80021dfc:	00032797          	auipc	a5,0x32
    80021e00:	2157c783          	lbu	a5,533(a5) # 80054011 <excpt+0x1>
    80021e04:	4401                	li	s0,0
    80021e06:	66079263          	bnez	a5,8002246a <mix_instruction_1+0x9e0>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80021e0a:	4511                	li	a0,4
    80021e0c:	8fcdf0ef          	jal	80000f08 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80021e10:	000407b7          	lui	a5,0x40
    80021e14:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80021e18:	450d                	li	a0,3
    80021e1a:	8eedf0ef          	jal	80000f08 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80021e1e:	fefde0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80021e22:	37ab77b7          	lui	a5,0x37ab7
    80021e26:	00080737          	lui	a4,0x80
    80021e2a:	078a                	slli	a5,a5,0x2
    80021e2c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80021e2e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80021e32:	0736                	slli	a4,a4,0xd
    80021e34:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80021e38:	08200593          	li	a1,130
    80021e3c:	00011617          	auipc	a2,0x11
    80021e40:	b4c60613          	addi	a2,a2,-1204 # 80032988 <__func__.0+0x58d0>
    80021e44:	0000b517          	auipc	a0,0xb
    80021e48:	56c50513          	addi	a0,a0,1388 # 8002d3b0 <__func__.0+0x2f8>
    80021e4c:	00a090ef          	jal	8002ae56 <printf>
    80021e50:	00032797          	auipc	a5,0x32
    80021e54:	1c17c783          	lbu	a5,449(a5) # 80054011 <excpt+0x1>
    80021e58:	0000b597          	auipc	a1,0xb
    80021e5c:	53058593          	addi	a1,a1,1328 # 8002d388 <__func__.0+0x2d0>
    80021e60:	cf89                	beqz	a5,80021e7a <mix_instruction_1+0x3f0>
    80021e62:	6498                	ld	a4,8(s1)
    80021e64:	47bd                	li	a5,15
    80021e66:	0000b597          	auipc	a1,0xb
    80021e6a:	51258593          	addi	a1,a1,1298 # 8002d378 <__func__.0+0x2c0>
    80021e6e:	00f70663          	beq	a4,a5,80021e7a <mix_instruction_1+0x3f0>
    80021e72:	0000b597          	auipc	a1,0xb
    80021e76:	51658593          	addi	a1,a1,1302 # 8002d388 <__func__.0+0x2d0>
    80021e7a:	0000b517          	auipc	a0,0xb
    80021e7e:	54e50513          	addi	a0,a0,1358 # 8002d3c8 <__func__.0+0x310>
    80021e82:	7d5080ef          	jal	8002ae56 <printf>
    80021e86:	00032797          	auipc	a5,0x32
    80021e8a:	18b7c783          	lbu	a5,395(a5) # 80054011 <excpt+0x1>
    80021e8e:	c789                	beqz	a5,80021e98 <mix_instruction_1+0x40e>
    80021e90:	6498                	ld	a4,8(s1)
    80021e92:	47bd                	li	a5,15
    80021e94:	00f70c63          	beq	a4,a5,80021eac <mix_instruction_1+0x422>
    80021e98:	0000b517          	auipc	a0,0xb
    80021e9c:	53850513          	addi	a0,a0,1336 # 8002d3d0 <__func__.0+0x318>
    80021ea0:	7b7080ef          	jal	8002ae56 <printf>
    80021ea4:	02900513          	li	a0,41
    80021ea8:	49d070ef          	jal	80029b44 <putchar>
    80021eac:	4529                	li	a0,10
    80021eae:	497070ef          	jal	80029b44 <putchar>
    80021eb2:	c801                	beqz	s0,80021ec2 <mix_instruction_1+0x438>
    80021eb4:	00032797          	auipc	a5,0x32
    80021eb8:	15d7c783          	lbu	a5,349(a5) # 80054011 <excpt+0x1>
    80021ebc:	4401                	li	s0,0
    80021ebe:	5a079b63          	bnez	a5,80022474 <mix_instruction_1+0x9ea>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021ec2:	4511                	li	a0,4
    80021ec4:	844df0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80021ec8:	57fd                	li	a5,-1
    80021eca:	03f79713          	slli	a4,a5,0x3f
    80021ece:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80021ed2:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80021ed6:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80021eda:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80021ede:	64402973          	csrr	s2,hip
    80021ee2:	0000c617          	auipc	a2,0xc
    80021ee6:	98e60613          	addi	a2,a2,-1650 # 8002d870 <__func__.0+0x7b8>
    80021eea:	08200593          	li	a1,130
    80021eee:	0000b517          	auipc	a0,0xb
    80021ef2:	4c250513          	addi	a0,a0,1218 # 8002d3b0 <__func__.0+0x2f8>
    80021ef6:	4991                	li	s3,4
    80021ef8:	75f080ef          	jal	8002ae56 <printf>
    80021efc:	59390163          	beq	s2,s3,8002247e <mix_instruction_1+0x9f4>
    80021f00:	0000b597          	auipc	a1,0xb
    80021f04:	48858593          	addi	a1,a1,1160 # 8002d388 <__func__.0+0x2d0>
    80021f08:	0000b517          	auipc	a0,0xb
    80021f0c:	4c050513          	addi	a0,a0,1216 # 8002d3c8 <__func__.0+0x310>
    80021f10:	747080ef          	jal	8002ae56 <printf>
    80021f14:	0000b517          	auipc	a0,0xb
    80021f18:	4bc50513          	addi	a0,a0,1212 # 8002d3d0 <__func__.0+0x318>
    80021f1c:	73b080ef          	jal	8002ae56 <printf>
    80021f20:	86ce                	mv	a3,s3
    80021f22:	864a                	mv	a2,s2
    80021f24:	02d00593          	li	a1,45
    80021f28:	0000c517          	auipc	a0,0xc
    80021f2c:	95050513          	addi	a0,a0,-1712 # 8002d878 <__func__.0+0x7c0>
    80021f30:	727080ef          	jal	8002ae56 <printf>
    80021f34:	02900513          	li	a0,41
    80021f38:	40d070ef          	jal	80029b44 <putchar>
    80021f3c:	4529                	li	a0,10
    80021f3e:	407070ef          	jal	80029b44 <putchar>
    80021f42:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80021f44:	14402973          	csrr	s2,sip
    80021f48:	0000c617          	auipc	a2,0xc
    80021f4c:	94860613          	addi	a2,a2,-1720 # 8002d890 <__func__.0+0x7d8>
    80021f50:	08200593          	li	a1,130
    80021f54:	0000b517          	auipc	a0,0xb
    80021f58:	45c50513          	addi	a0,a0,1116 # 8002d3b0 <__func__.0+0x2f8>
    80021f5c:	22200993          	li	s3,546
    80021f60:	6f7080ef          	jal	8002ae56 <printf>
    80021f64:	4b390e63          	beq	s2,s3,80022420 <mix_instruction_1+0x996>
    80021f68:	0000b597          	auipc	a1,0xb
    80021f6c:	42058593          	addi	a1,a1,1056 # 8002d388 <__func__.0+0x2d0>
    80021f70:	0000b517          	auipc	a0,0xb
    80021f74:	45850513          	addi	a0,a0,1112 # 8002d3c8 <__func__.0+0x310>
    80021f78:	6df080ef          	jal	8002ae56 <printf>
    80021f7c:	0000b517          	auipc	a0,0xb
    80021f80:	45450513          	addi	a0,a0,1108 # 8002d3d0 <__func__.0+0x318>
    80021f84:	6d3080ef          	jal	8002ae56 <printf>
    80021f88:	86ce                	mv	a3,s3
    80021f8a:	864a                	mv	a2,s2
    80021f8c:	02d00593          	li	a1,45
    80021f90:	0000c517          	auipc	a0,0xc
    80021f94:	8e850513          	addi	a0,a0,-1816 # 8002d878 <__func__.0+0x7c0>
    80021f98:	6bf080ef          	jal	8002ae56 <printf>
    80021f9c:	02900513          	li	a0,41
    80021fa0:	3a5070ef          	jal	80029b44 <putchar>
    80021fa4:	4529                	li	a0,10
    80021fa6:	39f070ef          	jal	80029b44 <putchar>
    80021faa:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80021fac:	24402973          	csrr	s2,vsip
    80021fb0:	0000c617          	auipc	a2,0xc
    80021fb4:	8b060613          	addi	a2,a2,-1872 # 8002d860 <__func__.0+0x7a8>
    80021fb8:	08200593          	li	a1,130
    80021fbc:	0000b517          	auipc	a0,0xb
    80021fc0:	3f450513          	addi	a0,a0,1012 # 8002d3b0 <__func__.0+0x2f8>
    80021fc4:	4989                	li	s3,2
    80021fc6:	691080ef          	jal	8002ae56 <printf>
    80021fca:	43390d63          	beq	s2,s3,80022404 <mix_instruction_1+0x97a>
    80021fce:	0000b597          	auipc	a1,0xb
    80021fd2:	3ba58593          	addi	a1,a1,954 # 8002d388 <__func__.0+0x2d0>
    80021fd6:	0000b517          	auipc	a0,0xb
    80021fda:	3f250513          	addi	a0,a0,1010 # 8002d3c8 <__func__.0+0x310>
    80021fde:	679080ef          	jal	8002ae56 <printf>
    80021fe2:	0000b517          	auipc	a0,0xb
    80021fe6:	3ee50513          	addi	a0,a0,1006 # 8002d3d0 <__func__.0+0x318>
    80021fea:	66d080ef          	jal	8002ae56 <printf>
    80021fee:	86ce                	mv	a3,s3
    80021ff0:	864a                	mv	a2,s2
    80021ff2:	02d00593          	li	a1,45
    80021ff6:	0000c517          	auipc	a0,0xc
    80021ffa:	88250513          	addi	a0,a0,-1918 # 8002d878 <__func__.0+0x7c0>
    80021ffe:	659080ef          	jal	8002ae56 <printf>
    80022002:	02900513          	li	a0,41
    80022006:	33f070ef          	jal	80029b44 <putchar>
    8002200a:	4529                	li	a0,10
    8002200c:	339070ef          	jal	80029b44 <putchar>
    80022010:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80022012:	4509                	li	a0,2
    80022014:	ef5de0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80022018:	14402973          	csrr	s2,sip
    8002201c:	0000c617          	auipc	a2,0xc
    80022020:	87c60613          	addi	a2,a2,-1924 # 8002d898 <__func__.0+0x7e0>
    80022024:	08200593          	li	a1,130
    80022028:	0000b517          	auipc	a0,0xb
    8002202c:	38850513          	addi	a0,a0,904 # 8002d3b0 <__func__.0+0x2f8>
    80022030:	4989                	li	s3,2
    80022032:	625080ef          	jal	8002ae56 <printf>
    80022036:	3b390963          	beq	s2,s3,800223e8 <mix_instruction_1+0x95e>
    8002203a:	0000b597          	auipc	a1,0xb
    8002203e:	34e58593          	addi	a1,a1,846 # 8002d388 <__func__.0+0x2d0>
    80022042:	0000b517          	auipc	a0,0xb
    80022046:	38650513          	addi	a0,a0,902 # 8002d3c8 <__func__.0+0x310>
    8002204a:	60d080ef          	jal	8002ae56 <printf>
    8002204e:	0000b517          	auipc	a0,0xb
    80022052:	38250513          	addi	a0,a0,898 # 8002d3d0 <__func__.0+0x318>
    80022056:	601080ef          	jal	8002ae56 <printf>
    8002205a:	86ce                	mv	a3,s3
    8002205c:	864a                	mv	a2,s2
    8002205e:	02d00593          	li	a1,45
    80022062:	0000c517          	auipc	a0,0xc
    80022066:	81650513          	addi	a0,a0,-2026 # 8002d878 <__func__.0+0x7c0>
    8002206a:	5ed080ef          	jal	8002ae56 <printf>
    8002206e:	02900513          	li	a0,41
    80022072:	2d3070ef          	jal	80029b44 <putchar>
    80022076:	4529                	li	a0,10
    80022078:	2cd070ef          	jal	80029b44 <putchar>
    8002207c:	4401                	li	s0,0
    goto_priv(PRIV_M);
    8002207e:	4511                	li	a0,4
    80022080:	e89de0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80022084:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80022088:	64402973          	csrr	s2,hip
    8002208c:	0000b617          	auipc	a2,0xb
    80022090:	7e460613          	addi	a2,a2,2020 # 8002d870 <__func__.0+0x7b8>
    80022094:	08200593          	li	a1,130
    80022098:	0000b517          	auipc	a0,0xb
    8002209c:	31850513          	addi	a0,a0,792 # 8002d3b0 <__func__.0+0x2f8>
    800220a0:	5b7080ef          	jal	8002ae56 <printf>
    800220a4:	32090463          	beqz	s2,800223cc <mix_instruction_1+0x942>
    800220a8:	0000b597          	auipc	a1,0xb
    800220ac:	2e058593          	addi	a1,a1,736 # 8002d388 <__func__.0+0x2d0>
    800220b0:	0000b517          	auipc	a0,0xb
    800220b4:	31850513          	addi	a0,a0,792 # 8002d3c8 <__func__.0+0x310>
    800220b8:	59f080ef          	jal	8002ae56 <printf>
    800220bc:	0000b517          	auipc	a0,0xb
    800220c0:	31450513          	addi	a0,a0,788 # 8002d3d0 <__func__.0+0x318>
    800220c4:	593080ef          	jal	8002ae56 <printf>
    800220c8:	864a                	mv	a2,s2
    800220ca:	4681                	li	a3,0
    800220cc:	02d00593          	li	a1,45
    800220d0:	0000b517          	auipc	a0,0xb
    800220d4:	7a850513          	addi	a0,a0,1960 # 8002d878 <__func__.0+0x7c0>
    800220d8:	57f080ef          	jal	8002ae56 <printf>
    800220dc:	02900513          	li	a0,41
    800220e0:	265070ef          	jal	80029b44 <putchar>
    800220e4:	4529                	li	a0,10
    800220e6:	25f070ef          	jal	80029b44 <putchar>
    800220ea:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800220ec:	14402973          	csrr	s2,sip
    800220f0:	0000b617          	auipc	a2,0xb
    800220f4:	7a060613          	addi	a2,a2,1952 # 8002d890 <__func__.0+0x7d8>
    800220f8:	08200593          	li	a1,130
    800220fc:	0000b517          	auipc	a0,0xb
    80022100:	2b450513          	addi	a0,a0,692 # 8002d3b0 <__func__.0+0x2f8>
    80022104:	553080ef          	jal	8002ae56 <printf>
    80022108:	2a090463          	beqz	s2,800223b0 <mix_instruction_1+0x926>
    8002210c:	0000b597          	auipc	a1,0xb
    80022110:	27c58593          	addi	a1,a1,636 # 8002d388 <__func__.0+0x2d0>
    80022114:	0000b517          	auipc	a0,0xb
    80022118:	2b450513          	addi	a0,a0,692 # 8002d3c8 <__func__.0+0x310>
    8002211c:	53b080ef          	jal	8002ae56 <printf>
    80022120:	0000b517          	auipc	a0,0xb
    80022124:	2b050513          	addi	a0,a0,688 # 8002d3d0 <__func__.0+0x318>
    80022128:	52f080ef          	jal	8002ae56 <printf>
    8002212c:	864a                	mv	a2,s2
    8002212e:	4681                	li	a3,0
    80022130:	02d00593          	li	a1,45
    80022134:	0000b517          	auipc	a0,0xb
    80022138:	74450513          	addi	a0,a0,1860 # 8002d878 <__func__.0+0x7c0>
    8002213c:	51b080ef          	jal	8002ae56 <printf>
    80022140:	02900513          	li	a0,41
    80022144:	201070ef          	jal	80029b44 <putchar>
    80022148:	4529                	li	a0,10
    8002214a:	1fb070ef          	jal	80029b44 <putchar>
    8002214e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80022150:	24402973          	csrr	s2,vsip
    80022154:	0000b617          	auipc	a2,0xb
    80022158:	70c60613          	addi	a2,a2,1804 # 8002d860 <__func__.0+0x7a8>
    8002215c:	08200593          	li	a1,130
    80022160:	0000b517          	auipc	a0,0xb
    80022164:	25050513          	addi	a0,a0,592 # 8002d3b0 <__func__.0+0x2f8>
    80022168:	4ef080ef          	jal	8002ae56 <printf>
    8002216c:	22090463          	beqz	s2,80022394 <mix_instruction_1+0x90a>
    80022170:	0000b597          	auipc	a1,0xb
    80022174:	21858593          	addi	a1,a1,536 # 8002d388 <__func__.0+0x2d0>
    80022178:	0000b517          	auipc	a0,0xb
    8002217c:	25050513          	addi	a0,a0,592 # 8002d3c8 <__func__.0+0x310>
    80022180:	4d7080ef          	jal	8002ae56 <printf>
    80022184:	0000b517          	auipc	a0,0xb
    80022188:	24c50513          	addi	a0,a0,588 # 8002d3d0 <__func__.0+0x318>
    8002218c:	4cb080ef          	jal	8002ae56 <printf>
    80022190:	864a                	mv	a2,s2
    80022192:	4681                	li	a3,0
    80022194:	02d00593          	li	a1,45
    80022198:	0000b517          	auipc	a0,0xb
    8002219c:	6e050513          	addi	a0,a0,1760 # 8002d878 <__func__.0+0x7c0>
    800221a0:	4b7080ef          	jal	8002ae56 <printf>
    800221a4:	02900513          	li	a0,41
    800221a8:	19d070ef          	jal	80029b44 <putchar>
    800221ac:	4529                	li	a0,10
    800221ae:	197070ef          	jal	80029b44 <putchar>
    800221b2:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800221b4:	4509                	li	a0,2
    800221b6:	d53de0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800221ba:	14402973          	csrr	s2,sip
    800221be:	0000b617          	auipc	a2,0xb
    800221c2:	6da60613          	addi	a2,a2,1754 # 8002d898 <__func__.0+0x7e0>
    800221c6:	08200593          	li	a1,130
    800221ca:	0000b517          	auipc	a0,0xb
    800221ce:	1e650513          	addi	a0,a0,486 # 8002d3b0 <__func__.0+0x2f8>
    800221d2:	485080ef          	jal	8002ae56 <printf>
    800221d6:	1a090163          	beqz	s2,80022378 <mix_instruction_1+0x8ee>
    800221da:	0000b597          	auipc	a1,0xb
    800221de:	1ae58593          	addi	a1,a1,430 # 8002d388 <__func__.0+0x2d0>
    800221e2:	0000b517          	auipc	a0,0xb
    800221e6:	1e650513          	addi	a0,a0,486 # 8002d3c8 <__func__.0+0x310>
    800221ea:	46d080ef          	jal	8002ae56 <printf>
    800221ee:	0000b517          	auipc	a0,0xb
    800221f2:	1e250513          	addi	a0,a0,482 # 8002d3d0 <__func__.0+0x318>
    800221f6:	461080ef          	jal	8002ae56 <printf>
    800221fa:	864a                	mv	a2,s2
    800221fc:	4681                	li	a3,0
    800221fe:	02d00593          	li	a1,45
    80022202:	0000b517          	auipc	a0,0xb
    80022206:	67650513          	addi	a0,a0,1654 # 8002d878 <__func__.0+0x7c0>
    8002220a:	44d080ef          	jal	8002ae56 <printf>
    8002220e:	02900513          	li	a0,41
    80022212:	133070ef          	jal	80029b44 <putchar>
    80022216:	4529                	li	a0,10
    80022218:	12d070ef          	jal	80029b44 <putchar>
    8002221c:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    8002221e:	4511                	li	a0,4
    80022220:	ce9de0ef          	jal	80000f08 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    80022224:	4509                	li	a0,2
    80022226:	ce3de0ef          	jal	80000f08 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8002222a:	be3de0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    8002222e:	400137b7          	lui	a5,0x40013
    80022232:	078a                	slli	a5,a5,0x2
    80022234:	00000297          	auipc	t0,0x0
    80022238:	00c28293          	addi	t0,t0,12 # 80022240 <mix_instruction_1+0x7b6>
    8002223c:	0254bc23          	sd	t0,56(s1)
    80022240:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022242:	08200593          	li	a1,130
    80022246:	00011617          	auipc	a2,0x11
    8002224a:	5c260613          	addi	a2,a2,1474 # 80033808 <__func__.0+0x6750>
    8002224e:	0000b517          	auipc	a0,0xb
    80022252:	16250513          	addi	a0,a0,354 # 8002d3b0 <__func__.0+0x2f8>
    80022256:	401080ef          	jal	8002ae56 <printf>
    8002225a:	00032797          	auipc	a5,0x32
    8002225e:	db77c783          	lbu	a5,-585(a5) # 80054011 <excpt+0x1>
    80022262:	0000b597          	auipc	a1,0xb
    80022266:	12658593          	addi	a1,a1,294 # 8002d388 <__func__.0+0x2d0>
    8002226a:	cf89                	beqz	a5,80022284 <mix_instruction_1+0x7fa>
    8002226c:	6498                	ld	a4,8(s1)
    8002226e:	47d1                	li	a5,20
    80022270:	0000b597          	auipc	a1,0xb
    80022274:	10858593          	addi	a1,a1,264 # 8002d378 <__func__.0+0x2c0>
    80022278:	00f70663          	beq	a4,a5,80022284 <mix_instruction_1+0x7fa>
    8002227c:	0000b597          	auipc	a1,0xb
    80022280:	10c58593          	addi	a1,a1,268 # 8002d388 <__func__.0+0x2d0>
    80022284:	0000b517          	auipc	a0,0xb
    80022288:	14450513          	addi	a0,a0,324 # 8002d3c8 <__func__.0+0x310>
    8002228c:	3cb080ef          	jal	8002ae56 <printf>
    80022290:	00032797          	auipc	a5,0x32
    80022294:	d817c783          	lbu	a5,-639(a5) # 80054011 <excpt+0x1>
    80022298:	c789                	beqz	a5,800222a2 <mix_instruction_1+0x818>
    8002229a:	6498                	ld	a4,8(s1)
    8002229c:	47d1                	li	a5,20
    8002229e:	00f70c63          	beq	a4,a5,800222b6 <mix_instruction_1+0x82c>
    800222a2:	0000b517          	auipc	a0,0xb
    800222a6:	12e50513          	addi	a0,a0,302 # 8002d3d0 <__func__.0+0x318>
    800222aa:	3ad080ef          	jal	8002ae56 <printf>
    800222ae:	02900513          	li	a0,41
    800222b2:	093070ef          	jal	80029b44 <putchar>
    800222b6:	4529                	li	a0,10
    800222b8:	08d070ef          	jal	80029b44 <putchar>
    800222bc:	c801                	beqz	s0,800222cc <mix_instruction_1+0x842>
    800222be:	00032797          	auipc	a5,0x32
    800222c2:	d537c783          	lbu	a5,-685(a5) # 80054011 <excpt+0x1>
    800222c6:	4401                	li	s0,0
    800222c8:	18079c63          	bnez	a5,80022460 <mix_instruction_1+0x9d6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    800222cc:	b41de0ef          	jal	80000e0c <test_setup_except_function>
    
    
    goto_priv(PRIV_HS);     
    800222d0:	450d                	li	a0,3
    800222d2:	c37de0ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    800222d6:	b37de0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800222da:	001007b7          	lui	a5,0x100
    800222de:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800222e2:	07b2                	slli	a5,a5,0xc
    800222e4:	0785                	addi	a5,a5,1
    800222e6:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    800222ea:	08200593          	li	a1,130
    800222ee:	0000e617          	auipc	a2,0xe
    800222f2:	19260613          	addi	a2,a2,402 # 80030480 <__func__.0+0x33c8>
    800222f6:	0000b517          	auipc	a0,0xb
    800222fa:	0ba50513          	addi	a0,a0,186 # 8002d3b0 <__func__.0+0x2f8>
    800222fe:	359080ef          	jal	8002ae56 <printf>
    80022302:	00032797          	auipc	a5,0x32
    80022306:	d0f7c783          	lbu	a5,-753(a5) # 80054011 <excpt+0x1>
    8002230a:	0000b597          	auipc	a1,0xb
    8002230e:	07e58593          	addi	a1,a1,126 # 8002d388 <__func__.0+0x2d0>
    80022312:	e789                	bnez	a5,8002231c <mix_instruction_1+0x892>
    80022314:	0000b597          	auipc	a1,0xb
    80022318:	06458593          	addi	a1,a1,100 # 8002d378 <__func__.0+0x2c0>
    8002231c:	0000b517          	auipc	a0,0xb
    80022320:	0ac50513          	addi	a0,a0,172 # 8002d3c8 <__func__.0+0x310>
    80022324:	333080ef          	jal	8002ae56 <printf>
    80022328:	00032797          	auipc	a5,0x32
    8002232c:	ce97c783          	lbu	a5,-791(a5) # 80054011 <excpt+0x1>
    80022330:	16079563          	bnez	a5,8002249a <mix_instruction_1+0xa10>
    80022334:	4529                	li	a0,10
    80022336:	00f070ef          	jal	80029b44 <putchar>
    8002233a:	c419                	beqz	s0,80022348 <mix_instruction_1+0x8be>
    8002233c:	00032797          	auipc	a5,0x32
    80022340:	cd57c783          	lbu	a5,-811(a5) # 80054011 <excpt+0x1>
    80022344:	0e078c63          	beqz	a5,8002243c <mix_instruction_1+0x9b2>
    80022348:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    8002234a:	0000b597          	auipc	a1,0xb
    8002234e:	03e58593          	addi	a1,a1,62 # 8002d388 <__func__.0+0x2d0>
    80022352:	0000b517          	auipc	a0,0xb
    80022356:	0de50513          	addi	a0,a0,222 # 8002d430 <__func__.0+0x378>
    8002235a:	2fd080ef          	jal	8002ae56 <printf>
    8002235e:	4511                	li	a0,4
    80022360:	ba9de0ef          	jal	80000f08 <goto_priv>
    80022364:	cc0df0ef          	jal	80001824 <reset_state>

    80022368:	70a2                	ld	ra,40(sp)
    8002236a:	8522                	mv	a0,s0
    8002236c:	7402                	ld	s0,32(sp)
    8002236e:	64e2                	ld	s1,24(sp)
    80022370:	6942                	ld	s2,16(sp)
    80022372:	69a2                	ld	s3,8(sp)
    80022374:	6145                	addi	sp,sp,48
    80022376:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80022378:	0000b597          	auipc	a1,0xb
    8002237c:	00058593          	mv	a1,a1
    80022380:	0000b517          	auipc	a0,0xb
    80022384:	04850513          	addi	a0,a0,72 # 8002d3c8 <__func__.0+0x310>
    80022388:	2cf080ef          	jal	8002ae56 <printf>
    8002238c:	4529                	li	a0,10
    8002238e:	7b6070ef          	jal	80029b44 <putchar>
    80022392:	b571                	j	8002221e <mix_instruction_1+0x794>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80022394:	0000b597          	auipc	a1,0xb
    80022398:	fe458593          	addi	a1,a1,-28 # 8002d378 <__func__.0+0x2c0>
    8002239c:	0000b517          	auipc	a0,0xb
    800223a0:	02c50513          	addi	a0,a0,44 # 8002d3c8 <__func__.0+0x310>
    800223a4:	2b3080ef          	jal	8002ae56 <printf>
    800223a8:	4529                	li	a0,10
    800223aa:	79a070ef          	jal	80029b44 <putchar>
    800223ae:	b519                	j	800221b4 <mix_instruction_1+0x72a>
    check_csr_rd("sip", sip, 0x0);
    800223b0:	0000b597          	auipc	a1,0xb
    800223b4:	fc858593          	addi	a1,a1,-56 # 8002d378 <__func__.0+0x2c0>
    800223b8:	0000b517          	auipc	a0,0xb
    800223bc:	01050513          	addi	a0,a0,16 # 8002d3c8 <__func__.0+0x310>
    800223c0:	297080ef          	jal	8002ae56 <printf>
    800223c4:	4529                	li	a0,10
    800223c6:	77e070ef          	jal	80029b44 <putchar>
    800223ca:	b359                	j	80022150 <mix_instruction_1+0x6c6>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800223cc:	0000b597          	auipc	a1,0xb
    800223d0:	fac58593          	addi	a1,a1,-84 # 8002d378 <__func__.0+0x2c0>
    800223d4:	0000b517          	auipc	a0,0xb
    800223d8:	ff450513          	addi	a0,a0,-12 # 8002d3c8 <__func__.0+0x310>
    800223dc:	27b080ef          	jal	8002ae56 <printf>
    800223e0:	4529                	li	a0,10
    800223e2:	762070ef          	jal	80029b44 <putchar>
    800223e6:	b319                	j	800220ec <mix_instruction_1+0x662>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    800223e8:	0000b597          	auipc	a1,0xb
    800223ec:	f9058593          	addi	a1,a1,-112 # 8002d378 <__func__.0+0x2c0>
    800223f0:	0000b517          	auipc	a0,0xb
    800223f4:	fd850513          	addi	a0,a0,-40 # 8002d3c8 <__func__.0+0x310>
    800223f8:	25f080ef          	jal	8002ae56 <printf>
    800223fc:	4529                	li	a0,10
    800223fe:	746070ef          	jal	80029b44 <putchar>
    80022402:	b9b5                	j	8002207e <mix_instruction_1+0x5f4>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80022404:	0000b597          	auipc	a1,0xb
    80022408:	f7458593          	addi	a1,a1,-140 # 8002d378 <__func__.0+0x2c0>
    8002240c:	0000b517          	auipc	a0,0xb
    80022410:	fbc50513          	addi	a0,a0,-68 # 8002d3c8 <__func__.0+0x310>
    80022414:	243080ef          	jal	8002ae56 <printf>
    80022418:	4529                	li	a0,10
    8002241a:	72a070ef          	jal	80029b44 <putchar>
    8002241e:	bed5                	j	80022012 <mix_instruction_1+0x588>
    check_csr_rd("sip", sip, 0x222);    
    80022420:	0000b597          	auipc	a1,0xb
    80022424:	f5858593          	addi	a1,a1,-168 # 8002d378 <__func__.0+0x2c0>
    80022428:	0000b517          	auipc	a0,0xb
    8002242c:	fa050513          	addi	a0,a0,-96 # 8002d3c8 <__func__.0+0x310>
    80022430:	227080ef          	jal	8002ae56 <printf>
    80022434:	4529                	li	a0,10
    80022436:	70e070ef          	jal	80029b44 <putchar>
    8002243a:	be8d                	j	80021fac <mix_instruction_1+0x522>
    TEST_ASSERT("load byte address is not aligned successful",         
    8002243c:	4405                	li	s0,1
    TEST_END();
    8002243e:	0000b597          	auipc	a1,0xb
    80022442:	f3a58593          	addi	a1,a1,-198 # 8002d378 <__func__.0+0x2c0>
    80022446:	b731                	j	80022352 <mix_instruction_1+0x8c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80022448:	6480                	ld	s0,8(s1)
    8002244a:	1429                	addi	s0,s0,-22
    8002244c:	00143413          	seqz	s0,s0
    80022450:	86fff06f          	j	80021cbe <mix_instruction_1+0x234>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80022454:	6480                	ld	s0,8(s1)
    80022456:	1479                	addi	s0,s0,-2
    80022458:	00143413          	seqz	s0,s0
    8002245c:	fb4ff06f          	j	80021c10 <mix_instruction_1+0x186>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022460:	6480                	ld	s0,8(s1)
    80022462:	1431                	addi	s0,s0,-20
    80022464:	00143413          	seqz	s0,s0
    80022468:	b595                	j	800222cc <mix_instruction_1+0x842>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8002246a:	6480                	ld	s0,8(s1)
    8002246c:	144d                	addi	s0,s0,-13
    8002246e:	00143413          	seqz	s0,s0
    80022472:	ba61                	j	80021e0a <mix_instruction_1+0x380>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80022474:	6480                	ld	s0,8(s1)
    80022476:	1445                	addi	s0,s0,-15
    80022478:	00143413          	seqz	s0,s0
    8002247c:	b499                	j	80021ec2 <mix_instruction_1+0x438>
    check_csr_rd("hip", CSR_HIP, 0x4);
    8002247e:	0000b597          	auipc	a1,0xb
    80022482:	efa58593          	addi	a1,a1,-262 # 8002d378 <__func__.0+0x2c0>
    80022486:	0000b517          	auipc	a0,0xb
    8002248a:	f4250513          	addi	a0,a0,-190 # 8002d3c8 <__func__.0+0x310>
    8002248e:	1c9080ef          	jal	8002ae56 <printf>
    80022492:	4529                	li	a0,10
    80022494:	6b0070ef          	jal	80029b44 <putchar>
    80022498:	b475                	j	80021f44 <mix_instruction_1+0x4ba>
    TEST_ASSERT("load byte address is not aligned successful",         
    8002249a:	0000b517          	auipc	a0,0xb
    8002249e:	f3650513          	addi	a0,a0,-202 # 8002d3d0 <__func__.0+0x318>
    800224a2:	1b5080ef          	jal	8002ae56 <printf>
    800224a6:	02900513          	li	a0,41
    800224aa:	69a070ef          	jal	80029b44 <putchar>
    800224ae:	b559                	j	80022334 <mix_instruction_1+0x8aa>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800224b0:	0000b517          	auipc	a0,0xb
    800224b4:	f2050513          	addi	a0,a0,-224 # 8002d3d0 <__func__.0+0x318>
    800224b8:	19f080ef          	jal	8002ae56 <printf>
    800224bc:	02900513          	li	a0,41
    800224c0:	684070ef          	jal	80029b44 <putchar>
    800224c4:	887ff06f          	j	80021d4a <mix_instruction_1+0x2c0>

00000000800224c8 <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    800224c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800224ca:	0000a597          	auipc	a1,0xa
    800224ce:	69e58593          	addi	a1,a1,1694 # 8002cb68 <__func__.4>
    800224d2:	0000b517          	auipc	a0,0xb
    800224d6:	ec650513          	addi	a0,a0,-314 # 8002d398 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    800224da:	ec06                	sd	ra,24(sp)
    800224dc:	e822                	sd	s0,16(sp)
    800224de:	e426                	sd	s1,8(sp)
    TEST_START();
    800224e0:	177080ef          	jal	8002ae56 <printf>
    800224e4:	4529                	li	a0,10
    800224e6:	65e070ef          	jal	80029b44 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    800224ea:	4511                	li	a0,4
    800224ec:	a1dde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800224f0:	91dde0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("ebreak");
    800224f4:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800224f6:	08200593          	li	a1,130
    800224fa:	00013617          	auipc	a2,0x13
    800224fe:	4d660613          	addi	a2,a2,1238 # 800359d0 <__func__.0+0x8918>
    80022502:	0000b517          	auipc	a0,0xb
    80022506:	eae50513          	addi	a0,a0,-338 # 8002d3b0 <__func__.0+0x2f8>
    8002250a:	14d080ef          	jal	8002ae56 <printf>
    8002250e:	00032797          	auipc	a5,0x32
    80022512:	b037c783          	lbu	a5,-1277(a5) # 80054011 <excpt+0x1>
    80022516:	00032497          	auipc	s1,0x32
    8002251a:	afa48493          	addi	s1,s1,-1286 # 80054010 <excpt>
    8002251e:	0000b597          	auipc	a1,0xb
    80022522:	e6a58593          	addi	a1,a1,-406 # 8002d388 <__func__.0+0x2d0>
    80022526:	cf89                	beqz	a5,80022540 <ebreak_tests_1+0x78>
    80022528:	6498                	ld	a4,8(s1)
    8002252a:	478d                	li	a5,3
    8002252c:	0000b597          	auipc	a1,0xb
    80022530:	e4c58593          	addi	a1,a1,-436 # 8002d378 <__func__.0+0x2c0>
    80022534:	00f70663          	beq	a4,a5,80022540 <ebreak_tests_1+0x78>
    80022538:	0000b597          	auipc	a1,0xb
    8002253c:	e5058593          	addi	a1,a1,-432 # 8002d388 <__func__.0+0x2d0>
    80022540:	0000b517          	auipc	a0,0xb
    80022544:	e8850513          	addi	a0,a0,-376 # 8002d3c8 <__func__.0+0x310>
    80022548:	10f080ef          	jal	8002ae56 <printf>
    8002254c:	00032797          	auipc	a5,0x32
    80022550:	ac57c783          	lbu	a5,-1339(a5) # 80054011 <excpt+0x1>
    80022554:	c789                	beqz	a5,8002255e <ebreak_tests_1+0x96>
    80022556:	6498                	ld	a4,8(s1)
    80022558:	478d                	li	a5,3
    8002255a:	00f70c63          	beq	a4,a5,80022572 <ebreak_tests_1+0xaa>
    8002255e:	0000b517          	auipc	a0,0xb
    80022562:	e7250513          	addi	a0,a0,-398 # 8002d3d0 <__func__.0+0x318>
    80022566:	0f1080ef          	jal	8002ae56 <printf>
    8002256a:	02900513          	li	a0,41
    8002256e:	5d6070ef          	jal	80029b44 <putchar>
    80022572:	4529                	li	a0,10
    80022574:	5d0070ef          	jal	80029b44 <putchar>
    80022578:	00032417          	auipc	s0,0x32
    8002257c:	a9944403          	lbu	s0,-1383(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022580:	0000b597          	auipc	a1,0xb
    80022584:	e0858593          	addi	a1,a1,-504 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80022588:	cc11                	beqz	s0,800225a4 <ebreak_tests_1+0xdc>
    8002258a:	6498                	ld	a4,8(s1)
    8002258c:	478d                	li	a5,3
    TEST_END();
    8002258e:	0000b597          	auipc	a1,0xb
    80022592:	dea58593          	addi	a1,a1,-534 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80022596:	00f70763          	beq	a4,a5,800225a4 <ebreak_tests_1+0xdc>
    8002259a:	4401                	li	s0,0
    TEST_END();
    8002259c:	0000b597          	auipc	a1,0xb
    800225a0:	dec58593          	addi	a1,a1,-532 # 8002d388 <__func__.0+0x2d0>
    800225a4:	0000b517          	auipc	a0,0xb
    800225a8:	e8c50513          	addi	a0,a0,-372 # 8002d430 <__func__.0+0x378>
    800225ac:	0ab080ef          	jal	8002ae56 <printf>
    800225b0:	4511                	li	a0,4
    800225b2:	957de0ef          	jal	80000f08 <goto_priv>
    800225b6:	a6edf0ef          	jal	80001824 <reset_state>

}
    800225ba:	60e2                	ld	ra,24(sp)
    800225bc:	8522                	mv	a0,s0
    800225be:	6442                	ld	s0,16(sp)
    800225c0:	64a2                	ld	s1,8(sp)
    800225c2:	6105                	addi	sp,sp,32
    800225c4:	8082                	ret

00000000800225c6 <ebreak_tests_2>:

bool ebreak_tests_2() {
    800225c6:	1101                	addi	sp,sp,-32

    TEST_START();
    800225c8:	0000a597          	auipc	a1,0xa
    800225cc:	5b058593          	addi	a1,a1,1456 # 8002cb78 <__func__.3>
    800225d0:	0000b517          	auipc	a0,0xb
    800225d4:	dc850513          	addi	a0,a0,-568 # 8002d398 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    800225d8:	ec06                	sd	ra,24(sp)
    800225da:	e822                	sd	s0,16(sp)
    800225dc:	e426                	sd	s1,8(sp)
    TEST_START();
    800225de:	079080ef          	jal	8002ae56 <printf>
    800225e2:	4529                	li	a0,10
    800225e4:	560070ef          	jal	80029b44 <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_VS);
    800225e8:	4509                	li	a0,2
    800225ea:	91fde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800225ee:	81fde0ef          	jal	80000e0c <test_setup_except_function>
    800225f2:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800225f4:	08200593          	li	a1,130
    800225f8:	00013617          	auipc	a2,0x13
    800225fc:	40060613          	addi	a2,a2,1024 # 800359f8 <__func__.0+0x8940>
    80022600:	0000b517          	auipc	a0,0xb
    80022604:	db050513          	addi	a0,a0,-592 # 8002d3b0 <__func__.0+0x2f8>
    80022608:	04f080ef          	jal	8002ae56 <printf>
    8002260c:	00032797          	auipc	a5,0x32
    80022610:	a057c783          	lbu	a5,-1531(a5) # 80054011 <excpt+0x1>
    80022614:	00032497          	auipc	s1,0x32
    80022618:	9fc48493          	addi	s1,s1,-1540 # 80054010 <excpt>
    8002261c:	0000b597          	auipc	a1,0xb
    80022620:	d6c58593          	addi	a1,a1,-660 # 8002d388 <__func__.0+0x2d0>
    80022624:	cf89                	beqz	a5,8002263e <ebreak_tests_2+0x78>
    80022626:	6498                	ld	a4,8(s1)
    80022628:	478d                	li	a5,3
    8002262a:	0000b597          	auipc	a1,0xb
    8002262e:	d4e58593          	addi	a1,a1,-690 # 8002d378 <__func__.0+0x2c0>
    80022632:	00f70663          	beq	a4,a5,8002263e <ebreak_tests_2+0x78>
    80022636:	0000b597          	auipc	a1,0xb
    8002263a:	d5258593          	addi	a1,a1,-686 # 8002d388 <__func__.0+0x2d0>
    8002263e:	0000b517          	auipc	a0,0xb
    80022642:	d8a50513          	addi	a0,a0,-630 # 8002d3c8 <__func__.0+0x310>
    80022646:	011080ef          	jal	8002ae56 <printf>
    8002264a:	00032797          	auipc	a5,0x32
    8002264e:	9c77c783          	lbu	a5,-1593(a5) # 80054011 <excpt+0x1>
    80022652:	c789                	beqz	a5,8002265c <ebreak_tests_2+0x96>
    80022654:	6498                	ld	a4,8(s1)
    80022656:	478d                	li	a5,3
    80022658:	00f70c63          	beq	a4,a5,80022670 <ebreak_tests_2+0xaa>
    8002265c:	0000b517          	auipc	a0,0xb
    80022660:	d7450513          	addi	a0,a0,-652 # 8002d3d0 <__func__.0+0x318>
    80022664:	7f2080ef          	jal	8002ae56 <printf>
    80022668:	02900513          	li	a0,41
    8002266c:	4d8070ef          	jal	80029b44 <putchar>
    80022670:	4529                	li	a0,10
    80022672:	4d2070ef          	jal	80029b44 <putchar>
    80022676:	00032417          	auipc	s0,0x32
    8002267a:	99b44403          	lbu	s0,-1637(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002267e:	0000b597          	auipc	a1,0xb
    80022682:	d0a58593          	addi	a1,a1,-758 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80022686:	cc11                	beqz	s0,800226a2 <ebreak_tests_2+0xdc>
    80022688:	6498                	ld	a4,8(s1)
    8002268a:	478d                	li	a5,3
    TEST_END();
    8002268c:	0000b597          	auipc	a1,0xb
    80022690:	cec58593          	addi	a1,a1,-788 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80022694:	00f70763          	beq	a4,a5,800226a2 <ebreak_tests_2+0xdc>
    80022698:	4401                	li	s0,0
    TEST_END();
    8002269a:	0000b597          	auipc	a1,0xb
    8002269e:	cee58593          	addi	a1,a1,-786 # 8002d388 <__func__.0+0x2d0>
    800226a2:	0000b517          	auipc	a0,0xb
    800226a6:	d8e50513          	addi	a0,a0,-626 # 8002d430 <__func__.0+0x378>
    800226aa:	7ac080ef          	jal	8002ae56 <printf>
    800226ae:	4511                	li	a0,4
    800226b0:	859de0ef          	jal	80000f08 <goto_priv>
    800226b4:	970df0ef          	jal	80001824 <reset_state>

}
    800226b8:	60e2                	ld	ra,24(sp)
    800226ba:	8522                	mv	a0,s0
    800226bc:	6442                	ld	s0,16(sp)
    800226be:	64a2                	ld	s1,8(sp)
    800226c0:	6105                	addi	sp,sp,32
    800226c2:	8082                	ret

00000000800226c4 <ebreak_tests_3>:

bool ebreak_tests_3() {
    800226c4:	1101                	addi	sp,sp,-32

    TEST_START();
    800226c6:	0000a597          	auipc	a1,0xa
    800226ca:	4c258593          	addi	a1,a1,1218 # 8002cb88 <__func__.2>
    800226ce:	0000b517          	auipc	a0,0xb
    800226d2:	cca50513          	addi	a0,a0,-822 # 8002d398 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    800226d6:	ec06                	sd	ra,24(sp)
    800226d8:	e822                	sd	s0,16(sp)
    800226da:	e426                	sd	s1,8(sp)
    TEST_START();
    800226dc:	77a080ef          	jal	8002ae56 <printf>
    800226e0:	4529                	li	a0,10
    800226e2:	462070ef          	jal	80029b44 <putchar>

    //HS模式下执行ebreak指令
    goto_priv(PRIV_HS);
    800226e6:	450d                	li	a0,3
    800226e8:	821de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800226ec:	f20de0ef          	jal	80000e0c <test_setup_except_function>
    800226f0:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800226f2:	08200593          	li	a1,130
    800226f6:	00013617          	auipc	a2,0x13
    800226fa:	32a60613          	addi	a2,a2,810 # 80035a20 <__func__.0+0x8968>
    800226fe:	0000b517          	auipc	a0,0xb
    80022702:	cb250513          	addi	a0,a0,-846 # 8002d3b0 <__func__.0+0x2f8>
    80022706:	750080ef          	jal	8002ae56 <printf>
    8002270a:	00032797          	auipc	a5,0x32
    8002270e:	9077c783          	lbu	a5,-1785(a5) # 80054011 <excpt+0x1>
    80022712:	00032497          	auipc	s1,0x32
    80022716:	8fe48493          	addi	s1,s1,-1794 # 80054010 <excpt>
    8002271a:	0000b597          	auipc	a1,0xb
    8002271e:	c6e58593          	addi	a1,a1,-914 # 8002d388 <__func__.0+0x2d0>
    80022722:	cf89                	beqz	a5,8002273c <ebreak_tests_3+0x78>
    80022724:	6498                	ld	a4,8(s1)
    80022726:	478d                	li	a5,3
    80022728:	0000b597          	auipc	a1,0xb
    8002272c:	c5058593          	addi	a1,a1,-944 # 8002d378 <__func__.0+0x2c0>
    80022730:	00f70663          	beq	a4,a5,8002273c <ebreak_tests_3+0x78>
    80022734:	0000b597          	auipc	a1,0xb
    80022738:	c5458593          	addi	a1,a1,-940 # 8002d388 <__func__.0+0x2d0>
    8002273c:	0000b517          	auipc	a0,0xb
    80022740:	c8c50513          	addi	a0,a0,-884 # 8002d3c8 <__func__.0+0x310>
    80022744:	712080ef          	jal	8002ae56 <printf>
    80022748:	00032797          	auipc	a5,0x32
    8002274c:	8c97c783          	lbu	a5,-1847(a5) # 80054011 <excpt+0x1>
    80022750:	c789                	beqz	a5,8002275a <ebreak_tests_3+0x96>
    80022752:	6498                	ld	a4,8(s1)
    80022754:	478d                	li	a5,3
    80022756:	00f70c63          	beq	a4,a5,8002276e <ebreak_tests_3+0xaa>
    8002275a:	0000b517          	auipc	a0,0xb
    8002275e:	c7650513          	addi	a0,a0,-906 # 8002d3d0 <__func__.0+0x318>
    80022762:	6f4080ef          	jal	8002ae56 <printf>
    80022766:	02900513          	li	a0,41
    8002276a:	3da070ef          	jal	80029b44 <putchar>
    8002276e:	4529                	li	a0,10
    80022770:	3d4070ef          	jal	80029b44 <putchar>
    80022774:	00032417          	auipc	s0,0x32
    80022778:	89d44403          	lbu	s0,-1891(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002277c:	0000b597          	auipc	a1,0xb
    80022780:	c0c58593          	addi	a1,a1,-1012 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022784:	cc11                	beqz	s0,800227a0 <ebreak_tests_3+0xdc>
    80022786:	6498                	ld	a4,8(s1)
    80022788:	478d                	li	a5,3
    TEST_END();
    8002278a:	0000b597          	auipc	a1,0xb
    8002278e:	bee58593          	addi	a1,a1,-1042 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022792:	00f70763          	beq	a4,a5,800227a0 <ebreak_tests_3+0xdc>
    80022796:	4401                	li	s0,0
    TEST_END();
    80022798:	0000b597          	auipc	a1,0xb
    8002279c:	bf058593          	addi	a1,a1,-1040 # 8002d388 <__func__.0+0x2d0>
    800227a0:	0000b517          	auipc	a0,0xb
    800227a4:	c9050513          	addi	a0,a0,-880 # 8002d430 <__func__.0+0x378>
    800227a8:	6ae080ef          	jal	8002ae56 <printf>
    800227ac:	4511                	li	a0,4
    800227ae:	f5ade0ef          	jal	80000f08 <goto_priv>
    800227b2:	872df0ef          	jal	80001824 <reset_state>

}
    800227b6:	60e2                	ld	ra,24(sp)
    800227b8:	8522                	mv	a0,s0
    800227ba:	6442                	ld	s0,16(sp)
    800227bc:	64a2                	ld	s1,8(sp)
    800227be:	6105                	addi	sp,sp,32
    800227c0:	8082                	ret

00000000800227c2 <ebreak_tests_4>:

bool ebreak_tests_4() {
    800227c2:	1101                	addi	sp,sp,-32

    TEST_START();
    800227c4:	0000a597          	auipc	a1,0xa
    800227c8:	3d458593          	addi	a1,a1,980 # 8002cb98 <__func__.1>
    800227cc:	0000b517          	auipc	a0,0xb
    800227d0:	bcc50513          	addi	a0,a0,-1076 # 8002d398 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    800227d4:	ec06                	sd	ra,24(sp)
    800227d6:	e822                	sd	s0,16(sp)
    800227d8:	e426                	sd	s1,8(sp)
    TEST_START();
    800227da:	67c080ef          	jal	8002ae56 <printf>
    800227de:	4529                	li	a0,10
    800227e0:	364070ef          	jal	80029b44 <putchar>

    //HU模式下执行ebreak指令
    goto_priv(PRIV_HU);
    800227e4:	4505                	li	a0,1
    800227e6:	f22de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800227ea:	e22de0ef          	jal	80000e0c <test_setup_except_function>
    800227ee:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800227f0:	08200593          	li	a1,130
    800227f4:	00013617          	auipc	a2,0x13
    800227f8:	25460613          	addi	a2,a2,596 # 80035a48 <__func__.0+0x8990>
    800227fc:	0000b517          	auipc	a0,0xb
    80022800:	bb450513          	addi	a0,a0,-1100 # 8002d3b0 <__func__.0+0x2f8>
    80022804:	652080ef          	jal	8002ae56 <printf>
    80022808:	00032797          	auipc	a5,0x32
    8002280c:	8097c783          	lbu	a5,-2039(a5) # 80054011 <excpt+0x1>
    80022810:	00032497          	auipc	s1,0x32
    80022814:	80048493          	addi	s1,s1,-2048 # 80054010 <excpt>
    80022818:	0000b597          	auipc	a1,0xb
    8002281c:	b7058593          	addi	a1,a1,-1168 # 8002d388 <__func__.0+0x2d0>
    80022820:	cf89                	beqz	a5,8002283a <ebreak_tests_4+0x78>
    80022822:	6498                	ld	a4,8(s1)
    80022824:	478d                	li	a5,3
    80022826:	0000b597          	auipc	a1,0xb
    8002282a:	b5258593          	addi	a1,a1,-1198 # 8002d378 <__func__.0+0x2c0>
    8002282e:	00f70663          	beq	a4,a5,8002283a <ebreak_tests_4+0x78>
    80022832:	0000b597          	auipc	a1,0xb
    80022836:	b5658593          	addi	a1,a1,-1194 # 8002d388 <__func__.0+0x2d0>
    8002283a:	0000b517          	auipc	a0,0xb
    8002283e:	b8e50513          	addi	a0,a0,-1138 # 8002d3c8 <__func__.0+0x310>
    80022842:	614080ef          	jal	8002ae56 <printf>
    80022846:	00031797          	auipc	a5,0x31
    8002284a:	7cb7c783          	lbu	a5,1995(a5) # 80054011 <excpt+0x1>
    8002284e:	c789                	beqz	a5,80022858 <ebreak_tests_4+0x96>
    80022850:	6498                	ld	a4,8(s1)
    80022852:	478d                	li	a5,3
    80022854:	00f70c63          	beq	a4,a5,8002286c <ebreak_tests_4+0xaa>
    80022858:	0000b517          	auipc	a0,0xb
    8002285c:	b7850513          	addi	a0,a0,-1160 # 8002d3d0 <__func__.0+0x318>
    80022860:	5f6080ef          	jal	8002ae56 <printf>
    80022864:	02900513          	li	a0,41
    80022868:	2dc070ef          	jal	80029b44 <putchar>
    8002286c:	4529                	li	a0,10
    8002286e:	2d6070ef          	jal	80029b44 <putchar>
    80022872:	00031417          	auipc	s0,0x31
    80022876:	79f44403          	lbu	s0,1951(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002287a:	0000b597          	auipc	a1,0xb
    8002287e:	b0e58593          	addi	a1,a1,-1266 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022882:	cc11                	beqz	s0,8002289e <ebreak_tests_4+0xdc>
    80022884:	6498                	ld	a4,8(s1)
    80022886:	478d                	li	a5,3
    TEST_END();
    80022888:	0000b597          	auipc	a1,0xb
    8002288c:	af058593          	addi	a1,a1,-1296 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022890:	00f70763          	beq	a4,a5,8002289e <ebreak_tests_4+0xdc>
    80022894:	4401                	li	s0,0
    TEST_END();
    80022896:	0000b597          	auipc	a1,0xb
    8002289a:	af258593          	addi	a1,a1,-1294 # 8002d388 <__func__.0+0x2d0>
    8002289e:	0000b517          	auipc	a0,0xb
    800228a2:	b9250513          	addi	a0,a0,-1134 # 8002d430 <__func__.0+0x378>
    800228a6:	5b0080ef          	jal	8002ae56 <printf>
    800228aa:	4511                	li	a0,4
    800228ac:	e5cde0ef          	jal	80000f08 <goto_priv>
    800228b0:	f75de0ef          	jal	80001824 <reset_state>

}
    800228b4:	60e2                	ld	ra,24(sp)
    800228b6:	8522                	mv	a0,s0
    800228b8:	6442                	ld	s0,16(sp)
    800228ba:	64a2                	ld	s1,8(sp)
    800228bc:	6105                	addi	sp,sp,32
    800228be:	8082                	ret

00000000800228c0 <ebreak_tests_5>:

bool ebreak_tests_5() {
    800228c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800228c2:	0000a597          	auipc	a1,0xa
    800228c6:	2e658593          	addi	a1,a1,742 # 8002cba8 <__func__.0>
    800228ca:	0000b517          	auipc	a0,0xb
    800228ce:	ace50513          	addi	a0,a0,-1330 # 8002d398 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    800228d2:	ec06                	sd	ra,24(sp)
    800228d4:	e822                	sd	s0,16(sp)
    800228d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800228d8:	57e080ef          	jal	8002ae56 <printf>
    800228dc:	4529                	li	a0,10
    800228de:	266070ef          	jal	80029b44 <putchar>

    //VU模式下执行ebreak指令
    goto_priv(PRIV_VU);
    800228e2:	4501                	li	a0,0
    800228e4:	e24de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800228e8:	d24de0ef          	jal	80000e0c <test_setup_except_function>
    800228ec:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    800228ee:	08200593          	li	a1,130
    800228f2:	00013617          	auipc	a2,0x13
    800228f6:	17e60613          	addi	a2,a2,382 # 80035a70 <__func__.0+0x89b8>
    800228fa:	0000b517          	auipc	a0,0xb
    800228fe:	ab650513          	addi	a0,a0,-1354 # 8002d3b0 <__func__.0+0x2f8>
    80022902:	554080ef          	jal	8002ae56 <printf>
    80022906:	00031797          	auipc	a5,0x31
    8002290a:	70b7c783          	lbu	a5,1803(a5) # 80054011 <excpt+0x1>
    8002290e:	00031497          	auipc	s1,0x31
    80022912:	70248493          	addi	s1,s1,1794 # 80054010 <excpt>
    80022916:	0000b597          	auipc	a1,0xb
    8002291a:	a7258593          	addi	a1,a1,-1422 # 8002d388 <__func__.0+0x2d0>
    8002291e:	cf89                	beqz	a5,80022938 <ebreak_tests_5+0x78>
    80022920:	6498                	ld	a4,8(s1)
    80022922:	478d                	li	a5,3
    80022924:	0000b597          	auipc	a1,0xb
    80022928:	a5458593          	addi	a1,a1,-1452 # 8002d378 <__func__.0+0x2c0>
    8002292c:	00f70663          	beq	a4,a5,80022938 <ebreak_tests_5+0x78>
    80022930:	0000b597          	auipc	a1,0xb
    80022934:	a5858593          	addi	a1,a1,-1448 # 8002d388 <__func__.0+0x2d0>
    80022938:	0000b517          	auipc	a0,0xb
    8002293c:	a9050513          	addi	a0,a0,-1392 # 8002d3c8 <__func__.0+0x310>
    80022940:	516080ef          	jal	8002ae56 <printf>
    80022944:	00031797          	auipc	a5,0x31
    80022948:	6cd7c783          	lbu	a5,1741(a5) # 80054011 <excpt+0x1>
    8002294c:	c789                	beqz	a5,80022956 <ebreak_tests_5+0x96>
    8002294e:	6498                	ld	a4,8(s1)
    80022950:	478d                	li	a5,3
    80022952:	00f70c63          	beq	a4,a5,8002296a <ebreak_tests_5+0xaa>
    80022956:	0000b517          	auipc	a0,0xb
    8002295a:	a7a50513          	addi	a0,a0,-1414 # 8002d3d0 <__func__.0+0x318>
    8002295e:	4f8080ef          	jal	8002ae56 <printf>
    80022962:	02900513          	li	a0,41
    80022966:	1de070ef          	jal	80029b44 <putchar>
    8002296a:	4529                	li	a0,10
    8002296c:	1d8070ef          	jal	80029b44 <putchar>
    80022970:	00031417          	auipc	s0,0x31
    80022974:	6a144403          	lbu	s0,1697(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022978:	0000b597          	auipc	a1,0xb
    8002297c:	a1058593          	addi	a1,a1,-1520 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022980:	cc11                	beqz	s0,8002299c <ebreak_tests_5+0xdc>
    80022982:	6498                	ld	a4,8(s1)
    80022984:	478d                	li	a5,3
    TEST_END();
    80022986:	0000b597          	auipc	a1,0xb
    8002298a:	9f258593          	addi	a1,a1,-1550 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    8002298e:	00f70763          	beq	a4,a5,8002299c <ebreak_tests_5+0xdc>
    80022992:	4401                	li	s0,0
    TEST_END();
    80022994:	0000b597          	auipc	a1,0xb
    80022998:	9f458593          	addi	a1,a1,-1548 # 8002d388 <__func__.0+0x2d0>
    8002299c:	0000b517          	auipc	a0,0xb
    800229a0:	a9450513          	addi	a0,a0,-1388 # 8002d430 <__func__.0+0x378>
    800229a4:	4b2080ef          	jal	8002ae56 <printf>
    800229a8:	4511                	li	a0,4
    800229aa:	d5ede0ef          	jal	80000f08 <goto_priv>
    800229ae:	e77de0ef          	jal	80001824 <reset_state>

    800229b2:	60e2                	ld	ra,24(sp)
    800229b4:	8522                	mv	a0,s0
    800229b6:	6442                	ld	s0,16(sp)
    800229b8:	64a2                	ld	s1,8(sp)
    800229ba:	6105                	addi	sp,sp,32
    800229bc:	8082                	ret

00000000800229be <stateen_C_test_1>:
#include <rvh_test.h>


bool stateen_C_test_1(){
    800229be:	1101                	addi	sp,sp,-32

    TEST_START();
    800229c0:	0000a597          	auipc	a1,0xa
    800229c4:	1f858593          	addi	a1,a1,504 # 8002cbb8 <__func__.36>
    800229c8:	0000b517          	auipc	a0,0xb
    800229cc:	9d050513          	addi	a0,a0,-1584 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_1(){
    800229d0:	ec06                	sd	ra,24(sp)
    800229d2:	e822                	sd	s0,16(sp)
    800229d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800229d6:	480080ef          	jal	8002ae56 <printf>
    800229da:	4529                	li	a0,10
    800229dc:	168070ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800229e0:	4511                	li	a0,4
    800229e2:	d26de0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=0,hu mode 不可访问自定义寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    800229e6:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HU);
    800229ea:	4505                	li	a0,1
    800229ec:	d1cde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800229f0:	c1cde0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    800229f4:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    800229f8:	e56de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    800229fc:	08200593          	li	a1,130
    80022a00:	00013617          	auipc	a2,0x13
    80022a04:	09860613          	addi	a2,a2,152 # 80035a98 <__func__.0+0x89e0>
    80022a08:	0000b517          	auipc	a0,0xb
    80022a0c:	9a850513          	addi	a0,a0,-1624 # 8002d3b0 <__func__.0+0x2f8>
    80022a10:	446080ef          	jal	8002ae56 <printf>
    80022a14:	00031797          	auipc	a5,0x31
    80022a18:	5fd7c783          	lbu	a5,1533(a5) # 80054011 <excpt+0x1>
    80022a1c:	00031497          	auipc	s1,0x31
    80022a20:	5f448493          	addi	s1,s1,1524 # 80054010 <excpt>
    80022a24:	0000b597          	auipc	a1,0xb
    80022a28:	96458593          	addi	a1,a1,-1692 # 8002d388 <__func__.0+0x2d0>
    80022a2c:	cf89                	beqz	a5,80022a46 <stateen_C_test_1+0x88>
    80022a2e:	6498                	ld	a4,8(s1)
    80022a30:	4789                	li	a5,2
    80022a32:	0000b597          	auipc	a1,0xb
    80022a36:	94658593          	addi	a1,a1,-1722 # 8002d378 <__func__.0+0x2c0>
    80022a3a:	00f70663          	beq	a4,a5,80022a46 <stateen_C_test_1+0x88>
    80022a3e:	0000b597          	auipc	a1,0xb
    80022a42:	94a58593          	addi	a1,a1,-1718 # 8002d388 <__func__.0+0x2d0>
    80022a46:	0000b517          	auipc	a0,0xb
    80022a4a:	98250513          	addi	a0,a0,-1662 # 8002d3c8 <__func__.0+0x310>
    80022a4e:	408080ef          	jal	8002ae56 <printf>
    80022a52:	00031797          	auipc	a5,0x31
    80022a56:	5bf7c783          	lbu	a5,1471(a5) # 80054011 <excpt+0x1>
    80022a5a:	c789                	beqz	a5,80022a64 <stateen_C_test_1+0xa6>
    80022a5c:	6498                	ld	a4,8(s1)
    80022a5e:	4789                	li	a5,2
    80022a60:	00f70c63          	beq	a4,a5,80022a78 <stateen_C_test_1+0xba>
    80022a64:	0000b517          	auipc	a0,0xb
    80022a68:	96c50513          	addi	a0,a0,-1684 # 8002d3d0 <__func__.0+0x318>
    80022a6c:	3ea080ef          	jal	8002ae56 <printf>
    80022a70:	02900513          	li	a0,41
    80022a74:	0d0070ef          	jal	80029b44 <putchar>
    80022a78:	4529                	li	a0,10
    80022a7a:	0ca070ef          	jal	80029b44 <putchar>
    80022a7e:	00031417          	auipc	s0,0x31
    80022a82:	59344403          	lbu	s0,1427(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022a86:	0000b597          	auipc	a1,0xb
    80022a8a:	90258593          	addi	a1,a1,-1790 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022a8e:	cc11                	beqz	s0,80022aaa <stateen_C_test_1+0xec>
    80022a90:	6498                	ld	a4,8(s1)
    80022a92:	4789                	li	a5,2
    TEST_END();
    80022a94:	0000b597          	auipc	a1,0xb
    80022a98:	8e458593          	addi	a1,a1,-1820 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022a9c:	00f70763          	beq	a4,a5,80022aaa <stateen_C_test_1+0xec>
    80022aa0:	4401                	li	s0,0
    TEST_END();
    80022aa2:	0000b597          	auipc	a1,0xb
    80022aa6:	8e658593          	addi	a1,a1,-1818 # 8002d388 <__func__.0+0x2d0>
    80022aaa:	0000b517          	auipc	a0,0xb
    80022aae:	98650513          	addi	a0,a0,-1658 # 8002d430 <__func__.0+0x378>
    80022ab2:	3a4080ef          	jal	8002ae56 <printf>
    80022ab6:	4511                	li	a0,4
    80022ab8:	c50de0ef          	jal	80000f08 <goto_priv>
    80022abc:	d69de0ef          	jal	80001824 <reset_state>

}
    80022ac0:	60e2                	ld	ra,24(sp)
    80022ac2:	8522                	mv	a0,s0
    80022ac4:	6442                	ld	s0,16(sp)
    80022ac6:	64a2                	ld	s1,8(sp)
    80022ac8:	6105                	addi	sp,sp,32
    80022aca:	8082                	ret

0000000080022acc <stateen_C_test_2>:

bool stateen_C_test_2(){
    80022acc:	1101                	addi	sp,sp,-32

    TEST_START();
    80022ace:	0000a597          	auipc	a1,0xa
    80022ad2:	10258593          	addi	a1,a1,258 # 8002cbd0 <__func__.35>
    80022ad6:	0000b517          	auipc	a0,0xb
    80022ada:	8c250513          	addi	a0,a0,-1854 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_2(){
    80022ade:	ec06                	sd	ra,24(sp)
    80022ae0:	e822                	sd	s0,16(sp)
    80022ae2:	e426                	sd	s1,8(sp)
    TEST_START();
    80022ae4:	372080ef          	jal	8002ae56 <printf>
    80022ae8:	4529                	li	a0,10
    80022aea:	05a070ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80022aee:	4511                	li	a0,4
    80022af0:	c18de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022af4:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022af8:	60c0f073          	csrci	hstateen0,1

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器
    goto_priv(PRIV_VU);
    80022afc:	4501                	li	a0,0
    80022afe:	c0ade0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022b02:	b0ade0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    80022b06:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022b0a:	d44de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022b0e:	08200593          	li	a1,130
    80022b12:	00013617          	auipc	a2,0x13
    80022b16:	fd660613          	addi	a2,a2,-42 # 80035ae8 <__func__.0+0x8a30>
    80022b1a:	0000b517          	auipc	a0,0xb
    80022b1e:	89650513          	addi	a0,a0,-1898 # 8002d3b0 <__func__.0+0x2f8>
    80022b22:	334080ef          	jal	8002ae56 <printf>
    80022b26:	00031797          	auipc	a5,0x31
    80022b2a:	4eb7c783          	lbu	a5,1259(a5) # 80054011 <excpt+0x1>
    80022b2e:	00031497          	auipc	s1,0x31
    80022b32:	4e248493          	addi	s1,s1,1250 # 80054010 <excpt>
    80022b36:	0000b597          	auipc	a1,0xb
    80022b3a:	85258593          	addi	a1,a1,-1966 # 8002d388 <__func__.0+0x2d0>
    80022b3e:	cf89                	beqz	a5,80022b58 <stateen_C_test_2+0x8c>
    80022b40:	6498                	ld	a4,8(s1)
    80022b42:	47d9                	li	a5,22
    80022b44:	0000b597          	auipc	a1,0xb
    80022b48:	83458593          	addi	a1,a1,-1996 # 8002d378 <__func__.0+0x2c0>
    80022b4c:	00f70663          	beq	a4,a5,80022b58 <stateen_C_test_2+0x8c>
    80022b50:	0000b597          	auipc	a1,0xb
    80022b54:	83858593          	addi	a1,a1,-1992 # 8002d388 <__func__.0+0x2d0>
    80022b58:	0000b517          	auipc	a0,0xb
    80022b5c:	87050513          	addi	a0,a0,-1936 # 8002d3c8 <__func__.0+0x310>
    80022b60:	2f6080ef          	jal	8002ae56 <printf>
    80022b64:	00031797          	auipc	a5,0x31
    80022b68:	4ad7c783          	lbu	a5,1197(a5) # 80054011 <excpt+0x1>
    80022b6c:	c789                	beqz	a5,80022b76 <stateen_C_test_2+0xaa>
    80022b6e:	6498                	ld	a4,8(s1)
    80022b70:	47d9                	li	a5,22
    80022b72:	00f70c63          	beq	a4,a5,80022b8a <stateen_C_test_2+0xbe>
    80022b76:	0000b517          	auipc	a0,0xb
    80022b7a:	85a50513          	addi	a0,a0,-1958 # 8002d3d0 <__func__.0+0x318>
    80022b7e:	2d8080ef          	jal	8002ae56 <printf>
    80022b82:	02900513          	li	a0,41
    80022b86:	7bf060ef          	jal	80029b44 <putchar>
    80022b8a:	4529                	li	a0,10
    80022b8c:	7b9060ef          	jal	80029b44 <putchar>
    80022b90:	00031417          	auipc	s0,0x31
    80022b94:	48144403          	lbu	s0,1153(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80022b98:	0000a597          	auipc	a1,0xa
    80022b9c:	7f058593          	addi	a1,a1,2032 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ba0:	cc11                	beqz	s0,80022bbc <stateen_C_test_2+0xf0>
    80022ba2:	6498                	ld	a4,8(s1)
    80022ba4:	47d9                	li	a5,22
    TEST_END();
    80022ba6:	0000a597          	auipc	a1,0xa
    80022baa:	7d258593          	addi	a1,a1,2002 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022bae:	00f70763          	beq	a4,a5,80022bbc <stateen_C_test_2+0xf0>
    80022bb2:	4401                	li	s0,0
    TEST_END();
    80022bb4:	0000a597          	auipc	a1,0xa
    80022bb8:	7d458593          	addi	a1,a1,2004 # 8002d388 <__func__.0+0x2d0>
    80022bbc:	0000b517          	auipc	a0,0xb
    80022bc0:	87450513          	addi	a0,a0,-1932 # 8002d430 <__func__.0+0x378>
    80022bc4:	292080ef          	jal	8002ae56 <printf>
    80022bc8:	4511                	li	a0,4
    80022bca:	b3ede0ef          	jal	80000f08 <goto_priv>
    80022bce:	c57de0ef          	jal	80001824 <reset_state>

}
    80022bd2:	60e2                	ld	ra,24(sp)
    80022bd4:	8522                	mv	a0,s0
    80022bd6:	6442                	ld	s0,16(sp)
    80022bd8:	64a2                	ld	s1,8(sp)
    80022bda:	6105                	addi	sp,sp,32
    80022bdc:	8082                	ret

0000000080022bde <stateen_C_test_3>:

bool stateen_C_test_3(){
    80022bde:	1141                	addi	sp,sp,-16

    //当mstateen.C=0,m mode 可访问自定义寄存器

    TEST_START();
    80022be0:	0000a597          	auipc	a1,0xa
    80022be4:	00858593          	addi	a1,a1,8 # 8002cbe8 <__func__.34>
    80022be8:	0000a517          	auipc	a0,0xa
    80022bec:	7b050513          	addi	a0,a0,1968 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_3(){
    80022bf0:	e406                	sd	ra,8(sp)
    80022bf2:	e022                	sd	s0,0(sp)
    TEST_START();
    80022bf4:	262080ef          	jal	8002ae56 <printf>
    80022bf8:	4529                	li	a0,10
    80022bfa:	74b060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80022bfe:	4511                	li	a0,4
    80022c00:	b08de0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022c04:	30c0f073          	csrci	mstateen0,1
    goto_priv(PRIV_M);
    80022c08:	4511                	li	a0,4
    80022c0a:	afede0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022c0e:	9fede0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    80022c12:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022c16:	c38de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022c1a:	08200593          	li	a1,130
    80022c1e:	00013617          	auipc	a2,0x13
    80022c22:	f1a60613          	addi	a2,a2,-230 # 80035b38 <__func__.0+0x8a80>
    80022c26:	0000a517          	auipc	a0,0xa
    80022c2a:	78a50513          	addi	a0,a0,1930 # 8002d3b0 <__func__.0+0x2f8>
    80022c2e:	228080ef          	jal	8002ae56 <printf>
    80022c32:	00031797          	auipc	a5,0x31
    80022c36:	3df7c783          	lbu	a5,991(a5) # 80054011 <excpt+0x1>
    80022c3a:	0000a597          	auipc	a1,0xa
    80022c3e:	73e58593          	addi	a1,a1,1854 # 8002d378 <__func__.0+0x2c0>
    80022c42:	c789                	beqz	a5,80022c4c <stateen_C_test_3+0x6e>
    80022c44:	0000a597          	auipc	a1,0xa
    80022c48:	74458593          	addi	a1,a1,1860 # 8002d388 <__func__.0+0x2d0>
    80022c4c:	0000a517          	auipc	a0,0xa
    80022c50:	77c50513          	addi	a0,a0,1916 # 8002d3c8 <__func__.0+0x310>
    80022c54:	202080ef          	jal	8002ae56 <printf>
    80022c58:	00031797          	auipc	a5,0x31
    80022c5c:	3b97c783          	lbu	a5,953(a5) # 80054011 <excpt+0x1>
    80022c60:	e7a1                	bnez	a5,80022ca8 <stateen_C_test_3+0xca>
    80022c62:	4529                	li	a0,10
    80022c64:	6e1060ef          	jal	80029b44 <putchar>
    80022c68:	00031797          	auipc	a5,0x31
    80022c6c:	3a97c783          	lbu	a5,937(a5) # 80054011 <excpt+0x1>
    80022c70:	e795                	bnez	a5,80022c9c <stateen_C_test_3+0xbe>
    80022c72:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80022c74:	0000a597          	auipc	a1,0xa
    80022c78:	70458593          	addi	a1,a1,1796 # 8002d378 <__func__.0+0x2c0>
    80022c7c:	0000a517          	auipc	a0,0xa
    80022c80:	7b450513          	addi	a0,a0,1972 # 8002d430 <__func__.0+0x378>
    80022c84:	1d2080ef          	jal	8002ae56 <printf>
    80022c88:	4511                	li	a0,4
    80022c8a:	a7ede0ef          	jal	80000f08 <goto_priv>
    80022c8e:	b97de0ef          	jal	80001824 <reset_state>

}
    80022c92:	60a2                	ld	ra,8(sp)
    80022c94:	8522                	mv	a0,s0
    80022c96:	6402                	ld	s0,0(sp)
    80022c98:	0141                	addi	sp,sp,16
    80022c9a:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022c9c:	4401                	li	s0,0
    TEST_END();
    80022c9e:	0000a597          	auipc	a1,0xa
    80022ca2:	6ea58593          	addi	a1,a1,1770 # 8002d388 <__func__.0+0x2d0>
    80022ca6:	bfd9                	j	80022c7c <stateen_C_test_3+0x9e>
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022ca8:	0000a517          	auipc	a0,0xa
    80022cac:	72850513          	addi	a0,a0,1832 # 8002d3d0 <__func__.0+0x318>
    80022cb0:	1a6080ef          	jal	8002ae56 <printf>
    80022cb4:	02900513          	li	a0,41
    80022cb8:	68d060ef          	jal	80029b44 <putchar>
    80022cbc:	b75d                	j	80022c62 <stateen_C_test_3+0x84>

0000000080022cbe <stateen_C_test_4>:

bool stateen_C_test_4(){
    80022cbe:	1101                	addi	sp,sp,-32

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器

    TEST_START();
    80022cc0:	0000a597          	auipc	a1,0xa
    80022cc4:	f4058593          	addi	a1,a1,-192 # 8002cc00 <__func__.33>
    80022cc8:	0000a517          	auipc	a0,0xa
    80022ccc:	6d050513          	addi	a0,a0,1744 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_4(){
    80022cd0:	ec06                	sd	ra,24(sp)
    80022cd2:	e822                	sd	s0,16(sp)
    80022cd4:	e426                	sd	s1,8(sp)
    TEST_START();
    80022cd6:	180080ef          	jal	8002ae56 <printf>
    80022cda:	4529                	li	a0,10
    80022cdc:	669060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80022ce0:	4511                	li	a0,4
    80022ce2:	a26de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022ce6:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022cea:	60c0f073          	csrci	hstateen0,1
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80022cee:	30c025f3          	csrr	a1,mstateen0
    80022cf2:	00013517          	auipc	a0,0x13
    80022cf6:	e8650513          	addi	a0,a0,-378 # 80035b78 <__func__.0+0x8ac0>
    80022cfa:	15c080ef          	jal	8002ae56 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80022cfe:	60c025f3          	csrr	a1,hstateen0
    80022d02:	00013517          	auipc	a0,0x13
    80022d06:	e8650513          	addi	a0,a0,-378 # 80035b88 <__func__.0+0x8ad0>
    80022d0a:	14c080ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    80022d0e:	4509                	li	a0,2
    80022d10:	9f8de0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022d14:	8f8de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C4);
    80022d18:	5c4027f3          	csrr	a5,0x5c4

    excpt_info();
    80022d1c:	b32de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022d20:	08200593          	li	a1,130
    80022d24:	00013617          	auipc	a2,0x13
    80022d28:	e7460613          	addi	a2,a2,-396 # 80035b98 <__func__.0+0x8ae0>
    80022d2c:	0000a517          	auipc	a0,0xa
    80022d30:	68450513          	addi	a0,a0,1668 # 8002d3b0 <__func__.0+0x2f8>
    80022d34:	122080ef          	jal	8002ae56 <printf>
    80022d38:	00031797          	auipc	a5,0x31
    80022d3c:	2d97c783          	lbu	a5,729(a5) # 80054011 <excpt+0x1>
    80022d40:	00031497          	auipc	s1,0x31
    80022d44:	2d048493          	addi	s1,s1,720 # 80054010 <excpt>
    80022d48:	0000a597          	auipc	a1,0xa
    80022d4c:	64058593          	addi	a1,a1,1600 # 8002d388 <__func__.0+0x2d0>
    80022d50:	cf89                	beqz	a5,80022d6a <stateen_C_test_4+0xac>
    80022d52:	6498                	ld	a4,8(s1)
    80022d54:	47d9                	li	a5,22
    80022d56:	0000a597          	auipc	a1,0xa
    80022d5a:	62258593          	addi	a1,a1,1570 # 8002d378 <__func__.0+0x2c0>
    80022d5e:	00f70663          	beq	a4,a5,80022d6a <stateen_C_test_4+0xac>
    80022d62:	0000a597          	auipc	a1,0xa
    80022d66:	62658593          	addi	a1,a1,1574 # 8002d388 <__func__.0+0x2d0>
    80022d6a:	0000a517          	auipc	a0,0xa
    80022d6e:	65e50513          	addi	a0,a0,1630 # 8002d3c8 <__func__.0+0x310>
    80022d72:	0e4080ef          	jal	8002ae56 <printf>
    80022d76:	00031797          	auipc	a5,0x31
    80022d7a:	29b7c783          	lbu	a5,667(a5) # 80054011 <excpt+0x1>
    80022d7e:	c789                	beqz	a5,80022d88 <stateen_C_test_4+0xca>
    80022d80:	6498                	ld	a4,8(s1)
    80022d82:	47d9                	li	a5,22
    80022d84:	00f70c63          	beq	a4,a5,80022d9c <stateen_C_test_4+0xde>
    80022d88:	0000a517          	auipc	a0,0xa
    80022d8c:	64850513          	addi	a0,a0,1608 # 8002d3d0 <__func__.0+0x318>
    80022d90:	0c6080ef          	jal	8002ae56 <printf>
    80022d94:	02900513          	li	a0,41
    80022d98:	5ad060ef          	jal	80029b44 <putchar>
    80022d9c:	4529                	li	a0,10
    80022d9e:	5a7060ef          	jal	80029b44 <putchar>
    80022da2:	00031417          	auipc	s0,0x31
    80022da6:	26f44403          	lbu	s0,623(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80022daa:	0000a597          	auipc	a1,0xa
    80022dae:	5de58593          	addi	a1,a1,1502 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022db2:	cc11                	beqz	s0,80022dce <stateen_C_test_4+0x110>
    80022db4:	6498                	ld	a4,8(s1)
    80022db6:	47d9                	li	a5,22
    TEST_END();
    80022db8:	0000a597          	auipc	a1,0xa
    80022dbc:	5c058593          	addi	a1,a1,1472 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022dc0:	00f70763          	beq	a4,a5,80022dce <stateen_C_test_4+0x110>
    80022dc4:	4401                	li	s0,0
    TEST_END();
    80022dc6:	0000a597          	auipc	a1,0xa
    80022dca:	5c258593          	addi	a1,a1,1474 # 8002d388 <__func__.0+0x2d0>
    80022dce:	0000a517          	auipc	a0,0xa
    80022dd2:	66250513          	addi	a0,a0,1634 # 8002d430 <__func__.0+0x378>
    80022dd6:	080080ef          	jal	8002ae56 <printf>
    80022dda:	4511                	li	a0,4
    80022ddc:	92cde0ef          	jal	80000f08 <goto_priv>
    80022de0:	a45de0ef          	jal	80001824 <reset_state>

}
    80022de4:	60e2                	ld	ra,24(sp)
    80022de6:	8522                	mv	a0,s0
    80022de8:	6442                	ld	s0,16(sp)
    80022dea:	64a2                	ld	s1,8(sp)
    80022dec:	6105                	addi	sp,sp,32
    80022dee:	8082                	ret

0000000080022df0 <stateen_C_test_5>:

bool stateen_C_test_5(){
    80022df0:	1101                	addi	sp,sp,-32

    //当mstateen.C=0,hs mode 不可访问自定义寄存器

    TEST_START();
    80022df2:	0000a597          	auipc	a1,0xa
    80022df6:	e2658593          	addi	a1,a1,-474 # 8002cc18 <__func__.32>
    80022dfa:	0000a517          	auipc	a0,0xa
    80022dfe:	59e50513          	addi	a0,a0,1438 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_5(){
    80022e02:	ec06                	sd	ra,24(sp)
    80022e04:	e822                	sd	s0,16(sp)
    80022e06:	e426                	sd	s1,8(sp)
    TEST_START();
    80022e08:	04e080ef          	jal	8002ae56 <printf>
    80022e0c:	4529                	li	a0,10
    80022e0e:	537060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80022e12:	4511                	li	a0,4
    80022e14:	8f4de0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022e18:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HS);
    80022e1c:	450d                	li	a0,3
    80022e1e:	8eade0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022e22:	febdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    80022e26:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022e2a:	a24de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022e2e:	08200593          	li	a1,130
    80022e32:	00013617          	auipc	a2,0x13
    80022e36:	db660613          	addi	a2,a2,-586 # 80035be8 <__func__.0+0x8b30>
    80022e3a:	0000a517          	auipc	a0,0xa
    80022e3e:	57650513          	addi	a0,a0,1398 # 8002d3b0 <__func__.0+0x2f8>
    80022e42:	014080ef          	jal	8002ae56 <printf>
    80022e46:	00031797          	auipc	a5,0x31
    80022e4a:	1cb7c783          	lbu	a5,459(a5) # 80054011 <excpt+0x1>
    80022e4e:	00031497          	auipc	s1,0x31
    80022e52:	1c248493          	addi	s1,s1,450 # 80054010 <excpt>
    80022e56:	0000a597          	auipc	a1,0xa
    80022e5a:	53258593          	addi	a1,a1,1330 # 8002d388 <__func__.0+0x2d0>
    80022e5e:	cf89                	beqz	a5,80022e78 <stateen_C_test_5+0x88>
    80022e60:	6498                	ld	a4,8(s1)
    80022e62:	4789                	li	a5,2
    80022e64:	0000a597          	auipc	a1,0xa
    80022e68:	51458593          	addi	a1,a1,1300 # 8002d378 <__func__.0+0x2c0>
    80022e6c:	00f70663          	beq	a4,a5,80022e78 <stateen_C_test_5+0x88>
    80022e70:	0000a597          	auipc	a1,0xa
    80022e74:	51858593          	addi	a1,a1,1304 # 8002d388 <__func__.0+0x2d0>
    80022e78:	0000a517          	auipc	a0,0xa
    80022e7c:	55050513          	addi	a0,a0,1360 # 8002d3c8 <__func__.0+0x310>
    80022e80:	7d7070ef          	jal	8002ae56 <printf>
    80022e84:	00031797          	auipc	a5,0x31
    80022e88:	18d7c783          	lbu	a5,397(a5) # 80054011 <excpt+0x1>
    80022e8c:	c789                	beqz	a5,80022e96 <stateen_C_test_5+0xa6>
    80022e8e:	6498                	ld	a4,8(s1)
    80022e90:	4789                	li	a5,2
    80022e92:	00f70c63          	beq	a4,a5,80022eaa <stateen_C_test_5+0xba>
    80022e96:	0000a517          	auipc	a0,0xa
    80022e9a:	53a50513          	addi	a0,a0,1338 # 8002d3d0 <__func__.0+0x318>
    80022e9e:	7b9070ef          	jal	8002ae56 <printf>
    80022ea2:	02900513          	li	a0,41
    80022ea6:	49f060ef          	jal	80029b44 <putchar>
    80022eaa:	4529                	li	a0,10
    80022eac:	499060ef          	jal	80029b44 <putchar>
    80022eb0:	00031417          	auipc	s0,0x31
    80022eb4:	16144403          	lbu	s0,353(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022eb8:	0000a597          	auipc	a1,0xa
    80022ebc:	4d058593          	addi	a1,a1,1232 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ec0:	cc11                	beqz	s0,80022edc <stateen_C_test_5+0xec>
    80022ec2:	6498                	ld	a4,8(s1)
    80022ec4:	4789                	li	a5,2
    TEST_END();
    80022ec6:	0000a597          	auipc	a1,0xa
    80022eca:	4b258593          	addi	a1,a1,1202 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ece:	00f70763          	beq	a4,a5,80022edc <stateen_C_test_5+0xec>
    80022ed2:	4401                	li	s0,0
    TEST_END();
    80022ed4:	0000a597          	auipc	a1,0xa
    80022ed8:	4b458593          	addi	a1,a1,1204 # 8002d388 <__func__.0+0x2d0>
    80022edc:	0000a517          	auipc	a0,0xa
    80022ee0:	55450513          	addi	a0,a0,1364 # 8002d430 <__func__.0+0x378>
    80022ee4:	773070ef          	jal	8002ae56 <printf>
    80022ee8:	4511                	li	a0,4
    80022eea:	81ede0ef          	jal	80000f08 <goto_priv>
    80022eee:	937de0ef          	jal	80001824 <reset_state>

}
    80022ef2:	60e2                	ld	ra,24(sp)
    80022ef4:	8522                	mv	a0,s0
    80022ef6:	6442                	ld	s0,16(sp)
    80022ef8:	64a2                	ld	s1,8(sp)
    80022efa:	6105                	addi	sp,sp,32
    80022efc:	8082                	ret

0000000080022efe <stateen_C_test_6>:


bool stateen_C_test_6(){
    80022efe:	1141                	addi	sp,sp,-16

    TEST_START();
    80022f00:	0000a597          	auipc	a1,0xa
    80022f04:	d3058593          	addi	a1,a1,-720 # 8002cc30 <__func__.31>
    80022f08:	0000a517          	auipc	a0,0xa
    80022f0c:	49050513          	addi	a0,a0,1168 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_6(){
    80022f10:	e406                	sd	ra,8(sp)
    80022f12:	e022                	sd	s0,0(sp)
    TEST_START();
    80022f14:	743070ef          	jal	8002ae56 <printf>
    80022f18:	4529                	li	a0,10
    80022f1a:	42b060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80022f1e:	4511                	li	a0,4
    80022f20:	fe9dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1,v=0时,可访问自定义寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022f24:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022f28:	60c0f073          	csrci	hstateen0,1

    goto_priv(PRIV_HS);
    80022f2c:	450d                	li	a0,3
    80022f2e:	fdbdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f32:	edbdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    80022f36:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022f3a:	914de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022f3e:	08200593          	li	a1,130
    80022f42:	00013617          	auipc	a2,0x13
    80022f46:	cf660613          	addi	a2,a2,-778 # 80035c38 <__func__.0+0x8b80>
    80022f4a:	0000a517          	auipc	a0,0xa
    80022f4e:	46650513          	addi	a0,a0,1126 # 8002d3b0 <__func__.0+0x2f8>
    80022f52:	705070ef          	jal	8002ae56 <printf>
    80022f56:	00031797          	auipc	a5,0x31
    80022f5a:	0bb7c783          	lbu	a5,187(a5) # 80054011 <excpt+0x1>
    80022f5e:	0000a597          	auipc	a1,0xa
    80022f62:	41a58593          	addi	a1,a1,1050 # 8002d378 <__func__.0+0x2c0>
    80022f66:	c789                	beqz	a5,80022f70 <stateen_C_test_6+0x72>
    80022f68:	0000a597          	auipc	a1,0xa
    80022f6c:	42058593          	addi	a1,a1,1056 # 8002d388 <__func__.0+0x2d0>
    80022f70:	0000a517          	auipc	a0,0xa
    80022f74:	45850513          	addi	a0,a0,1112 # 8002d3c8 <__func__.0+0x310>
    80022f78:	6df070ef          	jal	8002ae56 <printf>
    80022f7c:	00031797          	auipc	a5,0x31
    80022f80:	0957c783          	lbu	a5,149(a5) # 80054011 <excpt+0x1>
    80022f84:	e7e9                	bnez	a5,8002304e <stateen_C_test_6+0x150>
    80022f86:	4529                	li	a0,10
    80022f88:	3bd060ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

#endif

    goto_priv(PRIV_M);
    80022f8c:	4511                	li	a0,4
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022f8e:	00031417          	auipc	s0,0x31
    80022f92:	08344403          	lbu	s0,131(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    80022f96:	f73dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f9a:	e73dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    80022f9e:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022fa2:	8acde0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80022fa6:	08200593          	li	a1,130
    80022faa:	00013617          	auipc	a2,0x13
    80022fae:	cde60613          	addi	a2,a2,-802 # 80035c88 <__func__.0+0x8bd0>
    80022fb2:	0000a517          	auipc	a0,0xa
    80022fb6:	3fe50513          	addi	a0,a0,1022 # 8002d3b0 <__func__.0+0x2f8>
    80022fba:	69d070ef          	jal	8002ae56 <printf>
    80022fbe:	00031797          	auipc	a5,0x31
    80022fc2:	0537c783          	lbu	a5,83(a5) # 80054011 <excpt+0x1>
    80022fc6:	0000a597          	auipc	a1,0xa
    80022fca:	3c258593          	addi	a1,a1,962 # 8002d388 <__func__.0+0x2d0>
    80022fce:	e789                	bnez	a5,80022fd8 <stateen_C_test_6+0xda>
    80022fd0:	0000a597          	auipc	a1,0xa
    80022fd4:	3a858593          	addi	a1,a1,936 # 8002d378 <__func__.0+0x2c0>
    80022fd8:	0000a517          	auipc	a0,0xa
    80022fdc:	3f050513          	addi	a0,a0,1008 # 8002d3c8 <__func__.0+0x310>
    80022fe0:	677070ef          	jal	8002ae56 <printf>
    80022fe4:	00031797          	auipc	a5,0x31
    80022fe8:	02d7c783          	lbu	a5,45(a5) # 80054011 <excpt+0x1>
    80022fec:	e7b1                	bnez	a5,80023038 <stateen_C_test_6+0x13a>
    80022fee:	4529                	li	a0,10
    80022ff0:	355060ef          	jal	80029b44 <putchar>
    80022ff4:	e815                	bnez	s0,80023028 <stateen_C_test_6+0x12a>
    80022ff6:	00031797          	auipc	a5,0x31
    80022ffa:	01b7c783          	lbu	a5,27(a5) # 80054011 <excpt+0x1>
    80022ffe:	c79d                	beqz	a5,8002302c <stateen_C_test_6+0x12e>
        excpt.triggered == false
    ); 

    TEST_END();
    80023000:	0000a597          	auipc	a1,0xa
    80023004:	38858593          	addi	a1,a1,904 # 8002d388 <__func__.0+0x2d0>
    80023008:	0000a517          	auipc	a0,0xa
    8002300c:	42850513          	addi	a0,a0,1064 # 8002d430 <__func__.0+0x378>
    80023010:	647070ef          	jal	8002ae56 <printf>
    80023014:	4511                	li	a0,4
    80023016:	ef3dd0ef          	jal	80000f08 <goto_priv>
    8002301a:	80bde0ef          	jal	80001824 <reset_state>

}
    8002301e:	60a2                	ld	ra,8(sp)
    80023020:	8522                	mv	a0,s0
    80023022:	6402                	ld	s0,0(sp)
    80023024:	0141                	addi	sp,sp,16
    80023026:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80023028:	4401                	li	s0,0
    8002302a:	bfd9                	j	80023000 <stateen_C_test_6+0x102>
    8002302c:	4405                	li	s0,1
    TEST_END();
    8002302e:	0000a597          	auipc	a1,0xa
    80023032:	34a58593          	addi	a1,a1,842 # 8002d378 <__func__.0+0x2c0>
    80023036:	bfc9                	j	80023008 <stateen_C_test_6+0x10a>
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80023038:	0000a517          	auipc	a0,0xa
    8002303c:	39850513          	addi	a0,a0,920 # 8002d3d0 <__func__.0+0x318>
    80023040:	617070ef          	jal	8002ae56 <printf>
    80023044:	02900513          	li	a0,41
    80023048:	2fd060ef          	jal	80029b44 <putchar>
    8002304c:	b74d                	j	80022fee <stateen_C_test_6+0xf0>
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    8002304e:	0000a517          	auipc	a0,0xa
    80023052:	38250513          	addi	a0,a0,898 # 8002d3d0 <__func__.0+0x318>
    80023056:	601070ef          	jal	8002ae56 <printf>
    8002305a:	02900513          	li	a0,41
    8002305e:	2e7060ef          	jal	80029b44 <putchar>
    80023062:	b715                	j	80022f86 <stateen_C_test_6+0x88>

0000000080023064 <stateen_C_test_7>:


bool stateen_C_test_7(){
    80023064:	1141                	addi	sp,sp,-16

    TEST_START();
    80023066:	0000a597          	auipc	a1,0xa
    8002306a:	be258593          	addi	a1,a1,-1054 # 8002cc48 <__func__.30>
    8002306e:	0000a517          	auipc	a0,0xa
    80023072:	32a50513          	addi	a0,a0,810 # 8002d398 <__func__.0+0x2e0>
bool stateen_C_test_7(){
    80023076:	e406                	sd	ra,8(sp)
    80023078:	e022                	sd	s0,0(sp)
    TEST_START();
    8002307a:	5dd070ef          	jal	8002ae56 <printf>
    8002307e:	4529                	li	a0,10
    80023080:	2c5060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80023084:	4511                	li	a0,4
    80023086:	e83dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1 hstateen.C=1,v=1 时可访问自定义寄存器(vs,vu自定义寄存器是哪些)
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    8002308a:	30c0e073          	csrsi	mstateen0,1
    CSRS(CSR_HSTATEEN0 , MSTATEEN_C);
    8002308e:	60c0e073          	csrsi	hstateen0,1

    goto_priv(PRIV_VS);
    80023092:	4509                	li	a0,2
    80023094:	e75dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023098:	d75dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    8002309c:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    800230a0:	fafdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800230a4:	08200593          	li	a1,130
    800230a8:	00013617          	auipc	a2,0x13
    800230ac:	c3060613          	addi	a2,a2,-976 # 80035cd8 <__func__.0+0x8c20>
    800230b0:	0000a517          	auipc	a0,0xa
    800230b4:	30050513          	addi	a0,a0,768 # 8002d3b0 <__func__.0+0x2f8>
    800230b8:	59f070ef          	jal	8002ae56 <printf>
    800230bc:	00031797          	auipc	a5,0x31
    800230c0:	f557c783          	lbu	a5,-171(a5) # 80054011 <excpt+0x1>
    800230c4:	0000a597          	auipc	a1,0xa
    800230c8:	2b458593          	addi	a1,a1,692 # 8002d378 <__func__.0+0x2c0>
    800230cc:	c789                	beqz	a5,800230d6 <stateen_C_test_7+0x72>
    800230ce:	0000a597          	auipc	a1,0xa
    800230d2:	2ba58593          	addi	a1,a1,698 # 8002d388 <__func__.0+0x2d0>
    800230d6:	0000a517          	auipc	a0,0xa
    800230da:	2f250513          	addi	a0,a0,754 # 8002d3c8 <__func__.0+0x310>
    800230de:	579070ef          	jal	8002ae56 <printf>
    800230e2:	00031797          	auipc	a5,0x31
    800230e6:	f2f7c783          	lbu	a5,-209(a5) # 80054011 <excpt+0x1>
    800230ea:	e7e9                	bnez	a5,800231b4 <stateen_C_test_7+0x150>
    800230ec:	4529                	li	a0,10
    800230ee:	257060ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800230f2:	4501                	li	a0,0
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800230f4:	00031417          	auipc	s0,0x31
    800230f8:	f1d44403          	lbu	s0,-227(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VU);
    800230fc:	e0ddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023100:	d0ddd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    80023104:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80023108:	f47dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002310c:	08200593          	li	a1,130
    80023110:	00013617          	auipc	a2,0x13
    80023114:	c1860613          	addi	a2,a2,-1000 # 80035d28 <__func__.0+0x8c70>
    80023118:	0000a517          	auipc	a0,0xa
    8002311c:	29850513          	addi	a0,a0,664 # 8002d3b0 <__func__.0+0x2f8>
    80023120:	537070ef          	jal	8002ae56 <printf>
    80023124:	00031797          	auipc	a5,0x31
    80023128:	eed7c783          	lbu	a5,-275(a5) # 80054011 <excpt+0x1>
    8002312c:	0000a597          	auipc	a1,0xa
    80023130:	25c58593          	addi	a1,a1,604 # 8002d388 <__func__.0+0x2d0>
    80023134:	e789                	bnez	a5,8002313e <stateen_C_test_7+0xda>
    80023136:	0000a597          	auipc	a1,0xa
    8002313a:	24258593          	addi	a1,a1,578 # 8002d378 <__func__.0+0x2c0>
    8002313e:	0000a517          	auipc	a0,0xa
    80023142:	28a50513          	addi	a0,a0,650 # 8002d3c8 <__func__.0+0x310>
    80023146:	511070ef          	jal	8002ae56 <printf>
    8002314a:	00031797          	auipc	a5,0x31
    8002314e:	ec77c783          	lbu	a5,-313(a5) # 80054011 <excpt+0x1>
    80023152:	e7b1                	bnez	a5,8002319e <stateen_C_test_7+0x13a>
    80023154:	4529                	li	a0,10
    80023156:	1ef060ef          	jal	80029b44 <putchar>
    8002315a:	e815                	bnez	s0,8002318e <stateen_C_test_7+0x12a>
    8002315c:	00031797          	auipc	a5,0x31
    80023160:	eb57c783          	lbu	a5,-331(a5) # 80054011 <excpt+0x1>
    80023164:	c79d                	beqz	a5,80023192 <stateen_C_test_7+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    80023166:	0000a597          	auipc	a1,0xa
    8002316a:	22258593          	addi	a1,a1,546 # 8002d388 <__func__.0+0x2d0>
    8002316e:	0000a517          	auipc	a0,0xa
    80023172:	2c250513          	addi	a0,a0,706 # 8002d430 <__func__.0+0x378>
    80023176:	4e1070ef          	jal	8002ae56 <printf>
    8002317a:	4511                	li	a0,4
    8002317c:	d8ddd0ef          	jal	80000f08 <goto_priv>
    80023180:	ea4de0ef          	jal	80001824 <reset_state>
}
    80023184:	60a2                	ld	ra,8(sp)
    80023186:	8522                	mv	a0,s0
    80023188:	6402                	ld	s0,0(sp)
    8002318a:	0141                	addi	sp,sp,16
    8002318c:	8082                	ret
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002318e:	4401                	li	s0,0
    80023190:	bfd9                	j	80023166 <stateen_C_test_7+0x102>
    80023192:	4405                	li	s0,1
    TEST_END();
    80023194:	0000a597          	auipc	a1,0xa
    80023198:	1e458593          	addi	a1,a1,484 # 8002d378 <__func__.0+0x2c0>
    8002319c:	bfc9                	j	8002316e <stateen_C_test_7+0x10a>
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002319e:	0000a517          	auipc	a0,0xa
    800231a2:	23250513          	addi	a0,a0,562 # 8002d3d0 <__func__.0+0x318>
    800231a6:	4b1070ef          	jal	8002ae56 <printf>
    800231aa:	02900513          	li	a0,41
    800231ae:	197060ef          	jal	80029b44 <putchar>
    800231b2:	b74d                	j	80023154 <stateen_C_test_7+0xf0>
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800231b4:	0000a517          	auipc	a0,0xa
    800231b8:	21c50513          	addi	a0,a0,540 # 8002d3d0 <__func__.0+0x318>
    800231bc:	49b070ef          	jal	8002ae56 <printf>
    800231c0:	02900513          	li	a0,41
    800231c4:	181060ef          	jal	80029b44 <putchar>
    800231c8:	b715                	j	800230ec <stateen_C_test_7+0x88>

00000000800231ca <stateen_IMSIC_test_1>:

//----



bool stateen_IMSIC_test_1(){
    800231ca:	1101                	addi	sp,sp,-32

    TEST_START();
    800231cc:	0000a597          	auipc	a1,0xa
    800231d0:	a9458593          	addi	a1,a1,-1388 # 8002cc60 <__func__.29>
    800231d4:	0000a517          	auipc	a0,0xa
    800231d8:	1c450513          	addi	a0,a0,452 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_1(){
    800231dc:	ec06                	sd	ra,24(sp)
    800231de:	e822                	sd	s0,16(sp)
    800231e0:	e426                	sd	s1,8(sp)
    TEST_START();
    800231e2:	475070ef          	jal	8002ae56 <printf>
    800231e6:	4529                	li	a0,10
    800231e8:	15d060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800231ec:	4511                	li	a0,4
    800231ee:	d1bdd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=0,hu mode 不可访问stopei、vstopei寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800231f2:	4785                	li	a5,1
    800231f4:	17ea                	slli	a5,a5,0x3a
    800231f6:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    800231fa:	4505                	li	a0,1
    800231fc:	d0ddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023200:	c0ddd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023204:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023208:	e47dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    8002320c:	08200593          	li	a1,130
    80023210:	00013617          	auipc	a2,0x13
    80023214:	b6860613          	addi	a2,a2,-1176 # 80035d78 <__func__.0+0x8cc0>
    80023218:	0000a517          	auipc	a0,0xa
    8002321c:	19850513          	addi	a0,a0,408 # 8002d3b0 <__func__.0+0x2f8>
    80023220:	437070ef          	jal	8002ae56 <printf>
    80023224:	00031797          	auipc	a5,0x31
    80023228:	ded7c783          	lbu	a5,-531(a5) # 80054011 <excpt+0x1>
    8002322c:	00031497          	auipc	s1,0x31
    80023230:	de448493          	addi	s1,s1,-540 # 80054010 <excpt>
    80023234:	0000a597          	auipc	a1,0xa
    80023238:	15458593          	addi	a1,a1,340 # 8002d388 <__func__.0+0x2d0>
    8002323c:	cf89                	beqz	a5,80023256 <stateen_IMSIC_test_1+0x8c>
    8002323e:	6498                	ld	a4,8(s1)
    80023240:	4789                	li	a5,2
    80023242:	0000a597          	auipc	a1,0xa
    80023246:	13658593          	addi	a1,a1,310 # 8002d378 <__func__.0+0x2c0>
    8002324a:	00f70663          	beq	a4,a5,80023256 <stateen_IMSIC_test_1+0x8c>
    8002324e:	0000a597          	auipc	a1,0xa
    80023252:	13a58593          	addi	a1,a1,314 # 8002d388 <__func__.0+0x2d0>
    80023256:	0000a517          	auipc	a0,0xa
    8002325a:	17250513          	addi	a0,a0,370 # 8002d3c8 <__func__.0+0x310>
    8002325e:	3f9070ef          	jal	8002ae56 <printf>
    80023262:	00031797          	auipc	a5,0x31
    80023266:	daf7c783          	lbu	a5,-593(a5) # 80054011 <excpt+0x1>
    8002326a:	c789                	beqz	a5,80023274 <stateen_IMSIC_test_1+0xaa>
    8002326c:	6498                	ld	a4,8(s1)
    8002326e:	4789                	li	a5,2
    80023270:	00f70c63          	beq	a4,a5,80023288 <stateen_IMSIC_test_1+0xbe>
    80023274:	0000a517          	auipc	a0,0xa
    80023278:	15c50513          	addi	a0,a0,348 # 8002d3d0 <__func__.0+0x318>
    8002327c:	3db070ef          	jal	8002ae56 <printf>
    80023280:	02900513          	li	a0,41
    80023284:	0c1060ef          	jal	80029b44 <putchar>
    80023288:	4529                	li	a0,10
    8002328a:	0bb060ef          	jal	80029b44 <putchar>
    8002328e:	00031797          	auipc	a5,0x31
    80023292:	d837c783          	lbu	a5,-637(a5) # 80054011 <excpt+0x1>
    80023296:	4401                	li	s0,0
    80023298:	c789                	beqz	a5,800232a2 <stateen_IMSIC_test_1+0xd8>
    8002329a:	6480                	ld	s0,8(s1)
    8002329c:	1479                	addi	s0,s0,-2
    8002329e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800232a2:	4505                	li	a0,1
    800232a4:	c65dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800232a8:	b65dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800232ac:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800232b0:	d9fdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800232b4:	08200593          	li	a1,130
    800232b8:	00013617          	auipc	a2,0x13
    800232bc:	b1060613          	addi	a2,a2,-1264 # 80035dc8 <__func__.0+0x8d10>
    800232c0:	0000a517          	auipc	a0,0xa
    800232c4:	0f050513          	addi	a0,a0,240 # 8002d3b0 <__func__.0+0x2f8>
    800232c8:	38f070ef          	jal	8002ae56 <printf>
    800232cc:	00031797          	auipc	a5,0x31
    800232d0:	d457c783          	lbu	a5,-699(a5) # 80054011 <excpt+0x1>
    800232d4:	0000a597          	auipc	a1,0xa
    800232d8:	0b458593          	addi	a1,a1,180 # 8002d388 <__func__.0+0x2d0>
    800232dc:	cf89                	beqz	a5,800232f6 <stateen_IMSIC_test_1+0x12c>
    800232de:	6498                	ld	a4,8(s1)
    800232e0:	4789                	li	a5,2
    800232e2:	0000a597          	auipc	a1,0xa
    800232e6:	09658593          	addi	a1,a1,150 # 8002d378 <__func__.0+0x2c0>
    800232ea:	00f70663          	beq	a4,a5,800232f6 <stateen_IMSIC_test_1+0x12c>
    800232ee:	0000a597          	auipc	a1,0xa
    800232f2:	09a58593          	addi	a1,a1,154 # 8002d388 <__func__.0+0x2d0>
    800232f6:	0000a517          	auipc	a0,0xa
    800232fa:	0d250513          	addi	a0,a0,210 # 8002d3c8 <__func__.0+0x310>
    800232fe:	359070ef          	jal	8002ae56 <printf>
    80023302:	00031797          	auipc	a5,0x31
    80023306:	d0f7c783          	lbu	a5,-753(a5) # 80054011 <excpt+0x1>
    8002330a:	c789                	beqz	a5,80023314 <stateen_IMSIC_test_1+0x14a>
    8002330c:	6498                	ld	a4,8(s1)
    8002330e:	4789                	li	a5,2
    80023310:	00f70c63          	beq	a4,a5,80023328 <stateen_IMSIC_test_1+0x15e>
    80023314:	0000a517          	auipc	a0,0xa
    80023318:	0bc50513          	addi	a0,a0,188 # 8002d3d0 <__func__.0+0x318>
    8002331c:	33b070ef          	jal	8002ae56 <printf>
    80023320:	02900513          	li	a0,41
    80023324:	021060ef          	jal	80029b44 <putchar>
    80023328:	4529                	li	a0,10
    8002332a:	01b060ef          	jal	80029b44 <putchar>
    8002332e:	c015                	beqz	s0,80023352 <stateen_IMSIC_test_1+0x188>
    80023330:	00031417          	auipc	s0,0x31
    80023334:	ce144403          	lbu	s0,-799(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023338:	0000a597          	auipc	a1,0xa
    8002333c:	05058593          	addi	a1,a1,80 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023340:	cc11                	beqz	s0,8002335c <stateen_IMSIC_test_1+0x192>
    80023342:	6498                	ld	a4,8(s1)
    80023344:	4789                	li	a5,2
    TEST_END();
    80023346:	0000a597          	auipc	a1,0xa
    8002334a:	03258593          	addi	a1,a1,50 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    8002334e:	00f70763          	beq	a4,a5,8002335c <stateen_IMSIC_test_1+0x192>
    80023352:	4401                	li	s0,0
    TEST_END();
    80023354:	0000a597          	auipc	a1,0xa
    80023358:	03458593          	addi	a1,a1,52 # 8002d388 <__func__.0+0x2d0>
    8002335c:	0000a517          	auipc	a0,0xa
    80023360:	0d450513          	addi	a0,a0,212 # 8002d430 <__func__.0+0x378>
    80023364:	2f3070ef          	jal	8002ae56 <printf>
    80023368:	4511                	li	a0,4
    8002336a:	b9fdd0ef          	jal	80000f08 <goto_priv>
    8002336e:	cb6de0ef          	jal	80001824 <reset_state>

}
    80023372:	60e2                	ld	ra,24(sp)
    80023374:	8522                	mv	a0,s0
    80023376:	6442                	ld	s0,16(sp)
    80023378:	64a2                	ld	s1,8(sp)
    8002337a:	6105                	addi	sp,sp,32
    8002337c:	8082                	ret

000000008002337e <stateen_IMSIC_test_2>:

bool stateen_IMSIC_test_2(){
    8002337e:	1101                	addi	sp,sp,-32

    TEST_START();
    80023380:	0000a597          	auipc	a1,0xa
    80023384:	8f858593          	addi	a1,a1,-1800 # 8002cc78 <__func__.28>
    80023388:	0000a517          	auipc	a0,0xa
    8002338c:	01050513          	addi	a0,a0,16 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_2(){
    80023390:	ec06                	sd	ra,24(sp)
    80023392:	e822                	sd	s0,16(sp)
    80023394:	e426                	sd	s1,8(sp)
    TEST_START();
    80023396:	2c1070ef          	jal	8002ae56 <printf>
    8002339a:	4529                	li	a0,10
    8002339c:	7a8060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800233a0:	4511                	li	a0,4
    800233a2:	b67dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800233a6:	4785                	li	a5,1
    800233a8:	17ea                	slli	a5,a5,0x3a
    800233aa:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800233ae:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时,不可访问stopei、vstopei寄存器
    goto_priv(PRIV_VU);
    800233b2:	4501                	li	a0,0
    800233b4:	b55dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800233b8:	a55dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800233bc:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800233c0:	c8fdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800233c4:	08200593          	li	a1,130
    800233c8:	00013617          	auipc	a2,0x13
    800233cc:	a5060613          	addi	a2,a2,-1456 # 80035e18 <__func__.0+0x8d60>
    800233d0:	0000a517          	auipc	a0,0xa
    800233d4:	fe050513          	addi	a0,a0,-32 # 8002d3b0 <__func__.0+0x2f8>
    800233d8:	27f070ef          	jal	8002ae56 <printf>
    800233dc:	00031797          	auipc	a5,0x31
    800233e0:	c357c783          	lbu	a5,-971(a5) # 80054011 <excpt+0x1>
    800233e4:	00031497          	auipc	s1,0x31
    800233e8:	c2c48493          	addi	s1,s1,-980 # 80054010 <excpt>
    800233ec:	0000a597          	auipc	a1,0xa
    800233f0:	f9c58593          	addi	a1,a1,-100 # 8002d388 <__func__.0+0x2d0>
    800233f4:	cf89                	beqz	a5,8002340e <stateen_IMSIC_test_2+0x90>
    800233f6:	6498                	ld	a4,8(s1)
    800233f8:	47d9                	li	a5,22
    800233fa:	0000a597          	auipc	a1,0xa
    800233fe:	f7e58593          	addi	a1,a1,-130 # 8002d378 <__func__.0+0x2c0>
    80023402:	00f70663          	beq	a4,a5,8002340e <stateen_IMSIC_test_2+0x90>
    80023406:	0000a597          	auipc	a1,0xa
    8002340a:	f8258593          	addi	a1,a1,-126 # 8002d388 <__func__.0+0x2d0>
    8002340e:	0000a517          	auipc	a0,0xa
    80023412:	fba50513          	addi	a0,a0,-70 # 8002d3c8 <__func__.0+0x310>
    80023416:	241070ef          	jal	8002ae56 <printf>
    8002341a:	00031797          	auipc	a5,0x31
    8002341e:	bf77c783          	lbu	a5,-1033(a5) # 80054011 <excpt+0x1>
    80023422:	c789                	beqz	a5,8002342c <stateen_IMSIC_test_2+0xae>
    80023424:	6498                	ld	a4,8(s1)
    80023426:	47d9                	li	a5,22
    80023428:	00f70c63          	beq	a4,a5,80023440 <stateen_IMSIC_test_2+0xc2>
    8002342c:	0000a517          	auipc	a0,0xa
    80023430:	fa450513          	addi	a0,a0,-92 # 8002d3d0 <__func__.0+0x318>
    80023434:	223070ef          	jal	8002ae56 <printf>
    80023438:	02900513          	li	a0,41
    8002343c:	708060ef          	jal	80029b44 <putchar>
    80023440:	4529                	li	a0,10
    80023442:	702060ef          	jal	80029b44 <putchar>
    80023446:	00031797          	auipc	a5,0x31
    8002344a:	bcb7c783          	lbu	a5,-1077(a5) # 80054011 <excpt+0x1>
    8002344e:	4401                	li	s0,0
    80023450:	c789                	beqz	a5,8002345a <stateen_IMSIC_test_2+0xdc>
    80023452:	6480                	ld	s0,8(s1)
    80023454:	1429                	addi	s0,s0,-22
    80023456:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002345a:	4501                	li	a0,0
    8002345c:	aaddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023460:	9addd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023464:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023468:	be7dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002346c:	08200593          	li	a1,130
    80023470:	00013617          	auipc	a2,0x13
    80023474:	a0060613          	addi	a2,a2,-1536 # 80035e70 <__func__.0+0x8db8>
    80023478:	0000a517          	auipc	a0,0xa
    8002347c:	f3850513          	addi	a0,a0,-200 # 8002d3b0 <__func__.0+0x2f8>
    80023480:	1d7070ef          	jal	8002ae56 <printf>
    80023484:	00031797          	auipc	a5,0x31
    80023488:	b8d7c783          	lbu	a5,-1139(a5) # 80054011 <excpt+0x1>
    8002348c:	0000a597          	auipc	a1,0xa
    80023490:	efc58593          	addi	a1,a1,-260 # 8002d388 <__func__.0+0x2d0>
    80023494:	cf89                	beqz	a5,800234ae <stateen_IMSIC_test_2+0x130>
    80023496:	6498                	ld	a4,8(s1)
    80023498:	47d9                	li	a5,22
    8002349a:	0000a597          	auipc	a1,0xa
    8002349e:	ede58593          	addi	a1,a1,-290 # 8002d378 <__func__.0+0x2c0>
    800234a2:	00f70663          	beq	a4,a5,800234ae <stateen_IMSIC_test_2+0x130>
    800234a6:	0000a597          	auipc	a1,0xa
    800234aa:	ee258593          	addi	a1,a1,-286 # 8002d388 <__func__.0+0x2d0>
    800234ae:	0000a517          	auipc	a0,0xa
    800234b2:	f1a50513          	addi	a0,a0,-230 # 8002d3c8 <__func__.0+0x310>
    800234b6:	1a1070ef          	jal	8002ae56 <printf>
    800234ba:	00031797          	auipc	a5,0x31
    800234be:	b577c783          	lbu	a5,-1193(a5) # 80054011 <excpt+0x1>
    800234c2:	c789                	beqz	a5,800234cc <stateen_IMSIC_test_2+0x14e>
    800234c4:	6498                	ld	a4,8(s1)
    800234c6:	47d9                	li	a5,22
    800234c8:	00f70c63          	beq	a4,a5,800234e0 <stateen_IMSIC_test_2+0x162>
    800234cc:	0000a517          	auipc	a0,0xa
    800234d0:	f0450513          	addi	a0,a0,-252 # 8002d3d0 <__func__.0+0x318>
    800234d4:	183070ef          	jal	8002ae56 <printf>
    800234d8:	02900513          	li	a0,41
    800234dc:	668060ef          	jal	80029b44 <putchar>
    800234e0:	4529                	li	a0,10
    800234e2:	662060ef          	jal	80029b44 <putchar>
    800234e6:	c015                	beqz	s0,8002350a <stateen_IMSIC_test_2+0x18c>
    800234e8:	00031417          	auipc	s0,0x31
    800234ec:	b2944403          	lbu	s0,-1239(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800234f0:	0000a597          	auipc	a1,0xa
    800234f4:	e9858593          	addi	a1,a1,-360 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800234f8:	cc11                	beqz	s0,80023514 <stateen_IMSIC_test_2+0x196>
    800234fa:	6498                	ld	a4,8(s1)
    800234fc:	47d9                	li	a5,22
    TEST_END();
    800234fe:	0000a597          	auipc	a1,0xa
    80023502:	e7a58593          	addi	a1,a1,-390 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023506:	00f70763          	beq	a4,a5,80023514 <stateen_IMSIC_test_2+0x196>
    8002350a:	4401                	li	s0,0
    TEST_END();
    8002350c:	0000a597          	auipc	a1,0xa
    80023510:	e7c58593          	addi	a1,a1,-388 # 8002d388 <__func__.0+0x2d0>
    80023514:	0000a517          	auipc	a0,0xa
    80023518:	f1c50513          	addi	a0,a0,-228 # 8002d430 <__func__.0+0x378>
    8002351c:	13b070ef          	jal	8002ae56 <printf>
    80023520:	4511                	li	a0,4
    80023522:	9e7dd0ef          	jal	80000f08 <goto_priv>
    80023526:	afede0ef          	jal	80001824 <reset_state>

}
    8002352a:	60e2                	ld	ra,24(sp)
    8002352c:	8522                	mv	a0,s0
    8002352e:	6442                	ld	s0,16(sp)
    80023530:	64a2                	ld	s1,8(sp)
    80023532:	6105                	addi	sp,sp,32
    80023534:	8082                	ret

0000000080023536 <stateen_IMSIC_test_3>:

bool stateen_IMSIC_test_3(){
    80023536:	1141                	addi	sp,sp,-16

    //当mstateen.IMSIC=0,m mode 可访问stopei、vstopei寄存器

    TEST_START();
    80023538:	00009597          	auipc	a1,0x9
    8002353c:	75858593          	addi	a1,a1,1880 # 8002cc90 <__func__.27>
    80023540:	0000a517          	auipc	a0,0xa
    80023544:	e5850513          	addi	a0,a0,-424 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_3(){
    80023548:	e406                	sd	ra,8(sp)
    8002354a:	e022                	sd	s0,0(sp)
    TEST_START();
    8002354c:	10b070ef          	jal	8002ae56 <printf>
    80023550:	4529                	li	a0,10
    80023552:	5f2060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80023556:	4511                	li	a0,4
    80023558:	9b1dd0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    8002355c:	4785                	li	a5,1
    8002355e:	17ea                	slli	a5,a5,0x3a
    80023560:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80023564:	4511                	li	a0,4
    80023566:	9a3dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002356a:	8a3dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    8002356e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023572:	adddd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    80023576:	08200593          	li	a1,130
    8002357a:	00013617          	auipc	a2,0x13
    8002357e:	94e60613          	addi	a2,a2,-1714 # 80035ec8 <__func__.0+0x8e10>
    80023582:	0000a517          	auipc	a0,0xa
    80023586:	e2e50513          	addi	a0,a0,-466 # 8002d3b0 <__func__.0+0x2f8>
    8002358a:	0cd070ef          	jal	8002ae56 <printf>
    8002358e:	00031797          	auipc	a5,0x31
    80023592:	a837c783          	lbu	a5,-1405(a5) # 80054011 <excpt+0x1>
    80023596:	0000a597          	auipc	a1,0xa
    8002359a:	de258593          	addi	a1,a1,-542 # 8002d378 <__func__.0+0x2c0>
    8002359e:	c789                	beqz	a5,800235a8 <stateen_IMSIC_test_3+0x72>
    800235a0:	0000a597          	auipc	a1,0xa
    800235a4:	de858593          	addi	a1,a1,-536 # 8002d388 <__func__.0+0x2d0>
    800235a8:	0000a517          	auipc	a0,0xa
    800235ac:	e2050513          	addi	a0,a0,-480 # 8002d3c8 <__func__.0+0x310>
    800235b0:	0a7070ef          	jal	8002ae56 <printf>
    800235b4:	00031797          	auipc	a5,0x31
    800235b8:	a5d7c783          	lbu	a5,-1443(a5) # 80054011 <excpt+0x1>
    800235bc:	e7e9                	bnez	a5,80023686 <stateen_IMSIC_test_3+0x150>
    800235be:	4529                	li	a0,10
    800235c0:	584060ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800235c4:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800235c6:	00031417          	auipc	s0,0x31
    800235ca:	a4b44403          	lbu	s0,-1461(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    800235ce:	93bdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800235d2:	83bdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800235d6:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800235da:	a75dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800235de:	08200593          	li	a1,130
    800235e2:	00013617          	auipc	a2,0x13
    800235e6:	92660613          	addi	a2,a2,-1754 # 80035f08 <__func__.0+0x8e50>
    800235ea:	0000a517          	auipc	a0,0xa
    800235ee:	dc650513          	addi	a0,a0,-570 # 8002d3b0 <__func__.0+0x2f8>
    800235f2:	065070ef          	jal	8002ae56 <printf>
    800235f6:	00031797          	auipc	a5,0x31
    800235fa:	a1b7c783          	lbu	a5,-1509(a5) # 80054011 <excpt+0x1>
    800235fe:	0000a597          	auipc	a1,0xa
    80023602:	d8a58593          	addi	a1,a1,-630 # 8002d388 <__func__.0+0x2d0>
    80023606:	e789                	bnez	a5,80023610 <stateen_IMSIC_test_3+0xda>
    80023608:	0000a597          	auipc	a1,0xa
    8002360c:	d7058593          	addi	a1,a1,-656 # 8002d378 <__func__.0+0x2c0>
    80023610:	0000a517          	auipc	a0,0xa
    80023614:	db850513          	addi	a0,a0,-584 # 8002d3c8 <__func__.0+0x310>
    80023618:	03f070ef          	jal	8002ae56 <printf>
    8002361c:	00031797          	auipc	a5,0x31
    80023620:	9f57c783          	lbu	a5,-1547(a5) # 80054011 <excpt+0x1>
    80023624:	e7b1                	bnez	a5,80023670 <stateen_IMSIC_test_3+0x13a>
    80023626:	4529                	li	a0,10
    80023628:	51c060ef          	jal	80029b44 <putchar>
    8002362c:	e815                	bnez	s0,80023660 <stateen_IMSIC_test_3+0x12a>
    8002362e:	00031797          	auipc	a5,0x31
    80023632:	9e37c783          	lbu	a5,-1565(a5) # 80054011 <excpt+0x1>
    80023636:	c79d                	beqz	a5,80023664 <stateen_IMSIC_test_3+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    80023638:	0000a597          	auipc	a1,0xa
    8002363c:	d5058593          	addi	a1,a1,-688 # 8002d388 <__func__.0+0x2d0>
    80023640:	0000a517          	auipc	a0,0xa
    80023644:	df050513          	addi	a0,a0,-528 # 8002d430 <__func__.0+0x378>
    80023648:	00f070ef          	jal	8002ae56 <printf>
    8002364c:	4511                	li	a0,4
    8002364e:	8bbdd0ef          	jal	80000f08 <goto_priv>
    80023652:	9d2de0ef          	jal	80001824 <reset_state>

}
    80023656:	60a2                	ld	ra,8(sp)
    80023658:	8522                	mv	a0,s0
    8002365a:	6402                	ld	s0,0(sp)
    8002365c:	0141                	addi	sp,sp,16
    8002365e:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023660:	4401                	li	s0,0
    80023662:	bfd9                	j	80023638 <stateen_IMSIC_test_3+0x102>
    80023664:	4405                	li	s0,1
    TEST_END();
    80023666:	0000a597          	auipc	a1,0xa
    8002366a:	d1258593          	addi	a1,a1,-750 # 8002d378 <__func__.0+0x2c0>
    8002366e:	bfc9                	j	80023640 <stateen_IMSIC_test_3+0x10a>
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023670:	0000a517          	auipc	a0,0xa
    80023674:	d6050513          	addi	a0,a0,-672 # 8002d3d0 <__func__.0+0x318>
    80023678:	7de070ef          	jal	8002ae56 <printf>
    8002367c:	02900513          	li	a0,41
    80023680:	4c4060ef          	jal	80029b44 <putchar>
    80023684:	b74d                	j	80023626 <stateen_IMSIC_test_3+0xf0>
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    80023686:	0000a517          	auipc	a0,0xa
    8002368a:	d4a50513          	addi	a0,a0,-694 # 8002d3d0 <__func__.0+0x318>
    8002368e:	7c8070ef          	jal	8002ae56 <printf>
    80023692:	02900513          	li	a0,41
    80023696:	4ae060ef          	jal	80029b44 <putchar>
    8002369a:	b715                	j	800235be <stateen_IMSIC_test_3+0x88>

000000008002369c <stateen_IMSIC_test_4>:

bool stateen_IMSIC_test_4(){
    8002369c:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时不可访问stopei、vstopei寄存器

    TEST_START();
    8002369e:	00009597          	auipc	a1,0x9
    800236a2:	60a58593          	addi	a1,a1,1546 # 8002cca8 <__func__.26>
    800236a6:	0000a517          	auipc	a0,0xa
    800236aa:	cf250513          	addi	a0,a0,-782 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_4(){
    800236ae:	ec06                	sd	ra,24(sp)
    800236b0:	e822                	sd	s0,16(sp)
    800236b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800236b4:	7a2070ef          	jal	8002ae56 <printf>
    800236b8:	4529                	li	a0,10
    800236ba:	48a060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800236be:	4511                	li	a0,4
    800236c0:	849dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800236c4:	4785                	li	a5,1
    800236c6:	17ea                	slli	a5,a5,0x3a
    800236c8:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800236cc:	60c7b073          	csrc	hstateen0,a5

    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800236d0:	30c025f3          	csrr	a1,mstateen0
    800236d4:	00012517          	auipc	a0,0x12
    800236d8:	4a450513          	addi	a0,a0,1188 # 80035b78 <__func__.0+0x8ac0>
    800236dc:	77a070ef          	jal	8002ae56 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800236e0:	60c025f3          	csrr	a1,hstateen0
    800236e4:	00012517          	auipc	a0,0x12
    800236e8:	4a450513          	addi	a0,a0,1188 # 80035b88 <__func__.0+0x8ad0>
    800236ec:	76a070ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    800236f0:	4509                	li	a0,2
    800236f2:	817dd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800236f6:	f16dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800236fa:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800236fe:	951dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023702:	08200593          	li	a1,130
    80023706:	00013617          	auipc	a2,0x13
    8002370a:	84260613          	addi	a2,a2,-1982 # 80035f48 <__func__.0+0x8e90>
    8002370e:	0000a517          	auipc	a0,0xa
    80023712:	ca250513          	addi	a0,a0,-862 # 8002d3b0 <__func__.0+0x2f8>
    80023716:	740070ef          	jal	8002ae56 <printf>
    8002371a:	00031797          	auipc	a5,0x31
    8002371e:	8f77c783          	lbu	a5,-1801(a5) # 80054011 <excpt+0x1>
    80023722:	00031497          	auipc	s1,0x31
    80023726:	8ee48493          	addi	s1,s1,-1810 # 80054010 <excpt>
    8002372a:	0000a597          	auipc	a1,0xa
    8002372e:	c5e58593          	addi	a1,a1,-930 # 8002d388 <__func__.0+0x2d0>
    80023732:	cf89                	beqz	a5,8002374c <stateen_IMSIC_test_4+0xb0>
    80023734:	6498                	ld	a4,8(s1)
    80023736:	47d9                	li	a5,22
    80023738:	0000a597          	auipc	a1,0xa
    8002373c:	c4058593          	addi	a1,a1,-960 # 8002d378 <__func__.0+0x2c0>
    80023740:	00f70663          	beq	a4,a5,8002374c <stateen_IMSIC_test_4+0xb0>
    80023744:	0000a597          	auipc	a1,0xa
    80023748:	c4458593          	addi	a1,a1,-956 # 8002d388 <__func__.0+0x2d0>
    8002374c:	0000a517          	auipc	a0,0xa
    80023750:	c7c50513          	addi	a0,a0,-900 # 8002d3c8 <__func__.0+0x310>
    80023754:	702070ef          	jal	8002ae56 <printf>
    80023758:	00031797          	auipc	a5,0x31
    8002375c:	8b97c783          	lbu	a5,-1863(a5) # 80054011 <excpt+0x1>
    80023760:	c789                	beqz	a5,8002376a <stateen_IMSIC_test_4+0xce>
    80023762:	6498                	ld	a4,8(s1)
    80023764:	47d9                	li	a5,22
    80023766:	00f70c63          	beq	a4,a5,8002377e <stateen_IMSIC_test_4+0xe2>
    8002376a:	0000a517          	auipc	a0,0xa
    8002376e:	c6650513          	addi	a0,a0,-922 # 8002d3d0 <__func__.0+0x318>
    80023772:	6e4070ef          	jal	8002ae56 <printf>
    80023776:	02900513          	li	a0,41
    8002377a:	3ca060ef          	jal	80029b44 <putchar>
    8002377e:	4529                	li	a0,10
    80023780:	3c4060ef          	jal	80029b44 <putchar>
    80023784:	00031797          	auipc	a5,0x31
    80023788:	88d7c783          	lbu	a5,-1907(a5) # 80054011 <excpt+0x1>
    8002378c:	4401                	li	s0,0
    8002378e:	c789                	beqz	a5,80023798 <stateen_IMSIC_test_4+0xfc>
    80023790:	6480                	ld	s0,8(s1)
    80023792:	1429                	addi	s0,s0,-22
    80023794:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80023798:	4509                	li	a0,2
    8002379a:	f6edd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002379e:	e6edd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800237a2:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800237a6:	8a9dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800237aa:	08200593          	li	a1,130
    800237ae:	00012617          	auipc	a2,0x12
    800237b2:	7f260613          	addi	a2,a2,2034 # 80035fa0 <__func__.0+0x8ee8>
    800237b6:	0000a517          	auipc	a0,0xa
    800237ba:	bfa50513          	addi	a0,a0,-1030 # 8002d3b0 <__func__.0+0x2f8>
    800237be:	698070ef          	jal	8002ae56 <printf>
    800237c2:	00031797          	auipc	a5,0x31
    800237c6:	84f7c783          	lbu	a5,-1969(a5) # 80054011 <excpt+0x1>
    800237ca:	0000a597          	auipc	a1,0xa
    800237ce:	bbe58593          	addi	a1,a1,-1090 # 8002d388 <__func__.0+0x2d0>
    800237d2:	cf89                	beqz	a5,800237ec <stateen_IMSIC_test_4+0x150>
    800237d4:	6498                	ld	a4,8(s1)
    800237d6:	47d9                	li	a5,22
    800237d8:	0000a597          	auipc	a1,0xa
    800237dc:	ba058593          	addi	a1,a1,-1120 # 8002d378 <__func__.0+0x2c0>
    800237e0:	00f70663          	beq	a4,a5,800237ec <stateen_IMSIC_test_4+0x150>
    800237e4:	0000a597          	auipc	a1,0xa
    800237e8:	ba458593          	addi	a1,a1,-1116 # 8002d388 <__func__.0+0x2d0>
    800237ec:	0000a517          	auipc	a0,0xa
    800237f0:	bdc50513          	addi	a0,a0,-1060 # 8002d3c8 <__func__.0+0x310>
    800237f4:	662070ef          	jal	8002ae56 <printf>
    800237f8:	00031797          	auipc	a5,0x31
    800237fc:	8197c783          	lbu	a5,-2023(a5) # 80054011 <excpt+0x1>
    80023800:	c789                	beqz	a5,8002380a <stateen_IMSIC_test_4+0x16e>
    80023802:	6498                	ld	a4,8(s1)
    80023804:	47d9                	li	a5,22
    80023806:	00f70c63          	beq	a4,a5,8002381e <stateen_IMSIC_test_4+0x182>
    8002380a:	0000a517          	auipc	a0,0xa
    8002380e:	bc650513          	addi	a0,a0,-1082 # 8002d3d0 <__func__.0+0x318>
    80023812:	644070ef          	jal	8002ae56 <printf>
    80023816:	02900513          	li	a0,41
    8002381a:	32a060ef          	jal	80029b44 <putchar>
    8002381e:	4529                	li	a0,10
    80023820:	324060ef          	jal	80029b44 <putchar>
    80023824:	c015                	beqz	s0,80023848 <stateen_IMSIC_test_4+0x1ac>
    80023826:	00030417          	auipc	s0,0x30
    8002382a:	7eb44403          	lbu	s0,2027(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8002382e:	0000a597          	auipc	a1,0xa
    80023832:	b5a58593          	addi	a1,a1,-1190 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023836:	cc11                	beqz	s0,80023852 <stateen_IMSIC_test_4+0x1b6>
    80023838:	6498                	ld	a4,8(s1)
    8002383a:	47d9                	li	a5,22
    TEST_END();
    8002383c:	0000a597          	auipc	a1,0xa
    80023840:	b3c58593          	addi	a1,a1,-1220 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023844:	00f70763          	beq	a4,a5,80023852 <stateen_IMSIC_test_4+0x1b6>
    80023848:	4401                	li	s0,0
    TEST_END();
    8002384a:	0000a597          	auipc	a1,0xa
    8002384e:	b3e58593          	addi	a1,a1,-1218 # 8002d388 <__func__.0+0x2d0>
    80023852:	0000a517          	auipc	a0,0xa
    80023856:	bde50513          	addi	a0,a0,-1058 # 8002d430 <__func__.0+0x378>
    8002385a:	5fc070ef          	jal	8002ae56 <printf>
    8002385e:	4511                	li	a0,4
    80023860:	ea8dd0ef          	jal	80000f08 <goto_priv>
    80023864:	fc1dd0ef          	jal	80001824 <reset_state>

}
    80023868:	60e2                	ld	ra,24(sp)
    8002386a:	8522                	mv	a0,s0
    8002386c:	6442                	ld	s0,16(sp)
    8002386e:	64a2                	ld	s1,8(sp)
    80023870:	6105                	addi	sp,sp,32
    80023872:	8082                	ret

0000000080023874 <stateen_IMSIC_test_5>:

bool stateen_IMSIC_test_5(){
    80023874:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=0,hs mode 不可访问stopei、vstopei寄存器

    TEST_START();
    80023876:	00009597          	auipc	a1,0x9
    8002387a:	44a58593          	addi	a1,a1,1098 # 8002ccc0 <__func__.25>
    8002387e:	0000a517          	auipc	a0,0xa
    80023882:	b1a50513          	addi	a0,a0,-1254 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_5(){
    80023886:	ec06                	sd	ra,24(sp)
    80023888:	e822                	sd	s0,16(sp)
    8002388a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002388c:	5ca070ef          	jal	8002ae56 <printf>
    80023890:	4529                	li	a0,10
    80023892:	2b2060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80023896:	4511                	li	a0,4
    80023898:	e70dd0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    8002389c:	4785                	li	a5,1
    8002389e:	17ea                	slli	a5,a5,0x3a
    800238a0:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_HS);
    800238a4:	450d                	li	a0,3
    800238a6:	e62dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800238aa:	d62dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800238ae:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800238b2:	f9cdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    800238b6:	08200593          	li	a1,130
    800238ba:	00012617          	auipc	a2,0x12
    800238be:	73e60613          	addi	a2,a2,1854 # 80035ff8 <__func__.0+0x8f40>
    800238c2:	0000a517          	auipc	a0,0xa
    800238c6:	aee50513          	addi	a0,a0,-1298 # 8002d3b0 <__func__.0+0x2f8>
    800238ca:	58c070ef          	jal	8002ae56 <printf>
    800238ce:	00030797          	auipc	a5,0x30
    800238d2:	7437c783          	lbu	a5,1859(a5) # 80054011 <excpt+0x1>
    800238d6:	00030497          	auipc	s1,0x30
    800238da:	73a48493          	addi	s1,s1,1850 # 80054010 <excpt>
    800238de:	0000a597          	auipc	a1,0xa
    800238e2:	aaa58593          	addi	a1,a1,-1366 # 8002d388 <__func__.0+0x2d0>
    800238e6:	cf89                	beqz	a5,80023900 <stateen_IMSIC_test_5+0x8c>
    800238e8:	6498                	ld	a4,8(s1)
    800238ea:	4789                	li	a5,2
    800238ec:	0000a597          	auipc	a1,0xa
    800238f0:	a8c58593          	addi	a1,a1,-1396 # 8002d378 <__func__.0+0x2c0>
    800238f4:	00f70663          	beq	a4,a5,80023900 <stateen_IMSIC_test_5+0x8c>
    800238f8:	0000a597          	auipc	a1,0xa
    800238fc:	a9058593          	addi	a1,a1,-1392 # 8002d388 <__func__.0+0x2d0>
    80023900:	0000a517          	auipc	a0,0xa
    80023904:	ac850513          	addi	a0,a0,-1336 # 8002d3c8 <__func__.0+0x310>
    80023908:	54e070ef          	jal	8002ae56 <printf>
    8002390c:	00030797          	auipc	a5,0x30
    80023910:	7057c783          	lbu	a5,1797(a5) # 80054011 <excpt+0x1>
    80023914:	c789                	beqz	a5,8002391e <stateen_IMSIC_test_5+0xaa>
    80023916:	6498                	ld	a4,8(s1)
    80023918:	4789                	li	a5,2
    8002391a:	00f70c63          	beq	a4,a5,80023932 <stateen_IMSIC_test_5+0xbe>
    8002391e:	0000a517          	auipc	a0,0xa
    80023922:	ab250513          	addi	a0,a0,-1358 # 8002d3d0 <__func__.0+0x318>
    80023926:	530070ef          	jal	8002ae56 <printf>
    8002392a:	02900513          	li	a0,41
    8002392e:	216060ef          	jal	80029b44 <putchar>
    80023932:	4529                	li	a0,10
    80023934:	210060ef          	jal	80029b44 <putchar>
    80023938:	00030797          	auipc	a5,0x30
    8002393c:	6d97c783          	lbu	a5,1753(a5) # 80054011 <excpt+0x1>
    80023940:	4401                	li	s0,0
    80023942:	c789                	beqz	a5,8002394c <stateen_IMSIC_test_5+0xd8>
    80023944:	6480                	ld	s0,8(s1)
    80023946:	1479                	addi	s0,s0,-2
    80023948:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8002394c:	450d                	li	a0,3
    8002394e:	dbadd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023952:	cbadd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023956:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002395a:	ef4dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    8002395e:	08200593          	li	a1,130
    80023962:	00012617          	auipc	a2,0x12
    80023966:	6e660613          	addi	a2,a2,1766 # 80036048 <__func__.0+0x8f90>
    8002396a:	0000a517          	auipc	a0,0xa
    8002396e:	a4650513          	addi	a0,a0,-1466 # 8002d3b0 <__func__.0+0x2f8>
    80023972:	4e4070ef          	jal	8002ae56 <printf>
    80023976:	00030797          	auipc	a5,0x30
    8002397a:	69b7c783          	lbu	a5,1691(a5) # 80054011 <excpt+0x1>
    8002397e:	0000a597          	auipc	a1,0xa
    80023982:	a0a58593          	addi	a1,a1,-1526 # 8002d388 <__func__.0+0x2d0>
    80023986:	cf89                	beqz	a5,800239a0 <stateen_IMSIC_test_5+0x12c>
    80023988:	6498                	ld	a4,8(s1)
    8002398a:	4789                	li	a5,2
    8002398c:	0000a597          	auipc	a1,0xa
    80023990:	9ec58593          	addi	a1,a1,-1556 # 8002d378 <__func__.0+0x2c0>
    80023994:	00f70663          	beq	a4,a5,800239a0 <stateen_IMSIC_test_5+0x12c>
    80023998:	0000a597          	auipc	a1,0xa
    8002399c:	9f058593          	addi	a1,a1,-1552 # 8002d388 <__func__.0+0x2d0>
    800239a0:	0000a517          	auipc	a0,0xa
    800239a4:	a2850513          	addi	a0,a0,-1496 # 8002d3c8 <__func__.0+0x310>
    800239a8:	4ae070ef          	jal	8002ae56 <printf>
    800239ac:	00030797          	auipc	a5,0x30
    800239b0:	6657c783          	lbu	a5,1637(a5) # 80054011 <excpt+0x1>
    800239b4:	c789                	beqz	a5,800239be <stateen_IMSIC_test_5+0x14a>
    800239b6:	6498                	ld	a4,8(s1)
    800239b8:	4789                	li	a5,2
    800239ba:	00f70c63          	beq	a4,a5,800239d2 <stateen_IMSIC_test_5+0x15e>
    800239be:	0000a517          	auipc	a0,0xa
    800239c2:	a1250513          	addi	a0,a0,-1518 # 8002d3d0 <__func__.0+0x318>
    800239c6:	490070ef          	jal	8002ae56 <printf>
    800239ca:	02900513          	li	a0,41
    800239ce:	176060ef          	jal	80029b44 <putchar>
    800239d2:	4529                	li	a0,10
    800239d4:	170060ef          	jal	80029b44 <putchar>
    800239d8:	c015                	beqz	s0,800239fc <stateen_IMSIC_test_5+0x188>
    800239da:	00030417          	auipc	s0,0x30
    800239de:	63744403          	lbu	s0,1591(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800239e2:	0000a597          	auipc	a1,0xa
    800239e6:	9a658593          	addi	a1,a1,-1626 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800239ea:	cc11                	beqz	s0,80023a06 <stateen_IMSIC_test_5+0x192>
    800239ec:	6498                	ld	a4,8(s1)
    800239ee:	4789                	li	a5,2
    TEST_END();
    800239f0:	0000a597          	auipc	a1,0xa
    800239f4:	98858593          	addi	a1,a1,-1656 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800239f8:	00f70763          	beq	a4,a5,80023a06 <stateen_IMSIC_test_5+0x192>
    800239fc:	4401                	li	s0,0
    TEST_END();
    800239fe:	0000a597          	auipc	a1,0xa
    80023a02:	98a58593          	addi	a1,a1,-1654 # 8002d388 <__func__.0+0x2d0>
    80023a06:	0000a517          	auipc	a0,0xa
    80023a0a:	a2a50513          	addi	a0,a0,-1494 # 8002d430 <__func__.0+0x378>
    80023a0e:	448070ef          	jal	8002ae56 <printf>
    80023a12:	4511                	li	a0,4
    80023a14:	cf4dd0ef          	jal	80000f08 <goto_priv>
    80023a18:	e0ddd0ef          	jal	80001824 <reset_state>

}
    80023a1c:	60e2                	ld	ra,24(sp)
    80023a1e:	8522                	mv	a0,s0
    80023a20:	6442                	ld	s0,16(sp)
    80023a22:	64a2                	ld	s1,8(sp)
    80023a24:	6105                	addi	sp,sp,32
    80023a26:	8082                	ret

0000000080023a28 <stateen_IMSIC_test_6>:


bool stateen_IMSIC_test_6(){
    80023a28:	1101                	addi	sp,sp,-32

    TEST_START();
    80023a2a:	00009597          	auipc	a1,0x9
    80023a2e:	2ae58593          	addi	a1,a1,686 # 8002ccd8 <__func__.24>
    80023a32:	0000a517          	auipc	a0,0xa
    80023a36:	96650513          	addi	a0,a0,-1690 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_6(){
    80023a3a:	ec06                	sd	ra,24(sp)
    80023a3c:	e822                	sd	s0,16(sp)
    80023a3e:	e426                	sd	s1,8(sp)
    TEST_START();
    80023a40:	416070ef          	jal	8002ae56 <printf>
    80023a44:	4529                	li	a0,10
    80023a46:	0fe060ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80023a4a:	4511                	li	a0,4
    80023a4c:	cbcdd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1,v=0时,可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023a50:	4785                	li	a5,1
    80023a52:	17ea                	slli	a5,a5,0x3a
    80023a54:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023a58:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80023a5c:	450d                	li	a0,3
    80023a5e:	caadd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023a62:	baadd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023a66:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023a6a:	de4dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023a6e:	08200593          	li	a1,130
    80023a72:	00012617          	auipc	a2,0x12
    80023a76:	62660613          	addi	a2,a2,1574 # 80036098 <__func__.0+0x8fe0>
    80023a7a:	0000a517          	auipc	a0,0xa
    80023a7e:	93650513          	addi	a0,a0,-1738 # 8002d3b0 <__func__.0+0x2f8>
    80023a82:	3d4070ef          	jal	8002ae56 <printf>
    80023a86:	00030797          	auipc	a5,0x30
    80023a8a:	58b7c783          	lbu	a5,1419(a5) # 80054011 <excpt+0x1>
    80023a8e:	0000a597          	auipc	a1,0xa
    80023a92:	8ea58593          	addi	a1,a1,-1814 # 8002d378 <__func__.0+0x2c0>
    80023a96:	c789                	beqz	a5,80023aa0 <stateen_IMSIC_test_6+0x78>
    80023a98:	0000a597          	auipc	a1,0xa
    80023a9c:	8f058593          	addi	a1,a1,-1808 # 8002d388 <__func__.0+0x2d0>
    80023aa0:	0000a517          	auipc	a0,0xa
    80023aa4:	92850513          	addi	a0,a0,-1752 # 8002d3c8 <__func__.0+0x310>
    80023aa8:	3ae070ef          	jal	8002ae56 <printf>
    80023aac:	00030797          	auipc	a5,0x30
    80023ab0:	5657c783          	lbu	a5,1381(a5) # 80054011 <excpt+0x1>
    80023ab4:	2c079e63          	bnez	a5,80023d90 <stateen_IMSIC_test_6+0x368>
    80023ab8:	4529                	li	a0,10
    80023aba:	08a060ef          	jal	80029b44 <putchar>
    80023abe:	00030497          	auipc	s1,0x30
    80023ac2:	5534c483          	lbu	s1,1363(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPEI);
    80023ac6:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023aca:	d84dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023ace:	08200593          	li	a1,130
    80023ad2:	00012617          	auipc	a2,0x12
    80023ad6:	61e60613          	addi	a2,a2,1566 # 800360f0 <__func__.0+0x9038>
    80023ada:	0000a517          	auipc	a0,0xa
    80023ade:	8d650513          	addi	a0,a0,-1834 # 8002d3b0 <__func__.0+0x2f8>
    80023ae2:	374070ef          	jal	8002ae56 <printf>
    80023ae6:	00030797          	auipc	a5,0x30
    80023aea:	52b7c783          	lbu	a5,1323(a5) # 80054011 <excpt+0x1>
    80023aee:	0000a597          	auipc	a1,0xa
    80023af2:	89a58593          	addi	a1,a1,-1894 # 8002d388 <__func__.0+0x2d0>
    80023af6:	e789                	bnez	a5,80023b00 <stateen_IMSIC_test_6+0xd8>
    80023af8:	0000a597          	auipc	a1,0xa
    80023afc:	88058593          	addi	a1,a1,-1920 # 8002d378 <__func__.0+0x2c0>
    80023b00:	0000a517          	auipc	a0,0xa
    80023b04:	8c850513          	addi	a0,a0,-1848 # 8002d3c8 <__func__.0+0x310>
    80023b08:	34e070ef          	jal	8002ae56 <printf>
    80023b0c:	00030797          	auipc	a5,0x30
    80023b10:	5057c783          	lbu	a5,1285(a5) # 80054011 <excpt+0x1>
    80023b14:	26079363          	bnez	a5,80023d7a <stateen_IMSIC_test_6+0x352>
    80023b18:	4529                	li	a0,10
    80023b1a:	02a060ef          	jal	80029b44 <putchar>
    80023b1e:	4401                	li	s0,0
    80023b20:	e499                	bnez	s1,80023b2e <stateen_IMSIC_test_6+0x106>
    80023b22:	00030417          	auipc	s0,0x30
    80023b26:	4ef44403          	lbu	s0,1263(s0) # 80054011 <excpt+0x1>
    80023b2a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80023b2e:	4505                	li	a0,1
    80023b30:	bd8dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b34:	ad8dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023b38:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023b3c:	d12dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023b40:	08200593          	li	a1,130
    80023b44:	00012617          	auipc	a2,0x12
    80023b48:	60460613          	addi	a2,a2,1540 # 80036148 <__func__.0+0x9090>
    80023b4c:	0000a517          	auipc	a0,0xa
    80023b50:	86450513          	addi	a0,a0,-1948 # 8002d3b0 <__func__.0+0x2f8>
    80023b54:	302070ef          	jal	8002ae56 <printf>
    80023b58:	00030797          	auipc	a5,0x30
    80023b5c:	4b97c783          	lbu	a5,1209(a5) # 80054011 <excpt+0x1>
    80023b60:	0000a597          	auipc	a1,0xa
    80023b64:	82858593          	addi	a1,a1,-2008 # 8002d388 <__func__.0+0x2d0>
    80023b68:	e789                	bnez	a5,80023b72 <stateen_IMSIC_test_6+0x14a>
    80023b6a:	0000a597          	auipc	a1,0xa
    80023b6e:	80e58593          	addi	a1,a1,-2034 # 8002d378 <__func__.0+0x2c0>
    80023b72:	0000a517          	auipc	a0,0xa
    80023b76:	85650513          	addi	a0,a0,-1962 # 8002d3c8 <__func__.0+0x310>
    80023b7a:	2dc070ef          	jal	8002ae56 <printf>
    80023b7e:	00030797          	auipc	a5,0x30
    80023b82:	4937c783          	lbu	a5,1171(a5) # 80054011 <excpt+0x1>
    80023b86:	1c079f63          	bnez	a5,80023d64 <stateen_IMSIC_test_6+0x33c>
    80023b8a:	4529                	li	a0,10
    80023b8c:	7b9050ef          	jal	80029b44 <putchar>
    80023b90:	c419                	beqz	s0,80023b9e <stateen_IMSIC_test_6+0x176>
    80023b92:	00030417          	auipc	s0,0x30
    80023b96:	47f44403          	lbu	s0,1151(s0) # 80054011 <excpt+0x1>
    80023b9a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80023b9e:	4505                	li	a0,1
    80023ba0:	b68dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023ba4:	a68dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023ba8:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023bac:	ca2dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023bb0:	08200593          	li	a1,130
    80023bb4:	00012617          	auipc	a2,0x12
    80023bb8:	5fc60613          	addi	a2,a2,1532 # 800361b0 <__func__.0+0x90f8>
    80023bbc:	00009517          	auipc	a0,0x9
    80023bc0:	7f450513          	addi	a0,a0,2036 # 8002d3b0 <__func__.0+0x2f8>
    80023bc4:	292070ef          	jal	8002ae56 <printf>
    80023bc8:	00030797          	auipc	a5,0x30
    80023bcc:	4497c783          	lbu	a5,1097(a5) # 80054011 <excpt+0x1>
    80023bd0:	00009597          	auipc	a1,0x9
    80023bd4:	7b858593          	addi	a1,a1,1976 # 8002d388 <__func__.0+0x2d0>
    80023bd8:	e789                	bnez	a5,80023be2 <stateen_IMSIC_test_6+0x1ba>
    80023bda:	00009597          	auipc	a1,0x9
    80023bde:	79e58593          	addi	a1,a1,1950 # 8002d378 <__func__.0+0x2c0>
    80023be2:	00009517          	auipc	a0,0x9
    80023be6:	7e650513          	addi	a0,a0,2022 # 8002d3c8 <__func__.0+0x310>
    80023bea:	26c070ef          	jal	8002ae56 <printf>
    80023bee:	00030797          	auipc	a5,0x30
    80023bf2:	4237c783          	lbu	a5,1059(a5) # 80054011 <excpt+0x1>
    80023bf6:	14079c63          	bnez	a5,80023d4e <stateen_IMSIC_test_6+0x326>
    80023bfa:	4529                	li	a0,10
    80023bfc:	749050ef          	jal	80029b44 <putchar>
    80023c00:	c419                	beqz	s0,80023c0e <stateen_IMSIC_test_6+0x1e6>
    80023c02:	00030417          	auipc	s0,0x30
    80023c06:	40f44403          	lbu	s0,1039(s0) # 80054011 <excpt+0x1>
    80023c0a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80023c0e:	4511                	li	a0,4
    80023c10:	af8dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c14:	9f8dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023c18:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023c1c:	c32dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c20:	08200593          	li	a1,130
    80023c24:	00012617          	auipc	a2,0x12
    80023c28:	5f460613          	addi	a2,a2,1524 # 80036218 <__func__.0+0x9160>
    80023c2c:	00009517          	auipc	a0,0x9
    80023c30:	78450513          	addi	a0,a0,1924 # 8002d3b0 <__func__.0+0x2f8>
    80023c34:	222070ef          	jal	8002ae56 <printf>
    80023c38:	00030797          	auipc	a5,0x30
    80023c3c:	3d97c783          	lbu	a5,985(a5) # 80054011 <excpt+0x1>
    80023c40:	00009597          	auipc	a1,0x9
    80023c44:	74858593          	addi	a1,a1,1864 # 8002d388 <__func__.0+0x2d0>
    80023c48:	e789                	bnez	a5,80023c52 <stateen_IMSIC_test_6+0x22a>
    80023c4a:	00009597          	auipc	a1,0x9
    80023c4e:	72e58593          	addi	a1,a1,1838 # 8002d378 <__func__.0+0x2c0>
    80023c52:	00009517          	auipc	a0,0x9
    80023c56:	77650513          	addi	a0,a0,1910 # 8002d3c8 <__func__.0+0x310>
    80023c5a:	1fc070ef          	jal	8002ae56 <printf>
    80023c5e:	00030797          	auipc	a5,0x30
    80023c62:	3b37c783          	lbu	a5,947(a5) # 80054011 <excpt+0x1>
    80023c66:	0c079963          	bnez	a5,80023d38 <stateen_IMSIC_test_6+0x310>
    80023c6a:	4529                	li	a0,10
    80023c6c:	6d9050ef          	jal	80029b44 <putchar>
    80023c70:	c419                	beqz	s0,80023c7e <stateen_IMSIC_test_6+0x256>
    80023c72:	00030417          	auipc	s0,0x30
    80023c76:	39f44403          	lbu	s0,927(s0) # 80054011 <excpt+0x1>
    80023c7a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023c7e:	4511                	li	a0,4
    80023c80:	a88dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c84:	988dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023c88:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023c8c:	bc2dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c90:	08200593          	li	a1,130
    80023c94:	00012617          	auipc	a2,0x12
    80023c98:	5dc60613          	addi	a2,a2,1500 # 80036270 <__func__.0+0x91b8>
    80023c9c:	00009517          	auipc	a0,0x9
    80023ca0:	71450513          	addi	a0,a0,1812 # 8002d3b0 <__func__.0+0x2f8>
    80023ca4:	1b2070ef          	jal	8002ae56 <printf>
    80023ca8:	00030797          	auipc	a5,0x30
    80023cac:	3697c783          	lbu	a5,873(a5) # 80054011 <excpt+0x1>
    80023cb0:	00009597          	auipc	a1,0x9
    80023cb4:	6d858593          	addi	a1,a1,1752 # 8002d388 <__func__.0+0x2d0>
    80023cb8:	e789                	bnez	a5,80023cc2 <stateen_IMSIC_test_6+0x29a>
    80023cba:	00009597          	auipc	a1,0x9
    80023cbe:	6be58593          	addi	a1,a1,1726 # 8002d378 <__func__.0+0x2c0>
    80023cc2:	00009517          	auipc	a0,0x9
    80023cc6:	70650513          	addi	a0,a0,1798 # 8002d3c8 <__func__.0+0x310>
    80023cca:	18c070ef          	jal	8002ae56 <printf>
    80023cce:	00030797          	auipc	a5,0x30
    80023cd2:	3437c783          	lbu	a5,835(a5) # 80054011 <excpt+0x1>
    80023cd6:	e7b1                	bnez	a5,80023d22 <stateen_IMSIC_test_6+0x2fa>
    80023cd8:	4529                	li	a0,10
    80023cda:	66b050ef          	jal	80029b44 <putchar>
    80023cde:	c411                	beqz	s0,80023cea <stateen_IMSIC_test_6+0x2c2>
    80023ce0:	00030797          	auipc	a5,0x30
    80023ce4:	3317c783          	lbu	a5,817(a5) # 80054011 <excpt+0x1>
    80023ce8:	c79d                	beqz	a5,80023d16 <stateen_IMSIC_test_6+0x2ee>
    80023cea:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023cec:	00009597          	auipc	a1,0x9
    80023cf0:	69c58593          	addi	a1,a1,1692 # 8002d388 <__func__.0+0x2d0>
    80023cf4:	00009517          	auipc	a0,0x9
    80023cf8:	73c50513          	addi	a0,a0,1852 # 8002d430 <__func__.0+0x378>
    80023cfc:	15a070ef          	jal	8002ae56 <printf>
    80023d00:	4511                	li	a0,4
    80023d02:	a06dd0ef          	jal	80000f08 <goto_priv>
    80023d06:	b1fdd0ef          	jal	80001824 <reset_state>

}
    80023d0a:	60e2                	ld	ra,24(sp)
    80023d0c:	8522                	mv	a0,s0
    80023d0e:	6442                	ld	s0,16(sp)
    80023d10:	64a2                	ld	s1,8(sp)
    80023d12:	6105                	addi	sp,sp,32
    80023d14:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d16:	4405                	li	s0,1
    TEST_END();
    80023d18:	00009597          	auipc	a1,0x9
    80023d1c:	66058593          	addi	a1,a1,1632 # 8002d378 <__func__.0+0x2c0>
    80023d20:	bfd1                	j	80023cf4 <stateen_IMSIC_test_6+0x2cc>
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d22:	00009517          	auipc	a0,0x9
    80023d26:	6ae50513          	addi	a0,a0,1710 # 8002d3d0 <__func__.0+0x318>
    80023d2a:	12c070ef          	jal	8002ae56 <printf>
    80023d2e:	02900513          	li	a0,41
    80023d32:	613050ef          	jal	80029b44 <putchar>
    80023d36:	b74d                	j	80023cd8 <stateen_IMSIC_test_6+0x2b0>
    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d38:	00009517          	auipc	a0,0x9
    80023d3c:	69850513          	addi	a0,a0,1688 # 8002d3d0 <__func__.0+0x318>
    80023d40:	116070ef          	jal	8002ae56 <printf>
    80023d44:	02900513          	li	a0,41
    80023d48:	5fd050ef          	jal	80029b44 <putchar>
    80023d4c:	bf39                	j	80023c6a <stateen_IMSIC_test_6+0x242>
    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023d4e:	00009517          	auipc	a0,0x9
    80023d52:	68250513          	addi	a0,a0,1666 # 8002d3d0 <__func__.0+0x318>
    80023d56:	100070ef          	jal	8002ae56 <printf>
    80023d5a:	02900513          	li	a0,41
    80023d5e:	5e7050ef          	jal	80029b44 <putchar>
    80023d62:	bd61                	j	80023bfa <stateen_IMSIC_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023d64:	00009517          	auipc	a0,0x9
    80023d68:	66c50513          	addi	a0,a0,1644 # 8002d3d0 <__func__.0+0x318>
    80023d6c:	0ea070ef          	jal	8002ae56 <printf>
    80023d70:	02900513          	li	a0,41
    80023d74:	5d1050ef          	jal	80029b44 <putchar>
    80023d78:	bd09                	j	80023b8a <stateen_IMSIC_test_6+0x162>
    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023d7a:	00009517          	auipc	a0,0x9
    80023d7e:	65650513          	addi	a0,a0,1622 # 8002d3d0 <__func__.0+0x318>
    80023d82:	0d4070ef          	jal	8002ae56 <printf>
    80023d86:	02900513          	li	a0,41
    80023d8a:	5bb050ef          	jal	80029b44 <putchar>
    80023d8e:	b369                	j	80023b18 <stateen_IMSIC_test_6+0xf0>
    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023d90:	00009517          	auipc	a0,0x9
    80023d94:	64050513          	addi	a0,a0,1600 # 8002d3d0 <__func__.0+0x318>
    80023d98:	0be070ef          	jal	8002ae56 <printf>
    80023d9c:	02900513          	li	a0,41
    80023da0:	5a5050ef          	jal	80029b44 <putchar>
    80023da4:	bb11                	j	80023ab8 <stateen_IMSIC_test_6+0x90>

0000000080023da6 <stateen_IMSIC_test_7>:


bool stateen_IMSIC_test_7(){
    80023da6:	1101                	addi	sp,sp,-32

    TEST_START();
    80023da8:	00009597          	auipc	a1,0x9
    80023dac:	f4858593          	addi	a1,a1,-184 # 8002ccf0 <__func__.23>
    80023db0:	00009517          	auipc	a0,0x9
    80023db4:	5e850513          	addi	a0,a0,1512 # 8002d398 <__func__.0+0x2e0>
bool stateen_IMSIC_test_7(){
    80023db8:	ec06                	sd	ra,24(sp)
    80023dba:	e822                	sd	s0,16(sp)
    80023dbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80023dbe:	098070ef          	jal	8002ae56 <printf>
    80023dc2:	4529                	li	a0,10
    80023dc4:	581050ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80023dc8:	4511                	li	a0,4
    80023dca:	93edd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1 hstateen.IMSIC=1,v=1 时可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023dce:	4785                	li	a5,1
    80023dd0:	17ea                	slli	a5,a5,0x3a
    80023dd2:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023dd6:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80023dda:	4509                	li	a0,2
    80023ddc:	92cdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023de0:	82cdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023de4:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023de8:	a66dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023dec:	08200593          	li	a1,130
    80023df0:	00012617          	auipc	a2,0x12
    80023df4:	4d860613          	addi	a2,a2,1240 # 800362c8 <__func__.0+0x9210>
    80023df8:	00009517          	auipc	a0,0x9
    80023dfc:	5b850513          	addi	a0,a0,1464 # 8002d3b0 <__func__.0+0x2f8>
    80023e00:	056070ef          	jal	8002ae56 <printf>
    80023e04:	00030797          	auipc	a5,0x30
    80023e08:	20d7c783          	lbu	a5,525(a5) # 80054011 <excpt+0x1>
    80023e0c:	00009597          	auipc	a1,0x9
    80023e10:	56c58593          	addi	a1,a1,1388 # 8002d378 <__func__.0+0x2c0>
    80023e14:	c789                	beqz	a5,80023e1e <stateen_IMSIC_test_7+0x78>
    80023e16:	00009597          	auipc	a1,0x9
    80023e1a:	57258593          	addi	a1,a1,1394 # 8002d388 <__func__.0+0x2d0>
    80023e1e:	00009517          	auipc	a0,0x9
    80023e22:	5aa50513          	addi	a0,a0,1450 # 8002d3c8 <__func__.0+0x310>
    80023e26:	030070ef          	jal	8002ae56 <printf>
    80023e2a:	00030797          	auipc	a5,0x30
    80023e2e:	1e77c783          	lbu	a5,487(a5) # 80054011 <excpt+0x1>
    80023e32:	1c079d63          	bnez	a5,8002400c <stateen_IMSIC_test_7+0x266>
    80023e36:	4529                	li	a0,10
    80023e38:	50d050ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80023e3c:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e3e:	00030497          	auipc	s1,0x30
    80023e42:	1d34c483          	lbu	s1,467(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80023e46:	8c2dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023e4a:	fc3dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023e4e:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023e52:	9fcdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e56:	08200593          	li	a1,130
    80023e5a:	00012617          	auipc	a2,0x12
    80023e5e:	4c660613          	addi	a2,a2,1222 # 80036320 <__func__.0+0x9268>
    80023e62:	00009517          	auipc	a0,0x9
    80023e66:	54e50513          	addi	a0,a0,1358 # 8002d3b0 <__func__.0+0x2f8>
    80023e6a:	7ed060ef          	jal	8002ae56 <printf>
    80023e6e:	00030797          	auipc	a5,0x30
    80023e72:	1a37c783          	lbu	a5,419(a5) # 80054011 <excpt+0x1>
    80023e76:	00009597          	auipc	a1,0x9
    80023e7a:	51258593          	addi	a1,a1,1298 # 8002d388 <__func__.0+0x2d0>
    80023e7e:	e789                	bnez	a5,80023e88 <stateen_IMSIC_test_7+0xe2>
    80023e80:	00009597          	auipc	a1,0x9
    80023e84:	4f858593          	addi	a1,a1,1272 # 8002d378 <__func__.0+0x2c0>
    80023e88:	00009517          	auipc	a0,0x9
    80023e8c:	54050513          	addi	a0,a0,1344 # 8002d3c8 <__func__.0+0x310>
    80023e90:	7c7060ef          	jal	8002ae56 <printf>
    80023e94:	00030797          	auipc	a5,0x30
    80023e98:	17d7c783          	lbu	a5,381(a5) # 80054011 <excpt+0x1>
    80023e9c:	14079d63          	bnez	a5,80023ff6 <stateen_IMSIC_test_7+0x250>
    80023ea0:	4529                	li	a0,10
    80023ea2:	4a3050ef          	jal	80029b44 <putchar>
    80023ea6:	4401                	li	s0,0
    80023ea8:	e499                	bnez	s1,80023eb6 <stateen_IMSIC_test_7+0x110>
    80023eaa:	00030417          	auipc	s0,0x30
    80023eae:	16744403          	lbu	s0,359(s0) # 80054011 <excpt+0x1>
    80023eb2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023eb6:	4501                	li	a0,0
    80023eb8:	850dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023ebc:	f51dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023ec0:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023ec4:	98add0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023ec8:	08200593          	li	a1,130
    80023ecc:	00012617          	auipc	a2,0x12
    80023ed0:	4ac60613          	addi	a2,a2,1196 # 80036378 <__func__.0+0x92c0>
    80023ed4:	00009517          	auipc	a0,0x9
    80023ed8:	4dc50513          	addi	a0,a0,1244 # 8002d3b0 <__func__.0+0x2f8>
    80023edc:	77b060ef          	jal	8002ae56 <printf>
    80023ee0:	00030797          	auipc	a5,0x30
    80023ee4:	1317c783          	lbu	a5,305(a5) # 80054011 <excpt+0x1>
    80023ee8:	00009597          	auipc	a1,0x9
    80023eec:	4a058593          	addi	a1,a1,1184 # 8002d388 <__func__.0+0x2d0>
    80023ef0:	e789                	bnez	a5,80023efa <stateen_IMSIC_test_7+0x154>
    80023ef2:	00009597          	auipc	a1,0x9
    80023ef6:	48658593          	addi	a1,a1,1158 # 8002d378 <__func__.0+0x2c0>
    80023efa:	00009517          	auipc	a0,0x9
    80023efe:	4ce50513          	addi	a0,a0,1230 # 8002d3c8 <__func__.0+0x310>
    80023f02:	755060ef          	jal	8002ae56 <printf>
    80023f06:	00030797          	auipc	a5,0x30
    80023f0a:	10b7c783          	lbu	a5,267(a5) # 80054011 <excpt+0x1>
    80023f0e:	0c079963          	bnez	a5,80023fe0 <stateen_IMSIC_test_7+0x23a>
    80023f12:	4529                	li	a0,10
    80023f14:	431050ef          	jal	80029b44 <putchar>
    80023f18:	c419                	beqz	s0,80023f26 <stateen_IMSIC_test_7+0x180>
    80023f1a:	00030417          	auipc	s0,0x30
    80023f1e:	0f744403          	lbu	s0,247(s0) # 80054011 <excpt+0x1>
    80023f22:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80023f26:	4501                	li	a0,0
    80023f28:	fe1dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f2c:	ee1dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023f30:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023f34:	91add0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f38:	08200593          	li	a1,130
    80023f3c:	00012617          	auipc	a2,0x12
    80023f40:	49460613          	addi	a2,a2,1172 # 800363d0 <__func__.0+0x9318>
    80023f44:	00009517          	auipc	a0,0x9
    80023f48:	46c50513          	addi	a0,a0,1132 # 8002d3b0 <__func__.0+0x2f8>
    80023f4c:	70b060ef          	jal	8002ae56 <printf>
    80023f50:	00030797          	auipc	a5,0x30
    80023f54:	0c17c783          	lbu	a5,193(a5) # 80054011 <excpt+0x1>
    80023f58:	00009597          	auipc	a1,0x9
    80023f5c:	43058593          	addi	a1,a1,1072 # 8002d388 <__func__.0+0x2d0>
    80023f60:	e789                	bnez	a5,80023f6a <stateen_IMSIC_test_7+0x1c4>
    80023f62:	00009597          	auipc	a1,0x9
    80023f66:	41658593          	addi	a1,a1,1046 # 8002d378 <__func__.0+0x2c0>
    80023f6a:	00009517          	auipc	a0,0x9
    80023f6e:	45e50513          	addi	a0,a0,1118 # 8002d3c8 <__func__.0+0x310>
    80023f72:	6e5060ef          	jal	8002ae56 <printf>
    80023f76:	00030797          	auipc	a5,0x30
    80023f7a:	09b7c783          	lbu	a5,155(a5) # 80054011 <excpt+0x1>
    80023f7e:	e7b1                	bnez	a5,80023fca <stateen_IMSIC_test_7+0x224>
    80023f80:	4529                	li	a0,10
    80023f82:	3c3050ef          	jal	80029b44 <putchar>
    80023f86:	c411                	beqz	s0,80023f92 <stateen_IMSIC_test_7+0x1ec>
    80023f88:	00030797          	auipc	a5,0x30
    80023f8c:	0897c783          	lbu	a5,137(a5) # 80054011 <excpt+0x1>
    80023f90:	c79d                	beqz	a5,80023fbe <stateen_IMSIC_test_7+0x218>
    80023f92:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023f94:	00009597          	auipc	a1,0x9
    80023f98:	3f458593          	addi	a1,a1,1012 # 8002d388 <__func__.0+0x2d0>
    80023f9c:	00009517          	auipc	a0,0x9
    80023fa0:	49450513          	addi	a0,a0,1172 # 8002d430 <__func__.0+0x378>
    80023fa4:	6b3060ef          	jal	8002ae56 <printf>
    80023fa8:	4511                	li	a0,4
    80023faa:	f5fdc0ef          	jal	80000f08 <goto_priv>
    80023fae:	877dd0ef          	jal	80001824 <reset_state>
}
    80023fb2:	60e2                	ld	ra,24(sp)
    80023fb4:	8522                	mv	a0,s0
    80023fb6:	6442                	ld	s0,16(sp)
    80023fb8:	64a2                	ld	s1,8(sp)
    80023fba:	6105                	addi	sp,sp,32
    80023fbc:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fbe:	4405                	li	s0,1
    TEST_END();
    80023fc0:	00009597          	auipc	a1,0x9
    80023fc4:	3b858593          	addi	a1,a1,952 # 8002d378 <__func__.0+0x2c0>
    80023fc8:	bfd1                	j	80023f9c <stateen_IMSIC_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fca:	00009517          	auipc	a0,0x9
    80023fce:	40650513          	addi	a0,a0,1030 # 8002d3d0 <__func__.0+0x318>
    80023fd2:	685060ef          	jal	8002ae56 <printf>
    80023fd6:	02900513          	li	a0,41
    80023fda:	36b050ef          	jal	80029b44 <putchar>
    80023fde:	b74d                	j	80023f80 <stateen_IMSIC_test_7+0x1da>
    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023fe0:	00009517          	auipc	a0,0x9
    80023fe4:	3f050513          	addi	a0,a0,1008 # 8002d3d0 <__func__.0+0x318>
    80023fe8:	66f060ef          	jal	8002ae56 <printf>
    80023fec:	02900513          	li	a0,41
    80023ff0:	355050ef          	jal	80029b44 <putchar>
    80023ff4:	bf39                	j	80023f12 <stateen_IMSIC_test_7+0x16c>
    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023ff6:	00009517          	auipc	a0,0x9
    80023ffa:	3da50513          	addi	a0,a0,986 # 8002d3d0 <__func__.0+0x318>
    80023ffe:	659060ef          	jal	8002ae56 <printf>
    80024002:	02900513          	li	a0,41
    80024006:	33f050ef          	jal	80029b44 <putchar>
    8002400a:	bd59                	j	80023ea0 <stateen_IMSIC_test_7+0xfa>
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    8002400c:	00009517          	auipc	a0,0x9
    80024010:	3c450513          	addi	a0,a0,964 # 8002d3d0 <__func__.0+0x318>
    80024014:	643060ef          	jal	8002ae56 <printf>
    80024018:	02900513          	li	a0,41
    8002401c:	329050ef          	jal	80029b44 <putchar>
    80024020:	bd19                	j	80023e36 <stateen_IMSIC_test_7+0x90>

0000000080024022 <stateen_AIA_test_1>:



//--

bool stateen_AIA_test_1(){
    80024022:	1101                	addi	sp,sp,-32

    TEST_START();
    80024024:	00009597          	auipc	a1,0x9
    80024028:	ce458593          	addi	a1,a1,-796 # 8002cd08 <__func__.22>
    8002402c:	00009517          	auipc	a0,0x9
    80024030:	36c50513          	addi	a0,a0,876 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_1(){
    80024034:	ec06                	sd	ra,24(sp)
    80024036:	e822                	sd	s0,16(sp)
    80024038:	e426                	sd	s1,8(sp)
    TEST_START();
    8002403a:	61d060ef          	jal	8002ae56 <printf>
    8002403e:	4529                	li	a0,10
    80024040:	305050ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80024044:	4511                	li	a0,4
    80024046:	ec3dc0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=0,hu mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002404a:	4785                	li	a5,1
    8002404c:	17ee                	slli	a5,a5,0x3b
    8002404e:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80024052:	4505                	li	a0,1
    80024054:	eb5dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024058:	db5dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    8002405c:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024060:	fefdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024064:	08200593          	li	a1,130
    80024068:	00012617          	auipc	a2,0x12
    8002406c:	3c060613          	addi	a2,a2,960 # 80036428 <__func__.0+0x9370>
    80024070:	00009517          	auipc	a0,0x9
    80024074:	34050513          	addi	a0,a0,832 # 8002d3b0 <__func__.0+0x2f8>
    80024078:	5df060ef          	jal	8002ae56 <printf>
    8002407c:	00030797          	auipc	a5,0x30
    80024080:	f957c783          	lbu	a5,-107(a5) # 80054011 <excpt+0x1>
    80024084:	00030497          	auipc	s1,0x30
    80024088:	f8c48493          	addi	s1,s1,-116 # 80054010 <excpt>
    8002408c:	00009597          	auipc	a1,0x9
    80024090:	2fc58593          	addi	a1,a1,764 # 8002d388 <__func__.0+0x2d0>
    80024094:	cf89                	beqz	a5,800240ae <stateen_AIA_test_1+0x8c>
    80024096:	6498                	ld	a4,8(s1)
    80024098:	4789                	li	a5,2
    8002409a:	00009597          	auipc	a1,0x9
    8002409e:	2de58593          	addi	a1,a1,734 # 8002d378 <__func__.0+0x2c0>
    800240a2:	00f70663          	beq	a4,a5,800240ae <stateen_AIA_test_1+0x8c>
    800240a6:	00009597          	auipc	a1,0x9
    800240aa:	2e258593          	addi	a1,a1,738 # 8002d388 <__func__.0+0x2d0>
    800240ae:	00009517          	auipc	a0,0x9
    800240b2:	31a50513          	addi	a0,a0,794 # 8002d3c8 <__func__.0+0x310>
    800240b6:	5a1060ef          	jal	8002ae56 <printf>
    800240ba:	00030797          	auipc	a5,0x30
    800240be:	f577c783          	lbu	a5,-169(a5) # 80054011 <excpt+0x1>
    800240c2:	c789                	beqz	a5,800240cc <stateen_AIA_test_1+0xaa>
    800240c4:	6498                	ld	a4,8(s1)
    800240c6:	4789                	li	a5,2
    800240c8:	00f70c63          	beq	a4,a5,800240e0 <stateen_AIA_test_1+0xbe>
    800240cc:	00009517          	auipc	a0,0x9
    800240d0:	30450513          	addi	a0,a0,772 # 8002d3d0 <__func__.0+0x318>
    800240d4:	583060ef          	jal	8002ae56 <printf>
    800240d8:	02900513          	li	a0,41
    800240dc:	269050ef          	jal	80029b44 <putchar>
    800240e0:	4529                	li	a0,10
    800240e2:	263050ef          	jal	80029b44 <putchar>
    800240e6:	00030797          	auipc	a5,0x30
    800240ea:	f2b7c783          	lbu	a5,-213(a5) # 80054011 <excpt+0x1>
    800240ee:	4401                	li	s0,0
    800240f0:	c789                	beqz	a5,800240fa <stateen_AIA_test_1+0xd8>
    800240f2:	6480                	ld	s0,8(s1)
    800240f4:	1479                	addi	s0,s0,-2
    800240f6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800240fa:	4505                	li	a0,1
    800240fc:	e0ddc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024100:	d0ddc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024104:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024108:	f47dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    8002410c:	08200593          	li	a1,130
    80024110:	00012617          	auipc	a2,0x12
    80024114:	36860613          	addi	a2,a2,872 # 80036478 <__func__.0+0x93c0>
    80024118:	00009517          	auipc	a0,0x9
    8002411c:	29850513          	addi	a0,a0,664 # 8002d3b0 <__func__.0+0x2f8>
    80024120:	537060ef          	jal	8002ae56 <printf>
    80024124:	00030797          	auipc	a5,0x30
    80024128:	eed7c783          	lbu	a5,-275(a5) # 80054011 <excpt+0x1>
    8002412c:	00009597          	auipc	a1,0x9
    80024130:	25c58593          	addi	a1,a1,604 # 8002d388 <__func__.0+0x2d0>
    80024134:	cf89                	beqz	a5,8002414e <stateen_AIA_test_1+0x12c>
    80024136:	6498                	ld	a4,8(s1)
    80024138:	4789                	li	a5,2
    8002413a:	00009597          	auipc	a1,0x9
    8002413e:	23e58593          	addi	a1,a1,574 # 8002d378 <__func__.0+0x2c0>
    80024142:	00f70663          	beq	a4,a5,8002414e <stateen_AIA_test_1+0x12c>
    80024146:	00009597          	auipc	a1,0x9
    8002414a:	24258593          	addi	a1,a1,578 # 8002d388 <__func__.0+0x2d0>
    8002414e:	00009517          	auipc	a0,0x9
    80024152:	27a50513          	addi	a0,a0,634 # 8002d3c8 <__func__.0+0x310>
    80024156:	501060ef          	jal	8002ae56 <printf>
    8002415a:	00030797          	auipc	a5,0x30
    8002415e:	eb77c783          	lbu	a5,-329(a5) # 80054011 <excpt+0x1>
    80024162:	c789                	beqz	a5,8002416c <stateen_AIA_test_1+0x14a>
    80024164:	6498                	ld	a4,8(s1)
    80024166:	4789                	li	a5,2
    80024168:	00f70c63          	beq	a4,a5,80024180 <stateen_AIA_test_1+0x15e>
    8002416c:	00009517          	auipc	a0,0x9
    80024170:	26450513          	addi	a0,a0,612 # 8002d3d0 <__func__.0+0x318>
    80024174:	4e3060ef          	jal	8002ae56 <printf>
    80024178:	02900513          	li	a0,41
    8002417c:	1c9050ef          	jal	80029b44 <putchar>
    80024180:	4529                	li	a0,10
    80024182:	1c3050ef          	jal	80029b44 <putchar>
    80024186:	c801                	beqz	s0,80024196 <stateen_AIA_test_1+0x174>
    80024188:	00030797          	auipc	a5,0x30
    8002418c:	e897c783          	lbu	a5,-375(a5) # 80054011 <excpt+0x1>
    80024190:	4401                	li	s0,0
    80024192:	18079363          	bnez	a5,80024318 <stateen_AIA_test_1+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024196:	4505                	li	a0,1
    80024198:	d71dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002419c:	c71dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    800241a0:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800241a4:	eabdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    800241a8:	08200593          	li	a1,130
    800241ac:	00012617          	auipc	a2,0x12
    800241b0:	31c60613          	addi	a2,a2,796 # 800364c8 <__func__.0+0x9410>
    800241b4:	00009517          	auipc	a0,0x9
    800241b8:	1fc50513          	addi	a0,a0,508 # 8002d3b0 <__func__.0+0x2f8>
    800241bc:	49b060ef          	jal	8002ae56 <printf>
    800241c0:	00030797          	auipc	a5,0x30
    800241c4:	e517c783          	lbu	a5,-431(a5) # 80054011 <excpt+0x1>
    800241c8:	00009597          	auipc	a1,0x9
    800241cc:	1c058593          	addi	a1,a1,448 # 8002d388 <__func__.0+0x2d0>
    800241d0:	cf89                	beqz	a5,800241ea <stateen_AIA_test_1+0x1c8>
    800241d2:	6498                	ld	a4,8(s1)
    800241d4:	4789                	li	a5,2
    800241d6:	00009597          	auipc	a1,0x9
    800241da:	1a258593          	addi	a1,a1,418 # 8002d378 <__func__.0+0x2c0>
    800241de:	00f70663          	beq	a4,a5,800241ea <stateen_AIA_test_1+0x1c8>
    800241e2:	00009597          	auipc	a1,0x9
    800241e6:	1a658593          	addi	a1,a1,422 # 8002d388 <__func__.0+0x2d0>
    800241ea:	00009517          	auipc	a0,0x9
    800241ee:	1de50513          	addi	a0,a0,478 # 8002d3c8 <__func__.0+0x310>
    800241f2:	465060ef          	jal	8002ae56 <printf>
    800241f6:	00030797          	auipc	a5,0x30
    800241fa:	e1b7c783          	lbu	a5,-485(a5) # 80054011 <excpt+0x1>
    800241fe:	c789                	beqz	a5,80024208 <stateen_AIA_test_1+0x1e6>
    80024200:	6498                	ld	a4,8(s1)
    80024202:	4789                	li	a5,2
    80024204:	00f70c63          	beq	a4,a5,8002421c <stateen_AIA_test_1+0x1fa>
    80024208:	00009517          	auipc	a0,0x9
    8002420c:	1c850513          	addi	a0,a0,456 # 8002d3d0 <__func__.0+0x318>
    80024210:	447060ef          	jal	8002ae56 <printf>
    80024214:	02900513          	li	a0,41
    80024218:	12d050ef          	jal	80029b44 <putchar>
    8002421c:	4529                	li	a0,10
    8002421e:	127050ef          	jal	80029b44 <putchar>
    80024222:	c801                	beqz	s0,80024232 <stateen_AIA_test_1+0x210>
    80024224:	00030797          	auipc	a5,0x30
    80024228:	ded7c783          	lbu	a5,-531(a5) # 80054011 <excpt+0x1>
    8002422c:	4401                	li	s0,0
    8002422e:	0e079063          	bnez	a5,8002430e <stateen_AIA_test_1+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024232:	4505                	li	a0,1
    80024234:	cd5dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024238:	bd5dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002423c:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024240:	e0fdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024244:	08200593          	li	a1,130
    80024248:	00012617          	auipc	a2,0x12
    8002424c:	2d060613          	addi	a2,a2,720 # 80036518 <__func__.0+0x9460>
    80024250:	00009517          	auipc	a0,0x9
    80024254:	16050513          	addi	a0,a0,352 # 8002d3b0 <__func__.0+0x2f8>
    80024258:	3ff060ef          	jal	8002ae56 <printf>
    8002425c:	00030797          	auipc	a5,0x30
    80024260:	db57c783          	lbu	a5,-587(a5) # 80054011 <excpt+0x1>
    80024264:	00009597          	auipc	a1,0x9
    80024268:	12458593          	addi	a1,a1,292 # 8002d388 <__func__.0+0x2d0>
    8002426c:	cf89                	beqz	a5,80024286 <stateen_AIA_test_1+0x264>
    8002426e:	6498                	ld	a4,8(s1)
    80024270:	4789                	li	a5,2
    80024272:	00009597          	auipc	a1,0x9
    80024276:	10658593          	addi	a1,a1,262 # 8002d378 <__func__.0+0x2c0>
    8002427a:	00f70663          	beq	a4,a5,80024286 <stateen_AIA_test_1+0x264>
    8002427e:	00009597          	auipc	a1,0x9
    80024282:	10a58593          	addi	a1,a1,266 # 8002d388 <__func__.0+0x2d0>
    80024286:	00009517          	auipc	a0,0x9
    8002428a:	14250513          	addi	a0,a0,322 # 8002d3c8 <__func__.0+0x310>
    8002428e:	3c9060ef          	jal	8002ae56 <printf>
    80024292:	00030797          	auipc	a5,0x30
    80024296:	d7f7c783          	lbu	a5,-641(a5) # 80054011 <excpt+0x1>
    8002429a:	c789                	beqz	a5,800242a4 <stateen_AIA_test_1+0x282>
    8002429c:	6498                	ld	a4,8(s1)
    8002429e:	4789                	li	a5,2
    800242a0:	00f70c63          	beq	a4,a5,800242b8 <stateen_AIA_test_1+0x296>
    800242a4:	00009517          	auipc	a0,0x9
    800242a8:	12c50513          	addi	a0,a0,300 # 8002d3d0 <__func__.0+0x318>
    800242ac:	3ab060ef          	jal	8002ae56 <printf>
    800242b0:	02900513          	li	a0,41
    800242b4:	091050ef          	jal	80029b44 <putchar>
    800242b8:	4529                	li	a0,10
    800242ba:	08b050ef          	jal	80029b44 <putchar>
    800242be:	c015                	beqz	s0,800242e2 <stateen_AIA_test_1+0x2c0>
    800242c0:	00030417          	auipc	s0,0x30
    800242c4:	d5144403          	lbu	s0,-687(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800242c8:	00009597          	auipc	a1,0x9
    800242cc:	0c058593          	addi	a1,a1,192 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    800242d0:	cc11                	beqz	s0,800242ec <stateen_AIA_test_1+0x2ca>
    800242d2:	6498                	ld	a4,8(s1)
    800242d4:	4789                	li	a5,2
    TEST_END();
    800242d6:	00009597          	auipc	a1,0x9
    800242da:	0a258593          	addi	a1,a1,162 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    800242de:	00f70763          	beq	a4,a5,800242ec <stateen_AIA_test_1+0x2ca>
    800242e2:	4401                	li	s0,0
    TEST_END();
    800242e4:	00009597          	auipc	a1,0x9
    800242e8:	0a458593          	addi	a1,a1,164 # 8002d388 <__func__.0+0x2d0>
    800242ec:	00009517          	auipc	a0,0x9
    800242f0:	14450513          	addi	a0,a0,324 # 8002d430 <__func__.0+0x378>
    800242f4:	363060ef          	jal	8002ae56 <printf>
    800242f8:	4511                	li	a0,4
    800242fa:	c0fdc0ef          	jal	80000f08 <goto_priv>
    800242fe:	d26dd0ef          	jal	80001824 <reset_state>

}
    80024302:	60e2                	ld	ra,24(sp)
    80024304:	8522                	mv	a0,s0
    80024306:	6442                	ld	s0,16(sp)
    80024308:	64a2                	ld	s1,8(sp)
    8002430a:	6105                	addi	sp,sp,32
    8002430c:	8082                	ret
    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    8002430e:	6480                	ld	s0,8(s1)
    80024310:	1479                	addi	s0,s0,-2
    80024312:	00143413          	seqz	s0,s0
    80024316:	bf31                	j	80024232 <stateen_AIA_test_1+0x210>
    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024318:	6480                	ld	s0,8(s1)
    8002431a:	1479                	addi	s0,s0,-2
    8002431c:	00143413          	seqz	s0,s0
    80024320:	bd9d                	j	80024196 <stateen_AIA_test_1+0x174>

0000000080024322 <stateen_AIA_test_2>:

bool stateen_AIA_test_2(){
    80024322:	1101                	addi	sp,sp,-32

    TEST_START();
    80024324:	00009597          	auipc	a1,0x9
    80024328:	9fc58593          	addi	a1,a1,-1540 # 8002cd20 <__func__.21>
    8002432c:	00009517          	auipc	a0,0x9
    80024330:	06c50513          	addi	a0,a0,108 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_2(){
    80024334:	ec06                	sd	ra,24(sp)
    80024336:	e822                	sd	s0,16(sp)
    80024338:	e426                	sd	s1,8(sp)
    TEST_START();
    8002433a:	31d060ef          	jal	8002ae56 <printf>
    8002433e:	4529                	li	a0,10
    80024340:	005050ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80024344:	4511                	li	a0,4
    80024346:	bc3dc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002434a:	4785                	li	a5,1
    8002434c:	17ee                	slli	a5,a5,0x3b
    8002434e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024352:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时,不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    goto_priv(PRIV_VU);
    80024356:	4501                	li	a0,0
    80024358:	bb1dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002435c:	ab1dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024360:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024364:	cebdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024368:	08200593          	li	a1,130
    8002436c:	00012617          	auipc	a2,0x12
    80024370:	1fc60613          	addi	a2,a2,508 # 80036568 <__func__.0+0x94b0>
    80024374:	00009517          	auipc	a0,0x9
    80024378:	03c50513          	addi	a0,a0,60 # 8002d3b0 <__func__.0+0x2f8>
    8002437c:	2db060ef          	jal	8002ae56 <printf>
    80024380:	00030797          	auipc	a5,0x30
    80024384:	c917c783          	lbu	a5,-879(a5) # 80054011 <excpt+0x1>
    80024388:	00030497          	auipc	s1,0x30
    8002438c:	c8848493          	addi	s1,s1,-888 # 80054010 <excpt>
    80024390:	00009597          	auipc	a1,0x9
    80024394:	ff858593          	addi	a1,a1,-8 # 8002d388 <__func__.0+0x2d0>
    80024398:	cf89                	beqz	a5,800243b2 <stateen_AIA_test_2+0x90>
    8002439a:	6498                	ld	a4,8(s1)
    8002439c:	47d9                	li	a5,22
    8002439e:	00009597          	auipc	a1,0x9
    800243a2:	fda58593          	addi	a1,a1,-38 # 8002d378 <__func__.0+0x2c0>
    800243a6:	00f70663          	beq	a4,a5,800243b2 <stateen_AIA_test_2+0x90>
    800243aa:	00009597          	auipc	a1,0x9
    800243ae:	fde58593          	addi	a1,a1,-34 # 8002d388 <__func__.0+0x2d0>
    800243b2:	00009517          	auipc	a0,0x9
    800243b6:	01650513          	addi	a0,a0,22 # 8002d3c8 <__func__.0+0x310>
    800243ba:	29d060ef          	jal	8002ae56 <printf>
    800243be:	00030797          	auipc	a5,0x30
    800243c2:	c537c783          	lbu	a5,-941(a5) # 80054011 <excpt+0x1>
    800243c6:	c789                	beqz	a5,800243d0 <stateen_AIA_test_2+0xae>
    800243c8:	6498                	ld	a4,8(s1)
    800243ca:	47d9                	li	a5,22
    800243cc:	00f70c63          	beq	a4,a5,800243e4 <stateen_AIA_test_2+0xc2>
    800243d0:	00009517          	auipc	a0,0x9
    800243d4:	00050513          	mv	a0,a0
    800243d8:	27f060ef          	jal	8002ae56 <printf>
    800243dc:	02900513          	li	a0,41
    800243e0:	764050ef          	jal	80029b44 <putchar>
    800243e4:	4529                	li	a0,10
    800243e6:	75e050ef          	jal	80029b44 <putchar>
    800243ea:	00030797          	auipc	a5,0x30
    800243ee:	c277c783          	lbu	a5,-985(a5) # 80054011 <excpt+0x1>
    800243f2:	4401                	li	s0,0
    800243f4:	c789                	beqz	a5,800243fe <stateen_AIA_test_2+0xdc>
    800243f6:	6480                	ld	s0,8(s1)
    800243f8:	1429                	addi	s0,s0,-22
    800243fa:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800243fe:	4501                	li	a0,0
    80024400:	b09dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024404:	a09dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024408:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002440c:	c43dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024410:	08200593          	li	a1,130
    80024414:	00012617          	auipc	a2,0x12
    80024418:	1a460613          	addi	a2,a2,420 # 800365b8 <__func__.0+0x9500>
    8002441c:	00009517          	auipc	a0,0x9
    80024420:	f9450513          	addi	a0,a0,-108 # 8002d3b0 <__func__.0+0x2f8>
    80024424:	233060ef          	jal	8002ae56 <printf>
    80024428:	00030797          	auipc	a5,0x30
    8002442c:	be97c783          	lbu	a5,-1047(a5) # 80054011 <excpt+0x1>
    80024430:	00009597          	auipc	a1,0x9
    80024434:	f5858593          	addi	a1,a1,-168 # 8002d388 <__func__.0+0x2d0>
    80024438:	cf89                	beqz	a5,80024452 <stateen_AIA_test_2+0x130>
    8002443a:	6498                	ld	a4,8(s1)
    8002443c:	47d9                	li	a5,22
    8002443e:	00009597          	auipc	a1,0x9
    80024442:	f3a58593          	addi	a1,a1,-198 # 8002d378 <__func__.0+0x2c0>
    80024446:	00f70663          	beq	a4,a5,80024452 <stateen_AIA_test_2+0x130>
    8002444a:	00009597          	auipc	a1,0x9
    8002444e:	f3e58593          	addi	a1,a1,-194 # 8002d388 <__func__.0+0x2d0>
    80024452:	00009517          	auipc	a0,0x9
    80024456:	f7650513          	addi	a0,a0,-138 # 8002d3c8 <__func__.0+0x310>
    8002445a:	1fd060ef          	jal	8002ae56 <printf>
    8002445e:	00030797          	auipc	a5,0x30
    80024462:	bb37c783          	lbu	a5,-1101(a5) # 80054011 <excpt+0x1>
    80024466:	c789                	beqz	a5,80024470 <stateen_AIA_test_2+0x14e>
    80024468:	6498                	ld	a4,8(s1)
    8002446a:	47d9                	li	a5,22
    8002446c:	00f70c63          	beq	a4,a5,80024484 <stateen_AIA_test_2+0x162>
    80024470:	00009517          	auipc	a0,0x9
    80024474:	f6050513          	addi	a0,a0,-160 # 8002d3d0 <__func__.0+0x318>
    80024478:	1df060ef          	jal	8002ae56 <printf>
    8002447c:	02900513          	li	a0,41
    80024480:	6c4050ef          	jal	80029b44 <putchar>
    80024484:	4529                	li	a0,10
    80024486:	6be050ef          	jal	80029b44 <putchar>
    8002448a:	c801                	beqz	s0,8002449a <stateen_AIA_test_2+0x178>
    8002448c:	00030797          	auipc	a5,0x30
    80024490:	b857c783          	lbu	a5,-1147(a5) # 80054011 <excpt+0x1>
    80024494:	4401                	li	s0,0
    80024496:	18079363          	bnez	a5,8002461c <stateen_AIA_test_2+0x2fa>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002449a:	4501                	li	a0,0
    8002449c:	a6ddc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800244a0:	96ddc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    800244a4:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800244a8:	ba7dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800244ac:	08200593          	li	a1,130
    800244b0:	00012617          	auipc	a2,0x12
    800244b4:	16060613          	addi	a2,a2,352 # 80036610 <__func__.0+0x9558>
    800244b8:	00009517          	auipc	a0,0x9
    800244bc:	ef850513          	addi	a0,a0,-264 # 8002d3b0 <__func__.0+0x2f8>
    800244c0:	197060ef          	jal	8002ae56 <printf>
    800244c4:	00030797          	auipc	a5,0x30
    800244c8:	b4d7c783          	lbu	a5,-1203(a5) # 80054011 <excpt+0x1>
    800244cc:	00009597          	auipc	a1,0x9
    800244d0:	ebc58593          	addi	a1,a1,-324 # 8002d388 <__func__.0+0x2d0>
    800244d4:	cf89                	beqz	a5,800244ee <stateen_AIA_test_2+0x1cc>
    800244d6:	6498                	ld	a4,8(s1)
    800244d8:	47d9                	li	a5,22
    800244da:	00009597          	auipc	a1,0x9
    800244de:	e9e58593          	addi	a1,a1,-354 # 8002d378 <__func__.0+0x2c0>
    800244e2:	00f70663          	beq	a4,a5,800244ee <stateen_AIA_test_2+0x1cc>
    800244e6:	00009597          	auipc	a1,0x9
    800244ea:	ea258593          	addi	a1,a1,-350 # 8002d388 <__func__.0+0x2d0>
    800244ee:	00009517          	auipc	a0,0x9
    800244f2:	eda50513          	addi	a0,a0,-294 # 8002d3c8 <__func__.0+0x310>
    800244f6:	161060ef          	jal	8002ae56 <printf>
    800244fa:	00030797          	auipc	a5,0x30
    800244fe:	b177c783          	lbu	a5,-1257(a5) # 80054011 <excpt+0x1>
    80024502:	c789                	beqz	a5,8002450c <stateen_AIA_test_2+0x1ea>
    80024504:	6498                	ld	a4,8(s1)
    80024506:	47d9                	li	a5,22
    80024508:	00f70c63          	beq	a4,a5,80024520 <stateen_AIA_test_2+0x1fe>
    8002450c:	00009517          	auipc	a0,0x9
    80024510:	ec450513          	addi	a0,a0,-316 # 8002d3d0 <__func__.0+0x318>
    80024514:	143060ef          	jal	8002ae56 <printf>
    80024518:	02900513          	li	a0,41
    8002451c:	628050ef          	jal	80029b44 <putchar>
    80024520:	4529                	li	a0,10
    80024522:	622050ef          	jal	80029b44 <putchar>
    80024526:	c801                	beqz	s0,80024536 <stateen_AIA_test_2+0x214>
    80024528:	00030797          	auipc	a5,0x30
    8002452c:	ae97c783          	lbu	a5,-1303(a5) # 80054011 <excpt+0x1>
    80024530:	4401                	li	s0,0
    80024532:	0e079063          	bnez	a5,80024612 <stateen_AIA_test_2+0x2f0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80024536:	4501                	li	a0,0
    80024538:	9d1dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002453c:	8d1dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024540:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024544:	b0bdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024548:	08200593          	li	a1,130
    8002454c:	00012617          	auipc	a2,0x12
    80024550:	11460613          	addi	a2,a2,276 # 80036660 <__func__.0+0x95a8>
    80024554:	00009517          	auipc	a0,0x9
    80024558:	e5c50513          	addi	a0,a0,-420 # 8002d3b0 <__func__.0+0x2f8>
    8002455c:	0fb060ef          	jal	8002ae56 <printf>
    80024560:	00030797          	auipc	a5,0x30
    80024564:	ab17c783          	lbu	a5,-1359(a5) # 80054011 <excpt+0x1>
    80024568:	00009597          	auipc	a1,0x9
    8002456c:	e2058593          	addi	a1,a1,-480 # 8002d388 <__func__.0+0x2d0>
    80024570:	cf89                	beqz	a5,8002458a <stateen_AIA_test_2+0x268>
    80024572:	6498                	ld	a4,8(s1)
    80024574:	47d9                	li	a5,22
    80024576:	00009597          	auipc	a1,0x9
    8002457a:	e0258593          	addi	a1,a1,-510 # 8002d378 <__func__.0+0x2c0>
    8002457e:	00f70663          	beq	a4,a5,8002458a <stateen_AIA_test_2+0x268>
    80024582:	00009597          	auipc	a1,0x9
    80024586:	e0658593          	addi	a1,a1,-506 # 8002d388 <__func__.0+0x2d0>
    8002458a:	00009517          	auipc	a0,0x9
    8002458e:	e3e50513          	addi	a0,a0,-450 # 8002d3c8 <__func__.0+0x310>
    80024592:	0c5060ef          	jal	8002ae56 <printf>
    80024596:	00030797          	auipc	a5,0x30
    8002459a:	a7b7c783          	lbu	a5,-1413(a5) # 80054011 <excpt+0x1>
    8002459e:	c789                	beqz	a5,800245a8 <stateen_AIA_test_2+0x286>
    800245a0:	6498                	ld	a4,8(s1)
    800245a2:	47d9                	li	a5,22
    800245a4:	00f70c63          	beq	a4,a5,800245bc <stateen_AIA_test_2+0x29a>
    800245a8:	00009517          	auipc	a0,0x9
    800245ac:	e2850513          	addi	a0,a0,-472 # 8002d3d0 <__func__.0+0x318>
    800245b0:	0a7060ef          	jal	8002ae56 <printf>
    800245b4:	02900513          	li	a0,41
    800245b8:	58c050ef          	jal	80029b44 <putchar>
    800245bc:	4529                	li	a0,10
    800245be:	586050ef          	jal	80029b44 <putchar>
    800245c2:	c015                	beqz	s0,800245e6 <stateen_AIA_test_2+0x2c4>
    800245c4:	00030417          	auipc	s0,0x30
    800245c8:	a4d44403          	lbu	s0,-1459(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800245cc:	00009597          	auipc	a1,0x9
    800245d0:	dbc58593          	addi	a1,a1,-580 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245d4:	cc11                	beqz	s0,800245f0 <stateen_AIA_test_2+0x2ce>
    800245d6:	6498                	ld	a4,8(s1)
    800245d8:	47d9                	li	a5,22
    TEST_END();
    800245da:	00009597          	auipc	a1,0x9
    800245de:	d9e58593          	addi	a1,a1,-610 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245e2:	00f70763          	beq	a4,a5,800245f0 <stateen_AIA_test_2+0x2ce>
    800245e6:	4401                	li	s0,0
    TEST_END();
    800245e8:	00009597          	auipc	a1,0x9
    800245ec:	da058593          	addi	a1,a1,-608 # 8002d388 <__func__.0+0x2d0>
    800245f0:	00009517          	auipc	a0,0x9
    800245f4:	e4050513          	addi	a0,a0,-448 # 8002d430 <__func__.0+0x378>
    800245f8:	05f060ef          	jal	8002ae56 <printf>
    800245fc:	4511                	li	a0,4
    800245fe:	90bdc0ef          	jal	80000f08 <goto_priv>
    80024602:	a22dd0ef          	jal	80001824 <reset_state>

}
    80024606:	60e2                	ld	ra,24(sp)
    80024608:	8522                	mv	a0,s0
    8002460a:	6442                	ld	s0,16(sp)
    8002460c:	64a2                	ld	s1,8(sp)
    8002460e:	6105                	addi	sp,sp,32
    80024610:	8082                	ret
    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024612:	6480                	ld	s0,8(s1)
    80024614:	1429                	addi	s0,s0,-22
    80024616:	00143413          	seqz	s0,s0
    8002461a:	bf31                	j	80024536 <stateen_AIA_test_2+0x214>
    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002461c:	6480                	ld	s0,8(s1)
    8002461e:	1429                	addi	s0,s0,-22
    80024620:	00143413          	seqz	s0,s0
    80024624:	bd9d                	j	8002449a <stateen_AIA_test_2+0x178>

0000000080024626 <stateen_AIA_test_3>:

bool stateen_AIA_test_3(){
    80024626:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,m mode 可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024628:	00008597          	auipc	a1,0x8
    8002462c:	71058593          	addi	a1,a1,1808 # 8002cd38 <__func__.20>
    80024630:	00009517          	auipc	a0,0x9
    80024634:	d6850513          	addi	a0,a0,-664 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_3(){
    80024638:	ec06                	sd	ra,24(sp)
    8002463a:	e822                	sd	s0,16(sp)
    8002463c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002463e:	019060ef          	jal	8002ae56 <printf>
    80024642:	4529                	li	a0,10
    80024644:	500050ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80024648:	4511                	li	a0,4
    8002464a:	8bfdc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002464e:	4785                	li	a5,1
    80024650:	17ee                	slli	a5,a5,0x3b
    80024652:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80024656:	4511                	li	a0,4
    80024658:	8b1dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002465c:	fb0dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024660:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024664:	9ebdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    80024668:	08200593          	li	a1,130
    8002466c:	00012617          	auipc	a2,0x12
    80024670:	04c60613          	addi	a2,a2,76 # 800366b8 <__func__.0+0x9600>
    80024674:	00009517          	auipc	a0,0x9
    80024678:	d3c50513          	addi	a0,a0,-708 # 8002d3b0 <__func__.0+0x2f8>
    8002467c:	7da060ef          	jal	8002ae56 <printf>
    80024680:	00030797          	auipc	a5,0x30
    80024684:	9917c783          	lbu	a5,-1647(a5) # 80054011 <excpt+0x1>
    80024688:	00009597          	auipc	a1,0x9
    8002468c:	cf058593          	addi	a1,a1,-784 # 8002d378 <__func__.0+0x2c0>
    80024690:	c789                	beqz	a5,8002469a <stateen_AIA_test_3+0x74>
    80024692:	00009597          	auipc	a1,0x9
    80024696:	cf658593          	addi	a1,a1,-778 # 8002d388 <__func__.0+0x2d0>
    8002469a:	00009517          	auipc	a0,0x9
    8002469e:	d2e50513          	addi	a0,a0,-722 # 8002d3c8 <__func__.0+0x310>
    800246a2:	7b4060ef          	jal	8002ae56 <printf>
    800246a6:	00030797          	auipc	a5,0x30
    800246aa:	96b7c783          	lbu	a5,-1685(a5) # 80054011 <excpt+0x1>
    800246ae:	1c079d63          	bnez	a5,80024888 <stateen_AIA_test_3+0x262>
    800246b2:	4529                	li	a0,10
    800246b4:	490050ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800246b8:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800246ba:	00030497          	auipc	s1,0x30
    800246be:	9574c483          	lbu	s1,-1705(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    800246c2:	847dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800246c6:	f46dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800246ca:	608027f3          	csrr	a5,hvien

    excpt_info();
    800246ce:	981dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    800246d2:	08200593          	li	a1,130
    800246d6:	00012617          	auipc	a2,0x12
    800246da:	02260613          	addi	a2,a2,34 # 800366f8 <__func__.0+0x9640>
    800246de:	00009517          	auipc	a0,0x9
    800246e2:	cd250513          	addi	a0,a0,-814 # 8002d3b0 <__func__.0+0x2f8>
    800246e6:	770060ef          	jal	8002ae56 <printf>
    800246ea:	00030797          	auipc	a5,0x30
    800246ee:	9277c783          	lbu	a5,-1753(a5) # 80054011 <excpt+0x1>
    800246f2:	00009597          	auipc	a1,0x9
    800246f6:	c9658593          	addi	a1,a1,-874 # 8002d388 <__func__.0+0x2d0>
    800246fa:	e789                	bnez	a5,80024704 <stateen_AIA_test_3+0xde>
    800246fc:	00009597          	auipc	a1,0x9
    80024700:	c7c58593          	addi	a1,a1,-900 # 8002d378 <__func__.0+0x2c0>
    80024704:	00009517          	auipc	a0,0x9
    80024708:	cc450513          	addi	a0,a0,-828 # 8002d3c8 <__func__.0+0x310>
    8002470c:	74a060ef          	jal	8002ae56 <printf>
    80024710:	00030797          	auipc	a5,0x30
    80024714:	9017c783          	lbu	a5,-1791(a5) # 80054011 <excpt+0x1>
    80024718:	14079d63          	bnez	a5,80024872 <stateen_AIA_test_3+0x24c>
    8002471c:	4529                	li	a0,10
    8002471e:	426050ef          	jal	80029b44 <putchar>
    80024722:	4401                	li	s0,0
    80024724:	e499                	bnez	s1,80024732 <stateen_AIA_test_3+0x10c>
    80024726:	00030417          	auipc	s0,0x30
    8002472a:	8eb44403          	lbu	s0,-1813(s0) # 80054011 <excpt+0x1>
    8002472e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024732:	4511                	li	a0,4
    80024734:	fd4dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024738:	ed4dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002473c:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024740:	90fdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    80024744:	08200593          	li	a1,130
    80024748:	00012617          	auipc	a2,0x12
    8002474c:	ff060613          	addi	a2,a2,-16 # 80036738 <__func__.0+0x9680>
    80024750:	00009517          	auipc	a0,0x9
    80024754:	c6050513          	addi	a0,a0,-928 # 8002d3b0 <__func__.0+0x2f8>
    80024758:	6fe060ef          	jal	8002ae56 <printf>
    8002475c:	00030797          	auipc	a5,0x30
    80024760:	8b57c783          	lbu	a5,-1867(a5) # 80054011 <excpt+0x1>
    80024764:	00009597          	auipc	a1,0x9
    80024768:	c2458593          	addi	a1,a1,-988 # 8002d388 <__func__.0+0x2d0>
    8002476c:	e789                	bnez	a5,80024776 <stateen_AIA_test_3+0x150>
    8002476e:	00009597          	auipc	a1,0x9
    80024772:	c0a58593          	addi	a1,a1,-1014 # 8002d378 <__func__.0+0x2c0>
    80024776:	00009517          	auipc	a0,0x9
    8002477a:	c5250513          	addi	a0,a0,-942 # 8002d3c8 <__func__.0+0x310>
    8002477e:	6d8060ef          	jal	8002ae56 <printf>
    80024782:	00030797          	auipc	a5,0x30
    80024786:	88f7c783          	lbu	a5,-1905(a5) # 80054011 <excpt+0x1>
    8002478a:	0c079963          	bnez	a5,8002485c <stateen_AIA_test_3+0x236>
    8002478e:	4529                	li	a0,10
    80024790:	3b4050ef          	jal	80029b44 <putchar>
    80024794:	c419                	beqz	s0,800247a2 <stateen_AIA_test_3+0x17c>
    80024796:	00030417          	auipc	s0,0x30
    8002479a:	87b44403          	lbu	s0,-1925(s0) # 80054011 <excpt+0x1>
    8002479e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800247a2:	4511                	li	a0,4
    800247a4:	f64dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800247a8:	e64dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800247ac:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800247b0:	89fdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    800247b4:	08200593          	li	a1,130
    800247b8:	00012617          	auipc	a2,0x12
    800247bc:	fc060613          	addi	a2,a2,-64 # 80036778 <__func__.0+0x96c0>
    800247c0:	00009517          	auipc	a0,0x9
    800247c4:	bf050513          	addi	a0,a0,-1040 # 8002d3b0 <__func__.0+0x2f8>
    800247c8:	68e060ef          	jal	8002ae56 <printf>
    800247cc:	00030797          	auipc	a5,0x30
    800247d0:	8457c783          	lbu	a5,-1979(a5) # 80054011 <excpt+0x1>
    800247d4:	00009597          	auipc	a1,0x9
    800247d8:	bb458593          	addi	a1,a1,-1100 # 8002d388 <__func__.0+0x2d0>
    800247dc:	e789                	bnez	a5,800247e6 <stateen_AIA_test_3+0x1c0>
    800247de:	00009597          	auipc	a1,0x9
    800247e2:	b9a58593          	addi	a1,a1,-1126 # 8002d378 <__func__.0+0x2c0>
    800247e6:	00009517          	auipc	a0,0x9
    800247ea:	be250513          	addi	a0,a0,-1054 # 8002d3c8 <__func__.0+0x310>
    800247ee:	668060ef          	jal	8002ae56 <printf>
    800247f2:	00030797          	auipc	a5,0x30
    800247f6:	81f7c783          	lbu	a5,-2017(a5) # 80054011 <excpt+0x1>
    800247fa:	e7b1                	bnez	a5,80024846 <stateen_AIA_test_3+0x220>
    800247fc:	4529                	li	a0,10
    800247fe:	346050ef          	jal	80029b44 <putchar>
    80024802:	c411                	beqz	s0,8002480e <stateen_AIA_test_3+0x1e8>
    80024804:	00030797          	auipc	a5,0x30
    80024808:	80d7c783          	lbu	a5,-2035(a5) # 80054011 <excpt+0x1>
    8002480c:	c79d                	beqz	a5,8002483a <stateen_AIA_test_3+0x214>
    8002480e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80024810:	00009597          	auipc	a1,0x9
    80024814:	b7858593          	addi	a1,a1,-1160 # 8002d388 <__func__.0+0x2d0>
    80024818:	00009517          	auipc	a0,0x9
    8002481c:	c1850513          	addi	a0,a0,-1000 # 8002d430 <__func__.0+0x378>
    80024820:	636060ef          	jal	8002ae56 <printf>
    80024824:	4511                	li	a0,4
    80024826:	ee2dc0ef          	jal	80000f08 <goto_priv>
    8002482a:	ffbdc0ef          	jal	80001824 <reset_state>

}
    8002482e:	60e2                	ld	ra,24(sp)
    80024830:	8522                	mv	a0,s0
    80024832:	6442                	ld	s0,16(sp)
    80024834:	64a2                	ld	s1,8(sp)
    80024836:	6105                	addi	sp,sp,32
    80024838:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    8002483a:	4405                	li	s0,1
    TEST_END();
    8002483c:	00009597          	auipc	a1,0x9
    80024840:	b3c58593          	addi	a1,a1,-1220 # 8002d378 <__func__.0+0x2c0>
    80024844:	bfd1                	j	80024818 <stateen_AIA_test_3+0x1f2>
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024846:	00009517          	auipc	a0,0x9
    8002484a:	b8a50513          	addi	a0,a0,-1142 # 8002d3d0 <__func__.0+0x318>
    8002484e:	608060ef          	jal	8002ae56 <printf>
    80024852:	02900513          	li	a0,41
    80024856:	2ee050ef          	jal	80029b44 <putchar>
    8002485a:	b74d                	j	800247fc <stateen_AIA_test_3+0x1d6>
    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    8002485c:	00009517          	auipc	a0,0x9
    80024860:	b7450513          	addi	a0,a0,-1164 # 8002d3d0 <__func__.0+0x318>
    80024864:	5f2060ef          	jal	8002ae56 <printf>
    80024868:	02900513          	li	a0,41
    8002486c:	2d8050ef          	jal	80029b44 <putchar>
    80024870:	bf39                	j	8002478e <stateen_AIA_test_3+0x168>
    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    80024872:	00009517          	auipc	a0,0x9
    80024876:	b5e50513          	addi	a0,a0,-1186 # 8002d3d0 <__func__.0+0x318>
    8002487a:	5dc060ef          	jal	8002ae56 <printf>
    8002487e:	02900513          	li	a0,41
    80024882:	2c2050ef          	jal	80029b44 <putchar>
    80024886:	bd59                	j	8002471c <stateen_AIA_test_3+0xf6>
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    80024888:	00009517          	auipc	a0,0x9
    8002488c:	b4850513          	addi	a0,a0,-1208 # 8002d3d0 <__func__.0+0x318>
    80024890:	5c6060ef          	jal	8002ae56 <printf>
    80024894:	02900513          	li	a0,41
    80024898:	2ac050ef          	jal	80029b44 <putchar>
    8002489c:	bd19                	j	800246b2 <stateen_AIA_test_3+0x8c>

000000008002489e <stateen_AIA_test_4>:


bool stateen_AIA_test_4(){
    8002489e:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    800248a0:	00008597          	auipc	a1,0x8
    800248a4:	4b058593          	addi	a1,a1,1200 # 8002cd50 <__func__.19>
    800248a8:	00009517          	auipc	a0,0x9
    800248ac:	af050513          	addi	a0,a0,-1296 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_4(){
    800248b0:	ec06                	sd	ra,24(sp)
    800248b2:	e822                	sd	s0,16(sp)
    800248b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800248b6:	5a0060ef          	jal	8002ae56 <printf>
    800248ba:	4529                	li	a0,10
    800248bc:	288050ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800248c0:	4511                	li	a0,4
    800248c2:	e46dc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800248c6:	4785                	li	a5,1
    800248c8:	17ee                	slli	a5,a5,0x3b
    800248ca:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800248ce:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800248d2:	30c025f3          	csrr	a1,mstateen0
    800248d6:	00011517          	auipc	a0,0x11
    800248da:	2a250513          	addi	a0,a0,674 # 80035b78 <__func__.0+0x8ac0>
    800248de:	578060ef          	jal	8002ae56 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800248e2:	60c025f3          	csrr	a1,hstateen0
    800248e6:	00011517          	auipc	a0,0x11
    800248ea:	2a250513          	addi	a0,a0,674 # 80035b88 <__func__.0+0x8ad0>
    800248ee:	568060ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    800248f2:	4509                	li	a0,2
    800248f4:	e14dc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800248f8:	d14dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800248fc:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024900:	f4edc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024904:	08200593          	li	a1,130
    80024908:	00012617          	auipc	a2,0x12
    8002490c:	eb060613          	addi	a2,a2,-336 # 800367b8 <__func__.0+0x9700>
    80024910:	00009517          	auipc	a0,0x9
    80024914:	aa050513          	addi	a0,a0,-1376 # 8002d3b0 <__func__.0+0x2f8>
    80024918:	53e060ef          	jal	8002ae56 <printf>
    8002491c:	0002f797          	auipc	a5,0x2f
    80024920:	6f57c783          	lbu	a5,1781(a5) # 80054011 <excpt+0x1>
    80024924:	0002f497          	auipc	s1,0x2f
    80024928:	6ec48493          	addi	s1,s1,1772 # 80054010 <excpt>
    8002492c:	00009597          	auipc	a1,0x9
    80024930:	a5c58593          	addi	a1,a1,-1444 # 8002d388 <__func__.0+0x2d0>
    80024934:	cf89                	beqz	a5,8002494e <stateen_AIA_test_4+0xb0>
    80024936:	6498                	ld	a4,8(s1)
    80024938:	47d9                	li	a5,22
    8002493a:	00009597          	auipc	a1,0x9
    8002493e:	a3e58593          	addi	a1,a1,-1474 # 8002d378 <__func__.0+0x2c0>
    80024942:	00f70663          	beq	a4,a5,8002494e <stateen_AIA_test_4+0xb0>
    80024946:	00009597          	auipc	a1,0x9
    8002494a:	a4258593          	addi	a1,a1,-1470 # 8002d388 <__func__.0+0x2d0>
    8002494e:	00009517          	auipc	a0,0x9
    80024952:	a7a50513          	addi	a0,a0,-1414 # 8002d3c8 <__func__.0+0x310>
    80024956:	500060ef          	jal	8002ae56 <printf>
    8002495a:	0002f797          	auipc	a5,0x2f
    8002495e:	6b77c783          	lbu	a5,1719(a5) # 80054011 <excpt+0x1>
    80024962:	c789                	beqz	a5,8002496c <stateen_AIA_test_4+0xce>
    80024964:	6498                	ld	a4,8(s1)
    80024966:	47d9                	li	a5,22
    80024968:	00f70c63          	beq	a4,a5,80024980 <stateen_AIA_test_4+0xe2>
    8002496c:	00009517          	auipc	a0,0x9
    80024970:	a6450513          	addi	a0,a0,-1436 # 8002d3d0 <__func__.0+0x318>
    80024974:	4e2060ef          	jal	8002ae56 <printf>
    80024978:	02900513          	li	a0,41
    8002497c:	1c8050ef          	jal	80029b44 <putchar>
    80024980:	4529                	li	a0,10
    80024982:	1c2050ef          	jal	80029b44 <putchar>
    80024986:	0002f797          	auipc	a5,0x2f
    8002498a:	68b7c783          	lbu	a5,1675(a5) # 80054011 <excpt+0x1>
    8002498e:	4401                	li	s0,0
    80024990:	c789                	beqz	a5,8002499a <stateen_AIA_test_4+0xfc>
    80024992:	6480                	ld	s0,8(s1)
    80024994:	1429                	addi	s0,s0,-22
    80024996:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8002499a:	4509                	li	a0,2
    8002499c:	d6cdc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800249a0:	c6cdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800249a4:	608027f3          	csrr	a5,hvien

    excpt_info();
    800249a8:	ea6dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800249ac:	08200593          	li	a1,130
    800249b0:	00012617          	auipc	a2,0x12
    800249b4:	e5860613          	addi	a2,a2,-424 # 80036808 <__func__.0+0x9750>
    800249b8:	00009517          	auipc	a0,0x9
    800249bc:	9f850513          	addi	a0,a0,-1544 # 8002d3b0 <__func__.0+0x2f8>
    800249c0:	496060ef          	jal	8002ae56 <printf>
    800249c4:	0002f797          	auipc	a5,0x2f
    800249c8:	64d7c783          	lbu	a5,1613(a5) # 80054011 <excpt+0x1>
    800249cc:	00009597          	auipc	a1,0x9
    800249d0:	9bc58593          	addi	a1,a1,-1604 # 8002d388 <__func__.0+0x2d0>
    800249d4:	cf89                	beqz	a5,800249ee <stateen_AIA_test_4+0x150>
    800249d6:	6498                	ld	a4,8(s1)
    800249d8:	47d9                	li	a5,22
    800249da:	00009597          	auipc	a1,0x9
    800249de:	99e58593          	addi	a1,a1,-1634 # 8002d378 <__func__.0+0x2c0>
    800249e2:	00f70663          	beq	a4,a5,800249ee <stateen_AIA_test_4+0x150>
    800249e6:	00009597          	auipc	a1,0x9
    800249ea:	9a258593          	addi	a1,a1,-1630 # 8002d388 <__func__.0+0x2d0>
    800249ee:	00009517          	auipc	a0,0x9
    800249f2:	9da50513          	addi	a0,a0,-1574 # 8002d3c8 <__func__.0+0x310>
    800249f6:	460060ef          	jal	8002ae56 <printf>
    800249fa:	0002f797          	auipc	a5,0x2f
    800249fe:	6177c783          	lbu	a5,1559(a5) # 80054011 <excpt+0x1>
    80024a02:	c789                	beqz	a5,80024a0c <stateen_AIA_test_4+0x16e>
    80024a04:	6498                	ld	a4,8(s1)
    80024a06:	47d9                	li	a5,22
    80024a08:	00f70c63          	beq	a4,a5,80024a20 <stateen_AIA_test_4+0x182>
    80024a0c:	00009517          	auipc	a0,0x9
    80024a10:	9c450513          	addi	a0,a0,-1596 # 8002d3d0 <__func__.0+0x318>
    80024a14:	442060ef          	jal	8002ae56 <printf>
    80024a18:	02900513          	li	a0,41
    80024a1c:	128050ef          	jal	80029b44 <putchar>
    80024a20:	4529                	li	a0,10
    80024a22:	122050ef          	jal	80029b44 <putchar>
    80024a26:	c801                	beqz	s0,80024a36 <stateen_AIA_test_4+0x198>
    80024a28:	0002f797          	auipc	a5,0x2f
    80024a2c:	5e97c783          	lbu	a5,1513(a5) # 80054011 <excpt+0x1>
    80024a30:	4401                	li	s0,0
    80024a32:	18079363          	bnez	a5,80024bb8 <stateen_AIA_test_4+0x31a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024a36:	4509                	li	a0,2
    80024a38:	cd0dc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024a3c:	bd0dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024a40:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024a44:	e0adc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024a48:	08200593          	li	a1,130
    80024a4c:	00012617          	auipc	a2,0x12
    80024a50:	e1460613          	addi	a2,a2,-492 # 80036860 <__func__.0+0x97a8>
    80024a54:	00009517          	auipc	a0,0x9
    80024a58:	95c50513          	addi	a0,a0,-1700 # 8002d3b0 <__func__.0+0x2f8>
    80024a5c:	3fa060ef          	jal	8002ae56 <printf>
    80024a60:	0002f797          	auipc	a5,0x2f
    80024a64:	5b17c783          	lbu	a5,1457(a5) # 80054011 <excpt+0x1>
    80024a68:	00009597          	auipc	a1,0x9
    80024a6c:	92058593          	addi	a1,a1,-1760 # 8002d388 <__func__.0+0x2d0>
    80024a70:	cf89                	beqz	a5,80024a8a <stateen_AIA_test_4+0x1ec>
    80024a72:	6498                	ld	a4,8(s1)
    80024a74:	47d9                	li	a5,22
    80024a76:	00009597          	auipc	a1,0x9
    80024a7a:	90258593          	addi	a1,a1,-1790 # 8002d378 <__func__.0+0x2c0>
    80024a7e:	00f70663          	beq	a4,a5,80024a8a <stateen_AIA_test_4+0x1ec>
    80024a82:	00009597          	auipc	a1,0x9
    80024a86:	90658593          	addi	a1,a1,-1786 # 8002d388 <__func__.0+0x2d0>
    80024a8a:	00009517          	auipc	a0,0x9
    80024a8e:	93e50513          	addi	a0,a0,-1730 # 8002d3c8 <__func__.0+0x310>
    80024a92:	3c4060ef          	jal	8002ae56 <printf>
    80024a96:	0002f797          	auipc	a5,0x2f
    80024a9a:	57b7c783          	lbu	a5,1403(a5) # 80054011 <excpt+0x1>
    80024a9e:	c789                	beqz	a5,80024aa8 <stateen_AIA_test_4+0x20a>
    80024aa0:	6498                	ld	a4,8(s1)
    80024aa2:	47d9                	li	a5,22
    80024aa4:	00f70c63          	beq	a4,a5,80024abc <stateen_AIA_test_4+0x21e>
    80024aa8:	00009517          	auipc	a0,0x9
    80024aac:	92850513          	addi	a0,a0,-1752 # 8002d3d0 <__func__.0+0x318>
    80024ab0:	3a6060ef          	jal	8002ae56 <printf>
    80024ab4:	02900513          	li	a0,41
    80024ab8:	08c050ef          	jal	80029b44 <putchar>
    80024abc:	4529                	li	a0,10
    80024abe:	086050ef          	jal	80029b44 <putchar>
    80024ac2:	c801                	beqz	s0,80024ad2 <stateen_AIA_test_4+0x234>
    80024ac4:	0002f797          	auipc	a5,0x2f
    80024ac8:	54d7c783          	lbu	a5,1357(a5) # 80054011 <excpt+0x1>
    80024acc:	4401                	li	s0,0
    80024ace:	0e079063          	bnez	a5,80024bae <stateen_AIA_test_4+0x310>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024ad2:	4509                	li	a0,2
    80024ad4:	c34dc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024ad8:	b34dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024adc:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024ae0:	d6edc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ae4:	08200593          	li	a1,130
    80024ae8:	00012617          	auipc	a2,0x12
    80024aec:	dc860613          	addi	a2,a2,-568 # 800368b0 <__func__.0+0x97f8>
    80024af0:	00009517          	auipc	a0,0x9
    80024af4:	8c050513          	addi	a0,a0,-1856 # 8002d3b0 <__func__.0+0x2f8>
    80024af8:	35e060ef          	jal	8002ae56 <printf>
    80024afc:	0002f797          	auipc	a5,0x2f
    80024b00:	5157c783          	lbu	a5,1301(a5) # 80054011 <excpt+0x1>
    80024b04:	00009597          	auipc	a1,0x9
    80024b08:	88458593          	addi	a1,a1,-1916 # 8002d388 <__func__.0+0x2d0>
    80024b0c:	cf89                	beqz	a5,80024b26 <stateen_AIA_test_4+0x288>
    80024b0e:	6498                	ld	a4,8(s1)
    80024b10:	47d9                	li	a5,22
    80024b12:	00009597          	auipc	a1,0x9
    80024b16:	86658593          	addi	a1,a1,-1946 # 8002d378 <__func__.0+0x2c0>
    80024b1a:	00f70663          	beq	a4,a5,80024b26 <stateen_AIA_test_4+0x288>
    80024b1e:	00009597          	auipc	a1,0x9
    80024b22:	86a58593          	addi	a1,a1,-1942 # 8002d388 <__func__.0+0x2d0>
    80024b26:	00009517          	auipc	a0,0x9
    80024b2a:	8a250513          	addi	a0,a0,-1886 # 8002d3c8 <__func__.0+0x310>
    80024b2e:	328060ef          	jal	8002ae56 <printf>
    80024b32:	0002f797          	auipc	a5,0x2f
    80024b36:	4df7c783          	lbu	a5,1247(a5) # 80054011 <excpt+0x1>
    80024b3a:	c789                	beqz	a5,80024b44 <stateen_AIA_test_4+0x2a6>
    80024b3c:	6498                	ld	a4,8(s1)
    80024b3e:	47d9                	li	a5,22
    80024b40:	00f70c63          	beq	a4,a5,80024b58 <stateen_AIA_test_4+0x2ba>
    80024b44:	00009517          	auipc	a0,0x9
    80024b48:	88c50513          	addi	a0,a0,-1908 # 8002d3d0 <__func__.0+0x318>
    80024b4c:	30a060ef          	jal	8002ae56 <printf>
    80024b50:	02900513          	li	a0,41
    80024b54:	7f1040ef          	jal	80029b44 <putchar>
    80024b58:	4529                	li	a0,10
    80024b5a:	7eb040ef          	jal	80029b44 <putchar>
    80024b5e:	c015                	beqz	s0,80024b82 <stateen_AIA_test_4+0x2e4>
    80024b60:	0002f417          	auipc	s0,0x2f
    80024b64:	4b144403          	lbu	s0,1201(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80024b68:	00009597          	auipc	a1,0x9
    80024b6c:	82058593          	addi	a1,a1,-2016 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b70:	cc11                	beqz	s0,80024b8c <stateen_AIA_test_4+0x2ee>
    80024b72:	6498                	ld	a4,8(s1)
    80024b74:	47d9                	li	a5,22
    TEST_END();
    80024b76:	00009597          	auipc	a1,0x9
    80024b7a:	80258593          	addi	a1,a1,-2046 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b7e:	00f70763          	beq	a4,a5,80024b8c <stateen_AIA_test_4+0x2ee>
    80024b82:	4401                	li	s0,0
    TEST_END();
    80024b84:	00009597          	auipc	a1,0x9
    80024b88:	80458593          	addi	a1,a1,-2044 # 8002d388 <__func__.0+0x2d0>
    80024b8c:	00009517          	auipc	a0,0x9
    80024b90:	8a450513          	addi	a0,a0,-1884 # 8002d430 <__func__.0+0x378>
    80024b94:	2c2060ef          	jal	8002ae56 <printf>
    80024b98:	4511                	li	a0,4
    80024b9a:	b6edc0ef          	jal	80000f08 <goto_priv>
    80024b9e:	c87dc0ef          	jal	80001824 <reset_state>

}
    80024ba2:	60e2                	ld	ra,24(sp)
    80024ba4:	8522                	mv	a0,s0
    80024ba6:	6442                	ld	s0,16(sp)
    80024ba8:	64a2                	ld	s1,8(sp)
    80024baa:	6105                	addi	sp,sp,32
    80024bac:	8082                	ret
    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024bae:	6480                	ld	s0,8(s1)
    80024bb0:	1429                	addi	s0,s0,-22
    80024bb2:	00143413          	seqz	s0,s0
    80024bb6:	bf31                	j	80024ad2 <stateen_AIA_test_4+0x234>
    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024bb8:	6480                	ld	s0,8(s1)
    80024bba:	1429                	addi	s0,s0,-22
    80024bbc:	00143413          	seqz	s0,s0
    80024bc0:	bd9d                	j	80024a36 <stateen_AIA_test_4+0x198>

0000000080024bc2 <stateen_AIA_test_5>:

bool stateen_AIA_test_5(){
    80024bc2:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,hs mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024bc4:	00008597          	auipc	a1,0x8
    80024bc8:	1a458593          	addi	a1,a1,420 # 8002cd68 <__func__.18>
    80024bcc:	00008517          	auipc	a0,0x8
    80024bd0:	7cc50513          	addi	a0,a0,1996 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_5(){
    80024bd4:	ec06                	sd	ra,24(sp)
    80024bd6:	e822                	sd	s0,16(sp)
    80024bd8:	e426                	sd	s1,8(sp)
    TEST_START();
    80024bda:	27c060ef          	jal	8002ae56 <printf>
    80024bde:	4529                	li	a0,10
    80024be0:	765040ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80024be4:	4511                	li	a0,4
    80024be6:	b22dc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024bea:	4785                	li	a5,1
    80024bec:	17ee                	slli	a5,a5,0x3b
    80024bee:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80024bf2:	450d                	li	a0,3
    80024bf4:	b14dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024bf8:	a14dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024bfc:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024c00:	c4edc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024c04:	08200593          	li	a1,130
    80024c08:	00012617          	auipc	a2,0x12
    80024c0c:	d0060613          	addi	a2,a2,-768 # 80036908 <__func__.0+0x9850>
    80024c10:	00008517          	auipc	a0,0x8
    80024c14:	7a050513          	addi	a0,a0,1952 # 8002d3b0 <__func__.0+0x2f8>
    80024c18:	23e060ef          	jal	8002ae56 <printf>
    80024c1c:	0002f797          	auipc	a5,0x2f
    80024c20:	3f57c783          	lbu	a5,1013(a5) # 80054011 <excpt+0x1>
    80024c24:	0002f497          	auipc	s1,0x2f
    80024c28:	3ec48493          	addi	s1,s1,1004 # 80054010 <excpt>
    80024c2c:	00008597          	auipc	a1,0x8
    80024c30:	75c58593          	addi	a1,a1,1884 # 8002d388 <__func__.0+0x2d0>
    80024c34:	cf89                	beqz	a5,80024c4e <stateen_AIA_test_5+0x8c>
    80024c36:	6498                	ld	a4,8(s1)
    80024c38:	4789                	li	a5,2
    80024c3a:	00008597          	auipc	a1,0x8
    80024c3e:	73e58593          	addi	a1,a1,1854 # 8002d378 <__func__.0+0x2c0>
    80024c42:	00f70663          	beq	a4,a5,80024c4e <stateen_AIA_test_5+0x8c>
    80024c46:	00008597          	auipc	a1,0x8
    80024c4a:	74258593          	addi	a1,a1,1858 # 8002d388 <__func__.0+0x2d0>
    80024c4e:	00008517          	auipc	a0,0x8
    80024c52:	77a50513          	addi	a0,a0,1914 # 8002d3c8 <__func__.0+0x310>
    80024c56:	200060ef          	jal	8002ae56 <printf>
    80024c5a:	0002f797          	auipc	a5,0x2f
    80024c5e:	3b77c783          	lbu	a5,951(a5) # 80054011 <excpt+0x1>
    80024c62:	c789                	beqz	a5,80024c6c <stateen_AIA_test_5+0xaa>
    80024c64:	6498                	ld	a4,8(s1)
    80024c66:	4789                	li	a5,2
    80024c68:	00f70c63          	beq	a4,a5,80024c80 <stateen_AIA_test_5+0xbe>
    80024c6c:	00008517          	auipc	a0,0x8
    80024c70:	76450513          	addi	a0,a0,1892 # 8002d3d0 <__func__.0+0x318>
    80024c74:	1e2060ef          	jal	8002ae56 <printf>
    80024c78:	02900513          	li	a0,41
    80024c7c:	6c9040ef          	jal	80029b44 <putchar>
    80024c80:	4529                	li	a0,10
    80024c82:	6c3040ef          	jal	80029b44 <putchar>
    80024c86:	0002f797          	auipc	a5,0x2f
    80024c8a:	38b7c783          	lbu	a5,907(a5) # 80054011 <excpt+0x1>
    80024c8e:	4401                	li	s0,0
    80024c90:	c789                	beqz	a5,80024c9a <stateen_AIA_test_5+0xd8>
    80024c92:	6480                	ld	s0,8(s1)
    80024c94:	1479                	addi	s0,s0,-2
    80024c96:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024c9a:	450d                	li	a0,3
    80024c9c:	a6cdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024ca0:	96cdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024ca4:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024ca8:	ba6dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024cac:	08200593          	li	a1,130
    80024cb0:	00012617          	auipc	a2,0x12
    80024cb4:	ca860613          	addi	a2,a2,-856 # 80036958 <__func__.0+0x98a0>
    80024cb8:	00008517          	auipc	a0,0x8
    80024cbc:	6f850513          	addi	a0,a0,1784 # 8002d3b0 <__func__.0+0x2f8>
    80024cc0:	196060ef          	jal	8002ae56 <printf>
    80024cc4:	0002f797          	auipc	a5,0x2f
    80024cc8:	34d7c783          	lbu	a5,845(a5) # 80054011 <excpt+0x1>
    80024ccc:	00008597          	auipc	a1,0x8
    80024cd0:	6bc58593          	addi	a1,a1,1724 # 8002d388 <__func__.0+0x2d0>
    80024cd4:	cf89                	beqz	a5,80024cee <stateen_AIA_test_5+0x12c>
    80024cd6:	6498                	ld	a4,8(s1)
    80024cd8:	4789                	li	a5,2
    80024cda:	00008597          	auipc	a1,0x8
    80024cde:	69e58593          	addi	a1,a1,1694 # 8002d378 <__func__.0+0x2c0>
    80024ce2:	00f70663          	beq	a4,a5,80024cee <stateen_AIA_test_5+0x12c>
    80024ce6:	00008597          	auipc	a1,0x8
    80024cea:	6a258593          	addi	a1,a1,1698 # 8002d388 <__func__.0+0x2d0>
    80024cee:	00008517          	auipc	a0,0x8
    80024cf2:	6da50513          	addi	a0,a0,1754 # 8002d3c8 <__func__.0+0x310>
    80024cf6:	160060ef          	jal	8002ae56 <printf>
    80024cfa:	0002f797          	auipc	a5,0x2f
    80024cfe:	3177c783          	lbu	a5,791(a5) # 80054011 <excpt+0x1>
    80024d02:	c789                	beqz	a5,80024d0c <stateen_AIA_test_5+0x14a>
    80024d04:	6498                	ld	a4,8(s1)
    80024d06:	4789                	li	a5,2
    80024d08:	00f70c63          	beq	a4,a5,80024d20 <stateen_AIA_test_5+0x15e>
    80024d0c:	00008517          	auipc	a0,0x8
    80024d10:	6c450513          	addi	a0,a0,1732 # 8002d3d0 <__func__.0+0x318>
    80024d14:	142060ef          	jal	8002ae56 <printf>
    80024d18:	02900513          	li	a0,41
    80024d1c:	629040ef          	jal	80029b44 <putchar>
    80024d20:	4529                	li	a0,10
    80024d22:	623040ef          	jal	80029b44 <putchar>
    80024d26:	c801                	beqz	s0,80024d36 <stateen_AIA_test_5+0x174>
    80024d28:	0002f797          	auipc	a5,0x2f
    80024d2c:	2e97c783          	lbu	a5,745(a5) # 80054011 <excpt+0x1>
    80024d30:	4401                	li	s0,0
    80024d32:	18079363          	bnez	a5,80024eb8 <stateen_AIA_test_5+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024d36:	450d                	li	a0,3
    80024d38:	9d0dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024d3c:	8d0dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024d40:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024d44:	b0adc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024d48:	08200593          	li	a1,130
    80024d4c:	00012617          	auipc	a2,0x12
    80024d50:	c5c60613          	addi	a2,a2,-932 # 800369a8 <__func__.0+0x98f0>
    80024d54:	00008517          	auipc	a0,0x8
    80024d58:	65c50513          	addi	a0,a0,1628 # 8002d3b0 <__func__.0+0x2f8>
    80024d5c:	0fa060ef          	jal	8002ae56 <printf>
    80024d60:	0002f797          	auipc	a5,0x2f
    80024d64:	2b17c783          	lbu	a5,689(a5) # 80054011 <excpt+0x1>
    80024d68:	00008597          	auipc	a1,0x8
    80024d6c:	62058593          	addi	a1,a1,1568 # 8002d388 <__func__.0+0x2d0>
    80024d70:	cf89                	beqz	a5,80024d8a <stateen_AIA_test_5+0x1c8>
    80024d72:	6498                	ld	a4,8(s1)
    80024d74:	4789                	li	a5,2
    80024d76:	00008597          	auipc	a1,0x8
    80024d7a:	60258593          	addi	a1,a1,1538 # 8002d378 <__func__.0+0x2c0>
    80024d7e:	00f70663          	beq	a4,a5,80024d8a <stateen_AIA_test_5+0x1c8>
    80024d82:	00008597          	auipc	a1,0x8
    80024d86:	60658593          	addi	a1,a1,1542 # 8002d388 <__func__.0+0x2d0>
    80024d8a:	00008517          	auipc	a0,0x8
    80024d8e:	63e50513          	addi	a0,a0,1598 # 8002d3c8 <__func__.0+0x310>
    80024d92:	0c4060ef          	jal	8002ae56 <printf>
    80024d96:	0002f797          	auipc	a5,0x2f
    80024d9a:	27b7c783          	lbu	a5,635(a5) # 80054011 <excpt+0x1>
    80024d9e:	c789                	beqz	a5,80024da8 <stateen_AIA_test_5+0x1e6>
    80024da0:	6498                	ld	a4,8(s1)
    80024da2:	4789                	li	a5,2
    80024da4:	00f70c63          	beq	a4,a5,80024dbc <stateen_AIA_test_5+0x1fa>
    80024da8:	00008517          	auipc	a0,0x8
    80024dac:	62850513          	addi	a0,a0,1576 # 8002d3d0 <__func__.0+0x318>
    80024db0:	0a6060ef          	jal	8002ae56 <printf>
    80024db4:	02900513          	li	a0,41
    80024db8:	58d040ef          	jal	80029b44 <putchar>
    80024dbc:	4529                	li	a0,10
    80024dbe:	587040ef          	jal	80029b44 <putchar>
    80024dc2:	c801                	beqz	s0,80024dd2 <stateen_AIA_test_5+0x210>
    80024dc4:	0002f797          	auipc	a5,0x2f
    80024dc8:	24d7c783          	lbu	a5,589(a5) # 80054011 <excpt+0x1>
    80024dcc:	4401                	li	s0,0
    80024dce:	0e079063          	bnez	a5,80024eae <stateen_AIA_test_5+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024dd2:	450d                	li	a0,3
    80024dd4:	934dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024dd8:	834dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024ddc:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024de0:	a6edc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024de4:	08200593          	li	a1,130
    80024de8:	00012617          	auipc	a2,0x12
    80024dec:	c1060613          	addi	a2,a2,-1008 # 800369f8 <__func__.0+0x9940>
    80024df0:	00008517          	auipc	a0,0x8
    80024df4:	5c050513          	addi	a0,a0,1472 # 8002d3b0 <__func__.0+0x2f8>
    80024df8:	05e060ef          	jal	8002ae56 <printf>
    80024dfc:	0002f797          	auipc	a5,0x2f
    80024e00:	2157c783          	lbu	a5,533(a5) # 80054011 <excpt+0x1>
    80024e04:	00008597          	auipc	a1,0x8
    80024e08:	58458593          	addi	a1,a1,1412 # 8002d388 <__func__.0+0x2d0>
    80024e0c:	cf89                	beqz	a5,80024e26 <stateen_AIA_test_5+0x264>
    80024e0e:	6498                	ld	a4,8(s1)
    80024e10:	4789                	li	a5,2
    80024e12:	00008597          	auipc	a1,0x8
    80024e16:	56658593          	addi	a1,a1,1382 # 8002d378 <__func__.0+0x2c0>
    80024e1a:	00f70663          	beq	a4,a5,80024e26 <stateen_AIA_test_5+0x264>
    80024e1e:	00008597          	auipc	a1,0x8
    80024e22:	56a58593          	addi	a1,a1,1386 # 8002d388 <__func__.0+0x2d0>
    80024e26:	00008517          	auipc	a0,0x8
    80024e2a:	5a250513          	addi	a0,a0,1442 # 8002d3c8 <__func__.0+0x310>
    80024e2e:	028060ef          	jal	8002ae56 <printf>
    80024e32:	0002f797          	auipc	a5,0x2f
    80024e36:	1df7c783          	lbu	a5,479(a5) # 80054011 <excpt+0x1>
    80024e3a:	c789                	beqz	a5,80024e44 <stateen_AIA_test_5+0x282>
    80024e3c:	6498                	ld	a4,8(s1)
    80024e3e:	4789                	li	a5,2
    80024e40:	00f70c63          	beq	a4,a5,80024e58 <stateen_AIA_test_5+0x296>
    80024e44:	00008517          	auipc	a0,0x8
    80024e48:	58c50513          	addi	a0,a0,1420 # 8002d3d0 <__func__.0+0x318>
    80024e4c:	00a060ef          	jal	8002ae56 <printf>
    80024e50:	02900513          	li	a0,41
    80024e54:	4f1040ef          	jal	80029b44 <putchar>
    80024e58:	4529                	li	a0,10
    80024e5a:	4eb040ef          	jal	80029b44 <putchar>
    80024e5e:	c015                	beqz	s0,80024e82 <stateen_AIA_test_5+0x2c0>
    80024e60:	0002f417          	auipc	s0,0x2f
    80024e64:	1b144403          	lbu	s0,433(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024e68:	00008597          	auipc	a1,0x8
    80024e6c:	52058593          	addi	a1,a1,1312 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024e70:	cc11                	beqz	s0,80024e8c <stateen_AIA_test_5+0x2ca>
    80024e72:	6498                	ld	a4,8(s1)
    80024e74:	4789                	li	a5,2
    TEST_END();
    80024e76:	00008597          	auipc	a1,0x8
    80024e7a:	50258593          	addi	a1,a1,1282 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024e7e:	00f70763          	beq	a4,a5,80024e8c <stateen_AIA_test_5+0x2ca>
    80024e82:	4401                	li	s0,0
    TEST_END();
    80024e84:	00008597          	auipc	a1,0x8
    80024e88:	50458593          	addi	a1,a1,1284 # 8002d388 <__func__.0+0x2d0>
    80024e8c:	00008517          	auipc	a0,0x8
    80024e90:	5a450513          	addi	a0,a0,1444 # 8002d430 <__func__.0+0x378>
    80024e94:	7c3050ef          	jal	8002ae56 <printf>
    80024e98:	4511                	li	a0,4
    80024e9a:	86edc0ef          	jal	80000f08 <goto_priv>
    80024e9e:	987dc0ef          	jal	80001824 <reset_state>

}
    80024ea2:	60e2                	ld	ra,24(sp)
    80024ea4:	8522                	mv	a0,s0
    80024ea6:	6442                	ld	s0,16(sp)
    80024ea8:	64a2                	ld	s1,8(sp)
    80024eaa:	6105                	addi	sp,sp,32
    80024eac:	8082                	ret
    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024eae:	6480                	ld	s0,8(s1)
    80024eb0:	1479                	addi	s0,s0,-2
    80024eb2:	00143413          	seqz	s0,s0
    80024eb6:	bf31                	j	80024dd2 <stateen_AIA_test_5+0x210>
    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024eb8:	6480                	ld	s0,8(s1)
    80024eba:	1479                	addi	s0,s0,-2
    80024ebc:	00143413          	seqz	s0,s0
    80024ec0:	bd9d                	j	80024d36 <stateen_AIA_test_5+0x174>

0000000080024ec2 <stateen_AIA_test_6>:


bool stateen_AIA_test_6(){
    80024ec2:	1101                	addi	sp,sp,-32

    TEST_START();
    80024ec4:	00008597          	auipc	a1,0x8
    80024ec8:	ebc58593          	addi	a1,a1,-324 # 8002cd80 <__func__.17>
    80024ecc:	00008517          	auipc	a0,0x8
    80024ed0:	4cc50513          	addi	a0,a0,1228 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_6(){
    80024ed4:	ec06                	sd	ra,24(sp)
    80024ed6:	e822                	sd	s0,16(sp)
    80024ed8:	e426                	sd	s1,8(sp)
    TEST_START();
    80024eda:	77d050ef          	jal	8002ae56 <printf>
    80024ede:	4529                	li	a0,10
    80024ee0:	465040ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80024ee4:	4511                	li	a0,4
    80024ee6:	822dc0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1,v=0时,可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024eea:	4785                	li	a5,1
    80024eec:	17ee                	slli	a5,a5,0x3b
    80024eee:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024ef2:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80024ef6:	450d                	li	a0,3
    80024ef8:	810dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024efc:	f11db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024f00:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024f04:	94adc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80024f08:	08200593          	li	a1,130
    80024f0c:	00012617          	auipc	a2,0x12
    80024f10:	b3c60613          	addi	a2,a2,-1220 # 80036a48 <__func__.0+0x9990>
    80024f14:	00008517          	auipc	a0,0x8
    80024f18:	49c50513          	addi	a0,a0,1180 # 8002d3b0 <__func__.0+0x2f8>
    80024f1c:	73b050ef          	jal	8002ae56 <printf>
    80024f20:	0002f797          	auipc	a5,0x2f
    80024f24:	0f17c783          	lbu	a5,241(a5) # 80054011 <excpt+0x1>
    80024f28:	00008597          	auipc	a1,0x8
    80024f2c:	45058593          	addi	a1,a1,1104 # 8002d378 <__func__.0+0x2c0>
    80024f30:	c789                	beqz	a5,80024f3a <stateen_AIA_test_6+0x78>
    80024f32:	00008597          	auipc	a1,0x8
    80024f36:	45658593          	addi	a1,a1,1110 # 8002d388 <__func__.0+0x2d0>
    80024f3a:	00008517          	auipc	a0,0x8
    80024f3e:	48e50513          	addi	a0,a0,1166 # 8002d3c8 <__func__.0+0x310>
    80024f42:	715050ef          	jal	8002ae56 <printf>
    80024f46:	0002f797          	auipc	a5,0x2f
    80024f4a:	0cb7c783          	lbu	a5,203(a5) # 80054011 <excpt+0x1>
    80024f4e:	5e079b63          	bnez	a5,80025544 <stateen_AIA_test_6+0x682>
    80024f52:	4529                	li	a0,10
    80024f54:	3f1040ef          	jal	80029b44 <putchar>
    80024f58:	0002f497          	auipc	s1,0x2f
    80024f5c:	0b94c483          	lbu	s1,185(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_HVICTL);
    80024f60:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024f64:	8eadc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80024f68:	08200593          	li	a1,130
    80024f6c:	00012617          	auipc	a2,0x12
    80024f70:	b2c60613          	addi	a2,a2,-1236 # 80036a98 <__func__.0+0x99e0>
    80024f74:	00008517          	auipc	a0,0x8
    80024f78:	43c50513          	addi	a0,a0,1084 # 8002d3b0 <__func__.0+0x2f8>
    80024f7c:	6db050ef          	jal	8002ae56 <printf>
    80024f80:	0002f797          	auipc	a5,0x2f
    80024f84:	0917c783          	lbu	a5,145(a5) # 80054011 <excpt+0x1>
    80024f88:	00008597          	auipc	a1,0x8
    80024f8c:	40058593          	addi	a1,a1,1024 # 8002d388 <__func__.0+0x2d0>
    80024f90:	e789                	bnez	a5,80024f9a <stateen_AIA_test_6+0xd8>
    80024f92:	00008597          	auipc	a1,0x8
    80024f96:	3e658593          	addi	a1,a1,998 # 8002d378 <__func__.0+0x2c0>
    80024f9a:	00008517          	auipc	a0,0x8
    80024f9e:	42e50513          	addi	a0,a0,1070 # 8002d3c8 <__func__.0+0x310>
    80024fa2:	6b5050ef          	jal	8002ae56 <printf>
    80024fa6:	0002f797          	auipc	a5,0x2f
    80024faa:	06b7c783          	lbu	a5,107(a5) # 80054011 <excpt+0x1>
    80024fae:	58079063          	bnez	a5,8002552e <stateen_AIA_test_6+0x66c>
    80024fb2:	4529                	li	a0,10
    80024fb4:	391040ef          	jal	80029b44 <putchar>
    80024fb8:	4401                	li	s0,0
    80024fba:	e499                	bnez	s1,80024fc8 <stateen_AIA_test_6+0x106>
    80024fbc:	0002f417          	auipc	s0,0x2f
    80024fc0:	05544403          	lbu	s0,85(s0) # 80054011 <excpt+0x1>
    80024fc4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80024fc8:	4505                	li	a0,1
    80024fca:	f3fdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024fce:	e3fdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024fd2:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024fd6:	878dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80024fda:	08200593          	li	a1,130
    80024fde:	00012617          	auipc	a2,0x12
    80024fe2:	b0a60613          	addi	a2,a2,-1270 # 80036ae8 <__func__.0+0x9a30>
    80024fe6:	00008517          	auipc	a0,0x8
    80024fea:	3ca50513          	addi	a0,a0,970 # 8002d3b0 <__func__.0+0x2f8>
    80024fee:	669050ef          	jal	8002ae56 <printf>
    80024ff2:	0002f797          	auipc	a5,0x2f
    80024ff6:	01f7c783          	lbu	a5,31(a5) # 80054011 <excpt+0x1>
    80024ffa:	00008597          	auipc	a1,0x8
    80024ffe:	38e58593          	addi	a1,a1,910 # 8002d388 <__func__.0+0x2d0>
    80025002:	e789                	bnez	a5,8002500c <stateen_AIA_test_6+0x14a>
    80025004:	00008597          	auipc	a1,0x8
    80025008:	37458593          	addi	a1,a1,884 # 8002d378 <__func__.0+0x2c0>
    8002500c:	00008517          	auipc	a0,0x8
    80025010:	3bc50513          	addi	a0,a0,956 # 8002d3c8 <__func__.0+0x310>
    80025014:	643050ef          	jal	8002ae56 <printf>
    80025018:	0002f797          	auipc	a5,0x2f
    8002501c:	ff97c783          	lbu	a5,-7(a5) # 80054011 <excpt+0x1>
    80025020:	4e079c63          	bnez	a5,80025518 <stateen_AIA_test_6+0x656>
    80025024:	4529                	li	a0,10
    80025026:	31f040ef          	jal	80029b44 <putchar>
    8002502a:	c419                	beqz	s0,80025038 <stateen_AIA_test_6+0x176>
    8002502c:	0002f417          	auipc	s0,0x2f
    80025030:	fe544403          	lbu	s0,-27(s0) # 80054011 <excpt+0x1>
    80025034:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025038:	4505                	li	a0,1
    8002503a:	ecfdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002503e:	dcfdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025042:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025046:	808dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    8002504a:	08200593          	li	a1,130
    8002504e:	00012617          	auipc	a2,0x12
    80025052:	aea60613          	addi	a2,a2,-1302 # 80036b38 <__func__.0+0x9a80>
    80025056:	00008517          	auipc	a0,0x8
    8002505a:	35a50513          	addi	a0,a0,858 # 8002d3b0 <__func__.0+0x2f8>
    8002505e:	5f9050ef          	jal	8002ae56 <printf>
    80025062:	0002f797          	auipc	a5,0x2f
    80025066:	faf7c783          	lbu	a5,-81(a5) # 80054011 <excpt+0x1>
    8002506a:	00008597          	auipc	a1,0x8
    8002506e:	31e58593          	addi	a1,a1,798 # 8002d388 <__func__.0+0x2d0>
    80025072:	e789                	bnez	a5,8002507c <stateen_AIA_test_6+0x1ba>
    80025074:	00008597          	auipc	a1,0x8
    80025078:	30458593          	addi	a1,a1,772 # 8002d378 <__func__.0+0x2c0>
    8002507c:	00008517          	auipc	a0,0x8
    80025080:	34c50513          	addi	a0,a0,844 # 8002d3c8 <__func__.0+0x310>
    80025084:	5d3050ef          	jal	8002ae56 <printf>
    80025088:	0002f797          	auipc	a5,0x2f
    8002508c:	f897c783          	lbu	a5,-119(a5) # 80054011 <excpt+0x1>
    80025090:	46079963          	bnez	a5,80025502 <stateen_AIA_test_6+0x640>
    80025094:	4529                	li	a0,10
    80025096:	2af040ef          	jal	80029b44 <putchar>
    8002509a:	c419                	beqz	s0,800250a8 <stateen_AIA_test_6+0x1e6>
    8002509c:	0002f417          	auipc	s0,0x2f
    800250a0:	f7544403          	lbu	s0,-139(s0) # 80054011 <excpt+0x1>
    800250a4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800250a8:	4511                	li	a0,4
    800250aa:	e5fdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800250ae:	d5fdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800250b2:	608027f3          	csrr	a5,hvien

    excpt_info();
    800250b6:	f99db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800250ba:	08200593          	li	a1,130
    800250be:	00012617          	auipc	a2,0x12
    800250c2:	aca60613          	addi	a2,a2,-1334 # 80036b88 <__func__.0+0x9ad0>
    800250c6:	00008517          	auipc	a0,0x8
    800250ca:	2ea50513          	addi	a0,a0,746 # 8002d3b0 <__func__.0+0x2f8>
    800250ce:	589050ef          	jal	8002ae56 <printf>
    800250d2:	0002f797          	auipc	a5,0x2f
    800250d6:	f3f7c783          	lbu	a5,-193(a5) # 80054011 <excpt+0x1>
    800250da:	00008597          	auipc	a1,0x8
    800250de:	2ae58593          	addi	a1,a1,686 # 8002d388 <__func__.0+0x2d0>
    800250e2:	e789                	bnez	a5,800250ec <stateen_AIA_test_6+0x22a>
    800250e4:	00008597          	auipc	a1,0x8
    800250e8:	29458593          	addi	a1,a1,660 # 8002d378 <__func__.0+0x2c0>
    800250ec:	00008517          	auipc	a0,0x8
    800250f0:	2dc50513          	addi	a0,a0,732 # 8002d3c8 <__func__.0+0x310>
    800250f4:	563050ef          	jal	8002ae56 <printf>
    800250f8:	0002f797          	auipc	a5,0x2f
    800250fc:	f197c783          	lbu	a5,-231(a5) # 80054011 <excpt+0x1>
    80025100:	3e079663          	bnez	a5,800254ec <stateen_AIA_test_6+0x62a>
    80025104:	4529                	li	a0,10
    80025106:	23f040ef          	jal	80029b44 <putchar>
    8002510a:	c419                	beqz	s0,80025118 <stateen_AIA_test_6+0x256>
    8002510c:	0002f417          	auipc	s0,0x2f
    80025110:	f0544403          	lbu	s0,-251(s0) # 80054011 <excpt+0x1>
    80025114:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025118:	4511                	li	a0,4
    8002511a:	defdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002511e:	cefdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025122:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025126:	f29db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    8002512a:	08200593          	li	a1,130
    8002512e:	00012617          	auipc	a2,0x12
    80025132:	aaa60613          	addi	a2,a2,-1366 # 80036bd8 <__func__.0+0x9b20>
    80025136:	00008517          	auipc	a0,0x8
    8002513a:	27a50513          	addi	a0,a0,634 # 8002d3b0 <__func__.0+0x2f8>
    8002513e:	519050ef          	jal	8002ae56 <printf>
    80025142:	0002f797          	auipc	a5,0x2f
    80025146:	ecf7c783          	lbu	a5,-305(a5) # 80054011 <excpt+0x1>
    8002514a:	00008597          	auipc	a1,0x8
    8002514e:	23e58593          	addi	a1,a1,574 # 8002d388 <__func__.0+0x2d0>
    80025152:	e789                	bnez	a5,8002515c <stateen_AIA_test_6+0x29a>
    80025154:	00008597          	auipc	a1,0x8
    80025158:	22458593          	addi	a1,a1,548 # 8002d378 <__func__.0+0x2c0>
    8002515c:	00008517          	auipc	a0,0x8
    80025160:	26c50513          	addi	a0,a0,620 # 8002d3c8 <__func__.0+0x310>
    80025164:	4f3050ef          	jal	8002ae56 <printf>
    80025168:	0002f797          	auipc	a5,0x2f
    8002516c:	ea97c783          	lbu	a5,-343(a5) # 80054011 <excpt+0x1>
    80025170:	36079363          	bnez	a5,800254d6 <stateen_AIA_test_6+0x614>
    80025174:	4529                	li	a0,10
    80025176:	1cf040ef          	jal	80029b44 <putchar>
    8002517a:	c419                	beqz	s0,80025188 <stateen_AIA_test_6+0x2c6>
    8002517c:	0002f417          	auipc	s0,0x2f
    80025180:	e9544403          	lbu	s0,-363(s0) # 80054011 <excpt+0x1>
    80025184:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025188:	450d                	li	a0,3
    8002518a:	d7fdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002518e:	c7fdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025192:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025196:	eb9db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    8002519a:	08200593          	li	a1,130
    8002519e:	00012617          	auipc	a2,0x12
    800251a2:	a8a60613          	addi	a2,a2,-1398 # 80036c28 <__func__.0+0x9b70>
    800251a6:	00008517          	auipc	a0,0x8
    800251aa:	20a50513          	addi	a0,a0,522 # 8002d3b0 <__func__.0+0x2f8>
    800251ae:	4a9050ef          	jal	8002ae56 <printf>
    800251b2:	0002f797          	auipc	a5,0x2f
    800251b6:	e5f7c783          	lbu	a5,-417(a5) # 80054011 <excpt+0x1>
    800251ba:	00008597          	auipc	a1,0x8
    800251be:	1ce58593          	addi	a1,a1,462 # 8002d388 <__func__.0+0x2d0>
    800251c2:	e789                	bnez	a5,800251cc <stateen_AIA_test_6+0x30a>
    800251c4:	00008597          	auipc	a1,0x8
    800251c8:	1b458593          	addi	a1,a1,436 # 8002d378 <__func__.0+0x2c0>
    800251cc:	00008517          	auipc	a0,0x8
    800251d0:	1fc50513          	addi	a0,a0,508 # 8002d3c8 <__func__.0+0x310>
    800251d4:	483050ef          	jal	8002ae56 <printf>
    800251d8:	0002f797          	auipc	a5,0x2f
    800251dc:	e397c783          	lbu	a5,-455(a5) # 80054011 <excpt+0x1>
    800251e0:	2e079063          	bnez	a5,800254c0 <stateen_AIA_test_6+0x5fe>
    800251e4:	4529                	li	a0,10
    800251e6:	15f040ef          	jal	80029b44 <putchar>
    800251ea:	c419                	beqz	s0,800251f8 <stateen_AIA_test_6+0x336>
    800251ec:	0002f417          	auipc	s0,0x2f
    800251f0:	e2544403          	lbu	s0,-475(s0) # 80054011 <excpt+0x1>
    800251f4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPI);
    800251f8:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800251fc:	e53db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    80025200:	08200593          	li	a1,130
    80025204:	00012617          	auipc	a2,0x12
    80025208:	a7460613          	addi	a2,a2,-1420 # 80036c78 <__func__.0+0x9bc0>
    8002520c:	00008517          	auipc	a0,0x8
    80025210:	1a450513          	addi	a0,a0,420 # 8002d3b0 <__func__.0+0x2f8>
    80025214:	443050ef          	jal	8002ae56 <printf>
    80025218:	0002f797          	auipc	a5,0x2f
    8002521c:	df97c783          	lbu	a5,-519(a5) # 80054011 <excpt+0x1>
    80025220:	00008597          	auipc	a1,0x8
    80025224:	16858593          	addi	a1,a1,360 # 8002d388 <__func__.0+0x2d0>
    80025228:	e789                	bnez	a5,80025232 <stateen_AIA_test_6+0x370>
    8002522a:	00008597          	auipc	a1,0x8
    8002522e:	14e58593          	addi	a1,a1,334 # 8002d378 <__func__.0+0x2c0>
    80025232:	00008517          	auipc	a0,0x8
    80025236:	19650513          	addi	a0,a0,406 # 8002d3c8 <__func__.0+0x310>
    8002523a:	41d050ef          	jal	8002ae56 <printf>
    8002523e:	0002f797          	auipc	a5,0x2f
    80025242:	dd37c783          	lbu	a5,-557(a5) # 80054011 <excpt+0x1>
    80025246:	26079263          	bnez	a5,800254aa <stateen_AIA_test_6+0x5e8>
    8002524a:	4529                	li	a0,10
    8002524c:	0f9040ef          	jal	80029b44 <putchar>
    80025250:	c419                	beqz	s0,8002525e <stateen_AIA_test_6+0x39c>
    80025252:	0002f417          	auipc	s0,0x2f
    80025256:	dbf44403          	lbu	s0,-577(s0) # 80054011 <excpt+0x1>
    8002525a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    8002525e:	4505                	li	a0,1
    80025260:	ca9db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025264:	ba9db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025268:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002526c:	de3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025270:	08200593          	li	a1,130
    80025274:	00012617          	auipc	a2,0x12
    80025278:	a5460613          	addi	a2,a2,-1452 # 80036cc8 <__func__.0+0x9c10>
    8002527c:	00008517          	auipc	a0,0x8
    80025280:	13450513          	addi	a0,a0,308 # 8002d3b0 <__func__.0+0x2f8>
    80025284:	3d3050ef          	jal	8002ae56 <printf>
    80025288:	0002f797          	auipc	a5,0x2f
    8002528c:	d897c783          	lbu	a5,-631(a5) # 80054011 <excpt+0x1>
    80025290:	00008597          	auipc	a1,0x8
    80025294:	0f858593          	addi	a1,a1,248 # 8002d388 <__func__.0+0x2d0>
    80025298:	e789                	bnez	a5,800252a2 <stateen_AIA_test_6+0x3e0>
    8002529a:	00008597          	auipc	a1,0x8
    8002529e:	0de58593          	addi	a1,a1,222 # 8002d378 <__func__.0+0x2c0>
    800252a2:	00008517          	auipc	a0,0x8
    800252a6:	12650513          	addi	a0,a0,294 # 8002d3c8 <__func__.0+0x310>
    800252aa:	3ad050ef          	jal	8002ae56 <printf>
    800252ae:	0002f797          	auipc	a5,0x2f
    800252b2:	d637c783          	lbu	a5,-669(a5) # 80054011 <excpt+0x1>
    800252b6:	1c079f63          	bnez	a5,80025494 <stateen_AIA_test_6+0x5d2>
    800252ba:	4529                	li	a0,10
    800252bc:	089040ef          	jal	80029b44 <putchar>
    800252c0:	c419                	beqz	s0,800252ce <stateen_AIA_test_6+0x40c>
    800252c2:	0002f417          	auipc	s0,0x2f
    800252c6:	d4f44403          	lbu	s0,-689(s0) # 80054011 <excpt+0x1>
    800252ca:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800252ce:	4505                	li	a0,1
    800252d0:	c39db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800252d4:	b39db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800252d8:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800252dc:	d73db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800252e0:	08200593          	li	a1,130
    800252e4:	00012617          	auipc	a2,0x12
    800252e8:	a3460613          	addi	a2,a2,-1484 # 80036d18 <__func__.0+0x9c60>
    800252ec:	00008517          	auipc	a0,0x8
    800252f0:	0c450513          	addi	a0,a0,196 # 8002d3b0 <__func__.0+0x2f8>
    800252f4:	363050ef          	jal	8002ae56 <printf>
    800252f8:	0002f797          	auipc	a5,0x2f
    800252fc:	d197c783          	lbu	a5,-743(a5) # 80054011 <excpt+0x1>
    80025300:	00008597          	auipc	a1,0x8
    80025304:	08858593          	addi	a1,a1,136 # 8002d388 <__func__.0+0x2d0>
    80025308:	e789                	bnez	a5,80025312 <stateen_AIA_test_6+0x450>
    8002530a:	00008597          	auipc	a1,0x8
    8002530e:	06e58593          	addi	a1,a1,110 # 8002d378 <__func__.0+0x2c0>
    80025312:	00008517          	auipc	a0,0x8
    80025316:	0b650513          	addi	a0,a0,182 # 8002d3c8 <__func__.0+0x310>
    8002531a:	33d050ef          	jal	8002ae56 <printf>
    8002531e:	0002f797          	auipc	a5,0x2f
    80025322:	cf37c783          	lbu	a5,-781(a5) # 80054011 <excpt+0x1>
    80025326:	14079c63          	bnez	a5,8002547e <stateen_AIA_test_6+0x5bc>
    8002532a:	4529                	li	a0,10
    8002532c:	019040ef          	jal	80029b44 <putchar>
    80025330:	c419                	beqz	s0,8002533e <stateen_AIA_test_6+0x47c>
    80025332:	0002f417          	auipc	s0,0x2f
    80025336:	cdf44403          	lbu	s0,-801(s0) # 80054011 <excpt+0x1>
    8002533a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    8002533e:	4511                	li	a0,4
    80025340:	bc9db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025344:	ac9db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025348:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002534c:	d03db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025350:	08200593          	li	a1,130
    80025354:	00012617          	auipc	a2,0x12
    80025358:	a1460613          	addi	a2,a2,-1516 # 80036d68 <__func__.0+0x9cb0>
    8002535c:	00008517          	auipc	a0,0x8
    80025360:	05450513          	addi	a0,a0,84 # 8002d3b0 <__func__.0+0x2f8>
    80025364:	2f3050ef          	jal	8002ae56 <printf>
    80025368:	0002f797          	auipc	a5,0x2f
    8002536c:	ca97c783          	lbu	a5,-855(a5) # 80054011 <excpt+0x1>
    80025370:	00008597          	auipc	a1,0x8
    80025374:	01858593          	addi	a1,a1,24 # 8002d388 <__func__.0+0x2d0>
    80025378:	e789                	bnez	a5,80025382 <stateen_AIA_test_6+0x4c0>
    8002537a:	00008597          	auipc	a1,0x8
    8002537e:	ffe58593          	addi	a1,a1,-2 # 8002d378 <__func__.0+0x2c0>
    80025382:	00008517          	auipc	a0,0x8
    80025386:	04650513          	addi	a0,a0,70 # 8002d3c8 <__func__.0+0x310>
    8002538a:	2cd050ef          	jal	8002ae56 <printf>
    8002538e:	0002f797          	auipc	a5,0x2f
    80025392:	c837c783          	lbu	a5,-893(a5) # 80054011 <excpt+0x1>
    80025396:	0c079963          	bnez	a5,80025468 <stateen_AIA_test_6+0x5a6>
    8002539a:	4529                	li	a0,10
    8002539c:	7a8040ef          	jal	80029b44 <putchar>
    800253a0:	c419                	beqz	s0,800253ae <stateen_AIA_test_6+0x4ec>
    800253a2:	0002f417          	auipc	s0,0x2f
    800253a6:	c6f44403          	lbu	s0,-913(s0) # 80054011 <excpt+0x1>
    800253aa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800253ae:	4511                	li	a0,4
    800253b0:	b59db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800253b4:	a59db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800253b8:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800253bc:	c93db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253c0:	08200593          	li	a1,130
    800253c4:	00012617          	auipc	a2,0x12
    800253c8:	9f460613          	addi	a2,a2,-1548 # 80036db8 <__func__.0+0x9d00>
    800253cc:	00008517          	auipc	a0,0x8
    800253d0:	fe450513          	addi	a0,a0,-28 # 8002d3b0 <__func__.0+0x2f8>
    800253d4:	283050ef          	jal	8002ae56 <printf>
    800253d8:	0002f797          	auipc	a5,0x2f
    800253dc:	c397c783          	lbu	a5,-967(a5) # 80054011 <excpt+0x1>
    800253e0:	00008597          	auipc	a1,0x8
    800253e4:	fa858593          	addi	a1,a1,-88 # 8002d388 <__func__.0+0x2d0>
    800253e8:	e789                	bnez	a5,800253f2 <stateen_AIA_test_6+0x530>
    800253ea:	00008597          	auipc	a1,0x8
    800253ee:	f8e58593          	addi	a1,a1,-114 # 8002d378 <__func__.0+0x2c0>
    800253f2:	00008517          	auipc	a0,0x8
    800253f6:	fd650513          	addi	a0,a0,-42 # 8002d3c8 <__func__.0+0x310>
    800253fa:	25d050ef          	jal	8002ae56 <printf>
    800253fe:	0002f797          	auipc	a5,0x2f
    80025402:	c137c783          	lbu	a5,-1005(a5) # 80054011 <excpt+0x1>
    80025406:	e7b1                	bnez	a5,80025452 <stateen_AIA_test_6+0x590>
    80025408:	4529                	li	a0,10
    8002540a:	73a040ef          	jal	80029b44 <putchar>
    8002540e:	c411                	beqz	s0,8002541a <stateen_AIA_test_6+0x558>
    80025410:	0002f797          	auipc	a5,0x2f
    80025414:	c017c783          	lbu	a5,-1023(a5) # 80054011 <excpt+0x1>
    80025418:	c79d                	beqz	a5,80025446 <stateen_AIA_test_6+0x584>
    8002541a:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8002541c:	00008597          	auipc	a1,0x8
    80025420:	f6c58593          	addi	a1,a1,-148 # 8002d388 <__func__.0+0x2d0>
    80025424:	00008517          	auipc	a0,0x8
    80025428:	00c50513          	addi	a0,a0,12 # 8002d430 <__func__.0+0x378>
    8002542c:	22b050ef          	jal	8002ae56 <printf>
    80025430:	4511                	li	a0,4
    80025432:	ad7db0ef          	jal	80000f08 <goto_priv>
    80025436:	beedc0ef          	jal	80001824 <reset_state>

}
    8002543a:	60e2                	ld	ra,24(sp)
    8002543c:	8522                	mv	a0,s0
    8002543e:	6442                	ld	s0,16(sp)
    80025440:	64a2                	ld	s1,8(sp)
    80025442:	6105                	addi	sp,sp,32
    80025444:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025446:	4405                	li	s0,1
    TEST_END();
    80025448:	00008597          	auipc	a1,0x8
    8002544c:	f3058593          	addi	a1,a1,-208 # 8002d378 <__func__.0+0x2c0>
    80025450:	bfd1                	j	80025424 <stateen_AIA_test_6+0x562>
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025452:	00008517          	auipc	a0,0x8
    80025456:	f7e50513          	addi	a0,a0,-130 # 8002d3d0 <__func__.0+0x318>
    8002545a:	1fd050ef          	jal	8002ae56 <printf>
    8002545e:	02900513          	li	a0,41
    80025462:	6e2040ef          	jal	80029b44 <putchar>
    80025466:	b74d                	j	80025408 <stateen_AIA_test_6+0x546>
    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025468:	00008517          	auipc	a0,0x8
    8002546c:	f6850513          	addi	a0,a0,-152 # 8002d3d0 <__func__.0+0x318>
    80025470:	1e7050ef          	jal	8002ae56 <printf>
    80025474:	02900513          	li	a0,41
    80025478:	6cc040ef          	jal	80029b44 <putchar>
    8002547c:	bf39                	j	8002539a <stateen_AIA_test_6+0x4d8>
    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002547e:	00008517          	auipc	a0,0x8
    80025482:	f5250513          	addi	a0,a0,-174 # 8002d3d0 <__func__.0+0x318>
    80025486:	1d1050ef          	jal	8002ae56 <printf>
    8002548a:	02900513          	li	a0,41
    8002548e:	6b6040ef          	jal	80029b44 <putchar>
    80025492:	bd61                	j	8002532a <stateen_AIA_test_6+0x468>
    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025494:	00008517          	auipc	a0,0x8
    80025498:	f3c50513          	addi	a0,a0,-196 # 8002d3d0 <__func__.0+0x318>
    8002549c:	1bb050ef          	jal	8002ae56 <printf>
    800254a0:	02900513          	li	a0,41
    800254a4:	6a0040ef          	jal	80029b44 <putchar>
    800254a8:	bd09                	j	800252ba <stateen_AIA_test_6+0x3f8>
    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800254aa:	00008517          	auipc	a0,0x8
    800254ae:	f2650513          	addi	a0,a0,-218 # 8002d3d0 <__func__.0+0x318>
    800254b2:	1a5050ef          	jal	8002ae56 <printf>
    800254b6:	02900513          	li	a0,41
    800254ba:	68a040ef          	jal	80029b44 <putchar>
    800254be:	b371                	j	8002524a <stateen_AIA_test_6+0x388>
    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800254c0:	00008517          	auipc	a0,0x8
    800254c4:	f1050513          	addi	a0,a0,-240 # 8002d3d0 <__func__.0+0x318>
    800254c8:	18f050ef          	jal	8002ae56 <printf>
    800254cc:	02900513          	li	a0,41
    800254d0:	674040ef          	jal	80029b44 <putchar>
    800254d4:	bb01                	j	800251e4 <stateen_AIA_test_6+0x322>
    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    800254d6:	00008517          	auipc	a0,0x8
    800254da:	efa50513          	addi	a0,a0,-262 # 8002d3d0 <__func__.0+0x318>
    800254de:	179050ef          	jal	8002ae56 <printf>
    800254e2:	02900513          	li	a0,41
    800254e6:	65e040ef          	jal	80029b44 <putchar>
    800254ea:	b169                	j	80025174 <stateen_AIA_test_6+0x2b2>
    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800254ec:	00008517          	auipc	a0,0x8
    800254f0:	ee450513          	addi	a0,a0,-284 # 8002d3d0 <__func__.0+0x318>
    800254f4:	163050ef          	jal	8002ae56 <printf>
    800254f8:	02900513          	li	a0,41
    800254fc:	648040ef          	jal	80029b44 <putchar>
    80025500:	b111                	j	80025104 <stateen_AIA_test_6+0x242>
    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025502:	00008517          	auipc	a0,0x8
    80025506:	ece50513          	addi	a0,a0,-306 # 8002d3d0 <__func__.0+0x318>
    8002550a:	14d050ef          	jal	8002ae56 <printf>
    8002550e:	02900513          	li	a0,41
    80025512:	632040ef          	jal	80029b44 <putchar>
    80025516:	bebd                	j	80025094 <stateen_AIA_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025518:	00008517          	auipc	a0,0x8
    8002551c:	eb850513          	addi	a0,a0,-328 # 8002d3d0 <__func__.0+0x318>
    80025520:	137050ef          	jal	8002ae56 <printf>
    80025524:	02900513          	li	a0,41
    80025528:	61c040ef          	jal	80029b44 <putchar>
    8002552c:	bce5                	j	80025024 <stateen_AIA_test_6+0x162>
    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    8002552e:	00008517          	auipc	a0,0x8
    80025532:	ea250513          	addi	a0,a0,-350 # 8002d3d0 <__func__.0+0x318>
    80025536:	121050ef          	jal	8002ae56 <printf>
    8002553a:	02900513          	li	a0,41
    8002553e:	606040ef          	jal	80029b44 <putchar>
    80025542:	bc85                	j	80024fb2 <stateen_AIA_test_6+0xf0>
    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80025544:	00008517          	auipc	a0,0x8
    80025548:	e8c50513          	addi	a0,a0,-372 # 8002d3d0 <__func__.0+0x318>
    8002554c:	10b050ef          	jal	8002ae56 <printf>
    80025550:	02900513          	li	a0,41
    80025554:	5f0040ef          	jal	80029b44 <putchar>
    80025558:	baed                	j	80024f52 <stateen_AIA_test_6+0x90>

000000008002555a <stateen_AIA_test_7>:


bool stateen_AIA_test_7(){
    8002555a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002555c:	00008597          	auipc	a1,0x8
    80025560:	83c58593          	addi	a1,a1,-1988 # 8002cd98 <__func__.16>
    80025564:	00008517          	auipc	a0,0x8
    80025568:	e3450513          	addi	a0,a0,-460 # 8002d398 <__func__.0+0x2e0>
bool stateen_AIA_test_7(){
    8002556c:	ec06                	sd	ra,24(sp)
    8002556e:	e822                	sd	s0,16(sp)
    80025570:	e426                	sd	s1,8(sp)
    TEST_START();
    80025572:	0e5050ef          	jal	8002ae56 <printf>
    80025576:	4529                	li	a0,10
    80025578:	5cc040ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002557c:	4511                	li	a0,4
    8002557e:	98bdb0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1 hstateen.AIA=1,v=1 时可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80025582:	4785                	li	a5,1
    80025584:	17ee                	slli	a5,a5,0x3b
    80025586:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_AIA);
    8002558a:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    8002558e:	4509                	li	a0,2
    80025590:	979db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025594:	879db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025598:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002559c:	ab3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800255a0:	08200593          	li	a1,130
    800255a4:	00012617          	auipc	a2,0x12
    800255a8:	86460613          	addi	a2,a2,-1948 # 80036e08 <__func__.0+0x9d50>
    800255ac:	00008517          	auipc	a0,0x8
    800255b0:	e0450513          	addi	a0,a0,-508 # 8002d3b0 <__func__.0+0x2f8>
    800255b4:	0a3050ef          	jal	8002ae56 <printf>
    800255b8:	0002f797          	auipc	a5,0x2f
    800255bc:	a597c783          	lbu	a5,-1447(a5) # 80054011 <excpt+0x1>
    800255c0:	00008597          	auipc	a1,0x8
    800255c4:	db858593          	addi	a1,a1,-584 # 8002d378 <__func__.0+0x2c0>
    800255c8:	c789                	beqz	a5,800255d2 <stateen_AIA_test_7+0x78>
    800255ca:	00008597          	auipc	a1,0x8
    800255ce:	dbe58593          	addi	a1,a1,-578 # 8002d388 <__func__.0+0x2d0>
    800255d2:	00008517          	auipc	a0,0x8
    800255d6:	df650513          	addi	a0,a0,-522 # 8002d3c8 <__func__.0+0x310>
    800255da:	07d050ef          	jal	8002ae56 <printf>
    800255de:	0002f797          	auipc	a5,0x2f
    800255e2:	a337c783          	lbu	a5,-1485(a5) # 80054011 <excpt+0x1>
    800255e6:	3e079963          	bnez	a5,800259d8 <stateen_AIA_test_7+0x47e>
    800255ea:	4529                	li	a0,10
    800255ec:	558040ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800255f0:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800255f2:	0002f497          	auipc	s1,0x2f
    800255f6:	a1f4c483          	lbu	s1,-1505(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VS);
    800255fa:	90fdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800255fe:	80fdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025602:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025606:	a49db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    8002560a:	08200593          	li	a1,130
    8002560e:	00012617          	auipc	a2,0x12
    80025612:	84a60613          	addi	a2,a2,-1974 # 80036e58 <__func__.0+0x9da0>
    80025616:	00008517          	auipc	a0,0x8
    8002561a:	d9a50513          	addi	a0,a0,-614 # 8002d3b0 <__func__.0+0x2f8>
    8002561e:	039050ef          	jal	8002ae56 <printf>
    80025622:	0002f797          	auipc	a5,0x2f
    80025626:	9ef7c783          	lbu	a5,-1553(a5) # 80054011 <excpt+0x1>
    8002562a:	00008597          	auipc	a1,0x8
    8002562e:	d5e58593          	addi	a1,a1,-674 # 8002d388 <__func__.0+0x2d0>
    80025632:	e789                	bnez	a5,8002563c <stateen_AIA_test_7+0xe2>
    80025634:	00008597          	auipc	a1,0x8
    80025638:	d4458593          	addi	a1,a1,-700 # 8002d378 <__func__.0+0x2c0>
    8002563c:	00008517          	auipc	a0,0x8
    80025640:	d8c50513          	addi	a0,a0,-628 # 8002d3c8 <__func__.0+0x310>
    80025644:	013050ef          	jal	8002ae56 <printf>
    80025648:	0002f797          	auipc	a5,0x2f
    8002564c:	9c97c783          	lbu	a5,-1591(a5) # 80054011 <excpt+0x1>
    80025650:	36079963          	bnez	a5,800259c2 <stateen_AIA_test_7+0x468>
    80025654:	4529                	li	a0,10
    80025656:	4ee040ef          	jal	80029b44 <putchar>
    8002565a:	4401                	li	s0,0
    8002565c:	e499                	bnez	s1,8002566a <stateen_AIA_test_7+0x110>
    8002565e:	0002f417          	auipc	s0,0x2f
    80025662:	9b344403          	lbu	s0,-1613(s0) # 80054011 <excpt+0x1>
    80025666:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    8002566a:	4501                	li	a0,0
    8002566c:	89ddb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025670:	f9cdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025674:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025678:	9d7db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    8002567c:	08200593          	li	a1,130
    80025680:	00012617          	auipc	a2,0x12
    80025684:	82860613          	addi	a2,a2,-2008 # 80036ea8 <__func__.0+0x9df0>
    80025688:	00008517          	auipc	a0,0x8
    8002568c:	d2850513          	addi	a0,a0,-728 # 8002d3b0 <__func__.0+0x2f8>
    80025690:	7c6050ef          	jal	8002ae56 <printf>
    80025694:	0002f797          	auipc	a5,0x2f
    80025698:	97d7c783          	lbu	a5,-1667(a5) # 80054011 <excpt+0x1>
    8002569c:	00008597          	auipc	a1,0x8
    800256a0:	cec58593          	addi	a1,a1,-788 # 8002d388 <__func__.0+0x2d0>
    800256a4:	e789                	bnez	a5,800256ae <stateen_AIA_test_7+0x154>
    800256a6:	00008597          	auipc	a1,0x8
    800256aa:	cd258593          	addi	a1,a1,-814 # 8002d378 <__func__.0+0x2c0>
    800256ae:	00008517          	auipc	a0,0x8
    800256b2:	d1a50513          	addi	a0,a0,-742 # 8002d3c8 <__func__.0+0x310>
    800256b6:	7a0050ef          	jal	8002ae56 <printf>
    800256ba:	0002f797          	auipc	a5,0x2f
    800256be:	9577c783          	lbu	a5,-1705(a5) # 80054011 <excpt+0x1>
    800256c2:	2e079563          	bnez	a5,800259ac <stateen_AIA_test_7+0x452>
    800256c6:	4529                	li	a0,10
    800256c8:	47c040ef          	jal	80029b44 <putchar>
    800256cc:	c419                	beqz	s0,800256da <stateen_AIA_test_7+0x180>
    800256ce:	0002f417          	auipc	s0,0x2f
    800256d2:	94344403          	lbu	s0,-1725(s0) # 80054011 <excpt+0x1>
    800256d6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    800256da:	4501                	li	a0,0
    800256dc:	82ddb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800256e0:	f2cdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800256e4:	608027f3          	csrr	a5,hvien

    excpt_info();
    800256e8:	967db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    800256ec:	08200593          	li	a1,130
    800256f0:	00012617          	auipc	a2,0x12
    800256f4:	80860613          	addi	a2,a2,-2040 # 80036ef8 <__func__.0+0x9e40>
    800256f8:	00008517          	auipc	a0,0x8
    800256fc:	cb850513          	addi	a0,a0,-840 # 8002d3b0 <__func__.0+0x2f8>
    80025700:	756050ef          	jal	8002ae56 <printf>
    80025704:	0002f797          	auipc	a5,0x2f
    80025708:	90d7c783          	lbu	a5,-1779(a5) # 80054011 <excpt+0x1>
    8002570c:	00008597          	auipc	a1,0x8
    80025710:	c7c58593          	addi	a1,a1,-900 # 8002d388 <__func__.0+0x2d0>
    80025714:	e789                	bnez	a5,8002571e <stateen_AIA_test_7+0x1c4>
    80025716:	00008597          	auipc	a1,0x8
    8002571a:	c6258593          	addi	a1,a1,-926 # 8002d378 <__func__.0+0x2c0>
    8002571e:	00008517          	auipc	a0,0x8
    80025722:	caa50513          	addi	a0,a0,-854 # 8002d3c8 <__func__.0+0x310>
    80025726:	730050ef          	jal	8002ae56 <printf>
    8002572a:	0002f797          	auipc	a5,0x2f
    8002572e:	8e77c783          	lbu	a5,-1817(a5) # 80054011 <excpt+0x1>
    80025732:	26079263          	bnez	a5,80025996 <stateen_AIA_test_7+0x43c>
    80025736:	4529                	li	a0,10
    80025738:	40c040ef          	jal	80029b44 <putchar>
    8002573c:	c419                	beqz	s0,8002574a <stateen_AIA_test_7+0x1f0>
    8002573e:	0002f417          	auipc	s0,0x2f
    80025742:	8d344403          	lbu	s0,-1837(s0) # 80054011 <excpt+0x1>
    80025746:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    8002574a:	4509                	li	a0,2
    8002574c:	fbcdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025750:	ebcdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025754:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025758:	8f7db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002575c:	08200593          	li	a1,130
    80025760:	00011617          	auipc	a2,0x11
    80025764:	7e860613          	addi	a2,a2,2024 # 80036f48 <__func__.0+0x9e90>
    80025768:	00008517          	auipc	a0,0x8
    8002576c:	c4850513          	addi	a0,a0,-952 # 8002d3b0 <__func__.0+0x2f8>
    80025770:	6e6050ef          	jal	8002ae56 <printf>
    80025774:	0002f797          	auipc	a5,0x2f
    80025778:	89d7c783          	lbu	a5,-1891(a5) # 80054011 <excpt+0x1>
    8002577c:	00008597          	auipc	a1,0x8
    80025780:	c0c58593          	addi	a1,a1,-1012 # 8002d388 <__func__.0+0x2d0>
    80025784:	e789                	bnez	a5,8002578e <stateen_AIA_test_7+0x234>
    80025786:	00008597          	auipc	a1,0x8
    8002578a:	bf258593          	addi	a1,a1,-1038 # 8002d378 <__func__.0+0x2c0>
    8002578e:	00008517          	auipc	a0,0x8
    80025792:	c3a50513          	addi	a0,a0,-966 # 8002d3c8 <__func__.0+0x310>
    80025796:	6c0050ef          	jal	8002ae56 <printf>
    8002579a:	0002f797          	auipc	a5,0x2f
    8002579e:	8777c783          	lbu	a5,-1929(a5) # 80054011 <excpt+0x1>
    800257a2:	1c079f63          	bnez	a5,80025980 <stateen_AIA_test_7+0x426>
    800257a6:	4529                	li	a0,10
    800257a8:	39c040ef          	jal	80029b44 <putchar>
    800257ac:	c419                	beqz	s0,800257ba <stateen_AIA_test_7+0x260>
    800257ae:	0002f417          	auipc	s0,0x2f
    800257b2:	86344403          	lbu	s0,-1949(s0) # 80054011 <excpt+0x1>
    800257b6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800257ba:	4509                	li	a0,2
    800257bc:	f4cdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800257c0:	e4cdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800257c4:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800257c8:	887db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800257cc:	08200593          	li	a1,130
    800257d0:	00011617          	auipc	a2,0x11
    800257d4:	7c860613          	addi	a2,a2,1992 # 80036f98 <__func__.0+0x9ee0>
    800257d8:	00008517          	auipc	a0,0x8
    800257dc:	bd850513          	addi	a0,a0,-1064 # 8002d3b0 <__func__.0+0x2f8>
    800257e0:	676050ef          	jal	8002ae56 <printf>
    800257e4:	0002f797          	auipc	a5,0x2f
    800257e8:	82d7c783          	lbu	a5,-2003(a5) # 80054011 <excpt+0x1>
    800257ec:	00008597          	auipc	a1,0x8
    800257f0:	b9c58593          	addi	a1,a1,-1124 # 8002d388 <__func__.0+0x2d0>
    800257f4:	e789                	bnez	a5,800257fe <stateen_AIA_test_7+0x2a4>
    800257f6:	00008597          	auipc	a1,0x8
    800257fa:	b8258593          	addi	a1,a1,-1150 # 8002d378 <__func__.0+0x2c0>
    800257fe:	00008517          	auipc	a0,0x8
    80025802:	bca50513          	addi	a0,a0,-1078 # 8002d3c8 <__func__.0+0x310>
    80025806:	650050ef          	jal	8002ae56 <printf>
    8002580a:	0002f797          	auipc	a5,0x2f
    8002580e:	8077c783          	lbu	a5,-2041(a5) # 80054011 <excpt+0x1>
    80025812:	14079c63          	bnez	a5,8002596a <stateen_AIA_test_7+0x410>
    80025816:	4529                	li	a0,10
    80025818:	32c040ef          	jal	80029b44 <putchar>
    8002581c:	c419                	beqz	s0,8002582a <stateen_AIA_test_7+0x2d0>
    8002581e:	0002e417          	auipc	s0,0x2e
    80025822:	7f344403          	lbu	s0,2035(s0) # 80054011 <excpt+0x1>
    80025826:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    8002582a:	4501                	li	a0,0
    8002582c:	edcdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025830:	ddcdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025834:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025838:	817db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002583c:	08200593          	li	a1,130
    80025840:	00011617          	auipc	a2,0x11
    80025844:	7a860613          	addi	a2,a2,1960 # 80036fe8 <__func__.0+0x9f30>
    80025848:	00008517          	auipc	a0,0x8
    8002584c:	b6850513          	addi	a0,a0,-1176 # 8002d3b0 <__func__.0+0x2f8>
    80025850:	606050ef          	jal	8002ae56 <printf>
    80025854:	0002e797          	auipc	a5,0x2e
    80025858:	7bd7c783          	lbu	a5,1981(a5) # 80054011 <excpt+0x1>
    8002585c:	00008597          	auipc	a1,0x8
    80025860:	b2c58593          	addi	a1,a1,-1236 # 8002d388 <__func__.0+0x2d0>
    80025864:	e789                	bnez	a5,8002586e <stateen_AIA_test_7+0x314>
    80025866:	00008597          	auipc	a1,0x8
    8002586a:	b1258593          	addi	a1,a1,-1262 # 8002d378 <__func__.0+0x2c0>
    8002586e:	00008517          	auipc	a0,0x8
    80025872:	b5a50513          	addi	a0,a0,-1190 # 8002d3c8 <__func__.0+0x310>
    80025876:	5e0050ef          	jal	8002ae56 <printf>
    8002587a:	0002e797          	auipc	a5,0x2e
    8002587e:	7977c783          	lbu	a5,1943(a5) # 80054011 <excpt+0x1>
    80025882:	0c079963          	bnez	a5,80025954 <stateen_AIA_test_7+0x3fa>
    80025886:	4529                	li	a0,10
    80025888:	2bc040ef          	jal	80029b44 <putchar>
    8002588c:	c419                	beqz	s0,8002589a <stateen_AIA_test_7+0x340>
    8002588e:	0002e417          	auipc	s0,0x2e
    80025892:	78344403          	lbu	s0,1923(s0) # 80054011 <excpt+0x1>
    80025896:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    8002589a:	4501                	li	a0,0
    8002589c:	e6cdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800258a0:	d6cdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800258a4:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800258a8:	fa6db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258ac:	08200593          	li	a1,130
    800258b0:	00011617          	auipc	a2,0x11
    800258b4:	78860613          	addi	a2,a2,1928 # 80037038 <__func__.0+0x9f80>
    800258b8:	00008517          	auipc	a0,0x8
    800258bc:	af850513          	addi	a0,a0,-1288 # 8002d3b0 <__func__.0+0x2f8>
    800258c0:	596050ef          	jal	8002ae56 <printf>
    800258c4:	0002e797          	auipc	a5,0x2e
    800258c8:	74d7c783          	lbu	a5,1869(a5) # 80054011 <excpt+0x1>
    800258cc:	00008597          	auipc	a1,0x8
    800258d0:	abc58593          	addi	a1,a1,-1348 # 8002d388 <__func__.0+0x2d0>
    800258d4:	e789                	bnez	a5,800258de <stateen_AIA_test_7+0x384>
    800258d6:	00008597          	auipc	a1,0x8
    800258da:	aa258593          	addi	a1,a1,-1374 # 8002d378 <__func__.0+0x2c0>
    800258de:	00008517          	auipc	a0,0x8
    800258e2:	aea50513          	addi	a0,a0,-1302 # 8002d3c8 <__func__.0+0x310>
    800258e6:	570050ef          	jal	8002ae56 <printf>
    800258ea:	0002e797          	auipc	a5,0x2e
    800258ee:	7277c783          	lbu	a5,1831(a5) # 80054011 <excpt+0x1>
    800258f2:	e7b1                	bnez	a5,8002593e <stateen_AIA_test_7+0x3e4>
    800258f4:	4529                	li	a0,10
    800258f6:	24e040ef          	jal	80029b44 <putchar>
    800258fa:	c411                	beqz	s0,80025906 <stateen_AIA_test_7+0x3ac>
    800258fc:	0002e797          	auipc	a5,0x2e
    80025900:	7157c783          	lbu	a5,1813(a5) # 80054011 <excpt+0x1>
    80025904:	c79d                	beqz	a5,80025932 <stateen_AIA_test_7+0x3d8>
    80025906:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025908:	00008597          	auipc	a1,0x8
    8002590c:	a8058593          	addi	a1,a1,-1408 # 8002d388 <__func__.0+0x2d0>
    80025910:	00008517          	auipc	a0,0x8
    80025914:	b2050513          	addi	a0,a0,-1248 # 8002d430 <__func__.0+0x378>
    80025918:	53e050ef          	jal	8002ae56 <printf>
    8002591c:	4511                	li	a0,4
    8002591e:	deadb0ef          	jal	80000f08 <goto_priv>
    80025922:	f03db0ef          	jal	80001824 <reset_state>
}
    80025926:	60e2                	ld	ra,24(sp)
    80025928:	8522                	mv	a0,s0
    8002592a:	6442                	ld	s0,16(sp)
    8002592c:	64a2                	ld	s1,8(sp)
    8002592e:	6105                	addi	sp,sp,32
    80025930:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025932:	4405                	li	s0,1
    TEST_END();
    80025934:	00008597          	auipc	a1,0x8
    80025938:	a4458593          	addi	a1,a1,-1468 # 8002d378 <__func__.0+0x2c0>
    8002593c:	bfd1                	j	80025910 <stateen_AIA_test_7+0x3b6>
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002593e:	00008517          	auipc	a0,0x8
    80025942:	a9250513          	addi	a0,a0,-1390 # 8002d3d0 <__func__.0+0x318>
    80025946:	510050ef          	jal	8002ae56 <printf>
    8002594a:	02900513          	li	a0,41
    8002594e:	1f6040ef          	jal	80029b44 <putchar>
    80025952:	b74d                	j	800258f4 <stateen_AIA_test_7+0x39a>
    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025954:	00008517          	auipc	a0,0x8
    80025958:	a7c50513          	addi	a0,a0,-1412 # 8002d3d0 <__func__.0+0x318>
    8002595c:	4fa050ef          	jal	8002ae56 <printf>
    80025960:	02900513          	li	a0,41
    80025964:	1e0040ef          	jal	80029b44 <putchar>
    80025968:	bf39                	j	80025886 <stateen_AIA_test_7+0x32c>
    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002596a:	00008517          	auipc	a0,0x8
    8002596e:	a6650513          	addi	a0,a0,-1434 # 8002d3d0 <__func__.0+0x318>
    80025972:	4e4050ef          	jal	8002ae56 <printf>
    80025976:	02900513          	li	a0,41
    8002597a:	1ca040ef          	jal	80029b44 <putchar>
    8002597e:	bd61                	j	80025816 <stateen_AIA_test_7+0x2bc>
    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025980:	00008517          	auipc	a0,0x8
    80025984:	a5050513          	addi	a0,a0,-1456 # 8002d3d0 <__func__.0+0x318>
    80025988:	4ce050ef          	jal	8002ae56 <printf>
    8002598c:	02900513          	li	a0,41
    80025990:	1b4040ef          	jal	80029b44 <putchar>
    80025994:	bd09                	j	800257a6 <stateen_AIA_test_7+0x24c>
    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025996:	00008517          	auipc	a0,0x8
    8002599a:	a3a50513          	addi	a0,a0,-1478 # 8002d3d0 <__func__.0+0x318>
    8002599e:	4b8050ef          	jal	8002ae56 <printf>
    800259a2:	02900513          	li	a0,41
    800259a6:	19e040ef          	jal	80029b44 <putchar>
    800259aa:	b371                	j	80025736 <stateen_AIA_test_7+0x1dc>
    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800259ac:	00008517          	auipc	a0,0x8
    800259b0:	a2450513          	addi	a0,a0,-1500 # 8002d3d0 <__func__.0+0x318>
    800259b4:	4a2050ef          	jal	8002ae56 <printf>
    800259b8:	02900513          	li	a0,41
    800259bc:	188040ef          	jal	80029b44 <putchar>
    800259c0:	b319                	j	800256c6 <stateen_AIA_test_7+0x16c>
    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    800259c2:	00008517          	auipc	a0,0x8
    800259c6:	a0e50513          	addi	a0,a0,-1522 # 8002d3d0 <__func__.0+0x318>
    800259ca:	48c050ef          	jal	8002ae56 <printf>
    800259ce:	02900513          	li	a0,41
    800259d2:	172040ef          	jal	80029b44 <putchar>
    800259d6:	b9bd                	j	80025654 <stateen_AIA_test_7+0xfa>
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800259d8:	00008517          	auipc	a0,0x8
    800259dc:	9f850513          	addi	a0,a0,-1544 # 8002d3d0 <__func__.0+0x318>
    800259e0:	476050ef          	jal	8002ae56 <printf>
    800259e4:	02900513          	li	a0,41
    800259e8:	15c040ef          	jal	80029b44 <putchar>
    800259ec:	befd                	j	800255ea <stateen_AIA_test_7+0x90>

00000000800259ee <stateen_CSRIND_test>:



//mstateen.csrind 和 hstateen.csrind 在xiangshan中默认为1，且RO
bool stateen_CSRIND_test(){
    800259ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800259f0:	00007597          	auipc	a1,0x7
    800259f4:	3c058593          	addi	a1,a1,960 # 8002cdb0 <__func__.15>
    800259f8:	00008517          	auipc	a0,0x8
    800259fc:	9a050513          	addi	a0,a0,-1632 # 8002d398 <__func__.0+0x2e0>
bool stateen_CSRIND_test(){
    80025a00:	ec06                	sd	ra,24(sp)
    80025a02:	e822                	sd	s0,16(sp)
    80025a04:	e426                	sd	s1,8(sp)
    TEST_START();
    80025a06:	450050ef          	jal	8002ae56 <printf>
    80025a0a:	4529                	li	a0,10
    80025a0c:	138040ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80025a10:	4511                	li	a0,4
    80025a12:	cf6db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.CSRIND=1 hstateen.CSRIND=1,v=1 时可访问iselect，ireg等寄存器

    goto_priv(PRIV_VS);
    80025a16:	4509                	li	a0,2
    80025a18:	cf0db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025a1c:	bf0db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025a20:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025a24:	e2adb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a28:	08200593          	li	a1,130
    80025a2c:	00011617          	auipc	a2,0x11
    80025a30:	65c60613          	addi	a2,a2,1628 # 80037088 <__func__.0+0x9fd0>
    80025a34:	00008517          	auipc	a0,0x8
    80025a38:	97c50513          	addi	a0,a0,-1668 # 8002d3b0 <__func__.0+0x2f8>
    80025a3c:	41a050ef          	jal	8002ae56 <printf>
    80025a40:	0002e797          	auipc	a5,0x2e
    80025a44:	5d17c783          	lbu	a5,1489(a5) # 80054011 <excpt+0x1>
    80025a48:	00008597          	auipc	a1,0x8
    80025a4c:	93058593          	addi	a1,a1,-1744 # 8002d378 <__func__.0+0x2c0>
    80025a50:	c789                	beqz	a5,80025a5a <stateen_CSRIND_test+0x6c>
    80025a52:	00008597          	auipc	a1,0x8
    80025a56:	93658593          	addi	a1,a1,-1738 # 8002d388 <__func__.0+0x2d0>
    80025a5a:	00008517          	auipc	a0,0x8
    80025a5e:	96e50513          	addi	a0,a0,-1682 # 8002d3c8 <__func__.0+0x310>
    80025a62:	3f4050ef          	jal	8002ae56 <printf>
    80025a66:	0002e797          	auipc	a5,0x2e
    80025a6a:	5ab7c783          	lbu	a5,1451(a5) # 80054011 <excpt+0x1>
    80025a6e:	3e079963          	bnez	a5,80025e60 <stateen_CSRIND_test+0x472>
    80025a72:	4529                	li	a0,10
    80025a74:	0d0040ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025a78:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a7a:	0002e497          	auipc	s1,0x2e
    80025a7e:	5974c483          	lbu	s1,1431(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025a82:	c86db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025a86:	b86db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025a8a:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025a8e:	dc0db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a92:	08200593          	li	a1,130
    80025a96:	00011617          	auipc	a2,0x11
    80025a9a:	64a60613          	addi	a2,a2,1610 # 800370e0 <__func__.0+0xa028>
    80025a9e:	00008517          	auipc	a0,0x8
    80025aa2:	91250513          	addi	a0,a0,-1774 # 8002d3b0 <__func__.0+0x2f8>
    80025aa6:	3b0050ef          	jal	8002ae56 <printf>
    80025aaa:	0002e797          	auipc	a5,0x2e
    80025aae:	5677c783          	lbu	a5,1383(a5) # 80054011 <excpt+0x1>
    80025ab2:	00008597          	auipc	a1,0x8
    80025ab6:	8d658593          	addi	a1,a1,-1834 # 8002d388 <__func__.0+0x2d0>
    80025aba:	e789                	bnez	a5,80025ac4 <stateen_CSRIND_test+0xd6>
    80025abc:	00008597          	auipc	a1,0x8
    80025ac0:	8bc58593          	addi	a1,a1,-1860 # 8002d378 <__func__.0+0x2c0>
    80025ac4:	00008517          	auipc	a0,0x8
    80025ac8:	90450513          	addi	a0,a0,-1788 # 8002d3c8 <__func__.0+0x310>
    80025acc:	38a050ef          	jal	8002ae56 <printf>
    80025ad0:	0002e797          	auipc	a5,0x2e
    80025ad4:	5417c783          	lbu	a5,1345(a5) # 80054011 <excpt+0x1>
    80025ad8:	36079963          	bnez	a5,80025e4a <stateen_CSRIND_test+0x45c>
    80025adc:	4529                	li	a0,10
    80025ade:	066040ef          	jal	80029b44 <putchar>
    80025ae2:	4401                	li	s0,0
    80025ae4:	e499                	bnez	s1,80025af2 <stateen_CSRIND_test+0x104>
    80025ae6:	0002e417          	auipc	s0,0x2e
    80025aea:	52b44403          	lbu	s0,1323(s0) # 80054011 <excpt+0x1>
    80025aee:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025af2:	450d                	li	a0,3
    80025af4:	c14db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025af8:	b14db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025afc:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025b00:	d4edb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b04:	08200593          	li	a1,130
    80025b08:	00011617          	auipc	a2,0x11
    80025b0c:	63060613          	addi	a2,a2,1584 # 80037138 <__func__.0+0xa080>
    80025b10:	00008517          	auipc	a0,0x8
    80025b14:	8a050513          	addi	a0,a0,-1888 # 8002d3b0 <__func__.0+0x2f8>
    80025b18:	33e050ef          	jal	8002ae56 <printf>
    80025b1c:	0002e797          	auipc	a5,0x2e
    80025b20:	4f57c783          	lbu	a5,1269(a5) # 80054011 <excpt+0x1>
    80025b24:	00008597          	auipc	a1,0x8
    80025b28:	86458593          	addi	a1,a1,-1948 # 8002d388 <__func__.0+0x2d0>
    80025b2c:	e789                	bnez	a5,80025b36 <stateen_CSRIND_test+0x148>
    80025b2e:	00008597          	auipc	a1,0x8
    80025b32:	84a58593          	addi	a1,a1,-1974 # 8002d378 <__func__.0+0x2c0>
    80025b36:	00008517          	auipc	a0,0x8
    80025b3a:	89250513          	addi	a0,a0,-1902 # 8002d3c8 <__func__.0+0x310>
    80025b3e:	318050ef          	jal	8002ae56 <printf>
    80025b42:	0002e797          	auipc	a5,0x2e
    80025b46:	4cf7c783          	lbu	a5,1231(a5) # 80054011 <excpt+0x1>
    80025b4a:	2e079563          	bnez	a5,80025e34 <stateen_CSRIND_test+0x446>
    80025b4e:	4529                	li	a0,10
    80025b50:	7f5030ef          	jal	80029b44 <putchar>
    80025b54:	c419                	beqz	s0,80025b62 <stateen_CSRIND_test+0x174>
    80025b56:	0002e417          	auipc	s0,0x2e
    80025b5a:	4bb44403          	lbu	s0,1211(s0) # 80054011 <excpt+0x1>
    80025b5e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80025b62:	450d                	li	a0,3
    80025b64:	ba4db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b68:	aa4db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025b6c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025b70:	cdedb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b74:	08200593          	li	a1,130
    80025b78:	00011617          	auipc	a2,0x11
    80025b7c:	61860613          	addi	a2,a2,1560 # 80037190 <__func__.0+0xa0d8>
    80025b80:	00008517          	auipc	a0,0x8
    80025b84:	83050513          	addi	a0,a0,-2000 # 8002d3b0 <__func__.0+0x2f8>
    80025b88:	2ce050ef          	jal	8002ae56 <printf>
    80025b8c:	0002e797          	auipc	a5,0x2e
    80025b90:	4857c783          	lbu	a5,1157(a5) # 80054011 <excpt+0x1>
    80025b94:	00007597          	auipc	a1,0x7
    80025b98:	7f458593          	addi	a1,a1,2036 # 8002d388 <__func__.0+0x2d0>
    80025b9c:	e789                	bnez	a5,80025ba6 <stateen_CSRIND_test+0x1b8>
    80025b9e:	00007597          	auipc	a1,0x7
    80025ba2:	7da58593          	addi	a1,a1,2010 # 8002d378 <__func__.0+0x2c0>
    80025ba6:	00008517          	auipc	a0,0x8
    80025baa:	82250513          	addi	a0,a0,-2014 # 8002d3c8 <__func__.0+0x310>
    80025bae:	2a8050ef          	jal	8002ae56 <printf>
    80025bb2:	0002e797          	auipc	a5,0x2e
    80025bb6:	45f7c783          	lbu	a5,1119(a5) # 80054011 <excpt+0x1>
    80025bba:	26079263          	bnez	a5,80025e1e <stateen_CSRIND_test+0x430>
    80025bbe:	4529                	li	a0,10
    80025bc0:	785030ef          	jal	80029b44 <putchar>
    80025bc4:	c419                	beqz	s0,80025bd2 <stateen_CSRIND_test+0x1e4>
    80025bc6:	0002e417          	auipc	s0,0x2e
    80025bca:	44b44403          	lbu	s0,1099(s0) # 80054011 <excpt+0x1>
    80025bce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025bd2:	4505                	li	a0,1
    80025bd4:	b34db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025bd8:	a34db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025bdc:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025be0:	c6edb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025be4:	08200593          	li	a1,130
    80025be8:	00011617          	auipc	a2,0x11
    80025bec:	60060613          	addi	a2,a2,1536 # 800371e8 <__func__.0+0xa130>
    80025bf0:	00007517          	auipc	a0,0x7
    80025bf4:	7c050513          	addi	a0,a0,1984 # 8002d3b0 <__func__.0+0x2f8>
    80025bf8:	25e050ef          	jal	8002ae56 <printf>
    80025bfc:	0002e797          	auipc	a5,0x2e
    80025c00:	4157c783          	lbu	a5,1045(a5) # 80054011 <excpt+0x1>
    80025c04:	00007597          	auipc	a1,0x7
    80025c08:	78458593          	addi	a1,a1,1924 # 8002d388 <__func__.0+0x2d0>
    80025c0c:	e789                	bnez	a5,80025c16 <stateen_CSRIND_test+0x228>
    80025c0e:	00007597          	auipc	a1,0x7
    80025c12:	76a58593          	addi	a1,a1,1898 # 8002d378 <__func__.0+0x2c0>
    80025c16:	00007517          	auipc	a0,0x7
    80025c1a:	7b250513          	addi	a0,a0,1970 # 8002d3c8 <__func__.0+0x310>
    80025c1e:	238050ef          	jal	8002ae56 <printf>
    80025c22:	0002e797          	auipc	a5,0x2e
    80025c26:	3ef7c783          	lbu	a5,1007(a5) # 80054011 <excpt+0x1>
    80025c2a:	1c079f63          	bnez	a5,80025e08 <stateen_CSRIND_test+0x41a>
    80025c2e:	4529                	li	a0,10
    80025c30:	715030ef          	jal	80029b44 <putchar>
    80025c34:	c419                	beqz	s0,80025c42 <stateen_CSRIND_test+0x254>
    80025c36:	0002e417          	auipc	s0,0x2e
    80025c3a:	3db44403          	lbu	s0,987(s0) # 80054011 <excpt+0x1>
    80025c3e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025c42:	4505                	li	a0,1
    80025c44:	ac4db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c48:	9c4db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025c4c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025c50:	bfedb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c54:	08200593          	li	a1,130
    80025c58:	00011617          	auipc	a2,0x11
    80025c5c:	5e860613          	addi	a2,a2,1512 # 80037240 <__func__.0+0xa188>
    80025c60:	00007517          	auipc	a0,0x7
    80025c64:	75050513          	addi	a0,a0,1872 # 8002d3b0 <__func__.0+0x2f8>
    80025c68:	1ee050ef          	jal	8002ae56 <printf>
    80025c6c:	0002e797          	auipc	a5,0x2e
    80025c70:	3a57c783          	lbu	a5,933(a5) # 80054011 <excpt+0x1>
    80025c74:	00007597          	auipc	a1,0x7
    80025c78:	71458593          	addi	a1,a1,1812 # 8002d388 <__func__.0+0x2d0>
    80025c7c:	e789                	bnez	a5,80025c86 <stateen_CSRIND_test+0x298>
    80025c7e:	00007597          	auipc	a1,0x7
    80025c82:	6fa58593          	addi	a1,a1,1786 # 8002d378 <__func__.0+0x2c0>
    80025c86:	00007517          	auipc	a0,0x7
    80025c8a:	74250513          	addi	a0,a0,1858 # 8002d3c8 <__func__.0+0x310>
    80025c8e:	1c8050ef          	jal	8002ae56 <printf>
    80025c92:	0002e797          	auipc	a5,0x2e
    80025c96:	37f7c783          	lbu	a5,895(a5) # 80054011 <excpt+0x1>
    80025c9a:	14079c63          	bnez	a5,80025df2 <stateen_CSRIND_test+0x404>
    80025c9e:	4529                	li	a0,10
    80025ca0:	6a5030ef          	jal	80029b44 <putchar>
    80025ca4:	c419                	beqz	s0,80025cb2 <stateen_CSRIND_test+0x2c4>
    80025ca6:	0002e417          	auipc	s0,0x2e
    80025caa:	36b44403          	lbu	s0,875(s0) # 80054011 <excpt+0x1>
    80025cae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025cb2:	4511                	li	a0,4
    80025cb4:	a54db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025cb8:	954db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025cbc:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025cc0:	b8edb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025cc4:	08200593          	li	a1,130
    80025cc8:	00011617          	auipc	a2,0x11
    80025ccc:	5d060613          	addi	a2,a2,1488 # 80037298 <__func__.0+0xa1e0>
    80025cd0:	00007517          	auipc	a0,0x7
    80025cd4:	6e050513          	addi	a0,a0,1760 # 8002d3b0 <__func__.0+0x2f8>
    80025cd8:	17e050ef          	jal	8002ae56 <printf>
    80025cdc:	0002e797          	auipc	a5,0x2e
    80025ce0:	3357c783          	lbu	a5,821(a5) # 80054011 <excpt+0x1>
    80025ce4:	00007597          	auipc	a1,0x7
    80025ce8:	6a458593          	addi	a1,a1,1700 # 8002d388 <__func__.0+0x2d0>
    80025cec:	e789                	bnez	a5,80025cf6 <stateen_CSRIND_test+0x308>
    80025cee:	00007597          	auipc	a1,0x7
    80025cf2:	68a58593          	addi	a1,a1,1674 # 8002d378 <__func__.0+0x2c0>
    80025cf6:	00007517          	auipc	a0,0x7
    80025cfa:	6d250513          	addi	a0,a0,1746 # 8002d3c8 <__func__.0+0x310>
    80025cfe:	158050ef          	jal	8002ae56 <printf>
    80025d02:	0002e797          	auipc	a5,0x2e
    80025d06:	30f7c783          	lbu	a5,783(a5) # 80054011 <excpt+0x1>
    80025d0a:	0c079963          	bnez	a5,80025ddc <stateen_CSRIND_test+0x3ee>
    80025d0e:	4529                	li	a0,10
    80025d10:	635030ef          	jal	80029b44 <putchar>
    80025d14:	c419                	beqz	s0,80025d22 <stateen_CSRIND_test+0x334>
    80025d16:	0002e417          	auipc	s0,0x2e
    80025d1a:	2fb44403          	lbu	s0,763(s0) # 80054011 <excpt+0x1>
    80025d1e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025d22:	4511                	li	a0,4
    80025d24:	9e4db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d28:	8e4db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025d2c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025d30:	b1edb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d34:	08200593          	li	a1,130
    80025d38:	00011617          	auipc	a2,0x11
    80025d3c:	5b860613          	addi	a2,a2,1464 # 800372f0 <__func__.0+0xa238>
    80025d40:	00007517          	auipc	a0,0x7
    80025d44:	67050513          	addi	a0,a0,1648 # 8002d3b0 <__func__.0+0x2f8>
    80025d48:	10e050ef          	jal	8002ae56 <printf>
    80025d4c:	0002e797          	auipc	a5,0x2e
    80025d50:	2c57c783          	lbu	a5,709(a5) # 80054011 <excpt+0x1>
    80025d54:	00007597          	auipc	a1,0x7
    80025d58:	63458593          	addi	a1,a1,1588 # 8002d388 <__func__.0+0x2d0>
    80025d5c:	e789                	bnez	a5,80025d66 <stateen_CSRIND_test+0x378>
    80025d5e:	00007597          	auipc	a1,0x7
    80025d62:	61a58593          	addi	a1,a1,1562 # 8002d378 <__func__.0+0x2c0>
    80025d66:	00007517          	auipc	a0,0x7
    80025d6a:	66250513          	addi	a0,a0,1634 # 8002d3c8 <__func__.0+0x310>
    80025d6e:	0e8050ef          	jal	8002ae56 <printf>
    80025d72:	0002e797          	auipc	a5,0x2e
    80025d76:	29f7c783          	lbu	a5,671(a5) # 80054011 <excpt+0x1>
    80025d7a:	e7b1                	bnez	a5,80025dc6 <stateen_CSRIND_test+0x3d8>
    80025d7c:	4529                	li	a0,10
    80025d7e:	5c7030ef          	jal	80029b44 <putchar>
    80025d82:	c411                	beqz	s0,80025d8e <stateen_CSRIND_test+0x3a0>
    80025d84:	0002e797          	auipc	a5,0x2e
    80025d88:	28d7c783          	lbu	a5,653(a5) # 80054011 <excpt+0x1>
    80025d8c:	c79d                	beqz	a5,80025dba <stateen_CSRIND_test+0x3cc>
    80025d8e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025d90:	00007597          	auipc	a1,0x7
    80025d94:	5f858593          	addi	a1,a1,1528 # 8002d388 <__func__.0+0x2d0>
    80025d98:	00007517          	auipc	a0,0x7
    80025d9c:	69850513          	addi	a0,a0,1688 # 8002d430 <__func__.0+0x378>
    80025da0:	0b6050ef          	jal	8002ae56 <printf>
    80025da4:	4511                	li	a0,4
    80025da6:	962db0ef          	jal	80000f08 <goto_priv>
    80025daa:	a7bdb0ef          	jal	80001824 <reset_state>
}
    80025dae:	60e2                	ld	ra,24(sp)
    80025db0:	8522                	mv	a0,s0
    80025db2:	6442                	ld	s0,16(sp)
    80025db4:	64a2                	ld	s1,8(sp)
    80025db6:	6105                	addi	sp,sp,32
    80025db8:	8082                	ret
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dba:	4405                	li	s0,1
    TEST_END();
    80025dbc:	00007597          	auipc	a1,0x7
    80025dc0:	5bc58593          	addi	a1,a1,1468 # 8002d378 <__func__.0+0x2c0>
    80025dc4:	bfd1                	j	80025d98 <stateen_CSRIND_test+0x3aa>
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dc6:	00007517          	auipc	a0,0x7
    80025dca:	60a50513          	addi	a0,a0,1546 # 8002d3d0 <__func__.0+0x318>
    80025dce:	088050ef          	jal	8002ae56 <printf>
    80025dd2:	02900513          	li	a0,41
    80025dd6:	56f030ef          	jal	80029b44 <putchar>
    80025dda:	b74d                	j	80025d7c <stateen_CSRIND_test+0x38e>
    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ddc:	00007517          	auipc	a0,0x7
    80025de0:	5f450513          	addi	a0,a0,1524 # 8002d3d0 <__func__.0+0x318>
    80025de4:	072050ef          	jal	8002ae56 <printf>
    80025de8:	02900513          	li	a0,41
    80025dec:	559030ef          	jal	80029b44 <putchar>
    80025df0:	bf39                	j	80025d0e <stateen_CSRIND_test+0x320>
    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025df2:	00007517          	auipc	a0,0x7
    80025df6:	5de50513          	addi	a0,a0,1502 # 8002d3d0 <__func__.0+0x318>
    80025dfa:	05c050ef          	jal	8002ae56 <printf>
    80025dfe:	02900513          	li	a0,41
    80025e02:	543030ef          	jal	80029b44 <putchar>
    80025e06:	bd61                	j	80025c9e <stateen_CSRIND_test+0x2b0>
    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e08:	00007517          	auipc	a0,0x7
    80025e0c:	5c850513          	addi	a0,a0,1480 # 8002d3d0 <__func__.0+0x318>
    80025e10:	046050ef          	jal	8002ae56 <printf>
    80025e14:	02900513          	li	a0,41
    80025e18:	52d030ef          	jal	80029b44 <putchar>
    80025e1c:	bd09                	j	80025c2e <stateen_CSRIND_test+0x240>
    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e1e:	00007517          	auipc	a0,0x7
    80025e22:	5b250513          	addi	a0,a0,1458 # 8002d3d0 <__func__.0+0x318>
    80025e26:	030050ef          	jal	8002ae56 <printf>
    80025e2a:	02900513          	li	a0,41
    80025e2e:	517030ef          	jal	80029b44 <putchar>
    80025e32:	b371                	j	80025bbe <stateen_CSRIND_test+0x1d0>
    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e34:	00007517          	auipc	a0,0x7
    80025e38:	59c50513          	addi	a0,a0,1436 # 8002d3d0 <__func__.0+0x318>
    80025e3c:	01a050ef          	jal	8002ae56 <printf>
    80025e40:	02900513          	li	a0,41
    80025e44:	501030ef          	jal	80029b44 <putchar>
    80025e48:	b319                	j	80025b4e <stateen_CSRIND_test+0x160>
    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e4a:	00007517          	auipc	a0,0x7
    80025e4e:	58650513          	addi	a0,a0,1414 # 8002d3d0 <__func__.0+0x318>
    80025e52:	004050ef          	jal	8002ae56 <printf>
    80025e56:	02900513          	li	a0,41
    80025e5a:	4eb030ef          	jal	80029b44 <putchar>
    80025e5e:	b9bd                	j	80025adc <stateen_CSRIND_test+0xee>
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e60:	00007517          	auipc	a0,0x7
    80025e64:	57050513          	addi	a0,a0,1392 # 8002d3d0 <__func__.0+0x318>
    80025e68:	7ef040ef          	jal	8002ae56 <printf>
    80025e6c:	02900513          	li	a0,41
    80025e70:	4d5030ef          	jal	80029b44 <putchar>
    80025e74:	befd                	j	80025a72 <stateen_CSRIND_test+0x84>

0000000080025e76 <stateen_ENVCFG_test_1>:

// ----------


bool stateen_ENVCFG_test_1(){
    80025e76:	1101                	addi	sp,sp,-32

    TEST_START();
    80025e78:	00007597          	auipc	a1,0x7
    80025e7c:	f5058593          	addi	a1,a1,-176 # 8002cdc8 <__func__.14>
    80025e80:	00007517          	auipc	a0,0x7
    80025e84:	51850513          	addi	a0,a0,1304 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_1(){
    80025e88:	ec06                	sd	ra,24(sp)
    80025e8a:	e822                	sd	s0,16(sp)
    80025e8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80025e8e:	7c9040ef          	jal	8002ae56 <printf>
    80025e92:	4529                	li	a0,10
    80025e94:	4b1030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80025e98:	4511                	li	a0,4
    80025e9a:	86edb0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=0,hu mode 不可访问Henvcfg和Senvcfg寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025e9e:	4785                	li	a5,1
    80025ea0:	17fa                	slli	a5,a5,0x3e
    80025ea2:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80025ea6:	4505                	li	a0,1
    80025ea8:	860db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025eac:	f61da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025eb0:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025eb4:	99adb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss envcfg register cause to illegal except when mstateen.envcfg=0",
    80025eb8:	08200593          	li	a1,130
    80025ebc:	00011617          	auipc	a2,0x11
    80025ec0:	48c60613          	addi	a2,a2,1164 # 80037348 <__func__.0+0xa290>
    80025ec4:	00007517          	auipc	a0,0x7
    80025ec8:	4ec50513          	addi	a0,a0,1260 # 8002d3b0 <__func__.0+0x2f8>
    80025ecc:	78b040ef          	jal	8002ae56 <printf>
    80025ed0:	0002e797          	auipc	a5,0x2e
    80025ed4:	1417c783          	lbu	a5,321(a5) # 80054011 <excpt+0x1>
    80025ed8:	0002e497          	auipc	s1,0x2e
    80025edc:	13848493          	addi	s1,s1,312 # 80054010 <excpt>
    80025ee0:	00007597          	auipc	a1,0x7
    80025ee4:	4a858593          	addi	a1,a1,1192 # 8002d388 <__func__.0+0x2d0>
    80025ee8:	cf89                	beqz	a5,80025f02 <stateen_ENVCFG_test_1+0x8c>
    80025eea:	6498                	ld	a4,8(s1)
    80025eec:	4789                	li	a5,2
    80025eee:	00007597          	auipc	a1,0x7
    80025ef2:	48a58593          	addi	a1,a1,1162 # 8002d378 <__func__.0+0x2c0>
    80025ef6:	00f70663          	beq	a4,a5,80025f02 <stateen_ENVCFG_test_1+0x8c>
    80025efa:	00007597          	auipc	a1,0x7
    80025efe:	48e58593          	addi	a1,a1,1166 # 8002d388 <__func__.0+0x2d0>
    80025f02:	00007517          	auipc	a0,0x7
    80025f06:	4c650513          	addi	a0,a0,1222 # 8002d3c8 <__func__.0+0x310>
    80025f0a:	74d040ef          	jal	8002ae56 <printf>
    80025f0e:	0002e797          	auipc	a5,0x2e
    80025f12:	1037c783          	lbu	a5,259(a5) # 80054011 <excpt+0x1>
    80025f16:	c789                	beqz	a5,80025f20 <stateen_ENVCFG_test_1+0xaa>
    80025f18:	6498                	ld	a4,8(s1)
    80025f1a:	4789                	li	a5,2
    80025f1c:	00f70c63          	beq	a4,a5,80025f34 <stateen_ENVCFG_test_1+0xbe>
    80025f20:	00007517          	auipc	a0,0x7
    80025f24:	4b050513          	addi	a0,a0,1200 # 8002d3d0 <__func__.0+0x318>
    80025f28:	72f040ef          	jal	8002ae56 <printf>
    80025f2c:	02900513          	li	a0,41
    80025f30:	415030ef          	jal	80029b44 <putchar>
    80025f34:	4529                	li	a0,10
    80025f36:	40f030ef          	jal	80029b44 <putchar>
    80025f3a:	0002e797          	auipc	a5,0x2e
    80025f3e:	0d77c783          	lbu	a5,215(a5) # 80054011 <excpt+0x1>
    80025f42:	4401                	li	s0,0
    80025f44:	c789                	beqz	a5,80025f4e <stateen_ENVCFG_test_1+0xd8>
    80025f46:	6480                	ld	s0,8(s1)
    80025f48:	1479                	addi	s0,s0,-2
    80025f4a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80025f4e:	4505                	li	a0,1
    80025f50:	fb9da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025f54:	eb9da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80025f58:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80025f5c:	8f2db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025f60:	08200593          	li	a1,130
    80025f64:	00011617          	auipc	a2,0x11
    80025f68:	43460613          	addi	a2,a2,1076 # 80037398 <__func__.0+0xa2e0>
    80025f6c:	00007517          	auipc	a0,0x7
    80025f70:	44450513          	addi	a0,a0,1092 # 8002d3b0 <__func__.0+0x2f8>
    80025f74:	6e3040ef          	jal	8002ae56 <printf>
    80025f78:	0002e797          	auipc	a5,0x2e
    80025f7c:	0997c783          	lbu	a5,153(a5) # 80054011 <excpt+0x1>
    80025f80:	00007597          	auipc	a1,0x7
    80025f84:	40858593          	addi	a1,a1,1032 # 8002d388 <__func__.0+0x2d0>
    80025f88:	cf89                	beqz	a5,80025fa2 <stateen_ENVCFG_test_1+0x12c>
    80025f8a:	6498                	ld	a4,8(s1)
    80025f8c:	4789                	li	a5,2
    80025f8e:	00007597          	auipc	a1,0x7
    80025f92:	3ea58593          	addi	a1,a1,1002 # 8002d378 <__func__.0+0x2c0>
    80025f96:	00f70663          	beq	a4,a5,80025fa2 <stateen_ENVCFG_test_1+0x12c>
    80025f9a:	00007597          	auipc	a1,0x7
    80025f9e:	3ee58593          	addi	a1,a1,1006 # 8002d388 <__func__.0+0x2d0>
    80025fa2:	00007517          	auipc	a0,0x7
    80025fa6:	42650513          	addi	a0,a0,1062 # 8002d3c8 <__func__.0+0x310>
    80025faa:	6ad040ef          	jal	8002ae56 <printf>
    80025fae:	0002e797          	auipc	a5,0x2e
    80025fb2:	0637c783          	lbu	a5,99(a5) # 80054011 <excpt+0x1>
    80025fb6:	c789                	beqz	a5,80025fc0 <stateen_ENVCFG_test_1+0x14a>
    80025fb8:	6498                	ld	a4,8(s1)
    80025fba:	4789                	li	a5,2
    80025fbc:	00f70c63          	beq	a4,a5,80025fd4 <stateen_ENVCFG_test_1+0x15e>
    80025fc0:	00007517          	auipc	a0,0x7
    80025fc4:	41050513          	addi	a0,a0,1040 # 8002d3d0 <__func__.0+0x318>
    80025fc8:	68f040ef          	jal	8002ae56 <printf>
    80025fcc:	02900513          	li	a0,41
    80025fd0:	375030ef          	jal	80029b44 <putchar>
    80025fd4:	4529                	li	a0,10
    80025fd6:	36f030ef          	jal	80029b44 <putchar>
    80025fda:	c015                	beqz	s0,80025ffe <stateen_ENVCFG_test_1+0x188>
    80025fdc:	0002e417          	auipc	s0,0x2e
    80025fe0:	03544403          	lbu	s0,53(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80025fe4:	00007597          	auipc	a1,0x7
    80025fe8:	3a458593          	addi	a1,a1,932 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025fec:	cc11                	beqz	s0,80026008 <stateen_ENVCFG_test_1+0x192>
    80025fee:	6498                	ld	a4,8(s1)
    80025ff0:	4789                	li	a5,2
    TEST_END();
    80025ff2:	00007597          	auipc	a1,0x7
    80025ff6:	38658593          	addi	a1,a1,902 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025ffa:	00f70763          	beq	a4,a5,80026008 <stateen_ENVCFG_test_1+0x192>
    80025ffe:	4401                	li	s0,0
    TEST_END();
    80026000:	00007597          	auipc	a1,0x7
    80026004:	38858593          	addi	a1,a1,904 # 8002d388 <__func__.0+0x2d0>
    80026008:	00007517          	auipc	a0,0x7
    8002600c:	42850513          	addi	a0,a0,1064 # 8002d430 <__func__.0+0x378>
    80026010:	647040ef          	jal	8002ae56 <printf>
    80026014:	4511                	li	a0,4
    80026016:	ef3da0ef          	jal	80000f08 <goto_priv>
    8002601a:	80bdb0ef          	jal	80001824 <reset_state>

}
    8002601e:	60e2                	ld	ra,24(sp)
    80026020:	8522                	mv	a0,s0
    80026022:	6442                	ld	s0,16(sp)
    80026024:	64a2                	ld	s1,8(sp)
    80026026:	6105                	addi	sp,sp,32
    80026028:	8082                	ret

000000008002602a <stateen_ENVCFG_test_2>:

bool stateen_ENVCFG_test_2(){
    8002602a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002602c:	00007597          	auipc	a1,0x7
    80026030:	db458593          	addi	a1,a1,-588 # 8002cde0 <__func__.13>
    80026034:	00007517          	auipc	a0,0x7
    80026038:	36450513          	addi	a0,a0,868 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_2(){
    8002603c:	ec06                	sd	ra,24(sp)
    8002603e:	e822                	sd	s0,16(sp)
    80026040:	e426                	sd	s1,8(sp)
    TEST_START();
    80026042:	615040ef          	jal	8002ae56 <printf>
    80026046:	4529                	li	a0,10
    80026048:	2fd030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002604c:	4511                	li	a0,4
    8002604e:	ebbda0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026052:	4785                	li	a5,1
    80026054:	17fa                	slli	a5,a5,0x3e
    80026056:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    8002605a:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时,不可访问Henvcfg和Senvcfg寄存器
    goto_priv(PRIV_VU);
    8002605e:	4501                	li	a0,0
    80026060:	ea9da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026064:	da9da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026068:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002606c:	fe3da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026070:	08200593          	li	a1,130
    80026074:	00011617          	auipc	a2,0x11
    80026078:	37460613          	addi	a2,a2,884 # 800373e8 <__func__.0+0xa330>
    8002607c:	00007517          	auipc	a0,0x7
    80026080:	33450513          	addi	a0,a0,820 # 8002d3b0 <__func__.0+0x2f8>
    80026084:	5d3040ef          	jal	8002ae56 <printf>
    80026088:	0002e797          	auipc	a5,0x2e
    8002608c:	f897c783          	lbu	a5,-119(a5) # 80054011 <excpt+0x1>
    80026090:	0002e497          	auipc	s1,0x2e
    80026094:	f8048493          	addi	s1,s1,-128 # 80054010 <excpt>
    80026098:	00007597          	auipc	a1,0x7
    8002609c:	2f058593          	addi	a1,a1,752 # 8002d388 <__func__.0+0x2d0>
    800260a0:	cf89                	beqz	a5,800260ba <stateen_ENVCFG_test_2+0x90>
    800260a2:	6498                	ld	a4,8(s1)
    800260a4:	47d9                	li	a5,22
    800260a6:	00007597          	auipc	a1,0x7
    800260aa:	2d258593          	addi	a1,a1,722 # 8002d378 <__func__.0+0x2c0>
    800260ae:	00f70663          	beq	a4,a5,800260ba <stateen_ENVCFG_test_2+0x90>
    800260b2:	00007597          	auipc	a1,0x7
    800260b6:	2d658593          	addi	a1,a1,726 # 8002d388 <__func__.0+0x2d0>
    800260ba:	00007517          	auipc	a0,0x7
    800260be:	30e50513          	addi	a0,a0,782 # 8002d3c8 <__func__.0+0x310>
    800260c2:	595040ef          	jal	8002ae56 <printf>
    800260c6:	0002e797          	auipc	a5,0x2e
    800260ca:	f4b7c783          	lbu	a5,-181(a5) # 80054011 <excpt+0x1>
    800260ce:	c789                	beqz	a5,800260d8 <stateen_ENVCFG_test_2+0xae>
    800260d0:	6498                	ld	a4,8(s1)
    800260d2:	47d9                	li	a5,22
    800260d4:	00f70c63          	beq	a4,a5,800260ec <stateen_ENVCFG_test_2+0xc2>
    800260d8:	00007517          	auipc	a0,0x7
    800260dc:	2f850513          	addi	a0,a0,760 # 8002d3d0 <__func__.0+0x318>
    800260e0:	577040ef          	jal	8002ae56 <printf>
    800260e4:	02900513          	li	a0,41
    800260e8:	25d030ef          	jal	80029b44 <putchar>
    800260ec:	4529                	li	a0,10
    800260ee:	257030ef          	jal	80029b44 <putchar>
    800260f2:	0002e797          	auipc	a5,0x2e
    800260f6:	f1f7c783          	lbu	a5,-225(a5) # 80054011 <excpt+0x1>
    800260fa:	4401                	li	s0,0
    800260fc:	c789                	beqz	a5,80026106 <stateen_ENVCFG_test_2+0xdc>
    800260fe:	6480                	ld	s0,8(s1)
    80026100:	1429                	addi	s0,s0,-22
    80026102:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026106:	4501                	li	a0,0
    80026108:	e01da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002610c:	d01da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026110:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026114:	f3bda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026118:	08200593          	li	a1,130
    8002611c:	00011617          	auipc	a2,0x11
    80026120:	32460613          	addi	a2,a2,804 # 80037440 <__func__.0+0xa388>
    80026124:	00007517          	auipc	a0,0x7
    80026128:	28c50513          	addi	a0,a0,652 # 8002d3b0 <__func__.0+0x2f8>
    8002612c:	52b040ef          	jal	8002ae56 <printf>
    80026130:	0002e797          	auipc	a5,0x2e
    80026134:	ee17c783          	lbu	a5,-287(a5) # 80054011 <excpt+0x1>
    80026138:	00007597          	auipc	a1,0x7
    8002613c:	25058593          	addi	a1,a1,592 # 8002d388 <__func__.0+0x2d0>
    80026140:	cf89                	beqz	a5,8002615a <stateen_ENVCFG_test_2+0x130>
    80026142:	6498                	ld	a4,8(s1)
    80026144:	47d9                	li	a5,22
    80026146:	00007597          	auipc	a1,0x7
    8002614a:	23258593          	addi	a1,a1,562 # 8002d378 <__func__.0+0x2c0>
    8002614e:	00f70663          	beq	a4,a5,8002615a <stateen_ENVCFG_test_2+0x130>
    80026152:	00007597          	auipc	a1,0x7
    80026156:	23658593          	addi	a1,a1,566 # 8002d388 <__func__.0+0x2d0>
    8002615a:	00007517          	auipc	a0,0x7
    8002615e:	26e50513          	addi	a0,a0,622 # 8002d3c8 <__func__.0+0x310>
    80026162:	4f5040ef          	jal	8002ae56 <printf>
    80026166:	0002e797          	auipc	a5,0x2e
    8002616a:	eab7c783          	lbu	a5,-341(a5) # 80054011 <excpt+0x1>
    8002616e:	c789                	beqz	a5,80026178 <stateen_ENVCFG_test_2+0x14e>
    80026170:	6498                	ld	a4,8(s1)
    80026172:	47d9                	li	a5,22
    80026174:	00f70c63          	beq	a4,a5,8002618c <stateen_ENVCFG_test_2+0x162>
    80026178:	00007517          	auipc	a0,0x7
    8002617c:	25850513          	addi	a0,a0,600 # 8002d3d0 <__func__.0+0x318>
    80026180:	4d7040ef          	jal	8002ae56 <printf>
    80026184:	02900513          	li	a0,41
    80026188:	1bd030ef          	jal	80029b44 <putchar>
    8002618c:	4529                	li	a0,10
    8002618e:	1b7030ef          	jal	80029b44 <putchar>
    80026192:	c015                	beqz	s0,800261b6 <stateen_ENVCFG_test_2+0x18c>
    80026194:	0002e417          	auipc	s0,0x2e
    80026198:	e7d44403          	lbu	s0,-387(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    8002619c:	00007597          	auipc	a1,0x7
    800261a0:	1ec58593          	addi	a1,a1,492 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800261a4:	cc11                	beqz	s0,800261c0 <stateen_ENVCFG_test_2+0x196>
    800261a6:	6498                	ld	a4,8(s1)
    800261a8:	47d9                	li	a5,22
    TEST_END();
    800261aa:	00007597          	auipc	a1,0x7
    800261ae:	1ce58593          	addi	a1,a1,462 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800261b2:	00f70763          	beq	a4,a5,800261c0 <stateen_ENVCFG_test_2+0x196>
    800261b6:	4401                	li	s0,0
    TEST_END();
    800261b8:	00007597          	auipc	a1,0x7
    800261bc:	1d058593          	addi	a1,a1,464 # 8002d388 <__func__.0+0x2d0>
    800261c0:	00007517          	auipc	a0,0x7
    800261c4:	27050513          	addi	a0,a0,624 # 8002d430 <__func__.0+0x378>
    800261c8:	48f040ef          	jal	8002ae56 <printf>
    800261cc:	4511                	li	a0,4
    800261ce:	d3bda0ef          	jal	80000f08 <goto_priv>
    800261d2:	e52db0ef          	jal	80001824 <reset_state>

}
    800261d6:	60e2                	ld	ra,24(sp)
    800261d8:	8522                	mv	a0,s0
    800261da:	6442                	ld	s0,16(sp)
    800261dc:	64a2                	ld	s1,8(sp)
    800261de:	6105                	addi	sp,sp,32
    800261e0:	8082                	ret

00000000800261e2 <stateen_ENVCFG_test_3>:

bool stateen_ENVCFG_test_3(){
    800261e2:	1141                	addi	sp,sp,-16

    //当mstateen.ENVCFG=0,m mode 可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    800261e4:	00007597          	auipc	a1,0x7
    800261e8:	c1458593          	addi	a1,a1,-1004 # 8002cdf8 <__func__.12>
    800261ec:	00007517          	auipc	a0,0x7
    800261f0:	1ac50513          	addi	a0,a0,428 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_3(){
    800261f4:	e406                	sd	ra,8(sp)
    800261f6:	e022                	sd	s0,0(sp)
    TEST_START();
    800261f8:	45f040ef          	jal	8002ae56 <printf>
    800261fc:	4529                	li	a0,10
    800261fe:	147030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80026202:	4511                	li	a0,4
    80026204:	d05da0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026208:	4785                	li	a5,1
    8002620a:	17fa                	slli	a5,a5,0x3e
    8002620c:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80026210:	4511                	li	a0,4
    80026212:	cf7da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026216:	bf7da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002621a:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002621e:	e31da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026222:	08200593          	li	a1,130
    80026226:	00011617          	auipc	a2,0x11
    8002622a:	27260613          	addi	a2,a2,626 # 80037498 <__func__.0+0xa3e0>
    8002622e:	00007517          	auipc	a0,0x7
    80026232:	18250513          	addi	a0,a0,386 # 8002d3b0 <__func__.0+0x2f8>
    80026236:	421040ef          	jal	8002ae56 <printf>
    8002623a:	0002e797          	auipc	a5,0x2e
    8002623e:	dd77c783          	lbu	a5,-553(a5) # 80054011 <excpt+0x1>
    80026242:	00007597          	auipc	a1,0x7
    80026246:	13658593          	addi	a1,a1,310 # 8002d378 <__func__.0+0x2c0>
    8002624a:	c789                	beqz	a5,80026254 <stateen_ENVCFG_test_3+0x72>
    8002624c:	00007597          	auipc	a1,0x7
    80026250:	13c58593          	addi	a1,a1,316 # 8002d388 <__func__.0+0x2d0>
    80026254:	00007517          	auipc	a0,0x7
    80026258:	17450513          	addi	a0,a0,372 # 8002d3c8 <__func__.0+0x310>
    8002625c:	3fb040ef          	jal	8002ae56 <printf>
    80026260:	0002e797          	auipc	a5,0x2e
    80026264:	db17c783          	lbu	a5,-591(a5) # 80054011 <excpt+0x1>
    80026268:	e7e9                	bnez	a5,80026332 <stateen_ENVCFG_test_3+0x150>
    8002626a:	4529                	li	a0,10
    8002626c:	0d9030ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026270:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026272:	0002e417          	auipc	s0,0x2e
    80026276:	d9f44403          	lbu	s0,-609(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    8002627a:	c8fda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002627e:	b8fda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026282:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026286:	dc9da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002628a:	08200593          	li	a1,130
    8002628e:	00011617          	auipc	a2,0x11
    80026292:	24a60613          	addi	a2,a2,586 # 800374d8 <__func__.0+0xa420>
    80026296:	00007517          	auipc	a0,0x7
    8002629a:	11a50513          	addi	a0,a0,282 # 8002d3b0 <__func__.0+0x2f8>
    8002629e:	3b9040ef          	jal	8002ae56 <printf>
    800262a2:	0002e797          	auipc	a5,0x2e
    800262a6:	d6f7c783          	lbu	a5,-657(a5) # 80054011 <excpt+0x1>
    800262aa:	00007597          	auipc	a1,0x7
    800262ae:	0de58593          	addi	a1,a1,222 # 8002d388 <__func__.0+0x2d0>
    800262b2:	e789                	bnez	a5,800262bc <stateen_ENVCFG_test_3+0xda>
    800262b4:	00007597          	auipc	a1,0x7
    800262b8:	0c458593          	addi	a1,a1,196 # 8002d378 <__func__.0+0x2c0>
    800262bc:	00007517          	auipc	a0,0x7
    800262c0:	10c50513          	addi	a0,a0,268 # 8002d3c8 <__func__.0+0x310>
    800262c4:	393040ef          	jal	8002ae56 <printf>
    800262c8:	0002e797          	auipc	a5,0x2e
    800262cc:	d497c783          	lbu	a5,-695(a5) # 80054011 <excpt+0x1>
    800262d0:	e7b1                	bnez	a5,8002631c <stateen_ENVCFG_test_3+0x13a>
    800262d2:	4529                	li	a0,10
    800262d4:	071030ef          	jal	80029b44 <putchar>
    800262d8:	e815                	bnez	s0,8002630c <stateen_ENVCFG_test_3+0x12a>
    800262da:	0002e797          	auipc	a5,0x2e
    800262de:	d377c783          	lbu	a5,-713(a5) # 80054011 <excpt+0x1>
    800262e2:	c79d                	beqz	a5,80026310 <stateen_ENVCFG_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    800262e4:	00007597          	auipc	a1,0x7
    800262e8:	0a458593          	addi	a1,a1,164 # 8002d388 <__func__.0+0x2d0>
    800262ec:	00007517          	auipc	a0,0x7
    800262f0:	14450513          	addi	a0,a0,324 # 8002d430 <__func__.0+0x378>
    800262f4:	363040ef          	jal	8002ae56 <printf>
    800262f8:	4511                	li	a0,4
    800262fa:	c0fda0ef          	jal	80000f08 <goto_priv>
    800262fe:	d26db0ef          	jal	80001824 <reset_state>

}
    80026302:	60a2                	ld	ra,8(sp)
    80026304:	8522                	mv	a0,s0
    80026306:	6402                	ld	s0,0(sp)
    80026308:	0141                	addi	sp,sp,16
    8002630a:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002630c:	4401                	li	s0,0
    8002630e:	bfd9                	j	800262e4 <stateen_ENVCFG_test_3+0x102>
    80026310:	4405                	li	s0,1
    TEST_END();
    80026312:	00007597          	auipc	a1,0x7
    80026316:	06658593          	addi	a1,a1,102 # 8002d378 <__func__.0+0x2c0>
    8002631a:	bfc9                	j	800262ec <stateen_ENVCFG_test_3+0x10a>
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002631c:	00007517          	auipc	a0,0x7
    80026320:	0b450513          	addi	a0,a0,180 # 8002d3d0 <__func__.0+0x318>
    80026324:	333040ef          	jal	8002ae56 <printf>
    80026328:	02900513          	li	a0,41
    8002632c:	019030ef          	jal	80029b44 <putchar>
    80026330:	b74d                	j	800262d2 <stateen_ENVCFG_test_3+0xf0>
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026332:	00007517          	auipc	a0,0x7
    80026336:	09e50513          	addi	a0,a0,158 # 8002d3d0 <__func__.0+0x318>
    8002633a:	31d040ef          	jal	8002ae56 <printf>
    8002633e:	02900513          	li	a0,41
    80026342:	003030ef          	jal	80029b44 <putchar>
    80026346:	b715                	j	8002626a <stateen_ENVCFG_test_3+0x88>

0000000080026348 <stateen_ENVCFG_test_4>:


bool stateen_ENVCFG_test_4(){
    80026348:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    8002634a:	00007597          	auipc	a1,0x7
    8002634e:	ac658593          	addi	a1,a1,-1338 # 8002ce10 <__func__.11>
    80026352:	00007517          	auipc	a0,0x7
    80026356:	04650513          	addi	a0,a0,70 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_4(){
    8002635a:	ec06                	sd	ra,24(sp)
    8002635c:	e822                	sd	s0,16(sp)
    8002635e:	e426                	sd	s1,8(sp)
    TEST_START();
    80026360:	2f7040ef          	jal	8002ae56 <printf>
    80026364:	4529                	li	a0,10
    80026366:	7de030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002636a:	4511                	li	a0,4
    8002636c:	b9dda0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026370:	4785                	li	a5,1
    80026372:	17fa                	slli	a5,a5,0x3e
    80026374:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026378:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    8002637c:	30c025f3          	csrr	a1,mstateen0
    80026380:	0000f517          	auipc	a0,0xf
    80026384:	7f850513          	addi	a0,a0,2040 # 80035b78 <__func__.0+0x8ac0>
    80026388:	2cf040ef          	jal	8002ae56 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    8002638c:	60c025f3          	csrr	a1,hstateen0
    80026390:	0000f517          	auipc	a0,0xf
    80026394:	7f850513          	addi	a0,a0,2040 # 80035b88 <__func__.0+0x8ad0>
    80026398:	2bf040ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    8002639c:	4509                	li	a0,2
    8002639e:	b6bda0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800263a2:	a6bda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800263a6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800263aa:	ca5da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800263ae:	08200593          	li	a1,130
    800263b2:	00011617          	auipc	a2,0x11
    800263b6:	16660613          	addi	a2,a2,358 # 80037518 <__func__.0+0xa460>
    800263ba:	00007517          	auipc	a0,0x7
    800263be:	ff650513          	addi	a0,a0,-10 # 8002d3b0 <__func__.0+0x2f8>
    800263c2:	295040ef          	jal	8002ae56 <printf>
    800263c6:	0002e797          	auipc	a5,0x2e
    800263ca:	c4b7c783          	lbu	a5,-949(a5) # 80054011 <excpt+0x1>
    800263ce:	0002e497          	auipc	s1,0x2e
    800263d2:	c4248493          	addi	s1,s1,-958 # 80054010 <excpt>
    800263d6:	00007597          	auipc	a1,0x7
    800263da:	fb258593          	addi	a1,a1,-78 # 8002d388 <__func__.0+0x2d0>
    800263de:	cf89                	beqz	a5,800263f8 <stateen_ENVCFG_test_4+0xb0>
    800263e0:	6498                	ld	a4,8(s1)
    800263e2:	47d9                	li	a5,22
    800263e4:	00007597          	auipc	a1,0x7
    800263e8:	f9458593          	addi	a1,a1,-108 # 8002d378 <__func__.0+0x2c0>
    800263ec:	00f70663          	beq	a4,a5,800263f8 <stateen_ENVCFG_test_4+0xb0>
    800263f0:	00007597          	auipc	a1,0x7
    800263f4:	f9858593          	addi	a1,a1,-104 # 8002d388 <__func__.0+0x2d0>
    800263f8:	00007517          	auipc	a0,0x7
    800263fc:	fd050513          	addi	a0,a0,-48 # 8002d3c8 <__func__.0+0x310>
    80026400:	257040ef          	jal	8002ae56 <printf>
    80026404:	0002e797          	auipc	a5,0x2e
    80026408:	c0d7c783          	lbu	a5,-1011(a5) # 80054011 <excpt+0x1>
    8002640c:	c789                	beqz	a5,80026416 <stateen_ENVCFG_test_4+0xce>
    8002640e:	6498                	ld	a4,8(s1)
    80026410:	47d9                	li	a5,22
    80026412:	00f70c63          	beq	a4,a5,8002642a <stateen_ENVCFG_test_4+0xe2>
    80026416:	00007517          	auipc	a0,0x7
    8002641a:	fba50513          	addi	a0,a0,-70 # 8002d3d0 <__func__.0+0x318>
    8002641e:	239040ef          	jal	8002ae56 <printf>
    80026422:	02900513          	li	a0,41
    80026426:	71e030ef          	jal	80029b44 <putchar>
    8002642a:	4529                	li	a0,10
    8002642c:	718030ef          	jal	80029b44 <putchar>
    80026430:	0002e797          	auipc	a5,0x2e
    80026434:	be17c783          	lbu	a5,-1055(a5) # 80054011 <excpt+0x1>
    80026438:	4401                	li	s0,0
    8002643a:	c789                	beqz	a5,80026444 <stateen_ENVCFG_test_4+0xfc>
    8002643c:	6480                	ld	s0,8(s1)
    8002643e:	1429                	addi	s0,s0,-22
    80026440:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80026444:	4509                	li	a0,2
    80026446:	ac3da0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002644a:	9c3da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002644e:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026452:	bfdda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026456:	08200593          	li	a1,130
    8002645a:	00011617          	auipc	a2,0x11
    8002645e:	11660613          	addi	a2,a2,278 # 80037570 <__func__.0+0xa4b8>
    80026462:	00007517          	auipc	a0,0x7
    80026466:	f4e50513          	addi	a0,a0,-178 # 8002d3b0 <__func__.0+0x2f8>
    8002646a:	1ed040ef          	jal	8002ae56 <printf>
    8002646e:	0002e797          	auipc	a5,0x2e
    80026472:	ba37c783          	lbu	a5,-1117(a5) # 80054011 <excpt+0x1>
    80026476:	00007597          	auipc	a1,0x7
    8002647a:	f1258593          	addi	a1,a1,-238 # 8002d388 <__func__.0+0x2d0>
    8002647e:	cf89                	beqz	a5,80026498 <stateen_ENVCFG_test_4+0x150>
    80026480:	6498                	ld	a4,8(s1)
    80026482:	47d9                	li	a5,22
    80026484:	00007597          	auipc	a1,0x7
    80026488:	ef458593          	addi	a1,a1,-268 # 8002d378 <__func__.0+0x2c0>
    8002648c:	00f70663          	beq	a4,a5,80026498 <stateen_ENVCFG_test_4+0x150>
    80026490:	00007597          	auipc	a1,0x7
    80026494:	ef858593          	addi	a1,a1,-264 # 8002d388 <__func__.0+0x2d0>
    80026498:	00007517          	auipc	a0,0x7
    8002649c:	f3050513          	addi	a0,a0,-208 # 8002d3c8 <__func__.0+0x310>
    800264a0:	1b7040ef          	jal	8002ae56 <printf>
    800264a4:	0002e797          	auipc	a5,0x2e
    800264a8:	b6d7c783          	lbu	a5,-1171(a5) # 80054011 <excpt+0x1>
    800264ac:	c789                	beqz	a5,800264b6 <stateen_ENVCFG_test_4+0x16e>
    800264ae:	6498                	ld	a4,8(s1)
    800264b0:	47d9                	li	a5,22
    800264b2:	00f70c63          	beq	a4,a5,800264ca <stateen_ENVCFG_test_4+0x182>
    800264b6:	00007517          	auipc	a0,0x7
    800264ba:	f1a50513          	addi	a0,a0,-230 # 8002d3d0 <__func__.0+0x318>
    800264be:	199040ef          	jal	8002ae56 <printf>
    800264c2:	02900513          	li	a0,41
    800264c6:	67e030ef          	jal	80029b44 <putchar>
    800264ca:	4529                	li	a0,10
    800264cc:	678030ef          	jal	80029b44 <putchar>
    800264d0:	c015                	beqz	s0,800264f4 <stateen_ENVCFG_test_4+0x1ac>
    800264d2:	0002e417          	auipc	s0,0x2e
    800264d6:	b3f44403          	lbu	s0,-1217(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    800264da:	00007597          	auipc	a1,0x7
    800264de:	eae58593          	addi	a1,a1,-338 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264e2:	cc11                	beqz	s0,800264fe <stateen_ENVCFG_test_4+0x1b6>
    800264e4:	6498                	ld	a4,8(s1)
    800264e6:	47d9                	li	a5,22
    TEST_END();
    800264e8:	00007597          	auipc	a1,0x7
    800264ec:	e9058593          	addi	a1,a1,-368 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264f0:	00f70763          	beq	a4,a5,800264fe <stateen_ENVCFG_test_4+0x1b6>
    800264f4:	4401                	li	s0,0
    TEST_END();
    800264f6:	00007597          	auipc	a1,0x7
    800264fa:	e9258593          	addi	a1,a1,-366 # 8002d388 <__func__.0+0x2d0>
    800264fe:	00007517          	auipc	a0,0x7
    80026502:	f3250513          	addi	a0,a0,-206 # 8002d430 <__func__.0+0x378>
    80026506:	151040ef          	jal	8002ae56 <printf>
    8002650a:	4511                	li	a0,4
    8002650c:	9fdda0ef          	jal	80000f08 <goto_priv>
    80026510:	b14db0ef          	jal	80001824 <reset_state>

}
    80026514:	60e2                	ld	ra,24(sp)
    80026516:	8522                	mv	a0,s0
    80026518:	6442                	ld	s0,16(sp)
    8002651a:	64a2                	ld	s1,8(sp)
    8002651c:	6105                	addi	sp,sp,32
    8002651e:	8082                	ret

0000000080026520 <stateen_ENVCFG_test_5>:

bool stateen_ENVCFG_test_5(){
    80026520:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=0,hs mode 不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026522:	00007597          	auipc	a1,0x7
    80026526:	90658593          	addi	a1,a1,-1786 # 8002ce28 <__func__.10>
    8002652a:	00007517          	auipc	a0,0x7
    8002652e:	e6e50513          	addi	a0,a0,-402 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_5(){
    80026532:	ec06                	sd	ra,24(sp)
    80026534:	e822                	sd	s0,16(sp)
    80026536:	e426                	sd	s1,8(sp)
    TEST_START();
    80026538:	11f040ef          	jal	8002ae56 <printf>
    8002653c:	4529                	li	a0,10
    8002653e:	606030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80026542:	4511                	li	a0,4
    80026544:	9c5da0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026548:	4785                	li	a5,1
    8002654a:	17fa                	slli	a5,a5,0x3e
    8002654c:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80026550:	450d                	li	a0,3
    80026552:	9b7da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026556:	8b7da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002655a:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002655e:	af1da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register cause to illegal except when mstateen.envcfg=0",
    80026562:	08200593          	li	a1,130
    80026566:	00011617          	auipc	a2,0x11
    8002656a:	06260613          	addi	a2,a2,98 # 800375c8 <__func__.0+0xa510>
    8002656e:	00007517          	auipc	a0,0x7
    80026572:	e4250513          	addi	a0,a0,-446 # 8002d3b0 <__func__.0+0x2f8>
    80026576:	0e1040ef          	jal	8002ae56 <printf>
    8002657a:	0002e797          	auipc	a5,0x2e
    8002657e:	a977c783          	lbu	a5,-1385(a5) # 80054011 <excpt+0x1>
    80026582:	0002e497          	auipc	s1,0x2e
    80026586:	a8e48493          	addi	s1,s1,-1394 # 80054010 <excpt>
    8002658a:	00007597          	auipc	a1,0x7
    8002658e:	dfe58593          	addi	a1,a1,-514 # 8002d388 <__func__.0+0x2d0>
    80026592:	cf89                	beqz	a5,800265ac <stateen_ENVCFG_test_5+0x8c>
    80026594:	6498                	ld	a4,8(s1)
    80026596:	4789                	li	a5,2
    80026598:	00007597          	auipc	a1,0x7
    8002659c:	de058593          	addi	a1,a1,-544 # 8002d378 <__func__.0+0x2c0>
    800265a0:	00f70663          	beq	a4,a5,800265ac <stateen_ENVCFG_test_5+0x8c>
    800265a4:	00007597          	auipc	a1,0x7
    800265a8:	de458593          	addi	a1,a1,-540 # 8002d388 <__func__.0+0x2d0>
    800265ac:	00007517          	auipc	a0,0x7
    800265b0:	e1c50513          	addi	a0,a0,-484 # 8002d3c8 <__func__.0+0x310>
    800265b4:	0a3040ef          	jal	8002ae56 <printf>
    800265b8:	0002e797          	auipc	a5,0x2e
    800265bc:	a597c783          	lbu	a5,-1447(a5) # 80054011 <excpt+0x1>
    800265c0:	c789                	beqz	a5,800265ca <stateen_ENVCFG_test_5+0xaa>
    800265c2:	6498                	ld	a4,8(s1)
    800265c4:	4789                	li	a5,2
    800265c6:	00f70c63          	beq	a4,a5,800265de <stateen_ENVCFG_test_5+0xbe>
    800265ca:	00007517          	auipc	a0,0x7
    800265ce:	e0650513          	addi	a0,a0,-506 # 8002d3d0 <__func__.0+0x318>
    800265d2:	085040ef          	jal	8002ae56 <printf>
    800265d6:	02900513          	li	a0,41
    800265da:	56a030ef          	jal	80029b44 <putchar>
    800265de:	4529                	li	a0,10
    800265e0:	564030ef          	jal	80029b44 <putchar>
    800265e4:	0002e797          	auipc	a5,0x2e
    800265e8:	a2d7c783          	lbu	a5,-1491(a5) # 80054011 <excpt+0x1>
    800265ec:	4401                	li	s0,0
    800265ee:	c789                	beqz	a5,800265f8 <stateen_ENVCFG_test_5+0xd8>
    800265f0:	6480                	ld	s0,8(s1)
    800265f2:	1479                	addi	s0,s0,-2
    800265f4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    800265f8:	450d                	li	a0,3
    800265fa:	90fda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800265fe:	80fda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026602:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026606:	a49da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002660a:	08200593          	li	a1,130
    8002660e:	00011617          	auipc	a2,0x11
    80026612:	00a60613          	addi	a2,a2,10 # 80037618 <__func__.0+0xa560>
    80026616:	00007517          	auipc	a0,0x7
    8002661a:	d9a50513          	addi	a0,a0,-614 # 8002d3b0 <__func__.0+0x2f8>
    8002661e:	039040ef          	jal	8002ae56 <printf>
    80026622:	0002e797          	auipc	a5,0x2e
    80026626:	9ef7c783          	lbu	a5,-1553(a5) # 80054011 <excpt+0x1>
    8002662a:	00007597          	auipc	a1,0x7
    8002662e:	d5e58593          	addi	a1,a1,-674 # 8002d388 <__func__.0+0x2d0>
    80026632:	cf89                	beqz	a5,8002664c <stateen_ENVCFG_test_5+0x12c>
    80026634:	6498                	ld	a4,8(s1)
    80026636:	4789                	li	a5,2
    80026638:	00007597          	auipc	a1,0x7
    8002663c:	d4058593          	addi	a1,a1,-704 # 8002d378 <__func__.0+0x2c0>
    80026640:	00f70663          	beq	a4,a5,8002664c <stateen_ENVCFG_test_5+0x12c>
    80026644:	00007597          	auipc	a1,0x7
    80026648:	d4458593          	addi	a1,a1,-700 # 8002d388 <__func__.0+0x2d0>
    8002664c:	00007517          	auipc	a0,0x7
    80026650:	d7c50513          	addi	a0,a0,-644 # 8002d3c8 <__func__.0+0x310>
    80026654:	003040ef          	jal	8002ae56 <printf>
    80026658:	0002e797          	auipc	a5,0x2e
    8002665c:	9b97c783          	lbu	a5,-1607(a5) # 80054011 <excpt+0x1>
    80026660:	c789                	beqz	a5,8002666a <stateen_ENVCFG_test_5+0x14a>
    80026662:	6498                	ld	a4,8(s1)
    80026664:	4789                	li	a5,2
    80026666:	00f70c63          	beq	a4,a5,8002667e <stateen_ENVCFG_test_5+0x15e>
    8002666a:	00007517          	auipc	a0,0x7
    8002666e:	d6650513          	addi	a0,a0,-666 # 8002d3d0 <__func__.0+0x318>
    80026672:	7e4040ef          	jal	8002ae56 <printf>
    80026676:	02900513          	li	a0,41
    8002667a:	4ca030ef          	jal	80029b44 <putchar>
    8002667e:	4529                	li	a0,10
    80026680:	4c4030ef          	jal	80029b44 <putchar>
    80026684:	c015                	beqz	s0,800266a8 <stateen_ENVCFG_test_5+0x188>
    80026686:	0002e417          	auipc	s0,0x2e
    8002668a:	98b44403          	lbu	s0,-1653(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    8002668e:	00007597          	auipc	a1,0x7
    80026692:	cfa58593          	addi	a1,a1,-774 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026696:	cc11                	beqz	s0,800266b2 <stateen_ENVCFG_test_5+0x192>
    80026698:	6498                	ld	a4,8(s1)
    8002669a:	4789                	li	a5,2
    TEST_END();
    8002669c:	00007597          	auipc	a1,0x7
    800266a0:	cdc58593          	addi	a1,a1,-804 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800266a4:	00f70763          	beq	a4,a5,800266b2 <stateen_ENVCFG_test_5+0x192>
    800266a8:	4401                	li	s0,0
    TEST_END();
    800266aa:	00007597          	auipc	a1,0x7
    800266ae:	cde58593          	addi	a1,a1,-802 # 8002d388 <__func__.0+0x2d0>
    800266b2:	00007517          	auipc	a0,0x7
    800266b6:	d7e50513          	addi	a0,a0,-642 # 8002d430 <__func__.0+0x378>
    800266ba:	79c040ef          	jal	8002ae56 <printf>
    800266be:	4511                	li	a0,4
    800266c0:	849da0ef          	jal	80000f08 <goto_priv>
    800266c4:	960db0ef          	jal	80001824 <reset_state>

}
    800266c8:	60e2                	ld	ra,24(sp)
    800266ca:	8522                	mv	a0,s0
    800266cc:	6442                	ld	s0,16(sp)
    800266ce:	64a2                	ld	s1,8(sp)
    800266d0:	6105                	addi	sp,sp,32
    800266d2:	8082                	ret

00000000800266d4 <stateen_ENVCFG_test_6>:


bool stateen_ENVCFG_test_6(){
    800266d4:	1101                	addi	sp,sp,-32

    TEST_START();
    800266d6:	00006597          	auipc	a1,0x6
    800266da:	76a58593          	addi	a1,a1,1898 # 8002ce40 <__func__.9>
    800266de:	00007517          	auipc	a0,0x7
    800266e2:	cba50513          	addi	a0,a0,-838 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_6(){
    800266e6:	ec06                	sd	ra,24(sp)
    800266e8:	e822                	sd	s0,16(sp)
    800266ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800266ec:	76a040ef          	jal	8002ae56 <printf>
    800266f0:	4529                	li	a0,10
    800266f2:	452030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800266f6:	4511                	li	a0,4
    800266f8:	811da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1,v=0时,可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800266fc:	4785                	li	a5,1
    800266fe:	17fa                	slli	a5,a5,0x3e
    80026700:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026704:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80026708:	450d                	li	a0,3
    8002670a:	ffeda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002670e:	efeda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026712:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026716:	939da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    8002671a:	08200593          	li	a1,130
    8002671e:	00011617          	auipc	a2,0x11
    80026722:	f4a60613          	addi	a2,a2,-182 # 80037668 <__func__.0+0xa5b0>
    80026726:	00007517          	auipc	a0,0x7
    8002672a:	c8a50513          	addi	a0,a0,-886 # 8002d3b0 <__func__.0+0x2f8>
    8002672e:	728040ef          	jal	8002ae56 <printf>
    80026732:	0002e797          	auipc	a5,0x2e
    80026736:	8df7c783          	lbu	a5,-1825(a5) # 80054011 <excpt+0x1>
    8002673a:	00007597          	auipc	a1,0x7
    8002673e:	c3e58593          	addi	a1,a1,-962 # 8002d378 <__func__.0+0x2c0>
    80026742:	c789                	beqz	a5,8002674c <stateen_ENVCFG_test_6+0x78>
    80026744:	00007597          	auipc	a1,0x7
    80026748:	c4458593          	addi	a1,a1,-956 # 8002d388 <__func__.0+0x2d0>
    8002674c:	00007517          	auipc	a0,0x7
    80026750:	c7c50513          	addi	a0,a0,-900 # 8002d3c8 <__func__.0+0x310>
    80026754:	702040ef          	jal	8002ae56 <printf>
    80026758:	0002e797          	auipc	a5,0x2e
    8002675c:	8b97c783          	lbu	a5,-1863(a5) # 80054011 <excpt+0x1>
    80026760:	2c079e63          	bnez	a5,80026a3c <stateen_ENVCFG_test_6+0x368>
    80026764:	4529                	li	a0,10
    80026766:	3de030ef          	jal	80029b44 <putchar>
    8002676a:	0002e497          	auipc	s1,0x2e
    8002676e:	8a74c483          	lbu	s1,-1881(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SENVCFG);
    80026772:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026776:	8d9da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    8002677a:	08200593          	li	a1,130
    8002677e:	00011617          	auipc	a2,0x11
    80026782:	f4260613          	addi	a2,a2,-190 # 800376c0 <__func__.0+0xa608>
    80026786:	00007517          	auipc	a0,0x7
    8002678a:	c2a50513          	addi	a0,a0,-982 # 8002d3b0 <__func__.0+0x2f8>
    8002678e:	6c8040ef          	jal	8002ae56 <printf>
    80026792:	0002e797          	auipc	a5,0x2e
    80026796:	87f7c783          	lbu	a5,-1921(a5) # 80054011 <excpt+0x1>
    8002679a:	00007597          	auipc	a1,0x7
    8002679e:	bee58593          	addi	a1,a1,-1042 # 8002d388 <__func__.0+0x2d0>
    800267a2:	e789                	bnez	a5,800267ac <stateen_ENVCFG_test_6+0xd8>
    800267a4:	00007597          	auipc	a1,0x7
    800267a8:	bd458593          	addi	a1,a1,-1068 # 8002d378 <__func__.0+0x2c0>
    800267ac:	00007517          	auipc	a0,0x7
    800267b0:	c1c50513          	addi	a0,a0,-996 # 8002d3c8 <__func__.0+0x310>
    800267b4:	6a2040ef          	jal	8002ae56 <printf>
    800267b8:	0002e797          	auipc	a5,0x2e
    800267bc:	8597c783          	lbu	a5,-1959(a5) # 80054011 <excpt+0x1>
    800267c0:	26079363          	bnez	a5,80026a26 <stateen_ENVCFG_test_6+0x352>
    800267c4:	4529                	li	a0,10
    800267c6:	37e030ef          	jal	80029b44 <putchar>
    800267ca:	4401                	li	s0,0
    800267cc:	e499                	bnez	s1,800267da <stateen_ENVCFG_test_6+0x106>
    800267ce:	0002e417          	auipc	s0,0x2e
    800267d2:	84344403          	lbu	s0,-1981(s0) # 80054011 <excpt+0x1>
    800267d6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    800267da:	4505                	li	a0,1
    800267dc:	f2cda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800267e0:	e2cda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800267e4:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800267e8:	867da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800267ec:	08200593          	li	a1,130
    800267f0:	00011617          	auipc	a2,0x11
    800267f4:	f2860613          	addi	a2,a2,-216 # 80037718 <__func__.0+0xa660>
    800267f8:	00007517          	auipc	a0,0x7
    800267fc:	bb850513          	addi	a0,a0,-1096 # 8002d3b0 <__func__.0+0x2f8>
    80026800:	656040ef          	jal	8002ae56 <printf>
    80026804:	0002e797          	auipc	a5,0x2e
    80026808:	80d7c783          	lbu	a5,-2035(a5) # 80054011 <excpt+0x1>
    8002680c:	00007597          	auipc	a1,0x7
    80026810:	b7c58593          	addi	a1,a1,-1156 # 8002d388 <__func__.0+0x2d0>
    80026814:	e789                	bnez	a5,8002681e <stateen_ENVCFG_test_6+0x14a>
    80026816:	00007597          	auipc	a1,0x7
    8002681a:	b6258593          	addi	a1,a1,-1182 # 8002d378 <__func__.0+0x2c0>
    8002681e:	00007517          	auipc	a0,0x7
    80026822:	baa50513          	addi	a0,a0,-1110 # 8002d3c8 <__func__.0+0x310>
    80026826:	630040ef          	jal	8002ae56 <printf>
    8002682a:	0002d797          	auipc	a5,0x2d
    8002682e:	7e77c783          	lbu	a5,2023(a5) # 80054011 <excpt+0x1>
    80026832:	1c079f63          	bnez	a5,80026a10 <stateen_ENVCFG_test_6+0x33c>
    80026836:	4529                	li	a0,10
    80026838:	30c030ef          	jal	80029b44 <putchar>
    8002683c:	c419                	beqz	s0,8002684a <stateen_ENVCFG_test_6+0x176>
    8002683e:	0002d417          	auipc	s0,0x2d
    80026842:	7d344403          	lbu	s0,2003(s0) # 80054011 <excpt+0x1>
    80026846:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    8002684a:	4505                	li	a0,1
    8002684c:	ebcda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026850:	dbcda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026854:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026858:	ff6da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002685c:	08200593          	li	a1,130
    80026860:	00011617          	auipc	a2,0x11
    80026864:	f1060613          	addi	a2,a2,-240 # 80037770 <__func__.0+0xa6b8>
    80026868:	00007517          	auipc	a0,0x7
    8002686c:	b4850513          	addi	a0,a0,-1208 # 8002d3b0 <__func__.0+0x2f8>
    80026870:	5e6040ef          	jal	8002ae56 <printf>
    80026874:	0002d797          	auipc	a5,0x2d
    80026878:	79d7c783          	lbu	a5,1949(a5) # 80054011 <excpt+0x1>
    8002687c:	00007597          	auipc	a1,0x7
    80026880:	b0c58593          	addi	a1,a1,-1268 # 8002d388 <__func__.0+0x2d0>
    80026884:	e789                	bnez	a5,8002688e <stateen_ENVCFG_test_6+0x1ba>
    80026886:	00007597          	auipc	a1,0x7
    8002688a:	af258593          	addi	a1,a1,-1294 # 8002d378 <__func__.0+0x2c0>
    8002688e:	00007517          	auipc	a0,0x7
    80026892:	b3a50513          	addi	a0,a0,-1222 # 8002d3c8 <__func__.0+0x310>
    80026896:	5c0040ef          	jal	8002ae56 <printf>
    8002689a:	0002d797          	auipc	a5,0x2d
    8002689e:	7777c783          	lbu	a5,1911(a5) # 80054011 <excpt+0x1>
    800268a2:	14079c63          	bnez	a5,800269fa <stateen_ENVCFG_test_6+0x326>
    800268a6:	4529                	li	a0,10
    800268a8:	29c030ef          	jal	80029b44 <putchar>
    800268ac:	c419                	beqz	s0,800268ba <stateen_ENVCFG_test_6+0x1e6>
    800268ae:	0002d417          	auipc	s0,0x2d
    800268b2:	76344403          	lbu	s0,1891(s0) # 80054011 <excpt+0x1>
    800268b6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800268ba:	4511                	li	a0,4
    800268bc:	e4cda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800268c0:	d4cda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800268c4:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800268c8:	f86da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800268cc:	08200593          	li	a1,130
    800268d0:	00011617          	auipc	a2,0x11
    800268d4:	ef860613          	addi	a2,a2,-264 # 800377c8 <__func__.0+0xa710>
    800268d8:	00007517          	auipc	a0,0x7
    800268dc:	ad850513          	addi	a0,a0,-1320 # 8002d3b0 <__func__.0+0x2f8>
    800268e0:	576040ef          	jal	8002ae56 <printf>
    800268e4:	0002d797          	auipc	a5,0x2d
    800268e8:	72d7c783          	lbu	a5,1837(a5) # 80054011 <excpt+0x1>
    800268ec:	00007597          	auipc	a1,0x7
    800268f0:	a9c58593          	addi	a1,a1,-1380 # 8002d388 <__func__.0+0x2d0>
    800268f4:	e789                	bnez	a5,800268fe <stateen_ENVCFG_test_6+0x22a>
    800268f6:	00007597          	auipc	a1,0x7
    800268fa:	a8258593          	addi	a1,a1,-1406 # 8002d378 <__func__.0+0x2c0>
    800268fe:	00007517          	auipc	a0,0x7
    80026902:	aca50513          	addi	a0,a0,-1334 # 8002d3c8 <__func__.0+0x310>
    80026906:	550040ef          	jal	8002ae56 <printf>
    8002690a:	0002d797          	auipc	a5,0x2d
    8002690e:	7077c783          	lbu	a5,1799(a5) # 80054011 <excpt+0x1>
    80026912:	0c079963          	bnez	a5,800269e4 <stateen_ENVCFG_test_6+0x310>
    80026916:	4529                	li	a0,10
    80026918:	22c030ef          	jal	80029b44 <putchar>
    8002691c:	c419                	beqz	s0,8002692a <stateen_ENVCFG_test_6+0x256>
    8002691e:	0002d417          	auipc	s0,0x2d
    80026922:	6f344403          	lbu	s0,1779(s0) # 80054011 <excpt+0x1>
    80026926:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    8002692a:	4511                	li	a0,4
    8002692c:	ddcda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026930:	cdcda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026934:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026938:	f16da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002693c:	08200593          	li	a1,130
    80026940:	00011617          	auipc	a2,0x11
    80026944:	ee060613          	addi	a2,a2,-288 # 80037820 <__func__.0+0xa768>
    80026948:	00007517          	auipc	a0,0x7
    8002694c:	a6850513          	addi	a0,a0,-1432 # 8002d3b0 <__func__.0+0x2f8>
    80026950:	506040ef          	jal	8002ae56 <printf>
    80026954:	0002d797          	auipc	a5,0x2d
    80026958:	6bd7c783          	lbu	a5,1725(a5) # 80054011 <excpt+0x1>
    8002695c:	00007597          	auipc	a1,0x7
    80026960:	a2c58593          	addi	a1,a1,-1492 # 8002d388 <__func__.0+0x2d0>
    80026964:	e789                	bnez	a5,8002696e <stateen_ENVCFG_test_6+0x29a>
    80026966:	00007597          	auipc	a1,0x7
    8002696a:	a1258593          	addi	a1,a1,-1518 # 8002d378 <__func__.0+0x2c0>
    8002696e:	00007517          	auipc	a0,0x7
    80026972:	a5a50513          	addi	a0,a0,-1446 # 8002d3c8 <__func__.0+0x310>
    80026976:	4e0040ef          	jal	8002ae56 <printf>
    8002697a:	0002d797          	auipc	a5,0x2d
    8002697e:	6977c783          	lbu	a5,1687(a5) # 80054011 <excpt+0x1>
    80026982:	e7b1                	bnez	a5,800269ce <stateen_ENVCFG_test_6+0x2fa>
    80026984:	4529                	li	a0,10
    80026986:	1be030ef          	jal	80029b44 <putchar>
    8002698a:	c411                	beqz	s0,80026996 <stateen_ENVCFG_test_6+0x2c2>
    8002698c:	0002d797          	auipc	a5,0x2d
    80026990:	6857c783          	lbu	a5,1669(a5) # 80054011 <excpt+0x1>
    80026994:	c79d                	beqz	a5,800269c2 <stateen_ENVCFG_test_6+0x2ee>
    80026996:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80026998:	00007597          	auipc	a1,0x7
    8002699c:	9f058593          	addi	a1,a1,-1552 # 8002d388 <__func__.0+0x2d0>
    800269a0:	00007517          	auipc	a0,0x7
    800269a4:	a9050513          	addi	a0,a0,-1392 # 8002d430 <__func__.0+0x378>
    800269a8:	4ae040ef          	jal	8002ae56 <printf>
    800269ac:	4511                	li	a0,4
    800269ae:	d5ada0ef          	jal	80000f08 <goto_priv>
    800269b2:	e73da0ef          	jal	80001824 <reset_state>

}
    800269b6:	60e2                	ld	ra,24(sp)
    800269b8:	8522                	mv	a0,s0
    800269ba:	6442                	ld	s0,16(sp)
    800269bc:	64a2                	ld	s1,8(sp)
    800269be:	6105                	addi	sp,sp,32
    800269c0:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269c2:	4405                	li	s0,1
    TEST_END();
    800269c4:	00007597          	auipc	a1,0x7
    800269c8:	9b458593          	addi	a1,a1,-1612 # 8002d378 <__func__.0+0x2c0>
    800269cc:	bfd1                	j	800269a0 <stateen_ENVCFG_test_6+0x2cc>
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269ce:	00007517          	auipc	a0,0x7
    800269d2:	a0250513          	addi	a0,a0,-1534 # 8002d3d0 <__func__.0+0x318>
    800269d6:	480040ef          	jal	8002ae56 <printf>
    800269da:	02900513          	li	a0,41
    800269de:	166030ef          	jal	80029b44 <putchar>
    800269e2:	b74d                	j	80026984 <stateen_ENVCFG_test_6+0x2b0>
    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269e4:	00007517          	auipc	a0,0x7
    800269e8:	9ec50513          	addi	a0,a0,-1556 # 8002d3d0 <__func__.0+0x318>
    800269ec:	46a040ef          	jal	8002ae56 <printf>
    800269f0:	02900513          	li	a0,41
    800269f4:	150030ef          	jal	80029b44 <putchar>
    800269f8:	bf39                	j	80026916 <stateen_ENVCFG_test_6+0x242>
    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269fa:	00007517          	auipc	a0,0x7
    800269fe:	9d650513          	addi	a0,a0,-1578 # 8002d3d0 <__func__.0+0x318>
    80026a02:	454040ef          	jal	8002ae56 <printf>
    80026a06:	02900513          	li	a0,41
    80026a0a:	13a030ef          	jal	80029b44 <putchar>
    80026a0e:	bd61                	j	800268a6 <stateen_ENVCFG_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026a10:	00007517          	auipc	a0,0x7
    80026a14:	9c050513          	addi	a0,a0,-1600 # 8002d3d0 <__func__.0+0x318>
    80026a18:	43e040ef          	jal	8002ae56 <printf>
    80026a1c:	02900513          	li	a0,41
    80026a20:	124030ef          	jal	80029b44 <putchar>
    80026a24:	bd09                	j	80026836 <stateen_ENVCFG_test_6+0x162>
    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026a26:	00007517          	auipc	a0,0x7
    80026a2a:	9aa50513          	addi	a0,a0,-1622 # 8002d3d0 <__func__.0+0x318>
    80026a2e:	428040ef          	jal	8002ae56 <printf>
    80026a32:	02900513          	li	a0,41
    80026a36:	10e030ef          	jal	80029b44 <putchar>
    80026a3a:	b369                	j	800267c4 <stateen_ENVCFG_test_6+0xf0>
    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026a3c:	00007517          	auipc	a0,0x7
    80026a40:	99450513          	addi	a0,a0,-1644 # 8002d3d0 <__func__.0+0x318>
    80026a44:	412040ef          	jal	8002ae56 <printf>
    80026a48:	02900513          	li	a0,41
    80026a4c:	0f8030ef          	jal	80029b44 <putchar>
    80026a50:	bb11                	j	80026764 <stateen_ENVCFG_test_6+0x90>

0000000080026a52 <stateen_ENVCFG_test_7>:


bool stateen_ENVCFG_test_7(){
    80026a52:	1101                	addi	sp,sp,-32

    TEST_START();
    80026a54:	00006597          	auipc	a1,0x6
    80026a58:	40458593          	addi	a1,a1,1028 # 8002ce58 <__func__.8>
    80026a5c:	00007517          	auipc	a0,0x7
    80026a60:	93c50513          	addi	a0,a0,-1732 # 8002d398 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_7(){
    80026a64:	ec06                	sd	ra,24(sp)
    80026a66:	e822                	sd	s0,16(sp)
    80026a68:	e426                	sd	s1,8(sp)
    TEST_START();
    80026a6a:	3ec040ef          	jal	8002ae56 <printf>
    80026a6e:	4529                	li	a0,10
    80026a70:	0d4030ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80026a74:	4511                	li	a0,4
    80026a76:	c92da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1 hstateen.ENVCFG=1,v=1 时可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026a7a:	4785                	li	a5,1
    80026a7c:	17fa                	slli	a5,a5,0x3e
    80026a7e:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026a82:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80026a86:	4509                	li	a0,2
    80026a88:	c80da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026a8c:	b80da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026a90:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026a94:	dbada0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026a98:	08200593          	li	a1,130
    80026a9c:	00011617          	auipc	a2,0x11
    80026aa0:	ddc60613          	addi	a2,a2,-548 # 80037878 <__func__.0+0xa7c0>
    80026aa4:	00007517          	auipc	a0,0x7
    80026aa8:	90c50513          	addi	a0,a0,-1780 # 8002d3b0 <__func__.0+0x2f8>
    80026aac:	3aa040ef          	jal	8002ae56 <printf>
    80026ab0:	0002d797          	auipc	a5,0x2d
    80026ab4:	5617c783          	lbu	a5,1377(a5) # 80054011 <excpt+0x1>
    80026ab8:	00007597          	auipc	a1,0x7
    80026abc:	8c058593          	addi	a1,a1,-1856 # 8002d378 <__func__.0+0x2c0>
    80026ac0:	c789                	beqz	a5,80026aca <stateen_ENVCFG_test_7+0x78>
    80026ac2:	00007597          	auipc	a1,0x7
    80026ac6:	8c658593          	addi	a1,a1,-1850 # 8002d388 <__func__.0+0x2d0>
    80026aca:	00007517          	auipc	a0,0x7
    80026ace:	8fe50513          	addi	a0,a0,-1794 # 8002d3c8 <__func__.0+0x310>
    80026ad2:	384040ef          	jal	8002ae56 <printf>
    80026ad6:	0002d797          	auipc	a5,0x2d
    80026ada:	53b7c783          	lbu	a5,1339(a5) # 80054011 <excpt+0x1>
    80026ade:	1c079d63          	bnez	a5,80026cb8 <stateen_ENVCFG_test_7+0x266>
    80026ae2:	4529                	li	a0,10
    80026ae4:	060030ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80026ae8:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026aea:	0002d497          	auipc	s1,0x2d
    80026aee:	5274c483          	lbu	s1,1319(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80026af2:	c16da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026af6:	b16da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026afa:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026afe:	d50da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026b02:	08200593          	li	a1,130
    80026b06:	00011617          	auipc	a2,0x11
    80026b0a:	dca60613          	addi	a2,a2,-566 # 800378d0 <__func__.0+0xa818>
    80026b0e:	00007517          	auipc	a0,0x7
    80026b12:	8a250513          	addi	a0,a0,-1886 # 8002d3b0 <__func__.0+0x2f8>
    80026b16:	340040ef          	jal	8002ae56 <printf>
    80026b1a:	0002d797          	auipc	a5,0x2d
    80026b1e:	4f77c783          	lbu	a5,1271(a5) # 80054011 <excpt+0x1>
    80026b22:	00007597          	auipc	a1,0x7
    80026b26:	86658593          	addi	a1,a1,-1946 # 8002d388 <__func__.0+0x2d0>
    80026b2a:	e789                	bnez	a5,80026b34 <stateen_ENVCFG_test_7+0xe2>
    80026b2c:	00007597          	auipc	a1,0x7
    80026b30:	84c58593          	addi	a1,a1,-1972 # 8002d378 <__func__.0+0x2c0>
    80026b34:	00007517          	auipc	a0,0x7
    80026b38:	89450513          	addi	a0,a0,-1900 # 8002d3c8 <__func__.0+0x310>
    80026b3c:	31a040ef          	jal	8002ae56 <printf>
    80026b40:	0002d797          	auipc	a5,0x2d
    80026b44:	4d17c783          	lbu	a5,1233(a5) # 80054011 <excpt+0x1>
    80026b48:	14079d63          	bnez	a5,80026ca2 <stateen_ENVCFG_test_7+0x250>
    80026b4c:	4529                	li	a0,10
    80026b4e:	7f7020ef          	jal	80029b44 <putchar>
    80026b52:	4401                	li	s0,0
    80026b54:	e499                	bnez	s1,80026b62 <stateen_ENVCFG_test_7+0x110>
    80026b56:	0002d417          	auipc	s0,0x2d
    80026b5a:	4bb44403          	lbu	s0,1211(s0) # 80054011 <excpt+0x1>
    80026b5e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80026b62:	4501                	li	a0,0
    80026b64:	ba4da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026b68:	aa4da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026b6c:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026b70:	cdeda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026b74:	08200593          	li	a1,130
    80026b78:	00011617          	auipc	a2,0x11
    80026b7c:	db060613          	addi	a2,a2,-592 # 80037928 <__func__.0+0xa870>
    80026b80:	00007517          	auipc	a0,0x7
    80026b84:	83050513          	addi	a0,a0,-2000 # 8002d3b0 <__func__.0+0x2f8>
    80026b88:	2ce040ef          	jal	8002ae56 <printf>
    80026b8c:	0002d797          	auipc	a5,0x2d
    80026b90:	4857c783          	lbu	a5,1157(a5) # 80054011 <excpt+0x1>
    80026b94:	00006597          	auipc	a1,0x6
    80026b98:	7f458593          	addi	a1,a1,2036 # 8002d388 <__func__.0+0x2d0>
    80026b9c:	e789                	bnez	a5,80026ba6 <stateen_ENVCFG_test_7+0x154>
    80026b9e:	00006597          	auipc	a1,0x6
    80026ba2:	7da58593          	addi	a1,a1,2010 # 8002d378 <__func__.0+0x2c0>
    80026ba6:	00007517          	auipc	a0,0x7
    80026baa:	82250513          	addi	a0,a0,-2014 # 8002d3c8 <__func__.0+0x310>
    80026bae:	2a8040ef          	jal	8002ae56 <printf>
    80026bb2:	0002d797          	auipc	a5,0x2d
    80026bb6:	45f7c783          	lbu	a5,1119(a5) # 80054011 <excpt+0x1>
    80026bba:	0c079963          	bnez	a5,80026c8c <stateen_ENVCFG_test_7+0x23a>
    80026bbe:	4529                	li	a0,10
    80026bc0:	785020ef          	jal	80029b44 <putchar>
    80026bc4:	c419                	beqz	s0,80026bd2 <stateen_ENVCFG_test_7+0x180>
    80026bc6:	0002d417          	auipc	s0,0x2d
    80026bca:	44b44403          	lbu	s0,1099(s0) # 80054011 <excpt+0x1>
    80026bce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80026bd2:	4501                	li	a0,0
    80026bd4:	b34da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026bd8:	a34da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026bdc:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026be0:	c6eda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026be4:	08200593          	li	a1,130
    80026be8:	00011617          	auipc	a2,0x11
    80026bec:	d9860613          	addi	a2,a2,-616 # 80037980 <__func__.0+0xa8c8>
    80026bf0:	00006517          	auipc	a0,0x6
    80026bf4:	7c050513          	addi	a0,a0,1984 # 8002d3b0 <__func__.0+0x2f8>
    80026bf8:	25e040ef          	jal	8002ae56 <printf>
    80026bfc:	0002d797          	auipc	a5,0x2d
    80026c00:	4157c783          	lbu	a5,1045(a5) # 80054011 <excpt+0x1>
    80026c04:	00006597          	auipc	a1,0x6
    80026c08:	78458593          	addi	a1,a1,1924 # 8002d388 <__func__.0+0x2d0>
    80026c0c:	e789                	bnez	a5,80026c16 <stateen_ENVCFG_test_7+0x1c4>
    80026c0e:	00006597          	auipc	a1,0x6
    80026c12:	76a58593          	addi	a1,a1,1898 # 8002d378 <__func__.0+0x2c0>
    80026c16:	00006517          	auipc	a0,0x6
    80026c1a:	7b250513          	addi	a0,a0,1970 # 8002d3c8 <__func__.0+0x310>
    80026c1e:	238040ef          	jal	8002ae56 <printf>
    80026c22:	0002d797          	auipc	a5,0x2d
    80026c26:	3ef7c783          	lbu	a5,1007(a5) # 80054011 <excpt+0x1>
    80026c2a:	e7b1                	bnez	a5,80026c76 <stateen_ENVCFG_test_7+0x224>
    80026c2c:	4529                	li	a0,10
    80026c2e:	717020ef          	jal	80029b44 <putchar>
    80026c32:	c411                	beqz	s0,80026c3e <stateen_ENVCFG_test_7+0x1ec>
    80026c34:	0002d797          	auipc	a5,0x2d
    80026c38:	3dd7c783          	lbu	a5,989(a5) # 80054011 <excpt+0x1>
    80026c3c:	c79d                	beqz	a5,80026c6a <stateen_ENVCFG_test_7+0x218>
    80026c3e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80026c40:	00006597          	auipc	a1,0x6
    80026c44:	74858593          	addi	a1,a1,1864 # 8002d388 <__func__.0+0x2d0>
    80026c48:	00006517          	auipc	a0,0x6
    80026c4c:	7e850513          	addi	a0,a0,2024 # 8002d430 <__func__.0+0x378>
    80026c50:	206040ef          	jal	8002ae56 <printf>
    80026c54:	4511                	li	a0,4
    80026c56:	ab2da0ef          	jal	80000f08 <goto_priv>
    80026c5a:	bcbda0ef          	jal	80001824 <reset_state>
}
    80026c5e:	60e2                	ld	ra,24(sp)
    80026c60:	8522                	mv	a0,s0
    80026c62:	6442                	ld	s0,16(sp)
    80026c64:	64a2                	ld	s1,8(sp)
    80026c66:	6105                	addi	sp,sp,32
    80026c68:	8082                	ret
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c6a:	4405                	li	s0,1
    TEST_END();
    80026c6c:	00006597          	auipc	a1,0x6
    80026c70:	70c58593          	addi	a1,a1,1804 # 8002d378 <__func__.0+0x2c0>
    80026c74:	bfd1                	j	80026c48 <stateen_ENVCFG_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c76:	00006517          	auipc	a0,0x6
    80026c7a:	75a50513          	addi	a0,a0,1882 # 8002d3d0 <__func__.0+0x318>
    80026c7e:	1d8040ef          	jal	8002ae56 <printf>
    80026c82:	02900513          	li	a0,41
    80026c86:	6bf020ef          	jal	80029b44 <putchar>
    80026c8a:	b74d                	j	80026c2c <stateen_ENVCFG_test_7+0x1da>
    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c8c:	00006517          	auipc	a0,0x6
    80026c90:	74450513          	addi	a0,a0,1860 # 8002d3d0 <__func__.0+0x318>
    80026c94:	1c2040ef          	jal	8002ae56 <printf>
    80026c98:	02900513          	li	a0,41
    80026c9c:	6a9020ef          	jal	80029b44 <putchar>
    80026ca0:	bf39                	j	80026bbe <stateen_ENVCFG_test_7+0x16c>
    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026ca2:	00006517          	auipc	a0,0x6
    80026ca6:	72e50513          	addi	a0,a0,1838 # 8002d3d0 <__func__.0+0x318>
    80026caa:	1ac040ef          	jal	8002ae56 <printf>
    80026cae:	02900513          	li	a0,41
    80026cb2:	693020ef          	jal	80029b44 <putchar>
    80026cb6:	bd59                	j	80026b4c <stateen_ENVCFG_test_7+0xfa>
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026cb8:	00006517          	auipc	a0,0x6
    80026cbc:	71850513          	addi	a0,a0,1816 # 8002d3d0 <__func__.0+0x318>
    80026cc0:	196040ef          	jal	8002ae56 <printf>
    80026cc4:	02900513          	li	a0,41
    80026cc8:	67d020ef          	jal	80029b44 <putchar>
    80026ccc:	bd19                	j	80026ae2 <stateen_ENVCFG_test_7+0x90>

0000000080026cce <stateen_SE0_test_1>:
// -------------




bool stateen_SE0_test_1(){
    80026cce:	1101                	addi	sp,sp,-32

    TEST_START();
    80026cd0:	00006597          	auipc	a1,0x6
    80026cd4:	1a058593          	addi	a1,a1,416 # 8002ce70 <__func__.7>
    80026cd8:	00006517          	auipc	a0,0x6
    80026cdc:	6c050513          	addi	a0,a0,1728 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_1(){
    80026ce0:	ec06                	sd	ra,24(sp)
    80026ce2:	e822                	sd	s0,16(sp)
    80026ce4:	e426                	sd	s1,8(sp)
    TEST_START();
    80026ce6:	170040ef          	jal	8002ae56 <printf>
    80026cea:	4529                	li	a0,10
    80026cec:	659020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80026cf0:	4511                	li	a0,4
    80026cf2:	a16da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=0,hu mode 不可访问Hstateen0和Sstateen0寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026cf6:	57fd                	li	a5,-1
    80026cf8:	17fe                	slli	a5,a5,0x3f
    80026cfa:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80026cfe:	4505                	li	a0,1
    80026d00:	a08da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026d04:	908da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026d08:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026d0c:	b42da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hstateen0 register cause to illegal except when mstateen.SE0=0",
    80026d10:	08200593          	li	a1,130
    80026d14:	00011617          	auipc	a2,0x11
    80026d18:	cc460613          	addi	a2,a2,-828 # 800379d8 <__func__.0+0xa920>
    80026d1c:	00006517          	auipc	a0,0x6
    80026d20:	69450513          	addi	a0,a0,1684 # 8002d3b0 <__func__.0+0x2f8>
    80026d24:	132040ef          	jal	8002ae56 <printf>
    80026d28:	0002d797          	auipc	a5,0x2d
    80026d2c:	2e97c783          	lbu	a5,745(a5) # 80054011 <excpt+0x1>
    80026d30:	0002d497          	auipc	s1,0x2d
    80026d34:	2e048493          	addi	s1,s1,736 # 80054010 <excpt>
    80026d38:	00006597          	auipc	a1,0x6
    80026d3c:	65058593          	addi	a1,a1,1616 # 8002d388 <__func__.0+0x2d0>
    80026d40:	cf89                	beqz	a5,80026d5a <stateen_SE0_test_1+0x8c>
    80026d42:	6498                	ld	a4,8(s1)
    80026d44:	4789                	li	a5,2
    80026d46:	00006597          	auipc	a1,0x6
    80026d4a:	63258593          	addi	a1,a1,1586 # 8002d378 <__func__.0+0x2c0>
    80026d4e:	00f70663          	beq	a4,a5,80026d5a <stateen_SE0_test_1+0x8c>
    80026d52:	00006597          	auipc	a1,0x6
    80026d56:	63658593          	addi	a1,a1,1590 # 8002d388 <__func__.0+0x2d0>
    80026d5a:	00006517          	auipc	a0,0x6
    80026d5e:	66e50513          	addi	a0,a0,1646 # 8002d3c8 <__func__.0+0x310>
    80026d62:	0f4040ef          	jal	8002ae56 <printf>
    80026d66:	0002d797          	auipc	a5,0x2d
    80026d6a:	2ab7c783          	lbu	a5,683(a5) # 80054011 <excpt+0x1>
    80026d6e:	c789                	beqz	a5,80026d78 <stateen_SE0_test_1+0xaa>
    80026d70:	6498                	ld	a4,8(s1)
    80026d72:	4789                	li	a5,2
    80026d74:	00f70c63          	beq	a4,a5,80026d8c <stateen_SE0_test_1+0xbe>
    80026d78:	00006517          	auipc	a0,0x6
    80026d7c:	65850513          	addi	a0,a0,1624 # 8002d3d0 <__func__.0+0x318>
    80026d80:	0d6040ef          	jal	8002ae56 <printf>
    80026d84:	02900513          	li	a0,41
    80026d88:	5bd020ef          	jal	80029b44 <putchar>
    80026d8c:	4529                	li	a0,10
    80026d8e:	5b7020ef          	jal	80029b44 <putchar>
    80026d92:	0002d797          	auipc	a5,0x2d
    80026d96:	27f7c783          	lbu	a5,639(a5) # 80054011 <excpt+0x1>
    80026d9a:	4401                	li	s0,0
    80026d9c:	c789                	beqz	a5,80026da6 <stateen_SE0_test_1+0xd8>
    80026d9e:	6480                	ld	s0,8(s1)
    80026da0:	1479                	addi	s0,s0,-2
    80026da2:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026da6:	4505                	li	a0,1
    80026da8:	960da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026dac:	860da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026db0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026db4:	a9ada0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026db8:	08200593          	li	a1,130
    80026dbc:	00011617          	auipc	a2,0x11
    80026dc0:	c6c60613          	addi	a2,a2,-916 # 80037a28 <__func__.0+0xa970>
    80026dc4:	00006517          	auipc	a0,0x6
    80026dc8:	5ec50513          	addi	a0,a0,1516 # 8002d3b0 <__func__.0+0x2f8>
    80026dcc:	08a040ef          	jal	8002ae56 <printf>
    80026dd0:	0002d797          	auipc	a5,0x2d
    80026dd4:	2417c783          	lbu	a5,577(a5) # 80054011 <excpt+0x1>
    80026dd8:	00006597          	auipc	a1,0x6
    80026ddc:	5b058593          	addi	a1,a1,1456 # 8002d388 <__func__.0+0x2d0>
    80026de0:	cf89                	beqz	a5,80026dfa <stateen_SE0_test_1+0x12c>
    80026de2:	6498                	ld	a4,8(s1)
    80026de4:	4789                	li	a5,2
    80026de6:	00006597          	auipc	a1,0x6
    80026dea:	59258593          	addi	a1,a1,1426 # 8002d378 <__func__.0+0x2c0>
    80026dee:	00f70663          	beq	a4,a5,80026dfa <stateen_SE0_test_1+0x12c>
    80026df2:	00006597          	auipc	a1,0x6
    80026df6:	59658593          	addi	a1,a1,1430 # 8002d388 <__func__.0+0x2d0>
    80026dfa:	00006517          	auipc	a0,0x6
    80026dfe:	5ce50513          	addi	a0,a0,1486 # 8002d3c8 <__func__.0+0x310>
    80026e02:	054040ef          	jal	8002ae56 <printf>
    80026e06:	0002d797          	auipc	a5,0x2d
    80026e0a:	20b7c783          	lbu	a5,523(a5) # 80054011 <excpt+0x1>
    80026e0e:	c789                	beqz	a5,80026e18 <stateen_SE0_test_1+0x14a>
    80026e10:	6498                	ld	a4,8(s1)
    80026e12:	4789                	li	a5,2
    80026e14:	00f70c63          	beq	a4,a5,80026e2c <stateen_SE0_test_1+0x15e>
    80026e18:	00006517          	auipc	a0,0x6
    80026e1c:	5b850513          	addi	a0,a0,1464 # 8002d3d0 <__func__.0+0x318>
    80026e20:	036040ef          	jal	8002ae56 <printf>
    80026e24:	02900513          	li	a0,41
    80026e28:	51d020ef          	jal	80029b44 <putchar>
    80026e2c:	4529                	li	a0,10
    80026e2e:	517020ef          	jal	80029b44 <putchar>
    80026e32:	c015                	beqz	s0,80026e56 <stateen_SE0_test_1+0x188>
    80026e34:	0002d417          	auipc	s0,0x2d
    80026e38:	1dd44403          	lbu	s0,477(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026e3c:	00006597          	auipc	a1,0x6
    80026e40:	54c58593          	addi	a1,a1,1356 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e44:	cc11                	beqz	s0,80026e60 <stateen_SE0_test_1+0x192>
    80026e46:	6498                	ld	a4,8(s1)
    80026e48:	4789                	li	a5,2
    TEST_END();
    80026e4a:	00006597          	auipc	a1,0x6
    80026e4e:	52e58593          	addi	a1,a1,1326 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e52:	00f70763          	beq	a4,a5,80026e60 <stateen_SE0_test_1+0x192>
    80026e56:	4401                	li	s0,0
    TEST_END();
    80026e58:	00006597          	auipc	a1,0x6
    80026e5c:	53058593          	addi	a1,a1,1328 # 8002d388 <__func__.0+0x2d0>
    80026e60:	00006517          	auipc	a0,0x6
    80026e64:	5d050513          	addi	a0,a0,1488 # 8002d430 <__func__.0+0x378>
    80026e68:	7ef030ef          	jal	8002ae56 <printf>
    80026e6c:	4511                	li	a0,4
    80026e6e:	89ada0ef          	jal	80000f08 <goto_priv>
    80026e72:	9b3da0ef          	jal	80001824 <reset_state>

}
    80026e76:	60e2                	ld	ra,24(sp)
    80026e78:	8522                	mv	a0,s0
    80026e7a:	6442                	ld	s0,16(sp)
    80026e7c:	64a2                	ld	s1,8(sp)
    80026e7e:	6105                	addi	sp,sp,32
    80026e80:	8082                	ret

0000000080026e82 <stateen_SE0_test_2>:

bool stateen_SE0_test_2(){
    80026e82:	1101                	addi	sp,sp,-32

    TEST_START();
    80026e84:	00006597          	auipc	a1,0x6
    80026e88:	00458593          	addi	a1,a1,4 # 8002ce88 <__func__.6>
    80026e8c:	00006517          	auipc	a0,0x6
    80026e90:	50c50513          	addi	a0,a0,1292 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_2(){
    80026e94:	ec06                	sd	ra,24(sp)
    80026e96:	e822                	sd	s0,16(sp)
    80026e98:	e426                	sd	s1,8(sp)
    TEST_START();
    80026e9a:	7bd030ef          	jal	8002ae56 <printf>
    80026e9e:	4529                	li	a0,10
    80026ea0:	4a5020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80026ea4:	4511                	li	a0,4
    80026ea6:	862da0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026eaa:	57fd                	li	a5,-1
    80026eac:	17fe                	slli	a5,a5,0x3f
    80026eae:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80026eb2:	60c7a073          	csrs	hstateen0,a5

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时,不可访问Hstateen0和Sstateen0寄存器
    goto_priv(PRIV_VU);
    80026eb6:	4501                	li	a0,0
    80026eb8:	850da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026ebc:	f51d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026ec0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026ec4:	98ada0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ec8:	08200593          	li	a1,130
    80026ecc:	00011617          	auipc	a2,0x11
    80026ed0:	bac60613          	addi	a2,a2,-1108 # 80037a78 <__func__.0+0xa9c0>
    80026ed4:	00006517          	auipc	a0,0x6
    80026ed8:	4dc50513          	addi	a0,a0,1244 # 8002d3b0 <__func__.0+0x2f8>
    80026edc:	77b030ef          	jal	8002ae56 <printf>
    80026ee0:	0002d797          	auipc	a5,0x2d
    80026ee4:	1317c783          	lbu	a5,305(a5) # 80054011 <excpt+0x1>
    80026ee8:	0002d497          	auipc	s1,0x2d
    80026eec:	12848493          	addi	s1,s1,296 # 80054010 <excpt>
    80026ef0:	00006597          	auipc	a1,0x6
    80026ef4:	49858593          	addi	a1,a1,1176 # 8002d388 <__func__.0+0x2d0>
    80026ef8:	cf89                	beqz	a5,80026f12 <stateen_SE0_test_2+0x90>
    80026efa:	6498                	ld	a4,8(s1)
    80026efc:	47d9                	li	a5,22
    80026efe:	00006597          	auipc	a1,0x6
    80026f02:	47a58593          	addi	a1,a1,1146 # 8002d378 <__func__.0+0x2c0>
    80026f06:	00f70663          	beq	a4,a5,80026f12 <stateen_SE0_test_2+0x90>
    80026f0a:	00006597          	auipc	a1,0x6
    80026f0e:	47e58593          	addi	a1,a1,1150 # 8002d388 <__func__.0+0x2d0>
    80026f12:	00006517          	auipc	a0,0x6
    80026f16:	4b650513          	addi	a0,a0,1206 # 8002d3c8 <__func__.0+0x310>
    80026f1a:	73d030ef          	jal	8002ae56 <printf>
    80026f1e:	0002d797          	auipc	a5,0x2d
    80026f22:	0f37c783          	lbu	a5,243(a5) # 80054011 <excpt+0x1>
    80026f26:	c789                	beqz	a5,80026f30 <stateen_SE0_test_2+0xae>
    80026f28:	6498                	ld	a4,8(s1)
    80026f2a:	47d9                	li	a5,22
    80026f2c:	00f70c63          	beq	a4,a5,80026f44 <stateen_SE0_test_2+0xc2>
    80026f30:	00006517          	auipc	a0,0x6
    80026f34:	4a050513          	addi	a0,a0,1184 # 8002d3d0 <__func__.0+0x318>
    80026f38:	71f030ef          	jal	8002ae56 <printf>
    80026f3c:	02900513          	li	a0,41
    80026f40:	405020ef          	jal	80029b44 <putchar>
    80026f44:	4529                	li	a0,10
    80026f46:	3ff020ef          	jal	80029b44 <putchar>
    80026f4a:	0002d797          	auipc	a5,0x2d
    80026f4e:	0c77c783          	lbu	a5,199(a5) # 80054011 <excpt+0x1>
    80026f52:	4401                	li	s0,0
    80026f54:	c789                	beqz	a5,80026f5e <stateen_SE0_test_2+0xdc>
    80026f56:	6480                	ld	s0,8(s1)
    80026f58:	1429                	addi	s0,s0,-22
    80026f5a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026f5e:	4501                	li	a0,0
    80026f60:	fa9d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026f64:	ea9d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026f68:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026f6c:	8e2da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026f70:	08200593          	li	a1,130
    80026f74:	00011617          	auipc	a2,0x11
    80026f78:	b5c60613          	addi	a2,a2,-1188 # 80037ad0 <__func__.0+0xaa18>
    80026f7c:	00006517          	auipc	a0,0x6
    80026f80:	43450513          	addi	a0,a0,1076 # 8002d3b0 <__func__.0+0x2f8>
    80026f84:	6d3030ef          	jal	8002ae56 <printf>
    80026f88:	0002d797          	auipc	a5,0x2d
    80026f8c:	0897c783          	lbu	a5,137(a5) # 80054011 <excpt+0x1>
    80026f90:	00006597          	auipc	a1,0x6
    80026f94:	3f858593          	addi	a1,a1,1016 # 8002d388 <__func__.0+0x2d0>
    80026f98:	cf89                	beqz	a5,80026fb2 <stateen_SE0_test_2+0x130>
    80026f9a:	6498                	ld	a4,8(s1)
    80026f9c:	47d9                	li	a5,22
    80026f9e:	00006597          	auipc	a1,0x6
    80026fa2:	3da58593          	addi	a1,a1,986 # 8002d378 <__func__.0+0x2c0>
    80026fa6:	00f70663          	beq	a4,a5,80026fb2 <stateen_SE0_test_2+0x130>
    80026faa:	00006597          	auipc	a1,0x6
    80026fae:	3de58593          	addi	a1,a1,990 # 8002d388 <__func__.0+0x2d0>
    80026fb2:	00006517          	auipc	a0,0x6
    80026fb6:	41650513          	addi	a0,a0,1046 # 8002d3c8 <__func__.0+0x310>
    80026fba:	69d030ef          	jal	8002ae56 <printf>
    80026fbe:	0002d797          	auipc	a5,0x2d
    80026fc2:	0537c783          	lbu	a5,83(a5) # 80054011 <excpt+0x1>
    80026fc6:	c789                	beqz	a5,80026fd0 <stateen_SE0_test_2+0x14e>
    80026fc8:	6498                	ld	a4,8(s1)
    80026fca:	47d9                	li	a5,22
    80026fcc:	00f70c63          	beq	a4,a5,80026fe4 <stateen_SE0_test_2+0x162>
    80026fd0:	00006517          	auipc	a0,0x6
    80026fd4:	40050513          	addi	a0,a0,1024 # 8002d3d0 <__func__.0+0x318>
    80026fd8:	67f030ef          	jal	8002ae56 <printf>
    80026fdc:	02900513          	li	a0,41
    80026fe0:	365020ef          	jal	80029b44 <putchar>
    80026fe4:	4529                	li	a0,10
    80026fe6:	35f020ef          	jal	80029b44 <putchar>
    80026fea:	c015                	beqz	s0,8002700e <stateen_SE0_test_2+0x18c>
    80026fec:	0002d417          	auipc	s0,0x2d
    80026ff0:	02544403          	lbu	s0,37(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80026ff4:	00006597          	auipc	a1,0x6
    80026ff8:	39458593          	addi	a1,a1,916 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ffc:	cc11                	beqz	s0,80027018 <stateen_SE0_test_2+0x196>
    80026ffe:	6498                	ld	a4,8(s1)
    80027000:	47d9                	li	a5,22
    TEST_END();
    80027002:	00006597          	auipc	a1,0x6
    80027006:	37658593          	addi	a1,a1,886 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002700a:	00f70763          	beq	a4,a5,80027018 <stateen_SE0_test_2+0x196>
    8002700e:	4401                	li	s0,0
    TEST_END();
    80027010:	00006597          	auipc	a1,0x6
    80027014:	37858593          	addi	a1,a1,888 # 8002d388 <__func__.0+0x2d0>
    80027018:	00006517          	auipc	a0,0x6
    8002701c:	41850513          	addi	a0,a0,1048 # 8002d430 <__func__.0+0x378>
    80027020:	637030ef          	jal	8002ae56 <printf>
    80027024:	4511                	li	a0,4
    80027026:	ee3d90ef          	jal	80000f08 <goto_priv>
    8002702a:	ffada0ef          	jal	80001824 <reset_state>

}
    8002702e:	60e2                	ld	ra,24(sp)
    80027030:	8522                	mv	a0,s0
    80027032:	6442                	ld	s0,16(sp)
    80027034:	64a2                	ld	s1,8(sp)
    80027036:	6105                	addi	sp,sp,32
    80027038:	8082                	ret

000000008002703a <stateen_SE0_test_3>:

bool stateen_SE0_test_3(){
    8002703a:	1141                	addi	sp,sp,-16

    //当mstateen.SE0=0,m mode 可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    8002703c:	00006597          	auipc	a1,0x6
    80027040:	e6458593          	addi	a1,a1,-412 # 8002cea0 <__func__.5>
    80027044:	00006517          	auipc	a0,0x6
    80027048:	35450513          	addi	a0,a0,852 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_3(){
    8002704c:	e406                	sd	ra,8(sp)
    8002704e:	e022                	sd	s0,0(sp)
    TEST_START();
    80027050:	607030ef          	jal	8002ae56 <printf>
    80027054:	4529                	li	a0,10
    80027056:	2ef020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002705a:	4511                	li	a0,4
    8002705c:	eadd90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027060:	57fd                	li	a5,-1
    80027062:	17fe                	slli	a5,a5,0x3f
    80027064:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80027068:	4511                	li	a0,4
    8002706a:	e9fd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002706e:	d9fd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027072:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027076:	fd9d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    8002707a:	08200593          	li	a1,130
    8002707e:	00011617          	auipc	a2,0x11
    80027082:	aaa60613          	addi	a2,a2,-1366 # 80037b28 <__func__.0+0xaa70>
    80027086:	00006517          	auipc	a0,0x6
    8002708a:	32a50513          	addi	a0,a0,810 # 8002d3b0 <__func__.0+0x2f8>
    8002708e:	5c9030ef          	jal	8002ae56 <printf>
    80027092:	0002d797          	auipc	a5,0x2d
    80027096:	f7f7c783          	lbu	a5,-129(a5) # 80054011 <excpt+0x1>
    8002709a:	00006597          	auipc	a1,0x6
    8002709e:	2de58593          	addi	a1,a1,734 # 8002d378 <__func__.0+0x2c0>
    800270a2:	c789                	beqz	a5,800270ac <stateen_SE0_test_3+0x72>
    800270a4:	00006597          	auipc	a1,0x6
    800270a8:	2e458593          	addi	a1,a1,740 # 8002d388 <__func__.0+0x2d0>
    800270ac:	00006517          	auipc	a0,0x6
    800270b0:	31c50513          	addi	a0,a0,796 # 8002d3c8 <__func__.0+0x310>
    800270b4:	5a3030ef          	jal	8002ae56 <printf>
    800270b8:	0002d797          	auipc	a5,0x2d
    800270bc:	f597c783          	lbu	a5,-167(a5) # 80054011 <excpt+0x1>
    800270c0:	e7e9                	bnez	a5,8002718a <stateen_SE0_test_3+0x150>
    800270c2:	4529                	li	a0,10
    800270c4:	281020ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800270c8:	4511                	li	a0,4
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800270ca:	0002d417          	auipc	s0,0x2d
    800270ce:	f4744403          	lbu	s0,-185(s0) # 80054011 <excpt+0x1>
    goto_priv(PRIV_M);
    800270d2:	e37d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800270d6:	d37d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800270da:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800270de:	f71d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800270e2:	08200593          	li	a1,130
    800270e6:	00011617          	auipc	a2,0x11
    800270ea:	a8260613          	addi	a2,a2,-1406 # 80037b68 <__func__.0+0xaab0>
    800270ee:	00006517          	auipc	a0,0x6
    800270f2:	2c250513          	addi	a0,a0,706 # 8002d3b0 <__func__.0+0x2f8>
    800270f6:	561030ef          	jal	8002ae56 <printf>
    800270fa:	0002d797          	auipc	a5,0x2d
    800270fe:	f177c783          	lbu	a5,-233(a5) # 80054011 <excpt+0x1>
    80027102:	00006597          	auipc	a1,0x6
    80027106:	28658593          	addi	a1,a1,646 # 8002d388 <__func__.0+0x2d0>
    8002710a:	e789                	bnez	a5,80027114 <stateen_SE0_test_3+0xda>
    8002710c:	00006597          	auipc	a1,0x6
    80027110:	26c58593          	addi	a1,a1,620 # 8002d378 <__func__.0+0x2c0>
    80027114:	00006517          	auipc	a0,0x6
    80027118:	2b450513          	addi	a0,a0,692 # 8002d3c8 <__func__.0+0x310>
    8002711c:	53b030ef          	jal	8002ae56 <printf>
    80027120:	0002d797          	auipc	a5,0x2d
    80027124:	ef17c783          	lbu	a5,-271(a5) # 80054011 <excpt+0x1>
    80027128:	e7b1                	bnez	a5,80027174 <stateen_SE0_test_3+0x13a>
    8002712a:	4529                	li	a0,10
    8002712c:	219020ef          	jal	80029b44 <putchar>
    80027130:	e815                	bnez	s0,80027164 <stateen_SE0_test_3+0x12a>
    80027132:	0002d797          	auipc	a5,0x2d
    80027136:	edf7c783          	lbu	a5,-289(a5) # 80054011 <excpt+0x1>
    8002713a:	c79d                	beqz	a5,80027168 <stateen_SE0_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    8002713c:	00006597          	auipc	a1,0x6
    80027140:	24c58593          	addi	a1,a1,588 # 8002d388 <__func__.0+0x2d0>
    80027144:	00006517          	auipc	a0,0x6
    80027148:	2ec50513          	addi	a0,a0,748 # 8002d430 <__func__.0+0x378>
    8002714c:	50b030ef          	jal	8002ae56 <printf>
    80027150:	4511                	li	a0,4
    80027152:	db7d90ef          	jal	80000f08 <goto_priv>
    80027156:	eceda0ef          	jal	80001824 <reset_state>

}
    8002715a:	60a2                	ld	ra,8(sp)
    8002715c:	8522                	mv	a0,s0
    8002715e:	6402                	ld	s0,0(sp)
    80027160:	0141                	addi	sp,sp,16
    80027162:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027164:	4401                	li	s0,0
    80027166:	bfd9                	j	8002713c <stateen_SE0_test_3+0x102>
    80027168:	4405                	li	s0,1
    TEST_END();
    8002716a:	00006597          	auipc	a1,0x6
    8002716e:	20e58593          	addi	a1,a1,526 # 8002d378 <__func__.0+0x2c0>
    80027172:	bfc9                	j	80027144 <stateen_SE0_test_3+0x10a>
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027174:	00006517          	auipc	a0,0x6
    80027178:	25c50513          	addi	a0,a0,604 # 8002d3d0 <__func__.0+0x318>
    8002717c:	4db030ef          	jal	8002ae56 <printf>
    80027180:	02900513          	li	a0,41
    80027184:	1c1020ef          	jal	80029b44 <putchar>
    80027188:	b74d                	j	8002712a <stateen_SE0_test_3+0xf0>
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    8002718a:	00006517          	auipc	a0,0x6
    8002718e:	24650513          	addi	a0,a0,582 # 8002d3d0 <__func__.0+0x318>
    80027192:	4c5030ef          	jal	8002ae56 <printf>
    80027196:	02900513          	li	a0,41
    8002719a:	1ab020ef          	jal	80029b44 <putchar>
    8002719e:	b715                	j	800270c2 <stateen_SE0_test_3+0x88>

00000000800271a0 <stateen_SE0_test_4>:


bool stateen_SE0_test_4(){
    800271a0:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800271a2:	00006597          	auipc	a1,0x6
    800271a6:	d1658593          	addi	a1,a1,-746 # 8002ceb8 <__func__.4>
    800271aa:	00006517          	auipc	a0,0x6
    800271ae:	1ee50513          	addi	a0,a0,494 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_4(){
    800271b2:	ec06                	sd	ra,24(sp)
    800271b4:	e822                	sd	s0,16(sp)
    800271b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800271b8:	49f030ef          	jal	8002ae56 <printf>
    800271bc:	4529                	li	a0,10
    800271be:	187020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800271c2:	4511                	li	a0,4
    800271c4:	d45d90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800271c8:	57fd                	li	a5,-1
    800271ca:	17fe                	slli	a5,a5,0x3f
    800271cc:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    800271d0:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800271d4:	30c025f3          	csrr	a1,mstateen0
    800271d8:	0000f517          	auipc	a0,0xf
    800271dc:	9a050513          	addi	a0,a0,-1632 # 80035b78 <__func__.0+0x8ac0>
    800271e0:	477030ef          	jal	8002ae56 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800271e4:	60c025f3          	csrr	a1,hstateen0
    800271e8:	0000f517          	auipc	a0,0xf
    800271ec:	9a050513          	addi	a0,a0,-1632 # 80035b88 <__func__.0+0x8ad0>
    800271f0:	467030ef          	jal	8002ae56 <printf>

    goto_priv(PRIV_VS);
    800271f4:	4509                	li	a0,2
    800271f6:	d13d90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800271fa:	c13d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800271fe:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027202:	e4dd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027206:	08200593          	li	a1,130
    8002720a:	00011617          	auipc	a2,0x11
    8002720e:	99e60613          	addi	a2,a2,-1634 # 80037ba8 <__func__.0+0xaaf0>
    80027212:	00006517          	auipc	a0,0x6
    80027216:	19e50513          	addi	a0,a0,414 # 8002d3b0 <__func__.0+0x2f8>
    8002721a:	43d030ef          	jal	8002ae56 <printf>
    8002721e:	0002d797          	auipc	a5,0x2d
    80027222:	df37c783          	lbu	a5,-525(a5) # 80054011 <excpt+0x1>
    80027226:	0002d497          	auipc	s1,0x2d
    8002722a:	dea48493          	addi	s1,s1,-534 # 80054010 <excpt>
    8002722e:	00006597          	auipc	a1,0x6
    80027232:	15a58593          	addi	a1,a1,346 # 8002d388 <__func__.0+0x2d0>
    80027236:	cf89                	beqz	a5,80027250 <stateen_SE0_test_4+0xb0>
    80027238:	6498                	ld	a4,8(s1)
    8002723a:	47d9                	li	a5,22
    8002723c:	00006597          	auipc	a1,0x6
    80027240:	13c58593          	addi	a1,a1,316 # 8002d378 <__func__.0+0x2c0>
    80027244:	00f70663          	beq	a4,a5,80027250 <stateen_SE0_test_4+0xb0>
    80027248:	00006597          	auipc	a1,0x6
    8002724c:	14058593          	addi	a1,a1,320 # 8002d388 <__func__.0+0x2d0>
    80027250:	00006517          	auipc	a0,0x6
    80027254:	17850513          	addi	a0,a0,376 # 8002d3c8 <__func__.0+0x310>
    80027258:	3ff030ef          	jal	8002ae56 <printf>
    8002725c:	0002d797          	auipc	a5,0x2d
    80027260:	db57c783          	lbu	a5,-587(a5) # 80054011 <excpt+0x1>
    80027264:	c789                	beqz	a5,8002726e <stateen_SE0_test_4+0xce>
    80027266:	6498                	ld	a4,8(s1)
    80027268:	47d9                	li	a5,22
    8002726a:	00f70c63          	beq	a4,a5,80027282 <stateen_SE0_test_4+0xe2>
    8002726e:	00006517          	auipc	a0,0x6
    80027272:	16250513          	addi	a0,a0,354 # 8002d3d0 <__func__.0+0x318>
    80027276:	3e1030ef          	jal	8002ae56 <printf>
    8002727a:	02900513          	li	a0,41
    8002727e:	0c7020ef          	jal	80029b44 <putchar>
    80027282:	4529                	li	a0,10
    80027284:	0c1020ef          	jal	80029b44 <putchar>
    80027288:	0002d797          	auipc	a5,0x2d
    8002728c:	d897c783          	lbu	a5,-631(a5) # 80054011 <excpt+0x1>
    80027290:	4401                	li	s0,0
    80027292:	c789                	beqz	a5,8002729c <stateen_SE0_test_4+0xfc>
    80027294:	6480                	ld	s0,8(s1)
    80027296:	1429                	addi	s0,s0,-22
    80027298:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8002729c:	4509                	li	a0,2
    8002729e:	c6bd90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800272a2:	b6bd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800272a6:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800272aa:	da5d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800272ae:	08200593          	li	a1,130
    800272b2:	00011617          	auipc	a2,0x11
    800272b6:	94e60613          	addi	a2,a2,-1714 # 80037c00 <__func__.0+0xab48>
    800272ba:	00006517          	auipc	a0,0x6
    800272be:	0f650513          	addi	a0,a0,246 # 8002d3b0 <__func__.0+0x2f8>
    800272c2:	395030ef          	jal	8002ae56 <printf>
    800272c6:	0002d797          	auipc	a5,0x2d
    800272ca:	d4b7c783          	lbu	a5,-693(a5) # 80054011 <excpt+0x1>
    800272ce:	00006597          	auipc	a1,0x6
    800272d2:	0ba58593          	addi	a1,a1,186 # 8002d388 <__func__.0+0x2d0>
    800272d6:	cf89                	beqz	a5,800272f0 <stateen_SE0_test_4+0x150>
    800272d8:	6498                	ld	a4,8(s1)
    800272da:	47d9                	li	a5,22
    800272dc:	00006597          	auipc	a1,0x6
    800272e0:	09c58593          	addi	a1,a1,156 # 8002d378 <__func__.0+0x2c0>
    800272e4:	00f70663          	beq	a4,a5,800272f0 <stateen_SE0_test_4+0x150>
    800272e8:	00006597          	auipc	a1,0x6
    800272ec:	0a058593          	addi	a1,a1,160 # 8002d388 <__func__.0+0x2d0>
    800272f0:	00006517          	auipc	a0,0x6
    800272f4:	0d850513          	addi	a0,a0,216 # 8002d3c8 <__func__.0+0x310>
    800272f8:	35f030ef          	jal	8002ae56 <printf>
    800272fc:	0002d797          	auipc	a5,0x2d
    80027300:	d157c783          	lbu	a5,-747(a5) # 80054011 <excpt+0x1>
    80027304:	c789                	beqz	a5,8002730e <stateen_SE0_test_4+0x16e>
    80027306:	6498                	ld	a4,8(s1)
    80027308:	47d9                	li	a5,22
    8002730a:	00f70c63          	beq	a4,a5,80027322 <stateen_SE0_test_4+0x182>
    8002730e:	00006517          	auipc	a0,0x6
    80027312:	0c250513          	addi	a0,a0,194 # 8002d3d0 <__func__.0+0x318>
    80027316:	341030ef          	jal	8002ae56 <printf>
    8002731a:	02900513          	li	a0,41
    8002731e:	027020ef          	jal	80029b44 <putchar>
    80027322:	4529                	li	a0,10
    80027324:	021020ef          	jal	80029b44 <putchar>
    80027328:	c015                	beqz	s0,8002734c <stateen_SE0_test_4+0x1ac>
    8002732a:	0002d417          	auipc	s0,0x2d
    8002732e:	ce744403          	lbu	s0,-793(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80027332:	00006597          	auipc	a1,0x6
    80027336:	05658593          	addi	a1,a1,86 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002733a:	cc11                	beqz	s0,80027356 <stateen_SE0_test_4+0x1b6>
    8002733c:	6498                	ld	a4,8(s1)
    8002733e:	47d9                	li	a5,22
    TEST_END();
    80027340:	00006597          	auipc	a1,0x6
    80027344:	03858593          	addi	a1,a1,56 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027348:	00f70763          	beq	a4,a5,80027356 <stateen_SE0_test_4+0x1b6>
    8002734c:	4401                	li	s0,0
    TEST_END();
    8002734e:	00006597          	auipc	a1,0x6
    80027352:	03a58593          	addi	a1,a1,58 # 8002d388 <__func__.0+0x2d0>
    80027356:	00006517          	auipc	a0,0x6
    8002735a:	0da50513          	addi	a0,a0,218 # 8002d430 <__func__.0+0x378>
    8002735e:	2f9030ef          	jal	8002ae56 <printf>
    80027362:	4511                	li	a0,4
    80027364:	ba5d90ef          	jal	80000f08 <goto_priv>
    80027368:	cbcda0ef          	jal	80001824 <reset_state>

}
    8002736c:	60e2                	ld	ra,24(sp)
    8002736e:	8522                	mv	a0,s0
    80027370:	6442                	ld	s0,16(sp)
    80027372:	64a2                	ld	s1,8(sp)
    80027374:	6105                	addi	sp,sp,32
    80027376:	8082                	ret

0000000080027378 <stateen_SE0_test_5>:

bool stateen_SE0_test_5(){
    80027378:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=0,hs mode 不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    8002737a:	00006597          	auipc	a1,0x6
    8002737e:	b5658593          	addi	a1,a1,-1194 # 8002ced0 <__func__.3>
    80027382:	00006517          	auipc	a0,0x6
    80027386:	01650513          	addi	a0,a0,22 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_5(){
    8002738a:	ec06                	sd	ra,24(sp)
    8002738c:	e822                	sd	s0,16(sp)
    8002738e:	e426                	sd	s1,8(sp)
    TEST_START();
    80027390:	2c7030ef          	jal	8002ae56 <printf>
    80027394:	4529                	li	a0,10
    80027396:	7ae020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002739a:	4511                	li	a0,4
    8002739c:	b6dd90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800273a0:	57fd                	li	a5,-1
    800273a2:	17fe                	slli	a5,a5,0x3f
    800273a4:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    800273a8:	450d                	li	a0,3
    800273aa:	b5fd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800273ae:	a5fd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800273b2:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800273b6:	c99d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register cause to illegal except when mstateen.SE0=0",
    800273ba:	08200593          	li	a1,130
    800273be:	00011617          	auipc	a2,0x11
    800273c2:	89a60613          	addi	a2,a2,-1894 # 80037c58 <__func__.0+0xaba0>
    800273c6:	00006517          	auipc	a0,0x6
    800273ca:	fea50513          	addi	a0,a0,-22 # 8002d3b0 <__func__.0+0x2f8>
    800273ce:	289030ef          	jal	8002ae56 <printf>
    800273d2:	0002d797          	auipc	a5,0x2d
    800273d6:	c3f7c783          	lbu	a5,-961(a5) # 80054011 <excpt+0x1>
    800273da:	0002d497          	auipc	s1,0x2d
    800273de:	c3648493          	addi	s1,s1,-970 # 80054010 <excpt>
    800273e2:	00006597          	auipc	a1,0x6
    800273e6:	fa658593          	addi	a1,a1,-90 # 8002d388 <__func__.0+0x2d0>
    800273ea:	cf89                	beqz	a5,80027404 <stateen_SE0_test_5+0x8c>
    800273ec:	6498                	ld	a4,8(s1)
    800273ee:	4789                	li	a5,2
    800273f0:	00006597          	auipc	a1,0x6
    800273f4:	f8858593          	addi	a1,a1,-120 # 8002d378 <__func__.0+0x2c0>
    800273f8:	00f70663          	beq	a4,a5,80027404 <stateen_SE0_test_5+0x8c>
    800273fc:	00006597          	auipc	a1,0x6
    80027400:	f8c58593          	addi	a1,a1,-116 # 8002d388 <__func__.0+0x2d0>
    80027404:	00006517          	auipc	a0,0x6
    80027408:	fc450513          	addi	a0,a0,-60 # 8002d3c8 <__func__.0+0x310>
    8002740c:	24b030ef          	jal	8002ae56 <printf>
    80027410:	0002d797          	auipc	a5,0x2d
    80027414:	c017c783          	lbu	a5,-1023(a5) # 80054011 <excpt+0x1>
    80027418:	c789                	beqz	a5,80027422 <stateen_SE0_test_5+0xaa>
    8002741a:	6498                	ld	a4,8(s1)
    8002741c:	4789                	li	a5,2
    8002741e:	00f70c63          	beq	a4,a5,80027436 <stateen_SE0_test_5+0xbe>
    80027422:	00006517          	auipc	a0,0x6
    80027426:	fae50513          	addi	a0,a0,-82 # 8002d3d0 <__func__.0+0x318>
    8002742a:	22d030ef          	jal	8002ae56 <printf>
    8002742e:	02900513          	li	a0,41
    80027432:	712020ef          	jal	80029b44 <putchar>
    80027436:	4529                	li	a0,10
    80027438:	70c020ef          	jal	80029b44 <putchar>
    8002743c:	0002d797          	auipc	a5,0x2d
    80027440:	bd57c783          	lbu	a5,-1067(a5) # 80054011 <excpt+0x1>
    80027444:	4401                	li	s0,0
    80027446:	c789                	beqz	a5,80027450 <stateen_SE0_test_5+0xd8>
    80027448:	6480                	ld	s0,8(s1)
    8002744a:	1479                	addi	s0,s0,-2
    8002744c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80027450:	450d                	li	a0,3
    80027452:	ab7d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027456:	9b7d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002745a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002745e:	bf1d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027462:	08200593          	li	a1,130
    80027466:	00011617          	auipc	a2,0x11
    8002746a:	84260613          	addi	a2,a2,-1982 # 80037ca8 <__func__.0+0xabf0>
    8002746e:	00006517          	auipc	a0,0x6
    80027472:	f4250513          	addi	a0,a0,-190 # 8002d3b0 <__func__.0+0x2f8>
    80027476:	1e1030ef          	jal	8002ae56 <printf>
    8002747a:	0002d797          	auipc	a5,0x2d
    8002747e:	b977c783          	lbu	a5,-1129(a5) # 80054011 <excpt+0x1>
    80027482:	00006597          	auipc	a1,0x6
    80027486:	f0658593          	addi	a1,a1,-250 # 8002d388 <__func__.0+0x2d0>
    8002748a:	cf89                	beqz	a5,800274a4 <stateen_SE0_test_5+0x12c>
    8002748c:	6498                	ld	a4,8(s1)
    8002748e:	4789                	li	a5,2
    80027490:	00006597          	auipc	a1,0x6
    80027494:	ee858593          	addi	a1,a1,-280 # 8002d378 <__func__.0+0x2c0>
    80027498:	00f70663          	beq	a4,a5,800274a4 <stateen_SE0_test_5+0x12c>
    8002749c:	00006597          	auipc	a1,0x6
    800274a0:	eec58593          	addi	a1,a1,-276 # 8002d388 <__func__.0+0x2d0>
    800274a4:	00006517          	auipc	a0,0x6
    800274a8:	f2450513          	addi	a0,a0,-220 # 8002d3c8 <__func__.0+0x310>
    800274ac:	1ab030ef          	jal	8002ae56 <printf>
    800274b0:	0002d797          	auipc	a5,0x2d
    800274b4:	b617c783          	lbu	a5,-1183(a5) # 80054011 <excpt+0x1>
    800274b8:	c789                	beqz	a5,800274c2 <stateen_SE0_test_5+0x14a>
    800274ba:	6498                	ld	a4,8(s1)
    800274bc:	4789                	li	a5,2
    800274be:	00f70c63          	beq	a4,a5,800274d6 <stateen_SE0_test_5+0x15e>
    800274c2:	00006517          	auipc	a0,0x6
    800274c6:	f0e50513          	addi	a0,a0,-242 # 8002d3d0 <__func__.0+0x318>
    800274ca:	18d030ef          	jal	8002ae56 <printf>
    800274ce:	02900513          	li	a0,41
    800274d2:	672020ef          	jal	80029b44 <putchar>
    800274d6:	4529                	li	a0,10
    800274d8:	66c020ef          	jal	80029b44 <putchar>
    800274dc:	c015                	beqz	s0,80027500 <stateen_SE0_test_5+0x188>
    800274de:	0002d417          	auipc	s0,0x2d
    800274e2:	b3344403          	lbu	s0,-1229(s0) # 80054011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    800274e6:	00006597          	auipc	a1,0x6
    800274ea:	ea258593          	addi	a1,a1,-350 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    800274ee:	cc11                	beqz	s0,8002750a <stateen_SE0_test_5+0x192>
    800274f0:	6498                	ld	a4,8(s1)
    800274f2:	4789                	li	a5,2
    TEST_END();
    800274f4:	00006597          	auipc	a1,0x6
    800274f8:	e8458593          	addi	a1,a1,-380 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    800274fc:	00f70763          	beq	a4,a5,8002750a <stateen_SE0_test_5+0x192>
    80027500:	4401                	li	s0,0
    TEST_END();
    80027502:	00006597          	auipc	a1,0x6
    80027506:	e8658593          	addi	a1,a1,-378 # 8002d388 <__func__.0+0x2d0>
    8002750a:	00006517          	auipc	a0,0x6
    8002750e:	f2650513          	addi	a0,a0,-218 # 8002d430 <__func__.0+0x378>
    80027512:	145030ef          	jal	8002ae56 <printf>
    80027516:	4511                	li	a0,4
    80027518:	9f1d90ef          	jal	80000f08 <goto_priv>
    8002751c:	b08da0ef          	jal	80001824 <reset_state>

}
    80027520:	60e2                	ld	ra,24(sp)
    80027522:	8522                	mv	a0,s0
    80027524:	6442                	ld	s0,16(sp)
    80027526:	64a2                	ld	s1,8(sp)
    80027528:	6105                	addi	sp,sp,32
    8002752a:	8082                	ret

000000008002752c <stateen_SE0_test_6>:


bool stateen_SE0_test_6(){
    8002752c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002752e:	00006597          	auipc	a1,0x6
    80027532:	9ba58593          	addi	a1,a1,-1606 # 8002cee8 <__func__.2>
    80027536:	00006517          	auipc	a0,0x6
    8002753a:	e6250513          	addi	a0,a0,-414 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_6(){
    8002753e:	ec06                	sd	ra,24(sp)
    80027540:	e822                	sd	s0,16(sp)
    80027542:	e426                	sd	s1,8(sp)
    TEST_START();
    80027544:	113030ef          	jal	8002ae56 <printf>
    80027548:	4529                	li	a0,10
    8002754a:	5fa020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    8002754e:	4511                	li	a0,4
    80027550:	9b9d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027554:	57fd                	li	a5,-1
    80027556:	17fe                	slli	a5,a5,0x3f
    80027558:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    8002755c:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80027560:	450d                	li	a0,3
    80027562:	9a7d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027566:	8a7d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002756a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002756e:	ae1d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027572:	08200593          	li	a1,130
    80027576:	00010617          	auipc	a2,0x10
    8002757a:	78260613          	addi	a2,a2,1922 # 80037cf8 <__func__.0+0xac40>
    8002757e:	00006517          	auipc	a0,0x6
    80027582:	e3250513          	addi	a0,a0,-462 # 8002d3b0 <__func__.0+0x2f8>
    80027586:	0d1030ef          	jal	8002ae56 <printf>
    8002758a:	0002d797          	auipc	a5,0x2d
    8002758e:	a877c783          	lbu	a5,-1401(a5) # 80054011 <excpt+0x1>
    80027592:	00006597          	auipc	a1,0x6
    80027596:	de658593          	addi	a1,a1,-538 # 8002d378 <__func__.0+0x2c0>
    8002759a:	c789                	beqz	a5,800275a4 <stateen_SE0_test_6+0x78>
    8002759c:	00006597          	auipc	a1,0x6
    800275a0:	dec58593          	addi	a1,a1,-532 # 8002d388 <__func__.0+0x2d0>
    800275a4:	00006517          	auipc	a0,0x6
    800275a8:	e2450513          	addi	a0,a0,-476 # 8002d3c8 <__func__.0+0x310>
    800275ac:	0ab030ef          	jal	8002ae56 <printf>
    800275b0:	0002d797          	auipc	a5,0x2d
    800275b4:	a617c783          	lbu	a5,-1439(a5) # 80054011 <excpt+0x1>
    800275b8:	2c079e63          	bnez	a5,80027894 <stateen_SE0_test_6+0x368>
    800275bc:	4529                	li	a0,10
    800275be:	586020ef          	jal	80029b44 <putchar>
    800275c2:	0002d497          	auipc	s1,0x2d
    800275c6:	a4f4c483          	lbu	s1,-1457(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    800275ca:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800275ce:	a81d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800275d2:	08200593          	li	a1,130
    800275d6:	00010617          	auipc	a2,0x10
    800275da:	77a60613          	addi	a2,a2,1914 # 80037d50 <__func__.0+0xac98>
    800275de:	00006517          	auipc	a0,0x6
    800275e2:	dd250513          	addi	a0,a0,-558 # 8002d3b0 <__func__.0+0x2f8>
    800275e6:	071030ef          	jal	8002ae56 <printf>
    800275ea:	0002d797          	auipc	a5,0x2d
    800275ee:	a277c783          	lbu	a5,-1497(a5) # 80054011 <excpt+0x1>
    800275f2:	00006597          	auipc	a1,0x6
    800275f6:	d9658593          	addi	a1,a1,-618 # 8002d388 <__func__.0+0x2d0>
    800275fa:	e789                	bnez	a5,80027604 <stateen_SE0_test_6+0xd8>
    800275fc:	00006597          	auipc	a1,0x6
    80027600:	d7c58593          	addi	a1,a1,-644 # 8002d378 <__func__.0+0x2c0>
    80027604:	00006517          	auipc	a0,0x6
    80027608:	dc450513          	addi	a0,a0,-572 # 8002d3c8 <__func__.0+0x310>
    8002760c:	04b030ef          	jal	8002ae56 <printf>
    80027610:	0002d797          	auipc	a5,0x2d
    80027614:	a017c783          	lbu	a5,-1535(a5) # 80054011 <excpt+0x1>
    80027618:	26079363          	bnez	a5,8002787e <stateen_SE0_test_6+0x352>
    8002761c:	4529                	li	a0,10
    8002761e:	526020ef          	jal	80029b44 <putchar>
    80027622:	4401                	li	s0,0
    80027624:	e499                	bnez	s1,80027632 <stateen_SE0_test_6+0x106>
    80027626:	0002d417          	auipc	s0,0x2d
    8002762a:	9eb44403          	lbu	s0,-1557(s0) # 80054011 <excpt+0x1>
    8002762e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027632:	4505                	li	a0,1
    80027634:	8d5d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027638:	fd4d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002763c:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027640:	a0fd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027644:	08200593          	li	a1,130
    80027648:	00010617          	auipc	a2,0x10
    8002764c:	76060613          	addi	a2,a2,1888 # 80037da8 <__func__.0+0xacf0>
    80027650:	00006517          	auipc	a0,0x6
    80027654:	d6050513          	addi	a0,a0,-672 # 8002d3b0 <__func__.0+0x2f8>
    80027658:	7fe030ef          	jal	8002ae56 <printf>
    8002765c:	0002d797          	auipc	a5,0x2d
    80027660:	9b57c783          	lbu	a5,-1611(a5) # 80054011 <excpt+0x1>
    80027664:	00006597          	auipc	a1,0x6
    80027668:	d2458593          	addi	a1,a1,-732 # 8002d388 <__func__.0+0x2d0>
    8002766c:	e789                	bnez	a5,80027676 <stateen_SE0_test_6+0x14a>
    8002766e:	00006597          	auipc	a1,0x6
    80027672:	d0a58593          	addi	a1,a1,-758 # 8002d378 <__func__.0+0x2c0>
    80027676:	00006517          	auipc	a0,0x6
    8002767a:	d5250513          	addi	a0,a0,-686 # 8002d3c8 <__func__.0+0x310>
    8002767e:	7d8030ef          	jal	8002ae56 <printf>
    80027682:	0002d797          	auipc	a5,0x2d
    80027686:	98f7c783          	lbu	a5,-1649(a5) # 80054011 <excpt+0x1>
    8002768a:	1c079f63          	bnez	a5,80027868 <stateen_SE0_test_6+0x33c>
    8002768e:	4529                	li	a0,10
    80027690:	4b4020ef          	jal	80029b44 <putchar>
    80027694:	c419                	beqz	s0,800276a2 <stateen_SE0_test_6+0x176>
    80027696:	0002d417          	auipc	s0,0x2d
    8002769a:	97b44403          	lbu	s0,-1669(s0) # 80054011 <excpt+0x1>
    8002769e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800276a2:	4505                	li	a0,1
    800276a4:	865d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800276a8:	f64d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800276ac:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800276b0:	99fd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800276b4:	08200593          	li	a1,130
    800276b8:	00010617          	auipc	a2,0x10
    800276bc:	74060613          	addi	a2,a2,1856 # 80037df8 <__func__.0+0xad40>
    800276c0:	00006517          	auipc	a0,0x6
    800276c4:	cf050513          	addi	a0,a0,-784 # 8002d3b0 <__func__.0+0x2f8>
    800276c8:	78e030ef          	jal	8002ae56 <printf>
    800276cc:	0002d797          	auipc	a5,0x2d
    800276d0:	9457c783          	lbu	a5,-1723(a5) # 80054011 <excpt+0x1>
    800276d4:	00006597          	auipc	a1,0x6
    800276d8:	cb458593          	addi	a1,a1,-844 # 8002d388 <__func__.0+0x2d0>
    800276dc:	e789                	bnez	a5,800276e6 <stateen_SE0_test_6+0x1ba>
    800276de:	00006597          	auipc	a1,0x6
    800276e2:	c9a58593          	addi	a1,a1,-870 # 8002d378 <__func__.0+0x2c0>
    800276e6:	00006517          	auipc	a0,0x6
    800276ea:	ce250513          	addi	a0,a0,-798 # 8002d3c8 <__func__.0+0x310>
    800276ee:	768030ef          	jal	8002ae56 <printf>
    800276f2:	0002d797          	auipc	a5,0x2d
    800276f6:	91f7c783          	lbu	a5,-1761(a5) # 80054011 <excpt+0x1>
    800276fa:	14079c63          	bnez	a5,80027852 <stateen_SE0_test_6+0x326>
    800276fe:	4529                	li	a0,10
    80027700:	444020ef          	jal	80029b44 <putchar>
    80027704:	c419                	beqz	s0,80027712 <stateen_SE0_test_6+0x1e6>
    80027706:	0002d417          	auipc	s0,0x2d
    8002770a:	90b44403          	lbu	s0,-1781(s0) # 80054011 <excpt+0x1>
    8002770e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027712:	4511                	li	a0,4
    80027714:	ff4d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027718:	ef4d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002771c:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027720:	92fd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027724:	08200593          	li	a1,130
    80027728:	00010617          	auipc	a2,0x10
    8002772c:	72860613          	addi	a2,a2,1832 # 80037e50 <__func__.0+0xad98>
    80027730:	00006517          	auipc	a0,0x6
    80027734:	c8050513          	addi	a0,a0,-896 # 8002d3b0 <__func__.0+0x2f8>
    80027738:	71e030ef          	jal	8002ae56 <printf>
    8002773c:	0002d797          	auipc	a5,0x2d
    80027740:	8d57c783          	lbu	a5,-1835(a5) # 80054011 <excpt+0x1>
    80027744:	00006597          	auipc	a1,0x6
    80027748:	c4458593          	addi	a1,a1,-956 # 8002d388 <__func__.0+0x2d0>
    8002774c:	e789                	bnez	a5,80027756 <stateen_SE0_test_6+0x22a>
    8002774e:	00006597          	auipc	a1,0x6
    80027752:	c2a58593          	addi	a1,a1,-982 # 8002d378 <__func__.0+0x2c0>
    80027756:	00006517          	auipc	a0,0x6
    8002775a:	c7250513          	addi	a0,a0,-910 # 8002d3c8 <__func__.0+0x310>
    8002775e:	6f8030ef          	jal	8002ae56 <printf>
    80027762:	0002d797          	auipc	a5,0x2d
    80027766:	8af7c783          	lbu	a5,-1873(a5) # 80054011 <excpt+0x1>
    8002776a:	0c079963          	bnez	a5,8002783c <stateen_SE0_test_6+0x310>
    8002776e:	4529                	li	a0,10
    80027770:	3d4020ef          	jal	80029b44 <putchar>
    80027774:	c419                	beqz	s0,80027782 <stateen_SE0_test_6+0x256>
    80027776:	0002d417          	auipc	s0,0x2d
    8002777a:	89b44403          	lbu	s0,-1893(s0) # 80054011 <excpt+0x1>
    8002777e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027782:	4511                	li	a0,4
    80027784:	f84d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027788:	e84d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002778c:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027790:	8bfd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027794:	08200593          	li	a1,130
    80027798:	00010617          	auipc	a2,0x10
    8002779c:	70860613          	addi	a2,a2,1800 # 80037ea0 <__func__.0+0xade8>
    800277a0:	00006517          	auipc	a0,0x6
    800277a4:	c1050513          	addi	a0,a0,-1008 # 8002d3b0 <__func__.0+0x2f8>
    800277a8:	6ae030ef          	jal	8002ae56 <printf>
    800277ac:	0002d797          	auipc	a5,0x2d
    800277b0:	8657c783          	lbu	a5,-1947(a5) # 80054011 <excpt+0x1>
    800277b4:	00006597          	auipc	a1,0x6
    800277b8:	bd458593          	addi	a1,a1,-1068 # 8002d388 <__func__.0+0x2d0>
    800277bc:	e789                	bnez	a5,800277c6 <stateen_SE0_test_6+0x29a>
    800277be:	00006597          	auipc	a1,0x6
    800277c2:	bba58593          	addi	a1,a1,-1094 # 8002d378 <__func__.0+0x2c0>
    800277c6:	00006517          	auipc	a0,0x6
    800277ca:	c0250513          	addi	a0,a0,-1022 # 8002d3c8 <__func__.0+0x310>
    800277ce:	688030ef          	jal	8002ae56 <printf>
    800277d2:	0002d797          	auipc	a5,0x2d
    800277d6:	83f7c783          	lbu	a5,-1985(a5) # 80054011 <excpt+0x1>
    800277da:	e7b1                	bnez	a5,80027826 <stateen_SE0_test_6+0x2fa>
    800277dc:	4529                	li	a0,10
    800277de:	366020ef          	jal	80029b44 <putchar>
    800277e2:	c411                	beqz	s0,800277ee <stateen_SE0_test_6+0x2c2>
    800277e4:	0002d797          	auipc	a5,0x2d
    800277e8:	82d7c783          	lbu	a5,-2003(a5) # 80054011 <excpt+0x1>
    800277ec:	c79d                	beqz	a5,8002781a <stateen_SE0_test_6+0x2ee>
    800277ee:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    800277f0:	00006597          	auipc	a1,0x6
    800277f4:	b9858593          	addi	a1,a1,-1128 # 8002d388 <__func__.0+0x2d0>
    800277f8:	00006517          	auipc	a0,0x6
    800277fc:	c3850513          	addi	a0,a0,-968 # 8002d430 <__func__.0+0x378>
    80027800:	656030ef          	jal	8002ae56 <printf>
    80027804:	4511                	li	a0,4
    80027806:	f02d90ef          	jal	80000f08 <goto_priv>
    8002780a:	81ada0ef          	jal	80001824 <reset_state>

}
    8002780e:	60e2                	ld	ra,24(sp)
    80027810:	8522                	mv	a0,s0
    80027812:	6442                	ld	s0,16(sp)
    80027814:	64a2                	ld	s1,8(sp)
    80027816:	6105                	addi	sp,sp,32
    80027818:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002781a:	4405                	li	s0,1
    TEST_END();
    8002781c:	00006597          	auipc	a1,0x6
    80027820:	b5c58593          	addi	a1,a1,-1188 # 8002d378 <__func__.0+0x2c0>
    80027824:	bfd1                	j	800277f8 <stateen_SE0_test_6+0x2cc>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027826:	00006517          	auipc	a0,0x6
    8002782a:	baa50513          	addi	a0,a0,-1110 # 8002d3d0 <__func__.0+0x318>
    8002782e:	628030ef          	jal	8002ae56 <printf>
    80027832:	02900513          	li	a0,41
    80027836:	30e020ef          	jal	80029b44 <putchar>
    8002783a:	b74d                	j	800277dc <stateen_SE0_test_6+0x2b0>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002783c:	00006517          	auipc	a0,0x6
    80027840:	b9450513          	addi	a0,a0,-1132 # 8002d3d0 <__func__.0+0x318>
    80027844:	612030ef          	jal	8002ae56 <printf>
    80027848:	02900513          	li	a0,41
    8002784c:	2f8020ef          	jal	80029b44 <putchar>
    80027850:	bf39                	j	8002776e <stateen_SE0_test_6+0x242>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027852:	00006517          	auipc	a0,0x6
    80027856:	b7e50513          	addi	a0,a0,-1154 # 8002d3d0 <__func__.0+0x318>
    8002785a:	5fc030ef          	jal	8002ae56 <printf>
    8002785e:	02900513          	li	a0,41
    80027862:	2e2020ef          	jal	80029b44 <putchar>
    80027866:	bd61                	j	800276fe <stateen_SE0_test_6+0x1d2>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027868:	00006517          	auipc	a0,0x6
    8002786c:	b6850513          	addi	a0,a0,-1176 # 8002d3d0 <__func__.0+0x318>
    80027870:	5e6030ef          	jal	8002ae56 <printf>
    80027874:	02900513          	li	a0,41
    80027878:	2cc020ef          	jal	80029b44 <putchar>
    8002787c:	bd09                	j	8002768e <stateen_SE0_test_6+0x162>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    8002787e:	00006517          	auipc	a0,0x6
    80027882:	b5250513          	addi	a0,a0,-1198 # 8002d3d0 <__func__.0+0x318>
    80027886:	5d0030ef          	jal	8002ae56 <printf>
    8002788a:	02900513          	li	a0,41
    8002788e:	2b6020ef          	jal	80029b44 <putchar>
    80027892:	b369                	j	8002761c <stateen_SE0_test_6+0xf0>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027894:	00006517          	auipc	a0,0x6
    80027898:	b3c50513          	addi	a0,a0,-1220 # 8002d3d0 <__func__.0+0x318>
    8002789c:	5ba030ef          	jal	8002ae56 <printf>
    800278a0:	02900513          	li	a0,41
    800278a4:	2a0020ef          	jal	80029b44 <putchar>
    800278a8:	bb11                	j	800275bc <stateen_SE0_test_6+0x90>

00000000800278aa <stateen_SE0_test_7>:


bool stateen_SE0_test_7(){
    800278aa:	1101                	addi	sp,sp,-32

    TEST_START();
    800278ac:	00005597          	auipc	a1,0x5
    800278b0:	65458593          	addi	a1,a1,1620 # 8002cf00 <__func__.1>
    800278b4:	00006517          	auipc	a0,0x6
    800278b8:	ae450513          	addi	a0,a0,-1308 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_7(){
    800278bc:	ec06                	sd	ra,24(sp)
    800278be:	e822                	sd	s0,16(sp)
    800278c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800278c2:	594030ef          	jal	8002ae56 <printf>
    800278c6:	4529                	li	a0,10
    800278c8:	27c020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    800278cc:	4511                	li	a0,4
    800278ce:	e3ad90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1 hstateen.SE0=1,v=1 时可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800278d2:	57fd                	li	a5,-1
    800278d4:	17fe                	slli	a5,a5,0x3f
    800278d6:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    800278da:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800278de:	4509                	li	a0,2
    800278e0:	e28d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800278e4:	d28d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800278e8:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800278ec:	f62d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800278f0:	08200593          	li	a1,130
    800278f4:	00010617          	auipc	a2,0x10
    800278f8:	5fc60613          	addi	a2,a2,1532 # 80037ef0 <__func__.0+0xae38>
    800278fc:	00006517          	auipc	a0,0x6
    80027900:	ab450513          	addi	a0,a0,-1356 # 8002d3b0 <__func__.0+0x2f8>
    80027904:	552030ef          	jal	8002ae56 <printf>
    80027908:	0002c797          	auipc	a5,0x2c
    8002790c:	7097c783          	lbu	a5,1801(a5) # 80054011 <excpt+0x1>
    80027910:	00006597          	auipc	a1,0x6
    80027914:	a6858593          	addi	a1,a1,-1432 # 8002d378 <__func__.0+0x2c0>
    80027918:	c789                	beqz	a5,80027922 <stateen_SE0_test_7+0x78>
    8002791a:	00006597          	auipc	a1,0x6
    8002791e:	a6e58593          	addi	a1,a1,-1426 # 8002d388 <__func__.0+0x2d0>
    80027922:	00006517          	auipc	a0,0x6
    80027926:	aa650513          	addi	a0,a0,-1370 # 8002d3c8 <__func__.0+0x310>
    8002792a:	52c030ef          	jal	8002ae56 <printf>
    8002792e:	0002c797          	auipc	a5,0x2c
    80027932:	6e37c783          	lbu	a5,1763(a5) # 80054011 <excpt+0x1>
    80027936:	1c079d63          	bnez	a5,80027b10 <stateen_SE0_test_7+0x266>
    8002793a:	4529                	li	a0,10
    8002793c:	208020ef          	jal	80029b44 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027940:	4509                	li	a0,2
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027942:	0002c497          	auipc	s1,0x2c
    80027946:	6cf4c483          	lbu	s1,1743(s1) # 80054011 <excpt+0x1>
    goto_priv(PRIV_VS);
    8002794a:	dbed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002794e:	cbed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027952:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027956:	ef8d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002795a:	08200593          	li	a1,130
    8002795e:	00010617          	auipc	a2,0x10
    80027962:	5e260613          	addi	a2,a2,1506 # 80037f40 <__func__.0+0xae88>
    80027966:	00006517          	auipc	a0,0x6
    8002796a:	a4a50513          	addi	a0,a0,-1462 # 8002d3b0 <__func__.0+0x2f8>
    8002796e:	4e8030ef          	jal	8002ae56 <printf>
    80027972:	0002c797          	auipc	a5,0x2c
    80027976:	69f7c783          	lbu	a5,1695(a5) # 80054011 <excpt+0x1>
    8002797a:	00006597          	auipc	a1,0x6
    8002797e:	a0e58593          	addi	a1,a1,-1522 # 8002d388 <__func__.0+0x2d0>
    80027982:	e789                	bnez	a5,8002798c <stateen_SE0_test_7+0xe2>
    80027984:	00006597          	auipc	a1,0x6
    80027988:	9f458593          	addi	a1,a1,-1548 # 8002d378 <__func__.0+0x2c0>
    8002798c:	00006517          	auipc	a0,0x6
    80027990:	a3c50513          	addi	a0,a0,-1476 # 8002d3c8 <__func__.0+0x310>
    80027994:	4c2030ef          	jal	8002ae56 <printf>
    80027998:	0002c797          	auipc	a5,0x2c
    8002799c:	6797c783          	lbu	a5,1657(a5) # 80054011 <excpt+0x1>
    800279a0:	14079d63          	bnez	a5,80027afa <stateen_SE0_test_7+0x250>
    800279a4:	4529                	li	a0,10
    800279a6:	19e020ef          	jal	80029b44 <putchar>
    800279aa:	4401                	li	s0,0
    800279ac:	e499                	bnez	s1,800279ba <stateen_SE0_test_7+0x110>
    800279ae:	0002c417          	auipc	s0,0x2c
    800279b2:	66344403          	lbu	s0,1635(s0) # 80054011 <excpt+0x1>
    800279b6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800279ba:	4501                	li	a0,0
    800279bc:	d4cd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800279c0:	c4cd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800279c4:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800279c8:	e86d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800279cc:	08200593          	li	a1,130
    800279d0:	00010617          	auipc	a2,0x10
    800279d4:	5c860613          	addi	a2,a2,1480 # 80037f98 <__func__.0+0xaee0>
    800279d8:	00006517          	auipc	a0,0x6
    800279dc:	9d850513          	addi	a0,a0,-1576 # 8002d3b0 <__func__.0+0x2f8>
    800279e0:	476030ef          	jal	8002ae56 <printf>
    800279e4:	0002c797          	auipc	a5,0x2c
    800279e8:	62d7c783          	lbu	a5,1581(a5) # 80054011 <excpt+0x1>
    800279ec:	00006597          	auipc	a1,0x6
    800279f0:	99c58593          	addi	a1,a1,-1636 # 8002d388 <__func__.0+0x2d0>
    800279f4:	e789                	bnez	a5,800279fe <stateen_SE0_test_7+0x154>
    800279f6:	00006597          	auipc	a1,0x6
    800279fa:	98258593          	addi	a1,a1,-1662 # 8002d378 <__func__.0+0x2c0>
    800279fe:	00006517          	auipc	a0,0x6
    80027a02:	9ca50513          	addi	a0,a0,-1590 # 8002d3c8 <__func__.0+0x310>
    80027a06:	450030ef          	jal	8002ae56 <printf>
    80027a0a:	0002c797          	auipc	a5,0x2c
    80027a0e:	6077c783          	lbu	a5,1543(a5) # 80054011 <excpt+0x1>
    80027a12:	0c079963          	bnez	a5,80027ae4 <stateen_SE0_test_7+0x23a>
    80027a16:	4529                	li	a0,10
    80027a18:	12c020ef          	jal	80029b44 <putchar>
    80027a1c:	c419                	beqz	s0,80027a2a <stateen_SE0_test_7+0x180>
    80027a1e:	0002c417          	auipc	s0,0x2c
    80027a22:	5f344403          	lbu	s0,1523(s0) # 80054011 <excpt+0x1>
    80027a26:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80027a2a:	4501                	li	a0,0
    80027a2c:	cdcd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a30:	bdcd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027a34:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027a38:	e16d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a3c:	08200593          	li	a1,130
    80027a40:	00010617          	auipc	a2,0x10
    80027a44:	5a860613          	addi	a2,a2,1448 # 80037fe8 <__func__.0+0xaf30>
    80027a48:	00006517          	auipc	a0,0x6
    80027a4c:	96850513          	addi	a0,a0,-1688 # 8002d3b0 <__func__.0+0x2f8>
    80027a50:	406030ef          	jal	8002ae56 <printf>
    80027a54:	0002c797          	auipc	a5,0x2c
    80027a58:	5bd7c783          	lbu	a5,1469(a5) # 80054011 <excpt+0x1>
    80027a5c:	00006597          	auipc	a1,0x6
    80027a60:	92c58593          	addi	a1,a1,-1748 # 8002d388 <__func__.0+0x2d0>
    80027a64:	e789                	bnez	a5,80027a6e <stateen_SE0_test_7+0x1c4>
    80027a66:	00006597          	auipc	a1,0x6
    80027a6a:	91258593          	addi	a1,a1,-1774 # 8002d378 <__func__.0+0x2c0>
    80027a6e:	00006517          	auipc	a0,0x6
    80027a72:	95a50513          	addi	a0,a0,-1702 # 8002d3c8 <__func__.0+0x310>
    80027a76:	3e0030ef          	jal	8002ae56 <printf>
    80027a7a:	0002c797          	auipc	a5,0x2c
    80027a7e:	5977c783          	lbu	a5,1431(a5) # 80054011 <excpt+0x1>
    80027a82:	e7b1                	bnez	a5,80027ace <stateen_SE0_test_7+0x224>
    80027a84:	4529                	li	a0,10
    80027a86:	0be020ef          	jal	80029b44 <putchar>
    80027a8a:	c411                	beqz	s0,80027a96 <stateen_SE0_test_7+0x1ec>
    80027a8c:	0002c797          	auipc	a5,0x2c
    80027a90:	5857c783          	lbu	a5,1413(a5) # 80054011 <excpt+0x1>
    80027a94:	c79d                	beqz	a5,80027ac2 <stateen_SE0_test_7+0x218>
    80027a96:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80027a98:	00006597          	auipc	a1,0x6
    80027a9c:	8f058593          	addi	a1,a1,-1808 # 8002d388 <__func__.0+0x2d0>
    80027aa0:	00006517          	auipc	a0,0x6
    80027aa4:	99050513          	addi	a0,a0,-1648 # 8002d430 <__func__.0+0x378>
    80027aa8:	3ae030ef          	jal	8002ae56 <printf>
    80027aac:	4511                	li	a0,4
    80027aae:	c5ad90ef          	jal	80000f08 <goto_priv>
    80027ab2:	d73d90ef          	jal	80001824 <reset_state>
}
    80027ab6:	60e2                	ld	ra,24(sp)
    80027ab8:	8522                	mv	a0,s0
    80027aba:	6442                	ld	s0,16(sp)
    80027abc:	64a2                	ld	s1,8(sp)
    80027abe:	6105                	addi	sp,sp,32
    80027ac0:	8082                	ret
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ac2:	4405                	li	s0,1
    TEST_END();
    80027ac4:	00006597          	auipc	a1,0x6
    80027ac8:	8b458593          	addi	a1,a1,-1868 # 8002d378 <__func__.0+0x2c0>
    80027acc:	bfd1                	j	80027aa0 <stateen_SE0_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ace:	00006517          	auipc	a0,0x6
    80027ad2:	90250513          	addi	a0,a0,-1790 # 8002d3d0 <__func__.0+0x318>
    80027ad6:	380030ef          	jal	8002ae56 <printf>
    80027ada:	02900513          	li	a0,41
    80027ade:	066020ef          	jal	80029b44 <putchar>
    80027ae2:	b74d                	j	80027a84 <stateen_SE0_test_7+0x1da>
    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ae4:	00006517          	auipc	a0,0x6
    80027ae8:	8ec50513          	addi	a0,a0,-1812 # 8002d3d0 <__func__.0+0x318>
    80027aec:	36a030ef          	jal	8002ae56 <printf>
    80027af0:	02900513          	li	a0,41
    80027af4:	050020ef          	jal	80029b44 <putchar>
    80027af8:	bf39                	j	80027a16 <stateen_SE0_test_7+0x16c>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027afa:	00006517          	auipc	a0,0x6
    80027afe:	8d650513          	addi	a0,a0,-1834 # 8002d3d0 <__func__.0+0x318>
    80027b02:	354030ef          	jal	8002ae56 <printf>
    80027b06:	02900513          	li	a0,41
    80027b0a:	03a020ef          	jal	80029b44 <putchar>
    80027b0e:	bd59                	j	800279a4 <stateen_SE0_test_7+0xfa>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b10:	00006517          	auipc	a0,0x6
    80027b14:	8c050513          	addi	a0,a0,-1856 # 8002d3d0 <__func__.0+0x318>
    80027b18:	33e030ef          	jal	8002ae56 <printf>
    80027b1c:	02900513          	li	a0,41
    80027b20:	024020ef          	jal	80029b44 <putchar>
    80027b24:	bd19                	j	8002793a <stateen_SE0_test_7+0x90>

0000000080027b26 <stateen_SE0_test_8>:




bool stateen_SE0_test_8(){
    80027b26:	1101                	addi	sp,sp,-32

    TEST_START();
    80027b28:	00005597          	auipc	a1,0x5
    80027b2c:	3f058593          	addi	a1,a1,1008 # 8002cf18 <__func__.0>
    80027b30:	00006517          	auipc	a0,0x6
    80027b34:	86850513          	addi	a0,a0,-1944 # 8002d398 <__func__.0+0x2e0>
bool stateen_SE0_test_8(){
    80027b38:	ec06                	sd	ra,24(sp)
    80027b3a:	e822                	sd	s0,16(sp)
    80027b3c:	e426                	sd	s1,8(sp)
    TEST_START();
    80027b3e:	318030ef          	jal	8002ae56 <printf>
    80027b42:	4529                	li	a0,10
    80027b44:	000020ef          	jal	80029b44 <putchar>
    
    goto_priv(PRIV_M);
    80027b48:	4511                	li	a0,4
    80027b4a:	bbed90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027b4e:	57fd                	li	a5,-1
    80027b50:	17fe                	slli	a5,a5,0x3f
    80027b52:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027b56:	60c7a073          	csrs	hstateen0,a5
    CSRS(CSR_SSTATEEN0 , MSTATEEN_SE0);
    80027b5a:	10c7a073          	csrs	sstateen0,a5

    goto_priv(PRIV_HS);
    80027b5e:	450d                	li	a0,3
    80027b60:	ba8d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027b64:	aa8d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027b68:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027b6c:	ce2d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027b70:	08200593          	li	a1,130
    80027b74:	00010617          	auipc	a2,0x10
    80027b78:	4cc60613          	addi	a2,a2,1228 # 80038040 <__func__.0+0xaf88>
    80027b7c:	00006517          	auipc	a0,0x6
    80027b80:	83450513          	addi	a0,a0,-1996 # 8002d3b0 <__func__.0+0x2f8>
    80027b84:	2d2030ef          	jal	8002ae56 <printf>
    80027b88:	0002c797          	auipc	a5,0x2c
    80027b8c:	4897c783          	lbu	a5,1161(a5) # 80054011 <excpt+0x1>
    80027b90:	00005597          	auipc	a1,0x5
    80027b94:	7e858593          	addi	a1,a1,2024 # 8002d378 <__func__.0+0x2c0>
    80027b98:	c789                	beqz	a5,80027ba2 <stateen_SE0_test_8+0x7c>
    80027b9a:	00005597          	auipc	a1,0x5
    80027b9e:	7ee58593          	addi	a1,a1,2030 # 8002d388 <__func__.0+0x2d0>
    80027ba2:	00006517          	auipc	a0,0x6
    80027ba6:	82650513          	addi	a0,a0,-2010 # 8002d3c8 <__func__.0+0x310>
    80027baa:	2ac030ef          	jal	8002ae56 <printf>
    80027bae:	0002c797          	auipc	a5,0x2c
    80027bb2:	4637c783          	lbu	a5,1123(a5) # 80054011 <excpt+0x1>
    80027bb6:	4e079a63          	bnez	a5,800280aa <stateen_SE0_test_8+0x584>
    80027bba:	4529                	li	a0,10
    80027bbc:	789010ef          	jal	80029b44 <putchar>
    80027bc0:	0002c497          	auipc	s1,0x2c
    80027bc4:	4514c483          	lbu	s1,1105(s1) # 80054011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027bc8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027bcc:	c82d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027bd0:	08200593          	li	a1,130
    80027bd4:	00010617          	auipc	a2,0x10
    80027bd8:	4c460613          	addi	a2,a2,1220 # 80038098 <__func__.0+0xafe0>
    80027bdc:	00005517          	auipc	a0,0x5
    80027be0:	7d450513          	addi	a0,a0,2004 # 8002d3b0 <__func__.0+0x2f8>
    80027be4:	272030ef          	jal	8002ae56 <printf>
    80027be8:	0002c797          	auipc	a5,0x2c
    80027bec:	4297c783          	lbu	a5,1065(a5) # 80054011 <excpt+0x1>
    80027bf0:	00005597          	auipc	a1,0x5
    80027bf4:	79858593          	addi	a1,a1,1944 # 8002d388 <__func__.0+0x2d0>
    80027bf8:	e789                	bnez	a5,80027c02 <stateen_SE0_test_8+0xdc>
    80027bfa:	00005597          	auipc	a1,0x5
    80027bfe:	77e58593          	addi	a1,a1,1918 # 8002d378 <__func__.0+0x2c0>
    80027c02:	00005517          	auipc	a0,0x5
    80027c06:	7c650513          	addi	a0,a0,1990 # 8002d3c8 <__func__.0+0x310>
    80027c0a:	24c030ef          	jal	8002ae56 <printf>
    80027c0e:	0002c797          	auipc	a5,0x2c
    80027c12:	4037c783          	lbu	a5,1027(a5) # 80054011 <excpt+0x1>
    80027c16:	46079f63          	bnez	a5,80028094 <stateen_SE0_test_8+0x56e>
    80027c1a:	4529                	li	a0,10
    80027c1c:	729010ef          	jal	80029b44 <putchar>
    80027c20:	4401                	li	s0,0
    80027c22:	e499                	bnez	s1,80027c30 <stateen_SE0_test_8+0x10a>
    80027c24:	0002c417          	auipc	s0,0x2c
    80027c28:	3ed44403          	lbu	s0,1005(s0) # 80054011 <excpt+0x1>
    80027c2c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027c30:	4505                	li	a0,1
    80027c32:	ad6d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c36:	9d6d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027c3a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027c3e:	c10d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c42:	08200593          	li	a1,130
    80027c46:	00010617          	auipc	a2,0x10
    80027c4a:	4aa60613          	addi	a2,a2,1194 # 800380f0 <__func__.0+0xb038>
    80027c4e:	00005517          	auipc	a0,0x5
    80027c52:	76250513          	addi	a0,a0,1890 # 8002d3b0 <__func__.0+0x2f8>
    80027c56:	200030ef          	jal	8002ae56 <printf>
    80027c5a:	0002c797          	auipc	a5,0x2c
    80027c5e:	3b77c783          	lbu	a5,951(a5) # 80054011 <excpt+0x1>
    80027c62:	00005597          	auipc	a1,0x5
    80027c66:	72658593          	addi	a1,a1,1830 # 8002d388 <__func__.0+0x2d0>
    80027c6a:	e789                	bnez	a5,80027c74 <stateen_SE0_test_8+0x14e>
    80027c6c:	00005597          	auipc	a1,0x5
    80027c70:	70c58593          	addi	a1,a1,1804 # 8002d378 <__func__.0+0x2c0>
    80027c74:	00005517          	auipc	a0,0x5
    80027c78:	75450513          	addi	a0,a0,1876 # 8002d3c8 <__func__.0+0x310>
    80027c7c:	1da030ef          	jal	8002ae56 <printf>
    80027c80:	0002c797          	auipc	a5,0x2c
    80027c84:	3917c783          	lbu	a5,913(a5) # 80054011 <excpt+0x1>
    80027c88:	3e079b63          	bnez	a5,8002807e <stateen_SE0_test_8+0x558>
    80027c8c:	4529                	li	a0,10
    80027c8e:	6b7010ef          	jal	80029b44 <putchar>
    80027c92:	c419                	beqz	s0,80027ca0 <stateen_SE0_test_8+0x17a>
    80027c94:	0002c417          	auipc	s0,0x2c
    80027c98:	37d44403          	lbu	s0,893(s0) # 80054011 <excpt+0x1>
    80027c9c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027ca0:	4505                	li	a0,1
    80027ca2:	a66d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ca6:	966d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027caa:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027cae:	ba0d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027cb2:	08200593          	li	a1,130
    80027cb6:	00010617          	auipc	a2,0x10
    80027cba:	48a60613          	addi	a2,a2,1162 # 80038140 <__func__.0+0xb088>
    80027cbe:	00005517          	auipc	a0,0x5
    80027cc2:	6f250513          	addi	a0,a0,1778 # 8002d3b0 <__func__.0+0x2f8>
    80027cc6:	190030ef          	jal	8002ae56 <printf>
    80027cca:	0002c797          	auipc	a5,0x2c
    80027cce:	3477c783          	lbu	a5,839(a5) # 80054011 <excpt+0x1>
    80027cd2:	00005597          	auipc	a1,0x5
    80027cd6:	6b658593          	addi	a1,a1,1718 # 8002d388 <__func__.0+0x2d0>
    80027cda:	e789                	bnez	a5,80027ce4 <stateen_SE0_test_8+0x1be>
    80027cdc:	00005597          	auipc	a1,0x5
    80027ce0:	69c58593          	addi	a1,a1,1692 # 8002d378 <__func__.0+0x2c0>
    80027ce4:	00005517          	auipc	a0,0x5
    80027ce8:	6e450513          	addi	a0,a0,1764 # 8002d3c8 <__func__.0+0x310>
    80027cec:	16a030ef          	jal	8002ae56 <printf>
    80027cf0:	0002c797          	auipc	a5,0x2c
    80027cf4:	3217c783          	lbu	a5,801(a5) # 80054011 <excpt+0x1>
    80027cf8:	36079863          	bnez	a5,80028068 <stateen_SE0_test_8+0x542>
    80027cfc:	4529                	li	a0,10
    80027cfe:	647010ef          	jal	80029b44 <putchar>
    80027d02:	c419                	beqz	s0,80027d10 <stateen_SE0_test_8+0x1ea>
    80027d04:	0002c417          	auipc	s0,0x2c
    80027d08:	30d44403          	lbu	s0,781(s0) # 80054011 <excpt+0x1>
    80027d0c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027d10:	4511                	li	a0,4
    80027d12:	9f6d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d16:	8f6d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027d1a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027d1e:	b30d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d22:	08200593          	li	a1,130
    80027d26:	00010617          	auipc	a2,0x10
    80027d2a:	47260613          	addi	a2,a2,1138 # 80038198 <__func__.0+0xb0e0>
    80027d2e:	00005517          	auipc	a0,0x5
    80027d32:	68250513          	addi	a0,a0,1666 # 8002d3b0 <__func__.0+0x2f8>
    80027d36:	120030ef          	jal	8002ae56 <printf>
    80027d3a:	0002c797          	auipc	a5,0x2c
    80027d3e:	2d77c783          	lbu	a5,727(a5) # 80054011 <excpt+0x1>
    80027d42:	00005597          	auipc	a1,0x5
    80027d46:	64658593          	addi	a1,a1,1606 # 8002d388 <__func__.0+0x2d0>
    80027d4a:	e789                	bnez	a5,80027d54 <stateen_SE0_test_8+0x22e>
    80027d4c:	00005597          	auipc	a1,0x5
    80027d50:	62c58593          	addi	a1,a1,1580 # 8002d378 <__func__.0+0x2c0>
    80027d54:	00005517          	auipc	a0,0x5
    80027d58:	67450513          	addi	a0,a0,1652 # 8002d3c8 <__func__.0+0x310>
    80027d5c:	0fa030ef          	jal	8002ae56 <printf>
    80027d60:	0002c797          	auipc	a5,0x2c
    80027d64:	2b17c783          	lbu	a5,689(a5) # 80054011 <excpt+0x1>
    80027d68:	2e079563          	bnez	a5,80028052 <stateen_SE0_test_8+0x52c>
    80027d6c:	4529                	li	a0,10
    80027d6e:	5d7010ef          	jal	80029b44 <putchar>
    80027d72:	c419                	beqz	s0,80027d80 <stateen_SE0_test_8+0x25a>
    80027d74:	0002c417          	auipc	s0,0x2c
    80027d78:	29d44403          	lbu	s0,669(s0) # 80054011 <excpt+0x1>
    80027d7c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027d80:	4511                	li	a0,4
    80027d82:	986d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d86:	886d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027d8a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027d8e:	ac0d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d92:	08200593          	li	a1,130
    80027d96:	00010617          	auipc	a2,0x10
    80027d9a:	45260613          	addi	a2,a2,1106 # 800381e8 <__func__.0+0xb130>
    80027d9e:	00005517          	auipc	a0,0x5
    80027da2:	61250513          	addi	a0,a0,1554 # 8002d3b0 <__func__.0+0x2f8>
    80027da6:	0b0030ef          	jal	8002ae56 <printf>
    80027daa:	0002c797          	auipc	a5,0x2c
    80027dae:	2677c783          	lbu	a5,615(a5) # 80054011 <excpt+0x1>
    80027db2:	00005597          	auipc	a1,0x5
    80027db6:	5d658593          	addi	a1,a1,1494 # 8002d388 <__func__.0+0x2d0>
    80027dba:	e789                	bnez	a5,80027dc4 <stateen_SE0_test_8+0x29e>
    80027dbc:	00005597          	auipc	a1,0x5
    80027dc0:	5bc58593          	addi	a1,a1,1468 # 8002d378 <__func__.0+0x2c0>
    80027dc4:	00005517          	auipc	a0,0x5
    80027dc8:	60450513          	addi	a0,a0,1540 # 8002d3c8 <__func__.0+0x310>
    80027dcc:	08a030ef          	jal	8002ae56 <printf>
    80027dd0:	0002c797          	auipc	a5,0x2c
    80027dd4:	2417c783          	lbu	a5,577(a5) # 80054011 <excpt+0x1>
    80027dd8:	26079263          	bnez	a5,8002803c <stateen_SE0_test_8+0x516>
    80027ddc:	4529                	li	a0,10
    80027dde:	567010ef          	jal	80029b44 <putchar>
    80027de2:	c419                	beqz	s0,80027df0 <stateen_SE0_test_8+0x2ca>
    80027de4:	0002c417          	auipc	s0,0x2c
    80027de8:	22d44403          	lbu	s0,557(s0) # 80054011 <excpt+0x1>
    80027dec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VS);
    80027df0:	4509                	li	a0,2
    80027df2:	916d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027df6:	816d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027dfa:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027dfe:	a50d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e02:	08200593          	li	a1,130
    80027e06:	00010617          	auipc	a2,0x10
    80027e0a:	0ea60613          	addi	a2,a2,234 # 80037ef0 <__func__.0+0xae38>
    80027e0e:	00005517          	auipc	a0,0x5
    80027e12:	5a250513          	addi	a0,a0,1442 # 8002d3b0 <__func__.0+0x2f8>
    80027e16:	040030ef          	jal	8002ae56 <printf>
    80027e1a:	0002c797          	auipc	a5,0x2c
    80027e1e:	1f77c783          	lbu	a5,503(a5) # 80054011 <excpt+0x1>
    80027e22:	00005597          	auipc	a1,0x5
    80027e26:	56658593          	addi	a1,a1,1382 # 8002d388 <__func__.0+0x2d0>
    80027e2a:	e789                	bnez	a5,80027e34 <stateen_SE0_test_8+0x30e>
    80027e2c:	00005597          	auipc	a1,0x5
    80027e30:	54c58593          	addi	a1,a1,1356 # 8002d378 <__func__.0+0x2c0>
    80027e34:	00005517          	auipc	a0,0x5
    80027e38:	59450513          	addi	a0,a0,1428 # 8002d3c8 <__func__.0+0x310>
    80027e3c:	01a030ef          	jal	8002ae56 <printf>
    80027e40:	0002c797          	auipc	a5,0x2c
    80027e44:	1d17c783          	lbu	a5,465(a5) # 80054011 <excpt+0x1>
    80027e48:	1c079f63          	bnez	a5,80028026 <stateen_SE0_test_8+0x500>
    80027e4c:	4529                	li	a0,10
    80027e4e:	4f7010ef          	jal	80029b44 <putchar>
    80027e52:	c419                	beqz	s0,80027e60 <stateen_SE0_test_8+0x33a>
    80027e54:	0002c417          	auipc	s0,0x2c
    80027e58:	1bd44403          	lbu	s0,445(s0) # 80054011 <excpt+0x1>
    80027e5c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027e60:	4509                	li	a0,2
    80027e62:	8a6d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e66:	fa7d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027e6a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027e6e:	9e0d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e72:	08200593          	li	a1,130
    80027e76:	00010617          	auipc	a2,0x10
    80027e7a:	0ca60613          	addi	a2,a2,202 # 80037f40 <__func__.0+0xae88>
    80027e7e:	00005517          	auipc	a0,0x5
    80027e82:	53250513          	addi	a0,a0,1330 # 8002d3b0 <__func__.0+0x2f8>
    80027e86:	7d1020ef          	jal	8002ae56 <printf>
    80027e8a:	0002c797          	auipc	a5,0x2c
    80027e8e:	1877c783          	lbu	a5,391(a5) # 80054011 <excpt+0x1>
    80027e92:	00005597          	auipc	a1,0x5
    80027e96:	4f658593          	addi	a1,a1,1270 # 8002d388 <__func__.0+0x2d0>
    80027e9a:	e789                	bnez	a5,80027ea4 <stateen_SE0_test_8+0x37e>
    80027e9c:	00005597          	auipc	a1,0x5
    80027ea0:	4dc58593          	addi	a1,a1,1244 # 8002d378 <__func__.0+0x2c0>
    80027ea4:	00005517          	auipc	a0,0x5
    80027ea8:	52450513          	addi	a0,a0,1316 # 8002d3c8 <__func__.0+0x310>
    80027eac:	7ab020ef          	jal	8002ae56 <printf>
    80027eb0:	0002c797          	auipc	a5,0x2c
    80027eb4:	1617c783          	lbu	a5,353(a5) # 80054011 <excpt+0x1>
    80027eb8:	14079c63          	bnez	a5,80028010 <stateen_SE0_test_8+0x4ea>
    80027ebc:	4529                	li	a0,10
    80027ebe:	487010ef          	jal	80029b44 <putchar>
    80027ec2:	c419                	beqz	s0,80027ed0 <stateen_SE0_test_8+0x3aa>
    80027ec4:	0002c417          	auipc	s0,0x2c
    80027ec8:	14d44403          	lbu	s0,333(s0) # 80054011 <excpt+0x1>
    80027ecc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80027ed0:	450d                	li	a0,3
    80027ed2:	836d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ed6:	f37d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027eda:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027ede:	970d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ee2:	08200593          	li	a1,130
    80027ee6:	00010617          	auipc	a2,0x10
    80027eea:	35260613          	addi	a2,a2,850 # 80038238 <__func__.0+0xb180>
    80027eee:	00005517          	auipc	a0,0x5
    80027ef2:	4c250513          	addi	a0,a0,1218 # 8002d3b0 <__func__.0+0x2f8>
    80027ef6:	761020ef          	jal	8002ae56 <printf>
    80027efa:	0002c797          	auipc	a5,0x2c
    80027efe:	1177c783          	lbu	a5,279(a5) # 80054011 <excpt+0x1>
    80027f02:	00005597          	auipc	a1,0x5
    80027f06:	48658593          	addi	a1,a1,1158 # 8002d388 <__func__.0+0x2d0>
    80027f0a:	e789                	bnez	a5,80027f14 <stateen_SE0_test_8+0x3ee>
    80027f0c:	00005597          	auipc	a1,0x5
    80027f10:	46c58593          	addi	a1,a1,1132 # 8002d378 <__func__.0+0x2c0>
    80027f14:	00005517          	auipc	a0,0x5
    80027f18:	4b450513          	addi	a0,a0,1204 # 8002d3c8 <__func__.0+0x310>
    80027f1c:	73b020ef          	jal	8002ae56 <printf>
    80027f20:	0002c797          	auipc	a5,0x2c
    80027f24:	0f17c783          	lbu	a5,241(a5) # 80054011 <excpt+0x1>
    80027f28:	0c079963          	bnez	a5,80027ffa <stateen_SE0_test_8+0x4d4>
    80027f2c:	4529                	li	a0,10
    80027f2e:	417010ef          	jal	80029b44 <putchar>
    80027f32:	c419                	beqz	s0,80027f40 <stateen_SE0_test_8+0x41a>
    80027f34:	0002c417          	auipc	s0,0x2c
    80027f38:	0dd44403          	lbu	s0,221(s0) # 80054011 <excpt+0x1>
    80027f3c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80027f40:	450d                	li	a0,3
    80027f42:	fc7d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f46:	ec7d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027f4a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027f4e:	900d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f52:	08200593          	li	a1,130
    80027f56:	00010617          	auipc	a2,0x10
    80027f5a:	33260613          	addi	a2,a2,818 # 80038288 <__func__.0+0xb1d0>
    80027f5e:	00005517          	auipc	a0,0x5
    80027f62:	45250513          	addi	a0,a0,1106 # 8002d3b0 <__func__.0+0x2f8>
    80027f66:	6f1020ef          	jal	8002ae56 <printf>
    80027f6a:	0002c797          	auipc	a5,0x2c
    80027f6e:	0a77c783          	lbu	a5,167(a5) # 80054011 <excpt+0x1>
    80027f72:	00005597          	auipc	a1,0x5
    80027f76:	41658593          	addi	a1,a1,1046 # 8002d388 <__func__.0+0x2d0>
    80027f7a:	e789                	bnez	a5,80027f84 <stateen_SE0_test_8+0x45e>
    80027f7c:	00005597          	auipc	a1,0x5
    80027f80:	3fc58593          	addi	a1,a1,1020 # 8002d378 <__func__.0+0x2c0>
    80027f84:	00005517          	auipc	a0,0x5
    80027f88:	44450513          	addi	a0,a0,1092 # 8002d3c8 <__func__.0+0x310>
    80027f8c:	6cb020ef          	jal	8002ae56 <printf>
    80027f90:	0002c797          	auipc	a5,0x2c
    80027f94:	0817c783          	lbu	a5,129(a5) # 80054011 <excpt+0x1>
    80027f98:	e7b1                	bnez	a5,80027fe4 <stateen_SE0_test_8+0x4be>
    80027f9a:	4529                	li	a0,10
    80027f9c:	3a9010ef          	jal	80029b44 <putchar>
    80027fa0:	c411                	beqz	s0,80027fac <stateen_SE0_test_8+0x486>
    80027fa2:	0002c797          	auipc	a5,0x2c
    80027fa6:	06f7c783          	lbu	a5,111(a5) # 80054011 <excpt+0x1>
    80027faa:	c79d                	beqz	a5,80027fd8 <stateen_SE0_test_8+0x4b2>
    80027fac:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80027fae:	00005597          	auipc	a1,0x5
    80027fb2:	3da58593          	addi	a1,a1,986 # 8002d388 <__func__.0+0x2d0>
    80027fb6:	00005517          	auipc	a0,0x5
    80027fba:	47a50513          	addi	a0,a0,1146 # 8002d430 <__func__.0+0x378>
    80027fbe:	699020ef          	jal	8002ae56 <printf>
    80027fc2:	4511                	li	a0,4
    80027fc4:	f45d80ef          	jal	80000f08 <goto_priv>
    80027fc8:	85dd90ef          	jal	80001824 <reset_state>

    80027fcc:	60e2                	ld	ra,24(sp)
    80027fce:	8522                	mv	a0,s0
    80027fd0:	6442                	ld	s0,16(sp)
    80027fd2:	64a2                	ld	s1,8(sp)
    80027fd4:	6105                	addi	sp,sp,32
    80027fd6:	8082                	ret
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fd8:	4405                	li	s0,1
    TEST_END();
    80027fda:	00005597          	auipc	a1,0x5
    80027fde:	39e58593          	addi	a1,a1,926 # 8002d378 <__func__.0+0x2c0>
    80027fe2:	bfd1                	j	80027fb6 <stateen_SE0_test_8+0x490>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fe4:	00005517          	auipc	a0,0x5
    80027fe8:	3ec50513          	addi	a0,a0,1004 # 8002d3d0 <__func__.0+0x318>
    80027fec:	66b020ef          	jal	8002ae56 <printf>
    80027ff0:	02900513          	li	a0,41
    80027ff4:	351010ef          	jal	80029b44 <putchar>
    80027ff8:	b74d                	j	80027f9a <stateen_SE0_test_8+0x474>
    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ffa:	00005517          	auipc	a0,0x5
    80027ffe:	3d650513          	addi	a0,a0,982 # 8002d3d0 <__func__.0+0x318>
    80028002:	655020ef          	jal	8002ae56 <printf>
    80028006:	02900513          	li	a0,41
    8002800a:	33b010ef          	jal	80029b44 <putchar>
    8002800e:	bf39                	j	80027f2c <stateen_SE0_test_8+0x406>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028010:	00005517          	auipc	a0,0x5
    80028014:	3c050513          	addi	a0,a0,960 # 8002d3d0 <__func__.0+0x318>
    80028018:	63f020ef          	jal	8002ae56 <printf>
    8002801c:	02900513          	li	a0,41
    80028020:	325010ef          	jal	80029b44 <putchar>
    80028024:	bd61                	j	80027ebc <stateen_SE0_test_8+0x396>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028026:	00005517          	auipc	a0,0x5
    8002802a:	3aa50513          	addi	a0,a0,938 # 8002d3d0 <__func__.0+0x318>
    8002802e:	629020ef          	jal	8002ae56 <printf>
    80028032:	02900513          	li	a0,41
    80028036:	30f010ef          	jal	80029b44 <putchar>
    8002803a:	bd09                	j	80027e4c <stateen_SE0_test_8+0x326>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002803c:	00005517          	auipc	a0,0x5
    80028040:	39450513          	addi	a0,a0,916 # 8002d3d0 <__func__.0+0x318>
    80028044:	613020ef          	jal	8002ae56 <printf>
    80028048:	02900513          	li	a0,41
    8002804c:	2f9010ef          	jal	80029b44 <putchar>
    80028050:	b371                	j	80027ddc <stateen_SE0_test_8+0x2b6>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028052:	00005517          	auipc	a0,0x5
    80028056:	37e50513          	addi	a0,a0,894 # 8002d3d0 <__func__.0+0x318>
    8002805a:	5fd020ef          	jal	8002ae56 <printf>
    8002805e:	02900513          	li	a0,41
    80028062:	2e3010ef          	jal	80029b44 <putchar>
    80028066:	b319                	j	80027d6c <stateen_SE0_test_8+0x246>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028068:	00005517          	auipc	a0,0x5
    8002806c:	36850513          	addi	a0,a0,872 # 8002d3d0 <__func__.0+0x318>
    80028070:	5e7020ef          	jal	8002ae56 <printf>
    80028074:	02900513          	li	a0,41
    80028078:	2cd010ef          	jal	80029b44 <putchar>
    8002807c:	b141                	j	80027cfc <stateen_SE0_test_8+0x1d6>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002807e:	00005517          	auipc	a0,0x5
    80028082:	35250513          	addi	a0,a0,850 # 8002d3d0 <__func__.0+0x318>
    80028086:	5d1020ef          	jal	8002ae56 <printf>
    8002808a:	02900513          	li	a0,41
    8002808e:	2b7010ef          	jal	80029b44 <putchar>
    80028092:	beed                	j	80027c8c <stateen_SE0_test_8+0x166>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80028094:	00005517          	auipc	a0,0x5
    80028098:	33c50513          	addi	a0,a0,828 # 8002d3d0 <__func__.0+0x318>
    8002809c:	5bb020ef          	jal	8002ae56 <printf>
    800280a0:	02900513          	li	a0,41
    800280a4:	2a1010ef          	jal	80029b44 <putchar>
    800280a8:	be8d                	j	80027c1a <stateen_SE0_test_8+0xf4>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800280aa:	00005517          	auipc	a0,0x5
    800280ae:	32650513          	addi	a0,a0,806 # 8002d3d0 <__func__.0+0x318>
    800280b2:	5a5020ef          	jal	8002ae56 <printf>
    800280b6:	02900513          	li	a0,41
    800280ba:	28b010ef          	jal	80029b44 <putchar>
    800280be:	bcf5                	j	80027bba <stateen_SE0_test_8+0x94>

00000000800280c0 <vec_vle_vse_func>:
#include <rvh_test.h>

bool vec_vle_vse_func(){
    800280c0:	7179                	addi	sp,sp,-48
    TEST_START();
    800280c2:	00005597          	auipc	a1,0x5
    800280c6:	e6e58593          	addi	a1,a1,-402 # 8002cf30 <__func__.24>
    800280ca:	00005517          	auipc	a0,0x5
    800280ce:	2ce50513          	addi	a0,a0,718 # 8002d398 <__func__.0+0x2e0>
bool vec_vle_vse_func(){
    800280d2:	f406                	sd	ra,40(sp)
    800280d4:	f022                	sd	s0,32(sp)
    800280d6:	ec26                	sd	s1,24(sp)
    800280d8:	e84a                	sd	s2,16(sp)
    TEST_START();
    800280da:	57d020ef          	jal	8002ae56 <printf>
    800280de:	4529                	li	a0,10
    800280e0:	265010ef          	jal	80029b44 <putchar>

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=1
    800280e4:	20000793          	li	a5,512
    800280e8:	3007a073          	csrs	mstatus,a5

    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    800280ec:	00010717          	auipc	a4,0x10
    800280f0:	21c73703          	ld	a4,540(a4) # 80038308 <__func__.0+0xb250>
    uint8_t dest8[8] = {0}; 
    800280f4:	e402                	sd	zero,8(sp)
            : "t0", "memory" /* Clobbered registers */ \
        ); \
    }

// 定义具体的加载和存储指令函数（固定使用 v6 寄存器,其它v指令同固定）
LOAD_VECTOR_TO_REGISTER(vle8_to_v6, "vle8.v", uint8_t, 8);
    800280f6:	4421                	li	s0,8
    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    800280f8:	e03a                	sd	a4,0(sp)
    800280fa:	04100493          	li	s1,65
    800280fe:	809472d7          	vsetvl	t0,s0,s1
    80028102:	02010307          	vle8.v	v6,(sp)

    int vl = 8;  // 向量长度

    // 调用向量加载和存储函数
    vle8_to_v6(src8, vl);
    excpt_info();
    80028106:	f49d80ef          	jal	8000104e <excpt_info>
LOAD_VECTOR_TO_REGISTER(vle16_to_v6, "vle16.v", uint16_t, 16);
LOAD_VECTOR_TO_REGISTER(vle32_to_v6, "vle32.v", uint32_t, 32);
LOAD_VECTOR_TO_REGISTER(vle64_to_v6, "vle64.v", uint64_t, 64);

STORE_VECTOR_FROM_REGISTER(vse8_from_v6, "vse8.v", uint8_t, 8);
    8002810a:	003c                	addi	a5,sp,8
    8002810c:	809472d7          	vsetvl	t0,s0,s1
    80028110:	02078327          	vse8.v	v6,(a5)
    vse8_from_v6(dest8, vl);

    
    // 打印结果以验证
    printf("After vle8_v:\n");
    80028114:	00010517          	auipc	a0,0x10
    80028118:	1cc50513          	addi	a0,a0,460 # 800382e0 <__func__.0+0xb228>
    8002811c:	177020ef          	jal	8002aa92 <puts>
    for (int i = 0; i < 8; i++) {
    80028120:	0024                	addi	s1,sp,8
    80028122:	4401                	li	s0,0
    80028124:	4921                	li	s2,8
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028126:	0004c603          	lbu	a2,0(s1)
    8002812a:	85a2                	mv	a1,s0
    8002812c:	00010517          	auipc	a0,0x10
    80028130:	1c450513          	addi	a0,a0,452 # 800382f0 <__func__.0+0xb238>
    for (int i = 0; i < 8; i++) {
    80028134:	2405                	addiw	s0,s0,1
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028136:	521020ef          	jal	8002ae56 <printf>
    for (int i = 0; i < 8; i++) {
    8002813a:	0485                	addi	s1,s1,1
    8002813c:	ff2415e3          	bne	s0,s2,80028126 <vec_vle_vse_func+0x66>
    }
    printf("\n");
    80028140:	4529                	li	a0,10
    80028142:	203010ef          	jal	80029b44 <putchar>


    TEST_END();
    80028146:	00005597          	auipc	a1,0x5
    8002814a:	23258593          	addi	a1,a1,562 # 8002d378 <__func__.0+0x2c0>
    8002814e:	00005517          	auipc	a0,0x5
    80028152:	2e250513          	addi	a0,a0,738 # 8002d430 <__func__.0+0x378>
    80028156:	501020ef          	jal	8002ae56 <printf>
    8002815a:	4511                	li	a0,4
    8002815c:	dadd80ef          	jal	80000f08 <goto_priv>
    80028160:	ec4d90ef          	jal	80001824 <reset_state>
}
    80028164:	70a2                	ld	ra,40(sp)
    80028166:	7402                	ld	s0,32(sp)
    80028168:	64e2                	ld	s1,24(sp)
    8002816a:	6942                	ld	s2,16(sp)
    8002816c:	4505                	li	a0,1
    8002816e:	6145                	addi	sp,sp,48
    80028170:	8082                	ret

0000000080028172 <vec_test_1>:



bool vec_test_1(){
    80028172:	1101                	addi	sp,sp,-32
    
    TEST_START();
    80028174:	00005597          	auipc	a1,0x5
    80028178:	dd458593          	addi	a1,a1,-556 # 8002cf48 <__func__.23>
    8002817c:	00005517          	auipc	a0,0x5
    80028180:	21c50513          	addi	a0,a0,540 # 8002d398 <__func__.0+0x2e0>
bool vec_test_1(){
    80028184:	ec06                	sd	ra,24(sp)
    80028186:	e822                	sd	s0,16(sp)
    80028188:	e426                	sd	s1,8(sp)
    TEST_START();
    8002818a:	4cd020ef          	jal	8002ae56 <printf>
    8002818e:	4529                	li	a0,10
    80028190:	1b5010ef          	jal	80029b44 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028194:	20000713          	li	a4,512
    80028198:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002819c:	40000793          	li	a5,1024
    800281a0:	3007b073          	csrc	mstatus,a5

static inline void set_vcpop_conditions(int vl, int sew, int lmull, int v0_init, int v2_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800281a4:	46a1                	li	a3,8
    800281a6:	4645                	li	a2,17
    800281a8:	80c6f2d7          	vsetvl	t0,a3,a2
    800281ac:	5e00b057          	vmv.v.i	v0,1
    800281b0:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800281b4:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800281b8:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800281bc:	c51d80ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    800281c0:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    800281c4:	e8bd80ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800281c8:	08200593          	li	a1,130
    800281cc:	00010617          	auipc	a2,0x10
    800281d0:	14c60613          	addi	a2,a2,332 # 80038318 <__func__.0+0xb260>
    800281d4:	00005517          	auipc	a0,0x5
    800281d8:	1dc50513          	addi	a0,a0,476 # 8002d3b0 <__func__.0+0x2f8>
    800281dc:	47b020ef          	jal	8002ae56 <printf>
    800281e0:	0002c797          	auipc	a5,0x2c
    800281e4:	e317c783          	lbu	a5,-463(a5) # 80054011 <excpt+0x1>
    800281e8:	0002c497          	auipc	s1,0x2c
    800281ec:	e2848493          	addi	s1,s1,-472 # 80054010 <excpt>
    800281f0:	00005597          	auipc	a1,0x5
    800281f4:	19858593          	addi	a1,a1,408 # 8002d388 <__func__.0+0x2d0>
    800281f8:	cf89                	beqz	a5,80028212 <vec_test_1+0xa0>
    800281fa:	6498                	ld	a4,8(s1)
    800281fc:	4789                	li	a5,2
    800281fe:	00005597          	auipc	a1,0x5
    80028202:	17a58593          	addi	a1,a1,378 # 8002d378 <__func__.0+0x2c0>
    80028206:	00f70663          	beq	a4,a5,80028212 <vec_test_1+0xa0>
    8002820a:	00005597          	auipc	a1,0x5
    8002820e:	17e58593          	addi	a1,a1,382 # 8002d388 <__func__.0+0x2d0>
    80028212:	00005517          	auipc	a0,0x5
    80028216:	1b650513          	addi	a0,a0,438 # 8002d3c8 <__func__.0+0x310>
    8002821a:	43d020ef          	jal	8002ae56 <printf>
    8002821e:	0002c797          	auipc	a5,0x2c
    80028222:	df37c783          	lbu	a5,-525(a5) # 80054011 <excpt+0x1>
    80028226:	c789                	beqz	a5,80028230 <vec_test_1+0xbe>
    80028228:	6498                	ld	a4,8(s1)
    8002822a:	4789                	li	a5,2
    8002822c:	00f70c63          	beq	a4,a5,80028244 <vec_test_1+0xd2>
    80028230:	00005517          	auipc	a0,0x5
    80028234:	1a050513          	addi	a0,a0,416 # 8002d3d0 <__func__.0+0x318>
    80028238:	41f020ef          	jal	8002ae56 <printf>
    8002823c:	02900513          	li	a0,41
    80028240:	105010ef          	jal	80029b44 <putchar>
    80028244:	4529                	li	a0,10
    80028246:	0ff010ef          	jal	80029b44 <putchar>
    8002824a:	0002c417          	auipc	s0,0x2c
    8002824e:	dc744403          	lbu	s0,-569(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028252:	00005597          	auipc	a1,0x5
    80028256:	13658593          	addi	a1,a1,310 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    8002825a:	cc11                	beqz	s0,80028276 <vec_test_1+0x104>
    8002825c:	6498                	ld	a4,8(s1)
    8002825e:	4789                	li	a5,2
    TEST_END();
    80028260:	00005597          	auipc	a1,0x5
    80028264:	11858593          	addi	a1,a1,280 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    80028268:	00f70763          	beq	a4,a5,80028276 <vec_test_1+0x104>
    8002826c:	4401                	li	s0,0
    TEST_END();
    8002826e:	00005597          	auipc	a1,0x5
    80028272:	11a58593          	addi	a1,a1,282 # 8002d388 <__func__.0+0x2d0>
    80028276:	00005517          	auipc	a0,0x5
    8002827a:	1ba50513          	addi	a0,a0,442 # 8002d430 <__func__.0+0x378>
    8002827e:	3d9020ef          	jal	8002ae56 <printf>
    80028282:	4511                	li	a0,4
    80028284:	c85d80ef          	jal	80000f08 <goto_priv>
    80028288:	d9cd90ef          	jal	80001824 <reset_state>
}
    8002828c:	60e2                	ld	ra,24(sp)
    8002828e:	8522                	mv	a0,s0
    80028290:	6442                	ld	s0,16(sp)
    80028292:	64a2                	ld	s1,8(sp)
    80028294:	6105                	addi	sp,sp,32
    80028296:	8082                	ret

0000000080028298 <vec_test_2>:

bool vec_test_2(){
    80028298:	1101                	addi	sp,sp,-32

    TEST_START();
    8002829a:	00005597          	auipc	a1,0x5
    8002829e:	cbe58593          	addi	a1,a1,-834 # 8002cf58 <__func__.22>
    800282a2:	00005517          	auipc	a0,0x5
    800282a6:	0f650513          	addi	a0,a0,246 # 8002d398 <__func__.0+0x2e0>
bool vec_test_2(){
    800282aa:	ec06                	sd	ra,24(sp)
    800282ac:	e822                	sd	s0,16(sp)
    800282ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800282b0:	3a7020ef          	jal	8002ae56 <printf>
    800282b4:	4529                	li	a0,10
    800282b6:	08f010ef          	jal	80029b44 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800282ba:	20000793          	li	a5,512
    800282be:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282c2:	40000793          	li	a5,1024
    800282c6:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800282ca:	b43d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTART);
    800282ce:	008027f3          	csrr	a5,vstart
    excpt_info();
    800282d2:	d7dd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800282d6:	08200593          	li	a1,130
    800282da:	00010617          	auipc	a2,0x10
    800282de:	08e60613          	addi	a2,a2,142 # 80038368 <__func__.0+0xb2b0>
    800282e2:	00005517          	auipc	a0,0x5
    800282e6:	0ce50513          	addi	a0,a0,206 # 8002d3b0 <__func__.0+0x2f8>
    800282ea:	36d020ef          	jal	8002ae56 <printf>
    800282ee:	0002c797          	auipc	a5,0x2c
    800282f2:	d237c783          	lbu	a5,-733(a5) # 80054011 <excpt+0x1>
    800282f6:	0002c497          	auipc	s1,0x2c
    800282fa:	d1a48493          	addi	s1,s1,-742 # 80054010 <excpt>
    800282fe:	00005597          	auipc	a1,0x5
    80028302:	08a58593          	addi	a1,a1,138 # 8002d388 <__func__.0+0x2d0>
    80028306:	cf89                	beqz	a5,80028320 <vec_test_2+0x88>
    80028308:	6498                	ld	a4,8(s1)
    8002830a:	4789                	li	a5,2
    8002830c:	00005597          	auipc	a1,0x5
    80028310:	06c58593          	addi	a1,a1,108 # 8002d378 <__func__.0+0x2c0>
    80028314:	00f70663          	beq	a4,a5,80028320 <vec_test_2+0x88>
    80028318:	00005597          	auipc	a1,0x5
    8002831c:	07058593          	addi	a1,a1,112 # 8002d388 <__func__.0+0x2d0>
    80028320:	00005517          	auipc	a0,0x5
    80028324:	0a850513          	addi	a0,a0,168 # 8002d3c8 <__func__.0+0x310>
    80028328:	32f020ef          	jal	8002ae56 <printf>
    8002832c:	0002c797          	auipc	a5,0x2c
    80028330:	ce57c783          	lbu	a5,-795(a5) # 80054011 <excpt+0x1>
    80028334:	c789                	beqz	a5,8002833e <vec_test_2+0xa6>
    80028336:	6498                	ld	a4,8(s1)
    80028338:	4789                	li	a5,2
    8002833a:	00f70c63          	beq	a4,a5,80028352 <vec_test_2+0xba>
    8002833e:	00005517          	auipc	a0,0x5
    80028342:	09250513          	addi	a0,a0,146 # 8002d3d0 <__func__.0+0x318>
    80028346:	311020ef          	jal	8002ae56 <printf>
    8002834a:	02900513          	li	a0,41
    8002834e:	7f6010ef          	jal	80029b44 <putchar>
    80028352:	4529                	li	a0,10
    80028354:	7f0010ef          	jal	80029b44 <putchar>
    80028358:	0002c417          	auipc	s0,0x2c
    8002835c:	cb944403          	lbu	s0,-839(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028360:	00005597          	auipc	a1,0x5
    80028364:	02858593          	addi	a1,a1,40 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    80028368:	cc11                	beqz	s0,80028384 <vec_test_2+0xec>
    8002836a:	6498                	ld	a4,8(s1)
    8002836c:	4789                	li	a5,2
    TEST_END();
    8002836e:	00005597          	auipc	a1,0x5
    80028372:	00a58593          	addi	a1,a1,10 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    80028376:	00f70763          	beq	a4,a5,80028384 <vec_test_2+0xec>
    8002837a:	4401                	li	s0,0
    TEST_END();
    8002837c:	00005597          	auipc	a1,0x5
    80028380:	00c58593          	addi	a1,a1,12 # 8002d388 <__func__.0+0x2d0>
    80028384:	00005517          	auipc	a0,0x5
    80028388:	0ac50513          	addi	a0,a0,172 # 8002d430 <__func__.0+0x378>
    8002838c:	2cb020ef          	jal	8002ae56 <printf>
    80028390:	4511                	li	a0,4
    80028392:	b77d80ef          	jal	80000f08 <goto_priv>
    80028396:	c8ed90ef          	jal	80001824 <reset_state>
}
    8002839a:	60e2                	ld	ra,24(sp)
    8002839c:	8522                	mv	a0,s0
    8002839e:	6442                	ld	s0,16(sp)
    800283a0:	64a2                	ld	s1,8(sp)
    800283a2:	6105                	addi	sp,sp,32
    800283a4:	8082                	ret

00000000800283a6 <vec_test_3>:


bool vec_test_3(){             
    800283a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800283a8:	00005597          	auipc	a1,0x5
    800283ac:	bc058593          	addi	a1,a1,-1088 # 8002cf68 <__func__.21>
    800283b0:	00005517          	auipc	a0,0x5
    800283b4:	fe850513          	addi	a0,a0,-24 # 8002d398 <__func__.0+0x2e0>
bool vec_test_3(){             
    800283b8:	ec06                	sd	ra,24(sp)
    800283ba:	e822                	sd	s0,16(sp)
    800283bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800283be:	299020ef          	jal	8002ae56 <printf>
    800283c2:	4529                	li	a0,10
    800283c4:	780010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800283c8:	20000713          	li	a4,512
    800283cc:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800283d0:	40000793          	li	a5,1024
    800283d4:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800283d8:	4689                	li	a3,2
    800283da:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    800283de:	5e00b057          	vmv.v.i	v0,1
    800283e2:	5e003257          	vmv.v.i	v4,0
    800283e6:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1

    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800283ea:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800283ee:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800283f2:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800283f6:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800283fa:	4509                	li	a0,2
    800283fc:	b0dd80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028400:	a0dd80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80028404:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    80028408:	c47d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    8002840c:	08200593          	li	a1,130
    80028410:	00010617          	auipc	a2,0x10
    80028414:	fa060613          	addi	a2,a2,-96 # 800383b0 <__func__.0+0xb2f8>
    80028418:	00005517          	auipc	a0,0x5
    8002841c:	f9850513          	addi	a0,a0,-104 # 8002d3b0 <__func__.0+0x2f8>
    80028420:	237020ef          	jal	8002ae56 <printf>
    80028424:	0002c797          	auipc	a5,0x2c
    80028428:	bed7c783          	lbu	a5,-1043(a5) # 80054011 <excpt+0x1>
    8002842c:	0002c497          	auipc	s1,0x2c
    80028430:	be448493          	addi	s1,s1,-1052 # 80054010 <excpt>
    80028434:	00005597          	auipc	a1,0x5
    80028438:	f5458593          	addi	a1,a1,-172 # 8002d388 <__func__.0+0x2d0>
    8002843c:	cf89                	beqz	a5,80028456 <vec_test_3+0xb0>
    8002843e:	6498                	ld	a4,8(s1)
    80028440:	4789                	li	a5,2
    80028442:	00005597          	auipc	a1,0x5
    80028446:	f3658593          	addi	a1,a1,-202 # 8002d378 <__func__.0+0x2c0>
    8002844a:	00f70663          	beq	a4,a5,80028456 <vec_test_3+0xb0>
    8002844e:	00005597          	auipc	a1,0x5
    80028452:	f3a58593          	addi	a1,a1,-198 # 8002d388 <__func__.0+0x2d0>
    80028456:	00005517          	auipc	a0,0x5
    8002845a:	f7250513          	addi	a0,a0,-142 # 8002d3c8 <__func__.0+0x310>
    8002845e:	1f9020ef          	jal	8002ae56 <printf>
    80028462:	0002c797          	auipc	a5,0x2c
    80028466:	baf7c783          	lbu	a5,-1105(a5) # 80054011 <excpt+0x1>
    8002846a:	c789                	beqz	a5,80028474 <vec_test_3+0xce>
    8002846c:	6498                	ld	a4,8(s1)
    8002846e:	4789                	li	a5,2
    80028470:	00f70c63          	beq	a4,a5,80028488 <vec_test_3+0xe2>
    80028474:	00005517          	auipc	a0,0x5
    80028478:	f5c50513          	addi	a0,a0,-164 # 8002d3d0 <__func__.0+0x318>
    8002847c:	1db020ef          	jal	8002ae56 <printf>
    80028480:	02900513          	li	a0,41
    80028484:	6c0010ef          	jal	80029b44 <putchar>
    80028488:	4529                	li	a0,10
    8002848a:	6ba010ef          	jal	80029b44 <putchar>
    8002848e:	0002c417          	auipc	s0,0x2c
    80028492:	b8344403          	lbu	s0,-1149(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028496:	00005597          	auipc	a1,0x5
    8002849a:	ef258593          	addi	a1,a1,-270 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    8002849e:	cc11                	beqz	s0,800284ba <vec_test_3+0x114>
    800284a0:	6498                	ld	a4,8(s1)
    800284a2:	4789                	li	a5,2
    TEST_END();
    800284a4:	00005597          	auipc	a1,0x5
    800284a8:	ed458593          	addi	a1,a1,-300 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800284ac:	00f70763          	beq	a4,a5,800284ba <vec_test_3+0x114>
    800284b0:	4401                	li	s0,0
    TEST_END();
    800284b2:	00005597          	auipc	a1,0x5
    800284b6:	ed658593          	addi	a1,a1,-298 # 8002d388 <__func__.0+0x2d0>
    800284ba:	00005517          	auipc	a0,0x5
    800284be:	f7650513          	addi	a0,a0,-138 # 8002d430 <__func__.0+0x378>
    800284c2:	195020ef          	jal	8002ae56 <printf>
    800284c6:	4511                	li	a0,4
    800284c8:	a41d80ef          	jal	80000f08 <goto_priv>
    800284cc:	b58d90ef          	jal	80001824 <reset_state>
}
    800284d0:	60e2                	ld	ra,24(sp)
    800284d2:	8522                	mv	a0,s0
    800284d4:	6442                	ld	s0,16(sp)
    800284d6:	64a2                	ld	s1,8(sp)
    800284d8:	6105                	addi	sp,sp,32
    800284da:	8082                	ret

00000000800284dc <vec_test_4>:


bool vec_test_4(){
    800284dc:	1101                	addi	sp,sp,-32

    TEST_START();
    800284de:	00005597          	auipc	a1,0x5
    800284e2:	a9a58593          	addi	a1,a1,-1382 # 8002cf78 <__func__.20>
    800284e6:	00005517          	auipc	a0,0x5
    800284ea:	eb250513          	addi	a0,a0,-334 # 8002d398 <__func__.0+0x2e0>
bool vec_test_4(){
    800284ee:	ec06                	sd	ra,24(sp)
    800284f0:	e822                	sd	s0,16(sp)
    800284f2:	e426                	sd	s1,8(sp)
    TEST_START();
    800284f4:	163020ef          	jal	8002ae56 <printf>
    800284f8:	4529                	li	a0,10
    800284fa:	64a010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试访问向量 CSR 

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=!0
    800284fe:	20000713          	li	a4,512
    80028502:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028506:	40000793          	li	a5,1024
    8002850a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    8002850e:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028512:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028516:	4509                	li	a0,2
    80028518:	9f1d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002851c:	8f1d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VTYPE);
    80028520:	c21027f3          	csrr	a5,vtype
    excpt_info();
    80028524:	b2bd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    80028528:	08200593          	li	a1,130
    8002852c:	00010617          	auipc	a2,0x10
    80028530:	ee460613          	addi	a2,a2,-284 # 80038410 <__func__.0+0xb358>
    80028534:	00005517          	auipc	a0,0x5
    80028538:	e7c50513          	addi	a0,a0,-388 # 8002d3b0 <__func__.0+0x2f8>
    8002853c:	11b020ef          	jal	8002ae56 <printf>
    80028540:	0002c797          	auipc	a5,0x2c
    80028544:	ad17c783          	lbu	a5,-1327(a5) # 80054011 <excpt+0x1>
    80028548:	0002c497          	auipc	s1,0x2c
    8002854c:	ac848493          	addi	s1,s1,-1336 # 80054010 <excpt>
    80028550:	00005597          	auipc	a1,0x5
    80028554:	e3858593          	addi	a1,a1,-456 # 8002d388 <__func__.0+0x2d0>
    80028558:	cf89                	beqz	a5,80028572 <vec_test_4+0x96>
    8002855a:	6498                	ld	a4,8(s1)
    8002855c:	4789                	li	a5,2
    8002855e:	00005597          	auipc	a1,0x5
    80028562:	e1a58593          	addi	a1,a1,-486 # 8002d378 <__func__.0+0x2c0>
    80028566:	00f70663          	beq	a4,a5,80028572 <vec_test_4+0x96>
    8002856a:	00005597          	auipc	a1,0x5
    8002856e:	e1e58593          	addi	a1,a1,-482 # 8002d388 <__func__.0+0x2d0>
    80028572:	00005517          	auipc	a0,0x5
    80028576:	e5650513          	addi	a0,a0,-426 # 8002d3c8 <__func__.0+0x310>
    8002857a:	0dd020ef          	jal	8002ae56 <printf>
    8002857e:	0002c797          	auipc	a5,0x2c
    80028582:	a937c783          	lbu	a5,-1389(a5) # 80054011 <excpt+0x1>
    80028586:	c789                	beqz	a5,80028590 <vec_test_4+0xb4>
    80028588:	6498                	ld	a4,8(s1)
    8002858a:	4789                	li	a5,2
    8002858c:	00f70c63          	beq	a4,a5,800285a4 <vec_test_4+0xc8>
    80028590:	00005517          	auipc	a0,0x5
    80028594:	e4050513          	addi	a0,a0,-448 # 8002d3d0 <__func__.0+0x318>
    80028598:	0bf020ef          	jal	8002ae56 <printf>
    8002859c:	02900513          	li	a0,41
    800285a0:	5a4010ef          	jal	80029b44 <putchar>
    800285a4:	4529                	li	a0,10
    800285a6:	59e010ef          	jal	80029b44 <putchar>
    800285aa:	0002c417          	auipc	s0,0x2c
    800285ae:	a6744403          	lbu	s0,-1433(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800285b2:	00005597          	auipc	a1,0x5
    800285b6:	dd658593          	addi	a1,a1,-554 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800285ba:	cc11                	beqz	s0,800285d6 <vec_test_4+0xfa>
    800285bc:	6498                	ld	a4,8(s1)
    800285be:	4789                	li	a5,2
    TEST_END();
    800285c0:	00005597          	auipc	a1,0x5
    800285c4:	db858593          	addi	a1,a1,-584 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800285c8:	00f70763          	beq	a4,a5,800285d6 <vec_test_4+0xfa>
    800285cc:	4401                	li	s0,0
    TEST_END();
    800285ce:	00005597          	auipc	a1,0x5
    800285d2:	dba58593          	addi	a1,a1,-582 # 8002d388 <__func__.0+0x2d0>
    800285d6:	00005517          	auipc	a0,0x5
    800285da:	e5a50513          	addi	a0,a0,-422 # 8002d430 <__func__.0+0x378>
    800285de:	079020ef          	jal	8002ae56 <printf>
    800285e2:	4511                	li	a0,4
    800285e4:	925d80ef          	jal	80000f08 <goto_priv>
    800285e8:	a3cd90ef          	jal	80001824 <reset_state>
}
    800285ec:	60e2                	ld	ra,24(sp)
    800285ee:	8522                	mv	a0,s0
    800285f0:	6442                	ld	s0,16(sp)
    800285f2:	64a2                	ld	s1,8(sp)
    800285f4:	6105                	addi	sp,sp,32
    800285f6:	8082                	ret

00000000800285f8 <vec_test_5>:

bool vec_test_5(){          
    800285f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800285fa:	00005597          	auipc	a1,0x5
    800285fe:	98e58593          	addi	a1,a1,-1650 # 8002cf88 <__func__.19>
    80028602:	00005517          	auipc	a0,0x5
    80028606:	d9650513          	addi	a0,a0,-618 # 8002d398 <__func__.0+0x2e0>
bool vec_test_5(){          
    8002860a:	ec06                	sd	ra,24(sp)
    8002860c:	e426                	sd	s1,8(sp)
    8002860e:	e822                	sd	s0,16(sp)
    TEST_START();
    80028610:	047020ef          	jal	8002ae56 <printf>
    80028614:	4529                	li	a0,10
    80028616:	52e010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002861a:	20000493          	li	s1,512
    8002861e:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028622:	40000413          	li	s0,1024
    80028626:	30042073          	csrs	mstatus,s0
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    8002862a:	fe2d80ef          	jal	80000e0c <test_setup_except_function>
// 设置 vfirst.m 执行条件
static inline void set_vfirst_m_conditions(int sew, int lmull, int vl, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    8002862e:	4785                	li	a5,1
    80028630:	4749                	li	a4,18
    80028632:	80e7f2d7          	vsetvl	t0,a5,a4
    80028636:	5e00b057          	vmv.v.i	v0,1
    8002863a:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    8002863e:	a11d80ef          	jal	8000104e <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028642:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028646:	30043073          	csrc	mstatus,s0
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    8002864a:	2004a073          	csrs	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002864e:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    80028652:	4509                	li	a0,2
    80028654:	8b5d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028658:	fb4d80ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    8002865c:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80028660:	9efd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028664:	08200593          	li	a1,130
    80028668:	00010617          	auipc	a2,0x10
    8002866c:	e0860613          	addi	a2,a2,-504 # 80038470 <__func__.0+0xb3b8>
    80028670:	00005517          	auipc	a0,0x5
    80028674:	d4050513          	addi	a0,a0,-704 # 8002d3b0 <__func__.0+0x2f8>
    80028678:	7de020ef          	jal	8002ae56 <printf>
    8002867c:	0002c797          	auipc	a5,0x2c
    80028680:	9957c783          	lbu	a5,-1643(a5) # 80054011 <excpt+0x1>
    80028684:	0002c497          	auipc	s1,0x2c
    80028688:	98c48493          	addi	s1,s1,-1652 # 80054010 <excpt>
    8002868c:	00005597          	auipc	a1,0x5
    80028690:	cfc58593          	addi	a1,a1,-772 # 8002d388 <__func__.0+0x2d0>
    80028694:	cf89                	beqz	a5,800286ae <vec_test_5+0xb6>
    80028696:	6498                	ld	a4,8(s1)
    80028698:	4789                	li	a5,2
    8002869a:	00005597          	auipc	a1,0x5
    8002869e:	cde58593          	addi	a1,a1,-802 # 8002d378 <__func__.0+0x2c0>
    800286a2:	00f70663          	beq	a4,a5,800286ae <vec_test_5+0xb6>
    800286a6:	00005597          	auipc	a1,0x5
    800286aa:	ce258593          	addi	a1,a1,-798 # 8002d388 <__func__.0+0x2d0>
    800286ae:	00005517          	auipc	a0,0x5
    800286b2:	d1a50513          	addi	a0,a0,-742 # 8002d3c8 <__func__.0+0x310>
    800286b6:	7a0020ef          	jal	8002ae56 <printf>
    800286ba:	0002c797          	auipc	a5,0x2c
    800286be:	9577c783          	lbu	a5,-1705(a5) # 80054011 <excpt+0x1>
    800286c2:	c789                	beqz	a5,800286cc <vec_test_5+0xd4>
    800286c4:	6498                	ld	a4,8(s1)
    800286c6:	4789                	li	a5,2
    800286c8:	00f70c63          	beq	a4,a5,800286e0 <vec_test_5+0xe8>
    800286cc:	00005517          	auipc	a0,0x5
    800286d0:	d0450513          	addi	a0,a0,-764 # 8002d3d0 <__func__.0+0x318>
    800286d4:	782020ef          	jal	8002ae56 <printf>
    800286d8:	02900513          	li	a0,41
    800286dc:	468010ef          	jal	80029b44 <putchar>
    800286e0:	4529                	li	a0,10
    800286e2:	462010ef          	jal	80029b44 <putchar>
    800286e6:	0002c417          	auipc	s0,0x2c
    800286ea:	92b44403          	lbu	s0,-1749(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800286ee:	00005597          	auipc	a1,0x5
    800286f2:	c9a58593          	addi	a1,a1,-870 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    800286f6:	cc11                	beqz	s0,80028712 <vec_test_5+0x11a>
    800286f8:	6498                	ld	a4,8(s1)
    800286fa:	4789                	li	a5,2
    TEST_END();
    800286fc:	00005597          	auipc	a1,0x5
    80028700:	c7c58593          	addi	a1,a1,-900 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028704:	00f70763          	beq	a4,a5,80028712 <vec_test_5+0x11a>
    80028708:	4401                	li	s0,0
    TEST_END();
    8002870a:	00005597          	auipc	a1,0x5
    8002870e:	c7e58593          	addi	a1,a1,-898 # 8002d388 <__func__.0+0x2d0>
    80028712:	00005517          	auipc	a0,0x5
    80028716:	d1e50513          	addi	a0,a0,-738 # 8002d430 <__func__.0+0x378>
    8002871a:	73c020ef          	jal	8002ae56 <printf>
    8002871e:	4511                	li	a0,4
    80028720:	fe8d80ef          	jal	80000f08 <goto_priv>
    80028724:	900d90ef          	jal	80001824 <reset_state>
}
    80028728:	60e2                	ld	ra,24(sp)
    8002872a:	8522                	mv	a0,s0
    8002872c:	6442                	ld	s0,16(sp)
    8002872e:	64a2                	ld	s1,8(sp)
    80028730:	6105                	addi	sp,sp,32
    80028732:	8082                	ret

0000000080028734 <vec_test_6>:


bool vec_test_6(){
    80028734:	1101                	addi	sp,sp,-32

    TEST_START();
    80028736:	00005597          	auipc	a1,0x5
    8002873a:	86258593          	addi	a1,a1,-1950 # 8002cf98 <__func__.18>
    8002873e:	00005517          	auipc	a0,0x5
    80028742:	c5a50513          	addi	a0,a0,-934 # 8002d398 <__func__.0+0x2e0>
bool vec_test_6(){
    80028746:	ec06                	sd	ra,24(sp)
    80028748:	e822                	sd	s0,16(sp)
    8002874a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002874c:	70a020ef          	jal	8002ae56 <printf>
    80028750:	4529                	li	a0,10
    80028752:	3f2010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028756:	20000713          	li	a4,512
    8002875a:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002875e:	40000793          	li	a5,1024
    80028762:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80028766:	20072073          	csrs	vsstatus,a4
    CSRS(CSR_VSSTATUS, 1ULL << 10); 
    8002876a:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8002876e:	4509                	li	a0,2
    80028770:	f98d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028774:	e98d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXSAT);
    80028778:	009027f3          	csrr	a5,vxsat
    excpt_info();
    8002877c:	8d3d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028780:	08200593          	li	a1,130
    80028784:	00010617          	auipc	a2,0x10
    80028788:	d4c60613          	addi	a2,a2,-692 # 800384d0 <__func__.0+0xb418>
    8002878c:	00005517          	auipc	a0,0x5
    80028790:	c2450513          	addi	a0,a0,-988 # 8002d3b0 <__func__.0+0x2f8>
    80028794:	6c2020ef          	jal	8002ae56 <printf>
    80028798:	0002c797          	auipc	a5,0x2c
    8002879c:	8797c783          	lbu	a5,-1927(a5) # 80054011 <excpt+0x1>
    800287a0:	0002c497          	auipc	s1,0x2c
    800287a4:	87048493          	addi	s1,s1,-1936 # 80054010 <excpt>
    800287a8:	00005597          	auipc	a1,0x5
    800287ac:	be058593          	addi	a1,a1,-1056 # 8002d388 <__func__.0+0x2d0>
    800287b0:	cf89                	beqz	a5,800287ca <vec_test_6+0x96>
    800287b2:	6498                	ld	a4,8(s1)
    800287b4:	4789                	li	a5,2
    800287b6:	00005597          	auipc	a1,0x5
    800287ba:	bc258593          	addi	a1,a1,-1086 # 8002d378 <__func__.0+0x2c0>
    800287be:	00f70663          	beq	a4,a5,800287ca <vec_test_6+0x96>
    800287c2:	00005597          	auipc	a1,0x5
    800287c6:	bc658593          	addi	a1,a1,-1082 # 8002d388 <__func__.0+0x2d0>
    800287ca:	00005517          	auipc	a0,0x5
    800287ce:	bfe50513          	addi	a0,a0,-1026 # 8002d3c8 <__func__.0+0x310>
    800287d2:	684020ef          	jal	8002ae56 <printf>
    800287d6:	0002c797          	auipc	a5,0x2c
    800287da:	83b7c783          	lbu	a5,-1989(a5) # 80054011 <excpt+0x1>
    800287de:	c789                	beqz	a5,800287e8 <vec_test_6+0xb4>
    800287e0:	6498                	ld	a4,8(s1)
    800287e2:	4789                	li	a5,2
    800287e4:	00f70c63          	beq	a4,a5,800287fc <vec_test_6+0xc8>
    800287e8:	00005517          	auipc	a0,0x5
    800287ec:	be850513          	addi	a0,a0,-1048 # 8002d3d0 <__func__.0+0x318>
    800287f0:	666020ef          	jal	8002ae56 <printf>
    800287f4:	02900513          	li	a0,41
    800287f8:	34c010ef          	jal	80029b44 <putchar>
    800287fc:	4529                	li	a0,10
    800287fe:	346010ef          	jal	80029b44 <putchar>
    80028802:	0002c417          	auipc	s0,0x2c
    80028806:	80f44403          	lbu	s0,-2033(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002880a:	00005597          	auipc	a1,0x5
    8002880e:	b7e58593          	addi	a1,a1,-1154 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028812:	cc11                	beqz	s0,8002882e <vec_test_6+0xfa>
    80028814:	6498                	ld	a4,8(s1)
    80028816:	4789                	li	a5,2
    TEST_END();
    80028818:	00005597          	auipc	a1,0x5
    8002881c:	b6058593          	addi	a1,a1,-1184 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028820:	00f70763          	beq	a4,a5,8002882e <vec_test_6+0xfa>
    80028824:	4401                	li	s0,0
    TEST_END();
    80028826:	00005597          	auipc	a1,0x5
    8002882a:	b6258593          	addi	a1,a1,-1182 # 8002d388 <__func__.0+0x2d0>
    8002882e:	00005517          	auipc	a0,0x5
    80028832:	c0250513          	addi	a0,a0,-1022 # 8002d430 <__func__.0+0x378>
    80028836:	620020ef          	jal	8002ae56 <printf>
    8002883a:	4511                	li	a0,4
    8002883c:	eccd80ef          	jal	80000f08 <goto_priv>
    80028840:	fe5d80ef          	jal	80001824 <reset_state>
}
    80028844:	60e2                	ld	ra,24(sp)
    80028846:	8522                	mv	a0,s0
    80028848:	6442                	ld	s0,16(sp)
    8002884a:	64a2                	ld	s1,8(sp)
    8002884c:	6105                	addi	sp,sp,32
    8002884e:	8082                	ret

0000000080028850 <vec_test_7>:

bool vec_test_7(){
    80028850:	1101                	addi	sp,sp,-32

    TEST_START();
    80028852:	00004597          	auipc	a1,0x4
    80028856:	75658593          	addi	a1,a1,1878 # 8002cfa8 <__func__.17>
    8002885a:	00005517          	auipc	a0,0x5
    8002885e:	b3e50513          	addi	a0,a0,-1218 # 8002d398 <__func__.0+0x2e0>
bool vec_test_7(){
    80028862:	ec06                	sd	ra,24(sp)
    80028864:	e822                	sd	s0,16(sp)
    80028866:	e426                	sd	s1,8(sp)
    TEST_START();
    80028868:	5ee020ef          	jal	8002ae56 <printf>
    8002886c:	4529                	li	a0,10
    8002886e:	2d6010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028872:	20000713          	li	a4,512
    80028876:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002887a:	40000793          	li	a5,1024
    8002887e:	3007a073          	csrs	mstatus,a5
// 设置执行 vmsbf.m 指令条件，包括向量长度、掩码寄存器和源寄存器
static inline void set_vmsbfm_conditions(int vl, int sew, int lmull, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    80028882:	46a1                	li	a3,8
    80028884:	4645                	li	a2,17
    80028886:	80c6f2d7          	vsetvl	t0,a3,a2
    8002888a:	5e00b057          	vmv.v.i	v0,1
    8002888e:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028892:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028896:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    8002889a:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002889e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800288a2:	4509                	li	a0,2
    800288a4:	e64d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800288a8:	d64d80ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vmsbf.m 指令
static inline void execute_vmsbf_m() {
    asm volatile (
    800288ac:	5040a1d7          	vmsbf.m	v3,v4,v0.t


    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800288b0:	f9ed80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800288b4:	08200593          	li	a1,130
    800288b8:	00010617          	auipc	a2,0x10
    800288bc:	c7860613          	addi	a2,a2,-904 # 80038530 <__func__.0+0xb478>
    800288c0:	00005517          	auipc	a0,0x5
    800288c4:	af050513          	addi	a0,a0,-1296 # 8002d3b0 <__func__.0+0x2f8>
    800288c8:	58e020ef          	jal	8002ae56 <printf>
    800288cc:	0002b797          	auipc	a5,0x2b
    800288d0:	7457c783          	lbu	a5,1861(a5) # 80054011 <excpt+0x1>
    800288d4:	0002b497          	auipc	s1,0x2b
    800288d8:	73c48493          	addi	s1,s1,1852 # 80054010 <excpt>
    800288dc:	00005597          	auipc	a1,0x5
    800288e0:	aac58593          	addi	a1,a1,-1364 # 8002d388 <__func__.0+0x2d0>
    800288e4:	cf89                	beqz	a5,800288fe <vec_test_7+0xae>
    800288e6:	6498                	ld	a4,8(s1)
    800288e8:	4789                	li	a5,2
    800288ea:	00005597          	auipc	a1,0x5
    800288ee:	a8e58593          	addi	a1,a1,-1394 # 8002d378 <__func__.0+0x2c0>
    800288f2:	00f70663          	beq	a4,a5,800288fe <vec_test_7+0xae>
    800288f6:	00005597          	auipc	a1,0x5
    800288fa:	a9258593          	addi	a1,a1,-1390 # 8002d388 <__func__.0+0x2d0>
    800288fe:	00005517          	auipc	a0,0x5
    80028902:	aca50513          	addi	a0,a0,-1334 # 8002d3c8 <__func__.0+0x310>
    80028906:	550020ef          	jal	8002ae56 <printf>
    8002890a:	0002b797          	auipc	a5,0x2b
    8002890e:	7077c783          	lbu	a5,1799(a5) # 80054011 <excpt+0x1>
    80028912:	c789                	beqz	a5,8002891c <vec_test_7+0xcc>
    80028914:	6498                	ld	a4,8(s1)
    80028916:	4789                	li	a5,2
    80028918:	00f70c63          	beq	a4,a5,80028930 <vec_test_7+0xe0>
    8002891c:	00005517          	auipc	a0,0x5
    80028920:	ab450513          	addi	a0,a0,-1356 # 8002d3d0 <__func__.0+0x318>
    80028924:	532020ef          	jal	8002ae56 <printf>
    80028928:	02900513          	li	a0,41
    8002892c:	218010ef          	jal	80029b44 <putchar>
    80028930:	4529                	li	a0,10
    80028932:	212010ef          	jal	80029b44 <putchar>
    80028936:	0002b417          	auipc	s0,0x2b
    8002893a:	6db44403          	lbu	s0,1755(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002893e:	00005597          	auipc	a1,0x5
    80028942:	a4a58593          	addi	a1,a1,-1462 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028946:	cc11                	beqz	s0,80028962 <vec_test_7+0x112>
    80028948:	6498                	ld	a4,8(s1)
    8002894a:	4789                	li	a5,2
    TEST_END();
    8002894c:	00005597          	auipc	a1,0x5
    80028950:	a2c58593          	addi	a1,a1,-1492 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028954:	00f70763          	beq	a4,a5,80028962 <vec_test_7+0x112>
    80028958:	4401                	li	s0,0
    TEST_END();
    8002895a:	00005597          	auipc	a1,0x5
    8002895e:	a2e58593          	addi	a1,a1,-1490 # 8002d388 <__func__.0+0x2d0>
    80028962:	00005517          	auipc	a0,0x5
    80028966:	ace50513          	addi	a0,a0,-1330 # 8002d430 <__func__.0+0x378>
    8002896a:	4ec020ef          	jal	8002ae56 <printf>
    8002896e:	4511                	li	a0,4
    80028970:	d98d80ef          	jal	80000f08 <goto_priv>
    80028974:	eb1d80ef          	jal	80001824 <reset_state>
}
    80028978:	60e2                	ld	ra,24(sp)
    8002897a:	8522                	mv	a0,s0
    8002897c:	6442                	ld	s0,16(sp)
    8002897e:	64a2                	ld	s1,8(sp)
    80028980:	6105                	addi	sp,sp,32
    80028982:	8082                	ret

0000000080028984 <vec_test_8>:


bool vec_test_8(){
    80028984:	1101                	addi	sp,sp,-32

    TEST_START();
    80028986:	00004597          	auipc	a1,0x4
    8002898a:	63258593          	addi	a1,a1,1586 # 8002cfb8 <__func__.16>
    8002898e:	00005517          	auipc	a0,0x5
    80028992:	a0a50513          	addi	a0,a0,-1526 # 8002d398 <__func__.0+0x2e0>
bool vec_test_8(){
    80028996:	ec06                	sd	ra,24(sp)
    80028998:	e822                	sd	s0,16(sp)
    8002899a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002899c:	4ba020ef          	jal	8002ae56 <printf>
    800289a0:	4529                	li	a0,10
    800289a2:	1a2010ef          	jal	80029b44 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800289a6:	20000713          	li	a4,512
    800289aa:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800289ae:	40000793          	li	a5,1024
    800289b2:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800289b6:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800289ba:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800289be:	4509                	li	a0,2
    800289c0:	d48d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800289c4:	c48d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXRM);
    800289c8:	00a027f3          	csrr	a5,vxrm
    excpt_info();
    800289cc:	e82d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289d0:	08200593          	li	a1,130
    800289d4:	00010617          	auipc	a2,0x10
    800289d8:	bbc60613          	addi	a2,a2,-1092 # 80038590 <__func__.0+0xb4d8>
    800289dc:	00005517          	auipc	a0,0x5
    800289e0:	9d450513          	addi	a0,a0,-1580 # 8002d3b0 <__func__.0+0x2f8>
    800289e4:	472020ef          	jal	8002ae56 <printf>
    800289e8:	0002b797          	auipc	a5,0x2b
    800289ec:	6297c783          	lbu	a5,1577(a5) # 80054011 <excpt+0x1>
    800289f0:	0002b497          	auipc	s1,0x2b
    800289f4:	62048493          	addi	s1,s1,1568 # 80054010 <excpt>
    800289f8:	00005597          	auipc	a1,0x5
    800289fc:	99058593          	addi	a1,a1,-1648 # 8002d388 <__func__.0+0x2d0>
    80028a00:	cf89                	beqz	a5,80028a1a <vec_test_8+0x96>
    80028a02:	6498                	ld	a4,8(s1)
    80028a04:	4789                	li	a5,2
    80028a06:	00005597          	auipc	a1,0x5
    80028a0a:	97258593          	addi	a1,a1,-1678 # 8002d378 <__func__.0+0x2c0>
    80028a0e:	00f70663          	beq	a4,a5,80028a1a <vec_test_8+0x96>
    80028a12:	00005597          	auipc	a1,0x5
    80028a16:	97658593          	addi	a1,a1,-1674 # 8002d388 <__func__.0+0x2d0>
    80028a1a:	00005517          	auipc	a0,0x5
    80028a1e:	9ae50513          	addi	a0,a0,-1618 # 8002d3c8 <__func__.0+0x310>
    80028a22:	434020ef          	jal	8002ae56 <printf>
    80028a26:	0002b797          	auipc	a5,0x2b
    80028a2a:	5eb7c783          	lbu	a5,1515(a5) # 80054011 <excpt+0x1>
    80028a2e:	c789                	beqz	a5,80028a38 <vec_test_8+0xb4>
    80028a30:	6498                	ld	a4,8(s1)
    80028a32:	4789                	li	a5,2
    80028a34:	00f70c63          	beq	a4,a5,80028a4c <vec_test_8+0xc8>
    80028a38:	00005517          	auipc	a0,0x5
    80028a3c:	99850513          	addi	a0,a0,-1640 # 8002d3d0 <__func__.0+0x318>
    80028a40:	416020ef          	jal	8002ae56 <printf>
    80028a44:	02900513          	li	a0,41
    80028a48:	0fc010ef          	jal	80029b44 <putchar>
    80028a4c:	4529                	li	a0,10
    80028a4e:	0f6010ef          	jal	80029b44 <putchar>
    80028a52:	0002b417          	auipc	s0,0x2b
    80028a56:	5bf44403          	lbu	s0,1471(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028a5a:	00005597          	auipc	a1,0x5
    80028a5e:	92e58593          	addi	a1,a1,-1746 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a62:	cc11                	beqz	s0,80028a7e <vec_test_8+0xfa>
    80028a64:	6498                	ld	a4,8(s1)
    80028a66:	4789                	li	a5,2
    TEST_END();
    80028a68:	00005597          	auipc	a1,0x5
    80028a6c:	91058593          	addi	a1,a1,-1776 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a70:	00f70763          	beq	a4,a5,80028a7e <vec_test_8+0xfa>
    80028a74:	4401                	li	s0,0
    TEST_END();
    80028a76:	00005597          	auipc	a1,0x5
    80028a7a:	91258593          	addi	a1,a1,-1774 # 8002d388 <__func__.0+0x2d0>
    80028a7e:	00005517          	auipc	a0,0x5
    80028a82:	9b250513          	addi	a0,a0,-1614 # 8002d430 <__func__.0+0x378>
    80028a86:	3d0020ef          	jal	8002ae56 <printf>
    80028a8a:	4511                	li	a0,4
    80028a8c:	c7cd80ef          	jal	80000f08 <goto_priv>
    80028a90:	d95d80ef          	jal	80001824 <reset_state>
}
    80028a94:	60e2                	ld	ra,24(sp)
    80028a96:	8522                	mv	a0,s0
    80028a98:	6442                	ld	s0,16(sp)
    80028a9a:	64a2                	ld	s1,8(sp)
    80028a9c:	6105                	addi	sp,sp,32
    80028a9e:	8082                	ret

0000000080028aa0 <vec_test_9>:


bool vec_test_9(){
    80028aa0:	1101                	addi	sp,sp,-32

    TEST_START();
    80028aa2:	00004597          	auipc	a1,0x4
    80028aa6:	52658593          	addi	a1,a1,1318 # 8002cfc8 <__func__.15>
    80028aaa:	00005517          	auipc	a0,0x5
    80028aae:	8ee50513          	addi	a0,a0,-1810 # 8002d398 <__func__.0+0x2e0>
bool vec_test_9(){
    80028ab2:	ec06                	sd	ra,24(sp)
    80028ab4:	e822                	sd	s0,16(sp)
    80028ab6:	e426                	sd	s1,8(sp)
    TEST_START();
    80028ab8:	39e020ef          	jal	8002ae56 <printf>
    80028abc:	4529                	li	a0,10
    80028abe:	086010ef          	jal	80029b44 <putchar>
    // 如果vstart超出界限，建议实现陷阱
    /*
    向量配置的最大长度 VLMAX。这个值取决于向量长度寄存器（vl）、元素宽度（SEW）、和向量组乘数（LMUL）。
    (该测试用例只是简单弄个大的数来测试)
    */
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028ac2:	20000793          	li	a5,512
    80028ac6:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10);      
    80028aca:	40000793          	li	a5,1024
    80028ace:	3007b073          	csrc	mstatus,a5
// 设置 vadd 执行条件
static inline void set_vadd_conditions(int sew, int lmull, int vl, int v0_init, int v4_init, int v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028ad2:	47a1                	li	a5,8
    80028ad4:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80028ad8:	5e00b057          	vmv.v.i	v0,1
    80028adc:	5e01b257          	vmv.v.i	v4,3
    80028ae0:	5e02b357          	vmv.v.i	v6,5
    int v6_init = 5;    // 初始化 v6 的值为 5

    // 设置 vadd 的执行条件
    set_vadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRW(CSR_VSTART,(uint64_t)-1);
    80028ae4:	57fd                	li	a5,-1
    80028ae6:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80028aea:	008025f3          	csrr	a1,vstart
    80028aee:	00010517          	auipc	a0,0x10
    80028af2:	b0250513          	addi	a0,a0,-1278 # 800385f0 <__func__.0+0xb538>
    80028af6:	360020ef          	jal	8002ae56 <printf>
    TEST_SETUP_EXCEPT();
    80028afa:	b12d80ef          	jal	80000e0c <test_setup_except_function>



// 执行 vadd.vv 指令
static inline void execute_vadd_vv() {
    asm volatile (
    80028afe:	02430457          	vadd.vv	v8,v4,v6
    
    // 执行 vadd.vv 指令
    execute_vadd_vv();

    excpt_info();
    80028b02:	d4cd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b06:	08200593          	li	a1,130
    80028b0a:	00010617          	auipc	a2,0x10
    80028b0e:	af660613          	addi	a2,a2,-1290 # 80038600 <__func__.0+0xb548>
    80028b12:	00005517          	auipc	a0,0x5
    80028b16:	89e50513          	addi	a0,a0,-1890 # 8002d3b0 <__func__.0+0x2f8>
    80028b1a:	33c020ef          	jal	8002ae56 <printf>
    80028b1e:	0002b797          	auipc	a5,0x2b
    80028b22:	4f37c783          	lbu	a5,1267(a5) # 80054011 <excpt+0x1>
    80028b26:	0002b497          	auipc	s1,0x2b
    80028b2a:	4ea48493          	addi	s1,s1,1258 # 80054010 <excpt>
    80028b2e:	00005597          	auipc	a1,0x5
    80028b32:	85a58593          	addi	a1,a1,-1958 # 8002d388 <__func__.0+0x2d0>
    80028b36:	cf89                	beqz	a5,80028b50 <vec_test_9+0xb0>
    80028b38:	6498                	ld	a4,8(s1)
    80028b3a:	4789                	li	a5,2
    80028b3c:	00005597          	auipc	a1,0x5
    80028b40:	83c58593          	addi	a1,a1,-1988 # 8002d378 <__func__.0+0x2c0>
    80028b44:	00f70663          	beq	a4,a5,80028b50 <vec_test_9+0xb0>
    80028b48:	00005597          	auipc	a1,0x5
    80028b4c:	84058593          	addi	a1,a1,-1984 # 8002d388 <__func__.0+0x2d0>
    80028b50:	00005517          	auipc	a0,0x5
    80028b54:	87850513          	addi	a0,a0,-1928 # 8002d3c8 <__func__.0+0x310>
    80028b58:	2fe020ef          	jal	8002ae56 <printf>
    80028b5c:	0002b797          	auipc	a5,0x2b
    80028b60:	4b57c783          	lbu	a5,1205(a5) # 80054011 <excpt+0x1>
    80028b64:	c789                	beqz	a5,80028b6e <vec_test_9+0xce>
    80028b66:	6498                	ld	a4,8(s1)
    80028b68:	4789                	li	a5,2
    80028b6a:	00f70c63          	beq	a4,a5,80028b82 <vec_test_9+0xe2>
    80028b6e:	00005517          	auipc	a0,0x5
    80028b72:	86250513          	addi	a0,a0,-1950 # 8002d3d0 <__func__.0+0x318>
    80028b76:	2e0020ef          	jal	8002ae56 <printf>
    80028b7a:	02900513          	li	a0,41
    80028b7e:	7c7000ef          	jal	80029b44 <putchar>
    80028b82:	4529                	li	a0,10
    80028b84:	7c1000ef          	jal	80029b44 <putchar>
    80028b88:	0002b417          	auipc	s0,0x2b
    80028b8c:	48944403          	lbu	s0,1161(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028b90:	00004597          	auipc	a1,0x4
    80028b94:	7f858593          	addi	a1,a1,2040 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b98:	cc11                	beqz	s0,80028bb4 <vec_test_9+0x114>
    80028b9a:	6498                	ld	a4,8(s1)
    80028b9c:	4789                	li	a5,2
    TEST_END();
    80028b9e:	00004597          	auipc	a1,0x4
    80028ba2:	7da58593          	addi	a1,a1,2010 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028ba6:	00f70763          	beq	a4,a5,80028bb4 <vec_test_9+0x114>
    80028baa:	4401                	li	s0,0
    TEST_END();
    80028bac:	00004597          	auipc	a1,0x4
    80028bb0:	7dc58593          	addi	a1,a1,2012 # 8002d388 <__func__.0+0x2d0>
    80028bb4:	00005517          	auipc	a0,0x5
    80028bb8:	87c50513          	addi	a0,a0,-1924 # 8002d430 <__func__.0+0x378>
    80028bbc:	29a020ef          	jal	8002ae56 <printf>
    80028bc0:	4511                	li	a0,4
    80028bc2:	b46d80ef          	jal	80000f08 <goto_priv>
    80028bc6:	c5fd80ef          	jal	80001824 <reset_state>
}
    80028bca:	60e2                	ld	ra,24(sp)
    80028bcc:	8522                	mv	a0,s0
    80028bce:	6442                	ld	s0,16(sp)
    80028bd0:	64a2                	ld	s1,8(sp)
    80028bd2:	6105                	addi	sp,sp,32
    80028bd4:	8082                	ret

0000000080028bd6 <vec_test_10>:


bool vec_test_10(){
    80028bd6:	1141                	addi	sp,sp,-16

    TEST_START();
    80028bd8:	00004597          	auipc	a1,0x4
    80028bdc:	40058593          	addi	a1,a1,1024 # 8002cfd8 <__func__.14>
    80028be0:	00004517          	auipc	a0,0x4
    80028be4:	7b850513          	addi	a0,a0,1976 # 8002d398 <__func__.0+0x2e0>
bool vec_test_10(){
    80028be8:	e406                	sd	ra,8(sp)
    TEST_START();
    80028bea:	26c020ef          	jal	8002ae56 <printf>
    80028bee:	4529                	li	a0,10
    80028bf0:	755000ef          	jal	80029b44 <putchar>
    //当尝试执行某个向量指令时，如果 vstart 的值是该实现在使用相同 vtype 设置执行该指令时不可能产生的


    TEST_END();
    80028bf4:	00004597          	auipc	a1,0x4
    80028bf8:	78458593          	addi	a1,a1,1924 # 8002d378 <__func__.0+0x2c0>
    80028bfc:	00005517          	auipc	a0,0x5
    80028c00:	83450513          	addi	a0,a0,-1996 # 8002d430 <__func__.0+0x378>
    80028c04:	252020ef          	jal	8002ae56 <printf>
    80028c08:	4511                	li	a0,4
    80028c0a:	afed80ef          	jal	80000f08 <goto_priv>
    80028c0e:	c17d80ef          	jal	80001824 <reset_state>

}
    80028c12:	60a2                	ld	ra,8(sp)
    80028c14:	4505                	li	a0,1
    80028c16:	0141                	addi	sp,sp,16
    80028c18:	8082                	ret

0000000080028c1a <vec_test_11>:


bool vec_test_11(){
    80028c1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80028c1c:	00004597          	auipc	a1,0x4
    80028c20:	3cc58593          	addi	a1,a1,972 # 8002cfe8 <__func__.13>
    80028c24:	00004517          	auipc	a0,0x4
    80028c28:	77450513          	addi	a0,a0,1908 # 8002d398 <__func__.0+0x2e0>
bool vec_test_11(){
    80028c2c:	ec06                	sd	ra,24(sp)
    80028c2e:	e822                	sd	s0,16(sp)
    80028c30:	e426                	sd	s1,8(sp)
    TEST_START();
    80028c32:	224020ef          	jal	8002ae56 <printf>
    80028c36:	4529                	li	a0,10
    80028c38:	70d000ef          	jal	80029b44 <putchar>
    //如果 vill 位被设置位1，执行依赖 vtype 的向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028c3c:	20000793          	li	a5,512
    80028c40:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028c44:	40000793          	li	a5,1024
    80028c48:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 3;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    printf("vtype=%llx\n",CSRR(CSR_VTYPE));
    80028c4c:	c21025f3          	csrr	a1,vtype
    80028c50:	00010517          	auipc	a0,0x10
    80028c54:	9f050513          	addi	a0,a0,-1552 # 80038640 <__func__.0+0xb588>
    80028c58:	1fe020ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    80028c5c:	9b0d80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80028c60:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    execute_vmsbf_m(); 
    excpt_info();
    80028c64:	bead80ef          	jal	8000104e <excpt_info>
    
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028c68:	08200593          	li	a1,130
    80028c6c:	00010617          	auipc	a2,0x10
    80028c70:	9e460613          	addi	a2,a2,-1564 # 80038650 <__func__.0+0xb598>
    80028c74:	00004517          	auipc	a0,0x4
    80028c78:	73c50513          	addi	a0,a0,1852 # 8002d3b0 <__func__.0+0x2f8>
    80028c7c:	1da020ef          	jal	8002ae56 <printf>
    80028c80:	0002b797          	auipc	a5,0x2b
    80028c84:	3917c783          	lbu	a5,913(a5) # 80054011 <excpt+0x1>
    80028c88:	0002b497          	auipc	s1,0x2b
    80028c8c:	38848493          	addi	s1,s1,904 # 80054010 <excpt>
    80028c90:	00004597          	auipc	a1,0x4
    80028c94:	6f858593          	addi	a1,a1,1784 # 8002d388 <__func__.0+0x2d0>
    80028c98:	cf89                	beqz	a5,80028cb2 <vec_test_11+0x98>
    80028c9a:	6498                	ld	a4,8(s1)
    80028c9c:	4789                	li	a5,2
    80028c9e:	00004597          	auipc	a1,0x4
    80028ca2:	6da58593          	addi	a1,a1,1754 # 8002d378 <__func__.0+0x2c0>
    80028ca6:	00f70663          	beq	a4,a5,80028cb2 <vec_test_11+0x98>
    80028caa:	00004597          	auipc	a1,0x4
    80028cae:	6de58593          	addi	a1,a1,1758 # 8002d388 <__func__.0+0x2d0>
    80028cb2:	00004517          	auipc	a0,0x4
    80028cb6:	71650513          	addi	a0,a0,1814 # 8002d3c8 <__func__.0+0x310>
    80028cba:	19c020ef          	jal	8002ae56 <printf>
    80028cbe:	0002b797          	auipc	a5,0x2b
    80028cc2:	3537c783          	lbu	a5,851(a5) # 80054011 <excpt+0x1>
    80028cc6:	c789                	beqz	a5,80028cd0 <vec_test_11+0xb6>
    80028cc8:	6498                	ld	a4,8(s1)
    80028cca:	4789                	li	a5,2
    80028ccc:	00f70c63          	beq	a4,a5,80028ce4 <vec_test_11+0xca>
    80028cd0:	00004517          	auipc	a0,0x4
    80028cd4:	70050513          	addi	a0,a0,1792 # 8002d3d0 <__func__.0+0x318>
    80028cd8:	17e020ef          	jal	8002ae56 <printf>
    80028cdc:	02900513          	li	a0,41
    80028ce0:	665000ef          	jal	80029b44 <putchar>
    80028ce4:	4529                	li	a0,10
    80028ce6:	65f000ef          	jal	80029b44 <putchar>
    80028cea:	0002b417          	auipc	s0,0x2b
    80028cee:	32744403          	lbu	s0,807(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028cf2:	00004597          	auipc	a1,0x4
    80028cf6:	69658593          	addi	a1,a1,1686 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028cfa:	cc11                	beqz	s0,80028d16 <vec_test_11+0xfc>
    80028cfc:	6498                	ld	a4,8(s1)
    80028cfe:	4789                	li	a5,2
    TEST_END();
    80028d00:	00004597          	auipc	a1,0x4
    80028d04:	67858593          	addi	a1,a1,1656 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028d08:	00f70763          	beq	a4,a5,80028d16 <vec_test_11+0xfc>
    80028d0c:	4401                	li	s0,0
    TEST_END();
    80028d0e:	00004597          	auipc	a1,0x4
    80028d12:	67a58593          	addi	a1,a1,1658 # 8002d388 <__func__.0+0x2d0>
    80028d16:	00004517          	auipc	a0,0x4
    80028d1a:	71a50513          	addi	a0,a0,1818 # 8002d430 <__func__.0+0x378>
    80028d1e:	138020ef          	jal	8002ae56 <printf>
    80028d22:	4511                	li	a0,4
    80028d24:	9e4d80ef          	jal	80000f08 <goto_priv>
    80028d28:	afdd80ef          	jal	80001824 <reset_state>

}
    80028d2c:	60e2                	ld	ra,24(sp)
    80028d2e:	8522                	mv	a0,s0
    80028d30:	6442                	ld	s0,16(sp)
    80028d32:	64a2                	ld	s1,8(sp)
    80028d34:	6105                	addi	sp,sp,32
    80028d36:	8082                	ret

0000000080028d38 <vec_test_12>:

bool vec_test_12(){
    80028d38:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d3a:	00004597          	auipc	a1,0x4
    80028d3e:	2be58593          	addi	a1,a1,702 # 8002cff8 <__func__.12>
    80028d42:	00004517          	auipc	a0,0x4
    80028d46:	65650513          	addi	a0,a0,1622 # 8002d398 <__func__.0+0x2e0>
bool vec_test_12(){
    80028d4a:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d4c:	10a020ef          	jal	8002ae56 <printf>
    80028d50:	4529                	li	a0,10
    80028d52:	5f3000ef          	jal	80029b44 <putchar>
    //实现必须提供与所有受支持的 SEW 设置对应的 EEW 向量加载和存储。设置 EEW 宽度不受支持，执行向量加载/存储编码
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028d56:	20000793          	li	a5,512
    80028d5a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028d5e:	40000793          	li	a5,1024
    80028d62:	3007b073          	csrc	mstatus,a5

    // set_vtype_with_invalid_eew();       //环境不支持设置



    TEST_END();
    80028d66:	00004597          	auipc	a1,0x4
    80028d6a:	61258593          	addi	a1,a1,1554 # 8002d378 <__func__.0+0x2c0>
    80028d6e:	00004517          	auipc	a0,0x4
    80028d72:	6c250513          	addi	a0,a0,1730 # 8002d430 <__func__.0+0x378>
    80028d76:	0e0020ef          	jal	8002ae56 <printf>
    80028d7a:	4511                	li	a0,4
    80028d7c:	98cd80ef          	jal	80000f08 <goto_priv>
    80028d80:	aa5d80ef          	jal	80001824 <reset_state>

}
    80028d84:	60a2                	ld	ra,8(sp)
    80028d86:	4505                	li	a0,1
    80028d88:	0141                	addi	sp,sp,16
    80028d8a:	8082                	ret

0000000080028d8c <vec_test_13>:

bool vec_test_13(){
    80028d8c:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d8e:	00004597          	auipc	a1,0x4
    80028d92:	27a58593          	addi	a1,a1,634 # 8002d008 <__func__.11>
    80028d96:	00004517          	auipc	a0,0x4
    80028d9a:	60250513          	addi	a0,a0,1538 # 8002d398 <__func__.0+0x2e0>
bool vec_test_13(){
    80028d9e:	e406                	sd	ra,8(sp)
    TEST_START();
    80028da0:	0b6020ef          	jal	8002ae56 <printf>
    80028da4:	4529                	li	a0,10
    80028da6:	59f000ef          	jal	80029b44 <putchar>
    //设置不支持的 EEW 值，执行 vl<nf>r 指令

    TEST_END();
    80028daa:	00004597          	auipc	a1,0x4
    80028dae:	5ce58593          	addi	a1,a1,1486 # 8002d378 <__func__.0+0x2c0>
    80028db2:	00004517          	auipc	a0,0x4
    80028db6:	67e50513          	addi	a0,a0,1662 # 8002d430 <__func__.0+0x378>
    80028dba:	09c020ef          	jal	8002ae56 <printf>
    80028dbe:	4511                	li	a0,4
    80028dc0:	948d80ef          	jal	80000f08 <goto_priv>
    80028dc4:	a61d80ef          	jal	80001824 <reset_state>

}
    80028dc8:	60a2                	ld	ra,8(sp)
    80028dca:	4505                	li	a0,1
    80028dcc:	0141                	addi	sp,sp,16
    80028dce:	8082                	ret

0000000080028dd0 <vec_test_14>:



bool vec_test_14(){
    80028dd0:	1101                	addi	sp,sp,-32

    TEST_START();
    80028dd2:	00004597          	auipc	a1,0x4
    80028dd6:	24658593          	addi	a1,a1,582 # 8002d018 <__func__.10>
    80028dda:	00004517          	auipc	a0,0x4
    80028dde:	5be50513          	addi	a0,a0,1470 # 8002d398 <__func__.0+0x2e0>
bool vec_test_14(){
    80028de2:	ec06                	sd	ra,24(sp)
    80028de4:	e822                	sd	s0,16(sp)
    80028de6:	e426                	sd	s1,8(sp)
    TEST_START();
    80028de8:	06e020ef          	jal	8002ae56 <printf>
    80028dec:	4529                	li	a0,10
    80028dee:	557000ef          	jal	80029b44 <putchar>
    //浮点单元状态字段 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028df2:	20000793          	li	a5,512
    80028df6:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028dfa:	40000793          	li	a5,1024
    80028dfe:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028e02:	6709                	lui	a4,0x2
    80028e04:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028e08:	6791                	lui	a5,0x4
    80028e0a:	3007b073          	csrc	mstatus,a5
// 设置向量浮点加法指令的执行条件
static inline void set_vfadd_conditions(int sew, int lmull, int vl, float v0_init, float v4_init, float v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028e0e:	00010617          	auipc	a2,0x10
    80028e12:	b3262787          	flw	fa5,-1230(a2) # 80038940 <__func__.0+0xb888>
    80028e16:	00010617          	auipc	a2,0x10
    80028e1a:	b2e62707          	flw	fa4,-1234(a2) # 80038944 <__func__.0+0xb88c>
    80028e1e:	00010617          	auipc	a2,0x10
    80028e22:	b2a62687          	flw	fa3,-1238(a2) # 80038948 <__func__.0+0xb890>
    80028e26:	46a1                	li	a3,8
    80028e28:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028e2c:	5e07d057          	vfmv.v.f	v0,fa5
    80028e30:	5e075257          	vfmv.v.f	v4,fa4
    80028e34:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRC(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs = 0
    80028e38:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028e3c:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028e40:	fcdd70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行向量浮点加法指令
static inline void execute_vfadd() {
    asm volatile (
    80028e44:	02431457          	vfadd.vv	v8,v4,v6
    // 执行 vfadd 指令
    execute_vfadd();

    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028e48:	08200593          	li	a1,130
    80028e4c:	00010617          	auipc	a2,0x10
    80028e50:	84460613          	addi	a2,a2,-1980 # 80038690 <__func__.0+0xb5d8>
    80028e54:	00004517          	auipc	a0,0x4
    80028e58:	55c50513          	addi	a0,a0,1372 # 8002d3b0 <__func__.0+0x2f8>
    80028e5c:	7fb010ef          	jal	8002ae56 <printf>
    80028e60:	0002b797          	auipc	a5,0x2b
    80028e64:	1b17c783          	lbu	a5,433(a5) # 80054011 <excpt+0x1>
    80028e68:	0002b497          	auipc	s1,0x2b
    80028e6c:	1a848493          	addi	s1,s1,424 # 80054010 <excpt>
    80028e70:	00004597          	auipc	a1,0x4
    80028e74:	51858593          	addi	a1,a1,1304 # 8002d388 <__func__.0+0x2d0>
    80028e78:	cf89                	beqz	a5,80028e92 <vec_test_14+0xc2>
    80028e7a:	6498                	ld	a4,8(s1)
    80028e7c:	4789                	li	a5,2
    80028e7e:	00004597          	auipc	a1,0x4
    80028e82:	4fa58593          	addi	a1,a1,1274 # 8002d378 <__func__.0+0x2c0>
    80028e86:	00f70663          	beq	a4,a5,80028e92 <vec_test_14+0xc2>
    80028e8a:	00004597          	auipc	a1,0x4
    80028e8e:	4fe58593          	addi	a1,a1,1278 # 8002d388 <__func__.0+0x2d0>
    80028e92:	00004517          	auipc	a0,0x4
    80028e96:	53650513          	addi	a0,a0,1334 # 8002d3c8 <__func__.0+0x310>
    80028e9a:	7bd010ef          	jal	8002ae56 <printf>
    80028e9e:	0002b797          	auipc	a5,0x2b
    80028ea2:	1737c783          	lbu	a5,371(a5) # 80054011 <excpt+0x1>
    80028ea6:	c789                	beqz	a5,80028eb0 <vec_test_14+0xe0>
    80028ea8:	6498                	ld	a4,8(s1)
    80028eaa:	4789                	li	a5,2
    80028eac:	00f70c63          	beq	a4,a5,80028ec4 <vec_test_14+0xf4>
    80028eb0:	00004517          	auipc	a0,0x4
    80028eb4:	52050513          	addi	a0,a0,1312 # 8002d3d0 <__func__.0+0x318>
    80028eb8:	79f010ef          	jal	8002ae56 <printf>
    80028ebc:	02900513          	li	a0,41
    80028ec0:	485000ef          	jal	80029b44 <putchar>
    80028ec4:	4529                	li	a0,10
    80028ec6:	47f000ef          	jal	80029b44 <putchar>
    80028eca:	0002b417          	auipc	s0,0x2b
    80028ece:	14744403          	lbu	s0,327(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028ed2:	00004597          	auipc	a1,0x4
    80028ed6:	4b658593          	addi	a1,a1,1206 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028eda:	cc11                	beqz	s0,80028ef6 <vec_test_14+0x126>
    80028edc:	6498                	ld	a4,8(s1)
    80028ede:	4789                	li	a5,2
    TEST_END();
    80028ee0:	00004597          	auipc	a1,0x4
    80028ee4:	49858593          	addi	a1,a1,1176 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028ee8:	00f70763          	beq	a4,a5,80028ef6 <vec_test_14+0x126>
    80028eec:	4401                	li	s0,0
    TEST_END();
    80028eee:	00004597          	auipc	a1,0x4
    80028ef2:	49a58593          	addi	a1,a1,1178 # 8002d388 <__func__.0+0x2d0>
    80028ef6:	00004517          	auipc	a0,0x4
    80028efa:	53a50513          	addi	a0,a0,1338 # 8002d430 <__func__.0+0x378>
    80028efe:	759010ef          	jal	8002ae56 <printf>
    80028f02:	4511                	li	a0,4
    80028f04:	804d80ef          	jal	80000f08 <goto_priv>
    80028f08:	91dd80ef          	jal	80001824 <reset_state>

}
    80028f0c:	60e2                	ld	ra,24(sp)
    80028f0e:	8522                	mv	a0,s0
    80028f10:	6442                	ld	s0,16(sp)
    80028f12:	64a2                	ld	s1,8(sp)
    80028f14:	6105                	addi	sp,sp,32
    80028f16:	8082                	ret

0000000080028f18 <vec_test_15>:


bool vec_test_15(){
    80028f18:	1101                	addi	sp,sp,-32

    TEST_START();
    80028f1a:	00004597          	auipc	a1,0x4
    80028f1e:	10e58593          	addi	a1,a1,270 # 8002d028 <__func__.9>
    80028f22:	00004517          	auipc	a0,0x4
    80028f26:	47650513          	addi	a0,a0,1142 # 8002d398 <__func__.0+0x2e0>
bool vec_test_15(){
    80028f2a:	ec06                	sd	ra,24(sp)
    80028f2c:	e822                	sd	s0,16(sp)
    80028f2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80028f30:	727010ef          	jal	8002ae56 <printf>
    80028f34:	4529                	li	a0,10
    80028f36:	40f000ef          	jal	80029b44 <putchar>
    //如果实现了虚拟化扩展且 V=1，如果 vsstatus.FS 或 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令的操作
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028f3a:	20000793          	li	a5,512
    80028f3e:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028f42:	40000793          	li	a5,1024
    80028f46:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f4a:	6709                	lui	a4,0x2
    80028f4c:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f50:	6791                	lui	a5,0x4
    80028f52:	3007b073          	csrc	mstatus,a5
    asm volatile (
    80028f56:	00010617          	auipc	a2,0x10
    80028f5a:	9ea62787          	flw	fa5,-1558(a2) # 80038940 <__func__.0+0xb888>
    80028f5e:	00010617          	auipc	a2,0x10
    80028f62:	9e662707          	flw	fa4,-1562(a2) # 80038944 <__func__.0+0xb88c>
    80028f66:	00010617          	auipc	a2,0x10
    80028f6a:	9e262687          	flw	fa3,-1566(a2) # 80038948 <__func__.0+0xb890>
    80028f6e:	46a1                	li	a3,8
    80028f70:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028f74:	5e07d057          	vfmv.v.f	v0,fa5
    80028f78:	5e075257          	vfmv.v.f	v4,fa4
    80028f7c:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f80:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 14); 
    80028f84:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 13);      //设置vsstatus.fs = 0
    80028f88:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 14); 
    80028f8c:	2007b073          	csrc	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80028f90:	e7dd70ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vfadd 指令
    goto_priv(PRIV_VU);
    80028f94:	4501                	li	a0,0
    80028f96:	f73d70ef          	jal	80000f08 <goto_priv>
    asm volatile (
    80028f9a:	02431457          	vfadd.vv	v8,v4,v6
    execute_vfadd();
    excpt_info();
    80028f9e:	8b0d80ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80028fa2:	08200593          	li	a1,130
    80028fa6:	0000f617          	auipc	a2,0xf
    80028faa:	72a60613          	addi	a2,a2,1834 # 800386d0 <__func__.0+0xb618>
    80028fae:	00004517          	auipc	a0,0x4
    80028fb2:	40250513          	addi	a0,a0,1026 # 8002d3b0 <__func__.0+0x2f8>
    80028fb6:	6a1010ef          	jal	8002ae56 <printf>
    80028fba:	0002b797          	auipc	a5,0x2b
    80028fbe:	0577c783          	lbu	a5,87(a5) # 80054011 <excpt+0x1>
    80028fc2:	0002b497          	auipc	s1,0x2b
    80028fc6:	04e48493          	addi	s1,s1,78 # 80054010 <excpt>
    80028fca:	00004597          	auipc	a1,0x4
    80028fce:	3be58593          	addi	a1,a1,958 # 8002d388 <__func__.0+0x2d0>
    80028fd2:	cf89                	beqz	a5,80028fec <vec_test_15+0xd4>
    80028fd4:	6498                	ld	a4,8(s1)
    80028fd6:	4789                	li	a5,2
    80028fd8:	00004597          	auipc	a1,0x4
    80028fdc:	3a058593          	addi	a1,a1,928 # 8002d378 <__func__.0+0x2c0>
    80028fe0:	00f70663          	beq	a4,a5,80028fec <vec_test_15+0xd4>
    80028fe4:	00004597          	auipc	a1,0x4
    80028fe8:	3a458593          	addi	a1,a1,932 # 8002d388 <__func__.0+0x2d0>
    80028fec:	00004517          	auipc	a0,0x4
    80028ff0:	3dc50513          	addi	a0,a0,988 # 8002d3c8 <__func__.0+0x310>
    80028ff4:	663010ef          	jal	8002ae56 <printf>
    80028ff8:	0002b797          	auipc	a5,0x2b
    80028ffc:	0197c783          	lbu	a5,25(a5) # 80054011 <excpt+0x1>
    80029000:	c789                	beqz	a5,8002900a <vec_test_15+0xf2>
    80029002:	6498                	ld	a4,8(s1)
    80029004:	4789                	li	a5,2
    80029006:	00f70c63          	beq	a4,a5,8002901e <vec_test_15+0x106>
    8002900a:	00004517          	auipc	a0,0x4
    8002900e:	3c650513          	addi	a0,a0,966 # 8002d3d0 <__func__.0+0x318>
    80029012:	645010ef          	jal	8002ae56 <printf>
    80029016:	02900513          	li	a0,41
    8002901a:	32b000ef          	jal	80029b44 <putchar>
    8002901e:	4529                	li	a0,10
    80029020:	325000ef          	jal	80029b44 <putchar>
    80029024:	0002b417          	auipc	s0,0x2b
    80029028:	fed44403          	lbu	s0,-19(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002902c:	00004597          	auipc	a1,0x4
    80029030:	35c58593          	addi	a1,a1,860 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029034:	cc11                	beqz	s0,80029050 <vec_test_15+0x138>
    80029036:	6498                	ld	a4,8(s1)
    80029038:	4789                	li	a5,2
    TEST_END();
    8002903a:	00004597          	auipc	a1,0x4
    8002903e:	33e58593          	addi	a1,a1,830 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029042:	00f70763          	beq	a4,a5,80029050 <vec_test_15+0x138>
    80029046:	4401                	li	s0,0
    TEST_END();
    80029048:	00004597          	auipc	a1,0x4
    8002904c:	34058593          	addi	a1,a1,832 # 8002d388 <__func__.0+0x2d0>
    80029050:	00004517          	auipc	a0,0x4
    80029054:	3e050513          	addi	a0,a0,992 # 8002d430 <__func__.0+0x378>
    80029058:	5ff010ef          	jal	8002ae56 <printf>
    8002905c:	4511                	li	a0,4
    8002905e:	eabd70ef          	jal	80000f08 <goto_priv>
    80029062:	fc2d80ef          	jal	80001824 <reset_state>

}
    80029066:	60e2                	ld	ra,24(sp)
    80029068:	8522                	mv	a0,s0
    8002906a:	6442                	ld	s0,16(sp)
    8002906c:	64a2                	ld	s1,8(sp)
    8002906e:	6105                	addi	sp,sp,32
    80029070:	8082                	ret

0000000080029072 <vec_test_16>:





bool vec_test_16(){
    80029072:	1101                	addi	sp,sp,-32

    TEST_START();
    80029074:	00004597          	auipc	a1,0x4
    80029078:	fc458593          	addi	a1,a1,-60 # 8002d038 <__func__.8>
    8002907c:	00004517          	auipc	a0,0x4
    80029080:	31c50513          	addi	a0,a0,796 # 8002d398 <__func__.0+0x2e0>
bool vec_test_16(){
    80029084:	ec06                	sd	ra,24(sp)
    80029086:	e822                	sd	s0,16(sp)
    80029088:	e426                	sd	s1,8(sp)
    TEST_START();
    8002908a:	5cd010ef          	jal	8002ae56 <printf>
    8002908e:	4529                	li	a0,10
    80029090:	2b5000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vector reduction instructions操作


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029094:	20000793          	li	a5,512
    80029098:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002909c:	40000793          	li	a5,1024
    800290a0:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800290a4:	4789                	li	a5,2
    800290a6:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    800290aa:	5e00b057          	vmv.v.i	v0,1
    800290ae:	5e003257          	vmv.v.i	v4,0
    800290b2:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1


    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);
    excpt_info();
    800290b6:	f99d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800290ba:	57fd                	li	a5,-1
    800290bc:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800290c0:	008025f3          	csrr	a1,vstart
    800290c4:	0000f517          	auipc	a0,0xf
    800290c8:	52c50513          	addi	a0,a0,1324 # 800385f0 <__func__.0+0xb538>
    800290cc:	58b010ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    800290d0:	d3dd70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800290d4:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    800290d8:	f77d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800290dc:	08200593          	li	a1,130
    800290e0:	0000f617          	auipc	a2,0xf
    800290e4:	64060613          	addi	a2,a2,1600 # 80038720 <__func__.0+0xb668>
    800290e8:	00004517          	auipc	a0,0x4
    800290ec:	2c850513          	addi	a0,a0,712 # 8002d3b0 <__func__.0+0x2f8>
    800290f0:	567010ef          	jal	8002ae56 <printf>
    800290f4:	0002b797          	auipc	a5,0x2b
    800290f8:	f1d7c783          	lbu	a5,-227(a5) # 80054011 <excpt+0x1>
    800290fc:	0002b497          	auipc	s1,0x2b
    80029100:	f1448493          	addi	s1,s1,-236 # 80054010 <excpt>
    80029104:	00004597          	auipc	a1,0x4
    80029108:	28458593          	addi	a1,a1,644 # 8002d388 <__func__.0+0x2d0>
    8002910c:	cf89                	beqz	a5,80029126 <vec_test_16+0xb4>
    8002910e:	6498                	ld	a4,8(s1)
    80029110:	4789                	li	a5,2
    80029112:	00004597          	auipc	a1,0x4
    80029116:	26658593          	addi	a1,a1,614 # 8002d378 <__func__.0+0x2c0>
    8002911a:	00f70663          	beq	a4,a5,80029126 <vec_test_16+0xb4>
    8002911e:	00004597          	auipc	a1,0x4
    80029122:	26a58593          	addi	a1,a1,618 # 8002d388 <__func__.0+0x2d0>
    80029126:	00004517          	auipc	a0,0x4
    8002912a:	2a250513          	addi	a0,a0,674 # 8002d3c8 <__func__.0+0x310>
    8002912e:	529010ef          	jal	8002ae56 <printf>
    80029132:	0002b797          	auipc	a5,0x2b
    80029136:	edf7c783          	lbu	a5,-289(a5) # 80054011 <excpt+0x1>
    8002913a:	c789                	beqz	a5,80029144 <vec_test_16+0xd2>
    8002913c:	6498                	ld	a4,8(s1)
    8002913e:	4789                	li	a5,2
    80029140:	00f70c63          	beq	a4,a5,80029158 <vec_test_16+0xe6>
    80029144:	00004517          	auipc	a0,0x4
    80029148:	28c50513          	addi	a0,a0,652 # 8002d3d0 <__func__.0+0x318>
    8002914c:	50b010ef          	jal	8002ae56 <printf>
    80029150:	02900513          	li	a0,41
    80029154:	1f1000ef          	jal	80029b44 <putchar>
    80029158:	4529                	li	a0,10
    8002915a:	1eb000ef          	jal	80029b44 <putchar>
    8002915e:	0002b417          	auipc	s0,0x2b
    80029162:	eb344403          	lbu	s0,-333(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029166:	00004597          	auipc	a1,0x4
    8002916a:	22258593          	addi	a1,a1,546 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    8002916e:	cc11                	beqz	s0,8002918a <vec_test_16+0x118>
    80029170:	6498                	ld	a4,8(s1)
    80029172:	4789                	li	a5,2
    TEST_END();
    80029174:	00004597          	auipc	a1,0x4
    80029178:	20458593          	addi	a1,a1,516 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    8002917c:	00f70763          	beq	a4,a5,8002918a <vec_test_16+0x118>
    80029180:	4401                	li	s0,0
    TEST_END();
    80029182:	00004597          	auipc	a1,0x4
    80029186:	20658593          	addi	a1,a1,518 # 8002d388 <__func__.0+0x2d0>
    8002918a:	00004517          	auipc	a0,0x4
    8002918e:	2a650513          	addi	a0,a0,678 # 8002d430 <__func__.0+0x378>
    80029192:	4c5010ef          	jal	8002ae56 <printf>
    80029196:	4511                	li	a0,4
    80029198:	d71d70ef          	jal	80000f08 <goto_priv>
    8002919c:	e88d80ef          	jal	80001824 <reset_state>

}
    800291a0:	60e2                	ld	ra,24(sp)
    800291a2:	8522                	mv	a0,s0
    800291a4:	6442                	ld	s0,16(sp)
    800291a6:	64a2                	ld	s1,8(sp)
    800291a8:	6105                	addi	sp,sp,32
    800291aa:	8082                	ret

00000000800291ac <vec_test_17>:



bool vec_test_17(){
    800291ac:	1101                	addi	sp,sp,-32

    TEST_START();
    800291ae:	00004597          	auipc	a1,0x4
    800291b2:	e9a58593          	addi	a1,a1,-358 # 8002d048 <__func__.7>
    800291b6:	00004517          	auipc	a0,0x4
    800291ba:	1e250513          	addi	a0,a0,482 # 8002d398 <__func__.0+0x2e0>
bool vec_test_17(){
    800291be:	ec06                	sd	ra,24(sp)
    800291c0:	e822                	sd	s0,16(sp)
    800291c2:	e426                	sd	s1,8(sp)
    TEST_START();
    800291c4:	493010ef          	jal	8002ae56 <printf>
    800291c8:	4529                	li	a0,10
    800291ca:	17b000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vcpop.m指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800291ce:	20000793          	li	a5,512
    800291d2:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800291d6:	40000793          	li	a5,1024
    800291da:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800291de:	47a1                	li	a5,8
    800291e0:	4745                	li	a4,17
    800291e2:	80e7f2d7          	vsetvl	t0,a5,a4
    800291e6:	5e00b057          	vmv.v.i	v0,1
    800291ea:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800291ee:	57fd                	li	a5,-1
    800291f0:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800291f4:	008025f3          	csrr	a1,vstart
    800291f8:	0000f517          	auipc	a0,0xf
    800291fc:	3f850513          	addi	a0,a0,1016 # 800385f0 <__func__.0+0xb538>
    80029200:	457010ef          	jal	8002ae56 <printf>

    // 执行 vcpop.m 指令并返回结果
    TEST_SETUP_EXCEPT();
    80029204:	c09d70ef          	jal	80000e0c <test_setup_except_function>
    uint32_t result = execute_vcpop_v2();
    80029208:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    8002920c:	e43d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029210:	08200593          	li	a1,130
    80029214:	0000f617          	auipc	a2,0xf
    80029218:	54c60613          	addi	a2,a2,1356 # 80038760 <__func__.0+0xb6a8>
    8002921c:	00004517          	auipc	a0,0x4
    80029220:	19450513          	addi	a0,a0,404 # 8002d3b0 <__func__.0+0x2f8>
    80029224:	433010ef          	jal	8002ae56 <printf>
    80029228:	0002b797          	auipc	a5,0x2b
    8002922c:	de97c783          	lbu	a5,-535(a5) # 80054011 <excpt+0x1>
    80029230:	0002b497          	auipc	s1,0x2b
    80029234:	de048493          	addi	s1,s1,-544 # 80054010 <excpt>
    80029238:	00004597          	auipc	a1,0x4
    8002923c:	15058593          	addi	a1,a1,336 # 8002d388 <__func__.0+0x2d0>
    80029240:	cf89                	beqz	a5,8002925a <vec_test_17+0xae>
    80029242:	6498                	ld	a4,8(s1)
    80029244:	4789                	li	a5,2
    80029246:	00004597          	auipc	a1,0x4
    8002924a:	13258593          	addi	a1,a1,306 # 8002d378 <__func__.0+0x2c0>
    8002924e:	00f70663          	beq	a4,a5,8002925a <vec_test_17+0xae>
    80029252:	00004597          	auipc	a1,0x4
    80029256:	13658593          	addi	a1,a1,310 # 8002d388 <__func__.0+0x2d0>
    8002925a:	00004517          	auipc	a0,0x4
    8002925e:	16e50513          	addi	a0,a0,366 # 8002d3c8 <__func__.0+0x310>
    80029262:	3f5010ef          	jal	8002ae56 <printf>
    80029266:	0002b797          	auipc	a5,0x2b
    8002926a:	dab7c783          	lbu	a5,-597(a5) # 80054011 <excpt+0x1>
    8002926e:	c789                	beqz	a5,80029278 <vec_test_17+0xcc>
    80029270:	6498                	ld	a4,8(s1)
    80029272:	4789                	li	a5,2
    80029274:	00f70c63          	beq	a4,a5,8002928c <vec_test_17+0xe0>
    80029278:	00004517          	auipc	a0,0x4
    8002927c:	15850513          	addi	a0,a0,344 # 8002d3d0 <__func__.0+0x318>
    80029280:	3d7010ef          	jal	8002ae56 <printf>
    80029284:	02900513          	li	a0,41
    80029288:	0bd000ef          	jal	80029b44 <putchar>
    8002928c:	4529                	li	a0,10
    8002928e:	0b7000ef          	jal	80029b44 <putchar>
    80029292:	0002b417          	auipc	s0,0x2b
    80029296:	d7f44403          	lbu	s0,-641(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002929a:	00004597          	auipc	a1,0x4
    8002929e:	0ee58593          	addi	a1,a1,238 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800292a2:	cc11                	beqz	s0,800292be <vec_test_17+0x112>
    800292a4:	6498                	ld	a4,8(s1)
    800292a6:	4789                	li	a5,2
    TEST_END();
    800292a8:	00004597          	auipc	a1,0x4
    800292ac:	0d058593          	addi	a1,a1,208 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800292b0:	00f70763          	beq	a4,a5,800292be <vec_test_17+0x112>
    800292b4:	4401                	li	s0,0
    TEST_END();
    800292b6:	00004597          	auipc	a1,0x4
    800292ba:	0d258593          	addi	a1,a1,210 # 8002d388 <__func__.0+0x2d0>
    800292be:	00004517          	auipc	a0,0x4
    800292c2:	17250513          	addi	a0,a0,370 # 8002d430 <__func__.0+0x378>
    800292c6:	391010ef          	jal	8002ae56 <printf>
    800292ca:	4511                	li	a0,4
    800292cc:	c3dd70ef          	jal	80000f08 <goto_priv>
    800292d0:	d54d80ef          	jal	80001824 <reset_state>

}
    800292d4:	60e2                	ld	ra,24(sp)
    800292d6:	8522                	mv	a0,s0
    800292d8:	6442                	ld	s0,16(sp)
    800292da:	64a2                	ld	s1,8(sp)
    800292dc:	6105                	addi	sp,sp,32
    800292de:	8082                	ret

00000000800292e0 <vec_test_18>:



bool vec_test_18(){
    800292e0:	1101                	addi	sp,sp,-32

    TEST_START();
    800292e2:	00004597          	auipc	a1,0x4
    800292e6:	d7658593          	addi	a1,a1,-650 # 8002d058 <__func__.6>
    800292ea:	00004517          	auipc	a0,0x4
    800292ee:	0ae50513          	addi	a0,a0,174 # 8002d398 <__func__.0+0x2e0>
bool vec_test_18(){
    800292f2:	ec06                	sd	ra,24(sp)
    800292f4:	e822                	sd	s0,16(sp)
    800292f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800292f8:	35f010ef          	jal	8002ae56 <printf>
    800292fc:	4529                	li	a0,10
    800292fe:	047000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vfirst指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029302:	20000793          	li	a5,512
    80029306:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002930a:	40000793          	li	a5,1024
    8002930e:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80029312:	afbd70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80029316:	4785                	li	a5,1
    80029318:	4749                	li	a4,18
    8002931a:	80e7f2d7          	vsetvl	t0,a5,a4
    8002931e:	5e00b057          	vmv.v.i	v0,1
    80029322:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    80029326:	d29d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002932a:	57fd                	li	a5,-1
    8002932c:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029330:	008025f3          	csrr	a1,vstart
    80029334:	0000f517          	auipc	a0,0xf
    80029338:	2bc50513          	addi	a0,a0,700 # 800385f0 <__func__.0+0xb538>
    8002933c:	31b010ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    80029340:	acdd70ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    80029344:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80029348:	d07d70ef          	jal	8000104e <excpt_info>


    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    8002934c:	08200593          	li	a1,130
    80029350:	0000f617          	auipc	a2,0xf
    80029354:	45060613          	addi	a2,a2,1104 # 800387a0 <__func__.0+0xb6e8>
    80029358:	00004517          	auipc	a0,0x4
    8002935c:	05850513          	addi	a0,a0,88 # 8002d3b0 <__func__.0+0x2f8>
    80029360:	2f7010ef          	jal	8002ae56 <printf>
    80029364:	0002b797          	auipc	a5,0x2b
    80029368:	cad7c783          	lbu	a5,-851(a5) # 80054011 <excpt+0x1>
    8002936c:	0002b497          	auipc	s1,0x2b
    80029370:	ca448493          	addi	s1,s1,-860 # 80054010 <excpt>
    80029374:	00004597          	auipc	a1,0x4
    80029378:	01458593          	addi	a1,a1,20 # 8002d388 <__func__.0+0x2d0>
    8002937c:	cf89                	beqz	a5,80029396 <vec_test_18+0xb6>
    8002937e:	6498                	ld	a4,8(s1)
    80029380:	4789                	li	a5,2
    80029382:	00004597          	auipc	a1,0x4
    80029386:	ff658593          	addi	a1,a1,-10 # 8002d378 <__func__.0+0x2c0>
    8002938a:	00f70663          	beq	a4,a5,80029396 <vec_test_18+0xb6>
    8002938e:	00004597          	auipc	a1,0x4
    80029392:	ffa58593          	addi	a1,a1,-6 # 8002d388 <__func__.0+0x2d0>
    80029396:	00004517          	auipc	a0,0x4
    8002939a:	03250513          	addi	a0,a0,50 # 8002d3c8 <__func__.0+0x310>
    8002939e:	2b9010ef          	jal	8002ae56 <printf>
    800293a2:	0002b797          	auipc	a5,0x2b
    800293a6:	c6f7c783          	lbu	a5,-913(a5) # 80054011 <excpt+0x1>
    800293aa:	c789                	beqz	a5,800293b4 <vec_test_18+0xd4>
    800293ac:	6498                	ld	a4,8(s1)
    800293ae:	4789                	li	a5,2
    800293b0:	00f70c63          	beq	a4,a5,800293c8 <vec_test_18+0xe8>
    800293b4:	00004517          	auipc	a0,0x4
    800293b8:	01c50513          	addi	a0,a0,28 # 8002d3d0 <__func__.0+0x318>
    800293bc:	29b010ef          	jal	8002ae56 <printf>
    800293c0:	02900513          	li	a0,41
    800293c4:	780000ef          	jal	80029b44 <putchar>
    800293c8:	4529                	li	a0,10
    800293ca:	77a000ef          	jal	80029b44 <putchar>
    800293ce:	0002b417          	auipc	s0,0x2b
    800293d2:	c4344403          	lbu	s0,-957(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800293d6:	00004597          	auipc	a1,0x4
    800293da:	fb258593          	addi	a1,a1,-78 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    800293de:	cc11                	beqz	s0,800293fa <vec_test_18+0x11a>
    800293e0:	6498                	ld	a4,8(s1)
    800293e2:	4789                	li	a5,2
    TEST_END();
    800293e4:	00004597          	auipc	a1,0x4
    800293e8:	f9458593          	addi	a1,a1,-108 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    800293ec:	00f70763          	beq	a4,a5,800293fa <vec_test_18+0x11a>
    800293f0:	4401                	li	s0,0
    TEST_END();
    800293f2:	00004597          	auipc	a1,0x4
    800293f6:	f9658593          	addi	a1,a1,-106 # 8002d388 <__func__.0+0x2d0>
    800293fa:	00004517          	auipc	a0,0x4
    800293fe:	03650513          	addi	a0,a0,54 # 8002d430 <__func__.0+0x378>
    80029402:	255010ef          	jal	8002ae56 <printf>
    80029406:	4511                	li	a0,4
    80029408:	b01d70ef          	jal	80000f08 <goto_priv>
    8002940c:	c18d80ef          	jal	80001824 <reset_state>

}
    80029410:	60e2                	ld	ra,24(sp)
    80029412:	8522                	mv	a0,s0
    80029414:	6442                	ld	s0,16(sp)
    80029416:	64a2                	ld	s1,8(sp)
    80029418:	6105                	addi	sp,sp,32
    8002941a:	8082                	ret

000000008002941c <vec_test_19>:

bool vec_test_19(){
    8002941c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002941e:	00004597          	auipc	a1,0x4
    80029422:	c4a58593          	addi	a1,a1,-950 # 8002d068 <__func__.5>
    80029426:	00004517          	auipc	a0,0x4
    8002942a:	f7250513          	addi	a0,a0,-142 # 8002d398 <__func__.0+0x2e0>
bool vec_test_19(){
    8002942e:	ec06                	sd	ra,24(sp)
    80029430:	e822                	sd	s0,16(sp)
    80029432:	e426                	sd	s1,8(sp)
    TEST_START();
    80029434:	223010ef          	jal	8002ae56 <printf>
    80029438:	4529                	li	a0,10
    8002943a:	70a000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vmsbf指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002943e:	20000793          	li	a5,512
    80029442:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029446:	40000793          	li	a5,1024
    8002944a:	3007a073          	csrs	mstatus,a5
    asm volatile (
    8002944e:	47a1                	li	a5,8
    80029450:	4745                	li	a4,17
    80029452:	80e7f2d7          	vsetvl	t0,a5,a4
    80029456:	5e00b057          	vmv.v.i	v0,1
    8002945a:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002945e:	57fd                	li	a5,-1
    80029460:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029464:	008025f3          	csrr	a1,vstart
    80029468:	0000f517          	auipc	a0,0xf
    8002946c:	18850513          	addi	a0,a0,392 # 800385f0 <__func__.0+0xb538>
    80029470:	1e7010ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    80029474:	999d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80029478:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    8002947c:	bd3d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029480:	08200593          	li	a1,130
    80029484:	0000f617          	auipc	a2,0xf
    80029488:	35c60613          	addi	a2,a2,860 # 800387e0 <__func__.0+0xb728>
    8002948c:	00004517          	auipc	a0,0x4
    80029490:	f2450513          	addi	a0,a0,-220 # 8002d3b0 <__func__.0+0x2f8>
    80029494:	1c3010ef          	jal	8002ae56 <printf>
    80029498:	0002b797          	auipc	a5,0x2b
    8002949c:	b797c783          	lbu	a5,-1159(a5) # 80054011 <excpt+0x1>
    800294a0:	0002b497          	auipc	s1,0x2b
    800294a4:	b7048493          	addi	s1,s1,-1168 # 80054010 <excpt>
    800294a8:	00004597          	auipc	a1,0x4
    800294ac:	ee058593          	addi	a1,a1,-288 # 8002d388 <__func__.0+0x2d0>
    800294b0:	cf89                	beqz	a5,800294ca <vec_test_19+0xae>
    800294b2:	6498                	ld	a4,8(s1)
    800294b4:	4789                	li	a5,2
    800294b6:	00004597          	auipc	a1,0x4
    800294ba:	ec258593          	addi	a1,a1,-318 # 8002d378 <__func__.0+0x2c0>
    800294be:	00f70663          	beq	a4,a5,800294ca <vec_test_19+0xae>
    800294c2:	00004597          	auipc	a1,0x4
    800294c6:	ec658593          	addi	a1,a1,-314 # 8002d388 <__func__.0+0x2d0>
    800294ca:	00004517          	auipc	a0,0x4
    800294ce:	efe50513          	addi	a0,a0,-258 # 8002d3c8 <__func__.0+0x310>
    800294d2:	185010ef          	jal	8002ae56 <printf>
    800294d6:	0002b797          	auipc	a5,0x2b
    800294da:	b3b7c783          	lbu	a5,-1221(a5) # 80054011 <excpt+0x1>
    800294de:	c789                	beqz	a5,800294e8 <vec_test_19+0xcc>
    800294e0:	6498                	ld	a4,8(s1)
    800294e2:	4789                	li	a5,2
    800294e4:	00f70c63          	beq	a4,a5,800294fc <vec_test_19+0xe0>
    800294e8:	00004517          	auipc	a0,0x4
    800294ec:	ee850513          	addi	a0,a0,-280 # 8002d3d0 <__func__.0+0x318>
    800294f0:	167010ef          	jal	8002ae56 <printf>
    800294f4:	02900513          	li	a0,41
    800294f8:	64c000ef          	jal	80029b44 <putchar>
    800294fc:	4529                	li	a0,10
    800294fe:	646000ef          	jal	80029b44 <putchar>
    80029502:	0002b417          	auipc	s0,0x2b
    80029506:	b0f44403          	lbu	s0,-1265(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002950a:	00004597          	auipc	a1,0x4
    8002950e:	e7e58593          	addi	a1,a1,-386 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029512:	cc11                	beqz	s0,8002952e <vec_test_19+0x112>
    80029514:	6498                	ld	a4,8(s1)
    80029516:	4789                	li	a5,2
    TEST_END();
    80029518:	00004597          	auipc	a1,0x4
    8002951c:	e6058593          	addi	a1,a1,-416 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029520:	00f70763          	beq	a4,a5,8002952e <vec_test_19+0x112>
    80029524:	4401                	li	s0,0
    TEST_END();
    80029526:	00004597          	auipc	a1,0x4
    8002952a:	e6258593          	addi	a1,a1,-414 # 8002d388 <__func__.0+0x2d0>
    8002952e:	00004517          	auipc	a0,0x4
    80029532:	f0250513          	addi	a0,a0,-254 # 8002d430 <__func__.0+0x378>
    80029536:	121010ef          	jal	8002ae56 <printf>
    8002953a:	4511                	li	a0,4
    8002953c:	9cdd70ef          	jal	80000f08 <goto_priv>
    80029540:	ae4d80ef          	jal	80001824 <reset_state>

}
    80029544:	60e2                	ld	ra,24(sp)
    80029546:	8522                	mv	a0,s0
    80029548:	6442                	ld	s0,16(sp)
    8002954a:	64a2                	ld	s1,8(sp)
    8002954c:	6105                	addi	sp,sp,32
    8002954e:	8082                	ret

0000000080029550 <vec_test_20>:

bool vec_test_20(){
    80029550:	1101                	addi	sp,sp,-32

    TEST_START();
    80029552:	00004597          	auipc	a1,0x4
    80029556:	b2658593          	addi	a1,a1,-1242 # 8002d078 <__func__.4>
    8002955a:	00004517          	auipc	a0,0x4
    8002955e:	e3e50513          	addi	a0,a0,-450 # 8002d398 <__func__.0+0x2e0>
bool vec_test_20(){
    80029562:	ec06                	sd	ra,24(sp)
    80029564:	e822                	sd	s0,16(sp)
    80029566:	e426                	sd	s1,8(sp)
    TEST_START();
    80029568:	0ef010ef          	jal	8002ae56 <printf>
    8002956c:	4529                	li	a0,10
    8002956e:	5d6000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vmsif指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029572:	20000793          	li	a5,512
    80029576:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002957a:	40000793          	li	a5,1024
    8002957e:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80029582:	47a1                	li	a5,8
    80029584:	4745                	li	a4,17
    80029586:	80e7f2d7          	vsetvl	t0,a5,a4
    8002958a:	5e00b057          	vmv.v.i	v0,1
    8002958e:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsif.m 的执行条件
    set_vmsifm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029592:	57fd                	li	a5,-1
    80029594:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029598:	008025f3          	csrr	a1,vstart
    8002959c:	0000f517          	auipc	a0,0xf
    800295a0:	05450513          	addi	a0,a0,84 # 800385f0 <__func__.0+0xb538>
    800295a4:	0b3010ef          	jal	8002ae56 <printf>

    // 执行 vmsif.m 指令
    TEST_SETUP_EXCEPT();
    800295a8:	865d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800295ac:	5041a2d7          	vmsif.m	v5,v4,v0.t
    execute_vmsif_m();
    excpt_info();
    800295b0:	a9fd70ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800295b4:	08200593          	li	a1,130
    800295b8:	0000f617          	auipc	a2,0xf
    800295bc:	26860613          	addi	a2,a2,616 # 80038820 <__func__.0+0xb768>
    800295c0:	00004517          	auipc	a0,0x4
    800295c4:	df050513          	addi	a0,a0,-528 # 8002d3b0 <__func__.0+0x2f8>
    800295c8:	08f010ef          	jal	8002ae56 <printf>
    800295cc:	0002b797          	auipc	a5,0x2b
    800295d0:	a457c783          	lbu	a5,-1467(a5) # 80054011 <excpt+0x1>
    800295d4:	0002b497          	auipc	s1,0x2b
    800295d8:	a3c48493          	addi	s1,s1,-1476 # 80054010 <excpt>
    800295dc:	00004597          	auipc	a1,0x4
    800295e0:	dac58593          	addi	a1,a1,-596 # 8002d388 <__func__.0+0x2d0>
    800295e4:	cf89                	beqz	a5,800295fe <vec_test_20+0xae>
    800295e6:	6498                	ld	a4,8(s1)
    800295e8:	4789                	li	a5,2
    800295ea:	00004597          	auipc	a1,0x4
    800295ee:	d8e58593          	addi	a1,a1,-626 # 8002d378 <__func__.0+0x2c0>
    800295f2:	00f70663          	beq	a4,a5,800295fe <vec_test_20+0xae>
    800295f6:	00004597          	auipc	a1,0x4
    800295fa:	d9258593          	addi	a1,a1,-622 # 8002d388 <__func__.0+0x2d0>
    800295fe:	00004517          	auipc	a0,0x4
    80029602:	dca50513          	addi	a0,a0,-566 # 8002d3c8 <__func__.0+0x310>
    80029606:	051010ef          	jal	8002ae56 <printf>
    8002960a:	0002b797          	auipc	a5,0x2b
    8002960e:	a077c783          	lbu	a5,-1529(a5) # 80054011 <excpt+0x1>
    80029612:	c789                	beqz	a5,8002961c <vec_test_20+0xcc>
    80029614:	6498                	ld	a4,8(s1)
    80029616:	4789                	li	a5,2
    80029618:	00f70c63          	beq	a4,a5,80029630 <vec_test_20+0xe0>
    8002961c:	00004517          	auipc	a0,0x4
    80029620:	db450513          	addi	a0,a0,-588 # 8002d3d0 <__func__.0+0x318>
    80029624:	033010ef          	jal	8002ae56 <printf>
    80029628:	02900513          	li	a0,41
    8002962c:	518000ef          	jal	80029b44 <putchar>
    80029630:	4529                	li	a0,10
    80029632:	512000ef          	jal	80029b44 <putchar>
    80029636:	0002b417          	auipc	s0,0x2b
    8002963a:	9db44403          	lbu	s0,-1573(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002963e:	00004597          	auipc	a1,0x4
    80029642:	d4a58593          	addi	a1,a1,-694 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029646:	cc11                	beqz	s0,80029662 <vec_test_20+0x112>
    80029648:	6498                	ld	a4,8(s1)
    8002964a:	4789                	li	a5,2
    TEST_END();
    8002964c:	00004597          	auipc	a1,0x4
    80029650:	d2c58593          	addi	a1,a1,-724 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029654:	00f70763          	beq	a4,a5,80029662 <vec_test_20+0x112>
    80029658:	4401                	li	s0,0
    TEST_END();
    8002965a:	00004597          	auipc	a1,0x4
    8002965e:	d2e58593          	addi	a1,a1,-722 # 8002d388 <__func__.0+0x2d0>
    80029662:	00004517          	auipc	a0,0x4
    80029666:	dce50513          	addi	a0,a0,-562 # 8002d430 <__func__.0+0x378>
    8002966a:	7ec010ef          	jal	8002ae56 <printf>
    8002966e:	4511                	li	a0,4
    80029670:	899d70ef          	jal	80000f08 <goto_priv>
    80029674:	9b0d80ef          	jal	80001824 <reset_state>

}
    80029678:	60e2                	ld	ra,24(sp)
    8002967a:	8522                	mv	a0,s0
    8002967c:	6442                	ld	s0,16(sp)
    8002967e:	64a2                	ld	s1,8(sp)
    80029680:	6105                	addi	sp,sp,32
    80029682:	8082                	ret

0000000080029684 <vec_test_21>:

bool vec_test_21(){
    80029684:	1101                	addi	sp,sp,-32

    TEST_START();
    80029686:	00004597          	auipc	a1,0x4
    8002968a:	a0258593          	addi	a1,a1,-1534 # 8002d088 <__func__.3>
    8002968e:	00004517          	auipc	a0,0x4
    80029692:	d0a50513          	addi	a0,a0,-758 # 8002d398 <__func__.0+0x2e0>
bool vec_test_21(){
    80029696:	ec06                	sd	ra,24(sp)
    80029698:	e822                	sd	s0,16(sp)
    8002969a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002969c:	7ba010ef          	jal	8002ae56 <printf>
    800296a0:	4529                	li	a0,10
    800296a2:	4a2000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vmsof指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800296a6:	20000793          	li	a5,512
    800296aa:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800296ae:	40000793          	li	a5,1024
    800296b2:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800296b6:	47a1                	li	a5,8
    800296b8:	4745                	li	a4,17
    800296ba:	80e7f2d7          	vsetvl	t0,a5,a4
    800296be:	5e00b057          	vmv.v.i	v0,1
    800296c2:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsof.m 的执行条件
    set_vmsofm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800296c6:	57fd                	li	a5,-1
    800296c8:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800296cc:	008025f3          	csrr	a1,vstart
    800296d0:	0000f517          	auipc	a0,0xf
    800296d4:	f2050513          	addi	a0,a0,-224 # 800385f0 <__func__.0+0xb538>
    800296d8:	77e010ef          	jal	8002ae56 <printf>

    // 执行 vmsof.m 指令
    TEST_SETUP_EXCEPT();
    800296dc:	f30d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800296e0:	504122d7          	vmsof.m	v5,v4,v0.t
    execute_vmsof_m();
    excpt_info();
    800296e4:	96bd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296e8:	08200593          	li	a1,130
    800296ec:	0000f617          	auipc	a2,0xf
    800296f0:	13460613          	addi	a2,a2,308 # 80038820 <__func__.0+0xb768>
    800296f4:	00004517          	auipc	a0,0x4
    800296f8:	cbc50513          	addi	a0,a0,-836 # 8002d3b0 <__func__.0+0x2f8>
    800296fc:	75a010ef          	jal	8002ae56 <printf>
    80029700:	0002b797          	auipc	a5,0x2b
    80029704:	9117c783          	lbu	a5,-1775(a5) # 80054011 <excpt+0x1>
    80029708:	0002b497          	auipc	s1,0x2b
    8002970c:	90848493          	addi	s1,s1,-1784 # 80054010 <excpt>
    80029710:	00004597          	auipc	a1,0x4
    80029714:	c7858593          	addi	a1,a1,-904 # 8002d388 <__func__.0+0x2d0>
    80029718:	cf89                	beqz	a5,80029732 <vec_test_21+0xae>
    8002971a:	6498                	ld	a4,8(s1)
    8002971c:	4789                	li	a5,2
    8002971e:	00004597          	auipc	a1,0x4
    80029722:	c5a58593          	addi	a1,a1,-934 # 8002d378 <__func__.0+0x2c0>
    80029726:	00f70663          	beq	a4,a5,80029732 <vec_test_21+0xae>
    8002972a:	00004597          	auipc	a1,0x4
    8002972e:	c5e58593          	addi	a1,a1,-930 # 8002d388 <__func__.0+0x2d0>
    80029732:	00004517          	auipc	a0,0x4
    80029736:	c9650513          	addi	a0,a0,-874 # 8002d3c8 <__func__.0+0x310>
    8002973a:	71c010ef          	jal	8002ae56 <printf>
    8002973e:	0002b797          	auipc	a5,0x2b
    80029742:	8d37c783          	lbu	a5,-1837(a5) # 80054011 <excpt+0x1>
    80029746:	c789                	beqz	a5,80029750 <vec_test_21+0xcc>
    80029748:	6498                	ld	a4,8(s1)
    8002974a:	4789                	li	a5,2
    8002974c:	00f70c63          	beq	a4,a5,80029764 <vec_test_21+0xe0>
    80029750:	00004517          	auipc	a0,0x4
    80029754:	c8050513          	addi	a0,a0,-896 # 8002d3d0 <__func__.0+0x318>
    80029758:	6fe010ef          	jal	8002ae56 <printf>
    8002975c:	02900513          	li	a0,41
    80029760:	3e4000ef          	jal	80029b44 <putchar>
    80029764:	4529                	li	a0,10
    80029766:	3de000ef          	jal	80029b44 <putchar>
    8002976a:	0002b417          	auipc	s0,0x2b
    8002976e:	8a744403          	lbu	s0,-1881(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029772:	00004597          	auipc	a1,0x4
    80029776:	c1658593          	addi	a1,a1,-1002 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002977a:	cc11                	beqz	s0,80029796 <vec_test_21+0x112>
    8002977c:	6498                	ld	a4,8(s1)
    8002977e:	4789                	li	a5,2
    TEST_END();
    80029780:	00004597          	auipc	a1,0x4
    80029784:	bf858593          	addi	a1,a1,-1032 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029788:	00f70763          	beq	a4,a5,80029796 <vec_test_21+0x112>
    8002978c:	4401                	li	s0,0
    TEST_END();
    8002978e:	00004597          	auipc	a1,0x4
    80029792:	bfa58593          	addi	a1,a1,-1030 # 8002d388 <__func__.0+0x2d0>
    80029796:	00004517          	auipc	a0,0x4
    8002979a:	c9a50513          	addi	a0,a0,-870 # 8002d430 <__func__.0+0x378>
    8002979e:	6b8010ef          	jal	8002ae56 <printf>
    800297a2:	4511                	li	a0,4
    800297a4:	f64d70ef          	jal	80000f08 <goto_priv>
    800297a8:	87cd80ef          	jal	80001824 <reset_state>

}
    800297ac:	60e2                	ld	ra,24(sp)
    800297ae:	8522                	mv	a0,s0
    800297b0:	6442                	ld	s0,16(sp)
    800297b2:	64a2                	ld	s1,8(sp)
    800297b4:	6105                	addi	sp,sp,32
    800297b6:	8082                	ret

00000000800297b8 <vec_test_22>:

bool vec_test_22(){
    800297b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800297ba:	00004597          	auipc	a1,0x4
    800297be:	8de58593          	addi	a1,a1,-1826 # 8002d098 <__func__.2>
    800297c2:	00004517          	auipc	a0,0x4
    800297c6:	bd650513          	addi	a0,a0,-1066 # 8002d398 <__func__.0+0x2e0>
bool vec_test_22(){
    800297ca:	ec06                	sd	ra,24(sp)
    800297cc:	e822                	sd	s0,16(sp)
    800297ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800297d0:	686010ef          	jal	8002ae56 <printf>
    800297d4:	4529                	li	a0,10
    800297d6:	36e000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行viota.m 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800297da:	20000793          	li	a5,512
    800297de:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800297e2:	40000793          	li	a5,1024
    800297e6:	3007a073          	csrs	mstatus,a5
// 设置 viota.m 执行条件
static inline void set_viota_m_conditions(int vl, int sew, int lmull, int v0_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    800297ea:	47a1                	li	a5,8
    800297ec:	4745                	li	a4,17
    800297ee:	80e7f2d7          	vsetvl	t0,a5,a4
    800297f2:	5e00b057          	vmv.v.i	v0,1
    int v0_init = 1;    // 初始化 v0 的值为 1（全1）

    // 设置 viota.m 的执行条件
    set_viota_m_conditions(vl, sew, lmull, v0_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800297f6:	57fd                	li	a5,-1
    800297f8:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800297fc:	008025f3          	csrr	a1,vstart
    80029800:	0000f517          	auipc	a0,0xf
    80029804:	df050513          	addi	a0,a0,-528 # 800385f0 <__func__.0+0xb538>
    80029808:	64e010ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    8002980c:	e00d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 viota.m 指令
static inline void execute_viota_m() {
    asm volatile (
    80029810:	52082357          	viota.m	v6,v0
    // 执行 viota.m 指令
    execute_viota_m();

    excpt_info();
    80029814:	83bd70ef          	jal	8000104e <excpt_info>



    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    80029818:	08200593          	li	a1,130
    8002981c:	0000f617          	auipc	a2,0xf
    80029820:	04460613          	addi	a2,a2,68 # 80038860 <__func__.0+0xb7a8>
    80029824:	00004517          	auipc	a0,0x4
    80029828:	b8c50513          	addi	a0,a0,-1140 # 8002d3b0 <__func__.0+0x2f8>
    8002982c:	62a010ef          	jal	8002ae56 <printf>
    80029830:	0002a797          	auipc	a5,0x2a
    80029834:	7e17c783          	lbu	a5,2017(a5) # 80054011 <excpt+0x1>
    80029838:	0002a497          	auipc	s1,0x2a
    8002983c:	7d848493          	addi	s1,s1,2008 # 80054010 <excpt>
    80029840:	00004597          	auipc	a1,0x4
    80029844:	b4858593          	addi	a1,a1,-1208 # 8002d388 <__func__.0+0x2d0>
    80029848:	cf89                	beqz	a5,80029862 <vec_test_22+0xaa>
    8002984a:	6498                	ld	a4,8(s1)
    8002984c:	4789                	li	a5,2
    8002984e:	00004597          	auipc	a1,0x4
    80029852:	b2a58593          	addi	a1,a1,-1238 # 8002d378 <__func__.0+0x2c0>
    80029856:	00f70663          	beq	a4,a5,80029862 <vec_test_22+0xaa>
    8002985a:	00004597          	auipc	a1,0x4
    8002985e:	b2e58593          	addi	a1,a1,-1234 # 8002d388 <__func__.0+0x2d0>
    80029862:	00004517          	auipc	a0,0x4
    80029866:	b6650513          	addi	a0,a0,-1178 # 8002d3c8 <__func__.0+0x310>
    8002986a:	5ec010ef          	jal	8002ae56 <printf>
    8002986e:	0002a797          	auipc	a5,0x2a
    80029872:	7a37c783          	lbu	a5,1955(a5) # 80054011 <excpt+0x1>
    80029876:	c789                	beqz	a5,80029880 <vec_test_22+0xc8>
    80029878:	6498                	ld	a4,8(s1)
    8002987a:	4789                	li	a5,2
    8002987c:	00f70c63          	beq	a4,a5,80029894 <vec_test_22+0xdc>
    80029880:	00004517          	auipc	a0,0x4
    80029884:	b5050513          	addi	a0,a0,-1200 # 8002d3d0 <__func__.0+0x318>
    80029888:	5ce010ef          	jal	8002ae56 <printf>
    8002988c:	02900513          	li	a0,41
    80029890:	2b4000ef          	jal	80029b44 <putchar>
    80029894:	4529                	li	a0,10
    80029896:	2ae000ef          	jal	80029b44 <putchar>
    8002989a:	0002a417          	auipc	s0,0x2a
    8002989e:	77744403          	lbu	s0,1911(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800298a2:	00004597          	auipc	a1,0x4
    800298a6:	ae658593          	addi	a1,a1,-1306 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800298aa:	cc11                	beqz	s0,800298c6 <vec_test_22+0x10e>
    800298ac:	6498                	ld	a4,8(s1)
    800298ae:	4789                	li	a5,2
    TEST_END();
    800298b0:	00004597          	auipc	a1,0x4
    800298b4:	ac858593          	addi	a1,a1,-1336 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800298b8:	00f70763          	beq	a4,a5,800298c6 <vec_test_22+0x10e>
    800298bc:	4401                	li	s0,0
    TEST_END();
    800298be:	00004597          	auipc	a1,0x4
    800298c2:	aca58593          	addi	a1,a1,-1334 # 8002d388 <__func__.0+0x2d0>
    800298c6:	00004517          	auipc	a0,0x4
    800298ca:	b6a50513          	addi	a0,a0,-1174 # 8002d430 <__func__.0+0x378>
    800298ce:	588010ef          	jal	8002ae56 <printf>
    800298d2:	4511                	li	a0,4
    800298d4:	e34d70ef          	jal	80000f08 <goto_priv>
    800298d8:	f4dd70ef          	jal	80001824 <reset_state>

}
    800298dc:	60e2                	ld	ra,24(sp)
    800298de:	8522                	mv	a0,s0
    800298e0:	6442                	ld	s0,16(sp)
    800298e2:	64a2                	ld	s1,8(sp)
    800298e4:	6105                	addi	sp,sp,32
    800298e6:	8082                	ret

00000000800298e8 <vec_test_23>:



bool vec_test_23(){
    800298e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800298ea:	00003597          	auipc	a1,0x3
    800298ee:	7be58593          	addi	a1,a1,1982 # 8002d0a8 <__func__.1>
    800298f2:	00004517          	auipc	a0,0x4
    800298f6:	aa650513          	addi	a0,a0,-1370 # 8002d398 <__func__.0+0x2e0>
bool vec_test_23(){
    800298fa:	ec06                	sd	ra,24(sp)
    800298fc:	e822                	sd	s0,16(sp)
    800298fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80029900:	556010ef          	jal	8002ae56 <printf>
    80029904:	4529                	li	a0,10
    80029906:	23e000ef          	jal	80029b44 <putchar>
    //如果 vstart 非零，执行vcompress 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002990a:	20000793          	li	a5,512
    8002990e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029912:	40000793          	li	a5,1024
    80029916:	3007a073          	csrs	mstatus,a5
// 设置 vcompress 执行条件
static inline void set_vcompress_conditions(int vl, int sew, int lmull, int v0_init, int v4_init, int v8_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    8002991a:	47a1                	li	a5,8
    8002991c:	4745                	li	a4,17
    8002991e:	80e7f2d7          	vsetvl	t0,a5,a4
    80029922:	5e00b057          	vmv.v.i	v0,1
    80029926:	5e01b257          	vmv.v.i	v4,3
    8002992a:	5e003457          	vmv.v.i	v8,0
    int v8_init = 0;    // 初始化 v8 的值为 0

    // 设置 vcompress 的执行条件
    set_vcompress_conditions(vl, sew, lmull, v0_init, v4_init, v8_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002992e:	57fd                	li	a5,-1
    80029930:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029934:	008025f3          	csrr	a1,vstart
    80029938:	0000f517          	auipc	a0,0xf
    8002993c:	cb850513          	addi	a0,a0,-840 # 800385f0 <__func__.0+0xb538>
    80029940:	516010ef          	jal	8002ae56 <printf>

    TEST_SETUP_EXCEPT();
    80029944:	cc8d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vcompress 指令
static inline void execute_vcompress() {
    asm volatile (
    80029948:	5e402457          	vcompress.vm	v8,v4,v0
    // 执行 vcompress 指令
    execute_vcompress();
    excpt_info();
    8002994c:	f02d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029950:	08200593          	li	a1,130
    80029954:	0000f617          	auipc	a2,0xf
    80029958:	f4c60613          	addi	a2,a2,-180 # 800388a0 <__func__.0+0xb7e8>
    8002995c:	00004517          	auipc	a0,0x4
    80029960:	a5450513          	addi	a0,a0,-1452 # 8002d3b0 <__func__.0+0x2f8>
    80029964:	4f2010ef          	jal	8002ae56 <printf>
    80029968:	0002a797          	auipc	a5,0x2a
    8002996c:	6a97c783          	lbu	a5,1705(a5) # 80054011 <excpt+0x1>
    80029970:	0002a497          	auipc	s1,0x2a
    80029974:	6a048493          	addi	s1,s1,1696 # 80054010 <excpt>
    80029978:	00004597          	auipc	a1,0x4
    8002997c:	a1058593          	addi	a1,a1,-1520 # 8002d388 <__func__.0+0x2d0>
    80029980:	cf89                	beqz	a5,8002999a <vec_test_23+0xb2>
    80029982:	6498                	ld	a4,8(s1)
    80029984:	4789                	li	a5,2
    80029986:	00004597          	auipc	a1,0x4
    8002998a:	9f258593          	addi	a1,a1,-1550 # 8002d378 <__func__.0+0x2c0>
    8002998e:	00f70663          	beq	a4,a5,8002999a <vec_test_23+0xb2>
    80029992:	00004597          	auipc	a1,0x4
    80029996:	9f658593          	addi	a1,a1,-1546 # 8002d388 <__func__.0+0x2d0>
    8002999a:	00004517          	auipc	a0,0x4
    8002999e:	a2e50513          	addi	a0,a0,-1490 # 8002d3c8 <__func__.0+0x310>
    800299a2:	4b4010ef          	jal	8002ae56 <printf>
    800299a6:	0002a797          	auipc	a5,0x2a
    800299aa:	66b7c783          	lbu	a5,1643(a5) # 80054011 <excpt+0x1>
    800299ae:	c789                	beqz	a5,800299b8 <vec_test_23+0xd0>
    800299b0:	6498                	ld	a4,8(s1)
    800299b2:	4789                	li	a5,2
    800299b4:	00f70c63          	beq	a4,a5,800299cc <vec_test_23+0xe4>
    800299b8:	00004517          	auipc	a0,0x4
    800299bc:	a1850513          	addi	a0,a0,-1512 # 8002d3d0 <__func__.0+0x318>
    800299c0:	496010ef          	jal	8002ae56 <printf>
    800299c4:	02900513          	li	a0,41
    800299c8:	17c000ef          	jal	80029b44 <putchar>
    800299cc:	4529                	li	a0,10
    800299ce:	176000ef          	jal	80029b44 <putchar>
    800299d2:	0002a417          	auipc	s0,0x2a
    800299d6:	63f44403          	lbu	s0,1599(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800299da:	00004597          	auipc	a1,0x4
    800299de:	9ae58593          	addi	a1,a1,-1618 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800299e2:	cc11                	beqz	s0,800299fe <vec_test_23+0x116>
    800299e4:	6498                	ld	a4,8(s1)
    800299e6:	4789                	li	a5,2
    TEST_END();
    800299e8:	00004597          	auipc	a1,0x4
    800299ec:	99058593          	addi	a1,a1,-1648 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800299f0:	00f70763          	beq	a4,a5,800299fe <vec_test_23+0x116>
    800299f4:	4401                	li	s0,0
    TEST_END();
    800299f6:	00004597          	auipc	a1,0x4
    800299fa:	99258593          	addi	a1,a1,-1646 # 8002d388 <__func__.0+0x2d0>
    800299fe:	00004517          	auipc	a0,0x4
    80029a02:	a3250513          	addi	a0,a0,-1486 # 8002d430 <__func__.0+0x378>
    80029a06:	450010ef          	jal	8002ae56 <printf>
    80029a0a:	4511                	li	a0,4
    80029a0c:	cfcd70ef          	jal	80000f08 <goto_priv>
    80029a10:	e15d70ef          	jal	80001824 <reset_state>

}
    80029a14:	60e2                	ld	ra,24(sp)
    80029a16:	8522                	mv	a0,s0
    80029a18:	6442                	ld	s0,16(sp)
    80029a1a:	64a2                	ld	s1,8(sp)
    80029a1c:	6105                	addi	sp,sp,32
    80029a1e:	8082                	ret

0000000080029a20 <vec_test_24>:



bool vec_test_24(){
    80029a20:	1101                	addi	sp,sp,-32

    TEST_START();
    80029a22:	00003597          	auipc	a1,0x3
    80029a26:	69658593          	addi	a1,a1,1686 # 8002d0b8 <__func__.0>
    80029a2a:	00004517          	auipc	a0,0x4
    80029a2e:	96e50513          	addi	a0,a0,-1682 # 8002d398 <__func__.0+0x2e0>
bool vec_test_24(){
    80029a32:	ec06                	sd	ra,24(sp)
    80029a34:	e822                	sd	s0,16(sp)
    80029a36:	e426                	sd	s1,8(sp)
    TEST_START();
    80029a38:	41e010ef          	jal	8002ae56 <printf>
    80029a3c:	4529                	li	a0,10
    80029a3e:	106000ef          	jal	80029b44 <putchar>
    //当执行一个向量指令时，如设置 EGS > VLMAX


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029a42:	20000793          	li	a5,512
    80029a46:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029a4a:	40000793          	li	a5,1024
    80029a4e:	3007a073          	csrs	mstatus,a5
    int vl = 32;       // 向量长

    // 计算 VLMAX
    int vlen = 128;     // 硬件的向量寄存器长度（128 位）
    int vlmax = (vlen / sew) * lmull;
    printf("Calculated VLMAX: %d elements\n", vlmax);
    80029a52:	10000593          	li	a1,256
    80029a56:	0000f517          	auipc	a0,0xf
    80029a5a:	e8a50513          	addi	a0,a0,-374 # 800388e0 <__func__.0+0xb828>
    80029a5e:	3f8010ef          	jal	8002ae56 <printf>

    // 设置 EGS > VLMAX 的执行条件
    // set_egs_greater_vlmax_conditions(vl, sew, lmull);

    excpt_info();
    80029a62:	decd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a66:	08200593          	li	a1,130
    80029a6a:	0000f617          	auipc	a2,0xf
    80029a6e:	e3660613          	addi	a2,a2,-458 # 800388a0 <__func__.0+0xb7e8>
    80029a72:	00004517          	auipc	a0,0x4
    80029a76:	93e50513          	addi	a0,a0,-1730 # 8002d3b0 <__func__.0+0x2f8>
    80029a7a:	3dc010ef          	jal	8002ae56 <printf>
    80029a7e:	0002a797          	auipc	a5,0x2a
    80029a82:	5937c783          	lbu	a5,1427(a5) # 80054011 <excpt+0x1>
    80029a86:	0002a497          	auipc	s1,0x2a
    80029a8a:	58a48493          	addi	s1,s1,1418 # 80054010 <excpt>
    80029a8e:	00004597          	auipc	a1,0x4
    80029a92:	8fa58593          	addi	a1,a1,-1798 # 8002d388 <__func__.0+0x2d0>
    80029a96:	cf89                	beqz	a5,80029ab0 <vec_test_24+0x90>
    80029a98:	6498                	ld	a4,8(s1)
    80029a9a:	4789                	li	a5,2
    80029a9c:	00004597          	auipc	a1,0x4
    80029aa0:	8dc58593          	addi	a1,a1,-1828 # 8002d378 <__func__.0+0x2c0>
    80029aa4:	00f70663          	beq	a4,a5,80029ab0 <vec_test_24+0x90>
    80029aa8:	00004597          	auipc	a1,0x4
    80029aac:	8e058593          	addi	a1,a1,-1824 # 8002d388 <__func__.0+0x2d0>
    80029ab0:	00004517          	auipc	a0,0x4
    80029ab4:	91850513          	addi	a0,a0,-1768 # 8002d3c8 <__func__.0+0x310>
    80029ab8:	39e010ef          	jal	8002ae56 <printf>
    80029abc:	0002a797          	auipc	a5,0x2a
    80029ac0:	5557c783          	lbu	a5,1365(a5) # 80054011 <excpt+0x1>
    80029ac4:	c789                	beqz	a5,80029ace <vec_test_24+0xae>
    80029ac6:	6498                	ld	a4,8(s1)
    80029ac8:	4789                	li	a5,2
    80029aca:	00f70c63          	beq	a4,a5,80029ae2 <vec_test_24+0xc2>
    80029ace:	00004517          	auipc	a0,0x4
    80029ad2:	90250513          	addi	a0,a0,-1790 # 8002d3d0 <__func__.0+0x318>
    80029ad6:	380010ef          	jal	8002ae56 <printf>
    80029ada:	02900513          	li	a0,41
    80029ade:	066000ef          	jal	80029b44 <putchar>
    80029ae2:	4529                	li	a0,10
    80029ae4:	060000ef          	jal	80029b44 <putchar>
    80029ae8:	0002a417          	auipc	s0,0x2a
    80029aec:	52944403          	lbu	s0,1321(s0) # 80054011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029af0:	00004597          	auipc	a1,0x4
    80029af4:	89858593          	addi	a1,a1,-1896 # 8002d388 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029af8:	cc11                	beqz	s0,80029b14 <vec_test_24+0xf4>
    80029afa:	6498                	ld	a4,8(s1)
    80029afc:	4789                	li	a5,2
    TEST_END();
    80029afe:	00004597          	auipc	a1,0x4
    80029b02:	87a58593          	addi	a1,a1,-1926 # 8002d378 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b06:	00f70763          	beq	a4,a5,80029b14 <vec_test_24+0xf4>
    80029b0a:	4401                	li	s0,0
    TEST_END();
    80029b0c:	00004597          	auipc	a1,0x4
    80029b10:	87c58593          	addi	a1,a1,-1924 # 8002d388 <__func__.0+0x2d0>
    80029b14:	00004517          	auipc	a0,0x4
    80029b18:	91c50513          	addi	a0,a0,-1764 # 8002d430 <__func__.0+0x378>
    80029b1c:	33a010ef          	jal	8002ae56 <printf>
    80029b20:	4511                	li	a0,4
    80029b22:	be6d70ef          	jal	80000f08 <goto_priv>
    80029b26:	cffd70ef          	jal	80001824 <reset_state>

}
    80029b2a:	60e2                	ld	ra,24(sp)
    80029b2c:	8522                	mv	a0,s0
    80029b2e:	6442                	ld	s0,16(sp)
    80029b30:	64a2                	ld	s1,8(sp)
    80029b32:	6105                	addi	sp,sp,32
    80029b34:	8082                	ret

0000000080029b36 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    80029b36:	619c                	ld	a5,0(a1)
    80029b38:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    80029b3c:	619c                	ld	a5,0(a1)
    80029b3e:	0785                	addi	a5,a5,1
    80029b40:	e19c                	sd	a5,0(a1)
  }
    80029b42:	8082                	ret

0000000080029b44 <putchar>:
  buf[buflen++] = ch;
    80029b44:	0002a797          	auipc	a5,0x2a
    80029b48:	5907a783          	lw	a5,1424(a5) # 800540d4 <buflen.2>
    80029b4c:	0002a697          	auipc	a3,0x2a
    80029b50:	53468693          	addi	a3,a3,1332 # 80054080 <buf.1>
{
    80029b54:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    80029b56:	00f68733          	add	a4,a3,a5
    80029b5a:	2785                	addiw	a5,a5,1
    80029b5c:	00a70023          	sb	a0,0(a4) # 2000 <_test_table_size+0x1fff>
    80029b60:	0002a717          	auipc	a4,0x2a
    80029b64:	56f72a23          	sw	a5,1396(a4) # 800540d4 <buflen.2>
{
    80029b68:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    80029b6c:	4629                	li	a2,10
{
    80029b6e:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    80029b72:	00c50963          	beq	a0,a2,80029b84 <putchar+0x40>
    80029b76:	04000613          	li	a2,64
    80029b7a:	00c78563          	beq	a5,a2,80029b84 <putchar+0x40>
}
    80029b7e:	4501                	li	a0,0
    80029b80:	6165                	addi	sp,sp,112
    80029b82:	8082                	ret
  magic_mem[0] = which;
    80029b84:	04000613          	li	a2,64
    80029b88:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    80029b8a:	4605                	li	a2,1
    80029b8c:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    80029b8e:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    80029b90:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    80029b92:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80029b96:	00011697          	auipc	a3,0x11
    80029b9a:	4aa68693          	addi	a3,a3,1194 # 8003b040 <fromhost>
    80029b9e:	00011797          	auipc	a5,0x11
    80029ba2:	46e7b123          	sd	a4,1122(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    80029ba6:	629c                	ld	a5,0(a3)
    80029ba8:	dffd                	beqz	a5,80029ba6 <putchar+0x62>
  fromhost = 0;
    80029baa:	00011797          	auipc	a5,0x11
    80029bae:	4807bb23          	sd	zero,1174(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    80029bb2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80029bb6:	631c                	ld	a5,0(a4)
}
    80029bb8:	4501                	li	a0,0
    buflen = 0;
    80029bba:	0002a797          	auipc	a5,0x2a
    80029bbe:	5007ad23          	sw	zero,1306(a5) # 800540d4 <buflen.2>
}
    80029bc2:	6165                	addi	sp,sp,112
    80029bc4:	8082                	ret

0000000080029bc6 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80029bc6:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029bc8:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    80029bcc:	05500e93          	li	t4,85
    80029bd0:	00003e17          	auipc	t3,0x3
    80029bd4:	4f4e0e13          	addi	t3,t3,1268 # 8002d0c4 <__func__.0+0xc>
    80029bd8:	a809                	j	80029bea <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    80029bda:	c729                	beqz	a4,80029c24 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    80029bdc:	6118                	ld	a4,0(a0)
      fmt++;
    80029bde:	0585                	addi	a1,a1,1
    **pstr = ch;
    80029be0:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80029be4:	611c                	ld	a5,0(a0)
    80029be6:	0785                	addi	a5,a5,1
    80029be8:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029bea:	0005c783          	lbu	a5,0(a1)
    80029bee:	0007871b          	sext.w	a4,a5
    80029bf2:	fe6794e3          	bne	a5,t1,80029bda <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    80029bf6:	0015c803          	lbu	a6,1(a1)
    fmt++;
    80029bfa:	00158893          	addi	a7,a1,1
    precision = -1;
    80029bfe:	577d                	li	a4,-1
    fmt++;
    80029c00:	86c6                	mv	a3,a7
    width = -1;
    80029c02:	8fba                	mv	t6,a4
    padc = ' ';
    80029c04:	02000293          	li	t0,32
    lflag = 0;
    80029c08:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    80029c0a:	fdd8079b          	addiw	a5,a6,-35
    80029c0e:	0ff7f793          	zext.b	a5,a5
    80029c12:	00168593          	addi	a1,a3,1
    80029c16:	02fee563          	bltu	t4,a5,80029c40 <vprintfmt.constprop.0+0x7a>
    80029c1a:	078a                	slli	a5,a5,0x2
    80029c1c:	97f2                	add	a5,a5,t3
    80029c1e:	439c                	lw	a5,0(a5)
    80029c20:	97f2                	add	a5,a5,t3
    80029c22:	8782                	jr	a5
}
    80029c24:	6151                	addi	sp,sp,272
    80029c26:	8082                	ret
      padc = '0';
    80029c28:	82c2                	mv	t0,a6
      goto reswitch;
    80029c2a:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80029c2e:	86ae                	mv	a3,a1
    80029c30:	00168593          	addi	a1,a3,1
    80029c34:	fdd8079b          	addiw	a5,a6,-35
    80029c38:	0ff7f793          	zext.b	a5,a5
    80029c3c:	fcfeffe3          	bgeu	t4,a5,80029c1a <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    80029c40:	611c                	ld	a5,0(a0)
    80029c42:	02500713          	li	a4,37
      fmt = last_fmt;
    80029c46:	85c6                	mv	a1,a7
    **pstr = ch;
    80029c48:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029c4c:	611c                	ld	a5,0(a0)
    80029c4e:	0785                	addi	a5,a5,1
    80029c50:	e11c                	sd	a5,0(a0)
  }
    80029c52:	bf61                	j	80029bea <vprintfmt.constprop.0+0x24>
    80029c54:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    80029c56:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    80029c5a:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    80029c5e:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    80029c60:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    80029c62:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    80029c66:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80029c6a:	02f46463          	bltu	s0,a5,80029c92 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    80029c6e:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    80029c72:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    80029c76:	9fb9                	addw	a5,a5,a4
    80029c78:	0017979b          	slliw	a5,a5,0x1
    80029c7c:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    80029c80:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    80029c84:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80029c86:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    80029c8a:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80029c8e:	feb470e3          	bgeu	s0,a1,80029c6e <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    80029c92:	6432                	ld	s0,264(sp)
      if (width < 0)
    80029c94:	f60fdbe3          	bgez	t6,80029c0a <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    80029c98:	8fba                	mv	t6,a4
    80029c9a:	577d                	li	a4,-1
    80029c9c:	b7bd                	j	80029c0a <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    80029c9e:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80029ca2:	86ae                	mv	a3,a1
      goto reswitch;
    80029ca4:	b79d                	j	80029c0a <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80029ca6:	611c                	ld	a5,0(a0)
    80029ca8:	02500713          	li	a4,37
    80029cac:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029cb0:	611c                	ld	a5,0(a0)
    80029cb2:	0785                	addi	a5,a5,1
    80029cb4:	e11c                	sd	a5,0(a0)
  }
    80029cb6:	bf15                	j	80029bea <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    80029cb8:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    80029cbc:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    80029cbe:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    80029cc0:	0621                	addi	a2,a2,8
      goto process_precision;
    80029cc2:	bfc9                	j	80029c94 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    80029cc4:	611c                	ld	a5,0(a0)
    80029cc6:	03000693          	li	a3,48
    80029cca:	07800713          	li	a4,120
    80029cce:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80029cd2:	611c                	ld	a5,0(a0)
    80029cd4:	4841                	li	a6,16
    80029cd6:	00860693          	addi	a3,a2,8
    80029cda:	00178893          	addi	a7,a5,1
    80029cde:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    80029ce2:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80029ce6:	611c                	ld	a5,0(a0)
    80029ce8:	0785                	addi	a5,a5,1
    80029cea:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    80029cec:	6218                	ld	a4,0(a2)
    80029cee:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    80029cf0:	03077f33          	remu	t5,a4,a6
    80029cf4:	00410893          	addi	a7,sp,4
    80029cf8:	4685                	li	a3,1
    80029cfa:	c07a                	sw	t5,0(sp)
    if (num < base)
    80029cfc:	1b076c63          	bltu	a4,a6,80029eb4 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    80029d00:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    80029d04:	83b6                	mv	t2,a3
    if (num < base)
    80029d06:	0891                	addi	a7,a7,4
    digs[pos++] = num % base;
    80029d08:	2685                	addiw	a3,a3,1
    80029d0a:	03077f33          	remu	t5,a4,a6
    80029d0e:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    80029d12:	ff0777e3          	bgeu	a4,a6,80029d00 <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    80029d16:	ffff871b          	addiw	a4,t6,-1
    80029d1a:	fff6881b          	addiw	a6,a3,-1
    80029d1e:	01f6da63          	bge	a3,t6,80029d32 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    80029d22:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80029d26:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    80029d28:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    80029d2a:	0785                	addi	a5,a5,1
    80029d2c:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    80029d2e:	ff071ae3          	bne	a4,a6,80029d22 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    80029d32:	038a                	slli	t2,t2,0x2
    80029d34:	007106b3          	add	a3,sp,t2
    80029d38:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80029d3c:	4825                	li	a6,9
    80029d3e:	a819                	j	80029d54 <vprintfmt.constprop.0+0x18e>
    80029d40:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    80029d44:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029d48:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    80029d4a:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    80029d4c:	0785                	addi	a5,a5,1
    80029d4e:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    80029d50:	e8d88de3          	beq	a7,a3,80029bea <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80029d54:	4298                	lw	a4,0(a3)
    80029d56:	fee865e3          	bltu	a6,a4,80029d40 <vprintfmt.constprop.0+0x17a>
    80029d5a:	0307071b          	addiw	a4,a4,48
    80029d5e:	b7dd                	j	80029d44 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    80029d60:	4785                	li	a5,1
      precision = va_arg(ap, int);
    80029d62:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80029d66:	01e7c463          	blt	a5,t5,80029d6e <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    80029d6a:	140f0763          	beqz	t5,80029eb8 <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    80029d6e:	6218                	ld	a4,0(a2)
    **pstr = ch;
    80029d70:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    80029d72:	14074963          	bltz	a4,80029ec4 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    80029d76:	8636                	mv	a2,a3
    80029d78:	4829                	li	a6,10
    80029d7a:	bf9d                	j	80029cf0 <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    80029d7c:	0016c803          	lbu	a6,1(a3)
      lflag++;
    80029d80:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    80029d82:	86ae                	mv	a3,a1
      goto reswitch;
    80029d84:	b559                	j	80029c0a <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    80029d86:	4841                	li	a6,16
  if (lflag >= 2)
    80029d88:	4705                	li	a4,1
    **pstr = ch;
    80029d8a:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    80029d8c:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80029d90:	f5e74ee3          	blt	a4,t5,80029cec <vprintfmt.constprop.0+0x126>
  else if (lflag)
    80029d94:	f40f1ce3          	bnez	t5,80029cec <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    80029d98:	00066703          	lwu	a4,0(a2)
    80029d9c:	8636                	mv	a2,a3
    80029d9e:	bf89                	j	80029cf0 <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    80029da0:	6214                	ld	a3,0(a2)
    80029da2:	ca99                	beqz	a3,80029db8 <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    80029da4:	07f05663          	blez	t6,80029e10 <vprintfmt.constprop.0+0x24a>
    80029da8:	02d00793          	li	a5,45
    80029dac:	02f29863          	bne	t0,a5,80029ddc <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029db0:	0006c783          	lbu	a5,0(a3)
    80029db4:	e3ad                	bnez	a5,80029e16 <vprintfmt.constprop.0+0x250>
    80029db6:	a879                	j	80029e54 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    80029db8:	0000f697          	auipc	a3,0xf
    80029dbc:	b4868693          	addi	a3,a3,-1208 # 80038900 <__func__.0+0xb848>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029dc0:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80029dc4:	05f05963          	blez	t6,80029e16 <vprintfmt.constprop.0+0x250>
    80029dc8:	02d00813          	li	a6,45
        p = "(null)";
    80029dcc:	0000f697          	auipc	a3,0xf
    80029dd0:	b3468693          	addi	a3,a3,-1228 # 80038900 <__func__.0+0xb848>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029dd4:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80029dd8:	03028f63          	beq	t0,a6,80029e16 <vprintfmt.constprop.0+0x250>
  const char *p = s;
    80029ddc:	87b6                	mv	a5,a3
  while (n-- && *p)
    80029dde:	00e688b3          	add	a7,a3,a4
    80029de2:	e709                	bnez	a4,80029dec <vprintfmt.constprop.0+0x226>
    80029de4:	a829                	j	80029dfe <vprintfmt.constprop.0+0x238>
    p++;
    80029de6:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80029de8:	01178663          	beq	a5,a7,80029df4 <vprintfmt.constprop.0+0x22e>
    80029dec:	0007c803          	lbu	a6,0(a5)
    80029df0:	fe081be3          	bnez	a6,80029de6 <vprintfmt.constprop.0+0x220>
  return p - s;
    80029df4:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80029df6:	40ff8fbb          	subw	t6,t6,a5
    80029dfa:	01f05b63          	blez	t6,80029e10 <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    80029dfe:	611c                	ld	a5,0(a0)
    80029e00:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80029e04:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80029e06:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80029e08:	0785                	addi	a5,a5,1
    80029e0a:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80029e0c:	fe0f9ae3          	bnez	t6,80029e00 <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e10:	0006c783          	lbu	a5,0(a3)
    80029e14:	cbb9                	beqz	a5,80029e6a <vprintfmt.constprop.0+0x2a4>
    80029e16:	58fd                	li	a7,-1
    80029e18:	04075b63          	bgez	a4,80029e6e <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    80029e1c:	6118                	ld	a4,0(a0)
        p++;
    80029e1e:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e22:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80029e24:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80029e28:	611c                	ld	a5,0(a0)
    80029e2a:	8742                	mv	a4,a6
    80029e2c:	0785                	addi	a5,a5,1
    80029e2e:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e30:	0016c683          	lbu	a3,1(a3)
    80029e34:	ce91                	beqz	a3,80029e50 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80029e36:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80029e3a:	611c                	ld	a5,0(a0)
        p++;
    80029e3c:	0705                	addi	a4,a4,1
    (*pstr)++;
    80029e3e:	0785                	addi	a5,a5,1
    80029e40:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e42:	00074683          	lbu	a3,0(a4)
    80029e46:	fae5                	bnez	a3,80029e36 <vprintfmt.constprop.0+0x270>
    80029e48:	40e8083b          	subw	a6,a6,a4
    80029e4c:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    80029e50:	01f05d63          	blez	t6,80029e6a <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    80029e54:	611c                	ld	a5,0(a0)
    80029e56:	02000713          	li	a4,32
    80029e5a:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029e5e:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    80029e60:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80029e62:	0785                	addi	a5,a5,1
    80029e64:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    80029e66:	fe0f9ae3          	bnez	t6,80029e5a <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    80029e6a:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029e6c:	bbbd                	j	80029bea <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e6e:	377d                	addiw	a4,a4,-1
    80029e70:	ff1700e3          	beq	a4,a7,80029e50 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80029e74:	00053803          	ld	a6,0(a0)
        p++;
    80029e78:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e7a:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80029e7c:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    80029e80:	611c                	ld	a5,0(a0)
    80029e82:	0785                	addi	a5,a5,1
    80029e84:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029e86:	0006c783          	lbu	a5,0(a3)
    80029e8a:	f3f5                	bnez	a5,80029e6e <vprintfmt.constprop.0+0x2a8>
    80029e8c:	b7d1                	j	80029e50 <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    80029e8e:	87fe                	mv	a5,t6
    80029e90:	000fd363          	bgez	t6,80029e96 <vprintfmt.constprop.0+0x2d0>
    80029e94:	4781                	li	a5,0
        ch = *fmt;
    80029e96:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    80029e9a:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    80029e9e:	86ae                	mv	a3,a1
      goto reswitch;
    80029ea0:	b3ad                	j	80029c0a <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80029ea2:	611c                	ld	a5,0(a0)
    80029ea4:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    80029ea6:	0621                	addi	a2,a2,8
    **pstr = ch;
    80029ea8:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029eac:	611c                	ld	a5,0(a0)
    80029eae:	0785                	addi	a5,a5,1
    80029eb0:	e11c                	sd	a5,0(a0)
  }
    80029eb2:	bb25                	j	80029bea <vprintfmt.constprop.0+0x24>
    if (num < base)
    80029eb4:	4381                	li	t2,0
    80029eb6:	b585                	j	80029d16 <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    80029eb8:	4218                	lw	a4,0(a2)
    80029eba:	bd5d                	j	80029d70 <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    80029ebc:	4829                	li	a6,10
    80029ebe:	b5e9                	j	80029d88 <vprintfmt.constprop.0+0x1c2>
    80029ec0:	4821                	li	a6,8
    80029ec2:	b5d9                	j	80029d88 <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    80029ec4:	02d00613          	li	a2,45
    80029ec8:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    80029ecc:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    80029ece:	40e00733          	neg	a4,a4
    80029ed2:	8636                	mv	a2,a3
    (*pstr)++;
    80029ed4:	0785                	addi	a5,a5,1
    80029ed6:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    80029ed8:	4829                	li	a6,10
    80029eda:	bd19                	j	80029cf0 <vprintfmt.constprop.0+0x12a>

0000000080029edc <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80029edc:	b6010113          	addi	sp,sp,-1184
    80029ee0:	14f10713          	addi	a4,sp,335
    80029ee4:	fc077713          	andi	a4,a4,-64
    80029ee8:	45b13023          	sd	s11,1088(sp)
    80029eec:	83ae                	mv	t2,a1
    80029eee:	48813c23          	sd	s0,1176(sp)
    80029ef2:	48913823          	sd	s1,1168(sp)
    80029ef6:	49213423          	sd	s2,1160(sp)
    80029efa:	49313023          	sd	s3,1152(sp)
    80029efe:	47413c23          	sd	s4,1144(sp)
    80029f02:	47513823          	sd	s5,1136(sp)
    80029f06:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    80029f0a:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029f0e:	02500593          	li	a1,37
  buf[buflen++] = ch;
    80029f12:	0002a897          	auipc	a7,0x2a
    80029f16:	1c288893          	addi	a7,a7,450 # 800540d4 <buflen.2>
    80029f1a:	0002a697          	auipc	a3,0x2a
    80029f1e:	16668693          	addi	a3,a3,358 # 80054080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    80029f22:	4829                	li	a6,10
  magic_mem[0] = which;
    80029f24:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    80029f28:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    80029f2a:	00011e17          	auipc	t3,0x11
    80029f2e:	0d6e0e13          	addi	t3,t3,214 # 8003b000 <tohost>
    80029f32:	00011797          	auipc	a5,0x11
    80029f36:	10e78793          	addi	a5,a5,270 # 8003b040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    80029f3a:	00003d97          	auipc	s11,0x3
    80029f3e:	2e2d8d93          	addi	s11,s11,738 # 8002d21c <__func__.0+0x164>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029f42:	00054f83          	lbu	t6,0(a0)
    80029f46:	000f841b          	sext.w	s0,t6
    80029f4a:	06bf8563          	beq	t6,a1,80029fb4 <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    80029f4e:	cc49                	beqz	s0,80029fe8 <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    80029f50:	0002a317          	auipc	t1,0x2a
    80029f54:	18432303          	lw	t1,388(t1) # 800540d4 <buflen.2>
      fmt++;
    80029f58:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    80029f5a:	0013029b          	addiw	t0,t1,1
    80029f5e:	9336                	add	t1,t1,a3
    80029f60:	0058a023          	sw	t0,0(a7)
    80029f64:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80029f68:	01040463          	beq	s0,a6,80029f70 <vprintfmt.constprop.1+0x94>
    80029f6c:	fcc29be3          	bne	t0,a2,80029f42 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    80029f70:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    80029f74:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    80029f78:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    80029f7c:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    80029f80:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80029f84:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    80029f88:	0007b303          	ld	t1,0(a5)
    80029f8c:	fe030ee3          	beqz	t1,80029f88 <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    80029f90:	00011317          	auipc	t1,0x11
    80029f94:	0a033823          	sd	zero,176(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    80029f98:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80029f9c:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    80029fa0:	0002a317          	auipc	t1,0x2a
    80029fa4:	12032a23          	sw	zero,308(t1) # 800540d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029fa8:	00054f83          	lbu	t6,0(a0)
    80029fac:	000f841b          	sext.w	s0,t6
    80029fb0:	f8bf9fe3          	bne	t6,a1,80029f4e <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    80029fb4:	00154483          	lbu	s1,1(a0)
    fmt++;
    80029fb8:	00150a13          	addi	s4,a0,1
    precision = -1;
    80029fbc:	537d                	li	t1,-1
    fmt++;
    80029fbe:	8452                	mv	s0,s4
    width = -1;
    80029fc0:	8f9a                	mv	t6,t1
    padc = ' ';
    80029fc2:	02000a93          	li	s5,32
    lflag = 0;
    80029fc6:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    80029fc8:	05500993          	li	s3,85
    80029fcc:	fdd4829b          	addiw	t0,s1,-35
    80029fd0:	0ff2f293          	zext.b	t0,t0
    80029fd4:	00140513          	addi	a0,s0,1
    80029fd8:	0459e763          	bltu	s3,t0,8002a026 <vprintfmt.constprop.1+0x14a>
    80029fdc:	028a                	slli	t0,t0,0x2
    80029fde:	92ee                	add	t0,t0,s11
    80029fe0:	0002ab03          	lw	s6,0(t0)
    80029fe4:	9b6e                	add	s6,s6,s11
    80029fe6:	8b02                	jr	s6
}
    80029fe8:	49813403          	ld	s0,1176(sp)
    80029fec:	49013483          	ld	s1,1168(sp)
    80029ff0:	48813903          	ld	s2,1160(sp)
    80029ff4:	48013983          	ld	s3,1152(sp)
    80029ff8:	47813a03          	ld	s4,1144(sp)
    80029ffc:	47013a83          	ld	s5,1136(sp)
    8002a000:	46813b03          	ld	s6,1128(sp)
    8002a004:	44013d83          	ld	s11,1088(sp)
    8002a008:	4a010113          	addi	sp,sp,1184
    8002a00c:	8082                	ret
      padc = '0';
    8002a00e:	8aa6                	mv	s5,s1
      goto reswitch;
    8002a010:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002a014:	842a                	mv	s0,a0
    8002a016:	00140513          	addi	a0,s0,1
    8002a01a:	fdd4829b          	addiw	t0,s1,-35
    8002a01e:	0ff2f293          	zext.b	t0,t0
    8002a022:	fa59fde3          	bgeu	s3,t0,80029fdc <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    8002a026:	0002a317          	auipc	t1,0x2a
    8002a02a:	0ae32303          	lw	t1,174(t1) # 800540d4 <buflen.2>
    8002a02e:	0002af97          	auipc	t6,0x2a
    8002a032:	052f8f93          	addi	t6,t6,82 # 80054080 <buf.1>
    8002a036:	02500293          	li	t0,37
    8002a03a:	0013051b          	addiw	a0,t1,1
    8002a03e:	937e                	add	t1,t1,t6
    8002a040:	00530023          	sb	t0,0(t1)
    8002a044:	0002a417          	auipc	s0,0x2a
    8002a048:	08a42823          	sw	a0,144(s0) # 800540d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a04c:	04000313          	li	t1,64
    8002a050:	56650f63          	beq	a0,t1,8002a5ce <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    8002a054:	8552                	mv	a0,s4
    8002a056:	b5f5                	j	80029f42 <vprintfmt.constprop.1+0x66>
    8002a058:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    8002a05c:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002a060:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    8002a064:	4ba5                	li	s7,9
    8002a066:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    8002a06a:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002a06e:	088befe3          	bltu	s7,s0,8002a90c <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002a072:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    8002a074:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    8002a078:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    8002a07c:	0065053b          	addw	a0,a0,t1
    8002a080:	0015151b          	slliw	a0,a0,0x1
    8002a084:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    8002a088:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    8002a08c:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    8002a08e:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002a092:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002a096:	fd6bffe3          	bgeu	s7,s6,8002a074 <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    8002a09a:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002a09e:	f20fd7e3          	bgez	t6,80029fcc <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002a0a2:	8f9a                	mv	t6,t1
    8002a0a4:	537d                	li	t1,-1
    8002a0a6:	b71d                	j	80029fcc <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8002a0a8:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002a0ac:	842a                	mv	s0,a0
      goto reswitch;
    8002a0ae:	bf39                	j	80029fcc <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002a0b0:	0002af97          	auipc	t6,0x2a
    8002a0b4:	024faf83          	lw	t6,36(t6) # 800540d4 <buflen.2>
    8002a0b8:	0002a297          	auipc	t0,0x2a
    8002a0bc:	fc828293          	addi	t0,t0,-56 # 80054080 <buf.1>
    8002a0c0:	02500413          	li	s0,37
    8002a0c4:	001f831b          	addiw	t1,t6,1
    8002a0c8:	9f96                	add	t6,t6,t0
    8002a0ca:	008f8023          	sb	s0,0(t6)
    8002a0ce:	0002a497          	auipc	s1,0x2a
    8002a0d2:	0064a323          	sw	t1,6(s1) # 800540d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a0d6:	04000f93          	li	t6,64
    8002a0da:	e7f314e3          	bne	t1,t6,80029f42 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a0de:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002a0e2:	4f85                	li	t6,1
    8002a0e4:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    8002a0e8:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    8002a0ec:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    8002a0f0:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a0f4:	04070313          	addi	t1,a4,64
    8002a0f8:	00011f97          	auipc	t6,0x11
    8002a0fc:	f06fb423          	sd	t1,-248(t6) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a100:	00011317          	auipc	t1,0x11
    8002a104:	f4030313          	addi	t1,t1,-192 # 8003b040 <fromhost>
    8002a108:	00033f83          	ld	t6,0(t1)
    8002a10c:	fe0f8ee3          	beqz	t6,8002a108 <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    8002a110:	00011317          	auipc	t1,0x11
    8002a114:	f2033823          	sd	zero,-208(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a118:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a11c:	0002a317          	auipc	t1,0x2a
    8002a120:	fa032c23          	sw	zero,-72(t1) # 800540d4 <buflen.2>
  return magic_mem[0];
    8002a124:	04073303          	ld	t1,64(a4)
    buflen = 0;
    8002a128:	bd29                	j	80029f42 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a12a:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    8002a12e:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    8002a132:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    8002a134:	03a1                	addi	t2,t2,8
      goto process_precision;
    8002a136:	b7a5                	j	8002a09e <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    8002a138:	0002a317          	auipc	t1,0x2a
    8002a13c:	f9c32303          	lw	t1,-100(t1) # 800540d4 <buflen.2>
    8002a140:	0002a917          	auipc	s2,0x2a
    8002a144:	f4090913          	addi	s2,s2,-192 # 80054080 <buf.1>
    8002a148:	47713023          	sd	s7,1120(sp)
    8002a14c:	45813c23          	sd	s8,1112(sp)
    8002a150:	45913823          	sd	s9,1104(sp)
    8002a154:	45a13423          	sd	s10,1096(sp)
    8002a158:	00690433          	add	s0,s2,t1
    8002a15c:	0002a997          	auipc	s3,0x2a
    8002a160:	f7898993          	addi	s3,s3,-136 # 800540d4 <buflen.2>
    8002a164:	0013029b          	addiw	t0,t1,1
    8002a168:	03000493          	li	s1,48
    8002a16c:	00940023          	sb	s1,0(s0)
    8002a170:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a174:	04000413          	li	s0,64
    8002a178:	62828d63          	beq	t0,s0,8002a7b2 <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    8002a17c:	2309                	addiw	t1,t1,2
    8002a17e:	92ca                	add	t0,t0,s2
    8002a180:	07800493          	li	s1,120
    8002a184:	0069a023          	sw	t1,0(s3)
    8002a188:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a18c:	42831a63          	bne	t1,s0,8002a5c0 <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002a190:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002a194:	4285                	li	t0,1
    8002a196:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    8002a19a:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002a19e:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002a1a2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a1a6:	10070313          	addi	t1,a4,256
    8002a1aa:	00011297          	auipc	t0,0x11
    8002a1ae:	e462bb23          	sd	t1,-426(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a1b2:	00011317          	auipc	t1,0x11
    8002a1b6:	e8e30313          	addi	t1,t1,-370 # 8003b040 <fromhost>
    8002a1ba:	00033283          	ld	t0,0(t1)
    8002a1be:	fe028ee3          	beqz	t0,8002a1ba <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002a1c2:	00011317          	auipc	t1,0x11
    8002a1c6:	e6033f23          	sd	zero,-386(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a1ca:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a1ce:	0002a317          	auipc	t1,0x2a
    8002a1d2:	f0032323          	sw	zero,-250(t1) # 800540d4 <buflen.2>
  return magic_mem[0];
    8002a1d6:	10073303          	ld	t1,256(a4)
  else if (lflag)
    8002a1da:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002a1de:	4301                	li	t1,0
    8002a1e0:	4441                	li	s0,16
    8002a1e2:	a6d5                	j	8002a5c6 <vprintfmt.constprop.1+0x6ea>
    8002a1e4:	47713023          	sd	s7,1120(sp)
    8002a1e8:	45813c23          	sd	s8,1112(sp)
    8002a1ec:	45913823          	sd	s9,1104(sp)
    8002a1f0:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    8002a1f4:	4305                	li	t1,1
      precision = va_arg(ap, int);
    8002a1f6:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    8002a1fa:	01234463          	blt	t1,s2,8002a202 <vprintfmt.constprop.1+0x326>
  else if (lflag)
    8002a1fe:	3a090e63          	beqz	s2,8002a5ba <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    8002a202:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    8002a206:	0002a317          	auipc	t1,0x2a
    8002a20a:	ece32303          	lw	t1,-306(t1) # 800540d4 <buflen.2>
    8002a20e:	0002a997          	auipc	s3,0x2a
    8002a212:	ec698993          	addi	s3,s3,-314 # 800540d4 <buflen.2>
      if ((long long) num < 0) {
    8002a216:	5402cd63          	bltz	t0,8002a770 <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    8002a21a:	83a2                	mv	t2,s0
    8002a21c:	0002a917          	auipc	s2,0x2a
    8002a220:	e6490913          	addi	s2,s2,-412 # 80054080 <buf.1>
    8002a224:	4429                	li	s0,10
    digs[pos++] = num % base;
    8002a226:	0282fb33          	remu	s6,t0,s0
    8002a22a:	01410a13          	addi	s4,sp,20
    8002a22e:	4485                	li	s1,1
    8002a230:	c85a                	sw	s6,16(sp)
    if (num < base)
    8002a232:	3682e263          	bltu	t0,s0,8002a596 <vprintfmt.constprop.1+0x6ba>
    num /= base;
    8002a236:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    8002a23a:	8ba6                	mv	s7,s1
    if (num < base)
    8002a23c:	0a11                	addi	s4,s4,4
    digs[pos++] = num % base;
    8002a23e:	2485                	addiw	s1,s1,1
    8002a240:	0282fb33          	remu	s6,t0,s0
    8002a244:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    8002a248:	fe82f7e3          	bgeu	t0,s0,8002a236 <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    8002a24c:	ffff829b          	addiw	t0,t6,-1
    8002a250:	fff48a1b          	addiw	s4,s1,-1
    8002a254:	09f4d463          	bge	s1,t6,8002a2dc <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a258:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8002a25c:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002a25e:	0c070b13          	addi	s6,a4,192
    8002a262:	00011497          	auipc	s1,0x11
    8002a266:	d9e48493          	addi	s1,s1,-610 # 8003b000 <tohost>
    8002a26a:	00011f97          	auipc	t6,0x11
    8002a26e:	dd6f8f93          	addi	t6,t6,-554 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a272:	4c89                	li	s9,2
    8002a274:	00130d1b          	addiw	s10,t1,1
    8002a278:	934a                	add	t1,t1,s2
    8002a27a:	01a9a023          	sw	s10,0(s3)
    8002a27e:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a282:	2e8d1863          	bne	s10,s0,8002a572 <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    8002a286:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8002a288:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8002a28c:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002a290:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002a292:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a296:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    8002a29a:	000fb303          	ld	t1,0(t6)
    8002a29e:	fe030ee3          	beqz	t1,8002a29a <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002a2a2:	00011317          	auipc	t1,0x11
    8002a2a6:	d8033f23          	sd	zero,-610(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a2aa:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a2ae:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002a2b2:	0002a317          	auipc	t1,0x2a
    8002a2b6:	e2032123          	sw	zero,-478(t1) # 800540d4 <buflen.2>
  while (width-- > pos)
    8002a2ba:	fff2831b          	addiw	t1,t0,-1
    8002a2be:	2b430c63          	beq	t1,s4,8002a576 <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002a2c2:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    8002a2c6:	32f9                	addiw	t0,t0,-2
    8002a2c8:	2a5a0963          	beq	s4,t0,8002a57a <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    8002a2cc:	0199a023          	sw	s9,0(s3)
    8002a2d0:	015900a3          	sb	s5,1(s2)
    8002a2d4:	4309                	li	t1,2
  while (width-- > pos)
    8002a2d6:	32fd                	addiw	t0,t0,-1
    8002a2d8:	f85a1ee3          	bne	s4,t0,8002a274 <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    8002a2dc:	0b8a                	slli	s7,s7,0x2
    8002a2de:	0800                	addi	s0,sp,16
    8002a2e0:	945e                	add	s0,s0,s7
    8002a2e2:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a2e6:	4a25                	li	s4,9
  magic_mem[0] = which;
    8002a2e8:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002a2ec:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8002a2ee:	08070c13          	addi	s8,a4,128
    8002a2f2:	00011b97          	auipc	s7,0x11
    8002a2f6:	d0eb8b93          	addi	s7,s7,-754 # 8003b000 <tohost>
    8002a2fa:	00011297          	auipc	t0,0x11
    8002a2fe:	d4628293          	addi	t0,t0,-698 # 8003b040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a302:	4b29                	li	s6,10
    8002a304:	a831                	j	8002a320 <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    8002a306:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a308:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    8002a30c:	01f30023          	sb	t6,0(t1)
    8002a310:	01a9a023          	sw	s10,0(s3)
    8002a314:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    8002a316:	029d0463          	beq	s10,s1,8002a33e <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    8002a31a:	1471                	addi	s0,s0,-4
    8002a31c:	068a8063          	beq	s5,s0,8002a37c <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a320:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    8002a324:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a328:	fdfa7fe3          	bgeu	s4,t6,8002a306 <vprintfmt.constprop.1+0x42a>
    8002a32c:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    8002a330:	934a                	add	t1,t1,s2
    8002a332:	01f30023          	sb	t6,0(t1)
    8002a336:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a33a:	fd6f9de3          	bne	t6,s6,8002a314 <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    8002a33e:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002a340:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002a344:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    8002a348:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    8002a34c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a350:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002a354:	0002b303          	ld	t1,0(t0)
    8002a358:	fe030ee3          	beqz	t1,8002a354 <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    8002a35c:	00011317          	auipc	t1,0x11
    8002a360:	ce033223          	sd	zero,-796(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a364:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a368:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    8002a36c:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002a36e:	0002a317          	auipc	t1,0x2a
    8002a372:	d6032323          	sw	zero,-666(t1) # 800540d4 <buflen.2>
    8002a376:	4301                	li	t1,0
  while (pos-- > 0)
    8002a378:	fa8a94e3          	bne	s5,s0,8002a320 <vprintfmt.constprop.1+0x444>
    8002a37c:	46013b83          	ld	s7,1120(sp)
    8002a380:	45813c03          	ld	s8,1112(sp)
    8002a384:	45013c83          	ld	s9,1104(sp)
    8002a388:	44813d03          	ld	s10,1096(sp)
    8002a38c:	be5d                	j	80029f42 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a38e:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002a392:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002a394:	842a                	mv	s0,a0
      goto reswitch;
    8002a396:	b91d                	j	80029fcc <vprintfmt.constprop.1+0xf0>
    8002a398:	47713023          	sd	s7,1120(sp)
    8002a39c:	45813c23          	sd	s8,1112(sp)
    8002a3a0:	45913823          	sd	s9,1104(sp)
    8002a3a4:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002a3a8:	4441                	li	s0,16
  if (lflag >= 2)
    8002a3aa:	4285                	li	t0,1
  buf[buflen++] = ch;
    8002a3ac:	0002a317          	auipc	t1,0x2a
    8002a3b0:	d2832303          	lw	t1,-728(t1) # 800540d4 <buflen.2>
      precision = va_arg(ap, int);
    8002a3b4:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    8002a3b8:	1d22c363          	blt	t0,s2,8002a57e <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    8002a3bc:	3e091263          	bnez	s2,8002a7a0 <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002a3c0:	0003e283          	lwu	t0,0(t2)
    8002a3c4:	0002a997          	auipc	s3,0x2a
    8002a3c8:	d1098993          	addi	s3,s3,-752 # 800540d4 <buflen.2>
    8002a3cc:	83a6                	mv	t2,s1
    8002a3ce:	0002a917          	auipc	s2,0x2a
    8002a3d2:	cb290913          	addi	s2,s2,-846 # 80054080 <buf.1>
    8002a3d6:	bd81                	j	8002a226 <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002a3d8:	0003b483          	ld	s1,0(t2)
    8002a3dc:	47713023          	sd	s7,1120(sp)
    8002a3e0:	45813c23          	sd	s8,1112(sp)
    8002a3e4:	45913823          	sd	s9,1104(sp)
    8002a3e8:	45a13423          	sd	s10,1096(sp)
    8002a3ec:	42048463          	beqz	s1,8002a814 <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    8002a3f0:	1bf05563          	blez	t6,8002a59a <vprintfmt.constprop.1+0x6be>
    8002a3f4:	02d00293          	li	t0,45
    8002a3f8:	445a9063          	bne	s5,t0,8002a838 <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3fc:	0004c283          	lbu	t0,0(s1)
    8002a400:	0002899b          	sext.w	s3,t0
    8002a404:	2c028363          	beqz	t0,8002a6ca <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    8002a408:	20070413          	addi	s0,a4,512
    8002a40c:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a40e:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    8002a410:	0002ab97          	auipc	s7,0x2a
    8002a414:	cc4b8b93          	addi	s7,s7,-828 # 800540d4 <buflen.2>
    8002a418:	0002ab17          	auipc	s6,0x2a
    8002a41c:	c68b0b13          	addi	s6,s6,-920 # 80054080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a420:	4ca9                	li	s9,10
  magic_mem[0] = which;
    8002a422:	04000c13          	li	s8,64
    8002a426:	00011917          	auipc	s2,0x11
    8002a42a:	c1a90913          	addi	s2,s2,-998 # 8003b040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a42e:	04034263          	bltz	t1,8002a472 <vprintfmt.constprop.1+0x596>
    8002a432:	fff30a9b          	addiw	s5,t1,-1
    8002a436:	29aa8863          	beq	s5,s10,8002a6c6 <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    8002a43a:	0002a417          	auipc	s0,0x2a
    8002a43e:	c9a42403          	lw	s0,-870(s0) # 800540d4 <buflen.2>
    8002a442:	00140a1b          	addiw	s4,s0,1
    8002a446:	945a                	add	s0,s0,s6
    8002a448:	014ba023          	sw	s4,0(s7)
    8002a44c:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a450:	03998f63          	beq	s3,s9,8002a48e <vprintfmt.constprop.1+0x5b2>
    8002a454:	038a0d63          	beq	s4,s8,8002a48e <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a458:	0014c283          	lbu	t0,1(s1)
        p++;
    8002a45c:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a45e:	3ffd                	addiw	t6,t6,-1
    8002a460:	0002899b          	sext.w	s3,t0
    8002a464:	26028163          	beqz	t0,8002a6c6 <vprintfmt.constprop.1+0x7ea>
    8002a468:	1c034863          	bltz	t1,8002a638 <vprintfmt.constprop.1+0x75c>
    8002a46c:	8356                	mv	t1,s5
    8002a46e:	fc0352e3          	bgez	t1,8002a432 <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002a472:	0002a417          	auipc	s0,0x2a
    8002a476:	c6242403          	lw	s0,-926(s0) # 800540d4 <buflen.2>
    8002a47a:	8a9a                	mv	s5,t1
    8002a47c:	00140a1b          	addiw	s4,s0,1
    8002a480:	945a                	add	s0,s0,s6
    8002a482:	014ba023          	sw	s4,0(s7)
    8002a486:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a48a:	fd9995e3          	bne	s3,s9,8002a454 <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002a48e:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002a492:	4405                	li	s0,1
    8002a494:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    8002a498:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002a49c:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002a4a0:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a4a4:	62a2                	ld	t0,8(sp)
    8002a4a6:	00011417          	auipc	s0,0x11
    8002a4aa:	b5a40413          	addi	s0,s0,-1190 # 8003b000 <tohost>
    8002a4ae:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002a4b2:	00093283          	ld	t0,0(s2)
    8002a4b6:	fe028ee3          	beqz	t0,8002a4b2 <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    8002a4ba:	00011297          	auipc	t0,0x11
    8002a4be:	b802b323          	sd	zero,-1146(t0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a4c2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a4c6:	20073283          	ld	t0,512(a4)
    buflen = 0;
    8002a4ca:	0002a297          	auipc	t0,0x2a
    8002a4ce:	c002a523          	sw	zero,-1014(t0) # 800540d4 <buflen.2>
    8002a4d2:	b759                	j	8002a458 <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002a4d4:	82fe                	mv	t0,t6
    8002a4d6:	000fd363          	bgez	t6,8002a4dc <vprintfmt.constprop.1+0x600>
    8002a4da:	4281                	li	t0,0
        ch = *fmt;
    8002a4dc:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002a4e0:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    8002a4e4:	842a                	mv	s0,a0
      goto reswitch;
    8002a4e6:	b4dd                	j	80029fcc <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002a4e8:	0002a317          	auipc	t1,0x2a
    8002a4ec:	bec32303          	lw	t1,-1044(t1) # 800540d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    8002a4f0:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    8002a4f4:	0002a917          	auipc	s2,0x2a
    8002a4f8:	b8c90913          	addi	s2,s2,-1140 # 80054080 <buf.1>
    8002a4fc:	00130f9b          	addiw	t6,t1,1
    8002a500:	934a                	add	t1,t1,s2
    8002a502:	00530023          	sb	t0,0(t1)
    8002a506:	0002a417          	auipc	s0,0x2a
    8002a50a:	bdf42723          	sw	t6,-1074(s0) # 800540d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a50e:	4329                	li	t1,10
    8002a510:	00628863          	beq	t0,t1,8002a520 <vprintfmt.constprop.1+0x644>
    8002a514:	04000313          	li	t1,64
    8002a518:	006f8463          	beq	t6,t1,8002a520 <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    8002a51c:	03a1                	addi	t2,t2,8
    8002a51e:	b415                	j	80029f42 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a520:	04000313          	li	t1,64
    8002a524:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    8002a528:	4305                	li	t1,1
    8002a52a:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    8002a52e:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    8002a532:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    8002a536:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a53a:	28070313          	addi	t1,a4,640
    8002a53e:	00011f97          	auipc	t6,0x11
    8002a542:	ac6fb123          	sd	t1,-1342(t6) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a546:	00011317          	auipc	t1,0x11
    8002a54a:	afa30313          	addi	t1,t1,-1286 # 8003b040 <fromhost>
    8002a54e:	00033f83          	ld	t6,0(t1)
    8002a552:	fe0f8ee3          	beqz	t6,8002a54e <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    8002a556:	00011317          	auipc	t1,0x11
    8002a55a:	ae033523          	sd	zero,-1302(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a55e:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a562:	0002a317          	auipc	t1,0x2a
    8002a566:	b6032923          	sw	zero,-1166(t1) # 800540d4 <buflen.2>
  return magic_mem[0];
    8002a56a:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002a56e:	03a1                	addi	t2,t2,8
    8002a570:	bac9                	j	80029f42 <vprintfmt.constprop.1+0x66>
    8002a572:	836a                	mv	t1,s10
    8002a574:	b38d                	j	8002a2d6 <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    8002a576:	4301                	li	t1,0
    8002a578:	b395                	j	8002a2dc <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    8002a57a:	4305                	li	t1,1
    8002a57c:	b385                	j	8002a2dc <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002a57e:	0003b283          	ld	t0,0(t2)
    8002a582:	0002a997          	auipc	s3,0x2a
    8002a586:	b5298993          	addi	s3,s3,-1198 # 800540d4 <buflen.2>
    8002a58a:	83a6                	mv	t2,s1
    8002a58c:	0002a917          	auipc	s2,0x2a
    8002a590:	af490913          	addi	s2,s2,-1292 # 80054080 <buf.1>
    8002a594:	b949                	j	8002a226 <vprintfmt.constprop.1+0x34a>
    if (num < base)
    8002a596:	4b81                	li	s7,0
    8002a598:	b955                	j	8002a24c <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a59a:	0004c283          	lbu	t0,0(s1)
    8002a59e:	0002899b          	sext.w	s3,t0
    8002a5a2:	e60293e3          	bnez	t0,8002a408 <vprintfmt.constprop.1+0x52c>
    8002a5a6:	46013b83          	ld	s7,1120(sp)
    8002a5aa:	45813c03          	ld	s8,1112(sp)
    8002a5ae:	45013c83          	ld	s9,1104(sp)
    8002a5b2:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    8002a5b6:	03a1                	addi	t2,t2,8
    8002a5b8:	b269                	j	80029f42 <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    8002a5ba:	0003a283          	lw	t0,0(t2)
    8002a5be:	b1a1                	j	8002a206 <vprintfmt.constprop.1+0x32a>
    8002a5c0:	4441                	li	s0,16
    8002a5c2:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    8002a5c6:	0003b283          	ld	t0,0(t2)
    8002a5ca:	83a6                	mv	t2,s1
    8002a5cc:	b9a9                	j	8002a226 <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002a5ce:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002a5d0:	4305                	li	t1,1
    8002a5d2:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    8002a5d6:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    8002a5da:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    8002a5dc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a5e0:	00011317          	auipc	t1,0x11
    8002a5e4:	a6030313          	addi	t1,t1,-1440 # 8003b040 <fromhost>
    8002a5e8:	00011517          	auipc	a0,0x11
    8002a5ec:	a0e53c23          	sd	a4,-1512(a0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a5f0:	00033503          	ld	a0,0(t1)
    8002a5f4:	dd75                	beqz	a0,8002a5f0 <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    8002a5f6:	00011517          	auipc	a0,0x11
    8002a5fa:	a4053523          	sd	zero,-1462(a0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a5fe:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a602:	6308                	ld	a0,0(a4)
    buflen = 0;
    8002a604:	0002a517          	auipc	a0,0x2a
    8002a608:	ac052823          	sw	zero,-1328(a0) # 800540d4 <buflen.2>
      fmt = last_fmt;
    8002a60c:	8552                	mv	a0,s4
    8002a60e:	ba15                	j	80029f42 <vprintfmt.constprop.1+0x66>
    8002a610:	47713023          	sd	s7,1120(sp)
    8002a614:	45813c23          	sd	s8,1112(sp)
    8002a618:	45913823          	sd	s9,1104(sp)
    8002a61c:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002a620:	4429                	li	s0,10
    8002a622:	b361                	j	8002a3aa <vprintfmt.constprop.1+0x4ce>
    8002a624:	47713023          	sd	s7,1120(sp)
    8002a628:	45813c23          	sd	s8,1112(sp)
    8002a62c:	45913823          	sd	s9,1104(sp)
    8002a630:	45a13423          	sd	s10,1096(sp)
    8002a634:	4421                	li	s0,8
    8002a636:	bb95                	j	8002a3aa <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a638:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    8002a63a:	4a29                	li	s4,10
    8002a63c:	04000a93          	li	s5,64
    8002a640:	a801                	j	8002a650 <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a642:	00194283          	lbu	t0,1(s2)
        p++;
    8002a646:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a648:	0002899b          	sext.w	s3,t0
    8002a64c:	06028963          	beqz	t0,8002a6be <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002a650:	0002a317          	auipc	t1,0x2a
    8002a654:	a8432303          	lw	t1,-1404(t1) # 800540d4 <buflen.2>
    8002a658:	0013041b          	addiw	s0,t1,1
    8002a65c:	935a                	add	t1,t1,s6
    8002a65e:	008ba023          	sw	s0,0(s7)
    8002a662:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a666:	01498463          	beq	s3,s4,8002a66e <vprintfmt.constprop.1+0x792>
    8002a66a:	fd541ce3          	bne	s0,s5,8002a642 <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002a66e:	04000313          	li	t1,64
    8002a672:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    8002a676:	4305                	li	t1,1
    8002a678:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    8002a67c:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002a680:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002a684:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a688:	20070313          	addi	t1,a4,512
    8002a68c:	00011297          	auipc	t0,0x11
    8002a690:	9662ba23          	sd	t1,-1676(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a694:	00011297          	auipc	t0,0x11
    8002a698:	9ac28293          	addi	t0,t0,-1620 # 8003b040 <fromhost>
    8002a69c:	0002b303          	ld	t1,0(t0)
    8002a6a0:	fe030ee3          	beqz	t1,8002a69c <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002a6a4:	00011317          	auipc	t1,0x11
    8002a6a8:	98033e23          	sd	zero,-1636(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a6ac:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a6b0:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002a6b4:	0002a317          	auipc	t1,0x2a
    8002a6b8:	a2032023          	sw	zero,-1504(t1) # 800540d4 <buflen.2>
    8002a6bc:	b759                	j	8002a642 <vprintfmt.constprop.1+0x766>
    8002a6be:	009f8fbb          	addw	t6,t6,s1
    8002a6c2:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    8002a6c6:	eff050e3          	blez	t6,8002a5a6 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002a6ca:	0002a317          	auipc	t1,0x2a
    8002a6ce:	a0a32303          	lw	t1,-1526(t1) # 800540d4 <buflen.2>
    8002a6d2:	0002a997          	auipc	s3,0x2a
    8002a6d6:	a0298993          	addi	s3,s3,-1534 # 800540d4 <buflen.2>
    8002a6da:	0002a917          	auipc	s2,0x2a
    8002a6de:	9a690913          	addi	s2,s2,-1626 # 80054080 <buf.1>
    8002a6e2:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    8002a6e6:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002a6ea:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    8002a6ec:	1c070b93          	addi	s7,a4,448
    8002a6f0:	00011b17          	auipc	s6,0x11
    8002a6f4:	910b0b13          	addi	s6,s6,-1776 # 8003b000 <tohost>
    8002a6f8:	00011297          	auipc	t0,0x11
    8002a6fc:	94828293          	addi	t0,t0,-1720 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a700:	4c09                	li	s8,2
    8002a702:	0013041b          	addiw	s0,t1,1
    8002a706:	934a                	add	t1,t1,s2
    8002a708:	0089a023          	sw	s0,0(s3)
    8002a70c:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a710:	04941e63          	bne	s0,s1,8002a76c <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    8002a714:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    8002a718:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    8002a71c:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    8002a720:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    8002a724:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a728:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8002a72c:	0002b303          	ld	t1,0(t0)
    8002a730:	fe030ee3          	beqz	t1,8002a72c <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    8002a734:	00011317          	auipc	t1,0x11
    8002a738:	90033623          	sd	zero,-1780(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a73c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a740:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002a744:	ffff831b          	addiw	t1,t6,-1
    8002a748:	0c030163          	beqz	t1,8002a80a <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    8002a74c:	0159a023          	sw	s5,0(s3)
    8002a750:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002a754:	3ff9                	addiw	t6,t6,-2
    8002a756:	e40f88e3          	beqz	t6,8002a5a6 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002a75a:	0189a023          	sw	s8,0(s3)
    8002a75e:	014900a3          	sb	s4,1(s2)
    8002a762:	4309                	li	t1,2
      for (; width > 0; width--)
    8002a764:	3ffd                	addiw	t6,t6,-1
    8002a766:	f80f9ee3          	bnez	t6,8002a702 <vprintfmt.constprop.1+0x826>
    8002a76a:	bd35                	j	8002a5a6 <vprintfmt.constprop.1+0x6ca>
    8002a76c:	8322                	mv	t1,s0
    8002a76e:	bfdd                	j	8002a764 <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002a770:	0002a917          	auipc	s2,0x2a
    8002a774:	91090913          	addi	s2,s2,-1776 # 80054080 <buf.1>
    8002a778:	006904b3          	add	s1,s2,t1
    8002a77c:	0013039b          	addiw	t2,t1,1
    8002a780:	02d00313          	li	t1,45
    8002a784:	00648023          	sb	t1,0(s1)
    8002a788:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a78c:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002a790:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002a792:	18938263          	beq	t2,s1,8002a916 <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    8002a796:	83a2                	mv	t2,s0
    8002a798:	405002b3          	neg	t0,t0
    8002a79c:	4429                	li	s0,10
    8002a79e:	b461                	j	8002a226 <vprintfmt.constprop.1+0x34a>
    8002a7a0:	0002a997          	auipc	s3,0x2a
    8002a7a4:	93498993          	addi	s3,s3,-1740 # 800540d4 <buflen.2>
    8002a7a8:	0002a917          	auipc	s2,0x2a
    8002a7ac:	8d890913          	addi	s2,s2,-1832 # 80054080 <buf.1>
    8002a7b0:	bd19                	j	8002a5c6 <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002a7b2:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    8002a7b6:	4305                	li	t1,1
    8002a7b8:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    8002a7bc:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002a7c0:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002a7c4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a7c8:	14070313          	addi	t1,a4,320
    8002a7cc:	00011297          	auipc	t0,0x11
    8002a7d0:	8262ba23          	sd	t1,-1996(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a7d4:	00011317          	auipc	t1,0x11
    8002a7d8:	86c30313          	addi	t1,t1,-1940 # 8003b040 <fromhost>
    8002a7dc:	00033283          	ld	t0,0(t1)
    8002a7e0:	fe028ee3          	beqz	t0,8002a7dc <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    8002a7e4:	00011317          	auipc	t1,0x11
    8002a7e8:	84033e23          	sd	zero,-1956(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a7ec:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a7f0:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    8002a7f4:	07800293          	li	t0,120
    8002a7f8:	4305                	li	t1,1
    8002a7fa:	00590023          	sb	t0,0(s2)
    8002a7fe:	0069a023          	sw	t1,0(s3)
    8002a802:	00838493          	addi	s1,t2,8
    8002a806:	4441                	li	s0,16
    8002a808:	bb7d                	j	8002a5c6 <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    8002a80a:	0002a317          	auipc	t1,0x2a
    8002a80e:	8c032523          	sw	zero,-1846(t1) # 800540d4 <buflen.2>
    8002a812:	bb51                	j	8002a5a6 <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    8002a814:	01f05663          	blez	t6,8002a820 <vprintfmt.constprop.1+0x944>
    8002a818:	02d00293          	li	t0,45
    8002a81c:	005a9a63          	bne	s5,t0,8002a830 <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a820:	02800293          	li	t0,40
    8002a824:	8996                	mv	s3,t0
        p = "(null)";
    8002a826:	0000e497          	auipc	s1,0xe
    8002a82a:	0da48493          	addi	s1,s1,218 # 80038900 <__func__.0+0xb848>
    8002a82e:	bee9                	j	8002a408 <vprintfmt.constprop.1+0x52c>
    8002a830:	0000e497          	auipc	s1,0xe
    8002a834:	0d048493          	addi	s1,s1,208 # 80038900 <__func__.0+0xb848>
  const char *p = s;
    8002a838:	82a6                	mv	t0,s1
  while (n-- && *p)
    8002a83a:	00648933          	add	s2,s1,t1
    8002a83e:	00031663          	bnez	t1,8002a84a <vprintfmt.constprop.1+0x96e>
    8002a842:	a829                	j	8002a85c <vprintfmt.constprop.1+0x980>
    p++;
    8002a844:	0285                	addi	t0,t0,1
  while (n-- && *p)
    8002a846:	01228563          	beq	t0,s2,8002a850 <vprintfmt.constprop.1+0x974>
    8002a84a:	0002c403          	lbu	s0,0(t0)
    8002a84e:	f87d                	bnez	s0,8002a844 <vprintfmt.constprop.1+0x968>
  return p - s;
    8002a850:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a854:	405f8fbb          	subw	t6,t6,t0
    8002a858:	d5f051e3          	blez	t6,8002a59a <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    8002a85c:	0002a297          	auipc	t0,0x2a
    8002a860:	8782a283          	lw	t0,-1928(t0) # 800540d4 <buflen.2>
    8002a864:	0002a997          	auipc	s3,0x2a
    8002a868:	87098993          	addi	s3,s3,-1936 # 800540d4 <buflen.2>
    8002a86c:	0002a917          	auipc	s2,0x2a
    8002a870:	81490913          	addi	s2,s2,-2028 # 80054080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a874:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    8002a878:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8002a87a:	24070c93          	addi	s9,a4,576
    8002a87e:	00010c17          	auipc	s8,0x10
    8002a882:	782c0c13          	addi	s8,s8,1922 # 8003b000 <tohost>
    8002a886:	00010417          	auipc	s0,0x10
    8002a88a:	7ba40413          	addi	s0,s0,1978 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a88e:	4b89                	li	s7,2
    8002a890:	00128d1b          	addiw	s10,t0,1
    8002a894:	92ca                	add	t0,t0,s2
    8002a896:	01a9a023          	sw	s10,0(s3)
    8002a89a:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a89e:	074d1563          	bne	s10,s4,8002a908 <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002a8a2:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    8002a8a6:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    8002a8aa:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002a8ae:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002a8b2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a8b6:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    8002a8ba:	00043283          	ld	t0,0(s0)
    8002a8be:	fe028ee3          	beqz	t0,8002a8ba <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002a8c2:	00010297          	auipc	t0,0x10
    8002a8c6:	7602bf23          	sd	zero,1918(t0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a8ca:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a8ce:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a8d2:	ffff829b          	addiw	t0,t6,-1
    8002a8d6:	08028763          	beqz	t0,8002a964 <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    8002a8da:	0169a023          	sw	s6,0(s3)
    8002a8de:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a8e2:	3ff9                	addiw	t6,t6,-2
    8002a8e4:	000f8a63          	beqz	t6,8002a8f8 <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    8002a8e8:	0179a023          	sw	s7,0(s3)
    8002a8ec:	015900a3          	sb	s5,1(s2)
    8002a8f0:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a8f2:	3ffd                	addiw	t6,t6,-1
    8002a8f4:	f80f9ee3          	bnez	t6,8002a890 <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a8f8:	0004c283          	lbu	t0,0(s1)
    8002a8fc:	0002899b          	sext.w	s3,t0
    8002a900:	ca0283e3          	beqz	t0,8002a5a6 <vprintfmt.constprop.1+0x6ca>
    8002a904:	4f81                	li	t6,0
    8002a906:	b609                	j	8002a408 <vprintfmt.constprop.1+0x52c>
    8002a908:	82ea                	mv	t0,s10
    8002a90a:	b7e5                	j	8002a8f2 <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    8002a90c:	46013b83          	ld	s7,1120(sp)
    8002a910:	842a                	mv	s0,a0
    8002a912:	f8cff06f          	j	8002a09e <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    8002a916:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    8002a91a:	4305                	li	t1,1
    8002a91c:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    8002a920:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    8002a924:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    8002a928:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a92c:	18070313          	addi	t1,a4,384
    8002a930:	00010397          	auipc	t2,0x10
    8002a934:	6c63b823          	sd	t1,1744(t2) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a938:	00010317          	auipc	t1,0x10
    8002a93c:	70830313          	addi	t1,t1,1800 # 8003b040 <fromhost>
    8002a940:	00033383          	ld	t2,0(t1)
    8002a944:	fe038ee3          	beqz	t2,8002a940 <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    8002a948:	00010317          	auipc	t1,0x10
    8002a94c:	6e033c23          	sd	zero,1784(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a950:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a954:	18073303          	ld	t1,384(a4)
    buflen = 0;
    8002a958:	00029317          	auipc	t1,0x29
    8002a95c:	76032e23          	sw	zero,1916(t1) # 800540d4 <buflen.2>
    8002a960:	4301                	li	t1,0
    8002a962:	bd15                	j	8002a796 <vprintfmt.constprop.1+0x8ba>
    8002a964:	00029f97          	auipc	t6,0x29
    8002a968:	760fa823          	sw	zero,1904(t6) # 800540d4 <buflen.2>
    8002a96c:	b771                	j	8002a8f8 <vprintfmt.constprop.1+0xa1c>

000000008002a96e <strlen>:
  while (*p)
    8002a96e:	00054783          	lbu	a5,0(a0)
    8002a972:	c78d                	beqz	a5,8002a99c <strlen+0x2e>
    8002a974:	4701                	li	a4,0
    8002a976:	00150793          	addi	a5,a0,1
    8002a97a:	0c0076d7          	vsetvli	a3,zero,e8,m1,ta,ma
    8002a97e:	97ba                	add	a5,a5,a4
    8002a980:	03078087          	vle8ff.v	v1,(a5)
    8002a984:	621030d7          	vmseq.vi	v1,v1,0
    8002a988:	c2002773          	csrr	a4,vl
    8002a98c:	4218a657          	vfirst.m	a2,v1
    8002a990:	fe0645e3          	bltz	a2,8002a97a <strlen+0xc>
    8002a994:	97b2                	add	a5,a5,a2
  return p - s;
    8002a996:	40a78533          	sub	a0,a5,a0
    8002a99a:	8082                	ret
  while (*p)
    8002a99c:	4501                	li	a0,0
}
    8002a99e:	8082                	ret

000000008002a9a0 <strnlen>:
  while (n-- && *p)
    8002a9a0:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8002a9a4:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002a9a6:	e589                	bnez	a1,8002a9b0 <strnlen+0x10>
    8002a9a8:	a811                	j	8002a9bc <strnlen+0x1c>
    p++;
    8002a9aa:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002a9ac:	00d78563          	beq	a5,a3,8002a9b6 <strnlen+0x16>
    8002a9b0:	0007c703          	lbu	a4,0(a5)
    8002a9b4:	fb7d                	bnez	a4,8002a9aa <strnlen+0xa>
  return p - s;
    8002a9b6:	40a78533          	sub	a0,a5,a0
}
    8002a9ba:	8082                	ret
  while (n-- && *p)
    8002a9bc:	4501                	li	a0,0
    8002a9be:	8082                	ret

000000008002a9c0 <setStats>:
  READ_CTR(mcycle);
    8002a9c0:	b0002773          	csrr	a4,mcycle
    8002a9c4:	00029797          	auipc	a5,0x29
    8002a9c8:	6bc78793          	addi	a5,a5,1724 # 80054080 <buf.1>
    8002a9cc:	c511                	beqz	a0,8002a9d8 <setStats+0x18>
    8002a9ce:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002a9d0:	b0202773          	csrr	a4,minstret
    8002a9d4:	e7b8                	sd	a4,72(a5)
}
    8002a9d6:	8082                	ret
  READ_CTR(mcycle);
    8002a9d8:	63b4                	ld	a3,64(a5)
    8002a9da:	8f15                	sub	a4,a4,a3
    8002a9dc:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002a9de:	b0202773          	csrr	a4,minstret
    8002a9e2:	67b4                	ld	a3,72(a5)
    8002a9e4:	8f15                	sub	a4,a4,a3
    8002a9e6:	e7b8                	sd	a4,72(a5)
}
    8002a9e8:	8082                	ret

000000008002a9ea <tohost_exit>:
  tohost = (code << 1) | 1;
    8002a9ea:	00151793          	slli	a5,a0,0x1
    8002a9ee:	0017e793          	ori	a5,a5,1
    8002a9f2:	00010717          	auipc	a4,0x10
    8002a9f6:	60f73723          	sd	a5,1550(a4) # 8003b000 <tohost>
  while (1);
    8002a9fa:	a001                	j	8002a9fa <tohost_exit+0x10>

000000008002a9fc <handle_trap>:
  tohost = (code << 1) | 1;
    8002a9fc:	6785                	lui	a5,0x1
    8002a9fe:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8002aa02:	00010717          	auipc	a4,0x10
    8002aa06:	5ef73f23          	sd	a5,1534(a4) # 8003b000 <tohost>
  while (1);
    8002aa0a:	a001                	j	8002aa0a <handle_trap+0xe>

000000008002aa0c <exit>:
{
    8002aa0c:	1141                	addi	sp,sp,-16
    8002aa0e:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8002aa10:	fdbff0ef          	jal	8002a9ea <tohost_exit>

000000008002aa14 <abort>:
  tohost = (code << 1) | 1;
    8002aa14:	10d00793          	li	a5,269
    8002aa18:	00010717          	auipc	a4,0x10
    8002aa1c:	5ef73423          	sd	a5,1512(a4) # 8003b000 <tohost>
  while (1);
    8002aa20:	a001                	j	8002aa20 <abort+0xc>

000000008002aa22 <printstr>:
  while (*p)
    8002aa22:	00054783          	lbu	a5,0(a0)
{
    8002aa26:	7159                	addi	sp,sp,-112
    8002aa28:	03f10693          	addi	a3,sp,63
    8002aa2c:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002aa30:	cfb9                	beqz	a5,8002aa8e <printstr+0x6c>
    8002aa32:	4701                	li	a4,0
    8002aa34:	00150793          	addi	a5,a0,1
    8002aa38:	0c007657          	vsetvli	a2,zero,e8,m1,ta,ma
    8002aa3c:	97ba                	add	a5,a5,a4
    8002aa3e:	03078087          	vle8ff.v	v1,(a5)
    8002aa42:	621030d7          	vmseq.vi	v1,v1,0
    8002aa46:	c2002773          	csrr	a4,vl
    8002aa4a:	4218a5d7          	vfirst.m	a1,v1
    8002aa4e:	fe05c5e3          	bltz	a1,8002aa38 <printstr+0x16>
    8002aa52:	97ae                	add	a5,a5,a1
  return p - s;
    8002aa54:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002aa56:	04000713          	li	a4,64
    8002aa5a:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002aa5c:	4705                	li	a4,1
    8002aa5e:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002aa60:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8002aa62:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002aa64:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002aa68:	00010717          	auipc	a4,0x10
    8002aa6c:	5d870713          	addi	a4,a4,1496 # 8003b040 <fromhost>
    8002aa70:	00010797          	auipc	a5,0x10
    8002aa74:	58d7b823          	sd	a3,1424(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    8002aa78:	631c                	ld	a5,0(a4)
    8002aa7a:	dffd                	beqz	a5,8002aa78 <printstr+0x56>
  fromhost = 0;
    8002aa7c:	00010797          	auipc	a5,0x10
    8002aa80:	5c07b223          	sd	zero,1476(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002aa84:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002aa88:	629c                	ld	a5,0(a3)
}
    8002aa8a:	6165                	addi	sp,sp,112
    8002aa8c:	8082                	ret
  while (*p)
    8002aa8e:	4781                	li	a5,0
    8002aa90:	b7d9                	j	8002aa56 <printstr+0x34>

000000008002aa92 <puts>:
    8002aa92:	00054783          	lbu	a5,0(a0)
{
    8002aa96:	7171                	addi	sp,sp,-176
    8002aa98:	03f10693          	addi	a3,sp,63
    8002aa9c:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002aaa0:	cfdd                	beqz	a5,8002ab5e <puts+0xcc>
    8002aaa2:	4601                	li	a2,0
    8002aaa4:	00150793          	addi	a5,a0,1
    8002aaa8:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002aaac:	97b2                	add	a5,a5,a2
    8002aaae:	03078087          	vle8ff.v	v1,(a5)
    8002aab2:	621030d7          	vmseq.vi	v1,v1,0
    8002aab6:	c2002673          	csrr	a2,vl
    8002aaba:	4218a5d7          	vfirst.m	a1,v1
    8002aabe:	fe05c5e3          	bltz	a1,8002aaa8 <puts+0x16>
    8002aac2:	97ae                	add	a5,a5,a1
  return p - s;
    8002aac4:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002aac6:	04000713          	li	a4,64
    8002aaca:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8002aacc:	4705                	li	a4,1
    8002aace:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8002aad0:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8002aad2:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8002aad4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002aad8:	00010617          	auipc	a2,0x10
    8002aadc:	52860613          	addi	a2,a2,1320 # 8003b000 <tohost>
    8002aae0:	04068793          	addi	a5,a3,64
    8002aae4:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8002aae6:	00010797          	auipc	a5,0x10
    8002aaea:	55a78793          	addi	a5,a5,1370 # 8003b040 <fromhost>
    8002aaee:	6398                	ld	a4,0(a5)
    8002aaf0:	df7d                	beqz	a4,8002aaee <puts+0x5c>
  fromhost = 0;
    8002aaf2:	00010717          	auipc	a4,0x10
    8002aaf6:	54073723          	sd	zero,1358(a4) # 8003b040 <fromhost>
  __sync_synchronize();
    8002aafa:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002aafe:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8002ab00:	04000593          	li	a1,64
    8002ab04:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8002ab06:	4705                	li	a4,1
    8002ab08:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8002ab0a:	0000e597          	auipc	a1,0xe
    8002ab0e:	dfe58593          	addi	a1,a1,-514 # 80038908 <__func__.0+0xb850>
  magic_mem[2] = arg1;
    8002ab12:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8002ab14:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8002ab16:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ab1a:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8002ab1c:	6398                	ld	a4,0(a5)
    8002ab1e:	df7d                	beqz	a4,8002ab1c <puts+0x8a>
  fromhost = 0;
    8002ab20:	00010797          	auipc	a5,0x10
    8002ab24:	5207b023          	sd	zero,1312(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002ab28:	0330000f          	fence	rw,rw
  while (*p)
    8002ab2c:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8002ab30:	6298                	ld	a4,0(a3)
  while (*p)
    8002ab32:	cb85                	beqz	a5,8002ab62 <puts+0xd0>
    8002ab34:	4681                	li	a3,0
    8002ab36:	00150793          	addi	a5,a0,1
    8002ab3a:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002ab3e:	97b6                	add	a5,a5,a3
    8002ab40:	03078087          	vle8ff.v	v1,(a5)
    8002ab44:	621030d7          	vmseq.vi	v1,v1,0
    8002ab48:	c20026f3          	csrr	a3,vl
    8002ab4c:	4218a657          	vfirst.m	a2,v1
    8002ab50:	fe0645e3          	bltz	a2,8002ab3a <puts+0xa8>
    8002ab54:	97b2                	add	a5,a5,a2
  return strlen(s);
    8002ab56:	40a7853b          	subw	a0,a5,a0
}
    8002ab5a:	614d                	addi	sp,sp,176
    8002ab5c:	8082                	ret
  while (*p)
    8002ab5e:	4781                	li	a5,0
    8002ab60:	b79d                	j	8002aac6 <puts+0x34>
    8002ab62:	4501                	li	a0,0
}
    8002ab64:	614d                	addi	sp,sp,176
    8002ab66:	8082                	ret

000000008002ab68 <thread_entry>:
  while (cid != 0);
    8002ab68:	e111                	bnez	a0,8002ab6c <thread_entry+0x4>
}
    8002ab6a:	8082                	ret
  while (cid != 0);
    8002ab6c:	a001                	j	8002ab6c <thread_entry+0x4>

000000008002ab6e <printhex>:
  for (i = 0; i < 16; i++)
    8002ab6e:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002ab72:	5208a157          	vid.v	v2
    8002ab76:	5e0540d7          	vmv.v.x	v1,a0
    8002ab7a:	96213157          	vsll.vi	v2,v2,2
    8002ab7e:	03800613          	li	a2,56
    8002ab82:	03000793          	li	a5,48
    8002ab86:	a21100d7          	vsrl.vv	v1,v1,v2
    8002ab8a:	02000693          	li	a3,32
    8002ab8e:	02800713          	li	a4,40
    8002ab92:	a2164157          	vsrl.vx	v2,v1,a2
    8002ab96:	a217c857          	vsrl.vx	v16,v1,a5
    8002ab9a:	a216c457          	vsrl.vx	v8,v1,a3
    8002ab9e:	a21747d7          	vsrl.vx	v15,v1,a4
    8002aba2:	a21433d7          	vsrl.vi	v7,v1,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002aba6:	a2183357          	vsrl.vi	v6,v1,16
    8002abaa:	a21c32d7          	vsrl.vi	v5,v1,24
    8002abae:	0d707057          	vsetvli	zero,zero,e32,mf2,ta,ma
    8002abb2:	b22044d7          	vncvt.x.x.w	v9,v2
    8002abb6:	b21046d7          	vncvt.x.x.w	v13,v1
    8002abba:	b2704657          	vncvt.x.x.w	v12,v7
    8002abbe:	b26045d7          	vncvt.x.x.w	v11,v6
    8002abc2:	b2504557          	vncvt.x.x.w	v10,v5
    8002abc6:	b2804257          	vncvt.x.x.w	v4,v8
    8002abca:	b2f041d7          	vncvt.x.x.w	v3,v15
    8002abce:	b3004757          	vncvt.x.x.w	v14,v16
    8002abd2:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002abd6:	b29044d7          	vncvt.x.x.w	v9,v9
    8002abda:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abde:	2627b157          	vand.vi	v2,v2,15
    8002abe2:	2617b0d7          	vand.vi	v1,v1,15
    8002abe6:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002abea:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002abee:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abf2:	2677b3d7          	vand.vi	v7,v7,15
    8002abf6:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002abfa:	b2c04657          	vncvt.x.x.w	v12,v12
    8002abfe:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac02:	2667b357          	vand.vi	v6,v6,15
    8002ac06:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ac0a:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ac0e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac12:	2657b2d7          	vand.vi	v5,v5,15
    8002ac16:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ac1a:	b2a04557          	vncvt.x.x.w	v10,v10
    8002ac1e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac22:	2687b457          	vand.vi	v8,v8,15
    8002ac26:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ac2a:	b2404257          	vncvt.x.x.w	v4,v4
    8002ac2e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac32:	26f7b7d7          	vand.vi	v15,v15,15
    8002ac36:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ac3a:	b23041d7          	vncvt.x.x.w	v3,v3
    8002ac3e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac42:	2707b8d7          	vand.vi	v17,v16,15
    8002ac46:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ac4a:	b2e04757          	vncvt.x.x.w	v14,v14
    8002ac4e:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac52:	b29044d7          	vncvt.x.x.w	v9,v9
    8002ac56:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac5a:	7224b057          	vmsleu.vi	v0,v2,9
    8002ac5e:	05700713          	li	a4,87
    8002ac62:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac66:	5e074157          	vmv.v.x	v2,a4
    8002ac6a:	5e07c9d7          	vmv.v.x	v19,a5
    8002ac6e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac72:	7214b0d7          	vmsleu.vi	v1,v1,9
    8002ac76:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac7a:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002ac7e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac82:	7274b3d7          	vmsleu.vi	v7,v7,9
    8002ac86:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac8a:	b2c04657          	vncvt.x.x.w	v12,v12
    8002ac8e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac92:	7264b357          	vmsleu.vi	v6,v6,9
    8002ac96:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac9a:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ac9e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002aca2:	7254b2d7          	vmsleu.vi	v5,v5,9
    8002aca6:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002acaa:	b2a04557          	vncvt.x.x.w	v10,v10
    8002acae:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002acb2:	7284b457          	vmsleu.vi	v8,v8,9
    8002acb6:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002acba:	b2404257          	vncvt.x.x.w	v4,v4
    8002acbe:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002acc2:	72f4b7d7          	vmsleu.vi	v15,v15,9
    8002acc6:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002acca:	b23041d7          	vncvt.x.x.w	v3,v3
    8002acce:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002acd2:	7314b8d7          	vmsleu.vi	v17,v17,9
    8002acd6:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002acda:	9f303957          	vmv1r.v	v18,v19
    8002acde:	9f303b57          	vmv1r.v	v22,v19
    8002ace2:	9f303bd7          	vmv1r.v	v23,v19
    8002ace6:	9f303857          	vmv1r.v	v16,v19
    8002acea:	9f303c57          	vmv1r.v	v24,v19
    8002acee:	9f303ad7          	vmv1r.v	v21,v19
    8002acf2:	9f303a57          	vmv1r.v	v20,v19
    8002acf6:	5c2989d7          	vmerge.vvm	v19,v2,v19,v0
    8002acfa:	9e103057          	vmv1r.v	v0,v1
    8002acfe:	b2e04757          	vncvt.x.x.w	v14,v14
    8002ad02:	2697b4d7          	vand.vi	v9,v9,15
    8002ad06:	5c290957          	vmerge.vvm	v18,v2,v18,v0
    8002ad0a:	9e703057          	vmv1r.v	v0,v7
    8002ad0e:	26d7b6d7          	vand.vi	v13,v13,15
    8002ad12:	26c7b657          	vand.vi	v12,v12,15
    8002ad16:	5c2b0b57          	vmerge.vvm	v22,v2,v22,v0
    8002ad1a:	9e603057          	vmv1r.v	v0,v6
    8002ad1e:	26b7b5d7          	vand.vi	v11,v11,15
    8002ad22:	26a7b557          	vand.vi	v10,v10,15
    8002ad26:	5c2b8bd7          	vmerge.vvm	v23,v2,v23,v0
    8002ad2a:	9e503057          	vmv1r.v	v0,v5
    8002ad2e:	2647b257          	vand.vi	v4,v4,15
    8002ad32:	26e7b2d7          	vand.vi	v5,v14,15
    8002ad36:	5c280857          	vmerge.vvm	v16,v2,v16,v0
    8002ad3a:	9e803057          	vmv1r.v	v0,v8
    8002ad3e:	2637b1d7          	vand.vi	v3,v3,15
    8002ad42:	5208a0d7          	vid.v	v1
    8002ad46:	5c2c0c57          	vmerge.vvm	v24,v2,v24,v0
    8002ad4a:	9ef03057          	vmv1r.v	v0,v15
    8002ad4e:	0e10b0d7          	vrsub.vi	v1,v1,1
    8002ad52:	02998357          	vadd.vv	v6,v9,v19
    8002ad56:	5c2a8ad7          	vmerge.vvm	v21,v2,v21,v0
    8002ad5a:	9f103057          	vmv1r.v	v0,v17
    8002ad5e:	02cb0657          	vadd.vv	v12,v12,v22
    8002ad62:	024c0257          	vadd.vv	v4,v4,v24
    8002ad66:	5c2a0157          	vmerge.vvm	v2,v2,v20,v0
    8002ad6a:	023a81d7          	vadd.vv	v3,v3,v21
    8002ad6e:	02d906d7          	vadd.vv	v13,v13,v18
    8002ad72:	025102d7          	vadd.vv	v5,v5,v2
    8002ad76:	02bb85d7          	vadd.vv	v11,v11,v23
    8002ad7a:	02a80557          	vadd.vv	v10,v10,v16
    8002ad7e:	32c08757          	vrgather.vv	v14,v12,v1
    8002ad82:	32408457          	vrgather.vv	v8,v4,v1
    8002ad86:	323083d7          	vrgather.vv	v7,v3,v1
    8002ad8a:	32b08657          	vrgather.vv	v12,v11,v1
    8002ad8e:	32a084d7          	vrgather.vv	v9,v10,v1
    8002ad92:	32508257          	vrgather.vv	v4,v5,v1
    8002ad96:	326081d7          	vrgather.vv	v3,v6,v1
    8002ad9a:	32d08157          	vrgather.vv	v2,v13,v1
{
    8002ad9e:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002ada0:	00a10693          	addi	a3,sp,10
  while (*p)
    8002ada4:	3e60b7d7          	vslidedown.vi	v15,v6,1
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002ada8:	01210893          	addi	a7,sp,18
    8002adac:	01010813          	addi	a6,sp,16
    8002adb0:	00e10513          	addi	a0,sp,14
    8002adb4:	006c                	addi	a1,sp,12
    8002adb6:	0030                	addi	a2,sp,8
    8002adb8:	01610713          	addi	a4,sp,22
    8002adbc:	01410313          	addi	t1,sp,20
    8002adc0:	02068227          	vse8.v	v4,(a3)
    8002adc4:	02030727          	vse8.v	v14,(t1)
    8002adc8:	02088627          	vse8.v	v12,(a7)
    8002adcc:	020804a7          	vse8.v	v9,(a6)
    8002add0:	02050427          	vse8.v	v8,(a0)
    8002add4:	020583a7          	vse8.v	v7,(a1)
    8002add8:	020601a7          	vse8.v	v3,(a2)
    8002addc:	02070127          	vse8.v	v2,(a4)
  while (*p)
    8002ade0:	42f027d7          	vmv.x.s	a5,v15
{
    8002ade4:	05f10693          	addi	a3,sp,95
  str[16] = 0;
    8002ade8:	00010c23          	sb	zero,24(sp)
  while (*p)
    8002adec:	0ff7f793          	zext.b	a5,a5
{
    8002adf0:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002adf4:	cfb9                	beqz	a5,8002ae52 <printhex+0x2e4>
    8002adf6:	4701                	li	a4,0
    8002adf8:	00910793          	addi	a5,sp,9
    8002adfc:	0c0075d7          	vsetvli	a1,zero,e8,m1,ta,ma
    8002ae00:	97ba                	add	a5,a5,a4
    8002ae02:	03078087          	vle8ff.v	v1,(a5)
    8002ae06:	621030d7          	vmseq.vi	v1,v1,0
    8002ae0a:	c2002773          	csrr	a4,vl
    8002ae0e:	4218a557          	vfirst.m	a0,v1
    8002ae12:	fe0545e3          	bltz	a0,8002adfc <printhex+0x28e>
    8002ae16:	97aa                	add	a5,a5,a0
  return p - s;
    8002ae18:	8f91                	sub	a5,a5,a2
  magic_mem[0] = which;
    8002ae1a:	04000713          	li	a4,64
    8002ae1e:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002ae20:	4705                	li	a4,1
    8002ae22:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002ae24:	ea90                	sd	a2,16(a3)
  magic_mem[3] = arg2;
    8002ae26:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002ae28:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ae2c:	00010717          	auipc	a4,0x10
    8002ae30:	21470713          	addi	a4,a4,532 # 8003b040 <fromhost>
    8002ae34:	00010797          	auipc	a5,0x10
    8002ae38:	1cd7b623          	sd	a3,460(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    8002ae3c:	631c                	ld	a5,0(a4)
    8002ae3e:	dffd                	beqz	a5,8002ae3c <printhex+0x2ce>
  fromhost = 0;
    8002ae40:	00010797          	auipc	a5,0x10
    8002ae44:	2007b023          	sd	zero,512(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002ae48:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ae4c:	629c                	ld	a5,0(a3)
}
    8002ae4e:	6149                	addi	sp,sp,144
    8002ae50:	8082                	ret
  while (*p)
    8002ae52:	4781                	li	a5,0
    8002ae54:	b7d9                	j	8002ae1a <printhex+0x2ac>

000000008002ae56 <printf>:
{
    8002ae56:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002ae58:	02810313          	addi	t1,sp,40
{
    8002ae5c:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002ae5e:	859a                	mv	a1,t1
{
    8002ae60:	ec06                	sd	ra,24(sp)
    8002ae62:	f832                	sd	a2,48(sp)
    8002ae64:	fc36                	sd	a3,56(sp)
    8002ae66:	e0ba                	sd	a4,64(sp)
    8002ae68:	e4be                	sd	a5,72(sp)
    8002ae6a:	e8c2                	sd	a6,80(sp)
    8002ae6c:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002ae6e:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002ae70:	86cff0ef          	jal	80029edc <vprintfmt.constprop.1>
}
    8002ae74:	60e2                	ld	ra,24(sp)
    8002ae76:	4501                	li	a0,0
    8002ae78:	6125                	addi	sp,sp,96
    8002ae7a:	8082                	ret

000000008002ae7c <sprintf>:
{
    8002ae7c:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002ae7e:	03010313          	addi	t1,sp,48
{
    8002ae82:	f022                	sd	s0,32(sp)
    8002ae84:	e42a                	sd	a0,8(sp)
    8002ae86:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8002ae88:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002ae8a:	861a                	mv	a2,t1
    8002ae8c:	0028                	addi	a0,sp,8
{
    8002ae8e:	f406                	sd	ra,40(sp)
    8002ae90:	fc36                	sd	a3,56(sp)
    8002ae92:	e0ba                	sd	a4,64(sp)
    8002ae94:	e4be                	sd	a5,72(sp)
    8002ae96:	e8c2                	sd	a6,80(sp)
    8002ae98:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002ae9a:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002ae9c:	d2bfe0ef          	jal	80029bc6 <vprintfmt.constprop.0>
  *str = 0;
    8002aea0:	6522                	ld	a0,8(sp)
    8002aea2:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8002aea6:	70a2                	ld	ra,40(sp)
    8002aea8:	9d01                	subw	a0,a0,s0
    8002aeaa:	7402                	ld	s0,32(sp)
    8002aeac:	6125                	addi	sp,sp,96
    8002aeae:	8082                	ret

000000008002aeb0 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002aeb0:	00c5e7b3          	or	a5,a1,a2
    8002aeb4:	8fc9                	or	a5,a5,a0
    8002aeb6:	8b9d                	andi	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8002aeb8:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002aebc:	cb85                	beqz	a5,8002aeec <memcpy+0x3c>
    while (d < (char*)(dest + len))
    8002aebe:	08d57363          	bgeu	a0,a3,8002af44 <memcpy+0x94>
    8002aec2:	00158793          	addi	a5,a1,1
    8002aec6:	c2202773          	csrr	a4,vlenb
    8002aeca:	40f506b3          	sub	a3,a0,a5
    8002aece:	1779                	addi	a4,a4,-2
    8002aed0:	04d77e63          	bgeu	a4,a3,8002af2c <memcpy+0x7c>
    8002aed4:	872a                	mv	a4,a0
    8002aed6:	0c0677d7          	vsetvli	a5,a2,e8,m1,ta,ma
      *d++ = *s++;
    8002aeda:	02058087          	vle8.v	v1,(a1)
    while (d < (char*)(dest + len))
    8002aede:	8e1d                	sub	a2,a2,a5
    8002aee0:	95be                	add	a1,a1,a5
      *d++ = *s++;
    8002aee2:	020700a7          	vse8.v	v1,(a4)
    while (d < (char*)(dest + len))
    8002aee6:	973e                	add	a4,a4,a5
    8002aee8:	f67d                	bnez	a2,8002aed6 <memcpy+0x26>
    8002aeea:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002aeec:	04d57b63          	bgeu	a0,a3,8002af42 <memcpy+0x92>
    8002aef0:	167d                	addi	a2,a2,-1
    8002aef2:	04700793          	li	a5,71
    8002aef6:	00858713          	addi	a4,a1,8
    8002aefa:	04c7f663          	bgeu	a5,a2,8002af46 <memcpy+0x96>
    8002aefe:	c22027f3          	csrr	a5,vlenb
    8002af02:	40e50833          	sub	a6,a0,a4
    8002af06:	17c1                	addi	a5,a5,-16
    8002af08:	0307ff63          	bgeu	a5,a6,8002af46 <memcpy+0x96>
    8002af0c:	820d                	srli	a2,a2,0x3
    8002af0e:	0605                	addi	a2,a2,1
    8002af10:	872a                	mv	a4,a0
    8002af12:	0c5677d7          	vsetvli	a5,a2,e8,mf8,ta,ma
      *d++ = *s++;
    8002af16:	0205f087          	vle64.v	v1,(a1)
    8002af1a:	00379693          	slli	a3,a5,0x3
    while (d < (uintptr_t*)(dest + len))
    8002af1e:	8e1d                	sub	a2,a2,a5
    8002af20:	95b6                	add	a1,a1,a3
      *d++ = *s++;
    8002af22:	020770a7          	vse64.v	v1,(a4)
    while (d < (uintptr_t*)(dest + len))
    8002af26:	9736                	add	a4,a4,a3
    8002af28:	f66d                	bnez	a2,8002af12 <memcpy+0x62>
    8002af2a:	8082                	ret
    8002af2c:	95b2                	add	a1,a1,a2
    char *d = dest;
    8002af2e:	872a                	mv	a4,a0
    8002af30:	a011                	j	8002af34 <memcpy+0x84>
    8002af32:	0785                	addi	a5,a5,1
      *d++ = *s++;
    8002af34:	fff7c683          	lbu	a3,-1(a5)
    8002af38:	0705                	addi	a4,a4,1
    8002af3a:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8002af3e:	fef59ae3          	bne	a1,a5,8002af32 <memcpy+0x82>
  }
  return dest;
}
    8002af42:	8082                	ret
    8002af44:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002af46:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002af48:	ff873603          	ld	a2,-8(a4)
    8002af4c:	07a1                	addi	a5,a5,8
    8002af4e:	0721                	addi	a4,a4,8
    8002af50:	fec7bc23          	sd	a2,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8002af54:	fed7eae3          	bltu	a5,a3,8002af48 <memcpy+0x98>
}
    8002af58:	8082                	ret

000000008002af5a <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002af5a:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002af5c:	00c566b3          	or	a3,a0,a2
{
    8002af60:	e022                	sd	s0,0(sp)
    8002af62:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002af64:	8a9d                	andi	a3,a3,7
{
    8002af66:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002af68:	00c50833          	add	a6,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002af6c:	ce81                	beqz	a3,8002af84 <memset+0x2a>
    while (d < (char*)(dest + len))
    8002af6e:	01057663          	bgeu	a0,a6,8002af7a <memset+0x20>
      *d++ = byte;
    8002af72:	0ff5f593          	zext.b	a1,a1
    8002af76:	fe5ff0ef          	jal	8002af5a <memset>
  }
  return dest;
}
    8002af7a:	60a2                	ld	ra,8(sp)
    8002af7c:	8522                	mv	a0,s0
    8002af7e:	6402                	ld	s0,0(sp)
    8002af80:	0141                	addi	sp,sp,16
    8002af82:	8082                	ret
    word |= word << 16 << 16;
    8002af84:	8732                	mv	a4,a2
    8002af86:	01010637          	lui	a2,0x1010
    8002af8a:	10160613          	addi	a2,a2,257 # 1010101 <STACK_SIZE+0xf10101>
    8002af8e:	87aa                	mv	a5,a0
    8002af90:	02061513          	slli	a0,a2,0x20
    uintptr_t word = byte & 0xFF;
    8002af94:	0ff5f593          	zext.b	a1,a1
    8002af98:	9532                	add	a0,a0,a2
    8002af9a:	02a585b3          	mul	a1,a1,a0
    while (d < (uintptr_t*)(dest + len))
    8002af9e:	fd047ee3          	bgeu	s0,a6,8002af7a <memset+0x20>
    8002afa2:	177d                	addi	a4,a4,-1
    8002afa4:	00375613          	srli	a2,a4,0x3
    8002afa8:	451d                	li	a0,7
    8002afaa:	0605                	addi	a2,a2,1
    8002afac:	02e57463          	bgeu	a0,a4,8002afd4 <memset+0x7a>
    8002afb0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002afb4:	00165713          	srli	a4,a2,0x1
    8002afb8:	5e05c0d7          	vmv.v.x	v1,a1
    8002afbc:	0712                	slli	a4,a4,0x4
    8002afbe:	9722                	add	a4,a4,s0
      *d++ = word;
    8002afc0:	0207f0a7          	vse64.v	v1,(a5)
    while (d < (uintptr_t*)(dest + len))
    8002afc4:	07c1                	addi	a5,a5,16
    8002afc6:	fef71de3          	bne	a4,a5,8002afc0 <memset+0x66>
    8002afca:	00167793          	andi	a5,a2,1
    8002afce:	d7d5                	beqz	a5,8002af7a <memset+0x20>
    8002afd0:	ffe67693          	andi	a3,a2,-2
    8002afd4:	8e15                	sub	a2,a2,a3
    8002afd6:	0d867057          	vsetvli	zero,a2,e64,m1,ta,ma
      *d++ = word;
    8002afda:	5e05c0d7          	vmv.v.x	v1,a1
    8002afde:	068e                	slli	a3,a3,0x3
    8002afe0:	96a2                	add	a3,a3,s0
    8002afe2:	0206f0a7          	vse64.v	v1,(a3)
}
    8002afe6:	60a2                	ld	ra,8(sp)
    8002afe8:	8522                	mv	a0,s0
    8002afea:	6402                	ld	s0,0(sp)
    8002afec:	0141                	addi	sp,sp,16
    8002afee:	8082                	ret

000000008002aff0 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8002aff0:	00054783          	lbu	a5,0(a0)
    8002aff4:	0505                	addi	a0,a0,1
    c2 = *s2++;
    8002aff6:	0585                	addi	a1,a1,1
    8002aff8:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8002affc:	c799                	beqz	a5,8002b00a <strcmp+0x1a>
    8002affe:	fee789e3          	beq	a5,a4,8002aff0 <strcmp>

  return c1 - c2;
    8002b002:	0007851b          	sext.w	a0,a5
}
    8002b006:	9d19                	subw	a0,a0,a4
    8002b008:	8082                	ret
    8002b00a:	4501                	li	a0,0
  return c1 - c2;
    8002b00c:	bfed                	j	8002b006 <strcmp+0x16>

000000008002b00e <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8002b00e:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8002b010:	0005c703          	lbu	a4,0(a1)
    8002b014:	0585                	addi	a1,a1,1
    8002b016:	0785                	addi	a5,a5,1
    8002b018:	fee78fa3          	sb	a4,-1(a5)
    8002b01c:	fb75                	bnez	a4,8002b010 <strcpy+0x2>
    ;
  return dest;
}
    8002b01e:	8082                	ret

000000008002b020 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8002b020:	00054683          	lbu	a3,0(a0)
    8002b024:	02000713          	li	a4,32
{
    8002b028:	87aa                	mv	a5,a0
  while (*str == ' ')
    8002b02a:	00e69863          	bne	a3,a4,8002b03a <atol+0x1a>
    8002b02e:	8736                	mv	a4,a3
    8002b030:	0017c683          	lbu	a3,1(a5)
    str++;
    8002b034:	0785                	addi	a5,a5,1
  while (*str == ' ')
    8002b036:	fee68de3          	beq	a3,a4,8002b030 <atol+0x10>

  if (*str == '-' || *str == '+') {
    8002b03a:	02d00713          	li	a4,45
    8002b03e:	02e68f63          	beq	a3,a4,8002b07c <atol+0x5c>
    8002b042:	02b00713          	li	a4,43
    8002b046:	02e68563          	beq	a3,a4,8002b070 <atol+0x50>
  int sign = 0;
    8002b04a:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8002b04c:	ce8d                	beqz	a3,8002b086 <atol+0x66>
  int sign = 0;
    8002b04e:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8002b050:	0785                	addi	a5,a5,1
    8002b052:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002b056:	00251713          	slli	a4,a0,0x2
  while (*str) {
    8002b05a:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8002b05e:	972a                	add	a4,a4,a0
    8002b060:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    8002b062:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002b066:	f6ed                	bnez	a3,8002b050 <atol+0x30>
  }

  return sign ? -res : res;
    8002b068:	c185                	beqz	a1,8002b088 <atol+0x68>
    8002b06a:	40a00533          	neg	a0,a0
    8002b06e:	8082                	ret
  while (*str) {
    8002b070:	0017c683          	lbu	a3,1(a5)
    str++;
    8002b074:	0785                	addi	a5,a5,1
  while (*str) {
    8002b076:	ca81                	beqz	a3,8002b086 <atol+0x66>
    sign = *str == '-';
    8002b078:	4581                	li	a1,0
    8002b07a:	bfd1                	j	8002b04e <atol+0x2e>
  while (*str) {
    8002b07c:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8002b080:	4585                	li	a1,1
    str++;
    8002b082:	97ae                	add	a5,a5,a1
  while (*str) {
    8002b084:	f6e9                	bnez	a3,8002b04e <atol+0x2e>
  return sign ? -res : res;
    8002b086:	4501                	li	a0,0
}
    8002b088:	8082                	ret

000000008002b08a <_init>:

void _init(){

    8002b08a:	8082                	ret

000000008002b08c <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8002b08c:	f0810113          	addi	sp,sp,-248
    8002b090:	e006                	sd	ra,0(sp)
    8002b092:	e80e                	sd	gp,16(sp)
    8002b094:	ec12                	sd	tp,24(sp)
    8002b096:	f016                	sd	t0,32(sp)
    8002b098:	f41a                	sd	t1,40(sp)
    8002b09a:	f81e                	sd	t2,48(sp)
    8002b09c:	fc22                	sd	s0,56(sp)
    8002b09e:	e0a6                	sd	s1,64(sp)
    8002b0a0:	e4aa                	sd	a0,72(sp)
    8002b0a2:	e8ae                	sd	a1,80(sp)
    8002b0a4:	ecb2                	sd	a2,88(sp)
    8002b0a6:	f0b6                	sd	a3,96(sp)
    8002b0a8:	f4ba                	sd	a4,104(sp)
    8002b0aa:	f8be                	sd	a5,112(sp)
    8002b0ac:	fcc2                	sd	a6,120(sp)
    8002b0ae:	e146                	sd	a7,128(sp)
    8002b0b0:	e54a                	sd	s2,136(sp)
    8002b0b2:	e94e                	sd	s3,144(sp)
    8002b0b4:	ed52                	sd	s4,152(sp)
    8002b0b6:	f156                	sd	s5,160(sp)
    8002b0b8:	f55a                	sd	s6,168(sp)
    8002b0ba:	f95e                	sd	s7,176(sp)
    8002b0bc:	fd62                	sd	s8,184(sp)
    8002b0be:	e1e6                	sd	s9,192(sp)
    8002b0c0:	e5ea                	sd	s10,200(sp)
    8002b0c2:	e9ee                	sd	s11,208(sp)
    8002b0c4:	edf2                	sd	t3,216(sp)
    8002b0c6:	f1f6                	sd	t4,224(sp)
    8002b0c8:	f5fa                	sd	t5,232(sp)
    8002b0ca:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8002b0cc:	fc5d50ef          	jal	80001090 <mhandler>
    j _return
    8002b0d0:	a849                	j	8002b162 <_return>
    8002b0d2:	0001                	nop

000000008002b0d4 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002b0d4:	f0810113          	addi	sp,sp,-248
    8002b0d8:	e006                	sd	ra,0(sp)
    8002b0da:	e80e                	sd	gp,16(sp)
    8002b0dc:	ec12                	sd	tp,24(sp)
    8002b0de:	f016                	sd	t0,32(sp)
    8002b0e0:	f41a                	sd	t1,40(sp)
    8002b0e2:	f81e                	sd	t2,48(sp)
    8002b0e4:	fc22                	sd	s0,56(sp)
    8002b0e6:	e0a6                	sd	s1,64(sp)
    8002b0e8:	e4aa                	sd	a0,72(sp)
    8002b0ea:	e8ae                	sd	a1,80(sp)
    8002b0ec:	ecb2                	sd	a2,88(sp)
    8002b0ee:	f0b6                	sd	a3,96(sp)
    8002b0f0:	f4ba                	sd	a4,104(sp)
    8002b0f2:	f8be                	sd	a5,112(sp)
    8002b0f4:	fcc2                	sd	a6,120(sp)
    8002b0f6:	e146                	sd	a7,128(sp)
    8002b0f8:	e54a                	sd	s2,136(sp)
    8002b0fa:	e94e                	sd	s3,144(sp)
    8002b0fc:	ed52                	sd	s4,152(sp)
    8002b0fe:	f156                	sd	s5,160(sp)
    8002b100:	f55a                	sd	s6,168(sp)
    8002b102:	f95e                	sd	s7,176(sp)
    8002b104:	fd62                	sd	s8,184(sp)
    8002b106:	e1e6                	sd	s9,192(sp)
    8002b108:	e5ea                	sd	s10,200(sp)
    8002b10a:	e9ee                	sd	s11,208(sp)
    8002b10c:	edf2                	sd	t3,216(sp)
    8002b10e:	f1f6                	sd	t4,224(sp)
    8002b110:	f5fa                	sd	t5,232(sp)
    8002b112:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8002b114:	9aed60ef          	jal	800012c2 <hshandler>
    j _return
    8002b118:	a0a9                	j	8002b162 <_return>
    8002b11a:	0001                	nop

000000008002b11c <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8002b11c:	f0810113          	addi	sp,sp,-248
    8002b120:	e006                	sd	ra,0(sp)
    8002b122:	e80e                	sd	gp,16(sp)
    8002b124:	ec12                	sd	tp,24(sp)
    8002b126:	f016                	sd	t0,32(sp)
    8002b128:	f41a                	sd	t1,40(sp)
    8002b12a:	f81e                	sd	t2,48(sp)
    8002b12c:	fc22                	sd	s0,56(sp)
    8002b12e:	e0a6                	sd	s1,64(sp)
    8002b130:	e4aa                	sd	a0,72(sp)
    8002b132:	e8ae                	sd	a1,80(sp)
    8002b134:	ecb2                	sd	a2,88(sp)
    8002b136:	f0b6                	sd	a3,96(sp)
    8002b138:	f4ba                	sd	a4,104(sp)
    8002b13a:	f8be                	sd	a5,112(sp)
    8002b13c:	fcc2                	sd	a6,120(sp)
    8002b13e:	e146                	sd	a7,128(sp)
    8002b140:	e54a                	sd	s2,136(sp)
    8002b142:	e94e                	sd	s3,144(sp)
    8002b144:	ed52                	sd	s4,152(sp)
    8002b146:	f156                	sd	s5,160(sp)
    8002b148:	f55a                	sd	s6,168(sp)
    8002b14a:	f95e                	sd	s7,176(sp)
    8002b14c:	fd62                	sd	s8,184(sp)
    8002b14e:	e1e6                	sd	s9,192(sp)
    8002b150:	e5ea                	sd	s10,200(sp)
    8002b152:	e9ee                	sd	s11,208(sp)
    8002b154:	edf2                	sd	t3,216(sp)
    8002b156:	f1f6                	sd	t4,224(sp)
    8002b158:	f5fa                	sd	t5,232(sp)
    8002b15a:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8002b15c:	b98d60ef          	jal	800014f4 <vshandler>
    j _return
    8002b160:	a009                	j	8002b162 <_return>

000000008002b162 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002b162:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002b164:	04550563          	beq	a0,t0,8002b1ae <_return_from_m>

000000008002b168 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002b168:	6082                	ld	ra,0(sp)
    8002b16a:	61c2                	ld	gp,16(sp)
    8002b16c:	6262                	ld	tp,24(sp)
    8002b16e:	7282                	ld	t0,32(sp)
    8002b170:	7322                	ld	t1,40(sp)
    8002b172:	73c2                	ld	t2,48(sp)
    8002b174:	7462                	ld	s0,56(sp)
    8002b176:	6486                	ld	s1,64(sp)
    8002b178:	6526                	ld	a0,72(sp)
    8002b17a:	65c6                	ld	a1,80(sp)
    8002b17c:	6666                	ld	a2,88(sp)
    8002b17e:	7686                	ld	a3,96(sp)
    8002b180:	7726                	ld	a4,104(sp)
    8002b182:	77c6                	ld	a5,112(sp)
    8002b184:	7866                	ld	a6,120(sp)
    8002b186:	688a                	ld	a7,128(sp)
    8002b188:	692a                	ld	s2,136(sp)
    8002b18a:	69ca                	ld	s3,144(sp)
    8002b18c:	6a6a                	ld	s4,152(sp)
    8002b18e:	7a8a                	ld	s5,160(sp)
    8002b190:	7b2a                	ld	s6,168(sp)
    8002b192:	7bca                	ld	s7,176(sp)
    8002b194:	7c6a                	ld	s8,184(sp)
    8002b196:	6c8e                	ld	s9,192(sp)
    8002b198:	6d2e                	ld	s10,200(sp)
    8002b19a:	6dce                	ld	s11,208(sp)
    8002b19c:	6e6e                	ld	t3,216(sp)
    8002b19e:	7e8e                	ld	t4,224(sp)
    8002b1a0:	7f2e                	ld	t5,232(sp)
    8002b1a2:	7fce                	ld	t6,240(sp)
    8002b1a4:	0f810113          	addi	sp,sp,248
    sret
    8002b1a8:	10200073          	sret
    j   .
    8002b1ac:	a001                	j	8002b1ac <_return_from_s+0x44>

000000008002b1ae <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002b1ae:	6082                	ld	ra,0(sp)
    8002b1b0:	61c2                	ld	gp,16(sp)
    8002b1b2:	6262                	ld	tp,24(sp)
    8002b1b4:	7282                	ld	t0,32(sp)
    8002b1b6:	7322                	ld	t1,40(sp)
    8002b1b8:	73c2                	ld	t2,48(sp)
    8002b1ba:	7462                	ld	s0,56(sp)
    8002b1bc:	6486                	ld	s1,64(sp)
    8002b1be:	6526                	ld	a0,72(sp)
    8002b1c0:	65c6                	ld	a1,80(sp)
    8002b1c2:	6666                	ld	a2,88(sp)
    8002b1c4:	7686                	ld	a3,96(sp)
    8002b1c6:	7726                	ld	a4,104(sp)
    8002b1c8:	77c6                	ld	a5,112(sp)
    8002b1ca:	7866                	ld	a6,120(sp)
    8002b1cc:	688a                	ld	a7,128(sp)
    8002b1ce:	692a                	ld	s2,136(sp)
    8002b1d0:	69ca                	ld	s3,144(sp)
    8002b1d2:	6a6a                	ld	s4,152(sp)
    8002b1d4:	7a8a                	ld	s5,160(sp)
    8002b1d6:	7b2a                	ld	s6,168(sp)
    8002b1d8:	7bca                	ld	s7,176(sp)
    8002b1da:	7c6a                	ld	s8,184(sp)
    8002b1dc:	6c8e                	ld	s9,192(sp)
    8002b1de:	6d2e                	ld	s10,200(sp)
    8002b1e0:	6dce                	ld	s11,208(sp)
    8002b1e2:	6e6e                	ld	t3,216(sp)
    8002b1e4:	7e8e                	ld	t4,224(sp)
    8002b1e6:	7f2e                	ld	t5,232(sp)
    8002b1e8:	7fce                	ld	t6,240(sp)
    8002b1ea:	0f810113          	addi	sp,sp,248
    mret
    8002b1ee:	30200073          	mret

Disassembly of section .text.startup:

000000008002b1f2 <main>:


void main(){
    8002b1f2:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8002b1f4:	00002517          	auipc	a0,0x2
    8002b1f8:	28c50513          	addi	a0,a0,652 # 8002d480 <__func__.0+0x3c8>
void main(){
    8002b1fc:	ec06                	sd	ra,24(sp)
    8002b1fe:	e822                	sd	s0,16(sp)
    8002b200:	e426                	sd	s1,8(sp)
    8002b202:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8002b204:	c53ff0ef          	jal	8002ae56 <printf>
    8002b208:	4529                	li	a0,10
    8002b20a:	93bfe0ef          	jal	80029b44 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8002b20e:	afed50ef          	jal	8000050c <check_misa_h>
    8002b212:	c539                	beqz	a0,8002b260 <main+0x6e>
        reset_state();
    8002b214:	e10d60ef          	jal	80001824 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8002b218:	0000f497          	auipc	s1,0xf
    8002b21c:	74848493          	addi	s1,s1,1864 # 8003a960 <test_table_size>
    8002b220:	609c                	ld	a5,0(s1)
    8002b222:	4401                	li	s0,0
    8002b224:	0000f917          	auipc	s2,0xf
    8002b228:	74490913          	addi	s2,s2,1860 # 8003a968 <test_table>
    8002b22c:	cf91                	beqz	a5,8002b248 <main+0x56>
            reset_state();
    8002b22e:	df6d60ef          	jal	80001824 <reset_state>
            test_table[i]();
    8002b232:	00093783          	ld	a5,0(s2)
    8002b236:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8002b23a:	0405                	addi	s0,s0,1
            test_table[i]();
    8002b23c:	97ba                	add	a5,a5,a4
    8002b23e:	639c                	ld	a5,0(a5)
    8002b240:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8002b242:	609c                	ld	a5,0(s1)
    8002b244:	fef465e3          	bltu	s0,a5,8002b22e <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8002b248:	00002517          	auipc	a0,0x2
    8002b24c:	28850513          	addi	a0,a0,648 # 8002d4d0 <__func__.0+0x418>
    8002b250:	c07ff0ef          	jal	8002ae56 <printf>
    8002b254:	4529                	li	a0,10
    8002b256:	8effe0ef          	jal	80029b44 <putchar>
    exit(0);
    8002b25a:	4501                	li	a0,0
    8002b25c:	fb0ff0ef          	jal	8002aa0c <exit>
        printf("hypervisor extension is not supported!\n");
    8002b260:	00002517          	auipc	a0,0x2
    8002b264:	24850513          	addi	a0,a0,584 # 8002d4a8 <__func__.0+0x3f0>
    8002b268:	82bff0ef          	jal	8002aa92 <puts>
    8002b26c:	bff1                	j	8002b248 <main+0x56>
{
    8002b26e:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8002b270:	0000d517          	auipc	a0,0xd
    8002b274:	6a050513          	addi	a0,a0,1696 # 80038910 <__func__.0+0xb858>
{
    8002b278:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8002b27a:	fa8ff0ef          	jal	8002aa22 <printstr>
}
    8002b27e:	60a2                	ld	ra,8(sp)
    8002b280:	557d                	li	a0,-1
    8002b282:	0141                	addi	sp,sp,16
    8002b284:	8082                	ret
